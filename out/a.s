
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #100720,d0
       8:	       subi.l #100720,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 18970 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #100720,d0
      40:	       subi.l #100720,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 18970 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 50ac <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #100720,d0
      7e:	       subi.l #100720,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 18970 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 1125c <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 190fa <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 11274 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 18970 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 1125c <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 190fa <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 18970 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 1125c <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 190fa <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 14890 <PutChar+0x4>
     35c:	|  |              |   jsr 13db8 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 19102 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 19102 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 19102 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 19102 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 19102 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 19102 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 19102 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 148ba <PutChar+0x2e>
     834:	|   jsr 13db8 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 19102 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 148d6 <PutChar+0x4a>
     8a6:	|   jsr 13db8 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 19102 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 19102 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 19102 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 19102 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 19102 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 19102 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 19102 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 19102 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 190fa <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 19102 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 1125c <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 19102 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 190fa <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 190fa <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #84222,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 190fa <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 1490b <PutChar+0x7f>
     cea:	   |   jsr 13db8 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 14776 <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 14850 <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 14928 <PutChar+0x9c>
     d66:	|      jsr 13db8 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 190fa <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 190fa <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 190fa <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 1901a <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 71fc <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),1901a <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 1901e <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 19022 <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 1493b <PutChar+0xaf>
     de8:	jsr 13db8 <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     df4:	             lea -24(sp),sp
     df8:	             move.l a6,-(sp)

  if(CstPalette) FreeVec(CstPalette);
     dfa:	             move.l 1904a <CstPalette>,d0
     e00:	         /-- beq.s e1a <CstBlankScreen+0x26>
     e02:	         |   move.l 1904a <CstPalette>,12(sp)
     e0a:	         |   move.l 190fa <SysBase>,d0
     e10:	         |   movea.l d0,a6
     e12:	         |   movea.l 12(sp),a1
     e16:	         |   jsr -690(a6)
  CstPaletteLoaded = 0;
     e1a:	         \-> clr.w 1902e <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e20:	             move.l #14675968,8(sp)

  width /= 16;
     e28:	             move.l 32(sp),d0
     e2c:	             movea.l d0,a0
     e2e:	             cmpa.w #0,a0
     e32:	         /-- bge.s e38 <CstBlankScreen+0x44>
     e34:	         |   lea 15(a0),a0
     e38:	         \-> move.l a0,d0
     e3a:	             asr.l #4,d0
     e3c:	             move.l d0,32(sp)

  WaitBlit();
     e40:	             move.l 19106 <GfxBase>,d0
     e46:	             movea.l d0,a6
     e48:	             jsr -228(a6)

  //Both Buffers need to be done
  for(int i=0;i<2;i++) {
     e4c:	             clr.l 24(sp)
     e50:	   /-------- bra.w f2a <CstBlankScreen+0x136>
    custom->bltafwm = 0xffff;
     e54:	/--|-------> movea.l 8(sp),a0
     e58:	|  |         move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
     e5e:	|  |         movea.l 8(sp),a0
     e62:	|  |         move.w #-1,70(a0)
    custom->bltamod = 0;
     e68:	|  |         movea.l 8(sp),a0
     e6c:	|  |         move.w #0,100(a0)
    custom->bltbmod = 0;
     e72:	|  |         movea.l 8(sp),a0
     e76:	|  |         move.w #0,98(a0)
    custom->bltcmod = 0;
     e7c:	|  |         movea.l 8(sp),a0
     e80:	|  |         move.w #0,96(a0)
    custom->bltdmod = 0;
     e86:	|  |         movea.l 8(sp),a0
     e8a:	|  |         move.w #0,102(a0)
    custom->bltcon1 = 0;
     e90:	|  |         movea.l 8(sp),a0
     e94:	|  |         move.w #0,66(a0)
    custom->bltcon0 = 0x0100;
     e9a:	|  |         movea.l 8(sp),a0
     e9e:	|  |         move.w #256,64(a0)
    ULONG bltdpt = (ULONG) CstDrawBuffer;
     ea4:	|  |         move.l 19042 <CstDrawBuffer>,d0
     eaa:	|  |         move.l d0,20(sp)
    UWORD bltsize = height*64+width;    
     eae:	|  |         move.l 36(sp),d0
     eb2:	|  |         lsl.w #6,d0
     eb4:	|  |         move.l 32(sp),d1
     eb8:	|  |         movea.w d0,a0
     eba:	|  |         adda.w d1,a0
     ebc:	|  |         move.w a0,6(sp)
    UWORD blitsize = width*height*2;
     ec0:	|  |         move.l 32(sp),d1
     ec4:	|  |         move.l 36(sp),d0
     ec8:	|  |         muls.w d1,d0
     eca:	|  |         add.w d0,d0
     ecc:	|  |         move.w d0,4(sp)
    for(int i2=0;i2<5;i2++)
     ed0:	|  |         clr.l 16(sp)
     ed4:	|  |     /-- bra.s f06 <CstBlankScreen+0x112>
    {            
      custom->bltdpt = (APTR) bltdpt;
     ed6:	|  |  /--|-> move.l 20(sp),d0
     eda:	|  |  |  |   movea.l 8(sp),a0
     ede:	|  |  |  |   move.l d0,84(a0)
      custom->bltsize = bltsize;            
     ee2:	|  |  |  |   movea.l 8(sp),a0
     ee6:	|  |  |  |   move.w 6(sp),88(a0)
      WaitBlit();
     eec:	|  |  |  |   move.l 19106 <GfxBase>,d0
     ef2:	|  |  |  |   movea.l d0,a6
     ef4:	|  |  |  |   jsr -228(a6)
      bltdpt += blitsize;
     ef8:	|  |  |  |   moveq #0,d0
     efa:	|  |  |  |   move.w 4(sp),d0
     efe:	|  |  |  |   add.l d0,20(sp)
    for(int i2=0;i2<5;i2++)
     f02:	|  |  |  |   addq.l #1,16(sp)
     f06:	|  |  |  \-> moveq #4,d0
     f08:	|  |  |      cmp.l 16(sp),d0
     f0c:	|  |  \----- bge.s ed6 <CstBlankScreen+0xe2>
    }

    WaitBlit();
     f0e:	|  |         move.l 19106 <GfxBase>,d0
     f14:	|  |         movea.l d0,a6
     f16:	|  |         jsr -228(a6)
    WaitVbl();
     f1a:	|  |         jsr 13cec <WaitVbl>
    CstSwapBuffer();
     f20:	|  |         jsr 1884 <CstSwapBuffer>
  for(int i=0;i<2;i++) {
     f26:	|  |         addq.l #1,24(sp)
     f2a:	|  \-------> moveq #1,d0
     f2c:	|            cmp.l 24(sp),d0
     f30:	\----------- bge.w e54 <CstBlankScreen+0x60>
  }

}
     f34:	             nop
     f36:	             nop
     f38:	             movea.l (sp)+,a6
     f3a:	             lea 24(sp),sp
     f3e:	             rts

00000f40 <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     f40:	       lea -52(sp),sp
     f44:	       move.l a6,-(sp)
     f46:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     f48:	       move.l #400,32(sp)
     f50:	       moveq #2,d0
     f52:	       move.l d0,28(sp)
     f56:	       move.l 190fa <SysBase>,d0
     f5c:	       movea.l d0,a6
     f5e:	       move.l 32(sp),d0
     f62:	       move.l 28(sp),d1
     f66:	       jsr -198(a6)
     f6a:	       move.l d0,24(sp)
     f6e:	       move.l 24(sp),d0
     f72:	       move.l d0,20(sp)
  
  if( retval == 0) {
     f76:	   /-- bne.s fa0 <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
     f78:	   |   pea 28 <_start+0x28>
     f7c:	   |   pea 14974 <PutChar+0xe8>
     f82:	   |   jsr 13db8 <KPrintF>
     f88:	   |   addq.l #8,sp
    Exit(1);
     f8a:	   |   moveq #1,d1
     f8c:	   |   move.l d1,16(sp)
     f90:	   |   move.l 19102 <DOSBase>,d0
     f96:	   |   movea.l d0,a6
     f98:	   |   move.l 16(sp),d1
     f9c:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
     fa0:	   \-> move.l 20(sp),56(sp)

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
     fa6:	       move.l #100722,52(sp)
  for(int i=0; i<16;i++)
     fae:	       clr.l 48(sp)
     fb2:	   /-- bra.s fd8 <CstCreateCopperlist+0x98>
    *cl++ = *clpartinstruction++;
     fb4:	/--|-> move.l 52(sp),d1
     fb8:	|  |   move.l d1,d2
     fba:	|  |   addq.l #4,d2
     fbc:	|  |   move.l d2,52(sp)
     fc0:	|  |   move.l 56(sp),d0
     fc4:	|  |   move.l d0,d2
     fc6:	|  |   addq.l #4,d2
     fc8:	|  |   move.l d2,56(sp)
     fcc:	|  |   movea.l d1,a0
     fce:	|  |   move.l (a0),d1
     fd0:	|  |   movea.l d0,a0
     fd2:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
     fd4:	|  |   addq.l #1,48(sp)
     fd8:	|  \-> moveq #15,d0
     fda:	|      cmp.l 48(sp),d0
     fde:	\----- bge.s fb4 <CstCreateCopperlist+0x74>

  clpartinstruction = CstClScreen;
     fe0:	       move.l #100786,52(sp)

  for(int i=0; i<12;i++)
     fe8:	       clr.l 44(sp)
     fec:	   /-- bra.s 1012 <CstCreateCopperlist+0xd2>
    *cl++ = *clpartinstruction++;
     fee:	/--|-> move.l 52(sp),d1
     ff2:	|  |   move.l d1,d2
     ff4:	|  |   addq.l #4,d2
     ff6:	|  |   move.l d2,52(sp)
     ffa:	|  |   move.l 56(sp),d0
     ffe:	|  |   move.l d0,d2
    1000:	|  |   addq.l #4,d2
    1002:	|  |   move.l d2,56(sp)
    1006:	|  |   movea.l d1,a0
    1008:	|  |   move.l (a0),d1
    100a:	|  |   movea.l d0,a0
    100c:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    100e:	|  |   addq.l #1,44(sp)
    1012:	|  \-> moveq #11,d0
    1014:	|      cmp.l 44(sp),d0
    1018:	\----- bge.s fee <CstCreateCopperlist+0xae>

  clpartinstruction = CstClBitplanes;
    101a:	       move.l #100834,52(sp)
  for(int i=0; i<10;i++)
    1022:	       clr.l 40(sp)
    1026:	   /-- bra.s 104c <CstCreateCopperlist+0x10c>
    *cl++ = *clpartinstruction++;        
    1028:	/--|-> move.l 52(sp),d1
    102c:	|  |   move.l d1,d2
    102e:	|  |   addq.l #4,d2
    1030:	|  |   move.l d2,52(sp)
    1034:	|  |   move.l 56(sp),d0
    1038:	|  |   move.l d0,d2
    103a:	|  |   addq.l #4,d2
    103c:	|  |   move.l d2,56(sp)
    1040:	|  |   movea.l d1,a0
    1042:	|  |   move.l (a0),d1
    1044:	|  |   movea.l d0,a0
    1046:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1048:	|  |   addq.l #1,40(sp)
    104c:	|  \-> moveq #9,d0
    104e:	|      cmp.l 40(sp),d0
    1052:	\----- bge.s 1028 <CstCreateCopperlist+0xe8>

  
  clpartinstruction = CstClColorTemplate;
    1054:	       move.l #100874,52(sp)
  CstClColor = (UWORD *) cl;
    105c:	       move.l 56(sp),19046 <CstClColor>
  for(int i=0; i<32;i++)
    1064:	       clr.l 36(sp)
    1068:	   /-- bra.s 108e <CstCreateCopperlist+0x14e>
    *cl++ = *clpartinstruction++;        
    106a:	/--|-> move.l 52(sp),d1
    106e:	|  |   move.l d1,d2
    1070:	|  |   addq.l #4,d2
    1072:	|  |   move.l d2,52(sp)
    1076:	|  |   move.l 56(sp),d0
    107a:	|  |   move.l d0,d2
    107c:	|  |   addq.l #4,d2
    107e:	|  |   move.l d2,56(sp)
    1082:	|  |   movea.l d1,a0
    1084:	|  |   move.l (a0),d1
    1086:	|  |   movea.l d0,a0
    1088:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    108a:	|  |   addq.l #1,36(sp)
    108e:	|  \-> moveq #31,d0
    1090:	|      cmp.l 36(sp),d0
    1094:	\----- bge.s 106a <CstCreateCopperlist+0x12a>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1096:	       moveq #40,d1
    1098:	       cmp.l 64(sp),d1
    109c:	   /-- bge.s 10fa <CstCreateCopperlist+0x1ba>
    int tmp = width - 40;
    109e:	   |   moveq #-40,d2
    10a0:	   |   add.l 64(sp),d2
    10a4:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    10a8:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    10ae:	   |   move.l 8(sp),d0
    10b2:	   |   move.l d0,d1
    10b4:	   |   addq.l #2,d1
    10b6:	   |   move.l d1,8(sp)
    10ba:	   |   movea.l d0,a0
    10bc:	   |   move.w #264,(a0)
    *cw++ = tmp;
    10c0:	   |   move.l 8(sp),d0
    10c4:	   |   move.l d0,d1
    10c6:	   |   addq.l #2,d1
    10c8:	   |   move.l d1,8(sp)
    10cc:	   |   move.l 12(sp),d1
    10d0:	   |   movea.l d0,a0
    10d2:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    10d4:	   |   move.l 8(sp),d0
    10d8:	   |   move.l d0,d1
    10da:	   |   addq.l #2,d1
    10dc:	   |   move.l d1,8(sp)
    10e0:	   |   movea.l d0,a0
    10e2:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    10e6:	   |   move.l 8(sp),d0
    10ea:	   |   move.l d0,d1
    10ec:	   |   addq.l #2,d1
    10ee:	   |   move.l d1,8(sp)
    10f2:	   |   move.l 12(sp),d1
    10f6:	   |   movea.l d0,a0
    10f8:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    10fa:	   \-> move.l 56(sp),d0
    10fe:	       move.l d0,d1
    1100:	       addq.l #4,d1
    1102:	       move.l d1,56(sp)
    1106:	       moveq #-2,d2
    1108:	       movea.l d0,a0
    110a:	       move.l d2,(a0)
  return (UWORD *) retval;  
    110c:	       move.l 20(sp),d0
}
    1110:	       move.l (sp)+,d2
    1112:	       movea.l (sp)+,a6
    1114:	       lea 52(sp),sp
    1118:	       rts

0000111a <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    111a:	       lea -28(sp),sp
    111e:	       move.l d2,-(sp)
  ULONG *bplcursorsrc = (ULONG *) CstBackDrop;
    1120:	       move.l 19034 <CstBackDrop>,28(sp)
  ULONG *bplcursordst = (ULONG *) CstDrawBuffer;
    1128:	       move.l 19042 <CstDrawBuffer>,24(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    1130:	       clr.l 20(sp)
    1134:	   /-- bra.s 115a <CstDisplayBackDrop+0x40>
  {
    *bplcursordst++ = *bplcursorsrc++;
    1136:	/--|-> move.l 28(sp),d1
    113a:	|  |   move.l d1,d0
    113c:	|  |   addq.l #4,d0
    113e:	|  |   move.l d0,28(sp)
    1142:	|  |   move.l 24(sp),d0
    1146:	|  |   move.l d0,d2
    1148:	|  |   addq.l #4,d2
    114a:	|  |   move.l d2,24(sp)
    114e:	|  |   movea.l d1,a0
    1150:	|  |   move.l (a0),d1
    1152:	|  |   movea.l d0,a0
    1154:	|  |   move.l d1,(a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    1156:	|  |   addq.l #1,20(sp)
    115a:	|  \-> move.w 19030 <CstBackdropSize>,d0
    1160:	|      lsr.w #2,d0
    1162:	|      move.w d0,d0
    1164:	|      andi.l #65535,d0
    116a:	|      cmp.l 20(sp),d0
    116e:	\----- bgt.s 1136 <CstDisplayBackDrop+0x1c>
  }

  UWORD *tmp = CstClColor;
    1170:	       move.l 19046 <CstClColor>,16(sp)
  UWORD reg = 0x180;
    1178:	       move.w #384,14(sp)
  UWORD *colorpos = CstPalette;
    117e:	       move.l 1904a <CstPalette>,10(sp)

  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    1186:	       clr.l 6(sp)
    118a:	   /-- bra.s 11c6 <CstDisplayBackDrop+0xac>
    *tmp++ = reg;
    118c:	/--|-> move.l 16(sp),d0
    1190:	|  |   move.l d0,d1
    1192:	|  |   addq.l #2,d1
    1194:	|  |   move.l d1,16(sp)
    1198:	|  |   movea.l d0,a0
    119a:	|  |   move.w 14(sp),(a0)
    reg +=2;
    119e:	|  |   addq.w #2,14(sp)
    *tmp++ = *colorpos++;
    11a2:	|  |   move.l 10(sp),d1
    11a6:	|  |   move.l d1,d0
    11a8:	|  |   addq.l #2,d0
    11aa:	|  |   move.l d0,10(sp)
    11ae:	|  |   move.l 16(sp),d0
    11b2:	|  |   move.l d0,d2
    11b4:	|  |   addq.l #2,d2
    11b6:	|  |   move.l d2,16(sp)
    11ba:	|  |   movea.l d1,a0
    11bc:	|  |   move.w (a0),d1
    11be:	|  |   movea.l d0,a0
    11c0:	|  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    11c2:	|  |   addq.l #1,6(sp)
    11c6:	|  \-> moveq #31,d0
    11c8:	|      cmp.l 6(sp),d0
    11cc:	\----- bge.s 118c <CstDisplayBackDrop+0x72>
  }
}
    11ce:	       nop
    11d0:	       nop
    11d2:	       move.l (sp)+,d2
    11d4:	       lea 28(sp),sp
    11d8:	       rts

000011da <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    11da:	    move.w 1903c <CstApplyBackDropCounter>,d0
    11e0:	/-- ble.s 11f6 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    11e2:	|   jsr 111a <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    11e8:	|   move.w 1903c <CstApplyBackDropCounter>,d0
    11ee:	|   subq.w #1,d0
    11f0:	|   move.w d0,1903c <CstApplyBackDropCounter>
  }    
}
    11f6:	\-> nop
    11f8:	    rts

000011fa <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    11fa:	             lea -140(sp),sp
    11fe:	             movem.l d2-d4/a6,-(sp)
	KPrintF("CstLoadBackDrop: Loading of Background started");
    1202:	             pea 149af <PutChar+0x123>
    1208:	             jsr 13db8 <KPrintF>
    120e:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1210:	             move.l 160(sp),-(sp)
    1214:	             jsr 6bc <get2bytes>
    121a:	             addq.l #4,sp
    121c:	             move.w d0,130(sp)
  UWORD height = get2bytes(fp);  
    1220:	             move.l 160(sp),-(sp)
    1224:	             jsr 6bc <get2bytes>
    122a:	             addq.l #4,sp
    122c:	             move.w d0,128(sp)

  UWORD widthbyteslayer = width/8;
    1230:	             move.w 130(sp),d0
    1234:	             lsr.w #3,d0
    1236:	             move.w d0,126(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    123a:	             move.w 126(sp),d0
    123e:	             lsr.w #1,d0
    1240:	             move.w d0,124(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1244:	             move.l 1904e <winWidth>,d0
    124a:	             lsr.l #3,d0
    124c:	             move.w d0,122(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1250:	             move.w 126(sp),d0
    1254:	             muls.w 128(sp),d0
    1258:	             move.w d0,120(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    125c:	             move.w 120(sp),d1
    1260:	             move.w d1,d0
    1262:	             add.w d0,d0
    1264:	             add.w d0,d0
    1266:	             move.w d0,d2
    1268:	             add.w d1,d2
    126a:	             move.w d2,118(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    126e:	             move.w 1902e <CstPaletteLoaded>,d0
    1274:	/----------- bne.s 12ec <CstLoadBackdrop+0xf2>
  {    
    UWORD reg = 0x180;
    1276:	|            move.w #384,116(sp)
    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    127c:	|            moveq #64,d0
    127e:	|            move.l d0,112(sp)
    1282:	|            clr.l 108(sp)
    1286:	|            move.l 190fa <SysBase>,d0
    128c:	|            movea.l d0,a6
    128e:	|            move.l 112(sp),d0
    1292:	|            move.l 108(sp),d1
    1296:	|            jsr -684(a6)
    129a:	|            move.l d0,104(sp)
    129e:	|            move.l 104(sp),d0
    12a2:	|            move.l d0,1904a <CstPalette>
    CstPaletteLoaded = 1;
    12a8:	|            move.w #1,1902e <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    12b0:	|            move.l 1904a <CstPalette>,152(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12b8:	|            clr.l 148(sp)
    12bc:	|        /-- bra.s 12e2 <CstLoadBackdrop+0xe8>
      *tmp++ = get2bytes(fp);
    12be:	|     /--|-> move.l 160(sp),-(sp)
    12c2:	|     |  |   jsr 6bc <get2bytes>
    12c8:	|     |  |   addq.l #4,sp
    12ca:	|     |  |   move.l d0,d1
    12cc:	|     |  |   move.l 152(sp),d0
    12d0:	|     |  |   move.l d0,d2
    12d2:	|     |  |   addq.l #2,d2
    12d4:	|     |  |   move.l d2,152(sp)
    12d8:	|     |  |   move.l d1,d1
    12da:	|     |  |   movea.l d0,a0
    12dc:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12de:	|     |  |   addq.l #1,148(sp)
    12e2:	|     |  \-> moveq #31,d0
    12e4:	|     |      cmp.l 148(sp),d0
    12e8:	|     \----- bge.s 12be <CstLoadBackdrop+0xc4>
    12ea:	|  /-------- bra.s 130a <CstLoadBackdrop+0x110>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12ec:	\--|-------> clr.l 144(sp)
    12f0:	   |     /-- bra.s 1302 <CstLoadBackdrop+0x108>
      get2bytes(fp);
    12f2:	   |  /--|-> move.l 160(sp),-(sp)
    12f6:	   |  |  |   jsr 6bc <get2bytes>
    12fc:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12fe:	   |  |  |   addq.l #1,144(sp)
    1302:	   |  |  \-> moveq #31,d2
    1304:	   |  |      cmp.l 144(sp),d2
    1308:	   |  \----- bge.s 12f2 <CstLoadBackdrop+0xf8>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    130a:	   \-------> moveq #0,d0
    130c:	             move.w 118(sp),d0
    1310:	             move.l d0,100(sp)
    1314:	             moveq #2,d0
    1316:	             move.l d0,96(sp)
    131a:	             move.l 190fa <SysBase>,d0
    1320:	             movea.l d0,a6
    1322:	             move.l 100(sp),d0
    1326:	             move.l 96(sp),d1
    132a:	             jsr -684(a6)
    132e:	             move.l d0,92(sp)
    1332:	             move.l 92(sp),d0
    1336:	             move.l d0,88(sp)
   UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    133a:	             moveq #0,d0
    133c:	             move.w 120(sp),d0
    1340:	             move.l d0,84(sp)
    1344:	             moveq #2,d2
    1346:	             move.l d2,80(sp)
    134a:	             move.l 190fa <SysBase>,d0
    1350:	             movea.l d0,a6
    1352:	             move.l 84(sp),d0
    1356:	             move.l 80(sp),d1
    135a:	             jsr -684(a6)
    135e:	             move.l d0,76(sp)
    1362:	             move.l 76(sp),d0
    1366:	             move.l d0,72(sp)

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    136a:	             move.w 128(sp),d0
    136e:	             movea.w d0,a1
    1370:	             move.w 130(sp),d0
    1374:	             movea.w d0,a0
    1376:	             clr.l -(sp)
    1378:	             pea 5 <_start+0x5>
    137c:	             move.l a1,-(sp)
    137e:	             move.l a0,-(sp)
    1380:	             pea 149de <PutChar+0x152>
    1386:	             move.l 108(sp),-(sp)
    138a:	             jsr 13ea0 <debug_register_bitmap>
    1390:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    1394:	             move.w 128(sp),d0
    1398:	             movea.w d0,a1
    139a:	             move.w 130(sp),d0
    139e:	             movea.w d0,a0
    13a0:	             clr.l -(sp)
    13a2:	             pea 1 <_start+0x1>
    13a6:	             move.l a1,-(sp)
    13a8:	             move.l a0,-(sp)
    13aa:	             pea 149ec <PutChar+0x160>
    13b0:	             move.l 108(sp),-(sp)
    13b4:	             jsr 13ea0 <debug_register_bitmap>
    13ba:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    13be:	             move.l 160(sp),68(sp)
    13c4:	             move.l 88(sp),64(sp)
    13ca:	             moveq #2,d0
    13cc:	             move.l d0,60(sp)
    13d0:	             move.w 118(sp),d0
    13d4:	             lsr.w #1,d0
    13d6:	             move.w d0,d0
    13d8:	             andi.l #65535,d0
    13de:	             move.l d0,56(sp)
    13e2:	             move.l 19102 <DOSBase>,d0
    13e8:	             movea.l d0,a6
    13ea:	             move.l 68(sp),d1
    13ee:	             move.l 64(sp),d2
    13f2:	             move.l 60(sp),d3
    13f6:	             move.l 56(sp),d4
    13fa:	             jsr -324(a6)
    13fe:	             move.l d0,52(sp)
    1402:	             move.l 52(sp),d0
    1406:	             move.w d0,50(sp)
  if(!count) {
    140a:	         /-- bne.s 141e <CstLoadBackdrop+0x224>
    KPrintF("Error while reading stream");
    140c:	         |   pea 149f8 <PutChar+0x16c>
    1412:	         |   jsr 13db8 <KPrintF>
    1418:	         |   addq.l #4,sp
    return;
    141a:	   /-----|-- bra.w 15fe <CstLoadBackdrop+0x404>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    141e:	   |     \-> move.l 160(sp),46(sp)
    1424:	   |         move.l 72(sp),42(sp)
    142a:	   |         moveq #2,d2
    142c:	   |         move.l d2,38(sp)
    1430:	   |         move.w 120(sp),d0
    1434:	   |         lsr.w #1,d0
    1436:	   |         move.w d0,d0
    1438:	   |         andi.l #65535,d0
    143e:	   |         move.l d0,34(sp)
    1442:	   |         move.l 19102 <DOSBase>,d0
    1448:	   |         movea.l d0,a6
    144a:	   |         move.l 46(sp),d1
    144e:	   |         move.l 42(sp),d2
    1452:	   |         move.l 38(sp),d3
    1456:	   |         move.l 34(sp),d4
    145a:	   |         jsr -324(a6)
    145e:	   |         move.l d0,30(sp)
    1462:	   |         move.l 30(sp),d0
    1466:	   |         move.w d0,50(sp)
   

  if(!count) {
    146a:	   |     /-- bne.s 147e <CstLoadBackdrop+0x284>
    KPrintF("Error while reading stream");
    146c:	   |     |   pea 149f8 <PutChar+0x16c>
    1472:	   |     |   jsr 13db8 <KPrintF>
    1478:	   |     |   addq.l #4,sp
    return;
    147a:	   +-----|-- bra.w 15fe <CstLoadBackdrop+0x404>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    147e:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    1486:	   |         move.l 19034 <CstBackDrop>,d0
    148c:	   |         move.l d0,140(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    1490:	   |         move.l 168(sp),d0
    1494:	   |         move.w d0,d1
    1496:	   |         muls.w 122(sp),d1
    149a:	   |         move.l 164(sp),d0
    149e:	   |     /-- bpl.s 14a2 <CstLoadBackdrop+0x2a8>
    14a0:	   |     |   addq.l #7,d0
    14a2:	   |     \-> asr.l #3,d0
    14a4:	   |         move.l d0,d0
    14a6:	   |         movea.w d1,a0
    14a8:	   |         adda.w d0,a0
    14aa:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    14ae:	   |         moveq #0,d0
    14b0:	   |         move.w 24(sp),d0
    14b4:	   |         add.l d0,140(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    14b8:	   |         pea 14a13 <PutChar+0x187>
    14be:	   |         jsr 13db8 <KPrintF>
    14c4:	   |         addq.l #4,sp


  WaitBlit();
    14c6:	   |         move.l 19106 <GfxBase>,d0
    14cc:	   |         movea.l d0,a6
    14ce:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    14d2:	   |         movea.l 26(sp),a0
    14d6:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    14dc:	   |         movea.l 26(sp),a0
    14e0:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    14e6:	   |         movea.l 26(sp),a0
    14ea:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    14f0:	   |         movea.l 26(sp),a0
    14f4:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    14fa:	   |         move.w 122(sp),d0
    14fe:	   |         sub.w 126(sp),d0
    1502:	   |         movea.l 26(sp),a0
    1506:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    150a:	   |         move.w 122(sp),d0
    150e:	   |         sub.w 126(sp),d0
    1512:	   |         movea.l 26(sp),a0
    1516:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    151a:	   |         movea.l 26(sp),a0
    151e:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    1524:	   |         movea.l 26(sp),a0
    1528:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    152e:	   |         move.l 88(sp),136(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1534:	   |         clr.l 132(sp)
    1538:	   |     /-- bra.s 159a <CstLoadBackdrop+0x3a0>
  {    
    custom->bltapt = (APTR) tmpmask;
    153a:	   |  /--|-> movea.l 26(sp),a0
    153e:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    1544:	   |  |  |   move.l 136(sp),d0
    1548:	   |  |  |   movea.l 26(sp),a0
    154c:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    1550:	   |  |  |   move.l 140(sp),d0
    1554:	   |  |  |   movea.l 26(sp),a0
    1558:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    155c:	   |  |  |   move.l 140(sp),d0
    1560:	   |  |  |   movea.l 26(sp),a0
    1564:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    1568:	   |  |  |   move.w 128(sp),d0
    156c:	   |  |  |   lsl.w #6,d0
    156e:	   |  |  |   add.w 124(sp),d0
    1572:	   |  |  |   movea.l 26(sp),a0
    1576:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    157a:	   |  |  |   moveq #0,d0
    157c:	   |  |  |   move.w 120(sp),d0
    1580:	   |  |  |   add.l d0,136(sp)
    backdropcursor += CstBackdropSizePlane;
    1584:	   |  |  |   move.w 19032 <CstBackdropSizePlane>,d0
    158a:	   |  |  |   move.w d0,d0
    158c:	   |  |  |   andi.l #65535,d0
    1592:	   |  |  |   add.l d0,140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1596:	   |  |  |   addq.l #1,132(sp)
    159a:	   |  |  \-> moveq #4,d0
    159c:	   |  |      cmp.l 132(sp),d0
    15a0:	   |  \----- bge.s 153a <CstLoadBackdrop+0x340>
  }    

  WaitBlit();
    15a2:	   |         move.l 19106 <GfxBase>,d0
    15a8:	   |         movea.l d0,a6
    15aa:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    15ae:	   |         pea 14a32 <PutChar+0x1a6>
    15b4:	   |         jsr 13db8 <KPrintF>
    15ba:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    15bc:	   |         move.l 88(sp),20(sp)
    15c2:	   |         move.l 190fa <SysBase>,d0
    15c8:	   |         movea.l d0,a6
    15ca:	   |         movea.l 20(sp),a1
    15ce:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    15d2:	   |         move.l 72(sp),16(sp)
    15d8:	   |         move.l 190fa <SysBase>,d0
    15de:	   |         movea.l d0,a6
    15e0:	   |         movea.l 16(sp),a1
    15e4:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    15e8:	   |         move.w #2,1903c <CstApplyBackDropCounter>

  KPrintF("CstLoadBackDrop: Finished");
    15f0:	   |         pea 14a52 <PutChar+0x1c6>
    15f6:	   |         jsr 13db8 <KPrintF>
    15fc:	   |         addq.l #4,sp

}
    15fe:	   \-------> movem.l (sp)+,d2-d4/a6
    1602:	             lea 140(sp),sp
    1606:	             rts

00001608 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, UWORD x, UWORD y)
{
    1608:	       lea -40(sp),sp
    160c:	       move.l a6,-(sp)
    160e:	       move.l d2,-(sp)
    1610:	       move.l 56(sp),d1
    1614:	       move.l 60(sp),d0
    1618:	       move.w d1,d1
    161a:	       move.w d1,12(sp)
    161e:	       move.w d0,d0
    1620:	       move.w d0,10(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1624:	       move.l #14675968,28(sp)

  WaitBlit();
    162c:	       move.l 19106 <GfxBase>,d0
    1632:	       movea.l d0,a6
    1634:	       jsr -228(a6)

  UWORD wordx = x >> 3; //Get Bytes
    1638:	       move.w 12(sp),d0
    163c:	       lsr.w #3,d0
    163e:	       move.w d0,26(sp)
  UWORD modwordx = x - (wordx << 3);
    1642:	       move.w 26(sp),d0
    1646:	       lsl.w #3,d0
    1648:	       move.w 12(sp),d1
    164c:	       sub.w d0,d1
    164e:	       move.w d1,24(sp)
  UWORD bltwidthsprite = (single->width >> 4);
    1652:	       movea.l 52(sp),a0
    1656:	       move.l (a0),d0
    1658:	       asr.l #4,d0
    165a:	       move.w d0,22(sp)
  UWORD widthbytesbackdrop = winWidth >> 3;
    165e:	       move.l 1904e <winWidth>,d0
    1664:	       lsr.l #3,d0
    1666:	       move.w d0,20(sp)

  bltwidthsprite += 1; //Extra word needs to be written because of shift
    166a:	       addq.w #1,22(sp)
  custom->bltafwm = 0xffff;
    166e:	       movea.l 28(sp),a0
    1672:	       move.w #-1,68(a0)
  custom->bltalwm = 0x0; //Mask out Last Word of Achannel
    1678:	       movea.l 28(sp),a0
    167c:	       move.w #0,70(a0)
  custom->bltamod = -2; //Word is used for next line instead     
    1682:	       movea.l 28(sp),a0
    1686:	       move.w #-2,100(a0)
  custom->bltbmod = -2; //Word is used for next line instead   
    168c:	       movea.l 28(sp),a0
    1690:	       move.w #-2,98(a0)
  custom->bltcmod = widthbytesbackdrop - bltwidthsprite*2;
    1696:	       move.w 22(sp),d0
    169a:	       add.w d0,d0
    169c:	       move.w d0,d1
    169e:	       move.w 20(sp),d0
    16a2:	       sub.w d1,d0
    16a4:	       movea.l 28(sp),a0
    16a8:	       move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - bltwidthsprite*2;    
    16ac:	       move.w 22(sp),d0
    16b0:	       add.w d0,d0
    16b2:	       move.w d0,d1
    16b4:	       move.w 20(sp),d0
    16b8:	       sub.w d1,d0
    16ba:	       movea.l 28(sp),a0
    16be:	       move.w d0,102(a0)
  UWORD bltcon0 = 0xfca + (modwordx << 12);
    16c2:	       move.w 24(sp),d0
    16c6:	       moveq #12,d2
    16c8:	       lsl.w d2,d0
    16ca:	       move.w d0,d1
    16cc:	       addi.w #4042,d1
    16d0:	       move.w d1,18(sp)
  custom->bltcon0 = 0xfca + (modwordx << 12); // Cookie Cut and Shift of Mask
    16d4:	       move.w 24(sp),d0
    16d8:	       moveq #12,d2
    16da:	       lsl.w d2,d0
    16dc:	       addi.w #4042,d0
    16e0:	       movea.l 28(sp),a0
    16e4:	       move.w d0,64(a0)
  custom->bltcon1 = (modwordx << 12);
    16e8:	       move.w 24(sp),d0
    16ec:	       moveq #12,d1
    16ee:	       lsl.w d1,d0
    16f0:	       movea.l 28(sp),a0
    16f4:	       move.w d0,66(a0)

  ULONG bltapt = ((ULONG) single->data) + (single->width >> 3)*single->height*5;
    16f8:	       movea.l 52(sp),a0
    16fc:	       move.l 24(a0),d0
    1700:	       move.l d0,d2
    1702:	       movea.l 52(sp),a0
    1706:	       move.l (a0),d0
    1708:	       asr.l #3,d0
    170a:	       movea.l 52(sp),a0
    170e:	       move.l 4(a0),d1
    1712:	       move.l d1,-(sp)
    1714:	       move.l d0,-(sp)
    1716:	       jsr 14776 <__mulsi3>
    171c:	       addq.l #8,sp
    171e:	       move.l d0,d1
    1720:	       move.l d1,d0
    1722:	       add.l d0,d0
    1724:	       add.l d0,d0
    1726:	       add.l d1,d0
    1728:	       move.l d2,d1
    172a:	       add.l d0,d1
    172c:	       move.l d1,14(sp)
  ULONG bltbpt =  (ULONG) single->data;
    1730:	       movea.l 52(sp),a0
    1734:	       move.l 24(a0),d0
    1738:	       move.l d0,44(sp)
  ULONG bltcpt = ((ULONG) CstBackDrop) + y*widthbytesbackdrop + wordx;
    173c:	       moveq #0,d0
    173e:	       move.w 10(sp),d0
    1742:	       moveq #0,d1
    1744:	       move.w 20(sp),d1
    1748:	       move.l d1,-(sp)
    174a:	       move.l d0,-(sp)
    174c:	       jsr 14776 <__mulsi3>
    1752:	       addq.l #8,sp
    1754:	       move.l d0,d1
    1756:	       move.l 19034 <CstBackDrop>,d0
    175c:	       add.l d0,d1
    175e:	       moveq #0,d0
    1760:	       move.w 26(sp),d0
    1764:	       move.l d1,d2
    1766:	       add.l d0,d2
    1768:	       move.l d2,40(sp)
  ULONG bltdpt = ((ULONG) CstDrawBuffer) + y*widthbytesbackdrop + wordx;
    176c:	       moveq #0,d0
    176e:	       move.w 10(sp),d0
    1772:	       moveq #0,d1
    1774:	       move.w 20(sp),d1
    1778:	       move.l d1,-(sp)
    177a:	       move.l d0,-(sp)
    177c:	       jsr 14776 <__mulsi3>
    1782:	       addq.l #8,sp
    1784:	       move.l d0,d1
    1786:	       move.l 19042 <CstDrawBuffer>,d0
    178c:	       add.l d0,d1
    178e:	       moveq #0,d0
    1790:	       move.w 26(sp),d0
    1794:	       move.l d1,d2
    1796:	       add.l d0,d2
    1798:	       move.l d2,36(sp)
 
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    179c:	       clr.l 32(sp)
    17a0:	   /-- bra.w 1854 <CstScaleSprite+0x24c>
  {
    custom->bltapt = (APTR) bltapt;
    17a4:	/--|-> move.l 14(sp),d0
    17a8:	|  |   movea.l 28(sp),a0
    17ac:	|  |   move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    17b0:	|  |   move.l 44(sp),d0
    17b4:	|  |   movea.l 28(sp),a0
    17b8:	|  |   move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    17bc:	|  |   move.l 40(sp),d0
    17c0:	|  |   movea.l 28(sp),a0
    17c4:	|  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    17c8:	|  |   move.l 36(sp),d0
    17cc:	|  |   movea.l 28(sp),a0
    17d0:	|  |   move.l d0,84(a0)
    custom->bltsize = (single->height << 6) + bltwidthsprite;
    17d4:	|  |   movea.l 52(sp),a0
    17d8:	|  |   move.l 4(a0),d0
    17dc:	|  |   move.l d0,d0
    17de:	|  |   lsl.w #6,d0
    17e0:	|  |   add.w 22(sp),d0
    17e4:	|  |   movea.l 28(sp),a0
    17e8:	|  |   move.w d0,88(a0)
    bltbpt += (single->width >> 3)*single->height;
    17ec:	|  |   movea.l 52(sp),a0
    17f0:	|  |   move.l (a0),d0
    17f2:	|  |   asr.l #3,d0
    17f4:	|  |   movea.l 52(sp),a0
    17f8:	|  |   move.l 4(a0),d1
    17fc:	|  |   move.l d1,-(sp)
    17fe:	|  |   move.l d0,-(sp)
    1800:	|  |   jsr 14776 <__mulsi3>
    1806:	|  |   addq.l #8,sp
    1808:	|  |   add.l d0,44(sp)
    bltcpt += widthbytesbackdrop*winHeight;
    180c:	|  |   moveq #0,d0
    180e:	|  |   move.w 20(sp),d0
    1812:	|  |   move.l 19052 <winHeight>,d1
    1818:	|  |   move.l d1,-(sp)
    181a:	|  |   move.l d0,-(sp)
    181c:	|  |   jsr 14776 <__mulsi3>
    1822:	|  |   addq.l #8,sp
    1824:	|  |   add.l d0,40(sp)
    bltdpt += widthbytesbackdrop*winHeight;
    1828:	|  |   moveq #0,d0
    182a:	|  |   move.w 20(sp),d0
    182e:	|  |   move.l 19052 <winHeight>,d1
    1834:	|  |   move.l d1,-(sp)
    1836:	|  |   move.l d0,-(sp)
    1838:	|  |   jsr 14776 <__mulsi3>
    183e:	|  |   addq.l #8,sp
    1840:	|  |   add.l d0,36(sp)
    WaitBlit();
    1844:	|  |   move.l 19106 <GfxBase>,d0
    184a:	|  |   movea.l d0,a6
    184c:	|  |   jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1850:	|  |   addq.l #1,32(sp)
    1854:	|  \-> moveq #4,d0
    1856:	|      cmp.l 32(sp),d0
    185a:	\----- bge.w 17a4 <CstScaleSprite+0x19c>
  } 
}
    185e:	       nop
    1860:	       nop
    1862:	       move.l (sp)+,d2
    1864:	       movea.l (sp)+,a6
    1866:	       lea 40(sp),sp
    186a:	       rts

0000186c <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    186c:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    186e:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    1874:	move.l 8(sp),d0
    1878:	movea.l (sp),a0
    187a:	move.l d0,128(a0)
}
    187e:	nop
    1880:	addq.l #4,sp
    1882:	rts

00001884 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    1884:	lea -16(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    1888:	move.l 1903e <CstViewBuffer>,12(sp)
  CstViewBuffer = CstDrawBuffer;
    1890:	move.l 19042 <CstDrawBuffer>,d0
    1896:	move.l d0,1903e <CstViewBuffer>
  CstDrawBuffer = tmp;
    189c:	move.l 12(sp),19042 <CstDrawBuffer>

  UWORD *copword = CstCopperList;
    18a4:	move.l 19038 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    18ac:	move.l 1903e <CstViewBuffer>,d0
    18b2:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    18b6:	move.l 4(sp),d0
    18ba:	clr.w d0
    18bc:	swap d0
    18be:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    18c2:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    18c6:	movea.w #118,a0
    18ca:	adda.l 8(sp),a0
    18ce:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    18d0:	movea.w #114,a0
    18d4:	adda.l 8(sp),a0
    18d8:	move.w 2(sp),(a0)

  ptr +=  40*256;
    18dc:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    18e4:	move.l 4(sp),d0
    18e8:	clr.w d0
    18ea:	swap d0
    18ec:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    18f0:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    18f4:	movea.w #126,a0
    18f8:	adda.l 8(sp),a0
    18fc:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    18fe:	movea.w #122,a0
    1902:	adda.l 8(sp),a0
    1906:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    190a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1912:	move.l 4(sp),d0
    1916:	clr.w d0
    1918:	swap d0
    191a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    191e:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    1922:	movea.l 8(sp),a0
    1926:	lea 134(a0),a0
    192a:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    192c:	movea.l 8(sp),a0
    1930:	lea 130(a0),a0
    1934:	move.w 2(sp),(a0)

  ptr +=  40*256;
    1938:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1940:	move.l 4(sp),d0
    1944:	clr.w d0
    1946:	swap d0
    1948:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    194c:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    1950:	movea.l 8(sp),a0
    1954:	lea 142(a0),a0
    1958:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    195a:	movea.l 8(sp),a0
    195e:	lea 138(a0),a0
    1962:	move.w 2(sp),(a0)

  ptr +=  40*256;
    1966:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    196e:	move.l 4(sp),d0
    1972:	clr.w d0
    1974:	swap d0
    1976:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    197a:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    197e:	movea.l 8(sp),a0
    1982:	lea 150(a0),a0
    1986:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    1988:	movea.l 8(sp),a0
    198c:	lea 146(a0),a0
    1990:	move.w 2(sp),(a0)

}
    1994:	nop
    1996:	lea 16(sp),sp
    199a:	rts

0000199c <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    199c:	          lea -44(sp),sp
    19a0:	          move.l a6,-(sp)

  width = width / 8;
    19a2:	          move.l 52(sp),d0
    19a6:	      /-- bpl.s 19aa <CstReserveBackdrop+0xe>
    19a8:	      |   addq.l #7,d0
    19aa:	      \-> asr.l #3,d0
    19ac:	          move.l d0,52(sp)

  if( width < 40) 
    19b0:	          moveq #39,d0
    19b2:	          cmp.l 52(sp),d0
    19b6:	      /-- blt.s 19cc <CstReserveBackdrop+0x30>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    19b8:	      |   pea 14a6c <PutChar+0x1e0>
    19be:	      |   jsr 13db8 <KPrintF>
    19c4:	      |   addq.l #4,sp
    return FALSE;
    19c6:	      |   clr.w d0
    19c8:	/-----|-- bra.w 1bc6 <CstReserveBackdrop+0x22a>
  }  

  CstCopperList = CstCreateCopperlist( width);
    19cc:	|     \-> move.l 52(sp),-(sp)
    19d0:	|         jsr f40 <CstCreateCopperlist>
    19d6:	|         addq.l #4,sp
    19d8:	|         move.l d0,19038 <CstCopperList>
  CstBackdropSizePlane = width*height;
    19de:	|         move.l 52(sp),d1
    19e2:	|         move.l 56(sp),d0
    19e6:	|         muls.w d1,d0
    19e8:	|         move.w d0,19032 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;
    19ee:	|         move.w 19032 <CstBackdropSizePlane>,d1
    19f4:	|         move.w d1,d0
    19f6:	|         add.w d0,d0
    19f8:	|         add.w d0,d0
    19fa:	|         add.w d1,d0
    19fc:	|         move.w d0,19030 <CstBackdropSize>

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    1a02:	|         move.w 19030 <CstBackdropSize>,d0
    1a08:	|         move.w d0,d0
    1a0a:	|         andi.l #65535,d0
    1a10:	|         move.l d0,36(sp)
    1a14:	|         moveq #2,d1
    1a16:	|         move.l d1,32(sp)
    1a1a:	|         move.l 190fa <SysBase>,d0
    1a20:	|         movea.l d0,a6
    1a22:	|         move.l 36(sp),d0
    1a26:	|         move.l 32(sp),d1
    1a2a:	|         jsr -684(a6)
    1a2e:	|         move.l d0,28(sp)
    1a32:	|         move.l 28(sp),d0
    1a36:	|         move.l d0,19034 <CstBackDrop>
  if( !CstBackDrop)
    1a3c:	|         move.l 19034 <CstBackDrop>,d0
    1a42:	|     /-- bne.s 1a58 <CstReserveBackdrop+0xbc>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    1a44:	|     |   pea 14aaa <PutChar+0x21e>
    1a4a:	|     |   jsr 13db8 <KPrintF>
    1a50:	|     |   addq.l #4,sp
    return FALSE;  
    1a52:	|     |   clr.w d0
    1a54:	+-----|-- bra.w 1bc6 <CstReserveBackdrop+0x22a>
  }

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    1a58:	|     \-> move.l 19034 <CstBackDrop>,44(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    1a60:	|         clr.l 40(sp)
    1a64:	|     /-- bra.s 1a7a <CstReserveBackdrop+0xde>
  {
    *cursor++ = 0;
    1a66:	|  /--|-> move.l 44(sp),d0
    1a6a:	|  |  |   move.l d0,d1
    1a6c:	|  |  |   addq.l #4,d1
    1a6e:	|  |  |   move.l d1,44(sp)
    1a72:	|  |  |   movea.l d0,a0
    1a74:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    1a76:	|  |  |   addq.l #1,40(sp)
    1a7a:	|  |  \-> move.w 19030 <CstBackdropSize>,d0
    1a80:	|  |      lsr.w #2,d0
    1a82:	|  |      move.w d0,d0
    1a84:	|  |      andi.l #65535,d0
    1a8a:	|  |      cmp.l 40(sp),d0
    1a8e:	|  \----- bgt.s 1a66 <CstReserveBackdrop+0xca>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize,MEMF_CHIP);
    1a90:	|         move.w 19030 <CstBackdropSize>,d0
    1a96:	|         move.w d0,d0
    1a98:	|         andi.l #65535,d0
    1a9e:	|         move.l d0,24(sp)
    1aa2:	|         moveq #2,d0
    1aa4:	|         move.l d0,20(sp)
    1aa8:	|         move.l 190fa <SysBase>,d0
    1aae:	|         movea.l d0,a6
    1ab0:	|         move.l 24(sp),d0
    1ab4:	|         move.l 20(sp),d1
    1ab8:	|         jsr -684(a6)
    1abc:	|         move.l d0,16(sp)
    1ac0:	|         move.l 16(sp),d0
    1ac4:	|         move.l d0,19042 <CstDrawBuffer>
  CstViewBuffer = AllocVec(CstBackdropSize,MEMF_CHIP);
    1aca:	|         move.w 19030 <CstBackdropSize>,d0
    1ad0:	|         move.w d0,d0
    1ad2:	|         andi.l #65535,d0
    1ad8:	|         move.l d0,12(sp)
    1adc:	|         moveq #2,d1
    1ade:	|         move.l d1,8(sp)
    1ae2:	|         move.l 190fa <SysBase>,d0
    1ae8:	|         movea.l d0,a6
    1aea:	|         move.l 12(sp),d0
    1aee:	|         move.l 8(sp),d1
    1af2:	|         jsr -684(a6)
    1af6:	|         move.l d0,4(sp)
    1afa:	|         move.l 4(sp),d0
    1afe:	|         move.l d0,1903e <CstViewBuffer>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    1b04:	|         move.l 19034 <CstBackDrop>,d0
    1b0a:	|         clr.l -(sp)
    1b0c:	|         pea 5 <_start+0x5>
    1b10:	|         pea 100 <copyString+0x48>
    1b14:	|         pea 140 <decodeFilename+0x28>
    1b18:	|         pea 14ae2 <PutChar+0x256>
    1b1e:	|         move.l d0,-(sp)
    1b20:	|         jsr 13ea0 <debug_register_bitmap>
    1b26:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    1b2a:	|         move.l 56(sp),d0
    1b2e:	|         movea.w d0,a1
    1b30:	|         move.l 52(sp),d0
    1b34:	|         lsl.w #3,d0
    1b36:	|         movea.w d0,a0
    1b38:	|         move.l 19042 <CstDrawBuffer>,d0
    1b3e:	|         clr.l -(sp)
    1b40:	|         pea 5 <_start+0x5>
    1b44:	|         move.l a1,-(sp)
    1b46:	|         move.l a0,-(sp)
    1b48:	|         pea 14af2 <PutChar+0x266>
    1b4e:	|         move.l d0,-(sp)
    1b50:	|         jsr 13ea0 <debug_register_bitmap>
    1b56:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    1b5a:	|         move.l 56(sp),d0
    1b5e:	|         movea.w d0,a1
    1b60:	|         move.l 52(sp),d0
    1b64:	|         lsl.w #3,d0
    1b66:	|         movea.w d0,a0
    1b68:	|         move.l 1903e <CstViewBuffer>,d0
    1b6e:	|         clr.l -(sp)
    1b70:	|         pea 5 <_start+0x5>
    1b74:	|         move.l a1,-(sp)
    1b76:	|         move.l a0,-(sp)
    1b78:	|         pea 14b01 <PutChar+0x275>
    1b7e:	|         move.l d0,-(sp)
    1b80:	|         jsr 13ea0 <debug_register_bitmap>
    1b86:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    1b8a:	|         move.l 19038 <CstCopperList>,d0
    1b90:	|     /-- beq.s 1ba2 <CstReserveBackdrop+0x206>
    1b92:	|     |   move.l 19042 <CstDrawBuffer>,d0
    1b98:	|     +-- beq.s 1ba2 <CstReserveBackdrop+0x206>
    1b9a:	|     |   move.l 1903e <CstViewBuffer>,d0
    1ba0:	|  /--|-- bne.s 1bb4 <CstReserveBackdrop+0x218>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    1ba2:	|  |  \-> pea 14b10 <PutChar+0x284>
    1ba8:	|  |      jsr 13db8 <KPrintF>
    1bae:	|  |      addq.l #4,sp
    return FALSE;
    1bb0:	|  |      clr.w d0
    1bb2:	+--|----- bra.s 1bc6 <CstReserveBackdrop+0x22a>
  }

  CstSetCl( CstCopperList);
    1bb4:	|  \----> move.l 19038 <CstCopperList>,d0
    1bba:	|         move.l d0,-(sp)
    1bbc:	|         jsr 186c <CstSetCl>
    1bc2:	|         addq.l #4,sp
  return TRUE;
    1bc4:	|         moveq #1,d0

}
    1bc6:	\-------> movea.l (sp)+,a6
    1bc8:	          lea 44(sp),sp
    1bcc:	          rts

00001bce <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1bce:	    lea -12(sp),sp
    1bd2:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1bd4:	    move.l 19042 <CstDrawBuffer>,d0
    1bda:	/-- beq.s 1bf4 <CstFreeBuffer+0x26>
    1bdc:	|   move.l 19042 <CstDrawBuffer>,12(sp)
    1be4:	|   move.l 190fa <SysBase>,d0
    1bea:	|   movea.l d0,a6
    1bec:	|   movea.l 12(sp),a1
    1bf0:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1bf4:	\-> move.l 1903e <CstViewBuffer>,d0
    1bfa:	/-- beq.s 1c14 <CstFreeBuffer+0x46>
    1bfc:	|   move.l 1903e <CstViewBuffer>,8(sp)
    1c04:	|   move.l 190fa <SysBase>,d0
    1c0a:	|   movea.l d0,a6
    1c0c:	|   movea.l 8(sp),a1
    1c10:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1c14:	\-> move.l 19038 <CstCopperList>,d0
    1c1a:	/-- beq.s 1c34 <CstFreeBuffer+0x66>
    1c1c:	|   move.l 19038 <CstCopperList>,4(sp)
    1c24:	|   move.l 190fa <SysBase>,d0
    1c2a:	|   movea.l d0,a6
    1c2c:	|   movea.l 4(sp),a1
    1c30:	|   jsr -690(a6)
}
    1c34:	\-> nop
    1c36:	    movea.l (sp)+,a6
    1c38:	    lea 12(sp),sp
    1c3c:	    rts

00001c3e <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    1c3e:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    1c42:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    1c46:	       tst.l 24(sp)
    1c4a:	   /-- bge.s 1c50 <drawLine+0x12>
    1c4c:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    1c50:	   \-> tst.l 28(sp)
    1c54:	   /-- bge.s 1c5a <drawLine+0x1c>
    1c56:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    1c5a:	   \-> tst.l 32(sp)
    1c5e:	   /-- bge.s 1c64 <drawLine+0x26>
    1c60:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    1c64:	   \-> tst.l 36(sp)
    1c68:	   /-- bge.s 1c6e <drawLine+0x30>
    1c6a:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    1c6e:	   \-> move.l 191ea <sceneWidth>,d0
    1c74:	       cmp.l 24(sp),d0
    1c78:	   /-- bge.s 1c88 <drawLine+0x4a>
    1c7a:	   |   move.l 191ea <sceneWidth>,d0
    1c80:	   |   move.l d0,d1
    1c82:	   |   subq.l #1,d1
    1c84:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    1c88:	   \-> move.l 191ea <sceneWidth>,d0
    1c8e:	       cmp.l 32(sp),d0
    1c92:	   /-- bge.s 1ca2 <drawLine+0x64>
    1c94:	   |   move.l 191ea <sceneWidth>,d0
    1c9a:	   |   move.l d0,d1
    1c9c:	   |   subq.l #1,d1
    1c9e:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    1ca2:	   \-> move.l 191ee <sceneHeight>,d0
    1ca8:	       cmp.l 28(sp),d0
    1cac:	   /-- bge.s 1cbc <drawLine+0x7e>
    1cae:	   |   move.l 191ee <sceneHeight>,d0
    1cb4:	   |   move.l d0,d1
    1cb6:	   |   subq.l #1,d1
    1cb8:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    1cbc:	   \-> move.l 191ee <sceneHeight>,d0
    1cc2:	       cmp.l 36(sp),d0
    1cc6:	   /-- bge.s 1cd6 <drawLine+0x98>
    1cc8:	   |   move.l 191ee <sceneHeight>,d0
    1cce:	   |   move.l d0,d1
    1cd0:	   |   subq.l #1,d1
    1cd2:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    1cd6:	   \-> move.l 24(sp),d0
    1cda:	       cmp.l 32(sp),d0
    1cde:	/----- ble.s 1cfa <drawLine+0xbc>
		x = x2; 
    1ce0:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    1ce6:	|      tst.w 10(sp)
    1cea:	|      seq d0
    1cec:	|      neg.b d0
    1cee:	|      move.b d0,d0
    1cf0:	|      andi.w #255,d0
    1cf4:	|      move.w d0,10(sp)
    1cf8:	|  /-- bra.s 1d00 <drawLine+0xc2>
	} else x = x1;
    1cfa:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    1d00:	   \-> move.l 28(sp),d1
    1d04:	       cmp.l 36(sp),d1
    1d08:	/----- ble.s 1d24 <drawLine+0xe6>
		y = y2; 
    1d0a:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    1d10:	|      tst.w 10(sp)
    1d14:	|      seq d0
    1d16:	|      neg.b d0
    1d18:	|      move.b d0,d0
    1d1a:	|      andi.w #255,d0
    1d1e:	|      move.w d0,10(sp)
    1d22:	|  /-- bra.s 1d2a <drawLine+0xec>
	} else y = y1;	
    1d24:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    1d2a:	   \-> move.l 32(sp),d0
    1d2e:	       sub.l 24(sp),d0
    1d32:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    1d36:	       move.l 6(sp),d0
    1d3a:	   /-- bpl.s 1d3e <drawLine+0x100>
    1d3c:	   |   neg.l d0
    1d3e:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    1d42:	       move.l 36(sp),d1
    1d46:	       sub.l 28(sp),d1
    1d4a:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    1d4e:	       move.l 2(sp),d0
    1d52:	   /-- bpl.s 1d56 <drawLine+0x118>
    1d54:	   |   neg.l d0
    1d56:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    1d5a:	       tst.l 6(sp)
    1d5e:	   /-- bne.s 1d82 <drawLine+0x144>
		diffX = 1;
    1d60:	   |   moveq #1,d0
    1d62:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    1d66:	   |   move.l 191ea <sceneWidth>,d0
    1d6c:	   |   subq.l #1,d0
    1d6e:	   |   cmp.l 16(sp),d0
    1d72:	   +-- bne.s 1d82 <drawLine+0x144>
    1d74:	   |   move.l 191ea <sceneWidth>,d0
    1d7a:	   |   move.l d0,d1
    1d7c:	   |   subq.l #2,d1
    1d7e:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    1d82:	   \-> tst.l 2(sp)
    1d86:	   /-- bne.s 1daa <drawLine+0x16c>
		diffY = 1;
    1d88:	   |   moveq #1,d0
    1d8a:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    1d8e:	   |   move.l 191ee <sceneHeight>,d0
    1d94:	   |   subq.l #1,d0
    1d96:	   |   cmp.l 12(sp),d0
    1d9a:	   +-- bne.s 1daa <drawLine+0x16c>
    1d9c:	   |   move.l 191ee <sceneHeight>,d0
    1da2:	   |   move.l d0,d1
    1da4:	   |   subq.l #2,d1
    1da6:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    1daa:	   \-> pea 14b3d <PutChar+0x2b1>
    1db0:	       jsr 13db8 <KPrintF>
    1db6:	       addq.l #4,sp
	
}
    1db8:	       nop
    1dba:	       lea 20(sp),sp
    1dbe:	       rts

00001dc0 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    1dc0:	                      lea -24(sp),sp
    1dc4:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    1dc6:	                      move.l 19056 <firstTexture>,d0
    1dcc:	/-------------------- beq.w 1eaa <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    1dd0:	|                     clr.l 24(sp)
    1dd4:	|     /-------------- bra.w 1e9e <deleteTextures+0xde>
			BOOL found = FALSE;
    1dd8:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    1ddc:	|  |  |               move.l 19056 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    1de4:	|  |  |               movea.l 20(sp),a0
    1de8:	|  |  |               move.l (a0),d1
    1dea:	|  |  |               move.l 24(sp),d0
    1dee:	|  |  |               add.l d0,d0
    1df0:	|  |  |               add.l d0,d0
    1df2:	|  |  |               movea.l 36(sp),a0
    1df6:	|  |  |               adda.l d0,a0
    1df8:	|  |  |               move.l (a0),d0
    1dfa:	|  |  |               cmp.l d1,d0
    1dfc:	|  |  |  /----------- bne.w 1e90 <deleteTextures+0xd0>
				found = TRUE;
    1e00:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    1e06:	|  |  |  |            movea.l 20(sp),a0
    1e0a:	|  |  |  |            move.l 12(a0),d0
    1e0e:	|  |  |  |            move.l d0,19056 <firstTexture>
				FreeVec(list);
    1e14:	|  |  |  |            move.l 20(sp),6(sp)
    1e1a:	|  |  |  |            move.l 190fa <SysBase>,d0
    1e20:	|  |  |  |            movea.l d0,a6
    1e22:	|  |  |  |            movea.l 6(sp),a1
    1e26:	|  |  |  |            jsr -690(a6)
				continue;
    1e2a:	|  |  |  |  /-------- bra.s 1e9a <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    1e2c:	|  |  |  |  |  /----> movea.l 20(sp),a0
    1e30:	|  |  |  |  |  |      movea.l 12(a0),a0
    1e34:	|  |  |  |  |  |      move.l (a0),d1
    1e36:	|  |  |  |  |  |      move.l 24(sp),d0
    1e3a:	|  |  |  |  |  |      add.l d0,d0
    1e3c:	|  |  |  |  |  |      add.l d0,d0
    1e3e:	|  |  |  |  |  |      movea.l 36(sp),a0
    1e42:	|  |  |  |  |  |      adda.l d0,a0
    1e44:	|  |  |  |  |  |      move.l (a0),d0
    1e46:	|  |  |  |  |  |      cmp.l d1,d0
    1e48:	|  |  |  |  |  |  /-- bne.s 1e86 <deleteTextures+0xc6>
					found = TRUE;
    1e4a:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    1e50:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1e54:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    1e5a:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1e5e:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    1e62:	|  |  |  |  |  |  |   move.l 12(a0),d0
    1e66:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1e6a:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    1e6e:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    1e74:	|  |  |  |  |  |  |   move.l 190fa <SysBase>,d0
    1e7a:	|  |  |  |  |  |  |   movea.l d0,a6
    1e7c:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    1e80:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    1e84:	|  |  |  |  +--|--|-- bra.s 1e9a <deleteTextures+0xda>
				}
				list = list->next;
    1e86:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    1e8a:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    1e90:	|  |  |  \--|--|----> movea.l 20(sp),a0
    1e94:	|  |  |     |  |      move.l 12(a0),d0
    1e98:	|  |  |     |  \----- bne.s 1e2c <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    1e9a:	|  |  |     \-------> addq.l #1,24(sp)
    1e9e:	|  |  \-------------> move.l 24(sp),d0
    1ea2:	|  |                  cmp.l 32(sp),d0
    1ea6:	|  \----------------- bcs.w 1dd8 <deleteTextures+0x18>
			}
		}
	}
}
    1eaa:	\-------------------> nop
    1eac:	                      movea.l (sp)+,a6
    1eae:	                      lea 24(sp),sp
    1eb2:	                      rts

00001eb4 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    1eb4:	subq.l #4,sp
    1eb6:	move.l 8(sp),d0
    1eba:	move.w d0,d0
    1ebc:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    1ec0:	pea 14b60 <PutChar+0x2d4>
    1ec6:	jsr 13db8 <KPrintF>
    1ecc:	addq.l #4,sp
}
    1ece:	nop
    1ed0:	addq.l #4,sp
    1ed2:	rts

00001ed4 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    1ed4:	       moveq #-1,d0
    1ed6:	       cmp.l 4(sp),d0
    1eda:	   /-- bne.s 1ee0 <resourceNameFromNum+0xc>
    1edc:	   |   moveq #0,d0
    1ede:	/--|-- bra.s 1f18 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    1ee0:	|  \-> move.l 190d6 <numResourceNames>,d0
    1ee6:	|  /-- bne.s 1ef0 <resourceNameFromNum+0x1c>
    1ee8:	|  |   move.l #84880,d0
    1eee:	+--|-- bra.s 1f18 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    1ef0:	|  \-> move.l 190d6 <numResourceNames>,d0
    1ef6:	|      cmp.l 4(sp),d0
    1efa:	|  /-- ble.s 1f12 <resourceNameFromNum+0x3e>
    1efc:	|  |   move.l 1908e <allResourceNames>,d1
    1f02:	|  |   move.l 4(sp),d0
    1f06:	|  |   add.l d0,d0
    1f08:	|  |   add.l d0,d0
    1f0a:	|  |   movea.l d1,a0
    1f0c:	|  |   adda.l d0,a0
    1f0e:	|  |   move.l (a0),d0
    1f10:	+--|-- bra.s 1f18 <resourceNameFromNum+0x44>
	return "Unknown resource";
    1f12:	|  \-> move.l #84889,d0
    1f18:	\----> rts

00001f1a <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    1f1a:	          lea -40(sp),sp
    1f1e:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    1f22:	          move.l #320,1904e <winWidth>
    winHeight = 256;
    1f2c:	          move.l #256,19052 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    1f36:	          tst.l 56(sp)
    1f3a:	      /-- bne.s 1f52 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    1f3c:	      |   pea 14baa <thumbnail.c.7eb31449+0x8>
    1f42:	      |   jsr b8 <copyString>
    1f48:	      |   addq.l #4,sp
    1f4a:	      |   move.l d0,19066 <bundleFolder>
    1f50:	   /--|-- bra.s 1f68 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    1f52:	   |  \-> movea.l 60(sp),a0
    1f56:	   |      move.l (a0),d0
    1f58:	   |      move.l d0,-(sp)
    1f5a:	   |      jsr b8 <copyString>
    1f60:	   |      addq.l #4,sp
    1f62:	   |      move.l d0,19066 <bundleFolder>
	}
    
	int lastSlash = -1;
    1f68:	   \----> moveq #-1,d0
    1f6a:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1f6e:	          clr.l 40(sp)
    1f72:	   /----- bra.s 1f94 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    1f74:	/--|----> move.l 19066 <bundleFolder>,d1
    1f7a:	|  |      move.l 40(sp),d0
    1f7e:	|  |      movea.l d1,a0
    1f80:	|  |      adda.l d0,a0
    1f82:	|  |      move.b (a0),d0
    1f84:	|  |      cmpi.b #47,d0
    1f88:	|  |  /-- bne.s 1f90 <main_sludge+0x76>
    1f8a:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1f90:	|  |  \-> addq.l #1,40(sp)
    1f94:	|  \----> move.l 19066 <bundleFolder>,d1
    1f9a:	|         move.l 40(sp),d0
    1f9e:	|         movea.l d1,a0
    1fa0:	|         adda.l d0,a0
    1fa2:	|         move.b (a0),d0
    1fa4:	\-------- bne.s 1f74 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    1fa6:	          move.l 19066 <bundleFolder>,d0
    1fac:	          move.l 44(sp),d1
    1fb0:	          addq.l #1,d1
    1fb2:	          movea.l d0,a0
    1fb4:	          adda.l d1,a0
    1fb6:	          clr.b (a0)

	if (argc > 1) {
    1fb8:	          moveq #1,d0
    1fba:	          cmp.l 56(sp),d0
    1fbe:	      /-- bge.s 1fda <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    1fc0:	      |   move.l 56(sp),d0
    1fc4:	      |   addi.l #1073741823,d0
    1fca:	      |   add.l d0,d0
    1fcc:	      |   add.l d0,d0
    1fce:	      |   movea.l 60(sp),a0
    1fd2:	      |   adda.l d0,a0
    1fd4:	      |   move.l (a0),48(sp)
    1fd8:	   /--|-- bra.s 2034 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    1fda:	   |  \-> move.l 19066 <bundleFolder>,d0
    1fe0:	   |      pea 14bb0 <thumbnail.c.7eb31449+0xe>
    1fe6:	   |      move.l d0,-(sp)
    1fe8:	   |      jsr 1129c <joinStrings>
    1fee:	   |      addq.l #8,sp
    1ff0:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    1ff4:	   |      move.l 48(sp),-(sp)
    1ff8:	   |      jsr 11196 <fileExists>
    1ffe:	   |      addq.l #4,sp
    2000:	   |      tst.b d0
    2002:	   +----- bne.s 2034 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    2004:	   |      move.l 48(sp),36(sp)
    200a:	   |      move.l 190fa <SysBase>,d0
    2010:	   |      movea.l d0,a6
    2012:	   |      movea.l 36(sp),a1
    2016:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    201a:	   |      move.l 19066 <bundleFolder>,d0
    2020:	   |      pea 14bbd <thumbnail.c.7eb31449+0x1b>
    2026:	   |      move.l d0,-(sp)
    2028:	   |      jsr 1129c <joinStrings>
    202e:	   |      addq.l #8,sp
    2030:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    2034:	   \----> pea 14bc6 <thumbnail.c.7eb31449+0x24>
    203a:	          jsr 13db8 <KPrintF>
    2040:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    2042:	          move.l 48(sp),-(sp)
    2046:	          jsr 11196 <fileExists>
    204c:	          addq.l #4,sp
    204e:	          tst.b d0
    2050:	      /-- bne.s 20a8 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    2052:	      |   move.l 19102 <DOSBase>,d0
    2058:	      |   movea.l d0,a6
    205a:	      |   jsr -60(a6)
    205e:	      |   move.l d0,28(sp)
    2062:	      |   move.l 28(sp),d0
    2066:	      |   move.l d0,24(sp)
    206a:	      |   move.l #84934,20(sp)
    2072:	      |   moveq #21,d0
    2074:	      |   move.l d0,16(sp)
    2078:	      |   move.l 19102 <DOSBase>,d0
    207e:	      |   movea.l d0,a6
    2080:	      |   move.l 24(sp),d1
    2084:	      |   move.l 20(sp),d2
    2088:	      |   move.l 16(sp),d3
    208c:	      |   jsr -48(a6)
    2090:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    2094:	      |   pea 14bc6 <thumbnail.c.7eb31449+0x24>
    209a:	      |   jsr 13db8 <KPrintF>
    20a0:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    20a2:	      |   moveq #0,d0
    20a4:	/-----|-- bra.w 2292 <main_sludge+0x378>
	}

	KPrintF("Setgamefilepath\n");
    20a8:	|     \-> pea 14bdc <thumbnail.c.7eb31449+0x3a>
    20ae:	|         jsr 13db8 <KPrintF>
    20b4:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    20b6:	|         move.l 48(sp),-(sp)
    20ba:	|         jsr 229c <setGameFilePath>
    20c0:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    20c2:	|         move.l 48(sp),-(sp)
    20c6:	|         jsr 35d0 <initSludge>
    20cc:	|         addq.l #4,sp
    20ce:	|         tst.w d0
    20d0:	|     /-- bne.s 20d8 <main_sludge+0x1be>
    20d2:	|     |   moveq #0,d0
    20d4:	+-----|-- bra.w 2292 <main_sludge+0x378>
	
	if( winWidth != 320 || winHeight != 256) {
    20d8:	|     \-> move.l 1904e <winWidth>,d0
    20de:	|         cmpi.l #320,d0
    20e4:	|     /-- bne.s 20f4 <main_sludge+0x1da>
    20e6:	|     |   move.l 19052 <winHeight>,d0
    20ec:	|     |   cmpi.l #256,d0
    20f2:	|  /--|-- beq.s 2116 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    20f4:	|  |  \-> pea 14bed <thumbnail.c.7eb31449+0x4b>
    20fa:	|  |      jsr 13db8 <KPrintF>
    2100:	|  |      addq.l #4,sp
		winWidth = 320;
    2102:	|  |      move.l #320,1904e <winWidth>
		winHeight = 256;
    210c:	|  |      move.l #256,19052 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    2116:	|  \----> pea 14c6a <thumbnail.c.7eb31449+0xc8>
    211c:	|         jsr 13db8 <KPrintF>
    2122:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    2124:	|         move.l 19052 <winHeight>,d0
    212a:	|         move.l d0,d1
    212c:	|         move.l 1904e <winWidth>,d0
    2132:	|         move.l d1,-(sp)
    2134:	|         move.l d0,-(sp)
    2136:	|         jsr aa84 <resizeBackdrop>
    213c:	|         addq.l #8,sp
    213e:	|         tst.w d0
    2140:	|     /-- bne.s 2156 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    2142:	|     |   pea 14c7d <thumbnail.c.7eb31449+0xdb>
    2148:	|     |   jsr 13db8 <KPrintF>
    214e:	|     |   addq.l #4,sp
		return FALSE;
    2150:	|     |   moveq #0,d0
    2152:	+-----|-- bra.w 2292 <main_sludge+0x378>
	}

	KPrintF("Init People\n");
    2156:	|     \-> pea 14ca3 <thumbnail.c.7eb31449+0x101>
    215c:	|         jsr 13db8 <KPrintF>
    2162:	|         addq.l #4,sp
	if (! initPeople ())
    2164:	|         jsr 8196 <initPeople>
    216a:	|         tst.w d0
    216c:	|     /-- bne.s 2182 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    216e:	|     |   pea 14cb0 <thumbnail.c.7eb31449+0x10e>
    2174:	|     |   jsr 13db8 <KPrintF>
    217a:	|     |   addq.l #4,sp
		return FALSE;
    217c:	|     |   moveq #0,d0
    217e:	+-----|-- bra.w 2292 <main_sludge+0x378>
	}

	KPrintF("Init Floor\n");
    2182:	|     \-> pea 14cd1 <thumbnail.c.7eb31449+0x12f>
    2188:	|         jsr 13db8 <KPrintF>
    218e:	|         addq.l #4,sp
	if (! initFloor ())
    2190:	|         jsr 1316e <initFloor>
    2196:	|         tst.w d0
    2198:	|     /-- bne.s 21ae <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    219a:	|     |   pea 14cdd <custom.c.64ca0e9f+0x7>
    21a0:	|     |   jsr 13db8 <KPrintF>
    21a6:	|     |   addq.l #4,sp
		
		return FALSE;
    21a8:	|     |   moveq #0,d0
    21aa:	+-----|-- bra.w 2292 <main_sludge+0x378>
	}

	KPrintF("Init Objecttype\n");
    21ae:	|     \-> pea 14cfd <custom.c.64ca0e9f+0x27>
    21b4:	|         jsr 13db8 <KPrintF>
    21ba:	|         addq.l #4,sp
	if (! initObjectTypes ())
    21bc:	|         jsr ac40 <initObjectTypes>
    21c2:	|         tst.w d0
    21c4:	|     /-- bne.s 21da <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    21c6:	|     |   pea 14d0e <custom.c.64ca0e9f+0x38>
    21cc:	|     |   jsr 13db8 <KPrintF>
    21d2:	|     |   addq.l #4,sp
		return FALSE;
    21d4:	|     |   moveq #0,d0
    21d6:	+-----|-- bra.w 2292 <main_sludge+0x378>
	}

	KPrintF("Init speech\n");
    21da:	|     \-> pea 14d34 <custom.c.64ca0e9f+0x5e>
    21e0:	|         jsr 13db8 <KPrintF>
    21e6:	|         addq.l #4,sp
	initSpeech ();
    21e8:	|         jsr 599a <initSpeech>
	KPrintF("Init status bar\n");
    21ee:	|         pea 14d41 <custom.c.64ca0e9f+0x6b>
    21f4:	|         jsr 13db8 <KPrintF>
    21fa:	|         addq.l #4,sp
	initStatusBar ();
    21fc:	|         jsr 545e <initStatusBar>

	KPrintF("Get numbered string\n");
    2202:	|         pea 14d52 <custom.c.64ca0e9f+0x7c>
    2208:	|         jsr 13db8 <KPrintF>
    220e:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    2210:	|         pea 1 <_start+0x1>
    2214:	|         jsr 477c <getNumberedString>
    221a:	|         addq.l #4,sp
    221c:	|         move.l d0,1905e <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    2222:	|         pea 14d67 <custom.c.64ca0e9f+0x91>
    2228:	|         jsr 13db8 <KPrintF>
    222e:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    2230:	|         move.l 190ca <noStack>,d0
    2236:	|         pea 1 <_start+0x1>
    223a:	|         move.l d0,-(sp)
    223c:	|         clr.l -(sp)
    223e:	|         clr.l -(sp)
    2240:	|         clr.l -(sp)
    2242:	|         jsr 4604 <startNewFunctionNum>
    2248:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    224c:	|         pea 14d7f <custom.c.64ca0e9f+0xa9>
    2252:	|         jsr 13db8 <KPrintF>
    2258:	|         addq.l #4,sp

	weAreDoneSoQuit = 0;
    225a:	|         clr.l 1906a <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {				
    2260:	|     /-- bra.s 2274 <main_sludge+0x35a>
		sludgeDisplay ();
    2262:	|  /--|-> jsr 45aa <sludgeDisplay>
		handleInput();
    2268:	|  |  |   jsr 35c8 <handleInput>
		WaitVbl();
    226e:	|  |  |   jsr 13cec <WaitVbl>
	while ( !weAreDoneSoQuit ) {				
    2274:	|  |  \-> move.l 1906a <weAreDoneSoQuit>,d0
    227a:	|  \----- beq.s 2262 <main_sludge+0x348>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    227c:	|         move.l 48(sp),32(sp)
    2282:	|         move.l 190fa <SysBase>,d0
    2288:	|         movea.l d0,a6
    228a:	|         movea.l 32(sp),a1
    228e:	|         jsr -690(a6)
}
    2292:	\-------> movem.l (sp)+,d2-d3/a6
    2296:	          lea 40(sp),sp
    229a:	          rts

0000229c <setGameFilePath>:

void setGameFilePath (char * f) {
    229c:	          lea -1104(sp),sp
    22a0:	          move.l a6,-(sp)
    22a2:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    22a4:	          move.l #1112,d0
    22aa:	          add.l sp,d0
    22ac:	          addi.l #-1102,d0
    22b2:	          move.l d0,1100(sp)
    22b6:	          move.l #998,1096(sp)
    22be:	          move.l 19102 <DOSBase>,d0
    22c4:	          movea.l d0,a6
    22c6:	          move.l 1100(sp),d1
    22ca:	          move.l 1096(sp),d2
    22ce:	          jsr -564(a6)
    22d2:	          move.w d0,1094(sp)
    22d6:	          move.w 1094(sp),d0
    22da:	      /-- bne.s 22ea <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    22dc:	      |   pea 14d92 <custom.c.64ca0e9f+0xbc>
    22e2:	      |   jsr 13db8 <KPrintF>
    22e8:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    22ea:	      \-> moveq #-1,d0
    22ec:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    22f0:	          clr.l 1104(sp)
    22f4:	   /----- bra.s 2312 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    22f6:	/--|----> move.l 1104(sp),d0
    22fa:	|  |      movea.l 1116(sp),a0
    22fe:	|  |      adda.l d0,a0
    2300:	|  |      move.b (a0),d0
    2302:	|  |      cmpi.b #47,d0
    2306:	|  |  /-- bne.s 230e <setGameFilePath+0x72>
    2308:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    230e:	|  |  \-> addq.l #1,1104(sp)
    2312:	|  \----> move.l 1104(sp),d0
    2316:	|         movea.l 1116(sp),a0
    231a:	|         adda.l d0,a0
    231c:	|         move.b (a0),d0
    231e:	\-------- bne.s 22f6 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    2320:	          moveq #-1,d0
    2322:	          cmp.l 1108(sp),d0
    2326:	   /----- beq.s 23a0 <setGameFilePath+0x104>
		f[got] = 0;	
    2328:	   |      move.l 1108(sp),d0
    232c:	   |      movea.l 1116(sp),a0
    2330:	   |      adda.l d0,a0
    2332:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    2334:	   |      move.l 1116(sp),1090(sp)
    233a:	   |      moveq #-2,d0
    233c:	   |      move.l d0,1086(sp)
    2340:	   |      move.l 19102 <DOSBase>,d0
    2346:	   |      movea.l d0,a6
    2348:	   |      move.l 1090(sp),d1
    234c:	   |      move.l 1086(sp),d2
    2350:	   |      jsr -84(a6)
    2354:	   |      move.l d0,1082(sp)
    2358:	   |      move.l 1082(sp),d0
    235c:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    2360:	   |      move.l 1078(sp),1074(sp)
    2366:	   |      move.l 19102 <DOSBase>,d0
    236c:	   |      movea.l d0,a6
    236e:	   |      move.l 1074(sp),d1
    2372:	   |      jsr -126(a6)
    2376:	   |      move.l d0,1070(sp)
    237a:	   |      move.l 1070(sp),d0
    237e:	   |  /-- bne.s 2392 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    2380:	   |  |   move.l 1116(sp),-(sp)
    2384:	   |  |   pea 14db8 <custom.c.64ca0e9f+0xe2>
    238a:	   |  |   jsr 13db8 <KPrintF>
    2390:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    2392:	   |  \-> move.l 1108(sp),d0
    2396:	   |      movea.l 1116(sp),a0
    239a:	   |      adda.l d0,a0
    239c:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    23a0:	   \----> move.l #400,1066(sp)
    23a8:	          clr.l 1062(sp)
    23ac:	          move.l 190fa <SysBase>,d0
    23b2:	          movea.l d0,a6
    23b4:	          move.l 1066(sp),d0
    23b8:	          move.l 1062(sp),d1
    23bc:	          jsr -684(a6)
    23c0:	          move.l d0,1058(sp)
    23c4:	          move.l 1058(sp),d0
    23c8:	          move.l d0,19062 <gamePath>
	if (gamePath==0) {
    23ce:	          move.l 19062 <gamePath>,d0
    23d4:	      /-- bne.s 23e8 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    23d6:	      |   pea 14deb <custom.c.64ca0e9f+0x115>
    23dc:	      |   jsr 13db8 <KPrintF>
    23e2:	      |   addq.l #4,sp
    23e4:	   /--|-- bra.w 24d0 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    23e8:	   |  \-> move.l 19062 <gamePath>,1054(sp)
    23f0:	   |      moveq #-2,d0
    23f2:	   |      move.l d0,1050(sp)
    23f6:	   |      move.l 19102 <DOSBase>,d0
    23fc:	   |      movea.l d0,a6
    23fe:	   |      move.l 1054(sp),d1
    2402:	   |      move.l 1050(sp),d2
    2406:	   |      jsr -84(a6)
    240a:	   |      move.l d0,1046(sp)
    240e:	   |      move.l 1046(sp),d0
    2412:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    2416:	   |      move.l 1042(sp),1038(sp)
    241c:	   |      move.l 19102 <DOSBase>,d0
    2422:	   |      movea.l d0,a6
    2424:	   |      move.l 1038(sp),d1
    2428:	   |      jsr -126(a6)
    242c:	   |      move.l d0,1034(sp)
    2430:	   |      move.l 1034(sp),d0
    2434:	   |  /-- bne.s 2444 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    2436:	   |  |   pea 14e26 <custom.c.64ca0e9f+0x150>
    243c:	   |  |   jsr 13db8 <KPrintF>
    2442:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    2444:	   |  \-> move.l #1112,d0
    244a:	   |      add.l sp,d0
    244c:	   |      addi.l #-1102,d0
    2452:	   |      move.l d0,1030(sp)
    2456:	   |      moveq #-2,d0
    2458:	   |      move.l d0,1026(sp)
    245c:	   |      move.l 19102 <DOSBase>,d0
    2462:	   |      movea.l d0,a6
    2464:	   |      move.l 1030(sp),d1
    2468:	   |      move.l 1026(sp),d2
    246c:	   |      jsr -84(a6)
    2470:	   |      move.l d0,1022(sp)
    2474:	   |      move.l 1022(sp),d0
    2478:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    247c:	   |      move.l 1042(sp),1018(sp)
    2482:	   |      move.l 19102 <DOSBase>,d0
    2488:	   |      movea.l d0,a6
    248a:	   |      move.l 1018(sp),d1
    248e:	   |      jsr -126(a6)
    2492:	   |      move.l d0,1014(sp)
    2496:	   |      move.l 1014(sp),d0
    249a:	   |  /-- bne.s 24b0 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    249c:	   |  |   moveq #10,d0
    249e:	   |  |   add.l sp,d0
    24a0:	   |  |   move.l d0,-(sp)
    24a2:	   |  |   pea 14e52 <custom.c.64ca0e9f+0x17c>
    24a8:	   |  |   jsr 13db8 <KPrintF>
    24ae:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    24b0:	   |  \-> move.l 19062 <gamePath>,d0
    24b6:	   +----- beq.s 24d0 <setGameFilePath+0x234>
    24b8:	   |      move.l 19062 <gamePath>,1010(sp)
    24c0:	   |      move.l 190fa <SysBase>,d0
    24c6:	   |      movea.l d0,a6
    24c8:	   |      movea.l 1010(sp),a1
    24cc:	   |      jsr -690(a6)
}
    24d0:	   \----> move.l (sp)+,d2
    24d2:	          movea.l (sp)+,a6
    24d4:	          lea 1104(sp),sp
    24d8:	          rts

000024da <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    24da:	/-------> lea -16(sp),sp
    24de:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    24e0:	|         move.l 24(sp),-(sp)
    24e4:	|         jsr 438c <pauseFunction>
    24ea:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    24ec:	|     /-- bra.s 24fe <abortFunction+0x24>
    24ee:	|  /--|-> moveq #24,d0
    24f0:	|  |  |   add.l 24(sp),d0
    24f4:	|  |  |   move.l d0,-(sp)
    24f6:	|  |  |   jsr 126f4 <trimStack>
    24fc:	|  |  |   addq.l #4,sp
    24fe:	|  |  \-> movea.l 24(sp),a0
    2502:	|  |      move.l 24(a0),d0
    2506:	|  \----- bne.s 24ee <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    2508:	|         movea.l 24(sp),a0
    250c:	|         move.l 4(a0),12(sp)
    2512:	|         move.l 190fa <SysBase>,d0
    2518:	|         movea.l d0,a6
    251a:	|         movea.l 12(sp),a1
    251e:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    2522:	|         clr.l 16(sp)
    2526:	|     /-- bra.s 2546 <abortFunction+0x6c>
    2528:	|  /--|-> movea.l 24(sp),a0
    252c:	|  |  |   move.l 20(a0),d1
    2530:	|  |  |   move.l 16(sp),d0
    2534:	|  |  |   lsl.l #3,d0
    2536:	|  |  |   add.l d1,d0
    2538:	|  |  |   move.l d0,-(sp)
    253a:	|  |  |   jsr 11fbe <unlinkVar>
    2540:	|  |  |   addq.l #4,sp
    2542:	|  |  |   addq.l #1,16(sp)
    2546:	|  |  \-> movea.l 24(sp),a0
    254a:	|  |      move.l 8(a0),d0
    254e:	|  |      cmp.l 16(sp),d0
    2552:	|  \----- bgt.s 2528 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    2554:	|         movea.l 24(sp),a0
    2558:	|         move.l 20(a0),8(sp)
    255e:	|         move.l 190fa <SysBase>,d0
    2564:	|         movea.l d0,a6
    2566:	|         movea.l 8(sp),a1
    256a:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    256e:	|         moveq #28,d0
    2570:	|         add.l 24(sp),d0
    2574:	|         move.l d0,-(sp)
    2576:	|         jsr 11fbe <unlinkVar>
    257c:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    257e:	|         movea.l 24(sp),a0
    2582:	|         move.l 40(a0),d0
    2586:	|     /-- beq.s 2598 <abortFunction+0xbe>
    2588:	|     |   movea.l 24(sp),a0
    258c:	|     |   move.l 40(a0),d0
    2590:	|     |   move.l d0,-(sp)
    2592:	\-----|-- jsr 24da <abortFunction>(pc)
    2596:	      |   addq.l #4,sp
	FreeVec(fun);
    2598:	      \-> move.l 24(sp),4(sp)
    259e:	          move.l 190fa <SysBase>,d0
    25a4:	          movea.l d0,a6
    25a6:	          movea.l 4(sp),a1
    25aa:	          jsr -690(a6)
	fun = NULL;
    25ae:	          clr.l 24(sp)
}
    25b2:	          nop
    25b4:	          movea.l (sp)+,a6
    25b6:	          lea 16(sp),sp
    25ba:	          rts

000025bc <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    25bc:	          subq.l #8,sp
	int n = 0;
    25be:	          clr.l 4(sp)
	*killedMyself = FALSE;
    25c2:	          movea.l 20(sp),a0
    25c6:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    25c8:	          move.l 19092 <allRunningFunctions>,(sp)
	while (fun) {
    25ce:	   /----- bra.s 25fc <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    25d0:	/--|----> movea.l (sp),a0
    25d2:	|  |      move.l (a0),d0
    25d4:	|  |      cmp.l 12(sp),d0
    25d8:	|  |  /-- bne.s 25f6 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    25da:	|  |  |   movea.l (sp),a0
    25dc:	|  |  |   move.w #1,54(a0)
			n++;
    25e2:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    25e6:	|  |  |   move.l (sp),d0
    25e8:	|  |  |   cmp.l 16(sp),d0
    25ec:	|  |  +-- bne.s 25f6 <cancelAFunction+0x3a>
    25ee:	|  |  |   movea.l 20(sp),a0
    25f2:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    25f6:	|  |  \-> movea.l (sp),a0
    25f8:	|  |      move.l 44(a0),(sp)
	while (fun) {
    25fc:	|  \----> tst.l (sp)
    25fe:	\-------- bne.s 25d0 <cancelAFunction+0x14>
	}
	return n;
    2600:	          move.l 4(sp),d0
}
    2604:	          addq.l #8,sp
    2606:	          rts

00002608 <completeTimers>:


void completeTimers () {
    2608:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    260a:	          move.l 19092 <allRunningFunctions>,(sp)

	while (thisFunction) {
    2610:	   /----- bra.s 2626 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    2612:	/--|----> movea.l (sp),a0
    2614:	|  |      move.b 56(a0),d0
    2618:	|  |  /-- bne.s 2620 <completeTimers+0x18>
    261a:	|  |  |   movea.l (sp),a0
    261c:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    2620:	|  |  \-> movea.l (sp),a0
    2622:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    2626:	|  \----> tst.l (sp)
    2628:	\-------- bne.s 2612 <completeTimers+0xa>
	}
}
    262a:	          nop
    262c:	          nop
    262e:	          addq.l #4,sp
    2630:	          rts

00002632 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    2632:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    2636:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    263c:	                                                             movea.l 80(sp),a0
    2640:	                                                             move.w 54(a0),d0
    2644:	/----------------------------------------------------------- beq.w 34e4 <continueFunction+0xeb2>
		abortFunction (fun);
    2648:	|                                                            move.l 80(sp),-(sp)
    264c:	|                                                            jsr 24da <abortFunction>
    2652:	|                                                            addq.l #4,sp
		return TRUE;
    2654:	|                                                            moveq #1,d0
    2656:	|  /-------------------------------------------------------- bra.w 34ee <continueFunction+0xebc>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    265a:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    2660:	|  |  |                                                      movea.l 80(sp),a0
    2664:	|  |  |                                                      move.l 4(a0),d1
    2668:	|  |  |                                                      movea.l 80(sp),a0
    266c:	|  |  |                                                      move.l 36(a0),d0
    2670:	|  |  |                                                      lsl.l #3,d0
    2672:	|  |  |                                                      movea.l d1,a0
    2674:	|  |  |                                                      adda.l d0,a0
    2676:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    267c:	|  |  |                                                      movea.l 80(sp),a0
    2680:	|  |  |                                                      move.l 4(a0),d1
    2684:	|  |  |                                                      movea.l 80(sp),a0
    2688:	|  |  |                                                      move.l 36(a0),d0
    268c:	|  |  |                                                      lsl.l #3,d0
    268e:	|  |  |                                                      movea.l d1,a0
    2690:	|  |  |                                                      adda.l d0,a0
    2692:	|  |  |                                                      move.l (a0),64(sp)
		KPrintF("Processing Type %ld",com);
    2696:	|  |  |                                                      move.l 64(sp),-(sp)
    269a:	|  |  |                                                      pea 14f5a <custom.c.64ca0e9f+0x284>
    26a0:	|  |  |                                                      jsr 13db8 <KPrintF>
    26a6:	|  |  |                                                      addq.l #8,sp

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    26a8:	|  |  |                                                      moveq #41,d0
    26aa:	|  |  |                                                      cmp.l 64(sp),d0
    26ae:	|  |  |  /-------------------------------------------------- bcs.w 3498 <continueFunction+0xe66>
    26b2:	|  |  |  |                                                   move.l 64(sp),d0
    26b6:	|  |  |  |                                                   add.l d0,d0
    26b8:	|  |  |  |                                                   movea.l d0,a0
    26ba:	|  |  |  |                                                   adda.l #9926,a0
    26c0:	|  |  |  |                                                   move.w (a0),d0
    26c2:	|  |  |  |                                                   jmp (26c6 <continueFunction+0x94>,pc,d0.w)
    26c6:	|  |  |  |                                                   bset d6,(a2)
    26c8:	|  |  |  |                                                   ori.w #2670,(a4)
    26cc:	|  |  |  |                                                   eori.w #2416,d6
    26d0:	|  |  |  |                                                   bchg d4,d2
    26d2:	|  |  |  |                                                   bclr d4,(a4)+
    26d4:	|  |  |  |                                                   andi.l #181013194,d4
    26da:	|  |  |  |                                                   .short 0x0aca
    26dc:	|  |  |  |                                                   .short 0x0aca
    26de:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    26e6:	|  |  |  |                                                   .short 0x0aca
    26e8:	|  |  |  |                                                   andi.w #906,-(a4)
    26ec:	|  |  |  |                                                   bchg d1,196(a2)
    26f0:	|  |  |  |                                                   bset d1,580(a4)
    26f4:	|  |  |  |                                                   bclr d1,2576(a2)
    26f8:	|  |  |  |                                                   andi.b #-56,2762(a2)
    26fe:	|  |  |  |                                                   .short 0x0aca
    2700:	|  |  |  |                                                   eori.l #63572682,d0
    2706:	|  |  |  |                                                   .short 0x0aca
    2708:	|  |  |  |                                                   bchg d3,-(a2)
    270a:	|  |  |  |                                                   bchg #-36,(a2)
    270e:	|  |  |  |                                                   .short 0x08cc
    2710:	|  |  |  |                                                   addi.b #14,1038(a0)
    2716:	|  |  |  |                                                   .short 0x040e
    2718:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    271c:	|  |  |  |                                                   ori.w #8232,(a0)
    2720:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    2726:	|  |  |  |                                                   ori.w #12136,(a0)
    272a:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    2730:	|  |  |  |                                                   ori.w #12328,(a0)
    2734:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    273a:	|  |  |  |                                                   add.l 44(sp),d1
    273e:	|  |  |  |                                                   moveq #28,d0
    2740:	|  |  |  |                                                   add.l 80(sp),d0
    2744:	|  |  |  |                                                   move.l d1,-(sp)
    2746:	|  |  |  |                                                   move.l d0,-(sp)
    2748:	|  |  |  |                                                   jsr 1222a <copyVariable>
    274e:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    2750:	|  |  |  |                                                   move.l 80(sp),-(sp)
    2754:	|  |  |  |                                                   jsr 34f4 <finishFunction>
    275a:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    275c:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    2762:	|  |  |  |                                                   move.l 80(sp),-(sp)
    2766:	|  |  |  |                                                   jsr 43ce <restartFunction>
    276c:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    276e:	|  |  |  |  /----------------------------------------------- bra.w 34cc <continueFunction+0xe9a>
				finishFunction (fun);
    2772:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    2776:	|  |  |  |  |                                                jsr 34f4 <finishFunction>
    277c:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    277e:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    2782:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    2786:	|  |  |  |  +----------------------------------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    278a:	|  |  |  |  |                                                movea.l 80(sp),a0
    278e:	|  |  |  |  |                                                move.l 28(a0),d0
    2792:	|  |  |  |  |                                                moveq #2,d1
    2794:	|  |  |  |  |                                                cmp.l d0,d1
    2796:	|  |  |  |  |                                            /-- beq.s 27a2 <continueFunction+0x170>
    2798:	|  |  |  |  |                                            |   moveq #4,d1
    279a:	|  |  |  |  |                                            |   cmp.l d0,d1
    279c:	|  |  |  |  |                                         /--|-- beq.s 27f0 <continueFunction+0x1be>
    279e:	|  |  |  |  |                                /--------|--|-- bra.w 28d8 <continueFunction+0x2a6>
				case SVT_FUNC:
				pauseFunction (fun);		
    27a2:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    27a6:	|  |  |  |  |                                |        |      jsr 438c <pauseFunction>
    27ac:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    27ae:	|  |  |  |  |                                |        |      moveq #24,d0
    27b0:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    27b4:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    27b8:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    27bc:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    27c0:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    27c2:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    27c6:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    27ca:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    27cc:	|  |  |  |  |                                |        |      jsr 4604 <startNewFunctionNum>
    27d2:	|  |  |  |  |                                |        |      lea 20(sp),sp
    27d6:	|  |  |  |  |                                |        |      tst.l d0
    27d8:	|  |  |  |  |                                |        |  /-- bne.s 27e0 <continueFunction+0x1ae>
    27da:	|  |  |  |  |                                |        |  |   clr.w d0
    27dc:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 34ee <continueFunction+0xebc>
				fun = allRunningFunctions;
    27e0:	|  |  |  |  |                                |        |  \-> move.l 19092 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    27e8:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    27ec:	|  |  |  |  |                                |  /-----|----- bra.w 28ec <continueFunction+0x2ba>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    27f0:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    27f4:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    27f8:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    27fc:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    2800:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    2802:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    2804:	|  |  |  |  |                                |  |            jsr 10a52 <callBuiltIn>
    280a:	|  |  |  |  |                                |  |            lea 12(sp),sp
    280e:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    2812:	|  |  |  |  |                                |  |            moveq #5,d0
    2814:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    2818:	|  |  |  |  |                                |  |  /-------- bcs.w 28d4 <continueFunction+0x2a2>
    281c:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    2820:	|  |  |  |  |                                |  |  |         add.l d0,d0
    2822:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    2824:	|  |  |  |  |                                |  |  |         adda.l #10288,a0
    282a:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    282c:	|  |  |  |  |                                |  |  |         jmp (2830 <continueFunction+0x1fe>,pc,d0.w)
    2830:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    2836:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    283a:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    2840:	|  |  |  |  |                                |  |  |         .short 0x4f6e
    2842:	|  |  |  |  |                                |  |  |         jsr 13db8 <KPrintF>
    2848:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    284a:	|  |  |  |  |                                |  |  |         clr.w d0
    284c:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 34ee <continueFunction+0xebc>

						case BR_PAUSE:
						pauseFunction (fun);
    2850:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    2854:	|  |  |  |  |                                |  |  |         jsr 438c <pauseFunction>
    285a:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    285c:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    2860:	|  |  |  |  |                                |  |  |  /----- bra.s 28d6 <continueFunction+0x2a4>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    2862:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    2866:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    286a:	|  |  |  |  |                                |  |  |  +----- bra.s 28d6 <continueFunction+0x2a4>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    286c:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    2870:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    2876:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    2878:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    287c:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    2880:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    2884:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    2886:	|  |  |  |  |                                |  |  |  |      jsr 12662 <setVariable>
    288c:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    2890:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    2894:	|  |  |  |  |                                |  |  |  |      jsr 438c <pauseFunction>
    289a:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    289c:	|  |  |  |  |                                |  |  |  |      move.l 190ca <noStack>,d1
    28a2:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    28a6:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    28a8:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    28aa:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    28ae:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    28b0:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    28b2:	|  |  |  |  |                                |  |  |  |      jsr 4604 <startNewFunctionNum>
    28b8:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    28bc:	|  |  |  |  |                                |  |  |  |      tst.l d0
    28be:	|  |  |  |  |                                |  |  |  |  /-- bne.s 28c6 <continueFunction+0x294>
    28c0:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    28c2:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 34ee <continueFunction+0xebc>
							fun = allRunningFunctions;
    28c6:	|  |  |  |  |                                |  |  |  |  \-> move.l 19092 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    28ce:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    28d2:	|  |  |  |  |                                |  |  |  +----- bra.s 28d6 <continueFunction+0x2a4>

						default:
						break;
    28d4:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    28d6:	|  |  |  |  |                                |  +-----\----X bra.s 28ec <continueFunction+0x2ba>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    28d8:	|  |  |  |  |                                \--|----------> pea 14fb9 <custom.c.64ca0e9f+0x2e3>
    28de:	|  |  |  |  |                                   |            jsr 13db8 <KPrintF>
    28e4:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    28e6:	|  |  |  |  |                                   |            clr.w d0
    28e8:	|  +--|--|--|-----------------------------------|----------- bra.w 34ee <continueFunction+0xebc>
			}
			break;
    28ec:	|  |  |  |  +-----------------------------------\----------X bra.w 34cc <continueFunction+0xe9a>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    28f0:	|  |  |  |  |                                                moveq #28,d0
    28f2:	|  |  |  |  |                                                add.l 80(sp),d0
    28f6:	|  |  |  |  |                                                clr.l -(sp)
    28f8:	|  |  |  |  |                                                clr.l -(sp)
    28fa:	|  |  |  |  |                                                move.l d0,-(sp)
    28fc:	|  |  |  |  |                                                jsr 12662 <setVariable>
    2902:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2906:	|  |  |  |  +----------------------------------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    290a:	|  |  |  |  |                                                move.l 68(sp),d1
    290e:	|  |  |  |  |                                                moveq #28,d0
    2910:	|  |  |  |  |                                                add.l 80(sp),d0
    2914:	|  |  |  |  |                                                move.l d1,-(sp)
    2916:	|  |  |  |  |                                                pea 5 <_start+0x5>
    291a:	|  |  |  |  |                                                move.l d0,-(sp)
    291c:	|  |  |  |  |                                                jsr 12662 <setVariable>
    2922:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2926:	|  |  |  |  +----------------------------------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    292a:	|  |  |  |  |                                                move.l 68(sp),d1
    292e:	|  |  |  |  |                                                moveq #28,d0
    2930:	|  |  |  |  |                                                add.l 80(sp),d0
    2934:	|  |  |  |  |                                                move.l d1,-(sp)
    2936:	|  |  |  |  |                                                pea 1 <_start+0x1>
    293a:	|  |  |  |  |                                                move.l d0,-(sp)
    293c:	|  |  |  |  |                                                jsr 12662 <setVariable>
    2942:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2946:	|  |  |  |  +----------------------------------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    294a:	|  |  |  |  |                                                moveq #28,d0
    294c:	|  |  |  |  |                                                add.l 80(sp),d0
    2950:	|  |  |  |  |                                                movea.l 80(sp),a0
    2954:	|  |  |  |  |                                                movea.l 20(a0),a0
    2958:	|  |  |  |  |                                                move.l 68(sp),d1
    295c:	|  |  |  |  |                                                lsl.l #3,d1
    295e:	|  |  |  |  |                                                add.l a0,d1
    2960:	|  |  |  |  |                                                move.l d0,-(sp)
    2962:	|  |  |  |  |                                                move.l d1,-(sp)
    2964:	|  |  |  |  |                                                jsr 1222a <copyVariable>
    296a:	|  |  |  |  |                                                addq.l #8,sp
    296c:	|  |  |  |  |                                                tst.w d0
    296e:	|  |  |  |  |  /-------------------------------------------- bne.w 34aa <continueFunction+0xe78>
    2972:	|  |  |  |  |  |                                             clr.w d0
    2974:	|  +--|--|--|--|-------------------------------------------- bra.w 34ee <continueFunction+0xebc>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    2978:	|  |  |  |  |  |                                             moveq #28,d0
    297a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    297e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2980:	|  |  |  |  |  |                                             jsr 122b0 <getBoolean>
    2986:	|  |  |  |  |  |                                             addq.l #4,sp
    2988:	|  |  |  |  |  |                                             tst.w d0
    298a:	|  |  |  |  |  |                                      /----- beq.s 29a6 <continueFunction+0x374>
    298c:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    2990:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    2994:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    2996:	|  |  |  |  |  |                                      |      jsr 122b0 <getBoolean>
    299c:	|  |  |  |  |  |                                      |      addq.l #4,sp
    299e:	|  |  |  |  |  |                                      |      tst.w d0
    29a0:	|  |  |  |  |  |                                      +----- beq.s 29a6 <continueFunction+0x374>
    29a2:	|  |  |  |  |  |                                      |      moveq #1,d0
    29a4:	|  |  |  |  |  |                                      |  /-- bra.s 29a8 <continueFunction+0x376>
    29a6:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    29a8:	|  |  |  |  |  |                                         \-> moveq #28,d1
    29aa:	|  |  |  |  |  |                                             add.l 80(sp),d1
    29ae:	|  |  |  |  |  |                                             move.l d0,-(sp)
    29b0:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    29b4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    29b6:	|  |  |  |  |  |                                             jsr 12662 <setVariable>
    29bc:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    29c0:	|  |  |  |  |  |                                             moveq #24,d0
    29c2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    29c6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    29c8:	|  |  |  |  |  |                                             jsr 126f4 <trimStack>
    29ce:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    29d0:	|  |  |  |  +--|-------------------------------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    29d4:	|  |  |  |  |  |                                             moveq #28,d0
    29d6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    29da:	|  |  |  |  |  |                                             move.l d0,-(sp)
    29dc:	|  |  |  |  |  |                                             jsr 122b0 <getBoolean>
    29e2:	|  |  |  |  |  |                                             addq.l #4,sp
    29e4:	|  |  |  |  |  |                                             tst.w d0
    29e6:	|  |  |  |  |  |                                         /-- bne.s 29fe <continueFunction+0x3cc>
    29e8:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    29ec:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    29f0:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    29f2:	|  |  |  |  |  |                                         |   jsr 122b0 <getBoolean>
    29f8:	|  |  |  |  |  |                                         |   addq.l #4,sp
    29fa:	|  |  |  |  |  |                                         |   tst.w d0
    29fc:	|  |  |  |  |  |                                      /--|-- beq.s 2a02 <continueFunction+0x3d0>
    29fe:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    2a00:	|  |  |  |  |  |                                      |  /-- bra.s 2a04 <continueFunction+0x3d2>
    2a02:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    2a04:	|  |  |  |  |  |                                         \-> moveq #28,d1
    2a06:	|  |  |  |  |  |                                             add.l 80(sp),d1
    2a0a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2a0c:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    2a10:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2a12:	|  |  |  |  |  |                                             jsr 12662 <setVariable>
    2a18:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    2a1c:	|  |  |  |  |  |                                             moveq #24,d0
    2a1e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2a22:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2a24:	|  |  |  |  |  |                                             jsr 126f4 <trimStack>
    2a2a:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2a2c:	|  |  |  |  +--|-------------------------------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    2a30:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2a34:	|  |  |  |  |  |                                             moveq #28,d0
    2a36:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2a3a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2a3c:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    2a40:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2a42:	|  |  |  |  |  |                                             jsr 12662 <setVariable>
    2a48:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2a4c:	|  |  |  |  +--|-------------------------------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    2a50:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2a54:	|  |  |  |  |  |                                             moveq #28,d0
    2a56:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2a5a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2a5c:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    2a60:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2a62:	|  |  |  |  |  |                                             jsr 12662 <setVariable>
    2a68:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2a6c:	|  |  |  |  +--|-------------------------------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    2a70:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2a74:	|  |  |  |  |  |                                             moveq #28,d0
    2a76:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2a7a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2a7c:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    2a80:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2a82:	|  |  |  |  |  |                                             jsr 12662 <setVariable>
    2a88:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2a8c:	|  |  |  |  +--|-------------------------------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_UNREG:
			if (dialogValue != 1) {
    2a90:	|  |  |  |  |  |                                             move.l 1905a <dialogValue>,d0
    2a96:	|  |  |  |  |  |                                             moveq #1,d1
    2a98:	|  |  |  |  |  |                                             cmp.l d0,d1
    2a9a:	|  |  |  |  |  |  /----------------------------------------- beq.w 34ae <continueFunction+0xe7c>
				KPrintF(ERROR_HACKER);
    2a9e:	|  |  |  |  |  |  |                                          pea 14fce <custom.c.64ca0e9f+0x2f8>
    2aa4:	|  |  |  |  |  |  |                                          jsr 13db8 <KPrintF>
    2aaa:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    2aac:	|  |  |  |  |  |  |                                          clr.w d0
    2aae:	|  +--|--|--|--|--|----------------------------------------- bra.w 34ee <continueFunction+0xebc>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    2ab2:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    2ab6:	|  |  |  |  |  |  |                                          moveq #28,d0
    2ab8:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    2abc:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    2abe:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    2ac0:	|  |  |  |  |  |  |                                          jsr 11df4 <loadStringToVar>
    2ac6:	|  |  |  |  |  |  |                                          addq.l #8,sp
    2ac8:	|  |  |  |  |  |  |                                          tst.w d0
    2aca:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 34b2 <continueFunction+0xe80>
					return FALSE;
    2ace:	|  |  |  |  |  |  |  |                                       clr.w d0
    2ad0:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 34ee <continueFunction+0xebc>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    2ad4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2ad8:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2adc:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2ade:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    2ae0:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2ae2:	|  |  |  |  |  |  |  |                                /----- beq.s 2b40 <continueFunction+0x50e>
    2ae4:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    2ae6:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    2ae8:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 2cd4 <continueFunction+0x6a2>
    2aec:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    2aee:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 2afa <continueFunction+0x4c8>
    2af0:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    2af2:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    2af4:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 2b40 <continueFunction+0x50e>
    2af6:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 2cd4 <continueFunction+0x6a2>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    2afa:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    2afc:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    2b00:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 2b2c <continueFunction+0x4fa>
					setVariable (&fun -> reg, SVT_NULL, 0);
    2b02:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    2b04:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2b08:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2b0a:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2b0c:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2b0e:	|  |  |  |  |  |  |  |              |                 |  |   jsr 12662 <setVariable>
    2b14:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    2b18:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    2b1a:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2b1e:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2b20:	|  |  |  |  |  |  |  |              |                 |  |   jsr 126f4 <trimStack>
    2b26:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    2b28:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 2cea <continueFunction+0x6b8>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    2b2c:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 1500f <custom.c.64ca0e9f+0x339>
    2b32:	|  |  |  |  |  |  |  |              |  |              |      jsr 13db8 <KPrintF>
    2b38:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    2b3a:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    2b3c:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 34ee <continueFunction+0xebc>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2b40:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    2b44:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    2b48:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    2b4c:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    2b4e:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2b64 <continueFunction+0x532>
					KPrintF((ERROR_INDEX_EMPTY));
    2b50:	|  |  |  |  |  |  |  |              |  |                 |   pea 1504b <custom.c.64ca0e9f+0x375>
    2b56:	|  |  |  |  |  |  |  |              |  |                 |   jsr 13db8 <KPrintF>
    2b5c:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    2b5e:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2b60:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 34ee <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2b64:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    2b66:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    2b6a:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2b6c:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    2b70:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    2b74:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    2b76:	|  |  |  |  |  |  |  |              |  |                     jsr 11d70 <getValueType>
    2b7c:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    2b80:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    2b82:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2b8a <continueFunction+0x558>
    2b84:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2b86:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 34ee <continueFunction+0xebc>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2b8a:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    2b8e:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    2b92:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    2b94:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    2b96:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    2b98:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2bba <continueFunction+0x588>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    2b9a:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    2b9e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    2ba0:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    2ba4:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    2ba8:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    2bac:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    2bae:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2bb0:	|  |  |  |  |  |  |  |              |  |                 |   jsr 119fa <fastArrayGetByIndex>
    2bb6:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    2bb8:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 2bda <continueFunction+0x5a8>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    2bba:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    2bbe:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    2bc0:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    2bc4:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    2bc8:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    2bcc:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    2bce:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    2bd0:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    2bd2:	|  |  |  |  |  |  |  |              |  |              |      jsr 12684 <stackGetByIndex>
    2bd8:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2bda:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    2bde:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    2be0:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    2be4:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2be6:	|  |  |  |  |  |  |  |              |  |                     jsr 126f4 <trimStack>
    2bec:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    2bee:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    2bf2:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2c0e <continueFunction+0x5dc>
						setVariable (&fun -> reg, SVT_NULL, 0);
    2bf4:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    2bf6:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    2bfa:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2bfc:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2bfe:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2c00:	|  |  |  |  |  |  |  |              |  |                 |   jsr 12662 <setVariable>
    2c06:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    2c0a:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 2ce8 <continueFunction+0x6b6>
    2c0e:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    2c10:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    2c14:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 2c22 <continueFunction+0x5f0>
    2c16:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    2c18:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    2c1c:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 2c6c <continueFunction+0x63a>
    2c1e:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 2cb4 <continueFunction+0x682>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2c22:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    2c26:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    2c2a:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    2c2e:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    2c30:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 11d70 <getValueType>
    2c36:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    2c3a:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    2c3c:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 2c44 <continueFunction+0x612>
    2c3e:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    2c40:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 2cce <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    2c44:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    2c46:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    2c48:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    2c4c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    2c4e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    2c52:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    2c54:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 12662 <setVariable>
    2c5a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    2c5e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    2c60:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    2c62:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    2c66:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    2c6a:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 2cd2 <continueFunction+0x6a0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2c6c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    2c70:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    2c74:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    2c78:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    2c7a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 11d70 <getValueType>
    2c80:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    2c84:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    2c86:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 2c8c <continueFunction+0x65a>
    2c88:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    2c8a:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 2cce <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    2c8c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    2c8e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    2c90:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    2c94:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    2c96:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    2c9a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    2c9c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 12662 <setVariable>
    2ca2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    2ca6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    2ca8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    2caa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    2cae:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    2cb2:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 2cd2 <continueFunction+0x6a0>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    2cb4:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    2cb6:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    2cba:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    2cbc:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    2cc0:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 1222a <copyVariable>
    2cc6:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    2cc8:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    2cca:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 2ce8 <continueFunction+0x6b6>
    2ccc:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2cce:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 34ee <continueFunction+0xebc>
				break;
    2cd2:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 2ce8 <continueFunction+0x6b6>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    2cd4:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 15069 <custom.c.64ca0e9f+0x393>
    2cda:	|  |  |  |  |  |  |  |                 |  |                  jsr 13db8 <KPrintF>
    2ce0:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    2ce2:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    2ce4:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 34ee <continueFunction+0xebc>
				break;
    2ce8:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    2cea:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 34cc <continueFunction+0xe9a>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    2cee:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2cf2:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2cf6:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2cf8:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    2cfa:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2cfc:	|  |  |  |  |  |  |  |                                   /-- beq.s 2d0a <continueFunction+0x6d8>
    2cfe:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    2d00:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    2d02:	|  |  |  |  |  |  |  |                                /--|-- beq.w 2db6 <continueFunction+0x784>
    2d06:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 2e14 <continueFunction+0x7e2>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2d0a:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2d0e:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2d12:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    2d16:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    2d18:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2d2e <continueFunction+0x6fc>
					KPrintF((ERROR_INDEX_EMPTY));
    2d1a:	|  |  |  |  |  |  |  |                             |  |  |   pea 1504b <custom.c.64ca0e9f+0x375>
    2d20:	|  |  |  |  |  |  |  |                             |  |  |   jsr 13db8 <KPrintF>
    2d26:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    2d28:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2d2a:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 34ee <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2d2e:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    2d30:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2d34:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2d36:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    2d3a:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    2d3e:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    2d40:	|  |  |  |  |  |  |  |                             |  |      jsr 11d70 <getValueType>
    2d46:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2d4a:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2d4c:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2d54 <continueFunction+0x722>
    2d4e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2d50:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 34ee <continueFunction+0xebc>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    2d54:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2d58:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2d5c:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    2d60:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    2d62:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    2d66:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    2d68:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    2d6c:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2d70:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    2d74:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    2d76:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    2d78:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    2d7a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2d7c:	|  |  |  |  |  |  |  |                             |  |      jsr 45c0 <stackSetByIndex>
    2d82:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2d86:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2d88:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2d90 <continueFunction+0x75e>
						return FALSE;
    2d8a:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2d8c:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 34ee <continueFunction+0xebc>
					}
					trimStack (&fun -> stack);
    2d90:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    2d92:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2d96:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2d98:	|  |  |  |  |  |  |  |                             |  |      jsr 126f4 <trimStack>
    2d9e:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    2da0:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    2da2:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2da6:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2da8:	|  |  |  |  |  |  |  |                             |  |      jsr 126f4 <trimStack>
    2dae:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    2db0:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    2db2:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 34cc <continueFunction+0xe9a>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    2db6:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    2db8:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    2dbc:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2dbe:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    2dc2:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    2dc6:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    2dc8:	|  |  |  |  |  |  |  |                             |         jsr 11d70 <getValueType>
    2dce:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    2dd2:	|  |  |  |  |  |  |  |                             |         tst.w d0
    2dd4:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2ddc <continueFunction+0x7aa>
    2dd6:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    2dd8:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 34ee <continueFunction+0xebc>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    2ddc:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    2de0:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    2de2:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    2de6:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    2dea:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    2dee:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    2df0:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2df2:	|  |  |  |  |  |  |  |                             |         jsr 119fa <fastArrayGetByIndex>
    2df8:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    2dfa:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    2dfe:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2e0e <continueFunction+0x7dc>
    2e00:	|  |  |  |  |  |  |  |                             |     |   pea 1508d <custom.c.64ca0e9f+0x3b7>
    2e06:	|  |  |  |  |  |  |  |                             |     |   jsr 13db8 <KPrintF>
    2e0c:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    2e0e:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    2e10:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 34ee <continueFunction+0xebc>
				KPrintF((ERROR_INDEX_NONSTACK));
    2e14:	|  |  |  |  |  |  |  |                             \-------> pea 15069 <custom.c.64ca0e9f+0x393>
    2e1a:	|  |  |  |  |  |  |  |                                       jsr 13db8 <KPrintF>
    2e20:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    2e22:	|  |  |  |  |  |  |  |                                       clr.w d0
    2e24:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 34ee <continueFunction+0xebc>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2e28:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2e2c:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2e30:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2e34:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2e36:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2e38:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2e3a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2e3e:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    2e42:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2e44:	|  |  |  |  |  |  |  |                                       jsr 11d70 <getValueType>
    2e4a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2e4e:	|  |  |  |  |  |  |  |                                       tst.w d0
    2e50:	|  |  |  |  |  |  |  |                                   /-- bne.s 2e58 <continueFunction+0x826>
    2e52:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2e54:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 34ee <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2e58:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    2e5c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2e5e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2e62:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2e64:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2e68:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2e6a:	|  |  |  |  |  |  |  |                                       jsr 12662 <setVariable>
    2e70:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    2e74:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    2e78:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2e7a:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2e7c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2e80:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2e84:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2e88:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2e8a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2e8c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2e8e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2e92:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2e94:	|  |  |  |  |  |  |  |                                       jsr 12662 <setVariable>
    2e9a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2e9e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2ea2:	|  |  |  |  |  |  |  |                                       move.l 190a8 <globalVars>,d1
    2ea8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2eac:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2eae:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2eb0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2eb2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2eb6:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    2eba:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2ebc:	|  |  |  |  |  |  |  |                                       jsr 11d70 <getValueType>
    2ec2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2ec6:	|  |  |  |  |  |  |  |                                       tst.w d0
    2ec8:	|  |  |  |  |  |  |  |                                   /-- bne.s 2ed0 <continueFunction+0x89e>
    2eca:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2ecc:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 34ee <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2ed0:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    2ed4:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2ed6:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2eda:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2edc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2ee0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ee2:	|  |  |  |  |  |  |  |                                       jsr 12662 <setVariable>
    2ee8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    2eec:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    2ef0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2ef2:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2ef4:	|  |  |  |  |  |  |  |                                       movea.l 190a8 <globalVars>,a0
    2efa:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2efe:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2f00:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2f02:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2f04:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f08:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f0a:	|  |  |  |  |  |  |  |                                       jsr 12662 <setVariable>
    2f10:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2f14:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2f18:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2f1c:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2f20:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2f24:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2f26:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2f28:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f2a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f2e:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    2f32:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2f34:	|  |  |  |  |  |  |  |                                       jsr 11d70 <getValueType>
    2f3a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2f3e:	|  |  |  |  |  |  |  |                                       tst.w d0
    2f40:	|  |  |  |  |  |  |  |                                   /-- bne.s 2f48 <continueFunction+0x916>
    2f42:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2f44:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 34ee <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2f48:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    2f4c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2f4e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2f52:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2f54:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f58:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f5a:	|  |  |  |  |  |  |  |                                       jsr 12662 <setVariable>
    2f60:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    2f64:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    2f68:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2f6a:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2f6c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2f70:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2f74:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2f78:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2f7a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2f7c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2f7e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f82:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f84:	|  |  |  |  |  |  |  |                                       jsr 12662 <setVariable>
    2f8a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2f8e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2f92:	|  |  |  |  |  |  |  |                                       move.l 190a8 <globalVars>,d1
    2f98:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2f9c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2f9e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2fa0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2fa2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2fa6:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    2faa:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2fac:	|  |  |  |  |  |  |  |                                       jsr 11d70 <getValueType>
    2fb2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2fb6:	|  |  |  |  |  |  |  |                                       tst.w d0
    2fb8:	|  |  |  |  |  |  |  |                                   /-- bne.s 2fc0 <continueFunction+0x98e>
    2fba:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2fbc:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 34ee <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2fc0:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    2fc4:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2fc6:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2fca:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2fcc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2fd0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2fd2:	|  |  |  |  |  |  |  |                                       jsr 12662 <setVariable>
    2fd8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    2fdc:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    2fe0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2fe2:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2fe4:	|  |  |  |  |  |  |  |                                       movea.l 190a8 <globalVars>,a0
    2fea:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2fee:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2ff0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2ff2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2ff4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2ff8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ffa:	|  |  |  |  |  |  |  |                                       jsr 12662 <setVariable>
    3000:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    3004:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    3008:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    300c:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    3010:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3014:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3016:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    3018:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    301a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    301e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3020:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3022:	|  |  |  |  |  |  |  |                                       jsr 1222a <copyVariable>
    3028:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    302a:	|  |  |  |  |  |  |  |                                       tst.w d0
    302c:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 34b6 <continueFunction+0xe84>
    3030:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    3032:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 34ee <continueFunction+0xebc>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    3036:	|  |  |  |  |  |  |  |  |                                    move.l 190a8 <globalVars>,d1
    303c:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    3040:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    3042:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    3044:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    3046:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    304a:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    304c:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    304e:	|  |  |  |  |  |  |  |  |                                    jsr 1222a <copyVariable>
    3054:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    3056:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    3058:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 34ba <continueFunction+0xe88>
    305c:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    305e:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 34ee <continueFunction+0xebc>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    3062:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    3064:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    3068:	|  |  |  |  |  |  |  |  |  |                                 movea.l 190a8 <globalVars>,a0
    306e:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    3072:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    3074:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    3076:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    3078:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    307a:	|  |  |  |  |  |  |  |  |  |                                 jsr 1222a <copyVariable>
    3080:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    3082:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    3084:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 34be <continueFunction+0xe8c>
    3088:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    308a:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 34ee <continueFunction+0xebc>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    308e:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    3090:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    3094:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    3096:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    309a:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    309c:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    309e:	|  |  |  |  |  |  |  |  |  |  |                              jsr 115ac <addVarToStack>
    30a4:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    30a6:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    30a8:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 34c2 <continueFunction+0xe90>
    30ac:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    30ae:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 34ee <continueFunction+0xebc>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    30b2:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    30b4:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    30b8:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    30ba:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    30be:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    30c0:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    30c2:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 11632 <addVarToStackQuick>
    30c8:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    30ca:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    30cc:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 34c6 <continueFunction+0xe94>
    30d0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    30d2:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 34ee <continueFunction+0xebc>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    30d6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    30d8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    30dc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    30de:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 122b0 <getBoolean>
    30e4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    30e6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    30e8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    30ea:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    30ec:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    30ee:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    30f0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    30f2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    30f6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    30f8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    30fc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    30fe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 12662 <setVariable>
    3104:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    3108:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    310c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    310e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    3112:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    3114:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 122b0 <getBoolean>
    311a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    311c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    311e:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 34ca <continueFunction+0xe98>
				advanceNow = FALSE;
    3122:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    3126:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    312a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    3130:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 34ca <continueFunction+0xe98>

			case SLU_BRANCH:
			advanceNow = FALSE;
    3134:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    3138:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    313c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    3142:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 34cc <continueFunction+0xe9a>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    3146:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    3148:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    314c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    314e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    3152:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    3156:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    3158:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 11d70 <getValueType>
    315e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    3162:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    3164:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 316c <continueFunction+0xb3a>
    3166:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    3168:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 34ee <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, -i);
    316c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    3170:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    3172:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    3174:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    3176:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    317a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    317c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    3180:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    3182:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 12662 <setVariable>
    3188:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    318c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 34cc <continueFunction+0xe9a>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    3190:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    3194:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    3198:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 3482 <continueFunction+0xe50>
    319c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    319e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    31a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 321e <continueFunction+0xbec>
    31a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    31a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    31aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 3268 <continueFunction+0xc36>
    31ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    31b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    31b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 31c2 <continueFunction+0xb90>
    31b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    31b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    31bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 31f0 <continueFunction+0xbbe>
    31be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 3268 <continueFunction+0xc36>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    31c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    31c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    31c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    31cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    31d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    31d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    31d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 116a6 <addVariablesInSecond>
    31da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    31dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    31de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    31e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    31e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 126f4 <trimStack>
    31ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    31ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 3496 <continueFunction+0xe64>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    31f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    31f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    31f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    31fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    31fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    3200:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    3202:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 11764 <compareVariablesInSecond>
    3208:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    320a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    320c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    3210:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    3212:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 126f4 <trimStack>
    3218:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    321a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 3496 <continueFunction+0xe64>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    321e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    3220:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    3224:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    3228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    322c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    322e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    3230:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 11764 <compareVariablesInSecond>
    3236:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    3238:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    323a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    323e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    3240:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 126f4 <trimStack>
    3246:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    3248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    324c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    3250:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    3252:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    3254:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    3256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    325c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    3260:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    3264:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 3496 <continueFunction+0xe64>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    3268:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    326c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    3270:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    3272:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    3276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    327a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    327c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 11d70 <getValueType>
    3282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    3286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    3288:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 3290 <continueFunction+0xc5e>
    328a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    328c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 34ee <continueFunction+0xebc>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    3290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    3292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    3296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    3298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    329c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    32a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    32a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 11d70 <getValueType>
    32a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    32ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    32ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 32b6 <continueFunction+0xc84>
    32b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    32b2:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 34ee <continueFunction+0xebc>
					trimStack (&fun -> stack);
    32b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    32b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    32bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    32be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 126f4 <trimStack>
    32c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    32c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    32c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    32cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    32ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    32d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 3494 <continueFunction+0xe62>
    32d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    32d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    32d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #13028,a0
    32de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    32e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (32e4 <continueFunction+0xcb2>,pc,d0.w)
    32e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    32e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    32ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    32f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    32f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    32fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    3304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    330c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    3314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    3318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    331c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    331e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14776 <__mulsi3>
    3326:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    3328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    332a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    332c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12662 <setVariable>
    333e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3496 <continueFunction+0xe64>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    3346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    334a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    334e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    3350:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3358:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    335c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    335e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12662 <setVariable>
    3364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3368:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3496 <continueFunction+0xe64>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    336c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    3370:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3374:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3376:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14822 <__modsi3>
    337e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    3380:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    3382:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3388:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    338a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    338e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3390:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12662 <setVariable>
    3396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    339a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3496 <continueFunction+0xe64>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    339e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    33a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    33a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    33a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    33aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 147f4 <__divsi3>
    33b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    33b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    33b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    33b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    33ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    33bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    33c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    33c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12662 <setVariable>
    33c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    33cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3496 <continueFunction+0xe64>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    33d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    33d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    33d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    33da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    33dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    33de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    33e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    33e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    33e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    33e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    33ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    33ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    33f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12662 <setVariable>
    33f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    33fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3496 <continueFunction+0xe64>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    33fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3402:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3408:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    340a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    340c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    340e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3410:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    341c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    341e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12662 <setVariable>
    3424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3496 <continueFunction+0xe64>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    342a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    342e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3432:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    3436:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    343a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    343c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    343e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3442:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    344a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12662 <setVariable>
    3450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3496 <continueFunction+0xe64>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    3456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    345a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    345e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    3462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    346a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    346e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12662 <setVariable>
    347c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3496 <continueFunction+0xe64>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    3482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 150ae <custom.c.64ca0e9f+0x3d8>
    3488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 13db8 <KPrintF>
    348e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    3490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    3492:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 34ee <continueFunction+0xebc>
						break;
    3494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    3496:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 34cc <continueFunction+0xe9a>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    3498:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 150c6 <custom.c.64ca0e9f+0x3f0>
    349e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 13db8 <KPrintF>
    34a4:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    34a6:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    34a8:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 34ee <continueFunction+0xebc>
			break;
    34aa:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    34ac:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 34cc <continueFunction+0xe9a>
			break;
    34ae:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    34b0:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 34cc <continueFunction+0xe9a>
			break;
    34b2:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    34b4:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 34cc <continueFunction+0xe9a>
			break;
    34b6:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    34b8:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 34cc <continueFunction+0xe9a>
			break;
    34ba:	|  |  |     |              \--|--|--|--|-------------------> nop
    34bc:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 34cc <continueFunction+0xe9a>
			break;
    34be:	|  |  |     |                 \--|--|--|-------------------> nop
    34c0:	|  |  |     +--------------------|--|--|-------------------- bra.s 34cc <continueFunction+0xe9a>
			break;
    34c2:	|  |  |     |                    \--|--|-------------------> nop
    34c4:	|  |  |     +-----------------------|--|-------------------- bra.s 34cc <continueFunction+0xe9a>
			break;
    34c6:	|  |  |     |                       \--|-------------------> nop
    34c8:	|  |  |     +--------------------------|-------------------- bra.s 34cc <continueFunction+0xe9a>
			break;
    34ca:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    34cc:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    34d0:	+--|--|----------------------------------------------------- beq.s 34e4 <continueFunction+0xeb2>
    34d2:	|  |  |                                                      movea.l 80(sp),a0
    34d6:	|  |  |                                                      move.l 36(a0),d0
    34da:	|  |  |                                                      addq.l #1,d0
    34dc:	|  |  |                                                      movea.l 80(sp),a0
    34e0:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    34e4:	\--|--|----------------------------------------------------> tst.w 74(sp)
    34e8:	   |  \----------------------------------------------------- bne.w 265a <continueFunction+0x28>

	}
	return TRUE;
    34ec:	   |                                                         moveq #1,d0
}
    34ee:	   \-------------------------------------------------------> lea 76(sp),sp
    34f2:	                                                             rts

000034f4 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    34f4:	       lea -16(sp),sp
    34f8:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    34fa:	       move.l 24(sp),-(sp)
    34fe:	       jsr 438c <pauseFunction>
    3504:	       addq.l #4,sp
	if (fun -> stack) 
    3506:	       movea.l 24(sp),a0
    350a:	       move.l 24(a0),d0
    350e:	   /-- beq.s 3524 <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    3510:	   |   pea 150f2 <custom.c.64ca0e9f+0x41c>
    3516:	   |   pea 1511f <custom.c.64ca0e9f+0x449>
    351c:	   |   jsr 13db8 <KPrintF>
    3522:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    3524:	   \-> movea.l 24(sp),a0
    3528:	       move.l 4(a0),12(sp)
    352e:	       move.l 190fa <SysBase>,d0
    3534:	       movea.l d0,a6
    3536:	       movea.l 12(sp),a1
    353a:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    353e:	       clr.l 16(sp)
    3542:	   /-- bra.s 3562 <finishFunction+0x6e>
    3544:	/--|-> movea.l 24(sp),a0
    3548:	|  |   move.l 20(a0),d1
    354c:	|  |   move.l 16(sp),d0
    3550:	|  |   lsl.l #3,d0
    3552:	|  |   add.l d1,d0
    3554:	|  |   move.l d0,-(sp)
    3556:	|  |   jsr 11fbe <unlinkVar>
    355c:	|  |   addq.l #4,sp
    355e:	|  |   addq.l #1,16(sp)
    3562:	|  \-> movea.l 24(sp),a0
    3566:	|      move.l 8(a0),d0
    356a:	|      cmp.l 16(sp),d0
    356e:	\----- bgt.s 3544 <finishFunction+0x50>
	if( fun->numLocals > 0) {
    3570:	       movea.l 24(sp),a0
    3574:	       move.l 8(a0),d0
    3578:	   /-- ble.s 3594 <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    357a:	   |   movea.l 24(sp),a0
    357e:	   |   move.l 20(a0),8(sp)
    3584:	   |   move.l 190fa <SysBase>,d0
    358a:	   |   movea.l d0,a6
    358c:	   |   movea.l 8(sp),a1
    3590:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    3594:	   \-> moveq #28,d0
    3596:	       add.l 24(sp),d0
    359a:	       move.l d0,-(sp)
    359c:	       jsr 11fbe <unlinkVar>
    35a2:	       addq.l #4,sp
	FreeVec(fun);
    35a4:	       move.l 24(sp),4(sp)
    35aa:	       move.l 190fa <SysBase>,d0
    35b0:	       movea.l d0,a6
    35b2:	       movea.l 4(sp),a1
    35b6:	       jsr -690(a6)
	fun = NULL;
    35ba:	       clr.l 24(sp)
}
    35be:	       nop
    35c0:	       movea.l (sp)+,a6
    35c2:	       lea 16(sp),sp
    35c6:	       rts

000035c8 <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    35c8:	jsr 43e8 <runSludge>
}
    35ce:	rts

000035d0 <initSludge>:

BOOL initSludge (char * filename) {
    35d0:	             lea -296(sp),sp
    35d4:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    35d8:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    35dc:	             jsr 853c <makeNullAnim>
    35e2:	             move.l d0,1901a <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    35e8:	             pea 190a4 <gameVersion>
    35ee:	             pea 1512f <custom.c.64ca0e9f+0x459>
    35f4:	             pea 45 <_start+0x45>
    35f8:	             pea 47 <_start+0x47>
    35fc:	             move.l 336(sp),-(sp)
    3600:	             jsr 401c <openAndVerify>
    3606:	             lea 20(sp),sp
    360a:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    360e:	         /-- bne.s 3616 <initSludge+0x46>
    3610:	         |   clr.w d0
    3612:	/--------|-- bra.w 3d3c <initSludge+0x76c>
	if (FGetC (fp)) {
    3616:	|        \-> move.l 292(sp),288(sp)
    361c:	|            move.l 19102 <DOSBase>,d0
    3622:	|            movea.l d0,a6
    3624:	|            move.l 288(sp),d1
    3628:	|            jsr -306(a6)
    362c:	|            move.l d0,284(sp)
    3630:	|            move.l 284(sp),d0
    3634:	|  /-------- beq.w 37da <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    3638:	|  |         move.l 292(sp),-(sp)
    363c:	|  |         jsr 6bc <get2bytes>
    3642:	|  |         addq.l #4,sp
    3644:	|  |         move.l d0,190ce <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    364a:	|  |         move.l 190ce <numBIFNames>,d0
    3650:	|  |         move.l d0,280(sp)
    3654:	|  |         clr.l 276(sp)
    3658:	|  |         move.l 190fa <SysBase>,d0
    365e:	|  |         movea.l d0,a6
    3660:	|  |         move.l 280(sp),d0
    3664:	|  |         move.l 276(sp),d1
    3668:	|  |         jsr -684(a6)
    366c:	|  |         move.l d0,272(sp)
    3670:	|  |         move.l 272(sp),d0
    3674:	|  |         move.l d0,1908a <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    367a:	|  |         move.l 1908a <allBIFNames>,d0
    3680:	|  |     /-- bne.s 3688 <initSludge+0xb8>
    3682:	|  |     |   clr.w d0
    3684:	+--|-----|-- bra.w 3d3c <initSludge+0x76c>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    3688:	|  |     \-> clr.l 308(sp)
    368c:	|  |     /-- bra.s 36b2 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    368e:	|  |  /--|-> move.l 1908a <allBIFNames>,d1
    3694:	|  |  |  |   move.l 308(sp),d0
    3698:	|  |  |  |   add.l d0,d0
    369a:	|  |  |  |   add.l d0,d0
    369c:	|  |  |  |   movea.l d1,a2
    369e:	|  |  |  |   adda.l d0,a2
    36a0:	|  |  |  |   move.l 292(sp),-(sp)
    36a4:	|  |  |  |   jsr b02 <readString>
    36aa:	|  |  |  |   addq.l #4,sp
    36ac:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    36ae:	|  |  |  |   addq.l #1,308(sp)
    36b2:	|  |  |  \-> move.l 190ce <numBIFNames>,d0
    36b8:	|  |  |      cmp.l 308(sp),d0
    36bc:	|  |  \----- bgt.s 368e <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    36be:	|  |         move.l 292(sp),-(sp)
    36c2:	|  |         jsr 6bc <get2bytes>
    36c8:	|  |         addq.l #4,sp
    36ca:	|  |         move.l d0,190da <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    36d0:	|  |         move.l 190da <numUserFunc>,d0
    36d6:	|  |         move.l d0,268(sp)
    36da:	|  |         clr.l 264(sp)
    36de:	|  |         move.l 190fa <SysBase>,d0
    36e4:	|  |         movea.l d0,a6
    36e6:	|  |         move.l 268(sp),d0
    36ea:	|  |         move.l 264(sp),d1
    36ee:	|  |         jsr -684(a6)
    36f2:	|  |         move.l d0,260(sp)
    36f6:	|  |         move.l 260(sp),d0
    36fa:	|  |         move.l d0,19096 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    3700:	|  |         move.l 19096 <allUserFunc>,d0
    3706:	|  |     /-- bne.s 370e <initSludge+0x13e>
    3708:	|  |     |   clr.w d0
    370a:	+--|-----|-- bra.w 3d3c <initSludge+0x76c>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    370e:	|  |     \-> clr.l 304(sp)
    3712:	|  |     /-- bra.s 3738 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    3714:	|  |  /--|-> move.l 19096 <allUserFunc>,d1
    371a:	|  |  |  |   move.l 304(sp),d0
    371e:	|  |  |  |   add.l d0,d0
    3720:	|  |  |  |   add.l d0,d0
    3722:	|  |  |  |   movea.l d1,a2
    3724:	|  |  |  |   adda.l d0,a2
    3726:	|  |  |  |   move.l 292(sp),-(sp)
    372a:	|  |  |  |   jsr b02 <readString>
    3730:	|  |  |  |   addq.l #4,sp
    3732:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    3734:	|  |  |  |   addq.l #1,304(sp)
    3738:	|  |  |  \-> move.l 190da <numUserFunc>,d0
    373e:	|  |  |      cmp.l 304(sp),d0
    3742:	|  |  \----- bgt.s 3714 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    3744:	|  |         move.l 190a4 <gameVersion>,d0
    374a:	|  |         cmpi.l #258,d0
    3750:	|  +-------- ble.w 37da <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    3754:	|  |         move.l 292(sp),-(sp)
    3758:	|  |         jsr 6bc <get2bytes>
    375e:	|  |         addq.l #4,sp
    3760:	|  |         move.l d0,190d6 <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    3766:	|  |         move.l 190d6 <numResourceNames>,d0
    376c:	|  |         move.l d0,256(sp)
    3770:	|  |         clr.l 252(sp)
    3774:	|  |         move.l 190fa <SysBase>,d0
    377a:	|  |         movea.l d0,a6
    377c:	|  |         move.l 256(sp),d0
    3780:	|  |         move.l 252(sp),d1
    3784:	|  |         jsr -684(a6)
    3788:	|  |         move.l d0,248(sp)
    378c:	|  |         move.l 248(sp),d0
    3790:	|  |         move.l d0,1908e <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    3796:	|  |         move.l 1908e <allResourceNames>,d0
    379c:	|  |     /-- bne.s 37a4 <initSludge+0x1d4>
    379e:	|  |     |   clr.w d0
    37a0:	+--|-----|-- bra.w 3d3c <initSludge+0x76c>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    37a4:	|  |     \-> clr.l 300(sp)
    37a8:	|  |     /-- bra.s 37ce <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    37aa:	|  |  /--|-> move.l 1908e <allResourceNames>,d1
    37b0:	|  |  |  |   move.l 300(sp),d0
    37b4:	|  |  |  |   add.l d0,d0
    37b6:	|  |  |  |   add.l d0,d0
    37b8:	|  |  |  |   movea.l d1,a2
    37ba:	|  |  |  |   adda.l d0,a2
    37bc:	|  |  |  |   move.l 292(sp),-(sp)
    37c0:	|  |  |  |   jsr b02 <readString>
    37c6:	|  |  |  |   addq.l #4,sp
    37c8:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    37ca:	|  |  |  |   addq.l #1,300(sp)
    37ce:	|  |  |  \-> move.l 190d6 <numResourceNames>,d0
    37d4:	|  |  |      cmp.l 300(sp),d0
    37d8:	|  |  \----- bgt.s 37aa <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    37da:	|  \-------> move.l 292(sp),-(sp)
    37de:	|            jsr 6bc <get2bytes>
    37e4:	|            addq.l #4,sp
    37e6:	|            move.l d0,1904e <winWidth>
	winHeight = get2bytes (fp);
    37ec:	|            move.l 292(sp),-(sp)
    37f0:	|            jsr 6bc <get2bytes>
    37f6:	|            addq.l #4,sp
    37f8:	|            move.l d0,19052 <winHeight>
	specialSettings = FGetC (fp);
    37fe:	|            move.l 292(sp),244(sp)
    3804:	|            move.l 19102 <DOSBase>,d0
    380a:	|            movea.l d0,a6
    380c:	|            move.l 244(sp),d1
    3810:	|            jsr -306(a6)
    3814:	|            move.l d0,240(sp)
    3818:	|            move.l 240(sp),d0
    381c:	|            move.l d0,190de <specialSettings>

	desiredfps = 1000/FGetC (fp);
    3822:	|            move.l 292(sp),236(sp)
    3828:	|            move.l 19102 <DOSBase>,d0
    382e:	|            movea.l d0,a6
    3830:	|            move.l 236(sp),d1
    3834:	|            jsr -306(a6)
    3838:	|            move.l d0,232(sp)
    383c:	|            move.l 232(sp),d0
    3840:	|            move.l d0,-(sp)
    3842:	|            pea 3e8 <encodeFilename+0xea>
    3846:	|            jsr 147f4 <__divsi3>
    384c:	|            addq.l #8,sp
    384e:	|            move.l d0,18aa2 <desiredfps>

	FreeVec(readString (fp));
    3854:	|            move.l 292(sp),-(sp)
    3858:	|            jsr b02 <readString>
    385e:	|            addq.l #4,sp
    3860:	|            move.l d0,228(sp)
    3864:	|            move.l 190fa <SysBase>,d0
    386a:	|            movea.l d0,a6
    386c:	|            movea.l 228(sp),a1
    3870:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    3874:	|            move.l 292(sp),224(sp)
    387a:	|            move.l #102556,220(sp)
    3882:	|            moveq #8,d0
    3884:	|            move.l d0,216(sp)
    3888:	|            moveq #1,d1
    388a:	|            move.l d1,212(sp)
    388e:	|            move.l 19102 <DOSBase>,d0
    3894:	|            movea.l d0,a6
    3896:	|            move.l 224(sp),d1
    389a:	|            move.l 220(sp),d2
    389e:	|            move.l 216(sp),d3
    38a2:	|            move.l 212(sp),d4
    38a6:	|            jsr -324(a6)
    38aa:	|            move.l d0,208(sp)
    38ae:	|            move.l 208(sp),d0
    38b2:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    38b6:	|            moveq #1,d0
    38b8:	|            cmp.l 204(sp),d0
    38bc:	|        /-- beq.s 38cc <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    38be:	|        |   pea 15168 <custom.c.64ca0e9f+0x492>
    38c4:	|        |   jsr 13db8 <KPrintF>
    38ca:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    38cc:	|        \-> move.l 190a4 <gameVersion>,d0
    38d2:	|            cmpi.l #258,d0
    38d8:	|        /-- ble.s 38e8 <initSludge+0x318>
    38da:	|        |   move.l 292(sp),-(sp)
    38de:	|        |   jsr b02 <readString>
    38e4:	|        |   addq.l #4,sp
    38e6:	|     /--|-- bra.s 38fc <initSludge+0x32c>
    38e8:	|     |  \-> pea 15186 <custom.c.64ca0e9f+0x4b0>
    38ee:	|     |      pea 15186 <custom.c.64ca0e9f+0x4b0>
    38f4:	|     |      jsr 1129c <joinStrings>
    38fa:	|     |      addq.l #8,sp
    38fc:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    3900:	|            move.l 190a4 <gameVersion>,d0
    3906:	|            cmpi.l #258,d0
    390c:	|     /----- ble.s 392e <initSludge+0x35e>
    390e:	|     |      move.l 292(sp),196(sp)
    3914:	|     |      move.l 19102 <DOSBase>,d0
    391a:	|     |      movea.l d0,a6
    391c:	|     |      move.l 196(sp),d1
    3920:	|     |      jsr -306(a6)
    3924:	|     |      move.l d0,192(sp)
    3928:	|     |      move.l 192(sp),d0
    392c:	|     |  /-- bra.s 3930 <initSludge+0x360>
    392e:	|     \--|-> moveq #0,d0
    3930:	|        \-> move.l d0,1922e <gameSettings+0x4>
	makeLanguageTable (fp);
    3936:	|            move.l 292(sp),-(sp)
    393a:	|            jsr 10c52 <makeLanguageTable>
    3940:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    3942:	|            move.l 190a4 <gameVersion>,d0
    3948:	|            cmpi.l #261,d0
    394e:	|        /-- ble.s 399c <initSludge+0x3cc>
	{
		FGetC(fp);
    3950:	|        |   move.l 292(sp),188(sp)
    3956:	|        |   move.l 19102 <DOSBase>,d0
    395c:	|        |   movea.l d0,a6
    395e:	|        |   move.l 188(sp),d1
    3962:	|        |   jsr -306(a6)
    3966:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    396a:	|        |   move.l 292(sp),180(sp)
    3970:	|        |   move.l 19102 <DOSBase>,d0
    3976:	|        |   movea.l d0,a6
    3978:	|        |   move.l 180(sp),d1
    397c:	|        |   jsr -306(a6)
    3980:	|        |   move.l d0,176(sp)
		getFloat (fp);
    3984:	|        |   move.l 292(sp),-(sp)
    3988:	|        |   jsr 7d8 <getFloat>
    398e:	|        |   addq.l #4,sp
		getFloat (fp);
    3990:	|        |   move.l 292(sp),-(sp)
    3994:	|        |   jsr 7d8 <getFloat>
    399a:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    399c:	|        \-> move.l 292(sp),-(sp)
    39a0:	|            jsr b02 <readString>
    39a6:	|            addq.l #4,sp
    39a8:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    39ac:	|            pea 15187 <custom.c.64ca0e9f+0x4b1>
    39b2:	|            move.l 176(sp),-(sp)
    39b6:	|            jsr 1121c <strcmp>
    39bc:	|            addq.l #8,sp
    39be:	|            tst.l d0
    39c0:	|        /-- beq.s 39c8 <initSludge+0x3f8>
		return FALSE;
    39c2:	|        |   clr.w d0
    39c4:	+--------|-- bra.w 3d3c <initSludge+0x76c>
	}
	FreeVec( checker);
    39c8:	|        \-> move.l 172(sp),168(sp)
    39ce:	|            move.l 190fa <SysBase>,d0
    39d4:	|            movea.l d0,a6
    39d6:	|            movea.l 168(sp),a1
    39da:	|            jsr -690(a6)
	checker = NULL;
    39de:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    39e2:	|            move.l 292(sp),164(sp)
    39e8:	|            move.l 19102 <DOSBase>,d0
    39ee:	|            movea.l d0,a6
    39f0:	|            move.l 164(sp),d1
    39f4:	|            jsr -306(a6)
    39f8:	|            move.l d0,160(sp)
    39fc:	|            move.l 160(sp),d0
    3a00:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    3a04:	|            moveq #0,d0
    3a06:	|            move.b 159(sp),d0
    3a0a:	|            moveq #1,d1
    3a0c:	|            and.l d1,d0
    3a0e:	|        /-- beq.s 3a66 <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    3a10:	|        |   move.l 19102 <DOSBase>,d0
    3a16:	|        |   movea.l d0,a6
    3a18:	|        |   jsr -60(a6)
    3a1c:	|        |   move.l d0,38(sp)
    3a20:	|        |   move.l 38(sp),d0
    3a24:	|        |   move.l d0,34(sp)
    3a28:	|        |   move.l #86415,30(sp)
    3a30:	|        |   moveq #54,d0
    3a32:	|        |   move.l d0,26(sp)
    3a36:	|        |   move.l 19102 <DOSBase>,d0
    3a3c:	|        |   movea.l d0,a6
    3a3e:	|        |   move.l 34(sp),d1
    3a42:	|        |   move.l 30(sp),d2
    3a46:	|        |   move.l 26(sp),d3
    3a4a:	|        |   jsr -48(a6)
    3a4e:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    3a52:	|        |   pea 151c6 <custom.c.64ca0e9f+0x4f0>
    3a58:	|        |   jsr 13db8 <KPrintF>
    3a5e:	|        |   addq.l #4,sp
		return FALSE;
    3a60:	|        |   clr.w d0
    3a62:	+--------|-- bra.w 3d3c <initSludge+0x76c>
	}

	numGlobals = get2bytes (fp);
    3a66:	|        \-> move.l 292(sp),-(sp)
    3a6a:	|            jsr 6bc <get2bytes>
    3a70:	|            addq.l #4,sp
    3a72:	|            move.l d0,190d2 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    3a78:	|            move.l 190d2 <numGlobals>,d0
    3a7e:	|            lsl.l #3,d0
    3a80:	|            move.l d0,154(sp)
    3a84:	|            clr.l 150(sp)
    3a88:	|            move.l 190fa <SysBase>,d0
    3a8e:	|            movea.l d0,a6
    3a90:	|            move.l 154(sp),d0
    3a94:	|            move.l 150(sp),d1
    3a98:	|            jsr -684(a6)
    3a9c:	|            move.l d0,146(sp)
    3aa0:	|            move.l 146(sp),d0
    3aa4:	|            move.l d0,190a8 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    3aaa:	|            move.l 190a8 <globalVars>,d0
    3ab0:	|        /-- bne.s 3ace <initSludge+0x4fe>
    3ab2:	|        |   move.l 190d2 <numGlobals>,d0
    3ab8:	|        +-- ble.s 3ace <initSludge+0x4fe>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    3aba:	|        |   pea 151fe <custom.c.64ca0e9f+0x528>
    3ac0:	|        |   jsr 13db8 <KPrintF>
    3ac6:	|        |   addq.l #4,sp
		return FALSE;
    3ac8:	|        |   clr.w d0
    3aca:	+--------|-- bra.w 3d3c <initSludge+0x76c>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    3ace:	|        \-> clr.l 312(sp)
    3ad2:	|        /-- bra.s 3aea <initSludge+0x51a>
    3ad4:	|     /--|-> move.l 190a8 <globalVars>,d1
    3ada:	|     |  |   move.l 312(sp),d0
    3ade:	|     |  |   lsl.l #3,d0
    3ae0:	|     |  |   movea.l d1,a0
    3ae2:	|     |  |   adda.l d0,a0
    3ae4:	|     |  |   clr.l (a0)
    3ae6:	|     |  |   addq.l #1,312(sp)
    3aea:	|     |  \-> move.l 190d2 <numGlobals>,d0
    3af0:	|     |      cmp.l 312(sp),d0
    3af4:	|     \----- bgt.s 3ad4 <initSludge+0x504>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    3af6:	|            move.l 1922e <gameSettings+0x4>,d0
    3afc:	|            clr.l -(sp)
    3afe:	|            move.l d0,-(sp)
    3b00:	|            move.l 300(sp),-(sp)
    3b04:	|            jsr 4ac2 <setFileIndices>
    3b0a:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    3b0e:	|            pea 1 <_start+0x1>
    3b12:	|            jsr 477c <getNumberedString>
    3b18:	|            addq.l #4,sp
    3b1a:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    3b1e:	|            move.l 142(sp),-(sp)
    3b22:	|            jsr 2fe <encodeFilename>
    3b28:	|            addq.l #4,sp
    3b2a:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    3b2e:	|            move.l 142(sp),134(sp)
    3b34:	|            move.l 190fa <SysBase>,d0
    3b3a:	|            movea.l d0,a6
    3b3c:	|            movea.l 134(sp),a1
    3b40:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    3b44:	|            move.l 138(sp),130(sp)
    3b4a:	|            move.l 19102 <DOSBase>,d0
    3b50:	|            movea.l d0,a6
    3b52:	|            move.l 130(sp),d1
    3b56:	|            jsr -120(a6)
    3b5a:	|            move.l d0,126(sp)
    3b5e:	|            move.l 126(sp),d0
    3b62:	|            move.l d0,296(sp)
	if(lock == 0) {
    3b66:	|        /-- bne.s 3b94 <initSludge+0x5c4>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    3b68:	|        |   move.l 138(sp),122(sp)
    3b6e:	|        |   moveq #-2,d1
    3b70:	|        |   move.l d1,118(sp)
    3b74:	|        |   move.l 19102 <DOSBase>,d0
    3b7a:	|        |   movea.l d0,a6
    3b7c:	|        |   move.l 122(sp),d1
    3b80:	|        |   move.l 118(sp),d2
    3b84:	|        |   jsr -84(a6)
    3b88:	|        |   move.l d0,114(sp)
    3b8c:	|        |   move.l 114(sp),d0
    3b90:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    3b94:	|        \-> move.l 296(sp),110(sp)
    3b9a:	|            move.l 19102 <DOSBase>,d0
    3ba0:	|            movea.l d0,a6
    3ba2:	|            move.l 110(sp),d1
    3ba6:	|            jsr -126(a6)
    3baa:	|            move.l d0,106(sp)
    3bae:	|            move.l 106(sp),d0
    3bb2:	|        /-- bne.s 3c0e <initSludge+0x63e>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    3bb4:	|        |   move.l 138(sp),-(sp)
    3bb8:	|        |   pea 15231 <custom.c.64ca0e9f+0x55b>
    3bbe:	|        |   jsr 13db8 <KPrintF>
    3bc4:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    3bc6:	|        |   move.l 19102 <DOSBase>,d0
    3bcc:	|        |   movea.l d0,a6
    3bce:	|        |   jsr -60(a6)
    3bd2:	|        |   move.l d0,58(sp)
    3bd6:	|        |   move.l 58(sp),d0
    3bda:	|        |   move.l d0,54(sp)
    3bde:	|        |   move.l #86622,50(sp)
    3be6:	|        |   moveq #40,d0
    3be8:	|        |   move.l d0,46(sp)
    3bec:	|        |   move.l 19102 <DOSBase>,d0
    3bf2:	|        |   movea.l d0,a6
    3bf4:	|        |   move.l 54(sp),d1
    3bf8:	|        |   move.l 50(sp),d2
    3bfc:	|        |   move.l 46(sp),d3
    3c00:	|        |   jsr -48(a6)
    3c04:	|        |   move.l d0,42(sp)
		return FALSE;
    3c08:	|        |   clr.w d0
    3c0a:	+--------|-- bra.w 3d3c <initSludge+0x76c>
	}

	FreeVec(gameName);
    3c0e:	|        \-> move.l 138(sp),102(sp)
    3c14:	|            move.l 190fa <SysBase>,d0
    3c1a:	|            movea.l d0,a6
    3c1c:	|            movea.l 102(sp),a1
    3c20:	|            jsr -690(a6)

	readIniFile (filename);
    3c24:	|            move.l 320(sp),-(sp)
    3c28:	|            jsr 10d86 <readIniFile>
    3c2e:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    3c30:	|            jsr 10b58 <getLanguageForFileB>
    3c36:	|            move.l d0,18a90 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    3c3c:	|            move.l 18a90 <languageNum>,d0
    3c42:	|        /-- bpl.s 3c52 <initSludge+0x682>
    3c44:	|        |   pea 15287 <custom.c.64ca0e9f+0x5b1>
    3c4a:	|        |   jsr 13db8 <KPrintF>
    3c50:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    3c52:	|        \-> move.l 18a90 <languageNum>,d0
    3c58:	|            move.l d0,d1
    3c5a:	|            move.l 1922e <gameSettings+0x4>,d0
    3c60:	|            move.l d1,-(sp)
    3c62:	|            move.l d0,-(sp)
    3c64:	|            clr.l -(sp)
    3c66:	|            jsr 4ac2 <setFileIndices>
    3c6c:	|            lea 12(sp),sp

	if (dataFol[0]) {
    3c70:	|            movea.l 200(sp),a0
    3c74:	|            move.b (a0),d0
    3c76:	|     /----- beq.w 3d20 <initSludge+0x750>
		char *dataFolder = encodeFilename(dataFol);
    3c7a:	|     |      move.l 200(sp),-(sp)
    3c7e:	|     |      jsr 2fe <encodeFilename>
    3c84:	|     |      addq.l #4,sp
    3c86:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    3c8a:	|     |      move.l 98(sp),94(sp)
    3c90:	|     |      move.l 19102 <DOSBase>,d0
    3c96:	|     |      movea.l d0,a6
    3c98:	|     |      move.l 94(sp),d1
    3c9c:	|     |      jsr -120(a6)
    3ca0:	|     |      move.l d0,90(sp)
    3ca4:	|     |      move.l 90(sp),d0
    3ca8:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    3cac:	|     |  /-- bne.s 3cda <initSludge+0x70a>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    3cae:	|     |  |   move.l 98(sp),86(sp)
    3cb4:	|     |  |   moveq #-2,d1
    3cb6:	|     |  |   move.l d1,82(sp)
    3cba:	|     |  |   move.l 19102 <DOSBase>,d0
    3cc0:	|     |  |   movea.l d0,a6
    3cc2:	|     |  |   move.l 86(sp),d1
    3cc6:	|     |  |   move.l 82(sp),d2
    3cca:	|     |  |   jsr -84(a6)
    3cce:	|     |  |   move.l d0,78(sp)
    3cd2:	|     |  |   move.l 78(sp),d0
    3cd6:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    3cda:	|     |  \-> move.l 296(sp),74(sp)
    3ce0:	|     |      move.l 19102 <DOSBase>,d0
    3ce6:	|     |      movea.l d0,a6
    3ce8:	|     |      move.l 74(sp),d1
    3cec:	|     |      jsr -126(a6)
    3cf0:	|     |      move.l d0,70(sp)
    3cf4:	|     |      move.l 70(sp),d0
    3cf8:	|     |  /-- bne.s 3d0a <initSludge+0x73a>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    3cfa:	|     |  |   move.l 19102 <DOSBase>,d0
    3d00:	|     |  |   movea.l d0,a6
    3d02:	|     |  |   jsr -60(a6)
    3d06:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    3d0a:	|     |  \-> move.l 98(sp),62(sp)
    3d10:	|     |      move.l 190fa <SysBase>,d0
    3d16:	|     |      movea.l d0,a6
    3d18:	|     |      movea.l 62(sp),a1
    3d1c:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    3d20:	|     \----> movea.l 19052 <winHeight>,a0
    3d26:	|            lea -15(a0),a0
    3d2a:	|            move.l a0,d0
    3d2c:	|            move.l d0,-(sp)
    3d2e:	|            pea a <_start+0xa>
    3d32:	|            jsr 54f4 <positionStatus>
    3d38:	|            addq.l #8,sp

	return TRUE;
    3d3a:	|            moveq #1,d0
}
    3d3c:	\----------> movem.l (sp)+,d2-d4/a2/a6
    3d40:	             lea 296(sp),sp
    3d44:	             rts

00003d46 <killSpeechTimers>:

void killSpeechTimers () {
    3d46:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    3d48:	          move.l 19092 <allRunningFunctions>,(sp)

	while (thisFunction) {
    3d4e:	   /----- bra.s 3d7a <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    3d50:	/--|----> movea.l (sp),a0
    3d52:	|  |      move.b 56(a0),d0
    3d56:	|  |  /-- bne.s 3d74 <killSpeechTimers+0x2e>
    3d58:	|  |  |   movea.l (sp),a0
    3d5a:	|  |  |   move.w 50(a0),d0
    3d5e:	|  |  +-- beq.s 3d74 <killSpeechTimers+0x2e>
    3d60:	|  |  |   movea.l (sp),a0
    3d62:	|  |  |   move.l 12(a0),d0
    3d66:	|  |  +-- beq.s 3d74 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    3d68:	|  |  |   movea.l (sp),a0
    3d6a:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    3d6e:	|  |  |   movea.l (sp),a0
    3d70:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    3d74:	|  |  \-> movea.l (sp),a0
    3d76:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    3d7a:	|  \----> tst.l (sp)
    3d7c:	\-------- bne.s 3d50 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    3d7e:	          jsr 5a32 <killAllSpeech>
}
    3d84:	          nop
    3d86:	          addq.l #4,sp
    3d88:	          rts

00003d8a <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    3d8a:	             lea -52(sp),sp
    3d8e:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    3d90:	             movea.l 60(sp),a0
    3d94:	             move.l (a0),d0
    3d96:	             move.l d0,-(sp)
    3d98:	             jsr 4a02 <openSubSlice>
    3d9e:	             addq.l #4,sp
    3da0:	             tst.w d0
    3da2:	         /-- bne.s 3daa <loadFunctionCode+0x20>
    3da4:	         |   clr.w d0
    3da6:	/--------|-- bra.w 3f74 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    3daa:	|        \-> move.l 190e2 <bigDataFile>,44(sp)
    3db2:	|            move.l 19102 <DOSBase>,d0
    3db8:	|            movea.l d0,a6
    3dba:	|            move.l 44(sp),d1
    3dbe:	|            jsr -306(a6)
    3dc2:	|            move.l d0,40(sp)
    3dc6:	|            move.l 40(sp),d0
    3dca:	|            move.l d0,d0
    3dcc:	|            movea.l 60(sp),a0
    3dd0:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    3dd4:	|            move.l 190e2 <bigDataFile>,d0
    3dda:	|            move.l d0,-(sp)
    3ddc:	|            jsr 6bc <get2bytes>
    3de2:	|            addq.l #4,sp
    3de4:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    3de8:	|            move.l 190e2 <bigDataFile>,d0
    3dee:	|            move.l d0,-(sp)
    3df0:	|            jsr 6bc <get2bytes>
    3df6:	|            addq.l #4,sp
    3df8:	|            movea.l 60(sp),a0
    3dfc:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    3e00:	|            move.l 190e2 <bigDataFile>,d0
    3e06:	|            move.l d0,-(sp)
    3e08:	|            jsr 6bc <get2bytes>
    3e0e:	|            addq.l #4,sp
    3e10:	|            movea.l 60(sp),a0
    3e14:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    3e18:	|            move.l 36(sp),d0
    3e1c:	|            lsl.l #3,d0
    3e1e:	|            move.l d0,32(sp)
    3e22:	|            clr.l 28(sp)
    3e26:	|            move.l 190fa <SysBase>,d0
    3e2c:	|            movea.l d0,a6
    3e2e:	|            move.l 32(sp),d0
    3e32:	|            move.l 28(sp),d1
    3e36:	|            jsr -684(a6)
    3e3a:	|            move.l d0,24(sp)
    3e3e:	|            move.l 24(sp),d0
    3e42:	|            movea.l 60(sp),a0
    3e46:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    3e4a:	|            movea.l 60(sp),a0
    3e4e:	|            move.l 4(a0),d0
    3e52:	|        /-- bne.s 3e68 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    3e54:	|        |   pea 152b2 <custom.c.64ca0e9f+0x5dc>
    3e5a:	|        |   jsr 13db8 <KPrintF>
    3e60:	|        |   addq.l #4,sp
		return FALSE;
    3e62:	|        |   clr.w d0
    3e64:	+--------|-- bra.w 3f74 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3e68:	|        \-> clr.l 52(sp)
    3e6c:	|        /-- bra.s 3ece <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    3e6e:	|     /--|-> move.l 190e2 <bigDataFile>,8(sp)
    3e76:	|     |  |   move.l 19102 <DOSBase>,d0
    3e7c:	|     |  |   movea.l d0,a6
    3e7e:	|     |  |   move.l 8(sp),d1
    3e82:	|     |  |   jsr -306(a6)
    3e86:	|     |  |   move.l d0,4(sp)
    3e8a:	|     |  |   move.l 4(sp),d1
    3e8e:	|     |  |   movea.l 60(sp),a0
    3e92:	|     |  |   movea.l 4(a0),a0
    3e96:	|     |  |   move.l 52(sp),d0
    3e9a:	|     |  |   lsl.l #3,d0
    3e9c:	|     |  |   adda.l d0,a0
    3e9e:	|     |  |   move.l d1,d0
    3ea0:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    3ea2:	|     |  |   move.l 190e2 <bigDataFile>,d0
    3ea8:	|     |  |   move.l d0,-(sp)
    3eaa:	|     |  |   jsr 6bc <get2bytes>
    3eb0:	|     |  |   addq.l #4,sp
    3eb2:	|     |  |   move.l d0,d1
    3eb4:	|     |  |   movea.l 60(sp),a0
    3eb8:	|     |  |   movea.l 4(a0),a0
    3ebc:	|     |  |   move.l 52(sp),d0
    3ec0:	|     |  |   lsl.l #3,d0
    3ec2:	|     |  |   adda.l d0,a0
    3ec4:	|     |  |   move.l d1,d0
    3ec6:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3eca:	|     |  |   addq.l #1,52(sp)
    3ece:	|     |  \-> move.l 52(sp),d0
    3ed2:	|     |      cmp.l 36(sp),d0
    3ed6:	|     \----- bcs.s 3e6e <loadFunctionCode+0xe4>
	}

	finishAccess ();
    3ed8:	|            jsr 4772 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    3ede:	|            movea.l 60(sp),a0
    3ee2:	|            move.l 8(a0),d0
    3ee6:	|  /-------- ble.w 3f6a <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    3eea:	|  |         movea.l 60(sp),a0
    3eee:	|  |         move.l 8(a0),d0
    3ef2:	|  |         lsl.l #3,d0
    3ef4:	|  |         move.l d0,20(sp)
    3ef8:	|  |         clr.l 16(sp)
    3efc:	|  |         move.l 190fa <SysBase>,d0
    3f02:	|  |         movea.l d0,a6
    3f04:	|  |         move.l 20(sp),d0
    3f08:	|  |         move.l 16(sp),d1
    3f0c:	|  |         jsr -684(a6)
    3f10:	|  |         move.l d0,12(sp)
    3f14:	|  |         move.l 12(sp),d0
    3f18:	|  |         movea.l 60(sp),a0
    3f1c:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    3f20:	|  |         movea.l 60(sp),a0
    3f24:	|  |         move.l 20(a0),d0
    3f28:	|  |     /-- bne.s 3f3c <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    3f2a:	|  |     |   pea 152b2 <custom.c.64ca0e9f+0x5dc>
    3f30:	|  |     |   jsr 13db8 <KPrintF>
    3f36:	|  |     |   addq.l #4,sp
			return FALSE;
    3f38:	|  |     |   clr.w d0
    3f3a:	+--|-----|-- bra.s 3f74 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    3f3c:	|  |     \-> clr.l 48(sp)
    3f40:	|  |     /-- bra.s 3f5a <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    3f42:	|  |  /--|-> movea.l 60(sp),a0
    3f46:	|  |  |  |   move.l 20(a0),d1
    3f4a:	|  |  |  |   move.l 48(sp),d0
    3f4e:	|  |  |  |   lsl.l #3,d0
    3f50:	|  |  |  |   movea.l d1,a0
    3f52:	|  |  |  |   adda.l d0,a0
    3f54:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    3f56:	|  |  |  |   addq.l #1,48(sp)
    3f5a:	|  |  |  \-> movea.l 60(sp),a0
    3f5e:	|  |  |      move.l 8(a0),d0
    3f62:	|  |  |      cmp.l 48(sp),d0
    3f66:	|  |  \----- bgt.s 3f42 <loadFunctionCode+0x1b8>
    3f68:	|  |     /-- bra.s 3f72 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    3f6a:	|  \-----|-> movea.l 60(sp),a0
    3f6e:	|        |   clr.l 8(a0)
	}
	return TRUE;
    3f72:	|        \-> moveq #1,d0
}
    3f74:	\----------> movea.l (sp)+,a6
    3f76:	             lea 52(sp),sp
    3f7a:	             rts

00003f7c <loadHandlers>:

void loadHandlers (BPTR fp) {
    3f7c:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    3f7e:	movea.l 18a8c <currentEvents>,a2
    3f84:	move.l 8(sp),-(sp)
    3f88:	jsr 6bc <get2bytes>
    3f8e:	addq.l #4,sp
    3f90:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    3f92:	movea.l 18a8c <currentEvents>,a2
    3f98:	move.l 8(sp),-(sp)
    3f9c:	jsr 6bc <get2bytes>
    3fa2:	addq.l #4,sp
    3fa4:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    3fa8:	movea.l 18a8c <currentEvents>,a2
    3fae:	move.l 8(sp),-(sp)
    3fb2:	jsr 6bc <get2bytes>
    3fb8:	addq.l #4,sp
    3fba:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    3fbe:	movea.l 18a8c <currentEvents>,a2
    3fc4:	move.l 8(sp),-(sp)
    3fc8:	jsr 6bc <get2bytes>
    3fce:	addq.l #4,sp
    3fd0:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    3fd4:	movea.l 18a8c <currentEvents>,a2
    3fda:	move.l 8(sp),-(sp)
    3fde:	jsr 6bc <get2bytes>
    3fe4:	addq.l #4,sp
    3fe6:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    3fea:	movea.l 18a8c <currentEvents>,a2
    3ff0:	move.l 8(sp),-(sp)
    3ff4:	jsr 6bc <get2bytes>
    3ffa:	addq.l #4,sp
    3ffc:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    4000:	movea.l 18a8c <currentEvents>,a2
    4006:	move.l 8(sp),-(sp)
    400a:	jsr 6bc <get2bytes>
    4010:	addq.l #4,sp
    4012:	move.l d0,24(a2)
}
    4016:	nop
    4018:	movea.l (sp)+,a2
    401a:	rts

0000401c <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    401c:	       lea -312(sp),sp
    4020:	       movem.l d2-d3/a6,-(sp)
    4024:	       move.l 332(sp),d1
    4028:	       move.l 336(sp),d0
    402c:	       move.b d1,d1
    402e:	       move.b d1,16(sp)
    4032:	       move.b d0,d0
    4034:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    4038:	       move.l 328(sp),318(sp)
    403e:	       move.l #1005,314(sp)
    4046:	       move.l 19102 <DOSBase>,d0
    404c:	       movea.l d0,a6
    404e:	       move.l 318(sp),d1
    4052:	       move.l 314(sp),d2
    4056:	       jsr -30(a6)
    405a:	       move.l d0,310(sp)
    405e:	       move.l 310(sp),d0
    4062:	       move.l d0,306(sp)

	if (! fp) {
    4066:	   /-- bne.s 40c2 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    4068:	   |   move.l 19102 <DOSBase>,d0
    406e:	   |   movea.l d0,a6
    4070:	   |   jsr -60(a6)
    4074:	   |   move.l d0,154(sp)
    4078:	   |   move.l 154(sp),d0
    407c:	   |   move.l d0,150(sp)
    4080:	   |   move.l #86747,146(sp)
    4088:	   |   moveq #31,d0
    408a:	   |   move.l d0,142(sp)
    408e:	   |   move.l 19102 <DOSBase>,d0
    4094:	   |   movea.l d0,a6
    4096:	   |   move.l 150(sp),d1
    409a:	   |   move.l 146(sp),d2
    409e:	   |   move.l 142(sp),d3
    40a2:	   |   jsr -48(a6)
    40a6:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    40aa:	   |   move.l 328(sp),-(sp)
    40ae:	   |   pea 152fb <custom.c.64ca0e9f+0x625>
    40b4:	   |   jsr 13db8 <KPrintF>
    40ba:	   |   addq.l #8,sp
		return NULL;
    40bc:	   |   moveq #0,d0
    40be:	/--|-- bra.w 4382 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    40c2:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    40c6:	|      move.l 306(sp),302(sp)
    40cc:	|      move.l 19102 <DOSBase>,d0
    40d2:	|      movea.l d0,a6
    40d4:	|      move.l 302(sp),d1
    40d8:	|      jsr -306(a6)
    40dc:	|      move.l d0,298(sp)
    40e0:	|      move.l 298(sp),d0
    40e4:	|      moveq #83,d1
    40e6:	|      cmp.l d0,d1
    40e8:	|  /-- beq.s 40f0 <openAndVerify+0xd4>
    40ea:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    40f0:	|  \-> move.l 306(sp),294(sp)
    40f6:	|      move.l 19102 <DOSBase>,d0
    40fc:	|      movea.l d0,a6
    40fe:	|      move.l 294(sp),d1
    4102:	|      jsr -306(a6)
    4106:	|      move.l d0,290(sp)
    410a:	|      move.l 290(sp),d0
    410e:	|      moveq #76,d1
    4110:	|      cmp.l d0,d1
    4112:	|  /-- beq.s 411a <openAndVerify+0xfe>
    4114:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    411a:	|  \-> move.l 306(sp),286(sp)
    4120:	|      move.l 19102 <DOSBase>,d0
    4126:	|      movea.l d0,a6
    4128:	|      move.l 286(sp),d1
    412c:	|      jsr -306(a6)
    4130:	|      move.l d0,282(sp)
    4134:	|      move.l 282(sp),d0
    4138:	|      moveq #85,d1
    413a:	|      cmp.l d0,d1
    413c:	|  /-- beq.s 4144 <openAndVerify+0x128>
    413e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    4144:	|  \-> move.l 306(sp),278(sp)
    414a:	|      move.l 19102 <DOSBase>,d0
    4150:	|      movea.l d0,a6
    4152:	|      move.l 278(sp),d1
    4156:	|      jsr -306(a6)
    415a:	|      move.l d0,274(sp)
    415e:	|      move.l 274(sp),d0
    4162:	|      moveq #68,d1
    4164:	|      cmp.l d0,d1
    4166:	|  /-- beq.s 416e <openAndVerify+0x152>
    4168:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    416e:	|  \-> move.l 306(sp),270(sp)
    4174:	|      move.l 19102 <DOSBase>,d0
    417a:	|      movea.l d0,a6
    417c:	|      move.l 270(sp),d1
    4180:	|      jsr -306(a6)
    4184:	|      move.l d0,266(sp)
    4188:	|      move.l 266(sp),d1
    418c:	|      move.b 16(sp),d0
    4190:	|      ext.w d0
    4192:	|      movea.w d0,a0
    4194:	|      cmpa.l d1,a0
    4196:	|  /-- beq.s 419e <openAndVerify+0x182>
    4198:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    419e:	|  \-> move.l 306(sp),262(sp)
    41a4:	|      move.l 19102 <DOSBase>,d0
    41aa:	|      movea.l d0,a6
    41ac:	|      move.l 262(sp),d1
    41b0:	|      jsr -306(a6)
    41b4:	|      move.l d0,258(sp)
    41b8:	|      move.l 258(sp),d1
    41bc:	|      move.b 14(sp),d0
    41c0:	|      ext.w d0
    41c2:	|      movea.w d0,a0
    41c4:	|      cmpa.l d1,a0
    41c6:	|  /-- beq.s 41ce <openAndVerify+0x1b2>
    41c8:	|  |   move.w #1,322(sp)
	if (headerBad) {
    41ce:	|  \-> tst.w 322(sp)
    41d2:	|  /-- beq.s 422a <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    41d4:	|  |   move.l 19102 <DOSBase>,d0
    41da:	|  |   movea.l d0,a6
    41dc:	|  |   jsr -60(a6)
    41e0:	|  |   move.l d0,174(sp)
    41e4:	|  |   move.l 174(sp),d0
    41e8:	|  |   move.l d0,170(sp)
    41ec:	|  |   move.l #86810,166(sp)
    41f4:	|  |   moveq #31,d0
    41f6:	|  |   move.l d0,162(sp)
    41fa:	|  |   move.l 19102 <DOSBase>,d0
    4200:	|  |   movea.l d0,a6
    4202:	|  |   move.l 170(sp),d1
    4206:	|  |   move.l 166(sp),d2
    420a:	|  |   move.l 162(sp),d3
    420e:	|  |   jsr -48(a6)
    4212:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    4216:	|  |   pea 1531a <custom.c.64ca0e9f+0x644>
    421c:	|  |   jsr 13db8 <KPrintF>
    4222:	|  |   addq.l #4,sp
		return NULL;
    4224:	|  |   moveq #0,d0
    4226:	+--|-- bra.w 4382 <openAndVerify+0x366>
	}
	FGetC (fp);
    422a:	|  \-> move.l 306(sp),254(sp)
    4230:	|      move.l 19102 <DOSBase>,d0
    4236:	|      movea.l d0,a6
    4238:	|      move.l 254(sp),d1
    423c:	|      jsr -306(a6)
    4240:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    4244:	|      nop
    4246:	|  /-> move.l 306(sp),246(sp)
    424c:	|  |   move.l 19102 <DOSBase>,d0
    4252:	|  |   movea.l d0,a6
    4254:	|  |   move.l 246(sp),d1
    4258:	|  |   jsr -306(a6)
    425c:	|  |   move.l d0,242(sp)
    4260:	|  |   move.l 242(sp),d0
    4264:	|  \-- bne.s 4246 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    4266:	|      move.l 306(sp),238(sp)
    426c:	|      move.l 19102 <DOSBase>,d0
    4272:	|      movea.l d0,a6
    4274:	|      move.l 238(sp),d1
    4278:	|      jsr -306(a6)
    427c:	|      move.l d0,234(sp)
    4280:	|      move.l 234(sp),d0
    4284:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    4288:	|      move.l 306(sp),226(sp)
    428e:	|      move.l 19102 <DOSBase>,d0
    4294:	|      movea.l d0,a6
    4296:	|      move.l 226(sp),d1
    429a:	|      jsr -306(a6)
    429e:	|      move.l d0,222(sp)
    42a2:	|      move.l 222(sp),d0
    42a6:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    42aa:	|      move.l 230(sp),d0
    42ae:	|      lsl.l #8,d0
    42b0:	|      add.l 218(sp),d0
    42b4:	|      movea.l 344(sp),a0
    42b8:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    42ba:	|      movea.l 344(sp),a0
    42be:	|      move.l (a0),d0
    42c0:	|      cmpi.l #514,d0
    42c6:	|  /-- ble.s 431c <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    42c8:	|  |   move.l 19102 <DOSBase>,d0
    42ce:	|  |   movea.l d0,a6
    42d0:	|  |   jsr -60(a6)
    42d4:	|  |   move.l d0,194(sp)
    42d8:	|  |   move.l 194(sp),d0
    42dc:	|  |   move.l d0,190(sp)
    42e0:	|  |   move.l #86837,186(sp)
    42e8:	|  |   moveq #100,d1
    42ea:	|  |   move.l d1,182(sp)
    42ee:	|  |   move.l 19102 <DOSBase>,d0
    42f4:	|  |   movea.l d0,a6
    42f6:	|  |   move.l 190(sp),d1
    42fa:	|  |   move.l 186(sp),d2
    42fe:	|  |   move.l 182(sp),d3
    4302:	|  |   jsr -48(a6)
    4306:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    430a:	|  |   pea 15335 <custom.c.64ca0e9f+0x65f>
    4310:	|  |   jsr 13db8 <KPrintF>
    4316:	|  |   addq.l #4,sp
		return NULL;
    4318:	|  |   moveq #0,d0
    431a:	+--|-- bra.s 4382 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    431c:	|  \-> movea.l 344(sp),a0
    4320:	|      move.l (a0),d0
    4322:	|      cmpi.l #257,d0
    4328:	|  /-- bgt.s 437e <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    432a:	|  |   move.l 19102 <DOSBase>,d0
    4330:	|  |   movea.l d0,a6
    4332:	|  |   jsr -60(a6)
    4336:	|  |   move.l d0,214(sp)
    433a:	|  |   move.l 214(sp),d0
    433e:	|  |   move.l d0,210(sp)
    4342:	|  |   move.l #86906,206(sp)
    434a:	|  |   moveq #100,d0
    434c:	|  |   move.l d0,202(sp)
    4350:	|  |   move.l 19102 <DOSBase>,d0
    4356:	|  |   movea.l d0,a6
    4358:	|  |   move.l 210(sp),d1
    435c:	|  |   move.l 206(sp),d2
    4360:	|  |   move.l 202(sp),d3
    4364:	|  |   jsr -48(a6)
    4368:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    436c:	|  |   pea 1537a <custom.c.64ca0e9f+0x6a4>
    4372:	|  |   jsr 13db8 <KPrintF>
    4378:	|  |   addq.l #4,sp
		return NULL;
    437a:	|  |   moveq #0,d0
    437c:	+--|-- bra.s 4382 <openAndVerify+0x366>
	}
	return fp;
    437e:	|  \-> move.l 306(sp),d0
}
    4382:	\----> movem.l (sp)+,d2-d3/a6
    4386:	       lea 312(sp),sp
    438a:	       rts

0000438c <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    438c:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    438e:	          move.l #102546,(sp)
	while (* huntAndDestroy) {
    4394:	   /----- bra.s 43c0 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    4396:	/--|----> movea.l (sp),a0
    4398:	|  |      move.l (a0),d0
    439a:	|  |      cmp.l 8(sp),d0
    439e:	|  |  /-- bne.s 43b6 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    43a0:	|  |  |   movea.l (sp),a0
    43a2:	|  |  |   movea.l (a0),a0
    43a4:	|  |  |   move.l 44(a0),d0
    43a8:	|  |  |   movea.l (sp),a0
    43aa:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    43ac:	|  |  |   movea.l 8(sp),a0
    43b0:	|  |  |   clr.l 44(a0)
    43b4:	|  +--|-- bra.s 43c0 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    43b6:	|  |  \-> movea.l (sp),a0
    43b8:	|  |      move.l (a0),d0
    43ba:	|  |      moveq #44,d1
    43bc:	|  |      add.l d0,d1
    43be:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    43c0:	|  \----> movea.l (sp),a0
    43c2:	|         move.l (a0),d0
    43c4:	\-------- bne.s 4396 <pauseFunction+0xa>
		}
	}
}
    43c6:	          nop
    43c8:	          nop
    43ca:	          addq.l #4,sp
    43cc:	          rts

000043ce <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    43ce:	move.l 19092 <allRunningFunctions>,d0
    43d4:	movea.l 4(sp),a0
    43d8:	move.l d0,44(a0)
	allRunningFunctions = fun;
    43dc:	move.l 4(sp),19092 <allRunningFunctions>
}
    43e4:	nop
    43e6:	rts

000043e8 <runSludge>:

BOOL runSludge () {
    43e8:	                   lea -12(sp),sp
    43ec:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    43ee:	                   move.l 19092 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    43f6:	      /----------- bra.s 4472 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    43f8:	   /--|----------> movea.l 12(sp),a0
    43fc:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    4402:	   |  |            movea.l 12(sp),a0
    4406:	   |  |            move.b 56(a0),d0
    440a:	   |  |  /-------- bne.s 446c <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    440c:	   |  |  |         movea.l 12(sp),a0
    4410:	   |  |  |         move.l 12(a0),d0
    4414:	   |  |  |  /----- beq.s 443e <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    4416:	   |  |  |  |      movea.l 12(sp),a0
    441a:	   |  |  |  |      move.l 12(a0),d0
    441e:	   |  |  |  |  /-- bpl.s 442a <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    4420:	   |  |  |  |  |   movea.l 12(sp),a0
    4424:	   |  |  |  |  |   clr.l 12(a0)
    4428:	   |  |  +--|--|-- bra.s 446c <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    442a:	   |  |  |  |  \-> movea.l 12(sp),a0
    442e:	   |  |  |  |      move.l 12(a0),d0
    4432:	   |  |  |  |      subq.l #1,d0
    4434:	   |  |  |  |      movea.l 12(sp),a0
    4438:	   |  |  |  |      move.l d0,12(a0)
    443c:	   |  |  +--|----- bra.s 446c <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    443e:	   |  |  |  \----> movea.l 12(sp),a0
    4442:	   |  |  |         move.w 50(a0),d0
    4446:	   |  |  |     /-- beq.s 4456 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    4448:	   |  |  |     |   movea.l 12(sp),a0
    444c:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    4450:	   |  |  |     |   jsr 5a32 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    4456:	   |  |  |     \-> move.l 12(sp),-(sp)
    445a:	   |  |  |         jsr 2632 <continueFunction>
    4460:	   |  |  |         addq.l #4,sp
    4462:	   |  |  |         tst.w d0
    4464:	   |  |  +-------- bne.s 446c <runSludge+0x84>
					return FALSE;
    4466:	   |  |  |         clr.w d0
    4468:	/--|--|--|-------- bra.w 44f8 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    446c:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    4472:	|  |  \----------> tst.l 12(sp)
    4476:	|  \-------------- bne.s 43f8 <runSludge+0x10>
	}

	if (loadNow) {
    4478:	|                  move.l 190c6 <loadNow>,d0
    447e:	|        /-------- beq.s 44f6 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    4480:	|        |         movea.l 190c6 <loadNow>,a0
    4486:	|        |         move.b (a0),d0
    4488:	|        |         cmpi.b #58,d0
    448c:	|        |  /----- bne.s 44c0 <runSludge+0xd8>
			saveGame (loadNow + 1);
    448e:	|        |  |      move.l 190c6 <loadNow>,d0
    4494:	|        |  |      addq.l #1,d0
    4496:	|        |  |      move.l d0,-(sp)
    4498:	|        |  |      jsr 9fb2 <saveGame>
    449e:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    44a0:	|        |  |      movea.l 19218 <saverFunc>,a0
    44a6:	|        |  |      lea 28(a0),a0
    44aa:	|        |  |      pea 1 <_start+0x1>
    44ae:	|        |  |      pea 1 <_start+0x1>
    44b2:	|        |  |      move.l a0,-(sp)
    44b4:	|        |  |      jsr 12662 <setVariable>
    44ba:	|        |  |      lea 12(sp),sp
    44be:	|        |  |  /-- bra.s 44d8 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    44c0:	|        |  \--|-> move.l 190c6 <loadNow>,d0
    44c6:	|        |     |   move.l d0,-(sp)
    44c8:	|        |     |   jsr 9afa <loadGame>
    44ce:	|        |     |   addq.l #4,sp
    44d0:	|        |     |   tst.w d0
    44d2:	|        |     +-- bne.s 44d8 <runSludge+0xf0>
    44d4:	|        |     |   clr.w d0
    44d6:	+--------|-----|-- bra.s 44f8 <runSludge+0x110>
		}
		FreeVec(loadNow);
    44d8:	|        |     \-> move.l 190c6 <loadNow>,8(sp)
    44e0:	|        |         move.l 190fa <SysBase>,d0
    44e6:	|        |         movea.l d0,a6
    44e8:	|        |         movea.l 8(sp),a1
    44ec:	|        |         jsr -690(a6)
		loadNow = NULL;
    44f0:	|        |         clr.l 190c6 <loadNow>
	}

	return TRUE;
    44f6:	|        \-------> moveq #1,d0
}
    44f8:	\----------------> movea.l (sp)+,a6
    44fa:	                   lea 12(sp),sp
    44fe:	                   rts

00004500 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    4500:	movea.l 18a8c <currentEvents>,a0
    4506:	move.l (a0),d0
    4508:	move.l 4(sp),-(sp)
    450c:	move.l d0,-(sp)
    450e:	jsr 8d0 <put2bytes>
    4514:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    4516:	movea.l 18a8c <currentEvents>,a0
    451c:	move.l 4(a0),d0
    4520:	move.l 4(sp),-(sp)
    4524:	move.l d0,-(sp)
    4526:	jsr 8d0 <put2bytes>
    452c:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    452e:	movea.l 18a8c <currentEvents>,a0
    4534:	move.l 8(a0),d0
    4538:	move.l 4(sp),-(sp)
    453c:	move.l d0,-(sp)
    453e:	jsr 8d0 <put2bytes>
    4544:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    4546:	movea.l 18a8c <currentEvents>,a0
    454c:	move.l 12(a0),d0
    4550:	move.l 4(sp),-(sp)
    4554:	move.l d0,-(sp)
    4556:	jsr 8d0 <put2bytes>
    455c:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    455e:	movea.l 18a8c <currentEvents>,a0
    4564:	move.l 16(a0),d0
    4568:	move.l 4(sp),-(sp)
    456c:	move.l d0,-(sp)
    456e:	jsr 8d0 <put2bytes>
    4574:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    4576:	movea.l 18a8c <currentEvents>,a0
    457c:	move.l 20(a0),d0
    4580:	move.l 4(sp),-(sp)
    4584:	move.l d0,-(sp)
    4586:	jsr 8d0 <put2bytes>
    458c:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    458e:	movea.l 18a8c <currentEvents>,a0
    4594:	move.l 24(a0),d0
    4598:	move.l 4(sp),-(sp)
    459c:	move.l d0,-(sp)
    459e:	jsr 8d0 <put2bytes>
    45a4:	addq.l #8,sp
}
    45a6:	nop
    45a8:	rts

000045aa <sludgeDisplay>:

void sludgeDisplay () {	
	CstDrawBackdrop();
    45aa:	jsr 11da <CstDrawBackdrop>
	drawPeople();
    45b0:	jsr 7906 <drawPeople>
	CstSwapBuffer();
    45b6:	jsr 1884 <CstSwapBuffer>
}
    45bc:	nop
    45be:	rts

000045c0 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    45c0:	      /-- bra.s 45e0 <stackSetByIndex+0x20>
		vS = vS->next;
    45c2:	/-----|-> movea.l 4(sp),a0
    45c6:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    45cc:	|     +-- bne.s 45e0 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    45ce:	|     |   pea 153c1 <custom.c.64ca0e9f+0x6eb>
    45d4:	|     |   jsr 13db8 <KPrintF>
    45da:	|     |   addq.l #4,sp
			return FALSE;
    45dc:	|     |   clr.w d0
    45de:	|  /--|-- bra.s 4602 <stackSetByIndex+0x42>
	while (theIndex--) {
    45e0:	|  |  \-> move.l 8(sp),d0
    45e4:	|  |      move.l d0,d1
    45e6:	|  |      subq.l #1,d1
    45e8:	|  |      move.l d1,8(sp)
    45ec:	|  |      tst.l d0
    45ee:	\--|----- bne.s 45c2 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    45f0:	   |      move.l 4(sp),d0
    45f4:	   |      move.l d0,-(sp)
    45f6:	   |      move.l 16(sp),-(sp)
    45fa:	   |      jsr 1222a <copyVariable>
    4600:	   |      addq.l #8,sp
}
    4602:	   \----> rts

00004604 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    4604:	             lea -24(sp),sp
    4608:	             move.l a6,-(sp)
    460a:	             move.l 48(sp),d0
    460e:	             move.w d0,d0
    4610:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    4614:	             moveq #58,d0
    4616:	             move.l d0,24(sp)
    461a:	             clr.l 20(sp)
    461e:	             move.l 190fa <SysBase>,d0
    4624:	             movea.l d0,a6
    4626:	             move.l 24(sp),d0
    462a:	             move.l 20(sp),d1
    462e:	             jsr -684(a6)
    4632:	             move.l d0,16(sp)
    4636:	             move.l 16(sp),d0
    463a:	             move.l d0,12(sp)
	if(!newFunc) {
    463e:	         /-- bne.s 4654 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    4640:	         |   pea 153da <custom.c.64ca0e9f+0x704>
    4646:	         |   jsr 13db8 <KPrintF>
    464c:	         |   addq.l #4,sp
		return 0;
    464e:	         |   moveq #0,d0
    4650:	/--------|-- bra.w 476a <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    4654:	|        \-> move.l 32(sp),d0
    4658:	|            movea.l 12(sp),a0
    465c:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    465e:	|            move.l 12(sp),-(sp)
    4662:	|            jsr 3d8a <loadFunctionCode>
    4668:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    466a:	|            movea.l 12(sp),a0
    466e:	|            move.l 16(a0),d1
    4672:	|            move.l 36(sp),d0
    4676:	|            cmp.l d1,d0
    4678:	|        /-- beq.s 468e <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    467a:	|        |   pea 15403 <custom.c.64ca0e9f+0x72d>
    4680:	|        |   jsr 13db8 <KPrintF>
    4686:	|        |   addq.l #4,sp
		return NULL; 
    4688:	|        |   moveq #0,d0
    468a:	+--------|-- bra.w 476a <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    468e:	|        \-> movea.l 12(sp),a0
    4692:	|            move.l 16(a0),d1
    4696:	|            movea.l 12(sp),a0
    469a:	|            move.l 8(a0),d0
    469e:	|            cmp.l d1,d0
    46a0:	|  /-------- bge.s 470a <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    46a2:	|  |         pea 1541f <custom.c.64ca0e9f+0x749>
    46a8:	|  |         jsr 13db8 <KPrintF>
    46ae:	|  |         addq.l #4,sp
		return NULL; 
    46b0:	|  |         moveq #0,d0
    46b2:	+--|-------- bra.w 476a <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    46b6:	|  |  /----> movea.l 44(sp),a0
    46ba:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    46be:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    46c2:	|  |  |      movea.l 44(sp),a0
    46c6:	|  |  |      move.l (a0),d0
    46c8:	|  |  |  /-- bne.s 46de <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    46ca:	|  |  |  |   pea 15449 <custom.c.64ca0e9f+0x773>
    46d0:	|  |  |  |   jsr 13db8 <KPrintF>
    46d6:	|  |  |  |   addq.l #4,sp
			return NULL;
    46d8:	|  |  |  |   moveq #0,d0
    46da:	+--|--|--|-- bra.w 476a <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    46de:	|  |  |  \-> movea.l 12(sp),a0
    46e2:	|  |  |      move.l 20(a0),d1
    46e6:	|  |  |      move.l 36(sp),d0
    46ea:	|  |  |      lsl.l #3,d0
    46ec:	|  |  |      add.l d0,d1
    46ee:	|  |  |      move.l 8(sp),d0
    46f2:	|  |  |      move.l d1,-(sp)
    46f4:	|  |  |      move.l d0,-(sp)
    46f6:	|  |  |      jsr 1222a <copyVariable>
    46fc:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    46fe:	|  |  |      move.l 44(sp),-(sp)
    4702:	|  |  |      jsr 126f4 <trimStack>
    4708:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    470a:	|  \--|----> tst.l 36(sp)
    470e:	|     \----- bne.s 46b6 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    4710:	|            movea.l 12(sp),a0
    4714:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    4718:	|            movea.l 12(sp),a0
    471c:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    4720:	|            movea.l 12(sp),a0
    4724:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    472a:	|            movea.l 12(sp),a0
    472e:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    4734:	|            movea.l 12(sp),a0
    4738:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    473c:	|            movea.l 12(sp),a0
    4740:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    4744:	|            movea.l 12(sp),a0
    4748:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    474c:	|            movea.l 12(sp),a0
    4750:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    4754:	|            movea.l 12(sp),a0
    4758:	|            clr.l 28(a0)

	restartFunction (newFunc);
    475c:	|            move.l 12(sp),-(sp)
    4760:	|            jsr 43ce <restartFunction>
    4766:	|            addq.l #4,sp
	return 1;
    4768:	|            moveq #1,d0
}
    476a:	\----------> movea.l (sp)+,a6
    476c:	             lea 24(sp),sp
    4770:	             rts

00004772 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    4772:	clr.w 18a98 <sliceBusy>
}
    4778:	nop
    477a:	rts

0000477c <getNumberedString>:

char * getNumberedString (int value) {
    477c:	       lea -56(sp),sp
    4780:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    4784:	       move.w 18a98 <sliceBusy>,d0
    478a:	   /-- beq.s 47d4 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    478c:	   |   move.l 19102 <DOSBase>,d0
    4792:	   |   movea.l d0,a6
    4794:	   |   jsr -60(a6)
    4798:	   |   move.l d0,28(sp)
    479c:	   |   move.l 28(sp),d0
    47a0:	   |   move.l d0,24(sp)
    47a4:	   |   move.l #87188,20(sp)
    47ac:	   |   moveq #76,d0
    47ae:	   |   move.l d0,16(sp)
    47b2:	   |   move.l 19102 <DOSBase>,d0
    47b8:	   |   movea.l d0,a6
    47ba:	   |   move.l 24(sp),d1
    47be:	   |   move.l 20(sp),d2
    47c2:	   |   move.l 16(sp),d3
    47c6:	   |   jsr -48(a6)
    47ca:	   |   move.l d0,12(sp)
		return NULL;
    47ce:	   |   moveq #0,d0
    47d0:	/--|-- bra.w 4870 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    47d4:	|  \-> move.l 190e2 <bigDataFile>,64(sp)
    47dc:	|      move.l 72(sp),d0
    47e0:	|      add.l d0,d0
    47e2:	|      add.l d0,d0
    47e4:	|      move.l d0,d1
    47e6:	|      move.l 190ee <startOfTextIndex>,d0
    47ec:	|      add.l d1,d0
    47ee:	|      move.l d0,60(sp)
    47f2:	|      moveq #-1,d0
    47f4:	|      move.l d0,56(sp)
    47f8:	|      move.l 19102 <DOSBase>,d0
    47fe:	|      movea.l d0,a6
    4800:	|      move.l 64(sp),d1
    4804:	|      move.l 60(sp),d2
    4808:	|      move.l 56(sp),d3
    480c:	|      jsr -66(a6)
    4810:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    4814:	|      move.l 190e2 <bigDataFile>,d0
    481a:	|      move.l d0,-(sp)
    481c:	|      jsr 718 <get4bytes>
    4822:	|      addq.l #4,sp
    4824:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    4828:	|      move.l 190e2 <bigDataFile>,48(sp)
    4830:	|      move.l 72(sp),44(sp)
    4836:	|      moveq #-1,d0
    4838:	|      move.l d0,40(sp)
    483c:	|      move.l 19102 <DOSBase>,d0
    4842:	|      movea.l d0,a6
    4844:	|      move.l 48(sp),d1
    4848:	|      move.l 44(sp),d2
    484c:	|      move.l 40(sp),d3
    4850:	|      jsr -66(a6)
    4854:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    4858:	|      move.l 190e2 <bigDataFile>,d0
    485e:	|      move.l d0,-(sp)
    4860:	|      jsr b02 <readString>
    4866:	|      addq.l #4,sp
    4868:	|      move.l d0,32(sp)
	
	return s;
    486c:	|      move.l 32(sp),d0
}
    4870:	\----> movem.l (sp)+,d2-d3/a6
    4874:	       lea 56(sp),sp
    4878:	       rts

0000487a <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    487a:	       lea -32(sp),sp
    487e:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    4882:	       move.w 18a98 <sliceBusy>,d0
    4888:	   /-- beq.s 48a4 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    488a:	   |   pea 154e1 <custom.c.64ca0e9f+0x80b>
    4890:	   |   pea 154ff <custom.c.64ca0e9f+0x829>
    4896:	   |   jsr 13db8 <KPrintF>
    489c:	   |   addq.l #8,sp
		return 0;
    489e:	   |   moveq #0,d0
    48a0:	/--|-- bra.w 4938 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    48a4:	|  \-> move.l 190e2 <bigDataFile>,40(sp)
    48ac:	|      move.l 48(sp),d0
    48b0:	|      add.l d0,d0
    48b2:	|      add.l d0,d0
    48b4:	|      move.l d0,d1
    48b6:	|      move.l 190ea <startOfDataIndex>,d0
    48bc:	|      add.l d1,d0
    48be:	|      move.l d0,36(sp)
    48c2:	|      moveq #-1,d0
    48c4:	|      move.l d0,32(sp)
    48c8:	|      move.l 19102 <DOSBase>,d0
    48ce:	|      movea.l d0,a6
    48d0:	|      move.l 40(sp),d1
    48d4:	|      move.l 36(sp),d2
    48d8:	|      move.l 32(sp),d3
    48dc:	|      jsr -66(a6)
    48e0:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    48e4:	|      move.l 190e2 <bigDataFile>,24(sp)
    48ec:	|      move.l 190e2 <bigDataFile>,d0
    48f2:	|      move.l d0,-(sp)
    48f4:	|      jsr 718 <get4bytes>
    48fa:	|      addq.l #4,sp
    48fc:	|      move.l d0,20(sp)
    4900:	|      clr.l 16(sp)
    4904:	|      move.l 19102 <DOSBase>,d0
    490a:	|      movea.l d0,a6
    490c:	|      move.l 24(sp),d1
    4910:	|      move.l 20(sp),d2
    4914:	|      move.l 16(sp),d3
    4918:	|      jsr -66(a6)
    491c:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    4920:	|      move.w #1,18a98 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    4928:	|      move.l 190e2 <bigDataFile>,d0
    492e:	|      move.l d0,-(sp)
    4930:	|      jsr 718 <get4bytes>
    4936:	|      addq.l #4,sp
}
    4938:	\----> movem.l (sp)+,d2-d3/a6
    493c:	       lea 32(sp),sp
    4940:	       rts

00004942 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    4942:	       lea -32(sp),sp
    4946:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    494a:	       move.w 18a98 <sliceBusy>,d0
    4950:	   /-- beq.s 496c <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    4952:	   |   pea 154e1 <custom.c.64ca0e9f+0x80b>
    4958:	   |   pea 154ff <custom.c.64ca0e9f+0x829>
    495e:	   |   jsr 13db8 <KPrintF>
    4964:	   |   addq.l #8,sp
        return FALSE;
    4966:	   |   clr.w d0
    4968:	/--|-- bra.w 49f8 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    496c:	|  \-> move.l 190e2 <bigDataFile>,40(sp)
    4974:	|      move.l 48(sp),d0
    4978:	|      add.l d0,d0
    497a:	|      add.l d0,d0
    497c:	|      move.l d0,d1
    497e:	|      move.l 190f6 <startOfObjectIndex>,d0
    4984:	|      add.l d1,d0
    4986:	|      move.l d0,36(sp)
    498a:	|      moveq #-1,d0
    498c:	|      move.l d0,32(sp)
    4990:	|      move.l 19102 <DOSBase>,d0
    4996:	|      movea.l d0,a6
    4998:	|      move.l 40(sp),d1
    499c:	|      move.l 36(sp),d2
    49a0:	|      move.l 32(sp),d3
    49a4:	|      jsr -66(a6)
    49a8:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    49ac:	|      move.l 190e2 <bigDataFile>,24(sp)
    49b4:	|      move.l 190e2 <bigDataFile>,d0
    49ba:	|      move.l d0,-(sp)
    49bc:	|      jsr 718 <get4bytes>
    49c2:	|      addq.l #4,sp
    49c4:	|      move.l d0,20(sp)
    49c8:	|      moveq #-1,d0
    49ca:	|      move.l d0,16(sp)
    49ce:	|      move.l 19102 <DOSBase>,d0
    49d4:	|      movea.l d0,a6
    49d6:	|      move.l 24(sp),d1
    49da:	|      move.l 20(sp),d2
    49de:	|      move.l 16(sp),d3
    49e2:	|      jsr -66(a6)
    49e6:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    49ea:	|      move.w #1,18a98 <sliceBusy>
    49f2:	|      move.w 18a98 <sliceBusy>,d0
}
    49f8:	\----> movem.l (sp)+,d2-d3/a6
    49fc:	       lea 32(sp),sp
    4a00:	       rts

00004a02 <openSubSlice>:

BOOL openSubSlice (int num) {
    4a02:	       lea -32(sp),sp
    4a06:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    4a0a:	       move.w 18a98 <sliceBusy>,d0
    4a10:	   /-- beq.s 4a2c <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    4a12:	   |   pea 154e1 <custom.c.64ca0e9f+0x80b>
    4a18:	   |   pea 154ff <custom.c.64ca0e9f+0x829>
    4a1e:	   |   jsr 13db8 <KPrintF>
    4a24:	   |   addq.l #8,sp
		return FALSE;
    4a26:	   |   clr.w d0
    4a28:	/--|-- bra.w 4ab8 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    4a2c:	|  \-> move.l 190e2 <bigDataFile>,40(sp)
    4a34:	|      move.l 48(sp),d0
    4a38:	|      add.l d0,d0
    4a3a:	|      add.l d0,d0
    4a3c:	|      move.l d0,d1
    4a3e:	|      move.l 190f2 <startOfSubIndex>,d0
    4a44:	|      add.l d1,d0
    4a46:	|      move.l d0,36(sp)
    4a4a:	|      moveq #-1,d0
    4a4c:	|      move.l d0,32(sp)
    4a50:	|      move.l 19102 <DOSBase>,d0
    4a56:	|      movea.l d0,a6
    4a58:	|      move.l 40(sp),d1
    4a5c:	|      move.l 36(sp),d2
    4a60:	|      move.l 32(sp),d3
    4a64:	|      jsr -66(a6)
    4a68:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    4a6c:	|      move.l 190e2 <bigDataFile>,24(sp)
    4a74:	|      move.l 190e2 <bigDataFile>,d0
    4a7a:	|      move.l d0,-(sp)
    4a7c:	|      jsr 718 <get4bytes>
    4a82:	|      addq.l #4,sp
    4a84:	|      move.l d0,20(sp)
    4a88:	|      moveq #-1,d0
    4a8a:	|      move.l d0,16(sp)
    4a8e:	|      move.l 19102 <DOSBase>,d0
    4a94:	|      movea.l d0,a6
    4a96:	|      move.l 24(sp),d1
    4a9a:	|      move.l 20(sp),d2
    4a9e:	|      move.l 16(sp),d3
    4aa2:	|      jsr -66(a6)
    4aa6:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    4aaa:	|      move.w #1,18a98 <sliceBusy>
    4ab2:	|      move.w 18a98 <sliceBusy>,d0
}
    4ab8:	\----> movem.l (sp)+,d2-d3/a6
    4abc:	       lea 32(sp),sp
    4ac0:	       rts

00004ac2 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    4ac2:	       lea -180(sp),sp
    4ac6:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    4aca:	       tst.l 196(sp)
    4ace:	/----- beq.s 4b0e <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    4ad0:	|      move.l 196(sp),190e2 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    4ad8:	|      move.l 196(sp),168(sp)
    4ade:	|      clr.l 164(sp)
    4ae2:	|      clr.l 160(sp)
    4ae6:	|      move.l 19102 <DOSBase>,d0
    4aec:	|      movea.l d0,a6
    4aee:	|      move.l 168(sp),d1
    4af2:	|      move.l 164(sp),d2
    4af6:	|      move.l 160(sp),d3
    4afa:	|      jsr -66(a6)
    4afe:	|      move.l d0,156(sp)
    4b02:	|      move.l 156(sp),d0
    4b06:	|      move.l d0,190e6 <startIndex>
    4b0c:	|  /-- bra.s 4b48 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    4b0e:	\--|-> move.l 190e2 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    4b16:	   |   move.l 196(sp),184(sp)
    4b1c:	   |   move.l 190e6 <startIndex>,d0
    4b22:	   |   move.l d0,180(sp)
    4b26:	   |   moveq #-1,d0
    4b28:	   |   move.l d0,176(sp)
    4b2c:	   |   move.l 19102 <DOSBase>,d0
    4b32:	   |   movea.l d0,a6
    4b34:	   |   move.l 184(sp),d1
    4b38:	   |   move.l 180(sp),d2
    4b3c:	   |   move.l 176(sp),d3
    4b40:	   |   jsr -66(a6)
    4b44:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    4b48:	   \-> clr.w 18a98 <sliceBusy>

	if (skipBefore > numLanguages) {
    4b4e:	       move.l 204(sp),d0
    4b52:	       cmp.l 200(sp),d0
    4b56:	   /-- bls.s 4b6a <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    4b58:	   |   pea 15519 <custom.c.64ca0e9f+0x843>
    4b5e:	   |   jsr 13db8 <KPrintF>
    4b64:	   |   addq.l #4,sp
		skipBefore = 0;
    4b66:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    4b6a:	   \-> move.l 200(sp),d0
    4b6e:	       sub.l 204(sp),d0
    4b72:	       move.l d0,188(sp)
	while (skipBefore) {
    4b76:	   /-- bra.s 4bb4 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    4b78:	/--|-> move.l 196(sp),24(sp)
    4b7e:	|  |   move.l 196(sp),-(sp)
    4b82:	|  |   jsr 718 <get4bytes>
    4b88:	|  |   addq.l #4,sp
    4b8a:	|  |   move.l d0,20(sp)
    4b8e:	|  |   moveq #-1,d0
    4b90:	|  |   move.l d0,16(sp)
    4b94:	|  |   move.l 19102 <DOSBase>,d0
    4b9a:	|  |   movea.l d0,a6
    4b9c:	|  |   move.l 24(sp),d1
    4ba0:	|  |   move.l 20(sp),d2
    4ba4:	|  |   move.l 16(sp),d3
    4ba8:	|  |   jsr -66(a6)
    4bac:	|  |   move.l d0,12(sp)
		skipBefore --;
    4bb0:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    4bb4:	|  \-> tst.l 204(sp)
    4bb8:	\----- bne.s 4b78 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4bba:	       move.l 196(sp),152(sp)
    4bc0:	       clr.l 148(sp)
    4bc4:	       clr.l 144(sp)
    4bc8:	       move.l 19102 <DOSBase>,d0
    4bce:	       movea.l d0,a6
    4bd0:	       move.l 152(sp),d1
    4bd4:	       move.l 148(sp),d2
    4bd8:	       move.l 144(sp),d3
    4bdc:	       jsr -66(a6)
    4be0:	       move.l d0,140(sp)
    4be4:	       move.l 140(sp),d0
    4be8:	       addq.l #4,d0
    4bea:	       move.l d0,190ee <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    4bf0:	       move.l 196(sp),136(sp)
    4bf6:	       move.l 196(sp),-(sp)
    4bfa:	       jsr 718 <get4bytes>
    4c00:	       addq.l #4,sp
    4c02:	       move.l d0,132(sp)
    4c06:	       moveq #-1,d0
    4c08:	       move.l d0,128(sp)
    4c0c:	       move.l 19102 <DOSBase>,d0
    4c12:	       movea.l d0,a6
    4c14:	       move.l 136(sp),d1
    4c18:	       move.l 132(sp),d2
    4c1c:	       move.l 128(sp),d3
    4c20:	       jsr -66(a6)
    4c24:	       move.l d0,124(sp)

	while (skipAfter) {
    4c28:	   /-- bra.s 4c66 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    4c2a:	/--|-> move.l 196(sp),40(sp)
    4c30:	|  |   move.l 196(sp),-(sp)
    4c34:	|  |   jsr 718 <get4bytes>
    4c3a:	|  |   addq.l #4,sp
    4c3c:	|  |   move.l d0,36(sp)
    4c40:	|  |   moveq #-1,d0
    4c42:	|  |   move.l d0,32(sp)
    4c46:	|  |   move.l 19102 <DOSBase>,d0
    4c4c:	|  |   movea.l d0,a6
    4c4e:	|  |   move.l 40(sp),d1
    4c52:	|  |   move.l 36(sp),d2
    4c56:	|  |   move.l 32(sp),d3
    4c5a:	|  |   jsr -66(a6)
    4c5e:	|  |   move.l d0,28(sp)
		skipAfter --;
    4c62:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    4c66:	|  \-> tst.l 188(sp)
    4c6a:	\----- bne.s 4c2a <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4c6c:	       move.l 196(sp),120(sp)
    4c72:	       clr.l 116(sp)
    4c76:	       clr.l 112(sp)
    4c7a:	       move.l 19102 <DOSBase>,d0
    4c80:	       movea.l d0,a6
    4c82:	       move.l 120(sp),d1
    4c86:	       move.l 116(sp),d2
    4c8a:	       move.l 112(sp),d3
    4c8e:	       jsr -66(a6)
    4c92:	       move.l d0,108(sp)
    4c96:	       move.l 108(sp),d0
    4c9a:	       addq.l #4,d0
    4c9c:	       move.l d0,190f2 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    4ca2:	       move.l 196(sp),104(sp)
    4ca8:	       move.l 196(sp),-(sp)
    4cac:	       jsr 718 <get4bytes>
    4cb2:	       addq.l #4,sp
    4cb4:	       move.l d0,100(sp)
    4cb8:	       clr.l 96(sp)
    4cbc:	       move.l 19102 <DOSBase>,d0
    4cc2:	       movea.l d0,a6
    4cc4:	       move.l 104(sp),d1
    4cc8:	       move.l 100(sp),d2
    4ccc:	       move.l 96(sp),d3
    4cd0:	       jsr -66(a6)
    4cd4:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4cd8:	       move.l 196(sp),88(sp)
    4cde:	       clr.l 84(sp)
    4ce2:	       clr.l 80(sp)
    4ce6:	       move.l 19102 <DOSBase>,d0
    4cec:	       movea.l d0,a6
    4cee:	       move.l 88(sp),d1
    4cf2:	       move.l 84(sp),d2
    4cf6:	       move.l 80(sp),d3
    4cfa:	       jsr -66(a6)
    4cfe:	       move.l d0,76(sp)
    4d02:	       move.l 76(sp),d0
    4d06:	       addq.l #4,d0
    4d08:	       move.l d0,190f6 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    4d0e:	       move.l 196(sp),72(sp)
    4d14:	       move.l 196(sp),-(sp)
    4d18:	       jsr 718 <get4bytes>
    4d1e:	       addq.l #4,sp
    4d20:	       move.l d0,68(sp)
    4d24:	       clr.l 64(sp)
    4d28:	       move.l 19102 <DOSBase>,d0
    4d2e:	       movea.l d0,a6
    4d30:	       move.l 72(sp),d1
    4d34:	       move.l 68(sp),d2
    4d38:	       move.l 64(sp),d3
    4d3c:	       jsr -66(a6)
    4d40:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    4d44:	       move.l 196(sp),56(sp)
    4d4a:	       clr.l 52(sp)
    4d4e:	       clr.l 48(sp)
    4d52:	       move.l 19102 <DOSBase>,d0
    4d58:	       movea.l d0,a6
    4d5a:	       move.l 56(sp),d1
    4d5e:	       move.l 52(sp),d2
    4d62:	       move.l 48(sp),d3
    4d66:	       jsr -66(a6)
    4d6a:	       move.l d0,44(sp)
    4d6e:	       move.l 44(sp),d0
    4d72:	       move.l d0,190ea <startOfDataIndex>
    4d78:	       nop
    4d7a:	       movem.l (sp)+,d2-d3/a6
    4d7e:	       lea 180(sp),sp
    4d82:	       rts

00004d84 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    4d84:	    lea -20(sp),sp
    4d88:	    move.l a6,-(sp)
    4d8a:	    move.l d7,-(sp)
	APTR vbr = 0;
    4d8c:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    4d90:	    move.w #20090,10(sp)
    4d96:	    move.w #2049,12(sp)
    4d9c:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    4da2:	    movea.l 190fa <SysBase>,a0
    4da8:	    move.w 296(a0),d0
    4dac:	    move.w d0,d0
    4dae:	    andi.l #65535,d0
    4db4:	    moveq #1,d1
    4db6:	    and.l d1,d0
    4db8:	/-- beq.s 4de6 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    4dba:	|   lea 28(sp),a0
    4dbe:	|   lea -18(a0),a0
    4dc2:	|   move.l a0,20(sp)
    4dc6:	|   move.l 190fa <SysBase>,d0
    4dcc:	|   movea.l d0,a6
    4dce:	|   move.l 20(sp),d7
    4dd2:	|   exg d7,a5
    4dd4:	|   jsr -30(a6)
    4dd8:	|   exg d7,a5
    4dda:	|   move.l d0,16(sp)
    4dde:	|   move.l 16(sp),d0
    4de2:	|   move.l d0,24(sp)

	return vbr;
    4de6:	\-> move.l 24(sp),d0
}
    4dea:	    move.l (sp)+,d7
    4dec:	    movea.l (sp)+,a6
    4dee:	    lea 20(sp),sp
    4df2:	    rts

00004df4 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    4df4:	movea.l 19120 <VBR>,a0
    4dfa:	lea 108(a0),a0
    4dfe:	move.l 4(sp),(a0)
}
    4e02:	nop
    4e04:	rts

00004e06 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    4e06:	movea.l 19120 <VBR>,a0
    4e0c:	move.l 108(a0),d0
}
    4e10:	rts

00004e12 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    4e12:	       subq.l #8,sp
    4e14:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    4e16:	       pea 15562 <custom.c.64ca0e9f+0x88c>
    4e1c:	       jsr 13db8 <KPrintF>
    4e22:	       addq.l #4,sp
	Forbid();
    4e24:	       move.l 190fa <SysBase>,d0
    4e2a:	       movea.l d0,a6
    4e2c:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    4e30:	       pea 1557a <custom.c.64ca0e9f+0x8a4>
    4e36:	       jsr 13db8 <KPrintF>
    4e3c:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    4e3e:	       movea.l 190fe <custom>,a0
    4e44:	       move.w 16(a0),d0
    4e48:	       move.w d0,1911e <SystemADKCON>
	SystemInts=custom->intenar;
    4e4e:	       movea.l 190fe <custom>,a0
    4e54:	       move.w 28(a0),d0
    4e58:	       move.w d0,1911a <SystemInts>
	SystemDMA=custom->dmaconr;
    4e5e:	       movea.l 190fe <custom>,a0
    4e64:	       move.w 2(a0),d0
    4e68:	       move.w d0,1911c <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    4e6e:	       movea.l 19106 <GfxBase>,a0
    4e74:	       move.l 34(a0),d0
    4e78:	       move.l d0,19128 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    4e7e:	       pea 15598 <custom.c.64ca0e9f+0x8c2>
    4e84:	       jsr 13db8 <KPrintF>
    4e8a:	       addq.l #4,sp
	LoadView(0);
    4e8c:	       clr.l 4(sp)
    4e90:	       move.l 19106 <GfxBase>,d0
    4e96:	       movea.l d0,a6
    4e98:	       movea.l 4(sp),a1
    4e9c:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    4ea0:	       pea 155ae <custom.c.64ca0e9f+0x8d8>
    4ea6:	       jsr 13db8 <KPrintF>
    4eac:	       addq.l #4,sp
	WaitTOF();
    4eae:	       move.l 19106 <GfxBase>,d0
    4eb4:	       movea.l d0,a6
    4eb6:	       jsr -270(a6)
	WaitTOF();
    4eba:	       move.l 19106 <GfxBase>,d0
    4ec0:	       movea.l d0,a6
    4ec2:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    4ec6:	       pea 155c3 <custom.c.64ca0e9f+0x8ed>
    4ecc:	       jsr 13db8 <KPrintF>
    4ed2:	       addq.l #4,sp
	WaitVbl();
    4ed4:	       jsr 13cec <WaitVbl>
	WaitVbl();
    4eda:	       jsr 13cec <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    4ee0:	       pea 155d8 <custom.c.64ca0e9f+0x902>
    4ee6:	       jsr 13db8 <KPrintF>
    4eec:	       addq.l #4,sp
	OwnBlitter();
    4eee:	       move.l 19106 <GfxBase>,d0
    4ef4:	       movea.l d0,a6
    4ef6:	       jsr -456(a6)
	WaitBlit();	
    4efa:	       move.l 19106 <GfxBase>,d0
    4f00:	       movea.l d0,a6
    4f02:	       jsr -228(a6)
	Disable();
    4f06:	       move.l 190fa <SysBase>,d0
    4f0c:	       movea.l d0,a6
    4f0e:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    4f12:	       pea 155f9 <custom.c.64ca0e9f+0x923>
    4f18:	       jsr 13db8 <KPrintF>
    4f1e:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    4f20:	       movea.l 190fe <custom>,a0
    4f26:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    4f2c:	       pea 15610 <custom.c.64ca0e9f+0x93a>
    4f32:	       jsr 13db8 <KPrintF>
    4f38:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    4f3a:	       clr.l 8(sp)
    4f3e:	   /-- bra.s 4f5c <TakeSystem+0x14a>
		custom->color[a]=0;
    4f40:	/--|-> movea.l 190fe <custom>,a0
    4f46:	|  |   move.l 8(sp),d0
    4f4a:	|  |   addi.l #192,d0
    4f50:	|  |   add.l d0,d0
    4f52:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    4f58:	|  |   addq.l #1,8(sp)
    4f5c:	|  \-> moveq #31,d0
    4f5e:	|      cmp.l 8(sp),d0
    4f62:	\----- bge.s 4f40 <TakeSystem+0x12e>

	WaitVbl();
    4f64:	       jsr 13cec <WaitVbl>
	WaitVbl();
    4f6a:	       jsr 13cec <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    4f70:	       pea 15635 <custom.c.64ca0e9f+0x95f>
    4f76:	       jsr 13db8 <KPrintF>
    4f7c:	       addq.l #4,sp
	VBR=GetVBR();
    4f7e:	       jsr 4d84 <GetVBR>
    4f84:	       move.l d0,19120 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    4f8a:	       jsr 4e06 <GetInterruptHandler>
    4f90:	       move.l d0,19124 <SystemIrq>
}
    4f96:	       nop
    4f98:	       movea.l (sp)+,a6
    4f9a:	       addq.l #8,sp
    4f9c:	       rts

00004f9e <FreeSystem>:

void FreeSystem() { 
    4f9e:	subq.l #4,sp
    4fa0:	move.l a6,-(sp)
	WaitVbl();
    4fa2:	jsr 13cec <WaitVbl>
	WaitBlit();
    4fa8:	move.l 19106 <GfxBase>,d0
    4fae:	movea.l d0,a6
    4fb0:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    4fb4:	movea.l 190fe <custom>,a0
    4fba:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    4fc0:	movea.l 190fe <custom>,a0
    4fc6:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    4fcc:	movea.l 190fe <custom>,a0
    4fd2:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    4fd8:	move.l 19124 <SystemIrq>,d0
    4fde:	move.l d0,-(sp)
    4fe0:	jsr 4df4 <SetInterruptHandler>
    4fe6:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    4fe8:	movea.l 19106 <GfxBase>,a0
    4fee:	move.l 38(a0),d0
    4ff2:	movea.l 190fe <custom>,a0
    4ff8:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    4ffc:	movea.l 19106 <GfxBase>,a0
    5002:	move.l 50(a0),d0
    5006:	movea.l 190fe <custom>,a0
    500c:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    5010:	movea.l 190fe <custom>,a0
    5016:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    501c:	move.w 1911c <SystemDMA>,d0
    5022:	movea.l 190fe <custom>,a0
    5028:	ori.w #-32768,d0
    502c:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    5030:	move.w 1911e <SystemADKCON>,d0
    5036:	movea.l 190fe <custom>,a0
    503c:	ori.w #-32768,d0
    5040:	move.w d0,158(a0)

	WaitBlit();	
    5044:	move.l 19106 <GfxBase>,d0
    504a:	movea.l d0,a6
    504c:	jsr -228(a6)
	DisownBlitter();
    5050:	move.l 19106 <GfxBase>,d0
    5056:	movea.l d0,a6
    5058:	jsr -462(a6)
	Enable();
    505c:	move.l 190fa <SysBase>,d0
    5062:	movea.l d0,a6
    5064:	jsr -126(a6)

	LoadView(ActiView);
    5068:	move.l 19128 <ActiView>,4(sp)
    5070:	move.l 19106 <GfxBase>,d0
    5076:	movea.l d0,a6
    5078:	movea.l 4(sp),a1
    507c:	jsr -222(a6)
	WaitTOF();
    5080:	move.l 19106 <GfxBase>,d0
    5086:	movea.l d0,a6
    5088:	jsr -270(a6)
	WaitTOF();
    508c:	move.l 19106 <GfxBase>,d0
    5092:	movea.l d0,a6
    5094:	jsr -270(a6)

	Permit();
    5098:	move.l 190fa <SysBase>,d0
    509e:	movea.l d0,a6
    50a0:	jsr -138(a6)
}
    50a4:	nop
    50a6:	movea.l (sp)+,a6
    50a8:	addq.l #4,sp
    50aa:	rts

000050ac <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    50ac:	    lea -128(sp),sp
    50b0:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    50b4:	    movea.w #4,a0
    50b8:	    move.l (a0),d0
    50ba:	    move.l d0,190fa <SysBase>
	custom = (struct Custom*)0xdff000;	
    50c0:	    move.l #14675968,190fe <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    50ca:	    move.l #87641,136(sp)
    50d2:	    clr.l 132(sp)
    50d6:	    move.l 190fa <SysBase>,d0
    50dc:	    movea.l d0,a6
    50de:	    movea.l 136(sp),a1
    50e2:	    move.l 132(sp),d0
    50e6:	    jsr -552(a6)
    50ea:	    move.l d0,128(sp)
    50ee:	    move.l 128(sp),d0
    50f2:	    move.l d0,19106 <GfxBase>
	if (!GfxBase)
    50f8:	    move.l 19106 <GfxBase>,d0
    50fe:	/-- bne.s 5114 <main+0x68>
		Exit(0);
    5100:	|   clr.l 124(sp)
    5104:	|   move.l 19102 <DOSBase>,d0
    510a:	|   movea.l d0,a6
    510c:	|   move.l 124(sp),d1
    5110:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    5114:	\-> move.l #87658,120(sp)
    511c:	    clr.l 116(sp)
    5120:	    move.l 190fa <SysBase>,d0
    5126:	    movea.l d0,a6
    5128:	    movea.l 120(sp),a1
    512c:	    move.l 116(sp),d0
    5130:	    jsr -552(a6)
    5134:	    move.l d0,112(sp)
    5138:	    move.l 112(sp),d0
    513c:	    move.l d0,19102 <DOSBase>
	if (!DOSBase)
    5142:	    move.l 19102 <DOSBase>,d0
    5148:	/-- bne.s 515e <main+0xb2>
		Exit(0);
    514a:	|   clr.l 108(sp)
    514e:	|   move.l 19102 <DOSBase>,d0
    5154:	|   movea.l d0,a6
    5156:	|   move.l 108(sp),d1
    515a:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    515e:	\-> move.l #87670,104(sp)
    5166:	    clr.l 100(sp)
    516a:	    move.l 190fa <SysBase>,d0
    5170:	    movea.l d0,a6
    5172:	    movea.l 104(sp),a1
    5176:	    move.l 100(sp),d0
    517a:	    jsr -552(a6)
    517e:	    move.l d0,96(sp)
    5182:	    move.l 96(sp),d0
    5186:	    move.l d0,1910a <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    518c:	    move.l 1910a <MathIeeeSingBasBase>,d0
    5192:	/-- bne.s 51a8 <main+0xfc>
		Exit(0);	
    5194:	|   clr.l 92(sp)
    5198:	|   move.l 19102 <DOSBase>,d0
    519e:	|   movea.l d0,a6
    51a0:	|   move.l 92(sp),d1
    51a4:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    51a8:	\-> move.l #87694,88(sp)
    51b0:	    clr.l 84(sp)
    51b4:	    move.l 190fa <SysBase>,d0
    51ba:	    movea.l d0,a6
    51bc:	    movea.l 88(sp),a1
    51c0:	    move.l 84(sp),d0
    51c4:	    jsr -552(a6)
    51c8:	    move.l d0,80(sp)
    51cc:	    move.l 80(sp),d0
    51d0:	    move.l d0,1910e <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    51d6:	    move.l 1910e <MathIeeeSingTransBase>,d0
    51dc:	/-- bne.s 51f2 <main+0x146>
		Exit(0);
    51de:	|   clr.l 76(sp)
    51e2:	|   move.l 19102 <DOSBase>,d0
    51e8:	|   movea.l d0,a6
    51ea:	|   move.l 76(sp),d1
    51ee:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    51f2:	\-> move.l #87720,72(sp)
    51fa:	    clr.l 68(sp)
    51fe:	    move.l 190fa <SysBase>,d0
    5204:	    movea.l d0,a6
    5206:	    movea.l 72(sp),a1
    520a:	    move.l 68(sp),d0
    520e:	    jsr -552(a6)
    5212:	    move.l d0,64(sp)
    5216:	    move.l 64(sp),d0
    521a:	    move.l d0,19116 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    5220:	    move.l 19116 <MathIeeeDoubTransBase>,d0
    5226:	/-- bne.s 523c <main+0x190>
		Exit(0);
    5228:	|   clr.l 60(sp)
    522c:	|   move.l 19102 <DOSBase>,d0
    5232:	|   movea.l d0,a6
    5234:	|   move.l 60(sp),d1
    5238:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    523c:	\-> move.l #87746,56(sp)
    5244:	    clr.l 52(sp)
    5248:	    move.l 190fa <SysBase>,d0
    524e:	    movea.l d0,a6
    5250:	    movea.l 56(sp),a1
    5254:	    move.l 52(sp),d0
    5258:	    jsr -552(a6)
    525c:	    move.l d0,48(sp)
    5260:	    move.l 48(sp),d0
    5264:	    move.l d0,19112 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    526a:	    move.l 19112 <MathIeeeDoubBasBase>,d0
    5270:	/-- bne.s 5286 <main+0x1da>
		Exit(0);
    5272:	|   clr.l 44(sp)
    5276:	|   move.l 19102 <DOSBase>,d0
    527c:	|   movea.l d0,a6
    527e:	|   move.l 44(sp),d1
    5282:	|   jsr -144(a6)
	

	KPrintF("Hello debugger from Amiga!\n");
    5286:	\-> pea 156da <custom.c.64ca0e9f+0xa04>
    528c:	    jsr 13db8 <KPrintF>
    5292:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    5294:	    move.l 19102 <DOSBase>,d0
    529a:	    movea.l d0,a6
    529c:	    jsr -60(a6)
    52a0:	    move.l d0,40(sp)
    52a4:	    move.l 40(sp),d0
    52a8:	    move.l d0,36(sp)
    52ac:	    move.l #87798,32(sp)
    52b4:	    moveq #15,d0
    52b6:	    move.l d0,28(sp)
    52ba:	    move.l 19102 <DOSBase>,d0
    52c0:	    movea.l d0,a6
    52c2:	    move.l 36(sp),d1
    52c6:	    move.l 32(sp),d2
    52ca:	    move.l 28(sp),d3
    52ce:	    jsr -48(a6)
    52d2:	    move.l d0,24(sp)
	Delay(50);
    52d6:	    moveq #50,d0
    52d8:	    move.l d0,20(sp)
    52dc:	    move.l 19102 <DOSBase>,d0
    52e2:	    movea.l d0,a6
    52e4:	    move.l 20(sp),d1
    52e8:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    52ec:	    pea 15706 <custom.c.64ca0e9f+0xa30>
    52f2:	    jsr 13db8 <KPrintF>
    52f8:	    addq.l #4,sp
	TakeSystem();
    52fa:	    jsr 4e12 <TakeSystem>
	KPrintF("System Taken\n");
    5300:	    pea 15715 <custom.c.64ca0e9f+0xa3f>
    5306:	    jsr 13db8 <KPrintF>
    530c:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    530e:	    movea.l 190fe <custom>,a0
    5314:	    move.w #-30721,150(a0)
	WaitVbl();
    531a:	    jsr 13cec <WaitVbl>

	KPrintF("Starting main_sludge\n");
    5320:	    pea 15723 <custom.c.64ca0e9f+0xa4d>
    5326:	    jsr 13db8 <KPrintF>
    532c:	    addq.l #4,sp
	main_sludge(argc, argv);	
    532e:	    move.l 148(sp),-(sp)
    5332:	    move.l 148(sp),-(sp)
    5336:	    jsr 1f1a <main_sludge>
    533c:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    533e:	    jsr 4f9e <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    5344:	    move.l 19102 <DOSBase>,16(sp)
    534c:	    move.l 190fa <SysBase>,d0
    5352:	    movea.l d0,a6
    5354:	    movea.l 16(sp),a1
    5358:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    535c:	    move.l 19106 <GfxBase>,12(sp)
    5364:	    move.l 190fa <SysBase>,d0
    536a:	    movea.l d0,a6
    536c:	    movea.l 12(sp),a1
    5370:	    jsr -414(a6)
    5374:	    moveq #0,d0
}
    5376:	    movem.l (sp)+,d2-d3/a6
    537a:	    lea 128(sp),sp
    537e:	    rts

00005380 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    5380:	    lea -16(sp),sp
    5384:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    5386:	    moveq #8,d0
    5388:	    move.l d0,16(sp)
    538c:	    clr.l 12(sp)
    5390:	    move.l 190fa <SysBase>,d0
    5396:	    movea.l d0,a6
    5398:	    move.l 16(sp),d0
    539c:	    move.l 12(sp),d1
    53a0:	    jsr -684(a6)
    53a4:	    move.l d0,8(sp)
    53a8:	    move.l 8(sp),d0
    53ac:	    move.l d0,4(sp)
	if (!newStat) {
    53b0:	/-- bne.s 53e0 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    53b2:	|   movea.l 18a9a <nowStatus>,a0
    53b8:	|   move.l (a0),d0
    53ba:	|   movea.l 4(sp),a0
    53be:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    53c2:	|   pea 15186 <custom.c.64ca0e9f+0x4b0>
    53c8:	|   jsr b8 <copyString>
    53ce:	|   addq.l #4,sp
    53d0:	|   movea.l 4(sp),a0
    53d4:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    53d6:	|   movea.l 18a9a <nowStatus>,a0
    53dc:	|   move.l 4(sp),(a0)
	}
}
    53e0:	\-> nop
    53e2:	    movea.l (sp)+,a6
    53e4:	    lea 16(sp),sp
    53e8:	    rts

000053ea <clearStatusBar>:

void clearStatusBar () {
    53ea:	       lea -16(sp),sp
    53ee:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    53f0:	       movea.l 18a9a <nowStatus>,a0
    53f6:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    53fa:	       movea.l 18a9a <nowStatus>,a0
    5400:	       moveq #-1,d0
    5402:	       move.l d0,6(a0)
	while (stat) {
    5406:	   /-- bra.s 5446 <clearStatusBar+0x5c>
		kill = stat;
    5408:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    540e:	|  |   movea.l 16(sp),a0
    5412:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    5418:	|  |   movea.l 12(sp),a0
    541c:	|  |   move.l (a0),8(sp)
    5420:	|  |   move.l 190fa <SysBase>,d0
    5426:	|  |   movea.l d0,a6
    5428:	|  |   movea.l 8(sp),a1
    542c:	|  |   jsr -690(a6)
		FreeVec(kill);
    5430:	|  |   move.l 12(sp),4(sp)
    5436:	|  |   move.l 190fa <SysBase>,d0
    543c:	|  |   movea.l d0,a6
    543e:	|  |   movea.l 4(sp),a1
    5442:	|  |   jsr -690(a6)
	while (stat) {
    5446:	|  \-> tst.l 16(sp)
    544a:	\----- bne.s 5408 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    544c:	       movea.l 18a9a <nowStatus>,a0
    5452:	       clr.l (a0)
}
    5454:	       nop
    5456:	       movea.l (sp)+,a6
    5458:	       lea 16(sp),sp
    545c:	       rts

0000545e <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    545e:	clr.l 1912c <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    5464:	move.w #-1,19130 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    546c:	moveq #-1,d0
    546e:	move.l d0,19132 <mainStatus+0x6>
	mainStatus.statusX = 10;
    5474:	moveq #10,d0
    5476:	move.l d0,19136 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    547c:	movea.l 19052 <winHeight>,a0
    5482:	lea -15(a0),a0
    5486:	move.l a0,d0
    5488:	move.l d0,1913a <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    548e:	nop
    5490:	rts

00005492 <killLastStatus>:

void killLastStatus () {
    5492:	    lea -12(sp),sp
    5496:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    5498:	    movea.l 18a9a <nowStatus>,a0
    549e:	    move.l (a0),d0
    54a0:	/-- beq.s 54ea <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    54a2:	|   movea.l 18a9a <nowStatus>,a0
    54a8:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    54ac:	|   movea.l 18a9a <nowStatus>,a0
    54b2:	|   movea.l 12(sp),a1
    54b6:	|   move.l 4(a1),d0
    54ba:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    54bc:	|   movea.l 12(sp),a0
    54c0:	|   move.l (a0),8(sp)
    54c4:	|   move.l 190fa <SysBase>,d0
    54ca:	|   movea.l d0,a6
    54cc:	|   movea.l 8(sp),a1
    54d0:	|   jsr -690(a6)
		FreeVec(kill);
    54d4:	|   move.l 12(sp),4(sp)
    54da:	|   move.l 190fa <SysBase>,d0
    54e0:	|   movea.l d0,a6
    54e2:	|   movea.l 4(sp),a1
    54e6:	|   jsr -690(a6)
	}
}
    54ea:	\-> nop
    54ec:	    movea.l (sp)+,a6
    54ee:	    lea 12(sp),sp
    54f2:	    rts

000054f4 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    54f4:	movea.l 18a9a <nowStatus>,a0
    54fa:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    5500:	movea.l 18a9a <nowStatus>,a0
    5506:	move.l 8(sp),14(a0)
}
    550c:	nop
    550e:	rts

00005510 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    5510:	       lea -100(sp),sp
    5514:	       move.l a6,-(sp)
    5516:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    5518:	       movea.l 18a9a <nowStatus>,a0
    551e:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    5522:	       movea.l 18a9a <nowStatus>,a0
    5528:	       move.w 4(a0),d0
    552c:	       move.w d0,d0
    552e:	       andi.l #65535,d0
    5534:	       move.l 112(sp),-(sp)
    5538:	       move.l d0,-(sp)
    553a:	       jsr 8d0 <put2bytes>
    5540:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    5542:	       movea.l 18a9a <nowStatus>,a0
    5548:	       move.l 6(a0),d0
    554c:	       move.l d0,d0
    554e:	       movea.w d0,a0
    5550:	       move.l 112(sp),-(sp)
    5554:	       move.l a0,-(sp)
    5556:	       jsr a9c <putSigned>
    555c:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    555e:	       movea.l 18a9a <nowStatus>,a0
    5564:	       move.l 10(a0),d0
    5568:	       move.l 112(sp),-(sp)
    556c:	       move.l d0,-(sp)
    556e:	       jsr 8d0 <put2bytes>
    5574:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    5576:	       movea.l 18a9a <nowStatus>,a0
    557c:	       move.l 14(a0),d0
    5580:	       move.l 112(sp),-(sp)
    5584:	       move.l d0,-(sp)
    5586:	       jsr 8d0 <put2bytes>
    558c:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    558e:	       move.l 112(sp),100(sp)
    5594:	       movea.l 18a9a <nowStatus>,a0
    559a:	       move.l 18(a0),96(sp)
    55a0:	       move.l 19102 <DOSBase>,d0
    55a6:	       movea.l d0,a6
    55a8:	       move.l 100(sp),d1
    55ac:	       move.l 96(sp),d2
    55b0:	       jsr -312(a6)
    55b4:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    55b8:	       move.l 112(sp),88(sp)
    55be:	       movea.l 18a9a <nowStatus>,a0
    55c4:	       move.l 22(a0),84(sp)
    55ca:	       move.l 19102 <DOSBase>,d0
    55d0:	       movea.l d0,a6
    55d2:	       move.l 88(sp),d1
    55d6:	       move.l 84(sp),d2
    55da:	       jsr -312(a6)
    55de:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    55e2:	       move.l 112(sp),76(sp)
    55e8:	       movea.l 18a9a <nowStatus>,a0
    55ee:	       move.l 26(a0),72(sp)
    55f4:	       move.l 19102 <DOSBase>,d0
    55fa:	       movea.l d0,a6
    55fc:	       move.l 76(sp),d1
    5600:	       move.l 72(sp),d2
    5604:	       jsr -312(a6)
    5608:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    560c:	       move.l 112(sp),64(sp)
    5612:	       movea.l 18a9a <nowStatus>,a0
    5618:	       move.l 30(a0),60(sp)
    561e:	       move.l 19102 <DOSBase>,d0
    5624:	       movea.l d0,a6
    5626:	       move.l 64(sp),d1
    562a:	       move.l 60(sp),d2
    562e:	       jsr -312(a6)
    5632:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    5636:	       move.l 112(sp),52(sp)
    563c:	       movea.l 18a9a <nowStatus>,a0
    5642:	       move.l 34(a0),48(sp)
    5648:	       move.l 19102 <DOSBase>,d0
    564e:	       movea.l d0,a6
    5650:	       move.l 52(sp),d1
    5654:	       move.l 48(sp),d2
    5658:	       jsr -312(a6)
    565c:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    5660:	       move.l 112(sp),40(sp)
    5666:	       movea.l 18a9a <nowStatus>,a0
    566c:	       move.l 38(a0),36(sp)
    5672:	       move.l 19102 <DOSBase>,d0
    5678:	       movea.l d0,a6
    567a:	       move.l 40(sp),d1
    567e:	       move.l 36(sp),d2
    5682:	       jsr -312(a6)
    5686:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    568a:	   /-- bra.s 56ce <saveStatusBars+0x1be>
		FPutC (fp,1);
    568c:	/--|-> move.l 112(sp),16(sp)
    5692:	|  |   moveq #1,d0
    5694:	|  |   move.l d0,12(sp)
    5698:	|  |   move.l 19102 <DOSBase>,d0
    569e:	|  |   movea.l d0,a6
    56a0:	|  |   move.l 16(sp),d1
    56a4:	|  |   move.l 12(sp),d2
    56a8:	|  |   jsr -312(a6)
    56ac:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    56b0:	|  |   movea.l 104(sp),a0
    56b4:	|  |   move.l (a0),d0
    56b6:	|  |   move.l 112(sp),-(sp)
    56ba:	|  |   move.l d0,-(sp)
    56bc:	|  |   jsr bd8 <writeString>
    56c2:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    56c4:	|  |   movea.l 104(sp),a0
    56c8:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    56ce:	|  \-> tst.l 104(sp)
    56d2:	\----- bne.s 568c <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    56d4:	       move.l 112(sp),28(sp)
    56da:	       clr.l 24(sp)
    56de:	       move.l 19102 <DOSBase>,d0
    56e4:	       movea.l d0,a6
    56e6:	       move.l 28(sp),d1
    56ea:	       move.l 24(sp),d2
    56ee:	       jsr -312(a6)
    56f2:	       move.l d0,20(sp)
}
    56f6:	       nop
    56f8:	       move.l (sp)+,d2
    56fa:	       movea.l (sp)+,a6
    56fc:	       lea 100(sp),sp
    5700:	       rts

00005702 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    5702:	movea.l 18a9a <nowStatus>,a0
    5708:	move.l 4(sp),6(a0)
}
    570e:	nop
    5710:	rts

00005712 <setStatusBar>:

void setStatusBar (char * txt) {
    5712:	    subq.l #4,sp
    5714:	    move.l a6,-(sp)
    5716:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    5718:	    movea.l 18a9a <nowStatus>,a0
    571e:	    move.l (a0),d0
    5720:	/-- beq.s 5754 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    5722:	|   movea.l 18a9a <nowStatus>,a0
    5728:	|   movea.l (a0),a0
    572a:	|   move.l (a0),8(sp)
    572e:	|   move.l 190fa <SysBase>,d0
    5734:	|   movea.l d0,a6
    5736:	|   movea.l 8(sp),a1
    573a:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    573e:	|   movea.l 18a9a <nowStatus>,a0
    5744:	|   movea.l (a0),a2
    5746:	|   move.l 16(sp),-(sp)
    574a:	|   jsr b8 <copyString>
    5750:	|   addq.l #4,sp
    5752:	|   move.l d0,(a2)
	}
}
    5754:	\-> nop
    5756:	    movea.l (sp)+,a2
    5758:	    movea.l (sp)+,a6
    575a:	    addq.l #4,sp
    575c:	    rts

0000575e <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    575e:	       movea.l 18a9a <nowStatus>,a0
    5764:	       move.l (a0),d0
    5766:	/----- beq.s 5774 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    5768:	|      movea.l 18a9a <nowStatus>,a0
    576e:	|      movea.l (a0),a0
    5770:	|      move.l (a0),d0
    5772:	|  /-- bra.s 577a <statusBarText+0x1c>
	} else {
		return "";
    5774:	\--|-> move.l #86406,d0
	}
    577a:	   \-> rts

0000577c <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    577c:	       lea -28(sp),sp
    5780:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    5784:	       move.l 52(sp),-(sp)
    5788:	       jsr 1274e <stringWidth>
    578e:	       addq.l #4,sp
    5790:	       asr.l #1,d0
    5792:	       move.l d0,-(sp)
    5794:	       jsr 141f4 <__floatsisf>
    579a:	       addq.l #4,sp
    579c:	       move.l d0,d1
    579e:	       move.l 18ab2 <cameraZoom>,d0
    57a4:	       move.l d0,-(sp)
    57a6:	       move.l d1,-(sp)
    57a8:	       jsr 140a0 <__divsf3>
    57ae:	       addq.l #8,sp
    57b0:	       move.l d0,-(sp)
    57b2:	       jsr 1418c <__fixsfsi>
    57b8:	       addq.l #4,sp
    57ba:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    57be:	       move.l 56(sp),d0
    57c2:	       sub.l 44(sp),d0
    57c6:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    57ca:	       move.l 56(sp),d0
    57ce:	       add.l 44(sp),d0
    57d2:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    57d6:	       moveq #12,d0
    57d8:	       move.l d0,32(sp)
    57dc:	       clr.l 28(sp)
    57e0:	       move.l 190fa <SysBase>,d0
    57e6:	       movea.l d0,a6
    57e8:	       move.l 32(sp),d0
    57ec:	       move.l 28(sp),d1
    57f0:	       jsr -684(a6)
    57f4:	       move.l d0,24(sp)
    57f8:	       move.l 24(sp),d0
    57fc:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    5800:	       movea.l 19156 <speech>,a0
    5806:	       move.l 4(a0),d0
    580a:	       movea.l 20(sp),a0
    580e:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    5812:	       move.l 52(sp),-(sp)
    5816:	       jsr b8 <copyString>
    581c:	       addq.l #4,sp
    581e:	       movea.l 20(sp),a0
    5822:	       move.l d0,(a0)
	newLine -> x = xx1;
    5824:	       movea.l 20(sp),a0
    5828:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    582e:	       movea.l 19156 <speech>,a0
    5834:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    583a:	       moveq #4,d0
    583c:	       cmp.l 40(sp),d0
    5840:	   /-- blt.s 5862 <addSpeechLine+0xe6>
    5842:	   |   movea.l 60(sp),a0
    5846:	   |   move.l (a0),d1
    5848:	   |   moveq #5,d0
    584a:	   |   sub.l 40(sp),d0
    584e:	   |   cmp.l d1,d0
    5850:	   +-- ble.s 5862 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    5852:	   |   moveq #5,d0
    5854:	   |   sub.l 40(sp),d0
    5858:	   |   movea.l 60(sp),a0
    585c:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    585e:	/--|-- bra.w 598e <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    5862:	|  \-> move.l 36(sp),-(sp)
    5866:	|      jsr 141f4 <__floatsisf>
    586c:	|      addq.l #4,sp
    586e:	|      move.l d0,d2
    5870:	|      move.l 1904e <winWidth>,d0
    5876:	|      move.l d0,-(sp)
    5878:	|      jsr 1421c <__floatunsisf>
    587e:	|      addq.l #4,sp
    5880:	|      move.l d0,d1
    5882:	|      move.l 18ab2 <cameraZoom>,d0
    5888:	|      move.l d0,-(sp)
    588a:	|      move.l d1,-(sp)
    588c:	|      jsr 140a0 <__divsf3>
    5892:	|      addq.l #8,sp
    5894:	|      move.l #1084227584,-(sp)
    589a:	|      move.l d0,-(sp)
    589c:	|      jsr 144e8 <__subsf3>
    58a2:	|      addq.l #8,sp
    58a4:	|      move.l d0,-(sp)
    58a6:	|      move.l d2,-(sp)
    58a8:	|      jsr 142dc <__gesf2>
    58ae:	|      addq.l #8,sp
    58b0:	|      tst.l d0
    58b2:	|  /-- bge.s 58b8 <addSpeechLine+0x13c>
}
    58b4:	+--|-- bra.w 598e <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    58b8:	|  \-> movea.l 60(sp),a0
    58bc:	|      move.l (a0),d0
    58be:	|      move.l d0,-(sp)
    58c0:	|      jsr 141f4 <__floatsisf>
    58c6:	|      addq.l #4,sp
    58c8:	|      move.l d0,-(sp)
    58ca:	|      jsr 1410c <__extendsfdf2>
    58d0:	|      addq.l #4,sp
    58d2:	|      move.l d0,d4
    58d4:	|      move.l d1,d5
    58d6:	|      move.l 1904e <winWidth>,d0
    58dc:	|      move.l d0,-(sp)
    58de:	|      jsr 1421c <__floatunsisf>
    58e4:	|      addq.l #4,sp
    58e6:	|      move.l d0,d1
    58e8:	|      move.l 18ab2 <cameraZoom>,d0
    58ee:	|      move.l d0,-(sp)
    58f0:	|      move.l d1,-(sp)
    58f2:	|      jsr 140a0 <__divsf3>
    58f8:	|      addq.l #8,sp
    58fa:	|      move.l d0,-(sp)
    58fc:	|      jsr 1410c <__extendsfdf2>
    5902:	|      addq.l #4,sp
    5904:	|      clr.l -(sp)
    5906:	|      move.l #1075052544,-(sp)
    590c:	|      move.l d1,-(sp)
    590e:	|      move.l d0,-(sp)
    5910:	|      jsr 14486 <__subdf3>
    5916:	|      lea 16(sp),sp
    591a:	|      move.l d0,d2
    591c:	|      move.l d1,d3
    591e:	|      move.l 36(sp),-(sp)
    5922:	|      jsr 141b4 <__floatsidf>
    5928:	|      addq.l #4,sp
    592a:	|      move.l d1,-(sp)
    592c:	|      move.l d0,-(sp)
    592e:	|      move.l d3,-(sp)
    5930:	|      move.l d2,-(sp)
    5932:	|      jsr 14486 <__subdf3>
    5938:	|      lea 16(sp),sp
    593c:	|      move.l d1,-(sp)
    593e:	|      move.l d0,-(sp)
    5940:	|      move.l d5,-(sp)
    5942:	|      move.l d4,-(sp)
    5944:	|      jsr 14312 <__gtdf2>
    594a:	|      lea 16(sp),sp
    594e:	|      tst.l d0
    5950:	|  /-- bgt.s 5954 <addSpeechLine+0x1d8>
}
    5952:	+--|-- bra.s 598e <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    5954:	|  \-> move.l 1904e <winWidth>,d0
    595a:	|      move.l d0,-(sp)
    595c:	|      jsr 1421c <__floatunsisf>
    5962:	|      addq.l #4,sp
    5964:	|      move.l d0,d1
    5966:	|      move.l 18ab2 <cameraZoom>,d0
    596c:	|      move.l d0,-(sp)
    596e:	|      move.l d1,-(sp)
    5970:	|      jsr 140a0 <__divsf3>
    5976:	|      addq.l #8,sp
    5978:	|      move.l d0,-(sp)
    597a:	|      jsr 1418c <__fixsfsi>
    5980:	|      addq.l #4,sp
    5982:	|      subq.l #5,d0
    5984:	|      sub.l 36(sp),d0
    5988:	|      movea.l 60(sp),a0
    598c:	|      move.l d0,(a0)
}
    598e:	\----> nop
    5990:	       movem.l (sp)+,d2-d5/a6
    5994:	       lea 28(sp),sp
    5998:	       rts

0000599a <initSpeech>:


void initSpeech () {
    599a:	       lea -12(sp),sp
    599e:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    59a0:	       moveq #20,d0
    59a2:	       move.l d0,12(sp)
    59a6:	       clr.l 8(sp)
    59aa:	       move.l 190fa <SysBase>,d0
    59b0:	       movea.l d0,a6
    59b2:	       move.l 12(sp),d0
    59b6:	       move.l 8(sp),d1
    59ba:	       jsr -684(a6)
    59be:	       move.l d0,4(sp)
    59c2:	       move.l 4(sp),d0
    59c6:	       move.l d0,19156 <speech>
	if (speech) {
    59cc:	       move.l 19156 <speech>,d0
    59d2:	/----- beq.s 59fe <initSpeech+0x64>
		speech -> currentTalker = NULL;
    59d4:	|      movea.l 19156 <speech>,a0
    59da:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    59dc:	|      movea.l 19156 <speech>,a0
    59e2:	|      clr.l 4(a0)
		speech -> speechY = 0;
    59e6:	|      movea.l 19156 <speech>,a0
    59ec:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    59f0:	|      movea.l 19156 <speech>,a0
    59f6:	|      moveq #-1,d0
    59f8:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    59fc:	|  /-- bra.s 5a0c <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    59fe:	\--|-> pea 15760 <custom.c.64ca0e9f+0xa8a>
    5a04:	   |   jsr 13db8 <KPrintF>
    5a0a:	   |   addq.l #4,sp
}
    5a0c:	   \-> nop
    5a0e:	       movea.l (sp)+,a6
    5a10:	       lea 12(sp),sp
    5a14:	       rts

00005a16 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    5a16:	       movea.l 19156 <speech>,a0
    5a1c:	       move.l 4(a0),d0
    5a20:	/----- beq.s 5a2e <isThereAnySpeechGoingOn+0x18>
    5a22:	|      movea.l 19156 <speech>,a0
    5a28:	|      move.l 16(a0),d0
    5a2c:	|  /-- bra.s 5a30 <isThereAnySpeechGoingOn+0x1a>
    5a2e:	\--|-> moveq #-1,d0
}
    5a30:	   \-> rts

00005a32 <killAllSpeech>:

void killAllSpeech () {
    5a32:	       lea -12(sp),sp
    5a36:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    5a38:	       movea.l 19156 <speech>,a0
    5a3e:	       move.l 12(a0),d0
    5a42:	       moveq #-1,d1
    5a44:	       cmp.l d0,d1
    5a46:	   /-- beq.s 5a54 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    5a48:	   |   movea.l 19156 <speech>,a0
    5a4e:	   |   moveq #-1,d0
    5a50:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    5a54:	   \-> movea.l 19156 <speech>,a0
    5a5a:	       move.l (a0),d0
    5a5c:	/----- beq.w 5ae8 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    5a60:	|      movea.l 19156 <speech>,a0
    5a66:	|      move.l (a0),d0
    5a68:	|      lea -120(sp),sp
    5a6c:	|      move.l sp,d1
    5a6e:	|      movea.l d0,a0
    5a70:	|      moveq #120,d0
    5a72:	|      move.l d0,-(sp)
    5a74:	|      move.l a0,-(sp)
    5a76:	|      move.l d1,-(sp)
    5a78:	|      jsr 13d6c <memcpy>
    5a7e:	|      lea 12(sp),sp
    5a82:	|      jsr 8370 <makeSilent>
    5a88:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    5a8c:	|      movea.l 19156 <speech>,a0
    5a92:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    5a94:	+----- bra.s 5ae8 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    5a96:	|  /-> movea.l 19156 <speech>,a0
    5a9c:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    5aa2:	|  |   movea.l 19156 <speech>,a0
    5aa8:	|  |   movea.l 4(a0),a1
    5aac:	|  |   movea.l 19156 <speech>,a0
    5ab2:	|  |   move.l 4(a1),d0
    5ab6:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    5aba:	|  |   movea.l 12(sp),a0
    5abe:	|  |   move.l (a0),8(sp)
    5ac2:	|  |   move.l 190fa <SysBase>,d0
    5ac8:	|  |   movea.l d0,a6
    5aca:	|  |   movea.l 8(sp),a1
    5ace:	|  |   jsr -690(a6)
		FreeVec(killMe);
    5ad2:	|  |   move.l 12(sp),4(sp)
    5ad8:	|  |   move.l 190fa <SysBase>,d0
    5ade:	|  |   movea.l d0,a6
    5ae0:	|  |   movea.l 4(sp),a1
    5ae4:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    5ae8:	\--|-> movea.l 19156 <speech>,a0
    5aee:	   |   move.l 4(a0),d0
    5af2:	   \-- bne.s 5a96 <killAllSpeech+0x64>
	}
}
    5af4:	       nop
    5af6:	       nop
    5af8:	       movea.l (sp)+,a6
    5afa:	       lea 12(sp),sp
    5afe:	       rts

00005b00 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    5b00:	pea 2 <_start+0x2>
    5b04:	move.l 8(sp),-(sp)
    5b08:	jsr 5c60 <setFrames>
    5b0e:	addq.l #8,sp
}
    5b10:	nop
    5b12:	rts

00005b14 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    5b14:	       lea -52(sp),sp
    5b18:	       move.l a6,-(sp)
    5b1a:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    5b1c:	       movea.l 64(sp),a0
    5b20:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    5b26:	       move.l 18a9e <speechSpeed>,d0
    5b2c:	       move.l 68(sp),-(sp)
    5b30:	       move.l d0,-(sp)
    5b32:	       jsr a46 <putFloat>
    5b38:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    5b3a:	       movea.l 64(sp),a0
    5b3e:	       move.l 8(a0),d0
    5b42:	       move.l 68(sp),-(sp)
    5b46:	       move.l d0,-(sp)
    5b48:	       jsr 8d0 <put2bytes>
    5b4e:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    5b50:	       movea.l 64(sp),a0
    5b54:	       move.l 16(a0),d0
    5b58:	       move.l 68(sp),-(sp)
    5b5c:	       move.l d0,-(sp)
    5b5e:	       jsr 8d0 <put2bytes>
    5b64:	       addq.l #8,sp
		if (sS -> currentTalker) {
    5b66:	       movea.l 64(sp),a0
    5b6a:	       move.l (a0),d0
    5b6c:	   /-- beq.s 5bb0 <saveSpeech+0x9c>
			FPutC (fp, 1);
    5b6e:	   |   move.l 68(sp),40(sp)
    5b74:	   |   moveq #1,d0
    5b76:	   |   move.l d0,36(sp)
    5b7a:	   |   move.l 19102 <DOSBase>,d0
    5b80:	   |   movea.l d0,a6
    5b82:	   |   move.l 40(sp),d1
    5b86:	   |   move.l 36(sp),d2
    5b8a:	   |   jsr -312(a6)
    5b8e:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    5b92:	   |   movea.l 64(sp),a0
    5b96:	   |   movea.l (a0),a0
    5b98:	   |   movea.l 102(a0),a0
    5b9c:	   |   move.l 4(a0),d0
    5ba0:	   |   move.l 68(sp),-(sp)
    5ba4:	   |   move.l d0,-(sp)
    5ba6:	   |   jsr 8d0 <put2bytes>
    5bac:	   |   addq.l #8,sp
    5bae:	/--|-- bra.s 5c2c <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    5bb0:	|  \-> move.l 68(sp),52(sp)
    5bb6:	|      clr.l 48(sp)
    5bba:	|      move.l 19102 <DOSBase>,d0
    5bc0:	|      movea.l d0,a6
    5bc2:	|      move.l 52(sp),d1
    5bc6:	|      move.l 48(sp),d2
    5bca:	|      jsr -312(a6)
    5bce:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    5bd2:	+----- bra.s 5c2c <saveSpeech+0x118>
			FPutC (fp, 1);
    5bd4:	|  /-> move.l 68(sp),16(sp)
    5bda:	|  |   moveq #1,d0
    5bdc:	|  |   move.l d0,12(sp)
    5be0:	|  |   move.l 19102 <DOSBase>,d0
    5be6:	|  |   movea.l d0,a6
    5be8:	|  |   move.l 16(sp),d1
    5bec:	|  |   move.l 12(sp),d2
    5bf0:	|  |   jsr -312(a6)
    5bf4:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    5bf8:	|  |   movea.l 56(sp),a0
    5bfc:	|  |   move.l (a0),d0
    5bfe:	|  |   move.l 68(sp),-(sp)
    5c02:	|  |   move.l d0,-(sp)
    5c04:	|  |   jsr bd8 <writeString>
    5c0a:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    5c0c:	|  |   movea.l 56(sp),a0
    5c10:	|  |   move.l 8(a0),d0
    5c14:	|  |   move.l 68(sp),-(sp)
    5c18:	|  |   move.l d0,-(sp)
    5c1a:	|  |   jsr 8d0 <put2bytes>
    5c20:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    5c22:	|  |   movea.l 56(sp),a0
    5c26:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    5c2c:	\--|-> tst.l 56(sp)
    5c30:	   \-- bne.s 5bd4 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    5c32:	       move.l 68(sp),28(sp)
    5c38:	       clr.l 24(sp)
    5c3c:	       move.l 19102 <DOSBase>,d0
    5c42:	       movea.l d0,a6
    5c44:	       move.l 28(sp),d1
    5c48:	       move.l 24(sp),d2
    5c4c:	       jsr -312(a6)
    5c50:	       move.l d0,20(sp)
}
    5c54:	       nop
    5c56:	       move.l (sp)+,d2
    5c58:	       movea.l (sp)+,a6
    5c5a:	       lea 52(sp),sp
    5c5e:	       rts

00005c60 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    5c60:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    5c62:	movea.l 8(sp),a0
    5c66:	movea.l 68(a0),a0
    5c6a:	move.l (a0),d2
    5c6c:	movea.l 8(sp),a0
    5c70:	movea.l 68(a0),a0
    5c74:	move.l 4(a0),d0
    5c78:	move.l 12(sp),-(sp)
    5c7c:	move.l d0,-(sp)
    5c7e:	jsr 14776 <__mulsi3>
    5c84:	addq.l #8,sp
    5c86:	move.l d0,d1
    5c88:	movea.l 8(sp),a0
    5c8c:	move.l 94(a0),d0
    5c90:	add.l d1,d0
    5c92:	add.l d0,d0
    5c94:	add.l d0,d0
    5c96:	movea.l d2,a0
    5c98:	adda.l d0,a0
    5c9a:	move.l (a0),d0
    5c9c:	movea.l 8(sp),a0
    5ca0:	move.l d0,60(a0)
}
    5ca4:	nop
    5ca6:	move.l (sp)+,d2
    5ca8:	rts

00005caa <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    5caa:	       lea -20(sp),sp
    5cae:	       move.l d2,-(sp)
    5cb0:	       move.l 40(sp),d0
    5cb4:	       move.w d0,d0
    5cb6:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    5cba:	       movea.l 19156 <speech>,a0
    5cc0:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    5cc6:	       move.l 32(sp),-(sp)
    5cca:	       jsr 7e5a <findPerson>
    5cd0:	       addq.l #4,sp
    5cd2:	       move.l d0,16(sp)
    if (thisPerson) {
    5cd6:	   /-- beq.s 5cfc <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    5cd8:	   |   movea.w 6(sp),a0
    5cdc:	   |   move.l a0,-(sp)
    5cde:	   |   move.l 40(sp),-(sp)
    5ce2:	   |   move.l 24(sp),-(sp)
    5ce6:	   |   move.l 40(sp),-(sp)
    5cea:	   |   jsr 5dc2 <wrapSpeechPerson>
    5cf0:	   |   lea 16(sp),sp
    5cf4:	   |   move.l d0,20(sp)
    5cf8:	/--|-- bra.w 5db6 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    5cfc:	|  \-> move.l 32(sp),-(sp)
    5d00:	|      jsr 1283a <getRegionForObject>
    5d06:	|      addq.l #4,sp
    5d08:	|      move.l d0,12(sp)
        if (thisRegion) {
    5d0c:	|  /-- beq.s 5d78 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    5d0e:	|  |   movea.l 12(sp),a0
    5d12:	|  |   movea.l 28(a0),a0
    5d16:	|  |   move.l 28(a0),d0
    5d1a:	|  |   movea.l 12(sp),a0
    5d1e:	|  |   movea.l 4(a0),a1
    5d22:	|  |   movea.l 12(sp),a0
    5d26:	|  |   movea.l 28(a0),a0
    5d2a:	|  |   move.l 20(a0),d1
    5d2e:	|  |   movea.l a1,a0
    5d30:	|  |   suba.l d1,a0
    5d32:	|  |   move.l 1920c <cameraY>,d1
    5d38:	|  |   movea.l a0,a1
    5d3a:	|  |   suba.l d1,a1
    5d3c:	|  |   movea.l 12(sp),a0
    5d40:	|  |   move.l (a0),d2
    5d42:	|  |   movea.l 12(sp),a0
    5d46:	|  |   move.l 8(a0),d1
    5d4a:	|  |   add.l d2,d1
    5d4c:	|  |   move.l d1,d2
    5d4e:	|  |   asr.l #1,d2
    5d50:	|  |   move.l 19208 <cameraX>,d1
    5d56:	|  |   movea.l d2,a0
    5d58:	|  |   suba.l d1,a0
    5d5a:	|  |   move.l 36(sp),-(sp)
    5d5e:	|  |   move.l d0,-(sp)
    5d60:	|  |   move.l a1,-(sp)
    5d62:	|  |   move.l a0,-(sp)
    5d64:	|  |   move.l 44(sp),-(sp)
    5d68:	|  |   jsr 5ee0 <wrapSpeechXY>
    5d6e:	|  |   lea 20(sp),sp
    5d72:	|  |   move.l d0,20(sp)
    5d76:	+--|-- bra.s 5db6 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    5d78:	|  \-> move.l 32(sp),-(sp)
    5d7c:	|      jsr aba6 <findObjectType>
    5d82:	|      addq.l #4,sp
    5d84:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    5d88:	|      movea.l 8(sp),a0
    5d8c:	|      move.l 28(a0),d1
    5d90:	|      move.l 1904e <winWidth>,d0
    5d96:	|      lsr.l #1,d0
    5d98:	|      move.l 36(sp),-(sp)
    5d9c:	|      move.l d1,-(sp)
    5d9e:	|      pea a <_start+0xa>
    5da2:	|      move.l d0,-(sp)
    5da4:	|      move.l 44(sp),-(sp)
    5da8:	|      jsr 5ee0 <wrapSpeechXY>
    5dae:	|      lea 20(sp),sp
    5db2:	|      move.l d0,20(sp)
        }
    }
    return i;
    5db6:	\----> move.l 20(sp),d0
}
    5dba:	       move.l (sp)+,d2
    5dbc:	       lea 20(sp),sp
    5dc0:	       rts

00005dc2 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    5dc2:	    subq.l #8,sp
    5dc4:	    movem.l d2-d4,-(sp)
    5dc8:	    move.l 36(sp),d0
    5dcc:	    move.w d0,d0
    5dce:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    5dd2:	    movea.l 28(sp),a0
    5dd6:	    movea.l 102(a0),a0
    5dda:	    move.l 28(a0),d2
    5dde:	    movea.l 28(sp),a0
    5de2:	    move.l 4(a0),d3
    5de6:	    move.l 1920c <cameraY>,d0
    5dec:	    move.l d0,-(sp)
    5dee:	    jsr 141f4 <__floatsisf>
    5df4:	    addq.l #4,sp
    5df6:	    move.l d0,-(sp)
    5df8:	    move.l d3,-(sp)
    5dfa:	    jsr 144e8 <__subsf3>
    5e00:	    addq.l #8,sp
    5e02:	    move.l d0,d3
    5e04:	    movea.l 28(sp),a0
    5e08:	    move.l 20(a0),d4
    5e0c:	    movea.l 28(sp),a0
    5e10:	    move.l 8(a0),d1
    5e14:	    movea.l 28(sp),a0
    5e18:	    move.l 12(a0),d0
    5e1c:	    sub.l d0,d1
    5e1e:	    move.l d1,-(sp)
    5e20:	    jsr 141f4 <__floatsisf>
    5e26:	    addq.l #4,sp
    5e28:	    move.l d0,-(sp)
    5e2a:	    move.l d4,-(sp)
    5e2c:	    jsr 142a6 <__mulsf3>
    5e32:	    addq.l #8,sp
    5e34:	    move.l d0,-(sp)
    5e36:	    move.l d3,-(sp)
    5e38:	    jsr 144e8 <__subsf3>
    5e3e:	    addq.l #8,sp
    5e40:	    move.l d0,d3
    5e42:	    movea.l 28(sp),a0
    5e46:	    movea.l 102(a0),a0
    5e4a:	    move.l 20(a0),d0
    5e4e:	    move.l d0,-(sp)
    5e50:	    jsr 141f4 <__floatsisf>
    5e56:	    addq.l #4,sp
    5e58:	    move.l d0,-(sp)
    5e5a:	    move.l d3,-(sp)
    5e5c:	    jsr 144e8 <__subsf3>
    5e62:	    addq.l #8,sp
    5e64:	    move.l d0,-(sp)
    5e66:	    jsr 1418c <__fixsfsi>
    5e6c:	    addq.l #4,sp
    5e6e:	    move.l d0,d4
    5e70:	    movea.l 28(sp),a0
    5e74:	    move.l (a0),d3
    5e76:	    move.l 19208 <cameraX>,d0
    5e7c:	    move.l d0,-(sp)
    5e7e:	    jsr 141f4 <__floatsisf>
    5e84:	    addq.l #4,sp
    5e86:	    move.l d0,-(sp)
    5e88:	    move.l d3,-(sp)
    5e8a:	    jsr 144e8 <__subsf3>
    5e90:	    addq.l #8,sp
    5e92:	    move.l d0,-(sp)
    5e94:	    jsr 1418c <__fixsfsi>
    5e9a:	    addq.l #4,sp
    5e9c:	    move.l 32(sp),-(sp)
    5ea0:	    move.l d2,-(sp)
    5ea2:	    move.l d4,-(sp)
    5ea4:	    move.l d0,-(sp)
    5ea6:	    move.l 40(sp),-(sp)
    5eaa:	    jsr 5ee0 <wrapSpeechXY>
    5eb0:	    lea 20(sp),sp
    5eb4:	    move.l d0,16(sp)
	if (animPerson) {
    5eb8:	    tst.w 14(sp)
    5ebc:	/-- beq.s 5ed4 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    5ebe:	|   move.l 28(sp),-(sp)
    5ec2:	|   jsr 5b00 <makeTalker>
    5ec8:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    5eca:	|   movea.l 19156 <speech>,a0
    5ed0:	|   move.l 28(sp),(a0)
	}
	return i;
    5ed4:	\-> move.l 16(sp),d0
}
    5ed8:	    movem.l (sp)+,d2-d4
    5edc:	    addq.l #8,sp
    5ede:	    rts

00005ee0 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    5ee0:	                   lea -16(sp),sp
    5ee4:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    5ee8:	                   clr.l 16(sp)
    killAllSpeech();
    5eec:	                   jsr 5a32 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    5ef2:	                   move.l 36(sp),-(sp)
    5ef6:	                   jsr 1125c <strlen>
    5efc:	                   addq.l #4,sp
    5efe:	                   movea.l d0,a0
    5f00:	                   lea 20(a0),a0
    5f04:	                   move.l a0,-(sp)
    5f06:	                   jsr 1421c <__floatunsisf>
    5f0c:	                   addq.l #4,sp
    5f0e:	                   move.l d0,d1
    5f10:	                   move.l 18a9e <speechSpeed>,d0
    5f16:	                   move.l d0,-(sp)
    5f18:	                   move.l d1,-(sp)
    5f1a:	                   jsr 142a6 <__mulsf3>
    5f20:	                   addq.l #8,sp
    5f22:	                   move.l d0,-(sp)
    5f24:	                   jsr 1418c <__fixsfsi>
    5f2a:	                   addq.l #4,sp
    5f2c:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    5f30:	               /-- bgt.s 5f38 <wrapSpeechXY+0x58>
    5f32:	               |   moveq #1,d0
    5f34:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    5f38:	               \-> moveq #-1,d1
    5f3a:	                   cmp.l 52(sp),d1
    5f3e:	               /-- beq.s 5f7e <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    5f40:	               |   move.l 1921c <speechMode>,d0
    5f46:	               +-- ble.s 5f7e <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    5f48:	               |   clr.l -(sp)
    5f4a:	               |   move.l 56(sp),-(sp)
    5f4e:	               |   jsr a87c <startSound>
    5f54:	               |   addq.l #8,sp
    5f56:	               |   tst.w d0
    5f58:	               +-- beq.s 5f7e <wrapSpeechXY+0x9e>
                speechTime = -10;
    5f5a:	               |   moveq #-10,d0
    5f5c:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    5f60:	               |   movea.l 19156 <speech>,a0
    5f66:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    5f6c:	               |   move.l 1921c <speechMode>,d0
    5f72:	               |   moveq #2,d1
    5f74:	               |   cmp.l d0,d1
    5f76:	               +-- bne.s 5f7e <wrapSpeechXY+0x9e>
    5f78:	               |   moveq #-10,d0
    5f7a:	/--------------|-- bra.w 6204 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    5f7e:	|              \-> movea.l 19156 <speech>,a0
    5f84:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    5f8a:	|     /----------- bra.w 603e <wrapSpeechXY+0x15e>
        a = wrap;
    5f8e:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    5f94:	|  |  |        /-- bra.s 5fa4 <wrapSpeechXY+0xc4>
            a--;
    5f96:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    5f9a:	|  |  |  |     +-- bne.s 5fa4 <wrapSpeechXY+0xc4>
                a = wrap;
    5f9c:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    5fa2:	|  |  |  |  /--|-- bra.s 5fb6 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    5fa4:	|  |  |  |  |  \-> move.l 28(sp),d0
    5fa8:	|  |  |  |  |      movea.l 36(sp),a0
    5fac:	|  |  |  |  |      adda.l d0,a0
    5fae:	|  |  |  |  |      move.b (a0),d0
    5fb0:	|  |  |  |  |      cmpi.b #32,d0
    5fb4:	|  |  |  \--|----- bne.s 5f96 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    5fb6:	|  |  |     \----> move.l 28(sp),d0
    5fba:	|  |  |            movea.l 36(sp),a0
    5fbe:	|  |  |            adda.l d0,a0
    5fc0:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    5fc2:	|  |  |            lea 16(sp),a0
    5fc6:	|  |  |            move.l a0,-(sp)
    5fc8:	|  |  |            move.l 44(sp),-(sp)
    5fcc:	|  |  |            move.l 44(sp),-(sp)
    5fd0:	|  |  |            jsr 577c <addSpeechLine>
    5fd6:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    5fda:	|  |  |            move.l 28(sp),d0
    5fde:	|  |  |            movea.l 36(sp),a0
    5fe2:	|  |  |            adda.l d0,a0
    5fe4:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    5fe8:	|  |  |            move.l 28(sp),d0
    5fec:	|  |  |            addq.l #1,d0
    5fee:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    5ff2:	|  |  |            move.l 44(sp),-(sp)
    5ff6:	|  |  |            jsr 141f4 <__floatsisf>
    5ffc:	|  |  |            addq.l #4,sp
    5ffe:	|  |  |            move.l d0,d2
    6000:	|  |  |            move.l 19242 <fontHeight>,d0
    6006:	|  |  |            move.l d0,-(sp)
    6008:	|  |  |            jsr 141f4 <__floatsisf>
    600e:	|  |  |            addq.l #4,sp
    6010:	|  |  |            move.l d0,d1
    6012:	|  |  |            move.l 18ab2 <cameraZoom>,d0
    6018:	|  |  |            move.l d0,-(sp)
    601a:	|  |  |            move.l d1,-(sp)
    601c:	|  |  |            jsr 140a0 <__divsf3>
    6022:	|  |  |            addq.l #8,sp
    6024:	|  |  |            move.l d0,-(sp)
    6026:	|  |  |            move.l d2,-(sp)
    6028:	|  |  |            jsr 144e8 <__subsf3>
    602e:	|  |  |            addq.l #8,sp
    6030:	|  |  |            move.l d0,-(sp)
    6032:	|  |  |            jsr 1418c <__fixsfsi>
    6038:	|  |  |            addq.l #4,sp
    603a:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    603e:	|  |  \----------> move.l 36(sp),-(sp)
    6042:	|  |               jsr 1125c <strlen>
    6048:	|  |               addq.l #4,sp
    604a:	|  |               move.l d0,d1
    604c:	|  |               move.l 48(sp),d0
    6050:	|  |               cmp.l d1,d0
    6052:	|  \-------------- bcs.w 5f8e <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    6056:	|                  lea 16(sp),a0
    605a:	|                  move.l a0,-(sp)
    605c:	|                  move.l 44(sp),-(sp)
    6060:	|                  move.l 44(sp),-(sp)
    6064:	|                  jsr 577c <addSpeechLine>
    606a:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    606e:	|                  move.l 44(sp),-(sp)
    6072:	|                  jsr 141f4 <__floatsisf>
    6078:	|                  addq.l #4,sp
    607a:	|                  move.l d0,d2
    607c:	|                  move.l 19242 <fontHeight>,d0
    6082:	|                  move.l d0,-(sp)
    6084:	|                  jsr 141f4 <__floatsisf>
    608a:	|                  addq.l #4,sp
    608c:	|                  move.l d0,d1
    608e:	|                  move.l 18ab2 <cameraZoom>,d0
    6094:	|                  move.l d0,-(sp)
    6096:	|                  move.l d1,-(sp)
    6098:	|                  jsr 140a0 <__divsf3>
    609e:	|                  addq.l #8,sp
    60a0:	|                  move.l d0,-(sp)
    60a2:	|                  move.l d2,-(sp)
    60a4:	|                  jsr 144e8 <__subsf3>
    60aa:	|                  addq.l #8,sp
    60ac:	|                  move.l d0,-(sp)
    60ae:	|                  jsr 1418c <__fixsfsi>
    60b4:	|                  addq.l #4,sp
    60b6:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    60ba:	|              /-- bpl.s 60d8 <wrapSpeechXY+0x1f8>
    60bc:	|              |   movea.l 19156 <speech>,a0
    60c2:	|              |   move.l 8(a0),d0
    60c6:	|              |   movea.l 19156 <speech>,a0
    60cc:	|              |   sub.l 44(sp),d0
    60d0:	|              |   move.l d0,8(a0)
    60d4:	|           /--|-- bra.w 61c6 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    60d8:	|           |  \-> movea.l 19156 <speech>,a0
    60de:	|           |      move.l 8(a0),d0
    60e2:	|           |      move.l d0,-(sp)
    60e4:	|           |      jsr 141f4 <__floatsisf>
    60ea:	|           |      addq.l #4,sp
    60ec:	|           |      move.l d0,d2
    60ee:	|           |      move.l 1920c <cameraY>,d0
    60f4:	|           |      move.l d0,-(sp)
    60f6:	|           |      jsr 141f4 <__floatsisf>
    60fc:	|           |      addq.l #4,sp
    60fe:	|           |      move.l d0,d3
    6100:	|           |      move.l 19052 <winHeight>,d4
    6106:	|           |      move.l 19242 <fontHeight>,d0
    610c:	|           |      pea 3 <_start+0x3>
    6110:	|           |      move.l d0,-(sp)
    6112:	|           |      jsr 147f4 <__divsi3>
    6118:	|           |      addq.l #8,sp
    611a:	|           |      move.l d4,d1
    611c:	|           |      sub.l d0,d1
    611e:	|           |      move.l d1,-(sp)
    6120:	|           |      jsr 1421c <__floatunsisf>
    6126:	|           |      addq.l #4,sp
    6128:	|           |      move.l d0,d1
    612a:	|           |      move.l 18ab2 <cameraZoom>,d0
    6130:	|           |      move.l d0,-(sp)
    6132:	|           |      move.l d1,-(sp)
    6134:	|           |      jsr 140a0 <__divsf3>
    613a:	|           |      addq.l #8,sp
    613c:	|           |      move.l d0,-(sp)
    613e:	|           |      move.l d3,-(sp)
    6140:	|           |      jsr 13fa6 <__addsf3>
    6146:	|           |      addq.l #8,sp
    6148:	|           |      move.l d0,-(sp)
    614a:	|           |      move.l d2,-(sp)
    614c:	|           |      jsr 14360 <__gtsf2>
    6152:	|           |      addq.l #8,sp
    6154:	|           |      tst.l d0
    6156:	|           +----- ble.s 61c6 <wrapSpeechXY+0x2e6>
    6158:	|           |      move.l 1920c <cameraY>,d0
    615e:	|           |      move.l d0,-(sp)
    6160:	|           |      jsr 141f4 <__floatsisf>
    6166:	|           |      addq.l #4,sp
    6168:	|           |      move.l d0,d2
    616a:	|           |      move.l 19052 <winHeight>,d3
    6170:	|           |      move.l 19242 <fontHeight>,d0
    6176:	|           |      pea 3 <_start+0x3>
    617a:	|           |      move.l d0,-(sp)
    617c:	|           |      jsr 147f4 <__divsi3>
    6182:	|           |      addq.l #8,sp
    6184:	|           |      move.l d3,d1
    6186:	|           |      sub.l d0,d1
    6188:	|           |      move.l d1,-(sp)
    618a:	|           |      jsr 1421c <__floatunsisf>
    6190:	|           |      addq.l #4,sp
    6192:	|           |      move.l d0,d1
    6194:	|           |      move.l 18ab2 <cameraZoom>,d0
    619a:	|           |      move.l d0,-(sp)
    619c:	|           |      move.l d1,-(sp)
    619e:	|           |      jsr 140a0 <__divsf3>
    61a4:	|           |      addq.l #8,sp
    61a6:	|           |      move.l d0,-(sp)
    61a8:	|           |      move.l d2,-(sp)
    61aa:	|           |      jsr 13fa6 <__addsf3>
    61b0:	|           |      addq.l #8,sp
    61b2:	|           |      movea.l 19156 <speech>,a2
    61b8:	|           |      move.l d0,-(sp)
    61ba:	|           |      jsr 1418c <__fixsfsi>
    61c0:	|           |      addq.l #4,sp
    61c2:	|           |      move.l d0,8(a2)

    if (offset) {
    61c6:	|           \----> move.l 16(sp),d0
    61ca:	|        /-------- beq.s 6200 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    61cc:	|        |         movea.l 19156 <speech>,a0
    61d2:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    61d8:	|        |     /-- bra.s 61fa <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    61da:	|        |  /--|-> movea.l 20(sp),a0
    61de:	|        |  |  |   move.l 8(a0),d1
    61e2:	|        |  |  |   move.l 16(sp),d0
    61e6:	|        |  |  |   add.l d1,d0
    61e8:	|        |  |  |   movea.l 20(sp),a0
    61ec:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    61f0:	|        |  |  |   movea.l 20(sp),a0
    61f4:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    61fa:	|        |  |  \-> tst.l 20(sp)
    61fe:	|        |  \----- bne.s 61da <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    6200:	|        \-------> move.l 24(sp),d0
}
    6204:	\----------------> movem.l (sp)+,d2-d4/a2
    6208:	                   lea 16(sp),sp
    620c:	                   rts

0000620e <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    620e:	    subq.l #4,sp
    6210:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    6212:	    move.l 191aa <zBuffer+0x50>,d0
    6218:	/-- beq.s 6250 <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    621a:	|   pea 191ae <zBuffer+0x54>
    6220:	|   pea 1 <_start+0x1>
    6224:	|   jsr 1dc0 <deleteTextures>
    622a:	|   addq.l #8,sp
		zBuffer.texName = 0;
    622c:	|   clr.l 191ae <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    6232:	|   move.l 191aa <zBuffer+0x50>,4(sp)
    623a:	|   move.l 190fa <SysBase>,d0
    6240:	|   movea.l d0,a6
    6242:	|   movea.l 4(sp),a1
    6246:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    624a:	|   clr.l 191aa <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    6250:	\-> clr.l 19162 <zBuffer+0x8>
	zBuffer.originalNum =0;
    6256:	    clr.l 191a6 <zBuffer+0x4c>
}
    625c:	    nop
    625e:	    movea.l (sp)+,a6
    6260:	    addq.l #4,sp
    6262:	    rts

00006264 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    6264:	                         lea -528(sp),sp
    6268:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    626c:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    6270:	                         jsr 620e <killZBuffer>

	zBuffer.originalNum = y;
    6276:	                         move.l 544(sp),d0
    627a:	                         move.l d0,191a6 <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    6280:	                         move.l 544(sp),d0
    6284:	                         move.l d0,-(sp)
    6286:	                         jsr 487a <openFileFromNum>
    628c:	                         addq.l #4,sp
    628e:	                         tst.l d0
    6290:	                     /-- bne.s 6298 <setZBuffer+0x34>
    6292:	                     |   clr.w d0
    6294:	/--------------------|-- bra.w 6676 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    6298:	|                    \-> move.l 190e2 <bigDataFile>,524(sp)
    62a0:	|                        move.l 19102 <DOSBase>,d0
    62a6:	|                        movea.l d0,a6
    62a8:	|                        move.l 524(sp),d1
    62ac:	|                        jsr -306(a6)
    62b0:	|                        move.l d0,520(sp)
    62b4:	|                        move.l 520(sp),d0
    62b8:	|                        moveq #83,d1
    62ba:	|                        cmp.l d0,d1
    62bc:	|                    /-- beq.s 631e <setZBuffer+0xba>
    62be:	|                    |   move.l 190e2 <bigDataFile>,516(sp)
    62c6:	|                    |   move.l 19102 <DOSBase>,d0
    62cc:	|                    |   movea.l d0,a6
    62ce:	|                    |   move.l 516(sp),d1
    62d2:	|                    |   jsr -306(a6)
    62d6:	|                    |   move.l d0,512(sp)
    62da:	|                    |   move.l 512(sp),d0
    62de:	|                    |   moveq #122,d1
    62e0:	|                    |   cmp.l d0,d1
    62e2:	|                    +-- beq.s 631e <setZBuffer+0xba>
    62e4:	|                    |   move.l 190e2 <bigDataFile>,508(sp)
    62ec:	|                    |   move.l 19102 <DOSBase>,d0
    62f2:	|                    |   movea.l d0,a6
    62f4:	|                    |   move.l 508(sp),d1
    62f8:	|                    |   jsr -306(a6)
    62fc:	|                    |   move.l d0,504(sp)
    6300:	|                    |   move.l 504(sp),d0
    6304:	|                    |   moveq #98,d1
    6306:	|                    |   cmp.l d0,d1
    6308:	|                    +-- beq.s 631e <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    630a:	|                    |   pea 1579d <custom.c.64ca0e9f+0xac7>
    6310:	|                    |   jsr 13db8 <KPrintF>
    6316:	|                    |   addq.l #4,sp
		 return FALSE;
    6318:	|                    |   clr.w d0
    631a:	+--------------------|-- bra.w 6676 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    631e:	|                    \-> move.l 190e2 <bigDataFile>,500(sp)
    6326:	|                        move.l 19102 <DOSBase>,d0
    632c:	|                        movea.l d0,a6
    632e:	|                        move.l 500(sp),d1
    6332:	|                        jsr -306(a6)
    6336:	|                        move.l d0,496(sp)
    633a:	|                        move.l 496(sp),d0
    633e:	|                    /-- beq.s 6348 <setZBuffer+0xe4>
    6340:	|                    |   moveq #1,d1
    6342:	|                    |   cmp.l d0,d1
    6344:	|                 /--|-- beq.s 635e <setZBuffer+0xfa>
    6346:	|              /--|--|-- bra.s 638c <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    6348:	|              |  |  \-> move.l #640,1915a <zBuffer>
		zBuffer.height = 480;
    6352:	|              |  |      move.l #480,1915e <zBuffer+0x4>
		break;
    635c:	|              |  |  /-- bra.s 63a0 <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    635e:	|              |  \--|-> move.l 190e2 <bigDataFile>,d0
    6364:	|              |     |   move.l d0,-(sp)
    6366:	|              |     |   jsr 6bc <get2bytes>
    636c:	|              |     |   addq.l #4,sp
    636e:	|              |     |   move.l d0,1915a <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    6374:	|              |     |   move.l 190e2 <bigDataFile>,d0
    637a:	|              |     |   move.l d0,-(sp)
    637c:	|              |     |   jsr 6bc <get2bytes>
    6382:	|              |     |   addq.l #4,sp
    6384:	|              |     |   move.l d0,1915e <zBuffer+0x4>
		break;
    638a:	|              |     +-- bra.s 63a0 <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    638c:	|              \-----|-> pea 157b1 <custom.c.64ca0e9f+0xadb>
    6392:	|                    |   jsr 13db8 <KPrintF>
    6398:	|                    |   addq.l #4,sp
		return FALSE;
    639a:	|                    |   clr.w d0
    639c:	+--------------------|-- bra.w 6676 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    63a0:	|                    \-> move.l 1915a <zBuffer>,d0
    63a6:	|                        move.l d0,d1
    63a8:	|                        move.l 191ea <sceneWidth>,d0
    63ae:	|                        cmp.l d1,d0
    63b0:	|                    /-- bne.s 63c4 <setZBuffer+0x160>
    63b2:	|                    |   move.l 1915e <zBuffer+0x4>,d0
    63b8:	|                    |   move.l d0,d1
    63ba:	|                    |   move.l 191ee <sceneHeight>,d0
    63c0:	|                    |   cmp.l d1,d0
    63c2:	|                 /--|-- beq.s 6414 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    63c4:	|                 |  \-> movea.l 191ee <sceneHeight>,a1
    63ca:	|                 |      movea.l 191ea <sceneWidth>,a0
    63d0:	|                 |      move.l 1915e <zBuffer+0x4>,d1
    63d6:	|                 |      move.l 1915a <zBuffer>,d0
    63dc:	|                 |      move.l a1,-(sp)
    63de:	|                 |      move.l a0,-(sp)
    63e0:	|                 |      move.l d1,-(sp)
    63e2:	|                 |      move.l d0,-(sp)
    63e4:	|                 |      pea 157fd <custom.c.64ca0e9f+0xb27>
    63ea:	|                 |      moveq #32,d0
    63ec:	|                 |      add.l sp,d0
    63ee:	|                 |      move.l d0,-(sp)
    63f0:	|                 |      jsr 1157a <sprintf>
    63f6:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    63fa:	|                 |      moveq #12,d0
    63fc:	|                 |      add.l sp,d0
    63fe:	|                 |      move.l d0,-(sp)
    6400:	|                 |      pea 15818 <custom.c.64ca0e9f+0xb42>
    6406:	|                 |      jsr 13db8 <KPrintF>
    640c:	|                 |      addq.l #8,sp
		return FALSE;
    640e:	|                 |      clr.w d0
    6410:	+-----------------|----- bra.w 6676 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    6414:	|                 \----> move.l 190e2 <bigDataFile>,492(sp)
    641c:	|                        move.l 19102 <DOSBase>,d0
    6422:	|                        movea.l d0,a6
    6424:	|                        move.l 492(sp),d1
    6428:	|                        jsr -306(a6)
    642c:	|                        move.l d0,488(sp)
    6430:	|                        move.l 488(sp),d0
    6434:	|                        move.l d0,19162 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    643a:	|                        clr.l 544(sp)
    643e:	|                    /-- bra.s 646a <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    6440:	|                 /--|-> move.l 190e2 <bigDataFile>,d0
    6446:	|                 |  |   move.l d0,-(sp)
    6448:	|                 |  |   jsr 6bc <get2bytes>
    644e:	|                 |  |   addq.l #4,sp
    6450:	|                 |  |   move.l 544(sp),d1
    6454:	|                 |  |   add.l d1,d1
    6456:	|                 |  |   add.l d1,d1
    6458:	|                 |  |   lea 540(sp),a0
    645c:	|                 |  |   add.l a0,d1
    645e:	|                 |  |   movea.l d1,a0
    6460:	|                 |  |   lea -144(a0),a0
    6464:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6466:	|                 |  |   addq.l #1,544(sp)
    646a:	|                 |  \-> move.l 19162 <zBuffer+0x8>,d0
    6470:	|                 |      cmp.l 544(sp),d0
    6474:	|                 \----- bhi.s 6440 <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    6476:	|                        move.l 19162 <zBuffer+0x8>,d0
    647c:	|                        move.l d0,-(sp)
    647e:	|                        move.l sp,d0
    6480:	|                        addi.l #336,d0
    6486:	|                        move.l d0,-(sp)
    6488:	|                        move.l sp,d0
    648a:	|                        addi.l #404,d0
    6490:	|                        move.l d0,-(sp)
    6492:	|                        jsr 6680 <sortZPal>
    6498:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    649c:	|                        clr.l 544(sp)
    64a0:	|                    /-- bra.s 6518 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    64a2:	|                 /--|-> move.l 544(sp),d0
    64a6:	|                 |  |   add.l d0,d0
    64a8:	|                 |  |   add.l d0,d0
    64aa:	|                 |  |   move.l #540,d1
    64b0:	|                 |  |   add.l sp,d1
    64b2:	|                 |  |   add.l d1,d0
    64b4:	|                 |  |   movea.l d0,a0
    64b6:	|                 |  |   lea -208(a0),a0
    64ba:	|                 |  |   move.l (a0),d0
    64bc:	|                 |  |   add.l d0,d0
    64be:	|                 |  |   add.l d0,d0
    64c0:	|                 |  |   lea 540(sp),a0
    64c4:	|                 |  |   add.l a0,d0
    64c6:	|                 |  |   movea.l d0,a0
    64c8:	|                 |  |   lea -144(a0),a0
    64cc:	|                 |  |   move.l (a0),d0
    64ce:	|                 |  |   move.l 544(sp),d1
    64d2:	|                 |  |   addq.l #3,d1
    64d4:	|                 |  |   add.l d1,d1
    64d6:	|                 |  |   movea.l d1,a1
    64d8:	|                 |  |   adda.l d1,a1
    64da:	|                 |  |   lea 1915a <zBuffer>,a0
    64e0:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    64e4:	|                 |  |   move.l 544(sp),d0
    64e8:	|                 |  |   add.l d0,d0
    64ea:	|                 |  |   add.l d0,d0
    64ec:	|                 |  |   move.l #540,d1
    64f2:	|                 |  |   add.l sp,d1
    64f4:	|                 |  |   add.l d1,d0
    64f6:	|                 |  |   movea.l d0,a0
    64f8:	|                 |  |   lea -208(a0),a0
    64fc:	|                 |  |   move.l (a0),d1
    64fe:	|                 |  |   move.l 544(sp),d0
    6502:	|                 |  |   add.l d1,d1
    6504:	|                 |  |   add.l d1,d1
    6506:	|                 |  |   lea 540(sp),a0
    650a:	|                 |  |   add.l a0,d1
    650c:	|                 |  |   movea.l d1,a0
    650e:	|                 |  |   lea -272(a0),a0
    6512:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6514:	|                 |  |   addq.l #1,544(sp)
    6518:	|                 |  \-> move.l 19162 <zBuffer+0x8>,d0
    651e:	|                 |      cmp.l 544(sp),d0
    6522:	|                 \----- bhi.w 64a2 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    6526:	|                        move.l 191ea <sceneWidth>,d0
    652c:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    6530:	|                        move.l 191ee <sceneHeight>,d0
    6536:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    653a:	|                        move.l 484(sp),-(sp)
    653e:	|                        move.l 484(sp),-(sp)
    6542:	|                        jsr 14776 <__mulsi3>
    6548:	|                        addq.l #8,sp
    654a:	|                        move.l d0,476(sp)
    654e:	|                        clr.l 472(sp)
    6552:	|                        move.l 190fa <SysBase>,d0
    6558:	|                        movea.l d0,a6
    655a:	|                        move.l 476(sp),d0
    655e:	|                        move.l 472(sp),d1
    6562:	|                        jsr -684(a6)
    6566:	|                        move.l d0,468(sp)
    656a:	|                        move.l 468(sp),d0
    656e:	|                        move.l d0,191aa <zBuffer+0x50>
	if (!zBuffer.tex) {
    6574:	|                        move.l 191aa <zBuffer+0x50>,d0
    657a:	|                    /-- bne.s 6590 <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    657c:	|                    |   pea 15855 <custom.c.64ca0e9f+0xb7f>
    6582:	|                    |   jsr 13db8 <KPrintF>
    6588:	|                    |   addq.l #4,sp
		return FALSE;
    658a:	|                    |   clr.w d0
    658c:	+--------------------|-- bra.w 6676 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    6590:	|                    \-> clr.l 544(sp)
    6594:	|     /----------------- bra.w 6660 <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    6598:	|  /--|----------------> clr.l 536(sp)
    659c:	|  |  |     /----------- bra.w 664c <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    65a0:	|  |  |  /--|----------> tst.l 528(sp)
    65a4:	|  |  |  |  |  /-------- bne.s 6602 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    65a6:	|  |  |  |  |  |         move.l 190e2 <bigDataFile>,464(sp)
    65ae:	|  |  |  |  |  |         move.l 19102 <DOSBase>,d0
    65b4:	|  |  |  |  |  |         movea.l d0,a6
    65b6:	|  |  |  |  |  |         move.l 464(sp),d1
    65ba:	|  |  |  |  |  |         jsr -306(a6)
    65be:	|  |  |  |  |  |         move.l d0,460(sp)
    65c2:	|  |  |  |  |  |         move.l 460(sp),d0
    65c6:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    65ca:	|  |  |  |  |  |         move.l 532(sp),d0
    65ce:	|  |  |  |  |  |         asr.l #4,d0
    65d0:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    65d4:	|  |  |  |  |  |         moveq #15,d0
    65d6:	|  |  |  |  |  |         cmp.l 528(sp),d0
    65da:	|  |  |  |  |  |  /----- bne.s 65f8 <setZBuffer+0x394>
    65dc:	|  |  |  |  |  |  |      move.l 190e2 <bigDataFile>,d0
    65e2:	|  |  |  |  |  |  |      move.l d0,-(sp)
    65e4:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    65ea:	|  |  |  |  |  |  |      addq.l #4,sp
    65ec:	|  |  |  |  |  |  |      movea.l d0,a0
    65ee:	|  |  |  |  |  |  |      lea 16(a0),a0
    65f2:	|  |  |  |  |  |  |      move.l a0,528(sp)
    65f6:	|  |  |  |  |  |  |  /-- bra.s 65fc <setZBuffer+0x398>
				else stillToGo ++;
    65f8:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    65fc:	|  |  |  |  |  |     \-> moveq #15,d1
    65fe:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    6602:	|  |  |  |  |  \-------> move.l 532(sp),d0
    6606:	|  |  |  |  |            add.l d0,d0
    6608:	|  |  |  |  |            add.l d0,d0
    660a:	|  |  |  |  |            lea 540(sp),a0
    660e:	|  |  |  |  |            add.l a0,d0
    6610:	|  |  |  |  |            movea.l d0,a0
    6612:	|  |  |  |  |            lea -272(a0),a0
    6616:	|  |  |  |  |            move.l (a0),d0
    6618:	|  |  |  |  |            move.l d0,d2
    661a:	|  |  |  |  |            move.l 191aa <zBuffer+0x50>,d3
    6620:	|  |  |  |  |            move.l 484(sp),d0
    6624:	|  |  |  |  |            move.l 544(sp),-(sp)
    6628:	|  |  |  |  |            move.l d0,-(sp)
    662a:	|  |  |  |  |            jsr 14776 <__mulsi3>
    6630:	|  |  |  |  |            addq.l #8,sp
    6632:	|  |  |  |  |            move.l d0,d1
    6634:	|  |  |  |  |            move.l 536(sp),d0
    6638:	|  |  |  |  |            add.l d1,d0
    663a:	|  |  |  |  |            movea.l d3,a0
    663c:	|  |  |  |  |            adda.l d0,a0
    663e:	|  |  |  |  |            move.b d2,d0
    6640:	|  |  |  |  |            lsl.b #4,d0
    6642:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    6644:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    6648:	|  |  |  |  |            addq.l #1,536(sp)
    664c:	|  |  |  |  \----------> move.l 536(sp),d1
    6650:	|  |  |  |               move.l 191ea <sceneWidth>,d0
    6656:	|  |  |  |               cmp.l d1,d0
    6658:	|  |  |  \-------------- bhi.w 65a0 <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    665c:	|  |  |                  addq.l #1,544(sp)
    6660:	|  |  \----------------> move.l 191ee <sceneHeight>,d0
    6666:	|  |                     cmp.l 544(sp),d0
    666a:	|  \-------------------- bhi.w 6598 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    666e:	|                        jsr 4772 <finishAccess>
	
	return TRUE;
    6674:	|                        moveq #1,d0
}
    6676:	\----------------------> movem.l (sp)+,d2-d3/a6
    667a:	                         lea 528(sp),sp
    667e:	                         rts

00006680 <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    6680:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    6682:	             clr.l 4(sp)
    6686:	         /-- bra.s 669e <sortZPal+0x1e>
		newpal[i] = i;
    6688:	      /--|-> move.l 4(sp),d0
    668c:	      |  |   add.l d0,d0
    668e:	      |  |   add.l d0,d0
    6690:	      |  |   movea.l 16(sp),a0
    6694:	      |  |   adda.l d0,a0
    6696:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    669a:	      |  |   addq.l #1,4(sp)
    669e:	      |  \-> move.l 4(sp),d0
    66a2:	      |      cmp.l 20(sp),d0
    66a6:	      \----- blt.s 6688 <sortZPal+0x8>
	}

	if (size < 2) return;		
    66a8:	             moveq #1,d0
    66aa:	             cmp.l 20(sp),d0
    66ae:	/----------- bge.w 6760 <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    66b2:	|            moveq #1,d0
    66b4:	|            move.l d0,4(sp)
    66b8:	|     /----- bra.w 6752 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    66bc:	|  /--|----> move.l 4(sp),d0
    66c0:	|  |  |      add.l d0,d0
    66c2:	|  |  |      add.l d0,d0
    66c4:	|  |  |      movea.l 16(sp),a0
    66c8:	|  |  |      adda.l d0,a0
    66ca:	|  |  |      move.l (a0),d0
    66cc:	|  |  |      add.l d0,d0
    66ce:	|  |  |      add.l d0,d0
    66d0:	|  |  |      movea.l 12(sp),a0
    66d4:	|  |  |      adda.l d0,a0
    66d6:	|  |  |      move.l (a0),d1
    66d8:	|  |  |      move.l 4(sp),d0
    66dc:	|  |  |      addi.l #1073741823,d0
    66e2:	|  |  |      add.l d0,d0
    66e4:	|  |  |      add.l d0,d0
    66e6:	|  |  |      movea.l 16(sp),a0
    66ea:	|  |  |      adda.l d0,a0
    66ec:	|  |  |      move.l (a0),d0
    66ee:	|  |  |      add.l d0,d0
    66f0:	|  |  |      add.l d0,d0
    66f2:	|  |  |      movea.l 12(sp),a0
    66f6:	|  |  |      adda.l d0,a0
    66f8:	|  |  |      move.l (a0),d0
    66fa:	|  |  |      cmp.l d1,d0
    66fc:	|  |  |  /-- ble.s 674e <sortZPal+0xce>
			tmp = newpal[i];
    66fe:	|  |  |  |   move.l 4(sp),d0
    6702:	|  |  |  |   add.l d0,d0
    6704:	|  |  |  |   add.l d0,d0
    6706:	|  |  |  |   movea.l 16(sp),a0
    670a:	|  |  |  |   adda.l d0,a0
    670c:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    670e:	|  |  |  |   move.l 4(sp),d0
    6712:	|  |  |  |   addi.l #1073741823,d0
    6718:	|  |  |  |   add.l d0,d0
    671a:	|  |  |  |   add.l d0,d0
    671c:	|  |  |  |   movea.l 16(sp),a1
    6720:	|  |  |  |   adda.l d0,a1
    6722:	|  |  |  |   move.l 4(sp),d0
    6726:	|  |  |  |   add.l d0,d0
    6728:	|  |  |  |   add.l d0,d0
    672a:	|  |  |  |   movea.l 16(sp),a0
    672e:	|  |  |  |   adda.l d0,a0
    6730:	|  |  |  |   move.l (a1),d0
    6732:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    6734:	|  |  |  |   move.l 4(sp),d0
    6738:	|  |  |  |   addi.l #1073741823,d0
    673e:	|  |  |  |   add.l d0,d0
    6740:	|  |  |  |   add.l d0,d0
    6742:	|  |  |  |   movea.l 16(sp),a0
    6746:	|  |  |  |   adda.l d0,a0
    6748:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    674a:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    674e:	|  |  |  \-> addq.l #1,4(sp)
    6752:	|  |  \----> move.l 4(sp),d0
    6756:	|  |         cmp.l 20(sp),d0
    675a:	|  \-------- blt.w 66bc <sortZPal+0x3c>
    675e:	|        /-- bra.s 6762 <sortZPal+0xe2>
	if (size < 2) return;		
    6760:	\--------|-> nop
		}
	}
    6762:	         \-> addq.l #8,sp
    6764:	             rts

00006766 <loadSpriteBank>:
#include "sprites.h"
#include "fileset.h"
#include "moreio.h"
#include "support/gcc8_c_support.h"

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    6766:	             lea -84(sp),sp
    676a:	             movem.l d2-d4/a2/a6,-(sp)
    676e:	             move.l 116(sp),d0
    6772:	             move.w d0,d0
    6774:	             move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, spriteBankVersion = 0, howmany = 0, startIndex = 0;
    6778:	             clr.l 96(sp)
    677c:	             clr.l 92(sp)
    6780:	             clr.l 88(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    6784:	             clr.l 84(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    6788:	             move.l 108(sp),-(sp)
    678c:	             jsr 487a <openFileFromNum>
    6792:	             addq.l #4,sp
    6794:	             tst.l d0
    6796:	         /-- bne.s 67ac <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    6798:	         |   pea 15878 <custom.c.64ca0e9f+0xba2>
    679e:	         |   jsr 13db8 <KPrintF>
    67a4:	         |   addq.l #4,sp
		return FALSE;
    67a6:	         |   clr.w d0
    67a8:	/--------|-- bra.w 6a72 <loadSpriteBank+0x30c>
	}

	loadhere->isFont = isFont;
    67ac:	|        \-> movea.l 112(sp),a0
    67b0:	|            move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    67b6:	|            move.l 190e2 <bigDataFile>,d0
    67bc:	|            move.l d0,-(sp)
    67be:	|            jsr 6bc <get2bytes>
    67c4:	|            addq.l #4,sp
	spriteBankVersion = FGetC(bigDataFile);
    67c6:	|            move.l 190e2 <bigDataFile>,80(sp)
    67ce:	|            move.l 19102 <DOSBase>,d0
    67d4:	|            movea.l d0,a6
    67d6:	|            move.l 80(sp),d1
    67da:	|            jsr -306(a6)
    67de:	|            move.l d0,76(sp)
    67e2:	|            move.l 76(sp),d0
    67e6:	|            move.l d0,96(sp)
	total = get2bytes(bigDataFile);
    67ea:	|            move.l 190e2 <bigDataFile>,d0
    67f0:	|            move.l d0,-(sp)
    67f2:	|            jsr 6bc <get2bytes>
    67f8:	|            addq.l #4,sp
    67fa:	|            move.l d0,72(sp)

	if (total <= 0) {
    67fe:	|        /-- bgt.s 6814 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    6800:	|        |   pea 158a6 <custom.c.64ca0e9f+0xbd0>
    6806:	|        |   jsr 13db8 <KPrintF>
    680c:	|        |   addq.l #4,sp
		return FALSE;
    680e:	|        |   clr.w d0
    6810:	+--------|-- bra.w 6a72 <loadSpriteBank+0x30c>
	}
	if (spriteBankVersion > 3) {
    6814:	|        \-> moveq #3,d0
    6816:	|            cmp.l 96(sp),d0
    681a:	|        /-- bge.s 6830 <loadSpriteBank+0xca>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    681c:	|        |   pea 158e6 <custom.c.64ca0e9f+0xc10>
    6822:	|        |   jsr 13db8 <KPrintF>
    6828:	|        |   addq.l #4,sp
		return FALSE;
    682a:	|        |   clr.w d0
    682c:	+--------|-- bra.w 6a72 <loadSpriteBank+0x30c>
	}

	loadhere->total = total;
    6830:	|        \-> movea.l 112(sp),a0
    6834:	|            move.l 72(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    6838:	|            move.l 72(sp),d1
    683c:	|            move.l d1,d0
    683e:	|            lsl.l #3,d0
    6840:	|            sub.l d1,d0
    6842:	|            add.l d0,d0
    6844:	|            add.l d0,d0
    6846:	|            move.l d0,68(sp)
    684a:	|            clr.l 64(sp)
    684e:	|            move.l 190fa <SysBase>,d0
    6854:	|            movea.l d0,a6
    6856:	|            move.l 68(sp),d0
    685a:	|            move.l 64(sp),d1
    685e:	|            jsr -684(a6)
    6862:	|            move.l d0,60(sp)
    6866:	|            move.l 60(sp),d0
    686a:	|            movea.l 112(sp),a0
    686e:	|            move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    6872:	|            movea.l 112(sp),a0
    6876:	|            move.l 8(a0),d0
    687a:	|        /-- bne.s 6882 <loadSpriteBank+0x11c>
    687c:	|        |   clr.w d0
    687e:	+--------|-- bra.w 6a72 <loadSpriteBank+0x30c>
	
	startIndex = 1;
    6882:	|        \-> moveq #1,d0
    6884:	|            move.l d0,88(sp)

	for (i = 0; i < total; i++) {
    6888:	|            clr.l 100(sp)
    688c:	|     /----- bra.w 6a5e <loadSpriteBank+0x2f8>
		loadhere->sprites[i].width = get2bytes(bigDataFile);
    6890:	|  /--|----> movea.l 190e2 <bigDataFile>,a1
    6896:	|  |  |      movea.l 112(sp),a0
    689a:	|  |  |      movea.l 8(a0),a0
    689e:	|  |  |      move.l 100(sp),d1
    68a2:	|  |  |      move.l d1,d0
    68a4:	|  |  |      lsl.l #3,d0
    68a6:	|  |  |      sub.l d1,d0
    68a8:	|  |  |      add.l d0,d0
    68aa:	|  |  |      add.l d0,d0
    68ac:	|  |  |      lea (0,a0,d0.l),a2
    68b0:	|  |  |      move.l a1,-(sp)
    68b2:	|  |  |      jsr 6bc <get2bytes>
    68b8:	|  |  |      addq.l #4,sp
    68ba:	|  |  |      move.l d0,(a2)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    68bc:	|  |  |      movea.l 190e2 <bigDataFile>,a1
    68c2:	|  |  |      movea.l 112(sp),a0
    68c6:	|  |  |      movea.l 8(a0),a0
    68ca:	|  |  |      move.l 100(sp),d1
    68ce:	|  |  |      move.l d1,d0
    68d0:	|  |  |      lsl.l #3,d0
    68d2:	|  |  |      sub.l d1,d0
    68d4:	|  |  |      add.l d0,d0
    68d6:	|  |  |      add.l d0,d0
    68d8:	|  |  |      lea (0,a0,d0.l),a2
    68dc:	|  |  |      move.l a1,-(sp)
    68de:	|  |  |      jsr 6bc <get2bytes>
    68e4:	|  |  |      addq.l #4,sp
    68e6:	|  |  |      move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    68ea:	|  |  |      movea.l 190e2 <bigDataFile>,a1
    68f0:	|  |  |      movea.l 112(sp),a0
    68f4:	|  |  |      movea.l 8(a0),a0
    68f8:	|  |  |      move.l 100(sp),d1
    68fc:	|  |  |      move.l d1,d0
    68fe:	|  |  |      lsl.l #3,d0
    6900:	|  |  |      sub.l d1,d0
    6902:	|  |  |      add.l d0,d0
    6904:	|  |  |      add.l d0,d0
    6906:	|  |  |      lea (0,a0,d0.l),a2
    690a:	|  |  |      move.l a1,-(sp)
    690c:	|  |  |      jsr 6bc <get2bytes>
    6912:	|  |  |      addq.l #4,sp
    6914:	|  |  |      move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    6918:	|  |  |      movea.l 190e2 <bigDataFile>,a1
    691e:	|  |  |      movea.l 112(sp),a0
    6922:	|  |  |      movea.l 8(a0),a0
    6926:	|  |  |      move.l 100(sp),d1
    692a:	|  |  |      move.l d1,d0
    692c:	|  |  |      lsl.l #3,d0
    692e:	|  |  |      sub.l d1,d0
    6930:	|  |  |      add.l d0,d0
    6932:	|  |  |      add.l d0,d0
    6934:	|  |  |      lea (0,a0,d0.l),a2
    6938:	|  |  |      move.l a1,-(sp)
    693a:	|  |  |      jsr 6bc <get2bytes>
    6940:	|  |  |      addq.l #4,sp
    6942:	|  |  |      move.l d0,12(a2)

		// ToDo Load Data
		UWORD size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    6946:	|  |  |      movea.l 112(sp),a0
    694a:	|  |  |      movea.l 8(a0),a0
    694e:	|  |  |      move.l 100(sp),d1
    6952:	|  |  |      move.l d1,d0
    6954:	|  |  |      lsl.l #3,d0
    6956:	|  |  |      sub.l d1,d0
    6958:	|  |  |      add.l d0,d0
    695a:	|  |  |      add.l d0,d0
    695c:	|  |  |      adda.l d0,a0
    695e:	|  |  |      move.l (a0),d0
    6960:	|  |  |  /-- bpl.s 6964 <loadSpriteBank+0x1fe>
    6962:	|  |  |  |   addq.l #7,d0
    6964:	|  |  |  \-> asr.l #3,d0
    6966:	|  |  |      move.l d0,d2
    6968:	|  |  |      movea.l 112(sp),a0
    696c:	|  |  |      movea.l 8(a0),a0
    6970:	|  |  |      move.l 100(sp),d1
    6974:	|  |  |      move.l d1,d0
    6976:	|  |  |      lsl.l #3,d0
    6978:	|  |  |      sub.l d1,d0
    697a:	|  |  |      add.l d0,d0
    697c:	|  |  |      add.l d0,d0
    697e:	|  |  |      adda.l d0,a0
    6980:	|  |  |      move.l 4(a0),d0
    6984:	|  |  |      move.l d0,d0
    6986:	|  |  |      move.w d2,d1
    6988:	|  |  |      muls.w d0,d1
    698a:	|  |  |      move.w d1,d0
    698c:	|  |  |      add.w d0,d0
    698e:	|  |  |      add.w d1,d0
    6990:	|  |  |      add.w d0,d0
    6992:	|  |  |      move.w d0,58(sp)
		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    6996:	|  |  |      moveq #0,d0
    6998:	|  |  |      move.w 58(sp),d0
    699c:	|  |  |      add.l d0,d0
    699e:	|  |  |      move.l d0,54(sp)
    69a2:	|  |  |      moveq #2,d0
    69a4:	|  |  |      move.l d0,50(sp)
    69a8:	|  |  |      move.l 190fa <SysBase>,d0
    69ae:	|  |  |      movea.l d0,a6
    69b0:	|  |  |      move.l 54(sp),d0
    69b4:	|  |  |      move.l 50(sp),d1
    69b8:	|  |  |      jsr -684(a6)
    69bc:	|  |  |      move.l d0,46(sp)
    69c0:	|  |  |      movea.l 46(sp),a1
    69c4:	|  |  |      movea.l 112(sp),a0
    69c8:	|  |  |      movea.l 8(a0),a0
    69cc:	|  |  |      move.l 100(sp),d1
    69d0:	|  |  |      move.l d1,d0
    69d2:	|  |  |      lsl.l #3,d0
    69d4:	|  |  |      sub.l d1,d0
    69d6:	|  |  |      add.l d0,d0
    69d8:	|  |  |      add.l d0,d0
    69da:	|  |  |      adda.l d0,a0
    69dc:	|  |  |      move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    69e0:	|  |  |      move.l 190e2 <bigDataFile>,42(sp)
    69e8:	|  |  |      movea.l 112(sp),a0
    69ec:	|  |  |      movea.l 8(a0),a0
    69f0:	|  |  |      move.l 100(sp),d1
    69f4:	|  |  |      move.l d1,d0
    69f6:	|  |  |      lsl.l #3,d0
    69f8:	|  |  |      sub.l d1,d0
    69fa:	|  |  |      add.l d0,d0
    69fc:	|  |  |      add.l d0,d0
    69fe:	|  |  |      adda.l d0,a0
    6a00:	|  |  |      move.l 24(a0),38(sp)
    6a06:	|  |  |      moveq #2,d0
    6a08:	|  |  |      move.l d0,34(sp)
    6a0c:	|  |  |      move.w 58(sp),d0
    6a10:	|  |  |      lsr.w #1,d0
    6a12:	|  |  |      move.w d0,d0
    6a14:	|  |  |      andi.l #65535,d0
    6a1a:	|  |  |      move.l d0,30(sp)
    6a1e:	|  |  |      move.l 19102 <DOSBase>,d0
    6a24:	|  |  |      movea.l d0,a6
    6a26:	|  |  |      move.l 42(sp),d1
    6a2a:	|  |  |      move.l 38(sp),d2
    6a2e:	|  |  |      move.l 34(sp),d3
    6a32:	|  |  |      move.l 30(sp),d4
    6a36:	|  |  |      jsr -324(a6)
    6a3a:	|  |  |      move.l d0,26(sp)
    6a3e:	|  |  |      move.l 26(sp),d0
    6a42:	|  |  |      move.w d0,24(sp)
		if (!count) {
    6a46:	|  |  |  /-- bne.s 6a5a <loadSpriteBank+0x2f4>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    6a48:	|  |  |  |   pea 1591b <custom.c.64ca0e9f+0xc45>
    6a4e:	|  |  |  |   jsr 13db8 <KPrintF>
    6a54:	|  |  |  |   addq.l #4,sp
			return FALSE;
    6a56:	|  |  |  |   clr.w d0
    6a58:	+--|--|--|-- bra.s 6a72 <loadSpriteBank+0x30c>
	for (i = 0; i < total; i++) {
    6a5a:	|  |  |  \-> addq.l #1,100(sp)
    6a5e:	|  |  \----> move.l 100(sp),d0
    6a62:	|  |         cmp.l 72(sp),d0
    6a66:	|  \-------- blt.w 6890 <loadSpriteBank+0x12a>
		}
	}

	finishAccess ();
    6a6a:	|            jsr 4772 <finishAccess>

	return TRUE;
    6a70:	|            moveq #1,d0
}
    6a72:	\----------> movem.l (sp)+,d2-d4/a2/a6
    6a76:	             lea 84(sp),sp
    6a7a:	             rts

00006a7c <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    6a7c:	subq.l #8,sp
    6a7e:	move.l d2,-(sp)
    6a80:	move.l 24(sp),d0
    6a84:	move.w d0,d0
    6a86:	move.w d0,6(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    6a8a:	movea.l 20(sp),a0
    6a8e:	move.l (a0),d0
    6a90:	move.l d0,-(sp)
    6a92:	jsr 14554 <__fixunssfsi>
    6a98:	addq.l #4,sp
    6a9a:	move.l d0,d0
    6a9c:	movea.l 16(sp),a0
    6aa0:	move.l 8(a0),d1
    6aa4:	move.l d1,d1
    6aa6:	movea.w d0,a0
    6aa8:	suba.w d1,a0
    6aaa:	move.w a0,10(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;
    6aae:	movea.l 20(sp),a0
    6ab2:	move.l 4(a0),d0
    6ab6:	move.l d0,-(sp)
    6ab8:	jsr 14554 <__fixunssfsi>
    6abe:	addq.l #4,sp
    6ac0:	move.l d0,d0
    6ac2:	movea.l 16(sp),a0
    6ac6:	move.l 12(a0),d1
    6aca:	move.l d1,d1
    6acc:	movea.w d0,a0
    6ace:	suba.w d1,a0
    6ad0:	move.w a0,8(sp)

	CstScaleSprite( single, (UWORD) thisPerson->x, (UWORD) thisPerson->y);
    6ad4:	movea.l 20(sp),a0
    6ad8:	move.l 4(a0),d0
    6adc:	move.l d0,-(sp)
    6ade:	jsr 14554 <__fixunssfsi>
    6ae4:	addq.l #4,sp
    6ae6:	move.l d0,d0
    6ae8:	moveq #0,d2
    6aea:	move.w d0,d2
    6aec:	movea.l 20(sp),a0
    6af0:	move.l (a0),d0
    6af2:	move.l d0,-(sp)
    6af4:	jsr 14554 <__fixunssfsi>
    6afa:	addq.l #4,sp
    6afc:	move.l d0,d0
    6afe:	move.w d0,d0
    6b00:	andi.l #65535,d0
    6b06:	move.l d2,-(sp)
    6b08:	move.l d0,-(sp)
    6b0a:	move.l 24(sp),-(sp)
    6b0e:	jsr 1608 <CstScaleSprite>
    6b14:	lea 12(sp),sp
	//KPrintF("scaleSprite: This function is not implemented yet");
    6b18:	nop
    6b1a:	move.l (sp)+,d2
    6b1c:	addq.l #8,sp
    6b1e:	rts

00006b20 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    6b20:	    move.l 4(sp),d0
    6b24:	/-- bpl.s 6b28 <TF_abs+0x8>
    6b26:	|   neg.l d0
}
    6b28:	\-> rts

00006b2a <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    6b2a:	             lea -28(sp),sp
    6b2e:	             move.l a6,-(sp)
    6b30:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    6b32:	             moveq #120,d0
    6b34:	             move.l d0,28(sp)
    6b38:	             clr.l 24(sp)
    6b3c:	             move.l 190fa <SysBase>,d0
    6b42:	             movea.l d0,a6
    6b44:	             move.l 28(sp),d0
    6b48:	             move.l 24(sp),d1
    6b4c:	             jsr -684(a6)
    6b50:	             move.l d0,20(sp)
    6b54:	             move.l 20(sp),d0
    6b58:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    6b5c:	         /-- bne.s 6b64 <addPerson+0x3a>
    6b5e:	         |   clr.w d0
    6b60:	/--------|-- bra.w 6d94 <addPerson+0x26a>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    6b64:	|        \-> move.l 48(sp),-(sp)
    6b68:	|            jsr ac96 <loadObjectType>
    6b6e:	|            addq.l #4,sp
    6b70:	|            movea.l 16(sp),a0
    6b74:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    6b78:	|            movea.l 16(sp),a0
    6b7c:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    6b84:	|            movea.l 16(sp),a0
    6b88:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    6b8c:	|            movea.l 16(sp),a0
    6b90:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    6b94:	|            move.l 44(sp),-(sp)
    6b98:	|            jsr 141f4 <__floatsisf>
    6b9e:	|            addq.l #4,sp
    6ba0:	|            move.l d0,d2
    6ba2:	|            move.l 40(sp),-(sp)
    6ba6:	|            jsr 141f4 <__floatsisf>
    6bac:	|            addq.l #4,sp
    6bae:	|            move.l d2,-(sp)
    6bb0:	|            move.l d0,-(sp)
    6bb2:	|            move.l 24(sp),-(sp)
    6bb6:	|            jsr 85a2 <moveAndScale>
    6bbc:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    6bc0:	|            movea.l 16(sp),a0
    6bc4:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    6bc8:	|            movea.l 16(sp),a0
    6bcc:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    6bd2:	|            movea.l 16(sp),a0
    6bd6:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    6bdc:	|            movea.l 16(sp),a0
    6be0:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    6be4:	|            movea.l 16(sp),a0
    6be8:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    6bec:	|            movea.l 16(sp),a0
    6bf0:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    6bf6:	|            movea.l 16(sp),a0
    6bfa:	|            clr.l 94(a0)
    newPerson->angle = 180;
    6bfe:	|            movea.l 16(sp),a0
    6c02:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    6c0a:	|            movea.l 16(sp),a0
    6c0e:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    6c16:	|            movea.l 16(sp),a0
    6c1a:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    6c1e:	|            movea.l 16(sp),a0
    6c22:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    6c26:	|            movea.l 16(sp),a0
    6c2a:	|            movea.l 102(a0),a0
    6c2e:	|            move.l 24(a0),d0
    6c32:	|            movea.l 16(sp),a0
    6c36:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    6c3a:	|            movea.l 16(sp),a0
    6c3e:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    6c42:	|            movea.l 16(sp),a0
    6c46:	|            movea.l 102(a0),a0
    6c4a:	|            move.l 32(a0),d0
    6c4e:	|            movea.l 16(sp),a0
    6c52:	|            move.l d0,110(a0)
    newPerson->r = 0;
    6c56:	|            movea.l 16(sp),a0
    6c5a:	|            clr.b 114(a0)
    newPerson->g = 0;
    6c5e:	|            movea.l 16(sp),a0
    6c62:	|            clr.b 115(a0)
    newPerson->b = 0;
    6c66:	|            movea.l 16(sp),a0
    6c6a:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    6c6e:	|            movea.l 16(sp),a0
    6c72:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    6c76:	|            movea.l 16(sp),a0
    6c7a:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    6c7e:	|            movea.l 16(sp),a0
    6c82:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    6c88:	|            clr.l -(sp)
    6c8a:	|            move.l 20(sp),-(sp)
    6c8e:	|            jsr 5c60 <setFrames>
    6c94:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    6c96:	|            movea.l 52(sp),a0
    6c9a:	|            movea.l (a0),a0
    6c9c:	|            movea.l (a0),a0
    6c9e:	|            movea.l 4(a0),a0
    6ca2:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    6ca6:	|     /----- bpl.s 6cb0 <addPerson+0x186>
    6ca8:	|     |      move.l 12(sp),d0
    6cac:	|     |      neg.l d0
    6cae:	|     |  /-- bra.s 6cb2 <addPerson+0x188>
    6cb0:	|     \--|-> moveq #1,d0
    6cb2:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    6cb6:	|            movea.l 52(sp),a0
    6cba:	|            movea.l (a0),a0
    6cbc:	|            movea.l (a0),a0
    6cbe:	|            movea.l (a0),a0
    6cc0:	|            move.l 8(a0),d0
    6cc4:	|            cmp.l 8(sp),d0
    6cc8:	|     /----- bgt.s 6cfa <addPerson+0x1d0>
        if (fNumSigned < 0) {
    6cca:	|     |      tst.l 12(sp)
    6cce:	|     |  /-- bge.s 6cdc <addPerson+0x1b2>
            newPerson->height = 5;
    6cd0:	|     |  |   movea.l 16(sp),a0
    6cd4:	|     |  |   moveq #5,d1
    6cd6:	|     |  |   move.l d1,8(a0)
    6cda:	|  /--|--|-- bra.s 6d26 <addPerson+0x1fc>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    6cdc:	|  |  |  \-> movea.l 52(sp),a0
    6ce0:	|  |  |      movea.l (a0),a0
    6ce2:	|  |  |      movea.l (a0),a0
    6ce4:	|  |  |      movea.l (a0),a0
    6ce6:	|  |  |      movea.l 16(a0),a0
    6cea:	|  |  |      move.l 12(a0),d0
    6cee:	|  |  |      addq.l #5,d0
    6cf0:	|  |  |      movea.l 16(sp),a0
    6cf4:	|  |  |      move.l d0,8(a0)
    6cf8:	|  +--|----- bra.s 6d26 <addPerson+0x1fc>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    6cfa:	|  |  \----> movea.l 52(sp),a0
    6cfe:	|  |         movea.l (a0),a0
    6d00:	|  |         movea.l (a0),a0
    6d02:	|  |         movea.l (a0),a0
    6d04:	|  |         movea.l 16(a0),a0
    6d08:	|  |         move.l 8(sp),d1
    6d0c:	|  |         move.l d1,d0
    6d0e:	|  |         lsl.l #3,d0
    6d10:	|  |         sub.l d1,d0
    6d12:	|  |         add.l d0,d0
    6d14:	|  |         add.l d0,d0
    6d16:	|  |         adda.l d0,a0
    6d18:	|  |         move.l 12(a0),d0
    6d1c:	|  |         addq.l #5,d0
    6d1e:	|  |         movea.l 16(sp),a0
    6d22:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    6d26:	|  \-------> move.l #102834,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    6d2e:	|        /-- bra.s 6d3e <addPerson+0x214>
        changethat = &((*changethat)->next);
    6d30:	|     /--|-> movea.l 32(sp),a0
    6d34:	|     |  |   move.l (a0),d0
    6d36:	|     |  |   moveq #24,d1
    6d38:	|     |  |   add.l d0,d1
    6d3a:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    6d3e:	|     |  \-> movea.l 32(sp),a0
    6d42:	|     |      move.l (a0),d0
    6d44:	|     |  /-- beq.s 6d6c <addPerson+0x242>
    6d46:	|     |  |   movea.l 32(sp),a0
    6d4a:	|     |  |   movea.l (a0),a0
    6d4c:	|     |  |   move.l 4(a0),d2
    6d50:	|     |  |   move.l 44(sp),-(sp)
    6d54:	|     |  |   jsr 141f4 <__floatsisf>
    6d5a:	|     |  |   addq.l #4,sp
    6d5c:	|     |  |   move.l d0,-(sp)
    6d5e:	|     |  |   move.l d2,-(sp)
    6d60:	|     |  |   jsr 1441a <__ltsf2>
    6d66:	|     |  |   addq.l #8,sp
    6d68:	|     |  |   tst.l d0
    6d6a:	|     \--|-- blt.s 6d30 <addPerson+0x206>
    }

    newPerson->next = (*changethat);
    6d6c:	|        \-> movea.l 32(sp),a0
    6d70:	|            move.l (a0),d0
    6d72:	|            movea.l 16(sp),a0
    6d76:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    6d7a:	|            movea.l 32(sp),a0
    6d7e:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    6d82:	|            movea.l 16(sp),a0
    6d86:	|            move.l 102(a0),d0
    6d8a:	|            sne d0
    6d8c:	|            neg.b d0
    6d8e:	|            move.b d0,d0
    6d90:	|            andi.w #255,d0
}
    6d94:	\----------> move.l (sp)+,d2
    6d96:	             movea.l (sp)+,a6
    6d98:	             lea 28(sp),sp
    6d9c:	             rts

00006d9e <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    6d9e:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    6da0:	       move.l 8(sp),-(sp)
    6da4:	       jsr 7e5a <findPerson>
    6daa:	       addq.l #4,sp
    6dac:	       move.l d0,(sp)
    if (moveMe) {
    6dae:	/----- beq.s 6de2 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    6db0:	|      movea.l (sp),a0
    6db2:	|      move.l 56(a0),d0
    6db6:	|  /-- beq.s 6dc8 <animatePerson+0x2a>
    6db8:	|  |   movea.l (sp),a0
    6dba:	|  |   move.l 56(a0),d0
    6dbe:	|  |   move.l d0,-(sp)
    6dc0:	|  |   jsr 24da <abortFunction>
    6dc6:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    6dc8:	|  \-> movea.l (sp),a0
    6dca:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    6dce:	|      movea.l (sp),a0
    6dd0:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    6dd4:	|      movea.l (sp),a0
    6dd6:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    6dda:	|      movea.l (sp),a0
    6ddc:	|      move.l 12(sp),60(a0)
    }
}
    6de2:	\----> nop
    6de4:	       addq.l #4,sp
    6de6:	       rts

00006de8 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    6de8:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    6dea:	       move.l 8(sp),-(sp)
    6dee:	       jsr 7e5a <findPerson>
    6df4:	       addq.l #4,sp
    6df6:	       move.l d0,(sp)
    if (moveMe) {
    6df8:	/----- beq.s 6e3a <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    6dfa:	|      movea.l (sp),a0
    6dfc:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    6e00:	|      movea.l (sp),a0
    6e02:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    6e08:	|      move.l (sp),-(sp)
    6e0a:	|      jsr 86ec <rethinkAngle>
    6e10:	|      addq.l #4,sp
        if (moveMe->walking) {
    6e12:	|      movea.l (sp),a0
    6e14:	|      move.w 52(a0),d0
    6e18:	|  /-- beq.s 6e2c <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    6e1a:	|  |   pea 1 <_start+0x1>
    6e1e:	|  |   move.l 4(sp),-(sp)
    6e22:	|  |   jsr 5c60 <setFrames>
    6e28:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    6e2a:	+--|-- bra.s 6e3a <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    6e2c:	|  \-> clr.l -(sp)
    6e2e:	|      move.l 4(sp),-(sp)
    6e32:	|      jsr 5c60 <setFrames>
    6e38:	|      addq.l #8,sp
}
    6e3a:	\----> nop
    6e3c:	       addq.l #4,sp
    6e3e:	       rts

00006e40 <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    6e40:	             lea -36(sp),sp
    6e44:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    6e46:	             movea.l 44(sp),a0
    6e4a:	             move.l 8(a0),32(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    6e50:	             moveq #12,d0
    6e52:	             move.l d0,28(sp)
    6e56:	             clr.l 24(sp)
    6e5a:	             move.l 190fa <SysBase>,d0
    6e60:	             movea.l d0,a6
    6e62:	             move.l 28(sp),d0
    6e66:	             move.l 24(sp),d1
    6e6a:	             jsr -684(a6)
    6e6e:	             move.l d0,20(sp)
    6e72:	             move.l 20(sp),d0
    6e76:	             move.l d0,16(sp)
	if (!(newAnim)) {
    6e7a:	         /-- bne.s 6e90 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    6e7c:	         |   pea 1594e <custom.c.64ca0e9f+0xc78>
    6e82:	         |   jsr 13db8 <KPrintF>
    6e88:	         |   addq.l #4,sp
		return NULL;
    6e8a:	         |   moveq #0,d0
    6e8c:	/--------|-- bra.w 6fd2 <copyAnim+0x192>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    6e90:	|        \-> movea.l 44(sp),a0
    6e94:	|            move.l (a0),d0
    6e96:	|            movea.l 16(sp),a0
    6e9a:	|            move.l d0,(a0)
	newAnim -> numFrames		= num;
    6e9c:	|            movea.l 16(sp),a0
    6ea0:	|            move.l 32(sp),8(a0)

	if (num) {
    6ea6:	|  /-------- beq.w 6fc6 <copyAnim+0x186>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    6eaa:	|  |         move.l 32(sp),d1
    6eae:	|  |         move.l d1,d0
    6eb0:	|  |         add.l d0,d0
    6eb2:	|  |         add.l d1,d0
    6eb4:	|  |         add.l d0,d0
    6eb6:	|  |         add.l d0,d0
    6eb8:	|  |         move.l d0,12(sp)
    6ebc:	|  |         clr.l 8(sp)
    6ec0:	|  |         move.l 190fa <SysBase>,d0
    6ec6:	|  |         movea.l d0,a6
    6ec8:	|  |         move.l 12(sp),d0
    6ecc:	|  |         move.l 8(sp),d1
    6ed0:	|  |         jsr -684(a6)
    6ed4:	|  |         move.l d0,4(sp)
    6ed8:	|  |         move.l 4(sp),d0
    6edc:	|  |         movea.l 16(sp),a0
    6ee0:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    6ee4:	|  |         movea.l 16(sp),a0
    6ee8:	|  |         move.l 4(a0),d0
    6eec:	|  |     /-- bne.s 6f02 <copyAnim+0xc2>
			KPrintF("copyAnim: Cannot allocate memory");
    6eee:	|  |     |   pea 1594e <custom.c.64ca0e9f+0xc78>
    6ef4:	|  |     |   jsr 13db8 <KPrintF>
    6efa:	|  |     |   addq.l #4,sp
			return NULL;
    6efc:	|  |     |   moveq #0,d0
    6efe:	+--|-----|-- bra.w 6fd2 <copyAnim+0x192>
		}

		for (int a = 0; a < num; a ++) {
    6f02:	|  |     \-> clr.l 36(sp)
    6f06:	|  |     /-- bra.w 6fb8 <copyAnim+0x178>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    6f0a:	|  |  /--|-> movea.l 44(sp),a0
    6f0e:	|  |  |  |   movea.l 4(a0),a0
    6f12:	|  |  |  |   move.l 36(sp),d1
    6f16:	|  |  |  |   move.l d1,d0
    6f18:	|  |  |  |   add.l d0,d0
    6f1a:	|  |  |  |   add.l d1,d0
    6f1c:	|  |  |  |   add.l d0,d0
    6f1e:	|  |  |  |   add.l d0,d0
    6f20:	|  |  |  |   lea (0,a0,d0.l),a1
    6f24:	|  |  |  |   movea.l 16(sp),a0
    6f28:	|  |  |  |   movea.l 4(a0),a0
    6f2c:	|  |  |  |   move.l 36(sp),d1
    6f30:	|  |  |  |   move.l d1,d0
    6f32:	|  |  |  |   add.l d0,d0
    6f34:	|  |  |  |   add.l d1,d0
    6f36:	|  |  |  |   add.l d0,d0
    6f38:	|  |  |  |   add.l d0,d0
    6f3a:	|  |  |  |   adda.l d0,a0
    6f3c:	|  |  |  |   move.l (a1),d0
    6f3e:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    6f40:	|  |  |  |   movea.l 44(sp),a0
    6f44:	|  |  |  |   movea.l 4(a0),a0
    6f48:	|  |  |  |   move.l 36(sp),d1
    6f4c:	|  |  |  |   move.l d1,d0
    6f4e:	|  |  |  |   add.l d0,d0
    6f50:	|  |  |  |   add.l d1,d0
    6f52:	|  |  |  |   add.l d0,d0
    6f54:	|  |  |  |   add.l d0,d0
    6f56:	|  |  |  |   lea (0,a0,d0.l),a1
    6f5a:	|  |  |  |   movea.l 16(sp),a0
    6f5e:	|  |  |  |   movea.l 4(a0),a0
    6f62:	|  |  |  |   move.l 36(sp),d1
    6f66:	|  |  |  |   move.l d1,d0
    6f68:	|  |  |  |   add.l d0,d0
    6f6a:	|  |  |  |   add.l d1,d0
    6f6c:	|  |  |  |   add.l d0,d0
    6f6e:	|  |  |  |   add.l d0,d0
    6f70:	|  |  |  |   adda.l d0,a0
    6f72:	|  |  |  |   move.l 4(a1),d0
    6f76:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    6f7a:	|  |  |  |   movea.l 44(sp),a0
    6f7e:	|  |  |  |   movea.l 4(a0),a0
    6f82:	|  |  |  |   move.l 36(sp),d1
    6f86:	|  |  |  |   move.l d1,d0
    6f88:	|  |  |  |   add.l d0,d0
    6f8a:	|  |  |  |   add.l d1,d0
    6f8c:	|  |  |  |   add.l d0,d0
    6f8e:	|  |  |  |   add.l d0,d0
    6f90:	|  |  |  |   lea (0,a0,d0.l),a1
    6f94:	|  |  |  |   movea.l 16(sp),a0
    6f98:	|  |  |  |   movea.l 4(a0),a0
    6f9c:	|  |  |  |   move.l 36(sp),d1
    6fa0:	|  |  |  |   move.l d1,d0
    6fa2:	|  |  |  |   add.l d0,d0
    6fa4:	|  |  |  |   add.l d1,d0
    6fa6:	|  |  |  |   add.l d0,d0
    6fa8:	|  |  |  |   add.l d0,d0
    6faa:	|  |  |  |   adda.l d0,a0
    6fac:	|  |  |  |   move.l 8(a1),d0
    6fb0:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    6fb4:	|  |  |  |   addq.l #1,36(sp)
    6fb8:	|  |  |  \-> move.l 36(sp),d0
    6fbc:	|  |  |      cmp.l 32(sp),d0
    6fc0:	|  |  \----- blt.w 6f0a <copyAnim+0xca>
    6fc4:	|  |     /-- bra.s 6fce <copyAnim+0x18e>
		}
	} else {
		newAnim -> frames = NULL;
    6fc6:	|  \-----|-> movea.l 16(sp),a0
    6fca:	|        |   clr.l 4(a0)
	}

	return newAnim;
    6fce:	|        \-> move.l 16(sp),d0
}
    6fd2:	\----------> movea.l (sp)+,a6
    6fd4:	             lea 36(sp),sp
    6fd8:	             rts

00006fda <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    6fda:	                lea -44(sp),sp
    6fde:	                move.l a6,-(sp)
    6fe0:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    6fe2:	                moveq #12,d0
    6fe4:	                move.l d0,40(sp)
    6fe8:	                clr.l 36(sp)
    6fec:	                move.l 190fa <SysBase>,d0
    6ff2:	                movea.l d0,a6
    6ff4:	                move.l 40(sp),d0
    6ff8:	                move.l 36(sp),d1
    6ffc:	                jsr -684(a6)
    7000:	                move.l d0,32(sp)
    7004:	                move.l 32(sp),d0
    7008:	                move.l d0,28(sp)
	if( !newP) {
    700c:	            /-- bne.s 7022 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    700e:	            |   pea 1596f <custom.c.64ca0e9f+0xc99>
    7014:	            |   jsr 13db8 <KPrintF>
    701a:	            |   addq.l #4,sp
		return NULL;
    701c:	            |   moveq #0,d0
    701e:	/-----------|-- bra.w 71f2 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    7022:	|           \-> movea.l 28(sp),a0
    7026:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    702c:	|               move.l 56(sp),d1
    7030:	|               move.l d1,d0
    7032:	|               add.l d0,d0
    7034:	|               add.l d1,d0
    7036:	|               add.l d0,d0
    7038:	|               add.l d0,d0
    703a:	|               move.l d0,24(sp)
    703e:	|               clr.l 20(sp)
    7042:	|               move.l 190fa <SysBase>,d0
    7048:	|               movea.l d0,a6
    704a:	|               move.l 24(sp),d0
    704e:	|               move.l 20(sp),d1
    7052:	|               jsr -684(a6)
    7056:	|               move.l d0,16(sp)
    705a:	|               move.l 16(sp),d0
    705e:	|               movea.l 28(sp),a0
    7062:	|               move.l d0,4(a0)
	if( !newP->frames) {
    7066:	|               movea.l 28(sp),a0
    706a:	|               move.l 4(a0),d0
    706e:	|           /-- bne.s 7084 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    7070:	|           |   pea 1596f <custom.c.64ca0e9f+0xc99>
    7076:	|           |   jsr 13db8 <KPrintF>
    707c:	|           |   addq.l #4,sp
		return NULL;
    707e:	|           |   moveq #0,d0
    7080:	+-----------|-- bra.w 71f2 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    7084:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    708a:	|               movea.l 60(sp),a0
    708e:	|               move.l (a0),44(sp)
	while (a) {
    7092:	|     /-------- bra.w 71e6 <createPersonaAnim+0x20c>
		a --;
    7096:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    709a:	|  |  |         movea.l 28(sp),a0
    709e:	|  |  |         movea.l 4(a0),a0
    70a2:	|  |  |         move.l 48(sp),d1
    70a6:	|  |  |         move.l d1,d0
    70a8:	|  |  |         add.l d0,d0
    70aa:	|  |  |         add.l d1,d0
    70ac:	|  |  |         add.l d0,d0
    70ae:	|  |  |         add.l d0,d0
    70b0:	|  |  |         adda.l d0,a0
    70b2:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    70b6:	|  |  |         movea.l 44(sp),a0
    70ba:	|  |  |         move.l (a0),d0
    70bc:	|  |  |         moveq #5,d1
    70be:	|  |  |         cmp.l d0,d1
    70c0:	|  |  |     /-- bne.s 70ec <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    70c2:	|  |  |     |   movea.l 28(sp),a0
    70c6:	|  |  |     |   movea.l 4(a0),a0
    70ca:	|  |  |     |   move.l 48(sp),d1
    70ce:	|  |  |     |   move.l d1,d0
    70d0:	|  |  |     |   add.l d0,d0
    70d2:	|  |  |     |   add.l d1,d0
    70d4:	|  |  |     |   add.l d0,d0
    70d6:	|  |  |     |   add.l d0,d0
    70d8:	|  |  |     |   lea (0,a0,d0.l),a1
    70dc:	|  |  |     |   movea.l 44(sp),a0
    70e0:	|  |  |     |   move.l 4(a0),d0
    70e4:	|  |  |     |   move.l d0,8(a1)
    70e8:	|  |  |  /--|-- bra.w 7194 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    70ec:	|  |  |  |  \-> movea.l 44(sp),a0
    70f0:	|  |  |  |      move.l (a0),d0
    70f2:	|  |  |  |      moveq #2,d1
    70f4:	|  |  |  |      cmp.l d0,d1
    70f6:	|  |  |  |  /-- bne.s 7122 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    70f8:	|  |  |  |  |   movea.l 44(sp),a0
    70fc:	|  |  |  |  |   move.l 4(a0),d2
    7100:	|  |  |  |  |   movea.l 28(sp),a0
    7104:	|  |  |  |  |   movea.l 4(a0),a0
    7108:	|  |  |  |  |   move.l 48(sp),d1
    710c:	|  |  |  |  |   move.l d1,d0
    710e:	|  |  |  |  |   add.l d0,d0
    7110:	|  |  |  |  |   add.l d1,d0
    7112:	|  |  |  |  |   add.l d0,d0
    7114:	|  |  |  |  |   add.l d0,d0
    7116:	|  |  |  |  |   adda.l d0,a0
    7118:	|  |  |  |  |   move.l d2,d0
    711a:	|  |  |  |  |   neg.l d0
    711c:	|  |  |  |  |   move.l d0,8(a0)
    7120:	|  |  |  +--|-- bra.s 7194 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    7122:	|  |  |  |  \-> movea.l 44(sp),a0
    7126:	|  |  |  |      move.l (a0),d0
    7128:	|  |  |  |      moveq #6,d1
    712a:	|  |  |  |      cmp.l d0,d1
    712c:	|  |  |  |  /-- bne.s 7174 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    712e:	|  |  |  |  |   movea.l 44(sp),a0
    7132:	|  |  |  |  |   movea.l 4(a0),a0
    7136:	|  |  |  |  |   move.l (a0),d0
    7138:	|  |  |  |  |   move.l d0,-(sp)
    713a:	|  |  |  |  |   pea 1 <_start+0x1>
    713e:	|  |  |  |  |   lea 20(sp),a0
    7142:	|  |  |  |  |   move.l a0,-(sp)
    7144:	|  |  |  |  |   jsr 11d70 <getValueType>
    714a:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    714e:	|  |  |  |  |   movea.l 44(sp),a0
    7152:	|  |  |  |  |   movea.l 4(a0),a0
    7156:	|  |  |  |  |   movea.l (a0),a0
    7158:	|  |  |  |  |   move.l 8(a0),d0
    715c:	|  |  |  |  |   move.l d0,-(sp)
    715e:	|  |  |  |  |   pea 1 <_start+0x1>
    7162:	|  |  |  |  |   lea 16(sp),a0
    7166:	|  |  |  |  |   move.l a0,-(sp)
    7168:	|  |  |  |  |   jsr 11d70 <getValueType>
    716e:	|  |  |  |  |   lea 12(sp),sp
    7172:	|  |  |  +--|-- bra.s 7194 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    7174:	|  |  |  |  \-> move.l 44(sp),d0
    7178:	|  |  |  |      move.l d0,-(sp)
    717a:	|  |  |  |      pea 1 <_start+0x1>
    717e:	|  |  |  |      lea 20(sp),a0
    7182:	|  |  |  |      move.l a0,-(sp)
    7184:	|  |  |  |      jsr 11d70 <getValueType>
    718a:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    718e:	|  |  |  |      moveq #1,d0
    7190:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    7194:	|  |  |  \----> move.l 60(sp),-(sp)
    7198:	|  |  |         jsr 126f4 <trimStack>
    719e:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    71a0:	|  |  |         movea.l 28(sp),a0
    71a4:	|  |  |         movea.l 4(a0),a0
    71a8:	|  |  |         move.l 48(sp),d1
    71ac:	|  |  |         move.l d1,d0
    71ae:	|  |  |         add.l d0,d0
    71b0:	|  |  |         add.l d1,d0
    71b2:	|  |  |         add.l d0,d0
    71b4:	|  |  |         add.l d0,d0
    71b6:	|  |  |         adda.l d0,a0
    71b8:	|  |  |         move.l 12(sp),d0
    71bc:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    71be:	|  |  |         movea.l 28(sp),a0
    71c2:	|  |  |         movea.l 4(a0),a0
    71c6:	|  |  |         move.l 48(sp),d1
    71ca:	|  |  |         move.l d1,d0
    71cc:	|  |  |         add.l d0,d0
    71ce:	|  |  |         add.l d1,d0
    71d0:	|  |  |         add.l d0,d0
    71d2:	|  |  |         add.l d0,d0
    71d4:	|  |  |         adda.l d0,a0
    71d6:	|  |  |         move.l 8(sp),d0
    71da:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    71de:	|  |  |         movea.l 60(sp),a0
    71e2:	|  |  |         move.l (a0),44(sp)
	while (a) {
    71e6:	|  |  \-------> tst.l 48(sp)
    71ea:	|  \----------- bne.w 7096 <createPersonaAnim+0xbc>
	}

	return newP;
    71ee:	|               move.l 28(sp),d0
}
    71f2:	\-------------> move.l (sp)+,d2
    71f4:	                movea.l (sp)+,a6
    71f6:	                lea 44(sp),sp
    71fa:	                rts

000071fc <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    71fc:	       subq.l #8,sp
    71fe:	       move.l a6,-(sp)

	if (orig)
    7200:	       tst.l 16(sp)
    7204:	/----- beq.s 7244 <deleteAnim+0x48>
	{
		if (orig -> numFrames) {
    7206:	|      movea.l 16(sp),a0
    720a:	|      move.l 8(a0),d0
    720e:	|  /-- beq.s 722a <deleteAnim+0x2e>
			FreeVec( orig->frames);
    7210:	|  |   movea.l 16(sp),a0
    7214:	|  |   move.l 4(a0),8(sp)
    721a:	|  |   move.l 190fa <SysBase>,d0
    7220:	|  |   movea.l d0,a6
    7222:	|  |   movea.l 8(sp),a1
    7226:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    722a:	|  \-> move.l 16(sp),4(sp)
    7230:	|      move.l 190fa <SysBase>,d0
    7236:	|      movea.l d0,a6
    7238:	|      movea.l 4(sp),a1
    723c:	|      jsr -690(a6)
		orig = NULL;
    7240:	|      clr.l 16(sp)
	}
}
    7244:	\----> nop
    7246:	       movea.l (sp)+,a6
    7248:	       addq.l #8,sp
    724a:	       rts

0000724c <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    724c:	          lea -124(sp),sp
    7250:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    7254:	          movea.l 152(sp),a0
    7258:	          move.l 44(a0),d1
    725c:	          movea.l 152(sp),a0
    7260:	          move.l 48(a0),d0
    7264:	          cmp.l d1,d0
    7266:	      /-- bne.s 7296 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    7268:	      |   movea.l 152(sp),a0
    726c:	      |   moveq #-1,d0
    726e:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    7272:	      |   movea.l 152(sp),a0
    7276:	      |   move.l 28(a0),d0
    727a:	      |   movea.l 152(sp),a0
    727e:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    7282:	      |   movea.l 152(sp),a0
    7286:	      |   move.l 32(a0),d0
    728a:	      |   movea.l 152(sp),a0
    728e:	      |   move.l d0,40(a0)
    7292:	   /--|-- bra.w 77fc <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    7296:	   |  \-> movea.l 1925a <currentFloor>,a0
    729c:	   |      move.l 16(a0),d1
    72a0:	   |      movea.l 152(sp),a0
    72a4:	   |      move.l 44(a0),d0
    72a8:	   |      add.l d0,d0
    72aa:	   |      add.l d0,d0
    72ac:	   |      movea.l d1,a0
    72ae:	   |      adda.l d0,a0
    72b0:	   |      move.l (a0),d1
    72b2:	   |      movea.l 152(sp),a0
    72b6:	   |      move.l 48(a0),d0
    72ba:	   |      add.l d0,d0
    72bc:	   |      add.l d0,d0
    72be:	   |      movea.l d1,a0
    72c0:	   |      adda.l d0,a0
    72c2:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    72c6:	   |      moveq #-1,d0
    72c8:	   |      cmp.l 144(sp),d0
    72cc:	   |  /-- bne.s 72d4 <doBorderStuff+0x88>
    72ce:	   |  |   clr.w d0
    72d0:	/--|--|-- bra.w 78fc <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    72d4:	|  |  \-> movea.l 1925a <currentFloor>,a0
    72da:	|  |      move.l 12(a0),d1
    72de:	|  |      move.l 144(sp),d0
    72e2:	|  |      lsl.l #3,d0
    72e4:	|  |      add.l d0,d1
    72e6:	|  |      movea.l 1925a <currentFloor>,a0
    72ec:	|  |      movea.l 12(a0),a1
    72f0:	|  |      movea.l 152(sp),a0
    72f4:	|  |      move.l 44(a0),d0
    72f8:	|  |      lsl.l #3,d0
    72fa:	|  |      add.l a1,d0
    72fc:	|  |      lea 40(sp),a0
    7300:	|  |      move.l a0,-(sp)
    7302:	|  |      lea 48(sp),a0
    7306:	|  |      move.l a0,-(sp)
    7308:	|  |      move.l d1,-(sp)
    730a:	|  |      move.l d0,-(sp)
    730c:	|  |      jsr 1303a <getMatchingCorners>
    7312:	|  |      lea 16(sp),sp
    7316:	|  |      tst.w d0
    7318:	|  |  /-- bne.s 732e <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    731a:	|  |  |   pea 15999 <custom.c.64ca0e9f+0xcc3>
    7320:	|  |  |   jsr 13db8 <KPrintF>
    7326:	|  |  |   addq.l #4,sp
            return FALSE;
    7328:	|  |  |   clr.w d0
    732a:	+--|--|-- bra.w 78fc <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    732e:	|  |  \-> movea.l 152(sp),a0
    7332:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    7338:	|  |      movea.l 152(sp),a0
    733c:	|  |      move.l (a0),d0
    733e:	|  |      move.l d0,-(sp)
    7340:	|  |      jsr 1418c <__fixsfsi>
    7346:	|  |      addq.l #4,sp
    7348:	|  |      move.l d0,140(sp)
    734c:	|  |      movea.l 152(sp),a0
    7350:	|  |      move.l 4(a0),d0
    7354:	|  |      move.l d0,-(sp)
    7356:	|  |      jsr 1418c <__fixsfsi>
    735c:	|  |      addq.l #4,sp
    735e:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    7362:	|  |      movea.l 152(sp),a0
    7366:	|  |      move.l 28(a0),132(sp)
    736c:	|  |      movea.l 152(sp),a0
    7370:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    7376:	|  |      movea.l 1925a <currentFloor>,a0
    737c:	|  |      move.l 4(a0),d1
    7380:	|  |      move.l 44(sp),d0
    7384:	|  |      lsl.l #3,d0
    7386:	|  |      movea.l d1,a0
    7388:	|  |      adda.l d0,a0
    738a:	|  |      move.l (a0),124(sp)
    738e:	|  |      movea.l 1925a <currentFloor>,a0
    7394:	|  |      move.l 4(a0),d1
    7398:	|  |      move.l 44(sp),d0
    739c:	|  |      lsl.l #3,d0
    739e:	|  |      movea.l d1,a0
    73a0:	|  |      adda.l d0,a0
    73a2:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    73a8:	|  |      movea.l 1925a <currentFloor>,a0
    73ae:	|  |      move.l 4(a0),d1
    73b2:	|  |      move.l 40(sp),d0
    73b6:	|  |      lsl.l #3,d0
    73b8:	|  |      movea.l d1,a0
    73ba:	|  |      adda.l d0,a0
    73bc:	|  |      move.l (a0),116(sp)
    73c0:	|  |      movea.l 1925a <currentFloor>,a0
    73c6:	|  |      move.l 4(a0),d1
    73ca:	|  |      move.l 40(sp),d0
    73ce:	|  |      lsl.l #3,d0
    73d0:	|  |      movea.l d1,a0
    73d2:	|  |      adda.l d0,a0
    73d4:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    73da:	|  |      move.l 140(sp),d0
    73de:	|  |      sub.l 132(sp),d0
    73e2:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    73e6:	|  |      move.l 136(sp),d0
    73ea:	|  |      sub.l 128(sp),d0
    73ee:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    73f2:	|  |      move.l 116(sp),d0
    73f6:	|  |      sub.l 124(sp),d0
    73fa:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    73fe:	|  |      move.l 112(sp),d0
    7402:	|  |      sub.l 120(sp),d0
    7406:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    740a:	|  |      move.l 124(sp),d0
    740e:	|  |      sub.l 140(sp),d0
    7412:	|  |      move.l 104(sp),-(sp)
    7416:	|  |      move.l d0,-(sp)
    7418:	|  |      jsr 14776 <__mulsi3>
    741e:	|  |      addq.l #8,sp
    7420:	|  |      move.l d0,d2
    7422:	|  |      move.l 120(sp),d0
    7426:	|  |      sub.l 136(sp),d0
    742a:	|  |      move.l 108(sp),-(sp)
    742e:	|  |      move.l d0,-(sp)
    7430:	|  |      jsr 14776 <__mulsi3>
    7436:	|  |      addq.l #8,sp
    7438:	|  |      move.l d2,d1
    743a:	|  |      sub.l d0,d1
    743c:	|  |      move.l d1,-(sp)
    743e:	|  |      jsr 141b4 <__floatsidf>
    7444:	|  |      addq.l #4,sp
    7446:	|  |      move.l d0,32(sp)
    744a:	|  |      move.l d1,36(sp)
    744e:	|  |      move.l 32(sp),88(sp)
    7454:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    745a:	|  |      move.l 96(sp),-(sp)
    745e:	|  |      move.l 112(sp),-(sp)
    7462:	|  |      jsr 14776 <__mulsi3>
    7468:	|  |      addq.l #8,sp
    746a:	|  |      move.l d0,d2
    746c:	|  |      move.l 100(sp),-(sp)
    7470:	|  |      move.l 108(sp),-(sp)
    7474:	|  |      jsr 14776 <__mulsi3>
    747a:	|  |      addq.l #8,sp
    747c:	|  |      move.l d2,d1
    747e:	|  |      sub.l d0,d1
    7480:	|  |      move.l d1,-(sp)
    7482:	|  |      jsr 141b4 <__floatsidf>
    7488:	|  |      addq.l #4,sp
    748a:	|  |      move.l d1,-(sp)
    748c:	|  |      move.l d0,-(sp)
    748e:	|  |      move.l 100(sp),-(sp)
    7492:	|  |      move.l 100(sp),-(sp)
    7496:	|  |      jsr 1403e <__divdf3>
    749c:	|  |      lea 16(sp),sp
    74a0:	|  |      move.l d0,24(sp)
    74a4:	|  |      move.l d1,28(sp)
    74a8:	|  |      move.l 24(sp),88(sp)
    74ae:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    74b4:	|  |      clr.l -(sp)
    74b6:	|  |      clr.l -(sp)
    74b8:	|  |      move.l 100(sp),-(sp)
    74bc:	|  |      move.l 100(sp),-(sp)
    74c0:	|  |      jsr 14312 <__gtdf2>
    74c6:	|  |      lea 16(sp),sp
    74ca:	|  |      tst.l d0
    74cc:	|  |  /-- ble.w 75a4 <doBorderStuff+0x358>
    74d0:	|  |  |   clr.l -(sp)
    74d2:	|  |  |   move.l #1072693248,-(sp)
    74d8:	|  |  |   move.l 100(sp),-(sp)
    74dc:	|  |  |   move.l 100(sp),-(sp)
    74e0:	|  |  |   jsr 143cc <__ltdf2>
    74e6:	|  |  |   lea 16(sp),sp
    74ea:	|  |  |   tst.l d0
    74ec:	|  |  +-- bge.w 75a4 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    74f0:	|  |  |   move.l 124(sp),-(sp)
    74f4:	|  |  |   jsr 141b4 <__floatsidf>
    74fa:	|  |  |   addq.l #4,sp
    74fc:	|  |  |   move.l d0,d2
    74fe:	|  |  |   move.l d1,d3
    7500:	|  |  |   move.l 100(sp),-(sp)
    7504:	|  |  |   jsr 141b4 <__floatsidf>
    750a:	|  |  |   addq.l #4,sp
    750c:	|  |  |   move.l 92(sp),-(sp)
    7510:	|  |  |   move.l 92(sp),-(sp)
    7514:	|  |  |   move.l d1,-(sp)
    7516:	|  |  |   move.l d0,-(sp)
    7518:	|  |  |   jsr 14244 <__muldf3>
    751e:	|  |  |   lea 16(sp),sp
    7522:	|  |  |   move.l d1,-(sp)
    7524:	|  |  |   move.l d0,-(sp)
    7526:	|  |  |   move.l d3,-(sp)
    7528:	|  |  |   move.l d2,-(sp)
    752a:	|  |  |   jsr 13fdc <__adddf3>
    7530:	|  |  |   lea 16(sp),sp
    7534:	|  |  |   move.l d1,-(sp)
    7536:	|  |  |   move.l d0,-(sp)
    7538:	|  |  |   jsr 1414c <__fixdfsi>
    753e:	|  |  |   addq.l #8,sp
    7540:	|  |  |   movea.l 152(sp),a0
    7544:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    7548:	|  |  |   move.l 120(sp),-(sp)
    754c:	|  |  |   jsr 141b4 <__floatsidf>
    7552:	|  |  |   addq.l #4,sp
    7554:	|  |  |   move.l d0,d2
    7556:	|  |  |   move.l d1,d3
    7558:	|  |  |   move.l 96(sp),-(sp)
    755c:	|  |  |   jsr 141b4 <__floatsidf>
    7562:	|  |  |   addq.l #4,sp
    7564:	|  |  |   move.l 92(sp),-(sp)
    7568:	|  |  |   move.l 92(sp),-(sp)
    756c:	|  |  |   move.l d1,-(sp)
    756e:	|  |  |   move.l d0,-(sp)
    7570:	|  |  |   jsr 14244 <__muldf3>
    7576:	|  |  |   lea 16(sp),sp
    757a:	|  |  |   move.l d1,-(sp)
    757c:	|  |  |   move.l d0,-(sp)
    757e:	|  |  |   move.l d3,-(sp)
    7580:	|  |  |   move.l d2,-(sp)
    7582:	|  |  |   jsr 13fdc <__adddf3>
    7588:	|  |  |   lea 16(sp),sp
    758c:	|  |  |   move.l d1,-(sp)
    758e:	|  |  |   move.l d0,-(sp)
    7590:	|  |  |   jsr 1414c <__fixdfsi>
    7596:	|  |  |   addq.l #8,sp
    7598:	|  |  |   movea.l 152(sp),a0
    759c:	|  |  |   move.l d0,40(a0)
    75a0:	|  +--|-- bra.w 77fc <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    75a4:	|  |  \-> move.l 140(sp),d0
    75a8:	|  |      sub.l 124(sp),d0
    75ac:	|  |      move.l d0,84(sp)
    75b0:	|  |      move.l 140(sp),d0
    75b4:	|  |      sub.l 116(sp),d0
    75b8:	|  |      move.l d0,80(sp)
    75bc:	|  |      move.l 132(sp),d0
    75c0:	|  |      sub.l 124(sp),d0
    75c4:	|  |      move.l d0,76(sp)
    75c8:	|  |      move.l 132(sp),d0
    75cc:	|  |      sub.l 116(sp),d0
    75d0:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    75d4:	|  |      move.l 136(sp),d0
    75d8:	|  |      sub.l 120(sp),d0
    75dc:	|  |      move.l d0,68(sp)
    75e0:	|  |      move.l 136(sp),d0
    75e4:	|  |      sub.l 112(sp),d0
    75e8:	|  |      move.l d0,64(sp)
    75ec:	|  |      move.l 128(sp),d0
    75f0:	|  |      sub.l 120(sp),d0
    75f4:	|  |      move.l d0,60(sp)
    75f8:	|  |      move.l 128(sp),d0
    75fc:	|  |      sub.l 112(sp),d0
    7600:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    7604:	|  |      move.l 84(sp),-(sp)
    7608:	|  |      move.l 88(sp),-(sp)
    760c:	|  |      jsr 14776 <__mulsi3>
    7612:	|  |      addq.l #8,sp
    7614:	|  |      move.l d0,84(sp)
    7618:	|  |      move.l 80(sp),-(sp)
    761c:	|  |      move.l 84(sp),-(sp)
    7620:	|  |      jsr 14776 <__mulsi3>
    7626:	|  |      addq.l #8,sp
    7628:	|  |      move.l d0,80(sp)
    762c:	|  |      move.l 76(sp),-(sp)
    7630:	|  |      move.l 80(sp),-(sp)
    7634:	|  |      jsr 14776 <__mulsi3>
    763a:	|  |      addq.l #8,sp
    763c:	|  |      move.l d0,76(sp)
    7640:	|  |      move.l 72(sp),-(sp)
    7644:	|  |      move.l 76(sp),-(sp)
    7648:	|  |      jsr 14776 <__mulsi3>
    764e:	|  |      addq.l #8,sp
    7650:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    7654:	|  |      move.l 68(sp),-(sp)
    7658:	|  |      move.l 72(sp),-(sp)
    765c:	|  |      jsr 14776 <__mulsi3>
    7662:	|  |      addq.l #8,sp
    7664:	|  |      move.l d0,68(sp)
    7668:	|  |      move.l 64(sp),-(sp)
    766c:	|  |      move.l 68(sp),-(sp)
    7670:	|  |      jsr 14776 <__mulsi3>
    7676:	|  |      addq.l #8,sp
    7678:	|  |      move.l d0,64(sp)
    767c:	|  |      move.l 60(sp),-(sp)
    7680:	|  |      move.l 64(sp),-(sp)
    7684:	|  |      jsr 14776 <__mulsi3>
    768a:	|  |      addq.l #8,sp
    768c:	|  |      move.l d0,60(sp)
    7690:	|  |      move.l 56(sp),-(sp)
    7694:	|  |      move.l 60(sp),-(sp)
    7698:	|  |      jsr 14776 <__mulsi3>
    769e:	|  |      addq.l #8,sp
    76a0:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    76a4:	|  |      move.l 84(sp),-(sp)
    76a8:	|  |      jsr 141b4 <__floatsidf>
    76ae:	|  |      addq.l #4,sp
    76b0:	|  |      move.l d0,d2
    76b2:	|  |      move.l d1,d3
    76b4:	|  |      move.l 68(sp),-(sp)
    76b8:	|  |      jsr 141b4 <__floatsidf>
    76be:	|  |      addq.l #4,sp
    76c0:	|  |      move.l d1,-(sp)
    76c2:	|  |      move.l d0,-(sp)
    76c4:	|  |      move.l d3,-(sp)
    76c6:	|  |      move.l d2,-(sp)
    76c8:	|  |      jsr 13fdc <__adddf3>
    76ce:	|  |      lea 16(sp),sp
    76d2:	|  |      move.l d1,-(sp)
    76d4:	|  |      move.l d0,-(sp)
    76d6:	|  |      jsr 1472c <sqrt>
    76dc:	|  |      addq.l #8,sp
    76de:	|  |      move.l d0,d2
    76e0:	|  |      move.l d1,d3
    76e2:	|  |      move.l 76(sp),-(sp)
    76e6:	|  |      jsr 141b4 <__floatsidf>
    76ec:	|  |      addq.l #4,sp
    76ee:	|  |      move.l d0,d4
    76f0:	|  |      move.l d1,d5
    76f2:	|  |      move.l 60(sp),-(sp)
    76f6:	|  |      jsr 141b4 <__floatsidf>
    76fc:	|  |      addq.l #4,sp
    76fe:	|  |      move.l d1,-(sp)
    7700:	|  |      move.l d0,-(sp)
    7702:	|  |      move.l d5,-(sp)
    7704:	|  |      move.l d4,-(sp)
    7706:	|  |      jsr 13fdc <__adddf3>
    770c:	|  |      lea 16(sp),sp
    7710:	|  |      move.l d1,-(sp)
    7712:	|  |      move.l d0,-(sp)
    7714:	|  |      jsr 1472c <sqrt>
    771a:	|  |      addq.l #8,sp
    771c:	|  |      move.l d1,-(sp)
    771e:	|  |      move.l d0,-(sp)
    7720:	|  |      move.l d3,-(sp)
    7722:	|  |      move.l d2,-(sp)
    7724:	|  |      jsr 13fdc <__adddf3>
    772a:	|  |      lea 16(sp),sp
    772e:	|  |      move.l d0,d2
    7730:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    7732:	|  |      move.l 80(sp),-(sp)
    7736:	|  |      jsr 141b4 <__floatsidf>
    773c:	|  |      addq.l #4,sp
    773e:	|  |      move.l d0,d4
    7740:	|  |      move.l d1,d5
    7742:	|  |      move.l 64(sp),-(sp)
    7746:	|  |      jsr 141b4 <__floatsidf>
    774c:	|  |      addq.l #4,sp
    774e:	|  |      move.l d1,-(sp)
    7750:	|  |      move.l d0,-(sp)
    7752:	|  |      move.l d5,-(sp)
    7754:	|  |      move.l d4,-(sp)
    7756:	|  |      jsr 13fdc <__adddf3>
    775c:	|  |      lea 16(sp),sp
    7760:	|  |      move.l d1,-(sp)
    7762:	|  |      move.l d0,-(sp)
    7764:	|  |      jsr 1472c <sqrt>
    776a:	|  |      addq.l #8,sp
    776c:	|  |      move.l d0,d4
    776e:	|  |      move.l d1,d5
    7770:	|  |      move.l 72(sp),-(sp)
    7774:	|  |      jsr 141b4 <__floatsidf>
    777a:	|  |      addq.l #4,sp
    777c:	|  |      move.l d0,d6
    777e:	|  |      move.l d1,d7
    7780:	|  |      move.l 56(sp),-(sp)
    7784:	|  |      jsr 141b4 <__floatsidf>
    778a:	|  |      addq.l #4,sp
    778c:	|  |      move.l d1,-(sp)
    778e:	|  |      move.l d0,-(sp)
    7790:	|  |      move.l d7,-(sp)
    7792:	|  |      move.l d6,-(sp)
    7794:	|  |      jsr 13fdc <__adddf3>
    779a:	|  |      lea 16(sp),sp
    779e:	|  |      move.l d1,-(sp)
    77a0:	|  |      move.l d0,-(sp)
    77a2:	|  |      jsr 1472c <sqrt>
    77a8:	|  |      addq.l #8,sp
    77aa:	|  |      move.l d1,-(sp)
    77ac:	|  |      move.l d0,-(sp)
    77ae:	|  |      move.l d5,-(sp)
    77b0:	|  |      move.l d4,-(sp)
    77b2:	|  |      jsr 13fdc <__adddf3>
    77b8:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    77bc:	|  |      move.l d1,-(sp)
    77be:	|  |      move.l d0,-(sp)
    77c0:	|  |      move.l d3,-(sp)
    77c2:	|  |      move.l d2,-(sp)
    77c4:	|  |      jsr 143cc <__ltdf2>
    77ca:	|  |      lea 16(sp),sp
    77ce:	|  |      tst.l d0
    77d0:	|  |  /-- bge.s 77e8 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    77d2:	|  |  |   movea.l 152(sp),a0
    77d6:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    77dc:	|  |  |   movea.l 152(sp),a0
    77e0:	|  |  |   move.l 120(sp),40(a0)
    77e6:	|  +--|-- bra.s 77fc <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    77e8:	|  |  \-> movea.l 152(sp),a0
    77ec:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    77f2:	|  |      movea.l 152(sp),a0
    77f6:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    77fc:	|  \----> movea.l 152(sp),a0
    7800:	|         move.l 40(a0),d0
    7804:	|         move.l d0,-(sp)
    7806:	|         jsr 141f4 <__floatsisf>
    780c:	|         addq.l #4,sp
    780e:	|         move.l d0,d1
    7810:	|         movea.l 152(sp),a0
    7814:	|         move.l 4(a0),d0
    7818:	|         move.l d0,-(sp)
    781a:	|         move.l d1,-(sp)
    781c:	|         jsr 144e8 <__subsf3>
    7822:	|         addq.l #8,sp
    7824:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    7828:	|         movea.l 152(sp),a0
    782c:	|         move.l (a0),d2
    782e:	|         movea.l 152(sp),a0
    7832:	|         move.l 36(a0),d0
    7836:	|         move.l d0,-(sp)
    7838:	|         jsr 141f4 <__floatsisf>
    783e:	|         addq.l #4,sp
    7840:	|         move.l d0,-(sp)
    7842:	|         move.l d2,-(sp)
    7844:	|         jsr 144e8 <__subsf3>
    784a:	|         addq.l #8,sp
    784c:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    7850:	|         clr.l -(sp)
    7852:	|         move.l 52(sp),-(sp)
    7856:	|         jsr 14450 <__nesf2>
    785c:	|         addq.l #8,sp
    785e:	|         tst.l d0
    7860:	|     /-- bne.s 7874 <doBorderStuff+0x628>
    7862:	|     |   clr.l -(sp)
    7864:	|     |   move.l 56(sp),-(sp)
    7868:	|     |   jsr 14450 <__nesf2>
    786e:	|     |   addq.l #8,sp
    7870:	|     |   tst.l d0
    7872:	|  /--|-- beq.s 78ea <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    7874:	|  |  \-> move.l 52(sp),d0
    7878:	|  |      move.l d0,-(sp)
    787a:	|  |      move.l d0,-(sp)
    787c:	|  |      jsr 13fa6 <__addsf3>
    7882:	|  |      addq.l #8,sp
    7884:	|  |      move.l d0,-(sp)
    7886:	|  |      move.l 52(sp),-(sp)
    788a:	|  |      jsr 1457c <atan2f>
    7890:	|  |      addq.l #8,sp
    7892:	|  |      move.l d0,-(sp)
    7894:	|  |      jsr 1410c <__extendsfdf2>
    789a:	|  |      addq.l #4,sp
    789c:	|  |      move.l #-1540411785,-(sp)
    78a2:	|  |      move.l #1078765033,-(sp)
    78a8:	|  |      move.l d1,-(sp)
    78aa:	|  |      move.l d0,-(sp)
    78ac:	|  |      jsr 14244 <__muldf3>
    78b2:	|  |      lea 16(sp),sp
    78b6:	|  |      clr.l -(sp)
    78b8:	|  |      move.l #1080459264,-(sp)
    78be:	|  |      move.l d1,-(sp)
    78c0:	|  |      move.l d0,-(sp)
    78c2:	|  |      jsr 13fdc <__adddf3>
    78c8:	|  |      lea 16(sp),sp
    78cc:	|  |      move.l d1,-(sp)
    78ce:	|  |      move.l d0,-(sp)
    78d0:	|  |      jsr 1414c <__fixdfsi>
    78d6:	|  |      addq.l #8,sp
    78d8:	|  |      movea.l 152(sp),a0
    78dc:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    78e0:	|  |      movea.l 152(sp),a0
    78e4:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    78ea:	|  \----> pea 1 <_start+0x1>
    78ee:	|         move.l 156(sp),-(sp)
    78f2:	|         jsr 5c60 <setFrames>
    78f8:	|         addq.l #8,sp
    return TRUE;
    78fa:	|         moveq #1,d0
}
    78fc:	\-------> movem.l (sp)+,d2-d7
    7900:	          lea 124(sp),sp
    7904:	          rts

00007906 <drawPeople>:

void drawPeople () {
    7906:	                lea -24(sp),sp
    790a:	                move.l d2,-(sp)
	shufflePeople ();
    790c:	                jsr 92ce <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    7912:	                move.l 191b2 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    791a:	                clr.l 20(sp)
	overRegion = NULL;
    791e:	                clr.l 19256 <overRegion>

	while (thisPerson) {
    7924:	   /----------- bra.w 7e46 <drawPeople+0x540>
		if (thisPerson -> show) {
    7928:	/--|----------> movea.l 24(sp),a0
    792c:	|  |            move.w 92(a0),d0
    7930:	|  |  /-------- beq.w 7bfa <drawPeople+0x2f4>
			myAnim = thisPerson -> myAnim;
    7934:	|  |  |         movea.l 24(sp),a0
    7938:	|  |  |         move.l 60(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    793e:	|  |  |         movea.l 24(sp),a0
    7942:	|  |  |         move.l 64(a0),d0
    7946:	|  |  |         cmp.l 20(sp),d0
    794a:	|  |  |  /----- beq.w 7b0e <drawPeople+0x208>
				thisPerson -> lastUsedAnim = myAnim;
    794e:	|  |  |  |      movea.l 24(sp),a0
    7952:	|  |  |  |      move.l 20(sp),64(a0)
				thisPerson -> frameNum = 0;
    7958:	|  |  |  |      movea.l 24(sp),a0
    795c:	|  |  |  |      clr.l 72(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    7960:	|  |  |  |      movea.l 20(sp),a0
    7964:	|  |  |  |      movea.l 4(a0),a0
    7968:	|  |  |  |      move.l 4(a0),d0
    796c:	|  |  |  |      movea.l 24(sp),a0
    7970:	|  |  |  |      move.l d0,76(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    7974:	|  |  |  |      movea.l 20(sp),a0
    7978:	|  |  |  |      movea.l 4(a0),a1
    797c:	|  |  |  |      movea.l 24(sp),a0
    7980:	|  |  |  |      move.l 72(a0),d0
    7984:	|  |  |  |      move.l d0,d1
    7986:	|  |  |  |      move.l d1,d0
    7988:	|  |  |  |      add.l d0,d0
    798a:	|  |  |  |      add.l d1,d0
    798c:	|  |  |  |      add.l d0,d0
    798e:	|  |  |  |      add.l d0,d0
    7990:	|  |  |  |      lea (0,a1,d0.l),a0
    7994:	|  |  |  |      move.l 8(a0),d0
    7998:	|  |  |  |  /-- ble.w 7a3a <drawPeople+0x134>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    799c:	|  |  |  |  |   movea.l 20(sp),a0
    79a0:	|  |  |  |  |   movea.l 4(a0),a1
    79a4:	|  |  |  |  |   movea.l 24(sp),a0
    79a8:	|  |  |  |  |   move.l 72(a0),d0
    79ac:	|  |  |  |  |   move.l d0,d1
    79ae:	|  |  |  |  |   move.l d1,d0
    79b0:	|  |  |  |  |   add.l d0,d0
    79b2:	|  |  |  |  |   add.l d1,d0
    79b4:	|  |  |  |  |   add.l d0,d0
    79b6:	|  |  |  |  |   add.l d0,d0
    79b8:	|  |  |  |  |   lea (0,a1,d0.l),a0
    79bc:	|  |  |  |  |   move.l 8(a0),d0
    79c0:	|  |  |  |  |   clr.l -(sp)
    79c2:	|  |  |  |  |   move.l d0,-(sp)
    79c4:	|  |  |  |  |   jsr a87c <startSound>
    79ca:	|  |  |  |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    79cc:	|  |  |  |  |   movea.l 24(sp),a0
    79d0:	|  |  |  |  |   move.l 72(a0),d0
    79d4:	|  |  |  |  |   addq.l #1,d0
    79d6:	|  |  |  |  |   movea.l 24(sp),a0
    79da:	|  |  |  |  |   move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    79de:	|  |  |  |  |   movea.l 24(sp),a0
    79e2:	|  |  |  |  |   move.l 72(a0),d0
    79e6:	|  |  |  |  |   movea.l 24(sp),a0
    79ea:	|  |  |  |  |   movea.l 60(a0),a0
    79ee:	|  |  |  |  |   move.l 8(a0),d1
    79f2:	|  |  |  |  |   move.l d1,-(sp)
    79f4:	|  |  |  |  |   move.l d0,-(sp)
    79f6:	|  |  |  |  |   jsr 14822 <__modsi3>
    79fc:	|  |  |  |  |   addq.l #8,sp
    79fe:	|  |  |  |  |   movea.l 24(sp),a0
    7a02:	|  |  |  |  |   move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    7a06:	|  |  |  |  |   movea.l 24(sp),a0
    7a0a:	|  |  |  |  |   movea.l 60(a0),a0
    7a0e:	|  |  |  |  |   movea.l 4(a0),a1
    7a12:	|  |  |  |  |   movea.l 24(sp),a0
    7a16:	|  |  |  |  |   move.l 72(a0),d0
    7a1a:	|  |  |  |  |   move.l d0,d1
    7a1c:	|  |  |  |  |   move.l d1,d0
    7a1e:	|  |  |  |  |   add.l d0,d0
    7a20:	|  |  |  |  |   add.l d1,d0
    7a22:	|  |  |  |  |   add.l d0,d0
    7a24:	|  |  |  |  |   add.l d0,d0
    7a26:	|  |  |  |  |   lea (0,a1,d0.l),a0
    7a2a:	|  |  |  |  |   move.l 4(a0),d0
    7a2e:	|  |  |  |  |   movea.l 24(sp),a0
    7a32:	|  |  |  |  |   move.l d0,76(a0)
    7a36:	|  |  |  +--|-- bra.w 7b0e <drawPeople+0x208>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    7a3a:	|  |  |  |  \-> movea.l 20(sp),a0
    7a3e:	|  |  |  |      movea.l 4(a0),a1
    7a42:	|  |  |  |      movea.l 24(sp),a0
    7a46:	|  |  |  |      move.l 72(a0),d0
    7a4a:	|  |  |  |      move.l d0,d1
    7a4c:	|  |  |  |      move.l d1,d0
    7a4e:	|  |  |  |      add.l d0,d0
    7a50:	|  |  |  |      add.l d1,d0
    7a52:	|  |  |  |      add.l d0,d0
    7a54:	|  |  |  |      add.l d0,d0
    7a56:	|  |  |  |      lea (0,a1,d0.l),a0
    7a5a:	|  |  |  |      move.l 8(a0),d0
    7a5e:	|  |  |  +----- beq.w 7b0e <drawPeople+0x208>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    7a62:	|  |  |  |      movea.l 190ca <noStack>,a1
    7a68:	|  |  |  |      movea.l 20(sp),a0
    7a6c:	|  |  |  |      move.l 4(a0),d2
    7a70:	|  |  |  |      movea.l 24(sp),a0
    7a74:	|  |  |  |      move.l 72(a0),d0
    7a78:	|  |  |  |      move.l d0,d1
    7a7a:	|  |  |  |      move.l d1,d0
    7a7c:	|  |  |  |      add.l d0,d0
    7a7e:	|  |  |  |      add.l d1,d0
    7a80:	|  |  |  |      add.l d0,d0
    7a82:	|  |  |  |      add.l d0,d0
    7a84:	|  |  |  |      movea.l d2,a0
    7a86:	|  |  |  |      adda.l d0,a0
    7a88:	|  |  |  |      move.l 8(a0),d0
    7a8c:	|  |  |  |      neg.l d0
    7a8e:	|  |  |  |      pea 1 <_start+0x1>
    7a92:	|  |  |  |      move.l a1,-(sp)
    7a94:	|  |  |  |      clr.l -(sp)
    7a96:	|  |  |  |      clr.l -(sp)
    7a98:	|  |  |  |      move.l d0,-(sp)
    7a9a:	|  |  |  |      jsr 4604 <startNewFunctionNum>
    7aa0:	|  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    7aa4:	|  |  |  |      movea.l 24(sp),a0
    7aa8:	|  |  |  |      move.l 72(a0),d0
    7aac:	|  |  |  |      addq.l #1,d0
    7aae:	|  |  |  |      movea.l 24(sp),a0
    7ab2:	|  |  |  |      move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    7ab6:	|  |  |  |      movea.l 24(sp),a0
    7aba:	|  |  |  |      move.l 72(a0),d0
    7abe:	|  |  |  |      movea.l 24(sp),a0
    7ac2:	|  |  |  |      movea.l 60(a0),a0
    7ac6:	|  |  |  |      move.l 8(a0),d1
    7aca:	|  |  |  |      move.l d1,-(sp)
    7acc:	|  |  |  |      move.l d0,-(sp)
    7ace:	|  |  |  |      jsr 14822 <__modsi3>
    7ad4:	|  |  |  |      addq.l #8,sp
    7ad6:	|  |  |  |      movea.l 24(sp),a0
    7ada:	|  |  |  |      move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    7ade:	|  |  |  |      movea.l 24(sp),a0
    7ae2:	|  |  |  |      movea.l 60(a0),a0
    7ae6:	|  |  |  |      movea.l 4(a0),a1
    7aea:	|  |  |  |      movea.l 24(sp),a0
    7aee:	|  |  |  |      move.l 72(a0),d0
    7af2:	|  |  |  |      move.l d0,d1
    7af4:	|  |  |  |      move.l d1,d0
    7af6:	|  |  |  |      add.l d0,d0
    7af8:	|  |  |  |      add.l d1,d0
    7afa:	|  |  |  |      add.l d0,d0
    7afc:	|  |  |  |      add.l d0,d0
    7afe:	|  |  |  |      lea (0,a1,d0.l),a0
    7b02:	|  |  |  |      move.l 4(a0),d0
    7b06:	|  |  |  |      movea.l 24(sp),a0
    7b0a:	|  |  |  |      move.l d0,76(a0)
				}
			}
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    7b0e:	|  |  |  \----> movea.l 20(sp),a0
    7b12:	|  |  |         movea.l 4(a0),a1
    7b16:	|  |  |         movea.l 24(sp),a0
    7b1a:	|  |  |         move.l 72(a0),d0
    7b1e:	|  |  |         move.l d0,d1
    7b20:	|  |  |         move.l d1,d0
    7b22:	|  |  |         add.l d0,d0
    7b24:	|  |  |         add.l d1,d0
    7b26:	|  |  |         add.l d0,d0
    7b28:	|  |  |         add.l d0,d0
    7b2a:	|  |  |         lea (0,a1,d0.l),a0
    7b2e:	|  |  |         move.l (a0),8(sp)
			int m = fNumSign < 0;
    7b32:	|  |  |         move.l 8(sp),d0
    7b36:	|  |  |         add.l d0,d0
    7b38:	|  |  |         subx.l d0,d0
    7b3a:	|  |  |         neg.l d0
    7b3c:	|  |  |         move.b d0,d0
    7b3e:	|  |  |         move.b d0,d0
    7b40:	|  |  |         andi.l #255,d0
    7b46:	|  |  |         move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    7b4a:	|  |  |         move.l 8(sp),-(sp)
    7b4e:	|  |  |         jsr 6b20 <TF_abs>
    7b54:	|  |  |         addq.l #4,sp
    7b56:	|  |  |         move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    7b5a:	|  |  |         movea.l 20(sp),a0
    7b5e:	|  |  |         movea.l (a0),a0
    7b60:	|  |  |         move.l 8(a0),d0
    7b64:	|  |  |         cmp.l 12(sp),d0
    7b68:	|  |  |     /-- bgt.s 7b78 <drawPeople+0x272>
				fNum = 0;
    7b6a:	|  |  |     |   clr.l 12(sp)
				m = 2 - m;
    7b6e:	|  |  |     |   moveq #2,d0
    7b70:	|  |  |     |   sub.l 16(sp),d0
    7b74:	|  |  |     |   move.l d0,16(sp)
			}
			if (m != 2) {
    7b78:	|  |  |     \-> moveq #2,d0
    7b7a:	|  |  |         cmp.l 16(sp),d0
    7b7e:	|  |  +-------- beq.s 7bfa <drawPeople+0x2f4>
				BOOL r = FALSE;
    7b80:	|  |  |         clr.w 6(sp)
				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    7b84:	|  |  |         move.l 16(sp),d0
    7b88:	|  |  |         movea.w d0,a0
    7b8a:	|  |  |         movea.l 20(sp),a1
    7b8e:	|  |  |         movea.l (a1),a1
    7b90:	|  |  |         movea.l 16(a1),a1
    7b94:	|  |  |         move.l 12(sp),d1
    7b98:	|  |  |         move.l d1,d0
    7b9a:	|  |  |         lsl.l #3,d0
    7b9c:	|  |  |         sub.l d1,d0
    7b9e:	|  |  |         add.l d0,d0
    7ba0:	|  |  |         add.l d0,d0
    7ba2:	|  |  |         add.l a1,d0
    7ba4:	|  |  |         move.l a0,-(sp)
    7ba6:	|  |  |         move.l 28(sp),-(sp)
    7baa:	|  |  |         move.l d0,-(sp)
    7bac:	|  |  |         jsr 6a7c <scaleSprite>
    7bb2:	|  |  |         lea 12(sp),sp
    7bb6:	|  |  |         move.w d0,6(sp)
				if (r) {
    7bba:	|  |  +-------- beq.s 7bfa <drawPeople+0x2f4>
					if (thisPerson -> thisType -> screenName[0]) {
    7bbc:	|  |  |         movea.l 24(sp),a0
    7bc0:	|  |  |         movea.l 102(a0),a0
    7bc4:	|  |  |         movea.l (a0),a0
    7bc6:	|  |  |         move.b (a0),d0
    7bc8:	|  |  +-------- beq.s 7bfa <drawPeople+0x2f4>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    7bca:	|  |  |         move.l 191d2 <personRegion+0x1c>,d1
    7bd0:	|  |  |         movea.l 24(sp),a0
    7bd4:	|  |  |         move.l 102(a0),d0
    7bd8:	|  |  |         cmp.l d1,d0
    7bda:	|  |  |     /-- beq.s 7be2 <drawPeople+0x2dc>
    7bdc:	|  |  |     |   clr.l 190c2 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    7be2:	|  |  |     \-> movea.l 24(sp),a0
    7be6:	|  |  |         move.l 102(a0),d0
    7bea:	|  |  |         move.l d0,191d2 <personRegion+0x1c>
						overRegion = & personRegion;
    7bf0:	|  |  |         move.l #102838,19256 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    7bfa:	|  |  \-------> movea.l 24(sp),a0
    7bfe:	|  |            move.l 76(a0),d0
    7c02:	|  |            subq.l #1,d0
    7c04:	|  |            movea.l 24(sp),a0
    7c08:	|  |            move.l d0,76(a0)
    7c0c:	|  |            movea.l 24(sp),a0
    7c10:	|  |            move.l 76(a0),d0
    7c14:	|  |     /----- bne.w 7e3c <drawPeople+0x536>
			thisPerson -> frameNum ++;
    7c18:	|  |     |      movea.l 24(sp),a0
    7c1c:	|  |     |      move.l 72(a0),d0
    7c20:	|  |     |      addq.l #1,d0
    7c22:	|  |     |      movea.l 24(sp),a0
    7c26:	|  |     |      move.l d0,72(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    7c2a:	|  |     |      movea.l 24(sp),a0
    7c2e:	|  |     |      move.l 72(a0),d0
    7c32:	|  |     |      movea.l 24(sp),a0
    7c36:	|  |     |      movea.l 60(a0),a0
    7c3a:	|  |     |      move.l 8(a0),d1
    7c3e:	|  |     |      move.l d1,-(sp)
    7c40:	|  |     |      move.l d0,-(sp)
    7c42:	|  |     |      jsr 14822 <__modsi3>
    7c48:	|  |     |      addq.l #8,sp
    7c4a:	|  |     |      movea.l 24(sp),a0
    7c4e:	|  |     |      move.l d0,72(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    7c52:	|  |     |      movea.l 24(sp),a0
    7c56:	|  |     |      movea.l 60(a0),a0
    7c5a:	|  |     |      movea.l 4(a0),a1
    7c5e:	|  |     |      movea.l 24(sp),a0
    7c62:	|  |     |      move.l 72(a0),d0
    7c66:	|  |     |      move.l d0,d1
    7c68:	|  |     |      move.l d1,d0
    7c6a:	|  |     |      add.l d0,d0
    7c6c:	|  |     |      add.l d1,d0
    7c6e:	|  |     |      add.l d0,d0
    7c70:	|  |     |      add.l d0,d0
    7c72:	|  |     |      lea (0,a1,d0.l),a0
    7c76:	|  |     |      move.l 4(a0),d0
    7c7a:	|  |     |      movea.l 24(sp),a0
    7c7e:	|  |     |      move.l d0,76(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    7c82:	|  |     |      movea.l 24(sp),a0
    7c86:	|  |     |      move.w 92(a0),d0
    7c8a:	|  |     +----- beq.w 7e3c <drawPeople+0x536>
    7c8e:	|  |     |      tst.l 20(sp)
    7c92:	|  |     +----- beq.w 7e3c <drawPeople+0x536>
    7c96:	|  |     |      movea.l 20(sp),a0
    7c9a:	|  |     |      move.l 4(a0),d0
    7c9e:	|  |     +----- beq.w 7e3c <drawPeople+0x536>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    7ca2:	|  |     |      movea.l 20(sp),a0
    7ca6:	|  |     |      movea.l 4(a0),a1
    7caa:	|  |     |      movea.l 24(sp),a0
    7cae:	|  |     |      move.l 72(a0),d0
    7cb2:	|  |     |      move.l d0,d1
    7cb4:	|  |     |      move.l d1,d0
    7cb6:	|  |     |      add.l d0,d0
    7cb8:	|  |     |      add.l d1,d0
    7cba:	|  |     |      add.l d0,d0
    7cbc:	|  |     |      add.l d0,d0
    7cbe:	|  |     |      lea (0,a1,d0.l),a0
    7cc2:	|  |     |      move.l 8(a0),d0
    7cc6:	|  |     |  /-- ble.w 7d68 <drawPeople+0x462>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    7cca:	|  |     |  |   movea.l 20(sp),a0
    7cce:	|  |     |  |   movea.l 4(a0),a1
    7cd2:	|  |     |  |   movea.l 24(sp),a0
    7cd6:	|  |     |  |   move.l 72(a0),d0
    7cda:	|  |     |  |   move.l d0,d1
    7cdc:	|  |     |  |   move.l d1,d0
    7cde:	|  |     |  |   add.l d0,d0
    7ce0:	|  |     |  |   add.l d1,d0
    7ce2:	|  |     |  |   add.l d0,d0
    7ce4:	|  |     |  |   add.l d0,d0
    7ce6:	|  |     |  |   lea (0,a1,d0.l),a0
    7cea:	|  |     |  |   move.l 8(a0),d0
    7cee:	|  |     |  |   clr.l -(sp)
    7cf0:	|  |     |  |   move.l d0,-(sp)
    7cf2:	|  |     |  |   jsr a87c <startSound>
    7cf8:	|  |     |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    7cfa:	|  |     |  |   movea.l 24(sp),a0
    7cfe:	|  |     |  |   move.l 72(a0),d0
    7d02:	|  |     |  |   addq.l #1,d0
    7d04:	|  |     |  |   movea.l 24(sp),a0
    7d08:	|  |     |  |   move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    7d0c:	|  |     |  |   movea.l 24(sp),a0
    7d10:	|  |     |  |   move.l 72(a0),d0
    7d14:	|  |     |  |   movea.l 24(sp),a0
    7d18:	|  |     |  |   movea.l 60(a0),a0
    7d1c:	|  |     |  |   move.l 8(a0),d1
    7d20:	|  |     |  |   move.l d1,-(sp)
    7d22:	|  |     |  |   move.l d0,-(sp)
    7d24:	|  |     |  |   jsr 14822 <__modsi3>
    7d2a:	|  |     |  |   addq.l #8,sp
    7d2c:	|  |     |  |   movea.l 24(sp),a0
    7d30:	|  |     |  |   move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    7d34:	|  |     |  |   movea.l 24(sp),a0
    7d38:	|  |     |  |   movea.l 60(a0),a0
    7d3c:	|  |     |  |   movea.l 4(a0),a1
    7d40:	|  |     |  |   movea.l 24(sp),a0
    7d44:	|  |     |  |   move.l 72(a0),d0
    7d48:	|  |     |  |   move.l d0,d1
    7d4a:	|  |     |  |   move.l d1,d0
    7d4c:	|  |     |  |   add.l d0,d0
    7d4e:	|  |     |  |   add.l d1,d0
    7d50:	|  |     |  |   add.l d0,d0
    7d52:	|  |     |  |   add.l d0,d0
    7d54:	|  |     |  |   lea (0,a1,d0.l),a0
    7d58:	|  |     |  |   move.l 4(a0),d0
    7d5c:	|  |     |  |   movea.l 24(sp),a0
    7d60:	|  |     |  |   move.l d0,76(a0)
    7d64:	|  |     +--|-- bra.w 7e3c <drawPeople+0x536>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    7d68:	|  |     |  \-> movea.l 20(sp),a0
    7d6c:	|  |     |      movea.l 4(a0),a1
    7d70:	|  |     |      movea.l 24(sp),a0
    7d74:	|  |     |      move.l 72(a0),d0
    7d78:	|  |     |      move.l d0,d1
    7d7a:	|  |     |      move.l d1,d0
    7d7c:	|  |     |      add.l d0,d0
    7d7e:	|  |     |      add.l d1,d0
    7d80:	|  |     |      add.l d0,d0
    7d82:	|  |     |      add.l d0,d0
    7d84:	|  |     |      lea (0,a1,d0.l),a0
    7d88:	|  |     |      move.l 8(a0),d0
    7d8c:	|  |     +----- beq.w 7e3c <drawPeople+0x536>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    7d90:	|  |     |      movea.l 190ca <noStack>,a1
    7d96:	|  |     |      movea.l 20(sp),a0
    7d9a:	|  |     |      move.l 4(a0),d2
    7d9e:	|  |     |      movea.l 24(sp),a0
    7da2:	|  |     |      move.l 72(a0),d0
    7da6:	|  |     |      move.l d0,d1
    7da8:	|  |     |      move.l d1,d0
    7daa:	|  |     |      add.l d0,d0
    7dac:	|  |     |      add.l d1,d0
    7dae:	|  |     |      add.l d0,d0
    7db0:	|  |     |      add.l d0,d0
    7db2:	|  |     |      movea.l d2,a0
    7db4:	|  |     |      adda.l d0,a0
    7db6:	|  |     |      move.l 8(a0),d0
    7dba:	|  |     |      neg.l d0
    7dbc:	|  |     |      pea 1 <_start+0x1>
    7dc0:	|  |     |      move.l a1,-(sp)
    7dc2:	|  |     |      clr.l -(sp)
    7dc4:	|  |     |      clr.l -(sp)
    7dc6:	|  |     |      move.l d0,-(sp)
    7dc8:	|  |     |      jsr 4604 <startNewFunctionNum>
    7dce:	|  |     |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    7dd2:	|  |     |      movea.l 24(sp),a0
    7dd6:	|  |     |      move.l 72(a0),d0
    7dda:	|  |     |      addq.l #1,d0
    7ddc:	|  |     |      movea.l 24(sp),a0
    7de0:	|  |     |      move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    7de4:	|  |     |      movea.l 24(sp),a0
    7de8:	|  |     |      move.l 72(a0),d0
    7dec:	|  |     |      movea.l 24(sp),a0
    7df0:	|  |     |      movea.l 60(a0),a0
    7df4:	|  |     |      move.l 8(a0),d1
    7df8:	|  |     |      move.l d1,-(sp)
    7dfa:	|  |     |      move.l d0,-(sp)
    7dfc:	|  |     |      jsr 14822 <__modsi3>
    7e02:	|  |     |      addq.l #8,sp
    7e04:	|  |     |      movea.l 24(sp),a0
    7e08:	|  |     |      move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    7e0c:	|  |     |      movea.l 24(sp),a0
    7e10:	|  |     |      movea.l 60(a0),a0
    7e14:	|  |     |      movea.l 4(a0),a1
    7e18:	|  |     |      movea.l 24(sp),a0
    7e1c:	|  |     |      move.l 72(a0),d0
    7e20:	|  |     |      move.l d0,d1
    7e22:	|  |     |      move.l d1,d0
    7e24:	|  |     |      add.l d0,d0
    7e26:	|  |     |      add.l d1,d0
    7e28:	|  |     |      add.l d0,d0
    7e2a:	|  |     |      add.l d0,d0
    7e2c:	|  |     |      lea (0,a1,d0.l),a0
    7e30:	|  |     |      move.l 4(a0),d0
    7e34:	|  |     |      movea.l 24(sp),a0
    7e38:	|  |     |      move.l d0,76(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    7e3c:	|  |     \----> movea.l 24(sp),a0
    7e40:	|  |            move.l 24(a0),24(sp)
	while (thisPerson) {
    7e46:	|  \----------> tst.l 24(sp)
    7e4a:	\-------------- bne.w 7928 <drawPeople+0x22>
	}
}
    7e4e:	                nop
    7e50:	                nop
    7e52:	                move.l (sp)+,d2
    7e54:	                lea 24(sp),sp
    7e58:	                rts

00007e5a <findPerson>:


struct onScreenPerson * findPerson (int v) {
    7e5a:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    7e5c:	          move.l 191b2 <allPeople>,(sp)
	while (thisPerson) {
    7e62:	      /-- bra.s 7e7a <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    7e64:	/-----|-> movea.l (sp),a0
    7e66:	|     |   movea.l 102(a0),a0
    7e6a:	|     |   move.l 4(a0),d0
    7e6e:	|     |   cmp.l 8(sp),d0
    7e72:	|  /--|-- beq.s 7e80 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    7e74:	|  |  |   movea.l (sp),a0
    7e76:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    7e7a:	|  |  \-> tst.l (sp)
    7e7c:	\--|----- bne.s 7e64 <findPerson+0xa>
    7e7e:	   |  /-- bra.s 7e82 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    7e80:	   \--|-> nop
	}
	return thisPerson;
    7e82:	      \-> move.l (sp),d0
}
    7e84:	          addq.l #4,sp
    7e86:	          rts

00007e88 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    7e88:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    7e8a:	       move.l 12(sp),-(sp)
    7e8e:	       jsr 7e5a <findPerson>
    7e94:	       addq.l #4,sp
    7e96:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    7e98:	   /-- bne.s 7e9e <floatCharacter+0x16>
    7e9a:	   |   clr.w d0
    7e9c:	/--|-- bra.s 7ea8 <floatCharacter+0x20>
	moveMe -> floaty = f;
    7e9e:	|  \-> movea.l (sp),a0
    7ea0:	|      move.l 8(sp),12(a0)
	return TRUE;
    7ea6:	|      moveq #1,d0
}
    7ea8:	\----> addq.l #4,sp
    7eaa:	       rts

00007eac <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    7eac:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    7eae:	          tst.l 8(sp)
    7eb2:	      /-- bne.s 7ec0 <forceWalkingPerson+0x14>
    7eb4:	      |   tst.l 12(sp)
    7eb8:	      +-- bne.s 7ec0 <forceWalkingPerson+0x14>
    7eba:	      |   clr.w d0
    7ebc:	/-----|-- bra.w 7f52 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    7ec0:	|     \-> move.l 16(sp),-(sp)
    7ec4:	|         jsr 7e5a <findPerson>
    7eca:	|         addq.l #4,sp
    7ecc:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    7ece:	|     /-- bne.s 7ed4 <forceWalkingPerson+0x28>
    7ed0:	|     |   clr.w d0
    7ed2:	+-----|-- bra.s 7f52 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    7ed4:	|     \-> movea.l (sp),a0
    7ed6:	|         move.l 56(a0),d0
    7eda:	|     /-- beq.s 7eec <forceWalkingPerson+0x40>
    7edc:	|     |   movea.l (sp),a0
    7ede:	|     |   move.l 56(a0),d0
    7ee2:	|     |   move.l d0,-(sp)
    7ee4:	|     |   jsr 24da <abortFunction>
    7eea:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    7eec:	|     \-> movea.l (sp),a0
    7eee:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    7ef4:	|         movea.l (sp),a0
    7ef6:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    7efa:	|         movea.l (sp),a0
    7efc:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    7f02:	|         movea.l (sp),a0
    7f04:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    7f0a:	|         movea.l (sp),a0
    7f0c:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    7f12:	|         movea.l (sp),a0
    7f14:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    7f18:	|         movea.l (sp),a0
    7f1a:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    7f1e:	|         move.l (sp),-(sp)
    7f20:	|         jsr 724c <doBorderStuff>
    7f26:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    7f28:	|         pea 1 <_start+0x1>
    7f2c:	|         move.l 4(sp),-(sp)
    7f30:	|         jsr 96d8 <walkMe>
    7f36:	|         addq.l #8,sp
    7f38:	|         tst.w d0
    7f3a:	|     /-- bne.s 7f44 <forceWalkingPerson+0x98>
    7f3c:	|     |   movea.l (sp),a0
    7f3e:	|     |   move.w 54(a0),d0
    7f42:	|  /--|-- beq.s 7f50 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    7f44:	|  |  \-> movea.l (sp),a0
    7f46:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    7f4c:	|  |      moveq #1,d0
    7f4e:	+--|----- bra.s 7f52 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    7f50:	|  \----> clr.w d0
    }
}
    7f52:	\-------> addq.l #4,sp
    7f54:	          rts

00007f56 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    7f56:	                lea -56(sp),sp
    7f5a:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    7f5c:	                move.l #320,56(sp)
    7f64:	                move.l #200,52(sp)
    7f6c:	                moveq #-1,d0
    7f6e:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    7f72:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    7f7a:	                clr.l 44(sp)
    7f7e:	   /----------- bra.w 8156 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    7f82:	/--|----------> movea.l 1925a <currentFloor>,a0
    7f88:	|  |            move.l 12(a0),d1
    7f8c:	|  |            move.l 44(sp),d0
    7f90:	|  |            lsl.l #3,d0
    7f92:	|  |            movea.l d1,a0
    7f94:	|  |            adda.l d0,a0
    7f96:	|  |            move.l (a0),d0
    7f98:	|  |            move.l d0,d1
    7f9a:	|  |            subq.l #1,d1
    7f9c:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    7fa0:	|  |            clr.l 40(sp)
    7fa4:	|  |     /----- bra.w 8134 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    7fa8:	|  |  /--|----> movea.l 1925a <currentFloor>,a0
    7fae:	|  |  |  |      move.l 4(a0),d1
    7fb2:	|  |  |  |      movea.l 1925a <currentFloor>,a0
    7fb8:	|  |  |  |      movea.l 12(a0),a0
    7fbc:	|  |  |  |      move.l 44(sp),d0
    7fc0:	|  |  |  |      lsl.l #3,d0
    7fc2:	|  |  |  |      adda.l d0,a0
    7fc4:	|  |  |  |      movea.l 4(a0),a0
    7fc8:	|  |  |  |      move.l 40(sp),d0
    7fcc:	|  |  |  |      add.l d0,d0
    7fce:	|  |  |  |      add.l d0,d0
    7fd0:	|  |  |  |      adda.l d0,a0
    7fd2:	|  |  |  |      move.l (a0),d0
    7fd4:	|  |  |  |      lsl.l #3,d0
    7fd6:	|  |  |  |      movea.l d1,a0
    7fd8:	|  |  |  |      adda.l d0,a0
    7fda:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    7fde:	|  |  |  |      movea.l 1925a <currentFloor>,a0
    7fe4:	|  |  |  |      move.l 4(a0),d1
    7fe8:	|  |  |  |      movea.l 1925a <currentFloor>,a0
    7fee:	|  |  |  |      movea.l 12(a0),a0
    7ff2:	|  |  |  |      move.l 44(sp),d0
    7ff6:	|  |  |  |      lsl.l #3,d0
    7ff8:	|  |  |  |      adda.l d0,a0
    7ffa:	|  |  |  |      movea.l 4(a0),a0
    7ffe:	|  |  |  |      move.l 40(sp),d0
    8002:	|  |  |  |      add.l d0,d0
    8004:	|  |  |  |      add.l d0,d0
    8006:	|  |  |  |      adda.l d0,a0
    8008:	|  |  |  |      move.l (a0),d0
    800a:	|  |  |  |      lsl.l #3,d0
    800c:	|  |  |  |      movea.l d1,a0
    800e:	|  |  |  |      adda.l d0,a0
    8010:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    8016:	|  |  |  |      movea.l 1925a <currentFloor>,a0
    801c:	|  |  |  |      move.l 4(a0),d1
    8020:	|  |  |  |      movea.l 1925a <currentFloor>,a0
    8026:	|  |  |  |      movea.l 12(a0),a0
    802a:	|  |  |  |      move.l 44(sp),d0
    802e:	|  |  |  |      lsl.l #3,d0
    8030:	|  |  |  |      adda.l d0,a0
    8032:	|  |  |  |      movea.l 4(a0),a0
    8036:	|  |  |  |      move.l 36(sp),d0
    803a:	|  |  |  |      add.l d0,d0
    803c:	|  |  |  |      add.l d0,d0
    803e:	|  |  |  |      adda.l d0,a0
    8040:	|  |  |  |      move.l (a0),d0
    8042:	|  |  |  |      lsl.l #3,d0
    8044:	|  |  |  |      movea.l d1,a0
    8046:	|  |  |  |      adda.l d0,a0
    8048:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    804c:	|  |  |  |      movea.l 1925a <currentFloor>,a0
    8052:	|  |  |  |      move.l 4(a0),d1
    8056:	|  |  |  |      movea.l 1925a <currentFloor>,a0
    805c:	|  |  |  |      movea.l 12(a0),a0
    8060:	|  |  |  |      move.l 44(sp),d0
    8064:	|  |  |  |      lsl.l #3,d0
    8066:	|  |  |  |      adda.l d0,a0
    8068:	|  |  |  |      movea.l 4(a0),a0
    806c:	|  |  |  |      move.l 36(sp),d0
    8070:	|  |  |  |      add.l d0,d0
    8072:	|  |  |  |      add.l d0,d0
    8074:	|  |  |  |      adda.l d0,a0
    8076:	|  |  |  |      move.l (a0),d0
    8078:	|  |  |  |      lsl.l #3,d0
    807a:	|  |  |  |      movea.l d1,a0
    807c:	|  |  |  |      adda.l d0,a0
    807e:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    8084:	|  |  |  |      movea.l 68(sp),a0
    8088:	|  |  |  |      move.l (a0),d1
    808a:	|  |  |  |      movea.l 64(sp),a0
    808e:	|  |  |  |      move.l (a0),d0
    8090:	|  |  |  |      move.l d1,-(sp)
    8092:	|  |  |  |      move.l d0,-(sp)
    8094:	|  |  |  |      move.l 24(sp),-(sp)
    8098:	|  |  |  |      move.l 32(sp),-(sp)
    809c:	|  |  |  |      move.l 40(sp),-(sp)
    80a0:	|  |  |  |      move.l 48(sp),-(sp)
    80a4:	|  |  |  |      lea 28(sp),a0
    80a8:	|  |  |  |      move.l a0,-(sp)
    80aa:	|  |  |  |      lea 36(sp),a0
    80ae:	|  |  |  |      move.l a0,-(sp)
    80b0:	|  |  |  |      jsr 12c18 <closestPointOnLine>
    80b6:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    80ba:	|  |  |  |      movea.l 64(sp),a0
    80be:	|  |  |  |      move.l (a0),d0
    80c0:	|  |  |  |      move.l 8(sp),d1
    80c4:	|  |  |  |      move.l d0,d2
    80c6:	|  |  |  |      sub.l d1,d2
    80c8:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    80cc:	|  |  |  |      movea.l 68(sp),a0
    80d0:	|  |  |  |      move.l (a0),d0
    80d2:	|  |  |  |      move.l 4(sp),d1
    80d6:	|  |  |  |      move.l d0,d2
    80d8:	|  |  |  |      sub.l d1,d2
    80da:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    80de:	|  |  |  |      move.l 28(sp),-(sp)
    80e2:	|  |  |  |      move.l 32(sp),-(sp)
    80e6:	|  |  |  |      jsr 14776 <__mulsi3>
    80ec:	|  |  |  |      addq.l #8,sp
    80ee:	|  |  |  |      move.l d0,d2
    80f0:	|  |  |  |      move.l 24(sp),-(sp)
    80f4:	|  |  |  |      move.l 28(sp),-(sp)
    80f8:	|  |  |  |      jsr 14776 <__mulsi3>
    80fe:	|  |  |  |      addq.l #8,sp
    8100:	|  |  |  |      move.l d2,d1
    8102:	|  |  |  |      add.l d0,d1
    8104:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    8108:	|  |  |  |      move.l 12(sp),d2
    810c:	|  |  |  |      cmp.l 32(sp),d2
    8110:	|  |  |  |  /-- bge.s 812a <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    8112:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    8118:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    811e:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    8124:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    812a:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    8130:	|  |  |  |      addq.l #1,40(sp)
    8134:	|  |  |  \----> movea.l 1925a <currentFloor>,a0
    813a:	|  |  |         move.l 12(a0),d1
    813e:	|  |  |         move.l 44(sp),d0
    8142:	|  |  |         lsl.l #3,d0
    8144:	|  |  |         movea.l d1,a0
    8146:	|  |  |         adda.l d0,a0
    8148:	|  |  |         move.l (a0),d0
    814a:	|  |  |         cmp.l 40(sp),d0
    814e:	|  |  \-------- bgt.w 7fa8 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    8152:	|  |            addq.l #1,44(sp)
    8156:	|  \----------> movea.l 1925a <currentFloor>,a0
    815c:	|               move.l 8(a0),d0
    8160:	|               cmp.l 44(sp),d0
    8164:	\-------------- bgt.w 7f82 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    8168:	                moveq #-1,d0
    816a:	                cmp.l 48(sp),d0
    816e:	            /-- bne.s 8174 <handleClosestPoint+0x21e>
    8170:	            |   clr.w d0
    8172:	         /--|-- bra.s 818e <handleClosestPoint+0x238>
	*setX = gotX;
    8174:	         |  \-> movea.l 64(sp),a0
    8178:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    817c:	         |      movea.l 68(sp),a0
    8180:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    8184:	         |      movea.l 72(sp),a0
    8188:	         |      move.l 48(sp),(a0)

	return TRUE;
    818c:	         |      moveq #1,d0
}
    818e:	         \----> move.l (sp)+,d2
    8190:	                lea 56(sp),sp
    8194:	                rts

00008196 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    8196:	clr.l 191c6 <personRegion+0x10>
	personRegion.sY = 0;
    819c:	clr.l 191ca <personRegion+0x14>
	personRegion.di = -1;
    81a2:	moveq #-1,d0
    81a4:	move.l d0,191ce <personRegion+0x18>
	allScreenRegions = NULL;
    81aa:	clr.l 19252 <allScreenRegions>

	return TRUE;
    81b0:	moveq #1,d0
}
    81b2:	rts

000081b4 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    81b4:	          subq.l #4,sp
    81b6:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    81b8:	          tst.l 12(sp)
    81bc:	      /-- bne.s 81c4 <jumpPerson+0x10>
    81be:	      |   tst.l 16(sp)
    81c2:	/-----|-- beq.s 8238 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    81c4:	|     \-> move.l 20(sp),-(sp)
    81c8:	|         jsr 7e5a <findPerson>
    81ce:	|         addq.l #4,sp
    81d0:	|         move.l d0,4(sp)
    if (!moveMe) return;
    81d4:	|  /----- beq.s 823c <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    81d6:	|  |      movea.l 4(sp),a0
    81da:	|  |      move.l 56(a0),d0
    81de:	|  |  /-- beq.s 81f2 <jumpPerson+0x3e>
    81e0:	|  |  |   movea.l 4(sp),a0
    81e4:	|  |  |   move.l 56(a0),d0
    81e8:	|  |  |   move.l d0,-(sp)
    81ea:	|  |  |   jsr 24da <abortFunction>
    81f0:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    81f2:	|  |  \-> movea.l 4(sp),a0
    81f6:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    81fa:	|  |      movea.l 4(sp),a0
    81fe:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    8202:	|  |      movea.l 4(sp),a0
    8206:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    820a:	|  |      move.l 16(sp),-(sp)
    820e:	|  |      jsr 141f4 <__floatsisf>
    8214:	|  |      addq.l #4,sp
    8216:	|  |      move.l d0,d2
    8218:	|  |      move.l 12(sp),-(sp)
    821c:	|  |      jsr 141f4 <__floatsisf>
    8222:	|  |      addq.l #4,sp
    8224:	|  |      move.l d2,-(sp)
    8226:	|  |      move.l d0,-(sp)
    8228:	|  |      move.l 12(sp),-(sp)
    822c:	|  |      jsr 85a2 <moveAndScale>
    8232:	|  |      lea 12(sp),sp
    8236:	|  |  /-- bra.s 823e <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    8238:	\--|--|-> nop
    823a:	   |  +-- bra.s 823e <jumpPerson+0x8a>
    if (!moveMe) return;
    823c:	   \--|-> nop
}
    823e:	      \-> move.l (sp)+,d2
    8240:	          addq.l #4,sp
    8242:	          rts

00008244 <killAllPeople>:


void killAllPeople () {
    8244:	          subq.l #8,sp
    8246:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    8248:	   /----- bra.s 82b4 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    824a:	/--|----> movea.l 191b2 <allPeople>,a0
    8250:	|  |      move.l 56(a0),d0
    8254:	|  |  /-- beq.s 826a <killAllPeople+0x26>
    8256:	|  |  |   movea.l 191b2 <allPeople>,a0
    825c:	|  |  |   move.l 56(a0),d0
    8260:	|  |  |   move.l d0,-(sp)
    8262:	|  |  |   jsr 24da <abortFunction>
    8268:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    826a:	|  |  \-> movea.l 191b2 <allPeople>,a0
    8270:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    8274:	|  |      move.l 191b2 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    827c:	|  |      movea.l 191b2 <allPeople>,a0
    8282:	|  |      move.l 24(a0),d0
    8286:	|  |      move.l d0,191b2 <allPeople>
		removeObjectType (killPeople -> thisType);
    828c:	|  |      movea.l 8(sp),a0
    8290:	|  |      move.l 102(a0),d0
    8294:	|  |      move.l d0,-(sp)
    8296:	|  |      jsr af4e <removeObjectType>
    829c:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    829e:	|  |      move.l 8(sp),4(sp)
    82a4:	|  |      move.l 190fa <SysBase>,d0
    82aa:	|  |      movea.l d0,a6
    82ac:	|  |      movea.l 4(sp),a1
    82b0:	|  |      jsr -690(a6)
	while (allPeople) {
    82b4:	|  \----> move.l 191b2 <allPeople>,d0
    82ba:	\-------- bne.s 824a <killAllPeople+0x6>
	}
}
    82bc:	          nop
    82be:	          nop
    82c0:	          movea.l (sp)+,a6
    82c2:	          addq.l #8,sp
    82c4:	          rts

000082c6 <killMostPeople>:

void killMostPeople() {
    82c6:	          lea -12(sp),sp
    82ca:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    82cc:	          move.l #102834,12(sp)

    while (*lookyHere) {
    82d4:	   /----- bra.w 835a <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    82d8:	/--|----> movea.l 12(sp),a0
    82dc:	|  |      movea.l (a0),a0
    82de:	|  |      move.l 106(a0),d0
    82e2:	|  |      moveq #32,d1
    82e4:	|  |      and.l d1,d0
    82e6:	|  |  /-- beq.s 82f8 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    82e8:	|  |  |   movea.l 12(sp),a0
    82ec:	|  |  |   move.l (a0),d0
    82ee:	|  |  |   moveq #24,d1
    82f0:	|  |  |   add.l d0,d1
    82f2:	|  |  |   move.l d1,12(sp)
    82f6:	|  +--|-- bra.s 835a <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    82f8:	|  |  \-> movea.l 12(sp),a0
    82fc:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    8300:	|  |      movea.l 8(sp),a0
    8304:	|  |      move.l 24(a0),d0
    8308:	|  |      movea.l 12(sp),a0
    830c:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    830e:	|  |      movea.l 8(sp),a0
    8312:	|  |      move.l 56(a0),d0
    8316:	|  |  /-- beq.s 832a <killMostPeople+0x64>
    8318:	|  |  |   movea.l 8(sp),a0
    831c:	|  |  |   move.l 56(a0),d0
    8320:	|  |  |   move.l d0,-(sp)
    8322:	|  |  |   jsr 24da <abortFunction>
    8328:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    832a:	|  |  \-> movea.l 8(sp),a0
    832e:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    8332:	|  |      movea.l 8(sp),a0
    8336:	|  |      move.l 102(a0),d0
    833a:	|  |      move.l d0,-(sp)
    833c:	|  |      jsr af4e <removeObjectType>
    8342:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    8344:	|  |      move.l 8(sp),4(sp)
    834a:	|  |      move.l 190fa <SysBase>,d0
    8350:	|  |      movea.l d0,a6
    8352:	|  |      movea.l 4(sp),a1
    8356:	|  |      jsr -690(a6)
    while (*lookyHere) {
    835a:	|  \----> movea.l 12(sp),a0
    835e:	|         move.l (a0),d0
    8360:	\-------- bne.w 82d8 <killMostPeople+0x12>
        }
    }
}
    8364:	          nop
    8366:	          nop
    8368:	          movea.l (sp)+,a6
    836a:	          lea 12(sp),sp
    836e:	          rts

00008370 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    8370:	clr.l -(sp)
    8372:	move.l sp,d0
    8374:	addq.l #8,d0
    8376:	move.l d0,-(sp)
    8378:	jsr 5c60 <setFrames>
    837e:	addq.l #8,sp
}
    8380:	nop
    8382:	rts

00008384 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    8384:	          lea -12(sp),sp
    8388:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    838a:	          tst.l 20(sp)
    838e:	      /-- bne.s 839c <makeWalkingPerson+0x18>
    8390:	      |   tst.l 24(sp)
    8394:	      +-- bne.s 839c <makeWalkingPerson+0x18>
    8396:	      |   clr.w d0
    8398:	/-----|-- bra.w 8534 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    839c:	|     \-> movea.l 1925a <currentFloor>,a0
    83a2:	|         move.l 8(a0),d0
    83a6:	|     /-- bne.s 83ae <makeWalkingPerson+0x2a>
    83a8:	|     |   clr.w d0
    83aa:	+-----|-- bra.w 8534 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    83ae:	|     \-> move.l 28(sp),-(sp)
    83b2:	|         jsr 7e5a <findPerson>
    83b8:	|         addq.l #4,sp
    83ba:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    83be:	|     /-- bne.s 83c6 <makeWalkingPerson+0x42>
    83c0:	|     |   clr.w d0
    83c2:	+-----|-- bra.w 8534 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    83c6:	|     \-> movea.l 12(sp),a0
    83ca:	|         move.l 56(a0),d0
    83ce:	|     /-- beq.s 83e2 <makeWalkingPerson+0x5e>
    83d0:	|     |   movea.l 12(sp),a0
    83d4:	|     |   move.l 56(a0),d0
    83d8:	|     |   move.l d0,-(sp)
    83da:	|     |   jsr 24da <abortFunction>
    83e0:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    83e2:	|     \-> movea.l 12(sp),a0
    83e6:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    83ea:	|         movea.l 12(sp),a0
    83ee:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    83f4:	|         movea.l 12(sp),a0
    83f8:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    83fe:	|         movea.l 12(sp),a0
    8402:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    8408:	|         movea.l 12(sp),a0
    840c:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    8412:	|         move.l 24(sp),-(sp)
    8416:	|         move.l 24(sp),-(sp)
    841a:	|         jsr 1311a <inFloor>
    8420:	|         addq.l #8,sp
    8422:	|         movea.l 12(sp),a0
    8426:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    842a:	|         movea.l 12(sp),a0
    842e:	|         move.l 48(a0),d0
    8432:	|         moveq #-1,d1
    8434:	|         cmp.l d0,d1
    8436:	|     /-- bne.s 8466 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    8438:	|     |   movea.w #48,a0
    843c:	|     |   adda.l 12(sp),a0
    8440:	|     |   moveq #32,d1
    8442:	|     |   add.l 12(sp),d1
    8446:	|     |   moveq #28,d0
    8448:	|     |   add.l 12(sp),d0
    844c:	|     |   move.l a0,-(sp)
    844e:	|     |   move.l d1,-(sp)
    8450:	|     |   move.l d0,-(sp)
    8452:	|     |   jsr 7f56 <handleClosestPoint>
    8458:	|     |   lea 12(sp),sp
    845c:	|     |   tst.w d0
    845e:	|     +-- bne.s 8466 <makeWalkingPerson+0xe2>
    8460:	|     |   clr.w d0
    8462:	+-----|-- bra.w 8534 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    8466:	|     \-> movea.l 12(sp),a0
    846a:	|         move.l 4(a0),d0
    846e:	|         move.l d0,-(sp)
    8470:	|         jsr 1418c <__fixsfsi>
    8476:	|         addq.l #4,sp
    8478:	|         move.l d0,d2
    847a:	|         movea.l 12(sp),a0
    847e:	|         move.l (a0),d0
    8480:	|         move.l d0,-(sp)
    8482:	|         jsr 1418c <__fixsfsi>
    8488:	|         addq.l #4,sp
    848a:	|         move.l d2,-(sp)
    848c:	|         move.l d0,-(sp)
    848e:	|         jsr 1311a <inFloor>
    8494:	|         addq.l #8,sp
    8496:	|         movea.l 12(sp),a0
    849a:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    849e:	|         movea.l 12(sp),a0
    84a2:	|         move.l 44(a0),d0
    84a6:	|         moveq #-1,d1
    84a8:	|         cmp.l d0,d1
    84aa:	|     /-- bne.s 84fc <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    84ac:	|     |   movea.l 12(sp),a0
    84b0:	|     |   move.l (a0),d0
    84b2:	|     |   move.l d0,-(sp)
    84b4:	|     |   jsr 1418c <__fixsfsi>
    84ba:	|     |   addq.l #4,sp
    84bc:	|     |   move.l d0,8(sp)
    84c0:	|     |   movea.l 12(sp),a0
    84c4:	|     |   move.l 4(a0),d0
    84c8:	|     |   move.l d0,-(sp)
    84ca:	|     |   jsr 1418c <__fixsfsi>
    84d0:	|     |   addq.l #4,sp
    84d2:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    84d6:	|     |   moveq #44,d0
    84d8:	|     |   add.l 12(sp),d0
    84dc:	|     |   move.l d0,-(sp)
    84de:	|     |   lea 8(sp),a0
    84e2:	|     |   move.l a0,-(sp)
    84e4:	|     |   moveq #16,d0
    84e6:	|     |   add.l sp,d0
    84e8:	|     |   move.l d0,-(sp)
    84ea:	|     |   jsr 7f56 <handleClosestPoint>
    84f0:	|     |   lea 12(sp),sp
    84f4:	|     |   tst.w d0
    84f6:	|     +-- bne.s 84fc <makeWalkingPerson+0x178>
    84f8:	|     |   clr.w d0
    84fa:	+-----|-- bra.s 8534 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    84fc:	|     \-> move.l 12(sp),-(sp)
    8500:	|         jsr 724c <doBorderStuff>
    8506:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    8508:	|         clr.l -(sp)
    850a:	|         move.l 16(sp),-(sp)
    850e:	|         jsr 96d8 <walkMe>
    8514:	|         addq.l #8,sp
    8516:	|         tst.w d0
    8518:	|     /-- bne.s 8524 <makeWalkingPerson+0x1a0>
    851a:	|     |   movea.l 12(sp),a0
    851e:	|     |   move.w 54(a0),d0
    8522:	|  /--|-- beq.s 8532 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    8524:	|  |  \-> movea.l 12(sp),a0
    8528:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    852e:	|  |      moveq #1,d0
    8530:	+--|----- bra.s 8534 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    8532:	|  \----> clr.w d0
	}
}
    8534:	\-------> move.l (sp)+,d2
    8536:	          lea 12(sp),sp
    853a:	          rts

0000853c <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    853c:	       lea -16(sp),sp
    8540:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    8542:	       moveq #12,d0
    8544:	       move.l d0,16(sp)
    8548:	       clr.l 12(sp)
    854c:	       move.l 190fa <SysBase>,d0
    8552:	       movea.l d0,a6
    8554:	       move.l 16(sp),d0
    8558:	       move.l 12(sp),d1
    855c:	       jsr -684(a6)
    8560:	       move.l d0,8(sp)
    8564:	       move.l 8(sp),d0
    8568:	       move.l d0,4(sp)
    if(newAnim == 0) {
    856c:	   /-- bne.s 8580 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    856e:	   |   pea 15a19 <custom.c.64ca0e9f+0xd43>
    8574:	   |   jsr 13db8 <KPrintF>
    857a:	   |   addq.l #4,sp
        return NULL;    
    857c:	   |   moveq #0,d0
    857e:	/--|-- bra.s 859a <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    8580:	|  \-> movea.l 4(sp),a0
    8584:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    8586:	|      movea.l 4(sp),a0
    858a:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    858e:	|      movea.l 4(sp),a0
    8592:	|      clr.l 4(a0)
	return newAnim;
    8596:	|      move.l 4(sp),d0
}
    859a:	\----> movea.l (sp)+,a6
    859c:	       lea 16(sp),sp
    85a0:	       rts

000085a2 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    85a2:	    move.l d2,-(sp)
	me->x = x;
    85a4:	    movea.l 8(sp),a0
    85a8:	    move.l 12(sp),(a0)
	me->y = y;
    85ac:	    movea.l 8(sp),a0
    85b0:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    85b6:	    movea.l 8(sp),a0
    85ba:	    move.l 106(a0),d0
    85be:	    moveq #2,d1
    85c0:	    and.l d1,d0
    85c2:	/-- bne.s 861a <moveAndScale+0x78>
    85c4:	|   move.w 18aa8 <scaleDivide>,d0
    85ca:	+-- beq.s 861a <moveAndScale+0x78>
    85cc:	|   movea.l 8(sp),a0
    85d0:	|   move.l 4(a0),d2
    85d4:	|   move.w 18aa6 <scaleHorizon>,d0
    85da:	|   movea.w d0,a0
    85dc:	|   move.l a0,-(sp)
    85de:	|   jsr 141f4 <__floatsisf>
    85e4:	|   addq.l #4,sp
    85e6:	|   move.l d0,-(sp)
    85e8:	|   move.l d2,-(sp)
    85ea:	|   jsr 144e8 <__subsf3>
    85f0:	|   addq.l #8,sp
    85f2:	|   move.l d0,d2
    85f4:	|   move.w 18aa8 <scaleDivide>,d0
    85fa:	|   movea.w d0,a0
    85fc:	|   move.l a0,-(sp)
    85fe:	|   jsr 141f4 <__floatsisf>
    8604:	|   addq.l #4,sp
    8606:	|   move.l d0,-(sp)
    8608:	|   move.l d2,-(sp)
    860a:	|   jsr 140a0 <__divsf3>
    8610:	|   addq.l #8,sp
    8612:	|   movea.l 8(sp),a0
    8616:	|   move.l d0,20(a0)
}
    861a:	\-> nop
    861c:	    move.l (sp)+,d2
    861e:	    rts

00008620 <removeOneCharacter>:

void removeOneCharacter (int i) {
    8620:	          lea -12(sp),sp
    8624:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);
    8626:	          move.l 20(sp),-(sp)
    862a:	          jsr 7e5a <findPerson>
    8630:	          addq.l #4,sp
    8632:	          move.l d0,8(sp)

    if (p) {
    8636:	/-------- beq.w 86e2 <removeOneCharacter+0xc2>
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    863a:	|         move.l 19256 <overRegion>,d0
    8640:	|         cmpi.l #102838,d0
    8646:	|     /-- bne.s 8664 <removeOneCharacter+0x44>
    8648:	|     |   movea.l 19256 <overRegion>,a0
    864e:	|     |   move.l 28(a0),d1
    8652:	|     |   movea.l 8(sp),a0
    8656:	|     |   move.l 102(a0),d0
    865a:	|     |   cmp.l d1,d0
    865c:	|     +-- bne.s 8664 <removeOneCharacter+0x44>
            overRegion = NULL;
    865e:	|     |   clr.l 19256 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    8664:	|     \-> movea.l 8(sp),a0
    8668:	|         move.l 56(a0),d0
    866c:	|     /-- beq.s 8680 <removeOneCharacter+0x60>
    866e:	|     |   movea.l 8(sp),a0
    8672:	|     |   move.l 56(a0),d0
    8676:	|     |   move.l d0,-(sp)
    8678:	|     |   jsr 24da <abortFunction>
    867e:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    8680:	|     \-> movea.l 8(sp),a0
    8684:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

        for (killPeople = &allPeople;
    8688:	|         move.l #102834,12(sp)
    8690:	|     /-- bra.s 86a0 <removeOneCharacter+0x80>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    8692:	|  /--|-> movea.l 12(sp),a0
    8696:	|  |  |   move.l (a0),d0
    8698:	|  |  |   moveq #24,d1
    869a:	|  |  |   add.l d0,d1
    869c:	|  |  |   move.l d1,12(sp)
            *killPeople != p;
    86a0:	|  |  \-> movea.l 12(sp),a0
    86a4:	|  |      move.l (a0),d0
    86a6:	|  |      cmp.l 8(sp),d0
    86aa:	|  \----- bne.s 8692 <removeOneCharacter+0x72>

        *killPeople = p->next;
    86ac:	|         movea.l 8(sp),a0
    86b0:	|         move.l 24(a0),d0
    86b4:	|         movea.l 12(sp),a0
    86b8:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    86ba:	|         movea.l 8(sp),a0
    86be:	|         move.l 102(a0),d0
    86c2:	|         move.l d0,-(sp)
    86c4:	|         jsr af4e <removeObjectType>
    86ca:	|         addq.l #4,sp
        FreeVec(p);
    86cc:	|         move.l 8(sp),4(sp)
    86d2:	|         move.l 190fa <SysBase>,d0
    86d8:	|         movea.l d0,a6
    86da:	|         movea.l 4(sp),a1
    86de:	|         jsr -690(a6)
    }
}
    86e2:	\-------> nop
    86e4:	          movea.l (sp)+,a6
    86e6:	          lea 12(sp),sp
    86ea:	          rts

000086ec <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    86ec:	       subq.l #8,sp
    86ee:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    86f0:	       movea.l 16(sp),a0
    86f4:	       movea.l 68(a0),a0
    86f8:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    86fe:	       movea.l 16(sp),a0
    8702:	       move.l 80(a0),d2
    8706:	       move.l 4(sp),-(sp)
    870a:	       pea b4 <_start+0xb4>
    870e:	       jsr 147f4 <__divsi3>
    8714:	       addq.l #8,sp
    8716:	       add.l d2,d0
    8718:	       move.l d0,d1
    871a:	       addi.l #180,d1
    8720:	       movea.l 16(sp),a0
    8724:	       move.l 88(a0),d0
    8728:	       move.l d1,d2
    872a:	       add.l d0,d2
    872c:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    8730:	   /-- bra.s 873a <rethinkAngle+0x4e>
    8732:	/--|-> addi.l #-360,8(sp)
    873a:	|  \-> cmpi.l #359,8(sp)
    8742:	\----- bgt.s 8732 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    8744:	       move.l 4(sp),-(sp)
    8748:	       move.l 12(sp),-(sp)
    874c:	       jsr 14776 <__mulsi3>
    8752:	       addq.l #8,sp
    8754:	       pea 168 <decodeFilename+0x50>
    8758:	       move.l d0,-(sp)
    875a:	       jsr 147f4 <__divsi3>
    8760:	       addq.l #8,sp
    8762:	       movea.l 16(sp),a0
    8766:	       move.l d0,94(a0)
}
    876a:	       nop
    876c:	       move.l (sp)+,d2
    876e:	       addq.l #8,sp
    8770:	       rts

00008772 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    8772:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    8774:	          movea.l 8(sp),a0
    8778:	          move.l 8(a0),d0
    877c:	          move.l 12(sp),-(sp)
    8780:	          move.l d0,-(sp)
    8782:	          jsr 8d0 <put2bytes>
    8788:	          addq.l #8,sp
	if (p -> numFrames) {
    878a:	          movea.l 8(sp),a0
    878e:	          move.l 8(a0),d0
    8792:	/-------- beq.w 8836 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    8796:	|         movea.l 8(sp),a0
    879a:	|         movea.l (a0),a0
    879c:	|         move.l (a0),d0
    879e:	|         move.l 12(sp),-(sp)
    87a2:	|         move.l d0,-(sp)
    87a4:	|         jsr 958 <put4bytes>
    87aa:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    87ac:	|         clr.l (sp)
    87ae:	|     /-- bra.s 8828 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    87b0:	|  /--|-> movea.l 8(sp),a0
    87b4:	|  |  |   movea.l 4(a0),a0
    87b8:	|  |  |   move.l (sp),d1
    87ba:	|  |  |   move.l d1,d0
    87bc:	|  |  |   add.l d0,d0
    87be:	|  |  |   add.l d1,d0
    87c0:	|  |  |   add.l d0,d0
    87c2:	|  |  |   add.l d0,d0
    87c4:	|  |  |   adda.l d0,a0
    87c6:	|  |  |   move.l (a0),d0
    87c8:	|  |  |   move.l 12(sp),-(sp)
    87cc:	|  |  |   move.l d0,-(sp)
    87ce:	|  |  |   jsr 958 <put4bytes>
    87d4:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    87d6:	|  |  |   movea.l 8(sp),a0
    87da:	|  |  |   movea.l 4(a0),a0
    87de:	|  |  |   move.l (sp),d1
    87e0:	|  |  |   move.l d1,d0
    87e2:	|  |  |   add.l d0,d0
    87e4:	|  |  |   add.l d1,d0
    87e6:	|  |  |   add.l d0,d0
    87e8:	|  |  |   add.l d0,d0
    87ea:	|  |  |   adda.l d0,a0
    87ec:	|  |  |   move.l 4(a0),d0
    87f0:	|  |  |   move.l 12(sp),-(sp)
    87f4:	|  |  |   move.l d0,-(sp)
    87f6:	|  |  |   jsr 958 <put4bytes>
    87fc:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    87fe:	|  |  |   movea.l 8(sp),a0
    8802:	|  |  |   movea.l 4(a0),a0
    8806:	|  |  |   move.l (sp),d1
    8808:	|  |  |   move.l d1,d0
    880a:	|  |  |   add.l d0,d0
    880c:	|  |  |   add.l d1,d0
    880e:	|  |  |   add.l d0,d0
    8810:	|  |  |   add.l d0,d0
    8812:	|  |  |   adda.l d0,a0
    8814:	|  |  |   move.l 8(a0),d0
    8818:	|  |  |   move.l 12(sp),-(sp)
    881c:	|  |  |   move.l d0,-(sp)
    881e:	|  |  |   jsr 958 <put4bytes>
    8824:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    8826:	|  |  |   addq.l #1,(sp)
    8828:	|  |  \-> movea.l 8(sp),a0
    882c:	|  |      move.l 8(a0),d0
    8830:	|  |      cmp.l (sp),d0
    8832:	|  \----- bgt.w 87b0 <saveAnim+0x3e>
		}
	}
	return TRUE;
    8836:	\-------> moveq #1,d0
}
    8838:	          addq.l #4,sp
    883a:	          rts

0000883c <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    883c:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    883e:	             movea.l 8(sp),a0
    8842:	             move.l 4(a0),d0
    8846:	             move.l 12(sp),-(sp)
    884a:	             move.l d0,-(sp)
    884c:	             jsr 8d0 <put2bytes>
    8852:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    8854:	             clr.l (sp)
    8856:	   /-------- bra.s 8882 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    8858:	/--|-------> movea.l 8(sp),a0
    885c:	|  |         move.l (a0),d1
    885e:	|  |         move.l (sp),d0
    8860:	|  |         add.l d0,d0
    8862:	|  |         add.l d0,d0
    8864:	|  |         movea.l d1,a0
    8866:	|  |         adda.l d0,a0
    8868:	|  |         move.l (a0),d0
    886a:	|  |         move.l 12(sp),-(sp)
    886e:	|  |         move.l d0,-(sp)
    8870:	|  |         jsr 8772 <saveAnim>
    8876:	|  |         addq.l #8,sp
    8878:	|  |         tst.w d0
    887a:	|  |     /-- bne.s 8880 <saveCostume+0x44>
    887c:	|  |     |   clr.w d0
    887e:	|  |  /--|-- bra.s 8896 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    8880:	|  |  |  \-> addq.l #1,(sp)
    8882:	|  \--|----> movea.l 8(sp),a0
    8886:	|     |      move.l 4(a0),d1
    888a:	|     |      move.l d1,d0
    888c:	|     |      add.l d0,d0
    888e:	|     |      add.l d1,d0
    8890:	|     |      cmp.l (sp),d0
    8892:	\-----|----- bgt.s 8858 <saveCostume+0x1c>
	}

	return TRUE;
    8894:	      |      moveq #1,d0
}
    8896:	      \----> addq.l #4,sp
    8898:	             rts

0000889a <savePeople>:

BOOL savePeople (BPTR fp) {
    889a:	             lea -144(sp),sp
    889e:	             move.l a6,-(sp)
    88a0:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    88a2:	             move.l 191b2 <allPeople>,148(sp)
	int countPeople = 0, a;
    88aa:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    88ae:	             move.w 18aa6 <scaleHorizon>,d0
    88b4:	             movea.w d0,a0
    88b6:	             move.l 156(sp),-(sp)
    88ba:	             move.l a0,-(sp)
    88bc:	             jsr a9c <putSigned>
    88c2:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    88c4:	             move.w 18aa8 <scaleDivide>,d0
    88ca:	             movea.w d0,a0
    88cc:	             move.l 156(sp),-(sp)
    88d0:	             move.l a0,-(sp)
    88d2:	             jsr a9c <putSigned>
    88d8:	             addq.l #8,sp

	while (me) {
    88da:	         /-- bra.s 88ea <savePeople+0x50>
		countPeople ++;
    88dc:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    88e0:	      |  |   movea.l 148(sp),a0
    88e4:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    88ea:	      |  \-> tst.l 148(sp)
    88ee:	      \----- bne.s 88dc <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    88f0:	             move.l 156(sp),-(sp)
    88f4:	             move.l 148(sp),-(sp)
    88f8:	             jsr 8d0 <put2bytes>
    88fe:	             addq.l #8,sp

	me = allPeople;
    8900:	             move.l 191b2 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    8908:	             clr.l 140(sp)
    890c:	   /-------- bra.w 8d64 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    8910:	/--|-------> movea.l 148(sp),a0
    8914:	|  |         move.l (a0),d0
    8916:	|  |         move.l 156(sp),-(sp)
    891a:	|  |         move.l d0,-(sp)
    891c:	|  |         jsr a46 <putFloat>
    8922:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    8924:	|  |         movea.l 148(sp),a0
    8928:	|  |         move.l 4(a0),d0
    892c:	|  |         move.l 156(sp),-(sp)
    8930:	|  |         move.l d0,-(sp)
    8932:	|  |         jsr a46 <putFloat>
    8938:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    893a:	|  |         movea.l 148(sp),a0
    893e:	|  |         move.l 68(a0),d0
    8942:	|  |         move.l 156(sp),-(sp)
    8946:	|  |         move.l d0,-(sp)
    8948:	|  |         jsr 883c <saveCostume>
    894e:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    8950:	|  |         movea.l 148(sp),a0
    8954:	|  |         move.l 60(a0),d0
    8958:	|  |         move.l 156(sp),-(sp)
    895c:	|  |         move.l d0,-(sp)
    895e:	|  |         jsr 8772 <saveAnim>
    8964:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    8966:	|  |         move.l 156(sp),136(sp)
    896c:	|  |         movea.l 148(sp),a0
    8970:	|  |         move.l 60(a0),d1
    8974:	|  |         movea.l 148(sp),a0
    8978:	|  |         move.l 64(a0),d0
    897c:	|  |         cmp.l d1,d0
    897e:	|  |         seq d0
    8980:	|  |         neg.b d0
    8982:	|  |         move.b d0,d0
    8984:	|  |         andi.l #255,d0
    898a:	|  |         move.l d0,132(sp)
    898e:	|  |         move.l 19102 <DOSBase>,d0
    8994:	|  |         movea.l d0,a6
    8996:	|  |         move.l 136(sp),d1
    899a:	|  |         move.l 132(sp),d2
    899e:	|  |         jsr -312(a6)
    89a2:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    89a6:	|  |         movea.l 148(sp),a0
    89aa:	|  |         move.l 20(a0),d0
    89ae:	|  |         move.l 156(sp),-(sp)
    89b2:	|  |         move.l d0,-(sp)
    89b4:	|  |         jsr a46 <putFloat>
    89ba:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    89bc:	|  |         movea.l 148(sp),a0
    89c0:	|  |         move.l 106(a0),d0
    89c4:	|  |         move.l 156(sp),-(sp)
    89c8:	|  |         move.l d0,-(sp)
    89ca:	|  |         jsr 8d0 <put2bytes>
    89d0:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    89d2:	|  |         movea.l 148(sp),a0
    89d6:	|  |         move.l 8(a0),d0
    89da:	|  |         move.l 156(sp),-(sp)
    89de:	|  |         move.l d0,-(sp)
    89e0:	|  |         jsr 8d0 <put2bytes>
    89e6:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    89e8:	|  |         movea.l 148(sp),a0
    89ec:	|  |         move.l 28(a0),d0
    89f0:	|  |         move.l 156(sp),-(sp)
    89f4:	|  |         move.l d0,-(sp)
    89f6:	|  |         jsr 8d0 <put2bytes>
    89fc:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    89fe:	|  |         movea.l 148(sp),a0
    8a02:	|  |         move.l 32(a0),d0
    8a06:	|  |         move.l 156(sp),-(sp)
    8a0a:	|  |         move.l d0,-(sp)
    8a0c:	|  |         jsr 8d0 <put2bytes>
    8a12:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    8a14:	|  |         movea.l 148(sp),a0
    8a18:	|  |         move.l 36(a0),d0
    8a1c:	|  |         move.l 156(sp),-(sp)
    8a20:	|  |         move.l d0,-(sp)
    8a22:	|  |         jsr 8d0 <put2bytes>
    8a28:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    8a2a:	|  |         movea.l 148(sp),a0
    8a2e:	|  |         move.l 40(a0),d0
    8a32:	|  |         move.l 156(sp),-(sp)
    8a36:	|  |         move.l d0,-(sp)
    8a38:	|  |         jsr 8d0 <put2bytes>
    8a3e:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    8a40:	|  |         movea.l 148(sp),a0
    8a44:	|  |         move.l 72(a0),d0
    8a48:	|  |         move.l 156(sp),-(sp)
    8a4c:	|  |         move.l d0,-(sp)
    8a4e:	|  |         jsr 8d0 <put2bytes>
    8a54:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    8a56:	|  |         movea.l 148(sp),a0
    8a5a:	|  |         move.l 76(a0),d0
    8a5e:	|  |         move.l 156(sp),-(sp)
    8a62:	|  |         move.l d0,-(sp)
    8a64:	|  |         jsr 8d0 <put2bytes>
    8a6a:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    8a6c:	|  |         movea.l 148(sp),a0
    8a70:	|  |         move.l 16(a0),d0
    8a74:	|  |         move.l 156(sp),-(sp)
    8a78:	|  |         move.l d0,-(sp)
    8a7a:	|  |         jsr 8d0 <put2bytes>
    8a80:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    8a82:	|  |         movea.l 148(sp),a0
    8a86:	|  |         move.l 110(a0),d0
    8a8a:	|  |         move.l 156(sp),-(sp)
    8a8e:	|  |         move.l d0,-(sp)
    8a90:	|  |         jsr 8d0 <put2bytes>
    8a96:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    8a98:	|  |         movea.l 148(sp),a0
    8a9c:	|  |         move.l 12(a0),d0
    8aa0:	|  |         move.l d0,d0
    8aa2:	|  |         movea.w d0,a0
    8aa4:	|  |         move.l 156(sp),-(sp)
    8aa8:	|  |         move.l a0,-(sp)
    8aaa:	|  |         jsr a9c <putSigned>
    8ab0:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    8ab2:	|  |         move.l 156(sp),124(sp)
    8ab8:	|  |         movea.l 148(sp),a0
    8abc:	|  |         move.w 92(a0),d0
    8ac0:	|  |         movea.w d0,a0
    8ac2:	|  |         move.l a0,120(sp)
    8ac6:	|  |         move.l 19102 <DOSBase>,d0
    8acc:	|  |         movea.l d0,a6
    8ace:	|  |         move.l 124(sp),d1
    8ad2:	|  |         move.l 120(sp),d2
    8ad6:	|  |         jsr -312(a6)
    8ada:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    8ade:	|  |         move.l 156(sp),112(sp)
    8ae4:	|  |         movea.l 148(sp),a0
    8ae8:	|  |         move.w 52(a0),d0
    8aec:	|  |         movea.w d0,a0
    8aee:	|  |         move.l a0,108(sp)
    8af2:	|  |         move.l 19102 <DOSBase>,d0
    8af8:	|  |         movea.l d0,a6
    8afa:	|  |         move.l 112(sp),d1
    8afe:	|  |         move.l 108(sp),d2
    8b02:	|  |         jsr -312(a6)
    8b06:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    8b0a:	|  |         move.l 156(sp),100(sp)
    8b10:	|  |         movea.l 148(sp),a0
    8b14:	|  |         move.w 54(a0),d0
    8b18:	|  |         movea.w d0,a0
    8b1a:	|  |         move.l a0,96(sp)
    8b1e:	|  |         move.l 19102 <DOSBase>,d0
    8b24:	|  |         movea.l d0,a6
    8b26:	|  |         move.l 100(sp),d1
    8b2a:	|  |         move.l 96(sp),d2
    8b2e:	|  |         jsr -312(a6)
    8b32:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    8b36:	|  |         movea.l 148(sp),a0
    8b3a:	|  |         move.l 56(a0),d0
    8b3e:	|  |  /----- beq.s 8b7c <savePeople+0x2e2>
			FPutC (fp, 1);
    8b40:	|  |  |      move.l 156(sp),76(sp)
    8b46:	|  |  |      moveq #1,d0
    8b48:	|  |  |      move.l d0,72(sp)
    8b4c:	|  |  |      move.l 19102 <DOSBase>,d0
    8b52:	|  |  |      movea.l d0,a6
    8b54:	|  |  |      move.l 76(sp),d1
    8b58:	|  |  |      move.l 72(sp),d2
    8b5c:	|  |  |      jsr -312(a6)
    8b60:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    8b64:	|  |  |      movea.l 148(sp),a0
    8b68:	|  |  |      move.l 56(a0),d0
    8b6c:	|  |  |      move.l 156(sp),-(sp)
    8b70:	|  |  |      move.l d0,-(sp)
    8b72:	|  |  |      jsr 9dfa <saveFunction>
    8b78:	|  |  |      addq.l #8,sp
    8b7a:	|  |  |  /-- bra.s 8ba0 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    8b7c:	|  |  \--|-> move.l 156(sp),88(sp)
    8b82:	|  |     |   moveq #1,d0
    8b84:	|  |     |   move.l d0,84(sp)
    8b88:	|  |     |   move.l 19102 <DOSBase>,d0
    8b8e:	|  |     |   movea.l d0,a6
    8b90:	|  |     |   move.l 88(sp),d1
    8b94:	|  |     |   move.l 84(sp),d2
    8b98:	|  |     |   jsr -312(a6)
    8b9c:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    8ba0:	|  |     \-> movea.l 148(sp),a0
    8ba4:	|  |         move.l 94(a0),d0
    8ba8:	|  |         move.l 156(sp),-(sp)
    8bac:	|  |         move.l d0,-(sp)
    8bae:	|  |         jsr 8d0 <put2bytes>
    8bb4:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    8bb6:	|  |         movea.l 148(sp),a0
    8bba:	|  |         move.l 80(a0),d0
    8bbe:	|  |         move.l 156(sp),-(sp)
    8bc2:	|  |         move.l d0,-(sp)
    8bc4:	|  |         jsr 8d0 <put2bytes>
    8bca:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    8bcc:	|  |         movea.l 148(sp),a0
    8bd0:	|  |         move.l 88(a0),d0
    8bd4:	|  |         move.l 156(sp),-(sp)
    8bd8:	|  |         move.l d0,-(sp)
    8bda:	|  |         jsr 8d0 <put2bytes>
    8be0:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    8be2:	|  |         movea.l 148(sp),a0
    8be6:	|  |         move.l 84(a0),d0
    8bea:	|  |         move.l 156(sp),-(sp)
    8bee:	|  |         move.l d0,-(sp)
    8bf0:	|  |         jsr 8d0 <put2bytes>
    8bf6:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    8bf8:	|  |         movea.l 148(sp),a0
    8bfc:	|  |         move.l 98(a0),d0
    8c00:	|  |         move.l d0,d0
    8c02:	|  |         movea.w d0,a0
    8c04:	|  |         move.l 156(sp),-(sp)
    8c08:	|  |         move.l a0,-(sp)
    8c0a:	|  |         jsr a9c <putSigned>
    8c10:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    8c12:	|  |         movea.l 148(sp),a0
    8c16:	|  |         move.l 44(a0),d0
    8c1a:	|  |         move.l d0,d0
    8c1c:	|  |         movea.w d0,a0
    8c1e:	|  |         move.l 156(sp),-(sp)
    8c22:	|  |         move.l a0,-(sp)
    8c24:	|  |         jsr a9c <putSigned>
    8c2a:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    8c2c:	|  |         movea.l 148(sp),a0
    8c30:	|  |         move.l 48(a0),d0
    8c34:	|  |         move.l d0,d0
    8c36:	|  |         movea.w d0,a0
    8c38:	|  |         move.l 156(sp),-(sp)
    8c3c:	|  |         move.l a0,-(sp)
    8c3e:	|  |         jsr a9c <putSigned>
    8c44:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    8c46:	|  |         move.l 156(sp),64(sp)
    8c4c:	|  |         movea.l 148(sp),a0
    8c50:	|  |         move.b 114(a0),d0
    8c54:	|  |         move.b d0,d0
    8c56:	|  |         andi.l #255,d0
    8c5c:	|  |         move.l d0,60(sp)
    8c60:	|  |         move.l 19102 <DOSBase>,d0
    8c66:	|  |         movea.l d0,a6
    8c68:	|  |         move.l 64(sp),d1
    8c6c:	|  |         move.l 60(sp),d2
    8c70:	|  |         jsr -312(a6)
    8c74:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    8c78:	|  |         move.l 156(sp),52(sp)
    8c7e:	|  |         movea.l 148(sp),a0
    8c82:	|  |         move.b 115(a0),d0
    8c86:	|  |         move.b d0,d0
    8c88:	|  |         andi.l #255,d0
    8c8e:	|  |         move.l d0,48(sp)
    8c92:	|  |         move.l 19102 <DOSBase>,d0
    8c98:	|  |         movea.l d0,a6
    8c9a:	|  |         move.l 52(sp),d1
    8c9e:	|  |         move.l 48(sp),d2
    8ca2:	|  |         jsr -312(a6)
    8ca6:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    8caa:	|  |         move.l 156(sp),40(sp)
    8cb0:	|  |         movea.l 148(sp),a0
    8cb4:	|  |         move.b 116(a0),d0
    8cb8:	|  |         move.b d0,d0
    8cba:	|  |         andi.l #255,d0
    8cc0:	|  |         move.l d0,36(sp)
    8cc4:	|  |         move.l 19102 <DOSBase>,d0
    8cca:	|  |         movea.l d0,a6
    8ccc:	|  |         move.l 40(sp),d1
    8cd0:	|  |         move.l 36(sp),d2
    8cd4:	|  |         jsr -312(a6)
    8cd8:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    8cdc:	|  |         move.l 156(sp),28(sp)
    8ce2:	|  |         movea.l 148(sp),a0
    8ce6:	|  |         move.b 117(a0),d0
    8cea:	|  |         move.b d0,d0
    8cec:	|  |         andi.l #255,d0
    8cf2:	|  |         move.l d0,24(sp)
    8cf6:	|  |         move.l 19102 <DOSBase>,d0
    8cfc:	|  |         movea.l d0,a6
    8cfe:	|  |         move.l 28(sp),d1
    8d02:	|  |         move.l 24(sp),d2
    8d06:	|  |         jsr -312(a6)
    8d0a:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    8d0e:	|  |         move.l 156(sp),16(sp)
    8d14:	|  |         movea.l 148(sp),a0
    8d18:	|  |         move.b 118(a0),d0
    8d1c:	|  |         move.b d0,d0
    8d1e:	|  |         andi.l #255,d0
    8d24:	|  |         move.l d0,12(sp)
    8d28:	|  |         move.l 19102 <DOSBase>,d0
    8d2e:	|  |         movea.l d0,a6
    8d30:	|  |         move.l 16(sp),d1
    8d34:	|  |         move.l 12(sp),d2
    8d38:	|  |         jsr -312(a6)
    8d3c:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    8d40:	|  |         movea.l 148(sp),a0
    8d44:	|  |         move.l 102(a0),d0
    8d48:	|  |         move.l 156(sp),-(sp)
    8d4c:	|  |         move.l d0,-(sp)
    8d4e:	|  |         jsr afee <saveObjectRef>
    8d54:	|  |         addq.l #8,sp

		me = me -> next;
    8d56:	|  |         movea.l 148(sp),a0
    8d5a:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    8d60:	|  |         addq.l #1,140(sp)
    8d64:	|  \-------> movea.l 140(sp),a0
    8d68:	|            cmpa.l 144(sp),a0
    8d6c:	\----------- blt.w 8910 <savePeople+0x76>
	}
	return TRUE;
    8d70:	             moveq #1,d0
}
    8d72:	             move.l (sp)+,d2
    8d74:	             movea.l (sp)+,a6
    8d76:	             lea 144(sp),sp
    8d7a:	             rts

00008d7c <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    8d7c:	movea.l 4(sp),a0
    8d80:	move.l 8(sp),(a0)
}
    8d84:	nop
    8d86:	rts

00008d88 <setDrawMode>:


void setDrawMode (int h, int ob) {
    8d88:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    8d8a:	       move.l 12(sp),-(sp)
    8d8e:	       jsr 7e5a <findPerson>
    8d94:	       addq.l #4,sp
    8d96:	       move.l d0,(sp)
	if (! moveMe) return;
    8d98:	/----- beq.s 8dac <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    8d9a:	|      move.l 8(sp),-(sp)
    8d9e:	|      move.l 4(sp),-(sp)
    8da2:	|      jsr 8db2 <setMyDrawMode>
    8da8:	|      addq.l #8,sp
    8daa:	|  /-- bra.s 8dae <setDrawMode+0x26>
	if (! moveMe) return;
    8dac:	\--|-> nop
}
    8dae:	   \-> addq.l #4,sp
    8db0:	       rts

00008db2 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    8db2:	       moveq #19,d0
    8db4:	       cmp.l 8(sp),d0
    8db8:	/----- bcs.w 9290 <setMyDrawMode+0x4de>
    8dbc:	|      move.l 8(sp),d0
    8dc0:	|      add.l d0,d0
    8dc2:	|      movea.l d0,a0
    8dc4:	|      adda.l #36304,a0
    8dca:	|      move.w (a0),d0
    8dcc:	|      jmp (8dd0 <setMyDrawMode+0x1e>,pc,d0.w)
    8dd0:	|      .short 0x04c0
    8dd2:	|      ori.l #6684712,-(a4)
    8dd8:	|      btst d0,-(a0)
    8dda:	|      bchg d0,(a6)+
    8ddc:	|      bclr d0,(a4)+
    8dde:	|      bset d0,(a2)+
    8de0:	|      andi.b #84,(a6)
    8de4:	|      andi.l #55575312,(a2)
    8dea:	|      .short 0x02d0
    8dec:	|      bclr d1,(a0)
    8dee:	|      .short 0x044a
    8df0:	|      .short 0x040c
    8df2:	|      movep.l d1,1158(a6)
    8df6:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8df8:	|      movea.l 4(sp),a0
    8dfc:	|      clr.b 116(a0)
    8e00:	|      movea.l 4(sp),a0
    8e04:	|      move.b 116(a0),d0
    8e08:	|      movea.l 4(sp),a0
    8e0c:	|      move.b d0,115(a0)
    8e10:	|      movea.l 4(sp),a0
    8e14:	|      move.b 115(a0),d0
    8e18:	|      movea.l 4(sp),a0
    8e1c:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    8e20:	|      movea.l 4(sp),a0
    8e24:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    8e28:	|      movea.l 4(sp),a0
    8e2c:	|      move.b #64,118(a0)
			break;
    8e32:	|  /-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8e36:	|  |   movea.l 4(sp),a0
    8e3a:	|  |   clr.b 116(a0)
    8e3e:	|  |   movea.l 4(sp),a0
    8e42:	|  |   move.b 116(a0),d0
    8e46:	|  |   movea.l 4(sp),a0
    8e4a:	|  |   move.b d0,115(a0)
    8e4e:	|  |   movea.l 4(sp),a0
    8e52:	|  |   move.b 115(a0),d0
    8e56:	|  |   movea.l 4(sp),a0
    8e5a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8e5e:	|  |   movea.l 4(sp),a0
    8e62:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    8e66:	|  |   movea.l 4(sp),a0
    8e6a:	|  |   move.b #-128,118(a0)
			break;
    8e70:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8e74:	|  |   movea.l 4(sp),a0
    8e78:	|  |   clr.b 116(a0)
    8e7c:	|  |   movea.l 4(sp),a0
    8e80:	|  |   move.b 116(a0),d0
    8e84:	|  |   movea.l 4(sp),a0
    8e88:	|  |   move.b d0,115(a0)
    8e8c:	|  |   movea.l 4(sp),a0
    8e90:	|  |   move.b 115(a0),d0
    8e94:	|  |   movea.l 4(sp),a0
    8e98:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8e9c:	|  |   movea.l 4(sp),a0
    8ea0:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    8ea4:	|  |   movea.l 4(sp),a0
    8ea8:	|  |   move.b #-64,118(a0)
			break;
    8eae:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8eb2:	|  |   movea.l 4(sp),a0
    8eb6:	|  |   clr.b 116(a0)
    8eba:	|  |   movea.l 4(sp),a0
    8ebe:	|  |   move.b 116(a0),d0
    8ec2:	|  |   movea.l 4(sp),a0
    8ec6:	|  |   move.b d0,115(a0)
    8eca:	|  |   movea.l 4(sp),a0
    8ece:	|  |   move.b 115(a0),d0
    8ed2:	|  |   movea.l 4(sp),a0
    8ed6:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8eda:	|  |   movea.l 4(sp),a0
    8ede:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    8ee2:	|  |   movea.l 4(sp),a0
    8ee6:	|  |   move.b #-2,118(a0)
			break;
    8eec:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8ef0:	|  |   movea.l 4(sp),a0
    8ef4:	|  |   clr.b 116(a0)
    8ef8:	|  |   movea.l 4(sp),a0
    8efc:	|  |   move.b 116(a0),d0
    8f00:	|  |   movea.l 4(sp),a0
    8f04:	|  |   move.b d0,115(a0)
    8f08:	|  |   movea.l 4(sp),a0
    8f0c:	|  |   move.b 115(a0),d0
    8f10:	|  |   movea.l 4(sp),a0
    8f14:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    8f18:	|  |   movea.l 4(sp),a0
    8f1c:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    8f22:	|  |   movea.l 4(sp),a0
    8f26:	|  |   clr.b 118(a0)
			break;
    8f2a:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8f2e:	|  |   movea.l 4(sp),a0
    8f32:	|  |   clr.b 116(a0)
    8f36:	|  |   movea.l 4(sp),a0
    8f3a:	|  |   move.b 116(a0),d0
    8f3e:	|  |   movea.l 4(sp),a0
    8f42:	|  |   move.b d0,115(a0)
    8f46:	|  |   movea.l 4(sp),a0
    8f4a:	|  |   move.b 115(a0),d0
    8f4e:	|  |   movea.l 4(sp),a0
    8f52:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    8f56:	|  |   movea.l 4(sp),a0
    8f5a:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    8f60:	|  |   movea.l 4(sp),a0
    8f64:	|  |   clr.b 118(a0)
			break;
    8f68:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8f6c:	|  |   movea.l 4(sp),a0
    8f70:	|  |   clr.b 116(a0)
    8f74:	|  |   movea.l 4(sp),a0
    8f78:	|  |   move.b 116(a0),d0
    8f7c:	|  |   movea.l 4(sp),a0
    8f80:	|  |   move.b d0,115(a0)
    8f84:	|  |   movea.l 4(sp),a0
    8f88:	|  |   move.b 115(a0),d0
    8f8c:	|  |   movea.l 4(sp),a0
    8f90:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    8f94:	|  |   movea.l 4(sp),a0
    8f98:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    8f9e:	|  |   movea.l 4(sp),a0
    8fa2:	|  |   clr.b 118(a0)
			break;
    8fa6:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8faa:	|  |   movea.l 4(sp),a0
    8fae:	|  |   clr.b 116(a0)
    8fb2:	|  |   movea.l 4(sp),a0
    8fb6:	|  |   move.b 116(a0),d0
    8fba:	|  |   movea.l 4(sp),a0
    8fbe:	|  |   move.b d0,115(a0)
    8fc2:	|  |   movea.l 4(sp),a0
    8fc6:	|  |   move.b 115(a0),d0
    8fca:	|  |   movea.l 4(sp),a0
    8fce:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8fd2:	|  |   movea.l 4(sp),a0
    8fd6:	|  |   st 117(a0)
			moveMe->transparency = 0;
    8fda:	|  |   movea.l 4(sp),a0
    8fde:	|  |   clr.b 118(a0)
			break;
    8fe2:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8fe6:	|  |   movea.l 4(sp),a0
    8fea:	|  |   clr.b 116(a0)
    8fee:	|  |   movea.l 4(sp),a0
    8ff2:	|  |   move.b 116(a0),d0
    8ff6:	|  |   movea.l 4(sp),a0
    8ffa:	|  |   move.b d0,115(a0)
    8ffe:	|  |   movea.l 4(sp),a0
    9002:	|  |   move.b 115(a0),d0
    9006:	|  |   movea.l 4(sp),a0
    900a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    900e:	|  |   movea.l 4(sp),a0
    9012:	|  |   st 117(a0)
			moveMe->transparency = 64;
    9016:	|  |   movea.l 4(sp),a0
    901a:	|  |   move.b #64,118(a0)
			break;
    9020:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9024:	|  |   movea.l 4(sp),a0
    9028:	|  |   clr.b 116(a0)
    902c:	|  |   movea.l 4(sp),a0
    9030:	|  |   move.b 116(a0),d0
    9034:	|  |   movea.l 4(sp),a0
    9038:	|  |   move.b d0,115(a0)
    903c:	|  |   movea.l 4(sp),a0
    9040:	|  |   move.b 115(a0),d0
    9044:	|  |   movea.l 4(sp),a0
    9048:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    904c:	|  |   movea.l 4(sp),a0
    9050:	|  |   st 117(a0)
			moveMe->transparency = 128;
    9054:	|  |   movea.l 4(sp),a0
    9058:	|  |   move.b #-128,118(a0)
			break;
    905e:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9062:	|  |   movea.l 4(sp),a0
    9066:	|  |   clr.b 116(a0)
    906a:	|  |   movea.l 4(sp),a0
    906e:	|  |   move.b 116(a0),d0
    9072:	|  |   movea.l 4(sp),a0
    9076:	|  |   move.b d0,115(a0)
    907a:	|  |   movea.l 4(sp),a0
    907e:	|  |   move.b 115(a0),d0
    9082:	|  |   movea.l 4(sp),a0
    9086:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    908a:	|  |   movea.l 4(sp),a0
    908e:	|  |   st 117(a0)
			moveMe->transparency = 192;
    9092:	|  |   movea.l 4(sp),a0
    9096:	|  |   move.b #-64,118(a0)
			break;
    909c:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    90a0:	|  |   movea.l 4(sp),a0
    90a4:	|  |   move.b #-128,116(a0)
    90aa:	|  |   movea.l 4(sp),a0
    90ae:	|  |   move.b 116(a0),d0
    90b2:	|  |   movea.l 4(sp),a0
    90b6:	|  |   move.b d0,115(a0)
    90ba:	|  |   movea.l 4(sp),a0
    90be:	|  |   move.b 115(a0),d0
    90c2:	|  |   movea.l 4(sp),a0
    90c6:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    90ca:	|  |   movea.l 4(sp),a0
    90ce:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    90d4:	|  |   movea.l 4(sp),a0
    90d8:	|  |   clr.b 118(a0)
			break;
    90dc:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    90e0:	|  |   movea.l 4(sp),a0
    90e4:	|  |   move.b #-128,116(a0)
    90ea:	|  |   movea.l 4(sp),a0
    90ee:	|  |   move.b 116(a0),d0
    90f2:	|  |   movea.l 4(sp),a0
    90f6:	|  |   move.b d0,115(a0)
    90fa:	|  |   movea.l 4(sp),a0
    90fe:	|  |   move.b 115(a0),d0
    9102:	|  |   movea.l 4(sp),a0
    9106:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    910a:	|  |   movea.l 4(sp),a0
    910e:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    9114:	|  |   movea.l 4(sp),a0
    9118:	|  |   clr.b 118(a0)
			break;
    911c:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    9120:	|  |   movea.l 4(sp),a0
    9124:	|  |   move.b #-128,116(a0)
    912a:	|  |   movea.l 4(sp),a0
    912e:	|  |   move.b 116(a0),d0
    9132:	|  |   movea.l 4(sp),a0
    9136:	|  |   move.b d0,115(a0)
    913a:	|  |   movea.l 4(sp),a0
    913e:	|  |   move.b 115(a0),d0
    9142:	|  |   movea.l 4(sp),a0
    9146:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    914a:	|  |   movea.l 4(sp),a0
    914e:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    9154:	|  |   movea.l 4(sp),a0
    9158:	|  |   clr.b 118(a0)
			break;
    915c:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    9160:	|  |   movea.l 4(sp),a0
    9164:	|  |   move.b #-128,116(a0)
    916a:	|  |   movea.l 4(sp),a0
    916e:	|  |   move.b 116(a0),d0
    9172:	|  |   movea.l 4(sp),a0
    9176:	|  |   move.b d0,115(a0)
    917a:	|  |   movea.l 4(sp),a0
    917e:	|  |   move.b 115(a0),d0
    9182:	|  |   movea.l 4(sp),a0
    9186:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    918a:	|  |   movea.l 4(sp),a0
    918e:	|  |   st 117(a0)
			moveMe->transparency = 0;
    9192:	|  |   movea.l 4(sp),a0
    9196:	|  |   clr.b 118(a0)
			break;
    919a:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    919e:	|  |   movea.l 4(sp),a0
    91a2:	|  |   st 116(a0)
    91a6:	|  |   movea.l 4(sp),a0
    91aa:	|  |   move.b 116(a0),d0
    91ae:	|  |   movea.l 4(sp),a0
    91b2:	|  |   move.b d0,115(a0)
    91b6:	|  |   movea.l 4(sp),a0
    91ba:	|  |   move.b 115(a0),d0
    91be:	|  |   movea.l 4(sp),a0
    91c2:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    91c6:	|  |   movea.l 4(sp),a0
    91ca:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    91d0:	|  |   movea.l 4(sp),a0
    91d4:	|  |   clr.b 118(a0)
			break;
    91d8:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    91dc:	|  |   movea.l 4(sp),a0
    91e0:	|  |   st 116(a0)
    91e4:	|  |   movea.l 4(sp),a0
    91e8:	|  |   move.b 116(a0),d0
    91ec:	|  |   movea.l 4(sp),a0
    91f0:	|  |   move.b d0,115(a0)
    91f4:	|  |   movea.l 4(sp),a0
    91f8:	|  |   move.b 115(a0),d0
    91fc:	|  |   movea.l 4(sp),a0
    9200:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    9204:	|  |   movea.l 4(sp),a0
    9208:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    920e:	|  |   movea.l 4(sp),a0
    9212:	|  |   clr.b 118(a0)
			break;
    9216:	|  +-- bra.w 92ca <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    921a:	|  |   movea.l 4(sp),a0
    921e:	|  |   st 116(a0)
    9222:	|  |   movea.l 4(sp),a0
    9226:	|  |   move.b 116(a0),d0
    922a:	|  |   movea.l 4(sp),a0
    922e:	|  |   move.b d0,115(a0)
    9232:	|  |   movea.l 4(sp),a0
    9236:	|  |   move.b 115(a0),d0
    923a:	|  |   movea.l 4(sp),a0
    923e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    9242:	|  |   movea.l 4(sp),a0
    9246:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    924c:	|  |   movea.l 4(sp),a0
    9250:	|  |   clr.b 118(a0)
			break;
    9254:	|  +-- bra.s 92ca <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    9256:	|  |   movea.l 4(sp),a0
    925a:	|  |   st 116(a0)
    925e:	|  |   movea.l 4(sp),a0
    9262:	|  |   move.b 116(a0),d0
    9266:	|  |   movea.l 4(sp),a0
    926a:	|  |   move.b d0,115(a0)
    926e:	|  |   movea.l 4(sp),a0
    9272:	|  |   move.b 115(a0),d0
    9276:	|  |   movea.l 4(sp),a0
    927a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    927e:	|  |   movea.l 4(sp),a0
    9282:	|  |   st 117(a0)
			moveMe->transparency = 0;
    9286:	|  |   movea.l 4(sp),a0
    928a:	|  |   clr.b 118(a0)
			break;
    928e:	|  +-- bra.s 92ca <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9290:	\--|-> movea.l 4(sp),a0
    9294:	   |   clr.b 116(a0)
    9298:	   |   movea.l 4(sp),a0
    929c:	   |   move.b 116(a0),d0
    92a0:	   |   movea.l 4(sp),a0
    92a4:	   |   move.b d0,115(a0)
    92a8:	   |   movea.l 4(sp),a0
    92ac:	   |   move.b 115(a0),d0
    92b0:	   |   movea.l 4(sp),a0
    92b4:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    92b8:	   |   movea.l 4(sp),a0
    92bc:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    92c0:	   |   movea.l 4(sp),a0
    92c4:	   |   clr.b 118(a0)
			break;
    92c8:	   |   nop
	}
}
    92ca:	   \-> nop
    92cc:	       rts

000092ce <shufflePeople>:

void shufflePeople () {
    92ce:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    92d2:	             move.l #102834,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    92da:	             move.l 191b2 <allPeople>,d0
    92e0:	/----------- beq.w 93b6 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    92e4:	|     /----- bra.w 93a6 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    92e8:	|  /--|----> movea.l 16(sp),a0
    92ec:	|  |  |      movea.l (a0),a0
    92ee:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    92f4:	|  |  |      movea.l 16(sp),a0
    92f8:	|  |  |      movea.l (a0),a0
    92fa:	|  |  |      move.l 106(a0),d0
    92fe:	|  |  |      moveq #1,d1
    9300:	|  |  |      and.l d1,d0
    9302:	|  |  |  /-- beq.s 931a <shufflePeople+0x4c>
    9304:	|  |  |  |   move.l #1148846080,-(sp)
    930a:	|  |  |  |   move.l 16(sp),-(sp)
    930e:	|  |  |  |   jsr 13fa6 <__addsf3>
    9314:	|  |  |  |   addq.l #8,sp
    9316:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    931a:	|  |  |  \-> movea.l 16(sp),a0
    931e:	|  |  |      movea.l (a0),a0
    9320:	|  |  |      movea.l 24(a0),a0
    9324:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    932a:	|  |  |      movea.l 16(sp),a0
    932e:	|  |  |      movea.l (a0),a0
    9330:	|  |  |      movea.l 24(a0),a0
    9334:	|  |  |      move.l 106(a0),d0
    9338:	|  |  |      moveq #1,d1
    933a:	|  |  |      and.l d1,d0
    933c:	|  |  |  /-- beq.s 9354 <shufflePeople+0x86>
    933e:	|  |  |  |   move.l #1148846080,-(sp)
    9344:	|  |  |  |   move.l 12(sp),-(sp)
    9348:	|  |  |  |   jsr 13fa6 <__addsf3>
    934e:	|  |  |  |   addq.l #8,sp
    9350:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    9354:	|  |  |  \-> move.l 8(sp),-(sp)
    9358:	|  |  |      move.l 16(sp),-(sp)
    935c:	|  |  |      jsr 14360 <__gtsf2>
    9362:	|  |  |      addq.l #8,sp
    9364:	|  |  |      tst.l d0
    9366:	|  |  |  /-- ble.s 9398 <shufflePeople+0xca>
			A = (*thisReference);
    9368:	|  |  |  |   movea.l 16(sp),a0
    936c:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    9370:	|  |  |  |   movea.l 16(sp),a0
    9374:	|  |  |  |   movea.l (a0),a0
    9376:	|  |  |  |   move.l 24(a0),(sp)
			A->next = B->next;
    937a:	|  |  |  |   movea.l (sp),a0
    937c:	|  |  |  |   move.l 24(a0),d0
    9380:	|  |  |  |   movea.l 4(sp),a0
    9384:	|  |  |  |   move.l d0,24(a0)
			B->next = A;
    9388:	|  |  |  |   movea.l (sp),a0
    938a:	|  |  |  |   move.l 4(sp),24(a0)
			(*thisReference) = B;
    9390:	|  |  |  |   movea.l 16(sp),a0
    9394:	|  |  |  |   move.l (sp),(a0)
    9396:	|  |  +--|-- bra.s 93a6 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    9398:	|  |  |  \-> movea.l 16(sp),a0
    939c:	|  |  |      move.l (a0),d0
    939e:	|  |  |      moveq #24,d1
    93a0:	|  |  |      add.l d0,d1
    93a2:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    93a6:	|  |  \----> movea.l 16(sp),a0
    93aa:	|  |         movea.l (a0),a0
    93ac:	|  |         move.l 24(a0),d0
    93b0:	|  \-------- bne.w 92e8 <shufflePeople+0x1a>
    93b4:	|        /-- bra.s 93b8 <shufflePeople+0xea>
	if (!allPeople) return;
    93b6:	\--------|-> nop
		}
	}
}
    93b8:	         \-> lea 20(sp),sp
    93bc:	             rts

000093be <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    93be:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    93c0:	       tst.l 8(sp)
    93c4:	   /-- bgt.s 93ca <setCharacterWalkSpeed+0xc>
    93c6:	   |   clr.w d0
    93c8:	/--|-- bra.s 93e8 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    93ca:	|  \-> move.l 12(sp),-(sp)
    93ce:	|      jsr 7e5a <findPerson>
    93d4:	|      addq.l #4,sp
    93d6:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    93d8:	|  /-- bne.s 93de <setCharacterWalkSpeed+0x20>
    93da:	|  |   clr.w d0
    93dc:	+--|-- bra.s 93e8 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    93de:	|  \-> movea.l (sp),a0
    93e0:	|      move.l 8(sp),16(a0)
	return TRUE;
    93e6:	|      moveq #1,d0
}
    93e8:	\----> addq.l #4,sp
    93ea:	       rts

000093ec <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    93ec:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    93ee:	       move.l 8(sp),-(sp)
    93f2:	       jsr 7e5a <findPerson>
    93f8:	       addq.l #4,sp
    93fa:	       move.l d0,(sp)
    if (thisPerson) {
    93fc:	/----- beq.s 941c <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    93fe:	|      movea.l (sp),a0
    9400:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    9406:	|      moveq #2,d0
    9408:	|      and.l 12(sp),d0
    940c:	|  /-- beq.s 9418 <setPersonExtra+0x2c>
    940e:	|  |   movea.l (sp),a0
    9410:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    9418:	|  \-> moveq #1,d0
    941a:	|  /-- bra.s 941e <setPersonExtra+0x32>
    }
    return FALSE;
    941c:	\--|-> clr.w d0
}
    941e:	   \-> addq.l #4,sp
    9420:	       rts

00009422 <setScale>:


void setScale (short int h, short int d) {
    9422:	subq.l #4,sp
    9424:	move.l 8(sp),d1
    9428:	move.l 12(sp),d0
    942c:	move.w d1,d1
    942e:	move.w d1,2(sp)
    9432:	move.w d0,d0
    9434:	move.w d0,(sp)
	scaleHorizon = h;
    9436:	move.w 2(sp),18aa6 <scaleHorizon>
	scaleDivide = d;
    943e:	move.w (sp),18aa8 <scaleDivide>
}
    9444:	nop
    9446:	addq.l #4,sp
    9448:	rts

0000944a <setShown>:

void setShown (BOOL h, int ob) {
    944a:	    subq.l #8,sp
    944c:	    move.l 12(sp),d0
    9450:	    move.w d0,d0
    9452:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    9456:	    move.l 16(sp),-(sp)
    945a:	    jsr 7e5a <findPerson>
    9460:	    addq.l #4,sp
    9462:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    9466:	/-- beq.s 9472 <setShown+0x28>
    9468:	|   movea.l 4(sp),a0
    946c:	|   move.w 2(sp),92(a0)
}
    9472:	\-> nop
    9474:	    addq.l #8,sp
    9476:	    rts

00009478 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    9478:	       subq.l #8,sp
    947a:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    947c:	       movea.l 16(sp),a0
    9480:	       move.l 80(a0),d0
    9484:	       move.l d0,d1
    9486:	       addi.l #360,d1
    948c:	       movea.l 16(sp),a0
    9490:	       move.l 84(a0),d0
    9494:	       move.l d1,d2
    9496:	       sub.l d0,d2
    9498:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    949c:	       movea.l 16(sp),a0
    94a0:	       move.l 110(a0),d0
    94a4:	   /-- beq.s 94b0 <spinStep+0x38>
    94a6:	   |   movea.l 16(sp),a0
    94aa:	   |   move.l 110(a0),d0
    94ae:	/--|-- bra.s 94ca <spinStep+0x52>
    94b0:	|  \-> movea.l 16(sp),a0
    94b4:	|      movea.l 68(a0),a0
    94b8:	|      move.l 4(a0),d0
    94bc:	|      move.l d0,-(sp)
    94be:	|      pea 168 <decodeFilename+0x50>
    94c2:	|      jsr 147f4 <__divsi3>
    94c8:	|      addq.l #8,sp
    94ca:	\----> move.l d0,4(sp)
	while (diff > 180) {
    94ce:	   /-- bra.s 94d8 <spinStep+0x60>
		diff -= 360;
    94d0:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    94d8:	|  \-> cmpi.l #180,8(sp)
    94e0:	\----- bgt.s 94d0 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    94e2:	       move.l 8(sp),d0
    94e6:	       cmp.l 4(sp),d0
    94ea:	   /-- blt.s 9508 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    94ec:	   |   movea.l 16(sp),a0
    94f0:	   |   move.l 80(a0),d0
    94f4:	   |   sub.l 4(sp),d0
    94f8:	   |   move.l d0,-(sp)
    94fa:	   |   move.l 20(sp),-(sp)
    94fe:	   |   jsr 95e8 <turnMeAngle>
    9504:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    9506:	/--|-- bra.s 954e <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    9508:	|  \-> move.l 4(sp),d0
    950c:	|      neg.l d0
    950e:	|      cmp.l 8(sp),d0
    9512:	|  /-- blt.s 9530 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    9514:	|  |   movea.l 16(sp),a0
    9518:	|  |   move.l 80(a0),d0
    951c:	|  |   add.l 4(sp),d0
    9520:	|  |   move.l d0,-(sp)
    9522:	|  |   move.l 20(sp),-(sp)
    9526:	|  |   jsr 95e8 <turnMeAngle>
    952c:	|  |   addq.l #8,sp
}
    952e:	+--|-- bra.s 954e <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    9530:	|  \-> movea.l 16(sp),a0
    9534:	|      move.l 84(a0),d0
    9538:	|      move.l d0,-(sp)
    953a:	|      move.l 20(sp),-(sp)
    953e:	|      jsr 95e8 <turnMeAngle>
    9544:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    9546:	|      movea.l 16(sp),a0
    954a:	|      clr.w 54(a0)
}
    954e:	\----> nop
    9550:	       move.l (sp)+,d2
    9552:	       addq.l #8,sp
    9554:	       rts

00009556 <stopPerson>:


BOOL stopPerson (int o) {
    9556:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    9558:	       move.l 8(sp),-(sp)
    955c:	       jsr 7e5a <findPerson>
    9562:	       addq.l #4,sp
    9564:	       move.l d0,(sp)
    if (moveMe)
    9566:	/----- beq.s 95a4 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    9568:	|      movea.l (sp),a0
    956a:	|      move.l 56(a0),d0
    956e:	+----- beq.s 95a4 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    9570:	|      movea.l (sp),a0
    9572:	|      move.l 56(a0),d0
    9576:	|      move.l d0,-(sp)
    9578:	|      jsr 24da <abortFunction>
    957e:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    9580:	|      movea.l (sp),a0
    9582:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    9586:	|      movea.l (sp),a0
    9588:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    958c:	|      movea.l (sp),a0
    958e:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    9592:	|      clr.l -(sp)
    9594:	|      move.l 4(sp),-(sp)
    9598:	|      jsr 5c60 <setFrames>
    959e:	|      addq.l #8,sp
            return TRUE;
    95a0:	|      moveq #1,d0
    95a2:	|  /-- bra.s 95a6 <stopPerson+0x50>
        }
    return FALSE;
    95a4:	\--|-> clr.w d0
}
    95a6:	   \-> addq.l #4,sp
    95a8:	       rts

000095aa <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    95aa:	       subq.l #8,sp
	int total = 0;
    95ac:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    95b0:	       clr.l (sp)
    95b2:	   /-- bra.s 95d4 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    95b4:	/--|-> movea.l 12(sp),a0
    95b8:	|  |   movea.l 4(a0),a0
    95bc:	|  |   move.l (sp),d1
    95be:	|  |   move.l d1,d0
    95c0:	|  |   add.l d0,d0
    95c2:	|  |   add.l d1,d0
    95c4:	|  |   add.l d0,d0
    95c6:	|  |   add.l d0,d0
    95c8:	|  |   adda.l d0,a0
    95ca:	|  |   move.l 4(a0),d0
    95ce:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    95d2:	|  |   addq.l #1,(sp)
    95d4:	|  \-> movea.l 12(sp),a0
    95d8:	|      move.l 8(a0),d0
    95dc:	|      cmp.l (sp),d0
    95de:	\----- bgt.s 95b4 <timeForAnim+0xa>
	}
	return total;
    95e0:	       move.l 4(sp),d0
}
    95e4:	       addq.l #8,sp
    95e6:	       rts

000095e8 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    95e8:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    95ea:	       movea.l 8(sp),a0
    95ee:	       movea.l 68(a0),a0
    95f2:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    95f6:	       movea.l 8(sp),a0
    95fa:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    9600:	       move.l (sp),-(sp)
    9602:	       pea b4 <_start+0xb4>
    9606:	       jsr 147f4 <__divsi3>
    960c:	       addq.l #8,sp
    960e:	       move.l d0,d1
    9610:	       addi.l #180,d1
    9616:	       movea.l 8(sp),a0
    961a:	       move.l 88(a0),d0
    961e:	       add.l d1,d0
    9620:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    9624:	   /-- bra.s 962e <turnMeAngle+0x46>
    9626:	/--|-> addi.l #-360,12(sp)
    962e:	|  \-> cmpi.l #359,12(sp)
    9636:	\----- bgt.s 9626 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    9638:	       move.l (sp),-(sp)
    963a:	       move.l 16(sp),-(sp)
    963e:	       jsr 14776 <__mulsi3>
    9644:	       addq.l #8,sp
    9646:	       pea 168 <decodeFilename+0x50>
    964a:	       move.l d0,-(sp)
    964c:	       jsr 147f4 <__divsi3>
    9652:	       addq.l #8,sp
    9654:	       movea.l 8(sp),a0
    9658:	       move.l d0,94(a0)
}
    965c:	       nop
    965e:	       addq.l #4,sp
    9660:	       rts

00009662 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    9662:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    9664:	          move.l 8(sp),-(sp)
    9668:	          jsr 7e5a <findPerson>
    966e:	          addq.l #4,sp
    9670:	          move.l d0,(sp)
    if (thisPerson) {
    9672:	/-------- beq.s 96d2 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    9674:	|         movea.l (sp),a0
    9676:	|         move.l 56(a0),d0
    967a:	|     /-- beq.s 968c <turnPersonToFace+0x2a>
    967c:	|     |   movea.l (sp),a0
    967e:	|     |   move.l 56(a0),d0
    9682:	|     |   move.l d0,-(sp)
    9684:	|     |   jsr 24da <abortFunction>
    968a:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    968c:	|     \-> movea.l (sp),a0
    968e:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    9692:	|         movea.l (sp),a0
    9694:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    9698:	|         movea.l (sp),a0
    969a:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    969e:	|         move.l 12(sp),-(sp)
    96a2:	|         move.l 4(sp),-(sp)
    96a6:	|         jsr 95e8 <turnMeAngle>
    96ac:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    96ae:	|         movea.l 19156 <speech>,a0
    96b4:	|         move.l (a0),d0
    96b6:	|         cmp.l (sp),d0
    96b8:	|  /----- bne.s 96be <turnPersonToFace+0x5c>
    96ba:	|  |      moveq #2,d0
    96bc:	|  |  /-- bra.s 96c0 <turnPersonToFace+0x5e>
    96be:	|  \--|-> moveq #0,d0
    96c0:	|     \-> move.l d0,-(sp)
    96c2:	|         move.l 4(sp),-(sp)
    96c6:	|         jsr 5c60 <setFrames>
    96cc:	|         addq.l #8,sp
        return TRUE;
    96ce:	|         moveq #1,d0
    96d0:	|     /-- bra.s 96d4 <turnPersonToFace+0x72>
    }
    return FALSE;
    96d2:	\-----|-> clr.w d0
}
    96d4:	      \-> addq.l #4,sp
    96d6:	          rts

000096d8 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    96d8:	                lea -20(sp),sp
    96dc:	                move.l d3,-(sp)
    96de:	                move.l d2,-(sp)
    96e0:	                move.l 36(sp),d0
    96e4:	                move.w d0,d0
    96e6:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    96ea:	                cmpi.w #-1,10(sp)
    96f0:	/-------------- bne.s 96f8 <walkMe+0x20>
    96f2:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    96f8:	>-------------> movea.l 32(sp),a0
    96fc:	|               move.l 36(a0),d0
    9700:	|               move.l d0,-(sp)
    9702:	|               jsr 141f4 <__floatsisf>
    9708:	|               addq.l #4,sp
    970a:	|               move.l d0,d1
    970c:	|               movea.l 32(sp),a0
    9710:	|               move.l (a0),d0
    9712:	|               move.l d0,-(sp)
    9714:	|               move.l d1,-(sp)
    9716:	|               jsr 144e8 <__subsf3>
    971c:	|               addq.l #8,sp
    971e:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    9722:	|               movea.l 32(sp),a0
    9726:	|               move.l 40(a0),d0
    972a:	|               move.l d0,-(sp)
    972c:	|               jsr 141f4 <__floatsisf>
    9732:	|               addq.l #4,sp
    9734:	|               move.l d0,d1
    9736:	|               movea.l 32(sp),a0
    973a:	|               move.l 4(a0),d0
    973e:	|               move.l d0,-(sp)
    9740:	|               move.l d1,-(sp)
    9742:	|               jsr 144e8 <__subsf3>
    9748:	|               addq.l #8,sp
    974a:	|               move.l d0,-(sp)
    974c:	|               move.l d0,-(sp)
    974e:	|               jsr 13fa6 <__addsf3>
    9754:	|               addq.l #8,sp
    9756:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    975a:	|               movea.l 32(sp),a0
    975e:	|               move.l 20(a0),d2
    9762:	|               movea.l 32(sp),a0
    9766:	|               move.l 16(a0),d0
    976a:	|               move.l d0,-(sp)
    976c:	|               jsr 141f4 <__floatsisf>
    9772:	|               addq.l #4,sp
    9774:	|               move.l d0,-(sp)
    9776:	|               move.l d2,-(sp)
    9778:	|               jsr 142a6 <__mulsf3>
    977e:	|               addq.l #8,sp
    9780:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    9784:	|               move.l 24(sp),-(sp)
    9788:	|               jsr 1410c <__extendsfdf2>
    978e:	|               addq.l #4,sp
    9790:	|               move.l #-1717986918,-(sp)
    9796:	|               move.l #1070176665,-(sp)
    979c:	|               move.l d1,-(sp)
    979e:	|               move.l d0,-(sp)
    97a0:	|               jsr 143cc <__ltdf2>
    97a6:	|               lea 16(sp),sp
    97aa:	|               tst.l d0
    97ac:	|           /-- bge.s 97b6 <walkMe+0xde>
    97ae:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    97b6:	|           \-> move.l 20(sp),-(sp)
    97ba:	|               jsr 1418c <__fixsfsi>
    97c0:	|               addq.l #4,sp
    97c2:	|               move.l d0,-(sp)
    97c4:	|               jsr 6b20 <TF_abs>
    97ca:	|               addq.l #4,sp
    97cc:	|               move.l d0,d2
    97ce:	|               move.l 16(sp),-(sp)
    97d2:	|               jsr 1418c <__fixsfsi>
    97d8:	|               addq.l #4,sp
    97da:	|               move.l d0,-(sp)
    97dc:	|               jsr 6b20 <TF_abs>
    97e2:	|               addq.l #4,sp
    97e4:	|               cmp.l d2,d0
    97e6:	|        /----- bgt.s 980a <walkMe+0x132>
    97e8:	|        |      move.l 20(sp),-(sp)
    97ec:	|        |      jsr 1418c <__fixsfsi>
    97f2:	|        |      addq.l #4,sp
    97f4:	|        |      move.l d0,-(sp)
    97f6:	|        |      jsr 6b20 <TF_abs>
    97fc:	|        |      addq.l #4,sp
    97fe:	|        |      move.l d0,-(sp)
    9800:	|        |      jsr 141f4 <__floatsisf>
    9806:	|        |      addq.l #4,sp
    9808:	|        |  /-- bra.s 982a <walkMe+0x152>
    980a:	|        \--|-> move.l 16(sp),-(sp)
    980e:	|           |   jsr 1418c <__fixsfsi>
    9814:	|           |   addq.l #4,sp
    9816:	|           |   move.l d0,-(sp)
    9818:	|           |   jsr 6b20 <TF_abs>
    981e:	|           |   addq.l #4,sp
    9820:	|           |   move.l d0,-(sp)
    9822:	|           |   jsr 141f4 <__floatsisf>
    9828:	|           |   addq.l #4,sp
    982a:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    982e:	|               move.l 12(sp),-(sp)
    9832:	|               jsr 1418c <__fixsfsi>
    9838:	|               addq.l #4,sp
    983a:	|               move.l d0,-(sp)
    983c:	|               jsr 6b20 <TF_abs>
    9842:	|               addq.l #4,sp
    9844:	|               move.l d0,-(sp)
    9846:	|               jsr 141f4 <__floatsisf>
    984c:	|               addq.l #4,sp
    984e:	|               move.l d0,-(sp)
    9850:	|               move.l 28(sp),-(sp)
    9854:	|               jsr 1441a <__ltsf2>
    985a:	|               addq.l #8,sp
    985c:	|               tst.l d0
    985e:	|        /----- bge.w 9910 <walkMe+0x238>
			if (thisPerson->spinning) {
    9862:	|        |      movea.l 32(sp),a0
    9866:	|        |      move.w 54(a0),d0
    986a:	|        |  /-- beq.s 9888 <walkMe+0x1b0>
				spinStep(thisPerson);
    986c:	|        |  |   move.l 32(sp),-(sp)
    9870:	|        |  |   jsr 9478 <spinStep>
    9876:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    9878:	|        |  |   pea 1 <_start+0x1>
    987c:	|        |  |   move.l 36(sp),-(sp)
    9880:	|        |  |   jsr 5c60 <setFrames>
    9886:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    9888:	|        |  \-> move.l 24(sp),-(sp)
    988c:	|        |      move.l 16(sp),-(sp)
    9890:	|        |      jsr 140a0 <__divsf3>
    9896:	|        |      addq.l #8,sp
    9898:	|        |      move.l d0,24(sp)
			if (move)
    989c:	|        |      tst.w 10(sp)
    98a0:	|        |  /-- beq.s 990a <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    98a2:	|        |  |   movea.l 32(sp),a0
    98a6:	|        |  |   move.l 4(a0),d2
    98aa:	|        |  |   move.l 24(sp),d0
    98ae:	|        |  |   move.l d0,-(sp)
    98b0:	|        |  |   move.l d0,-(sp)
    98b2:	|        |  |   jsr 13fa6 <__addsf3>
    98b8:	|        |  |   addq.l #8,sp
    98ba:	|        |  |   move.l d0,-(sp)
    98bc:	|        |  |   move.l 20(sp),-(sp)
    98c0:	|        |  |   jsr 140a0 <__divsf3>
    98c6:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    98c8:	|        |  |   move.l d0,-(sp)
    98ca:	|        |  |   move.l d2,-(sp)
    98cc:	|        |  |   jsr 13fa6 <__addsf3>
    98d2:	|        |  |   addq.l #8,sp
    98d4:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    98d6:	|        |  |   movea.l 32(sp),a0
    98da:	|        |  |   move.l (a0),d3
    98dc:	|        |  |   move.l 24(sp),-(sp)
    98e0:	|        |  |   move.l 24(sp),-(sp)
    98e4:	|        |  |   jsr 140a0 <__divsf3>
    98ea:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    98ec:	|        |  |   move.l d0,-(sp)
    98ee:	|        |  |   move.l d3,-(sp)
    98f0:	|        |  |   jsr 13fa6 <__addsf3>
    98f6:	|        |  |   addq.l #8,sp
    98f8:	|        |  |   move.l d2,-(sp)
    98fa:	|        |  |   move.l d0,-(sp)
    98fc:	|        |  |   move.l 40(sp),-(sp)
    9900:	|        |  |   jsr 85a2 <moveAndScale>
    9906:	|        |  |   lea 12(sp),sp
			return TRUE;
    990a:	|        |  \-> moveq #1,d0
    990c:	|  /-----|----- bra.w 99be <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    9910:	|  |     \----> movea.l 32(sp),a0
    9914:	|  |            move.l 44(a0),d0
    9918:	|  |            moveq #-1,d1
    991a:	|  |            cmp.l d0,d1
    991c:	|  |        /-- bne.s 9954 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    991e:	|  |        |   movea.l 32(sp),a0
    9922:	|  |        |   move.l 98(a0),d0
    9926:	|  |        |   moveq #-1,d1
    9928:	|  |        |   cmp.l d0,d1
    992a:	|  |  /-----|-- beq.s 9968 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    992c:	|  |  |     |   movea.l 32(sp),a0
    9930:	|  |  |     |   move.l 98(a0),d0
    9934:	|  |  |     |   movea.l 32(sp),a0
    9938:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    993c:	|  |  |     |   movea.l 32(sp),a0
    9940:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    9946:	|  |  |     |   move.l 32(sp),-(sp)
    994a:	|  |  |     |   jsr 9478 <spinStep>
    9950:	|  |  |     |   addq.l #4,sp
			}
			break;
    9952:	|  |  +-----|-- bra.s 9968 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    9954:	|  |  |     \-> move.l 32(sp),-(sp)
    9958:	|  |  |         jsr 724c <doBorderStuff>
    995e:	|  |  |         addq.l #4,sp
    9960:	|  |  |         tst.w d0
    9962:	|  |  |  /----- beq.s 996c <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    9964:	\--|--|--|----- bra.w 96f8 <walkMe+0x20>
			break;
    9968:	   |  \--|----> nop
    996a:	   |     |  /-- bra.s 996e <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    996c:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    996e:	   |        \-> movea.l 32(sp),a0
    9972:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    9976:	   |            clr.l -(sp)
    9978:	   |            move.l 36(sp),-(sp)
    997c:	   |            jsr 5c60 <setFrames>
    9982:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    9984:	   |            movea.l 32(sp),a0
    9988:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    998c:	   |            move.l d0,-(sp)
    998e:	   |            jsr 141f4 <__floatsisf>
    9994:	   |            addq.l #4,sp
    9996:	   |            move.l d0,d2
				 thisPerson->walkToX,
    9998:	   |            movea.l 32(sp),a0
    999c:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    99a0:	   |            move.l d0,-(sp)
    99a2:	   |            jsr 141f4 <__floatsisf>
    99a8:	   |            addq.l #4,sp
    99aa:	   |            move.l d2,-(sp)
    99ac:	   |            move.l d0,-(sp)
    99ae:	   |            move.l 40(sp),-(sp)
    99b2:	   |            jsr 85a2 <moveAndScale>
    99b8:	   |            lea 12(sp),sp
	return FALSE;
    99bc:	   |            clr.w d0
}
    99be:	   \----------> move.l (sp)+,d2
    99c0:	                move.l (sp)+,d3
    99c2:	                lea 20(sp),sp
    99c6:	                rts

000099c8 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
    99c8:	             lea -20(sp),sp
    99cc:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);
	struct loadedSpriteBank * returnMe = allLoadedBanks;
    99ce:	             move.l 191da <allLoadedBanks>,20(sp)
	while (returnMe) {
    99d6:	      /----- bra.s 99f6 <loadBankForAnim+0x2e>
		if (returnMe->ID == ID) {
    99d8:	   /--|----> movea.l 20(sp),a0
    99dc:	   |  |      move.l (a0),d0
    99de:	   |  |      cmp.l 28(sp),d0
    99e2:	   |  |  /-- bne.s 99ec <loadBankForAnim+0x24>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			return returnMe;
    99e4:	   |  |  |   move.l 20(sp),d0
    99e8:	/--|--|--|-- bra.w 9aa8 <loadBankForAnim+0xe0>
		}
		returnMe = returnMe->next;
    99ec:	|  |  |  \-> movea.l 20(sp),a0
    99f0:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
    99f6:	|  |  \----> tst.l 20(sp)
    99fa:	|  \-------- bne.s 99d8 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
    99fc:	|            moveq #26,d0
    99fe:	|            move.l d0,16(sp)
    9a02:	|            clr.l 12(sp)
    9a06:	|            move.l 190fa <SysBase>,d0
    9a0c:	|            movea.l d0,a6
    9a0e:	|            move.l 16(sp),d0
    9a12:	|            move.l 12(sp),d1
    9a16:	|            jsr -684(a6)
    9a1a:	|            move.l d0,8(sp)
    9a1e:	|            move.l 8(sp),d0
    9a22:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
    9a26:	|     /----- beq.s 9aa6 <loadBankForAnim+0xde>
		returnMe->ID = ID;
    9a28:	|     |      movea.l 20(sp),a0
    9a2c:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
    9a30:	|     |      move.l 20(sp),d0
    9a34:	|     |      addq.l #8,d0
    9a36:	|     |      clr.l -(sp)
    9a38:	|     |      move.l d0,-(sp)
    9a3a:	|     |      move.l 36(sp),-(sp)
    9a3e:	|     |      jsr 6766 <loadSpriteBank>
    9a44:	|     |      lea 12(sp),sp
    9a48:	|     |      tst.w d0
    9a4a:	|     |  /-- beq.s 9a7e <loadBankForAnim+0xb6>
			returnMe->timesUsed = 0;
    9a4c:	|     |  |   movea.l 20(sp),a0
    9a50:	|     |  |   clr.l 4(a0)
			returnMe->next = allLoadedBanks;
    9a54:	|     |  |   move.l 191da <allLoadedBanks>,d0
    9a5a:	|     |  |   movea.l 20(sp),a0
    9a5e:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
    9a62:	|     |  |   move.l 20(sp),191da <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
    9a6a:	|     |  |   pea 15a3d <custom.c.64ca0e9f+0xd67>
    9a70:	|     |  |   jsr 13db8 <KPrintF>
    9a76:	|     |  |   addq.l #4,sp
			return returnMe;
    9a78:	|     |  |   move.l 20(sp),d0
    9a7c:	+-----|--|-- bra.s 9aa8 <loadBankForAnim+0xe0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
    9a7e:	|     |  \-> pea 15a6a <custom.c.64ca0e9f+0xd94>
    9a84:	|     |      jsr 13db8 <KPrintF>
    9a8a:	|     |      addq.l #4,sp
			FreeVec(returnMe);
    9a8c:	|     |      move.l 20(sp),4(sp)
    9a92:	|     |      move.l 190fa <SysBase>,d0
    9a98:	|     |      movea.l d0,a6
    9a9a:	|     |      movea.l 4(sp),a1
    9a9e:	|     |      jsr -690(a6)
			return NULL;
    9aa2:	|     |      moveq #0,d0
    9aa4:	+-----|----- bra.s 9aa8 <loadBankForAnim+0xe0>
		}
	} else return NULL;
    9aa6:	|     \----> moveq #0,d0
}
    9aa8:	\----------> movea.l (sp)+,a6
    9aaa:	             lea 20(sp),sp
    9aae:	             rts

00009ab0 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    9ab0:	       subq.l #8,sp
    9ab2:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    9ab4:	   /-- bra.s 9ae4 <clearStackLib+0x34>
		k = stackLib;
    9ab6:	/--|-> move.l 191e2 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    9abe:	|  |   movea.l 191e2 <stackLib>,a0
    9ac4:	|  |   move.l 4(a0),d0
    9ac8:	|  |   move.l d0,191e2 <stackLib>
		FreeVec(k);
    9ace:	|  |   move.l 8(sp),4(sp)
    9ad4:	|  |   move.l 190fa <SysBase>,d0
    9ada:	|  |   movea.l d0,a6
    9adc:	|  |   movea.l 4(sp),a1
    9ae0:	|  |   jsr -690(a6)
	while (stackLib) {
    9ae4:	|  \-> move.l 191e2 <stackLib>,d0
    9aea:	\----- bne.s 9ab6 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    9aec:	       clr.l 191de <stackLibTotal>
}
    9af2:	       nop
    9af4:	       movea.l (sp)+,a6
    9af6:	       addq.l #8,sp
    9af8:	       rts

00009afa <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    9afa:	          lea -128(sp),sp
    9afe:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    9b02:	      /-- bra.s 9b14 <loadGame+0x1a>
    9b04:	   /--|-> move.l 19092 <allRunningFunctions>,d0
    9b0a:	   |  |   move.l d0,-(sp)
    9b0c:	   |  |   jsr 34f4 <finishFunction>
    9b12:	   |  |   addq.l #4,sp
    9b14:	   |  \-> move.l 19092 <allRunningFunctions>,d0
    9b1a:	   \----- bne.s 9b04 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    9b1c:	          pea 191e6 <ssgVersion>
    9b22:	          pea 15ac8 <custom.c.64ca0e9f+0xdf2>
    9b28:	          pea 41 <_start+0x41>
    9b2c:	          pea 53 <_start+0x53>
    9b30:	          move.l 160(sp),-(sp)
    9b34:	          jsr 401c <openAndVerify>
    9b3a:	          lea 20(sp),sp
    9b3e:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    9b42:	      /-- bne.s 9b4a <loadGame+0x50>
    9b44:	      |   clr.w d0
    9b46:	/-----|-- bra.w 9df0 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    9b4a:	|     \-> move.l 112(sp),108(sp)
    9b50:	|         lea 140(sp),a0
    9b54:	|         lea -126(a0),a0
    9b58:	|         move.l a0,120(sp)
    9b5c:	|         moveq #8,d0
    9b5e:	|         move.l d0,116(sp)
    9b62:	|         move.l 19102 <DOSBase>,d0
    9b68:	|         movea.l d0,a6
    9b6a:	|         move.l 108(sp),d1
    9b6e:	|         move.l 120(sp),d2
    9b72:	|         move.l 116(sp),d3
    9b76:	|         jsr -42(a6)
    9b7a:	|         move.l d0,132(sp)
    9b7e:	|         move.l 132(sp),d0
    9b82:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    9b86:	|         moveq #8,d0
    9b88:	|         cmp.l 128(sp),d0
    9b8c:	|     /-- beq.s 9b9c <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    9b8e:	|     |   pea 15ae9 <custom.c.64ca0e9f+0xe13>
    9b94:	|     |   jsr 13db8 <KPrintF>
    9b9a:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    9b9c:	|     \-> move.l 14(sp),d1
    9ba0:	|         move.l 1909c <fileTime>,d0
    9ba6:	|         cmp.l d1,d0
    9ba8:	|     /-- bne.s 9bb8 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    9baa:	|     |   move.l 18(sp),d1
    9bae:	|     |   move.l 190a0 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    9bb4:	|     |   cmp.l d1,d0
    9bb6:	|  /--|-- beq.s 9bd8 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    9bb8:	|  |  \-> move.l 144(sp),-(sp)
    9bbc:	|  |      pea 15b05 <custom.c.64ca0e9f+0xe2f>
    9bc2:	|  |      pea 15bcc <custom.c.64ca0e9f+0xef6>
    9bc8:	|  |      jsr 13db8 <KPrintF>
    9bce:	|  |      lea 12(sp),sp
		return FALSE; 
    9bd2:	|  |      clr.w d0
    9bd4:	+--|----- bra.w 9df0 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    9bd8:	|  \----> move.l 112(sp),124(sp)
    9bde:	|         move.l 19102 <DOSBase>,d0
    9be4:	|         movea.l d0,a6
    9be6:	|         move.l 124(sp),d1
    9bea:	|         jsr -306(a6)
    9bee:	|         move.l d0,136(sp)
    9bf2:	|         move.l 136(sp),d0
    9bf6:	|         move.l d0,d0
    9bf8:	|         move.w d0,18970 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    9bfe:	|         move.l 112(sp),100(sp)
    9c04:	|         move.l 19102 <DOSBase>,d0
    9c0a:	|         movea.l d0,a6
    9c0c:	|         move.l 100(sp),d1
    9c10:	|         jsr -306(a6)
    9c14:	|         move.l d0,96(sp)
    9c18:	|         move.l 96(sp),d0
    9c1c:	|         move.l d0,d0
    9c1e:	|         move.w d0,1909a <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    9c24:	|         move.l 112(sp),92(sp)
    9c2a:	|         move.l 19102 <DOSBase>,d0
    9c30:	|         movea.l d0,a6
    9c32:	|         move.l 92(sp),d1
    9c36:	|         jsr -306(a6)
    9c3a:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    9c3e:	|         move.l 112(sp),84(sp)
    9c44:	|         move.l 19102 <DOSBase>,d0
    9c4a:	|         movea.l d0,a6
    9c4c:	|         move.l 84(sp),d1
    9c50:	|         jsr -306(a6)
    9c54:	|         move.l d0,80(sp)
    9c58:	|         move.l 80(sp),d0
    9c5c:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    9c60:	|     /-- beq.s 9c94 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    9c62:	|     |   move.l 112(sp),-(sp)
    9c66:	|     |   jsr 6bc <get2bytes>
    9c6c:	|     |   addq.l #4,sp
    9c6e:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    9c72:	|     |   move.l 112(sp),-(sp)
    9c76:	|     |   jsr 6bc <get2bytes>
    9c7c:	|     |   addq.l #4,sp
    9c7e:	|     |   move.l d0,19242 <fontHeight>
		charOrder = readString(fp);		
    9c84:	|     |   move.l 112(sp),-(sp)
    9c88:	|     |   jsr b02 <readString>
    9c8e:	|     |   addq.l #4,sp
    9c90:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    9c94:	|     \-> move.l 104(sp),70(sp)
    9c9a:	|         move.l 190fa <SysBase>,d0
    9ca0:	|         movea.l d0,a6
    9ca2:	|         movea.l 70(sp),a1
    9ca6:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    9caa:	|         move.l 112(sp),-(sp)
    9cae:	|         jsr 854 <getSigned>
    9cb4:	|         addq.l #4,sp
    9cb6:	|         move.w d0,19018 <fontSpace>

	killAllPeople ();
    9cbc:	|         jsr 8244 <killAllPeople>
	killAllRegions ();
    9cc2:	|         jsr 12868 <killAllRegions>

	int camerX = get2bytes (fp);
    9cc8:	|         move.l 112(sp),-(sp)
    9ccc:	|         jsr 6bc <get2bytes>
    9cd2:	|         addq.l #4,sp
    9cd4:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    9cd8:	|         move.l 112(sp),-(sp)
    9cdc:	|         jsr 6bc <get2bytes>
    9ce2:	|         addq.l #4,sp
    9ce4:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    9ce8:	|         move.l 112(sp),-(sp)
    9cec:	|         jsr 7d8 <getFloat>
    9cf2:	|         addq.l #4,sp
    9cf4:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    9cf8:	|         move.l 112(sp),54(sp)
    9cfe:	|         move.l 19102 <DOSBase>,d0
    9d04:	|         movea.l d0,a6
    9d06:	|         move.l 54(sp),d1
    9d0a:	|         jsr -306(a6)
    9d0e:	|         move.l d0,50(sp)
    9d12:	|         move.l 50(sp),d0
    9d16:	|         move.l d0,d0
    9d18:	|         move.b d0,18a8a <brightnessLevel>

	loadHandlers (fp);
    9d1e:	|         move.l 112(sp),-(sp)
    9d22:	|         jsr 3f7c <loadHandlers>
    9d28:	|         addq.l #4,sp
	loadRegions (fp);
    9d2a:	|         move.l 112(sp),-(sp)
    9d2e:	|         jsr 128c4 <loadRegions>
    9d34:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    9d36:	|         moveq #12,d0
    9d38:	|         move.l d0,46(sp)
    9d3c:	|         clr.l 42(sp)
    9d40:	|         move.l 190fa <SysBase>,d0
    9d46:	|         movea.l d0,a6
    9d48:	|         move.l 46(sp),d0
    9d4c:	|         move.l 42(sp),d1
    9d50:	|         jsr -684(a6)
    9d54:	|         move.l d0,38(sp)
    9d58:	|         move.l 38(sp),d0
    9d5c:	|         move.l d0,1901a <mouseCursorAnim>
	if (! mouseCursorAnim) {
    9d62:	|         move.l 1901a <mouseCursorAnim>,d0
    9d68:	|     /-- bne.s 9d7c <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    9d6a:	|     |   pea 15bd6 <custom.c.64ca0e9f+0xf00>
    9d70:	|     |   jsr 13db8 <KPrintF>
    9d76:	|     |   addq.l #4,sp
		return FALSE;
    9d78:	|     |   clr.w d0
    9d7a:	+-----|-- bra.s 9df0 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    9d7c:	|     \-> jsr aa4c <nosnapshot>
	if (FGetC (fp)) {
    9d82:	|         move.l 112(sp),34(sp)
    9d88:	|         move.l 19102 <DOSBase>,d0
    9d8e:	|         movea.l d0,a6
    9d90:	|         move.l 34(sp),d1
    9d94:	|         jsr -306(a6)
    9d98:	|         move.l d0,30(sp)
    9d9c:	|         move.l 30(sp),d0
    9da0:	|     /-- beq.s 9db6 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    9da2:	|     |   move.l 112(sp),-(sp)
    9da6:	|     |   jsr aac0 <restoreSnapshot>
    9dac:	|     |   addq.l #4,sp
    9dae:	|     |   tst.w d0
    9db0:	|     +-- bne.s 9db6 <loadGame+0x2bc>
    9db2:	|     |   clr.w d0
    9db4:	+-----|-- bra.s 9df0 <loadGame+0x2f6>
	}

	Close (fp);
    9db6:	|     \-> move.l 112(sp),26(sp)
    9dbc:	|         move.l 19102 <DOSBase>,d0
    9dc2:	|         movea.l d0,a6
    9dc4:	|         move.l 26(sp),d1
    9dc8:	|         jsr -36(a6)
    9dcc:	|         move.l d0,22(sp)
	clearStackLib ();
    9dd0:	|         jsr 9ab0 <clearStackLib>

	cameraX = camerX;
    9dd6:	|         move.l 66(sp),19208 <cameraX>
	cameraY = camerY;
    9dde:	|         move.l 62(sp),1920c <cameraY>
	cameraZoom = camerZ;
    9de6:	|         move.l 58(sp),18ab2 <cameraZoom>

	return TRUE;
    9dee:	|         moveq #1,d0
}
    9df0:	\-------> movem.l (sp)+,d2-d3/a6
    9df4:	          lea 128(sp),sp
    9df8:	          rts

00009dfa <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    9dfa:	   /-> lea -64(sp),sp
    9dfe:	   |   move.l a6,-(sp)
    9e00:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    9e02:	   |   movea.l 76(sp),a0
    9e06:	   |   move.l (a0),d0
    9e08:	   |   move.l 80(sp),-(sp)
    9e0c:	   |   move.l d0,-(sp)
    9e0e:	   |   jsr 8d0 <put2bytes>
    9e14:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    9e16:	   |   movea.l 76(sp),a0
    9e1a:	   |   move.l 40(a0),d0
    9e1e:	/--|-- beq.s 9e5a <saveFunction+0x60>
		FPutC (fp, 1);
    9e20:	|  |   move.l 80(sp),52(sp)
    9e26:	|  |   moveq #1,d0
    9e28:	|  |   move.l d0,48(sp)
    9e2c:	|  |   move.l 19102 <DOSBase>,d0
    9e32:	|  |   movea.l d0,a6
    9e34:	|  |   move.l 52(sp),d1
    9e38:	|  |   move.l 48(sp),d2
    9e3c:	|  |   jsr -312(a6)
    9e40:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    9e44:	|  |   movea.l 76(sp),a0
    9e48:	|  |   move.l 40(a0),d0
    9e4c:	|  |   move.l 80(sp),-(sp)
    9e50:	|  |   move.l d0,-(sp)
    9e52:	|  \-- jsr 9dfa <saveFunction>(pc)
    9e56:	|      addq.l #8,sp
    9e58:	|  /-- bra.s 9e7c <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    9e5a:	\--|-> move.l 80(sp),64(sp)
    9e60:	   |   clr.l 60(sp)
    9e64:	   |   move.l 19102 <DOSBase>,d0
    9e6a:	   |   movea.l d0,a6
    9e6c:	   |   move.l 64(sp),d1
    9e70:	   |   move.l 60(sp),d2
    9e74:	   |   jsr -312(a6)
    9e78:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    9e7c:	   \-> movea.l 76(sp),a0
    9e80:	       move.l 12(a0),d0
    9e84:	       move.l 80(sp),-(sp)
    9e88:	       move.l d0,-(sp)
    9e8a:	       jsr 958 <put4bytes>
    9e90:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    9e92:	       movea.l 76(sp),a0
    9e96:	       move.l 36(a0),d0
    9e9a:	       move.l 80(sp),-(sp)
    9e9e:	       move.l d0,-(sp)
    9ea0:	       jsr 8d0 <put2bytes>
    9ea6:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    9ea8:	       move.l 80(sp),40(sp)
    9eae:	       movea.l 76(sp),a0
    9eb2:	       move.w 54(a0),d0
    9eb6:	       movea.w d0,a0
    9eb8:	       move.l a0,36(sp)
    9ebc:	       move.l 19102 <DOSBase>,d0
    9ec2:	       movea.l d0,a6
    9ec4:	       move.l 40(sp),d1
    9ec8:	       move.l 36(sp),d2
    9ecc:	       jsr -312(a6)
    9ed0:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    9ed4:	       move.l 80(sp),28(sp)
    9eda:	       movea.l 76(sp),a0
    9ede:	       move.w 48(a0),d0
    9ee2:	       movea.w d0,a0
    9ee4:	       move.l a0,24(sp)
    9ee8:	       move.l 19102 <DOSBase>,d0
    9eee:	       movea.l d0,a6
    9ef0:	       move.l 28(sp),d1
    9ef4:	       move.l 24(sp),d2
    9ef8:	       jsr -312(a6)
    9efc:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    9f00:	       move.l 80(sp),16(sp)
    9f06:	       movea.l 76(sp),a0
    9f0a:	       move.w 50(a0),d0
    9f0e:	       movea.w d0,a0
    9f10:	       move.l a0,12(sp)
    9f14:	       move.l 19102 <DOSBase>,d0
    9f1a:	       movea.l d0,a6
    9f1c:	       move.l 16(sp),d1
    9f20:	       move.l 12(sp),d2
    9f24:	       jsr -312(a6)
    9f28:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    9f2c:	       moveq #28,d0
    9f2e:	       add.l 76(sp),d0
    9f32:	       move.l 80(sp),-(sp)
    9f36:	       move.l d0,-(sp)
    9f38:	       jsr a6b6 <saveVariable>
    9f3e:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    9f40:	       movea.l 76(sp),a0
    9f44:	       move.b 56(a0),d0
    9f48:	   /-- beq.s 9f58 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    9f4a:	   |   pea 15bf7 <custom.c.64ca0e9f+0xf21>
    9f50:	   |   jsr 13db8 <KPrintF>
    9f56:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    9f58:	   \-> movea.l 76(sp),a0
    9f5c:	       move.l 24(a0),d0
    9f60:	       move.l 80(sp),-(sp)
    9f64:	       move.l d0,-(sp)
    9f66:	       jsr a52a <saveStack>
    9f6c:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    9f6e:	       clr.l 68(sp)
    9f72:	   /-- bra.s 9f96 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    9f74:	/--|-> movea.l 76(sp),a0
    9f78:	|  |   move.l 20(a0),d1
    9f7c:	|  |   move.l 68(sp),d0
    9f80:	|  |   lsl.l #3,d0
    9f82:	|  |   add.l d1,d0
    9f84:	|  |   move.l 80(sp),-(sp)
    9f88:	|  |   move.l d0,-(sp)
    9f8a:	|  |   jsr a6b6 <saveVariable>
    9f90:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    9f92:	|  |   addq.l #1,68(sp)
    9f96:	|  \-> movea.l 76(sp),a0
    9f9a:	|      move.l 8(a0),d0
    9f9e:	|      cmp.l 68(sp),d0
    9fa2:	\----- bgt.s 9f74 <saveFunction+0x17a>
	}
}
    9fa4:	       nop
    9fa6:	       nop
    9fa8:	       move.l (sp)+,d2
    9faa:	       movea.l (sp)+,a6
    9fac:	       lea 64(sp),sp
    9fb0:	       rts

00009fb2 <saveGame>:

BOOL saveGame (char * fname) {
    9fb2:	          lea -272(sp),sp
    9fb6:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    9fba:	          move.l 288(sp),268(sp)
    9fc0:	          move.l #1006,264(sp)
    9fc8:	          move.l 19102 <DOSBase>,d0
    9fce:	          movea.l d0,a6
    9fd0:	          move.l 268(sp),d1
    9fd4:	          move.l 264(sp),d2
    9fd8:	          jsr -30(a6)
    9fdc:	          move.l d0,260(sp)
    9fe0:	          move.l 260(sp),d0
    9fe4:	          move.l d0,256(sp)
	if (fp == NULL) {
    9fe8:	      /-- bne.s 9ffe <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    9fea:	      |   pea 15c19 <custom.c.64ca0e9f+0xf43>
    9ff0:	      |   jsr 13db8 <KPrintF>
    9ff6:	      |   addq.l #4,sp
		return FALSE;
    9ff8:	      |   clr.w d0
    9ffa:	/-----|-- bra.w a520 <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    9ffe:	|     \-> move.l 256(sp),252(sp)
    a004:	|         move.l #89142,248(sp)
    a00c:	|         moveq #6,d0
    a00e:	|         move.l d0,244(sp)
    a012:	|         move.l 19102 <DOSBase>,d0
    a018:	|         movea.l d0,a6
    a01a:	|         move.l 252(sp),d1
    a01e:	|         move.l 248(sp),d2
    a022:	|         move.l 244(sp),d3
    a026:	|         jsr -48(a6)
    a02a:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    a02e:	|         move.l 256(sp),236(sp)
    a034:	|         clr.l 232(sp)
    a038:	|         move.l 19102 <DOSBase>,d0
    a03e:	|         movea.l d0,a6
    a040:	|         move.l 236(sp),d1
    a044:	|         move.l 232(sp),d2
    a048:	|         jsr -312(a6)
    a04c:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    a050:	|         move.l 256(sp),224(sp)
    a056:	|         clr.l 220(sp)
    a05a:	|         move.l 19102 <DOSBase>,d0
    a060:	|         movea.l d0,a6
    a062:	|         move.l 224(sp),d1
    a066:	|         move.l 220(sp),d2
    a06a:	|         jsr -312(a6)
    a06e:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    a072:	|         move.l 256(sp),212(sp)
    a078:	|         moveq #2,d0
    a07a:	|         move.l d0,208(sp)
    a07e:	|         move.l 19102 <DOSBase>,d0
    a084:	|         movea.l d0,a6
    a086:	|         move.l 212(sp),d1
    a08a:	|         move.l 208(sp),d2
    a08e:	|         jsr -312(a6)
    a092:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    a096:	|         move.l 256(sp),200(sp)
    a09c:	|         moveq #2,d0
    a09e:	|         move.l d0,196(sp)
    a0a2:	|         move.l 19102 <DOSBase>,d0
    a0a8:	|         movea.l d0,a6
    a0aa:	|         move.l 200(sp),d1
    a0ae:	|         move.l 196(sp),d2
    a0b2:	|         jsr -312(a6)
    a0b6:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    a0ba:	|         move.l 256(sp),188(sp)
    a0c0:	|         move.l #102556,184(sp)
    a0c8:	|         moveq #8,d0
    a0ca:	|         move.l d0,180(sp)
    a0ce:	|         move.l 19102 <DOSBase>,d0
    a0d4:	|         movea.l d0,a6
    a0d6:	|         move.l 188(sp),d1
    a0da:	|         move.l 184(sp),d2
    a0de:	|         move.l 180(sp),d3
    a0e2:	|         jsr -48(a6)
    a0e6:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    a0ea:	|         move.l 256(sp),172(sp)
    a0f0:	|         move.w 18970 <allowAnyFilename>,d0
    a0f6:	|         movea.w d0,a0
    a0f8:	|         move.l a0,168(sp)
    a0fc:	|         move.l 19102 <DOSBase>,d0
    a102:	|         movea.l d0,a6
    a104:	|         move.l 172(sp),d1
    a108:	|         move.l 168(sp),d2
    a10c:	|         jsr -312(a6)
    a110:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    a114:	|         move.l 256(sp),160(sp)
    a11a:	|         move.w 1909a <captureAllKeys>,d0
    a120:	|         movea.w d0,a0
    a122:	|         move.l a0,156(sp)
    a126:	|         move.l 19102 <DOSBase>,d0
    a12c:	|         movea.l d0,a6
    a12e:	|         move.l 160(sp),d1
    a132:	|         move.l 156(sp),d2
    a136:	|         jsr -312(a6)
    a13a:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    a13e:	|         move.l 256(sp),148(sp)
    a144:	|         moveq #1,d0
    a146:	|         move.l d0,144(sp)
    a14a:	|         move.l 19102 <DOSBase>,d0
    a150:	|         movea.l d0,a6
    a152:	|         move.l 148(sp),d1
    a156:	|         move.l 144(sp),d2
    a15a:	|         jsr -312(a6)
    a15e:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    a162:	|         move.l 256(sp),136(sp)
    a168:	|         move.l 1924e <fontTableSize>,d0
    a16e:	|         sgt d0
    a170:	|         neg.b d0
    a172:	|         move.b d0,d0
    a174:	|         andi.l #255,d0
    a17a:	|         move.l d0,132(sp)
    a17e:	|         move.l 19102 <DOSBase>,d0
    a184:	|         movea.l d0,a6
    a186:	|         move.l 136(sp),d1
    a18a:	|         move.l 132(sp),d2
    a18e:	|         jsr -312(a6)
    a192:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    a196:	|         move.l 1924e <fontTableSize>,d0
    a19c:	|     /-- ble.s a1da <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    a19e:	|     |   move.l 19246 <loadedFontNum>,d0
    a1a4:	|     |   move.l 256(sp),-(sp)
    a1a8:	|     |   move.l d0,-(sp)
    a1aa:	|     |   jsr 8d0 <put2bytes>
    a1b0:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    a1b2:	|     |   move.l 19242 <fontHeight>,d0
    a1b8:	|     |   move.l 256(sp),-(sp)
    a1bc:	|     |   move.l d0,-(sp)
    a1be:	|     |   jsr 8d0 <put2bytes>
    a1c4:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    a1c6:	|     |   move.l 1924a <fontOrderString>,d0
    a1cc:	|     |   move.l 256(sp),-(sp)
    a1d0:	|     |   move.l d0,-(sp)
    a1d2:	|     |   jsr bd8 <writeString>
    a1d8:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    a1da:	|     \-> move.w 19018 <fontSpace>,d0
    a1e0:	|         movea.w d0,a0
    a1e2:	|         move.l 256(sp),-(sp)
    a1e6:	|         move.l a0,-(sp)
    a1e8:	|         jsr a9c <putSigned>
    a1ee:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    a1f0:	|         move.l 19208 <cameraX>,d0
    a1f6:	|         move.l 256(sp),-(sp)
    a1fa:	|         move.l d0,-(sp)
    a1fc:	|         jsr 8d0 <put2bytes>
    a202:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    a204:	|         move.l 1920c <cameraY>,d0
    a20a:	|         move.l 256(sp),-(sp)
    a20e:	|         move.l d0,-(sp)
    a210:	|         jsr 8d0 <put2bytes>
    a216:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    a218:	|         move.l 18ab2 <cameraZoom>,d0
    a21e:	|         move.l 256(sp),-(sp)
    a222:	|         move.l d0,-(sp)
    a224:	|         jsr a46 <putFloat>
    a22a:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    a22c:	|         move.l 256(sp),124(sp)
    a232:	|         move.b 18a8a <brightnessLevel>,d0
    a238:	|         move.b d0,d0
    a23a:	|         andi.l #255,d0
    a240:	|         move.l d0,120(sp)
    a244:	|         move.l 19102 <DOSBase>,d0
    a24a:	|         movea.l d0,a6
    a24c:	|         move.l 124(sp),d1
    a250:	|         move.l 120(sp),d2
    a254:	|         jsr -312(a6)
    a258:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    a25c:	|         move.l 256(sp),-(sp)
    a260:	|         jsr 4500 <saveHandlers>
    a266:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    a268:	|         move.l 256(sp),-(sp)
    a26c:	|         jsr 12a7e <saveRegions>
    a272:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    a274:	|         move.l 1901a <mouseCursorAnim>,d0
    a27a:	|         move.l 256(sp),-(sp)
    a27e:	|         move.l d0,-(sp)
    a280:	|         jsr 8772 <saveAnim>
    a286:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    a288:	|         move.l 1901e <mouseCursorFrameNum>,d0
    a28e:	|         move.l 256(sp),-(sp)
    a292:	|         move.l d0,-(sp)
    a294:	|         jsr 8d0 <put2bytes>
    a29a:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    a29c:	|         move.l 19092 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    a2a4:	|         clr.l 272(sp)
	while (thisFunction) {
    a2a8:	|     /-- bra.s a2b8 <saveGame+0x306>
		countFunctions ++;
    a2aa:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    a2ae:	|  |  |   movea.l 276(sp),a0
    a2b2:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    a2b8:	|  |  \-> tst.l 276(sp)
    a2bc:	|  \----- bne.s a2aa <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    a2be:	|         move.l 256(sp),-(sp)
    a2c2:	|         move.l 276(sp),-(sp)
    a2c6:	|         jsr 8d0 <put2bytes>
    a2cc:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    a2ce:	|         move.l 19092 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    a2d6:	|     /-- bra.s a2f2 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    a2d8:	|  /--|-> move.l 256(sp),-(sp)
    a2dc:	|  |  |   move.l 280(sp),-(sp)
    a2e0:	|  |  |   jsr 9dfa <saveFunction>
    a2e6:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    a2e8:	|  |  |   movea.l 276(sp),a0
    a2ec:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    a2f2:	|  |  \-> tst.l 276(sp)
    a2f6:	|  \----- bne.s a2d8 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    a2f8:	|         clr.l 280(sp)
    a2fc:	|     /-- bra.s a31e <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    a2fe:	|  /--|-> move.l 190a8 <globalVars>,d1
    a304:	|  |  |   move.l 280(sp),d0
    a308:	|  |  |   lsl.l #3,d0
    a30a:	|  |  |   add.l d1,d0
    a30c:	|  |  |   move.l 256(sp),-(sp)
    a310:	|  |  |   move.l d0,-(sp)
    a312:	|  |  |   jsr a6b6 <saveVariable>
    a318:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    a31a:	|  |  |   addq.l #1,280(sp)
    a31e:	|  |  \-> move.l 190d2 <numGlobals>,d0
    a324:	|  |      cmp.l 280(sp),d0
    a328:	|  \----- bgt.s a2fe <saveGame+0x34c>
	}

	savePeople (fp);
    a32a:	|         move.l 256(sp),-(sp)
    a32e:	|         jsr 889a <savePeople>
    a334:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    a336:	|         movea.l 1925a <currentFloor>,a0
    a33c:	|         move.l 8(a0),d0
    a340:	|  /----- beq.s a37e <saveGame+0x3cc>
		FPutC (fp, 1);
    a342:	|  |      move.l 256(sp),100(sp)
    a348:	|  |      moveq #1,d0
    a34a:	|  |      move.l d0,96(sp)
    a34e:	|  |      move.l 19102 <DOSBase>,d0
    a354:	|  |      movea.l d0,a6
    a356:	|  |      move.l 100(sp),d1
    a35a:	|  |      move.l 96(sp),d2
    a35e:	|  |      jsr -312(a6)
    a362:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    a366:	|  |      movea.l 1925a <currentFloor>,a0
    a36c:	|  |      move.l (a0),d0
    a36e:	|  |      move.l 256(sp),-(sp)
    a372:	|  |      move.l d0,-(sp)
    a374:	|  |      jsr 8d0 <put2bytes>
    a37a:	|  |      addq.l #8,sp
    a37c:	|  |  /-- bra.s a3a0 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    a37e:	|  \--|-> move.l 256(sp),112(sp)
    a384:	|     |   clr.l 108(sp)
    a388:	|     |   move.l 19102 <DOSBase>,d0
    a38e:	|     |   movea.l d0,a6
    a390:	|     |   move.l 112(sp),d1
    a394:	|     |   move.l 108(sp),d2
    a398:	|     |   jsr -312(a6)
    a39c:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    a3a0:	|     \-> move.l 191aa <zBuffer+0x50>,d0
    a3a6:	|  /----- beq.s a3e2 <saveGame+0x430>
		FPutC (fp, 1);
    a3a8:	|  |      move.l 256(sp),76(sp)
    a3ae:	|  |      moveq #1,d0
    a3b0:	|  |      move.l d0,72(sp)
    a3b4:	|  |      move.l 19102 <DOSBase>,d0
    a3ba:	|  |      movea.l d0,a6
    a3bc:	|  |      move.l 76(sp),d1
    a3c0:	|  |      move.l 72(sp),d2
    a3c4:	|  |      jsr -312(a6)
    a3c8:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    a3cc:	|  |      move.l 191a6 <zBuffer+0x4c>,d0
    a3d2:	|  |      move.l 256(sp),-(sp)
    a3d6:	|  |      move.l d0,-(sp)
    a3d8:	|  |      jsr 8d0 <put2bytes>
    a3de:	|  |      addq.l #8,sp
    a3e0:	|  |  /-- bra.s a404 <saveGame+0x452>
	} else FPutC (fp,0);
    a3e2:	|  \--|-> move.l 256(sp),88(sp)
    a3e8:	|     |   clr.l 84(sp)
    a3ec:	|     |   move.l 19102 <DOSBase>,d0
    a3f2:	|     |   movea.l d0,a6
    a3f4:	|     |   move.l 88(sp),d1
    a3f8:	|     |   move.l 84(sp),d2
    a3fc:	|     |   jsr -312(a6)
    a400:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    a404:	|     \-> move.l 256(sp),64(sp)
    a40a:	|         move.l 1921c <speechMode>,60(sp)
    a412:	|         move.l 19102 <DOSBase>,d0
    a418:	|         movea.l d0,a6
    a41a:	|         move.l 64(sp),d1
    a41e:	|         move.l 60(sp),d2
    a422:	|         jsr -312(a6)
    a426:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    a42a:	|         move.b 18fee <fadeMode>,d0
    a430:	|         move.b d0,d0
    a432:	|         andi.l #255,d0
    a438:	|         move.l d0,52(sp)
    a43c:	|         move.l 256(sp),48(sp)
    a442:	|         move.l 19102 <DOSBase>,d0
    a448:	|         movea.l d0,a6
    a44a:	|         move.l 52(sp),d1
    a44e:	|         move.l 48(sp),d2
    a452:	|         jsr -312(a6)
    a456:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    a45a:	|         move.l 19156 <speech>,d0
    a460:	|         move.l 256(sp),-(sp)
    a464:	|         move.l d0,-(sp)
    a466:	|         jsr 5b14 <saveSpeech>
    a46c:	|         addq.l #8,sp
	saveStatusBars (fp);
    a46e:	|         move.l 256(sp),-(sp)
    a472:	|         jsr 5510 <saveStatusBars>
    a478:	|         addq.l #4,sp
	saveSounds (fp);
    a47a:	|         move.l 256(sp),-(sp)
    a47e:	|         jsr a7fa <saveSounds>
    a484:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    a486:	|         move.w 19206 <saveEncoding>,d0
    a48c:	|         move.w d0,d0
    a48e:	|         andi.l #65535,d0
    a494:	|         move.l 256(sp),-(sp)
    a498:	|         move.l d0,-(sp)
    a49a:	|         jsr 8d0 <put2bytes>
    a4a0:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    a4a2:	|         move.l 191f8 <parallaxStuff>,d0
    a4a8:	|         move.l 256(sp),-(sp)
    a4ac:	|         move.l d0,-(sp)
    a4ae:	|         jsr aae6 <saveParallaxRecursive>
    a4b4:	|         addq.l #8,sp
	FPutC (fp, 0);
    a4b6:	|         move.l 256(sp),40(sp)
    a4bc:	|         clr.l 36(sp)
    a4c0:	|         move.l 19102 <DOSBase>,d0
    a4c6:	|         movea.l d0,a6
    a4c8:	|         move.l 40(sp),d1
    a4cc:	|         move.l 36(sp),d2
    a4d0:	|         jsr -312(a6)
    a4d4:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    a4d8:	|         move.l 256(sp),28(sp)
    a4de:	|         move.l 18a90 <languageNum>,24(sp)
    a4e6:	|         move.l 19102 <DOSBase>,d0
    a4ec:	|         movea.l d0,a6
    a4ee:	|         move.l 28(sp),d1
    a4f2:	|         move.l 24(sp),d2
    a4f6:	|         jsr -312(a6)
    a4fa:	|         move.l d0,20(sp)

	Close(fp);
    a4fe:	|         move.l 256(sp),16(sp)
    a504:	|         move.l 19102 <DOSBase>,d0
    a50a:	|         movea.l d0,a6
    a50c:	|         move.l 16(sp),d1
    a510:	|         jsr -36(a6)
    a514:	|         move.l d0,12(sp)
	clearStackLib ();
    a518:	|         jsr 9ab0 <clearStackLib>
	return TRUE;
    a51e:	|         moveq #1,d0
}
    a520:	\-------> movem.l (sp)+,d2-d3/a6
    a524:	          lea 272(sp),sp
    a528:	          rts

0000a52a <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    a52a:	       lea -12(sp),sp
	int elements = 0;
    a52e:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    a532:	       move.l 16(sp),(sp)
	while (search) {
    a536:	   /-- bra.s a542 <saveStack+0x18>
		elements ++;
    a538:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    a53c:	|  |   movea.l (sp),a0
    a53e:	|  |   move.l 8(a0),(sp)
	while (search) {
    a542:	|  \-> tst.l (sp)
    a544:	\----- bne.s a538 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    a546:	       move.l 20(sp),-(sp)
    a54a:	       move.l 12(sp),-(sp)
    a54e:	       jsr 8d0 <put2bytes>
    a554:	       addq.l #8,sp
	search = vs;
    a556:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    a55a:	       clr.l 4(sp)
    a55e:	   /-- bra.s a57a <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    a560:	/--|-> move.l (sp),d0
    a562:	|  |   move.l 20(sp),-(sp)
    a566:	|  |   move.l d0,-(sp)
    a568:	|  |   jsr a6b6 <saveVariable>
    a56e:	|  |   addq.l #8,sp
		search = search -> next;
    a570:	|  |   movea.l (sp),a0
    a572:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    a576:	|  |   addq.l #1,4(sp)
    a57a:	|  \-> move.l 4(sp),d0
    a57e:	|      cmp.l 8(sp),d0
    a582:	\----- blt.s a560 <saveStack+0x36>
	}
}
    a584:	       nop
    a586:	       nop
    a588:	       lea 12(sp),sp
    a58c:	       rts

0000a58e <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    a58e:	             lea -44(sp),sp
    a592:	             move.l a6,-(sp)
    a594:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    a596:	             move.l 191e2 <stackLib>,48(sp)
	int a = 0;
    a59e:	             clr.l 44(sp)
	while (s) {
    a5a2:	      /----- bra.s a600 <saveStackRef+0x72>
		if (s -> stack == vs) {
    a5a4:	   /--|----> movea.l 48(sp),a0
    a5a8:	   |  |      move.l (a0),d0
    a5aa:	   |  |      cmp.l 56(sp),d0
    a5ae:	   |  |  /-- bne.s a5f2 <saveStackRef+0x64>
			FPutC (fp, 1);
    a5b0:	   |  |  |   move.l 60(sp),16(sp)
    a5b6:	   |  |  |   moveq #1,d0
    a5b8:	   |  |  |   move.l d0,12(sp)
    a5bc:	   |  |  |   move.l 19102 <DOSBase>,d0
    a5c2:	   |  |  |   movea.l d0,a6
    a5c4:	   |  |  |   move.l 16(sp),d1
    a5c8:	   |  |  |   move.l 12(sp),d2
    a5cc:	   |  |  |   jsr -312(a6)
    a5d0:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    a5d4:	   |  |  |   move.l 191de <stackLibTotal>,d0
    a5da:	   |  |  |   sub.l 44(sp),d0
    a5de:	   |  |  |   move.l 60(sp),-(sp)
    a5e2:	   |  |  |   move.l d0,-(sp)
    a5e4:	   |  |  |   jsr 8d0 <put2bytes>
    a5ea:	   |  |  |   addq.l #8,sp
			return TRUE;
    a5ec:	   |  |  |   moveq #1,d0
    a5ee:	/--|--|--|-- bra.w a6ac <saveStackRef+0x11e>
		}
		s = s -> next;
    a5f2:	|  |  |  \-> movea.l 48(sp),a0
    a5f6:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    a5fc:	|  |  |      addq.l #1,44(sp)
	while (s) {
    a600:	|  |  \----> tst.l 48(sp)
    a604:	|  \-------- bne.s a5a4 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    a606:	|            move.l 60(sp),40(sp)
    a60c:	|            clr.l 36(sp)
    a610:	|            move.l 19102 <DOSBase>,d0
    a616:	|            movea.l d0,a6
    a618:	|            move.l 40(sp),d1
    a61c:	|            move.l 36(sp),d2
    a620:	|            jsr -312(a6)
    a624:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    a628:	|            movea.l 56(sp),a0
    a62c:	|            move.l (a0),d0
    a62e:	|            move.l 60(sp),-(sp)
    a632:	|            move.l d0,-(sp)
    a634:	|            jsr a52a <saveStack>
    a63a:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    a63c:	|            moveq #8,d0
    a63e:	|            move.l d0,28(sp)
    a642:	|            clr.l 24(sp)
    a646:	|            move.l 190fa <SysBase>,d0
    a64c:	|            movea.l d0,a6
    a64e:	|            move.l 28(sp),d0
    a652:	|            move.l 24(sp),d1
    a656:	|            jsr -684(a6)
    a65a:	|            move.l d0,20(sp)
    a65e:	|            move.l 20(sp),d0
    a662:	|            move.l d0,48(sp)
	stackLibTotal ++;
    a666:	|            move.l 191de <stackLibTotal>,d0
    a66c:	|            addq.l #1,d0
    a66e:	|            move.l d0,191de <stackLibTotal>
	if (! s) {
    a674:	|            tst.l 48(sp)
    a678:	|        /-- bne.s a68c <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    a67a:	|        |   pea 15c65 <custom.c.64ca0e9f+0xf8f>
    a680:	|        |   jsr 13db8 <KPrintF>
    a686:	|        |   addq.l #4,sp
		return FALSE;
    a688:	|        |   clr.w d0
    a68a:	+--------|-- bra.s a6ac <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    a68c:	|        \-> move.l 191e2 <stackLib>,d0
    a692:	|            movea.l 48(sp),a0
    a696:	|            move.l d0,4(a0)
	s -> stack = vs;
    a69a:	|            movea.l 48(sp),a0
    a69e:	|            move.l 56(sp),(a0)
	stackLib = s;
    a6a2:	|            move.l 48(sp),191e2 <stackLib>
	return TRUE;
    a6aa:	|            moveq #1,d0
}
    a6ac:	\----------> move.l (sp)+,d2
    a6ae:	             movea.l (sp)+,a6
    a6b0:	             lea 44(sp),sp
    a6b4:	             rts

0000a6b6 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    a6b6:	          lea -12(sp),sp
    a6ba:	          move.l a6,-(sp)
    a6bc:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    a6be:	          move.l 28(sp),16(sp)
    a6c4:	          movea.l 24(sp),a0
    a6c8:	          move.l (a0),d0
    a6ca:	          move.l d0,12(sp)
    a6ce:	          move.l 19102 <DOSBase>,d0
    a6d4:	          movea.l d0,a6
    a6d6:	          move.l 16(sp),d1
    a6da:	          move.l 12(sp),d2
    a6de:	          jsr -312(a6)
    a6e2:	          move.l d0,8(sp)
	switch (from -> varType) {
    a6e6:	          movea.l 24(sp),a0
    a6ea:	          move.l (a0),d0
    a6ec:	          moveq #9,d1
    a6ee:	          cmp.l d0,d1
    a6f0:	      /-- bcs.w a7a0 <saveVariable+0xea>
    a6f4:	      |   add.l d0,d0
    a6f6:	      |   movea.l d0,a0
    a6f8:	      |   adda.l #42756,a0
    a6fe:	      |   move.w (a0),d0
    a700:	      |   jmp (a704 <saveVariable+0x4e>,pc,d0.w)
    a704:	      |   ori.l #1310740,(a0)+
    a70a:	      |   ori.b #20,(20,a0,d0.w)
    a710:	      |   .short 0x004c
    a712:	      |   ori.b #126,(a4)
    a716:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    a71a:	      |   ori.b #40,(a0)+
    a71e:	      |   ori.b #47,d4
    a722:	      |   ori.b #0,(a4)+
    a726:	      |   jsr 958 <put4bytes>
    a72c:	      |   addq.l #8,sp
		return TRUE;
    a72e:	      |   moveq #1,d0
    a730:	/-----|-- bra.w a7dc <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    a734:	|     |   movea.l 24(sp),a0
    a738:	|     |   move.l 4(a0),d0
    a73c:	|     |   move.l 28(sp),-(sp)
    a740:	|     |   move.l d0,-(sp)
    a742:	|     |   jsr bd8 <writeString>
    a748:	|     |   addq.l #8,sp
		return TRUE;
    a74a:	|     |   moveq #1,d0
    a74c:	+-----|-- bra.w a7dc <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    a750:	|     |   movea.l 24(sp),a0
    a754:	|     |   move.l 4(a0),d0
    a758:	|     |   move.l 28(sp),-(sp)
    a75c:	|     |   move.l d0,-(sp)
    a75e:	|     |   jsr a58e <saveStackRef>
    a764:	|     |   addq.l #8,sp
    a766:	+-----|-- bra.s a7dc <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    a768:	|     |   movea.l 24(sp),a0
    a76c:	|     |   move.l 4(a0),d0
    a770:	|     |   move.l 28(sp),-(sp)
    a774:	|     |   move.l d0,-(sp)
    a776:	|     |   jsr 883c <saveCostume>
    a77c:	|     |   addq.l #8,sp
		return FALSE;
    a77e:	|     |   clr.w d0
    a780:	+-----|-- bra.s a7dc <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    a782:	|     |   movea.l 24(sp),a0
    a786:	|     |   move.l 4(a0),d0
    a78a:	|     |   move.l 28(sp),-(sp)
    a78e:	|     |   move.l d0,-(sp)
    a790:	|     |   jsr 8772 <saveAnim>
    a796:	|     |   addq.l #8,sp
		return FALSE;
    a798:	|     |   clr.w d0
    a79a:	+-----|-- bra.s a7dc <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    a79c:	|     |   clr.w d0
    a79e:	+-----|-- bra.s a7dc <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    a7a0:	|     \-> movea.l 24(sp),a0
    a7a4:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    a7a6:	|         moveq #10,d1
    a7a8:	|         cmp.l d0,d1
    a7aa:	|  /----- bcs.s a7c4 <saveVariable+0x10e>
						typeName[from->varType] :
    a7ac:	|  |      movea.l 24(sp),a0
    a7b0:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    a7b2:	|  |      add.l d0,d0
    a7b4:	|  |      movea.l d0,a1
    a7b6:	|  |      adda.l d0,a1
    a7b8:	|  |      lea 18ff0 <typeName>,a0
    a7be:	|  |      move.l (0,a1,a0.l),d0
    a7c2:	|  |  /-- bra.s a7ca <saveVariable+0x114>
    a7c4:	|  \--|-> move.l #89226,d0
    a7ca:	|     \-> move.l d0,-(sp)
    a7cc:	|         pea 15c91 <custom.c.64ca0e9f+0xfbb>
    a7d2:	|         jsr 13db8 <KPrintF>
    a7d8:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    a7da:	|         moveq #1,d0
    a7dc:	\-------> move.l (sp)+,d2
    a7de:	          movea.l (sp)+,a6
    a7e0:	          lea 12(sp),sp
    a7e4:	          rts

0000a7e6 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    a7e6:	moveq #0,d0
}
    a7e8:	rts

0000a7ea <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    a7ea:	nop
    a7ec:	rts

0000a7ee <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    a7ee:	nop
    a7f0:	rts

0000a7f2 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    a7f2:	moveq #1,d0
}
    a7f4:	rts

0000a7f6 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    a7f6:	nop
    a7f8:	rts

0000a7fa <saveSounds>:

void saveSounds (BPTR fp) {
    a7fa:	lea -12(sp),sp
    a7fe:	move.l a6,-(sp)
    a800:	move.l d2,-(sp)
	FPutC (fp,0);
    a802:	move.l 24(sp),16(sp)
    a808:	clr.l 12(sp)
    a80c:	move.l 19102 <DOSBase>,d0
    a812:	movea.l d0,a6
    a814:	move.l 16(sp),d1
    a818:	move.l 12(sp),d2
    a81c:	jsr -312(a6)
    a820:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    a824:	move.l 18aae <defSoundVol>,d0
    a82a:	move.l 24(sp),-(sp)
    a82e:	move.l d0,-(sp)
    a830:	jsr 8d0 <put2bytes>
    a836:	addq.l #8,sp
	put2bytes (defVol, fp);
    a838:	move.l 18aaa <defVol>,d0
    a83e:	move.l 24(sp),-(sp)
    a842:	move.l d0,-(sp)
    a844:	jsr 8d0 <put2bytes>
    a84a:	addq.l #8,sp
}
    a84c:	nop
    a84e:	move.l (sp)+,d2
    a850:	movea.l (sp)+,a6
    a852:	lea 12(sp),sp
    a856:	rts

0000a858 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    a858:	move.l 4(sp),18aaa <defVol>
}
    a860:	nop
    a862:	rts

0000a864 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    a864:	move.l 4(sp),18aae <defSoundVol>
}
    a86c:	nop
    a86e:	rts

0000a870 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    a870:	nop
    a872:	rts

0000a874 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    a874:	nop
    a876:	rts

0000a878 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    a878:	nop
    a87a:	rts

0000a87c <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    a87c:	subq.l #4,sp
    a87e:	move.l 12(sp),d0
    a882:	move.w d0,d0
    a884:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    a888:	moveq #1,d0
}
    a88a:	addq.l #4,sp
    a88c:	rts

0000a88e <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    a88e:	nop
    a890:	rts

0000a892 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    a892:	move.l 16(sp),-(sp)
    a896:	move.l 16(sp),-(sp)
    a89a:	jsr df4 <CstBlankScreen>
    a8a0:	addq.l #8,sp
}
    a8a2:	nop
    a8a4:	rts

0000a8a6 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    a8a6:	pea 15cb4 <custom.c.64ca0e9f+0xfde>
    a8ac:	jsr 13db8 <KPrintF>
    a8b2:	addq.l #4,sp
}
    a8b4:	nop
    a8b6:	rts

0000a8b8 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    a8b8:	movea.l 8(sp),a1
    a8bc:	movea.l 12(sp),a0
    a8c0:	move.l 8(sp),d1
    a8c4:	move.l 4(sp),d0
    a8c8:	move.l a1,-(sp)
    a8ca:	move.l a0,-(sp)
    a8cc:	move.l d1,-(sp)
    a8ce:	move.l d0,-(sp)
    a8d0:	jsr 1c3e <drawLine>
    a8d6:	lea 16(sp),sp
}
    a8da:	nop
    a8dc:	rts

0000a8de <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    a8de:	movea.l 12(sp),a1
    a8e2:	movea.l 4(sp),a0
    a8e6:	move.l 8(sp),d1
    a8ea:	move.l 4(sp),d0
    a8ee:	move.l a1,-(sp)
    a8f0:	move.l a0,-(sp)
    a8f2:	move.l d1,-(sp)
    a8f4:	move.l d0,-(sp)
    a8f6:	jsr 1c3e <drawLine>
    a8fc:	lea 16(sp),sp
}
    a900:	nop
    a902:	rts

0000a904 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    a904:	pea 15ced <custom.c.64ca0e9f+0x1017>
    a90a:	jsr 13db8 <KPrintF>
    a910:	addq.l #4,sp
}
    a912:	nop
    a914:	rts

0000a916 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    a916:	jsr 1bce <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    a91c:	pea 191f2 <backdropTextureName>
    a922:	pea 1 <_start+0x1>
    a926:	jsr 1dc0 <deleteTextures>
    a92c:	addq.l #8,sp
	backdropTextureName = 0;
    a92e:	clr.l 191f2 <backdropTextureName>
	backdropExists = FALSE;
    a934:	clr.w 191f6 <backdropExists>
}
    a93a:	nop
    a93c:	rts

0000a93e <killParallax>:

void killParallax () {
    a93e:	          lea -12(sp),sp
    a942:	          move.l a6,-(sp)
	while (parallaxStuff) {
    a944:	   /----- bra.s a9b0 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    a946:	/--|----> move.l 191f8 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    a94e:	|  |      movea.l 12(sp),a0
    a952:	|  |      move.l 42(a0),d0
    a956:	|  |      move.l d0,191f8 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    a95c:	|  |      move.l 12(sp),d0
    a960:	|  |      addq.l #4,d0
    a962:	|  |      move.l d0,-(sp)
    a964:	|  |      pea 1 <_start+0x1>
    a968:	|  |      jsr 1dc0 <deleteTextures>
    a96e:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    a970:	|  |      movea.l 12(sp),a0
    a974:	|  |      move.l (a0),d0
    a976:	|  |  /-- beq.s a990 <killParallax+0x52>
    a978:	|  |  |   movea.l 12(sp),a0
    a97c:	|  |  |   move.l (a0),8(sp)
    a980:	|  |  |   move.l 190fa <SysBase>,d0
    a986:	|  |  |   movea.l d0,a6
    a988:	|  |  |   movea.l 8(sp),a1
    a98c:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    a990:	|  |  \-> tst.l 12(sp)
    a994:	|  |  /-- beq.s a9ac <killParallax+0x6e>
    a996:	|  |  |   move.l 12(sp),4(sp)
    a99c:	|  |  |   move.l 190fa <SysBase>,d0
    a9a2:	|  |  |   movea.l d0,a6
    a9a4:	|  |  |   movea.l 4(sp),a1
    a9a8:	|  |  |   jsr -690(a6)
		k = NULL;
    a9ac:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    a9b0:	|  \----> move.l 191f8 <parallaxStuff>,d0
    a9b6:	\-------- bne.s a946 <killParallax+0x8>
	}
}
    a9b8:	          nop
    a9ba:	          nop
    a9bc:	          movea.l (sp)+,a6
    a9be:	          lea 12(sp),sp
    a9c2:	          rts

0000a9c4 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    a9c4:	       move.l 4(sp),-(sp)
    a9c8:	       jsr 487a <openFileFromNum>
    a9ce:	       addq.l #4,sp
    a9d0:	       tst.l d0
    a9d2:	   /-- bne.s a9e4 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    a9d4:	   |   pea 15d0e <custom.c.64ca0e9f+0x1038>
    a9da:	   |   jsr 13db8 <KPrintF>
    a9e0:	   |   addq.l #4,sp
		return;
    a9e2:	/--|-- bra.s aa04 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    a9e4:	|  \-> move.l 190e2 <bigDataFile>,d0
    a9ea:	|      move.l 12(sp),-(sp)
    a9ee:	|      move.l 12(sp),-(sp)
    a9f2:	|      move.l d0,-(sp)
    a9f4:	|      jsr 11fa <CstLoadBackdrop>
    a9fa:	|      lea 12(sp),sp
	finishAccess ();
    a9fe:	|      jsr 4772 <finishAccess>
	
}
    aa04:	\----> rts

0000aa06 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    aa06:	subq.l #8,sp
    aa08:	movea.l 12(sp),a0
    aa0c:	move.l 16(sp),d1
    aa10:	move.l 20(sp),d0
    aa14:	movea.w a0,a0
    aa16:	move.w a0,6(sp)
    aa1a:	move.w d1,d1
    aa1c:	move.w d1,4(sp)
    aa20:	move.w d0,d0
    aa22:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    aa26:	pea 15d5d <custom.c.64ca0e9f+0x1087>
    aa2c:	jsr 13db8 <KPrintF>
    aa32:	addq.l #4,sp

}
    aa34:	nop
    aa36:	addq.l #8,sp
    aa38:	rts

0000aa3a <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    aa3a:	pea 15d80 <custom.c.64ca0e9f+0x10aa>
    aa40:	jsr 13db8 <KPrintF>
    aa46:	addq.l #4,sp
}
    aa48:	nop
    aa4a:	rts

0000aa4c <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    aa4c:	pea 191fc <snapshotTextureName>
    aa52:	pea 1 <_start+0x1>
    aa56:	jsr 1dc0 <deleteTextures>
    aa5c:	addq.l #8,sp
	snapshotTextureName = 0;
    aa5e:	clr.l 191fc <snapshotTextureName>
}
    aa64:	nop
    aa66:	rts

0000aa68 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    aa68:	move.l 191ee <sceneHeight>,d0
    aa6e:	move.l d0,d1
    aa70:	move.l 191ea <sceneWidth>,d0
    aa76:	move.l d1,-(sp)
    aa78:	move.l d0,-(sp)
    aa7a:	jsr 199c <CstReserveBackdrop>
    aa80:	addq.l #8,sp
}
    aa82:	rts

0000aa84 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    aa84:	jsr a916 <killBackDrop>
	killParallax ();
    aa8a:	jsr a93e <killParallax>
	killZBuffer ();
    aa90:	jsr 620e <killZBuffer>
	sceneWidth = x;
    aa96:	move.l 4(sp),d0
    aa9a:	move.l d0,191ea <sceneWidth>
	sceneHeight = y;
    aaa0:	move.l 8(sp),d0
    aaa4:	move.l d0,191ee <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    aaaa:	pea 15db9 <custom.c.64ca0e9f+0x10e3>
    aab0:	jsr 13db8 <KPrintF>
    aab6:	addq.l #4,sp
	return reserveBackdrop();
    aab8:	jsr aa68 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    aabe:	rts

0000aac0 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    aac0:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    aac2:	move.l 12(sp),-(sp)
    aac6:	jsr 6bc <get2bytes>
    aacc:	addq.l #4,sp
    aace:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    aad2:	move.l 12(sp),-(sp)
    aad6:	jsr 6bc <get2bytes>
    aadc:	addq.l #4,sp
    aade:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    aae0:	moveq #1,d0
}
    aae2:	addq.l #8,sp
    aae4:	rts

0000aae6 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    aae6:	   /-> lea -12(sp),sp
    aaea:	   |   move.l a6,-(sp)
    aaec:	   |   move.l d2,-(sp)
	if (me) {
    aaee:	   |   tst.l 24(sp)
    aaf2:	/--|-- beq.w ab88 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    aaf6:	|  |   movea.l 24(sp),a0
    aafa:	|  |   move.l 42(a0),d0
    aafe:	|  |   move.l 28(sp),-(sp)
    ab02:	|  |   move.l d0,-(sp)
    ab04:	|  \-- jsr aae6 <saveParallaxRecursive>(pc)
    ab08:	|      addq.l #8,sp
		FPutC (fp, 1);
    ab0a:	|      move.l 28(sp),16(sp)
    ab10:	|      moveq #1,d0
    ab12:	|      move.l d0,12(sp)
    ab16:	|      move.l 19102 <DOSBase>,d0
    ab1c:	|      movea.l d0,a6
    ab1e:	|      move.l 16(sp),d1
    ab22:	|      move.l 12(sp),d2
    ab26:	|      jsr -312(a6)
    ab2a:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    ab2e:	|      movea.l 24(sp),a0
    ab32:	|      move.w 28(a0),d0
    ab36:	|      move.w d0,d0
    ab38:	|      andi.l #65535,d0
    ab3e:	|      move.l 28(sp),-(sp)
    ab42:	|      move.l d0,-(sp)
    ab44:	|      jsr 8d0 <put2bytes>
    ab4a:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    ab4c:	|      movea.l 24(sp),a0
    ab50:	|      move.w 30(a0),d0
    ab54:	|      move.w d0,d0
    ab56:	|      andi.l #65535,d0
    ab5c:	|      move.l 28(sp),-(sp)
    ab60:	|      move.l d0,-(sp)
    ab62:	|      jsr 8d0 <put2bytes>
    ab68:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    ab6a:	|      movea.l 24(sp),a0
    ab6e:	|      move.w 32(a0),d0
    ab72:	|      move.w d0,d0
    ab74:	|      andi.l #65535,d0
    ab7a:	|      move.l 28(sp),-(sp)
    ab7e:	|      move.l d0,-(sp)
    ab80:	|      jsr 8d0 <put2bytes>
    ab86:	|      addq.l #8,sp
	}
}
    ab88:	\----> nop
    ab8a:	       move.l (sp)+,d2
    ab8c:	       movea.l (sp)+,a6
    ab8e:	       lea 12(sp),sp
    ab92:	       rts

0000ab94 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    ab94:	pea 15de0 <custom.c.64ca0e9f+0x110a>
    ab9a:	jsr 13db8 <KPrintF>
    aba0:	addq.l #4,sp
	return TRUE;
    aba2:	moveq #1,d0
    aba4:	rts

0000aba6 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    aba6:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    aba8:	             move.l 19200 <allObjectTypes>,(sp)

	while (huntType) {
    abae:	      /----- bra.s abc6 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    abb0:	   /--|----> movea.l (sp),a0
    abb2:	   |  |      move.l 4(a0),d0
    abb6:	   |  |      cmp.l 8(sp),d0
    abba:	   |  |  /-- bne.s abc0 <findObjectType+0x1a>
    abbc:	   |  |  |   move.l (sp),d0
    abbe:	/--|--|--|-- bra.s abd6 <findObjectType+0x30>
		huntType = huntType -> next;
    abc0:	|  |  |  \-> movea.l (sp),a0
    abc2:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    abc6:	|  |  \----> tst.l (sp)
    abc8:	|  \-------- bne.s abb0 <findObjectType+0xa>
	}

	return loadObjectType (i);
    abca:	|            move.l 8(sp),-(sp)
    abce:	|            jsr ac96 <loadObjectType>
    abd4:	|            addq.l #4,sp
}
    abd6:	\----------> addq.l #4,sp
    abd8:	             rts

0000abda <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    abda:	             lea -12(sp),sp
	int i, num = 0;
    abde:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    abe2:	             move.l 20(sp),-(sp)
    abe6:	             jsr aba6 <findObjectType>
    abec:	             addq.l #4,sp
    abee:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    abf0:	             clr.l 8(sp)
    abf4:	   /-------- bra.s ac2a <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    abf6:	/--|-------> movea.l (sp),a0
    abf8:	|  |         move.l 38(a0),d1
    abfc:	|  |         move.l 8(sp),d0
    ac00:	|  |         lsl.l #3,d0
    ac02:	|  |         movea.l d1,a0
    ac04:	|  |         adda.l d0,a0
    ac06:	|  |         move.l (a0),d0
    ac08:	|  |         cmp.l 16(sp),d0
    ac0c:	|  |  /----- bne.s ac26 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    ac0e:	|  |  |      movea.l (sp),a0
    ac10:	|  |  |      move.l 38(a0),d1
    ac14:	|  |  |      move.l 8(sp),d0
    ac18:	|  |  |      lsl.l #3,d0
    ac1a:	|  |  |      movea.l d1,a0
    ac1c:	|  |  |      adda.l d0,a0
    ac1e:	|  |  |      move.l 4(a0),4(sp)
			break;
    ac24:	|  |  |  /-- bra.s ac36 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    ac26:	|  |  \--|-> addq.l #1,8(sp)
    ac2a:	|  \-----|-> movea.l (sp),a0
    ac2c:	|        |   move.l 16(a0),d0
    ac30:	|        |   cmp.l 8(sp),d0
    ac34:	\--------|-- bgt.s abf6 <getCombinationFunction+0x1c>
		}
	}

	return num;
    ac36:	         \-> move.l 4(sp),d0
}
    ac3a:	             lea 12(sp),sp
    ac3e:	             rts

0000ac40 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    ac40:	moveq #1,d0
}
    ac42:	rts

0000ac44 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    ac44:	subq.l #8,sp
    ac46:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    ac48:	move.l 16(sp),-(sp)
    ac4c:	jsr 6bc <get2bytes>
    ac52:	addq.l #4,sp
    ac54:	move.l d0,-(sp)
    ac56:	jsr ac96 <loadObjectType>
    ac5c:	addq.l #4,sp
    ac5e:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    ac62:	movea.l 8(sp),a0
    ac66:	move.l (a0),4(sp)
    ac6a:	move.l 190fa <SysBase>,d0
    ac70:	movea.l d0,a6
    ac72:	movea.l 4(sp),a1
    ac76:	jsr -690(a6)
	r -> screenName = readString (fp);
    ac7a:	move.l 16(sp),-(sp)
    ac7e:	jsr b02 <readString>
    ac84:	addq.l #4,sp
    ac86:	movea.l 8(sp),a0
    ac8a:	move.l d0,(a0)
	return r;
    ac8c:	move.l 8(sp),d0
}
    ac90:	movea.l (sp)+,a6
    ac92:	addq.l #8,sp
    ac94:	rts

0000ac96 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    ac96:	          lea -84(sp),sp
    ac9a:	          move.l a6,-(sp)
    ac9c:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    ac9e:	          moveq #42,d0
    aca0:	          move.l d0,84(sp)
    aca4:	          clr.l 80(sp)
    aca8:	          move.l 190fa <SysBase>,d0
    acae:	          movea.l d0,a6
    acb0:	          move.l 84(sp),d0
    acb4:	          move.l 80(sp),d1
    acb8:	          jsr -684(a6)
    acbc:	          move.l d0,76(sp)
    acc0:	          move.l 76(sp),d0
    acc4:	          move.l d0,72(sp)

    if (newType) {
    acc8:	/-------- beq.w af42 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    accc:	|         move.l 96(sp),-(sp)
    acd0:	|         jsr 4942 <openObjectSlice>
    acd6:	|         addq.l #4,sp
    acd8:	|         tst.w d0
    acda:	+-------- beq.w af42 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    acde:	|         move.l 190e2 <bigDataFile>,d0
    ace4:	|         move.l d0,-(sp)
    ace6:	|         jsr 6bc <get2bytes>
    acec:	|         addq.l #4,sp
    acee:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    acf2:	|         move.l 190e2 <bigDataFile>,64(sp)
    acfa:	|         move.l 19102 <DOSBase>,d0
    ad00:	|         movea.l d0,a6
    ad02:	|         move.l 64(sp),d1
    ad06:	|         jsr -306(a6)
    ad0a:	|         move.l d0,60(sp)
    ad0e:	|         move.l 60(sp),d0
    ad12:	|         move.l d0,d0
    ad14:	|         movea.l 72(sp),a0
    ad18:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    ad1c:	|         move.l 190e2 <bigDataFile>,56(sp)
    ad24:	|         move.l 19102 <DOSBase>,d0
    ad2a:	|         movea.l d0,a6
    ad2c:	|         move.l 56(sp),d1
    ad30:	|         jsr -306(a6)
    ad34:	|         move.l d0,52(sp)
    ad38:	|         move.l 52(sp),d0
    ad3c:	|         move.l d0,d0
    ad3e:	|         movea.l 72(sp),a0
    ad42:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    ad46:	|         move.l 190e2 <bigDataFile>,48(sp)
    ad4e:	|         move.l 19102 <DOSBase>,d0
    ad54:	|         movea.l d0,a6
    ad56:	|         move.l 48(sp),d1
    ad5a:	|         jsr -306(a6)
    ad5e:	|         move.l d0,44(sp)
    ad62:	|         move.l 44(sp),d0
    ad66:	|         move.l d0,d0
    ad68:	|         movea.l 72(sp),a0
    ad6c:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    ad70:	|         move.l 190e2 <bigDataFile>,40(sp)
    ad78:	|         move.l 19102 <DOSBase>,d0
    ad7e:	|         movea.l d0,a6
    ad80:	|         move.l 40(sp),d1
    ad84:	|         jsr -306(a6)
    ad88:	|         move.l d0,36(sp)
    ad8c:	|         move.l 36(sp),d0
    ad90:	|         movea.l 72(sp),a0
    ad94:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    ad98:	|         move.l 190e2 <bigDataFile>,32(sp)
    ada0:	|         move.l 19102 <DOSBase>,d0
    ada6:	|         movea.l d0,a6
    ada8:	|         move.l 32(sp),d1
    adac:	|         jsr -306(a6)
    adb0:	|         move.l d0,28(sp)
    adb4:	|         move.l 28(sp),d0
    adb8:	|         movea.l 72(sp),a0
    adbc:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    adc0:	|         move.l 190e2 <bigDataFile>,d0
    adc6:	|         move.l d0,-(sp)
    adc8:	|         jsr 718 <get4bytes>
    adce:	|         addq.l #4,sp
    add0:	|         movea.l 72(sp),a0
    add4:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    add8:	|         move.l 190e2 <bigDataFile>,d0
    adde:	|         move.l d0,-(sp)
    ade0:	|         jsr 6bc <get2bytes>
    ade6:	|         addq.l #4,sp
    ade8:	|         movea.l 72(sp),a0
    adec:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    adf0:	|         move.l 190e2 <bigDataFile>,24(sp)
    adf8:	|         move.l 19102 <DOSBase>,d0
    adfe:	|         movea.l d0,a6
    ae00:	|         move.l 24(sp),d1
    ae04:	|         jsr -306(a6)
    ae08:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    ae0c:	|         move.l 190e2 <bigDataFile>,d0
    ae12:	|         move.l d0,-(sp)
    ae14:	|         jsr 7d8 <getFloat>
    ae1a:	|         addq.l #4,sp
            getFloat(bigDataFile);
    ae1c:	|         move.l 190e2 <bigDataFile>,d0
    ae22:	|         move.l d0,-(sp)
    ae24:	|         jsr 7d8 <getFloat>
    ae2a:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    ae2c:	|         move.l 190e2 <bigDataFile>,d0
    ae32:	|         move.l d0,-(sp)
    ae34:	|         jsr 6bc <get2bytes>
    ae3a:	|         addq.l #4,sp
    ae3c:	|         move.l d0,d0
    ae3e:	|         movea.l 72(sp),a0
    ae42:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    ae46:	|         move.l 190e2 <bigDataFile>,d0
    ae4c:	|         move.l d0,-(sp)
    ae4e:	|         jsr 6bc <get2bytes>
    ae54:	|         addq.l #4,sp
    ae56:	|         movea.l 72(sp),a0
    ae5a:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    ae5e:	|         movea.l 72(sp),a0
    ae62:	|         move.l 16(a0),d0
    ae66:	|  /----- beq.s ae98 <loadObjectType+0x202>
    ae68:	|  |      movea.l 72(sp),a0
    ae6c:	|  |      move.l 16(a0),d0
    ae70:	|  |      lsl.l #3,d0
    ae72:	|  |      move.l d0,16(sp)
    ae76:	|  |      clr.l 12(sp)
    ae7a:	|  |      move.l 190fa <SysBase>,d0
    ae80:	|  |      movea.l d0,a6
    ae82:	|  |      move.l 16(sp),d0
    ae86:	|  |      move.l 12(sp),d1
    ae8a:	|  |      jsr -684(a6)
    ae8e:	|  |      move.l d0,8(sp)
    ae92:	|  |      move.l 8(sp),d0
    ae96:	|  |  /-- bra.s ae9a <loadObjectType+0x204>
    ae98:	|  \--|-> moveq #0,d0
    ae9a:	|     \-> movea.l 72(sp),a0
    ae9e:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    aea2:	|         clr.l 88(sp)
    aea6:	|     /-- bra.s aef6 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    aea8:	|  /--|-> move.l 190e2 <bigDataFile>,d1
    aeae:	|  |  |   movea.l 72(sp),a0
    aeb2:	|  |  |   movea.l 38(a0),a0
    aeb6:	|  |  |   move.l 88(sp),d0
    aeba:	|  |  |   lsl.l #3,d0
    aebc:	|  |  |   lea (0,a0,d0.l),a2
    aec0:	|  |  |   move.l d1,-(sp)
    aec2:	|  |  |   jsr 6bc <get2bytes>
    aec8:	|  |  |   addq.l #4,sp
    aeca:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    aecc:	|  |  |   move.l 190e2 <bigDataFile>,d1
    aed2:	|  |  |   movea.l 72(sp),a0
    aed6:	|  |  |   movea.l 38(a0),a0
    aeda:	|  |  |   move.l 88(sp),d0
    aede:	|  |  |   lsl.l #3,d0
    aee0:	|  |  |   lea (0,a0,d0.l),a2
    aee4:	|  |  |   move.l d1,-(sp)
    aee6:	|  |  |   jsr 6bc <get2bytes>
    aeec:	|  |  |   addq.l #4,sp
    aeee:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    aef2:	|  |  |   addq.l #1,88(sp)
    aef6:	|  |  \-> movea.l 72(sp),a0
    aefa:	|  |      move.l 16(a0),d0
    aefe:	|  |      cmp.l 88(sp),d0
    af02:	|  \----- bgt.s aea8 <loadObjectType+0x212>
            }
            finishAccess();
    af04:	|         jsr 4772 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    af0a:	|         move.l 68(sp),-(sp)
    af0e:	|         jsr 477c <getNumberedString>
    af14:	|         addq.l #4,sp
    af16:	|         movea.l 72(sp),a0
    af1a:	|         move.l d0,(a0)
            newType->objectNum = i;
    af1c:	|         movea.l 72(sp),a0
    af20:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    af26:	|         move.l 19200 <allObjectTypes>,d0
    af2c:	|         movea.l 72(sp),a0
    af30:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    af34:	|         move.l 72(sp),19200 <allObjectTypes>
            return newType;
    af3c:	|         move.l 72(sp),d0
    af40:	|     /-- bra.s af44 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    af42:	\-----|-> moveq #0,d0
}
    af44:	      \-> movea.l (sp)+,a2
    af46:	          movea.l (sp)+,a6
    af48:	          lea 84(sp),sp
    af4c:	          rts

0000af4e <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    af4e:	             lea -16(sp),sp
    af52:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    af54:	             move.l #102912,16(sp)

	while (* huntRegion) {
    af5c:	   /-------- bra.s afd0 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    af5e:	/--|-------> movea.l 16(sp),a0
    af62:	|  |         move.l (a0),d0
    af64:	|  |         cmp.l 24(sp),d0
    af68:	|  |  /----- bne.s afc2 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    af6a:	|  |  |      movea.l 24(sp),a0
    af6e:	|  |  |      move.l 8(a0),d0
    af72:	|  |  |      movea.l 16(sp),a0
    af76:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    af78:	|  |  |      movea.l 24(sp),a0
    af7c:	|  |  |      move.l 38(a0),12(sp)
    af82:	|  |  |      move.l 190fa <SysBase>,d0
    af88:	|  |  |      movea.l d0,a6
    af8a:	|  |  |      movea.l 12(sp),a1
    af8e:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    af92:	|  |  |      movea.l 24(sp),a0
    af96:	|  |  |      move.l (a0),8(sp)
    af9a:	|  |  |      move.l 190fa <SysBase>,d0
    afa0:	|  |  |      movea.l d0,a6
    afa2:	|  |  |      movea.l 8(sp),a1
    afa6:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    afaa:	|  |  |      move.l 24(sp),4(sp)
    afb0:	|  |  |      move.l 190fa <SysBase>,d0
    afb6:	|  |  |      movea.l d0,a6
    afb8:	|  |  |      movea.l 4(sp),a1
    afbc:	|  |  |      jsr -690(a6)
			return;
    afc0:	|  |  |  /-- bra.s afe6 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    afc2:	|  |  \--|-> movea.l 16(sp),a0
    afc6:	|  |     |   move.l (a0),d0
    afc8:	|  |     |   move.l d0,d1
    afca:	|  |     |   addq.l #8,d1
    afcc:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    afd0:	|  \-----|-> movea.l 16(sp),a0
    afd4:	|        |   move.l (a0),d0
    afd6:	\--------|-- bne.s af5e <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    afd8:	         |   pea 15e07 <custom.c.64ca0e9f+0x1131>
    afde:	         |   jsr 13db8 <KPrintF>
    afe4:	         |   addq.l #4,sp
}
    afe6:	         \-> movea.l (sp)+,a6
    afe8:	             lea 16(sp),sp
    afec:	             rts

0000afee <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    afee:	movea.l 4(sp),a0
    aff2:	move.l 4(a0),d0
    aff6:	move.l 8(sp),-(sp)
    affa:	move.l d0,-(sp)
    affc:	jsr 8d0 <put2bytes>
    b002:	addq.l #8,sp
	writeString (r -> screenName, fp);
    b004:	movea.l 4(sp),a0
    b008:	move.l (a0),d0
    b00a:	move.l 8(sp),-(sp)
    b00e:	move.l d0,-(sp)
    b010:	jsr bd8 <writeString>
    b016:	addq.l #8,sp
    b018:	nop
    b01a:	rts

0000b01c <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    b01c:	                         lea -112(sp),sp
    b020:	                         move.l a6,-(sp)
    b022:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    b024:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    b028:	                         move.w 19206 <saveEncoding>,d0
    b02e:	                  /----- beq.s b038 <fileToStack+0x1c>
    b030:	                  |      move.l #89645,d0
    b036:	                  |  /-- bra.s b03e <fileToStack+0x22>
    b038:	                  \--|-> move.l #89671,d0
    b03e:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    b042:	                         move.l 124(sp),112(sp)
    b048:	                         move.l #1005,108(sp)
    b050:	                         move.l 19102 <DOSBase>,d0
    b056:	                         movea.l d0,a6
    b058:	                         move.l 112(sp),d1
    b05c:	                         move.l 108(sp),d2
    b060:	                         jsr -30(a6)
    b064:	                         move.l d0,104(sp)
    b068:	                         move.l 104(sp),d0
    b06c:	                         move.l d0,100(sp)
    if (!fp) {
    b070:	                     /-- bne.s b08a <fileToStack+0x6e>
        KPrintF("No such file", filename);
    b072:	                     |   move.l 124(sp),-(sp)
    b076:	                     |   pea 15e5e <custom.c.64ca0e9f+0x1188>
    b07c:	                     |   jsr 13db8 <KPrintF>
    b082:	                     |   addq.l #8,sp
        return FALSE;
    b084:	                     |   clr.w d0
    b086:	/--------------------|-- bra.w b380 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    b08a:	|                    \-> move.w 19206 <saveEncoding>,d0
    b090:	|                        move.l d0,d0
    b092:	|                        move.b d0,19204 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    b098:	|                        move.w 19206 <saveEncoding>,d0
    b09e:	|                        lsr.w #8,d0
    b0a0:	|                        move.l d0,d0
    b0a2:	|                        move.b d0,19205 <encode2>

    while (*checker) {
    b0a8:	|                 /----- bra.s b10c <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    b0aa:	|              /--|----> move.l 100(sp),30(sp)
    b0b0:	|              |  |      move.l 19102 <DOSBase>,d0
    b0b6:	|              |  |      movea.l d0,a6
    b0b8:	|              |  |      move.l 30(sp),d1
    b0bc:	|              |  |      jsr -306(a6)
    b0c0:	|              |  |      move.l d0,26(sp)
    b0c4:	|              |  |      move.l 26(sp),d1
    b0c8:	|              |  |      movea.l 116(sp),a0
    b0cc:	|              |  |      move.b (a0),d0
    b0ce:	|              |  |      ext.w d0
    b0d0:	|              |  |      movea.w d0,a0
    b0d2:	|              |  |      cmpa.l d1,a0
    b0d4:	|              |  |  /-- beq.s b108 <fileToStack+0xec>
            Close(fp);
    b0d6:	|              |  |  |   move.l 100(sp),22(sp)
    b0dc:	|              |  |  |   move.l 19102 <DOSBase>,d0
    b0e2:	|              |  |  |   movea.l d0,a6
    b0e4:	|              |  |  |   move.l 22(sp),d1
    b0e8:	|              |  |  |   jsr -36(a6)
    b0ec:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    b0f0:	|              |  |  |   move.l 124(sp),-(sp)
    b0f4:	|              |  |  |   pea 15e6b <custom.c.64ca0e9f+0x1195>
    b0fa:	|              |  |  |   jsr 13db8 <KPrintF>
    b100:	|              |  |  |   addq.l #8,sp
            return FALSE;
    b102:	|              |  |  |   clr.w d0
    b104:	+--------------|--|--|-- bra.w b380 <fileToStack+0x364>
        }
        checker++;
    b108:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    b10c:	|              |  \----> movea.l 116(sp),a0
    b110:	|              |         move.b (a0),d0
    b112:	|              \-------- bne.s b0aa <fileToStack+0x8e>
    }

    if (saveEncoding) {
    b114:	|                        move.w 19206 <saveEncoding>,d0
    b11a:	|  /-------------------- beq.s b18e <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    b11c:	|  |                     move.l 100(sp),-(sp)
    b120:	|  |                     jsr b38a <readStringEncoded>
    b126:	|  |                     addq.l #4,sp
    b128:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    b12c:	|  |                     pea 15eac <custom.c.64ca0e9f+0x11d6>
    b132:	|  |                     move.l 100(sp),-(sp)
    b136:	|  |                     jsr 1121c <strcmp>
    b13c:	|  |                     addq.l #8,sp
    b13e:	|  |                     tst.l d0
    b140:	|  |                 /-- beq.s b174 <fileToStack+0x158>
            Close(fp);
    b142:	|  |                 |   move.l 100(sp),88(sp)
    b148:	|  |                 |   move.l 19102 <DOSBase>,d0
    b14e:	|  |                 |   movea.l d0,a6
    b150:	|  |                 |   move.l 88(sp),d1
    b154:	|  |                 |   jsr -36(a6)
    b158:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    b15c:	|  |                 |   move.l 124(sp),-(sp)
    b160:	|  |                 |   pea 15ebb <custom.c.64ca0e9f+0x11e5>
    b166:	|  |                 |   jsr 13db8 <KPrintF>
    b16c:	|  |                 |   addq.l #8,sp
            return FALSE;
    b16e:	|  |                 |   clr.w d0
    b170:	+--|-----------------|-- bra.w b380 <fileToStack+0x364>
        }
        FreeVec(checker);
    b174:	|  |                 \-> move.l 96(sp),92(sp)
    b17a:	|  |                     move.l 190fa <SysBase>,d0
    b180:	|  |                     movea.l d0,a6
    b182:	|  |                     movea.l 92(sp),a1
    b186:	|  |                     jsr -690(a6)
        checker = NULL;
    b18a:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    b18e:	|  >-------------------> move.w 19206 <saveEncoding>,d0
    b194:	|  |     /-------------- beq.w b2c8 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    b198:	|  |     |               move.l 100(sp),76(sp)
    b19e:	|  |     |               move.l 19102 <DOSBase>,d0
    b1a4:	|  |     |               movea.l d0,a6
    b1a6:	|  |     |               move.l 76(sp),d1
    b1aa:	|  |     |               jsr -306(a6)
    b1ae:	|  |     |               move.l d0,72(sp)
    b1b2:	|  |     |               move.l 72(sp),d0
    b1b6:	|  |     |               move.b 19204 <encode1>,d1
    b1bc:	|  |     |               ext.w d1
    b1be:	|  |     |               ext.l d1
    b1c0:	|  |     |               move.l d0,d2
    b1c2:	|  |     |               eor.l d1,d2
    b1c4:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    b1c8:	|  |     |               moveq #-1,d0
    b1ca:	|  |     |               cmp.l 68(sp),d0
    b1ce:	|  |  /--|-------------- beq.w b35e <fileToStack+0x342>

            char i = (char) tmp;
    b1d2:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    b1d8:	|  |  |  |               move.b 67(sp),d0
    b1dc:	|  |  |  |               ext.w d0
    b1de:	|  |  |  |               movea.w d0,a0
    b1e0:	|  |  |  |               moveq #2,d2
    b1e2:	|  |  |  |               cmp.l a0,d2
    b1e4:	|  |  |  |     /-------- beq.s b260 <fileToStack+0x244>
    b1e6:	|  |  |  |     |         moveq #2,d0
    b1e8:	|  |  |  |     |         cmp.l a0,d0
    b1ea:	|  |  |  |  /--|-------- blt.w b296 <fileToStack+0x27a>
    b1ee:	|  |  |  |  |  |         cmpa.w #0,a0
    b1f2:	|  |  |  |  |  |     /-- beq.s b1fe <fileToStack+0x1e2>
    b1f4:	|  |  |  |  |  |     |   moveq #1,d2
    b1f6:	|  |  |  |  |  |     |   cmp.l a0,d2
    b1f8:	|  |  |  |  |  |  /--|-- beq.s b23a <fileToStack+0x21e>
    b1fa:	|  |  |  |  +--|--|--|-- bra.w b296 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    b1fe:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    b202:	|  |  |  |  |  |  |      jsr b38a <readStringEncoded>
    b208:	|  |  |  |  |  |  |      addq.l #4,sp
    b20a:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    b20e:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    b212:	|  |  |  |  |  |  |      lea 14(sp),a0
    b216:	|  |  |  |  |  |  |      move.l a0,-(sp)
    b218:	|  |  |  |  |  |  |      jsr 11f92 <makeTextVar>
    b21e:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    b220:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    b226:	|  |  |  |  |  |  |      move.l 190fa <SysBase>,d0
    b22c:	|  |  |  |  |  |  |      movea.l d0,a6
    b22e:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    b232:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    b236:	|  |  |  |  |  |  |  /-- bra.w b2ee <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    b23a:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    b23e:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    b244:	|  |  |  |  |  |     |   addq.l #4,sp
    b246:	|  |  |  |  |  |     |   move.l d0,-(sp)
    b248:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    b24c:	|  |  |  |  |  |     |   lea 18(sp),a0
    b250:	|  |  |  |  |  |     |   move.l a0,-(sp)
    b252:	|  |  |  |  |  |     |   jsr 12662 <setVariable>
    b258:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    b25c:	|  |  |  |  |  |     +-- bra.w b2ee <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    b260:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    b266:	|  |  |  |  |        |   move.l 19102 <DOSBase>,d0
    b26c:	|  |  |  |  |        |   movea.l d0,a6
    b26e:	|  |  |  |  |        |   move.l 62(sp),d1
    b272:	|  |  |  |  |        |   jsr -306(a6)
    b276:	|  |  |  |  |        |   move.l d0,58(sp)
    b27a:	|  |  |  |  |        |   move.l 58(sp),d0
    b27e:	|  |  |  |  |        |   move.l d0,-(sp)
    b280:	|  |  |  |  |        |   pea 1 <_start+0x1>
    b284:	|  |  |  |  |        |   lea 18(sp),a0
    b288:	|  |  |  |  |        |   move.l a0,-(sp)
    b28a:	|  |  |  |  |        |   jsr 12662 <setVariable>
    b290:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    b294:	|  |  |  |  |        +-- bra.s b2ee <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    b296:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    b29a:	|  |  |  |           |   pea 15f3d <custom.c.64ca0e9f+0x1267>
    b2a0:	|  |  |  |           |   jsr 13db8 <KPrintF>
    b2a6:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    b2a8:	|  |  |  |           |   move.l 100(sp),46(sp)
    b2ae:	|  |  |  |           |   move.l 19102 <DOSBase>,d0
    b2b4:	|  |  |  |           |   movea.l d0,a6
    b2b6:	|  |  |  |           |   move.l 46(sp),d1
    b2ba:	|  |  |  |           |   jsr -36(a6)
    b2be:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    b2c2:	|  |  |  |           |   clr.w d0
    b2c4:	+--|--|--|-----------|-- bra.w b380 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    b2c8:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    b2cc:	|  |  |              |   jsr b450 <readTextPlain>
    b2d2:	|  |  |              |   addq.l #4,sp
    b2d4:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    b2d8:	|  |  |        /-----|-- beq.w b362 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    b2dc:	|  |  |        |     |   move.l 80(sp),-(sp)
    b2e0:	|  |  |        |     |   lea 14(sp),a0
    b2e4:	|  |  |        |     |   move.l a0,-(sp)
    b2e6:	|  |  |        |     |   jsr 11f92 <makeTextVar>
    b2ec:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    b2ee:	|  |  |        |     \-> movea.l 128(sp),a0
    b2f2:	|  |  |        |         move.l (a0),d0
    b2f4:	|  |  |        |  /----- bne.s b324 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    b2f6:	|  |  |        |  |      move.l 128(sp),d0
    b2fa:	|  |  |        |  |      move.l d0,-(sp)
    b2fc:	|  |  |        |  |      lea 14(sp),a0
    b300:	|  |  |        |  |      move.l a0,-(sp)
    b302:	|  |  |        |  |      jsr 11632 <addVarToStackQuick>
    b308:	|  |  |        |  |      addq.l #8,sp
    b30a:	|  |  |        |  |      tst.w d0
    b30c:	|  |  |        |  |  /-- bne.s b312 <fileToStack+0x2f6>
    b30e:	|  |  |        |  |  |   clr.w d0
    b310:	+--|--|--------|--|--|-- bra.s b380 <fileToStack+0x364>
            sH->last = sH->first;
    b312:	|  |  |        |  |  \-> movea.l 128(sp),a0
    b316:	|  |  |        |  |      move.l (a0),d0
    b318:	|  |  |        |  |      movea.l 128(sp),a0
    b31c:	|  |  |        |  |      move.l d0,4(a0)
    b320:	|  +--|--------|--|----- bra.w b18e <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    b324:	|  |  |        |  \----> movea.l 128(sp),a0
    b328:	|  |  |        |         move.l 4(a0),d0
    b32c:	|  |  |        |         addq.l #8,d0
    b32e:	|  |  |        |         move.l d0,-(sp)
    b330:	|  |  |        |         lea 14(sp),a0
    b334:	|  |  |        |         move.l a0,-(sp)
    b336:	|  |  |        |         jsr 11632 <addVarToStackQuick>
    b33c:	|  |  |        |         addq.l #8,sp
    b33e:	|  |  |        |         tst.w d0
    b340:	|  |  |        |     /-- bne.s b346 <fileToStack+0x32a>
    b342:	|  |  |        |     |   clr.w d0
    b344:	+--|--|--------|-----|-- bra.s b380 <fileToStack+0x364>
            sH->last = sH->last->next;
    b346:	|  |  |        |     \-> movea.l 128(sp),a0
    b34a:	|  |  |        |         movea.l 4(a0),a0
    b34e:	|  |  |        |         move.l 8(a0),d0
    b352:	|  |  |        |         movea.l 128(sp),a0
    b356:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    b35a:	|  \--|--------|-------- bra.w b18e <fileToStack+0x172>
            if (tmp == -1) break;
    b35e:	|     \--------|-------> nop
    b360:	|              |     /-- bra.s b364 <fileToStack+0x348>
            if (!line) break;
    b362:	|              \-----|-> nop
        }
    }
    Close(fp);
    b364:	|                    \-> move.l 100(sp),38(sp)
    b36a:	|                        move.l 19102 <DOSBase>,d0
    b370:	|                        movea.l d0,a6
    b372:	|                        move.l 38(sp),d1
    b376:	|                        jsr -36(a6)
    b37a:	|                        move.l d0,34(sp)
    return TRUE;
    b37e:	|                        moveq #1,d0
}
    b380:	\----------------------> move.l (sp)+,d2
    b382:	                         movea.l (sp)+,a6
    b384:	                         lea 112(sp),sp
    b388:	                         rts

0000b38a <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    b38a:	          lea -32(sp),sp
    b38e:	          move.l a6,-(sp)
    b390:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    b392:	          move.l 44(sp),-(sp)
    b396:	          jsr 6bc <get2bytes>
    b39c:	          addq.l #4,sp
    b39e:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    b3a2:	          move.l 32(sp),d0
    b3a6:	          addq.l #1,d0
    b3a8:	          move.l d0,28(sp)
    b3ac:	          clr.l 24(sp)
    b3b0:	          move.l 190fa <SysBase>,d0
    b3b6:	          movea.l d0,a6
    b3b8:	          move.l 28(sp),d0
    b3bc:	          move.l 24(sp),d1
    b3c0:	          jsr -684(a6)
    b3c4:	          move.l d0,20(sp)
    b3c8:	          move.l 20(sp),d0
    b3cc:	          move.l d0,16(sp)
    if (!s) return NULL;
    b3d0:	      /-- bne.s b3d6 <readStringEncoded+0x4c>
    b3d2:	      |   moveq #0,d0
    b3d4:	/-----|-- bra.s b446 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    b3d6:	|     \-> clr.l 36(sp)
    b3da:	|     /-- bra.s b42c <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    b3dc:	|  /--|-> move.l 44(sp),12(sp)
    b3e2:	|  |  |   move.l 19102 <DOSBase>,d0
    b3e8:	|  |  |   movea.l d0,a6
    b3ea:	|  |  |   move.l 12(sp),d1
    b3ee:	|  |  |   jsr -306(a6)
    b3f2:	|  |  |   move.l d0,8(sp)
    b3f6:	|  |  |   move.l 8(sp),d0
    b3fa:	|  |  |   move.l d0,d1
    b3fc:	|  |  |   move.b 19204 <encode1>,d2
    b402:	|  |  |   move.l 36(sp),d0
    b406:	|  |  |   movea.l 16(sp),a0
    b40a:	|  |  |   adda.l d0,a0
    b40c:	|  |  |   move.b d1,d0
    b40e:	|  |  |   eor.b d2,d0
    b410:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    b412:	|  |  |   move.b 19204 <encode1>,d0
    b418:	|  |  |   move.b d0,d1
    b41a:	|  |  |   move.b 19205 <encode2>,d0
    b420:	|  |  |   add.b d1,d0
    b422:	|  |  |   move.b d0,19204 <encode1>
    for (a = 0; a < len; a++) {
    b428:	|  |  |   addq.l #1,36(sp)
    b42c:	|  |  \-> move.l 36(sp),d0
    b430:	|  |      cmp.l 32(sp),d0
    b434:	|  \----- blt.s b3dc <readStringEncoded+0x52>
    }
    s[len] = 0;
    b436:	|         move.l 32(sp),d0
    b43a:	|         movea.l 16(sp),a0
    b43e:	|         adda.l d0,a0
    b440:	|         clr.b (a0)
    return s;
    b442:	|         move.l 16(sp),d0
}
    b446:	\-------> move.l (sp)+,d2
    b448:	          movea.l (sp)+,a6
    b44a:	          lea 32(sp),sp
    b44e:	          rts

0000b450 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    b450:	             lea -104(sp),sp
    b454:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    b458:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    b45c:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    b462:	             move.l 124(sp),106(sp)
    b468:	             clr.l 102(sp)
    b46c:	             clr.l 98(sp)
    b470:	             move.l 19102 <DOSBase>,d0
    b476:	             movea.l d0,a6
    b478:	             move.l 106(sp),d1
    b47c:	             move.l 102(sp),d2
    b480:	             move.l 98(sp),d3
    b484:	             jsr -66(a6)
    b488:	             move.l d0,94(sp)
    b48c:	             move.l 94(sp),d0
    b490:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    b494:	   /-------- bra.s b4d8 <readTextPlain+0x88>
        tmp = FGetC(fp);
    b496:	/--|-------> move.l 124(sp),22(sp)
    b49c:	|  |         move.l 19102 <DOSBase>,d0
    b4a2:	|  |         movea.l d0,a6
    b4a4:	|  |         move.l 22(sp),d1
    b4a8:	|  |         jsr -306(a6)
    b4ac:	|  |         move.l d0,18(sp)
    b4b0:	|  |         move.l 18(sp),d0
    b4b4:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    b4b8:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    b4be:	|  |         cmpi.b #10,17(sp)
    b4c4:	|  |  /----- beq.s b4ce <readTextPlain+0x7e>
    b4c6:	|  |  |      moveq #-1,d0
    b4c8:	|  |  |      cmp.l 110(sp),d0
    b4cc:	|  |  |  /-- bne.s b4d4 <readTextPlain+0x84>
            keepGoing = FALSE;
    b4ce:	|  |  \--|-> clr.w 114(sp)
    b4d2:	|  +-----|-- bra.s b4d8 <readTextPlain+0x88>
        } else {
            stringSize++;
    b4d4:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    b4d8:	|  \-------> tst.w 114(sp)
    b4dc:	\----------- bne.s b496 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    b4de:	             tst.l 116(sp)
    b4e2:	         /-- bne.s b4f2 <readTextPlain+0xa2>
    b4e4:	         |   moveq #-1,d0
    b4e6:	         |   cmp.l 110(sp),d0
    b4ea:	         +-- bne.s b4f2 <readTextPlain+0xa2>
        return NULL;
    b4ec:	         |   moveq #0,d0
    b4ee:	      /--|-- bra.w b5d8 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    b4f2:	      |  \-> move.l 124(sp),86(sp)
    b4f8:	      |      move.l 90(sp),82(sp)
    b4fe:	      |      moveq #-1,d0
    b500:	      |      move.l d0,78(sp)
    b504:	      |      move.l 19102 <DOSBase>,d0
    b50a:	      |      movea.l d0,a6
    b50c:	      |      move.l 86(sp),d1
    b510:	      |      move.l 82(sp),d2
    b514:	      |      move.l 78(sp),d3
    b518:	      |      jsr -66(a6)
    b51c:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    b520:	      |      move.l 116(sp),d0
    b524:	      |      addq.l #1,d0
    b526:	      |      move.l d0,70(sp)
    b52a:	      |      clr.l 66(sp)
    b52e:	      |      move.l 190fa <SysBase>,d0
    b534:	      |      movea.l d0,a6
    b536:	      |      move.l 70(sp),d0
    b53a:	      |      move.l 66(sp),d1
    b53e:	      |      jsr -684(a6)
    b542:	      |      move.l d0,62(sp)
    b546:	      |      move.l 62(sp),d0
    b54a:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    b54e:	      |  /-- bne.s b556 <readTextPlain+0x106>
    b550:	      |  |   moveq #0,d0
    b552:	      +--|-- bra.w b5d8 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    b556:	      |  \-> move.l 124(sp),54(sp)
    b55c:	      |      move.l 58(sp),50(sp)
    b562:	      |      moveq #1,d0
    b564:	      |      move.l d0,46(sp)
    b568:	      |      move.l 116(sp),42(sp)
    b56e:	      |      move.l 19102 <DOSBase>,d0
    b574:	      |      movea.l d0,a6
    b576:	      |      move.l 54(sp),d1
    b57a:	      |      move.l 50(sp),d2
    b57e:	      |      move.l 46(sp),d3
    b582:	      |      move.l 42(sp),d4
    b586:	      |      jsr -324(a6)
    b58a:	      |      move.l d0,38(sp)
    b58e:	      |      move.l 38(sp),d0
    b592:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    b596:	      |      move.l 34(sp),d0
    b59a:	      |      cmp.l 116(sp),d0
    b59e:	      |  /-- beq.s b5ae <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    b5a0:	      |  |   pea 15f72 <custom.c.64ca0e9f+0x129c>
    b5a6:	      |  |   jsr 13db8 <KPrintF>
    b5ac:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    b5ae:	      |  \-> move.l 124(sp),30(sp)
    b5b4:	      |      move.l 19102 <DOSBase>,d0
    b5ba:	      |      movea.l d0,a6
    b5bc:	      |      move.l 30(sp),d1
    b5c0:	      |      jsr -306(a6)
    b5c4:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    b5c8:	      |      move.l 116(sp),d0
    b5cc:	      |      movea.l 58(sp),a0
    b5d0:	      |      adda.l d0,a0
    b5d2:	      |      clr.b (a0)
    }

    return reply;
    b5d4:	      |      move.l 58(sp),d0
}
    b5d8:	      \----> movem.l (sp)+,d2-d4/a6
    b5dc:	             lea 104(sp),sp
    b5e0:	             rts

0000b5e2 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    b5e2:	                      lea -144(sp),sp
    b5e6:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    b5ea:	                      move.l 160(sp),148(sp)
    b5f0:	                      move.l #1006,144(sp)
    b5f8:	                      move.l 19102 <DOSBase>,d0
    b5fe:	                      movea.l d0,a6
    b600:	                      move.l 148(sp),d1
    b604:	                      move.l 144(sp),d2
    b608:	                      jsr -30(a6)
    b60c:	                      move.l d0,140(sp)
    b610:	                      move.l 140(sp),d0
    b614:	                      move.l d0,136(sp)

    if (!fp) {
    b618:	                  /-- bne.s b632 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    b61a:	                  |   move.l 160(sp),-(sp)
    b61e:	                  |   pea 15f93 <custom.c.64ca0e9f+0x12bd>
    b624:	                  |   jsr 13db8 <KPrintF>
    b62a:	                  |   addq.l #8,sp
        return FALSE;
    b62c:	                  |   clr.w d0
    b62e:	/-----------------|-- bra.w b8ee <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    b632:	|                 \-> movea.l 164(sp),a0
    b636:	|                     movea.l 4(a0),a0
    b63a:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    b63e:	|                     move.w 19206 <saveEncoding>,d0
    b644:	|                     move.l d0,d0
    b646:	|                     move.b d0,19204 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    b64c:	|                     move.w 19206 <saveEncoding>,d0
    b652:	|                     lsr.w #8,d0
    b654:	|                     move.l d0,d0
    b656:	|                     move.b d0,19205 <encode2>

    if (saveEncoding) {
    b65c:	|                     move.w 19206 <saveEncoding>,d0
    b662:	|                 /-- beq.s b6b4 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    b664:	|                 |   move.l 136(sp),116(sp)
    b66a:	|                 |   move.l #89645,112(sp)
    b672:	|                 |   moveq #99,d0
    b674:	|                 |   not.b d0
    b676:	|                 |   add.l sp,d0
    b678:	|                 |   addi.l #-144,d0
    b67e:	|                 |   move.l d0,108(sp)
    b682:	|                 |   move.l 19102 <DOSBase>,d0
    b688:	|                 |   movea.l d0,a6
    b68a:	|                 |   move.l 116(sp),d1
    b68e:	|                 |   move.l 112(sp),d2
    b692:	|                 |   move.l 108(sp),d3
    b696:	|                 |   jsr -354(a6)
    b69a:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    b69e:	|                 |   move.l 136(sp),-(sp)
    b6a2:	|                 |   pea 15eac <custom.c.64ca0e9f+0x11d6>
    b6a8:	|                 |   jsr b8f8 <writeStringEncoded>
    b6ae:	|                 |   addq.l #8,sp
    b6b0:	|  /--------------|-- bra.w b8c6 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    b6b4:	|  |              \-> move.l 136(sp),132(sp)
    b6ba:	|  |                  move.l #89671,128(sp)
    b6c2:	|  |                  moveq #99,d1
    b6c4:	|  |                  not.b d1
    b6c6:	|  |                  add.l sp,d1
    b6c8:	|  |                  addi.l #-144,d1
    b6ce:	|  |                  move.l d1,124(sp)
    b6d2:	|  |                  move.l 19102 <DOSBase>,d0
    b6d8:	|  |                  movea.l d0,a6
    b6da:	|  |                  move.l 132(sp),d1
    b6de:	|  |                  move.l 128(sp),d2
    b6e2:	|  |                  move.l 124(sp),d3
    b6e6:	|  |                  jsr -354(a6)
    b6ea:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    b6ee:	|  +----------------- bra.w b8c6 <stackToFile+0x2e4>
        if (saveEncoding) {
    b6f2:	|  |  /-------------> move.w 19206 <saveEncoding>,d0
    b6f8:	|  |  |     /-------- beq.w b84a <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    b6fc:	|  |  |     |         movea.l 152(sp),a0
    b700:	|  |  |     |         move.l (a0),d0
    b702:	|  |  |     |         moveq #1,d1
    b704:	|  |  |     |         cmp.l d0,d1
    b706:	|  |  |     |     /-- beq.s b756 <stackToFile+0x174>
    b708:	|  |  |     |     |   moveq #3,d1
    b70a:	|  |  |     |     |   cmp.l d0,d1
    b70c:	|  |  |     |  /--|-- bne.w b818 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    b710:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    b716:	|  |  |     |  |  |   move.b 19204 <encode1>,d0
    b71c:	|  |  |     |  |  |   ext.w d0
    b71e:	|  |  |     |  |  |   movea.w d0,a0
    b720:	|  |  |     |  |  |   move.l a0,72(sp)
    b724:	|  |  |     |  |  |   move.l 19102 <DOSBase>,d0
    b72a:	|  |  |     |  |  |   movea.l d0,a6
    b72c:	|  |  |     |  |  |   move.l 76(sp),d1
    b730:	|  |  |     |  |  |   move.l 72(sp),d2
    b734:	|  |  |     |  |  |   jsr -312(a6)
    b738:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    b73c:	|  |  |     |  |  |   movea.l 152(sp),a0
    b740:	|  |  |     |  |  |   move.l 4(a0),d0
    b744:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    b748:	|  |  |     |  |  |   move.l d0,-(sp)
    b74a:	|  |  |     |  |  |   jsr b8f8 <writeStringEncoded>
    b750:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    b752:	|  |  |  /--|--|--|-- bra.w b8bc <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    b756:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    b75a:	|  |  |  |  |  |      move.l 4(a0),d0
    b75e:	|  |  |  |  |  |  /-- bmi.s b7ce <stackToFile+0x1ec>
    b760:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    b764:	|  |  |  |  |  |  |   move.l 4(a0),d0
    b768:	|  |  |  |  |  |  |   cmpi.l #255,d0
    b76e:	|  |  |  |  |  |  +-- bgt.s b7ce <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    b770:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    b776:	|  |  |  |  |  |  |   move.b 19204 <encode1>,d0
    b77c:	|  |  |  |  |  |  |   eori.b #2,d0
    b780:	|  |  |  |  |  |  |   ext.w d0
    b782:	|  |  |  |  |  |  |   movea.w d0,a0
    b784:	|  |  |  |  |  |  |   move.l a0,60(sp)
    b788:	|  |  |  |  |  |  |   move.l 19102 <DOSBase>,d0
    b78e:	|  |  |  |  |  |  |   movea.l d0,a6
    b790:	|  |  |  |  |  |  |   move.l 64(sp),d1
    b794:	|  |  |  |  |  |  |   move.l 60(sp),d2
    b798:	|  |  |  |  |  |  |   jsr -312(a6)
    b79c:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    b7a0:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    b7a6:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    b7aa:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    b7b0:	|  |  |  |  |  |  |   move.l 19102 <DOSBase>,d0
    b7b6:	|  |  |  |  |  |  |   movea.l d0,a6
    b7b8:	|  |  |  |  |  |  |   move.l 52(sp),d1
    b7bc:	|  |  |  |  |  |  |   move.l 48(sp),d2
    b7c0:	|  |  |  |  |  |  |   jsr -312(a6)
    b7c4:	|  |  |  |  |  |  |   move.l d0,44(sp)
    b7c8:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    b7ca:	|  |  |  +--|--|--|-- bra.w b8bc <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    b7ce:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    b7d4:	|  |  |  |  |  |      move.b 19204 <encode1>,d0
    b7da:	|  |  |  |  |  |      eori.b #1,d0
    b7de:	|  |  |  |  |  |      ext.w d0
    b7e0:	|  |  |  |  |  |      movea.w d0,a0
    b7e2:	|  |  |  |  |  |      move.l a0,36(sp)
    b7e6:	|  |  |  |  |  |      move.l 19102 <DOSBase>,d0
    b7ec:	|  |  |  |  |  |      movea.l d0,a6
    b7ee:	|  |  |  |  |  |      move.l 40(sp),d1
    b7f2:	|  |  |  |  |  |      move.l 36(sp),d2
    b7f6:	|  |  |  |  |  |      jsr -312(a6)
    b7fa:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    b7fe:	|  |  |  |  |  |      movea.l 152(sp),a0
    b802:	|  |  |  |  |  |      move.l 4(a0),d0
    b806:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    b80a:	|  |  |  |  |  |      move.l d0,-(sp)
    b80c:	|  |  |  |  |  |      jsr 958 <put4bytes>
    b812:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    b814:	|  |  |  +--|--|----- bra.w b8bc <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    b818:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    b81c:	|  |  |  |  |         pea 15fa5 <custom.c.64ca0e9f+0x12cf>
    b822:	|  |  |  |  |         jsr 13db8 <KPrintF>
    b828:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    b82a:	|  |  |  |  |         move.l 136(sp),28(sp)
    b830:	|  |  |  |  |         move.l 19102 <DOSBase>,d0
    b836:	|  |  |  |  |         movea.l d0,a6
    b838:	|  |  |  |  |         move.l 28(sp),d1
    b83c:	|  |  |  |  |         jsr -36(a6)
    b840:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    b844:	|  |  |  |  |         clr.w d0
    b846:	+--|--|--|--|-------- bra.w b8ee <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    b84a:	|  |  |  |  \-------> move.l 152(sp),d0
    b84e:	|  |  |  |            move.l d0,-(sp)
    b850:	|  |  |  |            jsr 12346 <getTextFromAnyVar>
    b856:	|  |  |  |            addq.l #4,sp
    b858:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    b85c:	|  |  |  |     /----- beq.s b8d0 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    b85e:	|  |  |  |     |      movea.l 100(sp),a0
    b862:	|  |  |  |     |      move.b (a0),d0
    b864:	|  |  |  |     |      ext.w d0
    b866:	|  |  |  |     |      movea.w d0,a0
    b868:	|  |  |  |     |      move.l a0,12(sp)
    b86c:	|  |  |  |     |      move.l 136(sp),96(sp)
    b872:	|  |  |  |     |      move.l #90113,92(sp)
    b87a:	|  |  |  |     |      moveq #99,d0
    b87c:	|  |  |  |     |      not.b d0
    b87e:	|  |  |  |     |      add.l sp,d0
    b880:	|  |  |  |     |      addi.l #-144,d0
    b886:	|  |  |  |     |      move.l d0,88(sp)
    b88a:	|  |  |  |     |      move.l 19102 <DOSBase>,d0
    b890:	|  |  |  |     |      movea.l d0,a6
    b892:	|  |  |  |     |      move.l 96(sp),d1
    b896:	|  |  |  |     |      move.l 92(sp),d2
    b89a:	|  |  |  |     |      move.l 88(sp),d3
    b89e:	|  |  |  |     |      jsr -354(a6)
    b8a2:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    b8a6:	|  |  |  |     |      move.l 100(sp),80(sp)
    b8ac:	|  |  |  |     |      move.l 190fa <SysBase>,d0
    b8b2:	|  |  |  |     |      movea.l d0,a6
    b8b4:	|  |  |  |     |      movea.l 80(sp),a1
    b8b8:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    b8bc:	|  |  |  \-----|----> movea.l 152(sp),a0
    b8c0:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    b8c6:	|  \--|--------|----> tst.l 152(sp)
    b8ca:	|     \--------|----- bne.w b6f2 <stackToFile+0x110>
    b8ce:	|              |  /-- bra.s b8d2 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    b8d0:	|              \--|-> nop
    }
    Close(fp);
    b8d2:	|                 \-> move.l 136(sp),20(sp)
    b8d8:	|                     move.l 19102 <DOSBase>,d0
    b8de:	|                     movea.l d0,a6
    b8e0:	|                     move.l 20(sp),d1
    b8e4:	|                     jsr -36(a6)
    b8e8:	|                     move.l d0,16(sp)
    return TRUE;
    b8ec:	|                     moveq #1,d0
}
    b8ee:	\-------------------> movem.l (sp)+,d2-d3/a6
    b8f2:	                      lea 144(sp),sp
    b8f6:	                      rts

0000b8f8 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    b8f8:	       lea -20(sp),sp
    b8fc:	       move.l a6,-(sp)
    b8fe:	       move.l d2,-(sp)
	int a, len = strlen (s);
    b900:	       move.l 32(sp),-(sp)
    b904:	       jsr 1125c <strlen>
    b90a:	       addq.l #4,sp
    b90c:	       move.l d0,20(sp)

	put2bytes (len, fp);
    b910:	       move.l 36(sp),-(sp)
    b914:	       move.l 24(sp),-(sp)
    b918:	       jsr 8d0 <put2bytes>
    b91e:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    b920:	       clr.l 24(sp)
    b924:	   /-- bra.s b97a <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    b926:	/--|-> move.l 36(sp),16(sp)
    b92c:	|  |   move.l 24(sp),d0
    b930:	|  |   movea.l 32(sp),a0
    b934:	|  |   adda.l d0,a0
    b936:	|  |   move.b (a0),d1
    b938:	|  |   move.b 19204 <encode1>,d0
    b93e:	|  |   eor.b d1,d0
    b940:	|  |   ext.w d0
    b942:	|  |   movea.w d0,a0
    b944:	|  |   move.l a0,12(sp)
    b948:	|  |   move.l 19102 <DOSBase>,d0
    b94e:	|  |   movea.l d0,a6
    b950:	|  |   move.l 16(sp),d1
    b954:	|  |   move.l 12(sp),d2
    b958:	|  |   jsr -312(a6)
    b95c:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    b960:	|  |   move.b 19204 <encode1>,d0
    b966:	|  |   move.b d0,d1
    b968:	|  |   move.b 19205 <encode2>,d0
    b96e:	|  |   add.b d1,d0
    b970:	|  |   move.b d0,19204 <encode1>
	for (a = 0; a < len; a ++) {
    b976:	|  |   addq.l #1,24(sp)
    b97a:	|  \-> move.l 24(sp),d0
    b97e:	|      cmp.l 20(sp),d0
    b982:	\----- blt.s b926 <writeStringEncoded+0x2e>
	}
}
    b984:	       nop
    b986:	       nop
    b988:	       move.l (sp)+,d2
    b98a:	       movea.l (sp)+,a6
    b98c:	       lea 20(sp),sp
    b990:	       rts

0000b992 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    b992:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    b994:	                   tst.l 8(sp)
    b998:	               /-- bne.s b99e <failSecurityCheck+0xc>
    b99a:	               |   moveq #1,d0
    b99c:	/--------------|-- bra.s ba1c <failSecurityCheck+0x8a>

	int a = 0;
    b99e:	|              \-> clr.l (sp)

	while (fn[a]) {
    b9a0:	|     /----------- bra.s ba0e <failSecurityCheck+0x7c>
		switch (fn[a]) {
    b9a2:	|  /--|----------> move.l (sp),d0
    b9a4:	|  |  |            movea.l 8(sp),a0
    b9a8:	|  |  |            adda.l d0,a0
    b9aa:	|  |  |            move.b (a0),d0
    b9ac:	|  |  |            ext.w d0
    b9ae:	|  |  |            movea.w d0,a0
    b9b0:	|  |  |            moveq #124,d0
    b9b2:	|  |  |            cmp.l a0,d0
    b9b4:	|  |  |     /----- beq.s b9f6 <failSecurityCheck+0x64>
    b9b6:	|  |  |     |      moveq #124,d1
    b9b8:	|  |  |     |      cmp.l a0,d1
    b9ba:	|  |  |  /--|----- blt.s ba0c <failSecurityCheck+0x7a>
    b9bc:	|  |  |  |  |      moveq #92,d0
    b9be:	|  |  |  |  |      cmp.l a0,d0
    b9c0:	|  |  |  |  +----- beq.s b9f6 <failSecurityCheck+0x64>
    b9c2:	|  |  |  |  |      moveq #92,d1
    b9c4:	|  |  |  |  |      cmp.l a0,d1
    b9c6:	|  |  |  +--|----- blt.s ba0c <failSecurityCheck+0x7a>
    b9c8:	|  |  |  |  |      moveq #60,d0
    b9ca:	|  |  |  |  |      cmp.l a0,d0
    b9cc:	|  |  |  |  |  /-- blt.s b9ec <failSecurityCheck+0x5a>
    b9ce:	|  |  |  |  |  |   moveq #34,d1
    b9d0:	|  |  |  |  |  |   cmp.l a0,d1
    b9d2:	|  |  |  +--|--|-- bgt.s ba0c <failSecurityCheck+0x7a>
    b9d4:	|  |  |  |  |  |   moveq #-34,d1
    b9d6:	|  |  |  |  |  |   add.l a0,d1
    b9d8:	|  |  |  |  |  |   move.l #83894529,d0
    b9de:	|  |  |  |  |  |   lsr.l d1,d0
    b9e0:	|  |  |  |  |  |   moveq #1,d1
    b9e2:	|  |  |  |  |  |   and.l d1,d0
    b9e4:	|  |  |  |  |  |   sne d0
    b9e6:	|  |  |  |  |  |   neg.b d0
    b9e8:	|  |  |  |  +--|-- bne.s b9f6 <failSecurityCheck+0x64>
    b9ea:	|  |  |  +--|--|-- bra.s ba0c <failSecurityCheck+0x7a>
    b9ec:	|  |  |  |  |  \-> lea -62(a0),a0
    b9f0:	|  |  |  |  |      moveq #1,d0
    b9f2:	|  |  |  |  |      cmp.l a0,d0
    b9f4:	|  |  |  +--|----- bcs.s ba0c <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    b9f6:	|  |  |  |  \----> move.l 8(sp),-(sp)
    b9fa:	|  |  |  |         pea 16005 <custom.c.64ca0e9f+0x132f>
    ba00:	|  |  |  |         jsr 13db8 <KPrintF>
    ba06:	|  |  |  |         addq.l #8,sp
				return TRUE;
    ba08:	|  |  |  |         moveq #1,d0
    ba0a:	+--|--|--|-------- bra.s ba1c <failSecurityCheck+0x8a>
		}
		a++;
    ba0c:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    ba0e:	|  |  \----------> move.l (sp),d0
    ba10:	|  |               movea.l 8(sp),a0
    ba14:	|  |               adda.l d0,a0
    ba16:	|  |               move.b (a0),d0
    ba18:	|  \-------------- bne.s b9a2 <failSecurityCheck+0x10>
	}
	return FALSE;
    ba1a:	|                  clr.w d0
}
    ba1c:	\----------------> addq.l #4,sp
    ba1e:	                   rts

0000ba20 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    ba20:	             lea -24(sp),sp
    ba24:	             move.l a6,-(sp)
    ba26:	             move.l 40(sp),d0
    ba2a:	             move.w d0,d0
    ba2c:	             move.w d0,6(sp)
	int fileNum = -1;
    ba30:	             moveq #-1,d0
    ba32:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    ba36:	             jsr 3d46 <killSpeechTimers>

	switch (numParams) {
    ba3c:	             moveq #2,d0
    ba3e:	             cmp.l 32(sp),d0
    ba42:	      /----- beq.s ba86 <sayCore+0x66>
    ba44:	      |      moveq #3,d0
    ba46:	      |      cmp.l 32(sp),d0
    ba4a:	/-----|----- bne.w bb68 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    ba4e:	|     |      movea.l 36(sp),a0
    ba52:	|     |      move.l 24(a0),d0
    ba56:	|     |      move.l d0,-(sp)
    ba58:	|     |      pea 5 <_start+0x5>
    ba5c:	|     |      lea 20(sp),a0
    ba60:	|     |      move.l a0,-(sp)
    ba62:	|     |      jsr 11d70 <getValueType>
    ba68:	|     |      lea 12(sp),sp
    ba6c:	|     |      tst.w d0
    ba6e:	|     |  /-- bne.s ba76 <sayCore+0x56>
    ba70:	|     |  |   moveq #1,d0
    ba72:	|  /--|--|-- bra.w bb78 <sayCore+0x158>
			trimStack (&fun -> stack);
    ba76:	|  |  |  \-> moveq #24,d0
    ba78:	|  |  |      add.l 36(sp),d0
    ba7c:	|  |  |      move.l d0,-(sp)
    ba7e:	|  |  |      jsr 126f4 <trimStack>
    ba84:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    ba86:	|  |  \----> movea.l 36(sp),a0
    ba8a:	|  |         move.l 24(a0),d0
    ba8e:	|  |         move.l d0,-(sp)
    ba90:	|  |         jsr 12346 <getTextFromAnyVar>
    ba96:	|  |         addq.l #4,sp
    ba98:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    ba9c:	|  |     /-- bne.s baa4 <sayCore+0x84>
    ba9e:	|  |     |   moveq #1,d0
    baa0:	|  +-----|-- bra.w bb78 <sayCore+0x158>
			trimStack (&fun -> stack);
    baa4:	|  |     \-> moveq #24,d0
    baa6:	|  |         add.l 36(sp),d0
    baaa:	|  |         move.l d0,-(sp)
    baac:	|  |         jsr 126f4 <trimStack>
    bab2:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    bab4:	|  |         movea.l 36(sp),a0
    bab8:	|  |         move.l 24(a0),d0
    babc:	|  |         move.l d0,-(sp)
    babe:	|  |         pea 7 <_start+0x7>
    bac2:	|  |         lea 16(sp),a0
    bac6:	|  |         move.l a0,-(sp)
    bac8:	|  |         jsr 11d70 <getValueType>
    bace:	|  |         lea 12(sp),sp
    bad2:	|  |         tst.w d0
    bad4:	|  |     /-- bne.s badc <sayCore+0xbc>
    bad6:	|  |     |   moveq #1,d0
    bad8:	|  +-----|-- bra.w bb78 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    badc:	|  |     \-> movea.l 36(sp),a0
    bae0:	|  |         move.l 24(a0),d0
    bae4:	|  |         move.l d0,-(sp)
    bae6:	|  |         pea 7 <_start+0x7>
    baea:	|  |         lea 16(sp),a0
    baee:	|  |         move.l a0,-(sp)
    baf0:	|  |         jsr 11d70 <getValueType>
    baf6:	|  |         lea 12(sp),sp
    bafa:	|  |         tst.w d0
    bafc:	|  |     /-- bne.s bb02 <sayCore+0xe2>
    bafe:	|  |     |   moveq #1,d0
    bb00:	|  +-----|-- bra.s bb78 <sayCore+0x158>
			trimStack (&fun -> stack);
    bb02:	|  |     \-> moveq #24,d0
    bb04:	|  |         add.l 36(sp),d0
    bb08:	|  |         move.l d0,-(sp)
    bb0a:	|  |         jsr 126f4 <trimStack>
    bb10:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    bb12:	|  |         movea.w 6(sp),a0
    bb16:	|  |         move.l 12(sp),d1
    bb1a:	|  |         move.l 8(sp),d0
    bb1e:	|  |         move.l a0,-(sp)
    bb20:	|  |         move.l d1,-(sp)
    bb22:	|  |         move.l d0,-(sp)
    bb24:	|  |         move.l 36(sp),-(sp)
    bb28:	|  |         jsr 5caa <wrapSpeech>
    bb2e:	|  |         lea 16(sp),sp
    bb32:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    bb36:	|  |         movea.l 36(sp),a0
    bb3a:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    bb40:	|  |         movea.l 36(sp),a0
    bb44:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    bb4a:	|  |         move.l 24(sp),16(sp)
    bb50:	|  |         move.l 190fa <SysBase>,d0
    bb56:	|  |         movea.l d0,a6
    bb58:	|  |         movea.l 16(sp),a1
    bb5c:	|  |         jsr -690(a6)
			newText = NULL;
    bb60:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    bb64:	|  |         moveq #0,d0
    bb66:	|  +-------- bra.s bb78 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    bb68:	\--|-------> pea 1608b <custom.c.64ca0e9f+0x13b5>
    bb6e:	   |         jsr 13db8 <KPrintF>
    bb74:	   |         addq.l #4,sp
	return BR_ERROR;
    bb76:	   |         moveq #1,d0
}
    bb78:	   \-------> movea.l (sp)+,a6
    bb7a:	             lea 24(sp),sp
    bb7e:	             rts

0000bb80 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	//KPrintF("say something");
	return sayCore (numParams, fun, TRUE);
    bb80:	pea 1 <_start+0x1>
    bb84:	move.l 12(sp),-(sp)
    bb88:	move.l 12(sp),-(sp)
    bb8c:	jsr ba20 <sayCore>
    bb92:	lea 12(sp),sp
}
    bb96:	rts

0000bb98 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    bb98:	clr.l -(sp)
    bb9a:	move.l 12(sp),-(sp)
    bb9e:	move.l 12(sp),-(sp)
    bba2:	jsr ba20 <sayCore>
    bba8:	lea 12(sp),sp
}
    bbac:	rts

0000bbae <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    bbae:	moveq #2,d0
}
    bbb0:	rts

0000bbb2 <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    bbb2:	moveq #2,d0
}
    bbb4:	rts

0000bbb6 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    bbb6:	nop
    bbb8:	rts

0000bbba <builtIn_setCursor>:

builtIn(setCursor)
{
    bbba:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    bbbc:	movea.l 12(sp),a0
    bbc0:	move.l 24(a0),d0
    bbc4:	move.l d0,-(sp)
    bbc6:	jsr 12248 <getAnimationFromVar>
    bbcc:	addq.l #4,sp
    bbce:	move.l d0,(sp)
	pickAnimCursor (aa);
    bbd0:	move.l (sp),-(sp)
    bbd2:	jsr dba <pickAnimCursor>
    bbd8:	addq.l #4,sp
	trimStack (&fun -> stack);
    bbda:	moveq #24,d0
    bbdc:	add.l 12(sp),d0
    bbe0:	move.l d0,-(sp)
    bbe2:	jsr 126f4 <trimStack>
    bbe8:	addq.l #4,sp
	return BR_CONTINUE;
    bbea:	moveq #2,d0
}
    bbec:	addq.l #4,sp
    bbee:	rts

0000bbf0 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    bbf0:	move.l 190b6 <input+0xa>,d1
    bbf6:	move.l 19208 <cameraX>,d0
    bbfc:	add.l d0,d1
    bbfe:	moveq #28,d0
    bc00:	add.l 8(sp),d0
    bc04:	move.l d1,-(sp)
    bc06:	pea 1 <_start+0x1>
    bc0a:	move.l d0,-(sp)
    bc0c:	jsr 12662 <setVariable>
    bc12:	lea 12(sp),sp
	return BR_CONTINUE;
    bc16:	moveq #2,d0
}
    bc18:	rts

0000bc1a <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    bc1a:	move.l 190ba <input+0xe>,d1
    bc20:	move.l 1920c <cameraY>,d0
    bc26:	add.l d0,d1
    bc28:	moveq #28,d0
    bc2a:	add.l 8(sp),d0
    bc2e:	move.l d1,-(sp)
    bc30:	pea 1 <_start+0x1>
    bc34:	move.l d0,-(sp)
    bc36:	jsr 12662 <setVariable>
    bc3c:	lea 12(sp),sp
	return BR_CONTINUE;
    bc40:	moveq #2,d0
}
    bc42:	rts

0000bc44 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    bc44:	move.l 190b6 <input+0xa>,d0
    bc4a:	move.l d0,-(sp)
    bc4c:	jsr 141f4 <__floatsisf>
    bc52:	addq.l #4,sp
    bc54:	move.l d0,d1
    bc56:	move.l 18ab2 <cameraZoom>,d0
    bc5c:	move.l d0,-(sp)
    bc5e:	move.l d1,-(sp)
    bc60:	jsr 142a6 <__mulsf3>
    bc66:	addq.l #8,sp
    bc68:	move.l d0,-(sp)
    bc6a:	jsr 1418c <__fixsfsi>
    bc70:	addq.l #4,sp
    bc72:	move.l d0,d1
    bc74:	moveq #28,d0
    bc76:	add.l 8(sp),d0
    bc7a:	move.l d1,-(sp)
    bc7c:	pea 1 <_start+0x1>
    bc80:	move.l d0,-(sp)
    bc82:	jsr 12662 <setVariable>
    bc88:	lea 12(sp),sp
	return BR_CONTINUE;
    bc8c:	moveq #2,d0
}
    bc8e:	rts

0000bc90 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    bc90:	move.l 190ba <input+0xe>,d0
    bc96:	move.l d0,-(sp)
    bc98:	jsr 141f4 <__floatsisf>
    bc9e:	addq.l #4,sp
    bca0:	move.l d0,d1
    bca2:	move.l 18ab2 <cameraZoom>,d0
    bca8:	move.l d0,-(sp)
    bcaa:	move.l d1,-(sp)
    bcac:	jsr 142a6 <__mulsf3>
    bcb2:	addq.l #8,sp
    bcb4:	move.l d0,-(sp)
    bcb6:	jsr 1418c <__fixsfsi>
    bcbc:	addq.l #4,sp
    bcbe:	move.l d0,d1
    bcc0:	moveq #28,d0
    bcc2:	add.l 8(sp),d0
    bcc6:	move.l d1,-(sp)
    bcc8:	pea 1 <_start+0x1>
    bccc:	move.l d0,-(sp)
    bcce:	jsr 12662 <setVariable>
    bcd4:	lea 12(sp),sp
	return BR_CONTINUE;
    bcd8:	moveq #2,d0
}
    bcda:	rts

0000bcdc <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    bcdc:	jsr 575e <statusBarText>
    bce2:	move.l d0,d1
    bce4:	moveq #28,d0
    bce6:	add.l 8(sp),d0
    bcea:	move.l d1,-(sp)
    bcec:	move.l d0,-(sp)
    bcee:	jsr 11f92 <makeTextVar>
    bcf4:	addq.l #8,sp
	return BR_CONTINUE;
    bcf6:	moveq #2,d0
}
    bcf8:	rts

0000bcfa <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    bcfa:	       lea -20(sp),sp
    bcfe:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    bd00:	       movea.l 32(sp),a0
    bd04:	       move.l 24(a0),d0
    bd08:	       move.l d0,-(sp)
    bd0a:	       jsr 12346 <getTextFromAnyVar>
    bd10:	       addq.l #4,sp
    bd12:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    bd16:	   /-- bne.s bd1e <builtIn_getMatchingFiles+0x24>
    bd18:	   |   moveq #1,d0
    bd1a:	/--|-- bra.w bde0 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    bd1e:	|  \-> moveq #24,d0
    bd20:	|      add.l 32(sp),d0
    bd24:	|      move.l d0,-(sp)
    bd26:	|      jsr 126f4 <trimStack>
    bd2c:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    bd2e:	|      moveq #28,d0
    bd30:	|      add.l 32(sp),d0
    bd34:	|      move.l d0,-(sp)
    bd36:	|      jsr 11fbe <unlinkVar>
    bd3c:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    bd3e:	|      movea.l 32(sp),a0
    bd42:	|      moveq #6,d0
    bd44:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    bd48:	|      moveq #12,d0
    bd4a:	|      move.l d0,16(sp)
    bd4e:	|      clr.l 12(sp)
    bd52:	|      move.l 190fa <SysBase>,d0
    bd58:	|      movea.l d0,a6
    bd5a:	|      move.l 16(sp),d0
    bd5e:	|      move.l 12(sp),d1
    bd62:	|      jsr -684(a6)
    bd66:	|      move.l d0,8(sp)
    bd6a:	|      move.l 8(sp),d0
    bd6e:	|      movea.l 32(sp),a0
    bd72:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    bd76:	|      moveq #32,d0
    bd78:	|      add.l 32(sp),d0
    bd7c:	|  /-- bne.s bd82 <builtIn_getMatchingFiles+0x88>
    bd7e:	|  |   moveq #1,d0
    bd80:	+--|-- bra.s bde0 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    bd82:	|  \-> movea.l 32(sp),a0
    bd86:	|      movea.l 32(a0),a0
    bd8a:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    bd8c:	|      movea.l 32(sp),a0
    bd90:	|      movea.l 32(a0),a0
    bd94:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    bd98:	|      movea.l 32(sp),a0
    bd9c:	|      movea.l 32(a0),a0
    bda0:	|      moveq #1,d0
    bda2:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    bda6:	|      movea.l 32(sp),a0
    bdaa:	|      move.l 32(a0),d0
    bdae:	|      move.l 20(sp),-(sp)
    bdb2:	|      move.l d0,-(sp)
    bdb4:	|      jsr 11b2c <getSavedGamesStack>
    bdba:	|      addq.l #8,sp
    bdbc:	|      tst.w d0
    bdbe:	|  /-- bne.s bdc4 <builtIn_getMatchingFiles+0xca>
    bdc0:	|  |   moveq #1,d0
    bdc2:	+--|-- bra.s bde0 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    bdc4:	|  \-> move.l 20(sp),4(sp)
    bdca:	|      move.l 190fa <SysBase>,d0
    bdd0:	|      movea.l d0,a6
    bdd2:	|      movea.l 4(sp),a1
    bdd6:	|      jsr -690(a6)
	newText = NULL;
    bdda:	|      clr.l 20(sp)
	return BR_CONTINUE;
    bdde:	|      moveq #2,d0
}
    bde0:	\----> movea.l (sp)+,a6
    bde2:	       lea 20(sp),sp
    bde6:	       rts

0000bde8 <builtIn_saveGame>:

builtIn(saveGame)
{
    bde8:	       lea -12(sp),sp
    bdec:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    bdee:	       movea.l 24(sp),a0
    bdf2:	       move.l 24(a0),d0
    bdf6:	       move.l d0,-(sp)
    bdf8:	       jsr 12346 <getTextFromAnyVar>
    bdfe:	       addq.l #4,sp
    be00:	       move.l d0,190c6 <loadNow>
    trimStack(&fun->stack);
    be06:	       moveq #24,d0
    be08:	       add.l 24(sp),d0
    be0c:	       move.l d0,-(sp)
    be0e:	       jsr 126f4 <trimStack>
    be14:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    be16:	       move.l 190c6 <loadNow>,d0
    be1c:	       move.l d0,-(sp)
    be1e:	       jsr 2fe <encodeFilename>
    be24:	       addq.l #4,sp
    be26:	       move.l d0,12(sp)
    FreeVec(loadNow);
    be2a:	       move.l 190c6 <loadNow>,8(sp)
    be32:	       move.l 190fa <SysBase>,d0
    be38:	       movea.l d0,a6
    be3a:	       movea.l 8(sp),a1
    be3e:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    be42:	       move.l 12(sp),-(sp)
    be46:	       jsr b992 <failSecurityCheck>
    be4c:	       addq.l #4,sp
    be4e:	       tst.w d0
    be50:	   /-- beq.s be56 <builtIn_saveGame+0x6e>
    be52:	   |   moveq #1,d0
    be54:	/--|-- bra.s bea6 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    be56:	|  \-> move.l 12(sp),-(sp)
    be5a:	|      pea 160b9 <custom.c.64ca0e9f+0x13e3>
    be60:	|      jsr 1129c <joinStrings>
    be66:	|      addq.l #8,sp
    be68:	|      move.l d0,190c6 <loadNow>
    FreeVec(aaaaa);
    be6e:	|      move.l 12(sp),4(sp)
    be74:	|      move.l 190fa <SysBase>,d0
    be7a:	|      movea.l d0,a6
    be7c:	|      movea.l 4(sp),a1
    be80:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    be84:	|      moveq #28,d0
    be86:	|      add.l 24(sp),d0
    be8a:	|      clr.l -(sp)
    be8c:	|      pea 1 <_start+0x1>
    be90:	|      move.l d0,-(sp)
    be92:	|      jsr 12662 <setVariable>
    be98:	|      lea 12(sp),sp
    saverFunc = fun;
    be9c:	|      move.l 24(sp),19218 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    bea4:	|      moveq #0,d0
}
    bea6:	\----> movea.l (sp)+,a6
    bea8:	       lea 12(sp),sp
    beac:	       rts

0000beae <builtIn_fileExists>:

builtIn(fileExists)
{
    beae:	       lea -36(sp),sp
    beb2:	       move.l a6,-(sp)
    beb4:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    beb6:	       movea.l 52(sp),a0
    beba:	       move.l 24(a0),d0
    bebe:	       move.l d0,-(sp)
    bec0:	       jsr 12346 <getTextFromAnyVar>
    bec6:	       addq.l #4,sp
    bec8:	       move.l d0,190c6 <loadNow>
    trimStack(&fun->stack);
    bece:	       moveq #24,d0
    bed0:	       add.l 52(sp),d0
    bed4:	       move.l d0,-(sp)
    bed6:	       jsr 126f4 <trimStack>
    bedc:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    bede:	       move.l 190c6 <loadNow>,d0
    bee4:	       move.l d0,-(sp)
    bee6:	       jsr 2fe <encodeFilename>
    beec:	       addq.l #4,sp
    beee:	       move.l d0,40(sp)
    FreeVec(loadNow);
    bef2:	       move.l 190c6 <loadNow>,36(sp)
    befa:	       move.l 190fa <SysBase>,d0
    bf00:	       movea.l d0,a6
    bf02:	       movea.l 36(sp),a1
    bf06:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    bf0a:	       move.l 40(sp),-(sp)
    bf0e:	       jsr b992 <failSecurityCheck>
    bf14:	       addq.l #4,sp
    bf16:	       tst.w d0
    bf18:	   /-- beq.s bf20 <builtIn_fileExists+0x72>
    bf1a:	   |   moveq #1,d0
    bf1c:	/--|-- bra.w bfc0 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    bf20:	|  \-> move.l 40(sp),32(sp)
    bf26:	|      move.l #1005,28(sp)
    bf2e:	|      move.l 19102 <DOSBase>,d0
    bf34:	|      movea.l d0,a6
    bf36:	|      move.l 32(sp),d1
    bf3a:	|      move.l 28(sp),d2
    bf3e:	|      jsr -30(a6)
    bf42:	|      move.l d0,24(sp)
    bf46:	|      move.l 24(sp),d0
    bf4a:	|      move.l d0,20(sp)
    if (!fp) {        
    bf4e:	|  /-- bne.s bf5e <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    bf50:	|  |   pea 160bb <custom.c.64ca0e9f+0x13e5>
    bf56:	|  |   jsr 13db8 <KPrintF>
    bf5c:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    bf5e:	|  \-> tst.l 20(sp)
    bf62:	|      sne d0
    bf64:	|      neg.b d0
    bf66:	|      moveq #0,d1
    bf68:	|      move.b d0,d1
    bf6a:	|      moveq #28,d0
    bf6c:	|      add.l 52(sp),d0
    bf70:	|      move.l d1,-(sp)
    bf72:	|      pea 1 <_start+0x1>
    bf76:	|      move.l d0,-(sp)
    bf78:	|      jsr 12662 <setVariable>
    bf7e:	|      lea 12(sp),sp
    if (fp) Close(fp);
    bf82:	|      tst.l 20(sp)
    bf86:	|  /-- beq.s bfa2 <builtIn_fileExists+0xf4>
    bf88:	|  |   move.l 20(sp),16(sp)
    bf8e:	|  |   move.l 19102 <DOSBase>,d0
    bf94:	|  |   movea.l d0,a6
    bf96:	|  |   move.l 16(sp),d1
    bf9a:	|  |   jsr -36(a6)
    bf9e:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    bfa2:	|  \-> move.l 40(sp),8(sp)
    bfa8:	|      move.l 190fa <SysBase>,d0
    bfae:	|      movea.l d0,a6
    bfb0:	|      movea.l 8(sp),a1
    bfb4:	|      jsr -690(a6)
    loadNow = NULL;
    bfb8:	|      clr.l 190c6 <loadNow>
    return BR_CONTINUE;
    bfbe:	|      moveq #2,d0
}
    bfc0:	\----> move.l (sp)+,d2
    bfc2:	       movea.l (sp)+,a6
    bfc4:	       lea 36(sp),sp
    bfc8:	       rts

0000bfca <builtIn_loadGame>:

builtIn(loadGame)
{
    bfca:	       lea -36(sp),sp
    bfce:	       move.l a6,-(sp)
    bfd0:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    bfd2:	       movea.l 52(sp),a0
    bfd6:	       move.l 24(a0),d0
    bfda:	       move.l d0,-(sp)
    bfdc:	       jsr 12346 <getTextFromAnyVar>
    bfe2:	       addq.l #4,sp
    bfe4:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    bfe8:	       moveq #24,d0
    bfea:	       add.l 52(sp),d0
    bfee:	       move.l d0,-(sp)
    bff0:	       jsr 126f4 <trimStack>
    bff6:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    bff8:	       move.l 40(sp),-(sp)
    bffc:	       jsr 2fe <encodeFilename>
    c002:	       addq.l #4,sp
    c004:	       move.l d0,190c6 <loadNow>
    FreeVec(aaaaa);
    c00a:	       move.l 40(sp),36(sp)
    c010:	       move.l 190fa <SysBase>,d0
    c016:	       movea.l d0,a6
    c018:	       movea.l 36(sp),a1
    c01c:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    c020:	       move.l 190c6 <loadNow>,d0
    c026:	       move.l d0,-(sp)
    c028:	       jsr b992 <failSecurityCheck>
    c02e:	       addq.l #4,sp
    c030:	       tst.w d0
    c032:	   /-- beq.s c038 <builtIn_loadGame+0x6e>
    c034:	   |   moveq #1,d0
    c036:	/--|-- bra.s c0a8 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    c038:	|  \-> move.l 190c6 <loadNow>,32(sp)
    c040:	|      move.l #1005,28(sp)
    c048:	|      move.l 19102 <DOSBase>,d0
    c04e:	|      movea.l d0,a6
    c050:	|      move.l 32(sp),d1
    c054:	|      move.l 28(sp),d2
    c058:	|      jsr -30(a6)
    c05c:	|      move.l d0,24(sp)
    c060:	|      move.l 24(sp),d0
    c064:	|      move.l d0,20(sp)
    if (fp) {
    c068:	|  /-- beq.s c088 <builtIn_loadGame+0xbe>
        Close(fp);
    c06a:	|  |   move.l 20(sp),12(sp)
    c070:	|  |   move.l 19102 <DOSBase>,d0
    c076:	|  |   movea.l d0,a6
    c078:	|  |   move.l 12(sp),d1
    c07c:	|  |   jsr -36(a6)
    c080:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    c084:	|  |   moveq #0,d0
    c086:	+--|-- bra.s c0a8 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    c088:	|  \-> move.l 190c6 <loadNow>,16(sp)
    c090:	|      move.l 190fa <SysBase>,d0
    c096:	|      movea.l d0,a6
    c098:	|      movea.l 16(sp),a1
    c09c:	|      jsr -690(a6)
    loadNow = NULL;
    c0a0:	|      clr.l 190c6 <loadNow>
    return BR_CONTINUE;
    c0a6:	|      moveq #2,d0
}
    c0a8:	\----> move.l (sp)+,d2
    c0aa:	       movea.l (sp)+,a6
    c0ac:	       lea 36(sp),sp
    c0b0:	       rts

0000c0b2 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    c0b2:	move.l 191ee <sceneHeight>,d0
    c0b8:	move.l d0,d1
    c0ba:	move.l 191ea <sceneWidth>,d0
    c0c0:	move.l d1,-(sp)
    c0c2:	move.l d0,-(sp)
    c0c4:	clr.l -(sp)
    c0c6:	clr.l -(sp)
    c0c8:	jsr a892 <blankScreen>
    c0ce:	lea 16(sp),sp
	return BR_CONTINUE;
    c0d2:	moveq #2,d0
}
    c0d4:	rts

0000c0d6 <builtIn_blankArea>:

builtIn(blankArea)
{
    c0d6:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    c0da:	       movea.l 24(sp),a0
    c0de:	       move.l 24(a0),d0
    c0e2:	       move.l d0,-(sp)
    c0e4:	       pea 1 <_start+0x1>
    c0e8:	       lea 8(sp),a0
    c0ec:	       move.l a0,-(sp)
    c0ee:	       jsr 11d70 <getValueType>
    c0f4:	       lea 12(sp),sp
    c0f8:	       tst.w d0
    c0fa:	   /-- bne.s c102 <builtIn_blankArea+0x2c>
    c0fc:	   |   moveq #1,d0
    c0fe:	/--|-- bra.w c1d8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    c102:	|  \-> moveq #24,d0
    c104:	|      add.l 24(sp),d0
    c108:	|      move.l d0,-(sp)
    c10a:	|      jsr 126f4 <trimStack>
    c110:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    c112:	|      movea.l 24(sp),a0
    c116:	|      move.l 24(a0),d0
    c11a:	|      move.l d0,-(sp)
    c11c:	|      pea 1 <_start+0x1>
    c120:	|      lea 12(sp),a0
    c124:	|      move.l a0,-(sp)
    c126:	|      jsr 11d70 <getValueType>
    c12c:	|      lea 12(sp),sp
    c130:	|      tst.w d0
    c132:	|  /-- bne.s c13a <builtIn_blankArea+0x64>
    c134:	|  |   moveq #1,d0
    c136:	+--|-- bra.w c1d8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    c13a:	|  \-> moveq #24,d0
    c13c:	|      add.l 24(sp),d0
    c140:	|      move.l d0,-(sp)
    c142:	|      jsr 126f4 <trimStack>
    c148:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    c14a:	|      movea.l 24(sp),a0
    c14e:	|      move.l 24(a0),d0
    c152:	|      move.l d0,-(sp)
    c154:	|      pea 1 <_start+0x1>
    c158:	|      moveq #16,d0
    c15a:	|      add.l sp,d0
    c15c:	|      move.l d0,-(sp)
    c15e:	|      jsr 11d70 <getValueType>
    c164:	|      lea 12(sp),sp
    c168:	|      tst.w d0
    c16a:	|  /-- bne.s c170 <builtIn_blankArea+0x9a>
    c16c:	|  |   moveq #1,d0
    c16e:	+--|-- bra.s c1d8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    c170:	|  \-> moveq #24,d0
    c172:	|      add.l 24(sp),d0
    c176:	|      move.l d0,-(sp)
    c178:	|      jsr 126f4 <trimStack>
    c17e:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    c180:	|      movea.l 24(sp),a0
    c184:	|      move.l 24(a0),d0
    c188:	|      move.l d0,-(sp)
    c18a:	|      pea 1 <_start+0x1>
    c18e:	|      moveq #20,d0
    c190:	|      add.l sp,d0
    c192:	|      move.l d0,-(sp)
    c194:	|      jsr 11d70 <getValueType>
    c19a:	|      lea 12(sp),sp
    c19e:	|      tst.w d0
    c1a0:	|  /-- bne.s c1a6 <builtIn_blankArea+0xd0>
    c1a2:	|  |   moveq #1,d0
    c1a4:	+--|-- bra.s c1d8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    c1a6:	|  \-> moveq #24,d0
    c1a8:	|      add.l 24(sp),d0
    c1ac:	|      move.l d0,-(sp)
    c1ae:	|      jsr 126f4 <trimStack>
    c1b4:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    c1b6:	|      movea.l (sp),a1
    c1b8:	|      movea.l 4(sp),a0
    c1bc:	|      move.l 8(sp),d1
    c1c0:	|      move.l 12(sp),d0
    c1c4:	|      move.l a1,-(sp)
    c1c6:	|      move.l a0,-(sp)
    c1c8:	|      move.l d1,-(sp)
    c1ca:	|      move.l d0,-(sp)
    c1cc:	|      jsr a892 <blankScreen>
    c1d2:	|      lea 16(sp),sp
	return BR_CONTINUE;
    c1d6:	|      moveq #2,d0
}
    c1d8:	\----> lea 16(sp),sp
    c1dc:	       rts

0000c1de <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    c1de:	jsr a8a6 <darkScreen>
	return BR_CONTINUE;
    c1e4:	moveq #2,d0
}
    c1e6:	rts

0000c1e8 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    c1e8:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c1ec:	       movea.l 20(sp),a0
    c1f0:	       move.l 24(a0),d0
    c1f4:	       move.l d0,-(sp)
    c1f6:	       pea 1 <_start+0x1>
    c1fa:	       lea 8(sp),a0
    c1fe:	       move.l a0,-(sp)
    c200:	       jsr 11d70 <getValueType>
    c206:	       lea 12(sp),sp
    c20a:	       tst.w d0
    c20c:	   /-- bne.s c214 <builtIn_addOverlay+0x2c>
    c20e:	   |   moveq #1,d0
    c210:	/--|-- bra.w c2ac <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    c214:	|  \-> moveq #24,d0
    c216:	|      add.l 20(sp),d0
    c21a:	|      move.l d0,-(sp)
    c21c:	|      jsr 126f4 <trimStack>
    c222:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c224:	|      movea.l 20(sp),a0
    c228:	|      move.l 24(a0),d0
    c22c:	|      move.l d0,-(sp)
    c22e:	|      pea 1 <_start+0x1>
    c232:	|      moveq #12,d0
    c234:	|      add.l sp,d0
    c236:	|      move.l d0,-(sp)
    c238:	|      jsr 11d70 <getValueType>
    c23e:	|      lea 12(sp),sp
    c242:	|      tst.w d0
    c244:	|  /-- bne.s c24a <builtIn_addOverlay+0x62>
    c246:	|  |   moveq #1,d0
    c248:	+--|-- bra.s c2ac <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    c24a:	|  \-> moveq #24,d0
    c24c:	|      add.l 20(sp),d0
    c250:	|      move.l d0,-(sp)
    c252:	|      jsr 126f4 <trimStack>
    c258:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c25a:	|      movea.l 20(sp),a0
    c25e:	|      move.l 24(a0),d0
    c262:	|      move.l d0,-(sp)
    c264:	|      pea 5 <_start+0x5>
    c268:	|      moveq #16,d0
    c26a:	|      add.l sp,d0
    c26c:	|      move.l d0,-(sp)
    c26e:	|      jsr 11d70 <getValueType>
    c274:	|      lea 12(sp),sp
    c278:	|      tst.w d0
    c27a:	|  /-- bne.s c280 <builtIn_addOverlay+0x98>
    c27c:	|  |   moveq #1,d0
    c27e:	+--|-- bra.s c2ac <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    c280:	|  \-> moveq #24,d0
    c282:	|      add.l 20(sp),d0
    c286:	|      move.l d0,-(sp)
    c288:	|      jsr 126f4 <trimStack>
    c28e:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    c290:	|      movea.l (sp),a0
    c292:	|      move.l 4(sp),d1
    c296:	|      move.l 8(sp),d0
    c29a:	|      move.l a0,-(sp)
    c29c:	|      move.l d1,-(sp)
    c29e:	|      move.l d0,-(sp)
    c2a0:	|      jsr a9c4 <loadBackDrop>
    c2a6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c2aa:	|      moveq #2,d0
}
    c2ac:	\----> lea 12(sp),sp
    c2b0:	       rts

0000c2b2 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    c2b2:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c2b6:	       movea.l 20(sp),a0
    c2ba:	       move.l 24(a0),d0
    c2be:	       move.l d0,-(sp)
    c2c0:	       pea 1 <_start+0x1>
    c2c4:	       lea 8(sp),a0
    c2c8:	       move.l a0,-(sp)
    c2ca:	       jsr 11d70 <getValueType>
    c2d0:	       lea 12(sp),sp
    c2d4:	       tst.w d0
    c2d6:	   /-- bne.s c2de <builtIn_mixOverlay+0x2c>
    c2d8:	   |   moveq #1,d0
    c2da:	/--|-- bra.w c376 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    c2de:	|  \-> moveq #24,d0
    c2e0:	|      add.l 20(sp),d0
    c2e4:	|      move.l d0,-(sp)
    c2e6:	|      jsr 126f4 <trimStack>
    c2ec:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c2ee:	|      movea.l 20(sp),a0
    c2f2:	|      move.l 24(a0),d0
    c2f6:	|      move.l d0,-(sp)
    c2f8:	|      pea 1 <_start+0x1>
    c2fc:	|      moveq #12,d0
    c2fe:	|      add.l sp,d0
    c300:	|      move.l d0,-(sp)
    c302:	|      jsr 11d70 <getValueType>
    c308:	|      lea 12(sp),sp
    c30c:	|      tst.w d0
    c30e:	|  /-- bne.s c314 <builtIn_mixOverlay+0x62>
    c310:	|  |   moveq #1,d0
    c312:	+--|-- bra.s c376 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    c314:	|  \-> moveq #24,d0
    c316:	|      add.l 20(sp),d0
    c31a:	|      move.l d0,-(sp)
    c31c:	|      jsr 126f4 <trimStack>
    c322:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c324:	|      movea.l 20(sp),a0
    c328:	|      move.l 24(a0),d0
    c32c:	|      move.l d0,-(sp)
    c32e:	|      pea 5 <_start+0x5>
    c332:	|      moveq #16,d0
    c334:	|      add.l sp,d0
    c336:	|      move.l d0,-(sp)
    c338:	|      jsr 11d70 <getValueType>
    c33e:	|      lea 12(sp),sp
    c342:	|      tst.w d0
    c344:	|  /-- bne.s c34a <builtIn_mixOverlay+0x98>
    c346:	|  |   moveq #1,d0
    c348:	+--|-- bra.s c376 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    c34a:	|  \-> moveq #24,d0
    c34c:	|      add.l 20(sp),d0
    c350:	|      move.l d0,-(sp)
    c352:	|      jsr 126f4 <trimStack>
    c358:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    c35a:	|      movea.l (sp),a0
    c35c:	|      move.l 4(sp),d1
    c360:	|      move.l 8(sp),d0
    c364:	|      move.l a0,-(sp)
    c366:	|      move.l d1,-(sp)
    c368:	|      move.l d0,-(sp)
    c36a:	|      jsr aa3a <mixBackDrop>
    c370:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c374:	|      moveq #2,d0
}
    c376:	\----> lea 12(sp),sp
    c37a:	       rts

0000c37c <builtIn_pasteImage>:

builtIn(pasteImage)
{
    c37c:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c380:	       movea.l 20(sp),a0
    c384:	       move.l 24(a0),d0
    c388:	       move.l d0,-(sp)
    c38a:	       pea 1 <_start+0x1>
    c38e:	       lea 8(sp),a0
    c392:	       move.l a0,-(sp)
    c394:	       jsr 11d70 <getValueType>
    c39a:	       lea 12(sp),sp
    c39e:	       tst.w d0
    c3a0:	   /-- bne.s c3a8 <builtIn_pasteImage+0x2c>
    c3a2:	   |   moveq #1,d0
    c3a4:	/--|-- bra.w c438 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    c3a8:	|  \-> moveq #24,d0
    c3aa:	|      add.l 20(sp),d0
    c3ae:	|      move.l d0,-(sp)
    c3b0:	|      jsr 126f4 <trimStack>
    c3b6:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c3b8:	|      movea.l 20(sp),a0
    c3bc:	|      move.l 24(a0),d0
    c3c0:	|      move.l d0,-(sp)
    c3c2:	|      pea 1 <_start+0x1>
    c3c6:	|      moveq #12,d0
    c3c8:	|      add.l sp,d0
    c3ca:	|      move.l d0,-(sp)
    c3cc:	|      jsr 11d70 <getValueType>
    c3d2:	|      lea 12(sp),sp
    c3d6:	|      tst.w d0
    c3d8:	|  /-- bne.s c3de <builtIn_pasteImage+0x62>
    c3da:	|  |   moveq #1,d0
    c3dc:	+--|-- bra.s c438 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    c3de:	|  \-> moveq #24,d0
    c3e0:	|      add.l 20(sp),d0
    c3e4:	|      move.l d0,-(sp)
    c3e6:	|      jsr 126f4 <trimStack>
    c3ec:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    c3ee:	|      movea.l 20(sp),a0
    c3f2:	|      move.l 24(a0),d0
    c3f6:	|      move.l d0,-(sp)
    c3f8:	|      jsr 12248 <getAnimationFromVar>
    c3fe:	|      addq.l #4,sp
    c400:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    c404:	|      moveq #24,d0
    c406:	|      add.l 20(sp),d0
    c40a:	|      move.l d0,-(sp)
    c40c:	|      jsr 126f4 <trimStack>
    c412:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    c414:	|      tst.l 8(sp)
    c418:	|  /-- bne.s c41e <builtIn_pasteImage+0xa2>
    c41a:	|  |   moveq #2,d0
    c41c:	+--|-- bra.s c438 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    c41e:	|  \-> move.l (sp),d1
    c420:	|      move.l 4(sp),d0
    c424:	|      move.l 8(sp),-(sp)
    c428:	|      move.l d1,-(sp)
    c42a:	|      move.l d0,-(sp)
    c42c:	|      jsr de2 <pasteCursor>
    c432:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c436:	|      moveq #2,d0
}
    c438:	\----> lea 12(sp),sp
    c43c:	       rts

0000c43e <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    c43e:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c440:	       movea.l 16(sp),a0
    c444:	       move.l 24(a0),d0
    c448:	       move.l d0,-(sp)
    c44a:	       pea 1 <_start+0x1>
    c44e:	       move.l sp,d0
    c450:	       addq.l #8,d0
    c452:	       move.l d0,-(sp)
    c454:	       jsr 11d70 <getValueType>
    c45a:	       lea 12(sp),sp
    c45e:	       tst.w d0
    c460:	   /-- bne.s c468 <builtIn_setSceneDimensions+0x2a>
    c462:	   |   moveq #1,d0
    c464:	/--|-- bra.w c4f0 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    c468:	|  \-> moveq #24,d0
    c46a:	|      add.l 16(sp),d0
    c46e:	|      move.l d0,-(sp)
    c470:	|      jsr 126f4 <trimStack>
    c476:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c478:	|      movea.l 16(sp),a0
    c47c:	|      move.l 24(a0),d0
    c480:	|      move.l d0,-(sp)
    c482:	|      pea 1 <_start+0x1>
    c486:	|      moveq #12,d0
    c488:	|      add.l sp,d0
    c48a:	|      move.l d0,-(sp)
    c48c:	|      jsr 11d70 <getValueType>
    c492:	|      lea 12(sp),sp
    c496:	|      tst.w d0
    c498:	|  /-- bne.s c49e <builtIn_setSceneDimensions+0x60>
    c49a:	|  |   moveq #1,d0
    c49c:	+--|-- bra.s c4f0 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    c49e:	|  \-> moveq #24,d0
    c4a0:	|      add.l 16(sp),d0
    c4a4:	|      move.l d0,-(sp)
    c4a6:	|      jsr 126f4 <trimStack>
    c4ac:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    c4ae:	|      move.l (sp),d1
    c4b0:	|      move.l 4(sp),d0
    c4b4:	|      move.l d1,-(sp)
    c4b6:	|      move.l d0,-(sp)
    c4b8:	|      jsr aa84 <resizeBackdrop>
    c4be:	|      addq.l #8,sp
    c4c0:	|      tst.w d0
    c4c2:	|  /-- beq.s c4e0 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    c4c4:	|  |   move.l (sp),d1
    c4c6:	|  |   move.l 4(sp),d0
    c4ca:	|  |   move.l d1,-(sp)
    c4cc:	|  |   move.l d0,-(sp)
    c4ce:	|  |   clr.l -(sp)
    c4d0:	|  |   clr.l -(sp)
    c4d2:	|  |   jsr a892 <blankScreen>
    c4d8:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    c4dc:	|  |   moveq #2,d0
    c4de:	+--|-- bra.s c4f0 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    c4e0:	|  \-> pea 160d9 <custom.c.64ca0e9f+0x1403>
    c4e6:	|      jsr 13db8 <KPrintF>
    c4ec:	|      addq.l #4,sp
	return BR_ERROR;
    c4ee:	|      moveq #1,d0
}
    c4f0:	\----> addq.l #8,sp
    c4f2:	       rts

0000c4f4 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    c4f4:	          move.l d3,-(sp)
    c4f6:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c4f8:	          movea.l 16(sp),a0
    c4fc:	          move.l 24(a0),d0
    c500:	          move.l d0,-(sp)
    c502:	          pea 1 <_start+0x1>
    c506:	          pea 1920c <cameraY>
    c50c:	          jsr 11d70 <getValueType>
    c512:	          lea 12(sp),sp
    c516:	          tst.w d0
    c518:	      /-- bne.s c520 <builtIn_aimCamera+0x2c>
    c51a:	      |   moveq #1,d0
    c51c:	/-----|-- bra.w c7a2 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    c520:	|     \-> moveq #24,d0
    c522:	|         add.l 16(sp),d0
    c526:	|         move.l d0,-(sp)
    c528:	|         jsr 126f4 <trimStack>
    c52e:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c530:	|         movea.l 16(sp),a0
    c534:	|         move.l 24(a0),d0
    c538:	|         move.l d0,-(sp)
    c53a:	|         pea 1 <_start+0x1>
    c53e:	|         pea 19208 <cameraX>
    c544:	|         jsr 11d70 <getValueType>
    c54a:	|         lea 12(sp),sp
    c54e:	|         tst.w d0
    c550:	|     /-- bne.s c558 <builtIn_aimCamera+0x64>
    c552:	|     |   moveq #1,d0
    c554:	+-----|-- bra.w c7a2 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    c558:	|     \-> moveq #24,d0
    c55a:	|         add.l 16(sp),d0
    c55e:	|         move.l d0,-(sp)
    c560:	|         jsr 126f4 <trimStack>
    c566:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    c568:	|         move.l 19208 <cameraX>,d0
    c56e:	|         move.l d0,-(sp)
    c570:	|         jsr 141f4 <__floatsisf>
    c576:	|         addq.l #4,sp
    c578:	|         move.l d0,d2
    c57a:	|         move.l 1904e <winWidth>,d0
    c580:	|         lsr.l #1,d0
    c582:	|         move.l d0,-(sp)
    c584:	|         jsr 1421c <__floatunsisf>
    c58a:	|         addq.l #4,sp
    c58c:	|         move.l d0,d1
    c58e:	|         move.l 18ab2 <cameraZoom>,d0
    c594:	|         move.l d0,-(sp)
    c596:	|         move.l d1,-(sp)
    c598:	|         jsr 140a0 <__divsf3>
    c59e:	|         addq.l #8,sp
    c5a0:	|         move.l d0,-(sp)
    c5a2:	|         move.l d2,-(sp)
    c5a4:	|         jsr 144e8 <__subsf3>
    c5aa:	|         addq.l #8,sp
    c5ac:	|         move.l d0,-(sp)
    c5ae:	|         jsr 1418c <__fixsfsi>
    c5b4:	|         addq.l #4,sp
    c5b6:	|         move.l d0,19208 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    c5bc:	|         move.l 1920c <cameraY>,d0
    c5c2:	|         move.l d0,-(sp)
    c5c4:	|         jsr 141f4 <__floatsisf>
    c5ca:	|         addq.l #4,sp
    c5cc:	|         move.l d0,d2
    c5ce:	|         move.l 19052 <winHeight>,d0
    c5d4:	|         lsr.l #1,d0
    c5d6:	|         move.l d0,-(sp)
    c5d8:	|         jsr 1421c <__floatunsisf>
    c5de:	|         addq.l #4,sp
    c5e0:	|         move.l d0,d1
    c5e2:	|         move.l 18ab2 <cameraZoom>,d0
    c5e8:	|         move.l d0,-(sp)
    c5ea:	|         move.l d1,-(sp)
    c5ec:	|         jsr 140a0 <__divsf3>
    c5f2:	|         addq.l #8,sp
    c5f4:	|         move.l d0,-(sp)
    c5f6:	|         move.l d2,-(sp)
    c5f8:	|         jsr 144e8 <__subsf3>
    c5fe:	|         addq.l #8,sp
    c600:	|         move.l d0,-(sp)
    c602:	|         jsr 1418c <__fixsfsi>
    c608:	|         addq.l #4,sp
    c60a:	|         move.l d0,1920c <cameraY>

	if (cameraX < 0) cameraX = 0;
    c610:	|         move.l 19208 <cameraX>,d0
    c616:	|     /-- bpl.s c622 <builtIn_aimCamera+0x12e>
    c618:	|     |   clr.l 19208 <cameraX>
    c61e:	|  /--|-- bra.w c6d8 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    c622:	|  |  \-> move.l 19208 <cameraX>,d0
    c628:	|  |      move.l d0,-(sp)
    c62a:	|  |      jsr 141f4 <__floatsisf>
    c630:	|  |      addq.l #4,sp
    c632:	|  |      move.l d0,d2
    c634:	|  |      move.l 191ea <sceneWidth>,d0
    c63a:	|  |      move.l d0,-(sp)
    c63c:	|  |      jsr 1421c <__floatunsisf>
    c642:	|  |      addq.l #4,sp
    c644:	|  |      move.l d0,d3
    c646:	|  |      move.l 1904e <winWidth>,d0
    c64c:	|  |      move.l d0,-(sp)
    c64e:	|  |      jsr 1421c <__floatunsisf>
    c654:	|  |      addq.l #4,sp
    c656:	|  |      move.l d0,d1
    c658:	|  |      move.l 18ab2 <cameraZoom>,d0
    c65e:	|  |      move.l d0,-(sp)
    c660:	|  |      move.l d1,-(sp)
    c662:	|  |      jsr 140a0 <__divsf3>
    c668:	|  |      addq.l #8,sp
    c66a:	|  |      move.l d0,-(sp)
    c66c:	|  |      move.l d3,-(sp)
    c66e:	|  |      jsr 144e8 <__subsf3>
    c674:	|  |      addq.l #8,sp
    c676:	|  |      move.l d0,-(sp)
    c678:	|  |      move.l d2,-(sp)
    c67a:	|  |      jsr 14360 <__gtsf2>
    c680:	|  |      addq.l #8,sp
    c682:	|  |      tst.l d0
    c684:	|  +----- ble.s c6d8 <builtIn_aimCamera+0x1e4>
    c686:	|  |      move.l 191ea <sceneWidth>,d0
    c68c:	|  |      move.l d0,-(sp)
    c68e:	|  |      jsr 1421c <__floatunsisf>
    c694:	|  |      addq.l #4,sp
    c696:	|  |      move.l d0,d2
    c698:	|  |      move.l 1904e <winWidth>,d0
    c69e:	|  |      move.l d0,-(sp)
    c6a0:	|  |      jsr 1421c <__floatunsisf>
    c6a6:	|  |      addq.l #4,sp
    c6a8:	|  |      move.l d0,d1
    c6aa:	|  |      move.l 18ab2 <cameraZoom>,d0
    c6b0:	|  |      move.l d0,-(sp)
    c6b2:	|  |      move.l d1,-(sp)
    c6b4:	|  |      jsr 140a0 <__divsf3>
    c6ba:	|  |      addq.l #8,sp
    c6bc:	|  |      move.l d0,-(sp)
    c6be:	|  |      move.l d2,-(sp)
    c6c0:	|  |      jsr 144e8 <__subsf3>
    c6c6:	|  |      addq.l #8,sp
    c6c8:	|  |      move.l d0,-(sp)
    c6ca:	|  |      jsr 1418c <__fixsfsi>
    c6d0:	|  |      addq.l #4,sp
    c6d2:	|  |      move.l d0,19208 <cameraX>
	if (cameraY < 0) cameraY = 0;
    c6d8:	|  \----> move.l 1920c <cameraY>,d0
    c6de:	|     /-- bpl.s c6ea <builtIn_aimCamera+0x1f6>
    c6e0:	|     |   clr.l 1920c <cameraY>
    c6e6:	|  /--|-- bra.w c7a0 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    c6ea:	|  |  \-> move.l 1920c <cameraY>,d0
    c6f0:	|  |      move.l d0,-(sp)
    c6f2:	|  |      jsr 141f4 <__floatsisf>
    c6f8:	|  |      addq.l #4,sp
    c6fa:	|  |      move.l d0,d2
    c6fc:	|  |      move.l 191ee <sceneHeight>,d0
    c702:	|  |      move.l d0,-(sp)
    c704:	|  |      jsr 1421c <__floatunsisf>
    c70a:	|  |      addq.l #4,sp
    c70c:	|  |      move.l d0,d3
    c70e:	|  |      move.l 19052 <winHeight>,d0
    c714:	|  |      move.l d0,-(sp)
    c716:	|  |      jsr 1421c <__floatunsisf>
    c71c:	|  |      addq.l #4,sp
    c71e:	|  |      move.l d0,d1
    c720:	|  |      move.l 18ab2 <cameraZoom>,d0
    c726:	|  |      move.l d0,-(sp)
    c728:	|  |      move.l d1,-(sp)
    c72a:	|  |      jsr 140a0 <__divsf3>
    c730:	|  |      addq.l #8,sp
    c732:	|  |      move.l d0,-(sp)
    c734:	|  |      move.l d3,-(sp)
    c736:	|  |      jsr 144e8 <__subsf3>
    c73c:	|  |      addq.l #8,sp
    c73e:	|  |      move.l d0,-(sp)
    c740:	|  |      move.l d2,-(sp)
    c742:	|  |      jsr 14360 <__gtsf2>
    c748:	|  |      addq.l #8,sp
    c74a:	|  |      tst.l d0
    c74c:	|  +----- ble.s c7a0 <builtIn_aimCamera+0x2ac>
    c74e:	|  |      move.l 191ee <sceneHeight>,d0
    c754:	|  |      move.l d0,-(sp)
    c756:	|  |      jsr 1421c <__floatunsisf>
    c75c:	|  |      addq.l #4,sp
    c75e:	|  |      move.l d0,d2
    c760:	|  |      move.l 19052 <winHeight>,d0
    c766:	|  |      move.l d0,-(sp)
    c768:	|  |      jsr 1421c <__floatunsisf>
    c76e:	|  |      addq.l #4,sp
    c770:	|  |      move.l d0,d1
    c772:	|  |      move.l 18ab2 <cameraZoom>,d0
    c778:	|  |      move.l d0,-(sp)
    c77a:	|  |      move.l d1,-(sp)
    c77c:	|  |      jsr 140a0 <__divsf3>
    c782:	|  |      addq.l #8,sp
    c784:	|  |      move.l d0,-(sp)
    c786:	|  |      move.l d2,-(sp)
    c788:	|  |      jsr 144e8 <__subsf3>
    c78e:	|  |      addq.l #8,sp
    c790:	|  |      move.l d0,-(sp)
    c792:	|  |      jsr 1418c <__fixsfsi>
    c798:	|  |      addq.l #4,sp
    c79a:	|  |      move.l d0,1920c <cameraY>
	return BR_CONTINUE;
    c7a0:	|  \----> moveq #2,d0
}
    c7a2:	\-------> move.l (sp)+,d2
    c7a4:	          move.l (sp)+,d3
    c7a6:	          rts

0000c7a8 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    c7a8:	       subq.l #4,sp
    c7aa:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c7ac:	       movea.l 16(sp),a0
    c7b0:	       move.l 24(a0),d0
    c7b4:	       move.l d0,-(sp)
    c7b6:	       pea 1 <_start+0x1>
    c7ba:	       moveq #12,d0
    c7bc:	       add.l sp,d0
    c7be:	       move.l d0,-(sp)
    c7c0:	       jsr 11d70 <getValueType>
    c7c6:	       lea 12(sp),sp
    c7ca:	       tst.w d0
    c7cc:	   /-- bne.s c7d4 <builtIn_zoomCamera+0x2c>
    c7ce:	   |   moveq #1,d0
    c7d0:	/--|-- bra.w c9ce <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    c7d4:	|  \-> moveq #24,d0
    c7d6:	|      add.l 16(sp),d0
    c7da:	|      move.l d0,-(sp)
    c7dc:	|      jsr 126f4 <trimStack>
    c7e2:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    c7e4:	|      move.l 190b6 <input+0xa>,d0
    c7ea:	|      move.l d0,-(sp)
    c7ec:	|      jsr 141f4 <__floatsisf>
    c7f2:	|      addq.l #4,sp
    c7f4:	|      move.l d0,d1
    c7f6:	|      move.l 18ab2 <cameraZoom>,d0
    c7fc:	|      move.l d0,-(sp)
    c7fe:	|      move.l d1,-(sp)
    c800:	|      jsr 142a6 <__mulsf3>
    c806:	|      addq.l #8,sp
    c808:	|      move.l d0,-(sp)
    c80a:	|      jsr 1418c <__fixsfsi>
    c810:	|      addq.l #4,sp
    c812:	|      move.l d0,190b6 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    c818:	|      move.l 190ba <input+0xe>,d0
    c81e:	|      move.l d0,-(sp)
    c820:	|      jsr 141f4 <__floatsisf>
    c826:	|      addq.l #4,sp
    c828:	|      move.l d0,d1
    c82a:	|      move.l 18ab2 <cameraZoom>,d0
    c830:	|      move.l d0,-(sp)
    c832:	|      move.l d1,-(sp)
    c834:	|      jsr 142a6 <__mulsf3>
    c83a:	|      addq.l #8,sp
    c83c:	|      move.l d0,-(sp)
    c83e:	|      jsr 1418c <__fixsfsi>
    c844:	|      addq.l #4,sp
    c846:	|      move.l d0,190ba <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    c84c:	|      move.l 4(sp),d0
    c850:	|      move.l d0,-(sp)
    c852:	|      jsr 141f4 <__floatsisf>
    c858:	|      addq.l #4,sp
    c85a:	|      move.l #1008981770,-(sp)
    c860:	|      move.l d0,-(sp)
    c862:	|      jsr 142a6 <__mulsf3>
    c868:	|      addq.l #8,sp
    c86a:	|      move.l d0,18ab2 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    c870:	|      move.l 1904e <winWidth>,d0
    c876:	|      move.l d0,-(sp)
    c878:	|      jsr 1421c <__floatunsisf>
    c87e:	|      addq.l #4,sp
    c880:	|      move.l d0,d1
    c882:	|      move.l 18ab2 <cameraZoom>,d0
    c888:	|      move.l d0,-(sp)
    c88a:	|      move.l d1,-(sp)
    c88c:	|      jsr 140a0 <__divsf3>
    c892:	|      addq.l #8,sp
    c894:	|      move.l d0,d2
    c896:	|      move.l 191ea <sceneWidth>,d0
    c89c:	|      move.l d0,-(sp)
    c89e:	|      jsr 1421c <__floatunsisf>
    c8a4:	|      addq.l #4,sp
    c8a6:	|      move.l d0,-(sp)
    c8a8:	|      move.l d2,-(sp)
    c8aa:	|      jsr 14360 <__gtsf2>
    c8b0:	|      addq.l #8,sp
    c8b2:	|      tst.l d0
    c8b4:	|  /-- ble.s c8ea <builtIn_zoomCamera+0x142>
    c8b6:	|  |   move.l 1904e <winWidth>,d0
    c8bc:	|  |   move.l d0,-(sp)
    c8be:	|  |   jsr 1421c <__floatunsisf>
    c8c4:	|  |   addq.l #4,sp
    c8c6:	|  |   move.l d0,d2
    c8c8:	|  |   move.l 191ea <sceneWidth>,d0
    c8ce:	|  |   move.l d0,-(sp)
    c8d0:	|  |   jsr 1421c <__floatunsisf>
    c8d6:	|  |   addq.l #4,sp
    c8d8:	|  |   move.l d0,-(sp)
    c8da:	|  |   move.l d2,-(sp)
    c8dc:	|  |   jsr 140a0 <__divsf3>
    c8e2:	|  |   addq.l #8,sp
    c8e4:	|  |   move.l d0,18ab2 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    c8ea:	|  \-> move.l 19052 <winHeight>,d0
    c8f0:	|      move.l d0,-(sp)
    c8f2:	|      jsr 1421c <__floatunsisf>
    c8f8:	|      addq.l #4,sp
    c8fa:	|      move.l d0,d1
    c8fc:	|      move.l 18ab2 <cameraZoom>,d0
    c902:	|      move.l d0,-(sp)
    c904:	|      move.l d1,-(sp)
    c906:	|      jsr 140a0 <__divsf3>
    c90c:	|      addq.l #8,sp
    c90e:	|      move.l d0,d2
    c910:	|      move.l 191ee <sceneHeight>,d0
    c916:	|      move.l d0,-(sp)
    c918:	|      jsr 1421c <__floatunsisf>
    c91e:	|      addq.l #4,sp
    c920:	|      move.l d0,-(sp)
    c922:	|      move.l d2,-(sp)
    c924:	|      jsr 14360 <__gtsf2>
    c92a:	|      addq.l #8,sp
    c92c:	|      tst.l d0
    c92e:	|  /-- ble.s c964 <builtIn_zoomCamera+0x1bc>
    c930:	|  |   move.l 19052 <winHeight>,d0
    c936:	|  |   move.l d0,-(sp)
    c938:	|  |   jsr 1421c <__floatunsisf>
    c93e:	|  |   addq.l #4,sp
    c940:	|  |   move.l d0,d2
    c942:	|  |   move.l 191ee <sceneHeight>,d0
    c948:	|  |   move.l d0,-(sp)
    c94a:	|  |   jsr 1421c <__floatunsisf>
    c950:	|  |   addq.l #4,sp
    c952:	|  |   move.l d0,-(sp)
    c954:	|  |   move.l d2,-(sp)
    c956:	|  |   jsr 140a0 <__divsf3>
    c95c:	|  |   addq.l #8,sp
    c95e:	|  |   move.l d0,18ab2 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    c964:	|  \-> move.l 190b6 <input+0xa>,d0
    c96a:	|      move.l d0,-(sp)
    c96c:	|      jsr 141f4 <__floatsisf>
    c972:	|      addq.l #4,sp
    c974:	|      move.l d0,d1
    c976:	|      move.l 18ab2 <cameraZoom>,d0
    c97c:	|      move.l d0,-(sp)
    c97e:	|      move.l d1,-(sp)
    c980:	|      jsr 140a0 <__divsf3>
    c986:	|      addq.l #8,sp
    c988:	|      move.l d0,-(sp)
    c98a:	|      jsr 1418c <__fixsfsi>
    c990:	|      addq.l #4,sp
    c992:	|      move.l d0,190b6 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    c998:	|      move.l 190ba <input+0xe>,d0
    c99e:	|      move.l d0,-(sp)
    c9a0:	|      jsr 141f4 <__floatsisf>
    c9a6:	|      addq.l #4,sp
    c9a8:	|      move.l d0,d1
    c9aa:	|      move.l 18ab2 <cameraZoom>,d0
    c9b0:	|      move.l d0,-(sp)
    c9b2:	|      move.l d1,-(sp)
    c9b4:	|      jsr 140a0 <__divsf3>
    c9ba:	|      addq.l #8,sp
    c9bc:	|      move.l d0,-(sp)
    c9be:	|      jsr 1418c <__fixsfsi>
    c9c4:	|      addq.l #4,sp
    c9c6:	|      move.l d0,190ba <input+0xe>

	return BR_CONTINUE;
    c9cc:	|      moveq #2,d0
}
    c9ce:	\----> move.l (sp)+,d2
    c9d0:	       addq.l #4,sp
    c9d2:	       rts

0000c9d4 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    c9d4:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    c9d6:	             tst.l 8(sp)
    c9da:	         /-- bne.s c9ee <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    c9dc:	         |   pea 160fe <custom.c.64ca0e9f+0x1428>
    c9e2:	         |   jsr 13db8 <KPrintF>
    c9e8:	         |   addq.l #4,sp
		return BR_ERROR;
    c9ea:	         |   moveq #1,d0
    c9ec:	/--------|-- bra.s ca4e <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    c9ee:	|        \-> jsr c58 <rand>
    c9f4:	|            move.l d0,d1
    c9f6:	|            move.l 8(sp),d0
    c9fa:	|            move.l d0,-(sp)
    c9fc:	|            move.l d1,-(sp)
    c9fe:	|            jsr 14850 <__umodsi3>
    ca04:	|            addq.l #8,sp
    ca06:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    ca08:	|     /----- bra.s ca3c <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    ca0a:	|  /--|----> move.l (sp),d0
    ca0c:	|  |  |      cmp.l 8(sp),d0
    ca10:	|  |  |  /-- bne.s ca2c <builtIn_pickOne+0x58>
    ca12:	|  |  |  |   moveq #28,d0
    ca14:	|  |  |  |   add.l 12(sp),d0
    ca18:	|  |  |  |   movea.l 12(sp),a0
    ca1c:	|  |  |  |   move.l 24(a0),d1
    ca20:	|  |  |  |   move.l d0,-(sp)
    ca22:	|  |  |  |   move.l d1,-(sp)
    ca24:	|  |  |  |   jsr 1222a <copyVariable>
    ca2a:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    ca2c:	|  |  |  \-> moveq #24,d0
    ca2e:	|  |  |      add.l 12(sp),d0
    ca32:	|  |  |      move.l d0,-(sp)
    ca34:	|  |  |      jsr 126f4 <trimStack>
    ca3a:	|  |  |      addq.l #4,sp
	while (numParams --) {
    ca3c:	|  |  \----> move.l 8(sp),d0
    ca40:	|  |         move.l d0,d1
    ca42:	|  |         subq.l #1,d1
    ca44:	|  |         move.l d1,8(sp)
    ca48:	|  |         tst.l d0
    ca4a:	|  \-------- bne.s ca0a <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    ca4c:	|            moveq #2,d0
}
    ca4e:	\----------> addq.l #4,sp
    ca50:	             rts

0000ca52 <builtIn_substring>:

builtIn(substring)
{
    ca52:	       lea -40(sp),sp
    ca56:	       move.l a6,-(sp)
    ca58:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ca5a:	       movea.l 56(sp),a0
    ca5e:	       move.l 24(a0),d0
    ca62:	       move.l d0,-(sp)
    ca64:	       pea 1 <_start+0x1>
    ca68:	       lea 16(sp),a0
    ca6c:	       move.l a0,-(sp)
    ca6e:	       jsr 11d70 <getValueType>
    ca74:	       lea 12(sp),sp
    ca78:	       tst.w d0
    ca7a:	   /-- bne.s ca82 <builtIn_substring+0x30>
    ca7c:	   |   moveq #1,d0
    ca7e:	/--|-- bra.w cbfa <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    ca82:	|  \-> moveq #24,d0
    ca84:	|      add.l 56(sp),d0
    ca88:	|      move.l d0,-(sp)
    ca8a:	|      jsr 126f4 <trimStack>
    ca90:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ca92:	|      movea.l 56(sp),a0
    ca96:	|      move.l 24(a0),d0
    ca9a:	|      move.l d0,-(sp)
    ca9c:	|      pea 1 <_start+0x1>
    caa0:	|      lea 20(sp),a0
    caa4:	|      move.l a0,-(sp)
    caa6:	|      jsr 11d70 <getValueType>
    caac:	|      lea 12(sp),sp
    cab0:	|      tst.w d0
    cab2:	|  /-- bne.s caba <builtIn_substring+0x68>
    cab4:	|  |   moveq #1,d0
    cab6:	+--|-- bra.w cbfa <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    caba:	|  \-> moveq #24,d0
    cabc:	|      add.l 56(sp),d0
    cac0:	|      move.l d0,-(sp)
    cac2:	|      jsr 126f4 <trimStack>
    cac8:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    caca:	|      movea.l 56(sp),a0
    cace:	|      move.l 24(a0),d0
    cad2:	|      move.l d0,-(sp)
    cad4:	|      jsr 12346 <getTextFromAnyVar>
    cada:	|      addq.l #4,sp
    cadc:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    cae0:	|      moveq #24,d0
    cae2:	|      add.l 56(sp),d0
    cae6:	|      move.l d0,-(sp)
    cae8:	|      jsr 126f4 <trimStack>
    caee:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    caf0:	|      move.l 44(sp),-(sp)
    caf4:	|      jsr 1125c <strlen>
    cafa:	|      addq.l #4,sp
    cafc:	|      move.l d0,d1
    cafe:	|      move.l 12(sp),d0
    cb02:	|      movea.l d0,a0
    cb04:	|      move.l 8(sp),d0
    cb08:	|      add.l a0,d0
    cb0a:	|      cmp.l d1,d0
    cb0c:	|  /-- bls.s cb42 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    cb0e:	|  |   move.l 44(sp),-(sp)
    cb12:	|  |   jsr 1125c <strlen>
    cb18:	|  |   addq.l #4,sp
    cb1a:	|  |   move.l d0,d1
    cb1c:	|  |   move.l 12(sp),d0
    cb20:	|  |   sub.l d0,d1
    cb22:	|  |   move.l d1,d0
    cb24:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    cb28:	|  |   move.l 44(sp),-(sp)
    cb2c:	|  |   jsr 1125c <strlen>
    cb32:	|  |   addq.l #4,sp
    cb34:	|  |   move.l d0,d1
    cb36:	|  |   move.l 12(sp),d0
    cb3a:	|  |   cmp.l d1,d0
    cb3c:	|  +-- bls.s cb42 <builtIn_substring+0xf0>
            start = 0;
    cb3e:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    cb42:	|  \-> move.l 8(sp),d0
    cb46:	|  /-- bpl.s cb4c <builtIn_substring+0xfa>
        length = 0;
    cb48:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    cb4c:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    cb52:	|      move.l 12(sp),d1
    cb56:	|      move.l 8(sp),d0
    cb5a:	|      move.l d1,d2
    cb5c:	|      add.l d0,d2
    cb5e:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    cb62:	|      move.l 36(sp),d0
    cb66:	|      sub.l 40(sp),d0
    cb6a:	|      addq.l #1,d0
    cb6c:	|      move.l d0,32(sp)
    cb70:	|      clr.l 28(sp)
    cb74:	|      move.l 190fa <SysBase>,d0
    cb7a:	|      movea.l d0,a6
    cb7c:	|      move.l 32(sp),d0
    cb80:	|      move.l 28(sp),d1
    cb84:	|      jsr -684(a6)
    cb88:	|      move.l d0,24(sp)
    cb8c:	|      move.l 24(sp),d0
    cb90:	|      move.l d0,20(sp)
    if (!newString) {
    cb94:	|  /-- bne.s cb9a <builtIn_substring+0x148>
        return BR_ERROR;
    cb96:	|  |   moveq #1,d0
    cb98:	+--|-- bra.s cbfa <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    cb9a:	|  \-> move.l 36(sp),d0
    cb9e:	|      sub.l 40(sp),d0
    cba2:	|      move.l d0,d1
    cba4:	|      move.l 40(sp),d0
    cba8:	|      add.l 44(sp),d0
    cbac:	|      move.l d1,-(sp)
    cbae:	|      move.l d0,-(sp)
    cbb0:	|      move.l 28(sp),-(sp)
    cbb4:	|      jsr 13d6c <memcpy>
    cbba:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    cbbe:	|      move.l 36(sp),d0
    cbc2:	|      sub.l 40(sp),d0
    cbc6:	|      movea.l 20(sp),a0
    cbca:	|      adda.l d0,a0
    cbcc:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    cbce:	|      moveq #28,d0
    cbd0:	|      add.l 56(sp),d0
    cbd4:	|      move.l 20(sp),-(sp)
    cbd8:	|      move.l d0,-(sp)
    cbda:	|      jsr 11f92 <makeTextVar>
    cbe0:	|      addq.l #8,sp
    FreeVec(newString);
    cbe2:	|      move.l 20(sp),16(sp)
    cbe8:	|      move.l 190fa <SysBase>,d0
    cbee:	|      movea.l d0,a6
    cbf0:	|      movea.l 16(sp),a1
    cbf4:	|      jsr -690(a6)
    return BR_CONTINUE;
    cbf8:	|      moveq #2,d0
}
    cbfa:	\----> move.l (sp)+,d2
    cbfc:	       movea.l (sp)+,a6
    cbfe:	       lea 40(sp),sp
    cc02:	       rts

0000cc04 <builtIn_stringLength>:

builtIn(stringLength)
{
    cc04:	subq.l #8,sp
    cc06:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    cc08:	movea.l 20(sp),a0
    cc0c:	move.l 24(a0),d0
    cc10:	move.l d0,-(sp)
    cc12:	jsr 12346 <getTextFromAnyVar>
    cc18:	addq.l #4,sp
    cc1a:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    cc1e:	moveq #24,d0
    cc20:	add.l 20(sp),d0
    cc24:	move.l d0,-(sp)
    cc26:	jsr 126f4 <trimStack>
    cc2c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    cc2e:	move.l 8(sp),-(sp)
    cc32:	jsr 1125c <strlen>
    cc38:	addq.l #4,sp
    cc3a:	move.l d0,d1
    cc3c:	moveq #28,d0
    cc3e:	add.l 20(sp),d0
    cc42:	move.l d1,-(sp)
    cc44:	pea 1 <_start+0x1>
    cc48:	move.l d0,-(sp)
    cc4a:	jsr 12662 <setVariable>
    cc50:	lea 12(sp),sp
	FreeVec(newText);
    cc54:	move.l 8(sp),4(sp)
    cc5a:	move.l 190fa <SysBase>,d0
    cc60:	movea.l d0,a6
    cc62:	movea.l 4(sp),a1
    cc66:	jsr -690(a6)
	return BR_CONTINUE;
    cc6a:	moveq #2,d0
}
    cc6c:	movea.l (sp)+,a6
    cc6e:	addq.l #8,sp
    cc70:	rts

0000cc72 <builtIn_newStack>:

builtIn(newStack)
{
    cc72:	             lea -12(sp),sp
    cc76:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    cc78:	             moveq #28,d0
    cc7a:	             add.l 24(sp),d0
    cc7e:	             move.l d0,-(sp)
    cc80:	             jsr 11fbe <unlinkVar>
    cc86:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    cc88:	             movea.l 24(sp),a0
    cc8c:	             moveq #6,d0
    cc8e:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    cc92:	             moveq #12,d1
    cc94:	             move.l d1,12(sp)
    cc98:	             clr.l 8(sp)
    cc9c:	             move.l 190fa <SysBase>,d0
    cca2:	             movea.l d0,a6
    cca4:	             move.l 12(sp),d0
    cca8:	             move.l 8(sp),d1
    ccac:	             jsr -684(a6)
    ccb0:	             move.l d0,4(sp)
    ccb4:	             move.l 4(sp),d0
    ccb8:	             movea.l 24(sp),a0
    ccbc:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    ccc0:	             movea.l 24(sp),a0
    ccc4:	             move.l 32(a0),d0
    ccc8:	         /-- bne.s ccd0 <builtIn_newStack+0x5e>
    ccca:	         |   moveq #1,d0
    cccc:	/--------|-- bra.w cd62 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    ccd0:	|        \-> movea.l 24(sp),a0
    ccd4:	|            movea.l 32(a0),a0
    ccd8:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    ccda:	|            movea.l 24(sp),a0
    ccde:	|            movea.l 32(a0),a0
    cce2:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    cce6:	|            movea.l 24(sp),a0
    ccea:	|            movea.l 32(a0),a0
    ccee:	|            moveq #1,d0
    ccf0:	|            move.l d0,8(a0)
    
    while (numParams--) {
    ccf4:	|     /----- bra.s cd50 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    ccf6:	|  /--|----> movea.l 24(sp),a0
    ccfa:	|  |  |      move.l 32(a0),d0
    ccfe:	|  |  |      move.l d0,d1
    cd00:	|  |  |      movea.l 24(sp),a0
    cd04:	|  |  |      move.l 24(a0),d0
    cd08:	|  |  |      move.l d1,-(sp)
    cd0a:	|  |  |      move.l d0,-(sp)
    cd0c:	|  |  |      jsr 115ac <addVarToStack>
    cd12:	|  |  |      addq.l #8,sp
    cd14:	|  |  |      tst.w d0
    cd16:	|  |  |  /-- bne.s cd1c <builtIn_newStack+0xaa>
    cd18:	|  |  |  |   moveq #1,d0
    cd1a:	+--|--|--|-- bra.s cd62 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    cd1c:	|  |  |  \-> movea.l 24(sp),a0
    cd20:	|  |  |      movea.l 32(a0),a0
    cd24:	|  |  |      move.l 4(a0),d0
    cd28:	|  |  |  /-- bne.s cd40 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    cd2a:	|  |  |  |   movea.l 24(sp),a0
    cd2e:	|  |  |  |   movea.l 32(a0),a1
    cd32:	|  |  |  |   movea.l 24(sp),a0
    cd36:	|  |  |  |   movea.l 32(a0),a0
    cd3a:	|  |  |  |   move.l (a1),d0
    cd3c:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    cd40:	|  |  |  \-> moveq #24,d0
    cd42:	|  |  |      add.l 24(sp),d0
    cd46:	|  |  |      move.l d0,-(sp)
    cd48:	|  |  |      jsr 126f4 <trimStack>
    cd4e:	|  |  |      addq.l #4,sp
    while (numParams--) {
    cd50:	|  |  \----> move.l 20(sp),d0
    cd54:	|  |         move.l d0,d1
    cd56:	|  |         subq.l #1,d1
    cd58:	|  |         move.l d1,20(sp)
    cd5c:	|  |         tst.l d0
    cd5e:	|  \-------- bne.s ccf6 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    cd60:	|            moveq #2,d0
}
    cd62:	\----------> movea.l (sp)+,a6
    cd64:	             lea 12(sp),sp
    cd68:	             rts

0000cd6a <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    cd6a:	          movea.l 8(sp),a0
    cd6e:	          movea.l 24(a0),a0
    cd72:	          move.l (a0),d0
    cd74:	          moveq #6,d1
    cd76:	          cmp.l d0,d1
    cd78:	      /-- beq.s cd94 <builtIn_stackSize+0x2a>
    cd7a:	      |   moveq #10,d1
    cd7c:	      |   cmp.l d0,d1
    cd7e:	   /--|-- beq.s cdd8 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    cd80:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    cd82:	   |  |   pea 16131 <custom.c.64ca0e9f+0x145b>
    cd88:	   |  |   jsr 13db8 <KPrintF>
    cd8e:	   |  |   addq.l #4,sp
	return BR_ERROR;
    cd90:	   |  |   moveq #1,d0
    cd92:	/--|--|-- bra.s ce12 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    cd94:	|  |  \-> movea.l 8(sp),a0
    cd98:	|  |      movea.l 24(a0),a0
    cd9c:	|  |      move.l 4(a0),d0
    cda0:	|  |      move.l d0,-(sp)
    cda2:	|  |      jsr 126d0 <stackSize>
    cda8:	|  |      addq.l #4,sp
    cdaa:	|  |      move.l d0,d1
    cdac:	|  |      moveq #28,d0
    cdae:	|  |      add.l 8(sp),d0
    cdb2:	|  |      move.l d1,-(sp)
    cdb4:	|  |      pea 1 <_start+0x1>
    cdb8:	|  |      move.l d0,-(sp)
    cdba:	|  |      jsr 12662 <setVariable>
    cdc0:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    cdc4:	|  |      moveq #24,d0
    cdc6:	|  |      add.l 8(sp),d0
    cdca:	|  |      move.l d0,-(sp)
    cdcc:	|  |      jsr 126f4 <trimStack>
    cdd2:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    cdd4:	|  |      moveq #2,d0
    cdd6:	+--|----- bra.s ce12 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    cdd8:	|  \----> movea.l 8(sp),a0
    cddc:	|         movea.l 24(a0),a0
    cde0:	|         movea.l 4(a0),a0
    cde4:	|         move.l 4(a0),d1
    cde8:	|         moveq #28,d0
    cdea:	|         add.l 8(sp),d0
    cdee:	|         move.l d1,-(sp)
    cdf0:	|         pea 1 <_start+0x1>
    cdf4:	|         move.l d0,-(sp)
    cdf6:	|         jsr 12662 <setVariable>
    cdfc:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    ce00:	|         moveq #24,d0
    ce02:	|         add.l 8(sp),d0
    ce06:	|         move.l d0,-(sp)
    ce08:	|         jsr 126f4 <trimStack>
    ce0e:	|         addq.l #4,sp
			return BR_CONTINUE;
    ce10:	|         moveq #2,d0
}
    ce12:	\-------> rts

0000ce14 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ce14:	       movea.l 8(sp),a0
    ce18:	       movea.l 24(a0),a0
    ce1c:	       move.l (a0),d0
    ce1e:	       moveq #6,d1
    ce20:	       cmp.l d0,d1
    ce22:	   /-- beq.s ce36 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    ce24:	   |   pea 1615a <custom.c.64ca0e9f+0x1484>
    ce2a:	   |   jsr 13db8 <KPrintF>
    ce30:	   |   addq.l #4,sp
		return BR_ERROR;
    ce32:	   |   moveq #1,d0
    ce34:	/--|-- bra.s ce6a <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    ce36:	|  \-> moveq #28,d0
    ce38:	|      add.l 8(sp),d0
    ce3c:	|      movea.l 8(sp),a0
    ce40:	|      move.l 24(a0),d1
    ce44:	|      move.l d0,-(sp)
    ce46:	|      move.l d1,-(sp)
    ce48:	|      jsr 11876 <copyStack>
    ce4e:	|      addq.l #8,sp
    ce50:	|      tst.w d0
    ce52:	|  /-- bne.s ce58 <builtIn_copyStack+0x44>
    ce54:	|  |   moveq #1,d0
    ce56:	+--|-- bra.s ce6a <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    ce58:	|  \-> moveq #24,d0
    ce5a:	|      add.l 8(sp),d0
    ce5e:	|      move.l d0,-(sp)
    ce60:	|      jsr 126f4 <trimStack>
    ce66:	|      addq.l #4,sp
	return BR_CONTINUE;
    ce68:	|      moveq #2,d0
}
    ce6a:	\----> rts

0000ce6c <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    ce6c:	       movea.l 8(sp),a0
    ce70:	       movea.l 24(a0),a0
    ce74:	       movea.l 8(a0),a0
    ce78:	       move.l (a0),d0
    ce7a:	       moveq #6,d1
    ce7c:	       cmp.l d0,d1
    ce7e:	   /-- beq.s ce94 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    ce80:	   |   pea 16173 <custom.c.64ca0e9f+0x149d>
    ce86:	   |   jsr 13db8 <KPrintF>
    ce8c:	   |   addq.l #4,sp
		return BR_ERROR;
    ce8e:	   |   moveq #1,d0
    ce90:	/--|-- bra.w cf22 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    ce94:	|  \-> movea.l 8(sp),a0
    ce98:	|      movea.l 24(a0),a0
    ce9c:	|      movea.l 8(a0),a0
    cea0:	|      move.l 4(a0),d0
    cea4:	|      move.l d0,d1
    cea6:	|      movea.l 8(sp),a0
    ceaa:	|      move.l 24(a0),d0
    ceae:	|      move.l d1,-(sp)
    ceb0:	|      move.l d0,-(sp)
    ceb2:	|      jsr 115ac <addVarToStack>
    ceb8:	|      addq.l #8,sp
    ceba:	|      tst.w d0
    cebc:	|  /-- bne.s cec2 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    cebe:	|  |   moveq #1,d0
    cec0:	+--|-- bra.s cf22 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    cec2:	|  \-> movea.l 8(sp),a0
    cec6:	|      movea.l 24(a0),a0
    ceca:	|      movea.l 8(a0),a0
    cece:	|      movea.l 4(a0),a0
    ced2:	|      movea.l (a0),a0
    ced4:	|      move.l 8(a0),d0
    ced8:	|  /-- bne.s cf00 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    ceda:	|  |   movea.l 8(sp),a0
    cede:	|  |   movea.l 24(a0),a0
    cee2:	|  |   movea.l 8(a0),a0
    cee6:	|  |   movea.l 4(a0),a1
    ceea:	|  |   movea.l 8(sp),a0
    ceee:	|  |   movea.l 24(a0),a0
    cef2:	|  |   movea.l 8(a0),a0
    cef6:	|  |   movea.l 4(a0),a0
    cefa:	|  |   move.l (a1),d0
    cefc:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    cf00:	|  \-> moveq #24,d0
    cf02:	|      add.l 8(sp),d0
    cf06:	|      move.l d0,-(sp)
    cf08:	|      jsr 126f4 <trimStack>
    cf0e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    cf10:	|      moveq #24,d0
    cf12:	|      add.l 8(sp),d0
    cf16:	|      move.l d0,-(sp)
    cf18:	|      jsr 126f4 <trimStack>
    cf1e:	|      addq.l #4,sp
	return BR_CONTINUE;
    cf20:	|      moveq #2,d0
}
    cf22:	\----> rts

0000cf24 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    cf24:	             movea.l 8(sp),a0
    cf28:	             movea.l 24(a0),a0
    cf2c:	             movea.l 8(a0),a0
    cf30:	             move.l (a0),d0
    cf32:	             moveq #6,d1
    cf34:	             cmp.l d0,d1
    cf36:	         /-- beq.s cf4c <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    cf38:	         |   pea 16173 <custom.c.64ca0e9f+0x149d>
    cf3e:	         |   jsr 13db8 <KPrintF>
    cf44:	         |   addq.l #4,sp
		return BR_ERROR;
    cf46:	         |   moveq #1,d0
    cf48:	/--------|-- bra.w d03a <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    cf4c:	|        \-> movea.l 8(sp),a0
    cf50:	|            movea.l 24(a0),a0
    cf54:	|            movea.l 8(a0),a0
    cf58:	|            movea.l 4(a0),a0
    cf5c:	|            move.l (a0),d0
    cf5e:	|     /----- bne.s cfb8 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    cf60:	|     |      movea.l 8(sp),a0
    cf64:	|     |      movea.l 24(a0),a0
    cf68:	|     |      movea.l 8(a0),a0
    cf6c:	|     |      move.l 4(a0),d0
    cf70:	|     |      move.l d0,d1
    cf72:	|     |      movea.l 8(sp),a0
    cf76:	|     |      move.l 24(a0),d0
    cf7a:	|     |      move.l d1,-(sp)
    cf7c:	|     |      move.l d0,-(sp)
    cf7e:	|     |      jsr 115ac <addVarToStack>
    cf84:	|     |      addq.l #8,sp
    cf86:	|     |      tst.w d0
    cf88:	|     |  /-- bne.s cf90 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    cf8a:	|     |  |   moveq #1,d0
    cf8c:	+-----|--|-- bra.w d03a <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    cf90:	|     |  \-> movea.l 8(sp),a0
    cf94:	|     |      movea.l 24(a0),a0
    cf98:	|     |      movea.l 8(a0),a0
    cf9c:	|     |      movea.l 4(a0),a1
    cfa0:	|     |      movea.l 8(sp),a0
    cfa4:	|     |      movea.l 24(a0),a0
    cfa8:	|     |      movea.l 8(a0),a0
    cfac:	|     |      movea.l 4(a0),a0
    cfb0:	|     |      move.l (a1),d0
    cfb2:	|     |      move.l d0,4(a0)
    cfb6:	|  /--|----- bra.s d018 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    cfb8:	|  |  \----> movea.l 8(sp),a0
    cfbc:	|  |         movea.l 24(a0),a0
    cfc0:	|  |         movea.l 8(a0),a0
    cfc4:	|  |         movea.l 4(a0),a0
    cfc8:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    cfcc:	|  |         move.l d0,d1
    cfce:	|  |         addq.l #8,d1
    cfd0:	|  |         movea.l 8(sp),a0
    cfd4:	|  |         move.l 24(a0),d0
    cfd8:	|  |         move.l d1,-(sp)
    cfda:	|  |         move.l d0,-(sp)
    cfdc:	|  |         jsr 115ac <addVarToStack>
    cfe2:	|  |         addq.l #8,sp
    cfe4:	|  |         tst.w d0
    cfe6:	|  |     /-- bne.s cfec <builtIn_enqueue+0xc8>
			return BR_ERROR;
    cfe8:	|  |     |   moveq #1,d0
    cfea:	+--|-----|-- bra.s d03a <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    cfec:	|  |     \-> movea.l 8(sp),a0
    cff0:	|  |         movea.l 24(a0),a0
    cff4:	|  |         movea.l 8(a0),a0
    cff8:	|  |         movea.l 4(a0),a0
    cffc:	|  |         movea.l 4(a0),a1
    d000:	|  |         movea.l 8(sp),a0
    d004:	|  |         movea.l 24(a0),a0
    d008:	|  |         movea.l 8(a0),a0
    d00c:	|  |         movea.l 4(a0),a0
    d010:	|  |         move.l 8(a1),d0
    d014:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    d018:	|  \-------> moveq #24,d0
    d01a:	|            add.l 8(sp),d0
    d01e:	|            move.l d0,-(sp)
    d020:	|            jsr 126f4 <trimStack>
    d026:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    d028:	|            moveq #24,d0
    d02a:	|            add.l 8(sp),d0
    d02e:	|            move.l d0,-(sp)
    d030:	|            jsr 126f4 <trimStack>
    d036:	|            addq.l #4,sp
	return BR_CONTINUE;
    d038:	|            moveq #2,d0
}
    d03a:	\----------> rts

0000d03c <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    d03c:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    d03e:	       movea.l 12(sp),a0
    d042:	       movea.l 24(a0),a0
    d046:	       movea.l 8(a0),a0
    d04a:	       move.l (a0),d0
    d04c:	       moveq #6,d1
    d04e:	       cmp.l d0,d1
    d050:	   /-- beq.s d066 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    d052:	   |   pea 1615a <custom.c.64ca0e9f+0x1484>
    d058:	   |   jsr 13db8 <KPrintF>
    d05e:	   |   addq.l #4,sp
		return BR_ERROR;
    d060:	   |   moveq #1,d0
    d062:	/--|-- bra.w d0fc <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    d066:	|  \-> movea.l 12(sp),a0
    d06a:	|      movea.l 24(a0),a0
    d06e:	|      movea.l 8(a0),a0
    d072:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    d076:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    d078:	|      movea.l 12(sp),a0
    d07c:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    d080:	|      clr.l -(sp)
    d082:	|      move.l d1,-(sp)
    d084:	|      move.l d0,-(sp)
    d086:	|      jsr 1194c <deleteVarFromStack>
    d08c:	|      lea 12(sp),sp
    d090:	|      move.l d0,d1
    d092:	|      moveq #28,d0
    d094:	|      add.l 12(sp),d0
    d098:	|      move.l d1,-(sp)
    d09a:	|      pea 1 <_start+0x1>
    d09e:	|      move.l d0,-(sp)
    d0a0:	|      jsr 12662 <setVariable>
    d0a6:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    d0aa:	|      movea.l 12(sp),a0
    d0ae:	|      movea.l 24(a0),a0
    d0b2:	|      movea.l 8(a0),a0
    d0b6:	|      movea.l 4(a0),a0
    d0ba:	|      move.l (a0),d0
    d0bc:	|      movea.l 12(sp),a0
    d0c0:	|      movea.l 24(a0),a0
    d0c4:	|      movea.l 8(a0),a0
    d0c8:	|      movea.l 4(a0),a2
    d0cc:	|      move.l d0,-(sp)
    d0ce:	|      jsr 126ac <stackFindLast>
    d0d4:	|      addq.l #4,sp
    d0d6:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    d0da:	|      moveq #24,d0
    d0dc:	|      add.l 12(sp),d0
    d0e0:	|      move.l d0,-(sp)
    d0e2:	|      jsr 126f4 <trimStack>
    d0e8:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    d0ea:	|      moveq #24,d0
    d0ec:	|      add.l 12(sp),d0
    d0f0:	|      move.l d0,-(sp)
    d0f2:	|      jsr 126f4 <trimStack>
    d0f8:	|      addq.l #4,sp
	return BR_CONTINUE;
    d0fa:	|      moveq #2,d0
}
    d0fc:	\----> movea.l (sp)+,a2
    d0fe:	       rts

0000d100 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    d100:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    d102:	       movea.l 12(sp),a0
    d106:	       movea.l 24(a0),a0
    d10a:	       movea.l 8(a0),a0
    d10e:	       move.l (a0),d0
    d110:	       moveq #6,d1
    d112:	       cmp.l d0,d1
    d114:	   /-- beq.s d12a <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    d116:	   |   pea 1615a <custom.c.64ca0e9f+0x1484>
    d11c:	   |   jsr 13db8 <KPrintF>
    d122:	   |   addq.l #4,sp
		return BR_ERROR;
    d124:	   |   moveq #1,d0
    d126:	/--|-- bra.w d1c2 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    d12a:	|  \-> movea.l 12(sp),a0
    d12e:	|      movea.l 24(a0),a0
    d132:	|      movea.l 8(a0),a0
    d136:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    d13a:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    d13c:	|      movea.l 12(sp),a0
    d140:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    d144:	|      pea 1 <_start+0x1>
    d148:	|      move.l d1,-(sp)
    d14a:	|      move.l d0,-(sp)
    d14c:	|      jsr 1194c <deleteVarFromStack>
    d152:	|      lea 12(sp),sp
    d156:	|      move.l d0,d1
    d158:	|      moveq #28,d0
    d15a:	|      add.l 12(sp),d0
    d15e:	|      move.l d1,-(sp)
    d160:	|      pea 1 <_start+0x1>
    d164:	|      move.l d0,-(sp)
    d166:	|      jsr 12662 <setVariable>
    d16c:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    d170:	|      movea.l 12(sp),a0
    d174:	|      movea.l 24(a0),a0
    d178:	|      movea.l 8(a0),a0
    d17c:	|      movea.l 4(a0),a0
    d180:	|      move.l (a0),d0
    d182:	|      movea.l 12(sp),a0
    d186:	|      movea.l 24(a0),a0
    d18a:	|      movea.l 8(a0),a0
    d18e:	|      movea.l 4(a0),a2
    d192:	|      move.l d0,-(sp)
    d194:	|      jsr 126ac <stackFindLast>
    d19a:	|      addq.l #4,sp
    d19c:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    d1a0:	|      moveq #24,d0
    d1a2:	|      add.l 12(sp),d0
    d1a6:	|      move.l d0,-(sp)
    d1a8:	|      jsr 126f4 <trimStack>
    d1ae:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    d1b0:	|      moveq #24,d0
    d1b2:	|      add.l 12(sp),d0
    d1b6:	|      move.l d0,-(sp)
    d1b8:	|      jsr 126f4 <trimStack>
    d1be:	|      addq.l #4,sp
	return BR_CONTINUE;
    d1c0:	|      moveq #2,d0
}
    d1c2:	\----> movea.l (sp)+,a2
    d1c4:	       rts

0000d1c6 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    d1c6:	       movea.l 8(sp),a0
    d1ca:	       movea.l 24(a0),a0
    d1ce:	       move.l (a0),d0
    d1d0:	       moveq #6,d1
    d1d2:	       cmp.l d0,d1
    d1d4:	   /-- beq.s d1e8 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    d1d6:	   |   pea 1615a <custom.c.64ca0e9f+0x1484>
    d1dc:	   |   jsr 13db8 <KPrintF>
    d1e2:	   |   addq.l #4,sp
		return BR_ERROR;
    d1e4:	   |   moveq #1,d0
    d1e6:	/--|-- bra.s d252 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    d1e8:	|  \-> movea.l 8(sp),a0
    d1ec:	|      movea.l 24(a0),a0
    d1f0:	|      movea.l 4(a0),a0
    d1f4:	|      move.l (a0),d0
    d1f6:	|  /-- bne.s d20a <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    d1f8:	|  |   pea 1618b <custom.c.64ca0e9f+0x14b5>
    d1fe:	|  |   jsr 13db8 <KPrintF>
    d204:	|  |   addq.l #4,sp
		return BR_ERROR;
    d206:	|  |   moveq #1,d0
    d208:	+--|-- bra.s d252 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    d20a:	|  \-> moveq #28,d0
    d20c:	|      add.l 8(sp),d0
    d210:	|      movea.l 8(sp),a0
    d214:	|      movea.l 24(a0),a0
    d218:	|      movea.l 4(a0),a0
    d21c:	|      move.l (a0),d1
    d21e:	|      move.l d0,-(sp)
    d220:	|      move.l d1,-(sp)
    d222:	|      jsr 1222a <copyVariable>
    d228:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    d22a:	|      movea.l 8(sp),a0
    d22e:	|      movea.l 24(a0),a0
    d232:	|      move.l 4(a0),d0
    d236:	|      move.l d0,-(sp)
    d238:	|      jsr 126f4 <trimStack>
    d23e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    d240:	|      moveq #24,d0
    d242:	|      add.l 8(sp),d0
    d246:	|      move.l d0,-(sp)
    d248:	|      jsr 126f4 <trimStack>
    d24e:	|      addq.l #4,sp
	return BR_CONTINUE;
    d250:	|      moveq #2,d0
}
    d252:	\----> rts

0000d254 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    d254:	       movea.l 8(sp),a0
    d258:	       movea.l 24(a0),a0
    d25c:	       move.l (a0),d0
    d25e:	       moveq #6,d1
    d260:	       cmp.l d0,d1
    d262:	   /-- beq.s d276 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    d264:	   |   pea 1615a <custom.c.64ca0e9f+0x1484>
    d26a:	   |   jsr 13db8 <KPrintF>
    d270:	   |   addq.l #4,sp
		return BR_ERROR;
    d272:	   |   moveq #1,d0
    d274:	/--|-- bra.s d2ca <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    d276:	|  \-> movea.l 8(sp),a0
    d27a:	|      movea.l 24(a0),a0
    d27e:	|      movea.l 4(a0),a0
    d282:	|      move.l (a0),d0
    d284:	|  /-- bne.s d298 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    d286:	|  |   pea 1618b <custom.c.64ca0e9f+0x14b5>
    d28c:	|  |   jsr 13db8 <KPrintF>
    d292:	|  |   addq.l #4,sp
		return BR_ERROR;
    d294:	|  |   moveq #1,d0
    d296:	+--|-- bra.s d2ca <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    d298:	|  \-> moveq #28,d0
    d29a:	|      add.l 8(sp),d0
    d29e:	|      movea.l 8(sp),a0
    d2a2:	|      movea.l 24(a0),a0
    d2a6:	|      movea.l 4(a0),a0
    d2aa:	|      move.l (a0),d1
    d2ac:	|      move.l d0,-(sp)
    d2ae:	|      move.l d1,-(sp)
    d2b0:	|      jsr 1222a <copyVariable>
    d2b6:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    d2b8:	|      moveq #24,d0
    d2ba:	|      add.l 8(sp),d0
    d2be:	|      move.l d0,-(sp)
    d2c0:	|      jsr 126f4 <trimStack>
    d2c6:	|      addq.l #4,sp
	return BR_CONTINUE;
    d2c8:	|      moveq #2,d0
}
    d2ca:	\----> rts

0000d2cc <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    d2cc:	       movea.l 8(sp),a0
    d2d0:	       movea.l 24(a0),a0
    d2d4:	       move.l (a0),d0
    d2d6:	       moveq #6,d1
    d2d8:	       cmp.l d0,d1
    d2da:	   /-- beq.s d2ee <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    d2dc:	   |   pea 1615a <custom.c.64ca0e9f+0x1484>
    d2e2:	   |   jsr 13db8 <KPrintF>
    d2e8:	   |   addq.l #4,sp
		return BR_ERROR;
    d2ea:	   |   moveq #1,d0
    d2ec:	/--|-- bra.s d344 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    d2ee:	|  \-> movea.l 8(sp),a0
    d2f2:	|      movea.l 24(a0),a0
    d2f6:	|      movea.l 4(a0),a0
    d2fa:	|      move.l (a0),d0
    d2fc:	|  /-- bne.s d310 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    d2fe:	|  |   pea 1618b <custom.c.64ca0e9f+0x14b5>
    d304:	|  |   jsr 13db8 <KPrintF>
    d30a:	|  |   addq.l #4,sp
		return BR_ERROR;
    d30c:	|  |   moveq #1,d0
    d30e:	+--|-- bra.s d344 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    d310:	|  \-> moveq #28,d0
    d312:	|      add.l 8(sp),d0
    d316:	|      movea.l 8(sp),a0
    d31a:	|      movea.l 24(a0),a0
    d31e:	|      movea.l 4(a0),a0
    d322:	|      move.l 4(a0),d1
    d326:	|      move.l d0,-(sp)
    d328:	|      move.l d1,-(sp)
    d32a:	|      jsr 1222a <copyVariable>
    d330:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    d332:	|      moveq #24,d0
    d334:	|      add.l 8(sp),d0
    d338:	|      move.l d0,-(sp)
    d33a:	|      jsr 126f4 <trimStack>
    d340:	|      addq.l #4,sp
	return BR_CONTINUE;
    d342:	|      moveq #2,d0
}
    d344:	\----> rts

0000d346 <builtIn_random>:

builtIn(random)
{
    d346:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    d348:	       movea.l 12(sp),a0
    d34c:	       move.l 24(a0),d0
    d350:	       move.l d0,-(sp)
    d352:	       pea 1 <_start+0x1>
    d356:	       move.l sp,d0
    d358:	       addq.l #8,d0
    d35a:	       move.l d0,-(sp)
    d35c:	       jsr 11d70 <getValueType>
    d362:	       lea 12(sp),sp
    d366:	       tst.w d0
    d368:	   /-- bne.s d36e <builtIn_random+0x28>
		return BR_ERROR;
    d36a:	   |   moveq #1,d0
    d36c:	/--|-- bra.s d3b8 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    d36e:	|  \-> moveq #24,d0
    d370:	|      add.l 12(sp),d0
    d374:	|      move.l d0,-(sp)
    d376:	|      jsr 126f4 <trimStack>
    d37c:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    d37e:	|      move.l (sp),d0
    d380:	|  /-- bgt.s d386 <builtIn_random+0x40>
    d382:	|  |   moveq #1,d0
    d384:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    d386:	|  \-> jsr c58 <rand>
    d38c:	|      move.l d0,d1
    d38e:	|      move.l (sp),d0
    d390:	|      move.l d0,-(sp)
    d392:	|      move.l d1,-(sp)
    d394:	|      jsr 14850 <__umodsi3>
    d39a:	|      addq.l #8,sp
    d39c:	|      move.l d0,d1
    d39e:	|      moveq #28,d0
    d3a0:	|      add.l 12(sp),d0
    d3a4:	|      move.l d1,-(sp)
    d3a6:	|      pea 1 <_start+0x1>
    d3aa:	|      move.l d0,-(sp)
    d3ac:	|      jsr 12662 <setVariable>
    d3b2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d3b6:	|      moveq #2,d0
}
    d3b8:	\----> addq.l #4,sp
    d3ba:	       rts

0000d3bc <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    d3bc:	nop
    d3be:	rts

0000d3c0 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    d3c0:	moveq #2,d0
}
    d3c2:	rts

0000d3c4 <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    d3c4:	moveq #2,d0
}
    d3c6:	rts

0000d3c8 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    d3c8:	moveq #2,d0
}
    d3ca:	rts

0000d3cc <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    d3cc:	moveq #2,d0
}
    d3ce:	rts

0000d3d0 <builtIn_setFont>:


builtIn(setFont)
{
    d3d0:	       lea -16(sp),sp
    d3d4:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d3d6:	       movea.l 28(sp),a0
    d3da:	       move.l 24(a0),d0
    d3de:	       move.l d0,-(sp)
    d3e0:	       pea 1 <_start+0x1>
    d3e4:	       lea 12(sp),a0
    d3e8:	       move.l a0,-(sp)
    d3ea:	       jsr 11d70 <getValueType>
    d3f0:	       lea 12(sp),sp
    d3f4:	       tst.w d0
    d3f6:	   /-- bne.s d3fe <builtIn_setFont+0x2e>
    d3f8:	   |   moveq #1,d0
    d3fa:	/--|-- bra.w d4ac <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    d3fe:	|  \-> moveq #24,d0
    d400:	|      add.l 28(sp),d0
    d404:	|      move.l d0,-(sp)
    d406:	|      jsr 126f4 <trimStack>
    d40c:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d40e:	|      movea.l 28(sp),a0
    d412:	|      move.l 24(a0),d0
    d416:	|      move.l d0,-(sp)
    d418:	|      jsr 12346 <getTextFromAnyVar>
    d41e:	|      addq.l #4,sp
    d420:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    d424:	|  /-- bne.s d42c <builtIn_setFont+0x5c>
    d426:	|  |   moveq #1,d0
    d428:	+--|-- bra.w d4ac <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    d42c:	|  \-> moveq #24,d0
    d42e:	|      add.l 28(sp),d0
    d432:	|      move.l d0,-(sp)
    d434:	|      jsr 126f4 <trimStack>
    d43a:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    d43c:	|      movea.l 28(sp),a0
    d440:	|      move.l 24(a0),d0
    d444:	|      move.l d0,-(sp)
    d446:	|      pea 5 <_start+0x5>
    d44a:	|      lea 16(sp),a0
    d44e:	|      move.l a0,-(sp)
    d450:	|      jsr 11d70 <getValueType>
    d456:	|      lea 12(sp),sp
    d45a:	|      tst.w d0
    d45c:	|  /-- bne.s d462 <builtIn_setFont+0x92>
    d45e:	|  |   moveq #1,d0
    d460:	+--|-- bra.s d4ac <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    d462:	|  \-> moveq #24,d0
    d464:	|      add.l 28(sp),d0
    d468:	|      move.l d0,-(sp)
    d46a:	|      jsr 126f4 <trimStack>
    d470:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    d472:	|      move.l 4(sp),d1
    d476:	|      move.l 8(sp),d0
    d47a:	|      move.l d1,-(sp)
    d47c:	|      move.l 20(sp),-(sp)
    d480:	|      move.l d0,-(sp)
    d482:	|      jsr 12768 <loadFont>
    d488:	|      lea 12(sp),sp
    d48c:	|      tst.w d0
    d48e:	|  /-- bne.s d494 <builtIn_setFont+0xc4>
    d490:	|  |   moveq #1,d0
    d492:	+--|-- bra.s d4ac <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    d494:	|  \-> move.l 16(sp),12(sp)
    d49a:	|      move.l 190fa <SysBase>,d0
    d4a0:	|      movea.l d0,a6
    d4a2:	|      movea.l 12(sp),a1
    d4a6:	|      jsr -690(a6)

    return BR_CONTINUE;
    d4aa:	|      moveq #2,d0
}
    d4ac:	\----> movea.l (sp)+,a6
    d4ae:	       lea 16(sp),sp
    d4b2:	       rts

0000d4b4 <builtIn_inFont>:

builtIn(inFont)
{
    d4b4:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    d4b6:	       movea.l 12(sp),a0
    d4ba:	       move.l 24(a0),d0
    d4be:	       move.l d0,-(sp)
    d4c0:	       jsr 12346 <getTextFromAnyVar>
    d4c6:	       addq.l #4,sp
    d4c8:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    d4ca:	   /-- bne.s d4d0 <builtIn_inFont+0x1c>
    d4cc:	   |   moveq #1,d0
    d4ce:	/--|-- bra.s d506 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    d4d0:	|  \-> moveq #24,d0
    d4d2:	|      add.l 12(sp),d0
    d4d6:	|      move.l d0,-(sp)
    d4d8:	|      jsr 126f4 <trimStack>
    d4de:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    d4e0:	|      move.l (sp),-(sp)
    d4e2:	|      jsr 1273c <isInFont>
    d4e8:	|      addq.l #4,sp
    d4ea:	|      movea.w d0,a0
    d4ec:	|      moveq #28,d0
    d4ee:	|      add.l 12(sp),d0
    d4f2:	|      move.l a0,-(sp)
    d4f4:	|      pea 1 <_start+0x1>
    d4f8:	|      move.l d0,-(sp)
    d4fa:	|      jsr 12662 <setVariable>
    d500:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d504:	|      moveq #2,d0
}
    d506:	\----> addq.l #4,sp
    d508:	       rts

0000d50a <builtIn_pasteString>:

builtIn(pasteString)
{
    d50a:	       lea -16(sp),sp
    d50e:	       move.l a6,-(sp)
    d510:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d512:	       movea.l 32(sp),a0
    d516:	       move.l 24(a0),d0
    d51a:	       move.l d0,-(sp)
    d51c:	       jsr 12346 <getTextFromAnyVar>
    d522:	       addq.l #4,sp
    d524:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    d528:	       moveq #24,d0
    d52a:	       add.l 32(sp),d0
    d52e:	       move.l d0,-(sp)
    d530:	       jsr 126f4 <trimStack>
    d536:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d538:	       movea.l 32(sp),a0
    d53c:	       move.l 24(a0),d0
    d540:	       move.l d0,-(sp)
    d542:	       pea 1 <_start+0x1>
    d546:	       lea 20(sp),a0
    d54a:	       move.l a0,-(sp)
    d54c:	       jsr 11d70 <getValueType>
    d552:	       lea 12(sp),sp
    d556:	       tst.w d0
    d558:	   /-- bne.s d560 <builtIn_pasteString+0x56>
    d55a:	   |   moveq #1,d0
    d55c:	/--|-- bra.w d5e8 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    d560:	|  \-> moveq #24,d0
    d562:	|      add.l 32(sp),d0
    d566:	|      move.l d0,-(sp)
    d568:	|      jsr 126f4 <trimStack>
    d56e:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d570:	|      movea.l 32(sp),a0
    d574:	|      move.l 24(a0),d0
    d578:	|      move.l d0,-(sp)
    d57a:	|      pea 1 <_start+0x1>
    d57e:	|      lea 16(sp),a0
    d582:	|      move.l a0,-(sp)
    d584:	|      jsr 11d70 <getValueType>
    d58a:	|      lea 12(sp),sp
    d58e:	|      tst.w d0
    d590:	|  /-- bne.s d596 <builtIn_pasteString+0x8c>
    d592:	|  |   moveq #1,d0
    d594:	+--|-- bra.s d5e8 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    d596:	|  \-> moveq #24,d0
    d598:	|      add.l 32(sp),d0
    d59c:	|      move.l d0,-(sp)
    d59e:	|      jsr 126f4 <trimStack>
    d5a4:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    d5a6:	|      move.l 8(sp),d0
    d5aa:	|      cmpi.l #65535,d0
    d5b0:	|  /-- bne.s d5d0 <builtIn_pasteString+0xc6>
    d5b2:	|  |   move.l 1904e <winWidth>,d2
    d5b8:	|  |   move.l 20(sp),-(sp)
    d5bc:	|  |   jsr 1274e <stringWidth>
    d5c2:	|  |   addq.l #4,sp
    d5c4:	|  |   move.l d2,d1
    d5c6:	|  |   sub.l d0,d1
    d5c8:	|  |   move.l d1,d0
    d5ca:	|  |   lsr.l #1,d0
    d5cc:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    d5d0:	|  \-> move.l 20(sp),16(sp)
    d5d6:	|      move.l 190fa <SysBase>,d0
    d5dc:	|      movea.l d0,a6
    d5de:	|      movea.l 16(sp),a1
    d5e2:	|      jsr -690(a6)
    return BR_CONTINUE;
    d5e6:	|      moveq #2,d0
}
    d5e8:	\----> move.l (sp)+,d2
    d5ea:	       movea.l (sp)+,a6
    d5ec:	       lea 16(sp),sp
    d5f0:	       rts

0000d5f2 <builtIn_anim>:

builtIn(anim)
{
    d5f2:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    d5f6:	       moveq #1,d0
    d5f8:	       cmp.l 16(sp),d0
    d5fc:	   /-- blt.s d612 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    d5fe:	   |   pea 1619e <custom.c.64ca0e9f+0x14c8>
    d604:	   |   jsr 13db8 <KPrintF>
    d60a:	   |   addq.l #4,sp
		return BR_ERROR;
    d60c:	   |   moveq #1,d0
    d60e:	/--|-- bra.w d6a0 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    d612:	|  \-> moveq #24,d1
    d614:	|      add.l 20(sp),d1
    d618:	|      move.l 16(sp),d0
    d61c:	|      subq.l #1,d0
    d61e:	|      move.l d1,-(sp)
    d620:	|      move.l d0,-(sp)
    d622:	|      jsr 6fda <createPersonaAnim>
    d628:	|      addq.l #8,sp
    d62a:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d62e:	|      movea.l 20(sp),a0
    d632:	|      move.l 24(a0),d0
    d636:	|      move.l d0,-(sp)
    d638:	|      pea 5 <_start+0x5>
    d63c:	|      lea 8(sp),a0
    d640:	|      move.l a0,-(sp)
    d642:	|      jsr 11d70 <getValueType>
    d648:	|      lea 12(sp),sp
    d64c:	|      tst.w d0
    d64e:	|  /-- bne.s d654 <builtIn_anim+0x62>
    d650:	|  |   moveq #1,d0
    d652:	+--|-- bra.s d6a0 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    d654:	|  \-> moveq #24,d0
    d656:	|      add.l 20(sp),d0
    d65a:	|      move.l d0,-(sp)
    d65c:	|      jsr 126f4 <trimStack>
    d662:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    d664:	|      move.l (sp),d0
    d666:	|      move.l d0,-(sp)
    d668:	|      jsr 99c8 <loadBankForAnim>
    d66e:	|      addq.l #4,sp
    d670:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    d674:	|  /-- bne.s d67a <builtIn_anim+0x88>
    d676:	|  |   moveq #1,d0
    d678:	+--|-- bra.s d6a0 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    d67a:	|  \-> move.l 4(sp),-(sp)
    d67e:	|      move.l 12(sp),-(sp)
    d682:	|      jsr 8d7c <setBankFile>
    d688:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    d68a:	|      moveq #28,d0
    d68c:	|      add.l 20(sp),d0
    d690:	|      move.l 8(sp),-(sp)
    d694:	|      move.l d0,-(sp)
    d696:	|      jsr 1261e <newAnimationVariable>
    d69c:	|      addq.l #8,sp
	return BR_CONTINUE;
    d69e:	|      moveq #2,d0
}
    d6a0:	\----> lea 12(sp),sp
    d6a4:	       rts

0000d6a6 <builtIn_costume>:

builtIn(costume)
{
    d6a6:	          lea -32(sp),sp
    d6aa:	          move.l a6,-(sp)
    d6ac:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    d6ae:	          moveq #8,d0
    d6b0:	          move.l d0,32(sp)
    d6b4:	          clr.l 28(sp)
    d6b8:	          move.l 190fa <SysBase>,d0
    d6be:	          movea.l d0,a6
    d6c0:	          move.l 32(sp),d0
    d6c4:	          move.l 28(sp),d1
    d6c8:	          jsr -684(a6)
    d6cc:	          move.l d0,24(sp)
    d6d0:	          move.l 24(sp),d0
    d6d4:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    d6d8:	      /-- bne.s d6e0 <builtIn_costume+0x3a>
    d6da:	      |   moveq #1,d0
    d6dc:	/-----|-- bra.w d7c8 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    d6e0:	|     \-> move.l 44(sp),d0
    d6e4:	|         pea 3 <_start+0x3>
    d6e8:	|         move.l d0,-(sp)
    d6ea:	|         jsr 147f4 <__divsi3>
    d6f0:	|         addq.l #8,sp
    d6f2:	|         movea.l 20(sp),a0
    d6f6:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    d6fa:	|         tst.l 44(sp)
    d6fe:	|     /-- beq.s d714 <builtIn_costume+0x6e>
    d700:	|     |   movea.l 20(sp),a0
    d704:	|     |   move.l 4(a0),d1
    d708:	|     |   move.l d1,d0
    d70a:	|     |   add.l d0,d0
    d70c:	|     |   add.l d1,d0
    d70e:	|     |   cmp.l 44(sp),d0
    d712:	|  /--|-- beq.s d728 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    d714:	|  |  \-> pea 161d8 <custom.c.64ca0e9f+0x1502>
    d71a:	|  |      jsr 13db8 <KPrintF>
    d720:	|  |      addq.l #4,sp
        return BR_ERROR;
    d722:	|  |      moveq #1,d0
    d724:	+--|----- bra.w d7c8 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    d728:	|  \----> move.l 44(sp),d0
    d72c:	|         add.l d0,d0
    d72e:	|         add.l d0,d0
    d730:	|         move.l d0,16(sp)
    d734:	|         clr.l 12(sp)
    d738:	|         move.l 190fa <SysBase>,d0
    d73e:	|         movea.l d0,a6
    d740:	|         move.l 16(sp),d0
    d744:	|         move.l 12(sp),d1
    d748:	|         jsr -684(a6)
    d74c:	|         move.l d0,8(sp)
    d750:	|         move.l 8(sp),d0
    d754:	|         movea.l 20(sp),a0
    d758:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    d75a:	|         movea.l 20(sp),a0
    d75e:	|         move.l (a0),d0
    d760:	|     /-- bne.s d766 <builtIn_costume+0xc0>
    d762:	|     |   moveq #1,d0
    d764:	+-----|-- bra.s d7c8 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    d766:	|     \-> move.l 44(sp),d0
    d76a:	|         subq.l #1,d0
    d76c:	|         move.l d0,36(sp)
    d770:	|     /-- bra.s d7ac <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    d772:	|  /--|-> movea.l 48(sp),a0
    d776:	|  |  |   move.l 24(a0),d0
    d77a:	|  |  |   movea.l 20(sp),a0
    d77e:	|  |  |   movea.l (a0),a0
    d780:	|  |  |   move.l 36(sp),d1
    d784:	|  |  |   add.l d1,d1
    d786:	|  |  |   add.l d1,d1
    d788:	|  |  |   lea (0,a0,d1.l),a2
    d78c:	|  |  |   move.l d0,-(sp)
    d78e:	|  |  |   jsr 12248 <getAnimationFromVar>
    d794:	|  |  |   addq.l #4,sp
    d796:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    d798:	|  |  |   moveq #24,d0
    d79a:	|  |  |   add.l 48(sp),d0
    d79e:	|  |  |   move.l d0,-(sp)
    d7a0:	|  |  |   jsr 126f4 <trimStack>
    d7a6:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    d7a8:	|  |  |   subq.l #1,36(sp)
    d7ac:	|  |  \-> tst.l 36(sp)
    d7b0:	|  \----- bge.s d772 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    d7b2:	|         moveq #28,d0
    d7b4:	|         add.l 48(sp),d0
    d7b8:	|         move.l 20(sp),-(sp)
    d7bc:	|         move.l d0,-(sp)
    d7be:	|         jsr 12640 <newCostumeVariable>
    d7c4:	|         addq.l #8,sp
    return BR_CONTINUE;
    d7c6:	|         moveq #2,d0
}
    d7c8:	\-------> movea.l (sp)+,a2
    d7ca:	          movea.l (sp)+,a6
    d7cc:	          lea 32(sp),sp
    d7d0:	          rts

0000d7d2 <builtIn_launch>:

builtIn(launch)
{
    d7d2:	          lea -20(sp),sp
    d7d6:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    d7d8:	          movea.l 32(sp),a0
    d7dc:	          move.l 24(a0),d0
    d7e0:	          move.l d0,-(sp)
    d7e2:	          jsr 12346 <getTextFromAnyVar>
    d7e8:	          addq.l #4,sp
    d7ea:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    d7ee:	      /-- bne.s d7f6 <builtIn_launch+0x24>
    d7f0:	      |   moveq #1,d0
    d7f2:	/-----|-- bra.w d924 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    d7f6:	|     \-> move.l 20(sp),-(sp)
    d7fa:	|         jsr 2fe <encodeFilename>
    d800:	|         addq.l #4,sp
    d802:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    d806:	|         moveq #24,d0
    d808:	|         add.l 32(sp),d0
    d80c:	|         move.l d0,-(sp)
    d80e:	|         jsr 126f4 <trimStack>
    d814:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    d816:	|         movea.l 20(sp),a0
    d81a:	|         move.b (a0),d0
    d81c:	|         cmpi.b #104,d0
    d820:	|  /----- bne.s d88a <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    d822:	|  |      movea.l 20(sp),a0
    d826:	|  |      addq.l #1,a0
    d828:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    d82a:	|  |      cmpi.b #116,d0
    d82e:	|  +----- bne.s d88a <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    d830:	|  |      movea.l 20(sp),a0
    d834:	|  |      addq.l #2,a0
    d836:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    d838:	|  |      cmpi.b #116,d0
    d83c:	|  +----- bne.s d88a <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    d83e:	|  |      movea.l 20(sp),a0
    d842:	|  |      addq.l #3,a0
    d844:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    d846:	|  |      cmpi.b #112,d0
    d84a:	|  +----- bne.s d88a <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    d84c:	|  |      movea.l 20(sp),a0
    d850:	|  |      addq.l #4,a0
    d852:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    d854:	|  |      cmpi.b #58,d0
    d858:	|  |  /-- beq.s d876 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    d85a:	|  |  |   movea.l 20(sp),a0
    d85e:	|  |  |   addq.l #4,a0
    d860:	|  |  |   move.b (a0),d0
    d862:	|  |  |   cmpi.b #115,d0
    d866:	|  +--|-- bne.s d88a <builtIn_launch+0xb8>
    d868:	|  |  |   movea.l 20(sp),a0
    d86c:	|  |  |   addq.l #5,a0
    d86e:	|  |  |   move.b (a0),d0
    d870:	|  |  |   cmpi.b #58,d0
    d874:	|  +--|-- bne.s d88a <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    d876:	|  |  \-> move.l 20(sp),-(sp)
    d87a:	|  |      jsr b8 <copyString>
    d880:	|  |      addq.l #4,sp
    d882:	|  |      move.l d0,19210 <launchMe>
    d888:	|  |  /-- bra.s d8dc <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    d88a:	|  \--|-> move.l 19062 <gamePath>,d0
    d890:	|     |   pea 16223 <custom.c.64ca0e9f+0x154d>
    d896:	|     |   move.l d0,-(sp)
    d898:	|     |   jsr 1129c <joinStrings>
    d89e:	|     |   addq.l #8,sp
    d8a0:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    d8a4:	|     |   move.l 16(sp),-(sp)
    d8a8:	|     |   move.l 16(sp),-(sp)
    d8ac:	|     |   jsr 1129c <joinStrings>
    d8b2:	|     |   addq.l #8,sp
    d8b4:	|     |   move.l d0,19210 <launchMe>
        FreeVec(newText);
    d8ba:	|     |   move.l 16(sp),8(sp)
    d8c0:	|     |   move.l 190fa <SysBase>,d0
    d8c6:	|     |   movea.l d0,a6
    d8c8:	|     |   movea.l 8(sp),a1
    d8cc:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    d8d0:	|     |   move.l 19210 <launchMe>,d0
    d8d6:	|     +-- bne.s d8dc <builtIn_launch+0x10a>
    d8d8:	|     |   moveq #1,d0
    d8da:	+-----|-- bra.s d924 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    d8dc:	|     \-> move.l 20(sp),4(sp)
    d8e2:	|         move.l 190fa <SysBase>,d0
    d8e8:	|         movea.l d0,a6
    d8ea:	|         movea.l 4(sp),a1
    d8ee:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    d8f2:	|         clr.l -(sp)
    d8f4:	|         jsr 1eb4 <setGraphicsWindow>
    d8fa:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    d8fc:	|         moveq #28,d0
    d8fe:	|         add.l 32(sp),d0
    d902:	|         pea 1 <_start+0x1>
    d906:	|         pea 1 <_start+0x1>
    d90a:	|         move.l d0,-(sp)
    d90c:	|         jsr 12662 <setVariable>
    d912:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    d916:	|         moveq #28,d0
    d918:	|         add.l 32(sp),d0
    d91c:	|         move.l d0,19214 <launchResult>

    return BR_KEEP_AND_PAUSE;
    d922:	|         moveq #0,d0
}
    d924:	\-------> movea.l (sp)+,a6
    d926:	          lea 20(sp),sp
    d92a:	          rts

0000d92c <builtIn_pause>:

builtIn(pause)
{
    d92c:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d92e:	       movea.l 12(sp),a0
    d932:	       move.l 24(a0),d0
    d936:	       move.l d0,-(sp)
    d938:	       pea 1 <_start+0x1>
    d93c:	       move.l sp,d0
    d93e:	       addq.l #8,d0
    d940:	       move.l d0,-(sp)
    d942:	       jsr 11d70 <getValueType>
    d948:	       lea 12(sp),sp
    d94c:	       tst.w d0
    d94e:	   /-- bne.s d954 <builtIn_pause+0x28>
    d950:	   |   moveq #1,d0
    d952:	/--|-- bra.s d982 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    d954:	|  \-> moveq #24,d0
    d956:	|      add.l 12(sp),d0
    d95a:	|      move.l d0,-(sp)
    d95c:	|      jsr 126f4 <trimStack>
    d962:	|      addq.l #4,sp
	if (theTime > 0) {
    d964:	|      move.l (sp),d0
    d966:	|  /-- ble.s d980 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    d968:	|  |   move.l (sp),d0
    d96a:	|  |   subq.l #1,d0
    d96c:	|  |   movea.l 12(sp),a0
    d970:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    d974:	|  |   movea.l 12(sp),a0
    d978:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    d97c:	|  |   moveq #0,d0
    d97e:	+--|-- bra.s d982 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    d980:	|  \-> moveq #2,d0
}
    d982:	\----> addq.l #4,sp
    d984:	       rts

0000d986 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    d986:	jsr 2608 <completeTimers>
	return BR_CONTINUE;
    d98c:	moveq #2,d0
}
    d98e:	rts

0000d990 <builtIn_callEvent>:

builtIn(callEvent)
{
    d990:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d994:	       movea.l 20(sp),a0
    d998:	       move.l 24(a0),d0
    d99c:	       move.l d0,-(sp)
    d99e:	       pea 7 <_start+0x7>
    d9a2:	       lea 8(sp),a0
    d9a6:	       move.l a0,-(sp)
    d9a8:	       jsr 11d70 <getValueType>
    d9ae:	       lea 12(sp),sp
    d9b2:	       tst.w d0
    d9b4:	   /-- bne.s d9bc <builtIn_callEvent+0x2c>
    d9b6:	   |   moveq #1,d0
    d9b8:	/--|-- bra.w da52 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    d9bc:	|  \-> moveq #24,d0
    d9be:	|      add.l 20(sp),d0
    d9c2:	|      move.l d0,-(sp)
    d9c4:	|      jsr 126f4 <trimStack>
    d9ca:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d9cc:	|      movea.l 20(sp),a0
    d9d0:	|      move.l 24(a0),d0
    d9d4:	|      move.l d0,-(sp)
    d9d6:	|      pea 7 <_start+0x7>
    d9da:	|      moveq #12,d0
    d9dc:	|      add.l sp,d0
    d9de:	|      move.l d0,-(sp)
    d9e0:	|      jsr 11d70 <getValueType>
    d9e6:	|      lea 12(sp),sp
    d9ea:	|      tst.w d0
    d9ec:	|  /-- bne.s d9f2 <builtIn_callEvent+0x62>
    d9ee:	|  |   moveq #1,d0
    d9f0:	+--|-- bra.s da52 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    d9f2:	|  \-> moveq #24,d0
    d9f4:	|      add.l 20(sp),d0
    d9f8:	|      move.l d0,-(sp)
    d9fa:	|      jsr 126f4 <trimStack>
    da00:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    da02:	|      move.l (sp),d1
    da04:	|      move.l 4(sp),d0
    da08:	|      move.l d1,-(sp)
    da0a:	|      move.l d0,-(sp)
    da0c:	|      jsr abda <getCombinationFunction>
    da12:	|      addq.l #8,sp
    da14:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    da18:	|  /-- beq.s da38 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    da1a:	|  |   moveq #28,d0
    da1c:	|  |   add.l 20(sp),d0
    da20:	|  |   move.l 8(sp),-(sp)
    da24:	|  |   pea 2 <_start+0x2>
    da28:	|  |   move.l d0,-(sp)
    da2a:	|  |   jsr 12662 <setVariable>
    da30:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    da34:	|  |   moveq #4,d0
    da36:	+--|-- bra.s da52 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    da38:	|  \-> moveq #28,d0
    da3a:	|      add.l 20(sp),d0
    da3e:	|      clr.l -(sp)
    da40:	|      pea 1 <_start+0x1>
    da44:	|      move.l d0,-(sp)
    da46:	|      jsr 12662 <setVariable>
    da4c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    da50:	|      moveq #2,d0
}
    da52:	\----> lea 12(sp),sp
    da56:	       rts

0000da58 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    da58:	move.w #1,19220 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    da60:	moveq #2,d0
}
    da62:	rts

0000da64 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    da64:	moveq #24,d0
    da66:	add.l 8(sp),d0
    da6a:	move.l d0,-(sp)
    da6c:	jsr 126f4 <trimStack>
    da72:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    da74:	pea 16225 <custom.c.64ca0e9f+0x154f>
    da7a:	jsr 13db8 <KPrintF>
    da80:	addq.l #4,sp
	return BR_CONTINUE;
    da82:	moveq #2,d0
}
    da84:	rts

0000da86 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    da86:	pea 16225 <custom.c.64ca0e9f+0x154f>
    da8c:	jsr 13db8 <KPrintF>
    da92:	addq.l #4,sp
	return BR_CONTINUE;
    da94:	moveq #2,d0
}
    da96:	rts

0000da98 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    da98:	pea 16225 <custom.c.64ca0e9f+0x154f>
    da9e:	jsr 13db8 <KPrintF>
    daa4:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    daa6:	moveq #2,d0
}
    daa8:	rts

0000daaa <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    daaa:	pea 16225 <custom.c.64ca0e9f+0x154f>
    dab0:	jsr 13db8 <KPrintF>
    dab6:	addq.l #4,sp
	return BR_CONTINUE;
    dab8:	moveq #2,d0
}
    daba:	rts

0000dabc <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    dabc:	pea 16225 <custom.c.64ca0e9f+0x154f>
    dac2:	jsr 13db8 <KPrintF>
    dac8:	addq.l #4,sp
	return BR_CONTINUE;
    daca:	moveq #2,d0
}
    dacc:	rts

0000dace <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    dace:	pea 16225 <custom.c.64ca0e9f+0x154f>
    dad4:	jsr 13db8 <KPrintF>
    dada:	addq.l #4,sp
	return BR_CONTINUE;
    dadc:	moveq #2,d0
}
    dade:	rts

0000dae0 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    dae0:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dae4:	       movea.l 20(sp),a0
    dae8:	       move.l 24(a0),d0
    daec:	       move.l d0,-(sp)
    daee:	       pea 1 <_start+0x1>
    daf2:	       moveq #16,d0
    daf4:	       add.l sp,d0
    daf6:	       move.l d0,-(sp)
    daf8:	       jsr 11d70 <getValueType>
    dafe:	       lea 12(sp),sp
    db02:	       tst.w d0
    db04:	   /-- bne.s db0c <builtIn_startMusic+0x2c>
    db06:	   |   moveq #1,d0
    db08:	/--|-- bra.w dbac <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    db0c:	|  \-> moveq #24,d0
    db0e:	|      add.l 20(sp),d0
    db12:	|      move.l d0,-(sp)
    db14:	|      jsr 126f4 <trimStack>
    db1a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db1c:	|      movea.l 20(sp),a0
    db20:	|      move.l 24(a0),d0
    db24:	|      move.l d0,-(sp)
    db26:	|      pea 1 <_start+0x1>
    db2a:	|      moveq #12,d0
    db2c:	|      add.l sp,d0
    db2e:	|      move.l d0,-(sp)
    db30:	|      jsr 11d70 <getValueType>
    db36:	|      lea 12(sp),sp
    db3a:	|      tst.w d0
    db3c:	|  /-- bne.s db42 <builtIn_startMusic+0x62>
    db3e:	|  |   moveq #1,d0
    db40:	+--|-- bra.s dbac <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    db42:	|  \-> moveq #24,d0
    db44:	|      add.l 20(sp),d0
    db48:	|      move.l d0,-(sp)
    db4a:	|      jsr 126f4 <trimStack>
    db50:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    db52:	|      movea.l 20(sp),a0
    db56:	|      move.l 24(a0),d0
    db5a:	|      move.l d0,-(sp)
    db5c:	|      pea 5 <_start+0x5>
    db60:	|      lea 8(sp),a0
    db64:	|      move.l a0,-(sp)
    db66:	|      jsr 11d70 <getValueType>
    db6c:	|      lea 12(sp),sp
    db70:	|      tst.w d0
    db72:	|  /-- bne.s db78 <builtIn_startMusic+0x98>
    db74:	|  |   moveq #1,d0
    db76:	+--|-- bra.s dbac <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    db78:	|  \-> moveq #24,d0
    db7a:	|      add.l 20(sp),d0
    db7e:	|      move.l d0,-(sp)
    db80:	|      jsr 126f4 <trimStack>
    db86:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    db88:	|      movea.l 8(sp),a0
    db8c:	|      move.l 4(sp),d1
    db90:	|      move.l (sp),d0
    db92:	|      move.l a0,-(sp)
    db94:	|      move.l d1,-(sp)
    db96:	|      move.l d0,-(sp)
    db98:	|      jsr a7f2 <playMOD>
    db9e:	|      lea 12(sp),sp
    dba2:	|      tst.w d0
    dba4:	|  /-- bne.s dbaa <builtIn_startMusic+0xca>
    dba6:	|  |   moveq #2,d0
    dba8:	+--|-- bra.s dbac <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    dbaa:	|  \-> moveq #2,d0
}
    dbac:	\----> lea 12(sp),sp
    dbb0:	       rts

0000dbb2 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    dbb2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dbb4:	       movea.l 12(sp),a0
    dbb8:	       move.l 24(a0),d0
    dbbc:	       move.l d0,-(sp)
    dbbe:	       pea 1 <_start+0x1>
    dbc2:	       move.l sp,d0
    dbc4:	       addq.l #8,d0
    dbc6:	       move.l d0,-(sp)
    dbc8:	       jsr 11d70 <getValueType>
    dbce:	       lea 12(sp),sp
    dbd2:	       tst.w d0
    dbd4:	   /-- bne.s dbda <builtIn_stopMusic+0x28>
    dbd6:	   |   moveq #1,d0
    dbd8:	/--|-- bra.s dbf8 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    dbda:	|  \-> moveq #24,d0
    dbdc:	|      add.l 12(sp),d0
    dbe0:	|      move.l d0,-(sp)
    dbe2:	|      jsr 126f4 <trimStack>
    dbe8:	|      addq.l #4,sp
	stopMOD (v);
    dbea:	|      move.l (sp),d0
    dbec:	|      move.l d0,-(sp)
    dbee:	|      jsr a88e <stopMOD>
    dbf4:	|      addq.l #4,sp
	return BR_CONTINUE;
    dbf6:	|      moveq #2,d0
}
    dbf8:	\----> addq.l #4,sp
    dbfa:	       rts

0000dbfc <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    dbfc:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dbfe:	       movea.l 16(sp),a0
    dc02:	       move.l 24(a0),d0
    dc06:	       move.l d0,-(sp)
    dc08:	       pea 1 <_start+0x1>
    dc0c:	       move.l sp,d0
    dc0e:	       addq.l #8,d0
    dc10:	       move.l d0,-(sp)
    dc12:	       jsr 11d70 <getValueType>
    dc18:	       lea 12(sp),sp
    dc1c:	       tst.w d0
    dc1e:	   /-- bne.s dc24 <builtIn_setMusicVolume+0x28>
    dc20:	   |   moveq #1,d0
    dc22:	/--|-- bra.s dc7e <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    dc24:	|  \-> moveq #24,d0
    dc26:	|      add.l 16(sp),d0
    dc2a:	|      move.l d0,-(sp)
    dc2c:	|      jsr 126f4 <trimStack>
    dc32:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc34:	|      movea.l 16(sp),a0
    dc38:	|      move.l 24(a0),d0
    dc3c:	|      move.l d0,-(sp)
    dc3e:	|      pea 1 <_start+0x1>
    dc42:	|      moveq #12,d0
    dc44:	|      add.l sp,d0
    dc46:	|      move.l d0,-(sp)
    dc48:	|      jsr 11d70 <getValueType>
    dc4e:	|      lea 12(sp),sp
    dc52:	|      tst.w d0
    dc54:	|  /-- bne.s dc5a <builtIn_setMusicVolume+0x5e>
    dc56:	|  |   moveq #1,d0
    dc58:	+--|-- bra.s dc7e <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    dc5a:	|  \-> moveq #24,d0
    dc5c:	|      add.l 16(sp),d0
    dc60:	|      move.l d0,-(sp)
    dc62:	|      jsr 126f4 <trimStack>
    dc68:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    dc6a:	|      move.l (sp),d1
    dc6c:	|      move.l 4(sp),d0
    dc70:	|      move.l d1,-(sp)
    dc72:	|      move.l d0,-(sp)
    dc74:	|      jsr a874 <setMusicVolume>
    dc7a:	|      addq.l #8,sp
	return BR_CONTINUE;
    dc7c:	|      moveq #2,d0
}
    dc7e:	\----> addq.l #8,sp
    dc80:	       rts

0000dc82 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    dc82:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc84:	       movea.l 12(sp),a0
    dc88:	       move.l 24(a0),d0
    dc8c:	       move.l d0,-(sp)
    dc8e:	       pea 1 <_start+0x1>
    dc92:	       move.l sp,d0
    dc94:	       addq.l #8,d0
    dc96:	       move.l d0,-(sp)
    dc98:	       jsr 11d70 <getValueType>
    dc9e:	       lea 12(sp),sp
    dca2:	       tst.w d0
    dca4:	   /-- bne.s dcaa <builtIn_setDefaultMusicVolume+0x28>
    dca6:	   |   moveq #1,d0
    dca8:	/--|-- bra.s dcc8 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    dcaa:	|  \-> moveq #24,d0
    dcac:	|      add.l 12(sp),d0
    dcb0:	|      move.l d0,-(sp)
    dcb2:	|      jsr 126f4 <trimStack>
    dcb8:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    dcba:	|      move.l (sp),d0
    dcbc:	|      move.l d0,-(sp)
    dcbe:	|      jsr a858 <setDefaultMusicVolume>
    dcc4:	|      addq.l #4,sp
	return BR_CONTINUE;
    dcc6:	|      moveq #2,d0
}
    dcc8:	\----> addq.l #4,sp
    dcca:	       rts

0000dccc <builtIn_playSound>:

builtIn(playSound)
{
    dccc:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    dcce:	       movea.l 12(sp),a0
    dcd2:	       move.l 24(a0),d0
    dcd6:	       move.l d0,-(sp)
    dcd8:	       pea 5 <_start+0x5>
    dcdc:	       move.l sp,d0
    dcde:	       addq.l #8,d0
    dce0:	       move.l d0,-(sp)
    dce2:	       jsr 11d70 <getValueType>
    dce8:	       lea 12(sp),sp
    dcec:	       tst.w d0
    dcee:	   /-- bne.s dcf4 <builtIn_playSound+0x28>
    dcf0:	   |   moveq #1,d0
    dcf2:	/--|-- bra.s dd1c <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    dcf4:	|  \-> moveq #24,d0
    dcf6:	|      add.l 12(sp),d0
    dcfa:	|      move.l d0,-(sp)
    dcfc:	|      jsr 126f4 <trimStack>
    dd02:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    dd04:	|      move.l (sp),d0
    dd06:	|      clr.l -(sp)
    dd08:	|      move.l d0,-(sp)
    dd0a:	|      jsr a87c <startSound>
    dd10:	|      addq.l #8,sp
    dd12:	|      tst.w d0
    dd14:	|  /-- bne.s dd1a <builtIn_playSound+0x4e>
    dd16:	|  |   moveq #2,d0
    dd18:	+--|-- bra.s dd1c <builtIn_playSound+0x50>
	return BR_CONTINUE;
    dd1a:	|  \-> moveq #2,d0
}
    dd1c:	\----> addq.l #4,sp
    dd1e:	       rts

0000dd20 <builtIn_loopSound>:

builtIn(loopSound)
{
    dd20:	             lea -28(sp),sp
    dd24:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    dd26:	             tst.l 36(sp)
    dd2a:	         /-- bgt.s dd40 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    dd2c:	         |   pea 16248 <custom.c.64ca0e9f+0x1572>
    dd32:	         |   jsr 13db8 <KPrintF>
    dd38:	         |   addq.l #4,sp
		return BR_ERROR;
    dd3a:	         |   moveq #1,d0
    dd3c:	/--------|-- bra.w defc <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    dd40:	|        \-> moveq #1,d0
    dd42:	|            cmp.l 36(sp),d0
    dd46:	|     /----- blt.s dda2 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    dd48:	|     |      movea.l 40(sp),a0
    dd4c:	|     |      move.l 24(a0),d0
    dd50:	|     |      move.l d0,-(sp)
    dd52:	|     |      pea 5 <_start+0x5>
    dd56:	|     |      lea 16(sp),a0
    dd5a:	|     |      move.l a0,-(sp)
    dd5c:	|     |      jsr 11d70 <getValueType>
    dd62:	|     |      lea 12(sp),sp
    dd66:	|     |      tst.w d0
    dd68:	|     |  /-- bne.s dd70 <builtIn_loopSound+0x50>
    dd6a:	|     |  |   moveq #1,d0
    dd6c:	+-----|--|-- bra.w defc <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    dd70:	|     |  \-> moveq #24,d0
    dd72:	|     |      add.l 40(sp),d0
    dd76:	|     |      move.l d0,-(sp)
    dd78:	|     |      jsr 126f4 <trimStack>
    dd7e:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    dd80:	|     |      move.l 8(sp),d0
    dd84:	|     |      pea 1 <_start+0x1>
    dd88:	|     |      move.l d0,-(sp)
    dd8a:	|     |      jsr a87c <startSound>
    dd90:	|     |      addq.l #8,sp
    dd92:	|     |      tst.w d0
    dd94:	|     |  /-- bne.s dd9c <builtIn_loopSound+0x7c>
    dd96:	|     |  |   moveq #2,d0
    dd98:	+-----|--|-- bra.w defc <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    dd9c:	|     |  \-> moveq #2,d0
    dd9e:	+-----|----- bra.w defc <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    dda2:	|     \----> moveq #2,d1
    dda4:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    dda8:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    ddac:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    ddb0:	|            movea.l 40(sp),a0
    ddb4:	|            movea.l 24(a0),a0
    ddb8:	|            move.l (a0),d0
    ddba:	|            moveq #5,d1
    ddbc:	|            cmp.l d0,d1
    ddbe:	|  /-------- beq.w de96 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    ddc2:	|  |         movea.l 40(sp),a0
    ddc6:	|  |         move.l 24(a0),d0
    ddca:	|  |         move.l d0,-(sp)
    ddcc:	|  |         pea 1 <_start+0x1>
    ddd0:	|  |         lea 12(sp),a0
    ddd4:	|  |         move.l a0,-(sp)
    ddd6:	|  |         jsr 11d70 <getValueType>
    dddc:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    dde0:	|  |         moveq #24,d0
    dde2:	|  |         add.l 40(sp),d0
    dde6:	|  |         move.l d0,-(sp)
    dde8:	|  |         jsr 126f4 <trimStack>
    ddee:	|  |         addq.l #4,sp
			numParams--;
    ddf0:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    ddf4:	|  +-------- bra.w de96 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    ddf8:	|  |  /----> movea.l 40(sp),a0
    ddfc:	|  |  |      move.l 24(a0),d0
    de00:	|  |  |      move.l d0,-(sp)
    de02:	|  |  |      pea 5 <_start+0x5>
    de06:	|  |  |      lea 16(sp),a0
    de0a:	|  |  |      move.l a0,-(sp)
    de0c:	|  |  |      jsr 11d70 <getValueType>
    de12:	|  |  |      lea 12(sp),sp
    de16:	|  |  |      tst.w d0
    de18:	|  |  |  /-- bne.s de2e <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    de1a:	|  |  |  |   pea 16286 <custom.c.64ca0e9f+0x15b0>
    de20:	|  |  |  |   jsr 13db8 <KPrintF>
    de26:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    de28:	|  |  |  |   moveq #1,d0
    de2a:	+--|--|--|-- bra.w defc <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    de2e:	|  |  |  \-> moveq #20,d0
    de30:	|  |  |      move.l d0,20(sp)
    de34:	|  |  |      clr.l 16(sp)
    de38:	|  |  |      move.l 190fa <SysBase>,d0
    de3e:	|  |  |      movea.l d0,a6
    de40:	|  |  |      move.l 20(sp),d0
    de44:	|  |  |      move.l 16(sp),d1
    de48:	|  |  |      jsr -684(a6)
    de4c:	|  |  |      move.l d0,12(sp)
    de50:	|  |  |      move.l 12(sp),d0
    de54:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    de58:	|  |  |  /-- bne.s de60 <builtIn_loopSound+0x140>
    de5a:	|  |  |  |   moveq #1,d0
    de5c:	+--|--|--|-- bra.w defc <builtIn_loopSound+0x1dc>

			s->next = old;
    de60:	|  |  |  \-> movea.l 28(sp),a0
    de64:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    de6a:	|  |  |      movea.l 28(sp),a0
    de6e:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    de72:	|  |  |      move.l 8(sp),d0
    de76:	|  |  |      movea.l 28(sp),a0
    de7a:	|  |  |      move.l d0,(a0)
			old = s;
    de7c:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    de82:	|  |  |      moveq #24,d0
    de84:	|  |  |      add.l 40(sp),d0
    de88:	|  |  |      move.l d0,-(sp)
    de8a:	|  |  |      jsr 126f4 <trimStack>
    de90:	|  |  |      addq.l #4,sp
			numParams--;
    de92:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    de96:	|  \--|----> tst.l 36(sp)
    de9a:	|     \----- bne.w ddf8 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    de9e:	|        /-- bra.s deaa <builtIn_loopSound+0x18a>
    dea0:	|     /--|-> movea.l 28(sp),a0
    dea4:	|     |  |   move.l 4(a0),28(sp)
    deaa:	|     |  \-> movea.l 28(sp),a0
    deae:	|     |      move.l 4(a0),d0
    deb2:	|     \----- bne.s dea0 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    deb4:	|            move.l 4(sp),d0
    deb8:	|            moveq #1,d1
    deba:	|            cmp.l d0,d1
    debc:	|     /----- bge.s ded4 <builtIn_loopSound+0x1b4>
			s->next = old;
    debe:	|     |      movea.l 28(sp),a0
    dec2:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    dec8:	|     |      movea.l 24(sp),a0
    decc:	|     |      move.l 28(sp),8(a0)
    ded2:	|     |  /-- bra.s dee4 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    ded4:	|     \--|-> move.l 4(sp),d0
    ded8:	|        +-- beq.s dee4 <builtIn_loopSound+0x1c4>
			s->next = s;
    deda:	|        |   movea.l 28(sp),a0
    dede:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    dee4:	|        \-> movea.l 24(sp),a0
    dee8:	|            moveq #-1,d0
    deea:	|            move.l d0,16(a0)
		playSoundList(old);
    deee:	|            move.l 24(sp),-(sp)
    def2:	|            jsr a7f6 <playSoundList>
    def8:	|            addq.l #4,sp
		return BR_CONTINUE;
    defa:	|            moveq #2,d0
	}
}
    defc:	\----------> movea.l (sp)+,a6
    defe:	             lea 28(sp),sp
    df02:	             rts

0000df04 <builtIn_stopSound>:

builtIn(stopSound)
{
    df04:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    df06:	       movea.l 12(sp),a0
    df0a:	       move.l 24(a0),d0
    df0e:	       move.l d0,-(sp)
    df10:	       pea 5 <_start+0x5>
    df14:	       move.l sp,d0
    df16:	       addq.l #8,d0
    df18:	       move.l d0,-(sp)
    df1a:	       jsr 11d70 <getValueType>
    df20:	       lea 12(sp),sp
    df24:	       tst.w d0
    df26:	   /-- bne.s df2c <builtIn_stopSound+0x28>
    df28:	   |   moveq #1,d0
    df2a:	/--|-- bra.s df4a <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    df2c:	|  \-> moveq #24,d0
    df2e:	|      add.l 12(sp),d0
    df32:	|      move.l d0,-(sp)
    df34:	|      jsr 126f4 <trimStack>
    df3a:	|      addq.l #4,sp
	huntKillSound (v);
    df3c:	|      move.l (sp),d0
    df3e:	|      move.l d0,-(sp)
    df40:	|      jsr a7ee <huntKillSound>
    df46:	|      addq.l #4,sp
	return BR_CONTINUE;
    df48:	|      moveq #2,d0
}
    df4a:	\----> addq.l #4,sp
    df4c:	       rts

0000df4e <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    df4e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df50:	       movea.l 12(sp),a0
    df54:	       move.l 24(a0),d0
    df58:	       move.l d0,-(sp)
    df5a:	       pea 1 <_start+0x1>
    df5e:	       move.l sp,d0
    df60:	       addq.l #8,d0
    df62:	       move.l d0,-(sp)
    df64:	       jsr 11d70 <getValueType>
    df6a:	       lea 12(sp),sp
    df6e:	       tst.w d0
    df70:	   /-- bne.s df76 <builtIn_setDefaultSoundVolume+0x28>
    df72:	   |   moveq #1,d0
    df74:	/--|-- bra.s df94 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    df76:	|  \-> moveq #24,d0
    df78:	|      add.l 12(sp),d0
    df7c:	|      move.l d0,-(sp)
    df7e:	|      jsr 126f4 <trimStack>
    df84:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    df86:	|      move.l (sp),d0
    df88:	|      move.l d0,-(sp)
    df8a:	|      jsr a864 <setDefaultSoundVolume>
    df90:	|      addq.l #4,sp
	return BR_CONTINUE;
    df92:	|      moveq #2,d0
}
    df94:	\----> addq.l #4,sp
    df96:	       rts

0000df98 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    df98:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df9a:	       movea.l 16(sp),a0
    df9e:	       move.l 24(a0),d0
    dfa2:	       move.l d0,-(sp)
    dfa4:	       pea 1 <_start+0x1>
    dfa8:	       move.l sp,d0
    dfaa:	       addq.l #8,d0
    dfac:	       move.l d0,-(sp)
    dfae:	       jsr 11d70 <getValueType>
    dfb4:	       lea 12(sp),sp
    dfb8:	       tst.w d0
    dfba:	   /-- bne.s dfc0 <builtIn_setSoundVolume+0x28>
    dfbc:	   |   moveq #1,d0
    dfbe:	/--|-- bra.s e01a <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    dfc0:	|  \-> moveq #24,d0
    dfc2:	|      add.l 16(sp),d0
    dfc6:	|      move.l d0,-(sp)
    dfc8:	|      jsr 126f4 <trimStack>
    dfce:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    dfd0:	|      movea.l 16(sp),a0
    dfd4:	|      move.l 24(a0),d0
    dfd8:	|      move.l d0,-(sp)
    dfda:	|      pea 5 <_start+0x5>
    dfde:	|      moveq #12,d0
    dfe0:	|      add.l sp,d0
    dfe2:	|      move.l d0,-(sp)
    dfe4:	|      jsr 11d70 <getValueType>
    dfea:	|      lea 12(sp),sp
    dfee:	|      tst.w d0
    dff0:	|  /-- bne.s dff6 <builtIn_setSoundVolume+0x5e>
    dff2:	|  |   moveq #1,d0
    dff4:	+--|-- bra.s e01a <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    dff6:	|  \-> moveq #24,d0
    dff8:	|      add.l 16(sp),d0
    dffc:	|      move.l d0,-(sp)
    dffe:	|      jsr 126f4 <trimStack>
    e004:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    e006:	|      move.l (sp),d1
    e008:	|      move.l 4(sp),d0
    e00c:	|      move.l d1,-(sp)
    e00e:	|      move.l d0,-(sp)
    e010:	|      jsr a878 <setSoundVolume>
    e016:	|      addq.l #8,sp
	return BR_CONTINUE;
    e018:	|      moveq #2,d0
}
    e01a:	\----> addq.l #8,sp
    e01c:	       rts

0000e01e <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    e01e:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e022:	       movea.l 20(sp),a0
    e026:	       move.l 24(a0),d0
    e02a:	       move.l d0,-(sp)
    e02c:	       pea 1 <_start+0x1>
    e030:	       moveq #12,d0
    e032:	       add.l sp,d0
    e034:	       move.l d0,-(sp)
    e036:	       jsr 11d70 <getValueType>
    e03c:	       lea 12(sp),sp
    e040:	       tst.w d0
    e042:	   /-- bne.s e04a <builtIn_setSoundLoopPoints+0x2c>
    e044:	   |   moveq #1,d0
    e046:	/--|-- bra.w e0e2 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    e04a:	|  \-> moveq #24,d0
    e04c:	|      add.l 20(sp),d0
    e050:	|      move.l d0,-(sp)
    e052:	|      jsr 126f4 <trimStack>
    e058:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e05a:	|      movea.l 20(sp),a0
    e05e:	|      move.l 24(a0),d0
    e062:	|      move.l d0,-(sp)
    e064:	|      pea 1 <_start+0x1>
    e068:	|      lea 8(sp),a0
    e06c:	|      move.l a0,-(sp)
    e06e:	|      jsr 11d70 <getValueType>
    e074:	|      lea 12(sp),sp
    e078:	|      tst.w d0
    e07a:	|  /-- bne.s e080 <builtIn_setSoundLoopPoints+0x62>
    e07c:	|  |   moveq #1,d0
    e07e:	+--|-- bra.s e0e2 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    e080:	|  \-> moveq #24,d0
    e082:	|      add.l 20(sp),d0
    e086:	|      move.l d0,-(sp)
    e088:	|      jsr 126f4 <trimStack>
    e08e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e090:	|      movea.l 20(sp),a0
    e094:	|      move.l 24(a0),d0
    e098:	|      move.l d0,-(sp)
    e09a:	|      pea 5 <_start+0x5>
    e09e:	|      moveq #16,d0
    e0a0:	|      add.l sp,d0
    e0a2:	|      move.l d0,-(sp)
    e0a4:	|      jsr 11d70 <getValueType>
    e0aa:	|      lea 12(sp),sp
    e0ae:	|      tst.w d0
    e0b0:	|  /-- bne.s e0b6 <builtIn_setSoundLoopPoints+0x98>
    e0b2:	|  |   moveq #1,d0
    e0b4:	+--|-- bra.s e0e2 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    e0b6:	|  \-> moveq #24,d0
    e0b8:	|      add.l 20(sp),d0
    e0bc:	|      move.l d0,-(sp)
    e0be:	|      jsr 126f4 <trimStack>
    e0c4:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    e0c6:	|      movea.l 4(sp),a0
    e0ca:	|      move.l (sp),d1
    e0cc:	|      move.l 8(sp),d0
    e0d0:	|      move.l a0,-(sp)
    e0d2:	|      move.l d1,-(sp)
    e0d4:	|      move.l d0,-(sp)
    e0d6:	|      jsr a870 <setSoundLoop>
    e0dc:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e0e0:	|      moveq #2,d0
}
    e0e2:	\----> lea 12(sp),sp
    e0e6:	       rts

0000e0e8 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    e0e8:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    e0ea:	          movea.l 12(sp),a0
    e0ee:	          movea.l 24(a0),a0
    e0f2:	          move.l (a0),d0
    e0f4:	          moveq #5,d1
    e0f6:	          cmp.l d0,d1
    e0f8:	/-------- bne.s e13c <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    e0fa:	|         movea.l 12(sp),a0
    e0fe:	|         move.l 24(a0),d0
    e102:	|         move.l d0,-(sp)
    e104:	|         pea 5 <_start+0x5>
    e108:	|         move.l sp,d0
    e10a:	|         addq.l #8,d0
    e10c:	|         move.l d0,-(sp)
    e10e:	|         jsr 11d70 <getValueType>
    e114:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    e118:	|         moveq #24,d0
    e11a:	|         add.l 12(sp),d0
    e11e:	|         move.l d0,-(sp)
    e120:	|         jsr 126f4 <trimStack>
    e126:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    e128:	|         move.l (sp),d0
    e12a:	|         move.l d0,-(sp)
    e12c:	|         jsr 13562 <setFloor>
    e132:	|         addq.l #4,sp
    e134:	|         tst.w d0
    e136:	|  /----- bne.s e152 <builtIn_setFloor+0x6a>
    e138:	|  |      moveq #1,d0
    e13a:	|  |  /-- bra.s e154 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    e13c:	\--|--|-> moveq #24,d0
    e13e:	   |  |   add.l 12(sp),d0
    e142:	   |  |   move.l d0,-(sp)
    e144:	   |  |   jsr 126f4 <trimStack>
    e14a:	   |  |   addq.l #4,sp
		setFloorNull ();
    e14c:	   |  |   jsr 13cdc <setFloorNull>
	}
	return BR_CONTINUE;
    e152:	   \--|-> moveq #2,d0
}
    e154:	      \-> addq.l #4,sp
    e156:	          rts

0000e158 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    e158:	jsr 12dfa <drawFloor>
	return BR_CONTINUE;
    e15e:	moveq #2,d0
}
    e160:	rts

0000e162 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    e162:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    e164:	          movea.l 12(sp),a0
    e168:	          movea.l 24(a0),a0
    e16c:	          move.l (a0),d0
    e16e:	          moveq #5,d1
    e170:	          cmp.l d0,d1
    e172:	/-------- bne.s e1b6 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    e174:	|         movea.l 12(sp),a0
    e178:	|         move.l 24(a0),d0
    e17c:	|         move.l d0,-(sp)
    e17e:	|         pea 5 <_start+0x5>
    e182:	|         move.l sp,d0
    e184:	|         addq.l #8,d0
    e186:	|         move.l d0,-(sp)
    e188:	|         jsr 11d70 <getValueType>
    e18e:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    e192:	|         moveq #24,d0
    e194:	|         add.l 12(sp),d0
    e198:	|         move.l d0,-(sp)
    e19a:	|         jsr 126f4 <trimStack>
    e1a0:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    e1a2:	|         move.l (sp),d0
    e1a4:	|         move.l d0,-(sp)
    e1a6:	|         jsr 6264 <setZBuffer>
    e1ac:	|         addq.l #4,sp
    e1ae:	|         tst.w d0
    e1b0:	|  /----- bne.s e1cc <builtIn_setZBuffer+0x6a>
    e1b2:	|  |      moveq #1,d0
    e1b4:	|  |  /-- bra.s e1ce <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    e1b6:	\--|--|-> moveq #24,d0
    e1b8:	   |  |   add.l 12(sp),d0
    e1bc:	   |  |   move.l d0,-(sp)
    e1be:	   |  |   jsr 126f4 <trimStack>
    e1c4:	   |  |   addq.l #4,sp
		killZBuffer ();
    e1c6:	   |  |   jsr 620e <killZBuffer>
	}
	return BR_CONTINUE;
    e1cc:	   \--|-> moveq #2,d0
}
    e1ce:	      \-> addq.l #4,sp
    e1d0:	          rts

0000e1d2 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    e1d2:	pea 162bd <custom.c.64ca0e9f+0x15e7>
    e1d8:	jsr 13db8 <KPrintF>
    e1de:	addq.l #4,sp
	return BR_CONTINUE;
    e1e0:	moveq #2,d0
}
    e1e2:	rts

0000e1e4 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e1e4:	          movea.l 8(sp),a0
    e1e8:	          move.l 24(a0),d0
    e1ec:	          move.l d0,-(sp)
    e1ee:	          pea 1 <_start+0x1>
    e1f2:	          pea 1921c <speechMode>
    e1f8:	          jsr 11d70 <getValueType>
    e1fe:	          lea 12(sp),sp
    e202:	          tst.w d0
    e204:	      /-- bne.s e20a <builtIn_setSpeechMode+0x26>
    e206:	      |   moveq #1,d0
    e208:	/-----|-- bra.s e242 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    e20a:	|     \-> moveq #24,d0
    e20c:	|         add.l 8(sp),d0
    e210:	|         move.l d0,-(sp)
    e212:	|         jsr 126f4 <trimStack>
    e218:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    e21a:	|         move.l 1921c <speechMode>,d0
    e220:	|     /-- bmi.s e22e <builtIn_setSpeechMode+0x4a>
    e222:	|     |   move.l 1921c <speechMode>,d0
    e228:	|     |   moveq #2,d1
    e22a:	|     |   cmp.l d0,d1
    e22c:	|  /--|-- bge.s e240 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    e22e:	|  |  \-> pea 162d6 <custom.c.64ca0e9f+0x1600>
    e234:	|  |      jsr 13db8 <KPrintF>
    e23a:	|  |      addq.l #4,sp
		return BR_ERROR;
    e23c:	|  |      moveq #1,d0
    e23e:	+--|----- bra.s e242 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    e240:	|  \----> moveq #2,d0
}
    e242:	\-------> rts

0000e244 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    e244:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    e246:	       jsr 5a16 <isThereAnySpeechGoingOn>
    e24c:	       move.l d0,(sp)
	if (i == -1) {
    e24e:	       moveq #-1,d0
    e250:	       cmp.l (sp),d0
    e252:	/----- bne.s e26e <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    e254:	|      moveq #28,d0
    e256:	|      add.l 12(sp),d0
    e25a:	|      clr.l -(sp)
    e25c:	|      pea 1 <_start+0x1>
    e260:	|      move.l d0,-(sp)
    e262:	|      jsr 12662 <setVariable>
    e268:	|      lea 12(sp),sp
    e26c:	|  /-- bra.s e286 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    e26e:	\--|-> moveq #28,d0
    e270:	   |   add.l 12(sp),d0
    e274:	   |   move.l (sp),-(sp)
    e276:	   |   pea 7 <_start+0x7>
    e27a:	   |   move.l d0,-(sp)
    e27c:	   |   jsr 12662 <setVariable>
    e282:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e286:	   \-> moveq #2,d0
}
    e288:	       addq.l #4,sp
    e28a:	       rts

0000e28c <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    e28c:	jsr 3d46 <killSpeechTimers>
	return BR_CONTINUE;
    e292:	moveq #2,d0
}
    e294:	rts

0000e296 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    e296:	       move.l 19256 <overRegion>,d0
    e29c:	/----- beq.s e2c6 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    e29e:	|      movea.l 19256 <overRegion>,a0
    e2a4:	|      movea.l 28(a0),a0
    e2a8:	|      move.l 4(a0),d1
    e2ac:	|      moveq #28,d0
    e2ae:	|      add.l 8(sp),d0
    e2b2:	|      move.l d1,-(sp)
    e2b4:	|      pea 7 <_start+0x7>
    e2b8:	|      move.l d0,-(sp)
    e2ba:	|      jsr 12662 <setVariable>
    e2c0:	|      lea 12(sp),sp
    e2c4:	|  /-- bra.s e2de <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    e2c6:	\--|-> moveq #28,d0
    e2c8:	   |   add.l 8(sp),d0
    e2cc:	   |   clr.l -(sp)
    e2ce:	   |   pea 1 <_start+0x1>
    e2d2:	   |   move.l d0,-(sp)
    e2d4:	   |   jsr 12662 <setVariable>
    e2da:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    e2de:	   \-> moveq #2,d0
}
    e2e0:	       rts

0000e2e2 <builtIn_rename>:

builtIn(rename)
{
    e2e2:	       lea -16(sp),sp
    e2e6:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    e2e8:	       movea.l 28(sp),a0
    e2ec:	       move.l 24(a0),d0
    e2f0:	       move.l d0,-(sp)
    e2f2:	       jsr 12346 <getTextFromAnyVar>
    e2f8:	       addq.l #4,sp
    e2fa:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    e2fe:	   /-- bne.s e304 <builtIn_rename+0x22>
    e300:	   |   moveq #1,d0
    e302:	/--|-- bra.s e37e <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    e304:	|  \-> moveq #24,d0
    e306:	|      add.l 28(sp),d0
    e30a:	|      move.l d0,-(sp)
    e30c:	|      jsr 126f4 <trimStack>
    e312:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    e314:	|      movea.l 28(sp),a0
    e318:	|      move.l 24(a0),d0
    e31c:	|      move.l d0,-(sp)
    e31e:	|      pea 7 <_start+0x7>
    e322:	|      lea 12(sp),a0
    e326:	|      move.l a0,-(sp)
    e328:	|      jsr 11d70 <getValueType>
    e32e:	|      lea 12(sp),sp
    e332:	|      tst.w d0
    e334:	|  /-- bne.s e33a <builtIn_rename+0x58>
    e336:	|  |   moveq #1,d0
    e338:	+--|-- bra.s e37e <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    e33a:	|  \-> moveq #24,d0
    e33c:	|      add.l 28(sp),d0
    e340:	|      move.l d0,-(sp)
    e342:	|      jsr 126f4 <trimStack>
    e348:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    e34a:	|      move.l 4(sp),d0
    e34e:	|      move.l d0,-(sp)
    e350:	|      jsr aba6 <findObjectType>
    e356:	|      addq.l #4,sp
    e358:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    e35c:	|      movea.l 12(sp),a0
    e360:	|      move.l (a0),8(sp)
    e364:	|      move.l 190fa <SysBase>,d0
    e36a:	|      movea.l d0,a6
    e36c:	|      movea.l 8(sp),a1
    e370:	|      jsr -690(a6)
	o->screenName = newText;
    e374:	|      movea.l 12(sp),a0
    e378:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    e37c:	|      moveq #2,d0
}
    e37e:	\----> movea.l (sp)+,a6
    e380:	       lea 16(sp),sp
    e384:	       rts

0000e386 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    e386:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e38a:	          movea.l 20(sp),a0
    e38e:	          move.l 24(a0),d0
    e392:	          move.l d0,-(sp)
    e394:	          pea 7 <_start+0x7>
    e398:	          lea 8(sp),a0
    e39c:	          move.l a0,-(sp)
    e39e:	          jsr 11d70 <getValueType>
    e3a4:	          lea 12(sp),sp
    e3a8:	          tst.w d0
    e3aa:	      /-- bne.s e3b2 <builtIn_getObjectX+0x2c>
    e3ac:	      |   moveq #1,d0
    e3ae:	/-----|-- bra.w e44e <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    e3b2:	|     \-> moveq #24,d0
    e3b4:	|         add.l 20(sp),d0
    e3b8:	|         move.l d0,-(sp)
    e3ba:	|         jsr 126f4 <trimStack>
    e3c0:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    e3c2:	|         move.l (sp),d0
    e3c4:	|         move.l d0,-(sp)
    e3c6:	|         jsr 7e5a <findPerson>
    e3cc:	|         addq.l #4,sp
    e3ce:	|         move.l d0,8(sp)
	if (pers) {
    e3d2:	|     /-- beq.s e400 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    e3d4:	|     |   movea.l 8(sp),a0
    e3d8:	|     |   move.l (a0),d0
    e3da:	|     |   move.l d0,-(sp)
    e3dc:	|     |   jsr 1418c <__fixsfsi>
    e3e2:	|     |   addq.l #4,sp
    e3e4:	|     |   move.l d0,d1
    e3e6:	|     |   moveq #28,d0
    e3e8:	|     |   add.l 20(sp),d0
    e3ec:	|     |   move.l d1,-(sp)
    e3ee:	|     |   pea 1 <_start+0x1>
    e3f2:	|     |   move.l d0,-(sp)
    e3f4:	|     |   jsr 12662 <setVariable>
    e3fa:	|     |   lea 12(sp),sp
    e3fe:	|  /--|-- bra.s e44c <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    e400:	|  |  \-> move.l (sp),d0
    e402:	|  |      move.l d0,-(sp)
    e404:	|  |      jsr 1283a <getRegionForObject>
    e40a:	|  |      addq.l #4,sp
    e40c:	|  |      move.l d0,4(sp)
		if (la) {
    e410:	|  |  /-- beq.s e434 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    e412:	|  |  |   movea.l 4(sp),a0
    e416:	|  |  |   move.l 16(a0),d1
    e41a:	|  |  |   moveq #28,d0
    e41c:	|  |  |   add.l 20(sp),d0
    e420:	|  |  |   move.l d1,-(sp)
    e422:	|  |  |   pea 1 <_start+0x1>
    e426:	|  |  |   move.l d0,-(sp)
    e428:	|  |  |   jsr 12662 <setVariable>
    e42e:	|  |  |   lea 12(sp),sp
    e432:	|  +--|-- bra.s e44c <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    e434:	|  |  \-> moveq #28,d0
    e436:	|  |      add.l 20(sp),d0
    e43a:	|  |      clr.l -(sp)
    e43c:	|  |      pea 1 <_start+0x1>
    e440:	|  |      move.l d0,-(sp)
    e442:	|  |      jsr 12662 <setVariable>
    e448:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    e44c:	|  \----> moveq #2,d0
}
    e44e:	\-------> lea 12(sp),sp
    e452:	          rts

0000e454 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    e454:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e458:	          movea.l 20(sp),a0
    e45c:	          move.l 24(a0),d0
    e460:	          move.l d0,-(sp)
    e462:	          pea 7 <_start+0x7>
    e466:	          lea 8(sp),a0
    e46a:	          move.l a0,-(sp)
    e46c:	          jsr 11d70 <getValueType>
    e472:	          lea 12(sp),sp
    e476:	          tst.w d0
    e478:	      /-- bne.s e480 <builtIn_getObjectY+0x2c>
    e47a:	      |   moveq #1,d0
    e47c:	/-----|-- bra.w e51e <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    e480:	|     \-> moveq #24,d0
    e482:	|         add.l 20(sp),d0
    e486:	|         move.l d0,-(sp)
    e488:	|         jsr 126f4 <trimStack>
    e48e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    e490:	|         move.l (sp),d0
    e492:	|         move.l d0,-(sp)
    e494:	|         jsr 7e5a <findPerson>
    e49a:	|         addq.l #4,sp
    e49c:	|         move.l d0,8(sp)
	if (pers) {
    e4a0:	|     /-- beq.s e4d0 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    e4a2:	|     |   movea.l 8(sp),a0
    e4a6:	|     |   move.l 4(a0),d0
    e4aa:	|     |   move.l d0,-(sp)
    e4ac:	|     |   jsr 1418c <__fixsfsi>
    e4b2:	|     |   addq.l #4,sp
    e4b4:	|     |   move.l d0,d1
    e4b6:	|     |   moveq #28,d0
    e4b8:	|     |   add.l 20(sp),d0
    e4bc:	|     |   move.l d1,-(sp)
    e4be:	|     |   pea 1 <_start+0x1>
    e4c2:	|     |   move.l d0,-(sp)
    e4c4:	|     |   jsr 12662 <setVariable>
    e4ca:	|     |   lea 12(sp),sp
    e4ce:	|  /--|-- bra.s e51c <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    e4d0:	|  |  \-> move.l (sp),d0
    e4d2:	|  |      move.l d0,-(sp)
    e4d4:	|  |      jsr 1283a <getRegionForObject>
    e4da:	|  |      addq.l #4,sp
    e4dc:	|  |      move.l d0,4(sp)
		if (la) {
    e4e0:	|  |  /-- beq.s e504 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    e4e2:	|  |  |   movea.l 4(sp),a0
    e4e6:	|  |  |   move.l 20(a0),d1
    e4ea:	|  |  |   moveq #28,d0
    e4ec:	|  |  |   add.l 20(sp),d0
    e4f0:	|  |  |   move.l d1,-(sp)
    e4f2:	|  |  |   pea 1 <_start+0x1>
    e4f6:	|  |  |   move.l d0,-(sp)
    e4f8:	|  |  |   jsr 12662 <setVariable>
    e4fe:	|  |  |   lea 12(sp),sp
    e502:	|  +--|-- bra.s e51c <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    e504:	|  |  \-> moveq #28,d0
    e506:	|  |      add.l 20(sp),d0
    e50a:	|  |      clr.l -(sp)
    e50c:	|  |      pea 1 <_start+0x1>
    e510:	|  |      move.l d0,-(sp)
    e512:	|  |      jsr 12662 <setVariable>
    e518:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    e51c:	|  \----> moveq #2,d0
}
    e51e:	\-------> lea 12(sp),sp
    e522:	          rts

0000e524 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    e524:	       lea -32(sp),sp
    e528:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e52c:	       movea.l 56(sp),a0
    e530:	       move.l 24(a0),d0
    e534:	       move.l d0,-(sp)
    e536:	       pea 1 <_start+0x1>
    e53a:	       lea 28(sp),a0
    e53e:	       move.l a0,-(sp)
    e540:	       jsr 11d70 <getValueType>
    e546:	       lea 12(sp),sp
    e54a:	       tst.w d0
    e54c:	   /-- bne.s e554 <builtIn_addScreenRegion+0x30>
    e54e:	   |   moveq #1,d0
    e550:	/--|-- bra.w e72e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e554:	|  \-> moveq #24,d0
    e556:	|      add.l 56(sp),d0
    e55a:	|      move.l d0,-(sp)
    e55c:	|      jsr 126f4 <trimStack>
    e562:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e564:	|      movea.l 56(sp),a0
    e568:	|      move.l 24(a0),d0
    e56c:	|      move.l d0,-(sp)
    e56e:	|      pea 1 <_start+0x1>
    e572:	|      moveq #48,d0
    e574:	|      add.l sp,d0
    e576:	|      move.l d0,-(sp)
    e578:	|      jsr 11d70 <getValueType>
    e57e:	|      lea 12(sp),sp
    e582:	|      tst.w d0
    e584:	|  /-- bne.s e58c <builtIn_addScreenRegion+0x68>
    e586:	|  |   moveq #1,d0
    e588:	+--|-- bra.w e72e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e58c:	|  \-> moveq #24,d0
    e58e:	|      add.l 56(sp),d0
    e592:	|      move.l d0,-(sp)
    e594:	|      jsr 126f4 <trimStack>
    e59a:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e59c:	|      movea.l 56(sp),a0
    e5a0:	|      move.l 24(a0),d0
    e5a4:	|      move.l d0,-(sp)
    e5a6:	|      pea 1 <_start+0x1>
    e5aa:	|      moveq #52,d0
    e5ac:	|      add.l sp,d0
    e5ae:	|      move.l d0,-(sp)
    e5b0:	|      jsr 11d70 <getValueType>
    e5b6:	|      lea 12(sp),sp
    e5ba:	|      tst.w d0
    e5bc:	|  /-- bne.s e5c4 <builtIn_addScreenRegion+0xa0>
    e5be:	|  |   moveq #1,d0
    e5c0:	+--|-- bra.w e72e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e5c4:	|  \-> moveq #24,d0
    e5c6:	|      add.l 56(sp),d0
    e5ca:	|      move.l d0,-(sp)
    e5cc:	|      jsr 126f4 <trimStack>
    e5d2:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e5d4:	|      movea.l 56(sp),a0
    e5d8:	|      move.l 24(a0),d0
    e5dc:	|      move.l d0,-(sp)
    e5de:	|      pea 1 <_start+0x1>
    e5e2:	|      lea 32(sp),a0
    e5e6:	|      move.l a0,-(sp)
    e5e8:	|      jsr 11d70 <getValueType>
    e5ee:	|      lea 12(sp),sp
    e5f2:	|      tst.w d0
    e5f4:	|  /-- bne.s e5fc <builtIn_addScreenRegion+0xd8>
    e5f6:	|  |   moveq #1,d0
    e5f8:	+--|-- bra.w e72e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e5fc:	|  \-> moveq #24,d0
    e5fe:	|      add.l 56(sp),d0
    e602:	|      move.l d0,-(sp)
    e604:	|      jsr 126f4 <trimStack>
    e60a:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e60c:	|      movea.l 56(sp),a0
    e610:	|      move.l 24(a0),d0
    e614:	|      move.l d0,-(sp)
    e616:	|      pea 1 <_start+0x1>
    e61a:	|      lea 36(sp),a0
    e61e:	|      move.l a0,-(sp)
    e620:	|      jsr 11d70 <getValueType>
    e626:	|      lea 12(sp),sp
    e62a:	|      tst.w d0
    e62c:	|  /-- bne.s e634 <builtIn_addScreenRegion+0x110>
    e62e:	|  |   moveq #1,d0
    e630:	+--|-- bra.w e72e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e634:	|  \-> moveq #24,d0
    e636:	|      add.l 56(sp),d0
    e63a:	|      move.l d0,-(sp)
    e63c:	|      jsr 126f4 <trimStack>
    e642:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e644:	|      movea.l 56(sp),a0
    e648:	|      move.l 24(a0),d0
    e64c:	|      move.l d0,-(sp)
    e64e:	|      pea 1 <_start+0x1>
    e652:	|      lea 40(sp),a0
    e656:	|      move.l a0,-(sp)
    e658:	|      jsr 11d70 <getValueType>
    e65e:	|      lea 12(sp),sp
    e662:	|      tst.w d0
    e664:	|  /-- bne.s e66c <builtIn_addScreenRegion+0x148>
    e666:	|  |   moveq #1,d0
    e668:	+--|-- bra.w e72e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e66c:	|  \-> moveq #24,d0
    e66e:	|      add.l 56(sp),d0
    e672:	|      move.l d0,-(sp)
    e674:	|      jsr 126f4 <trimStack>
    e67a:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e67c:	|      movea.l 56(sp),a0
    e680:	|      move.l 24(a0),d0
    e684:	|      move.l d0,-(sp)
    e686:	|      pea 1 <_start+0x1>
    e68a:	|      lea 44(sp),a0
    e68e:	|      move.l a0,-(sp)
    e690:	|      jsr 11d70 <getValueType>
    e696:	|      lea 12(sp),sp
    e69a:	|      tst.w d0
    e69c:	|  /-- bne.s e6a4 <builtIn_addScreenRegion+0x180>
    e69e:	|  |   moveq #1,d0
    e6a0:	+--|-- bra.w e72e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e6a4:	|  \-> moveq #24,d0
    e6a6:	|      add.l 56(sp),d0
    e6aa:	|      move.l d0,-(sp)
    e6ac:	|      jsr 126f4 <trimStack>
    e6b2:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e6b4:	|      movea.l 56(sp),a0
    e6b8:	|      move.l 24(a0),d0
    e6bc:	|      move.l d0,-(sp)
    e6be:	|      pea 7 <_start+0x7>
    e6c2:	|      lea 24(sp),a0
    e6c6:	|      move.l a0,-(sp)
    e6c8:	|      jsr 11d70 <getValueType>
    e6ce:	|      lea 12(sp),sp
    e6d2:	|      tst.w d0
    e6d4:	|  /-- bne.s e6da <builtIn_addScreenRegion+0x1b6>
    e6d6:	|  |   moveq #1,d0
    e6d8:	+--|-- bra.s e72e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    e6da:	|  \-> moveq #24,d0
    e6dc:	|      add.l 56(sp),d0
    e6e0:	|      move.l d0,-(sp)
    e6e2:	|      jsr 126f4 <trimStack>
    e6e8:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    e6ea:	|      move.l 16(sp),d5
    e6ee:	|      move.l 20(sp),d4
    e6f2:	|      move.l 40(sp),d3
    e6f6:	|      move.l 44(sp),d2
    e6fa:	|      movea.l 24(sp),a1
    e6fe:	|      movea.l 28(sp),a0
    e702:	|      move.l 32(sp),d1
    e706:	|      move.l 36(sp),d0
    e70a:	|      move.l d5,-(sp)
    e70c:	|      move.l d4,-(sp)
    e70e:	|      move.l d3,-(sp)
    e710:	|      move.l d2,-(sp)
    e712:	|      move.l a1,-(sp)
    e714:	|      move.l a0,-(sp)
    e716:	|      move.l d1,-(sp)
    e718:	|      move.l d0,-(sp)
    e71a:	|      jsr 1277a <addScreenRegion>
    e720:	|      lea 32(sp),sp
    e724:	|      tst.w d0
    e726:	|  /-- beq.s e72c <builtIn_addScreenRegion+0x208>
    e728:	|  |   moveq #2,d0
    e72a:	+--|-- bra.s e72e <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    e72c:	|  \-> moveq #1,d0

}
    e72e:	\----> movem.l (sp)+,d2-d5
    e732:	       lea 32(sp),sp
    e736:	       rts

0000e738 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    e738:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e73a:	       movea.l 12(sp),a0
    e73e:	       move.l 24(a0),d0
    e742:	       move.l d0,-(sp)
    e744:	       pea 7 <_start+0x7>
    e748:	       move.l sp,d0
    e74a:	       addq.l #8,d0
    e74c:	       move.l d0,-(sp)
    e74e:	       jsr 11d70 <getValueType>
    e754:	       lea 12(sp),sp
    e758:	       tst.w d0
    e75a:	   /-- bne.s e760 <builtIn_removeScreenRegion+0x28>
    e75c:	   |   moveq #1,d0
    e75e:	/--|-- bra.s e77e <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    e760:	|  \-> moveq #24,d0
    e762:	|      add.l 12(sp),d0
    e766:	|      move.l d0,-(sp)
    e768:	|      jsr 126f4 <trimStack>
    e76e:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    e770:	|      move.l (sp),d0
    e772:	|      move.l d0,-(sp)
    e774:	|      jsr 129e2 <removeScreenRegion>
    e77a:	|      addq.l #4,sp
	return BR_CONTINUE;
    e77c:	|      moveq #2,d0
}
    e77e:	\----> addq.l #4,sp
    e780:	       rts

0000e782 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    e782:	jsr 12b66 <showBoxes>
	return BR_CONTINUE;
    e788:	moveq #2,d0
}
    e78a:	rts

0000e78c <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    e78c:	jsr 12868 <killAllRegions>
	return BR_CONTINUE;
    e792:	moveq #2,d0
}
    e794:	rts

0000e796 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    e796:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    e79a:	       movea.l 24(sp),a0
    e79e:	       move.l 24(a0),d0
    e7a2:	       move.l d0,-(sp)
    e7a4:	       jsr 11a1c <getCostumeFromVar>
    e7aa:	       addq.l #4,sp
    e7ac:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    e7b0:	   /-- bne.s e7b8 <builtIn_addCharacter+0x22>
    e7b2:	   |   moveq #1,d0
    e7b4:	/--|-- bra.w e894 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    e7b8:	|  \-> moveq #24,d0
    e7ba:	|      add.l 24(sp),d0
    e7be:	|      move.l d0,-(sp)
    e7c0:	|      jsr 126f4 <trimStack>
    e7c6:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e7c8:	|      movea.l 24(sp),a0
    e7cc:	|      move.l 24(a0),d0
    e7d0:	|      move.l d0,-(sp)
    e7d2:	|      pea 1 <_start+0x1>
    e7d6:	|      lea 12(sp),a0
    e7da:	|      move.l a0,-(sp)
    e7dc:	|      jsr 11d70 <getValueType>
    e7e2:	|      lea 12(sp),sp
    e7e6:	|      tst.w d0
    e7e8:	|  /-- bne.s e7f0 <builtIn_addCharacter+0x5a>
    e7ea:	|  |   moveq #1,d0
    e7ec:	+--|-- bra.w e894 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    e7f0:	|  \-> moveq #24,d0
    e7f2:	|      add.l 24(sp),d0
    e7f6:	|      move.l d0,-(sp)
    e7f8:	|      jsr 126f4 <trimStack>
    e7fe:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e800:	|      movea.l 24(sp),a0
    e804:	|      move.l 24(a0),d0
    e808:	|      move.l d0,-(sp)
    e80a:	|      pea 1 <_start+0x1>
    e80e:	|      moveq #16,d0
    e810:	|      add.l sp,d0
    e812:	|      move.l d0,-(sp)
    e814:	|      jsr 11d70 <getValueType>
    e81a:	|      lea 12(sp),sp
    e81e:	|      tst.w d0
    e820:	|  /-- bne.s e826 <builtIn_addCharacter+0x90>
    e822:	|  |   moveq #1,d0
    e824:	+--|-- bra.s e894 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    e826:	|  \-> moveq #24,d0
    e828:	|      add.l 24(sp),d0
    e82c:	|      move.l d0,-(sp)
    e82e:	|      jsr 126f4 <trimStack>
    e834:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e836:	|      movea.l 24(sp),a0
    e83a:	|      move.l 24(a0),d0
    e83e:	|      move.l d0,-(sp)
    e840:	|      pea 7 <_start+0x7>
    e844:	|      lea 8(sp),a0
    e848:	|      move.l a0,-(sp)
    e84a:	|      jsr 11d70 <getValueType>
    e850:	|      lea 12(sp),sp
    e854:	|      tst.w d0
    e856:	|  /-- bne.s e85c <builtIn_addCharacter+0xc6>
    e858:	|  |   moveq #1,d0
    e85a:	+--|-- bra.s e894 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    e85c:	|  \-> moveq #24,d0
    e85e:	|      add.l 24(sp),d0
    e862:	|      move.l d0,-(sp)
    e864:	|      jsr 126f4 <trimStack>
    e86a:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    e86c:	|      movea.l (sp),a0
    e86e:	|      move.l 4(sp),d1
    e872:	|      move.l 8(sp),d0
    e876:	|      move.l 12(sp),-(sp)
    e87a:	|      move.l a0,-(sp)
    e87c:	|      move.l d1,-(sp)
    e87e:	|      move.l d0,-(sp)
    e880:	|      jsr 6b2a <addPerson>
    e886:	|      lea 16(sp),sp
    e88a:	|      tst.w d0
    e88c:	|  /-- beq.s e892 <builtIn_addCharacter+0xfc>
    e88e:	|  |   moveq #2,d0
    e890:	+--|-- bra.s e894 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    e892:	|  \-> moveq #1,d0
}
    e894:	\----> lea 16(sp),sp
    e898:	       rts

0000e89a <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    e89a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e89c:	       movea.l 12(sp),a0
    e8a0:	       move.l 24(a0),d0
    e8a4:	       move.l d0,-(sp)
    e8a6:	       pea 7 <_start+0x7>
    e8aa:	       move.l sp,d0
    e8ac:	       addq.l #8,d0
    e8ae:	       move.l d0,-(sp)
    e8b0:	       jsr 11d70 <getValueType>
    e8b6:	       lea 12(sp),sp
    e8ba:	       tst.w d0
    e8bc:	   /-- bne.s e8c2 <builtIn_hideCharacter+0x28>
    e8be:	   |   moveq #1,d0
    e8c0:	/--|-- bra.s e8e2 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    e8c2:	|  \-> moveq #24,d0
    e8c4:	|      add.l 12(sp),d0
    e8c8:	|      move.l d0,-(sp)
    e8ca:	|      jsr 126f4 <trimStack>
    e8d0:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    e8d2:	|      move.l (sp),d0
    e8d4:	|      move.l d0,-(sp)
    e8d6:	|      clr.l -(sp)
    e8d8:	|      jsr 944a <setShown>
    e8de:	|      addq.l #8,sp
	return BR_CONTINUE;
    e8e0:	|      moveq #2,d0
}
    e8e2:	\----> addq.l #4,sp
    e8e4:	       rts

0000e8e6 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    e8e6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e8e8:	       movea.l 12(sp),a0
    e8ec:	       move.l 24(a0),d0
    e8f0:	       move.l d0,-(sp)
    e8f2:	       pea 7 <_start+0x7>
    e8f6:	       move.l sp,d0
    e8f8:	       addq.l #8,d0
    e8fa:	       move.l d0,-(sp)
    e8fc:	       jsr 11d70 <getValueType>
    e902:	       lea 12(sp),sp
    e906:	       tst.w d0
    e908:	   /-- bne.s e90e <builtIn_showCharacter+0x28>
    e90a:	   |   moveq #1,d0
    e90c:	/--|-- bra.s e930 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    e90e:	|  \-> moveq #24,d0
    e910:	|      add.l 12(sp),d0
    e914:	|      move.l d0,-(sp)
    e916:	|      jsr 126f4 <trimStack>
    e91c:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    e91e:	|      move.l (sp),d0
    e920:	|      move.l d0,-(sp)
    e922:	|      pea 1 <_start+0x1>
    e926:	|      jsr 944a <setShown>
    e92c:	|      addq.l #8,sp
	return BR_CONTINUE;
    e92e:	|      moveq #2,d0
}
    e930:	\----> addq.l #4,sp
    e932:	       rts

0000e934 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    e934:	jsr 3d46 <killSpeechTimers>
	killMostPeople ();
    e93a:	jsr 82c6 <killMostPeople>
	return BR_CONTINUE;
    e940:	moveq #2,d0
}
    e942:	rts

0000e944 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    e944:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e946:	       movea.l 16(sp),a0
    e94a:	       move.l 24(a0),d0
    e94e:	       move.l d0,-(sp)
    e950:	       pea 1 <_start+0x1>
    e954:	       move.l sp,d0
    e956:	       addq.l #8,d0
    e958:	       move.l d0,-(sp)
    e95a:	       jsr 11d70 <getValueType>
    e960:	       lea 12(sp),sp
    e964:	       tst.w d0
    e966:	   /-- bne.s e96c <builtIn_setCharacterDrawMode+0x28>
    e968:	   |   moveq #1,d0
    e96a:	/--|-- bra.s e9c6 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    e96c:	|  \-> moveq #24,d0
    e96e:	|      add.l 16(sp),d0
    e972:	|      move.l d0,-(sp)
    e974:	|      jsr 126f4 <trimStack>
    e97a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e97c:	|      movea.l 16(sp),a0
    e980:	|      move.l 24(a0),d0
    e984:	|      move.l d0,-(sp)
    e986:	|      pea 7 <_start+0x7>
    e98a:	|      moveq #12,d0
    e98c:	|      add.l sp,d0
    e98e:	|      move.l d0,-(sp)
    e990:	|      jsr 11d70 <getValueType>
    e996:	|      lea 12(sp),sp
    e99a:	|      tst.w d0
    e99c:	|  /-- bne.s e9a2 <builtIn_setCharacterDrawMode+0x5e>
    e99e:	|  |   moveq #1,d0
    e9a0:	+--|-- bra.s e9c6 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    e9a2:	|  \-> moveq #24,d0
    e9a4:	|      add.l 16(sp),d0
    e9a8:	|      move.l d0,-(sp)
    e9aa:	|      jsr 126f4 <trimStack>
    e9b0:	|      addq.l #4,sp
	setDrawMode (di, obj);
    e9b2:	|      move.l 4(sp),d1
    e9b6:	|      move.l (sp),d0
    e9b8:	|      move.l d1,-(sp)
    e9ba:	|      move.l d0,-(sp)
    e9bc:	|      jsr 8d88 <setDrawMode>
    e9c2:	|      addq.l #8,sp
	return BR_CONTINUE;
    e9c4:	|      moveq #2,d0
}
    e9c6:	\----> addq.l #8,sp
    e9c8:	       rts

0000e9ca <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    e9ca:	pea 16314 <custom.c.64ca0e9f+0x163e>
    e9d0:	jsr 13db8 <KPrintF>
    e9d6:	addq.l #4,sp
	return BR_CONTINUE;
    e9d8:	moveq #2,d0
}
    e9da:	rts

0000e9dc <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    e9dc:	pea 16347 <custom.c.64ca0e9f+0x1671>
    e9e2:	jsr 13db8 <KPrintF>
    e9e8:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    e9ea:	moveq #2,d0
}
    e9ec:	rts

0000e9ee <builtIn_setScale>:

builtIn(setScale)
{
    e9ee:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9f0:	       movea.l 16(sp),a0
    e9f4:	       move.l 24(a0),d0
    e9f8:	       move.l d0,-(sp)
    e9fa:	       pea 1 <_start+0x1>
    e9fe:	       move.l sp,d0
    ea00:	       addq.l #8,d0
    ea02:	       move.l d0,-(sp)
    ea04:	       jsr 11d70 <getValueType>
    ea0a:	       lea 12(sp),sp
    ea0e:	       tst.w d0
    ea10:	   /-- bne.s ea16 <builtIn_setScale+0x28>
    ea12:	   |   moveq #1,d0
    ea14:	/--|-- bra.s ea78 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    ea16:	|  \-> moveq #24,d0
    ea18:	|      add.l 16(sp),d0
    ea1c:	|      move.l d0,-(sp)
    ea1e:	|      jsr 126f4 <trimStack>
    ea24:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea26:	|      movea.l 16(sp),a0
    ea2a:	|      move.l 24(a0),d0
    ea2e:	|      move.l d0,-(sp)
    ea30:	|      pea 1 <_start+0x1>
    ea34:	|      moveq #12,d0
    ea36:	|      add.l sp,d0
    ea38:	|      move.l d0,-(sp)
    ea3a:	|      jsr 11d70 <getValueType>
    ea40:	|      lea 12(sp),sp
    ea44:	|      tst.w d0
    ea46:	|  /-- bne.s ea4c <builtIn_setScale+0x5e>
    ea48:	|  |   moveq #1,d0
    ea4a:	+--|-- bra.s ea78 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    ea4c:	|  \-> moveq #24,d0
    ea4e:	|      add.l 16(sp),d0
    ea52:	|      move.l d0,-(sp)
    ea54:	|      jsr 126f4 <trimStack>
    ea5a:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    ea5c:	|      move.l (sp),d0
    ea5e:	|      move.l d0,d0
    ea60:	|      movea.w d0,a1
    ea62:	|      move.l 4(sp),d0
    ea66:	|      move.l d0,d0
    ea68:	|      movea.w d0,a0
    ea6a:	|      move.l a1,-(sp)
    ea6c:	|      move.l a0,-(sp)
    ea6e:	|      jsr 9422 <setScale>
    ea74:	|      addq.l #8,sp
	return BR_CONTINUE;
    ea76:	|      moveq #2,d0
}
    ea78:	\----> addq.l #8,sp
    ea7a:	       rts

0000ea7c <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    ea7c:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea7e:	       movea.l 12(sp),a0
    ea82:	       move.l 24(a0),d0
    ea86:	       move.l d0,-(sp)
    ea88:	       pea 7 <_start+0x7>
    ea8c:	       move.l sp,d0
    ea8e:	       addq.l #8,d0
    ea90:	       move.l d0,-(sp)
    ea92:	       jsr 11d70 <getValueType>
    ea98:	       lea 12(sp),sp
    ea9c:	       tst.w d0
    ea9e:	   /-- bne.s eaa4 <builtIn_stopCharacter+0x28>
    eaa0:	   |   moveq #1,d0
    eaa2:	/--|-- bra.s eadc <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    eaa4:	|  \-> moveq #24,d0
    eaa6:	|      add.l 12(sp),d0
    eaaa:	|      move.l d0,-(sp)
    eaac:	|      jsr 126f4 <trimStack>
    eab2:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    eab4:	|      move.l (sp),d0
    eab6:	|      move.l d0,-(sp)
    eab8:	|      jsr 9556 <stopPerson>
    eabe:	|      addq.l #4,sp
    eac0:	|      movea.w d0,a0
    eac2:	|      moveq #28,d0
    eac4:	|      add.l 12(sp),d0
    eac8:	|      move.l a0,-(sp)
    eaca:	|      pea 1 <_start+0x1>
    eace:	|      move.l d0,-(sp)
    ead0:	|      jsr 12662 <setVariable>
    ead6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eada:	|      moveq #2,d0
}
    eadc:	\----> addq.l #4,sp
    eade:	       rts

0000eae0 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    eae0:	pea 16381 <custom.c.64ca0e9f+0x16ab>
    eae6:	jsr 13db8 <KPrintF>
    eaec:	addq.l #4,sp
	return BR_CONTINUE;
    eaee:	moveq #2,d0
}
    eaf0:	rts

0000eaf2 <builtIn_animate>:

builtIn(animate)
{
    eaf2:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    eaf4:	       movea.l 16(sp),a0
    eaf8:	       move.l 24(a0),d0
    eafc:	       move.l d0,-(sp)
    eafe:	       jsr 12248 <getAnimationFromVar>
    eb04:	       addq.l #4,sp
    eb06:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    eb0a:	   /-- bne.s eb10 <builtIn_animate+0x1e>
    eb0c:	   |   moveq #1,d0
    eb0e:	/--|-- bra.s eb8e <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    eb10:	|  \-> moveq #24,d0
    eb12:	|      add.l 16(sp),d0
    eb16:	|      move.l d0,-(sp)
    eb18:	|      jsr 126f4 <trimStack>
    eb1e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb20:	|      movea.l 16(sp),a0
    eb24:	|      move.l 24(a0),d0
    eb28:	|      move.l d0,-(sp)
    eb2a:	|      pea 7 <_start+0x7>
    eb2e:	|      move.l sp,d0
    eb30:	|      addq.l #8,d0
    eb32:	|      move.l d0,-(sp)
    eb34:	|      jsr 11d70 <getValueType>
    eb3a:	|      lea 12(sp),sp
    eb3e:	|      tst.w d0
    eb40:	|  /-- bne.s eb46 <builtIn_animate+0x54>
    eb42:	|  |   moveq #1,d0
    eb44:	+--|-- bra.s eb8e <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    eb46:	|  \-> moveq #24,d0
    eb48:	|      add.l 16(sp),d0
    eb4c:	|      move.l d0,-(sp)
    eb4e:	|      jsr 126f4 <trimStack>
    eb54:	|      addq.l #4,sp
	animatePerson (obj, pp);
    eb56:	|      move.l (sp),d0
    eb58:	|      move.l 4(sp),-(sp)
    eb5c:	|      move.l d0,-(sp)
    eb5e:	|      jsr 6d9e <animatePerson>
    eb64:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    eb66:	|      move.l 4(sp),-(sp)
    eb6a:	|      jsr 95aa <timeForAnim>
    eb70:	|      addq.l #4,sp
    eb72:	|      move.l d0,d1
    eb74:	|      moveq #28,d0
    eb76:	|      add.l 16(sp),d0
    eb7a:	|      move.l d1,-(sp)
    eb7c:	|      pea 1 <_start+0x1>
    eb80:	|      move.l d0,-(sp)
    eb82:	|      jsr 12662 <setVariable>
    eb88:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eb8c:	|      moveq #2,d0
}
    eb8e:	\----> addq.l #8,sp
    eb90:	       rts

0000eb92 <builtIn_setCostume>:

builtIn(setCostume)
{
    eb92:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    eb94:	       movea.l 16(sp),a0
    eb98:	       move.l 24(a0),d0
    eb9c:	       move.l d0,-(sp)
    eb9e:	       jsr 11a1c <getCostumeFromVar>
    eba4:	       addq.l #4,sp
    eba6:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    ebaa:	   /-- bne.s ebb0 <builtIn_setCostume+0x1e>
    ebac:	   |   moveq #1,d0
    ebae:	/--|-- bra.s ec08 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    ebb0:	|  \-> moveq #24,d0
    ebb2:	|      add.l 16(sp),d0
    ebb6:	|      move.l d0,-(sp)
    ebb8:	|      jsr 126f4 <trimStack>
    ebbe:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ebc0:	|      movea.l 16(sp),a0
    ebc4:	|      move.l 24(a0),d0
    ebc8:	|      move.l d0,-(sp)
    ebca:	|      pea 7 <_start+0x7>
    ebce:	|      move.l sp,d0
    ebd0:	|      addq.l #8,d0
    ebd2:	|      move.l d0,-(sp)
    ebd4:	|      jsr 11d70 <getValueType>
    ebda:	|      lea 12(sp),sp
    ebde:	|      tst.w d0
    ebe0:	|  /-- bne.s ebe6 <builtIn_setCostume+0x54>
    ebe2:	|  |   moveq #1,d0
    ebe4:	+--|-- bra.s ec08 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    ebe6:	|  \-> moveq #24,d0
    ebe8:	|      add.l 16(sp),d0
    ebec:	|      move.l d0,-(sp)
    ebee:	|      jsr 126f4 <trimStack>
    ebf4:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    ebf6:	|      move.l (sp),d0
    ebf8:	|      move.l 4(sp),-(sp)
    ebfc:	|      move.l d0,-(sp)
    ebfe:	|      jsr 6de8 <animatePersonUsingPersona>
    ec04:	|      addq.l #8,sp
	return BR_CONTINUE;
    ec06:	|      moveq #2,d0
}
    ec08:	\----> addq.l #8,sp
    ec0a:	       rts

0000ec0c <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    ec0c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec0e:	       movea.l 16(sp),a0
    ec12:	       move.l 24(a0),d0
    ec16:	       move.l d0,-(sp)
    ec18:	       pea 1 <_start+0x1>
    ec1c:	       move.l sp,d0
    ec1e:	       addq.l #8,d0
    ec20:	       move.l d0,-(sp)
    ec22:	       jsr 11d70 <getValueType>
    ec28:	       lea 12(sp),sp
    ec2c:	       tst.w d0
    ec2e:	   /-- bne.s ec34 <builtIn_floatCharacter+0x28>
    ec30:	   |   moveq #1,d0
    ec32:	/--|-- bra.s eca8 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    ec34:	|  \-> moveq #24,d0
    ec36:	|      add.l 16(sp),d0
    ec3a:	|      move.l d0,-(sp)
    ec3c:	|      jsr 126f4 <trimStack>
    ec42:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec44:	|      movea.l 16(sp),a0
    ec48:	|      move.l 24(a0),d0
    ec4c:	|      move.l d0,-(sp)
    ec4e:	|      pea 7 <_start+0x7>
    ec52:	|      moveq #12,d0
    ec54:	|      add.l sp,d0
    ec56:	|      move.l d0,-(sp)
    ec58:	|      jsr 11d70 <getValueType>
    ec5e:	|      lea 12(sp),sp
    ec62:	|      tst.w d0
    ec64:	|  /-- bne.s ec6a <builtIn_floatCharacter+0x5e>
    ec66:	|  |   moveq #1,d0
    ec68:	+--|-- bra.s eca8 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    ec6a:	|  \-> moveq #24,d0
    ec6c:	|      add.l 16(sp),d0
    ec70:	|      move.l d0,-(sp)
    ec72:	|      jsr 126f4 <trimStack>
    ec78:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    ec7a:	|      move.l 4(sp),d1
    ec7e:	|      move.l (sp),d0
    ec80:	|      move.l d1,-(sp)
    ec82:	|      move.l d0,-(sp)
    ec84:	|      jsr 7e88 <floatCharacter>
    ec8a:	|      addq.l #8,sp
    ec8c:	|      movea.w d0,a0
    ec8e:	|      moveq #28,d0
    ec90:	|      add.l 16(sp),d0
    ec94:	|      move.l a0,-(sp)
    ec96:	|      pea 1 <_start+0x1>
    ec9a:	|      move.l d0,-(sp)
    ec9c:	|      jsr 12662 <setVariable>
    eca2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eca6:	|      moveq #2,d0
}
    eca8:	\----> addq.l #8,sp
    ecaa:	       rts

0000ecac <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    ecac:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ecae:	       movea.l 16(sp),a0
    ecb2:	       move.l 24(a0),d0
    ecb6:	       move.l d0,-(sp)
    ecb8:	       pea 1 <_start+0x1>
    ecbc:	       move.l sp,d0
    ecbe:	       addq.l #8,d0
    ecc0:	       move.l d0,-(sp)
    ecc2:	       jsr 11d70 <getValueType>
    ecc8:	       lea 12(sp),sp
    eccc:	       tst.w d0
    ecce:	   /-- bne.s ecd4 <builtIn_setCharacterWalkSpeed+0x28>
    ecd0:	   |   moveq #1,d0
    ecd2:	/--|-- bra.s ed48 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    ecd4:	|  \-> moveq #24,d0
    ecd6:	|      add.l 16(sp),d0
    ecda:	|      move.l d0,-(sp)
    ecdc:	|      jsr 126f4 <trimStack>
    ece2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ece4:	|      movea.l 16(sp),a0
    ece8:	|      move.l 24(a0),d0
    ecec:	|      move.l d0,-(sp)
    ecee:	|      pea 7 <_start+0x7>
    ecf2:	|      moveq #12,d0
    ecf4:	|      add.l sp,d0
    ecf6:	|      move.l d0,-(sp)
    ecf8:	|      jsr 11d70 <getValueType>
    ecfe:	|      lea 12(sp),sp
    ed02:	|      tst.w d0
    ed04:	|  /-- bne.s ed0a <builtIn_setCharacterWalkSpeed+0x5e>
    ed06:	|  |   moveq #1,d0
    ed08:	+--|-- bra.s ed48 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    ed0a:	|  \-> moveq #24,d0
    ed0c:	|      add.l 16(sp),d0
    ed10:	|      move.l d0,-(sp)
    ed12:	|      jsr 126f4 <trimStack>
    ed18:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    ed1a:	|      move.l 4(sp),d1
    ed1e:	|      move.l (sp),d0
    ed20:	|      move.l d1,-(sp)
    ed22:	|      move.l d0,-(sp)
    ed24:	|      jsr 93be <setCharacterWalkSpeed>
    ed2a:	|      addq.l #8,sp
    ed2c:	|      movea.w d0,a0
    ed2e:	|      moveq #28,d0
    ed30:	|      add.l 16(sp),d0
    ed34:	|      move.l a0,-(sp)
    ed36:	|      pea 1 <_start+0x1>
    ed3a:	|      move.l d0,-(sp)
    ed3c:	|      jsr 12662 <setVariable>
    ed42:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ed46:	|      moveq #2,d0
}
    ed48:	\----> addq.l #8,sp
    ed4a:	       rts

0000ed4c <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    ed4c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed4e:	       movea.l 16(sp),a0
    ed52:	       move.l 24(a0),d0
    ed56:	       move.l d0,-(sp)
    ed58:	       pea 1 <_start+0x1>
    ed5c:	       move.l sp,d0
    ed5e:	       addq.l #8,d0
    ed60:	       move.l d0,-(sp)
    ed62:	       jsr 11d70 <getValueType>
    ed68:	       lea 12(sp),sp
    ed6c:	       tst.w d0
    ed6e:	   /-- bne.s ed74 <builtIn_turnCharacter+0x28>
    ed70:	   |   moveq #1,d0
    ed72:	/--|-- bra.s ede8 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    ed74:	|  \-> moveq #24,d0
    ed76:	|      add.l 16(sp),d0
    ed7a:	|      move.l d0,-(sp)
    ed7c:	|      jsr 126f4 <trimStack>
    ed82:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed84:	|      movea.l 16(sp),a0
    ed88:	|      move.l 24(a0),d0
    ed8c:	|      move.l d0,-(sp)
    ed8e:	|      pea 7 <_start+0x7>
    ed92:	|      moveq #12,d0
    ed94:	|      add.l sp,d0
    ed96:	|      move.l d0,-(sp)
    ed98:	|      jsr 11d70 <getValueType>
    ed9e:	|      lea 12(sp),sp
    eda2:	|      tst.w d0
    eda4:	|  /-- bne.s edaa <builtIn_turnCharacter+0x5e>
    eda6:	|  |   moveq #1,d0
    eda8:	+--|-- bra.s ede8 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    edaa:	|  \-> moveq #24,d0
    edac:	|      add.l 16(sp),d0
    edb0:	|      move.l d0,-(sp)
    edb2:	|      jsr 126f4 <trimStack>
    edb8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    edba:	|      move.l (sp),d1
    edbc:	|      move.l 4(sp),d0
    edc0:	|      move.l d1,-(sp)
    edc2:	|      move.l d0,-(sp)
    edc4:	|      jsr 9662 <turnPersonToFace>
    edca:	|      addq.l #8,sp
    edcc:	|      movea.w d0,a0
    edce:	|      moveq #28,d0
    edd0:	|      add.l 16(sp),d0
    edd4:	|      move.l a0,-(sp)
    edd6:	|      pea 1 <_start+0x1>
    edda:	|      move.l d0,-(sp)
    eddc:	|      jsr 12662 <setVariable>
    ede2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ede6:	|      moveq #2,d0
}
    ede8:	\----> addq.l #8,sp
    edea:	       rts

0000edec <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    edec:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edee:	       movea.l 16(sp),a0
    edf2:	       move.l 24(a0),d0
    edf6:	       move.l d0,-(sp)
    edf8:	       pea 1 <_start+0x1>
    edfc:	       move.l sp,d0
    edfe:	       addq.l #8,d0
    ee00:	       move.l d0,-(sp)
    ee02:	       jsr 11d70 <getValueType>
    ee08:	       lea 12(sp),sp
    ee0c:	       tst.w d0
    ee0e:	   /-- bne.s ee14 <builtIn_setCharacterExtra+0x28>
    ee10:	   |   moveq #1,d0
    ee12:	/--|-- bra.s ee88 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    ee14:	|  \-> moveq #24,d0
    ee16:	|      add.l 16(sp),d0
    ee1a:	|      move.l d0,-(sp)
    ee1c:	|      jsr 126f4 <trimStack>
    ee22:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee24:	|      movea.l 16(sp),a0
    ee28:	|      move.l 24(a0),d0
    ee2c:	|      move.l d0,-(sp)
    ee2e:	|      pea 7 <_start+0x7>
    ee32:	|      moveq #12,d0
    ee34:	|      add.l sp,d0
    ee36:	|      move.l d0,-(sp)
    ee38:	|      jsr 11d70 <getValueType>
    ee3e:	|      lea 12(sp),sp
    ee42:	|      tst.w d0
    ee44:	|  /-- bne.s ee4a <builtIn_setCharacterExtra+0x5e>
    ee46:	|  |   moveq #1,d0
    ee48:	+--|-- bra.s ee88 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    ee4a:	|  \-> moveq #24,d0
    ee4c:	|      add.l 16(sp),d0
    ee50:	|      move.l d0,-(sp)
    ee52:	|      jsr 126f4 <trimStack>
    ee58:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    ee5a:	|      move.l (sp),d1
    ee5c:	|      move.l 4(sp),d0
    ee60:	|      move.l d1,-(sp)
    ee62:	|      move.l d0,-(sp)
    ee64:	|      jsr 93ec <setPersonExtra>
    ee6a:	|      addq.l #8,sp
    ee6c:	|      movea.w d0,a0
    ee6e:	|      moveq #28,d0
    ee70:	|      add.l 16(sp),d0
    ee74:	|      move.l a0,-(sp)
    ee76:	|      pea 1 <_start+0x1>
    ee7a:	|      move.l d0,-(sp)
    ee7c:	|      jsr 12662 <setVariable>
    ee82:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ee86:	|      moveq #2,d0
}
    ee88:	\----> addq.l #8,sp
    ee8a:	       rts

0000ee8c <builtIn_removeCharacter>:

builtIn(removeCharacter)
{
    ee8c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee8e:	       movea.l 12(sp),a0
    ee92:	       move.l 24(a0),d0
    ee96:	       move.l d0,-(sp)
    ee98:	       pea 7 <_start+0x7>
    ee9c:	       move.l sp,d0
    ee9e:	       addq.l #8,d0
    eea0:	       move.l d0,-(sp)
    eea2:	       jsr 11d70 <getValueType>
    eea8:	       lea 12(sp),sp
    eeac:	       tst.w d0
    eeae:	   /-- bne.s eeb4 <builtIn_removeCharacter+0x28>
    eeb0:	   |   moveq #1,d0
    eeb2:	/--|-- bra.s eed2 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    eeb4:	|  \-> moveq #24,d0
    eeb6:	|      add.l 12(sp),d0
    eeba:	|      move.l d0,-(sp)
    eebc:	|      jsr 126f4 <trimStack>
    eec2:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    eec4:	|      move.l (sp),d0
    eec6:	|      move.l d0,-(sp)
    eec8:	|      jsr 8620 <removeOneCharacter>
    eece:	|      addq.l #4,sp
	return BR_CONTINUE;
    eed0:	|      moveq #2,d0
}
    eed2:	\----> addq.l #4,sp
    eed4:	       rts

0000eed6 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    eed6:	                lea -28(sp),sp
    eeda:	                move.l d2,-(sp)
    eedc:	                move.l 44(sp),d1
    eee0:	                move.l 48(sp),d0
    eee4:	                move.w d1,d1
    eee6:	                move.w d1,6(sp)
    eeea:	                move.w d0,d0
    eeec:	                move.w d0,4(sp)
	switch (numParams) {
    eef0:	                moveq #2,d0
    eef2:	                cmp.l 36(sp),d0
    eef6:	      /-------- beq.w f038 <moveChr+0x162>
    eefa:	      |         moveq #3,d0
    eefc:	      |         cmp.l 36(sp),d0
    ef00:	/-----|-------- bne.w f16c <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef04:	|     |         movea.l 40(sp),a0
    ef08:	|     |         move.l 24(a0),d0
    ef0c:	|     |         move.l d0,-(sp)
    ef0e:	|     |         pea 1 <_start+0x1>
    ef12:	|     |         lea 20(sp),a0
    ef16:	|     |         move.l a0,-(sp)
    ef18:	|     |         jsr 11d70 <getValueType>
    ef1e:	|     |         lea 12(sp),sp
    ef22:	|     |         tst.w d0
    ef24:	|     |     /-- bne.s ef2c <moveChr+0x56>
    ef26:	|     |     |   moveq #1,d0
    ef28:	|  /--|-----|-- bra.w f17c <moveChr+0x2a6>
			trimStack (&fun -> stack);
    ef2c:	|  |  |     \-> moveq #24,d0
    ef2e:	|  |  |         add.l 40(sp),d0
    ef32:	|  |  |         move.l d0,-(sp)
    ef34:	|  |  |         jsr 126f4 <trimStack>
    ef3a:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef3c:	|  |  |         movea.l 40(sp),a0
    ef40:	|  |  |         move.l 24(a0),d0
    ef44:	|  |  |         move.l d0,-(sp)
    ef46:	|  |  |         pea 1 <_start+0x1>
    ef4a:	|  |  |         lea 24(sp),a0
    ef4e:	|  |  |         move.l a0,-(sp)
    ef50:	|  |  |         jsr 11d70 <getValueType>
    ef56:	|  |  |         lea 12(sp),sp
    ef5a:	|  |  |         tst.w d0
    ef5c:	|  |  |     /-- bne.s ef64 <moveChr+0x8e>
    ef5e:	|  |  |     |   moveq #1,d0
    ef60:	|  +--|-----|-- bra.w f17c <moveChr+0x2a6>
			trimStack (&fun -> stack);
    ef64:	|  |  |     \-> moveq #24,d0
    ef66:	|  |  |         add.l 40(sp),d0
    ef6a:	|  |  |         move.l d0,-(sp)
    ef6c:	|  |  |         jsr 126f4 <trimStack>
    ef72:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ef74:	|  |  |         movea.l 40(sp),a0
    ef78:	|  |  |         move.l 24(a0),d0
    ef7c:	|  |  |         move.l d0,-(sp)
    ef7e:	|  |  |         pea 7 <_start+0x7>
    ef82:	|  |  |         lea 16(sp),a0
    ef86:	|  |  |         move.l a0,-(sp)
    ef88:	|  |  |         jsr 11d70 <getValueType>
    ef8e:	|  |  |         lea 12(sp),sp
    ef92:	|  |  |         tst.w d0
    ef94:	|  |  |     /-- bne.s ef9c <moveChr+0xc6>
    ef96:	|  |  |     |   moveq #1,d0
    ef98:	|  +--|-----|-- bra.w f17c <moveChr+0x2a6>
			trimStack (&fun -> stack);
    ef9c:	|  |  |     \-> moveq #24,d0
    ef9e:	|  |  |         add.l 40(sp),d0
    efa2:	|  |  |         move.l d0,-(sp)
    efa4:	|  |  |         jsr 126f4 <trimStack>
    efaa:	|  |  |         addq.l #4,sp

			if (force) {
    efac:	|  |  |         tst.w 6(sp)
    efb0:	|  |  |     /-- beq.s efe0 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    efb2:	|  |  |     |   movea.l 8(sp),a0
    efb6:	|  |  |     |   move.l 12(sp),d1
    efba:	|  |  |     |   move.l 16(sp),d0
    efbe:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffbd14e>
    efc2:	|  |  |     |   move.l 44(sp),-(sp)
    efc6:	|  |  |     |   move.l a0,-(sp)
    efc8:	|  |  |     |   move.l d1,-(sp)
    efca:	|  |  |     |   move.l d0,-(sp)
    efcc:	|  |  |     |   jsr 7eac <forceWalkingPerson>
    efd2:	|  |  |     |   lea 20(sp),sp
    efd6:	|  |  |     |   tst.w d0
    efd8:	|  |  |  /--|-- beq.s f032 <moveChr+0x15c>
    efda:	|  |  |  |  |   moveq #3,d0
    efdc:	|  +--|--|--|-- bra.w f17c <moveChr+0x2a6>
			} else if (immediate) {
    efe0:	|  |  |  |  \-> tst.w 4(sp)
    efe4:	|  |  |  |  /-- beq.s f004 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    efe6:	|  |  |  |  |   movea.l 8(sp),a0
    efea:	|  |  |  |  |   move.l 12(sp),d1
    efee:	|  |  |  |  |   move.l 16(sp),d0
    eff2:	|  |  |  |  |   move.l a0,-(sp)
    eff4:	|  |  |  |  |   move.l d1,-(sp)
    eff6:	|  |  |  |  |   move.l d0,-(sp)
    eff8:	|  |  |  |  |   jsr 81b4 <jumpPerson>
    effe:	|  |  |  |  |   lea 12(sp),sp
    f002:	|  |  |  +--|-- bra.s f032 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    f004:	|  |  |  |  \-> movea.l 8(sp),a0
    f008:	|  |  |  |      move.l 12(sp),d1
    f00c:	|  |  |  |      move.l 16(sp),d0
    f010:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffbd14e>
    f014:	|  |  |  |      move.l 44(sp),-(sp)
    f018:	|  |  |  |      move.l a0,-(sp)
    f01a:	|  |  |  |      move.l d1,-(sp)
    f01c:	|  |  |  |      move.l d0,-(sp)
    f01e:	|  |  |  |      jsr 8384 <makeWalkingPerson>
    f024:	|  |  |  |      lea 20(sp),sp
    f028:	|  |  |  |      tst.w d0
    f02a:	|  |  |  +----- beq.s f032 <moveChr+0x15c>
    f02c:	|  |  |  |      moveq #3,d0
    f02e:	|  +--|--|----- bra.w f17c <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    f032:	|  |  |  \----> moveq #2,d0
    f034:	|  +--|-------- bra.w f17c <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f038:	|  |  \-------> movea.l 40(sp),a0
    f03c:	|  |            move.l 24(a0),d0
    f040:	|  |            move.l d0,-(sp)
    f042:	|  |            pea 7 <_start+0x7>
    f046:	|  |            moveq #32,d0
    f048:	|  |            add.l sp,d0
    f04a:	|  |            move.l d0,-(sp)
    f04c:	|  |            jsr 11d70 <getValueType>
    f052:	|  |            lea 12(sp),sp
    f056:	|  |            tst.w d0
    f058:	|  |        /-- bne.s f060 <moveChr+0x18a>
    f05a:	|  |        |   moveq #1,d0
    f05c:	|  +--------|-- bra.w f17c <moveChr+0x2a6>
			trimStack (&fun -> stack);
    f060:	|  |        \-> moveq #24,d0
    f062:	|  |            add.l 40(sp),d0
    f066:	|  |            move.l d0,-(sp)
    f068:	|  |            jsr 126f4 <trimStack>
    f06e:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f070:	|  |            movea.l 40(sp),a0
    f074:	|  |            move.l 24(a0),d0
    f078:	|  |            move.l d0,-(sp)
    f07a:	|  |            pea 7 <_start+0x7>
    f07e:	|  |            lea 28(sp),a0
    f082:	|  |            move.l a0,-(sp)
    f084:	|  |            jsr 11d70 <getValueType>
    f08a:	|  |            lea 12(sp),sp
    f08e:	|  |            tst.w d0
    f090:	|  |        /-- bne.s f098 <moveChr+0x1c2>
    f092:	|  |        |   moveq #1,d0
    f094:	|  +--------|-- bra.w f17c <moveChr+0x2a6>
			trimStack (&fun -> stack);
    f098:	|  |        \-> moveq #24,d0
    f09a:	|  |            add.l 40(sp),d0
    f09e:	|  |            move.l d0,-(sp)
    f0a0:	|  |            jsr 126f4 <trimStack>
    f0a6:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    f0a8:	|  |            move.l 24(sp),d0
    f0ac:	|  |            move.l d0,-(sp)
    f0ae:	|  |            jsr 1283a <getRegionForObject>
    f0b4:	|  |            addq.l #4,sp
    f0b6:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    f0ba:	|  |        /-- bne.s f0c2 <moveChr+0x1ec>
    f0bc:	|  |        |   moveq #2,d0
    f0be:	|  +--------|-- bra.w f17c <moveChr+0x2a6>

			if (force)
    f0c2:	|  |        \-> tst.w 6(sp)
    f0c6:	|  |        /-- beq.s f102 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    f0c8:	|  |        |   movea.l 28(sp),a0
    f0cc:	|  |        |   move.l 24(a0),d2
    f0d0:	|  |        |   movea.l 20(sp),a1
    f0d4:	|  |        |   movea.l 28(sp),a0
    f0d8:	|  |        |   move.l 20(a0),d1
    f0dc:	|  |        |   movea.l 28(sp),a0
    f0e0:	|  |        |   move.l 16(a0),d0
    f0e4:	|  |        |   move.l d2,-(sp)
    f0e6:	|  |        |   move.l 44(sp),-(sp)
    f0ea:	|  |        |   move.l a1,-(sp)
    f0ec:	|  |        |   move.l d1,-(sp)
    f0ee:	|  |        |   move.l d0,-(sp)
    f0f0:	|  |        |   jsr 7eac <forceWalkingPerson>
    f0f6:	|  |        |   lea 20(sp),sp
    f0fa:	|  |        |   tst.w d0
    f0fc:	|  |     /--|-- beq.s f168 <moveChr+0x292>
    f0fe:	|  |     |  |   moveq #3,d0
    f100:	|  +-----|--|-- bra.s f17c <moveChr+0x2a6>
			}
			else if (immediate)
    f102:	|  |     |  \-> tst.w 4(sp)
    f106:	|  |     |  /-- beq.s f12e <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    f108:	|  |     |  |   movea.l 20(sp),a1
    f10c:	|  |     |  |   movea.l 28(sp),a0
    f110:	|  |     |  |   move.l 20(a0),d1
    f114:	|  |     |  |   movea.l 28(sp),a0
    f118:	|  |     |  |   move.l 16(a0),d0
    f11c:	|  |     |  |   move.l a1,-(sp)
    f11e:	|  |     |  |   move.l d1,-(sp)
    f120:	|  |     |  |   move.l d0,-(sp)
    f122:	|  |     |  |   jsr 81b4 <jumpPerson>
    f128:	|  |     |  |   lea 12(sp),sp
    f12c:	|  |     +--|-- bra.s f168 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    f12e:	|  |     |  \-> movea.l 28(sp),a0
    f132:	|  |     |      move.l 24(a0),d2
    f136:	|  |     |      movea.l 20(sp),a1
    f13a:	|  |     |      movea.l 28(sp),a0
    f13e:	|  |     |      move.l 20(a0),d1
    f142:	|  |     |      movea.l 28(sp),a0
    f146:	|  |     |      move.l 16(a0),d0
    f14a:	|  |     |      move.l d2,-(sp)
    f14c:	|  |     |      move.l 44(sp),-(sp)
    f150:	|  |     |      move.l a1,-(sp)
    f152:	|  |     |      move.l d1,-(sp)
    f154:	|  |     |      move.l d0,-(sp)
    f156:	|  |     |      jsr 8384 <makeWalkingPerson>
    f15c:	|  |     |      lea 20(sp),sp
    f160:	|  |     |      tst.w d0
    f162:	|  |     +----- beq.s f168 <moveChr+0x292>
    f164:	|  |     |      moveq #3,d0
    f166:	|  +-----|----- bra.s f17c <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    f168:	|  |     \----> moveq #2,d0
    f16a:	|  +----------- bra.s f17c <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    f16c:	\--|----------> pea 1639f <custom.c.64ca0e9f+0x16c9>
    f172:	   |            jsr 13db8 <KPrintF>
    f178:	   |            addq.l #4,sp
			return BR_ERROR;
    f17a:	   |            moveq #1,d0
	}
}
    f17c:	   \----------> move.l (sp)+,d2
    f17e:	                lea 28(sp),sp
    f182:	                rts

0000f184 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    f184:	clr.l -(sp)
    f186:	clr.l -(sp)
    f188:	move.l 16(sp),-(sp)
    f18c:	move.l 16(sp),-(sp)
    f190:	jsr eed6 <moveChr>
    f196:	lea 16(sp),sp
}
    f19a:	rts

0000f19c <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    f19c:	clr.l -(sp)
    f19e:	pea 1 <_start+0x1>
    f1a2:	move.l 16(sp),-(sp)
    f1a6:	move.l 16(sp),-(sp)
    f1aa:	jsr eed6 <moveChr>
    f1b0:	lea 16(sp),sp
}
    f1b4:	rts

0000f1b6 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    f1b6:	pea 1 <_start+0x1>
    f1ba:	clr.l -(sp)
    f1bc:	move.l 16(sp),-(sp)
    f1c0:	move.l 16(sp),-(sp)
    f1c4:	jsr eed6 <moveChr>
    f1ca:	lea 16(sp),sp
}
    f1ce:	rts

0000f1d0 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    f1d0:	jsr 53ea <clearStatusBar>
	return BR_CONTINUE;
    f1d6:	moveq #2,d0
}
    f1d8:	rts

0000f1da <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    f1da:	jsr 5492 <killLastStatus>
	return BR_CONTINUE;
    f1e0:	moveq #2,d0
}
    f1e2:	rts

0000f1e4 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    f1e4:	jsr 5380 <addStatusBar>
	return BR_CONTINUE;
    f1ea:	moveq #2,d0
}
    f1ec:	rts

0000f1ee <builtIn_statusText>:

builtIn(statusText)
{
    f1ee:	       subq.l #8,sp
    f1f0:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    f1f2:	       movea.l 20(sp),a0
    f1f6:	       move.l 24(a0),d0
    f1fa:	       move.l d0,-(sp)
    f1fc:	       jsr 12346 <getTextFromAnyVar>
    f202:	       addq.l #4,sp
    f204:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    f208:	   /-- bne.s f20e <builtIn_statusText+0x20>
    f20a:	   |   moveq #1,d0
    f20c:	/--|-- bra.s f242 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    f20e:	|  \-> moveq #24,d0
    f210:	|      add.l 20(sp),d0
    f214:	|      move.l d0,-(sp)
    f216:	|      jsr 126f4 <trimStack>
    f21c:	|      addq.l #4,sp
	setStatusBar(newText);
    f21e:	|      move.l 8(sp),-(sp)
    f222:	|      jsr 5712 <setStatusBar>
    f228:	|      addq.l #4,sp
	FreeVec(newText);
    f22a:	|      move.l 8(sp),4(sp)
    f230:	|      move.l 190fa <SysBase>,d0
    f236:	|      movea.l d0,a6
    f238:	|      movea.l 4(sp),a1
    f23c:	|      jsr -690(a6)
	return BR_CONTINUE;
    f240:	|      moveq #2,d0
}
    f242:	\----> movea.l (sp)+,a6
    f244:	       addq.l #8,sp
    f246:	       rts

0000f248 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    f248:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f24a:	       movea.l 12(sp),a0
    f24e:	       move.l 24(a0),d0
    f252:	       move.l d0,-(sp)
    f254:	       pea 1 <_start+0x1>
    f258:	       move.l sp,d0
    f25a:	       addq.l #8,d0
    f25c:	       move.l d0,-(sp)
    f25e:	       jsr 11d70 <getValueType>
    f264:	       lea 12(sp),sp
    f268:	       tst.w d0
    f26a:	   /-- bne.s f270 <builtIn_lightStatus+0x28>
    f26c:	   |   moveq #1,d0
    f26e:	/--|-- bra.s f28e <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    f270:	|  \-> moveq #24,d0
    f272:	|      add.l 12(sp),d0
    f276:	|      move.l d0,-(sp)
    f278:	|      jsr 126f4 <trimStack>
    f27e:	|      addq.l #4,sp
	setLitStatus (val);
    f280:	|      move.l (sp),d0
    f282:	|      move.l d0,-(sp)
    f284:	|      jsr 5702 <setLitStatus>
    f28a:	|      addq.l #4,sp
	return BR_CONTINUE;
    f28c:	|      moveq #2,d0
}
    f28e:	\----> addq.l #4,sp
    f290:	       rts

0000f292 <builtIn_positionStatus>:

builtIn(positionStatus)
{
    f292:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f294:	       movea.l 16(sp),a0
    f298:	       move.l 24(a0),d0
    f29c:	       move.l d0,-(sp)
    f29e:	       pea 1 <_start+0x1>
    f2a2:	       move.l sp,d0
    f2a4:	       addq.l #8,d0
    f2a6:	       move.l d0,-(sp)
    f2a8:	       jsr 11d70 <getValueType>
    f2ae:	       lea 12(sp),sp
    f2b2:	       tst.w d0
    f2b4:	   /-- bne.s f2ba <builtIn_positionStatus+0x28>
    f2b6:	   |   moveq #1,d0
    f2b8:	/--|-- bra.s f314 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    f2ba:	|  \-> moveq #24,d0
    f2bc:	|      add.l 16(sp),d0
    f2c0:	|      move.l d0,-(sp)
    f2c2:	|      jsr 126f4 <trimStack>
    f2c8:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2ca:	|      movea.l 16(sp),a0
    f2ce:	|      move.l 24(a0),d0
    f2d2:	|      move.l d0,-(sp)
    f2d4:	|      pea 1 <_start+0x1>
    f2d8:	|      moveq #12,d0
    f2da:	|      add.l sp,d0
    f2dc:	|      move.l d0,-(sp)
    f2de:	|      jsr 11d70 <getValueType>
    f2e4:	|      lea 12(sp),sp
    f2e8:	|      tst.w d0
    f2ea:	|  /-- bne.s f2f0 <builtIn_positionStatus+0x5e>
    f2ec:	|  |   moveq #1,d0
    f2ee:	+--|-- bra.s f314 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    f2f0:	|  \-> moveq #24,d0
    f2f2:	|      add.l 16(sp),d0
    f2f6:	|      move.l d0,-(sp)
    f2f8:	|      jsr 126f4 <trimStack>
    f2fe:	|      addq.l #4,sp
	positionStatus (x, y);
    f300:	|      move.l (sp),d1
    f302:	|      move.l 4(sp),d0
    f306:	|      move.l d1,-(sp)
    f308:	|      move.l d0,-(sp)
    f30a:	|      jsr 54f4 <positionStatus>
    f310:	|      addq.l #8,sp
	return BR_CONTINUE;
    f312:	|      moveq #2,d0
}
    f314:	\----> addq.l #8,sp
    f316:	       rts

0000f318 <builtIn_alignStatus>:

builtIn(alignStatus)
{
    f318:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f31a:	       movea.l 12(sp),a0
    f31e:	       move.l 24(a0),d0
    f322:	       move.l d0,-(sp)
    f324:	       pea 1 <_start+0x1>
    f328:	       move.l sp,d0
    f32a:	       addq.l #8,d0
    f32c:	       move.l d0,-(sp)
    f32e:	       jsr 11d70 <getValueType>
    f334:	       lea 12(sp),sp
    f338:	       tst.w d0
    f33a:	   /-- bne.s f340 <builtIn_alignStatus+0x28>
    f33c:	   |   moveq #1,d0
    f33e:	/--|-- bra.s f360 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
    f340:	|  \-> moveq #24,d0
    f342:	|      add.l 12(sp),d0
    f346:	|      move.l d0,-(sp)
    f348:	|      jsr 126f4 <trimStack>
    f34e:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    f350:	|      move.l (sp),d0
    f352:	|      movea.l 18a9a <nowStatus>,a0
    f358:	|      move.l d0,d0
    f35a:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    f35e:	|      moveq #2,d0
}
    f360:	\----> addq.l #4,sp
    f362:	       rts

0000f364 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    f364:	             tst.l 4(sp)
    f368:	      /----- beq.s f374 <getFuncNumForCallback+0x10>
    f36a:	      |      moveq #1,d0
    f36c:	      |      cmp.l 4(sp),d0
    f370:	      |  /-- beq.s f37a <getFuncNumForCallback+0x16>
    f372:	   /--|--|-- bra.s f3b0 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
    f374:	   |  \--|-> clr.l 12(sp)
			break;
    f378:	/--|-----|-- bra.s f3c2 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    f37a:	|  |     \-> movea.l 8(sp),a0
    f37e:	|  |         move.l 24(a0),d0
    f382:	|  |         move.l d0,-(sp)
    f384:	|  |         pea 2 <_start+0x2>
    f388:	|  |         move.l 20(sp),-(sp)
    f38c:	|  |         jsr 11d70 <getValueType>
    f392:	|  |         lea 12(sp),sp
    f396:	|  |         tst.w d0
    f398:	|  |     /-- bne.s f39e <getFuncNumForCallback+0x3a>
    f39a:	|  |     |   clr.w d0
    f39c:	|  |  /--|-- bra.s f3c4 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
    f39e:	|  |  |  \-> moveq #24,d0
    f3a0:	|  |  |      add.l 8(sp),d0
    f3a4:	|  |  |      move.l d0,-(sp)
    f3a6:	|  |  |      jsr 126f4 <trimStack>
    f3ac:	|  |  |      addq.l #4,sp
			break;
    f3ae:	+--|--|----- bra.s f3c2 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
    f3b0:	|  \--|----> pea 163d5 <custom.c.64ca0e9f+0x16ff>
    f3b6:	|     |      jsr 13db8 <KPrintF>
    f3bc:	|     |      addq.l #4,sp
			return FALSE;
    f3be:	|     |      clr.w d0
    f3c0:	|     +----- bra.s f3c4 <getFuncNumForCallback+0x60>
	}
	return TRUE;
    f3c2:	\-----|----> moveq #1,d0
}
    f3c4:	      \----> rts

0000f3c6 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    f3c6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f3c8:	       move.l sp,d0
    f3ca:	       move.l d0,-(sp)
    f3cc:	       move.l 16(sp),-(sp)
    f3d0:	       move.l 16(sp),-(sp)
    f3d4:	       jsr f364 <getFuncNumForCallback>
    f3da:	       lea 12(sp),sp
    f3de:	       tst.w d0
    f3e0:	/----- beq.s f3f0 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    f3e2:	|      movea.l 18a8c <currentEvents>,a0
    f3e8:	|      move.l (sp),d0
    f3ea:	|      move.l d0,(a0)
		return BR_CONTINUE;
    f3ec:	|      moveq #2,d0
    f3ee:	|  /-- bra.s f3f2 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    f3f0:	\--|-> moveq #1,d0
}
    f3f2:	   \-> addq.l #4,sp
    f3f4:	       rts

0000f3f6 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    f3f6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f3f8:	       move.l sp,d0
    f3fa:	       move.l d0,-(sp)
    f3fc:	       move.l 16(sp),-(sp)
    f400:	       move.l 16(sp),-(sp)
    f404:	       jsr f364 <getFuncNumForCallback>
    f40a:	       lea 12(sp),sp
    f40e:	       tst.w d0
    f410:	/----- beq.s f422 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    f412:	|      movea.l 18a8c <currentEvents>,a0
    f418:	|      move.l (sp),d0
    f41a:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    f41e:	|      moveq #2,d0
    f420:	|  /-- bra.s f424 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    f422:	\--|-> moveq #1,d0
}
    f424:	   \-> addq.l #4,sp
    f426:	       rts

0000f428 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    f428:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f42a:	       move.l sp,d0
    f42c:	       move.l d0,-(sp)
    f42e:	       move.l 16(sp),-(sp)
    f432:	       move.l 16(sp),-(sp)
    f436:	       jsr f364 <getFuncNumForCallback>
    f43c:	       lea 12(sp),sp
    f440:	       tst.w d0
    f442:	/----- beq.s f454 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    f444:	|      movea.l 18a8c <currentEvents>,a0
    f44a:	|      move.l (sp),d0
    f44c:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    f450:	|      moveq #2,d0
    f452:	|  /-- bra.s f456 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    f454:	\--|-> moveq #1,d0
}
    f456:	   \-> addq.l #4,sp
    f458:	       rts

0000f45a <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    f45a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f45c:	       move.l sp,d0
    f45e:	       move.l d0,-(sp)
    f460:	       move.l 16(sp),-(sp)
    f464:	       move.l 16(sp),-(sp)
    f468:	       jsr f364 <getFuncNumForCallback>
    f46e:	       lea 12(sp),sp
    f472:	       tst.w d0
    f474:	/----- beq.s f486 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    f476:	|      movea.l 18a8c <currentEvents>,a0
    f47c:	|      move.l (sp),d0
    f47e:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    f482:	|      moveq #2,d0
    f484:	|  /-- bra.s f488 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    f486:	\--|-> moveq #1,d0
}
    f488:	   \-> addq.l #4,sp
    f48a:	       rts

0000f48c <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    f48c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f48e:	       move.l sp,d0
    f490:	       move.l d0,-(sp)
    f492:	       move.l 16(sp),-(sp)
    f496:	       move.l 16(sp),-(sp)
    f49a:	       jsr f364 <getFuncNumForCallback>
    f4a0:	       lea 12(sp),sp
    f4a4:	       tst.w d0
    f4a6:	/----- beq.s f4b8 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    f4a8:	|      movea.l 18a8c <currentEvents>,a0
    f4ae:	|      move.l (sp),d0
    f4b0:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    f4b4:	|      moveq #2,d0
    f4b6:	|  /-- bra.s f4ba <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    f4b8:	\--|-> moveq #1,d0
}
    f4ba:	   \-> addq.l #4,sp
    f4bc:	       rts

0000f4be <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    f4be:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f4c0:	       move.l sp,d0
    f4c2:	       move.l d0,-(sp)
    f4c4:	       move.l 16(sp),-(sp)
    f4c8:	       move.l 16(sp),-(sp)
    f4cc:	       jsr f364 <getFuncNumForCallback>
    f4d2:	       lea 12(sp),sp
    f4d6:	       tst.w d0
    f4d8:	/----- beq.s f4ea <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    f4da:	|      movea.l 18a8c <currentEvents>,a0
    f4e0:	|      move.l (sp),d0
    f4e2:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    f4e6:	|      moveq #2,d0
    f4e8:	|  /-- bra.s f4ec <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    f4ea:	\--|-> moveq #1,d0
}
    f4ec:	   \-> addq.l #4,sp
    f4ee:	       rts

0000f4f0 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    f4f0:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f4f2:	       move.l sp,d0
    f4f4:	       move.l d0,-(sp)
    f4f6:	       move.l 16(sp),-(sp)
    f4fa:	       move.l 16(sp),-(sp)
    f4fe:	       jsr f364 <getFuncNumForCallback>
    f504:	       lea 12(sp),sp
    f508:	       tst.w d0
    f50a:	/----- beq.s f51c <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    f50c:	|      movea.l 18a8c <currentEvents>,a0
    f512:	|      move.l (sp),d0
    f514:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    f518:	|      moveq #2,d0
    f51a:	|  /-- bra.s f51e <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    f51c:	\--|-> moveq #1,d0
}
    f51e:	   \-> addq.l #4,sp
    f520:	       rts

0000f522 <builtIn_spawnSub>:

builtIn (spawnSub)
{
    f522:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f524:	          move.l sp,d0
    f526:	          move.l d0,-(sp)
    f528:	          move.l 16(sp),-(sp)
    f52c:	          move.l 16(sp),-(sp)
    f530:	          jsr f364 <getFuncNumForCallback>
    f536:	          lea 12(sp),sp
    f53a:	          tst.w d0
    f53c:	/-------- beq.s f568 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    f53e:	|         move.l 190ca <noStack>,d1
    f544:	|         move.l (sp),d0
    f546:	|         pea 1 <_start+0x1>
    f54a:	|         move.l d1,-(sp)
    f54c:	|         clr.l -(sp)
    f54e:	|         clr.l -(sp)
    f550:	|         move.l d0,-(sp)
    f552:	|         jsr 4604 <startNewFunctionNum>
    f558:	|         lea 20(sp),sp
    f55c:	|         tst.l d0
    f55e:	|     /-- bne.s f564 <builtIn_spawnSub+0x42>
    f560:	|     |   moveq #1,d0
    f562:	|  /--|-- bra.s f56a <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    f564:	|  |  \-> moveq #2,d0
    f566:	|  +----- bra.s f56a <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    f568:	\--|----> moveq #1,d0
}
    f56a:	   \----> addq.l #4,sp
    f56c:	          rts

0000f56e <builtIn_cancelSub>:

builtIn (cancelSub)
{
    f56e:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    f570:	          move.l sp,d0
    f572:	          addq.l #4,d0
    f574:	          move.l d0,-(sp)
    f576:	          move.l 20(sp),-(sp)
    f57a:	          move.l 20(sp),-(sp)
    f57e:	          jsr f364 <getFuncNumForCallback>
    f584:	          lea 12(sp),sp
    f588:	          tst.w d0
    f58a:	/-------- beq.s f5c0 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    f58c:	|         move.l 4(sp),d1
    f590:	|         move.l sp,d0
    f592:	|         addq.l #2,d0
    f594:	|         move.l d0,-(sp)
    f596:	|         move.l 20(sp),-(sp)
    f59a:	|         move.l d1,-(sp)
    f59c:	|         jsr 25bc <cancelAFunction>
    f5a2:	|         lea 12(sp),sp
		if (killedMyself) {
    f5a6:	|         move.w 2(sp),d0
    f5aa:	|  /----- beq.s f5bc <builtIn_cancelSub+0x4e>
			abortFunction (fun);
    f5ac:	|  |      move.l 16(sp),-(sp)
    f5b0:	|  |      jsr 24da <abortFunction>
    f5b6:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
    f5b8:	|  |      moveq #5,d0
    f5ba:	|  |  /-- bra.s f5c2 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
    f5bc:	|  \--|-> moveq #2,d0
    f5be:	|     +-- bra.s f5c2 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
    f5c0:	\-----|-> moveq #1,d0
}
    f5c2:	      \-> addq.l #8,sp
    f5c4:	          rts

0000f5c6 <builtIn_stringWidth>:

builtIn(stringWidth)
{
    f5c6:	       subq.l #8,sp
    f5c8:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
    f5ca:	       movea.l 20(sp),a0
    f5ce:	       move.l 24(a0),d0
    f5d2:	       move.l d0,-(sp)
    f5d4:	       jsr 12346 <getTextFromAnyVar>
    f5da:	       addq.l #4,sp
    f5dc:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
    f5e0:	   /-- bne.s f5e6 <builtIn_stringWidth+0x20>
    f5e2:	   |   moveq #1,d0
    f5e4:	/--|-- bra.s f634 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
    f5e6:	|  \-> moveq #24,d0
    f5e8:	|      add.l 20(sp),d0
    f5ec:	|      move.l d0,-(sp)
    f5ee:	|      jsr 126f4 <trimStack>
    f5f4:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
    f5f6:	|      move.l 8(sp),-(sp)
    f5fa:	|      jsr 1274e <stringWidth>
    f600:	|      addq.l #4,sp
    f602:	|      move.l d0,d1
    f604:	|      moveq #28,d0
    f606:	|      add.l 20(sp),d0
    f60a:	|      move.l d1,-(sp)
    f60c:	|      pea 1 <_start+0x1>
    f610:	|      move.l d0,-(sp)
    f612:	|      jsr 12662 <setVariable>
    f618:	|      lea 12(sp),sp
	FreeVec(theText);
    f61c:	|      move.l 8(sp),4(sp)
    f622:	|      move.l 190fa <SysBase>,d0
    f628:	|      movea.l d0,a6
    f62a:	|      movea.l 4(sp),a1
    f62e:	|      jsr -690(a6)
	return BR_CONTINUE;
    f632:	|      moveq #2,d0
}
    f634:	\----> movea.l (sp)+,a6
    f636:	       addq.l #8,sp
    f638:	       rts

0000f63a <builtIn_hardScroll>:

builtIn(hardScroll)
{
    f63a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f63c:	       movea.l 12(sp),a0
    f640:	       move.l 24(a0),d0
    f644:	       move.l d0,-(sp)
    f646:	       pea 1 <_start+0x1>
    f64a:	       move.l sp,d0
    f64c:	       addq.l #8,d0
    f64e:	       move.l d0,-(sp)
    f650:	       jsr 11d70 <getValueType>
    f656:	       lea 12(sp),sp
    f65a:	       tst.w d0
    f65c:	   /-- bne.s f662 <builtIn_hardScroll+0x28>
    f65e:	   |   moveq #1,d0
    f660:	/--|-- bra.s f680 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
    f662:	|  \-> moveq #24,d0
    f664:	|      add.l 12(sp),d0
    f668:	|      move.l d0,-(sp)
    f66a:	|      jsr 126f4 <trimStack>
    f670:	|      addq.l #4,sp
	hardScroll (v);
    f672:	|      move.l (sp),d0
    f674:	|      move.l d0,-(sp)
    f676:	|      jsr a904 <hardScroll>
    f67c:	|      addq.l #4,sp
	return BR_CONTINUE;
    f67e:	|      moveq #2,d0
}
    f680:	\----> addq.l #4,sp
    f682:	       rts

0000f684 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
    f684:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f686:	       movea.l 12(sp),a0
    f68a:	       move.l 24(a0),d0
    f68e:	       move.l d0,-(sp)
    f690:	       pea 7 <_start+0x7>
    f694:	       move.l sp,d0
    f696:	       addq.l #8,d0
    f698:	       move.l d0,-(sp)
    f69a:	       jsr 11d70 <getValueType>
    f6a0:	       lea 12(sp),sp
    f6a4:	       tst.w d0
    f6a6:	   /-- bne.s f6ac <builtIn_isScreenRegion+0x28>
    f6a8:	   |   moveq #1,d0
    f6aa:	/--|-- bra.s f6ec <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
    f6ac:	|  \-> moveq #24,d0
    f6ae:	|      add.l 12(sp),d0
    f6b2:	|      move.l d0,-(sp)
    f6b4:	|      jsr 126f4 <trimStack>
    f6ba:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
    f6bc:	|      move.l (sp),d0
    f6be:	|      move.l d0,-(sp)
    f6c0:	|      jsr 1283a <getRegionForObject>
    f6c6:	|      addq.l #4,sp
    f6c8:	|      tst.l d0
    f6ca:	|      sne d0
    f6cc:	|      neg.b d0
    f6ce:	|      moveq #0,d1
    f6d0:	|      move.b d0,d1
    f6d2:	|      moveq #28,d0
    f6d4:	|      add.l 12(sp),d0
    f6d8:	|      move.l d1,-(sp)
    f6da:	|      pea 1 <_start+0x1>
    f6de:	|      move.l d0,-(sp)
    f6e0:	|      jsr 12662 <setVariable>
    f6e6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f6ea:	|      moveq #2,d0
}
    f6ec:	\----> addq.l #4,sp
    f6ee:	       rts

0000f6f0 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
    f6f0:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f6f2:	       movea.l 12(sp),a0
    f6f6:	       move.l 24(a0),d0
    f6fa:	       move.l d0,-(sp)
    f6fc:	       pea 1 <_start+0x1>
    f700:	       move.l sp,d0
    f702:	       addq.l #8,d0
    f704:	       move.l d0,-(sp)
    f706:	       jsr 11d70 <getValueType>
    f70c:	       lea 12(sp),sp
    f710:	       tst.w d0
    f712:	   /-- bne.s f718 <builtIn_setSpeechSpeed+0x28>
    f714:	   |   moveq #1,d0
    f716:	/--|-- bra.s f766 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
    f718:	|  \-> moveq #24,d0
    f71a:	|      add.l 12(sp),d0
    f71e:	|      move.l d0,-(sp)
    f720:	|      jsr 126f4 <trimStack>
    f726:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
    f728:	|      move.l (sp),d0
    f72a:	|      move.l d0,-(sp)
    f72c:	|      jsr 141f4 <__floatsisf>
    f732:	|      addq.l #4,sp
    f734:	|      move.l #1008981770,-(sp)
    f73a:	|      move.l d0,-(sp)
    f73c:	|      jsr 142a6 <__mulsf3>
    f742:	|      addq.l #8,sp
    f744:	|      move.l d0,18a9e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
    f74a:	|      moveq #28,d0
    f74c:	|      add.l 12(sp),d0
    f750:	|      pea 1 <_start+0x1>
    f754:	|      pea 1 <_start+0x1>
    f758:	|      move.l d0,-(sp)
    f75a:	|      jsr 12662 <setVariable>
    f760:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f764:	|      moveq #2,d0
}
    f766:	\----> addq.l #4,sp
    f768:	       rts

0000f76a <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
    f76a:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f76c:	       movea.l 12(sp),a0
    f770:	       move.l 24(a0),d0
    f774:	       move.l d0,-(sp)
    f776:	       pea 1 <_start+0x1>
    f77a:	       move.l sp,d0
    f77c:	       addq.l #8,d0
    f77e:	       move.l d0,-(sp)
    f780:	       jsr 11d70 <getValueType>
    f786:	       lea 12(sp),sp
    f78a:	       tst.w d0
    f78c:	   /-- bne.s f792 <builtIn_setFontSpacing+0x28>
    f78e:	   |   moveq #1,d0
    f790:	/--|-- bra.s f7c8 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
    f792:	|  \-> move.l (sp),d0
    f794:	|      move.l d0,d0
    f796:	|      move.w d0,19018 <fontSpace>
	trimStack (&fun -> stack);
    f79c:	|      moveq #24,d0
    f79e:	|      add.l 12(sp),d0
    f7a2:	|      move.l d0,-(sp)
    f7a4:	|      jsr 126f4 <trimStack>
    f7aa:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    f7ac:	|      moveq #28,d0
    f7ae:	|      add.l 12(sp),d0
    f7b2:	|      pea 1 <_start+0x1>
    f7b6:	|      pea 1 <_start+0x1>
    f7ba:	|      move.l d0,-(sp)
    f7bc:	|      jsr 12662 <setVariable>
    f7c2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f7c6:	|      moveq #2,d0
}
    f7c8:	\----> addq.l #4,sp
    f7ca:	       rts

0000f7cc <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
    f7cc:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f7ce:	          movea.l 12(sp),a0
    f7d2:	          move.l 24(a0),d0
    f7d6:	          move.l d0,-(sp)
    f7d8:	          pea 1 <_start+0x1>
    f7dc:	          move.l sp,d0
    f7de:	          addq.l #8,d0
    f7e0:	          move.l d0,-(sp)
    f7e2:	          jsr 11d70 <getValueType>
    f7e8:	          lea 12(sp),sp
    f7ec:	          tst.w d0
    f7ee:	      /-- bne.s f7f4 <builtIn_transitionLevel+0x28>
    f7f0:	      |   moveq #1,d0
    f7f2:	/-----|-- bra.s f848 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
    f7f4:	|     \-> moveq #24,d0
    f7f6:	|         add.l 12(sp),d0
    f7fa:	|         move.l d0,-(sp)
    f7fc:	|         jsr 126f4 <trimStack>
    f802:	|         addq.l #4,sp

	if (number < 0)
    f804:	|         move.l (sp),d0
    f806:	|     /-- bpl.s f810 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
    f808:	|     |   clr.b 18a8a <brightnessLevel>
    f80e:	|  /--|-- bra.s f82c <builtIn_transitionLevel+0x60>
	else if (number > 255)
    f810:	|  |  \-> move.l (sp),d0
    f812:	|  |      cmpi.l #255,d0
    f818:	|  |  /-- ble.s f822 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
    f81a:	|  |  |   st 18a8a <brightnessLevel>
    f820:	|  +--|-- bra.s f82c <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
    f822:	|  |  \-> move.l (sp),d0
    f824:	|  |      move.l d0,d0
    f826:	|  |      move.b d0,18a8a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
    f82c:	|  \----> moveq #28,d0
    f82e:	|         add.l 12(sp),d0
    f832:	|         pea 1 <_start+0x1>
    f836:	|         pea 1 <_start+0x1>
    f83a:	|         move.l d0,-(sp)
    f83c:	|         jsr 12662 <setVariable>
    f842:	|         lea 12(sp),sp
	return BR_CONTINUE;
    f846:	|         moveq #2,d0
}
    f848:	\-------> addq.l #4,sp
    f84a:	          rts

0000f84c <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
    f84c:	movea.l 8(sp),a0
    f850:	move.l 24(a0),d0
    f854:	move.l d0,-(sp)
    f856:	jsr 122b0 <getBoolean>
    f85c:	addq.l #4,sp
    f85e:	move.w d0,1909a <captureAllKeys>
	trimStack (&fun -> stack);
    f864:	moveq #24,d0
    f866:	add.l 8(sp),d0
    f86a:	move.l d0,-(sp)
    f86c:	jsr 126f4 <trimStack>
    f872:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
    f874:	move.w 1909a <captureAllKeys>,d0
    f87a:	movea.w d0,a0
    f87c:	moveq #28,d0
    f87e:	add.l 8(sp),d0
    f882:	move.l a0,-(sp)
    f884:	pea 1 <_start+0x1>
    f888:	move.l d0,-(sp)
    f88a:	jsr 12662 <setVariable>
    f890:	lea 12(sp),sp
	return BR_CONTINUE;
    f894:	moveq #2,d0
}
    f896:	rts

0000f898 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
    f898:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f89c:	       movea.l 20(sp),a0
    f8a0:	       move.l 24(a0),d0
    f8a4:	       move.l d0,-(sp)
    f8a6:	       pea 1 <_start+0x1>
    f8aa:	       moveq #12,d0
    f8ac:	       add.l sp,d0
    f8ae:	       move.l d0,-(sp)
    f8b0:	       jsr 11d70 <getValueType>
    f8b6:	       lea 12(sp),sp
    f8ba:	       tst.w d0
    f8bc:	   /-- bne.s f8c4 <builtIn_spinCharacter+0x2c>
    f8be:	   |   moveq #1,d0
    f8c0:	/--|-- bra.w f974 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    f8c4:	|  \-> moveq #24,d0
    f8c6:	|      add.l 20(sp),d0
    f8ca:	|      move.l d0,-(sp)
    f8cc:	|      jsr 126f4 <trimStack>
    f8d2:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f8d4:	|      movea.l 20(sp),a0
    f8d8:	|      move.l 24(a0),d0
    f8dc:	|      move.l d0,-(sp)
    f8de:	|      pea 7 <_start+0x7>
    f8e2:	|      lea 8(sp),a0
    f8e6:	|      move.l a0,-(sp)
    f8e8:	|      jsr 11d70 <getValueType>
    f8ee:	|      lea 12(sp),sp
    f8f2:	|      tst.w d0
    f8f4:	|  /-- bne.s f8fa <builtIn_spinCharacter+0x62>
    f8f6:	|  |   moveq #1,d0
    f8f8:	+--|-- bra.s f974 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    f8fa:	|  \-> moveq #24,d0
    f8fc:	|      add.l 20(sp),d0
    f900:	|      move.l d0,-(sp)
    f902:	|      jsr 126f4 <trimStack>
    f908:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    f90a:	|      move.l (sp),d0
    f90c:	|      move.l d0,-(sp)
    f90e:	|      jsr 7e5a <findPerson>
    f914:	|      addq.l #4,sp
    f916:	|      move.l d0,8(sp)
	if (thisPerson) {
    f91a:	|  /-- beq.s f95a <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
    f91c:	|  |   move.l 4(sp),d0
    f920:	|  |   movea.l 8(sp),a0
    f924:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
    f928:	|  |   movea.l 8(sp),a0
    f92c:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
    f932:	|  |   movea.l 8(sp),a0
    f936:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    f93c:	|  |   moveq #28,d0
    f93e:	|  |   add.l 20(sp),d0
    f942:	|  |   pea 1 <_start+0x1>
    f946:	|  |   pea 1 <_start+0x1>
    f94a:	|  |   move.l d0,-(sp)
    f94c:	|  |   jsr 12662 <setVariable>
    f952:	|  |   lea 12(sp),sp
		return BR_PAUSE;
    f956:	|  |   moveq #3,d0
    f958:	+--|-- bra.s f974 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f95a:	|  \-> moveq #28,d0
    f95c:	|      add.l 20(sp),d0
    f960:	|      clr.l -(sp)
    f962:	|      pea 1 <_start+0x1>
    f966:	|      move.l d0,-(sp)
    f968:	|      jsr 12662 <setVariable>
    f96e:	|      lea 12(sp),sp
		return BR_CONTINUE;
    f972:	|      moveq #2,d0
	}
}
    f974:	\----> lea 12(sp),sp
    f978:	       rts

0000f97a <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
    f97a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f97c:	          movea.l 16(sp),a0
    f980:	          move.l 24(a0),d0
    f984:	          move.l d0,-(sp)
    f986:	          pea 7 <_start+0x7>
    f98a:	          move.l sp,d0
    f98c:	          addq.l #8,d0
    f98e:	          move.l d0,-(sp)
    f990:	          jsr 11d70 <getValueType>
    f996:	          lea 12(sp),sp
    f99a:	          tst.w d0
    f99c:	      /-- bne.s f9a2 <builtIn_getCharacterDirection+0x28>
    f99e:	      |   moveq #1,d0
    f9a0:	/-----|-- bra.s fa00 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
    f9a2:	|     \-> moveq #24,d0
    f9a4:	|         add.l 16(sp),d0
    f9a8:	|         move.l d0,-(sp)
    f9aa:	|         jsr 126f4 <trimStack>
    f9b0:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    f9b2:	|         move.l (sp),d0
    f9b4:	|         move.l d0,-(sp)
    f9b6:	|         jsr 7e5a <findPerson>
    f9bc:	|         addq.l #4,sp
    f9be:	|         move.l d0,4(sp)
	if (thisPerson) {
    f9c2:	|  /----- beq.s f9e6 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
    f9c4:	|  |      movea.l 4(sp),a0
    f9c8:	|  |      move.l 94(a0),d1
    f9cc:	|  |      moveq #28,d0
    f9ce:	|  |      add.l 16(sp),d0
    f9d2:	|  |      move.l d1,-(sp)
    f9d4:	|  |      pea 1 <_start+0x1>
    f9d8:	|  |      move.l d0,-(sp)
    f9da:	|  |      jsr 12662 <setVariable>
    f9e0:	|  |      lea 12(sp),sp
    f9e4:	|  |  /-- bra.s f9fe <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f9e6:	|  \--|-> moveq #28,d0
    f9e8:	|     |   add.l 16(sp),d0
    f9ec:	|     |   clr.l -(sp)
    f9ee:	|     |   pea 1 <_start+0x1>
    f9f2:	|     |   move.l d0,-(sp)
    f9f4:	|     |   jsr 12662 <setVariable>
    f9fa:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f9fe:	|     \-> moveq #2,d0
}
    fa00:	\-------> addq.l #8,sp
    fa02:	          rts

0000fa04 <builtIn_isCharacter>:

builtIn(isCharacter)
{
    fa04:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fa06:	       movea.l 16(sp),a0
    fa0a:	       move.l 24(a0),d0
    fa0e:	       move.l d0,-(sp)
    fa10:	       pea 7 <_start+0x7>
    fa14:	       move.l sp,d0
    fa16:	       addq.l #8,d0
    fa18:	       move.l d0,-(sp)
    fa1a:	       jsr 11d70 <getValueType>
    fa20:	       lea 12(sp),sp
    fa24:	       tst.w d0
    fa26:	   /-- bne.s fa2c <builtIn_isCharacter+0x28>
    fa28:	   |   moveq #1,d0
    fa2a:	/--|-- bra.s fa6e <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
    fa2c:	|  \-> moveq #24,d0
    fa2e:	|      add.l 16(sp),d0
    fa32:	|      move.l d0,-(sp)
    fa34:	|      jsr 126f4 <trimStack>
    fa3a:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    fa3c:	|      move.l (sp),d0
    fa3e:	|      move.l d0,-(sp)
    fa40:	|      jsr 7e5a <findPerson>
    fa46:	|      addq.l #4,sp
    fa48:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
    fa4c:	|      sne d0
    fa4e:	|      neg.b d0
    fa50:	|      moveq #0,d1
    fa52:	|      move.b d0,d1
    fa54:	|      moveq #28,d0
    fa56:	|      add.l 16(sp),d0
    fa5a:	|      move.l d1,-(sp)
    fa5c:	|      pea 1 <_start+0x1>
    fa60:	|      move.l d0,-(sp)
    fa62:	|      jsr 12662 <setVariable>
    fa68:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fa6c:	|      moveq #2,d0
}
    fa6e:	\----> addq.l #8,sp
    fa70:	       rts

0000fa72 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
    fa72:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fa74:	          movea.l 16(sp),a0
    fa78:	          move.l 24(a0),d0
    fa7c:	          move.l d0,-(sp)
    fa7e:	          pea 7 <_start+0x7>
    fa82:	          move.l sp,d0
    fa84:	          addq.l #8,d0
    fa86:	          move.l d0,-(sp)
    fa88:	          jsr 11d70 <getValueType>
    fa8e:	          lea 12(sp),sp
    fa92:	          tst.w d0
    fa94:	      /-- bne.s fa9a <builtIn_normalCharacter+0x28>
    fa96:	      |   moveq #1,d0
    fa98:	/-----|-- bra.s fb16 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
    fa9a:	|     \-> moveq #24,d0
    fa9c:	|         add.l 16(sp),d0
    faa0:	|         move.l d0,-(sp)
    faa2:	|         jsr 126f4 <trimStack>
    faa8:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    faaa:	|         move.l (sp),d0
    faac:	|         move.l d0,-(sp)
    faae:	|         jsr 7e5a <findPerson>
    fab4:	|         addq.l #4,sp
    fab6:	|         move.l d0,4(sp)
	if (thisPerson)
    faba:	|  /----- beq.s fafc <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
    fabc:	|  |      movea.l 4(sp),a0
    fac0:	|  |      movea.l 68(a0),a0
    fac4:	|  |      move.l (a0),d1
    fac6:	|  |      movea.l 4(sp),a0
    faca:	|  |      move.l 94(a0),d0
    face:	|  |      add.l d0,d0
    fad0:	|  |      add.l d0,d0
    fad2:	|  |      movea.l d1,a0
    fad4:	|  |      adda.l d0,a0
    fad6:	|  |      move.l (a0),d0
    fad8:	|  |      movea.l 4(sp),a0
    fadc:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    fae0:	|  |      moveq #28,d0
    fae2:	|  |      add.l 16(sp),d0
    fae6:	|  |      pea 1 <_start+0x1>
    faea:	|  |      pea 1 <_start+0x1>
    faee:	|  |      move.l d0,-(sp)
    faf0:	|  |      jsr 12662 <setVariable>
    faf6:	|  |      lea 12(sp),sp
    fafa:	|  |  /-- bra.s fb14 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    fafc:	|  \--|-> moveq #28,d0
    fafe:	|     |   add.l 16(sp),d0
    fb02:	|     |   clr.l -(sp)
    fb04:	|     |   pea 1 <_start+0x1>
    fb08:	|     |   move.l d0,-(sp)
    fb0a:	|     |   jsr 12662 <setVariable>
    fb10:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    fb14:	|     \-> moveq #2,d0
}
    fb16:	\-------> addq.l #8,sp
    fb18:	          rts

0000fb1a <builtIn_isMoving>:

builtIn(isMoving)
{
    fb1a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fb1c:	          movea.l 16(sp),a0
    fb20:	          move.l 24(a0),d0
    fb24:	          move.l d0,-(sp)
    fb26:	          pea 7 <_start+0x7>
    fb2a:	          move.l sp,d0
    fb2c:	          addq.l #8,d0
    fb2e:	          move.l d0,-(sp)
    fb30:	          jsr 11d70 <getValueType>
    fb36:	          lea 12(sp),sp
    fb3a:	          tst.w d0
    fb3c:	      /-- bne.s fb42 <builtIn_isMoving+0x28>
    fb3e:	      |   moveq #1,d0
    fb40:	/-----|-- bra.s fba2 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
    fb42:	|     \-> moveq #24,d0
    fb44:	|         add.l 16(sp),d0
    fb48:	|         move.l d0,-(sp)
    fb4a:	|         jsr 126f4 <trimStack>
    fb50:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    fb52:	|         move.l (sp),d0
    fb54:	|         move.l d0,-(sp)
    fb56:	|         jsr 7e5a <findPerson>
    fb5c:	|         addq.l #4,sp
    fb5e:	|         move.l d0,4(sp)
	if (thisPerson)
    fb62:	|  /----- beq.s fb88 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
    fb64:	|  |      movea.l 4(sp),a0
    fb68:	|  |      move.w 52(a0),d0
    fb6c:	|  |      movea.w d0,a0
    fb6e:	|  |      moveq #28,d0
    fb70:	|  |      add.l 16(sp),d0
    fb74:	|  |      move.l a0,-(sp)
    fb76:	|  |      pea 1 <_start+0x1>
    fb7a:	|  |      move.l d0,-(sp)
    fb7c:	|  |      jsr 12662 <setVariable>
    fb82:	|  |      lea 12(sp),sp
    fb86:	|  |  /-- bra.s fba0 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    fb88:	|  \--|-> moveq #28,d0
    fb8a:	|     |   add.l 16(sp),d0
    fb8e:	|     |   clr.l -(sp)
    fb90:	|     |   pea 1 <_start+0x1>
    fb94:	|     |   move.l d0,-(sp)
    fb96:	|     |   jsr 12662 <setVariable>
    fb9c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    fba0:	|     \-> moveq #2,d0
}
    fba2:	\-------> addq.l #8,sp
    fba4:	          rts

0000fba6 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
    fba6:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fbaa:	          movea.l 20(sp),a0
    fbae:	          move.l 24(a0),d0
    fbb2:	          move.l d0,-(sp)
    fbb4:	          pea 7 <_start+0x7>
    fbb8:	          lea 8(sp),a0
    fbbc:	          move.l a0,-(sp)
    fbbe:	          jsr 11d70 <getValueType>
    fbc4:	          lea 12(sp),sp
    fbc8:	          tst.w d0
    fbca:	      /-- bne.s fbd2 <builtIn_fetchEvent+0x2c>
    fbcc:	      |   moveq #1,d0
    fbce:	/-----|-- bra.w fc66 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    fbd2:	|     \-> moveq #24,d0
    fbd4:	|         add.l 20(sp),d0
    fbd8:	|         move.l d0,-(sp)
    fbda:	|         jsr 126f4 <trimStack>
    fbe0:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fbe2:	|         movea.l 20(sp),a0
    fbe6:	|         move.l 24(a0),d0
    fbea:	|         move.l d0,-(sp)
    fbec:	|         pea 7 <_start+0x7>
    fbf0:	|         moveq #12,d0
    fbf2:	|         add.l sp,d0
    fbf4:	|         move.l d0,-(sp)
    fbf6:	|         jsr 11d70 <getValueType>
    fbfc:	|         lea 12(sp),sp
    fc00:	|         tst.w d0
    fc02:	|     /-- bne.s fc08 <builtIn_fetchEvent+0x62>
    fc04:	|     |   moveq #1,d0
    fc06:	+-----|-- bra.s fc66 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    fc08:	|     \-> moveq #24,d0
    fc0a:	|         add.l 20(sp),d0
    fc0e:	|         move.l d0,-(sp)
    fc10:	|         jsr 126f4 <trimStack>
    fc16:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    fc18:	|         move.l (sp),d1
    fc1a:	|         move.l 4(sp),d0
    fc1e:	|         move.l d1,-(sp)
    fc20:	|         move.l d0,-(sp)
    fc22:	|         jsr abda <getCombinationFunction>
    fc28:	|         addq.l #8,sp
    fc2a:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
    fc2e:	|  /----- beq.s fc4c <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    fc30:	|  |      moveq #28,d0
    fc32:	|  |      add.l 20(sp),d0
    fc36:	|  |      move.l 8(sp),-(sp)
    fc3a:	|  |      pea 2 <_start+0x2>
    fc3e:	|  |      move.l d0,-(sp)
    fc40:	|  |      jsr 12662 <setVariable>
    fc46:	|  |      lea 12(sp),sp
    fc4a:	|  |  /-- bra.s fc64 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    fc4c:	|  \--|-> moveq #28,d0
    fc4e:	|     |   add.l 20(sp),d0
    fc52:	|     |   clr.l -(sp)
    fc54:	|     |   pea 1 <_start+0x1>
    fc58:	|     |   move.l d0,-(sp)
    fc5a:	|     |   jsr 12662 <setVariable>
    fc60:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    fc64:	|     \-> moveq #2,d0
}
    fc66:	\-------> lea 12(sp),sp
    fc6a:	          rts

0000fc6c <builtIn_deleteFile>:

builtIn(deleteFile)
{
    fc6c:	       lea -24(sp),sp
    fc70:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
    fc72:	       movea.l 36(sp),a0
    fc76:	       move.l 24(a0),d0
    fc7a:	       move.l d0,-(sp)
    fc7c:	       jsr 12346 <getTextFromAnyVar>
    fc82:	       addq.l #4,sp
    fc84:	       move.l d0,24(sp)
    trimStack(&fun->stack);
    fc88:	       moveq #24,d0
    fc8a:	       add.l 36(sp),d0
    fc8e:	       move.l d0,-(sp)
    fc90:	       jsr 126f4 <trimStack>
    fc96:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
    fc98:	       move.l 24(sp),-(sp)
    fc9c:	       jsr 2fe <encodeFilename>
    fca2:	       addq.l #4,sp
    fca4:	       move.l d0,20(sp)
    FreeVec(namNormal);
    fca8:	       move.l 24(sp),16(sp)
    fcae:	       move.l 190fa <SysBase>,d0
    fcb4:	       movea.l d0,a6
    fcb6:	       movea.l 16(sp),a1
    fcba:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
    fcbe:	       move.l 20(sp),-(sp)
    fcc2:	       jsr b992 <failSecurityCheck>
    fcc8:	       addq.l #4,sp
    fcca:	       tst.w d0
    fccc:	   /-- beq.s fcd2 <builtIn_deleteFile+0x66>
    fcce:	   |   moveq #1,d0
    fcd0:	/--|-- bra.s fd20 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
    fcd2:	|  \-> move.l 20(sp),12(sp)
    fcd8:	|      move.l 19102 <DOSBase>,d0
    fcde:	|      movea.l d0,a6
    fce0:	|      move.l 12(sp),d1
    fce4:	|      jsr -72(a6)
    fce8:	|      move.l d0,8(sp)
    fcec:	|      move.l 8(sp),d1
    fcf0:	|      moveq #28,d0
    fcf2:	|      add.l 36(sp),d0
    fcf6:	|      move.l d1,-(sp)
    fcf8:	|      pea 1 <_start+0x1>
    fcfc:	|      move.l d0,-(sp)
    fcfe:	|      jsr 12662 <setVariable>
    fd04:	|      lea 12(sp),sp
    FreeVec(nam);
    fd08:	|      move.l 20(sp),4(sp)
    fd0e:	|      move.l 190fa <SysBase>,d0
    fd14:	|      movea.l d0,a6
    fd16:	|      movea.l 4(sp),a1
    fd1a:	|      jsr -690(a6)

    return BR_CONTINUE;
    fd1e:	|      moveq #2,d0
}
    fd20:	\----> movea.l (sp)+,a6
    fd22:	       lea 24(sp),sp
    fd26:	       rts

0000fd28 <builtIn_renameFile>:

builtIn(renameFile)
{
    fd28:	       lea -40(sp),sp
    fd2c:	       move.l a6,-(sp)
    fd2e:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    fd30:	       movea.l 56(sp),a0
    fd34:	       move.l 24(a0),d0
    fd38:	       move.l d0,-(sp)
    fd3a:	       jsr 12346 <getTextFromAnyVar>
    fd40:	       addq.l #4,sp
    fd42:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
    fd46:	       move.l 44(sp),-(sp)
    fd4a:	       jsr 2fe <encodeFilename>
    fd50:	       addq.l #4,sp
    fd52:	       move.l d0,40(sp)
	trimStack(&fun->stack);
    fd56:	       moveq #24,d0
    fd58:	       add.l 56(sp),d0
    fd5c:	       move.l d0,-(sp)
    fd5e:	       jsr 126f4 <trimStack>
    fd64:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
    fd66:	       move.l 40(sp),-(sp)
    fd6a:	       jsr b992 <failSecurityCheck>
    fd70:	       addq.l #4,sp
    fd72:	       tst.w d0
    fd74:	   /-- beq.s fd7c <builtIn_renameFile+0x54>
    fd76:	   |   moveq #1,d0
    fd78:	/--|-- bra.w fe62 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    fd7c:	|  \-> move.l 44(sp),36(sp)
    fd82:	|      move.l 190fa <SysBase>,d0
    fd88:	|      movea.l d0,a6
    fd8a:	|      movea.l 36(sp),a1
    fd8e:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    fd92:	|      movea.l 56(sp),a0
    fd96:	|      move.l 24(a0),d0
    fd9a:	|      move.l d0,-(sp)
    fd9c:	|      jsr 12346 <getTextFromAnyVar>
    fda2:	|      addq.l #4,sp
    fda4:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
    fda8:	|      move.l 44(sp),-(sp)
    fdac:	|      jsr 2fe <encodeFilename>
    fdb2:	|      addq.l #4,sp
    fdb4:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
    fdb8:	|      moveq #24,d0
    fdba:	|      add.l 56(sp),d0
    fdbe:	|      move.l d0,-(sp)
    fdc0:	|      jsr 126f4 <trimStack>
    fdc6:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
    fdc8:	|      move.l 32(sp),-(sp)
    fdcc:	|      jsr b992 <failSecurityCheck>
    fdd2:	|      addq.l #4,sp
    fdd4:	|      tst.w d0
    fdd6:	|  /-- beq.s fdde <builtIn_renameFile+0xb6>
    fdd8:	|  |   moveq #1,d0
    fdda:	+--|-- bra.w fe62 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    fdde:	|  \-> move.l 44(sp),28(sp)
    fde4:	|      move.l 190fa <SysBase>,d0
    fdea:	|      movea.l d0,a6
    fdec:	|      movea.l 28(sp),a1
    fdf0:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
    fdf4:	|      move.l 32(sp),24(sp)
    fdfa:	|      move.l 40(sp),20(sp)
    fe00:	|      move.l 19102 <DOSBase>,d0
    fe06:	|      movea.l d0,a6
    fe08:	|      move.l 24(sp),d1
    fe0c:	|      move.l 20(sp),d2
    fe10:	|      jsr -78(a6)
    fe14:	|      move.l d0,16(sp)
    fe18:	|      move.l 16(sp),d1
    fe1c:	|      moveq #28,d0
    fe1e:	|      add.l 56(sp),d0
    fe22:	|      move.l d1,-(sp)
    fe24:	|      pea 1 <_start+0x1>
    fe28:	|      move.l d0,-(sp)
    fe2a:	|      jsr 12662 <setVariable>
    fe30:	|      lea 12(sp),sp
	FreeVec(nam);
    fe34:	|      move.l 32(sp),12(sp)
    fe3a:	|      move.l 190fa <SysBase>,d0
    fe40:	|      movea.l d0,a6
    fe42:	|      movea.l 12(sp),a1
    fe46:	|      jsr -690(a6)
	FreeVec(newnam);
    fe4a:	|      move.l 40(sp),8(sp)
    fe50:	|      move.l 190fa <SysBase>,d0
    fe56:	|      movea.l d0,a6
    fe58:	|      movea.l 8(sp),a1
    fe5c:	|      jsr -690(a6)

	return BR_CONTINUE;
    fe60:	|      moveq #2,d0
}
    fe62:	\----> move.l (sp)+,d2
    fe64:	       movea.l (sp)+,a6
    fe66:	       lea 40(sp),sp
    fe6a:	       rts

0000fe6c <builtIn_cacheSound>:

builtIn(cacheSound)
{
    fe6c:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fe6e:	       movea.l 12(sp),a0
    fe72:	       move.l 24(a0),d0
    fe76:	       move.l d0,-(sp)
    fe78:	       pea 5 <_start+0x5>
    fe7c:	       move.l sp,d0
    fe7e:	       addq.l #8,d0
    fe80:	       move.l d0,-(sp)
    fe82:	       jsr 11d70 <getValueType>
    fe88:	       lea 12(sp),sp
    fe8c:	       tst.w d0
    fe8e:	   /-- bne.s fe94 <builtIn_cacheSound+0x28>
    fe90:	   |   moveq #1,d0
    fe92:	/--|-- bra.s febc <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
    fe94:	|  \-> moveq #24,d0
    fe96:	|      add.l 12(sp),d0
    fe9a:	|      move.l d0,-(sp)
    fe9c:	|      jsr 126f4 <trimStack>
    fea2:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
    fea4:	|      move.l (sp),d0
    fea6:	|      move.l d0,-(sp)
    fea8:	|      jsr a7e6 <cacheSound>
    feae:	|      addq.l #4,sp
    feb0:	|      moveq #-1,d1
    feb2:	|      cmp.l d0,d1
    feb4:	|  /-- bne.s feba <builtIn_cacheSound+0x4e>
    feb6:	|  |   moveq #1,d0
    feb8:	+--|-- bra.s febc <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
    feba:	|  \-> moveq #2,d0
}
    febc:	\----> addq.l #4,sp
    febe:	       rts

0000fec0 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
    fec0:	pea 163ea <custom.c.64ca0e9f+0x1714>
    fec6:	jsr 13db8 <KPrintF>
    fecc:	addq.l #4,sp
	return BR_CONTINUE;
    fece:	moveq #2,d0
}
    fed0:	rts

0000fed2 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
    fed2:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fed6:	          movea.l 20(sp),a0
    feda:	          move.l 24(a0),d0
    fede:	          move.l d0,-(sp)
    fee0:	          pea 1 <_start+0x1>
    fee4:	          moveq #12,d0
    fee6:	          add.l sp,d0
    fee8:	          move.l d0,-(sp)
    feea:	          jsr 11d70 <getValueType>
    fef0:	          lea 12(sp),sp
    fef4:	          tst.w d0
    fef6:	      /-- bne.s fefe <builtIn_setCharacterSpinSpeed+0x2c>
    fef8:	      |   moveq #1,d0
    fefa:	/-----|-- bra.w ff98 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    fefe:	|     \-> moveq #24,d0
    ff00:	|         add.l 20(sp),d0
    ff04:	|         move.l d0,-(sp)
    ff06:	|         jsr 126f4 <trimStack>
    ff0c:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ff0e:	|         movea.l 20(sp),a0
    ff12:	|         move.l 24(a0),d0
    ff16:	|         move.l d0,-(sp)
    ff18:	|         pea 7 <_start+0x7>
    ff1c:	|         lea 8(sp),a0
    ff20:	|         move.l a0,-(sp)
    ff22:	|         jsr 11d70 <getValueType>
    ff28:	|         lea 12(sp),sp
    ff2c:	|         tst.w d0
    ff2e:	|     /-- bne.s ff34 <builtIn_setCharacterSpinSpeed+0x62>
    ff30:	|     |   moveq #1,d0
    ff32:	+-----|-- bra.s ff98 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    ff34:	|     \-> moveq #24,d0
    ff36:	|         add.l 20(sp),d0
    ff3a:	|         move.l d0,-(sp)
    ff3c:	|         jsr 126f4 <trimStack>
    ff42:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    ff44:	|         move.l (sp),d0
    ff46:	|         move.l d0,-(sp)
    ff48:	|         jsr 7e5a <findPerson>
    ff4e:	|         addq.l #4,sp
    ff50:	|         move.l d0,8(sp)

	if (thisPerson) {
    ff54:	|  /----- beq.s ff7e <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
    ff56:	|  |      move.l 4(sp),d0
    ff5a:	|  |      movea.l 8(sp),a0
    ff5e:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    ff62:	|  |      moveq #28,d0
    ff64:	|  |      add.l 20(sp),d0
    ff68:	|  |      pea 1 <_start+0x1>
    ff6c:	|  |      pea 1 <_start+0x1>
    ff70:	|  |      move.l d0,-(sp)
    ff72:	|  |      jsr 12662 <setVariable>
    ff78:	|  |      lea 12(sp),sp
    ff7c:	|  |  /-- bra.s ff96 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ff7e:	|  \--|-> moveq #28,d0
    ff80:	|     |   add.l 20(sp),d0
    ff84:	|     |   clr.l -(sp)
    ff86:	|     |   pea 1 <_start+0x1>
    ff8a:	|     |   move.l d0,-(sp)
    ff8c:	|     |   jsr 12662 <setVariable>
    ff92:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ff96:	|     \-> moveq #2,d0
}
    ff98:	\-------> lea 12(sp),sp
    ff9c:	          rts

0000ff9e <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
    ff9e:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ffa2:	          movea.l 20(sp),a0
    ffa6:	          move.l 24(a0),d0
    ffaa:	          move.l d0,-(sp)
    ffac:	          pea 1 <_start+0x1>
    ffb0:	          moveq #12,d0
    ffb2:	          add.l sp,d0
    ffb4:	          move.l d0,-(sp)
    ffb6:	          jsr 11d70 <getValueType>
    ffbc:	          lea 12(sp),sp
    ffc0:	          tst.w d0
    ffc2:	      /-- bne.s ffca <builtIn_setCharacterAngleOffset+0x2c>
    ffc4:	      |   moveq #1,d0
    ffc6:	/-----|-- bra.w 10064 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    ffca:	|     \-> moveq #24,d0
    ffcc:	|         add.l 20(sp),d0
    ffd0:	|         move.l d0,-(sp)
    ffd2:	|         jsr 126f4 <trimStack>
    ffd8:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ffda:	|         movea.l 20(sp),a0
    ffde:	|         move.l 24(a0),d0
    ffe2:	|         move.l d0,-(sp)
    ffe4:	|         pea 7 <_start+0x7>
    ffe8:	|         lea 8(sp),a0
    ffec:	|         move.l a0,-(sp)
    ffee:	|         jsr 11d70 <getValueType>
    fff4:	|         lea 12(sp),sp
    fff8:	|         tst.w d0
    fffa:	|     /-- bne.s 10000 <builtIn_setCharacterAngleOffset+0x62>
    fffc:	|     |   moveq #1,d0
    fffe:	+-----|-- bra.s 10064 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   10000:	|     \-> moveq #24,d0
   10002:	|         add.l 20(sp),d0
   10006:	|         move.l d0,-(sp)
   10008:	|         jsr 126f4 <trimStack>
   1000e:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   10010:	|         move.l (sp),d0
   10012:	|         move.l d0,-(sp)
   10014:	|         jsr 7e5a <findPerson>
   1001a:	|         addq.l #4,sp
   1001c:	|         move.l d0,8(sp)

	if (thisPerson) {
   10020:	|  /----- beq.s 1004a <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   10022:	|  |      move.l 4(sp),d0
   10026:	|  |      movea.l 8(sp),a0
   1002a:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1002e:	|  |      moveq #28,d0
   10030:	|  |      add.l 20(sp),d0
   10034:	|  |      pea 1 <_start+0x1>
   10038:	|  |      pea 1 <_start+0x1>
   1003c:	|  |      move.l d0,-(sp)
   1003e:	|  |      jsr 12662 <setVariable>
   10044:	|  |      lea 12(sp),sp
   10048:	|  |  /-- bra.s 10062 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1004a:	|  \--|-> moveq #28,d0
   1004c:	|     |   add.l 20(sp),d0
   10050:	|     |   clr.l -(sp)
   10052:	|     |   pea 1 <_start+0x1>
   10056:	|     |   move.l d0,-(sp)
   10058:	|     |   jsr 12662 <setVariable>
   1005e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10062:	|     \-> moveq #2,d0
}
   10064:	\-------> lea 12(sp),sp
   10068:	          rts

0001006a <builtIn_transitionMode>:


builtIn(transitionMode)
{
   1006a:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1006c:	       movea.l 12(sp),a0
   10070:	       move.l 24(a0),d0
   10074:	       move.l d0,-(sp)
   10076:	       pea 1 <_start+0x1>
   1007a:	       move.l sp,d0
   1007c:	       addq.l #8,d0
   1007e:	       move.l d0,-(sp)
   10080:	       jsr 11d70 <getValueType>
   10086:	       lea 12(sp),sp
   1008a:	       tst.w d0
   1008c:	   /-- bne.s 10092 <builtIn_transitionMode+0x28>
   1008e:	   |   moveq #1,d0
   10090:	/--|-- bra.s 100c8 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   10092:	|  \-> move.l (sp),d0
   10094:	|      move.l d0,d0
   10096:	|      move.b d0,18fee <fadeMode>
	trimStack (&fun -> stack);
   1009c:	|      moveq #24,d0
   1009e:	|      add.l 12(sp),d0
   100a2:	|      move.l d0,-(sp)
   100a4:	|      jsr 126f4 <trimStack>
   100aa:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   100ac:	|      moveq #28,d0
   100ae:	|      add.l 12(sp),d0
   100b2:	|      pea 1 <_start+0x1>
   100b6:	|      pea 1 <_start+0x1>
   100ba:	|      move.l d0,-(sp)
   100bc:	|      jsr 12662 <setVariable>
   100c2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   100c6:	|      moveq #2,d0
}
   100c8:	\----> addq.l #4,sp
   100ca:	       rts

000100cc <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   100cc:	moveq #24,d0
   100ce:	add.l 8(sp),d0
   100d2:	move.l d0,-(sp)
   100d4:	jsr 126f4 <trimStack>
   100da:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   100dc:	moveq #28,d0
   100de:	add.l 8(sp),d0
   100e2:	pea 1 <_start+0x1>
   100e6:	pea 1 <_start+0x1>
   100ea:	move.l d0,-(sp)
   100ec:	jsr 12662 <setVariable>
   100f2:	lea 12(sp),sp
	return BR_CONTINUE;
   100f6:	moveq #2,d0
}
   100f8:	rts

000100fa <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   100fa:	pea 16414 <custom.c.64ca0e9f+0x173e>
   10100:	jsr 13db8 <KPrintF>
   10106:	addq.l #4,sp
	return BR_CONTINUE;
   10108:	moveq #2,d0
}
   1010a:	rts

0001010c <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   1010c:	       lea -16(sp),sp
   10110:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   10112:	       movea.l 28(sp),a0
   10116:	       move.l 24(a0),d0
   1011a:	       move.l d0,-(sp)
   1011c:	       jsr 12346 <getTextFromAnyVar>
   10122:	       addq.l #4,sp
   10124:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   10128:	   /-- bne.s 10130 <builtIn_saveCustomData+0x24>
   1012a:	   |   moveq #1,d0
   1012c:	/--|-- bra.w 101e2 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   10130:	|  \-> move.l 16(sp),-(sp)
   10134:	|      jsr 2fe <encodeFilename>
   1013a:	|      addq.l #4,sp
   1013c:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   10140:	|      move.l 16(sp),8(sp)
   10146:	|      move.l 190fa <SysBase>,d0
   1014c:	|      movea.l d0,a6
   1014e:	|      movea.l 8(sp),a1
   10152:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   10156:	|      move.l 12(sp),-(sp)
   1015a:	|      jsr b992 <failSecurityCheck>
   10160:	|      addq.l #4,sp
   10162:	|      tst.w d0
   10164:	|  /-- beq.s 1016a <builtIn_saveCustomData+0x5e>
   10166:	|  |   moveq #1,d0
   10168:	+--|-- bra.s 101e2 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   1016a:	|  \-> moveq #24,d0
   1016c:	|      add.l 28(sp),d0
   10170:	|      move.l d0,-(sp)
   10172:	|      jsr 126f4 <trimStack>
   10178:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   1017a:	|      movea.l 28(sp),a0
   1017e:	|      movea.l 24(a0),a0
   10182:	|      move.l (a0),d0
   10184:	|      moveq #6,d1
   10186:	|      cmp.l d0,d1
   10188:	|  /-- beq.s 1019c <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   1018a:	|  |   pea 16441 <custom.c.64ca0e9f+0x176b>
   10190:	|  |   jsr 13db8 <KPrintF>
   10196:	|  |   addq.l #4,sp
		return BR_ERROR;
   10198:	|  |   moveq #1,d0
   1019a:	+--|-- bra.s 101e2 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   1019c:	|  \-> movea.l 28(sp),a0
   101a0:	|      move.l 24(a0),d0
   101a4:	|      move.l d0,-(sp)
   101a6:	|      move.l 16(sp),-(sp)
   101aa:	|      jsr b5e2 <stackToFile>
   101b0:	|      addq.l #8,sp
   101b2:	|      tst.w d0
   101b4:	|  /-- bne.s 101ba <builtIn_saveCustomData+0xae>
   101b6:	|  |   moveq #1,d0
   101b8:	+--|-- bra.s 101e2 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   101ba:	|  \-> moveq #24,d0
   101bc:	|      add.l 28(sp),d0
   101c0:	|      move.l d0,-(sp)
   101c2:	|      jsr 126f4 <trimStack>
   101c8:	|      addq.l #4,sp
	FreeVec(fileName);
   101ca:	|      move.l 12(sp),4(sp)
   101d0:	|      move.l 190fa <SysBase>,d0
   101d6:	|      movea.l d0,a6
   101d8:	|      movea.l 4(sp),a1
   101dc:	|      jsr -690(a6)
	return BR_CONTINUE;
   101e0:	|      moveq #2,d0
}
   101e2:	\----> movea.l (sp)+,a6
   101e4:	       lea 16(sp),sp
   101e8:	       rts

000101ea <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   101ea:	       lea -28(sp),sp
   101ee:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   101f0:	       movea.l 40(sp),a0
   101f4:	       move.l 24(a0),d0
   101f8:	       move.l d0,-(sp)
   101fa:	       jsr 12346 <getTextFromAnyVar>
   10200:	       addq.l #4,sp
   10202:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   10206:	   /-- bne.s 1020e <builtIn_loadCustomData+0x24>
   10208:	   |   moveq #1,d0
   1020a:	/--|-- bra.w 1030a <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   1020e:	|  \-> move.l 28(sp),-(sp)
   10212:	|      jsr 2fe <encodeFilename>
   10218:	|      addq.l #4,sp
   1021a:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   1021e:	|      move.l 28(sp),20(sp)
   10224:	|      move.l 190fa <SysBase>,d0
   1022a:	|      movea.l d0,a6
   1022c:	|      movea.l 20(sp),a1
   10230:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   10234:	|      move.l 24(sp),-(sp)
   10238:	|      jsr b992 <failSecurityCheck>
   1023e:	|      addq.l #4,sp
   10240:	|      tst.w d0
   10242:	|  /-- beq.s 1024a <builtIn_loadCustomData+0x60>
   10244:	|  |   moveq #1,d0
   10246:	+--|-- bra.w 1030a <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   1024a:	|  \-> moveq #24,d0
   1024c:	|      add.l 40(sp),d0
   10250:	|      move.l d0,-(sp)
   10252:	|      jsr 126f4 <trimStack>
   10258:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   1025a:	|      moveq #28,d0
   1025c:	|      add.l 40(sp),d0
   10260:	|      move.l d0,-(sp)
   10262:	|      jsr 11fbe <unlinkVar>
   10268:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   1026a:	|      movea.l 40(sp),a0
   1026e:	|      moveq #6,d0
   10270:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   10274:	|      moveq #12,d0
   10276:	|      move.l d0,16(sp)
   1027a:	|      clr.l 12(sp)
   1027e:	|      move.l 190fa <SysBase>,d0
   10284:	|      movea.l d0,a6
   10286:	|      move.l 16(sp),d0
   1028a:	|      move.l 12(sp),d1
   1028e:	|      jsr -684(a6)
   10292:	|      move.l d0,8(sp)
   10296:	|      move.l 8(sp),d0
   1029a:	|      movea.l 40(sp),a0
   1029e:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   102a2:	|      movea.l 40(sp),a0
   102a6:	|      move.l 32(a0),d0
   102aa:	|  /-- bne.s 102b0 <builtIn_loadCustomData+0xc6>
   102ac:	|  |   moveq #1,d0
   102ae:	+--|-- bra.s 1030a <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   102b0:	|  \-> movea.l 40(sp),a0
   102b4:	|      movea.l 32(a0),a0
   102b8:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   102ba:	|      movea.l 40(sp),a0
   102be:	|      movea.l 32(a0),a0
   102c2:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   102c6:	|      movea.l 40(sp),a0
   102ca:	|      movea.l 32(a0),a0
   102ce:	|      moveq #1,d0
   102d0:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   102d4:	|      movea.l 40(sp),a0
   102d8:	|      move.l 32(a0),d0
   102dc:	|      move.l d0,-(sp)
   102de:	|      move.l 28(sp),-(sp)
   102e2:	|      jsr b01c <fileToStack>
   102e8:	|      addq.l #8,sp
   102ea:	|      tst.w d0
   102ec:	|  /-- bne.s 102f2 <builtIn_loadCustomData+0x108>
   102ee:	|  |   moveq #1,d0
   102f0:	+--|-- bra.s 1030a <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   102f2:	|  \-> move.l 24(sp),4(sp)
   102f8:	|      move.l 190fa <SysBase>,d0
   102fe:	|      movea.l d0,a6
   10300:	|      movea.l 4(sp),a1
   10304:	|      jsr -690(a6)
	return BR_CONTINUE;
   10308:	|      moveq #2,d0
}
   1030a:	\----> movea.l (sp)+,a6
   1030c:	       lea 28(sp),sp
   10310:	       rts

00010312 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   10312:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10314:	       movea.l 12(sp),a0
   10318:	       move.l 24(a0),d0
   1031c:	       move.l d0,-(sp)
   1031e:	       pea 1 <_start+0x1>
   10322:	       move.l sp,d0
   10324:	       addq.l #8,d0
   10326:	       move.l d0,-(sp)
   10328:	       jsr 11d70 <getValueType>
   1032e:	       lea 12(sp),sp
   10332:	       tst.w d0
   10334:	   /-- bne.s 1033a <builtIn_setCustomEncoding+0x28>
   10336:	   |   moveq #1,d0
   10338:	/--|-- bra.s 10370 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   1033a:	|  \-> move.l (sp),d0
   1033c:	|      move.l d0,d0
   1033e:	|      move.w d0,19206 <saveEncoding>
	trimStack (&fun -> stack);
   10344:	|      moveq #24,d0
   10346:	|      add.l 12(sp),d0
   1034a:	|      move.l d0,-(sp)
   1034c:	|      jsr 126f4 <trimStack>
   10352:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   10354:	|      moveq #28,d0
   10356:	|      add.l 12(sp),d0
   1035a:	|      pea 1 <_start+0x1>
   1035e:	|      pea 1 <_start+0x1>
   10362:	|      move.l d0,-(sp)
   10364:	|      jsr 12662 <setVariable>
   1036a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1036e:	|      moveq #2,d0
}
   10370:	\----> addq.l #4,sp
   10372:	       rts

00010374 <builtIn_freeSound>:

builtIn(freeSound)
{
   10374:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10376:	       movea.l 12(sp),a0
   1037a:	       move.l 24(a0),d0
   1037e:	       move.l d0,-(sp)
   10380:	       pea 5 <_start+0x5>
   10384:	       move.l sp,d0
   10386:	       addq.l #8,d0
   10388:	       move.l d0,-(sp)
   1038a:	       jsr 11d70 <getValueType>
   10390:	       lea 12(sp),sp
   10394:	       tst.w d0
   10396:	   /-- bne.s 1039c <builtIn_freeSound+0x28>
   10398:	   |   moveq #1,d0
   1039a:	/--|-- bra.s 103ba <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   1039c:	|  \-> moveq #24,d0
   1039e:	|      add.l 12(sp),d0
   103a2:	|      move.l d0,-(sp)
   103a4:	|      jsr 126f4 <trimStack>
   103aa:	|      addq.l #4,sp
	huntKillFreeSound (v);
   103ac:	|      move.l (sp),d0
   103ae:	|      move.l d0,-(sp)
   103b0:	|      jsr a7ea <huntKillFreeSound>
   103b6:	|      addq.l #4,sp
	return BR_CONTINUE;
   103b8:	|      moveq #2,d0
}
   103ba:	\----> addq.l #4,sp
   103bc:	       rts

000103be <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   103be:	       lea -12(sp),sp
   103c2:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103c4:	       movea.l 24(sp),a0
   103c8:	       move.l 24(a0),d0
   103cc:	       move.l d0,-(sp)
   103ce:	       pea 1 <_start+0x1>
   103d2:	       moveq #16,d0
   103d4:	       add.l sp,d0
   103d6:	       move.l d0,-(sp)
   103d8:	       jsr 11d70 <getValueType>
   103de:	       lea 12(sp),sp
   103e2:	       tst.w d0
   103e4:	   /-- bne.s 103ec <builtIn_parallaxAdd+0x2e>
   103e6:	   |   moveq #1,d0
   103e8:	/--|-- bra.w 104c0 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   103ec:	|  \-> moveq #24,d0
   103ee:	|      add.l 24(sp),d0
   103f2:	|      move.l d0,-(sp)
   103f4:	|      jsr 126f4 <trimStack>
   103fa:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103fc:	|      movea.l 24(sp),a0
   10400:	|      move.l 24(a0),d0
   10404:	|      move.l d0,-(sp)
   10406:	|      pea 1 <_start+0x1>
   1040a:	|      moveq #20,d0
   1040c:	|      add.l sp,d0
   1040e:	|      move.l d0,-(sp)
   10410:	|      jsr 11d70 <getValueType>
   10416:	|      lea 12(sp),sp
   1041a:	|      tst.w d0
   1041c:	|  /-- bne.s 10424 <builtIn_parallaxAdd+0x66>
   1041e:	|  |   moveq #1,d0
   10420:	+--|-- bra.w 104c0 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   10424:	|  \-> moveq #24,d0
   10426:	|      add.l 24(sp),d0
   1042a:	|      move.l d0,-(sp)
   1042c:	|      jsr 126f4 <trimStack>
   10432:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10434:	|      movea.l 24(sp),a0
   10438:	|      move.l 24(a0),d0
   1043c:	|      move.l d0,-(sp)
   1043e:	|      pea 5 <_start+0x5>
   10442:	|      lea 12(sp),a0
   10446:	|      move.l a0,-(sp)
   10448:	|      jsr 11d70 <getValueType>
   1044e:	|      lea 12(sp),sp
   10452:	|      tst.w d0
   10454:	|  /-- bne.s 1045a <builtIn_parallaxAdd+0x9c>
   10456:	|  |   moveq #1,d0
   10458:	+--|-- bra.s 104c0 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1045a:	|  \-> moveq #24,d0
   1045c:	|      add.l 24(sp),d0
   10460:	|      move.l d0,-(sp)
   10462:	|      jsr 126f4 <trimStack>
   10468:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   1046a:	|      move.l 8(sp),d0
   1046e:	|      move.l d0,d0
   10470:	|      moveq #0,d2
   10472:	|      move.w d0,d2
   10474:	|      move.l 12(sp),d0
   10478:	|      move.l d0,d0
   1047a:	|      moveq #0,d1
   1047c:	|      move.w d0,d1
   1047e:	|      move.l 4(sp),d0
   10482:	|      move.l d0,d0
   10484:	|      move.w d0,d0
   10486:	|      andi.l #65535,d0
   1048c:	|      move.l d2,-(sp)
   1048e:	|      move.l d1,-(sp)
   10490:	|      move.l d0,-(sp)
   10492:	|      jsr aa06 <loadParallax>
   10498:	|      lea 12(sp),sp
   1049c:	|      tst.w d0
   1049e:	|  /-- bne.s 104a4 <builtIn_parallaxAdd+0xe6>
   104a0:	|  |   moveq #1,d0
   104a2:	+--|-- bra.s 104c0 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   104a4:	|  \-> moveq #28,d0
   104a6:	|      add.l 24(sp),d0
   104aa:	|      pea 1 <_start+0x1>
   104ae:	|      pea 1 <_start+0x1>
   104b2:	|      move.l d0,-(sp)
   104b4:	|      jsr 12662 <setVariable>
   104ba:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   104be:	|      moveq #2,d0
}
   104c0:	\----> move.l (sp)+,d2
   104c2:	       lea 12(sp),sp
   104c6:	       rts

000104c8 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   104c8:	jsr a93e <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   104ce:	moveq #28,d0
   104d0:	add.l 8(sp),d0
   104d4:	pea 1 <_start+0x1>
   104d8:	pea 1 <_start+0x1>
   104dc:	move.l d0,-(sp)
   104de:	jsr 12662 <setVariable>
   104e4:	lea 12(sp),sp
	return BR_CONTINUE;
   104e8:	moveq #2,d0
}
   104ea:	rts

000104ec <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   104ec:	pea 1645f <custom.c.64ca0e9f+0x1789>
   104f2:	jsr 13db8 <KPrintF>
   104f8:	addq.l #4,sp

	return BR_CONTINUE;
   104fa:	moveq #2,d0
}
   104fc:	rts

000104fe <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   104fe:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   10500:	             movea.l 16(sp),a0
   10504:	             movea.l 24(a0),a0
   10508:	             move.l (a0),d0
   1050a:	             moveq #1,d1
   1050c:	             cmp.l d0,d1
   1050e:	      /----- beq.s 10556 <builtIn_makeFastArray+0x58>
   10510:	      |      moveq #6,d1
   10512:	      |      cmp.l d0,d1
   10514:	/-----|----- bne.s 10594 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   10516:	|     |      movea.l 16(sp),a0
   1051a:	|     |      movea.l 24(a0),a0
   1051e:	|     |      move.l 4(a0),d1
   10522:	|     |      moveq #28,d0
   10524:	|     |      add.l 16(sp),d0
   10528:	|     |      move.l d1,-(sp)
   1052a:	|     |      move.l d0,-(sp)
   1052c:	|     |      jsr 11e22 <makeFastArrayFromStack>
   10532:	|     |      addq.l #8,sp
   10534:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   10538:	|     |      moveq #24,d0
   1053a:	|     |      add.l 16(sp),d0
   1053e:	|     |      move.l d0,-(sp)
   10540:	|     |      jsr 126f4 <trimStack>
   10546:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   10548:	|     |      tst.w 6(sp)
   1054c:	|     |  /-- beq.s 10552 <builtIn_makeFastArray+0x54>
   1054e:	|     |  |   moveq #2,d0
   10550:	|  /--|--|-- bra.s 105a6 <builtIn_makeFastArray+0xa8>
   10552:	|  |  |  \-> moveq #1,d0
   10554:	|  +--|----- bra.s 105a6 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   10556:	|  |  \----> movea.l 16(sp),a0
   1055a:	|  |         movea.l 24(a0),a0
   1055e:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   10564:	|  |         moveq #24,d0
   10566:	|  |         add.l 16(sp),d0
   1056a:	|  |         move.l d0,-(sp)
   1056c:	|  |         jsr 126f4 <trimStack>
   10572:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   10574:	|  |         moveq #28,d0
   10576:	|  |         add.l 16(sp),d0
   1057a:	|  |         move.l 2(sp),-(sp)
   1057e:	|  |         move.l d0,-(sp)
   10580:	|  |         jsr 11e8c <makeFastArraySize>
   10586:	|  |         addq.l #8,sp
   10588:	|  |         tst.w d0
   1058a:	|  |     /-- beq.s 10590 <builtIn_makeFastArray+0x92>
   1058c:	|  |     |   moveq #2,d0
   1058e:	|  +-----|-- bra.s 105a6 <builtIn_makeFastArray+0xa8>
   10590:	|  |     \-> moveq #1,d0
   10592:	|  +-------- bra.s 105a6 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   10594:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   10596:	   |         pea 16488 <custom.c.64ca0e9f+0x17b2>
   1059c:	   |         jsr 13db8 <KPrintF>
   105a2:	   |         addq.l #4,sp
	return BR_ERROR;
   105a4:	   |         moveq #1,d0
}
   105a6:	   \-------> addq.l #8,sp
   105a8:	             rts

000105aa <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   105aa:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   105ac:	          movea.l 16(sp),a0
   105b0:	          move.l 24(a0),d0
   105b4:	          move.l d0,-(sp)
   105b6:	          pea 7 <_start+0x7>
   105ba:	          move.l sp,d0
   105bc:	          addq.l #8,d0
   105be:	          move.l d0,-(sp)
   105c0:	          jsr 11d70 <getValueType>
   105c6:	          lea 12(sp),sp
   105ca:	          tst.w d0
   105cc:	      /-- bne.s 105d2 <builtIn_getCharacterScale+0x28>
   105ce:	      |   moveq #1,d0
   105d0:	/-----|-- bra.s 1064c <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   105d2:	|     \-> moveq #24,d0
   105d4:	|         add.l 16(sp),d0
   105d8:	|         move.l d0,-(sp)
   105da:	|         jsr 126f4 <trimStack>
   105e0:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   105e2:	|         move.l (sp),d0
   105e4:	|         move.l d0,-(sp)
   105e6:	|         jsr 7e5a <findPerson>
   105ec:	|         addq.l #4,sp
   105ee:	|         move.l d0,4(sp)
	if (pers) {
   105f2:	|  /----- beq.s 10632 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   105f4:	|  |      movea.l 4(sp),a0
   105f8:	|  |      move.l 20(a0),d0
   105fc:	|  |      move.l #1120403456,-(sp)
   10602:	|  |      move.l d0,-(sp)
   10604:	|  |      jsr 142a6 <__mulsf3>
   1060a:	|  |      addq.l #8,sp
   1060c:	|  |      move.l d0,-(sp)
   1060e:	|  |      jsr 1418c <__fixsfsi>
   10614:	|  |      addq.l #4,sp
   10616:	|  |      move.l d0,d1
   10618:	|  |      moveq #28,d0
   1061a:	|  |      add.l 16(sp),d0
   1061e:	|  |      move.l d1,-(sp)
   10620:	|  |      pea 1 <_start+0x1>
   10624:	|  |      move.l d0,-(sp)
   10626:	|  |      jsr 12662 <setVariable>
   1062c:	|  |      lea 12(sp),sp
   10630:	|  |  /-- bra.s 1064a <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   10632:	|  \--|-> moveq #28,d0
   10634:	|     |   add.l 16(sp),d0
   10638:	|     |   clr.l -(sp)
   1063a:	|     |   pea 1 <_start+0x1>
   1063e:	|     |   move.l d0,-(sp)
   10640:	|     |   jsr 12662 <setVariable>
   10646:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1064a:	|     \-> moveq #2,d0
}
   1064c:	\-------> addq.l #8,sp
   1064e:	          rts

00010650 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   10650:	move.l 1922a <gameSettings>,d0
   10656:	move.l d0,d1
   10658:	moveq #28,d0
   1065a:	add.l 8(sp),d0
   1065e:	move.l d1,-(sp)
   10660:	pea 1 <_start+0x1>
   10664:	move.l d0,-(sp)
   10666:	jsr 12662 <setVariable>
   1066c:	lea 12(sp),sp
	return BR_CONTINUE;
   10670:	moveq #2,d0
}
   10672:	rts

00010674 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   10674:	moveq #24,d0
   10676:	add.l 8(sp),d0
   1067a:	move.l d0,-(sp)
   1067c:	jsr 126f4 <trimStack>
   10682:	addq.l #4,sp
	trimStack (&fun -> stack);
   10684:	moveq #24,d0
   10686:	add.l 8(sp),d0
   1068a:	move.l d0,-(sp)
   1068c:	jsr 126f4 <trimStack>
   10692:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   10694:	moveq #28,d0
   10696:	add.l 8(sp),d0
   1069a:	clr.l -(sp)
   1069c:	pea 1 <_start+0x1>
   106a0:	move.l d0,-(sp)
   106a2:	jsr 12662 <setVariable>
   106a8:	lea 12(sp),sp

	return BR_CONTINUE;
   106ac:	moveq #2,d0

}
   106ae:	rts

000106b0 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   106b0:	move.l 18a94 <lastFramesPerSecond>,d1
   106b6:	moveq #28,d0
   106b8:	add.l 8(sp),d0
   106bc:	move.l d1,-(sp)
   106be:	pea 1 <_start+0x1>
   106c2:	move.l d0,-(sp)
   106c4:	jsr 12662 <setVariable>
   106ca:	lea 12(sp),sp
	return BR_CONTINUE;
   106ce:	moveq #2,d0
}
   106d0:	rts

000106d2 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   106d2:	moveq #2,d0
}
   106d4:	rts

000106d6 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   106d6:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106da:	          movea.l 60(sp),a0
   106de:	          move.l 24(a0),d0
   106e2:	          move.l d0,-(sp)
   106e4:	          pea 1 <_start+0x1>
   106e8:	          pea 1902a <thumbHeight>
   106ee:	          jsr 11d70 <getValueType>
   106f4:	          lea 12(sp),sp
   106f8:	          tst.w d0
   106fa:	      /-- bne.s 10702 <builtIn_setThumbnailSize+0x2c>
   106fc:	      |   moveq #1,d0
   106fe:	/-----|-- bra.w 107be <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   10702:	|     \-> moveq #24,d0
   10704:	|         add.l 60(sp),d0
   10708:	|         move.l d0,-(sp)
   1070a:	|         jsr 126f4 <trimStack>
   10710:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10712:	|         movea.l 60(sp),a0
   10716:	|         move.l 24(a0),d0
   1071a:	|         move.l d0,-(sp)
   1071c:	|         pea 1 <_start+0x1>
   10720:	|         pea 19026 <thumbWidth>
   10726:	|         jsr 11d70 <getValueType>
   1072c:	|         lea 12(sp),sp
   10730:	|         tst.w d0
   10732:	|     /-- bne.s 1073a <builtIn_setThumbnailSize+0x64>
   10734:	|     |   moveq #1,d0
   10736:	+-----|-- bra.w 107be <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1073a:	|     \-> moveq #24,d0
   1073c:	|         add.l 60(sp),d0
   10740:	|         move.l d0,-(sp)
   10742:	|         jsr 126f4 <trimStack>
   10748:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   1074a:	|         move.l 19026 <thumbWidth>,d0
   10750:	|     /-- bmi.s 1077e <builtIn_setThumbnailSize+0xa8>
   10752:	|     |   move.l 1902a <thumbHeight>,d0
   10758:	|     +-- bmi.s 1077e <builtIn_setThumbnailSize+0xa8>
   1075a:	|     |   move.l 19026 <thumbWidth>,d0
   10760:	|     |   move.l d0,d1
   10762:	|     |   move.l 1904e <winWidth>,d0
   10768:	|     |   cmp.l d1,d0
   1076a:	|     +-- bcs.s 1077e <builtIn_setThumbnailSize+0xa8>
   1076c:	|     |   move.l 1902a <thumbHeight>,d0
   10772:	|     |   move.l d0,d1
   10774:	|     |   move.l 19052 <winHeight>,d0
   1077a:	|     |   cmp.l d1,d0
   1077c:	|  /--|-- bcc.s 107bc <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   1077e:	|  |  \-> move.l 1902a <thumbHeight>,d1
   10784:	|  |      move.l 19026 <thumbWidth>,d0
   1078a:	|  |      move.l d1,-(sp)
   1078c:	|  |      move.l d0,-(sp)
   1078e:	|  |      pea 164af <custom.c.64ca0e9f+0x17d9>
   10794:	|  |      lea 14(sp),a0
   10798:	|  |      move.l a0,-(sp)
   1079a:	|  |      jsr 1157a <sprintf>
   107a0:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   107a4:	|  |      lea 2(sp),a0
   107a8:	|  |      move.l a0,-(sp)
   107aa:	|  |      pea 164b7 <custom.c.64ca0e9f+0x17e1>
   107b0:	|  |      jsr 13db8 <KPrintF>
   107b6:	|  |      addq.l #8,sp
		return BR_ERROR;
   107b8:	|  |      moveq #1,d0
   107ba:	+--|----- bra.s 107be <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   107bc:	|  \----> moveq #2,d0
}
   107be:	\-------> lea 52(sp),sp
   107c2:	          rts

000107c4 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   107c4:	       lea -12(sp),sp
   107c8:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107ca:	       movea.l 24(sp),a0
   107ce:	       move.l 24(a0),d0
   107d2:	       move.l d0,-(sp)
   107d4:	       pea 1 <_start+0x1>
   107d8:	       lea 12(sp),a0
   107dc:	       move.l a0,-(sp)
   107de:	       jsr 11d70 <getValueType>
   107e4:	       lea 12(sp),sp
   107e8:	       tst.w d0
   107ea:	   /-- bne.s 107f2 <builtIn_hasFlag+0x2e>
   107ec:	   |   moveq #1,d0
   107ee:	/--|-- bra.w 10882 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   107f2:	|  \-> moveq #24,d0
   107f4:	|      add.l 24(sp),d0
   107f8:	|      move.l d0,-(sp)
   107fa:	|      jsr 126f4 <trimStack>
   10800:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10802:	|      movea.l 24(sp),a0
   10806:	|      move.l 24(a0),d0
   1080a:	|      move.l d0,-(sp)
   1080c:	|      pea 7 <_start+0x7>
   10810:	|      moveq #16,d0
   10812:	|      add.l sp,d0
   10814:	|      move.l d0,-(sp)
   10816:	|      jsr 11d70 <getValueType>
   1081c:	|      lea 12(sp),sp
   10820:	|      tst.w d0
   10822:	|  /-- bne.s 10828 <builtIn_hasFlag+0x64>
   10824:	|  |   moveq #1,d0
   10826:	+--|-- bra.s 10882 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   10828:	|  \-> moveq #24,d0
   1082a:	|      add.l 24(sp),d0
   1082e:	|      move.l d0,-(sp)
   10830:	|      jsr 126f4 <trimStack>
   10836:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   10838:	|      move.l 8(sp),d0
   1083c:	|      move.l d0,-(sp)
   1083e:	|      jsr aba6 <findObjectType>
   10844:	|      addq.l #4,sp
   10846:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   1084a:	|  /-- bne.s 10850 <builtIn_hasFlag+0x8c>
   1084c:	|  |   moveq #1,d0
   1084e:	+--|-- bra.s 10882 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   10850:	|  \-> movea.l 12(sp),a0
   10854:	|      move.w 36(a0),d0
   10858:	|      moveq #0,d2
   1085a:	|      move.w d0,d2
   1085c:	|      move.l 4(sp),d1
   10860:	|      moveq #1,d0
   10862:	|      lsl.l d1,d0
   10864:	|      move.l d2,d1
   10866:	|      and.l d0,d1
   10868:	|      moveq #28,d0
   1086a:	|      add.l 24(sp),d0
   1086e:	|      move.l d1,-(sp)
   10870:	|      pea 1 <_start+0x1>
   10874:	|      move.l d0,-(sp)
   10876:	|      jsr 12662 <setVariable>
   1087c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10880:	|      moveq #2,d0
}
   10882:	\----> move.l (sp)+,d2
   10884:	       lea 12(sp),sp
   10888:	       rts

0001088a <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   1088a:	       jsr ab94 <snapshot>
   10890:	       tst.w d0
   10892:	/----- beq.s 10898 <builtIn_snapshotGrab+0xe>
   10894:	|      moveq #2,d0
   10896:	|  /-- bra.s 1089a <builtIn_snapshotGrab+0x10>
   10898:	\--|-> moveq #1,d0
}
   1089a:	   \-> rts

0001089c <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   1089c:	jsr aa4c <nosnapshot>
	return BR_CONTINUE;
   108a2:	moveq #2,d0
}
   108a4:	rts

000108a6 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   108a6:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   108a8:	move.w 18970 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   108b0:	movea.l 12(sp),a0
   108b4:	move.l 24(a0),d0
   108b8:	move.l d0,-(sp)
   108ba:	jsr 122b0 <getBoolean>
   108c0:	addq.l #4,sp
   108c2:	move.w d0,18970 <allowAnyFilename>
	trimStack (&fun -> stack);
   108c8:	moveq #24,d0
   108ca:	add.l 12(sp),d0
   108ce:	move.l d0,-(sp)
   108d0:	jsr 126f4 <trimStack>
   108d6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   108d8:	movea.w 2(sp),a0
   108dc:	moveq #28,d0
   108de:	add.l 12(sp),d0
   108e2:	move.l a0,-(sp)
   108e4:	pea 1 <_start+0x1>
   108e8:	move.l d0,-(sp)
   108ea:	jsr 12662 <setVariable>
   108f0:	lea 12(sp),sp
	return BR_CONTINUE;
   108f4:	moveq #2,d0
}
   108f6:	addq.l #4,sp
   108f8:	rts

000108fa <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   108fa:	moveq #24,d0
   108fc:	add.l 8(sp),d0
   10900:	move.l d0,-(sp)
   10902:	jsr 126f4 <trimStack>
   10908:	addq.l #4,sp
	trimStack (&fun -> stack);
   1090a:	moveq #24,d0
   1090c:	add.l 8(sp),d0
   10910:	move.l d0,-(sp)
   10912:	jsr 126f4 <trimStack>
   10918:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   1091a:	moveq #28,d0
   1091c:	add.l 8(sp),d0
   10920:	clr.l -(sp)
   10922:	pea 1 <_start+0x1>
   10926:	move.l d0,-(sp)
   10928:	jsr 12662 <setVariable>
   1092e:	lea 12(sp),sp

	return BR_CONTINUE;
   10932:	moveq #2,d0
}
   10934:	rts

00010936 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   10936:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   10938:	movea.l 12(sp),a0
   1093c:	move.l 24(a0),d0
   10940:	move.l d0,-(sp)
   10942:	jsr 12346 <getTextFromAnyVar>
   10948:	addq.l #4,sp
   1094a:	move.l d0,(sp)
	trimStack (&fun -> stack);
   1094c:	moveq #24,d0
   1094e:	add.l 12(sp),d0
   10952:	move.l d0,-(sp)
   10954:	jsr 126f4 <trimStack>
   1095a:	addq.l #4,sp
	KPrintF (mess);
   1095c:	move.l (sp),-(sp)
   1095e:	jsr 13db8 <KPrintF>
   10964:	addq.l #4,sp
	return BR_ERROR;
   10966:	moveq #1,d0
}
   10968:	addq.l #4,sp
   1096a:	rts

0001096c <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1096c:	moveq #24,d0
   1096e:	add.l 8(sp),d0
   10972:	move.l d0,-(sp)
   10974:	jsr 126f4 <trimStack>
   1097a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1097c:	moveq #24,d0
   1097e:	add.l 8(sp),d0
   10982:	move.l d0,-(sp)
   10984:	jsr 126f4 <trimStack>
   1098a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1098c:	moveq #24,d0
   1098e:	add.l 8(sp),d0
   10992:	move.l d0,-(sp)
   10994:	jsr 126f4 <trimStack>
   1099a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1099c:	moveq #24,d0
   1099e:	add.l 8(sp),d0
   109a2:	move.l d0,-(sp)
   109a4:	jsr 126f4 <trimStack>
   109aa:	addq.l #4,sp

	return BR_CONTINUE;
   109ac:	moveq #2,d0
}
   109ae:	rts

000109b0 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   109b0:	moveq #24,d0
   109b2:	add.l 8(sp),d0
   109b6:	move.l d0,-(sp)
   109b8:	jsr 126f4 <trimStack>
   109be:	addq.l #4,sp
	trimStack (&fun -> stack);
   109c0:	moveq #24,d0
   109c2:	add.l 8(sp),d0
   109c6:	move.l d0,-(sp)
   109c8:	jsr 126f4 <trimStack>
   109ce:	addq.l #4,sp
	trimStack (&fun -> stack);
   109d0:	moveq #24,d0
   109d2:	add.l 8(sp),d0
   109d6:	move.l d0,-(sp)
   109d8:	jsr 126f4 <trimStack>
   109de:	addq.l #4,sp

	return BR_CONTINUE;
   109e0:	moveq #2,d0

}
   109e2:	rts

000109e4 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   109e4:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   109e6:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   109ec:	sne d0
   109ee:	neg.b d0
   109f0:	moveq #0,d1
   109f2:	move.b d0,d1
   109f4:	moveq #28,d0
   109f6:	add.l 12(sp),d0
   109fa:	move.l d1,-(sp)
   109fc:	pea 1 <_start+0x1>
   10a00:	move.l d0,-(sp)
   10a02:	jsr 12662 <setVariable>
   10a08:	lea 12(sp),sp
	return BR_CONTINUE;
   10a0c:	moveq #2,d0
}
   10a0e:	addq.l #4,sp
   10a10:	rts

00010a12 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   10a12:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   10a14:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   10a1a:	pea 164ce <custom.c.64ca0e9f+0x17f8>
   10a20:	jsr 13db8 <KPrintF>
   10a26:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   10a28:	tst.w 2(sp)
   10a2c:	sne d0
   10a2e:	neg.b d0
   10a30:	moveq #0,d1
   10a32:	move.b d0,d1
   10a34:	moveq #28,d0
   10a36:	add.l 12(sp),d0
   10a3a:	move.l d1,-(sp)
   10a3c:	pea 1 <_start+0x1>
   10a40:	move.l d0,-(sp)
   10a42:	jsr 12662 <setVariable>
   10a48:	lea 12(sp),sp
	return BR_CONTINUE;
   10a4c:	moveq #2,d0
}
   10a4e:	addq.l #4,sp
   10a50:	rts

00010a52 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   10a52:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   10a56:	             move.l 104(sp),d0
   10a5a:	             cmpi.l #166,d0
   10a60:	/----------- bhi.w 10b42 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   10a64:	|            move.l 104(sp),d0
   10a68:	|            add.l d0,d0
   10a6a:	|            movea.l d0,a1
   10a6c:	|            adda.l d0,a1
   10a6e:	|            lea 18ab6 <paramNum>,a0
   10a74:	|            move.l (0,a1,a0.l),d0
   10a78:	|            moveq #-1,d1
   10a7a:	|            cmp.l d0,d1
   10a7c:	|  /-------- beq.w 10b0a <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   10a80:	|  |         move.l 104(sp),d0
   10a84:	|  |         add.l d0,d0
   10a86:	|  |         movea.l d0,a1
   10a88:	|  |         adda.l d0,a1
   10a8a:	|  |         lea 18ab6 <paramNum>,a0
   10a90:	|  |         move.l (0,a1,a0.l),d0
   10a94:	|  |         cmp.l 108(sp),d0
   10a98:	|  +-------- beq.s 10b0a <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   10a9a:	|  |         move.l 104(sp),d0
   10a9e:	|  |         add.l d0,d0
   10aa0:	|  |         movea.l d0,a1
   10aa2:	|  |         adda.l d0,a1
   10aa4:	|  |         lea 18ab6 <paramNum>,a0
   10aaa:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   10aae:	|  |         moveq #1,d1
   10ab0:	|  |         cmp.l d0,d1
   10ab2:	|  |  /----- bne.s 10abc <callBuiltIn+0x6a>
   10ab4:	|  |  |      move.l #86406,d0
   10aba:	|  |  |  /-- bra.s 10ac2 <callBuiltIn+0x70>
   10abc:	|  |  \--|-> move.l #91396,d0
   10ac2:	|  |     \-> move.l 104(sp),d1
   10ac6:	|  |         add.l d1,d1
   10ac8:	|  |         movea.l d1,a1
   10aca:	|  |         adda.l d1,a1
   10acc:	|  |         lea 18ab6 <paramNum>,a0
   10ad2:	|  |         move.l (0,a1,a0.l),d1
   10ad6:	|  |         move.l d0,-(sp)
   10ad8:	|  |         move.l d1,-(sp)
   10ada:	|  |         pea 16506 <custom.c.64ca0e9f+0x1830>
   10ae0:	|  |         lea 12(sp),a0
   10ae4:	|  |         move.l a0,-(sp)
   10ae6:	|  |         jsr 1157a <sprintf>
   10aec:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   10af0:	|  |         movea.l sp,a0
   10af2:	|  |         move.l a0,-(sp)
   10af4:	|  |         jsr b8 <copyString>
   10afa:	|  |         addq.l #4,sp
   10afc:	|  |         move.l d0,-(sp)
   10afe:	|  |         jsr 13db8 <KPrintF>
   10b04:	|  |         addq.l #4,sp
				return BR_ERROR;
   10b06:	|  |         moveq #1,d0
   10b08:	|  |     /-- bra.s 10b52 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   10b0a:	|  \-----|-> move.l 104(sp),d0
   10b0e:	|        |   add.l d0,d0
   10b10:	|        |   movea.l d0,a1
   10b12:	|        |   adda.l d0,a1
   10b14:	|        |   lea 18d52 <builtInFunctionArray>,a0
   10b1a:	|        |   move.l (0,a1,a0.l),d0
   10b1e:	+--------|-- beq.s 10b42 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   10b20:	|        |   move.l 104(sp),d0
   10b24:	|        |   add.l d0,d0
   10b26:	|        |   movea.l d0,a1
   10b28:	|        |   adda.l d0,a1
   10b2a:	|        |   lea 18d52 <builtInFunctionArray>,a0
   10b30:	|        |   movea.l (0,a1,a0.l),a0
   10b34:	|        |   move.l 112(sp),-(sp)
   10b38:	|        |   move.l 112(sp),-(sp)
   10b3c:	|        |   jsr (a0)
   10b3e:	|        |   addq.l #8,sp
   10b40:	|        +-- bra.s 10b52 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   10b42:	\--------|-> pea 16531 <custom.c.64ca0e9f+0x185b>
   10b48:	         |   jsr 13db8 <KPrintF>
   10b4e:	         |   addq.l #4,sp
	return BR_ERROR;
   10b50:	         |   moveq #1,d0
}
   10b52:	         \-> lea 100(sp),sp
   10b56:	             rts

00010b58 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   10b58:	          subq.l #8,sp
	int indexNum = -1;
   10b5a:	          moveq #-1,d0
   10b5c:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   10b60:	          clr.l (sp)
   10b62:	   /----- bra.s 10b88 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   10b64:	/--|----> move.l 19222 <languageTable>,d1
   10b6a:	|  |      move.l (sp),d0
   10b6c:	|  |      add.l d0,d0
   10b6e:	|  |      add.l d0,d0
   10b70:	|  |      movea.l d1,a0
   10b72:	|  |      adda.l d0,a0
   10b74:	|  |      move.l (a0),d0
   10b76:	|  |      move.l d0,d1
   10b78:	|  |      move.l 1922a <gameSettings>,d0
   10b7e:	|  |      cmp.l d1,d0
   10b80:	|  |  /-- bne.s 10b86 <getLanguageForFileB+0x2e>
   10b82:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   10b86:	|  |  \-> addq.l #1,(sp)
   10b88:	|  \----> move.l 1922e <gameSettings+0x4>,d0
   10b8e:	|         cmp.l (sp),d0
   10b90:	\-------- bcc.s 10b64 <getLanguageForFileB+0xc>
	}

	return indexNum;
   10b92:	          move.l 4(sp),d0
}
   10b96:	          addq.l #8,sp
   10b98:	          rts

00010b9a <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   10b9a:	          lea -20(sp),sp
   10b9e:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   10ba0:	          move.l 28(sp),-(sp)
   10ba4:	          jsr 1125c <strlen>
   10baa:	          addq.l #4,sp
   10bac:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   10bb0:	          moveq #4,d0
   10bb2:	          cmp.l 12(sp),d0
   10bb6:	      /-- bge.s 10bda <getPrefsFilename+0x40>
   10bb8:	      |   move.l 12(sp),d0
   10bbc:	      |   subq.l #4,d0
   10bbe:	      |   movea.l 28(sp),a0
   10bc2:	      |   adda.l d0,a0
   10bc4:	      |   move.b (a0),d0
   10bc6:	      |   cmpi.b #46,d0
   10bca:	      +-- bne.s 10bda <getPrefsFilename+0x40>
		filename[n-4] = 0;
   10bcc:	      |   move.l 12(sp),d0
   10bd0:	      |   subq.l #4,d0
   10bd2:	      |   movea.l 28(sp),a0
   10bd6:	      |   adda.l d0,a0
   10bd8:	      |   clr.b (a0)
	}

	char * f = filename;
   10bda:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   10be0:	          clr.l 20(sp)
   10be4:	   /----- bra.s 10c0c <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   10be6:	/--|----> move.l 20(sp),d0
   10bea:	|  |      movea.l 28(sp),a0
   10bee:	|  |      adda.l d0,a0
   10bf0:	|  |      move.b (a0),d0
   10bf2:	|  |      cmpi.b #47,d0
   10bf6:	|  |  /-- bne.s 10c08 <getPrefsFilename+0x6e>
   10bf8:	|  |  |   move.l 20(sp),d0
   10bfc:	|  |  |   addq.l #1,d0
   10bfe:	|  |  |   move.l 28(sp),d1
   10c02:	|  |  |   add.l d0,d1
   10c04:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   10c08:	|  |  \-> addq.l #1,20(sp)
   10c0c:	|  \----> move.l 20(sp),d0
   10c10:	|         cmp.l 12(sp),d0
   10c14:	\-------- blt.s 10be6 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   10c16:	          pea 1655c <custom.c.64ca0e9f+0x1886>
   10c1c:	          move.l 20(sp),-(sp)
   10c20:	          jsr 1129c <joinStrings>
   10c26:	          addq.l #8,sp
   10c28:	          move.l d0,8(sp)

	FreeVec(filename);
   10c2c:	          move.l 28(sp),4(sp)
   10c32:	          move.l 190fa <SysBase>,d0
   10c38:	          movea.l d0,a6
   10c3a:	          movea.l 4(sp),a1
   10c3e:	          jsr -690(a6)
	filename = NULL;
   10c42:	          clr.l 28(sp)
	return joined;
   10c46:	          move.l 8(sp),d0
}
   10c4a:	          movea.l (sp)+,a6
   10c4c:	          lea 20(sp),sp
   10c50:	          rts

00010c52 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   10c52:	             lea -28(sp),sp
   10c56:	             move.l a6,-(sp)
   10c58:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   10c5a:	             move.l 1922e <gameSettings+0x4>,d0
   10c60:	             move.l d0,d1
   10c62:	             addq.l #1,d1
   10c64:	             move.l d1,28(sp)
   10c68:	             clr.l 24(sp)
   10c6c:	             move.l 190fa <SysBase>,d0
   10c72:	             movea.l d0,a6
   10c74:	             move.l 28(sp),d0
   10c78:	             move.l 24(sp),d1
   10c7c:	             jsr -684(a6)
   10c80:	             move.l d0,20(sp)
   10c84:	             move.l 20(sp),d0
   10c88:	             move.l d0,19222 <languageTable>
    if( languageTable == 0) {
   10c8e:	             move.l 19222 <languageTable>,d0
   10c94:	         /-- bne.s 10ca4 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   10c96:	         |   pea 16561 <custom.c.64ca0e9f+0x188b>
   10c9c:	         |   jsr 13db8 <KPrintF>
   10ca2:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   10ca4:	         \-> move.l 1922e <gameSettings+0x4>,d0
   10caa:	             move.l d0,d1
   10cac:	             addq.l #1,d1
   10cae:	             move.l d1,16(sp)
   10cb2:	             clr.l 12(sp)
   10cb6:	             move.l 190fa <SysBase>,d0
   10cbc:	             movea.l d0,a6
   10cbe:	             move.l 16(sp),d0
   10cc2:	             move.l 12(sp),d1
   10cc6:	             jsr -684(a6)
   10cca:	             move.l d0,8(sp)
   10cce:	             move.l 8(sp),d0
   10cd2:	             move.l d0,19226 <languageName>
	if( languageName == 0) {
   10cd8:	             move.l 19226 <languageName>,d0
   10cde:	         /-- bne.s 10cee <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   10ce0:	         |   pea 16597 <custom.c.64ca0e9f+0x18c1>
   10ce6:	         |   jsr 13db8 <KPrintF>
   10cec:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   10cee:	         \-> clr.l 32(sp)
   10cf2:	   /-------- bra.s 10d6a <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   10cf4:	/--|-------> tst.l 32(sp)
   10cf8:	|  |  /----- beq.s 10d08 <makeLanguageTable+0xb6>
   10cfa:	|  |  |      move.l 40(sp),-(sp)
   10cfe:	|  |  |      jsr 6bc <get2bytes>
   10d04:	|  |  |      addq.l #4,sp
   10d06:	|  |  |  /-- bra.s 10d0a <makeLanguageTable+0xb8>
   10d08:	|  |  \--|-> moveq #0,d0
   10d0a:	|  |     \-> movea.l 19222 <languageTable>,a0
   10d10:	|  |         move.l 32(sp),d1
   10d14:	|  |         add.l d1,d1
   10d16:	|  |         add.l d1,d1
   10d18:	|  |         adda.l d1,a0
   10d1a:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   10d1c:	|  |         move.l 19226 <languageName>,d1
   10d22:	|  |         move.l 32(sp),d0
   10d26:	|  |         add.l d0,d0
   10d28:	|  |         add.l d0,d0
   10d2a:	|  |         movea.l d1,a0
   10d2c:	|  |         adda.l d0,a0
   10d2e:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   10d30:	|  |         move.l 190a4 <gameVersion>,d0
   10d36:	|  |         cmpi.l #511,d0
   10d3c:	|  |     /-- ble.s 10d66 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   10d3e:	|  |     |   move.l 1922e <gameSettings+0x4>,d0
   10d44:	|  |     +-- beq.s 10d66 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   10d46:	|  |     |   move.l 19226 <languageName>,d1
   10d4c:	|  |     |   move.l 32(sp),d0
   10d50:	|  |     |   add.l d0,d0
   10d52:	|  |     |   add.l d0,d0
   10d54:	|  |     |   movea.l d1,a2
   10d56:	|  |     |   adda.l d0,a2
   10d58:	|  |     |   move.l 40(sp),-(sp)
   10d5c:	|  |     |   jsr b02 <readString>
   10d62:	|  |     |   addq.l #4,sp
   10d64:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   10d66:	|  |     \-> addq.l #1,32(sp)
   10d6a:	|  \-------> move.l 1922e <gameSettings+0x4>,d0
   10d70:	|            cmp.l 32(sp),d0
   10d74:	\----------- bcc.w 10cf4 <makeLanguageTable+0xa2>
		}
	}
}
   10d78:	             nop
   10d7a:	             nop
   10d7c:	             movea.l (sp)+,a2
   10d7e:	             movea.l (sp)+,a6
   10d80:	             lea 28(sp),sp
   10d84:	             rts

00010d86 <readIniFile>:

void readIniFile (char * filename) {
   10d86:	                      lea -564(sp),sp
   10d8a:	                      move.l a6,-(sp)
   10d8c:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   10d8e:	                      move.l 576(sp),-(sp)
   10d92:	                      jsr b8 <copyString>
   10d98:	                      addq.l #4,sp
   10d9a:	                      move.l d0,-(sp)
   10d9c:	                      jsr 10b9a <getPrefsFilename>
   10da2:	                      addq.l #4,sp
   10da4:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   10da8:	                      move.l 562(sp),558(sp)
   10dae:	                      move.l #1005,554(sp)
   10db6:	                      move.l 19102 <DOSBase>,d0
   10dbc:	                      movea.l d0,a6
   10dbe:	                      move.l 558(sp),d1
   10dc2:	                      move.l 554(sp),d2
   10dc6:	                      jsr -30(a6)
   10dca:	                      move.l d0,550(sp)
   10dce:	                      move.l 550(sp),d0
   10dd2:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   10dd6:	                      clr.l 1922a <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   10ddc:	                      move.w #1,19232 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   10de4:	                      clr.l 19234 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   10dea:	                      moveq #1,d0
   10dec:	                      move.l d0,19238 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   10df2:	                      clr.w 1923c <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   10df8:	                      clr.w 1923e <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   10dfe:	                      clr.w 19240 <gameSettings+0x16>

	FreeVec(langName);
   10e04:	                      move.l 562(sp),542(sp)
   10e0a:	                      move.l 190fa <SysBase>,d0
   10e10:	                      movea.l d0,a6
   10e12:	                      movea.l 542(sp),a1
   10e16:	                      jsr -690(a6)
	langName = NULL;
   10e1a:	                      clr.l 562(sp)

	if (fp) {
   10e1e:	                      tst.l 546(sp)
   10e22:	/-------------------- beq.w 11100 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   10e26:	|                     move.l sp,d0
   10e28:	|                     addi.l #265,d0
   10e2e:	|                     move.l #257,d1
   10e34:	|                     move.l d1,-(sp)
   10e36:	|                     clr.l -(sp)
   10e38:	|                     move.l d0,-(sp)
   10e3a:	|                     jsr 13d3c <memset>
   10e40:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   10e44:	|                     move.l sp,d0
   10e46:	|                     addq.l #8,d0
   10e48:	|                     move.l #257,d1
   10e4e:	|                     move.l d1,-(sp)
   10e50:	|                     clr.l -(sp)
   10e52:	|                     move.l d0,-(sp)
   10e54:	|                     jsr 13d3c <memset>
   10e5a:	|                     lea 12(sp),sp
		unsigned char here = 0;
   10e5e:	|                     clr.b 571(sp)
		char readChar = ' ';
   10e62:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   10e68:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   10e6e:	|                     clr.w 566(sp)
		LONG tmp = 0;
   10e72:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   10e76:	|  /----------------> move.l 546(sp),534(sp)
   10e7c:	|  |                  move.l 19102 <DOSBase>,d0
   10e82:	|  |                  movea.l d0,a6
   10e84:	|  |                  move.l 534(sp),d1
   10e88:	|  |                  jsr -306(a6)
   10e8c:	|  |                  move.l d0,530(sp)
   10e90:	|  |                  move.l 530(sp),d0
   10e94:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   10e98:	|  |                  moveq #-1,d1
   10e9a:	|  |                  cmp.l 538(sp),d1
   10e9e:	|  |           /----- bne.s 10eac <readIniFile+0x126>
				readChar = '\n';
   10ea0:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   10ea6:	|  |           |      clr.w 568(sp)
   10eaa:	|  |           |  /-- bra.s 10eb2 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   10eac:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   10eb2:	|  |              \-> move.b 570(sp),d0
   10eb6:	|  |                  ext.w d0
   10eb8:	|  |                  movea.w d0,a0
   10eba:	|  |                  moveq #61,d0
   10ebc:	|  |                  cmp.l a0,d0
   10ebe:	|  |     /----------- beq.w 11068 <readIniFile+0x2e2>
   10ec2:	|  |     |            moveq #61,d1
   10ec4:	|  |     |            cmp.l a0,d1
   10ec6:	|  |  /--|----------- blt.w 11074 <readIniFile+0x2ee>
   10eca:	|  |  |  |            moveq #10,d0
   10ecc:	|  |  |  |            cmp.l a0,d0
   10ece:	|  |  |  |        /-- beq.s 10ed8 <readIniFile+0x152>
   10ed0:	|  |  |  |        |   moveq #13,d1
   10ed2:	|  |  |  |        |   cmp.l a0,d1
   10ed4:	|  |  +--|--------|-- bne.w 11074 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   10ed8:	|  |  |  |        \-> tst.w 566(sp)
   10edc:	|  |  |  |     /----- beq.w 11056 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   10ee0:	|  |  |  |     |      pea 165cb <custom.c.64ca0e9f+0x18f5>
   10ee6:	|  |  |  |     |      move.l sp,d0
   10ee8:	|  |  |  |     |      addi.l #269,d0
   10eee:	|  |  |  |     |      move.l d0,-(sp)
   10ef0:	|  |  |  |     |      jsr 1121c <strcmp>
   10ef6:	|  |  |  |     |      addq.l #8,sp
   10ef8:	|  |  |  |     |      tst.l d0
   10efa:	|  |  |  |     |  /-- bne.s 10f14 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   10efc:	|  |  |  |     |  |   move.l sp,d0
   10efe:	|  |  |  |     |  |   addq.l #8,d0
   10f00:	|  |  |  |     |  |   move.l d0,-(sp)
   10f02:	|  |  |  |     |  |   jsr 1110c <stringToInt>
   10f08:	|  |  |  |     |  |   addq.l #4,sp
   10f0a:	|  |  |  |     |  |   move.l d0,1922a <gameSettings>
   10f10:	|  |  |  |     +--|-- bra.w 11056 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   10f14:	|  |  |  |     |  \-> pea 165d4 <custom.c.64ca0e9f+0x18fe>
   10f1a:	|  |  |  |     |      move.l sp,d0
   10f1c:	|  |  |  |     |      addi.l #269,d0
   10f22:	|  |  |  |     |      move.l d0,-(sp)
   10f24:	|  |  |  |     |      jsr 1121c <strcmp>
   10f2a:	|  |  |  |     |      addq.l #8,sp
   10f2c:	|  |  |  |     |      tst.l d0
   10f2e:	|  |  |  |     |  /-- bne.s 10f54 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   10f30:	|  |  |  |     |  |   move.l sp,d0
   10f32:	|  |  |  |     |  |   addq.l #8,d0
   10f34:	|  |  |  |     |  |   move.l d0,-(sp)
   10f36:	|  |  |  |     |  |   jsr 1110c <stringToInt>
   10f3c:	|  |  |  |     |  |   addq.l #4,sp
   10f3e:	|  |  |  |     |  |   tst.l d0
   10f40:	|  |  |  |     |  |   seq d0
   10f42:	|  |  |  |     |  |   neg.b d0
   10f44:	|  |  |  |     |  |   move.b d0,d0
   10f46:	|  |  |  |     |  |   andi.w #255,d0
   10f4a:	|  |  |  |     |  |   move.w d0,19232 <gameSettings+0x8>
   10f50:	|  |  |  |     +--|-- bra.w 11056 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   10f54:	|  |  |  |     |  \-> pea 165db <custom.c.64ca0e9f+0x1905>
   10f5a:	|  |  |  |     |      move.l sp,d0
   10f5c:	|  |  |  |     |      addi.l #269,d0
   10f62:	|  |  |  |     |      move.l d0,-(sp)
   10f64:	|  |  |  |     |      jsr 1121c <strcmp>
   10f6a:	|  |  |  |     |      addq.l #8,sp
   10f6c:	|  |  |  |     |      tst.l d0
   10f6e:	|  |  |  |     |  /-- bne.s 10f88 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   10f70:	|  |  |  |     |  |   move.l sp,d0
   10f72:	|  |  |  |     |  |   addq.l #8,d0
   10f74:	|  |  |  |     |  |   move.l d0,-(sp)
   10f76:	|  |  |  |     |  |   jsr 1110c <stringToInt>
   10f7c:	|  |  |  |     |  |   addq.l #4,sp
   10f7e:	|  |  |  |     |  |   move.l d0,19234 <gameSettings+0xa>
   10f84:	|  |  |  |     +--|-- bra.w 11056 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   10f88:	|  |  |  |     |  \-> pea 165e3 <custom.c.64ca0e9f+0x190d>
   10f8e:	|  |  |  |     |      move.l sp,d0
   10f90:	|  |  |  |     |      addi.l #269,d0
   10f96:	|  |  |  |     |      move.l d0,-(sp)
   10f98:	|  |  |  |     |      jsr 1121c <strcmp>
   10f9e:	|  |  |  |     |      addq.l #8,sp
   10fa0:	|  |  |  |     |      tst.l d0
   10fa2:	|  |  |  |     |  /-- bne.s 10fbc <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   10fa4:	|  |  |  |     |  |   move.l sp,d0
   10fa6:	|  |  |  |     |  |   addq.l #8,d0
   10fa8:	|  |  |  |     |  |   move.l d0,-(sp)
   10faa:	|  |  |  |     |  |   jsr 1110c <stringToInt>
   10fb0:	|  |  |  |     |  |   addq.l #4,sp
   10fb2:	|  |  |  |     |  |   move.l d0,19238 <gameSettings+0xe>
   10fb8:	|  |  |  |     +--|-- bra.w 11056 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   10fbc:	|  |  |  |     |  \-> pea 165ed <custom.c.64ca0e9f+0x1917>
   10fc2:	|  |  |  |     |      move.l sp,d0
   10fc4:	|  |  |  |     |      addi.l #269,d0
   10fca:	|  |  |  |     |      move.l d0,-(sp)
   10fcc:	|  |  |  |     |      jsr 1121c <strcmp>
   10fd2:	|  |  |  |     |      addq.l #8,sp
   10fd4:	|  |  |  |     |      tst.l d0
   10fd6:	|  |  |  |     |  /-- bne.s 10ff0 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   10fd8:	|  |  |  |     |  |   move.l sp,d0
   10fda:	|  |  |  |     |  |   addq.l #8,d0
   10fdc:	|  |  |  |     |  |   move.l d0,-(sp)
   10fde:	|  |  |  |     |  |   jsr 1110c <stringToInt>
   10fe4:	|  |  |  |     |  |   addq.l #4,sp
   10fe6:	|  |  |  |     |  |   move.l d0,d0
   10fe8:	|  |  |  |     |  |   move.w d0,1923c <gameSettings+0x12>
   10fee:	|  |  |  |     +--|-- bra.s 11056 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   10ff0:	|  |  |  |     |  \-> pea 165f9 <custom.c.64ca0e9f+0x1923>
   10ff6:	|  |  |  |     |      move.l sp,d0
   10ff8:	|  |  |  |     |      addi.l #269,d0
   10ffe:	|  |  |  |     |      move.l d0,-(sp)
   11000:	|  |  |  |     |      jsr 1121c <strcmp>
   11006:	|  |  |  |     |      addq.l #8,sp
   11008:	|  |  |  |     |      tst.l d0
   1100a:	|  |  |  |     |  /-- bne.s 11024 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   1100c:	|  |  |  |     |  |   move.l sp,d0
   1100e:	|  |  |  |     |  |   addq.l #8,d0
   11010:	|  |  |  |     |  |   move.l d0,-(sp)
   11012:	|  |  |  |     |  |   jsr 1110c <stringToInt>
   11018:	|  |  |  |     |  |   addq.l #4,sp
   1101a:	|  |  |  |     |  |   move.l d0,d0
   1101c:	|  |  |  |     |  |   move.w d0,1923e <gameSettings+0x14>
   11022:	|  |  |  |     +--|-- bra.s 11056 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   11024:	|  |  |  |     |  \-> pea 16607 <custom.c.64ca0e9f+0x1931>
   1102a:	|  |  |  |     |      move.l sp,d0
   1102c:	|  |  |  |     |      addi.l #269,d0
   11032:	|  |  |  |     |      move.l d0,-(sp)
   11034:	|  |  |  |     |      jsr 1121c <strcmp>
   1103a:	|  |  |  |     |      addq.l #8,sp
   1103c:	|  |  |  |     |      tst.l d0
   1103e:	|  |  |  |     +----- bne.s 11056 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   11040:	|  |  |  |     |      move.l sp,d0
   11042:	|  |  |  |     |      addq.l #8,d0
   11044:	|  |  |  |     |      move.l d0,-(sp)
   11046:	|  |  |  |     |      jsr 1110c <stringToInt>
   1104c:	|  |  |  |     |      addq.l #4,sp
   1104e:	|  |  |  |     |      move.l d0,d0
   11050:	|  |  |  |     |      move.w d0,19240 <gameSettings+0x16>
					}
				}
				here = 0;
   11056:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   1105a:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   1105e:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   11062:	|  |  |  |            clr.b 8(sp)
				break;
   11066:	|  |  |  |  /-------- bra.s 110de <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   11068:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   1106e:	|  |  |     |         clr.b 571(sp)
				break;
   11072:	|  |  |     +-------- bra.s 110de <readIniFile+0x358>

				default:
				if (doingSecond) {
   11074:	|  |  \-----|-------> tst.w 566(sp)
   11078:	|  |        |  /----- beq.s 110ac <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   1107a:	|  |        |  |      move.b 571(sp),d0
   1107e:	|  |        |  |      move.b d0,d1
   11080:	|  |        |  |      addq.b #1,d1
   11082:	|  |        |  |      move.b d1,571(sp)
   11086:	|  |        |  |      move.b d0,d0
   11088:	|  |        |  |      andi.l #255,d0
   1108e:	|  |        |  |      lea 572(sp),a0
   11092:	|  |        |  |      adda.l d0,a0
   11094:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   1109a:	|  |        |  |      moveq #0,d0
   1109c:	|  |        |  |      move.b 571(sp),d0
   110a0:	|  |        |  |      lea 572(sp),a0
   110a4:	|  |        |  |      adda.l d0,a0
   110a6:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   110aa:	|  |        |  |  /-- bra.s 110dc <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   110ac:	|  |        |  \--|-> move.b 571(sp),d0
   110b0:	|  |        |     |   move.b d0,d1
   110b2:	|  |        |     |   addq.b #1,d1
   110b4:	|  |        |     |   move.b d1,571(sp)
   110b8:	|  |        |     |   move.b d0,d0
   110ba:	|  |        |     |   andi.l #255,d0
   110c0:	|  |        |     |   lea 572(sp),a0
   110c4:	|  |        |     |   adda.l d0,a0
   110c6:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   110cc:	|  |        |     |   moveq #0,d0
   110ce:	|  |        |     |   move.b 571(sp),d0
   110d2:	|  |        |     |   lea 572(sp),a0
   110d6:	|  |        |     |   adda.l d0,a0
   110d8:	|  |        |     |   clr.b -307(a0)
				break;
   110dc:	|  |        |     \-> nop
			}
		} while (keepGoing);
   110de:	|  |        \-------> tst.w 568(sp)
   110e2:	|  \----------------- bne.w 10e76 <readIniFile+0xf0>

		Close(fp);
   110e6:	|                     move.l 546(sp),526(sp)
   110ec:	|                     move.l 19102 <DOSBase>,d0
   110f2:	|                     movea.l d0,a6
   110f4:	|                     move.l 526(sp),d1
   110f8:	|                     jsr -36(a6)
   110fc:	|                     move.l d0,522(sp)
	}
}
   11100:	\-------------------> nop
   11102:	                      move.l (sp)+,d2
   11104:	                      movea.l (sp)+,a6
   11106:	                      lea 564(sp),sp
   1110a:	                      rts

0001110c <stringToInt>:

unsigned int stringToInt (char * s) {
   1110c:	             subq.l #8,sp
	int i = 0;
   1110e:	             clr.l 4(sp)
	BOOL negative = FALSE;
   11112:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   11116:	/----------> movea.l 12(sp),a0
   1111a:	|            move.b (a0),d0
   1111c:	|            cmpi.b #47,d0
   11120:	|        /-- ble.s 11158 <stringToInt+0x4c>
   11122:	|        |   movea.l 12(sp),a0
   11126:	|        |   move.b (a0),d0
   11128:	|        |   cmpi.b #57,d0
   1112c:	|        +-- bgt.s 11158 <stringToInt+0x4c>
			i *= 10;
   1112e:	|        |   move.l 4(sp),d1
   11132:	|        |   move.l d1,d0
   11134:	|        |   add.l d0,d0
   11136:	|        |   add.l d0,d0
   11138:	|        |   add.l d1,d0
   1113a:	|        |   add.l d0,d0
   1113c:	|        |   move.l d0,4(sp)
			i += *s - '0';
   11140:	|        |   movea.l 12(sp),a0
   11144:	|        |   move.b (a0),d0
   11146:	|        |   ext.w d0
   11148:	|        |   movea.w d0,a0
   1114a:	|        |   moveq #-48,d0
   1114c:	|        |   add.l a0,d0
   1114e:	|        |   add.l d0,4(sp)
			s ++;
   11152:	|        |   addq.l #1,12(sp)
   11156:	|  /-----|-- bra.s 11190 <stringToInt+0x84>
		} else if (*s == '-') {
   11158:	|  |     \-> movea.l 12(sp),a0
   1115c:	|  |         move.b (a0),d0
   1115e:	|  |         cmpi.b #45,d0
   11162:	|  |     /-- bne.s 1117c <stringToInt+0x70>
			negative = ! negative;
   11164:	|  |     |   tst.w 2(sp)
   11168:	|  |     |   seq d0
   1116a:	|  |     |   neg.b d0
   1116c:	|  |     |   move.b d0,d0
   1116e:	|  |     |   andi.w #255,d0
   11172:	|  |     |   move.w d0,2(sp)
			s++;
   11176:	|  |     |   addq.l #1,12(sp)
   1117a:	+--|-----|-- bra.s 11116 <stringToInt+0xa>
		} else {
			if (negative)
   1117c:	|  |     \-> tst.w 2(sp)
   11180:	|  |     /-- beq.s 1118a <stringToInt+0x7e>
				return -i;
   11182:	|  |     |   move.l 4(sp),d0
   11186:	|  |     |   neg.l d0
   11188:	|  |  /--|-- bra.s 11192 <stringToInt+0x86>
			return i;
   1118a:	|  |  |  \-> move.l 4(sp),d0
   1118e:	|  |  +----- bra.s 11192 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   11190:	\--\--|----X bra.s 11116 <stringToInt+0xa>
		}
	}
   11192:	      \----> addq.l #8,sp
   11194:	             rts

00011196 <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
   11196:	    lea -28(sp),sp
   1119a:	    move.l a6,-(sp)
   1119c:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   1119e:	    pea 16611 <custom.c.64ca0e9f+0x193b>
   111a4:	    jsr 13db8 <KPrintF>
   111aa:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   111ac:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   111b0:	    move.l 40(sp),30(sp)
   111b6:	    move.l #1005,26(sp)
   111be:	    move.l 19102 <DOSBase>,d0
   111c4:	    movea.l d0,a6
   111c6:	    move.l 30(sp),d1
   111ca:	    move.l 26(sp),d2
   111ce:	    jsr -30(a6)
   111d2:	    move.l d0,22(sp)
   111d6:	    move.l 22(sp),d0
   111da:	    move.l d0,18(sp)
	if (tester) {
   111de:	/-- beq.s 1120e <fileExists+0x78>
		KPrintF("fileexists: File exists");
   111e0:	|   pea 1662b <custom.c.64ca0e9f+0x1955>
   111e6:	|   jsr 13db8 <KPrintF>
   111ec:	|   addq.l #4,sp
		retval = 1;
   111ee:	|   move.b #1,35(sp)
		Close(tester);
   111f4:	|   move.l 18(sp),14(sp)
   111fa:	|   move.l 19102 <DOSBase>,d0
   11200:	|   movea.l d0,a6
   11202:	|   move.l 14(sp),d1
   11206:	|   jsr -36(a6)
   1120a:	|   move.l d0,10(sp)
	}
	return retval;
   1120e:	\-> move.b 35(sp),d0
   11212:	    move.l (sp)+,d2
   11214:	    movea.l (sp)+,a6
   11216:	    lea 28(sp),sp
   1121a:	    rts

0001121c <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   1121c:	   /-- bra.s 11226 <strcmp+0xa>
    {
        s1++;
   1121e:	/--|-> addq.l #1,4(sp)
        s2++;
   11222:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   11226:	|  \-> movea.l 4(sp),a0
   1122a:	|      move.b (a0),d0
   1122c:	|  /-- beq.s 1123e <strcmp+0x22>
   1122e:	|  |   movea.l 4(sp),a0
   11232:	|  |   move.b (a0),d1
   11234:	|  |   movea.l 8(sp),a0
   11238:	|  |   move.b (a0),d0
   1123a:	|  |   cmp.b d1,d0
   1123c:	\--|-- beq.s 1121e <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   1123e:	   \-> movea.l 4(sp),a0
   11242:	       move.b (a0),d0
   11244:	       moveq #0,d1
   11246:	       move.b d0,d1
   11248:	       movea.l 8(sp),a0
   1124c:	       move.b (a0),d0
   1124e:	       move.b d0,d0
   11250:	       andi.l #255,d0
   11256:	       sub.l d0,d1
   11258:	       move.l d1,d0
}
   1125a:	       rts

0001125c <strlen>:

long unsigned int strlen (const char *s) 
{  
   1125c:	       subq.l #4,sp
	long unsigned int i = 0;
   1125e:	       clr.l (sp)
	while(s[i]) i++; 
   11260:	   /-- bra.s 11264 <strlen+0x8>
   11262:	/--|-> addq.l #1,(sp)
   11264:	|  \-> movea.l 8(sp),a0
   11268:	|      adda.l (sp),a0
   1126a:	|      move.b (a0),d0
   1126c:	\----- bne.s 11262 <strlen+0x6>
	return(i);
   1126e:	       move.l (sp),d0
}
   11270:	       addq.l #4,sp
   11272:	       rts

00011274 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   11274:	    nop
   11276:	/-> move.l 8(sp),d0
   1127a:	|   move.l d0,d1
   1127c:	|   addq.l #1,d1
   1127e:	|   move.l d1,8(sp)
   11282:	|   movea.l 4(sp),a0
   11286:	|   lea 1(a0),a1
   1128a:	|   move.l a1,4(sp)
   1128e:	|   movea.l d0,a1
   11290:	|   move.b (a1),d0
   11292:	|   move.b d0,(a0)
   11294:	|   move.b (a0),d0
   11296:	\-- bne.s 11276 <strcpy+0x2>
}
   11298:	    nop
   1129a:	    rts

0001129c <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   1129c:	    lea -20(sp),sp
   112a0:	    move.l a6,-(sp)
   112a2:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   112a4:	    move.l 32(sp),-(sp)
   112a8:	    jsr 1125c <strlen>
   112ae:	    addq.l #4,sp
   112b0:	    move.l d0,d2
   112b2:	    move.l 36(sp),-(sp)
   112b6:	    jsr 1125c <strlen>
   112bc:	    addq.l #4,sp
   112be:	    add.l d2,d0
   112c0:	    move.l d0,d1
   112c2:	    addq.l #1,d1
   112c4:	    move.l d1,20(sp)
   112c8:	    clr.l 16(sp)
   112cc:	    move.l 190fa <SysBase>,d0
   112d2:	    movea.l d0,a6
   112d4:	    move.l 20(sp),d0
   112d8:	    move.l 16(sp),d1
   112dc:	    jsr -684(a6)
   112e0:	    move.l d0,12(sp)
   112e4:	    move.l 12(sp),d0
   112e8:	    move.l d0,8(sp)
	char * t = newString;
   112ec:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   112f2:	    nop
   112f4:	/-> move.l 32(sp),d0
   112f8:	|   move.l d0,d1
   112fa:	|   addq.l #1,d1
   112fc:	|   move.l d1,32(sp)
   11300:	|   movea.l 24(sp),a0
   11304:	|   lea 1(a0),a1
   11308:	|   move.l a1,24(sp)
   1130c:	|   movea.l d0,a1
   1130e:	|   move.b (a1),d0
   11310:	|   move.b d0,(a0)
   11312:	|   move.b (a0),d0
   11314:	\-- bne.s 112f4 <joinStrings+0x58>
	t--;
   11316:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   1131a:	    nop
   1131c:	/-> move.l 36(sp),d0
   11320:	|   move.l d0,d1
   11322:	|   addq.l #1,d1
   11324:	|   move.l d1,36(sp)
   11328:	|   movea.l 24(sp),a0
   1132c:	|   lea 1(a0),a1
   11330:	|   move.l a1,24(sp)
   11334:	|   movea.l d0,a1
   11336:	|   move.b (a1),d0
   11338:	|   move.b d0,(a0)
   1133a:	|   move.b (a0),d0
   1133c:	\-- bne.s 1131c <joinStrings+0x80>

	return newString;
   1133e:	    move.l 8(sp),d0
}
   11342:	    move.l (sp)+,d2
   11344:	    movea.l (sp)+,a6
   11346:	    lea 20(sp),sp
   1134a:	    rts

0001134c <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   1134c:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   11350:	       moveq #10,d0
   11352:	       cmp.l 28(sp),d0
   11356:	   /-- bne.s 11374 <itoa+0x28>
   11358:	   |   tst.l 20(sp)
   1135c:	   +-- bge.s 11374 <itoa+0x28>
        *str++ = '-';
   1135e:	   |   move.l 24(sp),d0
   11362:	   |   move.l d0,d1
   11364:	   |   addq.l #1,d1
   11366:	   |   move.l d1,24(sp)
   1136a:	   |   movea.l d0,a0
   1136c:	   |   move.b #45,(a0)
        value *= -1;
   11370:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   11374:	   \-> move.l 24(sp),12(sp)
   1137a:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   11380:	   /-> move.l 20(sp),d0
   11384:	   |   move.l 28(sp),-(sp)
   11388:	   |   move.l d0,-(sp)
   1138a:	   |   jsr 14822 <__modsi3>
   11390:	   |   addq.l #8,sp
   11392:	   |   movea.l d0,a1
   11394:	   |   move.l 12(sp),d0
   11398:	   |   move.l d0,d1
   1139a:	   |   addq.l #1,d1
   1139c:	   |   move.l d1,12(sp)
   113a0:	   |   lea 16643 <custom.c.64ca0e9f+0x196d>,a0
   113a6:	   |   move.b (0,a1,a0.l),d1
   113aa:	   |   movea.l d0,a0
   113ac:	   |   move.b d1,(a0)
        value /= base;
   113ae:	   |   move.l 28(sp),-(sp)
   113b2:	   |   move.l 24(sp),-(sp)
   113b6:	   |   jsr 147f4 <__divsi3>
   113bc:	   |   addq.l #8,sp
   113be:	   |   move.l d0,20(sp)
    } while (value);
   113c2:	   \-- bne.s 11380 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   113c4:	       move.l 12(sp),d0
   113c8:	       move.l d0,d1
   113ca:	       subq.l #1,d1
   113cc:	       move.l d1,12(sp)
   113d0:	       movea.l d0,a0
   113d2:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   113d4:	       move.l 4(sp),8(sp)
   113da:	   /-- bra.s 11400 <itoa+0xb4>
        char temp = *low;
   113dc:	/--|-> movea.l 8(sp),a0
   113e0:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   113e4:	|  |   movea.l 12(sp),a0
   113e8:	|  |   move.b (a0),d0
   113ea:	|  |   movea.l 8(sp),a0
   113ee:	|  |   move.b d0,(a0)
        *ptr = temp;
   113f0:	|  |   movea.l 12(sp),a0
   113f4:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   113f8:	|  |   addq.l #1,8(sp)
   113fc:	|  |   subq.l #1,12(sp)
   11400:	|  \-> move.l 8(sp),d0
   11404:	|      cmp.l 12(sp),d0
   11408:	\----- bcs.s 113dc <itoa+0x90>
    }
    return rc;
   1140a:	       move.l 4(sp),d0
}
   1140e:	       lea 16(sp),sp
   11412:	       rts

00011414 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   11414:	                            lea -40(sp),sp
   11418:	                            move.l d2,-(sp)
    char* s = str;
   1141a:	                            move.l 48(sp),40(sp)
    const char* p = format;
   11420:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   11426:	   /----------------------- bra.w 1155a <vsprintf2+0x146>
        if (*p == '%') {
   1142a:	/--|----------------------> movea.l 36(sp),a0
   1142e:	|  |                        move.b (a0),d0
   11430:	|  |                        cmpi.b #37,d0
   11434:	|  |  /-------------------- bne.w 11540 <vsprintf2+0x12c>
            switch (*++p) {
   11438:	|  |  |                     addq.l #1,36(sp)
   1143c:	|  |  |                     movea.l 36(sp),a0
   11440:	|  |  |                     move.b (a0),d0
   11442:	|  |  |                     ext.w d0
   11444:	|  |  |                     movea.w d0,a0
   11446:	|  |  |                     moveq #115,d0
   11448:	|  |  |                     cmp.l a0,d0
   1144a:	|  |  |           /-------- beq.s 114c2 <vsprintf2+0xae>
   1144c:	|  |  |           |         moveq #115,d1
   1144e:	|  |  |           |         cmp.l a0,d1
   11450:	|  |  |  /--------|-------- blt.w 11528 <vsprintf2+0x114>
   11454:	|  |  |  |        |         moveq #99,d2
   11456:	|  |  |  |        |         cmp.l a0,d2
   11458:	|  |  |  |  /-----|-------- beq.w 11500 <vsprintf2+0xec>
   1145c:	|  |  |  |  |     |         moveq #100,d0
   1145e:	|  |  |  |  |     |         cmp.l a0,d0
   11460:	|  |  |  +--|-----|-------- bne.w 11528 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   11464:	|  |  |  |  |     |         addq.l #4,56(sp)
   11468:	|  |  |  |  |     |         movea.l 56(sp),a0
   1146c:	|  |  |  |  |     |         move.l (a0),d0
   1146e:	|  |  |  |  |     |         move.l d0,d1
   11470:	|  |  |  |  |     |         subq.l #1,d1
   11472:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   11476:	|  |  |  |  |     |         pea a <_start+0xa>
   1147a:	|  |  |  |  |     |         lea 8(sp),a0
   1147e:	|  |  |  |  |     |         move.l a0,-(sp)
   11480:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   11484:	|  |  |  |  |     |         jsr 1134c <itoa>
   1148a:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   1148e:	|  |  |  |  |     |         lea 44(sp),a0
   11492:	|  |  |  |  |     |         lea -40(a0),a0
   11496:	|  |  |  |  |     |         move.l a0,28(sp)
   1149a:	|  |  |  |  |     |     /-- bra.s 114b6 <vsprintf2+0xa2>
                        *s++ = *b;
   1149c:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   114a0:	|  |  |  |  |     |  |  |   move.l d0,d1
   114a2:	|  |  |  |  |     |  |  |   addq.l #1,d1
   114a4:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   114a8:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   114ac:	|  |  |  |  |     |  |  |   move.b (a0),d1
   114ae:	|  |  |  |  |     |  |  |   movea.l d0,a0
   114b0:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   114b2:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   114b6:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   114ba:	|  |  |  |  |     |  |      move.b (a0),d0
   114bc:	|  |  |  |  |     |  \----- bne.s 1149c <vsprintf2+0x88>
                    }
                    break;
   114be:	|  |  |  |  |  /--|-------- bra.w 11556 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   114c2:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   114c6:	|  |  |  |  |  |            movea.l 56(sp),a0
   114ca:	|  |  |  |  |  |            move.l (a0),d0
   114cc:	|  |  |  |  |  |            move.l d0,d1
   114ce:	|  |  |  |  |  |            subq.l #1,d1
   114d0:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   114d4:	|  |  |  |  |  |        /-- bra.s 114f6 <vsprintf2+0xe2>
                        *s++ = *sval++;
   114d6:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   114da:	|  |  |  |  |  |     |  |   move.l d1,d2
   114dc:	|  |  |  |  |  |     |  |   addq.l #1,d2
   114de:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   114e2:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   114e6:	|  |  |  |  |  |     |  |   move.l d0,d2
   114e8:	|  |  |  |  |  |     |  |   addq.l #1,d2
   114ea:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   114ee:	|  |  |  |  |  |     |  |   movea.l d1,a0
   114f0:	|  |  |  |  |  |     |  |   move.b (a0),d1
   114f2:	|  |  |  |  |  |     |  |   movea.l d0,a0
   114f4:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   114f6:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   114fa:	|  |  |  |  |  |     |      move.b (a0),d0
   114fc:	|  |  |  |  |  |     \----- bne.s 114d6 <vsprintf2+0xc2>
                    }
                    break;
   114fe:	|  |  |  |  |  +----------- bra.s 11556 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   11500:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   11504:	|  |  |  |     |            movea.l 56(sp),a0
   11508:	|  |  |  |     |            move.l (a0),d0
   1150a:	|  |  |  |     |            move.l d0,d1
   1150c:	|  |  |  |     |            subq.l #1,d1
   1150e:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   11512:	|  |  |  |     |            move.l 40(sp),d0
   11516:	|  |  |  |     |            move.l d0,d2
   11518:	|  |  |  |     |            addq.l #1,d2
   1151a:	|  |  |  |     |            move.l d2,40(sp)
   1151e:	|  |  |  |     |            move.l 24(sp),d1
   11522:	|  |  |  |     |            movea.l d0,a0
   11524:	|  |  |  |     |            move.b d1,(a0)
                    break;
   11526:	|  |  |  |     +----------- bra.s 11556 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   11528:	|  |  |  \-----|----------> move.l 40(sp),d0
   1152c:	|  |  |        |            move.l d0,d1
   1152e:	|  |  |        |            addq.l #1,d1
   11530:	|  |  |        |            move.l d1,40(sp)
   11534:	|  |  |        |            movea.l 36(sp),a0
   11538:	|  |  |        |            move.b (a0),d1
   1153a:	|  |  |        |            movea.l d0,a0
   1153c:	|  |  |        |            move.b d1,(a0)
                    break;
   1153e:	|  |  |        +----------- bra.s 11556 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   11540:	|  |  \--------|----------> move.l 40(sp),d0
   11544:	|  |           |            move.l d0,d1
   11546:	|  |           |            addq.l #1,d1
   11548:	|  |           |            move.l d1,40(sp)
   1154c:	|  |           |            movea.l 36(sp),a0
   11550:	|  |           |            move.b (a0),d1
   11552:	|  |           |            movea.l d0,a0
   11554:	|  |           |            move.b d1,(a0)
        }
        p++;
   11556:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   1155a:	|  \----------------------> movea.l 36(sp),a0
   1155e:	|                           move.b (a0),d0
   11560:	\-------------------------- bne.w 1142a <vsprintf2+0x16>
    }
    *s = '\0';
   11564:	                            movea.l 40(sp),a0
   11568:	                            clr.b (a0)
    return s - str;
   1156a:	                            move.l 40(sp),d0
   1156e:	                            sub.l 48(sp),d0
}
   11572:	                            move.l (sp)+,d2
   11574:	                            lea 40(sp),sp
   11578:	                            rts

0001157a <sprintf>:

int sprintf(char* str, const char* format, ...) {
   1157a:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   1157c:	moveq #16,d0
   1157e:	add.l sp,d0
   11580:	move.l d0,d1
   11582:	addq.l #4,d1
   11584:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   11588:	move.l 16(sp),d0
   1158c:	move.l 4(sp),-(sp)
   11590:	move.l d0,-(sp)
   11592:	move.l 20(sp),-(sp)
   11596:	jsr 11414 <vsprintf2>
   1159c:	lea 12(sp),sp
   115a0:	move.l d0,(sp)
    va_end(args);
   115a2:	clr.l 4(sp)

    return done;
   115a6:	move.l (sp),d0
}
   115a8:	addq.l #8,sp
   115aa:	rts

000115ac <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   115ac:	       lea -20(sp),sp
   115b0:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   115b2:	       moveq #12,d0
   115b4:	       move.l d0,20(sp)
   115b8:	       clr.l 16(sp)
   115bc:	       move.l 190fa <SysBase>,d0
   115c2:	       movea.l d0,a6
   115c4:	       move.l 20(sp),d0
   115c8:	       move.l 16(sp),d1
   115cc:	       jsr -684(a6)
   115d0:	       move.l d0,12(sp)
   115d4:	       move.l 12(sp),d0
   115d8:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   115dc:	   /-- bne.s 115e2 <addVarToStack+0x36>
   115de:	   |   clr.w d0
   115e0:	/--|-- bra.s 1162a <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   115e2:	|  \-> move.l 8(sp),d0
   115e6:	|      move.l d0,-(sp)
   115e8:	|      move.l 32(sp),-(sp)
   115ec:	|      jsr 1210e <copyMain>
   115f2:	|      addq.l #8,sp
   115f4:	|      tst.w d0
   115f6:	|  /-- bne.s 11612 <addVarToStack+0x66>
        FreeVec(newStack);
   115f8:	|  |   move.l 8(sp),4(sp)
   115fe:	|  |   move.l 190fa <SysBase>,d0
   11604:	|  |   movea.l d0,a6
   11606:	|  |   movea.l 4(sp),a1
   1160a:	|  |   jsr -690(a6)
        return FALSE;
   1160e:	|  |   clr.w d0
   11610:	+--|-- bra.s 1162a <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   11612:	|  \-> movea.l 32(sp),a0
   11616:	|      move.l (a0),d0
   11618:	|      movea.l 8(sp),a0
   1161c:	|      move.l d0,8(a0)
    *thisStack = newStack;
   11620:	|      movea.l 32(sp),a0
   11624:	|      move.l 8(sp),(a0)
    return TRUE;
   11628:	|      moveq #1,d0
}
   1162a:	\----> movea.l (sp)+,a6
   1162c:	       lea 20(sp),sp
   11630:	       rts

00011632 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   11632:	       lea -16(sp),sp
   11636:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   11638:	       moveq #12,d0
   1163a:	       move.l d0,16(sp)
   1163e:	       clr.l 12(sp)
   11642:	       move.l 190fa <SysBase>,d0
   11648:	       movea.l d0,a6
   1164a:	       move.l 16(sp),d0
   1164e:	       move.l 12(sp),d1
   11652:	       jsr -684(a6)
   11656:	       move.l d0,8(sp)
   1165a:	       move.l 8(sp),d0
   1165e:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   11662:	   /-- bne.s 11668 <addVarToStackQuick+0x36>
   11664:	   |   clr.w d0
   11666:	/--|-- bra.s 1169e <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   11668:	|  \-> move.l 4(sp),d0
   1166c:	|      pea 8 <_start+0x8>
   11670:	|      move.l 28(sp),-(sp)
   11674:	|      move.l d0,-(sp)
   11676:	|      jsr 13d6c <memcpy>
   1167c:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   11680:	|      movea.l 24(sp),a0
   11684:	|      clr.l (a0)

    newStack->next = *thisStack;
   11686:	|      movea.l 28(sp),a0
   1168a:	|      move.l (a0),d0
   1168c:	|      movea.l 4(sp),a0
   11690:	|      move.l d0,8(a0)
    *thisStack = newStack;
   11694:	|      movea.l 28(sp),a0
   11698:	|      move.l 4(sp),(a0)
    return TRUE;
   1169c:	|      moveq #1,d0
}
   1169e:	\----> movea.l (sp)+,a6
   116a0:	       lea 16(sp),sp
   116a4:	       rts

000116a6 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   116a6:	       lea -16(sp),sp
   116aa:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   116ac:	       movea.l 24(sp),a0
   116b0:	       move.l (a0),d0
   116b2:	       moveq #1,d1
   116b4:	       cmp.l d0,d1
   116b6:	   /-- bne.s 116e0 <addVariablesInSecond+0x3a>
   116b8:	   |   movea.l 28(sp),a0
   116bc:	   |   move.l (a0),d0
   116be:	   |   moveq #1,d1
   116c0:	   |   cmp.l d0,d1
   116c2:	   +-- bne.s 116e0 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   116c4:	   |   movea.l 28(sp),a0
   116c8:	   |   move.l 4(a0),d1
   116cc:	   |   movea.l 24(sp),a0
   116d0:	   |   move.l 4(a0),d0
   116d4:	   |   add.l d1,d0
   116d6:	   |   movea.l 28(sp),a0
   116da:	   |   move.l d0,4(a0)
   116de:	/--|-- bra.s 1175a <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   116e0:	|  \-> move.l 24(sp),-(sp)
   116e4:	|      jsr 12346 <getTextFromAnyVar>
   116ea:	|      addq.l #4,sp
   116ec:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   116f0:	|      move.l 28(sp),-(sp)
   116f4:	|      jsr 12346 <getTextFromAnyVar>
   116fa:	|      addq.l #4,sp
   116fc:	|      move.l d0,12(sp)

		unlinkVar(var2);
   11700:	|      move.l 28(sp),-(sp)
   11704:	|      jsr 11fbe <unlinkVar>
   1170a:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   1170c:	|      move.l 12(sp),-(sp)
   11710:	|      move.l 20(sp),-(sp)
   11714:	|      jsr 1129c <joinStrings>
   1171a:	|      addq.l #8,sp
   1171c:	|      movea.l 28(sp),a0
   11720:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   11724:	|      movea.l 28(sp),a0
   11728:	|      moveq #3,d0
   1172a:	|      move.l d0,(a0)
		FreeVec(string1);
   1172c:	|      move.l 16(sp),8(sp)
   11732:	|      move.l 190fa <SysBase>,d0
   11738:	|      movea.l d0,a6
   1173a:	|      movea.l 8(sp),a1
   1173e:	|      jsr -690(a6)
		FreeVec(string2);
   11742:	|      move.l 12(sp),4(sp)
   11748:	|      move.l 190fa <SysBase>,d0
   1174e:	|      movea.l d0,a6
   11750:	|      movea.l 4(sp),a1
   11754:	|      jsr -690(a6)
	}
}
   11758:	|      nop
   1175a:	\----> nop
   1175c:	       movea.l (sp)+,a6
   1175e:	       lea 16(sp),sp
   11762:	       rts

00011764 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   11764:	movea.l 8(sp),a0
   11768:	move.l 4(a0),-(sp)
   1176c:	move.l (a0),-(sp)
   1176e:	movea.l 12(sp),a0
   11772:	move.l 4(a0),-(sp)
   11776:	move.l (a0),-(sp)
   11778:	jsr 1179a <compareVars>
   1177e:	lea 16(sp),sp
   11782:	move.l d0,-(sp)
   11784:	pea 1 <_start+0x1>
   11788:	move.l 16(sp),-(sp)
   1178c:	jsr 12662 <setVariable>
   11792:	lea 12(sp),sp
}
   11796:	nop
   11798:	rts

0001179a <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   1179a:	       subq.l #4,sp
	int re = 0;
   1179c:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   1179e:	       move.l 8(sp),d1
   117a2:	       move.l 16(sp),d0
   117a6:	       cmp.l d1,d0
   117a8:	/----- bne.w 11870 <compareVars+0xd6>
		switch (var1.varType) {
   117ac:	|      move.l 8(sp),d0
   117b0:	|      moveq #9,d1
   117b2:	|      cmp.l d0,d1
   117b4:	|  /-- bcs.w 11858 <compareVars+0xbe>
   117b8:	|  |   add.l d0,d0
   117ba:	|  |   movea.l d0,a0
   117bc:	|  |   adda.l #71624,a0
   117c2:	|  |   move.w (a0),d0
   117c4:	|  |   jmp (117c8 <compareVars+0x2e>,pc,d0.w)
   117c8:	|  |   ori.b #-112,(a4)
   117cc:	|  |   ori.l #5243024,(a0)
   117d2:	|  |   ori.l #7733392,(a0)
   117d8:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   117de:	|  |   move.l d0,(sp)
			break;
   117e0:	+--|-- bra.w 11870 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   117e4:	|  |   move.l 12(sp),d1
   117e8:	|  |   move.l 20(sp),d0
   117ec:	|  |   cmp.l d1,d0
   117ee:	|  |   seq d0
   117f0:	|  |   neg.b d0
   117f2:	|  |   move.b d0,d0
   117f4:	|  |   andi.l #255,d0
   117fa:	|  |   move.l d0,(sp)
			break;
   117fc:	+--|-- bra.s 11870 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   117fe:	|  |   move.l 12(sp),d1
   11802:	|  |   move.l 20(sp),d0
   11806:	|  |   cmp.l d1,d0
   11808:	|  |   seq d0
   1180a:	|  |   neg.b d0
   1180c:	|  |   move.b d0,d0
   1180e:	|  |   andi.l #255,d0
   11814:	|  |   move.l d0,(sp)
			break;
   11816:	+--|-- bra.s 11870 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   11818:	|  |   move.l 20(sp),d1
   1181c:	|  |   move.l 12(sp),d0
   11820:	|  |   move.l d1,-(sp)
   11822:	|  |   move.l d0,-(sp)
   11824:	|  |   jsr 1121c <strcmp>
   1182a:	|  |   addq.l #8,sp
   1182c:	|  |   tst.l d0
   1182e:	|  |   seq d0
   11830:	|  |   neg.b d0
   11832:	|  |   move.b d0,d0
   11834:	|  |   andi.l #255,d0
   1183a:	|  |   move.l d0,(sp)
			break;
   1183c:	+--|-- bra.s 11870 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   1183e:	|  |   move.l 12(sp),d1
   11842:	|  |   move.l 20(sp),d0
   11846:	|  |   cmp.l d1,d0
   11848:	|  |   seq d0
   1184a:	|  |   neg.b d0
   1184c:	|  |   move.b d0,d0
   1184e:	|  |   andi.l #255,d0
   11854:	|  |   move.l d0,(sp)
			break;
   11856:	+--|-- bra.s 11870 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   11858:	|  \-> move.l 12(sp),d1
   1185c:	|      move.l 20(sp),d0
   11860:	|      cmp.l d1,d0
   11862:	|      seq d0
   11864:	|      neg.b d0
   11866:	|      move.b d0,d0
   11868:	|      andi.l #255,d0
   1186e:	|      move.l d0,(sp)
		}
	}
	return re;
   11870:	\----> move.l (sp),d0
}
   11872:	       addq.l #4,sp
   11874:	       rts

00011876 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   11876:	             lea -16(sp),sp
   1187a:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   1187c:	             movea.l 28(sp),a0
   11880:	             moveq #6,d0
   11882:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   11884:	             moveq #12,d0
   11886:	             move.l d0,12(sp)
   1188a:	             clr.l 8(sp)
   1188e:	             move.l 190fa <SysBase>,d0
   11894:	             movea.l d0,a6
   11896:	             move.l 12(sp),d0
   1189a:	             move.l 8(sp),d1
   1189e:	             jsr -684(a6)
   118a2:	             move.l d0,4(sp)
   118a6:	             move.l 4(sp),d0
   118aa:	             movea.l 28(sp),a0
   118ae:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   118b2:	             movea.l 28(sp),a0
   118b6:	             move.l 4(a0),d0
   118ba:	         /-- bne.s 118c2 <copyStack+0x4c>
   118bc:	         |   clr.w d0
   118be:	/--------|-- bra.w 11944 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   118c2:	|        \-> movea.l 28(sp),a0
   118c6:	|            movea.l 4(a0),a0
   118ca:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   118cc:	|            movea.l 28(sp),a0
   118d0:	|            movea.l 4(a0),a0
   118d4:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   118d8:	|            movea.l 28(sp),a0
   118dc:	|            movea.l 4(a0),a0
   118e0:	|            moveq #1,d0
   118e2:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   118e6:	|            movea.l 24(sp),a0
   118ea:	|            movea.l 4(a0),a0
   118ee:	|            move.l (a0),16(sp)

	while (a) {
   118f2:	|     /----- bra.s 1193c <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   118f4:	|  /--|----> movea.l 28(sp),a0
   118f8:	|  |  |      move.l 4(a0),d0
   118fc:	|  |  |      move.l d0,d1
   118fe:	|  |  |      move.l 16(sp),d0
   11902:	|  |  |      move.l d1,-(sp)
   11904:	|  |  |      move.l d0,-(sp)
   11906:	|  |  |      jsr 115ac <addVarToStack>
   1190c:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   1190e:	|  |  |      movea.l 28(sp),a0
   11912:	|  |  |      movea.l 4(a0),a0
   11916:	|  |  |      move.l 4(a0),d0
   1191a:	|  |  |  /-- bne.s 11932 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   1191c:	|  |  |  |   movea.l 28(sp),a0
   11920:	|  |  |  |   movea.l 4(a0),a1
   11924:	|  |  |  |   movea.l 28(sp),a0
   11928:	|  |  |  |   movea.l 4(a0),a0
   1192c:	|  |  |  |   move.l (a1),d0
   1192e:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   11932:	|  |  |  \-> movea.l 16(sp),a0
   11936:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   1193c:	|  |  \----> tst.l 16(sp)
   11940:	|  \-------- bne.s 118f4 <copyStack+0x7e>
	}

	return TRUE;
   11942:	|            moveq #1,d0
}
   11944:	\----------> movea.l (sp)+,a6
   11946:	             lea 16(sp),sp
   1194a:	             rts

0001194c <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   1194c:	                lea -20(sp),sp
   11950:	                move.l a6,-(sp)
   11952:	                move.l 36(sp),d0
   11956:	                move.w d0,d0
   11958:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   1195c:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   11962:	                clr.l 16(sp)

    while (*huntVar) {
   11966:	   /----------- bra.s 119e4 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   11968:	/--|----------> movea.l 20(sp),a0
   1196c:	|  |            movea.l (a0),a0
   1196e:	|  |            movea.l 28(sp),a1
   11972:	|  |            move.l 4(a1),-(sp)
   11976:	|  |            move.l (a1),-(sp)
   11978:	|  |            move.l 4(a0),-(sp)
   1197c:	|  |            move.l (a0),-(sp)
   1197e:	|  |            jsr 1179a <compareVars>
   11984:	|  |            lea 16(sp),sp
   11988:	|  |            tst.l d0
   1198a:	|  |  /-------- beq.s 119d6 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   1198c:	|  |  |         movea.l 20(sp),a0
   11990:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   11994:	|  |  |         movea.l 12(sp),a0
   11998:	|  |  |         move.l 8(a0),d0
   1199c:	|  |  |         movea.l 20(sp),a0
   119a0:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   119a2:	|  |  |         move.l 12(sp),d0
   119a6:	|  |  |         move.l d0,-(sp)
   119a8:	|  |  |         jsr 11fbe <unlinkVar>
   119ae:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   119b0:	|  |  |         move.l 12(sp),8(sp)
   119b6:	|  |  |         move.l 190fa <SysBase>,d0
   119bc:	|  |  |         movea.l d0,a6
   119be:	|  |  |         movea.l 8(sp),a1
   119c2:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   119c6:	|  |  |         tst.w 6(sp)
   119ca:	|  |  |     /-- bne.s 119d0 <deleteVarFromStack+0x84>
   119cc:	|  |  |     |   moveq #1,d0
   119ce:	|  |  |  /--|-- bra.s 119f2 <deleteVarFromStack+0xa6>
            reply++;
   119d0:	|  |  |  |  \-> addq.l #1,16(sp)
   119d4:	|  +--|--|----- bra.s 119e4 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   119d6:	|  |  \--|----> movea.l 20(sp),a0
   119da:	|  |     |      move.l (a0),d0
   119dc:	|  |     |      move.l d0,d1
   119de:	|  |     |      addq.l #8,d1
   119e0:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   119e4:	|  \-----|----> movea.l 20(sp),a0
   119e8:	|        |      move.l (a0),d0
   119ea:	\--------|----- bne.w 11968 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   119ee:	         |      move.l 16(sp),d0
}
   119f2:	         \----> movea.l (sp)+,a6
   119f4:	                lea 20(sp),sp
   119f8:	                rts

000119fa <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   119fa:	       movea.l 4(sp),a0
   119fe:	       move.l 4(a0),d0
   11a02:	       cmp.l 8(sp),d0
   11a06:	   /-- bhi.s 11a0c <fastArrayGetByIndex+0x12>
   11a08:	   |   moveq #0,d0
   11a0a:	/--|-- bra.s 11a1a <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   11a0c:	|  \-> movea.l 4(sp),a0
   11a10:	|      move.l (a0),d1
   11a12:	|      move.l 8(sp),d0
   11a16:	|      lsl.l #3,d0
   11a18:	|      add.l d1,d0
}
   11a1a:	\----> rts

00011a1c <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   11a1c:	                lea -32(sp),sp
   11a20:	                move.l a6,-(sp)
   11a22:	                move.l a2,-(sp)
    struct persona *p = NULL;
   11a24:	                clr.l 36(sp)

    switch (thisVar->varType) {
   11a28:	                movea.l 44(sp),a0
   11a2c:	                move.l (a0),d0
   11a2e:	                moveq #8,d1
   11a30:	                cmp.l d0,d1
   11a32:	            /-- beq.s 11a40 <getCostumeFromVar+0x24>
   11a34:	            |   moveq #9,d1
   11a36:	            |   cmp.l d0,d1
   11a38:	   /--------|-- beq.w 11aee <getCostumeFromVar+0xd2>
   11a3c:	/--|--------|-- bra.w 11af8 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   11a40:	|  |        \-> moveq #8,d0
   11a42:	|  |            move.l d0,28(sp)
   11a46:	|  |            clr.l 24(sp)
   11a4a:	|  |            move.l 190fa <SysBase>,d0
   11a50:	|  |            movea.l d0,a6
   11a52:	|  |            move.l 28(sp),d0
   11a56:	|  |            move.l 24(sp),d1
   11a5a:	|  |            jsr -684(a6)
   11a5e:	|  |            move.l d0,20(sp)
   11a62:	|  |            move.l 20(sp),d0
   11a66:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   11a6a:	|  |        /-- bne.s 11a72 <getCostumeFromVar+0x56>
   11a6c:	|  |        |   moveq #0,d0
   11a6e:	|  |  /-----|-- bra.w 11b22 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   11a72:	|  |  |     \-> movea.l 36(sp),a0
   11a76:	|  |  |         moveq #1,d1
   11a78:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   11a7c:	|  |  |         moveq #12,d0
   11a7e:	|  |  |         move.l d0,16(sp)
   11a82:	|  |  |         clr.l 12(sp)
   11a86:	|  |  |         move.l 190fa <SysBase>,d0
   11a8c:	|  |  |         movea.l d0,a6
   11a8e:	|  |  |         move.l 16(sp),d0
   11a92:	|  |  |         move.l 12(sp),d1
   11a96:	|  |  |         jsr -684(a6)
   11a9a:	|  |  |         move.l d0,8(sp)
   11a9e:	|  |  |         move.l 8(sp),d0
   11aa2:	|  |  |         movea.l 36(sp),a0
   11aa6:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   11aa8:	|  |  |         movea.l 36(sp),a0
   11aac:	|  |  |         move.l (a0),d0
   11aae:	|  |  |     /-- bne.s 11ab4 <getCostumeFromVar+0x98>
   11ab0:	|  |  |     |   moveq #0,d0
   11ab2:	|  |  +-----|-- bra.s 11b22 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   11ab4:	|  |  |     \-> clr.l 32(sp)
   11ab8:	|  |  |     /-- bra.s 11ae4 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   11aba:	|  |  |  /--|-> movea.l 44(sp),a0
   11abe:	|  |  |  |  |   move.l 4(a0),d0
   11ac2:	|  |  |  |  |   movea.l 36(sp),a0
   11ac6:	|  |  |  |  |   movea.l (a0),a0
   11ac8:	|  |  |  |  |   move.l 32(sp),d1
   11acc:	|  |  |  |  |   add.l d1,d1
   11ace:	|  |  |  |  |   add.l d1,d1
   11ad0:	|  |  |  |  |   lea (0,a0,d1.l),a2
   11ad4:	|  |  |  |  |   move.l d0,-(sp)
   11ad6:	|  |  |  |  |   jsr 6e40 <copyAnim>
   11adc:	|  |  |  |  |   addq.l #4,sp
   11ade:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   11ae0:	|  |  |  |  |   addq.l #1,32(sp)
   11ae4:	|  |  |  |  \-> moveq #2,d1
   11ae6:	|  |  |  |      cmp.l 32(sp),d1
   11aea:	|  |  |  \----- bge.s 11aba <getCostumeFromVar+0x9e>
            }
            break;
   11aec:	|  |  |     /-- bra.s 11b1e <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   11aee:	|  \--|-----|-> movea.l 44(sp),a0
   11af2:	|     |     |   move.l 4(a0),d0
   11af6:	|     +-----|-- bra.s 11b22 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   11af8:	\-----|-----|-> movea.l 44(sp),a0
   11afc:	      |     |   move.l (a0),d0
   11afe:	      |     |   add.l d0,d0
   11b00:	      |     |   movea.l d0,a1
   11b02:	      |     |   adda.l d0,a1
   11b04:	      |     |   lea 18ff0 <typeName>,a0
   11b0a:	      |     |   move.l (0,a1,a0.l),d0
   11b0e:	      |     |   move.l d0,-(sp)
   11b10:	      |     |   pea 166b5 <custom.c.64ca0e9f+0x19df>
   11b16:	      |     |   jsr 13db8 <KPrintF>
   11b1c:	      |     |   addq.l #8,sp
    }

    return p;
   11b1e:	      |     \-> move.l 36(sp),d0
}
   11b22:	      \-------> movea.l (sp)+,a2
   11b24:	                movea.l (sp)+,a6
   11b26:	                lea 32(sp),sp
   11b2a:	                rts

00011b2c <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   11b2c:	                lea -96(sp),sp
   11b30:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   11b34:	                move.l 116(sp),-(sp)
   11b38:	                pea 166ed <custom.c.64ca0e9f+0x1a17>
   11b3e:	                jsr 1129c <joinStrings>
   11b44:	                addq.l #8,sp
   11b46:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   11b4a:	            /-- bne.s 11b52 <getSavedGamesStack+0x26>
   11b4c:	            |   clr.w d0
   11b4e:	/-----------|-- bra.w 11d66 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   11b52:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   11b56:	|               move.l #91887,98(sp)
   11b5e:	|               moveq #-2,d0
   11b60:	|               move.l d0,94(sp)
   11b64:	|               move.l 19102 <DOSBase>,d0
   11b6a:	|               movea.l d0,a6
   11b6c:	|               move.l 98(sp),d1
   11b70:	|               move.l 94(sp),d2
   11b74:	|               jsr -84(a6)
   11b78:	|               move.l d0,90(sp)
   11b7c:	|               move.l 90(sp),d0
   11b80:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   11b84:	|           /-- bne.s 11b8c <getSavedGamesStack+0x60>
   11b86:	|           |   clr.w d0
   11b88:	+-----------|-- bra.w 11d66 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   11b8c:	|           \-> move.l #260,82(sp)
   11b94:	|               move.l #65536,78(sp)
   11b9c:	|               move.l 190fa <SysBase>,d0
   11ba2:	|               movea.l d0,a6
   11ba4:	|               move.l 82(sp),d0
   11ba8:	|               move.l 78(sp),d1
   11bac:	|               jsr -684(a6)
   11bb0:	|               move.l d0,74(sp)
   11bb4:	|               move.l 74(sp),d0
   11bb8:	|               move.l d0,70(sp)
	if (!fib) {
   11bbc:	|           /-- bne.s 11bda <getSavedGamesStack+0xae>
		UnLock(dirLock);
   11bbe:	|           |   move.l 86(sp),22(sp)
   11bc4:	|           |   move.l 19102 <DOSBase>,d0
   11bca:	|           |   movea.l d0,a6
   11bcc:	|           |   move.l 22(sp),d1
   11bd0:	|           |   jsr -90(a6)
		return FALSE;
   11bd4:	|           |   clr.w d0
   11bd6:	+-----------|-- bra.w 11d66 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   11bda:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   11bde:	|               move.l 86(sp),66(sp)
   11be4:	|               move.l 70(sp),62(sp)
   11bea:	|               move.l 19102 <DOSBase>,d0
   11bf0:	|               movea.l d0,a6
   11bf2:	|               move.l 66(sp),d1
   11bf6:	|               move.l 62(sp),d2
   11bfa:	|               jsr -102(a6)
   11bfe:	|               move.l d0,58(sp)
   11c02:	|               move.l 58(sp),d0
   11c06:	|  /----------- beq.w 11d1a <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   11c0a:	|  |        /-- bra.w 11ce6 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   11c0e:	|  |  /-----|-> move.l 70(sp),d2
   11c12:	|  |  |     |   addq.l #8,d2
   11c14:	|  |  |     |   move.l 70(sp),d0
   11c18:	|  |  |     |   addq.l #8,d0
   11c1a:	|  |  |     |   move.l d0,-(sp)
   11c1c:	|  |  |     |   jsr 1125c <strlen>
   11c22:	|  |  |     |   addq.l #4,sp
   11c24:	|  |  |     |   move.l d0,d3
   11c26:	|  |  |     |   move.l 116(sp),-(sp)
   11c2a:	|  |  |     |   jsr 1125c <strlen>
   11c30:	|  |  |     |   addq.l #4,sp
   11c32:	|  |  |     |   move.l d3,d1
   11c34:	|  |  |     |   sub.l d0,d1
   11c36:	|  |  |     |   move.l d2,d0
   11c38:	|  |  |     |   add.l d1,d0
   11c3a:	|  |  |     |   move.l 116(sp),-(sp)
   11c3e:	|  |  |     |   move.l d0,-(sp)
   11c40:	|  |  |     |   jsr 1121c <strcmp>
   11c46:	|  |  |     |   addq.l #8,sp
   11c48:	|  |  |     |   tst.l d0
   11c4a:	|  |  |     +-- bne.w 11ce6 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   11c4e:	|  |  |     |   move.l 70(sp),d0
   11c52:	|  |  |     |   addq.l #8,d0
   11c54:	|  |  |     |   move.l d0,-(sp)
   11c56:	|  |  |     |   jsr 1125c <strlen>
   11c5c:	|  |  |     |   addq.l #4,sp
   11c5e:	|  |  |     |   move.l d0,d2
   11c60:	|  |  |     |   move.l 116(sp),-(sp)
   11c64:	|  |  |     |   jsr 1125c <strlen>
   11c6a:	|  |  |     |   addq.l #4,sp
   11c6c:	|  |  |     |   move.l d0,d1
   11c6e:	|  |  |     |   move.l d2,d0
   11c70:	|  |  |     |   sub.l d1,d0
   11c72:	|  |  |     |   movea.l 70(sp),a0
   11c76:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   11c7a:	|  |  |     |   move.l 70(sp),d0
   11c7e:	|  |  |     |   addq.l #8,d0
   11c80:	|  |  |     |   move.l d0,-(sp)
   11c82:	|  |  |     |   jsr 118 <decodeFilename>
   11c88:	|  |  |     |   addq.l #4,sp
   11c8a:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   11c8e:	|  |  |     |   move.l 42(sp),-(sp)
   11c92:	|  |  |     |   lea 18(sp),a0
   11c96:	|  |  |     |   move.l a0,-(sp)
   11c98:	|  |  |     |   jsr 11f92 <makeTextVar>
   11c9e:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   11ca0:	|  |  |     |   move.l 42(sp),38(sp)
   11ca6:	|  |  |     |   move.l 190fa <SysBase>,d0
   11cac:	|  |  |     |   movea.l d0,a6
   11cae:	|  |  |     |   movea.l 38(sp),a1
   11cb2:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   11cb6:	|  |  |     |   move.l 112(sp),d0
   11cba:	|  |  |     |   move.l d0,-(sp)
   11cbc:	|  |  |     |   lea 18(sp),a0
   11cc0:	|  |  |     |   move.l a0,-(sp)
   11cc2:	|  |  |     |   jsr 115ac <addVarToStack>
   11cc8:	|  |  |     |   addq.l #8,sp
   11cca:	|  |  |     |   tst.w d0
   11ccc:	|  |  |  /--|-- beq.s 11d1e <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   11cce:	|  |  |  |  |   movea.l 112(sp),a0
   11cd2:	|  |  |  |  |   move.l 4(a0),d0
   11cd6:	|  |  |  |  +-- bne.s 11ce6 <getSavedGamesStack+0x1ba>
   11cd8:	|  |  |  |  |   movea.l 112(sp),a0
   11cdc:	|  |  |  |  |   move.l (a0),d0
   11cde:	|  |  |  |  |   movea.l 112(sp),a0
   11ce2:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   11ce6:	|  |  |  |  \-> move.l 86(sp),54(sp)
   11cec:	|  |  |  |      move.l 70(sp),50(sp)
   11cf2:	|  |  |  |      move.l 19102 <DOSBase>,d0
   11cf8:	|  |  |  |      movea.l d0,a6
   11cfa:	|  |  |  |      move.l 54(sp),d1
   11cfe:	|  |  |  |      move.l 50(sp),d2
   11d02:	|  |  |  |      jsr -108(a6)
   11d06:	|  |  |  |      move.l d0,46(sp)
   11d0a:	|  |  |  |      move.l 46(sp),d0
   11d0e:	|  |  \--|----- bne.w 11c0e <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   11d12:	|  |     |      move.w #1,106(sp)
   11d18:	|  |     |  /-- bra.s 11d20 <getSavedGamesStack+0x1f4>
	}

cleanup:
   11d1a:	|  \-----|--|-> nop
   11d1c:	|        |  +-- bra.s 11d20 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   11d1e:	|        \--|-> nop
	FreeVec(fib);
   11d20:	|           \-> move.l 70(sp),34(sp)
   11d26:	|               move.l 190fa <SysBase>,d0
   11d2c:	|               movea.l d0,a6
   11d2e:	|               movea.l 34(sp),a1
   11d32:	|               jsr -690(a6)
	UnLock(dirLock);
   11d36:	|               move.l 86(sp),30(sp)
   11d3c:	|               move.l 19102 <DOSBase>,d0
   11d42:	|               movea.l d0,a6
   11d44:	|               move.l 30(sp),d1
   11d48:	|               jsr -90(a6)
	FreeVec(pattern);
   11d4c:	|               move.l 102(sp),26(sp)
   11d52:	|               move.l 190fa <SysBase>,d0
   11d58:	|               movea.l d0,a6
   11d5a:	|               movea.l 26(sp),a1
   11d5e:	|               jsr -690(a6)
	return result;
   11d62:	|               move.w 106(sp),d0
}
   11d66:	\-------------> movem.l (sp)+,d2-d3/a6
   11d6a:	                lea 96(sp),sp
   11d6e:	                rts

00011d70 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   11d70:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   11d72:	       movea.l 20(sp),a0
   11d76:	       move.l (a0),d0
   11d78:	       cmp.l 16(sp),d0
   11d7c:	/----- beq.s 11de0 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   11d7e:	|      move.l 16(sp),d0
   11d82:	|      add.l d0,d0
   11d84:	|      movea.l d0,a1
   11d86:	|      adda.l d0,a1
   11d88:	|      lea 18ff0 <typeName>,a0
   11d8e:	|      move.l (0,a1,a0.l),d0
   11d92:	|      move.l d0,-(sp)
   11d94:	|      pea 166f1 <custom.c.64ca0e9f+0x1a1b>
   11d9a:	|      jsr 1129c <joinStrings>
   11da0:	|      addq.l #8,sp
   11da2:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   11da6:	|      movea.l 20(sp),a0
   11daa:	|      move.l (a0),d0
   11dac:	|      add.l d0,d0
   11dae:	|      movea.l d0,a1
   11db0:	|      adda.l d0,a1
   11db2:	|      lea 18ff0 <typeName>,a0
   11db8:	|      move.l (0,a1,a0.l),d0
   11dbc:	|      move.l d0,-(sp)
   11dbe:	|      pea 16733 <custom.c.64ca0e9f+0x1a5d>
   11dc4:	|      jsr 1129c <joinStrings>
   11dca:	|      addq.l #8,sp
   11dcc:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   11dce:	|      move.l (sp),-(sp)
   11dd0:	|      move.l 8(sp),-(sp)
   11dd4:	|      jsr 13db8 <KPrintF>
   11dda:	|      addq.l #8,sp

		return FALSE;
   11ddc:	|      clr.w d0
   11dde:	|  /-- bra.s 11df0 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   11de0:	\--|-> movea.l 20(sp),a0
   11de4:	   |   move.l 4(a0),d0
   11de8:	   |   movea.l 12(sp),a0
   11dec:	   |   move.l d0,(a0)
	return TRUE;
   11dee:	   |   moveq #1,d0
}
   11df0:	   \-> addq.l #8,sp
   11df2:	       rts

00011df4 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   11df4:	move.l 8(sp),-(sp)
   11df8:	jsr 477c <getNumberedString>
   11dfe:	addq.l #4,sp
   11e00:	move.l d0,-(sp)
   11e02:	move.l 8(sp),-(sp)
   11e06:	jsr 11f92 <makeTextVar>
   11e0c:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   11e0e:	movea.l 4(sp),a0
   11e12:	move.l 4(a0),d0
   11e16:	sne d0
   11e18:	neg.b d0
   11e1a:	move.b d0,d0
   11e1c:	andi.w #255,d0
}
   11e20:	rts

00011e22 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   11e22:	          subq.l #8,sp
    int size = stackSize(stacky);
   11e24:	          move.l 16(sp),-(sp)
   11e28:	          jsr 126d0 <stackSize>
   11e2e:	          addq.l #4,sp
   11e30:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   11e34:	          move.l 4(sp),-(sp)
   11e38:	          move.l 16(sp),-(sp)
   11e3c:	          jsr 11e8c <makeFastArraySize>
   11e42:	          addq.l #8,sp
   11e44:	          tst.w d0
   11e46:	      /-- bne.s 11e4c <makeFastArrayFromStack+0x2a>
   11e48:	      |   clr.w d0
   11e4a:	/-----|-- bra.s 11e88 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   11e4c:	|     \-> movea.l 16(sp),a0
   11e50:	|         move.l (a0),(sp)
    size = 0;
   11e52:	|         clr.l 4(sp)
    while (allV) {
   11e56:	|     /-- bra.s 11e82 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   11e58:	|  /--|-> movea.l 12(sp),a0
   11e5c:	|  |  |   movea.l 4(a0),a0
   11e60:	|  |  |   move.l (a0),d1
   11e62:	|  |  |   move.l 4(sp),d0
   11e66:	|  |  |   lsl.l #3,d0
   11e68:	|  |  |   add.l d0,d1
   11e6a:	|  |  |   move.l (sp),d0
   11e6c:	|  |  |   move.l d1,-(sp)
   11e6e:	|  |  |   move.l d0,-(sp)
   11e70:	|  |  |   jsr 1210e <copyMain>
   11e76:	|  |  |   addq.l #8,sp
        size++;
   11e78:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   11e7c:	|  |  |   movea.l (sp),a0
   11e7e:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   11e82:	|  |  \-> tst.l (sp)
   11e84:	|  \----- bne.s 11e58 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   11e86:	|         moveq #1,d0
}
   11e88:	\-------> addq.l #8,sp
   11e8a:	          rts

00011e8c <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   11e8c:	          lea -28(sp),sp
   11e90:	          move.l a6,-(sp)
    if (size < 0) {
   11e92:	          tst.l 40(sp)
   11e96:	      /-- bge.s 11eac <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   11e98:	      |   pea 16778 <custom.c.64ca0e9f+0x1aa2>
   11e9e:	      |   jsr 13db8 <KPrintF>
   11ea4:	      |   addq.l #4,sp
		return FALSE;
   11ea6:	      |   clr.w d0
   11ea8:	/-----|-- bra.w 11f8a <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   11eac:	|     \-> move.l 36(sp),-(sp)
   11eb0:	|         jsr 11fbe <unlinkVar>
   11eb6:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   11eb8:	|         movea.l 36(sp),a0
   11ebc:	|         moveq #10,d0
   11ebe:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   11ec0:	|         moveq #12,d0
   11ec2:	|         move.l d0,24(sp)
   11ec6:	|         clr.l 20(sp)
   11eca:	|         move.l 190fa <SysBase>,d0
   11ed0:	|         movea.l d0,a6
   11ed2:	|         move.l 24(sp),d0
   11ed6:	|         move.l 20(sp),d1
   11eda:	|         jsr -684(a6)
   11ede:	|         move.l d0,16(sp)
   11ee2:	|         move.l 16(sp),d0
   11ee6:	|         movea.l 36(sp),a0
   11eea:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   11eee:	|         movea.l 36(sp),a0
   11ef2:	|         move.l 4(a0),d0
   11ef6:	|     /-- bne.s 11efe <makeFastArraySize+0x72>
   11ef8:	|     |   clr.w d0
   11efa:	+-----|-- bra.w 11f8a <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   11efe:	|     \-> move.l 40(sp),d0
   11f02:	|         lsl.l #3,d0
   11f04:	|         move.l d0,12(sp)
   11f08:	|         clr.l 8(sp)
   11f0c:	|         move.l 190fa <SysBase>,d0
   11f12:	|         movea.l d0,a6
   11f14:	|         move.l 12(sp),d0
   11f18:	|         move.l 8(sp),d1
   11f1c:	|         jsr -684(a6)
   11f20:	|         move.l d0,4(sp)
   11f24:	|         move.l 4(sp),d0
   11f28:	|         movea.l 36(sp),a0
   11f2c:	|         movea.l 4(a0),a0
   11f30:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   11f32:	|         movea.l 36(sp),a0
   11f36:	|         movea.l 4(a0),a0
   11f3a:	|         move.l (a0),d0
   11f3c:	|     /-- bne.s 11f42 <makeFastArraySize+0xb6>
   11f3e:	|     |   clr.w d0
   11f40:	+-----|-- bra.s 11f8a <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   11f42:	|     \-> clr.l 28(sp)
   11f46:	|     /-- bra.s 11f62 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   11f48:	|  /--|-> movea.l 36(sp),a0
   11f4c:	|  |  |   movea.l 4(a0),a0
   11f50:	|  |  |   move.l (a0),d1
   11f52:	|  |  |   move.l 28(sp),d0
   11f56:	|  |  |   lsl.l #3,d0
   11f58:	|  |  |   movea.l d1,a0
   11f5a:	|  |  |   adda.l d0,a0
   11f5c:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   11f5e:	|  |  |   addq.l #1,28(sp)
   11f62:	|  |  \-> move.l 28(sp),d0
   11f66:	|  |      cmp.l 40(sp),d0
   11f6a:	|  \----- blt.s 11f48 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   11f6c:	|         movea.l 36(sp),a0
   11f70:	|         movea.l 4(a0),a0
   11f74:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   11f7a:	|         movea.l 36(sp),a0
   11f7e:	|         movea.l 4(a0),a0
   11f82:	|         moveq #1,d0
   11f84:	|         move.l d0,8(a0)
    return TRUE;
   11f88:	|         moveq #1,d0
}
   11f8a:	\-------> movea.l (sp)+,a6
   11f8c:	          lea 28(sp),sp
   11f90:	          rts

00011f92 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   11f92:	move.l 4(sp),-(sp)
   11f96:	jsr 11fbe <unlinkVar>
   11f9c:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   11f9e:	movea.l 4(sp),a0
   11fa2:	moveq #3,d0
   11fa4:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   11fa6:	move.l 8(sp),-(sp)
   11faa:	jsr b8 <copyString>
   11fb0:	addq.l #4,sp
   11fb2:	movea.l 4(sp),a0
   11fb6:	move.l d0,4(a0)
}
   11fba:	nop
   11fbc:	rts

00011fbe <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   11fbe:	                      lea -16(sp),sp
   11fc2:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   11fc4:	                      movea.l 24(sp),a0
   11fc8:	                      move.l (a0),d0
   11fca:	                      moveq #10,d1
   11fcc:	                      cmp.l d0,d1
   11fce:	            /-------- beq.w 12086 <unlinkVar+0xc8>
   11fd2:	            |         moveq #10,d1
   11fd4:	            |         cmp.l d0,d1
   11fd6:	/-----------|-------- bcs.w 120fa <unlinkVar+0x13c>
   11fda:	|           |         moveq #8,d1
   11fdc:	|           |         cmp.l d0,d1
   11fde:	|  /--------|-------- beq.w 120e6 <unlinkVar+0x128>
   11fe2:	|  |        |         moveq #8,d1
   11fe4:	|  |        |         cmp.l d0,d1
   11fe6:	+--|--------|-------- bcs.w 120fa <unlinkVar+0x13c>
   11fea:	|  |        |         moveq #3,d1
   11fec:	|  |        |         cmp.l d0,d1
   11fee:	|  |        |     /-- beq.s 11ffa <unlinkVar+0x3c>
   11ff0:	|  |        |     |   moveq #6,d1
   11ff2:	|  |        |     |   cmp.l d0,d1
   11ff4:	|  |        |  /--|-- beq.s 12020 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   11ff6:	+--|--------|--|--|-- bra.w 120fa <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   11ffa:	|  |        |  |  \-> movea.l 24(sp),a0
   11ffe:	|  |        |  |      move.l 4(a0),4(sp)
   12004:	|  |        |  |      move.l 190fa <SysBase>,d0
   1200a:	|  |        |  |      movea.l d0,a6
   1200c:	|  |        |  |      movea.l 4(sp),a1
   12010:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   12014:	|  |        |  |      movea.l 24(sp),a0
   12018:	|  |        |  |      clr.l 4(a0)
		break;
   1201c:	|  |  /-----|--|----- bra.w 12104 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   12020:	|  |  |     |  \----> movea.l 24(sp),a0
   12024:	|  |  |     |         movea.l 4(a0),a0
   12028:	|  |  |     |         move.l 8(a0),d0
   1202c:	|  |  |     |         subq.l #1,d0
   1202e:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   12032:	|  |  |     |         movea.l 24(sp),a0
   12036:	|  |  |     |         movea.l 4(a0),a0
   1203a:	|  |  |     |         move.l 8(a0),d0
   1203e:	|  |  |  /--|-------- bgt.w 120fe <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   12042:	|  |  |  |  |     /-- bra.s 12056 <unlinkVar+0x98>
   12044:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   12048:	|  |  |  |  |  |  |   move.l 4(a0),d0
   1204c:	|  |  |  |  |  |  |   move.l d0,-(sp)
   1204e:	|  |  |  |  |  |  |   jsr 126f4 <trimStack>
   12054:	|  |  |  |  |  |  |   addq.l #4,sp
   12056:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   1205a:	|  |  |  |  |  |      movea.l 4(a0),a0
   1205e:	|  |  |  |  |  |      move.l (a0),d0
   12060:	|  |  |  |  |  \----- bne.s 12044 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   12062:	|  |  |  |  |         movea.l 24(sp),a0
   12066:	|  |  |  |  |         move.l 4(a0),8(sp)
   1206c:	|  |  |  |  |         move.l 190fa <SysBase>,d0
   12072:	|  |  |  |  |         movea.l d0,a6
   12074:	|  |  |  |  |         movea.l 8(sp),a1
   12078:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   1207c:	|  |  |  |  |         movea.l 24(sp),a0
   12080:	|  |  |  |  |         clr.l 4(a0)
		break;
   12084:	|  |  |  +--|-------- bra.s 120fe <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   12086:	|  |  |  |  \-------> movea.l 24(sp),a0
   1208a:	|  |  |  |            movea.l 4(a0),a0
   1208e:	|  |  |  |            move.l 8(a0),d0
   12092:	|  |  |  |            subq.l #1,d0
   12094:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   12098:	|  |  |  |            movea.l 24(sp),a0
   1209c:	|  |  |  |            movea.l 4(a0),a0
   120a0:	|  |  |  |            move.l 8(a0),d0
   120a4:	|  |  |  |        /-- bgt.s 12102 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   120a6:	|  |  |  |        |   movea.l 24(sp),a0
   120aa:	|  |  |  |        |   movea.l 4(a0),a0
   120ae:	|  |  |  |        |   move.l (a0),16(sp)
   120b2:	|  |  |  |        |   move.l 190fa <SysBase>,d0
   120b8:	|  |  |  |        |   movea.l d0,a6
   120ba:	|  |  |  |        |   movea.l 16(sp),a1
   120be:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   120c2:	|  |  |  |        |   movea.l 24(sp),a0
   120c6:	|  |  |  |        |   move.l 4(a0),12(sp)
   120cc:	|  |  |  |        |   move.l 190fa <SysBase>,d0
   120d2:	|  |  |  |        |   movea.l d0,a6
   120d4:	|  |  |  |        |   movea.l 12(sp),a1
   120d8:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   120dc:	|  |  |  |        |   movea.l 24(sp),a0
   120e0:	|  |  |  |        |   clr.l 4(a0)
		break;
   120e4:	|  |  |  |        +-- bra.s 12102 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   120e6:	|  \--|--|--------|-> movea.l 24(sp),a0
   120ea:	|     |  |        |   move.l 4(a0),d0
   120ee:	|     |  |        |   move.l d0,-(sp)
   120f0:	|     |  |        |   jsr 71fc <deleteAnim>
   120f6:	|     |  |        |   addq.l #4,sp
		break;
   120f8:	|     +--|--------|-- bra.s 12104 <unlinkVar+0x146>
		break;
   120fa:	\-----|--|--------|-> nop
   120fc:	      +--|--------|-- bra.s 12104 <unlinkVar+0x146>
		break;
   120fe:	      |  \--------|-> nop
   12100:	      +-----------|-- bra.s 12104 <unlinkVar+0x146>
		break;
   12102:	      |           \-> nop
	}
}
   12104:	      \-------------> nop
   12106:	                      movea.l (sp)+,a6
   12108:	                      lea 16(sp),sp
   1210c:	                      rts

0001210e <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   1210e:	       movea.l 4(sp),a0
   12112:	       move.l (a0),d0
   12114:	       movea.l 8(sp),a0
   12118:	       move.l d0,(a0)
	switch (to->varType) {
   1211a:	       movea.l 8(sp),a0
   1211e:	       move.l (a0),d0
   12120:	       moveq #10,d1
   12122:	       cmp.l d0,d1
   12124:	/----- bcs.w 12216 <copyMain+0x108>
   12128:	|      add.l d0,d0
   1212a:	|      movea.l d0,a0
   1212c:	|      adda.l #74040,a0
   12132:	|      move.w (a0),d0
   12134:	|      jmp (12138 <copyMain+0x2a>,pc,d0.w)
   12138:	|      .short 0x00da
   1213a:	|      ori.b #22,(a6)
   1213e:	|      ori.w #22,(a4)
   12142:	|      ori.b #-126,(a6)
   12146:	|      ori.b #-68,(a6)
   1214a:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   12152:	|      move.l 4(a0),d0
   12156:	|      movea.l 8(sp),a0
   1215a:	|      move.l d0,4(a0)
		return TRUE;
   1215e:	|      moveq #1,d0
   12160:	|  /-- bra.w 12228 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   12164:	|  |   movea.l 4(sp),a0
   12168:	|  |   move.l 4(a0),d0
   1216c:	|  |   movea.l 8(sp),a0
   12170:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   12174:	|  |   movea.l 8(sp),a0
   12178:	|  |   movea.l 4(a0),a0
   1217c:	|  |   move.l 8(a0),d0
   12180:	|  |   addq.l #1,d0
   12182:	|  |   move.l d0,8(a0)
		return TRUE;
   12186:	|  |   moveq #1,d0
   12188:	|  +-- bra.w 12228 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   1218c:	|  |   movea.l 4(sp),a0
   12190:	|  |   move.l 4(a0),d0
   12194:	|  |   move.l d0,-(sp)
   12196:	|  |   jsr b8 <copyString>
   1219c:	|  |   addq.l #4,sp
   1219e:	|  |   movea.l 8(sp),a0
   121a2:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   121a6:	|  |   movea.l 8(sp),a0
   121aa:	|  |   move.l 4(a0),d0
   121ae:	|  |   sne d0
   121b0:	|  |   neg.b d0
   121b2:	|  |   move.b d0,d0
   121b4:	|  |   andi.w #255,d0
   121b8:	|  +-- bra.s 12228 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   121ba:	|  |   movea.l 4(sp),a0
   121be:	|  |   move.l 4(a0),d0
   121c2:	|  |   movea.l 8(sp),a0
   121c6:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   121ca:	|  |   movea.l 8(sp),a0
   121ce:	|  |   movea.l 4(a0),a0
   121d2:	|  |   move.l 8(a0),d0
   121d6:	|  |   addq.l #1,d0
   121d8:	|  |   move.l d0,8(a0)
		return TRUE;
   121dc:	|  |   moveq #1,d0
   121de:	|  +-- bra.s 12228 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   121e0:	|  |   movea.l 4(sp),a0
   121e4:	|  |   move.l 4(a0),d0
   121e8:	|  |   movea.l 8(sp),a0
   121ec:	|  |   move.l d0,4(a0)
		return TRUE;
   121f0:	|  |   moveq #1,d0
   121f2:	|  +-- bra.s 12228 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   121f4:	|  |   movea.l 4(sp),a0
   121f8:	|  |   move.l 4(a0),d0
   121fc:	|  |   move.l d0,-(sp)
   121fe:	|  |   jsr 6e40 <copyAnim>
   12204:	|  |   addq.l #4,sp
   12206:	|  |   movea.l 8(sp),a0
   1220a:	|  |   move.l d0,4(a0)
		return TRUE;
   1220e:	|  |   moveq #1,d0
   12210:	|  +-- bra.s 12228 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   12212:	|  |   moveq #1,d0
   12214:	|  +-- bra.s 12228 <copyMain+0x11a>

		default:
		break;
   12216:	\--|-> nop
	}
	KPrintF("Unknown value type");
   12218:	   |   pea 167c9 <custom.c.64ca0e9f+0x1af3>
   1221e:	   |   jsr 13db8 <KPrintF>
   12224:	   |   addq.l #4,sp
	return FALSE;
   12226:	   |   clr.w d0
}
   12228:	   \-> rts

0001222a <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   1222a:	move.l 8(sp),-(sp)
   1222e:	jsr 11fbe <unlinkVar>
   12234:	addq.l #4,sp
	return copyMain(from, to);
   12236:	move.l 8(sp),-(sp)
   1223a:	move.l 8(sp),-(sp)
   1223e:	jsr 1210e <copyMain>
   12244:	addq.l #8,sp
}
   12246:	rts

00012248 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   12248:	       movea.l 4(sp),a0
   1224c:	       move.l (a0),d0
   1224e:	       moveq #8,d1
   12250:	       cmp.l d0,d1
   12252:	   /-- bne.s 12268 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   12254:	   |   movea.l 4(sp),a0
   12258:	   |   move.l 4(a0),d0
   1225c:	   |   move.l d0,-(sp)
   1225e:	   |   jsr 6e40 <copyAnim>
   12264:	   |   addq.l #4,sp
   12266:	/--|-- bra.s 122ae <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   12268:	|  \-> movea.l 4(sp),a0
   1226c:	|      move.l (a0),d0
   1226e:	|      moveq #1,d1
   12270:	|      cmp.l d0,d1
   12272:	|  /-- bne.s 12286 <getAnimationFromVar+0x3e>
   12274:	|  |   movea.l 4(sp),a0
   12278:	|  |   move.l 4(a0),d0
   1227c:	|  +-- bne.s 12286 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   1227e:	|  |   jsr 853c <makeNullAnim>
   12284:	+--|-- bra.s 122ae <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   12286:	|  \-> movea.l 4(sp),a0
   1228a:	|      move.l (a0),d0
   1228c:	|      add.l d0,d0
   1228e:	|      movea.l d0,a1
   12290:	|      adda.l d0,a1
   12292:	|      lea 18ff0 <typeName>,a0
   12298:	|      move.l (0,a1,a0.l),d0
   1229c:	|      move.l d0,-(sp)
   1229e:	|      pea 166b5 <custom.c.64ca0e9f+0x19df>
   122a4:	|      jsr 13db8 <KPrintF>
   122aa:	|      addq.l #8,sp
	return NULL;
   122ac:	|      moveq #0,d0
}
   122ae:	\----> rts

000122b0 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   122b0:	       movea.l 4(sp),a0
   122b4:	       move.l (a0),d0
   122b6:	       moveq #10,d1
   122b8:	       cmp.l d0,d1
   122ba:	/----- bcs.w 12340 <getBoolean+0x90>
   122be:	|      add.l d0,d0
   122c0:	|      movea.l d0,a0
   122c2:	|      adda.l #74446,a0
   122c8:	|      move.w (a0),d0
   122ca:	|      jmp (122ce <getBoolean+0x1e>,pc,d0.w)
   122ce:	|      ori.b #26,(a6)
   122d2:	|      ori.w #68,(114,a2,d0.w)
   122d8:	|      ori.w #46,(114,a2,d0.w)
   122de:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   122e4:	|      clr.w d0
   122e6:	|  /-- bra.s 12344 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   122e8:	|  |   movea.l 4(sp),a0
   122ec:	|  |   move.l 4(a0),d0
   122f0:	|  |   sne d0
   122f2:	|  |   neg.b d0
   122f4:	|  |   move.b d0,d0
   122f6:	|  |   andi.w #255,d0
   122fa:	|  +-- bra.s 12344 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   122fc:	|  |   movea.l 4(sp),a0
   12300:	|  |   movea.l 4(a0),a0
   12304:	|  |   move.l (a0),d0
   12306:	|  |   sne d0
   12308:	|  |   neg.b d0
   1230a:	|  |   move.b d0,d0
   1230c:	|  |   andi.w #255,d0
   12310:	|  +-- bra.s 12344 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   12312:	|  |   movea.l 4(sp),a0
   12316:	|  |   movea.l 4(a0),a0
   1231a:	|  |   move.b (a0),d0
   1231c:	|  |   sne d0
   1231e:	|  |   neg.b d0
   12320:	|  |   move.b d0,d0
   12322:	|  |   andi.w #255,d0
   12326:	|  +-- bra.s 12344 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   12328:	|  |   movea.l 4(sp),a0
   1232c:	|  |   movea.l 4(a0),a0
   12330:	|  |   move.l 4(a0),d0
   12334:	|  |   sne d0
   12336:	|  |   neg.b d0
   12338:	|  |   move.b d0,d0
   1233a:	|  |   andi.w #255,d0
   1233e:	|  +-- bra.s 12344 <getBoolean+0x94>

		default:
		break;
   12340:	\--|-> nop
	}
	return TRUE;
   12342:	   |   moveq #1,d0
}
   12344:	   \-> rts

00012346 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   12346:	      /----------> lea -76(sp),sp
   1234a:	      |            move.l a6,-(sp)
	switch (from->varType) {
   1234c:	      |            movea.l 84(sp),a0
   12350:	      |            move.l (a0),d0
   12352:	      |            moveq #10,d1
   12354:	      |            cmp.l d0,d1
   12356:	/-----|----------- bcs.w 125f4 <getTextFromAnyVar+0x2ae>
   1235a:	|     |            add.l d0,d0
   1235c:	|     |            movea.l d0,a0
   1235e:	|     |            adda.l #74602,a0
   12364:	|     |            move.w (a0),d0
   12366:	|     |            jmp (1236a <getTextFromAnyVar+0x24>,pc,d0.w)
   1236a:	|     |            .short 0x028a
   1236c:	|     |            bset d0,(a0)+
   1236e:	|     |            .short 0x028a
   12370:	|     |            ori.b #-118,(a6)
   12374:	|     |            andi.b #8,ccr
   12378:	|     |            andi.w #650,-(a0)
   1237c:	|     |            .short 0x028a
   1237e:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   12384:	|     |            move.l 4(a0),d0
   12388:	|     |            move.l d0,-(sp)
   1238a:	|     |            jsr b8 <copyString>
   12390:	|     |            addq.l #4,sp
   12392:	|  /--|----------- bra.w 12616 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   12396:	|  |  |            pea 167dc <custom.c.64ca0e9f+0x1b06>
   1239c:	|  |  |            jsr b8 <copyString>
   123a2:	|  |  |            addq.l #4,sp
   123a4:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   123a8:	|  |  |            clr.l 72(sp)
   123ac:	|  |  |     /----- bra.w 12456 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   123b0:	|  |  |  /--|----> pea 167e2 <custom.c.64ca0e9f+0x1b0c>
   123b6:	|  |  |  |  |      move.l 80(sp),-(sp)
   123ba:	|  |  |  |  |      jsr 1129c <joinStrings>
   123c0:	|  |  |  |  |      addq.l #8,sp
   123c2:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   123c6:	|  |  |  |  |  /-- bne.s 123ce <getTextFromAnyVar+0x88>
   123c8:	|  |  |  |  |  |   moveq #0,d0
   123ca:	|  +--|--|--|--|-- bra.w 12616 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   123ce:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   123d4:	|  |  |  |  |      move.l 190fa <SysBase>,d0
   123da:	|  |  |  |  |      movea.l d0,a6
   123dc:	|  |  |  |  |      movea.l 56(sp),a1
   123e0:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   123e4:	|  |  |  |  |      movea.l 84(sp),a0
   123e8:	|  |  |  |  |      movea.l 4(a0),a0
   123ec:	|  |  |  |  |      move.l (a0),d1
   123ee:	|  |  |  |  |      move.l 72(sp),d0
   123f2:	|  |  |  |  |      lsl.l #3,d0
   123f4:	|  |  |  |  |      add.l d1,d0
   123f6:	|  |  |  |  |      move.l d0,-(sp)
   123f8:	|  |  +--|--|----- jsr 12346 <getTextFromAnyVar>(pc)
   123fc:	|  |  |  |  |      addq.l #4,sp
   123fe:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   12402:	|  |  |  |  |      move.l 52(sp),-(sp)
   12406:	|  |  |  |  |      move.l 64(sp),-(sp)
   1240a:	|  |  |  |  |      jsr 1129c <joinStrings>
   12410:	|  |  |  |  |      addq.l #8,sp
   12412:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   12416:	|  |  |  |  |  /-- bne.s 1241e <getTextFromAnyVar+0xd8>
   12418:	|  |  |  |  |  |   moveq #0,d0
   1241a:	|  +--|--|--|--|-- bra.w 12616 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1241e:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   12424:	|  |  |  |  |      move.l 190fa <SysBase>,d0
   1242a:	|  |  |  |  |      movea.l d0,a6
   1242c:	|  |  |  |  |      movea.l 48(sp),a1
   12430:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   12434:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   12438:	|  |  |  |  |      move.l 60(sp),44(sp)
   1243e:	|  |  |  |  |      move.l 190fa <SysBase>,d0
   12444:	|  |  |  |  |      movea.l d0,a6
   12446:	|  |  |  |  |      movea.l 44(sp),a1
   1244a:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   1244e:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   12452:	|  |  |  |  |      addq.l #1,72(sp)
   12456:	|  |  |  |  \----> movea.l 84(sp),a0
   1245a:	|  |  |  |         movea.l 4(a0),a0
   1245e:	|  |  |  |         move.l 4(a0),d0
   12462:	|  |  |  |         cmp.l 72(sp),d0
   12466:	|  |  |  \-------- bgt.w 123b0 <getTextFromAnyVar+0x6a>
			}
			return builder;
   1246a:	|  |  |            move.l 76(sp),d0
   1246e:	|  +--|----------- bra.w 12616 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   12472:	|  |  |            pea 167e4 <custom.c.64ca0e9f+0x1b0e>
   12478:	|  |  |            jsr b8 <copyString>
   1247e:	|  |  |            addq.l #4,sp
   12480:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   12484:	|  |  |            movea.l 84(sp),a0
   12488:	|  |  |            movea.l 4(a0),a0
   1248c:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   12490:	|  |  |     /----- bra.w 12532 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   12494:	|  |  |  /--|----> pea 167e2 <custom.c.64ca0e9f+0x1b0c>
   1249a:	|  |  |  |  |      move.l 72(sp),-(sp)
   1249e:	|  |  |  |  |      jsr 1129c <joinStrings>
   124a4:	|  |  |  |  |      addq.l #8,sp
   124a6:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   124aa:	|  |  |  |  |  /-- bne.s 124b2 <getTextFromAnyVar+0x16c>
   124ac:	|  |  |  |  |  |   moveq #0,d0
   124ae:	|  +--|--|--|--|-- bra.w 12616 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   124b2:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   124b8:	|  |  |  |  |      move.l 190fa <SysBase>,d0
   124be:	|  |  |  |  |      movea.l d0,a6
   124c0:	|  |  |  |  |      movea.l 32(sp),a1
   124c4:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   124c8:	|  |  |  |  |      move.l 64(sp),d0
   124cc:	|  |  |  |  |      move.l d0,-(sp)
   124ce:	|  |  \--|--|----- jsr 12346 <getTextFromAnyVar>(pc)
   124d2:	|  |     |  |      addq.l #4,sp
   124d4:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   124d8:	|  |     |  |      move.l 28(sp),-(sp)
   124dc:	|  |     |  |      move.l 40(sp),-(sp)
   124e0:	|  |     |  |      jsr 1129c <joinStrings>
   124e6:	|  |     |  |      addq.l #8,sp
   124e8:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   124ec:	|  |     |  |  /-- bne.s 124f4 <getTextFromAnyVar+0x1ae>
   124ee:	|  |     |  |  |   moveq #0,d0
   124f0:	|  +-----|--|--|-- bra.w 12616 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   124f4:	|  |     |  |  \-> move.l 28(sp),24(sp)
   124fa:	|  |     |  |      move.l 190fa <SysBase>,d0
   12500:	|  |     |  |      movea.l d0,a6
   12502:	|  |     |  |      movea.l 24(sp),a1
   12506:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   1250a:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   1250e:	|  |     |  |      move.l 36(sp),20(sp)
   12514:	|  |     |  |      move.l 190fa <SysBase>,d0
   1251a:	|  |     |  |      movea.l d0,a6
   1251c:	|  |     |  |      movea.l 20(sp),a1
   12520:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   12524:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   12528:	|  |     |  |      movea.l 64(sp),a0
   1252c:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   12532:	|  |     |  \----> tst.l 64(sp)
   12536:	|  |     \-------- bne.w 12494 <getTextFromAnyVar+0x14e>
			}
			return builder;
   1253a:	|  |               move.l 68(sp),d0
   1253e:	|  +-------------- bra.w 12616 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   12542:	|  |               moveq #10,d0
   12544:	|  |               move.l d0,16(sp)
   12548:	|  |               clr.l 12(sp)
   1254c:	|  |               move.l 190fa <SysBase>,d0
   12552:	|  |               movea.l d0,a6
   12554:	|  |               move.l 16(sp),d0
   12558:	|  |               move.l 12(sp),d1
   1255c:	|  |               jsr -684(a6)
   12560:	|  |               move.l d0,8(sp)
   12564:	|  |               move.l 8(sp),d0
   12568:	|  |               move.l d0,4(sp)
			if (! buff) {
   1256c:	|  |           /-- bne.s 12582 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   1256e:	|  |           |   pea 167eb <custom.c.64ca0e9f+0x1b15>
   12574:	|  |           |   jsr 13db8 <KPrintF>
   1257a:	|  |           |   addq.l #4,sp
				return NULL;
   1257c:	|  |           |   moveq #0,d0
   1257e:	|  +-----------|-- bra.w 12616 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   12582:	|  |           \-> movea.l 84(sp),a0
   12586:	|  |               move.l 4(a0),d0
   1258a:	|  |               move.l d0,-(sp)
   1258c:	|  |               pea 16815 <custom.c.64ca0e9f+0x1b3f>
   12592:	|  |               move.l 12(sp),-(sp)
   12596:	|  |               jsr 1157a <sprintf>
   1259c:	|  |               lea 12(sp),sp
			return buff;
   125a0:	|  |               move.l 4(sp),d0
   125a4:	|  +-------------- bra.s 12616 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   125a6:	|  |               movea.l 84(sp),a0
   125aa:	|  |               move.l 4(a0),d0
   125ae:	|  |               move.l d0,-(sp)
   125b0:	|  |               jsr 1ed4 <resourceNameFromNum>
   125b6:	|  |               addq.l #4,sp
   125b8:	|  |               move.l d0,-(sp)
   125ba:	|  |               pea 15186 <custom.c.64ca0e9f+0x4b0>
   125c0:	|  |               jsr 1129c <joinStrings>
   125c6:	|  |               addq.l #8,sp
   125c8:	|  +-------------- bra.s 12616 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   125ca:	|  |               movea.l 84(sp),a0
   125ce:	|  |               move.l 4(a0),d0
   125d2:	|  |               move.l d0,-(sp)
   125d4:	|  |               jsr aba6 <findObjectType>
   125da:	|  |               addq.l #4,sp
   125dc:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   125e0:	+--|-------------- beq.s 125f4 <getTextFromAnyVar+0x2ae>
   125e2:	|  |               movea.l 40(sp),a0
   125e6:	|  |               move.l (a0),d0
   125e8:	|  |               move.l d0,-(sp)
   125ea:	|  |               jsr b8 <copyString>
   125f0:	|  |               addq.l #4,sp
   125f2:	|  +-------------- bra.s 12616 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   125f4:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   125f6:	   |               movea.l 84(sp),a0
   125fa:	   |               move.l (a0),d0
   125fc:	   |               add.l d0,d0
   125fe:	   |               movea.l d0,a1
   12600:	   |               adda.l d0,a1
   12602:	   |               lea 18ff0 <typeName>,a0
   12608:	   |               move.l (0,a1,a0.l),d0
   1260c:	   |               move.l d0,-(sp)
   1260e:	   |               jsr b8 <copyString>
   12614:	   |               addq.l #4,sp
}
   12616:	   \-------------> movea.l (sp)+,a6
   12618:	                   lea 76(sp),sp
   1261c:	                   rts

0001261e <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   1261e:	move.l 4(sp),-(sp)
   12622:	jsr 11fbe <unlinkVar>
   12628:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   1262a:	movea.l 4(sp),a0
   1262e:	moveq #8,d0
   12630:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   12632:	movea.l 4(sp),a0
   12636:	move.l 8(sp),4(a0)
}
   1263c:	nop
   1263e:	rts

00012640 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   12640:	move.l 4(sp),-(sp)
   12644:	jsr 11fbe <unlinkVar>
   1264a:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   1264c:	movea.l 4(sp),a0
   12650:	moveq #9,d0
   12652:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   12654:	movea.l 4(sp),a0
   12658:	move.l 8(sp),4(a0)
}
   1265e:	nop
   12660:	rts

00012662 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   12662:	move.l 4(sp),-(sp)
   12666:	jsr 11fbe <unlinkVar>
   1266c:	addq.l #4,sp
	thisVar->varType = vT;
   1266e:	movea.l 4(sp),a0
   12672:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   12676:	movea.l 4(sp),a0
   1267a:	move.l 12(sp),4(a0)
}
   12680:	nop
   12682:	rts

00012684 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   12684:	      /-- bra.s 12696 <stackGetByIndex+0x12>
        vS = vS->next;
   12686:	/-----|-> movea.l 4(sp),a0
   1268a:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   12690:	|     +-- bne.s 12696 <stackGetByIndex+0x12>
            return NULL;
   12692:	|     |   moveq #0,d0
   12694:	|  /--|-- bra.s 126aa <stackGetByIndex+0x26>
    while (theIndex--) {
   12696:	|  |  \-> move.l 8(sp),d0
   1269a:	|  |      move.l d0,d1
   1269c:	|  |      subq.l #1,d1
   1269e:	|  |      move.l d1,8(sp)
   126a2:	|  |      tst.l d0
   126a4:	\--|----- bne.s 12686 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   126a6:	   |      move.l 4(sp),d0
}
   126aa:	   \----> rts

000126ac <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   126ac:	          tst.l 4(sp)
   126b0:	      /-- bne.s 126c0 <stackFindLast+0x14>
		return NULL;
   126b2:	      |   moveq #0,d0
   126b4:	/-----|-- bra.s 126ce <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   126b6:	|  /--|-> movea.l 4(sp),a0
   126ba:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   126c0:	|  |  \-> movea.l 4(sp),a0
   126c4:	|  |      move.l 8(a0),d0
   126c8:	|  \----- bne.s 126b6 <stackFindLast+0xa>

	return hunt;
   126ca:	|         move.l 4(sp),d0
}
   126ce:	\-------> rts

000126d0 <stackSize>:

int stackSize (const struct stackHandler * me) {
   126d0:	       subq.l #8,sp
	int r = 0;
   126d2:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   126d6:	       movea.l 12(sp),a0
   126da:	       move.l (a0),(sp)
	while (a) {
   126dc:	   /-- bra.s 126e8 <stackSize+0x18>
		r ++;
   126de:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   126e2:	|  |   movea.l (sp),a0
   126e4:	|  |   move.l 8(a0),(sp)
	while (a) {
   126e8:	|  \-> tst.l (sp)
   126ea:	\----- bne.s 126de <stackSize+0xe>
	}
	return r;
   126ec:	       move.l 4(sp),d0
}
   126f0:	       addq.l #8,sp
   126f2:	       rts

000126f4 <trimStack>:

void trimStack (struct variableStack ** stack) {
   126f4:	subq.l #8,sp
   126f6:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   126f8:	movea.l 16(sp),a0
   126fc:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   12700:	movea.l 16(sp),a0
   12704:	movea.l (a0),a0
   12706:	move.l 8(a0),d0
   1270a:	movea.l 16(sp),a0
   1270e:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   12710:	move.l 8(sp),d0
   12714:	move.l d0,-(sp)
   12716:	jsr 11fbe <unlinkVar>
   1271c:	addq.l #4,sp
	FreeVec(killMe);
   1271e:	move.l 8(sp),4(sp)
   12724:	move.l 190fa <SysBase>,d0
   1272a:	movea.l d0,a6
   1272c:	movea.l 4(sp),a1
   12730:	jsr -690(a6)
   12734:	nop
   12736:	movea.l (sp)+,a6
   12738:	addq.l #8,sp
   1273a:	rts

0001273c <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   1273c:	pea 16818 <custom.c.64ca0e9f+0x1b42>
   12742:	jsr 13db8 <KPrintF>
   12748:	addq.l #4,sp
	return FALSE;
   1274a:	clr.w d0
}
   1274c:	rts

0001274e <stringWidth>:

int stringWidth (char * theText) {
   1274e:	       subq.l #8,sp
	int a = 0;
   12750:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   12754:	       clr.l (sp)

	if (! fontTableSize) return 0;
   12756:	       move.l 1924e <fontTableSize>,d0
   1275c:	/----- bne.s 12762 <stringWidth+0x14>
   1275e:	|      moveq #0,d0
   12760:	|  /-- bra.s 12764 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   12762:	\--|-> move.l (sp),d0
}
   12764:	   \-> addq.l #8,sp
   12766:	       rts

00012768 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   12768:	pea 1683f <custom.c.64ca0e9f+0x1b69>
   1276e:	jsr 13db8 <KPrintF>
   12774:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   12776:	moveq #1,d0
}
   12778:	rts

0001277a <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   1277a:	       lea -16(sp),sp
   1277e:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   12780:	       moveq #36,d0
   12782:	       move.l d0,16(sp)
   12786:	       clr.l 12(sp)
   1278a:	       move.l 190fa <SysBase>,d0
   12790:	       movea.l d0,a6
   12792:	       move.l 16(sp),d0
   12796:	       move.l 12(sp),d1
   1279a:	       jsr -684(a6)
   1279e:	       move.l d0,8(sp)
   127a2:	       move.l 8(sp),d0
   127a6:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   127aa:	   /-- bne.s 127b2 <addScreenRegion+0x38>
   127ac:	   |   clr.w d0
   127ae:	/--|-- bra.w 12832 <addScreenRegion+0xb8>
    newRegion->di = di;
   127b2:	|  \-> movea.l 4(sp),a0
   127b6:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   127bc:	|      movea.l 4(sp),a0
   127c0:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   127c4:	|      movea.l 4(sp),a0
   127c8:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   127ce:	|      movea.l 4(sp),a0
   127d2:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   127d8:	|      movea.l 4(sp),a0
   127dc:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   127e2:	|      movea.l 4(sp),a0
   127e6:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   127ec:	|      movea.l 4(sp),a0
   127f0:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   127f6:	|      move.l 52(sp),-(sp)
   127fa:	|      jsr ac96 <loadObjectType>
   12800:	|      addq.l #4,sp
   12802:	|      movea.l 4(sp),a0
   12806:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   1280a:	|      move.l 19252 <allScreenRegions>,d0
   12810:	|      movea.l 4(sp),a0
   12814:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   12818:	|      move.l 4(sp),19252 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   12820:	|      movea.l 4(sp),a0
   12824:	|      move.l 28(a0),d0
   12828:	|      sne d0
   1282a:	|      neg.b d0
   1282c:	|      move.b d0,d0
   1282e:	|      andi.w #255,d0
}
   12832:	\----> movea.l (sp)+,a6
   12834:	       lea 16(sp),sp
   12838:	       rts

0001283a <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   1283a:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1283c:	             move.l 19252 <allScreenRegions>,(sp)

	while (thisRegion) {
   12842:	   /-------- bra.s 1285e <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   12844:	/--|-------> movea.l (sp),a0
   12846:	|  |         movea.l 28(a0),a0
   1284a:	|  |         move.l 4(a0),d0
   1284e:	|  |         cmp.l 8(sp),d0
   12852:	|  |     /-- bne.s 12858 <getRegionForObject+0x1e>
			return thisRegion;
   12854:	|  |     |   move.l (sp),d0
   12856:	|  |  /--|-- bra.s 12864 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   12858:	|  |  |  \-> movea.l (sp),a0
   1285a:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   1285e:	|  \--|----> tst.l (sp)
   12860:	\-----|----- bne.s 12844 <getRegionForObject+0xa>
	}

	return NULL;
   12862:	      |      moveq #0,d0
}
   12864:	      \----> addq.l #4,sp
   12866:	             rts

00012868 <killAllRegions>:

void killAllRegions () {
   12868:	       subq.l #8,sp
   1286a:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1286c:	   /-- bra.s 128ae <killAllRegions+0x46>
		killRegion = allScreenRegions;
   1286e:	/--|-> move.l 19252 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   12876:	|  |   movea.l 19252 <allScreenRegions>,a0
   1287c:	|  |   move.l 32(a0),d0
   12880:	|  |   move.l d0,19252 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   12886:	|  |   movea.l 8(sp),a0
   1288a:	|  |   move.l 28(a0),d0
   1288e:	|  |   move.l d0,-(sp)
   12890:	|  |   jsr af4e <removeObjectType>
   12896:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   12898:	|  |   move.l 8(sp),4(sp)
   1289e:	|  |   move.l 190fa <SysBase>,d0
   128a4:	|  |   movea.l d0,a6
   128a6:	|  |   movea.l 4(sp),a1
   128aa:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   128ae:	|  \-> move.l 19252 <allScreenRegions>,d0
   128b4:	\----- bne.s 1286e <killAllRegions+0x6>
	}
	overRegion = NULL;
   128b6:	       clr.l 19256 <overRegion>
}
   128bc:	       nop
   128be:	       movea.l (sp)+,a6
   128c0:	       addq.l #8,sp
   128c2:	       rts

000128c4 <loadRegions>:

void loadRegions (BPTR fp) {
   128c4:	       lea -24(sp),sp
   128c8:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   128ca:	       move.l 32(sp),-(sp)
   128ce:	       jsr 6bc <get2bytes>
   128d4:	       addq.l #4,sp
   128d6:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   128da:	       move.l #102994,20(sp)

	while (numRegions --) {
   128e2:	   /-- bra.w 129c0 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   128e6:	/--|-> moveq #36,d0
   128e8:	|  |   move.l d0,16(sp)
   128ec:	|  |   clr.l 12(sp)
   128f0:	|  |   move.l 190fa <SysBase>,d0
   128f6:	|  |   movea.l d0,a6
   128f8:	|  |   move.l 16(sp),d0
   128fc:	|  |   move.l 12(sp),d1
   12900:	|  |   jsr -684(a6)
   12904:	|  |   move.l d0,8(sp)
   12908:	|  |   move.l 8(sp),d0
   1290c:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   12910:	|  |   movea.l 20(sp),a0
   12914:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   12918:	|  |   moveq #32,d1
   1291a:	|  |   add.l 4(sp),d1
   1291e:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   12922:	|  |   move.l 32(sp),-(sp)
   12926:	|  |   jsr 6bc <get2bytes>
   1292c:	|  |   addq.l #4,sp
   1292e:	|  |   movea.l 4(sp),a0
   12932:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   12934:	|  |   move.l 32(sp),-(sp)
   12938:	|  |   jsr 6bc <get2bytes>
   1293e:	|  |   addq.l #4,sp
   12940:	|  |   movea.l 4(sp),a0
   12944:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   12948:	|  |   move.l 32(sp),-(sp)
   1294c:	|  |   jsr 6bc <get2bytes>
   12952:	|  |   addq.l #4,sp
   12954:	|  |   movea.l 4(sp),a0
   12958:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   1295c:	|  |   move.l 32(sp),-(sp)
   12960:	|  |   jsr 6bc <get2bytes>
   12966:	|  |   addq.l #4,sp
   12968:	|  |   movea.l 4(sp),a0
   1296c:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   12970:	|  |   move.l 32(sp),-(sp)
   12974:	|  |   jsr 6bc <get2bytes>
   1297a:	|  |   addq.l #4,sp
   1297c:	|  |   movea.l 4(sp),a0
   12980:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   12984:	|  |   move.l 32(sp),-(sp)
   12988:	|  |   jsr 6bc <get2bytes>
   1298e:	|  |   addq.l #4,sp
   12990:	|  |   movea.l 4(sp),a0
   12994:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   12998:	|  |   move.l 32(sp),-(sp)
   1299c:	|  |   jsr 6bc <get2bytes>
   129a2:	|  |   addq.l #4,sp
   129a4:	|  |   movea.l 4(sp),a0
   129a8:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   129ac:	|  |   move.l 32(sp),-(sp)
   129b0:	|  |   jsr ac44 <loadObjectRef>
   129b6:	|  |   addq.l #4,sp
   129b8:	|  |   movea.l 4(sp),a0
   129bc:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   129c0:	|  \-> move.l 24(sp),d0
   129c4:	|      move.l d0,d1
   129c6:	|      subq.l #1,d1
   129c8:	|      move.l d1,24(sp)
   129cc:	|      tst.l d0
   129ce:	\----- bne.w 128e6 <loadRegions+0x22>
	}
	* pointy = NULL;
   129d2:	       movea.l 20(sp),a0
   129d6:	       clr.l (a0)
}
   129d8:	       nop
   129da:	       movea.l (sp)+,a6
   129dc:	       lea 24(sp),sp
   129e0:	       rts

000129e2 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   129e2:	             lea -12(sp),sp
   129e6:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   129e8:	             move.l #102994,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   129f0:	   /-------- bra.s 12a6a <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   129f2:	/--|-------> movea.l 12(sp),a0
   129f6:	|  |         movea.l (a0),a0
   129f8:	|  |         movea.l 28(a0),a0
   129fc:	|  |         move.l 4(a0),d0
   12a00:	|  |         cmp.l 20(sp),d0
   12a04:	|  |  /----- bne.s 12a5c <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   12a06:	|  |  |      movea.l 12(sp),a0
   12a0a:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   12a0e:	|  |  |      movea.l 8(sp),a0
   12a12:	|  |  |      move.l 32(a0),d0
   12a16:	|  |  |      movea.l 12(sp),a0
   12a1a:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   12a1c:	|  |  |      movea.l 8(sp),a0
   12a20:	|  |  |      move.l 28(a0),d0
   12a24:	|  |  |      move.l d0,-(sp)
   12a26:	|  |  |      jsr af4e <removeObjectType>
   12a2c:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   12a2e:	|  |  |      move.l 19256 <overRegion>,d0
   12a34:	|  |  |      cmp.l 8(sp),d0
   12a38:	|  |  |  /-- bne.s 12a40 <removeScreenRegion+0x5e>
   12a3a:	|  |  |  |   clr.l 19256 <overRegion>
            FreeVec(killMe);
   12a40:	|  |  |  \-> move.l 8(sp),4(sp)
   12a46:	|  |  |      move.l 190fa <SysBase>,d0
   12a4c:	|  |  |      movea.l d0,a6
   12a4e:	|  |  |      movea.l 4(sp),a1
   12a52:	|  |  |      jsr -690(a6)
            killMe = NULL;
   12a56:	|  |  |      clr.l 8(sp)
   12a5a:	|  +--|----- bra.s 12a6a <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   12a5c:	|  |  \----> movea.l 12(sp),a0
   12a60:	|  |         move.l (a0),d0
   12a62:	|  |         moveq #32,d1
   12a64:	|  |         add.l d0,d1
   12a66:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   12a6a:	|  \-------> movea.l 12(sp),a0
   12a6e:	|            move.l (a0),d0
   12a70:	\----------- bne.s 129f2 <removeScreenRegion+0x10>
        }
    }
}
   12a72:	             nop
   12a74:	             nop
   12a76:	             movea.l (sp)+,a6
   12a78:	             lea 12(sp),sp
   12a7c:	             rts

00012a7e <saveRegions>:

void saveRegions (BPTR fp) {
   12a7e:	       subq.l #8,sp
	int numRegions = 0;
   12a80:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   12a84:	       move.l 19252 <allScreenRegions>,(sp)
	while (thisRegion) {
   12a8a:	   /-- bra.s 12a96 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   12a8c:	/--|-> movea.l (sp),a0
   12a8e:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   12a92:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   12a96:	|  \-> tst.l (sp)
   12a98:	\----- bne.s 12a8c <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   12a9a:	       move.l 12(sp),-(sp)
   12a9e:	       move.l 8(sp),-(sp)
   12aa2:	       jsr 8d0 <put2bytes>
   12aa8:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   12aaa:	       move.l 19252 <allScreenRegions>,(sp)
	while (thisRegion) {
   12ab0:	/----- bra.w 12b58 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   12ab4:	|  /-> movea.l (sp),a0
   12ab6:	|  |   move.l (a0),d0
   12ab8:	|  |   move.l 12(sp),-(sp)
   12abc:	|  |   move.l d0,-(sp)
   12abe:	|  |   jsr 8d0 <put2bytes>
   12ac4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   12ac6:	|  |   movea.l (sp),a0
   12ac8:	|  |   move.l 4(a0),d0
   12acc:	|  |   move.l 12(sp),-(sp)
   12ad0:	|  |   move.l d0,-(sp)
   12ad2:	|  |   jsr 8d0 <put2bytes>
   12ad8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   12ada:	|  |   movea.l (sp),a0
   12adc:	|  |   move.l 8(a0),d0
   12ae0:	|  |   move.l 12(sp),-(sp)
   12ae4:	|  |   move.l d0,-(sp)
   12ae6:	|  |   jsr 8d0 <put2bytes>
   12aec:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   12aee:	|  |   movea.l (sp),a0
   12af0:	|  |   move.l 12(a0),d0
   12af4:	|  |   move.l 12(sp),-(sp)
   12af8:	|  |   move.l d0,-(sp)
   12afa:	|  |   jsr 8d0 <put2bytes>
   12b00:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   12b02:	|  |   movea.l (sp),a0
   12b04:	|  |   move.l 16(a0),d0
   12b08:	|  |   move.l 12(sp),-(sp)
   12b0c:	|  |   move.l d0,-(sp)
   12b0e:	|  |   jsr 8d0 <put2bytes>
   12b14:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   12b16:	|  |   movea.l (sp),a0
   12b18:	|  |   move.l 20(a0),d0
   12b1c:	|  |   move.l 12(sp),-(sp)
   12b20:	|  |   move.l d0,-(sp)
   12b22:	|  |   jsr 8d0 <put2bytes>
   12b28:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   12b2a:	|  |   movea.l (sp),a0
   12b2c:	|  |   move.l 24(a0),d0
   12b30:	|  |   move.l 12(sp),-(sp)
   12b34:	|  |   move.l d0,-(sp)
   12b36:	|  |   jsr 8d0 <put2bytes>
   12b3c:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   12b3e:	|  |   movea.l (sp),a0
   12b40:	|  |   move.l 28(a0),d0
   12b44:	|  |   move.l 12(sp),-(sp)
   12b48:	|  |   move.l d0,-(sp)
   12b4a:	|  |   jsr afee <saveObjectRef>
   12b50:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   12b52:	|  |   movea.l (sp),a0
   12b54:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   12b58:	\--|-> tst.l (sp)
   12b5a:	   \-- bne.w 12ab4 <saveRegions+0x36>
	}
}
   12b5e:	       nop
   12b60:	       nop
   12b62:	       addq.l #8,sp
   12b64:	       rts

00012b66 <showBoxes>:

void showBoxes () {
   12b66:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   12b68:	       move.l 19252 <allScreenRegions>,(sp)

	while (huntRegion) {
   12b6e:	/----- bra.w 12c0a <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   12b72:	|  /-> movea.l (sp),a0
   12b74:	|  |   move.l 12(a0),d0
   12b78:	|  |   movea.l d0,a1
   12b7a:	|  |   movea.l (sp),a0
   12b7c:	|  |   move.l 4(a0),d0
   12b80:	|  |   move.l d0,d1
   12b82:	|  |   movea.l (sp),a0
   12b84:	|  |   move.l (a0),d0
   12b86:	|  |   move.l a1,-(sp)
   12b88:	|  |   move.l d1,-(sp)
   12b8a:	|  |   move.l d0,-(sp)
   12b8c:	|  |   jsr a8de <drawVerticalLine>
   12b92:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   12b96:	|  |   movea.l (sp),a0
   12b98:	|  |   move.l 12(a0),d0
   12b9c:	|  |   movea.l d0,a1
   12b9e:	|  |   movea.l (sp),a0
   12ba0:	|  |   move.l 4(a0),d0
   12ba4:	|  |   move.l d0,d1
   12ba6:	|  |   movea.l (sp),a0
   12ba8:	|  |   move.l 8(a0),d0
   12bac:	|  |   move.l a1,-(sp)
   12bae:	|  |   move.l d1,-(sp)
   12bb0:	|  |   move.l d0,-(sp)
   12bb2:	|  |   jsr a8de <drawVerticalLine>
   12bb8:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   12bbc:	|  |   movea.l (sp),a0
   12bbe:	|  |   move.l 8(a0),d0
   12bc2:	|  |   movea.l d0,a1
   12bc4:	|  |   movea.l (sp),a0
   12bc6:	|  |   move.l 4(a0),d0
   12bca:	|  |   move.l d0,d1
   12bcc:	|  |   movea.l (sp),a0
   12bce:	|  |   move.l (a0),d0
   12bd0:	|  |   move.l a1,-(sp)
   12bd2:	|  |   move.l d1,-(sp)
   12bd4:	|  |   move.l d0,-(sp)
   12bd6:	|  |   jsr a8b8 <drawHorizontalLine>
   12bdc:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   12be0:	|  |   movea.l (sp),a0
   12be2:	|  |   move.l 8(a0),d0
   12be6:	|  |   movea.l d0,a1
   12be8:	|  |   movea.l (sp),a0
   12bea:	|  |   move.l 12(a0),d0
   12bee:	|  |   move.l d0,d1
   12bf0:	|  |   movea.l (sp),a0
   12bf2:	|  |   move.l (a0),d0
   12bf4:	|  |   move.l a1,-(sp)
   12bf6:	|  |   move.l d1,-(sp)
   12bf8:	|  |   move.l d0,-(sp)
   12bfa:	|  |   jsr a8b8 <drawHorizontalLine>
   12c00:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   12c04:	|  |   movea.l (sp),a0
   12c06:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   12c0a:	\--|-> tst.l (sp)
   12c0c:	   \-- bne.w 12b72 <showBoxes+0xc>
	}
   12c10:	       nop
   12c12:	       nop
   12c14:	       addq.l #4,sp
   12c16:	       rts

00012c18 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   12c18:	       lea -32(sp),sp
   12c1c:	       move.l d3,-(sp)
   12c1e:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   12c20:	       move.l 60(sp),d0
   12c24:	       sub.l 52(sp),d0
   12c28:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   12c2c:	       move.l 64(sp),d0
   12c30:	       sub.l 56(sp),d0
   12c34:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   12c38:	       move.l 68(sp),d0
   12c3c:	       sub.l 52(sp),d0
   12c40:	       move.l 36(sp),-(sp)
   12c44:	       move.l d0,-(sp)
   12c46:	       jsr 14776 <__mulsi3>
   12c4c:	       addq.l #8,sp
   12c4e:	       move.l d0,d2
   12c50:	       move.l 72(sp),d0
   12c54:	       sub.l 56(sp),d0
   12c58:	       move.l 32(sp),-(sp)
   12c5c:	       move.l d0,-(sp)
   12c5e:	       jsr 14776 <__mulsi3>
   12c64:	       addq.l #8,sp
   12c66:	       add.l d2,d0
   12c68:	       move.l d0,-(sp)
   12c6a:	       jsr 141b4 <__floatsidf>
   12c70:	       addq.l #4,sp
   12c72:	       move.l d0,16(sp)
   12c76:	       move.l d1,20(sp)
   12c7a:	       move.l 16(sp),24(sp)
   12c80:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   12c86:	       move.l 36(sp),-(sp)
   12c8a:	       move.l 40(sp),-(sp)
   12c8e:	       jsr 14776 <__mulsi3>
   12c94:	       addq.l #8,sp
   12c96:	       move.l d0,d2
   12c98:	       move.l 32(sp),-(sp)
   12c9c:	       move.l 36(sp),-(sp)
   12ca0:	       jsr 14776 <__mulsi3>
   12ca6:	       addq.l #8,sp
   12ca8:	       add.l d2,d0
   12caa:	       move.l d0,-(sp)
   12cac:	       jsr 141b4 <__floatsidf>
   12cb2:	       addq.l #4,sp
   12cb4:	       move.l d1,-(sp)
   12cb6:	       move.l d0,-(sp)
   12cb8:	       move.l 36(sp),-(sp)
   12cbc:	       move.l 36(sp),-(sp)
   12cc0:	       jsr 1403e <__divdf3>
   12cc6:	       lea 16(sp),sp
   12cca:	       move.l d0,8(sp)
   12cce:	       move.l d1,12(sp)
   12cd2:	       move.l 8(sp),24(sp)
   12cd8:	       move.l 12(sp),28(sp)

	if (m < 0) {
   12cde:	       clr.l -(sp)
   12ce0:	       clr.l -(sp)
   12ce2:	       move.l 36(sp),-(sp)
   12ce6:	       move.l 36(sp),-(sp)
   12cea:	       jsr 143cc <__ltdf2>
   12cf0:	       lea 16(sp),sp
   12cf4:	       tst.l d0
   12cf6:	   /-- bge.s 12d0c <closestPointOnLine+0xf4>
		*closestX = x1;
   12cf8:	   |   movea.l 44(sp),a0
   12cfc:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   12d00:	   |   movea.l 48(sp),a0
   12d04:	   |   move.l 56(sp),(a0)
   12d08:	/--|-- bra.w 12dee <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   12d0c:	|  \-> clr.l -(sp)
   12d0e:	|      move.l #1072693248,-(sp)
   12d14:	|      move.l 36(sp),-(sp)
   12d18:	|      move.l 36(sp),-(sp)
   12d1c:	|      jsr 14312 <__gtdf2>
   12d22:	|      lea 16(sp),sp
   12d26:	|      tst.l d0
   12d28:	|  /-- ble.s 12d3e <closestPointOnLine+0x126>
		*closestX = x2;
   12d2a:	|  |   movea.l 44(sp),a0
   12d2e:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   12d32:	|  |   movea.l 48(sp),a0
   12d36:	|  |   move.l 64(sp),(a0)
   12d3a:	+--|-- bra.w 12dee <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   12d3e:	|  \-> move.l 52(sp),-(sp)
   12d42:	|      jsr 141b4 <__floatsidf>
   12d48:	|      addq.l #4,sp
   12d4a:	|      move.l d0,d2
   12d4c:	|      move.l d1,d3
   12d4e:	|      move.l 36(sp),-(sp)
   12d52:	|      jsr 141b4 <__floatsidf>
   12d58:	|      addq.l #4,sp
   12d5a:	|      move.l 28(sp),-(sp)
   12d5e:	|      move.l 28(sp),-(sp)
   12d62:	|      move.l d1,-(sp)
   12d64:	|      move.l d0,-(sp)
   12d66:	|      jsr 14244 <__muldf3>
   12d6c:	|      lea 16(sp),sp
   12d70:	|      move.l d1,-(sp)
   12d72:	|      move.l d0,-(sp)
   12d74:	|      move.l d3,-(sp)
   12d76:	|      move.l d2,-(sp)
   12d78:	|      jsr 13fdc <__adddf3>
   12d7e:	|      lea 16(sp),sp
   12d82:	|      move.l d1,-(sp)
   12d84:	|      move.l d0,-(sp)
   12d86:	|      jsr 1414c <__fixdfsi>
   12d8c:	|      addq.l #8,sp
   12d8e:	|      movea.l 44(sp),a0
   12d92:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   12d94:	|      move.l 56(sp),-(sp)
   12d98:	|      jsr 141b4 <__floatsidf>
   12d9e:	|      addq.l #4,sp
   12da0:	|      move.l d0,d2
   12da2:	|      move.l d1,d3
   12da4:	|      move.l 32(sp),-(sp)
   12da8:	|      jsr 141b4 <__floatsidf>
   12dae:	|      addq.l #4,sp
   12db0:	|      move.l 28(sp),-(sp)
   12db4:	|      move.l 28(sp),-(sp)
   12db8:	|      move.l d1,-(sp)
   12dba:	|      move.l d0,-(sp)
   12dbc:	|      jsr 14244 <__muldf3>
   12dc2:	|      lea 16(sp),sp
   12dc6:	|      move.l d1,-(sp)
   12dc8:	|      move.l d0,-(sp)
   12dca:	|      move.l d3,-(sp)
   12dcc:	|      move.l d2,-(sp)
   12dce:	|      jsr 13fdc <__adddf3>
   12dd4:	|      lea 16(sp),sp
   12dd8:	|      move.l d1,-(sp)
   12dda:	|      move.l d0,-(sp)
   12ddc:	|      jsr 1414c <__fixdfsi>
   12de2:	|      addq.l #8,sp
   12de4:	|      movea.l 48(sp),a0
   12de8:	|      move.l d0,(a0)
		return TRUE;
   12dea:	|      moveq #1,d0
   12dec:	|  /-- bra.s 12df0 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   12dee:	\--|-> clr.w d0
}
   12df0:	   \-> move.l (sp)+,d2
   12df2:	       move.l (sp)+,d3
   12df4:	       lea 32(sp),sp
   12df8:	       rts

00012dfa <drawFloor>:

void drawFloor() {
   12dfa:	                lea -12(sp),sp
   12dfe:	                move.l d3,-(sp)
   12e00:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   12e02:	                clr.l 16(sp)
   12e06:	   /----------- bra.w 1301a <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   12e0a:	/--|----------> movea.l 1925a <currentFloor>,a0
   12e10:	|  |            move.l 12(a0),d1
   12e14:	|  |            move.l 16(sp),d0
   12e18:	|  |            lsl.l #3,d0
   12e1a:	|  |            movea.l d1,a0
   12e1c:	|  |            adda.l d0,a0
   12e1e:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   12e22:	|  |            moveq #1,d0
   12e24:	|  |            cmp.l 8(sp),d0
   12e28:	|  |  /-------- bge.w 13016 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   12e2c:	|  |  |         moveq #1,d0
   12e2e:	|  |  |         move.l d0,12(sp)
   12e32:	|  |  |     /-- bra.w 12f2c <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   12e36:	|  |  |  /--|-> movea.l 1925a <currentFloor>,a0
   12e3c:	|  |  |  |  |   move.l 4(a0),d1
   12e40:	|  |  |  |  |   movea.l 1925a <currentFloor>,a0
   12e46:	|  |  |  |  |   movea.l 12(a0),a0
   12e4a:	|  |  |  |  |   move.l 16(sp),d0
   12e4e:	|  |  |  |  |   lsl.l #3,d0
   12e50:	|  |  |  |  |   adda.l d0,a0
   12e52:	|  |  |  |  |   movea.l 4(a0),a0
   12e56:	|  |  |  |  |   move.l 12(sp),d0
   12e5a:	|  |  |  |  |   add.l d0,d0
   12e5c:	|  |  |  |  |   add.l d0,d0
   12e5e:	|  |  |  |  |   adda.l d0,a0
   12e60:	|  |  |  |  |   move.l (a0),d0
   12e62:	|  |  |  |  |   lsl.l #3,d0
   12e64:	|  |  |  |  |   movea.l d1,a0
   12e66:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   12e68:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   12e6c:	|  |  |  |  |   movea.l 1925a <currentFloor>,a0
   12e72:	|  |  |  |  |   move.l 4(a0),d1
   12e76:	|  |  |  |  |   movea.l 1925a <currentFloor>,a0
   12e7c:	|  |  |  |  |   movea.l 12(a0),a0
   12e80:	|  |  |  |  |   move.l 16(sp),d0
   12e84:	|  |  |  |  |   lsl.l #3,d0
   12e86:	|  |  |  |  |   adda.l d0,a0
   12e88:	|  |  |  |  |   movea.l 4(a0),a0
   12e8c:	|  |  |  |  |   move.l 12(sp),d0
   12e90:	|  |  |  |  |   add.l d0,d0
   12e92:	|  |  |  |  |   add.l d0,d0
   12e94:	|  |  |  |  |   adda.l d0,a0
   12e96:	|  |  |  |  |   move.l (a0),d0
   12e98:	|  |  |  |  |   lsl.l #3,d0
   12e9a:	|  |  |  |  |   movea.l d1,a0
   12e9c:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   12e9e:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   12ea0:	|  |  |  |  |   movea.l 1925a <currentFloor>,a0
   12ea6:	|  |  |  |  |   move.l 4(a0),d1
   12eaa:	|  |  |  |  |   movea.l 1925a <currentFloor>,a0
   12eb0:	|  |  |  |  |   movea.l 12(a0),a0
   12eb4:	|  |  |  |  |   move.l 16(sp),d0
   12eb8:	|  |  |  |  |   lsl.l #3,d0
   12eba:	|  |  |  |  |   adda.l d0,a0
   12ebc:	|  |  |  |  |   movea.l 4(a0),a0
   12ec0:	|  |  |  |  |   move.l 12(sp),d0
   12ec4:	|  |  |  |  |   addi.l #1073741823,d0
   12eca:	|  |  |  |  |   add.l d0,d0
   12ecc:	|  |  |  |  |   add.l d0,d0
   12ece:	|  |  |  |  |   adda.l d0,a0
   12ed0:	|  |  |  |  |   move.l (a0),d0
   12ed2:	|  |  |  |  |   lsl.l #3,d0
   12ed4:	|  |  |  |  |   movea.l d1,a0
   12ed6:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   12ed8:	|  |  |  |  |   move.l 4(a0),d1
   12edc:	|  |  |  |  |   movea.l 1925a <currentFloor>,a0
   12ee2:	|  |  |  |  |   move.l 4(a0),d3
   12ee6:	|  |  |  |  |   movea.l 1925a <currentFloor>,a0
   12eec:	|  |  |  |  |   movea.l 12(a0),a0
   12ef0:	|  |  |  |  |   move.l 16(sp),d0
   12ef4:	|  |  |  |  |   lsl.l #3,d0
   12ef6:	|  |  |  |  |   adda.l d0,a0
   12ef8:	|  |  |  |  |   movea.l 4(a0),a0
   12efc:	|  |  |  |  |   move.l 12(sp),d0
   12f00:	|  |  |  |  |   addi.l #1073741823,d0
   12f06:	|  |  |  |  |   add.l d0,d0
   12f08:	|  |  |  |  |   add.l d0,d0
   12f0a:	|  |  |  |  |   adda.l d0,a0
   12f0c:	|  |  |  |  |   move.l (a0),d0
   12f0e:	|  |  |  |  |   lsl.l #3,d0
   12f10:	|  |  |  |  |   movea.l d3,a0
   12f12:	|  |  |  |  |   adda.l d0,a0
   12f14:	|  |  |  |  |   move.l (a0),d0
   12f16:	|  |  |  |  |   move.l d2,-(sp)
   12f18:	|  |  |  |  |   move.l a1,-(sp)
   12f1a:	|  |  |  |  |   move.l d1,-(sp)
   12f1c:	|  |  |  |  |   move.l d0,-(sp)
   12f1e:	|  |  |  |  |   jsr 1c3e <drawLine>
   12f24:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   12f28:	|  |  |  |  |   addq.l #1,12(sp)
   12f2c:	|  |  |  |  \-> move.l 12(sp),d0
   12f30:	|  |  |  |      cmp.l 8(sp),d0
   12f34:	|  |  |  \----- blt.w 12e36 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   12f38:	|  |  |         movea.l 1925a <currentFloor>,a0
   12f3e:	|  |  |         move.l 4(a0),d1
   12f42:	|  |  |         movea.l 1925a <currentFloor>,a0
   12f48:	|  |  |         movea.l 12(a0),a0
   12f4c:	|  |  |         move.l 16(sp),d0
   12f50:	|  |  |         lsl.l #3,d0
   12f52:	|  |  |         adda.l d0,a0
   12f54:	|  |  |         movea.l 4(a0),a0
   12f58:	|  |  |         move.l 8(sp),d0
   12f5c:	|  |  |         addi.l #1073741823,d0
   12f62:	|  |  |         add.l d0,d0
   12f64:	|  |  |         add.l d0,d0
   12f66:	|  |  |         adda.l d0,a0
   12f68:	|  |  |         move.l (a0),d0
   12f6a:	|  |  |         lsl.l #3,d0
   12f6c:	|  |  |         movea.l d1,a0
   12f6e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   12f70:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   12f74:	|  |  |         movea.l 1925a <currentFloor>,a0
   12f7a:	|  |  |         move.l 4(a0),d1
   12f7e:	|  |  |         movea.l 1925a <currentFloor>,a0
   12f84:	|  |  |         movea.l 12(a0),a0
   12f88:	|  |  |         move.l 16(sp),d0
   12f8c:	|  |  |         lsl.l #3,d0
   12f8e:	|  |  |         adda.l d0,a0
   12f90:	|  |  |         movea.l 4(a0),a0
   12f94:	|  |  |         move.l 8(sp),d0
   12f98:	|  |  |         addi.l #1073741823,d0
   12f9e:	|  |  |         add.l d0,d0
   12fa0:	|  |  |         add.l d0,d0
   12fa2:	|  |  |         adda.l d0,a0
   12fa4:	|  |  |         move.l (a0),d0
   12fa6:	|  |  |         lsl.l #3,d0
   12fa8:	|  |  |         movea.l d1,a0
   12faa:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   12fac:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   12fae:	|  |  |         movea.l 1925a <currentFloor>,a0
   12fb4:	|  |  |         move.l 4(a0),d1
   12fb8:	|  |  |         movea.l 1925a <currentFloor>,a0
   12fbe:	|  |  |         movea.l 12(a0),a0
   12fc2:	|  |  |         move.l 16(sp),d0
   12fc6:	|  |  |         lsl.l #3,d0
   12fc8:	|  |  |         adda.l d0,a0
   12fca:	|  |  |         movea.l 4(a0),a0
   12fce:	|  |  |         move.l (a0),d0
   12fd0:	|  |  |         lsl.l #3,d0
   12fd2:	|  |  |         movea.l d1,a0
   12fd4:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   12fd6:	|  |  |         move.l 4(a0),d1
   12fda:	|  |  |         movea.l 1925a <currentFloor>,a0
   12fe0:	|  |  |         move.l 4(a0),d3
   12fe4:	|  |  |         movea.l 1925a <currentFloor>,a0
   12fea:	|  |  |         movea.l 12(a0),a0
   12fee:	|  |  |         move.l 16(sp),d0
   12ff2:	|  |  |         lsl.l #3,d0
   12ff4:	|  |  |         adda.l d0,a0
   12ff6:	|  |  |         movea.l 4(a0),a0
   12ffa:	|  |  |         move.l (a0),d0
   12ffc:	|  |  |         lsl.l #3,d0
   12ffe:	|  |  |         movea.l d3,a0
   13000:	|  |  |         adda.l d0,a0
   13002:	|  |  |         move.l (a0),d0
   13004:	|  |  |         move.l d2,-(sp)
   13006:	|  |  |         move.l a1,-(sp)
   13008:	|  |  |         move.l d1,-(sp)
   1300a:	|  |  |         move.l d0,-(sp)
   1300c:	|  |  |         jsr 1c3e <drawLine>
   13012:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   13016:	|  |  \-------> addq.l #1,16(sp)
   1301a:	|  \----------> movea.l 1925a <currentFloor>,a0
   13020:	|               move.l 8(a0),d0
   13024:	|               cmp.l 16(sp),d0
   13028:	\-------------- bgt.w 12e0a <drawFloor+0x10>
        }
    }
}
   1302c:	                nop
   1302e:	                nop
   13030:	                move.l (sp)+,d2
   13032:	                move.l (sp)+,d3
   13034:	                lea 12(sp),sp
   13038:	                rts

0001303a <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   1303a:	                      lea -12(sp),sp
    int sharedVertices = 0;
   1303e:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   13042:	                      clr.l 4(sp)
   13046:	   /----------------- bra.w 130d8 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   1304a:	/--|----------------> clr.l (sp)
   1304c:	|  |     /----------- bra.s 130c8 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   1304e:	|  |  /--|----------> movea.l 16(sp),a0
   13052:	|  |  |  |            move.l 4(a0),d1
   13056:	|  |  |  |            move.l 4(sp),d0
   1305a:	|  |  |  |            add.l d0,d0
   1305c:	|  |  |  |            add.l d0,d0
   1305e:	|  |  |  |            movea.l d1,a0
   13060:	|  |  |  |            adda.l d0,a0
   13062:	|  |  |  |            move.l (a0),d1
   13064:	|  |  |  |            movea.l 20(sp),a0
   13068:	|  |  |  |            movea.l 4(a0),a0
   1306c:	|  |  |  |            move.l (sp),d0
   1306e:	|  |  |  |            add.l d0,d0
   13070:	|  |  |  |            add.l d0,d0
   13072:	|  |  |  |            adda.l d0,a0
   13074:	|  |  |  |            move.l (a0),d0
   13076:	|  |  |  |            cmp.l d1,d0
   13078:	|  |  |  |  /-------- bne.s 130c6 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   1307a:	|  |  |  |  |         move.l 8(sp),d0
   1307e:	|  |  |  |  |         move.l d0,d1
   13080:	|  |  |  |  |         addq.l #1,d1
   13082:	|  |  |  |  |         move.l d1,8(sp)
   13086:	|  |  |  |  |         tst.l d0
   13088:	|  |  |  |  |     /-- beq.s 130aa <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   1308a:	|  |  |  |  |     |   movea.l 16(sp),a0
   1308e:	|  |  |  |  |     |   move.l 4(a0),d1
   13092:	|  |  |  |  |     |   move.l 4(sp),d0
   13096:	|  |  |  |  |     |   add.l d0,d0
   13098:	|  |  |  |  |     |   add.l d0,d0
   1309a:	|  |  |  |  |     |   movea.l d1,a0
   1309c:	|  |  |  |  |     |   adda.l d0,a0
   1309e:	|  |  |  |  |     |   move.l (a0),d0
   130a0:	|  |  |  |  |     |   movea.l 28(sp),a0
   130a4:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   130a6:	|  |  |  |  |     |   moveq #1,d0
   130a8:	|  |  |  |  |  /--|-- bra.s 130e8 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   130aa:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   130ae:	|  |  |  |  |  |      move.l 4(a0),d1
   130b2:	|  |  |  |  |  |      move.l 4(sp),d0
   130b6:	|  |  |  |  |  |      add.l d0,d0
   130b8:	|  |  |  |  |  |      add.l d0,d0
   130ba:	|  |  |  |  |  |      movea.l d1,a0
   130bc:	|  |  |  |  |  |      adda.l d0,a0
   130be:	|  |  |  |  |  |      move.l (a0),d0
   130c0:	|  |  |  |  |  |      movea.l 24(sp),a0
   130c4:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   130c6:	|  |  |  |  \--|----> addq.l #1,(sp)
   130c8:	|  |  |  \-----|----> movea.l 20(sp),a0
   130cc:	|  |  |        |      move.l (a0),d0
   130ce:	|  |  |        |      cmp.l (sp),d0
   130d0:	|  |  \--------|----- bgt.w 1304e <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   130d4:	|  |           |      addq.l #1,4(sp)
   130d8:	|  \-----------|----> movea.l 16(sp),a0
   130dc:	|              |      move.l (a0),d0
   130de:	|              |      cmp.l 4(sp),d0
   130e2:	\--------------|----- bgt.w 1304a <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   130e6:	               |      clr.w d0
}
   130e8:	               \----> lea 12(sp),sp
   130ec:	                      rts

000130ee <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   130ee:	movea.l 1925a <currentFloor>,a0
   130f4:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   130f8:	movea.l 1925a <currentFloor>,a0
   130fe:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   13102:	movea.l 1925a <currentFloor>,a0
   13108:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   1310c:	movea.l 1925a <currentFloor>,a0
   13112:	clr.l 16(a0)
}
   13116:	nop
   13118:	rts

0001311a <inFloor>:

int inFloor (int x, int y) {
   1311a:	          subq.l #8,sp
	int i, r = -1;
   1311c:	          moveq #-1,d0
   1311e:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   13120:	          clr.l 4(sp)
   13124:	   /----- bra.s 13158 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   13126:	/--|----> movea.l 1925a <currentFloor>,a0
   1312c:	|  |      move.l 12(a0),d1
   13130:	|  |      move.l 4(sp),d0
   13134:	|  |      lsl.l #3,d0
   13136:	|  |      add.l d1,d0
   13138:	|  |      move.l 16(sp),-(sp)
   1313c:	|  |      move.l 16(sp),-(sp)
   13140:	|  |      move.l d0,-(sp)
   13142:	|  |      jsr 13324 <pointInFloorPolygon>
   13148:	|  |      lea 12(sp),sp
   1314c:	|  |      tst.w d0
   1314e:	|  |  /-- beq.s 13154 <inFloor+0x3a>
			r = i;
   13150:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   13154:	|  |  \-> addq.l #1,4(sp)
   13158:	|  \----> movea.l 1925a <currentFloor>,a0
   1315e:	|         move.l 8(a0),d0
   13162:	|         cmp.l 4(sp),d0
   13166:	\-------- bgt.s 13126 <inFloor+0xc>

	return r;
   13168:	          move.l (sp),d0
}
   1316a:	          addq.l #8,sp
   1316c:	          rts

0001316e <initFloor>:

BOOL initFloor () {
   1316e:	       lea -12(sp),sp
   13172:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   13174:	       moveq #20,d0
   13176:	       move.l d0,12(sp)
   1317a:	       clr.l 8(sp)
   1317e:	       move.l 190fa <SysBase>,d0
   13184:	       movea.l d0,a6
   13186:	       move.l 12(sp),d0
   1318a:	       move.l 8(sp),d1
   1318e:	       jsr -684(a6)
   13192:	       move.l d0,4(sp)
   13196:	       move.l 4(sp),d0
   1319a:	       move.l d0,1925a <currentFloor>

    if(currentFloor == 0) {
   131a0:	       move.l 1925a <currentFloor>,d0
   131a6:	/----- bne.s 131ba <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   131a8:	|      pea 16862 <custom.c.64ca0e9f+0x1b8c>
   131ae:	|      jsr 13db8 <KPrintF>
   131b4:	|      addq.l #4,sp
        return FALSE;
   131b6:	|      clr.w d0
   131b8:	|  /-- bra.s 131c2 <initFloor+0x54>
    }

	noFloor ();
   131ba:	\--|-> jsr 130ee <noFloor>
	return TRUE;
   131c0:	   |   moveq #1,d0
}
   131c2:	   \-> movea.l (sp)+,a6
   131c4:	       lea 12(sp),sp
   131c8:	       rts

000131ca <killFloor>:

void killFloor () {
   131ca:	       lea -24(sp),sp
   131ce:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   131d0:	       clr.l 24(sp)
   131d4:	   /-- bra.s 1322e <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   131d6:	/--|-> movea.l 1925a <currentFloor>,a0
   131dc:	|  |   move.l 12(a0),d1
   131e0:	|  |   move.l 24(sp),d0
   131e4:	|  |   lsl.l #3,d0
   131e6:	|  |   movea.l d1,a0
   131e8:	|  |   adda.l d0,a0
   131ea:	|  |   move.l 4(a0),8(sp)
   131f0:	|  |   move.l 190fa <SysBase>,d0
   131f6:	|  |   movea.l d0,a6
   131f8:	|  |   movea.l 8(sp),a1
   131fc:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   13200:	|  |   movea.l 1925a <currentFloor>,a0
   13206:	|  |   move.l 16(a0),d1
   1320a:	|  |   move.l 24(sp),d0
   1320e:	|  |   add.l d0,d0
   13210:	|  |   add.l d0,d0
   13212:	|  |   movea.l d1,a0
   13214:	|  |   adda.l d0,a0
   13216:	|  |   move.l (a0),4(sp)
   1321a:	|  |   move.l 190fa <SysBase>,d0
   13220:	|  |   movea.l d0,a6
   13222:	|  |   movea.l 4(sp),a1
   13226:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1322a:	|  |   addq.l #1,24(sp)
   1322e:	|  \-> movea.l 1925a <currentFloor>,a0
   13234:	|      move.l 8(a0),d0
   13238:	|      cmp.l 24(sp),d0
   1323c:	\----- bgt.s 131d6 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   1323e:	       movea.l 1925a <currentFloor>,a0
   13244:	       move.l 12(a0),20(sp)
   1324a:	       move.l 190fa <SysBase>,d0
   13250:	       movea.l d0,a6
   13252:	       movea.l 20(sp),a1
   13256:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   1325a:	       movea.l 1925a <currentFloor>,a0
   13260:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   13264:	       movea.l 1925a <currentFloor>,a0
   1326a:	       move.l 4(a0),16(sp)
   13270:	       move.l 190fa <SysBase>,d0
   13276:	       movea.l d0,a6
   13278:	       movea.l 16(sp),a1
   1327c:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   13280:	       movea.l 1925a <currentFloor>,a0
   13286:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   1328a:	       movea.l 1925a <currentFloor>,a0
   13290:	       move.l 16(a0),12(sp)
   13296:	       move.l 190fa <SysBase>,d0
   1329c:	       movea.l d0,a6
   1329e:	       movea.l 12(sp),a1
   132a2:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   132a6:	       movea.l 1925a <currentFloor>,a0
   132ac:	       clr.l 16(a0)
}
   132b0:	       nop
   132b2:	       movea.l (sp)+,a6
   132b4:	       lea 24(sp),sp
   132b8:	       rts

000132ba <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   132ba:	                   lea -12(sp),sp
	int sharedVertices = 0;
   132be:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   132c2:	                   clr.l 4(sp)
   132c6:	   /-------------- bra.s 13312 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   132c8:	/--|-------------> clr.l (sp)
   132ca:	|  |     /-------- bra.s 13306 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   132cc:	|  |  /--|-------> move.l 20(sp),d1
   132d0:	|  |  |  |         move.l 4(sp),d0
   132d4:	|  |  |  |         add.l d0,d0
   132d6:	|  |  |  |         add.l d0,d0
   132d8:	|  |  |  |         movea.l d1,a0
   132da:	|  |  |  |         adda.l d0,a0
   132dc:	|  |  |  |         move.l (a0),d1
   132de:	|  |  |  |         movea.l 28(sp),a0
   132e2:	|  |  |  |         move.l (sp),d0
   132e4:	|  |  |  |         add.l d0,d0
   132e6:	|  |  |  |         add.l d0,d0
   132e8:	|  |  |  |         adda.l d0,a0
   132ea:	|  |  |  |         move.l (a0),d0
   132ec:	|  |  |  |         cmp.l d1,d0
   132ee:	|  |  |  |     /-- bne.s 13304 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   132f0:	|  |  |  |     |   move.l 8(sp),d0
   132f4:	|  |  |  |     |   move.l d0,d1
   132f6:	|  |  |  |     |   addq.l #1,d1
   132f8:	|  |  |  |     |   move.l d1,8(sp)
   132fc:	|  |  |  |     |   tst.l d0
   132fe:	|  |  |  |     +-- beq.s 13304 <polysShareSide+0x4a>
   13300:	|  |  |  |     |   moveq #1,d0
   13302:	|  |  |  |  /--|-- bra.s 1331e <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   13304:	|  |  |  |  |  \-> addq.l #1,(sp)
   13306:	|  |  |  \--|----> move.l 24(sp),d0
   1330a:	|  |  |     |      cmp.l (sp),d0
   1330c:	|  |  \-----|----- bgt.s 132cc <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   1330e:	|  |        |      addq.l #1,4(sp)
   13312:	|  \--------|----> move.l 16(sp),d0
   13316:	|           |      cmp.l 4(sp),d0
   1331a:	\-----------|----- bgt.s 132c8 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   1331c:	            |      clr.w d0
}
   1331e:	            \----> lea 12(sp),sp
   13322:	                   rts

00013324 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   13324:	             lea -28(sp),sp
   13328:	             move.l d3,-(sp)
   1332a:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   1332c:	             clr.l 32(sp)
   13330:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   13334:	             movea.l 40(sp),a0
   13338:	             move.l (a0),d0
   1333a:	             move.l d0,d1
   1333c:	             subq.l #1,d1
   1333e:	             move.l d1,28(sp)
   13342:	   /-------- bra.w 1353c <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   13346:	/--|-------> movea.l 1925a <currentFloor>,a0
   1334c:	|  |         move.l 4(a0),d1
   13350:	|  |         movea.l 40(sp),a0
   13354:	|  |         movea.l 4(a0),a0
   13358:	|  |         move.l 32(sp),d0
   1335c:	|  |         add.l d0,d0
   1335e:	|  |         add.l d0,d0
   13360:	|  |         adda.l d0,a0
   13362:	|  |         move.l (a0),d0
   13364:	|  |         lsl.l #3,d0
   13366:	|  |         movea.l d1,a0
   13368:	|  |         adda.l d0,a0
   1336a:	|  |         move.l (a0),d0
   1336c:	|  |         move.l d0,-(sp)
   1336e:	|  |         jsr 141f4 <__floatsisf>
   13374:	|  |         addq.l #4,sp
   13376:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   1337a:	|  |         movea.l 1925a <currentFloor>,a0
   13380:	|  |         move.l 4(a0),d1
   13384:	|  |         movea.l 40(sp),a0
   13388:	|  |         movea.l 4(a0),a0
   1338c:	|  |         move.l 32(sp),d0
   13390:	|  |         add.l d0,d0
   13392:	|  |         add.l d0,d0
   13394:	|  |         adda.l d0,a0
   13396:	|  |         move.l (a0),d0
   13398:	|  |         lsl.l #3,d0
   1339a:	|  |         movea.l d1,a0
   1339c:	|  |         adda.l d0,a0
   1339e:	|  |         move.l 4(a0),d0
   133a2:	|  |         move.l d0,-(sp)
   133a4:	|  |         jsr 141f4 <__floatsisf>
   133aa:	|  |         addq.l #4,sp
   133ac:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   133b0:	|  |         movea.l 1925a <currentFloor>,a0
   133b6:	|  |         move.l 4(a0),d1
   133ba:	|  |         movea.l 40(sp),a0
   133be:	|  |         movea.l 4(a0),a0
   133c2:	|  |         move.l 28(sp),d0
   133c6:	|  |         add.l d0,d0
   133c8:	|  |         add.l d0,d0
   133ca:	|  |         adda.l d0,a0
   133cc:	|  |         move.l (a0),d0
   133ce:	|  |         lsl.l #3,d0
   133d0:	|  |         movea.l d1,a0
   133d2:	|  |         adda.l d0,a0
   133d4:	|  |         move.l (a0),d0
   133d6:	|  |         move.l d0,-(sp)
   133d8:	|  |         jsr 141f4 <__floatsisf>
   133de:	|  |         addq.l #4,sp
   133e0:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   133e4:	|  |         movea.l 1925a <currentFloor>,a0
   133ea:	|  |         move.l 4(a0),d1
   133ee:	|  |         movea.l 40(sp),a0
   133f2:	|  |         movea.l 4(a0),a0
   133f6:	|  |         move.l 28(sp),d0
   133fa:	|  |         add.l d0,d0
   133fc:	|  |         add.l d0,d0
   133fe:	|  |         adda.l d0,a0
   13400:	|  |         move.l (a0),d0
   13402:	|  |         lsl.l #3,d0
   13404:	|  |         movea.l d1,a0
   13406:	|  |         adda.l d0,a0
   13408:	|  |         move.l 4(a0),d0
   1340c:	|  |         move.l d0,-(sp)
   1340e:	|  |         jsr 141f4 <__floatsisf>
   13414:	|  |         addq.l #4,sp
   13416:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1341a:	|  |         move.l 48(sp),-(sp)
   1341e:	|  |         jsr 141f4 <__floatsisf>
   13424:	|  |         addq.l #4,sp
   13426:	|  |         move.l d0,-(sp)
   13428:	|  |         move.l 20(sp),-(sp)
   1342c:	|  |         jsr 14396 <__lesf2>
   13432:	|  |         addq.l #8,sp
   13434:	|  |         tst.l d0
   13436:	|  |     /-- bgt.s 13456 <pointInFloorPolygon+0x132>
   13438:	|  |     |   move.l 48(sp),-(sp)
   1343c:	|  |     |   jsr 141f4 <__floatsisf>
   13442:	|  |     |   addq.l #4,sp
   13444:	|  |     |   move.l d0,-(sp)
   13446:	|  |     |   move.l 12(sp),-(sp)
   1344a:	|  |     |   jsr 14360 <__gtsf2>
   13450:	|  |     |   addq.l #8,sp
   13452:	|  |     |   tst.l d0
   13454:	|  |  /--|-- bgt.s 13496 <pointInFloorPolygon+0x172>
   13456:	|  |  |  \-> move.l 48(sp),-(sp)
   1345a:	|  |  |      jsr 141f4 <__floatsisf>
   13460:	|  |  |      addq.l #4,sp
   13462:	|  |  |      move.l d0,-(sp)
   13464:	|  |  |      move.l 12(sp),-(sp)
   13468:	|  |  |      jsr 14396 <__lesf2>
   1346e:	|  |  |      addq.l #8,sp
   13470:	|  |  |      tst.l d0
   13472:	|  |  |  /-- bgt.w 1352c <pointInFloorPolygon+0x208>
   13476:	|  |  |  |   move.l 48(sp),-(sp)
   1347a:	|  |  |  |   jsr 141f4 <__floatsisf>
   13480:	|  |  |  |   addq.l #4,sp
   13482:	|  |  |  |   move.l d0,-(sp)
   13484:	|  |  |  |   move.l 20(sp),-(sp)
   13488:	|  |  |  |   jsr 14360 <__gtsf2>
   1348e:	|  |  |  |   addq.l #8,sp
   13490:	|  |  |  |   tst.l d0
   13492:	|  |  |  +-- ble.w 1352c <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   13496:	|  |  \--|-> move.l 44(sp),-(sp)
   1349a:	|  |     |   jsr 141f4 <__floatsisf>
   134a0:	|  |     |   addq.l #4,sp
   134a2:	|  |     |   move.l d0,d3
   134a4:	|  |     |   move.l 20(sp),-(sp)
   134a8:	|  |     |   move.l 16(sp),-(sp)
   134ac:	|  |     |   jsr 144e8 <__subsf3>
   134b2:	|  |     |   addq.l #8,sp
   134b4:	|  |     |   move.l d0,d2
   134b6:	|  |     |   move.l 48(sp),-(sp)
   134ba:	|  |     |   jsr 141f4 <__floatsisf>
   134c0:	|  |     |   addq.l #4,sp
   134c2:	|  |     |   move.l 16(sp),-(sp)
   134c6:	|  |     |   move.l d0,-(sp)
   134c8:	|  |     |   jsr 144e8 <__subsf3>
   134ce:	|  |     |   addq.l #8,sp
   134d0:	|  |     |   move.l d0,-(sp)
   134d2:	|  |     |   move.l d2,-(sp)
   134d4:	|  |     |   jsr 142a6 <__mulsf3>
   134da:	|  |     |   addq.l #8,sp
   134dc:	|  |     |   move.l d0,d2
   134de:	|  |     |   move.l 16(sp),-(sp)
   134e2:	|  |     |   move.l 12(sp),-(sp)
   134e6:	|  |     |   jsr 144e8 <__subsf3>
   134ec:	|  |     |   addq.l #8,sp
   134ee:	|  |     |   move.l d0,-(sp)
   134f0:	|  |     |   move.l d2,-(sp)
   134f2:	|  |     |   jsr 140a0 <__divsf3>
   134f8:	|  |     |   addq.l #8,sp
   134fa:	|  |     |   move.l 20(sp),-(sp)
   134fe:	|  |     |   move.l d0,-(sp)
   13500:	|  |     |   jsr 13fa6 <__addsf3>
   13506:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   13508:	|  |     |   move.l d0,-(sp)
   1350a:	|  |     |   move.l d3,-(sp)
   1350c:	|  |     |   jsr 1441a <__ltsf2>
   13512:	|  |     |   addq.l #8,sp
   13514:	|  |     |   tst.l d0
   13516:	|  |     +-- bge.s 1352c <pointInFloorPolygon+0x208>

			c = !c;
   13518:	|  |     |   tst.l 24(sp)
   1351c:	|  |     |   seq d0
   1351e:	|  |     |   neg.b d0
   13520:	|  |     |   move.b d0,d0
   13522:	|  |     |   andi.l #255,d0
   13528:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   1352c:	|  |     \-> move.l 32(sp),d0
   13530:	|  |         move.l d0,d1
   13532:	|  |         addq.l #1,d1
   13534:	|  |         move.l d1,32(sp)
   13538:	|  |         move.l d0,28(sp)
   1353c:	|  \-------> movea.l 40(sp),a0
   13540:	|            move.l (a0),d0
   13542:	|            cmp.l 32(sp),d0
   13546:	\----------- bgt.w 13346 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   1354a:	             tst.l 24(sp)
   1354e:	             sne d0
   13550:	             neg.b d0
   13552:	             move.b d0,d0
   13554:	             andi.w #255,d0
}
   13558:	             move.l (sp)+,d2
   1355a:	             move.l (sp)+,d3
   1355c:	             lea 28(sp),sp
   13560:	             rts

00013562 <setFloor>:

BOOL setFloor (int fileNum) {
   13562:	                               lea -132(sp),sp
   13566:	                               move.l a6,-(sp)
   13568:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   1356a:	                               jsr 131ca <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   13570:	                               move.l 144(sp),-(sp)
   13574:	                               jsr 487a <openFileFromNum>
   1357a:	                               addq.l #4,sp
   1357c:	                               tst.l d0
   1357e:	                           /-- bne.s 13586 <setFloor+0x24>
   13580:	                           |   clr.w d0
   13582:	/--------------------------|-- bra.w 13cd2 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   13586:	|                          \-> movea.l 1925a <currentFloor>,a0
   1358c:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   13590:	|                              move.l 190e2 <bigDataFile>,118(sp)
   13598:	|                              move.l 19102 <DOSBase>,d0
   1359e:	|                              movea.l d0,a6
   135a0:	|                              move.l 118(sp),d1
   135a4:	|                              jsr -306(a6)
   135a8:	|                              move.l d0,114(sp)
   135ac:	|                              move.l 114(sp),d0
   135b0:	|                              movea.l 1925a <currentFloor>,a0
   135b6:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   135ba:	|                              movea.l 1925a <currentFloor>,a0
   135c0:	|                              move.l 8(a0),d0
   135c4:	|                              lsl.l #3,d0
   135c6:	|                              move.l d0,110(sp)
   135ca:	|                              clr.l 106(sp)
   135ce:	|                              move.l 190fa <SysBase>,d0
   135d4:	|                              movea.l d0,a6
   135d6:	|                              move.l 110(sp),d0
   135da:	|                              move.l 106(sp),d1
   135de:	|                              jsr -684(a6)
   135e2:	|                              move.l d0,102(sp)
   135e6:	|                              move.l 102(sp),d0
   135ea:	|                              movea.l 1925a <currentFloor>,a0
   135f0:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   135f4:	|                              movea.l 1925a <currentFloor>,a0
   135fa:	|                              move.l 12(a0),d0
   135fe:	|                          /-- bne.s 13614 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   13600:	|                          |   pea 16886 <custom.c.64ca0e9f+0x1bb0>
   13606:	|                          |   jsr 13db8 <KPrintF>
   1360c:	|                          |   addq.l #4,sp
		return FALSE;
   1360e:	|                          |   clr.w d0
   13610:	+--------------------------|-- bra.w 13cd2 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13614:	|                          \-> clr.l 136(sp)
   13618:	|                    /-------- bra.w 13730 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   1361c:	|                 /--|-------> move.l 190e2 <bigDataFile>,26(sp)
   13624:	|                 |  |         move.l 19102 <DOSBase>,d0
   1362a:	|                 |  |         movea.l d0,a6
   1362c:	|                 |  |         move.l 26(sp),d1
   13630:	|                 |  |         jsr -306(a6)
   13634:	|                 |  |         move.l d0,22(sp)
   13638:	|                 |  |         move.l 22(sp),d1
   1363c:	|                 |  |         movea.l 1925a <currentFloor>,a0
   13642:	|                 |  |         movea.l 12(a0),a0
   13646:	|                 |  |         move.l 136(sp),d0
   1364a:	|                 |  |         lsl.l #3,d0
   1364c:	|                 |  |         adda.l d0,a0
   1364e:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   13650:	|                 |  |         movea.l 1925a <currentFloor>,a0
   13656:	|                 |  |         move.l 12(a0),d1
   1365a:	|                 |  |         move.l 136(sp),d0
   1365e:	|                 |  |         lsl.l #3,d0
   13660:	|                 |  |         movea.l d1,a0
   13662:	|                 |  |         adda.l d0,a0
   13664:	|                 |  |         move.l (a0),d0
   13666:	|                 |  |         add.l d0,d0
   13668:	|                 |  |         add.l d0,d0
   1366a:	|                 |  |         move.l d0,18(sp)
   1366e:	|                 |  |         clr.l 14(sp)
   13672:	|                 |  |         move.l 190fa <SysBase>,d0
   13678:	|                 |  |         movea.l d0,a6
   1367a:	|                 |  |         move.l 18(sp),d0
   1367e:	|                 |  |         move.l 14(sp),d1
   13682:	|                 |  |         jsr -684(a6)
   13686:	|                 |  |         move.l d0,10(sp)
   1368a:	|                 |  |         move.l 10(sp),d1
   1368e:	|                 |  |         movea.l 1925a <currentFloor>,a0
   13694:	|                 |  |         movea.l 12(a0),a0
   13698:	|                 |  |         move.l 136(sp),d0
   1369c:	|                 |  |         lsl.l #3,d0
   1369e:	|                 |  |         adda.l d0,a0
   136a0:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   136a4:	|                 |  |         movea.l 1925a <currentFloor>,a0
   136aa:	|                 |  |         move.l 12(a0),d1
   136ae:	|                 |  |         move.l 136(sp),d0
   136b2:	|                 |  |         lsl.l #3,d0
   136b4:	|                 |  |         movea.l d1,a0
   136b6:	|                 |  |         adda.l d0,a0
   136b8:	|                 |  |         move.l 4(a0),d0
   136bc:	|                 |  |     /-- bne.s 136d2 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   136be:	|                 |  |     |   pea 16886 <custom.c.64ca0e9f+0x1bb0>
   136c4:	|                 |  |     |   jsr 13db8 <KPrintF>
   136ca:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   136cc:	|                 |  |     |   clr.w d0
   136ce:	+-----------------|--|-----|-- bra.w 13cd2 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   136d2:	|                 |  |     \-> clr.l 132(sp)
   136d6:	|                 |  |     /-- bra.s 13710 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   136d8:	|                 |  |  /--|-> move.l 190e2 <bigDataFile>,d1
   136de:	|                 |  |  |  |   movea.l 1925a <currentFloor>,a0
   136e4:	|                 |  |  |  |   movea.l 12(a0),a0
   136e8:	|                 |  |  |  |   move.l 136(sp),d0
   136ec:	|                 |  |  |  |   lsl.l #3,d0
   136ee:	|                 |  |  |  |   adda.l d0,a0
   136f0:	|                 |  |  |  |   movea.l 4(a0),a0
   136f4:	|                 |  |  |  |   move.l 132(sp),d0
   136f8:	|                 |  |  |  |   add.l d0,d0
   136fa:	|                 |  |  |  |   add.l d0,d0
   136fc:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   13700:	|                 |  |  |  |   move.l d1,-(sp)
   13702:	|                 |  |  |  |   jsr 6bc <get2bytes>
   13708:	|                 |  |  |  |   addq.l #4,sp
   1370a:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1370c:	|                 |  |  |  |   addq.l #1,132(sp)
   13710:	|                 |  |  |  \-> movea.l 1925a <currentFloor>,a0
   13716:	|                 |  |  |      move.l 12(a0),d1
   1371a:	|                 |  |  |      move.l 136(sp),d0
   1371e:	|                 |  |  |      lsl.l #3,d0
   13720:	|                 |  |  |      movea.l d1,a0
   13722:	|                 |  |  |      adda.l d0,a0
   13724:	|                 |  |  |      move.l (a0),d0
   13726:	|                 |  |  |      cmp.l 132(sp),d0
   1372a:	|                 |  |  \----- bgt.s 136d8 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1372c:	|                 |  |         addq.l #1,136(sp)
   13730:	|                 |  \-------> movea.l 1925a <currentFloor>,a0
   13736:	|                 |            move.l 8(a0),d0
   1373a:	|                 |            cmp.l 136(sp),d0
   1373e:	|                 \----------- bgt.w 1361c <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   13742:	|                              move.l 190e2 <bigDataFile>,d0
   13748:	|                              move.l d0,-(sp)
   1374a:	|                              jsr 6bc <get2bytes>
   13750:	|                              addq.l #4,sp
   13752:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   13756:	|                              move.l 136(sp),d0
   1375a:	|                              lsl.l #3,d0
   1375c:	|                              move.l d0,98(sp)
   13760:	|                              clr.l 94(sp)
   13764:	|                              move.l 190fa <SysBase>,d0
   1376a:	|                              movea.l d0,a6
   1376c:	|                              move.l 98(sp),d0
   13770:	|                              move.l 94(sp),d1
   13774:	|                              jsr -684(a6)
   13778:	|                              move.l d0,90(sp)
   1377c:	|                              move.l 90(sp),d0
   13780:	|                              movea.l 1925a <currentFloor>,a0
   13786:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   1378a:	|                              movea.l 1925a <currentFloor>,a0
   13790:	|                              move.l 4(a0),d0
   13794:	|                          /-- bne.s 137aa <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   13796:	|                          |   pea 16886 <custom.c.64ca0e9f+0x1bb0>
   1379c:	|                          |   jsr 13db8 <KPrintF>
   137a2:	|                          |   addq.l #4,sp
		return FALSE;
   137a4:	|                          |   clr.w d0
   137a6:	+--------------------------|-- bra.w 13cd2 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   137aa:	|                          \-> clr.l 132(sp)
   137ae:	|                          /-- bra.s 13802 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   137b0:	|                       /--|-> move.l 190e2 <bigDataFile>,d1
   137b6:	|                       |  |   movea.l 1925a <currentFloor>,a0
   137bc:	|                       |  |   movea.l 4(a0),a0
   137c0:	|                       |  |   move.l 132(sp),d0
   137c4:	|                       |  |   lsl.l #3,d0
   137c6:	|                       |  |   lea (0,a0,d0.l),a2
   137ca:	|                       |  |   move.l d1,-(sp)
   137cc:	|                       |  |   jsr 6bc <get2bytes>
   137d2:	|                       |  |   addq.l #4,sp
   137d4:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   137d6:	|                       |  |   move.l 190e2 <bigDataFile>,d1
   137dc:	|                       |  |   movea.l 1925a <currentFloor>,a0
   137e2:	|                       |  |   movea.l 4(a0),a0
   137e6:	|                       |  |   move.l 132(sp),d0
   137ea:	|                       |  |   lsl.l #3,d0
   137ec:	|                       |  |   lea (0,a0,d0.l),a2
   137f0:	|                       |  |   move.l d1,-(sp)
   137f2:	|                       |  |   jsr 6bc <get2bytes>
   137f8:	|                       |  |   addq.l #4,sp
   137fa:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   137fe:	|                       |  |   addq.l #1,132(sp)
   13802:	|                       |  \-> move.l 132(sp),d0
   13806:	|                       |      cmp.l 136(sp),d0
   1380a:	|                       \----- blt.s 137b0 <setFloor+0x24e>
	}

	finishAccess ();
   1380c:	|                              jsr 4772 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   13812:	|                              movea.l 1925a <currentFloor>,a0
   13818:	|                              move.l 8(a0),d0
   1381c:	|                              add.l d0,d0
   1381e:	|                              add.l d0,d0
   13820:	|                              move.l d0,86(sp)
   13824:	|                              clr.l 82(sp)
   13828:	|                              move.l 190fa <SysBase>,d0
   1382e:	|                              movea.l d0,a6
   13830:	|                              move.l 86(sp),d0
   13834:	|                              move.l 82(sp),d1
   13838:	|                              jsr -684(a6)
   1383c:	|                              move.l d0,78(sp)
   13840:	|                              move.l 78(sp),d0
   13844:	|                              movea.l 1925a <currentFloor>,a0
   1384a:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   1384e:	|                              movea.l 1925a <currentFloor>,a0
   13854:	|                              move.l 8(a0),d0
   13858:	|                              add.l d0,d0
   1385a:	|                              add.l d0,d0
   1385c:	|                              move.l d0,74(sp)
   13860:	|                              clr.l 70(sp)
   13864:	|                              move.l 190fa <SysBase>,d0
   1386a:	|                              movea.l d0,a6
   1386c:	|                              move.l 74(sp),d0
   13870:	|                              move.l 70(sp),d1
   13874:	|                              jsr -684(a6)
   13878:	|                              move.l d0,66(sp)
   1387c:	|                              move.l 66(sp),d0
   13880:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   13884:	|                              movea.l 1925a <currentFloor>,a0
   1388a:	|                              move.l 16(a0),d0
   1388e:	|                          /-- bne.s 138a4 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   13890:	|                          |   pea 16886 <custom.c.64ca0e9f+0x1bb0>
   13896:	|                          |   jsr 13db8 <KPrintF>
   1389c:	|                          |   addq.l #4,sp
		return FALSE;
   1389e:	|                          |   clr.w d0
   138a0:	+--------------------------|-- bra.w 13cd2 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   138a4:	|                          \-> clr.l 136(sp)
   138a8:	|                    /-------- bra.w 139cc <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   138ac:	|                 /--|-------> movea.l 1925a <currentFloor>,a0
   138b2:	|                 |  |         move.l 8(a0),d0
   138b6:	|                 |  |         add.l d0,d0
   138b8:	|                 |  |         add.l d0,d0
   138ba:	|                 |  |         move.l d0,50(sp)
   138be:	|                 |  |         clr.l 46(sp)
   138c2:	|                 |  |         move.l 190fa <SysBase>,d0
   138c8:	|                 |  |         movea.l d0,a6
   138ca:	|                 |  |         move.l 50(sp),d0
   138ce:	|                 |  |         move.l 46(sp),d1
   138d2:	|                 |  |         jsr -684(a6)
   138d6:	|                 |  |         move.l d0,42(sp)
   138da:	|                 |  |         move.l 42(sp),d0
   138de:	|                 |  |         movea.l 1925a <currentFloor>,a0
   138e4:	|                 |  |         movea.l 16(a0),a0
   138e8:	|                 |  |         move.l 136(sp),d1
   138ec:	|                 |  |         add.l d1,d1
   138ee:	|                 |  |         add.l d1,d1
   138f0:	|                 |  |         adda.l d1,a0
   138f2:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   138f4:	|                 |  |         movea.l 1925a <currentFloor>,a0
   138fa:	|                 |  |         move.l 8(a0),d0
   138fe:	|                 |  |         add.l d0,d0
   13900:	|                 |  |         add.l d0,d0
   13902:	|                 |  |         move.l d0,38(sp)
   13906:	|                 |  |         clr.l 34(sp)
   1390a:	|                 |  |         move.l 190fa <SysBase>,d0
   13910:	|                 |  |         movea.l d0,a6
   13912:	|                 |  |         move.l 38(sp),d0
   13916:	|                 |  |         move.l 34(sp),d1
   1391a:	|                 |  |         jsr -684(a6)
   1391e:	|                 |  |         move.l d0,30(sp)
   13922:	|                 |  |         move.l 30(sp),d1
   13926:	|                 |  |         move.l 136(sp),d0
   1392a:	|                 |  |         add.l d0,d0
   1392c:	|                 |  |         add.l d0,d0
   1392e:	|                 |  |         movea.l 62(sp),a0
   13932:	|                 |  |         adda.l d0,a0
   13934:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   13936:	|                 |  |         movea.l 1925a <currentFloor>,a0
   1393c:	|                 |  |         move.l 16(a0),d1
   13940:	|                 |  |         move.l 136(sp),d0
   13944:	|                 |  |         add.l d0,d0
   13946:	|                 |  |         add.l d0,d0
   13948:	|                 |  |         movea.l d1,a0
   1394a:	|                 |  |         adda.l d0,a0
   1394c:	|                 |  |         move.l (a0),d0
   1394e:	|                 |  |     /-- bne.s 13964 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   13950:	|                 |  |     |   pea 16886 <custom.c.64ca0e9f+0x1bb0>
   13956:	|                 |  |     |   jsr 13db8 <KPrintF>
   1395c:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1395e:	|                 |  |     |   clr.w d0
   13960:	+-----------------|--|-----|-- bra.w 13cd2 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13964:	|                 |  |     \-> clr.l 132(sp)
   13968:	|                 |  |     /-- bra.s 139b8 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   1396a:	|                 |  |  /--|-> movea.l 1925a <currentFloor>,a0
   13970:	|                 |  |  |  |   move.l 16(a0),d1
   13974:	|                 |  |  |  |   move.l 136(sp),d0
   13978:	|                 |  |  |  |   add.l d0,d0
   1397a:	|                 |  |  |  |   add.l d0,d0
   1397c:	|                 |  |  |  |   movea.l d1,a0
   1397e:	|                 |  |  |  |   adda.l d0,a0
   13980:	|                 |  |  |  |   move.l (a0),d1
   13982:	|                 |  |  |  |   move.l 132(sp),d0
   13986:	|                 |  |  |  |   add.l d0,d0
   13988:	|                 |  |  |  |   add.l d0,d0
   1398a:	|                 |  |  |  |   movea.l d1,a0
   1398c:	|                 |  |  |  |   adda.l d0,a0
   1398e:	|                 |  |  |  |   moveq #-1,d1
   13990:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   13992:	|                 |  |  |  |   move.l 136(sp),d0
   13996:	|                 |  |  |  |   add.l d0,d0
   13998:	|                 |  |  |  |   add.l d0,d0
   1399a:	|                 |  |  |  |   movea.l 62(sp),a0
   1399e:	|                 |  |  |  |   adda.l d0,a0
   139a0:	|                 |  |  |  |   move.l (a0),d1
   139a2:	|                 |  |  |  |   move.l 132(sp),d0
   139a6:	|                 |  |  |  |   add.l d0,d0
   139a8:	|                 |  |  |  |   add.l d0,d0
   139aa:	|                 |  |  |  |   movea.l d1,a0
   139ac:	|                 |  |  |  |   adda.l d0,a0
   139ae:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   139b4:	|                 |  |  |  |   addq.l #1,132(sp)
   139b8:	|                 |  |  |  \-> movea.l 1925a <currentFloor>,a0
   139be:	|                 |  |  |      move.l 8(a0),d0
   139c2:	|                 |  |  |      cmp.l 132(sp),d0
   139c6:	|                 |  |  \----- bgt.s 1396a <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   139c8:	|                 |  |         addq.l #1,136(sp)
   139cc:	|                 |  \-------> movea.l 1925a <currentFloor>,a0
   139d2:	|                 |            move.l 8(a0),d0
   139d6:	|                 |            cmp.l 136(sp),d0
   139da:	|                 \----------- bgt.w 138ac <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   139de:	|                              clr.l 136(sp)
   139e2:	|              /-------------- bra.w 13ae8 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   139e6:	|           /--|-------------> clr.l 132(sp)
   139ea:	|           |  |     /-------- bra.w 13ad2 <setFloor+0x570>
			if (i != j) {
   139ee:	|           |  |  /--|-------> move.l 136(sp),d0
   139f2:	|           |  |  |  |         cmp.l 132(sp),d0
   139f6:	|           |  |  |  |     /-- beq.w 13a88 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   139fa:	|           |  |  |  |     |   movea.l 1925a <currentFloor>,a0
   13a00:	|           |  |  |  |     |   move.l 12(a0),d1
   13a04:	|           |  |  |  |     |   move.l 132(sp),d0
   13a08:	|           |  |  |  |     |   lsl.l #3,d0
   13a0a:	|           |  |  |  |     |   movea.l d1,a1
   13a0c:	|           |  |  |  |     |   adda.l d0,a1
   13a0e:	|           |  |  |  |     |   movea.l 1925a <currentFloor>,a0
   13a14:	|           |  |  |  |     |   move.l 12(a0),d1
   13a18:	|           |  |  |  |     |   move.l 136(sp),d0
   13a1c:	|           |  |  |  |     |   lsl.l #3,d0
   13a1e:	|           |  |  |  |     |   movea.l d1,a0
   13a20:	|           |  |  |  |     |   adda.l d0,a0
   13a22:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   13a26:	|           |  |  |  |     |   move.l (a1),-(sp)
   13a28:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   13a2c:	|           |  |  |  |     |   move.l (a0),-(sp)
   13a2e:	|           |  |  |  |     |   jsr 132ba <polysShareSide>
   13a34:	|           |  |  |  |     |   lea 16(sp),sp
   13a38:	|           |  |  |  |     |   tst.w d0
   13a3a:	|           |  |  |  |  /--|-- beq.w 13ace <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   13a3e:	|           |  |  |  |  |  |   movea.l 1925a <currentFloor>,a0
   13a44:	|           |  |  |  |  |  |   move.l 16(a0),d1
   13a48:	|           |  |  |  |  |  |   move.l 136(sp),d0
   13a4c:	|           |  |  |  |  |  |   add.l d0,d0
   13a4e:	|           |  |  |  |  |  |   add.l d0,d0
   13a50:	|           |  |  |  |  |  |   movea.l d1,a0
   13a52:	|           |  |  |  |  |  |   adda.l d0,a0
   13a54:	|           |  |  |  |  |  |   move.l (a0),d1
   13a56:	|           |  |  |  |  |  |   move.l 132(sp),d0
   13a5a:	|           |  |  |  |  |  |   add.l d0,d0
   13a5c:	|           |  |  |  |  |  |   add.l d0,d0
   13a5e:	|           |  |  |  |  |  |   movea.l d1,a0
   13a60:	|           |  |  |  |  |  |   adda.l d0,a0
   13a62:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   13a66:	|           |  |  |  |  |  |   move.l 136(sp),d0
   13a6a:	|           |  |  |  |  |  |   add.l d0,d0
   13a6c:	|           |  |  |  |  |  |   add.l d0,d0
   13a6e:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   13a72:	|           |  |  |  |  |  |   adda.l d0,a0
   13a74:	|           |  |  |  |  |  |   move.l (a0),d1
   13a76:	|           |  |  |  |  |  |   move.l 132(sp),d0
   13a7a:	|           |  |  |  |  |  |   add.l d0,d0
   13a7c:	|           |  |  |  |  |  |   add.l d0,d0
   13a7e:	|           |  |  |  |  |  |   movea.l d1,a0
   13a80:	|           |  |  |  |  |  |   adda.l d0,a0
   13a82:	|           |  |  |  |  |  |   moveq #1,d1
   13a84:	|           |  |  |  |  |  |   move.l d1,(a0)
   13a86:	|           |  |  |  |  +--|-- bra.s 13ace <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   13a88:	|           |  |  |  |  |  \-> movea.l 1925a <currentFloor>,a0
   13a8e:	|           |  |  |  |  |      move.l 16(a0),d1
   13a92:	|           |  |  |  |  |      move.l 136(sp),d0
   13a96:	|           |  |  |  |  |      add.l d0,d0
   13a98:	|           |  |  |  |  |      add.l d0,d0
   13a9a:	|           |  |  |  |  |      movea.l d1,a0
   13a9c:	|           |  |  |  |  |      adda.l d0,a0
   13a9e:	|           |  |  |  |  |      move.l (a0),d1
   13aa0:	|           |  |  |  |  |      move.l 132(sp),d0
   13aa4:	|           |  |  |  |  |      add.l d0,d0
   13aa6:	|           |  |  |  |  |      add.l d0,d0
   13aa8:	|           |  |  |  |  |      movea.l d1,a0
   13aaa:	|           |  |  |  |  |      adda.l d0,a0
   13aac:	|           |  |  |  |  |      moveq #-2,d0
   13aae:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   13ab0:	|           |  |  |  |  |      move.l 136(sp),d0
   13ab4:	|           |  |  |  |  |      add.l d0,d0
   13ab6:	|           |  |  |  |  |      add.l d0,d0
   13ab8:	|           |  |  |  |  |      movea.l 62(sp),a0
   13abc:	|           |  |  |  |  |      adda.l d0,a0
   13abe:	|           |  |  |  |  |      move.l (a0),d1
   13ac0:	|           |  |  |  |  |      move.l 132(sp),d0
   13ac4:	|           |  |  |  |  |      add.l d0,d0
   13ac6:	|           |  |  |  |  |      add.l d0,d0
   13ac8:	|           |  |  |  |  |      movea.l d1,a0
   13aca:	|           |  |  |  |  |      adda.l d0,a0
   13acc:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13ace:	|           |  |  |  |  \----> addq.l #1,132(sp)
   13ad2:	|           |  |  |  \-------> movea.l 1925a <currentFloor>,a0
   13ad8:	|           |  |  |            move.l 8(a0),d0
   13adc:	|           |  |  |            cmp.l 132(sp),d0
   13ae0:	|           |  |  \----------- bgt.w 139ee <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13ae4:	|           |  |               addq.l #1,136(sp)
   13ae8:	|           |  \-------------> movea.l 1925a <currentFloor>,a0
   13aee:	|           |                  move.l 8(a0),d0
   13af2:	|           |                  cmp.l 136(sp),d0
   13af6:	|           \----------------- bgt.w 139e6 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   13afa:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   13afe:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   13b02:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13b06:	|  |                           clr.l 136(sp)
   13b0a:	|  |     /-------------------- bra.w 13c60 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13b0e:	|  |  /--|-------------------> clr.l 132(sp)
   13b12:	|  |  |  |     /-------------- bra.w 13c4a <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   13b16:	|  |  |  |  /--|-------------> movea.l 1925a <currentFloor>,a0
   13b1c:	|  |  |  |  |  |               move.l 16(a0),d1
   13b20:	|  |  |  |  |  |               move.l 136(sp),d0
   13b24:	|  |  |  |  |  |               add.l d0,d0
   13b26:	|  |  |  |  |  |               add.l d0,d0
   13b28:	|  |  |  |  |  |               movea.l d1,a0
   13b2a:	|  |  |  |  |  |               adda.l d0,a0
   13b2c:	|  |  |  |  |  |               move.l (a0),d1
   13b2e:	|  |  |  |  |  |               move.l 132(sp),d0
   13b32:	|  |  |  |  |  |               add.l d0,d0
   13b34:	|  |  |  |  |  |               add.l d0,d0
   13b36:	|  |  |  |  |  |               movea.l d1,a0
   13b38:	|  |  |  |  |  |               adda.l d0,a0
   13b3a:	|  |  |  |  |  |               move.l (a0),d0
   13b3c:	|  |  |  |  |  |               moveq #-1,d1
   13b3e:	|  |  |  |  |  |               cmp.l d0,d1
   13b40:	|  |  |  |  |  |  /----------- bne.w 13c46 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   13b44:	|  |  |  |  |  |  |            clr.l 122(sp)
   13b48:	|  |  |  |  |  |  |     /----- bra.w 13c34 <setFloor+0x6d2>
						if (d != i && d != j) {
   13b4c:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   13b50:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   13b54:	|  |  |  |  |  |  |  |  |  /-- beq.w 13c30 <setFloor+0x6ce>
   13b58:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   13b5c:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   13b60:	|  |  |  |  |  |  |  |  |  +-- beq.w 13c30 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   13b64:	|  |  |  |  |  |  |  |  |  |   movea.l 1925a <currentFloor>,a0
   13b6a:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   13b6e:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   13b72:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13b74:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13b76:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13b78:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13b7a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   13b7c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   13b80:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13b82:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13b84:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13b86:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13b88:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   13b8a:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   13b8e:	|  |  |  |  |  |  |  |  |  +-- bne.w 13c30 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   13b92:	|  |  |  |  |  |  |  |  |  |   movea.l 1925a <currentFloor>,a0
   13b98:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   13b9c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   13ba0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13ba2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13ba4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13ba6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13ba8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   13baa:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   13bae:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bb0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bb2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13bb4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13bb6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   13bb8:	|  |  |  |  |  |  |  |  |  +-- bmi.s 13c30 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   13bba:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   13bbe:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bc0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bc2:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   13bc6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13bc8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   13bca:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   13bce:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bd0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bd2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13bd4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13bd6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   13bd8:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   13bdc:	|  |  |  |  |  |  |  |  |  +-- bgt.s 13c30 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   13bde:	|  |  |  |  |  |  |  |  |  |   movea.l 1925a <currentFloor>,a0
   13be4:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   13be8:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   13bec:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bee:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bf0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13bf2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13bf4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   13bf6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   13bfa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bfc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13bfe:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13c00:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13c02:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   13c06:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   13c0a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13c0c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13c0e:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   13c12:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13c14:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   13c16:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   13c1a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13c1c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   13c1e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   13c20:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   13c22:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   13c26:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   13c28:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   13c2a:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   13c30:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   13c34:	|  |  |  |  |  |  |  |  \----> movea.l 1925a <currentFloor>,a0
   13c3a:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   13c3e:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   13c42:	|  |  |  |  |  |  |  \-------- bgt.w 13b4c <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   13c46:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   13c4a:	|  |  |  |  |  \-------------> movea.l 1925a <currentFloor>,a0
   13c50:	|  |  |  |  |                  move.l 8(a0),d0
   13c54:	|  |  |  |  |                  cmp.l 132(sp),d0
   13c58:	|  |  |  |  \----------------- bgt.w 13b16 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13c5c:	|  |  |  |                     addq.l #1,136(sp)
   13c60:	|  |  |  \-------------------> movea.l 1925a <currentFloor>,a0
   13c66:	|  |  |                        move.l 8(a0),d0
   13c6a:	|  |  |                        cmp.l 136(sp),d0
   13c6e:	|  |  \----------------------- bgt.w 13b0e <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   13c72:	|  |                           tst.w 130(sp)
   13c76:	|  \-------------------------- bne.w 13afe <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13c7a:	|                              clr.l 136(sp)
   13c7e:	|                          /-- bra.s 13ca6 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   13c80:	|                       /--|-> move.l 136(sp),d0
   13c84:	|                       |  |   add.l d0,d0
   13c86:	|                       |  |   add.l d0,d0
   13c88:	|                       |  |   movea.l 62(sp),a0
   13c8c:	|                       |  |   adda.l d0,a0
   13c8e:	|                       |  |   move.l (a0),54(sp)
   13c92:	|                       |  |   move.l 190fa <SysBase>,d0
   13c98:	|                       |  |   movea.l d0,a6
   13c9a:	|                       |  |   movea.l 54(sp),a1
   13c9e:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   13ca2:	|                       |  |   addq.l #1,136(sp)
   13ca6:	|                       |  \-> movea.l 1925a <currentFloor>,a0
   13cac:	|                       |      move.l 8(a0),d0
   13cb0:	|                       |      cmp.l 136(sp),d0
   13cb4:	|                       \----- bgt.s 13c80 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   13cb6:	|                              move.l 62(sp),58(sp)
   13cbc:	|                              move.l 190fa <SysBase>,d0
   13cc2:	|                              movea.l d0,a6
   13cc4:	|                              movea.l 58(sp),a1
   13cc8:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   13ccc:	|                              clr.l 62(sp)

	return TRUE;
   13cd0:	|                              moveq #1,d0
}
   13cd2:	\----------------------------> movea.l (sp)+,a2
   13cd4:	                               movea.l (sp)+,a6
   13cd6:	                               lea 132(sp),sp
   13cda:	                               rts

00013cdc <setFloorNull>:

void setFloorNull () {
	killFloor ();
   13cdc:	jsr 131ca <killFloor>
	noFloor ();
   13ce2:	jsr 130ee <noFloor>
   13ce8:	nop
   13cea:	rts

00013cec <WaitVbl>:
void WaitVbl() {
   13cec:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   13cee:	   /-> movea.l #14675972,a0
   13cf4:	   |   move.l (a0),d0
   13cf6:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   13cf8:	   |   move.l (sp),d0
   13cfa:	   |   andi.l #130816,d0
   13d00:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   13d02:	   |   move.l (sp),d0
   13d04:	   |   cmpi.l #76800,d0
   13d0a:	   \-- beq.s 13cee <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   13d0c:	/----> movea.l #14675972,a0
   13d12:	|      move.l (a0),d0
   13d14:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   13d18:	|      move.l 4(sp),d0
   13d1c:	|      andi.l #130816,d0
   13d22:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   13d26:	|      move.l 4(sp),d0
   13d2a:	|      cmpi.l #76800,d0
   13d30:	|  /-- beq.s 13d34 <WaitVbl+0x48>
	while (1) {
   13d32:	\--|-- bra.s 13d0c <WaitVbl+0x20>
			break;
   13d34:	   \-> nop
}
   13d36:	       nop
   13d38:	       addq.l #8,sp
   13d3a:	       rts

00013d3c <memset>:
void* memset(void *dest, int val, unsigned long len) {
   13d3c:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   13d3e:	       move.l 8(sp),(sp)
	while(len-- > 0)
   13d42:	   /-- bra.s 13d54 <memset+0x18>
		*ptr++ = val;
   13d44:	/--|-> move.l (sp),d0
   13d46:	|  |   move.l d0,d1
   13d48:	|  |   addq.l #1,d1
   13d4a:	|  |   move.l d1,(sp)
   13d4c:	|  |   move.l 12(sp),d1
   13d50:	|  |   movea.l d0,a0
   13d52:	|  |   move.b d1,(a0)
	while(len-- > 0)
   13d54:	|  \-> move.l 16(sp),d0
   13d58:	|      move.l d0,d1
   13d5a:	|      subq.l #1,d1
   13d5c:	|      move.l d1,16(sp)
   13d60:	|      tst.l d0
   13d62:	\----- bne.s 13d44 <memset+0x8>
	return dest;
   13d64:	       move.l 8(sp),d0
}
   13d68:	       addq.l #4,sp
   13d6a:	       rts

00013d6c <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   13d6c:	       subq.l #8,sp
   13d6e:	       move.l d2,-(sp)
	char *d = (char *)dest;
   13d70:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   13d76:	       move.l 20(sp),4(sp)
	while(len--)
   13d7c:	   /-- bra.s 13d9e <memcpy+0x32>
		*d++ = *s++;
   13d7e:	/--|-> move.l 4(sp),d1
   13d82:	|  |   move.l d1,d0
   13d84:	|  |   addq.l #1,d0
   13d86:	|  |   move.l d0,4(sp)
   13d8a:	|  |   move.l 8(sp),d0
   13d8e:	|  |   move.l d0,d2
   13d90:	|  |   addq.l #1,d2
   13d92:	|  |   move.l d2,8(sp)
   13d96:	|  |   movea.l d1,a0
   13d98:	|  |   move.b (a0),d1
   13d9a:	|  |   movea.l d0,a0
   13d9c:	|  |   move.b d1,(a0)
	while(len--)
   13d9e:	|  \-> move.l 24(sp),d0
   13da2:	|      move.l d0,d1
   13da4:	|      subq.l #1,d1
   13da6:	|      move.l d1,24(sp)
   13daa:	|      tst.l d0
   13dac:	\----- bne.s 13d7e <memcpy+0x12>
	return dest;
   13dae:	       move.l 16(sp),d0
}
   13db2:	       move.l (sp)+,d2
   13db4:	       addq.l #8,sp
   13db6:	       rts

00013db8 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   13db8:	       lea -128(sp),sp
   13dbc:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   13dc0:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xecd0af>,d0
   13dc6:	       cmpi.w #20153,d0
   13dca:	   /-- beq.s 13dee <KPrintF+0x36>
   13dcc:	   |   cmpi.w #-24562,d0
   13dd0:	   +-- beq.s 13dee <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   13dd2:	   |   movea.l 190fa <SysBase>,a6
   13dd8:	   |   movea.l 144(sp),a0
   13ddc:	   |   lea 148(sp),a1
   13de0:	   |   lea 1487e <KPutCharX>,a2
   13de6:	   |   suba.l a3,a3
   13de8:	   |   jsr -522(a6)
}
   13dec:	/--|-- bra.s 13e18 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   13dee:	|  \-> movea.l 190fa <SysBase>,a6
   13df4:	|      movea.l 144(sp),a0
   13df8:	|      lea 148(sp),a1
   13dfc:	|      lea 1488c <PutChar>,a2
   13e02:	|      lea 12(sp),a3
   13e06:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   13e0a:	|      move.l a3,-(sp)
   13e0c:	|      pea 56 <_start+0x56>
   13e10:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xecd0af>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   13e16:	|      addq.l #8,sp
}
   13e18:	\----> movem.l (sp)+,a2-a3/a6
   13e1c:	       lea 128(sp),sp
   13e20:	       rts

00013e22 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   13e22:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   13e24:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   13e2a:	       movea.l (sp),a0
   13e2c:	       move.w (a0),d0
   13e2e:	       cmpi.w #20153,d0
   13e32:	   /-- beq.s 13e3e <debug_cmd+0x1c>
   13e34:	   |   movea.l (sp),a0
   13e36:	   |   move.w (a0),d0
   13e38:	   |   cmpi.w #-24562,d0
   13e3c:	/--|-- bne.s 13e5c <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   13e3e:	|  \-> move.l 20(sp),-(sp)
   13e42:	|      move.l 20(sp),-(sp)
   13e46:	|      move.l 20(sp),-(sp)
   13e4a:	|      move.l 20(sp),-(sp)
   13e4e:	|      pea 58 <_start+0x58>
   13e52:	|      movea.l 20(sp),a0
   13e56:	|      jsr (a0)
   13e58:	|      lea 20(sp),sp
	}
}
   13e5c:	\----> nop
   13e5e:	       addq.l #4,sp
   13e60:	       rts

00013e62 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   13e62:	       move.l d2,-(sp)
	while(*source && --num > 0)
   13e64:	   /-- bra.s 13e86 <my_strncpy+0x24>
		*destination++ = *source++;
   13e66:	/--|-> move.l 12(sp),d1
   13e6a:	|  |   move.l d1,d0
   13e6c:	|  |   addq.l #1,d0
   13e6e:	|  |   move.l d0,12(sp)
   13e72:	|  |   move.l 8(sp),d0
   13e76:	|  |   move.l d0,d2
   13e78:	|  |   addq.l #1,d2
   13e7a:	|  |   move.l d2,8(sp)
   13e7e:	|  |   movea.l d1,a0
   13e80:	|  |   move.b (a0),d1
   13e82:	|  |   movea.l d0,a0
   13e84:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   13e86:	|  \-> movea.l 12(sp),a0
   13e8a:	|      move.b (a0),d0
   13e8c:	|  /-- beq.s 13e94 <my_strncpy+0x32>
   13e8e:	|  |   subq.l #1,16(sp)
   13e92:	\--|-- bne.s 13e66 <my_strncpy+0x4>
	*destination = '\0';
   13e94:	   \-> movea.l 8(sp),a0
   13e98:	       clr.b (a0)
}
   13e9a:	       nop
   13e9c:	       move.l (sp)+,d2
   13e9e:	       rts

00013ea0 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   13ea0:	    lea -60(sp),sp
   13ea4:	    movea.l 72(sp),a1
   13ea8:	    movea.l 76(sp),a0
   13eac:	    move.l 80(sp),d1
   13eb0:	    move.l 84(sp),d0
   13eb4:	    movea.w a1,a1
   13eb6:	    move.w a1,8(sp)
   13eba:	    movea.w a0,a0
   13ebc:	    move.w a0,6(sp)
   13ec0:	    move.w d1,d1
   13ec2:	    move.w d1,4(sp)
   13ec6:	    move.w d0,d0
   13ec8:	    move.w d0,2(sp)
	struct debug_resource resource = {
   13ecc:	    lea 10(sp),a0
   13ed0:	    clr.l (a0)
   13ed2:	    addq.l #4,a0
   13ed4:	    clr.l (a0)
   13ed6:	    addq.l #4,a0
   13ed8:	    clr.l (a0)
   13eda:	    addq.l #4,a0
   13edc:	    clr.l (a0)
   13ede:	    addq.l #4,a0
   13ee0:	    clr.l (a0)
   13ee2:	    addq.l #4,a0
   13ee4:	    clr.l (a0)
   13ee6:	    addq.l #4,a0
   13ee8:	    clr.l (a0)
   13eea:	    addq.l #4,a0
   13eec:	    clr.l (a0)
   13eee:	    addq.l #4,a0
   13ef0:	    clr.l (a0)
   13ef2:	    addq.l #4,a0
   13ef4:	    clr.l (a0)
   13ef6:	    addq.l #4,a0
   13ef8:	    clr.l (a0)
   13efa:	    addq.l #4,a0
   13efc:	    clr.l (a0)
   13efe:	    addq.l #4,a0
   13f00:	    clr.w (a0)
   13f02:	    addq.l #2,a0
		.address = (unsigned int)addr,
   13f04:	    move.l 64(sp),d0
	struct debug_resource resource = {
   13f08:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   13f0c:	    move.w 8(sp),d0
   13f10:	/-- bpl.s 13f14 <debug_register_bitmap+0x74>
   13f12:	|   addq.w #7,d0
   13f14:	\-> asr.w #3,d0
   13f16:	    movea.w d0,a0
   13f18:	    movea.w 6(sp),a1
   13f1c:	    move.l a1,-(sp)
   13f1e:	    move.l a0,-(sp)
   13f20:	    jsr 14776 <__mulsi3>
   13f26:	    addq.l #8,sp
   13f28:	    movea.w 4(sp),a0
   13f2c:	    move.l a0,-(sp)
   13f2e:	    move.l d0,-(sp)
   13f30:	    jsr 14776 <__mulsi3>
   13f36:	    addq.l #8,sp
	struct debug_resource resource = {
   13f38:	    move.l d0,14(sp)
   13f3c:	    move.w 2(sp),52(sp)
   13f42:	    move.w 8(sp),54(sp)
   13f48:	    move.w 6(sp),56(sp)
   13f4e:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   13f54:	    moveq #0,d0
   13f56:	    move.w 2(sp),d0
   13f5a:	    moveq #2,d1
   13f5c:	    and.l d1,d0
   13f5e:	/-- beq.s 13f6a <debug_register_bitmap+0xca>
		resource.size *= 2;
   13f60:	|   move.l 14(sp),d0
   13f64:	|   add.l d0,d0
   13f66:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   13f6a:	\-> pea 20 <_start+0x20>
   13f6e:	    move.l 72(sp),-(sp)
   13f72:	    lea 18(sp),a0
   13f76:	    move.l a0,d0
   13f78:	    addq.l #8,d0
   13f7a:	    move.l d0,-(sp)
   13f7c:	    jsr 13e62 <my_strncpy>
   13f82:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   13f86:	    lea 10(sp),a0
   13f8a:	    clr.l -(sp)
   13f8c:	    clr.l -(sp)
   13f8e:	    move.l a0,-(sp)
   13f90:	    pea 4 <_start+0x4>
   13f94:	    jsr 13e22 <debug_cmd>
   13f9a:	    lea 16(sp),sp
}
   13f9e:	    nop
   13fa0:	    lea 60(sp),sp
   13fa4:	    rts

00013fa6 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   13fa6:	lea -12(sp),sp
   13faa:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   13fac:	move.l 20(sp),12(sp)
   13fb2:	move.l 24(sp),8(sp)
   13fb8:	move.l 1910a <MathIeeeSingBasBase>,d0
   13fbe:	movea.l d0,a6
   13fc0:	move.l 12(sp),d0
   13fc4:	move.l 8(sp),d1
   13fc8:	jsr -66(a6)
   13fcc:	move.l d0,4(sp)
   13fd0:	move.l 4(sp),d0
}
   13fd4:	movea.l (sp)+,a6
   13fd6:	lea 12(sp),sp
   13fda:	rts

00013fdc <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   13fdc:	lea -32(sp),sp
   13fe0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   13fe4:	move.l 48(sp),36(sp)
   13fea:	move.l 52(sp),40(sp)
   13ff0:	move.l 56(sp),28(sp)
   13ff6:	move.l 60(sp),32(sp)
   13ffc:	move.l 19112 <MathIeeeDoubBasBase>,d0
   14002:	movea.l d0,a6
   14004:	move.l 36(sp),d0
   14008:	move.l 40(sp),d1
   1400c:	move.l 28(sp),d2
   14010:	move.l 32(sp),d3
   14014:	jsr -66(a6)
   14018:	move.l d0,12(sp)
   1401c:	move.l d1,16(sp)
   14020:	move.l 12(sp),20(sp)
   14026:	move.l 16(sp),24(sp)
   1402c:	move.l 20(sp),d0
   14030:	move.l 24(sp),d1
}
   14034:	movem.l (sp)+,d2-d3/a6
   14038:	lea 32(sp),sp
   1403c:	rts

0001403e <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   1403e:	lea -32(sp),sp
   14042:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   14046:	move.l 48(sp),36(sp)
   1404c:	move.l 52(sp),40(sp)
   14052:	move.l 56(sp),28(sp)
   14058:	move.l 60(sp),32(sp)
   1405e:	move.l 19112 <MathIeeeDoubBasBase>,d0
   14064:	movea.l d0,a6
   14066:	move.l 36(sp),d0
   1406a:	move.l 40(sp),d1
   1406e:	move.l 28(sp),d2
   14072:	move.l 32(sp),d3
   14076:	jsr -84(a6)
   1407a:	move.l d0,12(sp)
   1407e:	move.l d1,16(sp)
   14082:	move.l 12(sp),20(sp)
   14088:	move.l 16(sp),24(sp)
   1408e:	move.l 20(sp),d0
   14092:	move.l 24(sp),d1
}
   14096:	movem.l (sp)+,d2-d3/a6
   1409a:	lea 32(sp),sp
   1409e:	rts

000140a0 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   140a0:	lea -12(sp),sp
   140a4:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   140a6:	move.l 20(sp),12(sp)
   140ac:	move.l 24(sp),8(sp)
   140b2:	move.l 1910a <MathIeeeSingBasBase>,d0
   140b8:	movea.l d0,a6
   140ba:	move.l 12(sp),d0
   140be:	move.l 8(sp),d1
   140c2:	jsr -84(a6)
   140c6:	move.l d0,4(sp)
   140ca:	move.l 4(sp),d0
}
   140ce:	movea.l (sp)+,a6
   140d0:	lea 12(sp),sp
   140d4:	rts

000140d6 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   140d6:	lea -12(sp),sp
   140da:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   140dc:	move.l 20(sp),12(sp)
   140e2:	move.l 24(sp),8(sp)
   140e8:	move.l 1910a <MathIeeeSingBasBase>,d0
   140ee:	movea.l d0,a6
   140f0:	move.l 12(sp),d0
   140f4:	move.l 8(sp),d1
   140f8:	jsr -42(a6)
   140fc:	move.l d0,4(sp)
   14100:	move.l 4(sp),d0
}
   14104:	movea.l (sp)+,a6
   14106:	lea 12(sp),sp
   1410a:	rts

0001410c <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   1410c:	lea -20(sp),sp
   14110:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   14112:	move.l 28(sp),20(sp)
   14118:	move.l 19116 <MathIeeeDoubTransBase>,d0
   1411e:	movea.l d0,a6
   14120:	move.l 20(sp),d0
   14124:	jsr -108(a6)
   14128:	move.l d0,4(sp)
   1412c:	move.l d1,8(sp)
   14130:	move.l 4(sp),12(sp)
   14136:	move.l 8(sp),16(sp)
   1413c:	move.l 12(sp),d0
   14140:	move.l 16(sp),d1
}
   14144:	movea.l (sp)+,a6
   14146:	lea 20(sp),sp
   1414a:	rts

0001414c <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   1414c:	lea -12(sp),sp
   14150:	move.l a6,-(sp)
	return IEEEDPFix(value);
   14152:	move.l 20(sp),8(sp)
   14158:	move.l 24(sp),12(sp)
   1415e:	move.l 19112 <MathIeeeDoubBasBase>,d0
   14164:	movea.l d0,a6
   14166:	move.l 8(sp),d0
   1416a:	move.l 12(sp),d1
   1416e:	jsr -30(a6)
   14172:	move.l d0,4(sp)
   14176:	move.l 4(sp),d0
   1417a:	move.l d0,-(sp)
   1417c:	jsr 141b4 <__floatsidf>
   14182:	addq.l #4,sp
}
   14184:	movea.l (sp)+,a6
   14186:	lea 12(sp),sp
   1418a:	rts

0001418c <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   1418c:	subq.l #8,sp
   1418e:	move.l a6,-(sp)
	return IEEESPFix(value);
   14190:	move.l 16(sp),8(sp)
   14196:	move.l 1910a <MathIeeeSingBasBase>,d0
   1419c:	movea.l d0,a6
   1419e:	move.l 8(sp),d0
   141a2:	jsr -30(a6)
   141a6:	move.l d0,4(sp)
   141aa:	move.l 4(sp),d0
}
   141ae:	movea.l (sp)+,a6
   141b0:	addq.l #8,sp
   141b2:	rts

000141b4 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   141b4:	lea -20(sp),sp
   141b8:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   141ba:	move.l 28(sp),20(sp)
   141c0:	move.l 19112 <MathIeeeDoubBasBase>,d0
   141c6:	movea.l d0,a6
   141c8:	move.l 20(sp),d0
   141cc:	jsr -36(a6)
   141d0:	move.l d0,4(sp)
   141d4:	move.l d1,8(sp)
   141d8:	move.l 4(sp),12(sp)
   141de:	move.l 8(sp),16(sp)
   141e4:	move.l 12(sp),d0
   141e8:	move.l 16(sp),d1
}
   141ec:	movea.l (sp)+,a6
   141ee:	lea 20(sp),sp
   141f2:	rts

000141f4 <__floatsisf>:

FLOAT __floatsisf(int i) {
   141f4:	subq.l #8,sp
   141f6:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   141f8:	move.l 16(sp),8(sp)
   141fe:	move.l 1910a <MathIeeeSingBasBase>,d0
   14204:	movea.l d0,a6
   14206:	move.l 8(sp),d0
   1420a:	jsr -36(a6)
   1420e:	move.l d0,4(sp)
   14212:	move.l 4(sp),d0
}
   14216:	movea.l (sp)+,a6
   14218:	addq.l #8,sp
   1421a:	rts

0001421c <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   1421c:	subq.l #8,sp
   1421e:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   14220:	move.l 16(sp),8(sp)
   14226:	move.l 1910a <MathIeeeSingBasBase>,d0
   1422c:	movea.l d0,a6
   1422e:	move.l 8(sp),d0
   14232:	jsr -36(a6)
   14236:	move.l d0,4(sp)
   1423a:	move.l 4(sp),d0
}
   1423e:	movea.l (sp)+,a6
   14240:	addq.l #8,sp
   14242:	rts

00014244 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   14244:	lea -32(sp),sp
   14248:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   1424c:	move.l 48(sp),36(sp)
   14252:	move.l 52(sp),40(sp)
   14258:	move.l 56(sp),28(sp)
   1425e:	move.l 60(sp),32(sp)
   14264:	move.l 19112 <MathIeeeDoubBasBase>,d0
   1426a:	movea.l d0,a6
   1426c:	move.l 36(sp),d0
   14270:	move.l 40(sp),d1
   14274:	move.l 28(sp),d2
   14278:	move.l 32(sp),d3
   1427c:	jsr -78(a6)
   14280:	move.l d0,12(sp)
   14284:	move.l d1,16(sp)
   14288:	move.l 12(sp),20(sp)
   1428e:	move.l 16(sp),24(sp)
   14294:	move.l 20(sp),d0
   14298:	move.l 24(sp),d1
}
   1429c:	movem.l (sp)+,d2-d3/a6
   142a0:	lea 32(sp),sp
   142a4:	rts

000142a6 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   142a6:	lea -12(sp),sp
   142aa:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   142ac:	move.l 20(sp),12(sp)
   142b2:	move.l 24(sp),8(sp)
   142b8:	move.l 1910a <MathIeeeSingBasBase>,d0
   142be:	movea.l d0,a6
   142c0:	move.l 12(sp),d0
   142c4:	move.l 8(sp),d1
   142c8:	jsr -78(a6)
   142cc:	move.l d0,4(sp)
   142d0:	move.l 4(sp),d0
}
   142d4:	movea.l (sp)+,a6
   142d6:	lea 12(sp),sp
   142da:	rts

000142dc <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   142dc:	lea -12(sp),sp
   142e0:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   142e2:	move.l 20(sp),12(sp)
   142e8:	move.l 24(sp),8(sp)
   142ee:	move.l 1910a <MathIeeeSingBasBase>,d0
   142f4:	movea.l d0,a6
   142f6:	move.l 12(sp),d0
   142fa:	move.l 8(sp),d1
   142fe:	jsr -42(a6)
   14302:	move.l d0,4(sp)
   14306:	move.l 4(sp),d0
}
   1430a:	movea.l (sp)+,a6
   1430c:	lea 12(sp),sp
   14310:	rts

00014312 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   14312:	lea -20(sp),sp
   14316:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1431a:	move.l 36(sp),24(sp)
   14320:	move.l 40(sp),28(sp)
   14326:	move.l 44(sp),16(sp)
   1432c:	move.l 48(sp),20(sp)
   14332:	move.l 19112 <MathIeeeDoubBasBase>,d0
   14338:	movea.l d0,a6
   1433a:	move.l 24(sp),d0
   1433e:	move.l 28(sp),d1
   14342:	move.l 16(sp),d2
   14346:	move.l 20(sp),d3
   1434a:	jsr -42(a6)
   1434e:	move.l d0,12(sp)
   14352:	move.l 12(sp),d0
}
   14356:	movem.l (sp)+,d2-d3/a6
   1435a:	lea 20(sp),sp
   1435e:	rts

00014360 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   14360:	lea -12(sp),sp
   14364:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   14366:	move.l 20(sp),12(sp)
   1436c:	move.l 24(sp),8(sp)
   14372:	move.l 1910a <MathIeeeSingBasBase>,d0
   14378:	movea.l d0,a6
   1437a:	move.l 12(sp),d0
   1437e:	move.l 8(sp),d1
   14382:	jsr -42(a6)
   14386:	move.l d0,4(sp)
   1438a:	move.l 4(sp),d0
}
   1438e:	movea.l (sp)+,a6
   14390:	lea 12(sp),sp
   14394:	rts

00014396 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   14396:	lea -12(sp),sp
   1439a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1439c:	move.l 20(sp),12(sp)
   143a2:	move.l 24(sp),8(sp)
   143a8:	move.l 1910a <MathIeeeSingBasBase>,d0
   143ae:	movea.l d0,a6
   143b0:	move.l 12(sp),d0
   143b4:	move.l 8(sp),d1
   143b8:	jsr -42(a6)
   143bc:	move.l d0,4(sp)
   143c0:	move.l 4(sp),d0
}
   143c4:	movea.l (sp)+,a6
   143c6:	lea 12(sp),sp
   143ca:	rts

000143cc <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   143cc:	lea -20(sp),sp
   143d0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   143d4:	move.l 36(sp),24(sp)
   143da:	move.l 40(sp),28(sp)
   143e0:	move.l 44(sp),16(sp)
   143e6:	move.l 48(sp),20(sp)
   143ec:	move.l 19112 <MathIeeeDoubBasBase>,d0
   143f2:	movea.l d0,a6
   143f4:	move.l 24(sp),d0
   143f8:	move.l 28(sp),d1
   143fc:	move.l 16(sp),d2
   14400:	move.l 20(sp),d3
   14404:	jsr -42(a6)
   14408:	move.l d0,12(sp)
   1440c:	move.l 12(sp),d0
}
   14410:	movem.l (sp)+,d2-d3/a6
   14414:	lea 20(sp),sp
   14418:	rts

0001441a <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   1441a:	lea -12(sp),sp
   1441e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   14420:	move.l 20(sp),12(sp)
   14426:	move.l 24(sp),8(sp)
   1442c:	move.l 1910a <MathIeeeSingBasBase>,d0
   14432:	movea.l d0,a6
   14434:	move.l 12(sp),d0
   14438:	move.l 8(sp),d1
   1443c:	jsr -42(a6)
   14440:	move.l d0,4(sp)
   14444:	move.l 4(sp),d0
}
   14448:	movea.l (sp)+,a6
   1444a:	lea 12(sp),sp
   1444e:	rts

00014450 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   14450:	lea -12(sp),sp
   14454:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   14456:	move.l 20(sp),12(sp)
   1445c:	move.l 24(sp),8(sp)
   14462:	move.l 1910a <MathIeeeSingBasBase>,d0
   14468:	movea.l d0,a6
   1446a:	move.l 12(sp),d0
   1446e:	move.l 8(sp),d1
   14472:	jsr -42(a6)
   14476:	move.l d0,4(sp)
   1447a:	move.l 4(sp),d0
}
   1447e:	movea.l (sp)+,a6
   14480:	lea 12(sp),sp
   14484:	rts

00014486 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   14486:	lea -32(sp),sp
   1448a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   1448e:	move.l 48(sp),36(sp)
   14494:	move.l 52(sp),40(sp)
   1449a:	move.l 56(sp),28(sp)
   144a0:	move.l 60(sp),32(sp)
   144a6:	move.l 19112 <MathIeeeDoubBasBase>,d0
   144ac:	movea.l d0,a6
   144ae:	move.l 36(sp),d0
   144b2:	move.l 40(sp),d1
   144b6:	move.l 28(sp),d2
   144ba:	move.l 32(sp),d3
   144be:	jsr -72(a6)
   144c2:	move.l d0,12(sp)
   144c6:	move.l d1,16(sp)
   144ca:	move.l 12(sp),20(sp)
   144d0:	move.l 16(sp),24(sp)
   144d6:	move.l 20(sp),d0
   144da:	move.l 24(sp),d1
}
   144de:	movem.l (sp)+,d2-d3/a6
   144e2:	lea 32(sp),sp
   144e6:	rts

000144e8 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   144e8:	lea -12(sp),sp
   144ec:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   144ee:	move.l 20(sp),12(sp)
   144f4:	move.l 24(sp),8(sp)
   144fa:	move.l 1910a <MathIeeeSingBasBase>,d0
   14500:	movea.l d0,a6
   14502:	move.l 12(sp),d0
   14506:	move.l 8(sp),d1
   1450a:	jsr -72(a6)
   1450e:	move.l d0,4(sp)
   14512:	move.l 4(sp),d0
}
   14516:	movea.l (sp)+,a6
   14518:	lea 12(sp),sp
   1451c:	rts

0001451e <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   1451e:	lea -12(sp),sp
   14522:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   14524:	move.l 20(sp),8(sp)
   1452a:	move.l 24(sp),12(sp)
   14530:	move.l 19116 <MathIeeeDoubTransBase>,d0
   14536:	movea.l d0,a6
   14538:	move.l 8(sp),d0
   1453c:	move.l 12(sp),d1
   14540:	jsr -102(a6)
   14544:	move.l d0,4(sp)
   14548:	move.l 4(sp),d0
}
   1454c:	movea.l (sp)+,a6
   1454e:	lea 12(sp),sp
   14552:	rts

00014554 <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   14554:	subq.l #8,sp
   14556:	move.l a6,-(sp)
	return IEEESPFix(a);
   14558:	move.l 16(sp),8(sp)
   1455e:	move.l 1910a <MathIeeeSingBasBase>,d0
   14564:	movea.l d0,a6
   14566:	move.l 8(sp),d0
   1456a:	jsr -30(a6)
   1456e:	move.l d0,4(sp)
   14572:	move.l 4(sp),d0
}
   14576:	movea.l (sp)+,a6
   14578:	addq.l #8,sp
   1457a:	rts

0001457c <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   1457c:	       lea -24(sp),sp
   14580:	       move.l a6,-(sp)
    if (x > 0) {
   14582:	       clr.l -(sp)
   14584:	       move.l 40(sp),-(sp)
   14588:	       jsr 14360 <__gtsf2>
   1458e:	       addq.l #8,sp
   14590:	       tst.l d0
   14592:	   /-- ble.s 145c4 <atan2f+0x48>
        return IEEESPAtan(y / x);
   14594:	   |   move.l 36(sp),-(sp)
   14598:	   |   move.l 36(sp),-(sp)
   1459c:	   |   jsr 140a0 <__divsf3>
   145a2:	   |   addq.l #8,sp
   145a4:	   |   move.l d0,8(sp)
   145a8:	   |   move.l 1910e <MathIeeeSingTransBase>,d0
   145ae:	   |   movea.l d0,a6
   145b0:	   |   move.l 8(sp),d0
   145b4:	   |   jsr -30(a6)
   145b8:	   |   move.l d0,4(sp)
   145bc:	   |   move.l 4(sp),d0
   145c0:	/--|-- bra.w 14724 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   145c4:	|  \-> clr.l -(sp)
   145c6:	|      move.l 40(sp),-(sp)
   145ca:	|      jsr 1441a <__ltsf2>
   145d0:	|      addq.l #8,sp
   145d2:	|      tst.l d0
   145d4:	|  /-- bge.s 14648 <atan2f+0xcc>
   145d6:	|  |   clr.l -(sp)
   145d8:	|  |   move.l 36(sp),-(sp)
   145dc:	|  |   jsr 142dc <__gesf2>
   145e2:	|  |   addq.l #8,sp
   145e4:	|  |   tst.l d0
   145e6:	|  +-- blt.s 14648 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   145e8:	|  |   move.l 36(sp),-(sp)
   145ec:	|  |   move.l 36(sp),-(sp)
   145f0:	|  |   jsr 140a0 <__divsf3>
   145f6:	|  |   addq.l #8,sp
   145f8:	|  |   move.l d0,24(sp)
   145fc:	|  |   move.l 1910e <MathIeeeSingTransBase>,d0
   14602:	|  |   movea.l d0,a6
   14604:	|  |   move.l 24(sp),d0
   14608:	|  |   jsr -30(a6)
   1460c:	|  |   move.l d0,20(sp)
   14610:	|  |   move.l 20(sp),d0
   14614:	|  |   move.l d0,-(sp)
   14616:	|  |   jsr 1410c <__extendsfdf2>
   1461c:	|  |   addq.l #4,sp
   1461e:	|  |   move.l #1413754136,-(sp)
   14624:	|  |   move.l #1074340347,-(sp)
   1462a:	|  |   move.l d1,-(sp)
   1462c:	|  |   move.l d0,-(sp)
   1462e:	|  |   jsr 13fdc <__adddf3>
   14634:	|  |   lea 16(sp),sp
   14638:	|  |   move.l d1,-(sp)
   1463a:	|  |   move.l d0,-(sp)
   1463c:	|  |   jsr 1451e <__truncdfsf2>
   14642:	|  |   addq.l #8,sp
   14644:	+--|-- bra.w 14724 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   14648:	|  \-> clr.l -(sp)
   1464a:	|      move.l 40(sp),-(sp)
   1464e:	|      jsr 1441a <__ltsf2>
   14654:	|      addq.l #8,sp
   14656:	|      tst.l d0
   14658:	|  /-- bge.s 146ca <atan2f+0x14e>
   1465a:	|  |   clr.l -(sp)
   1465c:	|  |   move.l 36(sp),-(sp)
   14660:	|  |   jsr 1441a <__ltsf2>
   14666:	|  |   addq.l #8,sp
   14668:	|  |   tst.l d0
   1466a:	|  +-- bge.s 146ca <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   1466c:	|  |   move.l 36(sp),-(sp)
   14670:	|  |   move.l 36(sp),-(sp)
   14674:	|  |   jsr 140a0 <__divsf3>
   1467a:	|  |   addq.l #8,sp
   1467c:	|  |   move.l d0,16(sp)
   14680:	|  |   move.l 1910e <MathIeeeSingTransBase>,d0
   14686:	|  |   movea.l d0,a6
   14688:	|  |   move.l 16(sp),d0
   1468c:	|  |   jsr -30(a6)
   14690:	|  |   move.l d0,12(sp)
   14694:	|  |   move.l 12(sp),d0
   14698:	|  |   move.l d0,-(sp)
   1469a:	|  |   jsr 1410c <__extendsfdf2>
   146a0:	|  |   addq.l #4,sp
   146a2:	|  |   move.l #1413754136,-(sp)
   146a8:	|  |   move.l #1074340347,-(sp)
   146ae:	|  |   move.l d1,-(sp)
   146b0:	|  |   move.l d0,-(sp)
   146b2:	|  |   jsr 14486 <__subdf3>
   146b8:	|  |   lea 16(sp),sp
   146bc:	|  |   move.l d1,-(sp)
   146be:	|  |   move.l d0,-(sp)
   146c0:	|  |   jsr 1451e <__truncdfsf2>
   146c6:	|  |   addq.l #8,sp
   146c8:	+--|-- bra.s 14724 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   146ca:	|  \-> clr.l -(sp)
   146cc:	|      move.l 40(sp),-(sp)
   146d0:	|      jsr 140d6 <__eqsf2>
   146d6:	|      addq.l #8,sp
   146d8:	|      tst.l d0
   146da:	|  /-- bne.s 146f6 <atan2f+0x17a>
   146dc:	|  |   clr.l -(sp)
   146de:	|  |   move.l 36(sp),-(sp)
   146e2:	|  |   jsr 14360 <__gtsf2>
   146e8:	|  |   addq.l #8,sp
   146ea:	|  |   tst.l d0
   146ec:	|  +-- ble.s 146f6 <atan2f+0x17a>
        return PI / 2;
   146ee:	|  |   move.l #1070141403,d0
   146f4:	+--|-- bra.s 14724 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   146f6:	|  \-> clr.l -(sp)
   146f8:	|      move.l 40(sp),-(sp)
   146fc:	|      jsr 140d6 <__eqsf2>
   14702:	|      addq.l #8,sp
   14704:	|      tst.l d0
   14706:	|  /-- bne.s 14722 <atan2f+0x1a6>
   14708:	|  |   clr.l -(sp)
   1470a:	|  |   move.l 36(sp),-(sp)
   1470e:	|  |   jsr 1441a <__ltsf2>
   14714:	|  |   addq.l #8,sp
   14716:	|  |   tst.l d0
   14718:	|  +-- bge.s 14722 <atan2f+0x1a6>
        return -PI / 2;
   1471a:	|  |   move.l #-1077342245,d0
   14720:	+--|-- bra.s 14724 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   14722:	|  \-> moveq #0,d0
    }
}
   14724:	\----> movea.l (sp)+,a6
   14726:	       lea 24(sp),sp
   1472a:	       rts

0001472c <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   1472c:	lea -24(sp),sp
   14730:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   14732:	move.l 32(sp),20(sp)
   14738:	move.l 36(sp),24(sp)
   1473e:	move.l 19116 <MathIeeeDoubTransBase>,d0
   14744:	movea.l d0,a6
   14746:	move.l 20(sp),d0
   1474a:	move.l 24(sp),d1
   1474e:	jsr -96(a6)
   14752:	move.l d0,4(sp)
   14756:	move.l d1,8(sp)
   1475a:	move.l 4(sp),12(sp)
   14760:	move.l 8(sp),16(sp)
   14766:	move.l 12(sp),d0
   1476a:	move.l 16(sp),d1
}
   1476e:	movea.l (sp)+,a6
   14770:	lea 24(sp),sp
   14774:	rts

00014776 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   14776:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   1477a:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1477e:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   14782:	mulu.w 8(sp),d1
	addw	d1, d0
   14786:	add.w d1,d0
	swap	d0
   14788:	swap d0
	clrw	d0
   1478a:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1478c:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   14790:	mulu.w 10(sp),d1
	addl	d1, d0
   14794:	add.l d1,d0
	rts
   14796:	rts

00014798 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   14798:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   1479a:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   1479e:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   147a2:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   147a8:	   /-- bcc.s 147c0 <__udivsi3+0x28>
	movel	d0, d2
   147aa:	   |   move.l d0,d2
	clrw	d2
   147ac:	   |   clr.w d2
	swap	d2
   147ae:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   147b0:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   147b2:	   |   move.w d2,d0
	swap	d0
   147b4:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   147b6:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   147ba:	   |   divu.w d1,d2
	movew	d2, d0
   147bc:	   |   move.w d2,d0
	jra	6f
   147be:	/--|-- bra.s 147f0 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   147c0:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   147c2:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   147c4:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   147c6:	|  |   cmpi.l #65536,d1
	jcc	4b
   147cc:	|  \-- bcc.s 147c2 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   147ce:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   147d0:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   147d6:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   147d8:	|      mulu.w d0,d1
	swap	d2
   147da:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   147dc:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   147de:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   147e0:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   147e2:	|  /-- bne.s 147ee <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   147e4:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   147e6:	|  +-- bcs.s 147ee <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   147e8:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   147ec:	+--|-- bls.s 147f0 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   147ee:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   147f0:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   147f2:	       rts

000147f4 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   147f4:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   147f6:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   147f8:	    move.l 12(sp),d1
	jpl	1f
   147fc:	/-- bpl.s 14802 <__divsi3+0xe>
	negl	d1
   147fe:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   14800:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   14802:	\-> move.l 8(sp),d0
	jpl	2f
   14806:	/-- bpl.s 1480c <__divsi3+0x18>
	negl	d0
   14808:	|   neg.l d0
	negb	d2
   1480a:	|   neg.b d2

2:	movel	d1, sp@-
   1480c:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1480e:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   14810:	    jsr 14798 <__udivsi3>
	addql	#8, sp
   14816:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   14818:	    tst.b d2
	jpl	3f
   1481a:	/-- bpl.s 1481e <__divsi3+0x2a>
	negl	d0
   1481c:	|   neg.l d0

3:	movel	sp@+, d2
   1481e:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   14820:	    rts

00014822 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   14822:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   14826:	move.l 4(sp),d0
	movel	d1, sp@-
   1482a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1482c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   1482e:	jsr 147f4 <__divsi3>
	addql	#8, sp
   14834:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   14836:	move.l 8(sp),d1
	movel	d1, sp@-
   1483a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1483c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1483e:	jsr 14776 <__mulsi3>
	addql	#8, sp
   14844:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   14846:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1484a:	sub.l d0,d1
	movel	d1, d0
   1484c:	move.l d1,d0
	rts
   1484e:	rts

00014850 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   14850:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   14854:	move.l 4(sp),d0
	movel	d1, sp@-
   14858:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1485a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   1485c:	jsr 14798 <__udivsi3>
	addql	#8, sp
   14862:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   14864:	move.l 8(sp),d1
	movel	d1, sp@-
   14868:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1486a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1486c:	jsr 14776 <__mulsi3>
	addql	#8, sp
   14872:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   14874:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   14878:	sub.l d0,d1
	movel	d1, d0
   1487a:	move.l d1,d0
	rts
   1487c:	rts

0001487e <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   1487e:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   14880:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   14884:	jsr -516(a6)
    move.l (sp)+, a6
   14888:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   1488a:	rts

0001488c <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   1488c:	move.b d0,(a3)+
	rts
   1488e:	rts
