
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #106496,d0
       8:	       subi.l #106496,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1a000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #106496,d0
      40:	       subi.l #106496,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1a000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 6e8a <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #106496,d0
      7e:	       subi.l #106496,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1a000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13382 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1a7a4 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 1339a <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1a000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13382 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1a7a4 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1a000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13382 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1a7a4 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 1736c <PutChar+0x4>
     35c:	|  |              |   jsr 16894 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1a7ac <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1a7ac <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1a7ac <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1a7ac <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1a7ac <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1a7ac <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1a7ac <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17396 <PutChar+0x2e>
     834:	|   jsr 16894 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1a7ac <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 173b2 <PutChar+0x4a>
     8a6:	|   jsr 16894 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1a7ac <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1a7ac <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1a7ac <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1a7ac <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1a7ac <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1a7ac <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1a7ac <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1a7ac <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1a7a4 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1a7ac <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13382 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1a7ac <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1a6aa <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1a764 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1a760 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1a6aa <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 906c <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1a6ae <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1a6b2 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 25c4 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 173da <PutChar+0x72>
     e1a:	          jsr 16894 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1a6c6 <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 173f3 <PutChar+0x8b>
     e30:	      |   jsr 16894 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1a6c0 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1a7b0 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1a6c6 <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17421 <PutChar+0xb9>
     ef0:	|         jsr 16894 <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1a7b0 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17441 <PutChar+0xd9>
     f3c:	|         jsr 16894 <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1a6f8 <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1a6fc <winHeight>,d0
     f6e:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17461 <PutChar+0xf9>
     fbe:	|         jsr 16894 <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1a7a4 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17476 <PutChar+0x10e>
    1010:	   |   jsr 16894 <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1a7ac <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1a6f4 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #106498,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #106562,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #106610,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #106650,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1a6ec <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 174b1 <PutChar+0x149>
    11c6:	                jsr 16894 <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1a6e4 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1a6d8 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1a7b0 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1a6f8 <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1a6f8 <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1a6f8 <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 17252 <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1a6c6 <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1a6f8 <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 17252 <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1a6d8 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1a6fc <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 17252 <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1a6fc <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 17252 <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1a7b0 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1a6f0 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1a6ec <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1a6f4 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1a6f4 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1a6d2 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1a6d2 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1a6d2 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    14e8:	    lea -20(sp),sp
    14ec:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    14ee:	    move.l 1a6d8 <CstDrawBuffer>,d0
    14f4:	/-- beq.s 150e <CstFreeBuffer+0x26>
    14f6:	|   move.l 1a6d8 <CstDrawBuffer>,20(sp)
    14fe:	|   move.l 1a7a4 <SysBase>,d0
    1504:	|   movea.l d0,a6
    1506:	|   movea.l 20(sp),a1
    150a:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    150e:	\-> move.l 1a6d4 <CstViewBuffer>,d0
    1514:	/-- beq.s 152e <CstFreeBuffer+0x46>
    1516:	|   move.l 1a6d4 <CstViewBuffer>,16(sp)
    151e:	|   move.l 1a7a4 <SysBase>,d0
    1524:	|   movea.l d0,a6
    1526:	|   movea.l 16(sp),a1
    152a:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    152e:	\-> move.l 1a6ce <CstCopperList>,d0
    1534:	/-- beq.s 154e <CstFreeBuffer+0x66>
    1536:	|   move.l 1a6ce <CstCopperList>,12(sp)
    153e:	|   move.l 1a7a4 <SysBase>,d0
    1544:	|   movea.l d0,a6
    1546:	|   movea.l 12(sp),a1
    154a:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    154e:	\-> move.l 1a6c6 <CstBackDrop>,d0
    1554:	/-- beq.s 156e <CstFreeBuffer+0x86>
    1556:	|   move.l 1a6c6 <CstBackDrop>,8(sp)
    155e:	|   move.l 1a7a4 <SysBase>,d0
    1564:	|   movea.l d0,a6
    1566:	|   movea.l 8(sp),a1
    156a:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    156e:	\-> move.l 1a6ca <CstBackDropBackup>,d0
    1574:	/-- beq.s 158e <CstFreeBuffer+0xa6>
    1576:	|   move.l 1a6ca <CstBackDropBackup>,4(sp)
    157e:	|   move.l 1a7a4 <SysBase>,d0
    1584:	|   movea.l d0,a6
    1586:	|   movea.l 4(sp),a1
    158a:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    158e:	\-> clr.l 1a6d8 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1594:	    clr.l 1a6d4 <CstViewBuffer>
  CstCopperList = NULL;
    159a:	    clr.l 1a6ce <CstCopperList>
  CstBackDrop = NULL;
    15a0:	    clr.l 1a6c6 <CstBackDrop>

}
    15a6:	    nop
    15a8:	    movea.l (sp)+,a6
    15aa:	    lea 20(sp),sp
    15ae:	    rts

000015b0 <CstFreeze>:



void CstFreeze( ) {
    15b0:	       lea -36(sp),sp
    15b4:	       move.l a6,-(sp)
    15b6:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    15b8:	       pea 174cd <PutChar+0x165>
    15be:	       jsr 16894 <KPrintF>
    15c4:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    15c6:	       move.l 1a6f8 <winWidth>,d0
    15cc:	       lsr.l #3,d0
    15ce:	       move.l d0,d1
    15d0:	       move.l 1a6fc <winHeight>,d0
    15d6:	       move.l d0,d0
    15d8:	       muls.w d0,d1
    15da:	       move.w d1,d0
    15dc:	       add.w d0,d0
    15de:	       add.w d0,d0
    15e0:	       move.w d0,d2
    15e2:	       add.w d1,d2
    15e4:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    15e8:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    15f0:	       moveq #0,d0
    15f2:	       move.w 26(sp),d0
    15f6:	       move.l d0,18(sp)
    15fa:	       clr.l 14(sp)
    15fe:	       move.l 1a7a4 <SysBase>,d0
    1604:	       movea.l d0,a6
    1606:	       move.l 18(sp),d0
    160a:	       move.l 14(sp),d1
    160e:	       jsr -684(a6)
    1612:	       move.l d0,10(sp)
    1616:	       move.l 10(sp),d0
    161a:	       move.l d0,1a6ca <CstBackDropBackup>
  if( !CstBackDropBackup)
    1620:	       move.l 1a6ca <CstBackDropBackup>,d0
    1626:	   /-- bne.s 1636 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1628:	   |   pea 174f4 <PutChar+0x18c>
    162e:	   |   jsr 16894 <KPrintF>
    1634:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1636:	   \-> move.l 1a6fc <winHeight>,d0
    163c:	       move.l d0,d0
    163e:	       movea.w d0,a1
    1640:	       move.l 1a6f8 <winWidth>,d0
    1646:	       move.l d0,d0
    1648:	       movea.w d0,a0
    164a:	       move.l 1a6ca <CstBackDropBackup>,d0
    1650:	       clr.l -(sp)
    1652:	       pea 5 <_start+0x5>
    1656:	       move.l a1,-(sp)
    1658:	       move.l a0,-(sp)
    165a:	       pea 1752c <PutChar+0x1c4>
    1660:	       move.l d0,-(sp)
    1662:	       jsr 1697c <debug_register_bitmap>
    1668:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    166c:	       move.l 1a6c6 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1674:	       move.l 1a6ca <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    167c:	       clr.l 32(sp)
    1680:	   /-- bra.s 16a6 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1682:	/--|-> move.l 40(sp),d1
    1686:	|  |   move.l d1,d0
    1688:	|  |   addq.l #4,d0
    168a:	|  |   move.l d0,40(sp)
    168e:	|  |   move.l 36(sp),d0
    1692:	|  |   move.l d0,d2
    1694:	|  |   addq.l #4,d2
    1696:	|  |   move.l d2,36(sp)
    169a:	|  |   movea.l d1,a0
    169c:	|  |   move.l (a0),d1
    169e:	|  |   movea.l d0,a0
    16a0:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    16a2:	|  |   addq.l #1,32(sp)
    16a6:	|  \-> move.w 26(sp),d0
    16aa:	|      lsr.w #2,d0
    16ac:	|      move.w d0,d0
    16ae:	|      andi.l #65535,d0
    16b4:	|      cmp.l 32(sp),d0
    16b8:	\----- bgt.s 1682 <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    16ba:	       move.l 1a6d4 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    16c2:	       move.l 1a6c6 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    16ca:	       clr.l 28(sp)
    16ce:	   /-- bra.s 16f4 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    16d0:	/--|-> move.l 40(sp),d1
    16d4:	|  |   move.l d1,d0
    16d6:	|  |   addq.l #4,d0
    16d8:	|  |   move.l d0,40(sp)
    16dc:	|  |   move.l 36(sp),d0
    16e0:	|  |   move.l d0,d2
    16e2:	|  |   addq.l #4,d2
    16e4:	|  |   move.l d2,36(sp)
    16e8:	|  |   movea.l d1,a0
    16ea:	|  |   move.l (a0),d1
    16ec:	|  |   movea.l d0,a0
    16ee:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    16f0:	|  |   addq.l #1,28(sp)
    16f4:	|  \-> move.w 26(sp),d0
    16f8:	|      lsr.w #2,d0
    16fa:	|      move.w d0,d0
    16fc:	|      andi.l #65535,d0
    1702:	|      cmp.l 28(sp),d0
    1706:	\----- bgt.s 16d0 <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1708:	       move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1710:	       move.l 1a6f8 <winWidth>,d0
    1716:	       lsr.l #4,d0
    1718:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    171e:	       move.l a0,d1
    1720:	       addq.l #2,d1
    1722:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1728:	       move.l d0,d0
    172a:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    172c:	       move.l 1a6fc <winHeight>,d0
    1732:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1738:	       move.l a0,d1
    173a:	       addq.l #2,d1
    173c:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1742:	       move.l d0,d0
    1744:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1746:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    174c:	       move.l a0,d0
    174e:	       addq.l #2,d0
    1750:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1756:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1758:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    175e:	       move.l a0,d0
    1760:	       addq.l #2,d0
    1762:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1768:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    176a:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1770:	       move.l a0,d0
    1772:	       addq.l #2,d0
    1774:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    177a:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    177c:	       pea 1753b <PutChar+0x1d3>
    1782:	       jsr 16894 <KPrintF>
    1788:	       addq.l #4,sp

}  
    178a:	       nop
    178c:	       move.l (sp)+,d2
    178e:	       movea.l (sp)+,a6
    1790:	       lea 36(sp),sp
    1794:	       rts

00001796 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1796:	             lea -144(sp),sp
    179a:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    179e:	             pea 1754f <PutChar+0x1e7>
    17a4:	             jsr 16894 <KPrintF>
    17aa:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    17ac:	             move.l 164(sp),-(sp)
    17b0:	             jsr 6bc <get2bytes>
    17b6:	             addq.l #4,sp
    17b8:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    17bc:	             move.l 164(sp),-(sp)
    17c0:	             jsr 6bc <get2bytes>
    17c6:	             addq.l #4,sp
    17c8:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    17cc:	             move.w 134(sp),d0
    17d0:	             lsr.w #3,d0
    17d2:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    17d6:	             move.w 130(sp),d0
    17da:	             lsr.w #1,d0
    17dc:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    17e0:	             move.l 1a6f8 <winWidth>,d0
    17e6:	             lsr.l #3,d0
    17e8:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    17ec:	             move.w 130(sp),d0
    17f0:	             muls.w 132(sp),d0
    17f4:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    17f8:	             move.w 124(sp),d1
    17fc:	             move.w d1,d0
    17fe:	             add.w d0,d0
    1800:	             add.w d0,d0
    1802:	             move.w d0,d2
    1804:	             add.w d1,d2
    1806:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    180a:	             move.w 1a6c0 <CstPaletteLoaded>,d0
    1810:	/----------- bne.w 18aa <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1814:	|            move.w #384,120(sp)

    if(CstPalette) {
    181a:	|            move.l 1a6f0 <CstPalette>,d0
    1820:	|        /-- beq.s 183a <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1822:	|        |   move.l 1a6f0 <CstPalette>,116(sp)
    182a:	|        |   move.l 1a7a4 <SysBase>,d0
    1830:	|        |   movea.l d0,a6
    1832:	|        |   movea.l 116(sp),a1
    1836:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    183a:	|        \-> moveq #64,d0
    183c:	|            move.l d0,112(sp)
    1840:	|            clr.l 108(sp)
    1844:	|            move.l 1a7a4 <SysBase>,d0
    184a:	|            movea.l d0,a6
    184c:	|            move.l 112(sp),d0
    1850:	|            move.l 108(sp),d1
    1854:	|            jsr -684(a6)
    1858:	|            move.l d0,104(sp)
    185c:	|            move.l 104(sp),d0
    1860:	|            move.l d0,1a6f0 <CstPalette>
    CstPaletteLoaded = 1;
    1866:	|            move.w #1,1a6c0 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    186e:	|            move.l 1a6f0 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1876:	|            clr.l 152(sp)
    187a:	|        /-- bra.s 18a0 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    187c:	|     /--|-> move.l 164(sp),-(sp)
    1880:	|     |  |   jsr 6bc <get2bytes>
    1886:	|     |  |   addq.l #4,sp
    1888:	|     |  |   move.l d0,d1
    188a:	|     |  |   move.l 156(sp),d0
    188e:	|     |  |   move.l d0,d2
    1890:	|     |  |   addq.l #2,d2
    1892:	|     |  |   move.l d2,156(sp)
    1896:	|     |  |   move.l d1,d1
    1898:	|     |  |   movea.l d0,a0
    189a:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    189c:	|     |  |   addq.l #1,152(sp)
    18a0:	|     |  \-> moveq #31,d0
    18a2:	|     |      cmp.l 152(sp),d0
    18a6:	|     \----- bge.s 187c <CstLoadBackdrop+0xe6>
    18a8:	|  /-------- bra.s 18c8 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    18aa:	\--|-------> clr.l 148(sp)
    18ae:	   |     /-- bra.s 18c0 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    18b0:	   |  /--|-> move.l 164(sp),-(sp)
    18b4:	   |  |  |   jsr 6bc <get2bytes>
    18ba:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    18bc:	   |  |  |   addq.l #1,148(sp)
    18c0:	   |  |  \-> moveq #31,d2
    18c2:	   |  |      cmp.l 148(sp),d2
    18c6:	   |  \----- bge.s 18b0 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    18c8:	   \-------> moveq #0,d0
    18ca:	             move.w 122(sp),d0
    18ce:	             move.l d0,100(sp)
    18d2:	             moveq #2,d0
    18d4:	             move.l d0,96(sp)
    18d8:	             move.l 1a7a4 <SysBase>,d0
    18de:	             movea.l d0,a6
    18e0:	             move.l 100(sp),d0
    18e4:	             move.l 96(sp),d1
    18e8:	             jsr -684(a6)
    18ec:	             move.l d0,92(sp)
    18f0:	             move.l 92(sp),d0
    18f4:	             move.l d0,88(sp)
  if( !tmpbuffer)
    18f8:	         /-- bne.s 1908 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    18fa:	         |   pea 1757e <PutChar+0x216>
    1900:	         |   jsr 16894 <KPrintF>
    1906:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1908:	         \-> moveq #0,d0
    190a:	             move.w 124(sp),d0
    190e:	             move.l d0,84(sp)
    1912:	             moveq #2,d2
    1914:	             move.l d2,80(sp)
    1918:	             move.l 1a7a4 <SysBase>,d0
    191e:	             movea.l d0,a6
    1920:	             move.l 84(sp),d0
    1924:	             move.l 80(sp),d1
    1928:	             jsr -684(a6)
    192c:	             move.l d0,76(sp)
    1930:	             move.l 76(sp),d0
    1934:	             move.l d0,72(sp)
  if( !tmpmask)
    1938:	         /-- bne.s 1948 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    193a:	         |   pea 175b4 <PutChar+0x24c>
    1940:	         |   jsr 16894 <KPrintF>
    1946:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    1948:	         \-> move.w 132(sp),d0
    194c:	             movea.w d0,a1
    194e:	             move.w 134(sp),d0
    1952:	             movea.w d0,a0
    1954:	             clr.l -(sp)
    1956:	             pea 5 <_start+0x5>
    195a:	             move.l a1,-(sp)
    195c:	             move.l a0,-(sp)
    195e:	             pea 175e8 <PutChar+0x280>
    1964:	             move.l 108(sp),-(sp)
    1968:	             jsr 1697c <debug_register_bitmap>
    196e:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    1972:	             move.w 132(sp),d0
    1976:	             movea.w d0,a1
    1978:	             move.w 134(sp),d0
    197c:	             movea.w d0,a0
    197e:	             clr.l -(sp)
    1980:	             pea 1 <_start+0x1>
    1984:	             move.l a1,-(sp)
    1986:	             move.l a0,-(sp)
    1988:	             pea 175f6 <PutChar+0x28e>
    198e:	             move.l 108(sp),-(sp)
    1992:	             jsr 1697c <debug_register_bitmap>
    1998:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    199c:	             move.l 164(sp),68(sp)
    19a2:	             move.l 88(sp),64(sp)
    19a8:	             moveq #2,d0
    19aa:	             move.l d0,60(sp)
    19ae:	             move.w 122(sp),d0
    19b2:	             lsr.w #1,d0
    19b4:	             move.w d0,d0
    19b6:	             andi.l #65535,d0
    19bc:	             move.l d0,56(sp)
    19c0:	             move.l 1a7ac <DOSBase>,d0
    19c6:	             movea.l d0,a6
    19c8:	             move.l 68(sp),d1
    19cc:	             move.l 64(sp),d2
    19d0:	             move.l 60(sp),d3
    19d4:	             move.l 56(sp),d4
    19d8:	             jsr -324(a6)
    19dc:	             move.l d0,52(sp)
    19e0:	             move.l 52(sp),d0
    19e4:	             move.w d0,50(sp)
  if(!count) {
    19e8:	         /-- bne.s 19fc <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    19ea:	         |   pea 17602 <PutChar+0x29a>
    19f0:	         |   jsr 16894 <KPrintF>
    19f6:	         |   addq.l #4,sp
    return;
    19f8:	   /-----|-- bra.w 1c48 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    19fc:	   |     \-> move.l 164(sp),46(sp)
    1a02:	   |         move.l 72(sp),42(sp)
    1a08:	   |         moveq #2,d2
    1a0a:	   |         move.l d2,38(sp)
    1a0e:	   |         move.w 124(sp),d0
    1a12:	   |         lsr.w #1,d0
    1a14:	   |         move.w d0,d0
    1a16:	   |         andi.l #65535,d0
    1a1c:	   |         move.l d0,34(sp)
    1a20:	   |         move.l 1a7ac <DOSBase>,d0
    1a26:	   |         movea.l d0,a6
    1a28:	   |         move.l 46(sp),d1
    1a2c:	   |         move.l 42(sp),d2
    1a30:	   |         move.l 38(sp),d3
    1a34:	   |         move.l 34(sp),d4
    1a38:	   |         jsr -324(a6)
    1a3c:	   |         move.l d0,30(sp)
    1a40:	   |         move.l 30(sp),d0
    1a44:	   |         move.w d0,50(sp)
   

  if(!count) {
    1a48:	   |     /-- bne.s 1a5c <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    1a4a:	   |     |   pea 17602 <PutChar+0x29a>
    1a50:	   |     |   jsr 16894 <KPrintF>
    1a56:	   |     |   addq.l #4,sp
    return;
    1a58:	   +-----|-- bra.w 1c48 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1a5c:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    1a64:	   |         move.l 1a6c6 <CstBackDrop>,d0
    1a6a:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    1a6e:	   |         move.l 172(sp),d0
    1a72:	   |         move.w d0,d1
    1a74:	   |         muls.w 126(sp),d1
    1a78:	   |         move.l 168(sp),d0
    1a7c:	   |     /-- bpl.s 1a80 <CstLoadBackdrop+0x2ea>
    1a7e:	   |     |   addq.l #7,d0
    1a80:	   |     \-> asr.l #3,d0
    1a82:	   |         move.l d0,d0
    1a84:	   |         movea.w d1,a0
    1a86:	   |         adda.w d0,a0
    1a88:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    1a8c:	   |         moveq #0,d0
    1a8e:	   |         move.w 24(sp),d0
    1a92:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    1a96:	   |         pea 1761d <PutChar+0x2b5>
    1a9c:	   |         jsr 16894 <KPrintF>
    1aa2:	   |         addq.l #4,sp


  WaitBlit();
    1aa4:	   |         move.l 1a7b0 <GfxBase>,d0
    1aaa:	   |         movea.l d0,a6
    1aac:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    1ab0:	   |         movea.l 26(sp),a0
    1ab4:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1aba:	   |         movea.l 26(sp),a0
    1abe:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    1ac4:	   |         movea.l 26(sp),a0
    1ac8:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    1ace:	   |         movea.l 26(sp),a0
    1ad2:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    1ad8:	   |         move.w 126(sp),d0
    1adc:	   |         sub.w 130(sp),d0
    1ae0:	   |         movea.l 26(sp),a0
    1ae4:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    1ae8:	   |         move.w 126(sp),d0
    1aec:	   |         sub.w 130(sp),d0
    1af0:	   |         movea.l 26(sp),a0
    1af4:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    1af8:	   |         movea.l 26(sp),a0
    1afc:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    1b02:	   |         movea.l 26(sp),a0
    1b06:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    1b0c:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1b12:	   |         clr.l 136(sp)
    1b16:	   |     /-- bra.s 1b78 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    1b18:	   |  /--|-> movea.l 26(sp),a0
    1b1c:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    1b22:	   |  |  |   move.l 140(sp),d0
    1b26:	   |  |  |   movea.l 26(sp),a0
    1b2a:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    1b2e:	   |  |  |   move.l 144(sp),d0
    1b32:	   |  |  |   movea.l 26(sp),a0
    1b36:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    1b3a:	   |  |  |   move.l 144(sp),d0
    1b3e:	   |  |  |   movea.l 26(sp),a0
    1b42:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    1b46:	   |  |  |   move.w 132(sp),d0
    1b4a:	   |  |  |   lsl.w #6,d0
    1b4c:	   |  |  |   add.w 128(sp),d0
    1b50:	   |  |  |   movea.l 26(sp),a0
    1b54:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    1b58:	   |  |  |   moveq #0,d0
    1b5a:	   |  |  |   move.w 124(sp),d0
    1b5e:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    1b62:	   |  |  |   move.w 1a6c4 <CstBackdropSizePlane>,d0
    1b68:	   |  |  |   move.w d0,d0
    1b6a:	   |  |  |   andi.l #65535,d0
    1b70:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1b74:	   |  |  |   addq.l #1,136(sp)
    1b78:	   |  |  \-> moveq #4,d0
    1b7a:	   |  |      cmp.l 136(sp),d0
    1b7e:	   |  \----- bge.s 1b18 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    1b80:	   |         move.l 1a7b0 <GfxBase>,d0
    1b86:	   |         movea.l d0,a6
    1b88:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    1b8c:	   |         pea 1763c <PutChar+0x2d4>
    1b92:	   |         jsr 16894 <KPrintF>
    1b98:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    1b9a:	   |         move.l 88(sp),20(sp)
    1ba0:	   |         move.l 1a7a4 <SysBase>,d0
    1ba6:	   |         movea.l d0,a6
    1ba8:	   |         movea.l 20(sp),a1
    1bac:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    1bb0:	   |         move.l 72(sp),16(sp)
    1bb6:	   |         move.l 1a7a4 <SysBase>,d0
    1bbc:	   |         movea.l d0,a6
    1bbe:	   |         movea.l 16(sp),a1
    1bc2:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    1bc6:	   |         move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1bce:	   |         move.l 1a6f8 <winWidth>,d0
    1bd4:	   |         lsr.l #4,d0
    1bd6:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1bdc:	   |         move.l a0,d1
    1bde:	   |         addq.l #2,d1
    1be0:	   |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1be6:	   |         move.l d0,d0
    1be8:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1bea:	   |         move.l 1a6fc <winHeight>,d0
    1bf0:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1bf6:	   |         move.l a0,d1
    1bf8:	   |         addq.l #2,d1
    1bfa:	   |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1c00:	   |         move.l d0,d0
    1c02:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1c04:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1c0a:	   |         move.l a0,d0
    1c0c:	   |         addq.l #2,d0
    1c0e:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1c14:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1c16:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1c1c:	   |         move.l a0,d0
    1c1e:	   |         addq.l #2,d0
    1c20:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1c26:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1c28:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1c2e:	   |         move.l a0,d0
    1c30:	   |         addq.l #2,d0
    1c32:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1c38:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    1c3a:	   |         pea 1765c <PutChar+0x2f4>
    1c40:	   |         jsr 16894 <KPrintF>
    1c46:	   |         addq.l #4,sp

}
    1c48:	   \-------> movem.l (sp)+,d2-d4/a6
    1c4c:	             lea 144(sp),sp
    1c50:	             rts

00001c52 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    1c52:	                lea -72(sp),sp
    1c56:	                move.l a6,-(sp)
    1c58:	                move.l d2,-(sp)
    1c5a:	                move.l 88(sp),d1
    1c5e:	                move.l 92(sp),d0
    1c62:	                move.w d1,d1
    1c64:	                move.w d1,10(sp)
    1c68:	                move.w d0,d0
    1c6a:	                move.w d0,8(sp)
  UWORD *destination = 0;
    1c6e:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    1c72:	                move.w #2,1a6d2 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    1c7a:	                move.l 1a6c6 <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    1c82:	                clr.l 56(sp)

  blitwidth = single->width/16;
    1c86:	                movea.l 84(sp),a0
    1c8a:	                move.l (a0),d0
    1c8c:	                movea.l d0,a0
    1c8e:	                cmpa.w #0,a0
    1c92:	            /-- bge.s 1c98 <CstPasteChar+0x46>
    1c94:	            |   lea 15(a0),a0
    1c98:	            \-> move.l a0,d0
    1c9a:	                asr.l #4,d0
    1c9c:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    1ca0:	            /-- bne.s 1ca8 <CstPasteChar+0x56>
    1ca2:	            |   moveq #1,d0
    1ca4:	            |   move.l d0,40(sp)

  if( y < 0) {
    1ca8:	            \-> tst.w 8(sp)
    1cac:	         /----- bge.s 1cf4 <CstPasteChar+0xa2>
    if(y + single->height < 0) {
    1cae:	         |      movea.w 8(sp),a1
    1cb2:	         |      movea.l 84(sp),a0
    1cb6:	         |      move.l 4(a0),d0
    1cba:	         |      add.l a1,d0
    1cbc:	         |  /-- bpl.s 1cd0 <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1cbe:	         |  |   pea 17676 <PutChar+0x30e>
    1cc4:	         |  |   jsr 16894 <KPrintF>
    1cca:	         |  |   addq.l #4,sp
      return;
    1ccc:	/--------|--|-- bra.w 2390 <CstPasteChar+0x73e>
    }
    ystartdst = 0;
    1cd0:	|        |  \-> clr.l 52(sp)
    ystartsrc = y*-1;
    1cd4:	|        |      move.w 8(sp),d0
    1cd8:	|        |      ext.l d0
    1cda:	|        |      neg.l d0
    1cdc:	|        |      move.l d0,48(sp)
    blitheight = single->height+y;
    1ce0:	|        |      movea.l 84(sp),a0
    1ce4:	|        |      move.l 4(a0),d0
    1ce8:	|        |      movea.w 8(sp),a0
    1cec:	|        |      add.l a0,d0
    1cee:	|        |      move.l d0,44(sp)
    1cf2:	|     /--|----- bra.s 1d66 <CstPasteChar+0x114>
  } else if(y+single->height > (int) winHeight) {
    1cf4:	|     |  \----> movea.w 8(sp),a1
    1cf8:	|     |         movea.l 84(sp),a0
    1cfc:	|     |         move.l 4(a0),d0
    1d00:	|     |         move.l a1,d1
    1d02:	|     |         add.l d0,d1
    1d04:	|     |         move.l 1a6fc <winHeight>,d0
    1d0a:	|     |         cmp.l d1,d0
    1d0c:	|     |  /----- bge.s 1d4e <CstPasteChar+0xfc>
    if(y  > (int) winHeight) {
    1d0e:	|     |  |      movea.w 8(sp),a0
    1d12:	|     |  |      move.l 1a6fc <winHeight>,d0
    1d18:	|     |  |      cmp.l a0,d0
    1d1a:	|     |  |  /-- bge.s 1d2e <CstPasteChar+0xdc>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1d1c:	|     |  |  |   pea 17676 <PutChar+0x30e>
    1d22:	|     |  |  |   jsr 16894 <KPrintF>
    1d28:	|     |  |  |   addq.l #4,sp
      return;
    1d2a:	+-----|--|--|-- bra.w 2390 <CstPasteChar+0x73e>
    }
    ystartdst = y;
    1d2e:	|     |  |  \-> movea.w 8(sp),a0
    1d32:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    1d36:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    1d3a:	|     |  |      move.l 1a6fc <winHeight>,d0
    1d40:	|     |  |      movea.w 8(sp),a0
    1d44:	|     |  |      move.l d0,d1
    1d46:	|     |  |      sub.l a0,d1
    1d48:	|     |  |      move.l d1,44(sp)
    1d4c:	|     +--|----- bra.s 1d66 <CstPasteChar+0x114>
  } else {
    ystartdst = y;
    1d4e:	|     |  \----> movea.w 8(sp),a0
    1d52:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    1d56:	|     |         clr.l 48(sp)
    blitheight = single->height;
    1d5a:	|     |         movea.l 84(sp),a0
    1d5e:	|     |         move.l 4(a0),d0
    1d62:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    1d66:	|     \-------> tst.w 10(sp)
    1d6a:	|        /----- bge.w 1edc <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    1d6e:	|        |      movea.w 10(sp),a1
    1d72:	|        |      movea.l 84(sp),a0
    1d76:	|        |      move.l (a0),d0
    1d78:	|        |      add.l a1,d0
    1d7a:	|        |  /-- bpl.s 1d8e <CstPasteChar+0x13c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1d7c:	|        |  |   pea 17676 <PutChar+0x30e>
    1d82:	|        |  |   jsr 16894 <KPrintF>
    1d88:	|        |  |   addq.l #4,sp
      return;
    1d8a:	+--------|--|-- bra.w 2390 <CstPasteChar+0x73e>

    }
    
    extrawords = 1;
    1d8e:	|        |  \-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    1d94:	|        |      move.w 10(sp),d0
    1d98:	|        |  /-- bpl.s 1d9e <CstPasteChar+0x14c>
    1d9a:	|        |  |   addi.w #15,d0
    1d9e:	|        |  \-> asr.w #4,d0
    1da0:	|        |      neg.w d0
    1da2:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    1da6:	|        |      move.w 10(sp),d0
    1daa:	|        |      ext.l d0
    1dac:	|        |      neg.l d0
    1dae:	|        |      andi.l #-2147483633,d0
    1db4:	|        |  /-- bpl.s 1dbe <CstPasteChar+0x16c>
    1db6:	|        |  |   subq.l #1,d0
    1db8:	|        |  |   moveq #-16,d1
    1dba:	|        |  |   or.l d1,d0
    1dbc:	|        |  |   addq.l #1,d0
    1dbe:	|        |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    1dc2:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    1dc6:	|        |      movea.l 84(sp),a0
    1dca:	|        |      move.l 24(a0),d0
    1dce:	|        |      move.l d0,d1
    1dd0:	|        |      moveq #0,d0
    1dd2:	|        |      move.w 76(sp),d0
    1dd6:	|        |      add.l d0,d0
    1dd8:	|        |      move.l d1,d2
    1dda:	|        |      add.l d0,d2
    1ddc:	|        |      movea.l 84(sp),a0
    1de0:	|        |      move.l (a0),d0
    1de2:	|        |      move.l 48(sp),-(sp)
    1de6:	|        |      move.l d0,-(sp)
    1de8:	|        |      jsr 17252 <__mulsi3>
    1dee:	|        |      addq.l #8,sp
    1df0:	|        |      lsr.l #3,d0
    1df2:	|        |      move.l d2,d1
    1df4:	|        |      add.l d0,d1
    1df6:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1dfa:	|        |      move.l 1a6f8 <winWidth>,d0
    1e00:	|        |      move.l 52(sp),-(sp)
    1e04:	|        |      move.l d0,-(sp)
    1e06:	|        |      jsr 17252 <__mulsi3>
    1e0c:	|        |      addq.l #8,sp
    1e0e:	|        |      lsr.l #3,d0
    1e10:	|        |      move.l 28(sp),d1
    1e14:	|        |      add.l d1,d0
    1e16:	|        |      move.l d0,d2
    1e18:	|        |      subq.l #2,d2
    1e1a:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1e1e:	|        |      move.l 1a6f8 <winWidth>,d0
    1e24:	|        |      move.l 52(sp),-(sp)
    1e28:	|        |      move.l d0,-(sp)
    1e2a:	|        |      jsr 17252 <__mulsi3>
    1e30:	|        |      addq.l #8,sp
    1e32:	|        |      lsr.l #3,d0
    1e34:	|        |      move.l 28(sp),d1
    1e38:	|        |      add.l d1,d0
    1e3a:	|        |      move.l d0,d1
    1e3c:	|        |      subq.l #2,d1
    1e3e:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    1e42:	|        |      moveq #0,d0
    1e44:	|        |      move.w 74(sp),d0
    1e48:	|        |      moveq #16,d1
    1e4a:	|        |      sub.l d0,d1
    1e4c:	|        |      move.l d1,d0
    1e4e:	|        |      moveq #12,d2
    1e50:	|        |      lsl.l d2,d0
    1e52:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    1e56:	|        |      movea.l 84(sp),a0
    1e5a:	|        |      move.l (a0),d0
    1e5c:	|        |      movea.l d0,a0
    1e5e:	|        |      cmpa.w #0,a0
    1e62:	|        |  /-- bge.s 1e68 <CstPasteChar+0x216>
    1e64:	|        |  |   lea 15(a0),a0
    1e68:	|        |  \-> move.l a0,d0
    1e6a:	|        |      asr.l #4,d0
    1e6c:	|        |      move.l d0,d0
    1e6e:	|        |      add.w 76(sp),d0
    1e72:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1e78:	|        |      move.l a0,d1
    1e7a:	|        |      addq.l #2,d1
    1e7c:	|        |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1e82:	|        |      add.w 78(sp),d0
    1e86:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    1e88:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1e8e:	|        |      move.l a0,d0
    1e90:	|        |      addq.l #2,d0
    1e92:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1e98:	|        |      move.l 44(sp),d0
    1e9c:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    1e9e:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1ea4:	|        |      move.l a0,d0
    1ea6:	|        |      addq.l #2,d0
    1ea8:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1eae:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    1eb0:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1eb6:	|        |      move.l a0,d0
    1eb8:	|        |      addq.l #2,d0
    1eba:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1ec0:	|        |      move.l 52(sp),d0
    1ec4:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    1ec6:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1ecc:	|        |      move.l a0,d0
    1ece:	|        |      addq.l #2,d0
    1ed0:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1ed6:	|        |      clr.w (a0)
    1ed8:	|     /--|----- bra.w 21f0 <CstPasteChar+0x59e>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    1edc:	|     |  \----> movea.w 10(sp),a1
    1ee0:	|     |         movea.l 84(sp),a0
    1ee4:	|     |         move.l (a0),d0
    1ee6:	|     |         move.l a1,d1
    1ee8:	|     |         add.l d0,d1
    1eea:	|     |         move.l 1a6f8 <winWidth>,d0
    1ef0:	|     |         cmp.l d1,d0
    1ef2:	|     |  /----- bge.w 208e <CstPasteChar+0x43c>

    if(x - single->width > (int) winWidth)
    1ef6:	|     |  |      movea.w 10(sp),a1
    1efa:	|     |  |      movea.l 84(sp),a0
    1efe:	|     |  |      move.l (a0),d0
    1f00:	|     |  |      move.l a1,d1
    1f02:	|     |  |      sub.l d0,d1
    1f04:	|     |  |      move.l 1a6f8 <winWidth>,d0
    1f0a:	|     |  |      cmp.l d1,d0
    1f0c:	|     |  |  /-- bge.s 1f20 <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1f0e:	|     |  |  |   pea 17676 <PutChar+0x30e>
    1f14:	|     |  |  |   jsr 16894 <KPrintF>
    1f1a:	|     |  |  |   addq.l #4,sp
      return;
    1f1c:	+-----|--|--|-- bra.w 2390 <CstPasteChar+0x73e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    1f20:	|     |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    1f24:	|     |  |      movea.w 10(sp),a1
    1f28:	|     |  |      movea.l 84(sp),a0
    1f2c:	|     |  |      move.l (a0),d0
    1f2e:	|     |  |      add.l a1,d0
    1f30:	|     |  |      move.l d0,d1
    1f32:	|     |  |      move.l 1a6f8 <winWidth>,d0
    1f38:	|     |  |      sub.l d0,d1
    1f3a:	|     |  |      move.l d1,d0
    1f3c:	|     |  |      lsr.l #4,d0
    1f3e:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    1f42:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    1f46:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    1f4c:	|     |  |      movea.l 84(sp),a0
    1f50:	|     |  |      move.l 24(a0),d0
    1f54:	|     |  |      move.l d0,d2
    1f56:	|     |  |      movea.l 84(sp),a0
    1f5a:	|     |  |      move.l (a0),d0
    1f5c:	|     |  |      move.l 48(sp),-(sp)
    1f60:	|     |  |      move.l d0,-(sp)
    1f62:	|     |  |      jsr 17252 <__mulsi3>
    1f68:	|     |  |      addq.l #8,sp
    1f6a:	|     |  |      lsr.l #3,d0
    1f6c:	|     |  |      move.l d2,d1
    1f6e:	|     |  |      add.l d0,d1
    1f70:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    1f74:	|     |  |      move.l 1a6f8 <winWidth>,d0
    1f7a:	|     |  |      move.l 52(sp),-(sp)
    1f7e:	|     |  |      move.l d0,-(sp)
    1f80:	|     |  |      jsr 17252 <__mulsi3>
    1f86:	|     |  |      addq.l #8,sp
    1f88:	|     |  |      lsr.l #3,d0
    1f8a:	|     |  |      move.l 28(sp),d1
    1f8e:	|     |  |      add.l d0,d1
    1f90:	|     |  |      move.w 10(sp),d0
    1f94:	|     |  |  /-- bpl.s 1f9a <CstPasteChar+0x348>
    1f96:	|     |  |  |   addi.w #15,d0
    1f9a:	|     |  |  \-> asr.w #4,d0
    1f9c:	|     |  |      movea.w d0,a0
    1f9e:	|     |  |      move.l a0,d0
    1fa0:	|     |  |      add.l a0,d0
    1fa2:	|     |  |      move.l d1,d2
    1fa4:	|     |  |      add.l d0,d2
    1fa6:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    1faa:	|     |  |      move.l 1a6f8 <winWidth>,d0
    1fb0:	|     |  |      move.l 52(sp),-(sp)
    1fb4:	|     |  |      move.l d0,-(sp)
    1fb6:	|     |  |      jsr 17252 <__mulsi3>
    1fbc:	|     |  |      addq.l #8,sp
    1fbe:	|     |  |      lsr.l #3,d0
    1fc0:	|     |  |      move.l 28(sp),d1
    1fc4:	|     |  |      add.l d0,d1
    1fc6:	|     |  |      move.w 10(sp),d0
    1fca:	|     |  |  /-- bpl.s 1fd0 <CstPasteChar+0x37e>
    1fcc:	|     |  |  |   addi.w #15,d0
    1fd0:	|     |  |  \-> asr.w #4,d0
    1fd2:	|     |  |      movea.w d0,a0
    1fd4:	|     |  |      move.l a0,d0
    1fd6:	|     |  |      add.l a0,d0
    1fd8:	|     |  |      move.l d1,d2
    1fda:	|     |  |      add.l d0,d2
    1fdc:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    1fe0:	|     |  |      movea.l 84(sp),a0
    1fe4:	|     |  |      move.l (a0),d0
    1fe6:	|     |  |      andi.l #-2147483633,d0
    1fec:	|     |  |  /-- bpl.s 1ff6 <CstPasteChar+0x3a4>
    1fee:	|     |  |  |   subq.l #1,d0
    1ff0:	|     |  |  |   moveq #-16,d1
    1ff2:	|     |  |  |   or.l d1,d0
    1ff4:	|     |  |  |   addq.l #1,d0
    1ff6:	|     |  |  \-> moveq #12,d2
    1ff8:	|     |  |      lsl.l d2,d0
    1ffa:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    1ffe:	|     |  |      movea.l 84(sp),a0
    2002:	|     |  |      move.l (a0),d0
    2004:	|     |  |      movea.l d0,a0
    2006:	|     |  |      cmpa.w #0,a0
    200a:	|     |  |  /-- bge.s 2010 <CstPasteChar+0x3be>
    200c:	|     |  |  |   lea 15(a0),a0
    2010:	|     |  |  \-> move.l a0,d0
    2012:	|     |  |      asr.l #4,d0
    2014:	|     |  |      move.l d0,d0
    2016:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    201c:	|     |  |      move.l a0,d1
    201e:	|     |  |      addq.l #2,d1
    2020:	|     |  |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2026:	|     |  |      add.w 76(sp),d0
    202a:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    202c:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2032:	|     |  |      move.l a0,d0
    2034:	|     |  |      addq.l #2,d0
    2036:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    203c:	|     |  |      move.l 44(sp),d0
    2040:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2042:	|     |  |      move.w 10(sp),d0
    2046:	|     |  |  /-- bpl.s 204c <CstPasteChar+0x3fa>
    2048:	|     |  |  |   addi.w #15,d0
    204c:	|     |  |  \-> asr.w #4,d0
    204e:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2054:	|     |  |      move.l a0,d1
    2056:	|     |  |      addq.l #2,d1
    2058:	|     |  |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    205e:	|     |  |      add.w d0,d0
    2060:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2062:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2068:	|     |  |      move.l a0,d0
    206a:	|     |  |      addq.l #2,d0
    206c:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2072:	|     |  |      move.l 52(sp),d0
    2076:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2078:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    207e:	|     |  |      move.l a0,d0
    2080:	|     |  |      addq.l #2,d0
    2082:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2088:	|     |  |      clr.w (a0)
    208a:	|     +--|----- bra.w 21f0 <CstPasteChar+0x59e>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    208e:	|     |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    2094:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    2098:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    209c:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    20a0:	|     |         movea.l 84(sp),a0
    20a4:	|     |         move.l 24(a0),d0
    20a8:	|     |         move.l d0,d2
    20aa:	|     |         movea.l 84(sp),a0
    20ae:	|     |         move.l (a0),d0
    20b0:	|     |         movea.l d0,a0
    20b2:	|     |         cmpa.w #0,a0
    20b6:	|     |     /-- bge.s 20bc <CstPasteChar+0x46a>
    20b8:	|     |     |   lea 15(a0),a0
    20bc:	|     |     \-> move.l a0,d0
    20be:	|     |         asr.l #4,d0
    20c0:	|     |         move.l 48(sp),-(sp)
    20c4:	|     |         move.l d0,-(sp)
    20c6:	|     |         jsr 17252 <__mulsi3>
    20cc:	|     |         addq.l #8,sp
    20ce:	|     |         add.l d0,d0
    20d0:	|     |         move.l d2,d1
    20d2:	|     |         add.l d0,d1
    20d4:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    20d8:	|     |         move.l 1a6f8 <winWidth>,d0
    20de:	|     |         move.l 52(sp),-(sp)
    20e2:	|     |         move.l d0,-(sp)
    20e4:	|     |         jsr 17252 <__mulsi3>
    20ea:	|     |         addq.l #8,sp
    20ec:	|     |         lsr.l #3,d0
    20ee:	|     |         move.l 28(sp),d1
    20f2:	|     |         add.l d0,d1
    20f4:	|     |         move.w 10(sp),d0
    20f8:	|     |     /-- bpl.s 20fe <CstPasteChar+0x4ac>
    20fa:	|     |     |   addi.w #15,d0
    20fe:	|     |     \-> asr.w #4,d0
    2100:	|     |         movea.w d0,a0
    2102:	|     |         move.l a0,d0
    2104:	|     |         add.l a0,d0
    2106:	|     |         move.l d1,d2
    2108:	|     |         add.l d0,d2
    210a:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    210e:	|     |         move.l 1a6f8 <winWidth>,d0
    2114:	|     |         move.l 52(sp),-(sp)
    2118:	|     |         move.l d0,-(sp)
    211a:	|     |         jsr 17252 <__mulsi3>
    2120:	|     |         addq.l #8,sp
    2122:	|     |         lsr.l #3,d0
    2124:	|     |         move.l 28(sp),d1
    2128:	|     |         add.l d0,d1
    212a:	|     |         move.w 10(sp),d0
    212e:	|     |     /-- bpl.s 2134 <CstPasteChar+0x4e2>
    2130:	|     |     |   addi.w #15,d0
    2134:	|     |     \-> asr.w #4,d0
    2136:	|     |         movea.w d0,a0
    2138:	|     |         move.l a0,d0
    213a:	|     |         add.l a0,d0
    213c:	|     |         move.l d1,d2
    213e:	|     |         add.l d0,d2
    2140:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    2144:	|     |         move.w 10(sp),d0
    2148:	|     |         andi.w #-32753,d0
    214c:	|     |     /-- bpl.s 2156 <CstPasteChar+0x504>
    214e:	|     |     |   subq.w #1,d0
    2150:	|     |     |   ori.w #-16,d0
    2154:	|     |     |   addq.w #1,d0
    2156:	|     |     \-> ext.l d0
    2158:	|     |         moveq #12,d1
    215a:	|     |         lsl.l d1,d0
    215c:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2160:	|     |         movea.l 84(sp),a0
    2164:	|     |         move.l (a0),d0
    2166:	|     |         movea.l d0,a0
    2168:	|     |         cmpa.w #0,a0
    216c:	|     |     /-- bge.s 2172 <CstPasteChar+0x520>
    216e:	|     |     |   lea 15(a0),a0
    2172:	|     |     \-> move.l a0,d0
    2174:	|     |         asr.l #4,d0
    2176:	|     |         move.l d0,d0
    2178:	|     |         add.w 76(sp),d0
    217c:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2182:	|     |         move.l a0,d1
    2184:	|     |         addq.l #2,d1
    2186:	|     |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    218c:	|     |         add.w 78(sp),d0
    2190:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2192:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2198:	|     |         move.l a0,d0
    219a:	|     |         addq.l #2,d0
    219c:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    21a2:	|     |         move.l 44(sp),d0
    21a6:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    21a8:	|     |         move.w 10(sp),d0
    21ac:	|     |     /-- bpl.s 21b2 <CstPasteChar+0x560>
    21ae:	|     |     |   addi.w #15,d0
    21b2:	|     |     \-> asr.w #4,d0
    21b4:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    21ba:	|     |         move.l a0,d1
    21bc:	|     |         addq.l #2,d1
    21be:	|     |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    21c4:	|     |         add.w d0,d0
    21c6:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    21c8:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    21ce:	|     |         move.l a0,d0
    21d0:	|     |         addq.l #2,d0
    21d2:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    21d8:	|     |         move.l 52(sp),d0
    21dc:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    21de:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    21e4:	|     |         move.l a0,d0
    21e6:	|     |         addq.l #2,d0
    21e8:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    21ee:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    21f0:	|     \-------> moveq #0,d0
    21f2:	|               move.w 74(sp),d0
    21f6:	|               moveq #0,d1
    21f8:	|               not.w d1
    21fa:	|               asr.l d0,d1
    21fc:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2200:	|               moveq #0,d1
    2202:	|               move.w 76(sp),d1
    2206:	|               moveq #0,d0
    2208:	|               move.w 78(sp),d0
    220c:	|               sub.l d0,d1
    220e:	|               move.l d1,d0
    2210:	|               add.w d0,d0
    2212:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2216:	|               move.l 1a6f8 <winWidth>,d0
    221c:	|               lsr.l #3,d0
    221e:	|               move.l d0,d2
    2220:	|               move.w 76(sp),d1
    2224:	|               sub.w 78(sp),d1
    2228:	|               move.l 40(sp),d0
    222c:	|               sub.w d0,d1
    222e:	|               move.w d1,d0
    2230:	|               add.w d1,d0
    2232:	|               add.w d2,d0
    2234:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2238:	|               move.l 1a6f8 <winWidth>,d0
    223e:	|               lsr.l #3,d0
    2240:	|               move.l d0,d2
    2242:	|               move.w 76(sp),d1
    2246:	|               sub.w 78(sp),d1
    224a:	|               move.l 40(sp),d0
    224e:	|               sub.w d0,d1
    2250:	|               move.w d1,d0
    2252:	|               add.w d1,d0
    2254:	|               add.w d2,d0
    2256:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    225a:	|               move.l #14675968,16(sp)
  WaitBlit();
    2262:	|               move.l 1a7b0 <GfxBase>,d0
    2268:	|               movea.l d0,a6
    226a:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    226e:	|               movea.l 16(sp),a0
    2272:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    2278:	|               movea.l 16(sp),a0
    227c:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2282:	|               move.w 24(sp),d0
    2286:	|               movea.l 16(sp),a0
    228a:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    228e:	|               move.w 22(sp),d0
    2292:	|               movea.l 16(sp),a0
    2296:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    229a:	|               move.w 20(sp),d0
    229e:	|               movea.l 16(sp),a0
    22a2:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    22a6:	|               move.l 1a6f8 <winWidth>,d0
    22ac:	|               lsr.l #3,d0
    22ae:	|               move.l d0,d1
    22b0:	|               move.l 1a6fc <winHeight>,d0
    22b6:	|               move.l d0,d0
    22b8:	|               move.w d1,d2
    22ba:	|               muls.w d0,d2
    22bc:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    22c0:	|               move.w 1a6be <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    22c8:	|               move.w 38(sp),d0
    22cc:	|               andi.w #1,d0
    22d0:	|               move.w d0,12(sp)
  if(tmp2) {
    22d4:	|        /----- beq.s 22de <CstPasteChar+0x68c>
    minterm = 0xbfa;
    22d6:	|        |      move.w #3066,36(sp)
    22dc:	|        |  /-- bra.s 22e4 <CstPasteChar+0x692>
  } else {
    minterm = 0xb0a;
    22de:	|        \--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    22e4:	|           \-> clr.l 32(sp)
    22e8:	|     /-------- bra.w 2386 <CstPasteChar+0x734>
  {

    custom->bltcon0 = bltcon0 + minterm;
    22ec:	|  /--|-------> move.l 56(sp),d0
    22f0:	|  |  |         add.w 36(sp),d0
    22f4:	|  |  |         movea.l 16(sp),a0
    22f8:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    22fc:	|  |  |         move.l 68(sp),d0
    2300:	|  |  |         movea.l 16(sp),a0
    2304:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2308:	|  |  |         move.l 64(sp),d0
    230c:	|  |  |         movea.l 16(sp),a0
    2310:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2314:	|  |  |         move.l 60(sp),d0
    2318:	|  |  |         movea.l 16(sp),a0
    231c:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2320:	|  |  |         move.l 44(sp),d0
    2324:	|  |  |         lsl.w #6,d0
    2326:	|  |  |         move.l 40(sp),d1
    232a:	|  |  |         add.w d1,d0
    232c:	|  |  |         sub.w 76(sp),d0
    2330:	|  |  |         add.w 78(sp),d0
    2334:	|  |  |         movea.l 16(sp),a0
    2338:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    233c:	|  |  |         moveq #0,d0
    233e:	|  |  |         move.w 14(sp),d0
    2342:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2346:	|  |  |         moveq #0,d0
    2348:	|  |  |         move.w 14(sp),d0
    234c:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2350:	|  |  |         move.w 38(sp),d0
    2354:	|  |  |         lsr.w #1,d0
    2356:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    235a:	|  |  |         move.w 38(sp),d1
    235e:	|  |  |         andi.w #1,d1
    2362:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2366:	|  |  |  /----- beq.s 2370 <CstPasteChar+0x71e>
      minterm = 0xbfa;
    2368:	|  |  |  |      move.w #3066,36(sp)
    236e:	|  |  |  |  /-- bra.s 2376 <CstPasteChar+0x724>
    } else {
      minterm = 0xb0a;
    2370:	|  |  |  \--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2376:	|  |  |     \-> move.l 1a7b0 <GfxBase>,d0
    237c:	|  |  |         movea.l d0,a6
    237e:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2382:	|  |  |         addq.l #1,32(sp)
    2386:	|  |  \-------> moveq #4,d2
    2388:	|  |            cmp.l 32(sp),d2
    238c:	|  \----------- bge.w 22ec <CstPasteChar+0x69a>
 
  }   
}
    2390:	\-------------> move.l (sp)+,d2
    2392:	                movea.l (sp)+,a6
    2394:	                lea 72(sp),sp
    2398:	                rts

0000239a <CstRestoreScreen>:


void CstRestoreScreen()
{
    239a:	                   lea -24(sp),sp
    239e:	                   move.l a6,-(sp)
    23a0:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    23a2:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    23aa:	                   move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    23b0:	/----------------- beq.w 25b8 <CstRestoreScreen+0x21e>
    23b4:	|                  move.l 1a6d8 <CstDrawBuffer>,d0
    23ba:	+----------------- beq.w 25b8 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    23be:	|                  move.l 1a7b0 <GfxBase>,d0
    23c4:	|                  movea.l d0,a6
    23c6:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    23ca:	|                  movea.l 16(sp),a0
    23ce:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    23d4:	|                  movea.l 16(sp),a0
    23d8:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    23de:	|                  movea.l 16(sp),a0
    23e2:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    23e8:	|     /----------- bra.w 25ac <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    23ec:	|  /--|----------> movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    23f2:	|  |  |            move.l 4(a0),d0
    23f6:	|  |  |  /-------- beq.w 257a <CstRestoreScreen+0x1e0>
    23fa:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2400:	|  |  |  |         movea.l 4(a0),a0
    2404:	|  |  |  |         move.l 16(a0),d0
    2408:	|  |  |  |         moveq #2,d1
    240a:	|  |  |  |         cmp.l d0,d1
    240c:	|  |  |  +-------- blt.w 257a <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2410:	|  |  |  |         move.l 1a6f8 <winWidth>,d0
    2416:	|  |  |  |         lsr.l #3,d0
    2418:	|  |  |  |         move.l d0,d1
    241a:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2420:	|  |  |  |         move.w 8(a0),d0
    2424:	|  |  |  |         add.w d0,d0
    2426:	|  |  |  |         sub.w d0,d1
    2428:	|  |  |  |         movea.l 16(sp),a0
    242c:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2430:	|  |  |  |         move.l 1a6f8 <winWidth>,d0
    2436:	|  |  |  |         lsr.l #3,d0
    2438:	|  |  |  |         move.l d0,d1
    243a:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2440:	|  |  |  |         move.w 8(a0),d0
    2444:	|  |  |  |         add.w d0,d0
    2446:	|  |  |  |         sub.w d0,d1
    2448:	|  |  |  |         movea.l 16(sp),a0
    244c:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2450:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2456:	|  |  |  |         move.w 14(a0),d0
    245a:	|  |  |  |         move.w d0,d0
    245c:	|  |  |  |         andi.l #65535,d0
    2462:	|  |  |  |         move.l 1a6f8 <winWidth>,d1
    2468:	|  |  |  |         move.l d1,-(sp)
    246a:	|  |  |  |         move.l d0,-(sp)
    246c:	|  |  |  |         jsr 17252 <__mulsi3>
    2472:	|  |  |  |         addq.l #8,sp
    2474:	|  |  |  |         move.l d0,d1
    2476:	|  |  |  |         lsr.l #3,d1
    2478:	|  |  |  |         move.l 1a6c6 <CstBackDrop>,d0
    247e:	|  |  |  |         add.l d0,d1
    2480:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2486:	|  |  |  |         move.w 12(a0),d0
    248a:	|  |  |  |         move.w d0,d0
    248c:	|  |  |  |         andi.l #65535,d0
    2492:	|  |  |  |         move.l d1,d2
    2494:	|  |  |  |         add.l d0,d2
    2496:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    249a:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    24a0:	|  |  |  |         move.w 14(a0),d0
    24a4:	|  |  |  |         move.w d0,d0
    24a6:	|  |  |  |         andi.l #65535,d0
    24ac:	|  |  |  |         move.l 1a6f8 <winWidth>,d1
    24b2:	|  |  |  |         move.l d1,-(sp)
    24b4:	|  |  |  |         move.l d0,-(sp)
    24b6:	|  |  |  |         jsr 17252 <__mulsi3>
    24bc:	|  |  |  |         addq.l #8,sp
    24be:	|  |  |  |         move.l d0,d1
    24c0:	|  |  |  |         lsr.l #3,d1
    24c2:	|  |  |  |         move.l 1a6d8 <CstDrawBuffer>,d0
    24c8:	|  |  |  |         add.l d0,d1
    24ca:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    24d0:	|  |  |  |         move.w 12(a0),d0
    24d4:	|  |  |  |         move.w d0,d0
    24d6:	|  |  |  |         andi.l #65535,d0
    24dc:	|  |  |  |         move.l d1,d2
    24de:	|  |  |  |         add.l d0,d2
    24e0:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    24e4:	|  |  |  |         clr.l 20(sp)
    24e8:	|  |  |  |     /-- bra.w 2570 <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    24ec:	|  |  |  |  /--|-> move.l 28(sp),d0
    24f0:	|  |  |  |  |  |   movea.l 16(sp),a0
    24f4:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    24f8:	|  |  |  |  |  |   move.l 24(sp),d0
    24fc:	|  |  |  |  |  |   movea.l 16(sp),a0
    2500:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2504:	|  |  |  |  |  |   movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    250a:	|  |  |  |  |  |   move.w 10(a0),d0
    250e:	|  |  |  |  |  |   lsl.w #6,d0
    2510:	|  |  |  |  |  |   movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2516:	|  |  |  |  |  |   move.w 8(a0),d1
    251a:	|  |  |  |  |  |   add.w d1,d0
    251c:	|  |  |  |  |  |   movea.l 16(sp),a0
    2520:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2524:	|  |  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    252a:	|  |  |  |  |  |   lsr.l #3,d0
    252c:	|  |  |  |  |  |   move.l 1a6fc <winHeight>,d1
    2532:	|  |  |  |  |  |   move.l d1,-(sp)
    2534:	|  |  |  |  |  |   move.l d0,-(sp)
    2536:	|  |  |  |  |  |   jsr 17252 <__mulsi3>
    253c:	|  |  |  |  |  |   addq.l #8,sp
    253e:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2542:	|  |  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    2548:	|  |  |  |  |  |   lsr.l #3,d0
    254a:	|  |  |  |  |  |   move.l 1a6fc <winHeight>,d1
    2550:	|  |  |  |  |  |   move.l d1,-(sp)
    2552:	|  |  |  |  |  |   move.l d0,-(sp)
    2554:	|  |  |  |  |  |   jsr 17252 <__mulsi3>
    255a:	|  |  |  |  |  |   addq.l #8,sp
    255c:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2560:	|  |  |  |  |  |   move.l 1a7b0 <GfxBase>,d0
    2566:	|  |  |  |  |  |   movea.l d0,a6
    2568:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    256c:	|  |  |  |  |  |   addq.l #1,20(sp)
    2570:	|  |  |  |  |  \-> moveq #4,d0
    2572:	|  |  |  |  |      cmp.l 20(sp),d0
    2576:	|  |  |  |  \----- bge.w 24ec <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    257a:	|  |  |  \-------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2582:	|  |  |            movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2588:	|  |  |            move.l 16(a0),d0
    258c:	|  |  |            move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2592:	|  |  |            move.l 12(sp),8(sp)
    2598:	|  |  |            move.l 1a7a4 <SysBase>,d0
    259e:	|  |  |            movea.l d0,a6
    25a0:	|  |  |            movea.l 8(sp),a1
    25a4:	|  |  |            jsr -690(a6)
    todelete = NULL;
    25a8:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    25ac:	|  |  \----------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    25b2:	|  \-------------- bne.w 23ec <CstRestoreScreen+0x52>
    25b6:	|              /-- bra.s 25ba <CstRestoreScreen+0x220>
    return;
    25b8:	\--------------|-> nop
  }
  
}
    25ba:	               \-> move.l (sp)+,d2
    25bc:	                   movea.l (sp)+,a6
    25be:	                   lea 24(sp),sp
    25c2:	                   rts

000025c4 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    25c4:	                lea -124(sp),sp
    25c8:	                movem.l d2-d3/a6,-(sp)
    25cc:	                movea.l 148(sp),a0
    25d0:	                move.l 152(sp),d1
    25d4:	                move.l 156(sp),d0
    25d8:	                movea.w a0,a0
    25da:	                move.w a0,16(sp)
    25de:	                move.w d1,d1
    25e0:	                move.w d1,14(sp)
    25e4:	                move.w d0,d0
    25e6:	                move.w d0,12(sp)
  UWORD *destination = 0;
    25ea:	                clr.l 132(sp)
  switch(destinationtype)
    25ee:	                moveq #0,d0
    25f0:	                move.w 12(sp),d0
    25f4:	                moveq #1,d1
    25f6:	                cmp.l d0,d1
    25f8:	            /-- beq.s 2602 <CstScaleSprite+0x3e>
    25fa:	            |   moveq #2,d2
    25fc:	            |   cmp.l d0,d2
    25fe:	         /--|-- beq.s 260c <CstScaleSprite+0x48>
    2600:	      /--|--|-- bra.s 261e <CstScaleSprite+0x5a>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    2602:	      |  |  \-> move.l 1a6d8 <CstDrawBuffer>,132(sp)
      break;
    260a:	      +--|----- bra.s 261e <CstScaleSprite+0x5a>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    260c:	      |  \----> move.w #2,1a6d2 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2614:	      |         move.l 1a6c6 <CstBackDrop>,132(sp)
      break;
    261c:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    261e:	      \-------> tst.w 14(sp)
    2622:	         /----- bge.s 266a <CstScaleSprite+0xa6>
    if(y + single->height < 0) {
    2624:	         |      movea.w 14(sp),a1
    2628:	         |      movea.l 140(sp),a0
    262c:	         |      move.l 4(a0),d0
    2630:	         |      add.l a1,d0
    2632:	         |  /-- bpl.s 2646 <CstScaleSprite+0x82>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2634:	         |  |   pea 17676 <PutChar+0x30e>
    263a:	         |  |   jsr 16894 <KPrintF>
    2640:	         |  |   addq.l #4,sp
      return;
    2642:	/--------|--|-- bra.w 30fa <CstScaleSprite+0xb36>
    }
    ystartdst = 0;
    2646:	|        |  \-> clr.l 96(sp)
    ystartsrc = y*-1;
    264a:	|        |      move.w 14(sp),d0
    264e:	|        |      ext.l d0
    2650:	|        |      neg.l d0
    2652:	|        |      move.l d0,92(sp)
    blitheight = single->height+y;
    2656:	|        |      movea.l 140(sp),a0
    265a:	|        |      move.l 4(a0),d0
    265e:	|        |      movea.w 14(sp),a0
    2662:	|        |      add.l a0,d0
    2664:	|        |      move.l d0,88(sp)
    2668:	|     /--|----- bra.s 26dc <CstScaleSprite+0x118>
  } else if(y+single->height > (int) winHeight) {
    266a:	|     |  \----> movea.w 14(sp),a1
    266e:	|     |         movea.l 140(sp),a0
    2672:	|     |         move.l 4(a0),d0
    2676:	|     |         move.l a1,d1
    2678:	|     |         add.l d0,d1
    267a:	|     |         move.l 1a6fc <winHeight>,d0
    2680:	|     |         cmp.l d1,d0
    2682:	|     |  /----- bge.s 26c4 <CstScaleSprite+0x100>
    if(y  > (int) winHeight) {
    2684:	|     |  |      movea.w 14(sp),a0
    2688:	|     |  |      move.l 1a6fc <winHeight>,d0
    268e:	|     |  |      cmp.l a0,d0
    2690:	|     |  |  /-- bge.s 26a4 <CstScaleSprite+0xe0>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2692:	|     |  |  |   pea 17676 <PutChar+0x30e>
    2698:	|     |  |  |   jsr 16894 <KPrintF>
    269e:	|     |  |  |   addq.l #4,sp
      return;
    26a0:	+-----|--|--|-- bra.w 30fa <CstScaleSprite+0xb36>
    }
    ystartdst = y;
    26a4:	|     |  |  \-> movea.w 14(sp),a0
    26a8:	|     |  |      move.l a0,96(sp)
    ystartsrc = 0;
    26ac:	|     |  |      clr.l 92(sp)
    blitheight = winHeight-y;
    26b0:	|     |  |      move.l 1a6fc <winHeight>,d0
    26b6:	|     |  |      movea.w 14(sp),a0
    26ba:	|     |  |      move.l d0,d1
    26bc:	|     |  |      sub.l a0,d1
    26be:	|     |  |      move.l d1,88(sp)
    26c2:	|     +--|----- bra.s 26dc <CstScaleSprite+0x118>
  } else {
    ystartdst = y;
    26c4:	|     |  \----> movea.w 14(sp),a0
    26c8:	|     |         move.l a0,96(sp)
    ystartsrc = 0;
    26cc:	|     |         clr.l 92(sp)
    blitheight = single->height;
    26d0:	|     |         movea.l 140(sp),a0
    26d4:	|     |         move.l 4(a0),d0
    26d8:	|     |         move.l d0,88(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    26dc:	|     \-------> tst.w 16(sp)
    26e0:	|     /-------- bge.w 2990 <CstScaleSprite+0x3cc>
    if(x + single->width < 0) {
    26e4:	|     |         movea.w 16(sp),a1
    26e8:	|     |         movea.l 140(sp),a0
    26ec:	|     |         move.l (a0),d0
    26ee:	|     |         add.l a1,d0
    26f0:	|     |     /-- bpl.s 2704 <CstScaleSprite+0x140>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    26f2:	|     |     |   pea 17676 <PutChar+0x30e>
    26f8:	|     |     |   jsr 16894 <KPrintF>
    26fe:	|     |     |   addq.l #4,sp
      return;
    2700:	+-----|-----|-- bra.w 30fa <CstScaleSprite+0xb36>

    }
    
    extrawords = 1;
    2704:	|     |     \-> move.w #1,130(sp)
    cutwordssource = (x*-1)/16; 
    270a:	|     |         move.w 16(sp),d0
    270e:	|     |     /-- bpl.s 2714 <CstScaleSprite+0x150>
    2710:	|     |     |   addi.w #15,d0
    2714:	|     |     \-> asr.w #4,d0
    2716:	|     |         neg.w d0
    2718:	|     |         move.w d0,128(sp)
    cutmaskpixel = (x*-1)%16;     
    271c:	|     |         move.w 16(sp),d0
    2720:	|     |         ext.l d0
    2722:	|     |         neg.l d0
    2724:	|     |         andi.l #-2147483633,d0
    272a:	|     |     /-- bpl.s 2734 <CstScaleSprite+0x170>
    272c:	|     |     |   subq.l #1,d0
    272e:	|     |     |   moveq #-16,d1
    2730:	|     |     |   or.l d1,d0
    2732:	|     |     |   addq.l #1,d0
    2734:	|     |     \-> move.w d0,126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2738:	|     |         clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+cutwordssource*2+ystartsrc*single->width/8;
    273c:	|     |         movea.l 140(sp),a0
    2740:	|     |         move.l 24(a0),d0
    2744:	|     |         move.l d0,d2
    2746:	|     |         moveq #0,d0
    2748:	|     |         move.w 128(sp),d0
    274c:	|     |         add.l d0,d0
    274e:	|     |         move.l d0,d3
    2750:	|     |         movea.l 140(sp),a0
    2754:	|     |         move.l (a0),d0
    2756:	|     |     /-- bpl.s 275a <CstScaleSprite+0x196>
    2758:	|     |     |   addq.l #7,d0
    275a:	|     |     \-> asr.l #3,d0
    275c:	|     |         movea.l 140(sp),a0
    2760:	|     |         move.l 4(a0),d1
    2764:	|     |         move.l d1,-(sp)
    2766:	|     |         move.l d0,-(sp)
    2768:	|     |         jsr 17252 <__mulsi3>
    276e:	|     |         addq.l #8,sp
    2770:	|     |         move.l d0,d1
    2772:	|     |         move.l d1,d0
    2774:	|     |         add.l d0,d0
    2776:	|     |         add.l d0,d0
    2778:	|     |         add.l d1,d0
    277a:	|     |         add.l d3,d0
    277c:	|     |         add.l d0,d2
    277e:	|     |         movea.l 140(sp),a0
    2782:	|     |         move.l (a0),d0
    2784:	|     |         move.l 92(sp),-(sp)
    2788:	|     |         move.l d0,-(sp)
    278a:	|     |         jsr 17252 <__mulsi3>
    2790:	|     |         addq.l #8,sp
    2792:	|     |         lsr.l #3,d0
    2794:	|     |         move.l d2,d1
    2796:	|     |         add.l d0,d1
    2798:	|     |         move.l d1,120(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    279c:	|     |         movea.l 140(sp),a0
    27a0:	|     |         move.l 24(a0),d0
    27a4:	|     |         move.l d0,d1
    27a6:	|     |         moveq #0,d0
    27a8:	|     |         move.w 128(sp),d0
    27ac:	|     |         add.l d0,d0
    27ae:	|     |         move.l d1,d2
    27b0:	|     |         add.l d0,d2
    27b2:	|     |         movea.l 140(sp),a0
    27b6:	|     |         move.l (a0),d0
    27b8:	|     |         move.l 92(sp),-(sp)
    27bc:	|     |         move.l d0,-(sp)
    27be:	|     |         jsr 17252 <__mulsi3>
    27c4:	|     |         addq.l #8,sp
    27c6:	|     |         lsr.l #3,d0
    27c8:	|     |         move.l d2,d1
    27ca:	|     |         add.l d0,d1
    27cc:	|     |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    27d0:	|     |         move.l 1a6f8 <winWidth>,d0
    27d6:	|     |         move.l 96(sp),-(sp)
    27da:	|     |         move.l d0,-(sp)
    27dc:	|     |         jsr 17252 <__mulsi3>
    27e2:	|     |         addq.l #8,sp
    27e4:	|     |         lsr.l #3,d0
    27e6:	|     |         move.l 132(sp),d1
    27ea:	|     |         add.l d1,d0
    27ec:	|     |         move.l d0,d2
    27ee:	|     |         subq.l #2,d2
    27f0:	|     |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    27f4:	|     |         move.l 1a6f8 <winWidth>,d0
    27fa:	|     |         move.l 96(sp),-(sp)
    27fe:	|     |         move.l d0,-(sp)
    2800:	|     |         jsr 17252 <__mulsi3>
    2806:	|     |         addq.l #8,sp
    2808:	|     |         lsr.l #3,d0
    280a:	|     |         move.l 132(sp),d1
    280e:	|     |         add.l d1,d0
    2810:	|     |         move.l d0,d1
    2812:	|     |         subq.l #2,d1
    2814:	|     |         move.l d1,108(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2818:	|     |         moveq #0,d0
    281a:	|     |         move.w 126(sp),d0
    281e:	|     |         moveq #16,d1
    2820:	|     |         sub.l d0,d1
    2822:	|     |         move.l d1,d0
    2824:	|     |         moveq #12,d2
    2826:	|     |         lsl.l d2,d0
    2828:	|     |         addi.l #4042,d0
    282e:	|     |         move.l d0,104(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    2832:	|     |         moveq #0,d0
    2834:	|     |         move.w 126(sp),d0
    2838:	|     |         moveq #16,d1
    283a:	|     |         sub.l d0,d1
    283c:	|     |         move.l d1,d0
    283e:	|     |         moveq #12,d1
    2840:	|     |         lsl.l d1,d0
    2842:	|     |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2846:	|     |         cmpi.w #1,12(sp)
    284c:	|     |  /----- bne.w 290a <CstScaleSprite+0x346>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2850:	|     |  |      move.l 1a6e0 <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2858:	|     |  |      moveq #20,d2
    285a:	|     |  |      move.l d2,44(sp)
    285e:	|     |  |      clr.l 40(sp)
    2862:	|     |  |      move.l 1a7a4 <SysBase>,d0
    2868:	|     |  |      movea.l d0,a6
    286a:	|     |  |      move.l 44(sp),d0
    286e:	|     |  |      move.l 40(sp),d1
    2872:	|     |  |      jsr -684(a6)
    2876:	|     |  |      move.l d0,36(sp)
    287a:	|     |  |      move.l 36(sp),d0
    287e:	|     |  |      move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2884:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    288a:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2890:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2896:	|     |  |      move.w 16(sp),d0
    289a:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    289c:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    28a2:	|     |  |      move.w 14(sp),d0
    28a6:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    28aa:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    28b0:	|     |  |      move.l 144(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    28b6:	|     |  |      movea.l 140(sp),a0
    28ba:	|     |  |      move.l (a0),d0
    28bc:	|     |  |      movea.l d0,a0
    28be:	|     |  |      cmpa.w #0,a0
    28c2:	|     |  |  /-- bge.s 28c8 <CstScaleSprite+0x304>
    28c4:	|     |  |  |   lea 15(a0),a0
    28c8:	|     |  |  \-> move.l a0,d0
    28ca:	|     |  |      asr.l #4,d0
    28cc:	|     |  |      move.l d0,d0
    28ce:	|     |  |      add.w 128(sp),d0
    28d2:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    28d8:	|     |  |      add.w 130(sp),d0
    28dc:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    28e0:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    28e6:	|     |  |      move.l 88(sp),d0
    28ea:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    28ee:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    28f4:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    28f8:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    28fe:	|     |  |      move.l 96(sp),d0
    2902:	|     |  |      move.w d0,14(a0)
    2906:	|  /--|--|----- bra.w 2f22 <CstScaleSprite+0x95e>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    290a:	|  |  |  \----> movea.l 140(sp),a0
    290e:	|  |  |         move.l (a0),d0
    2910:	|  |  |         movea.l d0,a0
    2912:	|  |  |         cmpa.w #0,a0
    2916:	|  |  |     /-- bge.s 291c <CstScaleSprite+0x358>
    2918:	|  |  |     |   lea 15(a0),a0
    291c:	|  |  |     \-> move.l a0,d0
    291e:	|  |  |         asr.l #4,d0
    2920:	|  |  |         move.l d0,d0
    2922:	|  |  |         add.w 128(sp),d0
    2926:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    292c:	|  |  |         move.l a0,d1
    292e:	|  |  |         addq.l #2,d1
    2930:	|  |  |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2936:	|  |  |         add.w 130(sp),d0
    293a:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    293c:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2942:	|  |  |         move.l a0,d0
    2944:	|  |  |         addq.l #2,d0
    2946:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    294c:	|  |  |         move.l 88(sp),d0
    2950:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2952:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2958:	|  |  |         move.l a0,d0
    295a:	|  |  |         addq.l #2,d0
    295c:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2962:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2964:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    296a:	|  |  |         move.l a0,d0
    296c:	|  |  |         addq.l #2,d0
    296e:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2974:	|  |  |         move.l 96(sp),d0
    2978:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    297a:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2980:	|  |  |         move.l a0,d0
    2982:	|  |  |         addq.l #2,d0
    2984:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    298a:	|  |  |         clr.w (a0)
    298c:	|  +--|-------- bra.w 2f22 <CstScaleSprite+0x95e>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2990:	|  |  \-------> movea.w 16(sp),a1
    2994:	|  |            movea.l 140(sp),a0
    2998:	|  |            move.l (a0),d0
    299a:	|  |            move.l a1,d1
    299c:	|  |            add.l d0,d1
    299e:	|  |            move.l 1a6f8 <winWidth>,d0
    29a4:	|  |            cmp.l d1,d0
    29a6:	|  |  /-------- bge.w 2c88 <CstScaleSprite+0x6c4>

    if(x - single->width > (int) winWidth)
    29aa:	|  |  |         movea.w 16(sp),a1
    29ae:	|  |  |         movea.l 140(sp),a0
    29b2:	|  |  |         move.l (a0),d0
    29b4:	|  |  |         move.l a1,d1
    29b6:	|  |  |         sub.l d0,d1
    29b8:	|  |  |         move.l 1a6f8 <winWidth>,d0
    29be:	|  |  |         cmp.l d1,d0
    29c0:	|  |  |     /-- bge.s 29d4 <CstScaleSprite+0x410>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    29c2:	|  |  |     |   pea 17676 <PutChar+0x30e>
    29c8:	|  |  |     |   jsr 16894 <KPrintF>
    29ce:	|  |  |     |   addq.l #4,sp
      return;
    29d0:	+--|--|-----|-- bra.w 30fa <CstScaleSprite+0xb36>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    29d4:	|  |  |     \-> clr.w 130(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    29d8:	|  |  |         movea.w 16(sp),a1
    29dc:	|  |  |         movea.l 140(sp),a0
    29e0:	|  |  |         move.l (a0),d0
    29e2:	|  |  |         add.l a1,d0
    29e4:	|  |  |         move.l d0,d1
    29e6:	|  |  |         move.l 1a6f8 <winWidth>,d0
    29ec:	|  |  |         sub.l d0,d1
    29ee:	|  |  |         move.l d1,d0
    29f0:	|  |  |         lsr.l #4,d0
    29f2:	|  |  |         move.w d0,128(sp)
    cutmaskpixel = 0;
    29f6:	|  |  |         clr.w 126(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    29fa:	|  |  |         move.w #-1,124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    2a00:	|  |  |         movea.l 140(sp),a0
    2a04:	|  |  |         move.l 24(a0),d0
    2a08:	|  |  |         move.l d0,d2
    2a0a:	|  |  |         movea.l 140(sp),a0
    2a0e:	|  |  |         move.l (a0),d0
    2a10:	|  |  |     /-- bpl.s 2a14 <CstScaleSprite+0x450>
    2a12:	|  |  |     |   addq.l #7,d0
    2a14:	|  |  |     \-> asr.l #3,d0
    2a16:	|  |  |         movea.l 140(sp),a0
    2a1a:	|  |  |         move.l 4(a0),d1
    2a1e:	|  |  |         move.l d1,-(sp)
    2a20:	|  |  |         move.l d0,-(sp)
    2a22:	|  |  |         jsr 17252 <__mulsi3>
    2a28:	|  |  |         addq.l #8,sp
    2a2a:	|  |  |         move.l d0,d1
    2a2c:	|  |  |         move.l d1,d0
    2a2e:	|  |  |         add.l d0,d0
    2a30:	|  |  |         add.l d0,d0
    2a32:	|  |  |         add.l d1,d0
    2a34:	|  |  |         add.l d0,d2
    2a36:	|  |  |         movea.l 140(sp),a0
    2a3a:	|  |  |         move.l (a0),d0
    2a3c:	|  |  |         move.l 92(sp),-(sp)
    2a40:	|  |  |         move.l d0,-(sp)
    2a42:	|  |  |         jsr 17252 <__mulsi3>
    2a48:	|  |  |         addq.l #8,sp
    2a4a:	|  |  |         lsr.l #3,d0
    2a4c:	|  |  |         move.l d2,d1
    2a4e:	|  |  |         add.l d0,d1
    2a50:	|  |  |         move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2a54:	|  |  |         movea.l 140(sp),a0
    2a58:	|  |  |         move.l 24(a0),d0
    2a5c:	|  |  |         move.l d0,d2
    2a5e:	|  |  |         movea.l 140(sp),a0
    2a62:	|  |  |         move.l (a0),d0
    2a64:	|  |  |         move.l 92(sp),-(sp)
    2a68:	|  |  |         move.l d0,-(sp)
    2a6a:	|  |  |         jsr 17252 <__mulsi3>
    2a70:	|  |  |         addq.l #8,sp
    2a72:	|  |  |         lsr.l #3,d0
    2a74:	|  |  |         move.l d2,d1
    2a76:	|  |  |         add.l d0,d1
    2a78:	|  |  |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2a7c:	|  |  |         move.l 1a6f8 <winWidth>,d0
    2a82:	|  |  |         move.l 96(sp),-(sp)
    2a86:	|  |  |         move.l d0,-(sp)
    2a88:	|  |  |         jsr 17252 <__mulsi3>
    2a8e:	|  |  |         addq.l #8,sp
    2a90:	|  |  |         lsr.l #3,d0
    2a92:	|  |  |         move.l 132(sp),d1
    2a96:	|  |  |         add.l d0,d1
    2a98:	|  |  |         move.w 16(sp),d0
    2a9c:	|  |  |     /-- bpl.s 2aa2 <CstScaleSprite+0x4de>
    2a9e:	|  |  |     |   addi.w #15,d0
    2aa2:	|  |  |     \-> asr.w #4,d0
    2aa4:	|  |  |         movea.w d0,a0
    2aa6:	|  |  |         move.l a0,d0
    2aa8:	|  |  |         add.l a0,d0
    2aaa:	|  |  |         move.l d1,d2
    2aac:	|  |  |         add.l d0,d2
    2aae:	|  |  |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2ab2:	|  |  |         move.l 1a6f8 <winWidth>,d0
    2ab8:	|  |  |         move.l 96(sp),-(sp)
    2abc:	|  |  |         move.l d0,-(sp)
    2abe:	|  |  |         jsr 17252 <__mulsi3>
    2ac4:	|  |  |         addq.l #8,sp
    2ac6:	|  |  |         lsr.l #3,d0
    2ac8:	|  |  |         move.l 132(sp),d1
    2acc:	|  |  |         add.l d0,d1
    2ace:	|  |  |         move.w 16(sp),d0
    2ad2:	|  |  |     /-- bpl.s 2ad8 <CstScaleSprite+0x514>
    2ad4:	|  |  |     |   addi.w #15,d0
    2ad8:	|  |  |     \-> asr.w #4,d0
    2ada:	|  |  |         movea.w d0,a0
    2adc:	|  |  |         move.l a0,d0
    2ade:	|  |  |         add.l a0,d0
    2ae0:	|  |  |         move.l d1,d2
    2ae2:	|  |  |         add.l d0,d2
    2ae4:	|  |  |         move.l d2,108(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    2ae8:	|  |  |         movea.l 140(sp),a0
    2aec:	|  |  |         move.l (a0),d0
    2aee:	|  |  |         andi.l #-2147483633,d0
    2af4:	|  |  |     /-- bpl.s 2afe <CstScaleSprite+0x53a>
    2af6:	|  |  |     |   subq.l #1,d0
    2af8:	|  |  |     |   moveq #-16,d1
    2afa:	|  |  |     |   or.l d1,d0
    2afc:	|  |  |     |   addq.l #1,d0
    2afe:	|  |  |     \-> moveq #12,d2
    2b00:	|  |  |         lsl.l d2,d0
    2b02:	|  |  |         addi.l #4042,d0
    2b08:	|  |  |         move.l d0,104(sp)
    bltcon1 = ((single->width%16) << 12);
    2b0c:	|  |  |         movea.l 140(sp),a0
    2b10:	|  |  |         move.l (a0),d0
    2b12:	|  |  |         andi.l #-2147483633,d0
    2b18:	|  |  |     /-- bpl.s 2b22 <CstScaleSprite+0x55e>
    2b1a:	|  |  |     |   subq.l #1,d0
    2b1c:	|  |  |     |   moveq #-16,d1
    2b1e:	|  |  |     |   or.l d1,d0
    2b20:	|  |  |     |   addq.l #1,d0
    2b22:	|  |  |     \-> moveq #12,d2
    2b24:	|  |  |         lsl.l d2,d0
    2b26:	|  |  |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2b2a:	|  |  |         cmpi.w #1,12(sp)
    2b30:	|  |  |  /----- bne.w 2bf8 <CstScaleSprite+0x634>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2b34:	|  |  |  |      move.l 1a6e0 <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2b3c:	|  |  |  |      moveq #20,d0
    2b3e:	|  |  |  |      move.l d0,60(sp)
    2b42:	|  |  |  |      clr.l 56(sp)
    2b46:	|  |  |  |      move.l 1a7a4 <SysBase>,d0
    2b4c:	|  |  |  |      movea.l d0,a6
    2b4e:	|  |  |  |      move.l 60(sp),d0
    2b52:	|  |  |  |      move.l 56(sp),d1
    2b56:	|  |  |  |      jsr -684(a6)
    2b5a:	|  |  |  |      move.l d0,52(sp)
    2b5e:	|  |  |  |      move.l 52(sp),d0
    2b62:	|  |  |  |      move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2b68:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b6e:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2b74:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b7a:	|  |  |  |      move.w 16(sp),d0
    2b7e:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    2b80:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b86:	|  |  |  |      move.w 14(sp),d0
    2b8a:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    2b8e:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b94:	|  |  |  |      move.l 144(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    2b9a:	|  |  |  |      movea.l 140(sp),a0
    2b9e:	|  |  |  |      move.l (a0),d0
    2ba0:	|  |  |  |      movea.l d0,a0
    2ba2:	|  |  |  |      cmpa.w #0,a0
    2ba6:	|  |  |  |  /-- bge.s 2bac <CstScaleSprite+0x5e8>
    2ba8:	|  |  |  |  |   lea 15(a0),a0
    2bac:	|  |  |  |  \-> move.l a0,d0
    2bae:	|  |  |  |      asr.l #4,d0
    2bb0:	|  |  |  |      move.l d0,d0
    2bb2:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2bb8:	|  |  |  |      add.w 128(sp),d0
    2bbc:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    2bc0:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2bc6:	|  |  |  |      move.l 88(sp),d0
    2bca:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2bce:	|  |  |  |      move.w 16(sp),d0
    2bd2:	|  |  |  |  /-- bpl.s 2bd8 <CstScaleSprite+0x614>
    2bd4:	|  |  |  |  |   addi.w #15,d0
    2bd8:	|  |  |  |  \-> asr.w #4,d0
    2bda:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2be0:	|  |  |  |      add.w d0,d0
    2be2:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2be6:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2bec:	|  |  |  |      move.l 96(sp),d0
    2bf0:	|  |  |  |      move.w d0,14(a0)
    2bf4:	|  +--|--|----- bra.w 2f22 <CstScaleSprite+0x95e>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2bf8:	|  |  |  \----> movea.l 140(sp),a0
    2bfc:	|  |  |         move.l (a0),d0
    2bfe:	|  |  |         movea.l d0,a0
    2c00:	|  |  |         cmpa.w #0,a0
    2c04:	|  |  |     /-- bge.s 2c0a <CstScaleSprite+0x646>
    2c06:	|  |  |     |   lea 15(a0),a0
    2c0a:	|  |  |     \-> move.l a0,d0
    2c0c:	|  |  |         asr.l #4,d0
    2c0e:	|  |  |         move.l d0,d0
    2c10:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2c16:	|  |  |         move.l a0,d1
    2c18:	|  |  |         addq.l #2,d1
    2c1a:	|  |  |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2c20:	|  |  |         add.w 128(sp),d0
    2c24:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2c26:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2c2c:	|  |  |         move.l a0,d0
    2c2e:	|  |  |         addq.l #2,d0
    2c30:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2c36:	|  |  |         move.l 88(sp),d0
    2c3a:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2c3c:	|  |  |         move.w 16(sp),d0
    2c40:	|  |  |     /-- bpl.s 2c46 <CstScaleSprite+0x682>
    2c42:	|  |  |     |   addi.w #15,d0
    2c46:	|  |  |     \-> asr.w #4,d0
    2c48:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2c4e:	|  |  |         move.l a0,d1
    2c50:	|  |  |         addq.l #2,d1
    2c52:	|  |  |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2c58:	|  |  |         add.w d0,d0
    2c5a:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2c5c:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2c62:	|  |  |         move.l a0,d0
    2c64:	|  |  |         addq.l #2,d0
    2c66:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2c6c:	|  |  |         move.l 96(sp),d0
    2c70:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2c72:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2c78:	|  |  |         move.l a0,d0
    2c7a:	|  |  |         addq.l #2,d0
    2c7c:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2c82:	|  |  |         clr.w (a0)
    2c84:	|  +--|-------- bra.w 2f22 <CstScaleSprite+0x95e>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2c88:	|  |  \-------> move.w #1,130(sp)
    cutwordssource = 0;
    2c8e:	|  |            clr.w 128(sp)
    cutmaskpixel = 0;
    2c92:	|  |            clr.w 126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2c96:	|  |            clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    2c9a:	|  |            movea.l 140(sp),a0
    2c9e:	|  |            move.l 24(a0),d0
    2ca2:	|  |            move.l d0,d2
    2ca4:	|  |            movea.l 140(sp),a0
    2ca8:	|  |            move.l (a0),d0
    2caa:	|  |        /-- bpl.s 2cae <CstScaleSprite+0x6ea>
    2cac:	|  |        |   addq.l #7,d0
    2cae:	|  |        \-> asr.l #3,d0
    2cb0:	|  |            movea.l 140(sp),a0
    2cb4:	|  |            move.l 4(a0),d1
    2cb8:	|  |            move.l d1,-(sp)
    2cba:	|  |            move.l d0,-(sp)
    2cbc:	|  |            jsr 17252 <__mulsi3>
    2cc2:	|  |            addq.l #8,sp
    2cc4:	|  |            move.l d0,d1
    2cc6:	|  |            move.l d1,d0
    2cc8:	|  |            add.l d0,d0
    2cca:	|  |            add.l d0,d0
    2ccc:	|  |            add.l d1,d0
    2cce:	|  |            add.l d0,d2
    2cd0:	|  |            movea.l 140(sp),a0
    2cd4:	|  |            move.l (a0),d0
    2cd6:	|  |            move.l 92(sp),-(sp)
    2cda:	|  |            move.l d0,-(sp)
    2cdc:	|  |            jsr 17252 <__mulsi3>
    2ce2:	|  |            addq.l #8,sp
    2ce4:	|  |            lsr.l #3,d0
    2ce6:	|  |            move.l d2,d1
    2ce8:	|  |            add.l d0,d1
    2cea:	|  |            move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2cee:	|  |            movea.l 140(sp),a0
    2cf2:	|  |            move.l 24(a0),d0
    2cf6:	|  |            move.l d0,d2
    2cf8:	|  |            movea.l 140(sp),a0
    2cfc:	|  |            move.l (a0),d0
    2cfe:	|  |            move.l 92(sp),-(sp)
    2d02:	|  |            move.l d0,-(sp)
    2d04:	|  |            jsr 17252 <__mulsi3>
    2d0a:	|  |            addq.l #8,sp
    2d0c:	|  |            lsr.l #3,d0
    2d0e:	|  |            move.l d2,d1
    2d10:	|  |            add.l d0,d1
    2d12:	|  |            move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2d16:	|  |            move.l 1a6f8 <winWidth>,d0
    2d1c:	|  |            move.l 96(sp),-(sp)
    2d20:	|  |            move.l d0,-(sp)
    2d22:	|  |            jsr 17252 <__mulsi3>
    2d28:	|  |            addq.l #8,sp
    2d2a:	|  |            lsr.l #3,d0
    2d2c:	|  |            move.l 132(sp),d1
    2d30:	|  |            add.l d0,d1
    2d32:	|  |            move.w 16(sp),d0
    2d36:	|  |        /-- bpl.s 2d3c <CstScaleSprite+0x778>
    2d38:	|  |        |   addi.w #15,d0
    2d3c:	|  |        \-> asr.w #4,d0
    2d3e:	|  |            movea.w d0,a0
    2d40:	|  |            move.l a0,d0
    2d42:	|  |            add.l a0,d0
    2d44:	|  |            move.l d1,d2
    2d46:	|  |            add.l d0,d2
    2d48:	|  |            move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2d4c:	|  |            move.l 1a6f8 <winWidth>,d0
    2d52:	|  |            move.l 96(sp),-(sp)
    2d56:	|  |            move.l d0,-(sp)
    2d58:	|  |            jsr 17252 <__mulsi3>
    2d5e:	|  |            addq.l #8,sp
    2d60:	|  |            lsr.l #3,d0
    2d62:	|  |            move.l 132(sp),d1
    2d66:	|  |            add.l d0,d1
    2d68:	|  |            move.w 16(sp),d0
    2d6c:	|  |        /-- bpl.s 2d72 <CstScaleSprite+0x7ae>
    2d6e:	|  |        |   addi.w #15,d0
    2d72:	|  |        \-> asr.w #4,d0
    2d74:	|  |            movea.w d0,a0
    2d76:	|  |            move.l a0,d0
    2d78:	|  |            add.l a0,d0
    2d7a:	|  |            move.l d1,d2
    2d7c:	|  |            add.l d0,d2
    2d7e:	|  |            move.l d2,108(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    2d82:	|  |            move.w 16(sp),d0
    2d86:	|  |            andi.w #-32753,d0
    2d8a:	|  |        /-- bpl.s 2d94 <CstScaleSprite+0x7d0>
    2d8c:	|  |        |   subq.w #1,d0
    2d8e:	|  |        |   ori.w #-16,d0
    2d92:	|  |        |   addq.w #1,d0
    2d94:	|  |        \-> ext.l d0
    2d96:	|  |            moveq #12,d1
    2d98:	|  |            lsl.l d1,d0
    2d9a:	|  |            addi.l #4042,d0
    2da0:	|  |            move.l d0,104(sp)
    bltcon1 = ((x%16) << 12);
    2da4:	|  |            move.w 16(sp),d0
    2da8:	|  |            andi.w #-32753,d0
    2dac:	|  |        /-- bpl.s 2db6 <CstScaleSprite+0x7f2>
    2dae:	|  |        |   subq.w #1,d0
    2db0:	|  |        |   ori.w #-16,d0
    2db4:	|  |        |   addq.w #1,d0
    2db6:	|  |        \-> ext.l d0
    2db8:	|  |            moveq #12,d2
    2dba:	|  |            lsl.l d2,d0
    2dbc:	|  |            move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2dc0:	|  |            cmpi.w #1,12(sp)
    2dc6:	|  |     /----- bne.w 2e92 <CstScaleSprite+0x8ce>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2dca:	|  |     |      move.l 1a6e0 <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2dd2:	|  |     |      moveq #20,d0
    2dd4:	|  |     |      move.l d0,76(sp)
    2dd8:	|  |     |      clr.l 72(sp)
    2ddc:	|  |     |      move.l 1a7a4 <SysBase>,d0
    2de2:	|  |     |      movea.l d0,a6
    2de4:	|  |     |      move.l 76(sp),d0
    2de8:	|  |     |      move.l 72(sp),d1
    2dec:	|  |     |      jsr -684(a6)
    2df0:	|  |     |      move.l d0,68(sp)
    2df4:	|  |     |      move.l 68(sp),d0
    2df8:	|  |     |      move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2dfe:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e04:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2e0a:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e10:	|  |     |      move.w 16(sp),d0
    2e14:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    2e16:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e1c:	|  |     |      move.w 14(sp),d0
    2e20:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    2e24:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e2a:	|  |     |      move.l 144(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    2e30:	|  |     |      movea.l 140(sp),a0
    2e34:	|  |     |      move.l (a0),d0
    2e36:	|  |     |      movea.l d0,a0
    2e38:	|  |     |      cmpa.w #0,a0
    2e3c:	|  |     |  /-- bge.s 2e42 <CstScaleSprite+0x87e>
    2e3e:	|  |     |  |   lea 15(a0),a0
    2e42:	|  |     |  \-> move.l a0,d0
    2e44:	|  |     |      asr.l #4,d0
    2e46:	|  |     |      move.l d0,d0
    2e48:	|  |     |      add.w 128(sp),d0
    2e4c:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e52:	|  |     |      add.w 130(sp),d0
    2e56:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    2e5a:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e60:	|  |     |      move.l 88(sp),d0
    2e64:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    2e68:	|  |     |      move.w 16(sp),d0
    2e6c:	|  |     |  /-- bpl.s 2e72 <CstScaleSprite+0x8ae>
    2e6e:	|  |     |  |   addi.w #15,d0
    2e72:	|  |     |  \-> asr.w #4,d0
    2e74:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e7a:	|  |     |      add.w d0,d0
    2e7c:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2e80:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e86:	|  |     |      move.l 96(sp),d0
    2e8a:	|  |     |      move.w d0,14(a0)
    2e8e:	|  +-----|----- bra.w 2f22 <CstScaleSprite+0x95e>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2e92:	|  |     \----> movea.l 140(sp),a0
    2e96:	|  |            move.l (a0),d0
    2e98:	|  |            movea.l d0,a0
    2e9a:	|  |            cmpa.w #0,a0
    2e9e:	|  |        /-- bge.s 2ea4 <CstScaleSprite+0x8e0>
    2ea0:	|  |        |   lea 15(a0),a0
    2ea4:	|  |        \-> move.l a0,d0
    2ea6:	|  |            asr.l #4,d0
    2ea8:	|  |            move.l d0,d0
    2eaa:	|  |            add.w 128(sp),d0
    2eae:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2eb4:	|  |            move.l a0,d1
    2eb6:	|  |            addq.l #2,d1
    2eb8:	|  |            move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2ebe:	|  |            add.w 130(sp),d0
    2ec2:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2ec4:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2eca:	|  |            move.l a0,d0
    2ecc:	|  |            addq.l #2,d0
    2ece:	|  |            move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2ed4:	|  |            move.l 88(sp),d0
    2ed8:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2eda:	|  |            move.w 16(sp),d0
    2ede:	|  |        /-- bpl.s 2ee4 <CstScaleSprite+0x920>
    2ee0:	|  |        |   addi.w #15,d0
    2ee4:	|  |        \-> asr.w #4,d0
    2ee6:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2eec:	|  |            move.l a0,d1
    2eee:	|  |            addq.l #2,d1
    2ef0:	|  |            move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2ef6:	|  |            add.w d0,d0
    2ef8:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2efa:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2f00:	|  |            move.l a0,d0
    2f02:	|  |            addq.l #2,d0
    2f04:	|  |            move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2f0a:	|  |            move.l 96(sp),d0
    2f0e:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2f10:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2f16:	|  |            move.l a0,d0
    2f18:	|  |            addq.l #2,d0
    2f1a:	|  |            move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2f20:	|  |            clr.w (a0)

 /*if(person && person->samePosCount > 3) {
    return;
  }*/

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2f22:	|  \----------> moveq #0,d0
    2f24:	|               move.w 126(sp),d0
    2f28:	|               moveq #0,d1
    2f2a:	|               not.w d1
    2f2c:	|               asr.l d0,d1
    2f2e:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2f32:	|               moveq #0,d1
    2f34:	|               move.w 128(sp),d1
    2f38:	|               moveq #0,d0
    2f3a:	|               move.w 130(sp),d0
    2f3e:	|               sub.l d0,d1
    2f40:	|               move.l d1,d0
    2f42:	|               add.w d0,d0
    2f44:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    2f48:	|               moveq #0,d1
    2f4a:	|               move.w 128(sp),d1
    2f4e:	|               moveq #0,d0
    2f50:	|               move.w 130(sp),d0
    2f54:	|               sub.l d0,d1
    2f56:	|               move.l d1,d0
    2f58:	|               add.w d0,d0
    2f5a:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2f5e:	|               move.l 1a6f8 <winWidth>,d0
    2f64:	|               lsr.l #3,d0
    2f66:	|               move.l d0,d1
    2f68:	|               movea.l 140(sp),a0
    2f6c:	|               move.l (a0),d0
    2f6e:	|           /-- bpl.s 2f72 <CstScaleSprite+0x9ae>
    2f70:	|           |   addq.l #7,d0
    2f72:	|           \-> asr.l #3,d0
    2f74:	|               move.l d0,d0
    2f76:	|               sub.w d0,d1
    2f78:	|               move.w 128(sp),d0
    2f7c:	|               sub.w 130(sp),d0
    2f80:	|               add.w d0,d0
    2f82:	|               add.w d1,d0
    2f84:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2f88:	|               move.l 1a6f8 <winWidth>,d0
    2f8e:	|               lsr.l #3,d0
    2f90:	|               move.l d0,d1
    2f92:	|               movea.l 140(sp),a0
    2f96:	|               move.l (a0),d0
    2f98:	|           /-- bpl.s 2f9c <CstScaleSprite+0x9d8>
    2f9a:	|           |   addq.l #7,d0
    2f9c:	|           \-> asr.l #3,d0
    2f9e:	|               move.l d0,d0
    2fa0:	|               sub.w d0,d1
    2fa2:	|               move.w 128(sp),d0
    2fa6:	|               sub.w 130(sp),d0
    2faa:	|               add.w d0,d0
    2fac:	|               add.w d1,d0
    2fae:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2fb2:	|               move.l #14675968,22(sp)
  WaitBlit();
    2fba:	|               move.l 1a7b0 <GfxBase>,d0
    2fc0:	|               movea.l d0,a6
    2fc2:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2fc6:	|               movea.l 22(sp),a0
    2fca:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    2fd0:	|               movea.l 22(sp),a0
    2fd4:	|               move.w 124(sp),70(a0)
  custom->bltamod = bltamod;
    2fda:	|               move.w 32(sp),d0
    2fde:	|               movea.l 22(sp),a0
    2fe2:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    2fe6:	|               move.w 30(sp),d0
    2fea:	|               movea.l 22(sp),a0
    2fee:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    2ff2:	|               move.w 28(sp),d0
    2ff6:	|               movea.l 22(sp),a0
    2ffa:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2ffe:	|               move.w 26(sp),d0
    3002:	|               movea.l 22(sp),a0
    3006:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    300a:	|               move.l 104(sp),d0
    300e:	|               movea.l 22(sp),a0
    3012:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    3016:	|               move.l 100(sp),d0
    301a:	|               movea.l 22(sp),a0
    301e:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    3022:	|               movea.l 140(sp),a0
    3026:	|               move.l (a0),d0
    3028:	|               asr.l #3,d0
    302a:	|               move.l d0,d1
    302c:	|               movea.l 140(sp),a0
    3030:	|               move.l 4(a0),d0
    3034:	|               move.l d0,d0
    3036:	|               move.w d1,d2
    3038:	|               muls.w d0,d2
    303a:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    303e:	|               move.l 1a6f8 <winWidth>,d0
    3044:	|               lsr.l #3,d0
    3046:	|               move.l d0,d1
    3048:	|               move.l 1a6fc <winHeight>,d0
    304e:	|               move.l d0,d0
    3050:	|               move.w d1,d2
    3052:	|               muls.w d0,d2
    3054:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3058:	|               clr.l 84(sp)
    305c:	|        /----- bra.w 30f0 <CstScaleSprite+0xb2c>
  {
    custom->bltapt = (APTR) bltapt;
    3060:	|     /--|----> move.l 120(sp),d0
    3064:	|     |  |      movea.l 22(sp),a0
    3068:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    306c:	|     |  |      move.l 116(sp),d0
    3070:	|     |  |      movea.l 22(sp),a0
    3074:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    3078:	|     |  |      move.l 112(sp),d0
    307c:	|     |  |      movea.l 22(sp),a0
    3080:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    3084:	|     |  |      move.l 108(sp),d0
    3088:	|     |  |      movea.l 22(sp),a0
    308c:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3090:	|     |  |      move.l 88(sp),d0
    3094:	|     |  |      move.w d0,d1
    3096:	|     |  |      lsl.w #6,d1
    3098:	|     |  |      movea.l 140(sp),a0
    309c:	|     |  |      move.l (a0),d0
    309e:	|     |  |      movea.l d0,a0
    30a0:	|     |  |      cmpa.w #0,a0
    30a4:	|     |  |  /-- bge.s 30aa <CstScaleSprite+0xae6>
    30a6:	|     |  |  |   lea 15(a0),a0
    30aa:	|     |  |  \-> move.l a0,d0
    30ac:	|     |  |      asr.l #4,d0
    30ae:	|     |  |      move.l d0,d0
    30b0:	|     |  |      add.w d1,d0
    30b2:	|     |  |      sub.w 128(sp),d0
    30b6:	|     |  |      add.w 130(sp),d0
    30ba:	|     |  |      movea.l 22(sp),a0
    30be:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    30c2:	|     |  |      moveq #0,d0
    30c4:	|     |  |      move.w 20(sp),d0
    30c8:	|     |  |      add.l d0,116(sp)
    bltcpt += bltcptplus;
    30cc:	|     |  |      moveq #0,d0
    30ce:	|     |  |      move.w 18(sp),d0
    30d2:	|     |  |      add.l d0,112(sp)
    bltdpt += bltcptplus;
    30d6:	|     |  |      moveq #0,d0
    30d8:	|     |  |      move.w 18(sp),d0
    30dc:	|     |  |      add.l d0,108(sp)
    WaitBlit();
    30e0:	|     |  |      move.l 1a7b0 <GfxBase>,d0
    30e6:	|     |  |      movea.l d0,a6
    30e8:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    30ec:	|     |  |      addq.l #1,84(sp)
    30f0:	|     |  \----> moveq #4,d0
    30f2:	|     |         cmp.l 84(sp),d0
    30f6:	|     \-------- bge.w 3060 <CstScaleSprite+0xa9c>
  }   
}
    30fa:	\-------------> movem.l (sp)+,d2-d3/a6
    30fe:	                lea 124(sp),sp
    3102:	                rts

00003104 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3104:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3106:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    310c:	move.l 8(sp),d0
    3110:	movea.l (sp),a0
    3112:	move.l d0,128(a0)
}
    3116:	nop
    3118:	addq.l #4,sp
    311a:	rts

0000311c <CstSwapBuffer>:

void CstSwapBuffer( ) {
    311c:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3120:	move.l 1a6d4 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3128:	move.l 1a6d8 <CstDrawBuffer>,d0
    312e:	move.l d0,1a6d4 <CstViewBuffer>
  CstDrawBuffer = tmp;
    3134:	move.l 16(sp),1a6d8 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    313c:	move.l 1a6dc <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    3144:	move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    314a:	move.l d0,1a6dc <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3150:	move.l 12(sp),1a6e0 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3158:	move.l 1a6ce <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3160:	move.l 1a6d4 <CstViewBuffer>,d0
    3166:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    316a:	move.l 4(sp),d0
    316e:	clr.w d0
    3170:	swap d0
    3172:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    3176:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    317a:	movea.w #118,a0
    317e:	adda.l 8(sp),a0
    3182:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3184:	movea.w #114,a0
    3188:	adda.l 8(sp),a0
    318c:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3190:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3198:	move.l 4(sp),d0
    319c:	clr.w d0
    319e:	swap d0
    31a0:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    31a4:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    31a8:	movea.w #126,a0
    31ac:	adda.l 8(sp),a0
    31b0:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    31b2:	movea.w #122,a0
    31b6:	adda.l 8(sp),a0
    31ba:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    31be:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    31c6:	move.l 4(sp),d0
    31ca:	clr.w d0
    31cc:	swap d0
    31ce:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    31d2:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    31d6:	movea.l 8(sp),a0
    31da:	lea 134(a0),a0
    31de:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    31e0:	movea.l 8(sp),a0
    31e4:	lea 130(a0),a0
    31e8:	move.w 2(sp),(a0)

  ptr +=  40*256;
    31ec:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    31f4:	move.l 4(sp),d0
    31f8:	clr.w d0
    31fa:	swap d0
    31fc:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3200:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3204:	movea.l 8(sp),a0
    3208:	lea 142(a0),a0
    320c:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    320e:	movea.l 8(sp),a0
    3212:	lea 138(a0),a0
    3216:	move.w 2(sp),(a0)

  ptr +=  40*256;
    321a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3222:	move.l 4(sp),d0
    3226:	clr.w d0
    3228:	swap d0
    322a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    322e:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3232:	movea.l 8(sp),a0
    3236:	lea 150(a0),a0
    323a:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    323c:	movea.l 8(sp),a0
    3240:	lea 146(a0),a0
    3244:	move.w 2(sp),(a0)

}
    3248:	nop
    324a:	lea 20(sp),sp
    324e:	rts

00003250 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3250:	          lea -56(sp),sp
    3254:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3256:	          pea 176a9 <PutChar+0x341>
    325c:	          jsr 16894 <KPrintF>
    3262:	          addq.l #4,sp

  width = width / 8;
    3264:	          move.l 64(sp),d0
    3268:	      /-- bpl.s 326c <CstReserveBackdrop+0x1c>
    326a:	      |   addq.l #7,d0
    326c:	      \-> asr.l #3,d0
    326e:	          move.l d0,64(sp)

  if( width < 40) 
    3272:	          moveq #39,d0
    3274:	          cmp.l 64(sp),d0
    3278:	      /-- blt.s 328e <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    327a:	      |   pea 176c3 <PutChar+0x35b>
    3280:	      |   jsr 16894 <KPrintF>
    3286:	      |   addq.l #4,sp
    return FALSE;
    3288:	      |   clr.w d0
    328a:	/-----|-- bra.w 35d0 <CstReserveBackdrop+0x380>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    328e:	|     \-> pea 17701 <PutChar+0x399>
    3294:	|         jsr 16894 <KPrintF>
    329a:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    329c:	|         move.l 64(sp),-(sp)
    32a0:	|         jsr fce <CstCreateCopperlist>
    32a6:	|         addq.l #4,sp
    32a8:	|         move.l d0,1a6ce <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    32ae:	|         pea 17721 <PutChar+0x3b9>
    32b4:	|         jsr 16894 <KPrintF>
    32ba:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    32bc:	|         move.l 64(sp),d1
    32c0:	|         move.l 68(sp),d0
    32c4:	|         muls.w d1,d0
    32c6:	|         move.w d0,1a6c4 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    32cc:	|         move.w 1a6c4 <CstBackdropSizePlane>,d1
    32d2:	|         move.w d1,d0
    32d4:	|         add.w d0,d0
    32d6:	|         add.w d0,d0
    32d8:	|         add.w d1,d0
    32da:	|         move.w d0,1a6c2 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    32e0:	|         move.w 1a6c2 <CstBackdropSize>,d0
    32e6:	|         move.w d0,d0
    32e8:	|         andi.l #65535,d0
    32ee:	|         move.l d0,48(sp)
    32f2:	|         moveq #2,d1
    32f4:	|         move.l d1,44(sp)
    32f8:	|         move.l 1a7a4 <SysBase>,d0
    32fe:	|         movea.l d0,a6
    3300:	|         move.l 48(sp),d0
    3304:	|         move.l 44(sp),d1
    3308:	|         jsr -684(a6)
    330c:	|         move.l d0,40(sp)
    3310:	|         move.l 40(sp),d0
    3314:	|         move.l d0,1a6c6 <CstBackDrop>
  if( !CstBackDrop)
    331a:	|         move.l 1a6c6 <CstBackDrop>,d0
    3320:	|     /-- bne.s 3336 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3322:	|     |   pea 17748 <PutChar+0x3e0>
    3328:	|     |   jsr 16894 <KPrintF>
    332e:	|     |   addq.l #4,sp
    return FALSE;  
    3330:	|     |   clr.w d0
    3332:	+-----|-- bra.w 35d0 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3336:	|     \-> pea 17780 <PutChar+0x418>
    333c:	|         jsr 16894 <KPrintF>
    3342:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3344:	|         move.l 1a6c6 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    334c:	|         clr.l 52(sp)
    3350:	|     /-- bra.s 3366 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3352:	|  /--|-> move.l 56(sp),d0
    3356:	|  |  |   move.l d0,d1
    3358:	|  |  |   addq.l #4,d1
    335a:	|  |  |   move.l d1,56(sp)
    335e:	|  |  |   movea.l d0,a0
    3360:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3362:	|  |  |   addq.l #1,52(sp)
    3366:	|  |  \-> move.w 1a6c2 <CstBackdropSize>,d0
    336c:	|  |      lsr.w #2,d0
    336e:	|  |      move.w d0,d0
    3370:	|  |      andi.l #65535,d0
    3376:	|  |      cmp.l 52(sp),d0
    337a:	|  \----- bgt.s 3352 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    337c:	|         move.w 1a6c2 <CstBackdropSize>,d0
    3382:	|         move.w d0,d0
    3384:	|         andi.l #65535,d0
    338a:	|         move.l 64(sp),d1
    338e:	|         add.l d1,d1
    3390:	|         add.l d1,d0
    3392:	|         move.l d0,36(sp)
    3396:	|         moveq #2,d0
    3398:	|         move.l d0,32(sp)
    339c:	|         move.l 1a7a4 <SysBase>,d0
    33a2:	|         movea.l d0,a6
    33a4:	|         move.l 36(sp),d0
    33a8:	|         move.l 32(sp),d1
    33ac:	|         jsr -684(a6)
    33b0:	|         move.l d0,28(sp)
    33b4:	|         move.l 28(sp),d0
    33b8:	|         move.l d0,1a6d8 <CstDrawBuffer>
  if( !CstDrawBuffer)
    33be:	|         move.l 1a6d8 <CstDrawBuffer>,d0
    33c4:	|     /-- bne.s 33da <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    33c6:	|     |   pea 177a6 <PutChar+0x43e>
    33cc:	|     |   jsr 16894 <KPrintF>
    33d2:	|     |   addq.l #4,sp
    return FALSE;  
    33d4:	|     |   clr.w d0
    33d6:	+-----|-- bra.w 35d0 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    33da:	|     \-> pea 177e0 <PutChar+0x478>
    33e0:	|         jsr 16894 <KPrintF>
    33e6:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    33e8:	|         move.l #10000,24(sp)
    33f0:	|         clr.l 20(sp)
    33f4:	|         move.l 1a7a4 <SysBase>,d0
    33fa:	|         movea.l d0,a6
    33fc:	|         move.l 24(sp),d0
    3400:	|         move.l 20(sp),d1
    3404:	|         jsr -684(a6)
    3408:	|         move.l d0,16(sp)
    340c:	|         move.l 16(sp),d0
    3410:	|         move.l d0,1a6e4 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3416:	|         move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    341c:	|     /-- bne.s 3432 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    341e:	|     |   pea 17808 <PutChar+0x4a0>
    3424:	|     |   jsr 16894 <KPrintF>
    342a:	|     |   addq.l #4,sp
    return FALSE;  
    342c:	|     |   clr.w d0
    342e:	+-----|-- bra.w 35d0 <CstReserveBackdrop+0x380>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3432:	|     \-> move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    3438:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    343e:	|         movea.l 1a6e4 <CstBackDropBufferApplyStart>,a0
    3444:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3446:	|         movea.l 1a6e4 <CstBackDropBufferApplyStart>,a0
    344c:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    344e:	|         move.w 1a6c2 <CstBackdropSize>,d0
    3454:	|         move.w d0,d0
    3456:	|         andi.l #65535,d0
    345c:	|         move.l 64(sp),d1
    3460:	|         add.l d1,d1
    3462:	|         add.l d1,d0
    3464:	|         move.l d0,12(sp)
    3468:	|         moveq #2,d1
    346a:	|         move.l d1,8(sp)
    346e:	|         move.l 1a7a4 <SysBase>,d0
    3474:	|         movea.l d0,a6
    3476:	|         move.l 12(sp),d0
    347a:	|         move.l 8(sp),d1
    347e:	|         jsr -684(a6)
    3482:	|         move.l d0,4(sp)
    3486:	|         move.l 4(sp),d0
    348a:	|         move.l d0,1a6d4 <CstViewBuffer>
  if( !CstViewBuffer)
    3490:	|         move.l 1a6d4 <CstViewBuffer>,d0
    3496:	|     /-- bne.s 34ac <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3498:	|     |   pea 17853 <PutChar+0x4eb>
    349e:	|     |   jsr 16894 <KPrintF>
    34a4:	|     |   addq.l #4,sp
    return FALSE;  
    34a6:	|     |   clr.w d0
    34a8:	+-----|-- bra.w 35d0 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    34ac:	|     \-> pea 1788d <PutChar+0x525>
    34b2:	|         jsr 16894 <KPrintF>
    34b8:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    34ba:	|         move.l 1a6d8 <CstDrawBuffer>,d1
    34c0:	|         move.l 64(sp),d0
    34c4:	|     /-- bpl.s 34c8 <CstReserveBackdrop+0x278>
    34c6:	|     |   addq.l #3,d0
    34c8:	|     \-> asr.l #2,d0
    34ca:	|         add.l d0,d0
    34cc:	|         add.l d0,d0
    34ce:	|         add.l d1,d0
    34d0:	|         move.l d0,1a6d8 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    34d6:	|         move.l 1a6d4 <CstViewBuffer>,d1
    34dc:	|         move.l 64(sp),d0
    34e0:	|     /-- bpl.s 34e4 <CstReserveBackdrop+0x294>
    34e2:	|     |   addq.l #3,d0
    34e4:	|     \-> asr.l #2,d0
    34e6:	|         add.l d0,d0
    34e8:	|         add.l d0,d0
    34ea:	|         add.l d1,d0
    34ec:	|         move.l d0,1a6d4 <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    34f2:	|         move.l 1a6c6 <CstBackDrop>,d0
    34f8:	|         clr.l -(sp)
    34fa:	|         pea 5 <_start+0x5>
    34fe:	|         pea 100 <copyString+0x48>
    3502:	|         pea 140 <decodeFilename+0x28>
    3506:	|         pea 178b5 <PutChar+0x54d>
    350c:	|         move.l d0,-(sp)
    350e:	|         jsr 1697c <debug_register_bitmap>
    3514:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3518:	|         move.l 68(sp),d0
    351c:	|         movea.w d0,a1
    351e:	|         move.l 64(sp),d0
    3522:	|         lsl.w #3,d0
    3524:	|         movea.w d0,a0
    3526:	|         move.l 1a6d8 <CstDrawBuffer>,d0
    352c:	|         clr.l -(sp)
    352e:	|         pea 5 <_start+0x5>
    3532:	|         move.l a1,-(sp)
    3534:	|         move.l a0,-(sp)
    3536:	|         pea 178c5 <PutChar+0x55d>
    353c:	|         move.l d0,-(sp)
    353e:	|         jsr 1697c <debug_register_bitmap>
    3544:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3548:	|         move.l 68(sp),d0
    354c:	|         movea.w d0,a1
    354e:	|         move.l 64(sp),d0
    3552:	|         lsl.w #3,d0
    3554:	|         movea.w d0,a0
    3556:	|         move.l 1a6d4 <CstViewBuffer>,d0
    355c:	|         clr.l -(sp)
    355e:	|         pea 5 <_start+0x5>
    3562:	|         move.l a1,-(sp)
    3564:	|         move.l a0,-(sp)
    3566:	|         pea 178d4 <PutChar+0x56c>
    356c:	|         move.l d0,-(sp)
    356e:	|         jsr 1697c <debug_register_bitmap>
    3574:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3578:	|         move.l 1a6ce <CstCopperList>,d0
    357e:	|     /-- beq.s 3590 <CstReserveBackdrop+0x340>
    3580:	|     |   move.l 1a6d8 <CstDrawBuffer>,d0
    3586:	|     +-- beq.s 3590 <CstReserveBackdrop+0x340>
    3588:	|     |   move.l 1a6d4 <CstViewBuffer>,d0
    358e:	|  /--|-- bne.s 35a2 <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3590:	|  |  \-> pea 178e3 <PutChar+0x57b>
    3596:	|  |      jsr 16894 <KPrintF>
    359c:	|  |      addq.l #4,sp
    return FALSE;
    359e:	|  |      clr.w d0
    35a0:	+--|----- bra.s 35d0 <CstReserveBackdrop+0x380>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    35a2:	|  \----> pea 17910 <PutChar+0x5a8>
    35a8:	|         jsr 16894 <KPrintF>
    35ae:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    35b0:	|         move.l 1a6ce <CstCopperList>,d0
    35b6:	|         move.l d0,-(sp)
    35b8:	|         jsr 3104 <CstSetCl>
    35be:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    35c0:	|         pea 17937 <PutChar+0x5cf>
    35c6:	|         jsr 16894 <KPrintF>
    35cc:	|         addq.l #4,sp
  return TRUE;
    35ce:	|         moveq #1,d0

}
    35d0:	\-------> movea.l (sp)+,a6
    35d2:	          lea 56(sp),sp
    35d6:	          rts

000035d8 <CstUnfreeze>:

void CstUnfreeze() {
    35d8:	       lea -24(sp),sp
    35dc:	       move.l a6,-(sp)
    35de:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    35e0:	       pea 1795a <PutChar+0x5f2>
    35e6:	       jsr 16894 <KPrintF>
    35ec:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    35ee:	       move.l 1a6f8 <winWidth>,d0
    35f4:	       lsr.l #3,d0
    35f6:	       move.l d0,d1
    35f8:	       move.l 1a6fc <winHeight>,d0
    35fe:	       move.l d0,d0
    3600:	       muls.w d0,d1
    3602:	       move.w d1,d0
    3604:	       add.w d0,d0
    3606:	       add.w d0,d0
    3608:	       move.w d0,d2
    360a:	       add.w d1,d2
    360c:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3610:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3618:	       move.l 1a6fc <winHeight>,d0
    361e:	       move.l d0,d0
    3620:	       movea.w d0,a1
    3622:	       move.l 1a6f8 <winWidth>,d0
    3628:	       move.l d0,d0
    362a:	       movea.w d0,a0
    362c:	       move.l 1a6ca <CstBackDropBackup>,d0
    3632:	       clr.l -(sp)
    3634:	       pea 5 <_start+0x5>
    3638:	       move.l a1,-(sp)
    363a:	       move.l a0,-(sp)
    363c:	       pea 1752c <PutChar+0x1c4>
    3642:	       move.l d0,-(sp)
    3644:	       jsr 1697c <debug_register_bitmap>
    364a:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    364e:	       move.l 1a6ca <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3656:	       move.l 1a6c6 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    365e:	       clr.l 20(sp)
    3662:	   /-- bra.s 3688 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3664:	/--|-> move.l 28(sp),d1
    3668:	|  |   move.l d1,d0
    366a:	|  |   addq.l #4,d0
    366c:	|  |   move.l d0,28(sp)
    3670:	|  |   move.l 24(sp),d0
    3674:	|  |   move.l d0,d2
    3676:	|  |   addq.l #4,d2
    3678:	|  |   move.l d2,24(sp)
    367c:	|  |   movea.l d1,a0
    367e:	|  |   move.l (a0),d1
    3680:	|  |   movea.l d0,a0
    3682:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3684:	|  |   addq.l #1,20(sp)
    3688:	|  \-> move.w 18(sp),d0
    368c:	|      lsr.w #2,d0
    368e:	|      move.w d0,d0
    3690:	|      andi.l #65535,d0
    3696:	|      cmp.l 20(sp),d0
    369a:	\----- bgt.s 3664 <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    369c:	       move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    36a4:	       move.l 1a6f8 <winWidth>,d0
    36aa:	       lsr.l #4,d0
    36ac:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    36b2:	       move.l a0,d1
    36b4:	       addq.l #2,d1
    36b6:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    36bc:	       move.l d0,d0
    36be:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    36c0:	       move.l 1a6fc <winHeight>,d0
    36c6:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    36cc:	       move.l a0,d1
    36ce:	       addq.l #2,d1
    36d0:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    36d6:	       move.l d0,d0
    36d8:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    36da:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    36e0:	       move.l a0,d0
    36e2:	       addq.l #2,d0
    36e4:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    36ea:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    36ec:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    36f2:	       move.l a0,d0
    36f4:	       addq.l #2,d0
    36f6:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    36fc:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    36fe:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3704:	       move.l a0,d0
    3706:	       addq.l #2,d0
    3708:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    370e:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    3710:	       move.l 1a6ca <CstBackDropBackup>,d0
    3716:	   /-- bne.s 3730 <CstUnfreeze+0x158>
    FreeVec( CstBackDropBackup);
    3718:	   |   move.l 1a6ca <CstBackDropBackup>,10(sp)
    3720:	   |   move.l 1a7a4 <SysBase>,d0
    3726:	   |   movea.l d0,a6
    3728:	   |   movea.l 10(sp),a1
    372c:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    3730:	   \-> pea 1753b <PutChar+0x1d3>
    3736:	       jsr 16894 <KPrintF>
    373c:	       addq.l #4,sp

}
    373e:	       nop
    3740:	       move.l (sp)+,d2
    3742:	       movea.l (sp)+,a6
    3744:	       lea 24(sp),sp
    3748:	       rts

0000374a <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    374a:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    374e:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3752:	       tst.l 24(sp)
    3756:	   /-- bge.s 375c <drawLine+0x12>
    3758:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    375c:	   \-> tst.l 28(sp)
    3760:	   /-- bge.s 3766 <drawLine+0x1c>
    3762:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3766:	   \-> tst.l 32(sp)
    376a:	   /-- bge.s 3770 <drawLine+0x26>
    376c:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3770:	   \-> tst.l 36(sp)
    3774:	   /-- bge.s 377a <drawLine+0x30>
    3776:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    377a:	   \-> move.l 1a854 <sceneWidth>,d0
    3780:	       cmp.l 24(sp),d0
    3784:	   /-- bge.s 3794 <drawLine+0x4a>
    3786:	   |   move.l 1a854 <sceneWidth>,d0
    378c:	   |   move.l d0,d1
    378e:	   |   subq.l #1,d1
    3790:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3794:	   \-> move.l 1a854 <sceneWidth>,d0
    379a:	       cmp.l 32(sp),d0
    379e:	   /-- bge.s 37ae <drawLine+0x64>
    37a0:	   |   move.l 1a854 <sceneWidth>,d0
    37a6:	   |   move.l d0,d1
    37a8:	   |   subq.l #1,d1
    37aa:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    37ae:	   \-> move.l 1a858 <sceneHeight>,d0
    37b4:	       cmp.l 28(sp),d0
    37b8:	   /-- bge.s 37c8 <drawLine+0x7e>
    37ba:	   |   move.l 1a858 <sceneHeight>,d0
    37c0:	   |   move.l d0,d1
    37c2:	   |   subq.l #1,d1
    37c4:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    37c8:	   \-> move.l 1a858 <sceneHeight>,d0
    37ce:	       cmp.l 36(sp),d0
    37d2:	   /-- bge.s 37e2 <drawLine+0x98>
    37d4:	   |   move.l 1a858 <sceneHeight>,d0
    37da:	   |   move.l d0,d1
    37dc:	   |   subq.l #1,d1
    37de:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    37e2:	   \-> move.l 24(sp),d0
    37e6:	       cmp.l 32(sp),d0
    37ea:	/----- ble.s 3806 <drawLine+0xbc>
		x = x2; 
    37ec:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    37f2:	|      tst.w 10(sp)
    37f6:	|      seq d0
    37f8:	|      neg.b d0
    37fa:	|      move.b d0,d0
    37fc:	|      andi.w #255,d0
    3800:	|      move.w d0,10(sp)
    3804:	|  /-- bra.s 380c <drawLine+0xc2>
	} else x = x1;
    3806:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    380c:	   \-> move.l 28(sp),d1
    3810:	       cmp.l 36(sp),d1
    3814:	/----- ble.s 3830 <drawLine+0xe6>
		y = y2; 
    3816:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    381c:	|      tst.w 10(sp)
    3820:	|      seq d0
    3822:	|      neg.b d0
    3824:	|      move.b d0,d0
    3826:	|      andi.w #255,d0
    382a:	|      move.w d0,10(sp)
    382e:	|  /-- bra.s 3836 <drawLine+0xec>
	} else y = y1;	
    3830:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    3836:	   \-> move.l 32(sp),d0
    383a:	       sub.l 24(sp),d0
    383e:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    3842:	       move.l 6(sp),d0
    3846:	   /-- bpl.s 384a <drawLine+0x100>
    3848:	   |   neg.l d0
    384a:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    384e:	       move.l 36(sp),d1
    3852:	       sub.l 28(sp),d1
    3856:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    385a:	       move.l 2(sp),d0
    385e:	   /-- bpl.s 3862 <drawLine+0x118>
    3860:	   |   neg.l d0
    3862:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    3866:	       tst.l 6(sp)
    386a:	   /-- bne.s 388e <drawLine+0x144>
		diffX = 1;
    386c:	   |   moveq #1,d0
    386e:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    3872:	   |   move.l 1a854 <sceneWidth>,d0
    3878:	   |   subq.l #1,d0
    387a:	   |   cmp.l 16(sp),d0
    387e:	   +-- bne.s 388e <drawLine+0x144>
    3880:	   |   move.l 1a854 <sceneWidth>,d0
    3886:	   |   move.l d0,d1
    3888:	   |   subq.l #2,d1
    388a:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    388e:	   \-> tst.l 2(sp)
    3892:	   /-- bne.s 38b6 <drawLine+0x16c>
		diffY = 1;
    3894:	   |   moveq #1,d0
    3896:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    389a:	   |   move.l 1a858 <sceneHeight>,d0
    38a0:	   |   subq.l #1,d0
    38a2:	   |   cmp.l 12(sp),d0
    38a6:	   +-- bne.s 38b6 <drawLine+0x16c>
    38a8:	   |   move.l 1a858 <sceneHeight>,d0
    38ae:	   |   move.l d0,d1
    38b0:	   |   subq.l #2,d1
    38b2:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    38b6:	   \-> pea 17985 <PutChar+0x61d>
    38bc:	       jsr 16894 <KPrintF>
    38c2:	       addq.l #4,sp
	
}
    38c4:	       nop
    38c6:	       lea 20(sp),sp
    38ca:	       rts

000038cc <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    38cc:	                      lea -24(sp),sp
    38d0:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    38d2:	                      move.l 1a700 <firstTexture>,d0
    38d8:	/-------------------- beq.w 39b6 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    38dc:	|                     clr.l 24(sp)
    38e0:	|     /-------------- bra.w 39aa <deleteTextures+0xde>
			BOOL found = FALSE;
    38e4:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    38e8:	|  |  |               move.l 1a700 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    38f0:	|  |  |               movea.l 20(sp),a0
    38f4:	|  |  |               move.l (a0),d1
    38f6:	|  |  |               move.l 24(sp),d0
    38fa:	|  |  |               add.l d0,d0
    38fc:	|  |  |               add.l d0,d0
    38fe:	|  |  |               movea.l 36(sp),a0
    3902:	|  |  |               adda.l d0,a0
    3904:	|  |  |               move.l (a0),d0
    3906:	|  |  |               cmp.l d1,d0
    3908:	|  |  |  /----------- bne.w 399c <deleteTextures+0xd0>
				found = TRUE;
    390c:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    3912:	|  |  |  |            movea.l 20(sp),a0
    3916:	|  |  |  |            move.l 12(a0),d0
    391a:	|  |  |  |            move.l d0,1a700 <firstTexture>
				FreeVec(list);
    3920:	|  |  |  |            move.l 20(sp),6(sp)
    3926:	|  |  |  |            move.l 1a7a4 <SysBase>,d0
    392c:	|  |  |  |            movea.l d0,a6
    392e:	|  |  |  |            movea.l 6(sp),a1
    3932:	|  |  |  |            jsr -690(a6)
				continue;
    3936:	|  |  |  |  /-------- bra.s 39a6 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    3938:	|  |  |  |  |  /----> movea.l 20(sp),a0
    393c:	|  |  |  |  |  |      movea.l 12(a0),a0
    3940:	|  |  |  |  |  |      move.l (a0),d1
    3942:	|  |  |  |  |  |      move.l 24(sp),d0
    3946:	|  |  |  |  |  |      add.l d0,d0
    3948:	|  |  |  |  |  |      add.l d0,d0
    394a:	|  |  |  |  |  |      movea.l 36(sp),a0
    394e:	|  |  |  |  |  |      adda.l d0,a0
    3950:	|  |  |  |  |  |      move.l (a0),d0
    3952:	|  |  |  |  |  |      cmp.l d1,d0
    3954:	|  |  |  |  |  |  /-- bne.s 3992 <deleteTextures+0xc6>
					found = TRUE;
    3956:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    395c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3960:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    3966:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    396a:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    396e:	|  |  |  |  |  |  |   move.l 12(a0),d0
    3972:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3976:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    397a:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    3980:	|  |  |  |  |  |  |   move.l 1a7a4 <SysBase>,d0
    3986:	|  |  |  |  |  |  |   movea.l d0,a6
    3988:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    398c:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    3990:	|  |  |  |  +--|--|-- bra.s 39a6 <deleteTextures+0xda>
				}
				list = list->next;
    3992:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    3996:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    399c:	|  |  |  \--|--|----> movea.l 20(sp),a0
    39a0:	|  |  |     |  |      move.l 12(a0),d0
    39a4:	|  |  |     |  \----- bne.s 3938 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    39a6:	|  |  |     \-------> addq.l #1,24(sp)
    39aa:	|  |  \-------------> move.l 24(sp),d0
    39ae:	|  |                  cmp.l 32(sp),d0
    39b2:	|  \----------------- bcs.w 38e4 <deleteTextures+0x18>
			}
		}
	}
}
    39b6:	\-------------------> nop
    39b8:	                      movea.l (sp)+,a6
    39ba:	                      lea 24(sp),sp
    39be:	                      rts

000039c0 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    39c0:	subq.l #4,sp
    39c2:	move.l 8(sp),d0
    39c6:	move.w d0,d0
    39c8:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    39cc:	pea 179a8 <PutChar+0x640>
    39d2:	jsr 16894 <KPrintF>
    39d8:	addq.l #4,sp
}
    39da:	nop
    39dc:	addq.l #4,sp
    39de:	rts

000039e0 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    39e0:	       moveq #-1,d0
    39e2:	       cmp.l 4(sp),d0
    39e6:	   /-- bne.s 39ec <resourceNameFromNum+0xc>
    39e8:	   |   moveq #0,d0
    39ea:	/--|-- bra.s 3a24 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    39ec:	|  \-> move.l 1a780 <numResourceNames>,d0
    39f2:	|  /-- bne.s 39fc <resourceNameFromNum+0x1c>
    39f4:	|  |   move.l #96728,d0
    39fa:	+--|-- bra.s 3a24 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    39fc:	|  \-> move.l 1a780 <numResourceNames>,d0
    3a02:	|      cmp.l 4(sp),d0
    3a06:	|  /-- ble.s 3a1e <resourceNameFromNum+0x3e>
    3a08:	|  |   move.l 1a738 <allResourceNames>,d1
    3a0e:	|  |   move.l 4(sp),d0
    3a12:	|  |   add.l d0,d0
    3a14:	|  |   add.l d0,d0
    3a16:	|  |   movea.l d1,a0
    3a18:	|  |   adda.l d0,a0
    3a1a:	|  |   move.l (a0),d0
    3a1c:	+--|-- bra.s 3a24 <resourceNameFromNum+0x44>
	return "Unknown resource";
    3a1e:	|  \-> move.l #96737,d0
    3a24:	\----> rts

00003a26 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    3a26:	          lea -44(sp),sp
    3a2a:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    3a2e:	          move.l #320,1a6f8 <winWidth>
    winHeight = 256;
    3a38:	          move.l #256,1a6fc <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    3a42:	          tst.l 60(sp)
    3a46:	      /-- bne.s 3a5e <main_sludge+0x38>
		bundleFolder = copyString("game/");
    3a48:	      |   pea 179f2 <PutChar+0x68a>
    3a4e:	      |   jsr b8 <copyString>
    3a54:	      |   addq.l #4,sp
    3a56:	      |   move.l d0,1a710 <bundleFolder>
    3a5c:	   /--|-- bra.s 3a74 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    3a5e:	   |  \-> movea.l 64(sp),a0
    3a62:	   |      move.l (a0),d0
    3a64:	   |      move.l d0,-(sp)
    3a66:	   |      jsr b8 <copyString>
    3a6c:	   |      addq.l #4,sp
    3a6e:	   |      move.l d0,1a710 <bundleFolder>
	}
    
	int lastSlash = -1;
    3a74:	   \----> moveq #-1,d0
    3a76:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    3a7a:	          clr.l 44(sp)
    3a7e:	   /----- bra.s 3aa0 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    3a80:	/--|----> move.l 1a710 <bundleFolder>,d1
    3a86:	|  |      move.l 44(sp),d0
    3a8a:	|  |      movea.l d1,a0
    3a8c:	|  |      adda.l d0,a0
    3a8e:	|  |      move.b (a0),d0
    3a90:	|  |      cmpi.b #47,d0
    3a94:	|  |  /-- bne.s 3a9c <main_sludge+0x76>
    3a96:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    3a9c:	|  |  \-> addq.l #1,44(sp)
    3aa0:	|  \----> move.l 1a710 <bundleFolder>,d1
    3aa6:	|         move.l 44(sp),d0
    3aaa:	|         movea.l d1,a0
    3aac:	|         adda.l d0,a0
    3aae:	|         move.b (a0),d0
    3ab0:	\-------- bne.s 3a80 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    3ab2:	          move.l 1a710 <bundleFolder>,d0
    3ab8:	          move.l 48(sp),d1
    3abc:	          addq.l #1,d1
    3abe:	          movea.l d0,a0
    3ac0:	          adda.l d1,a0
    3ac2:	          clr.b (a0)

	if (argc > 1) {
    3ac4:	          moveq #1,d0
    3ac6:	          cmp.l 60(sp),d0
    3aca:	      /-- bge.s 3ae6 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    3acc:	      |   move.l 60(sp),d0
    3ad0:	      |   addi.l #1073741823,d0
    3ad6:	      |   add.l d0,d0
    3ad8:	      |   add.l d0,d0
    3ada:	      |   movea.l 64(sp),a0
    3ade:	      |   adda.l d0,a0
    3ae0:	      |   move.l (a0),52(sp)
    3ae4:	   /--|-- bra.s 3b40 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    3ae6:	   |  \-> move.l 1a710 <bundleFolder>,d0
    3aec:	   |      pea 179f8 <PutChar+0x690>
    3af2:	   |      move.l d0,-(sp)
    3af4:	   |      jsr 133c2 <joinStrings>
    3afa:	   |      addq.l #8,sp
    3afc:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    3b00:	   |      move.l 52(sp),-(sp)
    3b04:	   |      jsr 132bc <fileExists>
    3b0a:	   |      addq.l #4,sp
    3b0c:	   |      tst.b d0
    3b0e:	   +----- bne.s 3b40 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    3b10:	   |      move.l 52(sp),40(sp)
    3b16:	   |      move.l 1a7a4 <SysBase>,d0
    3b1c:	   |      movea.l d0,a6
    3b1e:	   |      movea.l 40(sp),a1
    3b22:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    3b26:	   |      move.l 1a710 <bundleFolder>,d0
    3b2c:	   |      pea 17a05 <PutChar+0x69d>
    3b32:	   |      move.l d0,-(sp)
    3b34:	   |      jsr 133c2 <joinStrings>
    3b3a:	   |      addq.l #8,sp
    3b3c:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    3b40:	   \----> pea 17a0e <PutChar+0x6a6>
    3b46:	          jsr 16894 <KPrintF>
    3b4c:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    3b4e:	          move.l 52(sp),-(sp)
    3b52:	          jsr 132bc <fileExists>
    3b58:	          addq.l #4,sp
    3b5a:	          tst.b d0
    3b5c:	      /-- bne.s 3bb4 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    3b5e:	      |   move.l 1a7ac <DOSBase>,d0
    3b64:	      |   movea.l d0,a6
    3b66:	      |   jsr -60(a6)
    3b6a:	      |   move.l d0,28(sp)
    3b6e:	      |   move.l 28(sp),d0
    3b72:	      |   move.l d0,24(sp)
    3b76:	      |   move.l #96782,20(sp)
    3b7e:	      |   moveq #21,d0
    3b80:	      |   move.l d0,16(sp)
    3b84:	      |   move.l 1a7ac <DOSBase>,d0
    3b8a:	      |   movea.l d0,a6
    3b8c:	      |   move.l 24(sp),d1
    3b90:	      |   move.l 20(sp),d2
    3b94:	      |   move.l 16(sp),d3
    3b98:	      |   jsr -48(a6)
    3b9c:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    3ba0:	      |   pea 17a0e <PutChar+0x6a6>
    3ba6:	      |   jsr 16894 <KPrintF>
    3bac:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    3bae:	      |   moveq #0,d0
    3bb0:	/-----|-- bra.w 3dac <main_sludge+0x386>
	}

	KPrintF("Setgamefilepath\n");
    3bb4:	|     \-> pea 17a24 <PutChar+0x6bc>
    3bba:	|         jsr 16894 <KPrintF>
    3bc0:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    3bc2:	|         move.l 52(sp),-(sp)
    3bc6:	|         jsr 3db6 <setGameFilePath>
    3bcc:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    3bce:	|         move.l 52(sp),-(sp)
    3bd2:	|         jsr 5364 <initSludge>
    3bd8:	|         addq.l #4,sp
    3bda:	|         tst.w d0
    3bdc:	|     /-- bne.s 3be4 <main_sludge+0x1be>
    3bde:	|     |   moveq #0,d0
    3be0:	+-----|-- bra.w 3dac <main_sludge+0x386>
	
	if( winWidth != 320 || winHeight != 256) {
    3be4:	|     \-> move.l 1a6f8 <winWidth>,d0
    3bea:	|         cmpi.l #320,d0
    3bf0:	|     /-- bne.s 3c00 <main_sludge+0x1da>
    3bf2:	|     |   move.l 1a6fc <winHeight>,d0
    3bf8:	|     |   cmpi.l #256,d0
    3bfe:	|  /--|-- beq.s 3c22 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    3c00:	|  |  \-> pea 17a35 <PutChar+0x6cd>
    3c06:	|  |      jsr 16894 <KPrintF>
    3c0c:	|  |      addq.l #4,sp
		winWidth = 320;
    3c0e:	|  |      move.l #320,1a6f8 <winWidth>
		winHeight = 256;
    3c18:	|  |      move.l #256,1a6fc <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    3c22:	|  \----> pea 17ab2 <PutChar+0x74a>
    3c28:	|         jsr 16894 <KPrintF>
    3c2e:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    3c30:	|         move.l 1a6fc <winHeight>,d0
    3c36:	|         move.l d0,d1
    3c38:	|         move.l 1a6f8 <winWidth>,d0
    3c3e:	|         move.l d1,-(sp)
    3c40:	|         move.l d0,-(sp)
    3c42:	|         jsr cade <resizeBackdrop>
    3c48:	|         addq.l #8,sp
    3c4a:	|         tst.w d0
    3c4c:	|     /-- bne.s 3c62 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    3c4e:	|     |   pea 17ac5 <PutChar+0x75d>
    3c54:	|     |   jsr 16894 <KPrintF>
    3c5a:	|     |   addq.l #4,sp
		return FALSE;
    3c5c:	|     |   moveq #0,d0
    3c5e:	+-----|-- bra.w 3dac <main_sludge+0x386>
	}

	KPrintF("Init People\n");
    3c62:	|     \-> pea 17aeb <PutChar+0x783>
    3c68:	|         jsr 16894 <KPrintF>
    3c6e:	|         addq.l #4,sp
	if (! initPeople ())
    3c70:	|         jsr a0ca <initPeople>
    3c76:	|         tst.w d0
    3c78:	|     /-- bne.s 3c8e <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    3c7a:	|     |   pea 17af8 <PutChar+0x790>
    3c80:	|     |   jsr 16894 <KPrintF>
    3c86:	|     |   addq.l #4,sp
		return FALSE;
    3c88:	|     |   moveq #0,d0
    3c8a:	+-----|-- bra.w 3dac <main_sludge+0x386>
	}

	KPrintF("Init Floor\n");
    3c8e:	|     \-> pea 17b19 <PutChar+0x7b1>
    3c94:	|         jsr 16894 <KPrintF>
    3c9a:	|         addq.l #4,sp
	if (! initFloor ())
    3c9c:	|         jsr 15c4a <initFloor>
    3ca2:	|         tst.w d0
    3ca4:	|     /-- bne.s 3cba <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    3ca6:	|     |   pea 17b25 <PutChar+0x7bd>
    3cac:	|     |   jsr 16894 <KPrintF>
    3cb2:	|     |   addq.l #4,sp
		
		return FALSE;
    3cb4:	|     |   moveq #0,d0
    3cb6:	+-----|-- bra.w 3dac <main_sludge+0x386>
	}

	KPrintF("Init Objecttype\n");
    3cba:	|     \-> pea 17b45 <PutChar+0x7dd>
    3cc0:	|         jsr 16894 <KPrintF>
    3cc6:	|         addq.l #4,sp
	if (! initObjectTypes ())
    3cc8:	|         jsr cc9a <initObjectTypes>
    3cce:	|         tst.w d0
    3cd0:	|     /-- bne.s 3ce6 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    3cd2:	|     |   pea 17b56 <PutChar+0x7ee>
    3cd8:	|     |   jsr 16894 <KPrintF>
    3cde:	|     |   addq.l #4,sp
		return FALSE;
    3ce0:	|     |   moveq #0,d0
    3ce2:	+-----|-- bra.w 3dac <main_sludge+0x386>
	}

	KPrintF("Init speech\n");
    3ce6:	|     \-> pea 17b7c <PutChar+0x814>
    3cec:	|         jsr 16894 <KPrintF>
    3cf2:	|         addq.l #4,sp
	initSpeech ();
    3cf4:	|         jsr 7778 <initSpeech>
	KPrintF("Init status bar\n");
    3cfa:	|         pea 17b89 <PutChar+0x821>
    3d00:	|         jsr 16894 <KPrintF>
    3d06:	|         addq.l #4,sp
	initStatusBar ();
    3d08:	|         jsr 723c <initStatusBar>

	KPrintF("Get numbered string\n");
    3d0e:	|         pea 17b9a <PutChar+0x832>
    3d14:	|         jsr 16894 <KPrintF>
    3d1a:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    3d1c:	|         pea 1 <_start+0x1>
    3d20:	|         jsr 655a <getNumberedString>
    3d26:	|         addq.l #4,sp
    3d28:	|         move.l d0,1a708 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    3d2e:	|         pea 17baf <PutChar+0x847>
    3d34:	|         jsr 16894 <KPrintF>
    3d3a:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    3d3c:	|         move.l 1a774 <noStack>,d0
    3d42:	|         pea 1 <_start+0x1>
    3d46:	|         move.l d0,-(sp)
    3d48:	|         clr.l -(sp)
    3d4a:	|         clr.l -(sp)
    3d4c:	|         clr.l -(sp)
    3d4e:	|         jsr 63b0 <startNewFunctionNum>
    3d54:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    3d58:	|         pea 17bc7 <PutChar+0x85f>
    3d5e:	|         jsr 16894 <KPrintF>
    3d64:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    3d66:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    3d6e:	|         clr.l 1a714 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    3d74:	|     /-- bra.s 3d8e <main_sludge+0x368>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    3d76:	|  /--|-> jsr 6340 <sludgeDisplay>
		CsiCheckInput();
    3d7c:	|  |  |   jsr c612 <CsiCheckInput>
		handleInput();
    3d82:	|  |  |   jsr 50fe <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    3d88:	|  |  |   jsr 167c8 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    3d8e:	|  |  \-> move.l 1a714 <weAreDoneSoQuit>,d0
    3d94:	|  \----- beq.s 3d76 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    3d96:	|         move.l 52(sp),32(sp)
    3d9c:	|         move.l 1a7a4 <SysBase>,d0
    3da2:	|         movea.l d0,a6
    3da4:	|         movea.l 32(sp),a1
    3da8:	|         jsr -690(a6)
}
    3dac:	\-------> movem.l (sp)+,d2-d3/a6
    3db0:	          lea 44(sp),sp
    3db4:	          rts

00003db6 <setGameFilePath>:

void setGameFilePath (char * f) {
    3db6:	          lea -1104(sp),sp
    3dba:	          move.l a6,-(sp)
    3dbc:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    3dbe:	          move.l #1112,d0
    3dc4:	          add.l sp,d0
    3dc6:	          addi.l #-1102,d0
    3dcc:	          move.l d0,1100(sp)
    3dd0:	          move.l #998,1096(sp)
    3dd8:	          move.l 1a7ac <DOSBase>,d0
    3dde:	          movea.l d0,a6
    3de0:	          move.l 1100(sp),d1
    3de4:	          move.l 1096(sp),d2
    3de8:	          jsr -564(a6)
    3dec:	          move.w d0,1094(sp)
    3df0:	          move.w 1094(sp),d0
    3df4:	      /-- bne.s 3e04 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    3df6:	      |   pea 17bda <PutChar+0x872>
    3dfc:	      |   jsr 16894 <KPrintF>
    3e02:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    3e04:	      \-> moveq #-1,d0
    3e06:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    3e0a:	          clr.l 1104(sp)
    3e0e:	   /----- bra.s 3e2c <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    3e10:	/--|----> move.l 1104(sp),d0
    3e14:	|  |      movea.l 1116(sp),a0
    3e18:	|  |      adda.l d0,a0
    3e1a:	|  |      move.b (a0),d0
    3e1c:	|  |      cmpi.b #47,d0
    3e20:	|  |  /-- bne.s 3e28 <setGameFilePath+0x72>
    3e22:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    3e28:	|  |  \-> addq.l #1,1104(sp)
    3e2c:	|  \----> move.l 1104(sp),d0
    3e30:	|         movea.l 1116(sp),a0
    3e34:	|         adda.l d0,a0
    3e36:	|         move.b (a0),d0
    3e38:	\-------- bne.s 3e10 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    3e3a:	          moveq #-1,d0
    3e3c:	          cmp.l 1108(sp),d0
    3e40:	   /----- beq.s 3eba <setGameFilePath+0x104>
		f[got] = 0;	
    3e42:	   |      move.l 1108(sp),d0
    3e46:	   |      movea.l 1116(sp),a0
    3e4a:	   |      adda.l d0,a0
    3e4c:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    3e4e:	   |      move.l 1116(sp),1090(sp)
    3e54:	   |      moveq #-2,d0
    3e56:	   |      move.l d0,1086(sp)
    3e5a:	   |      move.l 1a7ac <DOSBase>,d0
    3e60:	   |      movea.l d0,a6
    3e62:	   |      move.l 1090(sp),d1
    3e66:	   |      move.l 1086(sp),d2
    3e6a:	   |      jsr -84(a6)
    3e6e:	   |      move.l d0,1082(sp)
    3e72:	   |      move.l 1082(sp),d0
    3e76:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    3e7a:	   |      move.l 1078(sp),1074(sp)
    3e80:	   |      move.l 1a7ac <DOSBase>,d0
    3e86:	   |      movea.l d0,a6
    3e88:	   |      move.l 1074(sp),d1
    3e8c:	   |      jsr -126(a6)
    3e90:	   |      move.l d0,1070(sp)
    3e94:	   |      move.l 1070(sp),d0
    3e98:	   |  /-- bne.s 3eac <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    3e9a:	   |  |   move.l 1116(sp),-(sp)
    3e9e:	   |  |   pea 17c00 <PutChar+0x898>
    3ea4:	   |  |   jsr 16894 <KPrintF>
    3eaa:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    3eac:	   |  \-> move.l 1108(sp),d0
    3eb0:	   |      movea.l 1116(sp),a0
    3eb4:	   |      adda.l d0,a0
    3eb6:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    3eba:	   \----> move.l #400,1066(sp)
    3ec2:	          clr.l 1062(sp)
    3ec6:	          move.l 1a7a4 <SysBase>,d0
    3ecc:	          movea.l d0,a6
    3ece:	          move.l 1066(sp),d0
    3ed2:	          move.l 1062(sp),d1
    3ed6:	          jsr -684(a6)
    3eda:	          move.l d0,1058(sp)
    3ede:	          move.l 1058(sp),d0
    3ee2:	          move.l d0,1a70c <gamePath>
	if (gamePath==0) {
    3ee8:	          move.l 1a70c <gamePath>,d0
    3eee:	      /-- bne.s 3f02 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    3ef0:	      |   pea 17c33 <PutChar+0x8cb>
    3ef6:	      |   jsr 16894 <KPrintF>
    3efc:	      |   addq.l #4,sp
    3efe:	   /--|-- bra.w 3fea <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    3f02:	   |  \-> move.l 1a70c <gamePath>,1054(sp)
    3f0a:	   |      moveq #-2,d0
    3f0c:	   |      move.l d0,1050(sp)
    3f10:	   |      move.l 1a7ac <DOSBase>,d0
    3f16:	   |      movea.l d0,a6
    3f18:	   |      move.l 1054(sp),d1
    3f1c:	   |      move.l 1050(sp),d2
    3f20:	   |      jsr -84(a6)
    3f24:	   |      move.l d0,1046(sp)
    3f28:	   |      move.l 1046(sp),d0
    3f2c:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    3f30:	   |      move.l 1042(sp),1038(sp)
    3f36:	   |      move.l 1a7ac <DOSBase>,d0
    3f3c:	   |      movea.l d0,a6
    3f3e:	   |      move.l 1038(sp),d1
    3f42:	   |      jsr -126(a6)
    3f46:	   |      move.l d0,1034(sp)
    3f4a:	   |      move.l 1034(sp),d0
    3f4e:	   |  /-- bne.s 3f5e <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    3f50:	   |  |   pea 17c6e <PutChar+0x906>
    3f56:	   |  |   jsr 16894 <KPrintF>
    3f5c:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    3f5e:	   |  \-> move.l #1112,d0
    3f64:	   |      add.l sp,d0
    3f66:	   |      addi.l #-1102,d0
    3f6c:	   |      move.l d0,1030(sp)
    3f70:	   |      moveq #-2,d0
    3f72:	   |      move.l d0,1026(sp)
    3f76:	   |      move.l 1a7ac <DOSBase>,d0
    3f7c:	   |      movea.l d0,a6
    3f7e:	   |      move.l 1030(sp),d1
    3f82:	   |      move.l 1026(sp),d2
    3f86:	   |      jsr -84(a6)
    3f8a:	   |      move.l d0,1022(sp)
    3f8e:	   |      move.l 1022(sp),d0
    3f92:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    3f96:	   |      move.l 1042(sp),1018(sp)
    3f9c:	   |      move.l 1a7ac <DOSBase>,d0
    3fa2:	   |      movea.l d0,a6
    3fa4:	   |      move.l 1018(sp),d1
    3fa8:	   |      jsr -126(a6)
    3fac:	   |      move.l d0,1014(sp)
    3fb0:	   |      move.l 1014(sp),d0
    3fb4:	   |  /-- bne.s 3fca <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    3fb6:	   |  |   moveq #10,d0
    3fb8:	   |  |   add.l sp,d0
    3fba:	   |  |   move.l d0,-(sp)
    3fbc:	   |  |   pea 17c9a <PutChar+0x932>
    3fc2:	   |  |   jsr 16894 <KPrintF>
    3fc8:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    3fca:	   |  \-> move.l 1a70c <gamePath>,d0
    3fd0:	   +----- beq.s 3fea <setGameFilePath+0x234>
    3fd2:	   |      move.l 1a70c <gamePath>,1010(sp)
    3fda:	   |      move.l 1a7a4 <SysBase>,d0
    3fe0:	   |      movea.l d0,a6
    3fe2:	   |      movea.l 1010(sp),a1
    3fe6:	   |      jsr -690(a6)
}
    3fea:	   \----> move.l (sp)+,d2
    3fec:	          movea.l (sp)+,a6
    3fee:	          lea 1104(sp),sp
    3ff2:	          rts

00003ff4 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    3ff4:	/-------> lea -16(sp),sp
    3ff8:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    3ffa:	|         move.l 24(sp),-(sp)
    3ffe:	|         jsr 6122 <pauseFunction>
    4004:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    4006:	|     /-- bra.s 4018 <abortFunction+0x24>
    4008:	|  /--|-> moveq #24,d0
    400a:	|  |  |   add.l 24(sp),d0
    400e:	|  |  |   move.l d0,-(sp)
    4010:	|  |  |   jsr 1481a <trimStack>
    4016:	|  |  |   addq.l #4,sp
    4018:	|  |  \-> movea.l 24(sp),a0
    401c:	|  |      move.l 24(a0),d0
    4020:	|  \----- bne.s 4008 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    4022:	|         movea.l 24(sp),a0
    4026:	|         move.l 4(a0),12(sp)
    402c:	|         move.l 1a7a4 <SysBase>,d0
    4032:	|         movea.l d0,a6
    4034:	|         movea.l 12(sp),a1
    4038:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    403c:	|         clr.l 16(sp)
    4040:	|     /-- bra.s 4060 <abortFunction+0x6c>
    4042:	|  /--|-> movea.l 24(sp),a0
    4046:	|  |  |   move.l 20(a0),d1
    404a:	|  |  |   move.l 16(sp),d0
    404e:	|  |  |   lsl.l #3,d0
    4050:	|  |  |   add.l d1,d0
    4052:	|  |  |   move.l d0,-(sp)
    4054:	|  |  |   jsr 140e4 <unlinkVar>
    405a:	|  |  |   addq.l #4,sp
    405c:	|  |  |   addq.l #1,16(sp)
    4060:	|  |  \-> movea.l 24(sp),a0
    4064:	|  |      move.l 8(a0),d0
    4068:	|  |      cmp.l 16(sp),d0
    406c:	|  \----- bgt.s 4042 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    406e:	|         movea.l 24(sp),a0
    4072:	|         move.l 20(a0),8(sp)
    4078:	|         move.l 1a7a4 <SysBase>,d0
    407e:	|         movea.l d0,a6
    4080:	|         movea.l 8(sp),a1
    4084:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    4088:	|         moveq #28,d0
    408a:	|         add.l 24(sp),d0
    408e:	|         move.l d0,-(sp)
    4090:	|         jsr 140e4 <unlinkVar>
    4096:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    4098:	|         movea.l 24(sp),a0
    409c:	|         move.l 40(a0),d0
    40a0:	|     /-- beq.s 40b2 <abortFunction+0xbe>
    40a2:	|     |   movea.l 24(sp),a0
    40a6:	|     |   move.l 40(a0),d0
    40aa:	|     |   move.l d0,-(sp)
    40ac:	\-----|-- jsr 3ff4 <abortFunction>(pc)
    40b0:	      |   addq.l #4,sp
	FreeVec(fun);
    40b2:	      \-> move.l 24(sp),4(sp)
    40b8:	          move.l 1a7a4 <SysBase>,d0
    40be:	          movea.l d0,a6
    40c0:	          movea.l 4(sp),a1
    40c4:	          jsr -690(a6)
	fun = NULL;
    40c8:	          clr.l 24(sp)
}
    40cc:	          nop
    40ce:	          movea.l (sp)+,a6
    40d0:	          lea 16(sp),sp
    40d4:	          rts

000040d6 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    40d6:	          subq.l #8,sp
	int n = 0;
    40d8:	          clr.l 4(sp)
	*killedMyself = FALSE;
    40dc:	          movea.l 20(sp),a0
    40e0:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    40e2:	          move.l 1a73c <allRunningFunctions>,(sp)
	while (fun) {
    40e8:	   /----- bra.s 4116 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    40ea:	/--|----> movea.l (sp),a0
    40ec:	|  |      move.l (a0),d0
    40ee:	|  |      cmp.l 12(sp),d0
    40f2:	|  |  /-- bne.s 4110 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    40f4:	|  |  |   movea.l (sp),a0
    40f6:	|  |  |   move.w #1,54(a0)
			n++;
    40fc:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    4100:	|  |  |   move.l (sp),d0
    4102:	|  |  |   cmp.l 16(sp),d0
    4106:	|  |  +-- bne.s 4110 <cancelAFunction+0x3a>
    4108:	|  |  |   movea.l 20(sp),a0
    410c:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    4110:	|  |  \-> movea.l (sp),a0
    4112:	|  |      move.l 44(a0),(sp)
	while (fun) {
    4116:	|  \----> tst.l (sp)
    4118:	\-------- bne.s 40ea <cancelAFunction+0x14>
	}
	return n;
    411a:	          move.l 4(sp),d0
}
    411e:	          addq.l #8,sp
    4120:	          rts

00004122 <completeTimers>:


void completeTimers () {
    4122:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    4124:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    412a:	   /----- bra.s 4140 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    412c:	/--|----> movea.l (sp),a0
    412e:	|  |      move.b 56(a0),d0
    4132:	|  |  /-- bne.s 413a <completeTimers+0x18>
    4134:	|  |  |   movea.l (sp),a0
    4136:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    413a:	|  |  \-> movea.l (sp),a0
    413c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4140:	|  \----> tst.l (sp)
    4142:	\-------- bne.s 412c <completeTimers+0xa>
	}
}
    4144:	          nop
    4146:	          nop
    4148:	          addq.l #4,sp
    414a:	          rts

0000414c <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    414c:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    4150:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    4156:	                                                             movea.l 80(sp),a0
    415a:	                                                             move.w 54(a0),d0
    415e:	/----------------------------------------------------------- beq.w 4fec <continueFunction+0xea0>
		abortFunction (fun);
    4162:	|                                                            move.l 80(sp),-(sp)
    4166:	|                                                            jsr 3ff4 <abortFunction>
    416c:	|                                                            addq.l #4,sp
		return TRUE;
    416e:	|                                                            moveq #1,d0
    4170:	|  /-------------------------------------------------------- bra.w 4ff6 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    4174:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    417a:	|  |  |                                                      movea.l 80(sp),a0
    417e:	|  |  |                                                      move.l 4(a0),d1
    4182:	|  |  |                                                      movea.l 80(sp),a0
    4186:	|  |  |                                                      move.l 36(a0),d0
    418a:	|  |  |                                                      lsl.l #3,d0
    418c:	|  |  |                                                      movea.l d1,a0
    418e:	|  |  |                                                      adda.l d0,a0
    4190:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    4196:	|  |  |                                                      movea.l 80(sp),a0
    419a:	|  |  |                                                      move.l 4(a0),d1
    419e:	|  |  |                                                      movea.l 80(sp),a0
    41a2:	|  |  |                                                      move.l 36(a0),d0
    41a6:	|  |  |                                                      lsl.l #3,d0
    41a8:	|  |  |                                                      movea.l d1,a0
    41aa:	|  |  |                                                      adda.l d0,a0
    41ac:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    41b0:	|  |  |                                                      moveq #41,d0
    41b2:	|  |  |                                                      cmp.l 64(sp),d0
    41b6:	|  |  |  /-------------------------------------------------- bcs.w 4fa0 <continueFunction+0xe54>
    41ba:	|  |  |  |                                                   move.l 64(sp),d0
    41be:	|  |  |  |                                                   add.l d0,d0
    41c0:	|  |  |  |                                                   movea.l d0,a0
    41c2:	|  |  |  |                                                   adda.l #16846,a0
    41c8:	|  |  |  |                                                   move.w (a0),d0
    41ca:	|  |  |  |                                                   jmp (41ce <continueFunction+0x82>,pc,d0.w)
    41ce:	|  |  |  |                                                   bset d6,(a2)
    41d0:	|  |  |  |                                                   ori.w #2670,(a4)
    41d4:	|  |  |  |                                                   eori.w #2416,d6
    41d8:	|  |  |  |                                                   bchg d4,d2
    41da:	|  |  |  |                                                   bclr d4,(a4)+
    41dc:	|  |  |  |                                                   andi.l #181013194,d4
    41e2:	|  |  |  |                                                   .short 0x0aca
    41e4:	|  |  |  |                                                   .short 0x0aca
    41e6:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    41ee:	|  |  |  |                                                   .short 0x0aca
    41f0:	|  |  |  |                                                   andi.w #906,-(a4)
    41f4:	|  |  |  |                                                   bchg d1,196(a2)
    41f8:	|  |  |  |                                                   bset d1,580(a4)
    41fc:	|  |  |  |                                                   bclr d1,2576(a2)
    4200:	|  |  |  |                                                   andi.b #-56,2762(a2)
    4206:	|  |  |  |                                                   .short 0x0aca
    4208:	|  |  |  |                                                   eori.l #63572682,d0
    420e:	|  |  |  |                                                   .short 0x0aca
    4210:	|  |  |  |                                                   bchg d3,-(a2)
    4212:	|  |  |  |                                                   bchg #-36,(a2)
    4216:	|  |  |  |                                                   .short 0x08cc
    4218:	|  |  |  |                                                   addi.b #14,1038(a0)
    421e:	|  |  |  |                                                   .short 0x040e
    4220:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    4224:	|  |  |  |                                                   ori.w #8232,(a0)
    4228:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    422e:	|  |  |  |                                                   ori.w #12136,(a0)
    4232:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    4238:	|  |  |  |                                                   ori.w #12328,(a0)
    423c:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    4242:	|  |  |  |                                                   add.l 44(sp),d1
    4246:	|  |  |  |                                                   moveq #28,d0
    4248:	|  |  |  |                                                   add.l 80(sp),d0
    424c:	|  |  |  |                                                   move.l d1,-(sp)
    424e:	|  |  |  |                                                   move.l d0,-(sp)
    4250:	|  |  |  |                                                   jsr 14350 <copyVariable>
    4256:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    4258:	|  |  |  |                                                   move.l 80(sp),-(sp)
    425c:	|  |  |  |                                                   jsr 4ffc <finishFunction>
    4262:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    4264:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    426a:	|  |  |  |                                                   move.l 80(sp),-(sp)
    426e:	|  |  |  |                                                   jsr 6164 <restartFunction>
    4274:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    4276:	|  |  |  |  /----------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>
				finishFunction (fun);
    427a:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    427e:	|  |  |  |  |                                                jsr 4ffc <finishFunction>
    4284:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4286:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    428a:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    428e:	|  |  |  |  +----------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    4292:	|  |  |  |  |                                                movea.l 80(sp),a0
    4296:	|  |  |  |  |                                                move.l 28(a0),d0
    429a:	|  |  |  |  |                                                moveq #2,d1
    429c:	|  |  |  |  |                                                cmp.l d0,d1
    429e:	|  |  |  |  |                                            /-- beq.s 42aa <continueFunction+0x15e>
    42a0:	|  |  |  |  |                                            |   moveq #4,d1
    42a2:	|  |  |  |  |                                            |   cmp.l d0,d1
    42a4:	|  |  |  |  |                                         /--|-- beq.s 42f8 <continueFunction+0x1ac>
    42a6:	|  |  |  |  |                                /--------|--|-- bra.w 43e0 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    42aa:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    42ae:	|  |  |  |  |                                |        |      jsr 6122 <pauseFunction>
    42b4:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    42b6:	|  |  |  |  |                                |        |      moveq #24,d0
    42b8:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    42bc:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    42c0:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    42c4:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    42c8:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    42ca:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    42ce:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    42d2:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    42d4:	|  |  |  |  |                                |        |      jsr 63b0 <startNewFunctionNum>
    42da:	|  |  |  |  |                                |        |      lea 20(sp),sp
    42de:	|  |  |  |  |                                |        |      tst.l d0
    42e0:	|  |  |  |  |                                |        |  /-- bne.s 42e8 <continueFunction+0x19c>
    42e2:	|  |  |  |  |                                |        |  |   clr.w d0
    42e4:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 4ff6 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    42e8:	|  |  |  |  |                                |        |  \-> move.l 1a73c <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    42f0:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    42f4:	|  |  |  |  |                                |  /-----|----- bra.w 43f4 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    42f8:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    42fc:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    4300:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    4304:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    4308:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    430a:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    430c:	|  |  |  |  |                                |  |            jsr 12b78 <callBuiltIn>
    4312:	|  |  |  |  |                                |  |            lea 12(sp),sp
    4316:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    431a:	|  |  |  |  |                                |  |            moveq #5,d0
    431c:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    4320:	|  |  |  |  |                                |  |  /-------- bcs.w 43dc <continueFunction+0x290>
    4324:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    4328:	|  |  |  |  |                                |  |  |         add.l d0,d0
    432a:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    432c:	|  |  |  |  |                                |  |  |         adda.l #17208,a0
    4332:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    4334:	|  |  |  |  |                                |  |  |         jmp (4338 <continueFunction+0x1ec>,pc,d0.w)
    4338:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    433e:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    4342:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    4348:	|  |  |  |  |                                |  |  |         .short 0x7da2
    434a:	|  |  |  |  |                                |  |  |         jsr 16894 <KPrintF>
    4350:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    4352:	|  |  |  |  |                                |  |  |         clr.w d0
    4354:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 4ff6 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    4358:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    435c:	|  |  |  |  |                                |  |  |         jsr 6122 <pauseFunction>
    4362:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    4364:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    4368:	|  |  |  |  |                                |  |  |  /----- bra.s 43de <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    436a:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    436e:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    4372:	|  |  |  |  |                                |  |  |  +----- bra.s 43de <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    4374:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    4378:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    437e:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    4380:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    4384:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4388:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    438c:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    438e:	|  |  |  |  |                                |  |  |  |      jsr 14788 <setVariable>
    4394:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    4398:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    439c:	|  |  |  |  |                                |  |  |  |      jsr 6122 <pauseFunction>
    43a2:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    43a4:	|  |  |  |  |                                |  |  |  |      move.l 1a774 <noStack>,d1
    43aa:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    43ae:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    43b0:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    43b2:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    43b6:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    43b8:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    43ba:	|  |  |  |  |                                |  |  |  |      jsr 63b0 <startNewFunctionNum>
    43c0:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    43c4:	|  |  |  |  |                                |  |  |  |      tst.l d0
    43c6:	|  |  |  |  |                                |  |  |  |  /-- bne.s 43ce <continueFunction+0x282>
    43c8:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    43ca:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 4ff6 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    43ce:	|  |  |  |  |                                |  |  |  |  \-> move.l 1a73c <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    43d6:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    43da:	|  |  |  |  |                                |  |  |  +----- bra.s 43de <continueFunction+0x292>

						default:
						break;
    43dc:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    43de:	|  |  |  |  |                                |  +-----\----X bra.s 43f4 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    43e0:	|  |  |  |  |                                \--|----------> pea 17ded <PutChar+0xa85>
    43e6:	|  |  |  |  |                                   |            jsr 16894 <KPrintF>
    43ec:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    43ee:	|  |  |  |  |                                   |            clr.w d0
    43f0:	|  +--|--|--|-----------------------------------|----------- bra.w 4ff6 <continueFunction+0xeaa>
			}
			break;
    43f4:	|  |  |  |  +-----------------------------------\----------X bra.w 4fd4 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    43f8:	|  |  |  |  |                                                moveq #28,d0
    43fa:	|  |  |  |  |                                                add.l 80(sp),d0
    43fe:	|  |  |  |  |                                                clr.l -(sp)
    4400:	|  |  |  |  |                                                clr.l -(sp)
    4402:	|  |  |  |  |                                                move.l d0,-(sp)
    4404:	|  |  |  |  |                                                jsr 14788 <setVariable>
    440a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    440e:	|  |  |  |  +----------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    4412:	|  |  |  |  |                                                move.l 68(sp),d1
    4416:	|  |  |  |  |                                                moveq #28,d0
    4418:	|  |  |  |  |                                                add.l 80(sp),d0
    441c:	|  |  |  |  |                                                move.l d1,-(sp)
    441e:	|  |  |  |  |                                                pea 5 <_start+0x5>
    4422:	|  |  |  |  |                                                move.l d0,-(sp)
    4424:	|  |  |  |  |                                                jsr 14788 <setVariable>
    442a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    442e:	|  |  |  |  +----------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    4432:	|  |  |  |  |                                                move.l 68(sp),d1
    4436:	|  |  |  |  |                                                moveq #28,d0
    4438:	|  |  |  |  |                                                add.l 80(sp),d0
    443c:	|  |  |  |  |                                                move.l d1,-(sp)
    443e:	|  |  |  |  |                                                pea 1 <_start+0x1>
    4442:	|  |  |  |  |                                                move.l d0,-(sp)
    4444:	|  |  |  |  |                                                jsr 14788 <setVariable>
    444a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    444e:	|  |  |  |  +----------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4452:	|  |  |  |  |                                                moveq #28,d0
    4454:	|  |  |  |  |                                                add.l 80(sp),d0
    4458:	|  |  |  |  |                                                movea.l 80(sp),a0
    445c:	|  |  |  |  |                                                movea.l 20(a0),a0
    4460:	|  |  |  |  |                                                move.l 68(sp),d1
    4464:	|  |  |  |  |                                                lsl.l #3,d1
    4466:	|  |  |  |  |                                                add.l a0,d1
    4468:	|  |  |  |  |                                                move.l d0,-(sp)
    446a:	|  |  |  |  |                                                move.l d1,-(sp)
    446c:	|  |  |  |  |                                                jsr 14350 <copyVariable>
    4472:	|  |  |  |  |                                                addq.l #8,sp
    4474:	|  |  |  |  |                                                tst.w d0
    4476:	|  |  |  |  |  /-------------------------------------------- bne.w 4fb2 <continueFunction+0xe66>
    447a:	|  |  |  |  |  |                                             clr.w d0
    447c:	|  +--|--|--|--|-------------------------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4480:	|  |  |  |  |  |                                             moveq #28,d0
    4482:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4486:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4488:	|  |  |  |  |  |                                             jsr 143d6 <getBoolean>
    448e:	|  |  |  |  |  |                                             addq.l #4,sp
    4490:	|  |  |  |  |  |                                             tst.w d0
    4492:	|  |  |  |  |  |                                      /----- beq.s 44ae <continueFunction+0x362>
    4494:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    4498:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    449c:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    449e:	|  |  |  |  |  |                                      |      jsr 143d6 <getBoolean>
    44a4:	|  |  |  |  |  |                                      |      addq.l #4,sp
    44a6:	|  |  |  |  |  |                                      |      tst.w d0
    44a8:	|  |  |  |  |  |                                      +----- beq.s 44ae <continueFunction+0x362>
    44aa:	|  |  |  |  |  |                                      |      moveq #1,d0
    44ac:	|  |  |  |  |  |                                      |  /-- bra.s 44b0 <continueFunction+0x364>
    44ae:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    44b0:	|  |  |  |  |  |                                         \-> moveq #28,d1
    44b2:	|  |  |  |  |  |                                             add.l 80(sp),d1
    44b6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    44b8:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    44bc:	|  |  |  |  |  |                                             move.l d1,-(sp)
    44be:	|  |  |  |  |  |                                             jsr 14788 <setVariable>
    44c4:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    44c8:	|  |  |  |  |  |                                             moveq #24,d0
    44ca:	|  |  |  |  |  |                                             add.l 80(sp),d0
    44ce:	|  |  |  |  |  |                                             move.l d0,-(sp)
    44d0:	|  |  |  |  |  |                                             jsr 1481a <trimStack>
    44d6:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    44d8:	|  |  |  |  +--|-------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    44dc:	|  |  |  |  |  |                                             moveq #28,d0
    44de:	|  |  |  |  |  |                                             add.l 80(sp),d0
    44e2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    44e4:	|  |  |  |  |  |                                             jsr 143d6 <getBoolean>
    44ea:	|  |  |  |  |  |                                             addq.l #4,sp
    44ec:	|  |  |  |  |  |                                             tst.w d0
    44ee:	|  |  |  |  |  |                                         /-- bne.s 4506 <continueFunction+0x3ba>
    44f0:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    44f4:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    44f8:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    44fa:	|  |  |  |  |  |                                         |   jsr 143d6 <getBoolean>
    4500:	|  |  |  |  |  |                                         |   addq.l #4,sp
    4502:	|  |  |  |  |  |                                         |   tst.w d0
    4504:	|  |  |  |  |  |                                      /--|-- beq.s 450a <continueFunction+0x3be>
    4506:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    4508:	|  |  |  |  |  |                                      |  /-- bra.s 450c <continueFunction+0x3c0>
    450a:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    450c:	|  |  |  |  |  |                                         \-> moveq #28,d1
    450e:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4512:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4514:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4518:	|  |  |  |  |  |                                             move.l d1,-(sp)
    451a:	|  |  |  |  |  |                                             jsr 14788 <setVariable>
    4520:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4524:	|  |  |  |  |  |                                             moveq #24,d0
    4526:	|  |  |  |  |  |                                             add.l 80(sp),d0
    452a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    452c:	|  |  |  |  |  |                                             jsr 1481a <trimStack>
    4532:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4534:	|  |  |  |  +--|-------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    4538:	|  |  |  |  |  |                                             move.l 68(sp),d1
    453c:	|  |  |  |  |  |                                             moveq #28,d0
    453e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4542:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4544:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    4548:	|  |  |  |  |  |                                             move.l d0,-(sp)
    454a:	|  |  |  |  |  |                                             jsr 14788 <setVariable>
    4550:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4554:	|  |  |  |  +--|-------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    4558:	|  |  |  |  |  |                                             move.l 68(sp),d1
    455c:	|  |  |  |  |  |                                             moveq #28,d0
    455e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4562:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4564:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    4568:	|  |  |  |  |  |                                             move.l d0,-(sp)
    456a:	|  |  |  |  |  |                                             jsr 14788 <setVariable>
    4570:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4574:	|  |  |  |  +--|-------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    4578:	|  |  |  |  |  |                                             move.l 68(sp),d1
    457c:	|  |  |  |  |  |                                             moveq #28,d0
    457e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4582:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4584:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    4588:	|  |  |  |  |  |                                             move.l d0,-(sp)
    458a:	|  |  |  |  |  |                                             jsr 14788 <setVariable>
    4590:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4594:	|  |  |  |  +--|-------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    4598:	|  |  |  |  |  |                                             move.l 1a704 <dialogValue>,d0
    459e:	|  |  |  |  |  |                                             moveq #1,d1
    45a0:	|  |  |  |  |  |                                             cmp.l d0,d1
    45a2:	|  |  |  |  |  |  /----------------------------------------- beq.w 4fb6 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    45a6:	|  |  |  |  |  |  |                                          pea 17e02 <PutChar+0xa9a>
    45ac:	|  |  |  |  |  |  |                                          jsr 16894 <KPrintF>
    45b2:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    45b4:	|  |  |  |  |  |  |                                          clr.w d0
    45b6:	|  +--|--|--|--|--|----------------------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    45ba:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    45be:	|  |  |  |  |  |  |                                          moveq #28,d0
    45c0:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    45c4:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    45c6:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    45c8:	|  |  |  |  |  |  |                                          jsr 13f1a <loadStringToVar>
    45ce:	|  |  |  |  |  |  |                                          addq.l #8,sp
    45d0:	|  |  |  |  |  |  |                                          tst.w d0
    45d2:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 4fba <continueFunction+0xe6e>
					return FALSE;
    45d6:	|  |  |  |  |  |  |  |                                       clr.w d0
    45d8:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    45dc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    45e0:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    45e4:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    45e6:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    45e8:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    45ea:	|  |  |  |  |  |  |  |                                /----- beq.s 4648 <continueFunction+0x4fc>
    45ec:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    45ee:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    45f0:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 47dc <continueFunction+0x690>
    45f4:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    45f6:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 4602 <continueFunction+0x4b6>
    45f8:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    45fa:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    45fc:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4648 <continueFunction+0x4fc>
    45fe:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 47dc <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    4602:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    4604:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    4608:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 4634 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    460a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    460c:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4610:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4612:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4614:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4616:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14788 <setVariable>
    461c:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    4620:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    4622:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4626:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4628:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1481a <trimStack>
    462e:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    4630:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 47f2 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    4634:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 17e43 <PutChar+0xadb>
    463a:	|  |  |  |  |  |  |  |              |  |              |      jsr 16894 <KPrintF>
    4640:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4642:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4644:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 4ff6 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4648:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    464c:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4650:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4654:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4656:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 466c <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4658:	|  |  |  |  |  |  |  |              |  |                 |   pea 17e7f <PutChar+0xb17>
    465e:	|  |  |  |  |  |  |  |              |  |                 |   jsr 16894 <KPrintF>
    4664:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4666:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4668:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4ff6 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    466c:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    466e:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4672:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4674:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4678:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    467c:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    467e:	|  |  |  |  |  |  |  |              |  |                     jsr 13e96 <getValueType>
    4684:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4688:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    468a:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4692 <continueFunction+0x546>
    468c:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    468e:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4ff6 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4692:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    4696:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    469a:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    469c:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    469e:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    46a0:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 46c2 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    46a2:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    46a6:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    46a8:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    46ac:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    46b0:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    46b4:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    46b6:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    46b8:	|  |  |  |  |  |  |  |              |  |                 |   jsr 13b20 <fastArrayGetByIndex>
    46be:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    46c0:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 46e2 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    46c2:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    46c6:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    46c8:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    46cc:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    46d0:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    46d4:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    46d6:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    46d8:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    46da:	|  |  |  |  |  |  |  |              |  |              |      jsr 147aa <stackGetByIndex>
    46e0:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    46e2:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    46e6:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    46e8:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    46ec:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    46ee:	|  |  |  |  |  |  |  |              |  |                     jsr 1481a <trimStack>
    46f4:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    46f6:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    46fa:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4716 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    46fc:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    46fe:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4702:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4704:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4706:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4708:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14788 <setVariable>
    470e:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4712:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 47f0 <continueFunction+0x6a4>
    4716:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    4718:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    471c:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 472a <continueFunction+0x5de>
    471e:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4720:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4724:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 4774 <continueFunction+0x628>
    4726:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 47bc <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    472a:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    472e:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4732:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4736:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4738:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 13e96 <getValueType>
    473e:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4742:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4744:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 474c <continueFunction+0x600>
    4746:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4748:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 47d6 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    474c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    474e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4750:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4754:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4756:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    475a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    475c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 14788 <setVariable>
    4762:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4766:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4768:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    476a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    476e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4772:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 47da <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4774:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    4778:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    477c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4780:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4782:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 13e96 <getValueType>
    4788:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    478c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    478e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 4794 <continueFunction+0x648>
    4790:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4792:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 47d6 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4794:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    4796:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4798:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    479c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    479e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    47a2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    47a4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14788 <setVariable>
    47aa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    47ae:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    47b0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    47b2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    47b6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    47ba:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 47da <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    47bc:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    47be:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    47c2:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    47c4:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    47c8:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14350 <copyVariable>
    47ce:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    47d0:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    47d2:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 47f0 <continueFunction+0x6a4>
    47d4:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    47d6:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 4ff6 <continueFunction+0xeaa>
				break;
    47da:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 47f0 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    47dc:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 17e9d <PutChar+0xb35>
    47e2:	|  |  |  |  |  |  |  |                 |  |                  jsr 16894 <KPrintF>
    47e8:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    47ea:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    47ec:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 4ff6 <continueFunction+0xeaa>
				break;
    47f0:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    47f2:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 4fd4 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    47f6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    47fa:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    47fe:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4800:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    4802:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4804:	|  |  |  |  |  |  |  |                                   /-- beq.s 4812 <continueFunction+0x6c6>
    4806:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    4808:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    480a:	|  |  |  |  |  |  |  |                                /--|-- beq.w 48be <continueFunction+0x772>
    480e:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 491c <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4812:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4816:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    481a:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    481e:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4820:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4836 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    4822:	|  |  |  |  |  |  |  |                             |  |  |   pea 17e7f <PutChar+0xb17>
    4828:	|  |  |  |  |  |  |  |                             |  |  |   jsr 16894 <KPrintF>
    482e:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    4830:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4832:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4ff6 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4836:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    4838:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    483c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    483e:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    4842:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    4846:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    4848:	|  |  |  |  |  |  |  |                             |  |      jsr 13e96 <getValueType>
    484e:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4852:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4854:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 485c <continueFunction+0x710>
    4856:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4858:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4ff6 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    485c:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4860:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4864:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    4868:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    486a:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    486e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    4870:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    4874:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4878:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    487c:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    487e:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    4880:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    4882:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4884:	|  |  |  |  |  |  |  |                             |  |      jsr 636c <stackSetByIndex>
    488a:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    488e:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4890:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4898 <continueFunction+0x74c>
						return FALSE;
    4892:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4894:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4ff6 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    4898:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    489a:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    489e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    48a0:	|  |  |  |  |  |  |  |                             |  |      jsr 1481a <trimStack>
    48a6:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    48a8:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    48aa:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    48ae:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    48b0:	|  |  |  |  |  |  |  |                             |  |      jsr 1481a <trimStack>
    48b6:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    48b8:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    48ba:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 4fd4 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    48be:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    48c0:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    48c4:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    48c6:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    48ca:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    48ce:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    48d0:	|  |  |  |  |  |  |  |                             |         jsr 13e96 <getValueType>
    48d6:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    48da:	|  |  |  |  |  |  |  |                             |         tst.w d0
    48dc:	|  |  |  |  |  |  |  |                             |     /-- bne.s 48e4 <continueFunction+0x798>
    48de:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    48e0:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 4ff6 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    48e4:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    48e8:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    48ea:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    48ee:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    48f2:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    48f6:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    48f8:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    48fa:	|  |  |  |  |  |  |  |                             |         jsr 13b20 <fastArrayGetByIndex>
    4900:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    4902:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    4906:	|  |  |  |  |  |  |  |                             |     /-- bne.s 4916 <continueFunction+0x7ca>
    4908:	|  |  |  |  |  |  |  |                             |     |   pea 17ec1 <PutChar+0xb59>
    490e:	|  |  |  |  |  |  |  |                             |     |   jsr 16894 <KPrintF>
    4914:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    4916:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    4918:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 4ff6 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    491c:	|  |  |  |  |  |  |  |                             \-------> pea 17e9d <PutChar+0xb35>
    4922:	|  |  |  |  |  |  |  |                                       jsr 16894 <KPrintF>
    4928:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    492a:	|  |  |  |  |  |  |  |                                       clr.w d0
    492c:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4930:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4934:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4938:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    493c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    493e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4940:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4942:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4946:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    494a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    494c:	|  |  |  |  |  |  |  |                                       jsr 13e96 <getValueType>
    4952:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4956:	|  |  |  |  |  |  |  |                                       tst.w d0
    4958:	|  |  |  |  |  |  |  |                                   /-- bne.s 4960 <continueFunction+0x814>
    495a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    495c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4ff6 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4960:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    4964:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4966:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    496a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    496c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4970:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4972:	|  |  |  |  |  |  |  |                                       jsr 14788 <setVariable>
    4978:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    497c:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    4980:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4982:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    4984:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4988:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    498c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4990:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4992:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4994:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4996:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    499a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    499c:	|  |  |  |  |  |  |  |                                       jsr 14788 <setVariable>
    49a2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    49a6:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    49aa:	|  |  |  |  |  |  |  |                                       move.l 1a752 <globalVars>,d1
    49b0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    49b4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    49b6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    49b8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    49ba:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    49be:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    49c2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    49c4:	|  |  |  |  |  |  |  |                                       jsr 13e96 <getValueType>
    49ca:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    49ce:	|  |  |  |  |  |  |  |                                       tst.w d0
    49d0:	|  |  |  |  |  |  |  |                                   /-- bne.s 49d8 <continueFunction+0x88c>
    49d2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    49d4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4ff6 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    49d8:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    49dc:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    49de:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    49e2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    49e4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    49e8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    49ea:	|  |  |  |  |  |  |  |                                       jsr 14788 <setVariable>
    49f0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    49f4:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    49f8:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    49fa:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    49fc:	|  |  |  |  |  |  |  |                                       movea.l 1a752 <globalVars>,a0
    4a02:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4a06:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4a08:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4a0a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4a0c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4a10:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4a12:	|  |  |  |  |  |  |  |                                       jsr 14788 <setVariable>
    4a18:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4a1c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4a20:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4a24:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4a28:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4a2c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4a2e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4a30:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4a32:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4a36:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    4a3a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4a3c:	|  |  |  |  |  |  |  |                                       jsr 13e96 <getValueType>
    4a42:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4a46:	|  |  |  |  |  |  |  |                                       tst.w d0
    4a48:	|  |  |  |  |  |  |  |                                   /-- bne.s 4a50 <continueFunction+0x904>
    4a4a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4a4c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4ff6 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4a50:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    4a54:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4a56:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4a5a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4a5c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4a60:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4a62:	|  |  |  |  |  |  |  |                                       jsr 14788 <setVariable>
    4a68:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    4a6c:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    4a70:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4a72:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4a74:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4a78:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    4a7c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4a80:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4a82:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4a84:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4a86:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4a8a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4a8c:	|  |  |  |  |  |  |  |                                       jsr 14788 <setVariable>
    4a92:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4a96:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    4a9a:	|  |  |  |  |  |  |  |                                       move.l 1a752 <globalVars>,d1
    4aa0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4aa4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4aa6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4aa8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4aaa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4aae:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    4ab2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4ab4:	|  |  |  |  |  |  |  |                                       jsr 13e96 <getValueType>
    4aba:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4abe:	|  |  |  |  |  |  |  |                                       tst.w d0
    4ac0:	|  |  |  |  |  |  |  |                                   /-- bne.s 4ac8 <continueFunction+0x97c>
    4ac2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4ac4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4ff6 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4ac8:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    4acc:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4ace:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4ad2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4ad4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4ad8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4ada:	|  |  |  |  |  |  |  |                                       jsr 14788 <setVariable>
    4ae0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    4ae4:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    4ae8:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4aea:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4aec:	|  |  |  |  |  |  |  |                                       movea.l 1a752 <globalVars>,a0
    4af2:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4af6:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4af8:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4afa:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4afc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4b00:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4b02:	|  |  |  |  |  |  |  |                                       jsr 14788 <setVariable>
    4b08:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4b0c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    4b10:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4b14:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4b18:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4b1c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4b1e:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    4b20:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4b22:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4b26:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4b28:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4b2a:	|  |  |  |  |  |  |  |                                       jsr 14350 <copyVariable>
    4b30:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    4b32:	|  |  |  |  |  |  |  |                                       tst.w d0
    4b34:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 4fbe <continueFunction+0xe72>
    4b38:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    4b3a:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    4b3e:	|  |  |  |  |  |  |  |  |                                    move.l 1a752 <globalVars>,d1
    4b44:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    4b48:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    4b4a:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    4b4c:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    4b4e:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    4b52:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    4b54:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    4b56:	|  |  |  |  |  |  |  |  |                                    jsr 14350 <copyVariable>
    4b5c:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    4b5e:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    4b60:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 4fc2 <continueFunction+0xe76>
    4b64:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    4b66:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    4b6a:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    4b6c:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    4b70:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1a752 <globalVars>,a0
    4b76:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    4b7a:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    4b7c:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    4b7e:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    4b80:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    4b82:	|  |  |  |  |  |  |  |  |  |                                 jsr 14350 <copyVariable>
    4b88:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    4b8a:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    4b8c:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 4fc6 <continueFunction+0xe7a>
    4b90:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    4b92:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    4b96:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    4b98:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    4b9c:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    4b9e:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    4ba2:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    4ba4:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    4ba6:	|  |  |  |  |  |  |  |  |  |  |                              jsr 136d2 <addVarToStack>
    4bac:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    4bae:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    4bb0:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 4fca <continueFunction+0xe7e>
    4bb4:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    4bb6:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    4bba:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    4bbc:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    4bc0:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    4bc2:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    4bc6:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    4bc8:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    4bca:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 13758 <addVarToStackQuick>
    4bd0:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    4bd2:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    4bd4:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 4fce <continueFunction+0xe82>
    4bd8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    4bda:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 4ff6 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    4bde:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4be0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4be4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4be6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 143d6 <getBoolean>
    4bec:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4bee:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4bf0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    4bf2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    4bf4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    4bf6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    4bf8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4bfa:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4bfe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    4c00:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    4c04:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4c06:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14788 <setVariable>
    4c0c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    4c10:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    4c14:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4c16:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4c1a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4c1c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 143d6 <getBoolean>
    4c22:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4c24:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4c26:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 4fd2 <continueFunction+0xe86>
				advanceNow = FALSE;
    4c2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    4c2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4c32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    4c38:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 4fd2 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    4c3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    4c40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4c44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    4c4a:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    4c4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    4c50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    4c54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    4c56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    4c5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    4c5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    4c60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 13e96 <getValueType>
    4c66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    4c6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    4c6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 4c74 <continueFunction+0xb28>
    4c6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    4c70:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 4ff6 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    4c74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    4c78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    4c7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    4c7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    4c7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    4c82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    4c84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    4c88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    4c8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14788 <setVariable>
    4c90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    4c94:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4fd4 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    4c98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4c9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    4ca0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 4f8a <continueFunction+0xe3e>
    4ca4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    4ca6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    4caa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 4d26 <continueFunction+0xbda>
    4cac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    4cae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    4cb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 4d70 <continueFunction+0xc24>
    4cb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    4cb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    4cbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 4cca <continueFunction+0xb7e>
    4cbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    4cc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    4cc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 4cf8 <continueFunction+0xbac>
    4cc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 4d70 <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    4cca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    4ccc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    4cd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    4cd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    4cd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    4cda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    4cdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 137cc <addVariablesInSecond>
    4ce2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    4ce4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    4ce6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    4cea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    4cec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1481a <trimStack>
    4cf2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    4cf4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 4f9e <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    4cf8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    4cfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    4cfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    4d02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    4d06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    4d08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    4d0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1388a <compareVariablesInSecond>
    4d10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    4d12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    4d14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    4d18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    4d1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1481a <trimStack>
    4d20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    4d22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 4f9e <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    4d26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    4d28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    4d2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    4d30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    4d34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    4d36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    4d38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1388a <compareVariablesInSecond>
    4d3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    4d40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    4d42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    4d46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    4d48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1481a <trimStack>
    4d4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    4d50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    4d54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    4d58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    4d5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    4d5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    4d5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    4d64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    4d68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    4d6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 4f9e <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    4d70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    4d74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    4d78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4d7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    4d7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    4d82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    4d84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 13e96 <getValueType>
    4d8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    4d8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    4d90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 4d98 <continueFunction+0xc4c>
    4d92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    4d94:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4ff6 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    4d98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    4d9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    4d9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4da0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    4da4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    4da8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    4daa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 13e96 <getValueType>
    4db0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    4db4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    4db6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 4dbe <continueFunction+0xc72>
    4db8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    4dba:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4ff6 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    4dbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    4dc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    4dc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4dc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1481a <trimStack>
    4dcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    4dce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    4dd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    4dd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    4dd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    4dd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 4f9c <continueFunction+0xe50>
    4ddc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    4dde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    4de0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #19948,a0
    4de6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    4de8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (4dec <continueFunction+0xca0>,pc,d0.w)
    4dec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    4df0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    4df2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4dfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    4dfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4e04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4e0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    4e14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    4e1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    4e20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4e24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17252 <__mulsi3>
    4e2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    4e30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    4e32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4e34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4e38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4e3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14788 <setVariable>
    4e46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4e4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f9e <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    4e4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4e52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4e56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    4e58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4e5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4e5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4e64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14788 <setVariable>
    4e6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4e70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f9e <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    4e74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    4e78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4e7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 172fe <__modsi3>
    4e86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    4e88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    4e8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4e8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4e90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4e96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14788 <setVariable>
    4e9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4ea2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f9e <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    4ea6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    4eaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4eae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4eb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4eb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 172d0 <__divsi3>
    4eb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    4eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    4ebc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4ebe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4ec2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4ec4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4ec8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4eca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14788 <setVariable>
    4ed0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4ed4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f9e <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    4ed8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4edc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4ee0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4ee2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    4ee4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4ee6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4eea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4eec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4ef0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4ef2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4ef8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14788 <setVariable>
    4efe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f9e <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    4f06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4f0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4f10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    4f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4f16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4f18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4f20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14788 <setVariable>
    4f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4f30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4f9e <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    4f32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4f36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4f3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4f3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    4f3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4f42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4f44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4f46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4f4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4f4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4f50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4f52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14788 <setVariable>
    4f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4f9e <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    4f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4f62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4f66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4f68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    4f6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4f6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4f70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4f72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4f76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4f78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4f7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14788 <setVariable>
    4f84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4f88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4f9e <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    4f8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 17ee2 <PutChar+0xb7a>
    4f90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 16894 <KPrintF>
    4f96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    4f98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    4f9a:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 4ff6 <continueFunction+0xeaa>
						break;
    4f9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    4f9e:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 4fd4 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    4fa0:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 17efa <PutChar+0xb92>
    4fa6:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 16894 <KPrintF>
    4fac:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    4fae:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    4fb0:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 4ff6 <continueFunction+0xeaa>
			break;
    4fb2:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    4fb4:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fb6:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    4fb8:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fba:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    4fbc:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fbe:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    4fc0:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fc2:	|  |  |     |              \--|--|--|--|-------------------> nop
    4fc4:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fc6:	|  |  |     |                 \--|--|--|-------------------> nop
    4fc8:	|  |  |     +--------------------|--|--|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fca:	|  |  |     |                    \--|--|-------------------> nop
    4fcc:	|  |  |     +-----------------------|--|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fce:	|  |  |     |                       \--|-------------------> nop
    4fd0:	|  |  |     +--------------------------|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fd2:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    4fd4:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    4fd8:	+--|--|----------------------------------------------------- beq.s 4fec <continueFunction+0xea0>
    4fda:	|  |  |                                                      movea.l 80(sp),a0
    4fde:	|  |  |                                                      move.l 36(a0),d0
    4fe2:	|  |  |                                                      addq.l #1,d0
    4fe4:	|  |  |                                                      movea.l 80(sp),a0
    4fe8:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    4fec:	\--|--|----------------------------------------------------> tst.w 74(sp)
    4ff0:	   |  \----------------------------------------------------- bne.w 4174 <continueFunction+0x28>

	}
	return TRUE;
    4ff4:	   |                                                         moveq #1,d0
}
    4ff6:	   \-------------------------------------------------------> lea 76(sp),sp
    4ffa:	                                                             rts

00004ffc <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    4ffc:	          lea -16(sp),sp
    5000:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    5002:	          move.l 24(sp),-(sp)
    5006:	          jsr 6122 <pauseFunction>
    500c:	          addq.l #4,sp
	if (fun -> stack) 
    500e:	          movea.l 24(sp),a0
    5012:	          move.l 24(a0),d0
    5016:	      /-- beq.s 502a <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    5018:	      |   pea 17f26 <PutChar+0xbbe>
    501e:	      |   jsr 16894 <KPrintF>
    5024:	      |   addq.l #4,sp
		return;
    5026:	/-----|-- bra.w 50c4 <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    502a:	|     \-> movea.l 24(sp),a0
    502e:	|         move.l 4(a0),12(sp)
    5034:	|         move.l 1a7a4 <SysBase>,d0
    503a:	|         movea.l d0,a6
    503c:	|         movea.l 12(sp),a1
    5040:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5044:	|         clr.l 16(sp)
    5048:	|     /-- bra.s 5068 <finishFunction+0x6c>
    504a:	|  /--|-> movea.l 24(sp),a0
    504e:	|  |  |   move.l 20(a0),d1
    5052:	|  |  |   move.l 16(sp),d0
    5056:	|  |  |   lsl.l #3,d0
    5058:	|  |  |   add.l d1,d0
    505a:	|  |  |   move.l d0,-(sp)
    505c:	|  |  |   jsr 140e4 <unlinkVar>
    5062:	|  |  |   addq.l #4,sp
    5064:	|  |  |   addq.l #1,16(sp)
    5068:	|  |  \-> movea.l 24(sp),a0
    506c:	|  |      move.l 8(a0),d0
    5070:	|  |      cmp.l 16(sp),d0
    5074:	|  \----- bgt.s 504a <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    5076:	|         movea.l 24(sp),a0
    507a:	|         move.l 8(a0),d0
    507e:	|     /-- ble.s 509a <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    5080:	|     |   movea.l 24(sp),a0
    5084:	|     |   move.l 20(a0),8(sp)
    508a:	|     |   move.l 1a7a4 <SysBase>,d0
    5090:	|     |   movea.l d0,a6
    5092:	|     |   movea.l 8(sp),a1
    5096:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    509a:	|     \-> moveq #28,d0
    509c:	|         add.l 24(sp),d0
    50a0:	|         move.l d0,-(sp)
    50a2:	|         jsr 140e4 <unlinkVar>
    50a8:	|         addq.l #4,sp
	FreeVec(fun);
    50aa:	|         move.l 24(sp),4(sp)
    50b0:	|         move.l 1a7a4 <SysBase>,d0
    50b6:	|         movea.l d0,a6
    50b8:	|         movea.l 4(sp),a1
    50bc:	|         jsr -690(a6)
	fun = NULL;
    50c0:	|         clr.l 24(sp)
}
    50c4:	\-------> movea.l (sp)+,a6
    50c6:	          lea 16(sp),sp
    50ca:	          rts

000050cc <freezeSubs>:

void freezeSubs () {
    50cc:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    50ce:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    50d4:	   /----- bra.s 50f2 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    50d6:	/--|----> movea.l (sp),a0
    50d8:	|  |      move.w 52(a0),d0
    50dc:	|  |  /-- bne.s 50ec <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    50de:	|  |  |   movea.l (sp),a0
    50e0:	|  |  |   move.b 56(a0),d0
    50e4:	|  |  |   addq.b #1,d0
    50e6:	|  |  |   movea.l (sp),a0
    50e8:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    50ec:	|  |  \-> movea.l (sp),a0
    50ee:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    50f2:	|  \----> tst.l (sp)
    50f4:	\-------- bne.s 50d6 <freezeSubs+0xa>
	}
}
    50f6:	          nop
    50f8:	          nop
    50fa:	          addq.l #4,sp
    50fc:	          rts

000050fe <handleInput>:

BOOL handleInput () {
    50fe:	             lea -16(sp),sp
    5102:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    5104:	             move.l 1a8cc <overRegion>,d0
    510a:	         /-- bne.s 5112 <handleInput+0x14>
    510c:	         |   jsr 15030 <getOverRegion>

	if (input.justMoved) {
    5112:	         \-> move.w 1a75a <input+0x4>,d0
    5118:	         /-- beq.s 5156 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    511a:	         |   movea.l 1a11c <currentEvents>,a0
    5120:	         |   move.l 16(a0),d0
    5124:	         +-- beq.s 5156 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5126:	         |   move.l 1a774 <noStack>,d1
    512c:	         |   movea.l 1a11c <currentEvents>,a0
    5132:	         |   move.l 16(a0),d0
    5136:	         |   pea 1 <_start+0x1>
    513a:	         |   move.l d1,-(sp)
    513c:	         |   clr.l -(sp)
    513e:	         |   clr.l -(sp)
    5140:	         |   move.l d0,-(sp)
    5142:	         |   jsr 63b0 <startNewFunctionNum>
    5148:	         |   lea 20(sp),sp
    514c:	         |   tst.l d0
    514e:	         +-- bne.s 5156 <handleInput+0x58>
    5150:	         |   clr.w d0
    5152:	/--------|-- bra.w 535c <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    5156:	|        \-> clr.w 1a75a <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    515c:	|            move.l 1a76c <lastRegion>,d1
    5162:	|            move.l 1a8cc <overRegion>,d0
    5168:	|            cmp.l d1,d0
    516a:	|  /-------- beq.w 5242 <handleInput+0x144>
    516e:	|  |         movea.l 1a11c <currentEvents>,a0
    5174:	|  |         move.l 20(a0),d0
    5178:	|  +-------- beq.w 5242 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    517c:	|  |         moveq #12,d0
    517e:	|  |         move.l d0,16(sp)
    5182:	|  |         clr.l 12(sp)
    5186:	|  |         move.l 1a7a4 <SysBase>,d0
    518c:	|  |         movea.l d0,a6
    518e:	|  |         move.l 16(sp),d0
    5192:	|  |         move.l 12(sp),d1
    5196:	|  |         jsr -684(a6)
    519a:	|  |         move.l d0,8(sp)
    519e:	|  |         move.l 8(sp),d0
    51a2:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    51a6:	|  |         move.l 4(sp),d0
    51aa:	|  |     /-- bne.s 51c0 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    51ac:	|  |     |   pea 17f4c <PutChar+0xbe4>
    51b2:	|  |     |   jsr 16894 <KPrintF>
    51b8:	|  |     |   addq.l #4,sp
			return FALSE;
    51ba:	|  |     |   clr.w d0
    51bc:	+--|-----|-- bra.w 535c <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    51c0:	|  |     \-> movea.l 4(sp),a0
    51c4:	|  |         clr.l (a0)
		if (overRegion) {
    51c6:	|  |         move.l 1a8cc <overRegion>,d0
    51cc:	|  |  /----- beq.s 51f4 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    51ce:	|  |  |      movea.l 1a8cc <overRegion>,a0
    51d4:	|  |  |      movea.l 28(a0),a0
    51d8:	|  |  |      move.l 4(a0),d1
    51dc:	|  |  |      move.l 4(sp),d0
    51e0:	|  |  |      move.l d1,-(sp)
    51e2:	|  |  |      pea 7 <_start+0x7>
    51e6:	|  |  |      move.l d0,-(sp)
    51e8:	|  |  |      jsr 14788 <setVariable>
    51ee:	|  |  |      lea 12(sp),sp
    51f2:	|  |  |  /-- bra.s 520a <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    51f4:	|  |  \--|-> move.l 4(sp),d0
    51f8:	|  |     |   clr.l -(sp)
    51fa:	|  |     |   pea 1 <_start+0x1>
    51fe:	|  |     |   move.l d0,-(sp)
    5200:	|  |     |   jsr 14788 <setVariable>
    5206:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    520a:	|  |     \-> movea.l 4(sp),a0
    520e:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    5212:	|  |         movea.l 1a11c <currentEvents>,a0
    5218:	|  |         move.l 20(a0),d0
    521c:	|  |         pea 1 <_start+0x1>
    5220:	|  |         lea 8(sp),a0
    5224:	|  |         move.l a0,-(sp)
    5226:	|  |         clr.l -(sp)
    5228:	|  |         pea 1 <_start+0x1>
    522c:	|  |         move.l d0,-(sp)
    522e:	|  |         jsr 63b0 <startNewFunctionNum>
    5234:	|  |         lea 20(sp),sp
    5238:	|  |         tst.l d0
    523a:	|  +-------- bne.s 5242 <handleInput+0x144>
    523c:	|  |         clr.w d0
    523e:	+--|-------- bra.w 535c <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    5242:	|  \-------> move.w 1a75c <input+0x6>,d0
    5248:	|        /-- beq.s 5286 <handleInput+0x188>
    524a:	|        |   movea.l 1a11c <currentEvents>,a0
    5250:	|        |   move.l 4(a0),d0
    5254:	|        +-- beq.s 5286 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5256:	|        |   move.l 1a774 <noStack>,d1
    525c:	|        |   movea.l 1a11c <currentEvents>,a0
    5262:	|        |   move.l 4(a0),d0
    5266:	|        |   pea 1 <_start+0x1>
    526a:	|        |   move.l d1,-(sp)
    526c:	|        |   clr.l -(sp)
    526e:	|        |   clr.l -(sp)
    5270:	|        |   move.l d0,-(sp)
    5272:	|        |   jsr 63b0 <startNewFunctionNum>
    5278:	|        |   lea 20(sp),sp
    527c:	|        |   tst.l d0
    527e:	|        +-- bne.s 5286 <handleInput+0x188>
    5280:	|        |   clr.w d0
    5282:	+--------|-- bra.w 535c <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    5286:	|        \-> move.w 1a75e <input+0x8>,d0
    528c:	|        /-- beq.s 52ca <handleInput+0x1cc>
    528e:	|        |   movea.l 1a11c <currentEvents>,a0
    5294:	|        |   move.l 12(a0),d0
    5298:	|        +-- beq.s 52ca <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    529a:	|        |   move.l 1a774 <noStack>,d1
    52a0:	|        |   movea.l 1a11c <currentEvents>,a0
    52a6:	|        |   move.l 12(a0),d0
    52aa:	|        |   pea 1 <_start+0x1>
    52ae:	|        |   move.l d1,-(sp)
    52b0:	|        |   clr.l -(sp)
    52b2:	|        |   clr.l -(sp)
    52b4:	|        |   move.l d0,-(sp)
    52b6:	|        |   jsr 63b0 <startNewFunctionNum>
    52bc:	|        |   lea 20(sp),sp
    52c0:	|        |   tst.l d0
    52c2:	|        +-- bne.s 52ca <handleInput+0x1cc>
    52c4:	|        |   clr.w d0
    52c6:	+--------|-- bra.w 535c <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    52ca:	|        \-> move.w 1a756 <input>,d0
    52d0:	|        /-- beq.s 5308 <handleInput+0x20a>
    52d2:	|        |   movea.l 1a11c <currentEvents>,a0
    52d8:	|        |   move.l (a0),d0
    52da:	|        +-- beq.s 5308 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    52dc:	|        |   move.l 1a774 <noStack>,d1
    52e2:	|        |   movea.l 1a11c <currentEvents>,a0
    52e8:	|        |   move.l (a0),d0
    52ea:	|        |   pea 1 <_start+0x1>
    52ee:	|        |   move.l d1,-(sp)
    52f0:	|        |   clr.l -(sp)
    52f2:	|        |   clr.l -(sp)
    52f4:	|        |   move.l d0,-(sp)
    52f6:	|        |   jsr 63b0 <startNewFunctionNum>
    52fc:	|        |   lea 20(sp),sp
    5300:	|        |   tst.l d0
    5302:	|        +-- bne.s 5308 <handleInput+0x20a>
    5304:	|        |   clr.w d0
    5306:	+--------|-- bra.s 535c <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    5308:	|        \-> move.w 1a758 <input+0x2>,d0
    530e:	|        /-- beq.s 534a <handleInput+0x24c>
    5310:	|        |   movea.l 1a11c <currentEvents>,a0
    5316:	|        |   move.l 8(a0),d0
    531a:	|        +-- beq.s 534a <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    531c:	|        |   move.l 1a774 <noStack>,d1
    5322:	|        |   movea.l 1a11c <currentEvents>,a0
    5328:	|        |   move.l 8(a0),d0
    532c:	|        |   pea 1 <_start+0x1>
    5330:	|        |   move.l d1,-(sp)
    5332:	|        |   clr.l -(sp)
    5334:	|        |   clr.l -(sp)
    5336:	|        |   move.l d0,-(sp)
    5338:	|        |   jsr 63b0 <startNewFunctionNum>
    533e:	|        |   lea 20(sp),sp
    5342:	|        |   tst.l d0
    5344:	|        +-- bne.s 534a <handleInput+0x24c>
    5346:	|        |   clr.w d0
    5348:	+--------|-- bra.s 535c <handleInput+0x25e>
	}

	lastRegion = overRegion;
    534a:	|        \-> move.l 1a8cc <overRegion>,d0
    5350:	|            move.l d0,1a76c <lastRegion>
	return runSludge ();
    5356:	|            jsr 617e <runSludge>
}
    535c:	\----------> movea.l (sp)+,a6
    535e:	             lea 16(sp),sp
    5362:	             rts

00005364 <initSludge>:

BOOL initSludge (char * filename) {
    5364:	             lea -292(sp),sp
    5368:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    536c:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    5370:	             jsr a470 <makeNullAnim>
    5376:	             move.l d0,1a6aa <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    537c:	             pea 1a74e <gameVersion>
    5382:	             pea 17f82 <PutChar+0xc1a>
    5388:	             pea 45 <_start+0x45>
    538c:	             pea 47 <_start+0x47>
    5390:	             move.l 332(sp),-(sp)
    5394:	             jsr 5db2 <openAndVerify>
    539a:	             lea 20(sp),sp
    539e:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    53a2:	         /-- bne.s 53aa <initSludge+0x46>
    53a4:	         |   clr.w d0
    53a6:	/--------|-- bra.w 5ad2 <initSludge+0x76e>
	if (FGetC (fp)) {
    53aa:	|        \-> move.l 288(sp),284(sp)
    53b0:	|            move.l 1a7ac <DOSBase>,d0
    53b6:	|            movea.l d0,a6
    53b8:	|            move.l 284(sp),d1
    53bc:	|            jsr -306(a6)
    53c0:	|            move.l d0,280(sp)
    53c4:	|            move.l 280(sp),d0
    53c8:	|  /-------- beq.w 5572 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    53cc:	|  |         move.l 288(sp),-(sp)
    53d0:	|  |         jsr 6bc <get2bytes>
    53d6:	|  |         addq.l #4,sp
    53d8:	|  |         move.l d0,1a778 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    53de:	|  |         move.l 1a778 <numBIFNames>,d0
    53e4:	|  |         move.l d0,276(sp)
    53e8:	|  |         clr.l 272(sp)
    53ec:	|  |         move.l 1a7a4 <SysBase>,d0
    53f2:	|  |         movea.l d0,a6
    53f4:	|  |         move.l 276(sp),d0
    53f8:	|  |         move.l 272(sp),d1
    53fc:	|  |         jsr -684(a6)
    5400:	|  |         move.l d0,268(sp)
    5404:	|  |         move.l 268(sp),d0
    5408:	|  |         move.l d0,1a734 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    540e:	|  |         move.l 1a734 <allBIFNames>,d0
    5414:	|  |     /-- bne.s 541c <initSludge+0xb8>
    5416:	|  |     |   clr.w d0
    5418:	+--|-----|-- bra.w 5ad2 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    541c:	|  |     \-> clr.l 304(sp)
    5420:	|  |     /-- bra.s 5446 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    5422:	|  |  /--|-> move.l 1a734 <allBIFNames>,d1
    5428:	|  |  |  |   move.l 304(sp),d0
    542c:	|  |  |  |   add.l d0,d0
    542e:	|  |  |  |   add.l d0,d0
    5430:	|  |  |  |   movea.l d1,a2
    5432:	|  |  |  |   adda.l d0,a2
    5434:	|  |  |  |   move.l 288(sp),-(sp)
    5438:	|  |  |  |   jsr b02 <readString>
    543e:	|  |  |  |   addq.l #4,sp
    5440:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5442:	|  |  |  |   addq.l #1,304(sp)
    5446:	|  |  |  \-> move.l 1a778 <numBIFNames>,d0
    544c:	|  |  |      cmp.l 304(sp),d0
    5450:	|  |  \----- bgt.s 5422 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5452:	|  |         move.l 288(sp),-(sp)
    5456:	|  |         jsr 6bc <get2bytes>
    545c:	|  |         addq.l #4,sp
    545e:	|  |         move.l d0,1a784 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    5464:	|  |         move.l 1a784 <numUserFunc>,d0
    546a:	|  |         move.l d0,264(sp)
    546e:	|  |         clr.l 260(sp)
    5472:	|  |         move.l 1a7a4 <SysBase>,d0
    5478:	|  |         movea.l d0,a6
    547a:	|  |         move.l 264(sp),d0
    547e:	|  |         move.l 260(sp),d1
    5482:	|  |         jsr -684(a6)
    5486:	|  |         move.l d0,256(sp)
    548a:	|  |         move.l 256(sp),d0
    548e:	|  |         move.l d0,1a740 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    5494:	|  |         move.l 1a740 <allUserFunc>,d0
    549a:	|  |     /-- bne.s 54a2 <initSludge+0x13e>
    549c:	|  |     |   clr.w d0
    549e:	+--|-----|-- bra.w 5ad2 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    54a2:	|  |     \-> clr.l 300(sp)
    54a6:	|  |     /-- bra.s 54cc <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    54a8:	|  |  /--|-> move.l 1a740 <allUserFunc>,d1
    54ae:	|  |  |  |   move.l 300(sp),d0
    54b2:	|  |  |  |   add.l d0,d0
    54b4:	|  |  |  |   add.l d0,d0
    54b6:	|  |  |  |   movea.l d1,a2
    54b8:	|  |  |  |   adda.l d0,a2
    54ba:	|  |  |  |   move.l 288(sp),-(sp)
    54be:	|  |  |  |   jsr b02 <readString>
    54c4:	|  |  |  |   addq.l #4,sp
    54c6:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    54c8:	|  |  |  |   addq.l #1,300(sp)
    54cc:	|  |  |  \-> move.l 1a784 <numUserFunc>,d0
    54d2:	|  |  |      cmp.l 300(sp),d0
    54d6:	|  |  \----- bgt.s 54a8 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    54d8:	|  |         move.l 1a74e <gameVersion>,d0
    54de:	|  |         cmpi.l #258,d0
    54e4:	|  +-------- ble.w 5572 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    54e8:	|  |         move.l 288(sp),-(sp)
    54ec:	|  |         jsr 6bc <get2bytes>
    54f2:	|  |         addq.l #4,sp
    54f4:	|  |         move.l d0,1a780 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    54fa:	|  |         move.l 1a780 <numResourceNames>,d0
    5500:	|  |         add.l d0,d0
    5502:	|  |         add.l d0,d0
    5504:	|  |         move.l d0,252(sp)
    5508:	|  |         clr.l 248(sp)
    550c:	|  |         move.l 1a7a4 <SysBase>,d0
    5512:	|  |         movea.l d0,a6
    5514:	|  |         move.l 252(sp),d0
    5518:	|  |         move.l 248(sp),d1
    551c:	|  |         jsr -684(a6)
    5520:	|  |         move.l d0,244(sp)
    5524:	|  |         move.l 244(sp),d0
    5528:	|  |         move.l d0,1a738 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    552e:	|  |         move.l 1a738 <allResourceNames>,d0
    5534:	|  |     /-- bne.s 553c <initSludge+0x1d8>
    5536:	|  |     |   clr.w d0
    5538:	+--|-----|-- bra.w 5ad2 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    553c:	|  |     \-> clr.l 296(sp)
    5540:	|  |     /-- bra.s 5566 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    5542:	|  |  /--|-> move.l 1a738 <allResourceNames>,d1
    5548:	|  |  |  |   move.l 296(sp),d0
    554c:	|  |  |  |   add.l d0,d0
    554e:	|  |  |  |   add.l d0,d0
    5550:	|  |  |  |   movea.l d1,a2
    5552:	|  |  |  |   adda.l d0,a2
    5554:	|  |  |  |   move.l 288(sp),-(sp)
    5558:	|  |  |  |   jsr b02 <readString>
    555e:	|  |  |  |   addq.l #4,sp
    5560:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5562:	|  |  |  |   addq.l #1,296(sp)
    5566:	|  |  |  \-> move.l 1a780 <numResourceNames>,d0
    556c:	|  |  |      cmp.l 296(sp),d0
    5570:	|  |  \----- bgt.s 5542 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5572:	|  \-------> move.l #129,1a760 <input+0xa>
	input.mouseY = 100;
    557c:	|            moveq #100,d0
    557e:	|            move.l d0,1a764 <input+0xe>
	winWidth = get2bytes (fp);
    5584:	|            move.l 288(sp),-(sp)
    5588:	|            jsr 6bc <get2bytes>
    558e:	|            addq.l #4,sp
    5590:	|            move.l d0,1a6f8 <winWidth>
	winHeight = get2bytes (fp);
    5596:	|            move.l 288(sp),-(sp)
    559a:	|            jsr 6bc <get2bytes>
    55a0:	|            addq.l #4,sp
    55a2:	|            move.l d0,1a6fc <winHeight>
	specialSettings = FGetC (fp);
    55a8:	|            move.l 288(sp),240(sp)
    55ae:	|            move.l 1a7ac <DOSBase>,d0
    55b4:	|            movea.l d0,a6
    55b6:	|            move.l 240(sp),d1
    55ba:	|            jsr -306(a6)
    55be:	|            move.l d0,236(sp)
    55c2:	|            move.l 236(sp),d0
    55c6:	|            move.l d0,1a788 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    55cc:	|            move.l 288(sp),232(sp)
    55d2:	|            move.l 1a7ac <DOSBase>,d0
    55d8:	|            movea.l d0,a6
    55da:	|            move.l 232(sp),d1
    55de:	|            jsr -306(a6)
    55e2:	|            move.l d0,228(sp)
    55e6:	|            move.l 228(sp),d0
    55ea:	|            move.l d0,-(sp)
    55ec:	|            pea 3e8 <encodeFilename+0xea>
    55f0:	|            jsr 172d0 <__divsi3>
    55f6:	|            addq.l #8,sp
    55f8:	|            move.l d0,1a132 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    55fe:	|            move.l 288(sp),-(sp)
    5602:	|            jsr b02 <readString>
    5608:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    560a:	|            move.l 288(sp),224(sp)
    5610:	|            move.l #108358,220(sp)
    5618:	|            moveq #8,d1
    561a:	|            move.l d1,216(sp)
    561e:	|            moveq #1,d0
    5620:	|            move.l d0,212(sp)
    5624:	|            move.l 1a7ac <DOSBase>,d0
    562a:	|            movea.l d0,a6
    562c:	|            move.l 224(sp),d1
    5630:	|            move.l 220(sp),d2
    5634:	|            move.l 216(sp),d3
    5638:	|            move.l 212(sp),d4
    563c:	|            jsr -324(a6)
    5640:	|            move.l d0,208(sp)
    5644:	|            move.l 208(sp),d0
    5648:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    564c:	|            moveq #1,d1
    564e:	|            cmp.l 204(sp),d1
    5652:	|        /-- beq.s 5662 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5654:	|        |   pea 17fbb <PutChar+0xc53>
    565a:	|        |   jsr 16894 <KPrintF>
    5660:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5662:	|        \-> move.l 1a74e <gameVersion>,d0
    5668:	|            cmpi.l #258,d0
    566e:	|        /-- ble.s 567e <initSludge+0x31a>
    5670:	|        |   move.l 288(sp),-(sp)
    5674:	|        |   jsr b02 <readString>
    567a:	|        |   addq.l #4,sp
    567c:	|     /--|-- bra.s 5692 <initSludge+0x32e>
    567e:	|     |  \-> pea 17fd9 <PutChar+0xc71>
    5684:	|     |      pea 17fd9 <PutChar+0xc71>
    568a:	|     |      jsr 133c2 <joinStrings>
    5690:	|     |      addq.l #8,sp
    5692:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5696:	|            move.l 1a74e <gameVersion>,d0
    569c:	|            cmpi.l #258,d0
    56a2:	|     /----- ble.s 56c4 <initSludge+0x360>
    56a4:	|     |      move.l 288(sp),196(sp)
    56aa:	|     |      move.l 1a7ac <DOSBase>,d0
    56b0:	|     |      movea.l d0,a6
    56b2:	|     |      move.l 196(sp),d1
    56b6:	|     |      jsr -306(a6)
    56ba:	|     |      move.l d0,192(sp)
    56be:	|     |      move.l 192(sp),d0
    56c2:	|     |  /-- bra.s 56c6 <initSludge+0x362>
    56c4:	|     \--|-> moveq #0,d0
    56c6:	|        \-> move.l d0,1a898 <gameSettings+0x4>
	makeLanguageTable (fp);
    56cc:	|            move.l 288(sp),-(sp)
    56d0:	|            jsr 12d78 <makeLanguageTable>
    56d6:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    56d8:	|            move.l 1a74e <gameVersion>,d0
    56de:	|            cmpi.l #261,d0
    56e4:	|        /-- ble.s 5732 <initSludge+0x3ce>
	{
		FGetC(fp);
    56e6:	|        |   move.l 288(sp),188(sp)
    56ec:	|        |   move.l 1a7ac <DOSBase>,d0
    56f2:	|        |   movea.l d0,a6
    56f4:	|        |   move.l 188(sp),d1
    56f8:	|        |   jsr -306(a6)
    56fc:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5700:	|        |   move.l 288(sp),180(sp)
    5706:	|        |   move.l 1a7ac <DOSBase>,d0
    570c:	|        |   movea.l d0,a6
    570e:	|        |   move.l 180(sp),d1
    5712:	|        |   jsr -306(a6)
    5716:	|        |   move.l d0,176(sp)
		getFloat (fp);
    571a:	|        |   move.l 288(sp),-(sp)
    571e:	|        |   jsr 7d8 <getFloat>
    5724:	|        |   addq.l #4,sp
		getFloat (fp);
    5726:	|        |   move.l 288(sp),-(sp)
    572a:	|        |   jsr 7d8 <getFloat>
    5730:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5732:	|        \-> move.l 288(sp),-(sp)
    5736:	|            jsr b02 <readString>
    573c:	|            addq.l #4,sp
    573e:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5742:	|            pea 17fda <PutChar+0xc72>
    5748:	|            move.l 176(sp),-(sp)
    574c:	|            jsr 13342 <strcmp>
    5752:	|            addq.l #8,sp
    5754:	|            tst.l d0
    5756:	|        /-- beq.s 575e <initSludge+0x3fa>
		return FALSE;
    5758:	|        |   clr.w d0
    575a:	+--------|-- bra.w 5ad2 <initSludge+0x76e>
	}
	FreeVec( checker);
    575e:	|        \-> move.l 172(sp),168(sp)
    5764:	|            move.l 1a7a4 <SysBase>,d0
    576a:	|            movea.l d0,a6
    576c:	|            movea.l 168(sp),a1
    5770:	|            jsr -690(a6)
	checker = NULL;
    5774:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5778:	|            move.l 288(sp),164(sp)
    577e:	|            move.l 1a7ac <DOSBase>,d0
    5784:	|            movea.l d0,a6
    5786:	|            move.l 164(sp),d1
    578a:	|            jsr -306(a6)
    578e:	|            move.l d0,160(sp)
    5792:	|            move.l 160(sp),d0
    5796:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    579a:	|            moveq #0,d0
    579c:	|            move.b 159(sp),d0
    57a0:	|            moveq #1,d1
    57a2:	|            and.l d1,d0
    57a4:	|        /-- beq.s 57fc <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    57a6:	|        |   move.l 1a7ac <DOSBase>,d0
    57ac:	|        |   movea.l d0,a6
    57ae:	|        |   jsr -60(a6)
    57b2:	|        |   move.l d0,38(sp)
    57b6:	|        |   move.l 38(sp),d0
    57ba:	|        |   move.l d0,34(sp)
    57be:	|        |   move.l #98274,30(sp)
    57c6:	|        |   moveq #54,d0
    57c8:	|        |   move.l d0,26(sp)
    57cc:	|        |   move.l 1a7ac <DOSBase>,d0
    57d2:	|        |   movea.l d0,a6
    57d4:	|        |   move.l 34(sp),d1
    57d8:	|        |   move.l 30(sp),d2
    57dc:	|        |   move.l 26(sp),d3
    57e0:	|        |   jsr -48(a6)
    57e4:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    57e8:	|        |   pea 18019 <PutChar+0xcb1>
    57ee:	|        |   jsr 16894 <KPrintF>
    57f4:	|        |   addq.l #4,sp
		return FALSE;
    57f6:	|        |   clr.w d0
    57f8:	+--------|-- bra.w 5ad2 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    57fc:	|        \-> move.l 288(sp),-(sp)
    5800:	|            jsr 6bc <get2bytes>
    5806:	|            addq.l #4,sp
    5808:	|            move.l d0,1a77c <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    580e:	|            move.l 1a77c <numGlobals>,d0
    5814:	|            lsl.l #3,d0
    5816:	|            move.l d0,154(sp)
    581a:	|            clr.l 150(sp)
    581e:	|            move.l 1a7a4 <SysBase>,d0
    5824:	|            movea.l d0,a6
    5826:	|            move.l 154(sp),d0
    582a:	|            move.l 150(sp),d1
    582e:	|            jsr -684(a6)
    5832:	|            move.l d0,146(sp)
    5836:	|            move.l 146(sp),d0
    583a:	|            move.l d0,1a752 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    5840:	|            move.l 1a752 <globalVars>,d0
    5846:	|        /-- bne.s 5864 <initSludge+0x500>
    5848:	|        |   move.l 1a77c <numGlobals>,d0
    584e:	|        +-- ble.s 5864 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    5850:	|        |   pea 18051 <PutChar+0xce9>
    5856:	|        |   jsr 16894 <KPrintF>
    585c:	|        |   addq.l #4,sp
		return FALSE;
    585e:	|        |   clr.w d0
    5860:	+--------|-- bra.w 5ad2 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    5864:	|        \-> clr.l 308(sp)
    5868:	|        /-- bra.s 5880 <initSludge+0x51c>
    586a:	|     /--|-> move.l 1a752 <globalVars>,d1
    5870:	|     |  |   move.l 308(sp),d0
    5874:	|     |  |   lsl.l #3,d0
    5876:	|     |  |   movea.l d1,a0
    5878:	|     |  |   adda.l d0,a0
    587a:	|     |  |   clr.l (a0)
    587c:	|     |  |   addq.l #1,308(sp)
    5880:	|     |  \-> move.l 1a77c <numGlobals>,d0
    5886:	|     |      cmp.l 308(sp),d0
    588a:	|     \----- bgt.s 586a <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    588c:	|            move.l 1a898 <gameSettings+0x4>,d0
    5892:	|            clr.l -(sp)
    5894:	|            move.l d0,-(sp)
    5896:	|            move.l 296(sp),-(sp)
    589a:	|            jsr 68a0 <setFileIndices>
    58a0:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    58a4:	|            pea 1 <_start+0x1>
    58a8:	|            jsr 655a <getNumberedString>
    58ae:	|            addq.l #4,sp
    58b0:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    58b4:	|            move.l 142(sp),-(sp)
    58b8:	|            jsr 2fe <encodeFilename>
    58be:	|            addq.l #4,sp
    58c0:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    58c4:	|            move.l 142(sp),134(sp)
    58ca:	|            move.l 1a7a4 <SysBase>,d0
    58d0:	|            movea.l d0,a6
    58d2:	|            movea.l 134(sp),a1
    58d6:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    58da:	|            move.l 138(sp),130(sp)
    58e0:	|            move.l 1a7ac <DOSBase>,d0
    58e6:	|            movea.l d0,a6
    58e8:	|            move.l 130(sp),d1
    58ec:	|            jsr -120(a6)
    58f0:	|            move.l d0,126(sp)
    58f4:	|            move.l 126(sp),d0
    58f8:	|            move.l d0,292(sp)
	if(lock == 0) {
    58fc:	|        /-- bne.s 592a <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    58fe:	|        |   move.l 138(sp),122(sp)
    5904:	|        |   moveq #-2,d1
    5906:	|        |   move.l d1,118(sp)
    590a:	|        |   move.l 1a7ac <DOSBase>,d0
    5910:	|        |   movea.l d0,a6
    5912:	|        |   move.l 122(sp),d1
    5916:	|        |   move.l 118(sp),d2
    591a:	|        |   jsr -84(a6)
    591e:	|        |   move.l d0,114(sp)
    5922:	|        |   move.l 114(sp),d0
    5926:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    592a:	|        \-> move.l 292(sp),110(sp)
    5930:	|            move.l 1a7ac <DOSBase>,d0
    5936:	|            movea.l d0,a6
    5938:	|            move.l 110(sp),d1
    593c:	|            jsr -126(a6)
    5940:	|            move.l d0,106(sp)
    5944:	|            move.l 106(sp),d0
    5948:	|        /-- bne.s 59a4 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    594a:	|        |   move.l 138(sp),-(sp)
    594e:	|        |   pea 18084 <PutChar+0xd1c>
    5954:	|        |   jsr 16894 <KPrintF>
    595a:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    595c:	|        |   move.l 1a7ac <DOSBase>,d0
    5962:	|        |   movea.l d0,a6
    5964:	|        |   jsr -60(a6)
    5968:	|        |   move.l d0,58(sp)
    596c:	|        |   move.l 58(sp),d0
    5970:	|        |   move.l d0,54(sp)
    5974:	|        |   move.l #98481,50(sp)
    597c:	|        |   moveq #40,d0
    597e:	|        |   move.l d0,46(sp)
    5982:	|        |   move.l 1a7ac <DOSBase>,d0
    5988:	|        |   movea.l d0,a6
    598a:	|        |   move.l 54(sp),d1
    598e:	|        |   move.l 50(sp),d2
    5992:	|        |   move.l 46(sp),d3
    5996:	|        |   jsr -48(a6)
    599a:	|        |   move.l d0,42(sp)
		return FALSE;
    599e:	|        |   clr.w d0
    59a0:	+--------|-- bra.w 5ad2 <initSludge+0x76e>
	}

	FreeVec(gameName);
    59a4:	|        \-> move.l 138(sp),102(sp)
    59aa:	|            move.l 1a7a4 <SysBase>,d0
    59b0:	|            movea.l d0,a6
    59b2:	|            movea.l 102(sp),a1
    59b6:	|            jsr -690(a6)

	readIniFile (filename);
    59ba:	|            move.l 316(sp),-(sp)
    59be:	|            jsr 12eac <readIniFile>
    59c4:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    59c6:	|            jsr 12c7e <getLanguageForFileB>
    59cc:	|            move.l d0,1a120 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    59d2:	|            move.l 1a120 <languageNum>,d0
    59d8:	|        /-- bpl.s 59e8 <initSludge+0x684>
    59da:	|        |   pea 180da <PutChar+0xd72>
    59e0:	|        |   jsr 16894 <KPrintF>
    59e6:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    59e8:	|        \-> move.l 1a120 <languageNum>,d0
    59ee:	|            move.l d0,d1
    59f0:	|            move.l 1a898 <gameSettings+0x4>,d0
    59f6:	|            move.l d1,-(sp)
    59f8:	|            move.l d0,-(sp)
    59fa:	|            clr.l -(sp)
    59fc:	|            jsr 68a0 <setFileIndices>
    5a02:	|            lea 12(sp),sp

	if (dataFol[0]) {
    5a06:	|            movea.l 200(sp),a0
    5a0a:	|            move.b (a0),d0
    5a0c:	|     /----- beq.w 5ab6 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    5a10:	|     |      move.l 200(sp),-(sp)
    5a14:	|     |      jsr 2fe <encodeFilename>
    5a1a:	|     |      addq.l #4,sp
    5a1c:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    5a20:	|     |      move.l 98(sp),94(sp)
    5a26:	|     |      move.l 1a7ac <DOSBase>,d0
    5a2c:	|     |      movea.l d0,a6
    5a2e:	|     |      move.l 94(sp),d1
    5a32:	|     |      jsr -120(a6)
    5a36:	|     |      move.l d0,90(sp)
    5a3a:	|     |      move.l 90(sp),d0
    5a3e:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    5a42:	|     |  /-- bne.s 5a70 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    5a44:	|     |  |   move.l 98(sp),86(sp)
    5a4a:	|     |  |   moveq #-2,d1
    5a4c:	|     |  |   move.l d1,82(sp)
    5a50:	|     |  |   move.l 1a7ac <DOSBase>,d0
    5a56:	|     |  |   movea.l d0,a6
    5a58:	|     |  |   move.l 86(sp),d1
    5a5c:	|     |  |   move.l 82(sp),d2
    5a60:	|     |  |   jsr -84(a6)
    5a64:	|     |  |   move.l d0,78(sp)
    5a68:	|     |  |   move.l 78(sp),d0
    5a6c:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    5a70:	|     |  \-> move.l 292(sp),74(sp)
    5a76:	|     |      move.l 1a7ac <DOSBase>,d0
    5a7c:	|     |      movea.l d0,a6
    5a7e:	|     |      move.l 74(sp),d1
    5a82:	|     |      jsr -126(a6)
    5a86:	|     |      move.l d0,70(sp)
    5a8a:	|     |      move.l 70(sp),d0
    5a8e:	|     |  /-- bne.s 5aa0 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    5a90:	|     |  |   move.l 1a7ac <DOSBase>,d0
    5a96:	|     |  |   movea.l d0,a6
    5a98:	|     |  |   jsr -60(a6)
    5a9c:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    5aa0:	|     |  \-> move.l 98(sp),62(sp)
    5aa6:	|     |      move.l 1a7a4 <SysBase>,d0
    5aac:	|     |      movea.l d0,a6
    5aae:	|     |      movea.l 62(sp),a1
    5ab2:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    5ab6:	|     \----> movea.l 1a6fc <winHeight>,a0
    5abc:	|            lea -15(a0),a0
    5ac0:	|            move.l a0,d0
    5ac2:	|            move.l d0,-(sp)
    5ac4:	|            pea a <_start+0xa>
    5ac8:	|            jsr 72d2 <positionStatus>
    5ace:	|            addq.l #8,sp

	return TRUE;
    5ad0:	|            moveq #1,d0
}
    5ad2:	\----------> movem.l (sp)+,d2-d4/a2/a6
    5ad6:	             lea 292(sp),sp
    5ada:	             rts

00005adc <killSpeechTimers>:

void killSpeechTimers () {
    5adc:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5ade:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    5ae4:	   /----- bra.s 5b10 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    5ae6:	/--|----> movea.l (sp),a0
    5ae8:	|  |      move.b 56(a0),d0
    5aec:	|  |  /-- bne.s 5b0a <killSpeechTimers+0x2e>
    5aee:	|  |  |   movea.l (sp),a0
    5af0:	|  |  |   move.w 50(a0),d0
    5af4:	|  |  +-- beq.s 5b0a <killSpeechTimers+0x2e>
    5af6:	|  |  |   movea.l (sp),a0
    5af8:	|  |  |   move.l 12(a0),d0
    5afc:	|  |  +-- beq.s 5b0a <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    5afe:	|  |  |   movea.l (sp),a0
    5b00:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    5b04:	|  |  |   movea.l (sp),a0
    5b06:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    5b0a:	|  |  \-> movea.l (sp),a0
    5b0c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5b10:	|  \----> tst.l (sp)
    5b12:	\-------- bne.s 5ae6 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    5b14:	          jsr 7810 <killAllSpeech>
}
    5b1a:	          nop
    5b1c:	          addq.l #4,sp
    5b1e:	          rts

00005b20 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    5b20:	             lea -52(sp),sp
    5b24:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    5b26:	             movea.l 60(sp),a0
    5b2a:	             move.l (a0),d0
    5b2c:	             move.l d0,-(sp)
    5b2e:	             jsr 67e0 <openSubSlice>
    5b34:	             addq.l #4,sp
    5b36:	             tst.w d0
    5b38:	         /-- bne.s 5b40 <loadFunctionCode+0x20>
    5b3a:	         |   clr.w d0
    5b3c:	/--------|-- bra.w 5d0a <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    5b40:	|        \-> move.l 1a78c <bigDataFile>,44(sp)
    5b48:	|            move.l 1a7ac <DOSBase>,d0
    5b4e:	|            movea.l d0,a6
    5b50:	|            move.l 44(sp),d1
    5b54:	|            jsr -306(a6)
    5b58:	|            move.l d0,40(sp)
    5b5c:	|            move.l 40(sp),d0
    5b60:	|            move.l d0,d0
    5b62:	|            movea.l 60(sp),a0
    5b66:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    5b6a:	|            move.l 1a78c <bigDataFile>,d0
    5b70:	|            move.l d0,-(sp)
    5b72:	|            jsr 6bc <get2bytes>
    5b78:	|            addq.l #4,sp
    5b7a:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    5b7e:	|            move.l 1a78c <bigDataFile>,d0
    5b84:	|            move.l d0,-(sp)
    5b86:	|            jsr 6bc <get2bytes>
    5b8c:	|            addq.l #4,sp
    5b8e:	|            movea.l 60(sp),a0
    5b92:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    5b96:	|            move.l 1a78c <bigDataFile>,d0
    5b9c:	|            move.l d0,-(sp)
    5b9e:	|            jsr 6bc <get2bytes>
    5ba4:	|            addq.l #4,sp
    5ba6:	|            movea.l 60(sp),a0
    5baa:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    5bae:	|            move.l 36(sp),d0
    5bb2:	|            lsl.l #3,d0
    5bb4:	|            move.l d0,32(sp)
    5bb8:	|            clr.l 28(sp)
    5bbc:	|            move.l 1a7a4 <SysBase>,d0
    5bc2:	|            movea.l d0,a6
    5bc4:	|            move.l 32(sp),d0
    5bc8:	|            move.l 28(sp),d1
    5bcc:	|            jsr -684(a6)
    5bd0:	|            move.l d0,24(sp)
    5bd4:	|            move.l 24(sp),d0
    5bd8:	|            movea.l 60(sp),a0
    5bdc:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    5be0:	|            movea.l 60(sp),a0
    5be4:	|            move.l 4(a0),d0
    5be8:	|        /-- bne.s 5bfe <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    5bea:	|        |   pea 18105 <PutChar+0xd9d>
    5bf0:	|        |   jsr 16894 <KPrintF>
    5bf6:	|        |   addq.l #4,sp
		return FALSE;
    5bf8:	|        |   clr.w d0
    5bfa:	+--------|-- bra.w 5d0a <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    5bfe:	|        \-> clr.l 52(sp)
    5c02:	|        /-- bra.s 5c64 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    5c04:	|     /--|-> move.l 1a78c <bigDataFile>,8(sp)
    5c0c:	|     |  |   move.l 1a7ac <DOSBase>,d0
    5c12:	|     |  |   movea.l d0,a6
    5c14:	|     |  |   move.l 8(sp),d1
    5c18:	|     |  |   jsr -306(a6)
    5c1c:	|     |  |   move.l d0,4(sp)
    5c20:	|     |  |   move.l 4(sp),d1
    5c24:	|     |  |   movea.l 60(sp),a0
    5c28:	|     |  |   movea.l 4(a0),a0
    5c2c:	|     |  |   move.l 52(sp),d0
    5c30:	|     |  |   lsl.l #3,d0
    5c32:	|     |  |   adda.l d0,a0
    5c34:	|     |  |   move.l d1,d0
    5c36:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    5c38:	|     |  |   move.l 1a78c <bigDataFile>,d0
    5c3e:	|     |  |   move.l d0,-(sp)
    5c40:	|     |  |   jsr 6bc <get2bytes>
    5c46:	|     |  |   addq.l #4,sp
    5c48:	|     |  |   move.l d0,d1
    5c4a:	|     |  |   movea.l 60(sp),a0
    5c4e:	|     |  |   movea.l 4(a0),a0
    5c52:	|     |  |   move.l 52(sp),d0
    5c56:	|     |  |   lsl.l #3,d0
    5c58:	|     |  |   adda.l d0,a0
    5c5a:	|     |  |   move.l d1,d0
    5c5c:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    5c60:	|     |  |   addq.l #1,52(sp)
    5c64:	|     |  \-> move.l 52(sp),d0
    5c68:	|     |      cmp.l 36(sp),d0
    5c6c:	|     \----- bcs.s 5c04 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    5c6e:	|            jsr 6550 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    5c74:	|            movea.l 60(sp),a0
    5c78:	|            move.l 8(a0),d0
    5c7c:	|  /-------- ble.w 5d00 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    5c80:	|  |         movea.l 60(sp),a0
    5c84:	|  |         move.l 8(a0),d0
    5c88:	|  |         lsl.l #3,d0
    5c8a:	|  |         move.l d0,20(sp)
    5c8e:	|  |         clr.l 16(sp)
    5c92:	|  |         move.l 1a7a4 <SysBase>,d0
    5c98:	|  |         movea.l d0,a6
    5c9a:	|  |         move.l 20(sp),d0
    5c9e:	|  |         move.l 16(sp),d1
    5ca2:	|  |         jsr -684(a6)
    5ca6:	|  |         move.l d0,12(sp)
    5caa:	|  |         move.l 12(sp),d0
    5cae:	|  |         movea.l 60(sp),a0
    5cb2:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    5cb6:	|  |         movea.l 60(sp),a0
    5cba:	|  |         move.l 20(a0),d0
    5cbe:	|  |     /-- bne.s 5cd2 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    5cc0:	|  |     |   pea 18105 <PutChar+0xd9d>
    5cc6:	|  |     |   jsr 16894 <KPrintF>
    5ccc:	|  |     |   addq.l #4,sp
			return FALSE;
    5cce:	|  |     |   clr.w d0
    5cd0:	+--|-----|-- bra.s 5d0a <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    5cd2:	|  |     \-> clr.l 48(sp)
    5cd6:	|  |     /-- bra.s 5cf0 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    5cd8:	|  |  /--|-> movea.l 60(sp),a0
    5cdc:	|  |  |  |   move.l 20(a0),d1
    5ce0:	|  |  |  |   move.l 48(sp),d0
    5ce4:	|  |  |  |   lsl.l #3,d0
    5ce6:	|  |  |  |   movea.l d1,a0
    5ce8:	|  |  |  |   adda.l d0,a0
    5cea:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    5cec:	|  |  |  |   addq.l #1,48(sp)
    5cf0:	|  |  |  \-> movea.l 60(sp),a0
    5cf4:	|  |  |      move.l 8(a0),d0
    5cf8:	|  |  |      cmp.l 48(sp),d0
    5cfc:	|  |  \----- bgt.s 5cd8 <loadFunctionCode+0x1b8>
    5cfe:	|  |     /-- bra.s 5d08 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    5d00:	|  \-----|-> movea.l 60(sp),a0
    5d04:	|        |   clr.l 8(a0)
	}
	return TRUE;
    5d08:	|        \-> moveq #1,d0
}
    5d0a:	\----------> movea.l (sp)+,a6
    5d0c:	             lea 52(sp),sp
    5d10:	             rts

00005d12 <loadHandlers>:

void loadHandlers (BPTR fp) {
    5d12:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    5d14:	movea.l 1a11c <currentEvents>,a2
    5d1a:	move.l 8(sp),-(sp)
    5d1e:	jsr 6bc <get2bytes>
    5d24:	addq.l #4,sp
    5d26:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    5d28:	movea.l 1a11c <currentEvents>,a2
    5d2e:	move.l 8(sp),-(sp)
    5d32:	jsr 6bc <get2bytes>
    5d38:	addq.l #4,sp
    5d3a:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    5d3e:	movea.l 1a11c <currentEvents>,a2
    5d44:	move.l 8(sp),-(sp)
    5d48:	jsr 6bc <get2bytes>
    5d4e:	addq.l #4,sp
    5d50:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    5d54:	movea.l 1a11c <currentEvents>,a2
    5d5a:	move.l 8(sp),-(sp)
    5d5e:	jsr 6bc <get2bytes>
    5d64:	addq.l #4,sp
    5d66:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    5d6a:	movea.l 1a11c <currentEvents>,a2
    5d70:	move.l 8(sp),-(sp)
    5d74:	jsr 6bc <get2bytes>
    5d7a:	addq.l #4,sp
    5d7c:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    5d80:	movea.l 1a11c <currentEvents>,a2
    5d86:	move.l 8(sp),-(sp)
    5d8a:	jsr 6bc <get2bytes>
    5d90:	addq.l #4,sp
    5d92:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    5d96:	movea.l 1a11c <currentEvents>,a2
    5d9c:	move.l 8(sp),-(sp)
    5da0:	jsr 6bc <get2bytes>
    5da6:	addq.l #4,sp
    5da8:	move.l d0,24(a2)
}
    5dac:	nop
    5dae:	movea.l (sp)+,a2
    5db0:	rts

00005db2 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    5db2:	       lea -312(sp),sp
    5db6:	       movem.l d2-d3/a6,-(sp)
    5dba:	       move.l 332(sp),d1
    5dbe:	       move.l 336(sp),d0
    5dc2:	       move.b d1,d1
    5dc4:	       move.b d1,16(sp)
    5dc8:	       move.b d0,d0
    5dca:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    5dce:	       move.l 328(sp),318(sp)
    5dd4:	       move.l #1005,314(sp)
    5ddc:	       move.l 1a7ac <DOSBase>,d0
    5de2:	       movea.l d0,a6
    5de4:	       move.l 318(sp),d1
    5de8:	       move.l 314(sp),d2
    5dec:	       jsr -30(a6)
    5df0:	       move.l d0,310(sp)
    5df4:	       move.l 310(sp),d0
    5df8:	       move.l d0,306(sp)

	if (! fp) {
    5dfc:	   /-- bne.s 5e58 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    5dfe:	   |   move.l 1a7ac <DOSBase>,d0
    5e04:	   |   movea.l d0,a6
    5e06:	   |   jsr -60(a6)
    5e0a:	   |   move.l d0,154(sp)
    5e0e:	   |   move.l 154(sp),d0
    5e12:	   |   move.l d0,150(sp)
    5e16:	   |   move.l #98606,146(sp)
    5e1e:	   |   moveq #31,d0
    5e20:	   |   move.l d0,142(sp)
    5e24:	   |   move.l 1a7ac <DOSBase>,d0
    5e2a:	   |   movea.l d0,a6
    5e2c:	   |   move.l 150(sp),d1
    5e30:	   |   move.l 146(sp),d2
    5e34:	   |   move.l 142(sp),d3
    5e38:	   |   jsr -48(a6)
    5e3c:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    5e40:	   |   move.l 328(sp),-(sp)
    5e44:	   |   pea 1814e <PutChar+0xde6>
    5e4a:	   |   jsr 16894 <KPrintF>
    5e50:	   |   addq.l #8,sp
		return NULL;
    5e52:	   |   moveq #0,d0
    5e54:	/--|-- bra.w 6118 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    5e58:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    5e5c:	|      move.l 306(sp),302(sp)
    5e62:	|      move.l 1a7ac <DOSBase>,d0
    5e68:	|      movea.l d0,a6
    5e6a:	|      move.l 302(sp),d1
    5e6e:	|      jsr -306(a6)
    5e72:	|      move.l d0,298(sp)
    5e76:	|      move.l 298(sp),d0
    5e7a:	|      moveq #83,d1
    5e7c:	|      cmp.l d0,d1
    5e7e:	|  /-- beq.s 5e86 <openAndVerify+0xd4>
    5e80:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    5e86:	|  \-> move.l 306(sp),294(sp)
    5e8c:	|      move.l 1a7ac <DOSBase>,d0
    5e92:	|      movea.l d0,a6
    5e94:	|      move.l 294(sp),d1
    5e98:	|      jsr -306(a6)
    5e9c:	|      move.l d0,290(sp)
    5ea0:	|      move.l 290(sp),d0
    5ea4:	|      moveq #76,d1
    5ea6:	|      cmp.l d0,d1
    5ea8:	|  /-- beq.s 5eb0 <openAndVerify+0xfe>
    5eaa:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    5eb0:	|  \-> move.l 306(sp),286(sp)
    5eb6:	|      move.l 1a7ac <DOSBase>,d0
    5ebc:	|      movea.l d0,a6
    5ebe:	|      move.l 286(sp),d1
    5ec2:	|      jsr -306(a6)
    5ec6:	|      move.l d0,282(sp)
    5eca:	|      move.l 282(sp),d0
    5ece:	|      moveq #85,d1
    5ed0:	|      cmp.l d0,d1
    5ed2:	|  /-- beq.s 5eda <openAndVerify+0x128>
    5ed4:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    5eda:	|  \-> move.l 306(sp),278(sp)
    5ee0:	|      move.l 1a7ac <DOSBase>,d0
    5ee6:	|      movea.l d0,a6
    5ee8:	|      move.l 278(sp),d1
    5eec:	|      jsr -306(a6)
    5ef0:	|      move.l d0,274(sp)
    5ef4:	|      move.l 274(sp),d0
    5ef8:	|      moveq #68,d1
    5efa:	|      cmp.l d0,d1
    5efc:	|  /-- beq.s 5f04 <openAndVerify+0x152>
    5efe:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    5f04:	|  \-> move.l 306(sp),270(sp)
    5f0a:	|      move.l 1a7ac <DOSBase>,d0
    5f10:	|      movea.l d0,a6
    5f12:	|      move.l 270(sp),d1
    5f16:	|      jsr -306(a6)
    5f1a:	|      move.l d0,266(sp)
    5f1e:	|      move.l 266(sp),d1
    5f22:	|      move.b 16(sp),d0
    5f26:	|      ext.w d0
    5f28:	|      movea.w d0,a0
    5f2a:	|      cmpa.l d1,a0
    5f2c:	|  /-- beq.s 5f34 <openAndVerify+0x182>
    5f2e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    5f34:	|  \-> move.l 306(sp),262(sp)
    5f3a:	|      move.l 1a7ac <DOSBase>,d0
    5f40:	|      movea.l d0,a6
    5f42:	|      move.l 262(sp),d1
    5f46:	|      jsr -306(a6)
    5f4a:	|      move.l d0,258(sp)
    5f4e:	|      move.l 258(sp),d1
    5f52:	|      move.b 14(sp),d0
    5f56:	|      ext.w d0
    5f58:	|      movea.w d0,a0
    5f5a:	|      cmpa.l d1,a0
    5f5c:	|  /-- beq.s 5f64 <openAndVerify+0x1b2>
    5f5e:	|  |   move.w #1,322(sp)
	if (headerBad) {
    5f64:	|  \-> tst.w 322(sp)
    5f68:	|  /-- beq.s 5fc0 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    5f6a:	|  |   move.l 1a7ac <DOSBase>,d0
    5f70:	|  |   movea.l d0,a6
    5f72:	|  |   jsr -60(a6)
    5f76:	|  |   move.l d0,174(sp)
    5f7a:	|  |   move.l 174(sp),d0
    5f7e:	|  |   move.l d0,170(sp)
    5f82:	|  |   move.l #98669,166(sp)
    5f8a:	|  |   moveq #31,d0
    5f8c:	|  |   move.l d0,162(sp)
    5f90:	|  |   move.l 1a7ac <DOSBase>,d0
    5f96:	|  |   movea.l d0,a6
    5f98:	|  |   move.l 170(sp),d1
    5f9c:	|  |   move.l 166(sp),d2
    5fa0:	|  |   move.l 162(sp),d3
    5fa4:	|  |   jsr -48(a6)
    5fa8:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    5fac:	|  |   pea 1816d <PutChar+0xe05>
    5fb2:	|  |   jsr 16894 <KPrintF>
    5fb8:	|  |   addq.l #4,sp
		return NULL;
    5fba:	|  |   moveq #0,d0
    5fbc:	+--|-- bra.w 6118 <openAndVerify+0x366>
	}
	FGetC (fp);
    5fc0:	|  \-> move.l 306(sp),254(sp)
    5fc6:	|      move.l 1a7ac <DOSBase>,d0
    5fcc:	|      movea.l d0,a6
    5fce:	|      move.l 254(sp),d1
    5fd2:	|      jsr -306(a6)
    5fd6:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    5fda:	|      nop
    5fdc:	|  /-> move.l 306(sp),246(sp)
    5fe2:	|  |   move.l 1a7ac <DOSBase>,d0
    5fe8:	|  |   movea.l d0,a6
    5fea:	|  |   move.l 246(sp),d1
    5fee:	|  |   jsr -306(a6)
    5ff2:	|  |   move.l d0,242(sp)
    5ff6:	|  |   move.l 242(sp),d0
    5ffa:	|  \-- bne.s 5fdc <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    5ffc:	|      move.l 306(sp),238(sp)
    6002:	|      move.l 1a7ac <DOSBase>,d0
    6008:	|      movea.l d0,a6
    600a:	|      move.l 238(sp),d1
    600e:	|      jsr -306(a6)
    6012:	|      move.l d0,234(sp)
    6016:	|      move.l 234(sp),d0
    601a:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    601e:	|      move.l 306(sp),226(sp)
    6024:	|      move.l 1a7ac <DOSBase>,d0
    602a:	|      movea.l d0,a6
    602c:	|      move.l 226(sp),d1
    6030:	|      jsr -306(a6)
    6034:	|      move.l d0,222(sp)
    6038:	|      move.l 222(sp),d0
    603c:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    6040:	|      move.l 230(sp),d0
    6044:	|      lsl.l #8,d0
    6046:	|      add.l 218(sp),d0
    604a:	|      movea.l 344(sp),a0
    604e:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    6050:	|      movea.l 344(sp),a0
    6054:	|      move.l (a0),d0
    6056:	|      cmpi.l #514,d0
    605c:	|  /-- ble.s 60b2 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    605e:	|  |   move.l 1a7ac <DOSBase>,d0
    6064:	|  |   movea.l d0,a6
    6066:	|  |   jsr -60(a6)
    606a:	|  |   move.l d0,194(sp)
    606e:	|  |   move.l 194(sp),d0
    6072:	|  |   move.l d0,190(sp)
    6076:	|  |   move.l #98696,186(sp)
    607e:	|  |   moveq #100,d1
    6080:	|  |   move.l d1,182(sp)
    6084:	|  |   move.l 1a7ac <DOSBase>,d0
    608a:	|  |   movea.l d0,a6
    608c:	|  |   move.l 190(sp),d1
    6090:	|  |   move.l 186(sp),d2
    6094:	|  |   move.l 182(sp),d3
    6098:	|  |   jsr -48(a6)
    609c:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    60a0:	|  |   pea 18188 <PutChar+0xe20>
    60a6:	|  |   jsr 16894 <KPrintF>
    60ac:	|  |   addq.l #4,sp
		return NULL;
    60ae:	|  |   moveq #0,d0
    60b0:	+--|-- bra.s 6118 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    60b2:	|  \-> movea.l 344(sp),a0
    60b6:	|      move.l (a0),d0
    60b8:	|      cmpi.l #257,d0
    60be:	|  /-- bgt.s 6114 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    60c0:	|  |   move.l 1a7ac <DOSBase>,d0
    60c6:	|  |   movea.l d0,a6
    60c8:	|  |   jsr -60(a6)
    60cc:	|  |   move.l d0,214(sp)
    60d0:	|  |   move.l 214(sp),d0
    60d4:	|  |   move.l d0,210(sp)
    60d8:	|  |   move.l #98765,206(sp)
    60e0:	|  |   moveq #100,d0
    60e2:	|  |   move.l d0,202(sp)
    60e6:	|  |   move.l 1a7ac <DOSBase>,d0
    60ec:	|  |   movea.l d0,a6
    60ee:	|  |   move.l 210(sp),d1
    60f2:	|  |   move.l 206(sp),d2
    60f6:	|  |   move.l 202(sp),d3
    60fa:	|  |   jsr -48(a6)
    60fe:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    6102:	|  |   pea 181cd <PutChar+0xe65>
    6108:	|  |   jsr 16894 <KPrintF>
    610e:	|  |   addq.l #4,sp
		return NULL;
    6110:	|  |   moveq #0,d0
    6112:	+--|-- bra.s 6118 <openAndVerify+0x366>
	}
	return fp;
    6114:	|  \-> move.l 306(sp),d0
}
    6118:	\----> movem.l (sp)+,d2-d3/a6
    611c:	       lea 312(sp),sp
    6120:	       rts

00006122 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    6122:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    6124:	          move.l #108348,(sp)
	while (* huntAndDestroy) {
    612a:	   /----- bra.s 6156 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    612c:	/--|----> movea.l (sp),a0
    612e:	|  |      move.l (a0),d0
    6130:	|  |      cmp.l 8(sp),d0
    6134:	|  |  /-- bne.s 614c <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    6136:	|  |  |   movea.l (sp),a0
    6138:	|  |  |   movea.l (a0),a0
    613a:	|  |  |   move.l 44(a0),d0
    613e:	|  |  |   movea.l (sp),a0
    6140:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    6142:	|  |  |   movea.l 8(sp),a0
    6146:	|  |  |   clr.l 44(a0)
    614a:	|  +--|-- bra.s 6156 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    614c:	|  |  \-> movea.l (sp),a0
    614e:	|  |      move.l (a0),d0
    6150:	|  |      moveq #44,d1
    6152:	|  |      add.l d0,d1
    6154:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    6156:	|  \----> movea.l (sp),a0
    6158:	|         move.l (a0),d0
    615a:	\-------- bne.s 612c <pauseFunction+0xa>
		}
	}
}
    615c:	          nop
    615e:	          nop
    6160:	          addq.l #4,sp
    6162:	          rts

00006164 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    6164:	move.l 1a73c <allRunningFunctions>,d0
    616a:	movea.l 4(sp),a0
    616e:	move.l d0,44(a0)
	allRunningFunctions = fun;
    6172:	move.l 4(sp),1a73c <allRunningFunctions>
}
    617a:	nop
    617c:	rts

0000617e <runSludge>:

BOOL runSludge () {
    617e:	                   lea -12(sp),sp
    6182:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    6184:	                   move.l 1a73c <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    618c:	      /----------- bra.s 6208 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    618e:	   /--|----------> movea.l 12(sp),a0
    6192:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    6198:	   |  |            movea.l 12(sp),a0
    619c:	   |  |            move.b 56(a0),d0
    61a0:	   |  |  /-------- bne.s 6202 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    61a2:	   |  |  |         movea.l 12(sp),a0
    61a6:	   |  |  |         move.l 12(a0),d0
    61aa:	   |  |  |  /----- beq.s 61d4 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    61ac:	   |  |  |  |      movea.l 12(sp),a0
    61b0:	   |  |  |  |      move.l 12(a0),d0
    61b4:	   |  |  |  |  /-- bpl.s 61c0 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    61b6:	   |  |  |  |  |   movea.l 12(sp),a0
    61ba:	   |  |  |  |  |   clr.l 12(a0)
    61be:	   |  |  +--|--|-- bra.s 6202 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    61c0:	   |  |  |  |  \-> movea.l 12(sp),a0
    61c4:	   |  |  |  |      move.l 12(a0),d0
    61c8:	   |  |  |  |      subq.l #1,d0
    61ca:	   |  |  |  |      movea.l 12(sp),a0
    61ce:	   |  |  |  |      move.l d0,12(a0)
    61d2:	   |  |  +--|----- bra.s 6202 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    61d4:	   |  |  |  \----> movea.l 12(sp),a0
    61d8:	   |  |  |         move.w 50(a0),d0
    61dc:	   |  |  |     /-- beq.s 61ec <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    61de:	   |  |  |     |   movea.l 12(sp),a0
    61e2:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    61e6:	   |  |  |     |   jsr 7810 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    61ec:	   |  |  |     \-> move.l 12(sp),-(sp)
    61f0:	   |  |  |         jsr 414c <continueFunction>
    61f6:	   |  |  |         addq.l #4,sp
    61f8:	   |  |  |         tst.w d0
    61fa:	   |  |  +-------- bne.s 6202 <runSludge+0x84>
					return FALSE;
    61fc:	   |  |  |         clr.w d0
    61fe:	/--|--|--|-------- bra.w 628e <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    6202:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    6208:	|  |  \----------> tst.l 12(sp)
    620c:	|  \-------------- bne.s 618e <runSludge+0x10>
	}

	if (loadNow) {
    620e:	|                  move.l 1a770 <loadNow>,d0
    6214:	|        /-------- beq.s 628c <runSludge+0x10e>
		if (loadNow[0] == ':') {
    6216:	|        |         movea.l 1a770 <loadNow>,a0
    621c:	|        |         move.b (a0),d0
    621e:	|        |         cmpi.b #58,d0
    6222:	|        |  /----- bne.s 6256 <runSludge+0xd8>
			saveGame (loadNow + 1);
    6224:	|        |  |      move.l 1a770 <loadNow>,d0
    622a:	|        |  |      addq.l #1,d0
    622c:	|        |  |      move.l d0,-(sp)
    622e:	|        |  |      jsr be42 <saveGame>
    6234:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    6236:	|        |  |      movea.l 1a882 <saverFunc>,a0
    623c:	|        |  |      lea 28(a0),a0
    6240:	|        |  |      pea 1 <_start+0x1>
    6244:	|        |  |      pea 1 <_start+0x1>
    6248:	|        |  |      move.l a0,-(sp)
    624a:	|        |  |      jsr 14788 <setVariable>
    6250:	|        |  |      lea 12(sp),sp
    6254:	|        |  |  /-- bra.s 626e <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    6256:	|        |  \--|-> move.l 1a770 <loadNow>,d0
    625c:	|        |     |   move.l d0,-(sp)
    625e:	|        |     |   jsr b98a <loadGame>
    6264:	|        |     |   addq.l #4,sp
    6266:	|        |     |   tst.w d0
    6268:	|        |     +-- bne.s 626e <runSludge+0xf0>
    626a:	|        |     |   clr.w d0
    626c:	+--------|-----|-- bra.s 628e <runSludge+0x110>
		}
		FreeVec(loadNow);
    626e:	|        |     \-> move.l 1a770 <loadNow>,8(sp)
    6276:	|        |         move.l 1a7a4 <SysBase>,d0
    627c:	|        |         movea.l d0,a6
    627e:	|        |         movea.l 8(sp),a1
    6282:	|        |         jsr -690(a6)
		loadNow = NULL;
    6286:	|        |         clr.l 1a770 <loadNow>
	}

	return TRUE;
    628c:	|        \-------> moveq #1,d0
}
    628e:	\----------------> movea.l (sp)+,a6
    6290:	                   lea 12(sp),sp
    6294:	                   rts

00006296 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    6296:	movea.l 1a11c <currentEvents>,a0
    629c:	move.l (a0),d0
    629e:	move.l 4(sp),-(sp)
    62a2:	move.l d0,-(sp)
    62a4:	jsr 8d0 <put2bytes>
    62aa:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    62ac:	movea.l 1a11c <currentEvents>,a0
    62b2:	move.l 4(a0),d0
    62b6:	move.l 4(sp),-(sp)
    62ba:	move.l d0,-(sp)
    62bc:	jsr 8d0 <put2bytes>
    62c2:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    62c4:	movea.l 1a11c <currentEvents>,a0
    62ca:	move.l 8(a0),d0
    62ce:	move.l 4(sp),-(sp)
    62d2:	move.l d0,-(sp)
    62d4:	jsr 8d0 <put2bytes>
    62da:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    62dc:	movea.l 1a11c <currentEvents>,a0
    62e2:	move.l 12(a0),d0
    62e6:	move.l 4(sp),-(sp)
    62ea:	move.l d0,-(sp)
    62ec:	jsr 8d0 <put2bytes>
    62f2:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    62f4:	movea.l 1a11c <currentEvents>,a0
    62fa:	move.l 16(a0),d0
    62fe:	move.l 4(sp),-(sp)
    6302:	move.l d0,-(sp)
    6304:	jsr 8d0 <put2bytes>
    630a:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    630c:	movea.l 1a11c <currentEvents>,a0
    6312:	move.l 20(a0),d0
    6316:	move.l 4(sp),-(sp)
    631a:	move.l d0,-(sp)
    631c:	jsr 8d0 <put2bytes>
    6322:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    6324:	movea.l 1a11c <currentEvents>,a0
    632a:	move.l 24(a0),d0
    632e:	move.l 4(sp),-(sp)
    6332:	move.l d0,-(sp)
    6334:	jsr 8d0 <put2bytes>
    633a:	addq.l #8,sp
}
    633c:	nop
    633e:	rts

00006340 <sludgeDisplay>:

void sludgeDisplay () {					
    6340:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    6342:	move.l #14675968,(sp)
	displayCursor();
    6348:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    634e:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    6354:	jsr 239a <CstRestoreScreen>
	drawPeople();
    635a:	jsr 97aa <drawPeople>
	CstSwapBuffer();
    6360:	jsr 311c <CstSwapBuffer>
}
    6366:	nop
    6368:	addq.l #4,sp
    636a:	rts

0000636c <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    636c:	      /-- bra.s 638c <stackSetByIndex+0x20>
		vS = vS->next;
    636e:	/-----|-> movea.l 4(sp),a0
    6372:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    6378:	|     +-- bne.s 638c <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    637a:	|     |   pea 18214 <PutChar+0xeac>
    6380:	|     |   jsr 16894 <KPrintF>
    6386:	|     |   addq.l #4,sp
			return FALSE;
    6388:	|     |   clr.w d0
    638a:	|  /--|-- bra.s 63ae <stackSetByIndex+0x42>
	while (theIndex--) {
    638c:	|  |  \-> move.l 8(sp),d0
    6390:	|  |      move.l d0,d1
    6392:	|  |      subq.l #1,d1
    6394:	|  |      move.l d1,8(sp)
    6398:	|  |      tst.l d0
    639a:	\--|----- bne.s 636e <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    639c:	   |      move.l 4(sp),d0
    63a0:	   |      move.l d0,-(sp)
    63a2:	   |      move.l 16(sp),-(sp)
    63a6:	   |      jsr 14350 <copyVariable>
    63ac:	   |      addq.l #8,sp
}
    63ae:	   \----> rts

000063b0 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    63b0:	             lea -24(sp),sp
    63b4:	             move.l a6,-(sp)
    63b6:	             move.l 48(sp),d0
    63ba:	             move.w d0,d0
    63bc:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    63c0:	             moveq #58,d0
    63c2:	             move.l d0,24(sp)
    63c6:	             clr.l 20(sp)
    63ca:	             move.l 1a7a4 <SysBase>,d0
    63d0:	             movea.l d0,a6
    63d2:	             move.l 24(sp),d0
    63d6:	             move.l 20(sp),d1
    63da:	             jsr -684(a6)
    63de:	             move.l d0,16(sp)
    63e2:	             move.l 16(sp),d0
    63e6:	             move.l d0,12(sp)
	if(!newFunc) {
    63ea:	         /-- bne.s 6400 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    63ec:	         |   pea 1822d <PutChar+0xec5>
    63f2:	         |   jsr 16894 <KPrintF>
    63f8:	         |   addq.l #4,sp
		return 0;
    63fa:	         |   moveq #0,d0
    63fc:	/--------|-- bra.w 6516 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    6400:	|        \-> move.l 32(sp),d0
    6404:	|            movea.l 12(sp),a0
    6408:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    640a:	|            move.l 12(sp),-(sp)
    640e:	|            jsr 5b20 <loadFunctionCode>
    6414:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    6416:	|            movea.l 12(sp),a0
    641a:	|            move.l 16(a0),d1
    641e:	|            move.l 36(sp),d0
    6422:	|            cmp.l d1,d0
    6424:	|        /-- beq.s 643a <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    6426:	|        |   pea 18256 <PutChar+0xeee>
    642c:	|        |   jsr 16894 <KPrintF>
    6432:	|        |   addq.l #4,sp
		return NULL; 
    6434:	|        |   moveq #0,d0
    6436:	+--------|-- bra.w 6516 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    643a:	|        \-> movea.l 12(sp),a0
    643e:	|            move.l 16(a0),d1
    6442:	|            movea.l 12(sp),a0
    6446:	|            move.l 8(a0),d0
    644a:	|            cmp.l d1,d0
    644c:	|  /-------- bge.s 64b6 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    644e:	|  |         pea 18272 <PutChar+0xf0a>
    6454:	|  |         jsr 16894 <KPrintF>
    645a:	|  |         addq.l #4,sp
		return NULL; 
    645c:	|  |         moveq #0,d0
    645e:	+--|-------- bra.w 6516 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6462:	|  |  /----> movea.l 44(sp),a0
    6466:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    646a:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    646e:	|  |  |      movea.l 44(sp),a0
    6472:	|  |  |      move.l (a0),d0
    6474:	|  |  |  /-- bne.s 648a <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    6476:	|  |  |  |   pea 1829c <PutChar+0xf34>
    647c:	|  |  |  |   jsr 16894 <KPrintF>
    6482:	|  |  |  |   addq.l #4,sp
			return NULL;
    6484:	|  |  |  |   moveq #0,d0
    6486:	+--|--|--|-- bra.w 6516 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    648a:	|  |  |  \-> movea.l 12(sp),a0
    648e:	|  |  |      move.l 20(a0),d1
    6492:	|  |  |      move.l 36(sp),d0
    6496:	|  |  |      lsl.l #3,d0
    6498:	|  |  |      add.l d0,d1
    649a:	|  |  |      move.l 8(sp),d0
    649e:	|  |  |      move.l d1,-(sp)
    64a0:	|  |  |      move.l d0,-(sp)
    64a2:	|  |  |      jsr 14350 <copyVariable>
    64a8:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    64aa:	|  |  |      move.l 44(sp),-(sp)
    64ae:	|  |  |      jsr 1481a <trimStack>
    64b4:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    64b6:	|  \--|----> tst.l 36(sp)
    64ba:	|     \----- bne.s 6462 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    64bc:	|            movea.l 12(sp),a0
    64c0:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    64c4:	|            movea.l 12(sp),a0
    64c8:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    64cc:	|            movea.l 12(sp),a0
    64d0:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    64d6:	|            movea.l 12(sp),a0
    64da:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    64e0:	|            movea.l 12(sp),a0
    64e4:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    64e8:	|            movea.l 12(sp),a0
    64ec:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    64f0:	|            movea.l 12(sp),a0
    64f4:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    64f8:	|            movea.l 12(sp),a0
    64fc:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    6500:	|            movea.l 12(sp),a0
    6504:	|            clr.l 28(a0)

	restartFunction (newFunc);
    6508:	|            move.l 12(sp),-(sp)
    650c:	|            jsr 6164 <restartFunction>
    6512:	|            addq.l #4,sp
	return 1;
    6514:	|            moveq #1,d0
}
    6516:	\----------> movea.l (sp)+,a6
    6518:	             lea 24(sp),sp
    651c:	             rts

0000651e <unfreezeSubs>:

void unfreezeSubs () {
    651e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6520:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    6526:	   /----- bra.s 6544 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    6528:	/--|----> movea.l (sp),a0
    652a:	|  |      move.b 56(a0),d0
    652e:	|  |  /-- beq.s 653e <unfreezeSubs+0x20>
    6530:	|  |  |   movea.l (sp),a0
    6532:	|  |  |   move.b 56(a0),d0
    6536:	|  |  |   subq.b #1,d0
    6538:	|  |  |   movea.l (sp),a0
    653a:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    653e:	|  |  \-> movea.l (sp),a0
    6540:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6544:	|  \----> tst.l (sp)
    6546:	\-------- bne.s 6528 <unfreezeSubs+0xa>
	}
}
    6548:	          nop
    654a:	          nop
    654c:	          addq.l #4,sp
    654e:	          rts

00006550 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6550:	clr.w 1a128 <sliceBusy>
}
    6556:	nop
    6558:	rts

0000655a <getNumberedString>:

char * getNumberedString (int value) {
    655a:	       lea -56(sp),sp
    655e:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6562:	       move.w 1a128 <sliceBusy>,d0
    6568:	   /-- beq.s 65b2 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    656a:	   |   move.l 1a7ac <DOSBase>,d0
    6570:	   |   movea.l d0,a6
    6572:	   |   jsr -60(a6)
    6576:	   |   move.l d0,28(sp)
    657a:	   |   move.l 28(sp),d0
    657e:	   |   move.l d0,24(sp)
    6582:	   |   move.l #99047,20(sp)
    658a:	   |   moveq #76,d0
    658c:	   |   move.l d0,16(sp)
    6590:	   |   move.l 1a7ac <DOSBase>,d0
    6596:	   |   movea.l d0,a6
    6598:	   |   move.l 24(sp),d1
    659c:	   |   move.l 20(sp),d2
    65a0:	   |   move.l 16(sp),d3
    65a4:	   |   jsr -48(a6)
    65a8:	   |   move.l d0,12(sp)
		return NULL;
    65ac:	   |   moveq #0,d0
    65ae:	/--|-- bra.w 664e <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    65b2:	|  \-> move.l 1a78c <bigDataFile>,64(sp)
    65ba:	|      move.l 72(sp),d0
    65be:	|      add.l d0,d0
    65c0:	|      add.l d0,d0
    65c2:	|      move.l d0,d1
    65c4:	|      move.l 1a798 <startOfTextIndex>,d0
    65ca:	|      add.l d1,d0
    65cc:	|      move.l d0,60(sp)
    65d0:	|      moveq #-1,d0
    65d2:	|      move.l d0,56(sp)
    65d6:	|      move.l 1a7ac <DOSBase>,d0
    65dc:	|      movea.l d0,a6
    65de:	|      move.l 64(sp),d1
    65e2:	|      move.l 60(sp),d2
    65e6:	|      move.l 56(sp),d3
    65ea:	|      jsr -66(a6)
    65ee:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    65f2:	|      move.l 1a78c <bigDataFile>,d0
    65f8:	|      move.l d0,-(sp)
    65fa:	|      jsr 718 <get4bytes>
    6600:	|      addq.l #4,sp
    6602:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    6606:	|      move.l 1a78c <bigDataFile>,48(sp)
    660e:	|      move.l 72(sp),44(sp)
    6614:	|      moveq #-1,d0
    6616:	|      move.l d0,40(sp)
    661a:	|      move.l 1a7ac <DOSBase>,d0
    6620:	|      movea.l d0,a6
    6622:	|      move.l 48(sp),d1
    6626:	|      move.l 44(sp),d2
    662a:	|      move.l 40(sp),d3
    662e:	|      jsr -66(a6)
    6632:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    6636:	|      move.l 1a78c <bigDataFile>,d0
    663c:	|      move.l d0,-(sp)
    663e:	|      jsr b02 <readString>
    6644:	|      addq.l #4,sp
    6646:	|      move.l d0,32(sp)
	
	return s;
    664a:	|      move.l 32(sp),d0
}
    664e:	\----> movem.l (sp)+,d2-d3/a6
    6652:	       lea 56(sp),sp
    6656:	       rts

00006658 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6658:	       lea -32(sp),sp
    665c:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6660:	       move.w 1a128 <sliceBusy>,d0
    6666:	   /-- beq.s 6682 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6668:	   |   pea 18334 <PutChar+0xfcc>
    666e:	   |   pea 18352 <PutChar+0xfea>
    6674:	   |   jsr 16894 <KPrintF>
    667a:	   |   addq.l #8,sp
		return 0;
    667c:	   |   moveq #0,d0
    667e:	/--|-- bra.w 6716 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6682:	|  \-> move.l 1a78c <bigDataFile>,40(sp)
    668a:	|      move.l 48(sp),d0
    668e:	|      add.l d0,d0
    6690:	|      add.l d0,d0
    6692:	|      move.l d0,d1
    6694:	|      move.l 1a794 <startOfDataIndex>,d0
    669a:	|      add.l d1,d0
    669c:	|      move.l d0,36(sp)
    66a0:	|      moveq #-1,d0
    66a2:	|      move.l d0,32(sp)
    66a6:	|      move.l 1a7ac <DOSBase>,d0
    66ac:	|      movea.l d0,a6
    66ae:	|      move.l 40(sp),d1
    66b2:	|      move.l 36(sp),d2
    66b6:	|      move.l 32(sp),d3
    66ba:	|      jsr -66(a6)
    66be:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    66c2:	|      move.l 1a78c <bigDataFile>,24(sp)
    66ca:	|      move.l 1a78c <bigDataFile>,d0
    66d0:	|      move.l d0,-(sp)
    66d2:	|      jsr 718 <get4bytes>
    66d8:	|      addq.l #4,sp
    66da:	|      move.l d0,20(sp)
    66de:	|      clr.l 16(sp)
    66e2:	|      move.l 1a7ac <DOSBase>,d0
    66e8:	|      movea.l d0,a6
    66ea:	|      move.l 24(sp),d1
    66ee:	|      move.l 20(sp),d2
    66f2:	|      move.l 16(sp),d3
    66f6:	|      jsr -66(a6)
    66fa:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    66fe:	|      move.w #1,1a128 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6706:	|      move.l 1a78c <bigDataFile>,d0
    670c:	|      move.l d0,-(sp)
    670e:	|      jsr 718 <get4bytes>
    6714:	|      addq.l #4,sp
}
    6716:	\----> movem.l (sp)+,d2-d3/a6
    671a:	       lea 32(sp),sp
    671e:	       rts

00006720 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6720:	       lea -32(sp),sp
    6724:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6728:	       move.w 1a128 <sliceBusy>,d0
    672e:	   /-- beq.s 674a <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6730:	   |   pea 18334 <PutChar+0xfcc>
    6736:	   |   pea 18352 <PutChar+0xfea>
    673c:	   |   jsr 16894 <KPrintF>
    6742:	   |   addq.l #8,sp
        return FALSE;
    6744:	   |   clr.w d0
    6746:	/--|-- bra.w 67d6 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    674a:	|  \-> move.l 1a78c <bigDataFile>,40(sp)
    6752:	|      move.l 48(sp),d0
    6756:	|      add.l d0,d0
    6758:	|      add.l d0,d0
    675a:	|      move.l d0,d1
    675c:	|      move.l 1a7a0 <startOfObjectIndex>,d0
    6762:	|      add.l d1,d0
    6764:	|      move.l d0,36(sp)
    6768:	|      moveq #-1,d0
    676a:	|      move.l d0,32(sp)
    676e:	|      move.l 1a7ac <DOSBase>,d0
    6774:	|      movea.l d0,a6
    6776:	|      move.l 40(sp),d1
    677a:	|      move.l 36(sp),d2
    677e:	|      move.l 32(sp),d3
    6782:	|      jsr -66(a6)
    6786:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    678a:	|      move.l 1a78c <bigDataFile>,24(sp)
    6792:	|      move.l 1a78c <bigDataFile>,d0
    6798:	|      move.l d0,-(sp)
    679a:	|      jsr 718 <get4bytes>
    67a0:	|      addq.l #4,sp
    67a2:	|      move.l d0,20(sp)
    67a6:	|      moveq #-1,d0
    67a8:	|      move.l d0,16(sp)
    67ac:	|      move.l 1a7ac <DOSBase>,d0
    67b2:	|      movea.l d0,a6
    67b4:	|      move.l 24(sp),d1
    67b8:	|      move.l 20(sp),d2
    67bc:	|      move.l 16(sp),d3
    67c0:	|      jsr -66(a6)
    67c4:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    67c8:	|      move.w #1,1a128 <sliceBusy>
    67d0:	|      move.w 1a128 <sliceBusy>,d0
}
    67d6:	\----> movem.l (sp)+,d2-d3/a6
    67da:	       lea 32(sp),sp
    67de:	       rts

000067e0 <openSubSlice>:

BOOL openSubSlice (int num) {
    67e0:	       lea -32(sp),sp
    67e4:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    67e8:	       move.w 1a128 <sliceBusy>,d0
    67ee:	   /-- beq.s 680a <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    67f0:	   |   pea 18334 <PutChar+0xfcc>
    67f6:	   |   pea 18352 <PutChar+0xfea>
    67fc:	   |   jsr 16894 <KPrintF>
    6802:	   |   addq.l #8,sp
		return FALSE;
    6804:	   |   clr.w d0
    6806:	/--|-- bra.w 6896 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    680a:	|  \-> move.l 1a78c <bigDataFile>,40(sp)
    6812:	|      move.l 48(sp),d0
    6816:	|      add.l d0,d0
    6818:	|      add.l d0,d0
    681a:	|      move.l d0,d1
    681c:	|      move.l 1a79c <startOfSubIndex>,d0
    6822:	|      add.l d1,d0
    6824:	|      move.l d0,36(sp)
    6828:	|      moveq #-1,d0
    682a:	|      move.l d0,32(sp)
    682e:	|      move.l 1a7ac <DOSBase>,d0
    6834:	|      movea.l d0,a6
    6836:	|      move.l 40(sp),d1
    683a:	|      move.l 36(sp),d2
    683e:	|      move.l 32(sp),d3
    6842:	|      jsr -66(a6)
    6846:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    684a:	|      move.l 1a78c <bigDataFile>,24(sp)
    6852:	|      move.l 1a78c <bigDataFile>,d0
    6858:	|      move.l d0,-(sp)
    685a:	|      jsr 718 <get4bytes>
    6860:	|      addq.l #4,sp
    6862:	|      move.l d0,20(sp)
    6866:	|      moveq #-1,d0
    6868:	|      move.l d0,16(sp)
    686c:	|      move.l 1a7ac <DOSBase>,d0
    6872:	|      movea.l d0,a6
    6874:	|      move.l 24(sp),d1
    6878:	|      move.l 20(sp),d2
    687c:	|      move.l 16(sp),d3
    6880:	|      jsr -66(a6)
    6884:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    6888:	|      move.w #1,1a128 <sliceBusy>
    6890:	|      move.w 1a128 <sliceBusy>,d0
}
    6896:	\----> movem.l (sp)+,d2-d3/a6
    689a:	       lea 32(sp),sp
    689e:	       rts

000068a0 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    68a0:	       lea -180(sp),sp
    68a4:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    68a8:	       tst.l 196(sp)
    68ac:	/----- beq.s 68ec <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    68ae:	|      move.l 196(sp),1a78c <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    68b6:	|      move.l 196(sp),168(sp)
    68bc:	|      clr.l 164(sp)
    68c0:	|      clr.l 160(sp)
    68c4:	|      move.l 1a7ac <DOSBase>,d0
    68ca:	|      movea.l d0,a6
    68cc:	|      move.l 168(sp),d1
    68d0:	|      move.l 164(sp),d2
    68d4:	|      move.l 160(sp),d3
    68d8:	|      jsr -66(a6)
    68dc:	|      move.l d0,156(sp)
    68e0:	|      move.l 156(sp),d0
    68e4:	|      move.l d0,1a790 <startIndex>
    68ea:	|  /-- bra.s 6926 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    68ec:	\--|-> move.l 1a78c <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    68f4:	   |   move.l 196(sp),184(sp)
    68fa:	   |   move.l 1a790 <startIndex>,d0
    6900:	   |   move.l d0,180(sp)
    6904:	   |   moveq #-1,d0
    6906:	   |   move.l d0,176(sp)
    690a:	   |   move.l 1a7ac <DOSBase>,d0
    6910:	   |   movea.l d0,a6
    6912:	   |   move.l 184(sp),d1
    6916:	   |   move.l 180(sp),d2
    691a:	   |   move.l 176(sp),d3
    691e:	   |   jsr -66(a6)
    6922:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    6926:	   \-> clr.w 1a128 <sliceBusy>

	if (skipBefore > numLanguages) {
    692c:	       move.l 204(sp),d0
    6930:	       cmp.l 200(sp),d0
    6934:	   /-- bls.s 6948 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    6936:	   |   pea 1836c <PutChar+0x1004>
    693c:	   |   jsr 16894 <KPrintF>
    6942:	   |   addq.l #4,sp
		skipBefore = 0;
    6944:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    6948:	   \-> move.l 200(sp),d0
    694c:	       sub.l 204(sp),d0
    6950:	       move.l d0,188(sp)
	while (skipBefore) {
    6954:	   /-- bra.s 6992 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    6956:	/--|-> move.l 196(sp),24(sp)
    695c:	|  |   move.l 196(sp),-(sp)
    6960:	|  |   jsr 718 <get4bytes>
    6966:	|  |   addq.l #4,sp
    6968:	|  |   move.l d0,20(sp)
    696c:	|  |   moveq #-1,d0
    696e:	|  |   move.l d0,16(sp)
    6972:	|  |   move.l 1a7ac <DOSBase>,d0
    6978:	|  |   movea.l d0,a6
    697a:	|  |   move.l 24(sp),d1
    697e:	|  |   move.l 20(sp),d2
    6982:	|  |   move.l 16(sp),d3
    6986:	|  |   jsr -66(a6)
    698a:	|  |   move.l d0,12(sp)
		skipBefore --;
    698e:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    6992:	|  \-> tst.l 204(sp)
    6996:	\----- bne.s 6956 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6998:	       move.l 196(sp),152(sp)
    699e:	       clr.l 148(sp)
    69a2:	       clr.l 144(sp)
    69a6:	       move.l 1a7ac <DOSBase>,d0
    69ac:	       movea.l d0,a6
    69ae:	       move.l 152(sp),d1
    69b2:	       move.l 148(sp),d2
    69b6:	       move.l 144(sp),d3
    69ba:	       jsr -66(a6)
    69be:	       move.l d0,140(sp)
    69c2:	       move.l 140(sp),d0
    69c6:	       addq.l #4,d0
    69c8:	       move.l d0,1a798 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    69ce:	       move.l 196(sp),136(sp)
    69d4:	       move.l 196(sp),-(sp)
    69d8:	       jsr 718 <get4bytes>
    69de:	       addq.l #4,sp
    69e0:	       move.l d0,132(sp)
    69e4:	       moveq #-1,d0
    69e6:	       move.l d0,128(sp)
    69ea:	       move.l 1a7ac <DOSBase>,d0
    69f0:	       movea.l d0,a6
    69f2:	       move.l 136(sp),d1
    69f6:	       move.l 132(sp),d2
    69fa:	       move.l 128(sp),d3
    69fe:	       jsr -66(a6)
    6a02:	       move.l d0,124(sp)

	while (skipAfter) {
    6a06:	   /-- bra.s 6a44 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    6a08:	/--|-> move.l 196(sp),40(sp)
    6a0e:	|  |   move.l 196(sp),-(sp)
    6a12:	|  |   jsr 718 <get4bytes>
    6a18:	|  |   addq.l #4,sp
    6a1a:	|  |   move.l d0,36(sp)
    6a1e:	|  |   moveq #-1,d0
    6a20:	|  |   move.l d0,32(sp)
    6a24:	|  |   move.l 1a7ac <DOSBase>,d0
    6a2a:	|  |   movea.l d0,a6
    6a2c:	|  |   move.l 40(sp),d1
    6a30:	|  |   move.l 36(sp),d2
    6a34:	|  |   move.l 32(sp),d3
    6a38:	|  |   jsr -66(a6)
    6a3c:	|  |   move.l d0,28(sp)
		skipAfter --;
    6a40:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    6a44:	|  \-> tst.l 188(sp)
    6a48:	\----- bne.s 6a08 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6a4a:	       move.l 196(sp),120(sp)
    6a50:	       clr.l 116(sp)
    6a54:	       clr.l 112(sp)
    6a58:	       move.l 1a7ac <DOSBase>,d0
    6a5e:	       movea.l d0,a6
    6a60:	       move.l 120(sp),d1
    6a64:	       move.l 116(sp),d2
    6a68:	       move.l 112(sp),d3
    6a6c:	       jsr -66(a6)
    6a70:	       move.l d0,108(sp)
    6a74:	       move.l 108(sp),d0
    6a78:	       addq.l #4,d0
    6a7a:	       move.l d0,1a79c <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    6a80:	       move.l 196(sp),104(sp)
    6a86:	       move.l 196(sp),-(sp)
    6a8a:	       jsr 718 <get4bytes>
    6a90:	       addq.l #4,sp
    6a92:	       move.l d0,100(sp)
    6a96:	       clr.l 96(sp)
    6a9a:	       move.l 1a7ac <DOSBase>,d0
    6aa0:	       movea.l d0,a6
    6aa2:	       move.l 104(sp),d1
    6aa6:	       move.l 100(sp),d2
    6aaa:	       move.l 96(sp),d3
    6aae:	       jsr -66(a6)
    6ab2:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6ab6:	       move.l 196(sp),88(sp)
    6abc:	       clr.l 84(sp)
    6ac0:	       clr.l 80(sp)
    6ac4:	       move.l 1a7ac <DOSBase>,d0
    6aca:	       movea.l d0,a6
    6acc:	       move.l 88(sp),d1
    6ad0:	       move.l 84(sp),d2
    6ad4:	       move.l 80(sp),d3
    6ad8:	       jsr -66(a6)
    6adc:	       move.l d0,76(sp)
    6ae0:	       move.l 76(sp),d0
    6ae4:	       addq.l #4,d0
    6ae6:	       move.l d0,1a7a0 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    6aec:	       move.l 196(sp),72(sp)
    6af2:	       move.l 196(sp),-(sp)
    6af6:	       jsr 718 <get4bytes>
    6afc:	       addq.l #4,sp
    6afe:	       move.l d0,68(sp)
    6b02:	       clr.l 64(sp)
    6b06:	       move.l 1a7ac <DOSBase>,d0
    6b0c:	       movea.l d0,a6
    6b0e:	       move.l 72(sp),d1
    6b12:	       move.l 68(sp),d2
    6b16:	       move.l 64(sp),d3
    6b1a:	       jsr -66(a6)
    6b1e:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    6b22:	       move.l 196(sp),56(sp)
    6b28:	       clr.l 52(sp)
    6b2c:	       clr.l 48(sp)
    6b30:	       move.l 1a7ac <DOSBase>,d0
    6b36:	       movea.l d0,a6
    6b38:	       move.l 56(sp),d1
    6b3c:	       move.l 52(sp),d2
    6b40:	       move.l 48(sp),d3
    6b44:	       jsr -66(a6)
    6b48:	       move.l d0,44(sp)
    6b4c:	       move.l 44(sp),d0
    6b50:	       move.l d0,1a794 <startOfDataIndex>
    6b56:	       nop
    6b58:	       movem.l (sp)+,d2-d3/a6
    6b5c:	       lea 180(sp),sp
    6b60:	       rts

00006b62 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    6b62:	    lea -20(sp),sp
    6b66:	    move.l a6,-(sp)
    6b68:	    move.l d7,-(sp)
	APTR vbr = 0;
    6b6a:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    6b6e:	    move.w #20090,10(sp)
    6b74:	    move.w #2049,12(sp)
    6b7a:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    6b80:	    movea.l 1a7a4 <SysBase>,a0
    6b86:	    move.w 296(a0),d0
    6b8a:	    move.w d0,d0
    6b8c:	    andi.l #65535,d0
    6b92:	    moveq #1,d1
    6b94:	    and.l d1,d0
    6b96:	/-- beq.s 6bc4 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    6b98:	|   lea 28(sp),a0
    6b9c:	|   lea -18(a0),a0
    6ba0:	|   move.l a0,20(sp)
    6ba4:	|   move.l 1a7a4 <SysBase>,d0
    6baa:	|   movea.l d0,a6
    6bac:	|   move.l 20(sp),d7
    6bb0:	|   exg d7,a5
    6bb2:	|   jsr -30(a6)
    6bb6:	|   exg d7,a5
    6bb8:	|   move.l d0,16(sp)
    6bbc:	|   move.l 16(sp),d0
    6bc0:	|   move.l d0,24(sp)

	return vbr;
    6bc4:	\-> move.l 24(sp),d0
}
    6bc8:	    move.l (sp)+,d7
    6bca:	    movea.l (sp)+,a6
    6bcc:	    lea 20(sp),sp
    6bd0:	    rts

00006bd2 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    6bd2:	movea.l 1a7ca <VBR>,a0
    6bd8:	lea 108(a0),a0
    6bdc:	move.l 4(sp),(a0)
}
    6be0:	nop
    6be2:	rts

00006be4 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    6be4:	movea.l 1a7ca <VBR>,a0
    6bea:	move.l 108(a0),d0
}
    6bee:	rts

00006bf0 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    6bf0:	       subq.l #8,sp
    6bf2:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    6bf4:	       pea 183b5 <PutChar+0x104d>
    6bfa:	       jsr 16894 <KPrintF>
    6c00:	       addq.l #4,sp
	Forbid();
    6c02:	       move.l 1a7a4 <SysBase>,d0
    6c08:	       movea.l d0,a6
    6c0a:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    6c0e:	       pea 183cd <PutChar+0x1065>
    6c14:	       jsr 16894 <KPrintF>
    6c1a:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    6c1c:	       movea.l 1a7a8 <custom>,a0
    6c22:	       move.w 16(a0),d0
    6c26:	       move.w d0,1a7c8 <SystemADKCON>
	SystemInts=custom->intenar;
    6c2c:	       movea.l 1a7a8 <custom>,a0
    6c32:	       move.w 28(a0),d0
    6c36:	       move.w d0,1a7c4 <SystemInts>
	SystemDMA=custom->dmaconr;
    6c3c:	       movea.l 1a7a8 <custom>,a0
    6c42:	       move.w 2(a0),d0
    6c46:	       move.w d0,1a7c6 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    6c4c:	       movea.l 1a7b0 <GfxBase>,a0
    6c52:	       move.l 34(a0),d0
    6c56:	       move.l d0,1a7d2 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    6c5c:	       pea 183eb <PutChar+0x1083>
    6c62:	       jsr 16894 <KPrintF>
    6c68:	       addq.l #4,sp
	LoadView(0);
    6c6a:	       clr.l 4(sp)
    6c6e:	       move.l 1a7b0 <GfxBase>,d0
    6c74:	       movea.l d0,a6
    6c76:	       movea.l 4(sp),a1
    6c7a:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    6c7e:	       pea 18401 <PutChar+0x1099>
    6c84:	       jsr 16894 <KPrintF>
    6c8a:	       addq.l #4,sp
	WaitTOF();
    6c8c:	       move.l 1a7b0 <GfxBase>,d0
    6c92:	       movea.l d0,a6
    6c94:	       jsr -270(a6)
	WaitTOF();
    6c98:	       move.l 1a7b0 <GfxBase>,d0
    6c9e:	       movea.l d0,a6
    6ca0:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    6ca4:	       pea 18416 <PutChar+0x10ae>
    6caa:	       jsr 16894 <KPrintF>
    6cb0:	       addq.l #4,sp
	WaitVbl();
    6cb2:	       jsr 167c8 <WaitVbl>
	WaitVbl();
    6cb8:	       jsr 167c8 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    6cbe:	       pea 1842b <PutChar+0x10c3>
    6cc4:	       jsr 16894 <KPrintF>
    6cca:	       addq.l #4,sp
	OwnBlitter();
    6ccc:	       move.l 1a7b0 <GfxBase>,d0
    6cd2:	       movea.l d0,a6
    6cd4:	       jsr -456(a6)
	WaitBlit();	
    6cd8:	       move.l 1a7b0 <GfxBase>,d0
    6cde:	       movea.l d0,a6
    6ce0:	       jsr -228(a6)
	Disable();
    6ce4:	       move.l 1a7a4 <SysBase>,d0
    6cea:	       movea.l d0,a6
    6cec:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    6cf0:	       pea 1844c <PutChar+0x10e4>
    6cf6:	       jsr 16894 <KPrintF>
    6cfc:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    6cfe:	       movea.l 1a7a8 <custom>,a0
    6d04:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    6d0a:	       pea 18463 <PutChar+0x10fb>
    6d10:	       jsr 16894 <KPrintF>
    6d16:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    6d18:	       clr.l 8(sp)
    6d1c:	   /-- bra.s 6d3a <TakeSystem+0x14a>
		custom->color[a]=0;
    6d1e:	/--|-> movea.l 1a7a8 <custom>,a0
    6d24:	|  |   move.l 8(sp),d0
    6d28:	|  |   addi.l #192,d0
    6d2e:	|  |   add.l d0,d0
    6d30:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    6d36:	|  |   addq.l #1,8(sp)
    6d3a:	|  \-> moveq #31,d0
    6d3c:	|      cmp.l 8(sp),d0
    6d40:	\----- bge.s 6d1e <TakeSystem+0x12e>

	WaitVbl();
    6d42:	       jsr 167c8 <WaitVbl>
	WaitVbl();
    6d48:	       jsr 167c8 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    6d4e:	       pea 18488 <PutChar+0x1120>
    6d54:	       jsr 16894 <KPrintF>
    6d5a:	       addq.l #4,sp
	VBR=GetVBR();
    6d5c:	       jsr 6b62 <GetVBR>
    6d62:	       move.l d0,1a7ca <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    6d68:	       jsr 6be4 <GetInterruptHandler>
    6d6e:	       move.l d0,1a7ce <SystemIrq>
}
    6d74:	       nop
    6d76:	       movea.l (sp)+,a6
    6d78:	       addq.l #8,sp
    6d7a:	       rts

00006d7c <FreeSystem>:

void FreeSystem() { 
    6d7c:	subq.l #4,sp
    6d7e:	move.l a6,-(sp)
	WaitVbl();
    6d80:	jsr 167c8 <WaitVbl>
	WaitBlit();
    6d86:	move.l 1a7b0 <GfxBase>,d0
    6d8c:	movea.l d0,a6
    6d8e:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    6d92:	movea.l 1a7a8 <custom>,a0
    6d98:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    6d9e:	movea.l 1a7a8 <custom>,a0
    6da4:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    6daa:	movea.l 1a7a8 <custom>,a0
    6db0:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    6db6:	move.l 1a7ce <SystemIrq>,d0
    6dbc:	move.l d0,-(sp)
    6dbe:	jsr 6bd2 <SetInterruptHandler>
    6dc4:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    6dc6:	movea.l 1a7b0 <GfxBase>,a0
    6dcc:	move.l 38(a0),d0
    6dd0:	movea.l 1a7a8 <custom>,a0
    6dd6:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    6dda:	movea.l 1a7b0 <GfxBase>,a0
    6de0:	move.l 50(a0),d0
    6de4:	movea.l 1a7a8 <custom>,a0
    6dea:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    6dee:	movea.l 1a7a8 <custom>,a0
    6df4:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    6dfa:	move.w 1a7c6 <SystemDMA>,d0
    6e00:	movea.l 1a7a8 <custom>,a0
    6e06:	ori.w #-32768,d0
    6e0a:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    6e0e:	move.w 1a7c8 <SystemADKCON>,d0
    6e14:	movea.l 1a7a8 <custom>,a0
    6e1a:	ori.w #-32768,d0
    6e1e:	move.w d0,158(a0)

	WaitBlit();	
    6e22:	move.l 1a7b0 <GfxBase>,d0
    6e28:	movea.l d0,a6
    6e2a:	jsr -228(a6)
	DisownBlitter();
    6e2e:	move.l 1a7b0 <GfxBase>,d0
    6e34:	movea.l d0,a6
    6e36:	jsr -462(a6)
	Enable();
    6e3a:	move.l 1a7a4 <SysBase>,d0
    6e40:	movea.l d0,a6
    6e42:	jsr -126(a6)

	LoadView(ActiView);
    6e46:	move.l 1a7d2 <ActiView>,4(sp)
    6e4e:	move.l 1a7b0 <GfxBase>,d0
    6e54:	movea.l d0,a6
    6e56:	movea.l 4(sp),a1
    6e5a:	jsr -222(a6)
	WaitTOF();
    6e5e:	move.l 1a7b0 <GfxBase>,d0
    6e64:	movea.l d0,a6
    6e66:	jsr -270(a6)
	WaitTOF();
    6e6a:	move.l 1a7b0 <GfxBase>,d0
    6e70:	movea.l d0,a6
    6e72:	jsr -270(a6)

	Permit();
    6e76:	move.l 1a7a4 <SysBase>,d0
    6e7c:	movea.l d0,a6
    6e7e:	jsr -138(a6)
}
    6e82:	nop
    6e84:	movea.l (sp)+,a6
    6e86:	addq.l #4,sp
    6e88:	rts

00006e8a <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    6e8a:	    lea -128(sp),sp
    6e8e:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    6e92:	    movea.w #4,a0
    6e96:	    move.l (a0),d0
    6e98:	    move.l d0,1a7a4 <SysBase>
	custom = (struct Custom*)0xdff000;	
    6e9e:	    move.l #14675968,1a7a8 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    6ea8:	    move.l #99500,136(sp)
    6eb0:	    clr.l 132(sp)
    6eb4:	    move.l 1a7a4 <SysBase>,d0
    6eba:	    movea.l d0,a6
    6ebc:	    movea.l 136(sp),a1
    6ec0:	    move.l 132(sp),d0
    6ec4:	    jsr -552(a6)
    6ec8:	    move.l d0,128(sp)
    6ecc:	    move.l 128(sp),d0
    6ed0:	    move.l d0,1a7b0 <GfxBase>
	if (!GfxBase)
    6ed6:	    move.l 1a7b0 <GfxBase>,d0
    6edc:	/-- bne.s 6ef2 <main+0x68>
		Exit(0);
    6ede:	|   clr.l 124(sp)
    6ee2:	|   move.l 1a7ac <DOSBase>,d0
    6ee8:	|   movea.l d0,a6
    6eea:	|   move.l 124(sp),d1
    6eee:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    6ef2:	\-> move.l #99517,120(sp)
    6efa:	    clr.l 116(sp)
    6efe:	    move.l 1a7a4 <SysBase>,d0
    6f04:	    movea.l d0,a6
    6f06:	    movea.l 120(sp),a1
    6f0a:	    move.l 116(sp),d0
    6f0e:	    jsr -552(a6)
    6f12:	    move.l d0,112(sp)
    6f16:	    move.l 112(sp),d0
    6f1a:	    move.l d0,1a7ac <DOSBase>
	if (!DOSBase)
    6f20:	    move.l 1a7ac <DOSBase>,d0
    6f26:	/-- bne.s 6f3c <main+0xb2>
		Exit(0);
    6f28:	|   clr.l 108(sp)
    6f2c:	|   move.l 1a7ac <DOSBase>,d0
    6f32:	|   movea.l d0,a6
    6f34:	|   move.l 108(sp),d1
    6f38:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    6f3c:	\-> move.l #99529,104(sp)
    6f44:	    clr.l 100(sp)
    6f48:	    move.l 1a7a4 <SysBase>,d0
    6f4e:	    movea.l d0,a6
    6f50:	    movea.l 104(sp),a1
    6f54:	    move.l 100(sp),d0
    6f58:	    jsr -552(a6)
    6f5c:	    move.l d0,96(sp)
    6f60:	    move.l 96(sp),d0
    6f64:	    move.l d0,1a7b4 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    6f6a:	    move.l 1a7b4 <MathIeeeSingBasBase>,d0
    6f70:	/-- bne.s 6f86 <main+0xfc>
		Exit(0);	
    6f72:	|   clr.l 92(sp)
    6f76:	|   move.l 1a7ac <DOSBase>,d0
    6f7c:	|   movea.l d0,a6
    6f7e:	|   move.l 92(sp),d1
    6f82:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    6f86:	\-> move.l #99553,88(sp)
    6f8e:	    clr.l 84(sp)
    6f92:	    move.l 1a7a4 <SysBase>,d0
    6f98:	    movea.l d0,a6
    6f9a:	    movea.l 88(sp),a1
    6f9e:	    move.l 84(sp),d0
    6fa2:	    jsr -552(a6)
    6fa6:	    move.l d0,80(sp)
    6faa:	    move.l 80(sp),d0
    6fae:	    move.l d0,1a7b8 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    6fb4:	    move.l 1a7b8 <MathIeeeSingTransBase>,d0
    6fba:	/-- bne.s 6fd0 <main+0x146>
		Exit(0);
    6fbc:	|   clr.l 76(sp)
    6fc0:	|   move.l 1a7ac <DOSBase>,d0
    6fc6:	|   movea.l d0,a6
    6fc8:	|   move.l 76(sp),d1
    6fcc:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    6fd0:	\-> move.l #99579,72(sp)
    6fd8:	    clr.l 68(sp)
    6fdc:	    move.l 1a7a4 <SysBase>,d0
    6fe2:	    movea.l d0,a6
    6fe4:	    movea.l 72(sp),a1
    6fe8:	    move.l 68(sp),d0
    6fec:	    jsr -552(a6)
    6ff0:	    move.l d0,64(sp)
    6ff4:	    move.l 64(sp),d0
    6ff8:	    move.l d0,1a7c0 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    6ffe:	    move.l 1a7c0 <MathIeeeDoubTransBase>,d0
    7004:	/-- bne.s 701a <main+0x190>
		Exit(0);
    7006:	|   clr.l 60(sp)
    700a:	|   move.l 1a7ac <DOSBase>,d0
    7010:	|   movea.l d0,a6
    7012:	|   move.l 60(sp),d1
    7016:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    701a:	\-> move.l #99605,56(sp)
    7022:	    clr.l 52(sp)
    7026:	    move.l 1a7a4 <SysBase>,d0
    702c:	    movea.l d0,a6
    702e:	    movea.l 56(sp),a1
    7032:	    move.l 52(sp),d0
    7036:	    jsr -552(a6)
    703a:	    move.l d0,48(sp)
    703e:	    move.l 48(sp),d0
    7042:	    move.l d0,1a7bc <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    7048:	    move.l 1a7bc <MathIeeeDoubBasBase>,d0
    704e:	/-- bne.s 7064 <main+0x1da>
		Exit(0);
    7050:	|   clr.l 44(sp)
    7054:	|   move.l 1a7ac <DOSBase>,d0
    705a:	|   movea.l d0,a6
    705c:	|   move.l 44(sp),d1
    7060:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 026!\n");
    7064:	\-> pea 1852d <PutChar+0x11c5>
    706a:	    jsr 16894 <KPrintF>
    7070:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 026!\n", 25);
    7072:	    move.l 1a7ac <DOSBase>,d0
    7078:	    movea.l d0,a6
    707a:	    jsr -60(a6)
    707e:	    move.l d0,40(sp)
    7082:	    move.l 40(sp),d0
    7086:	    move.l d0,36(sp)
    708a:	    move.l #99661,32(sp)
    7092:	    moveq #25,d0
    7094:	    move.l d0,28(sp)
    7098:	    move.l 1a7ac <DOSBase>,d0
    709e:	    movea.l d0,a6
    70a0:	    move.l 36(sp),d1
    70a4:	    move.l 32(sp),d2
    70a8:	    move.l 28(sp),d3
    70ac:	    jsr -48(a6)
    70b0:	    move.l d0,24(sp)
	Delay(50);
    70b4:	    moveq #50,d0
    70b6:	    move.l d0,20(sp)
    70ba:	    move.l 1a7ac <DOSBase>,d0
    70c0:	    movea.l d0,a6
    70c2:	    move.l 20(sp),d1
    70c6:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    70ca:	    pea 18566 <PutChar+0x11fe>
    70d0:	    jsr 16894 <KPrintF>
    70d6:	    addq.l #4,sp
	TakeSystem();
    70d8:	    jsr 6bf0 <TakeSystem>
	KPrintF("System Taken\n");
    70de:	    pea 18575 <PutChar+0x120d>
    70e4:	    jsr 16894 <KPrintF>
    70ea:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    70ec:	    movea.l 1a7a8 <custom>,a0
    70f2:	    move.w #-30721,150(a0)
	WaitVbl();
    70f8:	    jsr 167c8 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    70fe:	    pea 18583 <PutChar+0x121b>
    7104:	    jsr 16894 <KPrintF>
    710a:	    addq.l #4,sp
	main_sludge(argc, argv);	
    710c:	    move.l 148(sp),-(sp)
    7110:	    move.l 148(sp),-(sp)
    7114:	    jsr 3a26 <main_sludge>
    711a:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    711c:	    jsr 6d7c <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    7122:	    move.l 1a7ac <DOSBase>,16(sp)
    712a:	    move.l 1a7a4 <SysBase>,d0
    7130:	    movea.l d0,a6
    7132:	    movea.l 16(sp),a1
    7136:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    713a:	    move.l 1a7b0 <GfxBase>,12(sp)
    7142:	    move.l 1a7a4 <SysBase>,d0
    7148:	    movea.l d0,a6
    714a:	    movea.l 12(sp),a1
    714e:	    jsr -414(a6)
    7152:	    moveq #0,d0
}
    7154:	    movem.l (sp)+,d2-d3/a6
    7158:	    lea 128(sp),sp
    715c:	    rts

0000715e <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    715e:	    lea -16(sp),sp
    7162:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    7164:	    moveq #8,d0
    7166:	    move.l d0,16(sp)
    716a:	    clr.l 12(sp)
    716e:	    move.l 1a7a4 <SysBase>,d0
    7174:	    movea.l d0,a6
    7176:	    move.l 16(sp),d0
    717a:	    move.l 12(sp),d1
    717e:	    jsr -684(a6)
    7182:	    move.l d0,8(sp)
    7186:	    move.l 8(sp),d0
    718a:	    move.l d0,4(sp)
	if (!newStat) {
    718e:	/-- bne.s 71be <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    7190:	|   movea.l 1a12a <nowStatus>,a0
    7196:	|   move.l (a0),d0
    7198:	|   movea.l 4(sp),a0
    719c:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    71a0:	|   pea 17fd9 <PutChar+0xc71>
    71a6:	|   jsr b8 <copyString>
    71ac:	|   addq.l #4,sp
    71ae:	|   movea.l 4(sp),a0
    71b2:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    71b4:	|   movea.l 1a12a <nowStatus>,a0
    71ba:	|   move.l 4(sp),(a0)
	}
}
    71be:	\-> nop
    71c0:	    movea.l (sp)+,a6
    71c2:	    lea 16(sp),sp
    71c6:	    rts

000071c8 <clearStatusBar>:

void clearStatusBar () {
    71c8:	       lea -16(sp),sp
    71cc:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    71ce:	       movea.l 1a12a <nowStatus>,a0
    71d4:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    71d8:	       movea.l 1a12a <nowStatus>,a0
    71de:	       moveq #-1,d0
    71e0:	       move.l d0,6(a0)
	while (stat) {
    71e4:	   /-- bra.s 7224 <clearStatusBar+0x5c>
		kill = stat;
    71e6:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    71ec:	|  |   movea.l 16(sp),a0
    71f0:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    71f6:	|  |   movea.l 12(sp),a0
    71fa:	|  |   move.l (a0),8(sp)
    71fe:	|  |   move.l 1a7a4 <SysBase>,d0
    7204:	|  |   movea.l d0,a6
    7206:	|  |   movea.l 8(sp),a1
    720a:	|  |   jsr -690(a6)
		FreeVec(kill);
    720e:	|  |   move.l 12(sp),4(sp)
    7214:	|  |   move.l 1a7a4 <SysBase>,d0
    721a:	|  |   movea.l d0,a6
    721c:	|  |   movea.l 4(sp),a1
    7220:	|  |   jsr -690(a6)
	while (stat) {
    7224:	|  \-> tst.l 16(sp)
    7228:	\----- bne.s 71e6 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    722a:	       movea.l 1a12a <nowStatus>,a0
    7230:	       clr.l (a0)
}
    7232:	       nop
    7234:	       movea.l (sp)+,a6
    7236:	       lea 16(sp),sp
    723a:	       rts

0000723c <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    723c:	clr.l 1a7d6 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    7242:	move.w #-1,1a7da <mainStatus+0x4>
	mainStatus.litStatus = -1;
    724a:	moveq #-1,d0
    724c:	move.l d0,1a7dc <mainStatus+0x6>
	mainStatus.statusX = 10;
    7252:	moveq #10,d0
    7254:	move.l d0,1a7e0 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    725a:	movea.l 1a6fc <winHeight>,a0
    7260:	lea -15(a0),a0
    7264:	move.l a0,d0
    7266:	move.l d0,1a7e4 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    726c:	nop
    726e:	rts

00007270 <killLastStatus>:

void killLastStatus () {
    7270:	    lea -12(sp),sp
    7274:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    7276:	    movea.l 1a12a <nowStatus>,a0
    727c:	    move.l (a0),d0
    727e:	/-- beq.s 72c8 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    7280:	|   movea.l 1a12a <nowStatus>,a0
    7286:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    728a:	|   movea.l 1a12a <nowStatus>,a0
    7290:	|   movea.l 12(sp),a1
    7294:	|   move.l 4(a1),d0
    7298:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    729a:	|   movea.l 12(sp),a0
    729e:	|   move.l (a0),8(sp)
    72a2:	|   move.l 1a7a4 <SysBase>,d0
    72a8:	|   movea.l d0,a6
    72aa:	|   movea.l 8(sp),a1
    72ae:	|   jsr -690(a6)
		FreeVec(kill);
    72b2:	|   move.l 12(sp),4(sp)
    72b8:	|   move.l 1a7a4 <SysBase>,d0
    72be:	|   movea.l d0,a6
    72c0:	|   movea.l 4(sp),a1
    72c4:	|   jsr -690(a6)
	}
}
    72c8:	\-> nop
    72ca:	    movea.l (sp)+,a6
    72cc:	    lea 12(sp),sp
    72d0:	    rts

000072d2 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    72d2:	movea.l 1a12a <nowStatus>,a0
    72d8:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    72de:	movea.l 1a12a <nowStatus>,a0
    72e4:	move.l 8(sp),14(a0)
}
    72ea:	nop
    72ec:	rts

000072ee <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    72ee:	       lea -100(sp),sp
    72f2:	       move.l a6,-(sp)
    72f4:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    72f6:	       movea.l 1a12a <nowStatus>,a0
    72fc:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    7300:	       movea.l 1a12a <nowStatus>,a0
    7306:	       move.w 4(a0),d0
    730a:	       move.w d0,d0
    730c:	       andi.l #65535,d0
    7312:	       move.l 112(sp),-(sp)
    7316:	       move.l d0,-(sp)
    7318:	       jsr 8d0 <put2bytes>
    731e:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    7320:	       movea.l 1a12a <nowStatus>,a0
    7326:	       move.l 6(a0),d0
    732a:	       move.l d0,d0
    732c:	       movea.w d0,a0
    732e:	       move.l 112(sp),-(sp)
    7332:	       move.l a0,-(sp)
    7334:	       jsr a9c <putSigned>
    733a:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    733c:	       movea.l 1a12a <nowStatus>,a0
    7342:	       move.l 10(a0),d0
    7346:	       move.l 112(sp),-(sp)
    734a:	       move.l d0,-(sp)
    734c:	       jsr 8d0 <put2bytes>
    7352:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    7354:	       movea.l 1a12a <nowStatus>,a0
    735a:	       move.l 14(a0),d0
    735e:	       move.l 112(sp),-(sp)
    7362:	       move.l d0,-(sp)
    7364:	       jsr 8d0 <put2bytes>
    736a:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    736c:	       move.l 112(sp),100(sp)
    7372:	       movea.l 1a12a <nowStatus>,a0
    7378:	       move.l 18(a0),96(sp)
    737e:	       move.l 1a7ac <DOSBase>,d0
    7384:	       movea.l d0,a6
    7386:	       move.l 100(sp),d1
    738a:	       move.l 96(sp),d2
    738e:	       jsr -312(a6)
    7392:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    7396:	       move.l 112(sp),88(sp)
    739c:	       movea.l 1a12a <nowStatus>,a0
    73a2:	       move.l 22(a0),84(sp)
    73a8:	       move.l 1a7ac <DOSBase>,d0
    73ae:	       movea.l d0,a6
    73b0:	       move.l 88(sp),d1
    73b4:	       move.l 84(sp),d2
    73b8:	       jsr -312(a6)
    73bc:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    73c0:	       move.l 112(sp),76(sp)
    73c6:	       movea.l 1a12a <nowStatus>,a0
    73cc:	       move.l 26(a0),72(sp)
    73d2:	       move.l 1a7ac <DOSBase>,d0
    73d8:	       movea.l d0,a6
    73da:	       move.l 76(sp),d1
    73de:	       move.l 72(sp),d2
    73e2:	       jsr -312(a6)
    73e6:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    73ea:	       move.l 112(sp),64(sp)
    73f0:	       movea.l 1a12a <nowStatus>,a0
    73f6:	       move.l 30(a0),60(sp)
    73fc:	       move.l 1a7ac <DOSBase>,d0
    7402:	       movea.l d0,a6
    7404:	       move.l 64(sp),d1
    7408:	       move.l 60(sp),d2
    740c:	       jsr -312(a6)
    7410:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    7414:	       move.l 112(sp),52(sp)
    741a:	       movea.l 1a12a <nowStatus>,a0
    7420:	       move.l 34(a0),48(sp)
    7426:	       move.l 1a7ac <DOSBase>,d0
    742c:	       movea.l d0,a6
    742e:	       move.l 52(sp),d1
    7432:	       move.l 48(sp),d2
    7436:	       jsr -312(a6)
    743a:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    743e:	       move.l 112(sp),40(sp)
    7444:	       movea.l 1a12a <nowStatus>,a0
    744a:	       move.l 38(a0),36(sp)
    7450:	       move.l 1a7ac <DOSBase>,d0
    7456:	       movea.l d0,a6
    7458:	       move.l 40(sp),d1
    745c:	       move.l 36(sp),d2
    7460:	       jsr -312(a6)
    7464:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7468:	   /-- bra.s 74ac <saveStatusBars+0x1be>
		FPutC (fp,1);
    746a:	/--|-> move.l 112(sp),16(sp)
    7470:	|  |   moveq #1,d0
    7472:	|  |   move.l d0,12(sp)
    7476:	|  |   move.l 1a7ac <DOSBase>,d0
    747c:	|  |   movea.l d0,a6
    747e:	|  |   move.l 16(sp),d1
    7482:	|  |   move.l 12(sp),d2
    7486:	|  |   jsr -312(a6)
    748a:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    748e:	|  |   movea.l 104(sp),a0
    7492:	|  |   move.l (a0),d0
    7494:	|  |   move.l 112(sp),-(sp)
    7498:	|  |   move.l d0,-(sp)
    749a:	|  |   jsr bd8 <writeString>
    74a0:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    74a2:	|  |   movea.l 104(sp),a0
    74a6:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    74ac:	|  \-> tst.l 104(sp)
    74b0:	\----- bne.s 746a <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    74b2:	       move.l 112(sp),28(sp)
    74b8:	       clr.l 24(sp)
    74bc:	       move.l 1a7ac <DOSBase>,d0
    74c2:	       movea.l d0,a6
    74c4:	       move.l 28(sp),d1
    74c8:	       move.l 24(sp),d2
    74cc:	       jsr -312(a6)
    74d0:	       move.l d0,20(sp)
}
    74d4:	       nop
    74d6:	       move.l (sp)+,d2
    74d8:	       movea.l (sp)+,a6
    74da:	       lea 100(sp),sp
    74de:	       rts

000074e0 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    74e0:	movea.l 1a12a <nowStatus>,a0
    74e6:	move.l 4(sp),6(a0)
}
    74ec:	nop
    74ee:	rts

000074f0 <setStatusBar>:

void setStatusBar (char * txt) {
    74f0:	    subq.l #4,sp
    74f2:	    move.l a6,-(sp)
    74f4:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    74f6:	    movea.l 1a12a <nowStatus>,a0
    74fc:	    move.l (a0),d0
    74fe:	/-- beq.s 7532 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    7500:	|   movea.l 1a12a <nowStatus>,a0
    7506:	|   movea.l (a0),a0
    7508:	|   move.l (a0),8(sp)
    750c:	|   move.l 1a7a4 <SysBase>,d0
    7512:	|   movea.l d0,a6
    7514:	|   movea.l 8(sp),a1
    7518:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    751c:	|   movea.l 1a12a <nowStatus>,a0
    7522:	|   movea.l (a0),a2
    7524:	|   move.l 16(sp),-(sp)
    7528:	|   jsr b8 <copyString>
    752e:	|   addq.l #4,sp
    7530:	|   move.l d0,(a2)
	}
}
    7532:	\-> nop
    7534:	    movea.l (sp)+,a2
    7536:	    movea.l (sp)+,a6
    7538:	    addq.l #4,sp
    753a:	    rts

0000753c <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    753c:	       movea.l 1a12a <nowStatus>,a0
    7542:	       move.l (a0),d0
    7544:	/----- beq.s 7552 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7546:	|      movea.l 1a12a <nowStatus>,a0
    754c:	|      movea.l (a0),a0
    754e:	|      move.l (a0),d0
    7550:	|  /-- bra.s 7558 <statusBarText+0x1c>
	} else {
		return "";
    7552:	\--|-> move.l #98265,d0
	}
    7558:	   \-> rts

0000755a <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    755a:	       lea -28(sp),sp
    755e:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    7562:	       move.l 52(sp),-(sp)
    7566:	       jsr 14f56 <stringWidth>
    756c:	       addq.l #4,sp
    756e:	       asr.l #1,d0
    7570:	       move.l d0,-(sp)
    7572:	       jsr 16cd0 <__floatsisf>
    7578:	       addq.l #4,sp
    757a:	       move.l d0,d1
    757c:	       move.l 1a142 <cameraZoom>,d0
    7582:	       move.l d0,-(sp)
    7584:	       move.l d1,-(sp)
    7586:	       jsr 16b7c <__divsf3>
    758c:	       addq.l #8,sp
    758e:	       move.l d0,-(sp)
    7590:	       jsr 16c68 <__fixsfsi>
    7596:	       addq.l #4,sp
    7598:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    759c:	       move.l 56(sp),d0
    75a0:	       sub.l 44(sp),d0
    75a4:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    75a8:	       move.l 56(sp),d0
    75ac:	       add.l 44(sp),d0
    75b0:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    75b4:	       moveq #12,d0
    75b6:	       move.l d0,32(sp)
    75ba:	       clr.l 28(sp)
    75be:	       move.l 1a7a4 <SysBase>,d0
    75c4:	       movea.l d0,a6
    75c6:	       move.l 32(sp),d0
    75ca:	       move.l 28(sp),d1
    75ce:	       jsr -684(a6)
    75d2:	       move.l d0,24(sp)
    75d6:	       move.l 24(sp),d0
    75da:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    75de:	       movea.l 1a800 <speech>,a0
    75e4:	       move.l 4(a0),d0
    75e8:	       movea.l 20(sp),a0
    75ec:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    75f0:	       move.l 52(sp),-(sp)
    75f4:	       jsr b8 <copyString>
    75fa:	       addq.l #4,sp
    75fc:	       movea.l 20(sp),a0
    7600:	       move.l d0,(a0)
	newLine -> x = xx1;
    7602:	       movea.l 20(sp),a0
    7606:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    760c:	       movea.l 1a800 <speech>,a0
    7612:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    7618:	       moveq #4,d0
    761a:	       cmp.l 40(sp),d0
    761e:	   /-- blt.s 7640 <addSpeechLine+0xe6>
    7620:	   |   movea.l 60(sp),a0
    7624:	   |   move.l (a0),d1
    7626:	   |   moveq #5,d0
    7628:	   |   sub.l 40(sp),d0
    762c:	   |   cmp.l d1,d0
    762e:	   +-- ble.s 7640 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7630:	   |   moveq #5,d0
    7632:	   |   sub.l 40(sp),d0
    7636:	   |   movea.l 60(sp),a0
    763a:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    763c:	/--|-- bra.w 776c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7640:	|  \-> move.l 36(sp),-(sp)
    7644:	|      jsr 16cd0 <__floatsisf>
    764a:	|      addq.l #4,sp
    764c:	|      move.l d0,d2
    764e:	|      move.l 1a6f8 <winWidth>,d0
    7654:	|      move.l d0,-(sp)
    7656:	|      jsr 16cf8 <__floatunsisf>
    765c:	|      addq.l #4,sp
    765e:	|      move.l d0,d1
    7660:	|      move.l 1a142 <cameraZoom>,d0
    7666:	|      move.l d0,-(sp)
    7668:	|      move.l d1,-(sp)
    766a:	|      jsr 16b7c <__divsf3>
    7670:	|      addq.l #8,sp
    7672:	|      move.l #1084227584,-(sp)
    7678:	|      move.l d0,-(sp)
    767a:	|      jsr 16fc4 <__subsf3>
    7680:	|      addq.l #8,sp
    7682:	|      move.l d0,-(sp)
    7684:	|      move.l d2,-(sp)
    7686:	|      jsr 16db8 <__gesf2>
    768c:	|      addq.l #8,sp
    768e:	|      tst.l d0
    7690:	|  /-- bge.s 7696 <addSpeechLine+0x13c>
}
    7692:	+--|-- bra.w 776c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7696:	|  \-> movea.l 60(sp),a0
    769a:	|      move.l (a0),d0
    769c:	|      move.l d0,-(sp)
    769e:	|      jsr 16cd0 <__floatsisf>
    76a4:	|      addq.l #4,sp
    76a6:	|      move.l d0,-(sp)
    76a8:	|      jsr 16be8 <__extendsfdf2>
    76ae:	|      addq.l #4,sp
    76b0:	|      move.l d0,d4
    76b2:	|      move.l d1,d5
    76b4:	|      move.l 1a6f8 <winWidth>,d0
    76ba:	|      move.l d0,-(sp)
    76bc:	|      jsr 16cf8 <__floatunsisf>
    76c2:	|      addq.l #4,sp
    76c4:	|      move.l d0,d1
    76c6:	|      move.l 1a142 <cameraZoom>,d0
    76cc:	|      move.l d0,-(sp)
    76ce:	|      move.l d1,-(sp)
    76d0:	|      jsr 16b7c <__divsf3>
    76d6:	|      addq.l #8,sp
    76d8:	|      move.l d0,-(sp)
    76da:	|      jsr 16be8 <__extendsfdf2>
    76e0:	|      addq.l #4,sp
    76e2:	|      clr.l -(sp)
    76e4:	|      move.l #1075052544,-(sp)
    76ea:	|      move.l d1,-(sp)
    76ec:	|      move.l d0,-(sp)
    76ee:	|      jsr 16f62 <__subdf3>
    76f4:	|      lea 16(sp),sp
    76f8:	|      move.l d0,d2
    76fa:	|      move.l d1,d3
    76fc:	|      move.l 36(sp),-(sp)
    7700:	|      jsr 16c90 <__floatsidf>
    7706:	|      addq.l #4,sp
    7708:	|      move.l d1,-(sp)
    770a:	|      move.l d0,-(sp)
    770c:	|      move.l d3,-(sp)
    770e:	|      move.l d2,-(sp)
    7710:	|      jsr 16f62 <__subdf3>
    7716:	|      lea 16(sp),sp
    771a:	|      move.l d1,-(sp)
    771c:	|      move.l d0,-(sp)
    771e:	|      move.l d5,-(sp)
    7720:	|      move.l d4,-(sp)
    7722:	|      jsr 16dee <__gtdf2>
    7728:	|      lea 16(sp),sp
    772c:	|      tst.l d0
    772e:	|  /-- bgt.s 7732 <addSpeechLine+0x1d8>
}
    7730:	+--|-- bra.s 776c <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7732:	|  \-> move.l 1a6f8 <winWidth>,d0
    7738:	|      move.l d0,-(sp)
    773a:	|      jsr 16cf8 <__floatunsisf>
    7740:	|      addq.l #4,sp
    7742:	|      move.l d0,d1
    7744:	|      move.l 1a142 <cameraZoom>,d0
    774a:	|      move.l d0,-(sp)
    774c:	|      move.l d1,-(sp)
    774e:	|      jsr 16b7c <__divsf3>
    7754:	|      addq.l #8,sp
    7756:	|      move.l d0,-(sp)
    7758:	|      jsr 16c68 <__fixsfsi>
    775e:	|      addq.l #4,sp
    7760:	|      subq.l #5,d0
    7762:	|      sub.l 36(sp),d0
    7766:	|      movea.l 60(sp),a0
    776a:	|      move.l d0,(a0)
}
    776c:	\----> nop
    776e:	       movem.l (sp)+,d2-d5/a6
    7772:	       lea 28(sp),sp
    7776:	       rts

00007778 <initSpeech>:


void initSpeech () {
    7778:	       lea -12(sp),sp
    777c:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    777e:	       moveq #20,d0
    7780:	       move.l d0,12(sp)
    7784:	       clr.l 8(sp)
    7788:	       move.l 1a7a4 <SysBase>,d0
    778e:	       movea.l d0,a6
    7790:	       move.l 12(sp),d0
    7794:	       move.l 8(sp),d1
    7798:	       jsr -684(a6)
    779c:	       move.l d0,4(sp)
    77a0:	       move.l 4(sp),d0
    77a4:	       move.l d0,1a800 <speech>
	if (speech) {
    77aa:	       move.l 1a800 <speech>,d0
    77b0:	/----- beq.s 77dc <initSpeech+0x64>
		speech -> currentTalker = NULL;
    77b2:	|      movea.l 1a800 <speech>,a0
    77b8:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    77ba:	|      movea.l 1a800 <speech>,a0
    77c0:	|      clr.l 4(a0)
		speech -> speechY = 0;
    77c4:	|      movea.l 1a800 <speech>,a0
    77ca:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    77ce:	|      movea.l 1a800 <speech>,a0
    77d4:	|      moveq #-1,d0
    77d6:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    77da:	|  /-- bra.s 77ea <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    77dc:	\--|-> pea 185c0 <PutChar+0x1258>
    77e2:	   |   jsr 16894 <KPrintF>
    77e8:	   |   addq.l #4,sp
}
    77ea:	   \-> nop
    77ec:	       movea.l (sp)+,a6
    77ee:	       lea 12(sp),sp
    77f2:	       rts

000077f4 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    77f4:	       movea.l 1a800 <speech>,a0
    77fa:	       move.l 4(a0),d0
    77fe:	/----- beq.s 780c <isThereAnySpeechGoingOn+0x18>
    7800:	|      movea.l 1a800 <speech>,a0
    7806:	|      move.l 16(a0),d0
    780a:	|  /-- bra.s 780e <isThereAnySpeechGoingOn+0x1a>
    780c:	\--|-> moveq #-1,d0
}
    780e:	   \-> rts

00007810 <killAllSpeech>:

void killAllSpeech () {
    7810:	       lea -12(sp),sp
    7814:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    7816:	       movea.l 1a800 <speech>,a0
    781c:	       move.l 12(a0),d0
    7820:	       moveq #-1,d1
    7822:	       cmp.l d0,d1
    7824:	   /-- beq.s 7832 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    7826:	   |   movea.l 1a800 <speech>,a0
    782c:	   |   moveq #-1,d0
    782e:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    7832:	   \-> movea.l 1a800 <speech>,a0
    7838:	       move.l (a0),d0
    783a:	/----- beq.w 78c6 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    783e:	|      movea.l 1a800 <speech>,a0
    7844:	|      move.l (a0),d1
    7846:	|      lea -132(sp),sp
    784a:	|      move.l sp,d0
    784c:	|      movea.w #132,a0
    7850:	|      move.l a0,-(sp)
    7852:	|      move.l d1,-(sp)
    7854:	|      move.l d0,-(sp)
    7856:	|      jsr 16848 <memcpy>
    785c:	|      lea 12(sp),sp
    7860:	|      jsr a2a4 <makeSilent>
    7866:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    786a:	|      movea.l 1a800 <speech>,a0
    7870:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    7872:	+----- bra.s 78c6 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    7874:	|  /-> movea.l 1a800 <speech>,a0
    787a:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    7880:	|  |   movea.l 1a800 <speech>,a0
    7886:	|  |   movea.l 4(a0),a1
    788a:	|  |   movea.l 1a800 <speech>,a0
    7890:	|  |   move.l 4(a1),d0
    7894:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    7898:	|  |   movea.l 12(sp),a0
    789c:	|  |   move.l (a0),8(sp)
    78a0:	|  |   move.l 1a7a4 <SysBase>,d0
    78a6:	|  |   movea.l d0,a6
    78a8:	|  |   movea.l 8(sp),a1
    78ac:	|  |   jsr -690(a6)
		FreeVec(killMe);
    78b0:	|  |   move.l 12(sp),4(sp)
    78b6:	|  |   move.l 1a7a4 <SysBase>,d0
    78bc:	|  |   movea.l d0,a6
    78be:	|  |   movea.l 4(sp),a1
    78c2:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    78c6:	\--|-> movea.l 1a800 <speech>,a0
    78cc:	   |   move.l 4(a0),d0
    78d0:	   \-- bne.s 7874 <killAllSpeech+0x64>
	}
}
    78d2:	       nop
    78d4:	       nop
    78d6:	       movea.l (sp)+,a6
    78d8:	       lea 12(sp),sp
    78dc:	       rts

000078de <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    78de:	pea 2 <_start+0x2>
    78e2:	move.l 8(sp),-(sp)
    78e6:	jsr 7a3e <setFrames>
    78ec:	addq.l #8,sp
}
    78ee:	nop
    78f0:	rts

000078f2 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    78f2:	       lea -52(sp),sp
    78f6:	       move.l a6,-(sp)
    78f8:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    78fa:	       movea.l 64(sp),a0
    78fe:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    7904:	       move.l 1a12e <speechSpeed>,d0
    790a:	       move.l 68(sp),-(sp)
    790e:	       move.l d0,-(sp)
    7910:	       jsr a46 <putFloat>
    7916:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    7918:	       movea.l 64(sp),a0
    791c:	       move.l 8(a0),d0
    7920:	       move.l 68(sp),-(sp)
    7924:	       move.l d0,-(sp)
    7926:	       jsr 8d0 <put2bytes>
    792c:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    792e:	       movea.l 64(sp),a0
    7932:	       move.l 16(a0),d0
    7936:	       move.l 68(sp),-(sp)
    793a:	       move.l d0,-(sp)
    793c:	       jsr 8d0 <put2bytes>
    7942:	       addq.l #8,sp
		if (sS -> currentTalker) {
    7944:	       movea.l 64(sp),a0
    7948:	       move.l (a0),d0
    794a:	   /-- beq.s 798e <saveSpeech+0x9c>
			FPutC (fp, 1);
    794c:	   |   move.l 68(sp),40(sp)
    7952:	   |   moveq #1,d0
    7954:	   |   move.l d0,36(sp)
    7958:	   |   move.l 1a7ac <DOSBase>,d0
    795e:	   |   movea.l d0,a6
    7960:	   |   move.l 40(sp),d1
    7964:	   |   move.l 36(sp),d2
    7968:	   |   jsr -312(a6)
    796c:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    7970:	   |   movea.l 64(sp),a0
    7974:	   |   movea.l (a0),a0
    7976:	   |   movea.l 114(a0),a0
    797a:	   |   move.l 4(a0),d0
    797e:	   |   move.l 68(sp),-(sp)
    7982:	   |   move.l d0,-(sp)
    7984:	   |   jsr 8d0 <put2bytes>
    798a:	   |   addq.l #8,sp
    798c:	/--|-- bra.s 7a0a <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    798e:	|  \-> move.l 68(sp),52(sp)
    7994:	|      clr.l 48(sp)
    7998:	|      move.l 1a7ac <DOSBase>,d0
    799e:	|      movea.l d0,a6
    79a0:	|      move.l 52(sp),d1
    79a4:	|      move.l 48(sp),d2
    79a8:	|      jsr -312(a6)
    79ac:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    79b0:	+----- bra.s 7a0a <saveSpeech+0x118>
			FPutC (fp, 1);
    79b2:	|  /-> move.l 68(sp),16(sp)
    79b8:	|  |   moveq #1,d0
    79ba:	|  |   move.l d0,12(sp)
    79be:	|  |   move.l 1a7ac <DOSBase>,d0
    79c4:	|  |   movea.l d0,a6
    79c6:	|  |   move.l 16(sp),d1
    79ca:	|  |   move.l 12(sp),d2
    79ce:	|  |   jsr -312(a6)
    79d2:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    79d6:	|  |   movea.l 56(sp),a0
    79da:	|  |   move.l (a0),d0
    79dc:	|  |   move.l 68(sp),-(sp)
    79e0:	|  |   move.l d0,-(sp)
    79e2:	|  |   jsr bd8 <writeString>
    79e8:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    79ea:	|  |   movea.l 56(sp),a0
    79ee:	|  |   move.l 8(a0),d0
    79f2:	|  |   move.l 68(sp),-(sp)
    79f6:	|  |   move.l d0,-(sp)
    79f8:	|  |   jsr 8d0 <put2bytes>
    79fe:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    7a00:	|  |   movea.l 56(sp),a0
    7a04:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    7a0a:	\--|-> tst.l 56(sp)
    7a0e:	   \-- bne.s 79b2 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    7a10:	       move.l 68(sp),28(sp)
    7a16:	       clr.l 24(sp)
    7a1a:	       move.l 1a7ac <DOSBase>,d0
    7a20:	       movea.l d0,a6
    7a22:	       move.l 28(sp),d1
    7a26:	       move.l 24(sp),d2
    7a2a:	       jsr -312(a6)
    7a2e:	       move.l d0,20(sp)
}
    7a32:	       nop
    7a34:	       move.l (sp)+,d2
    7a36:	       movea.l (sp)+,a6
    7a38:	       lea 52(sp),sp
    7a3c:	       rts

00007a3e <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    7a3e:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    7a40:	movea.l 8(sp),a0
    7a44:	movea.l 80(a0),a0
    7a48:	move.l (a0),d2
    7a4a:	movea.l 8(sp),a0
    7a4e:	movea.l 80(a0),a0
    7a52:	move.l 4(a0),d0
    7a56:	move.l 12(sp),-(sp)
    7a5a:	move.l d0,-(sp)
    7a5c:	jsr 17252 <__mulsi3>
    7a62:	addq.l #8,sp
    7a64:	move.l d0,d1
    7a66:	movea.l 8(sp),a0
    7a6a:	move.l 106(a0),d0
    7a6e:	add.l d1,d0
    7a70:	add.l d0,d0
    7a72:	add.l d0,d0
    7a74:	movea.l d2,a0
    7a76:	adda.l d0,a0
    7a78:	move.l (a0),d0
    7a7a:	movea.l 8(sp),a0
    7a7e:	move.l d0,72(a0)
}
    7a82:	nop
    7a84:	move.l (sp)+,d2
    7a86:	rts

00007a88 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    7a88:	       lea -20(sp),sp
    7a8c:	       move.l d2,-(sp)
    7a8e:	       move.l 40(sp),d0
    7a92:	       move.w d0,d0
    7a94:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    7a98:	       movea.l 1a800 <speech>,a0
    7a9e:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    7aa4:	       move.l 32(sp),-(sp)
    7aa8:	       jsr 9d8e <findPerson>
    7aae:	       addq.l #4,sp
    7ab0:	       move.l d0,16(sp)
    if (thisPerson) {
    7ab4:	   /-- beq.s 7ada <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    7ab6:	   |   movea.w 6(sp),a0
    7aba:	   |   move.l a0,-(sp)
    7abc:	   |   move.l 40(sp),-(sp)
    7ac0:	   |   move.l 24(sp),-(sp)
    7ac4:	   |   move.l 40(sp),-(sp)
    7ac8:	   |   jsr 7ba0 <wrapSpeechPerson>
    7ace:	   |   lea 16(sp),sp
    7ad2:	   |   move.l d0,20(sp)
    7ad6:	/--|-- bra.w 7b94 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    7ada:	|  \-> move.l 32(sp),-(sp)
    7ade:	|      jsr 150b6 <getRegionForObject>
    7ae4:	|      addq.l #4,sp
    7ae6:	|      move.l d0,12(sp)
        if (thisRegion) {
    7aea:	|  /-- beq.s 7b56 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    7aec:	|  |   movea.l 12(sp),a0
    7af0:	|  |   movea.l 28(a0),a0
    7af4:	|  |   move.l 28(a0),d0
    7af8:	|  |   movea.l 12(sp),a0
    7afc:	|  |   movea.l 4(a0),a1
    7b00:	|  |   movea.l 12(sp),a0
    7b04:	|  |   movea.l 28(a0),a0
    7b08:	|  |   move.l 20(a0),d1
    7b0c:	|  |   movea.l a1,a0
    7b0e:	|  |   suba.l d1,a0
    7b10:	|  |   move.l 1a876 <cameraY>,d1
    7b16:	|  |   movea.l a0,a1
    7b18:	|  |   suba.l d1,a1
    7b1a:	|  |   movea.l 12(sp),a0
    7b1e:	|  |   move.l (a0),d2
    7b20:	|  |   movea.l 12(sp),a0
    7b24:	|  |   move.l 8(a0),d1
    7b28:	|  |   add.l d2,d1
    7b2a:	|  |   move.l d1,d2
    7b2c:	|  |   asr.l #1,d2
    7b2e:	|  |   move.l 1a872 <cameraX>,d1
    7b34:	|  |   movea.l d2,a0
    7b36:	|  |   suba.l d1,a0
    7b38:	|  |   move.l 36(sp),-(sp)
    7b3c:	|  |   move.l d0,-(sp)
    7b3e:	|  |   move.l a1,-(sp)
    7b40:	|  |   move.l a0,-(sp)
    7b42:	|  |   move.l 44(sp),-(sp)
    7b46:	|  |   jsr 7cbe <wrapSpeechXY>
    7b4c:	|  |   lea 20(sp),sp
    7b50:	|  |   move.l d0,20(sp)
    7b54:	+--|-- bra.s 7b94 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    7b56:	|  \-> move.l 32(sp),-(sp)
    7b5a:	|      jsr cc00 <findObjectType>
    7b60:	|      addq.l #4,sp
    7b62:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    7b66:	|      movea.l 8(sp),a0
    7b6a:	|      move.l 28(a0),d1
    7b6e:	|      move.l 1a6f8 <winWidth>,d0
    7b74:	|      lsr.l #1,d0
    7b76:	|      move.l 36(sp),-(sp)
    7b7a:	|      move.l d1,-(sp)
    7b7c:	|      pea a <_start+0xa>
    7b80:	|      move.l d0,-(sp)
    7b82:	|      move.l 44(sp),-(sp)
    7b86:	|      jsr 7cbe <wrapSpeechXY>
    7b8c:	|      lea 20(sp),sp
    7b90:	|      move.l d0,20(sp)
        }
    }
    return i;
    7b94:	\----> move.l 20(sp),d0
}
    7b98:	       move.l (sp)+,d2
    7b9a:	       lea 20(sp),sp
    7b9e:	       rts

00007ba0 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    7ba0:	    subq.l #8,sp
    7ba2:	    movem.l d2-d4,-(sp)
    7ba6:	    move.l 36(sp),d0
    7baa:	    move.w d0,d0
    7bac:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    7bb0:	    movea.l 28(sp),a0
    7bb4:	    movea.l 114(a0),a0
    7bb8:	    move.l 28(a0),d2
    7bbc:	    movea.l 28(sp),a0
    7bc0:	    move.l 4(a0),d3
    7bc4:	    move.l 1a876 <cameraY>,d0
    7bca:	    move.l d0,-(sp)
    7bcc:	    jsr 16cd0 <__floatsisf>
    7bd2:	    addq.l #4,sp
    7bd4:	    move.l d0,-(sp)
    7bd6:	    move.l d3,-(sp)
    7bd8:	    jsr 16fc4 <__subsf3>
    7bde:	    addq.l #8,sp
    7be0:	    move.l d0,d3
    7be2:	    movea.l 28(sp),a0
    7be6:	    move.l 32(a0),d4
    7bea:	    movea.l 28(sp),a0
    7bee:	    move.l 20(a0),d1
    7bf2:	    movea.l 28(sp),a0
    7bf6:	    move.l 24(a0),d0
    7bfa:	    sub.l d0,d1
    7bfc:	    move.l d1,-(sp)
    7bfe:	    jsr 16cd0 <__floatsisf>
    7c04:	    addq.l #4,sp
    7c06:	    move.l d0,-(sp)
    7c08:	    move.l d4,-(sp)
    7c0a:	    jsr 16d82 <__mulsf3>
    7c10:	    addq.l #8,sp
    7c12:	    move.l d0,-(sp)
    7c14:	    move.l d3,-(sp)
    7c16:	    jsr 16fc4 <__subsf3>
    7c1c:	    addq.l #8,sp
    7c1e:	    move.l d0,d3
    7c20:	    movea.l 28(sp),a0
    7c24:	    movea.l 114(a0),a0
    7c28:	    move.l 20(a0),d0
    7c2c:	    move.l d0,-(sp)
    7c2e:	    jsr 16cd0 <__floatsisf>
    7c34:	    addq.l #4,sp
    7c36:	    move.l d0,-(sp)
    7c38:	    move.l d3,-(sp)
    7c3a:	    jsr 16fc4 <__subsf3>
    7c40:	    addq.l #8,sp
    7c42:	    move.l d0,-(sp)
    7c44:	    jsr 16c68 <__fixsfsi>
    7c4a:	    addq.l #4,sp
    7c4c:	    move.l d0,d4
    7c4e:	    movea.l 28(sp),a0
    7c52:	    move.l (a0),d3
    7c54:	    move.l 1a872 <cameraX>,d0
    7c5a:	    move.l d0,-(sp)
    7c5c:	    jsr 16cd0 <__floatsisf>
    7c62:	    addq.l #4,sp
    7c64:	    move.l d0,-(sp)
    7c66:	    move.l d3,-(sp)
    7c68:	    jsr 16fc4 <__subsf3>
    7c6e:	    addq.l #8,sp
    7c70:	    move.l d0,-(sp)
    7c72:	    jsr 16c68 <__fixsfsi>
    7c78:	    addq.l #4,sp
    7c7a:	    move.l 32(sp),-(sp)
    7c7e:	    move.l d2,-(sp)
    7c80:	    move.l d4,-(sp)
    7c82:	    move.l d0,-(sp)
    7c84:	    move.l 40(sp),-(sp)
    7c88:	    jsr 7cbe <wrapSpeechXY>
    7c8e:	    lea 20(sp),sp
    7c92:	    move.l d0,16(sp)
	if (animPerson) {
    7c96:	    tst.w 14(sp)
    7c9a:	/-- beq.s 7cb2 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    7c9c:	|   move.l 28(sp),-(sp)
    7ca0:	|   jsr 78de <makeTalker>
    7ca6:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    7ca8:	|   movea.l 1a800 <speech>,a0
    7cae:	|   move.l 28(sp),(a0)
	}
	return i;
    7cb2:	\-> move.l 16(sp),d0
}
    7cb6:	    movem.l (sp)+,d2-d4
    7cba:	    addq.l #8,sp
    7cbc:	    rts

00007cbe <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    7cbe:	                   lea -16(sp),sp
    7cc2:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    7cc6:	                   clr.l 16(sp)
    killAllSpeech();
    7cca:	                   jsr 7810 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    7cd0:	                   move.l 36(sp),-(sp)
    7cd4:	                   jsr 13382 <strlen>
    7cda:	                   addq.l #4,sp
    7cdc:	                   movea.l d0,a0
    7cde:	                   lea 20(a0),a0
    7ce2:	                   move.l a0,-(sp)
    7ce4:	                   jsr 16cf8 <__floatunsisf>
    7cea:	                   addq.l #4,sp
    7cec:	                   move.l d0,d1
    7cee:	                   move.l 1a12e <speechSpeed>,d0
    7cf4:	                   move.l d0,-(sp)
    7cf6:	                   move.l d1,-(sp)
    7cf8:	                   jsr 16d82 <__mulsf3>
    7cfe:	                   addq.l #8,sp
    7d00:	                   move.l d0,-(sp)
    7d02:	                   jsr 16c68 <__fixsfsi>
    7d08:	                   addq.l #4,sp
    7d0a:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    7d0e:	               /-- bgt.s 7d16 <wrapSpeechXY+0x58>
    7d10:	               |   moveq #1,d0
    7d12:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    7d16:	               \-> moveq #-1,d1
    7d18:	                   cmp.l 52(sp),d1
    7d1c:	               /-- beq.s 7d5c <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    7d1e:	               |   move.l 1a886 <speechMode>,d0
    7d24:	               +-- ble.s 7d5c <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    7d26:	               |   clr.l -(sp)
    7d28:	               |   move.l 56(sp),-(sp)
    7d2c:	               |   jsr c8ca <startSound>
    7d32:	               |   addq.l #8,sp
    7d34:	               |   tst.w d0
    7d36:	               +-- beq.s 7d5c <wrapSpeechXY+0x9e>
                speechTime = -10;
    7d38:	               |   moveq #-10,d0
    7d3a:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    7d3e:	               |   movea.l 1a800 <speech>,a0
    7d44:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    7d4a:	               |   move.l 1a886 <speechMode>,d0
    7d50:	               |   moveq #2,d1
    7d52:	               |   cmp.l d0,d1
    7d54:	               +-- bne.s 7d5c <wrapSpeechXY+0x9e>
    7d56:	               |   moveq #-10,d0
    7d58:	/--------------|-- bra.w 7fe2 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    7d5c:	|              \-> movea.l 1a800 <speech>,a0
    7d62:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    7d68:	|     /----------- bra.w 7e1c <wrapSpeechXY+0x15e>
        a = wrap;
    7d6c:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    7d72:	|  |  |        /-- bra.s 7d82 <wrapSpeechXY+0xc4>
            a--;
    7d74:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    7d78:	|  |  |  |     +-- bne.s 7d82 <wrapSpeechXY+0xc4>
                a = wrap;
    7d7a:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    7d80:	|  |  |  |  /--|-- bra.s 7d94 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    7d82:	|  |  |  |  |  \-> move.l 28(sp),d0
    7d86:	|  |  |  |  |      movea.l 36(sp),a0
    7d8a:	|  |  |  |  |      adda.l d0,a0
    7d8c:	|  |  |  |  |      move.b (a0),d0
    7d8e:	|  |  |  |  |      cmpi.b #32,d0
    7d92:	|  |  |  \--|----- bne.s 7d74 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    7d94:	|  |  |     \----> move.l 28(sp),d0
    7d98:	|  |  |            movea.l 36(sp),a0
    7d9c:	|  |  |            adda.l d0,a0
    7d9e:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    7da0:	|  |  |            lea 16(sp),a0
    7da4:	|  |  |            move.l a0,-(sp)
    7da6:	|  |  |            move.l 44(sp),-(sp)
    7daa:	|  |  |            move.l 44(sp),-(sp)
    7dae:	|  |  |            jsr 755a <addSpeechLine>
    7db4:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    7db8:	|  |  |            move.l 28(sp),d0
    7dbc:	|  |  |            movea.l 36(sp),a0
    7dc0:	|  |  |            adda.l d0,a0
    7dc2:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    7dc6:	|  |  |            move.l 28(sp),d0
    7dca:	|  |  |            addq.l #1,d0
    7dcc:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    7dd0:	|  |  |            move.l 44(sp),-(sp)
    7dd4:	|  |  |            jsr 16cd0 <__floatsisf>
    7dda:	|  |  |            addq.l #4,sp
    7ddc:	|  |  |            move.l d0,d2
    7dde:	|  |  |            move.l 1a8b0 <fontHeight>,d0
    7de4:	|  |  |            move.l d0,-(sp)
    7de6:	|  |  |            jsr 16cd0 <__floatsisf>
    7dec:	|  |  |            addq.l #4,sp
    7dee:	|  |  |            move.l d0,d1
    7df0:	|  |  |            move.l 1a142 <cameraZoom>,d0
    7df6:	|  |  |            move.l d0,-(sp)
    7df8:	|  |  |            move.l d1,-(sp)
    7dfa:	|  |  |            jsr 16b7c <__divsf3>
    7e00:	|  |  |            addq.l #8,sp
    7e02:	|  |  |            move.l d0,-(sp)
    7e04:	|  |  |            move.l d2,-(sp)
    7e06:	|  |  |            jsr 16fc4 <__subsf3>
    7e0c:	|  |  |            addq.l #8,sp
    7e0e:	|  |  |            move.l d0,-(sp)
    7e10:	|  |  |            jsr 16c68 <__fixsfsi>
    7e16:	|  |  |            addq.l #4,sp
    7e18:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    7e1c:	|  |  \----------> move.l 36(sp),-(sp)
    7e20:	|  |               jsr 13382 <strlen>
    7e26:	|  |               addq.l #4,sp
    7e28:	|  |               move.l d0,d1
    7e2a:	|  |               move.l 48(sp),d0
    7e2e:	|  |               cmp.l d1,d0
    7e30:	|  \-------------- bcs.w 7d6c <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    7e34:	|                  lea 16(sp),a0
    7e38:	|                  move.l a0,-(sp)
    7e3a:	|                  move.l 44(sp),-(sp)
    7e3e:	|                  move.l 44(sp),-(sp)
    7e42:	|                  jsr 755a <addSpeechLine>
    7e48:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    7e4c:	|                  move.l 44(sp),-(sp)
    7e50:	|                  jsr 16cd0 <__floatsisf>
    7e56:	|                  addq.l #4,sp
    7e58:	|                  move.l d0,d2
    7e5a:	|                  move.l 1a8b0 <fontHeight>,d0
    7e60:	|                  move.l d0,-(sp)
    7e62:	|                  jsr 16cd0 <__floatsisf>
    7e68:	|                  addq.l #4,sp
    7e6a:	|                  move.l d0,d1
    7e6c:	|                  move.l 1a142 <cameraZoom>,d0
    7e72:	|                  move.l d0,-(sp)
    7e74:	|                  move.l d1,-(sp)
    7e76:	|                  jsr 16b7c <__divsf3>
    7e7c:	|                  addq.l #8,sp
    7e7e:	|                  move.l d0,-(sp)
    7e80:	|                  move.l d2,-(sp)
    7e82:	|                  jsr 16fc4 <__subsf3>
    7e88:	|                  addq.l #8,sp
    7e8a:	|                  move.l d0,-(sp)
    7e8c:	|                  jsr 16c68 <__fixsfsi>
    7e92:	|                  addq.l #4,sp
    7e94:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    7e98:	|              /-- bpl.s 7eb6 <wrapSpeechXY+0x1f8>
    7e9a:	|              |   movea.l 1a800 <speech>,a0
    7ea0:	|              |   move.l 8(a0),d0
    7ea4:	|              |   movea.l 1a800 <speech>,a0
    7eaa:	|              |   sub.l 44(sp),d0
    7eae:	|              |   move.l d0,8(a0)
    7eb2:	|           /--|-- bra.w 7fa4 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    7eb6:	|           |  \-> movea.l 1a800 <speech>,a0
    7ebc:	|           |      move.l 8(a0),d0
    7ec0:	|           |      move.l d0,-(sp)
    7ec2:	|           |      jsr 16cd0 <__floatsisf>
    7ec8:	|           |      addq.l #4,sp
    7eca:	|           |      move.l d0,d2
    7ecc:	|           |      move.l 1a876 <cameraY>,d0
    7ed2:	|           |      move.l d0,-(sp)
    7ed4:	|           |      jsr 16cd0 <__floatsisf>
    7eda:	|           |      addq.l #4,sp
    7edc:	|           |      move.l d0,d3
    7ede:	|           |      move.l 1a6fc <winHeight>,d4
    7ee4:	|           |      move.l 1a8b0 <fontHeight>,d0
    7eea:	|           |      pea 3 <_start+0x3>
    7eee:	|           |      move.l d0,-(sp)
    7ef0:	|           |      jsr 172d0 <__divsi3>
    7ef6:	|           |      addq.l #8,sp
    7ef8:	|           |      move.l d4,d1
    7efa:	|           |      sub.l d0,d1
    7efc:	|           |      move.l d1,-(sp)
    7efe:	|           |      jsr 16cf8 <__floatunsisf>
    7f04:	|           |      addq.l #4,sp
    7f06:	|           |      move.l d0,d1
    7f08:	|           |      move.l 1a142 <cameraZoom>,d0
    7f0e:	|           |      move.l d0,-(sp)
    7f10:	|           |      move.l d1,-(sp)
    7f12:	|           |      jsr 16b7c <__divsf3>
    7f18:	|           |      addq.l #8,sp
    7f1a:	|           |      move.l d0,-(sp)
    7f1c:	|           |      move.l d3,-(sp)
    7f1e:	|           |      jsr 16a82 <__addsf3>
    7f24:	|           |      addq.l #8,sp
    7f26:	|           |      move.l d0,-(sp)
    7f28:	|           |      move.l d2,-(sp)
    7f2a:	|           |      jsr 16e3c <__gtsf2>
    7f30:	|           |      addq.l #8,sp
    7f32:	|           |      tst.l d0
    7f34:	|           +----- ble.s 7fa4 <wrapSpeechXY+0x2e6>
    7f36:	|           |      move.l 1a876 <cameraY>,d0
    7f3c:	|           |      move.l d0,-(sp)
    7f3e:	|           |      jsr 16cd0 <__floatsisf>
    7f44:	|           |      addq.l #4,sp
    7f46:	|           |      move.l d0,d2
    7f48:	|           |      move.l 1a6fc <winHeight>,d3
    7f4e:	|           |      move.l 1a8b0 <fontHeight>,d0
    7f54:	|           |      pea 3 <_start+0x3>
    7f58:	|           |      move.l d0,-(sp)
    7f5a:	|           |      jsr 172d0 <__divsi3>
    7f60:	|           |      addq.l #8,sp
    7f62:	|           |      move.l d3,d1
    7f64:	|           |      sub.l d0,d1
    7f66:	|           |      move.l d1,-(sp)
    7f68:	|           |      jsr 16cf8 <__floatunsisf>
    7f6e:	|           |      addq.l #4,sp
    7f70:	|           |      move.l d0,d1
    7f72:	|           |      move.l 1a142 <cameraZoom>,d0
    7f78:	|           |      move.l d0,-(sp)
    7f7a:	|           |      move.l d1,-(sp)
    7f7c:	|           |      jsr 16b7c <__divsf3>
    7f82:	|           |      addq.l #8,sp
    7f84:	|           |      move.l d0,-(sp)
    7f86:	|           |      move.l d2,-(sp)
    7f88:	|           |      jsr 16a82 <__addsf3>
    7f8e:	|           |      addq.l #8,sp
    7f90:	|           |      movea.l 1a800 <speech>,a2
    7f96:	|           |      move.l d0,-(sp)
    7f98:	|           |      jsr 16c68 <__fixsfsi>
    7f9e:	|           |      addq.l #4,sp
    7fa0:	|           |      move.l d0,8(a2)

    if (offset) {
    7fa4:	|           \----> move.l 16(sp),d0
    7fa8:	|        /-------- beq.s 7fde <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    7faa:	|        |         movea.l 1a800 <speech>,a0
    7fb0:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    7fb6:	|        |     /-- bra.s 7fd8 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    7fb8:	|        |  /--|-> movea.l 20(sp),a0
    7fbc:	|        |  |  |   move.l 8(a0),d1
    7fc0:	|        |  |  |   move.l 16(sp),d0
    7fc4:	|        |  |  |   add.l d1,d0
    7fc6:	|        |  |  |   movea.l 20(sp),a0
    7fca:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    7fce:	|        |  |  |   movea.l 20(sp),a0
    7fd2:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    7fd8:	|        |  |  \-> tst.l 20(sp)
    7fdc:	|        |  \----- bne.s 7fb8 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    7fde:	|        \-------> move.l 24(sp),d0
}
    7fe2:	\----------------> movem.l (sp)+,d2-d4/a2
    7fe6:	                   lea 16(sp),sp
    7fea:	                   rts

00007fec <killZBuffer>:
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {	
}
    7fec:	nop
    7fee:	rts

00007ff0 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    7ff0:	       lea -264(sp),sp
    7ff4:	       movem.l d2-d4/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    7ff8:	       clr.l 276(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    7ffc:	       jsr 7fec <killZBuffer>

	if (! openFileFromNum (y)) return FALSE;
    8002:	       move.l 284(sp),d0
    8006:	       move.l d0,-(sp)
    8008:	       jsr 6658 <openFileFromNum>
    800e:	       addq.l #4,sp
    8010:	       tst.l d0
    8012:	   /-- bne.s 801a <setZBuffer+0x2a>
    8014:	   |   clr.w d0
    8016:	/--|-- bra.w 81d4 <setZBuffer+0x1e4>
	if (FGetC (bigDataFile) != 'a' && FGetC (bigDataFile) != 's' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    801a:	|  \-> move.l 1a78c <bigDataFile>,272(sp)
    8022:	|      move.l 1a7ac <DOSBase>,d0
    8028:	|      movea.l d0,a6
    802a:	|      move.l 272(sp),d1
    802e:	|      jsr -306(a6)
    8032:	|      move.l d0,268(sp)
    8036:	|      move.l 268(sp),d0
    803a:	|      moveq #97,d1
    803c:	|      cmp.l d0,d1
    803e:	|  /-- beq.w 80c8 <setZBuffer+0xd8>
    8042:	|  |   move.l 1a78c <bigDataFile>,264(sp)
    804a:	|  |   move.l 1a7ac <DOSBase>,d0
    8050:	|  |   movea.l d0,a6
    8052:	|  |   move.l 264(sp),d1
    8056:	|  |   jsr -306(a6)
    805a:	|  |   move.l d0,260(sp)
    805e:	|  |   move.l 260(sp),d0
    8062:	|  |   moveq #115,d2
    8064:	|  |   cmp.l d0,d2
    8066:	|  +-- beq.s 80c8 <setZBuffer+0xd8>
    8068:	|  |   move.l 1a78c <bigDataFile>,256(sp)
    8070:	|  |   move.l 1a7ac <DOSBase>,d0
    8076:	|  |   movea.l d0,a6
    8078:	|  |   move.l 256(sp),d1
    807c:	|  |   jsr -306(a6)
    8080:	|  |   move.l d0,252(sp)
    8084:	|  |   move.l 252(sp),d0
    8088:	|  |   moveq #122,d1
    808a:	|  |   cmp.l d0,d1
    808c:	|  +-- beq.s 80c8 <setZBuffer+0xd8>
    808e:	|  |   move.l 1a78c <bigDataFile>,248(sp)
    8096:	|  |   move.l 1a7ac <DOSBase>,d0
    809c:	|  |   movea.l d0,a6
    809e:	|  |   move.l 248(sp),d1
    80a2:	|  |   jsr -306(a6)
    80a6:	|  |   move.l d0,244(sp)
    80aa:	|  |   move.l 244(sp),d0
    80ae:	|  |   moveq #98,d2
    80b0:	|  |   cmp.l d0,d2
    80b2:	|  +-- beq.s 80c8 <setZBuffer+0xd8>
	{
		 KPrintF("Not a Asludge Z-buffer file. Remember the Amiga Version is using its own format.");
    80b4:	|  |   pea 185fd <PutChar+0x1295>
    80ba:	|  |   jsr 16894 <KPrintF>
    80c0:	|  |   addq.l #4,sp
		 return FALSE;
    80c2:	|  |   clr.w d0
    80c4:	+--|-- bra.w 81d4 <setZBuffer+0x1e4>
	}

	zBuffer.width = get2bytes (bigDataFile);
    80c8:	|  \-> move.l 1a78c <bigDataFile>,d0
    80ce:	|      move.l d0,-(sp)
    80d0:	|      jsr 6bc <get2bytes>
    80d6:	|      addq.l #4,sp
    80d8:	|      move.l d0,1a804 <zBuffer>
	zBuffer.height = get2bytes (bigDataFile);
    80de:	|      move.l 1a78c <bigDataFile>,d0
    80e4:	|      move.l d0,-(sp)
    80e6:	|      jsr 6bc <get2bytes>
    80ec:	|      addq.l #4,sp
    80ee:	|      move.l d0,1a808 <zBuffer+0x4>
	zBuffer.topx = get2bytes (bigDataFile);
    80f4:	|      move.l 1a78c <bigDataFile>,d0
    80fa:	|      move.l d0,-(sp)
    80fc:	|      jsr 6bc <get2bytes>
    8102:	|      addq.l #4,sp
    8104:	|      move.l d0,1a80c <zBuffer+0x8>
	zBuffer.topx = get2bytes (bigDataFile);
    810a:	|      move.l 1a78c <bigDataFile>,d0
    8110:	|      move.l d0,-(sp)
    8112:	|      jsr 6bc <get2bytes>
    8118:	|      addq.l #4,sp
    811a:	|      move.l d0,1a80c <zBuffer+0x8>

	UWORD size = zBuffer.width/8*zBuffer.height;
    8120:	|      move.l 1a804 <zBuffer>,d0
    8126:	|  /-- bpl.s 812a <setZBuffer+0x13a>
    8128:	|  |   addq.l #7,d0
    812a:	|  \-> asr.l #3,d0
    812c:	|      move.l d0,d1
    812e:	|      move.l 1a808 <zBuffer+0x4>,d0
    8134:	|      move.l d0,d0
    8136:	|      move.w d1,d2
    8138:	|      muls.w d0,d2
    813a:	|      move.w d2,242(sp)
	zBuffer.bitplane = AllocVec( size, MEMF_CHIP);
    813e:	|      moveq #0,d0
    8140:	|      move.w 242(sp),d0
    8144:	|      move.l d0,238(sp)
    8148:	|      moveq #2,d0
    814a:	|      move.l d0,234(sp)
    814e:	|      move.l 1a7a4 <SysBase>,d0
    8154:	|      movea.l d0,a6
    8156:	|      move.l 238(sp),d0
    815a:	|      move.l 234(sp),d1
    815e:	|      jsr -684(a6)
    8162:	|      move.l d0,230(sp)
    8166:	|      move.l 230(sp),d0
    816a:	|      move.l d0,1a814 <zBuffer+0x10>

	UWORD count = FRead( bigDataFile, zBuffer.bitplane, 1, size);
    8170:	|      move.l 1a78c <bigDataFile>,226(sp)
    8178:	|      move.l 1a814 <zBuffer+0x10>,222(sp)
    8180:	|      moveq #1,d1
    8182:	|      move.l d1,218(sp)
    8186:	|      moveq #0,d0
    8188:	|      move.w 242(sp),d0
    818c:	|      move.l d0,214(sp)
    8190:	|      move.l 1a7ac <DOSBase>,d0
    8196:	|      movea.l d0,a6
    8198:	|      move.l 226(sp),d1
    819c:	|      move.l 222(sp),d2
    81a0:	|      move.l 218(sp),d3
    81a4:	|      move.l 214(sp),d4
    81a8:	|      jsr -324(a6)
    81ac:	|      move.l d0,210(sp)
    81b0:	|      move.l 210(sp),d0
    81b4:	|      move.w d0,208(sp)
	if(count == 0) {
    81b8:	|  /-- bne.s 81cc <setZBuffer+0x1dc>
		KPrintF("Error loading zBuffer");
    81ba:	|  |   pea 1864e <PutChar+0x12e6>
    81c0:	|  |   jsr 16894 <KPrintF>
    81c6:	|  |   addq.l #4,sp
		return FALSE;
    81c8:	|  |   clr.w d0
    81ca:	+--|-- bra.s 81d4 <setZBuffer+0x1e4>
	}

	finishAccess ();
    81cc:	|  \-> jsr 6550 <finishAccess>
	
	return TRUE;
    81d2:	|      moveq #1,d0
}
    81d4:	\----> movem.l (sp)+,d2-d4/a6
    81d8:	       lea 264(sp),sp
    81dc:	       rts

000081de <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    81de:	          lea -36(sp),sp
    81e2:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    81e4:	          move.l 44(sp),d0
    81e8:	          addq.l #8,d0
    81ea:	          move.l d0,28(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    81ee:	          clr.l 36(sp)
    81f2:	   /----- bra.s 8238 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    81f4:	/--|----> movea.l 28(sp),a0
    81f8:	|  |      movea.l 8(a0),a0
    81fc:	|  |      move.l 36(sp),d1
    8200:	|  |      move.l d1,d0
    8202:	|  |      lsl.l #3,d0
    8204:	|  |      sub.l d1,d0
    8206:	|  |      add.l d0,d0
    8208:	|  |      add.l d0,d0
    820a:	|  |      adda.l d0,a0
    820c:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8210:	|  |      movea.l 8(sp),a0
    8214:	|  |      move.l 24(a0),d0
    8218:	|  |  /-- beq.s 8234 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    821a:	|  |  |   movea.l 8(sp),a0
    821e:	|  |  |   move.l 24(a0),4(sp)
    8224:	|  |  |   move.l 1a7a4 <SysBase>,d0
    822a:	|  |  |   movea.l d0,a6
    822c:	|  |  |   movea.l 4(sp),a1
    8230:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8234:	|  |  \-> addq.l #1,36(sp)
    8238:	|  \----> movea.l 28(sp),a0
    823c:	|         move.l (a0),d0
    823e:	|         cmp.l 36(sp),d0
    8242:	\-------- bgt.s 81f4 <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);
    8244:	          movea.l 28(sp),a0
    8248:	          move.l 8(a0),24(sp)
    824e:	          move.l 1a7a4 <SysBase>,d0
    8254:	          movea.l d0,a6
    8256:	          movea.l 24(sp),a1
    825a:	          jsr -690(a6)
	FreeVec(spritebanktoforget);
    825e:	          move.l 28(sp),20(sp)
    8264:	          move.l 1a7a4 <SysBase>,d0
    826a:	          movea.l d0,a6
    826c:	          movea.l 20(sp),a1
    8270:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8274:	          move.l 1a8d0 <allLoadedBanks>,32(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    827c:	      /-- bra.s 8288 <forgetSpriteBank+0xaa>
	{
		precedingbank = precedingbank->next;
    827e:	   /--|-> movea.l 32(sp),a0
    8282:	   |  |   move.l 22(a0),32(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8288:	   |  \-> movea.l 32(sp),a0
    828c:	   |      movea.l 22(a0),a0
    8290:	   |      move.l (a0),d1
    8292:	   |      movea.l 44(sp),a0
    8296:	   |      move.l (a0),d0
    8298:	   |      cmp.l d1,d0
    829a:	   |  /-- beq.s 82a2 <forgetSpriteBank+0xc4>
    829c:	   |  |   tst.l 32(sp)
    82a0:	   \--|-- bne.s 827e <forgetSpriteBank+0xa0>
	}	

	if(precedingbank)
    82a2:	      \-> tst.l 32(sp)
    82a6:	   /----- beq.s 82d0 <forgetSpriteBank+0xf2>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    82a8:	   |      movea.l 44(sp),a0
    82ac:	   |      move.l 22(a0),d0
    82b0:	   |      movea.l 32(sp),a0
    82b4:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    82b8:	   |      move.l 44(sp),12(sp)
    82be:	   |      move.l 1a7a4 <SysBase>,d0
    82c4:	   |      movea.l d0,a6
    82c6:	   |      movea.l 12(sp),a1
    82ca:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    82ce:	   |  /-- bra.s 82f6 <forgetSpriteBank+0x118>
		allLoadedBanks = allLoadedBanks->next;
    82d0:	   \--|-> movea.l 1a8d0 <allLoadedBanks>,a0
    82d6:	      |   move.l 22(a0),d0
    82da:	      |   move.l d0,1a8d0 <allLoadedBanks>
		FreeVec( forgetme);
    82e0:	      |   move.l 44(sp),16(sp)
    82e6:	      |   move.l 1a7a4 <SysBase>,d0
    82ec:	      |   movea.l d0,a6
    82ee:	      |   movea.l 16(sp),a1
    82f2:	      |   jsr -690(a6)
}
    82f6:	      \-> nop
    82f8:	          movea.l (sp)+,a6
    82fa:	          lea 36(sp),sp
    82fe:	          rts

00008300 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    8300:	                      lea -84(sp),sp
    8304:	                      movem.l d2-d4/a2/a6,-(sp)
    8308:	                      move.l 116(sp),d0
    830c:	                      move.w d0,d0
    830e:	                      move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8312:	                      clr.l 94(sp)
    8316:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    831a:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    831e:	                      move.l 108(sp),-(sp)
    8322:	                      jsr 6658 <openFileFromNum>
    8328:	                      addq.l #4,sp
    832a:	                      tst.l d0
    832c:	                  /-- bne.s 8342 <loadSpriteBank+0x42>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    832e:	                  |   pea 18664 <PutChar+0x12fc>
    8334:	                  |   jsr 16894 <KPrintF>
    833a:	                  |   addq.l #4,sp
		return FALSE;
    833c:	                  |   clr.w d0
    833e:	/-----------------|-- bra.w 870a <loadSpriteBank+0x40a>
	}

	loadhere->isFont = isFont;
    8342:	|                 \-> movea.l 112(sp),a0
    8346:	|                     move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    834c:	|                     move.l 1a78c <bigDataFile>,d0
    8352:	|                     move.l d0,-(sp)
    8354:	|                     jsr 6bc <get2bytes>
    835a:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    835c:	|                     move.l 1a78c <bigDataFile>,82(sp)
    8364:	|                     move.l 1a7ac <DOSBase>,d0
    836a:	|                     movea.l d0,a6
    836c:	|                     move.l 82(sp),d1
    8370:	|                     jsr -306(a6)
    8374:	|                     move.l d0,78(sp)
    8378:	|                     move.l 78(sp),d0
    837c:	|                     movea.l 112(sp),a0
    8380:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8384:	|                     move.l 1a78c <bigDataFile>,d0
    838a:	|                     move.l d0,-(sp)
    838c:	|                     jsr 6bc <get2bytes>
    8392:	|                     addq.l #4,sp
    8394:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8398:	|                 /-- bgt.s 83ae <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    839a:	|                 |   pea 18692 <PutChar+0x132a>
    83a0:	|                 |   jsr 16894 <KPrintF>
    83a6:	|                 |   addq.l #4,sp
		return FALSE;
    83a8:	|                 |   clr.w d0
    83aa:	+-----------------|-- bra.w 870a <loadSpriteBank+0x40a>
	}
	if (loadhere->type > 3) {
    83ae:	|                 \-> movea.l 112(sp),a0
    83b2:	|                     move.l 4(a0),d0
    83b6:	|                     moveq #3,d1
    83b8:	|                     cmp.l d0,d1
    83ba:	|                 /-- bge.s 83d0 <loadSpriteBank+0xd0>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    83bc:	|                 |   pea 186d2 <PutChar+0x136a>
    83c2:	|                 |   jsr 16894 <KPrintF>
    83c8:	|                 |   addq.l #4,sp
		return FALSE;
    83ca:	|                 |   clr.w d0
    83cc:	+-----------------|-- bra.w 870a <loadSpriteBank+0x40a>
	}

	loadhere->total = total;
    83d0:	|                 \-> movea.l 112(sp),a0
    83d4:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    83d8:	|                     move.l 74(sp),d1
    83dc:	|                     move.l d1,d0
    83de:	|                     lsl.l #3,d0
    83e0:	|                     sub.l d1,d0
    83e2:	|                     add.l d0,d0
    83e4:	|                     add.l d0,d0
    83e6:	|                     move.l d0,70(sp)
    83ea:	|                     clr.l 66(sp)
    83ee:	|                     move.l 1a7a4 <SysBase>,d0
    83f4:	|                     movea.l d0,a6
    83f6:	|                     move.l 70(sp),d0
    83fa:	|                     move.l 66(sp),d1
    83fe:	|                     jsr -684(a6)
    8402:	|                     move.l d0,62(sp)
    8406:	|                     move.l 62(sp),d0
    840a:	|                     movea.l 112(sp),a0
    840e:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8412:	|                     movea.l 112(sp),a0
    8416:	|                     move.l 8(a0),d0
    841a:	|                 /-- bne.s 8422 <loadSpriteBank+0x122>
    841c:	|                 |   clr.w d0
    841e:	+-----------------|-- bra.w 870a <loadSpriteBank+0x40a>
	
	startIndex = 1;
    8422:	|                 \-> moveq #1,d0
    8424:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8428:	|                     clr.l 100(sp)
    842c:	|     /-------------- bra.w 86f6 <loadSpriteBank+0x3f6>
		UWORD width = get2bytes(bigDataFile);
    8430:	|  /--|-------------> move.l 1a78c <bigDataFile>,d0
    8436:	|  |  |               move.l d0,-(sp)
    8438:	|  |  |               jsr 6bc <get2bytes>
    843e:	|  |  |               addq.l #4,sp
    8440:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8444:	|  |  |               movea.l 112(sp),a0
    8448:	|  |  |               movea.l 8(a0),a0
    844c:	|  |  |               move.l 100(sp),d1
    8450:	|  |  |               move.l d1,d0
    8452:	|  |  |               lsl.l #3,d0
    8454:	|  |  |               sub.l d1,d0
    8456:	|  |  |               add.l d0,d0
    8458:	|  |  |               add.l d0,d0
    845a:	|  |  |               adda.l d0,a0
    845c:	|  |  |               moveq #0,d0
    845e:	|  |  |               move.w 60(sp),d0
    8462:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8464:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    846a:	|  |  |               movea.l 112(sp),a0
    846e:	|  |  |               movea.l 8(a0),a0
    8472:	|  |  |               move.l 100(sp),d1
    8476:	|  |  |               move.l d1,d0
    8478:	|  |  |               lsl.l #3,d0
    847a:	|  |  |               sub.l d1,d0
    847c:	|  |  |               add.l d0,d0
    847e:	|  |  |               add.l d0,d0
    8480:	|  |  |               lea (0,a0,d0.l),a2
    8484:	|  |  |               move.l a1,-(sp)
    8486:	|  |  |               jsr 6bc <get2bytes>
    848c:	|  |  |               addq.l #4,sp
    848e:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8492:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    8498:	|  |  |               movea.l 112(sp),a0
    849c:	|  |  |               movea.l 8(a0),a0
    84a0:	|  |  |               move.l 100(sp),d1
    84a4:	|  |  |               move.l d1,d0
    84a6:	|  |  |               lsl.l #3,d0
    84a8:	|  |  |               sub.l d1,d0
    84aa:	|  |  |               add.l d0,d0
    84ac:	|  |  |               add.l d0,d0
    84ae:	|  |  |               lea (0,a0,d0.l),a2
    84b2:	|  |  |               move.l a1,-(sp)
    84b4:	|  |  |               jsr 6bc <get2bytes>
    84ba:	|  |  |               addq.l #4,sp
    84bc:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    84c0:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    84c6:	|  |  |               movea.l 112(sp),a0
    84ca:	|  |  |               movea.l 8(a0),a0
    84ce:	|  |  |               move.l 100(sp),d1
    84d2:	|  |  |               move.l d1,d0
    84d4:	|  |  |               lsl.l #3,d0
    84d6:	|  |  |               sub.l d1,d0
    84d8:	|  |  |               add.l d0,d0
    84da:	|  |  |               add.l d0,d0
    84dc:	|  |  |               lea (0,a0,d0.l),a2
    84e0:	|  |  |               move.l a1,-(sp)
    84e2:	|  |  |               jsr 6bc <get2bytes>
    84e8:	|  |  |               addq.l #4,sp
    84ea:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    84ee:	|  |  |               movea.l 112(sp),a0
    84f2:	|  |  |               move.l 4(a0),d0
    84f6:	|  |  |               moveq #3,d1
    84f8:	|  |  |               cmp.l d0,d1
    84fa:	|  |  |     /-------- beq.w 8596 <loadSpriteBank+0x296>
    84fe:	|  |  |     |         moveq #3,d1
    8500:	|  |  |     |         cmp.l d0,d1
    8502:	|  |  |  /--|-------- blt.w 862e <loadSpriteBank+0x32e>
    8506:	|  |  |  |  |         moveq #1,d1
    8508:	|  |  |  |  |         cmp.l d0,d1
    850a:	|  |  |  |  |     /-- beq.s 8516 <loadSpriteBank+0x216>
    850c:	|  |  |  |  |     |   moveq #2,d1
    850e:	|  |  |  |  |     |   cmp.l d0,d1
    8510:	|  |  |  |  |  /--|-- beq.s 8542 <loadSpriteBank+0x242>
    8512:	|  |  |  +--|--|--|-- bra.w 862e <loadSpriteBank+0x32e>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8516:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    851a:	|  |  |  |  |  |      movea.l 8(a0),a0
    851e:	|  |  |  |  |  |      move.l 100(sp),d1
    8522:	|  |  |  |  |  |      move.l d1,d0
    8524:	|  |  |  |  |  |      lsl.l #3,d0
    8526:	|  |  |  |  |  |      sub.l d1,d0
    8528:	|  |  |  |  |  |      add.l d0,d0
    852a:	|  |  |  |  |  |      add.l d0,d0
    852c:	|  |  |  |  |  |      adda.l d0,a0
    852e:	|  |  |  |  |  |      move.l 4(a0),d0
    8532:	|  |  |  |  |  |      addq.l #2,d0
    8534:	|  |  |  |  |  |      move.l d0,d0
    8536:	|  |  |  |  |  |      add.w d0,d0
    8538:	|  |  |  |  |  |      add.w d0,d0
    853a:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    853e:	|  |  |  +--|--|----- bra.w 862e <loadSpriteBank+0x32e>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8542:	|  |  |  |  |  \----> movea.l 112(sp),a0
    8546:	|  |  |  |  |         movea.l 8(a0),a0
    854a:	|  |  |  |  |         move.l 100(sp),d1
    854e:	|  |  |  |  |         move.l d1,d0
    8550:	|  |  |  |  |         lsl.l #3,d0
    8552:	|  |  |  |  |         sub.l d1,d0
    8554:	|  |  |  |  |         add.l d0,d0
    8556:	|  |  |  |  |         add.l d0,d0
    8558:	|  |  |  |  |         adda.l d0,a0
    855a:	|  |  |  |  |         move.l (a0),d0
    855c:	|  |  |  |  |     /-- bpl.s 8560 <loadSpriteBank+0x260>
    855e:	|  |  |  |  |     |   addq.l #7,d0
    8560:	|  |  |  |  |     \-> asr.l #3,d0
    8562:	|  |  |  |  |         move.l d0,d2
    8564:	|  |  |  |  |         movea.l 112(sp),a0
    8568:	|  |  |  |  |         movea.l 8(a0),a0
    856c:	|  |  |  |  |         move.l 100(sp),d1
    8570:	|  |  |  |  |         move.l d1,d0
    8572:	|  |  |  |  |         lsl.l #3,d0
    8574:	|  |  |  |  |         sub.l d1,d0
    8576:	|  |  |  |  |         add.l d0,d0
    8578:	|  |  |  |  |         add.l d0,d0
    857a:	|  |  |  |  |         adda.l d0,a0
    857c:	|  |  |  |  |         move.l 4(a0),d0
    8580:	|  |  |  |  |         move.l d0,d0
    8582:	|  |  |  |  |         move.w d2,d1
    8584:	|  |  |  |  |         muls.w d0,d1
    8586:	|  |  |  |  |         move.w d1,d0
    8588:	|  |  |  |  |         add.w d0,d0
    858a:	|  |  |  |  |         add.w d1,d0
    858c:	|  |  |  |  |         add.w d0,d0
    858e:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8592:	|  |  |  +--|-------- bra.w 862e <loadSpriteBank+0x32e>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8596:	|  |  |  |  \-------> movea.l 112(sp),a0
    859a:	|  |  |  |            movea.l 8(a0),a0
    859e:	|  |  |  |            move.l 100(sp),d1
    85a2:	|  |  |  |            move.l d1,d0
    85a4:	|  |  |  |            lsl.l #3,d0
    85a6:	|  |  |  |            sub.l d1,d0
    85a8:	|  |  |  |            add.l d0,d0
    85aa:	|  |  |  |            add.l d0,d0
    85ac:	|  |  |  |            adda.l d0,a0
    85ae:	|  |  |  |            move.l (a0),d0
    85b0:	|  |  |  |            andi.l #-2147483633,d0
    85b6:	|  |  |  |        /-- bpl.s 85c0 <loadSpriteBank+0x2c0>
    85b8:	|  |  |  |        |   subq.l #1,d0
    85ba:	|  |  |  |        |   moveq #-16,d1
    85bc:	|  |  |  |        |   or.l d1,d0
    85be:	|  |  |  |        |   addq.l #1,d0
    85c0:	|  |  |  |        \-> tst.l d0
    85c2:	|  |  |  |     /----- ble.s 85c8 <loadSpriteBank+0x2c8>
    85c4:	|  |  |  |     |      moveq #2,d0
    85c6:	|  |  |  |     |  /-- bra.s 85ca <loadSpriteBank+0x2ca>
    85c8:	|  |  |  |     \--|-> clr.w d0
    85ca:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    85ce:	|  |  |  |            movea.l 112(sp),a0
    85d2:	|  |  |  |            movea.l 8(a0),a0
    85d6:	|  |  |  |            move.l 100(sp),d1
    85da:	|  |  |  |            move.l d1,d0
    85dc:	|  |  |  |            lsl.l #3,d0
    85de:	|  |  |  |            sub.l d1,d0
    85e0:	|  |  |  |            add.l d0,d0
    85e2:	|  |  |  |            add.l d0,d0
    85e4:	|  |  |  |            adda.l d0,a0
    85e6:	|  |  |  |            move.l (a0),d0
    85e8:	|  |  |  |            movea.l d0,a0
    85ea:	|  |  |  |            cmpa.w #0,a0
    85ee:	|  |  |  |        /-- bge.s 85f4 <loadSpriteBank+0x2f4>
    85f0:	|  |  |  |        |   lea 15(a0),a0
    85f4:	|  |  |  |        \-> move.l a0,d0
    85f6:	|  |  |  |            asr.l #4,d0
    85f8:	|  |  |  |            add.l d0,d0
    85fa:	|  |  |  |            move.l d0,d1
    85fc:	|  |  |  |            moveq #0,d0
    85fe:	|  |  |  |            move.w 58(sp),d0
    8602:	|  |  |  |            add.l d1,d0
    8604:	|  |  |  |            move.l d0,d2
    8606:	|  |  |  |            movea.l 112(sp),a0
    860a:	|  |  |  |            movea.l 8(a0),a0
    860e:	|  |  |  |            move.l 100(sp),d1
    8612:	|  |  |  |            move.l d1,d0
    8614:	|  |  |  |            lsl.l #3,d0
    8616:	|  |  |  |            sub.l d1,d0
    8618:	|  |  |  |            add.l d0,d0
    861a:	|  |  |  |            add.l d0,d0
    861c:	|  |  |  |            adda.l d0,a0
    861e:	|  |  |  |            move.l 4(a0),d0
    8622:	|  |  |  |            move.l d0,d0
    8624:	|  |  |  |            move.w d2,d1
    8626:	|  |  |  |            muls.w d0,d1
    8628:	|  |  |  |            move.w d1,98(sp)
				break;
    862c:	|  |  |  |            nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    862e:	|  |  |  \----------> moveq #0,d0
    8630:	|  |  |               move.w 98(sp),d0
    8634:	|  |  |               add.l d0,d0
    8636:	|  |  |               move.l d0,54(sp)
    863a:	|  |  |               moveq #2,d0
    863c:	|  |  |               move.l d0,50(sp)
    8640:	|  |  |               move.l 1a7a4 <SysBase>,d0
    8646:	|  |  |               movea.l d0,a6
    8648:	|  |  |               move.l 54(sp),d0
    864c:	|  |  |               move.l 50(sp),d1
    8650:	|  |  |               jsr -684(a6)
    8654:	|  |  |               move.l d0,46(sp)
    8658:	|  |  |               movea.l 46(sp),a1
    865c:	|  |  |               movea.l 112(sp),a0
    8660:	|  |  |               movea.l 8(a0),a0
    8664:	|  |  |               move.l 100(sp),d1
    8668:	|  |  |               move.l d1,d0
    866a:	|  |  |               lsl.l #3,d0
    866c:	|  |  |               sub.l d1,d0
    866e:	|  |  |               add.l d0,d0
    8670:	|  |  |               add.l d0,d0
    8672:	|  |  |               adda.l d0,a0
    8674:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8678:	|  |  |               move.l 1a78c <bigDataFile>,42(sp)
    8680:	|  |  |               movea.l 112(sp),a0
    8684:	|  |  |               movea.l 8(a0),a0
    8688:	|  |  |               move.l 100(sp),d1
    868c:	|  |  |               move.l d1,d0
    868e:	|  |  |               lsl.l #3,d0
    8690:	|  |  |               sub.l d1,d0
    8692:	|  |  |               add.l d0,d0
    8694:	|  |  |               add.l d0,d0
    8696:	|  |  |               adda.l d0,a0
    8698:	|  |  |               move.l 24(a0),38(sp)
    869e:	|  |  |               moveq #2,d1
    86a0:	|  |  |               move.l d1,34(sp)
    86a4:	|  |  |               move.w 98(sp),d0
    86a8:	|  |  |               lsr.w #1,d0
    86aa:	|  |  |               move.w d0,d0
    86ac:	|  |  |               andi.l #65535,d0
    86b2:	|  |  |               move.l d0,30(sp)
    86b6:	|  |  |               move.l 1a7ac <DOSBase>,d0
    86bc:	|  |  |               movea.l d0,a6
    86be:	|  |  |               move.l 42(sp),d1
    86c2:	|  |  |               move.l 38(sp),d2
    86c6:	|  |  |               move.l 34(sp),d3
    86ca:	|  |  |               move.l 30(sp),d4
    86ce:	|  |  |               jsr -324(a6)
    86d2:	|  |  |               move.l d0,26(sp)
    86d6:	|  |  |               move.l 26(sp),d0
    86da:	|  |  |               move.w d0,24(sp)
		if (!count) {
    86de:	|  |  |           /-- bne.s 86f2 <loadSpriteBank+0x3f2>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    86e0:	|  |  |           |   pea 18707 <PutChar+0x139f>
    86e6:	|  |  |           |   jsr 16894 <KPrintF>
    86ec:	|  |  |           |   addq.l #4,sp
			return FALSE;
    86ee:	|  |  |           |   clr.w d0
    86f0:	+--|--|-----------|-- bra.s 870a <loadSpriteBank+0x40a>
	for (i = 0; i < total; i++) {
    86f2:	|  |  |           \-> addq.l #1,100(sp)
    86f6:	|  |  \-------------> move.l 100(sp),d0
    86fa:	|  |                  cmp.l 74(sp),d0
    86fe:	|  \----------------- blt.w 8430 <loadSpriteBank+0x130>
		}
	}

	finishAccess ();
    8702:	|                     jsr 6550 <finishAccess>

	return TRUE;
    8708:	|                     moveq #1,d0
}
    870a:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    870e:	                      lea 84(sp),sp
    8712:	                      rts

00008714 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8714:	                   lea -16(sp),sp
    8718:	                   move.l 28(sp),d0
    871c:	                   move.w d0,d0
    871e:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    8722:	                   movea.l 24(sp),a0
    8726:	                   move.l (a0),d0
    8728:	                   move.l d0,-(sp)
    872a:	                   jsr 17030 <__fixunssfsi>
    8730:	                   addq.l #4,sp
    8732:	                   move.l d0,d0
    8734:	                   movea.l 20(sp),a0
    8738:	                   move.l 8(a0),d1
    873c:	                   move.l d1,d1
    873e:	                   movea.w d0,a0
    8740:	                   suba.w d1,a0
    8742:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    8746:	                   movea.l 24(sp),a0
    874a:	                   move.l 4(a0),d0
    874e:	                   move.l d0,-(sp)
    8750:	                   jsr 17030 <__fixunssfsi>
    8756:	                   addq.l #4,sp
    8758:	                   move.l d0,d0
    875a:	                   movea.l 20(sp),a0
    875e:	                   move.l 12(a0),d1
    8762:	                   move.l d1,d1
    8764:	                   movea.w d0,a0
    8766:	                   suba.w d1,a0
    8768:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    876c:	                   move.w 4(sp),d0
    8770:	                   movea.w d0,a1
    8772:	                   move.w 6(sp),d0
    8776:	                   movea.w d0,a0
    8778:	                   pea 1 <_start+0x1>
    877c:	                   move.l a1,-(sp)
    877e:	                   move.l a0,-(sp)
    8780:	                   move.l 36(sp),-(sp)
    8784:	                   move.l 36(sp),-(sp)
    8788:	                   jsr 25c4 <CstScaleSprite>
    878e:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8792:	                   movea.l 24(sp),a0
    8796:	                   move.l 118(a0),d0
    879a:	                   moveq #8,d1
    879c:	                   and.l d1,d0
    879e:	   /-------------- beq.w 8860 <scaleSprite+0x14c>
		if (single->xhot < 0)
    87a2:	   |               movea.l 20(sp),a0
    87a6:	   |               move.l 8(a0),d0
    87aa:	   |  /----------- bpl.s 87e2 <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    87ac:	   |  |            tst.w 2(sp)
    87b0:	   |  |     /----- beq.s 87c8 <scaleSprite+0xb4>
    87b2:	   |  |     |      movea.l 20(sp),a0
    87b6:	   |  |     |      move.l (a0),d0
    87b8:	   |  |     |      move.l d0,d1
    87ba:	   |  |     |      movea.l 20(sp),a0
    87be:	   |  |     |      move.l 8(a0),d0
    87c2:	   |  |     |      move.l d0,d0
    87c4:	   |  |     |      sub.w d0,d1
    87c6:	   |  |     |  /-- bra.s 87d6 <scaleSprite+0xc2>
    87c8:	   |  |     \--|-> movea.l 20(sp),a0
    87cc:	   |  |        |   move.l 8(a0),d0
    87d0:	   |  |        |   move.l d0,d0
    87d2:	   |  |        |   move.w d0,d1
    87d4:	   |  |        |   addq.w #1,d1
    87d6:	   |  |        \-> movea.w 6(sp),a0
    87da:	   |  |            suba.w d1,a0
    87dc:	   |  |            move.w a0,14(sp)
    87e0:	   |  |  /-------- bra.s 8816 <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    87e2:	   |  \--|-------> tst.w 2(sp)
    87e6:	   |     |  /----- beq.s 8802 <scaleSprite+0xee>
    87e8:	   |     |  |      movea.l 20(sp),a0
    87ec:	   |     |  |      move.l (a0),d0
    87ee:	   |     |  |      move.l d0,d1
    87f0:	   |     |  |      movea.l 20(sp),a0
    87f4:	   |     |  |      move.l 8(a0),d0
    87f8:	   |     |  |      move.l d0,d0
    87fa:	   |     |  |      sub.w d0,d1
    87fc:	   |     |  |      move.w d1,d0
    87fe:	   |     |  |      subq.w #1,d0
    8800:	   |     |  |  /-- bra.s 880c <scaleSprite+0xf8>
    8802:	   |     |  \--|-> movea.l 20(sp),a0
    8806:	   |     |     |   move.l 8(a0),d0
    880a:	   |     |     |   move.l d0,d0
    880c:	   |     |     \-> move.w 6(sp),d1
    8810:	   |     |         sub.w d0,d1
    8812:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8816:	   |     \-------> movea.l 24(sp),a0
    881a:	   |               move.l 24(a0),d0
    881e:	   |               move.l d0,d1
    8820:	   |               movea.l 20(sp),a0
    8824:	   |               move.l 12(a0),d0
    8828:	   |               move.l d0,d0
    882a:	   |               sub.w d0,d1
    882c:	   |               movea.w 4(sp),a0
    8830:	   |               adda.w d1,a0
    8832:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    8836:	   |               movea.l 20(sp),a0
    883a:	   |               move.l (a0),d0
    883c:	   |               move.l d0,d0
    883e:	   |               move.w 14(sp),d1
    8842:	   |               add.w d0,d1
    8844:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    8848:	   |               movea.l 20(sp),a0
    884c:	   |               move.l 4(a0),d0
    8850:	   |               move.l d0,d0
    8852:	   |               movea.w 12(sp),a0
    8856:	   |               adda.w d0,a0
    8858:	   |               move.w a0,8(sp)
    885c:	/--|-------------- bra.w 8932 <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    8860:	|  \-------------> move.l 1a872 <cameraX>,d0
    8866:	|                  move.l d0,d0
    8868:	|                  sub.w d0,6(sp)
		y -= cameraY;
    886c:	|                  move.l 1a876 <cameraY>,d0
    8872:	|                  move.l d0,d0
    8874:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    8878:	|                  movea.l 20(sp),a0
    887c:	|                  move.l 8(a0),d0
    8880:	|     /----------- bpl.s 88b8 <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8882:	|     |            tst.w 2(sp)
    8886:	|     |     /----- beq.s 889e <scaleSprite+0x18a>
    8888:	|     |     |      movea.l 20(sp),a0
    888c:	|     |     |      move.l (a0),d0
    888e:	|     |     |      move.l d0,d1
    8890:	|     |     |      movea.l 20(sp),a0
    8894:	|     |     |      move.l 8(a0),d0
    8898:	|     |     |      move.l d0,d0
    889a:	|     |     |      sub.w d0,d1
    889c:	|     |     |  /-- bra.s 88ac <scaleSprite+0x198>
    889e:	|     |     \--|-> movea.l 20(sp),a0
    88a2:	|     |        |   move.l 8(a0),d0
    88a6:	|     |        |   move.l d0,d0
    88a8:	|     |        |   move.w d0,d1
    88aa:	|     |        |   addq.w #1,d1
    88ac:	|     |        \-> move.w 6(sp),d0
    88b0:	|     |            sub.w d1,d0
    88b2:	|     |            move.w d0,14(sp)
    88b6:	|     |  /-------- bra.s 88ec <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    88b8:	|     \--|-------> tst.w 2(sp)
    88bc:	|        |  /----- beq.s 88d8 <scaleSprite+0x1c4>
    88be:	|        |  |      movea.l 20(sp),a0
    88c2:	|        |  |      move.l (a0),d0
    88c4:	|        |  |      move.l d0,d1
    88c6:	|        |  |      movea.l 20(sp),a0
    88ca:	|        |  |      move.l 8(a0),d0
    88ce:	|        |  |      move.l d0,d0
    88d0:	|        |  |      sub.w d0,d1
    88d2:	|        |  |      move.w d1,d0
    88d4:	|        |  |      subq.w #1,d0
    88d6:	|        |  |  /-- bra.s 88e2 <scaleSprite+0x1ce>
    88d8:	|        |  \--|-> movea.l 20(sp),a0
    88dc:	|        |     |   move.l 8(a0),d0
    88e0:	|        |     |   move.l d0,d0
    88e2:	|        |     \-> move.w 6(sp),d1
    88e6:	|        |         sub.w d0,d1
    88e8:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    88ec:	|        \-------> movea.l 24(sp),a0
    88f0:	|                  move.l 24(a0),d0
    88f4:	|                  move.l d0,d1
    88f6:	|                  movea.l 20(sp),a0
    88fa:	|                  move.l 12(a0),d0
    88fe:	|                  move.l d0,d0
    8900:	|                  sub.w d0,d1
    8902:	|                  movea.w 4(sp),a0
    8906:	|                  adda.w d1,a0
    8908:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    890c:	|                  movea.l 20(sp),a0
    8910:	|                  move.l (a0),d0
    8912:	|                  move.l d0,d0
    8914:	|                  move.w 14(sp),d1
    8918:	|                  add.w d0,d1
    891a:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    891e:	|                  movea.l 20(sp),a0
    8922:	|                  move.l 4(a0),d0
    8926:	|                  move.l d0,d0
    8928:	|                  movea.w 12(sp),a0
    892c:	|                  adda.w d0,a0
    892e:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    8932:	\----------------> move.l 1a760 <input+0xa>,d1
    8938:	                   moveq #0,d0
    893a:	                   move.w 14(sp),d0
    893e:	                   cmp.l d1,d0
    8940:	            /----- bgt.s 8976 <scaleSprite+0x262>
    8942:	            |      move.l 1a760 <input+0xa>,d1
    8948:	            |      moveq #0,d0
    894a:	            |      move.w 10(sp),d0
    894e:	            |      cmp.l d1,d0
    8950:	            +----- blt.s 8976 <scaleSprite+0x262>
    8952:	            |      move.l 1a764 <input+0xe>,d1
    8958:	            |      moveq #0,d0
    895a:	            |      move.w 12(sp),d0
    895e:	            |      cmp.l d1,d0
    8960:	            +----- bgt.s 8976 <scaleSprite+0x262>
    8962:	            |      move.l 1a764 <input+0xe>,d1
    8968:	            |      moveq #0,d0
    896a:	            |      move.w 8(sp),d0
    896e:	            |      cmp.l d1,d0
    8970:	            +----- blt.s 8976 <scaleSprite+0x262>
		return TRUE;
    8972:	            |      moveq #1,d0
    8974:	            |  /-- bra.s 8978 <scaleSprite+0x264>
	}
	return FALSE;
    8976:	            \--|-> clr.w d0
    8978:	               \-> lea 16(sp),sp
    897c:	                   rts

0000897e <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    897e:	    move.l 4(sp),d0
    8982:	/-- bpl.s 8986 <TF_abs+0x8>
    8984:	|   neg.l d0
}
    8986:	\-> rts

00008988 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    8988:	             lea -28(sp),sp
    898c:	             move.l a6,-(sp)
    898e:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    8990:	             move.l #132,28(sp)
    8998:	             clr.l 24(sp)
    899c:	             move.l 1a7a4 <SysBase>,d0
    89a2:	             movea.l d0,a6
    89a4:	             move.l 28(sp),d0
    89a8:	             move.l 24(sp),d1
    89ac:	             jsr -684(a6)
    89b0:	             move.l d0,20(sp)
    89b4:	             move.l 20(sp),d0
    89b8:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    89bc:	         /-- bne.s 89c4 <addPerson+0x3c>
    89be:	         |   clr.w d0
    89c0:	/--------|-- bra.w 8bf4 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    89c4:	|        \-> move.l 48(sp),-(sp)
    89c8:	|            jsr ccf0 <loadObjectType>
    89ce:	|            addq.l #4,sp
    89d0:	|            movea.l 16(sp),a0
    89d4:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    89d8:	|            movea.l 16(sp),a0
    89dc:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    89e4:	|            movea.l 16(sp),a0
    89e8:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    89ec:	|            movea.l 16(sp),a0
    89f0:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    89f4:	|            move.l 44(sp),-(sp)
    89f8:	|            jsr 16cd0 <__floatsisf>
    89fe:	|            addq.l #4,sp
    8a00:	|            move.l d0,d2
    8a02:	|            move.l 40(sp),-(sp)
    8a06:	|            jsr 16cd0 <__floatsisf>
    8a0c:	|            addq.l #4,sp
    8a0e:	|            move.l d2,-(sp)
    8a10:	|            move.l d0,-(sp)
    8a12:	|            move.l 24(sp),-(sp)
    8a16:	|            jsr a4d6 <moveAndScale>
    8a1c:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    8a20:	|            movea.l 16(sp),a0
    8a24:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    8a28:	|            movea.l 16(sp),a0
    8a2c:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    8a32:	|            movea.l 16(sp),a0
    8a36:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    8a3c:	|            movea.l 16(sp),a0
    8a40:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    8a44:	|            movea.l 16(sp),a0
    8a48:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    8a4c:	|            movea.l 16(sp),a0
    8a50:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    8a56:	|            movea.l 16(sp),a0
    8a5a:	|            clr.l 106(a0)
    newPerson->angle = 180;
    8a5e:	|            movea.l 16(sp),a0
    8a62:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    8a6a:	|            movea.l 16(sp),a0
    8a6e:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    8a76:	|            movea.l 16(sp),a0
    8a7a:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    8a7e:	|            movea.l 16(sp),a0
    8a82:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    8a86:	|            movea.l 16(sp),a0
    8a8a:	|            movea.l 114(a0),a0
    8a8e:	|            move.l 24(a0),d0
    8a92:	|            movea.l 16(sp),a0
    8a96:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    8a9a:	|            movea.l 16(sp),a0
    8a9e:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    8aa2:	|            movea.l 16(sp),a0
    8aa6:	|            movea.l 114(a0),a0
    8aaa:	|            move.l 32(a0),d0
    8aae:	|            movea.l 16(sp),a0
    8ab2:	|            move.l d0,122(a0)
    newPerson->r = 0;
    8ab6:	|            movea.l 16(sp),a0
    8aba:	|            clr.b 126(a0)
    newPerson->g = 0;
    8abe:	|            movea.l 16(sp),a0
    8ac2:	|            clr.b 127(a0)
    newPerson->b = 0;
    8ac6:	|            movea.l 16(sp),a0
    8aca:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    8ace:	|            movea.l 16(sp),a0
    8ad2:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    8ad6:	|            movea.l 16(sp),a0
    8ada:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    8ade:	|            movea.l 16(sp),a0
    8ae2:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    8ae8:	|            clr.l -(sp)
    8aea:	|            move.l 20(sp),-(sp)
    8aee:	|            jsr 7a3e <setFrames>
    8af4:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    8af6:	|            movea.l 52(sp),a0
    8afa:	|            movea.l (a0),a0
    8afc:	|            movea.l (a0),a0
    8afe:	|            movea.l 4(a0),a0
    8b02:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    8b06:	|     /----- bpl.s 8b10 <addPerson+0x188>
    8b08:	|     |      move.l 12(sp),d0
    8b0c:	|     |      neg.l d0
    8b0e:	|     |  /-- bra.s 8b12 <addPerson+0x18a>
    8b10:	|     \--|-> moveq #1,d0
    8b12:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    8b16:	|            movea.l 52(sp),a0
    8b1a:	|            movea.l (a0),a0
    8b1c:	|            movea.l (a0),a0
    8b1e:	|            movea.l (a0),a0
    8b20:	|            move.l 8(a0),d0
    8b24:	|            cmp.l 8(sp),d0
    8b28:	|     /----- bgt.s 8b5a <addPerson+0x1d2>
        if (fNumSigned < 0) {
    8b2a:	|     |      tst.l 12(sp)
    8b2e:	|     |  /-- bge.s 8b3c <addPerson+0x1b4>
            newPerson->height = 5;
    8b30:	|     |  |   movea.l 16(sp),a0
    8b34:	|     |  |   moveq #5,d0
    8b36:	|     |  |   move.l d0,20(a0)
    8b3a:	|  /--|--|-- bra.s 8b86 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    8b3c:	|  |  |  \-> movea.l 52(sp),a0
    8b40:	|  |  |      movea.l (a0),a0
    8b42:	|  |  |      movea.l (a0),a0
    8b44:	|  |  |      movea.l (a0),a0
    8b46:	|  |  |      movea.l 16(a0),a0
    8b4a:	|  |  |      move.l 12(a0),d0
    8b4e:	|  |  |      addq.l #5,d0
    8b50:	|  |  |      movea.l 16(sp),a0
    8b54:	|  |  |      move.l d0,20(a0)
    8b58:	|  +--|----- bra.s 8b86 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    8b5a:	|  |  \----> movea.l 52(sp),a0
    8b5e:	|  |         movea.l (a0),a0
    8b60:	|  |         movea.l (a0),a0
    8b62:	|  |         movea.l (a0),a0
    8b64:	|  |         movea.l 16(a0),a0
    8b68:	|  |         move.l 8(sp),d1
    8b6c:	|  |         move.l d1,d0
    8b6e:	|  |         lsl.l #3,d0
    8b70:	|  |         sub.l d1,d0
    8b72:	|  |         add.l d0,d0
    8b74:	|  |         add.l d0,d0
    8b76:	|  |         adda.l d0,a0
    8b78:	|  |         move.l 12(a0),d0
    8b7c:	|  |         addq.l #5,d0
    8b7e:	|  |         movea.l 16(sp),a0
    8b82:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    8b86:	|  \-------> move.l #108572,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    8b8e:	|        /-- bra.s 8b9e <addPerson+0x216>
        changethat = &((*changethat)->next);
    8b90:	|     /--|-> movea.l 32(sp),a0
    8b94:	|     |  |   move.l (a0),d0
    8b96:	|     |  |   moveq #36,d1
    8b98:	|     |  |   add.l d0,d1
    8b9a:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    8b9e:	|     |  \-> movea.l 32(sp),a0
    8ba2:	|     |      move.l (a0),d0
    8ba4:	|     |  /-- beq.s 8bcc <addPerson+0x244>
    8ba6:	|     |  |   movea.l 32(sp),a0
    8baa:	|     |  |   movea.l (a0),a0
    8bac:	|     |  |   move.l 4(a0),d2
    8bb0:	|     |  |   move.l 44(sp),-(sp)
    8bb4:	|     |  |   jsr 16cd0 <__floatsisf>
    8bba:	|     |  |   addq.l #4,sp
    8bbc:	|     |  |   move.l d0,-(sp)
    8bbe:	|     |  |   move.l d2,-(sp)
    8bc0:	|     |  |   jsr 16ef6 <__ltsf2>
    8bc6:	|     |  |   addq.l #8,sp
    8bc8:	|     |  |   tst.l d0
    8bca:	|     \--|-- blt.s 8b90 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    8bcc:	|        \-> movea.l 32(sp),a0
    8bd0:	|            move.l (a0),d0
    8bd2:	|            movea.l 16(sp),a0
    8bd6:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    8bda:	|            movea.l 32(sp),a0
    8bde:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    8be2:	|            movea.l 16(sp),a0
    8be6:	|            move.l 114(a0),d0
    8bea:	|            sne d0
    8bec:	|            neg.b d0
    8bee:	|            move.b d0,d0
    8bf0:	|            andi.w #255,d0
}
    8bf4:	\----------> move.l (sp)+,d2
    8bf6:	             movea.l (sp)+,a6
    8bf8:	             lea 28(sp),sp
    8bfc:	             rts

00008bfe <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    8bfe:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    8c00:	       move.l 8(sp),-(sp)
    8c04:	       jsr 9d8e <findPerson>
    8c0a:	       addq.l #4,sp
    8c0c:	       move.l d0,(sp)
    if (moveMe) {
    8c0e:	/----- beq.s 8c42 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    8c10:	|      movea.l (sp),a0
    8c12:	|      move.l 68(a0),d0
    8c16:	|  /-- beq.s 8c28 <animatePerson+0x2a>
    8c18:	|  |   movea.l (sp),a0
    8c1a:	|  |   move.l 68(a0),d0
    8c1e:	|  |   move.l d0,-(sp)
    8c20:	|  |   jsr 3ff4 <abortFunction>
    8c26:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    8c28:	|  \-> movea.l (sp),a0
    8c2a:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    8c2e:	|      movea.l (sp),a0
    8c30:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    8c34:	|      movea.l (sp),a0
    8c36:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    8c3a:	|      movea.l (sp),a0
    8c3c:	|      move.l 12(sp),72(a0)
    }
}
    8c42:	\----> nop
    8c44:	       addq.l #4,sp
    8c46:	       rts

00008c48 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    8c48:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    8c4a:	       move.l 8(sp),-(sp)
    8c4e:	       jsr 9d8e <findPerson>
    8c54:	       addq.l #4,sp
    8c56:	       move.l d0,(sp)
    if (moveMe) {
    8c58:	/----- beq.s 8c9a <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    8c5a:	|      movea.l (sp),a0
    8c5c:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    8c60:	|      movea.l (sp),a0
    8c62:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    8c68:	|      move.l (sp),-(sp)
    8c6a:	|      jsr a664 <rethinkAngle>
    8c70:	|      addq.l #4,sp
        if (moveMe->walking) {
    8c72:	|      movea.l (sp),a0
    8c74:	|      move.w 64(a0),d0
    8c78:	|  /-- beq.s 8c8c <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    8c7a:	|  |   pea 1 <_start+0x1>
    8c7e:	|  |   move.l 4(sp),-(sp)
    8c82:	|  |   jsr 7a3e <setFrames>
    8c88:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    8c8a:	+--|-- bra.s 8c9a <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    8c8c:	|  \-> clr.l -(sp)
    8c8e:	|      move.l 4(sp),-(sp)
    8c92:	|      jsr 7a3e <setFrames>
    8c98:	|      addq.l #8,sp
}
    8c9a:	\----> nop
    8c9c:	       addq.l #4,sp
    8c9e:	       rts

00008ca0 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    8ca0:	             lea -36(sp),sp
    8ca4:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    8ca6:	             movea.l 44(sp),a0
    8caa:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    8cb0:	             moveq #12,d0
    8cb2:	             move.l d0,28(sp)
    8cb6:	             clr.l 24(sp)
    8cba:	             move.l 1a7a4 <SysBase>,d0
    8cc0:	             movea.l d0,a6
    8cc2:	             move.l 28(sp),d0
    8cc6:	             move.l 24(sp),d1
    8cca:	             jsr -684(a6)
    8cce:	             move.l d0,20(sp)
    8cd2:	             move.l 20(sp),d0
    8cd6:	             move.l d0,16(sp)
	if (!(newAnim)) {
    8cda:	         /-- bne.s 8cf0 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    8cdc:	         |   pea 1873a <PutChar+0x13d2>
    8ce2:	         |   jsr 16894 <KPrintF>
    8ce8:	         |   addq.l #4,sp
		return NULL;
    8cea:	         |   moveq #0,d0
    8cec:	/--------|-- bra.w 8e42 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    8cf0:	|        \-> movea.l 44(sp),a0
    8cf4:	|            move.l (a0),d0
    8cf6:	|            movea.l 16(sp),a0
    8cfa:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    8cfc:	|            movea.l 16(sp),a0
    8d00:	|            movea.l (a0),a0
    8d02:	|            move.l 4(a0),d0
    8d06:	|            addq.l #1,d0
    8d08:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    8d0c:	|            movea.l 16(sp),a0
    8d10:	|            move.l 32(sp),8(a0)

	if (num) {
    8d16:	|  /-------- beq.w 8e36 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    8d1a:	|  |         move.l 32(sp),d1
    8d1e:	|  |         move.l d1,d0
    8d20:	|  |         add.l d0,d0
    8d22:	|  |         add.l d1,d0
    8d24:	|  |         add.l d0,d0
    8d26:	|  |         add.l d0,d0
    8d28:	|  |         move.l d0,12(sp)
    8d2c:	|  |         clr.l 8(sp)
    8d30:	|  |         move.l 1a7a4 <SysBase>,d0
    8d36:	|  |         movea.l d0,a6
    8d38:	|  |         move.l 12(sp),d0
    8d3c:	|  |         move.l 8(sp),d1
    8d40:	|  |         jsr -684(a6)
    8d44:	|  |         move.l d0,4(sp)
    8d48:	|  |         move.l 4(sp),d0
    8d4c:	|  |         movea.l 16(sp),a0
    8d50:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    8d54:	|  |         movea.l 16(sp),a0
    8d58:	|  |         move.l 4(a0),d0
    8d5c:	|  |     /-- bne.s 8d72 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    8d5e:	|  |     |   pea 1873a <PutChar+0x13d2>
    8d64:	|  |     |   jsr 16894 <KPrintF>
    8d6a:	|  |     |   addq.l #4,sp
			return NULL;
    8d6c:	|  |     |   moveq #0,d0
    8d6e:	+--|-----|-- bra.w 8e42 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    8d72:	|  |     \-> clr.l 36(sp)
    8d76:	|  |     /-- bra.w 8e28 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    8d7a:	|  |  /--|-> movea.l 44(sp),a0
    8d7e:	|  |  |  |   movea.l 4(a0),a0
    8d82:	|  |  |  |   move.l 36(sp),d1
    8d86:	|  |  |  |   move.l d1,d0
    8d88:	|  |  |  |   add.l d0,d0
    8d8a:	|  |  |  |   add.l d1,d0
    8d8c:	|  |  |  |   add.l d0,d0
    8d8e:	|  |  |  |   add.l d0,d0
    8d90:	|  |  |  |   lea (0,a0,d0.l),a1
    8d94:	|  |  |  |   movea.l 16(sp),a0
    8d98:	|  |  |  |   movea.l 4(a0),a0
    8d9c:	|  |  |  |   move.l 36(sp),d1
    8da0:	|  |  |  |   move.l d1,d0
    8da2:	|  |  |  |   add.l d0,d0
    8da4:	|  |  |  |   add.l d1,d0
    8da6:	|  |  |  |   add.l d0,d0
    8da8:	|  |  |  |   add.l d0,d0
    8daa:	|  |  |  |   adda.l d0,a0
    8dac:	|  |  |  |   move.l (a1),d0
    8dae:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    8db0:	|  |  |  |   movea.l 44(sp),a0
    8db4:	|  |  |  |   movea.l 4(a0),a0
    8db8:	|  |  |  |   move.l 36(sp),d1
    8dbc:	|  |  |  |   move.l d1,d0
    8dbe:	|  |  |  |   add.l d0,d0
    8dc0:	|  |  |  |   add.l d1,d0
    8dc2:	|  |  |  |   add.l d0,d0
    8dc4:	|  |  |  |   add.l d0,d0
    8dc6:	|  |  |  |   lea (0,a0,d0.l),a1
    8dca:	|  |  |  |   movea.l 16(sp),a0
    8dce:	|  |  |  |   movea.l 4(a0),a0
    8dd2:	|  |  |  |   move.l 36(sp),d1
    8dd6:	|  |  |  |   move.l d1,d0
    8dd8:	|  |  |  |   add.l d0,d0
    8dda:	|  |  |  |   add.l d1,d0
    8ddc:	|  |  |  |   add.l d0,d0
    8dde:	|  |  |  |   add.l d0,d0
    8de0:	|  |  |  |   adda.l d0,a0
    8de2:	|  |  |  |   move.l 4(a1),d0
    8de6:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    8dea:	|  |  |  |   movea.l 44(sp),a0
    8dee:	|  |  |  |   movea.l 4(a0),a0
    8df2:	|  |  |  |   move.l 36(sp),d1
    8df6:	|  |  |  |   move.l d1,d0
    8df8:	|  |  |  |   add.l d0,d0
    8dfa:	|  |  |  |   add.l d1,d0
    8dfc:	|  |  |  |   add.l d0,d0
    8dfe:	|  |  |  |   add.l d0,d0
    8e00:	|  |  |  |   lea (0,a0,d0.l),a1
    8e04:	|  |  |  |   movea.l 16(sp),a0
    8e08:	|  |  |  |   movea.l 4(a0),a0
    8e0c:	|  |  |  |   move.l 36(sp),d1
    8e10:	|  |  |  |   move.l d1,d0
    8e12:	|  |  |  |   add.l d0,d0
    8e14:	|  |  |  |   add.l d1,d0
    8e16:	|  |  |  |   add.l d0,d0
    8e18:	|  |  |  |   add.l d0,d0
    8e1a:	|  |  |  |   adda.l d0,a0
    8e1c:	|  |  |  |   move.l 8(a1),d0
    8e20:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    8e24:	|  |  |  |   addq.l #1,36(sp)
    8e28:	|  |  |  \-> move.l 36(sp),d0
    8e2c:	|  |  |      cmp.l 32(sp),d0
    8e30:	|  |  \----- blt.w 8d7a <copyAnim+0xda>
    8e34:	|  |     /-- bra.s 8e3e <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    8e36:	|  \-----|-> movea.l 16(sp),a0
    8e3a:	|        |   clr.l 4(a0)
	}

	return newAnim;
    8e3e:	|        \-> move.l 16(sp),d0
}
    8e42:	\----------> movea.l (sp)+,a6
    8e44:	             lea 36(sp),sp
    8e48:	             rts

00008e4a <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    8e4a:	                lea -44(sp),sp
    8e4e:	                move.l a6,-(sp)
    8e50:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    8e52:	                moveq #12,d0
    8e54:	                move.l d0,40(sp)
    8e58:	                clr.l 36(sp)
    8e5c:	                move.l 1a7a4 <SysBase>,d0
    8e62:	                movea.l d0,a6
    8e64:	                move.l 40(sp),d0
    8e68:	                move.l 36(sp),d1
    8e6c:	                jsr -684(a6)
    8e70:	                move.l d0,32(sp)
    8e74:	                move.l 32(sp),d0
    8e78:	                move.l d0,28(sp)
	if( !newP) {
    8e7c:	            /-- bne.s 8e92 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    8e7e:	            |   pea 1875b <PutChar+0x13f3>
    8e84:	            |   jsr 16894 <KPrintF>
    8e8a:	            |   addq.l #4,sp
		return NULL;
    8e8c:	            |   moveq #0,d0
    8e8e:	/-----------|-- bra.w 9062 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    8e92:	|           \-> movea.l 28(sp),a0
    8e96:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    8e9c:	|               move.l 56(sp),d1
    8ea0:	|               move.l d1,d0
    8ea2:	|               add.l d0,d0
    8ea4:	|               add.l d1,d0
    8ea6:	|               add.l d0,d0
    8ea8:	|               add.l d0,d0
    8eaa:	|               move.l d0,24(sp)
    8eae:	|               clr.l 20(sp)
    8eb2:	|               move.l 1a7a4 <SysBase>,d0
    8eb8:	|               movea.l d0,a6
    8eba:	|               move.l 24(sp),d0
    8ebe:	|               move.l 20(sp),d1
    8ec2:	|               jsr -684(a6)
    8ec6:	|               move.l d0,16(sp)
    8eca:	|               move.l 16(sp),d0
    8ece:	|               movea.l 28(sp),a0
    8ed2:	|               move.l d0,4(a0)
	if( !newP->frames) {
    8ed6:	|               movea.l 28(sp),a0
    8eda:	|               move.l 4(a0),d0
    8ede:	|           /-- bne.s 8ef4 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    8ee0:	|           |   pea 1875b <PutChar+0x13f3>
    8ee6:	|           |   jsr 16894 <KPrintF>
    8eec:	|           |   addq.l #4,sp
		return NULL;
    8eee:	|           |   moveq #0,d0
    8ef0:	+-----------|-- bra.w 9062 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    8ef4:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    8efa:	|               movea.l 60(sp),a0
    8efe:	|               move.l (a0),44(sp)
	while (a) {
    8f02:	|     /-------- bra.w 9056 <createPersonaAnim+0x20c>
		a --;
    8f06:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    8f0a:	|  |  |         movea.l 28(sp),a0
    8f0e:	|  |  |         movea.l 4(a0),a0
    8f12:	|  |  |         move.l 48(sp),d1
    8f16:	|  |  |         move.l d1,d0
    8f18:	|  |  |         add.l d0,d0
    8f1a:	|  |  |         add.l d1,d0
    8f1c:	|  |  |         add.l d0,d0
    8f1e:	|  |  |         add.l d0,d0
    8f20:	|  |  |         adda.l d0,a0
    8f22:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    8f26:	|  |  |         movea.l 44(sp),a0
    8f2a:	|  |  |         move.l (a0),d0
    8f2c:	|  |  |         moveq #5,d1
    8f2e:	|  |  |         cmp.l d0,d1
    8f30:	|  |  |     /-- bne.s 8f5c <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    8f32:	|  |  |     |   movea.l 28(sp),a0
    8f36:	|  |  |     |   movea.l 4(a0),a0
    8f3a:	|  |  |     |   move.l 48(sp),d1
    8f3e:	|  |  |     |   move.l d1,d0
    8f40:	|  |  |     |   add.l d0,d0
    8f42:	|  |  |     |   add.l d1,d0
    8f44:	|  |  |     |   add.l d0,d0
    8f46:	|  |  |     |   add.l d0,d0
    8f48:	|  |  |     |   lea (0,a0,d0.l),a1
    8f4c:	|  |  |     |   movea.l 44(sp),a0
    8f50:	|  |  |     |   move.l 4(a0),d0
    8f54:	|  |  |     |   move.l d0,8(a1)
    8f58:	|  |  |  /--|-- bra.w 9004 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    8f5c:	|  |  |  |  \-> movea.l 44(sp),a0
    8f60:	|  |  |  |      move.l (a0),d0
    8f62:	|  |  |  |      moveq #2,d1
    8f64:	|  |  |  |      cmp.l d0,d1
    8f66:	|  |  |  |  /-- bne.s 8f92 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    8f68:	|  |  |  |  |   movea.l 44(sp),a0
    8f6c:	|  |  |  |  |   move.l 4(a0),d2
    8f70:	|  |  |  |  |   movea.l 28(sp),a0
    8f74:	|  |  |  |  |   movea.l 4(a0),a0
    8f78:	|  |  |  |  |   move.l 48(sp),d1
    8f7c:	|  |  |  |  |   move.l d1,d0
    8f7e:	|  |  |  |  |   add.l d0,d0
    8f80:	|  |  |  |  |   add.l d1,d0
    8f82:	|  |  |  |  |   add.l d0,d0
    8f84:	|  |  |  |  |   add.l d0,d0
    8f86:	|  |  |  |  |   adda.l d0,a0
    8f88:	|  |  |  |  |   move.l d2,d0
    8f8a:	|  |  |  |  |   neg.l d0
    8f8c:	|  |  |  |  |   move.l d0,8(a0)
    8f90:	|  |  |  +--|-- bra.s 9004 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    8f92:	|  |  |  |  \-> movea.l 44(sp),a0
    8f96:	|  |  |  |      move.l (a0),d0
    8f98:	|  |  |  |      moveq #6,d1
    8f9a:	|  |  |  |      cmp.l d0,d1
    8f9c:	|  |  |  |  /-- bne.s 8fe4 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    8f9e:	|  |  |  |  |   movea.l 44(sp),a0
    8fa2:	|  |  |  |  |   movea.l 4(a0),a0
    8fa6:	|  |  |  |  |   move.l (a0),d0
    8fa8:	|  |  |  |  |   move.l d0,-(sp)
    8faa:	|  |  |  |  |   pea 1 <_start+0x1>
    8fae:	|  |  |  |  |   lea 20(sp),a0
    8fb2:	|  |  |  |  |   move.l a0,-(sp)
    8fb4:	|  |  |  |  |   jsr 13e96 <getValueType>
    8fba:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    8fbe:	|  |  |  |  |   movea.l 44(sp),a0
    8fc2:	|  |  |  |  |   movea.l 4(a0),a0
    8fc6:	|  |  |  |  |   movea.l (a0),a0
    8fc8:	|  |  |  |  |   move.l 8(a0),d0
    8fcc:	|  |  |  |  |   move.l d0,-(sp)
    8fce:	|  |  |  |  |   pea 1 <_start+0x1>
    8fd2:	|  |  |  |  |   lea 16(sp),a0
    8fd6:	|  |  |  |  |   move.l a0,-(sp)
    8fd8:	|  |  |  |  |   jsr 13e96 <getValueType>
    8fde:	|  |  |  |  |   lea 12(sp),sp
    8fe2:	|  |  |  +--|-- bra.s 9004 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    8fe4:	|  |  |  |  \-> move.l 44(sp),d0
    8fe8:	|  |  |  |      move.l d0,-(sp)
    8fea:	|  |  |  |      pea 1 <_start+0x1>
    8fee:	|  |  |  |      lea 20(sp),a0
    8ff2:	|  |  |  |      move.l a0,-(sp)
    8ff4:	|  |  |  |      jsr 13e96 <getValueType>
    8ffa:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    8ffe:	|  |  |  |      moveq #1,d0
    9000:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    9004:	|  |  |  \----> move.l 60(sp),-(sp)
    9008:	|  |  |         jsr 1481a <trimStack>
    900e:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    9010:	|  |  |         movea.l 28(sp),a0
    9014:	|  |  |         movea.l 4(a0),a0
    9018:	|  |  |         move.l 48(sp),d1
    901c:	|  |  |         move.l d1,d0
    901e:	|  |  |         add.l d0,d0
    9020:	|  |  |         add.l d1,d0
    9022:	|  |  |         add.l d0,d0
    9024:	|  |  |         add.l d0,d0
    9026:	|  |  |         adda.l d0,a0
    9028:	|  |  |         move.l 12(sp),d0
    902c:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    902e:	|  |  |         movea.l 28(sp),a0
    9032:	|  |  |         movea.l 4(a0),a0
    9036:	|  |  |         move.l 48(sp),d1
    903a:	|  |  |         move.l d1,d0
    903c:	|  |  |         add.l d0,d0
    903e:	|  |  |         add.l d1,d0
    9040:	|  |  |         add.l d0,d0
    9042:	|  |  |         add.l d0,d0
    9044:	|  |  |         adda.l d0,a0
    9046:	|  |  |         move.l 8(sp),d0
    904a:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    904e:	|  |  |         movea.l 60(sp),a0
    9052:	|  |  |         move.l (a0),44(sp)
	while (a) {
    9056:	|  |  \-------> tst.l 48(sp)
    905a:	|  \----------- bne.w 8f06 <createPersonaAnim+0xbc>
	}

	return newP;
    905e:	|               move.l 28(sp),d0
}
    9062:	\-------------> move.l (sp)+,d2
    9064:	                movea.l (sp)+,a6
    9066:	                lea 44(sp),sp
    906a:	                rts

0000906c <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    906c:	       lea -12(sp),sp
    9070:	       move.l a6,-(sp)

	if(orig->theSprites)
    9072:	       movea.l 20(sp),a0
    9076:	       move.l (a0),d0
    9078:	   /-- beq.s 90a2 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    907a:	   |   movea.l 20(sp),a0
    907e:	   |   movea.l (a0),a0
    9080:	   |   move.l 4(a0),d0
    9084:	   |   subq.l #1,d0
    9086:	   |   move.l d0,4(a0)
    908a:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9090:	   +-- bne.s 90a2 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9092:	   |   movea.l 20(sp),a0
    9096:	   |   move.l (a0),d0
    9098:	   |   move.l d0,-(sp)
    909a:	   |   jsr 81de <forgetSpriteBank>
    90a0:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    90a2:	   \-> tst.l 20(sp)
    90a6:	/----- beq.s 90e6 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    90a8:	|      movea.l 20(sp),a0
    90ac:	|      move.l 8(a0),d0
    90b0:	|  /-- beq.s 90cc <deleteAnim+0x60>
			FreeVec( orig->frames);
    90b2:	|  |   movea.l 20(sp),a0
    90b6:	|  |   move.l 4(a0),8(sp)
    90bc:	|  |   move.l 1a7a4 <SysBase>,d0
    90c2:	|  |   movea.l d0,a6
    90c4:	|  |   movea.l 8(sp),a1
    90c8:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    90cc:	|  \-> move.l 20(sp),4(sp)
    90d2:	|      move.l 1a7a4 <SysBase>,d0
    90d8:	|      movea.l d0,a6
    90da:	|      movea.l 4(sp),a1
    90de:	|      jsr -690(a6)
		orig = NULL;
    90e2:	|      clr.l 20(sp)
	}	
	
}
    90e6:	\----> nop
    90e8:	       movea.l (sp)+,a6
    90ea:	       lea 12(sp),sp
    90ee:	       rts

000090f0 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    90f0:	          lea -124(sp),sp
    90f4:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    90f8:	          movea.l 152(sp),a0
    90fc:	          move.l 56(a0),d1
    9100:	          movea.l 152(sp),a0
    9104:	          move.l 60(a0),d0
    9108:	          cmp.l d1,d0
    910a:	      /-- bne.s 913a <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    910c:	      |   movea.l 152(sp),a0
    9110:	      |   moveq #-1,d0
    9112:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    9116:	      |   movea.l 152(sp),a0
    911a:	      |   move.l 40(a0),d0
    911e:	      |   movea.l 152(sp),a0
    9122:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    9126:	      |   movea.l 152(sp),a0
    912a:	      |   move.l 44(a0),d0
    912e:	      |   movea.l 152(sp),a0
    9132:	      |   move.l d0,52(a0)
    9136:	   /--|-- bra.w 96a0 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    913a:	   |  \-> movea.l 1a8d4 <currentFloor>,a0
    9140:	   |      move.l 16(a0),d1
    9144:	   |      movea.l 152(sp),a0
    9148:	   |      move.l 56(a0),d0
    914c:	   |      add.l d0,d0
    914e:	   |      add.l d0,d0
    9150:	   |      movea.l d1,a0
    9152:	   |      adda.l d0,a0
    9154:	   |      move.l (a0),d1
    9156:	   |      movea.l 152(sp),a0
    915a:	   |      move.l 60(a0),d0
    915e:	   |      add.l d0,d0
    9160:	   |      add.l d0,d0
    9162:	   |      movea.l d1,a0
    9164:	   |      adda.l d0,a0
    9166:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    916a:	   |      moveq #-1,d0
    916c:	   |      cmp.l 144(sp),d0
    9170:	   |  /-- bne.s 9178 <doBorderStuff+0x88>
    9172:	   |  |   clr.w d0
    9174:	/--|--|-- bra.w 97a0 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9178:	|  |  \-> movea.l 1a8d4 <currentFloor>,a0
    917e:	|  |      move.l 12(a0),d1
    9182:	|  |      move.l 144(sp),d0
    9186:	|  |      lsl.l #3,d0
    9188:	|  |      add.l d0,d1
    918a:	|  |      movea.l 1a8d4 <currentFloor>,a0
    9190:	|  |      movea.l 12(a0),a1
    9194:	|  |      movea.l 152(sp),a0
    9198:	|  |      move.l 56(a0),d0
    919c:	|  |      lsl.l #3,d0
    919e:	|  |      add.l a1,d0
    91a0:	|  |      lea 40(sp),a0
    91a4:	|  |      move.l a0,-(sp)
    91a6:	|  |      lea 48(sp),a0
    91aa:	|  |      move.l a0,-(sp)
    91ac:	|  |      move.l d1,-(sp)
    91ae:	|  |      move.l d0,-(sp)
    91b0:	|  |      jsr 15b16 <getMatchingCorners>
    91b6:	|  |      lea 16(sp),sp
    91ba:	|  |      tst.w d0
    91bc:	|  |  /-- bne.s 91d2 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    91be:	|  |  |   pea 18785 <PutChar+0x141d>
    91c4:	|  |  |   jsr 16894 <KPrintF>
    91ca:	|  |  |   addq.l #4,sp
            return FALSE;
    91cc:	|  |  |   clr.w d0
    91ce:	+--|--|-- bra.w 97a0 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    91d2:	|  |  \-> movea.l 152(sp),a0
    91d6:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    91dc:	|  |      movea.l 152(sp),a0
    91e0:	|  |      move.l (a0),d0
    91e2:	|  |      move.l d0,-(sp)
    91e4:	|  |      jsr 16c68 <__fixsfsi>
    91ea:	|  |      addq.l #4,sp
    91ec:	|  |      move.l d0,140(sp)
    91f0:	|  |      movea.l 152(sp),a0
    91f4:	|  |      move.l 4(a0),d0
    91f8:	|  |      move.l d0,-(sp)
    91fa:	|  |      jsr 16c68 <__fixsfsi>
    9200:	|  |      addq.l #4,sp
    9202:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9206:	|  |      movea.l 152(sp),a0
    920a:	|  |      move.l 40(a0),132(sp)
    9210:	|  |      movea.l 152(sp),a0
    9214:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    921a:	|  |      movea.l 1a8d4 <currentFloor>,a0
    9220:	|  |      move.l 4(a0),d1
    9224:	|  |      move.l 44(sp),d0
    9228:	|  |      lsl.l #3,d0
    922a:	|  |      movea.l d1,a0
    922c:	|  |      adda.l d0,a0
    922e:	|  |      move.l (a0),124(sp)
    9232:	|  |      movea.l 1a8d4 <currentFloor>,a0
    9238:	|  |      move.l 4(a0),d1
    923c:	|  |      move.l 44(sp),d0
    9240:	|  |      lsl.l #3,d0
    9242:	|  |      movea.l d1,a0
    9244:	|  |      adda.l d0,a0
    9246:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    924c:	|  |      movea.l 1a8d4 <currentFloor>,a0
    9252:	|  |      move.l 4(a0),d1
    9256:	|  |      move.l 40(sp),d0
    925a:	|  |      lsl.l #3,d0
    925c:	|  |      movea.l d1,a0
    925e:	|  |      adda.l d0,a0
    9260:	|  |      move.l (a0),116(sp)
    9264:	|  |      movea.l 1a8d4 <currentFloor>,a0
    926a:	|  |      move.l 4(a0),d1
    926e:	|  |      move.l 40(sp),d0
    9272:	|  |      lsl.l #3,d0
    9274:	|  |      movea.l d1,a0
    9276:	|  |      adda.l d0,a0
    9278:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    927e:	|  |      move.l 140(sp),d0
    9282:	|  |      sub.l 132(sp),d0
    9286:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    928a:	|  |      move.l 136(sp),d0
    928e:	|  |      sub.l 128(sp),d0
    9292:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9296:	|  |      move.l 116(sp),d0
    929a:	|  |      sub.l 124(sp),d0
    929e:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    92a2:	|  |      move.l 112(sp),d0
    92a6:	|  |      sub.l 120(sp),d0
    92aa:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    92ae:	|  |      move.l 124(sp),d0
    92b2:	|  |      sub.l 140(sp),d0
    92b6:	|  |      move.l 104(sp),-(sp)
    92ba:	|  |      move.l d0,-(sp)
    92bc:	|  |      jsr 17252 <__mulsi3>
    92c2:	|  |      addq.l #8,sp
    92c4:	|  |      move.l d0,d2
    92c6:	|  |      move.l 120(sp),d0
    92ca:	|  |      sub.l 136(sp),d0
    92ce:	|  |      move.l 108(sp),-(sp)
    92d2:	|  |      move.l d0,-(sp)
    92d4:	|  |      jsr 17252 <__mulsi3>
    92da:	|  |      addq.l #8,sp
    92dc:	|  |      move.l d2,d1
    92de:	|  |      sub.l d0,d1
    92e0:	|  |      move.l d1,-(sp)
    92e2:	|  |      jsr 16c90 <__floatsidf>
    92e8:	|  |      addq.l #4,sp
    92ea:	|  |      move.l d0,32(sp)
    92ee:	|  |      move.l d1,36(sp)
    92f2:	|  |      move.l 32(sp),88(sp)
    92f8:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    92fe:	|  |      move.l 96(sp),-(sp)
    9302:	|  |      move.l 112(sp),-(sp)
    9306:	|  |      jsr 17252 <__mulsi3>
    930c:	|  |      addq.l #8,sp
    930e:	|  |      move.l d0,d2
    9310:	|  |      move.l 100(sp),-(sp)
    9314:	|  |      move.l 108(sp),-(sp)
    9318:	|  |      jsr 17252 <__mulsi3>
    931e:	|  |      addq.l #8,sp
    9320:	|  |      move.l d2,d1
    9322:	|  |      sub.l d0,d1
    9324:	|  |      move.l d1,-(sp)
    9326:	|  |      jsr 16c90 <__floatsidf>
    932c:	|  |      addq.l #4,sp
    932e:	|  |      move.l d1,-(sp)
    9330:	|  |      move.l d0,-(sp)
    9332:	|  |      move.l 100(sp),-(sp)
    9336:	|  |      move.l 100(sp),-(sp)
    933a:	|  |      jsr 16b1a <__divdf3>
    9340:	|  |      lea 16(sp),sp
    9344:	|  |      move.l d0,24(sp)
    9348:	|  |      move.l d1,28(sp)
    934c:	|  |      move.l 24(sp),88(sp)
    9352:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9358:	|  |      clr.l -(sp)
    935a:	|  |      clr.l -(sp)
    935c:	|  |      move.l 100(sp),-(sp)
    9360:	|  |      move.l 100(sp),-(sp)
    9364:	|  |      jsr 16dee <__gtdf2>
    936a:	|  |      lea 16(sp),sp
    936e:	|  |      tst.l d0
    9370:	|  |  /-- ble.w 9448 <doBorderStuff+0x358>
    9374:	|  |  |   clr.l -(sp)
    9376:	|  |  |   move.l #1072693248,-(sp)
    937c:	|  |  |   move.l 100(sp),-(sp)
    9380:	|  |  |   move.l 100(sp),-(sp)
    9384:	|  |  |   jsr 16ea8 <__ltdf2>
    938a:	|  |  |   lea 16(sp),sp
    938e:	|  |  |   tst.l d0
    9390:	|  |  +-- bge.w 9448 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9394:	|  |  |   move.l 124(sp),-(sp)
    9398:	|  |  |   jsr 16c90 <__floatsidf>
    939e:	|  |  |   addq.l #4,sp
    93a0:	|  |  |   move.l d0,d2
    93a2:	|  |  |   move.l d1,d3
    93a4:	|  |  |   move.l 100(sp),-(sp)
    93a8:	|  |  |   jsr 16c90 <__floatsidf>
    93ae:	|  |  |   addq.l #4,sp
    93b0:	|  |  |   move.l 92(sp),-(sp)
    93b4:	|  |  |   move.l 92(sp),-(sp)
    93b8:	|  |  |   move.l d1,-(sp)
    93ba:	|  |  |   move.l d0,-(sp)
    93bc:	|  |  |   jsr 16d20 <__muldf3>
    93c2:	|  |  |   lea 16(sp),sp
    93c6:	|  |  |   move.l d1,-(sp)
    93c8:	|  |  |   move.l d0,-(sp)
    93ca:	|  |  |   move.l d3,-(sp)
    93cc:	|  |  |   move.l d2,-(sp)
    93ce:	|  |  |   jsr 16ab8 <__adddf3>
    93d4:	|  |  |   lea 16(sp),sp
    93d8:	|  |  |   move.l d1,-(sp)
    93da:	|  |  |   move.l d0,-(sp)
    93dc:	|  |  |   jsr 16c28 <__fixdfsi>
    93e2:	|  |  |   addq.l #8,sp
    93e4:	|  |  |   movea.l 152(sp),a0
    93e8:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    93ec:	|  |  |   move.l 120(sp),-(sp)
    93f0:	|  |  |   jsr 16c90 <__floatsidf>
    93f6:	|  |  |   addq.l #4,sp
    93f8:	|  |  |   move.l d0,d2
    93fa:	|  |  |   move.l d1,d3
    93fc:	|  |  |   move.l 96(sp),-(sp)
    9400:	|  |  |   jsr 16c90 <__floatsidf>
    9406:	|  |  |   addq.l #4,sp
    9408:	|  |  |   move.l 92(sp),-(sp)
    940c:	|  |  |   move.l 92(sp),-(sp)
    9410:	|  |  |   move.l d1,-(sp)
    9412:	|  |  |   move.l d0,-(sp)
    9414:	|  |  |   jsr 16d20 <__muldf3>
    941a:	|  |  |   lea 16(sp),sp
    941e:	|  |  |   move.l d1,-(sp)
    9420:	|  |  |   move.l d0,-(sp)
    9422:	|  |  |   move.l d3,-(sp)
    9424:	|  |  |   move.l d2,-(sp)
    9426:	|  |  |   jsr 16ab8 <__adddf3>
    942c:	|  |  |   lea 16(sp),sp
    9430:	|  |  |   move.l d1,-(sp)
    9432:	|  |  |   move.l d0,-(sp)
    9434:	|  |  |   jsr 16c28 <__fixdfsi>
    943a:	|  |  |   addq.l #8,sp
    943c:	|  |  |   movea.l 152(sp),a0
    9440:	|  |  |   move.l d0,52(a0)
    9444:	|  +--|-- bra.w 96a0 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9448:	|  |  \-> move.l 140(sp),d0
    944c:	|  |      sub.l 124(sp),d0
    9450:	|  |      move.l d0,84(sp)
    9454:	|  |      move.l 140(sp),d0
    9458:	|  |      sub.l 116(sp),d0
    945c:	|  |      move.l d0,80(sp)
    9460:	|  |      move.l 132(sp),d0
    9464:	|  |      sub.l 124(sp),d0
    9468:	|  |      move.l d0,76(sp)
    946c:	|  |      move.l 132(sp),d0
    9470:	|  |      sub.l 116(sp),d0
    9474:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9478:	|  |      move.l 136(sp),d0
    947c:	|  |      sub.l 120(sp),d0
    9480:	|  |      move.l d0,68(sp)
    9484:	|  |      move.l 136(sp),d0
    9488:	|  |      sub.l 112(sp),d0
    948c:	|  |      move.l d0,64(sp)
    9490:	|  |      move.l 128(sp),d0
    9494:	|  |      sub.l 120(sp),d0
    9498:	|  |      move.l d0,60(sp)
    949c:	|  |      move.l 128(sp),d0
    94a0:	|  |      sub.l 112(sp),d0
    94a4:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    94a8:	|  |      move.l 84(sp),-(sp)
    94ac:	|  |      move.l 88(sp),-(sp)
    94b0:	|  |      jsr 17252 <__mulsi3>
    94b6:	|  |      addq.l #8,sp
    94b8:	|  |      move.l d0,84(sp)
    94bc:	|  |      move.l 80(sp),-(sp)
    94c0:	|  |      move.l 84(sp),-(sp)
    94c4:	|  |      jsr 17252 <__mulsi3>
    94ca:	|  |      addq.l #8,sp
    94cc:	|  |      move.l d0,80(sp)
    94d0:	|  |      move.l 76(sp),-(sp)
    94d4:	|  |      move.l 80(sp),-(sp)
    94d8:	|  |      jsr 17252 <__mulsi3>
    94de:	|  |      addq.l #8,sp
    94e0:	|  |      move.l d0,76(sp)
    94e4:	|  |      move.l 72(sp),-(sp)
    94e8:	|  |      move.l 76(sp),-(sp)
    94ec:	|  |      jsr 17252 <__mulsi3>
    94f2:	|  |      addq.l #8,sp
    94f4:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    94f8:	|  |      move.l 68(sp),-(sp)
    94fc:	|  |      move.l 72(sp),-(sp)
    9500:	|  |      jsr 17252 <__mulsi3>
    9506:	|  |      addq.l #8,sp
    9508:	|  |      move.l d0,68(sp)
    950c:	|  |      move.l 64(sp),-(sp)
    9510:	|  |      move.l 68(sp),-(sp)
    9514:	|  |      jsr 17252 <__mulsi3>
    951a:	|  |      addq.l #8,sp
    951c:	|  |      move.l d0,64(sp)
    9520:	|  |      move.l 60(sp),-(sp)
    9524:	|  |      move.l 64(sp),-(sp)
    9528:	|  |      jsr 17252 <__mulsi3>
    952e:	|  |      addq.l #8,sp
    9530:	|  |      move.l d0,60(sp)
    9534:	|  |      move.l 56(sp),-(sp)
    9538:	|  |      move.l 60(sp),-(sp)
    953c:	|  |      jsr 17252 <__mulsi3>
    9542:	|  |      addq.l #8,sp
    9544:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9548:	|  |      move.l 84(sp),-(sp)
    954c:	|  |      jsr 16c90 <__floatsidf>
    9552:	|  |      addq.l #4,sp
    9554:	|  |      move.l d0,d2
    9556:	|  |      move.l d1,d3
    9558:	|  |      move.l 68(sp),-(sp)
    955c:	|  |      jsr 16c90 <__floatsidf>
    9562:	|  |      addq.l #4,sp
    9564:	|  |      move.l d1,-(sp)
    9566:	|  |      move.l d0,-(sp)
    9568:	|  |      move.l d3,-(sp)
    956a:	|  |      move.l d2,-(sp)
    956c:	|  |      jsr 16ab8 <__adddf3>
    9572:	|  |      lea 16(sp),sp
    9576:	|  |      move.l d1,-(sp)
    9578:	|  |      move.l d0,-(sp)
    957a:	|  |      jsr 17208 <sqrt>
    9580:	|  |      addq.l #8,sp
    9582:	|  |      move.l d0,d2
    9584:	|  |      move.l d1,d3
    9586:	|  |      move.l 76(sp),-(sp)
    958a:	|  |      jsr 16c90 <__floatsidf>
    9590:	|  |      addq.l #4,sp
    9592:	|  |      move.l d0,d4
    9594:	|  |      move.l d1,d5
    9596:	|  |      move.l 60(sp),-(sp)
    959a:	|  |      jsr 16c90 <__floatsidf>
    95a0:	|  |      addq.l #4,sp
    95a2:	|  |      move.l d1,-(sp)
    95a4:	|  |      move.l d0,-(sp)
    95a6:	|  |      move.l d5,-(sp)
    95a8:	|  |      move.l d4,-(sp)
    95aa:	|  |      jsr 16ab8 <__adddf3>
    95b0:	|  |      lea 16(sp),sp
    95b4:	|  |      move.l d1,-(sp)
    95b6:	|  |      move.l d0,-(sp)
    95b8:	|  |      jsr 17208 <sqrt>
    95be:	|  |      addq.l #8,sp
    95c0:	|  |      move.l d1,-(sp)
    95c2:	|  |      move.l d0,-(sp)
    95c4:	|  |      move.l d3,-(sp)
    95c6:	|  |      move.l d2,-(sp)
    95c8:	|  |      jsr 16ab8 <__adddf3>
    95ce:	|  |      lea 16(sp),sp
    95d2:	|  |      move.l d0,d2
    95d4:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    95d6:	|  |      move.l 80(sp),-(sp)
    95da:	|  |      jsr 16c90 <__floatsidf>
    95e0:	|  |      addq.l #4,sp
    95e2:	|  |      move.l d0,d4
    95e4:	|  |      move.l d1,d5
    95e6:	|  |      move.l 64(sp),-(sp)
    95ea:	|  |      jsr 16c90 <__floatsidf>
    95f0:	|  |      addq.l #4,sp
    95f2:	|  |      move.l d1,-(sp)
    95f4:	|  |      move.l d0,-(sp)
    95f6:	|  |      move.l d5,-(sp)
    95f8:	|  |      move.l d4,-(sp)
    95fa:	|  |      jsr 16ab8 <__adddf3>
    9600:	|  |      lea 16(sp),sp
    9604:	|  |      move.l d1,-(sp)
    9606:	|  |      move.l d0,-(sp)
    9608:	|  |      jsr 17208 <sqrt>
    960e:	|  |      addq.l #8,sp
    9610:	|  |      move.l d0,d4
    9612:	|  |      move.l d1,d5
    9614:	|  |      move.l 72(sp),-(sp)
    9618:	|  |      jsr 16c90 <__floatsidf>
    961e:	|  |      addq.l #4,sp
    9620:	|  |      move.l d0,d6
    9622:	|  |      move.l d1,d7
    9624:	|  |      move.l 56(sp),-(sp)
    9628:	|  |      jsr 16c90 <__floatsidf>
    962e:	|  |      addq.l #4,sp
    9630:	|  |      move.l d1,-(sp)
    9632:	|  |      move.l d0,-(sp)
    9634:	|  |      move.l d7,-(sp)
    9636:	|  |      move.l d6,-(sp)
    9638:	|  |      jsr 16ab8 <__adddf3>
    963e:	|  |      lea 16(sp),sp
    9642:	|  |      move.l d1,-(sp)
    9644:	|  |      move.l d0,-(sp)
    9646:	|  |      jsr 17208 <sqrt>
    964c:	|  |      addq.l #8,sp
    964e:	|  |      move.l d1,-(sp)
    9650:	|  |      move.l d0,-(sp)
    9652:	|  |      move.l d5,-(sp)
    9654:	|  |      move.l d4,-(sp)
    9656:	|  |      jsr 16ab8 <__adddf3>
    965c:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9660:	|  |      move.l d1,-(sp)
    9662:	|  |      move.l d0,-(sp)
    9664:	|  |      move.l d3,-(sp)
    9666:	|  |      move.l d2,-(sp)
    9668:	|  |      jsr 16ea8 <__ltdf2>
    966e:	|  |      lea 16(sp),sp
    9672:	|  |      tst.l d0
    9674:	|  |  /-- bge.s 968c <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9676:	|  |  |   movea.l 152(sp),a0
    967a:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9680:	|  |  |   movea.l 152(sp),a0
    9684:	|  |  |   move.l 120(sp),52(a0)
    968a:	|  +--|-- bra.s 96a0 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    968c:	|  |  \-> movea.l 152(sp),a0
    9690:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9696:	|  |      movea.l 152(sp),a0
    969a:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    96a0:	|  \----> movea.l 152(sp),a0
    96a4:	|         move.l 52(a0),d0
    96a8:	|         move.l d0,-(sp)
    96aa:	|         jsr 16cd0 <__floatsisf>
    96b0:	|         addq.l #4,sp
    96b2:	|         move.l d0,d1
    96b4:	|         movea.l 152(sp),a0
    96b8:	|         move.l 4(a0),d0
    96bc:	|         move.l d0,-(sp)
    96be:	|         move.l d1,-(sp)
    96c0:	|         jsr 16fc4 <__subsf3>
    96c6:	|         addq.l #8,sp
    96c8:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    96cc:	|         movea.l 152(sp),a0
    96d0:	|         move.l (a0),d2
    96d2:	|         movea.l 152(sp),a0
    96d6:	|         move.l 48(a0),d0
    96da:	|         move.l d0,-(sp)
    96dc:	|         jsr 16cd0 <__floatsisf>
    96e2:	|         addq.l #4,sp
    96e4:	|         move.l d0,-(sp)
    96e6:	|         move.l d2,-(sp)
    96e8:	|         jsr 16fc4 <__subsf3>
    96ee:	|         addq.l #8,sp
    96f0:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    96f4:	|         clr.l -(sp)
    96f6:	|         move.l 52(sp),-(sp)
    96fa:	|         jsr 16f2c <__nesf2>
    9700:	|         addq.l #8,sp
    9702:	|         tst.l d0
    9704:	|     /-- bne.s 9718 <doBorderStuff+0x628>
    9706:	|     |   clr.l -(sp)
    9708:	|     |   move.l 56(sp),-(sp)
    970c:	|     |   jsr 16f2c <__nesf2>
    9712:	|     |   addq.l #8,sp
    9714:	|     |   tst.l d0
    9716:	|  /--|-- beq.s 978e <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9718:	|  |  \-> move.l 52(sp),d0
    971c:	|  |      move.l d0,-(sp)
    971e:	|  |      move.l d0,-(sp)
    9720:	|  |      jsr 16a82 <__addsf3>
    9726:	|  |      addq.l #8,sp
    9728:	|  |      move.l d0,-(sp)
    972a:	|  |      move.l 52(sp),-(sp)
    972e:	|  |      jsr 17058 <atan2f>
    9734:	|  |      addq.l #8,sp
    9736:	|  |      move.l d0,-(sp)
    9738:	|  |      jsr 16be8 <__extendsfdf2>
    973e:	|  |      addq.l #4,sp
    9740:	|  |      move.l #-1540411785,-(sp)
    9746:	|  |      move.l #1078765033,-(sp)
    974c:	|  |      move.l d1,-(sp)
    974e:	|  |      move.l d0,-(sp)
    9750:	|  |      jsr 16d20 <__muldf3>
    9756:	|  |      lea 16(sp),sp
    975a:	|  |      clr.l -(sp)
    975c:	|  |      move.l #1080459264,-(sp)
    9762:	|  |      move.l d1,-(sp)
    9764:	|  |      move.l d0,-(sp)
    9766:	|  |      jsr 16ab8 <__adddf3>
    976c:	|  |      lea 16(sp),sp
    9770:	|  |      move.l d1,-(sp)
    9772:	|  |      move.l d0,-(sp)
    9774:	|  |      jsr 16c28 <__fixdfsi>
    977a:	|  |      addq.l #8,sp
    977c:	|  |      movea.l 152(sp),a0
    9780:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9784:	|  |      movea.l 152(sp),a0
    9788:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    978e:	|  \----> pea 1 <_start+0x1>
    9792:	|         move.l 156(sp),-(sp)
    9796:	|         jsr 7a3e <setFrames>
    979c:	|         addq.l #8,sp
    return TRUE;
    979e:	|         moveq #1,d0
}
    97a0:	\-------> movem.l (sp)+,d2-d7
    97a4:	          lea 124(sp),sp
    97a8:	          rts

000097aa <drawPeople>:

void drawPeople () {
    97aa:	                   lea -24(sp),sp
    97ae:	                   move.l d2,-(sp)

	shufflePeople ();
    97b0:	                   jsr b246 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    97b6:	                   move.l 1a81c <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    97be:	                   clr.l 20(sp)
	overRegion = NULL;
    97c2:	                   clr.l 1a8cc <overRegion>

	while (thisPerson) {
    97c8:	   /-------------- bra.w 9d7a <drawPeople+0x5d0>
		if (thisPerson -> show) {
    97cc:	/--|-------------> movea.l 24(sp),a0
    97d0:	|  |               move.w 104(a0),d0
    97d4:	|  |  /----------- beq.w 9b2e <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    97d8:	|  |  |            movea.l 24(sp),a0
    97dc:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    97e2:	|  |  |            movea.l 24(sp),a0
    97e6:	|  |  |            move.l 76(a0),d0
    97ea:	|  |  |            cmp.l 20(sp),d0
    97ee:	|  |  |  /-------- beq.w 99bc <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    97f2:	|  |  |  |         movea.l 24(sp),a0
    97f6:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    97fa:	|  |  |  |         movea.l 24(sp),a0
    97fe:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    9804:	|  |  |  |         movea.l 24(sp),a0
    9808:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    980c:	|  |  |  |         movea.l 20(sp),a0
    9810:	|  |  |  |         movea.l 4(a0),a0
    9814:	|  |  |  |         move.l 4(a0),d0
    9818:	|  |  |  |         movea.l 24(sp),a0
    981c:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9820:	|  |  |  |         movea.l 20(sp),a0
    9824:	|  |  |  |         movea.l 4(a0),a1
    9828:	|  |  |  |         movea.l 24(sp),a0
    982c:	|  |  |  |         move.l 84(a0),d0
    9830:	|  |  |  |         move.l d0,d1
    9832:	|  |  |  |         move.l d1,d0
    9834:	|  |  |  |         add.l d0,d0
    9836:	|  |  |  |         add.l d1,d0
    9838:	|  |  |  |         add.l d0,d0
    983a:	|  |  |  |         add.l d0,d0
    983c:	|  |  |  |         lea (0,a1,d0.l),a0
    9840:	|  |  |  |         move.l 8(a0),d0
    9844:	|  |  |  |     /-- ble.w 98e6 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9848:	|  |  |  |     |   movea.l 20(sp),a0
    984c:	|  |  |  |     |   movea.l 4(a0),a1
    9850:	|  |  |  |     |   movea.l 24(sp),a0
    9854:	|  |  |  |     |   move.l 84(a0),d0
    9858:	|  |  |  |     |   move.l d0,d1
    985a:	|  |  |  |     |   move.l d1,d0
    985c:	|  |  |  |     |   add.l d0,d0
    985e:	|  |  |  |     |   add.l d1,d0
    9860:	|  |  |  |     |   add.l d0,d0
    9862:	|  |  |  |     |   add.l d0,d0
    9864:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9868:	|  |  |  |     |   move.l 8(a0),d0
    986c:	|  |  |  |     |   clr.l -(sp)
    986e:	|  |  |  |     |   move.l d0,-(sp)
    9870:	|  |  |  |     |   jsr c8ca <startSound>
    9876:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9878:	|  |  |  |     |   movea.l 24(sp),a0
    987c:	|  |  |  |     |   move.l 84(a0),d0
    9880:	|  |  |  |     |   addq.l #1,d0
    9882:	|  |  |  |     |   movea.l 24(sp),a0
    9886:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    988a:	|  |  |  |     |   movea.l 24(sp),a0
    988e:	|  |  |  |     |   move.l 84(a0),d0
    9892:	|  |  |  |     |   movea.l 24(sp),a0
    9896:	|  |  |  |     |   movea.l 72(a0),a0
    989a:	|  |  |  |     |   move.l 8(a0),d1
    989e:	|  |  |  |     |   move.l d1,-(sp)
    98a0:	|  |  |  |     |   move.l d0,-(sp)
    98a2:	|  |  |  |     |   jsr 172fe <__modsi3>
    98a8:	|  |  |  |     |   addq.l #8,sp
    98aa:	|  |  |  |     |   movea.l 24(sp),a0
    98ae:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    98b2:	|  |  |  |     |   movea.l 24(sp),a0
    98b6:	|  |  |  |     |   movea.l 72(a0),a0
    98ba:	|  |  |  |     |   movea.l 4(a0),a1
    98be:	|  |  |  |     |   movea.l 24(sp),a0
    98c2:	|  |  |  |     |   move.l 84(a0),d0
    98c6:	|  |  |  |     |   move.l d0,d1
    98c8:	|  |  |  |     |   move.l d1,d0
    98ca:	|  |  |  |     |   add.l d0,d0
    98cc:	|  |  |  |     |   add.l d1,d0
    98ce:	|  |  |  |     |   add.l d0,d0
    98d0:	|  |  |  |     |   add.l d0,d0
    98d2:	|  |  |  |     |   lea (0,a1,d0.l),a0
    98d6:	|  |  |  |     |   move.l 4(a0),d0
    98da:	|  |  |  |     |   movea.l 24(sp),a0
    98de:	|  |  |  |     |   move.l d0,88(a0)
    98e2:	|  |  |  |  /--|-- bra.w 9a24 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    98e6:	|  |  |  |  |  \-> movea.l 20(sp),a0
    98ea:	|  |  |  |  |      movea.l 4(a0),a1
    98ee:	|  |  |  |  |      movea.l 24(sp),a0
    98f2:	|  |  |  |  |      move.l 84(a0),d0
    98f6:	|  |  |  |  |      move.l d0,d1
    98f8:	|  |  |  |  |      move.l d1,d0
    98fa:	|  |  |  |  |      add.l d0,d0
    98fc:	|  |  |  |  |      add.l d1,d0
    98fe:	|  |  |  |  |      add.l d0,d0
    9900:	|  |  |  |  |      add.l d0,d0
    9902:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9906:	|  |  |  |  |      move.l 8(a0),d0
    990a:	|  |  |  |  +----- beq.w 9a24 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    990e:	|  |  |  |  |      movea.l 1a774 <noStack>,a1
    9914:	|  |  |  |  |      movea.l 20(sp),a0
    9918:	|  |  |  |  |      move.l 4(a0),d2
    991c:	|  |  |  |  |      movea.l 24(sp),a0
    9920:	|  |  |  |  |      move.l 84(a0),d0
    9924:	|  |  |  |  |      move.l d0,d1
    9926:	|  |  |  |  |      move.l d1,d0
    9928:	|  |  |  |  |      add.l d0,d0
    992a:	|  |  |  |  |      add.l d1,d0
    992c:	|  |  |  |  |      add.l d0,d0
    992e:	|  |  |  |  |      add.l d0,d0
    9930:	|  |  |  |  |      movea.l d2,a0
    9932:	|  |  |  |  |      adda.l d0,a0
    9934:	|  |  |  |  |      move.l 8(a0),d0
    9938:	|  |  |  |  |      neg.l d0
    993a:	|  |  |  |  |      pea 1 <_start+0x1>
    993e:	|  |  |  |  |      move.l a1,-(sp)
    9940:	|  |  |  |  |      clr.l -(sp)
    9942:	|  |  |  |  |      clr.l -(sp)
    9944:	|  |  |  |  |      move.l d0,-(sp)
    9946:	|  |  |  |  |      jsr 63b0 <startNewFunctionNum>
    994c:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    9950:	|  |  |  |  |      movea.l 24(sp),a0
    9954:	|  |  |  |  |      move.l 84(a0),d0
    9958:	|  |  |  |  |      addq.l #1,d0
    995a:	|  |  |  |  |      movea.l 24(sp),a0
    995e:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9962:	|  |  |  |  |      movea.l 24(sp),a0
    9966:	|  |  |  |  |      move.l 84(a0),d0
    996a:	|  |  |  |  |      movea.l 24(sp),a0
    996e:	|  |  |  |  |      movea.l 72(a0),a0
    9972:	|  |  |  |  |      move.l 8(a0),d1
    9976:	|  |  |  |  |      move.l d1,-(sp)
    9978:	|  |  |  |  |      move.l d0,-(sp)
    997a:	|  |  |  |  |      jsr 172fe <__modsi3>
    9980:	|  |  |  |  |      addq.l #8,sp
    9982:	|  |  |  |  |      movea.l 24(sp),a0
    9986:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    998a:	|  |  |  |  |      movea.l 24(sp),a0
    998e:	|  |  |  |  |      movea.l 72(a0),a0
    9992:	|  |  |  |  |      movea.l 4(a0),a1
    9996:	|  |  |  |  |      movea.l 24(sp),a0
    999a:	|  |  |  |  |      move.l 84(a0),d0
    999e:	|  |  |  |  |      move.l d0,d1
    99a0:	|  |  |  |  |      move.l d1,d0
    99a2:	|  |  |  |  |      add.l d0,d0
    99a4:	|  |  |  |  |      add.l d1,d0
    99a6:	|  |  |  |  |      add.l d0,d0
    99a8:	|  |  |  |  |      add.l d0,d0
    99aa:	|  |  |  |  |      lea (0,a1,d0.l),a0
    99ae:	|  |  |  |  |      move.l 4(a0),d0
    99b2:	|  |  |  |  |      movea.l 24(sp),a0
    99b6:	|  |  |  |  |      move.l d0,88(a0)
    99ba:	|  |  |  |  +----- bra.s 9a24 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    99bc:	|  |  |  \--|----> movea.l 24(sp),a0
    99c0:	|  |  |     |      move.l (a0),d0
    99c2:	|  |  |     |      movea.l 24(sp),a0
    99c6:	|  |  |     |      move.l 8(a0),d1
    99ca:	|  |  |     |      move.l d1,-(sp)
    99cc:	|  |  |     |      move.l d0,-(sp)
    99ce:	|  |  |     |      jsr 16bb2 <__eqsf2>
    99d4:	|  |  |     |      addq.l #8,sp
    99d6:	|  |  |     |      tst.l d0
    99d8:	|  |  |     |  /-- bne.s 9a1c <drawPeople+0x272>
    99da:	|  |  |     |  |   movea.l 24(sp),a0
    99de:	|  |  |     |  |   move.l 4(a0),d0
    99e2:	|  |  |     |  |   movea.l 24(sp),a0
    99e6:	|  |  |     |  |   move.l 12(a0),d1
    99ea:	|  |  |     |  |   move.l d1,-(sp)
    99ec:	|  |  |     |  |   move.l d0,-(sp)
    99ee:	|  |  |     |  |   jsr 16bb2 <__eqsf2>
    99f4:	|  |  |     |  |   addq.l #8,sp
    99f6:	|  |  |     |  |   tst.l d0
    99f8:	|  |  |     |  +-- bne.s 9a1c <drawPeople+0x272>
    99fa:	|  |  |     |  |   movea.l 20(sp),a0
    99fe:	|  |  |     |  |   move.l 8(a0),d0
    9a02:	|  |  |     |  |   moveq #1,d1
    9a04:	|  |  |     |  |   cmp.l d0,d1
    9a06:	|  |  |     |  +-- bne.s 9a1c <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    9a08:	|  |  |     |  |   movea.l 24(sp),a0
    9a0c:	|  |  |     |  |   move.l 16(a0),d0
    9a10:	|  |  |     |  |   addq.l #1,d0
    9a12:	|  |  |     |  |   movea.l 24(sp),a0
    9a16:	|  |  |     |  |   move.l d0,16(a0)
    9a1a:	|  |  |     +--|-- bra.s 9a24 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    9a1c:	|  |  |     |  \-> movea.l 24(sp),a0
    9a20:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    9a24:	|  |  |     \----> movea.l 24(sp),a0
    9a28:	|  |  |            move.l (a0),d0
    9a2a:	|  |  |            movea.l 24(sp),a0
    9a2e:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    9a32:	|  |  |            movea.l 24(sp),a0
    9a36:	|  |  |            move.l 4(a0),d0
    9a3a:	|  |  |            movea.l 24(sp),a0
    9a3e:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    9a42:	|  |  |            movea.l 20(sp),a0
    9a46:	|  |  |            movea.l 4(a0),a1
    9a4a:	|  |  |            movea.l 24(sp),a0
    9a4e:	|  |  |            move.l 84(a0),d0
    9a52:	|  |  |            move.l d0,d1
    9a54:	|  |  |            move.l d1,d0
    9a56:	|  |  |            add.l d0,d0
    9a58:	|  |  |            add.l d1,d0
    9a5a:	|  |  |            add.l d0,d0
    9a5c:	|  |  |            add.l d0,d0
    9a5e:	|  |  |            lea (0,a1,d0.l),a0
    9a62:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    9a66:	|  |  |            move.l 8(sp),d0
    9a6a:	|  |  |            add.l d0,d0
    9a6c:	|  |  |            subx.l d0,d0
    9a6e:	|  |  |            neg.l d0
    9a70:	|  |  |            move.b d0,d0
    9a72:	|  |  |            move.b d0,d0
    9a74:	|  |  |            andi.l #255,d0
    9a7a:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    9a7e:	|  |  |            move.l 8(sp),-(sp)
    9a82:	|  |  |            jsr 897e <TF_abs>
    9a88:	|  |  |            addq.l #4,sp
    9a8a:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    9a8e:	|  |  |            movea.l 20(sp),a0
    9a92:	|  |  |            movea.l (a0),a0
    9a94:	|  |  |            move.l 8(a0),d0
    9a98:	|  |  |            cmp.l 12(sp),d0
    9a9c:	|  |  |        /-- bgt.s 9aac <drawPeople+0x302>
				fNum = 0;
    9a9e:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    9aa2:	|  |  |        |   moveq #2,d0
    9aa4:	|  |  |        |   sub.l 16(sp),d0
    9aa8:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    9aac:	|  |  |        \-> moveq #2,d1
    9aae:	|  |  |            cmp.l 16(sp),d1
    9ab2:	|  |  +----------- beq.s 9b2e <drawPeople+0x384>
				BOOL r = FALSE;
    9ab4:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    9ab8:	|  |  |            move.l 16(sp),d0
    9abc:	|  |  |            movea.w d0,a0
    9abe:	|  |  |            movea.l 20(sp),a1
    9ac2:	|  |  |            movea.l (a1),a1
    9ac4:	|  |  |            movea.l 16(a1),a1
    9ac8:	|  |  |            move.l 12(sp),d1
    9acc:	|  |  |            move.l d1,d0
    9ace:	|  |  |            lsl.l #3,d0
    9ad0:	|  |  |            sub.l d1,d0
    9ad2:	|  |  |            add.l d0,d0
    9ad4:	|  |  |            add.l d0,d0
    9ad6:	|  |  |            add.l a1,d0
    9ad8:	|  |  |            move.l a0,-(sp)
    9ada:	|  |  |            move.l 28(sp),-(sp)
    9ade:	|  |  |            move.l d0,-(sp)
    9ae0:	|  |  |            jsr 8714 <scaleSprite>
    9ae6:	|  |  |            lea 12(sp),sp
    9aea:	|  |  |            move.w d0,6(sp)
				if (r) {
    9aee:	|  |  +----------- beq.s 9b2e <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    9af0:	|  |  |            movea.l 24(sp),a0
    9af4:	|  |  |            movea.l 114(a0),a0
    9af8:	|  |  |            movea.l (a0),a0
    9afa:	|  |  |            move.b (a0),d0
    9afc:	|  |  +----------- beq.s 9b2e <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    9afe:	|  |  |            move.l 1a83c <personRegion+0x1c>,d1
    9b04:	|  |  |            movea.l 24(sp),a0
    9b08:	|  |  |            move.l 114(a0),d0
    9b0c:	|  |  |            cmp.l d1,d0
    9b0e:	|  |  |        /-- beq.s 9b16 <drawPeople+0x36c>
    9b10:	|  |  |        |   clr.l 1a76c <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    9b16:	|  |  |        \-> movea.l 24(sp),a0
    9b1a:	|  |  |            move.l 114(a0),d0
    9b1e:	|  |  |            move.l d0,1a83c <personRegion+0x1c>
						overRegion = & personRegion;
    9b24:	|  |  |            move.l #108576,1a8cc <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    9b2e:	|  |  \----------> movea.l 24(sp),a0
    9b32:	|  |               move.l 88(a0),d0
    9b36:	|  |               subq.l #1,d0
    9b38:	|  |               movea.l 24(sp),a0
    9b3c:	|  |               move.l d0,88(a0)
    9b40:	|  |               movea.l 24(sp),a0
    9b44:	|  |               move.l 88(a0),d0
    9b48:	|  |        /----- bne.w 9d70 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    9b4c:	|  |        |      movea.l 24(sp),a0
    9b50:	|  |        |      move.l 84(a0),d0
    9b54:	|  |        |      addq.l #1,d0
    9b56:	|  |        |      movea.l 24(sp),a0
    9b5a:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9b5e:	|  |        |      movea.l 24(sp),a0
    9b62:	|  |        |      move.l 84(a0),d0
    9b66:	|  |        |      movea.l 24(sp),a0
    9b6a:	|  |        |      movea.l 72(a0),a0
    9b6e:	|  |        |      move.l 8(a0),d1
    9b72:	|  |        |      move.l d1,-(sp)
    9b74:	|  |        |      move.l d0,-(sp)
    9b76:	|  |        |      jsr 172fe <__modsi3>
    9b7c:	|  |        |      addq.l #8,sp
    9b7e:	|  |        |      movea.l 24(sp),a0
    9b82:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9b86:	|  |        |      movea.l 24(sp),a0
    9b8a:	|  |        |      movea.l 72(a0),a0
    9b8e:	|  |        |      movea.l 4(a0),a1
    9b92:	|  |        |      movea.l 24(sp),a0
    9b96:	|  |        |      move.l 84(a0),d0
    9b9a:	|  |        |      move.l d0,d1
    9b9c:	|  |        |      move.l d1,d0
    9b9e:	|  |        |      add.l d0,d0
    9ba0:	|  |        |      add.l d1,d0
    9ba2:	|  |        |      add.l d0,d0
    9ba4:	|  |        |      add.l d0,d0
    9ba6:	|  |        |      lea (0,a1,d0.l),a0
    9baa:	|  |        |      move.l 4(a0),d0
    9bae:	|  |        |      movea.l 24(sp),a0
    9bb2:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    9bb6:	|  |        |      movea.l 24(sp),a0
    9bba:	|  |        |      move.w 104(a0),d0
    9bbe:	|  |        +----- beq.w 9d70 <drawPeople+0x5c6>
    9bc2:	|  |        |      tst.l 20(sp)
    9bc6:	|  |        +----- beq.w 9d70 <drawPeople+0x5c6>
    9bca:	|  |        |      movea.l 20(sp),a0
    9bce:	|  |        |      move.l 4(a0),d0
    9bd2:	|  |        +----- beq.w 9d70 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9bd6:	|  |        |      movea.l 20(sp),a0
    9bda:	|  |        |      movea.l 4(a0),a1
    9bde:	|  |        |      movea.l 24(sp),a0
    9be2:	|  |        |      move.l 84(a0),d0
    9be6:	|  |        |      move.l d0,d1
    9be8:	|  |        |      move.l d1,d0
    9bea:	|  |        |      add.l d0,d0
    9bec:	|  |        |      add.l d1,d0
    9bee:	|  |        |      add.l d0,d0
    9bf0:	|  |        |      add.l d0,d0
    9bf2:	|  |        |      lea (0,a1,d0.l),a0
    9bf6:	|  |        |      move.l 8(a0),d0
    9bfa:	|  |        |  /-- ble.w 9c9c <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9bfe:	|  |        |  |   movea.l 20(sp),a0
    9c02:	|  |        |  |   movea.l 4(a0),a1
    9c06:	|  |        |  |   movea.l 24(sp),a0
    9c0a:	|  |        |  |   move.l 84(a0),d0
    9c0e:	|  |        |  |   move.l d0,d1
    9c10:	|  |        |  |   move.l d1,d0
    9c12:	|  |        |  |   add.l d0,d0
    9c14:	|  |        |  |   add.l d1,d0
    9c16:	|  |        |  |   add.l d0,d0
    9c18:	|  |        |  |   add.l d0,d0
    9c1a:	|  |        |  |   lea (0,a1,d0.l),a0
    9c1e:	|  |        |  |   move.l 8(a0),d0
    9c22:	|  |        |  |   clr.l -(sp)
    9c24:	|  |        |  |   move.l d0,-(sp)
    9c26:	|  |        |  |   jsr c8ca <startSound>
    9c2c:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9c2e:	|  |        |  |   movea.l 24(sp),a0
    9c32:	|  |        |  |   move.l 84(a0),d0
    9c36:	|  |        |  |   addq.l #1,d0
    9c38:	|  |        |  |   movea.l 24(sp),a0
    9c3c:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9c40:	|  |        |  |   movea.l 24(sp),a0
    9c44:	|  |        |  |   move.l 84(a0),d0
    9c48:	|  |        |  |   movea.l 24(sp),a0
    9c4c:	|  |        |  |   movea.l 72(a0),a0
    9c50:	|  |        |  |   move.l 8(a0),d1
    9c54:	|  |        |  |   move.l d1,-(sp)
    9c56:	|  |        |  |   move.l d0,-(sp)
    9c58:	|  |        |  |   jsr 172fe <__modsi3>
    9c5e:	|  |        |  |   addq.l #8,sp
    9c60:	|  |        |  |   movea.l 24(sp),a0
    9c64:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9c68:	|  |        |  |   movea.l 24(sp),a0
    9c6c:	|  |        |  |   movea.l 72(a0),a0
    9c70:	|  |        |  |   movea.l 4(a0),a1
    9c74:	|  |        |  |   movea.l 24(sp),a0
    9c78:	|  |        |  |   move.l 84(a0),d0
    9c7c:	|  |        |  |   move.l d0,d1
    9c7e:	|  |        |  |   move.l d1,d0
    9c80:	|  |        |  |   add.l d0,d0
    9c82:	|  |        |  |   add.l d1,d0
    9c84:	|  |        |  |   add.l d0,d0
    9c86:	|  |        |  |   add.l d0,d0
    9c88:	|  |        |  |   lea (0,a1,d0.l),a0
    9c8c:	|  |        |  |   move.l 4(a0),d0
    9c90:	|  |        |  |   movea.l 24(sp),a0
    9c94:	|  |        |  |   move.l d0,88(a0)
    9c98:	|  |        +--|-- bra.w 9d70 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    9c9c:	|  |        |  \-> movea.l 20(sp),a0
    9ca0:	|  |        |      movea.l 4(a0),a1
    9ca4:	|  |        |      movea.l 24(sp),a0
    9ca8:	|  |        |      move.l 84(a0),d0
    9cac:	|  |        |      move.l d0,d1
    9cae:	|  |        |      move.l d1,d0
    9cb0:	|  |        |      add.l d0,d0
    9cb2:	|  |        |      add.l d1,d0
    9cb4:	|  |        |      add.l d0,d0
    9cb6:	|  |        |      add.l d0,d0
    9cb8:	|  |        |      lea (0,a1,d0.l),a0
    9cbc:	|  |        |      move.l 8(a0),d0
    9cc0:	|  |        +----- beq.w 9d70 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    9cc4:	|  |        |      movea.l 1a774 <noStack>,a1
    9cca:	|  |        |      movea.l 20(sp),a0
    9cce:	|  |        |      move.l 4(a0),d2
    9cd2:	|  |        |      movea.l 24(sp),a0
    9cd6:	|  |        |      move.l 84(a0),d0
    9cda:	|  |        |      move.l d0,d1
    9cdc:	|  |        |      move.l d1,d0
    9cde:	|  |        |      add.l d0,d0
    9ce0:	|  |        |      add.l d1,d0
    9ce2:	|  |        |      add.l d0,d0
    9ce4:	|  |        |      add.l d0,d0
    9ce6:	|  |        |      movea.l d2,a0
    9ce8:	|  |        |      adda.l d0,a0
    9cea:	|  |        |      move.l 8(a0),d0
    9cee:	|  |        |      neg.l d0
    9cf0:	|  |        |      pea 1 <_start+0x1>
    9cf4:	|  |        |      move.l a1,-(sp)
    9cf6:	|  |        |      clr.l -(sp)
    9cf8:	|  |        |      clr.l -(sp)
    9cfa:	|  |        |      move.l d0,-(sp)
    9cfc:	|  |        |      jsr 63b0 <startNewFunctionNum>
    9d02:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    9d06:	|  |        |      movea.l 24(sp),a0
    9d0a:	|  |        |      move.l 84(a0),d0
    9d0e:	|  |        |      addq.l #1,d0
    9d10:	|  |        |      movea.l 24(sp),a0
    9d14:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9d18:	|  |        |      movea.l 24(sp),a0
    9d1c:	|  |        |      move.l 84(a0),d0
    9d20:	|  |        |      movea.l 24(sp),a0
    9d24:	|  |        |      movea.l 72(a0),a0
    9d28:	|  |        |      move.l 8(a0),d1
    9d2c:	|  |        |      move.l d1,-(sp)
    9d2e:	|  |        |      move.l d0,-(sp)
    9d30:	|  |        |      jsr 172fe <__modsi3>
    9d36:	|  |        |      addq.l #8,sp
    9d38:	|  |        |      movea.l 24(sp),a0
    9d3c:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9d40:	|  |        |      movea.l 24(sp),a0
    9d44:	|  |        |      movea.l 72(a0),a0
    9d48:	|  |        |      movea.l 4(a0),a1
    9d4c:	|  |        |      movea.l 24(sp),a0
    9d50:	|  |        |      move.l 84(a0),d0
    9d54:	|  |        |      move.l d0,d1
    9d56:	|  |        |      move.l d1,d0
    9d58:	|  |        |      add.l d0,d0
    9d5a:	|  |        |      add.l d1,d0
    9d5c:	|  |        |      add.l d0,d0
    9d5e:	|  |        |      add.l d0,d0
    9d60:	|  |        |      lea (0,a1,d0.l),a0
    9d64:	|  |        |      move.l 4(a0),d0
    9d68:	|  |        |      movea.l 24(sp),a0
    9d6c:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    9d70:	|  |        \----> movea.l 24(sp),a0
    9d74:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    9d7a:	|  \-------------> tst.l 24(sp)
    9d7e:	\----------------- bne.w 97cc <drawPeople+0x22>
	}
}
    9d82:	                   nop
    9d84:	                   nop
    9d86:	                   move.l (sp)+,d2
    9d88:	                   lea 24(sp),sp
    9d8c:	                   rts

00009d8e <findPerson>:


struct onScreenPerson * findPerson (int v) {
    9d8e:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    9d90:	          move.l 1a81c <allPeople>,(sp)
	while (thisPerson) {
    9d96:	      /-- bra.s 9dae <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    9d98:	/-----|-> movea.l (sp),a0
    9d9a:	|     |   movea.l 114(a0),a0
    9d9e:	|     |   move.l 4(a0),d0
    9da2:	|     |   cmp.l 8(sp),d0
    9da6:	|  /--|-- beq.s 9db4 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    9da8:	|  |  |   movea.l (sp),a0
    9daa:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    9dae:	|  |  \-> tst.l (sp)
    9db0:	\--|----- bne.s 9d98 <findPerson+0xa>
    9db2:	   |  /-- bra.s 9db6 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    9db4:	   \--|-> nop
	}
	return thisPerson;
    9db6:	      \-> move.l (sp),d0
}
    9db8:	          addq.l #4,sp
    9dba:	          rts

00009dbc <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    9dbc:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    9dbe:	       move.l 12(sp),-(sp)
    9dc2:	       jsr 9d8e <findPerson>
    9dc8:	       addq.l #4,sp
    9dca:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    9dcc:	   /-- bne.s 9dd2 <floatCharacter+0x16>
    9dce:	   |   clr.w d0
    9dd0:	/--|-- bra.s 9ddc <floatCharacter+0x20>
	moveMe -> floaty = f;
    9dd2:	|  \-> movea.l (sp),a0
    9dd4:	|      move.l 8(sp),24(a0)
	return TRUE;
    9dda:	|      moveq #1,d0
}
    9ddc:	\----> addq.l #4,sp
    9dde:	       rts

00009de0 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    9de0:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    9de2:	          tst.l 8(sp)
    9de6:	      /-- bne.s 9df4 <forceWalkingPerson+0x14>
    9de8:	      |   tst.l 12(sp)
    9dec:	      +-- bne.s 9df4 <forceWalkingPerson+0x14>
    9dee:	      |   clr.w d0
    9df0:	/-----|-- bra.w 9e86 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    9df4:	|     \-> move.l 16(sp),-(sp)
    9df8:	|         jsr 9d8e <findPerson>
    9dfe:	|         addq.l #4,sp
    9e00:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    9e02:	|     /-- bne.s 9e08 <forceWalkingPerson+0x28>
    9e04:	|     |   clr.w d0
    9e06:	+-----|-- bra.s 9e86 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    9e08:	|     \-> movea.l (sp),a0
    9e0a:	|         move.l 68(a0),d0
    9e0e:	|     /-- beq.s 9e20 <forceWalkingPerson+0x40>
    9e10:	|     |   movea.l (sp),a0
    9e12:	|     |   move.l 68(a0),d0
    9e16:	|     |   move.l d0,-(sp)
    9e18:	|     |   jsr 3ff4 <abortFunction>
    9e1e:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    9e20:	|     \-> movea.l (sp),a0
    9e22:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    9e28:	|         movea.l (sp),a0
    9e2a:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    9e2e:	|         movea.l (sp),a0
    9e30:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    9e36:	|         movea.l (sp),a0
    9e38:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    9e3e:	|         movea.l (sp),a0
    9e40:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    9e46:	|         movea.l (sp),a0
    9e48:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    9e4c:	|         movea.l (sp),a0
    9e4e:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    9e52:	|         move.l (sp),-(sp)
    9e54:	|         jsr 90f0 <doBorderStuff>
    9e5a:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    9e5c:	|         pea 1 <_start+0x1>
    9e60:	|         move.l 4(sp),-(sp)
    9e64:	|         jsr b650 <walkMe>
    9e6a:	|         addq.l #8,sp
    9e6c:	|         tst.w d0
    9e6e:	|     /-- bne.s 9e78 <forceWalkingPerson+0x98>
    9e70:	|     |   movea.l (sp),a0
    9e72:	|     |   move.w 66(a0),d0
    9e76:	|  /--|-- beq.s 9e84 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    9e78:	|  |  \-> movea.l (sp),a0
    9e7a:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    9e80:	|  |      moveq #1,d0
    9e82:	+--|----- bra.s 9e86 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    9e84:	|  \----> clr.w d0
    }
}
    9e86:	\-------> addq.l #4,sp
    9e88:	          rts

00009e8a <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    9e8a:	                lea -56(sp),sp
    9e8e:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    9e90:	                move.l #320,56(sp)
    9e98:	                move.l #200,52(sp)
    9ea0:	                moveq #-1,d0
    9ea2:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    9ea6:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    9eae:	                clr.l 44(sp)
    9eb2:	   /----------- bra.w a08a <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    9eb6:	/--|----------> movea.l 1a8d4 <currentFloor>,a0
    9ebc:	|  |            move.l 12(a0),d1
    9ec0:	|  |            move.l 44(sp),d0
    9ec4:	|  |            lsl.l #3,d0
    9ec6:	|  |            movea.l d1,a0
    9ec8:	|  |            adda.l d0,a0
    9eca:	|  |            move.l (a0),d0
    9ecc:	|  |            move.l d0,d1
    9ece:	|  |            subq.l #1,d1
    9ed0:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    9ed4:	|  |            clr.l 40(sp)
    9ed8:	|  |     /----- bra.w a068 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    9edc:	|  |  /--|----> movea.l 1a8d4 <currentFloor>,a0
    9ee2:	|  |  |  |      move.l 4(a0),d1
    9ee6:	|  |  |  |      movea.l 1a8d4 <currentFloor>,a0
    9eec:	|  |  |  |      movea.l 12(a0),a0
    9ef0:	|  |  |  |      move.l 44(sp),d0
    9ef4:	|  |  |  |      lsl.l #3,d0
    9ef6:	|  |  |  |      adda.l d0,a0
    9ef8:	|  |  |  |      movea.l 4(a0),a0
    9efc:	|  |  |  |      move.l 40(sp),d0
    9f00:	|  |  |  |      add.l d0,d0
    9f02:	|  |  |  |      add.l d0,d0
    9f04:	|  |  |  |      adda.l d0,a0
    9f06:	|  |  |  |      move.l (a0),d0
    9f08:	|  |  |  |      lsl.l #3,d0
    9f0a:	|  |  |  |      movea.l d1,a0
    9f0c:	|  |  |  |      adda.l d0,a0
    9f0e:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    9f12:	|  |  |  |      movea.l 1a8d4 <currentFloor>,a0
    9f18:	|  |  |  |      move.l 4(a0),d1
    9f1c:	|  |  |  |      movea.l 1a8d4 <currentFloor>,a0
    9f22:	|  |  |  |      movea.l 12(a0),a0
    9f26:	|  |  |  |      move.l 44(sp),d0
    9f2a:	|  |  |  |      lsl.l #3,d0
    9f2c:	|  |  |  |      adda.l d0,a0
    9f2e:	|  |  |  |      movea.l 4(a0),a0
    9f32:	|  |  |  |      move.l 40(sp),d0
    9f36:	|  |  |  |      add.l d0,d0
    9f38:	|  |  |  |      add.l d0,d0
    9f3a:	|  |  |  |      adda.l d0,a0
    9f3c:	|  |  |  |      move.l (a0),d0
    9f3e:	|  |  |  |      lsl.l #3,d0
    9f40:	|  |  |  |      movea.l d1,a0
    9f42:	|  |  |  |      adda.l d0,a0
    9f44:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    9f4a:	|  |  |  |      movea.l 1a8d4 <currentFloor>,a0
    9f50:	|  |  |  |      move.l 4(a0),d1
    9f54:	|  |  |  |      movea.l 1a8d4 <currentFloor>,a0
    9f5a:	|  |  |  |      movea.l 12(a0),a0
    9f5e:	|  |  |  |      move.l 44(sp),d0
    9f62:	|  |  |  |      lsl.l #3,d0
    9f64:	|  |  |  |      adda.l d0,a0
    9f66:	|  |  |  |      movea.l 4(a0),a0
    9f6a:	|  |  |  |      move.l 36(sp),d0
    9f6e:	|  |  |  |      add.l d0,d0
    9f70:	|  |  |  |      add.l d0,d0
    9f72:	|  |  |  |      adda.l d0,a0
    9f74:	|  |  |  |      move.l (a0),d0
    9f76:	|  |  |  |      lsl.l #3,d0
    9f78:	|  |  |  |      movea.l d1,a0
    9f7a:	|  |  |  |      adda.l d0,a0
    9f7c:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    9f80:	|  |  |  |      movea.l 1a8d4 <currentFloor>,a0
    9f86:	|  |  |  |      move.l 4(a0),d1
    9f8a:	|  |  |  |      movea.l 1a8d4 <currentFloor>,a0
    9f90:	|  |  |  |      movea.l 12(a0),a0
    9f94:	|  |  |  |      move.l 44(sp),d0
    9f98:	|  |  |  |      lsl.l #3,d0
    9f9a:	|  |  |  |      adda.l d0,a0
    9f9c:	|  |  |  |      movea.l 4(a0),a0
    9fa0:	|  |  |  |      move.l 36(sp),d0
    9fa4:	|  |  |  |      add.l d0,d0
    9fa6:	|  |  |  |      add.l d0,d0
    9fa8:	|  |  |  |      adda.l d0,a0
    9faa:	|  |  |  |      move.l (a0),d0
    9fac:	|  |  |  |      lsl.l #3,d0
    9fae:	|  |  |  |      movea.l d1,a0
    9fb0:	|  |  |  |      adda.l d0,a0
    9fb2:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    9fb8:	|  |  |  |      movea.l 68(sp),a0
    9fbc:	|  |  |  |      move.l (a0),d1
    9fbe:	|  |  |  |      movea.l 64(sp),a0
    9fc2:	|  |  |  |      move.l (a0),d0
    9fc4:	|  |  |  |      move.l d1,-(sp)
    9fc6:	|  |  |  |      move.l d0,-(sp)
    9fc8:	|  |  |  |      move.l 24(sp),-(sp)
    9fcc:	|  |  |  |      move.l 32(sp),-(sp)
    9fd0:	|  |  |  |      move.l 40(sp),-(sp)
    9fd4:	|  |  |  |      move.l 48(sp),-(sp)
    9fd8:	|  |  |  |      lea 28(sp),a0
    9fdc:	|  |  |  |      move.l a0,-(sp)
    9fde:	|  |  |  |      lea 36(sp),a0
    9fe2:	|  |  |  |      move.l a0,-(sp)
    9fe4:	|  |  |  |      jsr 156f4 <closestPointOnLine>
    9fea:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    9fee:	|  |  |  |      movea.l 64(sp),a0
    9ff2:	|  |  |  |      move.l (a0),d0
    9ff4:	|  |  |  |      move.l 8(sp),d1
    9ff8:	|  |  |  |      move.l d0,d2
    9ffa:	|  |  |  |      sub.l d1,d2
    9ffc:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a000:	|  |  |  |      movea.l 68(sp),a0
    a004:	|  |  |  |      move.l (a0),d0
    a006:	|  |  |  |      move.l 4(sp),d1
    a00a:	|  |  |  |      move.l d0,d2
    a00c:	|  |  |  |      sub.l d1,d2
    a00e:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a012:	|  |  |  |      move.l 28(sp),-(sp)
    a016:	|  |  |  |      move.l 32(sp),-(sp)
    a01a:	|  |  |  |      jsr 17252 <__mulsi3>
    a020:	|  |  |  |      addq.l #8,sp
    a022:	|  |  |  |      move.l d0,d2
    a024:	|  |  |  |      move.l 24(sp),-(sp)
    a028:	|  |  |  |      move.l 28(sp),-(sp)
    a02c:	|  |  |  |      jsr 17252 <__mulsi3>
    a032:	|  |  |  |      addq.l #8,sp
    a034:	|  |  |  |      move.l d2,d1
    a036:	|  |  |  |      add.l d0,d1
    a038:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a03c:	|  |  |  |      move.l 12(sp),d2
    a040:	|  |  |  |      cmp.l 32(sp),d2
    a044:	|  |  |  |  /-- bge.s a05e <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a046:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a04c:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a052:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a058:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a05e:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a064:	|  |  |  |      addq.l #1,40(sp)
    a068:	|  |  |  \----> movea.l 1a8d4 <currentFloor>,a0
    a06e:	|  |  |         move.l 12(a0),d1
    a072:	|  |  |         move.l 44(sp),d0
    a076:	|  |  |         lsl.l #3,d0
    a078:	|  |  |         movea.l d1,a0
    a07a:	|  |  |         adda.l d0,a0
    a07c:	|  |  |         move.l (a0),d0
    a07e:	|  |  |         cmp.l 40(sp),d0
    a082:	|  |  \-------- bgt.w 9edc <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a086:	|  |            addq.l #1,44(sp)
    a08a:	|  \----------> movea.l 1a8d4 <currentFloor>,a0
    a090:	|               move.l 8(a0),d0
    a094:	|               cmp.l 44(sp),d0
    a098:	\-------------- bgt.w 9eb6 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a09c:	                moveq #-1,d0
    a09e:	                cmp.l 48(sp),d0
    a0a2:	            /-- bne.s a0a8 <handleClosestPoint+0x21e>
    a0a4:	            |   clr.w d0
    a0a6:	         /--|-- bra.s a0c2 <handleClosestPoint+0x238>
	*setX = gotX;
    a0a8:	         |  \-> movea.l 64(sp),a0
    a0ac:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a0b0:	         |      movea.l 68(sp),a0
    a0b4:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a0b8:	         |      movea.l 72(sp),a0
    a0bc:	         |      move.l 48(sp),(a0)

	return TRUE;
    a0c0:	         |      moveq #1,d0
}
    a0c2:	         \----> move.l (sp)+,d2
    a0c4:	                lea 56(sp),sp
    a0c8:	                rts

0000a0ca <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a0ca:	clr.l 1a830 <personRegion+0x10>
	personRegion.sY = 0;
    a0d0:	clr.l 1a834 <personRegion+0x14>
	personRegion.di = -1;
    a0d6:	moveq #-1,d0
    a0d8:	move.l d0,1a838 <personRegion+0x18>
	allScreenRegions = NULL;
    a0de:	clr.l 1a8c8 <allScreenRegions>

	return TRUE;
    a0e4:	moveq #1,d0
}
    a0e6:	rts

0000a0e8 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a0e8:	          subq.l #4,sp
    a0ea:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a0ec:	          tst.l 12(sp)
    a0f0:	      /-- bne.s a0f8 <jumpPerson+0x10>
    a0f2:	      |   tst.l 16(sp)
    a0f6:	/-----|-- beq.s a16c <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a0f8:	|     \-> move.l 20(sp),-(sp)
    a0fc:	|         jsr 9d8e <findPerson>
    a102:	|         addq.l #4,sp
    a104:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a108:	|  /----- beq.s a170 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a10a:	|  |      movea.l 4(sp),a0
    a10e:	|  |      move.l 68(a0),d0
    a112:	|  |  /-- beq.s a126 <jumpPerson+0x3e>
    a114:	|  |  |   movea.l 4(sp),a0
    a118:	|  |  |   move.l 68(a0),d0
    a11c:	|  |  |   move.l d0,-(sp)
    a11e:	|  |  |   jsr 3ff4 <abortFunction>
    a124:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a126:	|  |  \-> movea.l 4(sp),a0
    a12a:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a12e:	|  |      movea.l 4(sp),a0
    a132:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a136:	|  |      movea.l 4(sp),a0
    a13a:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a13e:	|  |      move.l 16(sp),-(sp)
    a142:	|  |      jsr 16cd0 <__floatsisf>
    a148:	|  |      addq.l #4,sp
    a14a:	|  |      move.l d0,d2
    a14c:	|  |      move.l 12(sp),-(sp)
    a150:	|  |      jsr 16cd0 <__floatsisf>
    a156:	|  |      addq.l #4,sp
    a158:	|  |      move.l d2,-(sp)
    a15a:	|  |      move.l d0,-(sp)
    a15c:	|  |      move.l 12(sp),-(sp)
    a160:	|  |      jsr a4d6 <moveAndScale>
    a166:	|  |      lea 12(sp),sp
    a16a:	|  |  /-- bra.s a172 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    a16c:	\--|--|-> nop
    a16e:	   |  +-- bra.s a172 <jumpPerson+0x8a>
    if (!moveMe) return;
    a170:	   \--|-> nop
}
    a172:	      \-> move.l (sp)+,d2
    a174:	          addq.l #4,sp
    a176:	          rts

0000a178 <killAllPeople>:


void killAllPeople () {
    a178:	          subq.l #8,sp
    a17a:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    a17c:	   /----- bra.s a1e8 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    a17e:	/--|----> movea.l 1a81c <allPeople>,a0
    a184:	|  |      move.l 68(a0),d0
    a188:	|  |  /-- beq.s a19e <killAllPeople+0x26>
    a18a:	|  |  |   movea.l 1a81c <allPeople>,a0
    a190:	|  |  |   move.l 68(a0),d0
    a194:	|  |  |   move.l d0,-(sp)
    a196:	|  |  |   jsr 3ff4 <abortFunction>
    a19c:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    a19e:	|  |  \-> movea.l 1a81c <allPeople>,a0
    a1a4:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    a1a8:	|  |      move.l 1a81c <allPeople>,8(sp)
		allPeople = allPeople -> next;
    a1b0:	|  |      movea.l 1a81c <allPeople>,a0
    a1b6:	|  |      move.l 36(a0),d0
    a1ba:	|  |      move.l d0,1a81c <allPeople>
		removeObjectType (killPeople -> thisType);
    a1c0:	|  |      movea.l 8(sp),a0
    a1c4:	|  |      move.l 114(a0),d0
    a1c8:	|  |      move.l d0,-(sp)
    a1ca:	|  |      jsr cfa8 <removeObjectType>
    a1d0:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    a1d2:	|  |      move.l 8(sp),4(sp)
    a1d8:	|  |      move.l 1a7a4 <SysBase>,d0
    a1de:	|  |      movea.l d0,a6
    a1e0:	|  |      movea.l 4(sp),a1
    a1e4:	|  |      jsr -690(a6)
	while (allPeople) {
    a1e8:	|  \----> move.l 1a81c <allPeople>,d0
    a1ee:	\-------- bne.s a17e <killAllPeople+0x6>
	}
}
    a1f0:	          nop
    a1f2:	          nop
    a1f4:	          movea.l (sp)+,a6
    a1f6:	          addq.l #8,sp
    a1f8:	          rts

0000a1fa <killMostPeople>:

void killMostPeople() {
    a1fa:	          lea -12(sp),sp
    a1fe:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    a200:	          move.l #108572,12(sp)

    while (*lookyHere) {
    a208:	   /----- bra.w a28e <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    a20c:	/--|----> movea.l 12(sp),a0
    a210:	|  |      movea.l (a0),a0
    a212:	|  |      move.l 118(a0),d0
    a216:	|  |      moveq #32,d1
    a218:	|  |      and.l d1,d0
    a21a:	|  |  /-- beq.s a22c <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    a21c:	|  |  |   movea.l 12(sp),a0
    a220:	|  |  |   move.l (a0),d0
    a222:	|  |  |   moveq #36,d1
    a224:	|  |  |   add.l d0,d1
    a226:	|  |  |   move.l d1,12(sp)
    a22a:	|  +--|-- bra.s a28e <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    a22c:	|  |  \-> movea.l 12(sp),a0
    a230:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    a234:	|  |      movea.l 8(sp),a0
    a238:	|  |      move.l 36(a0),d0
    a23c:	|  |      movea.l 12(sp),a0
    a240:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    a242:	|  |      movea.l 8(sp),a0
    a246:	|  |      move.l 68(a0),d0
    a24a:	|  |  /-- beq.s a25e <killMostPeople+0x64>
    a24c:	|  |  |   movea.l 8(sp),a0
    a250:	|  |  |   move.l 68(a0),d0
    a254:	|  |  |   move.l d0,-(sp)
    a256:	|  |  |   jsr 3ff4 <abortFunction>
    a25c:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    a25e:	|  |  \-> movea.l 8(sp),a0
    a262:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    a266:	|  |      movea.l 8(sp),a0
    a26a:	|  |      move.l 114(a0),d0
    a26e:	|  |      move.l d0,-(sp)
    a270:	|  |      jsr cfa8 <removeObjectType>
    a276:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    a278:	|  |      move.l 8(sp),4(sp)
    a27e:	|  |      move.l 1a7a4 <SysBase>,d0
    a284:	|  |      movea.l d0,a6
    a286:	|  |      movea.l 4(sp),a1
    a28a:	|  |      jsr -690(a6)
    while (*lookyHere) {
    a28e:	|  \----> movea.l 12(sp),a0
    a292:	|         move.l (a0),d0
    a294:	\-------- bne.w a20c <killMostPeople+0x12>
        }
    }
}
    a298:	          nop
    a29a:	          nop
    a29c:	          movea.l (sp)+,a6
    a29e:	          lea 12(sp),sp
    a2a2:	          rts

0000a2a4 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    a2a4:	clr.l -(sp)
    a2a6:	move.l sp,d0
    a2a8:	addq.l #8,d0
    a2aa:	move.l d0,-(sp)
    a2ac:	jsr 7a3e <setFrames>
    a2b2:	addq.l #8,sp
}
    a2b4:	nop
    a2b6:	rts

0000a2b8 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a2b8:	          lea -12(sp),sp
    a2bc:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    a2be:	          tst.l 20(sp)
    a2c2:	      /-- bne.s a2d0 <makeWalkingPerson+0x18>
    a2c4:	      |   tst.l 24(sp)
    a2c8:	      +-- bne.s a2d0 <makeWalkingPerson+0x18>
    a2ca:	      |   clr.w d0
    a2cc:	/-----|-- bra.w a468 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    a2d0:	|     \-> movea.l 1a8d4 <currentFloor>,a0
    a2d6:	|         move.l 8(a0),d0
    a2da:	|     /-- bne.s a2e2 <makeWalkingPerson+0x2a>
    a2dc:	|     |   clr.w d0
    a2de:	+-----|-- bra.w a468 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    a2e2:	|     \-> move.l 28(sp),-(sp)
    a2e6:	|         jsr 9d8e <findPerson>
    a2ec:	|         addq.l #4,sp
    a2ee:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    a2f2:	|     /-- bne.s a2fa <makeWalkingPerson+0x42>
    a2f4:	|     |   clr.w d0
    a2f6:	+-----|-- bra.w a468 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    a2fa:	|     \-> movea.l 12(sp),a0
    a2fe:	|         move.l 68(a0),d0
    a302:	|     /-- beq.s a316 <makeWalkingPerson+0x5e>
    a304:	|     |   movea.l 12(sp),a0
    a308:	|     |   move.l 68(a0),d0
    a30c:	|     |   move.l d0,-(sp)
    a30e:	|     |   jsr 3ff4 <abortFunction>
    a314:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    a316:	|     \-> movea.l 12(sp),a0
    a31a:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    a31e:	|         movea.l 12(sp),a0
    a322:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    a328:	|         movea.l 12(sp),a0
    a32c:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    a332:	|         movea.l 12(sp),a0
    a336:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    a33c:	|         movea.l 12(sp),a0
    a340:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    a346:	|         move.l 24(sp),-(sp)
    a34a:	|         move.l 24(sp),-(sp)
    a34e:	|         jsr 15bf6 <inFloor>
    a354:	|         addq.l #8,sp
    a356:	|         movea.l 12(sp),a0
    a35a:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    a35e:	|         movea.l 12(sp),a0
    a362:	|         move.l 60(a0),d0
    a366:	|         moveq #-1,d1
    a368:	|         cmp.l d0,d1
    a36a:	|     /-- bne.s a39a <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    a36c:	|     |   movea.w #60,a0
    a370:	|     |   adda.l 12(sp),a0
    a374:	|     |   moveq #44,d1
    a376:	|     |   add.l 12(sp),d1
    a37a:	|     |   moveq #40,d0
    a37c:	|     |   add.l 12(sp),d0
    a380:	|     |   move.l a0,-(sp)
    a382:	|     |   move.l d1,-(sp)
    a384:	|     |   move.l d0,-(sp)
    a386:	|     |   jsr 9e8a <handleClosestPoint>
    a38c:	|     |   lea 12(sp),sp
    a390:	|     |   tst.w d0
    a392:	|     +-- bne.s a39a <makeWalkingPerson+0xe2>
    a394:	|     |   clr.w d0
    a396:	+-----|-- bra.w a468 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    a39a:	|     \-> movea.l 12(sp),a0
    a39e:	|         move.l 4(a0),d0
    a3a2:	|         move.l d0,-(sp)
    a3a4:	|         jsr 16c68 <__fixsfsi>
    a3aa:	|         addq.l #4,sp
    a3ac:	|         move.l d0,d2
    a3ae:	|         movea.l 12(sp),a0
    a3b2:	|         move.l (a0),d0
    a3b4:	|         move.l d0,-(sp)
    a3b6:	|         jsr 16c68 <__fixsfsi>
    a3bc:	|         addq.l #4,sp
    a3be:	|         move.l d2,-(sp)
    a3c0:	|         move.l d0,-(sp)
    a3c2:	|         jsr 15bf6 <inFloor>
    a3c8:	|         addq.l #8,sp
    a3ca:	|         movea.l 12(sp),a0
    a3ce:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    a3d2:	|         movea.l 12(sp),a0
    a3d6:	|         move.l 56(a0),d0
    a3da:	|         moveq #-1,d1
    a3dc:	|         cmp.l d0,d1
    a3de:	|     /-- bne.s a430 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    a3e0:	|     |   movea.l 12(sp),a0
    a3e4:	|     |   move.l (a0),d0
    a3e6:	|     |   move.l d0,-(sp)
    a3e8:	|     |   jsr 16c68 <__fixsfsi>
    a3ee:	|     |   addq.l #4,sp
    a3f0:	|     |   move.l d0,8(sp)
    a3f4:	|     |   movea.l 12(sp),a0
    a3f8:	|     |   move.l 4(a0),d0
    a3fc:	|     |   move.l d0,-(sp)
    a3fe:	|     |   jsr 16c68 <__fixsfsi>
    a404:	|     |   addq.l #4,sp
    a406:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    a40a:	|     |   moveq #56,d0
    a40c:	|     |   add.l 12(sp),d0
    a410:	|     |   move.l d0,-(sp)
    a412:	|     |   lea 8(sp),a0
    a416:	|     |   move.l a0,-(sp)
    a418:	|     |   moveq #16,d0
    a41a:	|     |   add.l sp,d0
    a41c:	|     |   move.l d0,-(sp)
    a41e:	|     |   jsr 9e8a <handleClosestPoint>
    a424:	|     |   lea 12(sp),sp
    a428:	|     |   tst.w d0
    a42a:	|     +-- bne.s a430 <makeWalkingPerson+0x178>
    a42c:	|     |   clr.w d0
    a42e:	+-----|-- bra.s a468 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    a430:	|     \-> move.l 12(sp),-(sp)
    a434:	|         jsr 90f0 <doBorderStuff>
    a43a:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    a43c:	|         clr.l -(sp)
    a43e:	|         move.l 16(sp),-(sp)
    a442:	|         jsr b650 <walkMe>
    a448:	|         addq.l #8,sp
    a44a:	|         tst.w d0
    a44c:	|     /-- bne.s a458 <makeWalkingPerson+0x1a0>
    a44e:	|     |   movea.l 12(sp),a0
    a452:	|     |   move.w 66(a0),d0
    a456:	|  /--|-- beq.s a466 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    a458:	|  |  \-> movea.l 12(sp),a0
    a45c:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    a462:	|  |      moveq #1,d0
    a464:	+--|----- bra.s a468 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    a466:	|  \----> clr.w d0
	}
}
    a468:	\-------> move.l (sp)+,d2
    a46a:	          lea 12(sp),sp
    a46e:	          rts

0000a470 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    a470:	       lea -16(sp),sp
    a474:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    a476:	       moveq #12,d0
    a478:	       move.l d0,16(sp)
    a47c:	       clr.l 12(sp)
    a480:	       move.l 1a7a4 <SysBase>,d0
    a486:	       movea.l d0,a6
    a488:	       move.l 16(sp),d0
    a48c:	       move.l 12(sp),d1
    a490:	       jsr -684(a6)
    a494:	       move.l d0,8(sp)
    a498:	       move.l 8(sp),d0
    a49c:	       move.l d0,4(sp)
    if(newAnim == 0) {
    a4a0:	   /-- bne.s a4b4 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    a4a2:	   |   pea 18805 <PutChar+0x149d>
    a4a8:	   |   jsr 16894 <KPrintF>
    a4ae:	   |   addq.l #4,sp
        return NULL;    
    a4b0:	   |   moveq #0,d0
    a4b2:	/--|-- bra.s a4ce <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    a4b4:	|  \-> movea.l 4(sp),a0
    a4b8:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    a4ba:	|      movea.l 4(sp),a0
    a4be:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    a4c2:	|      movea.l 4(sp),a0
    a4c6:	|      clr.l 4(a0)
	return newAnim;
    a4ca:	|      move.l 4(sp),d0
}
    a4ce:	\----> movea.l (sp)+,a6
    a4d0:	       lea 16(sp),sp
    a4d4:	       rts

0000a4d6 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    a4d6:	    move.l d2,-(sp)
	me->x = x;
    a4d8:	    movea.l 8(sp),a0
    a4dc:	    move.l 12(sp),(a0)
	me->y = y;
    a4e0:	    movea.l 8(sp),a0
    a4e4:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    a4ea:	    movea.l 8(sp),a0
    a4ee:	    clr.l 8(a0)
	me->oldy = 0;
    a4f2:	    movea.l 8(sp),a0
    a4f6:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    a4fa:	    movea.l 8(sp),a0
    a4fe:	    move.l 118(a0),d0
    a502:	    moveq #2,d1
    a504:	    and.l d1,d0
    a506:	/-- bne.s a55e <moveAndScale+0x88>
    a508:	|   move.w 1a138 <scaleDivide>,d0
    a50e:	+-- beq.s a55e <moveAndScale+0x88>
    a510:	|   movea.l 8(sp),a0
    a514:	|   move.l 4(a0),d2
    a518:	|   move.w 1a136 <scaleHorizon>,d0
    a51e:	|   movea.w d0,a0
    a520:	|   move.l a0,-(sp)
    a522:	|   jsr 16cd0 <__floatsisf>
    a528:	|   addq.l #4,sp
    a52a:	|   move.l d0,-(sp)
    a52c:	|   move.l d2,-(sp)
    a52e:	|   jsr 16fc4 <__subsf3>
    a534:	|   addq.l #8,sp
    a536:	|   move.l d0,d2
    a538:	|   move.w 1a138 <scaleDivide>,d0
    a53e:	|   movea.w d0,a0
    a540:	|   move.l a0,-(sp)
    a542:	|   jsr 16cd0 <__floatsisf>
    a548:	|   addq.l #4,sp
    a54a:	|   move.l d0,-(sp)
    a54c:	|   move.l d2,-(sp)
    a54e:	|   jsr 16b7c <__divsf3>
    a554:	|   addq.l #8,sp
    a556:	|   movea.l 8(sp),a0
    a55a:	|   move.l d0,32(a0)
}
    a55e:	\-> nop
    a560:	    move.l (sp)+,d2
    a562:	    rts

0000a564 <removeOneCharacter>:

void removeOneCharacter (int i) {
    a564:	          lea -16(sp),sp
    a568:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    a56a:	          move.l 24(sp),-(sp)
    a56e:	          jsr 9d8e <findPerson>
    a574:	          addq.l #4,sp
    a576:	          move.l d0,8(sp)

    if (p) {
    a57a:	/-------- beq.w a65a <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    a57e:	|         move.l 1a8cc <overRegion>,d0
    a584:	|         cmpi.l #108576,d0
    a58a:	|     /-- bne.s a5a8 <removeOneCharacter+0x44>
    a58c:	|     |   movea.l 1a8cc <overRegion>,a0
    a592:	|     |   move.l 28(a0),d1
    a596:	|     |   movea.l 8(sp),a0
    a59a:	|     |   move.l 114(a0),d0
    a59e:	|     |   cmp.l d1,d0
    a5a0:	|     +-- bne.s a5a8 <removeOneCharacter+0x44>
            overRegion = NULL;
    a5a2:	|     |   clr.l 1a8cc <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    a5a8:	|     \-> movea.l 8(sp),a0
    a5ac:	|         move.l 68(a0),d0
    a5b0:	|     /-- beq.s a5c4 <removeOneCharacter+0x60>
    a5b2:	|     |   movea.l 8(sp),a0
    a5b6:	|     |   move.l 68(a0),d0
    a5ba:	|     |   move.l d0,-(sp)
    a5bc:	|     |   jsr 3ff4 <abortFunction>
    a5c2:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    a5c4:	|     \-> movea.l 8(sp),a0
    a5c8:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    a5cc:	|         clr.l 12(sp)
    a5d0:	|     /-- bra.s a5f8 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    a5d2:	|  /--|-> movea.l 8(sp),a0
    a5d6:	|  |  |   movea.l 80(a0),a0
    a5da:	|  |  |   move.l (a0),d1
    a5dc:	|  |  |   move.l 12(sp),d0
    a5e0:	|  |  |   add.l d0,d0
    a5e2:	|  |  |   add.l d0,d0
    a5e4:	|  |  |   movea.l d1,a0
    a5e6:	|  |  |   adda.l d0,a0
    a5e8:	|  |  |   move.l (a0),d0
    a5ea:	|  |  |   move.l d0,-(sp)
    a5ec:	|  |  |   jsr 906c <deleteAnim>
    a5f2:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    a5f4:	|  |  |   addq.l #1,12(sp)
    a5f8:	|  |  \-> moveq #2,d0
    a5fa:	|  |      cmp.l 12(sp),d0
    a5fe:	|  \----- bge.s a5d2 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    a600:	|         move.l #108572,16(sp)
    a608:	|     /-- bra.s a618 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    a60a:	|  /--|-> movea.l 16(sp),a0
    a60e:	|  |  |   move.l (a0),d0
    a610:	|  |  |   moveq #36,d1
    a612:	|  |  |   add.l d0,d1
    a614:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    a618:	|  |  \-> movea.l 16(sp),a0
    a61c:	|  |      move.l (a0),d0
    a61e:	|  |      cmp.l 8(sp),d0
    a622:	|  \----- bne.s a60a <removeOneCharacter+0xa6>

        *killPeople = p->next;
    a624:	|         movea.l 8(sp),a0
    a628:	|         move.l 36(a0),d0
    a62c:	|         movea.l 16(sp),a0
    a630:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    a632:	|         movea.l 8(sp),a0
    a636:	|         move.l 114(a0),d0
    a63a:	|         move.l d0,-(sp)
    a63c:	|         jsr cfa8 <removeObjectType>
    a642:	|         addq.l #4,sp
        FreeVec(p);
    a644:	|         move.l 8(sp),4(sp)
    a64a:	|         move.l 1a7a4 <SysBase>,d0
    a650:	|         movea.l d0,a6
    a652:	|         movea.l 4(sp),a1
    a656:	|         jsr -690(a6)
    }
}
    a65a:	\-------> nop
    a65c:	          movea.l (sp)+,a6
    a65e:	          lea 16(sp),sp
    a662:	          rts

0000a664 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    a664:	       subq.l #8,sp
    a666:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    a668:	       movea.l 16(sp),a0
    a66c:	       movea.l 80(a0),a0
    a670:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    a676:	       movea.l 16(sp),a0
    a67a:	       move.l 92(a0),d2
    a67e:	       move.l 4(sp),-(sp)
    a682:	       pea b4 <_start+0xb4>
    a686:	       jsr 172d0 <__divsi3>
    a68c:	       addq.l #8,sp
    a68e:	       add.l d2,d0
    a690:	       move.l d0,d1
    a692:	       addi.l #180,d1
    a698:	       movea.l 16(sp),a0
    a69c:	       move.l 100(a0),d0
    a6a0:	       move.l d1,d2
    a6a2:	       add.l d0,d2
    a6a4:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    a6a8:	   /-- bra.s a6b2 <rethinkAngle+0x4e>
    a6aa:	/--|-> addi.l #-360,8(sp)
    a6b2:	|  \-> cmpi.l #359,8(sp)
    a6ba:	\----- bgt.s a6aa <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    a6bc:	       move.l 4(sp),-(sp)
    a6c0:	       move.l 12(sp),-(sp)
    a6c4:	       jsr 17252 <__mulsi3>
    a6ca:	       addq.l #8,sp
    a6cc:	       pea 168 <decodeFilename+0x50>
    a6d0:	       move.l d0,-(sp)
    a6d2:	       jsr 172d0 <__divsi3>
    a6d8:	       addq.l #8,sp
    a6da:	       movea.l 16(sp),a0
    a6de:	       move.l d0,106(a0)
}
    a6e2:	       nop
    a6e4:	       move.l (sp)+,d2
    a6e6:	       addq.l #8,sp
    a6e8:	       rts

0000a6ea <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    a6ea:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    a6ec:	          movea.l 8(sp),a0
    a6f0:	          move.l 8(a0),d0
    a6f4:	          move.l 12(sp),-(sp)
    a6f8:	          move.l d0,-(sp)
    a6fa:	          jsr 8d0 <put2bytes>
    a700:	          addq.l #8,sp
	if (p -> numFrames) {
    a702:	          movea.l 8(sp),a0
    a706:	          move.l 8(a0),d0
    a70a:	/-------- beq.w a7ae <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    a70e:	|         movea.l 8(sp),a0
    a712:	|         movea.l (a0),a0
    a714:	|         move.l (a0),d0
    a716:	|         move.l 12(sp),-(sp)
    a71a:	|         move.l d0,-(sp)
    a71c:	|         jsr 958 <put4bytes>
    a722:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    a724:	|         clr.l (sp)
    a726:	|     /-- bra.s a7a0 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    a728:	|  /--|-> movea.l 8(sp),a0
    a72c:	|  |  |   movea.l 4(a0),a0
    a730:	|  |  |   move.l (sp),d1
    a732:	|  |  |   move.l d1,d0
    a734:	|  |  |   add.l d0,d0
    a736:	|  |  |   add.l d1,d0
    a738:	|  |  |   add.l d0,d0
    a73a:	|  |  |   add.l d0,d0
    a73c:	|  |  |   adda.l d0,a0
    a73e:	|  |  |   move.l (a0),d0
    a740:	|  |  |   move.l 12(sp),-(sp)
    a744:	|  |  |   move.l d0,-(sp)
    a746:	|  |  |   jsr 958 <put4bytes>
    a74c:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    a74e:	|  |  |   movea.l 8(sp),a0
    a752:	|  |  |   movea.l 4(a0),a0
    a756:	|  |  |   move.l (sp),d1
    a758:	|  |  |   move.l d1,d0
    a75a:	|  |  |   add.l d0,d0
    a75c:	|  |  |   add.l d1,d0
    a75e:	|  |  |   add.l d0,d0
    a760:	|  |  |   add.l d0,d0
    a762:	|  |  |   adda.l d0,a0
    a764:	|  |  |   move.l 4(a0),d0
    a768:	|  |  |   move.l 12(sp),-(sp)
    a76c:	|  |  |   move.l d0,-(sp)
    a76e:	|  |  |   jsr 958 <put4bytes>
    a774:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    a776:	|  |  |   movea.l 8(sp),a0
    a77a:	|  |  |   movea.l 4(a0),a0
    a77e:	|  |  |   move.l (sp),d1
    a780:	|  |  |   move.l d1,d0
    a782:	|  |  |   add.l d0,d0
    a784:	|  |  |   add.l d1,d0
    a786:	|  |  |   add.l d0,d0
    a788:	|  |  |   add.l d0,d0
    a78a:	|  |  |   adda.l d0,a0
    a78c:	|  |  |   move.l 8(a0),d0
    a790:	|  |  |   move.l 12(sp),-(sp)
    a794:	|  |  |   move.l d0,-(sp)
    a796:	|  |  |   jsr 958 <put4bytes>
    a79c:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    a79e:	|  |  |   addq.l #1,(sp)
    a7a0:	|  |  \-> movea.l 8(sp),a0
    a7a4:	|  |      move.l 8(a0),d0
    a7a8:	|  |      cmp.l (sp),d0
    a7aa:	|  \----- bgt.w a728 <saveAnim+0x3e>
		}
	}
	return TRUE;
    a7ae:	\-------> moveq #1,d0
}
    a7b0:	          addq.l #4,sp
    a7b2:	          rts

0000a7b4 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    a7b4:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    a7b6:	             movea.l 8(sp),a0
    a7ba:	             move.l 4(a0),d0
    a7be:	             move.l 12(sp),-(sp)
    a7c2:	             move.l d0,-(sp)
    a7c4:	             jsr 8d0 <put2bytes>
    a7ca:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    a7cc:	             clr.l (sp)
    a7ce:	   /-------- bra.s a7fa <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    a7d0:	/--|-------> movea.l 8(sp),a0
    a7d4:	|  |         move.l (a0),d1
    a7d6:	|  |         move.l (sp),d0
    a7d8:	|  |         add.l d0,d0
    a7da:	|  |         add.l d0,d0
    a7dc:	|  |         movea.l d1,a0
    a7de:	|  |         adda.l d0,a0
    a7e0:	|  |         move.l (a0),d0
    a7e2:	|  |         move.l 12(sp),-(sp)
    a7e6:	|  |         move.l d0,-(sp)
    a7e8:	|  |         jsr a6ea <saveAnim>
    a7ee:	|  |         addq.l #8,sp
    a7f0:	|  |         tst.w d0
    a7f2:	|  |     /-- bne.s a7f8 <saveCostume+0x44>
    a7f4:	|  |     |   clr.w d0
    a7f6:	|  |  /--|-- bra.s a80e <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    a7f8:	|  |  |  \-> addq.l #1,(sp)
    a7fa:	|  \--|----> movea.l 8(sp),a0
    a7fe:	|     |      move.l 4(a0),d1
    a802:	|     |      move.l d1,d0
    a804:	|     |      add.l d0,d0
    a806:	|     |      add.l d1,d0
    a808:	|     |      cmp.l (sp),d0
    a80a:	\-----|----- bgt.s a7d0 <saveCostume+0x1c>
	}

	return TRUE;
    a80c:	      |      moveq #1,d0
}
    a80e:	      \----> addq.l #4,sp
    a810:	             rts

0000a812 <savePeople>:

BOOL savePeople (BPTR fp) {
    a812:	             lea -144(sp),sp
    a816:	             move.l a6,-(sp)
    a818:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    a81a:	             move.l 1a81c <allPeople>,148(sp)
	int countPeople = 0, a;
    a822:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    a826:	             move.w 1a136 <scaleHorizon>,d0
    a82c:	             movea.w d0,a0
    a82e:	             move.l 156(sp),-(sp)
    a832:	             move.l a0,-(sp)
    a834:	             jsr a9c <putSigned>
    a83a:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    a83c:	             move.w 1a138 <scaleDivide>,d0
    a842:	             movea.w d0,a0
    a844:	             move.l 156(sp),-(sp)
    a848:	             move.l a0,-(sp)
    a84a:	             jsr a9c <putSigned>
    a850:	             addq.l #8,sp

	while (me) {
    a852:	         /-- bra.s a862 <savePeople+0x50>
		countPeople ++;
    a854:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    a858:	      |  |   movea.l 148(sp),a0
    a85c:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    a862:	      |  \-> tst.l 148(sp)
    a866:	      \----- bne.s a854 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    a868:	             move.l 156(sp),-(sp)
    a86c:	             move.l 148(sp),-(sp)
    a870:	             jsr 8d0 <put2bytes>
    a876:	             addq.l #8,sp

	me = allPeople;
    a878:	             move.l 1a81c <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    a880:	             clr.l 140(sp)
    a884:	   /-------- bra.w acdc <savePeople+0x4ca>

		putFloat (me -> x, fp);
    a888:	/--|-------> movea.l 148(sp),a0
    a88c:	|  |         move.l (a0),d0
    a88e:	|  |         move.l 156(sp),-(sp)
    a892:	|  |         move.l d0,-(sp)
    a894:	|  |         jsr a46 <putFloat>
    a89a:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    a89c:	|  |         movea.l 148(sp),a0
    a8a0:	|  |         move.l 4(a0),d0
    a8a4:	|  |         move.l 156(sp),-(sp)
    a8a8:	|  |         move.l d0,-(sp)
    a8aa:	|  |         jsr a46 <putFloat>
    a8b0:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    a8b2:	|  |         movea.l 148(sp),a0
    a8b6:	|  |         move.l 80(a0),d0
    a8ba:	|  |         move.l 156(sp),-(sp)
    a8be:	|  |         move.l d0,-(sp)
    a8c0:	|  |         jsr a7b4 <saveCostume>
    a8c6:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    a8c8:	|  |         movea.l 148(sp),a0
    a8cc:	|  |         move.l 72(a0),d0
    a8d0:	|  |         move.l 156(sp),-(sp)
    a8d4:	|  |         move.l d0,-(sp)
    a8d6:	|  |         jsr a6ea <saveAnim>
    a8dc:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    a8de:	|  |         move.l 156(sp),136(sp)
    a8e4:	|  |         movea.l 148(sp),a0
    a8e8:	|  |         move.l 72(a0),d1
    a8ec:	|  |         movea.l 148(sp),a0
    a8f0:	|  |         move.l 76(a0),d0
    a8f4:	|  |         cmp.l d1,d0
    a8f6:	|  |         seq d0
    a8f8:	|  |         neg.b d0
    a8fa:	|  |         move.b d0,d0
    a8fc:	|  |         andi.l #255,d0
    a902:	|  |         move.l d0,132(sp)
    a906:	|  |         move.l 1a7ac <DOSBase>,d0
    a90c:	|  |         movea.l d0,a6
    a90e:	|  |         move.l 136(sp),d1
    a912:	|  |         move.l 132(sp),d2
    a916:	|  |         jsr -312(a6)
    a91a:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    a91e:	|  |         movea.l 148(sp),a0
    a922:	|  |         move.l 32(a0),d0
    a926:	|  |         move.l 156(sp),-(sp)
    a92a:	|  |         move.l d0,-(sp)
    a92c:	|  |         jsr a46 <putFloat>
    a932:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    a934:	|  |         movea.l 148(sp),a0
    a938:	|  |         move.l 118(a0),d0
    a93c:	|  |         move.l 156(sp),-(sp)
    a940:	|  |         move.l d0,-(sp)
    a942:	|  |         jsr 8d0 <put2bytes>
    a948:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    a94a:	|  |         movea.l 148(sp),a0
    a94e:	|  |         move.l 20(a0),d0
    a952:	|  |         move.l 156(sp),-(sp)
    a956:	|  |         move.l d0,-(sp)
    a958:	|  |         jsr 8d0 <put2bytes>
    a95e:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    a960:	|  |         movea.l 148(sp),a0
    a964:	|  |         move.l 40(a0),d0
    a968:	|  |         move.l 156(sp),-(sp)
    a96c:	|  |         move.l d0,-(sp)
    a96e:	|  |         jsr 8d0 <put2bytes>
    a974:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    a976:	|  |         movea.l 148(sp),a0
    a97a:	|  |         move.l 44(a0),d0
    a97e:	|  |         move.l 156(sp),-(sp)
    a982:	|  |         move.l d0,-(sp)
    a984:	|  |         jsr 8d0 <put2bytes>
    a98a:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    a98c:	|  |         movea.l 148(sp),a0
    a990:	|  |         move.l 48(a0),d0
    a994:	|  |         move.l 156(sp),-(sp)
    a998:	|  |         move.l d0,-(sp)
    a99a:	|  |         jsr 8d0 <put2bytes>
    a9a0:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    a9a2:	|  |         movea.l 148(sp),a0
    a9a6:	|  |         move.l 52(a0),d0
    a9aa:	|  |         move.l 156(sp),-(sp)
    a9ae:	|  |         move.l d0,-(sp)
    a9b0:	|  |         jsr 8d0 <put2bytes>
    a9b6:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    a9b8:	|  |         movea.l 148(sp),a0
    a9bc:	|  |         move.l 84(a0),d0
    a9c0:	|  |         move.l 156(sp),-(sp)
    a9c4:	|  |         move.l d0,-(sp)
    a9c6:	|  |         jsr 8d0 <put2bytes>
    a9cc:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    a9ce:	|  |         movea.l 148(sp),a0
    a9d2:	|  |         move.l 88(a0),d0
    a9d6:	|  |         move.l 156(sp),-(sp)
    a9da:	|  |         move.l d0,-(sp)
    a9dc:	|  |         jsr 8d0 <put2bytes>
    a9e2:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    a9e4:	|  |         movea.l 148(sp),a0
    a9e8:	|  |         move.l 28(a0),d0
    a9ec:	|  |         move.l 156(sp),-(sp)
    a9f0:	|  |         move.l d0,-(sp)
    a9f2:	|  |         jsr 8d0 <put2bytes>
    a9f8:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    a9fa:	|  |         movea.l 148(sp),a0
    a9fe:	|  |         move.l 122(a0),d0
    aa02:	|  |         move.l 156(sp),-(sp)
    aa06:	|  |         move.l d0,-(sp)
    aa08:	|  |         jsr 8d0 <put2bytes>
    aa0e:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    aa10:	|  |         movea.l 148(sp),a0
    aa14:	|  |         move.l 24(a0),d0
    aa18:	|  |         move.l d0,d0
    aa1a:	|  |         movea.w d0,a0
    aa1c:	|  |         move.l 156(sp),-(sp)
    aa20:	|  |         move.l a0,-(sp)
    aa22:	|  |         jsr a9c <putSigned>
    aa28:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    aa2a:	|  |         move.l 156(sp),124(sp)
    aa30:	|  |         movea.l 148(sp),a0
    aa34:	|  |         move.w 104(a0),d0
    aa38:	|  |         movea.w d0,a0
    aa3a:	|  |         move.l a0,120(sp)
    aa3e:	|  |         move.l 1a7ac <DOSBase>,d0
    aa44:	|  |         movea.l d0,a6
    aa46:	|  |         move.l 124(sp),d1
    aa4a:	|  |         move.l 120(sp),d2
    aa4e:	|  |         jsr -312(a6)
    aa52:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    aa56:	|  |         move.l 156(sp),112(sp)
    aa5c:	|  |         movea.l 148(sp),a0
    aa60:	|  |         move.w 64(a0),d0
    aa64:	|  |         movea.w d0,a0
    aa66:	|  |         move.l a0,108(sp)
    aa6a:	|  |         move.l 1a7ac <DOSBase>,d0
    aa70:	|  |         movea.l d0,a6
    aa72:	|  |         move.l 112(sp),d1
    aa76:	|  |         move.l 108(sp),d2
    aa7a:	|  |         jsr -312(a6)
    aa7e:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    aa82:	|  |         move.l 156(sp),100(sp)
    aa88:	|  |         movea.l 148(sp),a0
    aa8c:	|  |         move.w 66(a0),d0
    aa90:	|  |         movea.w d0,a0
    aa92:	|  |         move.l a0,96(sp)
    aa96:	|  |         move.l 1a7ac <DOSBase>,d0
    aa9c:	|  |         movea.l d0,a6
    aa9e:	|  |         move.l 100(sp),d1
    aaa2:	|  |         move.l 96(sp),d2
    aaa6:	|  |         jsr -312(a6)
    aaaa:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    aaae:	|  |         movea.l 148(sp),a0
    aab2:	|  |         move.l 68(a0),d0
    aab6:	|  |  /----- beq.s aaf4 <savePeople+0x2e2>
			FPutC (fp, 1);
    aab8:	|  |  |      move.l 156(sp),76(sp)
    aabe:	|  |  |      moveq #1,d0
    aac0:	|  |  |      move.l d0,72(sp)
    aac4:	|  |  |      move.l 1a7ac <DOSBase>,d0
    aaca:	|  |  |      movea.l d0,a6
    aacc:	|  |  |      move.l 76(sp),d1
    aad0:	|  |  |      move.l 72(sp),d2
    aad4:	|  |  |      jsr -312(a6)
    aad8:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    aadc:	|  |  |      movea.l 148(sp),a0
    aae0:	|  |  |      move.l 68(a0),d0
    aae4:	|  |  |      move.l 156(sp),-(sp)
    aae8:	|  |  |      move.l d0,-(sp)
    aaea:	|  |  |      jsr bc8a <saveFunction>
    aaf0:	|  |  |      addq.l #8,sp
    aaf2:	|  |  |  /-- bra.s ab18 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    aaf4:	|  |  \--|-> move.l 156(sp),88(sp)
    aafa:	|  |     |   moveq #1,d0
    aafc:	|  |     |   move.l d0,84(sp)
    ab00:	|  |     |   move.l 1a7ac <DOSBase>,d0
    ab06:	|  |     |   movea.l d0,a6
    ab08:	|  |     |   move.l 88(sp),d1
    ab0c:	|  |     |   move.l 84(sp),d2
    ab10:	|  |     |   jsr -312(a6)
    ab14:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    ab18:	|  |     \-> movea.l 148(sp),a0
    ab1c:	|  |         move.l 106(a0),d0
    ab20:	|  |         move.l 156(sp),-(sp)
    ab24:	|  |         move.l d0,-(sp)
    ab26:	|  |         jsr 8d0 <put2bytes>
    ab2c:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    ab2e:	|  |         movea.l 148(sp),a0
    ab32:	|  |         move.l 92(a0),d0
    ab36:	|  |         move.l 156(sp),-(sp)
    ab3a:	|  |         move.l d0,-(sp)
    ab3c:	|  |         jsr 8d0 <put2bytes>
    ab42:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    ab44:	|  |         movea.l 148(sp),a0
    ab48:	|  |         move.l 100(a0),d0
    ab4c:	|  |         move.l 156(sp),-(sp)
    ab50:	|  |         move.l d0,-(sp)
    ab52:	|  |         jsr 8d0 <put2bytes>
    ab58:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    ab5a:	|  |         movea.l 148(sp),a0
    ab5e:	|  |         move.l 96(a0),d0
    ab62:	|  |         move.l 156(sp),-(sp)
    ab66:	|  |         move.l d0,-(sp)
    ab68:	|  |         jsr 8d0 <put2bytes>
    ab6e:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    ab70:	|  |         movea.l 148(sp),a0
    ab74:	|  |         move.l 110(a0),d0
    ab78:	|  |         move.l d0,d0
    ab7a:	|  |         movea.w d0,a0
    ab7c:	|  |         move.l 156(sp),-(sp)
    ab80:	|  |         move.l a0,-(sp)
    ab82:	|  |         jsr a9c <putSigned>
    ab88:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    ab8a:	|  |         movea.l 148(sp),a0
    ab8e:	|  |         move.l 56(a0),d0
    ab92:	|  |         move.l d0,d0
    ab94:	|  |         movea.w d0,a0
    ab96:	|  |         move.l 156(sp),-(sp)
    ab9a:	|  |         move.l a0,-(sp)
    ab9c:	|  |         jsr a9c <putSigned>
    aba2:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    aba4:	|  |         movea.l 148(sp),a0
    aba8:	|  |         move.l 60(a0),d0
    abac:	|  |         move.l d0,d0
    abae:	|  |         movea.w d0,a0
    abb0:	|  |         move.l 156(sp),-(sp)
    abb4:	|  |         move.l a0,-(sp)
    abb6:	|  |         jsr a9c <putSigned>
    abbc:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    abbe:	|  |         move.l 156(sp),64(sp)
    abc4:	|  |         movea.l 148(sp),a0
    abc8:	|  |         move.b 126(a0),d0
    abcc:	|  |         move.b d0,d0
    abce:	|  |         andi.l #255,d0
    abd4:	|  |         move.l d0,60(sp)
    abd8:	|  |         move.l 1a7ac <DOSBase>,d0
    abde:	|  |         movea.l d0,a6
    abe0:	|  |         move.l 64(sp),d1
    abe4:	|  |         move.l 60(sp),d2
    abe8:	|  |         jsr -312(a6)
    abec:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    abf0:	|  |         move.l 156(sp),52(sp)
    abf6:	|  |         movea.l 148(sp),a0
    abfa:	|  |         move.b 127(a0),d0
    abfe:	|  |         move.b d0,d0
    ac00:	|  |         andi.l #255,d0
    ac06:	|  |         move.l d0,48(sp)
    ac0a:	|  |         move.l 1a7ac <DOSBase>,d0
    ac10:	|  |         movea.l d0,a6
    ac12:	|  |         move.l 52(sp),d1
    ac16:	|  |         move.l 48(sp),d2
    ac1a:	|  |         jsr -312(a6)
    ac1e:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    ac22:	|  |         move.l 156(sp),40(sp)
    ac28:	|  |         movea.l 148(sp),a0
    ac2c:	|  |         move.b 128(a0),d0
    ac30:	|  |         move.b d0,d0
    ac32:	|  |         andi.l #255,d0
    ac38:	|  |         move.l d0,36(sp)
    ac3c:	|  |         move.l 1a7ac <DOSBase>,d0
    ac42:	|  |         movea.l d0,a6
    ac44:	|  |         move.l 40(sp),d1
    ac48:	|  |         move.l 36(sp),d2
    ac4c:	|  |         jsr -312(a6)
    ac50:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    ac54:	|  |         move.l 156(sp),28(sp)
    ac5a:	|  |         movea.l 148(sp),a0
    ac5e:	|  |         move.b 129(a0),d0
    ac62:	|  |         move.b d0,d0
    ac64:	|  |         andi.l #255,d0
    ac6a:	|  |         move.l d0,24(sp)
    ac6e:	|  |         move.l 1a7ac <DOSBase>,d0
    ac74:	|  |         movea.l d0,a6
    ac76:	|  |         move.l 28(sp),d1
    ac7a:	|  |         move.l 24(sp),d2
    ac7e:	|  |         jsr -312(a6)
    ac82:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    ac86:	|  |         move.l 156(sp),16(sp)
    ac8c:	|  |         movea.l 148(sp),a0
    ac90:	|  |         move.b 130(a0),d0
    ac94:	|  |         move.b d0,d0
    ac96:	|  |         andi.l #255,d0
    ac9c:	|  |         move.l d0,12(sp)
    aca0:	|  |         move.l 1a7ac <DOSBase>,d0
    aca6:	|  |         movea.l d0,a6
    aca8:	|  |         move.l 16(sp),d1
    acac:	|  |         move.l 12(sp),d2
    acb0:	|  |         jsr -312(a6)
    acb4:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    acb8:	|  |         movea.l 148(sp),a0
    acbc:	|  |         move.l 114(a0),d0
    acc0:	|  |         move.l 156(sp),-(sp)
    acc4:	|  |         move.l d0,-(sp)
    acc6:	|  |         jsr d048 <saveObjectRef>
    accc:	|  |         addq.l #8,sp

		me = me -> next;
    acce:	|  |         movea.l 148(sp),a0
    acd2:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    acd8:	|  |         addq.l #1,140(sp)
    acdc:	|  \-------> movea.l 140(sp),a0
    ace0:	|            cmpa.l 144(sp),a0
    ace4:	\----------- blt.w a888 <savePeople+0x76>
	}
	return TRUE;
    ace8:	             moveq #1,d0
}
    acea:	             move.l (sp)+,d2
    acec:	             movea.l (sp)+,a6
    acee:	             lea 144(sp),sp
    acf2:	             rts

0000acf4 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    acf4:	movea.l 4(sp),a0
    acf8:	move.l 8(sp),(a0)
}
    acfc:	nop
    acfe:	rts

0000ad00 <setDrawMode>:


void setDrawMode (int h, int ob) {
    ad00:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    ad02:	       move.l 12(sp),-(sp)
    ad06:	       jsr 9d8e <findPerson>
    ad0c:	       addq.l #4,sp
    ad0e:	       move.l d0,(sp)
	if (! moveMe) return;
    ad10:	/----- beq.s ad24 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    ad12:	|      move.l 8(sp),-(sp)
    ad16:	|      move.l 4(sp),-(sp)
    ad1a:	|      jsr ad2a <setMyDrawMode>
    ad20:	|      addq.l #8,sp
    ad22:	|  /-- bra.s ad26 <setDrawMode+0x26>
	if (! moveMe) return;
    ad24:	\--|-> nop
}
    ad26:	   \-> addq.l #4,sp
    ad28:	       rts

0000ad2a <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    ad2a:	       moveq #19,d0
    ad2c:	       cmp.l 8(sp),d0
    ad30:	/----- bcs.w b208 <setMyDrawMode+0x4de>
    ad34:	|      move.l 8(sp),d0
    ad38:	|      add.l d0,d0
    ad3a:	|      movea.l d0,a0
    ad3c:	|      adda.l #44360,a0
    ad42:	|      move.w (a0),d0
    ad44:	|      jmp (ad48 <setMyDrawMode+0x1e>,pc,d0.w)
    ad48:	|      .short 0x04c0
    ad4a:	|      ori.l #6684712,-(a4)
    ad50:	|      btst d0,-(a0)
    ad52:	|      bchg d0,(a6)+
    ad54:	|      bclr d0,(a4)+
    ad56:	|      bset d0,(a2)+
    ad58:	|      andi.b #84,(a6)
    ad5c:	|      andi.l #55575312,(a2)
    ad62:	|      .short 0x02d0
    ad64:	|      bclr d1,(a0)
    ad66:	|      .short 0x044a
    ad68:	|      .short 0x040c
    ad6a:	|      movep.l d1,1158(a6)
    ad6e:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ad70:	|      movea.l 4(sp),a0
    ad74:	|      clr.b 128(a0)
    ad78:	|      movea.l 4(sp),a0
    ad7c:	|      move.b 128(a0),d0
    ad80:	|      movea.l 4(sp),a0
    ad84:	|      move.b d0,127(a0)
    ad88:	|      movea.l 4(sp),a0
    ad8c:	|      move.b 127(a0),d0
    ad90:	|      movea.l 4(sp),a0
    ad94:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    ad98:	|      movea.l 4(sp),a0
    ad9c:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    ada0:	|      movea.l 4(sp),a0
    ada4:	|      move.b #64,130(a0)
			break;
    adaa:	|  /-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    adae:	|  |   movea.l 4(sp),a0
    adb2:	|  |   clr.b 128(a0)
    adb6:	|  |   movea.l 4(sp),a0
    adba:	|  |   move.b 128(a0),d0
    adbe:	|  |   movea.l 4(sp),a0
    adc2:	|  |   move.b d0,127(a0)
    adc6:	|  |   movea.l 4(sp),a0
    adca:	|  |   move.b 127(a0),d0
    adce:	|  |   movea.l 4(sp),a0
    add2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    add6:	|  |   movea.l 4(sp),a0
    adda:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    adde:	|  |   movea.l 4(sp),a0
    ade2:	|  |   move.b #-128,130(a0)
			break;
    ade8:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    adec:	|  |   movea.l 4(sp),a0
    adf0:	|  |   clr.b 128(a0)
    adf4:	|  |   movea.l 4(sp),a0
    adf8:	|  |   move.b 128(a0),d0
    adfc:	|  |   movea.l 4(sp),a0
    ae00:	|  |   move.b d0,127(a0)
    ae04:	|  |   movea.l 4(sp),a0
    ae08:	|  |   move.b 127(a0),d0
    ae0c:	|  |   movea.l 4(sp),a0
    ae10:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    ae14:	|  |   movea.l 4(sp),a0
    ae18:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    ae1c:	|  |   movea.l 4(sp),a0
    ae20:	|  |   move.b #-64,130(a0)
			break;
    ae26:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ae2a:	|  |   movea.l 4(sp),a0
    ae2e:	|  |   clr.b 128(a0)
    ae32:	|  |   movea.l 4(sp),a0
    ae36:	|  |   move.b 128(a0),d0
    ae3a:	|  |   movea.l 4(sp),a0
    ae3e:	|  |   move.b d0,127(a0)
    ae42:	|  |   movea.l 4(sp),a0
    ae46:	|  |   move.b 127(a0),d0
    ae4a:	|  |   movea.l 4(sp),a0
    ae4e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    ae52:	|  |   movea.l 4(sp),a0
    ae56:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    ae5a:	|  |   movea.l 4(sp),a0
    ae5e:	|  |   move.b #-2,130(a0)
			break;
    ae64:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ae68:	|  |   movea.l 4(sp),a0
    ae6c:	|  |   clr.b 128(a0)
    ae70:	|  |   movea.l 4(sp),a0
    ae74:	|  |   move.b 128(a0),d0
    ae78:	|  |   movea.l 4(sp),a0
    ae7c:	|  |   move.b d0,127(a0)
    ae80:	|  |   movea.l 4(sp),a0
    ae84:	|  |   move.b 127(a0),d0
    ae88:	|  |   movea.l 4(sp),a0
    ae8c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    ae90:	|  |   movea.l 4(sp),a0
    ae94:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    ae9a:	|  |   movea.l 4(sp),a0
    ae9e:	|  |   clr.b 130(a0)
			break;
    aea2:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    aea6:	|  |   movea.l 4(sp),a0
    aeaa:	|  |   clr.b 128(a0)
    aeae:	|  |   movea.l 4(sp),a0
    aeb2:	|  |   move.b 128(a0),d0
    aeb6:	|  |   movea.l 4(sp),a0
    aeba:	|  |   move.b d0,127(a0)
    aebe:	|  |   movea.l 4(sp),a0
    aec2:	|  |   move.b 127(a0),d0
    aec6:	|  |   movea.l 4(sp),a0
    aeca:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    aece:	|  |   movea.l 4(sp),a0
    aed2:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    aed8:	|  |   movea.l 4(sp),a0
    aedc:	|  |   clr.b 130(a0)
			break;
    aee0:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    aee4:	|  |   movea.l 4(sp),a0
    aee8:	|  |   clr.b 128(a0)
    aeec:	|  |   movea.l 4(sp),a0
    aef0:	|  |   move.b 128(a0),d0
    aef4:	|  |   movea.l 4(sp),a0
    aef8:	|  |   move.b d0,127(a0)
    aefc:	|  |   movea.l 4(sp),a0
    af00:	|  |   move.b 127(a0),d0
    af04:	|  |   movea.l 4(sp),a0
    af08:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    af0c:	|  |   movea.l 4(sp),a0
    af10:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    af16:	|  |   movea.l 4(sp),a0
    af1a:	|  |   clr.b 130(a0)
			break;
    af1e:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    af22:	|  |   movea.l 4(sp),a0
    af26:	|  |   clr.b 128(a0)
    af2a:	|  |   movea.l 4(sp),a0
    af2e:	|  |   move.b 128(a0),d0
    af32:	|  |   movea.l 4(sp),a0
    af36:	|  |   move.b d0,127(a0)
    af3a:	|  |   movea.l 4(sp),a0
    af3e:	|  |   move.b 127(a0),d0
    af42:	|  |   movea.l 4(sp),a0
    af46:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    af4a:	|  |   movea.l 4(sp),a0
    af4e:	|  |   st 129(a0)
			moveMe->transparency = 0;
    af52:	|  |   movea.l 4(sp),a0
    af56:	|  |   clr.b 130(a0)
			break;
    af5a:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    af5e:	|  |   movea.l 4(sp),a0
    af62:	|  |   clr.b 128(a0)
    af66:	|  |   movea.l 4(sp),a0
    af6a:	|  |   move.b 128(a0),d0
    af6e:	|  |   movea.l 4(sp),a0
    af72:	|  |   move.b d0,127(a0)
    af76:	|  |   movea.l 4(sp),a0
    af7a:	|  |   move.b 127(a0),d0
    af7e:	|  |   movea.l 4(sp),a0
    af82:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    af86:	|  |   movea.l 4(sp),a0
    af8a:	|  |   st 129(a0)
			moveMe->transparency = 64;
    af8e:	|  |   movea.l 4(sp),a0
    af92:	|  |   move.b #64,130(a0)
			break;
    af98:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    af9c:	|  |   movea.l 4(sp),a0
    afa0:	|  |   clr.b 128(a0)
    afa4:	|  |   movea.l 4(sp),a0
    afa8:	|  |   move.b 128(a0),d0
    afac:	|  |   movea.l 4(sp),a0
    afb0:	|  |   move.b d0,127(a0)
    afb4:	|  |   movea.l 4(sp),a0
    afb8:	|  |   move.b 127(a0),d0
    afbc:	|  |   movea.l 4(sp),a0
    afc0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    afc4:	|  |   movea.l 4(sp),a0
    afc8:	|  |   st 129(a0)
			moveMe->transparency = 128;
    afcc:	|  |   movea.l 4(sp),a0
    afd0:	|  |   move.b #-128,130(a0)
			break;
    afd6:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    afda:	|  |   movea.l 4(sp),a0
    afde:	|  |   clr.b 128(a0)
    afe2:	|  |   movea.l 4(sp),a0
    afe6:	|  |   move.b 128(a0),d0
    afea:	|  |   movea.l 4(sp),a0
    afee:	|  |   move.b d0,127(a0)
    aff2:	|  |   movea.l 4(sp),a0
    aff6:	|  |   move.b 127(a0),d0
    affa:	|  |   movea.l 4(sp),a0
    affe:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b002:	|  |   movea.l 4(sp),a0
    b006:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b00a:	|  |   movea.l 4(sp),a0
    b00e:	|  |   move.b #-64,130(a0)
			break;
    b014:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b018:	|  |   movea.l 4(sp),a0
    b01c:	|  |   move.b #-128,128(a0)
    b022:	|  |   movea.l 4(sp),a0
    b026:	|  |   move.b 128(a0),d0
    b02a:	|  |   movea.l 4(sp),a0
    b02e:	|  |   move.b d0,127(a0)
    b032:	|  |   movea.l 4(sp),a0
    b036:	|  |   move.b 127(a0),d0
    b03a:	|  |   movea.l 4(sp),a0
    b03e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b042:	|  |   movea.l 4(sp),a0
    b046:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b04c:	|  |   movea.l 4(sp),a0
    b050:	|  |   clr.b 130(a0)
			break;
    b054:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b058:	|  |   movea.l 4(sp),a0
    b05c:	|  |   move.b #-128,128(a0)
    b062:	|  |   movea.l 4(sp),a0
    b066:	|  |   move.b 128(a0),d0
    b06a:	|  |   movea.l 4(sp),a0
    b06e:	|  |   move.b d0,127(a0)
    b072:	|  |   movea.l 4(sp),a0
    b076:	|  |   move.b 127(a0),d0
    b07a:	|  |   movea.l 4(sp),a0
    b07e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b082:	|  |   movea.l 4(sp),a0
    b086:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b08c:	|  |   movea.l 4(sp),a0
    b090:	|  |   clr.b 130(a0)
			break;
    b094:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b098:	|  |   movea.l 4(sp),a0
    b09c:	|  |   move.b #-128,128(a0)
    b0a2:	|  |   movea.l 4(sp),a0
    b0a6:	|  |   move.b 128(a0),d0
    b0aa:	|  |   movea.l 4(sp),a0
    b0ae:	|  |   move.b d0,127(a0)
    b0b2:	|  |   movea.l 4(sp),a0
    b0b6:	|  |   move.b 127(a0),d0
    b0ba:	|  |   movea.l 4(sp),a0
    b0be:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b0c2:	|  |   movea.l 4(sp),a0
    b0c6:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b0cc:	|  |   movea.l 4(sp),a0
    b0d0:	|  |   clr.b 130(a0)
			break;
    b0d4:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b0d8:	|  |   movea.l 4(sp),a0
    b0dc:	|  |   move.b #-128,128(a0)
    b0e2:	|  |   movea.l 4(sp),a0
    b0e6:	|  |   move.b 128(a0),d0
    b0ea:	|  |   movea.l 4(sp),a0
    b0ee:	|  |   move.b d0,127(a0)
    b0f2:	|  |   movea.l 4(sp),a0
    b0f6:	|  |   move.b 127(a0),d0
    b0fa:	|  |   movea.l 4(sp),a0
    b0fe:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b102:	|  |   movea.l 4(sp),a0
    b106:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b10a:	|  |   movea.l 4(sp),a0
    b10e:	|  |   clr.b 130(a0)
			break;
    b112:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b116:	|  |   movea.l 4(sp),a0
    b11a:	|  |   st 128(a0)
    b11e:	|  |   movea.l 4(sp),a0
    b122:	|  |   move.b 128(a0),d0
    b126:	|  |   movea.l 4(sp),a0
    b12a:	|  |   move.b d0,127(a0)
    b12e:	|  |   movea.l 4(sp),a0
    b132:	|  |   move.b 127(a0),d0
    b136:	|  |   movea.l 4(sp),a0
    b13a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b13e:	|  |   movea.l 4(sp),a0
    b142:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b148:	|  |   movea.l 4(sp),a0
    b14c:	|  |   clr.b 130(a0)
			break;
    b150:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b154:	|  |   movea.l 4(sp),a0
    b158:	|  |   st 128(a0)
    b15c:	|  |   movea.l 4(sp),a0
    b160:	|  |   move.b 128(a0),d0
    b164:	|  |   movea.l 4(sp),a0
    b168:	|  |   move.b d0,127(a0)
    b16c:	|  |   movea.l 4(sp),a0
    b170:	|  |   move.b 127(a0),d0
    b174:	|  |   movea.l 4(sp),a0
    b178:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b17c:	|  |   movea.l 4(sp),a0
    b180:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b186:	|  |   movea.l 4(sp),a0
    b18a:	|  |   clr.b 130(a0)
			break;
    b18e:	|  +-- bra.w b242 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b192:	|  |   movea.l 4(sp),a0
    b196:	|  |   st 128(a0)
    b19a:	|  |   movea.l 4(sp),a0
    b19e:	|  |   move.b 128(a0),d0
    b1a2:	|  |   movea.l 4(sp),a0
    b1a6:	|  |   move.b d0,127(a0)
    b1aa:	|  |   movea.l 4(sp),a0
    b1ae:	|  |   move.b 127(a0),d0
    b1b2:	|  |   movea.l 4(sp),a0
    b1b6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b1ba:	|  |   movea.l 4(sp),a0
    b1be:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b1c4:	|  |   movea.l 4(sp),a0
    b1c8:	|  |   clr.b 130(a0)
			break;
    b1cc:	|  +-- bra.s b242 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b1ce:	|  |   movea.l 4(sp),a0
    b1d2:	|  |   st 128(a0)
    b1d6:	|  |   movea.l 4(sp),a0
    b1da:	|  |   move.b 128(a0),d0
    b1de:	|  |   movea.l 4(sp),a0
    b1e2:	|  |   move.b d0,127(a0)
    b1e6:	|  |   movea.l 4(sp),a0
    b1ea:	|  |   move.b 127(a0),d0
    b1ee:	|  |   movea.l 4(sp),a0
    b1f2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b1f6:	|  |   movea.l 4(sp),a0
    b1fa:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b1fe:	|  |   movea.l 4(sp),a0
    b202:	|  |   clr.b 130(a0)
			break;
    b206:	|  +-- bra.s b242 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b208:	\--|-> movea.l 4(sp),a0
    b20c:	   |   clr.b 128(a0)
    b210:	   |   movea.l 4(sp),a0
    b214:	   |   move.b 128(a0),d0
    b218:	   |   movea.l 4(sp),a0
    b21c:	   |   move.b d0,127(a0)
    b220:	   |   movea.l 4(sp),a0
    b224:	   |   move.b 127(a0),d0
    b228:	   |   movea.l 4(sp),a0
    b22c:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b230:	   |   movea.l 4(sp),a0
    b234:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    b238:	   |   movea.l 4(sp),a0
    b23c:	   |   clr.b 130(a0)
			break;
    b240:	   |   nop
	}
}
    b242:	   \-> nop
    b244:	       rts

0000b246 <shufflePeople>:

void shufflePeople () {
    b246:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    b24a:	             move.l #108572,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    b252:	             move.l 1a81c <allPeople>,d0
    b258:	/----------- beq.w b32e <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    b25c:	|     /----- bra.w b31e <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    b260:	|  /--|----> movea.l 16(sp),a0
    b264:	|  |  |      movea.l (a0),a0
    b266:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    b26c:	|  |  |      movea.l 16(sp),a0
    b270:	|  |  |      movea.l (a0),a0
    b272:	|  |  |      move.l 118(a0),d0
    b276:	|  |  |      moveq #1,d1
    b278:	|  |  |      and.l d1,d0
    b27a:	|  |  |  /-- beq.s b292 <shufflePeople+0x4c>
    b27c:	|  |  |  |   move.l #1148846080,-(sp)
    b282:	|  |  |  |   move.l 16(sp),-(sp)
    b286:	|  |  |  |   jsr 16a82 <__addsf3>
    b28c:	|  |  |  |   addq.l #8,sp
    b28e:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    b292:	|  |  |  \-> movea.l 16(sp),a0
    b296:	|  |  |      movea.l (a0),a0
    b298:	|  |  |      movea.l 36(a0),a0
    b29c:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    b2a2:	|  |  |      movea.l 16(sp),a0
    b2a6:	|  |  |      movea.l (a0),a0
    b2a8:	|  |  |      movea.l 36(a0),a0
    b2ac:	|  |  |      move.l 118(a0),d0
    b2b0:	|  |  |      moveq #1,d1
    b2b2:	|  |  |      and.l d1,d0
    b2b4:	|  |  |  /-- beq.s b2cc <shufflePeople+0x86>
    b2b6:	|  |  |  |   move.l #1148846080,-(sp)
    b2bc:	|  |  |  |   move.l 12(sp),-(sp)
    b2c0:	|  |  |  |   jsr 16a82 <__addsf3>
    b2c6:	|  |  |  |   addq.l #8,sp
    b2c8:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    b2cc:	|  |  |  \-> move.l 8(sp),-(sp)
    b2d0:	|  |  |      move.l 16(sp),-(sp)
    b2d4:	|  |  |      jsr 16e3c <__gtsf2>
    b2da:	|  |  |      addq.l #8,sp
    b2dc:	|  |  |      tst.l d0
    b2de:	|  |  |  /-- ble.s b310 <shufflePeople+0xca>
			A = (*thisReference);
    b2e0:	|  |  |  |   movea.l 16(sp),a0
    b2e4:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    b2e8:	|  |  |  |   movea.l 16(sp),a0
    b2ec:	|  |  |  |   movea.l (a0),a0
    b2ee:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    b2f2:	|  |  |  |   movea.l (sp),a0
    b2f4:	|  |  |  |   move.l 36(a0),d0
    b2f8:	|  |  |  |   movea.l 4(sp),a0
    b2fc:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    b300:	|  |  |  |   movea.l (sp),a0
    b302:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    b308:	|  |  |  |   movea.l 16(sp),a0
    b30c:	|  |  |  |   move.l (sp),(a0)
    b30e:	|  |  +--|-- bra.s b31e <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    b310:	|  |  |  \-> movea.l 16(sp),a0
    b314:	|  |  |      move.l (a0),d0
    b316:	|  |  |      moveq #36,d1
    b318:	|  |  |      add.l d0,d1
    b31a:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    b31e:	|  |  \----> movea.l 16(sp),a0
    b322:	|  |         movea.l (a0),a0
    b324:	|  |         move.l 36(a0),d0
    b328:	|  \-------- bne.w b260 <shufflePeople+0x1a>
    b32c:	|        /-- bra.s b330 <shufflePeople+0xea>
	if (!allPeople) return;
    b32e:	\--------|-> nop
		}
	}
}
    b330:	         \-> lea 20(sp),sp
    b334:	             rts

0000b336 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    b336:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    b338:	       tst.l 8(sp)
    b33c:	   /-- bgt.s b342 <setCharacterWalkSpeed+0xc>
    b33e:	   |   clr.w d0
    b340:	/--|-- bra.s b360 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    b342:	|  \-> move.l 12(sp),-(sp)
    b346:	|      jsr 9d8e <findPerson>
    b34c:	|      addq.l #4,sp
    b34e:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    b350:	|  /-- bne.s b356 <setCharacterWalkSpeed+0x20>
    b352:	|  |   clr.w d0
    b354:	+--|-- bra.s b360 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    b356:	|  \-> movea.l (sp),a0
    b358:	|      move.l 8(sp),28(a0)
	return TRUE;
    b35e:	|      moveq #1,d0
}
    b360:	\----> addq.l #4,sp
    b362:	       rts

0000b364 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    b364:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    b366:	       move.l 8(sp),-(sp)
    b36a:	       jsr 9d8e <findPerson>
    b370:	       addq.l #4,sp
    b372:	       move.l d0,(sp)
    if (thisPerson) {
    b374:	/----- beq.s b394 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    b376:	|      movea.l (sp),a0
    b378:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    b37e:	|      moveq #2,d0
    b380:	|      and.l 12(sp),d0
    b384:	|  /-- beq.s b390 <setPersonExtra+0x2c>
    b386:	|  |   movea.l (sp),a0
    b388:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    b390:	|  \-> moveq #1,d0
    b392:	|  /-- bra.s b396 <setPersonExtra+0x32>
    }
    return FALSE;
    b394:	\--|-> clr.w d0
}
    b396:	   \-> addq.l #4,sp
    b398:	       rts

0000b39a <setScale>:


void setScale (short int h, short int d) {
    b39a:	subq.l #4,sp
    b39c:	move.l 8(sp),d1
    b3a0:	move.l 12(sp),d0
    b3a4:	move.w d1,d1
    b3a6:	move.w d1,2(sp)
    b3aa:	move.w d0,d0
    b3ac:	move.w d0,(sp)
	scaleHorizon = h;
    b3ae:	move.w 2(sp),1a136 <scaleHorizon>
	scaleDivide = d;
    b3b6:	move.w (sp),1a138 <scaleDivide>
}
    b3bc:	nop
    b3be:	addq.l #4,sp
    b3c0:	rts

0000b3c2 <setShown>:

void setShown (BOOL h, int ob) {
    b3c2:	    subq.l #8,sp
    b3c4:	    move.l 12(sp),d0
    b3c8:	    move.w d0,d0
    b3ca:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    b3ce:	    move.l 16(sp),-(sp)
    b3d2:	    jsr 9d8e <findPerson>
    b3d8:	    addq.l #4,sp
    b3da:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    b3de:	/-- beq.s b3ea <setShown+0x28>
    b3e0:	|   movea.l 4(sp),a0
    b3e4:	|   move.w 2(sp),104(a0)
}
    b3ea:	\-> nop
    b3ec:	    addq.l #8,sp
    b3ee:	    rts

0000b3f0 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    b3f0:	       subq.l #8,sp
    b3f2:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    b3f4:	       movea.l 16(sp),a0
    b3f8:	       move.l 92(a0),d0
    b3fc:	       move.l d0,d1
    b3fe:	       addi.l #360,d1
    b404:	       movea.l 16(sp),a0
    b408:	       move.l 96(a0),d0
    b40c:	       move.l d1,d2
    b40e:	       sub.l d0,d2
    b410:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    b414:	       movea.l 16(sp),a0
    b418:	       move.l 122(a0),d0
    b41c:	   /-- beq.s b428 <spinStep+0x38>
    b41e:	   |   movea.l 16(sp),a0
    b422:	   |   move.l 122(a0),d0
    b426:	/--|-- bra.s b442 <spinStep+0x52>
    b428:	|  \-> movea.l 16(sp),a0
    b42c:	|      movea.l 80(a0),a0
    b430:	|      move.l 4(a0),d0
    b434:	|      move.l d0,-(sp)
    b436:	|      pea 168 <decodeFilename+0x50>
    b43a:	|      jsr 172d0 <__divsi3>
    b440:	|      addq.l #8,sp
    b442:	\----> move.l d0,4(sp)
	while (diff > 180) {
    b446:	   /-- bra.s b450 <spinStep+0x60>
		diff -= 360;
    b448:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    b450:	|  \-> cmpi.l #180,8(sp)
    b458:	\----- bgt.s b448 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    b45a:	       move.l 8(sp),d0
    b45e:	       cmp.l 4(sp),d0
    b462:	   /-- blt.s b480 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    b464:	   |   movea.l 16(sp),a0
    b468:	   |   move.l 92(a0),d0
    b46c:	   |   sub.l 4(sp),d0
    b470:	   |   move.l d0,-(sp)
    b472:	   |   move.l 20(sp),-(sp)
    b476:	   |   jsr b560 <turnMeAngle>
    b47c:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    b47e:	/--|-- bra.s b4c6 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    b480:	|  \-> move.l 4(sp),d0
    b484:	|      neg.l d0
    b486:	|      cmp.l 8(sp),d0
    b48a:	|  /-- blt.s b4a8 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    b48c:	|  |   movea.l 16(sp),a0
    b490:	|  |   move.l 92(a0),d0
    b494:	|  |   add.l 4(sp),d0
    b498:	|  |   move.l d0,-(sp)
    b49a:	|  |   move.l 20(sp),-(sp)
    b49e:	|  |   jsr b560 <turnMeAngle>
    b4a4:	|  |   addq.l #8,sp
}
    b4a6:	+--|-- bra.s b4c6 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    b4a8:	|  \-> movea.l 16(sp),a0
    b4ac:	|      move.l 96(a0),d0
    b4b0:	|      move.l d0,-(sp)
    b4b2:	|      move.l 20(sp),-(sp)
    b4b6:	|      jsr b560 <turnMeAngle>
    b4bc:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    b4be:	|      movea.l 16(sp),a0
    b4c2:	|      clr.w 66(a0)
}
    b4c6:	\----> nop
    b4c8:	       move.l (sp)+,d2
    b4ca:	       addq.l #8,sp
    b4cc:	       rts

0000b4ce <stopPerson>:


BOOL stopPerson (int o) {
    b4ce:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    b4d0:	       move.l 8(sp),-(sp)
    b4d4:	       jsr 9d8e <findPerson>
    b4da:	       addq.l #4,sp
    b4dc:	       move.l d0,(sp)
    if (moveMe)
    b4de:	/----- beq.s b51c <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    b4e0:	|      movea.l (sp),a0
    b4e2:	|      move.l 68(a0),d0
    b4e6:	+----- beq.s b51c <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    b4e8:	|      movea.l (sp),a0
    b4ea:	|      move.l 68(a0),d0
    b4ee:	|      move.l d0,-(sp)
    b4f0:	|      jsr 3ff4 <abortFunction>
    b4f6:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    b4f8:	|      movea.l (sp),a0
    b4fa:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    b4fe:	|      movea.l (sp),a0
    b500:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    b504:	|      movea.l (sp),a0
    b506:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    b50a:	|      clr.l -(sp)
    b50c:	|      move.l 4(sp),-(sp)
    b510:	|      jsr 7a3e <setFrames>
    b516:	|      addq.l #8,sp
            return TRUE;
    b518:	|      moveq #1,d0
    b51a:	|  /-- bra.s b51e <stopPerson+0x50>
        }
    return FALSE;
    b51c:	\--|-> clr.w d0
}
    b51e:	   \-> addq.l #4,sp
    b520:	       rts

0000b522 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    b522:	       subq.l #8,sp
	int total = 0;
    b524:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    b528:	       clr.l (sp)
    b52a:	   /-- bra.s b54c <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    b52c:	/--|-> movea.l 12(sp),a0
    b530:	|  |   movea.l 4(a0),a0
    b534:	|  |   move.l (sp),d1
    b536:	|  |   move.l d1,d0
    b538:	|  |   add.l d0,d0
    b53a:	|  |   add.l d1,d0
    b53c:	|  |   add.l d0,d0
    b53e:	|  |   add.l d0,d0
    b540:	|  |   adda.l d0,a0
    b542:	|  |   move.l 4(a0),d0
    b546:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    b54a:	|  |   addq.l #1,(sp)
    b54c:	|  \-> movea.l 12(sp),a0
    b550:	|      move.l 8(a0),d0
    b554:	|      cmp.l (sp),d0
    b556:	\----- bgt.s b52c <timeForAnim+0xa>
	}
	return total;
    b558:	       move.l 4(sp),d0
}
    b55c:	       addq.l #8,sp
    b55e:	       rts

0000b560 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    b560:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    b562:	       movea.l 8(sp),a0
    b566:	       movea.l 80(a0),a0
    b56a:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    b56e:	       movea.l 8(sp),a0
    b572:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    b578:	       move.l (sp),-(sp)
    b57a:	       pea b4 <_start+0xb4>
    b57e:	       jsr 172d0 <__divsi3>
    b584:	       addq.l #8,sp
    b586:	       move.l d0,d1
    b588:	       addi.l #180,d1
    b58e:	       movea.l 8(sp),a0
    b592:	       move.l 100(a0),d0
    b596:	       add.l d1,d0
    b598:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    b59c:	   /-- bra.s b5a6 <turnMeAngle+0x46>
    b59e:	/--|-> addi.l #-360,12(sp)
    b5a6:	|  \-> cmpi.l #359,12(sp)
    b5ae:	\----- bgt.s b59e <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    b5b0:	       move.l (sp),-(sp)
    b5b2:	       move.l 16(sp),-(sp)
    b5b6:	       jsr 17252 <__mulsi3>
    b5bc:	       addq.l #8,sp
    b5be:	       pea 168 <decodeFilename+0x50>
    b5c2:	       move.l d0,-(sp)
    b5c4:	       jsr 172d0 <__divsi3>
    b5ca:	       addq.l #8,sp
    b5cc:	       movea.l 8(sp),a0
    b5d0:	       move.l d0,106(a0)
}
    b5d4:	       nop
    b5d6:	       addq.l #4,sp
    b5d8:	       rts

0000b5da <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    b5da:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    b5dc:	          move.l 8(sp),-(sp)
    b5e0:	          jsr 9d8e <findPerson>
    b5e6:	          addq.l #4,sp
    b5e8:	          move.l d0,(sp)
    if (thisPerson) {
    b5ea:	/-------- beq.s b64a <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    b5ec:	|         movea.l (sp),a0
    b5ee:	|         move.l 68(a0),d0
    b5f2:	|     /-- beq.s b604 <turnPersonToFace+0x2a>
    b5f4:	|     |   movea.l (sp),a0
    b5f6:	|     |   move.l 68(a0),d0
    b5fa:	|     |   move.l d0,-(sp)
    b5fc:	|     |   jsr 3ff4 <abortFunction>
    b602:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    b604:	|     \-> movea.l (sp),a0
    b606:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    b60a:	|         movea.l (sp),a0
    b60c:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    b610:	|         movea.l (sp),a0
    b612:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    b616:	|         move.l 12(sp),-(sp)
    b61a:	|         move.l 4(sp),-(sp)
    b61e:	|         jsr b560 <turnMeAngle>
    b624:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    b626:	|         movea.l 1a800 <speech>,a0
    b62c:	|         move.l (a0),d0
    b62e:	|         cmp.l (sp),d0
    b630:	|  /----- bne.s b636 <turnPersonToFace+0x5c>
    b632:	|  |      moveq #2,d0
    b634:	|  |  /-- bra.s b638 <turnPersonToFace+0x5e>
    b636:	|  \--|-> moveq #0,d0
    b638:	|     \-> move.l d0,-(sp)
    b63a:	|         move.l 4(sp),-(sp)
    b63e:	|         jsr 7a3e <setFrames>
    b644:	|         addq.l #8,sp
        return TRUE;
    b646:	|         moveq #1,d0
    b648:	|     /-- bra.s b64c <turnPersonToFace+0x72>
    }
    return FALSE;
    b64a:	\-----|-> clr.w d0
}
    b64c:	      \-> addq.l #4,sp
    b64e:	          rts

0000b650 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    b650:	                lea -20(sp),sp
    b654:	                move.l d3,-(sp)
    b656:	                move.l d2,-(sp)
    b658:	                move.l 36(sp),d0
    b65c:	                move.w d0,d0
    b65e:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    b662:	                cmpi.w #-1,10(sp)
    b668:	/-------------- bne.s b670 <walkMe+0x20>
    b66a:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    b670:	>-------------> movea.l 32(sp),a0
    b674:	|               move.l 48(a0),d0
    b678:	|               move.l d0,-(sp)
    b67a:	|               jsr 16cd0 <__floatsisf>
    b680:	|               addq.l #4,sp
    b682:	|               move.l d0,d1
    b684:	|               movea.l 32(sp),a0
    b688:	|               move.l (a0),d0
    b68a:	|               move.l d0,-(sp)
    b68c:	|               move.l d1,-(sp)
    b68e:	|               jsr 16fc4 <__subsf3>
    b694:	|               addq.l #8,sp
    b696:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    b69a:	|               movea.l 32(sp),a0
    b69e:	|               move.l 52(a0),d0
    b6a2:	|               move.l d0,-(sp)
    b6a4:	|               jsr 16cd0 <__floatsisf>
    b6aa:	|               addq.l #4,sp
    b6ac:	|               move.l d0,d1
    b6ae:	|               movea.l 32(sp),a0
    b6b2:	|               move.l 4(a0),d0
    b6b6:	|               move.l d0,-(sp)
    b6b8:	|               move.l d1,-(sp)
    b6ba:	|               jsr 16fc4 <__subsf3>
    b6c0:	|               addq.l #8,sp
    b6c2:	|               move.l d0,-(sp)
    b6c4:	|               move.l d0,-(sp)
    b6c6:	|               jsr 16a82 <__addsf3>
    b6cc:	|               addq.l #8,sp
    b6ce:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    b6d2:	|               movea.l 32(sp),a0
    b6d6:	|               move.l 32(a0),d2
    b6da:	|               movea.l 32(sp),a0
    b6de:	|               move.l 28(a0),d0
    b6e2:	|               move.l d0,-(sp)
    b6e4:	|               jsr 16cd0 <__floatsisf>
    b6ea:	|               addq.l #4,sp
    b6ec:	|               move.l d0,-(sp)
    b6ee:	|               move.l d2,-(sp)
    b6f0:	|               jsr 16d82 <__mulsf3>
    b6f6:	|               addq.l #8,sp
    b6f8:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    b6fc:	|               move.l 24(sp),-(sp)
    b700:	|               jsr 16be8 <__extendsfdf2>
    b706:	|               addq.l #4,sp
    b708:	|               move.l #-1717986918,-(sp)
    b70e:	|               move.l #1070176665,-(sp)
    b714:	|               move.l d1,-(sp)
    b716:	|               move.l d0,-(sp)
    b718:	|               jsr 16ea8 <__ltdf2>
    b71e:	|               lea 16(sp),sp
    b722:	|               tst.l d0
    b724:	|           /-- bge.s b72e <walkMe+0xde>
    b726:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    b72e:	|           \-> move.l 20(sp),-(sp)
    b732:	|               jsr 16c68 <__fixsfsi>
    b738:	|               addq.l #4,sp
    b73a:	|               move.l d0,-(sp)
    b73c:	|               jsr 897e <TF_abs>
    b742:	|               addq.l #4,sp
    b744:	|               move.l d0,d2
    b746:	|               move.l 16(sp),-(sp)
    b74a:	|               jsr 16c68 <__fixsfsi>
    b750:	|               addq.l #4,sp
    b752:	|               move.l d0,-(sp)
    b754:	|               jsr 897e <TF_abs>
    b75a:	|               addq.l #4,sp
    b75c:	|               cmp.l d2,d0
    b75e:	|        /----- bgt.s b782 <walkMe+0x132>
    b760:	|        |      move.l 20(sp),-(sp)
    b764:	|        |      jsr 16c68 <__fixsfsi>
    b76a:	|        |      addq.l #4,sp
    b76c:	|        |      move.l d0,-(sp)
    b76e:	|        |      jsr 897e <TF_abs>
    b774:	|        |      addq.l #4,sp
    b776:	|        |      move.l d0,-(sp)
    b778:	|        |      jsr 16cd0 <__floatsisf>
    b77e:	|        |      addq.l #4,sp
    b780:	|        |  /-- bra.s b7a2 <walkMe+0x152>
    b782:	|        \--|-> move.l 16(sp),-(sp)
    b786:	|           |   jsr 16c68 <__fixsfsi>
    b78c:	|           |   addq.l #4,sp
    b78e:	|           |   move.l d0,-(sp)
    b790:	|           |   jsr 897e <TF_abs>
    b796:	|           |   addq.l #4,sp
    b798:	|           |   move.l d0,-(sp)
    b79a:	|           |   jsr 16cd0 <__floatsisf>
    b7a0:	|           |   addq.l #4,sp
    b7a2:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    b7a6:	|               move.l 12(sp),-(sp)
    b7aa:	|               jsr 16c68 <__fixsfsi>
    b7b0:	|               addq.l #4,sp
    b7b2:	|               move.l d0,-(sp)
    b7b4:	|               jsr 897e <TF_abs>
    b7ba:	|               addq.l #4,sp
    b7bc:	|               move.l d0,-(sp)
    b7be:	|               jsr 16cd0 <__floatsisf>
    b7c4:	|               addq.l #4,sp
    b7c6:	|               move.l d0,-(sp)
    b7c8:	|               move.l 28(sp),-(sp)
    b7cc:	|               jsr 16ef6 <__ltsf2>
    b7d2:	|               addq.l #8,sp
    b7d4:	|               tst.l d0
    b7d6:	|        /----- bge.w b888 <walkMe+0x238>
			if (thisPerson->spinning) {
    b7da:	|        |      movea.l 32(sp),a0
    b7de:	|        |      move.w 66(a0),d0
    b7e2:	|        |  /-- beq.s b800 <walkMe+0x1b0>
				spinStep(thisPerson);
    b7e4:	|        |  |   move.l 32(sp),-(sp)
    b7e8:	|        |  |   jsr b3f0 <spinStep>
    b7ee:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    b7f0:	|        |  |   pea 1 <_start+0x1>
    b7f4:	|        |  |   move.l 36(sp),-(sp)
    b7f8:	|        |  |   jsr 7a3e <setFrames>
    b7fe:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    b800:	|        |  \-> move.l 24(sp),-(sp)
    b804:	|        |      move.l 16(sp),-(sp)
    b808:	|        |      jsr 16b7c <__divsf3>
    b80e:	|        |      addq.l #8,sp
    b810:	|        |      move.l d0,24(sp)
			if (move)
    b814:	|        |      tst.w 10(sp)
    b818:	|        |  /-- beq.s b882 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    b81a:	|        |  |   movea.l 32(sp),a0
    b81e:	|        |  |   move.l 4(a0),d2
    b822:	|        |  |   move.l 24(sp),d0
    b826:	|        |  |   move.l d0,-(sp)
    b828:	|        |  |   move.l d0,-(sp)
    b82a:	|        |  |   jsr 16a82 <__addsf3>
    b830:	|        |  |   addq.l #8,sp
    b832:	|        |  |   move.l d0,-(sp)
    b834:	|        |  |   move.l 20(sp),-(sp)
    b838:	|        |  |   jsr 16b7c <__divsf3>
    b83e:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    b840:	|        |  |   move.l d0,-(sp)
    b842:	|        |  |   move.l d2,-(sp)
    b844:	|        |  |   jsr 16a82 <__addsf3>
    b84a:	|        |  |   addq.l #8,sp
    b84c:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    b84e:	|        |  |   movea.l 32(sp),a0
    b852:	|        |  |   move.l (a0),d3
    b854:	|        |  |   move.l 24(sp),-(sp)
    b858:	|        |  |   move.l 24(sp),-(sp)
    b85c:	|        |  |   jsr 16b7c <__divsf3>
    b862:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    b864:	|        |  |   move.l d0,-(sp)
    b866:	|        |  |   move.l d3,-(sp)
    b868:	|        |  |   jsr 16a82 <__addsf3>
    b86e:	|        |  |   addq.l #8,sp
    b870:	|        |  |   move.l d2,-(sp)
    b872:	|        |  |   move.l d0,-(sp)
    b874:	|        |  |   move.l 40(sp),-(sp)
    b878:	|        |  |   jsr a4d6 <moveAndScale>
    b87e:	|        |  |   lea 12(sp),sp
			return TRUE;
    b882:	|        |  \-> moveq #1,d0
    b884:	|  /-----|----- bra.w b936 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    b888:	|  |     \----> movea.l 32(sp),a0
    b88c:	|  |            move.l 56(a0),d0
    b890:	|  |            moveq #-1,d1
    b892:	|  |            cmp.l d0,d1
    b894:	|  |        /-- bne.s b8cc <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    b896:	|  |        |   movea.l 32(sp),a0
    b89a:	|  |        |   move.l 110(a0),d0
    b89e:	|  |        |   moveq #-1,d1
    b8a0:	|  |        |   cmp.l d0,d1
    b8a2:	|  |  /-----|-- beq.s b8e0 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    b8a4:	|  |  |     |   movea.l 32(sp),a0
    b8a8:	|  |  |     |   move.l 110(a0),d0
    b8ac:	|  |  |     |   movea.l 32(sp),a0
    b8b0:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    b8b4:	|  |  |     |   movea.l 32(sp),a0
    b8b8:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    b8be:	|  |  |     |   move.l 32(sp),-(sp)
    b8c2:	|  |  |     |   jsr b3f0 <spinStep>
    b8c8:	|  |  |     |   addq.l #4,sp
			}
			break;
    b8ca:	|  |  +-----|-- bra.s b8e0 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    b8cc:	|  |  |     \-> move.l 32(sp),-(sp)
    b8d0:	|  |  |         jsr 90f0 <doBorderStuff>
    b8d6:	|  |  |         addq.l #4,sp
    b8d8:	|  |  |         tst.w d0
    b8da:	|  |  |  /----- beq.s b8e4 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    b8dc:	\--|--|--|----- bra.w b670 <walkMe+0x20>
			break;
    b8e0:	   |  \--|----> nop
    b8e2:	   |     |  /-- bra.s b8e6 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    b8e4:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    b8e6:	   |        \-> movea.l 32(sp),a0
    b8ea:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    b8ee:	   |            clr.l -(sp)
    b8f0:	   |            move.l 36(sp),-(sp)
    b8f4:	   |            jsr 7a3e <setFrames>
    b8fa:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    b8fc:	   |            movea.l 32(sp),a0
    b900:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    b904:	   |            move.l d0,-(sp)
    b906:	   |            jsr 16cd0 <__floatsisf>
    b90c:	   |            addq.l #4,sp
    b90e:	   |            move.l d0,d2
				 thisPerson->walkToX,
    b910:	   |            movea.l 32(sp),a0
    b914:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    b918:	   |            move.l d0,-(sp)
    b91a:	   |            jsr 16cd0 <__floatsisf>
    b920:	   |            addq.l #4,sp
    b922:	   |            move.l d2,-(sp)
    b924:	   |            move.l d0,-(sp)
    b926:	   |            move.l 40(sp),-(sp)
    b92a:	   |            jsr a4d6 <moveAndScale>
    b930:	   |            lea 12(sp),sp
	return FALSE;
    b934:	   |            clr.w d0
}
    b936:	   \----------> move.l (sp)+,d2
    b938:	                move.l (sp)+,d3
    b93a:	                lea 20(sp),sp
    b93e:	                rts

0000b940 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    b940:	       subq.l #8,sp
    b942:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    b944:	   /-- bra.s b974 <clearStackLib+0x34>
		k = stackLib;
    b946:	/--|-> move.l 1a848 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    b94e:	|  |   movea.l 1a848 <stackLib>,a0
    b954:	|  |   move.l 4(a0),d0
    b958:	|  |   move.l d0,1a848 <stackLib>
		FreeVec(k);
    b95e:	|  |   move.l 8(sp),4(sp)
    b964:	|  |   move.l 1a7a4 <SysBase>,d0
    b96a:	|  |   movea.l d0,a6
    b96c:	|  |   movea.l 4(sp),a1
    b970:	|  |   jsr -690(a6)
	while (stackLib) {
    b974:	|  \-> move.l 1a848 <stackLib>,d0
    b97a:	\----- bne.s b946 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    b97c:	       clr.l 1a844 <stackLibTotal>
}
    b982:	       nop
    b984:	       movea.l (sp)+,a6
    b986:	       addq.l #8,sp
    b988:	       rts

0000b98a <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    b98a:	          lea -128(sp),sp
    b98e:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    b992:	      /-- bra.s b9a4 <loadGame+0x1a>
    b994:	   /--|-> move.l 1a73c <allRunningFunctions>,d0
    b99a:	   |  |   move.l d0,-(sp)
    b99c:	   |  |   jsr 4ffc <finishFunction>
    b9a2:	   |  |   addq.l #4,sp
    b9a4:	   |  \-> move.l 1a73c <allRunningFunctions>,d0
    b9aa:	   \----- bne.s b994 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    b9ac:	          pea 1a84c <ssgVersion>
    b9b2:	          pea 1884e <PutChar+0x14e6>
    b9b8:	          pea 41 <_start+0x41>
    b9bc:	          pea 53 <_start+0x53>
    b9c0:	          move.l 160(sp),-(sp)
    b9c4:	          jsr 5db2 <openAndVerify>
    b9ca:	          lea 20(sp),sp
    b9ce:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    b9d2:	      /-- bne.s b9da <loadGame+0x50>
    b9d4:	      |   clr.w d0
    b9d6:	/-----|-- bra.w bc80 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    b9da:	|     \-> move.l 112(sp),108(sp)
    b9e0:	|         lea 140(sp),a0
    b9e4:	|         lea -126(a0),a0
    b9e8:	|         move.l a0,120(sp)
    b9ec:	|         moveq #8,d0
    b9ee:	|         move.l d0,116(sp)
    b9f2:	|         move.l 1a7ac <DOSBase>,d0
    b9f8:	|         movea.l d0,a6
    b9fa:	|         move.l 108(sp),d1
    b9fe:	|         move.l 120(sp),d2
    ba02:	|         move.l 116(sp),d3
    ba06:	|         jsr -42(a6)
    ba0a:	|         move.l d0,132(sp)
    ba0e:	|         move.l 132(sp),d0
    ba12:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    ba16:	|         moveq #8,d0
    ba18:	|         cmp.l 128(sp),d0
    ba1c:	|     /-- beq.s ba2c <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    ba1e:	|     |   pea 1886f <PutChar+0x1507>
    ba24:	|     |   jsr 16894 <KPrintF>
    ba2a:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    ba2c:	|     \-> move.l 14(sp),d1
    ba30:	|         move.l 1a746 <fileTime>,d0
    ba36:	|         cmp.l d1,d0
    ba38:	|     /-- bne.s ba48 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    ba3a:	|     |   move.l 18(sp),d1
    ba3e:	|     |   move.l 1a74a <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    ba44:	|     |   cmp.l d1,d0
    ba46:	|  /--|-- beq.s ba68 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    ba48:	|  |  \-> move.l 144(sp),-(sp)
    ba4c:	|  |      pea 1888b <PutChar+0x1523>
    ba52:	|  |      pea 18952 <PutChar+0x15ea>
    ba58:	|  |      jsr 16894 <KPrintF>
    ba5e:	|  |      lea 12(sp),sp
		return FALSE; 
    ba62:	|  |      clr.w d0
    ba64:	+--|----- bra.w bc80 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    ba68:	|  \----> move.l 112(sp),124(sp)
    ba6e:	|         move.l 1a7ac <DOSBase>,d0
    ba74:	|         movea.l d0,a6
    ba76:	|         move.l 124(sp),d1
    ba7a:	|         jsr -306(a6)
    ba7e:	|         move.l d0,136(sp)
    ba82:	|         move.l 136(sp),d0
    ba86:	|         move.l d0,d0
    ba88:	|         move.w d0,1a000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    ba8e:	|         move.l 112(sp),100(sp)
    ba94:	|         move.l 1a7ac <DOSBase>,d0
    ba9a:	|         movea.l d0,a6
    ba9c:	|         move.l 100(sp),d1
    baa0:	|         jsr -306(a6)
    baa4:	|         move.l d0,96(sp)
    baa8:	|         move.l 96(sp),d0
    baac:	|         move.l d0,d0
    baae:	|         move.w d0,1a744 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    bab4:	|         move.l 112(sp),92(sp)
    baba:	|         move.l 1a7ac <DOSBase>,d0
    bac0:	|         movea.l d0,a6
    bac2:	|         move.l 92(sp),d1
    bac6:	|         jsr -306(a6)
    baca:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    bace:	|         move.l 112(sp),84(sp)
    bad4:	|         move.l 1a7ac <DOSBase>,d0
    bada:	|         movea.l d0,a6
    badc:	|         move.l 84(sp),d1
    bae0:	|         jsr -306(a6)
    bae4:	|         move.l d0,80(sp)
    bae8:	|         move.l 80(sp),d0
    baec:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    baf0:	|     /-- beq.s bb24 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    baf2:	|     |   move.l 112(sp),-(sp)
    baf6:	|     |   jsr 6bc <get2bytes>
    bafc:	|     |   addq.l #4,sp
    bafe:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    bb02:	|     |   move.l 112(sp),-(sp)
    bb06:	|     |   jsr 6bc <get2bytes>
    bb0c:	|     |   addq.l #4,sp
    bb0e:	|     |   move.l d0,1a8b0 <fontHeight>
		charOrder = readString(fp);		
    bb14:	|     |   move.l 112(sp),-(sp)
    bb18:	|     |   jsr b02 <readString>
    bb1e:	|     |   addq.l #4,sp
    bb20:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    bb24:	|     \-> move.l 104(sp),70(sp)
    bb2a:	|         move.l 1a7a4 <SysBase>,d0
    bb30:	|         movea.l d0,a6
    bb32:	|         movea.l 70(sp),a1
    bb36:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    bb3a:	|         move.l 112(sp),-(sp)
    bb3e:	|         jsr 854 <getSigned>
    bb44:	|         addq.l #4,sp
    bb46:	|         move.w d0,1a6a8 <fontSpace>

	killAllPeople ();
    bb4c:	|         jsr a178 <killAllPeople>
	killAllRegions ();
    bb52:	|         jsr 150e4 <killAllRegions>

	int camerX = get2bytes (fp);
    bb58:	|         move.l 112(sp),-(sp)
    bb5c:	|         jsr 6bc <get2bytes>
    bb62:	|         addq.l #4,sp
    bb64:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    bb68:	|         move.l 112(sp),-(sp)
    bb6c:	|         jsr 6bc <get2bytes>
    bb72:	|         addq.l #4,sp
    bb74:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    bb78:	|         move.l 112(sp),-(sp)
    bb7c:	|         jsr 7d8 <getFloat>
    bb82:	|         addq.l #4,sp
    bb84:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    bb88:	|         move.l 112(sp),54(sp)
    bb8e:	|         move.l 1a7ac <DOSBase>,d0
    bb94:	|         movea.l d0,a6
    bb96:	|         move.l 54(sp),d1
    bb9a:	|         jsr -306(a6)
    bb9e:	|         move.l d0,50(sp)
    bba2:	|         move.l 50(sp),d0
    bba6:	|         move.l d0,d0
    bba8:	|         move.b d0,1a11a <brightnessLevel>

	loadHandlers (fp);
    bbae:	|         move.l 112(sp),-(sp)
    bbb2:	|         jsr 5d12 <loadHandlers>
    bbb8:	|         addq.l #4,sp
	loadRegions (fp);
    bbba:	|         move.l 112(sp),-(sp)
    bbbe:	|         jsr 15140 <loadRegions>
    bbc4:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    bbc6:	|         moveq #12,d0
    bbc8:	|         move.l d0,46(sp)
    bbcc:	|         clr.l 42(sp)
    bbd0:	|         move.l 1a7a4 <SysBase>,d0
    bbd6:	|         movea.l d0,a6
    bbd8:	|         move.l 46(sp),d0
    bbdc:	|         move.l 42(sp),d1
    bbe0:	|         jsr -684(a6)
    bbe4:	|         move.l d0,38(sp)
    bbe8:	|         move.l 38(sp),d0
    bbec:	|         move.l d0,1a6aa <mouseCursorAnim>
	if (! mouseCursorAnim) {
    bbf2:	|         move.l 1a6aa <mouseCursorAnim>,d0
    bbf8:	|     /-- bne.s bc0c <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    bbfa:	|     |   pea 1895c <PutChar+0x15f4>
    bc00:	|     |   jsr 16894 <KPrintF>
    bc06:	|     |   addq.l #4,sp
		return FALSE;
    bc08:	|     |   clr.w d0
    bc0a:	+-----|-- bra.s bc80 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    bc0c:	|     \-> jsr ca9a <nosnapshot>
	if (FGetC (fp)) {
    bc12:	|         move.l 112(sp),34(sp)
    bc18:	|         move.l 1a7ac <DOSBase>,d0
    bc1e:	|         movea.l d0,a6
    bc20:	|         move.l 34(sp),d1
    bc24:	|         jsr -306(a6)
    bc28:	|         move.l d0,30(sp)
    bc2c:	|         move.l 30(sp),d0
    bc30:	|     /-- beq.s bc46 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    bc32:	|     |   move.l 112(sp),-(sp)
    bc36:	|     |   jsr cb1a <restoreSnapshot>
    bc3c:	|     |   addq.l #4,sp
    bc3e:	|     |   tst.w d0
    bc40:	|     +-- bne.s bc46 <loadGame+0x2bc>
    bc42:	|     |   clr.w d0
    bc44:	+-----|-- bra.s bc80 <loadGame+0x2f6>
	}

	Close (fp);
    bc46:	|     \-> move.l 112(sp),26(sp)
    bc4c:	|         move.l 1a7ac <DOSBase>,d0
    bc52:	|         movea.l d0,a6
    bc54:	|         move.l 26(sp),d1
    bc58:	|         jsr -36(a6)
    bc5c:	|         move.l d0,22(sp)
	clearStackLib ();
    bc60:	|         jsr b940 <clearStackLib>

	cameraX = camerX;
    bc66:	|         move.l 66(sp),1a872 <cameraX>
	cameraY = camerY;
    bc6e:	|         move.l 62(sp),1a876 <cameraY>
	cameraZoom = camerZ;
    bc76:	|         move.l 58(sp),1a142 <cameraZoom>

	return TRUE;
    bc7e:	|         moveq #1,d0
}
    bc80:	\-------> movem.l (sp)+,d2-d3/a6
    bc84:	          lea 128(sp),sp
    bc88:	          rts

0000bc8a <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    bc8a:	   /-> lea -64(sp),sp
    bc8e:	   |   move.l a6,-(sp)
    bc90:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    bc92:	   |   movea.l 76(sp),a0
    bc96:	   |   move.l (a0),d0
    bc98:	   |   move.l 80(sp),-(sp)
    bc9c:	   |   move.l d0,-(sp)
    bc9e:	   |   jsr 8d0 <put2bytes>
    bca4:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    bca6:	   |   movea.l 76(sp),a0
    bcaa:	   |   move.l 40(a0),d0
    bcae:	/--|-- beq.s bcea <saveFunction+0x60>
		FPutC (fp, 1);
    bcb0:	|  |   move.l 80(sp),52(sp)
    bcb6:	|  |   moveq #1,d0
    bcb8:	|  |   move.l d0,48(sp)
    bcbc:	|  |   move.l 1a7ac <DOSBase>,d0
    bcc2:	|  |   movea.l d0,a6
    bcc4:	|  |   move.l 52(sp),d1
    bcc8:	|  |   move.l 48(sp),d2
    bccc:	|  |   jsr -312(a6)
    bcd0:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    bcd4:	|  |   movea.l 76(sp),a0
    bcd8:	|  |   move.l 40(a0),d0
    bcdc:	|  |   move.l 80(sp),-(sp)
    bce0:	|  |   move.l d0,-(sp)
    bce2:	|  \-- jsr bc8a <saveFunction>(pc)
    bce6:	|      addq.l #8,sp
    bce8:	|  /-- bra.s bd0c <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    bcea:	\--|-> move.l 80(sp),64(sp)
    bcf0:	   |   clr.l 60(sp)
    bcf4:	   |   move.l 1a7ac <DOSBase>,d0
    bcfa:	   |   movea.l d0,a6
    bcfc:	   |   move.l 64(sp),d1
    bd00:	   |   move.l 60(sp),d2
    bd04:	   |   jsr -312(a6)
    bd08:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    bd0c:	   \-> movea.l 76(sp),a0
    bd10:	       move.l 12(a0),d0
    bd14:	       move.l 80(sp),-(sp)
    bd18:	       move.l d0,-(sp)
    bd1a:	       jsr 958 <put4bytes>
    bd20:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    bd22:	       movea.l 76(sp),a0
    bd26:	       move.l 36(a0),d0
    bd2a:	       move.l 80(sp),-(sp)
    bd2e:	       move.l d0,-(sp)
    bd30:	       jsr 8d0 <put2bytes>
    bd36:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    bd38:	       move.l 80(sp),40(sp)
    bd3e:	       movea.l 76(sp),a0
    bd42:	       move.w 54(a0),d0
    bd46:	       movea.w d0,a0
    bd48:	       move.l a0,36(sp)
    bd4c:	       move.l 1a7ac <DOSBase>,d0
    bd52:	       movea.l d0,a6
    bd54:	       move.l 40(sp),d1
    bd58:	       move.l 36(sp),d2
    bd5c:	       jsr -312(a6)
    bd60:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    bd64:	       move.l 80(sp),28(sp)
    bd6a:	       movea.l 76(sp),a0
    bd6e:	       move.w 48(a0),d0
    bd72:	       movea.w d0,a0
    bd74:	       move.l a0,24(sp)
    bd78:	       move.l 1a7ac <DOSBase>,d0
    bd7e:	       movea.l d0,a6
    bd80:	       move.l 28(sp),d1
    bd84:	       move.l 24(sp),d2
    bd88:	       jsr -312(a6)
    bd8c:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    bd90:	       move.l 80(sp),16(sp)
    bd96:	       movea.l 76(sp),a0
    bd9a:	       move.w 50(a0),d0
    bd9e:	       movea.w d0,a0
    bda0:	       move.l a0,12(sp)
    bda4:	       move.l 1a7ac <DOSBase>,d0
    bdaa:	       movea.l d0,a6
    bdac:	       move.l 16(sp),d1
    bdb0:	       move.l 12(sp),d2
    bdb4:	       jsr -312(a6)
    bdb8:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    bdbc:	       moveq #28,d0
    bdbe:	       add.l 76(sp),d0
    bdc2:	       move.l 80(sp),-(sp)
    bdc6:	       move.l d0,-(sp)
    bdc8:	       jsr c4e2 <saveVariable>
    bdce:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    bdd0:	       movea.l 76(sp),a0
    bdd4:	       move.b 56(a0),d0
    bdd8:	   /-- beq.s bde8 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    bdda:	   |   pea 1897d <PutChar+0x1615>
    bde0:	   |   jsr 16894 <KPrintF>
    bde6:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    bde8:	   \-> movea.l 76(sp),a0
    bdec:	       move.l 24(a0),d0
    bdf0:	       move.l 80(sp),-(sp)
    bdf4:	       move.l d0,-(sp)
    bdf6:	       jsr c356 <saveStack>
    bdfc:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    bdfe:	       clr.l 68(sp)
    be02:	   /-- bra.s be26 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    be04:	/--|-> movea.l 76(sp),a0
    be08:	|  |   move.l 20(a0),d1
    be0c:	|  |   move.l 68(sp),d0
    be10:	|  |   lsl.l #3,d0
    be12:	|  |   add.l d1,d0
    be14:	|  |   move.l 80(sp),-(sp)
    be18:	|  |   move.l d0,-(sp)
    be1a:	|  |   jsr c4e2 <saveVariable>
    be20:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    be22:	|  |   addq.l #1,68(sp)
    be26:	|  \-> movea.l 76(sp),a0
    be2a:	|      move.l 8(a0),d0
    be2e:	|      cmp.l 68(sp),d0
    be32:	\----- bgt.s be04 <saveFunction+0x17a>
	}
}
    be34:	       nop
    be36:	       nop
    be38:	       move.l (sp)+,d2
    be3a:	       movea.l (sp)+,a6
    be3c:	       lea 64(sp),sp
    be40:	       rts

0000be42 <saveGame>:

BOOL saveGame (char * fname) {
    be42:	          lea -248(sp),sp
    be46:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    be4a:	          move.l 264(sp),244(sp)
    be50:	          move.l #1006,240(sp)
    be58:	          move.l 1a7ac <DOSBase>,d0
    be5e:	          movea.l d0,a6
    be60:	          move.l 244(sp),d1
    be64:	          move.l 240(sp),d2
    be68:	          jsr -30(a6)
    be6c:	          move.l d0,236(sp)
    be70:	          move.l 236(sp),d0
    be74:	          move.l d0,232(sp)
	if (fp == NULL) {
    be78:	      /-- bne.s be8e <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    be7a:	      |   pea 1899f <PutChar+0x1637>
    be80:	      |   jsr 16894 <KPrintF>
    be86:	      |   addq.l #4,sp
		return FALSE;
    be88:	      |   clr.w d0
    be8a:	/-----|-- bra.w c34c <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    be8e:	|     \-> move.l 232(sp),228(sp)
    be94:	|         move.l #100796,224(sp)
    be9c:	|         moveq #6,d0
    be9e:	|         move.l d0,220(sp)
    bea2:	|         move.l 1a7ac <DOSBase>,d0
    bea8:	|         movea.l d0,a6
    beaa:	|         move.l 228(sp),d1
    beae:	|         move.l 224(sp),d2
    beb2:	|         move.l 220(sp),d3
    beb6:	|         jsr -48(a6)
    beba:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    bebe:	|         move.l 232(sp),212(sp)
    bec4:	|         clr.l 208(sp)
    bec8:	|         move.l 1a7ac <DOSBase>,d0
    bece:	|         movea.l d0,a6
    bed0:	|         move.l 212(sp),d1
    bed4:	|         move.l 208(sp),d2
    bed8:	|         jsr -312(a6)
    bedc:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    bee0:	|         move.l 232(sp),200(sp)
    bee6:	|         clr.l 196(sp)
    beea:	|         move.l 1a7ac <DOSBase>,d0
    bef0:	|         movea.l d0,a6
    bef2:	|         move.l 200(sp),d1
    bef6:	|         move.l 196(sp),d2
    befa:	|         jsr -312(a6)
    befe:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    bf02:	|         move.l 232(sp),188(sp)
    bf08:	|         moveq #2,d0
    bf0a:	|         move.l d0,184(sp)
    bf0e:	|         move.l 1a7ac <DOSBase>,d0
    bf14:	|         movea.l d0,a6
    bf16:	|         move.l 188(sp),d1
    bf1a:	|         move.l 184(sp),d2
    bf1e:	|         jsr -312(a6)
    bf22:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    bf26:	|         move.l 232(sp),176(sp)
    bf2c:	|         moveq #2,d0
    bf2e:	|         move.l d0,172(sp)
    bf32:	|         move.l 1a7ac <DOSBase>,d0
    bf38:	|         movea.l d0,a6
    bf3a:	|         move.l 176(sp),d1
    bf3e:	|         move.l 172(sp),d2
    bf42:	|         jsr -312(a6)
    bf46:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    bf4a:	|         move.l 232(sp),164(sp)
    bf50:	|         move.l #108358,160(sp)
    bf58:	|         moveq #8,d0
    bf5a:	|         move.l d0,156(sp)
    bf5e:	|         move.l 1a7ac <DOSBase>,d0
    bf64:	|         movea.l d0,a6
    bf66:	|         move.l 164(sp),d1
    bf6a:	|         move.l 160(sp),d2
    bf6e:	|         move.l 156(sp),d3
    bf72:	|         jsr -48(a6)
    bf76:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    bf7a:	|         move.l 232(sp),148(sp)
    bf80:	|         move.w 1a000 <allowAnyFilename>,d0
    bf86:	|         movea.w d0,a0
    bf88:	|         move.l a0,144(sp)
    bf8c:	|         move.l 1a7ac <DOSBase>,d0
    bf92:	|         movea.l d0,a6
    bf94:	|         move.l 148(sp),d1
    bf98:	|         move.l 144(sp),d2
    bf9c:	|         jsr -312(a6)
    bfa0:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    bfa4:	|         move.l 232(sp),136(sp)
    bfaa:	|         move.w 1a744 <captureAllKeys>,d0
    bfb0:	|         movea.w d0,a0
    bfb2:	|         move.l a0,132(sp)
    bfb6:	|         move.l 1a7ac <DOSBase>,d0
    bfbc:	|         movea.l d0,a6
    bfbe:	|         move.l 136(sp),d1
    bfc2:	|         move.l 132(sp),d2
    bfc6:	|         jsr -312(a6)
    bfca:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    bfce:	|         move.l 232(sp),124(sp)
    bfd4:	|         moveq #1,d0
    bfd6:	|         move.l d0,120(sp)
    bfda:	|         move.l 1a7ac <DOSBase>,d0
    bfe0:	|         movea.l d0,a6
    bfe2:	|         move.l 124(sp),d1
    bfe6:	|         move.l 120(sp),d2
    bfea:	|         jsr -312(a6)
    bfee:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    bff2:	|         move.l 232(sp),112(sp)
    bff8:	|         move.l 1a8c0 <fontTableSize>,d0
    bffe:	|         sgt d0
    c000:	|         neg.b d0
    c002:	|         move.b d0,d0
    c004:	|         andi.l #255,d0
    c00a:	|         move.l d0,108(sp)
    c00e:	|         move.l 1a7ac <DOSBase>,d0
    c014:	|         movea.l d0,a6
    c016:	|         move.l 112(sp),d1
    c01a:	|         move.l 108(sp),d2
    c01e:	|         jsr -312(a6)
    c022:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c026:	|         move.l 1a8c0 <fontTableSize>,d0
    c02c:	|     /-- ble.s c06a <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c02e:	|     |   move.l 1a8b4 <loadedFontNum>,d0
    c034:	|     |   move.l 232(sp),-(sp)
    c038:	|     |   move.l d0,-(sp)
    c03a:	|     |   jsr 8d0 <put2bytes>
    c040:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c042:	|     |   move.l 1a8b0 <fontHeight>,d0
    c048:	|     |   move.l 232(sp),-(sp)
    c04c:	|     |   move.l d0,-(sp)
    c04e:	|     |   jsr 8d0 <put2bytes>
    c054:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c056:	|     |   move.l 1a8b8 <fontOrderString>,d0
    c05c:	|     |   move.l 232(sp),-(sp)
    c060:	|     |   move.l d0,-(sp)
    c062:	|     |   jsr bd8 <writeString>
    c068:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c06a:	|     \-> move.w 1a6a8 <fontSpace>,d0
    c070:	|         movea.w d0,a0
    c072:	|         move.l 232(sp),-(sp)
    c076:	|         move.l a0,-(sp)
    c078:	|         jsr a9c <putSigned>
    c07e:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c080:	|         move.l 1a872 <cameraX>,d0
    c086:	|         move.l 232(sp),-(sp)
    c08a:	|         move.l d0,-(sp)
    c08c:	|         jsr 8d0 <put2bytes>
    c092:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c094:	|         move.l 1a876 <cameraY>,d0
    c09a:	|         move.l 232(sp),-(sp)
    c09e:	|         move.l d0,-(sp)
    c0a0:	|         jsr 8d0 <put2bytes>
    c0a6:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c0a8:	|         move.l 1a142 <cameraZoom>,d0
    c0ae:	|         move.l 232(sp),-(sp)
    c0b2:	|         move.l d0,-(sp)
    c0b4:	|         jsr a46 <putFloat>
    c0ba:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c0bc:	|         move.l 232(sp),100(sp)
    c0c2:	|         move.b 1a11a <brightnessLevel>,d0
    c0c8:	|         move.b d0,d0
    c0ca:	|         andi.l #255,d0
    c0d0:	|         move.l d0,96(sp)
    c0d4:	|         move.l 1a7ac <DOSBase>,d0
    c0da:	|         movea.l d0,a6
    c0dc:	|         move.l 100(sp),d1
    c0e0:	|         move.l 96(sp),d2
    c0e4:	|         jsr -312(a6)
    c0e8:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    c0ec:	|         move.l 232(sp),-(sp)
    c0f0:	|         jsr 6296 <saveHandlers>
    c0f6:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    c0f8:	|         move.l 232(sp),-(sp)
    c0fc:	|         jsr 152fa <saveRegions>
    c102:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    c104:	|         move.l 1a6aa <mouseCursorAnim>,d0
    c10a:	|         move.l 232(sp),-(sp)
    c10e:	|         move.l d0,-(sp)
    c110:	|         jsr a6ea <saveAnim>
    c116:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    c118:	|         move.l 1a6ae <mouseCursorFrameNum>,d0
    c11e:	|         move.l 232(sp),-(sp)
    c122:	|         move.l d0,-(sp)
    c124:	|         jsr 8d0 <put2bytes>
    c12a:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    c12c:	|         move.l 1a73c <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    c134:	|         clr.l 248(sp)
	while (thisFunction) {
    c138:	|     /-- bra.s c148 <saveGame+0x306>
		countFunctions ++;
    c13a:	|  /--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    c13e:	|  |  |   movea.l 252(sp),a0
    c142:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c148:	|  |  \-> tst.l 252(sp)
    c14c:	|  \----- bne.s c13a <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    c14e:	|         move.l 232(sp),-(sp)
    c152:	|         move.l 252(sp),-(sp)
    c156:	|         jsr 8d0 <put2bytes>
    c15c:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    c15e:	|         move.l 1a73c <allRunningFunctions>,252(sp)
	while (thisFunction) {
    c166:	|     /-- bra.s c182 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    c168:	|  /--|-> move.l 232(sp),-(sp)
    c16c:	|  |  |   move.l 256(sp),-(sp)
    c170:	|  |  |   jsr bc8a <saveFunction>
    c176:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    c178:	|  |  |   movea.l 252(sp),a0
    c17c:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c182:	|  |  \-> tst.l 252(sp)
    c186:	|  \----- bne.s c168 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    c188:	|         clr.l 256(sp)
    c18c:	|     /-- bra.s c1ae <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    c18e:	|  /--|-> move.l 1a752 <globalVars>,d1
    c194:	|  |  |   move.l 256(sp),d0
    c198:	|  |  |   lsl.l #3,d0
    c19a:	|  |  |   add.l d1,d0
    c19c:	|  |  |   move.l 232(sp),-(sp)
    c1a0:	|  |  |   move.l d0,-(sp)
    c1a2:	|  |  |   jsr c4e2 <saveVariable>
    c1a8:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    c1aa:	|  |  |   addq.l #1,256(sp)
    c1ae:	|  |  \-> move.l 1a77c <numGlobals>,d0
    c1b4:	|  |      cmp.l 256(sp),d0
    c1b8:	|  \----- bgt.s c18e <saveGame+0x34c>
	}

	savePeople (fp);
    c1ba:	|         move.l 232(sp),-(sp)
    c1be:	|         jsr a812 <savePeople>
    c1c4:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    c1c6:	|         movea.l 1a8d4 <currentFloor>,a0
    c1cc:	|         move.l 8(a0),d0
    c1d0:	|  /----- beq.s c20e <saveGame+0x3cc>
		FPutC (fp, 1);
    c1d2:	|  |      move.l 232(sp),76(sp)
    c1d8:	|  |      moveq #1,d0
    c1da:	|  |      move.l d0,72(sp)
    c1de:	|  |      move.l 1a7ac <DOSBase>,d0
    c1e4:	|  |      movea.l d0,a6
    c1e6:	|  |      move.l 76(sp),d1
    c1ea:	|  |      move.l 72(sp),d2
    c1ee:	|  |      jsr -312(a6)
    c1f2:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    c1f6:	|  |      movea.l 1a8d4 <currentFloor>,a0
    c1fc:	|  |      move.l (a0),d0
    c1fe:	|  |      move.l 232(sp),-(sp)
    c202:	|  |      move.l d0,-(sp)
    c204:	|  |      jsr 8d0 <put2bytes>
    c20a:	|  |      addq.l #8,sp
    c20c:	|  |  /-- bra.s c230 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    c20e:	|  \--|-> move.l 232(sp),88(sp)
    c214:	|     |   clr.l 84(sp)
    c218:	|     |   move.l 1a7ac <DOSBase>,d0
    c21e:	|     |   movea.l d0,a6
    c220:	|     |   move.l 88(sp),d1
    c224:	|     |   move.l 84(sp),d2
    c228:	|     |   jsr -312(a6)
    c22c:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    c230:	|     \-> move.l 232(sp),64(sp)
    c236:	|         move.l 1a886 <speechMode>,60(sp)
    c23e:	|         move.l 1a7ac <DOSBase>,d0
    c244:	|         movea.l d0,a6
    c246:	|         move.l 64(sp),d1
    c24a:	|         move.l 60(sp),d2
    c24e:	|         jsr -312(a6)
    c252:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    c256:	|         move.b 1a67e <fadeMode>,d0
    c25c:	|         move.b d0,d0
    c25e:	|         andi.l #255,d0
    c264:	|         move.l d0,52(sp)
    c268:	|         move.l 232(sp),48(sp)
    c26e:	|         move.l 1a7ac <DOSBase>,d0
    c274:	|         movea.l d0,a6
    c276:	|         move.l 52(sp),d1
    c27a:	|         move.l 48(sp),d2
    c27e:	|         jsr -312(a6)
    c282:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    c286:	|         move.l 1a800 <speech>,d0
    c28c:	|         move.l 232(sp),-(sp)
    c290:	|         move.l d0,-(sp)
    c292:	|         jsr 78f2 <saveSpeech>
    c298:	|         addq.l #8,sp
	saveStatusBars (fp);
    c29a:	|         move.l 232(sp),-(sp)
    c29e:	|         jsr 72ee <saveStatusBars>
    c2a4:	|         addq.l #4,sp
	saveSounds (fp);
    c2a6:	|         move.l 232(sp),-(sp)
    c2aa:	|         jsr c848 <saveSounds>
    c2b0:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    c2b2:	|         move.w 1a870 <saveEncoding>,d0
    c2b8:	|         move.w d0,d0
    c2ba:	|         andi.l #65535,d0
    c2c0:	|         move.l 232(sp),-(sp)
    c2c4:	|         move.l d0,-(sp)
    c2c6:	|         jsr 8d0 <put2bytes>
    c2cc:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    c2ce:	|         move.l 1a862 <parallaxStuff>,d0
    c2d4:	|         move.l 232(sp),-(sp)
    c2d8:	|         move.l d0,-(sp)
    c2da:	|         jsr cb40 <saveParallaxRecursive>
    c2e0:	|         addq.l #8,sp
	FPutC (fp, 0);
    c2e2:	|         move.l 232(sp),40(sp)
    c2e8:	|         clr.l 36(sp)
    c2ec:	|         move.l 1a7ac <DOSBase>,d0
    c2f2:	|         movea.l d0,a6
    c2f4:	|         move.l 40(sp),d1
    c2f8:	|         move.l 36(sp),d2
    c2fc:	|         jsr -312(a6)
    c300:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    c304:	|         move.l 232(sp),28(sp)
    c30a:	|         move.l 1a120 <languageNum>,24(sp)
    c312:	|         move.l 1a7ac <DOSBase>,d0
    c318:	|         movea.l d0,a6
    c31a:	|         move.l 28(sp),d1
    c31e:	|         move.l 24(sp),d2
    c322:	|         jsr -312(a6)
    c326:	|         move.l d0,20(sp)

	Close(fp);
    c32a:	|         move.l 232(sp),16(sp)
    c330:	|         move.l 1a7ac <DOSBase>,d0
    c336:	|         movea.l d0,a6
    c338:	|         move.l 16(sp),d1
    c33c:	|         jsr -36(a6)
    c340:	|         move.l d0,12(sp)
	clearStackLib ();
    c344:	|         jsr b940 <clearStackLib>
	return TRUE;
    c34a:	|         moveq #1,d0
}
    c34c:	\-------> movem.l (sp)+,d2-d3/a6
    c350:	          lea 248(sp),sp
    c354:	          rts

0000c356 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    c356:	       lea -12(sp),sp
	int elements = 0;
    c35a:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    c35e:	       move.l 16(sp),(sp)
	while (search) {
    c362:	   /-- bra.s c36e <saveStack+0x18>
		elements ++;
    c364:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    c368:	|  |   movea.l (sp),a0
    c36a:	|  |   move.l 8(a0),(sp)
	while (search) {
    c36e:	|  \-> tst.l (sp)
    c370:	\----- bne.s c364 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    c372:	       move.l 20(sp),-(sp)
    c376:	       move.l 12(sp),-(sp)
    c37a:	       jsr 8d0 <put2bytes>
    c380:	       addq.l #8,sp
	search = vs;
    c382:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    c386:	       clr.l 4(sp)
    c38a:	   /-- bra.s c3a6 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    c38c:	/--|-> move.l (sp),d0
    c38e:	|  |   move.l 20(sp),-(sp)
    c392:	|  |   move.l d0,-(sp)
    c394:	|  |   jsr c4e2 <saveVariable>
    c39a:	|  |   addq.l #8,sp
		search = search -> next;
    c39c:	|  |   movea.l (sp),a0
    c39e:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    c3a2:	|  |   addq.l #1,4(sp)
    c3a6:	|  \-> move.l 4(sp),d0
    c3aa:	|      cmp.l 8(sp),d0
    c3ae:	\----- blt.s c38c <saveStack+0x36>
	}
}
    c3b0:	       nop
    c3b2:	       nop
    c3b4:	       lea 12(sp),sp
    c3b8:	       rts

0000c3ba <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    c3ba:	             lea -44(sp),sp
    c3be:	             move.l a6,-(sp)
    c3c0:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    c3c2:	             move.l 1a848 <stackLib>,48(sp)
	int a = 0;
    c3ca:	             clr.l 44(sp)
	while (s) {
    c3ce:	      /----- bra.s c42c <saveStackRef+0x72>
		if (s -> stack == vs) {
    c3d0:	   /--|----> movea.l 48(sp),a0
    c3d4:	   |  |      move.l (a0),d0
    c3d6:	   |  |      cmp.l 56(sp),d0
    c3da:	   |  |  /-- bne.s c41e <saveStackRef+0x64>
			FPutC (fp, 1);
    c3dc:	   |  |  |   move.l 60(sp),16(sp)
    c3e2:	   |  |  |   moveq #1,d0
    c3e4:	   |  |  |   move.l d0,12(sp)
    c3e8:	   |  |  |   move.l 1a7ac <DOSBase>,d0
    c3ee:	   |  |  |   movea.l d0,a6
    c3f0:	   |  |  |   move.l 16(sp),d1
    c3f4:	   |  |  |   move.l 12(sp),d2
    c3f8:	   |  |  |   jsr -312(a6)
    c3fc:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    c400:	   |  |  |   move.l 1a844 <stackLibTotal>,d0
    c406:	   |  |  |   sub.l 44(sp),d0
    c40a:	   |  |  |   move.l 60(sp),-(sp)
    c40e:	   |  |  |   move.l d0,-(sp)
    c410:	   |  |  |   jsr 8d0 <put2bytes>
    c416:	   |  |  |   addq.l #8,sp
			return TRUE;
    c418:	   |  |  |   moveq #1,d0
    c41a:	/--|--|--|-- bra.w c4d8 <saveStackRef+0x11e>
		}
		s = s -> next;
    c41e:	|  |  |  \-> movea.l 48(sp),a0
    c422:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    c428:	|  |  |      addq.l #1,44(sp)
	while (s) {
    c42c:	|  |  \----> tst.l 48(sp)
    c430:	|  \-------- bne.s c3d0 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    c432:	|            move.l 60(sp),40(sp)
    c438:	|            clr.l 36(sp)
    c43c:	|            move.l 1a7ac <DOSBase>,d0
    c442:	|            movea.l d0,a6
    c444:	|            move.l 40(sp),d1
    c448:	|            move.l 36(sp),d2
    c44c:	|            jsr -312(a6)
    c450:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    c454:	|            movea.l 56(sp),a0
    c458:	|            move.l (a0),d0
    c45a:	|            move.l 60(sp),-(sp)
    c45e:	|            move.l d0,-(sp)
    c460:	|            jsr c356 <saveStack>
    c466:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    c468:	|            moveq #8,d0
    c46a:	|            move.l d0,28(sp)
    c46e:	|            clr.l 24(sp)
    c472:	|            move.l 1a7a4 <SysBase>,d0
    c478:	|            movea.l d0,a6
    c47a:	|            move.l 28(sp),d0
    c47e:	|            move.l 24(sp),d1
    c482:	|            jsr -684(a6)
    c486:	|            move.l d0,20(sp)
    c48a:	|            move.l 20(sp),d0
    c48e:	|            move.l d0,48(sp)
	stackLibTotal ++;
    c492:	|            move.l 1a844 <stackLibTotal>,d0
    c498:	|            addq.l #1,d0
    c49a:	|            move.l d0,1a844 <stackLibTotal>
	if (! s) {
    c4a0:	|            tst.l 48(sp)
    c4a4:	|        /-- bne.s c4b8 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    c4a6:	|        |   pea 189eb <PutChar+0x1683>
    c4ac:	|        |   jsr 16894 <KPrintF>
    c4b2:	|        |   addq.l #4,sp
		return FALSE;
    c4b4:	|        |   clr.w d0
    c4b6:	+--------|-- bra.s c4d8 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    c4b8:	|        \-> move.l 1a848 <stackLib>,d0
    c4be:	|            movea.l 48(sp),a0
    c4c2:	|            move.l d0,4(a0)
	s -> stack = vs;
    c4c6:	|            movea.l 48(sp),a0
    c4ca:	|            move.l 56(sp),(a0)
	stackLib = s;
    c4ce:	|            move.l 48(sp),1a848 <stackLib>
	return TRUE;
    c4d6:	|            moveq #1,d0
}
    c4d8:	\----------> move.l (sp)+,d2
    c4da:	             movea.l (sp)+,a6
    c4dc:	             lea 44(sp),sp
    c4e0:	             rts

0000c4e2 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    c4e2:	          lea -12(sp),sp
    c4e6:	          move.l a6,-(sp)
    c4e8:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    c4ea:	          move.l 28(sp),16(sp)
    c4f0:	          movea.l 24(sp),a0
    c4f4:	          move.l (a0),d0
    c4f6:	          move.l d0,12(sp)
    c4fa:	          move.l 1a7ac <DOSBase>,d0
    c500:	          movea.l d0,a6
    c502:	          move.l 16(sp),d1
    c506:	          move.l 12(sp),d2
    c50a:	          jsr -312(a6)
    c50e:	          move.l d0,8(sp)
	switch (from -> varType) {
    c512:	          movea.l 24(sp),a0
    c516:	          move.l (a0),d0
    c518:	          moveq #9,d1
    c51a:	          cmp.l d0,d1
    c51c:	      /-- bcs.w c5cc <saveVariable+0xea>
    c520:	      |   add.l d0,d0
    c522:	      |   movea.l d0,a0
    c524:	      |   adda.l #50480,a0
    c52a:	      |   move.w (a0),d0
    c52c:	      |   jmp (c530 <saveVariable+0x4e>,pc,d0.w)
    c530:	      |   ori.l #1310740,(a0)+
    c536:	      |   ori.b #20,(20,a0,d0.w)
    c53c:	      |   .short 0x004c
    c53e:	      |   ori.b #126,(a4)
    c542:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    c546:	      |   ori.b #40,(a0)+
    c54a:	      |   ori.b #47,d4
    c54e:	      |   ori.b #0,(a4)+
    c552:	      |   jsr 958 <put4bytes>
    c558:	      |   addq.l #8,sp
		return TRUE;
    c55a:	      |   moveq #1,d0
    c55c:	/-----|-- bra.w c608 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    c560:	|     |   movea.l 24(sp),a0
    c564:	|     |   move.l 4(a0),d0
    c568:	|     |   move.l 28(sp),-(sp)
    c56c:	|     |   move.l d0,-(sp)
    c56e:	|     |   jsr bd8 <writeString>
    c574:	|     |   addq.l #8,sp
		return TRUE;
    c576:	|     |   moveq #1,d0
    c578:	+-----|-- bra.w c608 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    c57c:	|     |   movea.l 24(sp),a0
    c580:	|     |   move.l 4(a0),d0
    c584:	|     |   move.l 28(sp),-(sp)
    c588:	|     |   move.l d0,-(sp)
    c58a:	|     |   jsr c3ba <saveStackRef>
    c590:	|     |   addq.l #8,sp
    c592:	+-----|-- bra.s c608 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    c594:	|     |   movea.l 24(sp),a0
    c598:	|     |   move.l 4(a0),d0
    c59c:	|     |   move.l 28(sp),-(sp)
    c5a0:	|     |   move.l d0,-(sp)
    c5a2:	|     |   jsr a7b4 <saveCostume>
    c5a8:	|     |   addq.l #8,sp
		return FALSE;
    c5aa:	|     |   clr.w d0
    c5ac:	+-----|-- bra.s c608 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    c5ae:	|     |   movea.l 24(sp),a0
    c5b2:	|     |   move.l 4(a0),d0
    c5b6:	|     |   move.l 28(sp),-(sp)
    c5ba:	|     |   move.l d0,-(sp)
    c5bc:	|     |   jsr a6ea <saveAnim>
    c5c2:	|     |   addq.l #8,sp
		return FALSE;
    c5c4:	|     |   clr.w d0
    c5c6:	+-----|-- bra.s c608 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    c5c8:	|     |   clr.w d0
    c5ca:	+-----|-- bra.s c608 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    c5cc:	|     \-> movea.l 24(sp),a0
    c5d0:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    c5d2:	|         moveq #10,d1
    c5d4:	|         cmp.l d0,d1
    c5d6:	|  /----- bcs.s c5f0 <saveVariable+0x10e>
						typeName[from->varType] :
    c5d8:	|  |      movea.l 24(sp),a0
    c5dc:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    c5de:	|  |      add.l d0,d0
    c5e0:	|  |      movea.l d0,a1
    c5e2:	|  |      adda.l d0,a1
    c5e4:	|  |      lea 1a680 <typeName>,a0
    c5ea:	|  |      move.l (0,a1,a0.l),d0
    c5ee:	|  |  /-- bra.s c5f6 <saveVariable+0x114>
    c5f0:	|  \--|-> move.l #100880,d0
    c5f6:	|     \-> move.l d0,-(sp)
    c5f8:	|         pea 18a17 <PutChar+0x16af>
    c5fe:	|         jsr 16894 <KPrintF>
    c604:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    c606:	|         moveq #1,d0
    c608:	\-------> move.l (sp)+,d2
    c60a:	          movea.l (sp)+,a6
    c60c:	          lea 12(sp),sp
    c610:	          rts

0000c612 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    c612:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    c616:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    c61e:	          movea.l 4(sp),a0
    c622:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    c628:	          movea.l 4(sp),a0
    c62c:	          move.w 10(a0),d0
    c630:	          lsr.w #8,d0
    c632:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    c636:	          movea.l 4(sp),a0
    c63a:	          move.w 10(a0),d0
    c63e:	          move.b d0,(sp)

    if(counterx_new)
    c640:	/-------- beq.w c6e6 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    c644:	|         clr.w d1
    c646:	|         move.b (sp),d1
    c648:	|         move.w 1a850 <counterx_old>,d0
    c64e:	|         sub.w d0,d1
    c650:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    c654:	|         cmpi.w #128,10(sp)
    c65a:	|     /-- blt.s c672 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    c65c:	|     |   move.w #1,1a75a <input+0x4>
            counterx_diff -= 256;    
    c664:	|     |   move.w 10(sp),d0
    c668:	|     |   addi.w #-256,d0
    c66c:	|     |   move.w d0,10(sp)
    c670:	|  /--|-- bra.s c69e <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    c672:	|  |  \-> cmpi.w #-129,10(sp)
    c678:	|  |  /-- bgt.s c690 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    c67a:	|  |  |   move.w 10(sp),d0
    c67e:	|  |  |   addi.w #256,d0
    c682:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    c686:	|  |  |   move.w #1,1a75a <input+0x4>
    c68e:	|  +--|-- bra.s c69e <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    c690:	|  |  \-> tst.w 10(sp)
    c694:	|  +----- beq.s c69e <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    c696:	|  |      move.w #1,1a75a <input+0x4>
        }

        input.mouseX += counterx_diff;
    c69e:	|  \----> move.l 1a760 <input+0xa>,d0
    c6a4:	|         movea.w 10(sp),a0
    c6a8:	|         add.l a0,d0
    c6aa:	|         move.l d0,1a760 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    c6b0:	|         move.l 1a760 <input+0xa>,d1
    c6b6:	|         move.l 1a6f8 <winWidth>,d0
    c6bc:	|         cmp.l d1,d0
    c6be:	|     /-- bge.s c6ce <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    c6c0:	|     |   move.l 1a6f8 <winWidth>,d0
    c6c6:	|     |   move.l d0,1a760 <input+0xa>
    c6cc:	|  /--|-- bra.s c6dc <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    c6ce:	|  |  \-> move.l 1a760 <input+0xa>,d0
    c6d4:	|  +----- bpl.s c6dc <CsiCheckInput+0xca>
            input.mouseX = 0;
    c6d6:	|  |      clr.l 1a760 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    c6dc:	|  \----> clr.w d0
    c6de:	|         move.b (sp),d0
    c6e0:	|         move.w d0,1a850 <counterx_old>
    }    

    if(countery_new)
    c6e6:	\-------> tst.b 1(sp)
    c6ea:	/-------- beq.w c794 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    c6ee:	|         clr.w d1
    c6f0:	|         move.b 1(sp),d1
    c6f4:	|         move.w 1a852 <countery_old>,d0
    c6fa:	|         sub.w d0,d1
    c6fc:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    c700:	|         cmpi.w #128,8(sp)
    c706:	|     /-- blt.s c71e <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    c708:	|     |   move.w #1,1a75a <input+0x4>
            countery_diff -= 256;    
    c710:	|     |   move.w 8(sp),d0
    c714:	|     |   addi.w #-256,d0
    c718:	|     |   move.w d0,8(sp)
    c71c:	|  /--|-- bra.s c74a <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    c71e:	|  |  \-> cmpi.w #-129,8(sp)
    c724:	|  |  /-- bgt.s c73c <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    c726:	|  |  |   move.w #1,1a75a <input+0x4>
            countery_diff += 256;
    c72e:	|  |  |   move.w 8(sp),d0
    c732:	|  |  |   addi.w #256,d0
    c736:	|  |  |   move.w d0,8(sp)
    c73a:	|  +--|-- bra.s c74a <CsiCheckInput+0x138>
        } else if (countery_diff) {
    c73c:	|  |  \-> tst.w 8(sp)
    c740:	|  +----- beq.s c74a <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    c742:	|  |      move.w #1,1a75a <input+0x4>
        }

        input.mouseY += countery_diff;
    c74a:	|  \----> move.l 1a764 <input+0xe>,d0
    c750:	|         movea.w 8(sp),a0
    c754:	|         add.l a0,d0
    c756:	|         move.l d0,1a764 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    c75c:	|         move.l 1a764 <input+0xe>,d1
    c762:	|         move.l 1a6fc <winHeight>,d0
    c768:	|         cmp.l d1,d0
    c76a:	|     /-- bge.s c77a <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    c76c:	|     |   move.l 1a6fc <winHeight>,d0
    c772:	|     |   move.l d0,1a764 <input+0xe>
    c778:	|  /--|-- bra.s c788 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    c77a:	|  |  \-> move.l 1a764 <input+0xe>,d0
    c780:	|  +----- bpl.s c788 <CsiCheckInput+0x176>
            input.mouseY = 0;
    c782:	|  |      clr.l 1a764 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    c788:	|  \----> clr.w d0
    c78a:	|         move.b 1(sp),d0
    c78e:	|         move.w d0,1a852 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    c794:	\-------> move.w 1a756 <input>,d0
    c79a:	      /-- beq.s c7c0 <CsiCheckInput+0x1ae>
    c79c:	      |   movea.l #12574721,a0
    c7a2:	      |   move.b (a0),d0
    c7a4:	      |   move.b d0,d0
    c7a6:	      |   andi.l #255,d0
    c7ac:	      |   moveq #64,d1
    c7ae:	      |   and.l d1,d0
    c7b0:	      +-- beq.s c7c0 <CsiCheckInput+0x1ae>
    {
        input.leftClick = FALSE;
    c7b2:	      |   clr.w 1a756 <input>
        input.leftRelease = TRUE;
    c7b8:	      |   move.w #1,1a75c <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    c7c0:	      \-> move.w 1a758 <input+0x2>,d0
    c7c6:	      /-- beq.s c7ee <CsiCheckInput+0x1dc>
    c7c8:	      |   movea.l #14675990,a0
    c7ce:	      |   move.w (a0),d0
    c7d0:	      |   move.w d0,d0
    c7d2:	      |   andi.l #65535,d0
    c7d8:	      |   andi.l #1024,d0
    c7de:	      +-- beq.s c7ee <CsiCheckInput+0x1dc>
    {
        input.rightClick = FALSE;
    c7e0:	      |   clr.w 1a758 <input+0x2>
        input.rightRelease = TRUE;
    c7e6:	      |   move.w #1,1a75e <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    c7ee:	      \-> movea.l #12574721,a0
    c7f4:	          move.b (a0),d0
    c7f6:	          move.b d0,d0
    c7f8:	          andi.l #255,d0
    c7fe:	          moveq #64,d1
    c800:	          and.l d1,d0
    c802:	      /-- bne.s c80c <CsiCheckInput+0x1fa>
        input.leftClick = TRUE;        
    c804:	      |   move.w #1,1a756 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    c80c:	      \-> movea.l #14675990,a0
    c812:	          move.w (a0),d0
    c814:	          move.w d0,d0
    c816:	          andi.l #65535,d0
    c81c:	          andi.l #1024,d0
    c822:	      /-- bne.s c82c <CsiCheckInput+0x21a>
        input.rightClick = TRUE;
    c824:	      |   move.w #1,1a758 <input+0x2>
    }

    c82c:	      \-> nop
    c82e:	          lea 12(sp),sp
    c832:	          rts

0000c834 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    c834:	moveq #0,d0
}
    c836:	rts

0000c838 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    c838:	nop
    c83a:	rts

0000c83c <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    c83c:	nop
    c83e:	rts

0000c840 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    c840:	moveq #1,d0
}
    c842:	rts

0000c844 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    c844:	nop
    c846:	rts

0000c848 <saveSounds>:

void saveSounds (BPTR fp) {
    c848:	lea -12(sp),sp
    c84c:	move.l a6,-(sp)
    c84e:	move.l d2,-(sp)
	FPutC (fp,0);
    c850:	move.l 24(sp),16(sp)
    c856:	clr.l 12(sp)
    c85a:	move.l 1a7ac <DOSBase>,d0
    c860:	movea.l d0,a6
    c862:	move.l 16(sp),d1
    c866:	move.l 12(sp),d2
    c86a:	jsr -312(a6)
    c86e:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    c872:	move.l 1a13e <defSoundVol>,d0
    c878:	move.l 24(sp),-(sp)
    c87c:	move.l d0,-(sp)
    c87e:	jsr 8d0 <put2bytes>
    c884:	addq.l #8,sp
	put2bytes (defVol, fp);
    c886:	move.l 1a13a <defVol>,d0
    c88c:	move.l 24(sp),-(sp)
    c890:	move.l d0,-(sp)
    c892:	jsr 8d0 <put2bytes>
    c898:	addq.l #8,sp
}
    c89a:	nop
    c89c:	move.l (sp)+,d2
    c89e:	movea.l (sp)+,a6
    c8a0:	lea 12(sp),sp
    c8a4:	rts

0000c8a6 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    c8a6:	move.l 4(sp),1a13a <defVol>
}
    c8ae:	nop
    c8b0:	rts

0000c8b2 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    c8b2:	move.l 4(sp),1a13e <defSoundVol>
}
    c8ba:	nop
    c8bc:	rts

0000c8be <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    c8be:	nop
    c8c0:	rts

0000c8c2 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    c8c2:	nop
    c8c4:	rts

0000c8c6 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    c8c6:	nop
    c8c8:	rts

0000c8ca <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    c8ca:	subq.l #4,sp
    c8cc:	move.l 12(sp),d0
    c8d0:	move.w d0,d0
    c8d2:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    c8d6:	moveq #1,d0
}
    c8d8:	addq.l #4,sp
    c8da:	rts

0000c8dc <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    c8dc:	nop
    c8de:	rts

0000c8e0 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    c8e0:	move.l 16(sp),-(sp)
    c8e4:	move.l 16(sp),-(sp)
    c8e8:	jsr e0e <CstBlankScreen>
    c8ee:	addq.l #8,sp
}
    c8f0:	nop
    c8f2:	rts

0000c8f4 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    c8f4:	pea 18a3a <PutChar+0x16d2>
    c8fa:	jsr 16894 <KPrintF>
    c900:	addq.l #4,sp
}
    c902:	nop
    c904:	rts

0000c906 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    c906:	movea.l 8(sp),a1
    c90a:	movea.l 12(sp),a0
    c90e:	move.l 8(sp),d1
    c912:	move.l 4(sp),d0
    c916:	move.l a1,-(sp)
    c918:	move.l a0,-(sp)
    c91a:	move.l d1,-(sp)
    c91c:	move.l d0,-(sp)
    c91e:	jsr 374a <drawLine>
    c924:	lea 16(sp),sp
}
    c928:	nop
    c92a:	rts

0000c92c <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    c92c:	movea.l 12(sp),a1
    c930:	movea.l 4(sp),a0
    c934:	move.l 8(sp),d1
    c938:	move.l 4(sp),d0
    c93c:	move.l a1,-(sp)
    c93e:	move.l a0,-(sp)
    c940:	move.l d1,-(sp)
    c942:	move.l d0,-(sp)
    c944:	jsr 374a <drawLine>
    c94a:	lea 16(sp),sp
}
    c94e:	nop
    c950:	rts

0000c952 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    c952:	pea 18a73 <PutChar+0x170b>
    c958:	jsr 16894 <KPrintF>
    c95e:	addq.l #4,sp
}
    c960:	nop
    c962:	rts

0000c964 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    c964:	jsr 14e8 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    c96a:	pea 1a85c <backdropTextureName>
    c970:	pea 1 <_start+0x1>
    c974:	jsr 38cc <deleteTextures>
    c97a:	addq.l #8,sp
	backdropTextureName = 0;
    c97c:	clr.l 1a85c <backdropTextureName>
	backdropExists = FALSE;
    c982:	clr.w 1a860 <backdropExists>
}
    c988:	nop
    c98a:	rts

0000c98c <killParallax>:

void killParallax () {
    c98c:	          lea -12(sp),sp
    c990:	          move.l a6,-(sp)
	while (parallaxStuff) {
    c992:	   /----- bra.s c9fe <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    c994:	/--|----> move.l 1a862 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    c99c:	|  |      movea.l 12(sp),a0
    c9a0:	|  |      move.l 42(a0),d0
    c9a4:	|  |      move.l d0,1a862 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    c9aa:	|  |      move.l 12(sp),d0
    c9ae:	|  |      addq.l #4,d0
    c9b0:	|  |      move.l d0,-(sp)
    c9b2:	|  |      pea 1 <_start+0x1>
    c9b6:	|  |      jsr 38cc <deleteTextures>
    c9bc:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    c9be:	|  |      movea.l 12(sp),a0
    c9c2:	|  |      move.l (a0),d0
    c9c4:	|  |  /-- beq.s c9de <killParallax+0x52>
    c9c6:	|  |  |   movea.l 12(sp),a0
    c9ca:	|  |  |   move.l (a0),8(sp)
    c9ce:	|  |  |   move.l 1a7a4 <SysBase>,d0
    c9d4:	|  |  |   movea.l d0,a6
    c9d6:	|  |  |   movea.l 8(sp),a1
    c9da:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    c9de:	|  |  \-> tst.l 12(sp)
    c9e2:	|  |  /-- beq.s c9fa <killParallax+0x6e>
    c9e4:	|  |  |   move.l 12(sp),4(sp)
    c9ea:	|  |  |   move.l 1a7a4 <SysBase>,d0
    c9f0:	|  |  |   movea.l d0,a6
    c9f2:	|  |  |   movea.l 4(sp),a1
    c9f6:	|  |  |   jsr -690(a6)
		k = NULL;
    c9fa:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    c9fe:	|  \----> move.l 1a862 <parallaxStuff>,d0
    ca04:	\-------- bne.s c994 <killParallax+0x8>
	}
}
    ca06:	          nop
    ca08:	          nop
    ca0a:	          movea.l (sp)+,a6
    ca0c:	          lea 12(sp),sp
    ca10:	          rts

0000ca12 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    ca12:	       move.l 4(sp),-(sp)
    ca16:	       jsr 6658 <openFileFromNum>
    ca1c:	       addq.l #4,sp
    ca1e:	       tst.l d0
    ca20:	   /-- bne.s ca32 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    ca22:	   |   pea 18a94 <PutChar+0x172c>
    ca28:	   |   jsr 16894 <KPrintF>
    ca2e:	   |   addq.l #4,sp
		return;
    ca30:	/--|-- bra.s ca52 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    ca32:	|  \-> move.l 1a78c <bigDataFile>,d0
    ca38:	|      move.l 12(sp),-(sp)
    ca3c:	|      move.l 12(sp),-(sp)
    ca40:	|      move.l d0,-(sp)
    ca42:	|      jsr 1796 <CstLoadBackdrop>
    ca48:	|      lea 12(sp),sp
	finishAccess ();
    ca4c:	|      jsr 6550 <finishAccess>
	
}
    ca52:	\----> rts

0000ca54 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    ca54:	subq.l #8,sp
    ca56:	movea.l 12(sp),a0
    ca5a:	move.l 16(sp),d1
    ca5e:	move.l 20(sp),d0
    ca62:	movea.w a0,a0
    ca64:	move.w a0,6(sp)
    ca68:	move.w d1,d1
    ca6a:	move.w d1,4(sp)
    ca6e:	move.w d0,d0
    ca70:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    ca74:	pea 18ae3 <PutChar+0x177b>
    ca7a:	jsr 16894 <KPrintF>
    ca80:	addq.l #4,sp

}
    ca82:	nop
    ca84:	addq.l #8,sp
    ca86:	rts

0000ca88 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    ca88:	pea 18b06 <PutChar+0x179e>
    ca8e:	jsr 16894 <KPrintF>
    ca94:	addq.l #4,sp
}
    ca96:	nop
    ca98:	rts

0000ca9a <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    ca9a:	pea 1a866 <snapshotTextureName>
    caa0:	pea 1 <_start+0x1>
    caa4:	jsr 38cc <deleteTextures>
    caaa:	addq.l #8,sp
	snapshotTextureName = 0;
    caac:	clr.l 1a866 <snapshotTextureName>
}
    cab2:	nop
    cab4:	rts

0000cab6 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    cab6:	clr.l 1a872 <cameraX>
	cameraY = 0;
    cabc:	clr.l 1a876 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    cac2:	move.l 1a858 <sceneHeight>,d0
    cac8:	move.l d0,d1
    caca:	move.l 1a854 <sceneWidth>,d0
    cad0:	move.l d1,-(sp)
    cad2:	move.l d0,-(sp)
    cad4:	jsr 3250 <CstReserveBackdrop>
    cada:	addq.l #8,sp
}
    cadc:	rts

0000cade <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    cade:	jsr c964 <killBackDrop>
	killParallax ();
    cae4:	jsr c98c <killParallax>
	killZBuffer ();
    caea:	jsr 7fec <killZBuffer>
	sceneWidth = x;
    caf0:	move.l 4(sp),d0
    caf4:	move.l d0,1a854 <sceneWidth>
	sceneHeight = y;
    cafa:	move.l 8(sp),d0
    cafe:	move.l d0,1a858 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    cb04:	pea 18b3f <PutChar+0x17d7>
    cb0a:	jsr 16894 <KPrintF>
    cb10:	addq.l #4,sp
	return reserveBackdrop();
    cb12:	jsr cab6 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    cb18:	rts

0000cb1a <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    cb1a:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    cb1c:	move.l 12(sp),-(sp)
    cb20:	jsr 6bc <get2bytes>
    cb26:	addq.l #4,sp
    cb28:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    cb2c:	move.l 12(sp),-(sp)
    cb30:	jsr 6bc <get2bytes>
    cb36:	addq.l #4,sp
    cb38:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    cb3a:	moveq #1,d0
}
    cb3c:	addq.l #8,sp
    cb3e:	rts

0000cb40 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    cb40:	   /-> lea -12(sp),sp
    cb44:	   |   move.l a6,-(sp)
    cb46:	   |   move.l d2,-(sp)
	if (me) {
    cb48:	   |   tst.l 24(sp)
    cb4c:	/--|-- beq.w cbe2 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    cb50:	|  |   movea.l 24(sp),a0
    cb54:	|  |   move.l 42(a0),d0
    cb58:	|  |   move.l 28(sp),-(sp)
    cb5c:	|  |   move.l d0,-(sp)
    cb5e:	|  \-- jsr cb40 <saveParallaxRecursive>(pc)
    cb62:	|      addq.l #8,sp
		FPutC (fp, 1);
    cb64:	|      move.l 28(sp),16(sp)
    cb6a:	|      moveq #1,d0
    cb6c:	|      move.l d0,12(sp)
    cb70:	|      move.l 1a7ac <DOSBase>,d0
    cb76:	|      movea.l d0,a6
    cb78:	|      move.l 16(sp),d1
    cb7c:	|      move.l 12(sp),d2
    cb80:	|      jsr -312(a6)
    cb84:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    cb88:	|      movea.l 24(sp),a0
    cb8c:	|      move.w 28(a0),d0
    cb90:	|      move.w d0,d0
    cb92:	|      andi.l #65535,d0
    cb98:	|      move.l 28(sp),-(sp)
    cb9c:	|      move.l d0,-(sp)
    cb9e:	|      jsr 8d0 <put2bytes>
    cba4:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    cba6:	|      movea.l 24(sp),a0
    cbaa:	|      move.w 30(a0),d0
    cbae:	|      move.w d0,d0
    cbb0:	|      andi.l #65535,d0
    cbb6:	|      move.l 28(sp),-(sp)
    cbba:	|      move.l d0,-(sp)
    cbbc:	|      jsr 8d0 <put2bytes>
    cbc2:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    cbc4:	|      movea.l 24(sp),a0
    cbc8:	|      move.w 32(a0),d0
    cbcc:	|      move.w d0,d0
    cbce:	|      andi.l #65535,d0
    cbd4:	|      move.l 28(sp),-(sp)
    cbd8:	|      move.l d0,-(sp)
    cbda:	|      jsr 8d0 <put2bytes>
    cbe0:	|      addq.l #8,sp
	}
}
    cbe2:	\----> nop
    cbe4:	       move.l (sp)+,d2
    cbe6:	       movea.l (sp)+,a6
    cbe8:	       lea 12(sp),sp
    cbec:	       rts

0000cbee <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    cbee:	pea 18b66 <PutChar+0x17fe>
    cbf4:	jsr 16894 <KPrintF>
    cbfa:	addq.l #4,sp
	return TRUE;
    cbfc:	moveq #1,d0
    cbfe:	rts

0000cc00 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    cc00:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    cc02:	             move.l 1a86a <allObjectTypes>,(sp)

	while (huntType) {
    cc08:	      /----- bra.s cc20 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    cc0a:	   /--|----> movea.l (sp),a0
    cc0c:	   |  |      move.l 4(a0),d0
    cc10:	   |  |      cmp.l 8(sp),d0
    cc14:	   |  |  /-- bne.s cc1a <findObjectType+0x1a>
    cc16:	   |  |  |   move.l (sp),d0
    cc18:	/--|--|--|-- bra.s cc30 <findObjectType+0x30>
		huntType = huntType -> next;
    cc1a:	|  |  |  \-> movea.l (sp),a0
    cc1c:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    cc20:	|  |  \----> tst.l (sp)
    cc22:	|  \-------- bne.s cc0a <findObjectType+0xa>
	}

	return loadObjectType (i);
    cc24:	|            move.l 8(sp),-(sp)
    cc28:	|            jsr ccf0 <loadObjectType>
    cc2e:	|            addq.l #4,sp
}
    cc30:	\----------> addq.l #4,sp
    cc32:	             rts

0000cc34 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    cc34:	             lea -12(sp),sp
	int i, num = 0;
    cc38:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    cc3c:	             move.l 20(sp),-(sp)
    cc40:	             jsr cc00 <findObjectType>
    cc46:	             addq.l #4,sp
    cc48:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    cc4a:	             clr.l 8(sp)
    cc4e:	   /-------- bra.s cc84 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    cc50:	/--|-------> movea.l (sp),a0
    cc52:	|  |         move.l 38(a0),d1
    cc56:	|  |         move.l 8(sp),d0
    cc5a:	|  |         lsl.l #3,d0
    cc5c:	|  |         movea.l d1,a0
    cc5e:	|  |         adda.l d0,a0
    cc60:	|  |         move.l (a0),d0
    cc62:	|  |         cmp.l 16(sp),d0
    cc66:	|  |  /----- bne.s cc80 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    cc68:	|  |  |      movea.l (sp),a0
    cc6a:	|  |  |      move.l 38(a0),d1
    cc6e:	|  |  |      move.l 8(sp),d0
    cc72:	|  |  |      lsl.l #3,d0
    cc74:	|  |  |      movea.l d1,a0
    cc76:	|  |  |      adda.l d0,a0
    cc78:	|  |  |      move.l 4(a0),4(sp)
			break;
    cc7e:	|  |  |  /-- bra.s cc90 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    cc80:	|  |  \--|-> addq.l #1,8(sp)
    cc84:	|  \-----|-> movea.l (sp),a0
    cc86:	|        |   move.l 16(a0),d0
    cc8a:	|        |   cmp.l 8(sp),d0
    cc8e:	\--------|-- bgt.s cc50 <getCombinationFunction+0x1c>
		}
	}

	return num;
    cc90:	         \-> move.l 4(sp),d0
}
    cc94:	             lea 12(sp),sp
    cc98:	             rts

0000cc9a <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    cc9a:	moveq #1,d0
}
    cc9c:	rts

0000cc9e <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    cc9e:	subq.l #8,sp
    cca0:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    cca2:	move.l 16(sp),-(sp)
    cca6:	jsr 6bc <get2bytes>
    ccac:	addq.l #4,sp
    ccae:	move.l d0,-(sp)
    ccb0:	jsr ccf0 <loadObjectType>
    ccb6:	addq.l #4,sp
    ccb8:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    ccbc:	movea.l 8(sp),a0
    ccc0:	move.l (a0),4(sp)
    ccc4:	move.l 1a7a4 <SysBase>,d0
    ccca:	movea.l d0,a6
    cccc:	movea.l 4(sp),a1
    ccd0:	jsr -690(a6)
	r -> screenName = readString (fp);
    ccd4:	move.l 16(sp),-(sp)
    ccd8:	jsr b02 <readString>
    ccde:	addq.l #4,sp
    cce0:	movea.l 8(sp),a0
    cce4:	move.l d0,(a0)
	return r;
    cce6:	move.l 8(sp),d0
}
    ccea:	movea.l (sp)+,a6
    ccec:	addq.l #8,sp
    ccee:	rts

0000ccf0 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    ccf0:	          lea -84(sp),sp
    ccf4:	          move.l a6,-(sp)
    ccf6:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    ccf8:	          moveq #42,d0
    ccfa:	          move.l d0,84(sp)
    ccfe:	          clr.l 80(sp)
    cd02:	          move.l 1a7a4 <SysBase>,d0
    cd08:	          movea.l d0,a6
    cd0a:	          move.l 84(sp),d0
    cd0e:	          move.l 80(sp),d1
    cd12:	          jsr -684(a6)
    cd16:	          move.l d0,76(sp)
    cd1a:	          move.l 76(sp),d0
    cd1e:	          move.l d0,72(sp)

    if (newType) {
    cd22:	/-------- beq.w cf9c <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    cd26:	|         move.l 96(sp),-(sp)
    cd2a:	|         jsr 6720 <openObjectSlice>
    cd30:	|         addq.l #4,sp
    cd32:	|         tst.w d0
    cd34:	+-------- beq.w cf9c <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    cd38:	|         move.l 1a78c <bigDataFile>,d0
    cd3e:	|         move.l d0,-(sp)
    cd40:	|         jsr 6bc <get2bytes>
    cd46:	|         addq.l #4,sp
    cd48:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    cd4c:	|         move.l 1a78c <bigDataFile>,64(sp)
    cd54:	|         move.l 1a7ac <DOSBase>,d0
    cd5a:	|         movea.l d0,a6
    cd5c:	|         move.l 64(sp),d1
    cd60:	|         jsr -306(a6)
    cd64:	|         move.l d0,60(sp)
    cd68:	|         move.l 60(sp),d0
    cd6c:	|         move.l d0,d0
    cd6e:	|         movea.l 72(sp),a0
    cd72:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    cd76:	|         move.l 1a78c <bigDataFile>,56(sp)
    cd7e:	|         move.l 1a7ac <DOSBase>,d0
    cd84:	|         movea.l d0,a6
    cd86:	|         move.l 56(sp),d1
    cd8a:	|         jsr -306(a6)
    cd8e:	|         move.l d0,52(sp)
    cd92:	|         move.l 52(sp),d0
    cd96:	|         move.l d0,d0
    cd98:	|         movea.l 72(sp),a0
    cd9c:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    cda0:	|         move.l 1a78c <bigDataFile>,48(sp)
    cda8:	|         move.l 1a7ac <DOSBase>,d0
    cdae:	|         movea.l d0,a6
    cdb0:	|         move.l 48(sp),d1
    cdb4:	|         jsr -306(a6)
    cdb8:	|         move.l d0,44(sp)
    cdbc:	|         move.l 44(sp),d0
    cdc0:	|         move.l d0,d0
    cdc2:	|         movea.l 72(sp),a0
    cdc6:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    cdca:	|         move.l 1a78c <bigDataFile>,40(sp)
    cdd2:	|         move.l 1a7ac <DOSBase>,d0
    cdd8:	|         movea.l d0,a6
    cdda:	|         move.l 40(sp),d1
    cdde:	|         jsr -306(a6)
    cde2:	|         move.l d0,36(sp)
    cde6:	|         move.l 36(sp),d0
    cdea:	|         movea.l 72(sp),a0
    cdee:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    cdf2:	|         move.l 1a78c <bigDataFile>,32(sp)
    cdfa:	|         move.l 1a7ac <DOSBase>,d0
    ce00:	|         movea.l d0,a6
    ce02:	|         move.l 32(sp),d1
    ce06:	|         jsr -306(a6)
    ce0a:	|         move.l d0,28(sp)
    ce0e:	|         move.l 28(sp),d0
    ce12:	|         movea.l 72(sp),a0
    ce16:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    ce1a:	|         move.l 1a78c <bigDataFile>,d0
    ce20:	|         move.l d0,-(sp)
    ce22:	|         jsr 718 <get4bytes>
    ce28:	|         addq.l #4,sp
    ce2a:	|         movea.l 72(sp),a0
    ce2e:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    ce32:	|         move.l 1a78c <bigDataFile>,d0
    ce38:	|         move.l d0,-(sp)
    ce3a:	|         jsr 6bc <get2bytes>
    ce40:	|         addq.l #4,sp
    ce42:	|         movea.l 72(sp),a0
    ce46:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    ce4a:	|         move.l 1a78c <bigDataFile>,24(sp)
    ce52:	|         move.l 1a7ac <DOSBase>,d0
    ce58:	|         movea.l d0,a6
    ce5a:	|         move.l 24(sp),d1
    ce5e:	|         jsr -306(a6)
    ce62:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    ce66:	|         move.l 1a78c <bigDataFile>,d0
    ce6c:	|         move.l d0,-(sp)
    ce6e:	|         jsr 7d8 <getFloat>
    ce74:	|         addq.l #4,sp
            getFloat(bigDataFile);
    ce76:	|         move.l 1a78c <bigDataFile>,d0
    ce7c:	|         move.l d0,-(sp)
    ce7e:	|         jsr 7d8 <getFloat>
    ce84:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    ce86:	|         move.l 1a78c <bigDataFile>,d0
    ce8c:	|         move.l d0,-(sp)
    ce8e:	|         jsr 6bc <get2bytes>
    ce94:	|         addq.l #4,sp
    ce96:	|         move.l d0,d0
    ce98:	|         movea.l 72(sp),a0
    ce9c:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    cea0:	|         move.l 1a78c <bigDataFile>,d0
    cea6:	|         move.l d0,-(sp)
    cea8:	|         jsr 6bc <get2bytes>
    ceae:	|         addq.l #4,sp
    ceb0:	|         movea.l 72(sp),a0
    ceb4:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    ceb8:	|         movea.l 72(sp),a0
    cebc:	|         move.l 16(a0),d0
    cec0:	|  /----- beq.s cef2 <loadObjectType+0x202>
    cec2:	|  |      movea.l 72(sp),a0
    cec6:	|  |      move.l 16(a0),d0
    ceca:	|  |      lsl.l #3,d0
    cecc:	|  |      move.l d0,16(sp)
    ced0:	|  |      clr.l 12(sp)
    ced4:	|  |      move.l 1a7a4 <SysBase>,d0
    ceda:	|  |      movea.l d0,a6
    cedc:	|  |      move.l 16(sp),d0
    cee0:	|  |      move.l 12(sp),d1
    cee4:	|  |      jsr -684(a6)
    cee8:	|  |      move.l d0,8(sp)
    ceec:	|  |      move.l 8(sp),d0
    cef0:	|  |  /-- bra.s cef4 <loadObjectType+0x204>
    cef2:	|  \--|-> moveq #0,d0
    cef4:	|     \-> movea.l 72(sp),a0
    cef8:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    cefc:	|         clr.l 88(sp)
    cf00:	|     /-- bra.s cf50 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    cf02:	|  /--|-> move.l 1a78c <bigDataFile>,d1
    cf08:	|  |  |   movea.l 72(sp),a0
    cf0c:	|  |  |   movea.l 38(a0),a0
    cf10:	|  |  |   move.l 88(sp),d0
    cf14:	|  |  |   lsl.l #3,d0
    cf16:	|  |  |   lea (0,a0,d0.l),a2
    cf1a:	|  |  |   move.l d1,-(sp)
    cf1c:	|  |  |   jsr 6bc <get2bytes>
    cf22:	|  |  |   addq.l #4,sp
    cf24:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    cf26:	|  |  |   move.l 1a78c <bigDataFile>,d1
    cf2c:	|  |  |   movea.l 72(sp),a0
    cf30:	|  |  |   movea.l 38(a0),a0
    cf34:	|  |  |   move.l 88(sp),d0
    cf38:	|  |  |   lsl.l #3,d0
    cf3a:	|  |  |   lea (0,a0,d0.l),a2
    cf3e:	|  |  |   move.l d1,-(sp)
    cf40:	|  |  |   jsr 6bc <get2bytes>
    cf46:	|  |  |   addq.l #4,sp
    cf48:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    cf4c:	|  |  |   addq.l #1,88(sp)
    cf50:	|  |  \-> movea.l 72(sp),a0
    cf54:	|  |      move.l 16(a0),d0
    cf58:	|  |      cmp.l 88(sp),d0
    cf5c:	|  \----- bgt.s cf02 <loadObjectType+0x212>
            }
            finishAccess();
    cf5e:	|         jsr 6550 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    cf64:	|         move.l 68(sp),-(sp)
    cf68:	|         jsr 655a <getNumberedString>
    cf6e:	|         addq.l #4,sp
    cf70:	|         movea.l 72(sp),a0
    cf74:	|         move.l d0,(a0)
            newType->objectNum = i;
    cf76:	|         movea.l 72(sp),a0
    cf7a:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    cf80:	|         move.l 1a86a <allObjectTypes>,d0
    cf86:	|         movea.l 72(sp),a0
    cf8a:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    cf8e:	|         move.l 72(sp),1a86a <allObjectTypes>
            return newType;
    cf96:	|         move.l 72(sp),d0
    cf9a:	|     /-- bra.s cf9e <loadObjectType+0x2ae>
        }
    }
    return NULL;
    cf9c:	\-----|-> moveq #0,d0
}
    cf9e:	      \-> movea.l (sp)+,a2
    cfa0:	          movea.l (sp)+,a6
    cfa2:	          lea 84(sp),sp
    cfa6:	          rts

0000cfa8 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    cfa8:	             lea -16(sp),sp
    cfac:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    cfae:	             move.l #108650,16(sp)

	while (* huntRegion) {
    cfb6:	   /-------- bra.s d02a <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    cfb8:	/--|-------> movea.l 16(sp),a0
    cfbc:	|  |         move.l (a0),d0
    cfbe:	|  |         cmp.l 24(sp),d0
    cfc2:	|  |  /----- bne.s d01c <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    cfc4:	|  |  |      movea.l 24(sp),a0
    cfc8:	|  |  |      move.l 8(a0),d0
    cfcc:	|  |  |      movea.l 16(sp),a0
    cfd0:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    cfd2:	|  |  |      movea.l 24(sp),a0
    cfd6:	|  |  |      move.l 38(a0),12(sp)
    cfdc:	|  |  |      move.l 1a7a4 <SysBase>,d0
    cfe2:	|  |  |      movea.l d0,a6
    cfe4:	|  |  |      movea.l 12(sp),a1
    cfe8:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    cfec:	|  |  |      movea.l 24(sp),a0
    cff0:	|  |  |      move.l (a0),8(sp)
    cff4:	|  |  |      move.l 1a7a4 <SysBase>,d0
    cffa:	|  |  |      movea.l d0,a6
    cffc:	|  |  |      movea.l 8(sp),a1
    d000:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d004:	|  |  |      move.l 24(sp),4(sp)
    d00a:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d010:	|  |  |      movea.l d0,a6
    d012:	|  |  |      movea.l 4(sp),a1
    d016:	|  |  |      jsr -690(a6)
			return;
    d01a:	|  |  |  /-- bra.s d040 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d01c:	|  |  \--|-> movea.l 16(sp),a0
    d020:	|  |     |   move.l (a0),d0
    d022:	|  |     |   move.l d0,d1
    d024:	|  |     |   addq.l #8,d1
    d026:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d02a:	|  \-----|-> movea.l 16(sp),a0
    d02e:	|        |   move.l (a0),d0
    d030:	\--------|-- bne.s cfb8 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d032:	         |   pea 18b8d <PutChar+0x1825>
    d038:	         |   jsr 16894 <KPrintF>
    d03e:	         |   addq.l #4,sp
}
    d040:	         \-> movea.l (sp)+,a6
    d042:	             lea 16(sp),sp
    d046:	             rts

0000d048 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d048:	movea.l 4(sp),a0
    d04c:	move.l 4(a0),d0
    d050:	move.l 8(sp),-(sp)
    d054:	move.l d0,-(sp)
    d056:	jsr 8d0 <put2bytes>
    d05c:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d05e:	movea.l 4(sp),a0
    d062:	move.l (a0),d0
    d064:	move.l 8(sp),-(sp)
    d068:	move.l d0,-(sp)
    d06a:	jsr bd8 <writeString>
    d070:	addq.l #8,sp
    d072:	nop
    d074:	rts

0000d076 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d076:	                         lea -112(sp),sp
    d07a:	                         move.l a6,-(sp)
    d07c:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d07e:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d082:	                         move.w 1a870 <saveEncoding>,d0
    d088:	                  /----- beq.s d092 <fileToStack+0x1c>
    d08a:	                  |      move.l #101299,d0
    d090:	                  |  /-- bra.s d098 <fileToStack+0x22>
    d092:	                  \--|-> move.l #101325,d0
    d098:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d09c:	                         move.l 124(sp),112(sp)
    d0a2:	                         move.l #1005,108(sp)
    d0aa:	                         move.l 1a7ac <DOSBase>,d0
    d0b0:	                         movea.l d0,a6
    d0b2:	                         move.l 112(sp),d1
    d0b6:	                         move.l 108(sp),d2
    d0ba:	                         jsr -30(a6)
    d0be:	                         move.l d0,104(sp)
    d0c2:	                         move.l 104(sp),d0
    d0c6:	                         move.l d0,100(sp)
    if (!fp) {
    d0ca:	                     /-- bne.s d0e4 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d0cc:	                     |   move.l 124(sp),-(sp)
    d0d0:	                     |   pea 18be4 <PutChar+0x187c>
    d0d6:	                     |   jsr 16894 <KPrintF>
    d0dc:	                     |   addq.l #8,sp
        return FALSE;
    d0de:	                     |   clr.w d0
    d0e0:	/--------------------|-- bra.w d3da <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    d0e4:	|                    \-> move.w 1a870 <saveEncoding>,d0
    d0ea:	|                        move.l d0,d0
    d0ec:	|                        move.b d0,1a86e <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    d0f2:	|                        move.w 1a870 <saveEncoding>,d0
    d0f8:	|                        lsr.w #8,d0
    d0fa:	|                        move.l d0,d0
    d0fc:	|                        move.b d0,1a86f <encode2>

    while (*checker) {
    d102:	|                 /----- bra.s d166 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    d104:	|              /--|----> move.l 100(sp),30(sp)
    d10a:	|              |  |      move.l 1a7ac <DOSBase>,d0
    d110:	|              |  |      movea.l d0,a6
    d112:	|              |  |      move.l 30(sp),d1
    d116:	|              |  |      jsr -306(a6)
    d11a:	|              |  |      move.l d0,26(sp)
    d11e:	|              |  |      move.l 26(sp),d1
    d122:	|              |  |      movea.l 116(sp),a0
    d126:	|              |  |      move.b (a0),d0
    d128:	|              |  |      ext.w d0
    d12a:	|              |  |      movea.w d0,a0
    d12c:	|              |  |      cmpa.l d1,a0
    d12e:	|              |  |  /-- beq.s d162 <fileToStack+0xec>
            Close(fp);
    d130:	|              |  |  |   move.l 100(sp),22(sp)
    d136:	|              |  |  |   move.l 1a7ac <DOSBase>,d0
    d13c:	|              |  |  |   movea.l d0,a6
    d13e:	|              |  |  |   move.l 22(sp),d1
    d142:	|              |  |  |   jsr -36(a6)
    d146:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    d14a:	|              |  |  |   move.l 124(sp),-(sp)
    d14e:	|              |  |  |   pea 18bf1 <PutChar+0x1889>
    d154:	|              |  |  |   jsr 16894 <KPrintF>
    d15a:	|              |  |  |   addq.l #8,sp
            return FALSE;
    d15c:	|              |  |  |   clr.w d0
    d15e:	+--------------|--|--|-- bra.w d3da <fileToStack+0x364>
        }
        checker++;
    d162:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    d166:	|              |  \----> movea.l 116(sp),a0
    d16a:	|              |         move.b (a0),d0
    d16c:	|              \-------- bne.s d104 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    d16e:	|                        move.w 1a870 <saveEncoding>,d0
    d174:	|  /-------------------- beq.s d1e8 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    d176:	|  |                     move.l 100(sp),-(sp)
    d17a:	|  |                     jsr d3e4 <readStringEncoded>
    d180:	|  |                     addq.l #4,sp
    d182:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    d186:	|  |                     pea 18c32 <PutChar+0x18ca>
    d18c:	|  |                     move.l 100(sp),-(sp)
    d190:	|  |                     jsr 13342 <strcmp>
    d196:	|  |                     addq.l #8,sp
    d198:	|  |                     tst.l d0
    d19a:	|  |                 /-- beq.s d1ce <fileToStack+0x158>
            Close(fp);
    d19c:	|  |                 |   move.l 100(sp),88(sp)
    d1a2:	|  |                 |   move.l 1a7ac <DOSBase>,d0
    d1a8:	|  |                 |   movea.l d0,a6
    d1aa:	|  |                 |   move.l 88(sp),d1
    d1ae:	|  |                 |   jsr -36(a6)
    d1b2:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    d1b6:	|  |                 |   move.l 124(sp),-(sp)
    d1ba:	|  |                 |   pea 18c41 <PutChar+0x18d9>
    d1c0:	|  |                 |   jsr 16894 <KPrintF>
    d1c6:	|  |                 |   addq.l #8,sp
            return FALSE;
    d1c8:	|  |                 |   clr.w d0
    d1ca:	+--|-----------------|-- bra.w d3da <fileToStack+0x364>
        }
        FreeVec(checker);
    d1ce:	|  |                 \-> move.l 96(sp),92(sp)
    d1d4:	|  |                     move.l 1a7a4 <SysBase>,d0
    d1da:	|  |                     movea.l d0,a6
    d1dc:	|  |                     movea.l 92(sp),a1
    d1e0:	|  |                     jsr -690(a6)
        checker = NULL;
    d1e4:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    d1e8:	|  >-------------------> move.w 1a870 <saveEncoding>,d0
    d1ee:	|  |     /-------------- beq.w d322 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    d1f2:	|  |     |               move.l 100(sp),76(sp)
    d1f8:	|  |     |               move.l 1a7ac <DOSBase>,d0
    d1fe:	|  |     |               movea.l d0,a6
    d200:	|  |     |               move.l 76(sp),d1
    d204:	|  |     |               jsr -306(a6)
    d208:	|  |     |               move.l d0,72(sp)
    d20c:	|  |     |               move.l 72(sp),d0
    d210:	|  |     |               move.b 1a86e <encode1>,d1
    d216:	|  |     |               ext.w d1
    d218:	|  |     |               ext.l d1
    d21a:	|  |     |               move.l d0,d2
    d21c:	|  |     |               eor.l d1,d2
    d21e:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    d222:	|  |     |               moveq #-1,d0
    d224:	|  |     |               cmp.l 68(sp),d0
    d228:	|  |  /--|-------------- beq.w d3b8 <fileToStack+0x342>

            char i = (char) tmp;
    d22c:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    d232:	|  |  |  |               move.b 67(sp),d0
    d236:	|  |  |  |               ext.w d0
    d238:	|  |  |  |               movea.w d0,a0
    d23a:	|  |  |  |               moveq #2,d2
    d23c:	|  |  |  |               cmp.l a0,d2
    d23e:	|  |  |  |     /-------- beq.s d2ba <fileToStack+0x244>
    d240:	|  |  |  |     |         moveq #2,d0
    d242:	|  |  |  |     |         cmp.l a0,d0
    d244:	|  |  |  |  /--|-------- blt.w d2f0 <fileToStack+0x27a>
    d248:	|  |  |  |  |  |         cmpa.w #0,a0
    d24c:	|  |  |  |  |  |     /-- beq.s d258 <fileToStack+0x1e2>
    d24e:	|  |  |  |  |  |     |   moveq #1,d2
    d250:	|  |  |  |  |  |     |   cmp.l a0,d2
    d252:	|  |  |  |  |  |  /--|-- beq.s d294 <fileToStack+0x21e>
    d254:	|  |  |  |  +--|--|--|-- bra.w d2f0 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    d258:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    d25c:	|  |  |  |  |  |  |      jsr d3e4 <readStringEncoded>
    d262:	|  |  |  |  |  |  |      addq.l #4,sp
    d264:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    d268:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    d26c:	|  |  |  |  |  |  |      lea 14(sp),a0
    d270:	|  |  |  |  |  |  |      move.l a0,-(sp)
    d272:	|  |  |  |  |  |  |      jsr 140b8 <makeTextVar>
    d278:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    d27a:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    d280:	|  |  |  |  |  |  |      move.l 1a7a4 <SysBase>,d0
    d286:	|  |  |  |  |  |  |      movea.l d0,a6
    d288:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    d28c:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    d290:	|  |  |  |  |  |  |  /-- bra.w d348 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    d294:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    d298:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    d29e:	|  |  |  |  |  |     |   addq.l #4,sp
    d2a0:	|  |  |  |  |  |     |   move.l d0,-(sp)
    d2a2:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    d2a6:	|  |  |  |  |  |     |   lea 18(sp),a0
    d2aa:	|  |  |  |  |  |     |   move.l a0,-(sp)
    d2ac:	|  |  |  |  |  |     |   jsr 14788 <setVariable>
    d2b2:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    d2b6:	|  |  |  |  |  |     +-- bra.w d348 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    d2ba:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    d2c0:	|  |  |  |  |        |   move.l 1a7ac <DOSBase>,d0
    d2c6:	|  |  |  |  |        |   movea.l d0,a6
    d2c8:	|  |  |  |  |        |   move.l 62(sp),d1
    d2cc:	|  |  |  |  |        |   jsr -306(a6)
    d2d0:	|  |  |  |  |        |   move.l d0,58(sp)
    d2d4:	|  |  |  |  |        |   move.l 58(sp),d0
    d2d8:	|  |  |  |  |        |   move.l d0,-(sp)
    d2da:	|  |  |  |  |        |   pea 1 <_start+0x1>
    d2de:	|  |  |  |  |        |   lea 18(sp),a0
    d2e2:	|  |  |  |  |        |   move.l a0,-(sp)
    d2e4:	|  |  |  |  |        |   jsr 14788 <setVariable>
    d2ea:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    d2ee:	|  |  |  |  |        +-- bra.s d348 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    d2f0:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    d2f4:	|  |  |  |           |   pea 18cc3 <PutChar+0x195b>
    d2fa:	|  |  |  |           |   jsr 16894 <KPrintF>
    d300:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    d302:	|  |  |  |           |   move.l 100(sp),46(sp)
    d308:	|  |  |  |           |   move.l 1a7ac <DOSBase>,d0
    d30e:	|  |  |  |           |   movea.l d0,a6
    d310:	|  |  |  |           |   move.l 46(sp),d1
    d314:	|  |  |  |           |   jsr -36(a6)
    d318:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    d31c:	|  |  |  |           |   clr.w d0
    d31e:	+--|--|--|-----------|-- bra.w d3da <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    d322:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    d326:	|  |  |              |   jsr d4aa <readTextPlain>
    d32c:	|  |  |              |   addq.l #4,sp
    d32e:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    d332:	|  |  |        /-----|-- beq.w d3bc <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    d336:	|  |  |        |     |   move.l 80(sp),-(sp)
    d33a:	|  |  |        |     |   lea 14(sp),a0
    d33e:	|  |  |        |     |   move.l a0,-(sp)
    d340:	|  |  |        |     |   jsr 140b8 <makeTextVar>
    d346:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    d348:	|  |  |        |     \-> movea.l 128(sp),a0
    d34c:	|  |  |        |         move.l (a0),d0
    d34e:	|  |  |        |  /----- bne.s d37e <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    d350:	|  |  |        |  |      move.l 128(sp),d0
    d354:	|  |  |        |  |      move.l d0,-(sp)
    d356:	|  |  |        |  |      lea 14(sp),a0
    d35a:	|  |  |        |  |      move.l a0,-(sp)
    d35c:	|  |  |        |  |      jsr 13758 <addVarToStackQuick>
    d362:	|  |  |        |  |      addq.l #8,sp
    d364:	|  |  |        |  |      tst.w d0
    d366:	|  |  |        |  |  /-- bne.s d36c <fileToStack+0x2f6>
    d368:	|  |  |        |  |  |   clr.w d0
    d36a:	+--|--|--------|--|--|-- bra.s d3da <fileToStack+0x364>
            sH->last = sH->first;
    d36c:	|  |  |        |  |  \-> movea.l 128(sp),a0
    d370:	|  |  |        |  |      move.l (a0),d0
    d372:	|  |  |        |  |      movea.l 128(sp),a0
    d376:	|  |  |        |  |      move.l d0,4(a0)
    d37a:	|  +--|--------|--|----- bra.w d1e8 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    d37e:	|  |  |        |  \----> movea.l 128(sp),a0
    d382:	|  |  |        |         move.l 4(a0),d0
    d386:	|  |  |        |         addq.l #8,d0
    d388:	|  |  |        |         move.l d0,-(sp)
    d38a:	|  |  |        |         lea 14(sp),a0
    d38e:	|  |  |        |         move.l a0,-(sp)
    d390:	|  |  |        |         jsr 13758 <addVarToStackQuick>
    d396:	|  |  |        |         addq.l #8,sp
    d398:	|  |  |        |         tst.w d0
    d39a:	|  |  |        |     /-- bne.s d3a0 <fileToStack+0x32a>
    d39c:	|  |  |        |     |   clr.w d0
    d39e:	+--|--|--------|-----|-- bra.s d3da <fileToStack+0x364>
            sH->last = sH->last->next;
    d3a0:	|  |  |        |     \-> movea.l 128(sp),a0
    d3a4:	|  |  |        |         movea.l 4(a0),a0
    d3a8:	|  |  |        |         move.l 8(a0),d0
    d3ac:	|  |  |        |         movea.l 128(sp),a0
    d3b0:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    d3b4:	|  \--|--------|-------- bra.w d1e8 <fileToStack+0x172>
            if (tmp == -1) break;
    d3b8:	|     \--------|-------> nop
    d3ba:	|              |     /-- bra.s d3be <fileToStack+0x348>
            if (!line) break;
    d3bc:	|              \-----|-> nop
        }
    }
    Close(fp);
    d3be:	|                    \-> move.l 100(sp),38(sp)
    d3c4:	|                        move.l 1a7ac <DOSBase>,d0
    d3ca:	|                        movea.l d0,a6
    d3cc:	|                        move.l 38(sp),d1
    d3d0:	|                        jsr -36(a6)
    d3d4:	|                        move.l d0,34(sp)
    return TRUE;
    d3d8:	|                        moveq #1,d0
}
    d3da:	\----------------------> move.l (sp)+,d2
    d3dc:	                         movea.l (sp)+,a6
    d3de:	                         lea 112(sp),sp
    d3e2:	                         rts

0000d3e4 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    d3e4:	          lea -32(sp),sp
    d3e8:	          move.l a6,-(sp)
    d3ea:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    d3ec:	          move.l 44(sp),-(sp)
    d3f0:	          jsr 6bc <get2bytes>
    d3f6:	          addq.l #4,sp
    d3f8:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    d3fc:	          move.l 32(sp),d0
    d400:	          addq.l #1,d0
    d402:	          move.l d0,28(sp)
    d406:	          clr.l 24(sp)
    d40a:	          move.l 1a7a4 <SysBase>,d0
    d410:	          movea.l d0,a6
    d412:	          move.l 28(sp),d0
    d416:	          move.l 24(sp),d1
    d41a:	          jsr -684(a6)
    d41e:	          move.l d0,20(sp)
    d422:	          move.l 20(sp),d0
    d426:	          move.l d0,16(sp)
    if (!s) return NULL;
    d42a:	      /-- bne.s d430 <readStringEncoded+0x4c>
    d42c:	      |   moveq #0,d0
    d42e:	/-----|-- bra.s d4a0 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    d430:	|     \-> clr.l 36(sp)
    d434:	|     /-- bra.s d486 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    d436:	|  /--|-> move.l 44(sp),12(sp)
    d43c:	|  |  |   move.l 1a7ac <DOSBase>,d0
    d442:	|  |  |   movea.l d0,a6
    d444:	|  |  |   move.l 12(sp),d1
    d448:	|  |  |   jsr -306(a6)
    d44c:	|  |  |   move.l d0,8(sp)
    d450:	|  |  |   move.l 8(sp),d0
    d454:	|  |  |   move.l d0,d1
    d456:	|  |  |   move.b 1a86e <encode1>,d2
    d45c:	|  |  |   move.l 36(sp),d0
    d460:	|  |  |   movea.l 16(sp),a0
    d464:	|  |  |   adda.l d0,a0
    d466:	|  |  |   move.b d1,d0
    d468:	|  |  |   eor.b d2,d0
    d46a:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    d46c:	|  |  |   move.b 1a86e <encode1>,d0
    d472:	|  |  |   move.b d0,d1
    d474:	|  |  |   move.b 1a86f <encode2>,d0
    d47a:	|  |  |   add.b d1,d0
    d47c:	|  |  |   move.b d0,1a86e <encode1>
    for (a = 0; a < len; a++) {
    d482:	|  |  |   addq.l #1,36(sp)
    d486:	|  |  \-> move.l 36(sp),d0
    d48a:	|  |      cmp.l 32(sp),d0
    d48e:	|  \----- blt.s d436 <readStringEncoded+0x52>
    }
    s[len] = 0;
    d490:	|         move.l 32(sp),d0
    d494:	|         movea.l 16(sp),a0
    d498:	|         adda.l d0,a0
    d49a:	|         clr.b (a0)
    return s;
    d49c:	|         move.l 16(sp),d0
}
    d4a0:	\-------> move.l (sp)+,d2
    d4a2:	          movea.l (sp)+,a6
    d4a4:	          lea 32(sp),sp
    d4a8:	          rts

0000d4aa <readTextPlain>:

char *readTextPlain(BPTR fp) {
    d4aa:	             lea -104(sp),sp
    d4ae:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    d4b2:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    d4b6:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    d4bc:	             move.l 124(sp),106(sp)
    d4c2:	             clr.l 102(sp)
    d4c6:	             clr.l 98(sp)
    d4ca:	             move.l 1a7ac <DOSBase>,d0
    d4d0:	             movea.l d0,a6
    d4d2:	             move.l 106(sp),d1
    d4d6:	             move.l 102(sp),d2
    d4da:	             move.l 98(sp),d3
    d4de:	             jsr -66(a6)
    d4e2:	             move.l d0,94(sp)
    d4e6:	             move.l 94(sp),d0
    d4ea:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    d4ee:	   /-------- bra.s d532 <readTextPlain+0x88>
        tmp = FGetC(fp);
    d4f0:	/--|-------> move.l 124(sp),22(sp)
    d4f6:	|  |         move.l 1a7ac <DOSBase>,d0
    d4fc:	|  |         movea.l d0,a6
    d4fe:	|  |         move.l 22(sp),d1
    d502:	|  |         jsr -306(a6)
    d506:	|  |         move.l d0,18(sp)
    d50a:	|  |         move.l 18(sp),d0
    d50e:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    d512:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    d518:	|  |         cmpi.b #10,17(sp)
    d51e:	|  |  /----- beq.s d528 <readTextPlain+0x7e>
    d520:	|  |  |      moveq #-1,d0
    d522:	|  |  |      cmp.l 110(sp),d0
    d526:	|  |  |  /-- bne.s d52e <readTextPlain+0x84>
            keepGoing = FALSE;
    d528:	|  |  \--|-> clr.w 114(sp)
    d52c:	|  +-----|-- bra.s d532 <readTextPlain+0x88>
        } else {
            stringSize++;
    d52e:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    d532:	|  \-------> tst.w 114(sp)
    d536:	\----------- bne.s d4f0 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    d538:	             tst.l 116(sp)
    d53c:	         /-- bne.s d54c <readTextPlain+0xa2>
    d53e:	         |   moveq #-1,d0
    d540:	         |   cmp.l 110(sp),d0
    d544:	         +-- bne.s d54c <readTextPlain+0xa2>
        return NULL;
    d546:	         |   moveq #0,d0
    d548:	      /--|-- bra.w d632 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    d54c:	      |  \-> move.l 124(sp),86(sp)
    d552:	      |      move.l 90(sp),82(sp)
    d558:	      |      moveq #-1,d0
    d55a:	      |      move.l d0,78(sp)
    d55e:	      |      move.l 1a7ac <DOSBase>,d0
    d564:	      |      movea.l d0,a6
    d566:	      |      move.l 86(sp),d1
    d56a:	      |      move.l 82(sp),d2
    d56e:	      |      move.l 78(sp),d3
    d572:	      |      jsr -66(a6)
    d576:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    d57a:	      |      move.l 116(sp),d0
    d57e:	      |      addq.l #1,d0
    d580:	      |      move.l d0,70(sp)
    d584:	      |      clr.l 66(sp)
    d588:	      |      move.l 1a7a4 <SysBase>,d0
    d58e:	      |      movea.l d0,a6
    d590:	      |      move.l 70(sp),d0
    d594:	      |      move.l 66(sp),d1
    d598:	      |      jsr -684(a6)
    d59c:	      |      move.l d0,62(sp)
    d5a0:	      |      move.l 62(sp),d0
    d5a4:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    d5a8:	      |  /-- bne.s d5b0 <readTextPlain+0x106>
    d5aa:	      |  |   moveq #0,d0
    d5ac:	      +--|-- bra.w d632 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    d5b0:	      |  \-> move.l 124(sp),54(sp)
    d5b6:	      |      move.l 58(sp),50(sp)
    d5bc:	      |      moveq #1,d0
    d5be:	      |      move.l d0,46(sp)
    d5c2:	      |      move.l 116(sp),42(sp)
    d5c8:	      |      move.l 1a7ac <DOSBase>,d0
    d5ce:	      |      movea.l d0,a6
    d5d0:	      |      move.l 54(sp),d1
    d5d4:	      |      move.l 50(sp),d2
    d5d8:	      |      move.l 46(sp),d3
    d5dc:	      |      move.l 42(sp),d4
    d5e0:	      |      jsr -324(a6)
    d5e4:	      |      move.l d0,38(sp)
    d5e8:	      |      move.l 38(sp),d0
    d5ec:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    d5f0:	      |      move.l 34(sp),d0
    d5f4:	      |      cmp.l 116(sp),d0
    d5f8:	      |  /-- beq.s d608 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    d5fa:	      |  |   pea 18cf8 <PutChar+0x1990>
    d600:	      |  |   jsr 16894 <KPrintF>
    d606:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    d608:	      |  \-> move.l 124(sp),30(sp)
    d60e:	      |      move.l 1a7ac <DOSBase>,d0
    d614:	      |      movea.l d0,a6
    d616:	      |      move.l 30(sp),d1
    d61a:	      |      jsr -306(a6)
    d61e:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    d622:	      |      move.l 116(sp),d0
    d626:	      |      movea.l 58(sp),a0
    d62a:	      |      adda.l d0,a0
    d62c:	      |      clr.b (a0)
    }

    return reply;
    d62e:	      |      move.l 58(sp),d0
}
    d632:	      \----> movem.l (sp)+,d2-d4/a6
    d636:	             lea 104(sp),sp
    d63a:	             rts

0000d63c <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    d63c:	                      lea -144(sp),sp
    d640:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    d644:	                      move.l 160(sp),148(sp)
    d64a:	                      move.l #1006,144(sp)
    d652:	                      move.l 1a7ac <DOSBase>,d0
    d658:	                      movea.l d0,a6
    d65a:	                      move.l 148(sp),d1
    d65e:	                      move.l 144(sp),d2
    d662:	                      jsr -30(a6)
    d666:	                      move.l d0,140(sp)
    d66a:	                      move.l 140(sp),d0
    d66e:	                      move.l d0,136(sp)

    if (!fp) {
    d672:	                  /-- bne.s d68c <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    d674:	                  |   move.l 160(sp),-(sp)
    d678:	                  |   pea 18d19 <PutChar+0x19b1>
    d67e:	                  |   jsr 16894 <KPrintF>
    d684:	                  |   addq.l #8,sp
        return FALSE;
    d686:	                  |   clr.w d0
    d688:	/-----------------|-- bra.w d948 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    d68c:	|                 \-> movea.l 164(sp),a0
    d690:	|                     movea.l 4(a0),a0
    d694:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    d698:	|                     move.w 1a870 <saveEncoding>,d0
    d69e:	|                     move.l d0,d0
    d6a0:	|                     move.b d0,1a86e <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    d6a6:	|                     move.w 1a870 <saveEncoding>,d0
    d6ac:	|                     lsr.w #8,d0
    d6ae:	|                     move.l d0,d0
    d6b0:	|                     move.b d0,1a86f <encode2>

    if (saveEncoding) {
    d6b6:	|                     move.w 1a870 <saveEncoding>,d0
    d6bc:	|                 /-- beq.s d70e <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    d6be:	|                 |   move.l 136(sp),116(sp)
    d6c4:	|                 |   move.l #101299,112(sp)
    d6cc:	|                 |   moveq #99,d0
    d6ce:	|                 |   not.b d0
    d6d0:	|                 |   add.l sp,d0
    d6d2:	|                 |   addi.l #-144,d0
    d6d8:	|                 |   move.l d0,108(sp)
    d6dc:	|                 |   move.l 1a7ac <DOSBase>,d0
    d6e2:	|                 |   movea.l d0,a6
    d6e4:	|                 |   move.l 116(sp),d1
    d6e8:	|                 |   move.l 112(sp),d2
    d6ec:	|                 |   move.l 108(sp),d3
    d6f0:	|                 |   jsr -354(a6)
    d6f4:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    d6f8:	|                 |   move.l 136(sp),-(sp)
    d6fc:	|                 |   pea 18c32 <PutChar+0x18ca>
    d702:	|                 |   jsr d952 <writeStringEncoded>
    d708:	|                 |   addq.l #8,sp
    d70a:	|  /--------------|-- bra.w d920 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    d70e:	|  |              \-> move.l 136(sp),132(sp)
    d714:	|  |                  move.l #101325,128(sp)
    d71c:	|  |                  moveq #99,d1
    d71e:	|  |                  not.b d1
    d720:	|  |                  add.l sp,d1
    d722:	|  |                  addi.l #-144,d1
    d728:	|  |                  move.l d1,124(sp)
    d72c:	|  |                  move.l 1a7ac <DOSBase>,d0
    d732:	|  |                  movea.l d0,a6
    d734:	|  |                  move.l 132(sp),d1
    d738:	|  |                  move.l 128(sp),d2
    d73c:	|  |                  move.l 124(sp),d3
    d740:	|  |                  jsr -354(a6)
    d744:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    d748:	|  +----------------- bra.w d920 <stackToFile+0x2e4>
        if (saveEncoding) {
    d74c:	|  |  /-------------> move.w 1a870 <saveEncoding>,d0
    d752:	|  |  |     /-------- beq.w d8a4 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    d756:	|  |  |     |         movea.l 152(sp),a0
    d75a:	|  |  |     |         move.l (a0),d0
    d75c:	|  |  |     |         moveq #1,d1
    d75e:	|  |  |     |         cmp.l d0,d1
    d760:	|  |  |     |     /-- beq.s d7b0 <stackToFile+0x174>
    d762:	|  |  |     |     |   moveq #3,d1
    d764:	|  |  |     |     |   cmp.l d0,d1
    d766:	|  |  |     |  /--|-- bne.w d872 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    d76a:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    d770:	|  |  |     |  |  |   move.b 1a86e <encode1>,d0
    d776:	|  |  |     |  |  |   ext.w d0
    d778:	|  |  |     |  |  |   movea.w d0,a0
    d77a:	|  |  |     |  |  |   move.l a0,72(sp)
    d77e:	|  |  |     |  |  |   move.l 1a7ac <DOSBase>,d0
    d784:	|  |  |     |  |  |   movea.l d0,a6
    d786:	|  |  |     |  |  |   move.l 76(sp),d1
    d78a:	|  |  |     |  |  |   move.l 72(sp),d2
    d78e:	|  |  |     |  |  |   jsr -312(a6)
    d792:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    d796:	|  |  |     |  |  |   movea.l 152(sp),a0
    d79a:	|  |  |     |  |  |   move.l 4(a0),d0
    d79e:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    d7a2:	|  |  |     |  |  |   move.l d0,-(sp)
    d7a4:	|  |  |     |  |  |   jsr d952 <writeStringEncoded>
    d7aa:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    d7ac:	|  |  |  /--|--|--|-- bra.w d916 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    d7b0:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    d7b4:	|  |  |  |  |  |      move.l 4(a0),d0
    d7b8:	|  |  |  |  |  |  /-- bmi.s d828 <stackToFile+0x1ec>
    d7ba:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    d7be:	|  |  |  |  |  |  |   move.l 4(a0),d0
    d7c2:	|  |  |  |  |  |  |   cmpi.l #255,d0
    d7c8:	|  |  |  |  |  |  +-- bgt.s d828 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    d7ca:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    d7d0:	|  |  |  |  |  |  |   move.b 1a86e <encode1>,d0
    d7d6:	|  |  |  |  |  |  |   eori.b #2,d0
    d7da:	|  |  |  |  |  |  |   ext.w d0
    d7dc:	|  |  |  |  |  |  |   movea.w d0,a0
    d7de:	|  |  |  |  |  |  |   move.l a0,60(sp)
    d7e2:	|  |  |  |  |  |  |   move.l 1a7ac <DOSBase>,d0
    d7e8:	|  |  |  |  |  |  |   movea.l d0,a6
    d7ea:	|  |  |  |  |  |  |   move.l 64(sp),d1
    d7ee:	|  |  |  |  |  |  |   move.l 60(sp),d2
    d7f2:	|  |  |  |  |  |  |   jsr -312(a6)
    d7f6:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    d7fa:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    d800:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    d804:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    d80a:	|  |  |  |  |  |  |   move.l 1a7ac <DOSBase>,d0
    d810:	|  |  |  |  |  |  |   movea.l d0,a6
    d812:	|  |  |  |  |  |  |   move.l 52(sp),d1
    d816:	|  |  |  |  |  |  |   move.l 48(sp),d2
    d81a:	|  |  |  |  |  |  |   jsr -312(a6)
    d81e:	|  |  |  |  |  |  |   move.l d0,44(sp)
    d822:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    d824:	|  |  |  +--|--|--|-- bra.w d916 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    d828:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    d82e:	|  |  |  |  |  |      move.b 1a86e <encode1>,d0
    d834:	|  |  |  |  |  |      eori.b #1,d0
    d838:	|  |  |  |  |  |      ext.w d0
    d83a:	|  |  |  |  |  |      movea.w d0,a0
    d83c:	|  |  |  |  |  |      move.l a0,36(sp)
    d840:	|  |  |  |  |  |      move.l 1a7ac <DOSBase>,d0
    d846:	|  |  |  |  |  |      movea.l d0,a6
    d848:	|  |  |  |  |  |      move.l 40(sp),d1
    d84c:	|  |  |  |  |  |      move.l 36(sp),d2
    d850:	|  |  |  |  |  |      jsr -312(a6)
    d854:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    d858:	|  |  |  |  |  |      movea.l 152(sp),a0
    d85c:	|  |  |  |  |  |      move.l 4(a0),d0
    d860:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    d864:	|  |  |  |  |  |      move.l d0,-(sp)
    d866:	|  |  |  |  |  |      jsr 958 <put4bytes>
    d86c:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    d86e:	|  |  |  +--|--|----- bra.w d916 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    d872:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    d876:	|  |  |  |  |         pea 18d2b <PutChar+0x19c3>
    d87c:	|  |  |  |  |         jsr 16894 <KPrintF>
    d882:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    d884:	|  |  |  |  |         move.l 136(sp),28(sp)
    d88a:	|  |  |  |  |         move.l 1a7ac <DOSBase>,d0
    d890:	|  |  |  |  |         movea.l d0,a6
    d892:	|  |  |  |  |         move.l 28(sp),d1
    d896:	|  |  |  |  |         jsr -36(a6)
    d89a:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    d89e:	|  |  |  |  |         clr.w d0
    d8a0:	+--|--|--|--|-------- bra.w d948 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    d8a4:	|  |  |  |  \-------> move.l 152(sp),d0
    d8a8:	|  |  |  |            move.l d0,-(sp)
    d8aa:	|  |  |  |            jsr 1446c <getTextFromAnyVar>
    d8b0:	|  |  |  |            addq.l #4,sp
    d8b2:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    d8b6:	|  |  |  |     /----- beq.s d92a <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    d8b8:	|  |  |  |     |      movea.l 100(sp),a0
    d8bc:	|  |  |  |     |      move.b (a0),d0
    d8be:	|  |  |  |     |      ext.w d0
    d8c0:	|  |  |  |     |      movea.w d0,a0
    d8c2:	|  |  |  |     |      move.l a0,12(sp)
    d8c6:	|  |  |  |     |      move.l 136(sp),96(sp)
    d8cc:	|  |  |  |     |      move.l #101767,92(sp)
    d8d4:	|  |  |  |     |      moveq #99,d0
    d8d6:	|  |  |  |     |      not.b d0
    d8d8:	|  |  |  |     |      add.l sp,d0
    d8da:	|  |  |  |     |      addi.l #-144,d0
    d8e0:	|  |  |  |     |      move.l d0,88(sp)
    d8e4:	|  |  |  |     |      move.l 1a7ac <DOSBase>,d0
    d8ea:	|  |  |  |     |      movea.l d0,a6
    d8ec:	|  |  |  |     |      move.l 96(sp),d1
    d8f0:	|  |  |  |     |      move.l 92(sp),d2
    d8f4:	|  |  |  |     |      move.l 88(sp),d3
    d8f8:	|  |  |  |     |      jsr -354(a6)
    d8fc:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    d900:	|  |  |  |     |      move.l 100(sp),80(sp)
    d906:	|  |  |  |     |      move.l 1a7a4 <SysBase>,d0
    d90c:	|  |  |  |     |      movea.l d0,a6
    d90e:	|  |  |  |     |      movea.l 80(sp),a1
    d912:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    d916:	|  |  |  \-----|----> movea.l 152(sp),a0
    d91a:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    d920:	|  \--|--------|----> tst.l 152(sp)
    d924:	|     \--------|----- bne.w d74c <stackToFile+0x110>
    d928:	|              |  /-- bra.s d92c <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    d92a:	|              \--|-> nop
    }
    Close(fp);
    d92c:	|                 \-> move.l 136(sp),20(sp)
    d932:	|                     move.l 1a7ac <DOSBase>,d0
    d938:	|                     movea.l d0,a6
    d93a:	|                     move.l 20(sp),d1
    d93e:	|                     jsr -36(a6)
    d942:	|                     move.l d0,16(sp)
    return TRUE;
    d946:	|                     moveq #1,d0
}
    d948:	\-------------------> movem.l (sp)+,d2-d3/a6
    d94c:	                      lea 144(sp),sp
    d950:	                      rts

0000d952 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    d952:	       lea -20(sp),sp
    d956:	       move.l a6,-(sp)
    d958:	       move.l d2,-(sp)
	int a, len = strlen (s);
    d95a:	       move.l 32(sp),-(sp)
    d95e:	       jsr 13382 <strlen>
    d964:	       addq.l #4,sp
    d966:	       move.l d0,20(sp)

	put2bytes (len, fp);
    d96a:	       move.l 36(sp),-(sp)
    d96e:	       move.l 24(sp),-(sp)
    d972:	       jsr 8d0 <put2bytes>
    d978:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    d97a:	       clr.l 24(sp)
    d97e:	   /-- bra.s d9d4 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    d980:	/--|-> move.l 36(sp),16(sp)
    d986:	|  |   move.l 24(sp),d0
    d98a:	|  |   movea.l 32(sp),a0
    d98e:	|  |   adda.l d0,a0
    d990:	|  |   move.b (a0),d1
    d992:	|  |   move.b 1a86e <encode1>,d0
    d998:	|  |   eor.b d1,d0
    d99a:	|  |   ext.w d0
    d99c:	|  |   movea.w d0,a0
    d99e:	|  |   move.l a0,12(sp)
    d9a2:	|  |   move.l 1a7ac <DOSBase>,d0
    d9a8:	|  |   movea.l d0,a6
    d9aa:	|  |   move.l 16(sp),d1
    d9ae:	|  |   move.l 12(sp),d2
    d9b2:	|  |   jsr -312(a6)
    d9b6:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    d9ba:	|  |   move.b 1a86e <encode1>,d0
    d9c0:	|  |   move.b d0,d1
    d9c2:	|  |   move.b 1a86f <encode2>,d0
    d9c8:	|  |   add.b d1,d0
    d9ca:	|  |   move.b d0,1a86e <encode1>
	for (a = 0; a < len; a ++) {
    d9d0:	|  |   addq.l #1,24(sp)
    d9d4:	|  \-> move.l 24(sp),d0
    d9d8:	|      cmp.l 20(sp),d0
    d9dc:	\----- blt.s d980 <writeStringEncoded+0x2e>
	}
}
    d9de:	       nop
    d9e0:	       nop
    d9e2:	       move.l (sp)+,d2
    d9e4:	       movea.l (sp)+,a6
    d9e6:	       lea 20(sp),sp
    d9ea:	       rts

0000d9ec <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    d9ec:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    d9ee:	                   tst.l 8(sp)
    d9f2:	               /-- bne.s d9f8 <failSecurityCheck+0xc>
    d9f4:	               |   moveq #1,d0
    d9f6:	/--------------|-- bra.s da76 <failSecurityCheck+0x8a>

	int a = 0;
    d9f8:	|              \-> clr.l (sp)

	while (fn[a]) {
    d9fa:	|     /----------- bra.s da68 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    d9fc:	|  /--|----------> move.l (sp),d0
    d9fe:	|  |  |            movea.l 8(sp),a0
    da02:	|  |  |            adda.l d0,a0
    da04:	|  |  |            move.b (a0),d0
    da06:	|  |  |            ext.w d0
    da08:	|  |  |            movea.w d0,a0
    da0a:	|  |  |            moveq #124,d0
    da0c:	|  |  |            cmp.l a0,d0
    da0e:	|  |  |     /----- beq.s da50 <failSecurityCheck+0x64>
    da10:	|  |  |     |      moveq #124,d1
    da12:	|  |  |     |      cmp.l a0,d1
    da14:	|  |  |  /--|----- blt.s da66 <failSecurityCheck+0x7a>
    da16:	|  |  |  |  |      moveq #92,d0
    da18:	|  |  |  |  |      cmp.l a0,d0
    da1a:	|  |  |  |  +----- beq.s da50 <failSecurityCheck+0x64>
    da1c:	|  |  |  |  |      moveq #92,d1
    da1e:	|  |  |  |  |      cmp.l a0,d1
    da20:	|  |  |  +--|----- blt.s da66 <failSecurityCheck+0x7a>
    da22:	|  |  |  |  |      moveq #60,d0
    da24:	|  |  |  |  |      cmp.l a0,d0
    da26:	|  |  |  |  |  /-- blt.s da46 <failSecurityCheck+0x5a>
    da28:	|  |  |  |  |  |   moveq #34,d1
    da2a:	|  |  |  |  |  |   cmp.l a0,d1
    da2c:	|  |  |  +--|--|-- bgt.s da66 <failSecurityCheck+0x7a>
    da2e:	|  |  |  |  |  |   moveq #-34,d1
    da30:	|  |  |  |  |  |   add.l a0,d1
    da32:	|  |  |  |  |  |   move.l #83894529,d0
    da38:	|  |  |  |  |  |   lsr.l d1,d0
    da3a:	|  |  |  |  |  |   moveq #1,d1
    da3c:	|  |  |  |  |  |   and.l d1,d0
    da3e:	|  |  |  |  |  |   sne d0
    da40:	|  |  |  |  |  |   neg.b d0
    da42:	|  |  |  |  +--|-- bne.s da50 <failSecurityCheck+0x64>
    da44:	|  |  |  +--|--|-- bra.s da66 <failSecurityCheck+0x7a>
    da46:	|  |  |  |  |  \-> lea -62(a0),a0
    da4a:	|  |  |  |  |      moveq #1,d0
    da4c:	|  |  |  |  |      cmp.l a0,d0
    da4e:	|  |  |  +--|----- bcs.s da66 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    da50:	|  |  |  |  \----> move.l 8(sp),-(sp)
    da54:	|  |  |  |         pea 18d8b <PutChar+0x1a23>
    da5a:	|  |  |  |         jsr 16894 <KPrintF>
    da60:	|  |  |  |         addq.l #8,sp
				return TRUE;
    da62:	|  |  |  |         moveq #1,d0
    da64:	+--|--|--|-------- bra.s da76 <failSecurityCheck+0x8a>
		}
		a++;
    da66:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    da68:	|  |  \----------> move.l (sp),d0
    da6a:	|  |               movea.l 8(sp),a0
    da6e:	|  |               adda.l d0,a0
    da70:	|  |               move.b (a0),d0
    da72:	|  \-------------- bne.s d9fc <failSecurityCheck+0x10>
	}
	return FALSE;
    da74:	|                  clr.w d0
}
    da76:	\----------------> addq.l #4,sp
    da78:	                   rts

0000da7a <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    da7a:	             lea -24(sp),sp
    da7e:	             move.l a6,-(sp)
    da80:	             move.l 40(sp),d0
    da84:	             move.w d0,d0
    da86:	             move.w d0,6(sp)
	int fileNum = -1;
    da8a:	             moveq #-1,d0
    da8c:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    da90:	             jsr 5adc <killSpeechTimers>

	switch (numParams) {
    da96:	             moveq #2,d0
    da98:	             cmp.l 32(sp),d0
    da9c:	      /----- beq.s dae0 <sayCore+0x66>
    da9e:	      |      moveq #3,d0
    daa0:	      |      cmp.l 32(sp),d0
    daa4:	/-----|----- bne.w dbc2 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    daa8:	|     |      movea.l 36(sp),a0
    daac:	|     |      move.l 24(a0),d0
    dab0:	|     |      move.l d0,-(sp)
    dab2:	|     |      pea 5 <_start+0x5>
    dab6:	|     |      lea 20(sp),a0
    daba:	|     |      move.l a0,-(sp)
    dabc:	|     |      jsr 13e96 <getValueType>
    dac2:	|     |      lea 12(sp),sp
    dac6:	|     |      tst.w d0
    dac8:	|     |  /-- bne.s dad0 <sayCore+0x56>
    daca:	|     |  |   moveq #1,d0
    dacc:	|  /--|--|-- bra.w dbd2 <sayCore+0x158>
			trimStack (&fun -> stack);
    dad0:	|  |  |  \-> moveq #24,d0
    dad2:	|  |  |      add.l 36(sp),d0
    dad6:	|  |  |      move.l d0,-(sp)
    dad8:	|  |  |      jsr 1481a <trimStack>
    dade:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    dae0:	|  |  \----> movea.l 36(sp),a0
    dae4:	|  |         move.l 24(a0),d0
    dae8:	|  |         move.l d0,-(sp)
    daea:	|  |         jsr 1446c <getTextFromAnyVar>
    daf0:	|  |         addq.l #4,sp
    daf2:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    daf6:	|  |     /-- bne.s dafe <sayCore+0x84>
    daf8:	|  |     |   moveq #1,d0
    dafa:	|  +-----|-- bra.w dbd2 <sayCore+0x158>
			trimStack (&fun -> stack);
    dafe:	|  |     \-> moveq #24,d0
    db00:	|  |         add.l 36(sp),d0
    db04:	|  |         move.l d0,-(sp)
    db06:	|  |         jsr 1481a <trimStack>
    db0c:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    db0e:	|  |         movea.l 36(sp),a0
    db12:	|  |         move.l 24(a0),d0
    db16:	|  |         move.l d0,-(sp)
    db18:	|  |         pea 7 <_start+0x7>
    db1c:	|  |         lea 16(sp),a0
    db20:	|  |         move.l a0,-(sp)
    db22:	|  |         jsr 13e96 <getValueType>
    db28:	|  |         lea 12(sp),sp
    db2c:	|  |         tst.w d0
    db2e:	|  |     /-- bne.s db36 <sayCore+0xbc>
    db30:	|  |     |   moveq #1,d0
    db32:	|  +-----|-- bra.w dbd2 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    db36:	|  |     \-> movea.l 36(sp),a0
    db3a:	|  |         move.l 24(a0),d0
    db3e:	|  |         move.l d0,-(sp)
    db40:	|  |         pea 7 <_start+0x7>
    db44:	|  |         lea 16(sp),a0
    db48:	|  |         move.l a0,-(sp)
    db4a:	|  |         jsr 13e96 <getValueType>
    db50:	|  |         lea 12(sp),sp
    db54:	|  |         tst.w d0
    db56:	|  |     /-- bne.s db5c <sayCore+0xe2>
    db58:	|  |     |   moveq #1,d0
    db5a:	|  +-----|-- bra.s dbd2 <sayCore+0x158>
			trimStack (&fun -> stack);
    db5c:	|  |     \-> moveq #24,d0
    db5e:	|  |         add.l 36(sp),d0
    db62:	|  |         move.l d0,-(sp)
    db64:	|  |         jsr 1481a <trimStack>
    db6a:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    db6c:	|  |         movea.w 6(sp),a0
    db70:	|  |         move.l 12(sp),d1
    db74:	|  |         move.l 8(sp),d0
    db78:	|  |         move.l a0,-(sp)
    db7a:	|  |         move.l d1,-(sp)
    db7c:	|  |         move.l d0,-(sp)
    db7e:	|  |         move.l 36(sp),-(sp)
    db82:	|  |         jsr 7a88 <wrapSpeech>
    db88:	|  |         lea 16(sp),sp
    db8c:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    db90:	|  |         movea.l 36(sp),a0
    db94:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    db9a:	|  |         movea.l 36(sp),a0
    db9e:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    dba4:	|  |         move.l 24(sp),16(sp)
    dbaa:	|  |         move.l 1a7a4 <SysBase>,d0
    dbb0:	|  |         movea.l d0,a6
    dbb2:	|  |         movea.l 16(sp),a1
    dbb6:	|  |         jsr -690(a6)
			newText = NULL;
    dbba:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    dbbe:	|  |         moveq #0,d0
    dbc0:	|  +-------- bra.s dbd2 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    dbc2:	\--|-------> pea 18e11 <PutChar+0x1aa9>
    dbc8:	   |         jsr 16894 <KPrintF>
    dbce:	   |         addq.l #4,sp
	return BR_ERROR;
    dbd0:	   |         moveq #1,d0
}
    dbd2:	   \-------> movea.l (sp)+,a6
    dbd4:	             lea 24(sp),sp
    dbd8:	             rts

0000dbda <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    dbda:	pea 1 <_start+0x1>
    dbde:	move.l 12(sp),-(sp)
    dbe2:	move.l 12(sp),-(sp)
    dbe6:	jsr da7a <sayCore>
    dbec:	lea 12(sp),sp
}
    dbf0:	rts

0000dbf2 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    dbf2:	clr.l -(sp)
    dbf4:	move.l 12(sp),-(sp)
    dbf8:	move.l 12(sp),-(sp)
    dbfc:	jsr da7a <sayCore>
    dc02:	lea 12(sp),sp
}
    dc06:	rts

0000dc08 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    dc08:	jsr 14862 <freeze>
	freezeSubs (); 
    dc0e:	jsr 50cc <freezeSubs>
	fun -> freezerLevel = 0;
    dc14:	movea.l 8(sp),a0
    dc18:	clr.b 56(a0)
	return BR_CONTINUE;
    dc1c:	moveq #2,d0
}
    dc1e:	rts

0000dc20 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    dc20:	jsr 14a26 <unfreeze>
	unfreezeSubs (); 
    dc26:	jsr 651e <unfreezeSubs>
	return BR_CONTINUE;
    dc2c:	moveq #2,d0
}
    dc2e:	rts

0000dc30 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    dc30:	nop
    dc32:	rts

0000dc34 <builtIn_setCursor>:

builtIn(setCursor)
{
    dc34:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    dc36:	movea.l 12(sp),a0
    dc3a:	move.l 24(a0),d0
    dc3e:	move.l d0,-(sp)
    dc40:	jsr 1436e <getAnimationFromVar>
    dc46:	addq.l #4,sp
    dc48:	move.l d0,(sp)
	pickAnimCursor (aa);
    dc4a:	move.l (sp),-(sp)
    dc4c:	jsr d6c <pickAnimCursor>
    dc52:	addq.l #4,sp
	trimStack (&fun -> stack);
    dc54:	moveq #24,d0
    dc56:	add.l 12(sp),d0
    dc5a:	move.l d0,-(sp)
    dc5c:	jsr 1481a <trimStack>
    dc62:	addq.l #4,sp
	return BR_CONTINUE;
    dc64:	moveq #2,d0
}
    dc66:	addq.l #4,sp
    dc68:	rts

0000dc6a <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    dc6a:	move.l 1a760 <input+0xa>,d1
    dc70:	move.l 1a872 <cameraX>,d0
    dc76:	add.l d0,d1
    dc78:	moveq #28,d0
    dc7a:	add.l 8(sp),d0
    dc7e:	move.l d1,-(sp)
    dc80:	pea 1 <_start+0x1>
    dc84:	move.l d0,-(sp)
    dc86:	jsr 14788 <setVariable>
    dc8c:	lea 12(sp),sp
	return BR_CONTINUE;
    dc90:	moveq #2,d0
}
    dc92:	rts

0000dc94 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    dc94:	move.l 1a764 <input+0xe>,d1
    dc9a:	move.l 1a876 <cameraY>,d0
    dca0:	add.l d0,d1
    dca2:	moveq #28,d0
    dca4:	add.l 8(sp),d0
    dca8:	move.l d1,-(sp)
    dcaa:	pea 1 <_start+0x1>
    dcae:	move.l d0,-(sp)
    dcb0:	jsr 14788 <setVariable>
    dcb6:	lea 12(sp),sp
	return BR_CONTINUE;
    dcba:	moveq #2,d0
}
    dcbc:	rts

0000dcbe <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    dcbe:	move.l 1a760 <input+0xa>,d0
    dcc4:	move.l d0,-(sp)
    dcc6:	jsr 16cd0 <__floatsisf>
    dccc:	addq.l #4,sp
    dcce:	move.l d0,d1
    dcd0:	move.l 1a142 <cameraZoom>,d0
    dcd6:	move.l d0,-(sp)
    dcd8:	move.l d1,-(sp)
    dcda:	jsr 16d82 <__mulsf3>
    dce0:	addq.l #8,sp
    dce2:	move.l d0,-(sp)
    dce4:	jsr 16c68 <__fixsfsi>
    dcea:	addq.l #4,sp
    dcec:	move.l d0,d1
    dcee:	moveq #28,d0
    dcf0:	add.l 8(sp),d0
    dcf4:	move.l d1,-(sp)
    dcf6:	pea 1 <_start+0x1>
    dcfa:	move.l d0,-(sp)
    dcfc:	jsr 14788 <setVariable>
    dd02:	lea 12(sp),sp
	return BR_CONTINUE;
    dd06:	moveq #2,d0
}
    dd08:	rts

0000dd0a <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    dd0a:	move.l 1a764 <input+0xe>,d0
    dd10:	move.l d0,-(sp)
    dd12:	jsr 16cd0 <__floatsisf>
    dd18:	addq.l #4,sp
    dd1a:	move.l d0,d1
    dd1c:	move.l 1a142 <cameraZoom>,d0
    dd22:	move.l d0,-(sp)
    dd24:	move.l d1,-(sp)
    dd26:	jsr 16d82 <__mulsf3>
    dd2c:	addq.l #8,sp
    dd2e:	move.l d0,-(sp)
    dd30:	jsr 16c68 <__fixsfsi>
    dd36:	addq.l #4,sp
    dd38:	move.l d0,d1
    dd3a:	moveq #28,d0
    dd3c:	add.l 8(sp),d0
    dd40:	move.l d1,-(sp)
    dd42:	pea 1 <_start+0x1>
    dd46:	move.l d0,-(sp)
    dd48:	jsr 14788 <setVariable>
    dd4e:	lea 12(sp),sp
	return BR_CONTINUE;
    dd52:	moveq #2,d0
}
    dd54:	rts

0000dd56 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    dd56:	jsr 753c <statusBarText>
    dd5c:	move.l d0,d1
    dd5e:	moveq #28,d0
    dd60:	add.l 8(sp),d0
    dd64:	move.l d1,-(sp)
    dd66:	move.l d0,-(sp)
    dd68:	jsr 140b8 <makeTextVar>
    dd6e:	addq.l #8,sp
	return BR_CONTINUE;
    dd70:	moveq #2,d0
}
    dd72:	rts

0000dd74 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    dd74:	       lea -20(sp),sp
    dd78:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    dd7a:	       movea.l 32(sp),a0
    dd7e:	       move.l 24(a0),d0
    dd82:	       move.l d0,-(sp)
    dd84:	       jsr 1446c <getTextFromAnyVar>
    dd8a:	       addq.l #4,sp
    dd8c:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    dd90:	   /-- bne.s dd98 <builtIn_getMatchingFiles+0x24>
    dd92:	   |   moveq #1,d0
    dd94:	/--|-- bra.w de5a <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    dd98:	|  \-> moveq #24,d0
    dd9a:	|      add.l 32(sp),d0
    dd9e:	|      move.l d0,-(sp)
    dda0:	|      jsr 1481a <trimStack>
    dda6:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    dda8:	|      moveq #28,d0
    ddaa:	|      add.l 32(sp),d0
    ddae:	|      move.l d0,-(sp)
    ddb0:	|      jsr 140e4 <unlinkVar>
    ddb6:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    ddb8:	|      movea.l 32(sp),a0
    ddbc:	|      moveq #6,d0
    ddbe:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    ddc2:	|      moveq #12,d0
    ddc4:	|      move.l d0,16(sp)
    ddc8:	|      clr.l 12(sp)
    ddcc:	|      move.l 1a7a4 <SysBase>,d0
    ddd2:	|      movea.l d0,a6
    ddd4:	|      move.l 16(sp),d0
    ddd8:	|      move.l 12(sp),d1
    dddc:	|      jsr -684(a6)
    dde0:	|      move.l d0,8(sp)
    dde4:	|      move.l 8(sp),d0
    dde8:	|      movea.l 32(sp),a0
    ddec:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    ddf0:	|      moveq #32,d0
    ddf2:	|      add.l 32(sp),d0
    ddf6:	|  /-- bne.s ddfc <builtIn_getMatchingFiles+0x88>
    ddf8:	|  |   moveq #1,d0
    ddfa:	+--|-- bra.s de5a <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    ddfc:	|  \-> movea.l 32(sp),a0
    de00:	|      movea.l 32(a0),a0
    de04:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    de06:	|      movea.l 32(sp),a0
    de0a:	|      movea.l 32(a0),a0
    de0e:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    de12:	|      movea.l 32(sp),a0
    de16:	|      movea.l 32(a0),a0
    de1a:	|      moveq #1,d0
    de1c:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    de20:	|      movea.l 32(sp),a0
    de24:	|      move.l 32(a0),d0
    de28:	|      move.l 20(sp),-(sp)
    de2c:	|      move.l d0,-(sp)
    de2e:	|      jsr 13c52 <getSavedGamesStack>
    de34:	|      addq.l #8,sp
    de36:	|      tst.w d0
    de38:	|  /-- bne.s de3e <builtIn_getMatchingFiles+0xca>
    de3a:	|  |   moveq #1,d0
    de3c:	+--|-- bra.s de5a <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    de3e:	|  \-> move.l 20(sp),4(sp)
    de44:	|      move.l 1a7a4 <SysBase>,d0
    de4a:	|      movea.l d0,a6
    de4c:	|      movea.l 4(sp),a1
    de50:	|      jsr -690(a6)
	newText = NULL;
    de54:	|      clr.l 20(sp)
	return BR_CONTINUE;
    de58:	|      moveq #2,d0
}
    de5a:	\----> movea.l (sp)+,a6
    de5c:	       lea 20(sp),sp
    de60:	       rts

0000de62 <builtIn_saveGame>:

builtIn(saveGame)
{
    de62:	       lea -12(sp),sp
    de66:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    de68:	       movea.l 24(sp),a0
    de6c:	       move.l 24(a0),d0
    de70:	       move.l d0,-(sp)
    de72:	       jsr 1446c <getTextFromAnyVar>
    de78:	       addq.l #4,sp
    de7a:	       move.l d0,1a770 <loadNow>
    trimStack(&fun->stack);
    de80:	       moveq #24,d0
    de82:	       add.l 24(sp),d0
    de86:	       move.l d0,-(sp)
    de88:	       jsr 1481a <trimStack>
    de8e:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    de90:	       move.l 1a770 <loadNow>,d0
    de96:	       move.l d0,-(sp)
    de98:	       jsr 2fe <encodeFilename>
    de9e:	       addq.l #4,sp
    dea0:	       move.l d0,12(sp)
    FreeVec(loadNow);
    dea4:	       move.l 1a770 <loadNow>,8(sp)
    deac:	       move.l 1a7a4 <SysBase>,d0
    deb2:	       movea.l d0,a6
    deb4:	       movea.l 8(sp),a1
    deb8:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    debc:	       move.l 12(sp),-(sp)
    dec0:	       jsr d9ec <failSecurityCheck>
    dec6:	       addq.l #4,sp
    dec8:	       tst.w d0
    deca:	   /-- beq.s ded0 <builtIn_saveGame+0x6e>
    decc:	   |   moveq #1,d0
    dece:	/--|-- bra.s df20 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    ded0:	|  \-> move.l 12(sp),-(sp)
    ded4:	|      pea 18e3f <PutChar+0x1ad7>
    deda:	|      jsr 133c2 <joinStrings>
    dee0:	|      addq.l #8,sp
    dee2:	|      move.l d0,1a770 <loadNow>
    FreeVec(aaaaa);
    dee8:	|      move.l 12(sp),4(sp)
    deee:	|      move.l 1a7a4 <SysBase>,d0
    def4:	|      movea.l d0,a6
    def6:	|      movea.l 4(sp),a1
    defa:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    defe:	|      moveq #28,d0
    df00:	|      add.l 24(sp),d0
    df04:	|      clr.l -(sp)
    df06:	|      pea 1 <_start+0x1>
    df0a:	|      move.l d0,-(sp)
    df0c:	|      jsr 14788 <setVariable>
    df12:	|      lea 12(sp),sp
    saverFunc = fun;
    df16:	|      move.l 24(sp),1a882 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    df1e:	|      moveq #0,d0
}
    df20:	\----> movea.l (sp)+,a6
    df22:	       lea 12(sp),sp
    df26:	       rts

0000df28 <builtIn_fileExists>:

builtIn(fileExists)
{
    df28:	       lea -36(sp),sp
    df2c:	       move.l a6,-(sp)
    df2e:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    df30:	       movea.l 52(sp),a0
    df34:	       move.l 24(a0),d0
    df38:	       move.l d0,-(sp)
    df3a:	       jsr 1446c <getTextFromAnyVar>
    df40:	       addq.l #4,sp
    df42:	       move.l d0,1a770 <loadNow>
    trimStack(&fun->stack);
    df48:	       moveq #24,d0
    df4a:	       add.l 52(sp),d0
    df4e:	       move.l d0,-(sp)
    df50:	       jsr 1481a <trimStack>
    df56:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    df58:	       move.l 1a770 <loadNow>,d0
    df5e:	       move.l d0,-(sp)
    df60:	       jsr 2fe <encodeFilename>
    df66:	       addq.l #4,sp
    df68:	       move.l d0,40(sp)
    FreeVec(loadNow);
    df6c:	       move.l 1a770 <loadNow>,36(sp)
    df74:	       move.l 1a7a4 <SysBase>,d0
    df7a:	       movea.l d0,a6
    df7c:	       movea.l 36(sp),a1
    df80:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    df84:	       move.l 40(sp),-(sp)
    df88:	       jsr d9ec <failSecurityCheck>
    df8e:	       addq.l #4,sp
    df90:	       tst.w d0
    df92:	   /-- beq.s df9a <builtIn_fileExists+0x72>
    df94:	   |   moveq #1,d0
    df96:	/--|-- bra.w e03a <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    df9a:	|  \-> move.l 40(sp),32(sp)
    dfa0:	|      move.l #1005,28(sp)
    dfa8:	|      move.l 1a7ac <DOSBase>,d0
    dfae:	|      movea.l d0,a6
    dfb0:	|      move.l 32(sp),d1
    dfb4:	|      move.l 28(sp),d2
    dfb8:	|      jsr -30(a6)
    dfbc:	|      move.l d0,24(sp)
    dfc0:	|      move.l 24(sp),d0
    dfc4:	|      move.l d0,20(sp)
    if (!fp) {        
    dfc8:	|  /-- bne.s dfd8 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    dfca:	|  |   pea 18e41 <PutChar+0x1ad9>
    dfd0:	|  |   jsr 16894 <KPrintF>
    dfd6:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    dfd8:	|  \-> tst.l 20(sp)
    dfdc:	|      sne d0
    dfde:	|      neg.b d0
    dfe0:	|      moveq #0,d1
    dfe2:	|      move.b d0,d1
    dfe4:	|      moveq #28,d0
    dfe6:	|      add.l 52(sp),d0
    dfea:	|      move.l d1,-(sp)
    dfec:	|      pea 1 <_start+0x1>
    dff0:	|      move.l d0,-(sp)
    dff2:	|      jsr 14788 <setVariable>
    dff8:	|      lea 12(sp),sp
    if (fp) Close(fp);
    dffc:	|      tst.l 20(sp)
    e000:	|  /-- beq.s e01c <builtIn_fileExists+0xf4>
    e002:	|  |   move.l 20(sp),16(sp)
    e008:	|  |   move.l 1a7ac <DOSBase>,d0
    e00e:	|  |   movea.l d0,a6
    e010:	|  |   move.l 16(sp),d1
    e014:	|  |   jsr -36(a6)
    e018:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e01c:	|  \-> move.l 40(sp),8(sp)
    e022:	|      move.l 1a7a4 <SysBase>,d0
    e028:	|      movea.l d0,a6
    e02a:	|      movea.l 8(sp),a1
    e02e:	|      jsr -690(a6)
    loadNow = NULL;
    e032:	|      clr.l 1a770 <loadNow>
    return BR_CONTINUE;
    e038:	|      moveq #2,d0
}
    e03a:	\----> move.l (sp)+,d2
    e03c:	       movea.l (sp)+,a6
    e03e:	       lea 36(sp),sp
    e042:	       rts

0000e044 <builtIn_loadGame>:

builtIn(loadGame)
{
    e044:	       lea -36(sp),sp
    e048:	       move.l a6,-(sp)
    e04a:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e04c:	       movea.l 52(sp),a0
    e050:	       move.l 24(a0),d0
    e054:	       move.l d0,-(sp)
    e056:	       jsr 1446c <getTextFromAnyVar>
    e05c:	       addq.l #4,sp
    e05e:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e062:	       moveq #24,d0
    e064:	       add.l 52(sp),d0
    e068:	       move.l d0,-(sp)
    e06a:	       jsr 1481a <trimStack>
    e070:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e072:	       move.l 40(sp),-(sp)
    e076:	       jsr 2fe <encodeFilename>
    e07c:	       addq.l #4,sp
    e07e:	       move.l d0,1a770 <loadNow>
    FreeVec(aaaaa);
    e084:	       move.l 40(sp),36(sp)
    e08a:	       move.l 1a7a4 <SysBase>,d0
    e090:	       movea.l d0,a6
    e092:	       movea.l 36(sp),a1
    e096:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e09a:	       move.l 1a770 <loadNow>,d0
    e0a0:	       move.l d0,-(sp)
    e0a2:	       jsr d9ec <failSecurityCheck>
    e0a8:	       addq.l #4,sp
    e0aa:	       tst.w d0
    e0ac:	   /-- beq.s e0b2 <builtIn_loadGame+0x6e>
    e0ae:	   |   moveq #1,d0
    e0b0:	/--|-- bra.s e122 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e0b2:	|  \-> move.l 1a770 <loadNow>,32(sp)
    e0ba:	|      move.l #1005,28(sp)
    e0c2:	|      move.l 1a7ac <DOSBase>,d0
    e0c8:	|      movea.l d0,a6
    e0ca:	|      move.l 32(sp),d1
    e0ce:	|      move.l 28(sp),d2
    e0d2:	|      jsr -30(a6)
    e0d6:	|      move.l d0,24(sp)
    e0da:	|      move.l 24(sp),d0
    e0de:	|      move.l d0,20(sp)
    if (fp) {
    e0e2:	|  /-- beq.s e102 <builtIn_loadGame+0xbe>
        Close(fp);
    e0e4:	|  |   move.l 20(sp),12(sp)
    e0ea:	|  |   move.l 1a7ac <DOSBase>,d0
    e0f0:	|  |   movea.l d0,a6
    e0f2:	|  |   move.l 12(sp),d1
    e0f6:	|  |   jsr -36(a6)
    e0fa:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    e0fe:	|  |   moveq #0,d0
    e100:	+--|-- bra.s e122 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    e102:	|  \-> move.l 1a770 <loadNow>,16(sp)
    e10a:	|      move.l 1a7a4 <SysBase>,d0
    e110:	|      movea.l d0,a6
    e112:	|      movea.l 16(sp),a1
    e116:	|      jsr -690(a6)
    loadNow = NULL;
    e11a:	|      clr.l 1a770 <loadNow>
    return BR_CONTINUE;
    e120:	|      moveq #2,d0
}
    e122:	\----> move.l (sp)+,d2
    e124:	       movea.l (sp)+,a6
    e126:	       lea 36(sp),sp
    e12a:	       rts

0000e12c <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    e12c:	move.l 1a858 <sceneHeight>,d0
    e132:	move.l d0,d1
    e134:	move.l 1a854 <sceneWidth>,d0
    e13a:	move.l d1,-(sp)
    e13c:	move.l d0,-(sp)
    e13e:	clr.l -(sp)
    e140:	clr.l -(sp)
    e142:	jsr c8e0 <blankScreen>
    e148:	lea 16(sp),sp
	return BR_CONTINUE;
    e14c:	moveq #2,d0
}
    e14e:	rts

0000e150 <builtIn_blankArea>:

builtIn(blankArea)
{
    e150:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e154:	       movea.l 24(sp),a0
    e158:	       move.l 24(a0),d0
    e15c:	       move.l d0,-(sp)
    e15e:	       pea 1 <_start+0x1>
    e162:	       lea 8(sp),a0
    e166:	       move.l a0,-(sp)
    e168:	       jsr 13e96 <getValueType>
    e16e:	       lea 12(sp),sp
    e172:	       tst.w d0
    e174:	   /-- bne.s e17c <builtIn_blankArea+0x2c>
    e176:	   |   moveq #1,d0
    e178:	/--|-- bra.w e252 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e17c:	|  \-> moveq #24,d0
    e17e:	|      add.l 24(sp),d0
    e182:	|      move.l d0,-(sp)
    e184:	|      jsr 1481a <trimStack>
    e18a:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e18c:	|      movea.l 24(sp),a0
    e190:	|      move.l 24(a0),d0
    e194:	|      move.l d0,-(sp)
    e196:	|      pea 1 <_start+0x1>
    e19a:	|      lea 12(sp),a0
    e19e:	|      move.l a0,-(sp)
    e1a0:	|      jsr 13e96 <getValueType>
    e1a6:	|      lea 12(sp),sp
    e1aa:	|      tst.w d0
    e1ac:	|  /-- bne.s e1b4 <builtIn_blankArea+0x64>
    e1ae:	|  |   moveq #1,d0
    e1b0:	+--|-- bra.w e252 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e1b4:	|  \-> moveq #24,d0
    e1b6:	|      add.l 24(sp),d0
    e1ba:	|      move.l d0,-(sp)
    e1bc:	|      jsr 1481a <trimStack>
    e1c2:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e1c4:	|      movea.l 24(sp),a0
    e1c8:	|      move.l 24(a0),d0
    e1cc:	|      move.l d0,-(sp)
    e1ce:	|      pea 1 <_start+0x1>
    e1d2:	|      moveq #16,d0
    e1d4:	|      add.l sp,d0
    e1d6:	|      move.l d0,-(sp)
    e1d8:	|      jsr 13e96 <getValueType>
    e1de:	|      lea 12(sp),sp
    e1e2:	|      tst.w d0
    e1e4:	|  /-- bne.s e1ea <builtIn_blankArea+0x9a>
    e1e6:	|  |   moveq #1,d0
    e1e8:	+--|-- bra.s e252 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e1ea:	|  \-> moveq #24,d0
    e1ec:	|      add.l 24(sp),d0
    e1f0:	|      move.l d0,-(sp)
    e1f2:	|      jsr 1481a <trimStack>
    e1f8:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e1fa:	|      movea.l 24(sp),a0
    e1fe:	|      move.l 24(a0),d0
    e202:	|      move.l d0,-(sp)
    e204:	|      pea 1 <_start+0x1>
    e208:	|      moveq #20,d0
    e20a:	|      add.l sp,d0
    e20c:	|      move.l d0,-(sp)
    e20e:	|      jsr 13e96 <getValueType>
    e214:	|      lea 12(sp),sp
    e218:	|      tst.w d0
    e21a:	|  /-- bne.s e220 <builtIn_blankArea+0xd0>
    e21c:	|  |   moveq #1,d0
    e21e:	+--|-- bra.s e252 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e220:	|  \-> moveq #24,d0
    e222:	|      add.l 24(sp),d0
    e226:	|      move.l d0,-(sp)
    e228:	|      jsr 1481a <trimStack>
    e22e:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    e230:	|      movea.l (sp),a1
    e232:	|      movea.l 4(sp),a0
    e236:	|      move.l 8(sp),d1
    e23a:	|      move.l 12(sp),d0
    e23e:	|      move.l a1,-(sp)
    e240:	|      move.l a0,-(sp)
    e242:	|      move.l d1,-(sp)
    e244:	|      move.l d0,-(sp)
    e246:	|      jsr c8e0 <blankScreen>
    e24c:	|      lea 16(sp),sp
	return BR_CONTINUE;
    e250:	|      moveq #2,d0
}
    e252:	\----> lea 16(sp),sp
    e256:	       rts

0000e258 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    e258:	jsr c8f4 <darkScreen>
	return BR_CONTINUE;
    e25e:	moveq #2,d0
}
    e260:	rts

0000e262 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    e262:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e266:	       movea.l 20(sp),a0
    e26a:	       move.l 24(a0),d0
    e26e:	       move.l d0,-(sp)
    e270:	       pea 1 <_start+0x1>
    e274:	       lea 8(sp),a0
    e278:	       move.l a0,-(sp)
    e27a:	       jsr 13e96 <getValueType>
    e280:	       lea 12(sp),sp
    e284:	       tst.w d0
    e286:	   /-- bne.s e28e <builtIn_addOverlay+0x2c>
    e288:	   |   moveq #1,d0
    e28a:	/--|-- bra.w e326 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e28e:	|  \-> moveq #24,d0
    e290:	|      add.l 20(sp),d0
    e294:	|      move.l d0,-(sp)
    e296:	|      jsr 1481a <trimStack>
    e29c:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e29e:	|      movea.l 20(sp),a0
    e2a2:	|      move.l 24(a0),d0
    e2a6:	|      move.l d0,-(sp)
    e2a8:	|      pea 1 <_start+0x1>
    e2ac:	|      moveq #12,d0
    e2ae:	|      add.l sp,d0
    e2b0:	|      move.l d0,-(sp)
    e2b2:	|      jsr 13e96 <getValueType>
    e2b8:	|      lea 12(sp),sp
    e2bc:	|      tst.w d0
    e2be:	|  /-- bne.s e2c4 <builtIn_addOverlay+0x62>
    e2c0:	|  |   moveq #1,d0
    e2c2:	+--|-- bra.s e326 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e2c4:	|  \-> moveq #24,d0
    e2c6:	|      add.l 20(sp),d0
    e2ca:	|      move.l d0,-(sp)
    e2cc:	|      jsr 1481a <trimStack>
    e2d2:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e2d4:	|      movea.l 20(sp),a0
    e2d8:	|      move.l 24(a0),d0
    e2dc:	|      move.l d0,-(sp)
    e2de:	|      pea 5 <_start+0x5>
    e2e2:	|      moveq #16,d0
    e2e4:	|      add.l sp,d0
    e2e6:	|      move.l d0,-(sp)
    e2e8:	|      jsr 13e96 <getValueType>
    e2ee:	|      lea 12(sp),sp
    e2f2:	|      tst.w d0
    e2f4:	|  /-- bne.s e2fa <builtIn_addOverlay+0x98>
    e2f6:	|  |   moveq #1,d0
    e2f8:	+--|-- bra.s e326 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e2fa:	|  \-> moveq #24,d0
    e2fc:	|      add.l 20(sp),d0
    e300:	|      move.l d0,-(sp)
    e302:	|      jsr 1481a <trimStack>
    e308:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    e30a:	|      movea.l (sp),a0
    e30c:	|      move.l 4(sp),d1
    e310:	|      move.l 8(sp),d0
    e314:	|      move.l a0,-(sp)
    e316:	|      move.l d1,-(sp)
    e318:	|      move.l d0,-(sp)
    e31a:	|      jsr ca12 <loadBackDrop>
    e320:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e324:	|      moveq #2,d0
}
    e326:	\----> lea 12(sp),sp
    e32a:	       rts

0000e32c <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    e32c:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e330:	       movea.l 20(sp),a0
    e334:	       move.l 24(a0),d0
    e338:	       move.l d0,-(sp)
    e33a:	       pea 1 <_start+0x1>
    e33e:	       lea 8(sp),a0
    e342:	       move.l a0,-(sp)
    e344:	       jsr 13e96 <getValueType>
    e34a:	       lea 12(sp),sp
    e34e:	       tst.w d0
    e350:	   /-- bne.s e358 <builtIn_mixOverlay+0x2c>
    e352:	   |   moveq #1,d0
    e354:	/--|-- bra.w e3f0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    e358:	|  \-> moveq #24,d0
    e35a:	|      add.l 20(sp),d0
    e35e:	|      move.l d0,-(sp)
    e360:	|      jsr 1481a <trimStack>
    e366:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e368:	|      movea.l 20(sp),a0
    e36c:	|      move.l 24(a0),d0
    e370:	|      move.l d0,-(sp)
    e372:	|      pea 1 <_start+0x1>
    e376:	|      moveq #12,d0
    e378:	|      add.l sp,d0
    e37a:	|      move.l d0,-(sp)
    e37c:	|      jsr 13e96 <getValueType>
    e382:	|      lea 12(sp),sp
    e386:	|      tst.w d0
    e388:	|  /-- bne.s e38e <builtIn_mixOverlay+0x62>
    e38a:	|  |   moveq #1,d0
    e38c:	+--|-- bra.s e3f0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    e38e:	|  \-> moveq #24,d0
    e390:	|      add.l 20(sp),d0
    e394:	|      move.l d0,-(sp)
    e396:	|      jsr 1481a <trimStack>
    e39c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e39e:	|      movea.l 20(sp),a0
    e3a2:	|      move.l 24(a0),d0
    e3a6:	|      move.l d0,-(sp)
    e3a8:	|      pea 5 <_start+0x5>
    e3ac:	|      moveq #16,d0
    e3ae:	|      add.l sp,d0
    e3b0:	|      move.l d0,-(sp)
    e3b2:	|      jsr 13e96 <getValueType>
    e3b8:	|      lea 12(sp),sp
    e3bc:	|      tst.w d0
    e3be:	|  /-- bne.s e3c4 <builtIn_mixOverlay+0x98>
    e3c0:	|  |   moveq #1,d0
    e3c2:	+--|-- bra.s e3f0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    e3c4:	|  \-> moveq #24,d0
    e3c6:	|      add.l 20(sp),d0
    e3ca:	|      move.l d0,-(sp)
    e3cc:	|      jsr 1481a <trimStack>
    e3d2:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    e3d4:	|      movea.l (sp),a0
    e3d6:	|      move.l 4(sp),d1
    e3da:	|      move.l 8(sp),d0
    e3de:	|      move.l a0,-(sp)
    e3e0:	|      move.l d1,-(sp)
    e3e2:	|      move.l d0,-(sp)
    e3e4:	|      jsr ca88 <mixBackDrop>
    e3ea:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e3ee:	|      moveq #2,d0
}
    e3f0:	\----> lea 12(sp),sp
    e3f4:	       rts

0000e3f6 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    e3f6:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    e3fa:	       pea 18e5f <PutChar+0x1af7>
    e400:	       jsr 16894 <KPrintF>
    e406:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e408:	       movea.l 20(sp),a0
    e40c:	       move.l 24(a0),d0
    e410:	       move.l d0,-(sp)
    e412:	       pea 1 <_start+0x1>
    e416:	       lea 8(sp),a0
    e41a:	       move.l a0,-(sp)
    e41c:	       jsr 13e96 <getValueType>
    e422:	       lea 12(sp),sp
    e426:	       tst.w d0
    e428:	   /-- bne.s e430 <builtIn_pasteImage+0x3a>
    e42a:	   |   moveq #1,d0
    e42c:	/--|-- bra.w e4ce <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    e430:	|  \-> moveq #24,d0
    e432:	|      add.l 20(sp),d0
    e436:	|      move.l d0,-(sp)
    e438:	|      jsr 1481a <trimStack>
    e43e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e440:	|      movea.l 20(sp),a0
    e444:	|      move.l 24(a0),d0
    e448:	|      move.l d0,-(sp)
    e44a:	|      pea 1 <_start+0x1>
    e44e:	|      moveq #12,d0
    e450:	|      add.l sp,d0
    e452:	|      move.l d0,-(sp)
    e454:	|      jsr 13e96 <getValueType>
    e45a:	|      lea 12(sp),sp
    e45e:	|      tst.w d0
    e460:	|  /-- bne.s e466 <builtIn_pasteImage+0x70>
    e462:	|  |   moveq #1,d0
    e464:	+--|-- bra.s e4ce <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    e466:	|  \-> moveq #24,d0
    e468:	|      add.l 20(sp),d0
    e46c:	|      move.l d0,-(sp)
    e46e:	|      jsr 1481a <trimStack>
    e474:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    e476:	|      movea.l 20(sp),a0
    e47a:	|      move.l 24(a0),d0
    e47e:	|      move.l d0,-(sp)
    e480:	|      jsr 1436e <getAnimationFromVar>
    e486:	|      addq.l #4,sp
    e488:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    e48c:	|      moveq #24,d0
    e48e:	|      add.l 20(sp),d0
    e492:	|      move.l d0,-(sp)
    e494:	|      jsr 1481a <trimStack>
    e49a:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    e49c:	|      tst.l 8(sp)
    e4a0:	|  /-- bne.s e4a6 <builtIn_pasteImage+0xb0>
    e4a2:	|  |   moveq #2,d0
    e4a4:	+--|-- bra.s e4ce <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    e4a6:	|  \-> move.l (sp),d1
    e4a8:	|      move.l 4(sp),d0
    e4ac:	|      move.l 8(sp),-(sp)
    e4b0:	|      move.l d1,-(sp)
    e4b2:	|      move.l d0,-(sp)
    e4b4:	|      jsr d94 <pasteCursor>
    e4ba:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    e4be:	|      pea 18e74 <line.c.05397aaf+0xc>
    e4c4:	|      jsr 16894 <KPrintF>
    e4ca:	|      addq.l #4,sp
	return BR_CONTINUE;	
    e4cc:	|      moveq #2,d0
}
    e4ce:	\----> lea 12(sp),sp
    e4d2:	       rts

0000e4d4 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    e4d4:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e4d6:	       movea.l 16(sp),a0
    e4da:	       move.l 24(a0),d0
    e4de:	       move.l d0,-(sp)
    e4e0:	       pea 1 <_start+0x1>
    e4e4:	       move.l sp,d0
    e4e6:	       addq.l #8,d0
    e4e8:	       move.l d0,-(sp)
    e4ea:	       jsr 13e96 <getValueType>
    e4f0:	       lea 12(sp),sp
    e4f4:	       tst.w d0
    e4f6:	   /-- bne.s e4fe <builtIn_setSceneDimensions+0x2a>
    e4f8:	   |   moveq #1,d0
    e4fa:	/--|-- bra.w e586 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    e4fe:	|  \-> moveq #24,d0
    e500:	|      add.l 16(sp),d0
    e504:	|      move.l d0,-(sp)
    e506:	|      jsr 1481a <trimStack>
    e50c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e50e:	|      movea.l 16(sp),a0
    e512:	|      move.l 24(a0),d0
    e516:	|      move.l d0,-(sp)
    e518:	|      pea 1 <_start+0x1>
    e51c:	|      moveq #12,d0
    e51e:	|      add.l sp,d0
    e520:	|      move.l d0,-(sp)
    e522:	|      jsr 13e96 <getValueType>
    e528:	|      lea 12(sp),sp
    e52c:	|      tst.w d0
    e52e:	|  /-- bne.s e534 <builtIn_setSceneDimensions+0x60>
    e530:	|  |   moveq #1,d0
    e532:	+--|-- bra.s e586 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    e534:	|  \-> moveq #24,d0
    e536:	|      add.l 16(sp),d0
    e53a:	|      move.l d0,-(sp)
    e53c:	|      jsr 1481a <trimStack>
    e542:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    e544:	|      move.l (sp),d1
    e546:	|      move.l 4(sp),d0
    e54a:	|      move.l d1,-(sp)
    e54c:	|      move.l d0,-(sp)
    e54e:	|      jsr cade <resizeBackdrop>
    e554:	|      addq.l #8,sp
    e556:	|      tst.w d0
    e558:	|  /-- beq.s e576 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    e55a:	|  |   move.l (sp),d1
    e55c:	|  |   move.l 4(sp),d0
    e560:	|  |   move.l d1,-(sp)
    e562:	|  |   move.l d0,-(sp)
    e564:	|  |   clr.l -(sp)
    e566:	|  |   clr.l -(sp)
    e568:	|  |   jsr c8e0 <blankScreen>
    e56e:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    e572:	|  |   moveq #2,d0
    e574:	+--|-- bra.s e586 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    e576:	|  \-> pea 18e8a <line.c.05397aaf+0x22>
    e57c:	|      jsr 16894 <KPrintF>
    e582:	|      addq.l #4,sp
	return BR_ERROR;
    e584:	|      moveq #1,d0
}
    e586:	\----> addq.l #8,sp
    e588:	       rts

0000e58a <builtIn_aimCamera>:

builtIn(aimCamera)
{
    e58a:	          move.l d3,-(sp)
    e58c:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e58e:	          movea.l 16(sp),a0
    e592:	          move.l 24(a0),d0
    e596:	          move.l d0,-(sp)
    e598:	          pea 1 <_start+0x1>
    e59c:	          pea 1a876 <cameraY>
    e5a2:	          jsr 13e96 <getValueType>
    e5a8:	          lea 12(sp),sp
    e5ac:	          tst.w d0
    e5ae:	      /-- bne.s e5b6 <builtIn_aimCamera+0x2c>
    e5b0:	      |   moveq #1,d0
    e5b2:	/-----|-- bra.w e838 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    e5b6:	|     \-> moveq #24,d0
    e5b8:	|         add.l 16(sp),d0
    e5bc:	|         move.l d0,-(sp)
    e5be:	|         jsr 1481a <trimStack>
    e5c4:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e5c6:	|         movea.l 16(sp),a0
    e5ca:	|         move.l 24(a0),d0
    e5ce:	|         move.l d0,-(sp)
    e5d0:	|         pea 1 <_start+0x1>
    e5d4:	|         pea 1a872 <cameraX>
    e5da:	|         jsr 13e96 <getValueType>
    e5e0:	|         lea 12(sp),sp
    e5e4:	|         tst.w d0
    e5e6:	|     /-- bne.s e5ee <builtIn_aimCamera+0x64>
    e5e8:	|     |   moveq #1,d0
    e5ea:	+-----|-- bra.w e838 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    e5ee:	|     \-> moveq #24,d0
    e5f0:	|         add.l 16(sp),d0
    e5f4:	|         move.l d0,-(sp)
    e5f6:	|         jsr 1481a <trimStack>
    e5fc:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    e5fe:	|         move.l 1a872 <cameraX>,d0
    e604:	|         move.l d0,-(sp)
    e606:	|         jsr 16cd0 <__floatsisf>
    e60c:	|         addq.l #4,sp
    e60e:	|         move.l d0,d2
    e610:	|         move.l 1a6f8 <winWidth>,d0
    e616:	|         lsr.l #1,d0
    e618:	|         move.l d0,-(sp)
    e61a:	|         jsr 16cf8 <__floatunsisf>
    e620:	|         addq.l #4,sp
    e622:	|         move.l d0,d1
    e624:	|         move.l 1a142 <cameraZoom>,d0
    e62a:	|         move.l d0,-(sp)
    e62c:	|         move.l d1,-(sp)
    e62e:	|         jsr 16b7c <__divsf3>
    e634:	|         addq.l #8,sp
    e636:	|         move.l d0,-(sp)
    e638:	|         move.l d2,-(sp)
    e63a:	|         jsr 16fc4 <__subsf3>
    e640:	|         addq.l #8,sp
    e642:	|         move.l d0,-(sp)
    e644:	|         jsr 16c68 <__fixsfsi>
    e64a:	|         addq.l #4,sp
    e64c:	|         move.l d0,1a872 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    e652:	|         move.l 1a876 <cameraY>,d0
    e658:	|         move.l d0,-(sp)
    e65a:	|         jsr 16cd0 <__floatsisf>
    e660:	|         addq.l #4,sp
    e662:	|         move.l d0,d2
    e664:	|         move.l 1a6fc <winHeight>,d0
    e66a:	|         lsr.l #1,d0
    e66c:	|         move.l d0,-(sp)
    e66e:	|         jsr 16cf8 <__floatunsisf>
    e674:	|         addq.l #4,sp
    e676:	|         move.l d0,d1
    e678:	|         move.l 1a142 <cameraZoom>,d0
    e67e:	|         move.l d0,-(sp)
    e680:	|         move.l d1,-(sp)
    e682:	|         jsr 16b7c <__divsf3>
    e688:	|         addq.l #8,sp
    e68a:	|         move.l d0,-(sp)
    e68c:	|         move.l d2,-(sp)
    e68e:	|         jsr 16fc4 <__subsf3>
    e694:	|         addq.l #8,sp
    e696:	|         move.l d0,-(sp)
    e698:	|         jsr 16c68 <__fixsfsi>
    e69e:	|         addq.l #4,sp
    e6a0:	|         move.l d0,1a876 <cameraY>

	if (cameraX < 0) cameraX = 0;
    e6a6:	|         move.l 1a872 <cameraX>,d0
    e6ac:	|     /-- bpl.s e6b8 <builtIn_aimCamera+0x12e>
    e6ae:	|     |   clr.l 1a872 <cameraX>
    e6b4:	|  /--|-- bra.w e76e <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    e6b8:	|  |  \-> move.l 1a872 <cameraX>,d0
    e6be:	|  |      move.l d0,-(sp)
    e6c0:	|  |      jsr 16cd0 <__floatsisf>
    e6c6:	|  |      addq.l #4,sp
    e6c8:	|  |      move.l d0,d2
    e6ca:	|  |      move.l 1a854 <sceneWidth>,d0
    e6d0:	|  |      move.l d0,-(sp)
    e6d2:	|  |      jsr 16cf8 <__floatunsisf>
    e6d8:	|  |      addq.l #4,sp
    e6da:	|  |      move.l d0,d3
    e6dc:	|  |      move.l 1a6f8 <winWidth>,d0
    e6e2:	|  |      move.l d0,-(sp)
    e6e4:	|  |      jsr 16cf8 <__floatunsisf>
    e6ea:	|  |      addq.l #4,sp
    e6ec:	|  |      move.l d0,d1
    e6ee:	|  |      move.l 1a142 <cameraZoom>,d0
    e6f4:	|  |      move.l d0,-(sp)
    e6f6:	|  |      move.l d1,-(sp)
    e6f8:	|  |      jsr 16b7c <__divsf3>
    e6fe:	|  |      addq.l #8,sp
    e700:	|  |      move.l d0,-(sp)
    e702:	|  |      move.l d3,-(sp)
    e704:	|  |      jsr 16fc4 <__subsf3>
    e70a:	|  |      addq.l #8,sp
    e70c:	|  |      move.l d0,-(sp)
    e70e:	|  |      move.l d2,-(sp)
    e710:	|  |      jsr 16e3c <__gtsf2>
    e716:	|  |      addq.l #8,sp
    e718:	|  |      tst.l d0
    e71a:	|  +----- ble.s e76e <builtIn_aimCamera+0x1e4>
    e71c:	|  |      move.l 1a854 <sceneWidth>,d0
    e722:	|  |      move.l d0,-(sp)
    e724:	|  |      jsr 16cf8 <__floatunsisf>
    e72a:	|  |      addq.l #4,sp
    e72c:	|  |      move.l d0,d2
    e72e:	|  |      move.l 1a6f8 <winWidth>,d0
    e734:	|  |      move.l d0,-(sp)
    e736:	|  |      jsr 16cf8 <__floatunsisf>
    e73c:	|  |      addq.l #4,sp
    e73e:	|  |      move.l d0,d1
    e740:	|  |      move.l 1a142 <cameraZoom>,d0
    e746:	|  |      move.l d0,-(sp)
    e748:	|  |      move.l d1,-(sp)
    e74a:	|  |      jsr 16b7c <__divsf3>
    e750:	|  |      addq.l #8,sp
    e752:	|  |      move.l d0,-(sp)
    e754:	|  |      move.l d2,-(sp)
    e756:	|  |      jsr 16fc4 <__subsf3>
    e75c:	|  |      addq.l #8,sp
    e75e:	|  |      move.l d0,-(sp)
    e760:	|  |      jsr 16c68 <__fixsfsi>
    e766:	|  |      addq.l #4,sp
    e768:	|  |      move.l d0,1a872 <cameraX>
	if (cameraY < 0) cameraY = 0;
    e76e:	|  \----> move.l 1a876 <cameraY>,d0
    e774:	|     /-- bpl.s e780 <builtIn_aimCamera+0x1f6>
    e776:	|     |   clr.l 1a876 <cameraY>
    e77c:	|  /--|-- bra.w e836 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    e780:	|  |  \-> move.l 1a876 <cameraY>,d0
    e786:	|  |      move.l d0,-(sp)
    e788:	|  |      jsr 16cd0 <__floatsisf>
    e78e:	|  |      addq.l #4,sp
    e790:	|  |      move.l d0,d2
    e792:	|  |      move.l 1a858 <sceneHeight>,d0
    e798:	|  |      move.l d0,-(sp)
    e79a:	|  |      jsr 16cf8 <__floatunsisf>
    e7a0:	|  |      addq.l #4,sp
    e7a2:	|  |      move.l d0,d3
    e7a4:	|  |      move.l 1a6fc <winHeight>,d0
    e7aa:	|  |      move.l d0,-(sp)
    e7ac:	|  |      jsr 16cf8 <__floatunsisf>
    e7b2:	|  |      addq.l #4,sp
    e7b4:	|  |      move.l d0,d1
    e7b6:	|  |      move.l 1a142 <cameraZoom>,d0
    e7bc:	|  |      move.l d0,-(sp)
    e7be:	|  |      move.l d1,-(sp)
    e7c0:	|  |      jsr 16b7c <__divsf3>
    e7c6:	|  |      addq.l #8,sp
    e7c8:	|  |      move.l d0,-(sp)
    e7ca:	|  |      move.l d3,-(sp)
    e7cc:	|  |      jsr 16fc4 <__subsf3>
    e7d2:	|  |      addq.l #8,sp
    e7d4:	|  |      move.l d0,-(sp)
    e7d6:	|  |      move.l d2,-(sp)
    e7d8:	|  |      jsr 16e3c <__gtsf2>
    e7de:	|  |      addq.l #8,sp
    e7e0:	|  |      tst.l d0
    e7e2:	|  +----- ble.s e836 <builtIn_aimCamera+0x2ac>
    e7e4:	|  |      move.l 1a858 <sceneHeight>,d0
    e7ea:	|  |      move.l d0,-(sp)
    e7ec:	|  |      jsr 16cf8 <__floatunsisf>
    e7f2:	|  |      addq.l #4,sp
    e7f4:	|  |      move.l d0,d2
    e7f6:	|  |      move.l 1a6fc <winHeight>,d0
    e7fc:	|  |      move.l d0,-(sp)
    e7fe:	|  |      jsr 16cf8 <__floatunsisf>
    e804:	|  |      addq.l #4,sp
    e806:	|  |      move.l d0,d1
    e808:	|  |      move.l 1a142 <cameraZoom>,d0
    e80e:	|  |      move.l d0,-(sp)
    e810:	|  |      move.l d1,-(sp)
    e812:	|  |      jsr 16b7c <__divsf3>
    e818:	|  |      addq.l #8,sp
    e81a:	|  |      move.l d0,-(sp)
    e81c:	|  |      move.l d2,-(sp)
    e81e:	|  |      jsr 16fc4 <__subsf3>
    e824:	|  |      addq.l #8,sp
    e826:	|  |      move.l d0,-(sp)
    e828:	|  |      jsr 16c68 <__fixsfsi>
    e82e:	|  |      addq.l #4,sp
    e830:	|  |      move.l d0,1a876 <cameraY>
	return BR_CONTINUE;
    e836:	|  \----> moveq #2,d0
}
    e838:	\-------> move.l (sp)+,d2
    e83a:	          move.l (sp)+,d3
    e83c:	          rts

0000e83e <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    e83e:	       subq.l #4,sp
    e840:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e842:	       movea.l 16(sp),a0
    e846:	       move.l 24(a0),d0
    e84a:	       move.l d0,-(sp)
    e84c:	       pea 1 <_start+0x1>
    e850:	       moveq #12,d0
    e852:	       add.l sp,d0
    e854:	       move.l d0,-(sp)
    e856:	       jsr 13e96 <getValueType>
    e85c:	       lea 12(sp),sp
    e860:	       tst.w d0
    e862:	   /-- bne.s e86a <builtIn_zoomCamera+0x2c>
    e864:	   |   moveq #1,d0
    e866:	/--|-- bra.w ea64 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    e86a:	|  \-> moveq #24,d0
    e86c:	|      add.l 16(sp),d0
    e870:	|      move.l d0,-(sp)
    e872:	|      jsr 1481a <trimStack>
    e878:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    e87a:	|      move.l 1a760 <input+0xa>,d0
    e880:	|      move.l d0,-(sp)
    e882:	|      jsr 16cd0 <__floatsisf>
    e888:	|      addq.l #4,sp
    e88a:	|      move.l d0,d1
    e88c:	|      move.l 1a142 <cameraZoom>,d0
    e892:	|      move.l d0,-(sp)
    e894:	|      move.l d1,-(sp)
    e896:	|      jsr 16d82 <__mulsf3>
    e89c:	|      addq.l #8,sp
    e89e:	|      move.l d0,-(sp)
    e8a0:	|      jsr 16c68 <__fixsfsi>
    e8a6:	|      addq.l #4,sp
    e8a8:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    e8ae:	|      move.l 1a764 <input+0xe>,d0
    e8b4:	|      move.l d0,-(sp)
    e8b6:	|      jsr 16cd0 <__floatsisf>
    e8bc:	|      addq.l #4,sp
    e8be:	|      move.l d0,d1
    e8c0:	|      move.l 1a142 <cameraZoom>,d0
    e8c6:	|      move.l d0,-(sp)
    e8c8:	|      move.l d1,-(sp)
    e8ca:	|      jsr 16d82 <__mulsf3>
    e8d0:	|      addq.l #8,sp
    e8d2:	|      move.l d0,-(sp)
    e8d4:	|      jsr 16c68 <__fixsfsi>
    e8da:	|      addq.l #4,sp
    e8dc:	|      move.l d0,1a764 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    e8e2:	|      move.l 4(sp),d0
    e8e6:	|      move.l d0,-(sp)
    e8e8:	|      jsr 16cd0 <__floatsisf>
    e8ee:	|      addq.l #4,sp
    e8f0:	|      move.l #1008981770,-(sp)
    e8f6:	|      move.l d0,-(sp)
    e8f8:	|      jsr 16d82 <__mulsf3>
    e8fe:	|      addq.l #8,sp
    e900:	|      move.l d0,1a142 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    e906:	|      move.l 1a6f8 <winWidth>,d0
    e90c:	|      move.l d0,-(sp)
    e90e:	|      jsr 16cf8 <__floatunsisf>
    e914:	|      addq.l #4,sp
    e916:	|      move.l d0,d1
    e918:	|      move.l 1a142 <cameraZoom>,d0
    e91e:	|      move.l d0,-(sp)
    e920:	|      move.l d1,-(sp)
    e922:	|      jsr 16b7c <__divsf3>
    e928:	|      addq.l #8,sp
    e92a:	|      move.l d0,d2
    e92c:	|      move.l 1a854 <sceneWidth>,d0
    e932:	|      move.l d0,-(sp)
    e934:	|      jsr 16cf8 <__floatunsisf>
    e93a:	|      addq.l #4,sp
    e93c:	|      move.l d0,-(sp)
    e93e:	|      move.l d2,-(sp)
    e940:	|      jsr 16e3c <__gtsf2>
    e946:	|      addq.l #8,sp
    e948:	|      tst.l d0
    e94a:	|  /-- ble.s e980 <builtIn_zoomCamera+0x142>
    e94c:	|  |   move.l 1a6f8 <winWidth>,d0
    e952:	|  |   move.l d0,-(sp)
    e954:	|  |   jsr 16cf8 <__floatunsisf>
    e95a:	|  |   addq.l #4,sp
    e95c:	|  |   move.l d0,d2
    e95e:	|  |   move.l 1a854 <sceneWidth>,d0
    e964:	|  |   move.l d0,-(sp)
    e966:	|  |   jsr 16cf8 <__floatunsisf>
    e96c:	|  |   addq.l #4,sp
    e96e:	|  |   move.l d0,-(sp)
    e970:	|  |   move.l d2,-(sp)
    e972:	|  |   jsr 16b7c <__divsf3>
    e978:	|  |   addq.l #8,sp
    e97a:	|  |   move.l d0,1a142 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    e980:	|  \-> move.l 1a6fc <winHeight>,d0
    e986:	|      move.l d0,-(sp)
    e988:	|      jsr 16cf8 <__floatunsisf>
    e98e:	|      addq.l #4,sp
    e990:	|      move.l d0,d1
    e992:	|      move.l 1a142 <cameraZoom>,d0
    e998:	|      move.l d0,-(sp)
    e99a:	|      move.l d1,-(sp)
    e99c:	|      jsr 16b7c <__divsf3>
    e9a2:	|      addq.l #8,sp
    e9a4:	|      move.l d0,d2
    e9a6:	|      move.l 1a858 <sceneHeight>,d0
    e9ac:	|      move.l d0,-(sp)
    e9ae:	|      jsr 16cf8 <__floatunsisf>
    e9b4:	|      addq.l #4,sp
    e9b6:	|      move.l d0,-(sp)
    e9b8:	|      move.l d2,-(sp)
    e9ba:	|      jsr 16e3c <__gtsf2>
    e9c0:	|      addq.l #8,sp
    e9c2:	|      tst.l d0
    e9c4:	|  /-- ble.s e9fa <builtIn_zoomCamera+0x1bc>
    e9c6:	|  |   move.l 1a6fc <winHeight>,d0
    e9cc:	|  |   move.l d0,-(sp)
    e9ce:	|  |   jsr 16cf8 <__floatunsisf>
    e9d4:	|  |   addq.l #4,sp
    e9d6:	|  |   move.l d0,d2
    e9d8:	|  |   move.l 1a858 <sceneHeight>,d0
    e9de:	|  |   move.l d0,-(sp)
    e9e0:	|  |   jsr 16cf8 <__floatunsisf>
    e9e6:	|  |   addq.l #4,sp
    e9e8:	|  |   move.l d0,-(sp)
    e9ea:	|  |   move.l d2,-(sp)
    e9ec:	|  |   jsr 16b7c <__divsf3>
    e9f2:	|  |   addq.l #8,sp
    e9f4:	|  |   move.l d0,1a142 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    e9fa:	|  \-> move.l 1a760 <input+0xa>,d0
    ea00:	|      move.l d0,-(sp)
    ea02:	|      jsr 16cd0 <__floatsisf>
    ea08:	|      addq.l #4,sp
    ea0a:	|      move.l d0,d1
    ea0c:	|      move.l 1a142 <cameraZoom>,d0
    ea12:	|      move.l d0,-(sp)
    ea14:	|      move.l d1,-(sp)
    ea16:	|      jsr 16b7c <__divsf3>
    ea1c:	|      addq.l #8,sp
    ea1e:	|      move.l d0,-(sp)
    ea20:	|      jsr 16c68 <__fixsfsi>
    ea26:	|      addq.l #4,sp
    ea28:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    ea2e:	|      move.l 1a764 <input+0xe>,d0
    ea34:	|      move.l d0,-(sp)
    ea36:	|      jsr 16cd0 <__floatsisf>
    ea3c:	|      addq.l #4,sp
    ea3e:	|      move.l d0,d1
    ea40:	|      move.l 1a142 <cameraZoom>,d0
    ea46:	|      move.l d0,-(sp)
    ea48:	|      move.l d1,-(sp)
    ea4a:	|      jsr 16b7c <__divsf3>
    ea50:	|      addq.l #8,sp
    ea52:	|      move.l d0,-(sp)
    ea54:	|      jsr 16c68 <__fixsfsi>
    ea5a:	|      addq.l #4,sp
    ea5c:	|      move.l d0,1a764 <input+0xe>

	return BR_CONTINUE;
    ea62:	|      moveq #2,d0
}
    ea64:	\----> move.l (sp)+,d2
    ea66:	       addq.l #4,sp
    ea68:	       rts

0000ea6a <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    ea6a:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    ea6c:	             tst.l 8(sp)
    ea70:	         /-- bne.s ea84 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    ea72:	         |   pea 18eaf <line.c.05397aaf+0x47>
    ea78:	         |   jsr 16894 <KPrintF>
    ea7e:	         |   addq.l #4,sp
		return BR_ERROR;
    ea80:	         |   moveq #1,d0
    ea82:	/--------|-- bra.s eae4 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    ea84:	|        \-> jsr 15494 <rand>
    ea8a:	|            move.l d0,d1
    ea8c:	|            move.l 8(sp),d0
    ea90:	|            move.l d0,-(sp)
    ea92:	|            move.l d1,-(sp)
    ea94:	|            jsr 1732c <__umodsi3>
    ea9a:	|            addq.l #8,sp
    ea9c:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    ea9e:	|     /----- bra.s ead2 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    eaa0:	|  /--|----> move.l (sp),d0
    eaa2:	|  |  |      cmp.l 8(sp),d0
    eaa6:	|  |  |  /-- bne.s eac2 <builtIn_pickOne+0x58>
    eaa8:	|  |  |  |   moveq #28,d0
    eaaa:	|  |  |  |   add.l 12(sp),d0
    eaae:	|  |  |  |   movea.l 12(sp),a0
    eab2:	|  |  |  |   move.l 24(a0),d1
    eab6:	|  |  |  |   move.l d0,-(sp)
    eab8:	|  |  |  |   move.l d1,-(sp)
    eaba:	|  |  |  |   jsr 14350 <copyVariable>
    eac0:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    eac2:	|  |  |  \-> moveq #24,d0
    eac4:	|  |  |      add.l 12(sp),d0
    eac8:	|  |  |      move.l d0,-(sp)
    eaca:	|  |  |      jsr 1481a <trimStack>
    ead0:	|  |  |      addq.l #4,sp
	while (numParams --) {
    ead2:	|  |  \----> move.l 8(sp),d0
    ead6:	|  |         move.l d0,d1
    ead8:	|  |         subq.l #1,d1
    eada:	|  |         move.l d1,8(sp)
    eade:	|  |         tst.l d0
    eae0:	|  \-------- bne.s eaa0 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    eae2:	|            moveq #2,d0
}
    eae4:	\----------> addq.l #4,sp
    eae6:	             rts

0000eae8 <builtIn_substring>:

builtIn(substring)
{
    eae8:	       lea -40(sp),sp
    eaec:	       move.l a6,-(sp)
    eaee:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    eaf0:	       movea.l 56(sp),a0
    eaf4:	       move.l 24(a0),d0
    eaf8:	       move.l d0,-(sp)
    eafa:	       pea 1 <_start+0x1>
    eafe:	       lea 16(sp),a0
    eb02:	       move.l a0,-(sp)
    eb04:	       jsr 13e96 <getValueType>
    eb0a:	       lea 12(sp),sp
    eb0e:	       tst.w d0
    eb10:	   /-- bne.s eb18 <builtIn_substring+0x30>
    eb12:	   |   moveq #1,d0
    eb14:	/--|-- bra.w ec90 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    eb18:	|  \-> moveq #24,d0
    eb1a:	|      add.l 56(sp),d0
    eb1e:	|      move.l d0,-(sp)
    eb20:	|      jsr 1481a <trimStack>
    eb26:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    eb28:	|      movea.l 56(sp),a0
    eb2c:	|      move.l 24(a0),d0
    eb30:	|      move.l d0,-(sp)
    eb32:	|      pea 1 <_start+0x1>
    eb36:	|      lea 20(sp),a0
    eb3a:	|      move.l a0,-(sp)
    eb3c:	|      jsr 13e96 <getValueType>
    eb42:	|      lea 12(sp),sp
    eb46:	|      tst.w d0
    eb48:	|  /-- bne.s eb50 <builtIn_substring+0x68>
    eb4a:	|  |   moveq #1,d0
    eb4c:	+--|-- bra.w ec90 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    eb50:	|  \-> moveq #24,d0
    eb52:	|      add.l 56(sp),d0
    eb56:	|      move.l d0,-(sp)
    eb58:	|      jsr 1481a <trimStack>
    eb5e:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    eb60:	|      movea.l 56(sp),a0
    eb64:	|      move.l 24(a0),d0
    eb68:	|      move.l d0,-(sp)
    eb6a:	|      jsr 1446c <getTextFromAnyVar>
    eb70:	|      addq.l #4,sp
    eb72:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    eb76:	|      moveq #24,d0
    eb78:	|      add.l 56(sp),d0
    eb7c:	|      move.l d0,-(sp)
    eb7e:	|      jsr 1481a <trimStack>
    eb84:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    eb86:	|      move.l 44(sp),-(sp)
    eb8a:	|      jsr 13382 <strlen>
    eb90:	|      addq.l #4,sp
    eb92:	|      move.l d0,d1
    eb94:	|      move.l 12(sp),d0
    eb98:	|      movea.l d0,a0
    eb9a:	|      move.l 8(sp),d0
    eb9e:	|      add.l a0,d0
    eba0:	|      cmp.l d1,d0
    eba2:	|  /-- bls.s ebd8 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    eba4:	|  |   move.l 44(sp),-(sp)
    eba8:	|  |   jsr 13382 <strlen>
    ebae:	|  |   addq.l #4,sp
    ebb0:	|  |   move.l d0,d1
    ebb2:	|  |   move.l 12(sp),d0
    ebb6:	|  |   sub.l d0,d1
    ebb8:	|  |   move.l d1,d0
    ebba:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    ebbe:	|  |   move.l 44(sp),-(sp)
    ebc2:	|  |   jsr 13382 <strlen>
    ebc8:	|  |   addq.l #4,sp
    ebca:	|  |   move.l d0,d1
    ebcc:	|  |   move.l 12(sp),d0
    ebd0:	|  |   cmp.l d1,d0
    ebd2:	|  +-- bls.s ebd8 <builtIn_substring+0xf0>
            start = 0;
    ebd4:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    ebd8:	|  \-> move.l 8(sp),d0
    ebdc:	|  /-- bpl.s ebe2 <builtIn_substring+0xfa>
        length = 0;
    ebde:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    ebe2:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    ebe8:	|      move.l 12(sp),d1
    ebec:	|      move.l 8(sp),d0
    ebf0:	|      move.l d1,d2
    ebf2:	|      add.l d0,d2
    ebf4:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    ebf8:	|      move.l 36(sp),d0
    ebfc:	|      sub.l 40(sp),d0
    ec00:	|      addq.l #1,d0
    ec02:	|      move.l d0,32(sp)
    ec06:	|      clr.l 28(sp)
    ec0a:	|      move.l 1a7a4 <SysBase>,d0
    ec10:	|      movea.l d0,a6
    ec12:	|      move.l 32(sp),d0
    ec16:	|      move.l 28(sp),d1
    ec1a:	|      jsr -684(a6)
    ec1e:	|      move.l d0,24(sp)
    ec22:	|      move.l 24(sp),d0
    ec26:	|      move.l d0,20(sp)
    if (!newString) {
    ec2a:	|  /-- bne.s ec30 <builtIn_substring+0x148>
        return BR_ERROR;
    ec2c:	|  |   moveq #1,d0
    ec2e:	+--|-- bra.s ec90 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    ec30:	|  \-> move.l 36(sp),d0
    ec34:	|      sub.l 40(sp),d0
    ec38:	|      move.l d0,d1
    ec3a:	|      move.l 40(sp),d0
    ec3e:	|      add.l 44(sp),d0
    ec42:	|      move.l d1,-(sp)
    ec44:	|      move.l d0,-(sp)
    ec46:	|      move.l 28(sp),-(sp)
    ec4a:	|      jsr 16848 <memcpy>
    ec50:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    ec54:	|      move.l 36(sp),d0
    ec58:	|      sub.l 40(sp),d0
    ec5c:	|      movea.l 20(sp),a0
    ec60:	|      adda.l d0,a0
    ec62:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    ec64:	|      moveq #28,d0
    ec66:	|      add.l 56(sp),d0
    ec6a:	|      move.l 20(sp),-(sp)
    ec6e:	|      move.l d0,-(sp)
    ec70:	|      jsr 140b8 <makeTextVar>
    ec76:	|      addq.l #8,sp
    FreeVec(newString);
    ec78:	|      move.l 20(sp),16(sp)
    ec7e:	|      move.l 1a7a4 <SysBase>,d0
    ec84:	|      movea.l d0,a6
    ec86:	|      movea.l 16(sp),a1
    ec8a:	|      jsr -690(a6)
    return BR_CONTINUE;
    ec8e:	|      moveq #2,d0
}
    ec90:	\----> move.l (sp)+,d2
    ec92:	       movea.l (sp)+,a6
    ec94:	       lea 40(sp),sp
    ec98:	       rts

0000ec9a <builtIn_stringLength>:

builtIn(stringLength)
{
    ec9a:	subq.l #8,sp
    ec9c:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ec9e:	movea.l 20(sp),a0
    eca2:	move.l 24(a0),d0
    eca6:	move.l d0,-(sp)
    eca8:	jsr 1446c <getTextFromAnyVar>
    ecae:	addq.l #4,sp
    ecb0:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    ecb4:	moveq #24,d0
    ecb6:	add.l 20(sp),d0
    ecba:	move.l d0,-(sp)
    ecbc:	jsr 1481a <trimStack>
    ecc2:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    ecc4:	move.l 8(sp),-(sp)
    ecc8:	jsr 13382 <strlen>
    ecce:	addq.l #4,sp
    ecd0:	move.l d0,d1
    ecd2:	moveq #28,d0
    ecd4:	add.l 20(sp),d0
    ecd8:	move.l d1,-(sp)
    ecda:	pea 1 <_start+0x1>
    ecde:	move.l d0,-(sp)
    ece0:	jsr 14788 <setVariable>
    ece6:	lea 12(sp),sp
	FreeVec(newText);
    ecea:	move.l 8(sp),4(sp)
    ecf0:	move.l 1a7a4 <SysBase>,d0
    ecf6:	movea.l d0,a6
    ecf8:	movea.l 4(sp),a1
    ecfc:	jsr -690(a6)
	return BR_CONTINUE;
    ed00:	moveq #2,d0
}
    ed02:	movea.l (sp)+,a6
    ed04:	addq.l #8,sp
    ed06:	rts

0000ed08 <builtIn_newStack>:

builtIn(newStack)
{
    ed08:	             lea -12(sp),sp
    ed0c:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    ed0e:	             moveq #28,d0
    ed10:	             add.l 24(sp),d0
    ed14:	             move.l d0,-(sp)
    ed16:	             jsr 140e4 <unlinkVar>
    ed1c:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    ed1e:	             movea.l 24(sp),a0
    ed22:	             moveq #6,d0
    ed24:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    ed28:	             moveq #12,d1
    ed2a:	             move.l d1,12(sp)
    ed2e:	             clr.l 8(sp)
    ed32:	             move.l 1a7a4 <SysBase>,d0
    ed38:	             movea.l d0,a6
    ed3a:	             move.l 12(sp),d0
    ed3e:	             move.l 8(sp),d1
    ed42:	             jsr -684(a6)
    ed46:	             move.l d0,4(sp)
    ed4a:	             move.l 4(sp),d0
    ed4e:	             movea.l 24(sp),a0
    ed52:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    ed56:	             movea.l 24(sp),a0
    ed5a:	             move.l 32(a0),d0
    ed5e:	         /-- bne.s ed66 <builtIn_newStack+0x5e>
    ed60:	         |   moveq #1,d0
    ed62:	/--------|-- bra.w edf8 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    ed66:	|        \-> movea.l 24(sp),a0
    ed6a:	|            movea.l 32(a0),a0
    ed6e:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    ed70:	|            movea.l 24(sp),a0
    ed74:	|            movea.l 32(a0),a0
    ed78:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    ed7c:	|            movea.l 24(sp),a0
    ed80:	|            movea.l 32(a0),a0
    ed84:	|            moveq #1,d0
    ed86:	|            move.l d0,8(a0)
    
    while (numParams--) {
    ed8a:	|     /----- bra.s ede6 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    ed8c:	|  /--|----> movea.l 24(sp),a0
    ed90:	|  |  |      move.l 32(a0),d0
    ed94:	|  |  |      move.l d0,d1
    ed96:	|  |  |      movea.l 24(sp),a0
    ed9a:	|  |  |      move.l 24(a0),d0
    ed9e:	|  |  |      move.l d1,-(sp)
    eda0:	|  |  |      move.l d0,-(sp)
    eda2:	|  |  |      jsr 136d2 <addVarToStack>
    eda8:	|  |  |      addq.l #8,sp
    edaa:	|  |  |      tst.w d0
    edac:	|  |  |  /-- bne.s edb2 <builtIn_newStack+0xaa>
    edae:	|  |  |  |   moveq #1,d0
    edb0:	+--|--|--|-- bra.s edf8 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    edb2:	|  |  |  \-> movea.l 24(sp),a0
    edb6:	|  |  |      movea.l 32(a0),a0
    edba:	|  |  |      move.l 4(a0),d0
    edbe:	|  |  |  /-- bne.s edd6 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    edc0:	|  |  |  |   movea.l 24(sp),a0
    edc4:	|  |  |  |   movea.l 32(a0),a1
    edc8:	|  |  |  |   movea.l 24(sp),a0
    edcc:	|  |  |  |   movea.l 32(a0),a0
    edd0:	|  |  |  |   move.l (a1),d0
    edd2:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    edd6:	|  |  |  \-> moveq #24,d0
    edd8:	|  |  |      add.l 24(sp),d0
    eddc:	|  |  |      move.l d0,-(sp)
    edde:	|  |  |      jsr 1481a <trimStack>
    ede4:	|  |  |      addq.l #4,sp
    while (numParams--) {
    ede6:	|  |  \----> move.l 20(sp),d0
    edea:	|  |         move.l d0,d1
    edec:	|  |         subq.l #1,d1
    edee:	|  |         move.l d1,20(sp)
    edf2:	|  |         tst.l d0
    edf4:	|  \-------- bne.s ed8c <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    edf6:	|            moveq #2,d0
}
    edf8:	\----------> movea.l (sp)+,a6
    edfa:	             lea 12(sp),sp
    edfe:	             rts

0000ee00 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    ee00:	          movea.l 8(sp),a0
    ee04:	          movea.l 24(a0),a0
    ee08:	          move.l (a0),d0
    ee0a:	          moveq #6,d1
    ee0c:	          cmp.l d0,d1
    ee0e:	      /-- beq.s ee2a <builtIn_stackSize+0x2a>
    ee10:	      |   moveq #10,d1
    ee12:	      |   cmp.l d0,d1
    ee14:	   /--|-- beq.s ee6e <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    ee16:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    ee18:	   |  |   pea 18ee2 <line.c.05397aaf+0x7a>
    ee1e:	   |  |   jsr 16894 <KPrintF>
    ee24:	   |  |   addq.l #4,sp
	return BR_ERROR;
    ee26:	   |  |   moveq #1,d0
    ee28:	/--|--|-- bra.s eea8 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    ee2a:	|  |  \-> movea.l 8(sp),a0
    ee2e:	|  |      movea.l 24(a0),a0
    ee32:	|  |      move.l 4(a0),d0
    ee36:	|  |      move.l d0,-(sp)
    ee38:	|  |      jsr 147f6 <stackSize>
    ee3e:	|  |      addq.l #4,sp
    ee40:	|  |      move.l d0,d1
    ee42:	|  |      moveq #28,d0
    ee44:	|  |      add.l 8(sp),d0
    ee48:	|  |      move.l d1,-(sp)
    ee4a:	|  |      pea 1 <_start+0x1>
    ee4e:	|  |      move.l d0,-(sp)
    ee50:	|  |      jsr 14788 <setVariable>
    ee56:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    ee5a:	|  |      moveq #24,d0
    ee5c:	|  |      add.l 8(sp),d0
    ee60:	|  |      move.l d0,-(sp)
    ee62:	|  |      jsr 1481a <trimStack>
    ee68:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    ee6a:	|  |      moveq #2,d0
    ee6c:	+--|----- bra.s eea8 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    ee6e:	|  \----> movea.l 8(sp),a0
    ee72:	|         movea.l 24(a0),a0
    ee76:	|         movea.l 4(a0),a0
    ee7a:	|         move.l 4(a0),d1
    ee7e:	|         moveq #28,d0
    ee80:	|         add.l 8(sp),d0
    ee84:	|         move.l d1,-(sp)
    ee86:	|         pea 1 <_start+0x1>
    ee8a:	|         move.l d0,-(sp)
    ee8c:	|         jsr 14788 <setVariable>
    ee92:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    ee96:	|         moveq #24,d0
    ee98:	|         add.l 8(sp),d0
    ee9c:	|         move.l d0,-(sp)
    ee9e:	|         jsr 1481a <trimStack>
    eea4:	|         addq.l #4,sp
			return BR_CONTINUE;
    eea6:	|         moveq #2,d0
}
    eea8:	\-------> rts

0000eeaa <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    eeaa:	       movea.l 8(sp),a0
    eeae:	       movea.l 24(a0),a0
    eeb2:	       move.l (a0),d0
    eeb4:	       moveq #6,d1
    eeb6:	       cmp.l d0,d1
    eeb8:	   /-- beq.s eecc <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    eeba:	   |   pea 18f0b <line.c.05397aaf+0xa3>
    eec0:	   |   jsr 16894 <KPrintF>
    eec6:	   |   addq.l #4,sp
		return BR_ERROR;
    eec8:	   |   moveq #1,d0
    eeca:	/--|-- bra.s ef00 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    eecc:	|  \-> moveq #28,d0
    eece:	|      add.l 8(sp),d0
    eed2:	|      movea.l 8(sp),a0
    eed6:	|      move.l 24(a0),d1
    eeda:	|      move.l d0,-(sp)
    eedc:	|      move.l d1,-(sp)
    eede:	|      jsr 1399c <copyStack>
    eee4:	|      addq.l #8,sp
    eee6:	|      tst.w d0
    eee8:	|  /-- bne.s eeee <builtIn_copyStack+0x44>
    eeea:	|  |   moveq #1,d0
    eeec:	+--|-- bra.s ef00 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    eeee:	|  \-> moveq #24,d0
    eef0:	|      add.l 8(sp),d0
    eef4:	|      move.l d0,-(sp)
    eef6:	|      jsr 1481a <trimStack>
    eefc:	|      addq.l #4,sp
	return BR_CONTINUE;
    eefe:	|      moveq #2,d0
}
    ef00:	\----> rts

0000ef02 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    ef02:	       movea.l 8(sp),a0
    ef06:	       movea.l 24(a0),a0
    ef0a:	       movea.l 8(a0),a0
    ef0e:	       move.l (a0),d0
    ef10:	       moveq #6,d1
    ef12:	       cmp.l d0,d1
    ef14:	   /-- beq.s ef2a <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    ef16:	   |   pea 18f24 <line.c.05397aaf+0xbc>
    ef1c:	   |   jsr 16894 <KPrintF>
    ef22:	   |   addq.l #4,sp
		return BR_ERROR;
    ef24:	   |   moveq #1,d0
    ef26:	/--|-- bra.w efb8 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    ef2a:	|  \-> movea.l 8(sp),a0
    ef2e:	|      movea.l 24(a0),a0
    ef32:	|      movea.l 8(a0),a0
    ef36:	|      move.l 4(a0),d0
    ef3a:	|      move.l d0,d1
    ef3c:	|      movea.l 8(sp),a0
    ef40:	|      move.l 24(a0),d0
    ef44:	|      move.l d1,-(sp)
    ef46:	|      move.l d0,-(sp)
    ef48:	|      jsr 136d2 <addVarToStack>
    ef4e:	|      addq.l #8,sp
    ef50:	|      tst.w d0
    ef52:	|  /-- bne.s ef58 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    ef54:	|  |   moveq #1,d0
    ef56:	+--|-- bra.s efb8 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    ef58:	|  \-> movea.l 8(sp),a0
    ef5c:	|      movea.l 24(a0),a0
    ef60:	|      movea.l 8(a0),a0
    ef64:	|      movea.l 4(a0),a0
    ef68:	|      movea.l (a0),a0
    ef6a:	|      move.l 8(a0),d0
    ef6e:	|  /-- bne.s ef96 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    ef70:	|  |   movea.l 8(sp),a0
    ef74:	|  |   movea.l 24(a0),a0
    ef78:	|  |   movea.l 8(a0),a0
    ef7c:	|  |   movea.l 4(a0),a1
    ef80:	|  |   movea.l 8(sp),a0
    ef84:	|  |   movea.l 24(a0),a0
    ef88:	|  |   movea.l 8(a0),a0
    ef8c:	|  |   movea.l 4(a0),a0
    ef90:	|  |   move.l (a1),d0
    ef92:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    ef96:	|  \-> moveq #24,d0
    ef98:	|      add.l 8(sp),d0
    ef9c:	|      move.l d0,-(sp)
    ef9e:	|      jsr 1481a <trimStack>
    efa4:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    efa6:	|      moveq #24,d0
    efa8:	|      add.l 8(sp),d0
    efac:	|      move.l d0,-(sp)
    efae:	|      jsr 1481a <trimStack>
    efb4:	|      addq.l #4,sp
	return BR_CONTINUE;
    efb6:	|      moveq #2,d0
}
    efb8:	\----> rts

0000efba <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    efba:	             movea.l 8(sp),a0
    efbe:	             movea.l 24(a0),a0
    efc2:	             movea.l 8(a0),a0
    efc6:	             move.l (a0),d0
    efc8:	             moveq #6,d1
    efca:	             cmp.l d0,d1
    efcc:	         /-- beq.s efe2 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    efce:	         |   pea 18f24 <line.c.05397aaf+0xbc>
    efd4:	         |   jsr 16894 <KPrintF>
    efda:	         |   addq.l #4,sp
		return BR_ERROR;
    efdc:	         |   moveq #1,d0
    efde:	/--------|-- bra.w f0d0 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    efe2:	|        \-> movea.l 8(sp),a0
    efe6:	|            movea.l 24(a0),a0
    efea:	|            movea.l 8(a0),a0
    efee:	|            movea.l 4(a0),a0
    eff2:	|            move.l (a0),d0
    eff4:	|     /----- bne.s f04e <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    eff6:	|     |      movea.l 8(sp),a0
    effa:	|     |      movea.l 24(a0),a0
    effe:	|     |      movea.l 8(a0),a0
    f002:	|     |      move.l 4(a0),d0
    f006:	|     |      move.l d0,d1
    f008:	|     |      movea.l 8(sp),a0
    f00c:	|     |      move.l 24(a0),d0
    f010:	|     |      move.l d1,-(sp)
    f012:	|     |      move.l d0,-(sp)
    f014:	|     |      jsr 136d2 <addVarToStack>
    f01a:	|     |      addq.l #8,sp
    f01c:	|     |      tst.w d0
    f01e:	|     |  /-- bne.s f026 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f020:	|     |  |   moveq #1,d0
    f022:	+-----|--|-- bra.w f0d0 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f026:	|     |  \-> movea.l 8(sp),a0
    f02a:	|     |      movea.l 24(a0),a0
    f02e:	|     |      movea.l 8(a0),a0
    f032:	|     |      movea.l 4(a0),a1
    f036:	|     |      movea.l 8(sp),a0
    f03a:	|     |      movea.l 24(a0),a0
    f03e:	|     |      movea.l 8(a0),a0
    f042:	|     |      movea.l 4(a0),a0
    f046:	|     |      move.l (a1),d0
    f048:	|     |      move.l d0,4(a0)
    f04c:	|  /--|----- bra.s f0ae <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f04e:	|  |  \----> movea.l 8(sp),a0
    f052:	|  |         movea.l 24(a0),a0
    f056:	|  |         movea.l 8(a0),a0
    f05a:	|  |         movea.l 4(a0),a0
    f05e:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f062:	|  |         move.l d0,d1
    f064:	|  |         addq.l #8,d1
    f066:	|  |         movea.l 8(sp),a0
    f06a:	|  |         move.l 24(a0),d0
    f06e:	|  |         move.l d1,-(sp)
    f070:	|  |         move.l d0,-(sp)
    f072:	|  |         jsr 136d2 <addVarToStack>
    f078:	|  |         addq.l #8,sp
    f07a:	|  |         tst.w d0
    f07c:	|  |     /-- bne.s f082 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f07e:	|  |     |   moveq #1,d0
    f080:	+--|-----|-- bra.s f0d0 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f082:	|  |     \-> movea.l 8(sp),a0
    f086:	|  |         movea.l 24(a0),a0
    f08a:	|  |         movea.l 8(a0),a0
    f08e:	|  |         movea.l 4(a0),a0
    f092:	|  |         movea.l 4(a0),a1
    f096:	|  |         movea.l 8(sp),a0
    f09a:	|  |         movea.l 24(a0),a0
    f09e:	|  |         movea.l 8(a0),a0
    f0a2:	|  |         movea.l 4(a0),a0
    f0a6:	|  |         move.l 8(a1),d0
    f0aa:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f0ae:	|  \-------> moveq #24,d0
    f0b0:	|            add.l 8(sp),d0
    f0b4:	|            move.l d0,-(sp)
    f0b6:	|            jsr 1481a <trimStack>
    f0bc:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f0be:	|            moveq #24,d0
    f0c0:	|            add.l 8(sp),d0
    f0c4:	|            move.l d0,-(sp)
    f0c6:	|            jsr 1481a <trimStack>
    f0cc:	|            addq.l #4,sp
	return BR_CONTINUE;
    f0ce:	|            moveq #2,d0
}
    f0d0:	\----------> rts

0000f0d2 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f0d2:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f0d4:	       movea.l 12(sp),a0
    f0d8:	       movea.l 24(a0),a0
    f0dc:	       movea.l 8(a0),a0
    f0e0:	       move.l (a0),d0
    f0e2:	       moveq #6,d1
    f0e4:	       cmp.l d0,d1
    f0e6:	   /-- beq.s f0fc <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f0e8:	   |   pea 18f0b <line.c.05397aaf+0xa3>
    f0ee:	   |   jsr 16894 <KPrintF>
    f0f4:	   |   addq.l #4,sp
		return BR_ERROR;
    f0f6:	   |   moveq #1,d0
    f0f8:	/--|-- bra.w f192 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    f0fc:	|  \-> movea.l 12(sp),a0
    f100:	|      movea.l 24(a0),a0
    f104:	|      movea.l 8(a0),a0
    f108:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f10c:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f10e:	|      movea.l 12(sp),a0
    f112:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f116:	|      clr.l -(sp)
    f118:	|      move.l d1,-(sp)
    f11a:	|      move.l d0,-(sp)
    f11c:	|      jsr 13a72 <deleteVarFromStack>
    f122:	|      lea 12(sp),sp
    f126:	|      move.l d0,d1
    f128:	|      moveq #28,d0
    f12a:	|      add.l 12(sp),d0
    f12e:	|      move.l d1,-(sp)
    f130:	|      pea 1 <_start+0x1>
    f134:	|      move.l d0,-(sp)
    f136:	|      jsr 14788 <setVariable>
    f13c:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f140:	|      movea.l 12(sp),a0
    f144:	|      movea.l 24(a0),a0
    f148:	|      movea.l 8(a0),a0
    f14c:	|      movea.l 4(a0),a0
    f150:	|      move.l (a0),d0
    f152:	|      movea.l 12(sp),a0
    f156:	|      movea.l 24(a0),a0
    f15a:	|      movea.l 8(a0),a0
    f15e:	|      movea.l 4(a0),a2
    f162:	|      move.l d0,-(sp)
    f164:	|      jsr 147d2 <stackFindLast>
    f16a:	|      addq.l #4,sp
    f16c:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f170:	|      moveq #24,d0
    f172:	|      add.l 12(sp),d0
    f176:	|      move.l d0,-(sp)
    f178:	|      jsr 1481a <trimStack>
    f17e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f180:	|      moveq #24,d0
    f182:	|      add.l 12(sp),d0
    f186:	|      move.l d0,-(sp)
    f188:	|      jsr 1481a <trimStack>
    f18e:	|      addq.l #4,sp
	return BR_CONTINUE;
    f190:	|      moveq #2,d0
}
    f192:	\----> movea.l (sp)+,a2
    f194:	       rts

0000f196 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    f196:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f198:	       movea.l 12(sp),a0
    f19c:	       movea.l 24(a0),a0
    f1a0:	       movea.l 8(a0),a0
    f1a4:	       move.l (a0),d0
    f1a6:	       moveq #6,d1
    f1a8:	       cmp.l d0,d1
    f1aa:	   /-- beq.s f1c0 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f1ac:	   |   pea 18f0b <line.c.05397aaf+0xa3>
    f1b2:	   |   jsr 16894 <KPrintF>
    f1b8:	   |   addq.l #4,sp
		return BR_ERROR;
    f1ba:	   |   moveq #1,d0
    f1bc:	/--|-- bra.w f258 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    f1c0:	|  \-> movea.l 12(sp),a0
    f1c4:	|      movea.l 24(a0),a0
    f1c8:	|      movea.l 8(a0),a0
    f1cc:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f1d0:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f1d2:	|      movea.l 12(sp),a0
    f1d6:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f1da:	|      pea 1 <_start+0x1>
    f1de:	|      move.l d1,-(sp)
    f1e0:	|      move.l d0,-(sp)
    f1e2:	|      jsr 13a72 <deleteVarFromStack>
    f1e8:	|      lea 12(sp),sp
    f1ec:	|      move.l d0,d1
    f1ee:	|      moveq #28,d0
    f1f0:	|      add.l 12(sp),d0
    f1f4:	|      move.l d1,-(sp)
    f1f6:	|      pea 1 <_start+0x1>
    f1fa:	|      move.l d0,-(sp)
    f1fc:	|      jsr 14788 <setVariable>
    f202:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f206:	|      movea.l 12(sp),a0
    f20a:	|      movea.l 24(a0),a0
    f20e:	|      movea.l 8(a0),a0
    f212:	|      movea.l 4(a0),a0
    f216:	|      move.l (a0),d0
    f218:	|      movea.l 12(sp),a0
    f21c:	|      movea.l 24(a0),a0
    f220:	|      movea.l 8(a0),a0
    f224:	|      movea.l 4(a0),a2
    f228:	|      move.l d0,-(sp)
    f22a:	|      jsr 147d2 <stackFindLast>
    f230:	|      addq.l #4,sp
    f232:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f236:	|      moveq #24,d0
    f238:	|      add.l 12(sp),d0
    f23c:	|      move.l d0,-(sp)
    f23e:	|      jsr 1481a <trimStack>
    f244:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f246:	|      moveq #24,d0
    f248:	|      add.l 12(sp),d0
    f24c:	|      move.l d0,-(sp)
    f24e:	|      jsr 1481a <trimStack>
    f254:	|      addq.l #4,sp
	return BR_CONTINUE;
    f256:	|      moveq #2,d0
}
    f258:	\----> movea.l (sp)+,a2
    f25a:	       rts

0000f25c <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f25c:	       movea.l 8(sp),a0
    f260:	       movea.l 24(a0),a0
    f264:	       move.l (a0),d0
    f266:	       moveq #6,d1
    f268:	       cmp.l d0,d1
    f26a:	   /-- beq.s f27e <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f26c:	   |   pea 18f0b <line.c.05397aaf+0xa3>
    f272:	   |   jsr 16894 <KPrintF>
    f278:	   |   addq.l #4,sp
		return BR_ERROR;
    f27a:	   |   moveq #1,d0
    f27c:	/--|-- bra.s f2e8 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f27e:	|  \-> movea.l 8(sp),a0
    f282:	|      movea.l 24(a0),a0
    f286:	|      movea.l 4(a0),a0
    f28a:	|      move.l (a0),d0
    f28c:	|  /-- bne.s f2a0 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    f28e:	|  |   pea 18f3c <line.c.05397aaf+0xd4>
    f294:	|  |   jsr 16894 <KPrintF>
    f29a:	|  |   addq.l #4,sp
		return BR_ERROR;
    f29c:	|  |   moveq #1,d0
    f29e:	+--|-- bra.s f2e8 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    f2a0:	|  \-> moveq #28,d0
    f2a2:	|      add.l 8(sp),d0
    f2a6:	|      movea.l 8(sp),a0
    f2aa:	|      movea.l 24(a0),a0
    f2ae:	|      movea.l 4(a0),a0
    f2b2:	|      move.l (a0),d1
    f2b4:	|      move.l d0,-(sp)
    f2b6:	|      move.l d1,-(sp)
    f2b8:	|      jsr 14350 <copyVariable>
    f2be:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    f2c0:	|      movea.l 8(sp),a0
    f2c4:	|      movea.l 24(a0),a0
    f2c8:	|      move.l 4(a0),d0
    f2cc:	|      move.l d0,-(sp)
    f2ce:	|      jsr 1481a <trimStack>
    f2d4:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f2d6:	|      moveq #24,d0
    f2d8:	|      add.l 8(sp),d0
    f2dc:	|      move.l d0,-(sp)
    f2de:	|      jsr 1481a <trimStack>
    f2e4:	|      addq.l #4,sp
	return BR_CONTINUE;
    f2e6:	|      moveq #2,d0
}
    f2e8:	\----> rts

0000f2ea <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f2ea:	       movea.l 8(sp),a0
    f2ee:	       movea.l 24(a0),a0
    f2f2:	       move.l (a0),d0
    f2f4:	       moveq #6,d1
    f2f6:	       cmp.l d0,d1
    f2f8:	   /-- beq.s f30c <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    f2fa:	   |   pea 18f0b <line.c.05397aaf+0xa3>
    f300:	   |   jsr 16894 <KPrintF>
    f306:	   |   addq.l #4,sp
		return BR_ERROR;
    f308:	   |   moveq #1,d0
    f30a:	/--|-- bra.s f360 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f30c:	|  \-> movea.l 8(sp),a0
    f310:	|      movea.l 24(a0),a0
    f314:	|      movea.l 4(a0),a0
    f318:	|      move.l (a0),d0
    f31a:	|  /-- bne.s f32e <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    f31c:	|  |   pea 18f3c <line.c.05397aaf+0xd4>
    f322:	|  |   jsr 16894 <KPrintF>
    f328:	|  |   addq.l #4,sp
		return BR_ERROR;
    f32a:	|  |   moveq #1,d0
    f32c:	+--|-- bra.s f360 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    f32e:	|  \-> moveq #28,d0
    f330:	|      add.l 8(sp),d0
    f334:	|      movea.l 8(sp),a0
    f338:	|      movea.l 24(a0),a0
    f33c:	|      movea.l 4(a0),a0
    f340:	|      move.l (a0),d1
    f342:	|      move.l d0,-(sp)
    f344:	|      move.l d1,-(sp)
    f346:	|      jsr 14350 <copyVariable>
    f34c:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    f34e:	|      moveq #24,d0
    f350:	|      add.l 8(sp),d0
    f354:	|      move.l d0,-(sp)
    f356:	|      jsr 1481a <trimStack>
    f35c:	|      addq.l #4,sp
	return BR_CONTINUE;
    f35e:	|      moveq #2,d0
}
    f360:	\----> rts

0000f362 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f362:	       movea.l 8(sp),a0
    f366:	       movea.l 24(a0),a0
    f36a:	       move.l (a0),d0
    f36c:	       moveq #6,d1
    f36e:	       cmp.l d0,d1
    f370:	   /-- beq.s f384 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    f372:	   |   pea 18f0b <line.c.05397aaf+0xa3>
    f378:	   |   jsr 16894 <KPrintF>
    f37e:	   |   addq.l #4,sp
		return BR_ERROR;
    f380:	   |   moveq #1,d0
    f382:	/--|-- bra.s f3da <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f384:	|  \-> movea.l 8(sp),a0
    f388:	|      movea.l 24(a0),a0
    f38c:	|      movea.l 4(a0),a0
    f390:	|      move.l (a0),d0
    f392:	|  /-- bne.s f3a6 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    f394:	|  |   pea 18f3c <line.c.05397aaf+0xd4>
    f39a:	|  |   jsr 16894 <KPrintF>
    f3a0:	|  |   addq.l #4,sp
		return BR_ERROR;
    f3a2:	|  |   moveq #1,d0
    f3a4:	+--|-- bra.s f3da <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    f3a6:	|  \-> moveq #28,d0
    f3a8:	|      add.l 8(sp),d0
    f3ac:	|      movea.l 8(sp),a0
    f3b0:	|      movea.l 24(a0),a0
    f3b4:	|      movea.l 4(a0),a0
    f3b8:	|      move.l 4(a0),d1
    f3bc:	|      move.l d0,-(sp)
    f3be:	|      move.l d1,-(sp)
    f3c0:	|      jsr 14350 <copyVariable>
    f3c6:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    f3c8:	|      moveq #24,d0
    f3ca:	|      add.l 8(sp),d0
    f3ce:	|      move.l d0,-(sp)
    f3d0:	|      jsr 1481a <trimStack>
    f3d6:	|      addq.l #4,sp
	return BR_CONTINUE;
    f3d8:	|      moveq #2,d0
}
    f3da:	\----> rts

0000f3dc <builtIn_random>:

builtIn(random)
{
    f3dc:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    f3de:	       movea.l 12(sp),a0
    f3e2:	       move.l 24(a0),d0
    f3e6:	       move.l d0,-(sp)
    f3e8:	       pea 1 <_start+0x1>
    f3ec:	       move.l sp,d0
    f3ee:	       addq.l #8,d0
    f3f0:	       move.l d0,-(sp)
    f3f2:	       jsr 13e96 <getValueType>
    f3f8:	       lea 12(sp),sp
    f3fc:	       tst.w d0
    f3fe:	   /-- bne.s f404 <builtIn_random+0x28>
		return BR_ERROR;
    f400:	   |   moveq #1,d0
    f402:	/--|-- bra.s f44e <builtIn_random+0x72>

	trimStack (&fun -> stack);
    f404:	|  \-> moveq #24,d0
    f406:	|      add.l 12(sp),d0
    f40a:	|      move.l d0,-(sp)
    f40c:	|      jsr 1481a <trimStack>
    f412:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    f414:	|      move.l (sp),d0
    f416:	|  /-- bgt.s f41c <builtIn_random+0x40>
    f418:	|  |   moveq #1,d0
    f41a:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    f41c:	|  \-> jsr 15494 <rand>
    f422:	|      move.l d0,d1
    f424:	|      move.l (sp),d0
    f426:	|      move.l d0,-(sp)
    f428:	|      move.l d1,-(sp)
    f42a:	|      jsr 1732c <__umodsi3>
    f430:	|      addq.l #8,sp
    f432:	|      move.l d0,d1
    f434:	|      moveq #28,d0
    f436:	|      add.l 12(sp),d0
    f43a:	|      move.l d1,-(sp)
    f43c:	|      pea 1 <_start+0x1>
    f440:	|      move.l d0,-(sp)
    f442:	|      jsr 14788 <setVariable>
    f448:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f44c:	|      moveq #2,d0
}
    f44e:	\----> addq.l #4,sp
    f450:	       rts

0000f452 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    f452:	nop
    f454:	rts

0000f456 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    f456:	moveq #2,d0
}
    f458:	rts

0000f45a <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    f45a:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    f45c:	       movea.l 12(sp),a0
    f460:	       move.l 24(a0),d0
    f464:	       move.l d0,-(sp)
    f466:	       pea 1 <_start+0x1>
    f46a:	       move.l sp,d0
    f46c:	       addq.l #8,d0
    f46e:	       move.l d0,-(sp)
    f470:	       jsr 13e96 <getValueType>
    f476:	       lea 12(sp),sp
    f47a:	       tst.w d0
    f47c:	   /-- bne.s f490 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    f47e:	   |   pea 18f4f <line.c.05397aaf+0xe7>
    f484:	   |   jsr 16894 <KPrintF>
    f48a:	   |   addq.l #4,sp
		return BR_ERROR;
    f48c:	   |   moveq #1,d0
    f48e:	/--|-- bra.s f4d0 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    f490:	|  \-> moveq #24,d0
    f492:	|      add.l 12(sp),d0
    f496:	|      move.l d0,-(sp)
    f498:	|      jsr 1481a <trimStack>
    f49e:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    f4a0:	|      move.l (sp),d0
    f4a2:	|      move.l d0,d0
    f4a4:	|      move.w d0,1a6be <textPaletteIndex>

	if( textPaletteIndex > 31) {
    f4aa:	|      move.w 1a6be <textPaletteIndex>,d0
    f4b0:	|      cmpi.w #31,d0
    f4b4:	|  /-- bls.s f4ce <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    f4b6:	|  |   pea 18f76 <line.c.05397aaf+0x10e>
    f4bc:	|  |   jsr 16894 <KPrintF>
    f4c2:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    f4c4:	|  |   clr.w 1a6be <textPaletteIndex>
		return BR_ERROR;
    f4ca:	|  |   moveq #1,d0
    f4cc:	+--|-- bra.s f4d0 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    f4ce:	|  \-> moveq #2,d0
}
    f4d0:	\----> addq.l #4,sp
    f4d2:	       rts

0000f4d4 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    f4d4:	moveq #2,d0
}
    f4d6:	rts

0000f4d8 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    f4d8:	moveq #2,d0
}
    f4da:	rts

0000f4dc <builtIn_setFont>:


builtIn(setFont)
{
    f4dc:	       lea -16(sp),sp
    f4e0:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f4e2:	       movea.l 28(sp),a0
    f4e6:	       move.l 24(a0),d0
    f4ea:	       move.l d0,-(sp)
    f4ec:	       pea 1 <_start+0x1>
    f4f0:	       lea 12(sp),a0
    f4f4:	       move.l a0,-(sp)
    f4f6:	       jsr 13e96 <getValueType>
    f4fc:	       lea 12(sp),sp
    f500:	       tst.w d0
    f502:	   /-- bne.s f50a <builtIn_setFont+0x2e>
    f504:	   |   moveq #1,d0
    f506:	/--|-- bra.w f5b8 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    f50a:	|  \-> moveq #24,d0
    f50c:	|      add.l 28(sp),d0
    f510:	|      move.l d0,-(sp)
    f512:	|      jsr 1481a <trimStack>
    f518:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    f51a:	|      movea.l 28(sp),a0
    f51e:	|      move.l 24(a0),d0
    f522:	|      move.l d0,-(sp)
    f524:	|      jsr 1446c <getTextFromAnyVar>
    f52a:	|      addq.l #4,sp
    f52c:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    f530:	|  /-- bne.s f538 <builtIn_setFont+0x5c>
    f532:	|  |   moveq #1,d0
    f534:	+--|-- bra.w f5b8 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    f538:	|  \-> moveq #24,d0
    f53a:	|      add.l 28(sp),d0
    f53e:	|      move.l d0,-(sp)
    f540:	|      jsr 1481a <trimStack>
    f546:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    f548:	|      movea.l 28(sp),a0
    f54c:	|      move.l 24(a0),d0
    f550:	|      move.l d0,-(sp)
    f552:	|      pea 5 <_start+0x5>
    f556:	|      lea 16(sp),a0
    f55a:	|      move.l a0,-(sp)
    f55c:	|      jsr 13e96 <getValueType>
    f562:	|      lea 12(sp),sp
    f566:	|      tst.w d0
    f568:	|  /-- bne.s f56e <builtIn_setFont+0x92>
    f56a:	|  |   moveq #1,d0
    f56c:	+--|-- bra.s f5b8 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    f56e:	|  \-> moveq #24,d0
    f570:	|      add.l 28(sp),d0
    f574:	|      move.l d0,-(sp)
    f576:	|      jsr 1481a <trimStack>
    f57c:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    f57e:	|      move.l 4(sp),d1
    f582:	|      move.l 8(sp),d0
    f586:	|      move.l d1,-(sp)
    f588:	|      move.l 20(sp),-(sp)
    f58c:	|      move.l d0,-(sp)
    f58e:	|      jsr 14c78 <loadFont>
    f594:	|      lea 12(sp),sp
    f598:	|      tst.w d0
    f59a:	|  /-- bne.s f5a0 <builtIn_setFont+0xc4>
    f59c:	|  |   moveq #1,d0
    f59e:	+--|-- bra.s f5b8 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    f5a0:	|  \-> move.l 16(sp),12(sp)
    f5a6:	|      move.l 1a7a4 <SysBase>,d0
    f5ac:	|      movea.l d0,a6
    f5ae:	|      movea.l 12(sp),a1
    f5b2:	|      jsr -690(a6)

    return BR_CONTINUE;
    f5b6:	|      moveq #2,d0
}
    f5b8:	\----> movea.l (sp)+,a6
    f5ba:	       lea 16(sp),sp
    f5be:	       rts

0000f5c0 <builtIn_inFont>:

builtIn(inFont)
{
    f5c0:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f5c2:	       movea.l 12(sp),a0
    f5c6:	       move.l 24(a0),d0
    f5ca:	       move.l d0,-(sp)
    f5cc:	       jsr 1446c <getTextFromAnyVar>
    f5d2:	       addq.l #4,sp
    f5d4:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    f5d6:	   /-- bne.s f5dc <builtIn_inFont+0x1c>
    f5d8:	   |   moveq #1,d0
    f5da:	/--|-- bra.s f612 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    f5dc:	|  \-> moveq #24,d0
    f5de:	|      add.l 12(sp),d0
    f5e2:	|      move.l d0,-(sp)
    f5e4:	|      jsr 1481a <trimStack>
    f5ea:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    f5ec:	|      move.l (sp),-(sp)
    f5ee:	|      jsr 14c66 <isInFont>
    f5f4:	|      addq.l #4,sp
    f5f6:	|      movea.w d0,a0
    f5f8:	|      moveq #28,d0
    f5fa:	|      add.l 12(sp),d0
    f5fe:	|      move.l a0,-(sp)
    f600:	|      pea 1 <_start+0x1>
    f604:	|      move.l d0,-(sp)
    f606:	|      jsr 14788 <setVariable>
    f60c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f610:	|      moveq #2,d0
}
    f612:	\----> addq.l #4,sp
    f614:	       rts

0000f616 <builtIn_pasteString>:

builtIn(pasteString)
{
    f616:	       lea -16(sp),sp
    f61a:	       move.l a6,-(sp)
    f61c:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    f61e:	       movea.l 32(sp),a0
    f622:	       move.l 24(a0),d0
    f626:	       move.l d0,-(sp)
    f628:	       jsr 1446c <getTextFromAnyVar>
    f62e:	       addq.l #4,sp
    f630:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    f634:	       moveq #24,d0
    f636:	       add.l 32(sp),d0
    f63a:	       move.l d0,-(sp)
    f63c:	       jsr 1481a <trimStack>
    f642:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f644:	       movea.l 32(sp),a0
    f648:	       move.l 24(a0),d0
    f64c:	       move.l d0,-(sp)
    f64e:	       pea 1 <_start+0x1>
    f652:	       lea 20(sp),a0
    f656:	       move.l a0,-(sp)
    f658:	       jsr 13e96 <getValueType>
    f65e:	       lea 12(sp),sp
    f662:	       tst.w d0
    f664:	   /-- bne.s f66c <builtIn_pasteString+0x56>
    f666:	   |   moveq #1,d0
    f668:	/--|-- bra.w f70e <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    f66c:	|  \-> moveq #24,d0
    f66e:	|      add.l 32(sp),d0
    f672:	|      move.l d0,-(sp)
    f674:	|      jsr 1481a <trimStack>
    f67a:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f67c:	|      movea.l 32(sp),a0
    f680:	|      move.l 24(a0),d0
    f684:	|      move.l d0,-(sp)
    f686:	|      pea 1 <_start+0x1>
    f68a:	|      lea 16(sp),a0
    f68e:	|      move.l a0,-(sp)
    f690:	|      jsr 13e96 <getValueType>
    f696:	|      lea 12(sp),sp
    f69a:	|      tst.w d0
    f69c:	|  /-- bne.s f6a2 <builtIn_pasteString+0x8c>
    f69e:	|  |   moveq #1,d0
    f6a0:	+--|-- bra.s f70e <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    f6a2:	|  \-> moveq #24,d0
    f6a4:	|      add.l 32(sp),d0
    f6a8:	|      move.l d0,-(sp)
    f6aa:	|      jsr 1481a <trimStack>
    f6b0:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    f6b2:	|      move.l 8(sp),d0
    f6b6:	|      cmpi.l #65535,d0
    f6bc:	|  /-- bne.s f6dc <builtIn_pasteString+0xc6>
    f6be:	|  |   move.l 1a6f8 <winWidth>,d2
    f6c4:	|  |   move.l 20(sp),-(sp)
    f6c8:	|  |   jsr 14f56 <stringWidth>
    f6ce:	|  |   addq.l #4,sp
    f6d0:	|  |   move.l d2,d1
    f6d2:	|  |   sub.l d0,d1
    f6d4:	|  |   move.l d1,d0
    f6d6:	|  |   lsr.l #1,d0
    f6d8:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    f6dc:	|  \-> move.l 12(sp),d1
    f6e0:	|      move.l 8(sp),d0
    f6e4:	|      move.l d1,-(sp)
    f6e6:	|      move.l d0,-(sp)
    f6e8:	|      move.l 28(sp),-(sp)
    f6ec:	|      jsr 14e78 <pasteStringToBackdrop>
    f6f2:	|      lea 12(sp),sp
    FreeVec(newText); 
    f6f6:	|      move.l 20(sp),16(sp)
    f6fc:	|      move.l 1a7a4 <SysBase>,d0
    f702:	|      movea.l d0,a6
    f704:	|      movea.l 16(sp),a1
    f708:	|      jsr -690(a6)
    return BR_CONTINUE;
    f70c:	|      moveq #2,d0
}
    f70e:	\----> move.l (sp)+,d2
    f710:	       movea.l (sp)+,a6
    f712:	       lea 16(sp),sp
    f716:	       rts

0000f718 <builtIn_anim>:

builtIn(anim)
{
    f718:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    f71c:	       moveq #1,d0
    f71e:	       cmp.l 16(sp),d0
    f722:	   /-- blt.s f738 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    f724:	   |   pea 18fa0 <line.c.05397aaf+0x138>
    f72a:	   |   jsr 16894 <KPrintF>
    f730:	   |   addq.l #4,sp
		return BR_ERROR;
    f732:	   |   moveq #1,d0
    f734:	/--|-- bra.w f7c6 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    f738:	|  \-> moveq #24,d1
    f73a:	|      add.l 20(sp),d1
    f73e:	|      move.l 16(sp),d0
    f742:	|      subq.l #1,d0
    f744:	|      move.l d1,-(sp)
    f746:	|      move.l d0,-(sp)
    f748:	|      jsr 8e4a <createPersonaAnim>
    f74e:	|      addq.l #8,sp
    f750:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f754:	|      movea.l 20(sp),a0
    f758:	|      move.l 24(a0),d0
    f75c:	|      move.l d0,-(sp)
    f75e:	|      pea 5 <_start+0x5>
    f762:	|      lea 8(sp),a0
    f766:	|      move.l a0,-(sp)
    f768:	|      jsr 13e96 <getValueType>
    f76e:	|      lea 12(sp),sp
    f772:	|      tst.w d0
    f774:	|  /-- bne.s f77a <builtIn_anim+0x62>
    f776:	|  |   moveq #1,d0
    f778:	+--|-- bra.s f7c6 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    f77a:	|  \-> moveq #24,d0
    f77c:	|      add.l 20(sp),d0
    f780:	|      move.l d0,-(sp)
    f782:	|      jsr 1481a <trimStack>
    f788:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    f78a:	|      move.l (sp),d0
    f78c:	|      move.l d0,-(sp)
    f78e:	|      jsr 155f6 <loadBankForAnim>
    f794:	|      addq.l #4,sp
    f796:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    f79a:	|  /-- bne.s f7a0 <builtIn_anim+0x88>
    f79c:	|  |   moveq #1,d0
    f79e:	+--|-- bra.s f7c6 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    f7a0:	|  \-> move.l 4(sp),-(sp)
    f7a4:	|      move.l 12(sp),-(sp)
    f7a8:	|      jsr acf4 <setBankFile>
    f7ae:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    f7b0:	|      moveq #28,d0
    f7b2:	|      add.l 20(sp),d0
    f7b6:	|      move.l 8(sp),-(sp)
    f7ba:	|      move.l d0,-(sp)
    f7bc:	|      jsr 14744 <newAnimationVariable>
    f7c2:	|      addq.l #8,sp
	return BR_CONTINUE;
    f7c4:	|      moveq #2,d0
}
    f7c6:	\----> lea 12(sp),sp
    f7ca:	       rts

0000f7cc <builtIn_costume>:

builtIn(costume)
{
    f7cc:	          lea -32(sp),sp
    f7d0:	          move.l a6,-(sp)
    f7d2:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    f7d4:	          moveq #8,d0
    f7d6:	          move.l d0,32(sp)
    f7da:	          clr.l 28(sp)
    f7de:	          move.l 1a7a4 <SysBase>,d0
    f7e4:	          movea.l d0,a6
    f7e6:	          move.l 32(sp),d0
    f7ea:	          move.l 28(sp),d1
    f7ee:	          jsr -684(a6)
    f7f2:	          move.l d0,24(sp)
    f7f6:	          move.l 24(sp),d0
    f7fa:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    f7fe:	      /-- bne.s f806 <builtIn_costume+0x3a>
    f800:	      |   moveq #1,d0
    f802:	/-----|-- bra.w f8ee <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    f806:	|     \-> move.l 44(sp),d0
    f80a:	|         pea 3 <_start+0x3>
    f80e:	|         move.l d0,-(sp)
    f810:	|         jsr 172d0 <__divsi3>
    f816:	|         addq.l #8,sp
    f818:	|         movea.l 20(sp),a0
    f81c:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    f820:	|         tst.l 44(sp)
    f824:	|     /-- beq.s f83a <builtIn_costume+0x6e>
    f826:	|     |   movea.l 20(sp),a0
    f82a:	|     |   move.l 4(a0),d1
    f82e:	|     |   move.l d1,d0
    f830:	|     |   add.l d0,d0
    f832:	|     |   add.l d1,d0
    f834:	|     |   cmp.l 44(sp),d0
    f838:	|  /--|-- beq.s f84e <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    f83a:	|  |  \-> pea 18fda <line.c.05397aaf+0x172>
    f840:	|  |      jsr 16894 <KPrintF>
    f846:	|  |      addq.l #4,sp
        return BR_ERROR;
    f848:	|  |      moveq #1,d0
    f84a:	+--|----- bra.w f8ee <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    f84e:	|  \----> move.l 44(sp),d0
    f852:	|         add.l d0,d0
    f854:	|         add.l d0,d0
    f856:	|         move.l d0,16(sp)
    f85a:	|         clr.l 12(sp)
    f85e:	|         move.l 1a7a4 <SysBase>,d0
    f864:	|         movea.l d0,a6
    f866:	|         move.l 16(sp),d0
    f86a:	|         move.l 12(sp),d1
    f86e:	|         jsr -684(a6)
    f872:	|         move.l d0,8(sp)
    f876:	|         move.l 8(sp),d0
    f87a:	|         movea.l 20(sp),a0
    f87e:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    f880:	|         movea.l 20(sp),a0
    f884:	|         move.l (a0),d0
    f886:	|     /-- bne.s f88c <builtIn_costume+0xc0>
    f888:	|     |   moveq #1,d0
    f88a:	+-----|-- bra.s f8ee <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    f88c:	|     \-> move.l 44(sp),d0
    f890:	|         subq.l #1,d0
    f892:	|         move.l d0,36(sp)
    f896:	|     /-- bra.s f8d2 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    f898:	|  /--|-> movea.l 48(sp),a0
    f89c:	|  |  |   move.l 24(a0),d0
    f8a0:	|  |  |   movea.l 20(sp),a0
    f8a4:	|  |  |   movea.l (a0),a0
    f8a6:	|  |  |   move.l 36(sp),d1
    f8aa:	|  |  |   add.l d1,d1
    f8ac:	|  |  |   add.l d1,d1
    f8ae:	|  |  |   lea (0,a0,d1.l),a2
    f8b2:	|  |  |   move.l d0,-(sp)
    f8b4:	|  |  |   jsr 1436e <getAnimationFromVar>
    f8ba:	|  |  |   addq.l #4,sp
    f8bc:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    f8be:	|  |  |   moveq #24,d0
    f8c0:	|  |  |   add.l 48(sp),d0
    f8c4:	|  |  |   move.l d0,-(sp)
    f8c6:	|  |  |   jsr 1481a <trimStack>
    f8cc:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    f8ce:	|  |  |   subq.l #1,36(sp)
    f8d2:	|  |  \-> tst.l 36(sp)
    f8d6:	|  \----- bge.s f898 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    f8d8:	|         moveq #28,d0
    f8da:	|         add.l 48(sp),d0
    f8de:	|         move.l 20(sp),-(sp)
    f8e2:	|         move.l d0,-(sp)
    f8e4:	|         jsr 14766 <newCostumeVariable>
    f8ea:	|         addq.l #8,sp
    return BR_CONTINUE;
    f8ec:	|         moveq #2,d0
}
    f8ee:	\-------> movea.l (sp)+,a2
    f8f0:	          movea.l (sp)+,a6
    f8f2:	          lea 32(sp),sp
    f8f6:	          rts

0000f8f8 <builtIn_launch>:

builtIn(launch)
{
    f8f8:	          lea -20(sp),sp
    f8fc:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    f8fe:	          movea.l 32(sp),a0
    f902:	          move.l 24(a0),d0
    f906:	          move.l d0,-(sp)
    f908:	          jsr 1446c <getTextFromAnyVar>
    f90e:	          addq.l #4,sp
    f910:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    f914:	      /-- bne.s f91c <builtIn_launch+0x24>
    f916:	      |   moveq #1,d0
    f918:	/-----|-- bra.w fa4a <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    f91c:	|     \-> move.l 20(sp),-(sp)
    f920:	|         jsr 2fe <encodeFilename>
    f926:	|         addq.l #4,sp
    f928:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    f92c:	|         moveq #24,d0
    f92e:	|         add.l 32(sp),d0
    f932:	|         move.l d0,-(sp)
    f934:	|         jsr 1481a <trimStack>
    f93a:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    f93c:	|         movea.l 20(sp),a0
    f940:	|         move.b (a0),d0
    f942:	|         cmpi.b #104,d0
    f946:	|  /----- bne.s f9b0 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    f948:	|  |      movea.l 20(sp),a0
    f94c:	|  |      addq.l #1,a0
    f94e:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    f950:	|  |      cmpi.b #116,d0
    f954:	|  +----- bne.s f9b0 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    f956:	|  |      movea.l 20(sp),a0
    f95a:	|  |      addq.l #2,a0
    f95c:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    f95e:	|  |      cmpi.b #116,d0
    f962:	|  +----- bne.s f9b0 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    f964:	|  |      movea.l 20(sp),a0
    f968:	|  |      addq.l #3,a0
    f96a:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    f96c:	|  |      cmpi.b #112,d0
    f970:	|  +----- bne.s f9b0 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    f972:	|  |      movea.l 20(sp),a0
    f976:	|  |      addq.l #4,a0
    f978:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    f97a:	|  |      cmpi.b #58,d0
    f97e:	|  |  /-- beq.s f99c <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    f980:	|  |  |   movea.l 20(sp),a0
    f984:	|  |  |   addq.l #4,a0
    f986:	|  |  |   move.b (a0),d0
    f988:	|  |  |   cmpi.b #115,d0
    f98c:	|  +--|-- bne.s f9b0 <builtIn_launch+0xb8>
    f98e:	|  |  |   movea.l 20(sp),a0
    f992:	|  |  |   addq.l #5,a0
    f994:	|  |  |   move.b (a0),d0
    f996:	|  |  |   cmpi.b #58,d0
    f99a:	|  +--|-- bne.s f9b0 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    f99c:	|  |  \-> move.l 20(sp),-(sp)
    f9a0:	|  |      jsr b8 <copyString>
    f9a6:	|  |      addq.l #4,sp
    f9a8:	|  |      move.l d0,1a87a <launchMe>
    f9ae:	|  |  /-- bra.s fa02 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    f9b0:	|  \--|-> move.l 1a70c <gamePath>,d0
    f9b6:	|     |   pea 19025 <line.c.05397aaf+0x1bd>
    f9bc:	|     |   move.l d0,-(sp)
    f9be:	|     |   jsr 133c2 <joinStrings>
    f9c4:	|     |   addq.l #8,sp
    f9c6:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    f9ca:	|     |   move.l 16(sp),-(sp)
    f9ce:	|     |   move.l 16(sp),-(sp)
    f9d2:	|     |   jsr 133c2 <joinStrings>
    f9d8:	|     |   addq.l #8,sp
    f9da:	|     |   move.l d0,1a87a <launchMe>
        FreeVec(newText);
    f9e0:	|     |   move.l 16(sp),8(sp)
    f9e6:	|     |   move.l 1a7a4 <SysBase>,d0
    f9ec:	|     |   movea.l d0,a6
    f9ee:	|     |   movea.l 8(sp),a1
    f9f2:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    f9f6:	|     |   move.l 1a87a <launchMe>,d0
    f9fc:	|     +-- bne.s fa02 <builtIn_launch+0x10a>
    f9fe:	|     |   moveq #1,d0
    fa00:	+-----|-- bra.s fa4a <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    fa02:	|     \-> move.l 20(sp),4(sp)
    fa08:	|         move.l 1a7a4 <SysBase>,d0
    fa0e:	|         movea.l d0,a6
    fa10:	|         movea.l 4(sp),a1
    fa14:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    fa18:	|         clr.l -(sp)
    fa1a:	|         jsr 39c0 <setGraphicsWindow>
    fa20:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    fa22:	|         moveq #28,d0
    fa24:	|         add.l 32(sp),d0
    fa28:	|         pea 1 <_start+0x1>
    fa2c:	|         pea 1 <_start+0x1>
    fa30:	|         move.l d0,-(sp)
    fa32:	|         jsr 14788 <setVariable>
    fa38:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    fa3c:	|         moveq #28,d0
    fa3e:	|         add.l 32(sp),d0
    fa42:	|         move.l d0,1a87e <launchResult>

    return BR_KEEP_AND_PAUSE;
    fa48:	|         moveq #0,d0
}
    fa4a:	\-------> movea.l (sp)+,a6
    fa4c:	          lea 20(sp),sp
    fa50:	          rts

0000fa52 <builtIn_pause>:

builtIn(pause)
{
    fa52:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fa54:	       movea.l 12(sp),a0
    fa58:	       move.l 24(a0),d0
    fa5c:	       move.l d0,-(sp)
    fa5e:	       pea 1 <_start+0x1>
    fa62:	       move.l sp,d0
    fa64:	       addq.l #8,d0
    fa66:	       move.l d0,-(sp)
    fa68:	       jsr 13e96 <getValueType>
    fa6e:	       lea 12(sp),sp
    fa72:	       tst.w d0
    fa74:	   /-- bne.s fa7a <builtIn_pause+0x28>
    fa76:	   |   moveq #1,d0
    fa78:	/--|-- bra.s faa8 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    fa7a:	|  \-> moveq #24,d0
    fa7c:	|      add.l 12(sp),d0
    fa80:	|      move.l d0,-(sp)
    fa82:	|      jsr 1481a <trimStack>
    fa88:	|      addq.l #4,sp
	if (theTime > 0) {
    fa8a:	|      move.l (sp),d0
    fa8c:	|  /-- ble.s faa6 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    fa8e:	|  |   move.l (sp),d0
    fa90:	|  |   subq.l #1,d0
    fa92:	|  |   movea.l 12(sp),a0
    fa96:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    fa9a:	|  |   movea.l 12(sp),a0
    fa9e:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    faa2:	|  |   moveq #0,d0
    faa4:	+--|-- bra.s faa8 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    faa6:	|  \-> moveq #2,d0
}
    faa8:	\----> addq.l #4,sp
    faaa:	       rts

0000faac <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    faac:	jsr 4122 <completeTimers>
	return BR_CONTINUE;
    fab2:	moveq #2,d0
}
    fab4:	rts

0000fab6 <builtIn_callEvent>:

builtIn(callEvent)
{
    fab6:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    faba:	       movea.l 20(sp),a0
    fabe:	       move.l 24(a0),d0
    fac2:	       move.l d0,-(sp)
    fac4:	       pea 7 <_start+0x7>
    fac8:	       lea 8(sp),a0
    facc:	       move.l a0,-(sp)
    face:	       jsr 13e96 <getValueType>
    fad4:	       lea 12(sp),sp
    fad8:	       tst.w d0
    fada:	   /-- bne.s fae2 <builtIn_callEvent+0x2c>
    fadc:	   |   moveq #1,d0
    fade:	/--|-- bra.w fb78 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    fae2:	|  \-> moveq #24,d0
    fae4:	|      add.l 20(sp),d0
    fae8:	|      move.l d0,-(sp)
    faea:	|      jsr 1481a <trimStack>
    faf0:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    faf2:	|      movea.l 20(sp),a0
    faf6:	|      move.l 24(a0),d0
    fafa:	|      move.l d0,-(sp)
    fafc:	|      pea 7 <_start+0x7>
    fb00:	|      moveq #12,d0
    fb02:	|      add.l sp,d0
    fb04:	|      move.l d0,-(sp)
    fb06:	|      jsr 13e96 <getValueType>
    fb0c:	|      lea 12(sp),sp
    fb10:	|      tst.w d0
    fb12:	|  /-- bne.s fb18 <builtIn_callEvent+0x62>
    fb14:	|  |   moveq #1,d0
    fb16:	+--|-- bra.s fb78 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    fb18:	|  \-> moveq #24,d0
    fb1a:	|      add.l 20(sp),d0
    fb1e:	|      move.l d0,-(sp)
    fb20:	|      jsr 1481a <trimStack>
    fb26:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    fb28:	|      move.l (sp),d1
    fb2a:	|      move.l 4(sp),d0
    fb2e:	|      move.l d1,-(sp)
    fb30:	|      move.l d0,-(sp)
    fb32:	|      jsr cc34 <getCombinationFunction>
    fb38:	|      addq.l #8,sp
    fb3a:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    fb3e:	|  /-- beq.s fb5e <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    fb40:	|  |   moveq #28,d0
    fb42:	|  |   add.l 20(sp),d0
    fb46:	|  |   move.l 8(sp),-(sp)
    fb4a:	|  |   pea 2 <_start+0x2>
    fb4e:	|  |   move.l d0,-(sp)
    fb50:	|  |   jsr 14788 <setVariable>
    fb56:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    fb5a:	|  |   moveq #4,d0
    fb5c:	+--|-- bra.s fb78 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    fb5e:	|  \-> moveq #28,d0
    fb60:	|      add.l 20(sp),d0
    fb64:	|      clr.l -(sp)
    fb66:	|      pea 1 <_start+0x1>
    fb6a:	|      move.l d0,-(sp)
    fb6c:	|      jsr 14788 <setVariable>
    fb72:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fb76:	|      moveq #2,d0
}
    fb78:	\----> lea 12(sp),sp
    fb7c:	       rts

0000fb7e <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    fb7e:	move.w #1,1a88a <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    fb86:	moveq #2,d0
}
    fb88:	rts

0000fb8a <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    fb8a:	moveq #24,d0
    fb8c:	add.l 8(sp),d0
    fb90:	move.l d0,-(sp)
    fb92:	jsr 1481a <trimStack>
    fb98:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    fb9a:	pea 19027 <line.c.05397aaf+0x1bf>
    fba0:	jsr 16894 <KPrintF>
    fba6:	addq.l #4,sp
	return BR_CONTINUE;
    fba8:	moveq #2,d0
}
    fbaa:	rts

0000fbac <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    fbac:	pea 19027 <line.c.05397aaf+0x1bf>
    fbb2:	jsr 16894 <KPrintF>
    fbb8:	addq.l #4,sp
	return BR_CONTINUE;
    fbba:	moveq #2,d0
}
    fbbc:	rts

0000fbbe <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    fbbe:	pea 19027 <line.c.05397aaf+0x1bf>
    fbc4:	jsr 16894 <KPrintF>
    fbca:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    fbcc:	moveq #2,d0
}
    fbce:	rts

0000fbd0 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    fbd0:	pea 19027 <line.c.05397aaf+0x1bf>
    fbd6:	jsr 16894 <KPrintF>
    fbdc:	addq.l #4,sp
	return BR_CONTINUE;
    fbde:	moveq #2,d0
}
    fbe0:	rts

0000fbe2 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    fbe2:	pea 19027 <line.c.05397aaf+0x1bf>
    fbe8:	jsr 16894 <KPrintF>
    fbee:	addq.l #4,sp
	return BR_CONTINUE;
    fbf0:	moveq #2,d0
}
    fbf2:	rts

0000fbf4 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    fbf4:	pea 19027 <line.c.05397aaf+0x1bf>
    fbfa:	jsr 16894 <KPrintF>
    fc00:	addq.l #4,sp
	return BR_CONTINUE;
    fc02:	moveq #2,d0
}
    fc04:	rts

0000fc06 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    fc06:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fc0a:	       movea.l 20(sp),a0
    fc0e:	       move.l 24(a0),d0
    fc12:	       move.l d0,-(sp)
    fc14:	       pea 1 <_start+0x1>
    fc18:	       moveq #16,d0
    fc1a:	       add.l sp,d0
    fc1c:	       move.l d0,-(sp)
    fc1e:	       jsr 13e96 <getValueType>
    fc24:	       lea 12(sp),sp
    fc28:	       tst.w d0
    fc2a:	   /-- bne.s fc32 <builtIn_startMusic+0x2c>
    fc2c:	   |   moveq #1,d0
    fc2e:	/--|-- bra.w fcd2 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    fc32:	|  \-> moveq #24,d0
    fc34:	|      add.l 20(sp),d0
    fc38:	|      move.l d0,-(sp)
    fc3a:	|      jsr 1481a <trimStack>
    fc40:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fc42:	|      movea.l 20(sp),a0
    fc46:	|      move.l 24(a0),d0
    fc4a:	|      move.l d0,-(sp)
    fc4c:	|      pea 1 <_start+0x1>
    fc50:	|      moveq #12,d0
    fc52:	|      add.l sp,d0
    fc54:	|      move.l d0,-(sp)
    fc56:	|      jsr 13e96 <getValueType>
    fc5c:	|      lea 12(sp),sp
    fc60:	|      tst.w d0
    fc62:	|  /-- bne.s fc68 <builtIn_startMusic+0x62>
    fc64:	|  |   moveq #1,d0
    fc66:	+--|-- bra.s fcd2 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    fc68:	|  \-> moveq #24,d0
    fc6a:	|      add.l 20(sp),d0
    fc6e:	|      move.l d0,-(sp)
    fc70:	|      jsr 1481a <trimStack>
    fc76:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fc78:	|      movea.l 20(sp),a0
    fc7c:	|      move.l 24(a0),d0
    fc80:	|      move.l d0,-(sp)
    fc82:	|      pea 5 <_start+0x5>
    fc86:	|      lea 8(sp),a0
    fc8a:	|      move.l a0,-(sp)
    fc8c:	|      jsr 13e96 <getValueType>
    fc92:	|      lea 12(sp),sp
    fc96:	|      tst.w d0
    fc98:	|  /-- bne.s fc9e <builtIn_startMusic+0x98>
    fc9a:	|  |   moveq #1,d0
    fc9c:	+--|-- bra.s fcd2 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    fc9e:	|  \-> moveq #24,d0
    fca0:	|      add.l 20(sp),d0
    fca4:	|      move.l d0,-(sp)
    fca6:	|      jsr 1481a <trimStack>
    fcac:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    fcae:	|      movea.l 8(sp),a0
    fcb2:	|      move.l 4(sp),d1
    fcb6:	|      move.l (sp),d0
    fcb8:	|      move.l a0,-(sp)
    fcba:	|      move.l d1,-(sp)
    fcbc:	|      move.l d0,-(sp)
    fcbe:	|      jsr c840 <playMOD>
    fcc4:	|      lea 12(sp),sp
    fcc8:	|      tst.w d0
    fcca:	|  /-- bne.s fcd0 <builtIn_startMusic+0xca>
    fccc:	|  |   moveq #2,d0
    fcce:	+--|-- bra.s fcd2 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    fcd0:	|  \-> moveq #2,d0
}
    fcd2:	\----> lea 12(sp),sp
    fcd6:	       rts

0000fcd8 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    fcd8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fcda:	       movea.l 12(sp),a0
    fcde:	       move.l 24(a0),d0
    fce2:	       move.l d0,-(sp)
    fce4:	       pea 1 <_start+0x1>
    fce8:	       move.l sp,d0
    fcea:	       addq.l #8,d0
    fcec:	       move.l d0,-(sp)
    fcee:	       jsr 13e96 <getValueType>
    fcf4:	       lea 12(sp),sp
    fcf8:	       tst.w d0
    fcfa:	   /-- bne.s fd00 <builtIn_stopMusic+0x28>
    fcfc:	   |   moveq #1,d0
    fcfe:	/--|-- bra.s fd1e <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    fd00:	|  \-> moveq #24,d0
    fd02:	|      add.l 12(sp),d0
    fd06:	|      move.l d0,-(sp)
    fd08:	|      jsr 1481a <trimStack>
    fd0e:	|      addq.l #4,sp
	stopMOD (v);
    fd10:	|      move.l (sp),d0
    fd12:	|      move.l d0,-(sp)
    fd14:	|      jsr c8dc <stopMOD>
    fd1a:	|      addq.l #4,sp
	return BR_CONTINUE;
    fd1c:	|      moveq #2,d0
}
    fd1e:	\----> addq.l #4,sp
    fd20:	       rts

0000fd22 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    fd22:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fd24:	       movea.l 16(sp),a0
    fd28:	       move.l 24(a0),d0
    fd2c:	       move.l d0,-(sp)
    fd2e:	       pea 1 <_start+0x1>
    fd32:	       move.l sp,d0
    fd34:	       addq.l #8,d0
    fd36:	       move.l d0,-(sp)
    fd38:	       jsr 13e96 <getValueType>
    fd3e:	       lea 12(sp),sp
    fd42:	       tst.w d0
    fd44:	   /-- bne.s fd4a <builtIn_setMusicVolume+0x28>
    fd46:	   |   moveq #1,d0
    fd48:	/--|-- bra.s fda4 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    fd4a:	|  \-> moveq #24,d0
    fd4c:	|      add.l 16(sp),d0
    fd50:	|      move.l d0,-(sp)
    fd52:	|      jsr 1481a <trimStack>
    fd58:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fd5a:	|      movea.l 16(sp),a0
    fd5e:	|      move.l 24(a0),d0
    fd62:	|      move.l d0,-(sp)
    fd64:	|      pea 1 <_start+0x1>
    fd68:	|      moveq #12,d0
    fd6a:	|      add.l sp,d0
    fd6c:	|      move.l d0,-(sp)
    fd6e:	|      jsr 13e96 <getValueType>
    fd74:	|      lea 12(sp),sp
    fd78:	|      tst.w d0
    fd7a:	|  /-- bne.s fd80 <builtIn_setMusicVolume+0x5e>
    fd7c:	|  |   moveq #1,d0
    fd7e:	+--|-- bra.s fda4 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    fd80:	|  \-> moveq #24,d0
    fd82:	|      add.l 16(sp),d0
    fd86:	|      move.l d0,-(sp)
    fd88:	|      jsr 1481a <trimStack>
    fd8e:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    fd90:	|      move.l (sp),d1
    fd92:	|      move.l 4(sp),d0
    fd96:	|      move.l d1,-(sp)
    fd98:	|      move.l d0,-(sp)
    fd9a:	|      jsr c8c2 <setMusicVolume>
    fda0:	|      addq.l #8,sp
	return BR_CONTINUE;
    fda2:	|      moveq #2,d0
}
    fda4:	\----> addq.l #8,sp
    fda6:	       rts

0000fda8 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    fda8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fdaa:	       movea.l 12(sp),a0
    fdae:	       move.l 24(a0),d0
    fdb2:	       move.l d0,-(sp)
    fdb4:	       pea 1 <_start+0x1>
    fdb8:	       move.l sp,d0
    fdba:	       addq.l #8,d0
    fdbc:	       move.l d0,-(sp)
    fdbe:	       jsr 13e96 <getValueType>
    fdc4:	       lea 12(sp),sp
    fdc8:	       tst.w d0
    fdca:	   /-- bne.s fdd0 <builtIn_setDefaultMusicVolume+0x28>
    fdcc:	   |   moveq #1,d0
    fdce:	/--|-- bra.s fdee <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    fdd0:	|  \-> moveq #24,d0
    fdd2:	|      add.l 12(sp),d0
    fdd6:	|      move.l d0,-(sp)
    fdd8:	|      jsr 1481a <trimStack>
    fdde:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    fde0:	|      move.l (sp),d0
    fde2:	|      move.l d0,-(sp)
    fde4:	|      jsr c8a6 <setDefaultMusicVolume>
    fdea:	|      addq.l #4,sp
	return BR_CONTINUE;
    fdec:	|      moveq #2,d0
}
    fdee:	\----> addq.l #4,sp
    fdf0:	       rts

0000fdf2 <builtIn_playSound>:

builtIn(playSound)
{
    fdf2:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fdf4:	       movea.l 12(sp),a0
    fdf8:	       move.l 24(a0),d0
    fdfc:	       move.l d0,-(sp)
    fdfe:	       pea 5 <_start+0x5>
    fe02:	       move.l sp,d0
    fe04:	       addq.l #8,d0
    fe06:	       move.l d0,-(sp)
    fe08:	       jsr 13e96 <getValueType>
    fe0e:	       lea 12(sp),sp
    fe12:	       tst.w d0
    fe14:	   /-- bne.s fe1a <builtIn_playSound+0x28>
    fe16:	   |   moveq #1,d0
    fe18:	/--|-- bra.s fe42 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    fe1a:	|  \-> moveq #24,d0
    fe1c:	|      add.l 12(sp),d0
    fe20:	|      move.l d0,-(sp)
    fe22:	|      jsr 1481a <trimStack>
    fe28:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    fe2a:	|      move.l (sp),d0
    fe2c:	|      clr.l -(sp)
    fe2e:	|      move.l d0,-(sp)
    fe30:	|      jsr c8ca <startSound>
    fe36:	|      addq.l #8,sp
    fe38:	|      tst.w d0
    fe3a:	|  /-- bne.s fe40 <builtIn_playSound+0x4e>
    fe3c:	|  |   moveq #2,d0
    fe3e:	+--|-- bra.s fe42 <builtIn_playSound+0x50>
	return BR_CONTINUE;
    fe40:	|  \-> moveq #2,d0
}
    fe42:	\----> addq.l #4,sp
    fe44:	       rts

0000fe46 <builtIn_loopSound>:

builtIn(loopSound)
{
    fe46:	             lea -28(sp),sp
    fe4a:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    fe4c:	             tst.l 36(sp)
    fe50:	         /-- bgt.s fe66 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    fe52:	         |   pea 1904a <line.c.05397aaf+0x1e2>
    fe58:	         |   jsr 16894 <KPrintF>
    fe5e:	         |   addq.l #4,sp
		return BR_ERROR;
    fe60:	         |   moveq #1,d0
    fe62:	/--------|-- bra.w 10022 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    fe66:	|        \-> moveq #1,d0
    fe68:	|            cmp.l 36(sp),d0
    fe6c:	|     /----- blt.s fec8 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fe6e:	|     |      movea.l 40(sp),a0
    fe72:	|     |      move.l 24(a0),d0
    fe76:	|     |      move.l d0,-(sp)
    fe78:	|     |      pea 5 <_start+0x5>
    fe7c:	|     |      lea 16(sp),a0
    fe80:	|     |      move.l a0,-(sp)
    fe82:	|     |      jsr 13e96 <getValueType>
    fe88:	|     |      lea 12(sp),sp
    fe8c:	|     |      tst.w d0
    fe8e:	|     |  /-- bne.s fe96 <builtIn_loopSound+0x50>
    fe90:	|     |  |   moveq #1,d0
    fe92:	+-----|--|-- bra.w 10022 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    fe96:	|     |  \-> moveq #24,d0
    fe98:	|     |      add.l 40(sp),d0
    fe9c:	|     |      move.l d0,-(sp)
    fe9e:	|     |      jsr 1481a <trimStack>
    fea4:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    fea6:	|     |      move.l 8(sp),d0
    feaa:	|     |      pea 1 <_start+0x1>
    feae:	|     |      move.l d0,-(sp)
    feb0:	|     |      jsr c8ca <startSound>
    feb6:	|     |      addq.l #8,sp
    feb8:	|     |      tst.w d0
    feba:	|     |  /-- bne.s fec2 <builtIn_loopSound+0x7c>
    febc:	|     |  |   moveq #2,d0
    febe:	+-----|--|-- bra.w 10022 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    fec2:	|     |  \-> moveq #2,d0
    fec4:	+-----|----- bra.w 10022 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    fec8:	|     \----> moveq #2,d1
    feca:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    fece:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    fed2:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    fed6:	|            movea.l 40(sp),a0
    feda:	|            movea.l 24(a0),a0
    fede:	|            move.l (a0),d0
    fee0:	|            moveq #5,d1
    fee2:	|            cmp.l d0,d1
    fee4:	|  /-------- beq.w ffbc <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    fee8:	|  |         movea.l 40(sp),a0
    feec:	|  |         move.l 24(a0),d0
    fef0:	|  |         move.l d0,-(sp)
    fef2:	|  |         pea 1 <_start+0x1>
    fef6:	|  |         lea 12(sp),a0
    fefa:	|  |         move.l a0,-(sp)
    fefc:	|  |         jsr 13e96 <getValueType>
    ff02:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    ff06:	|  |         moveq #24,d0
    ff08:	|  |         add.l 40(sp),d0
    ff0c:	|  |         move.l d0,-(sp)
    ff0e:	|  |         jsr 1481a <trimStack>
    ff14:	|  |         addq.l #4,sp
			numParams--;
    ff16:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    ff1a:	|  +-------- bra.w ffbc <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    ff1e:	|  |  /----> movea.l 40(sp),a0
    ff22:	|  |  |      move.l 24(a0),d0
    ff26:	|  |  |      move.l d0,-(sp)
    ff28:	|  |  |      pea 5 <_start+0x5>
    ff2c:	|  |  |      lea 16(sp),a0
    ff30:	|  |  |      move.l a0,-(sp)
    ff32:	|  |  |      jsr 13e96 <getValueType>
    ff38:	|  |  |      lea 12(sp),sp
    ff3c:	|  |  |      tst.w d0
    ff3e:	|  |  |  /-- bne.s ff54 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    ff40:	|  |  |  |   pea 19088 <line.c.05397aaf+0x220>
    ff46:	|  |  |  |   jsr 16894 <KPrintF>
    ff4c:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    ff4e:	|  |  |  |   moveq #1,d0
    ff50:	+--|--|--|-- bra.w 10022 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    ff54:	|  |  |  \-> moveq #20,d0
    ff56:	|  |  |      move.l d0,20(sp)
    ff5a:	|  |  |      clr.l 16(sp)
    ff5e:	|  |  |      move.l 1a7a4 <SysBase>,d0
    ff64:	|  |  |      movea.l d0,a6
    ff66:	|  |  |      move.l 20(sp),d0
    ff6a:	|  |  |      move.l 16(sp),d1
    ff6e:	|  |  |      jsr -684(a6)
    ff72:	|  |  |      move.l d0,12(sp)
    ff76:	|  |  |      move.l 12(sp),d0
    ff7a:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    ff7e:	|  |  |  /-- bne.s ff86 <builtIn_loopSound+0x140>
    ff80:	|  |  |  |   moveq #1,d0
    ff82:	+--|--|--|-- bra.w 10022 <builtIn_loopSound+0x1dc>

			s->next = old;
    ff86:	|  |  |  \-> movea.l 28(sp),a0
    ff8a:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    ff90:	|  |  |      movea.l 28(sp),a0
    ff94:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    ff98:	|  |  |      move.l 8(sp),d0
    ff9c:	|  |  |      movea.l 28(sp),a0
    ffa0:	|  |  |      move.l d0,(a0)
			old = s;
    ffa2:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    ffa8:	|  |  |      moveq #24,d0
    ffaa:	|  |  |      add.l 40(sp),d0
    ffae:	|  |  |      move.l d0,-(sp)
    ffb0:	|  |  |      jsr 1481a <trimStack>
    ffb6:	|  |  |      addq.l #4,sp
			numParams--;
    ffb8:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    ffbc:	|  \--|----> tst.l 36(sp)
    ffc0:	|     \----- bne.w ff1e <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    ffc4:	|        /-- bra.s ffd0 <builtIn_loopSound+0x18a>
    ffc6:	|     /--|-> movea.l 28(sp),a0
    ffca:	|     |  |   move.l 4(a0),28(sp)
    ffd0:	|     |  \-> movea.l 28(sp),a0
    ffd4:	|     |      move.l 4(a0),d0
    ffd8:	|     \----- bne.s ffc6 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    ffda:	|            move.l 4(sp),d0
    ffde:	|            moveq #1,d1
    ffe0:	|            cmp.l d0,d1
    ffe2:	|     /----- bge.s fffa <builtIn_loopSound+0x1b4>
			s->next = old;
    ffe4:	|     |      movea.l 28(sp),a0
    ffe8:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    ffee:	|     |      movea.l 24(sp),a0
    fff2:	|     |      move.l 28(sp),8(a0)
    fff8:	|     |  /-- bra.s 1000a <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    fffa:	|     \--|-> move.l 4(sp),d0
    fffe:	|        +-- beq.s 1000a <builtIn_loopSound+0x1c4>
			s->next = s;
   10000:	|        |   movea.l 28(sp),a0
   10004:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   1000a:	|        \-> movea.l 24(sp),a0
   1000e:	|            moveq #-1,d0
   10010:	|            move.l d0,16(a0)
		playSoundList(old);
   10014:	|            move.l 24(sp),-(sp)
   10018:	|            jsr c844 <playSoundList>
   1001e:	|            addq.l #4,sp
		return BR_CONTINUE;
   10020:	|            moveq #2,d0
	}
}
   10022:	\----------> movea.l (sp)+,a6
   10024:	             lea 28(sp),sp
   10028:	             rts

0001002a <builtIn_stopSound>:

builtIn(stopSound)
{
   1002a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1002c:	       movea.l 12(sp),a0
   10030:	       move.l 24(a0),d0
   10034:	       move.l d0,-(sp)
   10036:	       pea 5 <_start+0x5>
   1003a:	       move.l sp,d0
   1003c:	       addq.l #8,d0
   1003e:	       move.l d0,-(sp)
   10040:	       jsr 13e96 <getValueType>
   10046:	       lea 12(sp),sp
   1004a:	       tst.w d0
   1004c:	   /-- bne.s 10052 <builtIn_stopSound+0x28>
   1004e:	   |   moveq #1,d0
   10050:	/--|-- bra.s 10070 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10052:	|  \-> moveq #24,d0
   10054:	|      add.l 12(sp),d0
   10058:	|      move.l d0,-(sp)
   1005a:	|      jsr 1481a <trimStack>
   10060:	|      addq.l #4,sp
	huntKillSound (v);
   10062:	|      move.l (sp),d0
   10064:	|      move.l d0,-(sp)
   10066:	|      jsr c83c <huntKillSound>
   1006c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1006e:	|      moveq #2,d0
}
   10070:	\----> addq.l #4,sp
   10072:	       rts

00010074 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10074:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10076:	       movea.l 12(sp),a0
   1007a:	       move.l 24(a0),d0
   1007e:	       move.l d0,-(sp)
   10080:	       pea 1 <_start+0x1>
   10084:	       move.l sp,d0
   10086:	       addq.l #8,d0
   10088:	       move.l d0,-(sp)
   1008a:	       jsr 13e96 <getValueType>
   10090:	       lea 12(sp),sp
   10094:	       tst.w d0
   10096:	   /-- bne.s 1009c <builtIn_setDefaultSoundVolume+0x28>
   10098:	   |   moveq #1,d0
   1009a:	/--|-- bra.s 100ba <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   1009c:	|  \-> moveq #24,d0
   1009e:	|      add.l 12(sp),d0
   100a2:	|      move.l d0,-(sp)
   100a4:	|      jsr 1481a <trimStack>
   100aa:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   100ac:	|      move.l (sp),d0
   100ae:	|      move.l d0,-(sp)
   100b0:	|      jsr c8b2 <setDefaultSoundVolume>
   100b6:	|      addq.l #4,sp
	return BR_CONTINUE;
   100b8:	|      moveq #2,d0
}
   100ba:	\----> addq.l #4,sp
   100bc:	       rts

000100be <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   100be:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   100c0:	       movea.l 16(sp),a0
   100c4:	       move.l 24(a0),d0
   100c8:	       move.l d0,-(sp)
   100ca:	       pea 1 <_start+0x1>
   100ce:	       move.l sp,d0
   100d0:	       addq.l #8,d0
   100d2:	       move.l d0,-(sp)
   100d4:	       jsr 13e96 <getValueType>
   100da:	       lea 12(sp),sp
   100de:	       tst.w d0
   100e0:	   /-- bne.s 100e6 <builtIn_setSoundVolume+0x28>
   100e2:	   |   moveq #1,d0
   100e4:	/--|-- bra.s 10140 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   100e6:	|  \-> moveq #24,d0
   100e8:	|      add.l 16(sp),d0
   100ec:	|      move.l d0,-(sp)
   100ee:	|      jsr 1481a <trimStack>
   100f4:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   100f6:	|      movea.l 16(sp),a0
   100fa:	|      move.l 24(a0),d0
   100fe:	|      move.l d0,-(sp)
   10100:	|      pea 5 <_start+0x5>
   10104:	|      moveq #12,d0
   10106:	|      add.l sp,d0
   10108:	|      move.l d0,-(sp)
   1010a:	|      jsr 13e96 <getValueType>
   10110:	|      lea 12(sp),sp
   10114:	|      tst.w d0
   10116:	|  /-- bne.s 1011c <builtIn_setSoundVolume+0x5e>
   10118:	|  |   moveq #1,d0
   1011a:	+--|-- bra.s 10140 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   1011c:	|  \-> moveq #24,d0
   1011e:	|      add.l 16(sp),d0
   10122:	|      move.l d0,-(sp)
   10124:	|      jsr 1481a <trimStack>
   1012a:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   1012c:	|      move.l (sp),d1
   1012e:	|      move.l 4(sp),d0
   10132:	|      move.l d1,-(sp)
   10134:	|      move.l d0,-(sp)
   10136:	|      jsr c8c6 <setSoundVolume>
   1013c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1013e:	|      moveq #2,d0
}
   10140:	\----> addq.l #8,sp
   10142:	       rts

00010144 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10144:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10148:	       movea.l 20(sp),a0
   1014c:	       move.l 24(a0),d0
   10150:	       move.l d0,-(sp)
   10152:	       pea 1 <_start+0x1>
   10156:	       moveq #12,d0
   10158:	       add.l sp,d0
   1015a:	       move.l d0,-(sp)
   1015c:	       jsr 13e96 <getValueType>
   10162:	       lea 12(sp),sp
   10166:	       tst.w d0
   10168:	   /-- bne.s 10170 <builtIn_setSoundLoopPoints+0x2c>
   1016a:	   |   moveq #1,d0
   1016c:	/--|-- bra.w 10208 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10170:	|  \-> moveq #24,d0
   10172:	|      add.l 20(sp),d0
   10176:	|      move.l d0,-(sp)
   10178:	|      jsr 1481a <trimStack>
   1017e:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10180:	|      movea.l 20(sp),a0
   10184:	|      move.l 24(a0),d0
   10188:	|      move.l d0,-(sp)
   1018a:	|      pea 1 <_start+0x1>
   1018e:	|      lea 8(sp),a0
   10192:	|      move.l a0,-(sp)
   10194:	|      jsr 13e96 <getValueType>
   1019a:	|      lea 12(sp),sp
   1019e:	|      tst.w d0
   101a0:	|  /-- bne.s 101a6 <builtIn_setSoundLoopPoints+0x62>
   101a2:	|  |   moveq #1,d0
   101a4:	+--|-- bra.s 10208 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   101a6:	|  \-> moveq #24,d0
   101a8:	|      add.l 20(sp),d0
   101ac:	|      move.l d0,-(sp)
   101ae:	|      jsr 1481a <trimStack>
   101b4:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   101b6:	|      movea.l 20(sp),a0
   101ba:	|      move.l 24(a0),d0
   101be:	|      move.l d0,-(sp)
   101c0:	|      pea 5 <_start+0x5>
   101c4:	|      moveq #16,d0
   101c6:	|      add.l sp,d0
   101c8:	|      move.l d0,-(sp)
   101ca:	|      jsr 13e96 <getValueType>
   101d0:	|      lea 12(sp),sp
   101d4:	|      tst.w d0
   101d6:	|  /-- bne.s 101dc <builtIn_setSoundLoopPoints+0x98>
   101d8:	|  |   moveq #1,d0
   101da:	+--|-- bra.s 10208 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   101dc:	|  \-> moveq #24,d0
   101de:	|      add.l 20(sp),d0
   101e2:	|      move.l d0,-(sp)
   101e4:	|      jsr 1481a <trimStack>
   101ea:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   101ec:	|      movea.l 4(sp),a0
   101f0:	|      move.l (sp),d1
   101f2:	|      move.l 8(sp),d0
   101f6:	|      move.l a0,-(sp)
   101f8:	|      move.l d1,-(sp)
   101fa:	|      move.l d0,-(sp)
   101fc:	|      jsr c8be <setSoundLoop>
   10202:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10206:	|      moveq #2,d0
}
   10208:	\----> lea 12(sp),sp
   1020c:	       rts

0001020e <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   1020e:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10210:	          movea.l 12(sp),a0
   10214:	          movea.l 24(a0),a0
   10218:	          move.l (a0),d0
   1021a:	          moveq #5,d1
   1021c:	          cmp.l d0,d1
   1021e:	/-------- bne.s 10262 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10220:	|         movea.l 12(sp),a0
   10224:	|         move.l 24(a0),d0
   10228:	|         move.l d0,-(sp)
   1022a:	|         pea 5 <_start+0x5>
   1022e:	|         move.l sp,d0
   10230:	|         addq.l #8,d0
   10232:	|         move.l d0,-(sp)
   10234:	|         jsr 13e96 <getValueType>
   1023a:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   1023e:	|         moveq #24,d0
   10240:	|         add.l 12(sp),d0
   10244:	|         move.l d0,-(sp)
   10246:	|         jsr 1481a <trimStack>
   1024c:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   1024e:	|         move.l (sp),d0
   10250:	|         move.l d0,-(sp)
   10252:	|         jsr 1603e <setFloor>
   10258:	|         addq.l #4,sp
   1025a:	|         tst.w d0
   1025c:	|  /----- bne.s 10278 <builtIn_setFloor+0x6a>
   1025e:	|  |      moveq #1,d0
   10260:	|  |  /-- bra.s 1027a <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10262:	\--|--|-> moveq #24,d0
   10264:	   |  |   add.l 12(sp),d0
   10268:	   |  |   move.l d0,-(sp)
   1026a:	   |  |   jsr 1481a <trimStack>
   10270:	   |  |   addq.l #4,sp
		setFloorNull ();
   10272:	   |  |   jsr 167b8 <setFloorNull>
	}
	return BR_CONTINUE;
   10278:	   \--|-> moveq #2,d0
}
   1027a:	      \-> addq.l #4,sp
   1027c:	          rts

0001027e <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   1027e:	jsr 158d6 <drawFloor>
	return BR_CONTINUE;
   10284:	moveq #2,d0
}
   10286:	rts

00010288 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10288:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   1028a:	          movea.l 12(sp),a0
   1028e:	          movea.l 24(a0),a0
   10292:	          move.l (a0),d0
   10294:	          moveq #5,d1
   10296:	          cmp.l d0,d1
   10298:	/-------- bne.s 102dc <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   1029a:	|         movea.l 12(sp),a0
   1029e:	|         move.l 24(a0),d0
   102a2:	|         move.l d0,-(sp)
   102a4:	|         pea 5 <_start+0x5>
   102a8:	|         move.l sp,d0
   102aa:	|         addq.l #8,d0
   102ac:	|         move.l d0,-(sp)
   102ae:	|         jsr 13e96 <getValueType>
   102b4:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   102b8:	|         moveq #24,d0
   102ba:	|         add.l 12(sp),d0
   102be:	|         move.l d0,-(sp)
   102c0:	|         jsr 1481a <trimStack>
   102c6:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   102c8:	|         move.l (sp),d0
   102ca:	|         move.l d0,-(sp)
   102cc:	|         jsr 7ff0 <setZBuffer>
   102d2:	|         addq.l #4,sp
   102d4:	|         tst.w d0
   102d6:	|  /----- bne.s 102f2 <builtIn_setZBuffer+0x6a>
   102d8:	|  |      moveq #1,d0
   102da:	|  |  /-- bra.s 102f4 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   102dc:	\--|--|-> moveq #24,d0
   102de:	   |  |   add.l 12(sp),d0
   102e2:	   |  |   move.l d0,-(sp)
   102e4:	   |  |   jsr 1481a <trimStack>
   102ea:	   |  |   addq.l #4,sp
		killZBuffer ();
   102ec:	   |  |   jsr 7fec <killZBuffer>
	}
	return BR_CONTINUE;
   102f2:	   \--|-> moveq #2,d0
}
   102f4:	      \-> addq.l #4,sp
   102f6:	          rts

000102f8 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   102f8:	pea 190bf <line.c.05397aaf+0x257>
   102fe:	jsr 16894 <KPrintF>
   10304:	addq.l #4,sp
	return BR_CONTINUE;
   10306:	moveq #2,d0
}
   10308:	rts

0001030a <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1030a:	          movea.l 8(sp),a0
   1030e:	          move.l 24(a0),d0
   10312:	          move.l d0,-(sp)
   10314:	          pea 1 <_start+0x1>
   10318:	          pea 1a886 <speechMode>
   1031e:	          jsr 13e96 <getValueType>
   10324:	          lea 12(sp),sp
   10328:	          tst.w d0
   1032a:	      /-- bne.s 10330 <builtIn_setSpeechMode+0x26>
   1032c:	      |   moveq #1,d0
   1032e:	/-----|-- bra.s 10368 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10330:	|     \-> moveq #24,d0
   10332:	|         add.l 8(sp),d0
   10336:	|         move.l d0,-(sp)
   10338:	|         jsr 1481a <trimStack>
   1033e:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10340:	|         move.l 1a886 <speechMode>,d0
   10346:	|     /-- bmi.s 10354 <builtIn_setSpeechMode+0x4a>
   10348:	|     |   move.l 1a886 <speechMode>,d0
   1034e:	|     |   moveq #2,d1
   10350:	|     |   cmp.l d0,d1
   10352:	|  /--|-- bge.s 10366 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10354:	|  |  \-> pea 190d8 <graphics.c.1c13408a+0x14>
   1035a:	|  |      jsr 16894 <KPrintF>
   10360:	|  |      addq.l #4,sp
		return BR_ERROR;
   10362:	|  |      moveq #1,d0
   10364:	+--|----- bra.s 10368 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10366:	|  \----> moveq #2,d0
}
   10368:	\-------> rts

0001036a <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   1036a:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   1036c:	       jsr 77f4 <isThereAnySpeechGoingOn>
   10372:	       move.l d0,(sp)
	if (i == -1) {
   10374:	       moveq #-1,d0
   10376:	       cmp.l (sp),d0
   10378:	/----- bne.s 10394 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   1037a:	|      moveq #28,d0
   1037c:	|      add.l 12(sp),d0
   10380:	|      clr.l -(sp)
   10382:	|      pea 1 <_start+0x1>
   10386:	|      move.l d0,-(sp)
   10388:	|      jsr 14788 <setVariable>
   1038e:	|      lea 12(sp),sp
   10392:	|  /-- bra.s 103ac <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10394:	\--|-> moveq #28,d0
   10396:	   |   add.l 12(sp),d0
   1039a:	   |   move.l (sp),-(sp)
   1039c:	   |   pea 7 <_start+0x7>
   103a0:	   |   move.l d0,-(sp)
   103a2:	   |   jsr 14788 <setVariable>
   103a8:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   103ac:	   \-> moveq #2,d0
}
   103ae:	       addq.l #4,sp
   103b0:	       rts

000103b2 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   103b2:	jsr 5adc <killSpeechTimers>
	return BR_CONTINUE;
   103b8:	moveq #2,d0
}
   103ba:	rts

000103bc <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   103bc:	       move.l 1a8cc <overRegion>,d0
   103c2:	/----- beq.s 103ec <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   103c4:	|      movea.l 1a8cc <overRegion>,a0
   103ca:	|      movea.l 28(a0),a0
   103ce:	|      move.l 4(a0),d1
   103d2:	|      moveq #28,d0
   103d4:	|      add.l 8(sp),d0
   103d8:	|      move.l d1,-(sp)
   103da:	|      pea 7 <_start+0x7>
   103de:	|      move.l d0,-(sp)
   103e0:	|      jsr 14788 <setVariable>
   103e6:	|      lea 12(sp),sp
   103ea:	|  /-- bra.s 10404 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   103ec:	\--|-> moveq #28,d0
   103ee:	   |   add.l 8(sp),d0
   103f2:	   |   clr.l -(sp)
   103f4:	   |   pea 1 <_start+0x1>
   103f8:	   |   move.l d0,-(sp)
   103fa:	   |   jsr 14788 <setVariable>
   10400:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10404:	   \-> moveq #2,d0
}
   10406:	       rts

00010408 <builtIn_rename>:

builtIn(rename)
{
   10408:	       lea -16(sp),sp
   1040c:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   1040e:	       movea.l 28(sp),a0
   10412:	       move.l 24(a0),d0
   10416:	       move.l d0,-(sp)
   10418:	       jsr 1446c <getTextFromAnyVar>
   1041e:	       addq.l #4,sp
   10420:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10424:	   /-- bne.s 1042a <builtIn_rename+0x22>
   10426:	   |   moveq #1,d0
   10428:	/--|-- bra.s 104a4 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   1042a:	|  \-> moveq #24,d0
   1042c:	|      add.l 28(sp),d0
   10430:	|      move.l d0,-(sp)
   10432:	|      jsr 1481a <trimStack>
   10438:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   1043a:	|      movea.l 28(sp),a0
   1043e:	|      move.l 24(a0),d0
   10442:	|      move.l d0,-(sp)
   10444:	|      pea 7 <_start+0x7>
   10448:	|      lea 12(sp),a0
   1044c:	|      move.l a0,-(sp)
   1044e:	|      jsr 13e96 <getValueType>
   10454:	|      lea 12(sp),sp
   10458:	|      tst.w d0
   1045a:	|  /-- bne.s 10460 <builtIn_rename+0x58>
   1045c:	|  |   moveq #1,d0
   1045e:	+--|-- bra.s 104a4 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10460:	|  \-> moveq #24,d0
   10462:	|      add.l 28(sp),d0
   10466:	|      move.l d0,-(sp)
   10468:	|      jsr 1481a <trimStack>
   1046e:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10470:	|      move.l 4(sp),d0
   10474:	|      move.l d0,-(sp)
   10476:	|      jsr cc00 <findObjectType>
   1047c:	|      addq.l #4,sp
   1047e:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10482:	|      movea.l 12(sp),a0
   10486:	|      move.l (a0),8(sp)
   1048a:	|      move.l 1a7a4 <SysBase>,d0
   10490:	|      movea.l d0,a6
   10492:	|      movea.l 8(sp),a1
   10496:	|      jsr -690(a6)
	o->screenName = newText;
   1049a:	|      movea.l 12(sp),a0
   1049e:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   104a2:	|      moveq #2,d0
}
   104a4:	\----> movea.l (sp)+,a6
   104a6:	       lea 16(sp),sp
   104aa:	       rts

000104ac <builtIn_getObjectX>:

builtIn (getObjectX)
{
   104ac:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   104b0:	          movea.l 20(sp),a0
   104b4:	          move.l 24(a0),d0
   104b8:	          move.l d0,-(sp)
   104ba:	          pea 7 <_start+0x7>
   104be:	          lea 8(sp),a0
   104c2:	          move.l a0,-(sp)
   104c4:	          jsr 13e96 <getValueType>
   104ca:	          lea 12(sp),sp
   104ce:	          tst.w d0
   104d0:	      /-- bne.s 104d8 <builtIn_getObjectX+0x2c>
   104d2:	      |   moveq #1,d0
   104d4:	/-----|-- bra.w 10574 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   104d8:	|     \-> moveq #24,d0
   104da:	|         add.l 20(sp),d0
   104de:	|         move.l d0,-(sp)
   104e0:	|         jsr 1481a <trimStack>
   104e6:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   104e8:	|         move.l (sp),d0
   104ea:	|         move.l d0,-(sp)
   104ec:	|         jsr 9d8e <findPerson>
   104f2:	|         addq.l #4,sp
   104f4:	|         move.l d0,8(sp)
	if (pers) {
   104f8:	|     /-- beq.s 10526 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   104fa:	|     |   movea.l 8(sp),a0
   104fe:	|     |   move.l (a0),d0
   10500:	|     |   move.l d0,-(sp)
   10502:	|     |   jsr 16c68 <__fixsfsi>
   10508:	|     |   addq.l #4,sp
   1050a:	|     |   move.l d0,d1
   1050c:	|     |   moveq #28,d0
   1050e:	|     |   add.l 20(sp),d0
   10512:	|     |   move.l d1,-(sp)
   10514:	|     |   pea 1 <_start+0x1>
   10518:	|     |   move.l d0,-(sp)
   1051a:	|     |   jsr 14788 <setVariable>
   10520:	|     |   lea 12(sp),sp
   10524:	|  /--|-- bra.s 10572 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10526:	|  |  \-> move.l (sp),d0
   10528:	|  |      move.l d0,-(sp)
   1052a:	|  |      jsr 150b6 <getRegionForObject>
   10530:	|  |      addq.l #4,sp
   10532:	|  |      move.l d0,4(sp)
		if (la) {
   10536:	|  |  /-- beq.s 1055a <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10538:	|  |  |   movea.l 4(sp),a0
   1053c:	|  |  |   move.l 16(a0),d1
   10540:	|  |  |   moveq #28,d0
   10542:	|  |  |   add.l 20(sp),d0
   10546:	|  |  |   move.l d1,-(sp)
   10548:	|  |  |   pea 1 <_start+0x1>
   1054c:	|  |  |   move.l d0,-(sp)
   1054e:	|  |  |   jsr 14788 <setVariable>
   10554:	|  |  |   lea 12(sp),sp
   10558:	|  +--|-- bra.s 10572 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   1055a:	|  |  \-> moveq #28,d0
   1055c:	|  |      add.l 20(sp),d0
   10560:	|  |      clr.l -(sp)
   10562:	|  |      pea 1 <_start+0x1>
   10566:	|  |      move.l d0,-(sp)
   10568:	|  |      jsr 14788 <setVariable>
   1056e:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10572:	|  \----> moveq #2,d0
}
   10574:	\-------> lea 12(sp),sp
   10578:	          rts

0001057a <builtIn_getObjectY>:

builtIn (getObjectY)
{
   1057a:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1057e:	          movea.l 20(sp),a0
   10582:	          move.l 24(a0),d0
   10586:	          move.l d0,-(sp)
   10588:	          pea 7 <_start+0x7>
   1058c:	          lea 8(sp),a0
   10590:	          move.l a0,-(sp)
   10592:	          jsr 13e96 <getValueType>
   10598:	          lea 12(sp),sp
   1059c:	          tst.w d0
   1059e:	      /-- bne.s 105a6 <builtIn_getObjectY+0x2c>
   105a0:	      |   moveq #1,d0
   105a2:	/-----|-- bra.w 10644 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   105a6:	|     \-> moveq #24,d0
   105a8:	|         add.l 20(sp),d0
   105ac:	|         move.l d0,-(sp)
   105ae:	|         jsr 1481a <trimStack>
   105b4:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   105b6:	|         move.l (sp),d0
   105b8:	|         move.l d0,-(sp)
   105ba:	|         jsr 9d8e <findPerson>
   105c0:	|         addq.l #4,sp
   105c2:	|         move.l d0,8(sp)
	if (pers) {
   105c6:	|     /-- beq.s 105f6 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   105c8:	|     |   movea.l 8(sp),a0
   105cc:	|     |   move.l 4(a0),d0
   105d0:	|     |   move.l d0,-(sp)
   105d2:	|     |   jsr 16c68 <__fixsfsi>
   105d8:	|     |   addq.l #4,sp
   105da:	|     |   move.l d0,d1
   105dc:	|     |   moveq #28,d0
   105de:	|     |   add.l 20(sp),d0
   105e2:	|     |   move.l d1,-(sp)
   105e4:	|     |   pea 1 <_start+0x1>
   105e8:	|     |   move.l d0,-(sp)
   105ea:	|     |   jsr 14788 <setVariable>
   105f0:	|     |   lea 12(sp),sp
   105f4:	|  /--|-- bra.s 10642 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   105f6:	|  |  \-> move.l (sp),d0
   105f8:	|  |      move.l d0,-(sp)
   105fa:	|  |      jsr 150b6 <getRegionForObject>
   10600:	|  |      addq.l #4,sp
   10602:	|  |      move.l d0,4(sp)
		if (la) {
   10606:	|  |  /-- beq.s 1062a <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10608:	|  |  |   movea.l 4(sp),a0
   1060c:	|  |  |   move.l 20(a0),d1
   10610:	|  |  |   moveq #28,d0
   10612:	|  |  |   add.l 20(sp),d0
   10616:	|  |  |   move.l d1,-(sp)
   10618:	|  |  |   pea 1 <_start+0x1>
   1061c:	|  |  |   move.l d0,-(sp)
   1061e:	|  |  |   jsr 14788 <setVariable>
   10624:	|  |  |   lea 12(sp),sp
   10628:	|  +--|-- bra.s 10642 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   1062a:	|  |  \-> moveq #28,d0
   1062c:	|  |      add.l 20(sp),d0
   10630:	|  |      clr.l -(sp)
   10632:	|  |      pea 1 <_start+0x1>
   10636:	|  |      move.l d0,-(sp)
   10638:	|  |      jsr 14788 <setVariable>
   1063e:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10642:	|  \----> moveq #2,d0
}
   10644:	\-------> lea 12(sp),sp
   10648:	          rts

0001064a <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   1064a:	       lea -32(sp),sp
   1064e:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10652:	       movea.l 56(sp),a0
   10656:	       move.l 24(a0),d0
   1065a:	       move.l d0,-(sp)
   1065c:	       pea 1 <_start+0x1>
   10660:	       lea 28(sp),a0
   10664:	       move.l a0,-(sp)
   10666:	       jsr 13e96 <getValueType>
   1066c:	       lea 12(sp),sp
   10670:	       tst.w d0
   10672:	   /-- bne.s 1067a <builtIn_addScreenRegion+0x30>
   10674:	   |   moveq #1,d0
   10676:	/--|-- bra.w 10854 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1067a:	|  \-> moveq #24,d0
   1067c:	|      add.l 56(sp),d0
   10680:	|      move.l d0,-(sp)
   10682:	|      jsr 1481a <trimStack>
   10688:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1068a:	|      movea.l 56(sp),a0
   1068e:	|      move.l 24(a0),d0
   10692:	|      move.l d0,-(sp)
   10694:	|      pea 1 <_start+0x1>
   10698:	|      moveq #48,d0
   1069a:	|      add.l sp,d0
   1069c:	|      move.l d0,-(sp)
   1069e:	|      jsr 13e96 <getValueType>
   106a4:	|      lea 12(sp),sp
   106a8:	|      tst.w d0
   106aa:	|  /-- bne.s 106b2 <builtIn_addScreenRegion+0x68>
   106ac:	|  |   moveq #1,d0
   106ae:	+--|-- bra.w 10854 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   106b2:	|  \-> moveq #24,d0
   106b4:	|      add.l 56(sp),d0
   106b8:	|      move.l d0,-(sp)
   106ba:	|      jsr 1481a <trimStack>
   106c0:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106c2:	|      movea.l 56(sp),a0
   106c6:	|      move.l 24(a0),d0
   106ca:	|      move.l d0,-(sp)
   106cc:	|      pea 1 <_start+0x1>
   106d0:	|      moveq #52,d0
   106d2:	|      add.l sp,d0
   106d4:	|      move.l d0,-(sp)
   106d6:	|      jsr 13e96 <getValueType>
   106dc:	|      lea 12(sp),sp
   106e0:	|      tst.w d0
   106e2:	|  /-- bne.s 106ea <builtIn_addScreenRegion+0xa0>
   106e4:	|  |   moveq #1,d0
   106e6:	+--|-- bra.w 10854 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   106ea:	|  \-> moveq #24,d0
   106ec:	|      add.l 56(sp),d0
   106f0:	|      move.l d0,-(sp)
   106f2:	|      jsr 1481a <trimStack>
   106f8:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106fa:	|      movea.l 56(sp),a0
   106fe:	|      move.l 24(a0),d0
   10702:	|      move.l d0,-(sp)
   10704:	|      pea 1 <_start+0x1>
   10708:	|      lea 32(sp),a0
   1070c:	|      move.l a0,-(sp)
   1070e:	|      jsr 13e96 <getValueType>
   10714:	|      lea 12(sp),sp
   10718:	|      tst.w d0
   1071a:	|  /-- bne.s 10722 <builtIn_addScreenRegion+0xd8>
   1071c:	|  |   moveq #1,d0
   1071e:	+--|-- bra.w 10854 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10722:	|  \-> moveq #24,d0
   10724:	|      add.l 56(sp),d0
   10728:	|      move.l d0,-(sp)
   1072a:	|      jsr 1481a <trimStack>
   10730:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10732:	|      movea.l 56(sp),a0
   10736:	|      move.l 24(a0),d0
   1073a:	|      move.l d0,-(sp)
   1073c:	|      pea 1 <_start+0x1>
   10740:	|      lea 36(sp),a0
   10744:	|      move.l a0,-(sp)
   10746:	|      jsr 13e96 <getValueType>
   1074c:	|      lea 12(sp),sp
   10750:	|      tst.w d0
   10752:	|  /-- bne.s 1075a <builtIn_addScreenRegion+0x110>
   10754:	|  |   moveq #1,d0
   10756:	+--|-- bra.w 10854 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1075a:	|  \-> moveq #24,d0
   1075c:	|      add.l 56(sp),d0
   10760:	|      move.l d0,-(sp)
   10762:	|      jsr 1481a <trimStack>
   10768:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1076a:	|      movea.l 56(sp),a0
   1076e:	|      move.l 24(a0),d0
   10772:	|      move.l d0,-(sp)
   10774:	|      pea 1 <_start+0x1>
   10778:	|      lea 40(sp),a0
   1077c:	|      move.l a0,-(sp)
   1077e:	|      jsr 13e96 <getValueType>
   10784:	|      lea 12(sp),sp
   10788:	|      tst.w d0
   1078a:	|  /-- bne.s 10792 <builtIn_addScreenRegion+0x148>
   1078c:	|  |   moveq #1,d0
   1078e:	+--|-- bra.w 10854 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10792:	|  \-> moveq #24,d0
   10794:	|      add.l 56(sp),d0
   10798:	|      move.l d0,-(sp)
   1079a:	|      jsr 1481a <trimStack>
   107a0:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107a2:	|      movea.l 56(sp),a0
   107a6:	|      move.l 24(a0),d0
   107aa:	|      move.l d0,-(sp)
   107ac:	|      pea 1 <_start+0x1>
   107b0:	|      lea 44(sp),a0
   107b4:	|      move.l a0,-(sp)
   107b6:	|      jsr 13e96 <getValueType>
   107bc:	|      lea 12(sp),sp
   107c0:	|      tst.w d0
   107c2:	|  /-- bne.s 107ca <builtIn_addScreenRegion+0x180>
   107c4:	|  |   moveq #1,d0
   107c6:	+--|-- bra.w 10854 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   107ca:	|  \-> moveq #24,d0
   107cc:	|      add.l 56(sp),d0
   107d0:	|      move.l d0,-(sp)
   107d2:	|      jsr 1481a <trimStack>
   107d8:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   107da:	|      movea.l 56(sp),a0
   107de:	|      move.l 24(a0),d0
   107e2:	|      move.l d0,-(sp)
   107e4:	|      pea 7 <_start+0x7>
   107e8:	|      lea 24(sp),a0
   107ec:	|      move.l a0,-(sp)
   107ee:	|      jsr 13e96 <getValueType>
   107f4:	|      lea 12(sp),sp
   107f8:	|      tst.w d0
   107fa:	|  /-- bne.s 10800 <builtIn_addScreenRegion+0x1b6>
   107fc:	|  |   moveq #1,d0
   107fe:	+--|-- bra.s 10854 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10800:	|  \-> moveq #24,d0
   10802:	|      add.l 56(sp),d0
   10806:	|      move.l d0,-(sp)
   10808:	|      jsr 1481a <trimStack>
   1080e:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   10810:	|      move.l 16(sp),d5
   10814:	|      move.l 20(sp),d4
   10818:	|      move.l 40(sp),d3
   1081c:	|      move.l 44(sp),d2
   10820:	|      movea.l 24(sp),a1
   10824:	|      movea.l 28(sp),a0
   10828:	|      move.l 32(sp),d1
   1082c:	|      move.l 36(sp),d0
   10830:	|      move.l d5,-(sp)
   10832:	|      move.l d4,-(sp)
   10834:	|      move.l d3,-(sp)
   10836:	|      move.l d2,-(sp)
   10838:	|      move.l a1,-(sp)
   1083a:	|      move.l a0,-(sp)
   1083c:	|      move.l d1,-(sp)
   1083e:	|      move.l d0,-(sp)
   10840:	|      jsr 14f70 <addScreenRegion>
   10846:	|      lea 32(sp),sp
   1084a:	|      tst.w d0
   1084c:	|  /-- beq.s 10852 <builtIn_addScreenRegion+0x208>
   1084e:	|  |   moveq #2,d0
   10850:	+--|-- bra.s 10854 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   10852:	|  \-> moveq #1,d0

}
   10854:	\----> movem.l (sp)+,d2-d5
   10858:	       lea 32(sp),sp
   1085c:	       rts

0001085e <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   1085e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10860:	       movea.l 12(sp),a0
   10864:	       move.l 24(a0),d0
   10868:	       move.l d0,-(sp)
   1086a:	       pea 7 <_start+0x7>
   1086e:	       move.l sp,d0
   10870:	       addq.l #8,d0
   10872:	       move.l d0,-(sp)
   10874:	       jsr 13e96 <getValueType>
   1087a:	       lea 12(sp),sp
   1087e:	       tst.w d0
   10880:	   /-- bne.s 10886 <builtIn_removeScreenRegion+0x28>
   10882:	   |   moveq #1,d0
   10884:	/--|-- bra.s 108a4 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   10886:	|  \-> moveq #24,d0
   10888:	|      add.l 12(sp),d0
   1088c:	|      move.l d0,-(sp)
   1088e:	|      jsr 1481a <trimStack>
   10894:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   10896:	|      move.l (sp),d0
   10898:	|      move.l d0,-(sp)
   1089a:	|      jsr 1525e <removeScreenRegion>
   108a0:	|      addq.l #4,sp
	return BR_CONTINUE;
   108a2:	|      moveq #2,d0
}
   108a4:	\----> addq.l #4,sp
   108a6:	       rts

000108a8 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   108a8:	jsr 153e2 <showBoxes>
	return BR_CONTINUE;
   108ae:	moveq #2,d0
}
   108b0:	rts

000108b2 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   108b2:	jsr 150e4 <killAllRegions>
	return BR_CONTINUE;
   108b8:	moveq #2,d0
}
   108ba:	rts

000108bc <builtIn_addCharacter>:

builtIn(addCharacter)
{
   108bc:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   108c0:	       movea.l 24(sp),a0
   108c4:	       move.l 24(a0),d0
   108c8:	       move.l d0,-(sp)
   108ca:	       jsr 13b42 <getCostumeFromVar>
   108d0:	       addq.l #4,sp
   108d2:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   108d6:	   /-- bne.s 108de <builtIn_addCharacter+0x22>
   108d8:	   |   moveq #1,d0
   108da:	/--|-- bra.w 109ba <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   108de:	|  \-> moveq #24,d0
   108e0:	|      add.l 24(sp),d0
   108e4:	|      move.l d0,-(sp)
   108e6:	|      jsr 1481a <trimStack>
   108ec:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   108ee:	|      movea.l 24(sp),a0
   108f2:	|      move.l 24(a0),d0
   108f6:	|      move.l d0,-(sp)
   108f8:	|      pea 1 <_start+0x1>
   108fc:	|      lea 12(sp),a0
   10900:	|      move.l a0,-(sp)
   10902:	|      jsr 13e96 <getValueType>
   10908:	|      lea 12(sp),sp
   1090c:	|      tst.w d0
   1090e:	|  /-- bne.s 10916 <builtIn_addCharacter+0x5a>
   10910:	|  |   moveq #1,d0
   10912:	+--|-- bra.w 109ba <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10916:	|  \-> moveq #24,d0
   10918:	|      add.l 24(sp),d0
   1091c:	|      move.l d0,-(sp)
   1091e:	|      jsr 1481a <trimStack>
   10924:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10926:	|      movea.l 24(sp),a0
   1092a:	|      move.l 24(a0),d0
   1092e:	|      move.l d0,-(sp)
   10930:	|      pea 1 <_start+0x1>
   10934:	|      moveq #16,d0
   10936:	|      add.l sp,d0
   10938:	|      move.l d0,-(sp)
   1093a:	|      jsr 13e96 <getValueType>
   10940:	|      lea 12(sp),sp
   10944:	|      tst.w d0
   10946:	|  /-- bne.s 1094c <builtIn_addCharacter+0x90>
   10948:	|  |   moveq #1,d0
   1094a:	+--|-- bra.s 109ba <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1094c:	|  \-> moveq #24,d0
   1094e:	|      add.l 24(sp),d0
   10952:	|      move.l d0,-(sp)
   10954:	|      jsr 1481a <trimStack>
   1095a:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1095c:	|      movea.l 24(sp),a0
   10960:	|      move.l 24(a0),d0
   10964:	|      move.l d0,-(sp)
   10966:	|      pea 7 <_start+0x7>
   1096a:	|      lea 8(sp),a0
   1096e:	|      move.l a0,-(sp)
   10970:	|      jsr 13e96 <getValueType>
   10976:	|      lea 12(sp),sp
   1097a:	|      tst.w d0
   1097c:	|  /-- bne.s 10982 <builtIn_addCharacter+0xc6>
   1097e:	|  |   moveq #1,d0
   10980:	+--|-- bra.s 109ba <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10982:	|  \-> moveq #24,d0
   10984:	|      add.l 24(sp),d0
   10988:	|      move.l d0,-(sp)
   1098a:	|      jsr 1481a <trimStack>
   10990:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   10992:	|      movea.l (sp),a0
   10994:	|      move.l 4(sp),d1
   10998:	|      move.l 8(sp),d0
   1099c:	|      move.l 12(sp),-(sp)
   109a0:	|      move.l a0,-(sp)
   109a2:	|      move.l d1,-(sp)
   109a4:	|      move.l d0,-(sp)
   109a6:	|      jsr 8988 <addPerson>
   109ac:	|      lea 16(sp),sp
   109b0:	|      tst.w d0
   109b2:	|  /-- beq.s 109b8 <builtIn_addCharacter+0xfc>
   109b4:	|  |   moveq #2,d0
   109b6:	+--|-- bra.s 109ba <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   109b8:	|  \-> moveq #1,d0
}
   109ba:	\----> lea 16(sp),sp
   109be:	       rts

000109c0 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   109c0:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   109c2:	       movea.l 12(sp),a0
   109c6:	       move.l 24(a0),d0
   109ca:	       move.l d0,-(sp)
   109cc:	       pea 7 <_start+0x7>
   109d0:	       move.l sp,d0
   109d2:	       addq.l #8,d0
   109d4:	       move.l d0,-(sp)
   109d6:	       jsr 13e96 <getValueType>
   109dc:	       lea 12(sp),sp
   109e0:	       tst.w d0
   109e2:	   /-- bne.s 109e8 <builtIn_hideCharacter+0x28>
   109e4:	   |   moveq #1,d0
   109e6:	/--|-- bra.s 10a08 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   109e8:	|  \-> moveq #24,d0
   109ea:	|      add.l 12(sp),d0
   109ee:	|      move.l d0,-(sp)
   109f0:	|      jsr 1481a <trimStack>
   109f6:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   109f8:	|      move.l (sp),d0
   109fa:	|      move.l d0,-(sp)
   109fc:	|      clr.l -(sp)
   109fe:	|      jsr b3c2 <setShown>
   10a04:	|      addq.l #8,sp
	return BR_CONTINUE;
   10a06:	|      moveq #2,d0
}
   10a08:	\----> addq.l #4,sp
   10a0a:	       rts

00010a0c <builtIn_showCharacter>:

builtIn(showCharacter)
{
   10a0c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a0e:	       movea.l 12(sp),a0
   10a12:	       move.l 24(a0),d0
   10a16:	       move.l d0,-(sp)
   10a18:	       pea 7 <_start+0x7>
   10a1c:	       move.l sp,d0
   10a1e:	       addq.l #8,d0
   10a20:	       move.l d0,-(sp)
   10a22:	       jsr 13e96 <getValueType>
   10a28:	       lea 12(sp),sp
   10a2c:	       tst.w d0
   10a2e:	   /-- bne.s 10a34 <builtIn_showCharacter+0x28>
   10a30:	   |   moveq #1,d0
   10a32:	/--|-- bra.s 10a56 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   10a34:	|  \-> moveq #24,d0
   10a36:	|      add.l 12(sp),d0
   10a3a:	|      move.l d0,-(sp)
   10a3c:	|      jsr 1481a <trimStack>
   10a42:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   10a44:	|      move.l (sp),d0
   10a46:	|      move.l d0,-(sp)
   10a48:	|      pea 1 <_start+0x1>
   10a4c:	|      jsr b3c2 <setShown>
   10a52:	|      addq.l #8,sp
	return BR_CONTINUE;
   10a54:	|      moveq #2,d0
}
   10a56:	\----> addq.l #4,sp
   10a58:	       rts

00010a5a <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   10a5a:	jsr 5adc <killSpeechTimers>
	killMostPeople ();
   10a60:	jsr a1fa <killMostPeople>
	return BR_CONTINUE;
   10a66:	moveq #2,d0
}
   10a68:	rts

00010a6a <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   10a6a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a6c:	       movea.l 16(sp),a0
   10a70:	       move.l 24(a0),d0
   10a74:	       move.l d0,-(sp)
   10a76:	       pea 1 <_start+0x1>
   10a7a:	       move.l sp,d0
   10a7c:	       addq.l #8,d0
   10a7e:	       move.l d0,-(sp)
   10a80:	       jsr 13e96 <getValueType>
   10a86:	       lea 12(sp),sp
   10a8a:	       tst.w d0
   10a8c:	   /-- bne.s 10a92 <builtIn_setCharacterDrawMode+0x28>
   10a8e:	   |   moveq #1,d0
   10a90:	/--|-- bra.s 10aec <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   10a92:	|  \-> moveq #24,d0
   10a94:	|      add.l 16(sp),d0
   10a98:	|      move.l d0,-(sp)
   10a9a:	|      jsr 1481a <trimStack>
   10aa0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10aa2:	|      movea.l 16(sp),a0
   10aa6:	|      move.l 24(a0),d0
   10aaa:	|      move.l d0,-(sp)
   10aac:	|      pea 7 <_start+0x7>
   10ab0:	|      moveq #12,d0
   10ab2:	|      add.l sp,d0
   10ab4:	|      move.l d0,-(sp)
   10ab6:	|      jsr 13e96 <getValueType>
   10abc:	|      lea 12(sp),sp
   10ac0:	|      tst.w d0
   10ac2:	|  /-- bne.s 10ac8 <builtIn_setCharacterDrawMode+0x5e>
   10ac4:	|  |   moveq #1,d0
   10ac6:	+--|-- bra.s 10aec <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   10ac8:	|  \-> moveq #24,d0
   10aca:	|      add.l 16(sp),d0
   10ace:	|      move.l d0,-(sp)
   10ad0:	|      jsr 1481a <trimStack>
   10ad6:	|      addq.l #4,sp
	setDrawMode (di, obj);
   10ad8:	|      move.l 4(sp),d1
   10adc:	|      move.l (sp),d0
   10ade:	|      move.l d1,-(sp)
   10ae0:	|      move.l d0,-(sp)
   10ae2:	|      jsr ad00 <setDrawMode>
   10ae8:	|      addq.l #8,sp
	return BR_CONTINUE;
   10aea:	|      moveq #2,d0
}
   10aec:	\----> addq.l #8,sp
   10aee:	       rts

00010af0 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   10af0:	pea 19116 <graphics.c.1c13408a+0x52>
   10af6:	jsr 16894 <KPrintF>
   10afc:	addq.l #4,sp
	return BR_CONTINUE;
   10afe:	moveq #2,d0
}
   10b00:	rts

00010b02 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   10b02:	pea 19149 <graphics.c.1c13408a+0x85>
   10b08:	jsr 16894 <KPrintF>
   10b0e:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   10b10:	moveq #2,d0
}
   10b12:	rts

00010b14 <builtIn_setScale>:

builtIn(setScale)
{
   10b14:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b16:	       movea.l 16(sp),a0
   10b1a:	       move.l 24(a0),d0
   10b1e:	       move.l d0,-(sp)
   10b20:	       pea 1 <_start+0x1>
   10b24:	       move.l sp,d0
   10b26:	       addq.l #8,d0
   10b28:	       move.l d0,-(sp)
   10b2a:	       jsr 13e96 <getValueType>
   10b30:	       lea 12(sp),sp
   10b34:	       tst.w d0
   10b36:	   /-- bne.s 10b3c <builtIn_setScale+0x28>
   10b38:	   |   moveq #1,d0
   10b3a:	/--|-- bra.s 10b9e <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   10b3c:	|  \-> moveq #24,d0
   10b3e:	|      add.l 16(sp),d0
   10b42:	|      move.l d0,-(sp)
   10b44:	|      jsr 1481a <trimStack>
   10b4a:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b4c:	|      movea.l 16(sp),a0
   10b50:	|      move.l 24(a0),d0
   10b54:	|      move.l d0,-(sp)
   10b56:	|      pea 1 <_start+0x1>
   10b5a:	|      moveq #12,d0
   10b5c:	|      add.l sp,d0
   10b5e:	|      move.l d0,-(sp)
   10b60:	|      jsr 13e96 <getValueType>
   10b66:	|      lea 12(sp),sp
   10b6a:	|      tst.w d0
   10b6c:	|  /-- bne.s 10b72 <builtIn_setScale+0x5e>
   10b6e:	|  |   moveq #1,d0
   10b70:	+--|-- bra.s 10b9e <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   10b72:	|  \-> moveq #24,d0
   10b74:	|      add.l 16(sp),d0
   10b78:	|      move.l d0,-(sp)
   10b7a:	|      jsr 1481a <trimStack>
   10b80:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   10b82:	|      move.l (sp),d0
   10b84:	|      move.l d0,d0
   10b86:	|      movea.w d0,a1
   10b88:	|      move.l 4(sp),d0
   10b8c:	|      move.l d0,d0
   10b8e:	|      movea.w d0,a0
   10b90:	|      move.l a1,-(sp)
   10b92:	|      move.l a0,-(sp)
   10b94:	|      jsr b39a <setScale>
   10b9a:	|      addq.l #8,sp
	return BR_CONTINUE;
   10b9c:	|      moveq #2,d0
}
   10b9e:	\----> addq.l #8,sp
   10ba0:	       rts

00010ba2 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   10ba2:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ba4:	       movea.l 12(sp),a0
   10ba8:	       move.l 24(a0),d0
   10bac:	       move.l d0,-(sp)
   10bae:	       pea 7 <_start+0x7>
   10bb2:	       move.l sp,d0
   10bb4:	       addq.l #8,d0
   10bb6:	       move.l d0,-(sp)
   10bb8:	       jsr 13e96 <getValueType>
   10bbe:	       lea 12(sp),sp
   10bc2:	       tst.w d0
   10bc4:	   /-- bne.s 10bca <builtIn_stopCharacter+0x28>
   10bc6:	   |   moveq #1,d0
   10bc8:	/--|-- bra.s 10c02 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   10bca:	|  \-> moveq #24,d0
   10bcc:	|      add.l 12(sp),d0
   10bd0:	|      move.l d0,-(sp)
   10bd2:	|      jsr 1481a <trimStack>
   10bd8:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   10bda:	|      move.l (sp),d0
   10bdc:	|      move.l d0,-(sp)
   10bde:	|      jsr b4ce <stopPerson>
   10be4:	|      addq.l #4,sp
   10be6:	|      movea.w d0,a0
   10be8:	|      moveq #28,d0
   10bea:	|      add.l 12(sp),d0
   10bee:	|      move.l a0,-(sp)
   10bf0:	|      pea 1 <_start+0x1>
   10bf4:	|      move.l d0,-(sp)
   10bf6:	|      jsr 14788 <setVariable>
   10bfc:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10c00:	|      moveq #2,d0
}
   10c02:	\----> addq.l #4,sp
   10c04:	       rts

00010c06 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   10c06:	pea 19183 <graphics.c.1c13408a+0xbf>
   10c0c:	jsr 16894 <KPrintF>
   10c12:	addq.l #4,sp
	return BR_CONTINUE;
   10c14:	moveq #2,d0
}
   10c16:	rts

00010c18 <builtIn_animate>:

builtIn(animate)
{
   10c18:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   10c1a:	       movea.l 16(sp),a0
   10c1e:	       move.l 24(a0),d0
   10c22:	       move.l d0,-(sp)
   10c24:	       jsr 1436e <getAnimationFromVar>
   10c2a:	       addq.l #4,sp
   10c2c:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   10c30:	   /-- bne.s 10c36 <builtIn_animate+0x1e>
   10c32:	   |   moveq #1,d0
   10c34:	/--|-- bra.s 10cb4 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   10c36:	|  \-> moveq #24,d0
   10c38:	|      add.l 16(sp),d0
   10c3c:	|      move.l d0,-(sp)
   10c3e:	|      jsr 1481a <trimStack>
   10c44:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c46:	|      movea.l 16(sp),a0
   10c4a:	|      move.l 24(a0),d0
   10c4e:	|      move.l d0,-(sp)
   10c50:	|      pea 7 <_start+0x7>
   10c54:	|      move.l sp,d0
   10c56:	|      addq.l #8,d0
   10c58:	|      move.l d0,-(sp)
   10c5a:	|      jsr 13e96 <getValueType>
   10c60:	|      lea 12(sp),sp
   10c64:	|      tst.w d0
   10c66:	|  /-- bne.s 10c6c <builtIn_animate+0x54>
   10c68:	|  |   moveq #1,d0
   10c6a:	+--|-- bra.s 10cb4 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   10c6c:	|  \-> moveq #24,d0
   10c6e:	|      add.l 16(sp),d0
   10c72:	|      move.l d0,-(sp)
   10c74:	|      jsr 1481a <trimStack>
   10c7a:	|      addq.l #4,sp
	animatePerson (obj, pp);
   10c7c:	|      move.l (sp),d0
   10c7e:	|      move.l 4(sp),-(sp)
   10c82:	|      move.l d0,-(sp)
   10c84:	|      jsr 8bfe <animatePerson>
   10c8a:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   10c8c:	|      move.l 4(sp),-(sp)
   10c90:	|      jsr b522 <timeForAnim>
   10c96:	|      addq.l #4,sp
   10c98:	|      move.l d0,d1
   10c9a:	|      moveq #28,d0
   10c9c:	|      add.l 16(sp),d0
   10ca0:	|      move.l d1,-(sp)
   10ca2:	|      pea 1 <_start+0x1>
   10ca6:	|      move.l d0,-(sp)
   10ca8:	|      jsr 14788 <setVariable>
   10cae:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10cb2:	|      moveq #2,d0
}
   10cb4:	\----> addq.l #8,sp
   10cb6:	       rts

00010cb8 <builtIn_setCostume>:

builtIn(setCostume)
{
   10cb8:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   10cba:	       movea.l 16(sp),a0
   10cbe:	       move.l 24(a0),d0
   10cc2:	       move.l d0,-(sp)
   10cc4:	       jsr 13b42 <getCostumeFromVar>
   10cca:	       addq.l #4,sp
   10ccc:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   10cd0:	   /-- bne.s 10cd6 <builtIn_setCostume+0x1e>
   10cd2:	   |   moveq #1,d0
   10cd4:	/--|-- bra.s 10d2e <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   10cd6:	|  \-> moveq #24,d0
   10cd8:	|      add.l 16(sp),d0
   10cdc:	|      move.l d0,-(sp)
   10cde:	|      jsr 1481a <trimStack>
   10ce4:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ce6:	|      movea.l 16(sp),a0
   10cea:	|      move.l 24(a0),d0
   10cee:	|      move.l d0,-(sp)
   10cf0:	|      pea 7 <_start+0x7>
   10cf4:	|      move.l sp,d0
   10cf6:	|      addq.l #8,d0
   10cf8:	|      move.l d0,-(sp)
   10cfa:	|      jsr 13e96 <getValueType>
   10d00:	|      lea 12(sp),sp
   10d04:	|      tst.w d0
   10d06:	|  /-- bne.s 10d0c <builtIn_setCostume+0x54>
   10d08:	|  |   moveq #1,d0
   10d0a:	+--|-- bra.s 10d2e <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   10d0c:	|  \-> moveq #24,d0
   10d0e:	|      add.l 16(sp),d0
   10d12:	|      move.l d0,-(sp)
   10d14:	|      jsr 1481a <trimStack>
   10d1a:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   10d1c:	|      move.l (sp),d0
   10d1e:	|      move.l 4(sp),-(sp)
   10d22:	|      move.l d0,-(sp)
   10d24:	|      jsr 8c48 <animatePersonUsingPersona>
   10d2a:	|      addq.l #8,sp
	return BR_CONTINUE;
   10d2c:	|      moveq #2,d0
}
   10d2e:	\----> addq.l #8,sp
   10d30:	       rts

00010d32 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   10d32:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d34:	       movea.l 16(sp),a0
   10d38:	       move.l 24(a0),d0
   10d3c:	       move.l d0,-(sp)
   10d3e:	       pea 1 <_start+0x1>
   10d42:	       move.l sp,d0
   10d44:	       addq.l #8,d0
   10d46:	       move.l d0,-(sp)
   10d48:	       jsr 13e96 <getValueType>
   10d4e:	       lea 12(sp),sp
   10d52:	       tst.w d0
   10d54:	   /-- bne.s 10d5a <builtIn_floatCharacter+0x28>
   10d56:	   |   moveq #1,d0
   10d58:	/--|-- bra.s 10dce <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   10d5a:	|  \-> moveq #24,d0
   10d5c:	|      add.l 16(sp),d0
   10d60:	|      move.l d0,-(sp)
   10d62:	|      jsr 1481a <trimStack>
   10d68:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10d6a:	|      movea.l 16(sp),a0
   10d6e:	|      move.l 24(a0),d0
   10d72:	|      move.l d0,-(sp)
   10d74:	|      pea 7 <_start+0x7>
   10d78:	|      moveq #12,d0
   10d7a:	|      add.l sp,d0
   10d7c:	|      move.l d0,-(sp)
   10d7e:	|      jsr 13e96 <getValueType>
   10d84:	|      lea 12(sp),sp
   10d88:	|      tst.w d0
   10d8a:	|  /-- bne.s 10d90 <builtIn_floatCharacter+0x5e>
   10d8c:	|  |   moveq #1,d0
   10d8e:	+--|-- bra.s 10dce <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   10d90:	|  \-> moveq #24,d0
   10d92:	|      add.l 16(sp),d0
   10d96:	|      move.l d0,-(sp)
   10d98:	|      jsr 1481a <trimStack>
   10d9e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   10da0:	|      move.l 4(sp),d1
   10da4:	|      move.l (sp),d0
   10da6:	|      move.l d1,-(sp)
   10da8:	|      move.l d0,-(sp)
   10daa:	|      jsr 9dbc <floatCharacter>
   10db0:	|      addq.l #8,sp
   10db2:	|      movea.w d0,a0
   10db4:	|      moveq #28,d0
   10db6:	|      add.l 16(sp),d0
   10dba:	|      move.l a0,-(sp)
   10dbc:	|      pea 1 <_start+0x1>
   10dc0:	|      move.l d0,-(sp)
   10dc2:	|      jsr 14788 <setVariable>
   10dc8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10dcc:	|      moveq #2,d0
}
   10dce:	\----> addq.l #8,sp
   10dd0:	       rts

00010dd2 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   10dd2:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10dd4:	       movea.l 16(sp),a0
   10dd8:	       move.l 24(a0),d0
   10ddc:	       move.l d0,-(sp)
   10dde:	       pea 1 <_start+0x1>
   10de2:	       move.l sp,d0
   10de4:	       addq.l #8,d0
   10de6:	       move.l d0,-(sp)
   10de8:	       jsr 13e96 <getValueType>
   10dee:	       lea 12(sp),sp
   10df2:	       tst.w d0
   10df4:	   /-- bne.s 10dfa <builtIn_setCharacterWalkSpeed+0x28>
   10df6:	   |   moveq #1,d0
   10df8:	/--|-- bra.s 10e6e <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   10dfa:	|  \-> moveq #24,d0
   10dfc:	|      add.l 16(sp),d0
   10e00:	|      move.l d0,-(sp)
   10e02:	|      jsr 1481a <trimStack>
   10e08:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e0a:	|      movea.l 16(sp),a0
   10e0e:	|      move.l 24(a0),d0
   10e12:	|      move.l d0,-(sp)
   10e14:	|      pea 7 <_start+0x7>
   10e18:	|      moveq #12,d0
   10e1a:	|      add.l sp,d0
   10e1c:	|      move.l d0,-(sp)
   10e1e:	|      jsr 13e96 <getValueType>
   10e24:	|      lea 12(sp),sp
   10e28:	|      tst.w d0
   10e2a:	|  /-- bne.s 10e30 <builtIn_setCharacterWalkSpeed+0x5e>
   10e2c:	|  |   moveq #1,d0
   10e2e:	+--|-- bra.s 10e6e <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   10e30:	|  \-> moveq #24,d0
   10e32:	|      add.l 16(sp),d0
   10e36:	|      move.l d0,-(sp)
   10e38:	|      jsr 1481a <trimStack>
   10e3e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   10e40:	|      move.l 4(sp),d1
   10e44:	|      move.l (sp),d0
   10e46:	|      move.l d1,-(sp)
   10e48:	|      move.l d0,-(sp)
   10e4a:	|      jsr b336 <setCharacterWalkSpeed>
   10e50:	|      addq.l #8,sp
   10e52:	|      movea.w d0,a0
   10e54:	|      moveq #28,d0
   10e56:	|      add.l 16(sp),d0
   10e5a:	|      move.l a0,-(sp)
   10e5c:	|      pea 1 <_start+0x1>
   10e60:	|      move.l d0,-(sp)
   10e62:	|      jsr 14788 <setVariable>
   10e68:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10e6c:	|      moveq #2,d0
}
   10e6e:	\----> addq.l #8,sp
   10e70:	       rts

00010e72 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   10e72:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e74:	       movea.l 16(sp),a0
   10e78:	       move.l 24(a0),d0
   10e7c:	       move.l d0,-(sp)
   10e7e:	       pea 1 <_start+0x1>
   10e82:	       move.l sp,d0
   10e84:	       addq.l #8,d0
   10e86:	       move.l d0,-(sp)
   10e88:	       jsr 13e96 <getValueType>
   10e8e:	       lea 12(sp),sp
   10e92:	       tst.w d0
   10e94:	   /-- bne.s 10e9a <builtIn_turnCharacter+0x28>
   10e96:	   |   moveq #1,d0
   10e98:	/--|-- bra.s 10f0e <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   10e9a:	|  \-> moveq #24,d0
   10e9c:	|      add.l 16(sp),d0
   10ea0:	|      move.l d0,-(sp)
   10ea2:	|      jsr 1481a <trimStack>
   10ea8:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10eaa:	|      movea.l 16(sp),a0
   10eae:	|      move.l 24(a0),d0
   10eb2:	|      move.l d0,-(sp)
   10eb4:	|      pea 7 <_start+0x7>
   10eb8:	|      moveq #12,d0
   10eba:	|      add.l sp,d0
   10ebc:	|      move.l d0,-(sp)
   10ebe:	|      jsr 13e96 <getValueType>
   10ec4:	|      lea 12(sp),sp
   10ec8:	|      tst.w d0
   10eca:	|  /-- bne.s 10ed0 <builtIn_turnCharacter+0x5e>
   10ecc:	|  |   moveq #1,d0
   10ece:	+--|-- bra.s 10f0e <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   10ed0:	|  \-> moveq #24,d0
   10ed2:	|      add.l 16(sp),d0
   10ed6:	|      move.l d0,-(sp)
   10ed8:	|      jsr 1481a <trimStack>
   10ede:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   10ee0:	|      move.l (sp),d1
   10ee2:	|      move.l 4(sp),d0
   10ee6:	|      move.l d1,-(sp)
   10ee8:	|      move.l d0,-(sp)
   10eea:	|      jsr b5da <turnPersonToFace>
   10ef0:	|      addq.l #8,sp
   10ef2:	|      movea.w d0,a0
   10ef4:	|      moveq #28,d0
   10ef6:	|      add.l 16(sp),d0
   10efa:	|      move.l a0,-(sp)
   10efc:	|      pea 1 <_start+0x1>
   10f00:	|      move.l d0,-(sp)
   10f02:	|      jsr 14788 <setVariable>
   10f08:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10f0c:	|      moveq #2,d0
}
   10f0e:	\----> addq.l #8,sp
   10f10:	       rts

00010f12 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   10f12:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f14:	       movea.l 16(sp),a0
   10f18:	       move.l 24(a0),d0
   10f1c:	       move.l d0,-(sp)
   10f1e:	       pea 1 <_start+0x1>
   10f22:	       move.l sp,d0
   10f24:	       addq.l #8,d0
   10f26:	       move.l d0,-(sp)
   10f28:	       jsr 13e96 <getValueType>
   10f2e:	       lea 12(sp),sp
   10f32:	       tst.w d0
   10f34:	   /-- bne.s 10f3a <builtIn_setCharacterExtra+0x28>
   10f36:	   |   moveq #1,d0
   10f38:	/--|-- bra.s 10fae <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   10f3a:	|  \-> moveq #24,d0
   10f3c:	|      add.l 16(sp),d0
   10f40:	|      move.l d0,-(sp)
   10f42:	|      jsr 1481a <trimStack>
   10f48:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f4a:	|      movea.l 16(sp),a0
   10f4e:	|      move.l 24(a0),d0
   10f52:	|      move.l d0,-(sp)
   10f54:	|      pea 7 <_start+0x7>
   10f58:	|      moveq #12,d0
   10f5a:	|      add.l sp,d0
   10f5c:	|      move.l d0,-(sp)
   10f5e:	|      jsr 13e96 <getValueType>
   10f64:	|      lea 12(sp),sp
   10f68:	|      tst.w d0
   10f6a:	|  /-- bne.s 10f70 <builtIn_setCharacterExtra+0x5e>
   10f6c:	|  |   moveq #1,d0
   10f6e:	+--|-- bra.s 10fae <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   10f70:	|  \-> moveq #24,d0
   10f72:	|      add.l 16(sp),d0
   10f76:	|      move.l d0,-(sp)
   10f78:	|      jsr 1481a <trimStack>
   10f7e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   10f80:	|      move.l (sp),d1
   10f82:	|      move.l 4(sp),d0
   10f86:	|      move.l d1,-(sp)
   10f88:	|      move.l d0,-(sp)
   10f8a:	|      jsr b364 <setPersonExtra>
   10f90:	|      addq.l #8,sp
   10f92:	|      movea.w d0,a0
   10f94:	|      moveq #28,d0
   10f96:	|      add.l 16(sp),d0
   10f9a:	|      move.l a0,-(sp)
   10f9c:	|      pea 1 <_start+0x1>
   10fa0:	|      move.l d0,-(sp)
   10fa2:	|      jsr 14788 <setVariable>
   10fa8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10fac:	|      moveq #2,d0
}
   10fae:	\----> addq.l #8,sp
   10fb0:	       rts

00010fb2 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   10fb2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10fb4:	       movea.l 12(sp),a0
   10fb8:	       move.l 24(a0),d0
   10fbc:	       move.l d0,-(sp)
   10fbe:	       pea 7 <_start+0x7>
   10fc2:	       move.l sp,d0
   10fc4:	       addq.l #8,d0
   10fc6:	       move.l d0,-(sp)
   10fc8:	       jsr 13e96 <getValueType>
   10fce:	       lea 12(sp),sp
   10fd2:	       tst.w d0
   10fd4:	   /-- bne.s 10fda <builtIn_removeCharacter+0x28>
   10fd6:	   |   moveq #1,d0
   10fd8:	/--|-- bra.s 10ff8 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   10fda:	|  \-> moveq #24,d0
   10fdc:	|      add.l 12(sp),d0
   10fe0:	|      move.l d0,-(sp)
   10fe2:	|      jsr 1481a <trimStack>
   10fe8:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   10fea:	|      move.l (sp),d0
   10fec:	|      move.l d0,-(sp)
   10fee:	|      jsr a564 <removeOneCharacter>
   10ff4:	|      addq.l #4,sp
	return BR_CONTINUE;
   10ff6:	|      moveq #2,d0
}
   10ff8:	\----> addq.l #4,sp
   10ffa:	       rts

00010ffc <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   10ffc:	                lea -28(sp),sp
   11000:	                move.l d2,-(sp)
   11002:	                move.l 44(sp),d1
   11006:	                move.l 48(sp),d0
   1100a:	                move.w d1,d1
   1100c:	                move.w d1,6(sp)
   11010:	                move.w d0,d0
   11012:	                move.w d0,4(sp)
	switch (numParams) {
   11016:	                moveq #2,d0
   11018:	                cmp.l 36(sp),d0
   1101c:	      /-------- beq.w 1115e <moveChr+0x162>
   11020:	      |         moveq #3,d0
   11022:	      |         cmp.l 36(sp),d0
   11026:	/-----|-------- bne.w 11292 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1102a:	|     |         movea.l 40(sp),a0
   1102e:	|     |         move.l 24(a0),d0
   11032:	|     |         move.l d0,-(sp)
   11034:	|     |         pea 1 <_start+0x1>
   11038:	|     |         lea 20(sp),a0
   1103c:	|     |         move.l a0,-(sp)
   1103e:	|     |         jsr 13e96 <getValueType>
   11044:	|     |         lea 12(sp),sp
   11048:	|     |         tst.w d0
   1104a:	|     |     /-- bne.s 11052 <moveChr+0x56>
   1104c:	|     |     |   moveq #1,d0
   1104e:	|  /--|-----|-- bra.w 112a2 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11052:	|  |  |     \-> moveq #24,d0
   11054:	|  |  |         add.l 40(sp),d0
   11058:	|  |  |         move.l d0,-(sp)
   1105a:	|  |  |         jsr 1481a <trimStack>
   11060:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11062:	|  |  |         movea.l 40(sp),a0
   11066:	|  |  |         move.l 24(a0),d0
   1106a:	|  |  |         move.l d0,-(sp)
   1106c:	|  |  |         pea 1 <_start+0x1>
   11070:	|  |  |         lea 24(sp),a0
   11074:	|  |  |         move.l a0,-(sp)
   11076:	|  |  |         jsr 13e96 <getValueType>
   1107c:	|  |  |         lea 12(sp),sp
   11080:	|  |  |         tst.w d0
   11082:	|  |  |     /-- bne.s 1108a <moveChr+0x8e>
   11084:	|  |  |     |   moveq #1,d0
   11086:	|  +--|-----|-- bra.w 112a2 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1108a:	|  |  |     \-> moveq #24,d0
   1108c:	|  |  |         add.l 40(sp),d0
   11090:	|  |  |         move.l d0,-(sp)
   11092:	|  |  |         jsr 1481a <trimStack>
   11098:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1109a:	|  |  |         movea.l 40(sp),a0
   1109e:	|  |  |         move.l 24(a0),d0
   110a2:	|  |  |         move.l d0,-(sp)
   110a4:	|  |  |         pea 7 <_start+0x7>
   110a8:	|  |  |         lea 16(sp),a0
   110ac:	|  |  |         move.l a0,-(sp)
   110ae:	|  |  |         jsr 13e96 <getValueType>
   110b4:	|  |  |         lea 12(sp),sp
   110b8:	|  |  |         tst.w d0
   110ba:	|  |  |     /-- bne.s 110c2 <moveChr+0xc6>
   110bc:	|  |  |     |   moveq #1,d0
   110be:	|  +--|-----|-- bra.w 112a2 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   110c2:	|  |  |     \-> moveq #24,d0
   110c4:	|  |  |         add.l 40(sp),d0
   110c8:	|  |  |         move.l d0,-(sp)
   110ca:	|  |  |         jsr 1481a <trimStack>
   110d0:	|  |  |         addq.l #4,sp

			if (force) {
   110d2:	|  |  |         tst.w 6(sp)
   110d6:	|  |  |     /-- beq.s 11106 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   110d8:	|  |  |     |   movea.l 8(sp),a0
   110dc:	|  |  |     |   move.l 12(sp),d1
   110e0:	|  |  |     |   move.l 16(sp),d0
   110e4:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb5bf5>
   110e8:	|  |  |     |   move.l 44(sp),-(sp)
   110ec:	|  |  |     |   move.l a0,-(sp)
   110ee:	|  |  |     |   move.l d1,-(sp)
   110f0:	|  |  |     |   move.l d0,-(sp)
   110f2:	|  |  |     |   jsr 9de0 <forceWalkingPerson>
   110f8:	|  |  |     |   lea 20(sp),sp
   110fc:	|  |  |     |   tst.w d0
   110fe:	|  |  |  /--|-- beq.s 11158 <moveChr+0x15c>
   11100:	|  |  |  |  |   moveq #3,d0
   11102:	|  +--|--|--|-- bra.w 112a2 <moveChr+0x2a6>
			} else if (immediate) {
   11106:	|  |  |  |  \-> tst.w 4(sp)
   1110a:	|  |  |  |  /-- beq.s 1112a <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   1110c:	|  |  |  |  |   movea.l 8(sp),a0
   11110:	|  |  |  |  |   move.l 12(sp),d1
   11114:	|  |  |  |  |   move.l 16(sp),d0
   11118:	|  |  |  |  |   move.l a0,-(sp)
   1111a:	|  |  |  |  |   move.l d1,-(sp)
   1111c:	|  |  |  |  |   move.l d0,-(sp)
   1111e:	|  |  |  |  |   jsr a0e8 <jumpPerson>
   11124:	|  |  |  |  |   lea 12(sp),sp
   11128:	|  |  |  +--|-- bra.s 11158 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   1112a:	|  |  |  |  \-> movea.l 8(sp),a0
   1112e:	|  |  |  |      move.l 12(sp),d1
   11132:	|  |  |  |      move.l 16(sp),d0
   11136:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb5bf5>
   1113a:	|  |  |  |      move.l 44(sp),-(sp)
   1113e:	|  |  |  |      move.l a0,-(sp)
   11140:	|  |  |  |      move.l d1,-(sp)
   11142:	|  |  |  |      move.l d0,-(sp)
   11144:	|  |  |  |      jsr a2b8 <makeWalkingPerson>
   1114a:	|  |  |  |      lea 20(sp),sp
   1114e:	|  |  |  |      tst.w d0
   11150:	|  |  |  +----- beq.s 11158 <moveChr+0x15c>
   11152:	|  |  |  |      moveq #3,d0
   11154:	|  +--|--|----- bra.w 112a2 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11158:	|  |  |  \----> moveq #2,d0
   1115a:	|  +--|-------- bra.w 112a2 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1115e:	|  |  \-------> movea.l 40(sp),a0
   11162:	|  |            move.l 24(a0),d0
   11166:	|  |            move.l d0,-(sp)
   11168:	|  |            pea 7 <_start+0x7>
   1116c:	|  |            moveq #32,d0
   1116e:	|  |            add.l sp,d0
   11170:	|  |            move.l d0,-(sp)
   11172:	|  |            jsr 13e96 <getValueType>
   11178:	|  |            lea 12(sp),sp
   1117c:	|  |            tst.w d0
   1117e:	|  |        /-- bne.s 11186 <moveChr+0x18a>
   11180:	|  |        |   moveq #1,d0
   11182:	|  +--------|-- bra.w 112a2 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11186:	|  |        \-> moveq #24,d0
   11188:	|  |            add.l 40(sp),d0
   1118c:	|  |            move.l d0,-(sp)
   1118e:	|  |            jsr 1481a <trimStack>
   11194:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11196:	|  |            movea.l 40(sp),a0
   1119a:	|  |            move.l 24(a0),d0
   1119e:	|  |            move.l d0,-(sp)
   111a0:	|  |            pea 7 <_start+0x7>
   111a4:	|  |            lea 28(sp),a0
   111a8:	|  |            move.l a0,-(sp)
   111aa:	|  |            jsr 13e96 <getValueType>
   111b0:	|  |            lea 12(sp),sp
   111b4:	|  |            tst.w d0
   111b6:	|  |        /-- bne.s 111be <moveChr+0x1c2>
   111b8:	|  |        |   moveq #1,d0
   111ba:	|  +--------|-- bra.w 112a2 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   111be:	|  |        \-> moveq #24,d0
   111c0:	|  |            add.l 40(sp),d0
   111c4:	|  |            move.l d0,-(sp)
   111c6:	|  |            jsr 1481a <trimStack>
   111cc:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   111ce:	|  |            move.l 24(sp),d0
   111d2:	|  |            move.l d0,-(sp)
   111d4:	|  |            jsr 150b6 <getRegionForObject>
   111da:	|  |            addq.l #4,sp
   111dc:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   111e0:	|  |        /-- bne.s 111e8 <moveChr+0x1ec>
   111e2:	|  |        |   moveq #2,d0
   111e4:	|  +--------|-- bra.w 112a2 <moveChr+0x2a6>

			if (force)
   111e8:	|  |        \-> tst.w 6(sp)
   111ec:	|  |        /-- beq.s 11228 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   111ee:	|  |        |   movea.l 28(sp),a0
   111f2:	|  |        |   move.l 24(a0),d2
   111f6:	|  |        |   movea.l 20(sp),a1
   111fa:	|  |        |   movea.l 28(sp),a0
   111fe:	|  |        |   move.l 20(a0),d1
   11202:	|  |        |   movea.l 28(sp),a0
   11206:	|  |        |   move.l 16(a0),d0
   1120a:	|  |        |   move.l d2,-(sp)
   1120c:	|  |        |   move.l 44(sp),-(sp)
   11210:	|  |        |   move.l a1,-(sp)
   11212:	|  |        |   move.l d1,-(sp)
   11214:	|  |        |   move.l d0,-(sp)
   11216:	|  |        |   jsr 9de0 <forceWalkingPerson>
   1121c:	|  |        |   lea 20(sp),sp
   11220:	|  |        |   tst.w d0
   11222:	|  |     /--|-- beq.s 1128e <moveChr+0x292>
   11224:	|  |     |  |   moveq #3,d0
   11226:	|  +-----|--|-- bra.s 112a2 <moveChr+0x2a6>
			}
			else if (immediate)
   11228:	|  |     |  \-> tst.w 4(sp)
   1122c:	|  |     |  /-- beq.s 11254 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   1122e:	|  |     |  |   movea.l 20(sp),a1
   11232:	|  |     |  |   movea.l 28(sp),a0
   11236:	|  |     |  |   move.l 20(a0),d1
   1123a:	|  |     |  |   movea.l 28(sp),a0
   1123e:	|  |     |  |   move.l 16(a0),d0
   11242:	|  |     |  |   move.l a1,-(sp)
   11244:	|  |     |  |   move.l d1,-(sp)
   11246:	|  |     |  |   move.l d0,-(sp)
   11248:	|  |     |  |   jsr a0e8 <jumpPerson>
   1124e:	|  |     |  |   lea 12(sp),sp
   11252:	|  |     +--|-- bra.s 1128e <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11254:	|  |     |  \-> movea.l 28(sp),a0
   11258:	|  |     |      move.l 24(a0),d2
   1125c:	|  |     |      movea.l 20(sp),a1
   11260:	|  |     |      movea.l 28(sp),a0
   11264:	|  |     |      move.l 20(a0),d1
   11268:	|  |     |      movea.l 28(sp),a0
   1126c:	|  |     |      move.l 16(a0),d0
   11270:	|  |     |      move.l d2,-(sp)
   11272:	|  |     |      move.l 44(sp),-(sp)
   11276:	|  |     |      move.l a1,-(sp)
   11278:	|  |     |      move.l d1,-(sp)
   1127a:	|  |     |      move.l d0,-(sp)
   1127c:	|  |     |      jsr a2b8 <makeWalkingPerson>
   11282:	|  |     |      lea 20(sp),sp
   11286:	|  |     |      tst.w d0
   11288:	|  |     +----- beq.s 1128e <moveChr+0x292>
   1128a:	|  |     |      moveq #3,d0
   1128c:	|  +-----|----- bra.s 112a2 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   1128e:	|  |     \----> moveq #2,d0
   11290:	|  +----------- bra.s 112a2 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11292:	\--|----------> pea 191a1 <graphics.c.1c13408a+0xdd>
   11298:	   |            jsr 16894 <KPrintF>
   1129e:	   |            addq.l #4,sp
			return BR_ERROR;
   112a0:	   |            moveq #1,d0
	}
}
   112a2:	   \----------> move.l (sp)+,d2
   112a4:	                lea 28(sp),sp
   112a8:	                rts

000112aa <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   112aa:	clr.l -(sp)
   112ac:	clr.l -(sp)
   112ae:	move.l 16(sp),-(sp)
   112b2:	move.l 16(sp),-(sp)
   112b6:	jsr 10ffc <moveChr>
   112bc:	lea 16(sp),sp
}
   112c0:	rts

000112c2 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   112c2:	clr.l -(sp)
   112c4:	pea 1 <_start+0x1>
   112c8:	move.l 16(sp),-(sp)
   112cc:	move.l 16(sp),-(sp)
   112d0:	jsr 10ffc <moveChr>
   112d6:	lea 16(sp),sp
}
   112da:	rts

000112dc <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   112dc:	pea 1 <_start+0x1>
   112e0:	clr.l -(sp)
   112e2:	move.l 16(sp),-(sp)
   112e6:	move.l 16(sp),-(sp)
   112ea:	jsr 10ffc <moveChr>
   112f0:	lea 16(sp),sp
}
   112f4:	rts

000112f6 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   112f6:	jsr 71c8 <clearStatusBar>
	return BR_CONTINUE;
   112fc:	moveq #2,d0
}
   112fe:	rts

00011300 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11300:	jsr 7270 <killLastStatus>
	return BR_CONTINUE;
   11306:	moveq #2,d0
}
   11308:	rts

0001130a <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   1130a:	jsr 715e <addStatusBar>
	return BR_CONTINUE;
   11310:	moveq #2,d0
}
   11312:	rts

00011314 <builtIn_statusText>:

builtIn(statusText)
{
   11314:	       subq.l #8,sp
   11316:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11318:	       movea.l 20(sp),a0
   1131c:	       move.l 24(a0),d0
   11320:	       move.l d0,-(sp)
   11322:	       jsr 1446c <getTextFromAnyVar>
   11328:	       addq.l #4,sp
   1132a:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   1132e:	   /-- bne.s 11334 <builtIn_statusText+0x20>
   11330:	   |   moveq #1,d0
   11332:	/--|-- bra.s 11368 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11334:	|  \-> moveq #24,d0
   11336:	|      add.l 20(sp),d0
   1133a:	|      move.l d0,-(sp)
   1133c:	|      jsr 1481a <trimStack>
   11342:	|      addq.l #4,sp
	setStatusBar(newText);
   11344:	|      move.l 8(sp),-(sp)
   11348:	|      jsr 74f0 <setStatusBar>
   1134e:	|      addq.l #4,sp
	FreeVec(newText);
   11350:	|      move.l 8(sp),4(sp)
   11356:	|      move.l 1a7a4 <SysBase>,d0
   1135c:	|      movea.l d0,a6
   1135e:	|      movea.l 4(sp),a1
   11362:	|      jsr -690(a6)
	return BR_CONTINUE;
   11366:	|      moveq #2,d0
}
   11368:	\----> movea.l (sp)+,a6
   1136a:	       addq.l #8,sp
   1136c:	       rts

0001136e <builtIn_lightStatus>:

builtIn(lightStatus)
{
   1136e:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11370:	       movea.l 12(sp),a0
   11374:	       move.l 24(a0),d0
   11378:	       move.l d0,-(sp)
   1137a:	       pea 1 <_start+0x1>
   1137e:	       move.l sp,d0
   11380:	       addq.l #8,d0
   11382:	       move.l d0,-(sp)
   11384:	       jsr 13e96 <getValueType>
   1138a:	       lea 12(sp),sp
   1138e:	       tst.w d0
   11390:	   /-- bne.s 11396 <builtIn_lightStatus+0x28>
   11392:	   |   moveq #1,d0
   11394:	/--|-- bra.s 113b4 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11396:	|  \-> moveq #24,d0
   11398:	|      add.l 12(sp),d0
   1139c:	|      move.l d0,-(sp)
   1139e:	|      jsr 1481a <trimStack>
   113a4:	|      addq.l #4,sp
	setLitStatus (val);
   113a6:	|      move.l (sp),d0
   113a8:	|      move.l d0,-(sp)
   113aa:	|      jsr 74e0 <setLitStatus>
   113b0:	|      addq.l #4,sp
	return BR_CONTINUE;
   113b2:	|      moveq #2,d0
}
   113b4:	\----> addq.l #4,sp
   113b6:	       rts

000113b8 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   113b8:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113ba:	       movea.l 16(sp),a0
   113be:	       move.l 24(a0),d0
   113c2:	       move.l d0,-(sp)
   113c4:	       pea 1 <_start+0x1>
   113c8:	       move.l sp,d0
   113ca:	       addq.l #8,d0
   113cc:	       move.l d0,-(sp)
   113ce:	       jsr 13e96 <getValueType>
   113d4:	       lea 12(sp),sp
   113d8:	       tst.w d0
   113da:	   /-- bne.s 113e0 <builtIn_positionStatus+0x28>
   113dc:	   |   moveq #1,d0
   113de:	/--|-- bra.s 1143a <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   113e0:	|  \-> moveq #24,d0
   113e2:	|      add.l 16(sp),d0
   113e6:	|      move.l d0,-(sp)
   113e8:	|      jsr 1481a <trimStack>
   113ee:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113f0:	|      movea.l 16(sp),a0
   113f4:	|      move.l 24(a0),d0
   113f8:	|      move.l d0,-(sp)
   113fa:	|      pea 1 <_start+0x1>
   113fe:	|      moveq #12,d0
   11400:	|      add.l sp,d0
   11402:	|      move.l d0,-(sp)
   11404:	|      jsr 13e96 <getValueType>
   1140a:	|      lea 12(sp),sp
   1140e:	|      tst.w d0
   11410:	|  /-- bne.s 11416 <builtIn_positionStatus+0x5e>
   11412:	|  |   moveq #1,d0
   11414:	+--|-- bra.s 1143a <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11416:	|  \-> moveq #24,d0
   11418:	|      add.l 16(sp),d0
   1141c:	|      move.l d0,-(sp)
   1141e:	|      jsr 1481a <trimStack>
   11424:	|      addq.l #4,sp
	positionStatus (x, y);
   11426:	|      move.l (sp),d1
   11428:	|      move.l 4(sp),d0
   1142c:	|      move.l d1,-(sp)
   1142e:	|      move.l d0,-(sp)
   11430:	|      jsr 72d2 <positionStatus>
   11436:	|      addq.l #8,sp
	return BR_CONTINUE;
   11438:	|      moveq #2,d0
}
   1143a:	\----> addq.l #8,sp
   1143c:	       rts

0001143e <builtIn_alignStatus>:

builtIn(alignStatus)
{
   1143e:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11440:	       movea.l 12(sp),a0
   11444:	       move.l 24(a0),d0
   11448:	       move.l d0,-(sp)
   1144a:	       pea 1 <_start+0x1>
   1144e:	       move.l sp,d0
   11450:	       addq.l #8,d0
   11452:	       move.l d0,-(sp)
   11454:	       jsr 13e96 <getValueType>
   1145a:	       lea 12(sp),sp
   1145e:	       tst.w d0
   11460:	   /-- bne.s 11466 <builtIn_alignStatus+0x28>
   11462:	   |   moveq #1,d0
   11464:	/--|-- bra.s 11486 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11466:	|  \-> moveq #24,d0
   11468:	|      add.l 12(sp),d0
   1146c:	|      move.l d0,-(sp)
   1146e:	|      jsr 1481a <trimStack>
   11474:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11476:	|      move.l (sp),d0
   11478:	|      movea.l 1a12a <nowStatus>,a0
   1147e:	|      move.l d0,d0
   11480:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11484:	|      moveq #2,d0
}
   11486:	\----> addq.l #4,sp
   11488:	       rts

0001148a <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   1148a:	             tst.l 4(sp)
   1148e:	      /----- beq.s 1149a <getFuncNumForCallback+0x10>
   11490:	      |      moveq #1,d0
   11492:	      |      cmp.l 4(sp),d0
   11496:	      |  /-- beq.s 114a0 <getFuncNumForCallback+0x16>
   11498:	   /--|--|-- bra.s 114d6 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   1149a:	   |  \--|-> clr.l 12(sp)
			break;
   1149e:	/--|-----|-- bra.s 114e8 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   114a0:	|  |     \-> movea.l 8(sp),a0
   114a4:	|  |         move.l 24(a0),d0
   114a8:	|  |         move.l d0,-(sp)
   114aa:	|  |         pea 2 <_start+0x2>
   114ae:	|  |         move.l 20(sp),-(sp)
   114b2:	|  |         jsr 13e96 <getValueType>
   114b8:	|  |         lea 12(sp),sp
   114bc:	|  |         tst.w d0
   114be:	|  |     /-- bne.s 114c4 <getFuncNumForCallback+0x3a>
   114c0:	|  |     |   clr.w d0
   114c2:	|  |  /--|-- bra.s 114ea <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   114c4:	|  |  |  \-> moveq #24,d0
   114c6:	|  |  |      add.l 8(sp),d0
   114ca:	|  |  |      move.l d0,-(sp)
   114cc:	|  |  |      jsr 1481a <trimStack>
   114d2:	|  |  |      addq.l #4,sp
			break;
   114d4:	+--|--|----- bra.s 114e8 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   114d6:	|  \--|----> pea 191d7 <graphics.c.1c13408a+0x113>
   114dc:	|     |      jsr 16894 <KPrintF>
   114e2:	|     |      addq.l #4,sp
			return FALSE;
   114e4:	|     |      clr.w d0
   114e6:	|     +----- bra.s 114ea <getFuncNumForCallback+0x60>
	}
	return TRUE;
   114e8:	\-----|----> moveq #1,d0
}
   114ea:	      \----> rts

000114ec <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   114ec:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   114ee:	       move.l sp,d0
   114f0:	       move.l d0,-(sp)
   114f2:	       move.l 16(sp),-(sp)
   114f6:	       move.l 16(sp),-(sp)
   114fa:	       jsr 1148a <getFuncNumForCallback>
   11500:	       lea 12(sp),sp
   11504:	       tst.w d0
   11506:	/----- beq.s 11516 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11508:	|      movea.l 1a11c <currentEvents>,a0
   1150e:	|      move.l (sp),d0
   11510:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11512:	|      moveq #2,d0
   11514:	|  /-- bra.s 11518 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11516:	\--|-> moveq #1,d0
}
   11518:	   \-> addq.l #4,sp
   1151a:	       rts

0001151c <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   1151c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1151e:	       move.l sp,d0
   11520:	       move.l d0,-(sp)
   11522:	       move.l 16(sp),-(sp)
   11526:	       move.l 16(sp),-(sp)
   1152a:	       jsr 1148a <getFuncNumForCallback>
   11530:	       lea 12(sp),sp
   11534:	       tst.w d0
   11536:	/----- beq.s 11548 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11538:	|      movea.l 1a11c <currentEvents>,a0
   1153e:	|      move.l (sp),d0
   11540:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11544:	|      moveq #2,d0
   11546:	|  /-- bra.s 1154a <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11548:	\--|-> moveq #1,d0
}
   1154a:	   \-> addq.l #4,sp
   1154c:	       rts

0001154e <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   1154e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11550:	       move.l sp,d0
   11552:	       move.l d0,-(sp)
   11554:	       move.l 16(sp),-(sp)
   11558:	       move.l 16(sp),-(sp)
   1155c:	       jsr 1148a <getFuncNumForCallback>
   11562:	       lea 12(sp),sp
   11566:	       tst.w d0
   11568:	/----- beq.s 1157a <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   1156a:	|      movea.l 1a11c <currentEvents>,a0
   11570:	|      move.l (sp),d0
   11572:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11576:	|      moveq #2,d0
   11578:	|  /-- bra.s 1157c <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   1157a:	\--|-> moveq #1,d0
}
   1157c:	   \-> addq.l #4,sp
   1157e:	       rts

00011580 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11580:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11582:	       move.l sp,d0
   11584:	       move.l d0,-(sp)
   11586:	       move.l 16(sp),-(sp)
   1158a:	       move.l 16(sp),-(sp)
   1158e:	       jsr 1148a <getFuncNumForCallback>
   11594:	       lea 12(sp),sp
   11598:	       tst.w d0
   1159a:	/----- beq.s 115ac <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   1159c:	|      movea.l 1a11c <currentEvents>,a0
   115a2:	|      move.l (sp),d0
   115a4:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   115a8:	|      moveq #2,d0
   115aa:	|  /-- bra.s 115ae <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   115ac:	\--|-> moveq #1,d0
}
   115ae:	   \-> addq.l #4,sp
   115b0:	       rts

000115b2 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   115b2:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   115b4:	       move.l sp,d0
   115b6:	       move.l d0,-(sp)
   115b8:	       move.l 16(sp),-(sp)
   115bc:	       move.l 16(sp),-(sp)
   115c0:	       jsr 1148a <getFuncNumForCallback>
   115c6:	       lea 12(sp),sp
   115ca:	       tst.w d0
   115cc:	/----- beq.s 115de <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   115ce:	|      movea.l 1a11c <currentEvents>,a0
   115d4:	|      move.l (sp),d0
   115d6:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   115da:	|      moveq #2,d0
   115dc:	|  /-- bra.s 115e0 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   115de:	\--|-> moveq #1,d0
}
   115e0:	   \-> addq.l #4,sp
   115e2:	       rts

000115e4 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   115e4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   115e6:	       move.l sp,d0
   115e8:	       move.l d0,-(sp)
   115ea:	       move.l 16(sp),-(sp)
   115ee:	       move.l 16(sp),-(sp)
   115f2:	       jsr 1148a <getFuncNumForCallback>
   115f8:	       lea 12(sp),sp
   115fc:	       tst.w d0
   115fe:	/----- beq.s 11610 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11600:	|      movea.l 1a11c <currentEvents>,a0
   11606:	|      move.l (sp),d0
   11608:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   1160c:	|      moveq #2,d0
   1160e:	|  /-- bra.s 11612 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11610:	\--|-> moveq #1,d0
}
   11612:	   \-> addq.l #4,sp
   11614:	       rts

00011616 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11616:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11618:	       move.l sp,d0
   1161a:	       move.l d0,-(sp)
   1161c:	       move.l 16(sp),-(sp)
   11620:	       move.l 16(sp),-(sp)
   11624:	       jsr 1148a <getFuncNumForCallback>
   1162a:	       lea 12(sp),sp
   1162e:	       tst.w d0
   11630:	/----- beq.s 11642 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11632:	|      movea.l 1a11c <currentEvents>,a0
   11638:	|      move.l (sp),d0
   1163a:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   1163e:	|      moveq #2,d0
   11640:	|  /-- bra.s 11644 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11642:	\--|-> moveq #1,d0
}
   11644:	   \-> addq.l #4,sp
   11646:	       rts

00011648 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11648:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1164a:	          move.l sp,d0
   1164c:	          move.l d0,-(sp)
   1164e:	          move.l 16(sp),-(sp)
   11652:	          move.l 16(sp),-(sp)
   11656:	          jsr 1148a <getFuncNumForCallback>
   1165c:	          lea 12(sp),sp
   11660:	          tst.w d0
   11662:	/-------- beq.s 1168e <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11664:	|         move.l 1a774 <noStack>,d1
   1166a:	|         move.l (sp),d0
   1166c:	|         pea 1 <_start+0x1>
   11670:	|         move.l d1,-(sp)
   11672:	|         clr.l -(sp)
   11674:	|         clr.l -(sp)
   11676:	|         move.l d0,-(sp)
   11678:	|         jsr 63b0 <startNewFunctionNum>
   1167e:	|         lea 20(sp),sp
   11682:	|         tst.l d0
   11684:	|     /-- bne.s 1168a <builtIn_spawnSub+0x42>
   11686:	|     |   moveq #1,d0
   11688:	|  /--|-- bra.s 11690 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   1168a:	|  |  \-> moveq #2,d0
   1168c:	|  +----- bra.s 11690 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   1168e:	\--|----> moveq #1,d0
}
   11690:	   \----> addq.l #4,sp
   11692:	          rts

00011694 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11694:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11696:	          move.l sp,d0
   11698:	          addq.l #4,d0
   1169a:	          move.l d0,-(sp)
   1169c:	          move.l 20(sp),-(sp)
   116a0:	          move.l 20(sp),-(sp)
   116a4:	          jsr 1148a <getFuncNumForCallback>
   116aa:	          lea 12(sp),sp
   116ae:	          tst.w d0
   116b0:	/-------- beq.s 116e6 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   116b2:	|         move.l 4(sp),d1
   116b6:	|         move.l sp,d0
   116b8:	|         addq.l #2,d0
   116ba:	|         move.l d0,-(sp)
   116bc:	|         move.l 20(sp),-(sp)
   116c0:	|         move.l d1,-(sp)
   116c2:	|         jsr 40d6 <cancelAFunction>
   116c8:	|         lea 12(sp),sp
		if (killedMyself) {
   116cc:	|         move.w 2(sp),d0
   116d0:	|  /----- beq.s 116e2 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   116d2:	|  |      move.l 16(sp),-(sp)
   116d6:	|  |      jsr 3ff4 <abortFunction>
   116dc:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   116de:	|  |      moveq #5,d0
   116e0:	|  |  /-- bra.s 116e8 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   116e2:	|  \--|-> moveq #2,d0
   116e4:	|     +-- bra.s 116e8 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   116e6:	\-----|-> moveq #1,d0
}
   116e8:	      \-> addq.l #8,sp
   116ea:	          rts

000116ec <builtIn_stringWidth>:

builtIn(stringWidth)
{
   116ec:	       subq.l #8,sp
   116ee:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   116f0:	       movea.l 20(sp),a0
   116f4:	       move.l 24(a0),d0
   116f8:	       move.l d0,-(sp)
   116fa:	       jsr 1446c <getTextFromAnyVar>
   11700:	       addq.l #4,sp
   11702:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   11706:	   /-- bne.s 1170c <builtIn_stringWidth+0x20>
   11708:	   |   moveq #1,d0
   1170a:	/--|-- bra.s 1175a <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   1170c:	|  \-> moveq #24,d0
   1170e:	|      add.l 20(sp),d0
   11712:	|      move.l d0,-(sp)
   11714:	|      jsr 1481a <trimStack>
   1171a:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   1171c:	|      move.l 8(sp),-(sp)
   11720:	|      jsr 14f56 <stringWidth>
   11726:	|      addq.l #4,sp
   11728:	|      move.l d0,d1
   1172a:	|      moveq #28,d0
   1172c:	|      add.l 20(sp),d0
   11730:	|      move.l d1,-(sp)
   11732:	|      pea 1 <_start+0x1>
   11736:	|      move.l d0,-(sp)
   11738:	|      jsr 14788 <setVariable>
   1173e:	|      lea 12(sp),sp
	FreeVec(theText);
   11742:	|      move.l 8(sp),4(sp)
   11748:	|      move.l 1a7a4 <SysBase>,d0
   1174e:	|      movea.l d0,a6
   11750:	|      movea.l 4(sp),a1
   11754:	|      jsr -690(a6)
	return BR_CONTINUE;
   11758:	|      moveq #2,d0
}
   1175a:	\----> movea.l (sp)+,a6
   1175c:	       addq.l #8,sp
   1175e:	       rts

00011760 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   11760:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11762:	       movea.l 12(sp),a0
   11766:	       move.l 24(a0),d0
   1176a:	       move.l d0,-(sp)
   1176c:	       pea 1 <_start+0x1>
   11770:	       move.l sp,d0
   11772:	       addq.l #8,d0
   11774:	       move.l d0,-(sp)
   11776:	       jsr 13e96 <getValueType>
   1177c:	       lea 12(sp),sp
   11780:	       tst.w d0
   11782:	   /-- bne.s 11788 <builtIn_hardScroll+0x28>
   11784:	   |   moveq #1,d0
   11786:	/--|-- bra.s 117a6 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   11788:	|  \-> moveq #24,d0
   1178a:	|      add.l 12(sp),d0
   1178e:	|      move.l d0,-(sp)
   11790:	|      jsr 1481a <trimStack>
   11796:	|      addq.l #4,sp
	hardScroll (v);
   11798:	|      move.l (sp),d0
   1179a:	|      move.l d0,-(sp)
   1179c:	|      jsr c952 <hardScroll>
   117a2:	|      addq.l #4,sp
	return BR_CONTINUE;
   117a4:	|      moveq #2,d0
}
   117a6:	\----> addq.l #4,sp
   117a8:	       rts

000117aa <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   117aa:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117ac:	       movea.l 12(sp),a0
   117b0:	       move.l 24(a0),d0
   117b4:	       move.l d0,-(sp)
   117b6:	       pea 7 <_start+0x7>
   117ba:	       move.l sp,d0
   117bc:	       addq.l #8,d0
   117be:	       move.l d0,-(sp)
   117c0:	       jsr 13e96 <getValueType>
   117c6:	       lea 12(sp),sp
   117ca:	       tst.w d0
   117cc:	   /-- bne.s 117d2 <builtIn_isScreenRegion+0x28>
   117ce:	   |   moveq #1,d0
   117d0:	/--|-- bra.s 11812 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   117d2:	|  \-> moveq #24,d0
   117d4:	|      add.l 12(sp),d0
   117d8:	|      move.l d0,-(sp)
   117da:	|      jsr 1481a <trimStack>
   117e0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   117e2:	|      move.l (sp),d0
   117e4:	|      move.l d0,-(sp)
   117e6:	|      jsr 150b6 <getRegionForObject>
   117ec:	|      addq.l #4,sp
   117ee:	|      tst.l d0
   117f0:	|      sne d0
   117f2:	|      neg.b d0
   117f4:	|      moveq #0,d1
   117f6:	|      move.b d0,d1
   117f8:	|      moveq #28,d0
   117fa:	|      add.l 12(sp),d0
   117fe:	|      move.l d1,-(sp)
   11800:	|      pea 1 <_start+0x1>
   11804:	|      move.l d0,-(sp)
   11806:	|      jsr 14788 <setVariable>
   1180c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11810:	|      moveq #2,d0
}
   11812:	\----> addq.l #4,sp
   11814:	       rts

00011816 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   11816:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11818:	       movea.l 12(sp),a0
   1181c:	       move.l 24(a0),d0
   11820:	       move.l d0,-(sp)
   11822:	       pea 1 <_start+0x1>
   11826:	       move.l sp,d0
   11828:	       addq.l #8,d0
   1182a:	       move.l d0,-(sp)
   1182c:	       jsr 13e96 <getValueType>
   11832:	       lea 12(sp),sp
   11836:	       tst.w d0
   11838:	   /-- bne.s 1183e <builtIn_setSpeechSpeed+0x28>
   1183a:	   |   moveq #1,d0
   1183c:	/--|-- bra.s 1188c <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   1183e:	|  \-> moveq #24,d0
   11840:	|      add.l 12(sp),d0
   11844:	|      move.l d0,-(sp)
   11846:	|      jsr 1481a <trimStack>
   1184c:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   1184e:	|      move.l (sp),d0
   11850:	|      move.l d0,-(sp)
   11852:	|      jsr 16cd0 <__floatsisf>
   11858:	|      addq.l #4,sp
   1185a:	|      move.l #1008981770,-(sp)
   11860:	|      move.l d0,-(sp)
   11862:	|      jsr 16d82 <__mulsf3>
   11868:	|      addq.l #8,sp
   1186a:	|      move.l d0,1a12e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   11870:	|      moveq #28,d0
   11872:	|      add.l 12(sp),d0
   11876:	|      pea 1 <_start+0x1>
   1187a:	|      pea 1 <_start+0x1>
   1187e:	|      move.l d0,-(sp)
   11880:	|      jsr 14788 <setVariable>
   11886:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1188a:	|      moveq #2,d0
}
   1188c:	\----> addq.l #4,sp
   1188e:	       rts

00011890 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   11890:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11892:	       movea.l 12(sp),a0
   11896:	       move.l 24(a0),d0
   1189a:	       move.l d0,-(sp)
   1189c:	       pea 1 <_start+0x1>
   118a0:	       move.l sp,d0
   118a2:	       addq.l #8,d0
   118a4:	       move.l d0,-(sp)
   118a6:	       jsr 13e96 <getValueType>
   118ac:	       lea 12(sp),sp
   118b0:	       tst.w d0
   118b2:	   /-- bne.s 118b8 <builtIn_setFontSpacing+0x28>
   118b4:	   |   moveq #1,d0
   118b6:	/--|-- bra.s 118ee <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   118b8:	|  \-> move.l (sp),d0
   118ba:	|      move.l d0,d0
   118bc:	|      move.w d0,1a6a8 <fontSpace>
	trimStack (&fun -> stack);
   118c2:	|      moveq #24,d0
   118c4:	|      add.l 12(sp),d0
   118c8:	|      move.l d0,-(sp)
   118ca:	|      jsr 1481a <trimStack>
   118d0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   118d2:	|      moveq #28,d0
   118d4:	|      add.l 12(sp),d0
   118d8:	|      pea 1 <_start+0x1>
   118dc:	|      pea 1 <_start+0x1>
   118e0:	|      move.l d0,-(sp)
   118e2:	|      jsr 14788 <setVariable>
   118e8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   118ec:	|      moveq #2,d0
}
   118ee:	\----> addq.l #4,sp
   118f0:	       rts

000118f2 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   118f2:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   118f4:	          movea.l 12(sp),a0
   118f8:	          move.l 24(a0),d0
   118fc:	          move.l d0,-(sp)
   118fe:	          pea 1 <_start+0x1>
   11902:	          move.l sp,d0
   11904:	          addq.l #8,d0
   11906:	          move.l d0,-(sp)
   11908:	          jsr 13e96 <getValueType>
   1190e:	          lea 12(sp),sp
   11912:	          tst.w d0
   11914:	      /-- bne.s 1191a <builtIn_transitionLevel+0x28>
   11916:	      |   moveq #1,d0
   11918:	/-----|-- bra.s 1196e <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   1191a:	|     \-> moveq #24,d0
   1191c:	|         add.l 12(sp),d0
   11920:	|         move.l d0,-(sp)
   11922:	|         jsr 1481a <trimStack>
   11928:	|         addq.l #4,sp

	if (number < 0)
   1192a:	|         move.l (sp),d0
   1192c:	|     /-- bpl.s 11936 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   1192e:	|     |   clr.b 1a11a <brightnessLevel>
   11934:	|  /--|-- bra.s 11952 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   11936:	|  |  \-> move.l (sp),d0
   11938:	|  |      cmpi.l #255,d0
   1193e:	|  |  /-- ble.s 11948 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   11940:	|  |  |   st 1a11a <brightnessLevel>
   11946:	|  +--|-- bra.s 11952 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   11948:	|  |  \-> move.l (sp),d0
   1194a:	|  |      move.l d0,d0
   1194c:	|  |      move.b d0,1a11a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   11952:	|  \----> moveq #28,d0
   11954:	|         add.l 12(sp),d0
   11958:	|         pea 1 <_start+0x1>
   1195c:	|         pea 1 <_start+0x1>
   11960:	|         move.l d0,-(sp)
   11962:	|         jsr 14788 <setVariable>
   11968:	|         lea 12(sp),sp
	return BR_CONTINUE;
   1196c:	|         moveq #2,d0
}
   1196e:	\-------> addq.l #4,sp
   11970:	          rts

00011972 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   11972:	movea.l 8(sp),a0
   11976:	move.l 24(a0),d0
   1197a:	move.l d0,-(sp)
   1197c:	jsr 143d6 <getBoolean>
   11982:	addq.l #4,sp
   11984:	move.w d0,1a744 <captureAllKeys>
	trimStack (&fun -> stack);
   1198a:	moveq #24,d0
   1198c:	add.l 8(sp),d0
   11990:	move.l d0,-(sp)
   11992:	jsr 1481a <trimStack>
   11998:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   1199a:	move.w 1a744 <captureAllKeys>,d0
   119a0:	movea.w d0,a0
   119a2:	moveq #28,d0
   119a4:	add.l 8(sp),d0
   119a8:	move.l a0,-(sp)
   119aa:	pea 1 <_start+0x1>
   119ae:	move.l d0,-(sp)
   119b0:	jsr 14788 <setVariable>
   119b6:	lea 12(sp),sp
	return BR_CONTINUE;
   119ba:	moveq #2,d0
}
   119bc:	rts

000119be <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   119be:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   119c2:	       movea.l 20(sp),a0
   119c6:	       move.l 24(a0),d0
   119ca:	       move.l d0,-(sp)
   119cc:	       pea 1 <_start+0x1>
   119d0:	       moveq #12,d0
   119d2:	       add.l sp,d0
   119d4:	       move.l d0,-(sp)
   119d6:	       jsr 13e96 <getValueType>
   119dc:	       lea 12(sp),sp
   119e0:	       tst.w d0
   119e2:	   /-- bne.s 119ea <builtIn_spinCharacter+0x2c>
   119e4:	   |   moveq #1,d0
   119e6:	/--|-- bra.w 11a9a <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   119ea:	|  \-> moveq #24,d0
   119ec:	|      add.l 20(sp),d0
   119f0:	|      move.l d0,-(sp)
   119f2:	|      jsr 1481a <trimStack>
   119f8:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   119fa:	|      movea.l 20(sp),a0
   119fe:	|      move.l 24(a0),d0
   11a02:	|      move.l d0,-(sp)
   11a04:	|      pea 7 <_start+0x7>
   11a08:	|      lea 8(sp),a0
   11a0c:	|      move.l a0,-(sp)
   11a0e:	|      jsr 13e96 <getValueType>
   11a14:	|      lea 12(sp),sp
   11a18:	|      tst.w d0
   11a1a:	|  /-- bne.s 11a20 <builtIn_spinCharacter+0x62>
   11a1c:	|  |   moveq #1,d0
   11a1e:	+--|-- bra.s 11a9a <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   11a20:	|  \-> moveq #24,d0
   11a22:	|      add.l 20(sp),d0
   11a26:	|      move.l d0,-(sp)
   11a28:	|      jsr 1481a <trimStack>
   11a2e:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11a30:	|      move.l (sp),d0
   11a32:	|      move.l d0,-(sp)
   11a34:	|      jsr 9d8e <findPerson>
   11a3a:	|      addq.l #4,sp
   11a3c:	|      move.l d0,8(sp)
	if (thisPerson) {
   11a40:	|  /-- beq.s 11a80 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   11a42:	|  |   move.l 4(sp),d0
   11a46:	|  |   movea.l 8(sp),a0
   11a4a:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   11a4e:	|  |   movea.l 8(sp),a0
   11a52:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   11a58:	|  |   movea.l 8(sp),a0
   11a5c:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11a62:	|  |   moveq #28,d0
   11a64:	|  |   add.l 20(sp),d0
   11a68:	|  |   pea 1 <_start+0x1>
   11a6c:	|  |   pea 1 <_start+0x1>
   11a70:	|  |   move.l d0,-(sp)
   11a72:	|  |   jsr 14788 <setVariable>
   11a78:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   11a7c:	|  |   moveq #3,d0
   11a7e:	+--|-- bra.s 11a9a <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11a80:	|  \-> moveq #28,d0
   11a82:	|      add.l 20(sp),d0
   11a86:	|      clr.l -(sp)
   11a88:	|      pea 1 <_start+0x1>
   11a8c:	|      move.l d0,-(sp)
   11a8e:	|      jsr 14788 <setVariable>
   11a94:	|      lea 12(sp),sp
		return BR_CONTINUE;
   11a98:	|      moveq #2,d0
	}
}
   11a9a:	\----> lea 12(sp),sp
   11a9e:	       rts

00011aa0 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   11aa0:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11aa2:	          movea.l 16(sp),a0
   11aa6:	          move.l 24(a0),d0
   11aaa:	          move.l d0,-(sp)
   11aac:	          pea 7 <_start+0x7>
   11ab0:	          move.l sp,d0
   11ab2:	          addq.l #8,d0
   11ab4:	          move.l d0,-(sp)
   11ab6:	          jsr 13e96 <getValueType>
   11abc:	          lea 12(sp),sp
   11ac0:	          tst.w d0
   11ac2:	      /-- bne.s 11ac8 <builtIn_getCharacterDirection+0x28>
   11ac4:	      |   moveq #1,d0
   11ac6:	/-----|-- bra.s 11b26 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   11ac8:	|     \-> moveq #24,d0
   11aca:	|         add.l 16(sp),d0
   11ace:	|         move.l d0,-(sp)
   11ad0:	|         jsr 1481a <trimStack>
   11ad6:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11ad8:	|         move.l (sp),d0
   11ada:	|         move.l d0,-(sp)
   11adc:	|         jsr 9d8e <findPerson>
   11ae2:	|         addq.l #4,sp
   11ae4:	|         move.l d0,4(sp)
	if (thisPerson) {
   11ae8:	|  /----- beq.s 11b0c <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   11aea:	|  |      movea.l 4(sp),a0
   11aee:	|  |      move.l 106(a0),d1
   11af2:	|  |      moveq #28,d0
   11af4:	|  |      add.l 16(sp),d0
   11af8:	|  |      move.l d1,-(sp)
   11afa:	|  |      pea 1 <_start+0x1>
   11afe:	|  |      move.l d0,-(sp)
   11b00:	|  |      jsr 14788 <setVariable>
   11b06:	|  |      lea 12(sp),sp
   11b0a:	|  |  /-- bra.s 11b24 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11b0c:	|  \--|-> moveq #28,d0
   11b0e:	|     |   add.l 16(sp),d0
   11b12:	|     |   clr.l -(sp)
   11b14:	|     |   pea 1 <_start+0x1>
   11b18:	|     |   move.l d0,-(sp)
   11b1a:	|     |   jsr 14788 <setVariable>
   11b20:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11b24:	|     \-> moveq #2,d0
}
   11b26:	\-------> addq.l #8,sp
   11b28:	          rts

00011b2a <builtIn_isCharacter>:

builtIn(isCharacter)
{
   11b2a:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b2c:	       movea.l 16(sp),a0
   11b30:	       move.l 24(a0),d0
   11b34:	       move.l d0,-(sp)
   11b36:	       pea 7 <_start+0x7>
   11b3a:	       move.l sp,d0
   11b3c:	       addq.l #8,d0
   11b3e:	       move.l d0,-(sp)
   11b40:	       jsr 13e96 <getValueType>
   11b46:	       lea 12(sp),sp
   11b4a:	       tst.w d0
   11b4c:	   /-- bne.s 11b52 <builtIn_isCharacter+0x28>
   11b4e:	   |   moveq #1,d0
   11b50:	/--|-- bra.s 11b94 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   11b52:	|  \-> moveq #24,d0
   11b54:	|      add.l 16(sp),d0
   11b58:	|      move.l d0,-(sp)
   11b5a:	|      jsr 1481a <trimStack>
   11b60:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11b62:	|      move.l (sp),d0
   11b64:	|      move.l d0,-(sp)
   11b66:	|      jsr 9d8e <findPerson>
   11b6c:	|      addq.l #4,sp
   11b6e:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   11b72:	|      sne d0
   11b74:	|      neg.b d0
   11b76:	|      moveq #0,d1
   11b78:	|      move.b d0,d1
   11b7a:	|      moveq #28,d0
   11b7c:	|      add.l 16(sp),d0
   11b80:	|      move.l d1,-(sp)
   11b82:	|      pea 1 <_start+0x1>
   11b86:	|      move.l d0,-(sp)
   11b88:	|      jsr 14788 <setVariable>
   11b8e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11b92:	|      moveq #2,d0
}
   11b94:	\----> addq.l #8,sp
   11b96:	       rts

00011b98 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   11b98:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b9a:	          movea.l 16(sp),a0
   11b9e:	          move.l 24(a0),d0
   11ba2:	          move.l d0,-(sp)
   11ba4:	          pea 7 <_start+0x7>
   11ba8:	          move.l sp,d0
   11baa:	          addq.l #8,d0
   11bac:	          move.l d0,-(sp)
   11bae:	          jsr 13e96 <getValueType>
   11bb4:	          lea 12(sp),sp
   11bb8:	          tst.w d0
   11bba:	      /-- bne.s 11bc0 <builtIn_normalCharacter+0x28>
   11bbc:	      |   moveq #1,d0
   11bbe:	/-----|-- bra.s 11c3c <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   11bc0:	|     \-> moveq #24,d0
   11bc2:	|         add.l 16(sp),d0
   11bc6:	|         move.l d0,-(sp)
   11bc8:	|         jsr 1481a <trimStack>
   11bce:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11bd0:	|         move.l (sp),d0
   11bd2:	|         move.l d0,-(sp)
   11bd4:	|         jsr 9d8e <findPerson>
   11bda:	|         addq.l #4,sp
   11bdc:	|         move.l d0,4(sp)
	if (thisPerson)
   11be0:	|  /----- beq.s 11c22 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   11be2:	|  |      movea.l 4(sp),a0
   11be6:	|  |      movea.l 80(a0),a0
   11bea:	|  |      move.l (a0),d1
   11bec:	|  |      movea.l 4(sp),a0
   11bf0:	|  |      move.l 106(a0),d0
   11bf4:	|  |      add.l d0,d0
   11bf6:	|  |      add.l d0,d0
   11bf8:	|  |      movea.l d1,a0
   11bfa:	|  |      adda.l d0,a0
   11bfc:	|  |      move.l (a0),d0
   11bfe:	|  |      movea.l 4(sp),a0
   11c02:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11c06:	|  |      moveq #28,d0
   11c08:	|  |      add.l 16(sp),d0
   11c0c:	|  |      pea 1 <_start+0x1>
   11c10:	|  |      pea 1 <_start+0x1>
   11c14:	|  |      move.l d0,-(sp)
   11c16:	|  |      jsr 14788 <setVariable>
   11c1c:	|  |      lea 12(sp),sp
   11c20:	|  |  /-- bra.s 11c3a <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11c22:	|  \--|-> moveq #28,d0
   11c24:	|     |   add.l 16(sp),d0
   11c28:	|     |   clr.l -(sp)
   11c2a:	|     |   pea 1 <_start+0x1>
   11c2e:	|     |   move.l d0,-(sp)
   11c30:	|     |   jsr 14788 <setVariable>
   11c36:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11c3a:	|     \-> moveq #2,d0
}
   11c3c:	\-------> addq.l #8,sp
   11c3e:	          rts

00011c40 <builtIn_isMoving>:

builtIn(isMoving)
{
   11c40:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11c42:	          movea.l 16(sp),a0
   11c46:	          move.l 24(a0),d0
   11c4a:	          move.l d0,-(sp)
   11c4c:	          pea 7 <_start+0x7>
   11c50:	          move.l sp,d0
   11c52:	          addq.l #8,d0
   11c54:	          move.l d0,-(sp)
   11c56:	          jsr 13e96 <getValueType>
   11c5c:	          lea 12(sp),sp
   11c60:	          tst.w d0
   11c62:	      /-- bne.s 11c68 <builtIn_isMoving+0x28>
   11c64:	      |   moveq #1,d0
   11c66:	/-----|-- bra.s 11cc8 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   11c68:	|     \-> moveq #24,d0
   11c6a:	|         add.l 16(sp),d0
   11c6e:	|         move.l d0,-(sp)
   11c70:	|         jsr 1481a <trimStack>
   11c76:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11c78:	|         move.l (sp),d0
   11c7a:	|         move.l d0,-(sp)
   11c7c:	|         jsr 9d8e <findPerson>
   11c82:	|         addq.l #4,sp
   11c84:	|         move.l d0,4(sp)
	if (thisPerson)
   11c88:	|  /----- beq.s 11cae <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   11c8a:	|  |      movea.l 4(sp),a0
   11c8e:	|  |      move.w 64(a0),d0
   11c92:	|  |      movea.w d0,a0
   11c94:	|  |      moveq #28,d0
   11c96:	|  |      add.l 16(sp),d0
   11c9a:	|  |      move.l a0,-(sp)
   11c9c:	|  |      pea 1 <_start+0x1>
   11ca0:	|  |      move.l d0,-(sp)
   11ca2:	|  |      jsr 14788 <setVariable>
   11ca8:	|  |      lea 12(sp),sp
   11cac:	|  |  /-- bra.s 11cc6 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11cae:	|  \--|-> moveq #28,d0
   11cb0:	|     |   add.l 16(sp),d0
   11cb4:	|     |   clr.l -(sp)
   11cb6:	|     |   pea 1 <_start+0x1>
   11cba:	|     |   move.l d0,-(sp)
   11cbc:	|     |   jsr 14788 <setVariable>
   11cc2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11cc6:	|     \-> moveq #2,d0
}
   11cc8:	\-------> addq.l #8,sp
   11cca:	          rts

00011ccc <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   11ccc:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11cd0:	          movea.l 20(sp),a0
   11cd4:	          move.l 24(a0),d0
   11cd8:	          move.l d0,-(sp)
   11cda:	          pea 7 <_start+0x7>
   11cde:	          lea 8(sp),a0
   11ce2:	          move.l a0,-(sp)
   11ce4:	          jsr 13e96 <getValueType>
   11cea:	          lea 12(sp),sp
   11cee:	          tst.w d0
   11cf0:	      /-- bne.s 11cf8 <builtIn_fetchEvent+0x2c>
   11cf2:	      |   moveq #1,d0
   11cf4:	/-----|-- bra.w 11d8c <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   11cf8:	|     \-> moveq #24,d0
   11cfa:	|         add.l 20(sp),d0
   11cfe:	|         move.l d0,-(sp)
   11d00:	|         jsr 1481a <trimStack>
   11d06:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11d08:	|         movea.l 20(sp),a0
   11d0c:	|         move.l 24(a0),d0
   11d10:	|         move.l d0,-(sp)
   11d12:	|         pea 7 <_start+0x7>
   11d16:	|         moveq #12,d0
   11d18:	|         add.l sp,d0
   11d1a:	|         move.l d0,-(sp)
   11d1c:	|         jsr 13e96 <getValueType>
   11d22:	|         lea 12(sp),sp
   11d26:	|         tst.w d0
   11d28:	|     /-- bne.s 11d2e <builtIn_fetchEvent+0x62>
   11d2a:	|     |   moveq #1,d0
   11d2c:	+-----|-- bra.s 11d8c <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   11d2e:	|     \-> moveq #24,d0
   11d30:	|         add.l 20(sp),d0
   11d34:	|         move.l d0,-(sp)
   11d36:	|         jsr 1481a <trimStack>
   11d3c:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   11d3e:	|         move.l (sp),d1
   11d40:	|         move.l 4(sp),d0
   11d44:	|         move.l d1,-(sp)
   11d46:	|         move.l d0,-(sp)
   11d48:	|         jsr cc34 <getCombinationFunction>
   11d4e:	|         addq.l #8,sp
   11d50:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   11d54:	|  /----- beq.s 11d72 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   11d56:	|  |      moveq #28,d0
   11d58:	|  |      add.l 20(sp),d0
   11d5c:	|  |      move.l 8(sp),-(sp)
   11d60:	|  |      pea 2 <_start+0x2>
   11d64:	|  |      move.l d0,-(sp)
   11d66:	|  |      jsr 14788 <setVariable>
   11d6c:	|  |      lea 12(sp),sp
   11d70:	|  |  /-- bra.s 11d8a <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11d72:	|  \--|-> moveq #28,d0
   11d74:	|     |   add.l 20(sp),d0
   11d78:	|     |   clr.l -(sp)
   11d7a:	|     |   pea 1 <_start+0x1>
   11d7e:	|     |   move.l d0,-(sp)
   11d80:	|     |   jsr 14788 <setVariable>
   11d86:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11d8a:	|     \-> moveq #2,d0
}
   11d8c:	\-------> lea 12(sp),sp
   11d90:	          rts

00011d92 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   11d92:	       lea -24(sp),sp
   11d96:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   11d98:	       movea.l 36(sp),a0
   11d9c:	       move.l 24(a0),d0
   11da0:	       move.l d0,-(sp)
   11da2:	       jsr 1446c <getTextFromAnyVar>
   11da8:	       addq.l #4,sp
   11daa:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   11dae:	       moveq #24,d0
   11db0:	       add.l 36(sp),d0
   11db4:	       move.l d0,-(sp)
   11db6:	       jsr 1481a <trimStack>
   11dbc:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   11dbe:	       move.l 24(sp),-(sp)
   11dc2:	       jsr 2fe <encodeFilename>
   11dc8:	       addq.l #4,sp
   11dca:	       move.l d0,20(sp)
    FreeVec(namNormal);
   11dce:	       move.l 24(sp),16(sp)
   11dd4:	       move.l 1a7a4 <SysBase>,d0
   11dda:	       movea.l d0,a6
   11ddc:	       movea.l 16(sp),a1
   11de0:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   11de4:	       move.l 20(sp),-(sp)
   11de8:	       jsr d9ec <failSecurityCheck>
   11dee:	       addq.l #4,sp
   11df0:	       tst.w d0
   11df2:	   /-- beq.s 11df8 <builtIn_deleteFile+0x66>
   11df4:	   |   moveq #1,d0
   11df6:	/--|-- bra.s 11e46 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   11df8:	|  \-> move.l 20(sp),12(sp)
   11dfe:	|      move.l 1a7ac <DOSBase>,d0
   11e04:	|      movea.l d0,a6
   11e06:	|      move.l 12(sp),d1
   11e0a:	|      jsr -72(a6)
   11e0e:	|      move.l d0,8(sp)
   11e12:	|      move.l 8(sp),d1
   11e16:	|      moveq #28,d0
   11e18:	|      add.l 36(sp),d0
   11e1c:	|      move.l d1,-(sp)
   11e1e:	|      pea 1 <_start+0x1>
   11e22:	|      move.l d0,-(sp)
   11e24:	|      jsr 14788 <setVariable>
   11e2a:	|      lea 12(sp),sp
    FreeVec(nam);
   11e2e:	|      move.l 20(sp),4(sp)
   11e34:	|      move.l 1a7a4 <SysBase>,d0
   11e3a:	|      movea.l d0,a6
   11e3c:	|      movea.l 4(sp),a1
   11e40:	|      jsr -690(a6)

    return BR_CONTINUE;
   11e44:	|      moveq #2,d0
}
   11e46:	\----> movea.l (sp)+,a6
   11e48:	       lea 24(sp),sp
   11e4c:	       rts

00011e4e <builtIn_renameFile>:

builtIn(renameFile)
{
   11e4e:	       lea -40(sp),sp
   11e52:	       move.l a6,-(sp)
   11e54:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   11e56:	       movea.l 56(sp),a0
   11e5a:	       move.l 24(a0),d0
   11e5e:	       move.l d0,-(sp)
   11e60:	       jsr 1446c <getTextFromAnyVar>
   11e66:	       addq.l #4,sp
   11e68:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   11e6c:	       move.l 44(sp),-(sp)
   11e70:	       jsr 2fe <encodeFilename>
   11e76:	       addq.l #4,sp
   11e78:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   11e7c:	       moveq #24,d0
   11e7e:	       add.l 56(sp),d0
   11e82:	       move.l d0,-(sp)
   11e84:	       jsr 1481a <trimStack>
   11e8a:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   11e8c:	       move.l 40(sp),-(sp)
   11e90:	       jsr d9ec <failSecurityCheck>
   11e96:	       addq.l #4,sp
   11e98:	       tst.w d0
   11e9a:	   /-- beq.s 11ea2 <builtIn_renameFile+0x54>
   11e9c:	   |   moveq #1,d0
   11e9e:	/--|-- bra.w 11f88 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   11ea2:	|  \-> move.l 44(sp),36(sp)
   11ea8:	|      move.l 1a7a4 <SysBase>,d0
   11eae:	|      movea.l d0,a6
   11eb0:	|      movea.l 36(sp),a1
   11eb4:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   11eb8:	|      movea.l 56(sp),a0
   11ebc:	|      move.l 24(a0),d0
   11ec0:	|      move.l d0,-(sp)
   11ec2:	|      jsr 1446c <getTextFromAnyVar>
   11ec8:	|      addq.l #4,sp
   11eca:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   11ece:	|      move.l 44(sp),-(sp)
   11ed2:	|      jsr 2fe <encodeFilename>
   11ed8:	|      addq.l #4,sp
   11eda:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   11ede:	|      moveq #24,d0
   11ee0:	|      add.l 56(sp),d0
   11ee4:	|      move.l d0,-(sp)
   11ee6:	|      jsr 1481a <trimStack>
   11eec:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   11eee:	|      move.l 32(sp),-(sp)
   11ef2:	|      jsr d9ec <failSecurityCheck>
   11ef8:	|      addq.l #4,sp
   11efa:	|      tst.w d0
   11efc:	|  /-- beq.s 11f04 <builtIn_renameFile+0xb6>
   11efe:	|  |   moveq #1,d0
   11f00:	+--|-- bra.w 11f88 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   11f04:	|  \-> move.l 44(sp),28(sp)
   11f0a:	|      move.l 1a7a4 <SysBase>,d0
   11f10:	|      movea.l d0,a6
   11f12:	|      movea.l 28(sp),a1
   11f16:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   11f1a:	|      move.l 32(sp),24(sp)
   11f20:	|      move.l 40(sp),20(sp)
   11f26:	|      move.l 1a7ac <DOSBase>,d0
   11f2c:	|      movea.l d0,a6
   11f2e:	|      move.l 24(sp),d1
   11f32:	|      move.l 20(sp),d2
   11f36:	|      jsr -78(a6)
   11f3a:	|      move.l d0,16(sp)
   11f3e:	|      move.l 16(sp),d1
   11f42:	|      moveq #28,d0
   11f44:	|      add.l 56(sp),d0
   11f48:	|      move.l d1,-(sp)
   11f4a:	|      pea 1 <_start+0x1>
   11f4e:	|      move.l d0,-(sp)
   11f50:	|      jsr 14788 <setVariable>
   11f56:	|      lea 12(sp),sp
	FreeVec(nam);
   11f5a:	|      move.l 32(sp),12(sp)
   11f60:	|      move.l 1a7a4 <SysBase>,d0
   11f66:	|      movea.l d0,a6
   11f68:	|      movea.l 12(sp),a1
   11f6c:	|      jsr -690(a6)
	FreeVec(newnam);
   11f70:	|      move.l 40(sp),8(sp)
   11f76:	|      move.l 1a7a4 <SysBase>,d0
   11f7c:	|      movea.l d0,a6
   11f7e:	|      movea.l 8(sp),a1
   11f82:	|      jsr -690(a6)

	return BR_CONTINUE;
   11f86:	|      moveq #2,d0
}
   11f88:	\----> move.l (sp)+,d2
   11f8a:	       movea.l (sp)+,a6
   11f8c:	       lea 40(sp),sp
   11f90:	       rts

00011f92 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   11f92:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f94:	       movea.l 12(sp),a0
   11f98:	       move.l 24(a0),d0
   11f9c:	       move.l d0,-(sp)
   11f9e:	       pea 5 <_start+0x5>
   11fa2:	       move.l sp,d0
   11fa4:	       addq.l #8,d0
   11fa6:	       move.l d0,-(sp)
   11fa8:	       jsr 13e96 <getValueType>
   11fae:	       lea 12(sp),sp
   11fb2:	       tst.w d0
   11fb4:	   /-- bne.s 11fba <builtIn_cacheSound+0x28>
   11fb6:	   |   moveq #1,d0
   11fb8:	/--|-- bra.s 11fe2 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   11fba:	|  \-> moveq #24,d0
   11fbc:	|      add.l 12(sp),d0
   11fc0:	|      move.l d0,-(sp)
   11fc2:	|      jsr 1481a <trimStack>
   11fc8:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   11fca:	|      move.l (sp),d0
   11fcc:	|      move.l d0,-(sp)
   11fce:	|      jsr c834 <cacheSound>
   11fd4:	|      addq.l #4,sp
   11fd6:	|      moveq #-1,d1
   11fd8:	|      cmp.l d0,d1
   11fda:	|  /-- bne.s 11fe0 <builtIn_cacheSound+0x4e>
   11fdc:	|  |   moveq #1,d0
   11fde:	+--|-- bra.s 11fe2 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   11fe0:	|  \-> moveq #2,d0
}
   11fe2:	\----> addq.l #4,sp
   11fe4:	       rts

00011fe6 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   11fe6:	pea 191ec <graphics.c.1c13408a+0x128>
   11fec:	jsr 16894 <KPrintF>
   11ff2:	addq.l #4,sp
	return BR_CONTINUE;
   11ff4:	moveq #2,d0
}
   11ff6:	rts

00011ff8 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   11ff8:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ffc:	          movea.l 20(sp),a0
   12000:	          move.l 24(a0),d0
   12004:	          move.l d0,-(sp)
   12006:	          pea 1 <_start+0x1>
   1200a:	          moveq #12,d0
   1200c:	          add.l sp,d0
   1200e:	          move.l d0,-(sp)
   12010:	          jsr 13e96 <getValueType>
   12016:	          lea 12(sp),sp
   1201a:	          tst.w d0
   1201c:	      /-- bne.s 12024 <builtIn_setCharacterSpinSpeed+0x2c>
   1201e:	      |   moveq #1,d0
   12020:	/-----|-- bra.w 120be <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12024:	|     \-> moveq #24,d0
   12026:	|         add.l 20(sp),d0
   1202a:	|         move.l d0,-(sp)
   1202c:	|         jsr 1481a <trimStack>
   12032:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12034:	|         movea.l 20(sp),a0
   12038:	|         move.l 24(a0),d0
   1203c:	|         move.l d0,-(sp)
   1203e:	|         pea 7 <_start+0x7>
   12042:	|         lea 8(sp),a0
   12046:	|         move.l a0,-(sp)
   12048:	|         jsr 13e96 <getValueType>
   1204e:	|         lea 12(sp),sp
   12052:	|         tst.w d0
   12054:	|     /-- bne.s 1205a <builtIn_setCharacterSpinSpeed+0x62>
   12056:	|     |   moveq #1,d0
   12058:	+-----|-- bra.s 120be <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1205a:	|     \-> moveq #24,d0
   1205c:	|         add.l 20(sp),d0
   12060:	|         move.l d0,-(sp)
   12062:	|         jsr 1481a <trimStack>
   12068:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   1206a:	|         move.l (sp),d0
   1206c:	|         move.l d0,-(sp)
   1206e:	|         jsr 9d8e <findPerson>
   12074:	|         addq.l #4,sp
   12076:	|         move.l d0,8(sp)

	if (thisPerson) {
   1207a:	|  /----- beq.s 120a4 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   1207c:	|  |      move.l 4(sp),d0
   12080:	|  |      movea.l 8(sp),a0
   12084:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12088:	|  |      moveq #28,d0
   1208a:	|  |      add.l 20(sp),d0
   1208e:	|  |      pea 1 <_start+0x1>
   12092:	|  |      pea 1 <_start+0x1>
   12096:	|  |      move.l d0,-(sp)
   12098:	|  |      jsr 14788 <setVariable>
   1209e:	|  |      lea 12(sp),sp
   120a2:	|  |  /-- bra.s 120bc <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   120a4:	|  \--|-> moveq #28,d0
   120a6:	|     |   add.l 20(sp),d0
   120aa:	|     |   clr.l -(sp)
   120ac:	|     |   pea 1 <_start+0x1>
   120b0:	|     |   move.l d0,-(sp)
   120b2:	|     |   jsr 14788 <setVariable>
   120b8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   120bc:	|     \-> moveq #2,d0
}
   120be:	\-------> lea 12(sp),sp
   120c2:	          rts

000120c4 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   120c4:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   120c8:	          movea.l 20(sp),a0
   120cc:	          move.l 24(a0),d0
   120d0:	          move.l d0,-(sp)
   120d2:	          pea 1 <_start+0x1>
   120d6:	          moveq #12,d0
   120d8:	          add.l sp,d0
   120da:	          move.l d0,-(sp)
   120dc:	          jsr 13e96 <getValueType>
   120e2:	          lea 12(sp),sp
   120e6:	          tst.w d0
   120e8:	      /-- bne.s 120f0 <builtIn_setCharacterAngleOffset+0x2c>
   120ea:	      |   moveq #1,d0
   120ec:	/-----|-- bra.w 1218a <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   120f0:	|     \-> moveq #24,d0
   120f2:	|         add.l 20(sp),d0
   120f6:	|         move.l d0,-(sp)
   120f8:	|         jsr 1481a <trimStack>
   120fe:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12100:	|         movea.l 20(sp),a0
   12104:	|         move.l 24(a0),d0
   12108:	|         move.l d0,-(sp)
   1210a:	|         pea 7 <_start+0x7>
   1210e:	|         lea 8(sp),a0
   12112:	|         move.l a0,-(sp)
   12114:	|         jsr 13e96 <getValueType>
   1211a:	|         lea 12(sp),sp
   1211e:	|         tst.w d0
   12120:	|     /-- bne.s 12126 <builtIn_setCharacterAngleOffset+0x62>
   12122:	|     |   moveq #1,d0
   12124:	+-----|-- bra.s 1218a <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12126:	|     \-> moveq #24,d0
   12128:	|         add.l 20(sp),d0
   1212c:	|         move.l d0,-(sp)
   1212e:	|         jsr 1481a <trimStack>
   12134:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12136:	|         move.l (sp),d0
   12138:	|         move.l d0,-(sp)
   1213a:	|         jsr 9d8e <findPerson>
   12140:	|         addq.l #4,sp
   12142:	|         move.l d0,8(sp)

	if (thisPerson) {
   12146:	|  /----- beq.s 12170 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12148:	|  |      move.l 4(sp),d0
   1214c:	|  |      movea.l 8(sp),a0
   12150:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12154:	|  |      moveq #28,d0
   12156:	|  |      add.l 20(sp),d0
   1215a:	|  |      pea 1 <_start+0x1>
   1215e:	|  |      pea 1 <_start+0x1>
   12162:	|  |      move.l d0,-(sp)
   12164:	|  |      jsr 14788 <setVariable>
   1216a:	|  |      lea 12(sp),sp
   1216e:	|  |  /-- bra.s 12188 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12170:	|  \--|-> moveq #28,d0
   12172:	|     |   add.l 20(sp),d0
   12176:	|     |   clr.l -(sp)
   12178:	|     |   pea 1 <_start+0x1>
   1217c:	|     |   move.l d0,-(sp)
   1217e:	|     |   jsr 14788 <setVariable>
   12184:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12188:	|     \-> moveq #2,d0
}
   1218a:	\-------> lea 12(sp),sp
   1218e:	          rts

00012190 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12190:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12192:	       movea.l 12(sp),a0
   12196:	       move.l 24(a0),d0
   1219a:	       move.l d0,-(sp)
   1219c:	       pea 1 <_start+0x1>
   121a0:	       move.l sp,d0
   121a2:	       addq.l #8,d0
   121a4:	       move.l d0,-(sp)
   121a6:	       jsr 13e96 <getValueType>
   121ac:	       lea 12(sp),sp
   121b0:	       tst.w d0
   121b2:	   /-- bne.s 121b8 <builtIn_transitionMode+0x28>
   121b4:	   |   moveq #1,d0
   121b6:	/--|-- bra.s 121ee <builtIn_transitionMode+0x5e>
	fadeMode = n;
   121b8:	|  \-> move.l (sp),d0
   121ba:	|      move.l d0,d0
   121bc:	|      move.b d0,1a67e <fadeMode>
	trimStack (&fun -> stack);
   121c2:	|      moveq #24,d0
   121c4:	|      add.l 12(sp),d0
   121c8:	|      move.l d0,-(sp)
   121ca:	|      jsr 1481a <trimStack>
   121d0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   121d2:	|      moveq #28,d0
   121d4:	|      add.l 12(sp),d0
   121d8:	|      pea 1 <_start+0x1>
   121dc:	|      pea 1 <_start+0x1>
   121e0:	|      move.l d0,-(sp)
   121e2:	|      jsr 14788 <setVariable>
   121e8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   121ec:	|      moveq #2,d0
}
   121ee:	\----> addq.l #4,sp
   121f0:	       rts

000121f2 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   121f2:	moveq #24,d0
   121f4:	add.l 8(sp),d0
   121f8:	move.l d0,-(sp)
   121fa:	jsr 1481a <trimStack>
   12200:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12202:	moveq #28,d0
   12204:	add.l 8(sp),d0
   12208:	pea 1 <_start+0x1>
   1220c:	pea 1 <_start+0x1>
   12210:	move.l d0,-(sp)
   12212:	jsr 14788 <setVariable>
   12218:	lea 12(sp),sp
	return BR_CONTINUE;
   1221c:	moveq #2,d0
}
   1221e:	rts

00012220 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12220:	pea 19216 <graphics.c.1c13408a+0x152>
   12226:	jsr 16894 <KPrintF>
   1222c:	addq.l #4,sp
	return BR_CONTINUE;
   1222e:	moveq #2,d0
}
   12230:	rts

00012232 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12232:	       lea -16(sp),sp
   12236:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12238:	       movea.l 28(sp),a0
   1223c:	       move.l 24(a0),d0
   12240:	       move.l d0,-(sp)
   12242:	       jsr 1446c <getTextFromAnyVar>
   12248:	       addq.l #4,sp
   1224a:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   1224e:	   /-- bne.s 12256 <builtIn_saveCustomData+0x24>
   12250:	   |   moveq #1,d0
   12252:	/--|-- bra.w 12308 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12256:	|  \-> move.l 16(sp),-(sp)
   1225a:	|      jsr 2fe <encodeFilename>
   12260:	|      addq.l #4,sp
   12262:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12266:	|      move.l 16(sp),8(sp)
   1226c:	|      move.l 1a7a4 <SysBase>,d0
   12272:	|      movea.l d0,a6
   12274:	|      movea.l 8(sp),a1
   12278:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   1227c:	|      move.l 12(sp),-(sp)
   12280:	|      jsr d9ec <failSecurityCheck>
   12286:	|      addq.l #4,sp
   12288:	|      tst.w d0
   1228a:	|  /-- beq.s 12290 <builtIn_saveCustomData+0x5e>
   1228c:	|  |   moveq #1,d0
   1228e:	+--|-- bra.s 12308 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12290:	|  \-> moveq #24,d0
   12292:	|      add.l 28(sp),d0
   12296:	|      move.l d0,-(sp)
   12298:	|      jsr 1481a <trimStack>
   1229e:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   122a0:	|      movea.l 28(sp),a0
   122a4:	|      movea.l 24(a0),a0
   122a8:	|      move.l (a0),d0
   122aa:	|      moveq #6,d1
   122ac:	|      cmp.l d0,d1
   122ae:	|  /-- beq.s 122c2 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   122b0:	|  |   pea 19243 <graphics.c.1c13408a+0x17f>
   122b6:	|  |   jsr 16894 <KPrintF>
   122bc:	|  |   addq.l #4,sp
		return BR_ERROR;
   122be:	|  |   moveq #1,d0
   122c0:	+--|-- bra.s 12308 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   122c2:	|  \-> movea.l 28(sp),a0
   122c6:	|      move.l 24(a0),d0
   122ca:	|      move.l d0,-(sp)
   122cc:	|      move.l 16(sp),-(sp)
   122d0:	|      jsr d63c <stackToFile>
   122d6:	|      addq.l #8,sp
   122d8:	|      tst.w d0
   122da:	|  /-- bne.s 122e0 <builtIn_saveCustomData+0xae>
   122dc:	|  |   moveq #1,d0
   122de:	+--|-- bra.s 12308 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   122e0:	|  \-> moveq #24,d0
   122e2:	|      add.l 28(sp),d0
   122e6:	|      move.l d0,-(sp)
   122e8:	|      jsr 1481a <trimStack>
   122ee:	|      addq.l #4,sp
	FreeVec(fileName);
   122f0:	|      move.l 12(sp),4(sp)
   122f6:	|      move.l 1a7a4 <SysBase>,d0
   122fc:	|      movea.l d0,a6
   122fe:	|      movea.l 4(sp),a1
   12302:	|      jsr -690(a6)
	return BR_CONTINUE;
   12306:	|      moveq #2,d0
}
   12308:	\----> movea.l (sp)+,a6
   1230a:	       lea 16(sp),sp
   1230e:	       rts

00012310 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12310:	       lea -28(sp),sp
   12314:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12316:	       movea.l 40(sp),a0
   1231a:	       move.l 24(a0),d0
   1231e:	       move.l d0,-(sp)
   12320:	       jsr 1446c <getTextFromAnyVar>
   12326:	       addq.l #4,sp
   12328:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   1232c:	   /-- bne.s 12334 <builtIn_loadCustomData+0x24>
   1232e:	   |   moveq #1,d0
   12330:	/--|-- bra.w 12430 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12334:	|  \-> move.l 28(sp),-(sp)
   12338:	|      jsr 2fe <encodeFilename>
   1233e:	|      addq.l #4,sp
   12340:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12344:	|      move.l 28(sp),20(sp)
   1234a:	|      move.l 1a7a4 <SysBase>,d0
   12350:	|      movea.l d0,a6
   12352:	|      movea.l 20(sp),a1
   12356:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   1235a:	|      move.l 24(sp),-(sp)
   1235e:	|      jsr d9ec <failSecurityCheck>
   12364:	|      addq.l #4,sp
   12366:	|      tst.w d0
   12368:	|  /-- beq.s 12370 <builtIn_loadCustomData+0x60>
   1236a:	|  |   moveq #1,d0
   1236c:	+--|-- bra.w 12430 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12370:	|  \-> moveq #24,d0
   12372:	|      add.l 40(sp),d0
   12376:	|      move.l d0,-(sp)
   12378:	|      jsr 1481a <trimStack>
   1237e:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12380:	|      moveq #28,d0
   12382:	|      add.l 40(sp),d0
   12386:	|      move.l d0,-(sp)
   12388:	|      jsr 140e4 <unlinkVar>
   1238e:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12390:	|      movea.l 40(sp),a0
   12394:	|      moveq #6,d0
   12396:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   1239a:	|      moveq #12,d0
   1239c:	|      move.l d0,16(sp)
   123a0:	|      clr.l 12(sp)
   123a4:	|      move.l 1a7a4 <SysBase>,d0
   123aa:	|      movea.l d0,a6
   123ac:	|      move.l 16(sp),d0
   123b0:	|      move.l 12(sp),d1
   123b4:	|      jsr -684(a6)
   123b8:	|      move.l d0,8(sp)
   123bc:	|      move.l 8(sp),d0
   123c0:	|      movea.l 40(sp),a0
   123c4:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   123c8:	|      movea.l 40(sp),a0
   123cc:	|      move.l 32(a0),d0
   123d0:	|  /-- bne.s 123d6 <builtIn_loadCustomData+0xc6>
   123d2:	|  |   moveq #1,d0
   123d4:	+--|-- bra.s 12430 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   123d6:	|  \-> movea.l 40(sp),a0
   123da:	|      movea.l 32(a0),a0
   123de:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   123e0:	|      movea.l 40(sp),a0
   123e4:	|      movea.l 32(a0),a0
   123e8:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   123ec:	|      movea.l 40(sp),a0
   123f0:	|      movea.l 32(a0),a0
   123f4:	|      moveq #1,d0
   123f6:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   123fa:	|      movea.l 40(sp),a0
   123fe:	|      move.l 32(a0),d0
   12402:	|      move.l d0,-(sp)
   12404:	|      move.l 28(sp),-(sp)
   12408:	|      jsr d076 <fileToStack>
   1240e:	|      addq.l #8,sp
   12410:	|      tst.w d0
   12412:	|  /-- bne.s 12418 <builtIn_loadCustomData+0x108>
   12414:	|  |   moveq #1,d0
   12416:	+--|-- bra.s 12430 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12418:	|  \-> move.l 24(sp),4(sp)
   1241e:	|      move.l 1a7a4 <SysBase>,d0
   12424:	|      movea.l d0,a6
   12426:	|      movea.l 4(sp),a1
   1242a:	|      jsr -690(a6)
	return BR_CONTINUE;
   1242e:	|      moveq #2,d0
}
   12430:	\----> movea.l (sp)+,a6
   12432:	       lea 28(sp),sp
   12436:	       rts

00012438 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12438:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1243a:	       movea.l 12(sp),a0
   1243e:	       move.l 24(a0),d0
   12442:	       move.l d0,-(sp)
   12444:	       pea 1 <_start+0x1>
   12448:	       move.l sp,d0
   1244a:	       addq.l #8,d0
   1244c:	       move.l d0,-(sp)
   1244e:	       jsr 13e96 <getValueType>
   12454:	       lea 12(sp),sp
   12458:	       tst.w d0
   1245a:	   /-- bne.s 12460 <builtIn_setCustomEncoding+0x28>
   1245c:	   |   moveq #1,d0
   1245e:	/--|-- bra.s 12496 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12460:	|  \-> move.l (sp),d0
   12462:	|      move.l d0,d0
   12464:	|      move.w d0,1a870 <saveEncoding>
	trimStack (&fun -> stack);
   1246a:	|      moveq #24,d0
   1246c:	|      add.l 12(sp),d0
   12470:	|      move.l d0,-(sp)
   12472:	|      jsr 1481a <trimStack>
   12478:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1247a:	|      moveq #28,d0
   1247c:	|      add.l 12(sp),d0
   12480:	|      pea 1 <_start+0x1>
   12484:	|      pea 1 <_start+0x1>
   12488:	|      move.l d0,-(sp)
   1248a:	|      jsr 14788 <setVariable>
   12490:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12494:	|      moveq #2,d0
}
   12496:	\----> addq.l #4,sp
   12498:	       rts

0001249a <builtIn_freeSound>:

builtIn(freeSound)
{
   1249a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1249c:	       movea.l 12(sp),a0
   124a0:	       move.l 24(a0),d0
   124a4:	       move.l d0,-(sp)
   124a6:	       pea 5 <_start+0x5>
   124aa:	       move.l sp,d0
   124ac:	       addq.l #8,d0
   124ae:	       move.l d0,-(sp)
   124b0:	       jsr 13e96 <getValueType>
   124b6:	       lea 12(sp),sp
   124ba:	       tst.w d0
   124bc:	   /-- bne.s 124c2 <builtIn_freeSound+0x28>
   124be:	   |   moveq #1,d0
   124c0:	/--|-- bra.s 124e0 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   124c2:	|  \-> moveq #24,d0
   124c4:	|      add.l 12(sp),d0
   124c8:	|      move.l d0,-(sp)
   124ca:	|      jsr 1481a <trimStack>
   124d0:	|      addq.l #4,sp
	huntKillFreeSound (v);
   124d2:	|      move.l (sp),d0
   124d4:	|      move.l d0,-(sp)
   124d6:	|      jsr c838 <huntKillFreeSound>
   124dc:	|      addq.l #4,sp
	return BR_CONTINUE;
   124de:	|      moveq #2,d0
}
   124e0:	\----> addq.l #4,sp
   124e2:	       rts

000124e4 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   124e4:	       lea -12(sp),sp
   124e8:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   124ea:	       movea.l 24(sp),a0
   124ee:	       move.l 24(a0),d0
   124f2:	       move.l d0,-(sp)
   124f4:	       pea 1 <_start+0x1>
   124f8:	       moveq #16,d0
   124fa:	       add.l sp,d0
   124fc:	       move.l d0,-(sp)
   124fe:	       jsr 13e96 <getValueType>
   12504:	       lea 12(sp),sp
   12508:	       tst.w d0
   1250a:	   /-- bne.s 12512 <builtIn_parallaxAdd+0x2e>
   1250c:	   |   moveq #1,d0
   1250e:	/--|-- bra.w 125e6 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12512:	|  \-> moveq #24,d0
   12514:	|      add.l 24(sp),d0
   12518:	|      move.l d0,-(sp)
   1251a:	|      jsr 1481a <trimStack>
   12520:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12522:	|      movea.l 24(sp),a0
   12526:	|      move.l 24(a0),d0
   1252a:	|      move.l d0,-(sp)
   1252c:	|      pea 1 <_start+0x1>
   12530:	|      moveq #20,d0
   12532:	|      add.l sp,d0
   12534:	|      move.l d0,-(sp)
   12536:	|      jsr 13e96 <getValueType>
   1253c:	|      lea 12(sp),sp
   12540:	|      tst.w d0
   12542:	|  /-- bne.s 1254a <builtIn_parallaxAdd+0x66>
   12544:	|  |   moveq #1,d0
   12546:	+--|-- bra.w 125e6 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1254a:	|  \-> moveq #24,d0
   1254c:	|      add.l 24(sp),d0
   12550:	|      move.l d0,-(sp)
   12552:	|      jsr 1481a <trimStack>
   12558:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1255a:	|      movea.l 24(sp),a0
   1255e:	|      move.l 24(a0),d0
   12562:	|      move.l d0,-(sp)
   12564:	|      pea 5 <_start+0x5>
   12568:	|      lea 12(sp),a0
   1256c:	|      move.l a0,-(sp)
   1256e:	|      jsr 13e96 <getValueType>
   12574:	|      lea 12(sp),sp
   12578:	|      tst.w d0
   1257a:	|  /-- bne.s 12580 <builtIn_parallaxAdd+0x9c>
   1257c:	|  |   moveq #1,d0
   1257e:	+--|-- bra.s 125e6 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12580:	|  \-> moveq #24,d0
   12582:	|      add.l 24(sp),d0
   12586:	|      move.l d0,-(sp)
   12588:	|      jsr 1481a <trimStack>
   1258e:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12590:	|      move.l 8(sp),d0
   12594:	|      move.l d0,d0
   12596:	|      moveq #0,d2
   12598:	|      move.w d0,d2
   1259a:	|      move.l 12(sp),d0
   1259e:	|      move.l d0,d0
   125a0:	|      moveq #0,d1
   125a2:	|      move.w d0,d1
   125a4:	|      move.l 4(sp),d0
   125a8:	|      move.l d0,d0
   125aa:	|      move.w d0,d0
   125ac:	|      andi.l #65535,d0
   125b2:	|      move.l d2,-(sp)
   125b4:	|      move.l d1,-(sp)
   125b6:	|      move.l d0,-(sp)
   125b8:	|      jsr ca54 <loadParallax>
   125be:	|      lea 12(sp),sp
   125c2:	|      tst.w d0
   125c4:	|  /-- bne.s 125ca <builtIn_parallaxAdd+0xe6>
   125c6:	|  |   moveq #1,d0
   125c8:	+--|-- bra.s 125e6 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   125ca:	|  \-> moveq #28,d0
   125cc:	|      add.l 24(sp),d0
   125d0:	|      pea 1 <_start+0x1>
   125d4:	|      pea 1 <_start+0x1>
   125d8:	|      move.l d0,-(sp)
   125da:	|      jsr 14788 <setVariable>
   125e0:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   125e4:	|      moveq #2,d0
}
   125e6:	\----> move.l (sp)+,d2
   125e8:	       lea 12(sp),sp
   125ec:	       rts

000125ee <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   125ee:	jsr c98c <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   125f4:	moveq #28,d0
   125f6:	add.l 8(sp),d0
   125fa:	pea 1 <_start+0x1>
   125fe:	pea 1 <_start+0x1>
   12602:	move.l d0,-(sp)
   12604:	jsr 14788 <setVariable>
   1260a:	lea 12(sp),sp
	return BR_CONTINUE;
   1260e:	moveq #2,d0
}
   12610:	rts

00012612 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12612:	pea 19261 <graphics.c.1c13408a+0x19d>
   12618:	jsr 16894 <KPrintF>
   1261e:	addq.l #4,sp

	return BR_CONTINUE;
   12620:	moveq #2,d0
}
   12622:	rts

00012624 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12624:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12626:	             movea.l 16(sp),a0
   1262a:	             movea.l 24(a0),a0
   1262e:	             move.l (a0),d0
   12630:	             moveq #1,d1
   12632:	             cmp.l d0,d1
   12634:	      /----- beq.s 1267c <builtIn_makeFastArray+0x58>
   12636:	      |      moveq #6,d1
   12638:	      |      cmp.l d0,d1
   1263a:	/-----|----- bne.s 126ba <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   1263c:	|     |      movea.l 16(sp),a0
   12640:	|     |      movea.l 24(a0),a0
   12644:	|     |      move.l 4(a0),d1
   12648:	|     |      moveq #28,d0
   1264a:	|     |      add.l 16(sp),d0
   1264e:	|     |      move.l d1,-(sp)
   12650:	|     |      move.l d0,-(sp)
   12652:	|     |      jsr 13f48 <makeFastArrayFromStack>
   12658:	|     |      addq.l #8,sp
   1265a:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   1265e:	|     |      moveq #24,d0
   12660:	|     |      add.l 16(sp),d0
   12664:	|     |      move.l d0,-(sp)
   12666:	|     |      jsr 1481a <trimStack>
   1266c:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   1266e:	|     |      tst.w 6(sp)
   12672:	|     |  /-- beq.s 12678 <builtIn_makeFastArray+0x54>
   12674:	|     |  |   moveq #2,d0
   12676:	|  /--|--|-- bra.s 126cc <builtIn_makeFastArray+0xa8>
   12678:	|  |  |  \-> moveq #1,d0
   1267a:	|  +--|----- bra.s 126cc <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   1267c:	|  |  \----> movea.l 16(sp),a0
   12680:	|  |         movea.l 24(a0),a0
   12684:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   1268a:	|  |         moveq #24,d0
   1268c:	|  |         add.l 16(sp),d0
   12690:	|  |         move.l d0,-(sp)
   12692:	|  |         jsr 1481a <trimStack>
   12698:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   1269a:	|  |         moveq #28,d0
   1269c:	|  |         add.l 16(sp),d0
   126a0:	|  |         move.l 2(sp),-(sp)
   126a4:	|  |         move.l d0,-(sp)
   126a6:	|  |         jsr 13fb2 <makeFastArraySize>
   126ac:	|  |         addq.l #8,sp
   126ae:	|  |         tst.w d0
   126b0:	|  |     /-- beq.s 126b6 <builtIn_makeFastArray+0x92>
   126b2:	|  |     |   moveq #2,d0
   126b4:	|  +-----|-- bra.s 126cc <builtIn_makeFastArray+0xa8>
   126b6:	|  |     \-> moveq #1,d0
   126b8:	|  +-------- bra.s 126cc <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   126ba:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   126bc:	   |         pea 1928a <graphics.c.1c13408a+0x1c6>
   126c2:	   |         jsr 16894 <KPrintF>
   126c8:	   |         addq.l #4,sp
	return BR_ERROR;
   126ca:	   |         moveq #1,d0
}
   126cc:	   \-------> addq.l #8,sp
   126ce:	             rts

000126d0 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   126d0:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   126d2:	          movea.l 16(sp),a0
   126d6:	          move.l 24(a0),d0
   126da:	          move.l d0,-(sp)
   126dc:	          pea 7 <_start+0x7>
   126e0:	          move.l sp,d0
   126e2:	          addq.l #8,d0
   126e4:	          move.l d0,-(sp)
   126e6:	          jsr 13e96 <getValueType>
   126ec:	          lea 12(sp),sp
   126f0:	          tst.w d0
   126f2:	      /-- bne.s 126f8 <builtIn_getCharacterScale+0x28>
   126f4:	      |   moveq #1,d0
   126f6:	/-----|-- bra.s 12772 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   126f8:	|     \-> moveq #24,d0
   126fa:	|         add.l 16(sp),d0
   126fe:	|         move.l d0,-(sp)
   12700:	|         jsr 1481a <trimStack>
   12706:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   12708:	|         move.l (sp),d0
   1270a:	|         move.l d0,-(sp)
   1270c:	|         jsr 9d8e <findPerson>
   12712:	|         addq.l #4,sp
   12714:	|         move.l d0,4(sp)
	if (pers) {
   12718:	|  /----- beq.s 12758 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   1271a:	|  |      movea.l 4(sp),a0
   1271e:	|  |      move.l 32(a0),d0
   12722:	|  |      move.l #1120403456,-(sp)
   12728:	|  |      move.l d0,-(sp)
   1272a:	|  |      jsr 16d82 <__mulsf3>
   12730:	|  |      addq.l #8,sp
   12732:	|  |      move.l d0,-(sp)
   12734:	|  |      jsr 16c68 <__fixsfsi>
   1273a:	|  |      addq.l #4,sp
   1273c:	|  |      move.l d0,d1
   1273e:	|  |      moveq #28,d0
   12740:	|  |      add.l 16(sp),d0
   12744:	|  |      move.l d1,-(sp)
   12746:	|  |      pea 1 <_start+0x1>
   1274a:	|  |      move.l d0,-(sp)
   1274c:	|  |      jsr 14788 <setVariable>
   12752:	|  |      lea 12(sp),sp
   12756:	|  |  /-- bra.s 12770 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12758:	|  \--|-> moveq #28,d0
   1275a:	|     |   add.l 16(sp),d0
   1275e:	|     |   clr.l -(sp)
   12760:	|     |   pea 1 <_start+0x1>
   12764:	|     |   move.l d0,-(sp)
   12766:	|     |   jsr 14788 <setVariable>
   1276c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12770:	|     \-> moveq #2,d0
}
   12772:	\-------> addq.l #8,sp
   12774:	          rts

00012776 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   12776:	move.l 1a894 <gameSettings>,d0
   1277c:	move.l d0,d1
   1277e:	moveq #28,d0
   12780:	add.l 8(sp),d0
   12784:	move.l d1,-(sp)
   12786:	pea 1 <_start+0x1>
   1278a:	move.l d0,-(sp)
   1278c:	jsr 14788 <setVariable>
   12792:	lea 12(sp),sp
	return BR_CONTINUE;
   12796:	moveq #2,d0
}
   12798:	rts

0001279a <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1279a:	moveq #24,d0
   1279c:	add.l 8(sp),d0
   127a0:	move.l d0,-(sp)
   127a2:	jsr 1481a <trimStack>
   127a8:	addq.l #4,sp
	trimStack (&fun -> stack);
   127aa:	moveq #24,d0
   127ac:	add.l 8(sp),d0
   127b0:	move.l d0,-(sp)
   127b2:	jsr 1481a <trimStack>
   127b8:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   127ba:	moveq #28,d0
   127bc:	add.l 8(sp),d0
   127c0:	clr.l -(sp)
   127c2:	pea 1 <_start+0x1>
   127c6:	move.l d0,-(sp)
   127c8:	jsr 14788 <setVariable>
   127ce:	lea 12(sp),sp

	return BR_CONTINUE;
   127d2:	moveq #2,d0

}
   127d4:	rts

000127d6 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   127d6:	move.l 1a124 <lastFramesPerSecond>,d1
   127dc:	moveq #28,d0
   127de:	add.l 8(sp),d0
   127e2:	move.l d1,-(sp)
   127e4:	pea 1 <_start+0x1>
   127e8:	move.l d0,-(sp)
   127ea:	jsr 14788 <setVariable>
   127f0:	lea 12(sp),sp
	return BR_CONTINUE;
   127f4:	moveq #2,d0
}
   127f6:	rts

000127f8 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   127f8:	moveq #2,d0
}
   127fa:	rts

000127fc <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   127fc:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12800:	          movea.l 60(sp),a0
   12804:	          move.l 24(a0),d0
   12808:	          move.l d0,-(sp)
   1280a:	          pea 1 <_start+0x1>
   1280e:	          pea 1a6ba <thumbHeight>
   12814:	          jsr 13e96 <getValueType>
   1281a:	          lea 12(sp),sp
   1281e:	          tst.w d0
   12820:	      /-- bne.s 12828 <builtIn_setThumbnailSize+0x2c>
   12822:	      |   moveq #1,d0
   12824:	/-----|-- bra.w 128e4 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12828:	|     \-> moveq #24,d0
   1282a:	|         add.l 60(sp),d0
   1282e:	|         move.l d0,-(sp)
   12830:	|         jsr 1481a <trimStack>
   12836:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12838:	|         movea.l 60(sp),a0
   1283c:	|         move.l 24(a0),d0
   12840:	|         move.l d0,-(sp)
   12842:	|         pea 1 <_start+0x1>
   12846:	|         pea 1a6b6 <thumbWidth>
   1284c:	|         jsr 13e96 <getValueType>
   12852:	|         lea 12(sp),sp
   12856:	|         tst.w d0
   12858:	|     /-- bne.s 12860 <builtIn_setThumbnailSize+0x64>
   1285a:	|     |   moveq #1,d0
   1285c:	+-----|-- bra.w 128e4 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12860:	|     \-> moveq #24,d0
   12862:	|         add.l 60(sp),d0
   12866:	|         move.l d0,-(sp)
   12868:	|         jsr 1481a <trimStack>
   1286e:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   12870:	|         move.l 1a6b6 <thumbWidth>,d0
   12876:	|     /-- bmi.s 128a4 <builtIn_setThumbnailSize+0xa8>
   12878:	|     |   move.l 1a6ba <thumbHeight>,d0
   1287e:	|     +-- bmi.s 128a4 <builtIn_setThumbnailSize+0xa8>
   12880:	|     |   move.l 1a6b6 <thumbWidth>,d0
   12886:	|     |   move.l d0,d1
   12888:	|     |   move.l 1a6f8 <winWidth>,d0
   1288e:	|     |   cmp.l d1,d0
   12890:	|     +-- bcs.s 128a4 <builtIn_setThumbnailSize+0xa8>
   12892:	|     |   move.l 1a6ba <thumbHeight>,d0
   12898:	|     |   move.l d0,d1
   1289a:	|     |   move.l 1a6fc <winHeight>,d0
   128a0:	|     |   cmp.l d1,d0
   128a2:	|  /--|-- bcc.s 128e2 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   128a4:	|  |  \-> move.l 1a6ba <thumbHeight>,d1
   128aa:	|  |      move.l 1a6b6 <thumbWidth>,d0
   128b0:	|  |      move.l d1,-(sp)
   128b2:	|  |      move.l d0,-(sp)
   128b4:	|  |      pea 192b1 <graphics.c.1c13408a+0x1ed>
   128ba:	|  |      lea 14(sp),a0
   128be:	|  |      move.l a0,-(sp)
   128c0:	|  |      jsr 136a0 <sprintf>
   128c6:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   128ca:	|  |      lea 2(sp),a0
   128ce:	|  |      move.l a0,-(sp)
   128d0:	|  |      pea 192b9 <graphics.c.1c13408a+0x1f5>
   128d6:	|  |      jsr 16894 <KPrintF>
   128dc:	|  |      addq.l #8,sp
		return BR_ERROR;
   128de:	|  |      moveq #1,d0
   128e0:	+--|----- bra.s 128e4 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   128e2:	|  \----> moveq #2,d0
}
   128e4:	\-------> lea 52(sp),sp
   128e8:	          rts

000128ea <builtIn_hasFlag>:

builtIn(hasFlag)
{
   128ea:	       lea -12(sp),sp
   128ee:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   128f0:	       movea.l 24(sp),a0
   128f4:	       move.l 24(a0),d0
   128f8:	       move.l d0,-(sp)
   128fa:	       pea 1 <_start+0x1>
   128fe:	       lea 12(sp),a0
   12902:	       move.l a0,-(sp)
   12904:	       jsr 13e96 <getValueType>
   1290a:	       lea 12(sp),sp
   1290e:	       tst.w d0
   12910:	   /-- bne.s 12918 <builtIn_hasFlag+0x2e>
   12912:	   |   moveq #1,d0
   12914:	/--|-- bra.w 129a8 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   12918:	|  \-> moveq #24,d0
   1291a:	|      add.l 24(sp),d0
   1291e:	|      move.l d0,-(sp)
   12920:	|      jsr 1481a <trimStack>
   12926:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12928:	|      movea.l 24(sp),a0
   1292c:	|      move.l 24(a0),d0
   12930:	|      move.l d0,-(sp)
   12932:	|      pea 7 <_start+0x7>
   12936:	|      moveq #16,d0
   12938:	|      add.l sp,d0
   1293a:	|      move.l d0,-(sp)
   1293c:	|      jsr 13e96 <getValueType>
   12942:	|      lea 12(sp),sp
   12946:	|      tst.w d0
   12948:	|  /-- bne.s 1294e <builtIn_hasFlag+0x64>
   1294a:	|  |   moveq #1,d0
   1294c:	+--|-- bra.s 129a8 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1294e:	|  \-> moveq #24,d0
   12950:	|      add.l 24(sp),d0
   12954:	|      move.l d0,-(sp)
   12956:	|      jsr 1481a <trimStack>
   1295c:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   1295e:	|      move.l 8(sp),d0
   12962:	|      move.l d0,-(sp)
   12964:	|      jsr cc00 <findObjectType>
   1296a:	|      addq.l #4,sp
   1296c:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   12970:	|  /-- bne.s 12976 <builtIn_hasFlag+0x8c>
   12972:	|  |   moveq #1,d0
   12974:	+--|-- bra.s 129a8 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   12976:	|  \-> movea.l 12(sp),a0
   1297a:	|      move.w 36(a0),d0
   1297e:	|      moveq #0,d2
   12980:	|      move.w d0,d2
   12982:	|      move.l 4(sp),d1
   12986:	|      moveq #1,d0
   12988:	|      lsl.l d1,d0
   1298a:	|      move.l d2,d1
   1298c:	|      and.l d0,d1
   1298e:	|      moveq #28,d0
   12990:	|      add.l 24(sp),d0
   12994:	|      move.l d1,-(sp)
   12996:	|      pea 1 <_start+0x1>
   1299a:	|      move.l d0,-(sp)
   1299c:	|      jsr 14788 <setVariable>
   129a2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   129a6:	|      moveq #2,d0
}
   129a8:	\----> move.l (sp)+,d2
   129aa:	       lea 12(sp),sp
   129ae:	       rts

000129b0 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   129b0:	       jsr cbee <snapshot>
   129b6:	       tst.w d0
   129b8:	/----- beq.s 129be <builtIn_snapshotGrab+0xe>
   129ba:	|      moveq #2,d0
   129bc:	|  /-- bra.s 129c0 <builtIn_snapshotGrab+0x10>
   129be:	\--|-> moveq #1,d0
}
   129c0:	   \-> rts

000129c2 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   129c2:	jsr ca9a <nosnapshot>
	return BR_CONTINUE;
   129c8:	moveq #2,d0
}
   129ca:	rts

000129cc <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   129cc:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   129ce:	move.w 1a000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   129d6:	movea.l 12(sp),a0
   129da:	move.l 24(a0),d0
   129de:	move.l d0,-(sp)
   129e0:	jsr 143d6 <getBoolean>
   129e6:	addq.l #4,sp
   129e8:	move.w d0,1a000 <allowAnyFilename>
	trimStack (&fun -> stack);
   129ee:	moveq #24,d0
   129f0:	add.l 12(sp),d0
   129f4:	move.l d0,-(sp)
   129f6:	jsr 1481a <trimStack>
   129fc:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   129fe:	movea.w 2(sp),a0
   12a02:	moveq #28,d0
   12a04:	add.l 12(sp),d0
   12a08:	move.l a0,-(sp)
   12a0a:	pea 1 <_start+0x1>
   12a0e:	move.l d0,-(sp)
   12a10:	jsr 14788 <setVariable>
   12a16:	lea 12(sp),sp
	return BR_CONTINUE;
   12a1a:	moveq #2,d0
}
   12a1c:	addq.l #4,sp
   12a1e:	rts

00012a20 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12a20:	moveq #24,d0
   12a22:	add.l 8(sp),d0
   12a26:	move.l d0,-(sp)
   12a28:	jsr 1481a <trimStack>
   12a2e:	addq.l #4,sp
	trimStack (&fun -> stack);
   12a30:	moveq #24,d0
   12a32:	add.l 8(sp),d0
   12a36:	move.l d0,-(sp)
   12a38:	jsr 1481a <trimStack>
   12a3e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   12a40:	moveq #28,d0
   12a42:	add.l 8(sp),d0
   12a46:	clr.l -(sp)
   12a48:	pea 1 <_start+0x1>
   12a4c:	move.l d0,-(sp)
   12a4e:	jsr 14788 <setVariable>
   12a54:	lea 12(sp),sp

	return BR_CONTINUE;
   12a58:	moveq #2,d0
}
   12a5a:	rts

00012a5c <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   12a5c:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   12a5e:	movea.l 12(sp),a0
   12a62:	move.l 24(a0),d0
   12a66:	move.l d0,-(sp)
   12a68:	jsr 1446c <getTextFromAnyVar>
   12a6e:	addq.l #4,sp
   12a70:	move.l d0,(sp)
	trimStack (&fun -> stack);
   12a72:	moveq #24,d0
   12a74:	add.l 12(sp),d0
   12a78:	move.l d0,-(sp)
   12a7a:	jsr 1481a <trimStack>
   12a80:	addq.l #4,sp
	KPrintF (mess);
   12a82:	move.l (sp),-(sp)
   12a84:	jsr 16894 <KPrintF>
   12a8a:	addq.l #4,sp
	return BR_ERROR;
   12a8c:	moveq #1,d0
}
   12a8e:	addq.l #4,sp
   12a90:	rts

00012a92 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12a92:	moveq #24,d0
   12a94:	add.l 8(sp),d0
   12a98:	move.l d0,-(sp)
   12a9a:	jsr 1481a <trimStack>
   12aa0:	addq.l #4,sp
	trimStack (&fun -> stack);
   12aa2:	moveq #24,d0
   12aa4:	add.l 8(sp),d0
   12aa8:	move.l d0,-(sp)
   12aaa:	jsr 1481a <trimStack>
   12ab0:	addq.l #4,sp
	trimStack (&fun -> stack);
   12ab2:	moveq #24,d0
   12ab4:	add.l 8(sp),d0
   12ab8:	move.l d0,-(sp)
   12aba:	jsr 1481a <trimStack>
   12ac0:	addq.l #4,sp
	trimStack (&fun -> stack);
   12ac2:	moveq #24,d0
   12ac4:	add.l 8(sp),d0
   12ac8:	move.l d0,-(sp)
   12aca:	jsr 1481a <trimStack>
   12ad0:	addq.l #4,sp

	return BR_CONTINUE;
   12ad2:	moveq #2,d0
}
   12ad4:	rts

00012ad6 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12ad6:	moveq #24,d0
   12ad8:	add.l 8(sp),d0
   12adc:	move.l d0,-(sp)
   12ade:	jsr 1481a <trimStack>
   12ae4:	addq.l #4,sp
	trimStack (&fun -> stack);
   12ae6:	moveq #24,d0
   12ae8:	add.l 8(sp),d0
   12aec:	move.l d0,-(sp)
   12aee:	jsr 1481a <trimStack>
   12af4:	addq.l #4,sp
	trimStack (&fun -> stack);
   12af6:	moveq #24,d0
   12af8:	add.l 8(sp),d0
   12afc:	move.l d0,-(sp)
   12afe:	jsr 1481a <trimStack>
   12b04:	addq.l #4,sp

	return BR_CONTINUE;
   12b06:	moveq #2,d0

}
   12b08:	rts

00012b0a <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   12b0a:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   12b0c:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   12b12:	sne d0
   12b14:	neg.b d0
   12b16:	moveq #0,d1
   12b18:	move.b d0,d1
   12b1a:	moveq #28,d0
   12b1c:	add.l 12(sp),d0
   12b20:	move.l d1,-(sp)
   12b22:	pea 1 <_start+0x1>
   12b26:	move.l d0,-(sp)
   12b28:	jsr 14788 <setVariable>
   12b2e:	lea 12(sp),sp
	return BR_CONTINUE;
   12b32:	moveq #2,d0
}
   12b34:	addq.l #4,sp
   12b36:	rts

00012b38 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   12b38:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   12b3a:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   12b40:	pea 192d0 <graphics.c.1c13408a+0x20c>
   12b46:	jsr 16894 <KPrintF>
   12b4c:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   12b4e:	tst.w 2(sp)
   12b52:	sne d0
   12b54:	neg.b d0
   12b56:	moveq #0,d1
   12b58:	move.b d0,d1
   12b5a:	moveq #28,d0
   12b5c:	add.l 12(sp),d0
   12b60:	move.l d1,-(sp)
   12b62:	pea 1 <_start+0x1>
   12b66:	move.l d0,-(sp)
   12b68:	jsr 14788 <setVariable>
   12b6e:	lea 12(sp),sp
	return BR_CONTINUE;
   12b72:	moveq #2,d0
}
   12b74:	addq.l #4,sp
   12b76:	rts

00012b78 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   12b78:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   12b7c:	             move.l 104(sp),d0
   12b80:	             cmpi.l #166,d0
   12b86:	/----------- bhi.w 12c68 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   12b8a:	|            move.l 104(sp),d0
   12b8e:	|            add.l d0,d0
   12b90:	|            movea.l d0,a1
   12b92:	|            adda.l d0,a1
   12b94:	|            lea 1a146 <paramNum>,a0
   12b9a:	|            move.l (0,a1,a0.l),d0
   12b9e:	|            moveq #-1,d1
   12ba0:	|            cmp.l d0,d1
   12ba2:	|  /-------- beq.w 12c30 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   12ba6:	|  |         move.l 104(sp),d0
   12baa:	|  |         add.l d0,d0
   12bac:	|  |         movea.l d0,a1
   12bae:	|  |         adda.l d0,a1
   12bb0:	|  |         lea 1a146 <paramNum>,a0
   12bb6:	|  |         move.l (0,a1,a0.l),d0
   12bba:	|  |         cmp.l 108(sp),d0
   12bbe:	|  +-------- beq.s 12c30 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   12bc0:	|  |         move.l 104(sp),d0
   12bc4:	|  |         add.l d0,d0
   12bc6:	|  |         movea.l d0,a1
   12bc8:	|  |         adda.l d0,a1
   12bca:	|  |         lea 1a146 <paramNum>,a0
   12bd0:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   12bd4:	|  |         moveq #1,d1
   12bd6:	|  |         cmp.l d0,d1
   12bd8:	|  |  /----- bne.s 12be2 <callBuiltIn+0x6a>
   12bda:	|  |  |      move.l #98265,d0
   12be0:	|  |  |  /-- bra.s 12be8 <callBuiltIn+0x70>
   12be2:	|  |  \--|-> move.l #103174,d0
   12be8:	|  |     \-> move.l 104(sp),d1
   12bec:	|  |         add.l d1,d1
   12bee:	|  |         movea.l d1,a1
   12bf0:	|  |         adda.l d1,a1
   12bf2:	|  |         lea 1a146 <paramNum>,a0
   12bf8:	|  |         move.l (0,a1,a0.l),d1
   12bfc:	|  |         move.l d0,-(sp)
   12bfe:	|  |         move.l d1,-(sp)
   12c00:	|  |         pea 19308 <graphics.c.1c13408a+0x244>
   12c06:	|  |         lea 12(sp),a0
   12c0a:	|  |         move.l a0,-(sp)
   12c0c:	|  |         jsr 136a0 <sprintf>
   12c12:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   12c16:	|  |         movea.l sp,a0
   12c18:	|  |         move.l a0,-(sp)
   12c1a:	|  |         jsr b8 <copyString>
   12c20:	|  |         addq.l #4,sp
   12c22:	|  |         move.l d0,-(sp)
   12c24:	|  |         jsr 16894 <KPrintF>
   12c2a:	|  |         addq.l #4,sp
				return BR_ERROR;
   12c2c:	|  |         moveq #1,d0
   12c2e:	|  |     /-- bra.s 12c78 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   12c30:	|  \-----|-> move.l 104(sp),d0
   12c34:	|        |   add.l d0,d0
   12c36:	|        |   movea.l d0,a1
   12c38:	|        |   adda.l d0,a1
   12c3a:	|        |   lea 1a3e2 <builtInFunctionArray>,a0
   12c40:	|        |   move.l (0,a1,a0.l),d0
   12c44:	+--------|-- beq.s 12c68 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   12c46:	|        |   move.l 104(sp),d0
   12c4a:	|        |   add.l d0,d0
   12c4c:	|        |   movea.l d0,a1
   12c4e:	|        |   adda.l d0,a1
   12c50:	|        |   lea 1a3e2 <builtInFunctionArray>,a0
   12c56:	|        |   movea.l (0,a1,a0.l),a0
   12c5a:	|        |   move.l 112(sp),-(sp)
   12c5e:	|        |   move.l 112(sp),-(sp)
   12c62:	|        |   jsr (a0)
   12c64:	|        |   addq.l #8,sp
   12c66:	|        +-- bra.s 12c78 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   12c68:	\--------|-> pea 19333 <graphics.c.1c13408a+0x26f>
   12c6e:	         |   jsr 16894 <KPrintF>
   12c74:	         |   addq.l #4,sp
	return BR_ERROR;
   12c76:	         |   moveq #1,d0
}
   12c78:	         \-> lea 100(sp),sp
   12c7c:	             rts

00012c7e <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   12c7e:	          subq.l #8,sp
	int indexNum = -1;
   12c80:	          moveq #-1,d0
   12c82:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   12c86:	          clr.l (sp)
   12c88:	   /----- bra.s 12cae <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   12c8a:	/--|----> move.l 1a88c <languageTable>,d1
   12c90:	|  |      move.l (sp),d0
   12c92:	|  |      add.l d0,d0
   12c94:	|  |      add.l d0,d0
   12c96:	|  |      movea.l d1,a0
   12c98:	|  |      adda.l d0,a0
   12c9a:	|  |      move.l (a0),d0
   12c9c:	|  |      move.l d0,d1
   12c9e:	|  |      move.l 1a894 <gameSettings>,d0
   12ca4:	|  |      cmp.l d1,d0
   12ca6:	|  |  /-- bne.s 12cac <getLanguageForFileB+0x2e>
   12ca8:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   12cac:	|  |  \-> addq.l #1,(sp)
   12cae:	|  \----> move.l 1a898 <gameSettings+0x4>,d0
   12cb4:	|         cmp.l (sp),d0
   12cb6:	\-------- bcc.s 12c8a <getLanguageForFileB+0xc>
	}

	return indexNum;
   12cb8:	          move.l 4(sp),d0
}
   12cbc:	          addq.l #8,sp
   12cbe:	          rts

00012cc0 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   12cc0:	          lea -20(sp),sp
   12cc4:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   12cc6:	          move.l 28(sp),-(sp)
   12cca:	          jsr 13382 <strlen>
   12cd0:	          addq.l #4,sp
   12cd2:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   12cd6:	          moveq #4,d0
   12cd8:	          cmp.l 12(sp),d0
   12cdc:	      /-- bge.s 12d00 <getPrefsFilename+0x40>
   12cde:	      |   move.l 12(sp),d0
   12ce2:	      |   subq.l #4,d0
   12ce4:	      |   movea.l 28(sp),a0
   12ce8:	      |   adda.l d0,a0
   12cea:	      |   move.b (a0),d0
   12cec:	      |   cmpi.b #46,d0
   12cf0:	      +-- bne.s 12d00 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   12cf2:	      |   move.l 12(sp),d0
   12cf6:	      |   subq.l #4,d0
   12cf8:	      |   movea.l 28(sp),a0
   12cfc:	      |   adda.l d0,a0
   12cfe:	      |   clr.b (a0)
	}

	char * f = filename;
   12d00:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   12d06:	          clr.l 20(sp)
   12d0a:	   /----- bra.s 12d32 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   12d0c:	/--|----> move.l 20(sp),d0
   12d10:	|  |      movea.l 28(sp),a0
   12d14:	|  |      adda.l d0,a0
   12d16:	|  |      move.b (a0),d0
   12d18:	|  |      cmpi.b #47,d0
   12d1c:	|  |  /-- bne.s 12d2e <getPrefsFilename+0x6e>
   12d1e:	|  |  |   move.l 20(sp),d0
   12d22:	|  |  |   addq.l #1,d0
   12d24:	|  |  |   move.l 28(sp),d1
   12d28:	|  |  |   add.l d0,d1
   12d2a:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   12d2e:	|  |  \-> addq.l #1,20(sp)
   12d32:	|  \----> move.l 20(sp),d0
   12d36:	|         cmp.l 12(sp),d0
   12d3a:	\-------- blt.s 12d0c <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   12d3c:	          pea 1935e <graphics.c.1c13408a+0x29a>
   12d42:	          move.l 20(sp),-(sp)
   12d46:	          jsr 133c2 <joinStrings>
   12d4c:	          addq.l #8,sp
   12d4e:	          move.l d0,8(sp)

	FreeVec(filename);
   12d52:	          move.l 28(sp),4(sp)
   12d58:	          move.l 1a7a4 <SysBase>,d0
   12d5e:	          movea.l d0,a6
   12d60:	          movea.l 4(sp),a1
   12d64:	          jsr -690(a6)
	filename = NULL;
   12d68:	          clr.l 28(sp)
	return joined;
   12d6c:	          move.l 8(sp),d0
}
   12d70:	          movea.l (sp)+,a6
   12d72:	          lea 20(sp),sp
   12d76:	          rts

00012d78 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   12d78:	             lea -28(sp),sp
   12d7c:	             move.l a6,-(sp)
   12d7e:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   12d80:	             move.l 1a898 <gameSettings+0x4>,d0
   12d86:	             move.l d0,d1
   12d88:	             addq.l #1,d1
   12d8a:	             move.l d1,28(sp)
   12d8e:	             clr.l 24(sp)
   12d92:	             move.l 1a7a4 <SysBase>,d0
   12d98:	             movea.l d0,a6
   12d9a:	             move.l 28(sp),d0
   12d9e:	             move.l 24(sp),d1
   12da2:	             jsr -684(a6)
   12da6:	             move.l d0,20(sp)
   12daa:	             move.l 20(sp),d0
   12dae:	             move.l d0,1a88c <languageTable>
    if( languageTable == 0) {
   12db4:	             move.l 1a88c <languageTable>,d0
   12dba:	         /-- bne.s 12dca <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   12dbc:	         |   pea 19363 <graphics.c.1c13408a+0x29f>
   12dc2:	         |   jsr 16894 <KPrintF>
   12dc8:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   12dca:	         \-> move.l 1a898 <gameSettings+0x4>,d0
   12dd0:	             move.l d0,d1
   12dd2:	             addq.l #1,d1
   12dd4:	             move.l d1,16(sp)
   12dd8:	             clr.l 12(sp)
   12ddc:	             move.l 1a7a4 <SysBase>,d0
   12de2:	             movea.l d0,a6
   12de4:	             move.l 16(sp),d0
   12de8:	             move.l 12(sp),d1
   12dec:	             jsr -684(a6)
   12df0:	             move.l d0,8(sp)
   12df4:	             move.l 8(sp),d0
   12df8:	             move.l d0,1a890 <languageName>
	if( languageName == 0) {
   12dfe:	             move.l 1a890 <languageName>,d0
   12e04:	         /-- bne.s 12e14 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   12e06:	         |   pea 19399 <graphics.c.1c13408a+0x2d5>
   12e0c:	         |   jsr 16894 <KPrintF>
   12e12:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   12e14:	         \-> clr.l 32(sp)
   12e18:	   /-------- bra.s 12e90 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   12e1a:	/--|-------> tst.l 32(sp)
   12e1e:	|  |  /----- beq.s 12e2e <makeLanguageTable+0xb6>
   12e20:	|  |  |      move.l 40(sp),-(sp)
   12e24:	|  |  |      jsr 6bc <get2bytes>
   12e2a:	|  |  |      addq.l #4,sp
   12e2c:	|  |  |  /-- bra.s 12e30 <makeLanguageTable+0xb8>
   12e2e:	|  |  \--|-> moveq #0,d0
   12e30:	|  |     \-> movea.l 1a88c <languageTable>,a0
   12e36:	|  |         move.l 32(sp),d1
   12e3a:	|  |         add.l d1,d1
   12e3c:	|  |         add.l d1,d1
   12e3e:	|  |         adda.l d1,a0
   12e40:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   12e42:	|  |         move.l 1a890 <languageName>,d1
   12e48:	|  |         move.l 32(sp),d0
   12e4c:	|  |         add.l d0,d0
   12e4e:	|  |         add.l d0,d0
   12e50:	|  |         movea.l d1,a0
   12e52:	|  |         adda.l d0,a0
   12e54:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   12e56:	|  |         move.l 1a74e <gameVersion>,d0
   12e5c:	|  |         cmpi.l #511,d0
   12e62:	|  |     /-- ble.s 12e8c <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   12e64:	|  |     |   move.l 1a898 <gameSettings+0x4>,d0
   12e6a:	|  |     +-- beq.s 12e8c <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   12e6c:	|  |     |   move.l 1a890 <languageName>,d1
   12e72:	|  |     |   move.l 32(sp),d0
   12e76:	|  |     |   add.l d0,d0
   12e78:	|  |     |   add.l d0,d0
   12e7a:	|  |     |   movea.l d1,a2
   12e7c:	|  |     |   adda.l d0,a2
   12e7e:	|  |     |   move.l 40(sp),-(sp)
   12e82:	|  |     |   jsr b02 <readString>
   12e88:	|  |     |   addq.l #4,sp
   12e8a:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   12e8c:	|  |     \-> addq.l #1,32(sp)
   12e90:	|  \-------> move.l 1a898 <gameSettings+0x4>,d0
   12e96:	|            cmp.l 32(sp),d0
   12e9a:	\----------- bcc.w 12e1a <makeLanguageTable+0xa2>
		}
	}
}
   12e9e:	             nop
   12ea0:	             nop
   12ea2:	             movea.l (sp)+,a2
   12ea4:	             movea.l (sp)+,a6
   12ea6:	             lea 28(sp),sp
   12eaa:	             rts

00012eac <readIniFile>:

void readIniFile (char * filename) {
   12eac:	                      lea -564(sp),sp
   12eb0:	                      move.l a6,-(sp)
   12eb2:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   12eb4:	                      move.l 576(sp),-(sp)
   12eb8:	                      jsr b8 <copyString>
   12ebe:	                      addq.l #4,sp
   12ec0:	                      move.l d0,-(sp)
   12ec2:	                      jsr 12cc0 <getPrefsFilename>
   12ec8:	                      addq.l #4,sp
   12eca:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   12ece:	                      move.l 562(sp),558(sp)
   12ed4:	                      move.l #1005,554(sp)
   12edc:	                      move.l 1a7ac <DOSBase>,d0
   12ee2:	                      movea.l d0,a6
   12ee4:	                      move.l 558(sp),d1
   12ee8:	                      move.l 554(sp),d2
   12eec:	                      jsr -30(a6)
   12ef0:	                      move.l d0,550(sp)
   12ef4:	                      move.l 550(sp),d0
   12ef8:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   12efc:	                      clr.l 1a894 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   12f02:	                      move.w #1,1a89c <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   12f0a:	                      clr.l 1a89e <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   12f10:	                      moveq #1,d0
   12f12:	                      move.l d0,1a8a2 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   12f18:	                      clr.w 1a8a6 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   12f1e:	                      clr.w 1a8a8 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   12f24:	                      clr.w 1a8aa <gameSettings+0x16>

	FreeVec(langName);
   12f2a:	                      move.l 562(sp),542(sp)
   12f30:	                      move.l 1a7a4 <SysBase>,d0
   12f36:	                      movea.l d0,a6
   12f38:	                      movea.l 542(sp),a1
   12f3c:	                      jsr -690(a6)
	langName = NULL;
   12f40:	                      clr.l 562(sp)

	if (fp) {
   12f44:	                      tst.l 546(sp)
   12f48:	/-------------------- beq.w 13226 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   12f4c:	|                     move.l sp,d0
   12f4e:	|                     addi.l #265,d0
   12f54:	|                     move.l #257,d1
   12f5a:	|                     move.l d1,-(sp)
   12f5c:	|                     clr.l -(sp)
   12f5e:	|                     move.l d0,-(sp)
   12f60:	|                     jsr 16818 <memset>
   12f66:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   12f6a:	|                     move.l sp,d0
   12f6c:	|                     addq.l #8,d0
   12f6e:	|                     move.l #257,d1
   12f74:	|                     move.l d1,-(sp)
   12f76:	|                     clr.l -(sp)
   12f78:	|                     move.l d0,-(sp)
   12f7a:	|                     jsr 16818 <memset>
   12f80:	|                     lea 12(sp),sp
		unsigned char here = 0;
   12f84:	|                     clr.b 571(sp)
		char readChar = ' ';
   12f88:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   12f8e:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   12f94:	|                     clr.w 566(sp)
		LONG tmp = 0;
   12f98:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   12f9c:	|  /----------------> move.l 546(sp),534(sp)
   12fa2:	|  |                  move.l 1a7ac <DOSBase>,d0
   12fa8:	|  |                  movea.l d0,a6
   12faa:	|  |                  move.l 534(sp),d1
   12fae:	|  |                  jsr -306(a6)
   12fb2:	|  |                  move.l d0,530(sp)
   12fb6:	|  |                  move.l 530(sp),d0
   12fba:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   12fbe:	|  |                  moveq #-1,d1
   12fc0:	|  |                  cmp.l 538(sp),d1
   12fc4:	|  |           /----- bne.s 12fd2 <readIniFile+0x126>
				readChar = '\n';
   12fc6:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   12fcc:	|  |           |      clr.w 568(sp)
   12fd0:	|  |           |  /-- bra.s 12fd8 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   12fd2:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   12fd8:	|  |              \-> move.b 570(sp),d0
   12fdc:	|  |                  ext.w d0
   12fde:	|  |                  movea.w d0,a0
   12fe0:	|  |                  moveq #61,d0
   12fe2:	|  |                  cmp.l a0,d0
   12fe4:	|  |     /----------- beq.w 1318e <readIniFile+0x2e2>
   12fe8:	|  |     |            moveq #61,d1
   12fea:	|  |     |            cmp.l a0,d1
   12fec:	|  |  /--|----------- blt.w 1319a <readIniFile+0x2ee>
   12ff0:	|  |  |  |            moveq #10,d0
   12ff2:	|  |  |  |            cmp.l a0,d0
   12ff4:	|  |  |  |        /-- beq.s 12ffe <readIniFile+0x152>
   12ff6:	|  |  |  |        |   moveq #13,d1
   12ff8:	|  |  |  |        |   cmp.l a0,d1
   12ffa:	|  |  +--|--------|-- bne.w 1319a <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   12ffe:	|  |  |  |        \-> tst.w 566(sp)
   13002:	|  |  |  |     /----- beq.w 1317c <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13006:	|  |  |  |     |      pea 193cd <graphics.c.1c13408a+0x309>
   1300c:	|  |  |  |     |      move.l sp,d0
   1300e:	|  |  |  |     |      addi.l #269,d0
   13014:	|  |  |  |     |      move.l d0,-(sp)
   13016:	|  |  |  |     |      jsr 13342 <strcmp>
   1301c:	|  |  |  |     |      addq.l #8,sp
   1301e:	|  |  |  |     |      tst.l d0
   13020:	|  |  |  |     |  /-- bne.s 1303a <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13022:	|  |  |  |     |  |   move.l sp,d0
   13024:	|  |  |  |     |  |   addq.l #8,d0
   13026:	|  |  |  |     |  |   move.l d0,-(sp)
   13028:	|  |  |  |     |  |   jsr 13232 <stringToInt>
   1302e:	|  |  |  |     |  |   addq.l #4,sp
   13030:	|  |  |  |     |  |   move.l d0,1a894 <gameSettings>
   13036:	|  |  |  |     +--|-- bra.w 1317c <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   1303a:	|  |  |  |     |  \-> pea 193d6 <graphics.c.1c13408a+0x312>
   13040:	|  |  |  |     |      move.l sp,d0
   13042:	|  |  |  |     |      addi.l #269,d0
   13048:	|  |  |  |     |      move.l d0,-(sp)
   1304a:	|  |  |  |     |      jsr 13342 <strcmp>
   13050:	|  |  |  |     |      addq.l #8,sp
   13052:	|  |  |  |     |      tst.l d0
   13054:	|  |  |  |     |  /-- bne.s 1307a <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13056:	|  |  |  |     |  |   move.l sp,d0
   13058:	|  |  |  |     |  |   addq.l #8,d0
   1305a:	|  |  |  |     |  |   move.l d0,-(sp)
   1305c:	|  |  |  |     |  |   jsr 13232 <stringToInt>
   13062:	|  |  |  |     |  |   addq.l #4,sp
   13064:	|  |  |  |     |  |   tst.l d0
   13066:	|  |  |  |     |  |   seq d0
   13068:	|  |  |  |     |  |   neg.b d0
   1306a:	|  |  |  |     |  |   move.b d0,d0
   1306c:	|  |  |  |     |  |   andi.w #255,d0
   13070:	|  |  |  |     |  |   move.w d0,1a89c <gameSettings+0x8>
   13076:	|  |  |  |     +--|-- bra.w 1317c <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   1307a:	|  |  |  |     |  \-> pea 193dd <graphics.c.1c13408a+0x319>
   13080:	|  |  |  |     |      move.l sp,d0
   13082:	|  |  |  |     |      addi.l #269,d0
   13088:	|  |  |  |     |      move.l d0,-(sp)
   1308a:	|  |  |  |     |      jsr 13342 <strcmp>
   13090:	|  |  |  |     |      addq.l #8,sp
   13092:	|  |  |  |     |      tst.l d0
   13094:	|  |  |  |     |  /-- bne.s 130ae <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13096:	|  |  |  |     |  |   move.l sp,d0
   13098:	|  |  |  |     |  |   addq.l #8,d0
   1309a:	|  |  |  |     |  |   move.l d0,-(sp)
   1309c:	|  |  |  |     |  |   jsr 13232 <stringToInt>
   130a2:	|  |  |  |     |  |   addq.l #4,sp
   130a4:	|  |  |  |     |  |   move.l d0,1a89e <gameSettings+0xa>
   130aa:	|  |  |  |     +--|-- bra.w 1317c <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   130ae:	|  |  |  |     |  \-> pea 193e5 <graphics.c.1c13408a+0x321>
   130b4:	|  |  |  |     |      move.l sp,d0
   130b6:	|  |  |  |     |      addi.l #269,d0
   130bc:	|  |  |  |     |      move.l d0,-(sp)
   130be:	|  |  |  |     |      jsr 13342 <strcmp>
   130c4:	|  |  |  |     |      addq.l #8,sp
   130c6:	|  |  |  |     |      tst.l d0
   130c8:	|  |  |  |     |  /-- bne.s 130e2 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   130ca:	|  |  |  |     |  |   move.l sp,d0
   130cc:	|  |  |  |     |  |   addq.l #8,d0
   130ce:	|  |  |  |     |  |   move.l d0,-(sp)
   130d0:	|  |  |  |     |  |   jsr 13232 <stringToInt>
   130d6:	|  |  |  |     |  |   addq.l #4,sp
   130d8:	|  |  |  |     |  |   move.l d0,1a8a2 <gameSettings+0xe>
   130de:	|  |  |  |     +--|-- bra.w 1317c <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   130e2:	|  |  |  |     |  \-> pea 193ef <graphics.c.1c13408a+0x32b>
   130e8:	|  |  |  |     |      move.l sp,d0
   130ea:	|  |  |  |     |      addi.l #269,d0
   130f0:	|  |  |  |     |      move.l d0,-(sp)
   130f2:	|  |  |  |     |      jsr 13342 <strcmp>
   130f8:	|  |  |  |     |      addq.l #8,sp
   130fa:	|  |  |  |     |      tst.l d0
   130fc:	|  |  |  |     |  /-- bne.s 13116 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   130fe:	|  |  |  |     |  |   move.l sp,d0
   13100:	|  |  |  |     |  |   addq.l #8,d0
   13102:	|  |  |  |     |  |   move.l d0,-(sp)
   13104:	|  |  |  |     |  |   jsr 13232 <stringToInt>
   1310a:	|  |  |  |     |  |   addq.l #4,sp
   1310c:	|  |  |  |     |  |   move.l d0,d0
   1310e:	|  |  |  |     |  |   move.w d0,1a8a6 <gameSettings+0x12>
   13114:	|  |  |  |     +--|-- bra.s 1317c <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13116:	|  |  |  |     |  \-> pea 193fb <graphics.c.1c13408a+0x337>
   1311c:	|  |  |  |     |      move.l sp,d0
   1311e:	|  |  |  |     |      addi.l #269,d0
   13124:	|  |  |  |     |      move.l d0,-(sp)
   13126:	|  |  |  |     |      jsr 13342 <strcmp>
   1312c:	|  |  |  |     |      addq.l #8,sp
   1312e:	|  |  |  |     |      tst.l d0
   13130:	|  |  |  |     |  /-- bne.s 1314a <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13132:	|  |  |  |     |  |   move.l sp,d0
   13134:	|  |  |  |     |  |   addq.l #8,d0
   13136:	|  |  |  |     |  |   move.l d0,-(sp)
   13138:	|  |  |  |     |  |   jsr 13232 <stringToInt>
   1313e:	|  |  |  |     |  |   addq.l #4,sp
   13140:	|  |  |  |     |  |   move.l d0,d0
   13142:	|  |  |  |     |  |   move.w d0,1a8a8 <gameSettings+0x14>
   13148:	|  |  |  |     +--|-- bra.s 1317c <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   1314a:	|  |  |  |     |  \-> pea 19409 <graphics.c.1c13408a+0x345>
   13150:	|  |  |  |     |      move.l sp,d0
   13152:	|  |  |  |     |      addi.l #269,d0
   13158:	|  |  |  |     |      move.l d0,-(sp)
   1315a:	|  |  |  |     |      jsr 13342 <strcmp>
   13160:	|  |  |  |     |      addq.l #8,sp
   13162:	|  |  |  |     |      tst.l d0
   13164:	|  |  |  |     +----- bne.s 1317c <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13166:	|  |  |  |     |      move.l sp,d0
   13168:	|  |  |  |     |      addq.l #8,d0
   1316a:	|  |  |  |     |      move.l d0,-(sp)
   1316c:	|  |  |  |     |      jsr 13232 <stringToInt>
   13172:	|  |  |  |     |      addq.l #4,sp
   13174:	|  |  |  |     |      move.l d0,d0
   13176:	|  |  |  |     |      move.w d0,1a8aa <gameSettings+0x16>
					}
				}
				here = 0;
   1317c:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   13180:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13184:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13188:	|  |  |  |            clr.b 8(sp)
				break;
   1318c:	|  |  |  |  /-------- bra.s 13204 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   1318e:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   13194:	|  |  |     |         clr.b 571(sp)
				break;
   13198:	|  |  |     +-------- bra.s 13204 <readIniFile+0x358>

				default:
				if (doingSecond) {
   1319a:	|  |  \-----|-------> tst.w 566(sp)
   1319e:	|  |        |  /----- beq.s 131d2 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   131a0:	|  |        |  |      move.b 571(sp),d0
   131a4:	|  |        |  |      move.b d0,d1
   131a6:	|  |        |  |      addq.b #1,d1
   131a8:	|  |        |  |      move.b d1,571(sp)
   131ac:	|  |        |  |      move.b d0,d0
   131ae:	|  |        |  |      andi.l #255,d0
   131b4:	|  |        |  |      lea 572(sp),a0
   131b8:	|  |        |  |      adda.l d0,a0
   131ba:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   131c0:	|  |        |  |      moveq #0,d0
   131c2:	|  |        |  |      move.b 571(sp),d0
   131c6:	|  |        |  |      lea 572(sp),a0
   131ca:	|  |        |  |      adda.l d0,a0
   131cc:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   131d0:	|  |        |  |  /-- bra.s 13202 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   131d2:	|  |        |  \--|-> move.b 571(sp),d0
   131d6:	|  |        |     |   move.b d0,d1
   131d8:	|  |        |     |   addq.b #1,d1
   131da:	|  |        |     |   move.b d1,571(sp)
   131de:	|  |        |     |   move.b d0,d0
   131e0:	|  |        |     |   andi.l #255,d0
   131e6:	|  |        |     |   lea 572(sp),a0
   131ea:	|  |        |     |   adda.l d0,a0
   131ec:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   131f2:	|  |        |     |   moveq #0,d0
   131f4:	|  |        |     |   move.b 571(sp),d0
   131f8:	|  |        |     |   lea 572(sp),a0
   131fc:	|  |        |     |   adda.l d0,a0
   131fe:	|  |        |     |   clr.b -307(a0)
				break;
   13202:	|  |        |     \-> nop
			}
		} while (keepGoing);
   13204:	|  |        \-------> tst.w 568(sp)
   13208:	|  \----------------- bne.w 12f9c <readIniFile+0xf0>

		Close(fp);
   1320c:	|                     move.l 546(sp),526(sp)
   13212:	|                     move.l 1a7ac <DOSBase>,d0
   13218:	|                     movea.l d0,a6
   1321a:	|                     move.l 526(sp),d1
   1321e:	|                     jsr -36(a6)
   13222:	|                     move.l d0,522(sp)
	}
}
   13226:	\-------------------> nop
   13228:	                      move.l (sp)+,d2
   1322a:	                      movea.l (sp)+,a6
   1322c:	                      lea 564(sp),sp
   13230:	                      rts

00013232 <stringToInt>:

unsigned int stringToInt (char * s) {
   13232:	             subq.l #8,sp
	int i = 0;
   13234:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13238:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   1323c:	/----------> movea.l 12(sp),a0
   13240:	|            move.b (a0),d0
   13242:	|            cmpi.b #47,d0
   13246:	|        /-- ble.s 1327e <stringToInt+0x4c>
   13248:	|        |   movea.l 12(sp),a0
   1324c:	|        |   move.b (a0),d0
   1324e:	|        |   cmpi.b #57,d0
   13252:	|        +-- bgt.s 1327e <stringToInt+0x4c>
			i *= 10;
   13254:	|        |   move.l 4(sp),d1
   13258:	|        |   move.l d1,d0
   1325a:	|        |   add.l d0,d0
   1325c:	|        |   add.l d0,d0
   1325e:	|        |   add.l d1,d0
   13260:	|        |   add.l d0,d0
   13262:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13266:	|        |   movea.l 12(sp),a0
   1326a:	|        |   move.b (a0),d0
   1326c:	|        |   ext.w d0
   1326e:	|        |   movea.w d0,a0
   13270:	|        |   moveq #-48,d0
   13272:	|        |   add.l a0,d0
   13274:	|        |   add.l d0,4(sp)
			s ++;
   13278:	|        |   addq.l #1,12(sp)
   1327c:	|  /-----|-- bra.s 132b6 <stringToInt+0x84>
		} else if (*s == '-') {
   1327e:	|  |     \-> movea.l 12(sp),a0
   13282:	|  |         move.b (a0),d0
   13284:	|  |         cmpi.b #45,d0
   13288:	|  |     /-- bne.s 132a2 <stringToInt+0x70>
			negative = ! negative;
   1328a:	|  |     |   tst.w 2(sp)
   1328e:	|  |     |   seq d0
   13290:	|  |     |   neg.b d0
   13292:	|  |     |   move.b d0,d0
   13294:	|  |     |   andi.w #255,d0
   13298:	|  |     |   move.w d0,2(sp)
			s++;
   1329c:	|  |     |   addq.l #1,12(sp)
   132a0:	+--|-----|-- bra.s 1323c <stringToInt+0xa>
		} else {
			if (negative)
   132a2:	|  |     \-> tst.w 2(sp)
   132a6:	|  |     /-- beq.s 132b0 <stringToInt+0x7e>
				return -i;
   132a8:	|  |     |   move.l 4(sp),d0
   132ac:	|  |     |   neg.l d0
   132ae:	|  |  /--|-- bra.s 132b8 <stringToInt+0x86>
			return i;
   132b0:	|  |  |  \-> move.l 4(sp),d0
   132b4:	|  |  +----- bra.s 132b8 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   132b6:	\--\--|----X bra.s 1323c <stringToInt+0xa>
		}
	}
   132b8:	      \----> addq.l #8,sp
   132ba:	             rts

000132bc <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   132bc:	    lea -28(sp),sp
   132c0:	    move.l a6,-(sp)
   132c2:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   132c4:	    pea 19413 <graphics.c.1c13408a+0x34f>
   132ca:	    jsr 16894 <KPrintF>
   132d0:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   132d2:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   132d6:	    move.l 40(sp),30(sp)
   132dc:	    move.l #1005,26(sp)
   132e4:	    move.l 1a7ac <DOSBase>,d0
   132ea:	    movea.l d0,a6
   132ec:	    move.l 30(sp),d1
   132f0:	    move.l 26(sp),d2
   132f4:	    jsr -30(a6)
   132f8:	    move.l d0,22(sp)
   132fc:	    move.l 22(sp),d0
   13300:	    move.l d0,18(sp)
	if (tester) {
   13304:	/-- beq.s 13334 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13306:	|   pea 1942d <graphics.c.1c13408a+0x369>
   1330c:	|   jsr 16894 <KPrintF>
   13312:	|   addq.l #4,sp
		retval = 1;
   13314:	|   move.b #1,35(sp)
		Close(tester);
   1331a:	|   move.l 18(sp),14(sp)
   13320:	|   move.l 1a7ac <DOSBase>,d0
   13326:	|   movea.l d0,a6
   13328:	|   move.l 14(sp),d1
   1332c:	|   jsr -36(a6)
   13330:	|   move.l d0,10(sp)
	}
	return retval;
   13334:	\-> move.b 35(sp),d0
   13338:	    move.l (sp)+,d2
   1333a:	    movea.l (sp)+,a6
   1333c:	    lea 28(sp),sp
   13340:	    rts

00013342 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13342:	   /-- bra.s 1334c <strcmp+0xa>
    {
        s1++;
   13344:	/--|-> addq.l #1,4(sp)
        s2++;
   13348:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   1334c:	|  \-> movea.l 4(sp),a0
   13350:	|      move.b (a0),d0
   13352:	|  /-- beq.s 13364 <strcmp+0x22>
   13354:	|  |   movea.l 4(sp),a0
   13358:	|  |   move.b (a0),d1
   1335a:	|  |   movea.l 8(sp),a0
   1335e:	|  |   move.b (a0),d0
   13360:	|  |   cmp.b d1,d0
   13362:	\--|-- beq.s 13344 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13364:	   \-> movea.l 4(sp),a0
   13368:	       move.b (a0),d0
   1336a:	       moveq #0,d1
   1336c:	       move.b d0,d1
   1336e:	       movea.l 8(sp),a0
   13372:	       move.b (a0),d0
   13374:	       move.b d0,d0
   13376:	       andi.l #255,d0
   1337c:	       sub.l d0,d1
   1337e:	       move.l d1,d0
}
   13380:	       rts

00013382 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13382:	       subq.l #4,sp
	long unsigned int i = 0;
   13384:	       clr.l (sp)
	while(s[i]) i++; 
   13386:	   /-- bra.s 1338a <strlen+0x8>
   13388:	/--|-> addq.l #1,(sp)
   1338a:	|  \-> movea.l 8(sp),a0
   1338e:	|      adda.l (sp),a0
   13390:	|      move.b (a0),d0
   13392:	\----- bne.s 13388 <strlen+0x6>
	return(i);
   13394:	       move.l (sp),d0
}
   13396:	       addq.l #4,sp
   13398:	       rts

0001339a <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   1339a:	    nop
   1339c:	/-> move.l 8(sp),d0
   133a0:	|   move.l d0,d1
   133a2:	|   addq.l #1,d1
   133a4:	|   move.l d1,8(sp)
   133a8:	|   movea.l 4(sp),a0
   133ac:	|   lea 1(a0),a1
   133b0:	|   move.l a1,4(sp)
   133b4:	|   movea.l d0,a1
   133b6:	|   move.b (a1),d0
   133b8:	|   move.b d0,(a0)
   133ba:	|   move.b (a0),d0
   133bc:	\-- bne.s 1339c <strcpy+0x2>
}
   133be:	    nop
   133c0:	    rts

000133c2 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   133c2:	    lea -20(sp),sp
   133c6:	    move.l a6,-(sp)
   133c8:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   133ca:	    move.l 32(sp),-(sp)
   133ce:	    jsr 13382 <strlen>
   133d4:	    addq.l #4,sp
   133d6:	    move.l d0,d2
   133d8:	    move.l 36(sp),-(sp)
   133dc:	    jsr 13382 <strlen>
   133e2:	    addq.l #4,sp
   133e4:	    add.l d2,d0
   133e6:	    move.l d0,d1
   133e8:	    addq.l #1,d1
   133ea:	    move.l d1,20(sp)
   133ee:	    clr.l 16(sp)
   133f2:	    move.l 1a7a4 <SysBase>,d0
   133f8:	    movea.l d0,a6
   133fa:	    move.l 20(sp),d0
   133fe:	    move.l 16(sp),d1
   13402:	    jsr -684(a6)
   13406:	    move.l d0,12(sp)
   1340a:	    move.l 12(sp),d0
   1340e:	    move.l d0,8(sp)
	char * t = newString;
   13412:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13418:	    nop
   1341a:	/-> move.l 32(sp),d0
   1341e:	|   move.l d0,d1
   13420:	|   addq.l #1,d1
   13422:	|   move.l d1,32(sp)
   13426:	|   movea.l 24(sp),a0
   1342a:	|   lea 1(a0),a1
   1342e:	|   move.l a1,24(sp)
   13432:	|   movea.l d0,a1
   13434:	|   move.b (a1),d0
   13436:	|   move.b d0,(a0)
   13438:	|   move.b (a0),d0
   1343a:	\-- bne.s 1341a <joinStrings+0x58>
	t--;
   1343c:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13440:	    nop
   13442:	/-> move.l 36(sp),d0
   13446:	|   move.l d0,d1
   13448:	|   addq.l #1,d1
   1344a:	|   move.l d1,36(sp)
   1344e:	|   movea.l 24(sp),a0
   13452:	|   lea 1(a0),a1
   13456:	|   move.l a1,24(sp)
   1345a:	|   movea.l d0,a1
   1345c:	|   move.b (a1),d0
   1345e:	|   move.b d0,(a0)
   13460:	|   move.b (a0),d0
   13462:	\-- bne.s 13442 <joinStrings+0x80>

	return newString;
   13464:	    move.l 8(sp),d0
}
   13468:	    move.l (sp)+,d2
   1346a:	    movea.l (sp)+,a6
   1346c:	    lea 20(sp),sp
   13470:	    rts

00013472 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13472:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13476:	       moveq #10,d0
   13478:	       cmp.l 28(sp),d0
   1347c:	   /-- bne.s 1349a <itoa+0x28>
   1347e:	   |   tst.l 20(sp)
   13482:	   +-- bge.s 1349a <itoa+0x28>
        *str++ = '-';
   13484:	   |   move.l 24(sp),d0
   13488:	   |   move.l d0,d1
   1348a:	   |   addq.l #1,d1
   1348c:	   |   move.l d1,24(sp)
   13490:	   |   movea.l d0,a0
   13492:	   |   move.b #45,(a0)
        value *= -1;
   13496:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   1349a:	   \-> move.l 24(sp),12(sp)
   134a0:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   134a6:	   /-> move.l 20(sp),d0
   134aa:	   |   move.l 28(sp),-(sp)
   134ae:	   |   move.l d0,-(sp)
   134b0:	   |   jsr 172fe <__modsi3>
   134b6:	   |   addq.l #8,sp
   134b8:	   |   movea.l d0,a1
   134ba:	   |   move.l 12(sp),d0
   134be:	   |   move.l d0,d1
   134c0:	   |   addq.l #1,d1
   134c2:	   |   move.l d1,12(sp)
   134c6:	   |   lea 19445 <graphics.c.1c13408a+0x381>,a0
   134cc:	   |   move.b (0,a1,a0.l),d1
   134d0:	   |   movea.l d0,a0
   134d2:	   |   move.b d1,(a0)
        value /= base;
   134d4:	   |   move.l 28(sp),-(sp)
   134d8:	   |   move.l 24(sp),-(sp)
   134dc:	   |   jsr 172d0 <__divsi3>
   134e2:	   |   addq.l #8,sp
   134e4:	   |   move.l d0,20(sp)
    } while (value);
   134e8:	   \-- bne.s 134a6 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   134ea:	       move.l 12(sp),d0
   134ee:	       move.l d0,d1
   134f0:	       subq.l #1,d1
   134f2:	       move.l d1,12(sp)
   134f6:	       movea.l d0,a0
   134f8:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   134fa:	       move.l 4(sp),8(sp)
   13500:	   /-- bra.s 13526 <itoa+0xb4>
        char temp = *low;
   13502:	/--|-> movea.l 8(sp),a0
   13506:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   1350a:	|  |   movea.l 12(sp),a0
   1350e:	|  |   move.b (a0),d0
   13510:	|  |   movea.l 8(sp),a0
   13514:	|  |   move.b d0,(a0)
        *ptr = temp;
   13516:	|  |   movea.l 12(sp),a0
   1351a:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   1351e:	|  |   addq.l #1,8(sp)
   13522:	|  |   subq.l #1,12(sp)
   13526:	|  \-> move.l 8(sp),d0
   1352a:	|      cmp.l 12(sp),d0
   1352e:	\----- bcs.s 13502 <itoa+0x90>
    }
    return rc;
   13530:	       move.l 4(sp),d0
}
   13534:	       lea 16(sp),sp
   13538:	       rts

0001353a <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   1353a:	                            lea -40(sp),sp
   1353e:	                            move.l d2,-(sp)
    char* s = str;
   13540:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13546:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   1354c:	   /----------------------- bra.w 13680 <vsprintf2+0x146>
        if (*p == '%') {
   13550:	/--|----------------------> movea.l 36(sp),a0
   13554:	|  |                        move.b (a0),d0
   13556:	|  |                        cmpi.b #37,d0
   1355a:	|  |  /-------------------- bne.w 13666 <vsprintf2+0x12c>
            switch (*++p) {
   1355e:	|  |  |                     addq.l #1,36(sp)
   13562:	|  |  |                     movea.l 36(sp),a0
   13566:	|  |  |                     move.b (a0),d0
   13568:	|  |  |                     ext.w d0
   1356a:	|  |  |                     movea.w d0,a0
   1356c:	|  |  |                     moveq #115,d0
   1356e:	|  |  |                     cmp.l a0,d0
   13570:	|  |  |           /-------- beq.s 135e8 <vsprintf2+0xae>
   13572:	|  |  |           |         moveq #115,d1
   13574:	|  |  |           |         cmp.l a0,d1
   13576:	|  |  |  /--------|-------- blt.w 1364e <vsprintf2+0x114>
   1357a:	|  |  |  |        |         moveq #99,d2
   1357c:	|  |  |  |        |         cmp.l a0,d2
   1357e:	|  |  |  |  /-----|-------- beq.w 13626 <vsprintf2+0xec>
   13582:	|  |  |  |  |     |         moveq #100,d0
   13584:	|  |  |  |  |     |         cmp.l a0,d0
   13586:	|  |  |  +--|-----|-------- bne.w 1364e <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   1358a:	|  |  |  |  |     |         addq.l #4,56(sp)
   1358e:	|  |  |  |  |     |         movea.l 56(sp),a0
   13592:	|  |  |  |  |     |         move.l (a0),d0
   13594:	|  |  |  |  |     |         move.l d0,d1
   13596:	|  |  |  |  |     |         subq.l #1,d1
   13598:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   1359c:	|  |  |  |  |     |         pea a <_start+0xa>
   135a0:	|  |  |  |  |     |         lea 8(sp),a0
   135a4:	|  |  |  |  |     |         move.l a0,-(sp)
   135a6:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   135aa:	|  |  |  |  |     |         jsr 13472 <itoa>
   135b0:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   135b4:	|  |  |  |  |     |         lea 44(sp),a0
   135b8:	|  |  |  |  |     |         lea -40(a0),a0
   135bc:	|  |  |  |  |     |         move.l a0,28(sp)
   135c0:	|  |  |  |  |     |     /-- bra.s 135dc <vsprintf2+0xa2>
                        *s++ = *b;
   135c2:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   135c6:	|  |  |  |  |     |  |  |   move.l d0,d1
   135c8:	|  |  |  |  |     |  |  |   addq.l #1,d1
   135ca:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   135ce:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   135d2:	|  |  |  |  |     |  |  |   move.b (a0),d1
   135d4:	|  |  |  |  |     |  |  |   movea.l d0,a0
   135d6:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   135d8:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   135dc:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   135e0:	|  |  |  |  |     |  |      move.b (a0),d0
   135e2:	|  |  |  |  |     |  \----- bne.s 135c2 <vsprintf2+0x88>
                    }
                    break;
   135e4:	|  |  |  |  |  /--|-------- bra.w 1367c <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   135e8:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   135ec:	|  |  |  |  |  |            movea.l 56(sp),a0
   135f0:	|  |  |  |  |  |            move.l (a0),d0
   135f2:	|  |  |  |  |  |            move.l d0,d1
   135f4:	|  |  |  |  |  |            subq.l #1,d1
   135f6:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   135fa:	|  |  |  |  |  |        /-- bra.s 1361c <vsprintf2+0xe2>
                        *s++ = *sval++;
   135fc:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   13600:	|  |  |  |  |  |     |  |   move.l d1,d2
   13602:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13604:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13608:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   1360c:	|  |  |  |  |  |     |  |   move.l d0,d2
   1360e:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13610:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13614:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13616:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13618:	|  |  |  |  |  |     |  |   movea.l d0,a0
   1361a:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   1361c:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   13620:	|  |  |  |  |  |     |      move.b (a0),d0
   13622:	|  |  |  |  |  |     \----- bne.s 135fc <vsprintf2+0xc2>
                    }
                    break;
   13624:	|  |  |  |  |  +----------- bra.s 1367c <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13626:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   1362a:	|  |  |  |     |            movea.l 56(sp),a0
   1362e:	|  |  |  |     |            move.l (a0),d0
   13630:	|  |  |  |     |            move.l d0,d1
   13632:	|  |  |  |     |            subq.l #1,d1
   13634:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13638:	|  |  |  |     |            move.l 40(sp),d0
   1363c:	|  |  |  |     |            move.l d0,d2
   1363e:	|  |  |  |     |            addq.l #1,d2
   13640:	|  |  |  |     |            move.l d2,40(sp)
   13644:	|  |  |  |     |            move.l 24(sp),d1
   13648:	|  |  |  |     |            movea.l d0,a0
   1364a:	|  |  |  |     |            move.b d1,(a0)
                    break;
   1364c:	|  |  |  |     +----------- bra.s 1367c <vsprintf2+0x142>
                default:
                    *s++ = *p;
   1364e:	|  |  |  \-----|----------> move.l 40(sp),d0
   13652:	|  |  |        |            move.l d0,d1
   13654:	|  |  |        |            addq.l #1,d1
   13656:	|  |  |        |            move.l d1,40(sp)
   1365a:	|  |  |        |            movea.l 36(sp),a0
   1365e:	|  |  |        |            move.b (a0),d1
   13660:	|  |  |        |            movea.l d0,a0
   13662:	|  |  |        |            move.b d1,(a0)
                    break;
   13664:	|  |  |        +----------- bra.s 1367c <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13666:	|  |  \--------|----------> move.l 40(sp),d0
   1366a:	|  |           |            move.l d0,d1
   1366c:	|  |           |            addq.l #1,d1
   1366e:	|  |           |            move.l d1,40(sp)
   13672:	|  |           |            movea.l 36(sp),a0
   13676:	|  |           |            move.b (a0),d1
   13678:	|  |           |            movea.l d0,a0
   1367a:	|  |           |            move.b d1,(a0)
        }
        p++;
   1367c:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   13680:	|  \----------------------> movea.l 36(sp),a0
   13684:	|                           move.b (a0),d0
   13686:	\-------------------------- bne.w 13550 <vsprintf2+0x16>
    }
    *s = '\0';
   1368a:	                            movea.l 40(sp),a0
   1368e:	                            clr.b (a0)
    return s - str;
   13690:	                            move.l 40(sp),d0
   13694:	                            sub.l 48(sp),d0
}
   13698:	                            move.l (sp)+,d2
   1369a:	                            lea 40(sp),sp
   1369e:	                            rts

000136a0 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   136a0:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   136a2:	moveq #16,d0
   136a4:	add.l sp,d0
   136a6:	move.l d0,d1
   136a8:	addq.l #4,d1
   136aa:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   136ae:	move.l 16(sp),d0
   136b2:	move.l 4(sp),-(sp)
   136b6:	move.l d0,-(sp)
   136b8:	move.l 20(sp),-(sp)
   136bc:	jsr 1353a <vsprintf2>
   136c2:	lea 12(sp),sp
   136c6:	move.l d0,(sp)
    va_end(args);
   136c8:	clr.l 4(sp)

    return done;
   136cc:	move.l (sp),d0
}
   136ce:	addq.l #8,sp
   136d0:	rts

000136d2 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   136d2:	       lea -20(sp),sp
   136d6:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   136d8:	       moveq #12,d0
   136da:	       move.l d0,20(sp)
   136de:	       clr.l 16(sp)
   136e2:	       move.l 1a7a4 <SysBase>,d0
   136e8:	       movea.l d0,a6
   136ea:	       move.l 20(sp),d0
   136ee:	       move.l 16(sp),d1
   136f2:	       jsr -684(a6)
   136f6:	       move.l d0,12(sp)
   136fa:	       move.l 12(sp),d0
   136fe:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   13702:	   /-- bne.s 13708 <addVarToStack+0x36>
   13704:	   |   clr.w d0
   13706:	/--|-- bra.s 13750 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   13708:	|  \-> move.l 8(sp),d0
   1370c:	|      move.l d0,-(sp)
   1370e:	|      move.l 32(sp),-(sp)
   13712:	|      jsr 14234 <copyMain>
   13718:	|      addq.l #8,sp
   1371a:	|      tst.w d0
   1371c:	|  /-- bne.s 13738 <addVarToStack+0x66>
        FreeVec(newStack);
   1371e:	|  |   move.l 8(sp),4(sp)
   13724:	|  |   move.l 1a7a4 <SysBase>,d0
   1372a:	|  |   movea.l d0,a6
   1372c:	|  |   movea.l 4(sp),a1
   13730:	|  |   jsr -690(a6)
        return FALSE;
   13734:	|  |   clr.w d0
   13736:	+--|-- bra.s 13750 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   13738:	|  \-> movea.l 32(sp),a0
   1373c:	|      move.l (a0),d0
   1373e:	|      movea.l 8(sp),a0
   13742:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13746:	|      movea.l 32(sp),a0
   1374a:	|      move.l 8(sp),(a0)
    return TRUE;
   1374e:	|      moveq #1,d0
}
   13750:	\----> movea.l (sp)+,a6
   13752:	       lea 20(sp),sp
   13756:	       rts

00013758 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   13758:	       lea -16(sp),sp
   1375c:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1375e:	       moveq #12,d0
   13760:	       move.l d0,16(sp)
   13764:	       clr.l 12(sp)
   13768:	       move.l 1a7a4 <SysBase>,d0
   1376e:	       movea.l d0,a6
   13770:	       move.l 16(sp),d0
   13774:	       move.l 12(sp),d1
   13778:	       jsr -684(a6)
   1377c:	       move.l d0,8(sp)
   13780:	       move.l 8(sp),d0
   13784:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   13788:	   /-- bne.s 1378e <addVarToStackQuick+0x36>
   1378a:	   |   clr.w d0
   1378c:	/--|-- bra.s 137c4 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   1378e:	|  \-> move.l 4(sp),d0
   13792:	|      pea 8 <_start+0x8>
   13796:	|      move.l 28(sp),-(sp)
   1379a:	|      move.l d0,-(sp)
   1379c:	|      jsr 16848 <memcpy>
   137a2:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   137a6:	|      movea.l 24(sp),a0
   137aa:	|      clr.l (a0)

    newStack->next = *thisStack;
   137ac:	|      movea.l 28(sp),a0
   137b0:	|      move.l (a0),d0
   137b2:	|      movea.l 4(sp),a0
   137b6:	|      move.l d0,8(a0)
    *thisStack = newStack;
   137ba:	|      movea.l 28(sp),a0
   137be:	|      move.l 4(sp),(a0)
    return TRUE;
   137c2:	|      moveq #1,d0
}
   137c4:	\----> movea.l (sp)+,a6
   137c6:	       lea 16(sp),sp
   137ca:	       rts

000137cc <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   137cc:	       lea -16(sp),sp
   137d0:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   137d2:	       movea.l 24(sp),a0
   137d6:	       move.l (a0),d0
   137d8:	       moveq #1,d1
   137da:	       cmp.l d0,d1
   137dc:	   /-- bne.s 13806 <addVariablesInSecond+0x3a>
   137de:	   |   movea.l 28(sp),a0
   137e2:	   |   move.l (a0),d0
   137e4:	   |   moveq #1,d1
   137e6:	   |   cmp.l d0,d1
   137e8:	   +-- bne.s 13806 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   137ea:	   |   movea.l 28(sp),a0
   137ee:	   |   move.l 4(a0),d1
   137f2:	   |   movea.l 24(sp),a0
   137f6:	   |   move.l 4(a0),d0
   137fa:	   |   add.l d1,d0
   137fc:	   |   movea.l 28(sp),a0
   13800:	   |   move.l d0,4(a0)
   13804:	/--|-- bra.s 13880 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   13806:	|  \-> move.l 24(sp),-(sp)
   1380a:	|      jsr 1446c <getTextFromAnyVar>
   13810:	|      addq.l #4,sp
   13812:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   13816:	|      move.l 28(sp),-(sp)
   1381a:	|      jsr 1446c <getTextFromAnyVar>
   13820:	|      addq.l #4,sp
   13822:	|      move.l d0,12(sp)

		unlinkVar(var2);
   13826:	|      move.l 28(sp),-(sp)
   1382a:	|      jsr 140e4 <unlinkVar>
   13830:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   13832:	|      move.l 12(sp),-(sp)
   13836:	|      move.l 20(sp),-(sp)
   1383a:	|      jsr 133c2 <joinStrings>
   13840:	|      addq.l #8,sp
   13842:	|      movea.l 28(sp),a0
   13846:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   1384a:	|      movea.l 28(sp),a0
   1384e:	|      moveq #3,d0
   13850:	|      move.l d0,(a0)
		FreeVec(string1);
   13852:	|      move.l 16(sp),8(sp)
   13858:	|      move.l 1a7a4 <SysBase>,d0
   1385e:	|      movea.l d0,a6
   13860:	|      movea.l 8(sp),a1
   13864:	|      jsr -690(a6)
		FreeVec(string2);
   13868:	|      move.l 12(sp),4(sp)
   1386e:	|      move.l 1a7a4 <SysBase>,d0
   13874:	|      movea.l d0,a6
   13876:	|      movea.l 4(sp),a1
   1387a:	|      jsr -690(a6)
	}
}
   1387e:	|      nop
   13880:	\----> nop
   13882:	       movea.l (sp)+,a6
   13884:	       lea 16(sp),sp
   13888:	       rts

0001388a <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   1388a:	movea.l 8(sp),a0
   1388e:	move.l 4(a0),-(sp)
   13892:	move.l (a0),-(sp)
   13894:	movea.l 12(sp),a0
   13898:	move.l 4(a0),-(sp)
   1389c:	move.l (a0),-(sp)
   1389e:	jsr 138c0 <compareVars>
   138a4:	lea 16(sp),sp
   138a8:	move.l d0,-(sp)
   138aa:	pea 1 <_start+0x1>
   138ae:	move.l 16(sp),-(sp)
   138b2:	jsr 14788 <setVariable>
   138b8:	lea 12(sp),sp
}
   138bc:	nop
   138be:	rts

000138c0 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   138c0:	       subq.l #4,sp
	int re = 0;
   138c2:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   138c4:	       move.l 8(sp),d1
   138c8:	       move.l 16(sp),d0
   138cc:	       cmp.l d1,d0
   138ce:	/----- bne.w 13996 <compareVars+0xd6>
		switch (var1.varType) {
   138d2:	|      move.l 8(sp),d0
   138d6:	|      moveq #9,d1
   138d8:	|      cmp.l d0,d1
   138da:	|  /-- bcs.w 1397e <compareVars+0xbe>
   138de:	|  |   add.l d0,d0
   138e0:	|  |   movea.l d0,a0
   138e2:	|  |   adda.l #80110,a0
   138e8:	|  |   move.w (a0),d0
   138ea:	|  |   jmp (138ee <compareVars+0x2e>,pc,d0.w)
   138ee:	|  |   ori.b #-112,(a4)
   138f2:	|  |   ori.l #5243024,(a0)
   138f8:	|  |   ori.l #7733392,(a0)
   138fe:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   13904:	|  |   move.l d0,(sp)
			break;
   13906:	+--|-- bra.w 13996 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   1390a:	|  |   move.l 12(sp),d1
   1390e:	|  |   move.l 20(sp),d0
   13912:	|  |   cmp.l d1,d0
   13914:	|  |   seq d0
   13916:	|  |   neg.b d0
   13918:	|  |   move.b d0,d0
   1391a:	|  |   andi.l #255,d0
   13920:	|  |   move.l d0,(sp)
			break;
   13922:	+--|-- bra.s 13996 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   13924:	|  |   move.l 12(sp),d1
   13928:	|  |   move.l 20(sp),d0
   1392c:	|  |   cmp.l d1,d0
   1392e:	|  |   seq d0
   13930:	|  |   neg.b d0
   13932:	|  |   move.b d0,d0
   13934:	|  |   andi.l #255,d0
   1393a:	|  |   move.l d0,(sp)
			break;
   1393c:	+--|-- bra.s 13996 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   1393e:	|  |   move.l 20(sp),d1
   13942:	|  |   move.l 12(sp),d0
   13946:	|  |   move.l d1,-(sp)
   13948:	|  |   move.l d0,-(sp)
   1394a:	|  |   jsr 13342 <strcmp>
   13950:	|  |   addq.l #8,sp
   13952:	|  |   tst.l d0
   13954:	|  |   seq d0
   13956:	|  |   neg.b d0
   13958:	|  |   move.b d0,d0
   1395a:	|  |   andi.l #255,d0
   13960:	|  |   move.l d0,(sp)
			break;
   13962:	+--|-- bra.s 13996 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   13964:	|  |   move.l 12(sp),d1
   13968:	|  |   move.l 20(sp),d0
   1396c:	|  |   cmp.l d1,d0
   1396e:	|  |   seq d0
   13970:	|  |   neg.b d0
   13972:	|  |   move.b d0,d0
   13974:	|  |   andi.l #255,d0
   1397a:	|  |   move.l d0,(sp)
			break;
   1397c:	+--|-- bra.s 13996 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   1397e:	|  \-> move.l 12(sp),d1
   13982:	|      move.l 20(sp),d0
   13986:	|      cmp.l d1,d0
   13988:	|      seq d0
   1398a:	|      neg.b d0
   1398c:	|      move.b d0,d0
   1398e:	|      andi.l #255,d0
   13994:	|      move.l d0,(sp)
		}
	}
	return re;
   13996:	\----> move.l (sp),d0
}
   13998:	       addq.l #4,sp
   1399a:	       rts

0001399c <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   1399c:	             lea -16(sp),sp
   139a0:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   139a2:	             movea.l 28(sp),a0
   139a6:	             moveq #6,d0
   139a8:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   139aa:	             moveq #12,d0
   139ac:	             move.l d0,12(sp)
   139b0:	             clr.l 8(sp)
   139b4:	             move.l 1a7a4 <SysBase>,d0
   139ba:	             movea.l d0,a6
   139bc:	             move.l 12(sp),d0
   139c0:	             move.l 8(sp),d1
   139c4:	             jsr -684(a6)
   139c8:	             move.l d0,4(sp)
   139cc:	             move.l 4(sp),d0
   139d0:	             movea.l 28(sp),a0
   139d4:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   139d8:	             movea.l 28(sp),a0
   139dc:	             move.l 4(a0),d0
   139e0:	         /-- bne.s 139e8 <copyStack+0x4c>
   139e2:	         |   clr.w d0
   139e4:	/--------|-- bra.w 13a6a <copyStack+0xce>
	to->varData.theStack->first = NULL;
   139e8:	|        \-> movea.l 28(sp),a0
   139ec:	|            movea.l 4(a0),a0
   139f0:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   139f2:	|            movea.l 28(sp),a0
   139f6:	|            movea.l 4(a0),a0
   139fa:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   139fe:	|            movea.l 28(sp),a0
   13a02:	|            movea.l 4(a0),a0
   13a06:	|            moveq #1,d0
   13a08:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   13a0c:	|            movea.l 24(sp),a0
   13a10:	|            movea.l 4(a0),a0
   13a14:	|            move.l (a0),16(sp)

	while (a) {
   13a18:	|     /----- bra.s 13a62 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   13a1a:	|  /--|----> movea.l 28(sp),a0
   13a1e:	|  |  |      move.l 4(a0),d0
   13a22:	|  |  |      move.l d0,d1
   13a24:	|  |  |      move.l 16(sp),d0
   13a28:	|  |  |      move.l d1,-(sp)
   13a2a:	|  |  |      move.l d0,-(sp)
   13a2c:	|  |  |      jsr 136d2 <addVarToStack>
   13a32:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   13a34:	|  |  |      movea.l 28(sp),a0
   13a38:	|  |  |      movea.l 4(a0),a0
   13a3c:	|  |  |      move.l 4(a0),d0
   13a40:	|  |  |  /-- bne.s 13a58 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   13a42:	|  |  |  |   movea.l 28(sp),a0
   13a46:	|  |  |  |   movea.l 4(a0),a1
   13a4a:	|  |  |  |   movea.l 28(sp),a0
   13a4e:	|  |  |  |   movea.l 4(a0),a0
   13a52:	|  |  |  |   move.l (a1),d0
   13a54:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   13a58:	|  |  |  \-> movea.l 16(sp),a0
   13a5c:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   13a62:	|  |  \----> tst.l 16(sp)
   13a66:	|  \-------- bne.s 13a1a <copyStack+0x7e>
	}

	return TRUE;
   13a68:	|            moveq #1,d0
}
   13a6a:	\----------> movea.l (sp)+,a6
   13a6c:	             lea 16(sp),sp
   13a70:	             rts

00013a72 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   13a72:	                lea -20(sp),sp
   13a76:	                move.l a6,-(sp)
   13a78:	                move.l 36(sp),d0
   13a7c:	                move.w d0,d0
   13a7e:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   13a82:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   13a88:	                clr.l 16(sp)

    while (*huntVar) {
   13a8c:	   /----------- bra.s 13b0a <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   13a8e:	/--|----------> movea.l 20(sp),a0
   13a92:	|  |            movea.l (a0),a0
   13a94:	|  |            movea.l 28(sp),a1
   13a98:	|  |            move.l 4(a1),-(sp)
   13a9c:	|  |            move.l (a1),-(sp)
   13a9e:	|  |            move.l 4(a0),-(sp)
   13aa2:	|  |            move.l (a0),-(sp)
   13aa4:	|  |            jsr 138c0 <compareVars>
   13aaa:	|  |            lea 16(sp),sp
   13aae:	|  |            tst.l d0
   13ab0:	|  |  /-------- beq.s 13afc <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   13ab2:	|  |  |         movea.l 20(sp),a0
   13ab6:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   13aba:	|  |  |         movea.l 12(sp),a0
   13abe:	|  |  |         move.l 8(a0),d0
   13ac2:	|  |  |         movea.l 20(sp),a0
   13ac6:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   13ac8:	|  |  |         move.l 12(sp),d0
   13acc:	|  |  |         move.l d0,-(sp)
   13ace:	|  |  |         jsr 140e4 <unlinkVar>
   13ad4:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   13ad6:	|  |  |         move.l 12(sp),8(sp)
   13adc:	|  |  |         move.l 1a7a4 <SysBase>,d0
   13ae2:	|  |  |         movea.l d0,a6
   13ae4:	|  |  |         movea.l 8(sp),a1
   13ae8:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   13aec:	|  |  |         tst.w 6(sp)
   13af0:	|  |  |     /-- bne.s 13af6 <deleteVarFromStack+0x84>
   13af2:	|  |  |     |   moveq #1,d0
   13af4:	|  |  |  /--|-- bra.s 13b18 <deleteVarFromStack+0xa6>
            reply++;
   13af6:	|  |  |  |  \-> addq.l #1,16(sp)
   13afa:	|  +--|--|----- bra.s 13b0a <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   13afc:	|  |  \--|----> movea.l 20(sp),a0
   13b00:	|  |     |      move.l (a0),d0
   13b02:	|  |     |      move.l d0,d1
   13b04:	|  |     |      addq.l #8,d1
   13b06:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   13b0a:	|  \-----|----> movea.l 20(sp),a0
   13b0e:	|        |      move.l (a0),d0
   13b10:	\--------|----- bne.w 13a8e <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   13b14:	         |      move.l 16(sp),d0
}
   13b18:	         \----> movea.l (sp)+,a6
   13b1a:	                lea 20(sp),sp
   13b1e:	                rts

00013b20 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   13b20:	       movea.l 4(sp),a0
   13b24:	       move.l 4(a0),d0
   13b28:	       cmp.l 8(sp),d0
   13b2c:	   /-- bhi.s 13b32 <fastArrayGetByIndex+0x12>
   13b2e:	   |   moveq #0,d0
   13b30:	/--|-- bra.s 13b40 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   13b32:	|  \-> movea.l 4(sp),a0
   13b36:	|      move.l (a0),d1
   13b38:	|      move.l 8(sp),d0
   13b3c:	|      lsl.l #3,d0
   13b3e:	|      add.l d1,d0
}
   13b40:	\----> rts

00013b42 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   13b42:	                lea -32(sp),sp
   13b46:	                move.l a6,-(sp)
   13b48:	                move.l a2,-(sp)
    struct persona *p = NULL;
   13b4a:	                clr.l 36(sp)

    switch (thisVar->varType) {
   13b4e:	                movea.l 44(sp),a0
   13b52:	                move.l (a0),d0
   13b54:	                moveq #8,d1
   13b56:	                cmp.l d0,d1
   13b58:	            /-- beq.s 13b66 <getCostumeFromVar+0x24>
   13b5a:	            |   moveq #9,d1
   13b5c:	            |   cmp.l d0,d1
   13b5e:	   /--------|-- beq.w 13c14 <getCostumeFromVar+0xd2>
   13b62:	/--|--------|-- bra.w 13c1e <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   13b66:	|  |        \-> moveq #8,d0
   13b68:	|  |            move.l d0,28(sp)
   13b6c:	|  |            clr.l 24(sp)
   13b70:	|  |            move.l 1a7a4 <SysBase>,d0
   13b76:	|  |            movea.l d0,a6
   13b78:	|  |            move.l 28(sp),d0
   13b7c:	|  |            move.l 24(sp),d1
   13b80:	|  |            jsr -684(a6)
   13b84:	|  |            move.l d0,20(sp)
   13b88:	|  |            move.l 20(sp),d0
   13b8c:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   13b90:	|  |        /-- bne.s 13b98 <getCostumeFromVar+0x56>
   13b92:	|  |        |   moveq #0,d0
   13b94:	|  |  /-----|-- bra.w 13c48 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   13b98:	|  |  |     \-> movea.l 36(sp),a0
   13b9c:	|  |  |         moveq #1,d1
   13b9e:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   13ba2:	|  |  |         moveq #12,d0
   13ba4:	|  |  |         move.l d0,16(sp)
   13ba8:	|  |  |         clr.l 12(sp)
   13bac:	|  |  |         move.l 1a7a4 <SysBase>,d0
   13bb2:	|  |  |         movea.l d0,a6
   13bb4:	|  |  |         move.l 16(sp),d0
   13bb8:	|  |  |         move.l 12(sp),d1
   13bbc:	|  |  |         jsr -684(a6)
   13bc0:	|  |  |         move.l d0,8(sp)
   13bc4:	|  |  |         move.l 8(sp),d0
   13bc8:	|  |  |         movea.l 36(sp),a0
   13bcc:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   13bce:	|  |  |         movea.l 36(sp),a0
   13bd2:	|  |  |         move.l (a0),d0
   13bd4:	|  |  |     /-- bne.s 13bda <getCostumeFromVar+0x98>
   13bd6:	|  |  |     |   moveq #0,d0
   13bd8:	|  |  +-----|-- bra.s 13c48 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   13bda:	|  |  |     \-> clr.l 32(sp)
   13bde:	|  |  |     /-- bra.s 13c0a <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   13be0:	|  |  |  /--|-> movea.l 44(sp),a0
   13be4:	|  |  |  |  |   move.l 4(a0),d0
   13be8:	|  |  |  |  |   movea.l 36(sp),a0
   13bec:	|  |  |  |  |   movea.l (a0),a0
   13bee:	|  |  |  |  |   move.l 32(sp),d1
   13bf2:	|  |  |  |  |   add.l d1,d1
   13bf4:	|  |  |  |  |   add.l d1,d1
   13bf6:	|  |  |  |  |   lea (0,a0,d1.l),a2
   13bfa:	|  |  |  |  |   move.l d0,-(sp)
   13bfc:	|  |  |  |  |   jsr 8ca0 <copyAnim>
   13c02:	|  |  |  |  |   addq.l #4,sp
   13c04:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   13c06:	|  |  |  |  |   addq.l #1,32(sp)
   13c0a:	|  |  |  |  \-> moveq #2,d1
   13c0c:	|  |  |  |      cmp.l 32(sp),d1
   13c10:	|  |  |  \----- bge.s 13be0 <getCostumeFromVar+0x9e>
            }
            break;
   13c12:	|  |  |     /-- bra.s 13c44 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   13c14:	|  \--|-----|-> movea.l 44(sp),a0
   13c18:	|     |     |   move.l 4(a0),d0
   13c1c:	|     +-----|-- bra.s 13c48 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   13c1e:	\-----|-----|-> movea.l 44(sp),a0
   13c22:	      |     |   move.l (a0),d0
   13c24:	      |     |   add.l d0,d0
   13c26:	      |     |   movea.l d0,a1
   13c28:	      |     |   adda.l d0,a1
   13c2a:	      |     |   lea 1a680 <typeName>,a0
   13c30:	      |     |   move.l (0,a1,a0.l),d0
   13c34:	      |     |   move.l d0,-(sp)
   13c36:	      |     |   pea 194b7 <graphics.c.1c13408a+0x3f3>
   13c3c:	      |     |   jsr 16894 <KPrintF>
   13c42:	      |     |   addq.l #8,sp
    }

    return p;
   13c44:	      |     \-> move.l 36(sp),d0
}
   13c48:	      \-------> movea.l (sp)+,a2
   13c4a:	                movea.l (sp)+,a6
   13c4c:	                lea 32(sp),sp
   13c50:	                rts

00013c52 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   13c52:	                lea -96(sp),sp
   13c56:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   13c5a:	                move.l 116(sp),-(sp)
   13c5e:	                pea 194ef <newfatal.c.307beca7+0x2b>
   13c64:	                jsr 133c2 <joinStrings>
   13c6a:	                addq.l #8,sp
   13c6c:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   13c70:	            /-- bne.s 13c78 <getSavedGamesStack+0x26>
   13c72:	            |   clr.w d0
   13c74:	/-----------|-- bra.w 13e8c <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   13c78:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   13c7c:	|               move.l #103665,98(sp)
   13c84:	|               moveq #-2,d0
   13c86:	|               move.l d0,94(sp)
   13c8a:	|               move.l 1a7ac <DOSBase>,d0
   13c90:	|               movea.l d0,a6
   13c92:	|               move.l 98(sp),d1
   13c96:	|               move.l 94(sp),d2
   13c9a:	|               jsr -84(a6)
   13c9e:	|               move.l d0,90(sp)
   13ca2:	|               move.l 90(sp),d0
   13ca6:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   13caa:	|           /-- bne.s 13cb2 <getSavedGamesStack+0x60>
   13cac:	|           |   clr.w d0
   13cae:	+-----------|-- bra.w 13e8c <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   13cb2:	|           \-> move.l #260,82(sp)
   13cba:	|               move.l #65536,78(sp)
   13cc2:	|               move.l 1a7a4 <SysBase>,d0
   13cc8:	|               movea.l d0,a6
   13cca:	|               move.l 82(sp),d0
   13cce:	|               move.l 78(sp),d1
   13cd2:	|               jsr -684(a6)
   13cd6:	|               move.l d0,74(sp)
   13cda:	|               move.l 74(sp),d0
   13cde:	|               move.l d0,70(sp)
	if (!fib) {
   13ce2:	|           /-- bne.s 13d00 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   13ce4:	|           |   move.l 86(sp),22(sp)
   13cea:	|           |   move.l 1a7ac <DOSBase>,d0
   13cf0:	|           |   movea.l d0,a6
   13cf2:	|           |   move.l 22(sp),d1
   13cf6:	|           |   jsr -90(a6)
		return FALSE;
   13cfa:	|           |   clr.w d0
   13cfc:	+-----------|-- bra.w 13e8c <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   13d00:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   13d04:	|               move.l 86(sp),66(sp)
   13d0a:	|               move.l 70(sp),62(sp)
   13d10:	|               move.l 1a7ac <DOSBase>,d0
   13d16:	|               movea.l d0,a6
   13d18:	|               move.l 66(sp),d1
   13d1c:	|               move.l 62(sp),d2
   13d20:	|               jsr -102(a6)
   13d24:	|               move.l d0,58(sp)
   13d28:	|               move.l 58(sp),d0
   13d2c:	|  /----------- beq.w 13e40 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   13d30:	|  |        /-- bra.w 13e0c <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   13d34:	|  |  /-----|-> move.l 70(sp),d2
   13d38:	|  |  |     |   addq.l #8,d2
   13d3a:	|  |  |     |   move.l 70(sp),d0
   13d3e:	|  |  |     |   addq.l #8,d0
   13d40:	|  |  |     |   move.l d0,-(sp)
   13d42:	|  |  |     |   jsr 13382 <strlen>
   13d48:	|  |  |     |   addq.l #4,sp
   13d4a:	|  |  |     |   move.l d0,d3
   13d4c:	|  |  |     |   move.l 116(sp),-(sp)
   13d50:	|  |  |     |   jsr 13382 <strlen>
   13d56:	|  |  |     |   addq.l #4,sp
   13d58:	|  |  |     |   move.l d3,d1
   13d5a:	|  |  |     |   sub.l d0,d1
   13d5c:	|  |  |     |   move.l d2,d0
   13d5e:	|  |  |     |   add.l d1,d0
   13d60:	|  |  |     |   move.l 116(sp),-(sp)
   13d64:	|  |  |     |   move.l d0,-(sp)
   13d66:	|  |  |     |   jsr 13342 <strcmp>
   13d6c:	|  |  |     |   addq.l #8,sp
   13d6e:	|  |  |     |   tst.l d0
   13d70:	|  |  |     +-- bne.w 13e0c <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   13d74:	|  |  |     |   move.l 70(sp),d0
   13d78:	|  |  |     |   addq.l #8,d0
   13d7a:	|  |  |     |   move.l d0,-(sp)
   13d7c:	|  |  |     |   jsr 13382 <strlen>
   13d82:	|  |  |     |   addq.l #4,sp
   13d84:	|  |  |     |   move.l d0,d2
   13d86:	|  |  |     |   move.l 116(sp),-(sp)
   13d8a:	|  |  |     |   jsr 13382 <strlen>
   13d90:	|  |  |     |   addq.l #4,sp
   13d92:	|  |  |     |   move.l d0,d1
   13d94:	|  |  |     |   move.l d2,d0
   13d96:	|  |  |     |   sub.l d1,d0
   13d98:	|  |  |     |   movea.l 70(sp),a0
   13d9c:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   13da0:	|  |  |     |   move.l 70(sp),d0
   13da4:	|  |  |     |   addq.l #8,d0
   13da6:	|  |  |     |   move.l d0,-(sp)
   13da8:	|  |  |     |   jsr 118 <decodeFilename>
   13dae:	|  |  |     |   addq.l #4,sp
   13db0:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   13db4:	|  |  |     |   move.l 42(sp),-(sp)
   13db8:	|  |  |     |   lea 18(sp),a0
   13dbc:	|  |  |     |   move.l a0,-(sp)
   13dbe:	|  |  |     |   jsr 140b8 <makeTextVar>
   13dc4:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   13dc6:	|  |  |     |   move.l 42(sp),38(sp)
   13dcc:	|  |  |     |   move.l 1a7a4 <SysBase>,d0
   13dd2:	|  |  |     |   movea.l d0,a6
   13dd4:	|  |  |     |   movea.l 38(sp),a1
   13dd8:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   13ddc:	|  |  |     |   move.l 112(sp),d0
   13de0:	|  |  |     |   move.l d0,-(sp)
   13de2:	|  |  |     |   lea 18(sp),a0
   13de6:	|  |  |     |   move.l a0,-(sp)
   13de8:	|  |  |     |   jsr 136d2 <addVarToStack>
   13dee:	|  |  |     |   addq.l #8,sp
   13df0:	|  |  |     |   tst.w d0
   13df2:	|  |  |  /--|-- beq.s 13e44 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   13df4:	|  |  |  |  |   movea.l 112(sp),a0
   13df8:	|  |  |  |  |   move.l 4(a0),d0
   13dfc:	|  |  |  |  +-- bne.s 13e0c <getSavedGamesStack+0x1ba>
   13dfe:	|  |  |  |  |   movea.l 112(sp),a0
   13e02:	|  |  |  |  |   move.l (a0),d0
   13e04:	|  |  |  |  |   movea.l 112(sp),a0
   13e08:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   13e0c:	|  |  |  |  \-> move.l 86(sp),54(sp)
   13e12:	|  |  |  |      move.l 70(sp),50(sp)
   13e18:	|  |  |  |      move.l 1a7ac <DOSBase>,d0
   13e1e:	|  |  |  |      movea.l d0,a6
   13e20:	|  |  |  |      move.l 54(sp),d1
   13e24:	|  |  |  |      move.l 50(sp),d2
   13e28:	|  |  |  |      jsr -108(a6)
   13e2c:	|  |  |  |      move.l d0,46(sp)
   13e30:	|  |  |  |      move.l 46(sp),d0
   13e34:	|  |  \--|----- bne.w 13d34 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   13e38:	|  |     |      move.w #1,106(sp)
   13e3e:	|  |     |  /-- bra.s 13e46 <getSavedGamesStack+0x1f4>
	}

cleanup:
   13e40:	|  \-----|--|-> nop
   13e42:	|        |  +-- bra.s 13e46 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   13e44:	|        \--|-> nop
	FreeVec(fib);
   13e46:	|           \-> move.l 70(sp),34(sp)
   13e4c:	|               move.l 1a7a4 <SysBase>,d0
   13e52:	|               movea.l d0,a6
   13e54:	|               movea.l 34(sp),a1
   13e58:	|               jsr -690(a6)
	UnLock(dirLock);
   13e5c:	|               move.l 86(sp),30(sp)
   13e62:	|               move.l 1a7ac <DOSBase>,d0
   13e68:	|               movea.l d0,a6
   13e6a:	|               move.l 30(sp),d1
   13e6e:	|               jsr -90(a6)
	FreeVec(pattern);
   13e72:	|               move.l 102(sp),26(sp)
   13e78:	|               move.l 1a7a4 <SysBase>,d0
   13e7e:	|               movea.l d0,a6
   13e80:	|               movea.l 26(sp),a1
   13e84:	|               jsr -690(a6)
	return result;
   13e88:	|               move.w 106(sp),d0
}
   13e8c:	\-------------> movem.l (sp)+,d2-d3/a6
   13e90:	                lea 96(sp),sp
   13e94:	                rts

00013e96 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   13e96:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   13e98:	       movea.l 20(sp),a0
   13e9c:	       move.l (a0),d0
   13e9e:	       cmp.l 16(sp),d0
   13ea2:	/----- beq.s 13f06 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   13ea4:	|      move.l 16(sp),d0
   13ea8:	|      add.l d0,d0
   13eaa:	|      movea.l d0,a1
   13eac:	|      adda.l d0,a1
   13eae:	|      lea 1a680 <typeName>,a0
   13eb4:	|      move.l (0,a1,a0.l),d0
   13eb8:	|      move.l d0,-(sp)
   13eba:	|      pea 194f3 <newfatal.c.307beca7+0x2f>
   13ec0:	|      jsr 133c2 <joinStrings>
   13ec6:	|      addq.l #8,sp
   13ec8:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   13ecc:	|      movea.l 20(sp),a0
   13ed0:	|      move.l (a0),d0
   13ed2:	|      add.l d0,d0
   13ed4:	|      movea.l d0,a1
   13ed6:	|      adda.l d0,a1
   13ed8:	|      lea 1a680 <typeName>,a0
   13ede:	|      move.l (0,a1,a0.l),d0
   13ee2:	|      move.l d0,-(sp)
   13ee4:	|      pea 19535 <newfatal.c.307beca7+0x71>
   13eea:	|      jsr 133c2 <joinStrings>
   13ef0:	|      addq.l #8,sp
   13ef2:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   13ef4:	|      move.l (sp),-(sp)
   13ef6:	|      move.l 8(sp),-(sp)
   13efa:	|      jsr 16894 <KPrintF>
   13f00:	|      addq.l #8,sp

		return FALSE;
   13f02:	|      clr.w d0
   13f04:	|  /-- bra.s 13f16 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   13f06:	\--|-> movea.l 20(sp),a0
   13f0a:	   |   move.l 4(a0),d0
   13f0e:	   |   movea.l 12(sp),a0
   13f12:	   |   move.l d0,(a0)
	return TRUE;
   13f14:	   |   moveq #1,d0
}
   13f16:	   \-> addq.l #8,sp
   13f18:	       rts

00013f1a <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   13f1a:	move.l 8(sp),-(sp)
   13f1e:	jsr 655a <getNumberedString>
   13f24:	addq.l #4,sp
   13f26:	move.l d0,-(sp)
   13f28:	move.l 8(sp),-(sp)
   13f2c:	jsr 140b8 <makeTextVar>
   13f32:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   13f34:	movea.l 4(sp),a0
   13f38:	move.l 4(a0),d0
   13f3c:	sne d0
   13f3e:	neg.b d0
   13f40:	move.b d0,d0
   13f42:	andi.w #255,d0
}
   13f46:	rts

00013f48 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   13f48:	          subq.l #8,sp
    int size = stackSize(stacky);
   13f4a:	          move.l 16(sp),-(sp)
   13f4e:	          jsr 147f6 <stackSize>
   13f54:	          addq.l #4,sp
   13f56:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   13f5a:	          move.l 4(sp),-(sp)
   13f5e:	          move.l 16(sp),-(sp)
   13f62:	          jsr 13fb2 <makeFastArraySize>
   13f68:	          addq.l #8,sp
   13f6a:	          tst.w d0
   13f6c:	      /-- bne.s 13f72 <makeFastArrayFromStack+0x2a>
   13f6e:	      |   clr.w d0
   13f70:	/-----|-- bra.s 13fae <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   13f72:	|     \-> movea.l 16(sp),a0
   13f76:	|         move.l (a0),(sp)
    size = 0;
   13f78:	|         clr.l 4(sp)
    while (allV) {
   13f7c:	|     /-- bra.s 13fa8 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   13f7e:	|  /--|-> movea.l 12(sp),a0
   13f82:	|  |  |   movea.l 4(a0),a0
   13f86:	|  |  |   move.l (a0),d1
   13f88:	|  |  |   move.l 4(sp),d0
   13f8c:	|  |  |   lsl.l #3,d0
   13f8e:	|  |  |   add.l d0,d1
   13f90:	|  |  |   move.l (sp),d0
   13f92:	|  |  |   move.l d1,-(sp)
   13f94:	|  |  |   move.l d0,-(sp)
   13f96:	|  |  |   jsr 14234 <copyMain>
   13f9c:	|  |  |   addq.l #8,sp
        size++;
   13f9e:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   13fa2:	|  |  |   movea.l (sp),a0
   13fa4:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   13fa8:	|  |  \-> tst.l (sp)
   13faa:	|  \----- bne.s 13f7e <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   13fac:	|         moveq #1,d0
}
   13fae:	\-------> addq.l #8,sp
   13fb0:	          rts

00013fb2 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   13fb2:	          lea -28(sp),sp
   13fb6:	          move.l a6,-(sp)
    if (size < 0) {
   13fb8:	          tst.l 40(sp)
   13fbc:	      /-- bge.s 13fd2 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   13fbe:	      |   pea 1957a <newfatal.c.307beca7+0xb6>
   13fc4:	      |   jsr 16894 <KPrintF>
   13fca:	      |   addq.l #4,sp
		return FALSE;
   13fcc:	      |   clr.w d0
   13fce:	/-----|-- bra.w 140b0 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   13fd2:	|     \-> move.l 36(sp),-(sp)
   13fd6:	|         jsr 140e4 <unlinkVar>
   13fdc:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   13fde:	|         movea.l 36(sp),a0
   13fe2:	|         moveq #10,d0
   13fe4:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   13fe6:	|         moveq #12,d0
   13fe8:	|         move.l d0,24(sp)
   13fec:	|         clr.l 20(sp)
   13ff0:	|         move.l 1a7a4 <SysBase>,d0
   13ff6:	|         movea.l d0,a6
   13ff8:	|         move.l 24(sp),d0
   13ffc:	|         move.l 20(sp),d1
   14000:	|         jsr -684(a6)
   14004:	|         move.l d0,16(sp)
   14008:	|         move.l 16(sp),d0
   1400c:	|         movea.l 36(sp),a0
   14010:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14014:	|         movea.l 36(sp),a0
   14018:	|         move.l 4(a0),d0
   1401c:	|     /-- bne.s 14024 <makeFastArraySize+0x72>
   1401e:	|     |   clr.w d0
   14020:	+-----|-- bra.w 140b0 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14024:	|     \-> move.l 40(sp),d0
   14028:	|         lsl.l #3,d0
   1402a:	|         move.l d0,12(sp)
   1402e:	|         clr.l 8(sp)
   14032:	|         move.l 1a7a4 <SysBase>,d0
   14038:	|         movea.l d0,a6
   1403a:	|         move.l 12(sp),d0
   1403e:	|         move.l 8(sp),d1
   14042:	|         jsr -684(a6)
   14046:	|         move.l d0,4(sp)
   1404a:	|         move.l 4(sp),d0
   1404e:	|         movea.l 36(sp),a0
   14052:	|         movea.l 4(a0),a0
   14056:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14058:	|         movea.l 36(sp),a0
   1405c:	|         movea.l 4(a0),a0
   14060:	|         move.l (a0),d0
   14062:	|     /-- bne.s 14068 <makeFastArraySize+0xb6>
   14064:	|     |   clr.w d0
   14066:	+-----|-- bra.s 140b0 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14068:	|     \-> clr.l 28(sp)
   1406c:	|     /-- bra.s 14088 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   1406e:	|  /--|-> movea.l 36(sp),a0
   14072:	|  |  |   movea.l 4(a0),a0
   14076:	|  |  |   move.l (a0),d1
   14078:	|  |  |   move.l 28(sp),d0
   1407c:	|  |  |   lsl.l #3,d0
   1407e:	|  |  |   movea.l d1,a0
   14080:	|  |  |   adda.l d0,a0
   14082:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   14084:	|  |  |   addq.l #1,28(sp)
   14088:	|  |  \-> move.l 28(sp),d0
   1408c:	|  |      cmp.l 40(sp),d0
   14090:	|  \----- blt.s 1406e <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   14092:	|         movea.l 36(sp),a0
   14096:	|         movea.l 4(a0),a0
   1409a:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   140a0:	|         movea.l 36(sp),a0
   140a4:	|         movea.l 4(a0),a0
   140a8:	|         moveq #1,d0
   140aa:	|         move.l d0,8(a0)
    return TRUE;
   140ae:	|         moveq #1,d0
}
   140b0:	\-------> movea.l (sp)+,a6
   140b2:	          lea 28(sp),sp
   140b6:	          rts

000140b8 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   140b8:	move.l 4(sp),-(sp)
   140bc:	jsr 140e4 <unlinkVar>
   140c2:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   140c4:	movea.l 4(sp),a0
   140c8:	moveq #3,d0
   140ca:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   140cc:	move.l 8(sp),-(sp)
   140d0:	jsr b8 <copyString>
   140d6:	addq.l #4,sp
   140d8:	movea.l 4(sp),a0
   140dc:	move.l d0,4(a0)
}
   140e0:	nop
   140e2:	rts

000140e4 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   140e4:	                      lea -16(sp),sp
   140e8:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   140ea:	                      movea.l 24(sp),a0
   140ee:	                      move.l (a0),d0
   140f0:	                      moveq #10,d1
   140f2:	                      cmp.l d0,d1
   140f4:	            /-------- beq.w 141ac <unlinkVar+0xc8>
   140f8:	            |         moveq #10,d1
   140fa:	            |         cmp.l d0,d1
   140fc:	/-----------|-------- bcs.w 14220 <unlinkVar+0x13c>
   14100:	|           |         moveq #8,d1
   14102:	|           |         cmp.l d0,d1
   14104:	|  /--------|-------- beq.w 1420c <unlinkVar+0x128>
   14108:	|  |        |         moveq #8,d1
   1410a:	|  |        |         cmp.l d0,d1
   1410c:	+--|--------|-------- bcs.w 14220 <unlinkVar+0x13c>
   14110:	|  |        |         moveq #3,d1
   14112:	|  |        |         cmp.l d0,d1
   14114:	|  |        |     /-- beq.s 14120 <unlinkVar+0x3c>
   14116:	|  |        |     |   moveq #6,d1
   14118:	|  |        |     |   cmp.l d0,d1
   1411a:	|  |        |  /--|-- beq.s 14146 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   1411c:	+--|--------|--|--|-- bra.w 14220 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14120:	|  |        |  |  \-> movea.l 24(sp),a0
   14124:	|  |        |  |      move.l 4(a0),4(sp)
   1412a:	|  |        |  |      move.l 1a7a4 <SysBase>,d0
   14130:	|  |        |  |      movea.l d0,a6
   14132:	|  |        |  |      movea.l 4(sp),a1
   14136:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   1413a:	|  |        |  |      movea.l 24(sp),a0
   1413e:	|  |        |  |      clr.l 4(a0)
		break;
   14142:	|  |  /-----|--|----- bra.w 1422a <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14146:	|  |  |     |  \----> movea.l 24(sp),a0
   1414a:	|  |  |     |         movea.l 4(a0),a0
   1414e:	|  |  |     |         move.l 8(a0),d0
   14152:	|  |  |     |         subq.l #1,d0
   14154:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14158:	|  |  |     |         movea.l 24(sp),a0
   1415c:	|  |  |     |         movea.l 4(a0),a0
   14160:	|  |  |     |         move.l 8(a0),d0
   14164:	|  |  |  /--|-------- bgt.w 14224 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14168:	|  |  |  |  |     /-- bra.s 1417c <unlinkVar+0x98>
   1416a:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   1416e:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14172:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14174:	|  |  |  |  |  |  |   jsr 1481a <trimStack>
   1417a:	|  |  |  |  |  |  |   addq.l #4,sp
   1417c:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   14180:	|  |  |  |  |  |      movea.l 4(a0),a0
   14184:	|  |  |  |  |  |      move.l (a0),d0
   14186:	|  |  |  |  |  \----- bne.s 1416a <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14188:	|  |  |  |  |         movea.l 24(sp),a0
   1418c:	|  |  |  |  |         move.l 4(a0),8(sp)
   14192:	|  |  |  |  |         move.l 1a7a4 <SysBase>,d0
   14198:	|  |  |  |  |         movea.l d0,a6
   1419a:	|  |  |  |  |         movea.l 8(sp),a1
   1419e:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   141a2:	|  |  |  |  |         movea.l 24(sp),a0
   141a6:	|  |  |  |  |         clr.l 4(a0)
		break;
   141aa:	|  |  |  +--|-------- bra.s 14224 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   141ac:	|  |  |  |  \-------> movea.l 24(sp),a0
   141b0:	|  |  |  |            movea.l 4(a0),a0
   141b4:	|  |  |  |            move.l 8(a0),d0
   141b8:	|  |  |  |            subq.l #1,d0
   141ba:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   141be:	|  |  |  |            movea.l 24(sp),a0
   141c2:	|  |  |  |            movea.l 4(a0),a0
   141c6:	|  |  |  |            move.l 8(a0),d0
   141ca:	|  |  |  |        /-- bgt.s 14228 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   141cc:	|  |  |  |        |   movea.l 24(sp),a0
   141d0:	|  |  |  |        |   movea.l 4(a0),a0
   141d4:	|  |  |  |        |   move.l (a0),16(sp)
   141d8:	|  |  |  |        |   move.l 1a7a4 <SysBase>,d0
   141de:	|  |  |  |        |   movea.l d0,a6
   141e0:	|  |  |  |        |   movea.l 16(sp),a1
   141e4:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   141e8:	|  |  |  |        |   movea.l 24(sp),a0
   141ec:	|  |  |  |        |   move.l 4(a0),12(sp)
   141f2:	|  |  |  |        |   move.l 1a7a4 <SysBase>,d0
   141f8:	|  |  |  |        |   movea.l d0,a6
   141fa:	|  |  |  |        |   movea.l 12(sp),a1
   141fe:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14202:	|  |  |  |        |   movea.l 24(sp),a0
   14206:	|  |  |  |        |   clr.l 4(a0)
		break;
   1420a:	|  |  |  |        +-- bra.s 14228 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   1420c:	|  \--|--|--------|-> movea.l 24(sp),a0
   14210:	|     |  |        |   move.l 4(a0),d0
   14214:	|     |  |        |   move.l d0,-(sp)
   14216:	|     |  |        |   jsr 906c <deleteAnim>
   1421c:	|     |  |        |   addq.l #4,sp
		break;
   1421e:	|     +--|--------|-- bra.s 1422a <unlinkVar+0x146>
		break;
   14220:	\-----|--|--------|-> nop
   14222:	      +--|--------|-- bra.s 1422a <unlinkVar+0x146>
		break;
   14224:	      |  \--------|-> nop
   14226:	      +-----------|-- bra.s 1422a <unlinkVar+0x146>
		break;
   14228:	      |           \-> nop
	}
}
   1422a:	      \-------------> nop
   1422c:	                      movea.l (sp)+,a6
   1422e:	                      lea 16(sp),sp
   14232:	                      rts

00014234 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14234:	       movea.l 4(sp),a0
   14238:	       move.l (a0),d0
   1423a:	       movea.l 8(sp),a0
   1423e:	       move.l d0,(a0)
	switch (to->varType) {
   14240:	       movea.l 8(sp),a0
   14244:	       move.l (a0),d0
   14246:	       moveq #10,d1
   14248:	       cmp.l d0,d1
   1424a:	/----- bcs.w 1433c <copyMain+0x108>
   1424e:	|      add.l d0,d0
   14250:	|      movea.l d0,a0
   14252:	|      adda.l #82526,a0
   14258:	|      move.w (a0),d0
   1425a:	|      jmp (1425e <copyMain+0x2a>,pc,d0.w)
   1425e:	|      .short 0x00da
   14260:	|      ori.b #22,(a6)
   14264:	|      ori.w #22,(a4)
   14268:	|      ori.b #-126,(a6)
   1426c:	|      ori.b #-68,(a6)
   14270:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14278:	|      move.l 4(a0),d0
   1427c:	|      movea.l 8(sp),a0
   14280:	|      move.l d0,4(a0)
		return TRUE;
   14284:	|      moveq #1,d0
   14286:	|  /-- bra.w 1434e <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   1428a:	|  |   movea.l 4(sp),a0
   1428e:	|  |   move.l 4(a0),d0
   14292:	|  |   movea.l 8(sp),a0
   14296:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   1429a:	|  |   movea.l 8(sp),a0
   1429e:	|  |   movea.l 4(a0),a0
   142a2:	|  |   move.l 8(a0),d0
   142a6:	|  |   addq.l #1,d0
   142a8:	|  |   move.l d0,8(a0)
		return TRUE;
   142ac:	|  |   moveq #1,d0
   142ae:	|  +-- bra.w 1434e <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   142b2:	|  |   movea.l 4(sp),a0
   142b6:	|  |   move.l 4(a0),d0
   142ba:	|  |   move.l d0,-(sp)
   142bc:	|  |   jsr b8 <copyString>
   142c2:	|  |   addq.l #4,sp
   142c4:	|  |   movea.l 8(sp),a0
   142c8:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   142cc:	|  |   movea.l 8(sp),a0
   142d0:	|  |   move.l 4(a0),d0
   142d4:	|  |   sne d0
   142d6:	|  |   neg.b d0
   142d8:	|  |   move.b d0,d0
   142da:	|  |   andi.w #255,d0
   142de:	|  +-- bra.s 1434e <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   142e0:	|  |   movea.l 4(sp),a0
   142e4:	|  |   move.l 4(a0),d0
   142e8:	|  |   movea.l 8(sp),a0
   142ec:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   142f0:	|  |   movea.l 8(sp),a0
   142f4:	|  |   movea.l 4(a0),a0
   142f8:	|  |   move.l 8(a0),d0
   142fc:	|  |   addq.l #1,d0
   142fe:	|  |   move.l d0,8(a0)
		return TRUE;
   14302:	|  |   moveq #1,d0
   14304:	|  +-- bra.s 1434e <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14306:	|  |   movea.l 4(sp),a0
   1430a:	|  |   move.l 4(a0),d0
   1430e:	|  |   movea.l 8(sp),a0
   14312:	|  |   move.l d0,4(a0)
		return TRUE;
   14316:	|  |   moveq #1,d0
   14318:	|  +-- bra.s 1434e <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   1431a:	|  |   movea.l 4(sp),a0
   1431e:	|  |   move.l 4(a0),d0
   14322:	|  |   move.l d0,-(sp)
   14324:	|  |   jsr 8ca0 <copyAnim>
   1432a:	|  |   addq.l #4,sp
   1432c:	|  |   movea.l 8(sp),a0
   14330:	|  |   move.l d0,4(a0)
		return TRUE;
   14334:	|  |   moveq #1,d0
   14336:	|  +-- bra.s 1434e <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14338:	|  |   moveq #1,d0
   1433a:	|  +-- bra.s 1434e <copyMain+0x11a>

		default:
		break;
   1433c:	\--|-> nop
	}
	KPrintF("Unknown value type");
   1433e:	   |   pea 195cb <newfatal.c.307beca7+0x107>
   14344:	   |   jsr 16894 <KPrintF>
   1434a:	   |   addq.l #4,sp
	return FALSE;
   1434c:	   |   clr.w d0
}
   1434e:	   \-> rts

00014350 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14350:	move.l 8(sp),-(sp)
   14354:	jsr 140e4 <unlinkVar>
   1435a:	addq.l #4,sp
	return copyMain(from, to);
   1435c:	move.l 8(sp),-(sp)
   14360:	move.l 8(sp),-(sp)
   14364:	jsr 14234 <copyMain>
   1436a:	addq.l #8,sp
}
   1436c:	rts

0001436e <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   1436e:	       movea.l 4(sp),a0
   14372:	       move.l (a0),d0
   14374:	       moveq #8,d1
   14376:	       cmp.l d0,d1
   14378:	   /-- bne.s 1438e <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   1437a:	   |   movea.l 4(sp),a0
   1437e:	   |   move.l 4(a0),d0
   14382:	   |   move.l d0,-(sp)
   14384:	   |   jsr 8ca0 <copyAnim>
   1438a:	   |   addq.l #4,sp
   1438c:	/--|-- bra.s 143d4 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   1438e:	|  \-> movea.l 4(sp),a0
   14392:	|      move.l (a0),d0
   14394:	|      moveq #1,d1
   14396:	|      cmp.l d0,d1
   14398:	|  /-- bne.s 143ac <getAnimationFromVar+0x3e>
   1439a:	|  |   movea.l 4(sp),a0
   1439e:	|  |   move.l 4(a0),d0
   143a2:	|  +-- bne.s 143ac <getAnimationFromVar+0x3e>
		return makeNullAnim();
   143a4:	|  |   jsr a470 <makeNullAnim>
   143aa:	+--|-- bra.s 143d4 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   143ac:	|  \-> movea.l 4(sp),a0
   143b0:	|      move.l (a0),d0
   143b2:	|      add.l d0,d0
   143b4:	|      movea.l d0,a1
   143b6:	|      adda.l d0,a1
   143b8:	|      lea 1a680 <typeName>,a0
   143be:	|      move.l (0,a1,a0.l),d0
   143c2:	|      move.l d0,-(sp)
   143c4:	|      pea 194b7 <graphics.c.1c13408a+0x3f3>
   143ca:	|      jsr 16894 <KPrintF>
   143d0:	|      addq.l #8,sp
	return NULL;
   143d2:	|      moveq #0,d0
}
   143d4:	\----> rts

000143d6 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   143d6:	       movea.l 4(sp),a0
   143da:	       move.l (a0),d0
   143dc:	       moveq #10,d1
   143de:	       cmp.l d0,d1
   143e0:	/----- bcs.w 14466 <getBoolean+0x90>
   143e4:	|      add.l d0,d0
   143e6:	|      movea.l d0,a0
   143e8:	|      adda.l #82932,a0
   143ee:	|      move.w (a0),d0
   143f0:	|      jmp (143f4 <getBoolean+0x1e>,pc,d0.w)
   143f4:	|      ori.b #26,(a6)
   143f8:	|      ori.w #68,(114,a2,d0.w)
   143fe:	|      ori.w #46,(114,a2,d0.w)
   14404:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   1440a:	|      clr.w d0
   1440c:	|  /-- bra.s 1446a <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   1440e:	|  |   movea.l 4(sp),a0
   14412:	|  |   move.l 4(a0),d0
   14416:	|  |   sne d0
   14418:	|  |   neg.b d0
   1441a:	|  |   move.b d0,d0
   1441c:	|  |   andi.w #255,d0
   14420:	|  +-- bra.s 1446a <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14422:	|  |   movea.l 4(sp),a0
   14426:	|  |   movea.l 4(a0),a0
   1442a:	|  |   move.l (a0),d0
   1442c:	|  |   sne d0
   1442e:	|  |   neg.b d0
   14430:	|  |   move.b d0,d0
   14432:	|  |   andi.w #255,d0
   14436:	|  +-- bra.s 1446a <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14438:	|  |   movea.l 4(sp),a0
   1443c:	|  |   movea.l 4(a0),a0
   14440:	|  |   move.b (a0),d0
   14442:	|  |   sne d0
   14444:	|  |   neg.b d0
   14446:	|  |   move.b d0,d0
   14448:	|  |   andi.w #255,d0
   1444c:	|  +-- bra.s 1446a <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   1444e:	|  |   movea.l 4(sp),a0
   14452:	|  |   movea.l 4(a0),a0
   14456:	|  |   move.l 4(a0),d0
   1445a:	|  |   sne d0
   1445c:	|  |   neg.b d0
   1445e:	|  |   move.b d0,d0
   14460:	|  |   andi.w #255,d0
   14464:	|  +-- bra.s 1446a <getBoolean+0x94>

		default:
		break;
   14466:	\--|-> nop
	}
	return TRUE;
   14468:	   |   moveq #1,d0
}
   1446a:	   \-> rts

0001446c <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   1446c:	      /----------> lea -76(sp),sp
   14470:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14472:	      |            movea.l 84(sp),a0
   14476:	      |            move.l (a0),d0
   14478:	      |            moveq #10,d1
   1447a:	      |            cmp.l d0,d1
   1447c:	/-----|----------- bcs.w 1471a <getTextFromAnyVar+0x2ae>
   14480:	|     |            add.l d0,d0
   14482:	|     |            movea.l d0,a0
   14484:	|     |            adda.l #83088,a0
   1448a:	|     |            move.w (a0),d0
   1448c:	|     |            jmp (14490 <getTextFromAnyVar+0x24>,pc,d0.w)
   14490:	|     |            .short 0x028a
   14492:	|     |            bset d0,(a0)+
   14494:	|     |            .short 0x028a
   14496:	|     |            ori.b #-118,(a6)
   1449a:	|     |            andi.b #8,ccr
   1449e:	|     |            andi.w #650,-(a0)
   144a2:	|     |            .short 0x028a
   144a4:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   144aa:	|     |            move.l 4(a0),d0
   144ae:	|     |            move.l d0,-(sp)
   144b0:	|     |            jsr b8 <copyString>
   144b6:	|     |            addq.l #4,sp
   144b8:	|  /--|----------- bra.w 1473c <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   144bc:	|  |  |            pea 195de <newfatal.c.307beca7+0x11a>
   144c2:	|  |  |            jsr b8 <copyString>
   144c8:	|  |  |            addq.l #4,sp
   144ca:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   144ce:	|  |  |            clr.l 72(sp)
   144d2:	|  |  |     /----- bra.w 1457c <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   144d6:	|  |  |  /--|----> pea 195e4 <newfatal.c.307beca7+0x120>
   144dc:	|  |  |  |  |      move.l 80(sp),-(sp)
   144e0:	|  |  |  |  |      jsr 133c2 <joinStrings>
   144e6:	|  |  |  |  |      addq.l #8,sp
   144e8:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   144ec:	|  |  |  |  |  /-- bne.s 144f4 <getTextFromAnyVar+0x88>
   144ee:	|  |  |  |  |  |   moveq #0,d0
   144f0:	|  +--|--|--|--|-- bra.w 1473c <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   144f4:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   144fa:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14500:	|  |  |  |  |      movea.l d0,a6
   14502:	|  |  |  |  |      movea.l 56(sp),a1
   14506:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   1450a:	|  |  |  |  |      movea.l 84(sp),a0
   1450e:	|  |  |  |  |      movea.l 4(a0),a0
   14512:	|  |  |  |  |      move.l (a0),d1
   14514:	|  |  |  |  |      move.l 72(sp),d0
   14518:	|  |  |  |  |      lsl.l #3,d0
   1451a:	|  |  |  |  |      add.l d1,d0
   1451c:	|  |  |  |  |      move.l d0,-(sp)
   1451e:	|  |  +--|--|----- jsr 1446c <getTextFromAnyVar>(pc)
   14522:	|  |  |  |  |      addq.l #4,sp
   14524:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14528:	|  |  |  |  |      move.l 52(sp),-(sp)
   1452c:	|  |  |  |  |      move.l 64(sp),-(sp)
   14530:	|  |  |  |  |      jsr 133c2 <joinStrings>
   14536:	|  |  |  |  |      addq.l #8,sp
   14538:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   1453c:	|  |  |  |  |  /-- bne.s 14544 <getTextFromAnyVar+0xd8>
   1453e:	|  |  |  |  |  |   moveq #0,d0
   14540:	|  +--|--|--|--|-- bra.w 1473c <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14544:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   1454a:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14550:	|  |  |  |  |      movea.l d0,a6
   14552:	|  |  |  |  |      movea.l 48(sp),a1
   14556:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   1455a:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   1455e:	|  |  |  |  |      move.l 60(sp),44(sp)
   14564:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   1456a:	|  |  |  |  |      movea.l d0,a6
   1456c:	|  |  |  |  |      movea.l 44(sp),a1
   14570:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14574:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14578:	|  |  |  |  |      addq.l #1,72(sp)
   1457c:	|  |  |  |  \----> movea.l 84(sp),a0
   14580:	|  |  |  |         movea.l 4(a0),a0
   14584:	|  |  |  |         move.l 4(a0),d0
   14588:	|  |  |  |         cmp.l 72(sp),d0
   1458c:	|  |  |  \-------- bgt.w 144d6 <getTextFromAnyVar+0x6a>
			}
			return builder;
   14590:	|  |  |            move.l 76(sp),d0
   14594:	|  +--|----------- bra.w 1473c <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14598:	|  |  |            pea 195e6 <newfatal.c.307beca7+0x122>
   1459e:	|  |  |            jsr b8 <copyString>
   145a4:	|  |  |            addq.l #4,sp
   145a6:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   145aa:	|  |  |            movea.l 84(sp),a0
   145ae:	|  |  |            movea.l 4(a0),a0
   145b2:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   145b6:	|  |  |     /----- bra.w 14658 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   145ba:	|  |  |  /--|----> pea 195e4 <newfatal.c.307beca7+0x120>
   145c0:	|  |  |  |  |      move.l 72(sp),-(sp)
   145c4:	|  |  |  |  |      jsr 133c2 <joinStrings>
   145ca:	|  |  |  |  |      addq.l #8,sp
   145cc:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   145d0:	|  |  |  |  |  /-- bne.s 145d8 <getTextFromAnyVar+0x16c>
   145d2:	|  |  |  |  |  |   moveq #0,d0
   145d4:	|  +--|--|--|--|-- bra.w 1473c <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   145d8:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   145de:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   145e4:	|  |  |  |  |      movea.l d0,a6
   145e6:	|  |  |  |  |      movea.l 32(sp),a1
   145ea:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   145ee:	|  |  |  |  |      move.l 64(sp),d0
   145f2:	|  |  |  |  |      move.l d0,-(sp)
   145f4:	|  |  \--|--|----- jsr 1446c <getTextFromAnyVar>(pc)
   145f8:	|  |     |  |      addq.l #4,sp
   145fa:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   145fe:	|  |     |  |      move.l 28(sp),-(sp)
   14602:	|  |     |  |      move.l 40(sp),-(sp)
   14606:	|  |     |  |      jsr 133c2 <joinStrings>
   1460c:	|  |     |  |      addq.l #8,sp
   1460e:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14612:	|  |     |  |  /-- bne.s 1461a <getTextFromAnyVar+0x1ae>
   14614:	|  |     |  |  |   moveq #0,d0
   14616:	|  +-----|--|--|-- bra.w 1473c <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1461a:	|  |     |  |  \-> move.l 28(sp),24(sp)
   14620:	|  |     |  |      move.l 1a7a4 <SysBase>,d0
   14626:	|  |     |  |      movea.l d0,a6
   14628:	|  |     |  |      movea.l 24(sp),a1
   1462c:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14630:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14634:	|  |     |  |      move.l 36(sp),20(sp)
   1463a:	|  |     |  |      move.l 1a7a4 <SysBase>,d0
   14640:	|  |     |  |      movea.l d0,a6
   14642:	|  |     |  |      movea.l 20(sp),a1
   14646:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   1464a:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   1464e:	|  |     |  |      movea.l 64(sp),a0
   14652:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14658:	|  |     |  \----> tst.l 64(sp)
   1465c:	|  |     \-------- bne.w 145ba <getTextFromAnyVar+0x14e>
			}
			return builder;
   14660:	|  |               move.l 68(sp),d0
   14664:	|  +-------------- bra.w 1473c <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14668:	|  |               moveq #10,d0
   1466a:	|  |               move.l d0,16(sp)
   1466e:	|  |               clr.l 12(sp)
   14672:	|  |               move.l 1a7a4 <SysBase>,d0
   14678:	|  |               movea.l d0,a6
   1467a:	|  |               move.l 16(sp),d0
   1467e:	|  |               move.l 12(sp),d1
   14682:	|  |               jsr -684(a6)
   14686:	|  |               move.l d0,8(sp)
   1468a:	|  |               move.l 8(sp),d0
   1468e:	|  |               move.l d0,4(sp)
			if (! buff) {
   14692:	|  |           /-- bne.s 146a8 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14694:	|  |           |   pea 195ed <newfatal.c.307beca7+0x129>
   1469a:	|  |           |   jsr 16894 <KPrintF>
   146a0:	|  |           |   addq.l #4,sp
				return NULL;
   146a2:	|  |           |   moveq #0,d0
   146a4:	|  +-----------|-- bra.w 1473c <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   146a8:	|  |           \-> movea.l 84(sp),a0
   146ac:	|  |               move.l 4(a0),d0
   146b0:	|  |               move.l d0,-(sp)
   146b2:	|  |               pea 19617 <newfatal.c.307beca7+0x153>
   146b8:	|  |               move.l 12(sp),-(sp)
   146bc:	|  |               jsr 136a0 <sprintf>
   146c2:	|  |               lea 12(sp),sp
			return buff;
   146c6:	|  |               move.l 4(sp),d0
   146ca:	|  +-------------- bra.s 1473c <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   146cc:	|  |               movea.l 84(sp),a0
   146d0:	|  |               move.l 4(a0),d0
   146d4:	|  |               move.l d0,-(sp)
   146d6:	|  |               jsr 39e0 <resourceNameFromNum>
   146dc:	|  |               addq.l #4,sp
   146de:	|  |               move.l d0,-(sp)
   146e0:	|  |               pea 17fd9 <PutChar+0xc71>
   146e6:	|  |               jsr 133c2 <joinStrings>
   146ec:	|  |               addq.l #8,sp
   146ee:	|  +-------------- bra.s 1473c <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   146f0:	|  |               movea.l 84(sp),a0
   146f4:	|  |               move.l 4(a0),d0
   146f8:	|  |               move.l d0,-(sp)
   146fa:	|  |               jsr cc00 <findObjectType>
   14700:	|  |               addq.l #4,sp
   14702:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   14706:	+--|-------------- beq.s 1471a <getTextFromAnyVar+0x2ae>
   14708:	|  |               movea.l 40(sp),a0
   1470c:	|  |               move.l (a0),d0
   1470e:	|  |               move.l d0,-(sp)
   14710:	|  |               jsr b8 <copyString>
   14716:	|  |               addq.l #4,sp
   14718:	|  +-------------- bra.s 1473c <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   1471a:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   1471c:	   |               movea.l 84(sp),a0
   14720:	   |               move.l (a0),d0
   14722:	   |               add.l d0,d0
   14724:	   |               movea.l d0,a1
   14726:	   |               adda.l d0,a1
   14728:	   |               lea 1a680 <typeName>,a0
   1472e:	   |               move.l (0,a1,a0.l),d0
   14732:	   |               move.l d0,-(sp)
   14734:	   |               jsr b8 <copyString>
   1473a:	   |               addq.l #4,sp
}
   1473c:	   \-------------> movea.l (sp)+,a6
   1473e:	                   lea 76(sp),sp
   14742:	                   rts

00014744 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   14744:	move.l 4(sp),-(sp)
   14748:	jsr 140e4 <unlinkVar>
   1474e:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   14750:	movea.l 4(sp),a0
   14754:	moveq #8,d0
   14756:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   14758:	movea.l 4(sp),a0
   1475c:	move.l 8(sp),4(a0)
}
   14762:	nop
   14764:	rts

00014766 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   14766:	move.l 4(sp),-(sp)
   1476a:	jsr 140e4 <unlinkVar>
   14770:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   14772:	movea.l 4(sp),a0
   14776:	moveq #9,d0
   14778:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   1477a:	movea.l 4(sp),a0
   1477e:	move.l 8(sp),4(a0)
}
   14784:	nop
   14786:	rts

00014788 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   14788:	move.l 4(sp),-(sp)
   1478c:	jsr 140e4 <unlinkVar>
   14792:	addq.l #4,sp
	thisVar->varType = vT;
   14794:	movea.l 4(sp),a0
   14798:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   1479c:	movea.l 4(sp),a0
   147a0:	move.l 12(sp),4(a0)
}
   147a6:	nop
   147a8:	rts

000147aa <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   147aa:	      /-- bra.s 147bc <stackGetByIndex+0x12>
        vS = vS->next;
   147ac:	/-----|-> movea.l 4(sp),a0
   147b0:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   147b6:	|     +-- bne.s 147bc <stackGetByIndex+0x12>
            return NULL;
   147b8:	|     |   moveq #0,d0
   147ba:	|  /--|-- bra.s 147d0 <stackGetByIndex+0x26>
    while (theIndex--) {
   147bc:	|  |  \-> move.l 8(sp),d0
   147c0:	|  |      move.l d0,d1
   147c2:	|  |      subq.l #1,d1
   147c4:	|  |      move.l d1,8(sp)
   147c8:	|  |      tst.l d0
   147ca:	\--|----- bne.s 147ac <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   147cc:	   |      move.l 4(sp),d0
}
   147d0:	   \----> rts

000147d2 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   147d2:	          tst.l 4(sp)
   147d6:	      /-- bne.s 147e6 <stackFindLast+0x14>
		return NULL;
   147d8:	      |   moveq #0,d0
   147da:	/-----|-- bra.s 147f4 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   147dc:	|  /--|-> movea.l 4(sp),a0
   147e0:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   147e6:	|  |  \-> movea.l 4(sp),a0
   147ea:	|  |      move.l 8(a0),d0
   147ee:	|  \----- bne.s 147dc <stackFindLast+0xa>

	return hunt;
   147f0:	|         move.l 4(sp),d0
}
   147f4:	\-------> rts

000147f6 <stackSize>:

int stackSize (const struct stackHandler * me) {
   147f6:	       subq.l #8,sp
	int r = 0;
   147f8:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   147fc:	       movea.l 12(sp),a0
   14800:	       move.l (a0),(sp)
	while (a) {
   14802:	   /-- bra.s 1480e <stackSize+0x18>
		r ++;
   14804:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   14808:	|  |   movea.l (sp),a0
   1480a:	|  |   move.l 8(a0),(sp)
	while (a) {
   1480e:	|  \-> tst.l (sp)
   14810:	\----- bne.s 14804 <stackSize+0xe>
	}
	return r;
   14812:	       move.l 4(sp),d0
}
   14816:	       addq.l #8,sp
   14818:	       rts

0001481a <trimStack>:

void trimStack (struct variableStack ** stack) {
   1481a:	subq.l #8,sp
   1481c:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   1481e:	movea.l 16(sp),a0
   14822:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   14826:	movea.l 16(sp),a0
   1482a:	movea.l (a0),a0
   1482c:	move.l 8(a0),d0
   14830:	movea.l 16(sp),a0
   14834:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   14836:	move.l 8(sp),d0
   1483a:	move.l d0,-(sp)
   1483c:	jsr 140e4 <unlinkVar>
   14842:	addq.l #4,sp
	FreeVec(killMe);
   14844:	move.l 8(sp),4(sp)
   1484a:	move.l 1a7a4 <SysBase>,d0
   14850:	movea.l d0,a6
   14852:	movea.l 4(sp),a1
   14856:	jsr -690(a6)
   1485a:	nop
   1485c:	movea.l (sp)+,a6
   1485e:	addq.l #8,sp
   14860:	rts

00014862 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   14862:	       lea -52(sp),sp
   14866:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   14868:	       pea 1961a <newfatal.c.307beca7+0x156>
   1486e:	       jsr 16894 <KPrintF>
   14874:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   14876:	       moveq #64,d0
   14878:	       move.l d0,52(sp)
   1487c:	       clr.l 48(sp)
   14880:	       move.l 1a7a4 <SysBase>,d0
   14886:	       movea.l d0,a6
   14888:	       move.l 52(sp),d0
   1488c:	       move.l 48(sp),d1
   14890:	       jsr -684(a6)
   14894:	       move.l d0,44(sp)
   14898:	       move.l 44(sp),d0
   1489c:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   148a0:	   /-- bne.s 148a8 <freeze+0x46>
   148a2:	   |   clr.w d0
   148a4:	/--|-- bra.w 14a1e <freeze+0x1bc>

	CstFreeze();
   148a8:	|  \-> jsr 15b0 <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   148ae:	|      move.l 1a854 <sceneWidth>,d0
   148b4:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   148b8:	|      move.l 1a858 <sceneHeight>,d0
   148be:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   148c2:	|      move.l 1a854 <sceneWidth>,d0
   148c8:	|      movea.l 40(sp),a0
   148cc:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   148d0:	|      move.l 1a858 <sceneHeight>,d0
   148d6:	|      movea.l 40(sp),a0
   148da:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   148de:	|      move.l 1a872 <cameraX>,d0
   148e4:	|      movea.l 40(sp),a0
   148e8:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   148ec:	|      move.l 1a876 <cameraY>,d0
   148f2:	|      movea.l 40(sp),a0
   148f6:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   148fa:	|      move.l 1a142 <cameraZoom>,d0
   14900:	|      movea.l 40(sp),a0
   14904:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   14908:	|      move.w #1,1a860 <backdropExists>

	newFreezer -> allPeople = allPeople;
   14910:	|      move.l 1a81c <allPeople>,d0
   14916:	|      movea.l 40(sp),a0
   1491a:	|      move.l d0,(a0)
	allPeople = NULL;
   1491c:	|      clr.l 1a81c <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   14922:	|      moveq #42,d0
   14924:	|      move.l d0,28(sp)
   14928:	|      clr.l 24(sp)
   1492c:	|      move.l 1a7a4 <SysBase>,d0
   14932:	|      movea.l d0,a6
   14934:	|      move.l 28(sp),d0
   14938:	|      move.l 24(sp),d1
   1493c:	|      jsr -684(a6)
   14940:	|      move.l d0,20(sp)
   14944:	|      move.l 20(sp),d0
   14948:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   1494c:	|  /-- bne.s 14954 <freeze+0xf2>
   1494e:	|  |   clr.w d0
   14950:	+--|-- bra.w 14a1e <freeze+0x1bc>

	newFreezer -> allScreenRegions = allScreenRegions;
   14954:	|  \-> move.l 1a8c8 <allScreenRegions>,d0
   1495a:	|      movea.l 40(sp),a0
   1495e:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   14962:	|      clr.l 1a8c8 <allScreenRegions>
	overRegion = NULL;
   14968:	|      clr.l 1a8cc <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   1496e:	|      move.l 1a6aa <mouseCursorAnim>,d0
   14974:	|      movea.l 40(sp),a0
   14978:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   1497c:	|      move.l 1a6ae <mouseCursorFrameNum>,d0
   14982:	|      movea.l 40(sp),a0
   14986:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   1498a:	|      jsr a470 <makeNullAnim>
   14990:	|      move.l d0,1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   14996:	|      clr.l 1a6ae <mouseCursorFrameNum>

	newFreezer -> speech = speech;
   1499c:	|      move.l 1a800 <speech>,d0
   149a2:	|      movea.l 40(sp),a0
   149a6:	|      move.l d0,20(a0)
	initSpeech ();
   149aa:	|      jsr 7778 <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   149b0:	|      moveq #28,d0
   149b2:	|      move.l d0,12(sp)
   149b6:	|      clr.l 8(sp)
   149ba:	|      move.l 1a7a4 <SysBase>,d0
   149c0:	|      movea.l d0,a6
   149c2:	|      move.l 12(sp),d0
   149c6:	|      move.l 8(sp),d1
   149ca:	|      jsr -684(a6)
   149ce:	|      move.l d0,4(sp)
   149d2:	|      move.l 4(sp),d0
   149d6:	|      movea.l 40(sp),a0
   149da:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   149de:	|      movea.l 40(sp),a0
   149e2:	|      move.l 28(a0),d0
   149e6:	|  /-- bne.s 149ec <freeze+0x18a>
   149e8:	|  |   clr.w d0
   149ea:	+--|-- bra.s 14a1e <freeze+0x1bc>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   149ec:	|  \-> movea.l 40(sp),a0
   149f0:	|      move.l 28(a0),d0
   149f4:	|      pea 1c <_start+0x1c>
   149f8:	|      clr.l -(sp)
   149fa:	|      move.l d0,-(sp)
   149fc:	|      jsr 16818 <memset>
   14a02:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   14a06:	|      move.l 1a8ac <frozenStuff>,d0
   14a0c:	|      movea.l 40(sp),a0
   14a10:	|      move.l d0,60(a0)
	frozenStuff = newFreezer;
   14a14:	|      move.l 40(sp),1a8ac <frozenStuff>

	return TRUE;
   14a1c:	|      moveq #1,d0
}
   14a1e:	\----> movea.l (sp)+,a6
   14a20:	       lea 52(sp),sp
   14a24:	       rts

00014a26 <unfreeze>:

void unfreeze () {
   14a26:	       lea -16(sp),sp
   14a2a:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   14a2c:	       move.l 1a8ac <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   14a34:	       move.l 1a8ac <frozenStuff>,d0
   14a3a:	/----- beq.w 14c5c <unfreeze+0x236>

	CstUnfreeze();
   14a3e:	|      jsr 35d8 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   14a44:	|      movea.l 1a8ac <frozenStuff>,a0
   14a4a:	|      move.l 48(a0),d0
   14a4e:	|      move.l d0,1a854 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   14a54:	|      movea.l 1a8ac <frozenStuff>,a0
   14a5a:	|      move.l 52(a0),d0
   14a5e:	|      move.l d0,1a858 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   14a64:	|      movea.l 1a8ac <frozenStuff>,a0
   14a6a:	|      move.l 40(a0),d0
   14a6e:	|      move.l d0,1a872 <cameraX>
	cameraY = frozenStuff -> cameraY;
   14a74:	|      movea.l 1a8ac <frozenStuff>,a0
   14a7a:	|      move.l 44(a0),d0
   14a7e:	|      move.l d0,1a876 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   14a84:	|      move.l 1a760 <input+0xa>,d0
   14a8a:	|      move.l d0,-(sp)
   14a8c:	|      jsr 16cd0 <__floatsisf>
   14a92:	|      addq.l #4,sp
   14a94:	|      move.l d0,d1
   14a96:	|      move.l 1a142 <cameraZoom>,d0
   14a9c:	|      move.l d0,-(sp)
   14a9e:	|      move.l d1,-(sp)
   14aa0:	|      jsr 16d82 <__mulsf3>
   14aa6:	|      addq.l #8,sp
   14aa8:	|      move.l d0,-(sp)
   14aaa:	|      jsr 16c68 <__fixsfsi>
   14ab0:	|      addq.l #4,sp
   14ab2:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   14ab8:	|      move.l 1a764 <input+0xe>,d0
   14abe:	|      move.l d0,-(sp)
   14ac0:	|      jsr 16cd0 <__floatsisf>
   14ac6:	|      addq.l #4,sp
   14ac8:	|      move.l d0,d1
   14aca:	|      move.l 1a142 <cameraZoom>,d0
   14ad0:	|      move.l d0,-(sp)
   14ad2:	|      move.l d1,-(sp)
   14ad4:	|      jsr 16d82 <__mulsf3>
   14ada:	|      addq.l #8,sp
   14adc:	|      move.l d0,-(sp)
   14ade:	|      jsr 16c68 <__fixsfsi>
   14ae4:	|      addq.l #4,sp
   14ae6:	|      move.l d0,1a764 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   14aec:	|      movea.l 1a8ac <frozenStuff>,a0
   14af2:	|      move.l 56(a0),d0
   14af6:	|      move.l d0,1a142 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   14afc:	|      move.l 1a760 <input+0xa>,d0
   14b02:	|      move.l d0,-(sp)
   14b04:	|      jsr 16cd0 <__floatsisf>
   14b0a:	|      addq.l #4,sp
   14b0c:	|      move.l d0,d1
   14b0e:	|      move.l 1a142 <cameraZoom>,d0
   14b14:	|      move.l d0,-(sp)
   14b16:	|      move.l d1,-(sp)
   14b18:	|      jsr 16b7c <__divsf3>
   14b1e:	|      addq.l #8,sp
   14b20:	|      move.l d0,-(sp)
   14b22:	|      jsr 16c68 <__fixsfsi>
   14b28:	|      addq.l #4,sp
   14b2a:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   14b30:	|      move.l 1a764 <input+0xe>,d0
   14b36:	|      move.l d0,-(sp)
   14b38:	|      jsr 16cd0 <__floatsisf>
   14b3e:	|      addq.l #4,sp
   14b40:	|      move.l d0,d1
   14b42:	|      move.l 1a142 <cameraZoom>,d0
   14b48:	|      move.l d0,-(sp)
   14b4a:	|      move.l d1,-(sp)
   14b4c:	|      jsr 16b7c <__divsf3>
   14b52:	|      addq.l #8,sp
   14b54:	|      move.l d0,-(sp)
   14b56:	|      jsr 16c68 <__fixsfsi>
   14b5c:	|      addq.l #4,sp
   14b5e:	|      move.l d0,1a764 <input+0xe>

	killAllPeople ();
   14b64:	|      jsr a178 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   14b6a:	|      movea.l 1a8ac <frozenStuff>,a0
   14b70:	|      move.l (a0),d0
   14b72:	|      move.l d0,1a81c <allPeople>

	killAllRegions ();
   14b78:	|      jsr 150e4 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   14b7e:	|      movea.l 1a8ac <frozenStuff>,a0
   14b84:	|      move.l 4(a0),d0
   14b88:	|      move.l d0,1a8c8 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   14b8e:	|      move.l 1a6aa <mouseCursorAnim>,d0
   14b94:	|      move.l d0,-(sp)
   14b96:	|      jsr 906c <deleteAnim>
   14b9c:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   14b9e:	|      movea.l 1a8ac <frozenStuff>,a0
   14ba4:	|      move.l 32(a0),d0
   14ba8:	|      move.l d0,1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   14bae:	|      movea.l 1a8ac <frozenStuff>,a0
   14bb4:	|      move.l 36(a0),d0
   14bb8:	|      move.l d0,1a6ae <mouseCursorFrameNum>

	if (currentEvents) FreeVec(currentEvents);
   14bbe:	|      move.l 1a11c <currentEvents>,d0
   14bc4:	|  /-- beq.s 14bde <unfreeze+0x1b8>
   14bc6:	|  |   move.l 1a11c <currentEvents>,12(sp)
   14bce:	|  |   move.l 1a7a4 <SysBase>,d0
   14bd4:	|  |   movea.l d0,a6
   14bd6:	|  |   movea.l 12(sp),a1
   14bda:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   14bde:	|  \-> movea.l 1a8ac <frozenStuff>,a0
   14be4:	|      move.l 28(a0),d0
   14be8:	|      move.l d0,1a11c <currentEvents>

	killAllSpeech ();
   14bee:	|      jsr 7810 <killAllSpeech>
	if (speech) FreeVec(speech);
   14bf4:	|      move.l 1a800 <speech>,d0
   14bfa:	|  /-- beq.s 14c14 <unfreeze+0x1ee>
   14bfc:	|  |   move.l 1a800 <speech>,8(sp)
   14c04:	|  |   move.l 1a7a4 <SysBase>,d0
   14c0a:	|  |   movea.l d0,a6
   14c0c:	|  |   movea.l 8(sp),a1
   14c10:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   14c14:	|  \-> movea.l 1a8ac <frozenStuff>,a0
   14c1a:	|      move.l 20(a0),d0
   14c1e:	|      move.l d0,1a800 <speech>

	frozenStuff = frozenStuff -> next;
   14c24:	|      movea.l 1a8ac <frozenStuff>,a0
   14c2a:	|      move.l 60(a0),d0
   14c2e:	|      move.l d0,1a8ac <frozenStuff>

	overRegion = NULL;
   14c34:	|      clr.l 1a8cc <overRegion>
	if (killMe) FreeVec(killMe);
   14c3a:	|      tst.l 16(sp)
   14c3e:	|  /-- beq.s 14c56 <unfreeze+0x230>
   14c40:	|  |   move.l 16(sp),4(sp)
   14c46:	|  |   move.l 1a7a4 <SysBase>,d0
   14c4c:	|  |   movea.l d0,a6
   14c4e:	|  |   movea.l 4(sp),a1
   14c52:	|  |   jsr -690(a6)
	killMe = NULL;
   14c56:	|  \-> clr.l 16(sp)
   14c5a:	|  /-- bra.s 14c5e <unfreeze+0x238>
	if (! frozenStuff) return;
   14c5c:	\--|-> nop
}
   14c5e:	   \-> movea.l (sp)+,a6
   14c60:	       lea 16(sp),sp
   14c64:	       rts

00014c66 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   14c66:	pea 1962c <newfatal.c.307beca7+0x168>
   14c6c:	jsr 16894 <KPrintF>
   14c72:	addq.l #4,sp
	return FALSE;
   14c74:	clr.w d0
}
   14c76:	rts

00014c78 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   14c78:	          lea -44(sp),sp
   14c7c:	          move.l a6,-(sp)
   14c7e:	          move.l d2,-(sp)
	unsigned int a = 0;
   14c80:	          clr.l 48(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   14c84:	          move.l 1a8b8 <fontOrderString>,d0
   14c8a:	      /-- beq.s 14ca4 <loadFont+0x2c>
   14c8c:	      |   move.l 1a8b8 <fontOrderString>,36(sp)
   14c94:	      |   move.l 1a7a4 <SysBase>,d0
   14c9a:	      |   movea.l d0,a6
   14c9c:	      |   movea.l 36(sp),a1
   14ca0:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   14ca4:	      \-> move.l 60(sp),-(sp)
   14ca8:	          jsr b8 <copyString>
   14cae:	          addq.l #4,sp
   14cb0:	          move.l d0,1a8b8 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);
   14cb6:	          move.l 1a8c4 <theFont>,d0
   14cbc:	      /-- beq.s 14cce <loadFont+0x56>
   14cbe:	      |   move.l 1a8c4 <theFont>,d0
   14cc4:	      |   move.l d0,-(sp)
   14cc6:	      |   jsr 81de <forgetSpriteBank>
   14ccc:	      |   addq.l #4,sp
	theFont = AllocVec( sizeof(struct loadedSpriteBank), MEMF_ANY );
   14cce:	      \-> moveq #26,d0
   14cd0:	          move.l d0,32(sp)
   14cd4:	          clr.l 28(sp)
   14cd8:	          move.l 1a7a4 <SysBase>,d0
   14cde:	          movea.l d0,a6
   14ce0:	          move.l 32(sp),d0
   14ce4:	          move.l 28(sp),d1
   14ce8:	          jsr -684(a6)
   14cec:	          move.l d0,24(sp)
   14cf0:	          move.l 24(sp),d0
   14cf4:	          move.l d0,1a8c4 <theFont>

	loadedFontNum = filenum;
   14cfa:	          move.l 56(sp),1a8b4 <loadedFontNum>

	fontTableSize = 0;
   14d02:	          clr.l 1a8c0 <fontTableSize>
	char *tmp = charOrder;
   14d08:	          move.l 60(sp),44(sp)
	while (*tmp) {        
   14d0e:	   /----- bra.s 14d4a <loadFont+0xd2>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   14d10:	/--|----> movea.l 44(sp),a0
   14d14:	|  |      move.b (a0),d0
   14d16:	|  |      ext.w d0
   14d18:	|  |      movea.w d0,a0
   14d1a:	|  |      move.l 1a8c0 <fontTableSize>,d0
   14d20:	|  |      move.l d0,d0
   14d22:	|  |      move.b d0,d0
   14d24:	|  |      andi.l #255,d0
   14d2a:	|  |      cmp.l a0,d0
   14d2c:	|  |  /-- bge.s 14d3e <loadFont+0xc6>
   14d2e:	|  |  |   movea.l 44(sp),a0
   14d32:	|  |  |   move.b (a0),d0
   14d34:	|  |  |   ext.w d0
   14d36:	|  |  |   movea.w d0,a0
   14d38:	|  |  |   move.l a0,1a8c0 <fontTableSize>
		*tmp++;
   14d3e:	|  |  \-> move.l 44(sp),d0
   14d42:	|  |      move.l d0,d1
   14d44:	|  |      addq.l #1,d1
   14d46:	|  |      move.l d1,44(sp)
	while (*tmp) {        
   14d4a:	|  \----> movea.l 44(sp),a0
   14d4e:	|         move.b (a0),d0
   14d50:	\-------- bne.s 14d10 <loadFont+0x98>
	}
	fontTableSize++;
   14d52:	          move.l 1a8c0 <fontTableSize>,d0
   14d58:	          addq.l #1,d0
   14d5a:	          move.l d0,1a8c0 <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   14d60:	          move.l 1a8bc <fontTable>,d0
   14d66:	      /-- beq.s 14d80 <loadFont+0x108>
   14d68:	      |   move.l 1a8bc <fontTable>,20(sp)
   14d70:	      |   move.l 1a7a4 <SysBase>,d0
   14d76:	      |   movea.l d0,a6
   14d78:	      |   movea.l 20(sp),a1
   14d7c:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   14d80:	      \-> move.l 1a8c0 <fontTableSize>,d0
   14d86:	          add.l d0,d0
   14d88:	          add.l d0,d0
   14d8a:	          move.l d0,16(sp)
   14d8e:	          clr.l 12(sp)
   14d92:	          move.l 1a7a4 <SysBase>,d0
   14d98:	          movea.l d0,a6
   14d9a:	          move.l 16(sp),d0
   14d9e:	          move.l 12(sp),d1
   14da2:	          jsr -684(a6)
   14da6:	          move.l d0,8(sp)
   14daa:	          move.l 8(sp),d0
   14dae:	          move.l d0,1a8bc <fontTable>
	if (!fontTable) return FALSE;
   14db4:	          move.l 1a8bc <fontTable>,d0
   14dba:	      /-- bne.s 14dc2 <loadFont+0x14a>
   14dbc:	      |   clr.w d0
   14dbe:	/-----|-- bra.w 14e6e <loadFont+0x1f6>

	for (a = 0;  a < fontTableSize; a++) {
   14dc2:	|     \-> clr.l 48(sp)
   14dc6:	|     /-- bra.s 14de0 <loadFont+0x168>
		fontTable[a] = 0;
   14dc8:	|  /--|-> move.l 1a8bc <fontTable>,d1
   14dce:	|  |  |   move.l 48(sp),d0
   14dd2:	|  |  |   add.l d0,d0
   14dd4:	|  |  |   add.l d0,d0
   14dd6:	|  |  |   movea.l d1,a0
   14dd8:	|  |  |   adda.l d0,a0
   14dda:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   14ddc:	|  |  |   addq.l #1,48(sp)
   14de0:	|  |  \-> move.l 1a8c0 <fontTableSize>,d0
   14de6:	|  |      cmp.l 48(sp),d0
   14dea:	|  \----- bhi.s 14dc8 <loadFont+0x150>
	}
	a = 0;
   14dec:	|         clr.l 48(sp)
	int i = 0;
   14df0:	|         clr.l 40(sp)
	tmp = charOrder;
   14df4:	|         move.l 60(sp),44(sp)
	while (*tmp) {
   14dfa:	|     /-- bra.s 14e2a <loadFont+0x1b2>
		fontTable[*tmp++] = i;
   14dfc:	|  /--|-> move.l 1a8bc <fontTable>,d1
   14e02:	|  |  |   move.l 44(sp),d0
   14e06:	|  |  |   move.l d0,d2
   14e08:	|  |  |   addq.l #1,d2
   14e0a:	|  |  |   move.l d2,44(sp)
   14e0e:	|  |  |   movea.l d0,a0
   14e10:	|  |  |   move.b (a0),d0
   14e12:	|  |  |   ext.w d0
   14e14:	|  |  |   movea.w d0,a0
   14e16:	|  |  |   move.l a0,d0
   14e18:	|  |  |   add.l a0,d0
   14e1a:	|  |  |   add.l d0,d0
   14e1c:	|  |  |   movea.l d1,a0
   14e1e:	|  |  |   adda.l d0,a0
   14e20:	|  |  |   move.l 40(sp),d0
   14e24:	|  |  |   move.l d0,(a0)
		i++;
   14e26:	|  |  |   addq.l #1,40(sp)
	while (*tmp) {
   14e2a:	|  |  \-> movea.l 44(sp),a0
   14e2e:	|  |      move.b (a0),d0
   14e30:	|  \----- bne.s 14dfc <loadFont+0x184>
	}

	if (!loadSpriteBank(filenum, &theFont->bank, TRUE)) {
   14e32:	|         move.l 1a8c4 <theFont>,d0
   14e38:	|         addq.l #8,d0
   14e3a:	|         pea 1 <_start+0x1>
   14e3e:	|         move.l d0,-(sp)
   14e40:	|         move.l 64(sp),-(sp)
   14e44:	|         jsr 8300 <loadSpriteBank>
   14e4a:	|         lea 12(sp),sp
   14e4e:	|         tst.w d0
   14e50:	|     /-- bne.s 14e64 <loadFont+0x1ec>
		KPrintF("loadFont: Can't load font");
   14e52:	|     |   pea 19653 <newfatal.c.307beca7+0x18f>
   14e58:	|     |   jsr 16894 <KPrintF>
   14e5e:	|     |   addq.l #4,sp
		return FALSE;
   14e60:	|     |   clr.w d0
   14e62:	+-----|-- bra.s 14e6e <loadFont+0x1f6>
	}
	fontHeight = h;
   14e64:	|     \-> move.l 64(sp),1a8b0 <fontHeight>
	return TRUE;
   14e6c:	|         moveq #1,d0
}
   14e6e:	\-------> move.l (sp)+,d2
   14e70:	          movea.l (sp)+,a6
   14e72:	          lea 44(sp),sp
   14e76:	          rts

00014e78 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   14e78:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   14e7c:	                clr.l 4(sp)

    if (!fontTableSize) return;
   14e80:	                move.l 1a8c0 <fontTableSize>,d0
   14e86:	/-------------- beq.w 14f4e <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   14e8a:	|               move.w 1a6a8 <fontSpace>,d0
   14e90:	|               asr.w #1,d0
   14e92:	|               ext.l d0
   14e94:	|               add.l d0,20(sp)
	char *tmp = theText;
   14e98:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   14e9e:	|     /-------- bra.w 14f42 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   14ea2:	|  /--|-------> movea.l 1a8c4 <theFont>,a0
   14ea8:	|  |  |         movea.l 16(a0),a0
   14eac:	|  |  |         movea.l 8(sp),a1
   14eb0:	|  |  |         move.b (a1),d0
   14eb2:	|  |  |         move.b d0,d0
   14eb4:	|  |  |         andi.l #255,d0
   14eba:	|  |  |         move.l 1a8c0 <fontTableSize>,d1
   14ec0:	|  |  |         cmp.l d0,d1
   14ec2:	|  |  |  /----- bls.s 14eee <pasteStringToBackdrop+0x76>
   14ec4:	|  |  |  |      move.l 1a8bc <fontTable>,d1
   14eca:	|  |  |  |      movea.l 8(sp),a1
   14ece:	|  |  |  |      move.b (a1),d0
   14ed0:	|  |  |  |      move.b d0,d0
   14ed2:	|  |  |  |      andi.l #255,d0
   14ed8:	|  |  |  |      add.l d0,d0
   14eda:	|  |  |  |      add.l d0,d0
   14edc:	|  |  |  |      movea.l d1,a1
   14ede:	|  |  |  |      adda.l d0,a1
   14ee0:	|  |  |  |      move.l (a1),d1
   14ee2:	|  |  |  |      move.l d1,d0
   14ee4:	|  |  |  |      lsl.l #3,d0
   14ee6:	|  |  |  |      sub.l d1,d0
   14ee8:	|  |  |  |      add.l d0,d0
   14eea:	|  |  |  |      add.l d0,d0
   14eec:	|  |  |  |  /-- bra.s 14ef0 <pasteStringToBackdrop+0x78>
   14eee:	|  |  |  \--|-> moveq #0,d0
   14ef0:	|  |  |     \-> adda.l d0,a0
   14ef2:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   14ef4:	|  |  |         move.l 24(sp),d1
   14ef8:	|  |  |         movea.l (sp),a0
   14efa:	|  |  |         move.l 12(a0),d0
   14efe:	|  |  |         move.l d0,d0
   14f00:	|  |  |         sub.w d0,d1
   14f02:	|  |  |         move.w d1,d0
   14f04:	|  |  |         movea.w d0,a1
   14f06:	|  |  |         move.l 20(sp),d1
   14f0a:	|  |  |         movea.l (sp),a0
   14f0c:	|  |  |         move.l 8(a0),d0
   14f10:	|  |  |         move.l d0,d0
   14f12:	|  |  |         sub.w d0,d1
   14f14:	|  |  |         move.w d1,d0
   14f16:	|  |  |         movea.w d0,a0
   14f18:	|  |  |         move.l a1,-(sp)
   14f1a:	|  |  |         move.l a0,-(sp)
   14f1c:	|  |  |         move.l 8(sp),-(sp)
   14f20:	|  |  |         jsr 1c52 <CstPasteChar>
   14f26:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   14f2a:	|  |  |         movea.l (sp),a0
   14f2c:	|  |  |         move.l (a0),d1
   14f2e:	|  |  |         move.w 1a6a8 <fontSpace>,d0
   14f34:	|  |  |         movea.w d0,a0
   14f36:	|  |  |         move.l d1,d0
   14f38:	|  |  |         add.l a0,d0
   14f3a:	|  |  |         add.l d0,20(sp)
		tmp++;
   14f3e:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   14f42:	|  |  \-------> movea.l 8(sp),a0
   14f46:	|  |            move.b (a0),d0
   14f48:	|  \----------- bne.w 14ea2 <pasteStringToBackdrop+0x2a>
   14f4c:	|           /-- bra.s 14f50 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   14f4e:	\-----------|-> nop
    }
}
   14f50:	            \-> lea 12(sp),sp
   14f54:	                rts

00014f56 <stringWidth>:


int stringWidth (char * theText) {
   14f56:	       subq.l #8,sp
	int a = 0;
   14f58:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   14f5c:	       clr.l (sp)

	if (! fontTableSize) return 0;
   14f5e:	       move.l 1a8c0 <fontTableSize>,d0
   14f64:	/----- bne.s 14f6a <stringWidth+0x14>
   14f66:	|      moveq #0,d0
   14f68:	|  /-- bra.s 14f6c <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   14f6a:	\--|-> move.l (sp),d0
}
   14f6c:	   \-> addq.l #8,sp
   14f6e:	       rts

00014f70 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   14f70:	       lea -16(sp),sp
   14f74:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   14f76:	       moveq #36,d0
   14f78:	       move.l d0,16(sp)
   14f7c:	       clr.l 12(sp)
   14f80:	       move.l 1a7a4 <SysBase>,d0
   14f86:	       movea.l d0,a6
   14f88:	       move.l 16(sp),d0
   14f8c:	       move.l 12(sp),d1
   14f90:	       jsr -684(a6)
   14f94:	       move.l d0,8(sp)
   14f98:	       move.l 8(sp),d0
   14f9c:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   14fa0:	   /-- bne.s 14fa8 <addScreenRegion+0x38>
   14fa2:	   |   clr.w d0
   14fa4:	/--|-- bra.w 15028 <addScreenRegion+0xb8>
    newRegion->di = di;
   14fa8:	|  \-> movea.l 4(sp),a0
   14fac:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   14fb2:	|      movea.l 4(sp),a0
   14fb6:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   14fba:	|      movea.l 4(sp),a0
   14fbe:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   14fc4:	|      movea.l 4(sp),a0
   14fc8:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   14fce:	|      movea.l 4(sp),a0
   14fd2:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   14fd8:	|      movea.l 4(sp),a0
   14fdc:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   14fe2:	|      movea.l 4(sp),a0
   14fe6:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   14fec:	|      move.l 52(sp),-(sp)
   14ff0:	|      jsr ccf0 <loadObjectType>
   14ff6:	|      addq.l #4,sp
   14ff8:	|      movea.l 4(sp),a0
   14ffc:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15000:	|      move.l 1a8c8 <allScreenRegions>,d0
   15006:	|      movea.l 4(sp),a0
   1500a:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   1500e:	|      move.l 4(sp),1a8c8 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15016:	|      movea.l 4(sp),a0
   1501a:	|      move.l 28(a0),d0
   1501e:	|      sne d0
   15020:	|      neg.b d0
   15022:	|      move.b d0,d0
   15024:	|      andi.w #255,d0
}
   15028:	\----> movea.l (sp)+,a6
   1502a:	       lea 16(sp),sp
   1502e:	       rts

00015030 <getOverRegion>:

void getOverRegion () {
   15030:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15032:	             move.l 1a8c8 <allScreenRegions>,(sp)
	while (thisRegion) {
   15038:	   /-------- bra.s 150a6 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   1503a:	/--|-------> move.l 1a760 <input+0xa>,d0
   15040:	|  |         movea.l (sp),a0
   15042:	|  |         movea.l (a0),a0
   15044:	|  |         move.l 1a872 <cameraX>,d1
   1504a:	|  |         suba.l d1,a0
   1504c:	|  |         cmpa.l d0,a0
   1504e:	|  |  /----- bgt.s 150a0 <getOverRegion+0x70>
   15050:	|  |  |      move.l 1a764 <input+0xe>,d0
   15056:	|  |  |      movea.l (sp),a0
   15058:	|  |  |      movea.l 4(a0),a0
   1505c:	|  |  |      move.l 1a876 <cameraY>,d1
   15062:	|  |  |      suba.l d1,a0
   15064:	|  |  |      cmpa.l d0,a0
   15066:	|  |  +----- bgt.s 150a0 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15068:	|  |  |      move.l 1a760 <input+0xa>,d0
   1506e:	|  |  |      movea.l (sp),a0
   15070:	|  |  |      movea.l 8(a0),a0
   15074:	|  |  |      move.l 1a872 <cameraX>,d1
   1507a:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   1507c:	|  |  |      cmpa.l d0,a0
   1507e:	|  |  +----- blt.s 150a0 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15080:	|  |  |      move.l 1a764 <input+0xe>,d0
   15086:	|  |  |      movea.l (sp),a0
   15088:	|  |  |      movea.l 12(a0),a0
   1508c:	|  |  |      move.l 1a876 <cameraY>,d1
   15092:	|  |  |      suba.l d1,a0
   15094:	|  |  |      cmpa.l d0,a0
   15096:	|  |  +----- blt.s 150a0 <getOverRegion+0x70>
			overRegion = thisRegion;
   15098:	|  |  |      move.l (sp),1a8cc <overRegion>
			return;
   1509e:	|  |  |  /-- bra.s 150b2 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   150a0:	|  |  \--|-> movea.l (sp),a0
   150a2:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   150a6:	|  \-----|-> tst.l (sp)
   150a8:	\--------|-- bne.s 1503a <getOverRegion+0xa>
	}
	overRegion = NULL;
   150aa:	         |   clr.l 1a8cc <overRegion>
	return;
   150b0:	         |   nop
}
   150b2:	         \-> addq.l #4,sp
   150b4:	             rts

000150b6 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   150b6:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   150b8:	             move.l 1a8c8 <allScreenRegions>,(sp)

	while (thisRegion) {
   150be:	   /-------- bra.s 150da <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   150c0:	/--|-------> movea.l (sp),a0
   150c2:	|  |         movea.l 28(a0),a0
   150c6:	|  |         move.l 4(a0),d0
   150ca:	|  |         cmp.l 8(sp),d0
   150ce:	|  |     /-- bne.s 150d4 <getRegionForObject+0x1e>
			return thisRegion;
   150d0:	|  |     |   move.l (sp),d0
   150d2:	|  |  /--|-- bra.s 150e0 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   150d4:	|  |  |  \-> movea.l (sp),a0
   150d6:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   150da:	|  \--|----> tst.l (sp)
   150dc:	\-----|----- bne.s 150c0 <getRegionForObject+0xa>
	}

	return NULL;
   150de:	      |      moveq #0,d0
}
   150e0:	      \----> addq.l #4,sp
   150e2:	             rts

000150e4 <killAllRegions>:

void killAllRegions () {
   150e4:	       subq.l #8,sp
   150e6:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   150e8:	   /-- bra.s 1512a <killAllRegions+0x46>
		killRegion = allScreenRegions;
   150ea:	/--|-> move.l 1a8c8 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   150f2:	|  |   movea.l 1a8c8 <allScreenRegions>,a0
   150f8:	|  |   move.l 32(a0),d0
   150fc:	|  |   move.l d0,1a8c8 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15102:	|  |   movea.l 8(sp),a0
   15106:	|  |   move.l 28(a0),d0
   1510a:	|  |   move.l d0,-(sp)
   1510c:	|  |   jsr cfa8 <removeObjectType>
   15112:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15114:	|  |   move.l 8(sp),4(sp)
   1511a:	|  |   move.l 1a7a4 <SysBase>,d0
   15120:	|  |   movea.l d0,a6
   15122:	|  |   movea.l 4(sp),a1
   15126:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   1512a:	|  \-> move.l 1a8c8 <allScreenRegions>,d0
   15130:	\----- bne.s 150ea <killAllRegions+0x6>
	}
	overRegion = NULL;
   15132:	       clr.l 1a8cc <overRegion>
}
   15138:	       nop
   1513a:	       movea.l (sp)+,a6
   1513c:	       addq.l #8,sp
   1513e:	       rts

00015140 <loadRegions>:

void loadRegions (BPTR fp) {
   15140:	       lea -24(sp),sp
   15144:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15146:	       move.l 32(sp),-(sp)
   1514a:	       jsr 6bc <get2bytes>
   15150:	       addq.l #4,sp
   15152:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15156:	       move.l #108744,20(sp)

	while (numRegions --) {
   1515e:	   /-- bra.w 1523c <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15162:	/--|-> moveq #36,d0
   15164:	|  |   move.l d0,16(sp)
   15168:	|  |   clr.l 12(sp)
   1516c:	|  |   move.l 1a7a4 <SysBase>,d0
   15172:	|  |   movea.l d0,a6
   15174:	|  |   move.l 16(sp),d0
   15178:	|  |   move.l 12(sp),d1
   1517c:	|  |   jsr -684(a6)
   15180:	|  |   move.l d0,8(sp)
   15184:	|  |   move.l 8(sp),d0
   15188:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   1518c:	|  |   movea.l 20(sp),a0
   15190:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15194:	|  |   moveq #32,d1
   15196:	|  |   add.l 4(sp),d1
   1519a:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   1519e:	|  |   move.l 32(sp),-(sp)
   151a2:	|  |   jsr 6bc <get2bytes>
   151a8:	|  |   addq.l #4,sp
   151aa:	|  |   movea.l 4(sp),a0
   151ae:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   151b0:	|  |   move.l 32(sp),-(sp)
   151b4:	|  |   jsr 6bc <get2bytes>
   151ba:	|  |   addq.l #4,sp
   151bc:	|  |   movea.l 4(sp),a0
   151c0:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   151c4:	|  |   move.l 32(sp),-(sp)
   151c8:	|  |   jsr 6bc <get2bytes>
   151ce:	|  |   addq.l #4,sp
   151d0:	|  |   movea.l 4(sp),a0
   151d4:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   151d8:	|  |   move.l 32(sp),-(sp)
   151dc:	|  |   jsr 6bc <get2bytes>
   151e2:	|  |   addq.l #4,sp
   151e4:	|  |   movea.l 4(sp),a0
   151e8:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   151ec:	|  |   move.l 32(sp),-(sp)
   151f0:	|  |   jsr 6bc <get2bytes>
   151f6:	|  |   addq.l #4,sp
   151f8:	|  |   movea.l 4(sp),a0
   151fc:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15200:	|  |   move.l 32(sp),-(sp)
   15204:	|  |   jsr 6bc <get2bytes>
   1520a:	|  |   addq.l #4,sp
   1520c:	|  |   movea.l 4(sp),a0
   15210:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15214:	|  |   move.l 32(sp),-(sp)
   15218:	|  |   jsr 6bc <get2bytes>
   1521e:	|  |   addq.l #4,sp
   15220:	|  |   movea.l 4(sp),a0
   15224:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15228:	|  |   move.l 32(sp),-(sp)
   1522c:	|  |   jsr cc9e <loadObjectRef>
   15232:	|  |   addq.l #4,sp
   15234:	|  |   movea.l 4(sp),a0
   15238:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   1523c:	|  \-> move.l 24(sp),d0
   15240:	|      move.l d0,d1
   15242:	|      subq.l #1,d1
   15244:	|      move.l d1,24(sp)
   15248:	|      tst.l d0
   1524a:	\----- bne.w 15162 <loadRegions+0x22>
	}
	* pointy = NULL;
   1524e:	       movea.l 20(sp),a0
   15252:	       clr.l (a0)
}
   15254:	       nop
   15256:	       movea.l (sp)+,a6
   15258:	       lea 24(sp),sp
   1525c:	       rts

0001525e <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   1525e:	             lea -12(sp),sp
   15262:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15264:	             move.l #108744,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   1526c:	   /-------- bra.s 152e6 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   1526e:	/--|-------> movea.l 12(sp),a0
   15272:	|  |         movea.l (a0),a0
   15274:	|  |         movea.l 28(a0),a0
   15278:	|  |         move.l 4(a0),d0
   1527c:	|  |         cmp.l 20(sp),d0
   15280:	|  |  /----- bne.s 152d8 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15282:	|  |  |      movea.l 12(sp),a0
   15286:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   1528a:	|  |  |      movea.l 8(sp),a0
   1528e:	|  |  |      move.l 32(a0),d0
   15292:	|  |  |      movea.l 12(sp),a0
   15296:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15298:	|  |  |      movea.l 8(sp),a0
   1529c:	|  |  |      move.l 28(a0),d0
   152a0:	|  |  |      move.l d0,-(sp)
   152a2:	|  |  |      jsr cfa8 <removeObjectType>
   152a8:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   152aa:	|  |  |      move.l 1a8cc <overRegion>,d0
   152b0:	|  |  |      cmp.l 8(sp),d0
   152b4:	|  |  |  /-- bne.s 152bc <removeScreenRegion+0x5e>
   152b6:	|  |  |  |   clr.l 1a8cc <overRegion>
            FreeVec(killMe);
   152bc:	|  |  |  \-> move.l 8(sp),4(sp)
   152c2:	|  |  |      move.l 1a7a4 <SysBase>,d0
   152c8:	|  |  |      movea.l d0,a6
   152ca:	|  |  |      movea.l 4(sp),a1
   152ce:	|  |  |      jsr -690(a6)
            killMe = NULL;
   152d2:	|  |  |      clr.l 8(sp)
   152d6:	|  +--|----- bra.s 152e6 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   152d8:	|  |  \----> movea.l 12(sp),a0
   152dc:	|  |         move.l (a0),d0
   152de:	|  |         moveq #32,d1
   152e0:	|  |         add.l d0,d1
   152e2:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   152e6:	|  \-------> movea.l 12(sp),a0
   152ea:	|            move.l (a0),d0
   152ec:	\----------- bne.s 1526e <removeScreenRegion+0x10>
        }
    }
}
   152ee:	             nop
   152f0:	             nop
   152f2:	             movea.l (sp)+,a6
   152f4:	             lea 12(sp),sp
   152f8:	             rts

000152fa <saveRegions>:

void saveRegions (BPTR fp) {
   152fa:	       subq.l #8,sp
	int numRegions = 0;
   152fc:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15300:	       move.l 1a8c8 <allScreenRegions>,(sp)
	while (thisRegion) {
   15306:	   /-- bra.s 15312 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15308:	/--|-> movea.l (sp),a0
   1530a:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   1530e:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15312:	|  \-> tst.l (sp)
   15314:	\----- bne.s 15308 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15316:	       move.l 12(sp),-(sp)
   1531a:	       move.l 8(sp),-(sp)
   1531e:	       jsr 8d0 <put2bytes>
   15324:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15326:	       move.l 1a8c8 <allScreenRegions>,(sp)
	while (thisRegion) {
   1532c:	/----- bra.w 153d4 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15330:	|  /-> movea.l (sp),a0
   15332:	|  |   move.l (a0),d0
   15334:	|  |   move.l 12(sp),-(sp)
   15338:	|  |   move.l d0,-(sp)
   1533a:	|  |   jsr 8d0 <put2bytes>
   15340:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15342:	|  |   movea.l (sp),a0
   15344:	|  |   move.l 4(a0),d0
   15348:	|  |   move.l 12(sp),-(sp)
   1534c:	|  |   move.l d0,-(sp)
   1534e:	|  |   jsr 8d0 <put2bytes>
   15354:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15356:	|  |   movea.l (sp),a0
   15358:	|  |   move.l 8(a0),d0
   1535c:	|  |   move.l 12(sp),-(sp)
   15360:	|  |   move.l d0,-(sp)
   15362:	|  |   jsr 8d0 <put2bytes>
   15368:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   1536a:	|  |   movea.l (sp),a0
   1536c:	|  |   move.l 12(a0),d0
   15370:	|  |   move.l 12(sp),-(sp)
   15374:	|  |   move.l d0,-(sp)
   15376:	|  |   jsr 8d0 <put2bytes>
   1537c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   1537e:	|  |   movea.l (sp),a0
   15380:	|  |   move.l 16(a0),d0
   15384:	|  |   move.l 12(sp),-(sp)
   15388:	|  |   move.l d0,-(sp)
   1538a:	|  |   jsr 8d0 <put2bytes>
   15390:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15392:	|  |   movea.l (sp),a0
   15394:	|  |   move.l 20(a0),d0
   15398:	|  |   move.l 12(sp),-(sp)
   1539c:	|  |   move.l d0,-(sp)
   1539e:	|  |   jsr 8d0 <put2bytes>
   153a4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   153a6:	|  |   movea.l (sp),a0
   153a8:	|  |   move.l 24(a0),d0
   153ac:	|  |   move.l 12(sp),-(sp)
   153b0:	|  |   move.l d0,-(sp)
   153b2:	|  |   jsr 8d0 <put2bytes>
   153b8:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   153ba:	|  |   movea.l (sp),a0
   153bc:	|  |   move.l 28(a0),d0
   153c0:	|  |   move.l 12(sp),-(sp)
   153c4:	|  |   move.l d0,-(sp)
   153c6:	|  |   jsr d048 <saveObjectRef>
   153cc:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   153ce:	|  |   movea.l (sp),a0
   153d0:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   153d4:	\--|-> tst.l (sp)
   153d6:	   \-- bne.w 15330 <saveRegions+0x36>
	}
}
   153da:	       nop
   153dc:	       nop
   153de:	       addq.l #8,sp
   153e0:	       rts

000153e2 <showBoxes>:

void showBoxes () {
   153e2:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   153e4:	       move.l 1a8c8 <allScreenRegions>,(sp)

	while (huntRegion) {
   153ea:	/----- bra.w 15486 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   153ee:	|  /-> movea.l (sp),a0
   153f0:	|  |   move.l 12(a0),d0
   153f4:	|  |   movea.l d0,a1
   153f6:	|  |   movea.l (sp),a0
   153f8:	|  |   move.l 4(a0),d0
   153fc:	|  |   move.l d0,d1
   153fe:	|  |   movea.l (sp),a0
   15400:	|  |   move.l (a0),d0
   15402:	|  |   move.l a1,-(sp)
   15404:	|  |   move.l d1,-(sp)
   15406:	|  |   move.l d0,-(sp)
   15408:	|  |   jsr c92c <drawVerticalLine>
   1540e:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15412:	|  |   movea.l (sp),a0
   15414:	|  |   move.l 12(a0),d0
   15418:	|  |   movea.l d0,a1
   1541a:	|  |   movea.l (sp),a0
   1541c:	|  |   move.l 4(a0),d0
   15420:	|  |   move.l d0,d1
   15422:	|  |   movea.l (sp),a0
   15424:	|  |   move.l 8(a0),d0
   15428:	|  |   move.l a1,-(sp)
   1542a:	|  |   move.l d1,-(sp)
   1542c:	|  |   move.l d0,-(sp)
   1542e:	|  |   jsr c92c <drawVerticalLine>
   15434:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15438:	|  |   movea.l (sp),a0
   1543a:	|  |   move.l 8(a0),d0
   1543e:	|  |   movea.l d0,a1
   15440:	|  |   movea.l (sp),a0
   15442:	|  |   move.l 4(a0),d0
   15446:	|  |   move.l d0,d1
   15448:	|  |   movea.l (sp),a0
   1544a:	|  |   move.l (a0),d0
   1544c:	|  |   move.l a1,-(sp)
   1544e:	|  |   move.l d1,-(sp)
   15450:	|  |   move.l d0,-(sp)
   15452:	|  |   jsr c906 <drawHorizontalLine>
   15458:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   1545c:	|  |   movea.l (sp),a0
   1545e:	|  |   move.l 8(a0),d0
   15462:	|  |   movea.l d0,a1
   15464:	|  |   movea.l (sp),a0
   15466:	|  |   move.l 12(a0),d0
   1546a:	|  |   move.l d0,d1
   1546c:	|  |   movea.l (sp),a0
   1546e:	|  |   move.l (a0),d0
   15470:	|  |   move.l a1,-(sp)
   15472:	|  |   move.l d1,-(sp)
   15474:	|  |   move.l d0,-(sp)
   15476:	|  |   jsr c906 <drawHorizontalLine>
   1547c:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15480:	|  |   movea.l (sp),a0
   15482:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15486:	\--|-> tst.l (sp)
   15488:	   \-- bne.w 153ee <showBoxes+0xc>
	}
   1548c:	       nop
   1548e:	       nop
   15490:	       addq.l #4,sp
   15492:	       rts

00015494 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15494:	       lea -88(sp),sp
   15498:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   1549a:	       move.l 1a7a4 <SysBase>,d0
   154a0:	       movea.l d0,a6
   154a2:	       jsr -666(a6)
   154a6:	       move.l d0,88(sp)
   154aa:	       move.l 88(sp),d0
   154ae:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   154b2:	       move.l 84(sp),80(sp)
   154b8:	       moveq #40,d0
   154ba:	       move.l d0,76(sp)
   154be:	       move.l 1a7a4 <SysBase>,d0
   154c4:	       movea.l d0,a6
   154c6:	       movea.l 80(sp),a0
   154ca:	       move.l 76(sp),d0
   154ce:	       jsr -654(a6)
   154d2:	       move.l d0,72(sp)
   154d6:	       move.l 72(sp),d0
   154da:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   154de:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   154e4:	       move.l #104045,60(sp)
   154ec:	       clr.l 56(sp)
   154f0:	       move.l 64(sp),52(sp)
   154f6:	       clr.l 48(sp)
   154fa:	       move.l 1a7a4 <SysBase>,d0
   15500:	       movea.l d0,a6
   15502:	       movea.l 60(sp),a0
   15506:	       move.l 56(sp),d0
   1550a:	       movea.l 52(sp),a1
   1550e:	       move.l 48(sp),d1
   15512:	       jsr -444(a6)
   15516:	       move.b d0,47(sp)
   1551a:	       move.b 47(sp),d0
   1551e:	   /-- beq.s 15534 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15520:	   |   pea 1967a <newfatal.c.307beca7+0x1b6>
   15526:	   |   jsr 16894 <KPrintF>
   1552c:	   |   addq.l #4,sp
        return 0;
   1552e:	   |   moveq #0,d0
   15530:	/--|-- bra.w 155ee <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15534:	|  \-> movea.l 64(sp),a0
   15538:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   1553e:	|      lea 92(sp),a0
   15542:	|      lea -86(a0),a0
   15546:	|      move.l a0,38(sp)
   1554a:	|      movea.l 42(sp),a6
   1554e:	|      movea.l 38(sp),a0
   15552:	|      jsr -60(a6)
   15556:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   1555a:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15560:	|      move.l #1103515245,-(sp)
   15566:	|      move.l 34(sp),-(sp)
   1556a:	|      jsr 17252 <__mulsi3>
   15570:	|      addq.l #8,sp
   15572:	|      addi.l #12345,d0
   15578:	|      move.l d0,d1
   1557a:	|      bclr #31,d1
   1557e:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15582:	|      move.l 30(sp),d0
   15586:	|      pea 64 <_start+0x64>
   1558a:	|      move.l d0,-(sp)
   1558c:	|      jsr 1732c <__umodsi3>
   15592:	|      addq.l #8,sp
   15594:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15598:	|      move.l 26(sp),-(sp)
   1559c:	|      pea 19697 <newfatal.c.307beca7+0x1d3>
   155a2:	|      jsr 16894 <KPrintF>
   155a8:	|      addq.l #8,sp

    CloseDevice(ioreq);
   155aa:	|      move.l 64(sp),22(sp)
   155b0:	|      move.l 1a7a4 <SysBase>,d0
   155b6:	|      movea.l d0,a6
   155b8:	|      movea.l 22(sp),a1
   155bc:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   155c0:	|      move.l 64(sp),18(sp)
   155c6:	|      move.l 1a7a4 <SysBase>,d0
   155cc:	|      movea.l d0,a6
   155ce:	|      movea.l 18(sp),a0
   155d2:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   155d6:	|      move.l 84(sp),14(sp)
   155dc:	|      move.l 1a7a4 <SysBase>,d0
   155e2:	|      movea.l d0,a6
   155e4:	|      movea.l 14(sp),a0
   155e8:	|      jsr -672(a6)
    return 0;
   155ec:	|      moveq #0,d0
   155ee:	\----> movea.l (sp)+,a6
   155f0:	       lea 88(sp),sp
   155f4:	       rts

000155f6 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   155f6:	             lea -20(sp),sp
   155fa:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   155fc:	             move.l 1a8d0 <allLoadedBanks>,20(sp)
	while (returnMe) {
   15604:	      /----- bra.s 15636 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15606:	   /--|----> movea.l 20(sp),a0
   1560a:	   |  |      move.l (a0),d0
   1560c:	   |  |      cmp.l 28(sp),d0
   15610:	   |  |  /-- bne.s 1562c <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15612:	   |  |  |   movea.l 20(sp),a0
   15616:	   |  |  |   move.l 4(a0),d0
   1561a:	   |  |  |   addq.l #1,d0
   1561c:	   |  |  |   movea.l 20(sp),a0
   15620:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15624:	   |  |  |   move.l 20(sp),d0
   15628:	/--|--|--|-- bra.w 156ec <loadBankForAnim+0xf6>
		}		
		returnMe = returnMe->next;
   1562c:	|  |  |  \-> movea.l 20(sp),a0
   15630:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15636:	|  |  \----> tst.l 20(sp)
   1563a:	|  \-------- bne.s 15606 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   1563c:	|            moveq #26,d0
   1563e:	|            move.l d0,16(sp)
   15642:	|            clr.l 12(sp)
   15646:	|            move.l 1a7a4 <SysBase>,d0
   1564c:	|            movea.l d0,a6
   1564e:	|            move.l 16(sp),d0
   15652:	|            move.l 12(sp),d1
   15656:	|            jsr -684(a6)
   1565a:	|            move.l d0,8(sp)
   1565e:	|            move.l 8(sp),d0
   15662:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15666:	|     /----- beq.w 156ea <loadBankForAnim+0xf4>
		returnMe->ID = ID;
   1566a:	|     |      movea.l 20(sp),a0
   1566e:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
   15672:	|     |      move.l 20(sp),d0
   15676:	|     |      addq.l #8,d0
   15678:	|     |      clr.l -(sp)
   1567a:	|     |      move.l d0,-(sp)
   1567c:	|     |      move.l 36(sp),-(sp)
   15680:	|     |      jsr 8300 <loadSpriteBank>
   15686:	|     |      lea 12(sp),sp
   1568a:	|     |      tst.w d0
   1568c:	|     |  /-- beq.s 156c2 <loadBankForAnim+0xcc>
			returnMe->timesUsed = 1;
   1568e:	|     |  |   movea.l 20(sp),a0
   15692:	|     |  |   moveq #1,d0
   15694:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   15698:	|     |  |   move.l 1a8d0 <allLoadedBanks>,d0
   1569e:	|     |  |   movea.l 20(sp),a0
   156a2:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   156a6:	|     |  |   move.l 20(sp),1a8d0 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   156ae:	|     |  |   pea 196aa <newfatal.c.307beca7+0x1e6>
   156b4:	|     |  |   jsr 16894 <KPrintF>
   156ba:	|     |  |   addq.l #4,sp
			return returnMe;
   156bc:	|     |  |   move.l 20(sp),d0
   156c0:	+-----|--|-- bra.s 156ec <loadBankForAnim+0xf6>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   156c2:	|     |  \-> pea 196d7 <main_sludge.c.0270f7ba+0x15>
   156c8:	|     |      jsr 16894 <KPrintF>
   156ce:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   156d0:	|     |      move.l 20(sp),4(sp)
   156d6:	|     |      move.l 1a7a4 <SysBase>,d0
   156dc:	|     |      movea.l d0,a6
   156de:	|     |      movea.l 4(sp),a1
   156e2:	|     |      jsr -690(a6)
			return NULL;
   156e6:	|     |      moveq #0,d0
   156e8:	+-----|----- bra.s 156ec <loadBankForAnim+0xf6>
		}
	} else return NULL;
   156ea:	|     \----> moveq #0,d0
}
   156ec:	\----------> movea.l (sp)+,a6
   156ee:	             lea 20(sp),sp
   156f2:	             rts

000156f4 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   156f4:	       lea -32(sp),sp
   156f8:	       move.l d3,-(sp)
   156fa:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   156fc:	       move.l 60(sp),d0
   15700:	       sub.l 52(sp),d0
   15704:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   15708:	       move.l 64(sp),d0
   1570c:	       sub.l 56(sp),d0
   15710:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   15714:	       move.l 68(sp),d0
   15718:	       sub.l 52(sp),d0
   1571c:	       move.l 36(sp),-(sp)
   15720:	       move.l d0,-(sp)
   15722:	       jsr 17252 <__mulsi3>
   15728:	       addq.l #8,sp
   1572a:	       move.l d0,d2
   1572c:	       move.l 72(sp),d0
   15730:	       sub.l 56(sp),d0
   15734:	       move.l 32(sp),-(sp)
   15738:	       move.l d0,-(sp)
   1573a:	       jsr 17252 <__mulsi3>
   15740:	       addq.l #8,sp
   15742:	       add.l d2,d0
   15744:	       move.l d0,-(sp)
   15746:	       jsr 16c90 <__floatsidf>
   1574c:	       addq.l #4,sp
   1574e:	       move.l d0,16(sp)
   15752:	       move.l d1,20(sp)
   15756:	       move.l 16(sp),24(sp)
   1575c:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   15762:	       move.l 36(sp),-(sp)
   15766:	       move.l 40(sp),-(sp)
   1576a:	       jsr 17252 <__mulsi3>
   15770:	       addq.l #8,sp
   15772:	       move.l d0,d2
   15774:	       move.l 32(sp),-(sp)
   15778:	       move.l 36(sp),-(sp)
   1577c:	       jsr 17252 <__mulsi3>
   15782:	       addq.l #8,sp
   15784:	       add.l d2,d0
   15786:	       move.l d0,-(sp)
   15788:	       jsr 16c90 <__floatsidf>
   1578e:	       addq.l #4,sp
   15790:	       move.l d1,-(sp)
   15792:	       move.l d0,-(sp)
   15794:	       move.l 36(sp),-(sp)
   15798:	       move.l 36(sp),-(sp)
   1579c:	       jsr 16b1a <__divdf3>
   157a2:	       lea 16(sp),sp
   157a6:	       move.l d0,8(sp)
   157aa:	       move.l d1,12(sp)
   157ae:	       move.l 8(sp),24(sp)
   157b4:	       move.l 12(sp),28(sp)

	if (m < 0) {
   157ba:	       clr.l -(sp)
   157bc:	       clr.l -(sp)
   157be:	       move.l 36(sp),-(sp)
   157c2:	       move.l 36(sp),-(sp)
   157c6:	       jsr 16ea8 <__ltdf2>
   157cc:	       lea 16(sp),sp
   157d0:	       tst.l d0
   157d2:	   /-- bge.s 157e8 <closestPointOnLine+0xf4>
		*closestX = x1;
   157d4:	   |   movea.l 44(sp),a0
   157d8:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   157dc:	   |   movea.l 48(sp),a0
   157e0:	   |   move.l 56(sp),(a0)
   157e4:	/--|-- bra.w 158ca <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   157e8:	|  \-> clr.l -(sp)
   157ea:	|      move.l #1072693248,-(sp)
   157f0:	|      move.l 36(sp),-(sp)
   157f4:	|      move.l 36(sp),-(sp)
   157f8:	|      jsr 16dee <__gtdf2>
   157fe:	|      lea 16(sp),sp
   15802:	|      tst.l d0
   15804:	|  /-- ble.s 1581a <closestPointOnLine+0x126>
		*closestX = x2;
   15806:	|  |   movea.l 44(sp),a0
   1580a:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   1580e:	|  |   movea.l 48(sp),a0
   15812:	|  |   move.l 64(sp),(a0)
   15816:	+--|-- bra.w 158ca <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   1581a:	|  \-> move.l 52(sp),-(sp)
   1581e:	|      jsr 16c90 <__floatsidf>
   15824:	|      addq.l #4,sp
   15826:	|      move.l d0,d2
   15828:	|      move.l d1,d3
   1582a:	|      move.l 36(sp),-(sp)
   1582e:	|      jsr 16c90 <__floatsidf>
   15834:	|      addq.l #4,sp
   15836:	|      move.l 28(sp),-(sp)
   1583a:	|      move.l 28(sp),-(sp)
   1583e:	|      move.l d1,-(sp)
   15840:	|      move.l d0,-(sp)
   15842:	|      jsr 16d20 <__muldf3>
   15848:	|      lea 16(sp),sp
   1584c:	|      move.l d1,-(sp)
   1584e:	|      move.l d0,-(sp)
   15850:	|      move.l d3,-(sp)
   15852:	|      move.l d2,-(sp)
   15854:	|      jsr 16ab8 <__adddf3>
   1585a:	|      lea 16(sp),sp
   1585e:	|      move.l d1,-(sp)
   15860:	|      move.l d0,-(sp)
   15862:	|      jsr 16c28 <__fixdfsi>
   15868:	|      addq.l #8,sp
   1586a:	|      movea.l 44(sp),a0
   1586e:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   15870:	|      move.l 56(sp),-(sp)
   15874:	|      jsr 16c90 <__floatsidf>
   1587a:	|      addq.l #4,sp
   1587c:	|      move.l d0,d2
   1587e:	|      move.l d1,d3
   15880:	|      move.l 32(sp),-(sp)
   15884:	|      jsr 16c90 <__floatsidf>
   1588a:	|      addq.l #4,sp
   1588c:	|      move.l 28(sp),-(sp)
   15890:	|      move.l 28(sp),-(sp)
   15894:	|      move.l d1,-(sp)
   15896:	|      move.l d0,-(sp)
   15898:	|      jsr 16d20 <__muldf3>
   1589e:	|      lea 16(sp),sp
   158a2:	|      move.l d1,-(sp)
   158a4:	|      move.l d0,-(sp)
   158a6:	|      move.l d3,-(sp)
   158a8:	|      move.l d2,-(sp)
   158aa:	|      jsr 16ab8 <__adddf3>
   158b0:	|      lea 16(sp),sp
   158b4:	|      move.l d1,-(sp)
   158b6:	|      move.l d0,-(sp)
   158b8:	|      jsr 16c28 <__fixdfsi>
   158be:	|      addq.l #8,sp
   158c0:	|      movea.l 48(sp),a0
   158c4:	|      move.l d0,(a0)
		return TRUE;
   158c6:	|      moveq #1,d0
   158c8:	|  /-- bra.s 158cc <closestPointOnLine+0x1d8>
	}
	return FALSE;
   158ca:	\--|-> clr.w d0
}
   158cc:	   \-> move.l (sp)+,d2
   158ce:	       move.l (sp)+,d3
   158d0:	       lea 32(sp),sp
   158d4:	       rts

000158d6 <drawFloor>:

void drawFloor() {
   158d6:	                lea -12(sp),sp
   158da:	                move.l d3,-(sp)
   158dc:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   158de:	                clr.l 16(sp)
   158e2:	   /----------- bra.w 15af6 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   158e6:	/--|----------> movea.l 1a8d4 <currentFloor>,a0
   158ec:	|  |            move.l 12(a0),d1
   158f0:	|  |            move.l 16(sp),d0
   158f4:	|  |            lsl.l #3,d0
   158f6:	|  |            movea.l d1,a0
   158f8:	|  |            adda.l d0,a0
   158fa:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   158fe:	|  |            moveq #1,d0
   15900:	|  |            cmp.l 8(sp),d0
   15904:	|  |  /-------- bge.w 15af2 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   15908:	|  |  |         moveq #1,d0
   1590a:	|  |  |         move.l d0,12(sp)
   1590e:	|  |  |     /-- bra.w 15a08 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   15912:	|  |  |  /--|-> movea.l 1a8d4 <currentFloor>,a0
   15918:	|  |  |  |  |   move.l 4(a0),d1
   1591c:	|  |  |  |  |   movea.l 1a8d4 <currentFloor>,a0
   15922:	|  |  |  |  |   movea.l 12(a0),a0
   15926:	|  |  |  |  |   move.l 16(sp),d0
   1592a:	|  |  |  |  |   lsl.l #3,d0
   1592c:	|  |  |  |  |   adda.l d0,a0
   1592e:	|  |  |  |  |   movea.l 4(a0),a0
   15932:	|  |  |  |  |   move.l 12(sp),d0
   15936:	|  |  |  |  |   add.l d0,d0
   15938:	|  |  |  |  |   add.l d0,d0
   1593a:	|  |  |  |  |   adda.l d0,a0
   1593c:	|  |  |  |  |   move.l (a0),d0
   1593e:	|  |  |  |  |   lsl.l #3,d0
   15940:	|  |  |  |  |   movea.l d1,a0
   15942:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   15944:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   15948:	|  |  |  |  |   movea.l 1a8d4 <currentFloor>,a0
   1594e:	|  |  |  |  |   move.l 4(a0),d1
   15952:	|  |  |  |  |   movea.l 1a8d4 <currentFloor>,a0
   15958:	|  |  |  |  |   movea.l 12(a0),a0
   1595c:	|  |  |  |  |   move.l 16(sp),d0
   15960:	|  |  |  |  |   lsl.l #3,d0
   15962:	|  |  |  |  |   adda.l d0,a0
   15964:	|  |  |  |  |   movea.l 4(a0),a0
   15968:	|  |  |  |  |   move.l 12(sp),d0
   1596c:	|  |  |  |  |   add.l d0,d0
   1596e:	|  |  |  |  |   add.l d0,d0
   15970:	|  |  |  |  |   adda.l d0,a0
   15972:	|  |  |  |  |   move.l (a0),d0
   15974:	|  |  |  |  |   lsl.l #3,d0
   15976:	|  |  |  |  |   movea.l d1,a0
   15978:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1597a:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1597c:	|  |  |  |  |   movea.l 1a8d4 <currentFloor>,a0
   15982:	|  |  |  |  |   move.l 4(a0),d1
   15986:	|  |  |  |  |   movea.l 1a8d4 <currentFloor>,a0
   1598c:	|  |  |  |  |   movea.l 12(a0),a0
   15990:	|  |  |  |  |   move.l 16(sp),d0
   15994:	|  |  |  |  |   lsl.l #3,d0
   15996:	|  |  |  |  |   adda.l d0,a0
   15998:	|  |  |  |  |   movea.l 4(a0),a0
   1599c:	|  |  |  |  |   move.l 12(sp),d0
   159a0:	|  |  |  |  |   addi.l #1073741823,d0
   159a6:	|  |  |  |  |   add.l d0,d0
   159a8:	|  |  |  |  |   add.l d0,d0
   159aa:	|  |  |  |  |   adda.l d0,a0
   159ac:	|  |  |  |  |   move.l (a0),d0
   159ae:	|  |  |  |  |   lsl.l #3,d0
   159b0:	|  |  |  |  |   movea.l d1,a0
   159b2:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   159b4:	|  |  |  |  |   move.l 4(a0),d1
   159b8:	|  |  |  |  |   movea.l 1a8d4 <currentFloor>,a0
   159be:	|  |  |  |  |   move.l 4(a0),d3
   159c2:	|  |  |  |  |   movea.l 1a8d4 <currentFloor>,a0
   159c8:	|  |  |  |  |   movea.l 12(a0),a0
   159cc:	|  |  |  |  |   move.l 16(sp),d0
   159d0:	|  |  |  |  |   lsl.l #3,d0
   159d2:	|  |  |  |  |   adda.l d0,a0
   159d4:	|  |  |  |  |   movea.l 4(a0),a0
   159d8:	|  |  |  |  |   move.l 12(sp),d0
   159dc:	|  |  |  |  |   addi.l #1073741823,d0
   159e2:	|  |  |  |  |   add.l d0,d0
   159e4:	|  |  |  |  |   add.l d0,d0
   159e6:	|  |  |  |  |   adda.l d0,a0
   159e8:	|  |  |  |  |   move.l (a0),d0
   159ea:	|  |  |  |  |   lsl.l #3,d0
   159ec:	|  |  |  |  |   movea.l d3,a0
   159ee:	|  |  |  |  |   adda.l d0,a0
   159f0:	|  |  |  |  |   move.l (a0),d0
   159f2:	|  |  |  |  |   move.l d2,-(sp)
   159f4:	|  |  |  |  |   move.l a1,-(sp)
   159f6:	|  |  |  |  |   move.l d1,-(sp)
   159f8:	|  |  |  |  |   move.l d0,-(sp)
   159fa:	|  |  |  |  |   jsr 374a <drawLine>
   15a00:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   15a04:	|  |  |  |  |   addq.l #1,12(sp)
   15a08:	|  |  |  |  \-> move.l 12(sp),d0
   15a0c:	|  |  |  |      cmp.l 8(sp),d0
   15a10:	|  |  |  \----- blt.w 15912 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   15a14:	|  |  |         movea.l 1a8d4 <currentFloor>,a0
   15a1a:	|  |  |         move.l 4(a0),d1
   15a1e:	|  |  |         movea.l 1a8d4 <currentFloor>,a0
   15a24:	|  |  |         movea.l 12(a0),a0
   15a28:	|  |  |         move.l 16(sp),d0
   15a2c:	|  |  |         lsl.l #3,d0
   15a2e:	|  |  |         adda.l d0,a0
   15a30:	|  |  |         movea.l 4(a0),a0
   15a34:	|  |  |         move.l 8(sp),d0
   15a38:	|  |  |         addi.l #1073741823,d0
   15a3e:	|  |  |         add.l d0,d0
   15a40:	|  |  |         add.l d0,d0
   15a42:	|  |  |         adda.l d0,a0
   15a44:	|  |  |         move.l (a0),d0
   15a46:	|  |  |         lsl.l #3,d0
   15a48:	|  |  |         movea.l d1,a0
   15a4a:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   15a4c:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   15a50:	|  |  |         movea.l 1a8d4 <currentFloor>,a0
   15a56:	|  |  |         move.l 4(a0),d1
   15a5a:	|  |  |         movea.l 1a8d4 <currentFloor>,a0
   15a60:	|  |  |         movea.l 12(a0),a0
   15a64:	|  |  |         move.l 16(sp),d0
   15a68:	|  |  |         lsl.l #3,d0
   15a6a:	|  |  |         adda.l d0,a0
   15a6c:	|  |  |         movea.l 4(a0),a0
   15a70:	|  |  |         move.l 8(sp),d0
   15a74:	|  |  |         addi.l #1073741823,d0
   15a7a:	|  |  |         add.l d0,d0
   15a7c:	|  |  |         add.l d0,d0
   15a7e:	|  |  |         adda.l d0,a0
   15a80:	|  |  |         move.l (a0),d0
   15a82:	|  |  |         lsl.l #3,d0
   15a84:	|  |  |         movea.l d1,a0
   15a86:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   15a88:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   15a8a:	|  |  |         movea.l 1a8d4 <currentFloor>,a0
   15a90:	|  |  |         move.l 4(a0),d1
   15a94:	|  |  |         movea.l 1a8d4 <currentFloor>,a0
   15a9a:	|  |  |         movea.l 12(a0),a0
   15a9e:	|  |  |         move.l 16(sp),d0
   15aa2:	|  |  |         lsl.l #3,d0
   15aa4:	|  |  |         adda.l d0,a0
   15aa6:	|  |  |         movea.l 4(a0),a0
   15aaa:	|  |  |         move.l (a0),d0
   15aac:	|  |  |         lsl.l #3,d0
   15aae:	|  |  |         movea.l d1,a0
   15ab0:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   15ab2:	|  |  |         move.l 4(a0),d1
   15ab6:	|  |  |         movea.l 1a8d4 <currentFloor>,a0
   15abc:	|  |  |         move.l 4(a0),d3
   15ac0:	|  |  |         movea.l 1a8d4 <currentFloor>,a0
   15ac6:	|  |  |         movea.l 12(a0),a0
   15aca:	|  |  |         move.l 16(sp),d0
   15ace:	|  |  |         lsl.l #3,d0
   15ad0:	|  |  |         adda.l d0,a0
   15ad2:	|  |  |         movea.l 4(a0),a0
   15ad6:	|  |  |         move.l (a0),d0
   15ad8:	|  |  |         lsl.l #3,d0
   15ada:	|  |  |         movea.l d3,a0
   15adc:	|  |  |         adda.l d0,a0
   15ade:	|  |  |         move.l (a0),d0
   15ae0:	|  |  |         move.l d2,-(sp)
   15ae2:	|  |  |         move.l a1,-(sp)
   15ae4:	|  |  |         move.l d1,-(sp)
   15ae6:	|  |  |         move.l d0,-(sp)
   15ae8:	|  |  |         jsr 374a <drawLine>
   15aee:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   15af2:	|  |  \-------> addq.l #1,16(sp)
   15af6:	|  \----------> movea.l 1a8d4 <currentFloor>,a0
   15afc:	|               move.l 8(a0),d0
   15b00:	|               cmp.l 16(sp),d0
   15b04:	\-------------- bgt.w 158e6 <drawFloor+0x10>
        }
    }
}
   15b08:	                nop
   15b0a:	                nop
   15b0c:	                move.l (sp)+,d2
   15b0e:	                move.l (sp)+,d3
   15b10:	                lea 12(sp),sp
   15b14:	                rts

00015b16 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   15b16:	                      lea -12(sp),sp
    int sharedVertices = 0;
   15b1a:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   15b1e:	                      clr.l 4(sp)
   15b22:	   /----------------- bra.w 15bb4 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   15b26:	/--|----------------> clr.l (sp)
   15b28:	|  |     /----------- bra.s 15ba4 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   15b2a:	|  |  /--|----------> movea.l 16(sp),a0
   15b2e:	|  |  |  |            move.l 4(a0),d1
   15b32:	|  |  |  |            move.l 4(sp),d0
   15b36:	|  |  |  |            add.l d0,d0
   15b38:	|  |  |  |            add.l d0,d0
   15b3a:	|  |  |  |            movea.l d1,a0
   15b3c:	|  |  |  |            adda.l d0,a0
   15b3e:	|  |  |  |            move.l (a0),d1
   15b40:	|  |  |  |            movea.l 20(sp),a0
   15b44:	|  |  |  |            movea.l 4(a0),a0
   15b48:	|  |  |  |            move.l (sp),d0
   15b4a:	|  |  |  |            add.l d0,d0
   15b4c:	|  |  |  |            add.l d0,d0
   15b4e:	|  |  |  |            adda.l d0,a0
   15b50:	|  |  |  |            move.l (a0),d0
   15b52:	|  |  |  |            cmp.l d1,d0
   15b54:	|  |  |  |  /-------- bne.s 15ba2 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   15b56:	|  |  |  |  |         move.l 8(sp),d0
   15b5a:	|  |  |  |  |         move.l d0,d1
   15b5c:	|  |  |  |  |         addq.l #1,d1
   15b5e:	|  |  |  |  |         move.l d1,8(sp)
   15b62:	|  |  |  |  |         tst.l d0
   15b64:	|  |  |  |  |     /-- beq.s 15b86 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   15b66:	|  |  |  |  |     |   movea.l 16(sp),a0
   15b6a:	|  |  |  |  |     |   move.l 4(a0),d1
   15b6e:	|  |  |  |  |     |   move.l 4(sp),d0
   15b72:	|  |  |  |  |     |   add.l d0,d0
   15b74:	|  |  |  |  |     |   add.l d0,d0
   15b76:	|  |  |  |  |     |   movea.l d1,a0
   15b78:	|  |  |  |  |     |   adda.l d0,a0
   15b7a:	|  |  |  |  |     |   move.l (a0),d0
   15b7c:	|  |  |  |  |     |   movea.l 28(sp),a0
   15b80:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   15b82:	|  |  |  |  |     |   moveq #1,d0
   15b84:	|  |  |  |  |  /--|-- bra.s 15bc4 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   15b86:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   15b8a:	|  |  |  |  |  |      move.l 4(a0),d1
   15b8e:	|  |  |  |  |  |      move.l 4(sp),d0
   15b92:	|  |  |  |  |  |      add.l d0,d0
   15b94:	|  |  |  |  |  |      add.l d0,d0
   15b96:	|  |  |  |  |  |      movea.l d1,a0
   15b98:	|  |  |  |  |  |      adda.l d0,a0
   15b9a:	|  |  |  |  |  |      move.l (a0),d0
   15b9c:	|  |  |  |  |  |      movea.l 24(sp),a0
   15ba0:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   15ba2:	|  |  |  |  \--|----> addq.l #1,(sp)
   15ba4:	|  |  |  \-----|----> movea.l 20(sp),a0
   15ba8:	|  |  |        |      move.l (a0),d0
   15baa:	|  |  |        |      cmp.l (sp),d0
   15bac:	|  |  \--------|----- bgt.w 15b2a <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   15bb0:	|  |           |      addq.l #1,4(sp)
   15bb4:	|  \-----------|----> movea.l 16(sp),a0
   15bb8:	|              |      move.l (a0),d0
   15bba:	|              |      cmp.l 4(sp),d0
   15bbe:	\--------------|----- bgt.w 15b26 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   15bc2:	               |      clr.w d0
}
   15bc4:	               \----> lea 12(sp),sp
   15bc8:	                      rts

00015bca <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   15bca:	movea.l 1a8d4 <currentFloor>,a0
   15bd0:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   15bd4:	movea.l 1a8d4 <currentFloor>,a0
   15bda:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   15bde:	movea.l 1a8d4 <currentFloor>,a0
   15be4:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   15be8:	movea.l 1a8d4 <currentFloor>,a0
   15bee:	clr.l 16(a0)
}
   15bf2:	nop
   15bf4:	rts

00015bf6 <inFloor>:

int inFloor (int x, int y) {
   15bf6:	          subq.l #8,sp
	int i, r = -1;
   15bf8:	          moveq #-1,d0
   15bfa:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   15bfc:	          clr.l 4(sp)
   15c00:	   /----- bra.s 15c34 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   15c02:	/--|----> movea.l 1a8d4 <currentFloor>,a0
   15c08:	|  |      move.l 12(a0),d1
   15c0c:	|  |      move.l 4(sp),d0
   15c10:	|  |      lsl.l #3,d0
   15c12:	|  |      add.l d1,d0
   15c14:	|  |      move.l 16(sp),-(sp)
   15c18:	|  |      move.l 16(sp),-(sp)
   15c1c:	|  |      move.l d0,-(sp)
   15c1e:	|  |      jsr 15e00 <pointInFloorPolygon>
   15c24:	|  |      lea 12(sp),sp
   15c28:	|  |      tst.w d0
   15c2a:	|  |  /-- beq.s 15c30 <inFloor+0x3a>
			r = i;
   15c2c:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   15c30:	|  |  \-> addq.l #1,4(sp)
   15c34:	|  \----> movea.l 1a8d4 <currentFloor>,a0
   15c3a:	|         move.l 8(a0),d0
   15c3e:	|         cmp.l 4(sp),d0
   15c42:	\-------- bgt.s 15c02 <inFloor+0xc>

	return r;
   15c44:	          move.l (sp),d0
}
   15c46:	          addq.l #8,sp
   15c48:	          rts

00015c4a <initFloor>:

BOOL initFloor () {
   15c4a:	       lea -12(sp),sp
   15c4e:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   15c50:	       moveq #20,d0
   15c52:	       move.l d0,12(sp)
   15c56:	       clr.l 8(sp)
   15c5a:	       move.l 1a7a4 <SysBase>,d0
   15c60:	       movea.l d0,a6
   15c62:	       move.l 12(sp),d0
   15c66:	       move.l 8(sp),d1
   15c6a:	       jsr -684(a6)
   15c6e:	       move.l d0,4(sp)
   15c72:	       move.l 4(sp),d0
   15c76:	       move.l d0,1a8d4 <currentFloor>

    if(currentFloor == 0) {
   15c7c:	       move.l 1a8d4 <currentFloor>,d0
   15c82:	/----- bne.s 15c96 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   15c84:	|      pea 19710 <main_sludge.c.0270f7ba+0x4e>
   15c8a:	|      jsr 16894 <KPrintF>
   15c90:	|      addq.l #4,sp
        return FALSE;
   15c92:	|      clr.w d0
   15c94:	|  /-- bra.s 15c9e <initFloor+0x54>
    }

	noFloor ();
   15c96:	\--|-> jsr 15bca <noFloor>
	return TRUE;
   15c9c:	   |   moveq #1,d0
}
   15c9e:	   \-> movea.l (sp)+,a6
   15ca0:	       lea 12(sp),sp
   15ca4:	       rts

00015ca6 <killFloor>:

void killFloor () {
   15ca6:	       lea -24(sp),sp
   15caa:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   15cac:	       clr.l 24(sp)
   15cb0:	   /-- bra.s 15d0a <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   15cb2:	/--|-> movea.l 1a8d4 <currentFloor>,a0
   15cb8:	|  |   move.l 12(a0),d1
   15cbc:	|  |   move.l 24(sp),d0
   15cc0:	|  |   lsl.l #3,d0
   15cc2:	|  |   movea.l d1,a0
   15cc4:	|  |   adda.l d0,a0
   15cc6:	|  |   move.l 4(a0),8(sp)
   15ccc:	|  |   move.l 1a7a4 <SysBase>,d0
   15cd2:	|  |   movea.l d0,a6
   15cd4:	|  |   movea.l 8(sp),a1
   15cd8:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   15cdc:	|  |   movea.l 1a8d4 <currentFloor>,a0
   15ce2:	|  |   move.l 16(a0),d1
   15ce6:	|  |   move.l 24(sp),d0
   15cea:	|  |   add.l d0,d0
   15cec:	|  |   add.l d0,d0
   15cee:	|  |   movea.l d1,a0
   15cf0:	|  |   adda.l d0,a0
   15cf2:	|  |   move.l (a0),4(sp)
   15cf6:	|  |   move.l 1a7a4 <SysBase>,d0
   15cfc:	|  |   movea.l d0,a6
   15cfe:	|  |   movea.l 4(sp),a1
   15d02:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   15d06:	|  |   addq.l #1,24(sp)
   15d0a:	|  \-> movea.l 1a8d4 <currentFloor>,a0
   15d10:	|      move.l 8(a0),d0
   15d14:	|      cmp.l 24(sp),d0
   15d18:	\----- bgt.s 15cb2 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   15d1a:	       movea.l 1a8d4 <currentFloor>,a0
   15d20:	       move.l 12(a0),20(sp)
   15d26:	       move.l 1a7a4 <SysBase>,d0
   15d2c:	       movea.l d0,a6
   15d2e:	       movea.l 20(sp),a1
   15d32:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   15d36:	       movea.l 1a8d4 <currentFloor>,a0
   15d3c:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   15d40:	       movea.l 1a8d4 <currentFloor>,a0
   15d46:	       move.l 4(a0),16(sp)
   15d4c:	       move.l 1a7a4 <SysBase>,d0
   15d52:	       movea.l d0,a6
   15d54:	       movea.l 16(sp),a1
   15d58:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   15d5c:	       movea.l 1a8d4 <currentFloor>,a0
   15d62:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   15d66:	       movea.l 1a8d4 <currentFloor>,a0
   15d6c:	       move.l 16(a0),12(sp)
   15d72:	       move.l 1a7a4 <SysBase>,d0
   15d78:	       movea.l d0,a6
   15d7a:	       movea.l 12(sp),a1
   15d7e:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   15d82:	       movea.l 1a8d4 <currentFloor>,a0
   15d88:	       clr.l 16(a0)
}
   15d8c:	       nop
   15d8e:	       movea.l (sp)+,a6
   15d90:	       lea 24(sp),sp
   15d94:	       rts

00015d96 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   15d96:	                   lea -12(sp),sp
	int sharedVertices = 0;
   15d9a:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   15d9e:	                   clr.l 4(sp)
   15da2:	   /-------------- bra.s 15dee <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   15da4:	/--|-------------> clr.l (sp)
   15da6:	|  |     /-------- bra.s 15de2 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   15da8:	|  |  /--|-------> move.l 20(sp),d1
   15dac:	|  |  |  |         move.l 4(sp),d0
   15db0:	|  |  |  |         add.l d0,d0
   15db2:	|  |  |  |         add.l d0,d0
   15db4:	|  |  |  |         movea.l d1,a0
   15db6:	|  |  |  |         adda.l d0,a0
   15db8:	|  |  |  |         move.l (a0),d1
   15dba:	|  |  |  |         movea.l 28(sp),a0
   15dbe:	|  |  |  |         move.l (sp),d0
   15dc0:	|  |  |  |         add.l d0,d0
   15dc2:	|  |  |  |         add.l d0,d0
   15dc4:	|  |  |  |         adda.l d0,a0
   15dc6:	|  |  |  |         move.l (a0),d0
   15dc8:	|  |  |  |         cmp.l d1,d0
   15dca:	|  |  |  |     /-- bne.s 15de0 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   15dcc:	|  |  |  |     |   move.l 8(sp),d0
   15dd0:	|  |  |  |     |   move.l d0,d1
   15dd2:	|  |  |  |     |   addq.l #1,d1
   15dd4:	|  |  |  |     |   move.l d1,8(sp)
   15dd8:	|  |  |  |     |   tst.l d0
   15dda:	|  |  |  |     +-- beq.s 15de0 <polysShareSide+0x4a>
   15ddc:	|  |  |  |     |   moveq #1,d0
   15dde:	|  |  |  |  /--|-- bra.s 15dfa <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   15de0:	|  |  |  |  |  \-> addq.l #1,(sp)
   15de2:	|  |  |  \--|----> move.l 24(sp),d0
   15de6:	|  |  |     |      cmp.l (sp),d0
   15de8:	|  |  \-----|----- bgt.s 15da8 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   15dea:	|  |        |      addq.l #1,4(sp)
   15dee:	|  \--------|----> move.l 16(sp),d0
   15df2:	|           |      cmp.l 4(sp),d0
   15df6:	\-----------|----- bgt.s 15da4 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   15df8:	            |      clr.w d0
}
   15dfa:	            \----> lea 12(sp),sp
   15dfe:	                   rts

00015e00 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   15e00:	             lea -28(sp),sp
   15e04:	             move.l d3,-(sp)
   15e06:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   15e08:	             clr.l 32(sp)
   15e0c:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   15e10:	             movea.l 40(sp),a0
   15e14:	             move.l (a0),d0
   15e16:	             move.l d0,d1
   15e18:	             subq.l #1,d1
   15e1a:	             move.l d1,28(sp)
   15e1e:	   /-------- bra.w 16018 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   15e22:	/--|-------> movea.l 1a8d4 <currentFloor>,a0
   15e28:	|  |         move.l 4(a0),d1
   15e2c:	|  |         movea.l 40(sp),a0
   15e30:	|  |         movea.l 4(a0),a0
   15e34:	|  |         move.l 32(sp),d0
   15e38:	|  |         add.l d0,d0
   15e3a:	|  |         add.l d0,d0
   15e3c:	|  |         adda.l d0,a0
   15e3e:	|  |         move.l (a0),d0
   15e40:	|  |         lsl.l #3,d0
   15e42:	|  |         movea.l d1,a0
   15e44:	|  |         adda.l d0,a0
   15e46:	|  |         move.l (a0),d0
   15e48:	|  |         move.l d0,-(sp)
   15e4a:	|  |         jsr 16cd0 <__floatsisf>
   15e50:	|  |         addq.l #4,sp
   15e52:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   15e56:	|  |         movea.l 1a8d4 <currentFloor>,a0
   15e5c:	|  |         move.l 4(a0),d1
   15e60:	|  |         movea.l 40(sp),a0
   15e64:	|  |         movea.l 4(a0),a0
   15e68:	|  |         move.l 32(sp),d0
   15e6c:	|  |         add.l d0,d0
   15e6e:	|  |         add.l d0,d0
   15e70:	|  |         adda.l d0,a0
   15e72:	|  |         move.l (a0),d0
   15e74:	|  |         lsl.l #3,d0
   15e76:	|  |         movea.l d1,a0
   15e78:	|  |         adda.l d0,a0
   15e7a:	|  |         move.l 4(a0),d0
   15e7e:	|  |         move.l d0,-(sp)
   15e80:	|  |         jsr 16cd0 <__floatsisf>
   15e86:	|  |         addq.l #4,sp
   15e88:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   15e8c:	|  |         movea.l 1a8d4 <currentFloor>,a0
   15e92:	|  |         move.l 4(a0),d1
   15e96:	|  |         movea.l 40(sp),a0
   15e9a:	|  |         movea.l 4(a0),a0
   15e9e:	|  |         move.l 28(sp),d0
   15ea2:	|  |         add.l d0,d0
   15ea4:	|  |         add.l d0,d0
   15ea6:	|  |         adda.l d0,a0
   15ea8:	|  |         move.l (a0),d0
   15eaa:	|  |         lsl.l #3,d0
   15eac:	|  |         movea.l d1,a0
   15eae:	|  |         adda.l d0,a0
   15eb0:	|  |         move.l (a0),d0
   15eb2:	|  |         move.l d0,-(sp)
   15eb4:	|  |         jsr 16cd0 <__floatsisf>
   15eba:	|  |         addq.l #4,sp
   15ebc:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   15ec0:	|  |         movea.l 1a8d4 <currentFloor>,a0
   15ec6:	|  |         move.l 4(a0),d1
   15eca:	|  |         movea.l 40(sp),a0
   15ece:	|  |         movea.l 4(a0),a0
   15ed2:	|  |         move.l 28(sp),d0
   15ed6:	|  |         add.l d0,d0
   15ed8:	|  |         add.l d0,d0
   15eda:	|  |         adda.l d0,a0
   15edc:	|  |         move.l (a0),d0
   15ede:	|  |         lsl.l #3,d0
   15ee0:	|  |         movea.l d1,a0
   15ee2:	|  |         adda.l d0,a0
   15ee4:	|  |         move.l 4(a0),d0
   15ee8:	|  |         move.l d0,-(sp)
   15eea:	|  |         jsr 16cd0 <__floatsisf>
   15ef0:	|  |         addq.l #4,sp
   15ef2:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   15ef6:	|  |         move.l 48(sp),-(sp)
   15efa:	|  |         jsr 16cd0 <__floatsisf>
   15f00:	|  |         addq.l #4,sp
   15f02:	|  |         move.l d0,-(sp)
   15f04:	|  |         move.l 20(sp),-(sp)
   15f08:	|  |         jsr 16e72 <__lesf2>
   15f0e:	|  |         addq.l #8,sp
   15f10:	|  |         tst.l d0
   15f12:	|  |     /-- bgt.s 15f32 <pointInFloorPolygon+0x132>
   15f14:	|  |     |   move.l 48(sp),-(sp)
   15f18:	|  |     |   jsr 16cd0 <__floatsisf>
   15f1e:	|  |     |   addq.l #4,sp
   15f20:	|  |     |   move.l d0,-(sp)
   15f22:	|  |     |   move.l 12(sp),-(sp)
   15f26:	|  |     |   jsr 16e3c <__gtsf2>
   15f2c:	|  |     |   addq.l #8,sp
   15f2e:	|  |     |   tst.l d0
   15f30:	|  |  /--|-- bgt.s 15f72 <pointInFloorPolygon+0x172>
   15f32:	|  |  |  \-> move.l 48(sp),-(sp)
   15f36:	|  |  |      jsr 16cd0 <__floatsisf>
   15f3c:	|  |  |      addq.l #4,sp
   15f3e:	|  |  |      move.l d0,-(sp)
   15f40:	|  |  |      move.l 12(sp),-(sp)
   15f44:	|  |  |      jsr 16e72 <__lesf2>
   15f4a:	|  |  |      addq.l #8,sp
   15f4c:	|  |  |      tst.l d0
   15f4e:	|  |  |  /-- bgt.w 16008 <pointInFloorPolygon+0x208>
   15f52:	|  |  |  |   move.l 48(sp),-(sp)
   15f56:	|  |  |  |   jsr 16cd0 <__floatsisf>
   15f5c:	|  |  |  |   addq.l #4,sp
   15f5e:	|  |  |  |   move.l d0,-(sp)
   15f60:	|  |  |  |   move.l 20(sp),-(sp)
   15f64:	|  |  |  |   jsr 16e3c <__gtsf2>
   15f6a:	|  |  |  |   addq.l #8,sp
   15f6c:	|  |  |  |   tst.l d0
   15f6e:	|  |  |  +-- ble.w 16008 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   15f72:	|  |  \--|-> move.l 44(sp),-(sp)
   15f76:	|  |     |   jsr 16cd0 <__floatsisf>
   15f7c:	|  |     |   addq.l #4,sp
   15f7e:	|  |     |   move.l d0,d3
   15f80:	|  |     |   move.l 20(sp),-(sp)
   15f84:	|  |     |   move.l 16(sp),-(sp)
   15f88:	|  |     |   jsr 16fc4 <__subsf3>
   15f8e:	|  |     |   addq.l #8,sp
   15f90:	|  |     |   move.l d0,d2
   15f92:	|  |     |   move.l 48(sp),-(sp)
   15f96:	|  |     |   jsr 16cd0 <__floatsisf>
   15f9c:	|  |     |   addq.l #4,sp
   15f9e:	|  |     |   move.l 16(sp),-(sp)
   15fa2:	|  |     |   move.l d0,-(sp)
   15fa4:	|  |     |   jsr 16fc4 <__subsf3>
   15faa:	|  |     |   addq.l #8,sp
   15fac:	|  |     |   move.l d0,-(sp)
   15fae:	|  |     |   move.l d2,-(sp)
   15fb0:	|  |     |   jsr 16d82 <__mulsf3>
   15fb6:	|  |     |   addq.l #8,sp
   15fb8:	|  |     |   move.l d0,d2
   15fba:	|  |     |   move.l 16(sp),-(sp)
   15fbe:	|  |     |   move.l 12(sp),-(sp)
   15fc2:	|  |     |   jsr 16fc4 <__subsf3>
   15fc8:	|  |     |   addq.l #8,sp
   15fca:	|  |     |   move.l d0,-(sp)
   15fcc:	|  |     |   move.l d2,-(sp)
   15fce:	|  |     |   jsr 16b7c <__divsf3>
   15fd4:	|  |     |   addq.l #8,sp
   15fd6:	|  |     |   move.l 20(sp),-(sp)
   15fda:	|  |     |   move.l d0,-(sp)
   15fdc:	|  |     |   jsr 16a82 <__addsf3>
   15fe2:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   15fe4:	|  |     |   move.l d0,-(sp)
   15fe6:	|  |     |   move.l d3,-(sp)
   15fe8:	|  |     |   jsr 16ef6 <__ltsf2>
   15fee:	|  |     |   addq.l #8,sp
   15ff0:	|  |     |   tst.l d0
   15ff2:	|  |     +-- bge.s 16008 <pointInFloorPolygon+0x208>

			c = !c;
   15ff4:	|  |     |   tst.l 24(sp)
   15ff8:	|  |     |   seq d0
   15ffa:	|  |     |   neg.b d0
   15ffc:	|  |     |   move.b d0,d0
   15ffe:	|  |     |   andi.l #255,d0
   16004:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16008:	|  |     \-> move.l 32(sp),d0
   1600c:	|  |         move.l d0,d1
   1600e:	|  |         addq.l #1,d1
   16010:	|  |         move.l d1,32(sp)
   16014:	|  |         move.l d0,28(sp)
   16018:	|  \-------> movea.l 40(sp),a0
   1601c:	|            move.l (a0),d0
   1601e:	|            cmp.l 32(sp),d0
   16022:	\----------- bgt.w 15e22 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16026:	             tst.l 24(sp)
   1602a:	             sne d0
   1602c:	             neg.b d0
   1602e:	             move.b d0,d0
   16030:	             andi.w #255,d0
}
   16034:	             move.l (sp)+,d2
   16036:	             move.l (sp)+,d3
   16038:	             lea 28(sp),sp
   1603c:	             rts

0001603e <setFloor>:

BOOL setFloor (int fileNum) {
   1603e:	                               lea -132(sp),sp
   16042:	                               move.l a6,-(sp)
   16044:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16046:	                               jsr 15ca6 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   1604c:	                               move.l 144(sp),-(sp)
   16050:	                               jsr 6658 <openFileFromNum>
   16056:	                               addq.l #4,sp
   16058:	                               tst.l d0
   1605a:	                           /-- bne.s 16062 <setFloor+0x24>
   1605c:	                           |   clr.w d0
   1605e:	/--------------------------|-- bra.w 167ae <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16062:	|                          \-> movea.l 1a8d4 <currentFloor>,a0
   16068:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   1606c:	|                              move.l 1a78c <bigDataFile>,118(sp)
   16074:	|                              move.l 1a7ac <DOSBase>,d0
   1607a:	|                              movea.l d0,a6
   1607c:	|                              move.l 118(sp),d1
   16080:	|                              jsr -306(a6)
   16084:	|                              move.l d0,114(sp)
   16088:	|                              move.l 114(sp),d0
   1608c:	|                              movea.l 1a8d4 <currentFloor>,a0
   16092:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16096:	|                              movea.l 1a8d4 <currentFloor>,a0
   1609c:	|                              move.l 8(a0),d0
   160a0:	|                              lsl.l #3,d0
   160a2:	|                              move.l d0,110(sp)
   160a6:	|                              clr.l 106(sp)
   160aa:	|                              move.l 1a7a4 <SysBase>,d0
   160b0:	|                              movea.l d0,a6
   160b2:	|                              move.l 110(sp),d0
   160b6:	|                              move.l 106(sp),d1
   160ba:	|                              jsr -684(a6)
   160be:	|                              move.l d0,102(sp)
   160c2:	|                              move.l 102(sp),d0
   160c6:	|                              movea.l 1a8d4 <currentFloor>,a0
   160cc:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   160d0:	|                              movea.l 1a8d4 <currentFloor>,a0
   160d6:	|                              move.l 12(a0),d0
   160da:	|                          /-- bne.s 160f0 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   160dc:	|                          |   pea 19734 <main_sludge.c.0270f7ba+0x72>
   160e2:	|                          |   jsr 16894 <KPrintF>
   160e8:	|                          |   addq.l #4,sp
		return FALSE;
   160ea:	|                          |   clr.w d0
   160ec:	+--------------------------|-- bra.w 167ae <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   160f0:	|                          \-> clr.l 136(sp)
   160f4:	|                    /-------- bra.w 1620c <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   160f8:	|                 /--|-------> move.l 1a78c <bigDataFile>,26(sp)
   16100:	|                 |  |         move.l 1a7ac <DOSBase>,d0
   16106:	|                 |  |         movea.l d0,a6
   16108:	|                 |  |         move.l 26(sp),d1
   1610c:	|                 |  |         jsr -306(a6)
   16110:	|                 |  |         move.l d0,22(sp)
   16114:	|                 |  |         move.l 22(sp),d1
   16118:	|                 |  |         movea.l 1a8d4 <currentFloor>,a0
   1611e:	|                 |  |         movea.l 12(a0),a0
   16122:	|                 |  |         move.l 136(sp),d0
   16126:	|                 |  |         lsl.l #3,d0
   16128:	|                 |  |         adda.l d0,a0
   1612a:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   1612c:	|                 |  |         movea.l 1a8d4 <currentFloor>,a0
   16132:	|                 |  |         move.l 12(a0),d1
   16136:	|                 |  |         move.l 136(sp),d0
   1613a:	|                 |  |         lsl.l #3,d0
   1613c:	|                 |  |         movea.l d1,a0
   1613e:	|                 |  |         adda.l d0,a0
   16140:	|                 |  |         move.l (a0),d0
   16142:	|                 |  |         add.l d0,d0
   16144:	|                 |  |         add.l d0,d0
   16146:	|                 |  |         move.l d0,18(sp)
   1614a:	|                 |  |         clr.l 14(sp)
   1614e:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   16154:	|                 |  |         movea.l d0,a6
   16156:	|                 |  |         move.l 18(sp),d0
   1615a:	|                 |  |         move.l 14(sp),d1
   1615e:	|                 |  |         jsr -684(a6)
   16162:	|                 |  |         move.l d0,10(sp)
   16166:	|                 |  |         move.l 10(sp),d1
   1616a:	|                 |  |         movea.l 1a8d4 <currentFloor>,a0
   16170:	|                 |  |         movea.l 12(a0),a0
   16174:	|                 |  |         move.l 136(sp),d0
   16178:	|                 |  |         lsl.l #3,d0
   1617a:	|                 |  |         adda.l d0,a0
   1617c:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16180:	|                 |  |         movea.l 1a8d4 <currentFloor>,a0
   16186:	|                 |  |         move.l 12(a0),d1
   1618a:	|                 |  |         move.l 136(sp),d0
   1618e:	|                 |  |         lsl.l #3,d0
   16190:	|                 |  |         movea.l d1,a0
   16192:	|                 |  |         adda.l d0,a0
   16194:	|                 |  |         move.l 4(a0),d0
   16198:	|                 |  |     /-- bne.s 161ae <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   1619a:	|                 |  |     |   pea 19734 <main_sludge.c.0270f7ba+0x72>
   161a0:	|                 |  |     |   jsr 16894 <KPrintF>
   161a6:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   161a8:	|                 |  |     |   clr.w d0
   161aa:	+-----------------|--|-----|-- bra.w 167ae <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   161ae:	|                 |  |     \-> clr.l 132(sp)
   161b2:	|                 |  |     /-- bra.s 161ec <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   161b4:	|                 |  |  /--|-> move.l 1a78c <bigDataFile>,d1
   161ba:	|                 |  |  |  |   movea.l 1a8d4 <currentFloor>,a0
   161c0:	|                 |  |  |  |   movea.l 12(a0),a0
   161c4:	|                 |  |  |  |   move.l 136(sp),d0
   161c8:	|                 |  |  |  |   lsl.l #3,d0
   161ca:	|                 |  |  |  |   adda.l d0,a0
   161cc:	|                 |  |  |  |   movea.l 4(a0),a0
   161d0:	|                 |  |  |  |   move.l 132(sp),d0
   161d4:	|                 |  |  |  |   add.l d0,d0
   161d6:	|                 |  |  |  |   add.l d0,d0
   161d8:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   161dc:	|                 |  |  |  |   move.l d1,-(sp)
   161de:	|                 |  |  |  |   jsr 6bc <get2bytes>
   161e4:	|                 |  |  |  |   addq.l #4,sp
   161e6:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   161e8:	|                 |  |  |  |   addq.l #1,132(sp)
   161ec:	|                 |  |  |  \-> movea.l 1a8d4 <currentFloor>,a0
   161f2:	|                 |  |  |      move.l 12(a0),d1
   161f6:	|                 |  |  |      move.l 136(sp),d0
   161fa:	|                 |  |  |      lsl.l #3,d0
   161fc:	|                 |  |  |      movea.l d1,a0
   161fe:	|                 |  |  |      adda.l d0,a0
   16200:	|                 |  |  |      move.l (a0),d0
   16202:	|                 |  |  |      cmp.l 132(sp),d0
   16206:	|                 |  |  \----- bgt.s 161b4 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16208:	|                 |  |         addq.l #1,136(sp)
   1620c:	|                 |  \-------> movea.l 1a8d4 <currentFloor>,a0
   16212:	|                 |            move.l 8(a0),d0
   16216:	|                 |            cmp.l 136(sp),d0
   1621a:	|                 \----------- bgt.w 160f8 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   1621e:	|                              move.l 1a78c <bigDataFile>,d0
   16224:	|                              move.l d0,-(sp)
   16226:	|                              jsr 6bc <get2bytes>
   1622c:	|                              addq.l #4,sp
   1622e:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16232:	|                              move.l 136(sp),d0
   16236:	|                              lsl.l #3,d0
   16238:	|                              move.l d0,98(sp)
   1623c:	|                              clr.l 94(sp)
   16240:	|                              move.l 1a7a4 <SysBase>,d0
   16246:	|                              movea.l d0,a6
   16248:	|                              move.l 98(sp),d0
   1624c:	|                              move.l 94(sp),d1
   16250:	|                              jsr -684(a6)
   16254:	|                              move.l d0,90(sp)
   16258:	|                              move.l 90(sp),d0
   1625c:	|                              movea.l 1a8d4 <currentFloor>,a0
   16262:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16266:	|                              movea.l 1a8d4 <currentFloor>,a0
   1626c:	|                              move.l 4(a0),d0
   16270:	|                          /-- bne.s 16286 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16272:	|                          |   pea 19734 <main_sludge.c.0270f7ba+0x72>
   16278:	|                          |   jsr 16894 <KPrintF>
   1627e:	|                          |   addq.l #4,sp
		return FALSE;
   16280:	|                          |   clr.w d0
   16282:	+--------------------------|-- bra.w 167ae <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16286:	|                          \-> clr.l 132(sp)
   1628a:	|                          /-- bra.s 162de <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   1628c:	|                       /--|-> move.l 1a78c <bigDataFile>,d1
   16292:	|                       |  |   movea.l 1a8d4 <currentFloor>,a0
   16298:	|                       |  |   movea.l 4(a0),a0
   1629c:	|                       |  |   move.l 132(sp),d0
   162a0:	|                       |  |   lsl.l #3,d0
   162a2:	|                       |  |   lea (0,a0,d0.l),a2
   162a6:	|                       |  |   move.l d1,-(sp)
   162a8:	|                       |  |   jsr 6bc <get2bytes>
   162ae:	|                       |  |   addq.l #4,sp
   162b0:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   162b2:	|                       |  |   move.l 1a78c <bigDataFile>,d1
   162b8:	|                       |  |   movea.l 1a8d4 <currentFloor>,a0
   162be:	|                       |  |   movea.l 4(a0),a0
   162c2:	|                       |  |   move.l 132(sp),d0
   162c6:	|                       |  |   lsl.l #3,d0
   162c8:	|                       |  |   lea (0,a0,d0.l),a2
   162cc:	|                       |  |   move.l d1,-(sp)
   162ce:	|                       |  |   jsr 6bc <get2bytes>
   162d4:	|                       |  |   addq.l #4,sp
   162d6:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   162da:	|                       |  |   addq.l #1,132(sp)
   162de:	|                       |  \-> move.l 132(sp),d0
   162e2:	|                       |      cmp.l 136(sp),d0
   162e6:	|                       \----- blt.s 1628c <setFloor+0x24e>
	}

	finishAccess ();
   162e8:	|                              jsr 6550 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   162ee:	|                              movea.l 1a8d4 <currentFloor>,a0
   162f4:	|                              move.l 8(a0),d0
   162f8:	|                              add.l d0,d0
   162fa:	|                              add.l d0,d0
   162fc:	|                              move.l d0,86(sp)
   16300:	|                              clr.l 82(sp)
   16304:	|                              move.l 1a7a4 <SysBase>,d0
   1630a:	|                              movea.l d0,a6
   1630c:	|                              move.l 86(sp),d0
   16310:	|                              move.l 82(sp),d1
   16314:	|                              jsr -684(a6)
   16318:	|                              move.l d0,78(sp)
   1631c:	|                              move.l 78(sp),d0
   16320:	|                              movea.l 1a8d4 <currentFloor>,a0
   16326:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   1632a:	|                              movea.l 1a8d4 <currentFloor>,a0
   16330:	|                              move.l 8(a0),d0
   16334:	|                              add.l d0,d0
   16336:	|                              add.l d0,d0
   16338:	|                              move.l d0,74(sp)
   1633c:	|                              clr.l 70(sp)
   16340:	|                              move.l 1a7a4 <SysBase>,d0
   16346:	|                              movea.l d0,a6
   16348:	|                              move.l 74(sp),d0
   1634c:	|                              move.l 70(sp),d1
   16350:	|                              jsr -684(a6)
   16354:	|                              move.l d0,66(sp)
   16358:	|                              move.l 66(sp),d0
   1635c:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16360:	|                              movea.l 1a8d4 <currentFloor>,a0
   16366:	|                              move.l 16(a0),d0
   1636a:	|                          /-- bne.s 16380 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   1636c:	|                          |   pea 19734 <main_sludge.c.0270f7ba+0x72>
   16372:	|                          |   jsr 16894 <KPrintF>
   16378:	|                          |   addq.l #4,sp
		return FALSE;
   1637a:	|                          |   clr.w d0
   1637c:	+--------------------------|-- bra.w 167ae <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16380:	|                          \-> clr.l 136(sp)
   16384:	|                    /-------- bra.w 164a8 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16388:	|                 /--|-------> movea.l 1a8d4 <currentFloor>,a0
   1638e:	|                 |  |         move.l 8(a0),d0
   16392:	|                 |  |         add.l d0,d0
   16394:	|                 |  |         add.l d0,d0
   16396:	|                 |  |         move.l d0,50(sp)
   1639a:	|                 |  |         clr.l 46(sp)
   1639e:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   163a4:	|                 |  |         movea.l d0,a6
   163a6:	|                 |  |         move.l 50(sp),d0
   163aa:	|                 |  |         move.l 46(sp),d1
   163ae:	|                 |  |         jsr -684(a6)
   163b2:	|                 |  |         move.l d0,42(sp)
   163b6:	|                 |  |         move.l 42(sp),d0
   163ba:	|                 |  |         movea.l 1a8d4 <currentFloor>,a0
   163c0:	|                 |  |         movea.l 16(a0),a0
   163c4:	|                 |  |         move.l 136(sp),d1
   163c8:	|                 |  |         add.l d1,d1
   163ca:	|                 |  |         add.l d1,d1
   163cc:	|                 |  |         adda.l d1,a0
   163ce:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   163d0:	|                 |  |         movea.l 1a8d4 <currentFloor>,a0
   163d6:	|                 |  |         move.l 8(a0),d0
   163da:	|                 |  |         add.l d0,d0
   163dc:	|                 |  |         add.l d0,d0
   163de:	|                 |  |         move.l d0,38(sp)
   163e2:	|                 |  |         clr.l 34(sp)
   163e6:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   163ec:	|                 |  |         movea.l d0,a6
   163ee:	|                 |  |         move.l 38(sp),d0
   163f2:	|                 |  |         move.l 34(sp),d1
   163f6:	|                 |  |         jsr -684(a6)
   163fa:	|                 |  |         move.l d0,30(sp)
   163fe:	|                 |  |         move.l 30(sp),d1
   16402:	|                 |  |         move.l 136(sp),d0
   16406:	|                 |  |         add.l d0,d0
   16408:	|                 |  |         add.l d0,d0
   1640a:	|                 |  |         movea.l 62(sp),a0
   1640e:	|                 |  |         adda.l d0,a0
   16410:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16412:	|                 |  |         movea.l 1a8d4 <currentFloor>,a0
   16418:	|                 |  |         move.l 16(a0),d1
   1641c:	|                 |  |         move.l 136(sp),d0
   16420:	|                 |  |         add.l d0,d0
   16422:	|                 |  |         add.l d0,d0
   16424:	|                 |  |         movea.l d1,a0
   16426:	|                 |  |         adda.l d0,a0
   16428:	|                 |  |         move.l (a0),d0
   1642a:	|                 |  |     /-- bne.s 16440 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   1642c:	|                 |  |     |   pea 19734 <main_sludge.c.0270f7ba+0x72>
   16432:	|                 |  |     |   jsr 16894 <KPrintF>
   16438:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1643a:	|                 |  |     |   clr.w d0
   1643c:	+-----------------|--|-----|-- bra.w 167ae <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16440:	|                 |  |     \-> clr.l 132(sp)
   16444:	|                 |  |     /-- bra.s 16494 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16446:	|                 |  |  /--|-> movea.l 1a8d4 <currentFloor>,a0
   1644c:	|                 |  |  |  |   move.l 16(a0),d1
   16450:	|                 |  |  |  |   move.l 136(sp),d0
   16454:	|                 |  |  |  |   add.l d0,d0
   16456:	|                 |  |  |  |   add.l d0,d0
   16458:	|                 |  |  |  |   movea.l d1,a0
   1645a:	|                 |  |  |  |   adda.l d0,a0
   1645c:	|                 |  |  |  |   move.l (a0),d1
   1645e:	|                 |  |  |  |   move.l 132(sp),d0
   16462:	|                 |  |  |  |   add.l d0,d0
   16464:	|                 |  |  |  |   add.l d0,d0
   16466:	|                 |  |  |  |   movea.l d1,a0
   16468:	|                 |  |  |  |   adda.l d0,a0
   1646a:	|                 |  |  |  |   moveq #-1,d1
   1646c:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   1646e:	|                 |  |  |  |   move.l 136(sp),d0
   16472:	|                 |  |  |  |   add.l d0,d0
   16474:	|                 |  |  |  |   add.l d0,d0
   16476:	|                 |  |  |  |   movea.l 62(sp),a0
   1647a:	|                 |  |  |  |   adda.l d0,a0
   1647c:	|                 |  |  |  |   move.l (a0),d1
   1647e:	|                 |  |  |  |   move.l 132(sp),d0
   16482:	|                 |  |  |  |   add.l d0,d0
   16484:	|                 |  |  |  |   add.l d0,d0
   16486:	|                 |  |  |  |   movea.l d1,a0
   16488:	|                 |  |  |  |   adda.l d0,a0
   1648a:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16490:	|                 |  |  |  |   addq.l #1,132(sp)
   16494:	|                 |  |  |  \-> movea.l 1a8d4 <currentFloor>,a0
   1649a:	|                 |  |  |      move.l 8(a0),d0
   1649e:	|                 |  |  |      cmp.l 132(sp),d0
   164a2:	|                 |  |  \----- bgt.s 16446 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   164a4:	|                 |  |         addq.l #1,136(sp)
   164a8:	|                 |  \-------> movea.l 1a8d4 <currentFloor>,a0
   164ae:	|                 |            move.l 8(a0),d0
   164b2:	|                 |            cmp.l 136(sp),d0
   164b6:	|                 \----------- bgt.w 16388 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   164ba:	|                              clr.l 136(sp)
   164be:	|              /-------------- bra.w 165c4 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   164c2:	|           /--|-------------> clr.l 132(sp)
   164c6:	|           |  |     /-------- bra.w 165ae <setFloor+0x570>
			if (i != j) {
   164ca:	|           |  |  /--|-------> move.l 136(sp),d0
   164ce:	|           |  |  |  |         cmp.l 132(sp),d0
   164d2:	|           |  |  |  |     /-- beq.w 16564 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   164d6:	|           |  |  |  |     |   movea.l 1a8d4 <currentFloor>,a0
   164dc:	|           |  |  |  |     |   move.l 12(a0),d1
   164e0:	|           |  |  |  |     |   move.l 132(sp),d0
   164e4:	|           |  |  |  |     |   lsl.l #3,d0
   164e6:	|           |  |  |  |     |   movea.l d1,a1
   164e8:	|           |  |  |  |     |   adda.l d0,a1
   164ea:	|           |  |  |  |     |   movea.l 1a8d4 <currentFloor>,a0
   164f0:	|           |  |  |  |     |   move.l 12(a0),d1
   164f4:	|           |  |  |  |     |   move.l 136(sp),d0
   164f8:	|           |  |  |  |     |   lsl.l #3,d0
   164fa:	|           |  |  |  |     |   movea.l d1,a0
   164fc:	|           |  |  |  |     |   adda.l d0,a0
   164fe:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16502:	|           |  |  |  |     |   move.l (a1),-(sp)
   16504:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16508:	|           |  |  |  |     |   move.l (a0),-(sp)
   1650a:	|           |  |  |  |     |   jsr 15d96 <polysShareSide>
   16510:	|           |  |  |  |     |   lea 16(sp),sp
   16514:	|           |  |  |  |     |   tst.w d0
   16516:	|           |  |  |  |  /--|-- beq.w 165aa <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   1651a:	|           |  |  |  |  |  |   movea.l 1a8d4 <currentFloor>,a0
   16520:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16524:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16528:	|           |  |  |  |  |  |   add.l d0,d0
   1652a:	|           |  |  |  |  |  |   add.l d0,d0
   1652c:	|           |  |  |  |  |  |   movea.l d1,a0
   1652e:	|           |  |  |  |  |  |   adda.l d0,a0
   16530:	|           |  |  |  |  |  |   move.l (a0),d1
   16532:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16536:	|           |  |  |  |  |  |   add.l d0,d0
   16538:	|           |  |  |  |  |  |   add.l d0,d0
   1653a:	|           |  |  |  |  |  |   movea.l d1,a0
   1653c:	|           |  |  |  |  |  |   adda.l d0,a0
   1653e:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16542:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16546:	|           |  |  |  |  |  |   add.l d0,d0
   16548:	|           |  |  |  |  |  |   add.l d0,d0
   1654a:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   1654e:	|           |  |  |  |  |  |   adda.l d0,a0
   16550:	|           |  |  |  |  |  |   move.l (a0),d1
   16552:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16556:	|           |  |  |  |  |  |   add.l d0,d0
   16558:	|           |  |  |  |  |  |   add.l d0,d0
   1655a:	|           |  |  |  |  |  |   movea.l d1,a0
   1655c:	|           |  |  |  |  |  |   adda.l d0,a0
   1655e:	|           |  |  |  |  |  |   moveq #1,d1
   16560:	|           |  |  |  |  |  |   move.l d1,(a0)
   16562:	|           |  |  |  |  +--|-- bra.s 165aa <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16564:	|           |  |  |  |  |  \-> movea.l 1a8d4 <currentFloor>,a0
   1656a:	|           |  |  |  |  |      move.l 16(a0),d1
   1656e:	|           |  |  |  |  |      move.l 136(sp),d0
   16572:	|           |  |  |  |  |      add.l d0,d0
   16574:	|           |  |  |  |  |      add.l d0,d0
   16576:	|           |  |  |  |  |      movea.l d1,a0
   16578:	|           |  |  |  |  |      adda.l d0,a0
   1657a:	|           |  |  |  |  |      move.l (a0),d1
   1657c:	|           |  |  |  |  |      move.l 132(sp),d0
   16580:	|           |  |  |  |  |      add.l d0,d0
   16582:	|           |  |  |  |  |      add.l d0,d0
   16584:	|           |  |  |  |  |      movea.l d1,a0
   16586:	|           |  |  |  |  |      adda.l d0,a0
   16588:	|           |  |  |  |  |      moveq #-2,d0
   1658a:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   1658c:	|           |  |  |  |  |      move.l 136(sp),d0
   16590:	|           |  |  |  |  |      add.l d0,d0
   16592:	|           |  |  |  |  |      add.l d0,d0
   16594:	|           |  |  |  |  |      movea.l 62(sp),a0
   16598:	|           |  |  |  |  |      adda.l d0,a0
   1659a:	|           |  |  |  |  |      move.l (a0),d1
   1659c:	|           |  |  |  |  |      move.l 132(sp),d0
   165a0:	|           |  |  |  |  |      add.l d0,d0
   165a2:	|           |  |  |  |  |      add.l d0,d0
   165a4:	|           |  |  |  |  |      movea.l d1,a0
   165a6:	|           |  |  |  |  |      adda.l d0,a0
   165a8:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   165aa:	|           |  |  |  |  \----> addq.l #1,132(sp)
   165ae:	|           |  |  |  \-------> movea.l 1a8d4 <currentFloor>,a0
   165b4:	|           |  |  |            move.l 8(a0),d0
   165b8:	|           |  |  |            cmp.l 132(sp),d0
   165bc:	|           |  |  \----------- bgt.w 164ca <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   165c0:	|           |  |               addq.l #1,136(sp)
   165c4:	|           |  \-------------> movea.l 1a8d4 <currentFloor>,a0
   165ca:	|           |                  move.l 8(a0),d0
   165ce:	|           |                  cmp.l 136(sp),d0
   165d2:	|           \----------------- bgt.w 164c2 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   165d6:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   165da:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   165de:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   165e2:	|  |                           clr.l 136(sp)
   165e6:	|  |     /-------------------- bra.w 1673c <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   165ea:	|  |  /--|-------------------> clr.l 132(sp)
   165ee:	|  |  |  |     /-------------- bra.w 16726 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   165f2:	|  |  |  |  /--|-------------> movea.l 1a8d4 <currentFloor>,a0
   165f8:	|  |  |  |  |  |               move.l 16(a0),d1
   165fc:	|  |  |  |  |  |               move.l 136(sp),d0
   16600:	|  |  |  |  |  |               add.l d0,d0
   16602:	|  |  |  |  |  |               add.l d0,d0
   16604:	|  |  |  |  |  |               movea.l d1,a0
   16606:	|  |  |  |  |  |               adda.l d0,a0
   16608:	|  |  |  |  |  |               move.l (a0),d1
   1660a:	|  |  |  |  |  |               move.l 132(sp),d0
   1660e:	|  |  |  |  |  |               add.l d0,d0
   16610:	|  |  |  |  |  |               add.l d0,d0
   16612:	|  |  |  |  |  |               movea.l d1,a0
   16614:	|  |  |  |  |  |               adda.l d0,a0
   16616:	|  |  |  |  |  |               move.l (a0),d0
   16618:	|  |  |  |  |  |               moveq #-1,d1
   1661a:	|  |  |  |  |  |               cmp.l d0,d1
   1661c:	|  |  |  |  |  |  /----------- bne.w 16722 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16620:	|  |  |  |  |  |  |            clr.l 122(sp)
   16624:	|  |  |  |  |  |  |     /----- bra.w 16710 <setFloor+0x6d2>
						if (d != i && d != j) {
   16628:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   1662c:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16630:	|  |  |  |  |  |  |  |  |  /-- beq.w 1670c <setFloor+0x6ce>
   16634:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16638:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   1663c:	|  |  |  |  |  |  |  |  |  +-- beq.w 1670c <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16640:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8d4 <currentFloor>,a0
   16646:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1664a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1664e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16650:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16652:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16654:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16656:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16658:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1665c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1665e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16660:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16662:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16664:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   16666:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   1666a:	|  |  |  |  |  |  |  |  |  +-- bne.w 1670c <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   1666e:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8d4 <currentFloor>,a0
   16674:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16678:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1667c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1667e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16680:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16682:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16684:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16686:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1668a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1668c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1668e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16690:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16692:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   16694:	|  |  |  |  |  |  |  |  |  +-- bmi.s 1670c <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   16696:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1669a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1669c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1669e:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   166a2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   166a4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   166a6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   166aa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   166ac:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   166ae:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   166b0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   166b2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   166b4:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   166b8:	|  |  |  |  |  |  |  |  |  +-- bgt.s 1670c <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   166ba:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8d4 <currentFloor>,a0
   166c0:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   166c4:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   166c8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   166ca:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   166cc:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   166ce:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   166d0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   166d2:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   166d6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   166d8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   166da:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   166dc:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   166de:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   166e2:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   166e6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   166e8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   166ea:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   166ee:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   166f0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   166f2:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   166f6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   166f8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   166fa:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   166fc:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   166fe:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   16702:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   16704:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   16706:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   1670c:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   16710:	|  |  |  |  |  |  |  |  \----> movea.l 1a8d4 <currentFloor>,a0
   16716:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   1671a:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   1671e:	|  |  |  |  |  |  |  \-------- bgt.w 16628 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16722:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   16726:	|  |  |  |  |  \-------------> movea.l 1a8d4 <currentFloor>,a0
   1672c:	|  |  |  |  |                  move.l 8(a0),d0
   16730:	|  |  |  |  |                  cmp.l 132(sp),d0
   16734:	|  |  |  |  \----------------- bgt.w 165f2 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16738:	|  |  |  |                     addq.l #1,136(sp)
   1673c:	|  |  |  \-------------------> movea.l 1a8d4 <currentFloor>,a0
   16742:	|  |  |                        move.l 8(a0),d0
   16746:	|  |  |                        cmp.l 136(sp),d0
   1674a:	|  |  \----------------------- bgt.w 165ea <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   1674e:	|  |                           tst.w 130(sp)
   16752:	|  \-------------------------- bne.w 165da <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16756:	|                              clr.l 136(sp)
   1675a:	|                          /-- bra.s 16782 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   1675c:	|                       /--|-> move.l 136(sp),d0
   16760:	|                       |  |   add.l d0,d0
   16762:	|                       |  |   add.l d0,d0
   16764:	|                       |  |   movea.l 62(sp),a0
   16768:	|                       |  |   adda.l d0,a0
   1676a:	|                       |  |   move.l (a0),54(sp)
   1676e:	|                       |  |   move.l 1a7a4 <SysBase>,d0
   16774:	|                       |  |   movea.l d0,a6
   16776:	|                       |  |   movea.l 54(sp),a1
   1677a:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1677e:	|                       |  |   addq.l #1,136(sp)
   16782:	|                       |  \-> movea.l 1a8d4 <currentFloor>,a0
   16788:	|                       |      move.l 8(a0),d0
   1678c:	|                       |      cmp.l 136(sp),d0
   16790:	|                       \----- bgt.s 1675c <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   16792:	|                              move.l 62(sp),58(sp)
   16798:	|                              move.l 1a7a4 <SysBase>,d0
   1679e:	|                              movea.l d0,a6
   167a0:	|                              movea.l 58(sp),a1
   167a4:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   167a8:	|                              clr.l 62(sp)

	return TRUE;
   167ac:	|                              moveq #1,d0
}
   167ae:	\----------------------------> movea.l (sp)+,a2
   167b0:	                               movea.l (sp)+,a6
   167b2:	                               lea 132(sp),sp
   167b6:	                               rts

000167b8 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   167b8:	jsr 15ca6 <killFloor>
	noFloor ();
   167be:	jsr 15bca <noFloor>
   167c4:	nop
   167c6:	rts

000167c8 <WaitVbl>:
void WaitVbl() {
   167c8:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   167ca:	   /-> movea.l #14675972,a0
   167d0:	   |   move.l (a0),d0
   167d2:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   167d4:	   |   move.l (sp),d0
   167d6:	   |   andi.l #130816,d0
   167dc:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   167de:	   |   move.l (sp),d0
   167e0:	   |   cmpi.l #76800,d0
   167e6:	   \-- beq.s 167ca <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   167e8:	/----> movea.l #14675972,a0
   167ee:	|      move.l (a0),d0
   167f0:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   167f4:	|      move.l 4(sp),d0
   167f8:	|      andi.l #130816,d0
   167fe:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   16802:	|      move.l 4(sp),d0
   16806:	|      cmpi.l #76800,d0
   1680c:	|  /-- beq.s 16810 <WaitVbl+0x48>
	while (1) {
   1680e:	\--|-- bra.s 167e8 <WaitVbl+0x20>
			break;
   16810:	   \-> nop
}
   16812:	       nop
   16814:	       addq.l #8,sp
   16816:	       rts

00016818 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   16818:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   1681a:	       move.l 8(sp),(sp)
	while(len-- > 0)
   1681e:	   /-- bra.s 16830 <memset+0x18>
		*ptr++ = val;
   16820:	/--|-> move.l (sp),d0
   16822:	|  |   move.l d0,d1
   16824:	|  |   addq.l #1,d1
   16826:	|  |   move.l d1,(sp)
   16828:	|  |   move.l 12(sp),d1
   1682c:	|  |   movea.l d0,a0
   1682e:	|  |   move.b d1,(a0)
	while(len-- > 0)
   16830:	|  \-> move.l 16(sp),d0
   16834:	|      move.l d0,d1
   16836:	|      subq.l #1,d1
   16838:	|      move.l d1,16(sp)
   1683c:	|      tst.l d0
   1683e:	\----- bne.s 16820 <memset+0x8>
	return dest;
   16840:	       move.l 8(sp),d0
}
   16844:	       addq.l #4,sp
   16846:	       rts

00016848 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   16848:	       subq.l #8,sp
   1684a:	       move.l d2,-(sp)
	char *d = (char *)dest;
   1684c:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   16852:	       move.l 20(sp),4(sp)
	while(len--)
   16858:	   /-- bra.s 1687a <memcpy+0x32>
		*d++ = *s++;
   1685a:	/--|-> move.l 4(sp),d1
   1685e:	|  |   move.l d1,d0
   16860:	|  |   addq.l #1,d0
   16862:	|  |   move.l d0,4(sp)
   16866:	|  |   move.l 8(sp),d0
   1686a:	|  |   move.l d0,d2
   1686c:	|  |   addq.l #1,d2
   1686e:	|  |   move.l d2,8(sp)
   16872:	|  |   movea.l d1,a0
   16874:	|  |   move.b (a0),d1
   16876:	|  |   movea.l d0,a0
   16878:	|  |   move.b d1,(a0)
	while(len--)
   1687a:	|  \-> move.l 24(sp),d0
   1687e:	|      move.l d0,d1
   16880:	|      subq.l #1,d1
   16882:	|      move.l d1,24(sp)
   16886:	|      tst.l d0
   16888:	\----- bne.s 1685a <memcpy+0x12>
	return dest;
   1688a:	       move.l 16(sp),d0
}
   1688e:	       move.l (sp)+,d2
   16890:	       addq.l #8,sp
   16892:	       rts

00016894 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   16894:	       lea -128(sp),sp
   16898:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1689c:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xec5b56>,d0
   168a2:	       cmpi.w #20153,d0
   168a6:	   /-- beq.s 168ca <KPrintF+0x36>
   168a8:	   |   cmpi.w #-24562,d0
   168ac:	   +-- beq.s 168ca <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   168ae:	   |   movea.l 1a7a4 <SysBase>,a6
   168b4:	   |   movea.l 144(sp),a0
   168b8:	   |   lea 148(sp),a1
   168bc:	   |   lea 1735a <KPutCharX>,a2
   168c2:	   |   suba.l a3,a3
   168c4:	   |   jsr -522(a6)
}
   168c8:	/--|-- bra.s 168f4 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   168ca:	|  \-> movea.l 1a7a4 <SysBase>,a6
   168d0:	|      movea.l 144(sp),a0
   168d4:	|      lea 148(sp),a1
   168d8:	|      lea 17368 <PutChar>,a2
   168de:	|      lea 12(sp),a3
   168e2:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   168e6:	|      move.l a3,-(sp)
   168e8:	|      pea 56 <_start+0x56>
   168ec:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xec5b56>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   168f2:	|      addq.l #8,sp
}
   168f4:	\----> movem.l (sp)+,a2-a3/a6
   168f8:	       lea 128(sp),sp
   168fc:	       rts

000168fe <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   168fe:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   16900:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   16906:	       movea.l (sp),a0
   16908:	       move.w (a0),d0
   1690a:	       cmpi.w #20153,d0
   1690e:	   /-- beq.s 1691a <debug_cmd+0x1c>
   16910:	   |   movea.l (sp),a0
   16912:	   |   move.w (a0),d0
   16914:	   |   cmpi.w #-24562,d0
   16918:	/--|-- bne.s 16938 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   1691a:	|  \-> move.l 20(sp),-(sp)
   1691e:	|      move.l 20(sp),-(sp)
   16922:	|      move.l 20(sp),-(sp)
   16926:	|      move.l 20(sp),-(sp)
   1692a:	|      pea 58 <_start+0x58>
   1692e:	|      movea.l 20(sp),a0
   16932:	|      jsr (a0)
   16934:	|      lea 20(sp),sp
	}
}
   16938:	\----> nop
   1693a:	       addq.l #4,sp
   1693c:	       rts

0001693e <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   1693e:	       move.l d2,-(sp)
	while(*source && --num > 0)
   16940:	   /-- bra.s 16962 <my_strncpy+0x24>
		*destination++ = *source++;
   16942:	/--|-> move.l 12(sp),d1
   16946:	|  |   move.l d1,d0
   16948:	|  |   addq.l #1,d0
   1694a:	|  |   move.l d0,12(sp)
   1694e:	|  |   move.l 8(sp),d0
   16952:	|  |   move.l d0,d2
   16954:	|  |   addq.l #1,d2
   16956:	|  |   move.l d2,8(sp)
   1695a:	|  |   movea.l d1,a0
   1695c:	|  |   move.b (a0),d1
   1695e:	|  |   movea.l d0,a0
   16960:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   16962:	|  \-> movea.l 12(sp),a0
   16966:	|      move.b (a0),d0
   16968:	|  /-- beq.s 16970 <my_strncpy+0x32>
   1696a:	|  |   subq.l #1,16(sp)
   1696e:	\--|-- bne.s 16942 <my_strncpy+0x4>
	*destination = '\0';
   16970:	   \-> movea.l 8(sp),a0
   16974:	       clr.b (a0)
}
   16976:	       nop
   16978:	       move.l (sp)+,d2
   1697a:	       rts

0001697c <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   1697c:	    lea -60(sp),sp
   16980:	    movea.l 72(sp),a1
   16984:	    movea.l 76(sp),a0
   16988:	    move.l 80(sp),d1
   1698c:	    move.l 84(sp),d0
   16990:	    movea.w a1,a1
   16992:	    move.w a1,8(sp)
   16996:	    movea.w a0,a0
   16998:	    move.w a0,6(sp)
   1699c:	    move.w d1,d1
   1699e:	    move.w d1,4(sp)
   169a2:	    move.w d0,d0
   169a4:	    move.w d0,2(sp)
	struct debug_resource resource = {
   169a8:	    lea 10(sp),a0
   169ac:	    clr.l (a0)
   169ae:	    addq.l #4,a0
   169b0:	    clr.l (a0)
   169b2:	    addq.l #4,a0
   169b4:	    clr.l (a0)
   169b6:	    addq.l #4,a0
   169b8:	    clr.l (a0)
   169ba:	    addq.l #4,a0
   169bc:	    clr.l (a0)
   169be:	    addq.l #4,a0
   169c0:	    clr.l (a0)
   169c2:	    addq.l #4,a0
   169c4:	    clr.l (a0)
   169c6:	    addq.l #4,a0
   169c8:	    clr.l (a0)
   169ca:	    addq.l #4,a0
   169cc:	    clr.l (a0)
   169ce:	    addq.l #4,a0
   169d0:	    clr.l (a0)
   169d2:	    addq.l #4,a0
   169d4:	    clr.l (a0)
   169d6:	    addq.l #4,a0
   169d8:	    clr.l (a0)
   169da:	    addq.l #4,a0
   169dc:	    clr.w (a0)
   169de:	    addq.l #2,a0
		.address = (unsigned int)addr,
   169e0:	    move.l 64(sp),d0
	struct debug_resource resource = {
   169e4:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   169e8:	    move.w 8(sp),d0
   169ec:	/-- bpl.s 169f0 <debug_register_bitmap+0x74>
   169ee:	|   addq.w #7,d0
   169f0:	\-> asr.w #3,d0
   169f2:	    movea.w d0,a0
   169f4:	    movea.w 6(sp),a1
   169f8:	    move.l a1,-(sp)
   169fa:	    move.l a0,-(sp)
   169fc:	    jsr 17252 <__mulsi3>
   16a02:	    addq.l #8,sp
   16a04:	    movea.w 4(sp),a0
   16a08:	    move.l a0,-(sp)
   16a0a:	    move.l d0,-(sp)
   16a0c:	    jsr 17252 <__mulsi3>
   16a12:	    addq.l #8,sp
	struct debug_resource resource = {
   16a14:	    move.l d0,14(sp)
   16a18:	    move.w 2(sp),52(sp)
   16a1e:	    move.w 8(sp),54(sp)
   16a24:	    move.w 6(sp),56(sp)
   16a2a:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   16a30:	    moveq #0,d0
   16a32:	    move.w 2(sp),d0
   16a36:	    moveq #2,d1
   16a38:	    and.l d1,d0
   16a3a:	/-- beq.s 16a46 <debug_register_bitmap+0xca>
		resource.size *= 2;
   16a3c:	|   move.l 14(sp),d0
   16a40:	|   add.l d0,d0
   16a42:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   16a46:	\-> pea 20 <_start+0x20>
   16a4a:	    move.l 72(sp),-(sp)
   16a4e:	    lea 18(sp),a0
   16a52:	    move.l a0,d0
   16a54:	    addq.l #8,d0
   16a56:	    move.l d0,-(sp)
   16a58:	    jsr 1693e <my_strncpy>
   16a5e:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   16a62:	    lea 10(sp),a0
   16a66:	    clr.l -(sp)
   16a68:	    clr.l -(sp)
   16a6a:	    move.l a0,-(sp)
   16a6c:	    pea 4 <_start+0x4>
   16a70:	    jsr 168fe <debug_cmd>
   16a76:	    lea 16(sp),sp
}
   16a7a:	    nop
   16a7c:	    lea 60(sp),sp
   16a80:	    rts

00016a82 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   16a82:	lea -12(sp),sp
   16a86:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   16a88:	move.l 20(sp),12(sp)
   16a8e:	move.l 24(sp),8(sp)
   16a94:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16a9a:	movea.l d0,a6
   16a9c:	move.l 12(sp),d0
   16aa0:	move.l 8(sp),d1
   16aa4:	jsr -66(a6)
   16aa8:	move.l d0,4(sp)
   16aac:	move.l 4(sp),d0
}
   16ab0:	movea.l (sp)+,a6
   16ab2:	lea 12(sp),sp
   16ab6:	rts

00016ab8 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   16ab8:	lea -32(sp),sp
   16abc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   16ac0:	move.l 48(sp),36(sp)
   16ac6:	move.l 52(sp),40(sp)
   16acc:	move.l 56(sp),28(sp)
   16ad2:	move.l 60(sp),32(sp)
   16ad8:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   16ade:	movea.l d0,a6
   16ae0:	move.l 36(sp),d0
   16ae4:	move.l 40(sp),d1
   16ae8:	move.l 28(sp),d2
   16aec:	move.l 32(sp),d3
   16af0:	jsr -66(a6)
   16af4:	move.l d0,12(sp)
   16af8:	move.l d1,16(sp)
   16afc:	move.l 12(sp),20(sp)
   16b02:	move.l 16(sp),24(sp)
   16b08:	move.l 20(sp),d0
   16b0c:	move.l 24(sp),d1
}
   16b10:	movem.l (sp)+,d2-d3/a6
   16b14:	lea 32(sp),sp
   16b18:	rts

00016b1a <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   16b1a:	lea -32(sp),sp
   16b1e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   16b22:	move.l 48(sp),36(sp)
   16b28:	move.l 52(sp),40(sp)
   16b2e:	move.l 56(sp),28(sp)
   16b34:	move.l 60(sp),32(sp)
   16b3a:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   16b40:	movea.l d0,a6
   16b42:	move.l 36(sp),d0
   16b46:	move.l 40(sp),d1
   16b4a:	move.l 28(sp),d2
   16b4e:	move.l 32(sp),d3
   16b52:	jsr -84(a6)
   16b56:	move.l d0,12(sp)
   16b5a:	move.l d1,16(sp)
   16b5e:	move.l 12(sp),20(sp)
   16b64:	move.l 16(sp),24(sp)
   16b6a:	move.l 20(sp),d0
   16b6e:	move.l 24(sp),d1
}
   16b72:	movem.l (sp)+,d2-d3/a6
   16b76:	lea 32(sp),sp
   16b7a:	rts

00016b7c <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   16b7c:	lea -12(sp),sp
   16b80:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   16b82:	move.l 20(sp),12(sp)
   16b88:	move.l 24(sp),8(sp)
   16b8e:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16b94:	movea.l d0,a6
   16b96:	move.l 12(sp),d0
   16b9a:	move.l 8(sp),d1
   16b9e:	jsr -84(a6)
   16ba2:	move.l d0,4(sp)
   16ba6:	move.l 4(sp),d0
}
   16baa:	movea.l (sp)+,a6
   16bac:	lea 12(sp),sp
   16bb0:	rts

00016bb2 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   16bb2:	lea -12(sp),sp
   16bb6:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16bb8:	move.l 20(sp),12(sp)
   16bbe:	move.l 24(sp),8(sp)
   16bc4:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16bca:	movea.l d0,a6
   16bcc:	move.l 12(sp),d0
   16bd0:	move.l 8(sp),d1
   16bd4:	jsr -42(a6)
   16bd8:	move.l d0,4(sp)
   16bdc:	move.l 4(sp),d0
}
   16be0:	movea.l (sp)+,a6
   16be2:	lea 12(sp),sp
   16be6:	rts

00016be8 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   16be8:	lea -20(sp),sp
   16bec:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   16bee:	move.l 28(sp),20(sp)
   16bf4:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   16bfa:	movea.l d0,a6
   16bfc:	move.l 20(sp),d0
   16c00:	jsr -108(a6)
   16c04:	move.l d0,4(sp)
   16c08:	move.l d1,8(sp)
   16c0c:	move.l 4(sp),12(sp)
   16c12:	move.l 8(sp),16(sp)
   16c18:	move.l 12(sp),d0
   16c1c:	move.l 16(sp),d1
}
   16c20:	movea.l (sp)+,a6
   16c22:	lea 20(sp),sp
   16c26:	rts

00016c28 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   16c28:	lea -12(sp),sp
   16c2c:	move.l a6,-(sp)
	return IEEEDPFix(value);
   16c2e:	move.l 20(sp),8(sp)
   16c34:	move.l 24(sp),12(sp)
   16c3a:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   16c40:	movea.l d0,a6
   16c42:	move.l 8(sp),d0
   16c46:	move.l 12(sp),d1
   16c4a:	jsr -30(a6)
   16c4e:	move.l d0,4(sp)
   16c52:	move.l 4(sp),d0
   16c56:	move.l d0,-(sp)
   16c58:	jsr 16c90 <__floatsidf>
   16c5e:	addq.l #4,sp
}
   16c60:	movea.l (sp)+,a6
   16c62:	lea 12(sp),sp
   16c66:	rts

00016c68 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   16c68:	subq.l #8,sp
   16c6a:	move.l a6,-(sp)
	return IEEESPFix(value);
   16c6c:	move.l 16(sp),8(sp)
   16c72:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16c78:	movea.l d0,a6
   16c7a:	move.l 8(sp),d0
   16c7e:	jsr -30(a6)
   16c82:	move.l d0,4(sp)
   16c86:	move.l 4(sp),d0
}
   16c8a:	movea.l (sp)+,a6
   16c8c:	addq.l #8,sp
   16c8e:	rts

00016c90 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   16c90:	lea -20(sp),sp
   16c94:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   16c96:	move.l 28(sp),20(sp)
   16c9c:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   16ca2:	movea.l d0,a6
   16ca4:	move.l 20(sp),d0
   16ca8:	jsr -36(a6)
   16cac:	move.l d0,4(sp)
   16cb0:	move.l d1,8(sp)
   16cb4:	move.l 4(sp),12(sp)
   16cba:	move.l 8(sp),16(sp)
   16cc0:	move.l 12(sp),d0
   16cc4:	move.l 16(sp),d1
}
   16cc8:	movea.l (sp)+,a6
   16cca:	lea 20(sp),sp
   16cce:	rts

00016cd0 <__floatsisf>:

FLOAT __floatsisf(int i) {
   16cd0:	subq.l #8,sp
   16cd2:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   16cd4:	move.l 16(sp),8(sp)
   16cda:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16ce0:	movea.l d0,a6
   16ce2:	move.l 8(sp),d0
   16ce6:	jsr -36(a6)
   16cea:	move.l d0,4(sp)
   16cee:	move.l 4(sp),d0
}
   16cf2:	movea.l (sp)+,a6
   16cf4:	addq.l #8,sp
   16cf6:	rts

00016cf8 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   16cf8:	subq.l #8,sp
   16cfa:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   16cfc:	move.l 16(sp),8(sp)
   16d02:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16d08:	movea.l d0,a6
   16d0a:	move.l 8(sp),d0
   16d0e:	jsr -36(a6)
   16d12:	move.l d0,4(sp)
   16d16:	move.l 4(sp),d0
}
   16d1a:	movea.l (sp)+,a6
   16d1c:	addq.l #8,sp
   16d1e:	rts

00016d20 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   16d20:	lea -32(sp),sp
   16d24:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   16d28:	move.l 48(sp),36(sp)
   16d2e:	move.l 52(sp),40(sp)
   16d34:	move.l 56(sp),28(sp)
   16d3a:	move.l 60(sp),32(sp)
   16d40:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   16d46:	movea.l d0,a6
   16d48:	move.l 36(sp),d0
   16d4c:	move.l 40(sp),d1
   16d50:	move.l 28(sp),d2
   16d54:	move.l 32(sp),d3
   16d58:	jsr -78(a6)
   16d5c:	move.l d0,12(sp)
   16d60:	move.l d1,16(sp)
   16d64:	move.l 12(sp),20(sp)
   16d6a:	move.l 16(sp),24(sp)
   16d70:	move.l 20(sp),d0
   16d74:	move.l 24(sp),d1
}
   16d78:	movem.l (sp)+,d2-d3/a6
   16d7c:	lea 32(sp),sp
   16d80:	rts

00016d82 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   16d82:	lea -12(sp),sp
   16d86:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   16d88:	move.l 20(sp),12(sp)
   16d8e:	move.l 24(sp),8(sp)
   16d94:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16d9a:	movea.l d0,a6
   16d9c:	move.l 12(sp),d0
   16da0:	move.l 8(sp),d1
   16da4:	jsr -78(a6)
   16da8:	move.l d0,4(sp)
   16dac:	move.l 4(sp),d0
}
   16db0:	movea.l (sp)+,a6
   16db2:	lea 12(sp),sp
   16db6:	rts

00016db8 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   16db8:	lea -12(sp),sp
   16dbc:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16dbe:	move.l 20(sp),12(sp)
   16dc4:	move.l 24(sp),8(sp)
   16dca:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16dd0:	movea.l d0,a6
   16dd2:	move.l 12(sp),d0
   16dd6:	move.l 8(sp),d1
   16dda:	jsr -42(a6)
   16dde:	move.l d0,4(sp)
   16de2:	move.l 4(sp),d0
}
   16de6:	movea.l (sp)+,a6
   16de8:	lea 12(sp),sp
   16dec:	rts

00016dee <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   16dee:	lea -20(sp),sp
   16df2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   16df6:	move.l 36(sp),24(sp)
   16dfc:	move.l 40(sp),28(sp)
   16e02:	move.l 44(sp),16(sp)
   16e08:	move.l 48(sp),20(sp)
   16e0e:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   16e14:	movea.l d0,a6
   16e16:	move.l 24(sp),d0
   16e1a:	move.l 28(sp),d1
   16e1e:	move.l 16(sp),d2
   16e22:	move.l 20(sp),d3
   16e26:	jsr -42(a6)
   16e2a:	move.l d0,12(sp)
   16e2e:	move.l 12(sp),d0
}
   16e32:	movem.l (sp)+,d2-d3/a6
   16e36:	lea 20(sp),sp
   16e3a:	rts

00016e3c <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   16e3c:	lea -12(sp),sp
   16e40:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16e42:	move.l 20(sp),12(sp)
   16e48:	move.l 24(sp),8(sp)
   16e4e:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16e54:	movea.l d0,a6
   16e56:	move.l 12(sp),d0
   16e5a:	move.l 8(sp),d1
   16e5e:	jsr -42(a6)
   16e62:	move.l d0,4(sp)
   16e66:	move.l 4(sp),d0
}
   16e6a:	movea.l (sp)+,a6
   16e6c:	lea 12(sp),sp
   16e70:	rts

00016e72 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   16e72:	lea -12(sp),sp
   16e76:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16e78:	move.l 20(sp),12(sp)
   16e7e:	move.l 24(sp),8(sp)
   16e84:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16e8a:	movea.l d0,a6
   16e8c:	move.l 12(sp),d0
   16e90:	move.l 8(sp),d1
   16e94:	jsr -42(a6)
   16e98:	move.l d0,4(sp)
   16e9c:	move.l 4(sp),d0
}
   16ea0:	movea.l (sp)+,a6
   16ea2:	lea 12(sp),sp
   16ea6:	rts

00016ea8 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   16ea8:	lea -20(sp),sp
   16eac:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   16eb0:	move.l 36(sp),24(sp)
   16eb6:	move.l 40(sp),28(sp)
   16ebc:	move.l 44(sp),16(sp)
   16ec2:	move.l 48(sp),20(sp)
   16ec8:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   16ece:	movea.l d0,a6
   16ed0:	move.l 24(sp),d0
   16ed4:	move.l 28(sp),d1
   16ed8:	move.l 16(sp),d2
   16edc:	move.l 20(sp),d3
   16ee0:	jsr -42(a6)
   16ee4:	move.l d0,12(sp)
   16ee8:	move.l 12(sp),d0
}
   16eec:	movem.l (sp)+,d2-d3/a6
   16ef0:	lea 20(sp),sp
   16ef4:	rts

00016ef6 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   16ef6:	lea -12(sp),sp
   16efa:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16efc:	move.l 20(sp),12(sp)
   16f02:	move.l 24(sp),8(sp)
   16f08:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16f0e:	movea.l d0,a6
   16f10:	move.l 12(sp),d0
   16f14:	move.l 8(sp),d1
   16f18:	jsr -42(a6)
   16f1c:	move.l d0,4(sp)
   16f20:	move.l 4(sp),d0
}
   16f24:	movea.l (sp)+,a6
   16f26:	lea 12(sp),sp
   16f2a:	rts

00016f2c <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   16f2c:	lea -12(sp),sp
   16f30:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16f32:	move.l 20(sp),12(sp)
   16f38:	move.l 24(sp),8(sp)
   16f3e:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16f44:	movea.l d0,a6
   16f46:	move.l 12(sp),d0
   16f4a:	move.l 8(sp),d1
   16f4e:	jsr -42(a6)
   16f52:	move.l d0,4(sp)
   16f56:	move.l 4(sp),d0
}
   16f5a:	movea.l (sp)+,a6
   16f5c:	lea 12(sp),sp
   16f60:	rts

00016f62 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   16f62:	lea -32(sp),sp
   16f66:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   16f6a:	move.l 48(sp),36(sp)
   16f70:	move.l 52(sp),40(sp)
   16f76:	move.l 56(sp),28(sp)
   16f7c:	move.l 60(sp),32(sp)
   16f82:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   16f88:	movea.l d0,a6
   16f8a:	move.l 36(sp),d0
   16f8e:	move.l 40(sp),d1
   16f92:	move.l 28(sp),d2
   16f96:	move.l 32(sp),d3
   16f9a:	jsr -72(a6)
   16f9e:	move.l d0,12(sp)
   16fa2:	move.l d1,16(sp)
   16fa6:	move.l 12(sp),20(sp)
   16fac:	move.l 16(sp),24(sp)
   16fb2:	move.l 20(sp),d0
   16fb6:	move.l 24(sp),d1
}
   16fba:	movem.l (sp)+,d2-d3/a6
   16fbe:	lea 32(sp),sp
   16fc2:	rts

00016fc4 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   16fc4:	lea -12(sp),sp
   16fc8:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   16fca:	move.l 20(sp),12(sp)
   16fd0:	move.l 24(sp),8(sp)
   16fd6:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16fdc:	movea.l d0,a6
   16fde:	move.l 12(sp),d0
   16fe2:	move.l 8(sp),d1
   16fe6:	jsr -72(a6)
   16fea:	move.l d0,4(sp)
   16fee:	move.l 4(sp),d0
}
   16ff2:	movea.l (sp)+,a6
   16ff4:	lea 12(sp),sp
   16ff8:	rts

00016ffa <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   16ffa:	lea -12(sp),sp
   16ffe:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17000:	move.l 20(sp),8(sp)
   17006:	move.l 24(sp),12(sp)
   1700c:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   17012:	movea.l d0,a6
   17014:	move.l 8(sp),d0
   17018:	move.l 12(sp),d1
   1701c:	jsr -102(a6)
   17020:	move.l d0,4(sp)
   17024:	move.l 4(sp),d0
}
   17028:	movea.l (sp)+,a6
   1702a:	lea 12(sp),sp
   1702e:	rts

00017030 <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   17030:	subq.l #8,sp
   17032:	move.l a6,-(sp)
	return IEEESPFix(a);
   17034:	move.l 16(sp),8(sp)
   1703a:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17040:	movea.l d0,a6
   17042:	move.l 8(sp),d0
   17046:	jsr -30(a6)
   1704a:	move.l d0,4(sp)
   1704e:	move.l 4(sp),d0
}
   17052:	movea.l (sp)+,a6
   17054:	addq.l #8,sp
   17056:	rts

00017058 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   17058:	       lea -24(sp),sp
   1705c:	       move.l a6,-(sp)
    if (x > 0) {
   1705e:	       clr.l -(sp)
   17060:	       move.l 40(sp),-(sp)
   17064:	       jsr 16e3c <__gtsf2>
   1706a:	       addq.l #8,sp
   1706c:	       tst.l d0
   1706e:	   /-- ble.s 170a0 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17070:	   |   move.l 36(sp),-(sp)
   17074:	   |   move.l 36(sp),-(sp)
   17078:	   |   jsr 16b7c <__divsf3>
   1707e:	   |   addq.l #8,sp
   17080:	   |   move.l d0,8(sp)
   17084:	   |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   1708a:	   |   movea.l d0,a6
   1708c:	   |   move.l 8(sp),d0
   17090:	   |   jsr -30(a6)
   17094:	   |   move.l d0,4(sp)
   17098:	   |   move.l 4(sp),d0
   1709c:	/--|-- bra.w 17200 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   170a0:	|  \-> clr.l -(sp)
   170a2:	|      move.l 40(sp),-(sp)
   170a6:	|      jsr 16ef6 <__ltsf2>
   170ac:	|      addq.l #8,sp
   170ae:	|      tst.l d0
   170b0:	|  /-- bge.s 17124 <atan2f+0xcc>
   170b2:	|  |   clr.l -(sp)
   170b4:	|  |   move.l 36(sp),-(sp)
   170b8:	|  |   jsr 16db8 <__gesf2>
   170be:	|  |   addq.l #8,sp
   170c0:	|  |   tst.l d0
   170c2:	|  +-- blt.s 17124 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   170c4:	|  |   move.l 36(sp),-(sp)
   170c8:	|  |   move.l 36(sp),-(sp)
   170cc:	|  |   jsr 16b7c <__divsf3>
   170d2:	|  |   addq.l #8,sp
   170d4:	|  |   move.l d0,24(sp)
   170d8:	|  |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   170de:	|  |   movea.l d0,a6
   170e0:	|  |   move.l 24(sp),d0
   170e4:	|  |   jsr -30(a6)
   170e8:	|  |   move.l d0,20(sp)
   170ec:	|  |   move.l 20(sp),d0
   170f0:	|  |   move.l d0,-(sp)
   170f2:	|  |   jsr 16be8 <__extendsfdf2>
   170f8:	|  |   addq.l #4,sp
   170fa:	|  |   move.l #1413754136,-(sp)
   17100:	|  |   move.l #1074340347,-(sp)
   17106:	|  |   move.l d1,-(sp)
   17108:	|  |   move.l d0,-(sp)
   1710a:	|  |   jsr 16ab8 <__adddf3>
   17110:	|  |   lea 16(sp),sp
   17114:	|  |   move.l d1,-(sp)
   17116:	|  |   move.l d0,-(sp)
   17118:	|  |   jsr 16ffa <__truncdfsf2>
   1711e:	|  |   addq.l #8,sp
   17120:	+--|-- bra.w 17200 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17124:	|  \-> clr.l -(sp)
   17126:	|      move.l 40(sp),-(sp)
   1712a:	|      jsr 16ef6 <__ltsf2>
   17130:	|      addq.l #8,sp
   17132:	|      tst.l d0
   17134:	|  /-- bge.s 171a6 <atan2f+0x14e>
   17136:	|  |   clr.l -(sp)
   17138:	|  |   move.l 36(sp),-(sp)
   1713c:	|  |   jsr 16ef6 <__ltsf2>
   17142:	|  |   addq.l #8,sp
   17144:	|  |   tst.l d0
   17146:	|  +-- bge.s 171a6 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17148:	|  |   move.l 36(sp),-(sp)
   1714c:	|  |   move.l 36(sp),-(sp)
   17150:	|  |   jsr 16b7c <__divsf3>
   17156:	|  |   addq.l #8,sp
   17158:	|  |   move.l d0,16(sp)
   1715c:	|  |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   17162:	|  |   movea.l d0,a6
   17164:	|  |   move.l 16(sp),d0
   17168:	|  |   jsr -30(a6)
   1716c:	|  |   move.l d0,12(sp)
   17170:	|  |   move.l 12(sp),d0
   17174:	|  |   move.l d0,-(sp)
   17176:	|  |   jsr 16be8 <__extendsfdf2>
   1717c:	|  |   addq.l #4,sp
   1717e:	|  |   move.l #1413754136,-(sp)
   17184:	|  |   move.l #1074340347,-(sp)
   1718a:	|  |   move.l d1,-(sp)
   1718c:	|  |   move.l d0,-(sp)
   1718e:	|  |   jsr 16f62 <__subdf3>
   17194:	|  |   lea 16(sp),sp
   17198:	|  |   move.l d1,-(sp)
   1719a:	|  |   move.l d0,-(sp)
   1719c:	|  |   jsr 16ffa <__truncdfsf2>
   171a2:	|  |   addq.l #8,sp
   171a4:	+--|-- bra.s 17200 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   171a6:	|  \-> clr.l -(sp)
   171a8:	|      move.l 40(sp),-(sp)
   171ac:	|      jsr 16bb2 <__eqsf2>
   171b2:	|      addq.l #8,sp
   171b4:	|      tst.l d0
   171b6:	|  /-- bne.s 171d2 <atan2f+0x17a>
   171b8:	|  |   clr.l -(sp)
   171ba:	|  |   move.l 36(sp),-(sp)
   171be:	|  |   jsr 16e3c <__gtsf2>
   171c4:	|  |   addq.l #8,sp
   171c6:	|  |   tst.l d0
   171c8:	|  +-- ble.s 171d2 <atan2f+0x17a>
        return PI / 2;
   171ca:	|  |   move.l #1070141403,d0
   171d0:	+--|-- bra.s 17200 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   171d2:	|  \-> clr.l -(sp)
   171d4:	|      move.l 40(sp),-(sp)
   171d8:	|      jsr 16bb2 <__eqsf2>
   171de:	|      addq.l #8,sp
   171e0:	|      tst.l d0
   171e2:	|  /-- bne.s 171fe <atan2f+0x1a6>
   171e4:	|  |   clr.l -(sp)
   171e6:	|  |   move.l 36(sp),-(sp)
   171ea:	|  |   jsr 16ef6 <__ltsf2>
   171f0:	|  |   addq.l #8,sp
   171f2:	|  |   tst.l d0
   171f4:	|  +-- bge.s 171fe <atan2f+0x1a6>
        return -PI / 2;
   171f6:	|  |   move.l #-1077342245,d0
   171fc:	+--|-- bra.s 17200 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   171fe:	|  \-> moveq #0,d0
    }
}
   17200:	\----> movea.l (sp)+,a6
   17202:	       lea 24(sp),sp
   17206:	       rts

00017208 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17208:	lea -24(sp),sp
   1720c:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   1720e:	move.l 32(sp),20(sp)
   17214:	move.l 36(sp),24(sp)
   1721a:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   17220:	movea.l d0,a6
   17222:	move.l 20(sp),d0
   17226:	move.l 24(sp),d1
   1722a:	jsr -96(a6)
   1722e:	move.l d0,4(sp)
   17232:	move.l d1,8(sp)
   17236:	move.l 4(sp),12(sp)
   1723c:	move.l 8(sp),16(sp)
   17242:	move.l 12(sp),d0
   17246:	move.l 16(sp),d1
}
   1724a:	movea.l (sp)+,a6
   1724c:	lea 24(sp),sp
   17250:	rts

00017252 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17252:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17256:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1725a:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   1725e:	mulu.w 8(sp),d1
	addw	d1, d0
   17262:	add.w d1,d0
	swap	d0
   17264:	swap d0
	clrw	d0
   17266:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17268:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   1726c:	mulu.w 10(sp),d1
	addl	d1, d0
   17270:	add.l d1,d0
	rts
   17272:	rts

00017274 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17274:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17276:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   1727a:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   1727e:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17284:	   /-- bcc.s 1729c <__udivsi3+0x28>
	movel	d0, d2
   17286:	   |   move.l d0,d2
	clrw	d2
   17288:	   |   clr.w d2
	swap	d2
   1728a:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   1728c:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   1728e:	   |   move.w d2,d0
	swap	d0
   17290:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17292:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17296:	   |   divu.w d1,d2
	movew	d2, d0
   17298:	   |   move.w d2,d0
	jra	6f
   1729a:	/--|-- bra.s 172cc <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   1729c:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   1729e:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   172a0:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   172a2:	|  |   cmpi.l #65536,d1
	jcc	4b
   172a8:	|  \-- bcc.s 1729e <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   172aa:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   172ac:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   172b2:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   172b4:	|      mulu.w d0,d1
	swap	d2
   172b6:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   172b8:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   172ba:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   172bc:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   172be:	|  /-- bne.s 172ca <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   172c0:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   172c2:	|  +-- bcs.s 172ca <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   172c4:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   172c8:	+--|-- bls.s 172cc <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   172ca:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   172cc:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   172ce:	       rts

000172d0 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   172d0:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   172d2:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   172d4:	    move.l 12(sp),d1
	jpl	1f
   172d8:	/-- bpl.s 172de <__divsi3+0xe>
	negl	d1
   172da:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   172dc:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   172de:	\-> move.l 8(sp),d0
	jpl	2f
   172e2:	/-- bpl.s 172e8 <__divsi3+0x18>
	negl	d0
   172e4:	|   neg.l d0
	negb	d2
   172e6:	|   neg.b d2

2:	movel	d1, sp@-
   172e8:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   172ea:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   172ec:	    jsr 17274 <__udivsi3>
	addql	#8, sp
   172f2:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   172f4:	    tst.b d2
	jpl	3f
   172f6:	/-- bpl.s 172fa <__divsi3+0x2a>
	negl	d0
   172f8:	|   neg.l d0

3:	movel	sp@+, d2
   172fa:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   172fc:	    rts

000172fe <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   172fe:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17302:	move.l 4(sp),d0
	movel	d1, sp@-
   17306:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17308:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   1730a:	jsr 172d0 <__divsi3>
	addql	#8, sp
   17310:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17312:	move.l 8(sp),d1
	movel	d1, sp@-
   17316:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17318:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1731a:	jsr 17252 <__mulsi3>
	addql	#8, sp
   17320:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17322:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17326:	sub.l d0,d1
	movel	d1, d0
   17328:	move.l d1,d0
	rts
   1732a:	rts

0001732c <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   1732c:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17330:	move.l 4(sp),d0
	movel	d1, sp@-
   17334:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17336:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17338:	jsr 17274 <__udivsi3>
	addql	#8, sp
   1733e:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17340:	move.l 8(sp),d1
	movel	d1, sp@-
   17344:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17346:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17348:	jsr 17252 <__mulsi3>
	addql	#8, sp
   1734e:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17350:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17354:	sub.l d0,d1
	movel	d1, d0
   17356:	move.l d1,d0
	rts
   17358:	rts

0001735a <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   1735a:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   1735c:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17360:	jsr -516(a6)
    move.l (sp)+, a6
   17364:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17366:	rts

00017368 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17368:	move.b d0,(a3)+
	rts
   1736a:	rts
