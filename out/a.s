
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #106496,d0
       8:	       subi.l #106496,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1a000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #106496,d0
      40:	       subi.l #106496,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1a000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 7252 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #106496,d0
      7e:	       subi.l #106496,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1a000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 139cc <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1a7a4 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 139e4 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1a000 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 139cc <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1a7a4 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1a000 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 139cc <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1a7a4 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 179d2 <PutChar+0x4>
     35c:	|  |              |   jsr 16f2c <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1a7ac <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1a7ac <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1a7ac <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1a7ac <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1a7ac <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1a7ac <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1a7ac <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 179fc <PutChar+0x2e>
     834:	|   jsr 16f2c <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1a7ac <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17a18 <PutChar+0x4a>
     8a6:	|   jsr 16f2c <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1a7ac <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1a7ac <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1a7ac <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1a7ac <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1a7ac <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1a7ac <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1a7ac <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1a7ac <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1a7a4 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1a7ac <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 139cc <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1a7ac <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1a6aa <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1a764 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1a760 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1a6aa <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9622 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1a6ae <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1a6b2 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2bb6 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17a40 <PutChar+0x72>
     e1a:	          jsr 16f2c <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1a6c6 <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17a59 <PutChar+0x8b>
     e30:	      |   jsr 16f2c <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1a6c0 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     ,-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     '-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1a7b0 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1a6c6 <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17a87 <PutChar+0xb9>
     ef0:	|         jsr 16f2c <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     ,-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  ,--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1a7b0 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  '-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  '----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17aa7 <PutChar+0xd9>
     f3c:	|         jsr 16f2c <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1a6f8 <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1a6fc <winHeight>,d0
     f6e:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17ac7 <PutChar+0xf9>
     fbe:	|         jsr 16f2c <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	'-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1a7a4 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   ,-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17adc <PutChar+0x10e>
    1010:	   |   jsr 16f2c <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1a7ac <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1a6f4 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #106498,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   ,-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	,--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  '-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	'----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #106562,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   ,-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	,--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  '-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	'----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #106610,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   ,-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	,--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  '-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	'----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #106650,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1a6ec <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   ,-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	,--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  '-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	'----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   ,-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   '-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 17b17 <PutChar+0x149>
    11c6:	                jsr 16f2c <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1a6e4 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	,-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1a6d8 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1a7b0 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     ,-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  ,--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1a6f8 <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1a6f8 <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1a6f8 <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 178b8 <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1a6c6 <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1a6f8 <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 178b8 <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1a6d8 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     ,-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  ,--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1a6fc <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 178b8 <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1a6fc <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 178b8 <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1a7b0 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  '-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  '----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  '-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  '----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1a6f0 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1a6ec <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           ,-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        ,--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  '-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        '----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           ,-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	'-----------|-> nop
  }
}
    13e4:	            '-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1a6f4 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1a6f4 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1a6d2 <CstApplyBackDropCounter>,d0
    14ce:	,-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1a6d2 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1a6d2 <CstApplyBackDropCounter>
  }    
}
    14e4:	'-> nop
    14e6:	    rts

000014e8 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    14e8:	                                                                         lea -28(sp),sp
    14ec:	                                                                         movem.l d2-d7/a2-a6,-(sp)
    14f0:	                                                                         movea.l 76(sp),a3
    14f4:	                                                                         movea.l 80(sp),a2
    14f8:	                                                                         move.l 84(sp),d2
    14fc:	                                                                         move.l 88(sp),d6
    1500:	                                                                         move.w d2,54(sp)
    1504:	                                                                         move.w d6,58(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
  //In Case nothing needs to be done return sprite mask without changes
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP); 
    1508:	                                                                         move.l (a3),d0
    150a:	   ,-------------------------------------------------------------------- bmi.w 1a1e <CstDrawZBuffer+0x536>
    150e:	   |                                                                     asr.l #3,d0
    1510:	   |                                                                     lea 178b8 <__mulsi3>,a4
    1516:	   |                                                                     move.l 4(a3),-(sp)
    151a:	   |                                                                     move.l d0,-(sp)
    151c:	   |                                                                     jsr (a4)
    151e:	   |                                                                     addq.l #8,sp
    1520:	   |                                                                     lea 1a7a4 <SysBase>,a0
    1526:	   |                                                                     movea.l (a0),a6
    1528:	   |                                                                     moveq #2,d1
    152a:	   |                                                                     jsr -684(a6)
    152e:	   |                                                                     move.l d0,64(sp)
  UBYTE *tmpbuffer = AllocVec( (sprite->width/8+2)*sprite->height, MEMF_CHIP);               
    1532:	   |                                                                     move.l (a3),d0
    1534:	,--|-------------------------------------------------------------------- bmi.w 1a18 <CstDrawZBuffer+0x530>
    1538:	|  |  ,----------------------------------------------------------------> asr.l #3,d0
    153a:	|  |  |                                                                  move.l 4(a3),-(sp)
    153e:	|  |  |                                                                  movea.l d0,a6
    1540:	|  |  |                                                                  pea 2(a6)
    1544:	|  |  |                                                                  jsr (a4)
    1546:	|  |  |                                                                  addq.l #8,sp
    1548:	|  |  |                                                                  lea 1a7a4 <SysBase>,a0
    154e:	|  |  |                                                                  movea.l (a0),a6
    1550:	|  |  |                                                                  moveq #2,d1
    1552:	|  |  |                                                                  jsr -684(a6)
    1556:	|  |  |                                                                  move.l d0,60(sp)
  #ifdef EMULATOR
    debug_register_bitmap(returnvalue, "SpriteMask", sprite->width, sprite->height, 1, 0);
    debug_register_bitmap(tmpbuffer, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
  #endif    

  while(zbuffer) 
    155a:	|  |  |                                                                  cmpa.w #0,a2
    155e:	|  |  |  ,-------------------------------------------------------------- beq.w 1a4c <CstDrawZBuffer+0x564>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1562:	|  |  |  |                                                               move.w d2,56(sp)
    1566:	|  |  |  |                                                               move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1568:	|  |  |  |                                                               move.l 4(a3),d7
  WORD zbufferset = 0;
    156c:	|  |  |  |                                                               clr.w d4
          else
          {       
            //xdiffbyte += -2;      
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();         
            custom->bltdpt = tmpbuffer + 2;       
    156e:	|  |  |  |                                                               addq.l #2,d0
    1570:	|  |  |  |                                                               move.l d0,68(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1574:	|  |  |  |                          ,----------------------------------> move.w d6,d3
    1576:	|  |  |  |                          |                                    add.w d7,d3
    if(spritey2oncanvas < zbuffer->yz) 
    1578:	|  |  |  |                          |                                    andi.l #65535,d3
    157e:	|  |  |  |                          |                                    cmp.l 16(a2),d3
    1582:	|  |  |  |                          |  ,-------------------------------- bge.w 1710 <CstDrawZBuffer+0x228>
    WORD zbufferx1oncanvas = zbuffer->topx;
    1586:	|  |  |  |                          |  |                                 movea.l 8(a2),a5
    WORD zbuffery1oncanvas = zbuffer->topy;
    158a:	|  |  |  |                          |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    158e:	|  |  |  |                          |  |                                 move.w a5,d0
    1590:	|  |  |  |                          |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1594:	|  |  |  |                          |  |                                 move.w 6(a2),d4
    1598:	|  |  |  |                          |  |                                 add.w d5,d4
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    159a:	|  |  |  |                          |  |                                 move.w a5,d1
    159c:	|  |  |  |                          |  |                                 cmp.w 54(sp),d1
    15a0:	|  |  |  |                       ,--|--|-------------------------------- bge.w 1886 <CstDrawZBuffer+0x39e>
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    15a4:	|  |  |  |                       |  |  |                                 cmp.w 54(sp),d0
    15a8:	|  |  |  |        ,--------------|--|--|-------------------------------- ble.w 170e <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    15ac:	|  |  |  |        |              |  |  |                                 move.w 58(sp),d0
    15b0:	|  |  |  |        |              |  |  |                                 cmp.w d0,d5
    15b2:	|  |  |  |        |     ,--------|--|--|-------------------------------- blt.w 19fa <CstDrawZBuffer+0x512>
    15b6:	|  |  |  |        |     |        |  |  |                                 movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    15b8:	|  |  |  |        |     |        |  |  |                                 cmpa.l d3,a0
    15ba:	|  |  |  |        +-----|--------|--|--|-------------------------------- bge.w 170e <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    15be:	|  |  |  |        |     |        |  |  |                                 move.w 56(sp),d0
    15c2:	|  |  |  |        |     |        |  |  |                                 sub.w a5,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    15c4:	|  |  |  |        |     |        |  |  |                                 move.w d0,d7
    15c6:	|  |  |  |        |     |        |  |  |                                 andi.w #15,d7
          bytewidth = (sprite->width/16)*2;
    15ca:	|  |  |  |        |     |        |  |  |                                 tst.l d2
    15cc:	|  |  |  |        |  ,--|--------|--|--|-------------------------------- blt.w 1740 <CstDrawZBuffer+0x258>
    15d0:	|  |  |  |        |  |  |  ,-----|--|--|-------------------------------> asr.l #4,d2
    15d2:	|  |  |  |        |  |  |  |     |  |  |                                 add.w d2,d2
          custom->bltafwm = 0xffff;
    15d4:	|  |  |  |        |  |  |  |     |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
          custom->bltalwm = 0xffff;                      
    15dc:	|  |  |  |        |  |  |  |     |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
          custom->bltcon1 = 0;          
    15e4:	|  |  |  |        |  |  |  |     |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>
            WaitBlit();   
    15ec:	|  |  |  |        |  |  |  |     |  |  |                                 lea 1a7b0 <GfxBase>,a0
    15f2:	|  |  |  |        |  |  |  |     |  |  |                                 movea.l (a0),a6
            custom->bltdpt = tmpbuffer + 2;       
    15f4:	|  |  |  |        |  |  |  |     |  |  |                                 movea.l 68(sp),a5
          xdiffbyte = (xdiff / 16) * 2;          
    15f8:	|  |  |  |        |  |  |  |     |  |  |                                 lsr.w #4,d0
    15fa:	|  |  |  |        |  |  |  |     |  |  |                                 add.w d0,d0
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    15fc:	|  |  |  |        |  |  |  |     |  |  |                                 andi.l #65535,d0
    1602:	|  |  |  |        |  |  |  |     |  |  |                                 add.l 20(a2),d0
    1606:	|  |  |  |        |  |  |  |     |  |  |                                 move.l d0,50(sp)
          if (xdiffrest) {
    160a:	|  |  |  |        |  |  |  |     |  |  |                                 tst.w d7
    160c:	|  |  |  |        |  |  |  |     |  |  |           ,-------------------- beq.w 1784 <CstDrawZBuffer+0x29c>
            bytewidth += 2; 
    1610:	|  |  |  |        |  |  |  |     |  |  |           |  ,----------------> addq.w #2,d2
            WaitBlit();   
    1612:	|  |  |  |        |  |  |  |     |  |  |           |  |                  jsr -228(a6)
            custom->bltdpt = tmpbuffer;                
    1616:	|  |  |  |        |  |  |  |     |  |  |           |  |                  move.l 60(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    161e:	|  |  |  |        |  |  |  |     |  |  |           |  |                  moveq #12,d0
    1620:	|  |  |  |        |  |  |  |     |  |  |           |  |                  lsl.w d0,d7
    1622:	|  |  |  |        |  |  |  |     |  |  |           |  |                  move.w #2544,d0
    1626:	|  |  |  |        |  |  |  |     |  |  |           |  |                  sub.w d7,d0
    1628:	|  |  |  |        |  |  |  |     |  |  |           |  |                  move.w d0,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    162e:	|  |  |  |        |  |  |  |     |  |  |           |  |                  move.l (a2),d0
    1630:	|  |  |  |        |  |  |  |     |  |  |           |  |                  move.l d0,d1
    1632:	|  |  |  |  ,-----|--|--|--|-----|--|--|-----------|--|----------------- bmi.w 1b0a <CstDrawZBuffer+0x622>
    1636:	|  |  |  |  |     |  |  |  |     |  |  |           |  |                  asr.l #3,d1
    1638:	|  |  |  |  |     |  |  |  |     |  |  |           |  |                  sub.w d2,d1
    163a:	|  |  |  |  |     |  |  |  |     |  |  |           |  |                  move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
            custom->bltdmod = 0;                                                            
    1640:	|  |  |  |  |     |  |  |  |     |  |  |           |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1648:	|  |  |  |  |  ,--|--|--|--|-----|--|--|-----------|--|----------------> move.w d6,d1
    164a:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |                  sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    164c:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |                  movea.w d4,a0
    164e:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |                  cmpa.l d3,a0
    1650:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  ,-------------- ble.w 17be <CstDrawZBuffer+0x2d6>
          height = sprite->height;
    1654:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1658:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |        |      move.l d0,-(sp)
    165a:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |        |      move.w d1,-(sp)
    165c:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |        |      clr.w -(sp)
    165e:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |        |      jsr (a4)
    1660:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |        |      addq.l #8,sp
    1662:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |        |      tst.l d0
    1664:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  ,-----|----- blt.w 17d0 <CstDrawZBuffer+0x2e8>
    1668:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    166a:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   add.l 50(sp),d0
    166e:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
        UWORD bltsize =  height*64+bytewidth/2;          
    1674:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    1676:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1678:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   add.w d2,d4
    167a:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
       
        WaitBlit();
    1680:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   lea 1a7b0 <GfxBase>,a0
    1686:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    1688:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    168c:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
        custom->bltalwm = 0xffff;
    1694:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
        custom->bltamod = 2;
    169c:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
        custom->bltbmod = 0;
    16a4:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e09>
        custom->bltdmod = 0;
    16ac:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
        custom->bltcon0 = 0xd0c; //Copy A to D
    16b4:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
        custom->bltcon1 = 0;        
    16bc:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>

        custom->bltapt = (APTR) tmpbuffer + 2;
    16c4:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.l a5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16ca:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.l (a3),d2
    16cc:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.l 4(a3),d7
    16d0:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.l d2,d0
    16d2:	|  |  |  |  |  |  |  |  |  |     |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 1854 <CstDrawZBuffer+0x36c>
    16d6:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    16d8:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   move.l d7,-(sp)
    16da:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    16dc:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   jsr (a4)
    16de:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    16e0:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    16e2:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    16e4:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    16e6:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    16e8:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    16ec:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
        custom->bltdpt = (APTR) returnvalue;
    16f2:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   move.l 64(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    16fa:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   move.w d7,d1
    16fc:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    16fe:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    1700:	|  |  |  |  |  |  |  |  |  |     |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 1842 <CstDrawZBuffer+0x35a>
    1704:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    1706:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    1708:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
      zbufferset = 1;
    170e:	|  |  |  |  |  |  >--|--|--|-----|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d4

      }
    }
    zbuffer = zbuffer->nextPanel;
    1710:	|  |  |  |  |  |  |  |  |  |     |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    1714:	|  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    1718:	|  |  |  |  |  |  |  |  |  |     |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 1574 <CstDrawZBuffer+0x8c>
  }
  FreeVec( tmpbuffer);
    171c:	|  |  |  |  |  |  |  |  |  |     |        |  |  |  |  |  |  |  |  |  |   lea 1a7a4 <SysBase>,a0
    1722:	|  |  |  |  |  |  |  |  |  |     |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    1724:	|  |  |  |  |  |  |  |  |  |     |        |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a1
    1728:	|  |  |  |  |  |  |  |  |  |     |        |  |  |  |  |  |  |  |  |  |   jsr -690(a6)
  if(zbufferset == 0)
    172c:	|  |  |  |  |  |  |  |  |  |     |        |  |  |  |  |  |  |  |  |  |   tst.w d4
    172e:	|  |  |  |  |  |  |  |  |  |     |     ,--|--|--|--|--|--|--|--|--|--|-- beq.w 1a5a <CstDrawZBuffer+0x572>

  }

  return returnvalue;

}
    1732:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   move.l 64(sp),d0
    1736:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    173a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   lea 28(sp),sp
    173e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    1740:	|  |  |  |  |  |  |  >--|--|-----|-----|--|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    1742:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    1744:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    1746:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    1748:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
          custom->bltalwm = 0xffff;                      
    1750:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
          custom->bltcon1 = 0;          
    1758:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>
            WaitBlit();   
    1760:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   lea 1a7b0 <GfxBase>,a0
    1766:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
            custom->bltdpt = tmpbuffer + 2;       
    1768:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a5
          xdiffbyte = (xdiff / 16) * 2;          
    176c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    176e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   add.w d0,d0
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    1770:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   andi.l #65535,d0
    1776:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d0
    177a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   move.l d0,50(sp)
          if (xdiffrest) {
    177e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   tst.w d7
    1780:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  '--|--|--|--|--|-- bne.w 1610 <CstDrawZBuffer+0x128>
            WaitBlit();         
    1784:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  '-----|--|--|--|--|-> jsr -228(a6)
            custom->bltdpt = tmpbuffer + 2;       
    1788:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |        |  |  |  |  |   move.l 68(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
            custom->bltcon0 = 4096 + 0x9f0;              
    1790:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |        |  |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1798:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |        |  |  |  |  |   move.l (a2),d0
    179a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |        |  |  |  |  |   move.l d0,d1
    179c:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--------|--|--|--|--|-- bmi.w 1af2 <CstDrawZBuffer+0x60a>
    17a0:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |  |  |  |   asr.l #3,d1
    17a2:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |  |  |  |   sub.w d2,d1
    17a4:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
            custom->bltdmod = 2;                                                            
    17aa:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    17b2:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--------|--|--|--|--|-> move.w d6,d1
    17b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    17b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |   movea.w d4,a0
    17b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |   cmpa.l d3,a0
    17ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  '--|-- bgt.w 1654 <CstDrawZBuffer+0x16c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    17be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|-----|-> sub.w d6,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    17c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    17c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    17c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    17c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr (a4)
    17c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    17ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    17cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 1668 <CstDrawZBuffer+0x180>
    17d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    17d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    17d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l 50(sp),d0
    17d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
        UWORD bltsize =  height*64+bytewidth/2;          
    17de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    17e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    17e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    17e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
        WaitBlit();
    17ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1a7b0 <GfxBase>,a0
    17f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    17f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    17f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
        custom->bltalwm = 0xffff;
    17fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
        custom->bltamod = 2;
    1806:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
        custom->bltbmod = 0;
    180e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e09>
        custom->bltdmod = 0;
    1816:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
        custom->bltcon0 = 0xd0c; //Copy A to D
    181e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
        custom->bltcon1 = 0;        
    1826:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>
        custom->bltapt = (APTR) tmpbuffer + 2;
    182e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l a5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1834:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    1836:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 4(a3),d7
    183a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    183c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 16d6 <CstDrawZBuffer+0x1ee>
    1840:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 1854 <CstDrawZBuffer+0x36c>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1842:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    1844:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    1846:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    1848:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    184a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    1850:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 170e <CstDrawZBuffer+0x226>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1854:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    1856:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    1858:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        move.l d7,-(sp)
    185a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    185c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        jsr (a4)
    185e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    1860:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    1862:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1864:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1866:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1868:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    186c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
        custom->bltdpt = (APTR) returnvalue;
    1872:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        move.l 64(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    187a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        move.w d7,d1
    187c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    187e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    1880:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 1704 <CstDrawZBuffer+0x21c>
    1884:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 1842 <CstDrawZBuffer+0x35a>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1886:	|  |  |  |  |  |  |  |  |  |  |  '--|--|-------------------------------> move.w 56(sp),d1
    188a:	|  |  |  |  |  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    188c:	|  |  |  |  |  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    1892:	|  |  |  |  |  |  |  |  |  |  |     |  |                                 move.l d1,46(sp)
    1896:	|  |  |  |  |  |  |  |  |  |  |     |  |                                 movea.w a5,a1
    1898:	|  |  |  |  |  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    189a:	|  |  |  |  |  |  +--|--|--|--|-----|--|-------------------------------- bge.w 170e <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    189e:	|  |  |  |  |  |  |  |  |  |  |     |  |                                 move.w 58(sp),d1
    18a2:	|  |  |  |  |  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    18a4:	|  |  |  |  |  |  |  |  |  |  |     |  |           ,-------------------- bge.w 19d4 <CstDrawZBuffer+0x4ec>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    18a8:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     cmp.w 58(sp),d4
    18ac:	|  |  |  |  |  |  +--|--|--|--|-----|--|-----------|-------------------- ble.w 170e <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    18b0:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     suba.w 56(sp),a5
          xdiffbyte = (xdiff / 16) * 2;          
    18b4:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     move.w a5,d7
    18b6:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     lsr.w #4,d7
    18b8:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     move.w d7,50(sp)
          xdiffrest = (xdiff - xdiffbyte * 8);       
    18bc:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     move.w a5,d1
    18be:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     andi.w #15,d1
    18c2:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          bytewidth = (sprite->width/16)*2 + 2;
    18c4:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     tst.l d2
    18c6:	|  |  |  |  |  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 195e <CstDrawZBuffer+0x476>
    18ca:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    18cc:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    18ce:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    18d0:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    18d2:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l 46(sp),a0
    18d6:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  ,-------------- ble.w 1972 <CstDrawZBuffer+0x48a>
            WaitBlit();  
    18da:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1a7b0 <GfxBase>,a0
    18e0:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    18e2:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    18e6:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
            custom->bltalwm = 0xffff;          
    18ee:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
            custom->bltdpt = tmpbuffer;        
    18f6:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 60(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
            custom->bltcon1 = 0;               
    18fe:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1906:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    190a:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    190c:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    190e:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.w 1992 <CstDrawZBuffer+0x4aa>
    1912:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    1914:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a1
    1916:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a1
            if (xdiffrest) {
    1918:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |     |      clr.w d1
    191a:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |     |      cmp.w a5,d1
    191c:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.w 19a0 <CstDrawZBuffer+0x4b8>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    1920:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w a5,d7
    1922:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    1924:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d7
    1926:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d7,a5
    1928:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lea 2544(a5),a5
    192c:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1932:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
              custom->bltdmod = 0;                                                            
    1938:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
            custom->bltdpt = tmpbuffer + 2;       
    1940:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.l 60(sp),a5
    1944:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #2,a5
              xdiffbyte += 2;                 
    1946:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w 50(sp),d7
    194a:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d7
    194c:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d7,d7
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    194e:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d7
    1954:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   suba.l d7,a0
    1956:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,50(sp)
    195a:	|  |  |  |  |  +--|--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 1648 <CstDrawZBuffer+0x160>
          bytewidth = (sprite->width/16)*2 + 2;
    195e:	|  |  |  |  |  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d7
    1960:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d7,d2
    1962:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    1964:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    1966:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    1968:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    196a:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l 46(sp),a0
    196e:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- bgt.w 18da <CstDrawZBuffer+0x3f2>
              KPrintF("Cstdrawzbuffer: Current version onl supports zbuffer size equal to screen size");
    1972:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 17b33 <PutChar+0x165>
    1978:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 16f2c <KPrintF>
              return FALSE;
    197e:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    1980:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  |  |   clr.l 64(sp)
}
    1984:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  |  |   move.l 64(sp),d0
    1988:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    198c:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  |  |   lea 28(sp),sp
    1990:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1992:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    1994:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    1996:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a1
    1998:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a1
            if (xdiffrest) {
    199a:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |     |   clr.w d1
    199c:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |     |   cmp.w a5,d1
    199e:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 1920 <CstDrawZBuffer+0x438>
              custom->bltcon0 = 0x9f0;              
    19a0:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19a8:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  move.w a1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
              custom->bltdmod = 0;                                                            
    19ae:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
            custom->bltdpt = tmpbuffer + 2;       
    19b6:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  movea.l 60(sp),a5
    19ba:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  addq.l #2,a5
              xdiffbyte += 2;                 
    19bc:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  move.w 50(sp),d7
    19c0:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d7
    19c2:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  add.w d7,d7
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    19c4:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d7
    19ca:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  suba.l d7,a0
    19cc:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,50(sp)
    19d0:	|  |  |  |  |  +--|--|--|--|--|-----|--|--------|--|--|----------------- bra.w 1648 <CstDrawZBuffer+0x160>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    19d4:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19d6:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    19d8:	|  |  |  |  |  |  +--|--|--|--|-----|--|--------|-----|----------------- bge.w 170e <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    19dc:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  suba.w 56(sp),a5
          xdiffbyte = (xdiff / 16) * 2;          
    19e0:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  move.w a5,d7
    19e2:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d7
    19e4:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  move.w d7,50(sp)
          xdiffrest = (xdiff - xdiffbyte * 8);       
    19e8:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  move.w a5,d1
    19ea:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d1
    19ee:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          bytewidth = (sprite->width/16)*2 + 2;
    19f0:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    19f2:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     '----------------- bge.w 18ca <CstDrawZBuffer+0x3e2>
    19f6:	|  |  |  |  |  |  |  |  |  |  |     |  |        '----------------------- bra.w 195e <CstDrawZBuffer+0x476>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19fa:	|  |  |  |  |  |  |  |  '--|--|-----|--|-------------------------------> cmp.w 58(sp),d4
    19fe:	|  |  |  |  |  |  '--|-----|--|-----|--|-------------------------------- ble.w 170e <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1a02:	|  |  |  |  |  |     |     |  |     |  |                                 move.w 56(sp),d0
    1a06:	|  |  |  |  |  |     |     |  |     |  |                                 sub.w a5,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1a08:	|  |  |  |  |  |     |     |  |     |  |                                 move.w d0,d7
    1a0a:	|  |  |  |  |  |     |     |  |     |  |                                 andi.w #15,d7
          bytewidth = (sprite->width/16)*2;
    1a0e:	|  |  |  |  |  |     |     |  |     |  |                                 tst.l d2
    1a10:	|  |  |  |  |  |     |     '--|-----|--|-------------------------------- bge.w 15d0 <CstDrawZBuffer+0xe8>
    1a14:	|  |  |  |  |  |     '--------|-----|--|-------------------------------- bra.w 1740 <CstDrawZBuffer+0x258>
  UBYTE *tmpbuffer = AllocVec( (sprite->width/8+2)*sprite->height, MEMF_CHIP);               
    1a18:	>--|--|--|--|--|--------------|-----|--|-------------------------------> addq.l #7,d0
    1a1a:	|  |  +--|--|--|--------------|-----|--|-------------------------------- bra.w 1538 <CstDrawZBuffer+0x50>
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP); 
    1a1e:	|  '--|--|--|--|--------------|-----|--|-------------------------------> addq.l #7,d0
    1a20:	|     |  |  |  |              |     |  |                                 asr.l #3,d0
    1a22:	|     |  |  |  |              |     |  |                                 lea 178b8 <__mulsi3>,a4
    1a28:	|     |  |  |  |              |     |  |                                 move.l 4(a3),-(sp)
    1a2c:	|     |  |  |  |              |     |  |                                 move.l d0,-(sp)
    1a2e:	|     |  |  |  |              |     |  |                                 jsr (a4)
    1a30:	|     |  |  |  |              |     |  |                                 addq.l #8,sp
    1a32:	|     |  |  |  |              |     |  |                                 lea 1a7a4 <SysBase>,a0
    1a38:	|     |  |  |  |              |     |  |                                 movea.l (a0),a6
    1a3a:	|     |  |  |  |              |     |  |                                 moveq #2,d1
    1a3c:	|     |  |  |  |              |     |  |                                 jsr -684(a6)
    1a40:	|     |  |  |  |              |     |  |                                 move.l d0,64(sp)
  UBYTE *tmpbuffer = AllocVec( (sprite->width/8+2)*sprite->height, MEMF_CHIP);               
    1a44:	|     |  |  |  |              |     |  |                                 move.l (a3),d0
    1a46:	|     '--|--|--|--------------|-----|--|-------------------------------- bpl.w 1538 <CstDrawZBuffer+0x50>
    1a4a:	'--------|--|--|--------------|-----|--|-------------------------------- bra.s 1a18 <CstDrawZBuffer+0x530>
    1a4c:	         '--|--|--------------|-----|--|-------------------------------> movea.l d0,a1
  FreeVec( tmpbuffer);
    1a4e:	            |  |              |     |  |                                 lea 1a7a4 <SysBase>,a0
    1a54:	            |  |              |     |  |                                 movea.l (a0),a6
    1a56:	            |  |              |     |  |                                 jsr -690(a6)
    WaitBlit();
    1a5a:	            |  |              |     |  '-------------------------------> movea.l 1a7b0 <GfxBase>,a6
    1a60:	            |  |              |     |                                    jsr -228(a6)
    custom->bltafwm = 0xffff;
    1a64:	            |  |              |     |                                    move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
    custom->bltalwm = 0xffff;
    1a6c:	            |  |              |     |                                    move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
    custom->bltamod = 0;
    1a74:	            |  |              |     |                                    move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
    custom->bltbmod = 0;
    1a7c:	            |  |              |     |                                    move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e09>
    custom->bltcmod = 0;
    1a84:	            |  |              |     |                                    move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e07>
    custom->bltdmod = 0;
    1a8c:	            |  |              |     |                                    move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1a94:	            |  |              |     |                                    move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
    custom->bltcon1 = 0;        
    1a9c:	            |  |              |     |                                    move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1aa4:	            |  |              |     |                                    move.l (a3),d2
    1aa6:	            |  |              |     |                                    move.l 4(a3),d3
    1aaa:	            |  |              |     |                                    move.l d2,d0
    1aac:	            |  |              |     |                          ,-------- bmi.w 1b32 <CstDrawZBuffer+0x64a>
    1ab0:	            |  |              |     |                          |         asr.l #3,d0
    1ab2:	            |  |              |     |                          |         move.l d3,-(sp)
    1ab4:	            |  |              |     |                          |         move.l d0,-(sp)
    1ab6:	            |  |              |     |                          |         jsr (a4)
    1ab8:	            |  |              |     |                          |         addq.l #8,sp
    1aba:	            |  |              |     |                          |         move.l d0,d1
    1abc:	            |  |              |     |                          |         add.l d0,d1
    1abe:	            |  |              |     |                          |         add.l d1,d1
    1ac0:	            |  |              |     |                          |         add.l d1,d0
    1ac2:	            |  |              |     |                          |         add.l 24(a3),d0
    1ac6:	            |  |              |     |                          |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltdpt = (APTR) returnvalue;
    1acc:	            |  |              |     |                          |         move.l 64(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1ad4:	            |  |              |     |                          |         lsl.w #6,d3
    1ad6:	            |  |              |     |                          |         tst.l d2
    1ad8:	            |  |              |     |                       ,--|-------- blt.s 1b22 <CstDrawZBuffer+0x63a>
    1ada:	            |  |              |     |                       |  |  ,----> asr.l #4,d2
    1adc:	            |  |              |     |                       |  |  |      add.w d2,d3
    1ade:	            |  |              |     |                       |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
}
    1ae4:	            |  |              |     |                       |  |  |  ,-> move.l 64(sp),d0
    1ae8:	            |  |              |     |                       |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1aec:	            |  |              |     |                       |  |  |  |   lea 28(sp),sp
    1af0:	            |  |              |     |                       |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1af2:	            |  |              '-----|-----------------------|--|--|--|-> addq.l #7,d1
    1af4:	            |  |                    |                       |  |  |  |   asr.l #3,d1
    1af6:	            |  |                    |                       |  |  |  |   sub.w d2,d1
    1af8:	            |  |                    |                       |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
            custom->bltdmod = 2;                                                            
    1afe:	            |  |                    |                       |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
    1b06:	            |  |                    '-----------------------|--|--|--|-- bra.w 17b2 <CstDrawZBuffer+0x2ca>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1b0a:	            '--|--------------------------------------------|--|--|--|-> addq.l #7,d1
    1b0c:	               |                                            |  |  |  |   asr.l #3,d1
    1b0e:	               |                                            |  |  |  |   sub.w d2,d1
    1b10:	               |                                            |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
            custom->bltdmod = 0;                                                            
    1b16:	               |                                            |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
    1b1e:	               '--------------------------------------------|--|--|--|-- bra.w 1648 <CstDrawZBuffer+0x160>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b22:	                                                            >--|--|--|-> moveq #15,d0
    1b24:	                                                            |  |  |  |   add.l d0,d2
    1b26:	                                                            |  |  |  |   asr.l #4,d2
    1b28:	                                                            |  |  |  |   add.w d2,d3
    1b2a:	                                                            |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    1b30:	                                                            |  |  |  '-- bra.s 1ae4 <CstDrawZBuffer+0x5fc>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1b32:	                                                            |  '--|----> addq.l #7,d0
    1b34:	                                                            |     |      asr.l #3,d0
    1b36:	                                                            |     |      move.l d3,-(sp)
    1b38:	                                                            |     |      move.l d0,-(sp)
    1b3a:	                                                            |     |      jsr (a4)
    1b3c:	                                                            |     |      addq.l #8,sp
    1b3e:	                                                            |     |      move.l d0,d1
    1b40:	                                                            |     |      add.l d0,d1
    1b42:	                                                            |     |      add.l d1,d1
    1b44:	                                                            |     |      add.l d1,d0
    1b46:	                                                            |     |      add.l 24(a3),d0
    1b4a:	                                                            |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltdpt = (APTR) returnvalue;
    1b50:	                                                            |     |      move.l 64(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b58:	                                                            |     |      lsl.w #6,d3
    1b5a:	                                                            |     |      tst.l d2
    1b5c:	                                                            |     '----- bge.w 1ada <CstDrawZBuffer+0x5f2>
    1b60:	                                                            '----------- bra.s 1b22 <CstDrawZBuffer+0x63a>

00001b62 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1b62:	    lea -20(sp),sp
    1b66:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1b68:	    move.l 1a6d8 <CstDrawBuffer>,d0
    1b6e:	,-- beq.s 1b88 <CstFreeBuffer+0x26>
    1b70:	|   move.l 1a6d8 <CstDrawBuffer>,20(sp)
    1b78:	|   move.l 1a7a4 <SysBase>,d0
    1b7e:	|   movea.l d0,a6
    1b80:	|   movea.l 20(sp),a1
    1b84:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1b88:	'-> move.l 1a6d4 <CstViewBuffer>,d0
    1b8e:	,-- beq.s 1ba8 <CstFreeBuffer+0x46>
    1b90:	|   move.l 1a6d4 <CstViewBuffer>,16(sp)
    1b98:	|   move.l 1a7a4 <SysBase>,d0
    1b9e:	|   movea.l d0,a6
    1ba0:	|   movea.l 16(sp),a1
    1ba4:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1ba8:	'-> move.l 1a6ce <CstCopperList>,d0
    1bae:	,-- beq.s 1bc8 <CstFreeBuffer+0x66>
    1bb0:	|   move.l 1a6ce <CstCopperList>,12(sp)
    1bb8:	|   move.l 1a7a4 <SysBase>,d0
    1bbe:	|   movea.l d0,a6
    1bc0:	|   movea.l 12(sp),a1
    1bc4:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1bc8:	'-> move.l 1a6c6 <CstBackDrop>,d0
    1bce:	,-- beq.s 1be8 <CstFreeBuffer+0x86>
    1bd0:	|   move.l 1a6c6 <CstBackDrop>,8(sp)
    1bd8:	|   move.l 1a7a4 <SysBase>,d0
    1bde:	|   movea.l d0,a6
    1be0:	|   movea.l 8(sp),a1
    1be4:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1be8:	'-> move.l 1a6ca <CstBackDropBackup>,d0
    1bee:	,-- beq.s 1c08 <CstFreeBuffer+0xa6>
    1bf0:	|   move.l 1a6ca <CstBackDropBackup>,4(sp)
    1bf8:	|   move.l 1a7a4 <SysBase>,d0
    1bfe:	|   movea.l d0,a6
    1c00:	|   movea.l 4(sp),a1
    1c04:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1c08:	'-> clr.l 1a6d8 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1c0e:	    clr.l 1a6d4 <CstViewBuffer>
  CstCopperList = NULL;
    1c14:	    clr.l 1a6ce <CstCopperList>
  CstBackDrop = NULL;
    1c1a:	    clr.l 1a6c6 <CstBackDrop>

}
    1c20:	    nop
    1c22:	    movea.l (sp)+,a6
    1c24:	    lea 20(sp),sp
    1c28:	    rts

00001c2a <CstFreeze>:



void CstFreeze( ) {
    1c2a:	       lea -36(sp),sp
    1c2e:	       move.l a6,-(sp)
    1c30:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1c32:	       pea 17b82 <PutChar+0x1b4>
    1c38:	       jsr 16f2c <KPrintF>
    1c3e:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1c40:	       move.l 1a6f8 <winWidth>,d0
    1c46:	       lsr.l #3,d0
    1c48:	       move.l d0,d1
    1c4a:	       move.l 1a6fc <winHeight>,d0
    1c50:	       move.l d0,d0
    1c52:	       muls.w d0,d1
    1c54:	       move.w d1,d0
    1c56:	       add.w d0,d0
    1c58:	       add.w d0,d0
    1c5a:	       move.w d0,d2
    1c5c:	       add.w d1,d2
    1c5e:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1c62:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1c6a:	       moveq #0,d0
    1c6c:	       move.w 26(sp),d0
    1c70:	       move.l d0,18(sp)
    1c74:	       clr.l 14(sp)
    1c78:	       move.l 1a7a4 <SysBase>,d0
    1c7e:	       movea.l d0,a6
    1c80:	       move.l 18(sp),d0
    1c84:	       move.l 14(sp),d1
    1c88:	       jsr -684(a6)
    1c8c:	       move.l d0,10(sp)
    1c90:	       move.l 10(sp),d0
    1c94:	       move.l d0,1a6ca <CstBackDropBackup>
  if( !CstBackDropBackup)
    1c9a:	       move.l 1a6ca <CstBackDropBackup>,d0
    1ca0:	   ,-- bne.s 1cb0 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1ca2:	   |   pea 17ba9 <PutChar+0x1db>
    1ca8:	   |   jsr 16f2c <KPrintF>
    1cae:	   |   addq.l #4,sp

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1cb0:	   '-> move.l 1a6c6 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1cb8:	       move.l 1a6ca <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1cc0:	       clr.l 32(sp)
    1cc4:	   ,-- bra.s 1cea <CstFreeze+0xc0>
  {
    *dst++ = *src++;
    1cc6:	,--|-> move.l 40(sp),d1
    1cca:	|  |   move.l d1,d0
    1ccc:	|  |   addq.l #4,d0
    1cce:	|  |   move.l d0,40(sp)
    1cd2:	|  |   move.l 36(sp),d0
    1cd6:	|  |   move.l d0,d2
    1cd8:	|  |   addq.l #4,d2
    1cda:	|  |   move.l d2,36(sp)
    1cde:	|  |   movea.l d1,a0
    1ce0:	|  |   move.l (a0),d1
    1ce2:	|  |   movea.l d0,a0
    1ce4:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1ce6:	|  |   addq.l #1,32(sp)
    1cea:	|  '-> move.w 26(sp),d0
    1cee:	|      lsr.w #2,d0
    1cf0:	|      move.w d0,d0
    1cf2:	|      andi.l #65535,d0
    1cf8:	|      cmp.l 32(sp),d0
    1cfc:	'----- bgt.s 1cc6 <CstFreeze+0x9c>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1cfe:	       move.l 1a6d4 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1d06:	       move.l 1a6c6 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1d0e:	       clr.l 28(sp)
    1d12:	   ,-- bra.s 1d38 <CstFreeze+0x10e>
  {
    *dst++ = *src++;
    1d14:	,--|-> move.l 40(sp),d1
    1d18:	|  |   move.l d1,d0
    1d1a:	|  |   addq.l #4,d0
    1d1c:	|  |   move.l d0,40(sp)
    1d20:	|  |   move.l 36(sp),d0
    1d24:	|  |   move.l d0,d2
    1d26:	|  |   addq.l #4,d2
    1d28:	|  |   move.l d2,36(sp)
    1d2c:	|  |   movea.l d1,a0
    1d2e:	|  |   move.l (a0),d1
    1d30:	|  |   movea.l d0,a0
    1d32:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d34:	|  |   addq.l #1,28(sp)
    1d38:	|  '-> move.w 26(sp),d0
    1d3c:	|      lsr.w #2,d0
    1d3e:	|      move.w d0,d0
    1d40:	|      andi.l #65535,d0
    1d46:	|      cmp.l 28(sp),d0
    1d4a:	'----- bgt.s 1d14 <CstFreeze+0xea>
  }

  CstApplyBackDropCounter = 2;
    1d4c:	       move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1d54:	       move.l 1a6f8 <winWidth>,d0
    1d5a:	       lsr.l #4,d0
    1d5c:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1d62:	       move.l a0,d1
    1d64:	       addq.l #2,d1
    1d66:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1d6c:	       move.l d0,d0
    1d6e:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1d70:	       move.l 1a6fc <winHeight>,d0
    1d76:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1d7c:	       move.l a0,d1
    1d7e:	       addq.l #2,d1
    1d80:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1d86:	       move.l d0,d0
    1d88:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d8a:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1d90:	       move.l a0,d0
    1d92:	       addq.l #2,d0
    1d94:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1d9a:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d9c:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1da2:	       move.l a0,d0
    1da4:	       addq.l #2,d0
    1da6:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1dac:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1dae:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1db4:	       move.l a0,d0
    1db6:	       addq.l #2,d0
    1db8:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1dbe:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1dc0:	       pea 17be1 <PutChar+0x213>
    1dc6:	       jsr 16f2c <KPrintF>
    1dcc:	       addq.l #4,sp

}  
    1dce:	       nop
    1dd0:	       move.l (sp)+,d2
    1dd2:	       movea.l (sp)+,a6
    1dd4:	       lea 36(sp),sp
    1dd8:	       rts

00001dda <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1dda:	             lea -144(sp),sp
    1dde:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1de2:	             pea 17bf5 <PutChar+0x227>
    1de8:	             jsr 16f2c <KPrintF>
    1dee:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1df0:	             move.l 164(sp),-(sp)
    1df4:	             jsr 6bc <get2bytes>
    1dfa:	             addq.l #4,sp
    1dfc:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1e00:	             move.l 164(sp),-(sp)
    1e04:	             jsr 6bc <get2bytes>
    1e0a:	             addq.l #4,sp
    1e0c:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1e10:	             move.w 134(sp),d0
    1e14:	             lsr.w #3,d0
    1e16:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1e1a:	             move.w 130(sp),d0
    1e1e:	             lsr.w #1,d0
    1e20:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1e24:	             move.l 1a6f8 <winWidth>,d0
    1e2a:	             lsr.l #3,d0
    1e2c:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1e30:	             move.w 130(sp),d0
    1e34:	             muls.w 132(sp),d0
    1e38:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1e3c:	             move.w 124(sp),d1
    1e40:	             move.w d1,d0
    1e42:	             add.w d0,d0
    1e44:	             add.w d0,d0
    1e46:	             move.w d0,d2
    1e48:	             add.w d1,d2
    1e4a:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1e4e:	             move.w 1a6c0 <CstPaletteLoaded>,d0
    1e54:	,----------- bne.w 1eee <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1e58:	|            move.w #384,120(sp)

    if(CstPalette) {
    1e5e:	|            move.l 1a6f0 <CstPalette>,d0
    1e64:	|        ,-- beq.s 1e7e <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1e66:	|        |   move.l 1a6f0 <CstPalette>,116(sp)
    1e6e:	|        |   move.l 1a7a4 <SysBase>,d0
    1e74:	|        |   movea.l d0,a6
    1e76:	|        |   movea.l 116(sp),a1
    1e7a:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1e7e:	|        '-> moveq #64,d0
    1e80:	|            move.l d0,112(sp)
    1e84:	|            clr.l 108(sp)
    1e88:	|            move.l 1a7a4 <SysBase>,d0
    1e8e:	|            movea.l d0,a6
    1e90:	|            move.l 112(sp),d0
    1e94:	|            move.l 108(sp),d1
    1e98:	|            jsr -684(a6)
    1e9c:	|            move.l d0,104(sp)
    1ea0:	|            move.l 104(sp),d0
    1ea4:	|            move.l d0,1a6f0 <CstPalette>
    CstPaletteLoaded = 1;
    1eaa:	|            move.w #1,1a6c0 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1eb2:	|            move.l 1a6f0 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1eba:	|            clr.l 152(sp)
    1ebe:	|        ,-- bra.s 1ee4 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1ec0:	|     ,--|-> move.l 164(sp),-(sp)
    1ec4:	|     |  |   jsr 6bc <get2bytes>
    1eca:	|     |  |   addq.l #4,sp
    1ecc:	|     |  |   move.l d0,d1
    1ece:	|     |  |   move.l 156(sp),d0
    1ed2:	|     |  |   move.l d0,d2
    1ed4:	|     |  |   addq.l #2,d2
    1ed6:	|     |  |   move.l d2,156(sp)
    1eda:	|     |  |   move.l d1,d1
    1edc:	|     |  |   movea.l d0,a0
    1ede:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ee0:	|     |  |   addq.l #1,152(sp)
    1ee4:	|     |  '-> moveq #31,d0
    1ee6:	|     |      cmp.l 152(sp),d0
    1eea:	|     '----- bge.s 1ec0 <CstLoadBackdrop+0xe6>
    1eec:	|  ,-------- bra.s 1f0c <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1eee:	'--|-------> clr.l 148(sp)
    1ef2:	   |     ,-- bra.s 1f04 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1ef4:	   |  ,--|-> move.l 164(sp),-(sp)
    1ef8:	   |  |  |   jsr 6bc <get2bytes>
    1efe:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1f00:	   |  |  |   addq.l #1,148(sp)
    1f04:	   |  |  '-> moveq #31,d2
    1f06:	   |  |      cmp.l 148(sp),d2
    1f0a:	   |  '----- bge.s 1ef4 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1f0c:	   '-------> moveq #0,d0
    1f0e:	             move.w 122(sp),d0
    1f12:	             move.l d0,100(sp)
    1f16:	             moveq #2,d0
    1f18:	             move.l d0,96(sp)
    1f1c:	             move.l 1a7a4 <SysBase>,d0
    1f22:	             movea.l d0,a6
    1f24:	             move.l 100(sp),d0
    1f28:	             move.l 96(sp),d1
    1f2c:	             jsr -684(a6)
    1f30:	             move.l d0,92(sp)
    1f34:	             move.l 92(sp),d0
    1f38:	             move.l d0,88(sp)
  if( !tmpbuffer)
    1f3c:	         ,-- bne.s 1f4c <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1f3e:	         |   pea 17c24 <PutChar+0x256>
    1f44:	         |   jsr 16f2c <KPrintF>
    1f4a:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1f4c:	         '-> moveq #0,d0
    1f4e:	             move.w 124(sp),d0
    1f52:	             move.l d0,84(sp)
    1f56:	             moveq #2,d2
    1f58:	             move.l d2,80(sp)
    1f5c:	             move.l 1a7a4 <SysBase>,d0
    1f62:	             movea.l d0,a6
    1f64:	             move.l 84(sp),d0
    1f68:	             move.l 80(sp),d1
    1f6c:	             jsr -684(a6)
    1f70:	             move.l d0,76(sp)
    1f74:	             move.l 76(sp),d0
    1f78:	             move.l d0,72(sp)
  if( !tmpmask)
    1f7c:	         ,-- bne.s 1f8c <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1f7e:	         |   pea 17c5a <PutChar+0x28c>
    1f84:	         |   jsr 16f2c <KPrintF>
    1f8a:	         |   addq.l #4,sp
#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1f8c:	         '-> move.l 164(sp),68(sp)
    1f92:	             move.l 88(sp),64(sp)
    1f98:	             moveq #2,d0
    1f9a:	             move.l d0,60(sp)
    1f9e:	             move.w 122(sp),d0
    1fa2:	             lsr.w #1,d0
    1fa4:	             move.w d0,d0
    1fa6:	             andi.l #65535,d0
    1fac:	             move.l d0,56(sp)
    1fb0:	             move.l 1a7ac <DOSBase>,d0
    1fb6:	             movea.l d0,a6
    1fb8:	             move.l 68(sp),d1
    1fbc:	             move.l 64(sp),d2
    1fc0:	             move.l 60(sp),d3
    1fc4:	             move.l 56(sp),d4
    1fc8:	             jsr -324(a6)
    1fcc:	             move.l d0,52(sp)
    1fd0:	             move.l 52(sp),d0
    1fd4:	             move.w d0,50(sp)
  if(!count) {
    1fd8:	         ,-- bne.s 1fec <CstLoadBackdrop+0x212>
    KPrintF("Error while reading stream");
    1fda:	         |   pea 17c8e <PutChar+0x2c0>
    1fe0:	         |   jsr 16f2c <KPrintF>
    1fe6:	         |   addq.l #4,sp
    return;
    1fe8:	   ,-----|-- bra.w 2238 <CstLoadBackdrop+0x45e>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    1fec:	   |     '-> move.l 164(sp),46(sp)
    1ff2:	   |         move.l 72(sp),42(sp)
    1ff8:	   |         moveq #2,d2
    1ffa:	   |         move.l d2,38(sp)
    1ffe:	   |         move.w 124(sp),d0
    2002:	   |         lsr.w #1,d0
    2004:	   |         move.w d0,d0
    2006:	   |         andi.l #65535,d0
    200c:	   |         move.l d0,34(sp)
    2010:	   |         move.l 1a7ac <DOSBase>,d0
    2016:	   |         movea.l d0,a6
    2018:	   |         move.l 46(sp),d1
    201c:	   |         move.l 42(sp),d2
    2020:	   |         move.l 38(sp),d3
    2024:	   |         move.l 34(sp),d4
    2028:	   |         jsr -324(a6)
    202c:	   |         move.l d0,30(sp)
    2030:	   |         move.l 30(sp),d0
    2034:	   |         move.w d0,50(sp)
   

  if(!count) {
    2038:	   |     ,-- bne.s 204c <CstLoadBackdrop+0x272>
    KPrintF("Error while reading stream");
    203a:	   |     |   pea 17c8e <PutChar+0x2c0>
    2040:	   |     |   jsr 16f2c <KPrintF>
    2046:	   |     |   addq.l #4,sp
    return;
    2048:	   +-----|-- bra.w 2238 <CstLoadBackdrop+0x45e>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    204c:	   |     '-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    2054:	   |         move.l 1a6c6 <CstBackDrop>,d0
    205a:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    205e:	   |         move.l 172(sp),d0
    2062:	   |         move.w d0,d1
    2064:	   |         muls.w 126(sp),d1
    2068:	   |         move.l 168(sp),d0
    206c:	   |     ,-- bpl.s 2070 <CstLoadBackdrop+0x296>
    206e:	   |     |   addq.l #7,d0
    2070:	   |     '-> asr.l #3,d0
    2072:	   |         move.l d0,d0
    2074:	   |         movea.w d1,a0
    2076:	   |         adda.w d0,a0
    2078:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    207c:	   |         moveq #0,d0
    207e:	   |         move.w 24(sp),d0
    2082:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    2086:	   |         pea 17ca9 <PutChar+0x2db>
    208c:	   |         jsr 16f2c <KPrintF>
    2092:	   |         addq.l #4,sp


  WaitBlit();
    2094:	   |         move.l 1a7b0 <GfxBase>,d0
    209a:	   |         movea.l d0,a6
    209c:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    20a0:	   |         movea.l 26(sp),a0
    20a4:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    20aa:	   |         movea.l 26(sp),a0
    20ae:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    20b4:	   |         movea.l 26(sp),a0
    20b8:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    20be:	   |         movea.l 26(sp),a0
    20c2:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    20c8:	   |         move.w 126(sp),d0
    20cc:	   |         sub.w 130(sp),d0
    20d0:	   |         movea.l 26(sp),a0
    20d4:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    20d8:	   |         move.w 126(sp),d0
    20dc:	   |         sub.w 130(sp),d0
    20e0:	   |         movea.l 26(sp),a0
    20e4:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    20e8:	   |         movea.l 26(sp),a0
    20ec:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    20f2:	   |         movea.l 26(sp),a0
    20f6:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    20fc:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2102:	   |         clr.l 136(sp)
    2106:	   |     ,-- bra.s 2168 <CstLoadBackdrop+0x38e>
  {    
    custom->bltapt = (APTR) tmpmask;
    2108:	   |  ,--|-> movea.l 26(sp),a0
    210c:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2112:	   |  |  |   move.l 140(sp),d0
    2116:	   |  |  |   movea.l 26(sp),a0
    211a:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    211e:	   |  |  |   move.l 144(sp),d0
    2122:	   |  |  |   movea.l 26(sp),a0
    2126:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    212a:	   |  |  |   move.l 144(sp),d0
    212e:	   |  |  |   movea.l 26(sp),a0
    2132:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    2136:	   |  |  |   move.w 132(sp),d0
    213a:	   |  |  |   lsl.w #6,d0
    213c:	   |  |  |   add.w 128(sp),d0
    2140:	   |  |  |   movea.l 26(sp),a0
    2144:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    2148:	   |  |  |   moveq #0,d0
    214a:	   |  |  |   move.w 124(sp),d0
    214e:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    2152:	   |  |  |   move.w 1a6c4 <CstBackdropSizePlane>,d0
    2158:	   |  |  |   move.w d0,d0
    215a:	   |  |  |   andi.l #65535,d0
    2160:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2164:	   |  |  |   addq.l #1,136(sp)
    2168:	   |  |  '-> moveq #4,d0
    216a:	   |  |      cmp.l 136(sp),d0
    216e:	   |  '----- bge.s 2108 <CstLoadBackdrop+0x32e>
  }    

  WaitBlit();
    2170:	   |         move.l 1a7b0 <GfxBase>,d0
    2176:	   |         movea.l d0,a6
    2178:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    217c:	   |         pea 17cc8 <PutChar+0x2fa>
    2182:	   |         jsr 16f2c <KPrintF>
    2188:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    218a:	   |         move.l 88(sp),20(sp)
    2190:	   |         move.l 1a7a4 <SysBase>,d0
    2196:	   |         movea.l d0,a6
    2198:	   |         movea.l 20(sp),a1
    219c:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    21a0:	   |         move.l 72(sp),16(sp)
    21a6:	   |         move.l 1a7a4 <SysBase>,d0
    21ac:	   |         movea.l d0,a6
    21ae:	   |         movea.l 16(sp),a1
    21b2:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    21b6:	   |         move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    21be:	   |         move.l 1a6f8 <winWidth>,d0
    21c4:	   |         lsr.l #4,d0
    21c6:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    21cc:	   |         move.l a0,d1
    21ce:	   |         addq.l #2,d1
    21d0:	   |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    21d6:	   |         move.l d0,d0
    21d8:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    21da:	   |         move.l 1a6fc <winHeight>,d0
    21e0:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    21e6:	   |         move.l a0,d1
    21e8:	   |         addq.l #2,d1
    21ea:	   |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    21f0:	   |         move.l d0,d0
    21f2:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    21f4:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    21fa:	   |         move.l a0,d0
    21fc:	   |         addq.l #2,d0
    21fe:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2204:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2206:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    220c:	   |         move.l a0,d0
    220e:	   |         addq.l #2,d0
    2210:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2216:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2218:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    221e:	   |         move.l a0,d0
    2220:	   |         addq.l #2,d0
    2222:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2228:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    222a:	   |         pea 17ce8 <PutChar+0x31a>
    2230:	   |         jsr 16f2c <KPrintF>
    2236:	   |         addq.l #4,sp

}
    2238:	   '-------> movem.l (sp)+,d2-d4/a6
    223c:	             lea 144(sp),sp
    2240:	             rts

00002242 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    2242:	                lea -72(sp),sp
    2246:	                move.l a6,-(sp)
    2248:	                move.l d2,-(sp)
    224a:	                move.l 88(sp),d1
    224e:	                move.l 92(sp),d0
    2252:	                move.w d1,d1
    2254:	                move.w d1,10(sp)
    2258:	                move.w d0,d0
    225a:	                move.w d0,8(sp)
  UWORD *destination = 0;
    225e:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    2262:	                move.w #2,1a6d2 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    226a:	                move.l 1a6c6 <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    2272:	                clr.l 56(sp)

  blitwidth = single->width/16;
    2276:	                movea.l 84(sp),a0
    227a:	                move.l (a0),d0
    227c:	                movea.l d0,a0
    227e:	                cmpa.w #0,a0
    2282:	            ,-- bge.s 2288 <CstPasteChar+0x46>
    2284:	            |   lea 15(a0),a0
    2288:	            '-> move.l a0,d0
    228a:	                asr.l #4,d0
    228c:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    2290:	            ,-- bne.s 2298 <CstPasteChar+0x56>
    2292:	            |   moveq #1,d0
    2294:	            |   move.l d0,40(sp)

  if( y < 0) {
    2298:	            '-> tst.w 8(sp)
    229c:	         ,----- bge.s 22e6 <CstPasteChar+0xa4>
    if(y + single->height < 0) {
    229e:	         |      movea.w 8(sp),a1
    22a2:	         |      movea.l 84(sp),a0
    22a6:	         |      move.l 4(a0),d0
    22aa:	         |      add.l a1,d0
    22ac:	         |  ,-- bpl.s 22c0 <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    22ae:	         |  |   pea 17d02 <PutChar+0x334>
    22b4:	         |  |   jsr 16f2c <KPrintF>
    22ba:	         |  |   addq.l #4,sp
      return;
    22bc:	,--------|--|-- bra.w 2982 <CstPasteChar+0x740>
    }
    ystartdst = 0;
    22c0:	|        |  '-> clr.l 52(sp)
    ystartsrc = y*-1;
    22c4:	|        |      move.w 8(sp),d0
    22c8:	|        |      ext.l d0
    22ca:	|        |      move.l d0,d1
    22cc:	|        |      neg.l d1
    22ce:	|        |      move.l d1,48(sp)
    blitheight = single->height+y;
    22d2:	|        |      movea.l 84(sp),a0
    22d6:	|        |      move.l 4(a0),d0
    22da:	|        |      movea.w 8(sp),a0
    22de:	|        |      add.l a0,d0
    22e0:	|        |      move.l d0,44(sp)
    22e4:	|     ,--|----- bra.s 2358 <CstPasteChar+0x116>
  } else if(y+single->height > (int) winHeight) {
    22e6:	|     |  '----> movea.w 8(sp),a1
    22ea:	|     |         movea.l 84(sp),a0
    22ee:	|     |         move.l 4(a0),d0
    22f2:	|     |         move.l a1,d1
    22f4:	|     |         add.l d0,d1
    22f6:	|     |         move.l 1a6fc <winHeight>,d0
    22fc:	|     |         cmp.l d1,d0
    22fe:	|     |  ,----- bge.s 2340 <CstPasteChar+0xfe>
    if(y  > (int) winHeight) {
    2300:	|     |  |      movea.w 8(sp),a0
    2304:	|     |  |      move.l 1a6fc <winHeight>,d0
    230a:	|     |  |      cmp.l a0,d0
    230c:	|     |  |  ,-- bge.s 2320 <CstPasteChar+0xde>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    230e:	|     |  |  |   pea 17d02 <PutChar+0x334>
    2314:	|     |  |  |   jsr 16f2c <KPrintF>
    231a:	|     |  |  |   addq.l #4,sp
      return;
    231c:	+-----|--|--|-- bra.w 2982 <CstPasteChar+0x740>
    }
    ystartdst = y;
    2320:	|     |  |  '-> movea.w 8(sp),a0
    2324:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    2328:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    232c:	|     |  |      move.l 1a6fc <winHeight>,d0
    2332:	|     |  |      movea.w 8(sp),a0
    2336:	|     |  |      move.l d0,d1
    2338:	|     |  |      sub.l a0,d1
    233a:	|     |  |      move.l d1,44(sp)
    233e:	|     +--|----- bra.s 2358 <CstPasteChar+0x116>
  } else {
    ystartdst = y;
    2340:	|     |  '----> movea.w 8(sp),a0
    2344:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    2348:	|     |         clr.l 48(sp)
    blitheight = single->height;
    234c:	|     |         movea.l 84(sp),a0
    2350:	|     |         move.l 4(a0),d0
    2354:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    2358:	|     '-------> tst.w 10(sp)
    235c:	|        ,----- bge.w 24ce <CstPasteChar+0x28c>
    if(x + single->width < 0) {
    2360:	|        |      movea.w 10(sp),a1
    2364:	|        |      movea.l 84(sp),a0
    2368:	|        |      move.l (a0),d0
    236a:	|        |      add.l a1,d0
    236c:	|        |  ,-- bpl.s 2380 <CstPasteChar+0x13e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    236e:	|        |  |   pea 17d02 <PutChar+0x334>
    2374:	|        |  |   jsr 16f2c <KPrintF>
    237a:	|        |  |   addq.l #4,sp
      return;
    237c:	+--------|--|-- bra.w 2982 <CstPasteChar+0x740>

    }
    
    extrawords = 1;
    2380:	|        |  '-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    2386:	|        |      move.w 10(sp),d0
    238a:	|        |  ,-- bpl.s 2390 <CstPasteChar+0x14e>
    238c:	|        |  |   addi.w #15,d0
    2390:	|        |  '-> asr.w #4,d0
    2392:	|        |      neg.w d0
    2394:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    2398:	|        |      move.w 10(sp),d0
    239c:	|        |      ext.l d0
    239e:	|        |      neg.l d0
    23a0:	|        |      andi.l #-2147483633,d0
    23a6:	|        |  ,-- bpl.s 23b0 <CstPasteChar+0x16e>
    23a8:	|        |  |   subq.l #1,d0
    23aa:	|        |  |   moveq #-16,d1
    23ac:	|        |  |   or.l d1,d0
    23ae:	|        |  |   addq.l #1,d0
    23b0:	|        |  '-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    23b4:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    23b8:	|        |      movea.l 84(sp),a0
    23bc:	|        |      move.l 24(a0),d0
    23c0:	|        |      move.l d0,d1
    23c2:	|        |      moveq #0,d0
    23c4:	|        |      move.w 76(sp),d0
    23c8:	|        |      add.l d0,d0
    23ca:	|        |      move.l d1,d2
    23cc:	|        |      add.l d0,d2
    23ce:	|        |      movea.l 84(sp),a0
    23d2:	|        |      move.l (a0),d0
    23d4:	|        |      move.l 48(sp),-(sp)
    23d8:	|        |      move.l d0,-(sp)
    23da:	|        |      jsr 178b8 <__mulsi3>
    23e0:	|        |      addq.l #8,sp
    23e2:	|        |      lsr.l #3,d0
    23e4:	|        |      move.l d2,d1
    23e6:	|        |      add.l d0,d1
    23e8:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    23ec:	|        |      move.l 1a6f8 <winWidth>,d0
    23f2:	|        |      move.l 52(sp),-(sp)
    23f6:	|        |      move.l d0,-(sp)
    23f8:	|        |      jsr 178b8 <__mulsi3>
    23fe:	|        |      addq.l #8,sp
    2400:	|        |      lsr.l #3,d0
    2402:	|        |      move.l 28(sp),d1
    2406:	|        |      add.l d1,d0
    2408:	|        |      move.l d0,d2
    240a:	|        |      subq.l #2,d2
    240c:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2410:	|        |      move.l 1a6f8 <winWidth>,d0
    2416:	|        |      move.l 52(sp),-(sp)
    241a:	|        |      move.l d0,-(sp)
    241c:	|        |      jsr 178b8 <__mulsi3>
    2422:	|        |      addq.l #8,sp
    2424:	|        |      lsr.l #3,d0
    2426:	|        |      move.l 28(sp),d1
    242a:	|        |      add.l d1,d0
    242c:	|        |      move.l d0,d1
    242e:	|        |      subq.l #2,d1
    2430:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    2434:	|        |      moveq #0,d0
    2436:	|        |      move.w 74(sp),d0
    243a:	|        |      moveq #16,d1
    243c:	|        |      sub.l d0,d1
    243e:	|        |      move.l d1,d0
    2440:	|        |      moveq #12,d2
    2442:	|        |      lsl.l d2,d0
    2444:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2448:	|        |      movea.l 84(sp),a0
    244c:	|        |      move.l (a0),d0
    244e:	|        |      movea.l d0,a0
    2450:	|        |      cmpa.w #0,a0
    2454:	|        |  ,-- bge.s 245a <CstPasteChar+0x218>
    2456:	|        |  |   lea 15(a0),a0
    245a:	|        |  '-> move.l a0,d0
    245c:	|        |      asr.l #4,d0
    245e:	|        |      move.l d0,d0
    2460:	|        |      add.w 76(sp),d0
    2464:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    246a:	|        |      move.l a0,d1
    246c:	|        |      addq.l #2,d1
    246e:	|        |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2474:	|        |      add.w 78(sp),d0
    2478:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    247a:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2480:	|        |      move.l a0,d0
    2482:	|        |      addq.l #2,d0
    2484:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    248a:	|        |      move.l 44(sp),d0
    248e:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2490:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2496:	|        |      move.l a0,d0
    2498:	|        |      addq.l #2,d0
    249a:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    24a0:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    24a2:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    24a8:	|        |      move.l a0,d0
    24aa:	|        |      addq.l #2,d0
    24ac:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    24b2:	|        |      move.l 52(sp),d0
    24b6:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    24b8:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    24be:	|        |      move.l a0,d0
    24c0:	|        |      addq.l #2,d0
    24c2:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    24c8:	|        |      clr.w (a0)
    24ca:	|     ,--|----- bra.w 27e2 <CstPasteChar+0x5a0>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    24ce:	|     |  '----> movea.w 10(sp),a1
    24d2:	|     |         movea.l 84(sp),a0
    24d6:	|     |         move.l (a0),d0
    24d8:	|     |         move.l a1,d1
    24da:	|     |         add.l d0,d1
    24dc:	|     |         move.l 1a6f8 <winWidth>,d0
    24e2:	|     |         cmp.l d1,d0
    24e4:	|     |  ,----- bge.w 2680 <CstPasteChar+0x43e>

    if(x - single->width > (int) winWidth)
    24e8:	|     |  |      movea.w 10(sp),a1
    24ec:	|     |  |      movea.l 84(sp),a0
    24f0:	|     |  |      move.l (a0),d0
    24f2:	|     |  |      move.l a1,d1
    24f4:	|     |  |      sub.l d0,d1
    24f6:	|     |  |      move.l 1a6f8 <winWidth>,d0
    24fc:	|     |  |      cmp.l d1,d0
    24fe:	|     |  |  ,-- bge.s 2512 <CstPasteChar+0x2d0>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2500:	|     |  |  |   pea 17d02 <PutChar+0x334>
    2506:	|     |  |  |   jsr 16f2c <KPrintF>
    250c:	|     |  |  |   addq.l #4,sp
      return;
    250e:	+-----|--|--|-- bra.w 2982 <CstPasteChar+0x740>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2512:	|     |  |  '-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2516:	|     |  |      movea.w 10(sp),a1
    251a:	|     |  |      movea.l 84(sp),a0
    251e:	|     |  |      move.l (a0),d0
    2520:	|     |  |      add.l a1,d0
    2522:	|     |  |      move.l d0,d1
    2524:	|     |  |      move.l 1a6f8 <winWidth>,d0
    252a:	|     |  |      sub.l d0,d1
    252c:	|     |  |      move.l d1,d0
    252e:	|     |  |      lsr.l #4,d0
    2530:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    2534:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2538:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    253e:	|     |  |      movea.l 84(sp),a0
    2542:	|     |  |      move.l 24(a0),d0
    2546:	|     |  |      move.l d0,d2
    2548:	|     |  |      movea.l 84(sp),a0
    254c:	|     |  |      move.l (a0),d0
    254e:	|     |  |      move.l 48(sp),-(sp)
    2552:	|     |  |      move.l d0,-(sp)
    2554:	|     |  |      jsr 178b8 <__mulsi3>
    255a:	|     |  |      addq.l #8,sp
    255c:	|     |  |      lsr.l #3,d0
    255e:	|     |  |      move.l d2,d1
    2560:	|     |  |      add.l d0,d1
    2562:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2566:	|     |  |      move.l 1a6f8 <winWidth>,d0
    256c:	|     |  |      move.l 52(sp),-(sp)
    2570:	|     |  |      move.l d0,-(sp)
    2572:	|     |  |      jsr 178b8 <__mulsi3>
    2578:	|     |  |      addq.l #8,sp
    257a:	|     |  |      lsr.l #3,d0
    257c:	|     |  |      move.l 28(sp),d1
    2580:	|     |  |      add.l d0,d1
    2582:	|     |  |      move.w 10(sp),d0
    2586:	|     |  |  ,-- bpl.s 258c <CstPasteChar+0x34a>
    2588:	|     |  |  |   addi.w #15,d0
    258c:	|     |  |  '-> asr.w #4,d0
    258e:	|     |  |      movea.w d0,a0
    2590:	|     |  |      move.l a0,d0
    2592:	|     |  |      add.l a0,d0
    2594:	|     |  |      move.l d1,d2
    2596:	|     |  |      add.l d0,d2
    2598:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    259c:	|     |  |      move.l 1a6f8 <winWidth>,d0
    25a2:	|     |  |      move.l 52(sp),-(sp)
    25a6:	|     |  |      move.l d0,-(sp)
    25a8:	|     |  |      jsr 178b8 <__mulsi3>
    25ae:	|     |  |      addq.l #8,sp
    25b0:	|     |  |      lsr.l #3,d0
    25b2:	|     |  |      move.l 28(sp),d1
    25b6:	|     |  |      add.l d0,d1
    25b8:	|     |  |      move.w 10(sp),d0
    25bc:	|     |  |  ,-- bpl.s 25c2 <CstPasteChar+0x380>
    25be:	|     |  |  |   addi.w #15,d0
    25c2:	|     |  |  '-> asr.w #4,d0
    25c4:	|     |  |      movea.w d0,a0
    25c6:	|     |  |      move.l a0,d0
    25c8:	|     |  |      add.l a0,d0
    25ca:	|     |  |      move.l d1,d2
    25cc:	|     |  |      add.l d0,d2
    25ce:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    25d2:	|     |  |      movea.l 84(sp),a0
    25d6:	|     |  |      move.l (a0),d0
    25d8:	|     |  |      andi.l #-2147483633,d0
    25de:	|     |  |  ,-- bpl.s 25e8 <CstPasteChar+0x3a6>
    25e0:	|     |  |  |   subq.l #1,d0
    25e2:	|     |  |  |   moveq #-16,d1
    25e4:	|     |  |  |   or.l d1,d0
    25e6:	|     |  |  |   addq.l #1,d0
    25e8:	|     |  |  '-> moveq #12,d2
    25ea:	|     |  |      lsl.l d2,d0
    25ec:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    25f0:	|     |  |      movea.l 84(sp),a0
    25f4:	|     |  |      move.l (a0),d0
    25f6:	|     |  |      movea.l d0,a0
    25f8:	|     |  |      cmpa.w #0,a0
    25fc:	|     |  |  ,-- bge.s 2602 <CstPasteChar+0x3c0>
    25fe:	|     |  |  |   lea 15(a0),a0
    2602:	|     |  |  '-> move.l a0,d0
    2604:	|     |  |      asr.l #4,d0
    2606:	|     |  |      move.l d0,d0
    2608:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    260e:	|     |  |      move.l a0,d1
    2610:	|     |  |      addq.l #2,d1
    2612:	|     |  |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2618:	|     |  |      add.w 76(sp),d0
    261c:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    261e:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2624:	|     |  |      move.l a0,d0
    2626:	|     |  |      addq.l #2,d0
    2628:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    262e:	|     |  |      move.l 44(sp),d0
    2632:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2634:	|     |  |      move.w 10(sp),d0
    2638:	|     |  |  ,-- bpl.s 263e <CstPasteChar+0x3fc>
    263a:	|     |  |  |   addi.w #15,d0
    263e:	|     |  |  '-> asr.w #4,d0
    2640:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2646:	|     |  |      move.l a0,d1
    2648:	|     |  |      addq.l #2,d1
    264a:	|     |  |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2650:	|     |  |      add.w d0,d0
    2652:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2654:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    265a:	|     |  |      move.l a0,d0
    265c:	|     |  |      addq.l #2,d0
    265e:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2664:	|     |  |      move.l 52(sp),d0
    2668:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    266a:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2670:	|     |  |      move.l a0,d0
    2672:	|     |  |      addq.l #2,d0
    2674:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    267a:	|     |  |      clr.w (a0)
    267c:	|     +--|----- bra.w 27e2 <CstPasteChar+0x5a0>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2680:	|     |  '----> move.w #1,78(sp)
    cutwordssource = 0;
    2686:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    268a:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    268e:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    2692:	|     |         movea.l 84(sp),a0
    2696:	|     |         move.l 24(a0),d0
    269a:	|     |         move.l d0,d2
    269c:	|     |         movea.l 84(sp),a0
    26a0:	|     |         move.l (a0),d0
    26a2:	|     |         movea.l d0,a0
    26a4:	|     |         cmpa.w #0,a0
    26a8:	|     |     ,-- bge.s 26ae <CstPasteChar+0x46c>
    26aa:	|     |     |   lea 15(a0),a0
    26ae:	|     |     '-> move.l a0,d0
    26b0:	|     |         asr.l #4,d0
    26b2:	|     |         move.l 48(sp),-(sp)
    26b6:	|     |         move.l d0,-(sp)
    26b8:	|     |         jsr 178b8 <__mulsi3>
    26be:	|     |         addq.l #8,sp
    26c0:	|     |         add.l d0,d0
    26c2:	|     |         move.l d2,d1
    26c4:	|     |         add.l d0,d1
    26c6:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    26ca:	|     |         move.l 1a6f8 <winWidth>,d0
    26d0:	|     |         move.l 52(sp),-(sp)
    26d4:	|     |         move.l d0,-(sp)
    26d6:	|     |         jsr 178b8 <__mulsi3>
    26dc:	|     |         addq.l #8,sp
    26de:	|     |         lsr.l #3,d0
    26e0:	|     |         move.l 28(sp),d1
    26e4:	|     |         add.l d0,d1
    26e6:	|     |         move.w 10(sp),d0
    26ea:	|     |     ,-- bpl.s 26f0 <CstPasteChar+0x4ae>
    26ec:	|     |     |   addi.w #15,d0
    26f0:	|     |     '-> asr.w #4,d0
    26f2:	|     |         movea.w d0,a0
    26f4:	|     |         move.l a0,d0
    26f6:	|     |         add.l a0,d0
    26f8:	|     |         move.l d1,d2
    26fa:	|     |         add.l d0,d2
    26fc:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2700:	|     |         move.l 1a6f8 <winWidth>,d0
    2706:	|     |         move.l 52(sp),-(sp)
    270a:	|     |         move.l d0,-(sp)
    270c:	|     |         jsr 178b8 <__mulsi3>
    2712:	|     |         addq.l #8,sp
    2714:	|     |         lsr.l #3,d0
    2716:	|     |         move.l 28(sp),d1
    271a:	|     |         add.l d0,d1
    271c:	|     |         move.w 10(sp),d0
    2720:	|     |     ,-- bpl.s 2726 <CstPasteChar+0x4e4>
    2722:	|     |     |   addi.w #15,d0
    2726:	|     |     '-> asr.w #4,d0
    2728:	|     |         movea.w d0,a0
    272a:	|     |         move.l a0,d0
    272c:	|     |         add.l a0,d0
    272e:	|     |         move.l d1,d2
    2730:	|     |         add.l d0,d2
    2732:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    2736:	|     |         move.w 10(sp),d0
    273a:	|     |         andi.w #-32753,d0
    273e:	|     |     ,-- bpl.s 2748 <CstPasteChar+0x506>
    2740:	|     |     |   subq.w #1,d0
    2742:	|     |     |   ori.w #-16,d0
    2746:	|     |     |   addq.w #1,d0
    2748:	|     |     '-> ext.l d0
    274a:	|     |         moveq #12,d1
    274c:	|     |         lsl.l d1,d0
    274e:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2752:	|     |         movea.l 84(sp),a0
    2756:	|     |         move.l (a0),d0
    2758:	|     |         movea.l d0,a0
    275a:	|     |         cmpa.w #0,a0
    275e:	|     |     ,-- bge.s 2764 <CstPasteChar+0x522>
    2760:	|     |     |   lea 15(a0),a0
    2764:	|     |     '-> move.l a0,d0
    2766:	|     |         asr.l #4,d0
    2768:	|     |         move.l d0,d0
    276a:	|     |         add.w 76(sp),d0
    276e:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2774:	|     |         move.l a0,d1
    2776:	|     |         addq.l #2,d1
    2778:	|     |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    277e:	|     |         add.w 78(sp),d0
    2782:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2784:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    278a:	|     |         move.l a0,d0
    278c:	|     |         addq.l #2,d0
    278e:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2794:	|     |         move.l 44(sp),d0
    2798:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    279a:	|     |         move.w 10(sp),d0
    279e:	|     |     ,-- bpl.s 27a4 <CstPasteChar+0x562>
    27a0:	|     |     |   addi.w #15,d0
    27a4:	|     |     '-> asr.w #4,d0
    27a6:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    27ac:	|     |         move.l a0,d1
    27ae:	|     |         addq.l #2,d1
    27b0:	|     |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    27b6:	|     |         add.w d0,d0
    27b8:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    27ba:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    27c0:	|     |         move.l a0,d0
    27c2:	|     |         addq.l #2,d0
    27c4:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    27ca:	|     |         move.l 52(sp),d0
    27ce:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    27d0:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    27d6:	|     |         move.l a0,d0
    27d8:	|     |         addq.l #2,d0
    27da:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    27e0:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    27e2:	|     '-------> moveq #0,d0
    27e4:	|               move.w 74(sp),d0
    27e8:	|               moveq #0,d1
    27ea:	|               not.w d1
    27ec:	|               asr.l d0,d1
    27ee:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    27f2:	|               moveq #0,d1
    27f4:	|               move.w 76(sp),d1
    27f8:	|               moveq #0,d0
    27fa:	|               move.w 78(sp),d0
    27fe:	|               sub.l d0,d1
    2800:	|               move.l d1,d0
    2802:	|               add.w d0,d0
    2804:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2808:	|               move.l 1a6f8 <winWidth>,d0
    280e:	|               lsr.l #3,d0
    2810:	|               move.l d0,d2
    2812:	|               move.w 76(sp),d1
    2816:	|               sub.w 78(sp),d1
    281a:	|               move.l 40(sp),d0
    281e:	|               sub.w d0,d1
    2820:	|               move.w d1,d0
    2822:	|               add.w d1,d0
    2824:	|               add.w d2,d0
    2826:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    282a:	|               move.l 1a6f8 <winWidth>,d0
    2830:	|               lsr.l #3,d0
    2832:	|               move.l d0,d2
    2834:	|               move.w 76(sp),d1
    2838:	|               sub.w 78(sp),d1
    283c:	|               move.l 40(sp),d0
    2840:	|               sub.w d0,d1
    2842:	|               move.w d1,d0
    2844:	|               add.w d1,d0
    2846:	|               add.w d2,d0
    2848:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    284c:	|               move.l #14675968,16(sp)
  WaitBlit();
    2854:	|               move.l 1a7b0 <GfxBase>,d0
    285a:	|               movea.l d0,a6
    285c:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2860:	|               movea.l 16(sp),a0
    2864:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    286a:	|               movea.l 16(sp),a0
    286e:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2874:	|               move.w 24(sp),d0
    2878:	|               movea.l 16(sp),a0
    287c:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2880:	|               move.w 22(sp),d0
    2884:	|               movea.l 16(sp),a0
    2888:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    288c:	|               move.w 20(sp),d0
    2890:	|               movea.l 16(sp),a0
    2894:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2898:	|               move.l 1a6f8 <winWidth>,d0
    289e:	|               lsr.l #3,d0
    28a0:	|               move.l d0,d1
    28a2:	|               move.l 1a6fc <winHeight>,d0
    28a8:	|               move.l d0,d0
    28aa:	|               move.w d1,d2
    28ac:	|               muls.w d0,d2
    28ae:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    28b2:	|               move.w 1a6be <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    28ba:	|               move.w 38(sp),d0
    28be:	|               andi.w #1,d0
    28c2:	|               move.w d0,12(sp)
  if(tmp2) {
    28c6:	|        ,----- beq.s 28d0 <CstPasteChar+0x68e>
    minterm = 0xbfa;
    28c8:	|        |      move.w #3066,36(sp)
    28ce:	|        |  ,-- bra.s 28d6 <CstPasteChar+0x694>
  } else {
    minterm = 0xb0a;
    28d0:	|        '--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    28d6:	|           '-> clr.l 32(sp)
    28da:	|     ,-------- bra.w 2978 <CstPasteChar+0x736>
  {

    custom->bltcon0 = bltcon0 + minterm;
    28de:	|  ,--|-------> move.l 56(sp),d0
    28e2:	|  |  |         add.w 36(sp),d0
    28e6:	|  |  |         movea.l 16(sp),a0
    28ea:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    28ee:	|  |  |         move.l 68(sp),d0
    28f2:	|  |  |         movea.l 16(sp),a0
    28f6:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    28fa:	|  |  |         move.l 64(sp),d0
    28fe:	|  |  |         movea.l 16(sp),a0
    2902:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2906:	|  |  |         move.l 60(sp),d0
    290a:	|  |  |         movea.l 16(sp),a0
    290e:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2912:	|  |  |         move.l 44(sp),d0
    2916:	|  |  |         lsl.w #6,d0
    2918:	|  |  |         move.l 40(sp),d1
    291c:	|  |  |         add.w d1,d0
    291e:	|  |  |         sub.w 76(sp),d0
    2922:	|  |  |         add.w 78(sp),d0
    2926:	|  |  |         movea.l 16(sp),a0
    292a:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    292e:	|  |  |         moveq #0,d0
    2930:	|  |  |         move.w 14(sp),d0
    2934:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2938:	|  |  |         moveq #0,d0
    293a:	|  |  |         move.w 14(sp),d0
    293e:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2942:	|  |  |         move.w 38(sp),d0
    2946:	|  |  |         lsr.w #1,d0
    2948:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    294c:	|  |  |         move.w 38(sp),d1
    2950:	|  |  |         andi.w #1,d1
    2954:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2958:	|  |  |  ,----- beq.s 2962 <CstPasteChar+0x720>
      minterm = 0xbfa;
    295a:	|  |  |  |      move.w #3066,36(sp)
    2960:	|  |  |  |  ,-- bra.s 2968 <CstPasteChar+0x726>
    } else {
      minterm = 0xb0a;
    2962:	|  |  |  '--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2968:	|  |  |     '-> move.l 1a7b0 <GfxBase>,d0
    296e:	|  |  |         movea.l d0,a6
    2970:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2974:	|  |  |         addq.l #1,32(sp)
    2978:	|  |  '-------> moveq #4,d2
    297a:	|  |            cmp.l 32(sp),d2
    297e:	|  '----------- bge.w 28de <CstPasteChar+0x69c>
 
  }   
}
    2982:	'-------------> move.l (sp)+,d2
    2984:	                movea.l (sp)+,a6
    2986:	                lea 72(sp),sp
    298a:	                rts

0000298c <CstRestoreScreen>:


void CstRestoreScreen()
{
    298c:	                   lea -24(sp),sp
    2990:	                   move.l a6,-(sp)
    2992:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2994:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    299c:	                   move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    29a2:	,----------------- beq.w 2baa <CstRestoreScreen+0x21e>
    29a6:	|                  move.l 1a6d8 <CstDrawBuffer>,d0
    29ac:	+----------------- beq.w 2baa <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    29b0:	|                  move.l 1a7b0 <GfxBase>,d0
    29b6:	|                  movea.l d0,a6
    29b8:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    29bc:	|                  movea.l 16(sp),a0
    29c0:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    29c6:	|                  movea.l 16(sp),a0
    29ca:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    29d0:	|                  movea.l 16(sp),a0
    29d4:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    29da:	|     ,----------- bra.w 2b9e <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    29de:	|  ,--|----------> movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    29e4:	|  |  |            move.l 4(a0),d0
    29e8:	|  |  |  ,-------- beq.w 2b6c <CstRestoreScreen+0x1e0>
    29ec:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    29f2:	|  |  |  |         movea.l 4(a0),a0
    29f6:	|  |  |  |         move.l 16(a0),d0
    29fa:	|  |  |  |         moveq #2,d1
    29fc:	|  |  |  |         cmp.l d0,d1
    29fe:	|  |  |  +-------- blt.w 2b6c <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2a02:	|  |  |  |         move.l 1a6f8 <winWidth>,d0
    2a08:	|  |  |  |         lsr.l #3,d0
    2a0a:	|  |  |  |         move.l d0,d1
    2a0c:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a12:	|  |  |  |         move.w 8(a0),d0
    2a16:	|  |  |  |         add.w d0,d0
    2a18:	|  |  |  |         sub.w d0,d1
    2a1a:	|  |  |  |         movea.l 16(sp),a0
    2a1e:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2a22:	|  |  |  |         move.l 1a6f8 <winWidth>,d0
    2a28:	|  |  |  |         lsr.l #3,d0
    2a2a:	|  |  |  |         move.l d0,d1
    2a2c:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a32:	|  |  |  |         move.w 8(a0),d0
    2a36:	|  |  |  |         add.w d0,d0
    2a38:	|  |  |  |         sub.w d0,d1
    2a3a:	|  |  |  |         movea.l 16(sp),a0
    2a3e:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2a42:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a48:	|  |  |  |         move.w 14(a0),d0
    2a4c:	|  |  |  |         move.w d0,d0
    2a4e:	|  |  |  |         andi.l #65535,d0
    2a54:	|  |  |  |         move.l 1a6f8 <winWidth>,d1
    2a5a:	|  |  |  |         move.l d1,-(sp)
    2a5c:	|  |  |  |         move.l d0,-(sp)
    2a5e:	|  |  |  |         jsr 178b8 <__mulsi3>
    2a64:	|  |  |  |         addq.l #8,sp
    2a66:	|  |  |  |         move.l d0,d1
    2a68:	|  |  |  |         lsr.l #3,d1
    2a6a:	|  |  |  |         move.l 1a6c6 <CstBackDrop>,d0
    2a70:	|  |  |  |         add.l d0,d1
    2a72:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a78:	|  |  |  |         move.w 12(a0),d0
    2a7c:	|  |  |  |         move.w d0,d0
    2a7e:	|  |  |  |         andi.l #65535,d0
    2a84:	|  |  |  |         move.l d1,d2
    2a86:	|  |  |  |         add.l d0,d2
    2a88:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2a8c:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a92:	|  |  |  |         move.w 14(a0),d0
    2a96:	|  |  |  |         move.w d0,d0
    2a98:	|  |  |  |         andi.l #65535,d0
    2a9e:	|  |  |  |         move.l 1a6f8 <winWidth>,d1
    2aa4:	|  |  |  |         move.l d1,-(sp)
    2aa6:	|  |  |  |         move.l d0,-(sp)
    2aa8:	|  |  |  |         jsr 178b8 <__mulsi3>
    2aae:	|  |  |  |         addq.l #8,sp
    2ab0:	|  |  |  |         move.l d0,d1
    2ab2:	|  |  |  |         lsr.l #3,d1
    2ab4:	|  |  |  |         move.l 1a6d8 <CstDrawBuffer>,d0
    2aba:	|  |  |  |         add.l d0,d1
    2abc:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2ac2:	|  |  |  |         move.w 12(a0),d0
    2ac6:	|  |  |  |         move.w d0,d0
    2ac8:	|  |  |  |         andi.l #65535,d0
    2ace:	|  |  |  |         move.l d1,d2
    2ad0:	|  |  |  |         add.l d0,d2
    2ad2:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2ad6:	|  |  |  |         clr.l 20(sp)
    2ada:	|  |  |  |     ,-- bra.w 2b62 <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2ade:	|  |  |  |  ,--|-> move.l 28(sp),d0
    2ae2:	|  |  |  |  |  |   movea.l 16(sp),a0
    2ae6:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2aea:	|  |  |  |  |  |   move.l 24(sp),d0
    2aee:	|  |  |  |  |  |   movea.l 16(sp),a0
    2af2:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2af6:	|  |  |  |  |  |   movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2afc:	|  |  |  |  |  |   move.w 10(a0),d0
    2b00:	|  |  |  |  |  |   lsl.w #6,d0
    2b02:	|  |  |  |  |  |   movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b08:	|  |  |  |  |  |   move.w 8(a0),d1
    2b0c:	|  |  |  |  |  |   add.w d1,d0
    2b0e:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b12:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2b16:	|  |  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    2b1c:	|  |  |  |  |  |   lsr.l #3,d0
    2b1e:	|  |  |  |  |  |   move.l 1a6fc <winHeight>,d1
    2b24:	|  |  |  |  |  |   move.l d1,-(sp)
    2b26:	|  |  |  |  |  |   move.l d0,-(sp)
    2b28:	|  |  |  |  |  |   jsr 178b8 <__mulsi3>
    2b2e:	|  |  |  |  |  |   addq.l #8,sp
    2b30:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2b34:	|  |  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    2b3a:	|  |  |  |  |  |   lsr.l #3,d0
    2b3c:	|  |  |  |  |  |   move.l 1a6fc <winHeight>,d1
    2b42:	|  |  |  |  |  |   move.l d1,-(sp)
    2b44:	|  |  |  |  |  |   move.l d0,-(sp)
    2b46:	|  |  |  |  |  |   jsr 178b8 <__mulsi3>
    2b4c:	|  |  |  |  |  |   addq.l #8,sp
    2b4e:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2b52:	|  |  |  |  |  |   move.l 1a7b0 <GfxBase>,d0
    2b58:	|  |  |  |  |  |   movea.l d0,a6
    2b5a:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b5e:	|  |  |  |  |  |   addq.l #1,20(sp)
    2b62:	|  |  |  |  |  '-> moveq #4,d0
    2b64:	|  |  |  |  |      cmp.l 20(sp),d0
    2b68:	|  |  |  |  '----- bge.w 2ade <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2b6c:	|  |  |  '-------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2b74:	|  |  |            movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b7a:	|  |  |            move.l 16(a0),d0
    2b7e:	|  |  |            move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2b84:	|  |  |            move.l 12(sp),8(sp)
    2b8a:	|  |  |            move.l 1a7a4 <SysBase>,d0
    2b90:	|  |  |            movea.l d0,a6
    2b92:	|  |  |            movea.l 8(sp),a1
    2b96:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2b9a:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2b9e:	|  |  '----------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    2ba4:	|  '-------------- bne.w 29de <CstRestoreScreen+0x52>
    2ba8:	|              ,-- bra.s 2bac <CstRestoreScreen+0x220>
    return;
    2baa:	'--------------|-> nop
  }
  
}
    2bac:	               '-> move.l (sp)+,d2
    2bae:	                   movea.l (sp)+,a6
    2bb0:	                   lea 24(sp),sp
    2bb4:	                   rts

00002bb6 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2bb6:	                                                                               lea -44(sp),sp
    2bba:	                                                                               movem.l d2-d7/a2-a6,-(sp)
    2bbe:	                                                                               movea.l 92(sp),a2
    2bc2:	                                                                               move.l 96(sp),82(sp)
    2bc8:	                                                                               move.l 100(sp),d6
    2bcc:	                                                                               movea.l 104(sp),a4
    2bd0:	                                                                               move.l 108(sp),d2
    2bd4:	                                                                               move.w d6,d5
    2bd6:	                                                                               move.w a4,d3
    2bd8:	                                                                               move.w d2,50(sp)
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2bdc:	                                                                               movea.w a4,a5
    2bde:	                                                                               move.w d6,d4
    2be0:	                                                                               ext.l d4
    2be2:	                                                                               move.l a5,-(sp)
    2be4:	                                                                               move.l d4,-(sp)
    2be6:	                                                                               move.l 1a804 <zBuffer>,-(sp)
    2bec:	                                                                               move.l a2,-(sp)
    2bee:	                                                                               jsr 14e8 <CstDrawZBuffer>
    2bf4:	                                                                               move.l d0,84(sp)

  UWORD *destination = 0;
  switch(destinationtype)
    2bf8:	                                                                               lea 16(sp),sp
    2bfc:	                                                                               cmpi.w #1,50(sp)
    2c02:	                                                ,----------------------------- beq.w 300c <CstScaleSprite+0x456>
    2c06:	                                                |                              cmpi.w #2,50(sp)
    2c0c:	                                                |                       ,----- beq.w 2ed2 <CstScaleSprite+0x31c>
    2c10:	                                                |                       |      suba.l a6,a6
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2c12:	                                                |  ,--------------------|----> move.l 4(a2),d1
    2c16:	                                                |  |                    |      move.l a5,d0
    2c18:	                                                |  |                    |      add.l d1,d0
  if( y < 0) {
    2c1a:	                                                |  |                    |      tst.w d3
    2c1c:	                                                |  |           ,--------|----- blt.w 2eee <CstScaleSprite+0x338>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2c20:	                                                |  |           |  ,-----|----> movea.l 1a6fc <winHeight>,a0
    2c26:	                                                |  |           |  |     |      cmp.l a0,d0
    2c28:	                                                |  |  ,--------|--|-----|----- ble.w 3016 <CstScaleSprite+0x460>
    if(y  > (int) winHeight) {
    2c2c:	                                                |  |  |        |  |     |      cmpa.l a5,a0
    2c2e:	                     ,--------------------------|--|--|--------|--|-----|----- blt.w 30d4 <CstScaleSprite+0x51e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    ystartsrc = 0;
    blitheight = winHeight-y;
    2c32:	                     |                          |  |  |        |  |     |      suba.l a5,a0
    2c34:	                     |                          |  |  |        |  |     |      move.l a0,74(sp)
    ystartsrc = 0;
    2c38:	                     |                          |  |  |        |  |     |      moveq #0,d7


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2c3a:	                     |                          |  |  |  ,-----|--|-----|----> move.l (a2),d3
    2c3c:	                     |                          |  |  |  |     |  |     |      move.l d4,d0
    2c3e:	                     |                          |  |  |  |     |  |     |      add.l d3,d0
  if( x < 0) 
    2c40:	                     |                          |  |  |  |     |  |     |      tst.w d5
    2c42:	                     |                          |  |  |  |     |  |  ,--|----- blt.w 2f0a <CstScaleSprite+0x354>
      *CstBackDropBufferApplyCursor++ = blitheight;
      *CstBackDropBufferApplyCursor++ = 0;
      *CstBackDropBufferApplyCursor++ = ystartdst;
      *CstBackDropBufferApplyCursor++ = 0;
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2c46:	                     |                          |  |  |  |     |  |  |  |  ,-> move.l 1a6f8 <winWidth>,d5
    2c4c:	                     |                          |  |  |  |     |  |  |  |  |   cmp.l d5,d0
    2c4e:	                     |                          |  |  |  |  ,--|--|--|--|--|-- ble.w 3020 <CstScaleSprite+0x46a>

    if(x - single->width > (int) winWidth)
    2c52:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d3,d4
    2c54:	                     |                          |  |  |  |  |  |  |  |  |  |   cmp.l d5,d4
    2c56:	                     +--------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 30d4 <CstScaleSprite+0x51e>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2c5a:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d5,d0
    2c5c:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #4,d0
    2c5e:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,64(sp)
    2c62:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d0,a3
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2c64:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l #96440,d2
    2c6a:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d7,-(sp)
    2c6c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2c6e:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d2,a0
    2c70:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a0)
    2c72:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2c74:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2c76:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 68(sp),d7
    2c7a:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l d0,d7
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2c7c:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2c80:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2c84:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a5,-(sp)
    2c86:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d5,-(sp)
    2c88:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d2,a1
    2c8a:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a1)
    2c8c:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2c8e:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2c90:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d6,d1
    2c92:	                     |                          |  |  |  |  |  |  |  |  |  |   asr.w #4,d1
    2c94:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d1,a0
    2c96:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a0,a0
    2c98:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a0,a6
    2c9a:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l d0,a6
    2c9c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a6,54(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2ca0:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2ca2:	                     |                          |  |  |  |  |  |  |  |  |  |   and.l d6,d0
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    2ca4:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #0,d2
    2ca6:	                     |                          |  |  |  |  |  |  |  |  |  |   not.w d2
    2ca8:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d0,d2
    2caa:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d2,58(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    2cae:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->x = x;
      CstCleanupQueueDrawBuffer->y = y;
      CstCleanupQueueDrawBuffer->person = person; 
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2cb4:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d1,d2
    2cb6:	                     |                          |  |  |  |  |  |  |  |  |  |   add.w d1,d2
      *CstBackDropBufferApplyCursor++ = 0;
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2cb8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),d4
    2cbc:	                     |                          |  |  |  |  |  |  |  |  |  |   add.w d4,d4
    bltcon0 = 0xfca + ((x%16) << 12);
    2cbe:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d1
    2cc0:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d1,d0
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    2cc2:	                     |                          |  |  |  |  |  |  |  |  |  |   addi.w #4042,d0
    2cc6:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,78(sp)
  custom->bltcon1 = bltcon1;  
    2cca:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d6,d0
    2ccc:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.w d1,d0
    2cce:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,80(sp)
    if( destinationtype == SCREEN)
    2cd2:	                     |                          |  |  |  |  |  |  |  |  |  |   cmpi.w #1,50(sp)
    2cd8:	            ,--------|--------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 33fe <CstScaleSprite+0x848>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2cdc:	            |        |                          |  |  |  |  |  |  |  |  |  |   movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2ce2:	            |        |                          |  |  |  |  |  |  |  |  |  |   move.l d3,d0
    2ce4:	   ,--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 34b4 <CstScaleSprite+0x8fe>
    2ce8:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    2cea:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),d1
    2cee:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d0,d1
    2cf0:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d1,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2cf2:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2cf8:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d2,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2cfc:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2d00:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   lea 10(a0),a1
    2d04:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    2d0a:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w 8(a0)
    2d0e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2d14:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w d2
    2d16:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l #108452,50(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2d1e:	,--|--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> lsr.l #3,d5
    2d20:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d4,d5
    2d22:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d3
    2d24:	|  |  ,-----|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 32ec <CstScaleSprite+0x736>
    2d28:	|  |  |  ,--|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d3
    2d2a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   sub.w d3,d5
  WaitBlit();
    2d2c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lea 1a7b0 <GfxBase>,a4
    2d32:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2d34:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    2d38:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
  custom->bltalwm = bltalwm;
    2d40:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 58(sp),dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
  custom->bltamod = bltamod;
    2d48:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
  custom->bltbmod = bltbmod;
    2d4e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e09>
  custom->bltcmod = bltcmod;
    2d54:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d5,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e07>
  custom->bltdmod = bltdmod;
    2d5a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d5,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
  custom->bltcon0 = bltcon0;
    2d60:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 78(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
  custom->bltcon1 = bltcon1;  
    2d68:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 80(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2d70:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2d72:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),d5
    2d76:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsl.w #6,d5
  UWORD bltbptplus = (single->width >> 3)*single->height;
    2d78:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d4
    2d7a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #3,d4
    2d7c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d4
    bltbpt += bltbptplus;
    2d80:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
  UWORD bltcptplus = winWidth/8*winHeight;
    2d86:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 1a6f8 <winWidth>,d3
    2d8c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d3
    2d8e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 1a6fe <winHeight+0x2>,d3
    bltcpt += bltcptplus;
    2d94:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d3
    custom->bltapt = (APTR) bltapt;
    2d9a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    2da0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    2da8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 54(sp),dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    2db0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 54(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2db8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2dba:	|  |  |  |  |  ,-----|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 31f0 <CstScaleSprite+0x63a>
    2dbe:	|  |  |  |  |  |  ,--|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2dc0:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2dc2:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2dc4:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2dc6:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    2dcc:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a5
    2dd0:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltcpt += bltcptplus;
    2dd2:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l 54(sp),d6
    2dd6:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.l d3,d6
    bltdpt += bltcptplus;
    WaitBlit();
    2dd8:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2dda:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2dde:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2de0:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    2de6:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    2dec:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d6,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    2df2:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d6,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2df8:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2dfa:	|  |  |  |  |  |  |  |                 ,--------|--|--|--|--|--|--|--|--|--|-- blt.w 3234 <CstScaleSprite+0x67e>
    2dfe:	|  |  |  |  |  |  |  |                 |     ,--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e00:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e02:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2e04:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2e06:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    2e0c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltcpt += bltcptplus;
    2e0e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.l d3,d6
    WaitBlit();
    2e10:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2e12:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e16:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e18:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    2e1e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    2e24:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    2e2a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e30:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e32:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--|--|--|--|--|--|--|--|-- blt.w 3270 <CstScaleSprite+0x6ba>
    2e36:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e38:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e3a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2e3c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2e3e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    2e44:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltcpt += bltcptplus;
    2e46:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.l d3,d6
    WaitBlit();
    2e48:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2e4a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e4e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e50:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    2e56:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    2e5c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    2e62:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e68:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e6a:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 32ac <CstScaleSprite+0x6f6>
    2e6e:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e70:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e72:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2e74:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2e76:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    2e7c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    bltcpt += bltcptplus;
    2e7e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l d6,d3
    WaitBlit();
    2e80:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2e82:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e86:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e88:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    2e8e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    2e94:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d3,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    2e9a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d3,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ea0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2ea2:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 31c0 <CstScaleSprite+0x60a>
    2ea6:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2ea8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2eaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d5,d2
    2eac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d2
    2eae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    WaitBlit();
    2eb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2eb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

  FreeVec(mask);
    2eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l 50(sp),a0
    2ebe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2ec0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a1
    2ec4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -690(a6)
}
    2ec8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    2ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 44(sp),sp
    2ed0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   rts
      CstApplyBackDropCounter = 2;
    2ed2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-> move.w #2,1a6d2 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2eda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   movea.l 1a6c6 <CstBackDrop>,a6
    if(y + single->height < 0) {
    2ee0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l 4(a2),d1
    2ee4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l a5,d0
    2ee6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   add.l d1,d0
  if( y < 0) {
    2ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   tst.w d3
    2eea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----|-- bge.w 2c20 <CstScaleSprite+0x6a>
    if(y + single->height < 0) {
    2eee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-----|-----|-> tst.l d0
    2ef0:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|-----|-- blt.w 30d4 <CstScaleSprite+0x51e>
    ystartsrc = y*-1;
    2ef4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a5,d7
    2ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   neg.l d7
    blitheight = single->height+y;
    2ef8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d0,74(sp)
    ystartdst = 0;
    2efc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   suba.l a5,a5
    if(x + single->width < 0) {
    2efe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l (a2),d3
    2f00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d4,d0
    2f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   add.l d3,d0
  if( x < 0) 
    2f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   tst.w d5
    2f06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     '-- bge.w 2c46 <CstScaleSprite+0x90>
    if(x + single->width < 0) {
    2f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '-------> tst.l d0
    2f0c:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- blt.w 30d4 <CstScaleSprite+0x51e>
    cutwordssource = (x*-1)/16; 
    2f10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d6,d0
    2f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addi.w #15,d0
    2f16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.w #4,d0
    2f18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.w d0
    2f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,58(sp)
    2f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.w d0,a3
    cutmaskpixel = (x*-1)%16;   
    2f20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.l d4
    2f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    2f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  and.l d0,d4
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1a6f8 <winWidth>,d5
    2f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 178b8 <__mulsi3>,a0
    2f32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d5,-(sp)
    2f34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,-(sp)
    2f36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a0,54(sp)
    2f3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr (a0)
    2f3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addq.l #8,sp
    2f3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    2f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l 46(sp),a0
    2f44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d4
    2f46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.w 30ea <CstScaleSprite+0x534>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lea (-2,a6,d0.l),a6
    2f4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a6,54(sp)
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 58(sp),d1
    2f56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         subq.w #1,d1
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w #16,a1
    2f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         suba.l d4,a1
    2f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a1,d2
    2f60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d0
    2f62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    2f64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addi.w #4042,d2
    2f68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,78(sp)
  custom->bltcon1 = bltcon1;  
    2f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w a1,d2
    2f6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.w d0,d2
    2f70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,80(sp)
      extrawords = 1;
    2f74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2f76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 58(sp),a6
    2f7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a6,a6
    2f7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d7,-(sp)
    2f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d3,-(sp)
    2f80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,54(sp)
    2f84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         jsr (a0)
    2f86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addq.l #8,sp
    2f88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsr.l #3,d0
    2f8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.l 68(sp),a0
    2f8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a6,a0
    2f90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a0,d7
    2f92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l d0,d7
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2f94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l 24(a2),a6
    2f98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a6,d0
    2f9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d0,60(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    2f9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w a5,86(sp)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #0,d0
    2faa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         not.w d0
    2fac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         asr.l d4,d0
    2fae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d0,66(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 46(sp),d1
    2fb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d1,d4
    2fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.w d1,d4
    if( destinationtype == SCREEN)
    2fba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmpi.w #1,50(sp)
    2fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  ,----- beq.w 314e <CstScaleSprite+0x598>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2fc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,-> movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2fca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l d3,d0
    2fcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   asr.l #4,d0
    2fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w 58(sp),d0
    2fd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d2,d0
    2fd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 76(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2fdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2fe0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lea 10(a0),a1
    2fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    2fee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 8(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    2ff2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 58(sp)
    2ff6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l #108452,50(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2ffe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lsr.l #3,d5
    3000:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d4,d5
    3002:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   tst.l d3
    3004:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bge.w 2d28 <CstScaleSprite+0x172>
    3008:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bra.w 32ec <CstScaleSprite+0x736>
      destination = (UWORD *) CstDrawBuffer;      
    300c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--------|--|--|-> movea.l 1a6d8 <CstDrawBuffer>,a6
      break;
    3012:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--------|--|--|-- bra.w 2c12 <CstScaleSprite+0x5c>
    blitheight = single->height;
    3016:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--------|--|--|-> move.l d1,74(sp)
    ystartsrc = 0;
    301a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   moveq #0,d7
    301c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--------|--|--|-- bra.w 2c3a <CstScaleSprite+0x84>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3020:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--------|--|--|-> lea 178b8 <__mulsi3>,a3
    3026:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d7,-(sp)
    3028:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d3,-(sp)
    302a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a3)
    302c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    302e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    3030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 68(sp),d7
    3034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l d0,d7
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3036:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l 24(a2),d0
    303a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    303e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a5,-(sp)
    3040:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d5,-(sp)
    3042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a3)
    3044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    3046:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    3048:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d6,d4
    304a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   asr.w #4,d4
    304c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w d4,a0
    304e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a0
    3050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a6
    3052:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l d0,a6
    3054:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a6,54(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    305e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.w d4,d4
    bltcon0 = 0xfca + ((x%16) << 12);
    3060:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d6,d0
    3062:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #12,d1
    3064:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d1,d0
  custom->bltcon0 = bltcon0;
    3066:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addi.w #4042,d0
    306a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,78(sp)
  custom->bltcon1 = bltcon1;  
    306e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d6,d0
    3070:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d1,d0
    3072:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,80(sp)
    if( destinationtype == SCREEN)
    3076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   cmpi.w #1,50(sp)
    307c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    ,--|--|--|-- beq.w 3388 <CstScaleSprite+0x7d2>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    3080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3086:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   move.l d3,d0
    3088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,--------|--|--|--|-- bmi.w 3472 <CstScaleSprite+0x8bc>
    308c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   asr.l #4,d0
    308e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   addq.w #1,d0
    3090:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d4,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    309c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    30a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   lea 10(a0),a1
    30a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    30aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 8(a0)
    30ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w #-1,66(sp)
    30b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    30b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 58(sp)
    cutwordssource = 0;
    30ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   suba.l a3,a3
    extrawords = 1;
    30bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #1,d2
    30be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l #108452,50(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    30c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|--------|--|--|--|-> lsr.l #3,d5
    30c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   add.w d4,d5
    30ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   tst.l d3
    30cc:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bge.w 2d28 <CstScaleSprite+0x172>
    30d0:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bra.w 32ec <CstScaleSprite+0x736>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    30d4:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-> move.l #97538,92(sp)
}
    30dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    30e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   lea 44(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    30e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   jmp 16f2c <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    30ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  '--|--|-> adda.l d0,a6
    30ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a6,54(sp)
    30f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 58(sp),d1
    30f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w 80(sp)
    30f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w #4042,78(sp)
      extrawords = 0;
    30fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3100:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 58(sp),a6
    3104:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a6,a6
    3106:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d7,-(sp)
    3108:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d3,-(sp)
    310a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,54(sp)
    310e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   jsr (a0)
    3110:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   addq.l #8,sp
    3112:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   lsr.l #3,d0
    3114:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.l 68(sp),a0
    3118:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a6,a0
    311a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a0,d7
    311c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l d0,d7
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    311e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l 24(a2),a6
    3122:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a6,d0
    3124:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d0,60(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3128:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    312e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w a5,86(sp)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3132:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #0,d0
    3134:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   not.w d0
    3136:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   asr.l d4,d0
    3138:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d0,66(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    313c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 46(sp),d1
    3140:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d1,d4
    3142:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.w d1,d4
    if( destinationtype == SCREEN)
    3144:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   cmpi.w #1,50(sp)
    314a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  '-- bne.w 2fc4 <CstScaleSprite+0x40e>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    314e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     '----> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3154:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l #108452,50(sp)
    315c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            lea 1a7a4 <SysBase>,a1
    3162:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l (a1),a6
    3164:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #20,d0
    3166:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #0,d1
    3168:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            jsr -684(a6)
    316c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l d0,a0
    316e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3174:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    3178:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w d6,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    317a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w a4,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    317e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l 82(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3184:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l (a2),d3
    3186:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,d0
    3188:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     ,--|----------- bmi.w 34f2 <CstScaleSprite+0x93c>
    318c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            asr.l #4,d0
    318e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w 58(sp),d0
    3192:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w d2,d0
    3194:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3198:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    319e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    31a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 86(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    31a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.l 1a6f8 <winWidth>,d5
    bltalwm = 0; //Last Word of this channel almost masked out
    31ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 58(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    31b2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  ,--|--|----------> lsr.l #3,d5
    31b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d4,d5
    31b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d3
    31b8:	|  |  |  +--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bge.w 2d28 <CstScaleSprite+0x172>
    31bc:	|  |  +--|--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bra.w 32ec <CstScaleSprite+0x736>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31c0:	|  |  |  |  |  |  |     >--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    31c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    31c4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    31c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d0,d2
    31c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d5,d2
    31ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w a3,d2
    31cc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    WaitBlit();
    31d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a4),a6
    31d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
  FreeVec(mask);
    31d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 50(sp),a0
    31dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    31de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 68(sp),a1
    31e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -690(a6)
}
    31e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movem.l (sp)+,d2-d7/a2-a6
    31ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            lea 44(sp),sp
    31ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            rts
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31f0:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    31f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    31f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    31f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d2,d0
    31f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d5,d0
    31fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w a3,d0
    31fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    3202:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 60(sp),a5
    3206:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l d4,a5
    bltcpt += bltcptplus;
    3208:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l 54(sp),d6
    320c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d3,d6
    WaitBlit();
    320e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a4),a6
    3210:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3214:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3216:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    321c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    3222:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d6,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    3228:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d6,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    322e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d0
    3230:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--------|--|--|--|--|----------- bge.w 2dfe <CstScaleSprite+0x248>
    3234:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|----------> moveq #15,d1
    3236:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d1,d0
    3238:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            asr.l #4,d0
    323a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d2,d0
    323c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d5,d0
    323e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            sub.w a3,d0
    3240:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    3246:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l d4,a5
    bltcpt += bltcptplus;
    3248:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d3,d6
    WaitBlit();
    324a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l (a4),a6
    324c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3250:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3252:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    3258:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    325e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d6,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    3264:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d6,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    326a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            tst.l d0
    326c:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|----------- bge.w 2e36 <CstScaleSprite+0x280>
    3270:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|----------> moveq #15,d1
    3272:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d1,d0
    3274:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            asr.l #4,d0
    3276:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d2,d0
    3278:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d5,d0
    327a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            sub.w a3,d0
    327c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    3282:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l d4,a5
    bltcpt += bltcptplus;
    3284:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d3,d6
    WaitBlit();
    3286:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l (a4),a6
    3288:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    328c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    328e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    3294:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    329a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d6,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    32a0:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d6,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32a6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            tst.l d0
    32a8:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|----------- bge.w 2e6e <CstScaleSprite+0x2b8>
    32ac:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|----------> moveq #15,d1
    32ae:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d1,d0
    32b0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            asr.l #4,d0
    32b2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d2,d0
    32b4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d5,d0
    32b6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            sub.w a3,d0
    32b8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    32be:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l a5,d4
    bltcpt += bltcptplus;
    32c0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d6,d3
    WaitBlit();
    32c2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l (a4),a6
    32c4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32c8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    32ca:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    32d0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    32d6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d3,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    32dc:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d3,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32e2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            tst.l d0
    32e4:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|----------- bge.w 2ea6 <CstScaleSprite+0x2f0>
    32e8:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|----------- bra.w 31c0 <CstScaleSprite+0x60a>
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    32ec:	|  |  >--|--|--|--|-----------------------------------|--|--|--|--|----------> addq.l #7,d3
    32ee:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d3
    32f0:	|  |  |  |  |  |  |                                   |  |  |  |  |            sub.w d3,d5
  WaitBlit();
    32f2:	|  |  |  |  |  |  |                                   |  |  |  |  |            lea 1a7b0 <GfxBase>,a4
    32f8:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l (a4),a6
    32fa:	|  |  |  |  |  |  |                                   |  |  |  |  |            jsr -228(a6)
  custom->bltafwm = bltafwm;
    32fe:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 66(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
  custom->bltalwm = bltalwm;
    3306:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 58(sp),dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
  custom->bltamod = bltamod;
    330e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
  custom->bltbmod = bltbmod;
    3314:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e09>
  custom->bltcmod = bltcmod;
    331a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d5,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e07>
  custom->bltdmod = bltdmod;
    3320:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d5,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
  custom->bltcon0 = bltcon0;
    3326:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 78(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
  custom->bltcon1 = bltcon1;  
    332e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 80(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3336:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3338:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 72(sp),d5
    333c:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsl.w #6,d5
  UWORD bltbptplus = (single->width >> 3)*single->height;
    333e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d0,d4
    3340:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d4
    3342:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 6(a2),d4
    bltbpt += bltbptplus;
    3346:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d4
  UWORD bltcptplus = winWidth/8*winHeight;
    334c:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 1a6f8 <winWidth>,d3
    3352:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsr.l #3,d3
    3354:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 1a6fe <winHeight+0x2>,d3
    bltcpt += bltcptplus;
    335a:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d3
    custom->bltapt = (APTR) bltapt;
    3360:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    3366:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    336e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 54(sp),dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    3376:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 54(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    337e:	|  |  |  |  |  |  |                                   |  |  |  |  |            tst.l d0
    3380:	|  |  |  |  |  |  '-----------------------------------|--|--|--|--|----------- bge.w 2dbe <CstScaleSprite+0x208>
    3384:	|  |  |  |  |  '--------------------------------------|--|--|--|--|----------- bra.w 31f0 <CstScaleSprite+0x63a>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3388:	|  |  |  |  |                                         |  |  |  |  '----------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    338e:	|  |  |  |  |                                         |  |  |  |               move.l #108452,50(sp)
    3396:	|  |  |  |  |                                         |  |  |  |               lea 1a7a4 <SysBase>,a0
    339c:	|  |  |  |  |                                         |  |  |  |               movea.l (a0),a6
    339e:	|  |  |  |  |                                         |  |  |  |               moveq #20,d0
    33a0:	|  |  |  |  |                                         |  |  |  |               moveq #0,d1
    33a2:	|  |  |  |  |                                         |  |  |  |               jsr -684(a6)
    33a6:	|  |  |  |  |                                         |  |  |  |               movea.l d0,a0
    33a8:	|  |  |  |  |                                         |  |  |  |               move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    33ae:	|  |  |  |  |                                         |  |  |  |               move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    33b2:	|  |  |  |  |                                         |  |  |  |               move.w d6,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    33b4:	|  |  |  |  |                                         |  |  |  |               move.w a4,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    33b8:	|  |  |  |  |                                         |  |  |  |               move.l 82(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    33be:	|  |  |  |  |                                         |  |  |  |               move.l (a2),d3
    33c0:	|  |  |  |  |                                         |  |  |  |               move.l d3,d0
    33c2:	|  |  |  |  |                                         |  |  |  |     ,-------- bmi.w 3520 <CstScaleSprite+0x96a>
    33c6:	|  |  |  |  |                                         |  |  |  |     |         asr.l #4,d0
    33c8:	|  |  |  |  |                                         |  |  |  |     |         addq.w #1,d0
    33ca:	|  |  |  |  |                                         |  |  |  |     |         move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    33ce:	|  |  |  |  |                                         |  |  |  |     |         move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    33d4:	|  |  |  |  |                                         |  |  |  |     |         move.w d4,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    33d8:	|  |  |  |  |                                         |  |  |  |     |         move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    33dc:	|  |  |  |  |                                         |  |  |  |     |         move.l 1a6f8 <winWidth>,d5
    33e2:	|  |  |  |  |                                         |  |  |  |     |         move.w #-1,66(sp)
    33e8:	|  |  |  |  |                                         |  |  |  |     |         moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    33ea:	|  |  |  |  |                                         |  |  |  |     |         clr.w 58(sp)
    cutwordssource = 0;
    33ee:	|  |  |  |  |                                         |  |  |  |     |         suba.l a3,a3
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    33f0:	|  |  |  |  |                                         |  |  |  |  ,--|-------> lsr.l #3,d5
    33f2:	|  |  |  |  |                                         |  |  |  |  |  |         add.w d4,d5
    33f4:	|  |  |  |  |                                         |  |  |  |  |  |         tst.l d3
    33f6:	|  |  |  +--|-----------------------------------------|--|--|--|--|--|-------- bge.w 2d28 <CstScaleSprite+0x172>
    33fa:	|  |  +--|--|-----------------------------------------|--|--|--|--|--|-------- bra.w 32ec <CstScaleSprite+0x736>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    33fe:	|  |  |  |  '-----------------------------------------|--|--|--|--|--|-------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3404:	|  |  |  |                                            |  |  |  |  |  |         move.l #108452,50(sp)
    340c:	|  |  |  |                                            |  |  |  |  |  |         lea 1a7a4 <SysBase>,a0
    3412:	|  |  |  |                                            |  |  |  |  |  |         movea.l (a0),a6
    3414:	|  |  |  |                                            |  |  |  |  |  |         moveq #20,d0
    3416:	|  |  |  |                                            |  |  |  |  |  |         moveq #0,d1
    3418:	|  |  |  |                                            |  |  |  |  |  |         jsr -684(a6)
    341c:	|  |  |  |                                            |  |  |  |  |  |         movea.l d0,a0
    341e:	|  |  |  |                                            |  |  |  |  |  |         move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3424:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    3428:	|  |  |  |                                            |  |  |  |  |  |         move.w d6,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    342a:	|  |  |  |                                            |  |  |  |  |  |         move.w a4,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    342e:	|  |  |  |                                            |  |  |  |  |  |         move.l 82(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3434:	|  |  |  |                                            |  |  |  |  |  |         move.l (a2),d3
    3436:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,d0
    3438:	|  |  |  |                                            |  |  |  |  |  |     ,-- bmi.w 3552 <CstScaleSprite+0x99c>
    343c:	|  |  |  |                                            |  |  |  |  |  |     |   asr.l #4,d0
    343e:	|  |  |  |                                            |  |  |  |  |  |     |   movea.w 66(sp),a1
    3442:	|  |  |  |                                            |  |  |  |  |  |     |   adda.w d0,a1
    3444:	|  |  |  |                                            |  |  |  |  |  |     |   move.w a1,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3448:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    344e:	|  |  |  |                                            |  |  |  |  |  |     |   move.w d2,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3452:	|  |  |  |                                            |  |  |  |  |  |     |   move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3456:	|  |  |  |                                            |  |  |  |  |  |     |   move.l 1a6f8 <winWidth>,d5
    345c:	|  |  |  |                                            |  |  |  |  |  |     |   move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3462:	|  |  |  |                                            |  |  |  |  |  |     |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3464:	|  |  |  |                                            |  |  |  |  |  |  ,--|-> lsr.l #3,d5
    3466:	|  |  |  |                                            |  |  |  |  |  |  |  |   add.w d4,d5
    3468:	|  |  |  |                                            |  |  |  |  |  |  |  |   tst.l d3
    346a:	|  |  |  '--------------------------------------------|--|--|--|--|--|--|--|-- bge.w 2d28 <CstScaleSprite+0x172>
    346e:	|  |  '-----------------------------------------------|--|--|--|--|--|--|--|-- bra.w 32ec <CstScaleSprite+0x736>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    3472:	|  |                                                  |  '--|--|--|--|--|--|-> moveq #15,d0
    3474:	|  |                                                  |     |  |  |  |  |  |   add.l d3,d0
    3476:	|  |                                                  |     |  |  |  |  |  |   asr.l #4,d0
    3478:	|  |                                                  |     |  |  |  |  |  |   addq.w #1,d0
    347a:	|  |                                                  |     |  |  |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    347c:	|  |                                                  |     |  |  |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3482:	|  |                                                  |     |  |  |  |  |  |   move.w d4,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3486:	|  |                                                  |     |  |  |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    348a:	|  |                                                  |     |  |  |  |  |  |   lea 10(a0),a1
    348e:	|  |                                                  |     |  |  |  |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    3494:	|  |                                                  |     |  |  |  |  |  |   clr.w 8(a0)
    3498:	|  |                                                  |     |  |  |  |  |  |   move.w #-1,66(sp)
    349e:	|  |                                                  |     |  |  |  |  |  |   moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    34a0:	|  |                                                  |     |  |  |  |  |  |   clr.w 58(sp)
    cutwordssource = 0;
    34a4:	|  |                                                  |     |  |  |  |  |  |   suba.l a3,a3
    extrawords = 1;
    34a6:	|  |                                                  |     |  |  |  |  |  |   moveq #1,d2
    34a8:	|  |                                                  |     |  |  |  |  |  |   move.l #108452,50(sp)
    34b0:	|  |                                                  '-----|--|--|--|--|--|-- bra.w 30c6 <CstScaleSprite+0x510>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    34b4:	|  '--------------------------------------------------------|--|--|--|--|--|-> moveq #15,d0
    34b6:	|                                                           |  |  |  |  |  |   add.l d3,d0
    34b8:	|                                                           |  |  |  |  |  |   asr.l #4,d0
    34ba:	|                                                           |  |  |  |  |  |   move.w 66(sp),d1
    34be:	|                                                           |  |  |  |  |  |   add.w d0,d1
    34c0:	|                                                           |  |  |  |  |  |   move.w d1,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    34c2:	|                                                           |  |  |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    34c8:	|                                                           |  |  |  |  |  |   move.w d2,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    34cc:	|                                                           |  |  |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    34d0:	|                                                           |  |  |  |  |  |   lea 10(a0),a1
    34d4:	|                                                           |  |  |  |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    34da:	|                                                           |  |  |  |  |  |   clr.w 8(a0)
    34de:	|                                                           |  |  |  |  |  |   move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    34e4:	|                                                           |  |  |  |  |  |   clr.w d2
    34e6:	|                                                           |  |  |  |  |  |   move.l #108452,50(sp)
    34ee:	'-----------------------------------------------------------|--|--|--|--|--|-- bra.w 2d1e <CstScaleSprite+0x168>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    34f2:	                                                            |  '--|--|--|--|-> moveq #15,d0
    34f4:	                                                            |     |  |  |  |   add.l d3,d0
    34f6:	                                                            |     |  |  |  |   asr.l #4,d0
    34f8:	                                                            |     |  |  |  |   add.w 58(sp),d0
    34fc:	                                                            |     |  |  |  |   add.w d2,d0
    34fe:	                                                            |     |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3502:	                                                            |     |  |  |  |   move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3508:	                                                            |     |  |  |  |   clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    350c:	                                                            |     |  |  |  |   move.w 86(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3512:	                                                            |     |  |  |  |   move.l 1a6f8 <winWidth>,d5
    bltalwm = 0; //Last Word of this channel almost masked out
    3518:	                                                            |     |  |  |  |   clr.w 58(sp)
    351c:	                                                            '-----|--|--|--|-- bra.w 31b2 <CstScaleSprite+0x5fc>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3520:	                                                                  |  '--|--|-> moveq #15,d0
    3522:	                                                                  |     |  |   add.l d3,d0
    3524:	                                                                  |     |  |   asr.l #4,d0
    3526:	                                                                  |     |  |   addq.w #1,d0
    3528:	                                                                  |     |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    352c:	                                                                  |     |  |   move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3532:	                                                                  |     |  |   move.w d4,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3536:	                                                                  |     |  |   move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    353a:	                                                                  |     |  |   move.l 1a6f8 <winWidth>,d5
    3540:	                                                                  |     |  |   move.w #-1,66(sp)
    3546:	                                                                  |     |  |   moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    3548:	                                                                  |     |  |   clr.w 58(sp)
    cutwordssource = 0;
    354c:	                                                                  |     |  |   suba.l a3,a3
    354e:	                                                                  '-----|--|-- bra.w 33f0 <CstScaleSprite+0x83a>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3552:	                                                                        |  '-> moveq #15,d0
    3554:	                                                                        |      add.l d3,d0
    3556:	                                                                        |      asr.l #4,d0
    3558:	                                                                        |      movea.w 66(sp),a1
    355c:	                                                                        |      adda.w d0,a1
    355e:	                                                                        |      move.w a1,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3562:	                                                                        |      move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3568:	                                                                        |      move.w d2,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    356c:	                                                                        |      move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3570:	                                                                        |      move.l 1a6f8 <winWidth>,d5
    3576:	                                                                        |      move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    357c:	                                                                        |      clr.w d2
    357e:	                                                                        '----- bra.w 3464 <CstScaleSprite+0x8ae>

00003582 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3582:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3584:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    358a:	move.l 8(sp),d0
    358e:	movea.l (sp),a0
    3590:	move.l d0,128(a0)
}
    3594:	nop
    3596:	addq.l #4,sp
    3598:	rts

0000359a <CstSwapBuffer>:

void CstSwapBuffer( ) {
    359a:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    359e:	move.l 1a6d4 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    35a6:	move.l 1a6d8 <CstDrawBuffer>,d0
    35ac:	move.l d0,1a6d4 <CstViewBuffer>
  CstDrawBuffer = tmp;
    35b2:	move.l 16(sp),1a6d8 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    35ba:	move.l 1a6dc <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    35c2:	move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    35c8:	move.l d0,1a6dc <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    35ce:	move.l 12(sp),1a6e0 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    35d6:	move.l 1a6ce <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    35de:	move.l 1a6d4 <CstViewBuffer>,d0
    35e4:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    35e8:	move.l 4(sp),d0
    35ec:	clr.w d0
    35ee:	swap d0
    35f0:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    35f4:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    35f8:	movea.w #118,a0
    35fc:	adda.l 8(sp),a0
    3600:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3602:	movea.w #114,a0
    3606:	adda.l 8(sp),a0
    360a:	move.w 2(sp),(a0)

  ptr +=  40*256;
    360e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3616:	move.l 4(sp),d0
    361a:	clr.w d0
    361c:	swap d0
    361e:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3622:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    3626:	movea.w #126,a0
    362a:	adda.l 8(sp),a0
    362e:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3630:	movea.w #122,a0
    3634:	adda.l 8(sp),a0
    3638:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    363c:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3644:	move.l 4(sp),d0
    3648:	clr.w d0
    364a:	swap d0
    364c:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3650:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3654:	movea.l 8(sp),a0
    3658:	lea 134(a0),a0
    365c:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    365e:	movea.l 8(sp),a0
    3662:	lea 130(a0),a0
    3666:	move.w 2(sp),(a0)

  ptr +=  40*256;
    366a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3672:	move.l 4(sp),d0
    3676:	clr.w d0
    3678:	swap d0
    367a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    367e:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3682:	movea.l 8(sp),a0
    3686:	lea 142(a0),a0
    368a:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    368c:	movea.l 8(sp),a0
    3690:	lea 138(a0),a0
    3694:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3698:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    36a0:	move.l 4(sp),d0
    36a4:	clr.w d0
    36a6:	swap d0
    36a8:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    36ac:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    36b0:	movea.l 8(sp),a0
    36b4:	lea 150(a0),a0
    36b8:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    36ba:	movea.l 8(sp),a0
    36be:	lea 146(a0),a0
    36c2:	move.w 2(sp),(a0)

}
    36c6:	nop
    36c8:	lea 20(sp),sp
    36cc:	rts

000036ce <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    36ce:	          lea -56(sp),sp
    36d2:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    36d4:	          pea 17d35 <PutChar+0x367>
    36da:	          jsr 16f2c <KPrintF>
    36e0:	          addq.l #4,sp

  width = width / 8;
    36e2:	          move.l 64(sp),d0
    36e6:	      ,-- bpl.s 36ea <CstReserveBackdrop+0x1c>
    36e8:	      |   addq.l #7,d0
    36ea:	      '-> asr.l #3,d0
    36ec:	          move.l d0,64(sp)

  if( width < 40) 
    36f0:	          moveq #39,d0
    36f2:	          cmp.l 64(sp),d0
    36f6:	      ,-- blt.s 370c <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    36f8:	      |   pea 17d4f <PutChar+0x381>
    36fe:	      |   jsr 16f2c <KPrintF>
    3704:	      |   addq.l #4,sp
    return FALSE;
    3706:	      |   clr.w d0
    3708:	,-----|-- bra.w 39c8 <CstReserveBackdrop+0x2fa>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    370c:	|     '-> pea 17d8d <PutChar+0x3bf>
    3712:	|         jsr 16f2c <KPrintF>
    3718:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    371a:	|         move.l 64(sp),-(sp)
    371e:	|         jsr fce <CstCreateCopperlist>
    3724:	|         addq.l #4,sp
    3726:	|         move.l d0,1a6ce <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    372c:	|         pea 17dad <PutChar+0x3df>
    3732:	|         jsr 16f2c <KPrintF>
    3738:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    373a:	|         move.l 64(sp),d1
    373e:	|         move.l 68(sp),d0
    3742:	|         muls.w d1,d0
    3744:	|         move.w d0,1a6c4 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    374a:	|         move.w 1a6c4 <CstBackdropSizePlane>,d1
    3750:	|         move.w d1,d0
    3752:	|         add.w d0,d0
    3754:	|         add.w d0,d0
    3756:	|         add.w d1,d0
    3758:	|         move.w d0,1a6c2 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    375e:	|         move.w 1a6c2 <CstBackdropSize>,d0
    3764:	|         move.w d0,d0
    3766:	|         andi.l #65535,d0
    376c:	|         move.l d0,48(sp)
    3770:	|         moveq #2,d1
    3772:	|         move.l d1,44(sp)
    3776:	|         move.l 1a7a4 <SysBase>,d0
    377c:	|         movea.l d0,a6
    377e:	|         move.l 48(sp),d0
    3782:	|         move.l 44(sp),d1
    3786:	|         jsr -684(a6)
    378a:	|         move.l d0,40(sp)
    378e:	|         move.l 40(sp),d0
    3792:	|         move.l d0,1a6c6 <CstBackDrop>
  if( !CstBackDrop)
    3798:	|         move.l 1a6c6 <CstBackDrop>,d0
    379e:	|     ,-- bne.s 37b4 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    37a0:	|     |   pea 17dd4 <PutChar+0x406>
    37a6:	|     |   jsr 16f2c <KPrintF>
    37ac:	|     |   addq.l #4,sp
    return FALSE;  
    37ae:	|     |   clr.w d0
    37b0:	+-----|-- bra.w 39c8 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    37b4:	|     '-> pea 17e0c <PutChar+0x43e>
    37ba:	|         jsr 16f2c <KPrintF>
    37c0:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    37c2:	|         move.l 1a6c6 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    37ca:	|         clr.l 52(sp)
    37ce:	|     ,-- bra.s 37e4 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    37d0:	|  ,--|-> move.l 56(sp),d0
    37d4:	|  |  |   move.l d0,d1
    37d6:	|  |  |   addq.l #4,d1
    37d8:	|  |  |   move.l d1,56(sp)
    37dc:	|  |  |   movea.l d0,a0
    37de:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    37e0:	|  |  |   addq.l #1,52(sp)
    37e4:	|  |  '-> move.w 1a6c2 <CstBackdropSize>,d0
    37ea:	|  |      lsr.w #2,d0
    37ec:	|  |      move.w d0,d0
    37ee:	|  |      andi.l #65535,d0
    37f4:	|  |      cmp.l 52(sp),d0
    37f8:	|  '----- bgt.s 37d0 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    37fa:	|         move.w 1a6c2 <CstBackdropSize>,d0
    3800:	|         move.w d0,d0
    3802:	|         andi.l #65535,d0
    3808:	|         move.l 64(sp),d1
    380c:	|         add.l d1,d1
    380e:	|         add.l d1,d0
    3810:	|         move.l d0,36(sp)
    3814:	|         moveq #2,d0
    3816:	|         move.l d0,32(sp)
    381a:	|         move.l 1a7a4 <SysBase>,d0
    3820:	|         movea.l d0,a6
    3822:	|         move.l 36(sp),d0
    3826:	|         move.l 32(sp),d1
    382a:	|         jsr -684(a6)
    382e:	|         move.l d0,28(sp)
    3832:	|         move.l 28(sp),d0
    3836:	|         move.l d0,1a6d8 <CstDrawBuffer>
  if( !CstDrawBuffer)
    383c:	|         move.l 1a6d8 <CstDrawBuffer>,d0
    3842:	|     ,-- bne.s 3858 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3844:	|     |   pea 17e32 <PutChar+0x464>
    384a:	|     |   jsr 16f2c <KPrintF>
    3850:	|     |   addq.l #4,sp
    return FALSE;  
    3852:	|     |   clr.w d0
    3854:	+-----|-- bra.w 39c8 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3858:	|     '-> pea 17e6c <PutChar+0x49e>
    385e:	|         jsr 16f2c <KPrintF>
    3864:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3866:	|         move.l #10000,24(sp)
    386e:	|         clr.l 20(sp)
    3872:	|         move.l 1a7a4 <SysBase>,d0
    3878:	|         movea.l d0,a6
    387a:	|         move.l 24(sp),d0
    387e:	|         move.l 20(sp),d1
    3882:	|         jsr -684(a6)
    3886:	|         move.l d0,16(sp)
    388a:	|         move.l 16(sp),d0
    388e:	|         move.l d0,1a6e4 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3894:	|         move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    389a:	|     ,-- bne.s 38b0 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    389c:	|     |   pea 17e94 <PutChar+0x4c6>
    38a2:	|     |   jsr 16f2c <KPrintF>
    38a8:	|     |   addq.l #4,sp
    return FALSE;  
    38aa:	|     |   clr.w d0
    38ac:	+-----|-- bra.w 39c8 <CstReserveBackdrop+0x2fa>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    38b0:	|     '-> move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    38b6:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    38bc:	|         movea.l 1a6e4 <CstBackDropBufferApplyStart>,a0
    38c2:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    38c4:	|         movea.l 1a6e4 <CstBackDropBufferApplyStart>,a0
    38ca:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    38cc:	|         move.w 1a6c2 <CstBackdropSize>,d0
    38d2:	|         move.w d0,d0
    38d4:	|         andi.l #65535,d0
    38da:	|         move.l 64(sp),d1
    38de:	|         add.l d1,d1
    38e0:	|         add.l d1,d0
    38e2:	|         move.l d0,12(sp)
    38e6:	|         moveq #2,d1
    38e8:	|         move.l d1,8(sp)
    38ec:	|         move.l 1a7a4 <SysBase>,d0
    38f2:	|         movea.l d0,a6
    38f4:	|         move.l 12(sp),d0
    38f8:	|         move.l 8(sp),d1
    38fc:	|         jsr -684(a6)
    3900:	|         move.l d0,4(sp)
    3904:	|         move.l 4(sp),d0
    3908:	|         move.l d0,1a6d4 <CstViewBuffer>
  if( !CstViewBuffer)
    390e:	|         move.l 1a6d4 <CstViewBuffer>,d0
    3914:	|     ,-- bne.s 392a <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3916:	|     |   pea 17edf <PutChar+0x511>
    391c:	|     |   jsr 16f2c <KPrintF>
    3922:	|     |   addq.l #4,sp
    return FALSE;  
    3924:	|     |   clr.w d0
    3926:	+-----|-- bra.w 39c8 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    392a:	|     '-> pea 17f19 <PutChar+0x54b>
    3930:	|         jsr 16f2c <KPrintF>
    3936:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3938:	|         move.l 1a6d8 <CstDrawBuffer>,d1
    393e:	|         move.l 64(sp),d0
    3942:	|     ,-- bpl.s 3946 <CstReserveBackdrop+0x278>
    3944:	|     |   addq.l #3,d0
    3946:	|     '-> asr.l #2,d0
    3948:	|         add.l d0,d0
    394a:	|         add.l d0,d0
    394c:	|         add.l d1,d0
    394e:	|         move.l d0,1a6d8 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3954:	|         move.l 1a6d4 <CstViewBuffer>,d1
    395a:	|         move.l 64(sp),d0
    395e:	|     ,-- bpl.s 3962 <CstReserveBackdrop+0x294>
    3960:	|     |   addq.l #3,d0
    3962:	|     '-> asr.l #2,d0
    3964:	|         add.l d0,d0
    3966:	|         add.l d0,d0
    3968:	|         add.l d1,d0
    396a:	|         move.l d0,1a6d4 <CstViewBuffer>
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3970:	|         move.l 1a6ce <CstCopperList>,d0
    3976:	|     ,-- beq.s 3988 <CstReserveBackdrop+0x2ba>
    3978:	|     |   move.l 1a6d8 <CstDrawBuffer>,d0
    397e:	|     +-- beq.s 3988 <CstReserveBackdrop+0x2ba>
    3980:	|     |   move.l 1a6d4 <CstViewBuffer>,d0
    3986:	|  ,--|-- bne.s 399a <CstReserveBackdrop+0x2cc>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3988:	|  |  '-> pea 17f41 <PutChar+0x573>
    398e:	|  |      jsr 16f2c <KPrintF>
    3994:	|  |      addq.l #4,sp
    return FALSE;
    3996:	|  |      clr.w d0
    3998:	+--|----- bra.s 39c8 <CstReserveBackdrop+0x2fa>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    399a:	|  '----> pea 17f6e <PutChar+0x5a0>
    39a0:	|         jsr 16f2c <KPrintF>
    39a6:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    39a8:	|         move.l 1a6ce <CstCopperList>,d0
    39ae:	|         move.l d0,-(sp)
    39b0:	|         jsr 3582 <CstSetCl>
    39b6:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    39b8:	|         pea 17f95 <PutChar+0x5c7>
    39be:	|         jsr 16f2c <KPrintF>
    39c4:	|         addq.l #4,sp
  return TRUE;
    39c6:	|         moveq #1,d0

}
    39c8:	'-------> movea.l (sp)+,a6
    39ca:	          lea 56(sp),sp
    39ce:	          rts

000039d0 <CstUnfreeze>:

void CstUnfreeze() {
    39d0:	       lea -24(sp),sp
    39d4:	       move.l a6,-(sp)
    39d6:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    39d8:	       pea 17fb8 <PutChar+0x5ea>
    39de:	       jsr 16f2c <KPrintF>
    39e4:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    39e6:	       move.l 1a6f8 <winWidth>,d0
    39ec:	       lsr.l #3,d0
    39ee:	       move.l d0,d1
    39f0:	       move.l 1a6fc <winHeight>,d0
    39f6:	       move.l d0,d0
    39f8:	       muls.w d0,d1
    39fa:	       move.w d1,d0
    39fc:	       add.w d0,d0
    39fe:	       add.w d0,d0
    3a00:	       move.w d0,d2
    3a02:	       add.w d1,d2
    3a04:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3a08:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3a10:	       move.l 1a6ca <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3a18:	       move.l 1a6c6 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3a20:	       clr.l 20(sp)
    3a24:	   ,-- bra.s 3a4a <CstUnfreeze+0x7a>
  {
    *dst++ = *src++;
    3a26:	,--|-> move.l 28(sp),d1
    3a2a:	|  |   move.l d1,d0
    3a2c:	|  |   addq.l #4,d0
    3a2e:	|  |   move.l d0,28(sp)
    3a32:	|  |   move.l 24(sp),d0
    3a36:	|  |   move.l d0,d2
    3a38:	|  |   addq.l #4,d2
    3a3a:	|  |   move.l d2,24(sp)
    3a3e:	|  |   movea.l d1,a0
    3a40:	|  |   move.l (a0),d1
    3a42:	|  |   movea.l d0,a0
    3a44:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3a46:	|  |   addq.l #1,20(sp)
    3a4a:	|  '-> move.w 18(sp),d0
    3a4e:	|      lsr.w #2,d0
    3a50:	|      move.w d0,d0
    3a52:	|      andi.l #65535,d0
    3a58:	|      cmp.l 20(sp),d0
    3a5c:	'----- bgt.s 3a26 <CstUnfreeze+0x56>
  }

  CstApplyBackDropCounter = 2;
    3a5e:	       move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3a66:	       move.l 1a6f8 <winWidth>,d0
    3a6c:	       lsr.l #4,d0
    3a6e:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3a74:	       move.l a0,d1
    3a76:	       addq.l #2,d1
    3a78:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    3a7e:	       move.l d0,d0
    3a80:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3a82:	       move.l 1a6fc <winHeight>,d0
    3a88:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3a8e:	       move.l a0,d1
    3a90:	       addq.l #2,d1
    3a92:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    3a98:	       move.l d0,d0
    3a9a:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3a9c:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3aa2:	       move.l a0,d0
    3aa4:	       addq.l #2,d0
    3aa6:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3aac:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3aae:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3ab4:	       move.l a0,d0
    3ab6:	       addq.l #2,d0
    3ab8:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3abe:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3ac0:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3ac6:	       move.l a0,d0
    3ac8:	       addq.l #2,d0
    3aca:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3ad0:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    3ad2:	       move.l 1a6ca <CstBackDropBackup>,d0
    3ad8:	   ,-- bne.s 3af2 <CstUnfreeze+0x122>
    FreeVec( CstBackDropBackup);
    3ada:	   |   move.l 1a6ca <CstBackDropBackup>,10(sp)
    3ae2:	   |   move.l 1a7a4 <SysBase>,d0
    3ae8:	   |   movea.l d0,a6
    3aea:	   |   movea.l 10(sp),a1
    3aee:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    3af2:	   '-> pea 17be1 <PutChar+0x213>
    3af8:	       jsr 16f2c <KPrintF>
    3afe:	       addq.l #4,sp

}
    3b00:	       nop
    3b02:	       move.l (sp)+,d2
    3b04:	       movea.l (sp)+,a6
    3b06:	       lea 24(sp),sp
    3b0a:	       rts

00003b0c <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    3b0c:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    3b10:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3b14:	       tst.l 24(sp)
    3b18:	   ,-- bge.s 3b1e <drawLine+0x12>
    3b1a:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    3b1e:	   '-> tst.l 28(sp)
    3b22:	   ,-- bge.s 3b28 <drawLine+0x1c>
    3b24:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3b28:	   '-> tst.l 32(sp)
    3b2c:	   ,-- bge.s 3b32 <drawLine+0x26>
    3b2e:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3b32:	   '-> tst.l 36(sp)
    3b36:	   ,-- bge.s 3b3c <drawLine+0x30>
    3b38:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    3b3c:	   '-> move.l 1a840 <sceneWidth>,d0
    3b42:	       cmp.l 24(sp),d0
    3b46:	   ,-- bge.s 3b56 <drawLine+0x4a>
    3b48:	   |   move.l 1a840 <sceneWidth>,d0
    3b4e:	   |   move.l d0,d1
    3b50:	   |   subq.l #1,d1
    3b52:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3b56:	   '-> move.l 1a840 <sceneWidth>,d0
    3b5c:	       cmp.l 32(sp),d0
    3b60:	   ,-- bge.s 3b70 <drawLine+0x64>
    3b62:	   |   move.l 1a840 <sceneWidth>,d0
    3b68:	   |   move.l d0,d1
    3b6a:	   |   subq.l #1,d1
    3b6c:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    3b70:	   '-> move.l 1a844 <sceneHeight>,d0
    3b76:	       cmp.l 28(sp),d0
    3b7a:	   ,-- bge.s 3b8a <drawLine+0x7e>
    3b7c:	   |   move.l 1a844 <sceneHeight>,d0
    3b82:	   |   move.l d0,d1
    3b84:	   |   subq.l #1,d1
    3b86:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    3b8a:	   '-> move.l 1a844 <sceneHeight>,d0
    3b90:	       cmp.l 36(sp),d0
    3b94:	   ,-- bge.s 3ba4 <drawLine+0x98>
    3b96:	   |   move.l 1a844 <sceneHeight>,d0
    3b9c:	   |   move.l d0,d1
    3b9e:	   |   subq.l #1,d1
    3ba0:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    3ba4:	   '-> move.l 24(sp),d0
    3ba8:	       cmp.l 32(sp),d0
    3bac:	,----- ble.s 3bc8 <drawLine+0xbc>
		x = x2; 
    3bae:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    3bb4:	|      tst.w 10(sp)
    3bb8:	|      seq d0
    3bba:	|      neg.b d0
    3bbc:	|      move.b d0,d0
    3bbe:	|      andi.w #255,d0
    3bc2:	|      move.w d0,10(sp)
    3bc6:	|  ,-- bra.s 3bce <drawLine+0xc2>
	} else x = x1;
    3bc8:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    3bce:	   '-> move.l 28(sp),d1
    3bd2:	       cmp.l 36(sp),d1
    3bd6:	,----- ble.s 3bf2 <drawLine+0xe6>
		y = y2; 
    3bd8:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    3bde:	|      tst.w 10(sp)
    3be2:	|      seq d0
    3be4:	|      neg.b d0
    3be6:	|      move.b d0,d0
    3be8:	|      andi.w #255,d0
    3bec:	|      move.w d0,10(sp)
    3bf0:	|  ,-- bra.s 3bf8 <drawLine+0xec>
	} else y = y1;	
    3bf2:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    3bf8:	   '-> move.l 32(sp),d0
    3bfc:	       sub.l 24(sp),d0
    3c00:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    3c04:	       move.l 6(sp),d0
    3c08:	   ,-- bpl.s 3c0c <drawLine+0x100>
    3c0a:	   |   neg.l d0
    3c0c:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    3c10:	       move.l 36(sp),d1
    3c14:	       sub.l 28(sp),d1
    3c18:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    3c1c:	       move.l 2(sp),d0
    3c20:	   ,-- bpl.s 3c24 <drawLine+0x118>
    3c22:	   |   neg.l d0
    3c24:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    3c28:	       tst.l 6(sp)
    3c2c:	   ,-- bne.s 3c50 <drawLine+0x144>
		diffX = 1;
    3c2e:	   |   moveq #1,d0
    3c30:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    3c34:	   |   move.l 1a840 <sceneWidth>,d0
    3c3a:	   |   subq.l #1,d0
    3c3c:	   |   cmp.l 16(sp),d0
    3c40:	   +-- bne.s 3c50 <drawLine+0x144>
    3c42:	   |   move.l 1a840 <sceneWidth>,d0
    3c48:	   |   move.l d0,d1
    3c4a:	   |   subq.l #2,d1
    3c4c:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    3c50:	   '-> tst.l 2(sp)
    3c54:	   ,-- bne.s 3c78 <drawLine+0x16c>
		diffY = 1;
    3c56:	   |   moveq #1,d0
    3c58:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    3c5c:	   |   move.l 1a844 <sceneHeight>,d0
    3c62:	   |   subq.l #1,d0
    3c64:	   |   cmp.l 12(sp),d0
    3c68:	   +-- bne.s 3c78 <drawLine+0x16c>
    3c6a:	   |   move.l 1a844 <sceneHeight>,d0
    3c70:	   |   move.l d0,d1
    3c72:	   |   subq.l #2,d1
    3c74:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    3c78:	   '-> pea 17fe3 <PutChar+0x615>
    3c7e:	       jsr 16f2c <KPrintF>
    3c84:	       addq.l #4,sp
	
}
    3c86:	       nop
    3c88:	       lea 20(sp),sp
    3c8c:	       rts

00003c8e <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    3c8e:	                      lea -24(sp),sp
    3c92:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    3c94:	                      move.l 1a700 <firstTexture>,d0
    3c9a:	,-------------------- beq.w 3d78 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    3c9e:	|                     clr.l 24(sp)
    3ca2:	|     ,-------------- bra.w 3d6c <deleteTextures+0xde>
			BOOL found = FALSE;
    3ca6:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    3caa:	|  |  |               move.l 1a700 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    3cb2:	|  |  |               movea.l 20(sp),a0
    3cb6:	|  |  |               move.l (a0),d1
    3cb8:	|  |  |               move.l 24(sp),d0
    3cbc:	|  |  |               add.l d0,d0
    3cbe:	|  |  |               add.l d0,d0
    3cc0:	|  |  |               movea.l 36(sp),a0
    3cc4:	|  |  |               adda.l d0,a0
    3cc6:	|  |  |               move.l (a0),d0
    3cc8:	|  |  |               cmp.l d1,d0
    3cca:	|  |  |  ,----------- bne.w 3d5e <deleteTextures+0xd0>
				found = TRUE;
    3cce:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    3cd4:	|  |  |  |            movea.l 20(sp),a0
    3cd8:	|  |  |  |            move.l 12(a0),d0
    3cdc:	|  |  |  |            move.l d0,1a700 <firstTexture>
				FreeVec(list);
    3ce2:	|  |  |  |            move.l 20(sp),6(sp)
    3ce8:	|  |  |  |            move.l 1a7a4 <SysBase>,d0
    3cee:	|  |  |  |            movea.l d0,a6
    3cf0:	|  |  |  |            movea.l 6(sp),a1
    3cf4:	|  |  |  |            jsr -690(a6)
				continue;
    3cf8:	|  |  |  |  ,-------- bra.s 3d68 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    3cfa:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    3cfe:	|  |  |  |  |  |      movea.l 12(a0),a0
    3d02:	|  |  |  |  |  |      move.l (a0),d1
    3d04:	|  |  |  |  |  |      move.l 24(sp),d0
    3d08:	|  |  |  |  |  |      add.l d0,d0
    3d0a:	|  |  |  |  |  |      add.l d0,d0
    3d0c:	|  |  |  |  |  |      movea.l 36(sp),a0
    3d10:	|  |  |  |  |  |      adda.l d0,a0
    3d12:	|  |  |  |  |  |      move.l (a0),d0
    3d14:	|  |  |  |  |  |      cmp.l d1,d0
    3d16:	|  |  |  |  |  |  ,-- bne.s 3d54 <deleteTextures+0xc6>
					found = TRUE;
    3d18:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    3d1e:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3d22:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    3d28:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3d2c:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    3d30:	|  |  |  |  |  |  |   move.l 12(a0),d0
    3d34:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3d38:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    3d3c:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    3d42:	|  |  |  |  |  |  |   move.l 1a7a4 <SysBase>,d0
    3d48:	|  |  |  |  |  |  |   movea.l d0,a6
    3d4a:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    3d4e:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    3d52:	|  |  |  |  +--|--|-- bra.s 3d68 <deleteTextures+0xda>
				}
				list = list->next;
    3d54:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    3d58:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    3d5e:	|  |  |  '--|--|----> movea.l 20(sp),a0
    3d62:	|  |  |     |  |      move.l 12(a0),d0
    3d66:	|  |  |     |  '----- bne.s 3cfa <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    3d68:	|  |  |     '-------> addq.l #1,24(sp)
    3d6c:	|  |  '-------------> move.l 24(sp),d0
    3d70:	|  |                  cmp.l 32(sp),d0
    3d74:	|  '----------------- bcs.w 3ca6 <deleteTextures+0x18>
			}
		}
	}
}
    3d78:	'-------------------> nop
    3d7a:	                      movea.l (sp)+,a6
    3d7c:	                      lea 24(sp),sp
    3d80:	                      rts

00003d82 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    3d82:	subq.l #4,sp
    3d84:	move.l 8(sp),d0
    3d88:	move.w d0,d0
    3d8a:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    3d8e:	pea 18006 <PutChar+0x638>
    3d94:	jsr 16f2c <KPrintF>
    3d9a:	addq.l #4,sp
}
    3d9c:	nop
    3d9e:	addq.l #4,sp
    3da0:	rts

00003da2 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    3da2:	       moveq #-1,d0
    3da4:	       cmp.l 4(sp),d0
    3da8:	   ,-- bne.s 3dae <resourceNameFromNum+0xc>
    3daa:	   |   moveq #0,d0
    3dac:	,--|-- bra.s 3de6 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    3dae:	|  '-> move.l 1a780 <numResourceNames>,d0
    3db4:	|  ,-- bne.s 3dbe <resourceNameFromNum+0x1c>
    3db6:	|  |   move.l #98358,d0
    3dbc:	+--|-- bra.s 3de6 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    3dbe:	|  '-> move.l 1a780 <numResourceNames>,d0
    3dc4:	|      cmp.l 4(sp),d0
    3dc8:	|  ,-- ble.s 3de0 <resourceNameFromNum+0x3e>
    3dca:	|  |   move.l 1a738 <allResourceNames>,d1
    3dd0:	|  |   move.l 4(sp),d0
    3dd4:	|  |   add.l d0,d0
    3dd6:	|  |   add.l d0,d0
    3dd8:	|  |   movea.l d1,a0
    3dda:	|  |   adda.l d0,a0
    3ddc:	|  |   move.l (a0),d0
    3dde:	+--|-- bra.s 3de6 <resourceNameFromNum+0x44>
	return "Unknown resource";
    3de0:	|  '-> move.l #98367,d0
    3de6:	'----> rts

00003de8 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    3de8:	          lea -44(sp),sp
    3dec:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    3df0:	          move.l #320,1a6f8 <winWidth>
    winHeight = 256;
    3dfa:	          move.l #256,1a6fc <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    3e04:	          tst.l 60(sp)
    3e08:	      ,-- bne.s 3e20 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    3e0a:	      |   pea 18050 <PutChar+0x682>
    3e10:	      |   jsr b8 <copyString>
    3e16:	      |   addq.l #4,sp
    3e18:	      |   move.l d0,1a710 <bundleFolder>
    3e1e:	   ,--|-- bra.s 3e36 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    3e20:	   |  '-> movea.l 64(sp),a0
    3e24:	   |      move.l (a0),d0
    3e26:	   |      move.l d0,-(sp)
    3e28:	   |      jsr b8 <copyString>
    3e2e:	   |      addq.l #4,sp
    3e30:	   |      move.l d0,1a710 <bundleFolder>
	}
    
	int lastSlash = -1;
    3e36:	   '----> moveq #-1,d0
    3e38:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    3e3c:	          clr.l 44(sp)
    3e40:	   ,----- bra.s 3e62 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    3e42:	,--|----> move.l 1a710 <bundleFolder>,d1
    3e48:	|  |      move.l 44(sp),d0
    3e4c:	|  |      movea.l d1,a0
    3e4e:	|  |      adda.l d0,a0
    3e50:	|  |      move.b (a0),d0
    3e52:	|  |      cmpi.b #47,d0
    3e56:	|  |  ,-- bne.s 3e5e <main_sludge+0x76>
    3e58:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    3e5e:	|  |  '-> addq.l #1,44(sp)
    3e62:	|  '----> move.l 1a710 <bundleFolder>,d1
    3e68:	|         move.l 44(sp),d0
    3e6c:	|         movea.l d1,a0
    3e6e:	|         adda.l d0,a0
    3e70:	|         move.b (a0),d0
    3e72:	'-------- bne.s 3e42 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    3e74:	          move.l 1a710 <bundleFolder>,d0
    3e7a:	          move.l 48(sp),d1
    3e7e:	          addq.l #1,d1
    3e80:	          movea.l d0,a0
    3e82:	          adda.l d1,a0
    3e84:	          clr.b (a0)

	if (argc > 1) {
    3e86:	          moveq #1,d0
    3e88:	          cmp.l 60(sp),d0
    3e8c:	      ,-- bge.s 3ea8 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    3e8e:	      |   move.l 60(sp),d0
    3e92:	      |   addi.l #1073741823,d0
    3e98:	      |   add.l d0,d0
    3e9a:	      |   add.l d0,d0
    3e9c:	      |   movea.l 64(sp),a0
    3ea0:	      |   adda.l d0,a0
    3ea2:	      |   move.l (a0),52(sp)
    3ea6:	   ,--|-- bra.s 3f02 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    3ea8:	   |  '-> move.l 1a710 <bundleFolder>,d0
    3eae:	   |      pea 18056 <PutChar+0x688>
    3eb4:	   |      move.l d0,-(sp)
    3eb6:	   |      jsr 13a0c <joinStrings>
    3ebc:	   |      addq.l #8,sp
    3ebe:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    3ec2:	   |      move.l 52(sp),-(sp)
    3ec6:	   |      jsr 13906 <fileExists>
    3ecc:	   |      addq.l #4,sp
    3ece:	   |      tst.b d0
    3ed0:	   +----- bne.s 3f02 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    3ed2:	   |      move.l 52(sp),40(sp)
    3ed8:	   |      move.l 1a7a4 <SysBase>,d0
    3ede:	   |      movea.l d0,a6
    3ee0:	   |      movea.l 40(sp),a1
    3ee4:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    3ee8:	   |      move.l 1a710 <bundleFolder>,d0
    3eee:	   |      pea 18063 <PutChar+0x695>
    3ef4:	   |      move.l d0,-(sp)
    3ef6:	   |      jsr 13a0c <joinStrings>
    3efc:	   |      addq.l #8,sp
    3efe:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    3f02:	   '----> pea 1806c <PutChar+0x69e>
    3f08:	          jsr 16f2c <KPrintF>
    3f0e:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    3f10:	          move.l 52(sp),-(sp)
    3f14:	          jsr 13906 <fileExists>
    3f1a:	          addq.l #4,sp
    3f1c:	          tst.b d0
    3f1e:	      ,-- bne.s 3f76 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    3f20:	      |   move.l 1a7ac <DOSBase>,d0
    3f26:	      |   movea.l d0,a6
    3f28:	      |   jsr -60(a6)
    3f2c:	      |   move.l d0,28(sp)
    3f30:	      |   move.l 28(sp),d0
    3f34:	      |   move.l d0,24(sp)
    3f38:	      |   move.l #98412,20(sp)
    3f40:	      |   moveq #21,d0
    3f42:	      |   move.l d0,16(sp)
    3f46:	      |   move.l 1a7ac <DOSBase>,d0
    3f4c:	      |   movea.l d0,a6
    3f4e:	      |   move.l 24(sp),d1
    3f52:	      |   move.l 20(sp),d2
    3f56:	      |   move.l 16(sp),d3
    3f5a:	      |   jsr -48(a6)
    3f5e:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    3f62:	      |   pea 1806c <PutChar+0x69e>
    3f68:	      |   jsr 16f2c <KPrintF>
    3f6e:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    3f70:	      |   moveq #0,d0
    3f72:	,-----|-- bra.w 4174 <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    3f76:	|     '-> pea 18082 <PutChar+0x6b4>
    3f7c:	|         jsr 16f2c <KPrintF>
    3f82:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    3f84:	|         move.l 52(sp),-(sp)
    3f88:	|         jsr 417e <setGameFilePath>
    3f8e:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    3f90:	|         move.l 52(sp),-(sp)
    3f94:	|         jsr 572c <initSludge>
    3f9a:	|         addq.l #4,sp
    3f9c:	|         tst.w d0
    3f9e:	|     ,-- bne.s 3fa6 <main_sludge+0x1be>
    3fa0:	|     |   moveq #0,d0
    3fa2:	+-----|-- bra.w 4174 <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    3fa6:	|     '-> move.l 1a6f8 <winWidth>,d0
    3fac:	|         cmpi.l #320,d0
    3fb2:	|     ,-- bne.s 3fc2 <main_sludge+0x1da>
    3fb4:	|     |   move.l 1a6fc <winHeight>,d0
    3fba:	|     |   cmpi.l #256,d0
    3fc0:	|  ,--|-- beq.s 3fe4 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    3fc2:	|  |  '-> pea 18093 <PutChar+0x6c5>
    3fc8:	|  |      jsr 16f2c <KPrintF>
    3fce:	|  |      addq.l #4,sp
		winWidth = 320;
    3fd0:	|  |      move.l #320,1a6f8 <winWidth>
		winHeight = 256;
    3fda:	|  |      move.l #256,1a6fc <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    3fe4:	|  '----> pea 18110 <PutChar+0x742>
    3fea:	|         jsr 16f2c <KPrintF>
    3ff0:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    3ff2:	|         move.l 1a6fc <winHeight>,d0
    3ff8:	|         move.l d0,d1
    3ffa:	|         move.l 1a6f8 <winWidth>,d0
    4000:	|         move.l d1,-(sp)
    4002:	|         move.l d0,-(sp)
    4004:	|         jsr d124 <resizeBackdrop>
    400a:	|         addq.l #8,sp
    400c:	|         tst.w d0
    400e:	|     ,-- bne.s 4024 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4010:	|     |   pea 18123 <PutChar+0x755>
    4016:	|     |   jsr 16f2c <KPrintF>
    401c:	|     |   addq.l #4,sp
		return FALSE;
    401e:	|     |   moveq #0,d0
    4020:	+-----|-- bra.w 4174 <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4024:	|     '-> pea 18149 <PutChar+0x77b>
    402a:	|         jsr 16f2c <KPrintF>
    4030:	|         addq.l #4,sp
	if (! initPeople ())
    4032:	|         jsr a680 <initPeople>
    4038:	|         tst.w d0
    403a:	|     ,-- bne.s 4050 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    403c:	|     |   pea 18156 <PutChar+0x788>
    4042:	|     |   jsr 16f2c <KPrintF>
    4048:	|     |   addq.l #4,sp
		return FALSE;
    404a:	|     |   moveq #0,d0
    404c:	+-----|-- bra.w 4174 <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    4050:	|     '-> pea 18177 <PutChar+0x7a9>
    4056:	|         jsr 16f2c <KPrintF>
    405c:	|         addq.l #4,sp
	if (! initFloor ())
    405e:	|         jsr 162e2 <initFloor>
    4064:	|         tst.w d0
    4066:	|     ,-- bne.s 407c <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    4068:	|     |   pea 18183 <PutChar+0x7b5>
    406e:	|     |   jsr 16f2c <KPrintF>
    4074:	|     |   addq.l #4,sp
		
		return FALSE;
    4076:	|     |   moveq #0,d0
    4078:	+-----|-- bra.w 4174 <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    407c:	|     '-> pea 181a3 <PutChar+0x7d5>
    4082:	|         jsr 16f2c <KPrintF>
    4088:	|         addq.l #4,sp
	if (! initObjectTypes ())
    408a:	|         jsr d2e0 <initObjectTypes>
    4090:	|         tst.w d0
    4092:	|     ,-- bne.s 40a8 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    4094:	|     |   pea 181b4 <PutChar+0x7e6>
    409a:	|     |   jsr 16f2c <KPrintF>
    40a0:	|     |   addq.l #4,sp
		return FALSE;
    40a2:	|     |   moveq #0,d0
    40a4:	+-----|-- bra.w 4174 <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    40a8:	|     '-> pea 181da <PutChar+0x80c>
    40ae:	|         jsr 16f2c <KPrintF>
    40b4:	|         addq.l #4,sp
	initSpeech ();
    40b6:	|         jsr 7b54 <initSpeech>
	KPrintF("Init status bar\n");
    40bc:	|         pea 181e7 <PutChar+0x819>
    40c2:	|         jsr 16f2c <KPrintF>
    40c8:	|         addq.l #4,sp
	initStatusBar ();
    40ca:	|         jsr 7618 <initStatusBar>

	KPrintF("Get numbered string\n");
    40d0:	|         pea 181f8 <PutChar+0x82a>
    40d6:	|         jsr 16f2c <KPrintF>
    40dc:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    40de:	|         pea 1 <_start+0x1>
    40e2:	|         jsr 6922 <getNumberedString>
    40e8:	|         addq.l #4,sp
    40ea:	|         move.l d0,1a708 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    40f0:	|         pea 1820d <PutChar+0x83f>
    40f6:	|         jsr 16f2c <KPrintF>
    40fc:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    40fe:	|         move.l 1a774 <noStack>,d0
    4104:	|         pea 1 <_start+0x1>
    4108:	|         move.l d0,-(sp)
    410a:	|         clr.l -(sp)
    410c:	|         clr.l -(sp)
    410e:	|         clr.l -(sp)
    4110:	|         jsr 6778 <startNewFunctionNum>
    4116:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    411a:	|         pea 18225 <PutChar+0x857>
    4120:	|         jsr 16f2c <KPrintF>
    4126:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    4128:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    4130:	|         clr.l 1a714 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    4136:	|     ,-- bra.s 4156 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    4138:	|  ,--|-> jsr 6708 <sludgeDisplay>
		CsiCheckInput();
    413e:	|  |  |   jsr cc4c <CsiCheckInput>
		walkAllPeople();
    4144:	|  |  |   jsr bc06 <walkAllPeople>
		handleInput();
    414a:	|  |  |   jsr 54c6 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    4150:	|  |  |   jsr 16e60 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    4156:	|  |  '-> move.l 1a714 <weAreDoneSoQuit>,d0
    415c:	|  '----- beq.s 4138 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    415e:	|         move.l 52(sp),32(sp)
    4164:	|         move.l 1a7a4 <SysBase>,d0
    416a:	|         movea.l d0,a6
    416c:	|         movea.l 32(sp),a1
    4170:	|         jsr -690(a6)
}
    4174:	'-------> movem.l (sp)+,d2-d3/a6
    4178:	          lea 44(sp),sp
    417c:	          rts

0000417e <setGameFilePath>:

void setGameFilePath (char * f) {
    417e:	          lea -1104(sp),sp
    4182:	          move.l a6,-(sp)
    4184:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4186:	          move.l #1112,d0
    418c:	          add.l sp,d0
    418e:	          addi.l #-1102,d0
    4194:	          move.l d0,1100(sp)
    4198:	          move.l #998,1096(sp)
    41a0:	          move.l 1a7ac <DOSBase>,d0
    41a6:	          movea.l d0,a6
    41a8:	          move.l 1100(sp),d1
    41ac:	          move.l 1096(sp),d2
    41b0:	          jsr -564(a6)
    41b4:	          move.w d0,1094(sp)
    41b8:	          move.w 1094(sp),d0
    41bc:	      ,-- bne.s 41cc <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    41be:	      |   pea 18238 <PutChar+0x86a>
    41c4:	      |   jsr 16f2c <KPrintF>
    41ca:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    41cc:	      '-> moveq #-1,d0
    41ce:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    41d2:	          clr.l 1104(sp)
    41d6:	   ,----- bra.s 41f4 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    41d8:	,--|----> move.l 1104(sp),d0
    41dc:	|  |      movea.l 1116(sp),a0
    41e0:	|  |      adda.l d0,a0
    41e2:	|  |      move.b (a0),d0
    41e4:	|  |      cmpi.b #47,d0
    41e8:	|  |  ,-- bne.s 41f0 <setGameFilePath+0x72>
    41ea:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    41f0:	|  |  '-> addq.l #1,1104(sp)
    41f4:	|  '----> move.l 1104(sp),d0
    41f8:	|         movea.l 1116(sp),a0
    41fc:	|         adda.l d0,a0
    41fe:	|         move.b (a0),d0
    4200:	'-------- bne.s 41d8 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4202:	          moveq #-1,d0
    4204:	          cmp.l 1108(sp),d0
    4208:	   ,----- beq.s 4282 <setGameFilePath+0x104>
		f[got] = 0;	
    420a:	   |      move.l 1108(sp),d0
    420e:	   |      movea.l 1116(sp),a0
    4212:	   |      adda.l d0,a0
    4214:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    4216:	   |      move.l 1116(sp),1090(sp)
    421c:	   |      moveq #-2,d0
    421e:	   |      move.l d0,1086(sp)
    4222:	   |      move.l 1a7ac <DOSBase>,d0
    4228:	   |      movea.l d0,a6
    422a:	   |      move.l 1090(sp),d1
    422e:	   |      move.l 1086(sp),d2
    4232:	   |      jsr -84(a6)
    4236:	   |      move.l d0,1082(sp)
    423a:	   |      move.l 1082(sp),d0
    423e:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    4242:	   |      move.l 1078(sp),1074(sp)
    4248:	   |      move.l 1a7ac <DOSBase>,d0
    424e:	   |      movea.l d0,a6
    4250:	   |      move.l 1074(sp),d1
    4254:	   |      jsr -126(a6)
    4258:	   |      move.l d0,1070(sp)
    425c:	   |      move.l 1070(sp),d0
    4260:	   |  ,-- bne.s 4274 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    4262:	   |  |   move.l 1116(sp),-(sp)
    4266:	   |  |   pea 1825e <PutChar+0x890>
    426c:	   |  |   jsr 16f2c <KPrintF>
    4272:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    4274:	   |  '-> move.l 1108(sp),d0
    4278:	   |      movea.l 1116(sp),a0
    427c:	   |      adda.l d0,a0
    427e:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4282:	   '----> move.l #400,1066(sp)
    428a:	          clr.l 1062(sp)
    428e:	          move.l 1a7a4 <SysBase>,d0
    4294:	          movea.l d0,a6
    4296:	          move.l 1066(sp),d0
    429a:	          move.l 1062(sp),d1
    429e:	          jsr -684(a6)
    42a2:	          move.l d0,1058(sp)
    42a6:	          move.l 1058(sp),d0
    42aa:	          move.l d0,1a70c <gamePath>
	if (gamePath==0) {
    42b0:	          move.l 1a70c <gamePath>,d0
    42b6:	      ,-- bne.s 42ca <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    42b8:	      |   pea 18291 <PutChar+0x8c3>
    42be:	      |   jsr 16f2c <KPrintF>
    42c4:	      |   addq.l #4,sp
    42c6:	   ,--|-- bra.w 43b2 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    42ca:	   |  '-> move.l 1a70c <gamePath>,1054(sp)
    42d2:	   |      moveq #-2,d0
    42d4:	   |      move.l d0,1050(sp)
    42d8:	   |      move.l 1a7ac <DOSBase>,d0
    42de:	   |      movea.l d0,a6
    42e0:	   |      move.l 1054(sp),d1
    42e4:	   |      move.l 1050(sp),d2
    42e8:	   |      jsr -84(a6)
    42ec:	   |      move.l d0,1046(sp)
    42f0:	   |      move.l 1046(sp),d0
    42f4:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    42f8:	   |      move.l 1042(sp),1038(sp)
    42fe:	   |      move.l 1a7ac <DOSBase>,d0
    4304:	   |      movea.l d0,a6
    4306:	   |      move.l 1038(sp),d1
    430a:	   |      jsr -126(a6)
    430e:	   |      move.l d0,1034(sp)
    4312:	   |      move.l 1034(sp),d0
    4316:	   |  ,-- bne.s 4326 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    4318:	   |  |   pea 182cc <PutChar+0x8fe>
    431e:	   |  |   jsr 16f2c <KPrintF>
    4324:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    4326:	   |  '-> move.l #1112,d0
    432c:	   |      add.l sp,d0
    432e:	   |      addi.l #-1102,d0
    4334:	   |      move.l d0,1030(sp)
    4338:	   |      moveq #-2,d0
    433a:	   |      move.l d0,1026(sp)
    433e:	   |      move.l 1a7ac <DOSBase>,d0
    4344:	   |      movea.l d0,a6
    4346:	   |      move.l 1030(sp),d1
    434a:	   |      move.l 1026(sp),d2
    434e:	   |      jsr -84(a6)
    4352:	   |      move.l d0,1022(sp)
    4356:	   |      move.l 1022(sp),d0
    435a:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    435e:	   |      move.l 1042(sp),1018(sp)
    4364:	   |      move.l 1a7ac <DOSBase>,d0
    436a:	   |      movea.l d0,a6
    436c:	   |      move.l 1018(sp),d1
    4370:	   |      jsr -126(a6)
    4374:	   |      move.l d0,1014(sp)
    4378:	   |      move.l 1014(sp),d0
    437c:	   |  ,-- bne.s 4392 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    437e:	   |  |   moveq #10,d0
    4380:	   |  |   add.l sp,d0
    4382:	   |  |   move.l d0,-(sp)
    4384:	   |  |   pea 182f8 <PutChar+0x92a>
    438a:	   |  |   jsr 16f2c <KPrintF>
    4390:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    4392:	   |  '-> move.l 1a70c <gamePath>,d0
    4398:	   +----- beq.s 43b2 <setGameFilePath+0x234>
    439a:	   |      move.l 1a70c <gamePath>,1010(sp)
    43a2:	   |      move.l 1a7a4 <SysBase>,d0
    43a8:	   |      movea.l d0,a6
    43aa:	   |      movea.l 1010(sp),a1
    43ae:	   |      jsr -690(a6)
}
    43b2:	   '----> move.l (sp)+,d2
    43b4:	          movea.l (sp)+,a6
    43b6:	          lea 1104(sp),sp
    43ba:	          rts

000043bc <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    43bc:	,-------> lea -16(sp),sp
    43c0:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    43c2:	|         move.l 24(sp),-(sp)
    43c6:	|         jsr 64ea <pauseFunction>
    43cc:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    43ce:	|     ,-- bra.s 43e0 <abortFunction+0x24>
    43d0:	|  ,--|-> moveq #24,d0
    43d2:	|  |  |   add.l 24(sp),d0
    43d6:	|  |  |   move.l d0,-(sp)
    43d8:	|  |  |   jsr 14e64 <trimStack>
    43de:	|  |  |   addq.l #4,sp
    43e0:	|  |  '-> movea.l 24(sp),a0
    43e4:	|  |      move.l 24(a0),d0
    43e8:	|  '----- bne.s 43d0 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    43ea:	|         movea.l 24(sp),a0
    43ee:	|         move.l 4(a0),12(sp)
    43f4:	|         move.l 1a7a4 <SysBase>,d0
    43fa:	|         movea.l d0,a6
    43fc:	|         movea.l 12(sp),a1
    4400:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    4404:	|         clr.l 16(sp)
    4408:	|     ,-- bra.s 4428 <abortFunction+0x6c>
    440a:	|  ,--|-> movea.l 24(sp),a0
    440e:	|  |  |   move.l 20(a0),d1
    4412:	|  |  |   move.l 16(sp),d0
    4416:	|  |  |   lsl.l #3,d0
    4418:	|  |  |   add.l d1,d0
    441a:	|  |  |   move.l d0,-(sp)
    441c:	|  |  |   jsr 1472e <unlinkVar>
    4422:	|  |  |   addq.l #4,sp
    4424:	|  |  |   addq.l #1,16(sp)
    4428:	|  |  '-> movea.l 24(sp),a0
    442c:	|  |      move.l 8(a0),d0
    4430:	|  |      cmp.l 16(sp),d0
    4434:	|  '----- bgt.s 440a <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    4436:	|         movea.l 24(sp),a0
    443a:	|         move.l 20(a0),8(sp)
    4440:	|         move.l 1a7a4 <SysBase>,d0
    4446:	|         movea.l d0,a6
    4448:	|         movea.l 8(sp),a1
    444c:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    4450:	|         moveq #28,d0
    4452:	|         add.l 24(sp),d0
    4456:	|         move.l d0,-(sp)
    4458:	|         jsr 1472e <unlinkVar>
    445e:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    4460:	|         movea.l 24(sp),a0
    4464:	|         move.l 40(a0),d0
    4468:	|     ,-- beq.s 447a <abortFunction+0xbe>
    446a:	|     |   movea.l 24(sp),a0
    446e:	|     |   move.l 40(a0),d0
    4472:	|     |   move.l d0,-(sp)
    4474:	'-----|-- jsr 43bc <abortFunction>(pc)
    4478:	      |   addq.l #4,sp
	FreeVec(fun);
    447a:	      '-> move.l 24(sp),4(sp)
    4480:	          move.l 1a7a4 <SysBase>,d0
    4486:	          movea.l d0,a6
    4488:	          movea.l 4(sp),a1
    448c:	          jsr -690(a6)
	fun = NULL;
    4490:	          clr.l 24(sp)
}
    4494:	          nop
    4496:	          movea.l (sp)+,a6
    4498:	          lea 16(sp),sp
    449c:	          rts

0000449e <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    449e:	          subq.l #8,sp
	int n = 0;
    44a0:	          clr.l 4(sp)
	*killedMyself = FALSE;
    44a4:	          movea.l 20(sp),a0
    44a8:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    44aa:	          move.l 1a73c <allRunningFunctions>,(sp)
	while (fun) {
    44b0:	   ,----- bra.s 44de <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    44b2:	,--|----> movea.l (sp),a0
    44b4:	|  |      move.l (a0),d0
    44b6:	|  |      cmp.l 12(sp),d0
    44ba:	|  |  ,-- bne.s 44d8 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    44bc:	|  |  |   movea.l (sp),a0
    44be:	|  |  |   move.w #1,54(a0)
			n++;
    44c4:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    44c8:	|  |  |   move.l (sp),d0
    44ca:	|  |  |   cmp.l 16(sp),d0
    44ce:	|  |  +-- bne.s 44d8 <cancelAFunction+0x3a>
    44d0:	|  |  |   movea.l 20(sp),a0
    44d4:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    44d8:	|  |  '-> movea.l (sp),a0
    44da:	|  |      move.l 44(a0),(sp)
	while (fun) {
    44de:	|  '----> tst.l (sp)
    44e0:	'-------- bne.s 44b2 <cancelAFunction+0x14>
	}
	return n;
    44e2:	          move.l 4(sp),d0
}
    44e6:	          addq.l #8,sp
    44e8:	          rts

000044ea <completeTimers>:


void completeTimers () {
    44ea:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    44ec:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    44f2:	   ,----- bra.s 4508 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    44f4:	,--|----> movea.l (sp),a0
    44f6:	|  |      move.b 56(a0),d0
    44fa:	|  |  ,-- bne.s 4502 <completeTimers+0x18>
    44fc:	|  |  |   movea.l (sp),a0
    44fe:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    4502:	|  |  '-> movea.l (sp),a0
    4504:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4508:	|  '----> tst.l (sp)
    450a:	'-------- bne.s 44f4 <completeTimers+0xa>
	}
}
    450c:	          nop
    450e:	          nop
    4510:	          addq.l #4,sp
    4512:	          rts

00004514 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    4514:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    4518:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    451e:	                                                             movea.l 80(sp),a0
    4522:	                                                             move.w 54(a0),d0
    4526:	,----------------------------------------------------------- beq.w 53b4 <continueFunction+0xea0>
		abortFunction (fun);
    452a:	|                                                            move.l 80(sp),-(sp)
    452e:	|                                                            jsr 43bc <abortFunction>
    4534:	|                                                            addq.l #4,sp
		return TRUE;
    4536:	|                                                            moveq #1,d0
    4538:	|  ,-------------------------------------------------------- bra.w 53be <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    453c:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    4542:	|  |  |                                                      movea.l 80(sp),a0
    4546:	|  |  |                                                      move.l 4(a0),d1
    454a:	|  |  |                                                      movea.l 80(sp),a0
    454e:	|  |  |                                                      move.l 36(a0),d0
    4552:	|  |  |                                                      lsl.l #3,d0
    4554:	|  |  |                                                      movea.l d1,a0
    4556:	|  |  |                                                      adda.l d0,a0
    4558:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    455e:	|  |  |                                                      movea.l 80(sp),a0
    4562:	|  |  |                                                      move.l 4(a0),d1
    4566:	|  |  |                                                      movea.l 80(sp),a0
    456a:	|  |  |                                                      move.l 36(a0),d0
    456e:	|  |  |                                                      lsl.l #3,d0
    4570:	|  |  |                                                      movea.l d1,a0
    4572:	|  |  |                                                      adda.l d0,a0
    4574:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    4578:	|  |  |                                                      moveq #41,d0
    457a:	|  |  |                                                      cmp.l 64(sp),d0
    457e:	|  |  |  ,-------------------------------------------------- bcs.w 5368 <continueFunction+0xe54>
    4582:	|  |  |  |                                                   move.l 64(sp),d0
    4586:	|  |  |  |                                                   add.l d0,d0
    4588:	|  |  |  |                                                   movea.l d0,a0
    458a:	|  |  |  |                                                   adda.l #17814,a0
    4590:	|  |  |  |                                                   move.w (a0),d0
    4592:	|  |  |  |                                                   jmp (4596 <continueFunction+0x82>,pc,d0.w)
    4596:	|  |  |  |                                                   bset d6,(a2)
    4598:	|  |  |  |                                                   ori.w #2670,(a4)
    459c:	|  |  |  |                                                   eori.w #2416,d6
    45a0:	|  |  |  |                                                   bchg d4,d2
    45a2:	|  |  |  |                                                   bclr d4,(a4)+
    45a4:	|  |  |  |                                                   andi.l #181013194,d4
    45aa:	|  |  |  |                                                   .short 0x0aca
    45ac:	|  |  |  |                                                   .short 0x0aca
    45ae:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    45b6:	|  |  |  |                                                   .short 0x0aca
    45b8:	|  |  |  |                                                   andi.w #906,-(a4)
    45bc:	|  |  |  |                                                   bchg d1,196(a2)
    45c0:	|  |  |  |                                                   bset d1,580(a4)
    45c4:	|  |  |  |                                                   bclr d1,2576(a2)
    45c8:	|  |  |  |                                                   andi.b #-56,2762(a2)
    45ce:	|  |  |  |                                                   .short 0x0aca
    45d0:	|  |  |  |                                                   eori.l #63572682,d0
    45d6:	|  |  |  |                                                   .short 0x0aca
    45d8:	|  |  |  |                                                   bchg d3,-(a2)
    45da:	|  |  |  |                                                   bchg #-36,(a2)
    45de:	|  |  |  |                                                   .short 0x08cc
    45e0:	|  |  |  |                                                   addi.b #14,1038(a0)
    45e6:	|  |  |  |                                                   .short 0x040e
    45e8:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    45ec:	|  |  |  |                                                   ori.w #8232,(a0)
    45f0:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    45f6:	|  |  |  |                                                   ori.w #12136,(a0)
    45fa:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    4600:	|  |  |  |                                                   ori.w #12328,(a0)
    4604:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    460a:	|  |  |  |                                                   add.l 44(sp),d1
    460e:	|  |  |  |                                                   moveq #28,d0
    4610:	|  |  |  |                                                   add.l 80(sp),d0
    4614:	|  |  |  |                                                   move.l d1,-(sp)
    4616:	|  |  |  |                                                   move.l d0,-(sp)
    4618:	|  |  |  |                                                   jsr 1499a <copyVariable>
    461e:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    4620:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4624:	|  |  |  |                                                   jsr 53c4 <finishFunction>
    462a:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    462c:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    4632:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4636:	|  |  |  |                                                   jsr 652c <restartFunction>
    463c:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    463e:	|  |  |  |  ,----------------------------------------------- bra.w 539c <continueFunction+0xe88>
				finishFunction (fun);
    4642:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    4646:	|  |  |  |  |                                                jsr 53c4 <finishFunction>
    464c:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    464e:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    4652:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    4656:	|  |  |  |  +----------------------------------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    465a:	|  |  |  |  |                                                movea.l 80(sp),a0
    465e:	|  |  |  |  |                                                move.l 28(a0),d0
    4662:	|  |  |  |  |                                                moveq #2,d1
    4664:	|  |  |  |  |                                                cmp.l d0,d1
    4666:	|  |  |  |  |                                            ,-- beq.s 4672 <continueFunction+0x15e>
    4668:	|  |  |  |  |                                            |   moveq #4,d1
    466a:	|  |  |  |  |                                            |   cmp.l d0,d1
    466c:	|  |  |  |  |                                         ,--|-- beq.s 46c0 <continueFunction+0x1ac>
    466e:	|  |  |  |  |                                ,--------|--|-- bra.w 47a8 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    4672:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    4676:	|  |  |  |  |                                |        |      jsr 64ea <pauseFunction>
    467c:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    467e:	|  |  |  |  |                                |        |      moveq #24,d0
    4680:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    4684:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    4688:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    468c:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    4690:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    4692:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    4696:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    469a:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    469c:	|  |  |  |  |                                |        |      jsr 6778 <startNewFunctionNum>
    46a2:	|  |  |  |  |                                |        |      lea 20(sp),sp
    46a6:	|  |  |  |  |                                |        |      tst.l d0
    46a8:	|  |  |  |  |                                |        |  ,-- bne.s 46b0 <continueFunction+0x19c>
    46aa:	|  |  |  |  |                                |        |  |   clr.w d0
    46ac:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 53be <continueFunction+0xeaa>
				fun = allRunningFunctions;
    46b0:	|  |  |  |  |                                |        |  '-> move.l 1a73c <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    46b8:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    46bc:	|  |  |  |  |                                |  ,-----|----- bra.w 47bc <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    46c0:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    46c4:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    46c8:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    46cc:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    46d0:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    46d2:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    46d4:	|  |  |  |  |                                |  |            jsr 131c2 <callBuiltIn>
    46da:	|  |  |  |  |                                |  |            lea 12(sp),sp
    46de:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    46e2:	|  |  |  |  |                                |  |            moveq #5,d0
    46e4:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    46e8:	|  |  |  |  |                                |  |  ,-------- bcs.w 47a4 <continueFunction+0x290>
    46ec:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    46f0:	|  |  |  |  |                                |  |  |         add.l d0,d0
    46f2:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    46f4:	|  |  |  |  |                                |  |  |         adda.l #18176,a0
    46fa:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    46fc:	|  |  |  |  |                                |  |  |         jmp (4700 <continueFunction+0x1ec>,pc,d0.w)
    4700:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    4706:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    470a:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    4710:	|  |  |  |  |                                |  |  |         or.b d0,d2
    4712:	|  |  |  |  |                                |  |  |         jsr 16f2c <KPrintF>
    4718:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    471a:	|  |  |  |  |                                |  |  |         clr.w d0
    471c:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 53be <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    4720:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    4724:	|  |  |  |  |                                |  |  |         jsr 64ea <pauseFunction>
    472a:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    472c:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    4730:	|  |  |  |  |                                |  |  |  ,----- bra.s 47a6 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    4732:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    4736:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    473a:	|  |  |  |  |                                |  |  |  +----- bra.s 47a6 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    473c:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    4740:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    4746:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    4748:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    474c:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4750:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4754:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4756:	|  |  |  |  |                                |  |  |  |      jsr 14dd2 <setVariable>
    475c:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    4760:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    4764:	|  |  |  |  |                                |  |  |  |      jsr 64ea <pauseFunction>
    476a:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    476c:	|  |  |  |  |                                |  |  |  |      move.l 1a774 <noStack>,d1
    4772:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    4776:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4778:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    477a:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    477e:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4780:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4782:	|  |  |  |  |                                |  |  |  |      jsr 6778 <startNewFunctionNum>
    4788:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    478c:	|  |  |  |  |                                |  |  |  |      tst.l d0
    478e:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 4796 <continueFunction+0x282>
    4790:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    4792:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 53be <continueFunction+0xeaa>
							fun = allRunningFunctions;
    4796:	|  |  |  |  |                                |  |  |  |  '-> move.l 1a73c <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    479e:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    47a2:	|  |  |  |  |                                |  |  |  +----- bra.s 47a6 <continueFunction+0x292>

						default:
						break;
    47a4:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    47a6:	|  |  |  |  |                                |  +-----'----X bra.s 47bc <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    47a8:	|  |  |  |  |                                '--|----------> pea 1844b <PutChar+0xa7d>
    47ae:	|  |  |  |  |                                   |            jsr 16f2c <KPrintF>
    47b4:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    47b6:	|  |  |  |  |                                   |            clr.w d0
    47b8:	|  +--|--|--|-----------------------------------|----------- bra.w 53be <continueFunction+0xeaa>
			}
			break;
    47bc:	|  |  |  |  +-----------------------------------'----------X bra.w 539c <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    47c0:	|  |  |  |  |                                                moveq #28,d0
    47c2:	|  |  |  |  |                                                add.l 80(sp),d0
    47c6:	|  |  |  |  |                                                clr.l -(sp)
    47c8:	|  |  |  |  |                                                clr.l -(sp)
    47ca:	|  |  |  |  |                                                move.l d0,-(sp)
    47cc:	|  |  |  |  |                                                jsr 14dd2 <setVariable>
    47d2:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    47d6:	|  |  |  |  +----------------------------------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    47da:	|  |  |  |  |                                                move.l 68(sp),d1
    47de:	|  |  |  |  |                                                moveq #28,d0
    47e0:	|  |  |  |  |                                                add.l 80(sp),d0
    47e4:	|  |  |  |  |                                                move.l d1,-(sp)
    47e6:	|  |  |  |  |                                                pea 5 <_start+0x5>
    47ea:	|  |  |  |  |                                                move.l d0,-(sp)
    47ec:	|  |  |  |  |                                                jsr 14dd2 <setVariable>
    47f2:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    47f6:	|  |  |  |  +----------------------------------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    47fa:	|  |  |  |  |                                                move.l 68(sp),d1
    47fe:	|  |  |  |  |                                                moveq #28,d0
    4800:	|  |  |  |  |                                                add.l 80(sp),d0
    4804:	|  |  |  |  |                                                move.l d1,-(sp)
    4806:	|  |  |  |  |                                                pea 1 <_start+0x1>
    480a:	|  |  |  |  |                                                move.l d0,-(sp)
    480c:	|  |  |  |  |                                                jsr 14dd2 <setVariable>
    4812:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4816:	|  |  |  |  +----------------------------------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    481a:	|  |  |  |  |                                                moveq #28,d0
    481c:	|  |  |  |  |                                                add.l 80(sp),d0
    4820:	|  |  |  |  |                                                movea.l 80(sp),a0
    4824:	|  |  |  |  |                                                movea.l 20(a0),a0
    4828:	|  |  |  |  |                                                move.l 68(sp),d1
    482c:	|  |  |  |  |                                                lsl.l #3,d1
    482e:	|  |  |  |  |                                                add.l a0,d1
    4830:	|  |  |  |  |                                                move.l d0,-(sp)
    4832:	|  |  |  |  |                                                move.l d1,-(sp)
    4834:	|  |  |  |  |                                                jsr 1499a <copyVariable>
    483a:	|  |  |  |  |                                                addq.l #8,sp
    483c:	|  |  |  |  |                                                tst.w d0
    483e:	|  |  |  |  |  ,-------------------------------------------- bne.w 537a <continueFunction+0xe66>
    4842:	|  |  |  |  |  |                                             clr.w d0
    4844:	|  +--|--|--|--|-------------------------------------------- bra.w 53be <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4848:	|  |  |  |  |  |                                             moveq #28,d0
    484a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    484e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4850:	|  |  |  |  |  |                                             jsr 14a20 <getBoolean>
    4856:	|  |  |  |  |  |                                             addq.l #4,sp
    4858:	|  |  |  |  |  |                                             tst.w d0
    485a:	|  |  |  |  |  |                                      ,----- beq.s 4876 <continueFunction+0x362>
    485c:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    4860:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    4864:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    4866:	|  |  |  |  |  |                                      |      jsr 14a20 <getBoolean>
    486c:	|  |  |  |  |  |                                      |      addq.l #4,sp
    486e:	|  |  |  |  |  |                                      |      tst.w d0
    4870:	|  |  |  |  |  |                                      +----- beq.s 4876 <continueFunction+0x362>
    4872:	|  |  |  |  |  |                                      |      moveq #1,d0
    4874:	|  |  |  |  |  |                                      |  ,-- bra.s 4878 <continueFunction+0x364>
    4876:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    4878:	|  |  |  |  |  |                                         '-> moveq #28,d1
    487a:	|  |  |  |  |  |                                             add.l 80(sp),d1
    487e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4880:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4884:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4886:	|  |  |  |  |  |                                             jsr 14dd2 <setVariable>
    488c:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4890:	|  |  |  |  |  |                                             moveq #24,d0
    4892:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4896:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4898:	|  |  |  |  |  |                                             jsr 14e64 <trimStack>
    489e:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    48a0:	|  |  |  |  +--|-------------------------------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    48a4:	|  |  |  |  |  |                                             moveq #28,d0
    48a6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    48aa:	|  |  |  |  |  |                                             move.l d0,-(sp)
    48ac:	|  |  |  |  |  |                                             jsr 14a20 <getBoolean>
    48b2:	|  |  |  |  |  |                                             addq.l #4,sp
    48b4:	|  |  |  |  |  |                                             tst.w d0
    48b6:	|  |  |  |  |  |                                         ,-- bne.s 48ce <continueFunction+0x3ba>
    48b8:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    48bc:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    48c0:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    48c2:	|  |  |  |  |  |                                         |   jsr 14a20 <getBoolean>
    48c8:	|  |  |  |  |  |                                         |   addq.l #4,sp
    48ca:	|  |  |  |  |  |                                         |   tst.w d0
    48cc:	|  |  |  |  |  |                                      ,--|-- beq.s 48d2 <continueFunction+0x3be>
    48ce:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    48d0:	|  |  |  |  |  |                                      |  ,-- bra.s 48d4 <continueFunction+0x3c0>
    48d2:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    48d4:	|  |  |  |  |  |                                         '-> moveq #28,d1
    48d6:	|  |  |  |  |  |                                             add.l 80(sp),d1
    48da:	|  |  |  |  |  |                                             move.l d0,-(sp)
    48dc:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    48e0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    48e2:	|  |  |  |  |  |                                             jsr 14dd2 <setVariable>
    48e8:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    48ec:	|  |  |  |  |  |                                             moveq #24,d0
    48ee:	|  |  |  |  |  |                                             add.l 80(sp),d0
    48f2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    48f4:	|  |  |  |  |  |                                             jsr 14e64 <trimStack>
    48fa:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    48fc:	|  |  |  |  +--|-------------------------------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    4900:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4904:	|  |  |  |  |  |                                             moveq #28,d0
    4906:	|  |  |  |  |  |                                             add.l 80(sp),d0
    490a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    490c:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    4910:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4912:	|  |  |  |  |  |                                             jsr 14dd2 <setVariable>
    4918:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    491c:	|  |  |  |  +--|-------------------------------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    4920:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4924:	|  |  |  |  |  |                                             moveq #28,d0
    4926:	|  |  |  |  |  |                                             add.l 80(sp),d0
    492a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    492c:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    4930:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4932:	|  |  |  |  |  |                                             jsr 14dd2 <setVariable>
    4938:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    493c:	|  |  |  |  +--|-------------------------------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    4940:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4944:	|  |  |  |  |  |                                             moveq #28,d0
    4946:	|  |  |  |  |  |                                             add.l 80(sp),d0
    494a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    494c:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    4950:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4952:	|  |  |  |  |  |                                             jsr 14dd2 <setVariable>
    4958:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    495c:	|  |  |  |  +--|-------------------------------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    4960:	|  |  |  |  |  |                                             move.l 1a704 <dialogValue>,d0
    4966:	|  |  |  |  |  |                                             moveq #1,d1
    4968:	|  |  |  |  |  |                                             cmp.l d0,d1
    496a:	|  |  |  |  |  |  ,----------------------------------------- beq.w 537e <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    496e:	|  |  |  |  |  |  |                                          pea 18460 <PutChar+0xa92>
    4974:	|  |  |  |  |  |  |                                          jsr 16f2c <KPrintF>
    497a:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    497c:	|  |  |  |  |  |  |                                          clr.w d0
    497e:	|  +--|--|--|--|--|----------------------------------------- bra.w 53be <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    4982:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    4986:	|  |  |  |  |  |  |                                          moveq #28,d0
    4988:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    498c:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    498e:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    4990:	|  |  |  |  |  |  |                                          jsr 14564 <loadStringToVar>
    4996:	|  |  |  |  |  |  |                                          addq.l #8,sp
    4998:	|  |  |  |  |  |  |                                          tst.w d0
    499a:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 5382 <continueFunction+0xe6e>
					return FALSE;
    499e:	|  |  |  |  |  |  |  |                                       clr.w d0
    49a0:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 53be <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    49a4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    49a8:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    49ac:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    49ae:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    49b0:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    49b2:	|  |  |  |  |  |  |  |                                ,----- beq.s 4a10 <continueFunction+0x4fc>
    49b4:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    49b6:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    49b8:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 4ba4 <continueFunction+0x690>
    49bc:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    49be:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 49ca <continueFunction+0x4b6>
    49c0:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    49c2:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    49c4:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4a10 <continueFunction+0x4fc>
    49c6:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 4ba4 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    49ca:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    49cc:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    49d0:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 49fc <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    49d2:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    49d4:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    49d8:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    49da:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    49dc:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    49de:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14dd2 <setVariable>
    49e4:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    49e8:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    49ea:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    49ee:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    49f0:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14e64 <trimStack>
    49f6:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    49f8:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 4bba <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    49fc:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 184a1 <PutChar+0xad3>
    4a02:	|  |  |  |  |  |  |  |              |  |              |      jsr 16f2c <KPrintF>
    4a08:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4a0a:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4a0c:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 53be <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4a10:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    4a14:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4a18:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4a1c:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4a1e:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 4a34 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4a20:	|  |  |  |  |  |  |  |              |  |                 |   pea 184dd <PutChar+0xb0f>
    4a26:	|  |  |  |  |  |  |  |              |  |                 |   jsr 16f2c <KPrintF>
    4a2c:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4a2e:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4a30:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 53be <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4a34:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    4a36:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4a3a:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4a3c:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4a40:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    4a44:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    4a46:	|  |  |  |  |  |  |  |              |  |                     jsr 144e0 <getValueType>
    4a4c:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4a50:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    4a52:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 4a5a <continueFunction+0x546>
    4a54:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4a56:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 53be <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4a5a:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    4a5e:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4a62:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    4a64:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    4a66:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    4a68:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 4a8a <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    4a6a:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    4a6e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    4a70:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    4a74:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    4a78:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    4a7c:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    4a7e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4a80:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1416a <fastArrayGetByIndex>
    4a86:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    4a88:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 4aaa <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    4a8a:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    4a8e:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    4a90:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    4a94:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    4a98:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    4a9c:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    4a9e:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    4aa0:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    4aa2:	|  |  |  |  |  |  |  |              |  |              |      jsr 14df4 <stackGetByIndex>
    4aa8:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4aaa:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    4aae:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    4ab0:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4ab4:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4ab6:	|  |  |  |  |  |  |  |              |  |                     jsr 14e64 <trimStack>
    4abc:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    4abe:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    4ac2:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 4ade <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    4ac4:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    4ac6:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4aca:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4acc:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4ace:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4ad0:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14dd2 <setVariable>
    4ad6:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4ada:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 4bb8 <continueFunction+0x6a4>
						switch (com) {
    4ade:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    4ae0:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    4ae4:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 4af2 <continueFunction+0x5de>
    4ae6:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4ae8:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4aec:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 4b3c <continueFunction+0x628>
    4aee:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 4b84 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4af2:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    4af6:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4afa:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4afe:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4b00:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 144e0 <getValueType>
    4b06:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4b0a:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4b0c:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 4b14 <continueFunction+0x600>
    4b0e:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4b10:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 4b9e <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4b14:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    4b16:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4b18:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4b1c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4b1e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    4b22:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    4b24:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 14dd2 <setVariable>
    4b2a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4b2e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4b30:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    4b32:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    4b36:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4b3a:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 4ba2 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4b3c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    4b40:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4b44:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4b48:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4b4a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 144e0 <getValueType>
    4b50:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    4b54:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    4b56:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 4b5c <continueFunction+0x648>
    4b58:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4b5a:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 4b9e <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4b5c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    4b5e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4b60:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    4b64:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    4b66:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4b6a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    4b6c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14dd2 <setVariable>
    4b72:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    4b76:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    4b78:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    4b7a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    4b7e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    4b82:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 4ba2 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    4b84:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    4b86:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    4b8a:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    4b8c:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    4b90:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 1499a <copyVariable>
    4b96:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    4b98:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    4b9a:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 4bb8 <continueFunction+0x6a4>
    4b9c:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4b9e:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 53be <continueFunction+0xeaa>
				break;
    4ba2:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 4bb8 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    4ba4:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 184fb <PutChar+0xb2d>
    4baa:	|  |  |  |  |  |  |  |                 |  |                  jsr 16f2c <KPrintF>
    4bb0:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    4bb2:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    4bb4:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 53be <continueFunction+0xeaa>
				break;
    4bb8:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    4bba:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 539c <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    4bbe:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4bc2:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4bc6:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4bc8:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    4bca:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4bcc:	|  |  |  |  |  |  |  |                                   ,-- beq.s 4bda <continueFunction+0x6c6>
    4bce:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    4bd0:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    4bd2:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 4c86 <continueFunction+0x772>
    4bd6:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 4ce4 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4bda:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    4bde:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4be2:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4be6:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4be8:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 4bfe <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    4bea:	|  |  |  |  |  |  |  |                             |  |  |   pea 184dd <PutChar+0xb0f>
    4bf0:	|  |  |  |  |  |  |  |                             |  |  |   jsr 16f2c <KPrintF>
    4bf6:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    4bf8:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4bfa:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 53be <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4bfe:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    4c00:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4c04:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4c06:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    4c0a:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    4c0e:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    4c10:	|  |  |  |  |  |  |  |                             |  |      jsr 144e0 <getValueType>
    4c16:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4c1a:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4c1c:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 4c24 <continueFunction+0x710>
    4c1e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4c20:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 53be <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    4c24:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    4c28:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4c2c:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    4c30:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    4c32:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    4c36:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    4c38:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    4c3c:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4c40:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4c44:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4c46:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    4c48:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    4c4a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4c4c:	|  |  |  |  |  |  |  |                             |  |      jsr 6734 <stackSetByIndex>
    4c52:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4c56:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4c58:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 4c60 <continueFunction+0x74c>
						return FALSE;
    4c5a:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4c5c:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 53be <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    4c60:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    4c62:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4c66:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4c68:	|  |  |  |  |  |  |  |                             |  |      jsr 14e64 <trimStack>
    4c6e:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    4c70:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    4c72:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4c76:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4c78:	|  |  |  |  |  |  |  |                             |  |      jsr 14e64 <trimStack>
    4c7e:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    4c80:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    4c82:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 539c <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    4c86:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    4c88:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    4c8c:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    4c8e:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    4c92:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    4c96:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    4c98:	|  |  |  |  |  |  |  |                             |         jsr 144e0 <getValueType>
    4c9e:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    4ca2:	|  |  |  |  |  |  |  |                             |         tst.w d0
    4ca4:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 4cac <continueFunction+0x798>
    4ca6:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    4ca8:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 53be <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    4cac:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    4cb0:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    4cb2:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    4cb6:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    4cba:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    4cbe:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    4cc0:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    4cc2:	|  |  |  |  |  |  |  |                             |         jsr 1416a <fastArrayGetByIndex>
    4cc8:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    4cca:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    4cce:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 4cde <continueFunction+0x7ca>
    4cd0:	|  |  |  |  |  |  |  |                             |     |   pea 1851f <PutChar+0xb51>
    4cd6:	|  |  |  |  |  |  |  |                             |     |   jsr 16f2c <KPrintF>
    4cdc:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    4cde:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    4ce0:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 53be <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    4ce4:	|  |  |  |  |  |  |  |                             '-------> pea 184fb <PutChar+0xb2d>
    4cea:	|  |  |  |  |  |  |  |                                       jsr 16f2c <KPrintF>
    4cf0:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    4cf2:	|  |  |  |  |  |  |  |                                       clr.w d0
    4cf4:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 53be <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4cf8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4cfc:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4d00:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4d04:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4d06:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4d08:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4d0a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4d0e:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    4d12:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4d14:	|  |  |  |  |  |  |  |                                       jsr 144e0 <getValueType>
    4d1a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4d1e:	|  |  |  |  |  |  |  |                                       tst.w d0
    4d20:	|  |  |  |  |  |  |  |                                   ,-- bne.s 4d28 <continueFunction+0x814>
    4d22:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4d24:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 53be <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4d28:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    4d2c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4d2e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4d32:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4d34:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4d38:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4d3a:	|  |  |  |  |  |  |  |                                       jsr 14dd2 <setVariable>
    4d40:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    4d44:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    4d48:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4d4a:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    4d4c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4d50:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    4d54:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4d58:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4d5a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4d5c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4d5e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4d62:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4d64:	|  |  |  |  |  |  |  |                                       jsr 14dd2 <setVariable>
    4d6a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4d6e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    4d72:	|  |  |  |  |  |  |  |                                       move.l 1a752 <globalVars>,d1
    4d78:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4d7c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4d7e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4d80:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4d82:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4d86:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    4d8a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4d8c:	|  |  |  |  |  |  |  |                                       jsr 144e0 <getValueType>
    4d92:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4d96:	|  |  |  |  |  |  |  |                                       tst.w d0
    4d98:	|  |  |  |  |  |  |  |                                   ,-- bne.s 4da0 <continueFunction+0x88c>
    4d9a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4d9c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 53be <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4da0:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    4da4:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4da6:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4daa:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4dac:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4db0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4db2:	|  |  |  |  |  |  |  |                                       jsr 14dd2 <setVariable>
    4db8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    4dbc:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    4dc0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4dc2:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    4dc4:	|  |  |  |  |  |  |  |                                       movea.l 1a752 <globalVars>,a0
    4dca:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4dce:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4dd0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4dd2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4dd4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4dd8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4dda:	|  |  |  |  |  |  |  |                                       jsr 14dd2 <setVariable>
    4de0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4de4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4de8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4dec:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4df0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4df4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4df6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4df8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4dfa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4dfe:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    4e02:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4e04:	|  |  |  |  |  |  |  |                                       jsr 144e0 <getValueType>
    4e0a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4e0e:	|  |  |  |  |  |  |  |                                       tst.w d0
    4e10:	|  |  |  |  |  |  |  |                                   ,-- bne.s 4e18 <continueFunction+0x904>
    4e12:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4e14:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 53be <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4e18:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    4e1c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4e1e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4e22:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4e24:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4e28:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4e2a:	|  |  |  |  |  |  |  |                                       jsr 14dd2 <setVariable>
    4e30:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    4e34:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    4e38:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4e3a:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4e3c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4e40:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    4e44:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4e48:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4e4a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4e4c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4e4e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4e52:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4e54:	|  |  |  |  |  |  |  |                                       jsr 14dd2 <setVariable>
    4e5a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4e5e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    4e62:	|  |  |  |  |  |  |  |                                       move.l 1a752 <globalVars>,d1
    4e68:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4e6c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4e6e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4e70:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4e72:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4e76:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    4e7a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4e7c:	|  |  |  |  |  |  |  |                                       jsr 144e0 <getValueType>
    4e82:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4e86:	|  |  |  |  |  |  |  |                                       tst.w d0
    4e88:	|  |  |  |  |  |  |  |                                   ,-- bne.s 4e90 <continueFunction+0x97c>
    4e8a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4e8c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 53be <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4e90:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    4e94:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4e96:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4e9a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4e9c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4ea0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4ea2:	|  |  |  |  |  |  |  |                                       jsr 14dd2 <setVariable>
    4ea8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    4eac:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    4eb0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4eb2:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4eb4:	|  |  |  |  |  |  |  |                                       movea.l 1a752 <globalVars>,a0
    4eba:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4ebe:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4ec0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4ec2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4ec4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4ec8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4eca:	|  |  |  |  |  |  |  |                                       jsr 14dd2 <setVariable>
    4ed0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4ed4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    4ed8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4edc:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4ee0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4ee4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4ee6:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    4ee8:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4eea:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4eee:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4ef0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4ef2:	|  |  |  |  |  |  |  |                                       jsr 1499a <copyVariable>
    4ef8:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    4efa:	|  |  |  |  |  |  |  |                                       tst.w d0
    4efc:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 5386 <continueFunction+0xe72>
    4f00:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    4f02:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 53be <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    4f06:	|  |  |  |  |  |  |  |  |                                    move.l 1a752 <globalVars>,d1
    4f0c:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    4f10:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    4f12:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    4f14:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    4f16:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    4f1a:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    4f1c:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    4f1e:	|  |  |  |  |  |  |  |  |                                    jsr 1499a <copyVariable>
    4f24:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    4f26:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    4f28:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 538a <continueFunction+0xe76>
    4f2c:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    4f2e:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 53be <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    4f32:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    4f34:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    4f38:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1a752 <globalVars>,a0
    4f3e:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    4f42:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    4f44:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    4f46:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    4f48:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    4f4a:	|  |  |  |  |  |  |  |  |  |                                 jsr 1499a <copyVariable>
    4f50:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    4f52:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    4f54:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 538e <continueFunction+0xe7a>
    4f58:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    4f5a:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 53be <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    4f5e:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    4f60:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    4f64:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    4f66:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    4f6a:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    4f6c:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    4f6e:	|  |  |  |  |  |  |  |  |  |  |                              jsr 13d1c <addVarToStack>
    4f74:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    4f76:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    4f78:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 5392 <continueFunction+0xe7e>
    4f7c:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    4f7e:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 53be <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    4f82:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    4f84:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    4f88:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    4f8a:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    4f8e:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    4f90:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    4f92:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 13da2 <addVarToStackQuick>
    4f98:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    4f9a:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    4f9c:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 5396 <continueFunction+0xe82>
    4fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    4fa2:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 53be <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    4fa6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4fac:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4fae:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14a20 <getBoolean>
    4fb4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4fb6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    4fba:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    4fbc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    4fbe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    4fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4fc2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    4fc8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    4fcc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4fce:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14dd2 <setVariable>
    4fd4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    4fd8:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    4fdc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4fde:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4fe2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14a20 <getBoolean>
    4fea:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4fec:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4fee:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 539a <continueFunction+0xe86>
				advanceNow = FALSE;
    4ff2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    4ff6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4ffa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5000:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 539a <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5004:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5008:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    500c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5012:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 539c <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5016:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5018:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    501c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    501e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5022:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5026:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    5028:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 144e0 <getValueType>
    502e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5032:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    5034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 503c <continueFunction+0xb28>
    5036:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5038:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 53be <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    503c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    5040:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    5044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5046:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    504a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    504c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5052:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14dd2 <setVariable>
    5058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    505c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 539c <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    5060:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5064:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    5068:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 5352 <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    506c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    506e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5072:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 50ee <continueFunction+0xbda>
    5074:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    507a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 5138 <continueFunction+0xc24>
    507e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 5092 <continueFunction+0xb7e>
    5086:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    508c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 50c0 <continueFunction+0xbac>
    508e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 5138 <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    5094:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    509c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    50a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    50a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    50a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 13e16 <addVariablesInSecond>
    50aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    50ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    50ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    50b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    50b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14e64 <trimStack>
    50ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    50bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 5366 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    50c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    50c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    50c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    50ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    50ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    50d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    50d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 13ed4 <compareVariablesInSecond>
    50d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    50da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    50dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    50e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    50e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14e64 <trimStack>
    50e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    50ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 5366 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    50ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    50f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    50f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    50f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    50fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    50fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5100:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 13ed4 <compareVariablesInSecond>
    5106:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5108:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    510a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    510e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5110:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14e64 <trimStack>
    5116:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    5118:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    511c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    5120:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    5122:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    5124:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    5126:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    512c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5130:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    5134:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 5366 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    5138:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    513c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    5140:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5142:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5146:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    514a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    514c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 144e0 <getValueType>
    5152:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5156:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5158:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5160 <continueFunction+0xc4c>
    515a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    515c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 53be <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    5160:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    5162:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5166:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5168:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    516c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5170:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5172:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 144e0 <getValueType>
    5178:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    517c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    517e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5186 <continueFunction+0xc72>
    5180:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5182:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 53be <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5186:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    5188:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    518c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    518e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14e64 <trimStack>
    5194:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    5196:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    5198:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    519c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    519e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    51a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 5364 <continueFunction+0xe50>
    51a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    51a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    51a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #20916,a0
    51ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    51b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (51b4 <continueFunction+0xca0>,pc,d0.w)
    51b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    51b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    51ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    51c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    51c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    51cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    51d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    51dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    51e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    51e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    51ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    51ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    51f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 178b8 <__mulsi3>
    51f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    51f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    51fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    51fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5200:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5202:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5206:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5208:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14dd2 <setVariable>
    520e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5212:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5366 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    5216:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    521a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    521e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    5220:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5222:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5226:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    522c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    522e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14dd2 <setVariable>
    5234:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5238:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5366 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    523c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5240:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5244:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5246:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17964 <__modsi3>
    524e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5250:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5252:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5254:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5258:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    525a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    525e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5260:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14dd2 <setVariable>
    5266:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    526a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5366 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    526e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5272:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5278:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    527a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17936 <__divsi3>
    5280:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5284:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    528a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    528c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14dd2 <setVariable>
    5298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    529c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5366 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    52a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    52a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    52a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    52aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    52ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    52ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    52b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    52b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    52b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    52b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    52ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    52be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    52c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14dd2 <setVariable>
    52c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    52ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5366 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    52ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    52d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    52d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    52d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    52da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    52dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    52de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    52e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    52e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    52e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    52e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    52ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    52ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14dd2 <setVariable>
    52f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    52f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5366 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    52fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    52fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5306:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    530a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    530c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    530e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    531a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14dd2 <setVariable>
    5320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5366 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    5326:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    532a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    532e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    5332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    533a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    533e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14dd2 <setVariable>
    534c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5350:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5366 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    5352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 18540 <PutChar+0xb72>
    5358:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 16f2c <KPrintF>
    535e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    5360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    5362:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 53be <continueFunction+0xeaa>
						break;
    5364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    5366:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 539c <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    5368:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 18558 <PutChar+0xb8a>
    536e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 16f2c <KPrintF>
    5374:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    5376:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    5378:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 53be <continueFunction+0xeaa>
			break;
    537a:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    537c:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 539c <continueFunction+0xe88>
			break;
    537e:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    5380:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 539c <continueFunction+0xe88>
			break;
    5382:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    5384:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 539c <continueFunction+0xe88>
			break;
    5386:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    5388:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 539c <continueFunction+0xe88>
			break;
    538a:	|  |  |     |              '--|--|--|--|-------------------> nop
    538c:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 539c <continueFunction+0xe88>
			break;
    538e:	|  |  |     |                 '--|--|--|-------------------> nop
    5390:	|  |  |     +--------------------|--|--|-------------------- bra.s 539c <continueFunction+0xe88>
			break;
    5392:	|  |  |     |                    '--|--|-------------------> nop
    5394:	|  |  |     +-----------------------|--|-------------------- bra.s 539c <continueFunction+0xe88>
			break;
    5396:	|  |  |     |                       '--|-------------------> nop
    5398:	|  |  |     +--------------------------|-------------------- bra.s 539c <continueFunction+0xe88>
			break;
    539a:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    539c:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    53a0:	+--|--|----------------------------------------------------- beq.s 53b4 <continueFunction+0xea0>
    53a2:	|  |  |                                                      movea.l 80(sp),a0
    53a6:	|  |  |                                                      move.l 36(a0),d0
    53aa:	|  |  |                                                      addq.l #1,d0
    53ac:	|  |  |                                                      movea.l 80(sp),a0
    53b0:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    53b4:	'--|--|----------------------------------------------------> tst.w 74(sp)
    53b8:	   |  '----------------------------------------------------- bne.w 453c <continueFunction+0x28>

	}
	return TRUE;
    53bc:	   |                                                         moveq #1,d0
}
    53be:	   '-------------------------------------------------------> lea 76(sp),sp
    53c2:	                                                             rts

000053c4 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    53c4:	          lea -16(sp),sp
    53c8:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    53ca:	          move.l 24(sp),-(sp)
    53ce:	          jsr 64ea <pauseFunction>
    53d4:	          addq.l #4,sp
	if (fun -> stack) 
    53d6:	          movea.l 24(sp),a0
    53da:	          move.l 24(a0),d0
    53de:	      ,-- beq.s 53f2 <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    53e0:	      |   pea 18584 <PutChar+0xbb6>
    53e6:	      |   jsr 16f2c <KPrintF>
    53ec:	      |   addq.l #4,sp
		return;
    53ee:	,-----|-- bra.w 548c <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    53f2:	|     '-> movea.l 24(sp),a0
    53f6:	|         move.l 4(a0),12(sp)
    53fc:	|         move.l 1a7a4 <SysBase>,d0
    5402:	|         movea.l d0,a6
    5404:	|         movea.l 12(sp),a1
    5408:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    540c:	|         clr.l 16(sp)
    5410:	|     ,-- bra.s 5430 <finishFunction+0x6c>
    5412:	|  ,--|-> movea.l 24(sp),a0
    5416:	|  |  |   move.l 20(a0),d1
    541a:	|  |  |   move.l 16(sp),d0
    541e:	|  |  |   lsl.l #3,d0
    5420:	|  |  |   add.l d1,d0
    5422:	|  |  |   move.l d0,-(sp)
    5424:	|  |  |   jsr 1472e <unlinkVar>
    542a:	|  |  |   addq.l #4,sp
    542c:	|  |  |   addq.l #1,16(sp)
    5430:	|  |  '-> movea.l 24(sp),a0
    5434:	|  |      move.l 8(a0),d0
    5438:	|  |      cmp.l 16(sp),d0
    543c:	|  '----- bgt.s 5412 <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    543e:	|         movea.l 24(sp),a0
    5442:	|         move.l 8(a0),d0
    5446:	|     ,-- ble.s 5462 <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    5448:	|     |   movea.l 24(sp),a0
    544c:	|     |   move.l 20(a0),8(sp)
    5452:	|     |   move.l 1a7a4 <SysBase>,d0
    5458:	|     |   movea.l d0,a6
    545a:	|     |   movea.l 8(sp),a1
    545e:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    5462:	|     '-> moveq #28,d0
    5464:	|         add.l 24(sp),d0
    5468:	|         move.l d0,-(sp)
    546a:	|         jsr 1472e <unlinkVar>
    5470:	|         addq.l #4,sp
	FreeVec(fun);
    5472:	|         move.l 24(sp),4(sp)
    5478:	|         move.l 1a7a4 <SysBase>,d0
    547e:	|         movea.l d0,a6
    5480:	|         movea.l 4(sp),a1
    5484:	|         jsr -690(a6)
	fun = NULL;
    5488:	|         clr.l 24(sp)
}
    548c:	'-------> movea.l (sp)+,a6
    548e:	          lea 16(sp),sp
    5492:	          rts

00005494 <freezeSubs>:

void freezeSubs () {
    5494:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5496:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    549c:	   ,----- bra.s 54ba <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    549e:	,--|----> movea.l (sp),a0
    54a0:	|  |      move.w 52(a0),d0
    54a4:	|  |  ,-- bne.s 54b4 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    54a6:	|  |  |   movea.l (sp),a0
    54a8:	|  |  |   move.b 56(a0),d0
    54ac:	|  |  |   addq.b #1,d0
    54ae:	|  |  |   movea.l (sp),a0
    54b0:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    54b4:	|  |  '-> movea.l (sp),a0
    54b6:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    54ba:	|  '----> tst.l (sp)
    54bc:	'-------- bne.s 549e <freezeSubs+0xa>
	}
}
    54be:	          nop
    54c0:	          nop
    54c2:	          addq.l #4,sp
    54c4:	          rts

000054c6 <handleInput>:

BOOL handleInput () {
    54c6:	             lea -16(sp),sp
    54ca:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    54cc:	             move.l 1a8b8 <overRegion>,d0
    54d2:	         ,-- bne.s 54da <handleInput+0x14>
    54d4:	         |   jsr 156a4 <getOverRegion>

	if (input.justMoved) {
    54da:	         '-> move.w 1a75a <input+0x4>,d0
    54e0:	         ,-- beq.s 551e <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    54e2:	         |   movea.l 1a11c <currentEvents>,a0
    54e8:	         |   move.l 16(a0),d0
    54ec:	         +-- beq.s 551e <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    54ee:	         |   move.l 1a774 <noStack>,d1
    54f4:	         |   movea.l 1a11c <currentEvents>,a0
    54fa:	         |   move.l 16(a0),d0
    54fe:	         |   pea 1 <_start+0x1>
    5502:	         |   move.l d1,-(sp)
    5504:	         |   clr.l -(sp)
    5506:	         |   clr.l -(sp)
    5508:	         |   move.l d0,-(sp)
    550a:	         |   jsr 6778 <startNewFunctionNum>
    5510:	         |   lea 20(sp),sp
    5514:	         |   tst.l d0
    5516:	         +-- bne.s 551e <handleInput+0x58>
    5518:	         |   clr.w d0
    551a:	,--------|-- bra.w 5724 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    551e:	|        '-> clr.w 1a75a <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    5524:	|            move.l 1a76c <lastRegion>,d1
    552a:	|            move.l 1a8b8 <overRegion>,d0
    5530:	|            cmp.l d1,d0
    5532:	|  ,-------- beq.w 560a <handleInput+0x144>
    5536:	|  |         movea.l 1a11c <currentEvents>,a0
    553c:	|  |         move.l 20(a0),d0
    5540:	|  +-------- beq.w 560a <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    5544:	|  |         moveq #12,d0
    5546:	|  |         move.l d0,16(sp)
    554a:	|  |         clr.l 12(sp)
    554e:	|  |         move.l 1a7a4 <SysBase>,d0
    5554:	|  |         movea.l d0,a6
    5556:	|  |         move.l 16(sp),d0
    555a:	|  |         move.l 12(sp),d1
    555e:	|  |         jsr -684(a6)
    5562:	|  |         move.l d0,8(sp)
    5566:	|  |         move.l 8(sp),d0
    556a:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    556e:	|  |         move.l 4(sp),d0
    5572:	|  |     ,-- bne.s 5588 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    5574:	|  |     |   pea 185aa <PutChar+0xbdc>
    557a:	|  |     |   jsr 16f2c <KPrintF>
    5580:	|  |     |   addq.l #4,sp
			return FALSE;
    5582:	|  |     |   clr.w d0
    5584:	+--|-----|-- bra.w 5724 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    5588:	|  |     '-> movea.l 4(sp),a0
    558c:	|  |         clr.l (a0)
		if (overRegion) {
    558e:	|  |         move.l 1a8b8 <overRegion>,d0
    5594:	|  |  ,----- beq.s 55bc <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    5596:	|  |  |      movea.l 1a8b8 <overRegion>,a0
    559c:	|  |  |      movea.l 28(a0),a0
    55a0:	|  |  |      move.l 4(a0),d1
    55a4:	|  |  |      move.l 4(sp),d0
    55a8:	|  |  |      move.l d1,-(sp)
    55aa:	|  |  |      pea 7 <_start+0x7>
    55ae:	|  |  |      move.l d0,-(sp)
    55b0:	|  |  |      jsr 14dd2 <setVariable>
    55b6:	|  |  |      lea 12(sp),sp
    55ba:	|  |  |  ,-- bra.s 55d2 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    55bc:	|  |  '--|-> move.l 4(sp),d0
    55c0:	|  |     |   clr.l -(sp)
    55c2:	|  |     |   pea 1 <_start+0x1>
    55c6:	|  |     |   move.l d0,-(sp)
    55c8:	|  |     |   jsr 14dd2 <setVariable>
    55ce:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    55d2:	|  |     '-> movea.l 4(sp),a0
    55d6:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    55da:	|  |         movea.l 1a11c <currentEvents>,a0
    55e0:	|  |         move.l 20(a0),d0
    55e4:	|  |         pea 1 <_start+0x1>
    55e8:	|  |         lea 8(sp),a0
    55ec:	|  |         move.l a0,-(sp)
    55ee:	|  |         clr.l -(sp)
    55f0:	|  |         pea 1 <_start+0x1>
    55f4:	|  |         move.l d0,-(sp)
    55f6:	|  |         jsr 6778 <startNewFunctionNum>
    55fc:	|  |         lea 20(sp),sp
    5600:	|  |         tst.l d0
    5602:	|  +-------- bne.s 560a <handleInput+0x144>
    5604:	|  |         clr.w d0
    5606:	+--|-------- bra.w 5724 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    560a:	|  '-------> move.w 1a75c <input+0x6>,d0
    5610:	|        ,-- beq.s 564e <handleInput+0x188>
    5612:	|        |   movea.l 1a11c <currentEvents>,a0
    5618:	|        |   move.l 4(a0),d0
    561c:	|        +-- beq.s 564e <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    561e:	|        |   move.l 1a774 <noStack>,d1
    5624:	|        |   movea.l 1a11c <currentEvents>,a0
    562a:	|        |   move.l 4(a0),d0
    562e:	|        |   pea 1 <_start+0x1>
    5632:	|        |   move.l d1,-(sp)
    5634:	|        |   clr.l -(sp)
    5636:	|        |   clr.l -(sp)
    5638:	|        |   move.l d0,-(sp)
    563a:	|        |   jsr 6778 <startNewFunctionNum>
    5640:	|        |   lea 20(sp),sp
    5644:	|        |   tst.l d0
    5646:	|        +-- bne.s 564e <handleInput+0x188>
    5648:	|        |   clr.w d0
    564a:	+--------|-- bra.w 5724 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    564e:	|        '-> move.w 1a75e <input+0x8>,d0
    5654:	|        ,-- beq.s 5692 <handleInput+0x1cc>
    5656:	|        |   movea.l 1a11c <currentEvents>,a0
    565c:	|        |   move.l 12(a0),d0
    5660:	|        +-- beq.s 5692 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5662:	|        |   move.l 1a774 <noStack>,d1
    5668:	|        |   movea.l 1a11c <currentEvents>,a0
    566e:	|        |   move.l 12(a0),d0
    5672:	|        |   pea 1 <_start+0x1>
    5676:	|        |   move.l d1,-(sp)
    5678:	|        |   clr.l -(sp)
    567a:	|        |   clr.l -(sp)
    567c:	|        |   move.l d0,-(sp)
    567e:	|        |   jsr 6778 <startNewFunctionNum>
    5684:	|        |   lea 20(sp),sp
    5688:	|        |   tst.l d0
    568a:	|        +-- bne.s 5692 <handleInput+0x1cc>
    568c:	|        |   clr.w d0
    568e:	+--------|-- bra.w 5724 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    5692:	|        '-> move.w 1a756 <input>,d0
    5698:	|        ,-- beq.s 56d0 <handleInput+0x20a>
    569a:	|        |   movea.l 1a11c <currentEvents>,a0
    56a0:	|        |   move.l (a0),d0
    56a2:	|        +-- beq.s 56d0 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    56a4:	|        |   move.l 1a774 <noStack>,d1
    56aa:	|        |   movea.l 1a11c <currentEvents>,a0
    56b0:	|        |   move.l (a0),d0
    56b2:	|        |   pea 1 <_start+0x1>
    56b6:	|        |   move.l d1,-(sp)
    56b8:	|        |   clr.l -(sp)
    56ba:	|        |   clr.l -(sp)
    56bc:	|        |   move.l d0,-(sp)
    56be:	|        |   jsr 6778 <startNewFunctionNum>
    56c4:	|        |   lea 20(sp),sp
    56c8:	|        |   tst.l d0
    56ca:	|        +-- bne.s 56d0 <handleInput+0x20a>
    56cc:	|        |   clr.w d0
    56ce:	+--------|-- bra.s 5724 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    56d0:	|        '-> move.w 1a758 <input+0x2>,d0
    56d6:	|        ,-- beq.s 5712 <handleInput+0x24c>
    56d8:	|        |   movea.l 1a11c <currentEvents>,a0
    56de:	|        |   move.l 8(a0),d0
    56e2:	|        +-- beq.s 5712 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    56e4:	|        |   move.l 1a774 <noStack>,d1
    56ea:	|        |   movea.l 1a11c <currentEvents>,a0
    56f0:	|        |   move.l 8(a0),d0
    56f4:	|        |   pea 1 <_start+0x1>
    56f8:	|        |   move.l d1,-(sp)
    56fa:	|        |   clr.l -(sp)
    56fc:	|        |   clr.l -(sp)
    56fe:	|        |   move.l d0,-(sp)
    5700:	|        |   jsr 6778 <startNewFunctionNum>
    5706:	|        |   lea 20(sp),sp
    570a:	|        |   tst.l d0
    570c:	|        +-- bne.s 5712 <handleInput+0x24c>
    570e:	|        |   clr.w d0
    5710:	+--------|-- bra.s 5724 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    5712:	|        '-> move.l 1a8b8 <overRegion>,d0
    5718:	|            move.l d0,1a76c <lastRegion>
	return runSludge ();
    571e:	|            jsr 6546 <runSludge>
}
    5724:	'----------> movea.l (sp)+,a6
    5726:	             lea 16(sp),sp
    572a:	             rts

0000572c <initSludge>:

BOOL initSludge (char * filename) {
    572c:	             lea -292(sp),sp
    5730:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    5734:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    5738:	             jsr aa26 <makeNullAnim>
    573e:	             move.l d0,1a6aa <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    5744:	             pea 1a74e <gameVersion>
    574a:	             pea 185e0 <PutChar+0xc12>
    5750:	             pea 45 <_start+0x45>
    5754:	             pea 47 <_start+0x47>
    5758:	             move.l 332(sp),-(sp)
    575c:	             jsr 617a <openAndVerify>
    5762:	             lea 20(sp),sp
    5766:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    576a:	         ,-- bne.s 5772 <initSludge+0x46>
    576c:	         |   clr.w d0
    576e:	,--------|-- bra.w 5e9a <initSludge+0x76e>
	if (FGetC (fp)) {
    5772:	|        '-> move.l 288(sp),284(sp)
    5778:	|            move.l 1a7ac <DOSBase>,d0
    577e:	|            movea.l d0,a6
    5780:	|            move.l 284(sp),d1
    5784:	|            jsr -306(a6)
    5788:	|            move.l d0,280(sp)
    578c:	|            move.l 280(sp),d0
    5790:	|  ,-------- beq.w 593a <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    5794:	|  |         move.l 288(sp),-(sp)
    5798:	|  |         jsr 6bc <get2bytes>
    579e:	|  |         addq.l #4,sp
    57a0:	|  |         move.l d0,1a778 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    57a6:	|  |         move.l 1a778 <numBIFNames>,d0
    57ac:	|  |         move.l d0,276(sp)
    57b0:	|  |         clr.l 272(sp)
    57b4:	|  |         move.l 1a7a4 <SysBase>,d0
    57ba:	|  |         movea.l d0,a6
    57bc:	|  |         move.l 276(sp),d0
    57c0:	|  |         move.l 272(sp),d1
    57c4:	|  |         jsr -684(a6)
    57c8:	|  |         move.l d0,268(sp)
    57cc:	|  |         move.l 268(sp),d0
    57d0:	|  |         move.l d0,1a734 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    57d6:	|  |         move.l 1a734 <allBIFNames>,d0
    57dc:	|  |     ,-- bne.s 57e4 <initSludge+0xb8>
    57de:	|  |     |   clr.w d0
    57e0:	+--|-----|-- bra.w 5e9a <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    57e4:	|  |     '-> clr.l 304(sp)
    57e8:	|  |     ,-- bra.s 580e <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    57ea:	|  |  ,--|-> move.l 1a734 <allBIFNames>,d1
    57f0:	|  |  |  |   move.l 304(sp),d0
    57f4:	|  |  |  |   add.l d0,d0
    57f6:	|  |  |  |   add.l d0,d0
    57f8:	|  |  |  |   movea.l d1,a2
    57fa:	|  |  |  |   adda.l d0,a2
    57fc:	|  |  |  |   move.l 288(sp),-(sp)
    5800:	|  |  |  |   jsr b02 <readString>
    5806:	|  |  |  |   addq.l #4,sp
    5808:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    580a:	|  |  |  |   addq.l #1,304(sp)
    580e:	|  |  |  '-> move.l 1a778 <numBIFNames>,d0
    5814:	|  |  |      cmp.l 304(sp),d0
    5818:	|  |  '----- bgt.s 57ea <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    581a:	|  |         move.l 288(sp),-(sp)
    581e:	|  |         jsr 6bc <get2bytes>
    5824:	|  |         addq.l #4,sp
    5826:	|  |         move.l d0,1a784 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    582c:	|  |         move.l 1a784 <numUserFunc>,d0
    5832:	|  |         move.l d0,264(sp)
    5836:	|  |         clr.l 260(sp)
    583a:	|  |         move.l 1a7a4 <SysBase>,d0
    5840:	|  |         movea.l d0,a6
    5842:	|  |         move.l 264(sp),d0
    5846:	|  |         move.l 260(sp),d1
    584a:	|  |         jsr -684(a6)
    584e:	|  |         move.l d0,256(sp)
    5852:	|  |         move.l 256(sp),d0
    5856:	|  |         move.l d0,1a740 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    585c:	|  |         move.l 1a740 <allUserFunc>,d0
    5862:	|  |     ,-- bne.s 586a <initSludge+0x13e>
    5864:	|  |     |   clr.w d0
    5866:	+--|-----|-- bra.w 5e9a <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    586a:	|  |     '-> clr.l 300(sp)
    586e:	|  |     ,-- bra.s 5894 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    5870:	|  |  ,--|-> move.l 1a740 <allUserFunc>,d1
    5876:	|  |  |  |   move.l 300(sp),d0
    587a:	|  |  |  |   add.l d0,d0
    587c:	|  |  |  |   add.l d0,d0
    587e:	|  |  |  |   movea.l d1,a2
    5880:	|  |  |  |   adda.l d0,a2
    5882:	|  |  |  |   move.l 288(sp),-(sp)
    5886:	|  |  |  |   jsr b02 <readString>
    588c:	|  |  |  |   addq.l #4,sp
    588e:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    5890:	|  |  |  |   addq.l #1,300(sp)
    5894:	|  |  |  '-> move.l 1a784 <numUserFunc>,d0
    589a:	|  |  |      cmp.l 300(sp),d0
    589e:	|  |  '----- bgt.s 5870 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    58a0:	|  |         move.l 1a74e <gameVersion>,d0
    58a6:	|  |         cmpi.l #258,d0
    58ac:	|  +-------- ble.w 593a <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    58b0:	|  |         move.l 288(sp),-(sp)
    58b4:	|  |         jsr 6bc <get2bytes>
    58ba:	|  |         addq.l #4,sp
    58bc:	|  |         move.l d0,1a780 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    58c2:	|  |         move.l 1a780 <numResourceNames>,d0
    58c8:	|  |         add.l d0,d0
    58ca:	|  |         add.l d0,d0
    58cc:	|  |         move.l d0,252(sp)
    58d0:	|  |         clr.l 248(sp)
    58d4:	|  |         move.l 1a7a4 <SysBase>,d0
    58da:	|  |         movea.l d0,a6
    58dc:	|  |         move.l 252(sp),d0
    58e0:	|  |         move.l 248(sp),d1
    58e4:	|  |         jsr -684(a6)
    58e8:	|  |         move.l d0,244(sp)
    58ec:	|  |         move.l 244(sp),d0
    58f0:	|  |         move.l d0,1a738 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    58f6:	|  |         move.l 1a738 <allResourceNames>,d0
    58fc:	|  |     ,-- bne.s 5904 <initSludge+0x1d8>
    58fe:	|  |     |   clr.w d0
    5900:	+--|-----|-- bra.w 5e9a <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    5904:	|  |     '-> clr.l 296(sp)
    5908:	|  |     ,-- bra.s 592e <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    590a:	|  |  ,--|-> move.l 1a738 <allResourceNames>,d1
    5910:	|  |  |  |   move.l 296(sp),d0
    5914:	|  |  |  |   add.l d0,d0
    5916:	|  |  |  |   add.l d0,d0
    5918:	|  |  |  |   movea.l d1,a2
    591a:	|  |  |  |   adda.l d0,a2
    591c:	|  |  |  |   move.l 288(sp),-(sp)
    5920:	|  |  |  |   jsr b02 <readString>
    5926:	|  |  |  |   addq.l #4,sp
    5928:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    592a:	|  |  |  |   addq.l #1,296(sp)
    592e:	|  |  |  '-> move.l 1a780 <numResourceNames>,d0
    5934:	|  |  |      cmp.l 296(sp),d0
    5938:	|  |  '----- bgt.s 590a <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    593a:	|  '-------> move.l #129,1a760 <input+0xa>
	input.mouseY = 100;
    5944:	|            moveq #100,d0
    5946:	|            move.l d0,1a764 <input+0xe>
	winWidth = get2bytes (fp);
    594c:	|            move.l 288(sp),-(sp)
    5950:	|            jsr 6bc <get2bytes>
    5956:	|            addq.l #4,sp
    5958:	|            move.l d0,1a6f8 <winWidth>
	winHeight = get2bytes (fp);
    595e:	|            move.l 288(sp),-(sp)
    5962:	|            jsr 6bc <get2bytes>
    5968:	|            addq.l #4,sp
    596a:	|            move.l d0,1a6fc <winHeight>
	specialSettings = FGetC (fp);
    5970:	|            move.l 288(sp),240(sp)
    5976:	|            move.l 1a7ac <DOSBase>,d0
    597c:	|            movea.l d0,a6
    597e:	|            move.l 240(sp),d1
    5982:	|            jsr -306(a6)
    5986:	|            move.l d0,236(sp)
    598a:	|            move.l 236(sp),d0
    598e:	|            move.l d0,1a788 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    5994:	|            move.l 288(sp),232(sp)
    599a:	|            move.l 1a7ac <DOSBase>,d0
    59a0:	|            movea.l d0,a6
    59a2:	|            move.l 232(sp),d1
    59a6:	|            jsr -306(a6)
    59aa:	|            move.l d0,228(sp)
    59ae:	|            move.l 228(sp),d0
    59b2:	|            move.l d0,-(sp)
    59b4:	|            pea 3e8 <encodeFilename+0xea>
    59b8:	|            jsr 17936 <__divsi3>
    59be:	|            addq.l #8,sp
    59c0:	|            move.l d0,1a132 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    59c6:	|            move.l 288(sp),-(sp)
    59ca:	|            jsr b02 <readString>
    59d0:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    59d2:	|            move.l 288(sp),224(sp)
    59d8:	|            move.l #108358,220(sp)
    59e0:	|            moveq #8,d1
    59e2:	|            move.l d1,216(sp)
    59e6:	|            moveq #1,d0
    59e8:	|            move.l d0,212(sp)
    59ec:	|            move.l 1a7ac <DOSBase>,d0
    59f2:	|            movea.l d0,a6
    59f4:	|            move.l 224(sp),d1
    59f8:	|            move.l 220(sp),d2
    59fc:	|            move.l 216(sp),d3
    5a00:	|            move.l 212(sp),d4
    5a04:	|            jsr -324(a6)
    5a08:	|            move.l d0,208(sp)
    5a0c:	|            move.l 208(sp),d0
    5a10:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    5a14:	|            moveq #1,d1
    5a16:	|            cmp.l 204(sp),d1
    5a1a:	|        ,-- beq.s 5a2a <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5a1c:	|        |   pea 18619 <PutChar+0xc4b>
    5a22:	|        |   jsr 16f2c <KPrintF>
    5a28:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5a2a:	|        '-> move.l 1a74e <gameVersion>,d0
    5a30:	|            cmpi.l #258,d0
    5a36:	|        ,-- ble.s 5a46 <initSludge+0x31a>
    5a38:	|        |   move.l 288(sp),-(sp)
    5a3c:	|        |   jsr b02 <readString>
    5a42:	|        |   addq.l #4,sp
    5a44:	|     ,--|-- bra.s 5a5a <initSludge+0x32e>
    5a46:	|     |  '-> pea 18637 <PutChar+0xc69>
    5a4c:	|     |      pea 18637 <PutChar+0xc69>
    5a52:	|     |      jsr 13a0c <joinStrings>
    5a58:	|     |      addq.l #8,sp
    5a5a:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5a5e:	|            move.l 1a74e <gameVersion>,d0
    5a64:	|            cmpi.l #258,d0
    5a6a:	|     ,----- ble.s 5a8c <initSludge+0x360>
    5a6c:	|     |      move.l 288(sp),196(sp)
    5a72:	|     |      move.l 1a7ac <DOSBase>,d0
    5a78:	|     |      movea.l d0,a6
    5a7a:	|     |      move.l 196(sp),d1
    5a7e:	|     |      jsr -306(a6)
    5a82:	|     |      move.l d0,192(sp)
    5a86:	|     |      move.l 192(sp),d0
    5a8a:	|     |  ,-- bra.s 5a8e <initSludge+0x362>
    5a8c:	|     '--|-> moveq #0,d0
    5a8e:	|        '-> move.l d0,1a884 <gameSettings+0x4>
	makeLanguageTable (fp);
    5a94:	|            move.l 288(sp),-(sp)
    5a98:	|            jsr 133c2 <makeLanguageTable>
    5a9e:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    5aa0:	|            move.l 1a74e <gameVersion>,d0
    5aa6:	|            cmpi.l #261,d0
    5aac:	|        ,-- ble.s 5afa <initSludge+0x3ce>
	{
		FGetC(fp);
    5aae:	|        |   move.l 288(sp),188(sp)
    5ab4:	|        |   move.l 1a7ac <DOSBase>,d0
    5aba:	|        |   movea.l d0,a6
    5abc:	|        |   move.l 188(sp),d1
    5ac0:	|        |   jsr -306(a6)
    5ac4:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5ac8:	|        |   move.l 288(sp),180(sp)
    5ace:	|        |   move.l 1a7ac <DOSBase>,d0
    5ad4:	|        |   movea.l d0,a6
    5ad6:	|        |   move.l 180(sp),d1
    5ada:	|        |   jsr -306(a6)
    5ade:	|        |   move.l d0,176(sp)
		getFloat (fp);
    5ae2:	|        |   move.l 288(sp),-(sp)
    5ae6:	|        |   jsr 7d8 <getFloat>
    5aec:	|        |   addq.l #4,sp
		getFloat (fp);
    5aee:	|        |   move.l 288(sp),-(sp)
    5af2:	|        |   jsr 7d8 <getFloat>
    5af8:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5afa:	|        '-> move.l 288(sp),-(sp)
    5afe:	|            jsr b02 <readString>
    5b04:	|            addq.l #4,sp
    5b06:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5b0a:	|            pea 18638 <PutChar+0xc6a>
    5b10:	|            move.l 176(sp),-(sp)
    5b14:	|            jsr 1398c <strcmp>
    5b1a:	|            addq.l #8,sp
    5b1c:	|            tst.l d0
    5b1e:	|        ,-- beq.s 5b26 <initSludge+0x3fa>
		return FALSE;
    5b20:	|        |   clr.w d0
    5b22:	+--------|-- bra.w 5e9a <initSludge+0x76e>
	}
	FreeVec( checker);
    5b26:	|        '-> move.l 172(sp),168(sp)
    5b2c:	|            move.l 1a7a4 <SysBase>,d0
    5b32:	|            movea.l d0,a6
    5b34:	|            movea.l 168(sp),a1
    5b38:	|            jsr -690(a6)
	checker = NULL;
    5b3c:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5b40:	|            move.l 288(sp),164(sp)
    5b46:	|            move.l 1a7ac <DOSBase>,d0
    5b4c:	|            movea.l d0,a6
    5b4e:	|            move.l 164(sp),d1
    5b52:	|            jsr -306(a6)
    5b56:	|            move.l d0,160(sp)
    5b5a:	|            move.l 160(sp),d0
    5b5e:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    5b62:	|            moveq #0,d0
    5b64:	|            move.b 159(sp),d0
    5b68:	|            moveq #1,d1
    5b6a:	|            and.l d1,d0
    5b6c:	|        ,-- beq.s 5bc4 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    5b6e:	|        |   move.l 1a7ac <DOSBase>,d0
    5b74:	|        |   movea.l d0,a6
    5b76:	|        |   jsr -60(a6)
    5b7a:	|        |   move.l d0,38(sp)
    5b7e:	|        |   move.l 38(sp),d0
    5b82:	|        |   move.l d0,34(sp)
    5b86:	|        |   move.l #99904,30(sp)
    5b8e:	|        |   moveq #54,d0
    5b90:	|        |   move.l d0,26(sp)
    5b94:	|        |   move.l 1a7ac <DOSBase>,d0
    5b9a:	|        |   movea.l d0,a6
    5b9c:	|        |   move.l 34(sp),d1
    5ba0:	|        |   move.l 30(sp),d2
    5ba4:	|        |   move.l 26(sp),d3
    5ba8:	|        |   jsr -48(a6)
    5bac:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    5bb0:	|        |   pea 18677 <PutChar+0xca9>
    5bb6:	|        |   jsr 16f2c <KPrintF>
    5bbc:	|        |   addq.l #4,sp
		return FALSE;
    5bbe:	|        |   clr.w d0
    5bc0:	+--------|-- bra.w 5e9a <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    5bc4:	|        '-> move.l 288(sp),-(sp)
    5bc8:	|            jsr 6bc <get2bytes>
    5bce:	|            addq.l #4,sp
    5bd0:	|            move.l d0,1a77c <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    5bd6:	|            move.l 1a77c <numGlobals>,d0
    5bdc:	|            lsl.l #3,d0
    5bde:	|            move.l d0,154(sp)
    5be2:	|            clr.l 150(sp)
    5be6:	|            move.l 1a7a4 <SysBase>,d0
    5bec:	|            movea.l d0,a6
    5bee:	|            move.l 154(sp),d0
    5bf2:	|            move.l 150(sp),d1
    5bf6:	|            jsr -684(a6)
    5bfa:	|            move.l d0,146(sp)
    5bfe:	|            move.l 146(sp),d0
    5c02:	|            move.l d0,1a752 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    5c08:	|            move.l 1a752 <globalVars>,d0
    5c0e:	|        ,-- bne.s 5c2c <initSludge+0x500>
    5c10:	|        |   move.l 1a77c <numGlobals>,d0
    5c16:	|        +-- ble.s 5c2c <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    5c18:	|        |   pea 186af <PutChar+0xce1>
    5c1e:	|        |   jsr 16f2c <KPrintF>
    5c24:	|        |   addq.l #4,sp
		return FALSE;
    5c26:	|        |   clr.w d0
    5c28:	+--------|-- bra.w 5e9a <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    5c2c:	|        '-> clr.l 308(sp)
    5c30:	|        ,-- bra.s 5c48 <initSludge+0x51c>
    5c32:	|     ,--|-> move.l 1a752 <globalVars>,d1
    5c38:	|     |  |   move.l 308(sp),d0
    5c3c:	|     |  |   lsl.l #3,d0
    5c3e:	|     |  |   movea.l d1,a0
    5c40:	|     |  |   adda.l d0,a0
    5c42:	|     |  |   clr.l (a0)
    5c44:	|     |  |   addq.l #1,308(sp)
    5c48:	|     |  '-> move.l 1a77c <numGlobals>,d0
    5c4e:	|     |      cmp.l 308(sp),d0
    5c52:	|     '----- bgt.s 5c32 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    5c54:	|            move.l 1a884 <gameSettings+0x4>,d0
    5c5a:	|            clr.l -(sp)
    5c5c:	|            move.l d0,-(sp)
    5c5e:	|            move.l 296(sp),-(sp)
    5c62:	|            jsr 6c68 <setFileIndices>
    5c68:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    5c6c:	|            pea 1 <_start+0x1>
    5c70:	|            jsr 6922 <getNumberedString>
    5c76:	|            addq.l #4,sp
    5c78:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    5c7c:	|            move.l 142(sp),-(sp)
    5c80:	|            jsr 2fe <encodeFilename>
    5c86:	|            addq.l #4,sp
    5c88:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    5c8c:	|            move.l 142(sp),134(sp)
    5c92:	|            move.l 1a7a4 <SysBase>,d0
    5c98:	|            movea.l d0,a6
    5c9a:	|            movea.l 134(sp),a1
    5c9e:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    5ca2:	|            move.l 138(sp),130(sp)
    5ca8:	|            move.l 1a7ac <DOSBase>,d0
    5cae:	|            movea.l d0,a6
    5cb0:	|            move.l 130(sp),d1
    5cb4:	|            jsr -120(a6)
    5cb8:	|            move.l d0,126(sp)
    5cbc:	|            move.l 126(sp),d0
    5cc0:	|            move.l d0,292(sp)
	if(lock == 0) {
    5cc4:	|        ,-- bne.s 5cf2 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    5cc6:	|        |   move.l 138(sp),122(sp)
    5ccc:	|        |   moveq #-2,d1
    5cce:	|        |   move.l d1,118(sp)
    5cd2:	|        |   move.l 1a7ac <DOSBase>,d0
    5cd8:	|        |   movea.l d0,a6
    5cda:	|        |   move.l 122(sp),d1
    5cde:	|        |   move.l 118(sp),d2
    5ce2:	|        |   jsr -84(a6)
    5ce6:	|        |   move.l d0,114(sp)
    5cea:	|        |   move.l 114(sp),d0
    5cee:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    5cf2:	|        '-> move.l 292(sp),110(sp)
    5cf8:	|            move.l 1a7ac <DOSBase>,d0
    5cfe:	|            movea.l d0,a6
    5d00:	|            move.l 110(sp),d1
    5d04:	|            jsr -126(a6)
    5d08:	|            move.l d0,106(sp)
    5d0c:	|            move.l 106(sp),d0
    5d10:	|        ,-- bne.s 5d6c <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    5d12:	|        |   move.l 138(sp),-(sp)
    5d16:	|        |   pea 186e2 <PutChar+0xd14>
    5d1c:	|        |   jsr 16f2c <KPrintF>
    5d22:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    5d24:	|        |   move.l 1a7ac <DOSBase>,d0
    5d2a:	|        |   movea.l d0,a6
    5d2c:	|        |   jsr -60(a6)
    5d30:	|        |   move.l d0,58(sp)
    5d34:	|        |   move.l 58(sp),d0
    5d38:	|        |   move.l d0,54(sp)
    5d3c:	|        |   move.l #100111,50(sp)
    5d44:	|        |   moveq #40,d0
    5d46:	|        |   move.l d0,46(sp)
    5d4a:	|        |   move.l 1a7ac <DOSBase>,d0
    5d50:	|        |   movea.l d0,a6
    5d52:	|        |   move.l 54(sp),d1
    5d56:	|        |   move.l 50(sp),d2
    5d5a:	|        |   move.l 46(sp),d3
    5d5e:	|        |   jsr -48(a6)
    5d62:	|        |   move.l d0,42(sp)
		return FALSE;
    5d66:	|        |   clr.w d0
    5d68:	+--------|-- bra.w 5e9a <initSludge+0x76e>
	}

	FreeVec(gameName);
    5d6c:	|        '-> move.l 138(sp),102(sp)
    5d72:	|            move.l 1a7a4 <SysBase>,d0
    5d78:	|            movea.l d0,a6
    5d7a:	|            movea.l 102(sp),a1
    5d7e:	|            jsr -690(a6)

	readIniFile (filename);
    5d82:	|            move.l 316(sp),-(sp)
    5d86:	|            jsr 134f6 <readIniFile>
    5d8c:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    5d8e:	|            jsr 132c8 <getLanguageForFileB>
    5d94:	|            move.l d0,1a120 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    5d9a:	|            move.l 1a120 <languageNum>,d0
    5da0:	|        ,-- bpl.s 5db0 <initSludge+0x684>
    5da2:	|        |   pea 18738 <PutChar+0xd6a>
    5da8:	|        |   jsr 16f2c <KPrintF>
    5dae:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    5db0:	|        '-> move.l 1a120 <languageNum>,d0
    5db6:	|            move.l d0,d1
    5db8:	|            move.l 1a884 <gameSettings+0x4>,d0
    5dbe:	|            move.l d1,-(sp)
    5dc0:	|            move.l d0,-(sp)
    5dc2:	|            clr.l -(sp)
    5dc4:	|            jsr 6c68 <setFileIndices>
    5dca:	|            lea 12(sp),sp

	if (dataFol[0]) {
    5dce:	|            movea.l 200(sp),a0
    5dd2:	|            move.b (a0),d0
    5dd4:	|     ,----- beq.w 5e7e <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    5dd8:	|     |      move.l 200(sp),-(sp)
    5ddc:	|     |      jsr 2fe <encodeFilename>
    5de2:	|     |      addq.l #4,sp
    5de4:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    5de8:	|     |      move.l 98(sp),94(sp)
    5dee:	|     |      move.l 1a7ac <DOSBase>,d0
    5df4:	|     |      movea.l d0,a6
    5df6:	|     |      move.l 94(sp),d1
    5dfa:	|     |      jsr -120(a6)
    5dfe:	|     |      move.l d0,90(sp)
    5e02:	|     |      move.l 90(sp),d0
    5e06:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    5e0a:	|     |  ,-- bne.s 5e38 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    5e0c:	|     |  |   move.l 98(sp),86(sp)
    5e12:	|     |  |   moveq #-2,d1
    5e14:	|     |  |   move.l d1,82(sp)
    5e18:	|     |  |   move.l 1a7ac <DOSBase>,d0
    5e1e:	|     |  |   movea.l d0,a6
    5e20:	|     |  |   move.l 86(sp),d1
    5e24:	|     |  |   move.l 82(sp),d2
    5e28:	|     |  |   jsr -84(a6)
    5e2c:	|     |  |   move.l d0,78(sp)
    5e30:	|     |  |   move.l 78(sp),d0
    5e34:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    5e38:	|     |  '-> move.l 292(sp),74(sp)
    5e3e:	|     |      move.l 1a7ac <DOSBase>,d0
    5e44:	|     |      movea.l d0,a6
    5e46:	|     |      move.l 74(sp),d1
    5e4a:	|     |      jsr -126(a6)
    5e4e:	|     |      move.l d0,70(sp)
    5e52:	|     |      move.l 70(sp),d0
    5e56:	|     |  ,-- bne.s 5e68 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    5e58:	|     |  |   move.l 1a7ac <DOSBase>,d0
    5e5e:	|     |  |   movea.l d0,a6
    5e60:	|     |  |   jsr -60(a6)
    5e64:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    5e68:	|     |  '-> move.l 98(sp),62(sp)
    5e6e:	|     |      move.l 1a7a4 <SysBase>,d0
    5e74:	|     |      movea.l d0,a6
    5e76:	|     |      movea.l 62(sp),a1
    5e7a:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    5e7e:	|     '----> movea.l 1a6fc <winHeight>,a0
    5e84:	|            lea -15(a0),a0
    5e88:	|            move.l a0,d0
    5e8a:	|            move.l d0,-(sp)
    5e8c:	|            pea a <_start+0xa>
    5e90:	|            jsr 76ae <positionStatus>
    5e96:	|            addq.l #8,sp

	return TRUE;
    5e98:	|            moveq #1,d0
}
    5e9a:	'----------> movem.l (sp)+,d2-d4/a2/a6
    5e9e:	             lea 292(sp),sp
    5ea2:	             rts

00005ea4 <killSpeechTimers>:

void killSpeechTimers () {
    5ea4:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5ea6:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    5eac:	   ,----- bra.s 5ed8 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    5eae:	,--|----> movea.l (sp),a0
    5eb0:	|  |      move.b 56(a0),d0
    5eb4:	|  |  ,-- bne.s 5ed2 <killSpeechTimers+0x2e>
    5eb6:	|  |  |   movea.l (sp),a0
    5eb8:	|  |  |   move.w 50(a0),d0
    5ebc:	|  |  +-- beq.s 5ed2 <killSpeechTimers+0x2e>
    5ebe:	|  |  |   movea.l (sp),a0
    5ec0:	|  |  |   move.l 12(a0),d0
    5ec4:	|  |  +-- beq.s 5ed2 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    5ec6:	|  |  |   movea.l (sp),a0
    5ec8:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    5ecc:	|  |  |   movea.l (sp),a0
    5ece:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    5ed2:	|  |  '-> movea.l (sp),a0
    5ed4:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5ed8:	|  '----> tst.l (sp)
    5eda:	'-------- bne.s 5eae <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    5edc:	          jsr 7bec <killAllSpeech>
}
    5ee2:	          nop
    5ee4:	          addq.l #4,sp
    5ee6:	          rts

00005ee8 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    5ee8:	             lea -52(sp),sp
    5eec:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    5eee:	             movea.l 60(sp),a0
    5ef2:	             move.l (a0),d0
    5ef4:	             move.l d0,-(sp)
    5ef6:	             jsr 6ba8 <openSubSlice>
    5efc:	             addq.l #4,sp
    5efe:	             tst.w d0
    5f00:	         ,-- bne.s 5f08 <loadFunctionCode+0x20>
    5f02:	         |   clr.w d0
    5f04:	,--------|-- bra.w 60d2 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    5f08:	|        '-> move.l 1a78c <bigDataFile>,44(sp)
    5f10:	|            move.l 1a7ac <DOSBase>,d0
    5f16:	|            movea.l d0,a6
    5f18:	|            move.l 44(sp),d1
    5f1c:	|            jsr -306(a6)
    5f20:	|            move.l d0,40(sp)
    5f24:	|            move.l 40(sp),d0
    5f28:	|            move.l d0,d0
    5f2a:	|            movea.l 60(sp),a0
    5f2e:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    5f32:	|            move.l 1a78c <bigDataFile>,d0
    5f38:	|            move.l d0,-(sp)
    5f3a:	|            jsr 6bc <get2bytes>
    5f40:	|            addq.l #4,sp
    5f42:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    5f46:	|            move.l 1a78c <bigDataFile>,d0
    5f4c:	|            move.l d0,-(sp)
    5f4e:	|            jsr 6bc <get2bytes>
    5f54:	|            addq.l #4,sp
    5f56:	|            movea.l 60(sp),a0
    5f5a:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    5f5e:	|            move.l 1a78c <bigDataFile>,d0
    5f64:	|            move.l d0,-(sp)
    5f66:	|            jsr 6bc <get2bytes>
    5f6c:	|            addq.l #4,sp
    5f6e:	|            movea.l 60(sp),a0
    5f72:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    5f76:	|            move.l 36(sp),d0
    5f7a:	|            lsl.l #3,d0
    5f7c:	|            move.l d0,32(sp)
    5f80:	|            clr.l 28(sp)
    5f84:	|            move.l 1a7a4 <SysBase>,d0
    5f8a:	|            movea.l d0,a6
    5f8c:	|            move.l 32(sp),d0
    5f90:	|            move.l 28(sp),d1
    5f94:	|            jsr -684(a6)
    5f98:	|            move.l d0,24(sp)
    5f9c:	|            move.l 24(sp),d0
    5fa0:	|            movea.l 60(sp),a0
    5fa4:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    5fa8:	|            movea.l 60(sp),a0
    5fac:	|            move.l 4(a0),d0
    5fb0:	|        ,-- bne.s 5fc6 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    5fb2:	|        |   pea 18763 <PutChar+0xd95>
    5fb8:	|        |   jsr 16f2c <KPrintF>
    5fbe:	|        |   addq.l #4,sp
		return FALSE;
    5fc0:	|        |   clr.w d0
    5fc2:	+--------|-- bra.w 60d2 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    5fc6:	|        '-> clr.l 52(sp)
    5fca:	|        ,-- bra.s 602c <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    5fcc:	|     ,--|-> move.l 1a78c <bigDataFile>,8(sp)
    5fd4:	|     |  |   move.l 1a7ac <DOSBase>,d0
    5fda:	|     |  |   movea.l d0,a6
    5fdc:	|     |  |   move.l 8(sp),d1
    5fe0:	|     |  |   jsr -306(a6)
    5fe4:	|     |  |   move.l d0,4(sp)
    5fe8:	|     |  |   move.l 4(sp),d1
    5fec:	|     |  |   movea.l 60(sp),a0
    5ff0:	|     |  |   movea.l 4(a0),a0
    5ff4:	|     |  |   move.l 52(sp),d0
    5ff8:	|     |  |   lsl.l #3,d0
    5ffa:	|     |  |   adda.l d0,a0
    5ffc:	|     |  |   move.l d1,d0
    5ffe:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6000:	|     |  |   move.l 1a78c <bigDataFile>,d0
    6006:	|     |  |   move.l d0,-(sp)
    6008:	|     |  |   jsr 6bc <get2bytes>
    600e:	|     |  |   addq.l #4,sp
    6010:	|     |  |   move.l d0,d1
    6012:	|     |  |   movea.l 60(sp),a0
    6016:	|     |  |   movea.l 4(a0),a0
    601a:	|     |  |   move.l 52(sp),d0
    601e:	|     |  |   lsl.l #3,d0
    6020:	|     |  |   adda.l d0,a0
    6022:	|     |  |   move.l d1,d0
    6024:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6028:	|     |  |   addq.l #1,52(sp)
    602c:	|     |  '-> move.l 52(sp),d0
    6030:	|     |      cmp.l 36(sp),d0
    6034:	|     '----- bcs.s 5fcc <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6036:	|            jsr 6918 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    603c:	|            movea.l 60(sp),a0
    6040:	|            move.l 8(a0),d0
    6044:	|  ,-------- ble.w 60c8 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6048:	|  |         movea.l 60(sp),a0
    604c:	|  |         move.l 8(a0),d0
    6050:	|  |         lsl.l #3,d0
    6052:	|  |         move.l d0,20(sp)
    6056:	|  |         clr.l 16(sp)
    605a:	|  |         move.l 1a7a4 <SysBase>,d0
    6060:	|  |         movea.l d0,a6
    6062:	|  |         move.l 20(sp),d0
    6066:	|  |         move.l 16(sp),d1
    606a:	|  |         jsr -684(a6)
    606e:	|  |         move.l d0,12(sp)
    6072:	|  |         move.l 12(sp),d0
    6076:	|  |         movea.l 60(sp),a0
    607a:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    607e:	|  |         movea.l 60(sp),a0
    6082:	|  |         move.l 20(a0),d0
    6086:	|  |     ,-- bne.s 609a <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6088:	|  |     |   pea 18763 <PutChar+0xd95>
    608e:	|  |     |   jsr 16f2c <KPrintF>
    6094:	|  |     |   addq.l #4,sp
			return FALSE;
    6096:	|  |     |   clr.w d0
    6098:	+--|-----|-- bra.s 60d2 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    609a:	|  |     '-> clr.l 48(sp)
    609e:	|  |     ,-- bra.s 60b8 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    60a0:	|  |  ,--|-> movea.l 60(sp),a0
    60a4:	|  |  |  |   move.l 20(a0),d1
    60a8:	|  |  |  |   move.l 48(sp),d0
    60ac:	|  |  |  |   lsl.l #3,d0
    60ae:	|  |  |  |   movea.l d1,a0
    60b0:	|  |  |  |   adda.l d0,a0
    60b2:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    60b4:	|  |  |  |   addq.l #1,48(sp)
    60b8:	|  |  |  '-> movea.l 60(sp),a0
    60bc:	|  |  |      move.l 8(a0),d0
    60c0:	|  |  |      cmp.l 48(sp),d0
    60c4:	|  |  '----- bgt.s 60a0 <loadFunctionCode+0x1b8>
    60c6:	|  |     ,-- bra.s 60d0 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    60c8:	|  '-----|-> movea.l 60(sp),a0
    60cc:	|        |   clr.l 8(a0)
	}
	return TRUE;
    60d0:	|        '-> moveq #1,d0
}
    60d2:	'----------> movea.l (sp)+,a6
    60d4:	             lea 52(sp),sp
    60d8:	             rts

000060da <loadHandlers>:

void loadHandlers (BPTR fp) {
    60da:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    60dc:	movea.l 1a11c <currentEvents>,a2
    60e2:	move.l 8(sp),-(sp)
    60e6:	jsr 6bc <get2bytes>
    60ec:	addq.l #4,sp
    60ee:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    60f0:	movea.l 1a11c <currentEvents>,a2
    60f6:	move.l 8(sp),-(sp)
    60fa:	jsr 6bc <get2bytes>
    6100:	addq.l #4,sp
    6102:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6106:	movea.l 1a11c <currentEvents>,a2
    610c:	move.l 8(sp),-(sp)
    6110:	jsr 6bc <get2bytes>
    6116:	addq.l #4,sp
    6118:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    611c:	movea.l 1a11c <currentEvents>,a2
    6122:	move.l 8(sp),-(sp)
    6126:	jsr 6bc <get2bytes>
    612c:	addq.l #4,sp
    612e:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    6132:	movea.l 1a11c <currentEvents>,a2
    6138:	move.l 8(sp),-(sp)
    613c:	jsr 6bc <get2bytes>
    6142:	addq.l #4,sp
    6144:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    6148:	movea.l 1a11c <currentEvents>,a2
    614e:	move.l 8(sp),-(sp)
    6152:	jsr 6bc <get2bytes>
    6158:	addq.l #4,sp
    615a:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    615e:	movea.l 1a11c <currentEvents>,a2
    6164:	move.l 8(sp),-(sp)
    6168:	jsr 6bc <get2bytes>
    616e:	addq.l #4,sp
    6170:	move.l d0,24(a2)
}
    6174:	nop
    6176:	movea.l (sp)+,a2
    6178:	rts

0000617a <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    617a:	       lea -312(sp),sp
    617e:	       movem.l d2-d3/a6,-(sp)
    6182:	       move.l 332(sp),d1
    6186:	       move.l 336(sp),d0
    618a:	       move.b d1,d1
    618c:	       move.b d1,16(sp)
    6190:	       move.b d0,d0
    6192:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6196:	       move.l 328(sp),318(sp)
    619c:	       move.l #1005,314(sp)
    61a4:	       move.l 1a7ac <DOSBase>,d0
    61aa:	       movea.l d0,a6
    61ac:	       move.l 318(sp),d1
    61b0:	       move.l 314(sp),d2
    61b4:	       jsr -30(a6)
    61b8:	       move.l d0,310(sp)
    61bc:	       move.l 310(sp),d0
    61c0:	       move.l d0,306(sp)

	if (! fp) {
    61c4:	   ,-- bne.s 6220 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    61c6:	   |   move.l 1a7ac <DOSBase>,d0
    61cc:	   |   movea.l d0,a6
    61ce:	   |   jsr -60(a6)
    61d2:	   |   move.l d0,154(sp)
    61d6:	   |   move.l 154(sp),d0
    61da:	   |   move.l d0,150(sp)
    61de:	   |   move.l #100236,146(sp)
    61e6:	   |   moveq #31,d0
    61e8:	   |   move.l d0,142(sp)
    61ec:	   |   move.l 1a7ac <DOSBase>,d0
    61f2:	   |   movea.l d0,a6
    61f4:	   |   move.l 150(sp),d1
    61f8:	   |   move.l 146(sp),d2
    61fc:	   |   move.l 142(sp),d3
    6200:	   |   jsr -48(a6)
    6204:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6208:	   |   move.l 328(sp),-(sp)
    620c:	   |   pea 187ac <PutChar+0xdde>
    6212:	   |   jsr 16f2c <KPrintF>
    6218:	   |   addq.l #8,sp
		return NULL;
    621a:	   |   moveq #0,d0
    621c:	,--|-- bra.w 64e0 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    6220:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    6224:	|      move.l 306(sp),302(sp)
    622a:	|      move.l 1a7ac <DOSBase>,d0
    6230:	|      movea.l d0,a6
    6232:	|      move.l 302(sp),d1
    6236:	|      jsr -306(a6)
    623a:	|      move.l d0,298(sp)
    623e:	|      move.l 298(sp),d0
    6242:	|      moveq #83,d1
    6244:	|      cmp.l d0,d1
    6246:	|  ,-- beq.s 624e <openAndVerify+0xd4>
    6248:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    624e:	|  '-> move.l 306(sp),294(sp)
    6254:	|      move.l 1a7ac <DOSBase>,d0
    625a:	|      movea.l d0,a6
    625c:	|      move.l 294(sp),d1
    6260:	|      jsr -306(a6)
    6264:	|      move.l d0,290(sp)
    6268:	|      move.l 290(sp),d0
    626c:	|      moveq #76,d1
    626e:	|      cmp.l d0,d1
    6270:	|  ,-- beq.s 6278 <openAndVerify+0xfe>
    6272:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    6278:	|  '-> move.l 306(sp),286(sp)
    627e:	|      move.l 1a7ac <DOSBase>,d0
    6284:	|      movea.l d0,a6
    6286:	|      move.l 286(sp),d1
    628a:	|      jsr -306(a6)
    628e:	|      move.l d0,282(sp)
    6292:	|      move.l 282(sp),d0
    6296:	|      moveq #85,d1
    6298:	|      cmp.l d0,d1
    629a:	|  ,-- beq.s 62a2 <openAndVerify+0x128>
    629c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    62a2:	|  '-> move.l 306(sp),278(sp)
    62a8:	|      move.l 1a7ac <DOSBase>,d0
    62ae:	|      movea.l d0,a6
    62b0:	|      move.l 278(sp),d1
    62b4:	|      jsr -306(a6)
    62b8:	|      move.l d0,274(sp)
    62bc:	|      move.l 274(sp),d0
    62c0:	|      moveq #68,d1
    62c2:	|      cmp.l d0,d1
    62c4:	|  ,-- beq.s 62cc <openAndVerify+0x152>
    62c6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    62cc:	|  '-> move.l 306(sp),270(sp)
    62d2:	|      move.l 1a7ac <DOSBase>,d0
    62d8:	|      movea.l d0,a6
    62da:	|      move.l 270(sp),d1
    62de:	|      jsr -306(a6)
    62e2:	|      move.l d0,266(sp)
    62e6:	|      move.l 266(sp),d1
    62ea:	|      move.b 16(sp),d0
    62ee:	|      ext.w d0
    62f0:	|      movea.w d0,a0
    62f2:	|      cmpa.l d1,a0
    62f4:	|  ,-- beq.s 62fc <openAndVerify+0x182>
    62f6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    62fc:	|  '-> move.l 306(sp),262(sp)
    6302:	|      move.l 1a7ac <DOSBase>,d0
    6308:	|      movea.l d0,a6
    630a:	|      move.l 262(sp),d1
    630e:	|      jsr -306(a6)
    6312:	|      move.l d0,258(sp)
    6316:	|      move.l 258(sp),d1
    631a:	|      move.b 14(sp),d0
    631e:	|      ext.w d0
    6320:	|      movea.w d0,a0
    6322:	|      cmpa.l d1,a0
    6324:	|  ,-- beq.s 632c <openAndVerify+0x1b2>
    6326:	|  |   move.w #1,322(sp)
	if (headerBad) {
    632c:	|  '-> tst.w 322(sp)
    6330:	|  ,-- beq.s 6388 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    6332:	|  |   move.l 1a7ac <DOSBase>,d0
    6338:	|  |   movea.l d0,a6
    633a:	|  |   jsr -60(a6)
    633e:	|  |   move.l d0,174(sp)
    6342:	|  |   move.l 174(sp),d0
    6346:	|  |   move.l d0,170(sp)
    634a:	|  |   move.l #100299,166(sp)
    6352:	|  |   moveq #31,d0
    6354:	|  |   move.l d0,162(sp)
    6358:	|  |   move.l 1a7ac <DOSBase>,d0
    635e:	|  |   movea.l d0,a6
    6360:	|  |   move.l 170(sp),d1
    6364:	|  |   move.l 166(sp),d2
    6368:	|  |   move.l 162(sp),d3
    636c:	|  |   jsr -48(a6)
    6370:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    6374:	|  |   pea 187cb <PutChar+0xdfd>
    637a:	|  |   jsr 16f2c <KPrintF>
    6380:	|  |   addq.l #4,sp
		return NULL;
    6382:	|  |   moveq #0,d0
    6384:	+--|-- bra.w 64e0 <openAndVerify+0x366>
	}
	FGetC (fp);
    6388:	|  '-> move.l 306(sp),254(sp)
    638e:	|      move.l 1a7ac <DOSBase>,d0
    6394:	|      movea.l d0,a6
    6396:	|      move.l 254(sp),d1
    639a:	|      jsr -306(a6)
    639e:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    63a2:	|      nop
    63a4:	|  ,-> move.l 306(sp),246(sp)
    63aa:	|  |   move.l 1a7ac <DOSBase>,d0
    63b0:	|  |   movea.l d0,a6
    63b2:	|  |   move.l 246(sp),d1
    63b6:	|  |   jsr -306(a6)
    63ba:	|  |   move.l d0,242(sp)
    63be:	|  |   move.l 242(sp),d0
    63c2:	|  '-- bne.s 63a4 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    63c4:	|      move.l 306(sp),238(sp)
    63ca:	|      move.l 1a7ac <DOSBase>,d0
    63d0:	|      movea.l d0,a6
    63d2:	|      move.l 238(sp),d1
    63d6:	|      jsr -306(a6)
    63da:	|      move.l d0,234(sp)
    63de:	|      move.l 234(sp),d0
    63e2:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    63e6:	|      move.l 306(sp),226(sp)
    63ec:	|      move.l 1a7ac <DOSBase>,d0
    63f2:	|      movea.l d0,a6
    63f4:	|      move.l 226(sp),d1
    63f8:	|      jsr -306(a6)
    63fc:	|      move.l d0,222(sp)
    6400:	|      move.l 222(sp),d0
    6404:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    6408:	|      move.l 230(sp),d0
    640c:	|      lsl.l #8,d0
    640e:	|      add.l 218(sp),d0
    6412:	|      movea.l 344(sp),a0
    6416:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    6418:	|      movea.l 344(sp),a0
    641c:	|      move.l (a0),d0
    641e:	|      cmpi.l #514,d0
    6424:	|  ,-- ble.s 647a <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    6426:	|  |   move.l 1a7ac <DOSBase>,d0
    642c:	|  |   movea.l d0,a6
    642e:	|  |   jsr -60(a6)
    6432:	|  |   move.l d0,194(sp)
    6436:	|  |   move.l 194(sp),d0
    643a:	|  |   move.l d0,190(sp)
    643e:	|  |   move.l #100326,186(sp)
    6446:	|  |   moveq #100,d1
    6448:	|  |   move.l d1,182(sp)
    644c:	|  |   move.l 1a7ac <DOSBase>,d0
    6452:	|  |   movea.l d0,a6
    6454:	|  |   move.l 190(sp),d1
    6458:	|  |   move.l 186(sp),d2
    645c:	|  |   move.l 182(sp),d3
    6460:	|  |   jsr -48(a6)
    6464:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    6468:	|  |   pea 187e6 <PutChar+0xe18>
    646e:	|  |   jsr 16f2c <KPrintF>
    6474:	|  |   addq.l #4,sp
		return NULL;
    6476:	|  |   moveq #0,d0
    6478:	+--|-- bra.s 64e0 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    647a:	|  '-> movea.l 344(sp),a0
    647e:	|      move.l (a0),d0
    6480:	|      cmpi.l #257,d0
    6486:	|  ,-- bgt.s 64dc <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    6488:	|  |   move.l 1a7ac <DOSBase>,d0
    648e:	|  |   movea.l d0,a6
    6490:	|  |   jsr -60(a6)
    6494:	|  |   move.l d0,214(sp)
    6498:	|  |   move.l 214(sp),d0
    649c:	|  |   move.l d0,210(sp)
    64a0:	|  |   move.l #100395,206(sp)
    64a8:	|  |   moveq #100,d0
    64aa:	|  |   move.l d0,202(sp)
    64ae:	|  |   move.l 1a7ac <DOSBase>,d0
    64b4:	|  |   movea.l d0,a6
    64b6:	|  |   move.l 210(sp),d1
    64ba:	|  |   move.l 206(sp),d2
    64be:	|  |   move.l 202(sp),d3
    64c2:	|  |   jsr -48(a6)
    64c6:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    64ca:	|  |   pea 1882b <PutChar+0xe5d>
    64d0:	|  |   jsr 16f2c <KPrintF>
    64d6:	|  |   addq.l #4,sp
		return NULL;
    64d8:	|  |   moveq #0,d0
    64da:	+--|-- bra.s 64e0 <openAndVerify+0x366>
	}
	return fp;
    64dc:	|  '-> move.l 306(sp),d0
}
    64e0:	'----> movem.l (sp)+,d2-d3/a6
    64e4:	       lea 312(sp),sp
    64e8:	       rts

000064ea <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    64ea:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    64ec:	          move.l #108348,(sp)
	while (* huntAndDestroy) {
    64f2:	   ,----- bra.s 651e <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    64f4:	,--|----> movea.l (sp),a0
    64f6:	|  |      move.l (a0),d0
    64f8:	|  |      cmp.l 8(sp),d0
    64fc:	|  |  ,-- bne.s 6514 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    64fe:	|  |  |   movea.l (sp),a0
    6500:	|  |  |   movea.l (a0),a0
    6502:	|  |  |   move.l 44(a0),d0
    6506:	|  |  |   movea.l (sp),a0
    6508:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    650a:	|  |  |   movea.l 8(sp),a0
    650e:	|  |  |   clr.l 44(a0)
    6512:	|  +--|-- bra.s 651e <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    6514:	|  |  '-> movea.l (sp),a0
    6516:	|  |      move.l (a0),d0
    6518:	|  |      moveq #44,d1
    651a:	|  |      add.l d0,d1
    651c:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    651e:	|  '----> movea.l (sp),a0
    6520:	|         move.l (a0),d0
    6522:	'-------- bne.s 64f4 <pauseFunction+0xa>
		}
	}
}
    6524:	          nop
    6526:	          nop
    6528:	          addq.l #4,sp
    652a:	          rts

0000652c <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    652c:	move.l 1a73c <allRunningFunctions>,d0
    6532:	movea.l 4(sp),a0
    6536:	move.l d0,44(a0)
	allRunningFunctions = fun;
    653a:	move.l 4(sp),1a73c <allRunningFunctions>
}
    6542:	nop
    6544:	rts

00006546 <runSludge>:

BOOL runSludge () {
    6546:	                   lea -12(sp),sp
    654a:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    654c:	                   move.l 1a73c <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    6554:	      ,----------- bra.s 65d0 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    6556:	   ,--|----------> movea.l 12(sp),a0
    655a:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    6560:	   |  |            movea.l 12(sp),a0
    6564:	   |  |            move.b 56(a0),d0
    6568:	   |  |  ,-------- bne.s 65ca <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    656a:	   |  |  |         movea.l 12(sp),a0
    656e:	   |  |  |         move.l 12(a0),d0
    6572:	   |  |  |  ,----- beq.s 659c <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    6574:	   |  |  |  |      movea.l 12(sp),a0
    6578:	   |  |  |  |      move.l 12(a0),d0
    657c:	   |  |  |  |  ,-- bpl.s 6588 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    657e:	   |  |  |  |  |   movea.l 12(sp),a0
    6582:	   |  |  |  |  |   clr.l 12(a0)
    6586:	   |  |  +--|--|-- bra.s 65ca <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    6588:	   |  |  |  |  '-> movea.l 12(sp),a0
    658c:	   |  |  |  |      move.l 12(a0),d0
    6590:	   |  |  |  |      subq.l #1,d0
    6592:	   |  |  |  |      movea.l 12(sp),a0
    6596:	   |  |  |  |      move.l d0,12(a0)
    659a:	   |  |  +--|----- bra.s 65ca <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    659c:	   |  |  |  '----> movea.l 12(sp),a0
    65a0:	   |  |  |         move.w 50(a0),d0
    65a4:	   |  |  |     ,-- beq.s 65b4 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    65a6:	   |  |  |     |   movea.l 12(sp),a0
    65aa:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    65ae:	   |  |  |     |   jsr 7bec <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    65b4:	   |  |  |     '-> move.l 12(sp),-(sp)
    65b8:	   |  |  |         jsr 4514 <continueFunction>
    65be:	   |  |  |         addq.l #4,sp
    65c0:	   |  |  |         tst.w d0
    65c2:	   |  |  +-------- bne.s 65ca <runSludge+0x84>
					return FALSE;
    65c4:	   |  |  |         clr.w d0
    65c6:	,--|--|--|-------- bra.w 6656 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    65ca:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    65d0:	|  |  '----------> tst.l 12(sp)
    65d4:	|  '-------------- bne.s 6556 <runSludge+0x10>
	}

	if (loadNow) {
    65d6:	|                  move.l 1a770 <loadNow>,d0
    65dc:	|        ,-------- beq.s 6654 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    65de:	|        |         movea.l 1a770 <loadNow>,a0
    65e4:	|        |         move.b (a0),d0
    65e6:	|        |         cmpi.b #58,d0
    65ea:	|        |  ,----- bne.s 661e <runSludge+0xd8>
			saveGame (loadNow + 1);
    65ec:	|        |  |      move.l 1a770 <loadNow>,d0
    65f2:	|        |  |      addq.l #1,d0
    65f4:	|        |  |      move.l d0,-(sp)
    65f6:	|        |  |      jsr c47c <saveGame>
    65fc:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    65fe:	|        |  |      movea.l 1a86e <saverFunc>,a0
    6604:	|        |  |      lea 28(a0),a0
    6608:	|        |  |      pea 1 <_start+0x1>
    660c:	|        |  |      pea 1 <_start+0x1>
    6610:	|        |  |      move.l a0,-(sp)
    6612:	|        |  |      jsr 14dd2 <setVariable>
    6618:	|        |  |      lea 12(sp),sp
    661c:	|        |  |  ,-- bra.s 6636 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    661e:	|        |  '--|-> move.l 1a770 <loadNow>,d0
    6624:	|        |     |   move.l d0,-(sp)
    6626:	|        |     |   jsr bfc4 <loadGame>
    662c:	|        |     |   addq.l #4,sp
    662e:	|        |     |   tst.w d0
    6630:	|        |     +-- bne.s 6636 <runSludge+0xf0>
    6632:	|        |     |   clr.w d0
    6634:	+--------|-----|-- bra.s 6656 <runSludge+0x110>
		}
		FreeVec(loadNow);
    6636:	|        |     '-> move.l 1a770 <loadNow>,8(sp)
    663e:	|        |         move.l 1a7a4 <SysBase>,d0
    6644:	|        |         movea.l d0,a6
    6646:	|        |         movea.l 8(sp),a1
    664a:	|        |         jsr -690(a6)
		loadNow = NULL;
    664e:	|        |         clr.l 1a770 <loadNow>
	}

	return TRUE;
    6654:	|        '-------> moveq #1,d0
}
    6656:	'----------------> movea.l (sp)+,a6
    6658:	                   lea 12(sp),sp
    665c:	                   rts

0000665e <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    665e:	movea.l 1a11c <currentEvents>,a0
    6664:	move.l (a0),d0
    6666:	move.l 4(sp),-(sp)
    666a:	move.l d0,-(sp)
    666c:	jsr 8d0 <put2bytes>
    6672:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    6674:	movea.l 1a11c <currentEvents>,a0
    667a:	move.l 4(a0),d0
    667e:	move.l 4(sp),-(sp)
    6682:	move.l d0,-(sp)
    6684:	jsr 8d0 <put2bytes>
    668a:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    668c:	movea.l 1a11c <currentEvents>,a0
    6692:	move.l 8(a0),d0
    6696:	move.l 4(sp),-(sp)
    669a:	move.l d0,-(sp)
    669c:	jsr 8d0 <put2bytes>
    66a2:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    66a4:	movea.l 1a11c <currentEvents>,a0
    66aa:	move.l 12(a0),d0
    66ae:	move.l 4(sp),-(sp)
    66b2:	move.l d0,-(sp)
    66b4:	jsr 8d0 <put2bytes>
    66ba:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    66bc:	movea.l 1a11c <currentEvents>,a0
    66c2:	move.l 16(a0),d0
    66c6:	move.l 4(sp),-(sp)
    66ca:	move.l d0,-(sp)
    66cc:	jsr 8d0 <put2bytes>
    66d2:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    66d4:	movea.l 1a11c <currentEvents>,a0
    66da:	move.l 20(a0),d0
    66de:	move.l 4(sp),-(sp)
    66e2:	move.l d0,-(sp)
    66e4:	jsr 8d0 <put2bytes>
    66ea:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    66ec:	movea.l 1a11c <currentEvents>,a0
    66f2:	move.l 24(a0),d0
    66f6:	move.l 4(sp),-(sp)
    66fa:	move.l d0,-(sp)
    66fc:	jsr 8d0 <put2bytes>
    6702:	addq.l #8,sp
}
    6704:	nop
    6706:	rts

00006708 <sludgeDisplay>:

void sludgeDisplay () {					
    6708:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    670a:	move.l #14675968,(sp)
	displayCursor();
    6710:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    6716:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    671c:	jsr 298c <CstRestoreScreen>
	drawPeople();
    6722:	jsr 9d60 <drawPeople>
	CstSwapBuffer();
    6728:	jsr 359a <CstSwapBuffer>
}
    672e:	nop
    6730:	addq.l #4,sp
    6732:	rts

00006734 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    6734:	      ,-- bra.s 6754 <stackSetByIndex+0x20>
		vS = vS->next;
    6736:	,-----|-> movea.l 4(sp),a0
    673a:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    6740:	|     +-- bne.s 6754 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    6742:	|     |   pea 18872 <PutChar+0xea4>
    6748:	|     |   jsr 16f2c <KPrintF>
    674e:	|     |   addq.l #4,sp
			return FALSE;
    6750:	|     |   clr.w d0
    6752:	|  ,--|-- bra.s 6776 <stackSetByIndex+0x42>
	while (theIndex--) {
    6754:	|  |  '-> move.l 8(sp),d0
    6758:	|  |      move.l d0,d1
    675a:	|  |      subq.l #1,d1
    675c:	|  |      move.l d1,8(sp)
    6760:	|  |      tst.l d0
    6762:	'--|----- bne.s 6736 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    6764:	   |      move.l 4(sp),d0
    6768:	   |      move.l d0,-(sp)
    676a:	   |      move.l 16(sp),-(sp)
    676e:	   |      jsr 1499a <copyVariable>
    6774:	   |      addq.l #8,sp
}
    6776:	   '----> rts

00006778 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    6778:	             lea -24(sp),sp
    677c:	             move.l a6,-(sp)
    677e:	             move.l 48(sp),d0
    6782:	             move.w d0,d0
    6784:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    6788:	             moveq #58,d0
    678a:	             move.l d0,24(sp)
    678e:	             clr.l 20(sp)
    6792:	             move.l 1a7a4 <SysBase>,d0
    6798:	             movea.l d0,a6
    679a:	             move.l 24(sp),d0
    679e:	             move.l 20(sp),d1
    67a2:	             jsr -684(a6)
    67a6:	             move.l d0,16(sp)
    67aa:	             move.l 16(sp),d0
    67ae:	             move.l d0,12(sp)
	if(!newFunc) {
    67b2:	         ,-- bne.s 67c8 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    67b4:	         |   pea 1888b <PutChar+0xebd>
    67ba:	         |   jsr 16f2c <KPrintF>
    67c0:	         |   addq.l #4,sp
		return 0;
    67c2:	         |   moveq #0,d0
    67c4:	,--------|-- bra.w 68de <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    67c8:	|        '-> move.l 32(sp),d0
    67cc:	|            movea.l 12(sp),a0
    67d0:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    67d2:	|            move.l 12(sp),-(sp)
    67d6:	|            jsr 5ee8 <loadFunctionCode>
    67dc:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    67de:	|            movea.l 12(sp),a0
    67e2:	|            move.l 16(a0),d1
    67e6:	|            move.l 36(sp),d0
    67ea:	|            cmp.l d1,d0
    67ec:	|        ,-- beq.s 6802 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    67ee:	|        |   pea 188b4 <PutChar+0xee6>
    67f4:	|        |   jsr 16f2c <KPrintF>
    67fa:	|        |   addq.l #4,sp
		return NULL; 
    67fc:	|        |   moveq #0,d0
    67fe:	+--------|-- bra.w 68de <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    6802:	|        '-> movea.l 12(sp),a0
    6806:	|            move.l 16(a0),d1
    680a:	|            movea.l 12(sp),a0
    680e:	|            move.l 8(a0),d0
    6812:	|            cmp.l d1,d0
    6814:	|  ,-------- bge.s 687e <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    6816:	|  |         pea 188d0 <PutChar+0xf02>
    681c:	|  |         jsr 16f2c <KPrintF>
    6822:	|  |         addq.l #4,sp
		return NULL; 
    6824:	|  |         moveq #0,d0
    6826:	+--|-------- bra.w 68de <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    682a:	|  |  ,----> movea.l 44(sp),a0
    682e:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    6832:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    6836:	|  |  |      movea.l 44(sp),a0
    683a:	|  |  |      move.l (a0),d0
    683c:	|  |  |  ,-- bne.s 6852 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    683e:	|  |  |  |   pea 188fa <PutChar+0xf2c>
    6844:	|  |  |  |   jsr 16f2c <KPrintF>
    684a:	|  |  |  |   addq.l #4,sp
			return NULL;
    684c:	|  |  |  |   moveq #0,d0
    684e:	+--|--|--|-- bra.w 68de <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    6852:	|  |  |  '-> movea.l 12(sp),a0
    6856:	|  |  |      move.l 20(a0),d1
    685a:	|  |  |      move.l 36(sp),d0
    685e:	|  |  |      lsl.l #3,d0
    6860:	|  |  |      add.l d0,d1
    6862:	|  |  |      move.l 8(sp),d0
    6866:	|  |  |      move.l d1,-(sp)
    6868:	|  |  |      move.l d0,-(sp)
    686a:	|  |  |      jsr 1499a <copyVariable>
    6870:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    6872:	|  |  |      move.l 44(sp),-(sp)
    6876:	|  |  |      jsr 14e64 <trimStack>
    687c:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    687e:	|  '--|----> tst.l 36(sp)
    6882:	|     '----- bne.s 682a <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    6884:	|            movea.l 12(sp),a0
    6888:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    688c:	|            movea.l 12(sp),a0
    6890:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    6894:	|            movea.l 12(sp),a0
    6898:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    689e:	|            movea.l 12(sp),a0
    68a2:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    68a8:	|            movea.l 12(sp),a0
    68ac:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    68b0:	|            movea.l 12(sp),a0
    68b4:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    68b8:	|            movea.l 12(sp),a0
    68bc:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    68c0:	|            movea.l 12(sp),a0
    68c4:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    68c8:	|            movea.l 12(sp),a0
    68cc:	|            clr.l 28(a0)

	restartFunction (newFunc);
    68d0:	|            move.l 12(sp),-(sp)
    68d4:	|            jsr 652c <restartFunction>
    68da:	|            addq.l #4,sp
	return 1;
    68dc:	|            moveq #1,d0
}
    68de:	'----------> movea.l (sp)+,a6
    68e0:	             lea 24(sp),sp
    68e4:	             rts

000068e6 <unfreezeSubs>:

void unfreezeSubs () {
    68e6:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    68e8:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    68ee:	   ,----- bra.s 690c <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    68f0:	,--|----> movea.l (sp),a0
    68f2:	|  |      move.b 56(a0),d0
    68f6:	|  |  ,-- beq.s 6906 <unfreezeSubs+0x20>
    68f8:	|  |  |   movea.l (sp),a0
    68fa:	|  |  |   move.b 56(a0),d0
    68fe:	|  |  |   subq.b #1,d0
    6900:	|  |  |   movea.l (sp),a0
    6902:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    6906:	|  |  '-> movea.l (sp),a0
    6908:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    690c:	|  '----> tst.l (sp)
    690e:	'-------- bne.s 68f0 <unfreezeSubs+0xa>
	}
}
    6910:	          nop
    6912:	          nop
    6914:	          addq.l #4,sp
    6916:	          rts

00006918 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6918:	clr.w 1a128 <sliceBusy>
}
    691e:	nop
    6920:	rts

00006922 <getNumberedString>:

char * getNumberedString (int value) {
    6922:	       lea -56(sp),sp
    6926:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    692a:	       move.w 1a128 <sliceBusy>,d0
    6930:	   ,-- beq.s 697a <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    6932:	   |   move.l 1a7ac <DOSBase>,d0
    6938:	   |   movea.l d0,a6
    693a:	   |   jsr -60(a6)
    693e:	   |   move.l d0,28(sp)
    6942:	   |   move.l 28(sp),d0
    6946:	   |   move.l d0,24(sp)
    694a:	   |   move.l #100677,20(sp)
    6952:	   |   moveq #76,d0
    6954:	   |   move.l d0,16(sp)
    6958:	   |   move.l 1a7ac <DOSBase>,d0
    695e:	   |   movea.l d0,a6
    6960:	   |   move.l 24(sp),d1
    6964:	   |   move.l 20(sp),d2
    6968:	   |   move.l 16(sp),d3
    696c:	   |   jsr -48(a6)
    6970:	   |   move.l d0,12(sp)
		return NULL;
    6974:	   |   moveq #0,d0
    6976:	,--|-- bra.w 6a16 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    697a:	|  '-> move.l 1a78c <bigDataFile>,64(sp)
    6982:	|      move.l 72(sp),d0
    6986:	|      add.l d0,d0
    6988:	|      add.l d0,d0
    698a:	|      move.l d0,d1
    698c:	|      move.l 1a798 <startOfTextIndex>,d0
    6992:	|      add.l d1,d0
    6994:	|      move.l d0,60(sp)
    6998:	|      moveq #-1,d0
    699a:	|      move.l d0,56(sp)
    699e:	|      move.l 1a7ac <DOSBase>,d0
    69a4:	|      movea.l d0,a6
    69a6:	|      move.l 64(sp),d1
    69aa:	|      move.l 60(sp),d2
    69ae:	|      move.l 56(sp),d3
    69b2:	|      jsr -66(a6)
    69b6:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    69ba:	|      move.l 1a78c <bigDataFile>,d0
    69c0:	|      move.l d0,-(sp)
    69c2:	|      jsr 718 <get4bytes>
    69c8:	|      addq.l #4,sp
    69ca:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    69ce:	|      move.l 1a78c <bigDataFile>,48(sp)
    69d6:	|      move.l 72(sp),44(sp)
    69dc:	|      moveq #-1,d0
    69de:	|      move.l d0,40(sp)
    69e2:	|      move.l 1a7ac <DOSBase>,d0
    69e8:	|      movea.l d0,a6
    69ea:	|      move.l 48(sp),d1
    69ee:	|      move.l 44(sp),d2
    69f2:	|      move.l 40(sp),d3
    69f6:	|      jsr -66(a6)
    69fa:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    69fe:	|      move.l 1a78c <bigDataFile>,d0
    6a04:	|      move.l d0,-(sp)
    6a06:	|      jsr b02 <readString>
    6a0c:	|      addq.l #4,sp
    6a0e:	|      move.l d0,32(sp)
	
	return s;
    6a12:	|      move.l 32(sp),d0
}
    6a16:	'----> movem.l (sp)+,d2-d3/a6
    6a1a:	       lea 56(sp),sp
    6a1e:	       rts

00006a20 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6a20:	       lea -32(sp),sp
    6a24:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6a28:	       move.w 1a128 <sliceBusy>,d0
    6a2e:	   ,-- beq.s 6a4a <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6a30:	   |   pea 18992 <PutChar+0xfc4>
    6a36:	   |   pea 189b0 <PutChar+0xfe2>
    6a3c:	   |   jsr 16f2c <KPrintF>
    6a42:	   |   addq.l #8,sp
		return 0;
    6a44:	   |   moveq #0,d0
    6a46:	,--|-- bra.w 6ade <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6a4a:	|  '-> move.l 1a78c <bigDataFile>,40(sp)
    6a52:	|      move.l 48(sp),d0
    6a56:	|      add.l d0,d0
    6a58:	|      add.l d0,d0
    6a5a:	|      move.l d0,d1
    6a5c:	|      move.l 1a794 <startOfDataIndex>,d0
    6a62:	|      add.l d1,d0
    6a64:	|      move.l d0,36(sp)
    6a68:	|      moveq #-1,d0
    6a6a:	|      move.l d0,32(sp)
    6a6e:	|      move.l 1a7ac <DOSBase>,d0
    6a74:	|      movea.l d0,a6
    6a76:	|      move.l 40(sp),d1
    6a7a:	|      move.l 36(sp),d2
    6a7e:	|      move.l 32(sp),d3
    6a82:	|      jsr -66(a6)
    6a86:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    6a8a:	|      move.l 1a78c <bigDataFile>,24(sp)
    6a92:	|      move.l 1a78c <bigDataFile>,d0
    6a98:	|      move.l d0,-(sp)
    6a9a:	|      jsr 718 <get4bytes>
    6aa0:	|      addq.l #4,sp
    6aa2:	|      move.l d0,20(sp)
    6aa6:	|      clr.l 16(sp)
    6aaa:	|      move.l 1a7ac <DOSBase>,d0
    6ab0:	|      movea.l d0,a6
    6ab2:	|      move.l 24(sp),d1
    6ab6:	|      move.l 20(sp),d2
    6aba:	|      move.l 16(sp),d3
    6abe:	|      jsr -66(a6)
    6ac2:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    6ac6:	|      move.w #1,1a128 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6ace:	|      move.l 1a78c <bigDataFile>,d0
    6ad4:	|      move.l d0,-(sp)
    6ad6:	|      jsr 718 <get4bytes>
    6adc:	|      addq.l #4,sp
}
    6ade:	'----> movem.l (sp)+,d2-d3/a6
    6ae2:	       lea 32(sp),sp
    6ae6:	       rts

00006ae8 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6ae8:	       lea -32(sp),sp
    6aec:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6af0:	       move.w 1a128 <sliceBusy>,d0
    6af6:	   ,-- beq.s 6b12 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6af8:	   |   pea 18992 <PutChar+0xfc4>
    6afe:	   |   pea 189b0 <PutChar+0xfe2>
    6b04:	   |   jsr 16f2c <KPrintF>
    6b0a:	   |   addq.l #8,sp
        return FALSE;
    6b0c:	   |   clr.w d0
    6b0e:	,--|-- bra.w 6b9e <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    6b12:	|  '-> move.l 1a78c <bigDataFile>,40(sp)
    6b1a:	|      move.l 48(sp),d0
    6b1e:	|      add.l d0,d0
    6b20:	|      add.l d0,d0
    6b22:	|      move.l d0,d1
    6b24:	|      move.l 1a7a0 <startOfObjectIndex>,d0
    6b2a:	|      add.l d1,d0
    6b2c:	|      move.l d0,36(sp)
    6b30:	|      moveq #-1,d0
    6b32:	|      move.l d0,32(sp)
    6b36:	|      move.l 1a7ac <DOSBase>,d0
    6b3c:	|      movea.l d0,a6
    6b3e:	|      move.l 40(sp),d1
    6b42:	|      move.l 36(sp),d2
    6b46:	|      move.l 32(sp),d3
    6b4a:	|      jsr -66(a6)
    6b4e:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    6b52:	|      move.l 1a78c <bigDataFile>,24(sp)
    6b5a:	|      move.l 1a78c <bigDataFile>,d0
    6b60:	|      move.l d0,-(sp)
    6b62:	|      jsr 718 <get4bytes>
    6b68:	|      addq.l #4,sp
    6b6a:	|      move.l d0,20(sp)
    6b6e:	|      moveq #-1,d0
    6b70:	|      move.l d0,16(sp)
    6b74:	|      move.l 1a7ac <DOSBase>,d0
    6b7a:	|      movea.l d0,a6
    6b7c:	|      move.l 24(sp),d1
    6b80:	|      move.l 20(sp),d2
    6b84:	|      move.l 16(sp),d3
    6b88:	|      jsr -66(a6)
    6b8c:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    6b90:	|      move.w #1,1a128 <sliceBusy>
    6b98:	|      move.w 1a128 <sliceBusy>,d0
}
    6b9e:	'----> movem.l (sp)+,d2-d3/a6
    6ba2:	       lea 32(sp),sp
    6ba6:	       rts

00006ba8 <openSubSlice>:

BOOL openSubSlice (int num) {
    6ba8:	       lea -32(sp),sp
    6bac:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    6bb0:	       move.w 1a128 <sliceBusy>,d0
    6bb6:	   ,-- beq.s 6bd2 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6bb8:	   |   pea 18992 <PutChar+0xfc4>
    6bbe:	   |   pea 189b0 <PutChar+0xfe2>
    6bc4:	   |   jsr 16f2c <KPrintF>
    6bca:	   |   addq.l #8,sp
		return FALSE;
    6bcc:	   |   clr.w d0
    6bce:	,--|-- bra.w 6c5e <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    6bd2:	|  '-> move.l 1a78c <bigDataFile>,40(sp)
    6bda:	|      move.l 48(sp),d0
    6bde:	|      add.l d0,d0
    6be0:	|      add.l d0,d0
    6be2:	|      move.l d0,d1
    6be4:	|      move.l 1a79c <startOfSubIndex>,d0
    6bea:	|      add.l d1,d0
    6bec:	|      move.l d0,36(sp)
    6bf0:	|      moveq #-1,d0
    6bf2:	|      move.l d0,32(sp)
    6bf6:	|      move.l 1a7ac <DOSBase>,d0
    6bfc:	|      movea.l d0,a6
    6bfe:	|      move.l 40(sp),d1
    6c02:	|      move.l 36(sp),d2
    6c06:	|      move.l 32(sp),d3
    6c0a:	|      jsr -66(a6)
    6c0e:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    6c12:	|      move.l 1a78c <bigDataFile>,24(sp)
    6c1a:	|      move.l 1a78c <bigDataFile>,d0
    6c20:	|      move.l d0,-(sp)
    6c22:	|      jsr 718 <get4bytes>
    6c28:	|      addq.l #4,sp
    6c2a:	|      move.l d0,20(sp)
    6c2e:	|      moveq #-1,d0
    6c30:	|      move.l d0,16(sp)
    6c34:	|      move.l 1a7ac <DOSBase>,d0
    6c3a:	|      movea.l d0,a6
    6c3c:	|      move.l 24(sp),d1
    6c40:	|      move.l 20(sp),d2
    6c44:	|      move.l 16(sp),d3
    6c48:	|      jsr -66(a6)
    6c4c:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    6c50:	|      move.w #1,1a128 <sliceBusy>
    6c58:	|      move.w 1a128 <sliceBusy>,d0
}
    6c5e:	'----> movem.l (sp)+,d2-d3/a6
    6c62:	       lea 32(sp),sp
    6c66:	       rts

00006c68 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    6c68:	       lea -180(sp),sp
    6c6c:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    6c70:	       tst.l 196(sp)
    6c74:	,----- beq.s 6cb4 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    6c76:	|      move.l 196(sp),1a78c <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    6c7e:	|      move.l 196(sp),168(sp)
    6c84:	|      clr.l 164(sp)
    6c88:	|      clr.l 160(sp)
    6c8c:	|      move.l 1a7ac <DOSBase>,d0
    6c92:	|      movea.l d0,a6
    6c94:	|      move.l 168(sp),d1
    6c98:	|      move.l 164(sp),d2
    6c9c:	|      move.l 160(sp),d3
    6ca0:	|      jsr -66(a6)
    6ca4:	|      move.l d0,156(sp)
    6ca8:	|      move.l 156(sp),d0
    6cac:	|      move.l d0,1a790 <startIndex>
    6cb2:	|  ,-- bra.s 6cee <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    6cb4:	'--|-> move.l 1a78c <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    6cbc:	   |   move.l 196(sp),184(sp)
    6cc2:	   |   move.l 1a790 <startIndex>,d0
    6cc8:	   |   move.l d0,180(sp)
    6ccc:	   |   moveq #-1,d0
    6cce:	   |   move.l d0,176(sp)
    6cd2:	   |   move.l 1a7ac <DOSBase>,d0
    6cd8:	   |   movea.l d0,a6
    6cda:	   |   move.l 184(sp),d1
    6cde:	   |   move.l 180(sp),d2
    6ce2:	   |   move.l 176(sp),d3
    6ce6:	   |   jsr -66(a6)
    6cea:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    6cee:	   '-> clr.w 1a128 <sliceBusy>

	if (skipBefore > numLanguages) {
    6cf4:	       move.l 204(sp),d0
    6cf8:	       cmp.l 200(sp),d0
    6cfc:	   ,-- bls.s 6d10 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    6cfe:	   |   pea 189ca <PutChar+0xffc>
    6d04:	   |   jsr 16f2c <KPrintF>
    6d0a:	   |   addq.l #4,sp
		skipBefore = 0;
    6d0c:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    6d10:	   '-> move.l 200(sp),d0
    6d14:	       sub.l 204(sp),d0
    6d18:	       move.l d0,188(sp)
	while (skipBefore) {
    6d1c:	   ,-- bra.s 6d5a <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    6d1e:	,--|-> move.l 196(sp),24(sp)
    6d24:	|  |   move.l 196(sp),-(sp)
    6d28:	|  |   jsr 718 <get4bytes>
    6d2e:	|  |   addq.l #4,sp
    6d30:	|  |   move.l d0,20(sp)
    6d34:	|  |   moveq #-1,d0
    6d36:	|  |   move.l d0,16(sp)
    6d3a:	|  |   move.l 1a7ac <DOSBase>,d0
    6d40:	|  |   movea.l d0,a6
    6d42:	|  |   move.l 24(sp),d1
    6d46:	|  |   move.l 20(sp),d2
    6d4a:	|  |   move.l 16(sp),d3
    6d4e:	|  |   jsr -66(a6)
    6d52:	|  |   move.l d0,12(sp)
		skipBefore --;
    6d56:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    6d5a:	|  '-> tst.l 204(sp)
    6d5e:	'----- bne.s 6d1e <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6d60:	       move.l 196(sp),152(sp)
    6d66:	       clr.l 148(sp)
    6d6a:	       clr.l 144(sp)
    6d6e:	       move.l 1a7ac <DOSBase>,d0
    6d74:	       movea.l d0,a6
    6d76:	       move.l 152(sp),d1
    6d7a:	       move.l 148(sp),d2
    6d7e:	       move.l 144(sp),d3
    6d82:	       jsr -66(a6)
    6d86:	       move.l d0,140(sp)
    6d8a:	       move.l 140(sp),d0
    6d8e:	       addq.l #4,d0
    6d90:	       move.l d0,1a798 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    6d96:	       move.l 196(sp),136(sp)
    6d9c:	       move.l 196(sp),-(sp)
    6da0:	       jsr 718 <get4bytes>
    6da6:	       addq.l #4,sp
    6da8:	       move.l d0,132(sp)
    6dac:	       moveq #-1,d0
    6dae:	       move.l d0,128(sp)
    6db2:	       move.l 1a7ac <DOSBase>,d0
    6db8:	       movea.l d0,a6
    6dba:	       move.l 136(sp),d1
    6dbe:	       move.l 132(sp),d2
    6dc2:	       move.l 128(sp),d3
    6dc6:	       jsr -66(a6)
    6dca:	       move.l d0,124(sp)

	while (skipAfter) {
    6dce:	   ,-- bra.s 6e0c <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    6dd0:	,--|-> move.l 196(sp),40(sp)
    6dd6:	|  |   move.l 196(sp),-(sp)
    6dda:	|  |   jsr 718 <get4bytes>
    6de0:	|  |   addq.l #4,sp
    6de2:	|  |   move.l d0,36(sp)
    6de6:	|  |   moveq #-1,d0
    6de8:	|  |   move.l d0,32(sp)
    6dec:	|  |   move.l 1a7ac <DOSBase>,d0
    6df2:	|  |   movea.l d0,a6
    6df4:	|  |   move.l 40(sp),d1
    6df8:	|  |   move.l 36(sp),d2
    6dfc:	|  |   move.l 32(sp),d3
    6e00:	|  |   jsr -66(a6)
    6e04:	|  |   move.l d0,28(sp)
		skipAfter --;
    6e08:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    6e0c:	|  '-> tst.l 188(sp)
    6e10:	'----- bne.s 6dd0 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6e12:	       move.l 196(sp),120(sp)
    6e18:	       clr.l 116(sp)
    6e1c:	       clr.l 112(sp)
    6e20:	       move.l 1a7ac <DOSBase>,d0
    6e26:	       movea.l d0,a6
    6e28:	       move.l 120(sp),d1
    6e2c:	       move.l 116(sp),d2
    6e30:	       move.l 112(sp),d3
    6e34:	       jsr -66(a6)
    6e38:	       move.l d0,108(sp)
    6e3c:	       move.l 108(sp),d0
    6e40:	       addq.l #4,d0
    6e42:	       move.l d0,1a79c <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    6e48:	       move.l 196(sp),104(sp)
    6e4e:	       move.l 196(sp),-(sp)
    6e52:	       jsr 718 <get4bytes>
    6e58:	       addq.l #4,sp
    6e5a:	       move.l d0,100(sp)
    6e5e:	       clr.l 96(sp)
    6e62:	       move.l 1a7ac <DOSBase>,d0
    6e68:	       movea.l d0,a6
    6e6a:	       move.l 104(sp),d1
    6e6e:	       move.l 100(sp),d2
    6e72:	       move.l 96(sp),d3
    6e76:	       jsr -66(a6)
    6e7a:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6e7e:	       move.l 196(sp),88(sp)
    6e84:	       clr.l 84(sp)
    6e88:	       clr.l 80(sp)
    6e8c:	       move.l 1a7ac <DOSBase>,d0
    6e92:	       movea.l d0,a6
    6e94:	       move.l 88(sp),d1
    6e98:	       move.l 84(sp),d2
    6e9c:	       move.l 80(sp),d3
    6ea0:	       jsr -66(a6)
    6ea4:	       move.l d0,76(sp)
    6ea8:	       move.l 76(sp),d0
    6eac:	       addq.l #4,d0
    6eae:	       move.l d0,1a7a0 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    6eb4:	       move.l 196(sp),72(sp)
    6eba:	       move.l 196(sp),-(sp)
    6ebe:	       jsr 718 <get4bytes>
    6ec4:	       addq.l #4,sp
    6ec6:	       move.l d0,68(sp)
    6eca:	       clr.l 64(sp)
    6ece:	       move.l 1a7ac <DOSBase>,d0
    6ed4:	       movea.l d0,a6
    6ed6:	       move.l 72(sp),d1
    6eda:	       move.l 68(sp),d2
    6ede:	       move.l 64(sp),d3
    6ee2:	       jsr -66(a6)
    6ee6:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    6eea:	       move.l 196(sp),56(sp)
    6ef0:	       clr.l 52(sp)
    6ef4:	       clr.l 48(sp)
    6ef8:	       move.l 1a7ac <DOSBase>,d0
    6efe:	       movea.l d0,a6
    6f00:	       move.l 56(sp),d1
    6f04:	       move.l 52(sp),d2
    6f08:	       move.l 48(sp),d3
    6f0c:	       jsr -66(a6)
    6f10:	       move.l d0,44(sp)
    6f14:	       move.l 44(sp),d0
    6f18:	       move.l d0,1a794 <startOfDataIndex>
    6f1e:	       nop
    6f20:	       movem.l (sp)+,d2-d3/a6
    6f24:	       lea 180(sp),sp
    6f28:	       rts

00006f2a <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    6f2a:	    lea -20(sp),sp
    6f2e:	    move.l a6,-(sp)
    6f30:	    move.l d7,-(sp)
	APTR vbr = 0;
    6f32:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    6f36:	    move.w #20090,10(sp)
    6f3c:	    move.w #2049,12(sp)
    6f42:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    6f48:	    movea.l 1a7a4 <SysBase>,a0
    6f4e:	    move.w 296(a0),d0
    6f52:	    move.w d0,d0
    6f54:	    andi.l #65535,d0
    6f5a:	    moveq #1,d1
    6f5c:	    and.l d1,d0
    6f5e:	,-- beq.s 6f8c <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    6f60:	|   lea 28(sp),a0
    6f64:	|   lea -18(a0),a0
    6f68:	|   move.l a0,20(sp)
    6f6c:	|   move.l 1a7a4 <SysBase>,d0
    6f72:	|   movea.l d0,a6
    6f74:	|   move.l 20(sp),d7
    6f78:	|   exg d7,a5
    6f7a:	|   jsr -30(a6)
    6f7e:	|   exg d7,a5
    6f80:	|   move.l d0,16(sp)
    6f84:	|   move.l 16(sp),d0
    6f88:	|   move.l d0,24(sp)

	return vbr;
    6f8c:	'-> move.l 24(sp),d0
}
    6f90:	    move.l (sp)+,d7
    6f92:	    movea.l (sp)+,a6
    6f94:	    lea 20(sp),sp
    6f98:	    rts

00006f9a <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    6f9a:	movea.l 1a7ca <VBR>,a0
    6fa0:	lea 108(a0),a0
    6fa4:	move.l 4(sp),(a0)
}
    6fa8:	nop
    6faa:	rts

00006fac <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    6fac:	movea.l 1a7ca <VBR>,a0
    6fb2:	move.l 108(a0),d0
}
    6fb6:	rts

00006fb8 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    6fb8:	       subq.l #8,sp
    6fba:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    6fbc:	       pea 18a13 <PutChar+0x1045>
    6fc2:	       jsr 16f2c <KPrintF>
    6fc8:	       addq.l #4,sp
	Forbid();
    6fca:	       move.l 1a7a4 <SysBase>,d0
    6fd0:	       movea.l d0,a6
    6fd2:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    6fd6:	       pea 18a2b <PutChar+0x105d>
    6fdc:	       jsr 16f2c <KPrintF>
    6fe2:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    6fe4:	       movea.l 1a7a8 <custom>,a0
    6fea:	       move.w 16(a0),d0
    6fee:	       move.w d0,1a7c8 <SystemADKCON>
	SystemInts=custom->intenar;
    6ff4:	       movea.l 1a7a8 <custom>,a0
    6ffa:	       move.w 28(a0),d0
    6ffe:	       move.w d0,1a7c4 <SystemInts>
	SystemDMA=custom->dmaconr;
    7004:	       movea.l 1a7a8 <custom>,a0
    700a:	       move.w 2(a0),d0
    700e:	       move.w d0,1a7c6 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    7014:	       movea.l 1a7b0 <GfxBase>,a0
    701a:	       move.l 34(a0),d0
    701e:	       move.l d0,1a7d2 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    7024:	       pea 18a49 <PutChar+0x107b>
    702a:	       jsr 16f2c <KPrintF>
    7030:	       addq.l #4,sp
	LoadView(0);
    7032:	       clr.l 4(sp)
    7036:	       move.l 1a7b0 <GfxBase>,d0
    703c:	       movea.l d0,a6
    703e:	       movea.l 4(sp),a1
    7042:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    7046:	       pea 18a5f <PutChar+0x1091>
    704c:	       jsr 16f2c <KPrintF>
    7052:	       addq.l #4,sp
	WaitTOF();
    7054:	       move.l 1a7b0 <GfxBase>,d0
    705a:	       movea.l d0,a6
    705c:	       jsr -270(a6)
	WaitTOF();
    7060:	       move.l 1a7b0 <GfxBase>,d0
    7066:	       movea.l d0,a6
    7068:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    706c:	       pea 18a74 <PutChar+0x10a6>
    7072:	       jsr 16f2c <KPrintF>
    7078:	       addq.l #4,sp
	WaitVbl();
    707a:	       jsr 16e60 <WaitVbl>
	WaitVbl();
    7080:	       jsr 16e60 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7086:	       pea 18a89 <PutChar+0x10bb>
    708c:	       jsr 16f2c <KPrintF>
    7092:	       addq.l #4,sp
	OwnBlitter();
    7094:	       move.l 1a7b0 <GfxBase>,d0
    709a:	       movea.l d0,a6
    709c:	       jsr -456(a6)
	WaitBlit();	
    70a0:	       move.l 1a7b0 <GfxBase>,d0
    70a6:	       movea.l d0,a6
    70a8:	       jsr -228(a6)
	Disable();
    70ac:	       move.l 1a7a4 <SysBase>,d0
    70b2:	       movea.l d0,a6
    70b4:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    70b8:	       pea 18aaa <PutChar+0x10dc>
    70be:	       jsr 16f2c <KPrintF>
    70c4:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    70c6:	       movea.l 1a7a8 <custom>,a0
    70cc:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    70d2:	       pea 18ac1 <PutChar+0x10f3>
    70d8:	       jsr 16f2c <KPrintF>
    70de:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    70e0:	       clr.l 8(sp)
    70e4:	   ,-- bra.s 7102 <TakeSystem+0x14a>
		custom->color[a]=0;
    70e6:	,--|-> movea.l 1a7a8 <custom>,a0
    70ec:	|  |   move.l 8(sp),d0
    70f0:	|  |   addi.l #192,d0
    70f6:	|  |   add.l d0,d0
    70f8:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    70fe:	|  |   addq.l #1,8(sp)
    7102:	|  '-> moveq #31,d0
    7104:	|      cmp.l 8(sp),d0
    7108:	'----- bge.s 70e6 <TakeSystem+0x12e>

	WaitVbl();
    710a:	       jsr 16e60 <WaitVbl>
	WaitVbl();
    7110:	       jsr 16e60 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    7116:	       pea 18ae6 <PutChar+0x1118>
    711c:	       jsr 16f2c <KPrintF>
    7122:	       addq.l #4,sp
	VBR=GetVBR();
    7124:	       jsr 6f2a <GetVBR>
    712a:	       move.l d0,1a7ca <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    7130:	       jsr 6fac <GetInterruptHandler>
    7136:	       move.l d0,1a7ce <SystemIrq>
}
    713c:	       nop
    713e:	       movea.l (sp)+,a6
    7140:	       addq.l #8,sp
    7142:	       rts

00007144 <FreeSystem>:

void FreeSystem() { 
    7144:	subq.l #4,sp
    7146:	move.l a6,-(sp)
	WaitVbl();
    7148:	jsr 16e60 <WaitVbl>
	WaitBlit();
    714e:	move.l 1a7b0 <GfxBase>,d0
    7154:	movea.l d0,a6
    7156:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    715a:	movea.l 1a7a8 <custom>,a0
    7160:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    7166:	movea.l 1a7a8 <custom>,a0
    716c:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7172:	movea.l 1a7a8 <custom>,a0
    7178:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    717e:	move.l 1a7ce <SystemIrq>,d0
    7184:	move.l d0,-(sp)
    7186:	jsr 6f9a <SetInterruptHandler>
    718c:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    718e:	movea.l 1a7b0 <GfxBase>,a0
    7194:	move.l 38(a0),d0
    7198:	movea.l 1a7a8 <custom>,a0
    719e:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    71a2:	movea.l 1a7b0 <GfxBase>,a0
    71a8:	move.l 50(a0),d0
    71ac:	movea.l 1a7a8 <custom>,a0
    71b2:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    71b6:	movea.l 1a7a8 <custom>,a0
    71bc:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    71c2:	move.w 1a7c6 <SystemDMA>,d0
    71c8:	movea.l 1a7a8 <custom>,a0
    71ce:	ori.w #-32768,d0
    71d2:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    71d6:	move.w 1a7c8 <SystemADKCON>,d0
    71dc:	movea.l 1a7a8 <custom>,a0
    71e2:	ori.w #-32768,d0
    71e6:	move.w d0,158(a0)

	WaitBlit();	
    71ea:	move.l 1a7b0 <GfxBase>,d0
    71f0:	movea.l d0,a6
    71f2:	jsr -228(a6)
	DisownBlitter();
    71f6:	move.l 1a7b0 <GfxBase>,d0
    71fc:	movea.l d0,a6
    71fe:	jsr -462(a6)
	Enable();
    7202:	move.l 1a7a4 <SysBase>,d0
    7208:	movea.l d0,a6
    720a:	jsr -126(a6)

	LoadView(ActiView);
    720e:	move.l 1a7d2 <ActiView>,4(sp)
    7216:	move.l 1a7b0 <GfxBase>,d0
    721c:	movea.l d0,a6
    721e:	movea.l 4(sp),a1
    7222:	jsr -222(a6)
	WaitTOF();
    7226:	move.l 1a7b0 <GfxBase>,d0
    722c:	movea.l d0,a6
    722e:	jsr -270(a6)
	WaitTOF();
    7232:	move.l 1a7b0 <GfxBase>,d0
    7238:	movea.l d0,a6
    723a:	jsr -270(a6)

	Permit();
    723e:	move.l 1a7a4 <SysBase>,d0
    7244:	movea.l d0,a6
    7246:	jsr -138(a6)
}
    724a:	nop
    724c:	movea.l (sp)+,a6
    724e:	addq.l #4,sp
    7250:	rts

00007252 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    7252:	       lea -132(sp),sp
    7256:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    725a:	       clr.l 140(sp)
    725e:	   ,-- bra.s 7264 <main+0x12>
    7260:	,--|-> addq.l #1,140(sp)
    7264:	|  '-> cmpi.l #999,140(sp)
    726c:	'----- ble.s 7260 <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    726e:	       movea.w #4,a0
    7272:	       move.l (a0),d0
    7274:	       move.l d0,1a7a4 <SysBase>
	custom = (struct Custom*)0xdff000;	
    727a:	       move.l #14675968,1a7a8 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    7284:	       move.l #101130,136(sp)
    728c:	       clr.l 132(sp)
    7290:	       move.l 1a7a4 <SysBase>,d0
    7296:	       movea.l d0,a6
    7298:	       movea.l 136(sp),a1
    729c:	       move.l 132(sp),d0
    72a0:	       jsr -552(a6)
    72a4:	       move.l d0,128(sp)
    72a8:	       move.l 128(sp),d0
    72ac:	       move.l d0,1a7b0 <GfxBase>
	if (!GfxBase)
    72b2:	       move.l 1a7b0 <GfxBase>,d0
    72b8:	   ,-- bne.s 72ce <main+0x7c>
		Exit(0);
    72ba:	   |   clr.l 124(sp)
    72be:	   |   move.l 1a7ac <DOSBase>,d0
    72c4:	   |   movea.l d0,a6
    72c6:	   |   move.l 124(sp),d1
    72ca:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    72ce:	   '-> move.l #101147,120(sp)
    72d6:	       clr.l 116(sp)
    72da:	       move.l 1a7a4 <SysBase>,d0
    72e0:	       movea.l d0,a6
    72e2:	       movea.l 120(sp),a1
    72e6:	       move.l 116(sp),d0
    72ea:	       jsr -552(a6)
    72ee:	       move.l d0,112(sp)
    72f2:	       move.l 112(sp),d0
    72f6:	       move.l d0,1a7ac <DOSBase>
	if (!DOSBase)
    72fc:	       move.l 1a7ac <DOSBase>,d0
    7302:	   ,-- bne.s 7318 <main+0xc6>
		Exit(0);
    7304:	   |   clr.l 108(sp)
    7308:	   |   move.l 1a7ac <DOSBase>,d0
    730e:	   |   movea.l d0,a6
    7310:	   |   move.l 108(sp),d1
    7314:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    7318:	   '-> move.l #101159,104(sp)
    7320:	       clr.l 100(sp)
    7324:	       move.l 1a7a4 <SysBase>,d0
    732a:	       movea.l d0,a6
    732c:	       movea.l 104(sp),a1
    7330:	       move.l 100(sp),d0
    7334:	       jsr -552(a6)
    7338:	       move.l d0,96(sp)
    733c:	       move.l 96(sp),d0
    7340:	       move.l d0,1a7b4 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    7346:	       move.l 1a7b4 <MathIeeeSingBasBase>,d0
    734c:	   ,-- bne.s 7362 <main+0x110>
		Exit(0);	
    734e:	   |   clr.l 92(sp)
    7352:	   |   move.l 1a7ac <DOSBase>,d0
    7358:	   |   movea.l d0,a6
    735a:	   |   move.l 92(sp),d1
    735e:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    7362:	   '-> move.l #101183,88(sp)
    736a:	       clr.l 84(sp)
    736e:	       move.l 1a7a4 <SysBase>,d0
    7374:	       movea.l d0,a6
    7376:	       movea.l 88(sp),a1
    737a:	       move.l 84(sp),d0
    737e:	       jsr -552(a6)
    7382:	       move.l d0,80(sp)
    7386:	       move.l 80(sp),d0
    738a:	       move.l d0,1a7b8 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    7390:	       move.l 1a7b8 <MathIeeeSingTransBase>,d0
    7396:	   ,-- bne.s 73ac <main+0x15a>
		Exit(0);
    7398:	   |   clr.l 76(sp)
    739c:	   |   move.l 1a7ac <DOSBase>,d0
    73a2:	   |   movea.l d0,a6
    73a4:	   |   move.l 76(sp),d1
    73a8:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    73ac:	   '-> move.l #101209,72(sp)
    73b4:	       clr.l 68(sp)
    73b8:	       move.l 1a7a4 <SysBase>,d0
    73be:	       movea.l d0,a6
    73c0:	       movea.l 72(sp),a1
    73c4:	       move.l 68(sp),d0
    73c8:	       jsr -552(a6)
    73cc:	       move.l d0,64(sp)
    73d0:	       move.l 64(sp),d0
    73d4:	       move.l d0,1a7c0 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    73da:	       move.l 1a7c0 <MathIeeeDoubTransBase>,d0
    73e0:	   ,-- bne.s 73f6 <main+0x1a4>
		Exit(0);
    73e2:	   |   clr.l 60(sp)
    73e6:	   |   move.l 1a7ac <DOSBase>,d0
    73ec:	   |   movea.l d0,a6
    73ee:	   |   move.l 60(sp),d1
    73f2:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    73f6:	   '-> move.l #101235,56(sp)
    73fe:	       clr.l 52(sp)
    7402:	       move.l 1a7a4 <SysBase>,d0
    7408:	       movea.l d0,a6
    740a:	       movea.l 56(sp),a1
    740e:	       move.l 52(sp),d0
    7412:	       jsr -552(a6)
    7416:	       move.l d0,48(sp)
    741a:	       move.l 48(sp),d0
    741e:	       move.l d0,1a7bc <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    7424:	       move.l 1a7bc <MathIeeeDoubBasBase>,d0
    742a:	   ,-- bne.s 7440 <main+0x1ee>
		Exit(0);
    742c:	   |   clr.l 44(sp)
    7430:	   |   move.l 1a7ac <DOSBase>,d0
    7436:	   |   movea.l d0,a6
    7438:	   |   move.l 44(sp),d1
    743c:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 034!\n");
    7440:	   '-> pea 18b8b <PutChar+0x11bd>
    7446:	       jsr 16f2c <KPrintF>
    744c:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 034!\n", 25);
    744e:	       move.l 1a7ac <DOSBase>,d0
    7454:	       movea.l d0,a6
    7456:	       jsr -60(a6)
    745a:	       move.l d0,40(sp)
    745e:	       move.l 40(sp),d0
    7462:	       move.l d0,36(sp)
    7466:	       move.l #101291,32(sp)
    746e:	       moveq #25,d0
    7470:	       move.l d0,28(sp)
    7474:	       move.l 1a7ac <DOSBase>,d0
    747a:	       movea.l d0,a6
    747c:	       move.l 36(sp),d1
    7480:	       move.l 32(sp),d2
    7484:	       move.l 28(sp),d3
    7488:	       jsr -48(a6)
    748c:	       move.l d0,24(sp)
	Delay(50);
    7490:	       moveq #50,d0
    7492:	       move.l d0,20(sp)
    7496:	       move.l 1a7ac <DOSBase>,d0
    749c:	       movea.l d0,a6
    749e:	       move.l 20(sp),d1
    74a2:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    74a6:	       pea 18bc4 <PutChar+0x11f6>
    74ac:	       jsr 16f2c <KPrintF>
    74b2:	       addq.l #4,sp
	TakeSystem();
    74b4:	       jsr 6fb8 <TakeSystem>
	KPrintF("System Taken\n");
    74ba:	       pea 18bd3 <PutChar+0x1205>
    74c0:	       jsr 16f2c <KPrintF>
    74c6:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    74c8:	       movea.l 1a7a8 <custom>,a0
    74ce:	       move.w #-30721,150(a0)
	WaitVbl();
    74d4:	       jsr 16e60 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    74da:	       pea 18be1 <PutChar+0x1213>
    74e0:	       jsr 16f2c <KPrintF>
    74e6:	       addq.l #4,sp
	main_sludge(argc, argv);	
    74e8:	       move.l 152(sp),-(sp)
    74ec:	       move.l 152(sp),-(sp)
    74f0:	       jsr 3de8 <main_sludge>
    74f6:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    74f8:	       jsr 7144 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    74fe:	       move.l 1a7ac <DOSBase>,16(sp)
    7506:	       move.l 1a7a4 <SysBase>,d0
    750c:	       movea.l d0,a6
    750e:	       movea.l 16(sp),a1
    7512:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    7516:	       move.l 1a7b0 <GfxBase>,12(sp)
    751e:	       move.l 1a7a4 <SysBase>,d0
    7524:	       movea.l d0,a6
    7526:	       movea.l 12(sp),a1
    752a:	       jsr -414(a6)
    752e:	       moveq #0,d0
}
    7530:	       movem.l (sp)+,d2-d3/a6
    7534:	       lea 132(sp),sp
    7538:	       rts

0000753a <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    753a:	    lea -16(sp),sp
    753e:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    7540:	    moveq #8,d0
    7542:	    move.l d0,16(sp)
    7546:	    clr.l 12(sp)
    754a:	    move.l 1a7a4 <SysBase>,d0
    7550:	    movea.l d0,a6
    7552:	    move.l 16(sp),d0
    7556:	    move.l 12(sp),d1
    755a:	    jsr -684(a6)
    755e:	    move.l d0,8(sp)
    7562:	    move.l 8(sp),d0
    7566:	    move.l d0,4(sp)
	if (!newStat) {
    756a:	,-- bne.s 759a <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    756c:	|   movea.l 1a12a <nowStatus>,a0
    7572:	|   move.l (a0),d0
    7574:	|   movea.l 4(sp),a0
    7578:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    757c:	|   pea 18637 <PutChar+0xc69>
    7582:	|   jsr b8 <copyString>
    7588:	|   addq.l #4,sp
    758a:	|   movea.l 4(sp),a0
    758e:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    7590:	|   movea.l 1a12a <nowStatus>,a0
    7596:	|   move.l 4(sp),(a0)
	}
}
    759a:	'-> nop
    759c:	    movea.l (sp)+,a6
    759e:	    lea 16(sp),sp
    75a2:	    rts

000075a4 <clearStatusBar>:

void clearStatusBar () {
    75a4:	       lea -16(sp),sp
    75a8:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    75aa:	       movea.l 1a12a <nowStatus>,a0
    75b0:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    75b4:	       movea.l 1a12a <nowStatus>,a0
    75ba:	       moveq #-1,d0
    75bc:	       move.l d0,6(a0)
	while (stat) {
    75c0:	   ,-- bra.s 7600 <clearStatusBar+0x5c>
		kill = stat;
    75c2:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    75c8:	|  |   movea.l 16(sp),a0
    75cc:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    75d2:	|  |   movea.l 12(sp),a0
    75d6:	|  |   move.l (a0),8(sp)
    75da:	|  |   move.l 1a7a4 <SysBase>,d0
    75e0:	|  |   movea.l d0,a6
    75e2:	|  |   movea.l 8(sp),a1
    75e6:	|  |   jsr -690(a6)
		FreeVec(kill);
    75ea:	|  |   move.l 12(sp),4(sp)
    75f0:	|  |   move.l 1a7a4 <SysBase>,d0
    75f6:	|  |   movea.l d0,a6
    75f8:	|  |   movea.l 4(sp),a1
    75fc:	|  |   jsr -690(a6)
	while (stat) {
    7600:	|  '-> tst.l 16(sp)
    7604:	'----- bne.s 75c2 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    7606:	       movea.l 1a12a <nowStatus>,a0
    760c:	       clr.l (a0)
}
    760e:	       nop
    7610:	       movea.l (sp)+,a6
    7612:	       lea 16(sp),sp
    7616:	       rts

00007618 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    7618:	clr.l 1a7d6 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    761e:	move.w #-1,1a7da <mainStatus+0x4>
	mainStatus.litStatus = -1;
    7626:	moveq #-1,d0
    7628:	move.l d0,1a7dc <mainStatus+0x6>
	mainStatus.statusX = 10;
    762e:	moveq #10,d0
    7630:	move.l d0,1a7e0 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    7636:	movea.l 1a6fc <winHeight>,a0
    763c:	lea -15(a0),a0
    7640:	move.l a0,d0
    7642:	move.l d0,1a7e4 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    7648:	nop
    764a:	rts

0000764c <killLastStatus>:

void killLastStatus () {
    764c:	    lea -12(sp),sp
    7650:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    7652:	    movea.l 1a12a <nowStatus>,a0
    7658:	    move.l (a0),d0
    765a:	,-- beq.s 76a4 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    765c:	|   movea.l 1a12a <nowStatus>,a0
    7662:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    7666:	|   movea.l 1a12a <nowStatus>,a0
    766c:	|   movea.l 12(sp),a1
    7670:	|   move.l 4(a1),d0
    7674:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    7676:	|   movea.l 12(sp),a0
    767a:	|   move.l (a0),8(sp)
    767e:	|   move.l 1a7a4 <SysBase>,d0
    7684:	|   movea.l d0,a6
    7686:	|   movea.l 8(sp),a1
    768a:	|   jsr -690(a6)
		FreeVec(kill);
    768e:	|   move.l 12(sp),4(sp)
    7694:	|   move.l 1a7a4 <SysBase>,d0
    769a:	|   movea.l d0,a6
    769c:	|   movea.l 4(sp),a1
    76a0:	|   jsr -690(a6)
	}
}
    76a4:	'-> nop
    76a6:	    movea.l (sp)+,a6
    76a8:	    lea 12(sp),sp
    76ac:	    rts

000076ae <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    76ae:	movea.l 1a12a <nowStatus>,a0
    76b4:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    76ba:	movea.l 1a12a <nowStatus>,a0
    76c0:	move.l 8(sp),14(a0)
}
    76c6:	nop
    76c8:	rts

000076ca <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    76ca:	       lea -100(sp),sp
    76ce:	       move.l a6,-(sp)
    76d0:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    76d2:	       movea.l 1a12a <nowStatus>,a0
    76d8:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    76dc:	       movea.l 1a12a <nowStatus>,a0
    76e2:	       move.w 4(a0),d0
    76e6:	       move.w d0,d0
    76e8:	       andi.l #65535,d0
    76ee:	       move.l 112(sp),-(sp)
    76f2:	       move.l d0,-(sp)
    76f4:	       jsr 8d0 <put2bytes>
    76fa:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    76fc:	       movea.l 1a12a <nowStatus>,a0
    7702:	       move.l 6(a0),d0
    7706:	       move.l d0,d0
    7708:	       movea.w d0,a0
    770a:	       move.l 112(sp),-(sp)
    770e:	       move.l a0,-(sp)
    7710:	       jsr a9c <putSigned>
    7716:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    7718:	       movea.l 1a12a <nowStatus>,a0
    771e:	       move.l 10(a0),d0
    7722:	       move.l 112(sp),-(sp)
    7726:	       move.l d0,-(sp)
    7728:	       jsr 8d0 <put2bytes>
    772e:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    7730:	       movea.l 1a12a <nowStatus>,a0
    7736:	       move.l 14(a0),d0
    773a:	       move.l 112(sp),-(sp)
    773e:	       move.l d0,-(sp)
    7740:	       jsr 8d0 <put2bytes>
    7746:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    7748:	       move.l 112(sp),100(sp)
    774e:	       movea.l 1a12a <nowStatus>,a0
    7754:	       move.l 18(a0),96(sp)
    775a:	       move.l 1a7ac <DOSBase>,d0
    7760:	       movea.l d0,a6
    7762:	       move.l 100(sp),d1
    7766:	       move.l 96(sp),d2
    776a:	       jsr -312(a6)
    776e:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    7772:	       move.l 112(sp),88(sp)
    7778:	       movea.l 1a12a <nowStatus>,a0
    777e:	       move.l 22(a0),84(sp)
    7784:	       move.l 1a7ac <DOSBase>,d0
    778a:	       movea.l d0,a6
    778c:	       move.l 88(sp),d1
    7790:	       move.l 84(sp),d2
    7794:	       jsr -312(a6)
    7798:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    779c:	       move.l 112(sp),76(sp)
    77a2:	       movea.l 1a12a <nowStatus>,a0
    77a8:	       move.l 26(a0),72(sp)
    77ae:	       move.l 1a7ac <DOSBase>,d0
    77b4:	       movea.l d0,a6
    77b6:	       move.l 76(sp),d1
    77ba:	       move.l 72(sp),d2
    77be:	       jsr -312(a6)
    77c2:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    77c6:	       move.l 112(sp),64(sp)
    77cc:	       movea.l 1a12a <nowStatus>,a0
    77d2:	       move.l 30(a0),60(sp)
    77d8:	       move.l 1a7ac <DOSBase>,d0
    77de:	       movea.l d0,a6
    77e0:	       move.l 64(sp),d1
    77e4:	       move.l 60(sp),d2
    77e8:	       jsr -312(a6)
    77ec:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    77f0:	       move.l 112(sp),52(sp)
    77f6:	       movea.l 1a12a <nowStatus>,a0
    77fc:	       move.l 34(a0),48(sp)
    7802:	       move.l 1a7ac <DOSBase>,d0
    7808:	       movea.l d0,a6
    780a:	       move.l 52(sp),d1
    780e:	       move.l 48(sp),d2
    7812:	       jsr -312(a6)
    7816:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    781a:	       move.l 112(sp),40(sp)
    7820:	       movea.l 1a12a <nowStatus>,a0
    7826:	       move.l 38(a0),36(sp)
    782c:	       move.l 1a7ac <DOSBase>,d0
    7832:	       movea.l d0,a6
    7834:	       move.l 40(sp),d1
    7838:	       move.l 36(sp),d2
    783c:	       jsr -312(a6)
    7840:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7844:	   ,-- bra.s 7888 <saveStatusBars+0x1be>
		FPutC (fp,1);
    7846:	,--|-> move.l 112(sp),16(sp)
    784c:	|  |   moveq #1,d0
    784e:	|  |   move.l d0,12(sp)
    7852:	|  |   move.l 1a7ac <DOSBase>,d0
    7858:	|  |   movea.l d0,a6
    785a:	|  |   move.l 16(sp),d1
    785e:	|  |   move.l 12(sp),d2
    7862:	|  |   jsr -312(a6)
    7866:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    786a:	|  |   movea.l 104(sp),a0
    786e:	|  |   move.l (a0),d0
    7870:	|  |   move.l 112(sp),-(sp)
    7874:	|  |   move.l d0,-(sp)
    7876:	|  |   jsr bd8 <writeString>
    787c:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    787e:	|  |   movea.l 104(sp),a0
    7882:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    7888:	|  '-> tst.l 104(sp)
    788c:	'----- bne.s 7846 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    788e:	       move.l 112(sp),28(sp)
    7894:	       clr.l 24(sp)
    7898:	       move.l 1a7ac <DOSBase>,d0
    789e:	       movea.l d0,a6
    78a0:	       move.l 28(sp),d1
    78a4:	       move.l 24(sp),d2
    78a8:	       jsr -312(a6)
    78ac:	       move.l d0,20(sp)
}
    78b0:	       nop
    78b2:	       move.l (sp)+,d2
    78b4:	       movea.l (sp)+,a6
    78b6:	       lea 100(sp),sp
    78ba:	       rts

000078bc <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    78bc:	movea.l 1a12a <nowStatus>,a0
    78c2:	move.l 4(sp),6(a0)
}
    78c8:	nop
    78ca:	rts

000078cc <setStatusBar>:

void setStatusBar (char * txt) {
    78cc:	    subq.l #4,sp
    78ce:	    move.l a6,-(sp)
    78d0:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    78d2:	    movea.l 1a12a <nowStatus>,a0
    78d8:	    move.l (a0),d0
    78da:	,-- beq.s 790e <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    78dc:	|   movea.l 1a12a <nowStatus>,a0
    78e2:	|   movea.l (a0),a0
    78e4:	|   move.l (a0),8(sp)
    78e8:	|   move.l 1a7a4 <SysBase>,d0
    78ee:	|   movea.l d0,a6
    78f0:	|   movea.l 8(sp),a1
    78f4:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    78f8:	|   movea.l 1a12a <nowStatus>,a0
    78fe:	|   movea.l (a0),a2
    7900:	|   move.l 16(sp),-(sp)
    7904:	|   jsr b8 <copyString>
    790a:	|   addq.l #4,sp
    790c:	|   move.l d0,(a2)
	}
}
    790e:	'-> nop
    7910:	    movea.l (sp)+,a2
    7912:	    movea.l (sp)+,a6
    7914:	    addq.l #4,sp
    7916:	    rts

00007918 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    7918:	       movea.l 1a12a <nowStatus>,a0
    791e:	       move.l (a0),d0
    7920:	,----- beq.s 792e <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7922:	|      movea.l 1a12a <nowStatus>,a0
    7928:	|      movea.l (a0),a0
    792a:	|      move.l (a0),d0
    792c:	|  ,-- bra.s 7934 <statusBarText+0x1c>
	} else {
		return "";
    792e:	'--|-> move.l #99895,d0
	}
    7934:	   '-> rts

00007936 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    7936:	       lea -28(sp),sp
    793a:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    793e:	       move.l 52(sp),-(sp)
    7942:	       jsr 155ca <stringWidth>
    7948:	       addq.l #4,sp
    794a:	       asr.l #1,d0
    794c:	       move.l d0,-(sp)
    794e:	       jsr 1735e <__floatsisf>
    7954:	       addq.l #4,sp
    7956:	       move.l d0,d1
    7958:	       move.l 1a142 <cameraZoom>,d0
    795e:	       move.l d0,-(sp)
    7960:	       move.l d1,-(sp)
    7962:	       jsr 17214 <__divsf3>
    7968:	       addq.l #8,sp
    796a:	       move.l d0,-(sp)
    796c:	       jsr 172f6 <__fixsfsi>
    7972:	       addq.l #4,sp
    7974:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    7978:	       move.l 56(sp),d0
    797c:	       sub.l 44(sp),d0
    7980:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    7984:	       move.l 56(sp),d0
    7988:	       add.l 44(sp),d0
    798c:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    7990:	       moveq #12,d0
    7992:	       move.l d0,32(sp)
    7996:	       clr.l 28(sp)
    799a:	       move.l 1a7a4 <SysBase>,d0
    79a0:	       movea.l d0,a6
    79a2:	       move.l 32(sp),d0
    79a6:	       move.l 28(sp),d1
    79aa:	       jsr -684(a6)
    79ae:	       move.l d0,24(sp)
    79b2:	       move.l 24(sp),d0
    79b6:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    79ba:	       movea.l 1a800 <speech>,a0
    79c0:	       move.l 4(a0),d0
    79c4:	       movea.l 20(sp),a0
    79c8:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    79cc:	       move.l 52(sp),-(sp)
    79d0:	       jsr b8 <copyString>
    79d6:	       addq.l #4,sp
    79d8:	       movea.l 20(sp),a0
    79dc:	       move.l d0,(a0)
	newLine -> x = xx1;
    79de:	       movea.l 20(sp),a0
    79e2:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    79e8:	       movea.l 1a800 <speech>,a0
    79ee:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    79f4:	       moveq #4,d0
    79f6:	       cmp.l 40(sp),d0
    79fa:	   ,-- blt.s 7a1c <addSpeechLine+0xe6>
    79fc:	   |   movea.l 60(sp),a0
    7a00:	   |   move.l (a0),d1
    7a02:	   |   moveq #5,d0
    7a04:	   |   sub.l 40(sp),d0
    7a08:	   |   cmp.l d1,d0
    7a0a:	   +-- ble.s 7a1c <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7a0c:	   |   moveq #5,d0
    7a0e:	   |   sub.l 40(sp),d0
    7a12:	   |   movea.l 60(sp),a0
    7a16:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    7a18:	,--|-- bra.w 7b48 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7a1c:	|  '-> move.l 36(sp),-(sp)
    7a20:	|      jsr 1735e <__floatsisf>
    7a26:	|      addq.l #4,sp
    7a28:	|      move.l d0,d2
    7a2a:	|      move.l 1a6f8 <winWidth>,d0
    7a30:	|      move.l d0,-(sp)
    7a32:	|      jsr 17386 <__floatunsisf>
    7a38:	|      addq.l #4,sp
    7a3a:	|      move.l d0,d1
    7a3c:	|      move.l 1a142 <cameraZoom>,d0
    7a42:	|      move.l d0,-(sp)
    7a44:	|      move.l d1,-(sp)
    7a46:	|      jsr 17214 <__divsf3>
    7a4c:	|      addq.l #8,sp
    7a4e:	|      move.l #1084227584,-(sp)
    7a54:	|      move.l d0,-(sp)
    7a56:	|      jsr 17652 <__subsf3>
    7a5c:	|      addq.l #8,sp
    7a5e:	|      move.l d0,-(sp)
    7a60:	|      move.l d2,-(sp)
    7a62:	|      jsr 17446 <__gesf2>
    7a68:	|      addq.l #8,sp
    7a6a:	|      tst.l d0
    7a6c:	|  ,-- bge.s 7a72 <addSpeechLine+0x13c>
}
    7a6e:	+--|-- bra.w 7b48 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7a72:	|  '-> movea.l 60(sp),a0
    7a76:	|      move.l (a0),d0
    7a78:	|      move.l d0,-(sp)
    7a7a:	|      jsr 1735e <__floatsisf>
    7a80:	|      addq.l #4,sp
    7a82:	|      move.l d0,-(sp)
    7a84:	|      jsr 17280 <__extendsfdf2>
    7a8a:	|      addq.l #4,sp
    7a8c:	|      move.l d0,d4
    7a8e:	|      move.l d1,d5
    7a90:	|      move.l 1a6f8 <winWidth>,d0
    7a96:	|      move.l d0,-(sp)
    7a98:	|      jsr 17386 <__floatunsisf>
    7a9e:	|      addq.l #4,sp
    7aa0:	|      move.l d0,d1
    7aa2:	|      move.l 1a142 <cameraZoom>,d0
    7aa8:	|      move.l d0,-(sp)
    7aaa:	|      move.l d1,-(sp)
    7aac:	|      jsr 17214 <__divsf3>
    7ab2:	|      addq.l #8,sp
    7ab4:	|      move.l d0,-(sp)
    7ab6:	|      jsr 17280 <__extendsfdf2>
    7abc:	|      addq.l #4,sp
    7abe:	|      clr.l -(sp)
    7ac0:	|      move.l #1075052544,-(sp)
    7ac6:	|      move.l d1,-(sp)
    7ac8:	|      move.l d0,-(sp)
    7aca:	|      jsr 175f0 <__subdf3>
    7ad0:	|      lea 16(sp),sp
    7ad4:	|      move.l d0,d2
    7ad6:	|      move.l d1,d3
    7ad8:	|      move.l 36(sp),-(sp)
    7adc:	|      jsr 1731e <__floatsidf>
    7ae2:	|      addq.l #4,sp
    7ae4:	|      move.l d1,-(sp)
    7ae6:	|      move.l d0,-(sp)
    7ae8:	|      move.l d3,-(sp)
    7aea:	|      move.l d2,-(sp)
    7aec:	|      jsr 175f0 <__subdf3>
    7af2:	|      lea 16(sp),sp
    7af6:	|      move.l d1,-(sp)
    7af8:	|      move.l d0,-(sp)
    7afa:	|      move.l d5,-(sp)
    7afc:	|      move.l d4,-(sp)
    7afe:	|      jsr 1747c <__gtdf2>
    7b04:	|      lea 16(sp),sp
    7b08:	|      tst.l d0
    7b0a:	|  ,-- bgt.s 7b0e <addSpeechLine+0x1d8>
}
    7b0c:	+--|-- bra.s 7b48 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7b0e:	|  '-> move.l 1a6f8 <winWidth>,d0
    7b14:	|      move.l d0,-(sp)
    7b16:	|      jsr 17386 <__floatunsisf>
    7b1c:	|      addq.l #4,sp
    7b1e:	|      move.l d0,d1
    7b20:	|      move.l 1a142 <cameraZoom>,d0
    7b26:	|      move.l d0,-(sp)
    7b28:	|      move.l d1,-(sp)
    7b2a:	|      jsr 17214 <__divsf3>
    7b30:	|      addq.l #8,sp
    7b32:	|      move.l d0,-(sp)
    7b34:	|      jsr 172f6 <__fixsfsi>
    7b3a:	|      addq.l #4,sp
    7b3c:	|      subq.l #5,d0
    7b3e:	|      sub.l 36(sp),d0
    7b42:	|      movea.l 60(sp),a0
    7b46:	|      move.l d0,(a0)
}
    7b48:	'----> nop
    7b4a:	       movem.l (sp)+,d2-d5/a6
    7b4e:	       lea 28(sp),sp
    7b52:	       rts

00007b54 <initSpeech>:


void initSpeech () {
    7b54:	       lea -12(sp),sp
    7b58:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    7b5a:	       moveq #20,d0
    7b5c:	       move.l d0,12(sp)
    7b60:	       clr.l 8(sp)
    7b64:	       move.l 1a7a4 <SysBase>,d0
    7b6a:	       movea.l d0,a6
    7b6c:	       move.l 12(sp),d0
    7b70:	       move.l 8(sp),d1
    7b74:	       jsr -684(a6)
    7b78:	       move.l d0,4(sp)
    7b7c:	       move.l 4(sp),d0
    7b80:	       move.l d0,1a800 <speech>
	if (speech) {
    7b86:	       move.l 1a800 <speech>,d0
    7b8c:	,----- beq.s 7bb8 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    7b8e:	|      movea.l 1a800 <speech>,a0
    7b94:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    7b96:	|      movea.l 1a800 <speech>,a0
    7b9c:	|      clr.l 4(a0)
		speech -> speechY = 0;
    7ba0:	|      movea.l 1a800 <speech>,a0
    7ba6:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    7baa:	|      movea.l 1a800 <speech>,a0
    7bb0:	|      moveq #-1,d0
    7bb2:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    7bb6:	|  ,-- bra.s 7bc6 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    7bb8:	'--|-> pea 18c1e <PutChar+0x1250>
    7bbe:	   |   jsr 16f2c <KPrintF>
    7bc4:	   |   addq.l #4,sp
}
    7bc6:	   '-> nop
    7bc8:	       movea.l (sp)+,a6
    7bca:	       lea 12(sp),sp
    7bce:	       rts

00007bd0 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    7bd0:	       movea.l 1a800 <speech>,a0
    7bd6:	       move.l 4(a0),d0
    7bda:	,----- beq.s 7be8 <isThereAnySpeechGoingOn+0x18>
    7bdc:	|      movea.l 1a800 <speech>,a0
    7be2:	|      move.l 16(a0),d0
    7be6:	|  ,-- bra.s 7bea <isThereAnySpeechGoingOn+0x1a>
    7be8:	'--|-> moveq #-1,d0
}
    7bea:	   '-> rts

00007bec <killAllSpeech>:

void killAllSpeech () {
    7bec:	       lea -12(sp),sp
    7bf0:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    7bf2:	       movea.l 1a800 <speech>,a0
    7bf8:	       move.l 12(a0),d0
    7bfc:	       moveq #-1,d1
    7bfe:	       cmp.l d0,d1
    7c00:	   ,-- beq.s 7c0e <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    7c02:	   |   movea.l 1a800 <speech>,a0
    7c08:	   |   moveq #-1,d0
    7c0a:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    7c0e:	   '-> movea.l 1a800 <speech>,a0
    7c14:	       move.l (a0),d0
    7c16:	,----- beq.w 7ca2 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    7c1a:	|      movea.l 1a800 <speech>,a0
    7c20:	|      move.l (a0),d1
    7c22:	|      lea -132(sp),sp
    7c26:	|      move.l sp,d0
    7c28:	|      movea.w #132,a0
    7c2c:	|      move.l a0,-(sp)
    7c2e:	|      move.l d1,-(sp)
    7c30:	|      move.l d0,-(sp)
    7c32:	|      jsr 16ee0 <memcpy>
    7c38:	|      lea 12(sp),sp
    7c3c:	|      jsr a85a <makeSilent>
    7c42:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    7c46:	|      movea.l 1a800 <speech>,a0
    7c4c:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    7c4e:	+----- bra.s 7ca2 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    7c50:	|  ,-> movea.l 1a800 <speech>,a0
    7c56:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    7c5c:	|  |   movea.l 1a800 <speech>,a0
    7c62:	|  |   movea.l 4(a0),a1
    7c66:	|  |   movea.l 1a800 <speech>,a0
    7c6c:	|  |   move.l 4(a1),d0
    7c70:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    7c74:	|  |   movea.l 12(sp),a0
    7c78:	|  |   move.l (a0),8(sp)
    7c7c:	|  |   move.l 1a7a4 <SysBase>,d0
    7c82:	|  |   movea.l d0,a6
    7c84:	|  |   movea.l 8(sp),a1
    7c88:	|  |   jsr -690(a6)
		FreeVec(killMe);
    7c8c:	|  |   move.l 12(sp),4(sp)
    7c92:	|  |   move.l 1a7a4 <SysBase>,d0
    7c98:	|  |   movea.l d0,a6
    7c9a:	|  |   movea.l 4(sp),a1
    7c9e:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    7ca2:	'--|-> movea.l 1a800 <speech>,a0
    7ca8:	   |   move.l 4(a0),d0
    7cac:	   '-- bne.s 7c50 <killAllSpeech+0x64>
	}
}
    7cae:	       nop
    7cb0:	       nop
    7cb2:	       movea.l (sp)+,a6
    7cb4:	       lea 12(sp),sp
    7cb8:	       rts

00007cba <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    7cba:	pea 2 <_start+0x2>
    7cbe:	move.l 8(sp),-(sp)
    7cc2:	jsr 7e1a <setFrames>
    7cc8:	addq.l #8,sp
}
    7cca:	nop
    7ccc:	rts

00007cce <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    7cce:	       lea -52(sp),sp
    7cd2:	       move.l a6,-(sp)
    7cd4:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    7cd6:	       movea.l 64(sp),a0
    7cda:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    7ce0:	       move.l 1a12e <speechSpeed>,d0
    7ce6:	       move.l 68(sp),-(sp)
    7cea:	       move.l d0,-(sp)
    7cec:	       jsr a46 <putFloat>
    7cf2:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    7cf4:	       movea.l 64(sp),a0
    7cf8:	       move.l 8(a0),d0
    7cfc:	       move.l 68(sp),-(sp)
    7d00:	       move.l d0,-(sp)
    7d02:	       jsr 8d0 <put2bytes>
    7d08:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    7d0a:	       movea.l 64(sp),a0
    7d0e:	       move.l 16(a0),d0
    7d12:	       move.l 68(sp),-(sp)
    7d16:	       move.l d0,-(sp)
    7d18:	       jsr 8d0 <put2bytes>
    7d1e:	       addq.l #8,sp
		if (sS -> currentTalker) {
    7d20:	       movea.l 64(sp),a0
    7d24:	       move.l (a0),d0
    7d26:	   ,-- beq.s 7d6a <saveSpeech+0x9c>
			FPutC (fp, 1);
    7d28:	   |   move.l 68(sp),40(sp)
    7d2e:	   |   moveq #1,d0
    7d30:	   |   move.l d0,36(sp)
    7d34:	   |   move.l 1a7ac <DOSBase>,d0
    7d3a:	   |   movea.l d0,a6
    7d3c:	   |   move.l 40(sp),d1
    7d40:	   |   move.l 36(sp),d2
    7d44:	   |   jsr -312(a6)
    7d48:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    7d4c:	   |   movea.l 64(sp),a0
    7d50:	   |   movea.l (a0),a0
    7d52:	   |   movea.l 114(a0),a0
    7d56:	   |   move.l 4(a0),d0
    7d5a:	   |   move.l 68(sp),-(sp)
    7d5e:	   |   move.l d0,-(sp)
    7d60:	   |   jsr 8d0 <put2bytes>
    7d66:	   |   addq.l #8,sp
    7d68:	,--|-- bra.s 7de6 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    7d6a:	|  '-> move.l 68(sp),52(sp)
    7d70:	|      clr.l 48(sp)
    7d74:	|      move.l 1a7ac <DOSBase>,d0
    7d7a:	|      movea.l d0,a6
    7d7c:	|      move.l 52(sp),d1
    7d80:	|      move.l 48(sp),d2
    7d84:	|      jsr -312(a6)
    7d88:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    7d8c:	+----- bra.s 7de6 <saveSpeech+0x118>
			FPutC (fp, 1);
    7d8e:	|  ,-> move.l 68(sp),16(sp)
    7d94:	|  |   moveq #1,d0
    7d96:	|  |   move.l d0,12(sp)
    7d9a:	|  |   move.l 1a7ac <DOSBase>,d0
    7da0:	|  |   movea.l d0,a6
    7da2:	|  |   move.l 16(sp),d1
    7da6:	|  |   move.l 12(sp),d2
    7daa:	|  |   jsr -312(a6)
    7dae:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    7db2:	|  |   movea.l 56(sp),a0
    7db6:	|  |   move.l (a0),d0
    7db8:	|  |   move.l 68(sp),-(sp)
    7dbc:	|  |   move.l d0,-(sp)
    7dbe:	|  |   jsr bd8 <writeString>
    7dc4:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    7dc6:	|  |   movea.l 56(sp),a0
    7dca:	|  |   move.l 8(a0),d0
    7dce:	|  |   move.l 68(sp),-(sp)
    7dd2:	|  |   move.l d0,-(sp)
    7dd4:	|  |   jsr 8d0 <put2bytes>
    7dda:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    7ddc:	|  |   movea.l 56(sp),a0
    7de0:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    7de6:	'--|-> tst.l 56(sp)
    7dea:	   '-- bne.s 7d8e <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    7dec:	       move.l 68(sp),28(sp)
    7df2:	       clr.l 24(sp)
    7df6:	       move.l 1a7ac <DOSBase>,d0
    7dfc:	       movea.l d0,a6
    7dfe:	       move.l 28(sp),d1
    7e02:	       move.l 24(sp),d2
    7e06:	       jsr -312(a6)
    7e0a:	       move.l d0,20(sp)
}
    7e0e:	       nop
    7e10:	       move.l (sp)+,d2
    7e12:	       movea.l (sp)+,a6
    7e14:	       lea 52(sp),sp
    7e18:	       rts

00007e1a <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    7e1a:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    7e1c:	movea.l 8(sp),a0
    7e20:	movea.l 80(a0),a0
    7e24:	move.l (a0),d2
    7e26:	movea.l 8(sp),a0
    7e2a:	movea.l 80(a0),a0
    7e2e:	move.l 4(a0),d0
    7e32:	move.l 12(sp),-(sp)
    7e36:	move.l d0,-(sp)
    7e38:	jsr 178b8 <__mulsi3>
    7e3e:	addq.l #8,sp
    7e40:	move.l d0,d1
    7e42:	movea.l 8(sp),a0
    7e46:	move.l 106(a0),d0
    7e4a:	add.l d1,d0
    7e4c:	add.l d0,d0
    7e4e:	add.l d0,d0
    7e50:	movea.l d2,a0
    7e52:	adda.l d0,a0
    7e54:	move.l (a0),d0
    7e56:	movea.l 8(sp),a0
    7e5a:	move.l d0,72(a0)
}
    7e5e:	nop
    7e60:	move.l (sp)+,d2
    7e62:	rts

00007e64 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    7e64:	       lea -20(sp),sp
    7e68:	       move.l d2,-(sp)
    7e6a:	       move.l 40(sp),d0
    7e6e:	       move.w d0,d0
    7e70:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    7e74:	       movea.l 1a800 <speech>,a0
    7e7a:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    7e80:	       move.l 32(sp),-(sp)
    7e84:	       jsr a344 <findPerson>
    7e8a:	       addq.l #4,sp
    7e8c:	       move.l d0,16(sp)
    if (thisPerson) {
    7e90:	   ,-- beq.s 7eb6 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    7e92:	   |   movea.w 6(sp),a0
    7e96:	   |   move.l a0,-(sp)
    7e98:	   |   move.l 40(sp),-(sp)
    7e9c:	   |   move.l 24(sp),-(sp)
    7ea0:	   |   move.l 40(sp),-(sp)
    7ea4:	   |   jsr 7f7c <wrapSpeechPerson>
    7eaa:	   |   lea 16(sp),sp
    7eae:	   |   move.l d0,20(sp)
    7eb2:	,--|-- bra.w 7f70 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    7eb6:	|  '-> move.l 32(sp),-(sp)
    7eba:	|      jsr 1572a <getRegionForObject>
    7ec0:	|      addq.l #4,sp
    7ec2:	|      move.l d0,12(sp)
        if (thisRegion) {
    7ec6:	|  ,-- beq.s 7f32 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    7ec8:	|  |   movea.l 12(sp),a0
    7ecc:	|  |   movea.l 28(a0),a0
    7ed0:	|  |   move.l 28(a0),d0
    7ed4:	|  |   movea.l 12(sp),a0
    7ed8:	|  |   movea.l 4(a0),a1
    7edc:	|  |   movea.l 12(sp),a0
    7ee0:	|  |   movea.l 28(a0),a0
    7ee4:	|  |   move.l 20(a0),d1
    7ee8:	|  |   movea.l a1,a0
    7eea:	|  |   suba.l d1,a0
    7eec:	|  |   move.l 1a862 <cameraY>,d1
    7ef2:	|  |   movea.l a0,a1
    7ef4:	|  |   suba.l d1,a1
    7ef6:	|  |   movea.l 12(sp),a0
    7efa:	|  |   move.l (a0),d2
    7efc:	|  |   movea.l 12(sp),a0
    7f00:	|  |   move.l 8(a0),d1
    7f04:	|  |   add.l d2,d1
    7f06:	|  |   move.l d1,d2
    7f08:	|  |   asr.l #1,d2
    7f0a:	|  |   move.l 1a85e <cameraX>,d1
    7f10:	|  |   movea.l d2,a0
    7f12:	|  |   suba.l d1,a0
    7f14:	|  |   move.l 36(sp),-(sp)
    7f18:	|  |   move.l d0,-(sp)
    7f1a:	|  |   move.l a1,-(sp)
    7f1c:	|  |   move.l a0,-(sp)
    7f1e:	|  |   move.l 44(sp),-(sp)
    7f22:	|  |   jsr 809a <wrapSpeechXY>
    7f28:	|  |   lea 20(sp),sp
    7f2c:	|  |   move.l d0,20(sp)
    7f30:	+--|-- bra.s 7f70 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    7f32:	|  '-> move.l 32(sp),-(sp)
    7f36:	|      jsr d246 <findObjectType>
    7f3c:	|      addq.l #4,sp
    7f3e:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    7f42:	|      movea.l 8(sp),a0
    7f46:	|      move.l 28(a0),d1
    7f4a:	|      move.l 1a6f8 <winWidth>,d0
    7f50:	|      lsr.l #1,d0
    7f52:	|      move.l 36(sp),-(sp)
    7f56:	|      move.l d1,-(sp)
    7f58:	|      pea a <_start+0xa>
    7f5c:	|      move.l d0,-(sp)
    7f5e:	|      move.l 44(sp),-(sp)
    7f62:	|      jsr 809a <wrapSpeechXY>
    7f68:	|      lea 20(sp),sp
    7f6c:	|      move.l d0,20(sp)
        }
    }
    return i;
    7f70:	'----> move.l 20(sp),d0
}
    7f74:	       move.l (sp)+,d2
    7f76:	       lea 20(sp),sp
    7f7a:	       rts

00007f7c <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    7f7c:	    subq.l #8,sp
    7f7e:	    movem.l d2-d4,-(sp)
    7f82:	    move.l 36(sp),d0
    7f86:	    move.w d0,d0
    7f88:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    7f8c:	    movea.l 28(sp),a0
    7f90:	    movea.l 114(a0),a0
    7f94:	    move.l 28(a0),d2
    7f98:	    movea.l 28(sp),a0
    7f9c:	    move.l 4(a0),d3
    7fa0:	    move.l 1a862 <cameraY>,d0
    7fa6:	    move.l d0,-(sp)
    7fa8:	    jsr 1735e <__floatsisf>
    7fae:	    addq.l #4,sp
    7fb0:	    move.l d0,-(sp)
    7fb2:	    move.l d3,-(sp)
    7fb4:	    jsr 17652 <__subsf3>
    7fba:	    addq.l #8,sp
    7fbc:	    move.l d0,d3
    7fbe:	    movea.l 28(sp),a0
    7fc2:	    move.l 32(a0),d4
    7fc6:	    movea.l 28(sp),a0
    7fca:	    move.l 20(a0),d1
    7fce:	    movea.l 28(sp),a0
    7fd2:	    move.l 24(a0),d0
    7fd6:	    sub.l d0,d1
    7fd8:	    move.l d1,-(sp)
    7fda:	    jsr 1735e <__floatsisf>
    7fe0:	    addq.l #4,sp
    7fe2:	    move.l d0,-(sp)
    7fe4:	    move.l d4,-(sp)
    7fe6:	    jsr 17410 <__mulsf3>
    7fec:	    addq.l #8,sp
    7fee:	    move.l d0,-(sp)
    7ff0:	    move.l d3,-(sp)
    7ff2:	    jsr 17652 <__subsf3>
    7ff8:	    addq.l #8,sp
    7ffa:	    move.l d0,d3
    7ffc:	    movea.l 28(sp),a0
    8000:	    movea.l 114(a0),a0
    8004:	    move.l 20(a0),d0
    8008:	    move.l d0,-(sp)
    800a:	    jsr 1735e <__floatsisf>
    8010:	    addq.l #4,sp
    8012:	    move.l d0,-(sp)
    8014:	    move.l d3,-(sp)
    8016:	    jsr 17652 <__subsf3>
    801c:	    addq.l #8,sp
    801e:	    move.l d0,-(sp)
    8020:	    jsr 172f6 <__fixsfsi>
    8026:	    addq.l #4,sp
    8028:	    move.l d0,d4
    802a:	    movea.l 28(sp),a0
    802e:	    move.l (a0),d3
    8030:	    move.l 1a85e <cameraX>,d0
    8036:	    move.l d0,-(sp)
    8038:	    jsr 1735e <__floatsisf>
    803e:	    addq.l #4,sp
    8040:	    move.l d0,-(sp)
    8042:	    move.l d3,-(sp)
    8044:	    jsr 17652 <__subsf3>
    804a:	    addq.l #8,sp
    804c:	    move.l d0,-(sp)
    804e:	    jsr 172f6 <__fixsfsi>
    8054:	    addq.l #4,sp
    8056:	    move.l 32(sp),-(sp)
    805a:	    move.l d2,-(sp)
    805c:	    move.l d4,-(sp)
    805e:	    move.l d0,-(sp)
    8060:	    move.l 40(sp),-(sp)
    8064:	    jsr 809a <wrapSpeechXY>
    806a:	    lea 20(sp),sp
    806e:	    move.l d0,16(sp)
	if (animPerson) {
    8072:	    tst.w 14(sp)
    8076:	,-- beq.s 808e <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    8078:	|   move.l 28(sp),-(sp)
    807c:	|   jsr 7cba <makeTalker>
    8082:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    8084:	|   movea.l 1a800 <speech>,a0
    808a:	|   move.l 28(sp),(a0)
	}
	return i;
    808e:	'-> move.l 16(sp),d0
}
    8092:	    movem.l (sp)+,d2-d4
    8096:	    addq.l #8,sp
    8098:	    rts

0000809a <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    809a:	                   lea -16(sp),sp
    809e:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    80a2:	                   clr.l 16(sp)
    killAllSpeech();
    80a6:	                   jsr 7bec <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    80ac:	                   move.l 36(sp),-(sp)
    80b0:	                   jsr 139cc <strlen>
    80b6:	                   addq.l #4,sp
    80b8:	                   movea.l d0,a0
    80ba:	                   lea 20(a0),a0
    80be:	                   move.l a0,-(sp)
    80c0:	                   jsr 17386 <__floatunsisf>
    80c6:	                   addq.l #4,sp
    80c8:	                   move.l d0,d1
    80ca:	                   move.l 1a12e <speechSpeed>,d0
    80d0:	                   move.l d0,-(sp)
    80d2:	                   move.l d1,-(sp)
    80d4:	                   jsr 17410 <__mulsf3>
    80da:	                   addq.l #8,sp
    80dc:	                   move.l d0,-(sp)
    80de:	                   jsr 172f6 <__fixsfsi>
    80e4:	                   addq.l #4,sp
    80e6:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    80ea:	               ,-- bgt.s 80f2 <wrapSpeechXY+0x58>
    80ec:	               |   moveq #1,d0
    80ee:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    80f2:	               '-> moveq #-1,d1
    80f4:	                   cmp.l 52(sp),d1
    80f8:	               ,-- beq.s 8138 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    80fa:	               |   move.l 1a872 <speechMode>,d0
    8100:	               +-- ble.s 8138 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    8102:	               |   clr.l -(sp)
    8104:	               |   move.l 56(sp),-(sp)
    8108:	               |   jsr cf10 <startSound>
    810e:	               |   addq.l #8,sp
    8110:	               |   tst.w d0
    8112:	               +-- beq.s 8138 <wrapSpeechXY+0x9e>
                speechTime = -10;
    8114:	               |   moveq #-10,d0
    8116:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    811a:	               |   movea.l 1a800 <speech>,a0
    8120:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    8126:	               |   move.l 1a872 <speechMode>,d0
    812c:	               |   moveq #2,d1
    812e:	               |   cmp.l d0,d1
    8130:	               +-- bne.s 8138 <wrapSpeechXY+0x9e>
    8132:	               |   moveq #-10,d0
    8134:	,--------------|-- bra.w 83be <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    8138:	|              '-> movea.l 1a800 <speech>,a0
    813e:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    8144:	|     ,----------- bra.w 81f8 <wrapSpeechXY+0x15e>
        a = wrap;
    8148:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    814e:	|  |  |        ,-- bra.s 815e <wrapSpeechXY+0xc4>
            a--;
    8150:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    8154:	|  |  |  |     +-- bne.s 815e <wrapSpeechXY+0xc4>
                a = wrap;
    8156:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    815c:	|  |  |  |  ,--|-- bra.s 8170 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    815e:	|  |  |  |  |  '-> move.l 28(sp),d0
    8162:	|  |  |  |  |      movea.l 36(sp),a0
    8166:	|  |  |  |  |      adda.l d0,a0
    8168:	|  |  |  |  |      move.b (a0),d0
    816a:	|  |  |  |  |      cmpi.b #32,d0
    816e:	|  |  |  '--|----- bne.s 8150 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    8170:	|  |  |     '----> move.l 28(sp),d0
    8174:	|  |  |            movea.l 36(sp),a0
    8178:	|  |  |            adda.l d0,a0
    817a:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    817c:	|  |  |            lea 16(sp),a0
    8180:	|  |  |            move.l a0,-(sp)
    8182:	|  |  |            move.l 44(sp),-(sp)
    8186:	|  |  |            move.l 44(sp),-(sp)
    818a:	|  |  |            jsr 7936 <addSpeechLine>
    8190:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    8194:	|  |  |            move.l 28(sp),d0
    8198:	|  |  |            movea.l 36(sp),a0
    819c:	|  |  |            adda.l d0,a0
    819e:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    81a2:	|  |  |            move.l 28(sp),d0
    81a6:	|  |  |            addq.l #1,d0
    81a8:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    81ac:	|  |  |            move.l 44(sp),-(sp)
    81b0:	|  |  |            jsr 1735e <__floatsisf>
    81b6:	|  |  |            addq.l #4,sp
    81b8:	|  |  |            move.l d0,d2
    81ba:	|  |  |            move.l 1a89c <fontHeight>,d0
    81c0:	|  |  |            move.l d0,-(sp)
    81c2:	|  |  |            jsr 1735e <__floatsisf>
    81c8:	|  |  |            addq.l #4,sp
    81ca:	|  |  |            move.l d0,d1
    81cc:	|  |  |            move.l 1a142 <cameraZoom>,d0
    81d2:	|  |  |            move.l d0,-(sp)
    81d4:	|  |  |            move.l d1,-(sp)
    81d6:	|  |  |            jsr 17214 <__divsf3>
    81dc:	|  |  |            addq.l #8,sp
    81de:	|  |  |            move.l d0,-(sp)
    81e0:	|  |  |            move.l d2,-(sp)
    81e2:	|  |  |            jsr 17652 <__subsf3>
    81e8:	|  |  |            addq.l #8,sp
    81ea:	|  |  |            move.l d0,-(sp)
    81ec:	|  |  |            jsr 172f6 <__fixsfsi>
    81f2:	|  |  |            addq.l #4,sp
    81f4:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    81f8:	|  |  '----------> move.l 36(sp),-(sp)
    81fc:	|  |               jsr 139cc <strlen>
    8202:	|  |               addq.l #4,sp
    8204:	|  |               move.l d0,d1
    8206:	|  |               move.l 48(sp),d0
    820a:	|  |               cmp.l d1,d0
    820c:	|  '-------------- bcs.w 8148 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    8210:	|                  lea 16(sp),a0
    8214:	|                  move.l a0,-(sp)
    8216:	|                  move.l 44(sp),-(sp)
    821a:	|                  move.l 44(sp),-(sp)
    821e:	|                  jsr 7936 <addSpeechLine>
    8224:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    8228:	|                  move.l 44(sp),-(sp)
    822c:	|                  jsr 1735e <__floatsisf>
    8232:	|                  addq.l #4,sp
    8234:	|                  move.l d0,d2
    8236:	|                  move.l 1a89c <fontHeight>,d0
    823c:	|                  move.l d0,-(sp)
    823e:	|                  jsr 1735e <__floatsisf>
    8244:	|                  addq.l #4,sp
    8246:	|                  move.l d0,d1
    8248:	|                  move.l 1a142 <cameraZoom>,d0
    824e:	|                  move.l d0,-(sp)
    8250:	|                  move.l d1,-(sp)
    8252:	|                  jsr 17214 <__divsf3>
    8258:	|                  addq.l #8,sp
    825a:	|                  move.l d0,-(sp)
    825c:	|                  move.l d2,-(sp)
    825e:	|                  jsr 17652 <__subsf3>
    8264:	|                  addq.l #8,sp
    8266:	|                  move.l d0,-(sp)
    8268:	|                  jsr 172f6 <__fixsfsi>
    826e:	|                  addq.l #4,sp
    8270:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    8274:	|              ,-- bpl.s 8292 <wrapSpeechXY+0x1f8>
    8276:	|              |   movea.l 1a800 <speech>,a0
    827c:	|              |   move.l 8(a0),d0
    8280:	|              |   movea.l 1a800 <speech>,a0
    8286:	|              |   sub.l 44(sp),d0
    828a:	|              |   move.l d0,8(a0)
    828e:	|           ,--|-- bra.w 8380 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    8292:	|           |  '-> movea.l 1a800 <speech>,a0
    8298:	|           |      move.l 8(a0),d0
    829c:	|           |      move.l d0,-(sp)
    829e:	|           |      jsr 1735e <__floatsisf>
    82a4:	|           |      addq.l #4,sp
    82a6:	|           |      move.l d0,d2
    82a8:	|           |      move.l 1a862 <cameraY>,d0
    82ae:	|           |      move.l d0,-(sp)
    82b0:	|           |      jsr 1735e <__floatsisf>
    82b6:	|           |      addq.l #4,sp
    82b8:	|           |      move.l d0,d3
    82ba:	|           |      move.l 1a6fc <winHeight>,d4
    82c0:	|           |      move.l 1a89c <fontHeight>,d0
    82c6:	|           |      pea 3 <_start+0x3>
    82ca:	|           |      move.l d0,-(sp)
    82cc:	|           |      jsr 17936 <__divsi3>
    82d2:	|           |      addq.l #8,sp
    82d4:	|           |      move.l d4,d1
    82d6:	|           |      sub.l d0,d1
    82d8:	|           |      move.l d1,-(sp)
    82da:	|           |      jsr 17386 <__floatunsisf>
    82e0:	|           |      addq.l #4,sp
    82e2:	|           |      move.l d0,d1
    82e4:	|           |      move.l 1a142 <cameraZoom>,d0
    82ea:	|           |      move.l d0,-(sp)
    82ec:	|           |      move.l d1,-(sp)
    82ee:	|           |      jsr 17214 <__divsf3>
    82f4:	|           |      addq.l #8,sp
    82f6:	|           |      move.l d0,-(sp)
    82f8:	|           |      move.l d3,-(sp)
    82fa:	|           |      jsr 1711a <__addsf3>
    8300:	|           |      addq.l #8,sp
    8302:	|           |      move.l d0,-(sp)
    8304:	|           |      move.l d2,-(sp)
    8306:	|           |      jsr 174ca <__gtsf2>
    830c:	|           |      addq.l #8,sp
    830e:	|           |      tst.l d0
    8310:	|           +----- ble.s 8380 <wrapSpeechXY+0x2e6>
    8312:	|           |      move.l 1a862 <cameraY>,d0
    8318:	|           |      move.l d0,-(sp)
    831a:	|           |      jsr 1735e <__floatsisf>
    8320:	|           |      addq.l #4,sp
    8322:	|           |      move.l d0,d2
    8324:	|           |      move.l 1a6fc <winHeight>,d3
    832a:	|           |      move.l 1a89c <fontHeight>,d0
    8330:	|           |      pea 3 <_start+0x3>
    8334:	|           |      move.l d0,-(sp)
    8336:	|           |      jsr 17936 <__divsi3>
    833c:	|           |      addq.l #8,sp
    833e:	|           |      move.l d3,d1
    8340:	|           |      sub.l d0,d1
    8342:	|           |      move.l d1,-(sp)
    8344:	|           |      jsr 17386 <__floatunsisf>
    834a:	|           |      addq.l #4,sp
    834c:	|           |      move.l d0,d1
    834e:	|           |      move.l 1a142 <cameraZoom>,d0
    8354:	|           |      move.l d0,-(sp)
    8356:	|           |      move.l d1,-(sp)
    8358:	|           |      jsr 17214 <__divsf3>
    835e:	|           |      addq.l #8,sp
    8360:	|           |      move.l d0,-(sp)
    8362:	|           |      move.l d2,-(sp)
    8364:	|           |      jsr 1711a <__addsf3>
    836a:	|           |      addq.l #8,sp
    836c:	|           |      movea.l 1a800 <speech>,a2
    8372:	|           |      move.l d0,-(sp)
    8374:	|           |      jsr 172f6 <__fixsfsi>
    837a:	|           |      addq.l #4,sp
    837c:	|           |      move.l d0,8(a2)

    if (offset) {
    8380:	|           '----> move.l 16(sp),d0
    8384:	|        ,-------- beq.s 83ba <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    8386:	|        |         movea.l 1a800 <speech>,a0
    838c:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    8392:	|        |     ,-- bra.s 83b4 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    8394:	|        |  ,--|-> movea.l 20(sp),a0
    8398:	|        |  |  |   move.l 8(a0),d1
    839c:	|        |  |  |   move.l 16(sp),d0
    83a0:	|        |  |  |   add.l d1,d0
    83a2:	|        |  |  |   movea.l 20(sp),a0
    83a6:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    83aa:	|        |  |  |   movea.l 20(sp),a0
    83ae:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    83b4:	|        |  |  '-> tst.l 20(sp)
    83b8:	|        |  '----- bne.s 8394 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    83ba:	|        '-------> move.l 24(sp),d0
}
    83be:	'----------------> movem.l (sp)+,d2-d4/a2
    83c2:	                   lea 16(sp),sp
    83c6:	                   rts

000083c8 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    83c8:	       lea -12(sp),sp
    83cc:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    83ce:	       move.l 1a804 <zBuffer>,12(sp)

	while(zbuffercursor) {
    83d6:	   ,-- bra.s 83fe <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    83d8:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    83de:	|  |   movea.l 12(sp),a0
    83e2:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    83e8:	|  |   move.l 8(sp),4(sp)
    83ee:	|  |   move.l 1a7a4 <SysBase>,d0
    83f4:	|  |   movea.l d0,a6
    83f6:	|  |   movea.l 4(sp),a1
    83fa:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    83fe:	|  '-> tst.l 12(sp)
    8402:	'----- bne.s 83d8 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8404:	       clr.l 1a804 <zBuffer>
}
    840a:	       nop
    840c:	       movea.l (sp)+,a6
    840e:	       lea 12(sp),sp
    8412:	       rts

00008414 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8414:	                lea -304(sp),sp
    8418:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    841c:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    8420:	                jsr 83c8 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8426:	                move.l 328(sp),d0
    842a:	                move.l d0,-(sp)
    842c:	                jsr 6a20 <openFileFromNum>
    8432:	                addq.l #4,sp
    8434:	                tst.l d0
    8436:	            ,-- bne.s 843e <setZBuffer+0x2a>
    8438:	            |   clr.w d0
    843a:	,-----------|-- bra.w 86fc <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    843e:	|           '-> move.l 1a78c <bigDataFile>,310(sp)
    8446:	|               move.l 1a7ac <DOSBase>,d0
    844c:	|               movea.l d0,a6
    844e:	|               move.l 310(sp),d1
    8452:	|               jsr -306(a6)
    8456:	|               move.l d0,306(sp)
    845a:	|               move.l 306(sp),d0
    845e:	|               moveq #97,d1
    8460:	|               cmp.l d0,d1
    8462:	|        ,----- bne.s 84d6 <setZBuffer+0xc2>
    8464:	|        |      move.l 1a78c <bigDataFile>,302(sp)
    846c:	|        |      move.l 1a7ac <DOSBase>,d0
    8472:	|        |      movea.l d0,a6
    8474:	|        |      move.l 302(sp),d1
    8478:	|        |      jsr -306(a6)
    847c:	|        |      move.l d0,298(sp)
    8480:	|        |      move.l 298(sp),d0
    8484:	|        |      moveq #115,d1
    8486:	|        |      cmp.l d0,d1
    8488:	|        +----- bne.s 84d6 <setZBuffer+0xc2>
    848a:	|        |      move.l 1a78c <bigDataFile>,294(sp)
    8492:	|        |      move.l 1a7ac <DOSBase>,d0
    8498:	|        |      movea.l d0,a6
    849a:	|        |      move.l 294(sp),d1
    849e:	|        |      jsr -306(a6)
    84a2:	|        |      move.l d0,290(sp)
    84a6:	|        |      move.l 290(sp),d0
    84aa:	|        |      moveq #122,d1
    84ac:	|        |      cmp.l d0,d1
    84ae:	|        +----- bne.s 84d6 <setZBuffer+0xc2>
    84b0:	|        |      move.l 1a78c <bigDataFile>,286(sp)
    84b8:	|        |      move.l 1a7ac <DOSBase>,d0
    84be:	|        |      movea.l d0,a6
    84c0:	|        |      move.l 286(sp),d1
    84c4:	|        |      jsr -306(a6)
    84c8:	|        |      move.l d0,282(sp)
    84cc:	|        |      move.l 282(sp),d0
    84d0:	|        |      moveq #98,d1
    84d2:	|        |      cmp.l d0,d1
    84d4:	|        |  ,-- beq.s 84ea <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    84d6:	|        '--|-> pea 18c5b <PutChar+0x128d>
    84dc:	|           |   jsr 16f2c <KPrintF>
    84e2:	|           |   addq.l #4,sp
		 return FALSE;
    84e4:	|           |   clr.w d0
    84e6:	+-----------|-- bra.w 86fc <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    84ea:	|           '-> move.l 1a78c <bigDataFile>,278(sp)
    84f2:	|               move.l 1a7ac <DOSBase>,d0
    84f8:	|               movea.l d0,a6
    84fa:	|               move.l 278(sp),d1
    84fe:	|               jsr -306(a6)
    8502:	|               move.l d0,274(sp)
    8506:	|               move.l 274(sp),d0
    850a:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    850e:	|               moveq #28,d0
    8510:	|               move.l d0,270(sp)
    8514:	|               clr.l 266(sp)
    8518:	|               move.l 1a7a4 <SysBase>,d0
    851e:	|               movea.l d0,a6
    8520:	|               move.l 270(sp),d0
    8524:	|               move.l 266(sp),d1
    8528:	|               jsr -684(a6)
    852c:	|               move.l d0,262(sp)
    8530:	|               move.l 262(sp),d0
    8534:	|               move.l d0,1a804 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    853a:	|               move.l 1a804 <zBuffer>,318(sp)

	while(numelements--)
    8542:	|     ,-------- bra.w 86e2 <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    8546:	|  ,--|-------> move.l 1a78c <bigDataFile>,d0
    854c:	|  |  |         move.l d0,-(sp)
    854e:	|  |  |         jsr 6bc <get2bytes>
    8554:	|  |  |         addq.l #4,sp
    8556:	|  |  |         movea.l 318(sp),a0
    855a:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    855c:	|  |  |         move.l 1a78c <bigDataFile>,d0
    8562:	|  |  |         move.l d0,-(sp)
    8564:	|  |  |         jsr 6bc <get2bytes>
    856a:	|  |  |         addq.l #4,sp
    856c:	|  |  |         movea.l 318(sp),a0
    8570:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    8574:	|  |  |         move.l 1a78c <bigDataFile>,d0
    857a:	|  |  |         move.l d0,-(sp)
    857c:	|  |  |         jsr 6bc <get2bytes>
    8582:	|  |  |         addq.l #4,sp
    8584:	|  |  |         movea.l 318(sp),a0
    8588:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    858c:	|  |  |         move.l 1a78c <bigDataFile>,d0
    8592:	|  |  |         move.l d0,-(sp)
    8594:	|  |  |         jsr 6bc <get2bytes>
    859a:	|  |  |         addq.l #4,sp
    859c:	|  |  |         movea.l 318(sp),a0
    85a0:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    85a4:	|  |  |         move.l 1a78c <bigDataFile>,d0
    85aa:	|  |  |         move.l d0,-(sp)
    85ac:	|  |  |         jsr 6bc <get2bytes>
    85b2:	|  |  |         addq.l #4,sp
    85b4:	|  |  |         movea.l 318(sp),a0
    85b8:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    85bc:	|  |  |         movea.l 318(sp),a0
    85c0:	|  |  |         move.l (a0),d0
    85c2:	|  |  |         movea.l 318(sp),a0
    85c6:	|  |  |         move.l 4(a0),d1
    85ca:	|  |  |         move.l d1,-(sp)
    85cc:	|  |  |         move.l d0,-(sp)
    85ce:	|  |  |         jsr 178b8 <__mulsi3>
    85d4:	|  |  |         addq.l #8,sp
    85d6:	|  |  |         tst.l d0
    85d8:	|  |  |     ,-- bge.s 85dc <setZBuffer+0x1c8>
    85da:	|  |  |     |   addq.l #7,d0
    85dc:	|  |  |     '-> asr.l #3,d0
    85de:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    85e2:	|  |  |         moveq #0,d0
    85e4:	|  |  |         move.w 260(sp),d0
    85e8:	|  |  |         move.l d0,256(sp)
    85ec:	|  |  |         moveq #2,d1
    85ee:	|  |  |         move.l d1,252(sp)
    85f2:	|  |  |         move.l 1a7a4 <SysBase>,d0
    85f8:	|  |  |         movea.l d0,a6
    85fa:	|  |  |         move.l 256(sp),d0
    85fe:	|  |  |         move.l 252(sp),d1
    8602:	|  |  |         jsr -684(a6)
    8606:	|  |  |         move.l d0,248(sp)
    860a:	|  |  |         move.l 248(sp),d0
    860e:	|  |  |         movea.l 318(sp),a0
    8612:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8616:	|  |  |         move.l 1a78c <bigDataFile>,244(sp)
    861e:	|  |  |         movea.l 318(sp),a0
    8622:	|  |  |         move.l 20(a0),240(sp)
    8628:	|  |  |         moveq #1,d0
    862a:	|  |  |         move.l d0,236(sp)
    862e:	|  |  |         moveq #0,d0
    8630:	|  |  |         move.w 260(sp),d0
    8634:	|  |  |         move.l d0,232(sp)
    8638:	|  |  |         move.l 1a7ac <DOSBase>,d0
    863e:	|  |  |         movea.l d0,a6
    8640:	|  |  |         move.l 244(sp),d1
    8644:	|  |  |         move.l 240(sp),d2
    8648:	|  |  |         move.l 236(sp),d3
    864c:	|  |  |         move.l 232(sp),d4
    8650:	|  |  |         jsr -324(a6)
    8654:	|  |  |         move.l d0,228(sp)
    8658:	|  |  |         move.l 228(sp),d0
    865c:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    8660:	|  |  |         tst.w 322(sp)
    8664:	|  |  |  ,----- beq.s 86a0 <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8666:	|  |  |  |      moveq #28,d1
    8668:	|  |  |  |      move.l d1,222(sp)
    866c:	|  |  |  |      clr.l 218(sp)
    8670:	|  |  |  |      move.l 1a7a4 <SysBase>,d0
    8676:	|  |  |  |      movea.l d0,a6
    8678:	|  |  |  |      move.l 222(sp),d0
    867c:	|  |  |  |      move.l 218(sp),d1
    8680:	|  |  |  |      jsr -684(a6)
    8684:	|  |  |  |      move.l d0,214(sp)
    8688:	|  |  |  |      move.l 214(sp),d0
    868c:	|  |  |  |      movea.l 318(sp),a0
    8690:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8694:	|  |  |  |      movea.l 318(sp),a0
    8698:	|  |  |  |      move.l 24(a0),318(sp)
    869e:	|  |  |  |  ,-- bra.s 86a8 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    86a0:	|  |  |  '--|-> movea.l 318(sp),a0
    86a4:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    86a8:	|  |  |     '-> movea.l 318(sp),a0
    86ac:	|  |  |         move.l 4(a0),d0
    86b0:	|  |  |         move.l d0,d0
    86b2:	|  |  |         movea.w d0,a1
    86b4:	|  |  |         movea.l 318(sp),a0
    86b8:	|  |  |         move.l (a0),d0
    86ba:	|  |  |         move.l d0,d0
    86bc:	|  |  |         movea.w d0,a0
    86be:	|  |  |         movea.l 318(sp),a2
    86c2:	|  |  |         move.l 20(a2),d0
    86c6:	|  |  |         clr.l -(sp)
    86c8:	|  |  |         pea 1 <_start+0x1>
    86cc:	|  |  |         move.l a1,-(sp)
    86ce:	|  |  |         move.l a0,-(sp)
    86d0:	|  |  |         pea 18c6f <PutChar+0x12a1>
    86d6:	|  |  |         move.l d0,-(sp)
    86d8:	|  |  |         jsr 17014 <debug_register_bitmap>
    86de:	|  |  |         lea 24(sp),sp
	while(numelements--)
    86e2:	|  |  '-------> move.w 322(sp),d0
    86e6:	|  |            move.w d0,d1
    86e8:	|  |            subq.w #1,d1
    86ea:	|  |            move.w d1,322(sp)
    86ee:	|  |            tst.w d0
    86f0:	|  '----------- bne.w 8546 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    86f4:	|               jsr 6918 <finishAccess>
	
	return TRUE;
    86fa:	|               moveq #1,d0
}
    86fc:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    8700:	                lea 304(sp),sp
    8704:	                rts

00008706 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8706:	          lea -32(sp),sp
    870a:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    870c:	          move.l 40(sp),d0
    8710:	          addq.l #8,d0
    8712:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8716:	          clr.l 32(sp)
    871a:	   ,----- bra.s 8760 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    871c:	,--|----> movea.l 24(sp),a0
    8720:	|  |      movea.l 8(a0),a0
    8724:	|  |      move.l 32(sp),d1
    8728:	|  |      move.l d1,d0
    872a:	|  |      lsl.l #3,d0
    872c:	|  |      sub.l d1,d0
    872e:	|  |      add.l d0,d0
    8730:	|  |      add.l d0,d0
    8732:	|  |      adda.l d0,a0
    8734:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8738:	|  |      movea.l 8(sp),a0
    873c:	|  |      move.l 24(a0),d0
    8740:	|  |  ,-- beq.s 875c <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8742:	|  |  |   movea.l 8(sp),a0
    8746:	|  |  |   move.l 24(a0),4(sp)
    874c:	|  |  |   move.l 1a7a4 <SysBase>,d0
    8752:	|  |  |   movea.l d0,a6
    8754:	|  |  |   movea.l 4(sp),a1
    8758:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    875c:	|  |  '-> addq.l #1,32(sp)
    8760:	|  '----> movea.l 24(sp),a0
    8764:	|         move.l (a0),d0
    8766:	|         cmp.l 32(sp),d0
    876a:	'-------- bgt.s 871c <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    876c:	          movea.l 24(sp),a0
    8770:	          move.l 8(a0),20(sp)
    8776:	          move.l 1a7a4 <SysBase>,d0
    877c:	          movea.l d0,a6
    877e:	          movea.l 20(sp),a1
    8782:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8786:	          move.l 1a8bc <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    878e:	      ,-- bra.s 879a <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    8790:	   ,--|-> movea.l 28(sp),a0
    8794:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    879a:	   |  '-> movea.l 28(sp),a0
    879e:	   |      movea.l 22(a0),a0
    87a2:	   |      move.l (a0),d1
    87a4:	   |      movea.l 40(sp),a0
    87a8:	   |      move.l (a0),d0
    87aa:	   |      cmp.l d1,d0
    87ac:	   |  ,-- beq.s 87b4 <forgetSpriteBank+0xae>
    87ae:	   |  |   tst.l 28(sp)
    87b2:	   '--|-- bne.s 8790 <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    87b4:	      '-> tst.l 28(sp)
    87b8:	   ,----- beq.s 87e2 <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    87ba:	   |      movea.l 40(sp),a0
    87be:	   |      move.l 22(a0),d0
    87c2:	   |      movea.l 28(sp),a0
    87c6:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    87ca:	   |      move.l 40(sp),12(sp)
    87d0:	   |      move.l 1a7a4 <SysBase>,d0
    87d6:	   |      movea.l d0,a6
    87d8:	   |      movea.l 12(sp),a1
    87dc:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    87e0:	   |  ,-- bra.s 8808 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    87e2:	   '--|-> movea.l 1a8bc <allLoadedBanks>,a0
    87e8:	      |   move.l 22(a0),d0
    87ec:	      |   move.l d0,1a8bc <allLoadedBanks>
		FreeVec( forgetme);
    87f2:	      |   move.l 40(sp),16(sp)
    87f8:	      |   move.l 1a7a4 <SysBase>,d0
    87fe:	      |   movea.l d0,a6
    8800:	      |   movea.l 16(sp),a1
    8804:	      |   jsr -690(a6)
}
    8808:	      '-> nop
    880a:	          movea.l (sp)+,a6
    880c:	          lea 32(sp),sp
    8810:	          rts

00008812 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8812:	                      lea -84(sp),sp
    8816:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    881a:	                      pea 18c7b <PutChar+0x12ad>
    8820:	                      jsr 16f2c <KPrintF>
    8826:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8828:	                      clr.l 94(sp)
    882c:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8830:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8834:	                      move.l 108(sp),-(sp)
    8838:	                      jsr 6a20 <openFileFromNum>
    883e:	                      addq.l #4,sp
    8840:	                      tst.l d0
    8842:	                  ,-- bne.s 8858 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8844:	                  |   pea 18c95 <PutChar+0x12c7>
    884a:	                  |   jsr 16f2c <KPrintF>
    8850:	                  |   addq.l #4,sp
		return FALSE;
    8852:	                  |   clr.w d0
    8854:	,-----------------|-- bra.w 8c4c <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8858:	|                 '-> move.l 1a78c <bigDataFile>,d0
    885e:	|                     move.l d0,-(sp)
    8860:	|                     jsr 6bc <get2bytes>
    8866:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8868:	|                     move.l 1a78c <bigDataFile>,82(sp)
    8870:	|                     move.l 1a7ac <DOSBase>,d0
    8876:	|                     movea.l d0,a6
    8878:	|                     move.l 82(sp),d1
    887c:	|                     jsr -306(a6)
    8880:	|                     move.l d0,78(sp)
    8884:	|                     move.l 78(sp),d0
    8888:	|                     movea.l 112(sp),a0
    888c:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8890:	|                     move.l 1a78c <bigDataFile>,d0
    8896:	|                     move.l d0,-(sp)
    8898:	|                     jsr 6bc <get2bytes>
    889e:	|                     addq.l #4,sp
    88a0:	|                     move.l d0,74(sp)

	if (total <= 0) {
    88a4:	|                 ,-- bgt.s 88ba <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    88a6:	|                 |   pea 18cc3 <PutChar+0x12f5>
    88ac:	|                 |   jsr 16f2c <KPrintF>
    88b2:	|                 |   addq.l #4,sp
		return FALSE;
    88b4:	|                 |   clr.w d0
    88b6:	+-----------------|-- bra.w 8c4c <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    88ba:	|                 '-> movea.l 112(sp),a0
    88be:	|                     move.l 4(a0),d0
    88c2:	|                     moveq #3,d1
    88c4:	|                     cmp.l d0,d1
    88c6:	|                 ,-- bne.s 88d4 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    88c8:	|                 |   movea.l 112(sp),a0
    88cc:	|                 |   move.w #1,12(a0)
    88d2:	|              ,--|-- bra.s 88f6 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    88d4:	|              |  '-> movea.l 112(sp),a0
    88d8:	|              |      move.l 4(a0),d0
    88dc:	|              |      moveq #3,d1
    88de:	|              |      cmp.l d0,d1
    88e0:	|              +----- bge.s 88f6 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    88e2:	|              |      pea 18d03 <PutChar+0x1335>
    88e8:	|              |      jsr 16f2c <KPrintF>
    88ee:	|              |      addq.l #4,sp
		return FALSE;
    88f0:	|              |      clr.w d0
    88f2:	+--------------|----- bra.w 8c4c <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    88f6:	|              '----> movea.l 112(sp),a0
    88fa:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    88fe:	|                     move.l 74(sp),d1
    8902:	|                     move.l d1,d0
    8904:	|                     lsl.l #3,d0
    8906:	|                     sub.l d1,d0
    8908:	|                     add.l d0,d0
    890a:	|                     add.l d0,d0
    890c:	|                     move.l d0,70(sp)
    8910:	|                     clr.l 66(sp)
    8914:	|                     move.l 1a7a4 <SysBase>,d0
    891a:	|                     movea.l d0,a6
    891c:	|                     move.l 70(sp),d0
    8920:	|                     move.l 66(sp),d1
    8924:	|                     jsr -684(a6)
    8928:	|                     move.l d0,62(sp)
    892c:	|                     move.l 62(sp),d0
    8930:	|                     movea.l 112(sp),a0
    8934:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8938:	|                     movea.l 112(sp),a0
    893c:	|                     move.l 8(a0),d0
    8940:	|                 ,-- bne.s 8948 <loadSpriteBank+0x136>
    8942:	|                 |   clr.w d0
    8944:	+-----------------|-- bra.w 8c4c <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8948:	|                 '-> moveq #1,d0
    894a:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    894e:	|                     clr.l 100(sp)
    8952:	|     ,-------------- bra.w 8c2a <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8956:	|  ,--|-------------> move.l 1a78c <bigDataFile>,d0
    895c:	|  |  |               move.l d0,-(sp)
    895e:	|  |  |               jsr 6bc <get2bytes>
    8964:	|  |  |               addq.l #4,sp
    8966:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    896a:	|  |  |               movea.l 112(sp),a0
    896e:	|  |  |               movea.l 8(a0),a0
    8972:	|  |  |               move.l 100(sp),d1
    8976:	|  |  |               move.l d1,d0
    8978:	|  |  |               lsl.l #3,d0
    897a:	|  |  |               sub.l d1,d0
    897c:	|  |  |               add.l d0,d0
    897e:	|  |  |               add.l d0,d0
    8980:	|  |  |               adda.l d0,a0
    8982:	|  |  |               moveq #0,d0
    8984:	|  |  |               move.w 60(sp),d0
    8988:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    898a:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    8990:	|  |  |               movea.l 112(sp),a0
    8994:	|  |  |               movea.l 8(a0),a0
    8998:	|  |  |               move.l 100(sp),d1
    899c:	|  |  |               move.l d1,d0
    899e:	|  |  |               lsl.l #3,d0
    89a0:	|  |  |               sub.l d1,d0
    89a2:	|  |  |               add.l d0,d0
    89a4:	|  |  |               add.l d0,d0
    89a6:	|  |  |               lea (0,a0,d0.l),a2
    89aa:	|  |  |               move.l a1,-(sp)
    89ac:	|  |  |               jsr 6bc <get2bytes>
    89b2:	|  |  |               addq.l #4,sp
    89b4:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    89b8:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    89be:	|  |  |               movea.l 112(sp),a0
    89c2:	|  |  |               movea.l 8(a0),a0
    89c6:	|  |  |               move.l 100(sp),d1
    89ca:	|  |  |               move.l d1,d0
    89cc:	|  |  |               lsl.l #3,d0
    89ce:	|  |  |               sub.l d1,d0
    89d0:	|  |  |               add.l d0,d0
    89d2:	|  |  |               add.l d0,d0
    89d4:	|  |  |               lea (0,a0,d0.l),a2
    89d8:	|  |  |               move.l a1,-(sp)
    89da:	|  |  |               jsr 6bc <get2bytes>
    89e0:	|  |  |               addq.l #4,sp
    89e2:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    89e6:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    89ec:	|  |  |               movea.l 112(sp),a0
    89f0:	|  |  |               movea.l 8(a0),a0
    89f4:	|  |  |               move.l 100(sp),d1
    89f8:	|  |  |               move.l d1,d0
    89fa:	|  |  |               lsl.l #3,d0
    89fc:	|  |  |               sub.l d1,d0
    89fe:	|  |  |               add.l d0,d0
    8a00:	|  |  |               add.l d0,d0
    8a02:	|  |  |               lea (0,a0,d0.l),a2
    8a06:	|  |  |               move.l a1,-(sp)
    8a08:	|  |  |               jsr 6bc <get2bytes>
    8a0e:	|  |  |               addq.l #4,sp
    8a10:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8a14:	|  |  |               movea.l 112(sp),a0
    8a18:	|  |  |               move.l 4(a0),d0
    8a1c:	|  |  |               moveq #3,d1
    8a1e:	|  |  |               cmp.l d0,d1
    8a20:	|  |  |     ,-------- beq.w 8abc <loadSpriteBank+0x2aa>
    8a24:	|  |  |     |         moveq #3,d1
    8a26:	|  |  |     |         cmp.l d0,d1
    8a28:	|  |  |  ,--|-------- blt.w 8b62 <loadSpriteBank+0x350>
    8a2c:	|  |  |  |  |         moveq #1,d1
    8a2e:	|  |  |  |  |         cmp.l d0,d1
    8a30:	|  |  |  |  |     ,-- beq.s 8a3c <loadSpriteBank+0x22a>
    8a32:	|  |  |  |  |     |   moveq #2,d1
    8a34:	|  |  |  |  |     |   cmp.l d0,d1
    8a36:	|  |  |  |  |  ,--|-- beq.s 8a68 <loadSpriteBank+0x256>
    8a38:	|  |  |  +--|--|--|-- bra.w 8b62 <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8a3c:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    8a40:	|  |  |  |  |  |      movea.l 8(a0),a0
    8a44:	|  |  |  |  |  |      move.l 100(sp),d1
    8a48:	|  |  |  |  |  |      move.l d1,d0
    8a4a:	|  |  |  |  |  |      lsl.l #3,d0
    8a4c:	|  |  |  |  |  |      sub.l d1,d0
    8a4e:	|  |  |  |  |  |      add.l d0,d0
    8a50:	|  |  |  |  |  |      add.l d0,d0
    8a52:	|  |  |  |  |  |      adda.l d0,a0
    8a54:	|  |  |  |  |  |      move.l 4(a0),d0
    8a58:	|  |  |  |  |  |      addq.l #2,d0
    8a5a:	|  |  |  |  |  |      move.l d0,d0
    8a5c:	|  |  |  |  |  |      add.w d0,d0
    8a5e:	|  |  |  |  |  |      add.w d0,d0
    8a60:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8a64:	|  |  |  +--|--|----- bra.w 8b62 <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8a68:	|  |  |  |  |  '----> movea.l 112(sp),a0
    8a6c:	|  |  |  |  |         movea.l 8(a0),a0
    8a70:	|  |  |  |  |         move.l 100(sp),d1
    8a74:	|  |  |  |  |         move.l d1,d0
    8a76:	|  |  |  |  |         lsl.l #3,d0
    8a78:	|  |  |  |  |         sub.l d1,d0
    8a7a:	|  |  |  |  |         add.l d0,d0
    8a7c:	|  |  |  |  |         add.l d0,d0
    8a7e:	|  |  |  |  |         adda.l d0,a0
    8a80:	|  |  |  |  |         move.l (a0),d0
    8a82:	|  |  |  |  |     ,-- bpl.s 8a86 <loadSpriteBank+0x274>
    8a84:	|  |  |  |  |     |   addq.l #7,d0
    8a86:	|  |  |  |  |     '-> asr.l #3,d0
    8a88:	|  |  |  |  |         move.l d0,d2
    8a8a:	|  |  |  |  |         movea.l 112(sp),a0
    8a8e:	|  |  |  |  |         movea.l 8(a0),a0
    8a92:	|  |  |  |  |         move.l 100(sp),d1
    8a96:	|  |  |  |  |         move.l d1,d0
    8a98:	|  |  |  |  |         lsl.l #3,d0
    8a9a:	|  |  |  |  |         sub.l d1,d0
    8a9c:	|  |  |  |  |         add.l d0,d0
    8a9e:	|  |  |  |  |         add.l d0,d0
    8aa0:	|  |  |  |  |         adda.l d0,a0
    8aa2:	|  |  |  |  |         move.l 4(a0),d0
    8aa6:	|  |  |  |  |         move.l d0,d0
    8aa8:	|  |  |  |  |         move.w d2,d1
    8aaa:	|  |  |  |  |         muls.w d0,d1
    8aac:	|  |  |  |  |         move.w d1,d0
    8aae:	|  |  |  |  |         add.w d0,d0
    8ab0:	|  |  |  |  |         add.w d1,d0
    8ab2:	|  |  |  |  |         add.w d0,d0
    8ab4:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8ab8:	|  |  |  +--|-------- bra.w 8b62 <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8abc:	|  |  |  |  '-------> movea.l 112(sp),a0
    8ac0:	|  |  |  |            movea.l 8(a0),a0
    8ac4:	|  |  |  |            move.l 100(sp),d1
    8ac8:	|  |  |  |            move.l d1,d0
    8aca:	|  |  |  |            lsl.l #3,d0
    8acc:	|  |  |  |            sub.l d1,d0
    8ace:	|  |  |  |            add.l d0,d0
    8ad0:	|  |  |  |            add.l d0,d0
    8ad2:	|  |  |  |            adda.l d0,a0
    8ad4:	|  |  |  |            move.l (a0),d0
    8ad6:	|  |  |  |            andi.l #-2147483633,d0
    8adc:	|  |  |  |        ,-- bpl.s 8ae6 <loadSpriteBank+0x2d4>
    8ade:	|  |  |  |        |   subq.l #1,d0
    8ae0:	|  |  |  |        |   moveq #-16,d1
    8ae2:	|  |  |  |        |   or.l d1,d0
    8ae4:	|  |  |  |        |   addq.l #1,d0
    8ae6:	|  |  |  |        '-> tst.l d0
    8ae8:	|  |  |  |     ,----- ble.s 8aee <loadSpriteBank+0x2dc>
    8aea:	|  |  |  |     |      moveq #2,d0
    8aec:	|  |  |  |     |  ,-- bra.s 8af0 <loadSpriteBank+0x2de>
    8aee:	|  |  |  |     '--|-> clr.w d0
    8af0:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8af4:	|  |  |  |            movea.l 112(sp),a0
    8af8:	|  |  |  |            movea.l 8(a0),a0
    8afc:	|  |  |  |            move.l 100(sp),d1
    8b00:	|  |  |  |            move.l d1,d0
    8b02:	|  |  |  |            lsl.l #3,d0
    8b04:	|  |  |  |            sub.l d1,d0
    8b06:	|  |  |  |            add.l d0,d0
    8b08:	|  |  |  |            add.l d0,d0
    8b0a:	|  |  |  |            adda.l d0,a0
    8b0c:	|  |  |  |            move.l (a0),d0
    8b0e:	|  |  |  |            movea.l d0,a0
    8b10:	|  |  |  |            cmpa.w #0,a0
    8b14:	|  |  |  |        ,-- bge.s 8b1a <loadSpriteBank+0x308>
    8b16:	|  |  |  |        |   lea 15(a0),a0
    8b1a:	|  |  |  |        '-> move.l a0,d0
    8b1c:	|  |  |  |            asr.l #4,d0
    8b1e:	|  |  |  |            add.l d0,d0
    8b20:	|  |  |  |            move.l d0,d1
    8b22:	|  |  |  |            moveq #0,d0
    8b24:	|  |  |  |            move.w 58(sp),d0
    8b28:	|  |  |  |            add.l d1,d0
    8b2a:	|  |  |  |            move.l d0,d2
    8b2c:	|  |  |  |            movea.l 112(sp),a0
    8b30:	|  |  |  |            movea.l 8(a0),a0
    8b34:	|  |  |  |            move.l 100(sp),d1
    8b38:	|  |  |  |            move.l d1,d0
    8b3a:	|  |  |  |            lsl.l #3,d0
    8b3c:	|  |  |  |            sub.l d1,d0
    8b3e:	|  |  |  |            add.l d0,d0
    8b40:	|  |  |  |            add.l d0,d0
    8b42:	|  |  |  |            adda.l d0,a0
    8b44:	|  |  |  |            move.l 4(a0),d0
    8b48:	|  |  |  |            move.l d0,d0
    8b4a:	|  |  |  |            move.w d2,d1
    8b4c:	|  |  |  |            muls.w d0,d1
    8b4e:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8b52:	|  |  |  |            cmpi.w #100,98(sp)
    8b58:	|  |  |  |        ,-- bls.s 8b60 <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8b5a:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8b60:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8b62:	|  |  |  '----------> moveq #0,d0
    8b64:	|  |  |               move.w 98(sp),d0
    8b68:	|  |  |               add.l d0,d0
    8b6a:	|  |  |               move.l d0,52(sp)
    8b6e:	|  |  |               moveq #2,d0
    8b70:	|  |  |               move.l d0,48(sp)
    8b74:	|  |  |               move.l 1a7a4 <SysBase>,d0
    8b7a:	|  |  |               movea.l d0,a6
    8b7c:	|  |  |               move.l 52(sp),d0
    8b80:	|  |  |               move.l 48(sp),d1
    8b84:	|  |  |               jsr -684(a6)
    8b88:	|  |  |               move.l d0,44(sp)
    8b8c:	|  |  |               movea.l 44(sp),a1
    8b90:	|  |  |               movea.l 112(sp),a0
    8b94:	|  |  |               movea.l 8(a0),a0
    8b98:	|  |  |               move.l 100(sp),d1
    8b9c:	|  |  |               move.l d1,d0
    8b9e:	|  |  |               lsl.l #3,d0
    8ba0:	|  |  |               sub.l d1,d0
    8ba2:	|  |  |               add.l d0,d0
    8ba4:	|  |  |               add.l d0,d0
    8ba6:	|  |  |               adda.l d0,a0
    8ba8:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8bac:	|  |  |               move.l 1a78c <bigDataFile>,40(sp)
    8bb4:	|  |  |               movea.l 112(sp),a0
    8bb8:	|  |  |               movea.l 8(a0),a0
    8bbc:	|  |  |               move.l 100(sp),d1
    8bc0:	|  |  |               move.l d1,d0
    8bc2:	|  |  |               lsl.l #3,d0
    8bc4:	|  |  |               sub.l d1,d0
    8bc6:	|  |  |               add.l d0,d0
    8bc8:	|  |  |               add.l d0,d0
    8bca:	|  |  |               adda.l d0,a0
    8bcc:	|  |  |               move.l 24(a0),36(sp)
    8bd2:	|  |  |               moveq #2,d1
    8bd4:	|  |  |               move.l d1,32(sp)
    8bd8:	|  |  |               move.w 98(sp),d0
    8bdc:	|  |  |               lsr.w #1,d0
    8bde:	|  |  |               move.w d0,d0
    8be0:	|  |  |               andi.l #65535,d0
    8be6:	|  |  |               move.l d0,28(sp)
    8bea:	|  |  |               move.l 1a7ac <DOSBase>,d0
    8bf0:	|  |  |               movea.l d0,a6
    8bf2:	|  |  |               move.l 40(sp),d1
    8bf6:	|  |  |               move.l 36(sp),d2
    8bfa:	|  |  |               move.l 32(sp),d3
    8bfe:	|  |  |               move.l 28(sp),d4
    8c02:	|  |  |               jsr -324(a6)
    8c06:	|  |  |               move.l d0,24(sp)
    8c0a:	|  |  |               move.l 24(sp),d0
    8c0e:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8c12:	|  |  |           ,-- bne.s 8c26 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8c14:	|  |  |           |   pea 18d38 <PutChar+0x136a>
    8c1a:	|  |  |           |   jsr 16f2c <KPrintF>
    8c20:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8c22:	|  |  |           |   clr.w d0
    8c24:	+--|--|-----------|-- bra.s 8c4c <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    8c26:	|  |  |           '-> addq.l #1,100(sp)
    8c2a:	|  |  '-------------> move.l 100(sp),d0
    8c2e:	|  |                  cmp.l 74(sp),d0
    8c32:	|  '----------------- blt.w 8956 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    8c36:	|                     jsr 6918 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    8c3c:	|                     pea 18d6b <PutChar+0x139d>
    8c42:	|                     jsr 16f2c <KPrintF>
    8c48:	|                     addq.l #4,sp
	return TRUE;
    8c4a:	|                     moveq #1,d0
}
    8c4c:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    8c50:	                      lea 84(sp),sp
    8c54:	                      rts

00008c56 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8c56:	                   lea -16(sp),sp
    8c5a:	                   move.l d2,-(sp)
    8c5c:	                   move.l 32(sp),d0
    8c60:	                   move.w d0,d0
    8c62:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    8c66:	                   movea.l 28(sp),a0
    8c6a:	                   move.l (a0),d2
    8c6c:	                   movea.l 24(sp),a0
    8c70:	                   move.l 8(a0),d0
    8c74:	                   move.l d0,-(sp)
    8c76:	                   jsr 1735e <__floatsisf>
    8c7c:	                   addq.l #4,sp
    8c7e:	                   move.l d0,-(sp)
    8c80:	                   move.l d2,-(sp)
    8c82:	                   jsr 17652 <__subsf3>
    8c88:	                   addq.l #8,sp
    8c8a:	                   move.l d0,-(sp)
    8c8c:	                   jsr 172f6 <__fixsfsi>
    8c92:	                   addq.l #4,sp
    8c94:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    8c98:	                   movea.l 28(sp),a0
    8c9c:	                   move.l 4(a0),d2
    8ca0:	                   movea.l 24(sp),a0
    8ca4:	                   move.l 12(a0),d0
    8ca8:	                   move.l d0,-(sp)
    8caa:	                   jsr 1735e <__floatsisf>
    8cb0:	                   addq.l #4,sp
    8cb2:	                   move.l d0,-(sp)
    8cb4:	                   move.l d2,-(sp)
    8cb6:	                   jsr 17652 <__subsf3>
    8cbc:	                   addq.l #8,sp
    8cbe:	                   move.l d0,-(sp)
    8cc0:	                   jsr 172f6 <__fixsfsi>
    8cc6:	                   addq.l #4,sp
    8cc8:	                   move.w d0,8(sp)

	if( x < 0)
    8ccc:	                   tst.w 18(sp)
    8cd0:	               ,-- bge.s 8d04 <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    8cd2:	               |   movea.l 28(sp),a0
    8cd6:	               |   move.l (a0),d2
    8cd8:	               |   movea.l 24(sp),a0
    8cdc:	               |   move.l 8(a0),d0
    8ce0:	               |   move.l d0,-(sp)
    8ce2:	               |   jsr 1735e <__floatsisf>
    8ce8:	               |   addq.l #4,sp
    8cea:	               |   move.l d0,-(sp)
    8cec:	               |   move.l d2,-(sp)
    8cee:	               |   jsr 17652 <__subsf3>
    8cf4:	               |   addq.l #8,sp
    8cf6:	               |   move.l d0,-(sp)
    8cf8:	               |   jsr 172f6 <__fixsfsi>
    8cfe:	               |   addq.l #4,sp
    8d00:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    8d04:	               '-> movea.w 8(sp),a1
    8d08:	                   movea.w 18(sp),a0
    8d0c:	                   pea 1 <_start+0x1>
    8d10:	                   move.l a1,-(sp)
    8d12:	                   move.l a0,-(sp)
    8d14:	                   move.l 40(sp),-(sp)
    8d18:	                   move.l 40(sp),-(sp)
    8d1c:	                   jsr 2bb6 <CstScaleSprite>
    8d22:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8d26:	                   movea.l 28(sp),a0
    8d2a:	                   move.l 118(a0),d0
    8d2e:	                   moveq #8,d1
    8d30:	                   and.l d1,d0
    8d32:	   ,-------------- beq.w 8dfe <scaleSprite+0x1a8>
		if (single->xhot < 0)
    8d36:	   |               movea.l 24(sp),a0
    8d3a:	   |               move.l 8(a0),d0
    8d3e:	   |  ,----------- bpl.s 8d7a <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8d40:	   |  |            move.w 18(sp),d0
    8d44:	   |  |            tst.w 6(sp)
    8d48:	   |  |     ,----- beq.s 8d62 <scaleSprite+0x10c>
    8d4a:	   |  |     |      movea.l 24(sp),a0
    8d4e:	   |  |     |      move.l (a0),d1
    8d50:	   |  |     |      move.l d1,d2
    8d52:	   |  |     |      movea.l 24(sp),a0
    8d56:	   |  |     |      move.l 8(a0),d1
    8d5a:	   |  |     |      move.l d1,d1
    8d5c:	   |  |     |      movea.w d2,a0
    8d5e:	   |  |     |      suba.w d1,a0
    8d60:	   |  |     |  ,-- bra.s 8d70 <scaleSprite+0x11a>
    8d62:	   |  |     '--|-> movea.l 24(sp),a0
    8d66:	   |  |        |   move.l 8(a0),d1
    8d6a:	   |  |        |   move.l d1,d1
    8d6c:	   |  |        |   movea.w d1,a0
    8d6e:	   |  |        |   addq.w #1,a0
    8d70:	   |  |        '-> move.w d0,d1
    8d72:	   |  |            sub.w a0,d1
    8d74:	   |  |            move.w d1,16(sp)
    8d78:	   |  |  ,-------- bra.s 8db2 <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8d7a:	   |  '--|-------> move.w 18(sp),d1
    8d7e:	   |     |         tst.w 6(sp)
    8d82:	   |     |  ,----- beq.s 8da0 <scaleSprite+0x14a>
    8d84:	   |     |  |      movea.l 24(sp),a0
    8d88:	   |     |  |      move.l (a0),d0
    8d8a:	   |     |  |      move.l d0,d2
    8d8c:	   |     |  |      movea.l 24(sp),a0
    8d90:	   |     |  |      move.l 8(a0),d0
    8d94:	   |     |  |      move.l d0,d0
    8d96:	   |     |  |      movea.w d2,a0
    8d98:	   |     |  |      suba.w d0,a0
    8d9a:	   |     |  |      move.w a0,d0
    8d9c:	   |     |  |      subq.w #1,d0
    8d9e:	   |     |  |  ,-- bra.s 8daa <scaleSprite+0x154>
    8da0:	   |     |  '--|-> movea.l 24(sp),a0
    8da4:	   |     |     |   move.l 8(a0),d0
    8da8:	   |     |     |   move.l d0,d0
    8daa:	   |     |     '-> movea.w d1,a0
    8dac:	   |     |         suba.w d0,a0
    8dae:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8db2:	   |     '-------> movea.l 28(sp),a0
    8db6:	   |               move.l 24(a0),d0
    8dba:	   |               move.l d0,d1
    8dbc:	   |               movea.l 24(sp),a0
    8dc0:	   |               move.l 12(a0),d0
    8dc4:	   |               move.l d0,d0
    8dc6:	   |               sub.w d0,d1
    8dc8:	   |               move.w 8(sp),d0
    8dcc:	   |               movea.w d1,a0
    8dce:	   |               adda.w d0,a0
    8dd0:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    8dd4:	   |               movea.l 24(sp),a0
    8dd8:	   |               move.l (a0),d0
    8dda:	   |               move.l d0,d0
    8ddc:	   |               move.w 16(sp),d1
    8de0:	   |               add.w d0,d1
    8de2:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    8de6:	   |               movea.l 24(sp),a0
    8dea:	   |               move.l 4(a0),d0
    8dee:	   |               move.l d0,d0
    8df0:	   |               movea.w 14(sp),a0
    8df4:	   |               adda.w d0,a0
    8df6:	   |               move.w a0,10(sp)
    8dfa:	,--|-------------- bra.w 8ee6 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    8dfe:	|  '-------------> move.w 18(sp),d1
    8e02:	|                  move.l 1a85e <cameraX>,d0
    8e08:	|                  move.l d0,d0
    8e0a:	|                  sub.w d0,d1
    8e0c:	|                  move.w d1,18(sp)
		y -= cameraY;
    8e10:	|                  move.w 8(sp),d1
    8e14:	|                  move.l 1a862 <cameraY>,d0
    8e1a:	|                  move.l d0,d0
    8e1c:	|                  sub.w d0,d1
    8e1e:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    8e22:	|                  movea.l 24(sp),a0
    8e26:	|                  move.l 8(a0),d0
    8e2a:	|     ,----------- bpl.s 8e66 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8e2c:	|     |            move.w 18(sp),d0
    8e30:	|     |            tst.w 6(sp)
    8e34:	|     |     ,----- beq.s 8e4e <scaleSprite+0x1f8>
    8e36:	|     |     |      movea.l 24(sp),a0
    8e3a:	|     |     |      move.l (a0),d1
    8e3c:	|     |     |      move.l d1,d2
    8e3e:	|     |     |      movea.l 24(sp),a0
    8e42:	|     |     |      move.l 8(a0),d1
    8e46:	|     |     |      move.l d1,d1
    8e48:	|     |     |      movea.w d2,a0
    8e4a:	|     |     |      suba.w d1,a0
    8e4c:	|     |     |  ,-- bra.s 8e5c <scaleSprite+0x206>
    8e4e:	|     |     '--|-> movea.l 24(sp),a0
    8e52:	|     |        |   move.l 8(a0),d1
    8e56:	|     |        |   move.l d1,d1
    8e58:	|     |        |   movea.w d1,a0
    8e5a:	|     |        |   addq.w #1,a0
    8e5c:	|     |        '-> move.w d0,d1
    8e5e:	|     |            sub.w a0,d1
    8e60:	|     |            move.w d1,16(sp)
    8e64:	|     |  ,-------- bra.s 8e9e <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8e66:	|     '--|-------> move.w 18(sp),d1
    8e6a:	|        |         tst.w 6(sp)
    8e6e:	|        |  ,----- beq.s 8e8c <scaleSprite+0x236>
    8e70:	|        |  |      movea.l 24(sp),a0
    8e74:	|        |  |      move.l (a0),d0
    8e76:	|        |  |      move.l d0,d2
    8e78:	|        |  |      movea.l 24(sp),a0
    8e7c:	|        |  |      move.l 8(a0),d0
    8e80:	|        |  |      move.l d0,d0
    8e82:	|        |  |      movea.w d2,a0
    8e84:	|        |  |      suba.w d0,a0
    8e86:	|        |  |      move.w a0,d0
    8e88:	|        |  |      subq.w #1,d0
    8e8a:	|        |  |  ,-- bra.s 8e96 <scaleSprite+0x240>
    8e8c:	|        |  '--|-> movea.l 24(sp),a0
    8e90:	|        |     |   move.l 8(a0),d0
    8e94:	|        |     |   move.l d0,d0
    8e96:	|        |     '-> movea.w d1,a0
    8e98:	|        |         suba.w d0,a0
    8e9a:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8e9e:	|        '-------> movea.l 28(sp),a0
    8ea2:	|                  move.l 24(a0),d0
    8ea6:	|                  move.l d0,d1
    8ea8:	|                  movea.l 24(sp),a0
    8eac:	|                  move.l 12(a0),d0
    8eb0:	|                  move.l d0,d0
    8eb2:	|                  sub.w d0,d1
    8eb4:	|                  move.w 8(sp),d0
    8eb8:	|                  movea.w d1,a0
    8eba:	|                  adda.w d0,a0
    8ebc:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    8ec0:	|                  movea.l 24(sp),a0
    8ec4:	|                  move.l (a0),d0
    8ec6:	|                  move.l d0,d0
    8ec8:	|                  move.w 16(sp),d1
    8ecc:	|                  add.w d0,d1
    8ece:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    8ed2:	|                  movea.l 24(sp),a0
    8ed6:	|                  move.l 4(a0),d0
    8eda:	|                  move.l d0,d0
    8edc:	|                  movea.w 14(sp),a0
    8ee0:	|                  adda.w d0,a0
    8ee2:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    8ee6:	'----------------> move.l 1a760 <input+0xa>,d1
    8eec:	                   moveq #0,d0
    8eee:	                   move.w 16(sp),d0
    8ef2:	                   cmp.l d1,d0
    8ef4:	            ,----- bgt.s 8f2a <scaleSprite+0x2d4>
    8ef6:	            |      move.l 1a760 <input+0xa>,d1
    8efc:	            |      moveq #0,d0
    8efe:	            |      move.w 12(sp),d0
    8f02:	            |      cmp.l d1,d0
    8f04:	            +----- blt.s 8f2a <scaleSprite+0x2d4>
    8f06:	            |      move.l 1a764 <input+0xe>,d1
    8f0c:	            |      moveq #0,d0
    8f0e:	            |      move.w 14(sp),d0
    8f12:	            |      cmp.l d1,d0
    8f14:	            +----- bgt.s 8f2a <scaleSprite+0x2d4>
    8f16:	            |      move.l 1a764 <input+0xe>,d1
    8f1c:	            |      moveq #0,d0
    8f1e:	            |      move.w 10(sp),d0
    8f22:	            |      cmp.l d1,d0
    8f24:	            +----- blt.s 8f2a <scaleSprite+0x2d4>
		return TRUE;
    8f26:	            |      moveq #1,d0
    8f28:	            |  ,-- bra.s 8f2c <scaleSprite+0x2d6>
	}
	return FALSE;
    8f2a:	            '--|-> clr.w d0
    8f2c:	               '-> move.l (sp)+,d2
    8f2e:	                   lea 16(sp),sp
    8f32:	                   rts

00008f34 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    8f34:	    move.l 4(sp),d0
    8f38:	,-- bpl.s 8f3c <TF_abs+0x8>
    8f3a:	|   neg.l d0
}
    8f3c:	'-> rts

00008f3e <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    8f3e:	             lea -28(sp),sp
    8f42:	             move.l a6,-(sp)
    8f44:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    8f46:	             move.l #132,28(sp)
    8f4e:	             clr.l 24(sp)
    8f52:	             move.l 1a7a4 <SysBase>,d0
    8f58:	             movea.l d0,a6
    8f5a:	             move.l 28(sp),d0
    8f5e:	             move.l 24(sp),d1
    8f62:	             jsr -684(a6)
    8f66:	             move.l d0,20(sp)
    8f6a:	             move.l 20(sp),d0
    8f6e:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    8f72:	         ,-- bne.s 8f7a <addPerson+0x3c>
    8f74:	         |   clr.w d0
    8f76:	,--------|-- bra.w 91aa <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    8f7a:	|        '-> move.l 48(sp),-(sp)
    8f7e:	|            jsr d336 <loadObjectType>
    8f84:	|            addq.l #4,sp
    8f86:	|            movea.l 16(sp),a0
    8f8a:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    8f8e:	|            movea.l 16(sp),a0
    8f92:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    8f9a:	|            movea.l 16(sp),a0
    8f9e:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    8fa2:	|            movea.l 16(sp),a0
    8fa6:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    8faa:	|            move.l 44(sp),-(sp)
    8fae:	|            jsr 1735e <__floatsisf>
    8fb4:	|            addq.l #4,sp
    8fb6:	|            move.l d0,d2
    8fb8:	|            move.l 40(sp),-(sp)
    8fbc:	|            jsr 1735e <__floatsisf>
    8fc2:	|            addq.l #4,sp
    8fc4:	|            move.l d2,-(sp)
    8fc6:	|            move.l d0,-(sp)
    8fc8:	|            move.l 24(sp),-(sp)
    8fcc:	|            jsr aa8c <moveAndScale>
    8fd2:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    8fd6:	|            movea.l 16(sp),a0
    8fda:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    8fde:	|            movea.l 16(sp),a0
    8fe2:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    8fe8:	|            movea.l 16(sp),a0
    8fec:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    8ff2:	|            movea.l 16(sp),a0
    8ff6:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    8ffa:	|            movea.l 16(sp),a0
    8ffe:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9002:	|            movea.l 16(sp),a0
    9006:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    900c:	|            movea.l 16(sp),a0
    9010:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9014:	|            movea.l 16(sp),a0
    9018:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9020:	|            movea.l 16(sp),a0
    9024:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    902c:	|            movea.l 16(sp),a0
    9030:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9034:	|            movea.l 16(sp),a0
    9038:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    903c:	|            movea.l 16(sp),a0
    9040:	|            movea.l 114(a0),a0
    9044:	|            move.l 24(a0),d0
    9048:	|            movea.l 16(sp),a0
    904c:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9050:	|            movea.l 16(sp),a0
    9054:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9058:	|            movea.l 16(sp),a0
    905c:	|            movea.l 114(a0),a0
    9060:	|            move.l 32(a0),d0
    9064:	|            movea.l 16(sp),a0
    9068:	|            move.l d0,122(a0)
    newPerson->r = 0;
    906c:	|            movea.l 16(sp),a0
    9070:	|            clr.b 126(a0)
    newPerson->g = 0;
    9074:	|            movea.l 16(sp),a0
    9078:	|            clr.b 127(a0)
    newPerson->b = 0;
    907c:	|            movea.l 16(sp),a0
    9080:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    9084:	|            movea.l 16(sp),a0
    9088:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    908c:	|            movea.l 16(sp),a0
    9090:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    9094:	|            movea.l 16(sp),a0
    9098:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    909e:	|            clr.l -(sp)
    90a0:	|            move.l 20(sp),-(sp)
    90a4:	|            jsr 7e1a <setFrames>
    90aa:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    90ac:	|            movea.l 52(sp),a0
    90b0:	|            movea.l (a0),a0
    90b2:	|            movea.l (a0),a0
    90b4:	|            movea.l 4(a0),a0
    90b8:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    90bc:	|     ,----- bpl.s 90c6 <addPerson+0x188>
    90be:	|     |      move.l 12(sp),d0
    90c2:	|     |      neg.l d0
    90c4:	|     |  ,-- bra.s 90c8 <addPerson+0x18a>
    90c6:	|     '--|-> moveq #1,d0
    90c8:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    90cc:	|            movea.l 52(sp),a0
    90d0:	|            movea.l (a0),a0
    90d2:	|            movea.l (a0),a0
    90d4:	|            movea.l (a0),a0
    90d6:	|            move.l 8(a0),d0
    90da:	|            cmp.l 8(sp),d0
    90de:	|     ,----- bgt.s 9110 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    90e0:	|     |      tst.l 12(sp)
    90e4:	|     |  ,-- bge.s 90f2 <addPerson+0x1b4>
            newPerson->height = 5;
    90e6:	|     |  |   movea.l 16(sp),a0
    90ea:	|     |  |   moveq #5,d0
    90ec:	|     |  |   move.l d0,20(a0)
    90f0:	|  ,--|--|-- bra.s 913c <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    90f2:	|  |  |  '-> movea.l 52(sp),a0
    90f6:	|  |  |      movea.l (a0),a0
    90f8:	|  |  |      movea.l (a0),a0
    90fa:	|  |  |      movea.l (a0),a0
    90fc:	|  |  |      movea.l 16(a0),a0
    9100:	|  |  |      move.l 12(a0),d0
    9104:	|  |  |      addq.l #5,d0
    9106:	|  |  |      movea.l 16(sp),a0
    910a:	|  |  |      move.l d0,20(a0)
    910e:	|  +--|----- bra.s 913c <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9110:	|  |  '----> movea.l 52(sp),a0
    9114:	|  |         movea.l (a0),a0
    9116:	|  |         movea.l (a0),a0
    9118:	|  |         movea.l (a0),a0
    911a:	|  |         movea.l 16(a0),a0
    911e:	|  |         move.l 8(sp),d1
    9122:	|  |         move.l d1,d0
    9124:	|  |         lsl.l #3,d0
    9126:	|  |         sub.l d1,d0
    9128:	|  |         add.l d0,d0
    912a:	|  |         add.l d0,d0
    912c:	|  |         adda.l d0,a0
    912e:	|  |         move.l 12(a0),d0
    9132:	|  |         addq.l #5,d0
    9134:	|  |         movea.l 16(sp),a0
    9138:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    913c:	|  '-------> move.l #108552,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9144:	|        ,-- bra.s 9154 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9146:	|     ,--|-> movea.l 32(sp),a0
    914a:	|     |  |   move.l (a0),d0
    914c:	|     |  |   moveq #36,d1
    914e:	|     |  |   add.l d0,d1
    9150:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9154:	|     |  '-> movea.l 32(sp),a0
    9158:	|     |      move.l (a0),d0
    915a:	|     |  ,-- beq.s 9182 <addPerson+0x244>
    915c:	|     |  |   movea.l 32(sp),a0
    9160:	|     |  |   movea.l (a0),a0
    9162:	|     |  |   move.l 4(a0),d2
    9166:	|     |  |   move.l 44(sp),-(sp)
    916a:	|     |  |   jsr 1735e <__floatsisf>
    9170:	|     |  |   addq.l #4,sp
    9172:	|     |  |   move.l d0,-(sp)
    9174:	|     |  |   move.l d2,-(sp)
    9176:	|     |  |   jsr 17584 <__ltsf2>
    917c:	|     |  |   addq.l #8,sp
    917e:	|     |  |   tst.l d0
    9180:	|     '--|-- blt.s 9146 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9182:	|        '-> movea.l 32(sp),a0
    9186:	|            move.l (a0),d0
    9188:	|            movea.l 16(sp),a0
    918c:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    9190:	|            movea.l 32(sp),a0
    9194:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    9198:	|            movea.l 16(sp),a0
    919c:	|            move.l 114(a0),d0
    91a0:	|            sne d0
    91a2:	|            neg.b d0
    91a4:	|            move.b d0,d0
    91a6:	|            andi.w #255,d0
}
    91aa:	'----------> move.l (sp)+,d2
    91ac:	             movea.l (sp)+,a6
    91ae:	             lea 28(sp),sp
    91b2:	             rts

000091b4 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    91b4:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    91b6:	       move.l 8(sp),-(sp)
    91ba:	       jsr a344 <findPerson>
    91c0:	       addq.l #4,sp
    91c2:	       move.l d0,(sp)
    if (moveMe) {
    91c4:	,----- beq.s 91f8 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    91c6:	|      movea.l (sp),a0
    91c8:	|      move.l 68(a0),d0
    91cc:	|  ,-- beq.s 91de <animatePerson+0x2a>
    91ce:	|  |   movea.l (sp),a0
    91d0:	|  |   move.l 68(a0),d0
    91d4:	|  |   move.l d0,-(sp)
    91d6:	|  |   jsr 43bc <abortFunction>
    91dc:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    91de:	|  '-> movea.l (sp),a0
    91e0:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    91e4:	|      movea.l (sp),a0
    91e6:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    91ea:	|      movea.l (sp),a0
    91ec:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    91f0:	|      movea.l (sp),a0
    91f2:	|      move.l 12(sp),72(a0)
    }
}
    91f8:	'----> nop
    91fa:	       addq.l #4,sp
    91fc:	       rts

000091fe <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    91fe:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9200:	       move.l 8(sp),-(sp)
    9204:	       jsr a344 <findPerson>
    920a:	       addq.l #4,sp
    920c:	       move.l d0,(sp)
    if (moveMe) {
    920e:	,----- beq.s 9250 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9210:	|      movea.l (sp),a0
    9212:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9216:	|      movea.l (sp),a0
    9218:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    921e:	|      move.l (sp),-(sp)
    9220:	|      jsr ac1a <rethinkAngle>
    9226:	|      addq.l #4,sp
        if (moveMe->walking) {
    9228:	|      movea.l (sp),a0
    922a:	|      move.w 64(a0),d0
    922e:	|  ,-- beq.s 9242 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9230:	|  |   pea 1 <_start+0x1>
    9234:	|  |   move.l 4(sp),-(sp)
    9238:	|  |   jsr 7e1a <setFrames>
    923e:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9240:	+--|-- bra.s 9250 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9242:	|  '-> clr.l -(sp)
    9244:	|      move.l 4(sp),-(sp)
    9248:	|      jsr 7e1a <setFrames>
    924e:	|      addq.l #8,sp
}
    9250:	'----> nop
    9252:	       addq.l #4,sp
    9254:	       rts

00009256 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9256:	             lea -36(sp),sp
    925a:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    925c:	             movea.l 44(sp),a0
    9260:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9266:	             moveq #12,d0
    9268:	             move.l d0,28(sp)
    926c:	             clr.l 24(sp)
    9270:	             move.l 1a7a4 <SysBase>,d0
    9276:	             movea.l d0,a6
    9278:	             move.l 28(sp),d0
    927c:	             move.l 24(sp),d1
    9280:	             jsr -684(a6)
    9284:	             move.l d0,20(sp)
    9288:	             move.l 20(sp),d0
    928c:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9290:	         ,-- bne.s 92a6 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    9292:	         |   pea 18d85 <PutChar+0x13b7>
    9298:	         |   jsr 16f2c <KPrintF>
    929e:	         |   addq.l #4,sp
		return NULL;
    92a0:	         |   moveq #0,d0
    92a2:	,--------|-- bra.w 93f8 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    92a6:	|        '-> movea.l 44(sp),a0
    92aa:	|            move.l (a0),d0
    92ac:	|            movea.l 16(sp),a0
    92b0:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    92b2:	|            movea.l 16(sp),a0
    92b6:	|            movea.l (a0),a0
    92b8:	|            move.l 4(a0),d0
    92bc:	|            addq.l #1,d0
    92be:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    92c2:	|            movea.l 16(sp),a0
    92c6:	|            move.l 32(sp),8(a0)

	if (num) {
    92cc:	|  ,-------- beq.w 93ec <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    92d0:	|  |         move.l 32(sp),d1
    92d4:	|  |         move.l d1,d0
    92d6:	|  |         add.l d0,d0
    92d8:	|  |         add.l d1,d0
    92da:	|  |         add.l d0,d0
    92dc:	|  |         add.l d0,d0
    92de:	|  |         move.l d0,12(sp)
    92e2:	|  |         clr.l 8(sp)
    92e6:	|  |         move.l 1a7a4 <SysBase>,d0
    92ec:	|  |         movea.l d0,a6
    92ee:	|  |         move.l 12(sp),d0
    92f2:	|  |         move.l 8(sp),d1
    92f6:	|  |         jsr -684(a6)
    92fa:	|  |         move.l d0,4(sp)
    92fe:	|  |         move.l 4(sp),d0
    9302:	|  |         movea.l 16(sp),a0
    9306:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    930a:	|  |         movea.l 16(sp),a0
    930e:	|  |         move.l 4(a0),d0
    9312:	|  |     ,-- bne.s 9328 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9314:	|  |     |   pea 18d85 <PutChar+0x13b7>
    931a:	|  |     |   jsr 16f2c <KPrintF>
    9320:	|  |     |   addq.l #4,sp
			return NULL;
    9322:	|  |     |   moveq #0,d0
    9324:	+--|-----|-- bra.w 93f8 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9328:	|  |     '-> clr.l 36(sp)
    932c:	|  |     ,-- bra.w 93de <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9330:	|  |  ,--|-> movea.l 44(sp),a0
    9334:	|  |  |  |   movea.l 4(a0),a0
    9338:	|  |  |  |   move.l 36(sp),d1
    933c:	|  |  |  |   move.l d1,d0
    933e:	|  |  |  |   add.l d0,d0
    9340:	|  |  |  |   add.l d1,d0
    9342:	|  |  |  |   add.l d0,d0
    9344:	|  |  |  |   add.l d0,d0
    9346:	|  |  |  |   lea (0,a0,d0.l),a1
    934a:	|  |  |  |   movea.l 16(sp),a0
    934e:	|  |  |  |   movea.l 4(a0),a0
    9352:	|  |  |  |   move.l 36(sp),d1
    9356:	|  |  |  |   move.l d1,d0
    9358:	|  |  |  |   add.l d0,d0
    935a:	|  |  |  |   add.l d1,d0
    935c:	|  |  |  |   add.l d0,d0
    935e:	|  |  |  |   add.l d0,d0
    9360:	|  |  |  |   adda.l d0,a0
    9362:	|  |  |  |   move.l (a1),d0
    9364:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9366:	|  |  |  |   movea.l 44(sp),a0
    936a:	|  |  |  |   movea.l 4(a0),a0
    936e:	|  |  |  |   move.l 36(sp),d1
    9372:	|  |  |  |   move.l d1,d0
    9374:	|  |  |  |   add.l d0,d0
    9376:	|  |  |  |   add.l d1,d0
    9378:	|  |  |  |   add.l d0,d0
    937a:	|  |  |  |   add.l d0,d0
    937c:	|  |  |  |   lea (0,a0,d0.l),a1
    9380:	|  |  |  |   movea.l 16(sp),a0
    9384:	|  |  |  |   movea.l 4(a0),a0
    9388:	|  |  |  |   move.l 36(sp),d1
    938c:	|  |  |  |   move.l d1,d0
    938e:	|  |  |  |   add.l d0,d0
    9390:	|  |  |  |   add.l d1,d0
    9392:	|  |  |  |   add.l d0,d0
    9394:	|  |  |  |   add.l d0,d0
    9396:	|  |  |  |   adda.l d0,a0
    9398:	|  |  |  |   move.l 4(a1),d0
    939c:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    93a0:	|  |  |  |   movea.l 44(sp),a0
    93a4:	|  |  |  |   movea.l 4(a0),a0
    93a8:	|  |  |  |   move.l 36(sp),d1
    93ac:	|  |  |  |   move.l d1,d0
    93ae:	|  |  |  |   add.l d0,d0
    93b0:	|  |  |  |   add.l d1,d0
    93b2:	|  |  |  |   add.l d0,d0
    93b4:	|  |  |  |   add.l d0,d0
    93b6:	|  |  |  |   lea (0,a0,d0.l),a1
    93ba:	|  |  |  |   movea.l 16(sp),a0
    93be:	|  |  |  |   movea.l 4(a0),a0
    93c2:	|  |  |  |   move.l 36(sp),d1
    93c6:	|  |  |  |   move.l d1,d0
    93c8:	|  |  |  |   add.l d0,d0
    93ca:	|  |  |  |   add.l d1,d0
    93cc:	|  |  |  |   add.l d0,d0
    93ce:	|  |  |  |   add.l d0,d0
    93d0:	|  |  |  |   adda.l d0,a0
    93d2:	|  |  |  |   move.l 8(a1),d0
    93d6:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    93da:	|  |  |  |   addq.l #1,36(sp)
    93de:	|  |  |  '-> move.l 36(sp),d0
    93e2:	|  |  |      cmp.l 32(sp),d0
    93e6:	|  |  '----- blt.w 9330 <copyAnim+0xda>
    93ea:	|  |     ,-- bra.s 93f4 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    93ec:	|  '-----|-> movea.l 16(sp),a0
    93f0:	|        |   clr.l 4(a0)
	}

	return newAnim;
    93f4:	|        '-> move.l 16(sp),d0
}
    93f8:	'----------> movea.l (sp)+,a6
    93fa:	             lea 36(sp),sp
    93fe:	             rts

00009400 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9400:	                lea -44(sp),sp
    9404:	                move.l a6,-(sp)
    9406:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9408:	                moveq #12,d0
    940a:	                move.l d0,40(sp)
    940e:	                clr.l 36(sp)
    9412:	                move.l 1a7a4 <SysBase>,d0
    9418:	                movea.l d0,a6
    941a:	                move.l 40(sp),d0
    941e:	                move.l 36(sp),d1
    9422:	                jsr -684(a6)
    9426:	                move.l d0,32(sp)
    942a:	                move.l 32(sp),d0
    942e:	                move.l d0,28(sp)
	if( !newP) {
    9432:	            ,-- bne.s 9448 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9434:	            |   pea 18da6 <PutChar+0x13d8>
    943a:	            |   jsr 16f2c <KPrintF>
    9440:	            |   addq.l #4,sp
		return NULL;
    9442:	            |   moveq #0,d0
    9444:	,-----------|-- bra.w 9618 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9448:	|           '-> movea.l 28(sp),a0
    944c:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9452:	|               move.l 56(sp),d1
    9456:	|               move.l d1,d0
    9458:	|               add.l d0,d0
    945a:	|               add.l d1,d0
    945c:	|               add.l d0,d0
    945e:	|               add.l d0,d0
    9460:	|               move.l d0,24(sp)
    9464:	|               clr.l 20(sp)
    9468:	|               move.l 1a7a4 <SysBase>,d0
    946e:	|               movea.l d0,a6
    9470:	|               move.l 24(sp),d0
    9474:	|               move.l 20(sp),d1
    9478:	|               jsr -684(a6)
    947c:	|               move.l d0,16(sp)
    9480:	|               move.l 16(sp),d0
    9484:	|               movea.l 28(sp),a0
    9488:	|               move.l d0,4(a0)
	if( !newP->frames) {
    948c:	|               movea.l 28(sp),a0
    9490:	|               move.l 4(a0),d0
    9494:	|           ,-- bne.s 94aa <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9496:	|           |   pea 18da6 <PutChar+0x13d8>
    949c:	|           |   jsr 16f2c <KPrintF>
    94a2:	|           |   addq.l #4,sp
		return NULL;
    94a4:	|           |   moveq #0,d0
    94a6:	+-----------|-- bra.w 9618 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    94aa:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    94b0:	|               movea.l 60(sp),a0
    94b4:	|               move.l (a0),44(sp)
	while (a) {
    94b8:	|     ,-------- bra.w 960c <createPersonaAnim+0x20c>
		a --;
    94bc:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    94c0:	|  |  |         movea.l 28(sp),a0
    94c4:	|  |  |         movea.l 4(a0),a0
    94c8:	|  |  |         move.l 48(sp),d1
    94cc:	|  |  |         move.l d1,d0
    94ce:	|  |  |         add.l d0,d0
    94d0:	|  |  |         add.l d1,d0
    94d2:	|  |  |         add.l d0,d0
    94d4:	|  |  |         add.l d0,d0
    94d6:	|  |  |         adda.l d0,a0
    94d8:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    94dc:	|  |  |         movea.l 44(sp),a0
    94e0:	|  |  |         move.l (a0),d0
    94e2:	|  |  |         moveq #5,d1
    94e4:	|  |  |         cmp.l d0,d1
    94e6:	|  |  |     ,-- bne.s 9512 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    94e8:	|  |  |     |   movea.l 28(sp),a0
    94ec:	|  |  |     |   movea.l 4(a0),a0
    94f0:	|  |  |     |   move.l 48(sp),d1
    94f4:	|  |  |     |   move.l d1,d0
    94f6:	|  |  |     |   add.l d0,d0
    94f8:	|  |  |     |   add.l d1,d0
    94fa:	|  |  |     |   add.l d0,d0
    94fc:	|  |  |     |   add.l d0,d0
    94fe:	|  |  |     |   lea (0,a0,d0.l),a1
    9502:	|  |  |     |   movea.l 44(sp),a0
    9506:	|  |  |     |   move.l 4(a0),d0
    950a:	|  |  |     |   move.l d0,8(a1)
    950e:	|  |  |  ,--|-- bra.w 95ba <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9512:	|  |  |  |  '-> movea.l 44(sp),a0
    9516:	|  |  |  |      move.l (a0),d0
    9518:	|  |  |  |      moveq #2,d1
    951a:	|  |  |  |      cmp.l d0,d1
    951c:	|  |  |  |  ,-- bne.s 9548 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    951e:	|  |  |  |  |   movea.l 44(sp),a0
    9522:	|  |  |  |  |   move.l 4(a0),d2
    9526:	|  |  |  |  |   movea.l 28(sp),a0
    952a:	|  |  |  |  |   movea.l 4(a0),a0
    952e:	|  |  |  |  |   move.l 48(sp),d1
    9532:	|  |  |  |  |   move.l d1,d0
    9534:	|  |  |  |  |   add.l d0,d0
    9536:	|  |  |  |  |   add.l d1,d0
    9538:	|  |  |  |  |   add.l d0,d0
    953a:	|  |  |  |  |   add.l d0,d0
    953c:	|  |  |  |  |   adda.l d0,a0
    953e:	|  |  |  |  |   move.l d2,d0
    9540:	|  |  |  |  |   neg.l d0
    9542:	|  |  |  |  |   move.l d0,8(a0)
    9546:	|  |  |  +--|-- bra.s 95ba <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9548:	|  |  |  |  '-> movea.l 44(sp),a0
    954c:	|  |  |  |      move.l (a0),d0
    954e:	|  |  |  |      moveq #6,d1
    9550:	|  |  |  |      cmp.l d0,d1
    9552:	|  |  |  |  ,-- bne.s 959a <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9554:	|  |  |  |  |   movea.l 44(sp),a0
    9558:	|  |  |  |  |   movea.l 4(a0),a0
    955c:	|  |  |  |  |   move.l (a0),d0
    955e:	|  |  |  |  |   move.l d0,-(sp)
    9560:	|  |  |  |  |   pea 1 <_start+0x1>
    9564:	|  |  |  |  |   lea 20(sp),a0
    9568:	|  |  |  |  |   move.l a0,-(sp)
    956a:	|  |  |  |  |   jsr 144e0 <getValueType>
    9570:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9574:	|  |  |  |  |   movea.l 44(sp),a0
    9578:	|  |  |  |  |   movea.l 4(a0),a0
    957c:	|  |  |  |  |   movea.l (a0),a0
    957e:	|  |  |  |  |   move.l 8(a0),d0
    9582:	|  |  |  |  |   move.l d0,-(sp)
    9584:	|  |  |  |  |   pea 1 <_start+0x1>
    9588:	|  |  |  |  |   lea 16(sp),a0
    958c:	|  |  |  |  |   move.l a0,-(sp)
    958e:	|  |  |  |  |   jsr 144e0 <getValueType>
    9594:	|  |  |  |  |   lea 12(sp),sp
    9598:	|  |  |  +--|-- bra.s 95ba <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    959a:	|  |  |  |  '-> move.l 44(sp),d0
    959e:	|  |  |  |      move.l d0,-(sp)
    95a0:	|  |  |  |      pea 1 <_start+0x1>
    95a4:	|  |  |  |      lea 20(sp),a0
    95a8:	|  |  |  |      move.l a0,-(sp)
    95aa:	|  |  |  |      jsr 144e0 <getValueType>
    95b0:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    95b4:	|  |  |  |      moveq #1,d0
    95b6:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    95ba:	|  |  |  '----> move.l 60(sp),-(sp)
    95be:	|  |  |         jsr 14e64 <trimStack>
    95c4:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    95c6:	|  |  |         movea.l 28(sp),a0
    95ca:	|  |  |         movea.l 4(a0),a0
    95ce:	|  |  |         move.l 48(sp),d1
    95d2:	|  |  |         move.l d1,d0
    95d4:	|  |  |         add.l d0,d0
    95d6:	|  |  |         add.l d1,d0
    95d8:	|  |  |         add.l d0,d0
    95da:	|  |  |         add.l d0,d0
    95dc:	|  |  |         adda.l d0,a0
    95de:	|  |  |         move.l 12(sp),d0
    95e2:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    95e4:	|  |  |         movea.l 28(sp),a0
    95e8:	|  |  |         movea.l 4(a0),a0
    95ec:	|  |  |         move.l 48(sp),d1
    95f0:	|  |  |         move.l d1,d0
    95f2:	|  |  |         add.l d0,d0
    95f4:	|  |  |         add.l d1,d0
    95f6:	|  |  |         add.l d0,d0
    95f8:	|  |  |         add.l d0,d0
    95fa:	|  |  |         adda.l d0,a0
    95fc:	|  |  |         move.l 8(sp),d0
    9600:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9604:	|  |  |         movea.l 60(sp),a0
    9608:	|  |  |         move.l (a0),44(sp)
	while (a) {
    960c:	|  |  '-------> tst.l 48(sp)
    9610:	|  '----------- bne.w 94bc <createPersonaAnim+0xbc>
	}

	return newP;
    9614:	|               move.l 28(sp),d0
}
    9618:	'-------------> move.l (sp)+,d2
    961a:	                movea.l (sp)+,a6
    961c:	                lea 44(sp),sp
    9620:	                rts

00009622 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9622:	       lea -12(sp),sp
    9626:	       move.l a6,-(sp)

	if(orig->theSprites)
    9628:	       movea.l 20(sp),a0
    962c:	       move.l (a0),d0
    962e:	   ,-- beq.s 9658 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9630:	   |   movea.l 20(sp),a0
    9634:	   |   movea.l (a0),a0
    9636:	   |   move.l 4(a0),d0
    963a:	   |   subq.l #1,d0
    963c:	   |   move.l d0,4(a0)
    9640:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9646:	   +-- bne.s 9658 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9648:	   |   movea.l 20(sp),a0
    964c:	   |   move.l (a0),d0
    964e:	   |   move.l d0,-(sp)
    9650:	   |   jsr 8706 <forgetSpriteBank>
    9656:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9658:	   '-> tst.l 20(sp)
    965c:	,----- beq.s 969c <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    965e:	|      movea.l 20(sp),a0
    9662:	|      move.l 8(a0),d0
    9666:	|  ,-- beq.s 9682 <deleteAnim+0x60>
			FreeVec( orig->frames);
    9668:	|  |   movea.l 20(sp),a0
    966c:	|  |   move.l 4(a0),8(sp)
    9672:	|  |   move.l 1a7a4 <SysBase>,d0
    9678:	|  |   movea.l d0,a6
    967a:	|  |   movea.l 8(sp),a1
    967e:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9682:	|  '-> move.l 20(sp),4(sp)
    9688:	|      move.l 1a7a4 <SysBase>,d0
    968e:	|      movea.l d0,a6
    9690:	|      movea.l 4(sp),a1
    9694:	|      jsr -690(a6)
		orig = NULL;
    9698:	|      clr.l 20(sp)
	}	
	
}
    969c:	'----> nop
    969e:	       movea.l (sp)+,a6
    96a0:	       lea 12(sp),sp
    96a4:	       rts

000096a6 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    96a6:	          lea -124(sp),sp
    96aa:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    96ae:	          movea.l 152(sp),a0
    96b2:	          move.l 56(a0),d1
    96b6:	          movea.l 152(sp),a0
    96ba:	          move.l 60(a0),d0
    96be:	          cmp.l d1,d0
    96c0:	      ,-- bne.s 96f0 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    96c2:	      |   movea.l 152(sp),a0
    96c6:	      |   moveq #-1,d0
    96c8:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    96cc:	      |   movea.l 152(sp),a0
    96d0:	      |   move.l 40(a0),d0
    96d4:	      |   movea.l 152(sp),a0
    96d8:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    96dc:	      |   movea.l 152(sp),a0
    96e0:	      |   move.l 44(a0),d0
    96e4:	      |   movea.l 152(sp),a0
    96e8:	      |   move.l d0,52(a0)
    96ec:	   ,--|-- bra.w 9c56 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    96f0:	   |  '-> movea.l 1a8c0 <currentFloor>,a0
    96f6:	   |      move.l 16(a0),d1
    96fa:	   |      movea.l 152(sp),a0
    96fe:	   |      move.l 56(a0),d0
    9702:	   |      add.l d0,d0
    9704:	   |      add.l d0,d0
    9706:	   |      movea.l d1,a0
    9708:	   |      adda.l d0,a0
    970a:	   |      move.l (a0),d1
    970c:	   |      movea.l 152(sp),a0
    9710:	   |      move.l 60(a0),d0
    9714:	   |      add.l d0,d0
    9716:	   |      add.l d0,d0
    9718:	   |      movea.l d1,a0
    971a:	   |      adda.l d0,a0
    971c:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9720:	   |      moveq #-1,d0
    9722:	   |      cmp.l 144(sp),d0
    9726:	   |  ,-- bne.s 972e <doBorderStuff+0x88>
    9728:	   |  |   clr.w d0
    972a:	,--|--|-- bra.w 9d56 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    972e:	|  |  '-> movea.l 1a8c0 <currentFloor>,a0
    9734:	|  |      move.l 12(a0),d1
    9738:	|  |      move.l 144(sp),d0
    973c:	|  |      lsl.l #3,d0
    973e:	|  |      add.l d0,d1
    9740:	|  |      movea.l 1a8c0 <currentFloor>,a0
    9746:	|  |      movea.l 12(a0),a1
    974a:	|  |      movea.l 152(sp),a0
    974e:	|  |      move.l 56(a0),d0
    9752:	|  |      lsl.l #3,d0
    9754:	|  |      add.l a1,d0
    9756:	|  |      lea 40(sp),a0
    975a:	|  |      move.l a0,-(sp)
    975c:	|  |      lea 48(sp),a0
    9760:	|  |      move.l a0,-(sp)
    9762:	|  |      move.l d1,-(sp)
    9764:	|  |      move.l d0,-(sp)
    9766:	|  |      jsr 161ae <getMatchingCorners>
    976c:	|  |      lea 16(sp),sp
    9770:	|  |      tst.w d0
    9772:	|  |  ,-- bne.s 9788 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9774:	|  |  |   pea 18dd0 <PutChar+0x1402>
    977a:	|  |  |   jsr 16f2c <KPrintF>
    9780:	|  |  |   addq.l #4,sp
            return FALSE;
    9782:	|  |  |   clr.w d0
    9784:	+--|--|-- bra.w 9d56 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9788:	|  |  '-> movea.l 152(sp),a0
    978c:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9792:	|  |      movea.l 152(sp),a0
    9796:	|  |      move.l (a0),d0
    9798:	|  |      move.l d0,-(sp)
    979a:	|  |      jsr 172f6 <__fixsfsi>
    97a0:	|  |      addq.l #4,sp
    97a2:	|  |      move.l d0,140(sp)
    97a6:	|  |      movea.l 152(sp),a0
    97aa:	|  |      move.l 4(a0),d0
    97ae:	|  |      move.l d0,-(sp)
    97b0:	|  |      jsr 172f6 <__fixsfsi>
    97b6:	|  |      addq.l #4,sp
    97b8:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    97bc:	|  |      movea.l 152(sp),a0
    97c0:	|  |      move.l 40(a0),132(sp)
    97c6:	|  |      movea.l 152(sp),a0
    97ca:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    97d0:	|  |      movea.l 1a8c0 <currentFloor>,a0
    97d6:	|  |      move.l 4(a0),d1
    97da:	|  |      move.l 44(sp),d0
    97de:	|  |      lsl.l #3,d0
    97e0:	|  |      movea.l d1,a0
    97e2:	|  |      adda.l d0,a0
    97e4:	|  |      move.l (a0),124(sp)
    97e8:	|  |      movea.l 1a8c0 <currentFloor>,a0
    97ee:	|  |      move.l 4(a0),d1
    97f2:	|  |      move.l 44(sp),d0
    97f6:	|  |      lsl.l #3,d0
    97f8:	|  |      movea.l d1,a0
    97fa:	|  |      adda.l d0,a0
    97fc:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9802:	|  |      movea.l 1a8c0 <currentFloor>,a0
    9808:	|  |      move.l 4(a0),d1
    980c:	|  |      move.l 40(sp),d0
    9810:	|  |      lsl.l #3,d0
    9812:	|  |      movea.l d1,a0
    9814:	|  |      adda.l d0,a0
    9816:	|  |      move.l (a0),116(sp)
    981a:	|  |      movea.l 1a8c0 <currentFloor>,a0
    9820:	|  |      move.l 4(a0),d1
    9824:	|  |      move.l 40(sp),d0
    9828:	|  |      lsl.l #3,d0
    982a:	|  |      movea.l d1,a0
    982c:	|  |      adda.l d0,a0
    982e:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9834:	|  |      move.l 140(sp),d0
    9838:	|  |      sub.l 132(sp),d0
    983c:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9840:	|  |      move.l 136(sp),d0
    9844:	|  |      sub.l 128(sp),d0
    9848:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    984c:	|  |      move.l 116(sp),d0
    9850:	|  |      sub.l 124(sp),d0
    9854:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9858:	|  |      move.l 112(sp),d0
    985c:	|  |      sub.l 120(sp),d0
    9860:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9864:	|  |      move.l 124(sp),d0
    9868:	|  |      sub.l 140(sp),d0
    986c:	|  |      move.l 104(sp),-(sp)
    9870:	|  |      move.l d0,-(sp)
    9872:	|  |      jsr 178b8 <__mulsi3>
    9878:	|  |      addq.l #8,sp
    987a:	|  |      move.l d0,d2
    987c:	|  |      move.l 120(sp),d0
    9880:	|  |      sub.l 136(sp),d0
    9884:	|  |      move.l 108(sp),-(sp)
    9888:	|  |      move.l d0,-(sp)
    988a:	|  |      jsr 178b8 <__mulsi3>
    9890:	|  |      addq.l #8,sp
    9892:	|  |      move.l d2,d1
    9894:	|  |      sub.l d0,d1
    9896:	|  |      move.l d1,-(sp)
    9898:	|  |      jsr 1731e <__floatsidf>
    989e:	|  |      addq.l #4,sp
    98a0:	|  |      move.l d0,32(sp)
    98a4:	|  |      move.l d1,36(sp)
    98a8:	|  |      move.l 32(sp),88(sp)
    98ae:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    98b4:	|  |      move.l 96(sp),-(sp)
    98b8:	|  |      move.l 112(sp),-(sp)
    98bc:	|  |      jsr 178b8 <__mulsi3>
    98c2:	|  |      addq.l #8,sp
    98c4:	|  |      move.l d0,d2
    98c6:	|  |      move.l 100(sp),-(sp)
    98ca:	|  |      move.l 108(sp),-(sp)
    98ce:	|  |      jsr 178b8 <__mulsi3>
    98d4:	|  |      addq.l #8,sp
    98d6:	|  |      move.l d2,d1
    98d8:	|  |      sub.l d0,d1
    98da:	|  |      move.l d1,-(sp)
    98dc:	|  |      jsr 1731e <__floatsidf>
    98e2:	|  |      addq.l #4,sp
    98e4:	|  |      move.l d1,-(sp)
    98e6:	|  |      move.l d0,-(sp)
    98e8:	|  |      move.l 100(sp),-(sp)
    98ec:	|  |      move.l 100(sp),-(sp)
    98f0:	|  |      jsr 171b2 <__divdf3>
    98f6:	|  |      lea 16(sp),sp
    98fa:	|  |      move.l d0,24(sp)
    98fe:	|  |      move.l d1,28(sp)
    9902:	|  |      move.l 24(sp),88(sp)
    9908:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    990e:	|  |      clr.l -(sp)
    9910:	|  |      clr.l -(sp)
    9912:	|  |      move.l 100(sp),-(sp)
    9916:	|  |      move.l 100(sp),-(sp)
    991a:	|  |      jsr 1747c <__gtdf2>
    9920:	|  |      lea 16(sp),sp
    9924:	|  |      tst.l d0
    9926:	|  |  ,-- ble.w 99fe <doBorderStuff+0x358>
    992a:	|  |  |   clr.l -(sp)
    992c:	|  |  |   move.l #1072693248,-(sp)
    9932:	|  |  |   move.l 100(sp),-(sp)
    9936:	|  |  |   move.l 100(sp),-(sp)
    993a:	|  |  |   jsr 17536 <__ltdf2>
    9940:	|  |  |   lea 16(sp),sp
    9944:	|  |  |   tst.l d0
    9946:	|  |  +-- bge.w 99fe <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    994a:	|  |  |   move.l 124(sp),-(sp)
    994e:	|  |  |   jsr 1731e <__floatsidf>
    9954:	|  |  |   addq.l #4,sp
    9956:	|  |  |   move.l d0,d2
    9958:	|  |  |   move.l d1,d3
    995a:	|  |  |   move.l 100(sp),-(sp)
    995e:	|  |  |   jsr 1731e <__floatsidf>
    9964:	|  |  |   addq.l #4,sp
    9966:	|  |  |   move.l 92(sp),-(sp)
    996a:	|  |  |   move.l 92(sp),-(sp)
    996e:	|  |  |   move.l d1,-(sp)
    9970:	|  |  |   move.l d0,-(sp)
    9972:	|  |  |   jsr 173ae <__muldf3>
    9978:	|  |  |   lea 16(sp),sp
    997c:	|  |  |   move.l d1,-(sp)
    997e:	|  |  |   move.l d0,-(sp)
    9980:	|  |  |   move.l d3,-(sp)
    9982:	|  |  |   move.l d2,-(sp)
    9984:	|  |  |   jsr 17150 <__adddf3>
    998a:	|  |  |   lea 16(sp),sp
    998e:	|  |  |   move.l d1,-(sp)
    9990:	|  |  |   move.l d0,-(sp)
    9992:	|  |  |   jsr 172c0 <__fixdfsi>
    9998:	|  |  |   addq.l #8,sp
    999a:	|  |  |   movea.l 152(sp),a0
    999e:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    99a2:	|  |  |   move.l 120(sp),-(sp)
    99a6:	|  |  |   jsr 1731e <__floatsidf>
    99ac:	|  |  |   addq.l #4,sp
    99ae:	|  |  |   move.l d0,d2
    99b0:	|  |  |   move.l d1,d3
    99b2:	|  |  |   move.l 96(sp),-(sp)
    99b6:	|  |  |   jsr 1731e <__floatsidf>
    99bc:	|  |  |   addq.l #4,sp
    99be:	|  |  |   move.l 92(sp),-(sp)
    99c2:	|  |  |   move.l 92(sp),-(sp)
    99c6:	|  |  |   move.l d1,-(sp)
    99c8:	|  |  |   move.l d0,-(sp)
    99ca:	|  |  |   jsr 173ae <__muldf3>
    99d0:	|  |  |   lea 16(sp),sp
    99d4:	|  |  |   move.l d1,-(sp)
    99d6:	|  |  |   move.l d0,-(sp)
    99d8:	|  |  |   move.l d3,-(sp)
    99da:	|  |  |   move.l d2,-(sp)
    99dc:	|  |  |   jsr 17150 <__adddf3>
    99e2:	|  |  |   lea 16(sp),sp
    99e6:	|  |  |   move.l d1,-(sp)
    99e8:	|  |  |   move.l d0,-(sp)
    99ea:	|  |  |   jsr 172c0 <__fixdfsi>
    99f0:	|  |  |   addq.l #8,sp
    99f2:	|  |  |   movea.l 152(sp),a0
    99f6:	|  |  |   move.l d0,52(a0)
    99fa:	|  +--|-- bra.w 9c56 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    99fe:	|  |  '-> move.l 140(sp),d0
    9a02:	|  |      sub.l 124(sp),d0
    9a06:	|  |      move.l d0,84(sp)
    9a0a:	|  |      move.l 140(sp),d0
    9a0e:	|  |      sub.l 116(sp),d0
    9a12:	|  |      move.l d0,80(sp)
    9a16:	|  |      move.l 132(sp),d0
    9a1a:	|  |      sub.l 124(sp),d0
    9a1e:	|  |      move.l d0,76(sp)
    9a22:	|  |      move.l 132(sp),d0
    9a26:	|  |      sub.l 116(sp),d0
    9a2a:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9a2e:	|  |      move.l 136(sp),d0
    9a32:	|  |      sub.l 120(sp),d0
    9a36:	|  |      move.l d0,68(sp)
    9a3a:	|  |      move.l 136(sp),d0
    9a3e:	|  |      sub.l 112(sp),d0
    9a42:	|  |      move.l d0,64(sp)
    9a46:	|  |      move.l 128(sp),d0
    9a4a:	|  |      sub.l 120(sp),d0
    9a4e:	|  |      move.l d0,60(sp)
    9a52:	|  |      move.l 128(sp),d0
    9a56:	|  |      sub.l 112(sp),d0
    9a5a:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9a5e:	|  |      move.l 84(sp),-(sp)
    9a62:	|  |      move.l 88(sp),-(sp)
    9a66:	|  |      jsr 178b8 <__mulsi3>
    9a6c:	|  |      addq.l #8,sp
    9a6e:	|  |      move.l d0,84(sp)
    9a72:	|  |      move.l 80(sp),-(sp)
    9a76:	|  |      move.l 84(sp),-(sp)
    9a7a:	|  |      jsr 178b8 <__mulsi3>
    9a80:	|  |      addq.l #8,sp
    9a82:	|  |      move.l d0,80(sp)
    9a86:	|  |      move.l 76(sp),-(sp)
    9a8a:	|  |      move.l 80(sp),-(sp)
    9a8e:	|  |      jsr 178b8 <__mulsi3>
    9a94:	|  |      addq.l #8,sp
    9a96:	|  |      move.l d0,76(sp)
    9a9a:	|  |      move.l 72(sp),-(sp)
    9a9e:	|  |      move.l 76(sp),-(sp)
    9aa2:	|  |      jsr 178b8 <__mulsi3>
    9aa8:	|  |      addq.l #8,sp
    9aaa:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9aae:	|  |      move.l 68(sp),-(sp)
    9ab2:	|  |      move.l 72(sp),-(sp)
    9ab6:	|  |      jsr 178b8 <__mulsi3>
    9abc:	|  |      addq.l #8,sp
    9abe:	|  |      move.l d0,68(sp)
    9ac2:	|  |      move.l 64(sp),-(sp)
    9ac6:	|  |      move.l 68(sp),-(sp)
    9aca:	|  |      jsr 178b8 <__mulsi3>
    9ad0:	|  |      addq.l #8,sp
    9ad2:	|  |      move.l d0,64(sp)
    9ad6:	|  |      move.l 60(sp),-(sp)
    9ada:	|  |      move.l 64(sp),-(sp)
    9ade:	|  |      jsr 178b8 <__mulsi3>
    9ae4:	|  |      addq.l #8,sp
    9ae6:	|  |      move.l d0,60(sp)
    9aea:	|  |      move.l 56(sp),-(sp)
    9aee:	|  |      move.l 60(sp),-(sp)
    9af2:	|  |      jsr 178b8 <__mulsi3>
    9af8:	|  |      addq.l #8,sp
    9afa:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9afe:	|  |      move.l 84(sp),-(sp)
    9b02:	|  |      jsr 1731e <__floatsidf>
    9b08:	|  |      addq.l #4,sp
    9b0a:	|  |      move.l d0,d2
    9b0c:	|  |      move.l d1,d3
    9b0e:	|  |      move.l 68(sp),-(sp)
    9b12:	|  |      jsr 1731e <__floatsidf>
    9b18:	|  |      addq.l #4,sp
    9b1a:	|  |      move.l d1,-(sp)
    9b1c:	|  |      move.l d0,-(sp)
    9b1e:	|  |      move.l d3,-(sp)
    9b20:	|  |      move.l d2,-(sp)
    9b22:	|  |      jsr 17150 <__adddf3>
    9b28:	|  |      lea 16(sp),sp
    9b2c:	|  |      move.l d1,-(sp)
    9b2e:	|  |      move.l d0,-(sp)
    9b30:	|  |      jsr 1786e <sqrt>
    9b36:	|  |      addq.l #8,sp
    9b38:	|  |      move.l d0,d2
    9b3a:	|  |      move.l d1,d3
    9b3c:	|  |      move.l 76(sp),-(sp)
    9b40:	|  |      jsr 1731e <__floatsidf>
    9b46:	|  |      addq.l #4,sp
    9b48:	|  |      move.l d0,d4
    9b4a:	|  |      move.l d1,d5
    9b4c:	|  |      move.l 60(sp),-(sp)
    9b50:	|  |      jsr 1731e <__floatsidf>
    9b56:	|  |      addq.l #4,sp
    9b58:	|  |      move.l d1,-(sp)
    9b5a:	|  |      move.l d0,-(sp)
    9b5c:	|  |      move.l d5,-(sp)
    9b5e:	|  |      move.l d4,-(sp)
    9b60:	|  |      jsr 17150 <__adddf3>
    9b66:	|  |      lea 16(sp),sp
    9b6a:	|  |      move.l d1,-(sp)
    9b6c:	|  |      move.l d0,-(sp)
    9b6e:	|  |      jsr 1786e <sqrt>
    9b74:	|  |      addq.l #8,sp
    9b76:	|  |      move.l d1,-(sp)
    9b78:	|  |      move.l d0,-(sp)
    9b7a:	|  |      move.l d3,-(sp)
    9b7c:	|  |      move.l d2,-(sp)
    9b7e:	|  |      jsr 17150 <__adddf3>
    9b84:	|  |      lea 16(sp),sp
    9b88:	|  |      move.l d0,d2
    9b8a:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9b8c:	|  |      move.l 80(sp),-(sp)
    9b90:	|  |      jsr 1731e <__floatsidf>
    9b96:	|  |      addq.l #4,sp
    9b98:	|  |      move.l d0,d4
    9b9a:	|  |      move.l d1,d5
    9b9c:	|  |      move.l 64(sp),-(sp)
    9ba0:	|  |      jsr 1731e <__floatsidf>
    9ba6:	|  |      addq.l #4,sp
    9ba8:	|  |      move.l d1,-(sp)
    9baa:	|  |      move.l d0,-(sp)
    9bac:	|  |      move.l d5,-(sp)
    9bae:	|  |      move.l d4,-(sp)
    9bb0:	|  |      jsr 17150 <__adddf3>
    9bb6:	|  |      lea 16(sp),sp
    9bba:	|  |      move.l d1,-(sp)
    9bbc:	|  |      move.l d0,-(sp)
    9bbe:	|  |      jsr 1786e <sqrt>
    9bc4:	|  |      addq.l #8,sp
    9bc6:	|  |      move.l d0,d4
    9bc8:	|  |      move.l d1,d5
    9bca:	|  |      move.l 72(sp),-(sp)
    9bce:	|  |      jsr 1731e <__floatsidf>
    9bd4:	|  |      addq.l #4,sp
    9bd6:	|  |      move.l d0,d6
    9bd8:	|  |      move.l d1,d7
    9bda:	|  |      move.l 56(sp),-(sp)
    9bde:	|  |      jsr 1731e <__floatsidf>
    9be4:	|  |      addq.l #4,sp
    9be6:	|  |      move.l d1,-(sp)
    9be8:	|  |      move.l d0,-(sp)
    9bea:	|  |      move.l d7,-(sp)
    9bec:	|  |      move.l d6,-(sp)
    9bee:	|  |      jsr 17150 <__adddf3>
    9bf4:	|  |      lea 16(sp),sp
    9bf8:	|  |      move.l d1,-(sp)
    9bfa:	|  |      move.l d0,-(sp)
    9bfc:	|  |      jsr 1786e <sqrt>
    9c02:	|  |      addq.l #8,sp
    9c04:	|  |      move.l d1,-(sp)
    9c06:	|  |      move.l d0,-(sp)
    9c08:	|  |      move.l d5,-(sp)
    9c0a:	|  |      move.l d4,-(sp)
    9c0c:	|  |      jsr 17150 <__adddf3>
    9c12:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9c16:	|  |      move.l d1,-(sp)
    9c18:	|  |      move.l d0,-(sp)
    9c1a:	|  |      move.l d3,-(sp)
    9c1c:	|  |      move.l d2,-(sp)
    9c1e:	|  |      jsr 17536 <__ltdf2>
    9c24:	|  |      lea 16(sp),sp
    9c28:	|  |      tst.l d0
    9c2a:	|  |  ,-- bge.s 9c42 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9c2c:	|  |  |   movea.l 152(sp),a0
    9c30:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9c36:	|  |  |   movea.l 152(sp),a0
    9c3a:	|  |  |   move.l 120(sp),52(a0)
    9c40:	|  +--|-- bra.s 9c56 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9c42:	|  |  '-> movea.l 152(sp),a0
    9c46:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9c4c:	|  |      movea.l 152(sp),a0
    9c50:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9c56:	|  '----> movea.l 152(sp),a0
    9c5a:	|         move.l 52(a0),d0
    9c5e:	|         move.l d0,-(sp)
    9c60:	|         jsr 1735e <__floatsisf>
    9c66:	|         addq.l #4,sp
    9c68:	|         move.l d0,d1
    9c6a:	|         movea.l 152(sp),a0
    9c6e:	|         move.l 4(a0),d0
    9c72:	|         move.l d0,-(sp)
    9c74:	|         move.l d1,-(sp)
    9c76:	|         jsr 17652 <__subsf3>
    9c7c:	|         addq.l #8,sp
    9c7e:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9c82:	|         movea.l 152(sp),a0
    9c86:	|         move.l (a0),d2
    9c88:	|         movea.l 152(sp),a0
    9c8c:	|         move.l 48(a0),d0
    9c90:	|         move.l d0,-(sp)
    9c92:	|         jsr 1735e <__floatsisf>
    9c98:	|         addq.l #4,sp
    9c9a:	|         move.l d0,-(sp)
    9c9c:	|         move.l d2,-(sp)
    9c9e:	|         jsr 17652 <__subsf3>
    9ca4:	|         addq.l #8,sp
    9ca6:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9caa:	|         clr.l -(sp)
    9cac:	|         move.l 52(sp),-(sp)
    9cb0:	|         jsr 175ba <__nesf2>
    9cb6:	|         addq.l #8,sp
    9cb8:	|         tst.l d0
    9cba:	|     ,-- bne.s 9cce <doBorderStuff+0x628>
    9cbc:	|     |   clr.l -(sp)
    9cbe:	|     |   move.l 56(sp),-(sp)
    9cc2:	|     |   jsr 175ba <__nesf2>
    9cc8:	|     |   addq.l #8,sp
    9cca:	|     |   tst.l d0
    9ccc:	|  ,--|-- beq.s 9d44 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9cce:	|  |  '-> move.l 52(sp),d0
    9cd2:	|  |      move.l d0,-(sp)
    9cd4:	|  |      move.l d0,-(sp)
    9cd6:	|  |      jsr 1711a <__addsf3>
    9cdc:	|  |      addq.l #8,sp
    9cde:	|  |      move.l d0,-(sp)
    9ce0:	|  |      move.l 52(sp),-(sp)
    9ce4:	|  |      jsr 176be <atan2f>
    9cea:	|  |      addq.l #8,sp
    9cec:	|  |      move.l d0,-(sp)
    9cee:	|  |      jsr 17280 <__extendsfdf2>
    9cf4:	|  |      addq.l #4,sp
    9cf6:	|  |      move.l #-1540411785,-(sp)
    9cfc:	|  |      move.l #1078765033,-(sp)
    9d02:	|  |      move.l d1,-(sp)
    9d04:	|  |      move.l d0,-(sp)
    9d06:	|  |      jsr 173ae <__muldf3>
    9d0c:	|  |      lea 16(sp),sp
    9d10:	|  |      clr.l -(sp)
    9d12:	|  |      move.l #1080459264,-(sp)
    9d18:	|  |      move.l d1,-(sp)
    9d1a:	|  |      move.l d0,-(sp)
    9d1c:	|  |      jsr 17150 <__adddf3>
    9d22:	|  |      lea 16(sp),sp
    9d26:	|  |      move.l d1,-(sp)
    9d28:	|  |      move.l d0,-(sp)
    9d2a:	|  |      jsr 172c0 <__fixdfsi>
    9d30:	|  |      addq.l #8,sp
    9d32:	|  |      movea.l 152(sp),a0
    9d36:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9d3a:	|  |      movea.l 152(sp),a0
    9d3e:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    9d44:	|  '----> pea 1 <_start+0x1>
    9d48:	|         move.l 156(sp),-(sp)
    9d4c:	|         jsr 7e1a <setFrames>
    9d52:	|         addq.l #8,sp
    return TRUE;
    9d54:	|         moveq #1,d0
}
    9d56:	'-------> movem.l (sp)+,d2-d7
    9d5a:	          lea 124(sp),sp
    9d5e:	          rts

00009d60 <drawPeople>:

void drawPeople () {
    9d60:	                   lea -24(sp),sp
    9d64:	                   move.l d2,-(sp)

	shufflePeople ();
    9d66:	                   jsr b7fc <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    9d6c:	                   move.l 1a808 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    9d74:	                   clr.l 20(sp)
	overRegion = NULL;
    9d78:	                   clr.l 1a8b8 <overRegion>

	while (thisPerson) {
    9d7e:	   ,-------------- bra.w a330 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    9d82:	,--|-------------> movea.l 24(sp),a0
    9d86:	|  |               move.w 104(a0),d0
    9d8a:	|  |  ,----------- beq.w a0e4 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    9d8e:	|  |  |            movea.l 24(sp),a0
    9d92:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    9d98:	|  |  |            movea.l 24(sp),a0
    9d9c:	|  |  |            move.l 76(a0),d0
    9da0:	|  |  |            cmp.l 20(sp),d0
    9da4:	|  |  |  ,-------- beq.w 9f72 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    9da8:	|  |  |  |         movea.l 24(sp),a0
    9dac:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    9db0:	|  |  |  |         movea.l 24(sp),a0
    9db4:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    9dba:	|  |  |  |         movea.l 24(sp),a0
    9dbe:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    9dc2:	|  |  |  |         movea.l 20(sp),a0
    9dc6:	|  |  |  |         movea.l 4(a0),a0
    9dca:	|  |  |  |         move.l 4(a0),d0
    9dce:	|  |  |  |         movea.l 24(sp),a0
    9dd2:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9dd6:	|  |  |  |         movea.l 20(sp),a0
    9dda:	|  |  |  |         movea.l 4(a0),a1
    9dde:	|  |  |  |         movea.l 24(sp),a0
    9de2:	|  |  |  |         move.l 84(a0),d0
    9de6:	|  |  |  |         move.l d0,d1
    9de8:	|  |  |  |         move.l d1,d0
    9dea:	|  |  |  |         add.l d0,d0
    9dec:	|  |  |  |         add.l d1,d0
    9dee:	|  |  |  |         add.l d0,d0
    9df0:	|  |  |  |         add.l d0,d0
    9df2:	|  |  |  |         lea (0,a1,d0.l),a0
    9df6:	|  |  |  |         move.l 8(a0),d0
    9dfa:	|  |  |  |     ,-- ble.w 9e9c <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9dfe:	|  |  |  |     |   movea.l 20(sp),a0
    9e02:	|  |  |  |     |   movea.l 4(a0),a1
    9e06:	|  |  |  |     |   movea.l 24(sp),a0
    9e0a:	|  |  |  |     |   move.l 84(a0),d0
    9e0e:	|  |  |  |     |   move.l d0,d1
    9e10:	|  |  |  |     |   move.l d1,d0
    9e12:	|  |  |  |     |   add.l d0,d0
    9e14:	|  |  |  |     |   add.l d1,d0
    9e16:	|  |  |  |     |   add.l d0,d0
    9e18:	|  |  |  |     |   add.l d0,d0
    9e1a:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9e1e:	|  |  |  |     |   move.l 8(a0),d0
    9e22:	|  |  |  |     |   clr.l -(sp)
    9e24:	|  |  |  |     |   move.l d0,-(sp)
    9e26:	|  |  |  |     |   jsr cf10 <startSound>
    9e2c:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9e2e:	|  |  |  |     |   movea.l 24(sp),a0
    9e32:	|  |  |  |     |   move.l 84(a0),d0
    9e36:	|  |  |  |     |   addq.l #1,d0
    9e38:	|  |  |  |     |   movea.l 24(sp),a0
    9e3c:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9e40:	|  |  |  |     |   movea.l 24(sp),a0
    9e44:	|  |  |  |     |   move.l 84(a0),d0
    9e48:	|  |  |  |     |   movea.l 24(sp),a0
    9e4c:	|  |  |  |     |   movea.l 72(a0),a0
    9e50:	|  |  |  |     |   move.l 8(a0),d1
    9e54:	|  |  |  |     |   move.l d1,-(sp)
    9e56:	|  |  |  |     |   move.l d0,-(sp)
    9e58:	|  |  |  |     |   jsr 17964 <__modsi3>
    9e5e:	|  |  |  |     |   addq.l #8,sp
    9e60:	|  |  |  |     |   movea.l 24(sp),a0
    9e64:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9e68:	|  |  |  |     |   movea.l 24(sp),a0
    9e6c:	|  |  |  |     |   movea.l 72(a0),a0
    9e70:	|  |  |  |     |   movea.l 4(a0),a1
    9e74:	|  |  |  |     |   movea.l 24(sp),a0
    9e78:	|  |  |  |     |   move.l 84(a0),d0
    9e7c:	|  |  |  |     |   move.l d0,d1
    9e7e:	|  |  |  |     |   move.l d1,d0
    9e80:	|  |  |  |     |   add.l d0,d0
    9e82:	|  |  |  |     |   add.l d1,d0
    9e84:	|  |  |  |     |   add.l d0,d0
    9e86:	|  |  |  |     |   add.l d0,d0
    9e88:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9e8c:	|  |  |  |     |   move.l 4(a0),d0
    9e90:	|  |  |  |     |   movea.l 24(sp),a0
    9e94:	|  |  |  |     |   move.l d0,88(a0)
    9e98:	|  |  |  |  ,--|-- bra.w 9fda <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    9e9c:	|  |  |  |  |  '-> movea.l 20(sp),a0
    9ea0:	|  |  |  |  |      movea.l 4(a0),a1
    9ea4:	|  |  |  |  |      movea.l 24(sp),a0
    9ea8:	|  |  |  |  |      move.l 84(a0),d0
    9eac:	|  |  |  |  |      move.l d0,d1
    9eae:	|  |  |  |  |      move.l d1,d0
    9eb0:	|  |  |  |  |      add.l d0,d0
    9eb2:	|  |  |  |  |      add.l d1,d0
    9eb4:	|  |  |  |  |      add.l d0,d0
    9eb6:	|  |  |  |  |      add.l d0,d0
    9eb8:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9ebc:	|  |  |  |  |      move.l 8(a0),d0
    9ec0:	|  |  |  |  +----- beq.w 9fda <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    9ec4:	|  |  |  |  |      movea.l 1a774 <noStack>,a1
    9eca:	|  |  |  |  |      movea.l 20(sp),a0
    9ece:	|  |  |  |  |      move.l 4(a0),d2
    9ed2:	|  |  |  |  |      movea.l 24(sp),a0
    9ed6:	|  |  |  |  |      move.l 84(a0),d0
    9eda:	|  |  |  |  |      move.l d0,d1
    9edc:	|  |  |  |  |      move.l d1,d0
    9ede:	|  |  |  |  |      add.l d0,d0
    9ee0:	|  |  |  |  |      add.l d1,d0
    9ee2:	|  |  |  |  |      add.l d0,d0
    9ee4:	|  |  |  |  |      add.l d0,d0
    9ee6:	|  |  |  |  |      movea.l d2,a0
    9ee8:	|  |  |  |  |      adda.l d0,a0
    9eea:	|  |  |  |  |      move.l 8(a0),d0
    9eee:	|  |  |  |  |      neg.l d0
    9ef0:	|  |  |  |  |      pea 1 <_start+0x1>
    9ef4:	|  |  |  |  |      move.l a1,-(sp)
    9ef6:	|  |  |  |  |      clr.l -(sp)
    9ef8:	|  |  |  |  |      clr.l -(sp)
    9efa:	|  |  |  |  |      move.l d0,-(sp)
    9efc:	|  |  |  |  |      jsr 6778 <startNewFunctionNum>
    9f02:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    9f06:	|  |  |  |  |      movea.l 24(sp),a0
    9f0a:	|  |  |  |  |      move.l 84(a0),d0
    9f0e:	|  |  |  |  |      addq.l #1,d0
    9f10:	|  |  |  |  |      movea.l 24(sp),a0
    9f14:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9f18:	|  |  |  |  |      movea.l 24(sp),a0
    9f1c:	|  |  |  |  |      move.l 84(a0),d0
    9f20:	|  |  |  |  |      movea.l 24(sp),a0
    9f24:	|  |  |  |  |      movea.l 72(a0),a0
    9f28:	|  |  |  |  |      move.l 8(a0),d1
    9f2c:	|  |  |  |  |      move.l d1,-(sp)
    9f2e:	|  |  |  |  |      move.l d0,-(sp)
    9f30:	|  |  |  |  |      jsr 17964 <__modsi3>
    9f36:	|  |  |  |  |      addq.l #8,sp
    9f38:	|  |  |  |  |      movea.l 24(sp),a0
    9f3c:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9f40:	|  |  |  |  |      movea.l 24(sp),a0
    9f44:	|  |  |  |  |      movea.l 72(a0),a0
    9f48:	|  |  |  |  |      movea.l 4(a0),a1
    9f4c:	|  |  |  |  |      movea.l 24(sp),a0
    9f50:	|  |  |  |  |      move.l 84(a0),d0
    9f54:	|  |  |  |  |      move.l d0,d1
    9f56:	|  |  |  |  |      move.l d1,d0
    9f58:	|  |  |  |  |      add.l d0,d0
    9f5a:	|  |  |  |  |      add.l d1,d0
    9f5c:	|  |  |  |  |      add.l d0,d0
    9f5e:	|  |  |  |  |      add.l d0,d0
    9f60:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9f64:	|  |  |  |  |      move.l 4(a0),d0
    9f68:	|  |  |  |  |      movea.l 24(sp),a0
    9f6c:	|  |  |  |  |      move.l d0,88(a0)
    9f70:	|  |  |  |  +----- bra.s 9fda <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    9f72:	|  |  |  '--|----> movea.l 24(sp),a0
    9f76:	|  |  |     |      move.l (a0),d0
    9f78:	|  |  |     |      movea.l 24(sp),a0
    9f7c:	|  |  |     |      move.l 8(a0),d1
    9f80:	|  |  |     |      move.l d1,-(sp)
    9f82:	|  |  |     |      move.l d0,-(sp)
    9f84:	|  |  |     |      jsr 1724a <__eqsf2>
    9f8a:	|  |  |     |      addq.l #8,sp
    9f8c:	|  |  |     |      tst.l d0
    9f8e:	|  |  |     |  ,-- bne.s 9fd2 <drawPeople+0x272>
    9f90:	|  |  |     |  |   movea.l 24(sp),a0
    9f94:	|  |  |     |  |   move.l 4(a0),d0
    9f98:	|  |  |     |  |   movea.l 24(sp),a0
    9f9c:	|  |  |     |  |   move.l 12(a0),d1
    9fa0:	|  |  |     |  |   move.l d1,-(sp)
    9fa2:	|  |  |     |  |   move.l d0,-(sp)
    9fa4:	|  |  |     |  |   jsr 1724a <__eqsf2>
    9faa:	|  |  |     |  |   addq.l #8,sp
    9fac:	|  |  |     |  |   tst.l d0
    9fae:	|  |  |     |  +-- bne.s 9fd2 <drawPeople+0x272>
    9fb0:	|  |  |     |  |   movea.l 20(sp),a0
    9fb4:	|  |  |     |  |   move.l 8(a0),d0
    9fb8:	|  |  |     |  |   moveq #1,d1
    9fba:	|  |  |     |  |   cmp.l d0,d1
    9fbc:	|  |  |     |  +-- bne.s 9fd2 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    9fbe:	|  |  |     |  |   movea.l 24(sp),a0
    9fc2:	|  |  |     |  |   move.l 16(a0),d0
    9fc6:	|  |  |     |  |   addq.l #1,d0
    9fc8:	|  |  |     |  |   movea.l 24(sp),a0
    9fcc:	|  |  |     |  |   move.l d0,16(a0)
    9fd0:	|  |  |     +--|-- bra.s 9fda <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    9fd2:	|  |  |     |  '-> movea.l 24(sp),a0
    9fd6:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    9fda:	|  |  |     '----> movea.l 24(sp),a0
    9fde:	|  |  |            move.l (a0),d0
    9fe0:	|  |  |            movea.l 24(sp),a0
    9fe4:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    9fe8:	|  |  |            movea.l 24(sp),a0
    9fec:	|  |  |            move.l 4(a0),d0
    9ff0:	|  |  |            movea.l 24(sp),a0
    9ff4:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    9ff8:	|  |  |            movea.l 20(sp),a0
    9ffc:	|  |  |            movea.l 4(a0),a1
    a000:	|  |  |            movea.l 24(sp),a0
    a004:	|  |  |            move.l 84(a0),d0
    a008:	|  |  |            move.l d0,d1
    a00a:	|  |  |            move.l d1,d0
    a00c:	|  |  |            add.l d0,d0
    a00e:	|  |  |            add.l d1,d0
    a010:	|  |  |            add.l d0,d0
    a012:	|  |  |            add.l d0,d0
    a014:	|  |  |            lea (0,a1,d0.l),a0
    a018:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a01c:	|  |  |            move.l 8(sp),d0
    a020:	|  |  |            add.l d0,d0
    a022:	|  |  |            subx.l d0,d0
    a024:	|  |  |            neg.l d0
    a026:	|  |  |            move.b d0,d0
    a028:	|  |  |            move.b d0,d0
    a02a:	|  |  |            andi.l #255,d0
    a030:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a034:	|  |  |            move.l 8(sp),-(sp)
    a038:	|  |  |            jsr 8f34 <TF_abs>
    a03e:	|  |  |            addq.l #4,sp
    a040:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a044:	|  |  |            movea.l 20(sp),a0
    a048:	|  |  |            movea.l (a0),a0
    a04a:	|  |  |            move.l 8(a0),d0
    a04e:	|  |  |            cmp.l 12(sp),d0
    a052:	|  |  |        ,-- bgt.s a062 <drawPeople+0x302>
				fNum = 0;
    a054:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a058:	|  |  |        |   moveq #2,d0
    a05a:	|  |  |        |   sub.l 16(sp),d0
    a05e:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a062:	|  |  |        '-> moveq #2,d1
    a064:	|  |  |            cmp.l 16(sp),d1
    a068:	|  |  +----------- beq.s a0e4 <drawPeople+0x384>
				BOOL r = FALSE;
    a06a:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a06e:	|  |  |            move.l 16(sp),d0
    a072:	|  |  |            movea.w d0,a0
    a074:	|  |  |            movea.l 20(sp),a1
    a078:	|  |  |            movea.l (a1),a1
    a07a:	|  |  |            movea.l 16(a1),a1
    a07e:	|  |  |            move.l 12(sp),d1
    a082:	|  |  |            move.l d1,d0
    a084:	|  |  |            lsl.l #3,d0
    a086:	|  |  |            sub.l d1,d0
    a088:	|  |  |            add.l d0,d0
    a08a:	|  |  |            add.l d0,d0
    a08c:	|  |  |            add.l a1,d0
    a08e:	|  |  |            move.l a0,-(sp)
    a090:	|  |  |            move.l 28(sp),-(sp)
    a094:	|  |  |            move.l d0,-(sp)
    a096:	|  |  |            jsr 8c56 <scaleSprite>
    a09c:	|  |  |            lea 12(sp),sp
    a0a0:	|  |  |            move.w d0,6(sp)
				if (r) {
    a0a4:	|  |  +----------- beq.s a0e4 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a0a6:	|  |  |            movea.l 24(sp),a0
    a0aa:	|  |  |            movea.l 114(a0),a0
    a0ae:	|  |  |            movea.l (a0),a0
    a0b0:	|  |  |            move.b (a0),d0
    a0b2:	|  |  +----------- beq.s a0e4 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a0b4:	|  |  |            move.l 1a828 <personRegion+0x1c>,d1
    a0ba:	|  |  |            movea.l 24(sp),a0
    a0be:	|  |  |            move.l 114(a0),d0
    a0c2:	|  |  |            cmp.l d1,d0
    a0c4:	|  |  |        ,-- beq.s a0cc <drawPeople+0x36c>
    a0c6:	|  |  |        |   clr.l 1a76c <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a0cc:	|  |  |        '-> movea.l 24(sp),a0
    a0d0:	|  |  |            move.l 114(a0),d0
    a0d4:	|  |  |            move.l d0,1a828 <personRegion+0x1c>
						overRegion = & personRegion;
    a0da:	|  |  |            move.l #108556,1a8b8 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a0e4:	|  |  '----------> movea.l 24(sp),a0
    a0e8:	|  |               move.l 88(a0),d0
    a0ec:	|  |               subq.l #1,d0
    a0ee:	|  |               movea.l 24(sp),a0
    a0f2:	|  |               move.l d0,88(a0)
    a0f6:	|  |               movea.l 24(sp),a0
    a0fa:	|  |               move.l 88(a0),d0
    a0fe:	|  |        ,----- bne.w a326 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a102:	|  |        |      movea.l 24(sp),a0
    a106:	|  |        |      move.l 84(a0),d0
    a10a:	|  |        |      addq.l #1,d0
    a10c:	|  |        |      movea.l 24(sp),a0
    a110:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a114:	|  |        |      movea.l 24(sp),a0
    a118:	|  |        |      move.l 84(a0),d0
    a11c:	|  |        |      movea.l 24(sp),a0
    a120:	|  |        |      movea.l 72(a0),a0
    a124:	|  |        |      move.l 8(a0),d1
    a128:	|  |        |      move.l d1,-(sp)
    a12a:	|  |        |      move.l d0,-(sp)
    a12c:	|  |        |      jsr 17964 <__modsi3>
    a132:	|  |        |      addq.l #8,sp
    a134:	|  |        |      movea.l 24(sp),a0
    a138:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a13c:	|  |        |      movea.l 24(sp),a0
    a140:	|  |        |      movea.l 72(a0),a0
    a144:	|  |        |      movea.l 4(a0),a1
    a148:	|  |        |      movea.l 24(sp),a0
    a14c:	|  |        |      move.l 84(a0),d0
    a150:	|  |        |      move.l d0,d1
    a152:	|  |        |      move.l d1,d0
    a154:	|  |        |      add.l d0,d0
    a156:	|  |        |      add.l d1,d0
    a158:	|  |        |      add.l d0,d0
    a15a:	|  |        |      add.l d0,d0
    a15c:	|  |        |      lea (0,a1,d0.l),a0
    a160:	|  |        |      move.l 4(a0),d0
    a164:	|  |        |      movea.l 24(sp),a0
    a168:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a16c:	|  |        |      movea.l 24(sp),a0
    a170:	|  |        |      move.w 104(a0),d0
    a174:	|  |        +----- beq.w a326 <drawPeople+0x5c6>
    a178:	|  |        |      tst.l 20(sp)
    a17c:	|  |        +----- beq.w a326 <drawPeople+0x5c6>
    a180:	|  |        |      movea.l 20(sp),a0
    a184:	|  |        |      move.l 4(a0),d0
    a188:	|  |        +----- beq.w a326 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a18c:	|  |        |      movea.l 20(sp),a0
    a190:	|  |        |      movea.l 4(a0),a1
    a194:	|  |        |      movea.l 24(sp),a0
    a198:	|  |        |      move.l 84(a0),d0
    a19c:	|  |        |      move.l d0,d1
    a19e:	|  |        |      move.l d1,d0
    a1a0:	|  |        |      add.l d0,d0
    a1a2:	|  |        |      add.l d1,d0
    a1a4:	|  |        |      add.l d0,d0
    a1a6:	|  |        |      add.l d0,d0
    a1a8:	|  |        |      lea (0,a1,d0.l),a0
    a1ac:	|  |        |      move.l 8(a0),d0
    a1b0:	|  |        |  ,-- ble.w a252 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a1b4:	|  |        |  |   movea.l 20(sp),a0
    a1b8:	|  |        |  |   movea.l 4(a0),a1
    a1bc:	|  |        |  |   movea.l 24(sp),a0
    a1c0:	|  |        |  |   move.l 84(a0),d0
    a1c4:	|  |        |  |   move.l d0,d1
    a1c6:	|  |        |  |   move.l d1,d0
    a1c8:	|  |        |  |   add.l d0,d0
    a1ca:	|  |        |  |   add.l d1,d0
    a1cc:	|  |        |  |   add.l d0,d0
    a1ce:	|  |        |  |   add.l d0,d0
    a1d0:	|  |        |  |   lea (0,a1,d0.l),a0
    a1d4:	|  |        |  |   move.l 8(a0),d0
    a1d8:	|  |        |  |   clr.l -(sp)
    a1da:	|  |        |  |   move.l d0,-(sp)
    a1dc:	|  |        |  |   jsr cf10 <startSound>
    a1e2:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a1e4:	|  |        |  |   movea.l 24(sp),a0
    a1e8:	|  |        |  |   move.l 84(a0),d0
    a1ec:	|  |        |  |   addq.l #1,d0
    a1ee:	|  |        |  |   movea.l 24(sp),a0
    a1f2:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a1f6:	|  |        |  |   movea.l 24(sp),a0
    a1fa:	|  |        |  |   move.l 84(a0),d0
    a1fe:	|  |        |  |   movea.l 24(sp),a0
    a202:	|  |        |  |   movea.l 72(a0),a0
    a206:	|  |        |  |   move.l 8(a0),d1
    a20a:	|  |        |  |   move.l d1,-(sp)
    a20c:	|  |        |  |   move.l d0,-(sp)
    a20e:	|  |        |  |   jsr 17964 <__modsi3>
    a214:	|  |        |  |   addq.l #8,sp
    a216:	|  |        |  |   movea.l 24(sp),a0
    a21a:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a21e:	|  |        |  |   movea.l 24(sp),a0
    a222:	|  |        |  |   movea.l 72(a0),a0
    a226:	|  |        |  |   movea.l 4(a0),a1
    a22a:	|  |        |  |   movea.l 24(sp),a0
    a22e:	|  |        |  |   move.l 84(a0),d0
    a232:	|  |        |  |   move.l d0,d1
    a234:	|  |        |  |   move.l d1,d0
    a236:	|  |        |  |   add.l d0,d0
    a238:	|  |        |  |   add.l d1,d0
    a23a:	|  |        |  |   add.l d0,d0
    a23c:	|  |        |  |   add.l d0,d0
    a23e:	|  |        |  |   lea (0,a1,d0.l),a0
    a242:	|  |        |  |   move.l 4(a0),d0
    a246:	|  |        |  |   movea.l 24(sp),a0
    a24a:	|  |        |  |   move.l d0,88(a0)
    a24e:	|  |        +--|-- bra.w a326 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a252:	|  |        |  '-> movea.l 20(sp),a0
    a256:	|  |        |      movea.l 4(a0),a1
    a25a:	|  |        |      movea.l 24(sp),a0
    a25e:	|  |        |      move.l 84(a0),d0
    a262:	|  |        |      move.l d0,d1
    a264:	|  |        |      move.l d1,d0
    a266:	|  |        |      add.l d0,d0
    a268:	|  |        |      add.l d1,d0
    a26a:	|  |        |      add.l d0,d0
    a26c:	|  |        |      add.l d0,d0
    a26e:	|  |        |      lea (0,a1,d0.l),a0
    a272:	|  |        |      move.l 8(a0),d0
    a276:	|  |        +----- beq.w a326 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a27a:	|  |        |      movea.l 1a774 <noStack>,a1
    a280:	|  |        |      movea.l 20(sp),a0
    a284:	|  |        |      move.l 4(a0),d2
    a288:	|  |        |      movea.l 24(sp),a0
    a28c:	|  |        |      move.l 84(a0),d0
    a290:	|  |        |      move.l d0,d1
    a292:	|  |        |      move.l d1,d0
    a294:	|  |        |      add.l d0,d0
    a296:	|  |        |      add.l d1,d0
    a298:	|  |        |      add.l d0,d0
    a29a:	|  |        |      add.l d0,d0
    a29c:	|  |        |      movea.l d2,a0
    a29e:	|  |        |      adda.l d0,a0
    a2a0:	|  |        |      move.l 8(a0),d0
    a2a4:	|  |        |      neg.l d0
    a2a6:	|  |        |      pea 1 <_start+0x1>
    a2aa:	|  |        |      move.l a1,-(sp)
    a2ac:	|  |        |      clr.l -(sp)
    a2ae:	|  |        |      clr.l -(sp)
    a2b0:	|  |        |      move.l d0,-(sp)
    a2b2:	|  |        |      jsr 6778 <startNewFunctionNum>
    a2b8:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a2bc:	|  |        |      movea.l 24(sp),a0
    a2c0:	|  |        |      move.l 84(a0),d0
    a2c4:	|  |        |      addq.l #1,d0
    a2c6:	|  |        |      movea.l 24(sp),a0
    a2ca:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a2ce:	|  |        |      movea.l 24(sp),a0
    a2d2:	|  |        |      move.l 84(a0),d0
    a2d6:	|  |        |      movea.l 24(sp),a0
    a2da:	|  |        |      movea.l 72(a0),a0
    a2de:	|  |        |      move.l 8(a0),d1
    a2e2:	|  |        |      move.l d1,-(sp)
    a2e4:	|  |        |      move.l d0,-(sp)
    a2e6:	|  |        |      jsr 17964 <__modsi3>
    a2ec:	|  |        |      addq.l #8,sp
    a2ee:	|  |        |      movea.l 24(sp),a0
    a2f2:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a2f6:	|  |        |      movea.l 24(sp),a0
    a2fa:	|  |        |      movea.l 72(a0),a0
    a2fe:	|  |        |      movea.l 4(a0),a1
    a302:	|  |        |      movea.l 24(sp),a0
    a306:	|  |        |      move.l 84(a0),d0
    a30a:	|  |        |      move.l d0,d1
    a30c:	|  |        |      move.l d1,d0
    a30e:	|  |        |      add.l d0,d0
    a310:	|  |        |      add.l d1,d0
    a312:	|  |        |      add.l d0,d0
    a314:	|  |        |      add.l d0,d0
    a316:	|  |        |      lea (0,a1,d0.l),a0
    a31a:	|  |        |      move.l 4(a0),d0
    a31e:	|  |        |      movea.l 24(sp),a0
    a322:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a326:	|  |        '----> movea.l 24(sp),a0
    a32a:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a330:	|  '-------------> tst.l 24(sp)
    a334:	'----------------- bne.w 9d82 <drawPeople+0x22>
	}
}
    a338:	                   nop
    a33a:	                   nop
    a33c:	                   move.l (sp)+,d2
    a33e:	                   lea 24(sp),sp
    a342:	                   rts

0000a344 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a344:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a346:	          move.l 1a808 <allPeople>,(sp)
	while (thisPerson) {
    a34c:	      ,-- bra.s a364 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a34e:	,-----|-> movea.l (sp),a0
    a350:	|     |   movea.l 114(a0),a0
    a354:	|     |   move.l 4(a0),d0
    a358:	|     |   cmp.l 8(sp),d0
    a35c:	|  ,--|-- beq.s a36a <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a35e:	|  |  |   movea.l (sp),a0
    a360:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a364:	|  |  '-> tst.l (sp)
    a366:	'--|----- bne.s a34e <findPerson+0xa>
    a368:	   |  ,-- bra.s a36c <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a36a:	   '--|-> nop
	}
	return thisPerson;
    a36c:	      '-> move.l (sp),d0
}
    a36e:	          addq.l #4,sp
    a370:	          rts

0000a372 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a372:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a374:	       move.l 12(sp),-(sp)
    a378:	       jsr a344 <findPerson>
    a37e:	       addq.l #4,sp
    a380:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a382:	   ,-- bne.s a388 <floatCharacter+0x16>
    a384:	   |   clr.w d0
    a386:	,--|-- bra.s a392 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a388:	|  '-> movea.l (sp),a0
    a38a:	|      move.l 8(sp),24(a0)
	return TRUE;
    a390:	|      moveq #1,d0
}
    a392:	'----> addq.l #4,sp
    a394:	       rts

0000a396 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a396:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a398:	          tst.l 8(sp)
    a39c:	      ,-- bne.s a3aa <forceWalkingPerson+0x14>
    a39e:	      |   tst.l 12(sp)
    a3a2:	      +-- bne.s a3aa <forceWalkingPerson+0x14>
    a3a4:	      |   clr.w d0
    a3a6:	,-----|-- bra.w a43c <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a3aa:	|     '-> move.l 16(sp),-(sp)
    a3ae:	|         jsr a344 <findPerson>
    a3b4:	|         addq.l #4,sp
    a3b6:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a3b8:	|     ,-- bne.s a3be <forceWalkingPerson+0x28>
    a3ba:	|     |   clr.w d0
    a3bc:	+-----|-- bra.s a43c <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a3be:	|     '-> movea.l (sp),a0
    a3c0:	|         move.l 68(a0),d0
    a3c4:	|     ,-- beq.s a3d6 <forceWalkingPerson+0x40>
    a3c6:	|     |   movea.l (sp),a0
    a3c8:	|     |   move.l 68(a0),d0
    a3cc:	|     |   move.l d0,-(sp)
    a3ce:	|     |   jsr 43bc <abortFunction>
    a3d4:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a3d6:	|     '-> movea.l (sp),a0
    a3d8:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a3de:	|         movea.l (sp),a0
    a3e0:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a3e4:	|         movea.l (sp),a0
    a3e6:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a3ec:	|         movea.l (sp),a0
    a3ee:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a3f4:	|         movea.l (sp),a0
    a3f6:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a3fc:	|         movea.l (sp),a0
    a3fe:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a402:	|         movea.l (sp),a0
    a404:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a408:	|         move.l (sp),-(sp)
    a40a:	|         jsr 96a6 <doBorderStuff>
    a410:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a412:	|         pea 1 <_start+0x1>
    a416:	|         move.l 4(sp),-(sp)
    a41a:	|         jsr bc8a <walkMe>
    a420:	|         addq.l #8,sp
    a422:	|         tst.w d0
    a424:	|     ,-- bne.s a42e <forceWalkingPerson+0x98>
    a426:	|     |   movea.l (sp),a0
    a428:	|     |   move.w 66(a0),d0
    a42c:	|  ,--|-- beq.s a43a <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a42e:	|  |  '-> movea.l (sp),a0
    a430:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a436:	|  |      moveq #1,d0
    a438:	+--|----- bra.s a43c <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a43a:	|  '----> clr.w d0
    }
}
    a43c:	'-------> addq.l #4,sp
    a43e:	          rts

0000a440 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a440:	                lea -56(sp),sp
    a444:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a446:	                move.l #320,56(sp)
    a44e:	                move.l #200,52(sp)
    a456:	                moveq #-1,d0
    a458:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a45c:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a464:	                clr.l 44(sp)
    a468:	   ,----------- bra.w a640 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a46c:	,--|----------> movea.l 1a8c0 <currentFloor>,a0
    a472:	|  |            move.l 12(a0),d1
    a476:	|  |            move.l 44(sp),d0
    a47a:	|  |            lsl.l #3,d0
    a47c:	|  |            movea.l d1,a0
    a47e:	|  |            adda.l d0,a0
    a480:	|  |            move.l (a0),d0
    a482:	|  |            move.l d0,d1
    a484:	|  |            subq.l #1,d1
    a486:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a48a:	|  |            clr.l 40(sp)
    a48e:	|  |     ,----- bra.w a61e <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a492:	|  |  ,--|----> movea.l 1a8c0 <currentFloor>,a0
    a498:	|  |  |  |      move.l 4(a0),d1
    a49c:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a4a2:	|  |  |  |      movea.l 12(a0),a0
    a4a6:	|  |  |  |      move.l 44(sp),d0
    a4aa:	|  |  |  |      lsl.l #3,d0
    a4ac:	|  |  |  |      adda.l d0,a0
    a4ae:	|  |  |  |      movea.l 4(a0),a0
    a4b2:	|  |  |  |      move.l 40(sp),d0
    a4b6:	|  |  |  |      add.l d0,d0
    a4b8:	|  |  |  |      add.l d0,d0
    a4ba:	|  |  |  |      adda.l d0,a0
    a4bc:	|  |  |  |      move.l (a0),d0
    a4be:	|  |  |  |      lsl.l #3,d0
    a4c0:	|  |  |  |      movea.l d1,a0
    a4c2:	|  |  |  |      adda.l d0,a0
    a4c4:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a4c8:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a4ce:	|  |  |  |      move.l 4(a0),d1
    a4d2:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a4d8:	|  |  |  |      movea.l 12(a0),a0
    a4dc:	|  |  |  |      move.l 44(sp),d0
    a4e0:	|  |  |  |      lsl.l #3,d0
    a4e2:	|  |  |  |      adda.l d0,a0
    a4e4:	|  |  |  |      movea.l 4(a0),a0
    a4e8:	|  |  |  |      move.l 40(sp),d0
    a4ec:	|  |  |  |      add.l d0,d0
    a4ee:	|  |  |  |      add.l d0,d0
    a4f0:	|  |  |  |      adda.l d0,a0
    a4f2:	|  |  |  |      move.l (a0),d0
    a4f4:	|  |  |  |      lsl.l #3,d0
    a4f6:	|  |  |  |      movea.l d1,a0
    a4f8:	|  |  |  |      adda.l d0,a0
    a4fa:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a500:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a506:	|  |  |  |      move.l 4(a0),d1
    a50a:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a510:	|  |  |  |      movea.l 12(a0),a0
    a514:	|  |  |  |      move.l 44(sp),d0
    a518:	|  |  |  |      lsl.l #3,d0
    a51a:	|  |  |  |      adda.l d0,a0
    a51c:	|  |  |  |      movea.l 4(a0),a0
    a520:	|  |  |  |      move.l 36(sp),d0
    a524:	|  |  |  |      add.l d0,d0
    a526:	|  |  |  |      add.l d0,d0
    a528:	|  |  |  |      adda.l d0,a0
    a52a:	|  |  |  |      move.l (a0),d0
    a52c:	|  |  |  |      lsl.l #3,d0
    a52e:	|  |  |  |      movea.l d1,a0
    a530:	|  |  |  |      adda.l d0,a0
    a532:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a536:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a53c:	|  |  |  |      move.l 4(a0),d1
    a540:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a546:	|  |  |  |      movea.l 12(a0),a0
    a54a:	|  |  |  |      move.l 44(sp),d0
    a54e:	|  |  |  |      lsl.l #3,d0
    a550:	|  |  |  |      adda.l d0,a0
    a552:	|  |  |  |      movea.l 4(a0),a0
    a556:	|  |  |  |      move.l 36(sp),d0
    a55a:	|  |  |  |      add.l d0,d0
    a55c:	|  |  |  |      add.l d0,d0
    a55e:	|  |  |  |      adda.l d0,a0
    a560:	|  |  |  |      move.l (a0),d0
    a562:	|  |  |  |      lsl.l #3,d0
    a564:	|  |  |  |      movea.l d1,a0
    a566:	|  |  |  |      adda.l d0,a0
    a568:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a56e:	|  |  |  |      movea.l 68(sp),a0
    a572:	|  |  |  |      move.l (a0),d1
    a574:	|  |  |  |      movea.l 64(sp),a0
    a578:	|  |  |  |      move.l (a0),d0
    a57a:	|  |  |  |      move.l d1,-(sp)
    a57c:	|  |  |  |      move.l d0,-(sp)
    a57e:	|  |  |  |      move.l 24(sp),-(sp)
    a582:	|  |  |  |      move.l 32(sp),-(sp)
    a586:	|  |  |  |      move.l 40(sp),-(sp)
    a58a:	|  |  |  |      move.l 48(sp),-(sp)
    a58e:	|  |  |  |      lea 28(sp),a0
    a592:	|  |  |  |      move.l a0,-(sp)
    a594:	|  |  |  |      lea 36(sp),a0
    a598:	|  |  |  |      move.l a0,-(sp)
    a59a:	|  |  |  |      jsr 15d46 <closestPointOnLine>
    a5a0:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a5a4:	|  |  |  |      movea.l 64(sp),a0
    a5a8:	|  |  |  |      move.l (a0),d0
    a5aa:	|  |  |  |      move.l 8(sp),d1
    a5ae:	|  |  |  |      move.l d0,d2
    a5b0:	|  |  |  |      sub.l d1,d2
    a5b2:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a5b6:	|  |  |  |      movea.l 68(sp),a0
    a5ba:	|  |  |  |      move.l (a0),d0
    a5bc:	|  |  |  |      move.l 4(sp),d1
    a5c0:	|  |  |  |      move.l d0,d2
    a5c2:	|  |  |  |      sub.l d1,d2
    a5c4:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a5c8:	|  |  |  |      move.l 28(sp),-(sp)
    a5cc:	|  |  |  |      move.l 32(sp),-(sp)
    a5d0:	|  |  |  |      jsr 178b8 <__mulsi3>
    a5d6:	|  |  |  |      addq.l #8,sp
    a5d8:	|  |  |  |      move.l d0,d2
    a5da:	|  |  |  |      move.l 24(sp),-(sp)
    a5de:	|  |  |  |      move.l 28(sp),-(sp)
    a5e2:	|  |  |  |      jsr 178b8 <__mulsi3>
    a5e8:	|  |  |  |      addq.l #8,sp
    a5ea:	|  |  |  |      move.l d2,d1
    a5ec:	|  |  |  |      add.l d0,d1
    a5ee:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a5f2:	|  |  |  |      move.l 12(sp),d2
    a5f6:	|  |  |  |      cmp.l 32(sp),d2
    a5fa:	|  |  |  |  ,-- bge.s a614 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a5fc:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a602:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a608:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a60e:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a614:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a61a:	|  |  |  |      addq.l #1,40(sp)
    a61e:	|  |  |  '----> movea.l 1a8c0 <currentFloor>,a0
    a624:	|  |  |         move.l 12(a0),d1
    a628:	|  |  |         move.l 44(sp),d0
    a62c:	|  |  |         lsl.l #3,d0
    a62e:	|  |  |         movea.l d1,a0
    a630:	|  |  |         adda.l d0,a0
    a632:	|  |  |         move.l (a0),d0
    a634:	|  |  |         cmp.l 40(sp),d0
    a638:	|  |  '-------- bgt.w a492 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a63c:	|  |            addq.l #1,44(sp)
    a640:	|  '----------> movea.l 1a8c0 <currentFloor>,a0
    a646:	|               move.l 8(a0),d0
    a64a:	|               cmp.l 44(sp),d0
    a64e:	'-------------- bgt.w a46c <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a652:	                moveq #-1,d0
    a654:	                cmp.l 48(sp),d0
    a658:	            ,-- bne.s a65e <handleClosestPoint+0x21e>
    a65a:	            |   clr.w d0
    a65c:	         ,--|-- bra.s a678 <handleClosestPoint+0x238>
	*setX = gotX;
    a65e:	         |  '-> movea.l 64(sp),a0
    a662:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a666:	         |      movea.l 68(sp),a0
    a66a:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a66e:	         |      movea.l 72(sp),a0
    a672:	         |      move.l 48(sp),(a0)

	return TRUE;
    a676:	         |      moveq #1,d0
}
    a678:	         '----> move.l (sp)+,d2
    a67a:	                lea 56(sp),sp
    a67e:	                rts

0000a680 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a680:	clr.l 1a81c <personRegion+0x10>
	personRegion.sY = 0;
    a686:	clr.l 1a820 <personRegion+0x14>
	personRegion.di = -1;
    a68c:	moveq #-1,d0
    a68e:	move.l d0,1a824 <personRegion+0x18>
	allScreenRegions = NULL;
    a694:	clr.l 1a8b4 <allScreenRegions>

	return TRUE;
    a69a:	moveq #1,d0
}
    a69c:	rts

0000a69e <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a69e:	          subq.l #4,sp
    a6a0:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a6a2:	          tst.l 12(sp)
    a6a6:	      ,-- bne.s a6ae <jumpPerson+0x10>
    a6a8:	      |   tst.l 16(sp)
    a6ac:	,-----|-- beq.s a722 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a6ae:	|     '-> move.l 20(sp),-(sp)
    a6b2:	|         jsr a344 <findPerson>
    a6b8:	|         addq.l #4,sp
    a6ba:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a6be:	|  ,----- beq.s a726 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a6c0:	|  |      movea.l 4(sp),a0
    a6c4:	|  |      move.l 68(a0),d0
    a6c8:	|  |  ,-- beq.s a6dc <jumpPerson+0x3e>
    a6ca:	|  |  |   movea.l 4(sp),a0
    a6ce:	|  |  |   move.l 68(a0),d0
    a6d2:	|  |  |   move.l d0,-(sp)
    a6d4:	|  |  |   jsr 43bc <abortFunction>
    a6da:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a6dc:	|  |  '-> movea.l 4(sp),a0
    a6e0:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a6e4:	|  |      movea.l 4(sp),a0
    a6e8:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a6ec:	|  |      movea.l 4(sp),a0
    a6f0:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a6f4:	|  |      move.l 16(sp),-(sp)
    a6f8:	|  |      jsr 1735e <__floatsisf>
    a6fe:	|  |      addq.l #4,sp
    a700:	|  |      move.l d0,d2
    a702:	|  |      move.l 12(sp),-(sp)
    a706:	|  |      jsr 1735e <__floatsisf>
    a70c:	|  |      addq.l #4,sp
    a70e:	|  |      move.l d2,-(sp)
    a710:	|  |      move.l d0,-(sp)
    a712:	|  |      move.l 12(sp),-(sp)
    a716:	|  |      jsr aa8c <moveAndScale>
    a71c:	|  |      lea 12(sp),sp
    a720:	|  |  ,-- bra.s a728 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    a722:	'--|--|-> nop
    a724:	   |  +-- bra.s a728 <jumpPerson+0x8a>
    if (!moveMe) return;
    a726:	   '--|-> nop
}
    a728:	      '-> move.l (sp)+,d2
    a72a:	          addq.l #4,sp
    a72c:	          rts

0000a72e <killAllPeople>:


void killAllPeople () {
    a72e:	          subq.l #8,sp
    a730:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    a732:	   ,----- bra.s a79e <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    a734:	,--|----> movea.l 1a808 <allPeople>,a0
    a73a:	|  |      move.l 68(a0),d0
    a73e:	|  |  ,-- beq.s a754 <killAllPeople+0x26>
    a740:	|  |  |   movea.l 1a808 <allPeople>,a0
    a746:	|  |  |   move.l 68(a0),d0
    a74a:	|  |  |   move.l d0,-(sp)
    a74c:	|  |  |   jsr 43bc <abortFunction>
    a752:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    a754:	|  |  '-> movea.l 1a808 <allPeople>,a0
    a75a:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    a75e:	|  |      move.l 1a808 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    a766:	|  |      movea.l 1a808 <allPeople>,a0
    a76c:	|  |      move.l 36(a0),d0
    a770:	|  |      move.l d0,1a808 <allPeople>
		removeObjectType (killPeople -> thisType);
    a776:	|  |      movea.l 8(sp),a0
    a77a:	|  |      move.l 114(a0),d0
    a77e:	|  |      move.l d0,-(sp)
    a780:	|  |      jsr d5ee <removeObjectType>
    a786:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    a788:	|  |      move.l 8(sp),4(sp)
    a78e:	|  |      move.l 1a7a4 <SysBase>,d0
    a794:	|  |      movea.l d0,a6
    a796:	|  |      movea.l 4(sp),a1
    a79a:	|  |      jsr -690(a6)
	while (allPeople) {
    a79e:	|  '----> move.l 1a808 <allPeople>,d0
    a7a4:	'-------- bne.s a734 <killAllPeople+0x6>
	}
}
    a7a6:	          nop
    a7a8:	          nop
    a7aa:	          movea.l (sp)+,a6
    a7ac:	          addq.l #8,sp
    a7ae:	          rts

0000a7b0 <killMostPeople>:

void killMostPeople() {
    a7b0:	          lea -12(sp),sp
    a7b4:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    a7b6:	          move.l #108552,12(sp)

    while (*lookyHere) {
    a7be:	   ,----- bra.w a844 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    a7c2:	,--|----> movea.l 12(sp),a0
    a7c6:	|  |      movea.l (a0),a0
    a7c8:	|  |      move.l 118(a0),d0
    a7cc:	|  |      moveq #32,d1
    a7ce:	|  |      and.l d1,d0
    a7d0:	|  |  ,-- beq.s a7e2 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    a7d2:	|  |  |   movea.l 12(sp),a0
    a7d6:	|  |  |   move.l (a0),d0
    a7d8:	|  |  |   moveq #36,d1
    a7da:	|  |  |   add.l d0,d1
    a7dc:	|  |  |   move.l d1,12(sp)
    a7e0:	|  +--|-- bra.s a844 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    a7e2:	|  |  '-> movea.l 12(sp),a0
    a7e6:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    a7ea:	|  |      movea.l 8(sp),a0
    a7ee:	|  |      move.l 36(a0),d0
    a7f2:	|  |      movea.l 12(sp),a0
    a7f6:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    a7f8:	|  |      movea.l 8(sp),a0
    a7fc:	|  |      move.l 68(a0),d0
    a800:	|  |  ,-- beq.s a814 <killMostPeople+0x64>
    a802:	|  |  |   movea.l 8(sp),a0
    a806:	|  |  |   move.l 68(a0),d0
    a80a:	|  |  |   move.l d0,-(sp)
    a80c:	|  |  |   jsr 43bc <abortFunction>
    a812:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    a814:	|  |  '-> movea.l 8(sp),a0
    a818:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    a81c:	|  |      movea.l 8(sp),a0
    a820:	|  |      move.l 114(a0),d0
    a824:	|  |      move.l d0,-(sp)
    a826:	|  |      jsr d5ee <removeObjectType>
    a82c:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    a82e:	|  |      move.l 8(sp),4(sp)
    a834:	|  |      move.l 1a7a4 <SysBase>,d0
    a83a:	|  |      movea.l d0,a6
    a83c:	|  |      movea.l 4(sp),a1
    a840:	|  |      jsr -690(a6)
    while (*lookyHere) {
    a844:	|  '----> movea.l 12(sp),a0
    a848:	|         move.l (a0),d0
    a84a:	'-------- bne.w a7c2 <killMostPeople+0x12>
        }
    }
}
    a84e:	          nop
    a850:	          nop
    a852:	          movea.l (sp)+,a6
    a854:	          lea 12(sp),sp
    a858:	          rts

0000a85a <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    a85a:	clr.l -(sp)
    a85c:	move.l sp,d0
    a85e:	addq.l #8,d0
    a860:	move.l d0,-(sp)
    a862:	jsr 7e1a <setFrames>
    a868:	addq.l #8,sp
}
    a86a:	nop
    a86c:	rts

0000a86e <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a86e:	          lea -12(sp),sp
    a872:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    a874:	          tst.l 20(sp)
    a878:	      ,-- bne.s a886 <makeWalkingPerson+0x18>
    a87a:	      |   tst.l 24(sp)
    a87e:	      +-- bne.s a886 <makeWalkingPerson+0x18>
    a880:	      |   clr.w d0
    a882:	,-----|-- bra.w aa1e <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    a886:	|     '-> movea.l 1a8c0 <currentFloor>,a0
    a88c:	|         move.l 8(a0),d0
    a890:	|     ,-- bne.s a898 <makeWalkingPerson+0x2a>
    a892:	|     |   clr.w d0
    a894:	+-----|-- bra.w aa1e <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    a898:	|     '-> move.l 28(sp),-(sp)
    a89c:	|         jsr a344 <findPerson>
    a8a2:	|         addq.l #4,sp
    a8a4:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    a8a8:	|     ,-- bne.s a8b0 <makeWalkingPerson+0x42>
    a8aa:	|     |   clr.w d0
    a8ac:	+-----|-- bra.w aa1e <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    a8b0:	|     '-> movea.l 12(sp),a0
    a8b4:	|         move.l 68(a0),d0
    a8b8:	|     ,-- beq.s a8cc <makeWalkingPerson+0x5e>
    a8ba:	|     |   movea.l 12(sp),a0
    a8be:	|     |   move.l 68(a0),d0
    a8c2:	|     |   move.l d0,-(sp)
    a8c4:	|     |   jsr 43bc <abortFunction>
    a8ca:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    a8cc:	|     '-> movea.l 12(sp),a0
    a8d0:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    a8d4:	|         movea.l 12(sp),a0
    a8d8:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    a8de:	|         movea.l 12(sp),a0
    a8e2:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    a8e8:	|         movea.l 12(sp),a0
    a8ec:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    a8f2:	|         movea.l 12(sp),a0
    a8f6:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    a8fc:	|         move.l 24(sp),-(sp)
    a900:	|         move.l 24(sp),-(sp)
    a904:	|         jsr 1628e <inFloor>
    a90a:	|         addq.l #8,sp
    a90c:	|         movea.l 12(sp),a0
    a910:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    a914:	|         movea.l 12(sp),a0
    a918:	|         move.l 60(a0),d0
    a91c:	|         moveq #-1,d1
    a91e:	|         cmp.l d0,d1
    a920:	|     ,-- bne.s a950 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    a922:	|     |   movea.w #60,a0
    a926:	|     |   adda.l 12(sp),a0
    a92a:	|     |   moveq #44,d1
    a92c:	|     |   add.l 12(sp),d1
    a930:	|     |   moveq #40,d0
    a932:	|     |   add.l 12(sp),d0
    a936:	|     |   move.l a0,-(sp)
    a938:	|     |   move.l d1,-(sp)
    a93a:	|     |   move.l d0,-(sp)
    a93c:	|     |   jsr a440 <handleClosestPoint>
    a942:	|     |   lea 12(sp),sp
    a946:	|     |   tst.w d0
    a948:	|     +-- bne.s a950 <makeWalkingPerson+0xe2>
    a94a:	|     |   clr.w d0
    a94c:	+-----|-- bra.w aa1e <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    a950:	|     '-> movea.l 12(sp),a0
    a954:	|         move.l 4(a0),d0
    a958:	|         move.l d0,-(sp)
    a95a:	|         jsr 172f6 <__fixsfsi>
    a960:	|         addq.l #4,sp
    a962:	|         move.l d0,d2
    a964:	|         movea.l 12(sp),a0
    a968:	|         move.l (a0),d0
    a96a:	|         move.l d0,-(sp)
    a96c:	|         jsr 172f6 <__fixsfsi>
    a972:	|         addq.l #4,sp
    a974:	|         move.l d2,-(sp)
    a976:	|         move.l d0,-(sp)
    a978:	|         jsr 1628e <inFloor>
    a97e:	|         addq.l #8,sp
    a980:	|         movea.l 12(sp),a0
    a984:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    a988:	|         movea.l 12(sp),a0
    a98c:	|         move.l 56(a0),d0
    a990:	|         moveq #-1,d1
    a992:	|         cmp.l d0,d1
    a994:	|     ,-- bne.s a9e6 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    a996:	|     |   movea.l 12(sp),a0
    a99a:	|     |   move.l (a0),d0
    a99c:	|     |   move.l d0,-(sp)
    a99e:	|     |   jsr 172f6 <__fixsfsi>
    a9a4:	|     |   addq.l #4,sp
    a9a6:	|     |   move.l d0,8(sp)
    a9aa:	|     |   movea.l 12(sp),a0
    a9ae:	|     |   move.l 4(a0),d0
    a9b2:	|     |   move.l d0,-(sp)
    a9b4:	|     |   jsr 172f6 <__fixsfsi>
    a9ba:	|     |   addq.l #4,sp
    a9bc:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    a9c0:	|     |   moveq #56,d0
    a9c2:	|     |   add.l 12(sp),d0
    a9c6:	|     |   move.l d0,-(sp)
    a9c8:	|     |   lea 8(sp),a0
    a9cc:	|     |   move.l a0,-(sp)
    a9ce:	|     |   moveq #16,d0
    a9d0:	|     |   add.l sp,d0
    a9d2:	|     |   move.l d0,-(sp)
    a9d4:	|     |   jsr a440 <handleClosestPoint>
    a9da:	|     |   lea 12(sp),sp
    a9de:	|     |   tst.w d0
    a9e0:	|     +-- bne.s a9e6 <makeWalkingPerson+0x178>
    a9e2:	|     |   clr.w d0
    a9e4:	+-----|-- bra.s aa1e <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    a9e6:	|     '-> move.l 12(sp),-(sp)
    a9ea:	|         jsr 96a6 <doBorderStuff>
    a9f0:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    a9f2:	|         clr.l -(sp)
    a9f4:	|         move.l 16(sp),-(sp)
    a9f8:	|         jsr bc8a <walkMe>
    a9fe:	|         addq.l #8,sp
    aa00:	|         tst.w d0
    aa02:	|     ,-- bne.s aa0e <makeWalkingPerson+0x1a0>
    aa04:	|     |   movea.l 12(sp),a0
    aa08:	|     |   move.w 66(a0),d0
    aa0c:	|  ,--|-- beq.s aa1c <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    aa0e:	|  |  '-> movea.l 12(sp),a0
    aa12:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    aa18:	|  |      moveq #1,d0
    aa1a:	+--|----- bra.s aa1e <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    aa1c:	|  '----> clr.w d0
	}
}
    aa1e:	'-------> move.l (sp)+,d2
    aa20:	          lea 12(sp),sp
    aa24:	          rts

0000aa26 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    aa26:	       lea -16(sp),sp
    aa2a:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    aa2c:	       moveq #12,d0
    aa2e:	       move.l d0,16(sp)
    aa32:	       clr.l 12(sp)
    aa36:	       move.l 1a7a4 <SysBase>,d0
    aa3c:	       movea.l d0,a6
    aa3e:	       move.l 16(sp),d0
    aa42:	       move.l 12(sp),d1
    aa46:	       jsr -684(a6)
    aa4a:	       move.l d0,8(sp)
    aa4e:	       move.l 8(sp),d0
    aa52:	       move.l d0,4(sp)
    if(newAnim == 0) {
    aa56:	   ,-- bne.s aa6a <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    aa58:	   |   pea 18e50 <PutChar+0x1482>
    aa5e:	   |   jsr 16f2c <KPrintF>
    aa64:	   |   addq.l #4,sp
        return NULL;    
    aa66:	   |   moveq #0,d0
    aa68:	,--|-- bra.s aa84 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    aa6a:	|  '-> movea.l 4(sp),a0
    aa6e:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    aa70:	|      movea.l 4(sp),a0
    aa74:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    aa78:	|      movea.l 4(sp),a0
    aa7c:	|      clr.l 4(a0)
	return newAnim;
    aa80:	|      move.l 4(sp),d0
}
    aa84:	'----> movea.l (sp)+,a6
    aa86:	       lea 16(sp),sp
    aa8a:	       rts

0000aa8c <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    aa8c:	    move.l d2,-(sp)
	me->x = x;
    aa8e:	    movea.l 8(sp),a0
    aa92:	    move.l 12(sp),(a0)
	me->y = y;
    aa96:	    movea.l 8(sp),a0
    aa9a:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    aaa0:	    movea.l 8(sp),a0
    aaa4:	    clr.l 8(a0)
	me->oldy = 0;
    aaa8:	    movea.l 8(sp),a0
    aaac:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    aab0:	    movea.l 8(sp),a0
    aab4:	    move.l 118(a0),d0
    aab8:	    moveq #2,d1
    aaba:	    and.l d1,d0
    aabc:	,-- bne.s ab14 <moveAndScale+0x88>
    aabe:	|   move.w 1a138 <scaleDivide>,d0
    aac4:	+-- beq.s ab14 <moveAndScale+0x88>
    aac6:	|   movea.l 8(sp),a0
    aaca:	|   move.l 4(a0),d2
    aace:	|   move.w 1a136 <scaleHorizon>,d0
    aad4:	|   movea.w d0,a0
    aad6:	|   move.l a0,-(sp)
    aad8:	|   jsr 1735e <__floatsisf>
    aade:	|   addq.l #4,sp
    aae0:	|   move.l d0,-(sp)
    aae2:	|   move.l d2,-(sp)
    aae4:	|   jsr 17652 <__subsf3>
    aaea:	|   addq.l #8,sp
    aaec:	|   move.l d0,d2
    aaee:	|   move.w 1a138 <scaleDivide>,d0
    aaf4:	|   movea.w d0,a0
    aaf6:	|   move.l a0,-(sp)
    aaf8:	|   jsr 1735e <__floatsisf>
    aafe:	|   addq.l #4,sp
    ab00:	|   move.l d0,-(sp)
    ab02:	|   move.l d2,-(sp)
    ab04:	|   jsr 17214 <__divsf3>
    ab0a:	|   addq.l #8,sp
    ab0c:	|   movea.l 8(sp),a0
    ab10:	|   move.l d0,32(a0)
}
    ab14:	'-> nop
    ab16:	    move.l (sp)+,d2
    ab18:	    rts

0000ab1a <removeOneCharacter>:

void removeOneCharacter (int i) {
    ab1a:	          lea -16(sp),sp
    ab1e:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    ab20:	          move.l 24(sp),-(sp)
    ab24:	          jsr a344 <findPerson>
    ab2a:	          addq.l #4,sp
    ab2c:	          move.l d0,8(sp)

    if (p) {
    ab30:	,-------- beq.w ac10 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    ab34:	|         move.l 1a8b8 <overRegion>,d0
    ab3a:	|         cmpi.l #108556,d0
    ab40:	|     ,-- bne.s ab5e <removeOneCharacter+0x44>
    ab42:	|     |   movea.l 1a8b8 <overRegion>,a0
    ab48:	|     |   move.l 28(a0),d1
    ab4c:	|     |   movea.l 8(sp),a0
    ab50:	|     |   move.l 114(a0),d0
    ab54:	|     |   cmp.l d1,d0
    ab56:	|     +-- bne.s ab5e <removeOneCharacter+0x44>
            overRegion = NULL;
    ab58:	|     |   clr.l 1a8b8 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    ab5e:	|     '-> movea.l 8(sp),a0
    ab62:	|         move.l 68(a0),d0
    ab66:	|     ,-- beq.s ab7a <removeOneCharacter+0x60>
    ab68:	|     |   movea.l 8(sp),a0
    ab6c:	|     |   move.l 68(a0),d0
    ab70:	|     |   move.l d0,-(sp)
    ab72:	|     |   jsr 43bc <abortFunction>
    ab78:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    ab7a:	|     '-> movea.l 8(sp),a0
    ab7e:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    ab82:	|         clr.l 12(sp)
    ab86:	|     ,-- bra.s abae <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    ab88:	|  ,--|-> movea.l 8(sp),a0
    ab8c:	|  |  |   movea.l 80(a0),a0
    ab90:	|  |  |   move.l (a0),d1
    ab92:	|  |  |   move.l 12(sp),d0
    ab96:	|  |  |   add.l d0,d0
    ab98:	|  |  |   add.l d0,d0
    ab9a:	|  |  |   movea.l d1,a0
    ab9c:	|  |  |   adda.l d0,a0
    ab9e:	|  |  |   move.l (a0),d0
    aba0:	|  |  |   move.l d0,-(sp)
    aba2:	|  |  |   jsr 9622 <deleteAnim>
    aba8:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    abaa:	|  |  |   addq.l #1,12(sp)
    abae:	|  |  '-> moveq #2,d0
    abb0:	|  |      cmp.l 12(sp),d0
    abb4:	|  '----- bge.s ab88 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    abb6:	|         move.l #108552,16(sp)
    abbe:	|     ,-- bra.s abce <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    abc0:	|  ,--|-> movea.l 16(sp),a0
    abc4:	|  |  |   move.l (a0),d0
    abc6:	|  |  |   moveq #36,d1
    abc8:	|  |  |   add.l d0,d1
    abca:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    abce:	|  |  '-> movea.l 16(sp),a0
    abd2:	|  |      move.l (a0),d0
    abd4:	|  |      cmp.l 8(sp),d0
    abd8:	|  '----- bne.s abc0 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    abda:	|         movea.l 8(sp),a0
    abde:	|         move.l 36(a0),d0
    abe2:	|         movea.l 16(sp),a0
    abe6:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    abe8:	|         movea.l 8(sp),a0
    abec:	|         move.l 114(a0),d0
    abf0:	|         move.l d0,-(sp)
    abf2:	|         jsr d5ee <removeObjectType>
    abf8:	|         addq.l #4,sp
        FreeVec(p);
    abfa:	|         move.l 8(sp),4(sp)
    ac00:	|         move.l 1a7a4 <SysBase>,d0
    ac06:	|         movea.l d0,a6
    ac08:	|         movea.l 4(sp),a1
    ac0c:	|         jsr -690(a6)
    }
}
    ac10:	'-------> nop
    ac12:	          movea.l (sp)+,a6
    ac14:	          lea 16(sp),sp
    ac18:	          rts

0000ac1a <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    ac1a:	       subq.l #8,sp
    ac1c:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    ac1e:	       movea.l 16(sp),a0
    ac22:	       movea.l 80(a0),a0
    ac26:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    ac2c:	       movea.l 16(sp),a0
    ac30:	       move.l 92(a0),d2
    ac34:	       move.l 4(sp),-(sp)
    ac38:	       pea b4 <_start+0xb4>
    ac3c:	       jsr 17936 <__divsi3>
    ac42:	       addq.l #8,sp
    ac44:	       add.l d2,d0
    ac46:	       move.l d0,d1
    ac48:	       addi.l #180,d1
    ac4e:	       movea.l 16(sp),a0
    ac52:	       move.l 100(a0),d0
    ac56:	       move.l d1,d2
    ac58:	       add.l d0,d2
    ac5a:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    ac5e:	   ,-- bra.s ac68 <rethinkAngle+0x4e>
    ac60:	,--|-> addi.l #-360,8(sp)
    ac68:	|  '-> cmpi.l #359,8(sp)
    ac70:	'----- bgt.s ac60 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    ac72:	       move.l 4(sp),-(sp)
    ac76:	       move.l 12(sp),-(sp)
    ac7a:	       jsr 178b8 <__mulsi3>
    ac80:	       addq.l #8,sp
    ac82:	       pea 168 <decodeFilename+0x50>
    ac86:	       move.l d0,-(sp)
    ac88:	       jsr 17936 <__divsi3>
    ac8e:	       addq.l #8,sp
    ac90:	       movea.l 16(sp),a0
    ac94:	       move.l d0,106(a0)
}
    ac98:	       nop
    ac9a:	       move.l (sp)+,d2
    ac9c:	       addq.l #8,sp
    ac9e:	       rts

0000aca0 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    aca0:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    aca2:	          movea.l 8(sp),a0
    aca6:	          move.l 8(a0),d0
    acaa:	          move.l 12(sp),-(sp)
    acae:	          move.l d0,-(sp)
    acb0:	          jsr 8d0 <put2bytes>
    acb6:	          addq.l #8,sp
	if (p -> numFrames) {
    acb8:	          movea.l 8(sp),a0
    acbc:	          move.l 8(a0),d0
    acc0:	,-------- beq.w ad64 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    acc4:	|         movea.l 8(sp),a0
    acc8:	|         movea.l (a0),a0
    acca:	|         move.l (a0),d0
    accc:	|         move.l 12(sp),-(sp)
    acd0:	|         move.l d0,-(sp)
    acd2:	|         jsr 958 <put4bytes>
    acd8:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    acda:	|         clr.l (sp)
    acdc:	|     ,-- bra.s ad56 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    acde:	|  ,--|-> movea.l 8(sp),a0
    ace2:	|  |  |   movea.l 4(a0),a0
    ace6:	|  |  |   move.l (sp),d1
    ace8:	|  |  |   move.l d1,d0
    acea:	|  |  |   add.l d0,d0
    acec:	|  |  |   add.l d1,d0
    acee:	|  |  |   add.l d0,d0
    acf0:	|  |  |   add.l d0,d0
    acf2:	|  |  |   adda.l d0,a0
    acf4:	|  |  |   move.l (a0),d0
    acf6:	|  |  |   move.l 12(sp),-(sp)
    acfa:	|  |  |   move.l d0,-(sp)
    acfc:	|  |  |   jsr 958 <put4bytes>
    ad02:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    ad04:	|  |  |   movea.l 8(sp),a0
    ad08:	|  |  |   movea.l 4(a0),a0
    ad0c:	|  |  |   move.l (sp),d1
    ad0e:	|  |  |   move.l d1,d0
    ad10:	|  |  |   add.l d0,d0
    ad12:	|  |  |   add.l d1,d0
    ad14:	|  |  |   add.l d0,d0
    ad16:	|  |  |   add.l d0,d0
    ad18:	|  |  |   adda.l d0,a0
    ad1a:	|  |  |   move.l 4(a0),d0
    ad1e:	|  |  |   move.l 12(sp),-(sp)
    ad22:	|  |  |   move.l d0,-(sp)
    ad24:	|  |  |   jsr 958 <put4bytes>
    ad2a:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    ad2c:	|  |  |   movea.l 8(sp),a0
    ad30:	|  |  |   movea.l 4(a0),a0
    ad34:	|  |  |   move.l (sp),d1
    ad36:	|  |  |   move.l d1,d0
    ad38:	|  |  |   add.l d0,d0
    ad3a:	|  |  |   add.l d1,d0
    ad3c:	|  |  |   add.l d0,d0
    ad3e:	|  |  |   add.l d0,d0
    ad40:	|  |  |   adda.l d0,a0
    ad42:	|  |  |   move.l 8(a0),d0
    ad46:	|  |  |   move.l 12(sp),-(sp)
    ad4a:	|  |  |   move.l d0,-(sp)
    ad4c:	|  |  |   jsr 958 <put4bytes>
    ad52:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    ad54:	|  |  |   addq.l #1,(sp)
    ad56:	|  |  '-> movea.l 8(sp),a0
    ad5a:	|  |      move.l 8(a0),d0
    ad5e:	|  |      cmp.l (sp),d0
    ad60:	|  '----- bgt.w acde <saveAnim+0x3e>
		}
	}
	return TRUE;
    ad64:	'-------> moveq #1,d0
}
    ad66:	          addq.l #4,sp
    ad68:	          rts

0000ad6a <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    ad6a:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    ad6c:	             movea.l 8(sp),a0
    ad70:	             move.l 4(a0),d0
    ad74:	             move.l 12(sp),-(sp)
    ad78:	             move.l d0,-(sp)
    ad7a:	             jsr 8d0 <put2bytes>
    ad80:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    ad82:	             clr.l (sp)
    ad84:	   ,-------- bra.s adb0 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    ad86:	,--|-------> movea.l 8(sp),a0
    ad8a:	|  |         move.l (a0),d1
    ad8c:	|  |         move.l (sp),d0
    ad8e:	|  |         add.l d0,d0
    ad90:	|  |         add.l d0,d0
    ad92:	|  |         movea.l d1,a0
    ad94:	|  |         adda.l d0,a0
    ad96:	|  |         move.l (a0),d0
    ad98:	|  |         move.l 12(sp),-(sp)
    ad9c:	|  |         move.l d0,-(sp)
    ad9e:	|  |         jsr aca0 <saveAnim>
    ada4:	|  |         addq.l #8,sp
    ada6:	|  |         tst.w d0
    ada8:	|  |     ,-- bne.s adae <saveCostume+0x44>
    adaa:	|  |     |   clr.w d0
    adac:	|  |  ,--|-- bra.s adc4 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    adae:	|  |  |  '-> addq.l #1,(sp)
    adb0:	|  '--|----> movea.l 8(sp),a0
    adb4:	|     |      move.l 4(a0),d1
    adb8:	|     |      move.l d1,d0
    adba:	|     |      add.l d0,d0
    adbc:	|     |      add.l d1,d0
    adbe:	|     |      cmp.l (sp),d0
    adc0:	'-----|----- bgt.s ad86 <saveCostume+0x1c>
	}

	return TRUE;
    adc2:	      |      moveq #1,d0
}
    adc4:	      '----> addq.l #4,sp
    adc6:	             rts

0000adc8 <savePeople>:

BOOL savePeople (BPTR fp) {
    adc8:	             lea -144(sp),sp
    adcc:	             move.l a6,-(sp)
    adce:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    add0:	             move.l 1a808 <allPeople>,148(sp)
	int countPeople = 0, a;
    add8:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    addc:	             move.w 1a136 <scaleHorizon>,d0
    ade2:	             movea.w d0,a0
    ade4:	             move.l 156(sp),-(sp)
    ade8:	             move.l a0,-(sp)
    adea:	             jsr a9c <putSigned>
    adf0:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    adf2:	             move.w 1a138 <scaleDivide>,d0
    adf8:	             movea.w d0,a0
    adfa:	             move.l 156(sp),-(sp)
    adfe:	             move.l a0,-(sp)
    ae00:	             jsr a9c <putSigned>
    ae06:	             addq.l #8,sp

	while (me) {
    ae08:	         ,-- bra.s ae18 <savePeople+0x50>
		countPeople ++;
    ae0a:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    ae0e:	      |  |   movea.l 148(sp),a0
    ae12:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    ae18:	      |  '-> tst.l 148(sp)
    ae1c:	      '----- bne.s ae0a <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    ae1e:	             move.l 156(sp),-(sp)
    ae22:	             move.l 148(sp),-(sp)
    ae26:	             jsr 8d0 <put2bytes>
    ae2c:	             addq.l #8,sp

	me = allPeople;
    ae2e:	             move.l 1a808 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    ae36:	             clr.l 140(sp)
    ae3a:	   ,-------- bra.w b292 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    ae3e:	,--|-------> movea.l 148(sp),a0
    ae42:	|  |         move.l (a0),d0
    ae44:	|  |         move.l 156(sp),-(sp)
    ae48:	|  |         move.l d0,-(sp)
    ae4a:	|  |         jsr a46 <putFloat>
    ae50:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    ae52:	|  |         movea.l 148(sp),a0
    ae56:	|  |         move.l 4(a0),d0
    ae5a:	|  |         move.l 156(sp),-(sp)
    ae5e:	|  |         move.l d0,-(sp)
    ae60:	|  |         jsr a46 <putFloat>
    ae66:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    ae68:	|  |         movea.l 148(sp),a0
    ae6c:	|  |         move.l 80(a0),d0
    ae70:	|  |         move.l 156(sp),-(sp)
    ae74:	|  |         move.l d0,-(sp)
    ae76:	|  |         jsr ad6a <saveCostume>
    ae7c:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    ae7e:	|  |         movea.l 148(sp),a0
    ae82:	|  |         move.l 72(a0),d0
    ae86:	|  |         move.l 156(sp),-(sp)
    ae8a:	|  |         move.l d0,-(sp)
    ae8c:	|  |         jsr aca0 <saveAnim>
    ae92:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    ae94:	|  |         move.l 156(sp),136(sp)
    ae9a:	|  |         movea.l 148(sp),a0
    ae9e:	|  |         move.l 72(a0),d1
    aea2:	|  |         movea.l 148(sp),a0
    aea6:	|  |         move.l 76(a0),d0
    aeaa:	|  |         cmp.l d1,d0
    aeac:	|  |         seq d0
    aeae:	|  |         neg.b d0
    aeb0:	|  |         move.b d0,d0
    aeb2:	|  |         andi.l #255,d0
    aeb8:	|  |         move.l d0,132(sp)
    aebc:	|  |         move.l 1a7ac <DOSBase>,d0
    aec2:	|  |         movea.l d0,a6
    aec4:	|  |         move.l 136(sp),d1
    aec8:	|  |         move.l 132(sp),d2
    aecc:	|  |         jsr -312(a6)
    aed0:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    aed4:	|  |         movea.l 148(sp),a0
    aed8:	|  |         move.l 32(a0),d0
    aedc:	|  |         move.l 156(sp),-(sp)
    aee0:	|  |         move.l d0,-(sp)
    aee2:	|  |         jsr a46 <putFloat>
    aee8:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    aeea:	|  |         movea.l 148(sp),a0
    aeee:	|  |         move.l 118(a0),d0
    aef2:	|  |         move.l 156(sp),-(sp)
    aef6:	|  |         move.l d0,-(sp)
    aef8:	|  |         jsr 8d0 <put2bytes>
    aefe:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    af00:	|  |         movea.l 148(sp),a0
    af04:	|  |         move.l 20(a0),d0
    af08:	|  |         move.l 156(sp),-(sp)
    af0c:	|  |         move.l d0,-(sp)
    af0e:	|  |         jsr 8d0 <put2bytes>
    af14:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    af16:	|  |         movea.l 148(sp),a0
    af1a:	|  |         move.l 40(a0),d0
    af1e:	|  |         move.l 156(sp),-(sp)
    af22:	|  |         move.l d0,-(sp)
    af24:	|  |         jsr 8d0 <put2bytes>
    af2a:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    af2c:	|  |         movea.l 148(sp),a0
    af30:	|  |         move.l 44(a0),d0
    af34:	|  |         move.l 156(sp),-(sp)
    af38:	|  |         move.l d0,-(sp)
    af3a:	|  |         jsr 8d0 <put2bytes>
    af40:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    af42:	|  |         movea.l 148(sp),a0
    af46:	|  |         move.l 48(a0),d0
    af4a:	|  |         move.l 156(sp),-(sp)
    af4e:	|  |         move.l d0,-(sp)
    af50:	|  |         jsr 8d0 <put2bytes>
    af56:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    af58:	|  |         movea.l 148(sp),a0
    af5c:	|  |         move.l 52(a0),d0
    af60:	|  |         move.l 156(sp),-(sp)
    af64:	|  |         move.l d0,-(sp)
    af66:	|  |         jsr 8d0 <put2bytes>
    af6c:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    af6e:	|  |         movea.l 148(sp),a0
    af72:	|  |         move.l 84(a0),d0
    af76:	|  |         move.l 156(sp),-(sp)
    af7a:	|  |         move.l d0,-(sp)
    af7c:	|  |         jsr 8d0 <put2bytes>
    af82:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    af84:	|  |         movea.l 148(sp),a0
    af88:	|  |         move.l 88(a0),d0
    af8c:	|  |         move.l 156(sp),-(sp)
    af90:	|  |         move.l d0,-(sp)
    af92:	|  |         jsr 8d0 <put2bytes>
    af98:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    af9a:	|  |         movea.l 148(sp),a0
    af9e:	|  |         move.l 28(a0),d0
    afa2:	|  |         move.l 156(sp),-(sp)
    afa6:	|  |         move.l d0,-(sp)
    afa8:	|  |         jsr 8d0 <put2bytes>
    afae:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    afb0:	|  |         movea.l 148(sp),a0
    afb4:	|  |         move.l 122(a0),d0
    afb8:	|  |         move.l 156(sp),-(sp)
    afbc:	|  |         move.l d0,-(sp)
    afbe:	|  |         jsr 8d0 <put2bytes>
    afc4:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    afc6:	|  |         movea.l 148(sp),a0
    afca:	|  |         move.l 24(a0),d0
    afce:	|  |         move.l d0,d0
    afd0:	|  |         movea.w d0,a0
    afd2:	|  |         move.l 156(sp),-(sp)
    afd6:	|  |         move.l a0,-(sp)
    afd8:	|  |         jsr a9c <putSigned>
    afde:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    afe0:	|  |         move.l 156(sp),124(sp)
    afe6:	|  |         movea.l 148(sp),a0
    afea:	|  |         move.w 104(a0),d0
    afee:	|  |         movea.w d0,a0
    aff0:	|  |         move.l a0,120(sp)
    aff4:	|  |         move.l 1a7ac <DOSBase>,d0
    affa:	|  |         movea.l d0,a6
    affc:	|  |         move.l 124(sp),d1
    b000:	|  |         move.l 120(sp),d2
    b004:	|  |         jsr -312(a6)
    b008:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b00c:	|  |         move.l 156(sp),112(sp)
    b012:	|  |         movea.l 148(sp),a0
    b016:	|  |         move.w 64(a0),d0
    b01a:	|  |         movea.w d0,a0
    b01c:	|  |         move.l a0,108(sp)
    b020:	|  |         move.l 1a7ac <DOSBase>,d0
    b026:	|  |         movea.l d0,a6
    b028:	|  |         move.l 112(sp),d1
    b02c:	|  |         move.l 108(sp),d2
    b030:	|  |         jsr -312(a6)
    b034:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b038:	|  |         move.l 156(sp),100(sp)
    b03e:	|  |         movea.l 148(sp),a0
    b042:	|  |         move.w 66(a0),d0
    b046:	|  |         movea.w d0,a0
    b048:	|  |         move.l a0,96(sp)
    b04c:	|  |         move.l 1a7ac <DOSBase>,d0
    b052:	|  |         movea.l d0,a6
    b054:	|  |         move.l 100(sp),d1
    b058:	|  |         move.l 96(sp),d2
    b05c:	|  |         jsr -312(a6)
    b060:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b064:	|  |         movea.l 148(sp),a0
    b068:	|  |         move.l 68(a0),d0
    b06c:	|  |  ,----- beq.s b0aa <savePeople+0x2e2>
			FPutC (fp, 1);
    b06e:	|  |  |      move.l 156(sp),76(sp)
    b074:	|  |  |      moveq #1,d0
    b076:	|  |  |      move.l d0,72(sp)
    b07a:	|  |  |      move.l 1a7ac <DOSBase>,d0
    b080:	|  |  |      movea.l d0,a6
    b082:	|  |  |      move.l 76(sp),d1
    b086:	|  |  |      move.l 72(sp),d2
    b08a:	|  |  |      jsr -312(a6)
    b08e:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b092:	|  |  |      movea.l 148(sp),a0
    b096:	|  |  |      move.l 68(a0),d0
    b09a:	|  |  |      move.l 156(sp),-(sp)
    b09e:	|  |  |      move.l d0,-(sp)
    b0a0:	|  |  |      jsr c2c4 <saveFunction>
    b0a6:	|  |  |      addq.l #8,sp
    b0a8:	|  |  |  ,-- bra.s b0ce <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b0aa:	|  |  '--|-> move.l 156(sp),88(sp)
    b0b0:	|  |     |   moveq #1,d0
    b0b2:	|  |     |   move.l d0,84(sp)
    b0b6:	|  |     |   move.l 1a7ac <DOSBase>,d0
    b0bc:	|  |     |   movea.l d0,a6
    b0be:	|  |     |   move.l 88(sp),d1
    b0c2:	|  |     |   move.l 84(sp),d2
    b0c6:	|  |     |   jsr -312(a6)
    b0ca:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b0ce:	|  |     '-> movea.l 148(sp),a0
    b0d2:	|  |         move.l 106(a0),d0
    b0d6:	|  |         move.l 156(sp),-(sp)
    b0da:	|  |         move.l d0,-(sp)
    b0dc:	|  |         jsr 8d0 <put2bytes>
    b0e2:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b0e4:	|  |         movea.l 148(sp),a0
    b0e8:	|  |         move.l 92(a0),d0
    b0ec:	|  |         move.l 156(sp),-(sp)
    b0f0:	|  |         move.l d0,-(sp)
    b0f2:	|  |         jsr 8d0 <put2bytes>
    b0f8:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b0fa:	|  |         movea.l 148(sp),a0
    b0fe:	|  |         move.l 100(a0),d0
    b102:	|  |         move.l 156(sp),-(sp)
    b106:	|  |         move.l d0,-(sp)
    b108:	|  |         jsr 8d0 <put2bytes>
    b10e:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b110:	|  |         movea.l 148(sp),a0
    b114:	|  |         move.l 96(a0),d0
    b118:	|  |         move.l 156(sp),-(sp)
    b11c:	|  |         move.l d0,-(sp)
    b11e:	|  |         jsr 8d0 <put2bytes>
    b124:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b126:	|  |         movea.l 148(sp),a0
    b12a:	|  |         move.l 110(a0),d0
    b12e:	|  |         move.l d0,d0
    b130:	|  |         movea.w d0,a0
    b132:	|  |         move.l 156(sp),-(sp)
    b136:	|  |         move.l a0,-(sp)
    b138:	|  |         jsr a9c <putSigned>
    b13e:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b140:	|  |         movea.l 148(sp),a0
    b144:	|  |         move.l 56(a0),d0
    b148:	|  |         move.l d0,d0
    b14a:	|  |         movea.w d0,a0
    b14c:	|  |         move.l 156(sp),-(sp)
    b150:	|  |         move.l a0,-(sp)
    b152:	|  |         jsr a9c <putSigned>
    b158:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b15a:	|  |         movea.l 148(sp),a0
    b15e:	|  |         move.l 60(a0),d0
    b162:	|  |         move.l d0,d0
    b164:	|  |         movea.w d0,a0
    b166:	|  |         move.l 156(sp),-(sp)
    b16a:	|  |         move.l a0,-(sp)
    b16c:	|  |         jsr a9c <putSigned>
    b172:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b174:	|  |         move.l 156(sp),64(sp)
    b17a:	|  |         movea.l 148(sp),a0
    b17e:	|  |         move.b 126(a0),d0
    b182:	|  |         move.b d0,d0
    b184:	|  |         andi.l #255,d0
    b18a:	|  |         move.l d0,60(sp)
    b18e:	|  |         move.l 1a7ac <DOSBase>,d0
    b194:	|  |         movea.l d0,a6
    b196:	|  |         move.l 64(sp),d1
    b19a:	|  |         move.l 60(sp),d2
    b19e:	|  |         jsr -312(a6)
    b1a2:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b1a6:	|  |         move.l 156(sp),52(sp)
    b1ac:	|  |         movea.l 148(sp),a0
    b1b0:	|  |         move.b 127(a0),d0
    b1b4:	|  |         move.b d0,d0
    b1b6:	|  |         andi.l #255,d0
    b1bc:	|  |         move.l d0,48(sp)
    b1c0:	|  |         move.l 1a7ac <DOSBase>,d0
    b1c6:	|  |         movea.l d0,a6
    b1c8:	|  |         move.l 52(sp),d1
    b1cc:	|  |         move.l 48(sp),d2
    b1d0:	|  |         jsr -312(a6)
    b1d4:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b1d8:	|  |         move.l 156(sp),40(sp)
    b1de:	|  |         movea.l 148(sp),a0
    b1e2:	|  |         move.b 128(a0),d0
    b1e6:	|  |         move.b d0,d0
    b1e8:	|  |         andi.l #255,d0
    b1ee:	|  |         move.l d0,36(sp)
    b1f2:	|  |         move.l 1a7ac <DOSBase>,d0
    b1f8:	|  |         movea.l d0,a6
    b1fa:	|  |         move.l 40(sp),d1
    b1fe:	|  |         move.l 36(sp),d2
    b202:	|  |         jsr -312(a6)
    b206:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b20a:	|  |         move.l 156(sp),28(sp)
    b210:	|  |         movea.l 148(sp),a0
    b214:	|  |         move.b 129(a0),d0
    b218:	|  |         move.b d0,d0
    b21a:	|  |         andi.l #255,d0
    b220:	|  |         move.l d0,24(sp)
    b224:	|  |         move.l 1a7ac <DOSBase>,d0
    b22a:	|  |         movea.l d0,a6
    b22c:	|  |         move.l 28(sp),d1
    b230:	|  |         move.l 24(sp),d2
    b234:	|  |         jsr -312(a6)
    b238:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b23c:	|  |         move.l 156(sp),16(sp)
    b242:	|  |         movea.l 148(sp),a0
    b246:	|  |         move.b 130(a0),d0
    b24a:	|  |         move.b d0,d0
    b24c:	|  |         andi.l #255,d0
    b252:	|  |         move.l d0,12(sp)
    b256:	|  |         move.l 1a7ac <DOSBase>,d0
    b25c:	|  |         movea.l d0,a6
    b25e:	|  |         move.l 16(sp),d1
    b262:	|  |         move.l 12(sp),d2
    b266:	|  |         jsr -312(a6)
    b26a:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b26e:	|  |         movea.l 148(sp),a0
    b272:	|  |         move.l 114(a0),d0
    b276:	|  |         move.l 156(sp),-(sp)
    b27a:	|  |         move.l d0,-(sp)
    b27c:	|  |         jsr d68e <saveObjectRef>
    b282:	|  |         addq.l #8,sp

		me = me -> next;
    b284:	|  |         movea.l 148(sp),a0
    b288:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b28e:	|  |         addq.l #1,140(sp)
    b292:	|  '-------> movea.l 140(sp),a0
    b296:	|            cmpa.l 144(sp),a0
    b29a:	'----------- blt.w ae3e <savePeople+0x76>
	}
	return TRUE;
    b29e:	             moveq #1,d0
}
    b2a0:	             move.l (sp)+,d2
    b2a2:	             movea.l (sp)+,a6
    b2a4:	             lea 144(sp),sp
    b2a8:	             rts

0000b2aa <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b2aa:	movea.l 4(sp),a0
    b2ae:	move.l 8(sp),(a0)
}
    b2b2:	nop
    b2b4:	rts

0000b2b6 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b2b6:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b2b8:	       move.l 12(sp),-(sp)
    b2bc:	       jsr a344 <findPerson>
    b2c2:	       addq.l #4,sp
    b2c4:	       move.l d0,(sp)
	if (! moveMe) return;
    b2c6:	,----- beq.s b2da <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b2c8:	|      move.l 8(sp),-(sp)
    b2cc:	|      move.l 4(sp),-(sp)
    b2d0:	|      jsr b2e0 <setMyDrawMode>
    b2d6:	|      addq.l #8,sp
    b2d8:	|  ,-- bra.s b2dc <setDrawMode+0x26>
	if (! moveMe) return;
    b2da:	'--|-> nop
}
    b2dc:	   '-> addq.l #4,sp
    b2de:	       rts

0000b2e0 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b2e0:	       moveq #19,d0
    b2e2:	       cmp.l 8(sp),d0
    b2e6:	,----- bcs.w b7be <setMyDrawMode+0x4de>
    b2ea:	|      move.l 8(sp),d0
    b2ee:	|      add.l d0,d0
    b2f0:	|      movea.l d0,a0
    b2f2:	|      adda.l #45822,a0
    b2f8:	|      move.w (a0),d0
    b2fa:	|      jmp (b2fe <setMyDrawMode+0x1e>,pc,d0.w)
    b2fe:	|      .short 0x04c0
    b300:	|      ori.l #6684712,-(a4)
    b306:	|      btst d0,-(a0)
    b308:	|      bchg d0,(a6)+
    b30a:	|      bclr d0,(a4)+
    b30c:	|      bset d0,(a2)+
    b30e:	|      andi.b #84,(a6)
    b312:	|      andi.l #55575312,(a2)
    b318:	|      .short 0x02d0
    b31a:	|      bclr d1,(a0)
    b31c:	|      .short 0x044a
    b31e:	|      .short 0x040c
    b320:	|      movep.l d1,1158(a6)
    b324:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b326:	|      movea.l 4(sp),a0
    b32a:	|      clr.b 128(a0)
    b32e:	|      movea.l 4(sp),a0
    b332:	|      move.b 128(a0),d0
    b336:	|      movea.l 4(sp),a0
    b33a:	|      move.b d0,127(a0)
    b33e:	|      movea.l 4(sp),a0
    b342:	|      move.b 127(a0),d0
    b346:	|      movea.l 4(sp),a0
    b34a:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b34e:	|      movea.l 4(sp),a0
    b352:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b356:	|      movea.l 4(sp),a0
    b35a:	|      move.b #64,130(a0)
			break;
    b360:	|  ,-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b364:	|  |   movea.l 4(sp),a0
    b368:	|  |   clr.b 128(a0)
    b36c:	|  |   movea.l 4(sp),a0
    b370:	|  |   move.b 128(a0),d0
    b374:	|  |   movea.l 4(sp),a0
    b378:	|  |   move.b d0,127(a0)
    b37c:	|  |   movea.l 4(sp),a0
    b380:	|  |   move.b 127(a0),d0
    b384:	|  |   movea.l 4(sp),a0
    b388:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b38c:	|  |   movea.l 4(sp),a0
    b390:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b394:	|  |   movea.l 4(sp),a0
    b398:	|  |   move.b #-128,130(a0)
			break;
    b39e:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b3a2:	|  |   movea.l 4(sp),a0
    b3a6:	|  |   clr.b 128(a0)
    b3aa:	|  |   movea.l 4(sp),a0
    b3ae:	|  |   move.b 128(a0),d0
    b3b2:	|  |   movea.l 4(sp),a0
    b3b6:	|  |   move.b d0,127(a0)
    b3ba:	|  |   movea.l 4(sp),a0
    b3be:	|  |   move.b 127(a0),d0
    b3c2:	|  |   movea.l 4(sp),a0
    b3c6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b3ca:	|  |   movea.l 4(sp),a0
    b3ce:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b3d2:	|  |   movea.l 4(sp),a0
    b3d6:	|  |   move.b #-64,130(a0)
			break;
    b3dc:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b3e0:	|  |   movea.l 4(sp),a0
    b3e4:	|  |   clr.b 128(a0)
    b3e8:	|  |   movea.l 4(sp),a0
    b3ec:	|  |   move.b 128(a0),d0
    b3f0:	|  |   movea.l 4(sp),a0
    b3f4:	|  |   move.b d0,127(a0)
    b3f8:	|  |   movea.l 4(sp),a0
    b3fc:	|  |   move.b 127(a0),d0
    b400:	|  |   movea.l 4(sp),a0
    b404:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b408:	|  |   movea.l 4(sp),a0
    b40c:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b410:	|  |   movea.l 4(sp),a0
    b414:	|  |   move.b #-2,130(a0)
			break;
    b41a:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b41e:	|  |   movea.l 4(sp),a0
    b422:	|  |   clr.b 128(a0)
    b426:	|  |   movea.l 4(sp),a0
    b42a:	|  |   move.b 128(a0),d0
    b42e:	|  |   movea.l 4(sp),a0
    b432:	|  |   move.b d0,127(a0)
    b436:	|  |   movea.l 4(sp),a0
    b43a:	|  |   move.b 127(a0),d0
    b43e:	|  |   movea.l 4(sp),a0
    b442:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b446:	|  |   movea.l 4(sp),a0
    b44a:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b450:	|  |   movea.l 4(sp),a0
    b454:	|  |   clr.b 130(a0)
			break;
    b458:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b45c:	|  |   movea.l 4(sp),a0
    b460:	|  |   clr.b 128(a0)
    b464:	|  |   movea.l 4(sp),a0
    b468:	|  |   move.b 128(a0),d0
    b46c:	|  |   movea.l 4(sp),a0
    b470:	|  |   move.b d0,127(a0)
    b474:	|  |   movea.l 4(sp),a0
    b478:	|  |   move.b 127(a0),d0
    b47c:	|  |   movea.l 4(sp),a0
    b480:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b484:	|  |   movea.l 4(sp),a0
    b488:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b48e:	|  |   movea.l 4(sp),a0
    b492:	|  |   clr.b 130(a0)
			break;
    b496:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b49a:	|  |   movea.l 4(sp),a0
    b49e:	|  |   clr.b 128(a0)
    b4a2:	|  |   movea.l 4(sp),a0
    b4a6:	|  |   move.b 128(a0),d0
    b4aa:	|  |   movea.l 4(sp),a0
    b4ae:	|  |   move.b d0,127(a0)
    b4b2:	|  |   movea.l 4(sp),a0
    b4b6:	|  |   move.b 127(a0),d0
    b4ba:	|  |   movea.l 4(sp),a0
    b4be:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b4c2:	|  |   movea.l 4(sp),a0
    b4c6:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b4cc:	|  |   movea.l 4(sp),a0
    b4d0:	|  |   clr.b 130(a0)
			break;
    b4d4:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b4d8:	|  |   movea.l 4(sp),a0
    b4dc:	|  |   clr.b 128(a0)
    b4e0:	|  |   movea.l 4(sp),a0
    b4e4:	|  |   move.b 128(a0),d0
    b4e8:	|  |   movea.l 4(sp),a0
    b4ec:	|  |   move.b d0,127(a0)
    b4f0:	|  |   movea.l 4(sp),a0
    b4f4:	|  |   move.b 127(a0),d0
    b4f8:	|  |   movea.l 4(sp),a0
    b4fc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b500:	|  |   movea.l 4(sp),a0
    b504:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b508:	|  |   movea.l 4(sp),a0
    b50c:	|  |   clr.b 130(a0)
			break;
    b510:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b514:	|  |   movea.l 4(sp),a0
    b518:	|  |   clr.b 128(a0)
    b51c:	|  |   movea.l 4(sp),a0
    b520:	|  |   move.b 128(a0),d0
    b524:	|  |   movea.l 4(sp),a0
    b528:	|  |   move.b d0,127(a0)
    b52c:	|  |   movea.l 4(sp),a0
    b530:	|  |   move.b 127(a0),d0
    b534:	|  |   movea.l 4(sp),a0
    b538:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b53c:	|  |   movea.l 4(sp),a0
    b540:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b544:	|  |   movea.l 4(sp),a0
    b548:	|  |   move.b #64,130(a0)
			break;
    b54e:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b552:	|  |   movea.l 4(sp),a0
    b556:	|  |   clr.b 128(a0)
    b55a:	|  |   movea.l 4(sp),a0
    b55e:	|  |   move.b 128(a0),d0
    b562:	|  |   movea.l 4(sp),a0
    b566:	|  |   move.b d0,127(a0)
    b56a:	|  |   movea.l 4(sp),a0
    b56e:	|  |   move.b 127(a0),d0
    b572:	|  |   movea.l 4(sp),a0
    b576:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b57a:	|  |   movea.l 4(sp),a0
    b57e:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b582:	|  |   movea.l 4(sp),a0
    b586:	|  |   move.b #-128,130(a0)
			break;
    b58c:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b590:	|  |   movea.l 4(sp),a0
    b594:	|  |   clr.b 128(a0)
    b598:	|  |   movea.l 4(sp),a0
    b59c:	|  |   move.b 128(a0),d0
    b5a0:	|  |   movea.l 4(sp),a0
    b5a4:	|  |   move.b d0,127(a0)
    b5a8:	|  |   movea.l 4(sp),a0
    b5ac:	|  |   move.b 127(a0),d0
    b5b0:	|  |   movea.l 4(sp),a0
    b5b4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b5b8:	|  |   movea.l 4(sp),a0
    b5bc:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b5c0:	|  |   movea.l 4(sp),a0
    b5c4:	|  |   move.b #-64,130(a0)
			break;
    b5ca:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b5ce:	|  |   movea.l 4(sp),a0
    b5d2:	|  |   move.b #-128,128(a0)
    b5d8:	|  |   movea.l 4(sp),a0
    b5dc:	|  |   move.b 128(a0),d0
    b5e0:	|  |   movea.l 4(sp),a0
    b5e4:	|  |   move.b d0,127(a0)
    b5e8:	|  |   movea.l 4(sp),a0
    b5ec:	|  |   move.b 127(a0),d0
    b5f0:	|  |   movea.l 4(sp),a0
    b5f4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b5f8:	|  |   movea.l 4(sp),a0
    b5fc:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b602:	|  |   movea.l 4(sp),a0
    b606:	|  |   clr.b 130(a0)
			break;
    b60a:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b60e:	|  |   movea.l 4(sp),a0
    b612:	|  |   move.b #-128,128(a0)
    b618:	|  |   movea.l 4(sp),a0
    b61c:	|  |   move.b 128(a0),d0
    b620:	|  |   movea.l 4(sp),a0
    b624:	|  |   move.b d0,127(a0)
    b628:	|  |   movea.l 4(sp),a0
    b62c:	|  |   move.b 127(a0),d0
    b630:	|  |   movea.l 4(sp),a0
    b634:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b638:	|  |   movea.l 4(sp),a0
    b63c:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b642:	|  |   movea.l 4(sp),a0
    b646:	|  |   clr.b 130(a0)
			break;
    b64a:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b64e:	|  |   movea.l 4(sp),a0
    b652:	|  |   move.b #-128,128(a0)
    b658:	|  |   movea.l 4(sp),a0
    b65c:	|  |   move.b 128(a0),d0
    b660:	|  |   movea.l 4(sp),a0
    b664:	|  |   move.b d0,127(a0)
    b668:	|  |   movea.l 4(sp),a0
    b66c:	|  |   move.b 127(a0),d0
    b670:	|  |   movea.l 4(sp),a0
    b674:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b678:	|  |   movea.l 4(sp),a0
    b67c:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b682:	|  |   movea.l 4(sp),a0
    b686:	|  |   clr.b 130(a0)
			break;
    b68a:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b68e:	|  |   movea.l 4(sp),a0
    b692:	|  |   move.b #-128,128(a0)
    b698:	|  |   movea.l 4(sp),a0
    b69c:	|  |   move.b 128(a0),d0
    b6a0:	|  |   movea.l 4(sp),a0
    b6a4:	|  |   move.b d0,127(a0)
    b6a8:	|  |   movea.l 4(sp),a0
    b6ac:	|  |   move.b 127(a0),d0
    b6b0:	|  |   movea.l 4(sp),a0
    b6b4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b6b8:	|  |   movea.l 4(sp),a0
    b6bc:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b6c0:	|  |   movea.l 4(sp),a0
    b6c4:	|  |   clr.b 130(a0)
			break;
    b6c8:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b6cc:	|  |   movea.l 4(sp),a0
    b6d0:	|  |   st 128(a0)
    b6d4:	|  |   movea.l 4(sp),a0
    b6d8:	|  |   move.b 128(a0),d0
    b6dc:	|  |   movea.l 4(sp),a0
    b6e0:	|  |   move.b d0,127(a0)
    b6e4:	|  |   movea.l 4(sp),a0
    b6e8:	|  |   move.b 127(a0),d0
    b6ec:	|  |   movea.l 4(sp),a0
    b6f0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b6f4:	|  |   movea.l 4(sp),a0
    b6f8:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b6fe:	|  |   movea.l 4(sp),a0
    b702:	|  |   clr.b 130(a0)
			break;
    b706:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b70a:	|  |   movea.l 4(sp),a0
    b70e:	|  |   st 128(a0)
    b712:	|  |   movea.l 4(sp),a0
    b716:	|  |   move.b 128(a0),d0
    b71a:	|  |   movea.l 4(sp),a0
    b71e:	|  |   move.b d0,127(a0)
    b722:	|  |   movea.l 4(sp),a0
    b726:	|  |   move.b 127(a0),d0
    b72a:	|  |   movea.l 4(sp),a0
    b72e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b732:	|  |   movea.l 4(sp),a0
    b736:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b73c:	|  |   movea.l 4(sp),a0
    b740:	|  |   clr.b 130(a0)
			break;
    b744:	|  +-- bra.w b7f8 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b748:	|  |   movea.l 4(sp),a0
    b74c:	|  |   st 128(a0)
    b750:	|  |   movea.l 4(sp),a0
    b754:	|  |   move.b 128(a0),d0
    b758:	|  |   movea.l 4(sp),a0
    b75c:	|  |   move.b d0,127(a0)
    b760:	|  |   movea.l 4(sp),a0
    b764:	|  |   move.b 127(a0),d0
    b768:	|  |   movea.l 4(sp),a0
    b76c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b770:	|  |   movea.l 4(sp),a0
    b774:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b77a:	|  |   movea.l 4(sp),a0
    b77e:	|  |   clr.b 130(a0)
			break;
    b782:	|  +-- bra.s b7f8 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b784:	|  |   movea.l 4(sp),a0
    b788:	|  |   st 128(a0)
    b78c:	|  |   movea.l 4(sp),a0
    b790:	|  |   move.b 128(a0),d0
    b794:	|  |   movea.l 4(sp),a0
    b798:	|  |   move.b d0,127(a0)
    b79c:	|  |   movea.l 4(sp),a0
    b7a0:	|  |   move.b 127(a0),d0
    b7a4:	|  |   movea.l 4(sp),a0
    b7a8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b7ac:	|  |   movea.l 4(sp),a0
    b7b0:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b7b4:	|  |   movea.l 4(sp),a0
    b7b8:	|  |   clr.b 130(a0)
			break;
    b7bc:	|  +-- bra.s b7f8 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7be:	'--|-> movea.l 4(sp),a0
    b7c2:	   |   clr.b 128(a0)
    b7c6:	   |   movea.l 4(sp),a0
    b7ca:	   |   move.b 128(a0),d0
    b7ce:	   |   movea.l 4(sp),a0
    b7d2:	   |   move.b d0,127(a0)
    b7d6:	   |   movea.l 4(sp),a0
    b7da:	   |   move.b 127(a0),d0
    b7de:	   |   movea.l 4(sp),a0
    b7e2:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b7e6:	   |   movea.l 4(sp),a0
    b7ea:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    b7ee:	   |   movea.l 4(sp),a0
    b7f2:	   |   clr.b 130(a0)
			break;
    b7f6:	   |   nop
	}
}
    b7f8:	   '-> nop
    b7fa:	       rts

0000b7fc <shufflePeople>:

void shufflePeople () {
    b7fc:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    b800:	             move.l #108552,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    b808:	             move.l 1a808 <allPeople>,d0
    b80e:	,----------- beq.w b8e4 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    b812:	|     ,----- bra.w b8d4 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    b816:	|  ,--|----> movea.l 16(sp),a0
    b81a:	|  |  |      movea.l (a0),a0
    b81c:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    b822:	|  |  |      movea.l 16(sp),a0
    b826:	|  |  |      movea.l (a0),a0
    b828:	|  |  |      move.l 118(a0),d0
    b82c:	|  |  |      moveq #1,d1
    b82e:	|  |  |      and.l d1,d0
    b830:	|  |  |  ,-- beq.s b848 <shufflePeople+0x4c>
    b832:	|  |  |  |   move.l #1148846080,-(sp)
    b838:	|  |  |  |   move.l 16(sp),-(sp)
    b83c:	|  |  |  |   jsr 1711a <__addsf3>
    b842:	|  |  |  |   addq.l #8,sp
    b844:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    b848:	|  |  |  '-> movea.l 16(sp),a0
    b84c:	|  |  |      movea.l (a0),a0
    b84e:	|  |  |      movea.l 36(a0),a0
    b852:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    b858:	|  |  |      movea.l 16(sp),a0
    b85c:	|  |  |      movea.l (a0),a0
    b85e:	|  |  |      movea.l 36(a0),a0
    b862:	|  |  |      move.l 118(a0),d0
    b866:	|  |  |      moveq #1,d1
    b868:	|  |  |      and.l d1,d0
    b86a:	|  |  |  ,-- beq.s b882 <shufflePeople+0x86>
    b86c:	|  |  |  |   move.l #1148846080,-(sp)
    b872:	|  |  |  |   move.l 12(sp),-(sp)
    b876:	|  |  |  |   jsr 1711a <__addsf3>
    b87c:	|  |  |  |   addq.l #8,sp
    b87e:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    b882:	|  |  |  '-> move.l 8(sp),-(sp)
    b886:	|  |  |      move.l 16(sp),-(sp)
    b88a:	|  |  |      jsr 174ca <__gtsf2>
    b890:	|  |  |      addq.l #8,sp
    b892:	|  |  |      tst.l d0
    b894:	|  |  |  ,-- ble.s b8c6 <shufflePeople+0xca>
			A = (*thisReference);
    b896:	|  |  |  |   movea.l 16(sp),a0
    b89a:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    b89e:	|  |  |  |   movea.l 16(sp),a0
    b8a2:	|  |  |  |   movea.l (a0),a0
    b8a4:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    b8a8:	|  |  |  |   movea.l (sp),a0
    b8aa:	|  |  |  |   move.l 36(a0),d0
    b8ae:	|  |  |  |   movea.l 4(sp),a0
    b8b2:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    b8b6:	|  |  |  |   movea.l (sp),a0
    b8b8:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    b8be:	|  |  |  |   movea.l 16(sp),a0
    b8c2:	|  |  |  |   move.l (sp),(a0)
    b8c4:	|  |  +--|-- bra.s b8d4 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    b8c6:	|  |  |  '-> movea.l 16(sp),a0
    b8ca:	|  |  |      move.l (a0),d0
    b8cc:	|  |  |      moveq #36,d1
    b8ce:	|  |  |      add.l d0,d1
    b8d0:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    b8d4:	|  |  '----> movea.l 16(sp),a0
    b8d8:	|  |         movea.l (a0),a0
    b8da:	|  |         move.l 36(a0),d0
    b8de:	|  '-------- bne.w b816 <shufflePeople+0x1a>
    b8e2:	|        ,-- bra.s b8e6 <shufflePeople+0xea>
	if (!allPeople) return;
    b8e4:	'--------|-> nop
		}
	}
}
    b8e6:	         '-> lea 20(sp),sp
    b8ea:	             rts

0000b8ec <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    b8ec:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    b8ee:	       tst.l 8(sp)
    b8f2:	   ,-- bgt.s b8f8 <setCharacterWalkSpeed+0xc>
    b8f4:	   |   clr.w d0
    b8f6:	,--|-- bra.s b916 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    b8f8:	|  '-> move.l 12(sp),-(sp)
    b8fc:	|      jsr a344 <findPerson>
    b902:	|      addq.l #4,sp
    b904:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    b906:	|  ,-- bne.s b90c <setCharacterWalkSpeed+0x20>
    b908:	|  |   clr.w d0
    b90a:	+--|-- bra.s b916 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    b90c:	|  '-> movea.l (sp),a0
    b90e:	|      move.l 8(sp),28(a0)
	return TRUE;
    b914:	|      moveq #1,d0
}
    b916:	'----> addq.l #4,sp
    b918:	       rts

0000b91a <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    b91a:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    b91c:	       move.l 8(sp),-(sp)
    b920:	       jsr a344 <findPerson>
    b926:	       addq.l #4,sp
    b928:	       move.l d0,(sp)
    if (thisPerson) {
    b92a:	,----- beq.s b94a <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    b92c:	|      movea.l (sp),a0
    b92e:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    b934:	|      moveq #2,d0
    b936:	|      and.l 12(sp),d0
    b93a:	|  ,-- beq.s b946 <setPersonExtra+0x2c>
    b93c:	|  |   movea.l (sp),a0
    b93e:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    b946:	|  '-> moveq #1,d0
    b948:	|  ,-- bra.s b94c <setPersonExtra+0x32>
    }
    return FALSE;
    b94a:	'--|-> clr.w d0
}
    b94c:	   '-> addq.l #4,sp
    b94e:	       rts

0000b950 <setScale>:


void setScale (short int h, short int d) {
    b950:	subq.l #4,sp
    b952:	move.l 8(sp),d1
    b956:	move.l 12(sp),d0
    b95a:	move.w d1,d1
    b95c:	move.w d1,2(sp)
    b960:	move.w d0,d0
    b962:	move.w d0,(sp)
	scaleHorizon = h;
    b964:	move.w 2(sp),1a136 <scaleHorizon>
	scaleDivide = d;
    b96c:	move.w (sp),1a138 <scaleDivide>
}
    b972:	nop
    b974:	addq.l #4,sp
    b976:	rts

0000b978 <setShown>:

void setShown (BOOL h, int ob) {
    b978:	    subq.l #8,sp
    b97a:	    move.l 12(sp),d0
    b97e:	    move.w d0,d0
    b980:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    b984:	    move.l 16(sp),-(sp)
    b988:	    jsr a344 <findPerson>
    b98e:	    addq.l #4,sp
    b990:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    b994:	,-- beq.s b9a0 <setShown+0x28>
    b996:	|   movea.l 4(sp),a0
    b99a:	|   move.w 2(sp),104(a0)
}
    b9a0:	'-> nop
    b9a2:	    addq.l #8,sp
    b9a4:	    rts

0000b9a6 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    b9a6:	       subq.l #8,sp
    b9a8:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    b9aa:	       movea.l 16(sp),a0
    b9ae:	       move.l 92(a0),d0
    b9b2:	       move.l d0,d1
    b9b4:	       addi.l #360,d1
    b9ba:	       movea.l 16(sp),a0
    b9be:	       move.l 96(a0),d0
    b9c2:	       move.l d1,d2
    b9c4:	       sub.l d0,d2
    b9c6:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    b9ca:	       movea.l 16(sp),a0
    b9ce:	       move.l 122(a0),d0
    b9d2:	   ,-- beq.s b9de <spinStep+0x38>
    b9d4:	   |   movea.l 16(sp),a0
    b9d8:	   |   move.l 122(a0),d0
    b9dc:	,--|-- bra.s b9f8 <spinStep+0x52>
    b9de:	|  '-> movea.l 16(sp),a0
    b9e2:	|      movea.l 80(a0),a0
    b9e6:	|      move.l 4(a0),d0
    b9ea:	|      move.l d0,-(sp)
    b9ec:	|      pea 168 <decodeFilename+0x50>
    b9f0:	|      jsr 17936 <__divsi3>
    b9f6:	|      addq.l #8,sp
    b9f8:	'----> move.l d0,4(sp)
	while (diff > 180) {
    b9fc:	   ,-- bra.s ba06 <spinStep+0x60>
		diff -= 360;
    b9fe:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    ba06:	|  '-> cmpi.l #180,8(sp)
    ba0e:	'----- bgt.s b9fe <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    ba10:	       move.l 8(sp),d0
    ba14:	       cmp.l 4(sp),d0
    ba18:	   ,-- blt.s ba36 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    ba1a:	   |   movea.l 16(sp),a0
    ba1e:	   |   move.l 92(a0),d0
    ba22:	   |   sub.l 4(sp),d0
    ba26:	   |   move.l d0,-(sp)
    ba28:	   |   move.l 20(sp),-(sp)
    ba2c:	   |   jsr bb16 <turnMeAngle>
    ba32:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    ba34:	,--|-- bra.s ba7c <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    ba36:	|  '-> move.l 4(sp),d0
    ba3a:	|      neg.l d0
    ba3c:	|      cmp.l 8(sp),d0
    ba40:	|  ,-- blt.s ba5e <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    ba42:	|  |   movea.l 16(sp),a0
    ba46:	|  |   move.l 92(a0),d0
    ba4a:	|  |   add.l 4(sp),d0
    ba4e:	|  |   move.l d0,-(sp)
    ba50:	|  |   move.l 20(sp),-(sp)
    ba54:	|  |   jsr bb16 <turnMeAngle>
    ba5a:	|  |   addq.l #8,sp
}
    ba5c:	+--|-- bra.s ba7c <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    ba5e:	|  '-> movea.l 16(sp),a0
    ba62:	|      move.l 96(a0),d0
    ba66:	|      move.l d0,-(sp)
    ba68:	|      move.l 20(sp),-(sp)
    ba6c:	|      jsr bb16 <turnMeAngle>
    ba72:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    ba74:	|      movea.l 16(sp),a0
    ba78:	|      clr.w 66(a0)
}
    ba7c:	'----> nop
    ba7e:	       move.l (sp)+,d2
    ba80:	       addq.l #8,sp
    ba82:	       rts

0000ba84 <stopPerson>:


BOOL stopPerson (int o) {
    ba84:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    ba86:	       move.l 8(sp),-(sp)
    ba8a:	       jsr a344 <findPerson>
    ba90:	       addq.l #4,sp
    ba92:	       move.l d0,(sp)
    if (moveMe)
    ba94:	,----- beq.s bad2 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    ba96:	|      movea.l (sp),a0
    ba98:	|      move.l 68(a0),d0
    ba9c:	+----- beq.s bad2 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    ba9e:	|      movea.l (sp),a0
    baa0:	|      move.l 68(a0),d0
    baa4:	|      move.l d0,-(sp)
    baa6:	|      jsr 43bc <abortFunction>
    baac:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    baae:	|      movea.l (sp),a0
    bab0:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bab4:	|      movea.l (sp),a0
    bab6:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    baba:	|      movea.l (sp),a0
    babc:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bac0:	|      clr.l -(sp)
    bac2:	|      move.l 4(sp),-(sp)
    bac6:	|      jsr 7e1a <setFrames>
    bacc:	|      addq.l #8,sp
            return TRUE;
    bace:	|      moveq #1,d0
    bad0:	|  ,-- bra.s bad4 <stopPerson+0x50>
        }
    return FALSE;
    bad2:	'--|-> clr.w d0
}
    bad4:	   '-> addq.l #4,sp
    bad6:	       rts

0000bad8 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bad8:	       subq.l #8,sp
	int total = 0;
    bada:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bade:	       clr.l (sp)
    bae0:	   ,-- bra.s bb02 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bae2:	,--|-> movea.l 12(sp),a0
    bae6:	|  |   movea.l 4(a0),a0
    baea:	|  |   move.l (sp),d1
    baec:	|  |   move.l d1,d0
    baee:	|  |   add.l d0,d0
    baf0:	|  |   add.l d1,d0
    baf2:	|  |   add.l d0,d0
    baf4:	|  |   add.l d0,d0
    baf6:	|  |   adda.l d0,a0
    baf8:	|  |   move.l 4(a0),d0
    bafc:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bb00:	|  |   addq.l #1,(sp)
    bb02:	|  '-> movea.l 12(sp),a0
    bb06:	|      move.l 8(a0),d0
    bb0a:	|      cmp.l (sp),d0
    bb0c:	'----- bgt.s bae2 <timeForAnim+0xa>
	}
	return total;
    bb0e:	       move.l 4(sp),d0
}
    bb12:	       addq.l #8,sp
    bb14:	       rts

0000bb16 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bb16:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bb18:	       movea.l 8(sp),a0
    bb1c:	       movea.l 80(a0),a0
    bb20:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    bb24:	       movea.l 8(sp),a0
    bb28:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    bb2e:	       move.l (sp),-(sp)
    bb30:	       pea b4 <_start+0xb4>
    bb34:	       jsr 17936 <__divsi3>
    bb3a:	       addq.l #8,sp
    bb3c:	       move.l d0,d1
    bb3e:	       addi.l #180,d1
    bb44:	       movea.l 8(sp),a0
    bb48:	       move.l 100(a0),d0
    bb4c:	       add.l d1,d0
    bb4e:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    bb52:	   ,-- bra.s bb5c <turnMeAngle+0x46>
    bb54:	,--|-> addi.l #-360,12(sp)
    bb5c:	|  '-> cmpi.l #359,12(sp)
    bb64:	'----- bgt.s bb54 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bb66:	       move.l (sp),-(sp)
    bb68:	       move.l 16(sp),-(sp)
    bb6c:	       jsr 178b8 <__mulsi3>
    bb72:	       addq.l #8,sp
    bb74:	       pea 168 <decodeFilename+0x50>
    bb78:	       move.l d0,-(sp)
    bb7a:	       jsr 17936 <__divsi3>
    bb80:	       addq.l #8,sp
    bb82:	       movea.l 8(sp),a0
    bb86:	       move.l d0,106(a0)
}
    bb8a:	       nop
    bb8c:	       addq.l #4,sp
    bb8e:	       rts

0000bb90 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    bb90:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bb92:	          move.l 8(sp),-(sp)
    bb96:	          jsr a344 <findPerson>
    bb9c:	          addq.l #4,sp
    bb9e:	          move.l d0,(sp)
    if (thisPerson) {
    bba0:	,-------- beq.s bc00 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bba2:	|         movea.l (sp),a0
    bba4:	|         move.l 68(a0),d0
    bba8:	|     ,-- beq.s bbba <turnPersonToFace+0x2a>
    bbaa:	|     |   movea.l (sp),a0
    bbac:	|     |   move.l 68(a0),d0
    bbb0:	|     |   move.l d0,-(sp)
    bbb2:	|     |   jsr 43bc <abortFunction>
    bbb8:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bbba:	|     '-> movea.l (sp),a0
    bbbc:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bbc0:	|         movea.l (sp),a0
    bbc2:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bbc6:	|         movea.l (sp),a0
    bbc8:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bbcc:	|         move.l 12(sp),-(sp)
    bbd0:	|         move.l 4(sp),-(sp)
    bbd4:	|         jsr bb16 <turnMeAngle>
    bbda:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bbdc:	|         movea.l 1a800 <speech>,a0
    bbe2:	|         move.l (a0),d0
    bbe4:	|         cmp.l (sp),d0
    bbe6:	|  ,----- bne.s bbec <turnPersonToFace+0x5c>
    bbe8:	|  |      moveq #2,d0
    bbea:	|  |  ,-- bra.s bbee <turnPersonToFace+0x5e>
    bbec:	|  '--|-> moveq #0,d0
    bbee:	|     '-> move.l d0,-(sp)
    bbf0:	|         move.l 4(sp),-(sp)
    bbf4:	|         jsr 7e1a <setFrames>
    bbfa:	|         addq.l #8,sp
        return TRUE;
    bbfc:	|         moveq #1,d0
    bbfe:	|     ,-- bra.s bc02 <turnPersonToFace+0x72>
    }
    return FALSE;
    bc00:	'-----|-> clr.w d0
}
    bc02:	      '-> addq.l #4,sp
    bc04:	          rts

0000bc06 <walkAllPeople>:

void walkAllPeople() {
    bc06:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    bc08:	             move.l 1a808 <allPeople>,(sp)

	while (thisPerson) {
    bc0e:	   ,-------- bra.s bc7e <walkAllPeople+0x78>
		if (thisPerson->walking) {
    bc10:	,--|-------> movea.l (sp),a0
    bc12:	|  |         move.w 64(a0),d0
    bc16:	|  |     ,-- beq.s bc2a <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    bc18:	|  |     |   pea 1 <_start+0x1>
    bc1c:	|  |     |   move.l 4(sp),-(sp)
    bc20:	|  |     |   jsr bc8a <walkMe>
    bc26:	|  |     |   addq.l #8,sp
    bc28:	|  |  ,--|-- bra.s bc4a <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    bc2a:	|  |  |  '-> movea.l (sp),a0
    bc2c:	|  |  |      move.w 66(a0),d0
    bc30:	|  |  +----- beq.s bc4a <walkAllPeople+0x44>
			spinStep(thisPerson);
    bc32:	|  |  |      move.l (sp),-(sp)
    bc34:	|  |  |      jsr b9a6 <spinStep>
    bc3a:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    bc3c:	|  |  |      clr.l -(sp)
    bc3e:	|  |  |      move.l 4(sp),-(sp)
    bc42:	|  |  |      jsr 7e1a <setFrames>
    bc48:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    bc4a:	|  |  '----> movea.l (sp),a0
    bc4c:	|  |         move.w 64(a0),d0
    bc50:	|  |     ,-- bne.s bc78 <walkAllPeople+0x72>
    bc52:	|  |     |   movea.l (sp),a0
    bc54:	|  |     |   move.w 66(a0),d0
    bc58:	|  |     +-- bne.s bc78 <walkAllPeople+0x72>
    bc5a:	|  |     |   movea.l (sp),a0
    bc5c:	|  |     |   move.l 68(a0),d0
    bc60:	|  |     +-- beq.s bc78 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    bc62:	|  |     |   movea.l (sp),a0
    bc64:	|  |     |   move.l 68(a0),d0
    bc68:	|  |     |   move.l d0,-(sp)
    bc6a:	|  |     |   jsr 652c <restartFunction>
    bc70:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    bc72:	|  |     |   movea.l (sp),a0
    bc74:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    bc78:	|  |     '-> movea.l (sp),a0
    bc7a:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    bc7e:	|  '-------> tst.l (sp)
    bc80:	'----------- bne.s bc10 <walkAllPeople+0xa>
	}
}
    bc82:	             nop
    bc84:	             nop
    bc86:	             addq.l #4,sp
    bc88:	             rts

0000bc8a <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bc8a:	                lea -20(sp),sp
    bc8e:	                move.l d3,-(sp)
    bc90:	                move.l d2,-(sp)
    bc92:	                move.l 36(sp),d0
    bc96:	                move.w d0,d0
    bc98:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bc9c:	                cmpi.w #-1,10(sp)
    bca2:	,-------------- bne.s bcaa <walkMe+0x20>
    bca4:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bcaa:	>-------------> movea.l 32(sp),a0
    bcae:	|               move.l 48(a0),d0
    bcb2:	|               move.l d0,-(sp)
    bcb4:	|               jsr 1735e <__floatsisf>
    bcba:	|               addq.l #4,sp
    bcbc:	|               move.l d0,d1
    bcbe:	|               movea.l 32(sp),a0
    bcc2:	|               move.l (a0),d0
    bcc4:	|               move.l d0,-(sp)
    bcc6:	|               move.l d1,-(sp)
    bcc8:	|               jsr 17652 <__subsf3>
    bcce:	|               addq.l #8,sp
    bcd0:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    bcd4:	|               movea.l 32(sp),a0
    bcd8:	|               move.l 52(a0),d0
    bcdc:	|               move.l d0,-(sp)
    bcde:	|               jsr 1735e <__floatsisf>
    bce4:	|               addq.l #4,sp
    bce6:	|               move.l d0,d1
    bce8:	|               movea.l 32(sp),a0
    bcec:	|               move.l 4(a0),d0
    bcf0:	|               move.l d0,-(sp)
    bcf2:	|               move.l d1,-(sp)
    bcf4:	|               jsr 17652 <__subsf3>
    bcfa:	|               addq.l #8,sp
    bcfc:	|               move.l d0,-(sp)
    bcfe:	|               move.l d0,-(sp)
    bd00:	|               jsr 1711a <__addsf3>
    bd06:	|               addq.l #8,sp
    bd08:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    bd0c:	|               movea.l 32(sp),a0
    bd10:	|               move.l 32(a0),d2
    bd14:	|               movea.l 32(sp),a0
    bd18:	|               move.l 28(a0),d0
    bd1c:	|               move.l d0,-(sp)
    bd1e:	|               jsr 1735e <__floatsisf>
    bd24:	|               addq.l #4,sp
    bd26:	|               move.l d0,-(sp)
    bd28:	|               move.l d2,-(sp)
    bd2a:	|               jsr 17410 <__mulsf3>
    bd30:	|               addq.l #8,sp
    bd32:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    bd36:	|               move.l 24(sp),-(sp)
    bd3a:	|               jsr 17280 <__extendsfdf2>
    bd40:	|               addq.l #4,sp
    bd42:	|               move.l #-1717986918,-(sp)
    bd48:	|               move.l #1070176665,-(sp)
    bd4e:	|               move.l d1,-(sp)
    bd50:	|               move.l d0,-(sp)
    bd52:	|               jsr 17536 <__ltdf2>
    bd58:	|               lea 16(sp),sp
    bd5c:	|               tst.l d0
    bd5e:	|           ,-- bge.s bd68 <walkMe+0xde>
    bd60:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    bd68:	|           '-> move.l 20(sp),-(sp)
    bd6c:	|               jsr 172f6 <__fixsfsi>
    bd72:	|               addq.l #4,sp
    bd74:	|               move.l d0,-(sp)
    bd76:	|               jsr 8f34 <TF_abs>
    bd7c:	|               addq.l #4,sp
    bd7e:	|               move.l d0,d2
    bd80:	|               move.l 16(sp),-(sp)
    bd84:	|               jsr 172f6 <__fixsfsi>
    bd8a:	|               addq.l #4,sp
    bd8c:	|               move.l d0,-(sp)
    bd8e:	|               jsr 8f34 <TF_abs>
    bd94:	|               addq.l #4,sp
    bd96:	|               cmp.l d2,d0
    bd98:	|        ,----- bgt.s bdbc <walkMe+0x132>
    bd9a:	|        |      move.l 20(sp),-(sp)
    bd9e:	|        |      jsr 172f6 <__fixsfsi>
    bda4:	|        |      addq.l #4,sp
    bda6:	|        |      move.l d0,-(sp)
    bda8:	|        |      jsr 8f34 <TF_abs>
    bdae:	|        |      addq.l #4,sp
    bdb0:	|        |      move.l d0,-(sp)
    bdb2:	|        |      jsr 1735e <__floatsisf>
    bdb8:	|        |      addq.l #4,sp
    bdba:	|        |  ,-- bra.s bddc <walkMe+0x152>
    bdbc:	|        '--|-> move.l 16(sp),-(sp)
    bdc0:	|           |   jsr 172f6 <__fixsfsi>
    bdc6:	|           |   addq.l #4,sp
    bdc8:	|           |   move.l d0,-(sp)
    bdca:	|           |   jsr 8f34 <TF_abs>
    bdd0:	|           |   addq.l #4,sp
    bdd2:	|           |   move.l d0,-(sp)
    bdd4:	|           |   jsr 1735e <__floatsisf>
    bdda:	|           |   addq.l #4,sp
    bddc:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    bde0:	|               move.l 12(sp),-(sp)
    bde4:	|               jsr 172f6 <__fixsfsi>
    bdea:	|               addq.l #4,sp
    bdec:	|               move.l d0,-(sp)
    bdee:	|               jsr 8f34 <TF_abs>
    bdf4:	|               addq.l #4,sp
    bdf6:	|               move.l d0,-(sp)
    bdf8:	|               jsr 1735e <__floatsisf>
    bdfe:	|               addq.l #4,sp
    be00:	|               move.l d0,-(sp)
    be02:	|               move.l 28(sp),-(sp)
    be06:	|               jsr 17584 <__ltsf2>
    be0c:	|               addq.l #8,sp
    be0e:	|               tst.l d0
    be10:	|        ,----- bge.w bec2 <walkMe+0x238>
			if (thisPerson->spinning) {
    be14:	|        |      movea.l 32(sp),a0
    be18:	|        |      move.w 66(a0),d0
    be1c:	|        |  ,-- beq.s be3a <walkMe+0x1b0>
				spinStep(thisPerson);
    be1e:	|        |  |   move.l 32(sp),-(sp)
    be22:	|        |  |   jsr b9a6 <spinStep>
    be28:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    be2a:	|        |  |   pea 1 <_start+0x1>
    be2e:	|        |  |   move.l 36(sp),-(sp)
    be32:	|        |  |   jsr 7e1a <setFrames>
    be38:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    be3a:	|        |  '-> move.l 24(sp),-(sp)
    be3e:	|        |      move.l 16(sp),-(sp)
    be42:	|        |      jsr 17214 <__divsf3>
    be48:	|        |      addq.l #8,sp
    be4a:	|        |      move.l d0,24(sp)
			if (move)
    be4e:	|        |      tst.w 10(sp)
    be52:	|        |  ,-- beq.s bebc <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    be54:	|        |  |   movea.l 32(sp),a0
    be58:	|        |  |   move.l 4(a0),d2
    be5c:	|        |  |   move.l 24(sp),d0
    be60:	|        |  |   move.l d0,-(sp)
    be62:	|        |  |   move.l d0,-(sp)
    be64:	|        |  |   jsr 1711a <__addsf3>
    be6a:	|        |  |   addq.l #8,sp
    be6c:	|        |  |   move.l d0,-(sp)
    be6e:	|        |  |   move.l 20(sp),-(sp)
    be72:	|        |  |   jsr 17214 <__divsf3>
    be78:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    be7a:	|        |  |   move.l d0,-(sp)
    be7c:	|        |  |   move.l d2,-(sp)
    be7e:	|        |  |   jsr 1711a <__addsf3>
    be84:	|        |  |   addq.l #8,sp
    be86:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    be88:	|        |  |   movea.l 32(sp),a0
    be8c:	|        |  |   move.l (a0),d3
    be8e:	|        |  |   move.l 24(sp),-(sp)
    be92:	|        |  |   move.l 24(sp),-(sp)
    be96:	|        |  |   jsr 17214 <__divsf3>
    be9c:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    be9e:	|        |  |   move.l d0,-(sp)
    bea0:	|        |  |   move.l d3,-(sp)
    bea2:	|        |  |   jsr 1711a <__addsf3>
    bea8:	|        |  |   addq.l #8,sp
    beaa:	|        |  |   move.l d2,-(sp)
    beac:	|        |  |   move.l d0,-(sp)
    beae:	|        |  |   move.l 40(sp),-(sp)
    beb2:	|        |  |   jsr aa8c <moveAndScale>
    beb8:	|        |  |   lea 12(sp),sp
			return TRUE;
    bebc:	|        |  '-> moveq #1,d0
    bebe:	|  ,-----|----- bra.w bf70 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    bec2:	|  |     '----> movea.l 32(sp),a0
    bec6:	|  |            move.l 56(a0),d0
    beca:	|  |            moveq #-1,d1
    becc:	|  |            cmp.l d0,d1
    bece:	|  |        ,-- bne.s bf06 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    bed0:	|  |        |   movea.l 32(sp),a0
    bed4:	|  |        |   move.l 110(a0),d0
    bed8:	|  |        |   moveq #-1,d1
    beda:	|  |        |   cmp.l d0,d1
    bedc:	|  |  ,-----|-- beq.s bf1a <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    bede:	|  |  |     |   movea.l 32(sp),a0
    bee2:	|  |  |     |   move.l 110(a0),d0
    bee6:	|  |  |     |   movea.l 32(sp),a0
    beea:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    beee:	|  |  |     |   movea.l 32(sp),a0
    bef2:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    bef8:	|  |  |     |   move.l 32(sp),-(sp)
    befc:	|  |  |     |   jsr b9a6 <spinStep>
    bf02:	|  |  |     |   addq.l #4,sp
			}
			break;
    bf04:	|  |  +-----|-- bra.s bf1a <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    bf06:	|  |  |     '-> move.l 32(sp),-(sp)
    bf0a:	|  |  |         jsr 96a6 <doBorderStuff>
    bf10:	|  |  |         addq.l #4,sp
    bf12:	|  |  |         tst.w d0
    bf14:	|  |  |  ,----- beq.s bf1e <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bf16:	'--|--|--|----- bra.w bcaa <walkMe+0x20>
			break;
    bf1a:	   |  '--|----> nop
    bf1c:	   |     |  ,-- bra.s bf20 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    bf1e:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    bf20:	   |        '-> movea.l 32(sp),a0
    bf24:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    bf28:	   |            clr.l -(sp)
    bf2a:	   |            move.l 36(sp),-(sp)
    bf2e:	   |            jsr 7e1a <setFrames>
    bf34:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    bf36:	   |            movea.l 32(sp),a0
    bf3a:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    bf3e:	   |            move.l d0,-(sp)
    bf40:	   |            jsr 1735e <__floatsisf>
    bf46:	   |            addq.l #4,sp
    bf48:	   |            move.l d0,d2
				 thisPerson->walkToX,
    bf4a:	   |            movea.l 32(sp),a0
    bf4e:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    bf52:	   |            move.l d0,-(sp)
    bf54:	   |            jsr 1735e <__floatsisf>
    bf5a:	   |            addq.l #4,sp
    bf5c:	   |            move.l d2,-(sp)
    bf5e:	   |            move.l d0,-(sp)
    bf60:	   |            move.l 40(sp),-(sp)
    bf64:	   |            jsr aa8c <moveAndScale>
    bf6a:	   |            lea 12(sp),sp
	return FALSE;
    bf6e:	   |            clr.w d0
}
    bf70:	   '----------> move.l (sp)+,d2
    bf72:	                move.l (sp)+,d3
    bf74:	                lea 20(sp),sp
    bf78:	                rts

0000bf7a <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    bf7a:	       subq.l #8,sp
    bf7c:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    bf7e:	   ,-- bra.s bfae <clearStackLib+0x34>
		k = stackLib;
    bf80:	,--|-> move.l 1a834 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    bf88:	|  |   movea.l 1a834 <stackLib>,a0
    bf8e:	|  |   move.l 4(a0),d0
    bf92:	|  |   move.l d0,1a834 <stackLib>
		FreeVec(k);
    bf98:	|  |   move.l 8(sp),4(sp)
    bf9e:	|  |   move.l 1a7a4 <SysBase>,d0
    bfa4:	|  |   movea.l d0,a6
    bfa6:	|  |   movea.l 4(sp),a1
    bfaa:	|  |   jsr -690(a6)
	while (stackLib) {
    bfae:	|  '-> move.l 1a834 <stackLib>,d0
    bfb4:	'----- bne.s bf80 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    bfb6:	       clr.l 1a830 <stackLibTotal>
}
    bfbc:	       nop
    bfbe:	       movea.l (sp)+,a6
    bfc0:	       addq.l #8,sp
    bfc2:	       rts

0000bfc4 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    bfc4:	          lea -128(sp),sp
    bfc8:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    bfcc:	      ,-- bra.s bfde <loadGame+0x1a>
    bfce:	   ,--|-> move.l 1a73c <allRunningFunctions>,d0
    bfd4:	   |  |   move.l d0,-(sp)
    bfd6:	   |  |   jsr 53c4 <finishFunction>
    bfdc:	   |  |   addq.l #4,sp
    bfde:	   |  '-> move.l 1a73c <allRunningFunctions>,d0
    bfe4:	   '----- bne.s bfce <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    bfe6:	          pea 1a838 <ssgVersion>
    bfec:	          pea 18e99 <PutChar+0x14cb>
    bff2:	          pea 41 <_start+0x41>
    bff6:	          pea 53 <_start+0x53>
    bffa:	          move.l 160(sp),-(sp)
    bffe:	          jsr 617a <openAndVerify>
    c004:	          lea 20(sp),sp
    c008:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c00c:	      ,-- bne.s c014 <loadGame+0x50>
    c00e:	      |   clr.w d0
    c010:	,-----|-- bra.w c2ba <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c014:	|     '-> move.l 112(sp),108(sp)
    c01a:	|         lea 140(sp),a0
    c01e:	|         lea -126(a0),a0
    c022:	|         move.l a0,120(sp)
    c026:	|         moveq #8,d0
    c028:	|         move.l d0,116(sp)
    c02c:	|         move.l 1a7ac <DOSBase>,d0
    c032:	|         movea.l d0,a6
    c034:	|         move.l 108(sp),d1
    c038:	|         move.l 120(sp),d2
    c03c:	|         move.l 116(sp),d3
    c040:	|         jsr -42(a6)
    c044:	|         move.l d0,132(sp)
    c048:	|         move.l 132(sp),d0
    c04c:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c050:	|         moveq #8,d0
    c052:	|         cmp.l 128(sp),d0
    c056:	|     ,-- beq.s c066 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c058:	|     |   pea 18eba <PutChar+0x14ec>
    c05e:	|     |   jsr 16f2c <KPrintF>
    c064:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c066:	|     '-> move.l 14(sp),d1
    c06a:	|         move.l 1a746 <fileTime>,d0
    c070:	|         cmp.l d1,d0
    c072:	|     ,-- bne.s c082 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c074:	|     |   move.l 18(sp),d1
    c078:	|     |   move.l 1a74a <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c07e:	|     |   cmp.l d1,d0
    c080:	|  ,--|-- beq.s c0a2 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c082:	|  |  '-> move.l 144(sp),-(sp)
    c086:	|  |      pea 18ed6 <PutChar+0x1508>
    c08c:	|  |      pea 18f9d <PutChar+0x15cf>
    c092:	|  |      jsr 16f2c <KPrintF>
    c098:	|  |      lea 12(sp),sp
		return FALSE; 
    c09c:	|  |      clr.w d0
    c09e:	+--|----- bra.w c2ba <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c0a2:	|  '----> move.l 112(sp),124(sp)
    c0a8:	|         move.l 1a7ac <DOSBase>,d0
    c0ae:	|         movea.l d0,a6
    c0b0:	|         move.l 124(sp),d1
    c0b4:	|         jsr -306(a6)
    c0b8:	|         move.l d0,136(sp)
    c0bc:	|         move.l 136(sp),d0
    c0c0:	|         move.l d0,d0
    c0c2:	|         move.w d0,1a000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c0c8:	|         move.l 112(sp),100(sp)
    c0ce:	|         move.l 1a7ac <DOSBase>,d0
    c0d4:	|         movea.l d0,a6
    c0d6:	|         move.l 100(sp),d1
    c0da:	|         jsr -306(a6)
    c0de:	|         move.l d0,96(sp)
    c0e2:	|         move.l 96(sp),d0
    c0e6:	|         move.l d0,d0
    c0e8:	|         move.w d0,1a744 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c0ee:	|         move.l 112(sp),92(sp)
    c0f4:	|         move.l 1a7ac <DOSBase>,d0
    c0fa:	|         movea.l d0,a6
    c0fc:	|         move.l 92(sp),d1
    c100:	|         jsr -306(a6)
    c104:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c108:	|         move.l 112(sp),84(sp)
    c10e:	|         move.l 1a7ac <DOSBase>,d0
    c114:	|         movea.l d0,a6
    c116:	|         move.l 84(sp),d1
    c11a:	|         jsr -306(a6)
    c11e:	|         move.l d0,80(sp)
    c122:	|         move.l 80(sp),d0
    c126:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c12a:	|     ,-- beq.s c15e <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c12c:	|     |   move.l 112(sp),-(sp)
    c130:	|     |   jsr 6bc <get2bytes>
    c136:	|     |   addq.l #4,sp
    c138:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c13c:	|     |   move.l 112(sp),-(sp)
    c140:	|     |   jsr 6bc <get2bytes>
    c146:	|     |   addq.l #4,sp
    c148:	|     |   move.l d0,1a89c <fontHeight>
		charOrder = readString(fp);		
    c14e:	|     |   move.l 112(sp),-(sp)
    c152:	|     |   jsr b02 <readString>
    c158:	|     |   addq.l #4,sp
    c15a:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c15e:	|     '-> move.l 104(sp),70(sp)
    c164:	|         move.l 1a7a4 <SysBase>,d0
    c16a:	|         movea.l d0,a6
    c16c:	|         movea.l 70(sp),a1
    c170:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c174:	|         move.l 112(sp),-(sp)
    c178:	|         jsr 854 <getSigned>
    c17e:	|         addq.l #4,sp
    c180:	|         move.w d0,1a6a8 <fontSpace>

	killAllPeople ();
    c186:	|         jsr a72e <killAllPeople>
	killAllRegions ();
    c18c:	|         jsr 15758 <killAllRegions>

	int camerX = get2bytes (fp);
    c192:	|         move.l 112(sp),-(sp)
    c196:	|         jsr 6bc <get2bytes>
    c19c:	|         addq.l #4,sp
    c19e:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c1a2:	|         move.l 112(sp),-(sp)
    c1a6:	|         jsr 6bc <get2bytes>
    c1ac:	|         addq.l #4,sp
    c1ae:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c1b2:	|         move.l 112(sp),-(sp)
    c1b6:	|         jsr 7d8 <getFloat>
    c1bc:	|         addq.l #4,sp
    c1be:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c1c2:	|         move.l 112(sp),54(sp)
    c1c8:	|         move.l 1a7ac <DOSBase>,d0
    c1ce:	|         movea.l d0,a6
    c1d0:	|         move.l 54(sp),d1
    c1d4:	|         jsr -306(a6)
    c1d8:	|         move.l d0,50(sp)
    c1dc:	|         move.l 50(sp),d0
    c1e0:	|         move.l d0,d0
    c1e2:	|         move.b d0,1a11a <brightnessLevel>

	loadHandlers (fp);
    c1e8:	|         move.l 112(sp),-(sp)
    c1ec:	|         jsr 60da <loadHandlers>
    c1f2:	|         addq.l #4,sp
	loadRegions (fp);
    c1f4:	|         move.l 112(sp),-(sp)
    c1f8:	|         jsr 157b4 <loadRegions>
    c1fe:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c200:	|         moveq #12,d0
    c202:	|         move.l d0,46(sp)
    c206:	|         clr.l 42(sp)
    c20a:	|         move.l 1a7a4 <SysBase>,d0
    c210:	|         movea.l d0,a6
    c212:	|         move.l 46(sp),d0
    c216:	|         move.l 42(sp),d1
    c21a:	|         jsr -684(a6)
    c21e:	|         move.l d0,38(sp)
    c222:	|         move.l 38(sp),d0
    c226:	|         move.l d0,1a6aa <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c22c:	|         move.l 1a6aa <mouseCursorAnim>,d0
    c232:	|     ,-- bne.s c246 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c234:	|     |   pea 18fa7 <PutChar+0x15d9>
    c23a:	|     |   jsr 16f2c <KPrintF>
    c240:	|     |   addq.l #4,sp
		return FALSE;
    c242:	|     |   clr.w d0
    c244:	+-----|-- bra.s c2ba <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c246:	|     '-> jsr d0e0 <nosnapshot>
	if (FGetC (fp)) {
    c24c:	|         move.l 112(sp),34(sp)
    c252:	|         move.l 1a7ac <DOSBase>,d0
    c258:	|         movea.l d0,a6
    c25a:	|         move.l 34(sp),d1
    c25e:	|         jsr -306(a6)
    c262:	|         move.l d0,30(sp)
    c266:	|         move.l 30(sp),d0
    c26a:	|     ,-- beq.s c280 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c26c:	|     |   move.l 112(sp),-(sp)
    c270:	|     |   jsr d160 <restoreSnapshot>
    c276:	|     |   addq.l #4,sp
    c278:	|     |   tst.w d0
    c27a:	|     +-- bne.s c280 <loadGame+0x2bc>
    c27c:	|     |   clr.w d0
    c27e:	+-----|-- bra.s c2ba <loadGame+0x2f6>
	}

	Close (fp);
    c280:	|     '-> move.l 112(sp),26(sp)
    c286:	|         move.l 1a7ac <DOSBase>,d0
    c28c:	|         movea.l d0,a6
    c28e:	|         move.l 26(sp),d1
    c292:	|         jsr -36(a6)
    c296:	|         move.l d0,22(sp)
	clearStackLib ();
    c29a:	|         jsr bf7a <clearStackLib>

	cameraX = camerX;
    c2a0:	|         move.l 66(sp),1a85e <cameraX>
	cameraY = camerY;
    c2a8:	|         move.l 62(sp),1a862 <cameraY>
	cameraZoom = camerZ;
    c2b0:	|         move.l 58(sp),1a142 <cameraZoom>

	return TRUE;
    c2b8:	|         moveq #1,d0
}
    c2ba:	'-------> movem.l (sp)+,d2-d3/a6
    c2be:	          lea 128(sp),sp
    c2c2:	          rts

0000c2c4 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c2c4:	   ,-> lea -64(sp),sp
    c2c8:	   |   move.l a6,-(sp)
    c2ca:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c2cc:	   |   movea.l 76(sp),a0
    c2d0:	   |   move.l (a0),d0
    c2d2:	   |   move.l 80(sp),-(sp)
    c2d6:	   |   move.l d0,-(sp)
    c2d8:	   |   jsr 8d0 <put2bytes>
    c2de:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c2e0:	   |   movea.l 76(sp),a0
    c2e4:	   |   move.l 40(a0),d0
    c2e8:	,--|-- beq.s c324 <saveFunction+0x60>
		FPutC (fp, 1);
    c2ea:	|  |   move.l 80(sp),52(sp)
    c2f0:	|  |   moveq #1,d0
    c2f2:	|  |   move.l d0,48(sp)
    c2f6:	|  |   move.l 1a7ac <DOSBase>,d0
    c2fc:	|  |   movea.l d0,a6
    c2fe:	|  |   move.l 52(sp),d1
    c302:	|  |   move.l 48(sp),d2
    c306:	|  |   jsr -312(a6)
    c30a:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c30e:	|  |   movea.l 76(sp),a0
    c312:	|  |   move.l 40(a0),d0
    c316:	|  |   move.l 80(sp),-(sp)
    c31a:	|  |   move.l d0,-(sp)
    c31c:	|  '-- jsr c2c4 <saveFunction>(pc)
    c320:	|      addq.l #8,sp
    c322:	|  ,-- bra.s c346 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c324:	'--|-> move.l 80(sp),64(sp)
    c32a:	   |   clr.l 60(sp)
    c32e:	   |   move.l 1a7ac <DOSBase>,d0
    c334:	   |   movea.l d0,a6
    c336:	   |   move.l 64(sp),d1
    c33a:	   |   move.l 60(sp),d2
    c33e:	   |   jsr -312(a6)
    c342:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c346:	   '-> movea.l 76(sp),a0
    c34a:	       move.l 12(a0),d0
    c34e:	       move.l 80(sp),-(sp)
    c352:	       move.l d0,-(sp)
    c354:	       jsr 958 <put4bytes>
    c35a:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c35c:	       movea.l 76(sp),a0
    c360:	       move.l 36(a0),d0
    c364:	       move.l 80(sp),-(sp)
    c368:	       move.l d0,-(sp)
    c36a:	       jsr 8d0 <put2bytes>
    c370:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c372:	       move.l 80(sp),40(sp)
    c378:	       movea.l 76(sp),a0
    c37c:	       move.w 54(a0),d0
    c380:	       movea.w d0,a0
    c382:	       move.l a0,36(sp)
    c386:	       move.l 1a7ac <DOSBase>,d0
    c38c:	       movea.l d0,a6
    c38e:	       move.l 40(sp),d1
    c392:	       move.l 36(sp),d2
    c396:	       jsr -312(a6)
    c39a:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c39e:	       move.l 80(sp),28(sp)
    c3a4:	       movea.l 76(sp),a0
    c3a8:	       move.w 48(a0),d0
    c3ac:	       movea.w d0,a0
    c3ae:	       move.l a0,24(sp)
    c3b2:	       move.l 1a7ac <DOSBase>,d0
    c3b8:	       movea.l d0,a6
    c3ba:	       move.l 28(sp),d1
    c3be:	       move.l 24(sp),d2
    c3c2:	       jsr -312(a6)
    c3c6:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c3ca:	       move.l 80(sp),16(sp)
    c3d0:	       movea.l 76(sp),a0
    c3d4:	       move.w 50(a0),d0
    c3d8:	       movea.w d0,a0
    c3da:	       move.l a0,12(sp)
    c3de:	       move.l 1a7ac <DOSBase>,d0
    c3e4:	       movea.l d0,a6
    c3e6:	       move.l 16(sp),d1
    c3ea:	       move.l 12(sp),d2
    c3ee:	       jsr -312(a6)
    c3f2:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c3f6:	       moveq #28,d0
    c3f8:	       add.l 76(sp),d0
    c3fc:	       move.l 80(sp),-(sp)
    c400:	       move.l d0,-(sp)
    c402:	       jsr cb1c <saveVariable>
    c408:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c40a:	       movea.l 76(sp),a0
    c40e:	       move.b 56(a0),d0
    c412:	   ,-- beq.s c422 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c414:	   |   pea 18fc8 <PutChar+0x15fa>
    c41a:	   |   jsr 16f2c <KPrintF>
    c420:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c422:	   '-> movea.l 76(sp),a0
    c426:	       move.l 24(a0),d0
    c42a:	       move.l 80(sp),-(sp)
    c42e:	       move.l d0,-(sp)
    c430:	       jsr c990 <saveStack>
    c436:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c438:	       clr.l 68(sp)
    c43c:	   ,-- bra.s c460 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c43e:	,--|-> movea.l 76(sp),a0
    c442:	|  |   move.l 20(a0),d1
    c446:	|  |   move.l 68(sp),d0
    c44a:	|  |   lsl.l #3,d0
    c44c:	|  |   add.l d1,d0
    c44e:	|  |   move.l 80(sp),-(sp)
    c452:	|  |   move.l d0,-(sp)
    c454:	|  |   jsr cb1c <saveVariable>
    c45a:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c45c:	|  |   addq.l #1,68(sp)
    c460:	|  '-> movea.l 76(sp),a0
    c464:	|      move.l 8(a0),d0
    c468:	|      cmp.l 68(sp),d0
    c46c:	'----- bgt.s c43e <saveFunction+0x17a>
	}
}
    c46e:	       nop
    c470:	       nop
    c472:	       move.l (sp)+,d2
    c474:	       movea.l (sp)+,a6
    c476:	       lea 64(sp),sp
    c47a:	       rts

0000c47c <saveGame>:

BOOL saveGame (char * fname) {
    c47c:	          lea -248(sp),sp
    c480:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c484:	          move.l 264(sp),244(sp)
    c48a:	          move.l #1006,240(sp)
    c492:	          move.l 1a7ac <DOSBase>,d0
    c498:	          movea.l d0,a6
    c49a:	          move.l 244(sp),d1
    c49e:	          move.l 240(sp),d2
    c4a2:	          jsr -30(a6)
    c4a6:	          move.l d0,236(sp)
    c4aa:	          move.l 236(sp),d0
    c4ae:	          move.l d0,232(sp)
	if (fp == NULL) {
    c4b2:	      ,-- bne.s c4c8 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c4b4:	      |   pea 18fea <PutChar+0x161c>
    c4ba:	      |   jsr 16f2c <KPrintF>
    c4c0:	      |   addq.l #4,sp
		return FALSE;
    c4c2:	      |   clr.w d0
    c4c4:	,-----|-- bra.w c986 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c4c8:	|     '-> move.l 232(sp),228(sp)
    c4ce:	|         move.l #102407,224(sp)
    c4d6:	|         moveq #6,d0
    c4d8:	|         move.l d0,220(sp)
    c4dc:	|         move.l 1a7ac <DOSBase>,d0
    c4e2:	|         movea.l d0,a6
    c4e4:	|         move.l 228(sp),d1
    c4e8:	|         move.l 224(sp),d2
    c4ec:	|         move.l 220(sp),d3
    c4f0:	|         jsr -48(a6)
    c4f4:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c4f8:	|         move.l 232(sp),212(sp)
    c4fe:	|         clr.l 208(sp)
    c502:	|         move.l 1a7ac <DOSBase>,d0
    c508:	|         movea.l d0,a6
    c50a:	|         move.l 212(sp),d1
    c50e:	|         move.l 208(sp),d2
    c512:	|         jsr -312(a6)
    c516:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c51a:	|         move.l 232(sp),200(sp)
    c520:	|         clr.l 196(sp)
    c524:	|         move.l 1a7ac <DOSBase>,d0
    c52a:	|         movea.l d0,a6
    c52c:	|         move.l 200(sp),d1
    c530:	|         move.l 196(sp),d2
    c534:	|         jsr -312(a6)
    c538:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c53c:	|         move.l 232(sp),188(sp)
    c542:	|         moveq #2,d0
    c544:	|         move.l d0,184(sp)
    c548:	|         move.l 1a7ac <DOSBase>,d0
    c54e:	|         movea.l d0,a6
    c550:	|         move.l 188(sp),d1
    c554:	|         move.l 184(sp),d2
    c558:	|         jsr -312(a6)
    c55c:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c560:	|         move.l 232(sp),176(sp)
    c566:	|         moveq #2,d0
    c568:	|         move.l d0,172(sp)
    c56c:	|         move.l 1a7ac <DOSBase>,d0
    c572:	|         movea.l d0,a6
    c574:	|         move.l 176(sp),d1
    c578:	|         move.l 172(sp),d2
    c57c:	|         jsr -312(a6)
    c580:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c584:	|         move.l 232(sp),164(sp)
    c58a:	|         move.l #108358,160(sp)
    c592:	|         moveq #8,d0
    c594:	|         move.l d0,156(sp)
    c598:	|         move.l 1a7ac <DOSBase>,d0
    c59e:	|         movea.l d0,a6
    c5a0:	|         move.l 164(sp),d1
    c5a4:	|         move.l 160(sp),d2
    c5a8:	|         move.l 156(sp),d3
    c5ac:	|         jsr -48(a6)
    c5b0:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c5b4:	|         move.l 232(sp),148(sp)
    c5ba:	|         move.w 1a000 <allowAnyFilename>,d0
    c5c0:	|         movea.w d0,a0
    c5c2:	|         move.l a0,144(sp)
    c5c6:	|         move.l 1a7ac <DOSBase>,d0
    c5cc:	|         movea.l d0,a6
    c5ce:	|         move.l 148(sp),d1
    c5d2:	|         move.l 144(sp),d2
    c5d6:	|         jsr -312(a6)
    c5da:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c5de:	|         move.l 232(sp),136(sp)
    c5e4:	|         move.w 1a744 <captureAllKeys>,d0
    c5ea:	|         movea.w d0,a0
    c5ec:	|         move.l a0,132(sp)
    c5f0:	|         move.l 1a7ac <DOSBase>,d0
    c5f6:	|         movea.l d0,a6
    c5f8:	|         move.l 136(sp),d1
    c5fc:	|         move.l 132(sp),d2
    c600:	|         jsr -312(a6)
    c604:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c608:	|         move.l 232(sp),124(sp)
    c60e:	|         moveq #1,d0
    c610:	|         move.l d0,120(sp)
    c614:	|         move.l 1a7ac <DOSBase>,d0
    c61a:	|         movea.l d0,a6
    c61c:	|         move.l 124(sp),d1
    c620:	|         move.l 120(sp),d2
    c624:	|         jsr -312(a6)
    c628:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c62c:	|         move.l 232(sp),112(sp)
    c632:	|         move.l 1a8ac <fontTableSize>,d0
    c638:	|         sgt d0
    c63a:	|         neg.b d0
    c63c:	|         move.b d0,d0
    c63e:	|         andi.l #255,d0
    c644:	|         move.l d0,108(sp)
    c648:	|         move.l 1a7ac <DOSBase>,d0
    c64e:	|         movea.l d0,a6
    c650:	|         move.l 112(sp),d1
    c654:	|         move.l 108(sp),d2
    c658:	|         jsr -312(a6)
    c65c:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c660:	|         move.l 1a8ac <fontTableSize>,d0
    c666:	|     ,-- ble.s c6a4 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c668:	|     |   move.l 1a8a0 <loadedFontNum>,d0
    c66e:	|     |   move.l 232(sp),-(sp)
    c672:	|     |   move.l d0,-(sp)
    c674:	|     |   jsr 8d0 <put2bytes>
    c67a:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c67c:	|     |   move.l 1a89c <fontHeight>,d0
    c682:	|     |   move.l 232(sp),-(sp)
    c686:	|     |   move.l d0,-(sp)
    c688:	|     |   jsr 8d0 <put2bytes>
    c68e:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c690:	|     |   move.l 1a8a4 <fontOrderString>,d0
    c696:	|     |   move.l 232(sp),-(sp)
    c69a:	|     |   move.l d0,-(sp)
    c69c:	|     |   jsr bd8 <writeString>
    c6a2:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c6a4:	|     '-> move.w 1a6a8 <fontSpace>,d0
    c6aa:	|         movea.w d0,a0
    c6ac:	|         move.l 232(sp),-(sp)
    c6b0:	|         move.l a0,-(sp)
    c6b2:	|         jsr a9c <putSigned>
    c6b8:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c6ba:	|         move.l 1a85e <cameraX>,d0
    c6c0:	|         move.l 232(sp),-(sp)
    c6c4:	|         move.l d0,-(sp)
    c6c6:	|         jsr 8d0 <put2bytes>
    c6cc:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c6ce:	|         move.l 1a862 <cameraY>,d0
    c6d4:	|         move.l 232(sp),-(sp)
    c6d8:	|         move.l d0,-(sp)
    c6da:	|         jsr 8d0 <put2bytes>
    c6e0:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c6e2:	|         move.l 1a142 <cameraZoom>,d0
    c6e8:	|         move.l 232(sp),-(sp)
    c6ec:	|         move.l d0,-(sp)
    c6ee:	|         jsr a46 <putFloat>
    c6f4:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c6f6:	|         move.l 232(sp),100(sp)
    c6fc:	|         move.b 1a11a <brightnessLevel>,d0
    c702:	|         move.b d0,d0
    c704:	|         andi.l #255,d0
    c70a:	|         move.l d0,96(sp)
    c70e:	|         move.l 1a7ac <DOSBase>,d0
    c714:	|         movea.l d0,a6
    c716:	|         move.l 100(sp),d1
    c71a:	|         move.l 96(sp),d2
    c71e:	|         jsr -312(a6)
    c722:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    c726:	|         move.l 232(sp),-(sp)
    c72a:	|         jsr 665e <saveHandlers>
    c730:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    c732:	|         move.l 232(sp),-(sp)
    c736:	|         jsr 1596e <saveRegions>
    c73c:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    c73e:	|         move.l 1a6aa <mouseCursorAnim>,d0
    c744:	|         move.l 232(sp),-(sp)
    c748:	|         move.l d0,-(sp)
    c74a:	|         jsr aca0 <saveAnim>
    c750:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    c752:	|         move.l 1a6ae <mouseCursorFrameNum>,d0
    c758:	|         move.l 232(sp),-(sp)
    c75c:	|         move.l d0,-(sp)
    c75e:	|         jsr 8d0 <put2bytes>
    c764:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    c766:	|         move.l 1a73c <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    c76e:	|         clr.l 248(sp)
	while (thisFunction) {
    c772:	|     ,-- bra.s c782 <saveGame+0x306>
		countFunctions ++;
    c774:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    c778:	|  |  |   movea.l 252(sp),a0
    c77c:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c782:	|  |  '-> tst.l 252(sp)
    c786:	|  '----- bne.s c774 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    c788:	|         move.l 232(sp),-(sp)
    c78c:	|         move.l 252(sp),-(sp)
    c790:	|         jsr 8d0 <put2bytes>
    c796:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    c798:	|         move.l 1a73c <allRunningFunctions>,252(sp)
	while (thisFunction) {
    c7a0:	|     ,-- bra.s c7bc <saveGame+0x340>
		saveFunction (thisFunction, fp);
    c7a2:	|  ,--|-> move.l 232(sp),-(sp)
    c7a6:	|  |  |   move.l 256(sp),-(sp)
    c7aa:	|  |  |   jsr c2c4 <saveFunction>
    c7b0:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    c7b2:	|  |  |   movea.l 252(sp),a0
    c7b6:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c7bc:	|  |  '-> tst.l 252(sp)
    c7c0:	|  '----- bne.s c7a2 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    c7c2:	|         clr.l 256(sp)
    c7c6:	|     ,-- bra.s c7e8 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    c7c8:	|  ,--|-> move.l 1a752 <globalVars>,d1
    c7ce:	|  |  |   move.l 256(sp),d0
    c7d2:	|  |  |   lsl.l #3,d0
    c7d4:	|  |  |   add.l d1,d0
    c7d6:	|  |  |   move.l 232(sp),-(sp)
    c7da:	|  |  |   move.l d0,-(sp)
    c7dc:	|  |  |   jsr cb1c <saveVariable>
    c7e2:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    c7e4:	|  |  |   addq.l #1,256(sp)
    c7e8:	|  |  '-> move.l 1a77c <numGlobals>,d0
    c7ee:	|  |      cmp.l 256(sp),d0
    c7f2:	|  '----- bgt.s c7c8 <saveGame+0x34c>
	}

	savePeople (fp);
    c7f4:	|         move.l 232(sp),-(sp)
    c7f8:	|         jsr adc8 <savePeople>
    c7fe:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    c800:	|         movea.l 1a8c0 <currentFloor>,a0
    c806:	|         move.l 8(a0),d0
    c80a:	|  ,----- beq.s c848 <saveGame+0x3cc>
		FPutC (fp, 1);
    c80c:	|  |      move.l 232(sp),76(sp)
    c812:	|  |      moveq #1,d0
    c814:	|  |      move.l d0,72(sp)
    c818:	|  |      move.l 1a7ac <DOSBase>,d0
    c81e:	|  |      movea.l d0,a6
    c820:	|  |      move.l 76(sp),d1
    c824:	|  |      move.l 72(sp),d2
    c828:	|  |      jsr -312(a6)
    c82c:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    c830:	|  |      movea.l 1a8c0 <currentFloor>,a0
    c836:	|  |      move.l (a0),d0
    c838:	|  |      move.l 232(sp),-(sp)
    c83c:	|  |      move.l d0,-(sp)
    c83e:	|  |      jsr 8d0 <put2bytes>
    c844:	|  |      addq.l #8,sp
    c846:	|  |  ,-- bra.s c86a <saveGame+0x3ee>
	} else FPutC (fp, 0);
    c848:	|  '--|-> move.l 232(sp),88(sp)
    c84e:	|     |   clr.l 84(sp)
    c852:	|     |   move.l 1a7ac <DOSBase>,d0
    c858:	|     |   movea.l d0,a6
    c85a:	|     |   move.l 88(sp),d1
    c85e:	|     |   move.l 84(sp),d2
    c862:	|     |   jsr -312(a6)
    c866:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    c86a:	|     '-> move.l 232(sp),64(sp)
    c870:	|         move.l 1a872 <speechMode>,60(sp)
    c878:	|         move.l 1a7ac <DOSBase>,d0
    c87e:	|         movea.l d0,a6
    c880:	|         move.l 64(sp),d1
    c884:	|         move.l 60(sp),d2
    c888:	|         jsr -312(a6)
    c88c:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    c890:	|         move.b 1a67e <fadeMode>,d0
    c896:	|         move.b d0,d0
    c898:	|         andi.l #255,d0
    c89e:	|         move.l d0,52(sp)
    c8a2:	|         move.l 232(sp),48(sp)
    c8a8:	|         move.l 1a7ac <DOSBase>,d0
    c8ae:	|         movea.l d0,a6
    c8b0:	|         move.l 52(sp),d1
    c8b4:	|         move.l 48(sp),d2
    c8b8:	|         jsr -312(a6)
    c8bc:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    c8c0:	|         move.l 1a800 <speech>,d0
    c8c6:	|         move.l 232(sp),-(sp)
    c8ca:	|         move.l d0,-(sp)
    c8cc:	|         jsr 7cce <saveSpeech>
    c8d2:	|         addq.l #8,sp
	saveStatusBars (fp);
    c8d4:	|         move.l 232(sp),-(sp)
    c8d8:	|         jsr 76ca <saveStatusBars>
    c8de:	|         addq.l #4,sp
	saveSounds (fp);
    c8e0:	|         move.l 232(sp),-(sp)
    c8e4:	|         jsr ce8e <saveSounds>
    c8ea:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    c8ec:	|         move.w 1a85c <saveEncoding>,d0
    c8f2:	|         move.w d0,d0
    c8f4:	|         andi.l #65535,d0
    c8fa:	|         move.l 232(sp),-(sp)
    c8fe:	|         move.l d0,-(sp)
    c900:	|         jsr 8d0 <put2bytes>
    c906:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    c908:	|         move.l 1a84e <parallaxStuff>,d0
    c90e:	|         move.l 232(sp),-(sp)
    c912:	|         move.l d0,-(sp)
    c914:	|         jsr d186 <saveParallaxRecursive>
    c91a:	|         addq.l #8,sp
	FPutC (fp, 0);
    c91c:	|         move.l 232(sp),40(sp)
    c922:	|         clr.l 36(sp)
    c926:	|         move.l 1a7ac <DOSBase>,d0
    c92c:	|         movea.l d0,a6
    c92e:	|         move.l 40(sp),d1
    c932:	|         move.l 36(sp),d2
    c936:	|         jsr -312(a6)
    c93a:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    c93e:	|         move.l 232(sp),28(sp)
    c944:	|         move.l 1a120 <languageNum>,24(sp)
    c94c:	|         move.l 1a7ac <DOSBase>,d0
    c952:	|         movea.l d0,a6
    c954:	|         move.l 28(sp),d1
    c958:	|         move.l 24(sp),d2
    c95c:	|         jsr -312(a6)
    c960:	|         move.l d0,20(sp)

	Close(fp);
    c964:	|         move.l 232(sp),16(sp)
    c96a:	|         move.l 1a7ac <DOSBase>,d0
    c970:	|         movea.l d0,a6
    c972:	|         move.l 16(sp),d1
    c976:	|         jsr -36(a6)
    c97a:	|         move.l d0,12(sp)
	clearStackLib ();
    c97e:	|         jsr bf7a <clearStackLib>
	return TRUE;
    c984:	|         moveq #1,d0
}
    c986:	'-------> movem.l (sp)+,d2-d3/a6
    c98a:	          lea 248(sp),sp
    c98e:	          rts

0000c990 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    c990:	       lea -12(sp),sp
	int elements = 0;
    c994:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    c998:	       move.l 16(sp),(sp)
	while (search) {
    c99c:	   ,-- bra.s c9a8 <saveStack+0x18>
		elements ++;
    c99e:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    c9a2:	|  |   movea.l (sp),a0
    c9a4:	|  |   move.l 8(a0),(sp)
	while (search) {
    c9a8:	|  '-> tst.l (sp)
    c9aa:	'----- bne.s c99e <saveStack+0xe>
	}

	put2bytes (elements, fp);
    c9ac:	       move.l 20(sp),-(sp)
    c9b0:	       move.l 12(sp),-(sp)
    c9b4:	       jsr 8d0 <put2bytes>
    c9ba:	       addq.l #8,sp
	search = vs;
    c9bc:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    c9c0:	       clr.l 4(sp)
    c9c4:	   ,-- bra.s c9e0 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    c9c6:	,--|-> move.l (sp),d0
    c9c8:	|  |   move.l 20(sp),-(sp)
    c9cc:	|  |   move.l d0,-(sp)
    c9ce:	|  |   jsr cb1c <saveVariable>
    c9d4:	|  |   addq.l #8,sp
		search = search -> next;
    c9d6:	|  |   movea.l (sp),a0
    c9d8:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    c9dc:	|  |   addq.l #1,4(sp)
    c9e0:	|  '-> move.l 4(sp),d0
    c9e4:	|      cmp.l 8(sp),d0
    c9e8:	'----- blt.s c9c6 <saveStack+0x36>
	}
}
    c9ea:	       nop
    c9ec:	       nop
    c9ee:	       lea 12(sp),sp
    c9f2:	       rts

0000c9f4 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    c9f4:	             lea -44(sp),sp
    c9f8:	             move.l a6,-(sp)
    c9fa:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    c9fc:	             move.l 1a834 <stackLib>,48(sp)
	int a = 0;
    ca04:	             clr.l 44(sp)
	while (s) {
    ca08:	      ,----- bra.s ca66 <saveStackRef+0x72>
		if (s -> stack == vs) {
    ca0a:	   ,--|----> movea.l 48(sp),a0
    ca0e:	   |  |      move.l (a0),d0
    ca10:	   |  |      cmp.l 56(sp),d0
    ca14:	   |  |  ,-- bne.s ca58 <saveStackRef+0x64>
			FPutC (fp, 1);
    ca16:	   |  |  |   move.l 60(sp),16(sp)
    ca1c:	   |  |  |   moveq #1,d0
    ca1e:	   |  |  |   move.l d0,12(sp)
    ca22:	   |  |  |   move.l 1a7ac <DOSBase>,d0
    ca28:	   |  |  |   movea.l d0,a6
    ca2a:	   |  |  |   move.l 16(sp),d1
    ca2e:	   |  |  |   move.l 12(sp),d2
    ca32:	   |  |  |   jsr -312(a6)
    ca36:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    ca3a:	   |  |  |   move.l 1a830 <stackLibTotal>,d0
    ca40:	   |  |  |   sub.l 44(sp),d0
    ca44:	   |  |  |   move.l 60(sp),-(sp)
    ca48:	   |  |  |   move.l d0,-(sp)
    ca4a:	   |  |  |   jsr 8d0 <put2bytes>
    ca50:	   |  |  |   addq.l #8,sp
			return TRUE;
    ca52:	   |  |  |   moveq #1,d0
    ca54:	,--|--|--|-- bra.w cb12 <saveStackRef+0x11e>
		}
		s = s -> next;
    ca58:	|  |  |  '-> movea.l 48(sp),a0
    ca5c:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    ca62:	|  |  |      addq.l #1,44(sp)
	while (s) {
    ca66:	|  |  '----> tst.l 48(sp)
    ca6a:	|  '-------- bne.s ca0a <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    ca6c:	|            move.l 60(sp),40(sp)
    ca72:	|            clr.l 36(sp)
    ca76:	|            move.l 1a7ac <DOSBase>,d0
    ca7c:	|            movea.l d0,a6
    ca7e:	|            move.l 40(sp),d1
    ca82:	|            move.l 36(sp),d2
    ca86:	|            jsr -312(a6)
    ca8a:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    ca8e:	|            movea.l 56(sp),a0
    ca92:	|            move.l (a0),d0
    ca94:	|            move.l 60(sp),-(sp)
    ca98:	|            move.l d0,-(sp)
    ca9a:	|            jsr c990 <saveStack>
    caa0:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    caa2:	|            moveq #8,d0
    caa4:	|            move.l d0,28(sp)
    caa8:	|            clr.l 24(sp)
    caac:	|            move.l 1a7a4 <SysBase>,d0
    cab2:	|            movea.l d0,a6
    cab4:	|            move.l 28(sp),d0
    cab8:	|            move.l 24(sp),d1
    cabc:	|            jsr -684(a6)
    cac0:	|            move.l d0,20(sp)
    cac4:	|            move.l 20(sp),d0
    cac8:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cacc:	|            move.l 1a830 <stackLibTotal>,d0
    cad2:	|            addq.l #1,d0
    cad4:	|            move.l d0,1a830 <stackLibTotal>
	if (! s) {
    cada:	|            tst.l 48(sp)
    cade:	|        ,-- bne.s caf2 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cae0:	|        |   pea 19036 <PutChar+0x1668>
    cae6:	|        |   jsr 16f2c <KPrintF>
    caec:	|        |   addq.l #4,sp
		return FALSE;
    caee:	|        |   clr.w d0
    caf0:	+--------|-- bra.s cb12 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    caf2:	|        '-> move.l 1a834 <stackLib>,d0
    caf8:	|            movea.l 48(sp),a0
    cafc:	|            move.l d0,4(a0)
	s -> stack = vs;
    cb00:	|            movea.l 48(sp),a0
    cb04:	|            move.l 56(sp),(a0)
	stackLib = s;
    cb08:	|            move.l 48(sp),1a834 <stackLib>
	return TRUE;
    cb10:	|            moveq #1,d0
}
    cb12:	'----------> move.l (sp)+,d2
    cb14:	             movea.l (sp)+,a6
    cb16:	             lea 44(sp),sp
    cb1a:	             rts

0000cb1c <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cb1c:	          lea -12(sp),sp
    cb20:	          move.l a6,-(sp)
    cb22:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cb24:	          move.l 28(sp),16(sp)
    cb2a:	          movea.l 24(sp),a0
    cb2e:	          move.l (a0),d0
    cb30:	          move.l d0,12(sp)
    cb34:	          move.l 1a7ac <DOSBase>,d0
    cb3a:	          movea.l d0,a6
    cb3c:	          move.l 16(sp),d1
    cb40:	          move.l 12(sp),d2
    cb44:	          jsr -312(a6)
    cb48:	          move.l d0,8(sp)
	switch (from -> varType) {
    cb4c:	          movea.l 24(sp),a0
    cb50:	          move.l (a0),d0
    cb52:	          moveq #9,d1
    cb54:	          cmp.l d0,d1
    cb56:	      ,-- bcs.w cc06 <saveVariable+0xea>
    cb5a:	      |   add.l d0,d0
    cb5c:	      |   movea.l d0,a0
    cb5e:	      |   adda.l #52074,a0
    cb64:	      |   move.w (a0),d0
    cb66:	      |   jmp (cb6a <saveVariable+0x4e>,pc,d0.w)
    cb6a:	      |   ori.l #1310740,(a0)+
    cb70:	      |   ori.b #20,(20,a0,d0.w)
    cb76:	      |   .short 0x004c
    cb78:	      |   ori.b #126,(a4)
    cb7c:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    cb80:	      |   ori.b #40,(a0)+
    cb84:	      |   ori.b #47,d4
    cb88:	      |   ori.b #0,(a4)+
    cb8c:	      |   jsr 958 <put4bytes>
    cb92:	      |   addq.l #8,sp
		return TRUE;
    cb94:	      |   moveq #1,d0
    cb96:	,-----|-- bra.w cc42 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    cb9a:	|     |   movea.l 24(sp),a0
    cb9e:	|     |   move.l 4(a0),d0
    cba2:	|     |   move.l 28(sp),-(sp)
    cba6:	|     |   move.l d0,-(sp)
    cba8:	|     |   jsr bd8 <writeString>
    cbae:	|     |   addq.l #8,sp
		return TRUE;
    cbb0:	|     |   moveq #1,d0
    cbb2:	+-----|-- bra.w cc42 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    cbb6:	|     |   movea.l 24(sp),a0
    cbba:	|     |   move.l 4(a0),d0
    cbbe:	|     |   move.l 28(sp),-(sp)
    cbc2:	|     |   move.l d0,-(sp)
    cbc4:	|     |   jsr c9f4 <saveStackRef>
    cbca:	|     |   addq.l #8,sp
    cbcc:	+-----|-- bra.s cc42 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    cbce:	|     |   movea.l 24(sp),a0
    cbd2:	|     |   move.l 4(a0),d0
    cbd6:	|     |   move.l 28(sp),-(sp)
    cbda:	|     |   move.l d0,-(sp)
    cbdc:	|     |   jsr ad6a <saveCostume>
    cbe2:	|     |   addq.l #8,sp
		return FALSE;
    cbe4:	|     |   clr.w d0
    cbe6:	+-----|-- bra.s cc42 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    cbe8:	|     |   movea.l 24(sp),a0
    cbec:	|     |   move.l 4(a0),d0
    cbf0:	|     |   move.l 28(sp),-(sp)
    cbf4:	|     |   move.l d0,-(sp)
    cbf6:	|     |   jsr aca0 <saveAnim>
    cbfc:	|     |   addq.l #8,sp
		return FALSE;
    cbfe:	|     |   clr.w d0
    cc00:	+-----|-- bra.s cc42 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    cc02:	|     |   clr.w d0
    cc04:	+-----|-- bra.s cc42 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    cc06:	|     '-> movea.l 24(sp),a0
    cc0a:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cc0c:	|         moveq #10,d1
    cc0e:	|         cmp.l d0,d1
    cc10:	|  ,----- bcs.s cc2a <saveVariable+0x10e>
						typeName[from->varType] :
    cc12:	|  |      movea.l 24(sp),a0
    cc16:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cc18:	|  |      add.l d0,d0
    cc1a:	|  |      movea.l d0,a1
    cc1c:	|  |      adda.l d0,a1
    cc1e:	|  |      lea 1a680 <typeName>,a0
    cc24:	|  |      move.l (0,a1,a0.l),d0
    cc28:	|  |  ,-- bra.s cc30 <saveVariable+0x114>
    cc2a:	|  '--|-> move.l #102491,d0
    cc30:	|     '-> move.l d0,-(sp)
    cc32:	|         pea 19062 <PutChar+0x1694>
    cc38:	|         jsr 16f2c <KPrintF>
    cc3e:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cc40:	|         moveq #1,d0
    cc42:	'-------> move.l (sp)+,d2
    cc44:	          movea.l (sp)+,a6
    cc46:	          lea 12(sp),sp
    cc4a:	          rts

0000cc4c <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    cc4c:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cc50:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cc58:	          movea.l 4(sp),a0
    cc5c:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cc62:	          movea.l 4(sp),a0
    cc66:	          move.w 10(a0),d0
    cc6a:	          lsr.w #8,d0
    cc6c:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    cc70:	          movea.l 4(sp),a0
    cc74:	          move.w 10(a0),d0
    cc78:	          move.b d0,(sp)

    if(counterx_new)
    cc7a:	,-------- beq.w cd20 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cc7e:	|         clr.w d1
    cc80:	|         move.b (sp),d1
    cc82:	|         move.w 1a83c <counterx_old>,d0
    cc88:	|         sub.w d0,d1
    cc8a:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cc8e:	|         cmpi.w #128,10(sp)
    cc94:	|     ,-- blt.s ccac <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cc96:	|     |   move.w #1,1a75a <input+0x4>
            counterx_diff -= 256;    
    cc9e:	|     |   move.w 10(sp),d0
    cca2:	|     |   addi.w #-256,d0
    cca6:	|     |   move.w d0,10(sp)
    ccaa:	|  ,--|-- bra.s ccd8 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    ccac:	|  |  '-> cmpi.w #-129,10(sp)
    ccb2:	|  |  ,-- bgt.s ccca <CsiCheckInput+0x7e>
            counterx_diff += 256;
    ccb4:	|  |  |   move.w 10(sp),d0
    ccb8:	|  |  |   addi.w #256,d0
    ccbc:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    ccc0:	|  |  |   move.w #1,1a75a <input+0x4>
    ccc8:	|  +--|-- bra.s ccd8 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    ccca:	|  |  '-> tst.w 10(sp)
    ccce:	|  +----- beq.s ccd8 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    ccd0:	|  |      move.w #1,1a75a <input+0x4>
        }

        input.mouseX += counterx_diff;
    ccd8:	|  '----> move.l 1a760 <input+0xa>,d0
    ccde:	|         movea.w 10(sp),a0
    cce2:	|         add.l a0,d0
    cce4:	|         move.l d0,1a760 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    ccea:	|         move.l 1a760 <input+0xa>,d1
    ccf0:	|         move.l 1a6f8 <winWidth>,d0
    ccf6:	|         cmp.l d1,d0
    ccf8:	|     ,-- bge.s cd08 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    ccfa:	|     |   move.l 1a6f8 <winWidth>,d0
    cd00:	|     |   move.l d0,1a760 <input+0xa>
    cd06:	|  ,--|-- bra.s cd16 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    cd08:	|  |  '-> move.l 1a760 <input+0xa>,d0
    cd0e:	|  +----- bpl.s cd16 <CsiCheckInput+0xca>
            input.mouseX = 0;
    cd10:	|  |      clr.l 1a760 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    cd16:	|  '----> clr.w d0
    cd18:	|         move.b (sp),d0
    cd1a:	|         move.w d0,1a83c <counterx_old>
    }    

    if(countery_new)
    cd20:	'-------> tst.b 1(sp)
    cd24:	,-------- beq.w cdce <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    cd28:	|         clr.w d1
    cd2a:	|         move.b 1(sp),d1
    cd2e:	|         move.w 1a83e <countery_old>,d0
    cd34:	|         sub.w d0,d1
    cd36:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    cd3a:	|         cmpi.w #128,8(sp)
    cd40:	|     ,-- blt.s cd58 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    cd42:	|     |   move.w #1,1a75a <input+0x4>
            countery_diff -= 256;    
    cd4a:	|     |   move.w 8(sp),d0
    cd4e:	|     |   addi.w #-256,d0
    cd52:	|     |   move.w d0,8(sp)
    cd56:	|  ,--|-- bra.s cd84 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    cd58:	|  |  '-> cmpi.w #-129,8(sp)
    cd5e:	|  |  ,-- bgt.s cd76 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    cd60:	|  |  |   move.w #1,1a75a <input+0x4>
            countery_diff += 256;
    cd68:	|  |  |   move.w 8(sp),d0
    cd6c:	|  |  |   addi.w #256,d0
    cd70:	|  |  |   move.w d0,8(sp)
    cd74:	|  +--|-- bra.s cd84 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    cd76:	|  |  '-> tst.w 8(sp)
    cd7a:	|  +----- beq.s cd84 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    cd7c:	|  |      move.w #1,1a75a <input+0x4>
        }

        input.mouseY += countery_diff;
    cd84:	|  '----> move.l 1a764 <input+0xe>,d0
    cd8a:	|         movea.w 8(sp),a0
    cd8e:	|         add.l a0,d0
    cd90:	|         move.l d0,1a764 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    cd96:	|         move.l 1a764 <input+0xe>,d1
    cd9c:	|         move.l 1a6fc <winHeight>,d0
    cda2:	|         cmp.l d1,d0
    cda4:	|     ,-- bge.s cdb4 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    cda6:	|     |   move.l 1a6fc <winHeight>,d0
    cdac:	|     |   move.l d0,1a764 <input+0xe>
    cdb2:	|  ,--|-- bra.s cdc2 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    cdb4:	|  |  '-> move.l 1a764 <input+0xe>,d0
    cdba:	|  +----- bpl.s cdc2 <CsiCheckInput+0x176>
            input.mouseY = 0;
    cdbc:	|  |      clr.l 1a764 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    cdc2:	|  '----> clr.w d0
    cdc4:	|         move.b 1(sp),d0
    cdc8:	|         move.w d0,1a83e <countery_old>
    } 

    input.leftRelease = FALSE;
    cdce:	'-------> clr.w 1a75c <input+0x6>
    input.rightRelease = FALSE;
    cdd4:	          clr.w 1a75e <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    cdda:	          move.w 1a756 <input>,d0
    cde0:	      ,-- beq.s ce06 <CsiCheckInput+0x1ba>
    cde2:	      |   movea.l #12574721,a0
    cde8:	      |   move.b (a0),d0
    cdea:	      |   move.b d0,d0
    cdec:	      |   andi.l #255,d0
    cdf2:	      |   moveq #64,d1
    cdf4:	      |   and.l d1,d0
    cdf6:	      +-- beq.s ce06 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    cdf8:	      |   clr.w 1a756 <input>
        input.leftRelease = TRUE;
    cdfe:	      |   move.w #1,1a75c <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    ce06:	      '-> move.w 1a758 <input+0x2>,d0
    ce0c:	      ,-- beq.s ce34 <CsiCheckInput+0x1e8>
    ce0e:	      |   movea.l #14675990,a0
    ce14:	      |   move.w (a0),d0
    ce16:	      |   move.w d0,d0
    ce18:	      |   andi.l #65535,d0
    ce1e:	      |   andi.l #1024,d0
    ce24:	      +-- beq.s ce34 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    ce26:	      |   clr.w 1a758 <input+0x2>
        input.rightRelease = TRUE;
    ce2c:	      |   move.w #1,1a75e <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    ce34:	      '-> movea.l #12574721,a0
    ce3a:	          move.b (a0),d0
    ce3c:	          move.b d0,d0
    ce3e:	          andi.l #255,d0
    ce44:	          moveq #64,d1
    ce46:	          and.l d1,d0
    ce48:	      ,-- bne.s ce52 <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    ce4a:	      |   move.w #1,1a756 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    ce52:	      '-> movea.l #14675990,a0
    ce58:	          move.w (a0),d0
    ce5a:	          move.w d0,d0
    ce5c:	          andi.l #65535,d0
    ce62:	          andi.l #1024,d0
    ce68:	      ,-- bne.s ce72 <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    ce6a:	      |   move.w #1,1a758 <input+0x2>
    }

    ce72:	      '-> nop
    ce74:	          lea 12(sp),sp
    ce78:	          rts

0000ce7a <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    ce7a:	moveq #0,d0
}
    ce7c:	rts

0000ce7e <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    ce7e:	nop
    ce80:	rts

0000ce82 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    ce82:	nop
    ce84:	rts

0000ce86 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    ce86:	moveq #1,d0
}
    ce88:	rts

0000ce8a <playSoundList>:

void playSoundList(struct soundList *s) {
}
    ce8a:	nop
    ce8c:	rts

0000ce8e <saveSounds>:

void saveSounds (BPTR fp) {
    ce8e:	lea -12(sp),sp
    ce92:	move.l a6,-(sp)
    ce94:	move.l d2,-(sp)
	FPutC (fp,0);
    ce96:	move.l 24(sp),16(sp)
    ce9c:	clr.l 12(sp)
    cea0:	move.l 1a7ac <DOSBase>,d0
    cea6:	movea.l d0,a6
    cea8:	move.l 16(sp),d1
    ceac:	move.l 12(sp),d2
    ceb0:	jsr -312(a6)
    ceb4:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    ceb8:	move.l 1a13e <defSoundVol>,d0
    cebe:	move.l 24(sp),-(sp)
    cec2:	move.l d0,-(sp)
    cec4:	jsr 8d0 <put2bytes>
    ceca:	addq.l #8,sp
	put2bytes (defVol, fp);
    cecc:	move.l 1a13a <defVol>,d0
    ced2:	move.l 24(sp),-(sp)
    ced6:	move.l d0,-(sp)
    ced8:	jsr 8d0 <put2bytes>
    cede:	addq.l #8,sp
}
    cee0:	nop
    cee2:	move.l (sp)+,d2
    cee4:	movea.l (sp)+,a6
    cee6:	lea 12(sp),sp
    ceea:	rts

0000ceec <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    ceec:	move.l 4(sp),1a13a <defVol>
}
    cef4:	nop
    cef6:	rts

0000cef8 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    cef8:	move.l 4(sp),1a13e <defSoundVol>
}
    cf00:	nop
    cf02:	rts

0000cf04 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    cf04:	nop
    cf06:	rts

0000cf08 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    cf08:	nop
    cf0a:	rts

0000cf0c <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    cf0c:	nop
    cf0e:	rts

0000cf10 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    cf10:	subq.l #4,sp
    cf12:	move.l 12(sp),d0
    cf16:	move.w d0,d0
    cf18:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    cf1c:	moveq #1,d0
}
    cf1e:	addq.l #4,sp
    cf20:	rts

0000cf22 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    cf22:	nop
    cf24:	rts

0000cf26 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    cf26:	move.l 16(sp),-(sp)
    cf2a:	move.l 16(sp),-(sp)
    cf2e:	jsr e0e <CstBlankScreen>
    cf34:	addq.l #8,sp
}
    cf36:	nop
    cf38:	rts

0000cf3a <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    cf3a:	pea 19085 <PutChar+0x16b7>
    cf40:	jsr 16f2c <KPrintF>
    cf46:	addq.l #4,sp
}
    cf48:	nop
    cf4a:	rts

0000cf4c <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    cf4c:	movea.l 8(sp),a1
    cf50:	movea.l 12(sp),a0
    cf54:	move.l 8(sp),d1
    cf58:	move.l 4(sp),d0
    cf5c:	move.l a1,-(sp)
    cf5e:	move.l a0,-(sp)
    cf60:	move.l d1,-(sp)
    cf62:	move.l d0,-(sp)
    cf64:	jsr 3b0c <drawLine>
    cf6a:	lea 16(sp),sp
}
    cf6e:	nop
    cf70:	rts

0000cf72 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    cf72:	movea.l 12(sp),a1
    cf76:	movea.l 4(sp),a0
    cf7a:	move.l 8(sp),d1
    cf7e:	move.l 4(sp),d0
    cf82:	move.l a1,-(sp)
    cf84:	move.l a0,-(sp)
    cf86:	move.l d1,-(sp)
    cf88:	move.l d0,-(sp)
    cf8a:	jsr 3b0c <drawLine>
    cf90:	lea 16(sp),sp
}
    cf94:	nop
    cf96:	rts

0000cf98 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    cf98:	pea 190be <PutChar+0x16f0>
    cf9e:	jsr 16f2c <KPrintF>
    cfa4:	addq.l #4,sp
}
    cfa6:	nop
    cfa8:	rts

0000cfaa <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    cfaa:	jsr 1b62 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    cfb0:	pea 1a848 <backdropTextureName>
    cfb6:	pea 1 <_start+0x1>
    cfba:	jsr 3c8e <deleteTextures>
    cfc0:	addq.l #8,sp
	backdropTextureName = 0;
    cfc2:	clr.l 1a848 <backdropTextureName>
	backdropExists = FALSE;
    cfc8:	clr.w 1a84c <backdropExists>
}
    cfce:	nop
    cfd0:	rts

0000cfd2 <killParallax>:

void killParallax () {
    cfd2:	          lea -12(sp),sp
    cfd6:	          move.l a6,-(sp)
	while (parallaxStuff) {
    cfd8:	   ,----- bra.s d044 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    cfda:	,--|----> move.l 1a84e <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    cfe2:	|  |      movea.l 12(sp),a0
    cfe6:	|  |      move.l 42(a0),d0
    cfea:	|  |      move.l d0,1a84e <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    cff0:	|  |      move.l 12(sp),d0
    cff4:	|  |      addq.l #4,d0
    cff6:	|  |      move.l d0,-(sp)
    cff8:	|  |      pea 1 <_start+0x1>
    cffc:	|  |      jsr 3c8e <deleteTextures>
    d002:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d004:	|  |      movea.l 12(sp),a0
    d008:	|  |      move.l (a0),d0
    d00a:	|  |  ,-- beq.s d024 <killParallax+0x52>
    d00c:	|  |  |   movea.l 12(sp),a0
    d010:	|  |  |   move.l (a0),8(sp)
    d014:	|  |  |   move.l 1a7a4 <SysBase>,d0
    d01a:	|  |  |   movea.l d0,a6
    d01c:	|  |  |   movea.l 8(sp),a1
    d020:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d024:	|  |  '-> tst.l 12(sp)
    d028:	|  |  ,-- beq.s d040 <killParallax+0x6e>
    d02a:	|  |  |   move.l 12(sp),4(sp)
    d030:	|  |  |   move.l 1a7a4 <SysBase>,d0
    d036:	|  |  |   movea.l d0,a6
    d038:	|  |  |   movea.l 4(sp),a1
    d03c:	|  |  |   jsr -690(a6)
		k = NULL;
    d040:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d044:	|  '----> move.l 1a84e <parallaxStuff>,d0
    d04a:	'-------- bne.s cfda <killParallax+0x8>
	}
}
    d04c:	          nop
    d04e:	          nop
    d050:	          movea.l (sp)+,a6
    d052:	          lea 12(sp),sp
    d056:	          rts

0000d058 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d058:	       move.l 4(sp),-(sp)
    d05c:	       jsr 6a20 <openFileFromNum>
    d062:	       addq.l #4,sp
    d064:	       tst.l d0
    d066:	   ,-- bne.s d078 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d068:	   |   pea 190df <PutChar+0x1711>
    d06e:	   |   jsr 16f2c <KPrintF>
    d074:	   |   addq.l #4,sp
		return;
    d076:	,--|-- bra.s d098 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d078:	|  '-> move.l 1a78c <bigDataFile>,d0
    d07e:	|      move.l 12(sp),-(sp)
    d082:	|      move.l 12(sp),-(sp)
    d086:	|      move.l d0,-(sp)
    d088:	|      jsr 1dda <CstLoadBackdrop>
    d08e:	|      lea 12(sp),sp
	finishAccess ();
    d092:	|      jsr 6918 <finishAccess>
	
}
    d098:	'----> rts

0000d09a <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d09a:	subq.l #8,sp
    d09c:	movea.l 12(sp),a0
    d0a0:	move.l 16(sp),d1
    d0a4:	move.l 20(sp),d0
    d0a8:	movea.w a0,a0
    d0aa:	move.w a0,6(sp)
    d0ae:	move.w d1,d1
    d0b0:	move.w d1,4(sp)
    d0b4:	move.w d0,d0
    d0b6:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d0ba:	pea 1912e <PutChar+0x1760>
    d0c0:	jsr 16f2c <KPrintF>
    d0c6:	addq.l #4,sp

}
    d0c8:	nop
    d0ca:	addq.l #8,sp
    d0cc:	rts

0000d0ce <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d0ce:	pea 19151 <PutChar+0x1783>
    d0d4:	jsr 16f2c <KPrintF>
    d0da:	addq.l #4,sp
}
    d0dc:	nop
    d0de:	rts

0000d0e0 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d0e0:	pea 1a852 <snapshotTextureName>
    d0e6:	pea 1 <_start+0x1>
    d0ea:	jsr 3c8e <deleteTextures>
    d0f0:	addq.l #8,sp
	snapshotTextureName = 0;
    d0f2:	clr.l 1a852 <snapshotTextureName>
}
    d0f8:	nop
    d0fa:	rts

0000d0fc <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d0fc:	clr.l 1a85e <cameraX>
	cameraY = 0;
    d102:	clr.l 1a862 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d108:	move.l 1a844 <sceneHeight>,d0
    d10e:	move.l d0,d1
    d110:	move.l 1a840 <sceneWidth>,d0
    d116:	move.l d1,-(sp)
    d118:	move.l d0,-(sp)
    d11a:	jsr 36ce <CstReserveBackdrop>
    d120:	addq.l #8,sp
}
    d122:	rts

0000d124 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d124:	jsr cfaa <killBackDrop>
	killParallax ();
    d12a:	jsr cfd2 <killParallax>
	killZBuffer ();
    d130:	jsr 83c8 <killZBuffer>
	sceneWidth = x;
    d136:	move.l 4(sp),d0
    d13a:	move.l d0,1a840 <sceneWidth>
	sceneHeight = y;
    d140:	move.l 8(sp),d0
    d144:	move.l d0,1a844 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d14a:	pea 1918a <PutChar+0x17bc>
    d150:	jsr 16f2c <KPrintF>
    d156:	addq.l #4,sp
	return reserveBackdrop();
    d158:	jsr d0fc <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d15e:	rts

0000d160 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d160:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d162:	move.l 12(sp),-(sp)
    d166:	jsr 6bc <get2bytes>
    d16c:	addq.l #4,sp
    d16e:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d172:	move.l 12(sp),-(sp)
    d176:	jsr 6bc <get2bytes>
    d17c:	addq.l #4,sp
    d17e:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d180:	moveq #1,d0
}
    d182:	addq.l #8,sp
    d184:	rts

0000d186 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d186:	   ,-> lea -12(sp),sp
    d18a:	   |   move.l a6,-(sp)
    d18c:	   |   move.l d2,-(sp)
	if (me) {
    d18e:	   |   tst.l 24(sp)
    d192:	,--|-- beq.w d228 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d196:	|  |   movea.l 24(sp),a0
    d19a:	|  |   move.l 42(a0),d0
    d19e:	|  |   move.l 28(sp),-(sp)
    d1a2:	|  |   move.l d0,-(sp)
    d1a4:	|  '-- jsr d186 <saveParallaxRecursive>(pc)
    d1a8:	|      addq.l #8,sp
		FPutC (fp, 1);
    d1aa:	|      move.l 28(sp),16(sp)
    d1b0:	|      moveq #1,d0
    d1b2:	|      move.l d0,12(sp)
    d1b6:	|      move.l 1a7ac <DOSBase>,d0
    d1bc:	|      movea.l d0,a6
    d1be:	|      move.l 16(sp),d1
    d1c2:	|      move.l 12(sp),d2
    d1c6:	|      jsr -312(a6)
    d1ca:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d1ce:	|      movea.l 24(sp),a0
    d1d2:	|      move.w 28(a0),d0
    d1d6:	|      move.w d0,d0
    d1d8:	|      andi.l #65535,d0
    d1de:	|      move.l 28(sp),-(sp)
    d1e2:	|      move.l d0,-(sp)
    d1e4:	|      jsr 8d0 <put2bytes>
    d1ea:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d1ec:	|      movea.l 24(sp),a0
    d1f0:	|      move.w 30(a0),d0
    d1f4:	|      move.w d0,d0
    d1f6:	|      andi.l #65535,d0
    d1fc:	|      move.l 28(sp),-(sp)
    d200:	|      move.l d0,-(sp)
    d202:	|      jsr 8d0 <put2bytes>
    d208:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d20a:	|      movea.l 24(sp),a0
    d20e:	|      move.w 32(a0),d0
    d212:	|      move.w d0,d0
    d214:	|      andi.l #65535,d0
    d21a:	|      move.l 28(sp),-(sp)
    d21e:	|      move.l d0,-(sp)
    d220:	|      jsr 8d0 <put2bytes>
    d226:	|      addq.l #8,sp
	}
}
    d228:	'----> nop
    d22a:	       move.l (sp)+,d2
    d22c:	       movea.l (sp)+,a6
    d22e:	       lea 12(sp),sp
    d232:	       rts

0000d234 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d234:	pea 191b1 <PutChar+0x17e3>
    d23a:	jsr 16f2c <KPrintF>
    d240:	addq.l #4,sp
	return TRUE;
    d242:	moveq #1,d0
    d244:	rts

0000d246 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d246:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d248:	             move.l 1a856 <allObjectTypes>,(sp)

	while (huntType) {
    d24e:	      ,----- bra.s d266 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d250:	   ,--|----> movea.l (sp),a0
    d252:	   |  |      move.l 4(a0),d0
    d256:	   |  |      cmp.l 8(sp),d0
    d25a:	   |  |  ,-- bne.s d260 <findObjectType+0x1a>
    d25c:	   |  |  |   move.l (sp),d0
    d25e:	,--|--|--|-- bra.s d276 <findObjectType+0x30>
		huntType = huntType -> next;
    d260:	|  |  |  '-> movea.l (sp),a0
    d262:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d266:	|  |  '----> tst.l (sp)
    d268:	|  '-------- bne.s d250 <findObjectType+0xa>
	}

	return loadObjectType (i);
    d26a:	|            move.l 8(sp),-(sp)
    d26e:	|            jsr d336 <loadObjectType>
    d274:	|            addq.l #4,sp
}
    d276:	'----------> addq.l #4,sp
    d278:	             rts

0000d27a <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d27a:	             lea -12(sp),sp
	int i, num = 0;
    d27e:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d282:	             move.l 20(sp),-(sp)
    d286:	             jsr d246 <findObjectType>
    d28c:	             addq.l #4,sp
    d28e:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d290:	             clr.l 8(sp)
    d294:	   ,-------- bra.s d2ca <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d296:	,--|-------> movea.l (sp),a0
    d298:	|  |         move.l 38(a0),d1
    d29c:	|  |         move.l 8(sp),d0
    d2a0:	|  |         lsl.l #3,d0
    d2a2:	|  |         movea.l d1,a0
    d2a4:	|  |         adda.l d0,a0
    d2a6:	|  |         move.l (a0),d0
    d2a8:	|  |         cmp.l 16(sp),d0
    d2ac:	|  |  ,----- bne.s d2c6 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d2ae:	|  |  |      movea.l (sp),a0
    d2b0:	|  |  |      move.l 38(a0),d1
    d2b4:	|  |  |      move.l 8(sp),d0
    d2b8:	|  |  |      lsl.l #3,d0
    d2ba:	|  |  |      movea.l d1,a0
    d2bc:	|  |  |      adda.l d0,a0
    d2be:	|  |  |      move.l 4(a0),4(sp)
			break;
    d2c4:	|  |  |  ,-- bra.s d2d6 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d2c6:	|  |  '--|-> addq.l #1,8(sp)
    d2ca:	|  '-----|-> movea.l (sp),a0
    d2cc:	|        |   move.l 16(a0),d0
    d2d0:	|        |   cmp.l 8(sp),d0
    d2d4:	'--------|-- bgt.s d296 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d2d6:	         '-> move.l 4(sp),d0
}
    d2da:	             lea 12(sp),sp
    d2de:	             rts

0000d2e0 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d2e0:	moveq #1,d0
}
    d2e2:	rts

0000d2e4 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d2e4:	subq.l #8,sp
    d2e6:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d2e8:	move.l 16(sp),-(sp)
    d2ec:	jsr 6bc <get2bytes>
    d2f2:	addq.l #4,sp
    d2f4:	move.l d0,-(sp)
    d2f6:	jsr d336 <loadObjectType>
    d2fc:	addq.l #4,sp
    d2fe:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d302:	movea.l 8(sp),a0
    d306:	move.l (a0),4(sp)
    d30a:	move.l 1a7a4 <SysBase>,d0
    d310:	movea.l d0,a6
    d312:	movea.l 4(sp),a1
    d316:	jsr -690(a6)
	r -> screenName = readString (fp);
    d31a:	move.l 16(sp),-(sp)
    d31e:	jsr b02 <readString>
    d324:	addq.l #4,sp
    d326:	movea.l 8(sp),a0
    d32a:	move.l d0,(a0)
	return r;
    d32c:	move.l 8(sp),d0
}
    d330:	movea.l (sp)+,a6
    d332:	addq.l #8,sp
    d334:	rts

0000d336 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d336:	          lea -84(sp),sp
    d33a:	          move.l a6,-(sp)
    d33c:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d33e:	          moveq #42,d0
    d340:	          move.l d0,84(sp)
    d344:	          clr.l 80(sp)
    d348:	          move.l 1a7a4 <SysBase>,d0
    d34e:	          movea.l d0,a6
    d350:	          move.l 84(sp),d0
    d354:	          move.l 80(sp),d1
    d358:	          jsr -684(a6)
    d35c:	          move.l d0,76(sp)
    d360:	          move.l 76(sp),d0
    d364:	          move.l d0,72(sp)

    if (newType) {
    d368:	,-------- beq.w d5e2 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d36c:	|         move.l 96(sp),-(sp)
    d370:	|         jsr 6ae8 <openObjectSlice>
    d376:	|         addq.l #4,sp
    d378:	|         tst.w d0
    d37a:	+-------- beq.w d5e2 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d37e:	|         move.l 1a78c <bigDataFile>,d0
    d384:	|         move.l d0,-(sp)
    d386:	|         jsr 6bc <get2bytes>
    d38c:	|         addq.l #4,sp
    d38e:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d392:	|         move.l 1a78c <bigDataFile>,64(sp)
    d39a:	|         move.l 1a7ac <DOSBase>,d0
    d3a0:	|         movea.l d0,a6
    d3a2:	|         move.l 64(sp),d1
    d3a6:	|         jsr -306(a6)
    d3aa:	|         move.l d0,60(sp)
    d3ae:	|         move.l 60(sp),d0
    d3b2:	|         move.l d0,d0
    d3b4:	|         movea.l 72(sp),a0
    d3b8:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d3bc:	|         move.l 1a78c <bigDataFile>,56(sp)
    d3c4:	|         move.l 1a7ac <DOSBase>,d0
    d3ca:	|         movea.l d0,a6
    d3cc:	|         move.l 56(sp),d1
    d3d0:	|         jsr -306(a6)
    d3d4:	|         move.l d0,52(sp)
    d3d8:	|         move.l 52(sp),d0
    d3dc:	|         move.l d0,d0
    d3de:	|         movea.l 72(sp),a0
    d3e2:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d3e6:	|         move.l 1a78c <bigDataFile>,48(sp)
    d3ee:	|         move.l 1a7ac <DOSBase>,d0
    d3f4:	|         movea.l d0,a6
    d3f6:	|         move.l 48(sp),d1
    d3fa:	|         jsr -306(a6)
    d3fe:	|         move.l d0,44(sp)
    d402:	|         move.l 44(sp),d0
    d406:	|         move.l d0,d0
    d408:	|         movea.l 72(sp),a0
    d40c:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d410:	|         move.l 1a78c <bigDataFile>,40(sp)
    d418:	|         move.l 1a7ac <DOSBase>,d0
    d41e:	|         movea.l d0,a6
    d420:	|         move.l 40(sp),d1
    d424:	|         jsr -306(a6)
    d428:	|         move.l d0,36(sp)
    d42c:	|         move.l 36(sp),d0
    d430:	|         movea.l 72(sp),a0
    d434:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d438:	|         move.l 1a78c <bigDataFile>,32(sp)
    d440:	|         move.l 1a7ac <DOSBase>,d0
    d446:	|         movea.l d0,a6
    d448:	|         move.l 32(sp),d1
    d44c:	|         jsr -306(a6)
    d450:	|         move.l d0,28(sp)
    d454:	|         move.l 28(sp),d0
    d458:	|         movea.l 72(sp),a0
    d45c:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d460:	|         move.l 1a78c <bigDataFile>,d0
    d466:	|         move.l d0,-(sp)
    d468:	|         jsr 718 <get4bytes>
    d46e:	|         addq.l #4,sp
    d470:	|         movea.l 72(sp),a0
    d474:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d478:	|         move.l 1a78c <bigDataFile>,d0
    d47e:	|         move.l d0,-(sp)
    d480:	|         jsr 6bc <get2bytes>
    d486:	|         addq.l #4,sp
    d488:	|         movea.l 72(sp),a0
    d48c:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d490:	|         move.l 1a78c <bigDataFile>,24(sp)
    d498:	|         move.l 1a7ac <DOSBase>,d0
    d49e:	|         movea.l d0,a6
    d4a0:	|         move.l 24(sp),d1
    d4a4:	|         jsr -306(a6)
    d4a8:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d4ac:	|         move.l 1a78c <bigDataFile>,d0
    d4b2:	|         move.l d0,-(sp)
    d4b4:	|         jsr 7d8 <getFloat>
    d4ba:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d4bc:	|         move.l 1a78c <bigDataFile>,d0
    d4c2:	|         move.l d0,-(sp)
    d4c4:	|         jsr 7d8 <getFloat>
    d4ca:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d4cc:	|         move.l 1a78c <bigDataFile>,d0
    d4d2:	|         move.l d0,-(sp)
    d4d4:	|         jsr 6bc <get2bytes>
    d4da:	|         addq.l #4,sp
    d4dc:	|         move.l d0,d0
    d4de:	|         movea.l 72(sp),a0
    d4e2:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d4e6:	|         move.l 1a78c <bigDataFile>,d0
    d4ec:	|         move.l d0,-(sp)
    d4ee:	|         jsr 6bc <get2bytes>
    d4f4:	|         addq.l #4,sp
    d4f6:	|         movea.l 72(sp),a0
    d4fa:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d4fe:	|         movea.l 72(sp),a0
    d502:	|         move.l 16(a0),d0
    d506:	|  ,----- beq.s d538 <loadObjectType+0x202>
    d508:	|  |      movea.l 72(sp),a0
    d50c:	|  |      move.l 16(a0),d0
    d510:	|  |      lsl.l #3,d0
    d512:	|  |      move.l d0,16(sp)
    d516:	|  |      clr.l 12(sp)
    d51a:	|  |      move.l 1a7a4 <SysBase>,d0
    d520:	|  |      movea.l d0,a6
    d522:	|  |      move.l 16(sp),d0
    d526:	|  |      move.l 12(sp),d1
    d52a:	|  |      jsr -684(a6)
    d52e:	|  |      move.l d0,8(sp)
    d532:	|  |      move.l 8(sp),d0
    d536:	|  |  ,-- bra.s d53a <loadObjectType+0x204>
    d538:	|  '--|-> moveq #0,d0
    d53a:	|     '-> movea.l 72(sp),a0
    d53e:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d542:	|         clr.l 88(sp)
    d546:	|     ,-- bra.s d596 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d548:	|  ,--|-> move.l 1a78c <bigDataFile>,d1
    d54e:	|  |  |   movea.l 72(sp),a0
    d552:	|  |  |   movea.l 38(a0),a0
    d556:	|  |  |   move.l 88(sp),d0
    d55a:	|  |  |   lsl.l #3,d0
    d55c:	|  |  |   lea (0,a0,d0.l),a2
    d560:	|  |  |   move.l d1,-(sp)
    d562:	|  |  |   jsr 6bc <get2bytes>
    d568:	|  |  |   addq.l #4,sp
    d56a:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d56c:	|  |  |   move.l 1a78c <bigDataFile>,d1
    d572:	|  |  |   movea.l 72(sp),a0
    d576:	|  |  |   movea.l 38(a0),a0
    d57a:	|  |  |   move.l 88(sp),d0
    d57e:	|  |  |   lsl.l #3,d0
    d580:	|  |  |   lea (0,a0,d0.l),a2
    d584:	|  |  |   move.l d1,-(sp)
    d586:	|  |  |   jsr 6bc <get2bytes>
    d58c:	|  |  |   addq.l #4,sp
    d58e:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d592:	|  |  |   addq.l #1,88(sp)
    d596:	|  |  '-> movea.l 72(sp),a0
    d59a:	|  |      move.l 16(a0),d0
    d59e:	|  |      cmp.l 88(sp),d0
    d5a2:	|  '----- bgt.s d548 <loadObjectType+0x212>
            }
            finishAccess();
    d5a4:	|         jsr 6918 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d5aa:	|         move.l 68(sp),-(sp)
    d5ae:	|         jsr 6922 <getNumberedString>
    d5b4:	|         addq.l #4,sp
    d5b6:	|         movea.l 72(sp),a0
    d5ba:	|         move.l d0,(a0)
            newType->objectNum = i;
    d5bc:	|         movea.l 72(sp),a0
    d5c0:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d5c6:	|         move.l 1a856 <allObjectTypes>,d0
    d5cc:	|         movea.l 72(sp),a0
    d5d0:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d5d4:	|         move.l 72(sp),1a856 <allObjectTypes>
            return newType;
    d5dc:	|         move.l 72(sp),d0
    d5e0:	|     ,-- bra.s d5e4 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d5e2:	'-----|-> moveq #0,d0
}
    d5e4:	      '-> movea.l (sp)+,a2
    d5e6:	          movea.l (sp)+,a6
    d5e8:	          lea 84(sp),sp
    d5ec:	          rts

0000d5ee <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d5ee:	             lea -16(sp),sp
    d5f2:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d5f4:	             move.l #108630,16(sp)

	while (* huntRegion) {
    d5fc:	   ,-------- bra.s d670 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d5fe:	,--|-------> movea.l 16(sp),a0
    d602:	|  |         move.l (a0),d0
    d604:	|  |         cmp.l 24(sp),d0
    d608:	|  |  ,----- bne.s d662 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d60a:	|  |  |      movea.l 24(sp),a0
    d60e:	|  |  |      move.l 8(a0),d0
    d612:	|  |  |      movea.l 16(sp),a0
    d616:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d618:	|  |  |      movea.l 24(sp),a0
    d61c:	|  |  |      move.l 38(a0),12(sp)
    d622:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d628:	|  |  |      movea.l d0,a6
    d62a:	|  |  |      movea.l 12(sp),a1
    d62e:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d632:	|  |  |      movea.l 24(sp),a0
    d636:	|  |  |      move.l (a0),8(sp)
    d63a:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d640:	|  |  |      movea.l d0,a6
    d642:	|  |  |      movea.l 8(sp),a1
    d646:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d64a:	|  |  |      move.l 24(sp),4(sp)
    d650:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d656:	|  |  |      movea.l d0,a6
    d658:	|  |  |      movea.l 4(sp),a1
    d65c:	|  |  |      jsr -690(a6)
			return;
    d660:	|  |  |  ,-- bra.s d686 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d662:	|  |  '--|-> movea.l 16(sp),a0
    d666:	|  |     |   move.l (a0),d0
    d668:	|  |     |   move.l d0,d1
    d66a:	|  |     |   addq.l #8,d1
    d66c:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d670:	|  '-----|-> movea.l 16(sp),a0
    d674:	|        |   move.l (a0),d0
    d676:	'--------|-- bne.s d5fe <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d678:	         |   pea 191d8 <PutChar+0x180a>
    d67e:	         |   jsr 16f2c <KPrintF>
    d684:	         |   addq.l #4,sp
}
    d686:	         '-> movea.l (sp)+,a6
    d688:	             lea 16(sp),sp
    d68c:	             rts

0000d68e <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d68e:	movea.l 4(sp),a0
    d692:	move.l 4(a0),d0
    d696:	move.l 8(sp),-(sp)
    d69a:	move.l d0,-(sp)
    d69c:	jsr 8d0 <put2bytes>
    d6a2:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d6a4:	movea.l 4(sp),a0
    d6a8:	move.l (a0),d0
    d6aa:	move.l 8(sp),-(sp)
    d6ae:	move.l d0,-(sp)
    d6b0:	jsr bd8 <writeString>
    d6b6:	addq.l #8,sp
    d6b8:	nop
    d6ba:	rts

0000d6bc <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d6bc:	                         lea -112(sp),sp
    d6c0:	                         move.l a6,-(sp)
    d6c2:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d6c4:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d6c8:	                         move.w 1a85c <saveEncoding>,d0
    d6ce:	                  ,----- beq.s d6d8 <fileToStack+0x1c>
    d6d0:	                  |      move.l #102910,d0
    d6d6:	                  |  ,-- bra.s d6de <fileToStack+0x22>
    d6d8:	                  '--|-> move.l #102936,d0
    d6de:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d6e2:	                         move.l 124(sp),112(sp)
    d6e8:	                         move.l #1005,108(sp)
    d6f0:	                         move.l 1a7ac <DOSBase>,d0
    d6f6:	                         movea.l d0,a6
    d6f8:	                         move.l 112(sp),d1
    d6fc:	                         move.l 108(sp),d2
    d700:	                         jsr -30(a6)
    d704:	                         move.l d0,104(sp)
    d708:	                         move.l 104(sp),d0
    d70c:	                         move.l d0,100(sp)
    if (!fp) {
    d710:	                     ,-- bne.s d72a <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d712:	                     |   move.l 124(sp),-(sp)
    d716:	                     |   pea 1922f <PutChar+0x1861>
    d71c:	                     |   jsr 16f2c <KPrintF>
    d722:	                     |   addq.l #8,sp
        return FALSE;
    d724:	                     |   clr.w d0
    d726:	,--------------------|-- bra.w da20 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    d72a:	|                    '-> move.w 1a85c <saveEncoding>,d0
    d730:	|                        move.l d0,d0
    d732:	|                        move.b d0,1a85a <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    d738:	|                        move.w 1a85c <saveEncoding>,d0
    d73e:	|                        lsr.w #8,d0
    d740:	|                        move.l d0,d0
    d742:	|                        move.b d0,1a85b <encode2>

    while (*checker) {
    d748:	|                 ,----- bra.s d7ac <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    d74a:	|              ,--|----> move.l 100(sp),30(sp)
    d750:	|              |  |      move.l 1a7ac <DOSBase>,d0
    d756:	|              |  |      movea.l d0,a6
    d758:	|              |  |      move.l 30(sp),d1
    d75c:	|              |  |      jsr -306(a6)
    d760:	|              |  |      move.l d0,26(sp)
    d764:	|              |  |      move.l 26(sp),d1
    d768:	|              |  |      movea.l 116(sp),a0
    d76c:	|              |  |      move.b (a0),d0
    d76e:	|              |  |      ext.w d0
    d770:	|              |  |      movea.w d0,a0
    d772:	|              |  |      cmpa.l d1,a0
    d774:	|              |  |  ,-- beq.s d7a8 <fileToStack+0xec>
            Close(fp);
    d776:	|              |  |  |   move.l 100(sp),22(sp)
    d77c:	|              |  |  |   move.l 1a7ac <DOSBase>,d0
    d782:	|              |  |  |   movea.l d0,a6
    d784:	|              |  |  |   move.l 22(sp),d1
    d788:	|              |  |  |   jsr -36(a6)
    d78c:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    d790:	|              |  |  |   move.l 124(sp),-(sp)
    d794:	|              |  |  |   pea 1923c <PutChar+0x186e>
    d79a:	|              |  |  |   jsr 16f2c <KPrintF>
    d7a0:	|              |  |  |   addq.l #8,sp
            return FALSE;
    d7a2:	|              |  |  |   clr.w d0
    d7a4:	+--------------|--|--|-- bra.w da20 <fileToStack+0x364>
        }
        checker++;
    d7a8:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    d7ac:	|              |  '----> movea.l 116(sp),a0
    d7b0:	|              |         move.b (a0),d0
    d7b2:	|              '-------- bne.s d74a <fileToStack+0x8e>
    }

    if (saveEncoding) {
    d7b4:	|                        move.w 1a85c <saveEncoding>,d0
    d7ba:	|  ,-------------------- beq.s d82e <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    d7bc:	|  |                     move.l 100(sp),-(sp)
    d7c0:	|  |                     jsr da2a <readStringEncoded>
    d7c6:	|  |                     addq.l #4,sp
    d7c8:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    d7cc:	|  |                     pea 1927d <PutChar+0x18af>
    d7d2:	|  |                     move.l 100(sp),-(sp)
    d7d6:	|  |                     jsr 1398c <strcmp>
    d7dc:	|  |                     addq.l #8,sp
    d7de:	|  |                     tst.l d0
    d7e0:	|  |                 ,-- beq.s d814 <fileToStack+0x158>
            Close(fp);
    d7e2:	|  |                 |   move.l 100(sp),88(sp)
    d7e8:	|  |                 |   move.l 1a7ac <DOSBase>,d0
    d7ee:	|  |                 |   movea.l d0,a6
    d7f0:	|  |                 |   move.l 88(sp),d1
    d7f4:	|  |                 |   jsr -36(a6)
    d7f8:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    d7fc:	|  |                 |   move.l 124(sp),-(sp)
    d800:	|  |                 |   pea 1928c <PutChar+0x18be>
    d806:	|  |                 |   jsr 16f2c <KPrintF>
    d80c:	|  |                 |   addq.l #8,sp
            return FALSE;
    d80e:	|  |                 |   clr.w d0
    d810:	+--|-----------------|-- bra.w da20 <fileToStack+0x364>
        }
        FreeVec(checker);
    d814:	|  |                 '-> move.l 96(sp),92(sp)
    d81a:	|  |                     move.l 1a7a4 <SysBase>,d0
    d820:	|  |                     movea.l d0,a6
    d822:	|  |                     movea.l 92(sp),a1
    d826:	|  |                     jsr -690(a6)
        checker = NULL;
    d82a:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    d82e:	|  >-------------------> move.w 1a85c <saveEncoding>,d0
    d834:	|  |     ,-------------- beq.w d968 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    d838:	|  |     |               move.l 100(sp),76(sp)
    d83e:	|  |     |               move.l 1a7ac <DOSBase>,d0
    d844:	|  |     |               movea.l d0,a6
    d846:	|  |     |               move.l 76(sp),d1
    d84a:	|  |     |               jsr -306(a6)
    d84e:	|  |     |               move.l d0,72(sp)
    d852:	|  |     |               move.l 72(sp),d0
    d856:	|  |     |               move.b 1a85a <encode1>,d1
    d85c:	|  |     |               ext.w d1
    d85e:	|  |     |               ext.l d1
    d860:	|  |     |               move.l d0,d2
    d862:	|  |     |               eor.l d1,d2
    d864:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    d868:	|  |     |               moveq #-1,d0
    d86a:	|  |     |               cmp.l 68(sp),d0
    d86e:	|  |  ,--|-------------- beq.w d9fe <fileToStack+0x342>

            char i = (char) tmp;
    d872:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    d878:	|  |  |  |               move.b 67(sp),d0
    d87c:	|  |  |  |               ext.w d0
    d87e:	|  |  |  |               movea.w d0,a0
    d880:	|  |  |  |               moveq #2,d2
    d882:	|  |  |  |               cmp.l a0,d2
    d884:	|  |  |  |     ,-------- beq.s d900 <fileToStack+0x244>
    d886:	|  |  |  |     |         moveq #2,d0
    d888:	|  |  |  |     |         cmp.l a0,d0
    d88a:	|  |  |  |  ,--|-------- blt.w d936 <fileToStack+0x27a>
    d88e:	|  |  |  |  |  |         cmpa.w #0,a0
    d892:	|  |  |  |  |  |     ,-- beq.s d89e <fileToStack+0x1e2>
    d894:	|  |  |  |  |  |     |   moveq #1,d2
    d896:	|  |  |  |  |  |     |   cmp.l a0,d2
    d898:	|  |  |  |  |  |  ,--|-- beq.s d8da <fileToStack+0x21e>
    d89a:	|  |  |  |  +--|--|--|-- bra.w d936 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    d89e:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    d8a2:	|  |  |  |  |  |  |      jsr da2a <readStringEncoded>
    d8a8:	|  |  |  |  |  |  |      addq.l #4,sp
    d8aa:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    d8ae:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    d8b2:	|  |  |  |  |  |  |      lea 14(sp),a0
    d8b6:	|  |  |  |  |  |  |      move.l a0,-(sp)
    d8b8:	|  |  |  |  |  |  |      jsr 14702 <makeTextVar>
    d8be:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    d8c0:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    d8c6:	|  |  |  |  |  |  |      move.l 1a7a4 <SysBase>,d0
    d8cc:	|  |  |  |  |  |  |      movea.l d0,a6
    d8ce:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    d8d2:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    d8d6:	|  |  |  |  |  |  |  ,-- bra.w d98e <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    d8da:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    d8de:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    d8e4:	|  |  |  |  |  |     |   addq.l #4,sp
    d8e6:	|  |  |  |  |  |     |   move.l d0,-(sp)
    d8e8:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    d8ec:	|  |  |  |  |  |     |   lea 18(sp),a0
    d8f0:	|  |  |  |  |  |     |   move.l a0,-(sp)
    d8f2:	|  |  |  |  |  |     |   jsr 14dd2 <setVariable>
    d8f8:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    d8fc:	|  |  |  |  |  |     +-- bra.w d98e <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    d900:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    d906:	|  |  |  |  |        |   move.l 1a7ac <DOSBase>,d0
    d90c:	|  |  |  |  |        |   movea.l d0,a6
    d90e:	|  |  |  |  |        |   move.l 62(sp),d1
    d912:	|  |  |  |  |        |   jsr -306(a6)
    d916:	|  |  |  |  |        |   move.l d0,58(sp)
    d91a:	|  |  |  |  |        |   move.l 58(sp),d0
    d91e:	|  |  |  |  |        |   move.l d0,-(sp)
    d920:	|  |  |  |  |        |   pea 1 <_start+0x1>
    d924:	|  |  |  |  |        |   lea 18(sp),a0
    d928:	|  |  |  |  |        |   move.l a0,-(sp)
    d92a:	|  |  |  |  |        |   jsr 14dd2 <setVariable>
    d930:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    d934:	|  |  |  |  |        +-- bra.s d98e <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    d936:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    d93a:	|  |  |  |           |   pea 1930e <PutChar+0x1940>
    d940:	|  |  |  |           |   jsr 16f2c <KPrintF>
    d946:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    d948:	|  |  |  |           |   move.l 100(sp),46(sp)
    d94e:	|  |  |  |           |   move.l 1a7ac <DOSBase>,d0
    d954:	|  |  |  |           |   movea.l d0,a6
    d956:	|  |  |  |           |   move.l 46(sp),d1
    d95a:	|  |  |  |           |   jsr -36(a6)
    d95e:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    d962:	|  |  |  |           |   clr.w d0
    d964:	+--|--|--|-----------|-- bra.w da20 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    d968:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    d96c:	|  |  |              |   jsr daf0 <readTextPlain>
    d972:	|  |  |              |   addq.l #4,sp
    d974:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    d978:	|  |  |        ,-----|-- beq.w da02 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    d97c:	|  |  |        |     |   move.l 80(sp),-(sp)
    d980:	|  |  |        |     |   lea 14(sp),a0
    d984:	|  |  |        |     |   move.l a0,-(sp)
    d986:	|  |  |        |     |   jsr 14702 <makeTextVar>
    d98c:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    d98e:	|  |  |        |     '-> movea.l 128(sp),a0
    d992:	|  |  |        |         move.l (a0),d0
    d994:	|  |  |        |  ,----- bne.s d9c4 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    d996:	|  |  |        |  |      move.l 128(sp),d0
    d99a:	|  |  |        |  |      move.l d0,-(sp)
    d99c:	|  |  |        |  |      lea 14(sp),a0
    d9a0:	|  |  |        |  |      move.l a0,-(sp)
    d9a2:	|  |  |        |  |      jsr 13da2 <addVarToStackQuick>
    d9a8:	|  |  |        |  |      addq.l #8,sp
    d9aa:	|  |  |        |  |      tst.w d0
    d9ac:	|  |  |        |  |  ,-- bne.s d9b2 <fileToStack+0x2f6>
    d9ae:	|  |  |        |  |  |   clr.w d0
    d9b0:	+--|--|--------|--|--|-- bra.s da20 <fileToStack+0x364>
            sH->last = sH->first;
    d9b2:	|  |  |        |  |  '-> movea.l 128(sp),a0
    d9b6:	|  |  |        |  |      move.l (a0),d0
    d9b8:	|  |  |        |  |      movea.l 128(sp),a0
    d9bc:	|  |  |        |  |      move.l d0,4(a0)
    d9c0:	|  +--|--------|--|----- bra.w d82e <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    d9c4:	|  |  |        |  '----> movea.l 128(sp),a0
    d9c8:	|  |  |        |         move.l 4(a0),d0
    d9cc:	|  |  |        |         addq.l #8,d0
    d9ce:	|  |  |        |         move.l d0,-(sp)
    d9d0:	|  |  |        |         lea 14(sp),a0
    d9d4:	|  |  |        |         move.l a0,-(sp)
    d9d6:	|  |  |        |         jsr 13da2 <addVarToStackQuick>
    d9dc:	|  |  |        |         addq.l #8,sp
    d9de:	|  |  |        |         tst.w d0
    d9e0:	|  |  |        |     ,-- bne.s d9e6 <fileToStack+0x32a>
    d9e2:	|  |  |        |     |   clr.w d0
    d9e4:	+--|--|--------|-----|-- bra.s da20 <fileToStack+0x364>
            sH->last = sH->last->next;
    d9e6:	|  |  |        |     '-> movea.l 128(sp),a0
    d9ea:	|  |  |        |         movea.l 4(a0),a0
    d9ee:	|  |  |        |         move.l 8(a0),d0
    d9f2:	|  |  |        |         movea.l 128(sp),a0
    d9f6:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    d9fa:	|  '--|--------|-------- bra.w d82e <fileToStack+0x172>
            if (tmp == -1) break;
    d9fe:	|     '--------|-------> nop
    da00:	|              |     ,-- bra.s da04 <fileToStack+0x348>
            if (!line) break;
    da02:	|              '-----|-> nop
        }
    }
    Close(fp);
    da04:	|                    '-> move.l 100(sp),38(sp)
    da0a:	|                        move.l 1a7ac <DOSBase>,d0
    da10:	|                        movea.l d0,a6
    da12:	|                        move.l 38(sp),d1
    da16:	|                        jsr -36(a6)
    da1a:	|                        move.l d0,34(sp)
    return TRUE;
    da1e:	|                        moveq #1,d0
}
    da20:	'----------------------> move.l (sp)+,d2
    da22:	                         movea.l (sp)+,a6
    da24:	                         lea 112(sp),sp
    da28:	                         rts

0000da2a <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    da2a:	          lea -32(sp),sp
    da2e:	          move.l a6,-(sp)
    da30:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    da32:	          move.l 44(sp),-(sp)
    da36:	          jsr 6bc <get2bytes>
    da3c:	          addq.l #4,sp
    da3e:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    da42:	          move.l 32(sp),d0
    da46:	          addq.l #1,d0
    da48:	          move.l d0,28(sp)
    da4c:	          clr.l 24(sp)
    da50:	          move.l 1a7a4 <SysBase>,d0
    da56:	          movea.l d0,a6
    da58:	          move.l 28(sp),d0
    da5c:	          move.l 24(sp),d1
    da60:	          jsr -684(a6)
    da64:	          move.l d0,20(sp)
    da68:	          move.l 20(sp),d0
    da6c:	          move.l d0,16(sp)
    if (!s) return NULL;
    da70:	      ,-- bne.s da76 <readStringEncoded+0x4c>
    da72:	      |   moveq #0,d0
    da74:	,-----|-- bra.s dae6 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    da76:	|     '-> clr.l 36(sp)
    da7a:	|     ,-- bra.s dacc <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    da7c:	|  ,--|-> move.l 44(sp),12(sp)
    da82:	|  |  |   move.l 1a7ac <DOSBase>,d0
    da88:	|  |  |   movea.l d0,a6
    da8a:	|  |  |   move.l 12(sp),d1
    da8e:	|  |  |   jsr -306(a6)
    da92:	|  |  |   move.l d0,8(sp)
    da96:	|  |  |   move.l 8(sp),d0
    da9a:	|  |  |   move.l d0,d1
    da9c:	|  |  |   move.b 1a85a <encode1>,d2
    daa2:	|  |  |   move.l 36(sp),d0
    daa6:	|  |  |   movea.l 16(sp),a0
    daaa:	|  |  |   adda.l d0,a0
    daac:	|  |  |   move.b d1,d0
    daae:	|  |  |   eor.b d2,d0
    dab0:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    dab2:	|  |  |   move.b 1a85a <encode1>,d0
    dab8:	|  |  |   move.b d0,d1
    daba:	|  |  |   move.b 1a85b <encode2>,d0
    dac0:	|  |  |   add.b d1,d0
    dac2:	|  |  |   move.b d0,1a85a <encode1>
    for (a = 0; a < len; a++) {
    dac8:	|  |  |   addq.l #1,36(sp)
    dacc:	|  |  '-> move.l 36(sp),d0
    dad0:	|  |      cmp.l 32(sp),d0
    dad4:	|  '----- blt.s da7c <readStringEncoded+0x52>
    }
    s[len] = 0;
    dad6:	|         move.l 32(sp),d0
    dada:	|         movea.l 16(sp),a0
    dade:	|         adda.l d0,a0
    dae0:	|         clr.b (a0)
    return s;
    dae2:	|         move.l 16(sp),d0
}
    dae6:	'-------> move.l (sp)+,d2
    dae8:	          movea.l (sp)+,a6
    daea:	          lea 32(sp),sp
    daee:	          rts

0000daf0 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    daf0:	             lea -104(sp),sp
    daf4:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    daf8:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    dafc:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    db02:	             move.l 124(sp),106(sp)
    db08:	             clr.l 102(sp)
    db0c:	             clr.l 98(sp)
    db10:	             move.l 1a7ac <DOSBase>,d0
    db16:	             movea.l d0,a6
    db18:	             move.l 106(sp),d1
    db1c:	             move.l 102(sp),d2
    db20:	             move.l 98(sp),d3
    db24:	             jsr -66(a6)
    db28:	             move.l d0,94(sp)
    db2c:	             move.l 94(sp),d0
    db30:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    db34:	   ,-------- bra.s db78 <readTextPlain+0x88>
        tmp = FGetC(fp);
    db36:	,--|-------> move.l 124(sp),22(sp)
    db3c:	|  |         move.l 1a7ac <DOSBase>,d0
    db42:	|  |         movea.l d0,a6
    db44:	|  |         move.l 22(sp),d1
    db48:	|  |         jsr -306(a6)
    db4c:	|  |         move.l d0,18(sp)
    db50:	|  |         move.l 18(sp),d0
    db54:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    db58:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    db5e:	|  |         cmpi.b #10,17(sp)
    db64:	|  |  ,----- beq.s db6e <readTextPlain+0x7e>
    db66:	|  |  |      moveq #-1,d0
    db68:	|  |  |      cmp.l 110(sp),d0
    db6c:	|  |  |  ,-- bne.s db74 <readTextPlain+0x84>
            keepGoing = FALSE;
    db6e:	|  |  '--|-> clr.w 114(sp)
    db72:	|  +-----|-- bra.s db78 <readTextPlain+0x88>
        } else {
            stringSize++;
    db74:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    db78:	|  '-------> tst.w 114(sp)
    db7c:	'----------- bne.s db36 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    db7e:	             tst.l 116(sp)
    db82:	         ,-- bne.s db92 <readTextPlain+0xa2>
    db84:	         |   moveq #-1,d0
    db86:	         |   cmp.l 110(sp),d0
    db8a:	         +-- bne.s db92 <readTextPlain+0xa2>
        return NULL;
    db8c:	         |   moveq #0,d0
    db8e:	      ,--|-- bra.w dc78 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    db92:	      |  '-> move.l 124(sp),86(sp)
    db98:	      |      move.l 90(sp),82(sp)
    db9e:	      |      moveq #-1,d0
    dba0:	      |      move.l d0,78(sp)
    dba4:	      |      move.l 1a7ac <DOSBase>,d0
    dbaa:	      |      movea.l d0,a6
    dbac:	      |      move.l 86(sp),d1
    dbb0:	      |      move.l 82(sp),d2
    dbb4:	      |      move.l 78(sp),d3
    dbb8:	      |      jsr -66(a6)
    dbbc:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    dbc0:	      |      move.l 116(sp),d0
    dbc4:	      |      addq.l #1,d0
    dbc6:	      |      move.l d0,70(sp)
    dbca:	      |      clr.l 66(sp)
    dbce:	      |      move.l 1a7a4 <SysBase>,d0
    dbd4:	      |      movea.l d0,a6
    dbd6:	      |      move.l 70(sp),d0
    dbda:	      |      move.l 66(sp),d1
    dbde:	      |      jsr -684(a6)
    dbe2:	      |      move.l d0,62(sp)
    dbe6:	      |      move.l 62(sp),d0
    dbea:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    dbee:	      |  ,-- bne.s dbf6 <readTextPlain+0x106>
    dbf0:	      |  |   moveq #0,d0
    dbf2:	      +--|-- bra.w dc78 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    dbf6:	      |  '-> move.l 124(sp),54(sp)
    dbfc:	      |      move.l 58(sp),50(sp)
    dc02:	      |      moveq #1,d0
    dc04:	      |      move.l d0,46(sp)
    dc08:	      |      move.l 116(sp),42(sp)
    dc0e:	      |      move.l 1a7ac <DOSBase>,d0
    dc14:	      |      movea.l d0,a6
    dc16:	      |      move.l 54(sp),d1
    dc1a:	      |      move.l 50(sp),d2
    dc1e:	      |      move.l 46(sp),d3
    dc22:	      |      move.l 42(sp),d4
    dc26:	      |      jsr -324(a6)
    dc2a:	      |      move.l d0,38(sp)
    dc2e:	      |      move.l 38(sp),d0
    dc32:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    dc36:	      |      move.l 34(sp),d0
    dc3a:	      |      cmp.l 116(sp),d0
    dc3e:	      |  ,-- beq.s dc4e <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    dc40:	      |  |   pea 19343 <PutChar+0x1975>
    dc46:	      |  |   jsr 16f2c <KPrintF>
    dc4c:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    dc4e:	      |  '-> move.l 124(sp),30(sp)
    dc54:	      |      move.l 1a7ac <DOSBase>,d0
    dc5a:	      |      movea.l d0,a6
    dc5c:	      |      move.l 30(sp),d1
    dc60:	      |      jsr -306(a6)
    dc64:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    dc68:	      |      move.l 116(sp),d0
    dc6c:	      |      movea.l 58(sp),a0
    dc70:	      |      adda.l d0,a0
    dc72:	      |      clr.b (a0)
    }

    return reply;
    dc74:	      |      move.l 58(sp),d0
}
    dc78:	      '----> movem.l (sp)+,d2-d4/a6
    dc7c:	             lea 104(sp),sp
    dc80:	             rts

0000dc82 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    dc82:	                      lea -144(sp),sp
    dc86:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    dc8a:	                      move.l 160(sp),148(sp)
    dc90:	                      move.l #1006,144(sp)
    dc98:	                      move.l 1a7ac <DOSBase>,d0
    dc9e:	                      movea.l d0,a6
    dca0:	                      move.l 148(sp),d1
    dca4:	                      move.l 144(sp),d2
    dca8:	                      jsr -30(a6)
    dcac:	                      move.l d0,140(sp)
    dcb0:	                      move.l 140(sp),d0
    dcb4:	                      move.l d0,136(sp)

    if (!fp) {
    dcb8:	                  ,-- bne.s dcd2 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    dcba:	                  |   move.l 160(sp),-(sp)
    dcbe:	                  |   pea 19364 <PutChar+0x1996>
    dcc4:	                  |   jsr 16f2c <KPrintF>
    dcca:	                  |   addq.l #8,sp
        return FALSE;
    dccc:	                  |   clr.w d0
    dcce:	,-----------------|-- bra.w df8e <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    dcd2:	|                 '-> movea.l 164(sp),a0
    dcd6:	|                     movea.l 4(a0),a0
    dcda:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    dcde:	|                     move.w 1a85c <saveEncoding>,d0
    dce4:	|                     move.l d0,d0
    dce6:	|                     move.b d0,1a85a <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    dcec:	|                     move.w 1a85c <saveEncoding>,d0
    dcf2:	|                     lsr.w #8,d0
    dcf4:	|                     move.l d0,d0
    dcf6:	|                     move.b d0,1a85b <encode2>

    if (saveEncoding) {
    dcfc:	|                     move.w 1a85c <saveEncoding>,d0
    dd02:	|                 ,-- beq.s dd54 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    dd04:	|                 |   move.l 136(sp),116(sp)
    dd0a:	|                 |   move.l #102910,112(sp)
    dd12:	|                 |   moveq #99,d0
    dd14:	|                 |   not.b d0
    dd16:	|                 |   add.l sp,d0
    dd18:	|                 |   addi.l #-144,d0
    dd1e:	|                 |   move.l d0,108(sp)
    dd22:	|                 |   move.l 1a7ac <DOSBase>,d0
    dd28:	|                 |   movea.l d0,a6
    dd2a:	|                 |   move.l 116(sp),d1
    dd2e:	|                 |   move.l 112(sp),d2
    dd32:	|                 |   move.l 108(sp),d3
    dd36:	|                 |   jsr -354(a6)
    dd3a:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    dd3e:	|                 |   move.l 136(sp),-(sp)
    dd42:	|                 |   pea 1927d <PutChar+0x18af>
    dd48:	|                 |   jsr df98 <writeStringEncoded>
    dd4e:	|                 |   addq.l #8,sp
    dd50:	|  ,--------------|-- bra.w df66 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    dd54:	|  |              '-> move.l 136(sp),132(sp)
    dd5a:	|  |                  move.l #102936,128(sp)
    dd62:	|  |                  moveq #99,d1
    dd64:	|  |                  not.b d1
    dd66:	|  |                  add.l sp,d1
    dd68:	|  |                  addi.l #-144,d1
    dd6e:	|  |                  move.l d1,124(sp)
    dd72:	|  |                  move.l 1a7ac <DOSBase>,d0
    dd78:	|  |                  movea.l d0,a6
    dd7a:	|  |                  move.l 132(sp),d1
    dd7e:	|  |                  move.l 128(sp),d2
    dd82:	|  |                  move.l 124(sp),d3
    dd86:	|  |                  jsr -354(a6)
    dd8a:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    dd8e:	|  +----------------- bra.w df66 <stackToFile+0x2e4>
        if (saveEncoding) {
    dd92:	|  |  ,-------------> move.w 1a85c <saveEncoding>,d0
    dd98:	|  |  |     ,-------- beq.w deea <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    dd9c:	|  |  |     |         movea.l 152(sp),a0
    dda0:	|  |  |     |         move.l (a0),d0
    dda2:	|  |  |     |         moveq #1,d1
    dda4:	|  |  |     |         cmp.l d0,d1
    dda6:	|  |  |     |     ,-- beq.s ddf6 <stackToFile+0x174>
    dda8:	|  |  |     |     |   moveq #3,d1
    ddaa:	|  |  |     |     |   cmp.l d0,d1
    ddac:	|  |  |     |  ,--|-- bne.w deb8 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    ddb0:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    ddb6:	|  |  |     |  |  |   move.b 1a85a <encode1>,d0
    ddbc:	|  |  |     |  |  |   ext.w d0
    ddbe:	|  |  |     |  |  |   movea.w d0,a0
    ddc0:	|  |  |     |  |  |   move.l a0,72(sp)
    ddc4:	|  |  |     |  |  |   move.l 1a7ac <DOSBase>,d0
    ddca:	|  |  |     |  |  |   movea.l d0,a6
    ddcc:	|  |  |     |  |  |   move.l 76(sp),d1
    ddd0:	|  |  |     |  |  |   move.l 72(sp),d2
    ddd4:	|  |  |     |  |  |   jsr -312(a6)
    ddd8:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    dddc:	|  |  |     |  |  |   movea.l 152(sp),a0
    dde0:	|  |  |     |  |  |   move.l 4(a0),d0
    dde4:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    dde8:	|  |  |     |  |  |   move.l d0,-(sp)
    ddea:	|  |  |     |  |  |   jsr df98 <writeStringEncoded>
    ddf0:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    ddf2:	|  |  |  ,--|--|--|-- bra.w df5c <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    ddf6:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    ddfa:	|  |  |  |  |  |      move.l 4(a0),d0
    ddfe:	|  |  |  |  |  |  ,-- bmi.s de6e <stackToFile+0x1ec>
    de00:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    de04:	|  |  |  |  |  |  |   move.l 4(a0),d0
    de08:	|  |  |  |  |  |  |   cmpi.l #255,d0
    de0e:	|  |  |  |  |  |  +-- bgt.s de6e <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    de10:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    de16:	|  |  |  |  |  |  |   move.b 1a85a <encode1>,d0
    de1c:	|  |  |  |  |  |  |   eori.b #2,d0
    de20:	|  |  |  |  |  |  |   ext.w d0
    de22:	|  |  |  |  |  |  |   movea.w d0,a0
    de24:	|  |  |  |  |  |  |   move.l a0,60(sp)
    de28:	|  |  |  |  |  |  |   move.l 1a7ac <DOSBase>,d0
    de2e:	|  |  |  |  |  |  |   movea.l d0,a6
    de30:	|  |  |  |  |  |  |   move.l 64(sp),d1
    de34:	|  |  |  |  |  |  |   move.l 60(sp),d2
    de38:	|  |  |  |  |  |  |   jsr -312(a6)
    de3c:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    de40:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    de46:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    de4a:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    de50:	|  |  |  |  |  |  |   move.l 1a7ac <DOSBase>,d0
    de56:	|  |  |  |  |  |  |   movea.l d0,a6
    de58:	|  |  |  |  |  |  |   move.l 52(sp),d1
    de5c:	|  |  |  |  |  |  |   move.l 48(sp),d2
    de60:	|  |  |  |  |  |  |   jsr -312(a6)
    de64:	|  |  |  |  |  |  |   move.l d0,44(sp)
    de68:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    de6a:	|  |  |  +--|--|--|-- bra.w df5c <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    de6e:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    de74:	|  |  |  |  |  |      move.b 1a85a <encode1>,d0
    de7a:	|  |  |  |  |  |      eori.b #1,d0
    de7e:	|  |  |  |  |  |      ext.w d0
    de80:	|  |  |  |  |  |      movea.w d0,a0
    de82:	|  |  |  |  |  |      move.l a0,36(sp)
    de86:	|  |  |  |  |  |      move.l 1a7ac <DOSBase>,d0
    de8c:	|  |  |  |  |  |      movea.l d0,a6
    de8e:	|  |  |  |  |  |      move.l 40(sp),d1
    de92:	|  |  |  |  |  |      move.l 36(sp),d2
    de96:	|  |  |  |  |  |      jsr -312(a6)
    de9a:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    de9e:	|  |  |  |  |  |      movea.l 152(sp),a0
    dea2:	|  |  |  |  |  |      move.l 4(a0),d0
    dea6:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    deaa:	|  |  |  |  |  |      move.l d0,-(sp)
    deac:	|  |  |  |  |  |      jsr 958 <put4bytes>
    deb2:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    deb4:	|  |  |  +--|--|----- bra.w df5c <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    deb8:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    debc:	|  |  |  |  |         pea 19376 <PutChar+0x19a8>
    dec2:	|  |  |  |  |         jsr 16f2c <KPrintF>
    dec8:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    deca:	|  |  |  |  |         move.l 136(sp),28(sp)
    ded0:	|  |  |  |  |         move.l 1a7ac <DOSBase>,d0
    ded6:	|  |  |  |  |         movea.l d0,a6
    ded8:	|  |  |  |  |         move.l 28(sp),d1
    dedc:	|  |  |  |  |         jsr -36(a6)
    dee0:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    dee4:	|  |  |  |  |         clr.w d0
    dee6:	+--|--|--|--|-------- bra.w df8e <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    deea:	|  |  |  |  '-------> move.l 152(sp),d0
    deee:	|  |  |  |            move.l d0,-(sp)
    def0:	|  |  |  |            jsr 14ab6 <getTextFromAnyVar>
    def6:	|  |  |  |            addq.l #4,sp
    def8:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    defc:	|  |  |  |     ,----- beq.s df70 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    defe:	|  |  |  |     |      movea.l 100(sp),a0
    df02:	|  |  |  |     |      move.b (a0),d0
    df04:	|  |  |  |     |      ext.w d0
    df06:	|  |  |  |     |      movea.w d0,a0
    df08:	|  |  |  |     |      move.l a0,12(sp)
    df0c:	|  |  |  |     |      move.l 136(sp),96(sp)
    df12:	|  |  |  |     |      move.l #103378,92(sp)
    df1a:	|  |  |  |     |      moveq #99,d0
    df1c:	|  |  |  |     |      not.b d0
    df1e:	|  |  |  |     |      add.l sp,d0
    df20:	|  |  |  |     |      addi.l #-144,d0
    df26:	|  |  |  |     |      move.l d0,88(sp)
    df2a:	|  |  |  |     |      move.l 1a7ac <DOSBase>,d0
    df30:	|  |  |  |     |      movea.l d0,a6
    df32:	|  |  |  |     |      move.l 96(sp),d1
    df36:	|  |  |  |     |      move.l 92(sp),d2
    df3a:	|  |  |  |     |      move.l 88(sp),d3
    df3e:	|  |  |  |     |      jsr -354(a6)
    df42:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    df46:	|  |  |  |     |      move.l 100(sp),80(sp)
    df4c:	|  |  |  |     |      move.l 1a7a4 <SysBase>,d0
    df52:	|  |  |  |     |      movea.l d0,a6
    df54:	|  |  |  |     |      movea.l 80(sp),a1
    df58:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    df5c:	|  |  |  '-----|----> movea.l 152(sp),a0
    df60:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    df66:	|  '--|--------|----> tst.l 152(sp)
    df6a:	|     '--------|----- bne.w dd92 <stackToFile+0x110>
    df6e:	|              |  ,-- bra.s df72 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    df70:	|              '--|-> nop
    }
    Close(fp);
    df72:	|                 '-> move.l 136(sp),20(sp)
    df78:	|                     move.l 1a7ac <DOSBase>,d0
    df7e:	|                     movea.l d0,a6
    df80:	|                     move.l 20(sp),d1
    df84:	|                     jsr -36(a6)
    df88:	|                     move.l d0,16(sp)
    return TRUE;
    df8c:	|                     moveq #1,d0
}
    df8e:	'-------------------> movem.l (sp)+,d2-d3/a6
    df92:	                      lea 144(sp),sp
    df96:	                      rts

0000df98 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    df98:	       lea -20(sp),sp
    df9c:	       move.l a6,-(sp)
    df9e:	       move.l d2,-(sp)
	int a, len = strlen (s);
    dfa0:	       move.l 32(sp),-(sp)
    dfa4:	       jsr 139cc <strlen>
    dfaa:	       addq.l #4,sp
    dfac:	       move.l d0,20(sp)

	put2bytes (len, fp);
    dfb0:	       move.l 36(sp),-(sp)
    dfb4:	       move.l 24(sp),-(sp)
    dfb8:	       jsr 8d0 <put2bytes>
    dfbe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    dfc0:	       clr.l 24(sp)
    dfc4:	   ,-- bra.s e01a <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    dfc6:	,--|-> move.l 36(sp),16(sp)
    dfcc:	|  |   move.l 24(sp),d0
    dfd0:	|  |   movea.l 32(sp),a0
    dfd4:	|  |   adda.l d0,a0
    dfd6:	|  |   move.b (a0),d1
    dfd8:	|  |   move.b 1a85a <encode1>,d0
    dfde:	|  |   eor.b d1,d0
    dfe0:	|  |   ext.w d0
    dfe2:	|  |   movea.w d0,a0
    dfe4:	|  |   move.l a0,12(sp)
    dfe8:	|  |   move.l 1a7ac <DOSBase>,d0
    dfee:	|  |   movea.l d0,a6
    dff0:	|  |   move.l 16(sp),d1
    dff4:	|  |   move.l 12(sp),d2
    dff8:	|  |   jsr -312(a6)
    dffc:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e000:	|  |   move.b 1a85a <encode1>,d0
    e006:	|  |   move.b d0,d1
    e008:	|  |   move.b 1a85b <encode2>,d0
    e00e:	|  |   add.b d1,d0
    e010:	|  |   move.b d0,1a85a <encode1>
	for (a = 0; a < len; a ++) {
    e016:	|  |   addq.l #1,24(sp)
    e01a:	|  '-> move.l 24(sp),d0
    e01e:	|      cmp.l 20(sp),d0
    e022:	'----- blt.s dfc6 <writeStringEncoded+0x2e>
	}
}
    e024:	       nop
    e026:	       nop
    e028:	       move.l (sp)+,d2
    e02a:	       movea.l (sp)+,a6
    e02c:	       lea 20(sp),sp
    e030:	       rts

0000e032 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e032:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e034:	                   tst.l 8(sp)
    e038:	               ,-- bne.s e03e <failSecurityCheck+0xc>
    e03a:	               |   moveq #1,d0
    e03c:	,--------------|-- bra.s e0bc <failSecurityCheck+0x8a>

	int a = 0;
    e03e:	|              '-> clr.l (sp)

	while (fn[a]) {
    e040:	|     ,----------- bra.s e0ae <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e042:	|  ,--|----------> move.l (sp),d0
    e044:	|  |  |            movea.l 8(sp),a0
    e048:	|  |  |            adda.l d0,a0
    e04a:	|  |  |            move.b (a0),d0
    e04c:	|  |  |            ext.w d0
    e04e:	|  |  |            movea.w d0,a0
    e050:	|  |  |            moveq #124,d0
    e052:	|  |  |            cmp.l a0,d0
    e054:	|  |  |     ,----- beq.s e096 <failSecurityCheck+0x64>
    e056:	|  |  |     |      moveq #124,d1
    e058:	|  |  |     |      cmp.l a0,d1
    e05a:	|  |  |  ,--|----- blt.s e0ac <failSecurityCheck+0x7a>
    e05c:	|  |  |  |  |      moveq #92,d0
    e05e:	|  |  |  |  |      cmp.l a0,d0
    e060:	|  |  |  |  +----- beq.s e096 <failSecurityCheck+0x64>
    e062:	|  |  |  |  |      moveq #92,d1
    e064:	|  |  |  |  |      cmp.l a0,d1
    e066:	|  |  |  +--|----- blt.s e0ac <failSecurityCheck+0x7a>
    e068:	|  |  |  |  |      moveq #60,d0
    e06a:	|  |  |  |  |      cmp.l a0,d0
    e06c:	|  |  |  |  |  ,-- blt.s e08c <failSecurityCheck+0x5a>
    e06e:	|  |  |  |  |  |   moveq #34,d1
    e070:	|  |  |  |  |  |   cmp.l a0,d1
    e072:	|  |  |  +--|--|-- bgt.s e0ac <failSecurityCheck+0x7a>
    e074:	|  |  |  |  |  |   moveq #-34,d1
    e076:	|  |  |  |  |  |   add.l a0,d1
    e078:	|  |  |  |  |  |   move.l #83894529,d0
    e07e:	|  |  |  |  |  |   lsr.l d1,d0
    e080:	|  |  |  |  |  |   moveq #1,d1
    e082:	|  |  |  |  |  |   and.l d1,d0
    e084:	|  |  |  |  |  |   sne d0
    e086:	|  |  |  |  |  |   neg.b d0
    e088:	|  |  |  |  +--|-- bne.s e096 <failSecurityCheck+0x64>
    e08a:	|  |  |  +--|--|-- bra.s e0ac <failSecurityCheck+0x7a>
    e08c:	|  |  |  |  |  '-> lea -62(a0),a0
    e090:	|  |  |  |  |      moveq #1,d0
    e092:	|  |  |  |  |      cmp.l a0,d0
    e094:	|  |  |  +--|----- bcs.s e0ac <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e096:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e09a:	|  |  |  |         pea 193d6 <PutChar+0x1a08>
    e0a0:	|  |  |  |         jsr 16f2c <KPrintF>
    e0a6:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e0a8:	|  |  |  |         moveq #1,d0
    e0aa:	+--|--|--|-------- bra.s e0bc <failSecurityCheck+0x8a>
		}
		a++;
    e0ac:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e0ae:	|  |  '----------> move.l (sp),d0
    e0b0:	|  |               movea.l 8(sp),a0
    e0b4:	|  |               adda.l d0,a0
    e0b6:	|  |               move.b (a0),d0
    e0b8:	|  '-------------- bne.s e042 <failSecurityCheck+0x10>
	}
	return FALSE;
    e0ba:	|                  clr.w d0
}
    e0bc:	'----------------> addq.l #4,sp
    e0be:	                   rts

0000e0c0 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e0c0:	             lea -24(sp),sp
    e0c4:	             move.l a6,-(sp)
    e0c6:	             move.l 40(sp),d0
    e0ca:	             move.w d0,d0
    e0cc:	             move.w d0,6(sp)
	int fileNum = -1;
    e0d0:	             moveq #-1,d0
    e0d2:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e0d6:	             jsr 5ea4 <killSpeechTimers>

	switch (numParams) {
    e0dc:	             moveq #2,d0
    e0de:	             cmp.l 32(sp),d0
    e0e2:	      ,----- beq.s e126 <sayCore+0x66>
    e0e4:	      |      moveq #3,d0
    e0e6:	      |      cmp.l 32(sp),d0
    e0ea:	,-----|----- bne.w e208 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e0ee:	|     |      movea.l 36(sp),a0
    e0f2:	|     |      move.l 24(a0),d0
    e0f6:	|     |      move.l d0,-(sp)
    e0f8:	|     |      pea 5 <_start+0x5>
    e0fc:	|     |      lea 20(sp),a0
    e100:	|     |      move.l a0,-(sp)
    e102:	|     |      jsr 144e0 <getValueType>
    e108:	|     |      lea 12(sp),sp
    e10c:	|     |      tst.w d0
    e10e:	|     |  ,-- bne.s e116 <sayCore+0x56>
    e110:	|     |  |   moveq #1,d0
    e112:	|  ,--|--|-- bra.w e218 <sayCore+0x158>
			trimStack (&fun -> stack);
    e116:	|  |  |  '-> moveq #24,d0
    e118:	|  |  |      add.l 36(sp),d0
    e11c:	|  |  |      move.l d0,-(sp)
    e11e:	|  |  |      jsr 14e64 <trimStack>
    e124:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e126:	|  |  '----> movea.l 36(sp),a0
    e12a:	|  |         move.l 24(a0),d0
    e12e:	|  |         move.l d0,-(sp)
    e130:	|  |         jsr 14ab6 <getTextFromAnyVar>
    e136:	|  |         addq.l #4,sp
    e138:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e13c:	|  |     ,-- bne.s e144 <sayCore+0x84>
    e13e:	|  |     |   moveq #1,d0
    e140:	|  +-----|-- bra.w e218 <sayCore+0x158>
			trimStack (&fun -> stack);
    e144:	|  |     '-> moveq #24,d0
    e146:	|  |         add.l 36(sp),d0
    e14a:	|  |         move.l d0,-(sp)
    e14c:	|  |         jsr 14e64 <trimStack>
    e152:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e154:	|  |         movea.l 36(sp),a0
    e158:	|  |         move.l 24(a0),d0
    e15c:	|  |         move.l d0,-(sp)
    e15e:	|  |         pea 7 <_start+0x7>
    e162:	|  |         lea 16(sp),a0
    e166:	|  |         move.l a0,-(sp)
    e168:	|  |         jsr 144e0 <getValueType>
    e16e:	|  |         lea 12(sp),sp
    e172:	|  |         tst.w d0
    e174:	|  |     ,-- bne.s e17c <sayCore+0xbc>
    e176:	|  |     |   moveq #1,d0
    e178:	|  +-----|-- bra.w e218 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e17c:	|  |     '-> movea.l 36(sp),a0
    e180:	|  |         move.l 24(a0),d0
    e184:	|  |         move.l d0,-(sp)
    e186:	|  |         pea 7 <_start+0x7>
    e18a:	|  |         lea 16(sp),a0
    e18e:	|  |         move.l a0,-(sp)
    e190:	|  |         jsr 144e0 <getValueType>
    e196:	|  |         lea 12(sp),sp
    e19a:	|  |         tst.w d0
    e19c:	|  |     ,-- bne.s e1a2 <sayCore+0xe2>
    e19e:	|  |     |   moveq #1,d0
    e1a0:	|  +-----|-- bra.s e218 <sayCore+0x158>
			trimStack (&fun -> stack);
    e1a2:	|  |     '-> moveq #24,d0
    e1a4:	|  |         add.l 36(sp),d0
    e1a8:	|  |         move.l d0,-(sp)
    e1aa:	|  |         jsr 14e64 <trimStack>
    e1b0:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e1b2:	|  |         movea.w 6(sp),a0
    e1b6:	|  |         move.l 12(sp),d1
    e1ba:	|  |         move.l 8(sp),d0
    e1be:	|  |         move.l a0,-(sp)
    e1c0:	|  |         move.l d1,-(sp)
    e1c2:	|  |         move.l d0,-(sp)
    e1c4:	|  |         move.l 36(sp),-(sp)
    e1c8:	|  |         jsr 7e64 <wrapSpeech>
    e1ce:	|  |         lea 16(sp),sp
    e1d2:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e1d6:	|  |         movea.l 36(sp),a0
    e1da:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e1e0:	|  |         movea.l 36(sp),a0
    e1e4:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e1ea:	|  |         move.l 24(sp),16(sp)
    e1f0:	|  |         move.l 1a7a4 <SysBase>,d0
    e1f6:	|  |         movea.l d0,a6
    e1f8:	|  |         movea.l 16(sp),a1
    e1fc:	|  |         jsr -690(a6)
			newText = NULL;
    e200:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e204:	|  |         moveq #0,d0
    e206:	|  +-------- bra.s e218 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e208:	'--|-------> pea 1945c <PutChar+0x1a8e>
    e20e:	   |         jsr 16f2c <KPrintF>
    e214:	   |         addq.l #4,sp
	return BR_ERROR;
    e216:	   |         moveq #1,d0
}
    e218:	   '-------> movea.l (sp)+,a6
    e21a:	             lea 24(sp),sp
    e21e:	             rts

0000e220 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e220:	pea 1 <_start+0x1>
    e224:	move.l 12(sp),-(sp)
    e228:	move.l 12(sp),-(sp)
    e22c:	jsr e0c0 <sayCore>
    e232:	lea 12(sp),sp
}
    e236:	rts

0000e238 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e238:	clr.l -(sp)
    e23a:	move.l 12(sp),-(sp)
    e23e:	move.l 12(sp),-(sp)
    e242:	jsr e0c0 <sayCore>
    e248:	lea 12(sp),sp
}
    e24c:	rts

0000e24e <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e24e:	jsr 14eac <freeze>
	freezeSubs (); 
    e254:	jsr 5494 <freezeSubs>
	fun -> freezerLevel = 0;
    e25a:	movea.l 8(sp),a0
    e25e:	clr.b 56(a0)
	return BR_CONTINUE;
    e262:	moveq #2,d0
}
    e264:	rts

0000e266 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e266:	jsr 150b0 <unfreeze>
	unfreezeSubs (); 
    e26c:	jsr 68e6 <unfreezeSubs>
	return BR_CONTINUE;
    e272:	moveq #2,d0
}
    e274:	rts

0000e276 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e276:	jsr 1508c <howFrozen>
    e27c:	move.l d0,d1
    e27e:	moveq #28,d0
    e280:	add.l 8(sp),d0
    e284:	move.l d1,-(sp)
    e286:	pea 1 <_start+0x1>
    e28a:	move.l d0,-(sp)
    e28c:	jsr 14dd2 <setVariable>
    e292:	lea 12(sp),sp
	return BR_CONTINUE; 
    e296:	moveq #2,d0
}
    e298:	rts

0000e29a <builtIn_setCursor>:

builtIn(setCursor)
{
    e29a:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e29c:	movea.l 12(sp),a0
    e2a0:	move.l 24(a0),d0
    e2a4:	move.l d0,-(sp)
    e2a6:	jsr 149b8 <getAnimationFromVar>
    e2ac:	addq.l #4,sp
    e2ae:	move.l d0,(sp)
	pickAnimCursor (aa);
    e2b0:	move.l (sp),-(sp)
    e2b2:	jsr d6c <pickAnimCursor>
    e2b8:	addq.l #4,sp
	trimStack (&fun -> stack);
    e2ba:	moveq #24,d0
    e2bc:	add.l 12(sp),d0
    e2c0:	move.l d0,-(sp)
    e2c2:	jsr 14e64 <trimStack>
    e2c8:	addq.l #4,sp
	return BR_CONTINUE;
    e2ca:	moveq #2,d0
}
    e2cc:	addq.l #4,sp
    e2ce:	rts

0000e2d0 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e2d0:	move.l 1a760 <input+0xa>,d1
    e2d6:	move.l 1a85e <cameraX>,d0
    e2dc:	add.l d0,d1
    e2de:	moveq #28,d0
    e2e0:	add.l 8(sp),d0
    e2e4:	move.l d1,-(sp)
    e2e6:	pea 1 <_start+0x1>
    e2ea:	move.l d0,-(sp)
    e2ec:	jsr 14dd2 <setVariable>
    e2f2:	lea 12(sp),sp
	return BR_CONTINUE;
    e2f6:	moveq #2,d0
}
    e2f8:	rts

0000e2fa <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e2fa:	move.l 1a764 <input+0xe>,d1
    e300:	move.l 1a862 <cameraY>,d0
    e306:	add.l d0,d1
    e308:	moveq #28,d0
    e30a:	add.l 8(sp),d0
    e30e:	move.l d1,-(sp)
    e310:	pea 1 <_start+0x1>
    e314:	move.l d0,-(sp)
    e316:	jsr 14dd2 <setVariable>
    e31c:	lea 12(sp),sp
	return BR_CONTINUE;
    e320:	moveq #2,d0
}
    e322:	rts

0000e324 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e324:	move.l 1a760 <input+0xa>,d0
    e32a:	move.l d0,-(sp)
    e32c:	jsr 1735e <__floatsisf>
    e332:	addq.l #4,sp
    e334:	move.l d0,d1
    e336:	move.l 1a142 <cameraZoom>,d0
    e33c:	move.l d0,-(sp)
    e33e:	move.l d1,-(sp)
    e340:	jsr 17410 <__mulsf3>
    e346:	addq.l #8,sp
    e348:	move.l d0,-(sp)
    e34a:	jsr 172f6 <__fixsfsi>
    e350:	addq.l #4,sp
    e352:	move.l d0,d1
    e354:	moveq #28,d0
    e356:	add.l 8(sp),d0
    e35a:	move.l d1,-(sp)
    e35c:	pea 1 <_start+0x1>
    e360:	move.l d0,-(sp)
    e362:	jsr 14dd2 <setVariable>
    e368:	lea 12(sp),sp
	return BR_CONTINUE;
    e36c:	moveq #2,d0
}
    e36e:	rts

0000e370 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e370:	move.l 1a764 <input+0xe>,d0
    e376:	move.l d0,-(sp)
    e378:	jsr 1735e <__floatsisf>
    e37e:	addq.l #4,sp
    e380:	move.l d0,d1
    e382:	move.l 1a142 <cameraZoom>,d0
    e388:	move.l d0,-(sp)
    e38a:	move.l d1,-(sp)
    e38c:	jsr 17410 <__mulsf3>
    e392:	addq.l #8,sp
    e394:	move.l d0,-(sp)
    e396:	jsr 172f6 <__fixsfsi>
    e39c:	addq.l #4,sp
    e39e:	move.l d0,d1
    e3a0:	moveq #28,d0
    e3a2:	add.l 8(sp),d0
    e3a6:	move.l d1,-(sp)
    e3a8:	pea 1 <_start+0x1>
    e3ac:	move.l d0,-(sp)
    e3ae:	jsr 14dd2 <setVariable>
    e3b4:	lea 12(sp),sp
	return BR_CONTINUE;
    e3b8:	moveq #2,d0
}
    e3ba:	rts

0000e3bc <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e3bc:	jsr 7918 <statusBarText>
    e3c2:	move.l d0,d1
    e3c4:	moveq #28,d0
    e3c6:	add.l 8(sp),d0
    e3ca:	move.l d1,-(sp)
    e3cc:	move.l d0,-(sp)
    e3ce:	jsr 14702 <makeTextVar>
    e3d4:	addq.l #8,sp
	return BR_CONTINUE;
    e3d6:	moveq #2,d0
}
    e3d8:	rts

0000e3da <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e3da:	       lea -20(sp),sp
    e3de:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e3e0:	       movea.l 32(sp),a0
    e3e4:	       move.l 24(a0),d0
    e3e8:	       move.l d0,-(sp)
    e3ea:	       jsr 14ab6 <getTextFromAnyVar>
    e3f0:	       addq.l #4,sp
    e3f2:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e3f6:	   ,-- bne.s e3fe <builtIn_getMatchingFiles+0x24>
    e3f8:	   |   moveq #1,d0
    e3fa:	,--|-- bra.w e4c0 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e3fe:	|  '-> moveq #24,d0
    e400:	|      add.l 32(sp),d0
    e404:	|      move.l d0,-(sp)
    e406:	|      jsr 14e64 <trimStack>
    e40c:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e40e:	|      moveq #28,d0
    e410:	|      add.l 32(sp),d0
    e414:	|      move.l d0,-(sp)
    e416:	|      jsr 1472e <unlinkVar>
    e41c:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e41e:	|      movea.l 32(sp),a0
    e422:	|      moveq #6,d0
    e424:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e428:	|      moveq #12,d0
    e42a:	|      move.l d0,16(sp)
    e42e:	|      clr.l 12(sp)
    e432:	|      move.l 1a7a4 <SysBase>,d0
    e438:	|      movea.l d0,a6
    e43a:	|      move.l 16(sp),d0
    e43e:	|      move.l 12(sp),d1
    e442:	|      jsr -684(a6)
    e446:	|      move.l d0,8(sp)
    e44a:	|      move.l 8(sp),d0
    e44e:	|      movea.l 32(sp),a0
    e452:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e456:	|      moveq #32,d0
    e458:	|      add.l 32(sp),d0
    e45c:	|  ,-- bne.s e462 <builtIn_getMatchingFiles+0x88>
    e45e:	|  |   moveq #1,d0
    e460:	+--|-- bra.s e4c0 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e462:	|  '-> movea.l 32(sp),a0
    e466:	|      movea.l 32(a0),a0
    e46a:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e46c:	|      movea.l 32(sp),a0
    e470:	|      movea.l 32(a0),a0
    e474:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e478:	|      movea.l 32(sp),a0
    e47c:	|      movea.l 32(a0),a0
    e480:	|      moveq #1,d0
    e482:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e486:	|      movea.l 32(sp),a0
    e48a:	|      move.l 32(a0),d0
    e48e:	|      move.l 20(sp),-(sp)
    e492:	|      move.l d0,-(sp)
    e494:	|      jsr 1429c <getSavedGamesStack>
    e49a:	|      addq.l #8,sp
    e49c:	|      tst.w d0
    e49e:	|  ,-- bne.s e4a4 <builtIn_getMatchingFiles+0xca>
    e4a0:	|  |   moveq #1,d0
    e4a2:	+--|-- bra.s e4c0 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e4a4:	|  '-> move.l 20(sp),4(sp)
    e4aa:	|      move.l 1a7a4 <SysBase>,d0
    e4b0:	|      movea.l d0,a6
    e4b2:	|      movea.l 4(sp),a1
    e4b6:	|      jsr -690(a6)
	newText = NULL;
    e4ba:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e4be:	|      moveq #2,d0
}
    e4c0:	'----> movea.l (sp)+,a6
    e4c2:	       lea 20(sp),sp
    e4c6:	       rts

0000e4c8 <builtIn_saveGame>:

builtIn(saveGame)
{
    e4c8:	       lea -12(sp),sp
    e4cc:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e4ce:	       movea.l 24(sp),a0
    e4d2:	       move.l 24(a0),d0
    e4d6:	       move.l d0,-(sp)
    e4d8:	       jsr 14ab6 <getTextFromAnyVar>
    e4de:	       addq.l #4,sp
    e4e0:	       move.l d0,1a770 <loadNow>
    trimStack(&fun->stack);
    e4e6:	       moveq #24,d0
    e4e8:	       add.l 24(sp),d0
    e4ec:	       move.l d0,-(sp)
    e4ee:	       jsr 14e64 <trimStack>
    e4f4:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e4f6:	       move.l 1a770 <loadNow>,d0
    e4fc:	       move.l d0,-(sp)
    e4fe:	       jsr 2fe <encodeFilename>
    e504:	       addq.l #4,sp
    e506:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e50a:	       move.l 1a770 <loadNow>,8(sp)
    e512:	       move.l 1a7a4 <SysBase>,d0
    e518:	       movea.l d0,a6
    e51a:	       movea.l 8(sp),a1
    e51e:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e522:	       move.l 12(sp),-(sp)
    e526:	       jsr e032 <failSecurityCheck>
    e52c:	       addq.l #4,sp
    e52e:	       tst.w d0
    e530:	   ,-- beq.s e536 <builtIn_saveGame+0x6e>
    e532:	   |   moveq #1,d0
    e534:	,--|-- bra.s e586 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e536:	|  '-> move.l 12(sp),-(sp)
    e53a:	|      pea 1948a <PutChar+0x1abc>
    e540:	|      jsr 13a0c <joinStrings>
    e546:	|      addq.l #8,sp
    e548:	|      move.l d0,1a770 <loadNow>
    FreeVec(aaaaa);
    e54e:	|      move.l 12(sp),4(sp)
    e554:	|      move.l 1a7a4 <SysBase>,d0
    e55a:	|      movea.l d0,a6
    e55c:	|      movea.l 4(sp),a1
    e560:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e564:	|      moveq #28,d0
    e566:	|      add.l 24(sp),d0
    e56a:	|      clr.l -(sp)
    e56c:	|      pea 1 <_start+0x1>
    e570:	|      move.l d0,-(sp)
    e572:	|      jsr 14dd2 <setVariable>
    e578:	|      lea 12(sp),sp
    saverFunc = fun;
    e57c:	|      move.l 24(sp),1a86e <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e584:	|      moveq #0,d0
}
    e586:	'----> movea.l (sp)+,a6
    e588:	       lea 12(sp),sp
    e58c:	       rts

0000e58e <builtIn_fileExists>:

builtIn(fileExists)
{
    e58e:	       lea -36(sp),sp
    e592:	       move.l a6,-(sp)
    e594:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e596:	       movea.l 52(sp),a0
    e59a:	       move.l 24(a0),d0
    e59e:	       move.l d0,-(sp)
    e5a0:	       jsr 14ab6 <getTextFromAnyVar>
    e5a6:	       addq.l #4,sp
    e5a8:	       move.l d0,1a770 <loadNow>
    trimStack(&fun->stack);
    e5ae:	       moveq #24,d0
    e5b0:	       add.l 52(sp),d0
    e5b4:	       move.l d0,-(sp)
    e5b6:	       jsr 14e64 <trimStack>
    e5bc:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e5be:	       move.l 1a770 <loadNow>,d0
    e5c4:	       move.l d0,-(sp)
    e5c6:	       jsr 2fe <encodeFilename>
    e5cc:	       addq.l #4,sp
    e5ce:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e5d2:	       move.l 1a770 <loadNow>,36(sp)
    e5da:	       move.l 1a7a4 <SysBase>,d0
    e5e0:	       movea.l d0,a6
    e5e2:	       movea.l 36(sp),a1
    e5e6:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e5ea:	       move.l 40(sp),-(sp)
    e5ee:	       jsr e032 <failSecurityCheck>
    e5f4:	       addq.l #4,sp
    e5f6:	       tst.w d0
    e5f8:	   ,-- beq.s e600 <builtIn_fileExists+0x72>
    e5fa:	   |   moveq #1,d0
    e5fc:	,--|-- bra.w e6a0 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e600:	|  '-> move.l 40(sp),32(sp)
    e606:	|      move.l #1005,28(sp)
    e60e:	|      move.l 1a7ac <DOSBase>,d0
    e614:	|      movea.l d0,a6
    e616:	|      move.l 32(sp),d1
    e61a:	|      move.l 28(sp),d2
    e61e:	|      jsr -30(a6)
    e622:	|      move.l d0,24(sp)
    e626:	|      move.l 24(sp),d0
    e62a:	|      move.l d0,20(sp)
    if (!fp) {        
    e62e:	|  ,-- bne.s e63e <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e630:	|  |   pea 1948c <PutChar+0x1abe>
    e636:	|  |   jsr 16f2c <KPrintF>
    e63c:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e63e:	|  '-> tst.l 20(sp)
    e642:	|      sne d0
    e644:	|      neg.b d0
    e646:	|      moveq #0,d1
    e648:	|      move.b d0,d1
    e64a:	|      moveq #28,d0
    e64c:	|      add.l 52(sp),d0
    e650:	|      move.l d1,-(sp)
    e652:	|      pea 1 <_start+0x1>
    e656:	|      move.l d0,-(sp)
    e658:	|      jsr 14dd2 <setVariable>
    e65e:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e662:	|      tst.l 20(sp)
    e666:	|  ,-- beq.s e682 <builtIn_fileExists+0xf4>
    e668:	|  |   move.l 20(sp),16(sp)
    e66e:	|  |   move.l 1a7ac <DOSBase>,d0
    e674:	|  |   movea.l d0,a6
    e676:	|  |   move.l 16(sp),d1
    e67a:	|  |   jsr -36(a6)
    e67e:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e682:	|  '-> move.l 40(sp),8(sp)
    e688:	|      move.l 1a7a4 <SysBase>,d0
    e68e:	|      movea.l d0,a6
    e690:	|      movea.l 8(sp),a1
    e694:	|      jsr -690(a6)
    loadNow = NULL;
    e698:	|      clr.l 1a770 <loadNow>
    return BR_CONTINUE;
    e69e:	|      moveq #2,d0
}
    e6a0:	'----> move.l (sp)+,d2
    e6a2:	       movea.l (sp)+,a6
    e6a4:	       lea 36(sp),sp
    e6a8:	       rts

0000e6aa <builtIn_loadGame>:

builtIn(loadGame)
{
    e6aa:	       lea -36(sp),sp
    e6ae:	       move.l a6,-(sp)
    e6b0:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e6b2:	       movea.l 52(sp),a0
    e6b6:	       move.l 24(a0),d0
    e6ba:	       move.l d0,-(sp)
    e6bc:	       jsr 14ab6 <getTextFromAnyVar>
    e6c2:	       addq.l #4,sp
    e6c4:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e6c8:	       moveq #24,d0
    e6ca:	       add.l 52(sp),d0
    e6ce:	       move.l d0,-(sp)
    e6d0:	       jsr 14e64 <trimStack>
    e6d6:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e6d8:	       move.l 40(sp),-(sp)
    e6dc:	       jsr 2fe <encodeFilename>
    e6e2:	       addq.l #4,sp
    e6e4:	       move.l d0,1a770 <loadNow>
    FreeVec(aaaaa);
    e6ea:	       move.l 40(sp),36(sp)
    e6f0:	       move.l 1a7a4 <SysBase>,d0
    e6f6:	       movea.l d0,a6
    e6f8:	       movea.l 36(sp),a1
    e6fc:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e700:	       move.l 1a770 <loadNow>,d0
    e706:	       move.l d0,-(sp)
    e708:	       jsr e032 <failSecurityCheck>
    e70e:	       addq.l #4,sp
    e710:	       tst.w d0
    e712:	   ,-- beq.s e718 <builtIn_loadGame+0x6e>
    e714:	   |   moveq #1,d0
    e716:	,--|-- bra.s e788 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e718:	|  '-> move.l 1a770 <loadNow>,32(sp)
    e720:	|      move.l #1005,28(sp)
    e728:	|      move.l 1a7ac <DOSBase>,d0
    e72e:	|      movea.l d0,a6
    e730:	|      move.l 32(sp),d1
    e734:	|      move.l 28(sp),d2
    e738:	|      jsr -30(a6)
    e73c:	|      move.l d0,24(sp)
    e740:	|      move.l 24(sp),d0
    e744:	|      move.l d0,20(sp)
    if (fp) {
    e748:	|  ,-- beq.s e768 <builtIn_loadGame+0xbe>
        Close(fp);
    e74a:	|  |   move.l 20(sp),12(sp)
    e750:	|  |   move.l 1a7ac <DOSBase>,d0
    e756:	|  |   movea.l d0,a6
    e758:	|  |   move.l 12(sp),d1
    e75c:	|  |   jsr -36(a6)
    e760:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    e764:	|  |   moveq #0,d0
    e766:	+--|-- bra.s e788 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    e768:	|  '-> move.l 1a770 <loadNow>,16(sp)
    e770:	|      move.l 1a7a4 <SysBase>,d0
    e776:	|      movea.l d0,a6
    e778:	|      movea.l 16(sp),a1
    e77c:	|      jsr -690(a6)
    loadNow = NULL;
    e780:	|      clr.l 1a770 <loadNow>
    return BR_CONTINUE;
    e786:	|      moveq #2,d0
}
    e788:	'----> move.l (sp)+,d2
    e78a:	       movea.l (sp)+,a6
    e78c:	       lea 36(sp),sp
    e790:	       rts

0000e792 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    e792:	move.l 1a844 <sceneHeight>,d0
    e798:	move.l d0,d1
    e79a:	move.l 1a840 <sceneWidth>,d0
    e7a0:	move.l d1,-(sp)
    e7a2:	move.l d0,-(sp)
    e7a4:	clr.l -(sp)
    e7a6:	clr.l -(sp)
    e7a8:	jsr cf26 <blankScreen>
    e7ae:	lea 16(sp),sp
	return BR_CONTINUE;
    e7b2:	moveq #2,d0
}
    e7b4:	rts

0000e7b6 <builtIn_blankArea>:

builtIn(blankArea)
{
    e7b6:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e7ba:	       movea.l 24(sp),a0
    e7be:	       move.l 24(a0),d0
    e7c2:	       move.l d0,-(sp)
    e7c4:	       pea 1 <_start+0x1>
    e7c8:	       lea 8(sp),a0
    e7cc:	       move.l a0,-(sp)
    e7ce:	       jsr 144e0 <getValueType>
    e7d4:	       lea 12(sp),sp
    e7d8:	       tst.w d0
    e7da:	   ,-- bne.s e7e2 <builtIn_blankArea+0x2c>
    e7dc:	   |   moveq #1,d0
    e7de:	,--|-- bra.w e8b8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e7e2:	|  '-> moveq #24,d0
    e7e4:	|      add.l 24(sp),d0
    e7e8:	|      move.l d0,-(sp)
    e7ea:	|      jsr 14e64 <trimStack>
    e7f0:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e7f2:	|      movea.l 24(sp),a0
    e7f6:	|      move.l 24(a0),d0
    e7fa:	|      move.l d0,-(sp)
    e7fc:	|      pea 1 <_start+0x1>
    e800:	|      lea 12(sp),a0
    e804:	|      move.l a0,-(sp)
    e806:	|      jsr 144e0 <getValueType>
    e80c:	|      lea 12(sp),sp
    e810:	|      tst.w d0
    e812:	|  ,-- bne.s e81a <builtIn_blankArea+0x64>
    e814:	|  |   moveq #1,d0
    e816:	+--|-- bra.w e8b8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e81a:	|  '-> moveq #24,d0
    e81c:	|      add.l 24(sp),d0
    e820:	|      move.l d0,-(sp)
    e822:	|      jsr 14e64 <trimStack>
    e828:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e82a:	|      movea.l 24(sp),a0
    e82e:	|      move.l 24(a0),d0
    e832:	|      move.l d0,-(sp)
    e834:	|      pea 1 <_start+0x1>
    e838:	|      moveq #16,d0
    e83a:	|      add.l sp,d0
    e83c:	|      move.l d0,-(sp)
    e83e:	|      jsr 144e0 <getValueType>
    e844:	|      lea 12(sp),sp
    e848:	|      tst.w d0
    e84a:	|  ,-- bne.s e850 <builtIn_blankArea+0x9a>
    e84c:	|  |   moveq #1,d0
    e84e:	+--|-- bra.s e8b8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e850:	|  '-> moveq #24,d0
    e852:	|      add.l 24(sp),d0
    e856:	|      move.l d0,-(sp)
    e858:	|      jsr 14e64 <trimStack>
    e85e:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e860:	|      movea.l 24(sp),a0
    e864:	|      move.l 24(a0),d0
    e868:	|      move.l d0,-(sp)
    e86a:	|      pea 1 <_start+0x1>
    e86e:	|      moveq #20,d0
    e870:	|      add.l sp,d0
    e872:	|      move.l d0,-(sp)
    e874:	|      jsr 144e0 <getValueType>
    e87a:	|      lea 12(sp),sp
    e87e:	|      tst.w d0
    e880:	|  ,-- bne.s e886 <builtIn_blankArea+0xd0>
    e882:	|  |   moveq #1,d0
    e884:	+--|-- bra.s e8b8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e886:	|  '-> moveq #24,d0
    e888:	|      add.l 24(sp),d0
    e88c:	|      move.l d0,-(sp)
    e88e:	|      jsr 14e64 <trimStack>
    e894:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    e896:	|      movea.l (sp),a1
    e898:	|      movea.l 4(sp),a0
    e89c:	|      move.l 8(sp),d1
    e8a0:	|      move.l 12(sp),d0
    e8a4:	|      move.l a1,-(sp)
    e8a6:	|      move.l a0,-(sp)
    e8a8:	|      move.l d1,-(sp)
    e8aa:	|      move.l d0,-(sp)
    e8ac:	|      jsr cf26 <blankScreen>
    e8b2:	|      lea 16(sp),sp
	return BR_CONTINUE;
    e8b6:	|      moveq #2,d0
}
    e8b8:	'----> lea 16(sp),sp
    e8bc:	       rts

0000e8be <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    e8be:	jsr cf3a <darkScreen>
	return BR_CONTINUE;
    e8c4:	moveq #2,d0
}
    e8c6:	rts

0000e8c8 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    e8c8:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e8cc:	       movea.l 20(sp),a0
    e8d0:	       move.l 24(a0),d0
    e8d4:	       move.l d0,-(sp)
    e8d6:	       pea 1 <_start+0x1>
    e8da:	       lea 8(sp),a0
    e8de:	       move.l a0,-(sp)
    e8e0:	       jsr 144e0 <getValueType>
    e8e6:	       lea 12(sp),sp
    e8ea:	       tst.w d0
    e8ec:	   ,-- bne.s e8f4 <builtIn_addOverlay+0x2c>
    e8ee:	   |   moveq #1,d0
    e8f0:	,--|-- bra.w e98c <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e8f4:	|  '-> moveq #24,d0
    e8f6:	|      add.l 20(sp),d0
    e8fa:	|      move.l d0,-(sp)
    e8fc:	|      jsr 14e64 <trimStack>
    e902:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e904:	|      movea.l 20(sp),a0
    e908:	|      move.l 24(a0),d0
    e90c:	|      move.l d0,-(sp)
    e90e:	|      pea 1 <_start+0x1>
    e912:	|      moveq #12,d0
    e914:	|      add.l sp,d0
    e916:	|      move.l d0,-(sp)
    e918:	|      jsr 144e0 <getValueType>
    e91e:	|      lea 12(sp),sp
    e922:	|      tst.w d0
    e924:	|  ,-- bne.s e92a <builtIn_addOverlay+0x62>
    e926:	|  |   moveq #1,d0
    e928:	+--|-- bra.s e98c <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e92a:	|  '-> moveq #24,d0
    e92c:	|      add.l 20(sp),d0
    e930:	|      move.l d0,-(sp)
    e932:	|      jsr 14e64 <trimStack>
    e938:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e93a:	|      movea.l 20(sp),a0
    e93e:	|      move.l 24(a0),d0
    e942:	|      move.l d0,-(sp)
    e944:	|      pea 5 <_start+0x5>
    e948:	|      moveq #16,d0
    e94a:	|      add.l sp,d0
    e94c:	|      move.l d0,-(sp)
    e94e:	|      jsr 144e0 <getValueType>
    e954:	|      lea 12(sp),sp
    e958:	|      tst.w d0
    e95a:	|  ,-- bne.s e960 <builtIn_addOverlay+0x98>
    e95c:	|  |   moveq #1,d0
    e95e:	+--|-- bra.s e98c <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e960:	|  '-> moveq #24,d0
    e962:	|      add.l 20(sp),d0
    e966:	|      move.l d0,-(sp)
    e968:	|      jsr 14e64 <trimStack>
    e96e:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    e970:	|      movea.l (sp),a0
    e972:	|      move.l 4(sp),d1
    e976:	|      move.l 8(sp),d0
    e97a:	|      move.l a0,-(sp)
    e97c:	|      move.l d1,-(sp)
    e97e:	|      move.l d0,-(sp)
    e980:	|      jsr d058 <loadBackDrop>
    e986:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e98a:	|      moveq #2,d0
}
    e98c:	'----> lea 12(sp),sp
    e990:	       rts

0000e992 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    e992:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e996:	       movea.l 20(sp),a0
    e99a:	       move.l 24(a0),d0
    e99e:	       move.l d0,-(sp)
    e9a0:	       pea 1 <_start+0x1>
    e9a4:	       lea 8(sp),a0
    e9a8:	       move.l a0,-(sp)
    e9aa:	       jsr 144e0 <getValueType>
    e9b0:	       lea 12(sp),sp
    e9b4:	       tst.w d0
    e9b6:	   ,-- bne.s e9be <builtIn_mixOverlay+0x2c>
    e9b8:	   |   moveq #1,d0
    e9ba:	,--|-- bra.w ea56 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    e9be:	|  '-> moveq #24,d0
    e9c0:	|      add.l 20(sp),d0
    e9c4:	|      move.l d0,-(sp)
    e9c6:	|      jsr 14e64 <trimStack>
    e9cc:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9ce:	|      movea.l 20(sp),a0
    e9d2:	|      move.l 24(a0),d0
    e9d6:	|      move.l d0,-(sp)
    e9d8:	|      pea 1 <_start+0x1>
    e9dc:	|      moveq #12,d0
    e9de:	|      add.l sp,d0
    e9e0:	|      move.l d0,-(sp)
    e9e2:	|      jsr 144e0 <getValueType>
    e9e8:	|      lea 12(sp),sp
    e9ec:	|      tst.w d0
    e9ee:	|  ,-- bne.s e9f4 <builtIn_mixOverlay+0x62>
    e9f0:	|  |   moveq #1,d0
    e9f2:	+--|-- bra.s ea56 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    e9f4:	|  '-> moveq #24,d0
    e9f6:	|      add.l 20(sp),d0
    e9fa:	|      move.l d0,-(sp)
    e9fc:	|      jsr 14e64 <trimStack>
    ea02:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea04:	|      movea.l 20(sp),a0
    ea08:	|      move.l 24(a0),d0
    ea0c:	|      move.l d0,-(sp)
    ea0e:	|      pea 5 <_start+0x5>
    ea12:	|      moveq #16,d0
    ea14:	|      add.l sp,d0
    ea16:	|      move.l d0,-(sp)
    ea18:	|      jsr 144e0 <getValueType>
    ea1e:	|      lea 12(sp),sp
    ea22:	|      tst.w d0
    ea24:	|  ,-- bne.s ea2a <builtIn_mixOverlay+0x98>
    ea26:	|  |   moveq #1,d0
    ea28:	+--|-- bra.s ea56 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ea2a:	|  '-> moveq #24,d0
    ea2c:	|      add.l 20(sp),d0
    ea30:	|      move.l d0,-(sp)
    ea32:	|      jsr 14e64 <trimStack>
    ea38:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    ea3a:	|      movea.l (sp),a0
    ea3c:	|      move.l 4(sp),d1
    ea40:	|      move.l 8(sp),d0
    ea44:	|      move.l a0,-(sp)
    ea46:	|      move.l d1,-(sp)
    ea48:	|      move.l d0,-(sp)
    ea4a:	|      jsr d0ce <mixBackDrop>
    ea50:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ea54:	|      moveq #2,d0
}
    ea56:	'----> lea 12(sp),sp
    ea5a:	       rts

0000ea5c <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ea5c:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea60:	       movea.l 20(sp),a0
    ea64:	       move.l 24(a0),d0
    ea68:	       move.l d0,-(sp)
    ea6a:	       pea 1 <_start+0x1>
    ea6e:	       lea 8(sp),a0
    ea72:	       move.l a0,-(sp)
    ea74:	       jsr 144e0 <getValueType>
    ea7a:	       lea 12(sp),sp
    ea7e:	       tst.w d0
    ea80:	   ,-- bne.s ea88 <builtIn_pasteImage+0x2c>
    ea82:	   |   moveq #1,d0
    ea84:	,--|-- bra.w eb18 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ea88:	|  '-> moveq #24,d0
    ea8a:	|      add.l 20(sp),d0
    ea8e:	|      move.l d0,-(sp)
    ea90:	|      jsr 14e64 <trimStack>
    ea96:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea98:	|      movea.l 20(sp),a0
    ea9c:	|      move.l 24(a0),d0
    eaa0:	|      move.l d0,-(sp)
    eaa2:	|      pea 1 <_start+0x1>
    eaa6:	|      moveq #12,d0
    eaa8:	|      add.l sp,d0
    eaaa:	|      move.l d0,-(sp)
    eaac:	|      jsr 144e0 <getValueType>
    eab2:	|      lea 12(sp),sp
    eab6:	|      tst.w d0
    eab8:	|  ,-- bne.s eabe <builtIn_pasteImage+0x62>
    eaba:	|  |   moveq #1,d0
    eabc:	+--|-- bra.s eb18 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    eabe:	|  '-> moveq #24,d0
    eac0:	|      add.l 20(sp),d0
    eac4:	|      move.l d0,-(sp)
    eac6:	|      jsr 14e64 <trimStack>
    eacc:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    eace:	|      movea.l 20(sp),a0
    ead2:	|      move.l 24(a0),d0
    ead6:	|      move.l d0,-(sp)
    ead8:	|      jsr 149b8 <getAnimationFromVar>
    eade:	|      addq.l #4,sp
    eae0:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    eae4:	|      moveq #24,d0
    eae6:	|      add.l 20(sp),d0
    eaea:	|      move.l d0,-(sp)
    eaec:	|      jsr 14e64 <trimStack>
    eaf2:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    eaf4:	|      tst.l 8(sp)
    eaf8:	|  ,-- bne.s eafe <builtIn_pasteImage+0xa2>
    eafa:	|  |   moveq #2,d0
    eafc:	+--|-- bra.s eb18 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    eafe:	|  '-> move.l (sp),d1
    eb00:	|      move.l 4(sp),d0
    eb04:	|      move.l 8(sp),-(sp)
    eb08:	|      move.l d1,-(sp)
    eb0a:	|      move.l d0,-(sp)
    eb0c:	|      jsr d94 <pasteCursor>
    eb12:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    eb16:	|      moveq #2,d0
}
    eb18:	'----> lea 12(sp),sp
    eb1c:	       rts

0000eb1e <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    eb1e:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb20:	       movea.l 16(sp),a0
    eb24:	       move.l 24(a0),d0
    eb28:	       move.l d0,-(sp)
    eb2a:	       pea 1 <_start+0x1>
    eb2e:	       move.l sp,d0
    eb30:	       addq.l #8,d0
    eb32:	       move.l d0,-(sp)
    eb34:	       jsr 144e0 <getValueType>
    eb3a:	       lea 12(sp),sp
    eb3e:	       tst.w d0
    eb40:	   ,-- bne.s eb48 <builtIn_setSceneDimensions+0x2a>
    eb42:	   |   moveq #1,d0
    eb44:	,--|-- bra.w ebd0 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    eb48:	|  '-> moveq #24,d0
    eb4a:	|      add.l 16(sp),d0
    eb4e:	|      move.l d0,-(sp)
    eb50:	|      jsr 14e64 <trimStack>
    eb56:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb58:	|      movea.l 16(sp),a0
    eb5c:	|      move.l 24(a0),d0
    eb60:	|      move.l d0,-(sp)
    eb62:	|      pea 1 <_start+0x1>
    eb66:	|      moveq #12,d0
    eb68:	|      add.l sp,d0
    eb6a:	|      move.l d0,-(sp)
    eb6c:	|      jsr 144e0 <getValueType>
    eb72:	|      lea 12(sp),sp
    eb76:	|      tst.w d0
    eb78:	|  ,-- bne.s eb7e <builtIn_setSceneDimensions+0x60>
    eb7a:	|  |   moveq #1,d0
    eb7c:	+--|-- bra.s ebd0 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    eb7e:	|  '-> moveq #24,d0
    eb80:	|      add.l 16(sp),d0
    eb84:	|      move.l d0,-(sp)
    eb86:	|      jsr 14e64 <trimStack>
    eb8c:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    eb8e:	|      move.l (sp),d1
    eb90:	|      move.l 4(sp),d0
    eb94:	|      move.l d1,-(sp)
    eb96:	|      move.l d0,-(sp)
    eb98:	|      jsr d124 <resizeBackdrop>
    eb9e:	|      addq.l #8,sp
    eba0:	|      tst.w d0
    eba2:	|  ,-- beq.s ebc0 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    eba4:	|  |   move.l (sp),d1
    eba6:	|  |   move.l 4(sp),d0
    ebaa:	|  |   move.l d1,-(sp)
    ebac:	|  |   move.l d0,-(sp)
    ebae:	|  |   clr.l -(sp)
    ebb0:	|  |   clr.l -(sp)
    ebb2:	|  |   jsr cf26 <blankScreen>
    ebb8:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    ebbc:	|  |   moveq #2,d0
    ebbe:	+--|-- bra.s ebd0 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    ebc0:	|  '-> pea 194aa <PutChar+0x1adc>
    ebc6:	|      jsr 16f2c <KPrintF>
    ebcc:	|      addq.l #4,sp
	return BR_ERROR;
    ebce:	|      moveq #1,d0
}
    ebd0:	'----> addq.l #8,sp
    ebd2:	       rts

0000ebd4 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    ebd4:	          move.l d3,-(sp)
    ebd6:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebd8:	          movea.l 16(sp),a0
    ebdc:	          move.l 24(a0),d0
    ebe0:	          move.l d0,-(sp)
    ebe2:	          pea 1 <_start+0x1>
    ebe6:	          pea 1a862 <cameraY>
    ebec:	          jsr 144e0 <getValueType>
    ebf2:	          lea 12(sp),sp
    ebf6:	          tst.w d0
    ebf8:	      ,-- bne.s ec00 <builtIn_aimCamera+0x2c>
    ebfa:	      |   moveq #1,d0
    ebfc:	,-----|-- bra.w ee82 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ec00:	|     '-> moveq #24,d0
    ec02:	|         add.l 16(sp),d0
    ec06:	|         move.l d0,-(sp)
    ec08:	|         jsr 14e64 <trimStack>
    ec0e:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec10:	|         movea.l 16(sp),a0
    ec14:	|         move.l 24(a0),d0
    ec18:	|         move.l d0,-(sp)
    ec1a:	|         pea 1 <_start+0x1>
    ec1e:	|         pea 1a85e <cameraX>
    ec24:	|         jsr 144e0 <getValueType>
    ec2a:	|         lea 12(sp),sp
    ec2e:	|         tst.w d0
    ec30:	|     ,-- bne.s ec38 <builtIn_aimCamera+0x64>
    ec32:	|     |   moveq #1,d0
    ec34:	+-----|-- bra.w ee82 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ec38:	|     '-> moveq #24,d0
    ec3a:	|         add.l 16(sp),d0
    ec3e:	|         move.l d0,-(sp)
    ec40:	|         jsr 14e64 <trimStack>
    ec46:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    ec48:	|         move.l 1a85e <cameraX>,d0
    ec4e:	|         move.l d0,-(sp)
    ec50:	|         jsr 1735e <__floatsisf>
    ec56:	|         addq.l #4,sp
    ec58:	|         move.l d0,d2
    ec5a:	|         move.l 1a6f8 <winWidth>,d0
    ec60:	|         lsr.l #1,d0
    ec62:	|         move.l d0,-(sp)
    ec64:	|         jsr 17386 <__floatunsisf>
    ec6a:	|         addq.l #4,sp
    ec6c:	|         move.l d0,d1
    ec6e:	|         move.l 1a142 <cameraZoom>,d0
    ec74:	|         move.l d0,-(sp)
    ec76:	|         move.l d1,-(sp)
    ec78:	|         jsr 17214 <__divsf3>
    ec7e:	|         addq.l #8,sp
    ec80:	|         move.l d0,-(sp)
    ec82:	|         move.l d2,-(sp)
    ec84:	|         jsr 17652 <__subsf3>
    ec8a:	|         addq.l #8,sp
    ec8c:	|         move.l d0,-(sp)
    ec8e:	|         jsr 172f6 <__fixsfsi>
    ec94:	|         addq.l #4,sp
    ec96:	|         move.l d0,1a85e <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    ec9c:	|         move.l 1a862 <cameraY>,d0
    eca2:	|         move.l d0,-(sp)
    eca4:	|         jsr 1735e <__floatsisf>
    ecaa:	|         addq.l #4,sp
    ecac:	|         move.l d0,d2
    ecae:	|         move.l 1a6fc <winHeight>,d0
    ecb4:	|         lsr.l #1,d0
    ecb6:	|         move.l d0,-(sp)
    ecb8:	|         jsr 17386 <__floatunsisf>
    ecbe:	|         addq.l #4,sp
    ecc0:	|         move.l d0,d1
    ecc2:	|         move.l 1a142 <cameraZoom>,d0
    ecc8:	|         move.l d0,-(sp)
    ecca:	|         move.l d1,-(sp)
    eccc:	|         jsr 17214 <__divsf3>
    ecd2:	|         addq.l #8,sp
    ecd4:	|         move.l d0,-(sp)
    ecd6:	|         move.l d2,-(sp)
    ecd8:	|         jsr 17652 <__subsf3>
    ecde:	|         addq.l #8,sp
    ece0:	|         move.l d0,-(sp)
    ece2:	|         jsr 172f6 <__fixsfsi>
    ece8:	|         addq.l #4,sp
    ecea:	|         move.l d0,1a862 <cameraY>

	if (cameraX < 0) cameraX = 0;
    ecf0:	|         move.l 1a85e <cameraX>,d0
    ecf6:	|     ,-- bpl.s ed02 <builtIn_aimCamera+0x12e>
    ecf8:	|     |   clr.l 1a85e <cameraX>
    ecfe:	|  ,--|-- bra.w edb8 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    ed02:	|  |  '-> move.l 1a85e <cameraX>,d0
    ed08:	|  |      move.l d0,-(sp)
    ed0a:	|  |      jsr 1735e <__floatsisf>
    ed10:	|  |      addq.l #4,sp
    ed12:	|  |      move.l d0,d2
    ed14:	|  |      move.l 1a840 <sceneWidth>,d0
    ed1a:	|  |      move.l d0,-(sp)
    ed1c:	|  |      jsr 17386 <__floatunsisf>
    ed22:	|  |      addq.l #4,sp
    ed24:	|  |      move.l d0,d3
    ed26:	|  |      move.l 1a6f8 <winWidth>,d0
    ed2c:	|  |      move.l d0,-(sp)
    ed2e:	|  |      jsr 17386 <__floatunsisf>
    ed34:	|  |      addq.l #4,sp
    ed36:	|  |      move.l d0,d1
    ed38:	|  |      move.l 1a142 <cameraZoom>,d0
    ed3e:	|  |      move.l d0,-(sp)
    ed40:	|  |      move.l d1,-(sp)
    ed42:	|  |      jsr 17214 <__divsf3>
    ed48:	|  |      addq.l #8,sp
    ed4a:	|  |      move.l d0,-(sp)
    ed4c:	|  |      move.l d3,-(sp)
    ed4e:	|  |      jsr 17652 <__subsf3>
    ed54:	|  |      addq.l #8,sp
    ed56:	|  |      move.l d0,-(sp)
    ed58:	|  |      move.l d2,-(sp)
    ed5a:	|  |      jsr 174ca <__gtsf2>
    ed60:	|  |      addq.l #8,sp
    ed62:	|  |      tst.l d0
    ed64:	|  +----- ble.s edb8 <builtIn_aimCamera+0x1e4>
    ed66:	|  |      move.l 1a840 <sceneWidth>,d0
    ed6c:	|  |      move.l d0,-(sp)
    ed6e:	|  |      jsr 17386 <__floatunsisf>
    ed74:	|  |      addq.l #4,sp
    ed76:	|  |      move.l d0,d2
    ed78:	|  |      move.l 1a6f8 <winWidth>,d0
    ed7e:	|  |      move.l d0,-(sp)
    ed80:	|  |      jsr 17386 <__floatunsisf>
    ed86:	|  |      addq.l #4,sp
    ed88:	|  |      move.l d0,d1
    ed8a:	|  |      move.l 1a142 <cameraZoom>,d0
    ed90:	|  |      move.l d0,-(sp)
    ed92:	|  |      move.l d1,-(sp)
    ed94:	|  |      jsr 17214 <__divsf3>
    ed9a:	|  |      addq.l #8,sp
    ed9c:	|  |      move.l d0,-(sp)
    ed9e:	|  |      move.l d2,-(sp)
    eda0:	|  |      jsr 17652 <__subsf3>
    eda6:	|  |      addq.l #8,sp
    eda8:	|  |      move.l d0,-(sp)
    edaa:	|  |      jsr 172f6 <__fixsfsi>
    edb0:	|  |      addq.l #4,sp
    edb2:	|  |      move.l d0,1a85e <cameraX>
	if (cameraY < 0) cameraY = 0;
    edb8:	|  '----> move.l 1a862 <cameraY>,d0
    edbe:	|     ,-- bpl.s edca <builtIn_aimCamera+0x1f6>
    edc0:	|     |   clr.l 1a862 <cameraY>
    edc6:	|  ,--|-- bra.w ee80 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    edca:	|  |  '-> move.l 1a862 <cameraY>,d0
    edd0:	|  |      move.l d0,-(sp)
    edd2:	|  |      jsr 1735e <__floatsisf>
    edd8:	|  |      addq.l #4,sp
    edda:	|  |      move.l d0,d2
    eddc:	|  |      move.l 1a844 <sceneHeight>,d0
    ede2:	|  |      move.l d0,-(sp)
    ede4:	|  |      jsr 17386 <__floatunsisf>
    edea:	|  |      addq.l #4,sp
    edec:	|  |      move.l d0,d3
    edee:	|  |      move.l 1a6fc <winHeight>,d0
    edf4:	|  |      move.l d0,-(sp)
    edf6:	|  |      jsr 17386 <__floatunsisf>
    edfc:	|  |      addq.l #4,sp
    edfe:	|  |      move.l d0,d1
    ee00:	|  |      move.l 1a142 <cameraZoom>,d0
    ee06:	|  |      move.l d0,-(sp)
    ee08:	|  |      move.l d1,-(sp)
    ee0a:	|  |      jsr 17214 <__divsf3>
    ee10:	|  |      addq.l #8,sp
    ee12:	|  |      move.l d0,-(sp)
    ee14:	|  |      move.l d3,-(sp)
    ee16:	|  |      jsr 17652 <__subsf3>
    ee1c:	|  |      addq.l #8,sp
    ee1e:	|  |      move.l d0,-(sp)
    ee20:	|  |      move.l d2,-(sp)
    ee22:	|  |      jsr 174ca <__gtsf2>
    ee28:	|  |      addq.l #8,sp
    ee2a:	|  |      tst.l d0
    ee2c:	|  +----- ble.s ee80 <builtIn_aimCamera+0x2ac>
    ee2e:	|  |      move.l 1a844 <sceneHeight>,d0
    ee34:	|  |      move.l d0,-(sp)
    ee36:	|  |      jsr 17386 <__floatunsisf>
    ee3c:	|  |      addq.l #4,sp
    ee3e:	|  |      move.l d0,d2
    ee40:	|  |      move.l 1a6fc <winHeight>,d0
    ee46:	|  |      move.l d0,-(sp)
    ee48:	|  |      jsr 17386 <__floatunsisf>
    ee4e:	|  |      addq.l #4,sp
    ee50:	|  |      move.l d0,d1
    ee52:	|  |      move.l 1a142 <cameraZoom>,d0
    ee58:	|  |      move.l d0,-(sp)
    ee5a:	|  |      move.l d1,-(sp)
    ee5c:	|  |      jsr 17214 <__divsf3>
    ee62:	|  |      addq.l #8,sp
    ee64:	|  |      move.l d0,-(sp)
    ee66:	|  |      move.l d2,-(sp)
    ee68:	|  |      jsr 17652 <__subsf3>
    ee6e:	|  |      addq.l #8,sp
    ee70:	|  |      move.l d0,-(sp)
    ee72:	|  |      jsr 172f6 <__fixsfsi>
    ee78:	|  |      addq.l #4,sp
    ee7a:	|  |      move.l d0,1a862 <cameraY>
	return BR_CONTINUE;
    ee80:	|  '----> moveq #2,d0
}
    ee82:	'-------> move.l (sp)+,d2
    ee84:	          move.l (sp)+,d3
    ee86:	          rts

0000ee88 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    ee88:	       subq.l #4,sp
    ee8a:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee8c:	       movea.l 16(sp),a0
    ee90:	       move.l 24(a0),d0
    ee94:	       move.l d0,-(sp)
    ee96:	       pea 1 <_start+0x1>
    ee9a:	       moveq #12,d0
    ee9c:	       add.l sp,d0
    ee9e:	       move.l d0,-(sp)
    eea0:	       jsr 144e0 <getValueType>
    eea6:	       lea 12(sp),sp
    eeaa:	       tst.w d0
    eeac:	   ,-- bne.s eeb4 <builtIn_zoomCamera+0x2c>
    eeae:	   |   moveq #1,d0
    eeb0:	,--|-- bra.w f0ae <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    eeb4:	|  '-> moveq #24,d0
    eeb6:	|      add.l 16(sp),d0
    eeba:	|      move.l d0,-(sp)
    eebc:	|      jsr 14e64 <trimStack>
    eec2:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    eec4:	|      move.l 1a760 <input+0xa>,d0
    eeca:	|      move.l d0,-(sp)
    eecc:	|      jsr 1735e <__floatsisf>
    eed2:	|      addq.l #4,sp
    eed4:	|      move.l d0,d1
    eed6:	|      move.l 1a142 <cameraZoom>,d0
    eedc:	|      move.l d0,-(sp)
    eede:	|      move.l d1,-(sp)
    eee0:	|      jsr 17410 <__mulsf3>
    eee6:	|      addq.l #8,sp
    eee8:	|      move.l d0,-(sp)
    eeea:	|      jsr 172f6 <__fixsfsi>
    eef0:	|      addq.l #4,sp
    eef2:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    eef8:	|      move.l 1a764 <input+0xe>,d0
    eefe:	|      move.l d0,-(sp)
    ef00:	|      jsr 1735e <__floatsisf>
    ef06:	|      addq.l #4,sp
    ef08:	|      move.l d0,d1
    ef0a:	|      move.l 1a142 <cameraZoom>,d0
    ef10:	|      move.l d0,-(sp)
    ef12:	|      move.l d1,-(sp)
    ef14:	|      jsr 17410 <__mulsf3>
    ef1a:	|      addq.l #8,sp
    ef1c:	|      move.l d0,-(sp)
    ef1e:	|      jsr 172f6 <__fixsfsi>
    ef24:	|      addq.l #4,sp
    ef26:	|      move.l d0,1a764 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    ef2c:	|      move.l 4(sp),d0
    ef30:	|      move.l d0,-(sp)
    ef32:	|      jsr 1735e <__floatsisf>
    ef38:	|      addq.l #4,sp
    ef3a:	|      move.l #1008981770,-(sp)
    ef40:	|      move.l d0,-(sp)
    ef42:	|      jsr 17410 <__mulsf3>
    ef48:	|      addq.l #8,sp
    ef4a:	|      move.l d0,1a142 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    ef50:	|      move.l 1a6f8 <winWidth>,d0
    ef56:	|      move.l d0,-(sp)
    ef58:	|      jsr 17386 <__floatunsisf>
    ef5e:	|      addq.l #4,sp
    ef60:	|      move.l d0,d1
    ef62:	|      move.l 1a142 <cameraZoom>,d0
    ef68:	|      move.l d0,-(sp)
    ef6a:	|      move.l d1,-(sp)
    ef6c:	|      jsr 17214 <__divsf3>
    ef72:	|      addq.l #8,sp
    ef74:	|      move.l d0,d2
    ef76:	|      move.l 1a840 <sceneWidth>,d0
    ef7c:	|      move.l d0,-(sp)
    ef7e:	|      jsr 17386 <__floatunsisf>
    ef84:	|      addq.l #4,sp
    ef86:	|      move.l d0,-(sp)
    ef88:	|      move.l d2,-(sp)
    ef8a:	|      jsr 174ca <__gtsf2>
    ef90:	|      addq.l #8,sp
    ef92:	|      tst.l d0
    ef94:	|  ,-- ble.s efca <builtIn_zoomCamera+0x142>
    ef96:	|  |   move.l 1a6f8 <winWidth>,d0
    ef9c:	|  |   move.l d0,-(sp)
    ef9e:	|  |   jsr 17386 <__floatunsisf>
    efa4:	|  |   addq.l #4,sp
    efa6:	|  |   move.l d0,d2
    efa8:	|  |   move.l 1a840 <sceneWidth>,d0
    efae:	|  |   move.l d0,-(sp)
    efb0:	|  |   jsr 17386 <__floatunsisf>
    efb6:	|  |   addq.l #4,sp
    efb8:	|  |   move.l d0,-(sp)
    efba:	|  |   move.l d2,-(sp)
    efbc:	|  |   jsr 17214 <__divsf3>
    efc2:	|  |   addq.l #8,sp
    efc4:	|  |   move.l d0,1a142 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    efca:	|  '-> move.l 1a6fc <winHeight>,d0
    efd0:	|      move.l d0,-(sp)
    efd2:	|      jsr 17386 <__floatunsisf>
    efd8:	|      addq.l #4,sp
    efda:	|      move.l d0,d1
    efdc:	|      move.l 1a142 <cameraZoom>,d0
    efe2:	|      move.l d0,-(sp)
    efe4:	|      move.l d1,-(sp)
    efe6:	|      jsr 17214 <__divsf3>
    efec:	|      addq.l #8,sp
    efee:	|      move.l d0,d2
    eff0:	|      move.l 1a844 <sceneHeight>,d0
    eff6:	|      move.l d0,-(sp)
    eff8:	|      jsr 17386 <__floatunsisf>
    effe:	|      addq.l #4,sp
    f000:	|      move.l d0,-(sp)
    f002:	|      move.l d2,-(sp)
    f004:	|      jsr 174ca <__gtsf2>
    f00a:	|      addq.l #8,sp
    f00c:	|      tst.l d0
    f00e:	|  ,-- ble.s f044 <builtIn_zoomCamera+0x1bc>
    f010:	|  |   move.l 1a6fc <winHeight>,d0
    f016:	|  |   move.l d0,-(sp)
    f018:	|  |   jsr 17386 <__floatunsisf>
    f01e:	|  |   addq.l #4,sp
    f020:	|  |   move.l d0,d2
    f022:	|  |   move.l 1a844 <sceneHeight>,d0
    f028:	|  |   move.l d0,-(sp)
    f02a:	|  |   jsr 17386 <__floatunsisf>
    f030:	|  |   addq.l #4,sp
    f032:	|  |   move.l d0,-(sp)
    f034:	|  |   move.l d2,-(sp)
    f036:	|  |   jsr 17214 <__divsf3>
    f03c:	|  |   addq.l #8,sp
    f03e:	|  |   move.l d0,1a142 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f044:	|  '-> move.l 1a760 <input+0xa>,d0
    f04a:	|      move.l d0,-(sp)
    f04c:	|      jsr 1735e <__floatsisf>
    f052:	|      addq.l #4,sp
    f054:	|      move.l d0,d1
    f056:	|      move.l 1a142 <cameraZoom>,d0
    f05c:	|      move.l d0,-(sp)
    f05e:	|      move.l d1,-(sp)
    f060:	|      jsr 17214 <__divsf3>
    f066:	|      addq.l #8,sp
    f068:	|      move.l d0,-(sp)
    f06a:	|      jsr 172f6 <__fixsfsi>
    f070:	|      addq.l #4,sp
    f072:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f078:	|      move.l 1a764 <input+0xe>,d0
    f07e:	|      move.l d0,-(sp)
    f080:	|      jsr 1735e <__floatsisf>
    f086:	|      addq.l #4,sp
    f088:	|      move.l d0,d1
    f08a:	|      move.l 1a142 <cameraZoom>,d0
    f090:	|      move.l d0,-(sp)
    f092:	|      move.l d1,-(sp)
    f094:	|      jsr 17214 <__divsf3>
    f09a:	|      addq.l #8,sp
    f09c:	|      move.l d0,-(sp)
    f09e:	|      jsr 172f6 <__fixsfsi>
    f0a4:	|      addq.l #4,sp
    f0a6:	|      move.l d0,1a764 <input+0xe>

	return BR_CONTINUE;
    f0ac:	|      moveq #2,d0
}
    f0ae:	'----> move.l (sp)+,d2
    f0b0:	       addq.l #4,sp
    f0b2:	       rts

0000f0b4 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f0b4:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f0b6:	             tst.l 8(sp)
    f0ba:	         ,-- bne.s f0ce <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f0bc:	         |   pea 194cf <PutChar+0x1b01>
    f0c2:	         |   jsr 16f2c <KPrintF>
    f0c8:	         |   addq.l #4,sp
		return BR_ERROR;
    f0ca:	         |   moveq #1,d0
    f0cc:	,--------|-- bra.s f12e <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f0ce:	|        '-> jsr 15b08 <rand>
    f0d4:	|            move.l d0,d1
    f0d6:	|            move.l 8(sp),d0
    f0da:	|            move.l d0,-(sp)
    f0dc:	|            move.l d1,-(sp)
    f0de:	|            jsr 17992 <__umodsi3>
    f0e4:	|            addq.l #8,sp
    f0e6:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f0e8:	|     ,----- bra.s f11c <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f0ea:	|  ,--|----> move.l (sp),d0
    f0ec:	|  |  |      cmp.l 8(sp),d0
    f0f0:	|  |  |  ,-- bne.s f10c <builtIn_pickOne+0x58>
    f0f2:	|  |  |  |   moveq #28,d0
    f0f4:	|  |  |  |   add.l 12(sp),d0
    f0f8:	|  |  |  |   movea.l 12(sp),a0
    f0fc:	|  |  |  |   move.l 24(a0),d1
    f100:	|  |  |  |   move.l d0,-(sp)
    f102:	|  |  |  |   move.l d1,-(sp)
    f104:	|  |  |  |   jsr 1499a <copyVariable>
    f10a:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f10c:	|  |  |  '-> moveq #24,d0
    f10e:	|  |  |      add.l 12(sp),d0
    f112:	|  |  |      move.l d0,-(sp)
    f114:	|  |  |      jsr 14e64 <trimStack>
    f11a:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f11c:	|  |  '----> move.l 8(sp),d0
    f120:	|  |         move.l d0,d1
    f122:	|  |         subq.l #1,d1
    f124:	|  |         move.l d1,8(sp)
    f128:	|  |         tst.l d0
    f12a:	|  '-------- bne.s f0ea <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f12c:	|            moveq #2,d0
}
    f12e:	'----------> addq.l #4,sp
    f130:	             rts

0000f132 <builtIn_substring>:

builtIn(substring)
{
    f132:	       lea -40(sp),sp
    f136:	       move.l a6,-(sp)
    f138:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f13a:	       movea.l 56(sp),a0
    f13e:	       move.l 24(a0),d0
    f142:	       move.l d0,-(sp)
    f144:	       pea 1 <_start+0x1>
    f148:	       lea 16(sp),a0
    f14c:	       move.l a0,-(sp)
    f14e:	       jsr 144e0 <getValueType>
    f154:	       lea 12(sp),sp
    f158:	       tst.w d0
    f15a:	   ,-- bne.s f162 <builtIn_substring+0x30>
    f15c:	   |   moveq #1,d0
    f15e:	,--|-- bra.w f2da <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f162:	|  '-> moveq #24,d0
    f164:	|      add.l 56(sp),d0
    f168:	|      move.l d0,-(sp)
    f16a:	|      jsr 14e64 <trimStack>
    f170:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f172:	|      movea.l 56(sp),a0
    f176:	|      move.l 24(a0),d0
    f17a:	|      move.l d0,-(sp)
    f17c:	|      pea 1 <_start+0x1>
    f180:	|      lea 20(sp),a0
    f184:	|      move.l a0,-(sp)
    f186:	|      jsr 144e0 <getValueType>
    f18c:	|      lea 12(sp),sp
    f190:	|      tst.w d0
    f192:	|  ,-- bne.s f19a <builtIn_substring+0x68>
    f194:	|  |   moveq #1,d0
    f196:	+--|-- bra.w f2da <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f19a:	|  '-> moveq #24,d0
    f19c:	|      add.l 56(sp),d0
    f1a0:	|      move.l d0,-(sp)
    f1a2:	|      jsr 14e64 <trimStack>
    f1a8:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f1aa:	|      movea.l 56(sp),a0
    f1ae:	|      move.l 24(a0),d0
    f1b2:	|      move.l d0,-(sp)
    f1b4:	|      jsr 14ab6 <getTextFromAnyVar>
    f1ba:	|      addq.l #4,sp
    f1bc:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f1c0:	|      moveq #24,d0
    f1c2:	|      add.l 56(sp),d0
    f1c6:	|      move.l d0,-(sp)
    f1c8:	|      jsr 14e64 <trimStack>
    f1ce:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f1d0:	|      move.l 44(sp),-(sp)
    f1d4:	|      jsr 139cc <strlen>
    f1da:	|      addq.l #4,sp
    f1dc:	|      move.l d0,d1
    f1de:	|      move.l 12(sp),d0
    f1e2:	|      movea.l d0,a0
    f1e4:	|      move.l 8(sp),d0
    f1e8:	|      add.l a0,d0
    f1ea:	|      cmp.l d1,d0
    f1ec:	|  ,-- bls.s f222 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f1ee:	|  |   move.l 44(sp),-(sp)
    f1f2:	|  |   jsr 139cc <strlen>
    f1f8:	|  |   addq.l #4,sp
    f1fa:	|  |   move.l d0,d1
    f1fc:	|  |   move.l 12(sp),d0
    f200:	|  |   sub.l d0,d1
    f202:	|  |   move.l d1,d0
    f204:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f208:	|  |   move.l 44(sp),-(sp)
    f20c:	|  |   jsr 139cc <strlen>
    f212:	|  |   addq.l #4,sp
    f214:	|  |   move.l d0,d1
    f216:	|  |   move.l 12(sp),d0
    f21a:	|  |   cmp.l d1,d0
    f21c:	|  +-- bls.s f222 <builtIn_substring+0xf0>
            start = 0;
    f21e:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f222:	|  '-> move.l 8(sp),d0
    f226:	|  ,-- bpl.s f22c <builtIn_substring+0xfa>
        length = 0;
    f228:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f22c:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f232:	|      move.l 12(sp),d1
    f236:	|      move.l 8(sp),d0
    f23a:	|      move.l d1,d2
    f23c:	|      add.l d0,d2
    f23e:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f242:	|      move.l 36(sp),d0
    f246:	|      sub.l 40(sp),d0
    f24a:	|      addq.l #1,d0
    f24c:	|      move.l d0,32(sp)
    f250:	|      clr.l 28(sp)
    f254:	|      move.l 1a7a4 <SysBase>,d0
    f25a:	|      movea.l d0,a6
    f25c:	|      move.l 32(sp),d0
    f260:	|      move.l 28(sp),d1
    f264:	|      jsr -684(a6)
    f268:	|      move.l d0,24(sp)
    f26c:	|      move.l 24(sp),d0
    f270:	|      move.l d0,20(sp)
    if (!newString) {
    f274:	|  ,-- bne.s f27a <builtIn_substring+0x148>
        return BR_ERROR;
    f276:	|  |   moveq #1,d0
    f278:	+--|-- bra.s f2da <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f27a:	|  '-> move.l 36(sp),d0
    f27e:	|      sub.l 40(sp),d0
    f282:	|      move.l d0,d1
    f284:	|      move.l 40(sp),d0
    f288:	|      add.l 44(sp),d0
    f28c:	|      move.l d1,-(sp)
    f28e:	|      move.l d0,-(sp)
    f290:	|      move.l 28(sp),-(sp)
    f294:	|      jsr 16ee0 <memcpy>
    f29a:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f29e:	|      move.l 36(sp),d0
    f2a2:	|      sub.l 40(sp),d0
    f2a6:	|      movea.l 20(sp),a0
    f2aa:	|      adda.l d0,a0
    f2ac:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f2ae:	|      moveq #28,d0
    f2b0:	|      add.l 56(sp),d0
    f2b4:	|      move.l 20(sp),-(sp)
    f2b8:	|      move.l d0,-(sp)
    f2ba:	|      jsr 14702 <makeTextVar>
    f2c0:	|      addq.l #8,sp
    FreeVec(newString);
    f2c2:	|      move.l 20(sp),16(sp)
    f2c8:	|      move.l 1a7a4 <SysBase>,d0
    f2ce:	|      movea.l d0,a6
    f2d0:	|      movea.l 16(sp),a1
    f2d4:	|      jsr -690(a6)
    return BR_CONTINUE;
    f2d8:	|      moveq #2,d0
}
    f2da:	'----> move.l (sp)+,d2
    f2dc:	       movea.l (sp)+,a6
    f2de:	       lea 40(sp),sp
    f2e2:	       rts

0000f2e4 <builtIn_stringLength>:

builtIn(stringLength)
{
    f2e4:	subq.l #8,sp
    f2e6:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f2e8:	movea.l 20(sp),a0
    f2ec:	move.l 24(a0),d0
    f2f0:	move.l d0,-(sp)
    f2f2:	jsr 14ab6 <getTextFromAnyVar>
    f2f8:	addq.l #4,sp
    f2fa:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f2fe:	moveq #24,d0
    f300:	add.l 20(sp),d0
    f304:	move.l d0,-(sp)
    f306:	jsr 14e64 <trimStack>
    f30c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f30e:	move.l 8(sp),-(sp)
    f312:	jsr 139cc <strlen>
    f318:	addq.l #4,sp
    f31a:	move.l d0,d1
    f31c:	moveq #28,d0
    f31e:	add.l 20(sp),d0
    f322:	move.l d1,-(sp)
    f324:	pea 1 <_start+0x1>
    f328:	move.l d0,-(sp)
    f32a:	jsr 14dd2 <setVariable>
    f330:	lea 12(sp),sp
	FreeVec(newText);
    f334:	move.l 8(sp),4(sp)
    f33a:	move.l 1a7a4 <SysBase>,d0
    f340:	movea.l d0,a6
    f342:	movea.l 4(sp),a1
    f346:	jsr -690(a6)
	return BR_CONTINUE;
    f34a:	moveq #2,d0
}
    f34c:	movea.l (sp)+,a6
    f34e:	addq.l #8,sp
    f350:	rts

0000f352 <builtIn_newStack>:

builtIn(newStack)
{
    f352:	             lea -12(sp),sp
    f356:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f358:	             moveq #28,d0
    f35a:	             add.l 24(sp),d0
    f35e:	             move.l d0,-(sp)
    f360:	             jsr 1472e <unlinkVar>
    f366:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f368:	             movea.l 24(sp),a0
    f36c:	             moveq #6,d0
    f36e:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f372:	             moveq #12,d1
    f374:	             move.l d1,12(sp)
    f378:	             clr.l 8(sp)
    f37c:	             move.l 1a7a4 <SysBase>,d0
    f382:	             movea.l d0,a6
    f384:	             move.l 12(sp),d0
    f388:	             move.l 8(sp),d1
    f38c:	             jsr -684(a6)
    f390:	             move.l d0,4(sp)
    f394:	             move.l 4(sp),d0
    f398:	             movea.l 24(sp),a0
    f39c:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f3a0:	             movea.l 24(sp),a0
    f3a4:	             move.l 32(a0),d0
    f3a8:	         ,-- bne.s f3b0 <builtIn_newStack+0x5e>
    f3aa:	         |   moveq #1,d0
    f3ac:	,--------|-- bra.w f442 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f3b0:	|        '-> movea.l 24(sp),a0
    f3b4:	|            movea.l 32(a0),a0
    f3b8:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f3ba:	|            movea.l 24(sp),a0
    f3be:	|            movea.l 32(a0),a0
    f3c2:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f3c6:	|            movea.l 24(sp),a0
    f3ca:	|            movea.l 32(a0),a0
    f3ce:	|            moveq #1,d0
    f3d0:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f3d4:	|     ,----- bra.s f430 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f3d6:	|  ,--|----> movea.l 24(sp),a0
    f3da:	|  |  |      move.l 32(a0),d0
    f3de:	|  |  |      move.l d0,d1
    f3e0:	|  |  |      movea.l 24(sp),a0
    f3e4:	|  |  |      move.l 24(a0),d0
    f3e8:	|  |  |      move.l d1,-(sp)
    f3ea:	|  |  |      move.l d0,-(sp)
    f3ec:	|  |  |      jsr 13d1c <addVarToStack>
    f3f2:	|  |  |      addq.l #8,sp
    f3f4:	|  |  |      tst.w d0
    f3f6:	|  |  |  ,-- bne.s f3fc <builtIn_newStack+0xaa>
    f3f8:	|  |  |  |   moveq #1,d0
    f3fa:	+--|--|--|-- bra.s f442 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f3fc:	|  |  |  '-> movea.l 24(sp),a0
    f400:	|  |  |      movea.l 32(a0),a0
    f404:	|  |  |      move.l 4(a0),d0
    f408:	|  |  |  ,-- bne.s f420 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f40a:	|  |  |  |   movea.l 24(sp),a0
    f40e:	|  |  |  |   movea.l 32(a0),a1
    f412:	|  |  |  |   movea.l 24(sp),a0
    f416:	|  |  |  |   movea.l 32(a0),a0
    f41a:	|  |  |  |   move.l (a1),d0
    f41c:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f420:	|  |  |  '-> moveq #24,d0
    f422:	|  |  |      add.l 24(sp),d0
    f426:	|  |  |      move.l d0,-(sp)
    f428:	|  |  |      jsr 14e64 <trimStack>
    f42e:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f430:	|  |  '----> move.l 20(sp),d0
    f434:	|  |         move.l d0,d1
    f436:	|  |         subq.l #1,d1
    f438:	|  |         move.l d1,20(sp)
    f43c:	|  |         tst.l d0
    f43e:	|  '-------- bne.s f3d6 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f440:	|            moveq #2,d0
}
    f442:	'----------> movea.l (sp)+,a6
    f444:	             lea 12(sp),sp
    f448:	             rts

0000f44a <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f44a:	          movea.l 8(sp),a0
    f44e:	          movea.l 24(a0),a0
    f452:	          move.l (a0),d0
    f454:	          moveq #6,d1
    f456:	          cmp.l d0,d1
    f458:	      ,-- beq.s f474 <builtIn_stackSize+0x2a>
    f45a:	      |   moveq #10,d1
    f45c:	      |   cmp.l d0,d1
    f45e:	   ,--|-- beq.s f4b8 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f460:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f462:	   |  |   pea 19502 <PutChar+0x1b34>
    f468:	   |  |   jsr 16f2c <KPrintF>
    f46e:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f470:	   |  |   moveq #1,d0
    f472:	,--|--|-- bra.s f4f2 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f474:	|  |  '-> movea.l 8(sp),a0
    f478:	|  |      movea.l 24(a0),a0
    f47c:	|  |      move.l 4(a0),d0
    f480:	|  |      move.l d0,-(sp)
    f482:	|  |      jsr 14e40 <stackSize>
    f488:	|  |      addq.l #4,sp
    f48a:	|  |      move.l d0,d1
    f48c:	|  |      moveq #28,d0
    f48e:	|  |      add.l 8(sp),d0
    f492:	|  |      move.l d1,-(sp)
    f494:	|  |      pea 1 <_start+0x1>
    f498:	|  |      move.l d0,-(sp)
    f49a:	|  |      jsr 14dd2 <setVariable>
    f4a0:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f4a4:	|  |      moveq #24,d0
    f4a6:	|  |      add.l 8(sp),d0
    f4aa:	|  |      move.l d0,-(sp)
    f4ac:	|  |      jsr 14e64 <trimStack>
    f4b2:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f4b4:	|  |      moveq #2,d0
    f4b6:	+--|----- bra.s f4f2 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f4b8:	|  '----> movea.l 8(sp),a0
    f4bc:	|         movea.l 24(a0),a0
    f4c0:	|         movea.l 4(a0),a0
    f4c4:	|         move.l 4(a0),d1
    f4c8:	|         moveq #28,d0
    f4ca:	|         add.l 8(sp),d0
    f4ce:	|         move.l d1,-(sp)
    f4d0:	|         pea 1 <_start+0x1>
    f4d4:	|         move.l d0,-(sp)
    f4d6:	|         jsr 14dd2 <setVariable>
    f4dc:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f4e0:	|         moveq #24,d0
    f4e2:	|         add.l 8(sp),d0
    f4e6:	|         move.l d0,-(sp)
    f4e8:	|         jsr 14e64 <trimStack>
    f4ee:	|         addq.l #4,sp
			return BR_CONTINUE;
    f4f0:	|         moveq #2,d0
}
    f4f2:	'-------> rts

0000f4f4 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f4f4:	       movea.l 8(sp),a0
    f4f8:	       movea.l 24(a0),a0
    f4fc:	       move.l (a0),d0
    f4fe:	       moveq #6,d1
    f500:	       cmp.l d0,d1
    f502:	   ,-- beq.s f516 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f504:	   |   pea 1952b <PutChar+0x1b5d>
    f50a:	   |   jsr 16f2c <KPrintF>
    f510:	   |   addq.l #4,sp
		return BR_ERROR;
    f512:	   |   moveq #1,d0
    f514:	,--|-- bra.s f54a <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f516:	|  '-> moveq #28,d0
    f518:	|      add.l 8(sp),d0
    f51c:	|      movea.l 8(sp),a0
    f520:	|      move.l 24(a0),d1
    f524:	|      move.l d0,-(sp)
    f526:	|      move.l d1,-(sp)
    f528:	|      jsr 13fe6 <copyStack>
    f52e:	|      addq.l #8,sp
    f530:	|      tst.w d0
    f532:	|  ,-- bne.s f538 <builtIn_copyStack+0x44>
    f534:	|  |   moveq #1,d0
    f536:	+--|-- bra.s f54a <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f538:	|  '-> moveq #24,d0
    f53a:	|      add.l 8(sp),d0
    f53e:	|      move.l d0,-(sp)
    f540:	|      jsr 14e64 <trimStack>
    f546:	|      addq.l #4,sp
	return BR_CONTINUE;
    f548:	|      moveq #2,d0
}
    f54a:	'----> rts

0000f54c <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f54c:	       movea.l 8(sp),a0
    f550:	       movea.l 24(a0),a0
    f554:	       movea.l 8(a0),a0
    f558:	       move.l (a0),d0
    f55a:	       moveq #6,d1
    f55c:	       cmp.l d0,d1
    f55e:	   ,-- beq.s f574 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f560:	   |   pea 19544 <PutChar+0x1b76>
    f566:	   |   jsr 16f2c <KPrintF>
    f56c:	   |   addq.l #4,sp
		return BR_ERROR;
    f56e:	   |   moveq #1,d0
    f570:	,--|-- bra.w f602 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f574:	|  '-> movea.l 8(sp),a0
    f578:	|      movea.l 24(a0),a0
    f57c:	|      movea.l 8(a0),a0
    f580:	|      move.l 4(a0),d0
    f584:	|      move.l d0,d1
    f586:	|      movea.l 8(sp),a0
    f58a:	|      move.l 24(a0),d0
    f58e:	|      move.l d1,-(sp)
    f590:	|      move.l d0,-(sp)
    f592:	|      jsr 13d1c <addVarToStack>
    f598:	|      addq.l #8,sp
    f59a:	|      tst.w d0
    f59c:	|  ,-- bne.s f5a2 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f59e:	|  |   moveq #1,d0
    f5a0:	+--|-- bra.s f602 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f5a2:	|  '-> movea.l 8(sp),a0
    f5a6:	|      movea.l 24(a0),a0
    f5aa:	|      movea.l 8(a0),a0
    f5ae:	|      movea.l 4(a0),a0
    f5b2:	|      movea.l (a0),a0
    f5b4:	|      move.l 8(a0),d0
    f5b8:	|  ,-- bne.s f5e0 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f5ba:	|  |   movea.l 8(sp),a0
    f5be:	|  |   movea.l 24(a0),a0
    f5c2:	|  |   movea.l 8(a0),a0
    f5c6:	|  |   movea.l 4(a0),a1
    f5ca:	|  |   movea.l 8(sp),a0
    f5ce:	|  |   movea.l 24(a0),a0
    f5d2:	|  |   movea.l 8(a0),a0
    f5d6:	|  |   movea.l 4(a0),a0
    f5da:	|  |   move.l (a1),d0
    f5dc:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f5e0:	|  '-> moveq #24,d0
    f5e2:	|      add.l 8(sp),d0
    f5e6:	|      move.l d0,-(sp)
    f5e8:	|      jsr 14e64 <trimStack>
    f5ee:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f5f0:	|      moveq #24,d0
    f5f2:	|      add.l 8(sp),d0
    f5f6:	|      move.l d0,-(sp)
    f5f8:	|      jsr 14e64 <trimStack>
    f5fe:	|      addq.l #4,sp
	return BR_CONTINUE;
    f600:	|      moveq #2,d0
}
    f602:	'----> rts

0000f604 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f604:	             movea.l 8(sp),a0
    f608:	             movea.l 24(a0),a0
    f60c:	             movea.l 8(a0),a0
    f610:	             move.l (a0),d0
    f612:	             moveq #6,d1
    f614:	             cmp.l d0,d1
    f616:	         ,-- beq.s f62c <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f618:	         |   pea 19544 <PutChar+0x1b76>
    f61e:	         |   jsr 16f2c <KPrintF>
    f624:	         |   addq.l #4,sp
		return BR_ERROR;
    f626:	         |   moveq #1,d0
    f628:	,--------|-- bra.w f71a <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f62c:	|        '-> movea.l 8(sp),a0
    f630:	|            movea.l 24(a0),a0
    f634:	|            movea.l 8(a0),a0
    f638:	|            movea.l 4(a0),a0
    f63c:	|            move.l (a0),d0
    f63e:	|     ,----- bne.s f698 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f640:	|     |      movea.l 8(sp),a0
    f644:	|     |      movea.l 24(a0),a0
    f648:	|     |      movea.l 8(a0),a0
    f64c:	|     |      move.l 4(a0),d0
    f650:	|     |      move.l d0,d1
    f652:	|     |      movea.l 8(sp),a0
    f656:	|     |      move.l 24(a0),d0
    f65a:	|     |      move.l d1,-(sp)
    f65c:	|     |      move.l d0,-(sp)
    f65e:	|     |      jsr 13d1c <addVarToStack>
    f664:	|     |      addq.l #8,sp
    f666:	|     |      tst.w d0
    f668:	|     |  ,-- bne.s f670 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f66a:	|     |  |   moveq #1,d0
    f66c:	+-----|--|-- bra.w f71a <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f670:	|     |  '-> movea.l 8(sp),a0
    f674:	|     |      movea.l 24(a0),a0
    f678:	|     |      movea.l 8(a0),a0
    f67c:	|     |      movea.l 4(a0),a1
    f680:	|     |      movea.l 8(sp),a0
    f684:	|     |      movea.l 24(a0),a0
    f688:	|     |      movea.l 8(a0),a0
    f68c:	|     |      movea.l 4(a0),a0
    f690:	|     |      move.l (a1),d0
    f692:	|     |      move.l d0,4(a0)
    f696:	|  ,--|----- bra.s f6f8 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f698:	|  |  '----> movea.l 8(sp),a0
    f69c:	|  |         movea.l 24(a0),a0
    f6a0:	|  |         movea.l 8(a0),a0
    f6a4:	|  |         movea.l 4(a0),a0
    f6a8:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f6ac:	|  |         move.l d0,d1
    f6ae:	|  |         addq.l #8,d1
    f6b0:	|  |         movea.l 8(sp),a0
    f6b4:	|  |         move.l 24(a0),d0
    f6b8:	|  |         move.l d1,-(sp)
    f6ba:	|  |         move.l d0,-(sp)
    f6bc:	|  |         jsr 13d1c <addVarToStack>
    f6c2:	|  |         addq.l #8,sp
    f6c4:	|  |         tst.w d0
    f6c6:	|  |     ,-- bne.s f6cc <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f6c8:	|  |     |   moveq #1,d0
    f6ca:	+--|-----|-- bra.s f71a <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f6cc:	|  |     '-> movea.l 8(sp),a0
    f6d0:	|  |         movea.l 24(a0),a0
    f6d4:	|  |         movea.l 8(a0),a0
    f6d8:	|  |         movea.l 4(a0),a0
    f6dc:	|  |         movea.l 4(a0),a1
    f6e0:	|  |         movea.l 8(sp),a0
    f6e4:	|  |         movea.l 24(a0),a0
    f6e8:	|  |         movea.l 8(a0),a0
    f6ec:	|  |         movea.l 4(a0),a0
    f6f0:	|  |         move.l 8(a1),d0
    f6f4:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f6f8:	|  '-------> moveq #24,d0
    f6fa:	|            add.l 8(sp),d0
    f6fe:	|            move.l d0,-(sp)
    f700:	|            jsr 14e64 <trimStack>
    f706:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f708:	|            moveq #24,d0
    f70a:	|            add.l 8(sp),d0
    f70e:	|            move.l d0,-(sp)
    f710:	|            jsr 14e64 <trimStack>
    f716:	|            addq.l #4,sp
	return BR_CONTINUE;
    f718:	|            moveq #2,d0
}
    f71a:	'----------> rts

0000f71c <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f71c:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f71e:	       movea.l 12(sp),a0
    f722:	       movea.l 24(a0),a0
    f726:	       movea.l 8(a0),a0
    f72a:	       move.l (a0),d0
    f72c:	       moveq #6,d1
    f72e:	       cmp.l d0,d1
    f730:	   ,-- beq.s f746 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f732:	   |   pea 1952b <PutChar+0x1b5d>
    f738:	   |   jsr 16f2c <KPrintF>
    f73e:	   |   addq.l #4,sp
		return BR_ERROR;
    f740:	   |   moveq #1,d0
    f742:	,--|-- bra.w f7dc <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    f746:	|  '-> movea.l 12(sp),a0
    f74a:	|      movea.l 24(a0),a0
    f74e:	|      movea.l 8(a0),a0
    f752:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f756:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f758:	|      movea.l 12(sp),a0
    f75c:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f760:	|      clr.l -(sp)
    f762:	|      move.l d1,-(sp)
    f764:	|      move.l d0,-(sp)
    f766:	|      jsr 140bc <deleteVarFromStack>
    f76c:	|      lea 12(sp),sp
    f770:	|      move.l d0,d1
    f772:	|      moveq #28,d0
    f774:	|      add.l 12(sp),d0
    f778:	|      move.l d1,-(sp)
    f77a:	|      pea 1 <_start+0x1>
    f77e:	|      move.l d0,-(sp)
    f780:	|      jsr 14dd2 <setVariable>
    f786:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f78a:	|      movea.l 12(sp),a0
    f78e:	|      movea.l 24(a0),a0
    f792:	|      movea.l 8(a0),a0
    f796:	|      movea.l 4(a0),a0
    f79a:	|      move.l (a0),d0
    f79c:	|      movea.l 12(sp),a0
    f7a0:	|      movea.l 24(a0),a0
    f7a4:	|      movea.l 8(a0),a0
    f7a8:	|      movea.l 4(a0),a2
    f7ac:	|      move.l d0,-(sp)
    f7ae:	|      jsr 14e1c <stackFindLast>
    f7b4:	|      addq.l #4,sp
    f7b6:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f7ba:	|      moveq #24,d0
    f7bc:	|      add.l 12(sp),d0
    f7c0:	|      move.l d0,-(sp)
    f7c2:	|      jsr 14e64 <trimStack>
    f7c8:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f7ca:	|      moveq #24,d0
    f7cc:	|      add.l 12(sp),d0
    f7d0:	|      move.l d0,-(sp)
    f7d2:	|      jsr 14e64 <trimStack>
    f7d8:	|      addq.l #4,sp
	return BR_CONTINUE;
    f7da:	|      moveq #2,d0
}
    f7dc:	'----> movea.l (sp)+,a2
    f7de:	       rts

0000f7e0 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    f7e0:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f7e2:	       movea.l 12(sp),a0
    f7e6:	       movea.l 24(a0),a0
    f7ea:	       movea.l 8(a0),a0
    f7ee:	       move.l (a0),d0
    f7f0:	       moveq #6,d1
    f7f2:	       cmp.l d0,d1
    f7f4:	   ,-- beq.s f80a <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f7f6:	   |   pea 1952b <PutChar+0x1b5d>
    f7fc:	   |   jsr 16f2c <KPrintF>
    f802:	   |   addq.l #4,sp
		return BR_ERROR;
    f804:	   |   moveq #1,d0
    f806:	,--|-- bra.w f8a2 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    f80a:	|  '-> movea.l 12(sp),a0
    f80e:	|      movea.l 24(a0),a0
    f812:	|      movea.l 8(a0),a0
    f816:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f81a:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f81c:	|      movea.l 12(sp),a0
    f820:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f824:	|      pea 1 <_start+0x1>
    f828:	|      move.l d1,-(sp)
    f82a:	|      move.l d0,-(sp)
    f82c:	|      jsr 140bc <deleteVarFromStack>
    f832:	|      lea 12(sp),sp
    f836:	|      move.l d0,d1
    f838:	|      moveq #28,d0
    f83a:	|      add.l 12(sp),d0
    f83e:	|      move.l d1,-(sp)
    f840:	|      pea 1 <_start+0x1>
    f844:	|      move.l d0,-(sp)
    f846:	|      jsr 14dd2 <setVariable>
    f84c:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f850:	|      movea.l 12(sp),a0
    f854:	|      movea.l 24(a0),a0
    f858:	|      movea.l 8(a0),a0
    f85c:	|      movea.l 4(a0),a0
    f860:	|      move.l (a0),d0
    f862:	|      movea.l 12(sp),a0
    f866:	|      movea.l 24(a0),a0
    f86a:	|      movea.l 8(a0),a0
    f86e:	|      movea.l 4(a0),a2
    f872:	|      move.l d0,-(sp)
    f874:	|      jsr 14e1c <stackFindLast>
    f87a:	|      addq.l #4,sp
    f87c:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f880:	|      moveq #24,d0
    f882:	|      add.l 12(sp),d0
    f886:	|      move.l d0,-(sp)
    f888:	|      jsr 14e64 <trimStack>
    f88e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f890:	|      moveq #24,d0
    f892:	|      add.l 12(sp),d0
    f896:	|      move.l d0,-(sp)
    f898:	|      jsr 14e64 <trimStack>
    f89e:	|      addq.l #4,sp
	return BR_CONTINUE;
    f8a0:	|      moveq #2,d0
} 
    f8a2:	'----> movea.l (sp)+,a2
    f8a4:	       rts

0000f8a6 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f8a6:	       movea.l 8(sp),a0
    f8aa:	       movea.l 24(a0),a0
    f8ae:	       move.l (a0),d0
    f8b0:	       moveq #6,d1
    f8b2:	       cmp.l d0,d1
    f8b4:	   ,-- beq.s f8c8 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f8b6:	   |   pea 1952b <PutChar+0x1b5d>
    f8bc:	   |   jsr 16f2c <KPrintF>
    f8c2:	   |   addq.l #4,sp
		return BR_ERROR;
    f8c4:	   |   moveq #1,d0
    f8c6:	,--|-- bra.s f932 <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f8c8:	|  '-> movea.l 8(sp),a0
    f8cc:	|      movea.l 24(a0),a0
    f8d0:	|      movea.l 4(a0),a0
    f8d4:	|      move.l (a0),d0
    f8d6:	|  ,-- bne.s f8ea <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    f8d8:	|  |   pea 1955c <PutChar+0x1b8e>
    f8de:	|  |   jsr 16f2c <KPrintF>
    f8e4:	|  |   addq.l #4,sp
		return BR_ERROR;
    f8e6:	|  |   moveq #1,d0
    f8e8:	+--|-- bra.s f932 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    f8ea:	|  '-> moveq #28,d0
    f8ec:	|      add.l 8(sp),d0
    f8f0:	|      movea.l 8(sp),a0
    f8f4:	|      movea.l 24(a0),a0
    f8f8:	|      movea.l 4(a0),a0
    f8fc:	|      move.l (a0),d1
    f8fe:	|      move.l d0,-(sp)
    f900:	|      move.l d1,-(sp)
    f902:	|      jsr 1499a <copyVariable>
    f908:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    f90a:	|      movea.l 8(sp),a0
    f90e:	|      movea.l 24(a0),a0
    f912:	|      move.l 4(a0),d0
    f916:	|      move.l d0,-(sp)
    f918:	|      jsr 14e64 <trimStack>
    f91e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f920:	|      moveq #24,d0
    f922:	|      add.l 8(sp),d0
    f926:	|      move.l d0,-(sp)
    f928:	|      jsr 14e64 <trimStack>
    f92e:	|      addq.l #4,sp
	return BR_CONTINUE;
    f930:	|      moveq #2,d0
}
    f932:	'----> rts

0000f934 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f934:	       movea.l 8(sp),a0
    f938:	       movea.l 24(a0),a0
    f93c:	       move.l (a0),d0
    f93e:	       moveq #6,d1
    f940:	       cmp.l d0,d1
    f942:	   ,-- beq.s f956 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    f944:	   |   pea 1952b <PutChar+0x1b5d>
    f94a:	   |   jsr 16f2c <KPrintF>
    f950:	   |   addq.l #4,sp
		return BR_ERROR;
    f952:	   |   moveq #1,d0
    f954:	,--|-- bra.s f9aa <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f956:	|  '-> movea.l 8(sp),a0
    f95a:	|      movea.l 24(a0),a0
    f95e:	|      movea.l 4(a0),a0
    f962:	|      move.l (a0),d0
    f964:	|  ,-- bne.s f978 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    f966:	|  |   pea 1955c <PutChar+0x1b8e>
    f96c:	|  |   jsr 16f2c <KPrintF>
    f972:	|  |   addq.l #4,sp
		return BR_ERROR;
    f974:	|  |   moveq #1,d0
    f976:	+--|-- bra.s f9aa <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    f978:	|  '-> moveq #28,d0
    f97a:	|      add.l 8(sp),d0
    f97e:	|      movea.l 8(sp),a0
    f982:	|      movea.l 24(a0),a0
    f986:	|      movea.l 4(a0),a0
    f98a:	|      move.l (a0),d1
    f98c:	|      move.l d0,-(sp)
    f98e:	|      move.l d1,-(sp)
    f990:	|      jsr 1499a <copyVariable>
    f996:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    f998:	|      moveq #24,d0
    f99a:	|      add.l 8(sp),d0
    f99e:	|      move.l d0,-(sp)
    f9a0:	|      jsr 14e64 <trimStack>
    f9a6:	|      addq.l #4,sp
	return BR_CONTINUE;
    f9a8:	|      moveq #2,d0
}
    f9aa:	'----> rts

0000f9ac <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f9ac:	       movea.l 8(sp),a0
    f9b0:	       movea.l 24(a0),a0
    f9b4:	       move.l (a0),d0
    f9b6:	       moveq #6,d1
    f9b8:	       cmp.l d0,d1
    f9ba:	   ,-- beq.s f9ce <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    f9bc:	   |   pea 1952b <PutChar+0x1b5d>
    f9c2:	   |   jsr 16f2c <KPrintF>
    f9c8:	   |   addq.l #4,sp
		return BR_ERROR;
    f9ca:	   |   moveq #1,d0
    f9cc:	,--|-- bra.s fa24 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f9ce:	|  '-> movea.l 8(sp),a0
    f9d2:	|      movea.l 24(a0),a0
    f9d6:	|      movea.l 4(a0),a0
    f9da:	|      move.l (a0),d0
    f9dc:	|  ,-- bne.s f9f0 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    f9de:	|  |   pea 1955c <PutChar+0x1b8e>
    f9e4:	|  |   jsr 16f2c <KPrintF>
    f9ea:	|  |   addq.l #4,sp
		return BR_ERROR;
    f9ec:	|  |   moveq #1,d0
    f9ee:	+--|-- bra.s fa24 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    f9f0:	|  '-> moveq #28,d0
    f9f2:	|      add.l 8(sp),d0
    f9f6:	|      movea.l 8(sp),a0
    f9fa:	|      movea.l 24(a0),a0
    f9fe:	|      movea.l 4(a0),a0
    fa02:	|      move.l 4(a0),d1
    fa06:	|      move.l d0,-(sp)
    fa08:	|      move.l d1,-(sp)
    fa0a:	|      jsr 1499a <copyVariable>
    fa10:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fa12:	|      moveq #24,d0
    fa14:	|      add.l 8(sp),d0
    fa18:	|      move.l d0,-(sp)
    fa1a:	|      jsr 14e64 <trimStack>
    fa20:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa22:	|      moveq #2,d0
}
    fa24:	'----> rts

0000fa26 <builtIn_random>:

builtIn(random)
{
    fa26:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fa28:	       movea.l 12(sp),a0
    fa2c:	       move.l 24(a0),d0
    fa30:	       move.l d0,-(sp)
    fa32:	       pea 1 <_start+0x1>
    fa36:	       move.l sp,d0
    fa38:	       addq.l #8,d0
    fa3a:	       move.l d0,-(sp)
    fa3c:	       jsr 144e0 <getValueType>
    fa42:	       lea 12(sp),sp
    fa46:	       tst.w d0
    fa48:	   ,-- bne.s fa4e <builtIn_random+0x28>
		return BR_ERROR;
    fa4a:	   |   moveq #1,d0
    fa4c:	,--|-- bra.s fa98 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fa4e:	|  '-> moveq #24,d0
    fa50:	|      add.l 12(sp),d0
    fa54:	|      move.l d0,-(sp)
    fa56:	|      jsr 14e64 <trimStack>
    fa5c:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fa5e:	|      move.l (sp),d0
    fa60:	|  ,-- bgt.s fa66 <builtIn_random+0x40>
    fa62:	|  |   moveq #1,d0
    fa64:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fa66:	|  '-> jsr 15b08 <rand>
    fa6c:	|      move.l d0,d1
    fa6e:	|      move.l (sp),d0
    fa70:	|      move.l d0,-(sp)
    fa72:	|      move.l d1,-(sp)
    fa74:	|      jsr 17992 <__umodsi3>
    fa7a:	|      addq.l #8,sp
    fa7c:	|      move.l d0,d1
    fa7e:	|      moveq #28,d0
    fa80:	|      add.l 12(sp),d0
    fa84:	|      move.l d1,-(sp)
    fa86:	|      pea 1 <_start+0x1>
    fa8a:	|      move.l d0,-(sp)
    fa8c:	|      jsr 14dd2 <setVariable>
    fa92:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fa96:	|      moveq #2,d0
}
    fa98:	'----> addq.l #4,sp
    fa9a:	       rts

0000fa9c <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fa9c:	nop
    fa9e:	rts

0000faa0 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    faa0:	moveq #2,d0
}
    faa2:	rts

0000faa4 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    faa4:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    faa6:	       movea.l 12(sp),a0
    faaa:	       move.l 24(a0),d0
    faae:	       move.l d0,-(sp)
    fab0:	       pea 1 <_start+0x1>
    fab4:	       move.l sp,d0
    fab6:	       addq.l #8,d0
    fab8:	       move.l d0,-(sp)
    faba:	       jsr 144e0 <getValueType>
    fac0:	       lea 12(sp),sp
    fac4:	       tst.w d0
    fac6:	   ,-- bne.s fada <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fac8:	   |   pea 1956f <PutChar+0x1ba1>
    face:	   |   jsr 16f2c <KPrintF>
    fad4:	   |   addq.l #4,sp
		return BR_ERROR;
    fad6:	   |   moveq #1,d0
    fad8:	,--|-- bra.s fb1a <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fada:	|  '-> moveq #24,d0
    fadc:	|      add.l 12(sp),d0
    fae0:	|      move.l d0,-(sp)
    fae2:	|      jsr 14e64 <trimStack>
    fae8:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    faea:	|      move.l (sp),d0
    faec:	|      move.l d0,d0
    faee:	|      move.w d0,1a6be <textPaletteIndex>

	if( textPaletteIndex > 31) {
    faf4:	|      move.w 1a6be <textPaletteIndex>,d0
    fafa:	|      cmpi.w #31,d0
    fafe:	|  ,-- bls.s fb18 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fb00:	|  |   pea 19596 <PutChar+0x1bc8>
    fb06:	|  |   jsr 16f2c <KPrintF>
    fb0c:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fb0e:	|  |   clr.w 1a6be <textPaletteIndex>
		return BR_ERROR;
    fb14:	|  |   moveq #1,d0
    fb16:	+--|-- bra.s fb1a <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fb18:	|  '-> moveq #2,d0
}
    fb1a:	'----> addq.l #4,sp
    fb1c:	       rts

0000fb1e <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fb1e:	moveq #2,d0
}
    fb20:	rts

0000fb22 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fb22:	moveq #2,d0
}
    fb24:	rts

0000fb26 <builtIn_setFont>:


builtIn(setFont)
{
    fb26:	       lea -16(sp),sp
    fb2a:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fb2c:	       movea.l 28(sp),a0
    fb30:	       move.l 24(a0),d0
    fb34:	       move.l d0,-(sp)
    fb36:	       pea 1 <_start+0x1>
    fb3a:	       lea 12(sp),a0
    fb3e:	       move.l a0,-(sp)
    fb40:	       jsr 144e0 <getValueType>
    fb46:	       lea 12(sp),sp
    fb4a:	       tst.w d0
    fb4c:	   ,-- bne.s fb54 <builtIn_setFont+0x2e>
    fb4e:	   |   moveq #1,d0
    fb50:	,--|-- bra.w fc02 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fb54:	|  '-> moveq #24,d0
    fb56:	|      add.l 28(sp),d0
    fb5a:	|      move.l d0,-(sp)
    fb5c:	|      jsr 14e64 <trimStack>
    fb62:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fb64:	|      movea.l 28(sp),a0
    fb68:	|      move.l 24(a0),d0
    fb6c:	|      move.l d0,-(sp)
    fb6e:	|      jsr 14ab6 <getTextFromAnyVar>
    fb74:	|      addq.l #4,sp
    fb76:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fb7a:	|  ,-- bne.s fb82 <builtIn_setFont+0x5c>
    fb7c:	|  |   moveq #1,d0
    fb7e:	+--|-- bra.w fc02 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fb82:	|  '-> moveq #24,d0
    fb84:	|      add.l 28(sp),d0
    fb88:	|      move.l d0,-(sp)
    fb8a:	|      jsr 14e64 <trimStack>
    fb90:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fb92:	|      movea.l 28(sp),a0
    fb96:	|      move.l 24(a0),d0
    fb9a:	|      move.l d0,-(sp)
    fb9c:	|      pea 5 <_start+0x5>
    fba0:	|      lea 16(sp),a0
    fba4:	|      move.l a0,-(sp)
    fba6:	|      jsr 144e0 <getValueType>
    fbac:	|      lea 12(sp),sp
    fbb0:	|      tst.w d0
    fbb2:	|  ,-- bne.s fbb8 <builtIn_setFont+0x92>
    fbb4:	|  |   moveq #1,d0
    fbb6:	+--|-- bra.s fc02 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fbb8:	|  '-> moveq #24,d0
    fbba:	|      add.l 28(sp),d0
    fbbe:	|      move.l d0,-(sp)
    fbc0:	|      jsr 14e64 <trimStack>
    fbc6:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    fbc8:	|      move.l 4(sp),d1
    fbcc:	|      move.l 8(sp),d0
    fbd0:	|      move.l d1,-(sp)
    fbd2:	|      move.l 20(sp),-(sp)
    fbd6:	|      move.l d0,-(sp)
    fbd8:	|      jsr 15318 <loadFont>
    fbde:	|      lea 12(sp),sp
    fbe2:	|      tst.w d0
    fbe4:	|  ,-- bne.s fbea <builtIn_setFont+0xc4>
    fbe6:	|  |   moveq #1,d0
    fbe8:	+--|-- bra.s fc02 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fbea:	|  '-> move.l 16(sp),12(sp)
    fbf0:	|      move.l 1a7a4 <SysBase>,d0
    fbf6:	|      movea.l d0,a6
    fbf8:	|      movea.l 12(sp),a1
    fbfc:	|      jsr -690(a6)

    return BR_CONTINUE;
    fc00:	|      moveq #2,d0
}
    fc02:	'----> movea.l (sp)+,a6
    fc04:	       lea 16(sp),sp
    fc08:	       rts

0000fc0a <builtIn_inFont>:

builtIn(inFont)
{
    fc0a:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fc0c:	       movea.l 12(sp),a0
    fc10:	       move.l 24(a0),d0
    fc14:	       move.l d0,-(sp)
    fc16:	       jsr 14ab6 <getTextFromAnyVar>
    fc1c:	       addq.l #4,sp
    fc1e:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    fc20:	   ,-- bne.s fc26 <builtIn_inFont+0x1c>
    fc22:	   |   moveq #1,d0
    fc24:	,--|-- bra.s fc5c <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    fc26:	|  '-> moveq #24,d0
    fc28:	|      add.l 12(sp),d0
    fc2c:	|      move.l d0,-(sp)
    fc2e:	|      jsr 14e64 <trimStack>
    fc34:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    fc36:	|      move.l (sp),-(sp)
    fc38:	|      jsr 15306 <isInFont>
    fc3e:	|      addq.l #4,sp
    fc40:	|      movea.w d0,a0
    fc42:	|      moveq #28,d0
    fc44:	|      add.l 12(sp),d0
    fc48:	|      move.l a0,-(sp)
    fc4a:	|      pea 1 <_start+0x1>
    fc4e:	|      move.l d0,-(sp)
    fc50:	|      jsr 14dd2 <setVariable>
    fc56:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fc5a:	|      moveq #2,d0
}
    fc5c:	'----> addq.l #4,sp
    fc5e:	       rts

0000fc60 <builtIn_pasteString>:

builtIn(pasteString)
{
    fc60:	       lea -16(sp),sp
    fc64:	       move.l a6,-(sp)
    fc66:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fc68:	       movea.l 32(sp),a0
    fc6c:	       move.l 24(a0),d0
    fc70:	       move.l d0,-(sp)
    fc72:	       jsr 14ab6 <getTextFromAnyVar>
    fc78:	       addq.l #4,sp
    fc7a:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    fc7e:	       moveq #24,d0
    fc80:	       add.l 32(sp),d0
    fc84:	       move.l d0,-(sp)
    fc86:	       jsr 14e64 <trimStack>
    fc8c:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fc8e:	       movea.l 32(sp),a0
    fc92:	       move.l 24(a0),d0
    fc96:	       move.l d0,-(sp)
    fc98:	       pea 1 <_start+0x1>
    fc9c:	       lea 20(sp),a0
    fca0:	       move.l a0,-(sp)
    fca2:	       jsr 144e0 <getValueType>
    fca8:	       lea 12(sp),sp
    fcac:	       tst.w d0
    fcae:	   ,-- bne.s fcb6 <builtIn_pasteString+0x56>
    fcb0:	   |   moveq #1,d0
    fcb2:	,--|-- bra.w fd58 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fcb6:	|  '-> moveq #24,d0
    fcb8:	|      add.l 32(sp),d0
    fcbc:	|      move.l d0,-(sp)
    fcbe:	|      jsr 14e64 <trimStack>
    fcc4:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fcc6:	|      movea.l 32(sp),a0
    fcca:	|      move.l 24(a0),d0
    fcce:	|      move.l d0,-(sp)
    fcd0:	|      pea 1 <_start+0x1>
    fcd4:	|      lea 16(sp),a0
    fcd8:	|      move.l a0,-(sp)
    fcda:	|      jsr 144e0 <getValueType>
    fce0:	|      lea 12(sp),sp
    fce4:	|      tst.w d0
    fce6:	|  ,-- bne.s fcec <builtIn_pasteString+0x8c>
    fce8:	|  |   moveq #1,d0
    fcea:	+--|-- bra.s fd58 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fcec:	|  '-> moveq #24,d0
    fcee:	|      add.l 32(sp),d0
    fcf2:	|      move.l d0,-(sp)
    fcf4:	|      jsr 14e64 <trimStack>
    fcfa:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    fcfc:	|      move.l 8(sp),d0
    fd00:	|      cmpi.l #65535,d0
    fd06:	|  ,-- bne.s fd26 <builtIn_pasteString+0xc6>
    fd08:	|  |   move.l 1a6f8 <winWidth>,d2
    fd0e:	|  |   move.l 20(sp),-(sp)
    fd12:	|  |   jsr 155ca <stringWidth>
    fd18:	|  |   addq.l #4,sp
    fd1a:	|  |   move.l d2,d1
    fd1c:	|  |   sub.l d0,d1
    fd1e:	|  |   move.l d1,d0
    fd20:	|  |   lsr.l #1,d0
    fd22:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    fd26:	|  '-> move.l 12(sp),d1
    fd2a:	|      move.l 8(sp),d0
    fd2e:	|      move.l d1,-(sp)
    fd30:	|      move.l d0,-(sp)
    fd32:	|      move.l 28(sp),-(sp)
    fd36:	|      jsr 154ec <pasteStringToBackdrop>
    fd3c:	|      lea 12(sp),sp
    FreeVec(newText); 
    fd40:	|      move.l 20(sp),16(sp)
    fd46:	|      move.l 1a7a4 <SysBase>,d0
    fd4c:	|      movea.l d0,a6
    fd4e:	|      movea.l 16(sp),a1
    fd52:	|      jsr -690(a6)
    return BR_CONTINUE;
    fd56:	|      moveq #2,d0
}
    fd58:	'----> move.l (sp)+,d2
    fd5a:	       movea.l (sp)+,a6
    fd5c:	       lea 16(sp),sp
    fd60:	       rts

0000fd62 <builtIn_anim>:

builtIn(anim)
{
    fd62:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    fd66:	       moveq #1,d0
    fd68:	       cmp.l 16(sp),d0
    fd6c:	   ,-- blt.s fd82 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    fd6e:	   |   pea 195c0 <PutChar+0x1bf2>
    fd74:	   |   jsr 16f2c <KPrintF>
    fd7a:	   |   addq.l #4,sp
		return BR_ERROR;
    fd7c:	   |   moveq #1,d0
    fd7e:	,--|-- bra.w fe10 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    fd82:	|  '-> moveq #24,d1
    fd84:	|      add.l 20(sp),d1
    fd88:	|      move.l 16(sp),d0
    fd8c:	|      subq.l #1,d0
    fd8e:	|      move.l d1,-(sp)
    fd90:	|      move.l d0,-(sp)
    fd92:	|      jsr 9400 <createPersonaAnim>
    fd98:	|      addq.l #8,sp
    fd9a:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fd9e:	|      movea.l 20(sp),a0
    fda2:	|      move.l 24(a0),d0
    fda6:	|      move.l d0,-(sp)
    fda8:	|      pea 5 <_start+0x5>
    fdac:	|      lea 8(sp),a0
    fdb0:	|      move.l a0,-(sp)
    fdb2:	|      jsr 144e0 <getValueType>
    fdb8:	|      lea 12(sp),sp
    fdbc:	|      tst.w d0
    fdbe:	|  ,-- bne.s fdc4 <builtIn_anim+0x62>
    fdc0:	|  |   moveq #1,d0
    fdc2:	+--|-- bra.s fe10 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    fdc4:	|  '-> moveq #24,d0
    fdc6:	|      add.l 20(sp),d0
    fdca:	|      move.l d0,-(sp)
    fdcc:	|      jsr 14e64 <trimStack>
    fdd2:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    fdd4:	|      move.l (sp),d0
    fdd6:	|      move.l d0,-(sp)
    fdd8:	|      jsr 15c6a <loadBankForAnim>
    fdde:	|      addq.l #4,sp
    fde0:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    fde4:	|  ,-- bne.s fdea <builtIn_anim+0x88>
    fde6:	|  |   moveq #1,d0
    fde8:	+--|-- bra.s fe10 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    fdea:	|  '-> move.l 4(sp),-(sp)
    fdee:	|      move.l 12(sp),-(sp)
    fdf2:	|      jsr b2aa <setBankFile>
    fdf8:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    fdfa:	|      moveq #28,d0
    fdfc:	|      add.l 20(sp),d0
    fe00:	|      move.l 8(sp),-(sp)
    fe04:	|      move.l d0,-(sp)
    fe06:	|      jsr 14d8e <newAnimationVariable>
    fe0c:	|      addq.l #8,sp
	return BR_CONTINUE;
    fe0e:	|      moveq #2,d0
}
    fe10:	'----> lea 12(sp),sp
    fe14:	       rts

0000fe16 <builtIn_costume>:

builtIn(costume)
{
    fe16:	          lea -32(sp),sp
    fe1a:	          move.l a6,-(sp)
    fe1c:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    fe1e:	          moveq #8,d0
    fe20:	          move.l d0,32(sp)
    fe24:	          clr.l 28(sp)
    fe28:	          move.l 1a7a4 <SysBase>,d0
    fe2e:	          movea.l d0,a6
    fe30:	          move.l 32(sp),d0
    fe34:	          move.l 28(sp),d1
    fe38:	          jsr -684(a6)
    fe3c:	          move.l d0,24(sp)
    fe40:	          move.l 24(sp),d0
    fe44:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    fe48:	      ,-- bne.s fe50 <builtIn_costume+0x3a>
    fe4a:	      |   moveq #1,d0
    fe4c:	,-----|-- bra.w ff38 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    fe50:	|     '-> move.l 44(sp),d0
    fe54:	|         pea 3 <_start+0x3>
    fe58:	|         move.l d0,-(sp)
    fe5a:	|         jsr 17936 <__divsi3>
    fe60:	|         addq.l #8,sp
    fe62:	|         movea.l 20(sp),a0
    fe66:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    fe6a:	|         tst.l 44(sp)
    fe6e:	|     ,-- beq.s fe84 <builtIn_costume+0x6e>
    fe70:	|     |   movea.l 20(sp),a0
    fe74:	|     |   move.l 4(a0),d1
    fe78:	|     |   move.l d1,d0
    fe7a:	|     |   add.l d0,d0
    fe7c:	|     |   add.l d1,d0
    fe7e:	|     |   cmp.l 44(sp),d0
    fe82:	|  ,--|-- beq.s fe98 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    fe84:	|  |  '-> pea 195fa <PutChar+0x1c2c>
    fe8a:	|  |      jsr 16f2c <KPrintF>
    fe90:	|  |      addq.l #4,sp
        return BR_ERROR;
    fe92:	|  |      moveq #1,d0
    fe94:	+--|----- bra.w ff38 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    fe98:	|  '----> move.l 44(sp),d0
    fe9c:	|         add.l d0,d0
    fe9e:	|         add.l d0,d0
    fea0:	|         move.l d0,16(sp)
    fea4:	|         clr.l 12(sp)
    fea8:	|         move.l 1a7a4 <SysBase>,d0
    feae:	|         movea.l d0,a6
    feb0:	|         move.l 16(sp),d0
    feb4:	|         move.l 12(sp),d1
    feb8:	|         jsr -684(a6)
    febc:	|         move.l d0,8(sp)
    fec0:	|         move.l 8(sp),d0
    fec4:	|         movea.l 20(sp),a0
    fec8:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    feca:	|         movea.l 20(sp),a0
    fece:	|         move.l (a0),d0
    fed0:	|     ,-- bne.s fed6 <builtIn_costume+0xc0>
    fed2:	|     |   moveq #1,d0
    fed4:	+-----|-- bra.s ff38 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    fed6:	|     '-> move.l 44(sp),d0
    feda:	|         subq.l #1,d0
    fedc:	|         move.l d0,36(sp)
    fee0:	|     ,-- bra.s ff1c <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    fee2:	|  ,--|-> movea.l 48(sp),a0
    fee6:	|  |  |   move.l 24(a0),d0
    feea:	|  |  |   movea.l 20(sp),a0
    feee:	|  |  |   movea.l (a0),a0
    fef0:	|  |  |   move.l 36(sp),d1
    fef4:	|  |  |   add.l d1,d1
    fef6:	|  |  |   add.l d1,d1
    fef8:	|  |  |   lea (0,a0,d1.l),a2
    fefc:	|  |  |   move.l d0,-(sp)
    fefe:	|  |  |   jsr 149b8 <getAnimationFromVar>
    ff04:	|  |  |   addq.l #4,sp
    ff06:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    ff08:	|  |  |   moveq #24,d0
    ff0a:	|  |  |   add.l 48(sp),d0
    ff0e:	|  |  |   move.l d0,-(sp)
    ff10:	|  |  |   jsr 14e64 <trimStack>
    ff16:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    ff18:	|  |  |   subq.l #1,36(sp)
    ff1c:	|  |  '-> tst.l 36(sp)
    ff20:	|  '----- bge.s fee2 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    ff22:	|         moveq #28,d0
    ff24:	|         add.l 48(sp),d0
    ff28:	|         move.l 20(sp),-(sp)
    ff2c:	|         move.l d0,-(sp)
    ff2e:	|         jsr 14db0 <newCostumeVariable>
    ff34:	|         addq.l #8,sp
    return BR_CONTINUE;
    ff36:	|         moveq #2,d0
}
    ff38:	'-------> movea.l (sp)+,a2
    ff3a:	          movea.l (sp)+,a6
    ff3c:	          lea 32(sp),sp
    ff40:	          rts

0000ff42 <builtIn_launch>:

builtIn(launch)
{
    ff42:	          lea -20(sp),sp
    ff46:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    ff48:	          movea.l 32(sp),a0
    ff4c:	          move.l 24(a0),d0
    ff50:	          move.l d0,-(sp)
    ff52:	          jsr 14ab6 <getTextFromAnyVar>
    ff58:	          addq.l #4,sp
    ff5a:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    ff5e:	      ,-- bne.s ff66 <builtIn_launch+0x24>
    ff60:	      |   moveq #1,d0
    ff62:	,-----|-- bra.w 10094 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    ff66:	|     '-> move.l 20(sp),-(sp)
    ff6a:	|         jsr 2fe <encodeFilename>
    ff70:	|         addq.l #4,sp
    ff72:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    ff76:	|         moveq #24,d0
    ff78:	|         add.l 32(sp),d0
    ff7c:	|         move.l d0,-(sp)
    ff7e:	|         jsr 14e64 <trimStack>
    ff84:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    ff86:	|         movea.l 20(sp),a0
    ff8a:	|         move.b (a0),d0
    ff8c:	|         cmpi.b #104,d0
    ff90:	|  ,----- bne.s fffa <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    ff92:	|  |      movea.l 20(sp),a0
    ff96:	|  |      addq.l #1,a0
    ff98:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    ff9a:	|  |      cmpi.b #116,d0
    ff9e:	|  +----- bne.s fffa <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    ffa0:	|  |      movea.l 20(sp),a0
    ffa4:	|  |      addq.l #2,a0
    ffa6:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    ffa8:	|  |      cmpi.b #116,d0
    ffac:	|  +----- bne.s fffa <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    ffae:	|  |      movea.l 20(sp),a0
    ffb2:	|  |      addq.l #3,a0
    ffb4:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    ffb6:	|  |      cmpi.b #112,d0
    ffba:	|  +----- bne.s fffa <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    ffbc:	|  |      movea.l 20(sp),a0
    ffc0:	|  |      addq.l #4,a0
    ffc2:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    ffc4:	|  |      cmpi.b #58,d0
    ffc8:	|  |  ,-- beq.s ffe6 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    ffca:	|  |  |   movea.l 20(sp),a0
    ffce:	|  |  |   addq.l #4,a0
    ffd0:	|  |  |   move.b (a0),d0
    ffd2:	|  |  |   cmpi.b #115,d0
    ffd6:	|  +--|-- bne.s fffa <builtIn_launch+0xb8>
    ffd8:	|  |  |   movea.l 20(sp),a0
    ffdc:	|  |  |   addq.l #5,a0
    ffde:	|  |  |   move.b (a0),d0
    ffe0:	|  |  |   cmpi.b #58,d0
    ffe4:	|  +--|-- bne.s fffa <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    ffe6:	|  |  '-> move.l 20(sp),-(sp)
    ffea:	|  |      jsr b8 <copyString>
    fff0:	|  |      addq.l #4,sp
    fff2:	|  |      move.l d0,1a866 <launchMe>
    fff8:	|  |  ,-- bra.s 1004c <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    fffa:	|  '--|-> move.l 1a70c <gamePath>,d0
   10000:	|     |   pea 19645 <PutChar+0x1c77>
   10006:	|     |   move.l d0,-(sp)
   10008:	|     |   jsr 13a0c <joinStrings>
   1000e:	|     |   addq.l #8,sp
   10010:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   10014:	|     |   move.l 16(sp),-(sp)
   10018:	|     |   move.l 16(sp),-(sp)
   1001c:	|     |   jsr 13a0c <joinStrings>
   10022:	|     |   addq.l #8,sp
   10024:	|     |   move.l d0,1a866 <launchMe>
        FreeVec(newText);
   1002a:	|     |   move.l 16(sp),8(sp)
   10030:	|     |   move.l 1a7a4 <SysBase>,d0
   10036:	|     |   movea.l d0,a6
   10038:	|     |   movea.l 8(sp),a1
   1003c:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   10040:	|     |   move.l 1a866 <launchMe>,d0
   10046:	|     +-- bne.s 1004c <builtIn_launch+0x10a>
   10048:	|     |   moveq #1,d0
   1004a:	+-----|-- bra.s 10094 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   1004c:	|     '-> move.l 20(sp),4(sp)
   10052:	|         move.l 1a7a4 <SysBase>,d0
   10058:	|         movea.l d0,a6
   1005a:	|         movea.l 4(sp),a1
   1005e:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   10062:	|         clr.l -(sp)
   10064:	|         jsr 3d82 <setGraphicsWindow>
   1006a:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   1006c:	|         moveq #28,d0
   1006e:	|         add.l 32(sp),d0
   10072:	|         pea 1 <_start+0x1>
   10076:	|         pea 1 <_start+0x1>
   1007a:	|         move.l d0,-(sp)
   1007c:	|         jsr 14dd2 <setVariable>
   10082:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   10086:	|         moveq #28,d0
   10088:	|         add.l 32(sp),d0
   1008c:	|         move.l d0,1a86a <launchResult>

    return BR_KEEP_AND_PAUSE;
   10092:	|         moveq #0,d0
}
   10094:	'-------> movea.l (sp)+,a6
   10096:	          lea 20(sp),sp
   1009a:	          rts

0001009c <builtIn_pause>:

builtIn(pause)
{
   1009c:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1009e:	       movea.l 12(sp),a0
   100a2:	       move.l 24(a0),d0
   100a6:	       move.l d0,-(sp)
   100a8:	       pea 1 <_start+0x1>
   100ac:	       move.l sp,d0
   100ae:	       addq.l #8,d0
   100b0:	       move.l d0,-(sp)
   100b2:	       jsr 144e0 <getValueType>
   100b8:	       lea 12(sp),sp
   100bc:	       tst.w d0
   100be:	   ,-- bne.s 100c4 <builtIn_pause+0x28>
   100c0:	   |   moveq #1,d0
   100c2:	,--|-- bra.s 100f2 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   100c4:	|  '-> moveq #24,d0
   100c6:	|      add.l 12(sp),d0
   100ca:	|      move.l d0,-(sp)
   100cc:	|      jsr 14e64 <trimStack>
   100d2:	|      addq.l #4,sp
	if (theTime > 0) {
   100d4:	|      move.l (sp),d0
   100d6:	|  ,-- ble.s 100f0 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   100d8:	|  |   move.l (sp),d0
   100da:	|  |   subq.l #1,d0
   100dc:	|  |   movea.l 12(sp),a0
   100e0:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   100e4:	|  |   movea.l 12(sp),a0
   100e8:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   100ec:	|  |   moveq #0,d0
   100ee:	+--|-- bra.s 100f2 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   100f0:	|  '-> moveq #2,d0
}
   100f2:	'----> addq.l #4,sp
   100f4:	       rts

000100f6 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   100f6:	jsr 44ea <completeTimers>
	return BR_CONTINUE;
   100fc:	moveq #2,d0
}
   100fe:	rts

00010100 <builtIn_callEvent>:

builtIn(callEvent)
{
   10100:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10104:	       movea.l 20(sp),a0
   10108:	       move.l 24(a0),d0
   1010c:	       move.l d0,-(sp)
   1010e:	       pea 7 <_start+0x7>
   10112:	       lea 8(sp),a0
   10116:	       move.l a0,-(sp)
   10118:	       jsr 144e0 <getValueType>
   1011e:	       lea 12(sp),sp
   10122:	       tst.w d0
   10124:	   ,-- bne.s 1012c <builtIn_callEvent+0x2c>
   10126:	   |   moveq #1,d0
   10128:	,--|-- bra.w 101c2 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   1012c:	|  '-> moveq #24,d0
   1012e:	|      add.l 20(sp),d0
   10132:	|      move.l d0,-(sp)
   10134:	|      jsr 14e64 <trimStack>
   1013a:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1013c:	|      movea.l 20(sp),a0
   10140:	|      move.l 24(a0),d0
   10144:	|      move.l d0,-(sp)
   10146:	|      pea 7 <_start+0x7>
   1014a:	|      moveq #12,d0
   1014c:	|      add.l sp,d0
   1014e:	|      move.l d0,-(sp)
   10150:	|      jsr 144e0 <getValueType>
   10156:	|      lea 12(sp),sp
   1015a:	|      tst.w d0
   1015c:	|  ,-- bne.s 10162 <builtIn_callEvent+0x62>
   1015e:	|  |   moveq #1,d0
   10160:	+--|-- bra.s 101c2 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10162:	|  '-> moveq #24,d0
   10164:	|      add.l 20(sp),d0
   10168:	|      move.l d0,-(sp)
   1016a:	|      jsr 14e64 <trimStack>
   10170:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   10172:	|      move.l (sp),d1
   10174:	|      move.l 4(sp),d0
   10178:	|      move.l d1,-(sp)
   1017a:	|      move.l d0,-(sp)
   1017c:	|      jsr d27a <getCombinationFunction>
   10182:	|      addq.l #8,sp
   10184:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   10188:	|  ,-- beq.s 101a8 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1018a:	|  |   moveq #28,d0
   1018c:	|  |   add.l 20(sp),d0
   10190:	|  |   move.l 8(sp),-(sp)
   10194:	|  |   pea 2 <_start+0x2>
   10198:	|  |   move.l d0,-(sp)
   1019a:	|  |   jsr 14dd2 <setVariable>
   101a0:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   101a4:	|  |   moveq #4,d0
   101a6:	+--|-- bra.s 101c2 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   101a8:	|  '-> moveq #28,d0
   101aa:	|      add.l 20(sp),d0
   101ae:	|      clr.l -(sp)
   101b0:	|      pea 1 <_start+0x1>
   101b4:	|      move.l d0,-(sp)
   101b6:	|      jsr 14dd2 <setVariable>
   101bc:	|      lea 12(sp),sp
	return BR_CONTINUE;
   101c0:	|      moveq #2,d0
}
   101c2:	'----> lea 12(sp),sp
   101c6:	       rts

000101c8 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   101c8:	move.w #1,1a876 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   101d0:	moveq #2,d0
}
   101d2:	rts

000101d4 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   101d4:	moveq #24,d0
   101d6:	add.l 8(sp),d0
   101da:	move.l d0,-(sp)
   101dc:	jsr 14e64 <trimStack>
   101e2:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   101e4:	pea 19647 <PutChar+0x1c79>
   101ea:	jsr 16f2c <KPrintF>
   101f0:	addq.l #4,sp
	return BR_CONTINUE;
   101f2:	moveq #2,d0
}
   101f4:	rts

000101f6 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   101f6:	pea 19647 <PutChar+0x1c79>
   101fc:	jsr 16f2c <KPrintF>
   10202:	addq.l #4,sp
	return BR_CONTINUE;
   10204:	moveq #2,d0
}
   10206:	rts

00010208 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   10208:	pea 19647 <PutChar+0x1c79>
   1020e:	jsr 16f2c <KPrintF>
   10214:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   10216:	moveq #2,d0
}
   10218:	rts

0001021a <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   1021a:	pea 19647 <PutChar+0x1c79>
   10220:	jsr 16f2c <KPrintF>
   10226:	addq.l #4,sp
	return BR_CONTINUE;
   10228:	moveq #2,d0
}
   1022a:	rts

0001022c <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1022c:	pea 19647 <PutChar+0x1c79>
   10232:	jsr 16f2c <KPrintF>
   10238:	addq.l #4,sp
	return BR_CONTINUE;
   1023a:	moveq #2,d0
}
   1023c:	rts

0001023e <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1023e:	pea 19647 <PutChar+0x1c79>
   10244:	jsr 16f2c <KPrintF>
   1024a:	addq.l #4,sp
	return BR_CONTINUE;
   1024c:	moveq #2,d0
}
   1024e:	rts

00010250 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   10250:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10254:	       movea.l 20(sp),a0
   10258:	       move.l 24(a0),d0
   1025c:	       move.l d0,-(sp)
   1025e:	       pea 1 <_start+0x1>
   10262:	       moveq #16,d0
   10264:	       add.l sp,d0
   10266:	       move.l d0,-(sp)
   10268:	       jsr 144e0 <getValueType>
   1026e:	       lea 12(sp),sp
   10272:	       tst.w d0
   10274:	   ,-- bne.s 1027c <builtIn_startMusic+0x2c>
   10276:	   |   moveq #1,d0
   10278:	,--|-- bra.w 1031c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1027c:	|  '-> moveq #24,d0
   1027e:	|      add.l 20(sp),d0
   10282:	|      move.l d0,-(sp)
   10284:	|      jsr 14e64 <trimStack>
   1028a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1028c:	|      movea.l 20(sp),a0
   10290:	|      move.l 24(a0),d0
   10294:	|      move.l d0,-(sp)
   10296:	|      pea 1 <_start+0x1>
   1029a:	|      moveq #12,d0
   1029c:	|      add.l sp,d0
   1029e:	|      move.l d0,-(sp)
   102a0:	|      jsr 144e0 <getValueType>
   102a6:	|      lea 12(sp),sp
   102aa:	|      tst.w d0
   102ac:	|  ,-- bne.s 102b2 <builtIn_startMusic+0x62>
   102ae:	|  |   moveq #1,d0
   102b0:	+--|-- bra.s 1031c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   102b2:	|  '-> moveq #24,d0
   102b4:	|      add.l 20(sp),d0
   102b8:	|      move.l d0,-(sp)
   102ba:	|      jsr 14e64 <trimStack>
   102c0:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   102c2:	|      movea.l 20(sp),a0
   102c6:	|      move.l 24(a0),d0
   102ca:	|      move.l d0,-(sp)
   102cc:	|      pea 5 <_start+0x5>
   102d0:	|      lea 8(sp),a0
   102d4:	|      move.l a0,-(sp)
   102d6:	|      jsr 144e0 <getValueType>
   102dc:	|      lea 12(sp),sp
   102e0:	|      tst.w d0
   102e2:	|  ,-- bne.s 102e8 <builtIn_startMusic+0x98>
   102e4:	|  |   moveq #1,d0
   102e6:	+--|-- bra.s 1031c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   102e8:	|  '-> moveq #24,d0
   102ea:	|      add.l 20(sp),d0
   102ee:	|      move.l d0,-(sp)
   102f0:	|      jsr 14e64 <trimStack>
   102f6:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   102f8:	|      movea.l 8(sp),a0
   102fc:	|      move.l 4(sp),d1
   10300:	|      move.l (sp),d0
   10302:	|      move.l a0,-(sp)
   10304:	|      move.l d1,-(sp)
   10306:	|      move.l d0,-(sp)
   10308:	|      jsr ce86 <playMOD>
   1030e:	|      lea 12(sp),sp
   10312:	|      tst.w d0
   10314:	|  ,-- bne.s 1031a <builtIn_startMusic+0xca>
   10316:	|  |   moveq #2,d0
   10318:	+--|-- bra.s 1031c <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   1031a:	|  '-> moveq #2,d0
}
   1031c:	'----> lea 12(sp),sp
   10320:	       rts

00010322 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10322:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10324:	       movea.l 12(sp),a0
   10328:	       move.l 24(a0),d0
   1032c:	       move.l d0,-(sp)
   1032e:	       pea 1 <_start+0x1>
   10332:	       move.l sp,d0
   10334:	       addq.l #8,d0
   10336:	       move.l d0,-(sp)
   10338:	       jsr 144e0 <getValueType>
   1033e:	       lea 12(sp),sp
   10342:	       tst.w d0
   10344:	   ,-- bne.s 1034a <builtIn_stopMusic+0x28>
   10346:	   |   moveq #1,d0
   10348:	,--|-- bra.s 10368 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   1034a:	|  '-> moveq #24,d0
   1034c:	|      add.l 12(sp),d0
   10350:	|      move.l d0,-(sp)
   10352:	|      jsr 14e64 <trimStack>
   10358:	|      addq.l #4,sp
	stopMOD (v);
   1035a:	|      move.l (sp),d0
   1035c:	|      move.l d0,-(sp)
   1035e:	|      jsr cf22 <stopMOD>
   10364:	|      addq.l #4,sp
	return BR_CONTINUE;
   10366:	|      moveq #2,d0
}
   10368:	'----> addq.l #4,sp
   1036a:	       rts

0001036c <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   1036c:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1036e:	       movea.l 16(sp),a0
   10372:	       move.l 24(a0),d0
   10376:	       move.l d0,-(sp)
   10378:	       pea 1 <_start+0x1>
   1037c:	       move.l sp,d0
   1037e:	       addq.l #8,d0
   10380:	       move.l d0,-(sp)
   10382:	       jsr 144e0 <getValueType>
   10388:	       lea 12(sp),sp
   1038c:	       tst.w d0
   1038e:	   ,-- bne.s 10394 <builtIn_setMusicVolume+0x28>
   10390:	   |   moveq #1,d0
   10392:	,--|-- bra.s 103ee <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10394:	|  '-> moveq #24,d0
   10396:	|      add.l 16(sp),d0
   1039a:	|      move.l d0,-(sp)
   1039c:	|      jsr 14e64 <trimStack>
   103a2:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103a4:	|      movea.l 16(sp),a0
   103a8:	|      move.l 24(a0),d0
   103ac:	|      move.l d0,-(sp)
   103ae:	|      pea 1 <_start+0x1>
   103b2:	|      moveq #12,d0
   103b4:	|      add.l sp,d0
   103b6:	|      move.l d0,-(sp)
   103b8:	|      jsr 144e0 <getValueType>
   103be:	|      lea 12(sp),sp
   103c2:	|      tst.w d0
   103c4:	|  ,-- bne.s 103ca <builtIn_setMusicVolume+0x5e>
   103c6:	|  |   moveq #1,d0
   103c8:	+--|-- bra.s 103ee <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   103ca:	|  '-> moveq #24,d0
   103cc:	|      add.l 16(sp),d0
   103d0:	|      move.l d0,-(sp)
   103d2:	|      jsr 14e64 <trimStack>
   103d8:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   103da:	|      move.l (sp),d1
   103dc:	|      move.l 4(sp),d0
   103e0:	|      move.l d1,-(sp)
   103e2:	|      move.l d0,-(sp)
   103e4:	|      jsr cf08 <setMusicVolume>
   103ea:	|      addq.l #8,sp
	return BR_CONTINUE;
   103ec:	|      moveq #2,d0
}
   103ee:	'----> addq.l #8,sp
   103f0:	       rts

000103f2 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   103f2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103f4:	       movea.l 12(sp),a0
   103f8:	       move.l 24(a0),d0
   103fc:	       move.l d0,-(sp)
   103fe:	       pea 1 <_start+0x1>
   10402:	       move.l sp,d0
   10404:	       addq.l #8,d0
   10406:	       move.l d0,-(sp)
   10408:	       jsr 144e0 <getValueType>
   1040e:	       lea 12(sp),sp
   10412:	       tst.w d0
   10414:	   ,-- bne.s 1041a <builtIn_setDefaultMusicVolume+0x28>
   10416:	   |   moveq #1,d0
   10418:	,--|-- bra.s 10438 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   1041a:	|  '-> moveq #24,d0
   1041c:	|      add.l 12(sp),d0
   10420:	|      move.l d0,-(sp)
   10422:	|      jsr 14e64 <trimStack>
   10428:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   1042a:	|      move.l (sp),d0
   1042c:	|      move.l d0,-(sp)
   1042e:	|      jsr ceec <setDefaultMusicVolume>
   10434:	|      addq.l #4,sp
	return BR_CONTINUE;
   10436:	|      moveq #2,d0
}
   10438:	'----> addq.l #4,sp
   1043a:	       rts

0001043c <builtIn_playSound>:

builtIn(playSound)
{
   1043c:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1043e:	       movea.l 12(sp),a0
   10442:	       move.l 24(a0),d0
   10446:	       move.l d0,-(sp)
   10448:	       pea 5 <_start+0x5>
   1044c:	       move.l sp,d0
   1044e:	       addq.l #8,d0
   10450:	       move.l d0,-(sp)
   10452:	       jsr 144e0 <getValueType>
   10458:	       lea 12(sp),sp
   1045c:	       tst.w d0
   1045e:	   ,-- bne.s 10464 <builtIn_playSound+0x28>
   10460:	   |   moveq #1,d0
   10462:	,--|-- bra.s 1048c <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   10464:	|  '-> moveq #24,d0
   10466:	|      add.l 12(sp),d0
   1046a:	|      move.l d0,-(sp)
   1046c:	|      jsr 14e64 <trimStack>
   10472:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   10474:	|      move.l (sp),d0
   10476:	|      clr.l -(sp)
   10478:	|      move.l d0,-(sp)
   1047a:	|      jsr cf10 <startSound>
   10480:	|      addq.l #8,sp
   10482:	|      tst.w d0
   10484:	|  ,-- bne.s 1048a <builtIn_playSound+0x4e>
   10486:	|  |   moveq #2,d0
   10488:	+--|-- bra.s 1048c <builtIn_playSound+0x50>
	return BR_CONTINUE;
   1048a:	|  '-> moveq #2,d0
}
   1048c:	'----> addq.l #4,sp
   1048e:	       rts

00010490 <builtIn_loopSound>:

builtIn(loopSound)
{
   10490:	             lea -28(sp),sp
   10494:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   10496:	             tst.l 36(sp)
   1049a:	         ,-- bgt.s 104b0 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   1049c:	         |   pea 1966a <PutChar+0x1c9c>
   104a2:	         |   jsr 16f2c <KPrintF>
   104a8:	         |   addq.l #4,sp
		return BR_ERROR;
   104aa:	         |   moveq #1,d0
   104ac:	,--------|-- bra.w 1066c <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   104b0:	|        '-> moveq #1,d0
   104b2:	|            cmp.l 36(sp),d0
   104b6:	|     ,----- blt.s 10512 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   104b8:	|     |      movea.l 40(sp),a0
   104bc:	|     |      move.l 24(a0),d0
   104c0:	|     |      move.l d0,-(sp)
   104c2:	|     |      pea 5 <_start+0x5>
   104c6:	|     |      lea 16(sp),a0
   104ca:	|     |      move.l a0,-(sp)
   104cc:	|     |      jsr 144e0 <getValueType>
   104d2:	|     |      lea 12(sp),sp
   104d6:	|     |      tst.w d0
   104d8:	|     |  ,-- bne.s 104e0 <builtIn_loopSound+0x50>
   104da:	|     |  |   moveq #1,d0
   104dc:	+-----|--|-- bra.w 1066c <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   104e0:	|     |  '-> moveq #24,d0
   104e2:	|     |      add.l 40(sp),d0
   104e6:	|     |      move.l d0,-(sp)
   104e8:	|     |      jsr 14e64 <trimStack>
   104ee:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   104f0:	|     |      move.l 8(sp),d0
   104f4:	|     |      pea 1 <_start+0x1>
   104f8:	|     |      move.l d0,-(sp)
   104fa:	|     |      jsr cf10 <startSound>
   10500:	|     |      addq.l #8,sp
   10502:	|     |      tst.w d0
   10504:	|     |  ,-- bne.s 1050c <builtIn_loopSound+0x7c>
   10506:	|     |  |   moveq #2,d0
   10508:	+-----|--|-- bra.w 1066c <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   1050c:	|     |  '-> moveq #2,d0
   1050e:	+-----|----- bra.w 1066c <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10512:	|     '----> moveq #2,d1
   10514:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10518:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   1051c:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10520:	|            movea.l 40(sp),a0
   10524:	|            movea.l 24(a0),a0
   10528:	|            move.l (a0),d0
   1052a:	|            moveq #5,d1
   1052c:	|            cmp.l d0,d1
   1052e:	|  ,-------- beq.w 10606 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10532:	|  |         movea.l 40(sp),a0
   10536:	|  |         move.l 24(a0),d0
   1053a:	|  |         move.l d0,-(sp)
   1053c:	|  |         pea 1 <_start+0x1>
   10540:	|  |         lea 12(sp),a0
   10544:	|  |         move.l a0,-(sp)
   10546:	|  |         jsr 144e0 <getValueType>
   1054c:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10550:	|  |         moveq #24,d0
   10552:	|  |         add.l 40(sp),d0
   10556:	|  |         move.l d0,-(sp)
   10558:	|  |         jsr 14e64 <trimStack>
   1055e:	|  |         addq.l #4,sp
			numParams--;
   10560:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10564:	|  +-------- bra.w 10606 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10568:	|  |  ,----> movea.l 40(sp),a0
   1056c:	|  |  |      move.l 24(a0),d0
   10570:	|  |  |      move.l d0,-(sp)
   10572:	|  |  |      pea 5 <_start+0x5>
   10576:	|  |  |      lea 16(sp),a0
   1057a:	|  |  |      move.l a0,-(sp)
   1057c:	|  |  |      jsr 144e0 <getValueType>
   10582:	|  |  |      lea 12(sp),sp
   10586:	|  |  |      tst.w d0
   10588:	|  |  |  ,-- bne.s 1059e <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   1058a:	|  |  |  |   pea 196a8 <PutChar+0x1cda>
   10590:	|  |  |  |   jsr 16f2c <KPrintF>
   10596:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10598:	|  |  |  |   moveq #1,d0
   1059a:	+--|--|--|-- bra.w 1066c <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   1059e:	|  |  |  '-> moveq #20,d0
   105a0:	|  |  |      move.l d0,20(sp)
   105a4:	|  |  |      clr.l 16(sp)
   105a8:	|  |  |      move.l 1a7a4 <SysBase>,d0
   105ae:	|  |  |      movea.l d0,a6
   105b0:	|  |  |      move.l 20(sp),d0
   105b4:	|  |  |      move.l 16(sp),d1
   105b8:	|  |  |      jsr -684(a6)
   105bc:	|  |  |      move.l d0,12(sp)
   105c0:	|  |  |      move.l 12(sp),d0
   105c4:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   105c8:	|  |  |  ,-- bne.s 105d0 <builtIn_loopSound+0x140>
   105ca:	|  |  |  |   moveq #1,d0
   105cc:	+--|--|--|-- bra.w 1066c <builtIn_loopSound+0x1dc>

			s->next = old;
   105d0:	|  |  |  '-> movea.l 28(sp),a0
   105d4:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   105da:	|  |  |      movea.l 28(sp),a0
   105de:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   105e2:	|  |  |      move.l 8(sp),d0
   105e6:	|  |  |      movea.l 28(sp),a0
   105ea:	|  |  |      move.l d0,(a0)
			old = s;
   105ec:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   105f2:	|  |  |      moveq #24,d0
   105f4:	|  |  |      add.l 40(sp),d0
   105f8:	|  |  |      move.l d0,-(sp)
   105fa:	|  |  |      jsr 14e64 <trimStack>
   10600:	|  |  |      addq.l #4,sp
			numParams--;
   10602:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10606:	|  '--|----> tst.l 36(sp)
   1060a:	|     '----- bne.w 10568 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   1060e:	|        ,-- bra.s 1061a <builtIn_loopSound+0x18a>
   10610:	|     ,--|-> movea.l 28(sp),a0
   10614:	|     |  |   move.l 4(a0),28(sp)
   1061a:	|     |  '-> movea.l 28(sp),a0
   1061e:	|     |      move.l 4(a0),d0
   10622:	|     '----- bne.s 10610 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10624:	|            move.l 4(sp),d0
   10628:	|            moveq #1,d1
   1062a:	|            cmp.l d0,d1
   1062c:	|     ,----- bge.s 10644 <builtIn_loopSound+0x1b4>
			s->next = old;
   1062e:	|     |      movea.l 28(sp),a0
   10632:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10638:	|     |      movea.l 24(sp),a0
   1063c:	|     |      move.l 28(sp),8(a0)
   10642:	|     |  ,-- bra.s 10654 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10644:	|     '--|-> move.l 4(sp),d0
   10648:	|        +-- beq.s 10654 <builtIn_loopSound+0x1c4>
			s->next = s;
   1064a:	|        |   movea.l 28(sp),a0
   1064e:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10654:	|        '-> movea.l 24(sp),a0
   10658:	|            moveq #-1,d0
   1065a:	|            move.l d0,16(a0)
		playSoundList(old);
   1065e:	|            move.l 24(sp),-(sp)
   10662:	|            jsr ce8a <playSoundList>
   10668:	|            addq.l #4,sp
		return BR_CONTINUE;
   1066a:	|            moveq #2,d0
	}
}
   1066c:	'----------> movea.l (sp)+,a6
   1066e:	             lea 28(sp),sp
   10672:	             rts

00010674 <builtIn_stopSound>:

builtIn(stopSound)
{
   10674:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10676:	       movea.l 12(sp),a0
   1067a:	       move.l 24(a0),d0
   1067e:	       move.l d0,-(sp)
   10680:	       pea 5 <_start+0x5>
   10684:	       move.l sp,d0
   10686:	       addq.l #8,d0
   10688:	       move.l d0,-(sp)
   1068a:	       jsr 144e0 <getValueType>
   10690:	       lea 12(sp),sp
   10694:	       tst.w d0
   10696:	   ,-- bne.s 1069c <builtIn_stopSound+0x28>
   10698:	   |   moveq #1,d0
   1069a:	,--|-- bra.s 106ba <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   1069c:	|  '-> moveq #24,d0
   1069e:	|      add.l 12(sp),d0
   106a2:	|      move.l d0,-(sp)
   106a4:	|      jsr 14e64 <trimStack>
   106aa:	|      addq.l #4,sp
	huntKillSound (v);
   106ac:	|      move.l (sp),d0
   106ae:	|      move.l d0,-(sp)
   106b0:	|      jsr ce82 <huntKillSound>
   106b6:	|      addq.l #4,sp
	return BR_CONTINUE;
   106b8:	|      moveq #2,d0
}
   106ba:	'----> addq.l #4,sp
   106bc:	       rts

000106be <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   106be:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106c0:	       movea.l 12(sp),a0
   106c4:	       move.l 24(a0),d0
   106c8:	       move.l d0,-(sp)
   106ca:	       pea 1 <_start+0x1>
   106ce:	       move.l sp,d0
   106d0:	       addq.l #8,d0
   106d2:	       move.l d0,-(sp)
   106d4:	       jsr 144e0 <getValueType>
   106da:	       lea 12(sp),sp
   106de:	       tst.w d0
   106e0:	   ,-- bne.s 106e6 <builtIn_setDefaultSoundVolume+0x28>
   106e2:	   |   moveq #1,d0
   106e4:	,--|-- bra.s 10704 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   106e6:	|  '-> moveq #24,d0
   106e8:	|      add.l 12(sp),d0
   106ec:	|      move.l d0,-(sp)
   106ee:	|      jsr 14e64 <trimStack>
   106f4:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   106f6:	|      move.l (sp),d0
   106f8:	|      move.l d0,-(sp)
   106fa:	|      jsr cef8 <setDefaultSoundVolume>
   10700:	|      addq.l #4,sp
	return BR_CONTINUE;
   10702:	|      moveq #2,d0
}
   10704:	'----> addq.l #4,sp
   10706:	       rts

00010708 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10708:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1070a:	       movea.l 16(sp),a0
   1070e:	       move.l 24(a0),d0
   10712:	       move.l d0,-(sp)
   10714:	       pea 1 <_start+0x1>
   10718:	       move.l sp,d0
   1071a:	       addq.l #8,d0
   1071c:	       move.l d0,-(sp)
   1071e:	       jsr 144e0 <getValueType>
   10724:	       lea 12(sp),sp
   10728:	       tst.w d0
   1072a:	   ,-- bne.s 10730 <builtIn_setSoundVolume+0x28>
   1072c:	   |   moveq #1,d0
   1072e:	,--|-- bra.s 1078a <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10730:	|  '-> moveq #24,d0
   10732:	|      add.l 16(sp),d0
   10736:	|      move.l d0,-(sp)
   10738:	|      jsr 14e64 <trimStack>
   1073e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10740:	|      movea.l 16(sp),a0
   10744:	|      move.l 24(a0),d0
   10748:	|      move.l d0,-(sp)
   1074a:	|      pea 5 <_start+0x5>
   1074e:	|      moveq #12,d0
   10750:	|      add.l sp,d0
   10752:	|      move.l d0,-(sp)
   10754:	|      jsr 144e0 <getValueType>
   1075a:	|      lea 12(sp),sp
   1075e:	|      tst.w d0
   10760:	|  ,-- bne.s 10766 <builtIn_setSoundVolume+0x5e>
   10762:	|  |   moveq #1,d0
   10764:	+--|-- bra.s 1078a <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10766:	|  '-> moveq #24,d0
   10768:	|      add.l 16(sp),d0
   1076c:	|      move.l d0,-(sp)
   1076e:	|      jsr 14e64 <trimStack>
   10774:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10776:	|      move.l (sp),d1
   10778:	|      move.l 4(sp),d0
   1077c:	|      move.l d1,-(sp)
   1077e:	|      move.l d0,-(sp)
   10780:	|      jsr cf0c <setSoundVolume>
   10786:	|      addq.l #8,sp
	return BR_CONTINUE;
   10788:	|      moveq #2,d0
}
   1078a:	'----> addq.l #8,sp
   1078c:	       rts

0001078e <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   1078e:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10792:	       movea.l 20(sp),a0
   10796:	       move.l 24(a0),d0
   1079a:	       move.l d0,-(sp)
   1079c:	       pea 1 <_start+0x1>
   107a0:	       moveq #12,d0
   107a2:	       add.l sp,d0
   107a4:	       move.l d0,-(sp)
   107a6:	       jsr 144e0 <getValueType>
   107ac:	       lea 12(sp),sp
   107b0:	       tst.w d0
   107b2:	   ,-- bne.s 107ba <builtIn_setSoundLoopPoints+0x2c>
   107b4:	   |   moveq #1,d0
   107b6:	,--|-- bra.w 10852 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   107ba:	|  '-> moveq #24,d0
   107bc:	|      add.l 20(sp),d0
   107c0:	|      move.l d0,-(sp)
   107c2:	|      jsr 14e64 <trimStack>
   107c8:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107ca:	|      movea.l 20(sp),a0
   107ce:	|      move.l 24(a0),d0
   107d2:	|      move.l d0,-(sp)
   107d4:	|      pea 1 <_start+0x1>
   107d8:	|      lea 8(sp),a0
   107dc:	|      move.l a0,-(sp)
   107de:	|      jsr 144e0 <getValueType>
   107e4:	|      lea 12(sp),sp
   107e8:	|      tst.w d0
   107ea:	|  ,-- bne.s 107f0 <builtIn_setSoundLoopPoints+0x62>
   107ec:	|  |   moveq #1,d0
   107ee:	+--|-- bra.s 10852 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   107f0:	|  '-> moveq #24,d0
   107f2:	|      add.l 20(sp),d0
   107f6:	|      move.l d0,-(sp)
   107f8:	|      jsr 14e64 <trimStack>
   107fe:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10800:	|      movea.l 20(sp),a0
   10804:	|      move.l 24(a0),d0
   10808:	|      move.l d0,-(sp)
   1080a:	|      pea 5 <_start+0x5>
   1080e:	|      moveq #16,d0
   10810:	|      add.l sp,d0
   10812:	|      move.l d0,-(sp)
   10814:	|      jsr 144e0 <getValueType>
   1081a:	|      lea 12(sp),sp
   1081e:	|      tst.w d0
   10820:	|  ,-- bne.s 10826 <builtIn_setSoundLoopPoints+0x98>
   10822:	|  |   moveq #1,d0
   10824:	+--|-- bra.s 10852 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10826:	|  '-> moveq #24,d0
   10828:	|      add.l 20(sp),d0
   1082c:	|      move.l d0,-(sp)
   1082e:	|      jsr 14e64 <trimStack>
   10834:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10836:	|      movea.l 4(sp),a0
   1083a:	|      move.l (sp),d1
   1083c:	|      move.l 8(sp),d0
   10840:	|      move.l a0,-(sp)
   10842:	|      move.l d1,-(sp)
   10844:	|      move.l d0,-(sp)
   10846:	|      jsr cf04 <setSoundLoop>
   1084c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10850:	|      moveq #2,d0
}
   10852:	'----> lea 12(sp),sp
   10856:	       rts

00010858 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10858:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   1085a:	          movea.l 12(sp),a0
   1085e:	          movea.l 24(a0),a0
   10862:	          move.l (a0),d0
   10864:	          moveq #5,d1
   10866:	          cmp.l d0,d1
   10868:	,-------- bne.s 108ac <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   1086a:	|         movea.l 12(sp),a0
   1086e:	|         move.l 24(a0),d0
   10872:	|         move.l d0,-(sp)
   10874:	|         pea 5 <_start+0x5>
   10878:	|         move.l sp,d0
   1087a:	|         addq.l #8,d0
   1087c:	|         move.l d0,-(sp)
   1087e:	|         jsr 144e0 <getValueType>
   10884:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10888:	|         moveq #24,d0
   1088a:	|         add.l 12(sp),d0
   1088e:	|         move.l d0,-(sp)
   10890:	|         jsr 14e64 <trimStack>
   10896:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10898:	|         move.l (sp),d0
   1089a:	|         move.l d0,-(sp)
   1089c:	|         jsr 166d6 <setFloor>
   108a2:	|         addq.l #4,sp
   108a4:	|         tst.w d0
   108a6:	|  ,----- bne.s 108c2 <builtIn_setFloor+0x6a>
   108a8:	|  |      moveq #1,d0
   108aa:	|  |  ,-- bra.s 108c4 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   108ac:	'--|--|-> moveq #24,d0
   108ae:	   |  |   add.l 12(sp),d0
   108b2:	   |  |   move.l d0,-(sp)
   108b4:	   |  |   jsr 14e64 <trimStack>
   108ba:	   |  |   addq.l #4,sp
		setFloorNull ();
   108bc:	   |  |   jsr 16e50 <setFloorNull>
	}
	return BR_CONTINUE;
   108c2:	   '--|-> moveq #2,d0
}
   108c4:	      '-> addq.l #4,sp
   108c6:	          rts

000108c8 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   108c8:	jsr 15f6e <drawFloor>
	return BR_CONTINUE;
   108ce:	moveq #2,d0
}
   108d0:	rts

000108d2 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   108d2:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   108d4:	          movea.l 12(sp),a0
   108d8:	          movea.l 24(a0),a0
   108dc:	          move.l (a0),d0
   108de:	          moveq #5,d1
   108e0:	          cmp.l d0,d1
   108e2:	,-------- bne.s 10926 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   108e4:	|         movea.l 12(sp),a0
   108e8:	|         move.l 24(a0),d0
   108ec:	|         move.l d0,-(sp)
   108ee:	|         pea 5 <_start+0x5>
   108f2:	|         move.l sp,d0
   108f4:	|         addq.l #8,d0
   108f6:	|         move.l d0,-(sp)
   108f8:	|         jsr 144e0 <getValueType>
   108fe:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10902:	|         moveq #24,d0
   10904:	|         add.l 12(sp),d0
   10908:	|         move.l d0,-(sp)
   1090a:	|         jsr 14e64 <trimStack>
   10910:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10912:	|         move.l (sp),d0
   10914:	|         move.l d0,-(sp)
   10916:	|         jsr 8414 <setZBuffer>
   1091c:	|         addq.l #4,sp
   1091e:	|         tst.w d0
   10920:	|  ,----- bne.s 1093c <builtIn_setZBuffer+0x6a>
   10922:	|  |      moveq #1,d0
   10924:	|  |  ,-- bra.s 1093e <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10926:	'--|--|-> moveq #24,d0
   10928:	   |  |   add.l 12(sp),d0
   1092c:	   |  |   move.l d0,-(sp)
   1092e:	   |  |   jsr 14e64 <trimStack>
   10934:	   |  |   addq.l #4,sp
		killZBuffer ();
   10936:	   |  |   jsr 83c8 <killZBuffer>
	}
	return BR_CONTINUE;
   1093c:	   '--|-> moveq #2,d0
}
   1093e:	      '-> addq.l #4,sp
   10940:	          rts

00010942 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10942:	pea 196df <PutChar+0x1d11>
   10948:	jsr 16f2c <KPrintF>
   1094e:	addq.l #4,sp
	return BR_CONTINUE;
   10950:	moveq #2,d0
}
   10952:	rts

00010954 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10954:	          movea.l 8(sp),a0
   10958:	          move.l 24(a0),d0
   1095c:	          move.l d0,-(sp)
   1095e:	          pea 1 <_start+0x1>
   10962:	          pea 1a872 <speechMode>
   10968:	          jsr 144e0 <getValueType>
   1096e:	          lea 12(sp),sp
   10972:	          tst.w d0
   10974:	      ,-- bne.s 1097a <builtIn_setSpeechMode+0x26>
   10976:	      |   moveq #1,d0
   10978:	,-----|-- bra.s 109b2 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   1097a:	|     '-> moveq #24,d0
   1097c:	|         add.l 8(sp),d0
   10980:	|         move.l d0,-(sp)
   10982:	|         jsr 14e64 <trimStack>
   10988:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   1098a:	|         move.l 1a872 <speechMode>,d0
   10990:	|     ,-- bmi.s 1099e <builtIn_setSpeechMode+0x4a>
   10992:	|     |   move.l 1a872 <speechMode>,d0
   10998:	|     |   moveq #2,d1
   1099a:	|     |   cmp.l d0,d1
   1099c:	|  ,--|-- bge.s 109b0 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   1099e:	|  |  '-> pea 196f8 <PutChar+0x1d2a>
   109a4:	|  |      jsr 16f2c <KPrintF>
   109aa:	|  |      addq.l #4,sp
		return BR_ERROR;
   109ac:	|  |      moveq #1,d0
   109ae:	+--|----- bra.s 109b2 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   109b0:	|  '----> moveq #2,d0
}
   109b2:	'-------> rts

000109b4 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   109b4:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   109b6:	       jsr 7bd0 <isThereAnySpeechGoingOn>
   109bc:	       move.l d0,(sp)
	if (i == -1) {
   109be:	       moveq #-1,d0
   109c0:	       cmp.l (sp),d0
   109c2:	,----- bne.s 109de <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   109c4:	|      moveq #28,d0
   109c6:	|      add.l 12(sp),d0
   109ca:	|      clr.l -(sp)
   109cc:	|      pea 1 <_start+0x1>
   109d0:	|      move.l d0,-(sp)
   109d2:	|      jsr 14dd2 <setVariable>
   109d8:	|      lea 12(sp),sp
   109dc:	|  ,-- bra.s 109f6 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   109de:	'--|-> moveq #28,d0
   109e0:	   |   add.l 12(sp),d0
   109e4:	   |   move.l (sp),-(sp)
   109e6:	   |   pea 7 <_start+0x7>
   109ea:	   |   move.l d0,-(sp)
   109ec:	   |   jsr 14dd2 <setVariable>
   109f2:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   109f6:	   '-> moveq #2,d0
}
   109f8:	       addq.l #4,sp
   109fa:	       rts

000109fc <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   109fc:	jsr 5ea4 <killSpeechTimers>
	return BR_CONTINUE;
   10a02:	moveq #2,d0
}
   10a04:	rts

00010a06 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10a06:	       move.l 1a8b8 <overRegion>,d0
   10a0c:	,----- beq.s 10a36 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10a0e:	|      movea.l 1a8b8 <overRegion>,a0
   10a14:	|      movea.l 28(a0),a0
   10a18:	|      move.l 4(a0),d1
   10a1c:	|      moveq #28,d0
   10a1e:	|      add.l 8(sp),d0
   10a22:	|      move.l d1,-(sp)
   10a24:	|      pea 7 <_start+0x7>
   10a28:	|      move.l d0,-(sp)
   10a2a:	|      jsr 14dd2 <setVariable>
   10a30:	|      lea 12(sp),sp
   10a34:	|  ,-- bra.s 10a4e <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10a36:	'--|-> moveq #28,d0
   10a38:	   |   add.l 8(sp),d0
   10a3c:	   |   clr.l -(sp)
   10a3e:	   |   pea 1 <_start+0x1>
   10a42:	   |   move.l d0,-(sp)
   10a44:	   |   jsr 14dd2 <setVariable>
   10a4a:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10a4e:	   '-> moveq #2,d0
}
   10a50:	       rts

00010a52 <builtIn_rename>:

builtIn(rename)
{
   10a52:	       lea -16(sp),sp
   10a56:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10a58:	       movea.l 28(sp),a0
   10a5c:	       move.l 24(a0),d0
   10a60:	       move.l d0,-(sp)
   10a62:	       jsr 14ab6 <getTextFromAnyVar>
   10a68:	       addq.l #4,sp
   10a6a:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10a6e:	   ,-- bne.s 10a74 <builtIn_rename+0x22>
   10a70:	   |   moveq #1,d0
   10a72:	,--|-- bra.s 10aee <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10a74:	|  '-> moveq #24,d0
   10a76:	|      add.l 28(sp),d0
   10a7a:	|      move.l d0,-(sp)
   10a7c:	|      jsr 14e64 <trimStack>
   10a82:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10a84:	|      movea.l 28(sp),a0
   10a88:	|      move.l 24(a0),d0
   10a8c:	|      move.l d0,-(sp)
   10a8e:	|      pea 7 <_start+0x7>
   10a92:	|      lea 12(sp),a0
   10a96:	|      move.l a0,-(sp)
   10a98:	|      jsr 144e0 <getValueType>
   10a9e:	|      lea 12(sp),sp
   10aa2:	|      tst.w d0
   10aa4:	|  ,-- bne.s 10aaa <builtIn_rename+0x58>
   10aa6:	|  |   moveq #1,d0
   10aa8:	+--|-- bra.s 10aee <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10aaa:	|  '-> moveq #24,d0
   10aac:	|      add.l 28(sp),d0
   10ab0:	|      move.l d0,-(sp)
   10ab2:	|      jsr 14e64 <trimStack>
   10ab8:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10aba:	|      move.l 4(sp),d0
   10abe:	|      move.l d0,-(sp)
   10ac0:	|      jsr d246 <findObjectType>
   10ac6:	|      addq.l #4,sp
   10ac8:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10acc:	|      movea.l 12(sp),a0
   10ad0:	|      move.l (a0),8(sp)
   10ad4:	|      move.l 1a7a4 <SysBase>,d0
   10ada:	|      movea.l d0,a6
   10adc:	|      movea.l 8(sp),a1
   10ae0:	|      jsr -690(a6)
	o->screenName = newText;
   10ae4:	|      movea.l 12(sp),a0
   10ae8:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10aec:	|      moveq #2,d0
}
   10aee:	'----> movea.l (sp)+,a6
   10af0:	       lea 16(sp),sp
   10af4:	       rts

00010af6 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10af6:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10afa:	          movea.l 20(sp),a0
   10afe:	          move.l 24(a0),d0
   10b02:	          move.l d0,-(sp)
   10b04:	          pea 7 <_start+0x7>
   10b08:	          lea 8(sp),a0
   10b0c:	          move.l a0,-(sp)
   10b0e:	          jsr 144e0 <getValueType>
   10b14:	          lea 12(sp),sp
   10b18:	          tst.w d0
   10b1a:	      ,-- bne.s 10b22 <builtIn_getObjectX+0x2c>
   10b1c:	      |   moveq #1,d0
   10b1e:	,-----|-- bra.w 10bbe <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10b22:	|     '-> moveq #24,d0
   10b24:	|         add.l 20(sp),d0
   10b28:	|         move.l d0,-(sp)
   10b2a:	|         jsr 14e64 <trimStack>
   10b30:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10b32:	|         move.l (sp),d0
   10b34:	|         move.l d0,-(sp)
   10b36:	|         jsr a344 <findPerson>
   10b3c:	|         addq.l #4,sp
   10b3e:	|         move.l d0,8(sp)
	if (pers) {
   10b42:	|     ,-- beq.s 10b70 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10b44:	|     |   movea.l 8(sp),a0
   10b48:	|     |   move.l (a0),d0
   10b4a:	|     |   move.l d0,-(sp)
   10b4c:	|     |   jsr 172f6 <__fixsfsi>
   10b52:	|     |   addq.l #4,sp
   10b54:	|     |   move.l d0,d1
   10b56:	|     |   moveq #28,d0
   10b58:	|     |   add.l 20(sp),d0
   10b5c:	|     |   move.l d1,-(sp)
   10b5e:	|     |   pea 1 <_start+0x1>
   10b62:	|     |   move.l d0,-(sp)
   10b64:	|     |   jsr 14dd2 <setVariable>
   10b6a:	|     |   lea 12(sp),sp
   10b6e:	|  ,--|-- bra.s 10bbc <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10b70:	|  |  '-> move.l (sp),d0
   10b72:	|  |      move.l d0,-(sp)
   10b74:	|  |      jsr 1572a <getRegionForObject>
   10b7a:	|  |      addq.l #4,sp
   10b7c:	|  |      move.l d0,4(sp)
		if (la) {
   10b80:	|  |  ,-- beq.s 10ba4 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10b82:	|  |  |   movea.l 4(sp),a0
   10b86:	|  |  |   move.l 16(a0),d1
   10b8a:	|  |  |   moveq #28,d0
   10b8c:	|  |  |   add.l 20(sp),d0
   10b90:	|  |  |   move.l d1,-(sp)
   10b92:	|  |  |   pea 1 <_start+0x1>
   10b96:	|  |  |   move.l d0,-(sp)
   10b98:	|  |  |   jsr 14dd2 <setVariable>
   10b9e:	|  |  |   lea 12(sp),sp
   10ba2:	|  +--|-- bra.s 10bbc <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10ba4:	|  |  '-> moveq #28,d0
   10ba6:	|  |      add.l 20(sp),d0
   10baa:	|  |      clr.l -(sp)
   10bac:	|  |      pea 1 <_start+0x1>
   10bb0:	|  |      move.l d0,-(sp)
   10bb2:	|  |      jsr 14dd2 <setVariable>
   10bb8:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10bbc:	|  '----> moveq #2,d0
}
   10bbe:	'-------> lea 12(sp),sp
   10bc2:	          rts

00010bc4 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10bc4:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10bc8:	          movea.l 20(sp),a0
   10bcc:	          move.l 24(a0),d0
   10bd0:	          move.l d0,-(sp)
   10bd2:	          pea 7 <_start+0x7>
   10bd6:	          lea 8(sp),a0
   10bda:	          move.l a0,-(sp)
   10bdc:	          jsr 144e0 <getValueType>
   10be2:	          lea 12(sp),sp
   10be6:	          tst.w d0
   10be8:	      ,-- bne.s 10bf0 <builtIn_getObjectY+0x2c>
   10bea:	      |   moveq #1,d0
   10bec:	,-----|-- bra.w 10c8e <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10bf0:	|     '-> moveq #24,d0
   10bf2:	|         add.l 20(sp),d0
   10bf6:	|         move.l d0,-(sp)
   10bf8:	|         jsr 14e64 <trimStack>
   10bfe:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10c00:	|         move.l (sp),d0
   10c02:	|         move.l d0,-(sp)
   10c04:	|         jsr a344 <findPerson>
   10c0a:	|         addq.l #4,sp
   10c0c:	|         move.l d0,8(sp)
	if (pers) {
   10c10:	|     ,-- beq.s 10c40 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10c12:	|     |   movea.l 8(sp),a0
   10c16:	|     |   move.l 4(a0),d0
   10c1a:	|     |   move.l d0,-(sp)
   10c1c:	|     |   jsr 172f6 <__fixsfsi>
   10c22:	|     |   addq.l #4,sp
   10c24:	|     |   move.l d0,d1
   10c26:	|     |   moveq #28,d0
   10c28:	|     |   add.l 20(sp),d0
   10c2c:	|     |   move.l d1,-(sp)
   10c2e:	|     |   pea 1 <_start+0x1>
   10c32:	|     |   move.l d0,-(sp)
   10c34:	|     |   jsr 14dd2 <setVariable>
   10c3a:	|     |   lea 12(sp),sp
   10c3e:	|  ,--|-- bra.s 10c8c <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10c40:	|  |  '-> move.l (sp),d0
   10c42:	|  |      move.l d0,-(sp)
   10c44:	|  |      jsr 1572a <getRegionForObject>
   10c4a:	|  |      addq.l #4,sp
   10c4c:	|  |      move.l d0,4(sp)
		if (la) {
   10c50:	|  |  ,-- beq.s 10c74 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10c52:	|  |  |   movea.l 4(sp),a0
   10c56:	|  |  |   move.l 20(a0),d1
   10c5a:	|  |  |   moveq #28,d0
   10c5c:	|  |  |   add.l 20(sp),d0
   10c60:	|  |  |   move.l d1,-(sp)
   10c62:	|  |  |   pea 1 <_start+0x1>
   10c66:	|  |  |   move.l d0,-(sp)
   10c68:	|  |  |   jsr 14dd2 <setVariable>
   10c6e:	|  |  |   lea 12(sp),sp
   10c72:	|  +--|-- bra.s 10c8c <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10c74:	|  |  '-> moveq #28,d0
   10c76:	|  |      add.l 20(sp),d0
   10c7a:	|  |      clr.l -(sp)
   10c7c:	|  |      pea 1 <_start+0x1>
   10c80:	|  |      move.l d0,-(sp)
   10c82:	|  |      jsr 14dd2 <setVariable>
   10c88:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10c8c:	|  '----> moveq #2,d0
}
   10c8e:	'-------> lea 12(sp),sp
   10c92:	          rts

00010c94 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10c94:	       lea -32(sp),sp
   10c98:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c9c:	       movea.l 56(sp),a0
   10ca0:	       move.l 24(a0),d0
   10ca4:	       move.l d0,-(sp)
   10ca6:	       pea 1 <_start+0x1>
   10caa:	       lea 28(sp),a0
   10cae:	       move.l a0,-(sp)
   10cb0:	       jsr 144e0 <getValueType>
   10cb6:	       lea 12(sp),sp
   10cba:	       tst.w d0
   10cbc:	   ,-- bne.s 10cc4 <builtIn_addScreenRegion+0x30>
   10cbe:	   |   moveq #1,d0
   10cc0:	,--|-- bra.w 10e9e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10cc4:	|  '-> moveq #24,d0
   10cc6:	|      add.l 56(sp),d0
   10cca:	|      move.l d0,-(sp)
   10ccc:	|      jsr 14e64 <trimStack>
   10cd2:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10cd4:	|      movea.l 56(sp),a0
   10cd8:	|      move.l 24(a0),d0
   10cdc:	|      move.l d0,-(sp)
   10cde:	|      pea 1 <_start+0x1>
   10ce2:	|      moveq #48,d0
   10ce4:	|      add.l sp,d0
   10ce6:	|      move.l d0,-(sp)
   10ce8:	|      jsr 144e0 <getValueType>
   10cee:	|      lea 12(sp),sp
   10cf2:	|      tst.w d0
   10cf4:	|  ,-- bne.s 10cfc <builtIn_addScreenRegion+0x68>
   10cf6:	|  |   moveq #1,d0
   10cf8:	+--|-- bra.w 10e9e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10cfc:	|  '-> moveq #24,d0
   10cfe:	|      add.l 56(sp),d0
   10d02:	|      move.l d0,-(sp)
   10d04:	|      jsr 14e64 <trimStack>
   10d0a:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d0c:	|      movea.l 56(sp),a0
   10d10:	|      move.l 24(a0),d0
   10d14:	|      move.l d0,-(sp)
   10d16:	|      pea 1 <_start+0x1>
   10d1a:	|      moveq #52,d0
   10d1c:	|      add.l sp,d0
   10d1e:	|      move.l d0,-(sp)
   10d20:	|      jsr 144e0 <getValueType>
   10d26:	|      lea 12(sp),sp
   10d2a:	|      tst.w d0
   10d2c:	|  ,-- bne.s 10d34 <builtIn_addScreenRegion+0xa0>
   10d2e:	|  |   moveq #1,d0
   10d30:	+--|-- bra.w 10e9e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10d34:	|  '-> moveq #24,d0
   10d36:	|      add.l 56(sp),d0
   10d3a:	|      move.l d0,-(sp)
   10d3c:	|      jsr 14e64 <trimStack>
   10d42:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d44:	|      movea.l 56(sp),a0
   10d48:	|      move.l 24(a0),d0
   10d4c:	|      move.l d0,-(sp)
   10d4e:	|      pea 1 <_start+0x1>
   10d52:	|      lea 32(sp),a0
   10d56:	|      move.l a0,-(sp)
   10d58:	|      jsr 144e0 <getValueType>
   10d5e:	|      lea 12(sp),sp
   10d62:	|      tst.w d0
   10d64:	|  ,-- bne.s 10d6c <builtIn_addScreenRegion+0xd8>
   10d66:	|  |   moveq #1,d0
   10d68:	+--|-- bra.w 10e9e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10d6c:	|  '-> moveq #24,d0
   10d6e:	|      add.l 56(sp),d0
   10d72:	|      move.l d0,-(sp)
   10d74:	|      jsr 14e64 <trimStack>
   10d7a:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d7c:	|      movea.l 56(sp),a0
   10d80:	|      move.l 24(a0),d0
   10d84:	|      move.l d0,-(sp)
   10d86:	|      pea 1 <_start+0x1>
   10d8a:	|      lea 36(sp),a0
   10d8e:	|      move.l a0,-(sp)
   10d90:	|      jsr 144e0 <getValueType>
   10d96:	|      lea 12(sp),sp
   10d9a:	|      tst.w d0
   10d9c:	|  ,-- bne.s 10da4 <builtIn_addScreenRegion+0x110>
   10d9e:	|  |   moveq #1,d0
   10da0:	+--|-- bra.w 10e9e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10da4:	|  '-> moveq #24,d0
   10da6:	|      add.l 56(sp),d0
   10daa:	|      move.l d0,-(sp)
   10dac:	|      jsr 14e64 <trimStack>
   10db2:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10db4:	|      movea.l 56(sp),a0
   10db8:	|      move.l 24(a0),d0
   10dbc:	|      move.l d0,-(sp)
   10dbe:	|      pea 1 <_start+0x1>
   10dc2:	|      lea 40(sp),a0
   10dc6:	|      move.l a0,-(sp)
   10dc8:	|      jsr 144e0 <getValueType>
   10dce:	|      lea 12(sp),sp
   10dd2:	|      tst.w d0
   10dd4:	|  ,-- bne.s 10ddc <builtIn_addScreenRegion+0x148>
   10dd6:	|  |   moveq #1,d0
   10dd8:	+--|-- bra.w 10e9e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10ddc:	|  '-> moveq #24,d0
   10dde:	|      add.l 56(sp),d0
   10de2:	|      move.l d0,-(sp)
   10de4:	|      jsr 14e64 <trimStack>
   10dea:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10dec:	|      movea.l 56(sp),a0
   10df0:	|      move.l 24(a0),d0
   10df4:	|      move.l d0,-(sp)
   10df6:	|      pea 1 <_start+0x1>
   10dfa:	|      lea 44(sp),a0
   10dfe:	|      move.l a0,-(sp)
   10e00:	|      jsr 144e0 <getValueType>
   10e06:	|      lea 12(sp),sp
   10e0a:	|      tst.w d0
   10e0c:	|  ,-- bne.s 10e14 <builtIn_addScreenRegion+0x180>
   10e0e:	|  |   moveq #1,d0
   10e10:	+--|-- bra.w 10e9e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e14:	|  '-> moveq #24,d0
   10e16:	|      add.l 56(sp),d0
   10e1a:	|      move.l d0,-(sp)
   10e1c:	|      jsr 14e64 <trimStack>
   10e22:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e24:	|      movea.l 56(sp),a0
   10e28:	|      move.l 24(a0),d0
   10e2c:	|      move.l d0,-(sp)
   10e2e:	|      pea 7 <_start+0x7>
   10e32:	|      lea 24(sp),a0
   10e36:	|      move.l a0,-(sp)
   10e38:	|      jsr 144e0 <getValueType>
   10e3e:	|      lea 12(sp),sp
   10e42:	|      tst.w d0
   10e44:	|  ,-- bne.s 10e4a <builtIn_addScreenRegion+0x1b6>
   10e46:	|  |   moveq #1,d0
   10e48:	+--|-- bra.s 10e9e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e4a:	|  '-> moveq #24,d0
   10e4c:	|      add.l 56(sp),d0
   10e50:	|      move.l d0,-(sp)
   10e52:	|      jsr 14e64 <trimStack>
   10e58:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   10e5a:	|      move.l 16(sp),d5
   10e5e:	|      move.l 20(sp),d4
   10e62:	|      move.l 40(sp),d3
   10e66:	|      move.l 44(sp),d2
   10e6a:	|      movea.l 24(sp),a1
   10e6e:	|      movea.l 28(sp),a0
   10e72:	|      move.l 32(sp),d1
   10e76:	|      move.l 36(sp),d0
   10e7a:	|      move.l d5,-(sp)
   10e7c:	|      move.l d4,-(sp)
   10e7e:	|      move.l d3,-(sp)
   10e80:	|      move.l d2,-(sp)
   10e82:	|      move.l a1,-(sp)
   10e84:	|      move.l a0,-(sp)
   10e86:	|      move.l d1,-(sp)
   10e88:	|      move.l d0,-(sp)
   10e8a:	|      jsr 155e4 <addScreenRegion>
   10e90:	|      lea 32(sp),sp
   10e94:	|      tst.w d0
   10e96:	|  ,-- beq.s 10e9c <builtIn_addScreenRegion+0x208>
   10e98:	|  |   moveq #2,d0
   10e9a:	+--|-- bra.s 10e9e <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   10e9c:	|  '-> moveq #1,d0

}
   10e9e:	'----> movem.l (sp)+,d2-d5
   10ea2:	       lea 32(sp),sp
   10ea6:	       rts

00010ea8 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   10ea8:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10eaa:	       movea.l 12(sp),a0
   10eae:	       move.l 24(a0),d0
   10eb2:	       move.l d0,-(sp)
   10eb4:	       pea 7 <_start+0x7>
   10eb8:	       move.l sp,d0
   10eba:	       addq.l #8,d0
   10ebc:	       move.l d0,-(sp)
   10ebe:	       jsr 144e0 <getValueType>
   10ec4:	       lea 12(sp),sp
   10ec8:	       tst.w d0
   10eca:	   ,-- bne.s 10ed0 <builtIn_removeScreenRegion+0x28>
   10ecc:	   |   moveq #1,d0
   10ece:	,--|-- bra.s 10eee <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   10ed0:	|  '-> moveq #24,d0
   10ed2:	|      add.l 12(sp),d0
   10ed6:	|      move.l d0,-(sp)
   10ed8:	|      jsr 14e64 <trimStack>
   10ede:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   10ee0:	|      move.l (sp),d0
   10ee2:	|      move.l d0,-(sp)
   10ee4:	|      jsr 158d2 <removeScreenRegion>
   10eea:	|      addq.l #4,sp
	return BR_CONTINUE;
   10eec:	|      moveq #2,d0
}
   10eee:	'----> addq.l #4,sp
   10ef0:	       rts

00010ef2 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   10ef2:	jsr 15a56 <showBoxes>
	return BR_CONTINUE;
   10ef8:	moveq #2,d0
}
   10efa:	rts

00010efc <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   10efc:	jsr 15758 <killAllRegions>
	return BR_CONTINUE;
   10f02:	moveq #2,d0
}
   10f04:	rts

00010f06 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   10f06:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   10f0a:	       movea.l 24(sp),a0
   10f0e:	       move.l 24(a0),d0
   10f12:	       move.l d0,-(sp)
   10f14:	       jsr 1418c <getCostumeFromVar>
   10f1a:	       addq.l #4,sp
   10f1c:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   10f20:	   ,-- bne.s 10f28 <builtIn_addCharacter+0x22>
   10f22:	   |   moveq #1,d0
   10f24:	,--|-- bra.w 11004 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   10f28:	|  '-> moveq #24,d0
   10f2a:	|      add.l 24(sp),d0
   10f2e:	|      move.l d0,-(sp)
   10f30:	|      jsr 14e64 <trimStack>
   10f36:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f38:	|      movea.l 24(sp),a0
   10f3c:	|      move.l 24(a0),d0
   10f40:	|      move.l d0,-(sp)
   10f42:	|      pea 1 <_start+0x1>
   10f46:	|      lea 12(sp),a0
   10f4a:	|      move.l a0,-(sp)
   10f4c:	|      jsr 144e0 <getValueType>
   10f52:	|      lea 12(sp),sp
   10f56:	|      tst.w d0
   10f58:	|  ,-- bne.s 10f60 <builtIn_addCharacter+0x5a>
   10f5a:	|  |   moveq #1,d0
   10f5c:	+--|-- bra.w 11004 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10f60:	|  '-> moveq #24,d0
   10f62:	|      add.l 24(sp),d0
   10f66:	|      move.l d0,-(sp)
   10f68:	|      jsr 14e64 <trimStack>
   10f6e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f70:	|      movea.l 24(sp),a0
   10f74:	|      move.l 24(a0),d0
   10f78:	|      move.l d0,-(sp)
   10f7a:	|      pea 1 <_start+0x1>
   10f7e:	|      moveq #16,d0
   10f80:	|      add.l sp,d0
   10f82:	|      move.l d0,-(sp)
   10f84:	|      jsr 144e0 <getValueType>
   10f8a:	|      lea 12(sp),sp
   10f8e:	|      tst.w d0
   10f90:	|  ,-- bne.s 10f96 <builtIn_addCharacter+0x90>
   10f92:	|  |   moveq #1,d0
   10f94:	+--|-- bra.s 11004 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10f96:	|  '-> moveq #24,d0
   10f98:	|      add.l 24(sp),d0
   10f9c:	|      move.l d0,-(sp)
   10f9e:	|      jsr 14e64 <trimStack>
   10fa4:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10fa6:	|      movea.l 24(sp),a0
   10faa:	|      move.l 24(a0),d0
   10fae:	|      move.l d0,-(sp)
   10fb0:	|      pea 7 <_start+0x7>
   10fb4:	|      lea 8(sp),a0
   10fb8:	|      move.l a0,-(sp)
   10fba:	|      jsr 144e0 <getValueType>
   10fc0:	|      lea 12(sp),sp
   10fc4:	|      tst.w d0
   10fc6:	|  ,-- bne.s 10fcc <builtIn_addCharacter+0xc6>
   10fc8:	|  |   moveq #1,d0
   10fca:	+--|-- bra.s 11004 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10fcc:	|  '-> moveq #24,d0
   10fce:	|      add.l 24(sp),d0
   10fd2:	|      move.l d0,-(sp)
   10fd4:	|      jsr 14e64 <trimStack>
   10fda:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   10fdc:	|      movea.l (sp),a0
   10fde:	|      move.l 4(sp),d1
   10fe2:	|      move.l 8(sp),d0
   10fe6:	|      move.l 12(sp),-(sp)
   10fea:	|      move.l a0,-(sp)
   10fec:	|      move.l d1,-(sp)
   10fee:	|      move.l d0,-(sp)
   10ff0:	|      jsr 8f3e <addPerson>
   10ff6:	|      lea 16(sp),sp
   10ffa:	|      tst.w d0
   10ffc:	|  ,-- beq.s 11002 <builtIn_addCharacter+0xfc>
   10ffe:	|  |   moveq #2,d0
   11000:	+--|-- bra.s 11004 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   11002:	|  '-> moveq #1,d0
}
   11004:	'----> lea 16(sp),sp
   11008:	       rts

0001100a <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   1100a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1100c:	       movea.l 12(sp),a0
   11010:	       move.l 24(a0),d0
   11014:	       move.l d0,-(sp)
   11016:	       pea 7 <_start+0x7>
   1101a:	       move.l sp,d0
   1101c:	       addq.l #8,d0
   1101e:	       move.l d0,-(sp)
   11020:	       jsr 144e0 <getValueType>
   11026:	       lea 12(sp),sp
   1102a:	       tst.w d0
   1102c:	   ,-- bne.s 11032 <builtIn_hideCharacter+0x28>
   1102e:	   |   moveq #1,d0
   11030:	,--|-- bra.s 11052 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   11032:	|  '-> moveq #24,d0
   11034:	|      add.l 12(sp),d0
   11038:	|      move.l d0,-(sp)
   1103a:	|      jsr 14e64 <trimStack>
   11040:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   11042:	|      move.l (sp),d0
   11044:	|      move.l d0,-(sp)
   11046:	|      clr.l -(sp)
   11048:	|      jsr b978 <setShown>
   1104e:	|      addq.l #8,sp
	return BR_CONTINUE;
   11050:	|      moveq #2,d0
}
   11052:	'----> addq.l #4,sp
   11054:	       rts

00011056 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   11056:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11058:	       movea.l 12(sp),a0
   1105c:	       move.l 24(a0),d0
   11060:	       move.l d0,-(sp)
   11062:	       pea 7 <_start+0x7>
   11066:	       move.l sp,d0
   11068:	       addq.l #8,d0
   1106a:	       move.l d0,-(sp)
   1106c:	       jsr 144e0 <getValueType>
   11072:	       lea 12(sp),sp
   11076:	       tst.w d0
   11078:	   ,-- bne.s 1107e <builtIn_showCharacter+0x28>
   1107a:	   |   moveq #1,d0
   1107c:	,--|-- bra.s 110a0 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   1107e:	|  '-> moveq #24,d0
   11080:	|      add.l 12(sp),d0
   11084:	|      move.l d0,-(sp)
   11086:	|      jsr 14e64 <trimStack>
   1108c:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   1108e:	|      move.l (sp),d0
   11090:	|      move.l d0,-(sp)
   11092:	|      pea 1 <_start+0x1>
   11096:	|      jsr b978 <setShown>
   1109c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1109e:	|      moveq #2,d0
}
   110a0:	'----> addq.l #4,sp
   110a2:	       rts

000110a4 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   110a4:	jsr 5ea4 <killSpeechTimers>
	killMostPeople ();
   110aa:	jsr a7b0 <killMostPeople>
	return BR_CONTINUE;
   110b0:	moveq #2,d0
}
   110b2:	rts

000110b4 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   110b4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110b6:	       movea.l 16(sp),a0
   110ba:	       move.l 24(a0),d0
   110be:	       move.l d0,-(sp)
   110c0:	       pea 1 <_start+0x1>
   110c4:	       move.l sp,d0
   110c6:	       addq.l #8,d0
   110c8:	       move.l d0,-(sp)
   110ca:	       jsr 144e0 <getValueType>
   110d0:	       lea 12(sp),sp
   110d4:	       tst.w d0
   110d6:	   ,-- bne.s 110dc <builtIn_setCharacterDrawMode+0x28>
   110d8:	   |   moveq #1,d0
   110da:	,--|-- bra.s 11136 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   110dc:	|  '-> moveq #24,d0
   110de:	|      add.l 16(sp),d0
   110e2:	|      move.l d0,-(sp)
   110e4:	|      jsr 14e64 <trimStack>
   110ea:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   110ec:	|      movea.l 16(sp),a0
   110f0:	|      move.l 24(a0),d0
   110f4:	|      move.l d0,-(sp)
   110f6:	|      pea 7 <_start+0x7>
   110fa:	|      moveq #12,d0
   110fc:	|      add.l sp,d0
   110fe:	|      move.l d0,-(sp)
   11100:	|      jsr 144e0 <getValueType>
   11106:	|      lea 12(sp),sp
   1110a:	|      tst.w d0
   1110c:	|  ,-- bne.s 11112 <builtIn_setCharacterDrawMode+0x5e>
   1110e:	|  |   moveq #1,d0
   11110:	+--|-- bra.s 11136 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11112:	|  '-> moveq #24,d0
   11114:	|      add.l 16(sp),d0
   11118:	|      move.l d0,-(sp)
   1111a:	|      jsr 14e64 <trimStack>
   11120:	|      addq.l #4,sp
	setDrawMode (di, obj);
   11122:	|      move.l 4(sp),d1
   11126:	|      move.l (sp),d0
   11128:	|      move.l d1,-(sp)
   1112a:	|      move.l d0,-(sp)
   1112c:	|      jsr b2b6 <setDrawMode>
   11132:	|      addq.l #8,sp
	return BR_CONTINUE;
   11134:	|      moveq #2,d0
}
   11136:	'----> addq.l #8,sp
   11138:	       rts

0001113a <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   1113a:	pea 19736 <PutChar+0x1d68>
   11140:	jsr 16f2c <KPrintF>
   11146:	addq.l #4,sp
	return BR_CONTINUE;
   11148:	moveq #2,d0
}
   1114a:	rts

0001114c <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   1114c:	pea 19769 <PutChar+0x1d9b>
   11152:	jsr 16f2c <KPrintF>
   11158:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   1115a:	moveq #2,d0
}
   1115c:	rts

0001115e <builtIn_setScale>:

builtIn(setScale)
{
   1115e:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11160:	       movea.l 16(sp),a0
   11164:	       move.l 24(a0),d0
   11168:	       move.l d0,-(sp)
   1116a:	       pea 1 <_start+0x1>
   1116e:	       move.l sp,d0
   11170:	       addq.l #8,d0
   11172:	       move.l d0,-(sp)
   11174:	       jsr 144e0 <getValueType>
   1117a:	       lea 12(sp),sp
   1117e:	       tst.w d0
   11180:	   ,-- bne.s 11186 <builtIn_setScale+0x28>
   11182:	   |   moveq #1,d0
   11184:	,--|-- bra.s 111e8 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11186:	|  '-> moveq #24,d0
   11188:	|      add.l 16(sp),d0
   1118c:	|      move.l d0,-(sp)
   1118e:	|      jsr 14e64 <trimStack>
   11194:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11196:	|      movea.l 16(sp),a0
   1119a:	|      move.l 24(a0),d0
   1119e:	|      move.l d0,-(sp)
   111a0:	|      pea 1 <_start+0x1>
   111a4:	|      moveq #12,d0
   111a6:	|      add.l sp,d0
   111a8:	|      move.l d0,-(sp)
   111aa:	|      jsr 144e0 <getValueType>
   111b0:	|      lea 12(sp),sp
   111b4:	|      tst.w d0
   111b6:	|  ,-- bne.s 111bc <builtIn_setScale+0x5e>
   111b8:	|  |   moveq #1,d0
   111ba:	+--|-- bra.s 111e8 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   111bc:	|  '-> moveq #24,d0
   111be:	|      add.l 16(sp),d0
   111c2:	|      move.l d0,-(sp)
   111c4:	|      jsr 14e64 <trimStack>
   111ca:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   111cc:	|      move.l (sp),d0
   111ce:	|      move.l d0,d0
   111d0:	|      movea.w d0,a1
   111d2:	|      move.l 4(sp),d0
   111d6:	|      move.l d0,d0
   111d8:	|      movea.w d0,a0
   111da:	|      move.l a1,-(sp)
   111dc:	|      move.l a0,-(sp)
   111de:	|      jsr b950 <setScale>
   111e4:	|      addq.l #8,sp
	return BR_CONTINUE;
   111e6:	|      moveq #2,d0
}
   111e8:	'----> addq.l #8,sp
   111ea:	       rts

000111ec <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   111ec:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   111ee:	       movea.l 12(sp),a0
   111f2:	       move.l 24(a0),d0
   111f6:	       move.l d0,-(sp)
   111f8:	       pea 7 <_start+0x7>
   111fc:	       move.l sp,d0
   111fe:	       addq.l #8,d0
   11200:	       move.l d0,-(sp)
   11202:	       jsr 144e0 <getValueType>
   11208:	       lea 12(sp),sp
   1120c:	       tst.w d0
   1120e:	   ,-- bne.s 11214 <builtIn_stopCharacter+0x28>
   11210:	   |   moveq #1,d0
   11212:	,--|-- bra.s 1124c <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   11214:	|  '-> moveq #24,d0
   11216:	|      add.l 12(sp),d0
   1121a:	|      move.l d0,-(sp)
   1121c:	|      jsr 14e64 <trimStack>
   11222:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   11224:	|      move.l (sp),d0
   11226:	|      move.l d0,-(sp)
   11228:	|      jsr ba84 <stopPerson>
   1122e:	|      addq.l #4,sp
   11230:	|      movea.w d0,a0
   11232:	|      moveq #28,d0
   11234:	|      add.l 12(sp),d0
   11238:	|      move.l a0,-(sp)
   1123a:	|      pea 1 <_start+0x1>
   1123e:	|      move.l d0,-(sp)
   11240:	|      jsr 14dd2 <setVariable>
   11246:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1124a:	|      moveq #2,d0
}
   1124c:	'----> addq.l #4,sp
   1124e:	       rts

00011250 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   11250:	pea 197a3 <PutChar+0x1dd5>
   11256:	jsr 16f2c <KPrintF>
   1125c:	addq.l #4,sp
	return BR_CONTINUE;
   1125e:	moveq #2,d0
}
   11260:	rts

00011262 <builtIn_animate>:

builtIn(animate)
{
   11262:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   11264:	       movea.l 16(sp),a0
   11268:	       move.l 24(a0),d0
   1126c:	       move.l d0,-(sp)
   1126e:	       jsr 149b8 <getAnimationFromVar>
   11274:	       addq.l #4,sp
   11276:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1127a:	   ,-- bne.s 11280 <builtIn_animate+0x1e>
   1127c:	   |   moveq #1,d0
   1127e:	,--|-- bra.s 112fe <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11280:	|  '-> moveq #24,d0
   11282:	|      add.l 16(sp),d0
   11286:	|      move.l d0,-(sp)
   11288:	|      jsr 14e64 <trimStack>
   1128e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11290:	|      movea.l 16(sp),a0
   11294:	|      move.l 24(a0),d0
   11298:	|      move.l d0,-(sp)
   1129a:	|      pea 7 <_start+0x7>
   1129e:	|      move.l sp,d0
   112a0:	|      addq.l #8,d0
   112a2:	|      move.l d0,-(sp)
   112a4:	|      jsr 144e0 <getValueType>
   112aa:	|      lea 12(sp),sp
   112ae:	|      tst.w d0
   112b0:	|  ,-- bne.s 112b6 <builtIn_animate+0x54>
   112b2:	|  |   moveq #1,d0
   112b4:	+--|-- bra.s 112fe <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   112b6:	|  '-> moveq #24,d0
   112b8:	|      add.l 16(sp),d0
   112bc:	|      move.l d0,-(sp)
   112be:	|      jsr 14e64 <trimStack>
   112c4:	|      addq.l #4,sp
	animatePerson (obj, pp);
   112c6:	|      move.l (sp),d0
   112c8:	|      move.l 4(sp),-(sp)
   112cc:	|      move.l d0,-(sp)
   112ce:	|      jsr 91b4 <animatePerson>
   112d4:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   112d6:	|      move.l 4(sp),-(sp)
   112da:	|      jsr bad8 <timeForAnim>
   112e0:	|      addq.l #4,sp
   112e2:	|      move.l d0,d1
   112e4:	|      moveq #28,d0
   112e6:	|      add.l 16(sp),d0
   112ea:	|      move.l d1,-(sp)
   112ec:	|      pea 1 <_start+0x1>
   112f0:	|      move.l d0,-(sp)
   112f2:	|      jsr 14dd2 <setVariable>
   112f8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   112fc:	|      moveq #2,d0
}
   112fe:	'----> addq.l #8,sp
   11300:	       rts

00011302 <builtIn_setCostume>:

builtIn(setCostume)
{
   11302:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11304:	       movea.l 16(sp),a0
   11308:	       move.l 24(a0),d0
   1130c:	       move.l d0,-(sp)
   1130e:	       jsr 1418c <getCostumeFromVar>
   11314:	       addq.l #4,sp
   11316:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1131a:	   ,-- bne.s 11320 <builtIn_setCostume+0x1e>
   1131c:	   |   moveq #1,d0
   1131e:	,--|-- bra.s 11378 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11320:	|  '-> moveq #24,d0
   11322:	|      add.l 16(sp),d0
   11326:	|      move.l d0,-(sp)
   11328:	|      jsr 14e64 <trimStack>
   1132e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11330:	|      movea.l 16(sp),a0
   11334:	|      move.l 24(a0),d0
   11338:	|      move.l d0,-(sp)
   1133a:	|      pea 7 <_start+0x7>
   1133e:	|      move.l sp,d0
   11340:	|      addq.l #8,d0
   11342:	|      move.l d0,-(sp)
   11344:	|      jsr 144e0 <getValueType>
   1134a:	|      lea 12(sp),sp
   1134e:	|      tst.w d0
   11350:	|  ,-- bne.s 11356 <builtIn_setCostume+0x54>
   11352:	|  |   moveq #1,d0
   11354:	+--|-- bra.s 11378 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11356:	|  '-> moveq #24,d0
   11358:	|      add.l 16(sp),d0
   1135c:	|      move.l d0,-(sp)
   1135e:	|      jsr 14e64 <trimStack>
   11364:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   11366:	|      move.l (sp),d0
   11368:	|      move.l 4(sp),-(sp)
   1136c:	|      move.l d0,-(sp)
   1136e:	|      jsr 91fe <animatePersonUsingPersona>
   11374:	|      addq.l #8,sp
	return BR_CONTINUE;
   11376:	|      moveq #2,d0
}
   11378:	'----> addq.l #8,sp
   1137a:	       rts

0001137c <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   1137c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1137e:	       movea.l 16(sp),a0
   11382:	       move.l 24(a0),d0
   11386:	       move.l d0,-(sp)
   11388:	       pea 1 <_start+0x1>
   1138c:	       move.l sp,d0
   1138e:	       addq.l #8,d0
   11390:	       move.l d0,-(sp)
   11392:	       jsr 144e0 <getValueType>
   11398:	       lea 12(sp),sp
   1139c:	       tst.w d0
   1139e:	   ,-- bne.s 113a4 <builtIn_floatCharacter+0x28>
   113a0:	   |   moveq #1,d0
   113a2:	,--|-- bra.s 11418 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   113a4:	|  '-> moveq #24,d0
   113a6:	|      add.l 16(sp),d0
   113aa:	|      move.l d0,-(sp)
   113ac:	|      jsr 14e64 <trimStack>
   113b2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113b4:	|      movea.l 16(sp),a0
   113b8:	|      move.l 24(a0),d0
   113bc:	|      move.l d0,-(sp)
   113be:	|      pea 7 <_start+0x7>
   113c2:	|      moveq #12,d0
   113c4:	|      add.l sp,d0
   113c6:	|      move.l d0,-(sp)
   113c8:	|      jsr 144e0 <getValueType>
   113ce:	|      lea 12(sp),sp
   113d2:	|      tst.w d0
   113d4:	|  ,-- bne.s 113da <builtIn_floatCharacter+0x5e>
   113d6:	|  |   moveq #1,d0
   113d8:	+--|-- bra.s 11418 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   113da:	|  '-> moveq #24,d0
   113dc:	|      add.l 16(sp),d0
   113e0:	|      move.l d0,-(sp)
   113e2:	|      jsr 14e64 <trimStack>
   113e8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   113ea:	|      move.l 4(sp),d1
   113ee:	|      move.l (sp),d0
   113f0:	|      move.l d1,-(sp)
   113f2:	|      move.l d0,-(sp)
   113f4:	|      jsr a372 <floatCharacter>
   113fa:	|      addq.l #8,sp
   113fc:	|      movea.w d0,a0
   113fe:	|      moveq #28,d0
   11400:	|      add.l 16(sp),d0
   11404:	|      move.l a0,-(sp)
   11406:	|      pea 1 <_start+0x1>
   1140a:	|      move.l d0,-(sp)
   1140c:	|      jsr 14dd2 <setVariable>
   11412:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11416:	|      moveq #2,d0
}
   11418:	'----> addq.l #8,sp
   1141a:	       rts

0001141c <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   1141c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1141e:	       movea.l 16(sp),a0
   11422:	       move.l 24(a0),d0
   11426:	       move.l d0,-(sp)
   11428:	       pea 1 <_start+0x1>
   1142c:	       move.l sp,d0
   1142e:	       addq.l #8,d0
   11430:	       move.l d0,-(sp)
   11432:	       jsr 144e0 <getValueType>
   11438:	       lea 12(sp),sp
   1143c:	       tst.w d0
   1143e:	   ,-- bne.s 11444 <builtIn_setCharacterWalkSpeed+0x28>
   11440:	   |   moveq #1,d0
   11442:	,--|-- bra.s 114b8 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11444:	|  '-> moveq #24,d0
   11446:	|      add.l 16(sp),d0
   1144a:	|      move.l d0,-(sp)
   1144c:	|      jsr 14e64 <trimStack>
   11452:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11454:	|      movea.l 16(sp),a0
   11458:	|      move.l 24(a0),d0
   1145c:	|      move.l d0,-(sp)
   1145e:	|      pea 7 <_start+0x7>
   11462:	|      moveq #12,d0
   11464:	|      add.l sp,d0
   11466:	|      move.l d0,-(sp)
   11468:	|      jsr 144e0 <getValueType>
   1146e:	|      lea 12(sp),sp
   11472:	|      tst.w d0
   11474:	|  ,-- bne.s 1147a <builtIn_setCharacterWalkSpeed+0x5e>
   11476:	|  |   moveq #1,d0
   11478:	+--|-- bra.s 114b8 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   1147a:	|  '-> moveq #24,d0
   1147c:	|      add.l 16(sp),d0
   11480:	|      move.l d0,-(sp)
   11482:	|      jsr 14e64 <trimStack>
   11488:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   1148a:	|      move.l 4(sp),d1
   1148e:	|      move.l (sp),d0
   11490:	|      move.l d1,-(sp)
   11492:	|      move.l d0,-(sp)
   11494:	|      jsr b8ec <setCharacterWalkSpeed>
   1149a:	|      addq.l #8,sp
   1149c:	|      movea.w d0,a0
   1149e:	|      moveq #28,d0
   114a0:	|      add.l 16(sp),d0
   114a4:	|      move.l a0,-(sp)
   114a6:	|      pea 1 <_start+0x1>
   114aa:	|      move.l d0,-(sp)
   114ac:	|      jsr 14dd2 <setVariable>
   114b2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   114b6:	|      moveq #2,d0
}
   114b8:	'----> addq.l #8,sp
   114ba:	       rts

000114bc <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   114bc:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114be:	       movea.l 16(sp),a0
   114c2:	       move.l 24(a0),d0
   114c6:	       move.l d0,-(sp)
   114c8:	       pea 1 <_start+0x1>
   114cc:	       move.l sp,d0
   114ce:	       addq.l #8,d0
   114d0:	       move.l d0,-(sp)
   114d2:	       jsr 144e0 <getValueType>
   114d8:	       lea 12(sp),sp
   114dc:	       tst.w d0
   114de:	   ,-- bne.s 114e4 <builtIn_turnCharacter+0x28>
   114e0:	   |   moveq #1,d0
   114e2:	,--|-- bra.s 11558 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   114e4:	|  '-> moveq #24,d0
   114e6:	|      add.l 16(sp),d0
   114ea:	|      move.l d0,-(sp)
   114ec:	|      jsr 14e64 <trimStack>
   114f2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114f4:	|      movea.l 16(sp),a0
   114f8:	|      move.l 24(a0),d0
   114fc:	|      move.l d0,-(sp)
   114fe:	|      pea 7 <_start+0x7>
   11502:	|      moveq #12,d0
   11504:	|      add.l sp,d0
   11506:	|      move.l d0,-(sp)
   11508:	|      jsr 144e0 <getValueType>
   1150e:	|      lea 12(sp),sp
   11512:	|      tst.w d0
   11514:	|  ,-- bne.s 1151a <builtIn_turnCharacter+0x5e>
   11516:	|  |   moveq #1,d0
   11518:	+--|-- bra.s 11558 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   1151a:	|  '-> moveq #24,d0
   1151c:	|      add.l 16(sp),d0
   11520:	|      move.l d0,-(sp)
   11522:	|      jsr 14e64 <trimStack>
   11528:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   1152a:	|      move.l (sp),d1
   1152c:	|      move.l 4(sp),d0
   11530:	|      move.l d1,-(sp)
   11532:	|      move.l d0,-(sp)
   11534:	|      jsr bb90 <turnPersonToFace>
   1153a:	|      addq.l #8,sp
   1153c:	|      movea.w d0,a0
   1153e:	|      moveq #28,d0
   11540:	|      add.l 16(sp),d0
   11544:	|      move.l a0,-(sp)
   11546:	|      pea 1 <_start+0x1>
   1154a:	|      move.l d0,-(sp)
   1154c:	|      jsr 14dd2 <setVariable>
   11552:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11556:	|      moveq #2,d0
}
   11558:	'----> addq.l #8,sp
   1155a:	       rts

0001155c <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   1155c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1155e:	       movea.l 16(sp),a0
   11562:	       move.l 24(a0),d0
   11566:	       move.l d0,-(sp)
   11568:	       pea 1 <_start+0x1>
   1156c:	       move.l sp,d0
   1156e:	       addq.l #8,d0
   11570:	       move.l d0,-(sp)
   11572:	       jsr 144e0 <getValueType>
   11578:	       lea 12(sp),sp
   1157c:	       tst.w d0
   1157e:	   ,-- bne.s 11584 <builtIn_setCharacterExtra+0x28>
   11580:	   |   moveq #1,d0
   11582:	,--|-- bra.s 115f8 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11584:	|  '-> moveq #24,d0
   11586:	|      add.l 16(sp),d0
   1158a:	|      move.l d0,-(sp)
   1158c:	|      jsr 14e64 <trimStack>
   11592:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11594:	|      movea.l 16(sp),a0
   11598:	|      move.l 24(a0),d0
   1159c:	|      move.l d0,-(sp)
   1159e:	|      pea 7 <_start+0x7>
   115a2:	|      moveq #12,d0
   115a4:	|      add.l sp,d0
   115a6:	|      move.l d0,-(sp)
   115a8:	|      jsr 144e0 <getValueType>
   115ae:	|      lea 12(sp),sp
   115b2:	|      tst.w d0
   115b4:	|  ,-- bne.s 115ba <builtIn_setCharacterExtra+0x5e>
   115b6:	|  |   moveq #1,d0
   115b8:	+--|-- bra.s 115f8 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   115ba:	|  '-> moveq #24,d0
   115bc:	|      add.l 16(sp),d0
   115c0:	|      move.l d0,-(sp)
   115c2:	|      jsr 14e64 <trimStack>
   115c8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   115ca:	|      move.l (sp),d1
   115cc:	|      move.l 4(sp),d0
   115d0:	|      move.l d1,-(sp)
   115d2:	|      move.l d0,-(sp)
   115d4:	|      jsr b91a <setPersonExtra>
   115da:	|      addq.l #8,sp
   115dc:	|      movea.w d0,a0
   115de:	|      moveq #28,d0
   115e0:	|      add.l 16(sp),d0
   115e4:	|      move.l a0,-(sp)
   115e6:	|      pea 1 <_start+0x1>
   115ea:	|      move.l d0,-(sp)
   115ec:	|      jsr 14dd2 <setVariable>
   115f2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   115f6:	|      moveq #2,d0
}
   115f8:	'----> addq.l #8,sp
   115fa:	       rts

000115fc <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   115fc:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   115fe:	       movea.l 12(sp),a0
   11602:	       move.l 24(a0),d0
   11606:	       move.l d0,-(sp)
   11608:	       pea 7 <_start+0x7>
   1160c:	       move.l sp,d0
   1160e:	       addq.l #8,d0
   11610:	       move.l d0,-(sp)
   11612:	       jsr 144e0 <getValueType>
   11618:	       lea 12(sp),sp
   1161c:	       tst.w d0
   1161e:	   ,-- bne.s 11624 <builtIn_removeCharacter+0x28>
   11620:	   |   moveq #1,d0
   11622:	,--|-- bra.s 11642 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11624:	|  '-> moveq #24,d0
   11626:	|      add.l 12(sp),d0
   1162a:	|      move.l d0,-(sp)
   1162c:	|      jsr 14e64 <trimStack>
   11632:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11634:	|      move.l (sp),d0
   11636:	|      move.l d0,-(sp)
   11638:	|      jsr ab1a <removeOneCharacter>
   1163e:	|      addq.l #4,sp
	return BR_CONTINUE;
   11640:	|      moveq #2,d0
}
   11642:	'----> addq.l #4,sp
   11644:	       rts

00011646 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11646:	                lea -28(sp),sp
   1164a:	                move.l d2,-(sp)
   1164c:	                move.l 44(sp),d1
   11650:	                move.l 48(sp),d0
   11654:	                move.w d1,d1
   11656:	                move.w d1,6(sp)
   1165a:	                move.w d0,d0
   1165c:	                move.w d0,4(sp)
	switch (numParams) {
   11660:	                moveq #2,d0
   11662:	                cmp.l 36(sp),d0
   11666:	      ,-------- beq.w 117a8 <moveChr+0x162>
   1166a:	      |         moveq #3,d0
   1166c:	      |         cmp.l 36(sp),d0
   11670:	,-----|-------- bne.w 118dc <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11674:	|     |         movea.l 40(sp),a0
   11678:	|     |         move.l 24(a0),d0
   1167c:	|     |         move.l d0,-(sp)
   1167e:	|     |         pea 1 <_start+0x1>
   11682:	|     |         lea 20(sp),a0
   11686:	|     |         move.l a0,-(sp)
   11688:	|     |         jsr 144e0 <getValueType>
   1168e:	|     |         lea 12(sp),sp
   11692:	|     |         tst.w d0
   11694:	|     |     ,-- bne.s 1169c <moveChr+0x56>
   11696:	|     |     |   moveq #1,d0
   11698:	|  ,--|-----|-- bra.w 118ec <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1169c:	|  |  |     '-> moveq #24,d0
   1169e:	|  |  |         add.l 40(sp),d0
   116a2:	|  |  |         move.l d0,-(sp)
   116a4:	|  |  |         jsr 14e64 <trimStack>
   116aa:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   116ac:	|  |  |         movea.l 40(sp),a0
   116b0:	|  |  |         move.l 24(a0),d0
   116b4:	|  |  |         move.l d0,-(sp)
   116b6:	|  |  |         pea 1 <_start+0x1>
   116ba:	|  |  |         lea 24(sp),a0
   116be:	|  |  |         move.l a0,-(sp)
   116c0:	|  |  |         jsr 144e0 <getValueType>
   116c6:	|  |  |         lea 12(sp),sp
   116ca:	|  |  |         tst.w d0
   116cc:	|  |  |     ,-- bne.s 116d4 <moveChr+0x8e>
   116ce:	|  |  |     |   moveq #1,d0
   116d0:	|  +--|-----|-- bra.w 118ec <moveChr+0x2a6>
			trimStack (&fun -> stack);
   116d4:	|  |  |     '-> moveq #24,d0
   116d6:	|  |  |         add.l 40(sp),d0
   116da:	|  |  |         move.l d0,-(sp)
   116dc:	|  |  |         jsr 14e64 <trimStack>
   116e2:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116e4:	|  |  |         movea.l 40(sp),a0
   116e8:	|  |  |         move.l 24(a0),d0
   116ec:	|  |  |         move.l d0,-(sp)
   116ee:	|  |  |         pea 7 <_start+0x7>
   116f2:	|  |  |         lea 16(sp),a0
   116f6:	|  |  |         move.l a0,-(sp)
   116f8:	|  |  |         jsr 144e0 <getValueType>
   116fe:	|  |  |         lea 12(sp),sp
   11702:	|  |  |         tst.w d0
   11704:	|  |  |     ,-- bne.s 1170c <moveChr+0xc6>
   11706:	|  |  |     |   moveq #1,d0
   11708:	|  +--|-----|-- bra.w 118ec <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1170c:	|  |  |     '-> moveq #24,d0
   1170e:	|  |  |         add.l 40(sp),d0
   11712:	|  |  |         move.l d0,-(sp)
   11714:	|  |  |         jsr 14e64 <trimStack>
   1171a:	|  |  |         addq.l #4,sp

			if (force) {
   1171c:	|  |  |         tst.w 6(sp)
   11720:	|  |  |     ,-- beq.s 11750 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11722:	|  |  |     |   movea.l 8(sp),a0
   11726:	|  |  |     |   move.l 12(sp),d1
   1172a:	|  |  |     |   move.l 16(sp),d0
   1172e:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4da6>
   11732:	|  |  |     |   move.l 44(sp),-(sp)
   11736:	|  |  |     |   move.l a0,-(sp)
   11738:	|  |  |     |   move.l d1,-(sp)
   1173a:	|  |  |     |   move.l d0,-(sp)
   1173c:	|  |  |     |   jsr a396 <forceWalkingPerson>
   11742:	|  |  |     |   lea 20(sp),sp
   11746:	|  |  |     |   tst.w d0
   11748:	|  |  |  ,--|-- beq.s 117a2 <moveChr+0x15c>
   1174a:	|  |  |  |  |   moveq #3,d0
   1174c:	|  +--|--|--|-- bra.w 118ec <moveChr+0x2a6>
			} else if (immediate) {
   11750:	|  |  |  |  '-> tst.w 4(sp)
   11754:	|  |  |  |  ,-- beq.s 11774 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11756:	|  |  |  |  |   movea.l 8(sp),a0
   1175a:	|  |  |  |  |   move.l 12(sp),d1
   1175e:	|  |  |  |  |   move.l 16(sp),d0
   11762:	|  |  |  |  |   move.l a0,-(sp)
   11764:	|  |  |  |  |   move.l d1,-(sp)
   11766:	|  |  |  |  |   move.l d0,-(sp)
   11768:	|  |  |  |  |   jsr a69e <jumpPerson>
   1176e:	|  |  |  |  |   lea 12(sp),sp
   11772:	|  |  |  +--|-- bra.s 117a2 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11774:	|  |  |  |  '-> movea.l 8(sp),a0
   11778:	|  |  |  |      move.l 12(sp),d1
   1177c:	|  |  |  |      move.l 16(sp),d0
   11780:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4da6>
   11784:	|  |  |  |      move.l 44(sp),-(sp)
   11788:	|  |  |  |      move.l a0,-(sp)
   1178a:	|  |  |  |      move.l d1,-(sp)
   1178c:	|  |  |  |      move.l d0,-(sp)
   1178e:	|  |  |  |      jsr a86e <makeWalkingPerson>
   11794:	|  |  |  |      lea 20(sp),sp
   11798:	|  |  |  |      tst.w d0
   1179a:	|  |  |  +----- beq.s 117a2 <moveChr+0x15c>
   1179c:	|  |  |  |      moveq #3,d0
   1179e:	|  +--|--|----- bra.w 118ec <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   117a2:	|  |  |  '----> moveq #2,d0
   117a4:	|  +--|-------- bra.w 118ec <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117a8:	|  |  '-------> movea.l 40(sp),a0
   117ac:	|  |            move.l 24(a0),d0
   117b0:	|  |            move.l d0,-(sp)
   117b2:	|  |            pea 7 <_start+0x7>
   117b6:	|  |            moveq #32,d0
   117b8:	|  |            add.l sp,d0
   117ba:	|  |            move.l d0,-(sp)
   117bc:	|  |            jsr 144e0 <getValueType>
   117c2:	|  |            lea 12(sp),sp
   117c6:	|  |            tst.w d0
   117c8:	|  |        ,-- bne.s 117d0 <moveChr+0x18a>
   117ca:	|  |        |   moveq #1,d0
   117cc:	|  +--------|-- bra.w 118ec <moveChr+0x2a6>
			trimStack (&fun -> stack);
   117d0:	|  |        '-> moveq #24,d0
   117d2:	|  |            add.l 40(sp),d0
   117d6:	|  |            move.l d0,-(sp)
   117d8:	|  |            jsr 14e64 <trimStack>
   117de:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117e0:	|  |            movea.l 40(sp),a0
   117e4:	|  |            move.l 24(a0),d0
   117e8:	|  |            move.l d0,-(sp)
   117ea:	|  |            pea 7 <_start+0x7>
   117ee:	|  |            lea 28(sp),a0
   117f2:	|  |            move.l a0,-(sp)
   117f4:	|  |            jsr 144e0 <getValueType>
   117fa:	|  |            lea 12(sp),sp
   117fe:	|  |            tst.w d0
   11800:	|  |        ,-- bne.s 11808 <moveChr+0x1c2>
   11802:	|  |        |   moveq #1,d0
   11804:	|  +--------|-- bra.w 118ec <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11808:	|  |        '-> moveq #24,d0
   1180a:	|  |            add.l 40(sp),d0
   1180e:	|  |            move.l d0,-(sp)
   11810:	|  |            jsr 14e64 <trimStack>
   11816:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11818:	|  |            move.l 24(sp),d0
   1181c:	|  |            move.l d0,-(sp)
   1181e:	|  |            jsr 1572a <getRegionForObject>
   11824:	|  |            addq.l #4,sp
   11826:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   1182a:	|  |        ,-- bne.s 11832 <moveChr+0x1ec>
   1182c:	|  |        |   moveq #2,d0
   1182e:	|  +--------|-- bra.w 118ec <moveChr+0x2a6>

			if (force)
   11832:	|  |        '-> tst.w 6(sp)
   11836:	|  |        ,-- beq.s 11872 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11838:	|  |        |   movea.l 28(sp),a0
   1183c:	|  |        |   move.l 24(a0),d2
   11840:	|  |        |   movea.l 20(sp),a1
   11844:	|  |        |   movea.l 28(sp),a0
   11848:	|  |        |   move.l 20(a0),d1
   1184c:	|  |        |   movea.l 28(sp),a0
   11850:	|  |        |   move.l 16(a0),d0
   11854:	|  |        |   move.l d2,-(sp)
   11856:	|  |        |   move.l 44(sp),-(sp)
   1185a:	|  |        |   move.l a1,-(sp)
   1185c:	|  |        |   move.l d1,-(sp)
   1185e:	|  |        |   move.l d0,-(sp)
   11860:	|  |        |   jsr a396 <forceWalkingPerson>
   11866:	|  |        |   lea 20(sp),sp
   1186a:	|  |        |   tst.w d0
   1186c:	|  |     ,--|-- beq.s 118d8 <moveChr+0x292>
   1186e:	|  |     |  |   moveq #3,d0
   11870:	|  +-----|--|-- bra.s 118ec <moveChr+0x2a6>
			}
			else if (immediate)
   11872:	|  |     |  '-> tst.w 4(sp)
   11876:	|  |     |  ,-- beq.s 1189e <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11878:	|  |     |  |   movea.l 20(sp),a1
   1187c:	|  |     |  |   movea.l 28(sp),a0
   11880:	|  |     |  |   move.l 20(a0),d1
   11884:	|  |     |  |   movea.l 28(sp),a0
   11888:	|  |     |  |   move.l 16(a0),d0
   1188c:	|  |     |  |   move.l a1,-(sp)
   1188e:	|  |     |  |   move.l d1,-(sp)
   11890:	|  |     |  |   move.l d0,-(sp)
   11892:	|  |     |  |   jsr a69e <jumpPerson>
   11898:	|  |     |  |   lea 12(sp),sp
   1189c:	|  |     +--|-- bra.s 118d8 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   1189e:	|  |     |  '-> movea.l 28(sp),a0
   118a2:	|  |     |      move.l 24(a0),d2
   118a6:	|  |     |      movea.l 20(sp),a1
   118aa:	|  |     |      movea.l 28(sp),a0
   118ae:	|  |     |      move.l 20(a0),d1
   118b2:	|  |     |      movea.l 28(sp),a0
   118b6:	|  |     |      move.l 16(a0),d0
   118ba:	|  |     |      move.l d2,-(sp)
   118bc:	|  |     |      move.l 44(sp),-(sp)
   118c0:	|  |     |      move.l a1,-(sp)
   118c2:	|  |     |      move.l d1,-(sp)
   118c4:	|  |     |      move.l d0,-(sp)
   118c6:	|  |     |      jsr a86e <makeWalkingPerson>
   118cc:	|  |     |      lea 20(sp),sp
   118d0:	|  |     |      tst.w d0
   118d2:	|  |     +----- beq.s 118d8 <moveChr+0x292>
   118d4:	|  |     |      moveq #3,d0
   118d6:	|  +-----|----- bra.s 118ec <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   118d8:	|  |     '----> moveq #2,d0
   118da:	|  +----------- bra.s 118ec <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   118dc:	'--|----------> pea 197c1 <PutChar+0x1df3>
   118e2:	   |            jsr 16f2c <KPrintF>
   118e8:	   |            addq.l #4,sp
			return BR_ERROR;
   118ea:	   |            moveq #1,d0
	}
}
   118ec:	   '----------> move.l (sp)+,d2
   118ee:	                lea 28(sp),sp
   118f2:	                rts

000118f4 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   118f4:	clr.l -(sp)
   118f6:	clr.l -(sp)
   118f8:	move.l 16(sp),-(sp)
   118fc:	move.l 16(sp),-(sp)
   11900:	jsr 11646 <moveChr>
   11906:	lea 16(sp),sp
}
   1190a:	rts

0001190c <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   1190c:	clr.l -(sp)
   1190e:	pea 1 <_start+0x1>
   11912:	move.l 16(sp),-(sp)
   11916:	move.l 16(sp),-(sp)
   1191a:	jsr 11646 <moveChr>
   11920:	lea 16(sp),sp
}
   11924:	rts

00011926 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11926:	pea 1 <_start+0x1>
   1192a:	clr.l -(sp)
   1192c:	move.l 16(sp),-(sp)
   11930:	move.l 16(sp),-(sp)
   11934:	jsr 11646 <moveChr>
   1193a:	lea 16(sp),sp
}
   1193e:	rts

00011940 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11940:	jsr 75a4 <clearStatusBar>
	return BR_CONTINUE;
   11946:	moveq #2,d0
}
   11948:	rts

0001194a <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   1194a:	jsr 764c <killLastStatus>
	return BR_CONTINUE;
   11950:	moveq #2,d0
}
   11952:	rts

00011954 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11954:	jsr 753a <addStatusBar>
	return BR_CONTINUE;
   1195a:	moveq #2,d0
}
   1195c:	rts

0001195e <builtIn_statusText>:

builtIn(statusText)
{
   1195e:	       subq.l #8,sp
   11960:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11962:	       movea.l 20(sp),a0
   11966:	       move.l 24(a0),d0
   1196a:	       move.l d0,-(sp)
   1196c:	       jsr 14ab6 <getTextFromAnyVar>
   11972:	       addq.l #4,sp
   11974:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11978:	   ,-- bne.s 1197e <builtIn_statusText+0x20>
   1197a:	   |   moveq #1,d0
   1197c:	,--|-- bra.s 119b2 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   1197e:	|  '-> moveq #24,d0
   11980:	|      add.l 20(sp),d0
   11984:	|      move.l d0,-(sp)
   11986:	|      jsr 14e64 <trimStack>
   1198c:	|      addq.l #4,sp
	setStatusBar(newText);
   1198e:	|      move.l 8(sp),-(sp)
   11992:	|      jsr 78cc <setStatusBar>
   11998:	|      addq.l #4,sp
	FreeVec(newText);
   1199a:	|      move.l 8(sp),4(sp)
   119a0:	|      move.l 1a7a4 <SysBase>,d0
   119a6:	|      movea.l d0,a6
   119a8:	|      movea.l 4(sp),a1
   119ac:	|      jsr -690(a6)
	return BR_CONTINUE;
   119b0:	|      moveq #2,d0
}
   119b2:	'----> movea.l (sp)+,a6
   119b4:	       addq.l #8,sp
   119b6:	       rts

000119b8 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   119b8:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   119ba:	       movea.l 12(sp),a0
   119be:	       move.l 24(a0),d0
   119c2:	       move.l d0,-(sp)
   119c4:	       pea 1 <_start+0x1>
   119c8:	       move.l sp,d0
   119ca:	       addq.l #8,d0
   119cc:	       move.l d0,-(sp)
   119ce:	       jsr 144e0 <getValueType>
   119d4:	       lea 12(sp),sp
   119d8:	       tst.w d0
   119da:	   ,-- bne.s 119e0 <builtIn_lightStatus+0x28>
   119dc:	   |   moveq #1,d0
   119de:	,--|-- bra.s 119fe <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   119e0:	|  '-> moveq #24,d0
   119e2:	|      add.l 12(sp),d0
   119e6:	|      move.l d0,-(sp)
   119e8:	|      jsr 14e64 <trimStack>
   119ee:	|      addq.l #4,sp
	setLitStatus (val);
   119f0:	|      move.l (sp),d0
   119f2:	|      move.l d0,-(sp)
   119f4:	|      jsr 78bc <setLitStatus>
   119fa:	|      addq.l #4,sp
	return BR_CONTINUE;
   119fc:	|      moveq #2,d0
}
   119fe:	'----> addq.l #4,sp
   11a00:	       rts

00011a02 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11a02:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a04:	       movea.l 16(sp),a0
   11a08:	       move.l 24(a0),d0
   11a0c:	       move.l d0,-(sp)
   11a0e:	       pea 1 <_start+0x1>
   11a12:	       move.l sp,d0
   11a14:	       addq.l #8,d0
   11a16:	       move.l d0,-(sp)
   11a18:	       jsr 144e0 <getValueType>
   11a1e:	       lea 12(sp),sp
   11a22:	       tst.w d0
   11a24:	   ,-- bne.s 11a2a <builtIn_positionStatus+0x28>
   11a26:	   |   moveq #1,d0
   11a28:	,--|-- bra.s 11a84 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11a2a:	|  '-> moveq #24,d0
   11a2c:	|      add.l 16(sp),d0
   11a30:	|      move.l d0,-(sp)
   11a32:	|      jsr 14e64 <trimStack>
   11a38:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a3a:	|      movea.l 16(sp),a0
   11a3e:	|      move.l 24(a0),d0
   11a42:	|      move.l d0,-(sp)
   11a44:	|      pea 1 <_start+0x1>
   11a48:	|      moveq #12,d0
   11a4a:	|      add.l sp,d0
   11a4c:	|      move.l d0,-(sp)
   11a4e:	|      jsr 144e0 <getValueType>
   11a54:	|      lea 12(sp),sp
   11a58:	|      tst.w d0
   11a5a:	|  ,-- bne.s 11a60 <builtIn_positionStatus+0x5e>
   11a5c:	|  |   moveq #1,d0
   11a5e:	+--|-- bra.s 11a84 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11a60:	|  '-> moveq #24,d0
   11a62:	|      add.l 16(sp),d0
   11a66:	|      move.l d0,-(sp)
   11a68:	|      jsr 14e64 <trimStack>
   11a6e:	|      addq.l #4,sp
	positionStatus (x, y);
   11a70:	|      move.l (sp),d1
   11a72:	|      move.l 4(sp),d0
   11a76:	|      move.l d1,-(sp)
   11a78:	|      move.l d0,-(sp)
   11a7a:	|      jsr 76ae <positionStatus>
   11a80:	|      addq.l #8,sp
	return BR_CONTINUE;
   11a82:	|      moveq #2,d0
}
   11a84:	'----> addq.l #8,sp
   11a86:	       rts

00011a88 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11a88:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a8a:	       movea.l 12(sp),a0
   11a8e:	       move.l 24(a0),d0
   11a92:	       move.l d0,-(sp)
   11a94:	       pea 1 <_start+0x1>
   11a98:	       move.l sp,d0
   11a9a:	       addq.l #8,d0
   11a9c:	       move.l d0,-(sp)
   11a9e:	       jsr 144e0 <getValueType>
   11aa4:	       lea 12(sp),sp
   11aa8:	       tst.w d0
   11aaa:	   ,-- bne.s 11ab0 <builtIn_alignStatus+0x28>
   11aac:	   |   moveq #1,d0
   11aae:	,--|-- bra.s 11ad0 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11ab0:	|  '-> moveq #24,d0
   11ab2:	|      add.l 12(sp),d0
   11ab6:	|      move.l d0,-(sp)
   11ab8:	|      jsr 14e64 <trimStack>
   11abe:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11ac0:	|      move.l (sp),d0
   11ac2:	|      movea.l 1a12a <nowStatus>,a0
   11ac8:	|      move.l d0,d0
   11aca:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11ace:	|      moveq #2,d0
}
   11ad0:	'----> addq.l #4,sp
   11ad2:	       rts

00011ad4 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11ad4:	             tst.l 4(sp)
   11ad8:	      ,----- beq.s 11ae4 <getFuncNumForCallback+0x10>
   11ada:	      |      moveq #1,d0
   11adc:	      |      cmp.l 4(sp),d0
   11ae0:	      |  ,-- beq.s 11aea <getFuncNumForCallback+0x16>
   11ae2:	   ,--|--|-- bra.s 11b20 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11ae4:	   |  '--|-> clr.l 12(sp)
			break;
   11ae8:	,--|-----|-- bra.s 11b32 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11aea:	|  |     '-> movea.l 8(sp),a0
   11aee:	|  |         move.l 24(a0),d0
   11af2:	|  |         move.l d0,-(sp)
   11af4:	|  |         pea 2 <_start+0x2>
   11af8:	|  |         move.l 20(sp),-(sp)
   11afc:	|  |         jsr 144e0 <getValueType>
   11b02:	|  |         lea 12(sp),sp
   11b06:	|  |         tst.w d0
   11b08:	|  |     ,-- bne.s 11b0e <getFuncNumForCallback+0x3a>
   11b0a:	|  |     |   clr.w d0
   11b0c:	|  |  ,--|-- bra.s 11b34 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11b0e:	|  |  |  '-> moveq #24,d0
   11b10:	|  |  |      add.l 8(sp),d0
   11b14:	|  |  |      move.l d0,-(sp)
   11b16:	|  |  |      jsr 14e64 <trimStack>
   11b1c:	|  |  |      addq.l #4,sp
			break;
   11b1e:	+--|--|----- bra.s 11b32 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11b20:	|  '--|----> pea 197f7 <PutChar+0x1e29>
   11b26:	|     |      jsr 16f2c <KPrintF>
   11b2c:	|     |      addq.l #4,sp
			return FALSE;
   11b2e:	|     |      clr.w d0
   11b30:	|     +----- bra.s 11b34 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11b32:	'-----|----> moveq #1,d0
}
   11b34:	      '----> rts

00011b36 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11b36:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11b38:	       move.l sp,d0
   11b3a:	       move.l d0,-(sp)
   11b3c:	       move.l 16(sp),-(sp)
   11b40:	       move.l 16(sp),-(sp)
   11b44:	       jsr 11ad4 <getFuncNumForCallback>
   11b4a:	       lea 12(sp),sp
   11b4e:	       tst.w d0
   11b50:	,----- beq.s 11b60 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11b52:	|      movea.l 1a11c <currentEvents>,a0
   11b58:	|      move.l (sp),d0
   11b5a:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11b5c:	|      moveq #2,d0
   11b5e:	|  ,-- bra.s 11b62 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11b60:	'--|-> moveq #1,d0
}
   11b62:	   '-> addq.l #4,sp
   11b64:	       rts

00011b66 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11b66:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11b68:	       move.l sp,d0
   11b6a:	       move.l d0,-(sp)
   11b6c:	       move.l 16(sp),-(sp)
   11b70:	       move.l 16(sp),-(sp)
   11b74:	       jsr 11ad4 <getFuncNumForCallback>
   11b7a:	       lea 12(sp),sp
   11b7e:	       tst.w d0
   11b80:	,----- beq.s 11b92 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11b82:	|      movea.l 1a11c <currentEvents>,a0
   11b88:	|      move.l (sp),d0
   11b8a:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11b8e:	|      moveq #2,d0
   11b90:	|  ,-- bra.s 11b94 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11b92:	'--|-> moveq #1,d0
}
   11b94:	   '-> addq.l #4,sp
   11b96:	       rts

00011b98 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11b98:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11b9a:	       move.l sp,d0
   11b9c:	       move.l d0,-(sp)
   11b9e:	       move.l 16(sp),-(sp)
   11ba2:	       move.l 16(sp),-(sp)
   11ba6:	       jsr 11ad4 <getFuncNumForCallback>
   11bac:	       lea 12(sp),sp
   11bb0:	       tst.w d0
   11bb2:	,----- beq.s 11bc4 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11bb4:	|      movea.l 1a11c <currentEvents>,a0
   11bba:	|      move.l (sp),d0
   11bbc:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11bc0:	|      moveq #2,d0
   11bc2:	|  ,-- bra.s 11bc6 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11bc4:	'--|-> moveq #1,d0
}
   11bc6:	   '-> addq.l #4,sp
   11bc8:	       rts

00011bca <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11bca:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11bcc:	       move.l sp,d0
   11bce:	       move.l d0,-(sp)
   11bd0:	       move.l 16(sp),-(sp)
   11bd4:	       move.l 16(sp),-(sp)
   11bd8:	       jsr 11ad4 <getFuncNumForCallback>
   11bde:	       lea 12(sp),sp
   11be2:	       tst.w d0
   11be4:	,----- beq.s 11bf6 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11be6:	|      movea.l 1a11c <currentEvents>,a0
   11bec:	|      move.l (sp),d0
   11bee:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11bf2:	|      moveq #2,d0
   11bf4:	|  ,-- bra.s 11bf8 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11bf6:	'--|-> moveq #1,d0
}
   11bf8:	   '-> addq.l #4,sp
   11bfa:	       rts

00011bfc <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11bfc:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11bfe:	       move.l sp,d0
   11c00:	       move.l d0,-(sp)
   11c02:	       move.l 16(sp),-(sp)
   11c06:	       move.l 16(sp),-(sp)
   11c0a:	       jsr 11ad4 <getFuncNumForCallback>
   11c10:	       lea 12(sp),sp
   11c14:	       tst.w d0
   11c16:	,----- beq.s 11c28 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11c18:	|      movea.l 1a11c <currentEvents>,a0
   11c1e:	|      move.l (sp),d0
   11c20:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11c24:	|      moveq #2,d0
   11c26:	|  ,-- bra.s 11c2a <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   11c28:	'--|-> moveq #1,d0
}
   11c2a:	   '-> addq.l #4,sp
   11c2c:	       rts

00011c2e <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11c2e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c30:	       move.l sp,d0
   11c32:	       move.l d0,-(sp)
   11c34:	       move.l 16(sp),-(sp)
   11c38:	       move.l 16(sp),-(sp)
   11c3c:	       jsr 11ad4 <getFuncNumForCallback>
   11c42:	       lea 12(sp),sp
   11c46:	       tst.w d0
   11c48:	,----- beq.s 11c5a <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11c4a:	|      movea.l 1a11c <currentEvents>,a0
   11c50:	|      move.l (sp),d0
   11c52:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11c56:	|      moveq #2,d0
   11c58:	|  ,-- bra.s 11c5c <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11c5a:	'--|-> moveq #1,d0
}
   11c5c:	   '-> addq.l #4,sp
   11c5e:	       rts

00011c60 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11c60:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c62:	       move.l sp,d0
   11c64:	       move.l d0,-(sp)
   11c66:	       move.l 16(sp),-(sp)
   11c6a:	       move.l 16(sp),-(sp)
   11c6e:	       jsr 11ad4 <getFuncNumForCallback>
   11c74:	       lea 12(sp),sp
   11c78:	       tst.w d0
   11c7a:	,----- beq.s 11c8c <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11c7c:	|      movea.l 1a11c <currentEvents>,a0
   11c82:	|      move.l (sp),d0
   11c84:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11c88:	|      moveq #2,d0
   11c8a:	|  ,-- bra.s 11c8e <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11c8c:	'--|-> moveq #1,d0
}
   11c8e:	   '-> addq.l #4,sp
   11c90:	       rts

00011c92 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11c92:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c94:	          move.l sp,d0
   11c96:	          move.l d0,-(sp)
   11c98:	          move.l 16(sp),-(sp)
   11c9c:	          move.l 16(sp),-(sp)
   11ca0:	          jsr 11ad4 <getFuncNumForCallback>
   11ca6:	          lea 12(sp),sp
   11caa:	          tst.w d0
   11cac:	,-------- beq.s 11cd8 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11cae:	|         move.l 1a774 <noStack>,d1
   11cb4:	|         move.l (sp),d0
   11cb6:	|         pea 1 <_start+0x1>
   11cba:	|         move.l d1,-(sp)
   11cbc:	|         clr.l -(sp)
   11cbe:	|         clr.l -(sp)
   11cc0:	|         move.l d0,-(sp)
   11cc2:	|         jsr 6778 <startNewFunctionNum>
   11cc8:	|         lea 20(sp),sp
   11ccc:	|         tst.l d0
   11cce:	|     ,-- bne.s 11cd4 <builtIn_spawnSub+0x42>
   11cd0:	|     |   moveq #1,d0
   11cd2:	|  ,--|-- bra.s 11cda <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11cd4:	|  |  '-> moveq #2,d0
   11cd6:	|  +----- bra.s 11cda <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11cd8:	'--|----> moveq #1,d0
}
   11cda:	   '----> addq.l #4,sp
   11cdc:	          rts

00011cde <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11cde:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ce0:	          move.l sp,d0
   11ce2:	          addq.l #4,d0
   11ce4:	          move.l d0,-(sp)
   11ce6:	          move.l 20(sp),-(sp)
   11cea:	          move.l 20(sp),-(sp)
   11cee:	          jsr 11ad4 <getFuncNumForCallback>
   11cf4:	          lea 12(sp),sp
   11cf8:	          tst.w d0
   11cfa:	,-------- beq.s 11d30 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   11cfc:	|         move.l 4(sp),d1
   11d00:	|         move.l sp,d0
   11d02:	|         addq.l #2,d0
   11d04:	|         move.l d0,-(sp)
   11d06:	|         move.l 20(sp),-(sp)
   11d0a:	|         move.l d1,-(sp)
   11d0c:	|         jsr 449e <cancelAFunction>
   11d12:	|         lea 12(sp),sp
		if (killedMyself) {
   11d16:	|         move.w 2(sp),d0
   11d1a:	|  ,----- beq.s 11d2c <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   11d1c:	|  |      move.l 16(sp),-(sp)
   11d20:	|  |      jsr 43bc <abortFunction>
   11d26:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   11d28:	|  |      moveq #5,d0
   11d2a:	|  |  ,-- bra.s 11d32 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   11d2c:	|  '--|-> moveq #2,d0
   11d2e:	|     +-- bra.s 11d32 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   11d30:	'-----|-> moveq #1,d0
}
   11d32:	      '-> addq.l #8,sp
   11d34:	          rts

00011d36 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   11d36:	       subq.l #8,sp
   11d38:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   11d3a:	       movea.l 20(sp),a0
   11d3e:	       move.l 24(a0),d0
   11d42:	       move.l d0,-(sp)
   11d44:	       jsr 14ab6 <getTextFromAnyVar>
   11d4a:	       addq.l #4,sp
   11d4c:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   11d50:	   ,-- bne.s 11d56 <builtIn_stringWidth+0x20>
   11d52:	   |   moveq #1,d0
   11d54:	,--|-- bra.s 11da4 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   11d56:	|  '-> moveq #24,d0
   11d58:	|      add.l 20(sp),d0
   11d5c:	|      move.l d0,-(sp)
   11d5e:	|      jsr 14e64 <trimStack>
   11d64:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   11d66:	|      move.l 8(sp),-(sp)
   11d6a:	|      jsr 155ca <stringWidth>
   11d70:	|      addq.l #4,sp
   11d72:	|      move.l d0,d1
   11d74:	|      moveq #28,d0
   11d76:	|      add.l 20(sp),d0
   11d7a:	|      move.l d1,-(sp)
   11d7c:	|      pea 1 <_start+0x1>
   11d80:	|      move.l d0,-(sp)
   11d82:	|      jsr 14dd2 <setVariable>
   11d88:	|      lea 12(sp),sp
	FreeVec(theText);
   11d8c:	|      move.l 8(sp),4(sp)
   11d92:	|      move.l 1a7a4 <SysBase>,d0
   11d98:	|      movea.l d0,a6
   11d9a:	|      movea.l 4(sp),a1
   11d9e:	|      jsr -690(a6)
	return BR_CONTINUE;
   11da2:	|      moveq #2,d0
}
   11da4:	'----> movea.l (sp)+,a6
   11da6:	       addq.l #8,sp
   11da8:	       rts

00011daa <builtIn_hardScroll>:

builtIn(hardScroll)
{
   11daa:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11dac:	       movea.l 12(sp),a0
   11db0:	       move.l 24(a0),d0
   11db4:	       move.l d0,-(sp)
   11db6:	       pea 1 <_start+0x1>
   11dba:	       move.l sp,d0
   11dbc:	       addq.l #8,d0
   11dbe:	       move.l d0,-(sp)
   11dc0:	       jsr 144e0 <getValueType>
   11dc6:	       lea 12(sp),sp
   11dca:	       tst.w d0
   11dcc:	   ,-- bne.s 11dd2 <builtIn_hardScroll+0x28>
   11dce:	   |   moveq #1,d0
   11dd0:	,--|-- bra.s 11df0 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   11dd2:	|  '-> moveq #24,d0
   11dd4:	|      add.l 12(sp),d0
   11dd8:	|      move.l d0,-(sp)
   11dda:	|      jsr 14e64 <trimStack>
   11de0:	|      addq.l #4,sp
	hardScroll (v);
   11de2:	|      move.l (sp),d0
   11de4:	|      move.l d0,-(sp)
   11de6:	|      jsr cf98 <hardScroll>
   11dec:	|      addq.l #4,sp
	return BR_CONTINUE;
   11dee:	|      moveq #2,d0
}
   11df0:	'----> addq.l #4,sp
   11df2:	       rts

00011df4 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   11df4:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11df6:	       movea.l 12(sp),a0
   11dfa:	       move.l 24(a0),d0
   11dfe:	       move.l d0,-(sp)
   11e00:	       pea 7 <_start+0x7>
   11e04:	       move.l sp,d0
   11e06:	       addq.l #8,d0
   11e08:	       move.l d0,-(sp)
   11e0a:	       jsr 144e0 <getValueType>
   11e10:	       lea 12(sp),sp
   11e14:	       tst.w d0
   11e16:	   ,-- bne.s 11e1c <builtIn_isScreenRegion+0x28>
   11e18:	   |   moveq #1,d0
   11e1a:	,--|-- bra.s 11e5c <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   11e1c:	|  '-> moveq #24,d0
   11e1e:	|      add.l 12(sp),d0
   11e22:	|      move.l d0,-(sp)
   11e24:	|      jsr 14e64 <trimStack>
   11e2a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   11e2c:	|      move.l (sp),d0
   11e2e:	|      move.l d0,-(sp)
   11e30:	|      jsr 1572a <getRegionForObject>
   11e36:	|      addq.l #4,sp
   11e38:	|      tst.l d0
   11e3a:	|      sne d0
   11e3c:	|      neg.b d0
   11e3e:	|      moveq #0,d1
   11e40:	|      move.b d0,d1
   11e42:	|      moveq #28,d0
   11e44:	|      add.l 12(sp),d0
   11e48:	|      move.l d1,-(sp)
   11e4a:	|      pea 1 <_start+0x1>
   11e4e:	|      move.l d0,-(sp)
   11e50:	|      jsr 14dd2 <setVariable>
   11e56:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11e5a:	|      moveq #2,d0
}
   11e5c:	'----> addq.l #4,sp
   11e5e:	       rts

00011e60 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   11e60:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e62:	       movea.l 12(sp),a0
   11e66:	       move.l 24(a0),d0
   11e6a:	       move.l d0,-(sp)
   11e6c:	       pea 1 <_start+0x1>
   11e70:	       move.l sp,d0
   11e72:	       addq.l #8,d0
   11e74:	       move.l d0,-(sp)
   11e76:	       jsr 144e0 <getValueType>
   11e7c:	       lea 12(sp),sp
   11e80:	       tst.w d0
   11e82:	   ,-- bne.s 11e88 <builtIn_setSpeechSpeed+0x28>
   11e84:	   |   moveq #1,d0
   11e86:	,--|-- bra.s 11ed6 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   11e88:	|  '-> moveq #24,d0
   11e8a:	|      add.l 12(sp),d0
   11e8e:	|      move.l d0,-(sp)
   11e90:	|      jsr 14e64 <trimStack>
   11e96:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   11e98:	|      move.l (sp),d0
   11e9a:	|      move.l d0,-(sp)
   11e9c:	|      jsr 1735e <__floatsisf>
   11ea2:	|      addq.l #4,sp
   11ea4:	|      move.l #1008981770,-(sp)
   11eaa:	|      move.l d0,-(sp)
   11eac:	|      jsr 17410 <__mulsf3>
   11eb2:	|      addq.l #8,sp
   11eb4:	|      move.l d0,1a12e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   11eba:	|      moveq #28,d0
   11ebc:	|      add.l 12(sp),d0
   11ec0:	|      pea 1 <_start+0x1>
   11ec4:	|      pea 1 <_start+0x1>
   11ec8:	|      move.l d0,-(sp)
   11eca:	|      jsr 14dd2 <setVariable>
   11ed0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11ed4:	|      moveq #2,d0
}
   11ed6:	'----> addq.l #4,sp
   11ed8:	       rts

00011eda <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   11eda:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11edc:	       movea.l 12(sp),a0
   11ee0:	       move.l 24(a0),d0
   11ee4:	       move.l d0,-(sp)
   11ee6:	       pea 1 <_start+0x1>
   11eea:	       move.l sp,d0
   11eec:	       addq.l #8,d0
   11eee:	       move.l d0,-(sp)
   11ef0:	       jsr 144e0 <getValueType>
   11ef6:	       lea 12(sp),sp
   11efa:	       tst.w d0
   11efc:	   ,-- bne.s 11f02 <builtIn_setFontSpacing+0x28>
   11efe:	   |   moveq #1,d0
   11f00:	,--|-- bra.s 11f38 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   11f02:	|  '-> move.l (sp),d0
   11f04:	|      move.l d0,d0
   11f06:	|      move.w d0,1a6a8 <fontSpace>
	trimStack (&fun -> stack);
   11f0c:	|      moveq #24,d0
   11f0e:	|      add.l 12(sp),d0
   11f12:	|      move.l d0,-(sp)
   11f14:	|      jsr 14e64 <trimStack>
   11f1a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11f1c:	|      moveq #28,d0
   11f1e:	|      add.l 12(sp),d0
   11f22:	|      pea 1 <_start+0x1>
   11f26:	|      pea 1 <_start+0x1>
   11f2a:	|      move.l d0,-(sp)
   11f2c:	|      jsr 14dd2 <setVariable>
   11f32:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11f36:	|      moveq #2,d0
}
   11f38:	'----> addq.l #4,sp
   11f3a:	       rts

00011f3c <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   11f3c:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f3e:	          movea.l 12(sp),a0
   11f42:	          move.l 24(a0),d0
   11f46:	          move.l d0,-(sp)
   11f48:	          pea 1 <_start+0x1>
   11f4c:	          move.l sp,d0
   11f4e:	          addq.l #8,d0
   11f50:	          move.l d0,-(sp)
   11f52:	          jsr 144e0 <getValueType>
   11f58:	          lea 12(sp),sp
   11f5c:	          tst.w d0
   11f5e:	      ,-- bne.s 11f64 <builtIn_transitionLevel+0x28>
   11f60:	      |   moveq #1,d0
   11f62:	,-----|-- bra.s 11fb8 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   11f64:	|     '-> moveq #24,d0
   11f66:	|         add.l 12(sp),d0
   11f6a:	|         move.l d0,-(sp)
   11f6c:	|         jsr 14e64 <trimStack>
   11f72:	|         addq.l #4,sp

	if (number < 0)
   11f74:	|         move.l (sp),d0
   11f76:	|     ,-- bpl.s 11f80 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   11f78:	|     |   clr.b 1a11a <brightnessLevel>
   11f7e:	|  ,--|-- bra.s 11f9c <builtIn_transitionLevel+0x60>
	else if (number > 255)
   11f80:	|  |  '-> move.l (sp),d0
   11f82:	|  |      cmpi.l #255,d0
   11f88:	|  |  ,-- ble.s 11f92 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   11f8a:	|  |  |   st 1a11a <brightnessLevel>
   11f90:	|  +--|-- bra.s 11f9c <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   11f92:	|  |  '-> move.l (sp),d0
   11f94:	|  |      move.l d0,d0
   11f96:	|  |      move.b d0,1a11a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   11f9c:	|  '----> moveq #28,d0
   11f9e:	|         add.l 12(sp),d0
   11fa2:	|         pea 1 <_start+0x1>
   11fa6:	|         pea 1 <_start+0x1>
   11faa:	|         move.l d0,-(sp)
   11fac:	|         jsr 14dd2 <setVariable>
   11fb2:	|         lea 12(sp),sp
	return BR_CONTINUE;
   11fb6:	|         moveq #2,d0
}
   11fb8:	'-------> addq.l #4,sp
   11fba:	          rts

00011fbc <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   11fbc:	movea.l 8(sp),a0
   11fc0:	move.l 24(a0),d0
   11fc4:	move.l d0,-(sp)
   11fc6:	jsr 14a20 <getBoolean>
   11fcc:	addq.l #4,sp
   11fce:	move.w d0,1a744 <captureAllKeys>
	trimStack (&fun -> stack);
   11fd4:	moveq #24,d0
   11fd6:	add.l 8(sp),d0
   11fda:	move.l d0,-(sp)
   11fdc:	jsr 14e64 <trimStack>
   11fe2:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   11fe4:	move.w 1a744 <captureAllKeys>,d0
   11fea:	movea.w d0,a0
   11fec:	moveq #28,d0
   11fee:	add.l 8(sp),d0
   11ff2:	move.l a0,-(sp)
   11ff4:	pea 1 <_start+0x1>
   11ff8:	move.l d0,-(sp)
   11ffa:	jsr 14dd2 <setVariable>
   12000:	lea 12(sp),sp
	return BR_CONTINUE;
   12004:	moveq #2,d0
}
   12006:	rts

00012008 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12008:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1200c:	       movea.l 20(sp),a0
   12010:	       move.l 24(a0),d0
   12014:	       move.l d0,-(sp)
   12016:	       pea 1 <_start+0x1>
   1201a:	       moveq #12,d0
   1201c:	       add.l sp,d0
   1201e:	       move.l d0,-(sp)
   12020:	       jsr 144e0 <getValueType>
   12026:	       lea 12(sp),sp
   1202a:	       tst.w d0
   1202c:	   ,-- bne.s 12034 <builtIn_spinCharacter+0x2c>
   1202e:	   |   moveq #1,d0
   12030:	,--|-- bra.w 120e4 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12034:	|  '-> moveq #24,d0
   12036:	|      add.l 20(sp),d0
   1203a:	|      move.l d0,-(sp)
   1203c:	|      jsr 14e64 <trimStack>
   12042:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12044:	|      movea.l 20(sp),a0
   12048:	|      move.l 24(a0),d0
   1204c:	|      move.l d0,-(sp)
   1204e:	|      pea 7 <_start+0x7>
   12052:	|      lea 8(sp),a0
   12056:	|      move.l a0,-(sp)
   12058:	|      jsr 144e0 <getValueType>
   1205e:	|      lea 12(sp),sp
   12062:	|      tst.w d0
   12064:	|  ,-- bne.s 1206a <builtIn_spinCharacter+0x62>
   12066:	|  |   moveq #1,d0
   12068:	+--|-- bra.s 120e4 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1206a:	|  '-> moveq #24,d0
   1206c:	|      add.l 20(sp),d0
   12070:	|      move.l d0,-(sp)
   12072:	|      jsr 14e64 <trimStack>
   12078:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1207a:	|      move.l (sp),d0
   1207c:	|      move.l d0,-(sp)
   1207e:	|      jsr a344 <findPerson>
   12084:	|      addq.l #4,sp
   12086:	|      move.l d0,8(sp)
	if (thisPerson) {
   1208a:	|  ,-- beq.s 120ca <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   1208c:	|  |   move.l 4(sp),d0
   12090:	|  |   movea.l 8(sp),a0
   12094:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   12098:	|  |   movea.l 8(sp),a0
   1209c:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   120a2:	|  |   movea.l 8(sp),a0
   120a6:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   120ac:	|  |   moveq #28,d0
   120ae:	|  |   add.l 20(sp),d0
   120b2:	|  |   pea 1 <_start+0x1>
   120b6:	|  |   pea 1 <_start+0x1>
   120ba:	|  |   move.l d0,-(sp)
   120bc:	|  |   jsr 14dd2 <setVariable>
   120c2:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   120c6:	|  |   moveq #3,d0
   120c8:	+--|-- bra.s 120e4 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   120ca:	|  '-> moveq #28,d0
   120cc:	|      add.l 20(sp),d0
   120d0:	|      clr.l -(sp)
   120d2:	|      pea 1 <_start+0x1>
   120d6:	|      move.l d0,-(sp)
   120d8:	|      jsr 14dd2 <setVariable>
   120de:	|      lea 12(sp),sp
		return BR_CONTINUE;
   120e2:	|      moveq #2,d0
	}
}
   120e4:	'----> lea 12(sp),sp
   120e8:	       rts

000120ea <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   120ea:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   120ec:	          movea.l 16(sp),a0
   120f0:	          move.l 24(a0),d0
   120f4:	          move.l d0,-(sp)
   120f6:	          pea 7 <_start+0x7>
   120fa:	          move.l sp,d0
   120fc:	          addq.l #8,d0
   120fe:	          move.l d0,-(sp)
   12100:	          jsr 144e0 <getValueType>
   12106:	          lea 12(sp),sp
   1210a:	          tst.w d0
   1210c:	      ,-- bne.s 12112 <builtIn_getCharacterDirection+0x28>
   1210e:	      |   moveq #1,d0
   12110:	,-----|-- bra.s 12170 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   12112:	|     '-> moveq #24,d0
   12114:	|         add.l 16(sp),d0
   12118:	|         move.l d0,-(sp)
   1211a:	|         jsr 14e64 <trimStack>
   12120:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12122:	|         move.l (sp),d0
   12124:	|         move.l d0,-(sp)
   12126:	|         jsr a344 <findPerson>
   1212c:	|         addq.l #4,sp
   1212e:	|         move.l d0,4(sp)
	if (thisPerson) {
   12132:	|  ,----- beq.s 12156 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   12134:	|  |      movea.l 4(sp),a0
   12138:	|  |      move.l 106(a0),d1
   1213c:	|  |      moveq #28,d0
   1213e:	|  |      add.l 16(sp),d0
   12142:	|  |      move.l d1,-(sp)
   12144:	|  |      pea 1 <_start+0x1>
   12148:	|  |      move.l d0,-(sp)
   1214a:	|  |      jsr 14dd2 <setVariable>
   12150:	|  |      lea 12(sp),sp
   12154:	|  |  ,-- bra.s 1216e <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12156:	|  '--|-> moveq #28,d0
   12158:	|     |   add.l 16(sp),d0
   1215c:	|     |   clr.l -(sp)
   1215e:	|     |   pea 1 <_start+0x1>
   12162:	|     |   move.l d0,-(sp)
   12164:	|     |   jsr 14dd2 <setVariable>
   1216a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1216e:	|     '-> moveq #2,d0
}
   12170:	'-------> addq.l #8,sp
   12172:	          rts

00012174 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   12174:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12176:	       movea.l 16(sp),a0
   1217a:	       move.l 24(a0),d0
   1217e:	       move.l d0,-(sp)
   12180:	       pea 7 <_start+0x7>
   12184:	       move.l sp,d0
   12186:	       addq.l #8,d0
   12188:	       move.l d0,-(sp)
   1218a:	       jsr 144e0 <getValueType>
   12190:	       lea 12(sp),sp
   12194:	       tst.w d0
   12196:	   ,-- bne.s 1219c <builtIn_isCharacter+0x28>
   12198:	   |   moveq #1,d0
   1219a:	,--|-- bra.s 121de <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   1219c:	|  '-> moveq #24,d0
   1219e:	|      add.l 16(sp),d0
   121a2:	|      move.l d0,-(sp)
   121a4:	|      jsr 14e64 <trimStack>
   121aa:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   121ac:	|      move.l (sp),d0
   121ae:	|      move.l d0,-(sp)
   121b0:	|      jsr a344 <findPerson>
   121b6:	|      addq.l #4,sp
   121b8:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   121bc:	|      sne d0
   121be:	|      neg.b d0
   121c0:	|      moveq #0,d1
   121c2:	|      move.b d0,d1
   121c4:	|      moveq #28,d0
   121c6:	|      add.l 16(sp),d0
   121ca:	|      move.l d1,-(sp)
   121cc:	|      pea 1 <_start+0x1>
   121d0:	|      move.l d0,-(sp)
   121d2:	|      jsr 14dd2 <setVariable>
   121d8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   121dc:	|      moveq #2,d0
}
   121de:	'----> addq.l #8,sp
   121e0:	       rts

000121e2 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   121e2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   121e4:	          movea.l 16(sp),a0
   121e8:	          move.l 24(a0),d0
   121ec:	          move.l d0,-(sp)
   121ee:	          pea 7 <_start+0x7>
   121f2:	          move.l sp,d0
   121f4:	          addq.l #8,d0
   121f6:	          move.l d0,-(sp)
   121f8:	          jsr 144e0 <getValueType>
   121fe:	          lea 12(sp),sp
   12202:	          tst.w d0
   12204:	      ,-- bne.s 1220a <builtIn_normalCharacter+0x28>
   12206:	      |   moveq #1,d0
   12208:	,-----|-- bra.s 12286 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   1220a:	|     '-> moveq #24,d0
   1220c:	|         add.l 16(sp),d0
   12210:	|         move.l d0,-(sp)
   12212:	|         jsr 14e64 <trimStack>
   12218:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1221a:	|         move.l (sp),d0
   1221c:	|         move.l d0,-(sp)
   1221e:	|         jsr a344 <findPerson>
   12224:	|         addq.l #4,sp
   12226:	|         move.l d0,4(sp)
	if (thisPerson)
   1222a:	|  ,----- beq.s 1226c <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   1222c:	|  |      movea.l 4(sp),a0
   12230:	|  |      movea.l 80(a0),a0
   12234:	|  |      move.l (a0),d1
   12236:	|  |      movea.l 4(sp),a0
   1223a:	|  |      move.l 106(a0),d0
   1223e:	|  |      add.l d0,d0
   12240:	|  |      add.l d0,d0
   12242:	|  |      movea.l d1,a0
   12244:	|  |      adda.l d0,a0
   12246:	|  |      move.l (a0),d0
   12248:	|  |      movea.l 4(sp),a0
   1224c:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12250:	|  |      moveq #28,d0
   12252:	|  |      add.l 16(sp),d0
   12256:	|  |      pea 1 <_start+0x1>
   1225a:	|  |      pea 1 <_start+0x1>
   1225e:	|  |      move.l d0,-(sp)
   12260:	|  |      jsr 14dd2 <setVariable>
   12266:	|  |      lea 12(sp),sp
   1226a:	|  |  ,-- bra.s 12284 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1226c:	|  '--|-> moveq #28,d0
   1226e:	|     |   add.l 16(sp),d0
   12272:	|     |   clr.l -(sp)
   12274:	|     |   pea 1 <_start+0x1>
   12278:	|     |   move.l d0,-(sp)
   1227a:	|     |   jsr 14dd2 <setVariable>
   12280:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12284:	|     '-> moveq #2,d0
}
   12286:	'-------> addq.l #8,sp
   12288:	          rts

0001228a <builtIn_isMoving>:

builtIn(isMoving)
{
   1228a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1228c:	          movea.l 16(sp),a0
   12290:	          move.l 24(a0),d0
   12294:	          move.l d0,-(sp)
   12296:	          pea 7 <_start+0x7>
   1229a:	          move.l sp,d0
   1229c:	          addq.l #8,d0
   1229e:	          move.l d0,-(sp)
   122a0:	          jsr 144e0 <getValueType>
   122a6:	          lea 12(sp),sp
   122aa:	          tst.w d0
   122ac:	      ,-- bne.s 122b2 <builtIn_isMoving+0x28>
   122ae:	      |   moveq #1,d0
   122b0:	,-----|-- bra.s 12312 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   122b2:	|     '-> moveq #24,d0
   122b4:	|         add.l 16(sp),d0
   122b8:	|         move.l d0,-(sp)
   122ba:	|         jsr 14e64 <trimStack>
   122c0:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   122c2:	|         move.l (sp),d0
   122c4:	|         move.l d0,-(sp)
   122c6:	|         jsr a344 <findPerson>
   122cc:	|         addq.l #4,sp
   122ce:	|         move.l d0,4(sp)
	if (thisPerson)
   122d2:	|  ,----- beq.s 122f8 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   122d4:	|  |      movea.l 4(sp),a0
   122d8:	|  |      move.w 64(a0),d0
   122dc:	|  |      movea.w d0,a0
   122de:	|  |      moveq #28,d0
   122e0:	|  |      add.l 16(sp),d0
   122e4:	|  |      move.l a0,-(sp)
   122e6:	|  |      pea 1 <_start+0x1>
   122ea:	|  |      move.l d0,-(sp)
   122ec:	|  |      jsr 14dd2 <setVariable>
   122f2:	|  |      lea 12(sp),sp
   122f6:	|  |  ,-- bra.s 12310 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   122f8:	|  '--|-> moveq #28,d0
   122fa:	|     |   add.l 16(sp),d0
   122fe:	|     |   clr.l -(sp)
   12300:	|     |   pea 1 <_start+0x1>
   12304:	|     |   move.l d0,-(sp)
   12306:	|     |   jsr 14dd2 <setVariable>
   1230c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12310:	|     '-> moveq #2,d0
}
   12312:	'-------> addq.l #8,sp
   12314:	          rts

00012316 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12316:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1231a:	          movea.l 20(sp),a0
   1231e:	          move.l 24(a0),d0
   12322:	          move.l d0,-(sp)
   12324:	          pea 7 <_start+0x7>
   12328:	          lea 8(sp),a0
   1232c:	          move.l a0,-(sp)
   1232e:	          jsr 144e0 <getValueType>
   12334:	          lea 12(sp),sp
   12338:	          tst.w d0
   1233a:	      ,-- bne.s 12342 <builtIn_fetchEvent+0x2c>
   1233c:	      |   moveq #1,d0
   1233e:	,-----|-- bra.w 123d6 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12342:	|     '-> moveq #24,d0
   12344:	|         add.l 20(sp),d0
   12348:	|         move.l d0,-(sp)
   1234a:	|         jsr 14e64 <trimStack>
   12350:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12352:	|         movea.l 20(sp),a0
   12356:	|         move.l 24(a0),d0
   1235a:	|         move.l d0,-(sp)
   1235c:	|         pea 7 <_start+0x7>
   12360:	|         moveq #12,d0
   12362:	|         add.l sp,d0
   12364:	|         move.l d0,-(sp)
   12366:	|         jsr 144e0 <getValueType>
   1236c:	|         lea 12(sp),sp
   12370:	|         tst.w d0
   12372:	|     ,-- bne.s 12378 <builtIn_fetchEvent+0x62>
   12374:	|     |   moveq #1,d0
   12376:	+-----|-- bra.s 123d6 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12378:	|     '-> moveq #24,d0
   1237a:	|         add.l 20(sp),d0
   1237e:	|         move.l d0,-(sp)
   12380:	|         jsr 14e64 <trimStack>
   12386:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12388:	|         move.l (sp),d1
   1238a:	|         move.l 4(sp),d0
   1238e:	|         move.l d1,-(sp)
   12390:	|         move.l d0,-(sp)
   12392:	|         jsr d27a <getCombinationFunction>
   12398:	|         addq.l #8,sp
   1239a:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   1239e:	|  ,----- beq.s 123bc <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   123a0:	|  |      moveq #28,d0
   123a2:	|  |      add.l 20(sp),d0
   123a6:	|  |      move.l 8(sp),-(sp)
   123aa:	|  |      pea 2 <_start+0x2>
   123ae:	|  |      move.l d0,-(sp)
   123b0:	|  |      jsr 14dd2 <setVariable>
   123b6:	|  |      lea 12(sp),sp
   123ba:	|  |  ,-- bra.s 123d4 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   123bc:	|  '--|-> moveq #28,d0
   123be:	|     |   add.l 20(sp),d0
   123c2:	|     |   clr.l -(sp)
   123c4:	|     |   pea 1 <_start+0x1>
   123c8:	|     |   move.l d0,-(sp)
   123ca:	|     |   jsr 14dd2 <setVariable>
   123d0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   123d4:	|     '-> moveq #2,d0
}
   123d6:	'-------> lea 12(sp),sp
   123da:	          rts

000123dc <builtIn_deleteFile>:

builtIn(deleteFile)
{
   123dc:	       lea -24(sp),sp
   123e0:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   123e2:	       movea.l 36(sp),a0
   123e6:	       move.l 24(a0),d0
   123ea:	       move.l d0,-(sp)
   123ec:	       jsr 14ab6 <getTextFromAnyVar>
   123f2:	       addq.l #4,sp
   123f4:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   123f8:	       moveq #24,d0
   123fa:	       add.l 36(sp),d0
   123fe:	       move.l d0,-(sp)
   12400:	       jsr 14e64 <trimStack>
   12406:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12408:	       move.l 24(sp),-(sp)
   1240c:	       jsr 2fe <encodeFilename>
   12412:	       addq.l #4,sp
   12414:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12418:	       move.l 24(sp),16(sp)
   1241e:	       move.l 1a7a4 <SysBase>,d0
   12424:	       movea.l d0,a6
   12426:	       movea.l 16(sp),a1
   1242a:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   1242e:	       move.l 20(sp),-(sp)
   12432:	       jsr e032 <failSecurityCheck>
   12438:	       addq.l #4,sp
   1243a:	       tst.w d0
   1243c:	   ,-- beq.s 12442 <builtIn_deleteFile+0x66>
   1243e:	   |   moveq #1,d0
   12440:	,--|-- bra.s 12490 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12442:	|  '-> move.l 20(sp),12(sp)
   12448:	|      move.l 1a7ac <DOSBase>,d0
   1244e:	|      movea.l d0,a6
   12450:	|      move.l 12(sp),d1
   12454:	|      jsr -72(a6)
   12458:	|      move.l d0,8(sp)
   1245c:	|      move.l 8(sp),d1
   12460:	|      moveq #28,d0
   12462:	|      add.l 36(sp),d0
   12466:	|      move.l d1,-(sp)
   12468:	|      pea 1 <_start+0x1>
   1246c:	|      move.l d0,-(sp)
   1246e:	|      jsr 14dd2 <setVariable>
   12474:	|      lea 12(sp),sp
    FreeVec(nam);
   12478:	|      move.l 20(sp),4(sp)
   1247e:	|      move.l 1a7a4 <SysBase>,d0
   12484:	|      movea.l d0,a6
   12486:	|      movea.l 4(sp),a1
   1248a:	|      jsr -690(a6)

    return BR_CONTINUE;
   1248e:	|      moveq #2,d0
}
   12490:	'----> movea.l (sp)+,a6
   12492:	       lea 24(sp),sp
   12496:	       rts

00012498 <builtIn_renameFile>:

builtIn(renameFile)
{
   12498:	       lea -40(sp),sp
   1249c:	       move.l a6,-(sp)
   1249e:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   124a0:	       movea.l 56(sp),a0
   124a4:	       move.l 24(a0),d0
   124a8:	       move.l d0,-(sp)
   124aa:	       jsr 14ab6 <getTextFromAnyVar>
   124b0:	       addq.l #4,sp
   124b2:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   124b6:	       move.l 44(sp),-(sp)
   124ba:	       jsr 2fe <encodeFilename>
   124c0:	       addq.l #4,sp
   124c2:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   124c6:	       moveq #24,d0
   124c8:	       add.l 56(sp),d0
   124cc:	       move.l d0,-(sp)
   124ce:	       jsr 14e64 <trimStack>
   124d4:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   124d6:	       move.l 40(sp),-(sp)
   124da:	       jsr e032 <failSecurityCheck>
   124e0:	       addq.l #4,sp
   124e2:	       tst.w d0
   124e4:	   ,-- beq.s 124ec <builtIn_renameFile+0x54>
   124e6:	   |   moveq #1,d0
   124e8:	,--|-- bra.w 125d2 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   124ec:	|  '-> move.l 44(sp),36(sp)
   124f2:	|      move.l 1a7a4 <SysBase>,d0
   124f8:	|      movea.l d0,a6
   124fa:	|      movea.l 36(sp),a1
   124fe:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12502:	|      movea.l 56(sp),a0
   12506:	|      move.l 24(a0),d0
   1250a:	|      move.l d0,-(sp)
   1250c:	|      jsr 14ab6 <getTextFromAnyVar>
   12512:	|      addq.l #4,sp
   12514:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12518:	|      move.l 44(sp),-(sp)
   1251c:	|      jsr 2fe <encodeFilename>
   12522:	|      addq.l #4,sp
   12524:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12528:	|      moveq #24,d0
   1252a:	|      add.l 56(sp),d0
   1252e:	|      move.l d0,-(sp)
   12530:	|      jsr 14e64 <trimStack>
   12536:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12538:	|      move.l 32(sp),-(sp)
   1253c:	|      jsr e032 <failSecurityCheck>
   12542:	|      addq.l #4,sp
   12544:	|      tst.w d0
   12546:	|  ,-- beq.s 1254e <builtIn_renameFile+0xb6>
   12548:	|  |   moveq #1,d0
   1254a:	+--|-- bra.w 125d2 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1254e:	|  '-> move.l 44(sp),28(sp)
   12554:	|      move.l 1a7a4 <SysBase>,d0
   1255a:	|      movea.l d0,a6
   1255c:	|      movea.l 28(sp),a1
   12560:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12564:	|      move.l 32(sp),24(sp)
   1256a:	|      move.l 40(sp),20(sp)
   12570:	|      move.l 1a7ac <DOSBase>,d0
   12576:	|      movea.l d0,a6
   12578:	|      move.l 24(sp),d1
   1257c:	|      move.l 20(sp),d2
   12580:	|      jsr -78(a6)
   12584:	|      move.l d0,16(sp)
   12588:	|      move.l 16(sp),d1
   1258c:	|      moveq #28,d0
   1258e:	|      add.l 56(sp),d0
   12592:	|      move.l d1,-(sp)
   12594:	|      pea 1 <_start+0x1>
   12598:	|      move.l d0,-(sp)
   1259a:	|      jsr 14dd2 <setVariable>
   125a0:	|      lea 12(sp),sp
	FreeVec(nam);
   125a4:	|      move.l 32(sp),12(sp)
   125aa:	|      move.l 1a7a4 <SysBase>,d0
   125b0:	|      movea.l d0,a6
   125b2:	|      movea.l 12(sp),a1
   125b6:	|      jsr -690(a6)
	FreeVec(newnam);
   125ba:	|      move.l 40(sp),8(sp)
   125c0:	|      move.l 1a7a4 <SysBase>,d0
   125c6:	|      movea.l d0,a6
   125c8:	|      movea.l 8(sp),a1
   125cc:	|      jsr -690(a6)

	return BR_CONTINUE;
   125d0:	|      moveq #2,d0
}
   125d2:	'----> move.l (sp)+,d2
   125d4:	       movea.l (sp)+,a6
   125d6:	       lea 40(sp),sp
   125da:	       rts

000125dc <builtIn_cacheSound>:

builtIn(cacheSound)
{
   125dc:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   125de:	       movea.l 12(sp),a0
   125e2:	       move.l 24(a0),d0
   125e6:	       move.l d0,-(sp)
   125e8:	       pea 5 <_start+0x5>
   125ec:	       move.l sp,d0
   125ee:	       addq.l #8,d0
   125f0:	       move.l d0,-(sp)
   125f2:	       jsr 144e0 <getValueType>
   125f8:	       lea 12(sp),sp
   125fc:	       tst.w d0
   125fe:	   ,-- bne.s 12604 <builtIn_cacheSound+0x28>
   12600:	   |   moveq #1,d0
   12602:	,--|-- bra.s 1262c <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12604:	|  '-> moveq #24,d0
   12606:	|      add.l 12(sp),d0
   1260a:	|      move.l d0,-(sp)
   1260c:	|      jsr 14e64 <trimStack>
   12612:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12614:	|      move.l (sp),d0
   12616:	|      move.l d0,-(sp)
   12618:	|      jsr ce7a <cacheSound>
   1261e:	|      addq.l #4,sp
   12620:	|      moveq #-1,d1
   12622:	|      cmp.l d0,d1
   12624:	|  ,-- bne.s 1262a <builtIn_cacheSound+0x4e>
   12626:	|  |   moveq #1,d0
   12628:	+--|-- bra.s 1262c <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   1262a:	|  '-> moveq #2,d0
}
   1262c:	'----> addq.l #4,sp
   1262e:	       rts

00012630 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12630:	pea 1980c <PutChar+0x1e3e>
   12636:	jsr 16f2c <KPrintF>
   1263c:	addq.l #4,sp
	return BR_CONTINUE;
   1263e:	moveq #2,d0
}
   12640:	rts

00012642 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12642:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12646:	          movea.l 20(sp),a0
   1264a:	          move.l 24(a0),d0
   1264e:	          move.l d0,-(sp)
   12650:	          pea 1 <_start+0x1>
   12654:	          moveq #12,d0
   12656:	          add.l sp,d0
   12658:	          move.l d0,-(sp)
   1265a:	          jsr 144e0 <getValueType>
   12660:	          lea 12(sp),sp
   12664:	          tst.w d0
   12666:	      ,-- bne.s 1266e <builtIn_setCharacterSpinSpeed+0x2c>
   12668:	      |   moveq #1,d0
   1266a:	,-----|-- bra.w 12708 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1266e:	|     '-> moveq #24,d0
   12670:	|         add.l 20(sp),d0
   12674:	|         move.l d0,-(sp)
   12676:	|         jsr 14e64 <trimStack>
   1267c:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1267e:	|         movea.l 20(sp),a0
   12682:	|         move.l 24(a0),d0
   12686:	|         move.l d0,-(sp)
   12688:	|         pea 7 <_start+0x7>
   1268c:	|         lea 8(sp),a0
   12690:	|         move.l a0,-(sp)
   12692:	|         jsr 144e0 <getValueType>
   12698:	|         lea 12(sp),sp
   1269c:	|         tst.w d0
   1269e:	|     ,-- bne.s 126a4 <builtIn_setCharacterSpinSpeed+0x62>
   126a0:	|     |   moveq #1,d0
   126a2:	+-----|-- bra.s 12708 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   126a4:	|     '-> moveq #24,d0
   126a6:	|         add.l 20(sp),d0
   126aa:	|         move.l d0,-(sp)
   126ac:	|         jsr 14e64 <trimStack>
   126b2:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   126b4:	|         move.l (sp),d0
   126b6:	|         move.l d0,-(sp)
   126b8:	|         jsr a344 <findPerson>
   126be:	|         addq.l #4,sp
   126c0:	|         move.l d0,8(sp)

	if (thisPerson) {
   126c4:	|  ,----- beq.s 126ee <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   126c6:	|  |      move.l 4(sp),d0
   126ca:	|  |      movea.l 8(sp),a0
   126ce:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   126d2:	|  |      moveq #28,d0
   126d4:	|  |      add.l 20(sp),d0
   126d8:	|  |      pea 1 <_start+0x1>
   126dc:	|  |      pea 1 <_start+0x1>
   126e0:	|  |      move.l d0,-(sp)
   126e2:	|  |      jsr 14dd2 <setVariable>
   126e8:	|  |      lea 12(sp),sp
   126ec:	|  |  ,-- bra.s 12706 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   126ee:	|  '--|-> moveq #28,d0
   126f0:	|     |   add.l 20(sp),d0
   126f4:	|     |   clr.l -(sp)
   126f6:	|     |   pea 1 <_start+0x1>
   126fa:	|     |   move.l d0,-(sp)
   126fc:	|     |   jsr 14dd2 <setVariable>
   12702:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12706:	|     '-> moveq #2,d0
}
   12708:	'-------> lea 12(sp),sp
   1270c:	          rts

0001270e <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   1270e:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12712:	          movea.l 20(sp),a0
   12716:	          move.l 24(a0),d0
   1271a:	          move.l d0,-(sp)
   1271c:	          pea 1 <_start+0x1>
   12720:	          moveq #12,d0
   12722:	          add.l sp,d0
   12724:	          move.l d0,-(sp)
   12726:	          jsr 144e0 <getValueType>
   1272c:	          lea 12(sp),sp
   12730:	          tst.w d0
   12732:	      ,-- bne.s 1273a <builtIn_setCharacterAngleOffset+0x2c>
   12734:	      |   moveq #1,d0
   12736:	,-----|-- bra.w 127d4 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   1273a:	|     '-> moveq #24,d0
   1273c:	|         add.l 20(sp),d0
   12740:	|         move.l d0,-(sp)
   12742:	|         jsr 14e64 <trimStack>
   12748:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1274a:	|         movea.l 20(sp),a0
   1274e:	|         move.l 24(a0),d0
   12752:	|         move.l d0,-(sp)
   12754:	|         pea 7 <_start+0x7>
   12758:	|         lea 8(sp),a0
   1275c:	|         move.l a0,-(sp)
   1275e:	|         jsr 144e0 <getValueType>
   12764:	|         lea 12(sp),sp
   12768:	|         tst.w d0
   1276a:	|     ,-- bne.s 12770 <builtIn_setCharacterAngleOffset+0x62>
   1276c:	|     |   moveq #1,d0
   1276e:	+-----|-- bra.s 127d4 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12770:	|     '-> moveq #24,d0
   12772:	|         add.l 20(sp),d0
   12776:	|         move.l d0,-(sp)
   12778:	|         jsr 14e64 <trimStack>
   1277e:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12780:	|         move.l (sp),d0
   12782:	|         move.l d0,-(sp)
   12784:	|         jsr a344 <findPerson>
   1278a:	|         addq.l #4,sp
   1278c:	|         move.l d0,8(sp)

	if (thisPerson) {
   12790:	|  ,----- beq.s 127ba <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12792:	|  |      move.l 4(sp),d0
   12796:	|  |      movea.l 8(sp),a0
   1279a:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1279e:	|  |      moveq #28,d0
   127a0:	|  |      add.l 20(sp),d0
   127a4:	|  |      pea 1 <_start+0x1>
   127a8:	|  |      pea 1 <_start+0x1>
   127ac:	|  |      move.l d0,-(sp)
   127ae:	|  |      jsr 14dd2 <setVariable>
   127b4:	|  |      lea 12(sp),sp
   127b8:	|  |  ,-- bra.s 127d2 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   127ba:	|  '--|-> moveq #28,d0
   127bc:	|     |   add.l 20(sp),d0
   127c0:	|     |   clr.l -(sp)
   127c2:	|     |   pea 1 <_start+0x1>
   127c6:	|     |   move.l d0,-(sp)
   127c8:	|     |   jsr 14dd2 <setVariable>
   127ce:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   127d2:	|     '-> moveq #2,d0
}
   127d4:	'-------> lea 12(sp),sp
   127d8:	          rts

000127da <builtIn_transitionMode>:


builtIn(transitionMode)
{
   127da:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   127dc:	       movea.l 12(sp),a0
   127e0:	       move.l 24(a0),d0
   127e4:	       move.l d0,-(sp)
   127e6:	       pea 1 <_start+0x1>
   127ea:	       move.l sp,d0
   127ec:	       addq.l #8,d0
   127ee:	       move.l d0,-(sp)
   127f0:	       jsr 144e0 <getValueType>
   127f6:	       lea 12(sp),sp
   127fa:	       tst.w d0
   127fc:	   ,-- bne.s 12802 <builtIn_transitionMode+0x28>
   127fe:	   |   moveq #1,d0
   12800:	,--|-- bra.s 12838 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12802:	|  '-> move.l (sp),d0
   12804:	|      move.l d0,d0
   12806:	|      move.b d0,1a67e <fadeMode>
	trimStack (&fun -> stack);
   1280c:	|      moveq #24,d0
   1280e:	|      add.l 12(sp),d0
   12812:	|      move.l d0,-(sp)
   12814:	|      jsr 14e64 <trimStack>
   1281a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1281c:	|      moveq #28,d0
   1281e:	|      add.l 12(sp),d0
   12822:	|      pea 1 <_start+0x1>
   12826:	|      pea 1 <_start+0x1>
   1282a:	|      move.l d0,-(sp)
   1282c:	|      jsr 14dd2 <setVariable>
   12832:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12836:	|      moveq #2,d0
}
   12838:	'----> addq.l #4,sp
   1283a:	       rts

0001283c <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1283c:	moveq #24,d0
   1283e:	add.l 8(sp),d0
   12842:	move.l d0,-(sp)
   12844:	jsr 14e64 <trimStack>
   1284a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   1284c:	moveq #28,d0
   1284e:	add.l 8(sp),d0
   12852:	pea 1 <_start+0x1>
   12856:	pea 1 <_start+0x1>
   1285a:	move.l d0,-(sp)
   1285c:	jsr 14dd2 <setVariable>
   12862:	lea 12(sp),sp
	return BR_CONTINUE;
   12866:	moveq #2,d0
}
   12868:	rts

0001286a <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   1286a:	pea 19836 <PutChar+0x1e68>
   12870:	jsr 16f2c <KPrintF>
   12876:	addq.l #4,sp
	return BR_CONTINUE;
   12878:	moveq #2,d0
}
   1287a:	rts

0001287c <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   1287c:	       lea -16(sp),sp
   12880:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12882:	       movea.l 28(sp),a0
   12886:	       move.l 24(a0),d0
   1288a:	       move.l d0,-(sp)
   1288c:	       jsr 14ab6 <getTextFromAnyVar>
   12892:	       addq.l #4,sp
   12894:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12898:	   ,-- bne.s 128a0 <builtIn_saveCustomData+0x24>
   1289a:	   |   moveq #1,d0
   1289c:	,--|-- bra.w 12952 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   128a0:	|  '-> move.l 16(sp),-(sp)
   128a4:	|      jsr 2fe <encodeFilename>
   128aa:	|      addq.l #4,sp
   128ac:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   128b0:	|      move.l 16(sp),8(sp)
   128b6:	|      move.l 1a7a4 <SysBase>,d0
   128bc:	|      movea.l d0,a6
   128be:	|      movea.l 8(sp),a1
   128c2:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   128c6:	|      move.l 12(sp),-(sp)
   128ca:	|      jsr e032 <failSecurityCheck>
   128d0:	|      addq.l #4,sp
   128d2:	|      tst.w d0
   128d4:	|  ,-- beq.s 128da <builtIn_saveCustomData+0x5e>
   128d6:	|  |   moveq #1,d0
   128d8:	+--|-- bra.s 12952 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   128da:	|  '-> moveq #24,d0
   128dc:	|      add.l 28(sp),d0
   128e0:	|      move.l d0,-(sp)
   128e2:	|      jsr 14e64 <trimStack>
   128e8:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   128ea:	|      movea.l 28(sp),a0
   128ee:	|      movea.l 24(a0),a0
   128f2:	|      move.l (a0),d0
   128f4:	|      moveq #6,d1
   128f6:	|      cmp.l d0,d1
   128f8:	|  ,-- beq.s 1290c <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   128fa:	|  |   pea 19863 <PutChar+0x1e95>
   12900:	|  |   jsr 16f2c <KPrintF>
   12906:	|  |   addq.l #4,sp
		return BR_ERROR;
   12908:	|  |   moveq #1,d0
   1290a:	+--|-- bra.s 12952 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   1290c:	|  '-> movea.l 28(sp),a0
   12910:	|      move.l 24(a0),d0
   12914:	|      move.l d0,-(sp)
   12916:	|      move.l 16(sp),-(sp)
   1291a:	|      jsr dc82 <stackToFile>
   12920:	|      addq.l #8,sp
   12922:	|      tst.w d0
   12924:	|  ,-- bne.s 1292a <builtIn_saveCustomData+0xae>
   12926:	|  |   moveq #1,d0
   12928:	+--|-- bra.s 12952 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   1292a:	|  '-> moveq #24,d0
   1292c:	|      add.l 28(sp),d0
   12930:	|      move.l d0,-(sp)
   12932:	|      jsr 14e64 <trimStack>
   12938:	|      addq.l #4,sp
	FreeVec(fileName);
   1293a:	|      move.l 12(sp),4(sp)
   12940:	|      move.l 1a7a4 <SysBase>,d0
   12946:	|      movea.l d0,a6
   12948:	|      movea.l 4(sp),a1
   1294c:	|      jsr -690(a6)
	return BR_CONTINUE;
   12950:	|      moveq #2,d0
}
   12952:	'----> movea.l (sp)+,a6
   12954:	       lea 16(sp),sp
   12958:	       rts

0001295a <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   1295a:	       lea -28(sp),sp
   1295e:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12960:	       movea.l 40(sp),a0
   12964:	       move.l 24(a0),d0
   12968:	       move.l d0,-(sp)
   1296a:	       jsr 14ab6 <getTextFromAnyVar>
   12970:	       addq.l #4,sp
   12972:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12976:	   ,-- bne.s 1297e <builtIn_loadCustomData+0x24>
   12978:	   |   moveq #1,d0
   1297a:	,--|-- bra.w 12a7a <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   1297e:	|  '-> move.l 28(sp),-(sp)
   12982:	|      jsr 2fe <encodeFilename>
   12988:	|      addq.l #4,sp
   1298a:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   1298e:	|      move.l 28(sp),20(sp)
   12994:	|      move.l 1a7a4 <SysBase>,d0
   1299a:	|      movea.l d0,a6
   1299c:	|      movea.l 20(sp),a1
   129a0:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   129a4:	|      move.l 24(sp),-(sp)
   129a8:	|      jsr e032 <failSecurityCheck>
   129ae:	|      addq.l #4,sp
   129b0:	|      tst.w d0
   129b2:	|  ,-- beq.s 129ba <builtIn_loadCustomData+0x60>
   129b4:	|  |   moveq #1,d0
   129b6:	+--|-- bra.w 12a7a <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   129ba:	|  '-> moveq #24,d0
   129bc:	|      add.l 40(sp),d0
   129c0:	|      move.l d0,-(sp)
   129c2:	|      jsr 14e64 <trimStack>
   129c8:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   129ca:	|      moveq #28,d0
   129cc:	|      add.l 40(sp),d0
   129d0:	|      move.l d0,-(sp)
   129d2:	|      jsr 1472e <unlinkVar>
   129d8:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   129da:	|      movea.l 40(sp),a0
   129de:	|      moveq #6,d0
   129e0:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   129e4:	|      moveq #12,d0
   129e6:	|      move.l d0,16(sp)
   129ea:	|      clr.l 12(sp)
   129ee:	|      move.l 1a7a4 <SysBase>,d0
   129f4:	|      movea.l d0,a6
   129f6:	|      move.l 16(sp),d0
   129fa:	|      move.l 12(sp),d1
   129fe:	|      jsr -684(a6)
   12a02:	|      move.l d0,8(sp)
   12a06:	|      move.l 8(sp),d0
   12a0a:	|      movea.l 40(sp),a0
   12a0e:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12a12:	|      movea.l 40(sp),a0
   12a16:	|      move.l 32(a0),d0
   12a1a:	|  ,-- bne.s 12a20 <builtIn_loadCustomData+0xc6>
   12a1c:	|  |   moveq #1,d0
   12a1e:	+--|-- bra.s 12a7a <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12a20:	|  '-> movea.l 40(sp),a0
   12a24:	|      movea.l 32(a0),a0
   12a28:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12a2a:	|      movea.l 40(sp),a0
   12a2e:	|      movea.l 32(a0),a0
   12a32:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12a36:	|      movea.l 40(sp),a0
   12a3a:	|      movea.l 32(a0),a0
   12a3e:	|      moveq #1,d0
   12a40:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12a44:	|      movea.l 40(sp),a0
   12a48:	|      move.l 32(a0),d0
   12a4c:	|      move.l d0,-(sp)
   12a4e:	|      move.l 28(sp),-(sp)
   12a52:	|      jsr d6bc <fileToStack>
   12a58:	|      addq.l #8,sp
   12a5a:	|      tst.w d0
   12a5c:	|  ,-- bne.s 12a62 <builtIn_loadCustomData+0x108>
   12a5e:	|  |   moveq #1,d0
   12a60:	+--|-- bra.s 12a7a <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12a62:	|  '-> move.l 24(sp),4(sp)
   12a68:	|      move.l 1a7a4 <SysBase>,d0
   12a6e:	|      movea.l d0,a6
   12a70:	|      movea.l 4(sp),a1
   12a74:	|      jsr -690(a6)
	return BR_CONTINUE;
   12a78:	|      moveq #2,d0
}
   12a7a:	'----> movea.l (sp)+,a6
   12a7c:	       lea 28(sp),sp
   12a80:	       rts

00012a82 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12a82:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12a84:	       movea.l 12(sp),a0
   12a88:	       move.l 24(a0),d0
   12a8c:	       move.l d0,-(sp)
   12a8e:	       pea 1 <_start+0x1>
   12a92:	       move.l sp,d0
   12a94:	       addq.l #8,d0
   12a96:	       move.l d0,-(sp)
   12a98:	       jsr 144e0 <getValueType>
   12a9e:	       lea 12(sp),sp
   12aa2:	       tst.w d0
   12aa4:	   ,-- bne.s 12aaa <builtIn_setCustomEncoding+0x28>
   12aa6:	   |   moveq #1,d0
   12aa8:	,--|-- bra.s 12ae0 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12aaa:	|  '-> move.l (sp),d0
   12aac:	|      move.l d0,d0
   12aae:	|      move.w d0,1a85c <saveEncoding>
	trimStack (&fun -> stack);
   12ab4:	|      moveq #24,d0
   12ab6:	|      add.l 12(sp),d0
   12aba:	|      move.l d0,-(sp)
   12abc:	|      jsr 14e64 <trimStack>
   12ac2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12ac4:	|      moveq #28,d0
   12ac6:	|      add.l 12(sp),d0
   12aca:	|      pea 1 <_start+0x1>
   12ace:	|      pea 1 <_start+0x1>
   12ad2:	|      move.l d0,-(sp)
   12ad4:	|      jsr 14dd2 <setVariable>
   12ada:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12ade:	|      moveq #2,d0
}
   12ae0:	'----> addq.l #4,sp
   12ae2:	       rts

00012ae4 <builtIn_freeSound>:

builtIn(freeSound)
{
   12ae4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12ae6:	       movea.l 12(sp),a0
   12aea:	       move.l 24(a0),d0
   12aee:	       move.l d0,-(sp)
   12af0:	       pea 5 <_start+0x5>
   12af4:	       move.l sp,d0
   12af6:	       addq.l #8,d0
   12af8:	       move.l d0,-(sp)
   12afa:	       jsr 144e0 <getValueType>
   12b00:	       lea 12(sp),sp
   12b04:	       tst.w d0
   12b06:	   ,-- bne.s 12b0c <builtIn_freeSound+0x28>
   12b08:	   |   moveq #1,d0
   12b0a:	,--|-- bra.s 12b2a <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12b0c:	|  '-> moveq #24,d0
   12b0e:	|      add.l 12(sp),d0
   12b12:	|      move.l d0,-(sp)
   12b14:	|      jsr 14e64 <trimStack>
   12b1a:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12b1c:	|      move.l (sp),d0
   12b1e:	|      move.l d0,-(sp)
   12b20:	|      jsr ce7e <huntKillFreeSound>
   12b26:	|      addq.l #4,sp
	return BR_CONTINUE;
   12b28:	|      moveq #2,d0
}
   12b2a:	'----> addq.l #4,sp
   12b2c:	       rts

00012b2e <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12b2e:	       lea -12(sp),sp
   12b32:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12b34:	       movea.l 24(sp),a0
   12b38:	       move.l 24(a0),d0
   12b3c:	       move.l d0,-(sp)
   12b3e:	       pea 1 <_start+0x1>
   12b42:	       moveq #16,d0
   12b44:	       add.l sp,d0
   12b46:	       move.l d0,-(sp)
   12b48:	       jsr 144e0 <getValueType>
   12b4e:	       lea 12(sp),sp
   12b52:	       tst.w d0
   12b54:	   ,-- bne.s 12b5c <builtIn_parallaxAdd+0x2e>
   12b56:	   |   moveq #1,d0
   12b58:	,--|-- bra.w 12c30 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12b5c:	|  '-> moveq #24,d0
   12b5e:	|      add.l 24(sp),d0
   12b62:	|      move.l d0,-(sp)
   12b64:	|      jsr 14e64 <trimStack>
   12b6a:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12b6c:	|      movea.l 24(sp),a0
   12b70:	|      move.l 24(a0),d0
   12b74:	|      move.l d0,-(sp)
   12b76:	|      pea 1 <_start+0x1>
   12b7a:	|      moveq #20,d0
   12b7c:	|      add.l sp,d0
   12b7e:	|      move.l d0,-(sp)
   12b80:	|      jsr 144e0 <getValueType>
   12b86:	|      lea 12(sp),sp
   12b8a:	|      tst.w d0
   12b8c:	|  ,-- bne.s 12b94 <builtIn_parallaxAdd+0x66>
   12b8e:	|  |   moveq #1,d0
   12b90:	+--|-- bra.w 12c30 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12b94:	|  '-> moveq #24,d0
   12b96:	|      add.l 24(sp),d0
   12b9a:	|      move.l d0,-(sp)
   12b9c:	|      jsr 14e64 <trimStack>
   12ba2:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12ba4:	|      movea.l 24(sp),a0
   12ba8:	|      move.l 24(a0),d0
   12bac:	|      move.l d0,-(sp)
   12bae:	|      pea 5 <_start+0x5>
   12bb2:	|      lea 12(sp),a0
   12bb6:	|      move.l a0,-(sp)
   12bb8:	|      jsr 144e0 <getValueType>
   12bbe:	|      lea 12(sp),sp
   12bc2:	|      tst.w d0
   12bc4:	|  ,-- bne.s 12bca <builtIn_parallaxAdd+0x9c>
   12bc6:	|  |   moveq #1,d0
   12bc8:	+--|-- bra.s 12c30 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12bca:	|  '-> moveq #24,d0
   12bcc:	|      add.l 24(sp),d0
   12bd0:	|      move.l d0,-(sp)
   12bd2:	|      jsr 14e64 <trimStack>
   12bd8:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12bda:	|      move.l 8(sp),d0
   12bde:	|      move.l d0,d0
   12be0:	|      moveq #0,d2
   12be2:	|      move.w d0,d2
   12be4:	|      move.l 12(sp),d0
   12be8:	|      move.l d0,d0
   12bea:	|      moveq #0,d1
   12bec:	|      move.w d0,d1
   12bee:	|      move.l 4(sp),d0
   12bf2:	|      move.l d0,d0
   12bf4:	|      move.w d0,d0
   12bf6:	|      andi.l #65535,d0
   12bfc:	|      move.l d2,-(sp)
   12bfe:	|      move.l d1,-(sp)
   12c00:	|      move.l d0,-(sp)
   12c02:	|      jsr d09a <loadParallax>
   12c08:	|      lea 12(sp),sp
   12c0c:	|      tst.w d0
   12c0e:	|  ,-- bne.s 12c14 <builtIn_parallaxAdd+0xe6>
   12c10:	|  |   moveq #1,d0
   12c12:	+--|-- bra.s 12c30 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12c14:	|  '-> moveq #28,d0
   12c16:	|      add.l 24(sp),d0
   12c1a:	|      pea 1 <_start+0x1>
   12c1e:	|      pea 1 <_start+0x1>
   12c22:	|      move.l d0,-(sp)
   12c24:	|      jsr 14dd2 <setVariable>
   12c2a:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12c2e:	|      moveq #2,d0
}
   12c30:	'----> move.l (sp)+,d2
   12c32:	       lea 12(sp),sp
   12c36:	       rts

00012c38 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12c38:	jsr cfd2 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12c3e:	moveq #28,d0
   12c40:	add.l 8(sp),d0
   12c44:	pea 1 <_start+0x1>
   12c48:	pea 1 <_start+0x1>
   12c4c:	move.l d0,-(sp)
   12c4e:	jsr 14dd2 <setVariable>
   12c54:	lea 12(sp),sp
	return BR_CONTINUE;
   12c58:	moveq #2,d0
}
   12c5a:	rts

00012c5c <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12c5c:	pea 19881 <PutChar+0x1eb3>
   12c62:	jsr 16f2c <KPrintF>
   12c68:	addq.l #4,sp

	return BR_CONTINUE;
   12c6a:	moveq #2,d0
}
   12c6c:	rts

00012c6e <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12c6e:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12c70:	             movea.l 16(sp),a0
   12c74:	             movea.l 24(a0),a0
   12c78:	             move.l (a0),d0
   12c7a:	             moveq #1,d1
   12c7c:	             cmp.l d0,d1
   12c7e:	      ,----- beq.s 12cc6 <builtIn_makeFastArray+0x58>
   12c80:	      |      moveq #6,d1
   12c82:	      |      cmp.l d0,d1
   12c84:	,-----|----- bne.s 12d04 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12c86:	|     |      movea.l 16(sp),a0
   12c8a:	|     |      movea.l 24(a0),a0
   12c8e:	|     |      move.l 4(a0),d1
   12c92:	|     |      moveq #28,d0
   12c94:	|     |      add.l 16(sp),d0
   12c98:	|     |      move.l d1,-(sp)
   12c9a:	|     |      move.l d0,-(sp)
   12c9c:	|     |      jsr 14592 <makeFastArrayFromStack>
   12ca2:	|     |      addq.l #8,sp
   12ca4:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12ca8:	|     |      moveq #24,d0
   12caa:	|     |      add.l 16(sp),d0
   12cae:	|     |      move.l d0,-(sp)
   12cb0:	|     |      jsr 14e64 <trimStack>
   12cb6:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12cb8:	|     |      tst.w 6(sp)
   12cbc:	|     |  ,-- beq.s 12cc2 <builtIn_makeFastArray+0x54>
   12cbe:	|     |  |   moveq #2,d0
   12cc0:	|  ,--|--|-- bra.s 12d16 <builtIn_makeFastArray+0xa8>
   12cc2:	|  |  |  '-> moveq #1,d0
   12cc4:	|  +--|----- bra.s 12d16 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12cc6:	|  |  '----> movea.l 16(sp),a0
   12cca:	|  |         movea.l 24(a0),a0
   12cce:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12cd4:	|  |         moveq #24,d0
   12cd6:	|  |         add.l 16(sp),d0
   12cda:	|  |         move.l d0,-(sp)
   12cdc:	|  |         jsr 14e64 <trimStack>
   12ce2:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12ce4:	|  |         moveq #28,d0
   12ce6:	|  |         add.l 16(sp),d0
   12cea:	|  |         move.l 2(sp),-(sp)
   12cee:	|  |         move.l d0,-(sp)
   12cf0:	|  |         jsr 145fc <makeFastArraySize>
   12cf6:	|  |         addq.l #8,sp
   12cf8:	|  |         tst.w d0
   12cfa:	|  |     ,-- beq.s 12d00 <builtIn_makeFastArray+0x92>
   12cfc:	|  |     |   moveq #2,d0
   12cfe:	|  +-----|-- bra.s 12d16 <builtIn_makeFastArray+0xa8>
   12d00:	|  |     '-> moveq #1,d0
   12d02:	|  +-------- bra.s 12d16 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   12d04:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   12d06:	   |         pea 198aa <PutChar+0x1edc>
   12d0c:	   |         jsr 16f2c <KPrintF>
   12d12:	   |         addq.l #4,sp
	return BR_ERROR;
   12d14:	   |         moveq #1,d0
}
   12d16:	   '-------> addq.l #8,sp
   12d18:	             rts

00012d1a <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   12d1a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12d1c:	          movea.l 16(sp),a0
   12d20:	          move.l 24(a0),d0
   12d24:	          move.l d0,-(sp)
   12d26:	          pea 7 <_start+0x7>
   12d2a:	          move.l sp,d0
   12d2c:	          addq.l #8,d0
   12d2e:	          move.l d0,-(sp)
   12d30:	          jsr 144e0 <getValueType>
   12d36:	          lea 12(sp),sp
   12d3a:	          tst.w d0
   12d3c:	      ,-- bne.s 12d42 <builtIn_getCharacterScale+0x28>
   12d3e:	      |   moveq #1,d0
   12d40:	,-----|-- bra.s 12dbc <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   12d42:	|     '-> moveq #24,d0
   12d44:	|         add.l 16(sp),d0
   12d48:	|         move.l d0,-(sp)
   12d4a:	|         jsr 14e64 <trimStack>
   12d50:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   12d52:	|         move.l (sp),d0
   12d54:	|         move.l d0,-(sp)
   12d56:	|         jsr a344 <findPerson>
   12d5c:	|         addq.l #4,sp
   12d5e:	|         move.l d0,4(sp)
	if (pers) {
   12d62:	|  ,----- beq.s 12da2 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   12d64:	|  |      movea.l 4(sp),a0
   12d68:	|  |      move.l 32(a0),d0
   12d6c:	|  |      move.l #1120403456,-(sp)
   12d72:	|  |      move.l d0,-(sp)
   12d74:	|  |      jsr 17410 <__mulsf3>
   12d7a:	|  |      addq.l #8,sp
   12d7c:	|  |      move.l d0,-(sp)
   12d7e:	|  |      jsr 172f6 <__fixsfsi>
   12d84:	|  |      addq.l #4,sp
   12d86:	|  |      move.l d0,d1
   12d88:	|  |      moveq #28,d0
   12d8a:	|  |      add.l 16(sp),d0
   12d8e:	|  |      move.l d1,-(sp)
   12d90:	|  |      pea 1 <_start+0x1>
   12d94:	|  |      move.l d0,-(sp)
   12d96:	|  |      jsr 14dd2 <setVariable>
   12d9c:	|  |      lea 12(sp),sp
   12da0:	|  |  ,-- bra.s 12dba <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12da2:	|  '--|-> moveq #28,d0
   12da4:	|     |   add.l 16(sp),d0
   12da8:	|     |   clr.l -(sp)
   12daa:	|     |   pea 1 <_start+0x1>
   12dae:	|     |   move.l d0,-(sp)
   12db0:	|     |   jsr 14dd2 <setVariable>
   12db6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12dba:	|     '-> moveq #2,d0
}
   12dbc:	'-------> addq.l #8,sp
   12dbe:	          rts

00012dc0 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   12dc0:	move.l 1a880 <gameSettings>,d0
   12dc6:	move.l d0,d1
   12dc8:	moveq #28,d0
   12dca:	add.l 8(sp),d0
   12dce:	move.l d1,-(sp)
   12dd0:	pea 1 <_start+0x1>
   12dd4:	move.l d0,-(sp)
   12dd6:	jsr 14dd2 <setVariable>
   12ddc:	lea 12(sp),sp
	return BR_CONTINUE;
   12de0:	moveq #2,d0
}
   12de2:	rts

00012de4 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12de4:	moveq #24,d0
   12de6:	add.l 8(sp),d0
   12dea:	move.l d0,-(sp)
   12dec:	jsr 14e64 <trimStack>
   12df2:	addq.l #4,sp
	trimStack (&fun -> stack);
   12df4:	moveq #24,d0
   12df6:	add.l 8(sp),d0
   12dfa:	move.l d0,-(sp)
   12dfc:	jsr 14e64 <trimStack>
   12e02:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   12e04:	moveq #28,d0
   12e06:	add.l 8(sp),d0
   12e0a:	clr.l -(sp)
   12e0c:	pea 1 <_start+0x1>
   12e10:	move.l d0,-(sp)
   12e12:	jsr 14dd2 <setVariable>
   12e18:	lea 12(sp),sp

	return BR_CONTINUE;
   12e1c:	moveq #2,d0

}
   12e1e:	rts

00012e20 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   12e20:	move.l 1a124 <lastFramesPerSecond>,d1
   12e26:	moveq #28,d0
   12e28:	add.l 8(sp),d0
   12e2c:	move.l d1,-(sp)
   12e2e:	pea 1 <_start+0x1>
   12e32:	move.l d0,-(sp)
   12e34:	jsr 14dd2 <setVariable>
   12e3a:	lea 12(sp),sp
	return BR_CONTINUE;
   12e3e:	moveq #2,d0
}
   12e40:	rts

00012e42 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   12e42:	moveq #2,d0
}
   12e44:	rts

00012e46 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   12e46:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e4a:	          movea.l 60(sp),a0
   12e4e:	          move.l 24(a0),d0
   12e52:	          move.l d0,-(sp)
   12e54:	          pea 1 <_start+0x1>
   12e58:	          pea 1a6ba <thumbHeight>
   12e5e:	          jsr 144e0 <getValueType>
   12e64:	          lea 12(sp),sp
   12e68:	          tst.w d0
   12e6a:	      ,-- bne.s 12e72 <builtIn_setThumbnailSize+0x2c>
   12e6c:	      |   moveq #1,d0
   12e6e:	,-----|-- bra.w 12f2e <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12e72:	|     '-> moveq #24,d0
   12e74:	|         add.l 60(sp),d0
   12e78:	|         move.l d0,-(sp)
   12e7a:	|         jsr 14e64 <trimStack>
   12e80:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e82:	|         movea.l 60(sp),a0
   12e86:	|         move.l 24(a0),d0
   12e8a:	|         move.l d0,-(sp)
   12e8c:	|         pea 1 <_start+0x1>
   12e90:	|         pea 1a6b6 <thumbWidth>
   12e96:	|         jsr 144e0 <getValueType>
   12e9c:	|         lea 12(sp),sp
   12ea0:	|         tst.w d0
   12ea2:	|     ,-- bne.s 12eaa <builtIn_setThumbnailSize+0x64>
   12ea4:	|     |   moveq #1,d0
   12ea6:	+-----|-- bra.w 12f2e <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12eaa:	|     '-> moveq #24,d0
   12eac:	|         add.l 60(sp),d0
   12eb0:	|         move.l d0,-(sp)
   12eb2:	|         jsr 14e64 <trimStack>
   12eb8:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   12eba:	|         move.l 1a6b6 <thumbWidth>,d0
   12ec0:	|     ,-- bmi.s 12eee <builtIn_setThumbnailSize+0xa8>
   12ec2:	|     |   move.l 1a6ba <thumbHeight>,d0
   12ec8:	|     +-- bmi.s 12eee <builtIn_setThumbnailSize+0xa8>
   12eca:	|     |   move.l 1a6b6 <thumbWidth>,d0
   12ed0:	|     |   move.l d0,d1
   12ed2:	|     |   move.l 1a6f8 <winWidth>,d0
   12ed8:	|     |   cmp.l d1,d0
   12eda:	|     +-- bcs.s 12eee <builtIn_setThumbnailSize+0xa8>
   12edc:	|     |   move.l 1a6ba <thumbHeight>,d0
   12ee2:	|     |   move.l d0,d1
   12ee4:	|     |   move.l 1a6fc <winHeight>,d0
   12eea:	|     |   cmp.l d1,d0
   12eec:	|  ,--|-- bcc.s 12f2c <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   12eee:	|  |  '-> move.l 1a6ba <thumbHeight>,d1
   12ef4:	|  |      move.l 1a6b6 <thumbWidth>,d0
   12efa:	|  |      move.l d1,-(sp)
   12efc:	|  |      move.l d0,-(sp)
   12efe:	|  |      pea 198d1 <PutChar+0x1f03>
   12f04:	|  |      lea 14(sp),a0
   12f08:	|  |      move.l a0,-(sp)
   12f0a:	|  |      jsr 13cea <sprintf>
   12f10:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   12f14:	|  |      lea 2(sp),a0
   12f18:	|  |      move.l a0,-(sp)
   12f1a:	|  |      pea 198d9 <PutChar+0x1f0b>
   12f20:	|  |      jsr 16f2c <KPrintF>
   12f26:	|  |      addq.l #8,sp
		return BR_ERROR;
   12f28:	|  |      moveq #1,d0
   12f2a:	+--|----- bra.s 12f2e <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   12f2c:	|  '----> moveq #2,d0
}
   12f2e:	'-------> lea 52(sp),sp
   12f32:	          rts

00012f34 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   12f34:	       lea -12(sp),sp
   12f38:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f3a:	       movea.l 24(sp),a0
   12f3e:	       move.l 24(a0),d0
   12f42:	       move.l d0,-(sp)
   12f44:	       pea 1 <_start+0x1>
   12f48:	       lea 12(sp),a0
   12f4c:	       move.l a0,-(sp)
   12f4e:	       jsr 144e0 <getValueType>
   12f54:	       lea 12(sp),sp
   12f58:	       tst.w d0
   12f5a:	   ,-- bne.s 12f62 <builtIn_hasFlag+0x2e>
   12f5c:	   |   moveq #1,d0
   12f5e:	,--|-- bra.w 12ff2 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   12f62:	|  '-> moveq #24,d0
   12f64:	|      add.l 24(sp),d0
   12f68:	|      move.l d0,-(sp)
   12f6a:	|      jsr 14e64 <trimStack>
   12f70:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12f72:	|      movea.l 24(sp),a0
   12f76:	|      move.l 24(a0),d0
   12f7a:	|      move.l d0,-(sp)
   12f7c:	|      pea 7 <_start+0x7>
   12f80:	|      moveq #16,d0
   12f82:	|      add.l sp,d0
   12f84:	|      move.l d0,-(sp)
   12f86:	|      jsr 144e0 <getValueType>
   12f8c:	|      lea 12(sp),sp
   12f90:	|      tst.w d0
   12f92:	|  ,-- bne.s 12f98 <builtIn_hasFlag+0x64>
   12f94:	|  |   moveq #1,d0
   12f96:	+--|-- bra.s 12ff2 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   12f98:	|  '-> moveq #24,d0
   12f9a:	|      add.l 24(sp),d0
   12f9e:	|      move.l d0,-(sp)
   12fa0:	|      jsr 14e64 <trimStack>
   12fa6:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   12fa8:	|      move.l 8(sp),d0
   12fac:	|      move.l d0,-(sp)
   12fae:	|      jsr d246 <findObjectType>
   12fb4:	|      addq.l #4,sp
   12fb6:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   12fba:	|  ,-- bne.s 12fc0 <builtIn_hasFlag+0x8c>
   12fbc:	|  |   moveq #1,d0
   12fbe:	+--|-- bra.s 12ff2 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   12fc0:	|  '-> movea.l 12(sp),a0
   12fc4:	|      move.w 36(a0),d0
   12fc8:	|      moveq #0,d2
   12fca:	|      move.w d0,d2
   12fcc:	|      move.l 4(sp),d1
   12fd0:	|      moveq #1,d0
   12fd2:	|      lsl.l d1,d0
   12fd4:	|      move.l d2,d1
   12fd6:	|      and.l d0,d1
   12fd8:	|      moveq #28,d0
   12fda:	|      add.l 24(sp),d0
   12fde:	|      move.l d1,-(sp)
   12fe0:	|      pea 1 <_start+0x1>
   12fe4:	|      move.l d0,-(sp)
   12fe6:	|      jsr 14dd2 <setVariable>
   12fec:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12ff0:	|      moveq #2,d0
}
   12ff2:	'----> move.l (sp)+,d2
   12ff4:	       lea 12(sp),sp
   12ff8:	       rts

00012ffa <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   12ffa:	       jsr d234 <snapshot>
   13000:	       tst.w d0
   13002:	,----- beq.s 13008 <builtIn_snapshotGrab+0xe>
   13004:	|      moveq #2,d0
   13006:	|  ,-- bra.s 1300a <builtIn_snapshotGrab+0x10>
   13008:	'--|-> moveq #1,d0
}
   1300a:	   '-> rts

0001300c <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   1300c:	jsr d0e0 <nosnapshot>
	return BR_CONTINUE;
   13012:	moveq #2,d0
}
   13014:	rts

00013016 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   13016:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13018:	move.w 1a000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   13020:	movea.l 12(sp),a0
   13024:	move.l 24(a0),d0
   13028:	move.l d0,-(sp)
   1302a:	jsr 14a20 <getBoolean>
   13030:	addq.l #4,sp
   13032:	move.w d0,1a000 <allowAnyFilename>
	trimStack (&fun -> stack);
   13038:	moveq #24,d0
   1303a:	add.l 12(sp),d0
   1303e:	move.l d0,-(sp)
   13040:	jsr 14e64 <trimStack>
   13046:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   13048:	movea.w 2(sp),a0
   1304c:	moveq #28,d0
   1304e:	add.l 12(sp),d0
   13052:	move.l a0,-(sp)
   13054:	pea 1 <_start+0x1>
   13058:	move.l d0,-(sp)
   1305a:	jsr 14dd2 <setVariable>
   13060:	lea 12(sp),sp
	return BR_CONTINUE;
   13064:	moveq #2,d0
}
   13066:	addq.l #4,sp
   13068:	rts

0001306a <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1306a:	moveq #24,d0
   1306c:	add.l 8(sp),d0
   13070:	move.l d0,-(sp)
   13072:	jsr 14e64 <trimStack>
   13078:	addq.l #4,sp
	trimStack (&fun -> stack);
   1307a:	moveq #24,d0
   1307c:	add.l 8(sp),d0
   13080:	move.l d0,-(sp)
   13082:	jsr 14e64 <trimStack>
   13088:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   1308a:	moveq #28,d0
   1308c:	add.l 8(sp),d0
   13090:	clr.l -(sp)
   13092:	pea 1 <_start+0x1>
   13096:	move.l d0,-(sp)
   13098:	jsr 14dd2 <setVariable>
   1309e:	lea 12(sp),sp

	return BR_CONTINUE;
   130a2:	moveq #2,d0
}
   130a4:	rts

000130a6 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   130a6:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   130a8:	movea.l 12(sp),a0
   130ac:	move.l 24(a0),d0
   130b0:	move.l d0,-(sp)
   130b2:	jsr 14ab6 <getTextFromAnyVar>
   130b8:	addq.l #4,sp
   130ba:	move.l d0,(sp)
	trimStack (&fun -> stack);
   130bc:	moveq #24,d0
   130be:	add.l 12(sp),d0
   130c2:	move.l d0,-(sp)
   130c4:	jsr 14e64 <trimStack>
   130ca:	addq.l #4,sp
	KPrintF (mess);
   130cc:	move.l (sp),-(sp)
   130ce:	jsr 16f2c <KPrintF>
   130d4:	addq.l #4,sp
	return BR_ERROR;
   130d6:	moveq #1,d0
}
   130d8:	addq.l #4,sp
   130da:	rts

000130dc <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   130dc:	moveq #24,d0
   130de:	add.l 8(sp),d0
   130e2:	move.l d0,-(sp)
   130e4:	jsr 14e64 <trimStack>
   130ea:	addq.l #4,sp
	trimStack (&fun -> stack);
   130ec:	moveq #24,d0
   130ee:	add.l 8(sp),d0
   130f2:	move.l d0,-(sp)
   130f4:	jsr 14e64 <trimStack>
   130fa:	addq.l #4,sp
	trimStack (&fun -> stack);
   130fc:	moveq #24,d0
   130fe:	add.l 8(sp),d0
   13102:	move.l d0,-(sp)
   13104:	jsr 14e64 <trimStack>
   1310a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1310c:	moveq #24,d0
   1310e:	add.l 8(sp),d0
   13112:	move.l d0,-(sp)
   13114:	jsr 14e64 <trimStack>
   1311a:	addq.l #4,sp

	return BR_CONTINUE;
   1311c:	moveq #2,d0
}
   1311e:	rts

00013120 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13120:	moveq #24,d0
   13122:	add.l 8(sp),d0
   13126:	move.l d0,-(sp)
   13128:	jsr 14e64 <trimStack>
   1312e:	addq.l #4,sp
	trimStack (&fun -> stack);
   13130:	moveq #24,d0
   13132:	add.l 8(sp),d0
   13136:	move.l d0,-(sp)
   13138:	jsr 14e64 <trimStack>
   1313e:	addq.l #4,sp
	trimStack (&fun -> stack);
   13140:	moveq #24,d0
   13142:	add.l 8(sp),d0
   13146:	move.l d0,-(sp)
   13148:	jsr 14e64 <trimStack>
   1314e:	addq.l #4,sp

	return BR_CONTINUE;
   13150:	moveq #2,d0

}
   13152:	rts

00013154 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   13154:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   13156:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1315c:	sne d0
   1315e:	neg.b d0
   13160:	moveq #0,d1
   13162:	move.b d0,d1
   13164:	moveq #28,d0
   13166:	add.l 12(sp),d0
   1316a:	move.l d1,-(sp)
   1316c:	pea 1 <_start+0x1>
   13170:	move.l d0,-(sp)
   13172:	jsr 14dd2 <setVariable>
   13178:	lea 12(sp),sp
	return BR_CONTINUE;
   1317c:	moveq #2,d0
}
   1317e:	addq.l #4,sp
   13180:	rts

00013182 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   13182:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   13184:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   1318a:	pea 198f0 <PutChar+0x1f22>
   13190:	jsr 16f2c <KPrintF>
   13196:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13198:	tst.w 2(sp)
   1319c:	sne d0
   1319e:	neg.b d0
   131a0:	moveq #0,d1
   131a2:	move.b d0,d1
   131a4:	moveq #28,d0
   131a6:	add.l 12(sp),d0
   131aa:	move.l d1,-(sp)
   131ac:	pea 1 <_start+0x1>
   131b0:	move.l d0,-(sp)
   131b2:	jsr 14dd2 <setVariable>
   131b8:	lea 12(sp),sp
	return BR_CONTINUE;
   131bc:	moveq #2,d0
}
   131be:	addq.l #4,sp
   131c0:	rts

000131c2 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   131c2:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   131c6:	             move.l 104(sp),d0
   131ca:	             cmpi.l #166,d0
   131d0:	,----------- bhi.w 132b2 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   131d4:	|            move.l 104(sp),d0
   131d8:	|            add.l d0,d0
   131da:	|            movea.l d0,a1
   131dc:	|            adda.l d0,a1
   131de:	|            lea 1a146 <paramNum>,a0
   131e4:	|            move.l (0,a1,a0.l),d0
   131e8:	|            moveq #-1,d1
   131ea:	|            cmp.l d0,d1
   131ec:	|  ,-------- beq.w 1327a <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   131f0:	|  |         move.l 104(sp),d0
   131f4:	|  |         add.l d0,d0
   131f6:	|  |         movea.l d0,a1
   131f8:	|  |         adda.l d0,a1
   131fa:	|  |         lea 1a146 <paramNum>,a0
   13200:	|  |         move.l (0,a1,a0.l),d0
   13204:	|  |         cmp.l 108(sp),d0
   13208:	|  +-------- beq.s 1327a <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   1320a:	|  |         move.l 104(sp),d0
   1320e:	|  |         add.l d0,d0
   13210:	|  |         movea.l d0,a1
   13212:	|  |         adda.l d0,a1
   13214:	|  |         lea 1a146 <paramNum>,a0
   1321a:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   1321e:	|  |         moveq #1,d1
   13220:	|  |         cmp.l d0,d1
   13222:	|  |  ,----- bne.s 1322c <callBuiltIn+0x6a>
   13224:	|  |  |      move.l #99895,d0
   1322a:	|  |  |  ,-- bra.s 13232 <callBuiltIn+0x70>
   1322c:	|  |  '--|-> move.l #104742,d0
   13232:	|  |     '-> move.l 104(sp),d1
   13236:	|  |         add.l d1,d1
   13238:	|  |         movea.l d1,a1
   1323a:	|  |         adda.l d1,a1
   1323c:	|  |         lea 1a146 <paramNum>,a0
   13242:	|  |         move.l (0,a1,a0.l),d1
   13246:	|  |         move.l d0,-(sp)
   13248:	|  |         move.l d1,-(sp)
   1324a:	|  |         pea 19928 <PutChar+0x1f5a>
   13250:	|  |         lea 12(sp),a0
   13254:	|  |         move.l a0,-(sp)
   13256:	|  |         jsr 13cea <sprintf>
   1325c:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   13260:	|  |         movea.l sp,a0
   13262:	|  |         move.l a0,-(sp)
   13264:	|  |         jsr b8 <copyString>
   1326a:	|  |         addq.l #4,sp
   1326c:	|  |         move.l d0,-(sp)
   1326e:	|  |         jsr 16f2c <KPrintF>
   13274:	|  |         addq.l #4,sp
				return BR_ERROR;
   13276:	|  |         moveq #1,d0
   13278:	|  |     ,-- bra.s 132c2 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   1327a:	|  '-----|-> move.l 104(sp),d0
   1327e:	|        |   add.l d0,d0
   13280:	|        |   movea.l d0,a1
   13282:	|        |   adda.l d0,a1
   13284:	|        |   lea 1a3e2 <builtInFunctionArray>,a0
   1328a:	|        |   move.l (0,a1,a0.l),d0
   1328e:	+--------|-- beq.s 132b2 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   13290:	|        |   move.l 104(sp),d0
   13294:	|        |   add.l d0,d0
   13296:	|        |   movea.l d0,a1
   13298:	|        |   adda.l d0,a1
   1329a:	|        |   lea 1a3e2 <builtInFunctionArray>,a0
   132a0:	|        |   movea.l (0,a1,a0.l),a0
   132a4:	|        |   move.l 112(sp),-(sp)
   132a8:	|        |   move.l 112(sp),-(sp)
   132ac:	|        |   jsr (a0)
   132ae:	|        |   addq.l #8,sp
   132b0:	|        +-- bra.s 132c2 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   132b2:	'--------|-> pea 19953 <PutChar+0x1f85>
   132b8:	         |   jsr 16f2c <KPrintF>
   132be:	         |   addq.l #4,sp
	return BR_ERROR;
   132c0:	         |   moveq #1,d0
}
   132c2:	         '-> lea 100(sp),sp
   132c6:	             rts

000132c8 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   132c8:	          subq.l #8,sp
	int indexNum = -1;
   132ca:	          moveq #-1,d0
   132cc:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   132d0:	          clr.l (sp)
   132d2:	   ,----- bra.s 132f8 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   132d4:	,--|----> move.l 1a878 <languageTable>,d1
   132da:	|  |      move.l (sp),d0
   132dc:	|  |      add.l d0,d0
   132de:	|  |      add.l d0,d0
   132e0:	|  |      movea.l d1,a0
   132e2:	|  |      adda.l d0,a0
   132e4:	|  |      move.l (a0),d0
   132e6:	|  |      move.l d0,d1
   132e8:	|  |      move.l 1a880 <gameSettings>,d0
   132ee:	|  |      cmp.l d1,d0
   132f0:	|  |  ,-- bne.s 132f6 <getLanguageForFileB+0x2e>
   132f2:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   132f6:	|  |  '-> addq.l #1,(sp)
   132f8:	|  '----> move.l 1a884 <gameSettings+0x4>,d0
   132fe:	|         cmp.l (sp),d0
   13300:	'-------- bcc.s 132d4 <getLanguageForFileB+0xc>
	}

	return indexNum;
   13302:	          move.l 4(sp),d0
}
   13306:	          addq.l #8,sp
   13308:	          rts

0001330a <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   1330a:	          lea -20(sp),sp
   1330e:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13310:	          move.l 28(sp),-(sp)
   13314:	          jsr 139cc <strlen>
   1331a:	          addq.l #4,sp
   1331c:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13320:	          moveq #4,d0
   13322:	          cmp.l 12(sp),d0
   13326:	      ,-- bge.s 1334a <getPrefsFilename+0x40>
   13328:	      |   move.l 12(sp),d0
   1332c:	      |   subq.l #4,d0
   1332e:	      |   movea.l 28(sp),a0
   13332:	      |   adda.l d0,a0
   13334:	      |   move.b (a0),d0
   13336:	      |   cmpi.b #46,d0
   1333a:	      +-- bne.s 1334a <getPrefsFilename+0x40>
		filename[n-4] = 0;
   1333c:	      |   move.l 12(sp),d0
   13340:	      |   subq.l #4,d0
   13342:	      |   movea.l 28(sp),a0
   13346:	      |   adda.l d0,a0
   13348:	      |   clr.b (a0)
	}

	char * f = filename;
   1334a:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   13350:	          clr.l 20(sp)
   13354:	   ,----- bra.s 1337c <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   13356:	,--|----> move.l 20(sp),d0
   1335a:	|  |      movea.l 28(sp),a0
   1335e:	|  |      adda.l d0,a0
   13360:	|  |      move.b (a0),d0
   13362:	|  |      cmpi.b #47,d0
   13366:	|  |  ,-- bne.s 13378 <getPrefsFilename+0x6e>
   13368:	|  |  |   move.l 20(sp),d0
   1336c:	|  |  |   addq.l #1,d0
   1336e:	|  |  |   move.l 28(sp),d1
   13372:	|  |  |   add.l d0,d1
   13374:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   13378:	|  |  '-> addq.l #1,20(sp)
   1337c:	|  '----> move.l 20(sp),d0
   13380:	|         cmp.l 12(sp),d0
   13384:	'-------- blt.s 13356 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   13386:	          pea 1997e <PutChar+0x1fb0>
   1338c:	          move.l 20(sp),-(sp)
   13390:	          jsr 13a0c <joinStrings>
   13396:	          addq.l #8,sp
   13398:	          move.l d0,8(sp)

	FreeVec(filename);
   1339c:	          move.l 28(sp),4(sp)
   133a2:	          move.l 1a7a4 <SysBase>,d0
   133a8:	          movea.l d0,a6
   133aa:	          movea.l 4(sp),a1
   133ae:	          jsr -690(a6)
	filename = NULL;
   133b2:	          clr.l 28(sp)
	return joined;
   133b6:	          move.l 8(sp),d0
}
   133ba:	          movea.l (sp)+,a6
   133bc:	          lea 20(sp),sp
   133c0:	          rts

000133c2 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   133c2:	             lea -28(sp),sp
   133c6:	             move.l a6,-(sp)
   133c8:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   133ca:	             move.l 1a884 <gameSettings+0x4>,d0
   133d0:	             move.l d0,d1
   133d2:	             addq.l #1,d1
   133d4:	             move.l d1,28(sp)
   133d8:	             clr.l 24(sp)
   133dc:	             move.l 1a7a4 <SysBase>,d0
   133e2:	             movea.l d0,a6
   133e4:	             move.l 28(sp),d0
   133e8:	             move.l 24(sp),d1
   133ec:	             jsr -684(a6)
   133f0:	             move.l d0,20(sp)
   133f4:	             move.l 20(sp),d0
   133f8:	             move.l d0,1a878 <languageTable>
    if( languageTable == 0) {
   133fe:	             move.l 1a878 <languageTable>,d0
   13404:	         ,-- bne.s 13414 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13406:	         |   pea 19983 <PutChar+0x1fb5>
   1340c:	         |   jsr 16f2c <KPrintF>
   13412:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13414:	         '-> move.l 1a884 <gameSettings+0x4>,d0
   1341a:	             move.l d0,d1
   1341c:	             addq.l #1,d1
   1341e:	             move.l d1,16(sp)
   13422:	             clr.l 12(sp)
   13426:	             move.l 1a7a4 <SysBase>,d0
   1342c:	             movea.l d0,a6
   1342e:	             move.l 16(sp),d0
   13432:	             move.l 12(sp),d1
   13436:	             jsr -684(a6)
   1343a:	             move.l d0,8(sp)
   1343e:	             move.l 8(sp),d0
   13442:	             move.l d0,1a87c <languageName>
	if( languageName == 0) {
   13448:	             move.l 1a87c <languageName>,d0
   1344e:	         ,-- bne.s 1345e <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   13450:	         |   pea 199b9 <line.c.74a5f850+0x22>
   13456:	         |   jsr 16f2c <KPrintF>
   1345c:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1345e:	         '-> clr.l 32(sp)
   13462:	   ,-------- bra.s 134da <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13464:	,--|-------> tst.l 32(sp)
   13468:	|  |  ,----- beq.s 13478 <makeLanguageTable+0xb6>
   1346a:	|  |  |      move.l 40(sp),-(sp)
   1346e:	|  |  |      jsr 6bc <get2bytes>
   13474:	|  |  |      addq.l #4,sp
   13476:	|  |  |  ,-- bra.s 1347a <makeLanguageTable+0xb8>
   13478:	|  |  '--|-> moveq #0,d0
   1347a:	|  |     '-> movea.l 1a878 <languageTable>,a0
   13480:	|  |         move.l 32(sp),d1
   13484:	|  |         add.l d1,d1
   13486:	|  |         add.l d1,d1
   13488:	|  |         adda.l d1,a0
   1348a:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   1348c:	|  |         move.l 1a87c <languageName>,d1
   13492:	|  |         move.l 32(sp),d0
   13496:	|  |         add.l d0,d0
   13498:	|  |         add.l d0,d0
   1349a:	|  |         movea.l d1,a0
   1349c:	|  |         adda.l d0,a0
   1349e:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   134a0:	|  |         move.l 1a74e <gameVersion>,d0
   134a6:	|  |         cmpi.l #511,d0
   134ac:	|  |     ,-- ble.s 134d6 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   134ae:	|  |     |   move.l 1a884 <gameSettings+0x4>,d0
   134b4:	|  |     +-- beq.s 134d6 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   134b6:	|  |     |   move.l 1a87c <languageName>,d1
   134bc:	|  |     |   move.l 32(sp),d0
   134c0:	|  |     |   add.l d0,d0
   134c2:	|  |     |   add.l d0,d0
   134c4:	|  |     |   movea.l d1,a2
   134c6:	|  |     |   adda.l d0,a2
   134c8:	|  |     |   move.l 40(sp),-(sp)
   134cc:	|  |     |   jsr b02 <readString>
   134d2:	|  |     |   addq.l #4,sp
   134d4:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   134d6:	|  |     '-> addq.l #1,32(sp)
   134da:	|  '-------> move.l 1a884 <gameSettings+0x4>,d0
   134e0:	|            cmp.l 32(sp),d0
   134e4:	'----------- bcc.w 13464 <makeLanguageTable+0xa2>
		}
	}
}
   134e8:	             nop
   134ea:	             nop
   134ec:	             movea.l (sp)+,a2
   134ee:	             movea.l (sp)+,a6
   134f0:	             lea 28(sp),sp
   134f4:	             rts

000134f6 <readIniFile>:

void readIniFile (char * filename) {
   134f6:	                      lea -564(sp),sp
   134fa:	                      move.l a6,-(sp)
   134fc:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   134fe:	                      move.l 576(sp),-(sp)
   13502:	                      jsr b8 <copyString>
   13508:	                      addq.l #4,sp
   1350a:	                      move.l d0,-(sp)
   1350c:	                      jsr 1330a <getPrefsFilename>
   13512:	                      addq.l #4,sp
   13514:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13518:	                      move.l 562(sp),558(sp)
   1351e:	                      move.l #1005,554(sp)
   13526:	                      move.l 1a7ac <DOSBase>,d0
   1352c:	                      movea.l d0,a6
   1352e:	                      move.l 558(sp),d1
   13532:	                      move.l 554(sp),d2
   13536:	                      jsr -30(a6)
   1353a:	                      move.l d0,550(sp)
   1353e:	                      move.l 550(sp),d0
   13542:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13546:	                      clr.l 1a880 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   1354c:	                      move.w #1,1a888 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13554:	                      clr.l 1a88a <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   1355a:	                      moveq #1,d0
   1355c:	                      move.l d0,1a88e <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13562:	                      clr.w 1a892 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13568:	                      clr.w 1a894 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   1356e:	                      clr.w 1a896 <gameSettings+0x16>

	FreeVec(langName);
   13574:	                      move.l 562(sp),542(sp)
   1357a:	                      move.l 1a7a4 <SysBase>,d0
   13580:	                      movea.l d0,a6
   13582:	                      movea.l 542(sp),a1
   13586:	                      jsr -690(a6)
	langName = NULL;
   1358a:	                      clr.l 562(sp)

	if (fp) {
   1358e:	                      tst.l 546(sp)
   13592:	,-------------------- beq.w 13870 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13596:	|                     move.l sp,d0
   13598:	|                     addi.l #265,d0
   1359e:	|                     move.l #257,d1
   135a4:	|                     move.l d1,-(sp)
   135a6:	|                     clr.l -(sp)
   135a8:	|                     move.l d0,-(sp)
   135aa:	|                     jsr 16eb0 <memset>
   135b0:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   135b4:	|                     move.l sp,d0
   135b6:	|                     addq.l #8,d0
   135b8:	|                     move.l #257,d1
   135be:	|                     move.l d1,-(sp)
   135c0:	|                     clr.l -(sp)
   135c2:	|                     move.l d0,-(sp)
   135c4:	|                     jsr 16eb0 <memset>
   135ca:	|                     lea 12(sp),sp
		unsigned char here = 0;
   135ce:	|                     clr.b 571(sp)
		char readChar = ' ';
   135d2:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   135d8:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   135de:	|                     clr.w 566(sp)
		LONG tmp = 0;
   135e2:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   135e6:	|  ,----------------> move.l 546(sp),534(sp)
   135ec:	|  |                  move.l 1a7ac <DOSBase>,d0
   135f2:	|  |                  movea.l d0,a6
   135f4:	|  |                  move.l 534(sp),d1
   135f8:	|  |                  jsr -306(a6)
   135fc:	|  |                  move.l d0,530(sp)
   13600:	|  |                  move.l 530(sp),d0
   13604:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13608:	|  |                  moveq #-1,d1
   1360a:	|  |                  cmp.l 538(sp),d1
   1360e:	|  |           ,----- bne.s 1361c <readIniFile+0x126>
				readChar = '\n';
   13610:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13616:	|  |           |      clr.w 568(sp)
   1361a:	|  |           |  ,-- bra.s 13622 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   1361c:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13622:	|  |              '-> move.b 570(sp),d0
   13626:	|  |                  ext.w d0
   13628:	|  |                  movea.w d0,a0
   1362a:	|  |                  moveq #61,d0
   1362c:	|  |                  cmp.l a0,d0
   1362e:	|  |     ,----------- beq.w 137d8 <readIniFile+0x2e2>
   13632:	|  |     |            moveq #61,d1
   13634:	|  |     |            cmp.l a0,d1
   13636:	|  |  ,--|----------- blt.w 137e4 <readIniFile+0x2ee>
   1363a:	|  |  |  |            moveq #10,d0
   1363c:	|  |  |  |            cmp.l a0,d0
   1363e:	|  |  |  |        ,-- beq.s 13648 <readIniFile+0x152>
   13640:	|  |  |  |        |   moveq #13,d1
   13642:	|  |  |  |        |   cmp.l a0,d1
   13644:	|  |  +--|--------|-- bne.w 137e4 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13648:	|  |  |  |        '-> tst.w 566(sp)
   1364c:	|  |  |  |     ,----- beq.w 137c6 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13650:	|  |  |  |     |      pea 199ed <line.c.74a5f850+0x56>
   13656:	|  |  |  |     |      move.l sp,d0
   13658:	|  |  |  |     |      addi.l #269,d0
   1365e:	|  |  |  |     |      move.l d0,-(sp)
   13660:	|  |  |  |     |      jsr 1398c <strcmp>
   13666:	|  |  |  |     |      addq.l #8,sp
   13668:	|  |  |  |     |      tst.l d0
   1366a:	|  |  |  |     |  ,-- bne.s 13684 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   1366c:	|  |  |  |     |  |   move.l sp,d0
   1366e:	|  |  |  |     |  |   addq.l #8,d0
   13670:	|  |  |  |     |  |   move.l d0,-(sp)
   13672:	|  |  |  |     |  |   jsr 1387c <stringToInt>
   13678:	|  |  |  |     |  |   addq.l #4,sp
   1367a:	|  |  |  |     |  |   move.l d0,1a880 <gameSettings>
   13680:	|  |  |  |     +--|-- bra.w 137c6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13684:	|  |  |  |     |  '-> pea 199f6 <line.c.74a5f850+0x5f>
   1368a:	|  |  |  |     |      move.l sp,d0
   1368c:	|  |  |  |     |      addi.l #269,d0
   13692:	|  |  |  |     |      move.l d0,-(sp)
   13694:	|  |  |  |     |      jsr 1398c <strcmp>
   1369a:	|  |  |  |     |      addq.l #8,sp
   1369c:	|  |  |  |     |      tst.l d0
   1369e:	|  |  |  |     |  ,-- bne.s 136c4 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   136a0:	|  |  |  |     |  |   move.l sp,d0
   136a2:	|  |  |  |     |  |   addq.l #8,d0
   136a4:	|  |  |  |     |  |   move.l d0,-(sp)
   136a6:	|  |  |  |     |  |   jsr 1387c <stringToInt>
   136ac:	|  |  |  |     |  |   addq.l #4,sp
   136ae:	|  |  |  |     |  |   tst.l d0
   136b0:	|  |  |  |     |  |   seq d0
   136b2:	|  |  |  |     |  |   neg.b d0
   136b4:	|  |  |  |     |  |   move.b d0,d0
   136b6:	|  |  |  |     |  |   andi.w #255,d0
   136ba:	|  |  |  |     |  |   move.w d0,1a888 <gameSettings+0x8>
   136c0:	|  |  |  |     +--|-- bra.w 137c6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   136c4:	|  |  |  |     |  '-> pea 199fd <line.c.74a5f850+0x66>
   136ca:	|  |  |  |     |      move.l sp,d0
   136cc:	|  |  |  |     |      addi.l #269,d0
   136d2:	|  |  |  |     |      move.l d0,-(sp)
   136d4:	|  |  |  |     |      jsr 1398c <strcmp>
   136da:	|  |  |  |     |      addq.l #8,sp
   136dc:	|  |  |  |     |      tst.l d0
   136de:	|  |  |  |     |  ,-- bne.s 136f8 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   136e0:	|  |  |  |     |  |   move.l sp,d0
   136e2:	|  |  |  |     |  |   addq.l #8,d0
   136e4:	|  |  |  |     |  |   move.l d0,-(sp)
   136e6:	|  |  |  |     |  |   jsr 1387c <stringToInt>
   136ec:	|  |  |  |     |  |   addq.l #4,sp
   136ee:	|  |  |  |     |  |   move.l d0,1a88a <gameSettings+0xa>
   136f4:	|  |  |  |     +--|-- bra.w 137c6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   136f8:	|  |  |  |     |  '-> pea 19a05 <line.c.74a5f850+0x6e>
   136fe:	|  |  |  |     |      move.l sp,d0
   13700:	|  |  |  |     |      addi.l #269,d0
   13706:	|  |  |  |     |      move.l d0,-(sp)
   13708:	|  |  |  |     |      jsr 1398c <strcmp>
   1370e:	|  |  |  |     |      addq.l #8,sp
   13710:	|  |  |  |     |      tst.l d0
   13712:	|  |  |  |     |  ,-- bne.s 1372c <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13714:	|  |  |  |     |  |   move.l sp,d0
   13716:	|  |  |  |     |  |   addq.l #8,d0
   13718:	|  |  |  |     |  |   move.l d0,-(sp)
   1371a:	|  |  |  |     |  |   jsr 1387c <stringToInt>
   13720:	|  |  |  |     |  |   addq.l #4,sp
   13722:	|  |  |  |     |  |   move.l d0,1a88e <gameSettings+0xe>
   13728:	|  |  |  |     +--|-- bra.w 137c6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   1372c:	|  |  |  |     |  '-> pea 19a0f <line.c.74a5f850+0x78>
   13732:	|  |  |  |     |      move.l sp,d0
   13734:	|  |  |  |     |      addi.l #269,d0
   1373a:	|  |  |  |     |      move.l d0,-(sp)
   1373c:	|  |  |  |     |      jsr 1398c <strcmp>
   13742:	|  |  |  |     |      addq.l #8,sp
   13744:	|  |  |  |     |      tst.l d0
   13746:	|  |  |  |     |  ,-- bne.s 13760 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13748:	|  |  |  |     |  |   move.l sp,d0
   1374a:	|  |  |  |     |  |   addq.l #8,d0
   1374c:	|  |  |  |     |  |   move.l d0,-(sp)
   1374e:	|  |  |  |     |  |   jsr 1387c <stringToInt>
   13754:	|  |  |  |     |  |   addq.l #4,sp
   13756:	|  |  |  |     |  |   move.l d0,d0
   13758:	|  |  |  |     |  |   move.w d0,1a892 <gameSettings+0x12>
   1375e:	|  |  |  |     +--|-- bra.s 137c6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13760:	|  |  |  |     |  '-> pea 19a1b <line.c.74a5f850+0x84>
   13766:	|  |  |  |     |      move.l sp,d0
   13768:	|  |  |  |     |      addi.l #269,d0
   1376e:	|  |  |  |     |      move.l d0,-(sp)
   13770:	|  |  |  |     |      jsr 1398c <strcmp>
   13776:	|  |  |  |     |      addq.l #8,sp
   13778:	|  |  |  |     |      tst.l d0
   1377a:	|  |  |  |     |  ,-- bne.s 13794 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   1377c:	|  |  |  |     |  |   move.l sp,d0
   1377e:	|  |  |  |     |  |   addq.l #8,d0
   13780:	|  |  |  |     |  |   move.l d0,-(sp)
   13782:	|  |  |  |     |  |   jsr 1387c <stringToInt>
   13788:	|  |  |  |     |  |   addq.l #4,sp
   1378a:	|  |  |  |     |  |   move.l d0,d0
   1378c:	|  |  |  |     |  |   move.w d0,1a894 <gameSettings+0x14>
   13792:	|  |  |  |     +--|-- bra.s 137c6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13794:	|  |  |  |     |  '-> pea 19a29 <line.c.74a5f850+0x92>
   1379a:	|  |  |  |     |      move.l sp,d0
   1379c:	|  |  |  |     |      addi.l #269,d0
   137a2:	|  |  |  |     |      move.l d0,-(sp)
   137a4:	|  |  |  |     |      jsr 1398c <strcmp>
   137aa:	|  |  |  |     |      addq.l #8,sp
   137ac:	|  |  |  |     |      tst.l d0
   137ae:	|  |  |  |     +----- bne.s 137c6 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   137b0:	|  |  |  |     |      move.l sp,d0
   137b2:	|  |  |  |     |      addq.l #8,d0
   137b4:	|  |  |  |     |      move.l d0,-(sp)
   137b6:	|  |  |  |     |      jsr 1387c <stringToInt>
   137bc:	|  |  |  |     |      addq.l #4,sp
   137be:	|  |  |  |     |      move.l d0,d0
   137c0:	|  |  |  |     |      move.w d0,1a896 <gameSettings+0x16>
					}
				}
				here = 0;
   137c6:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   137ca:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   137ce:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   137d2:	|  |  |  |            clr.b 8(sp)
				break;
   137d6:	|  |  |  |  ,-------- bra.s 1384e <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   137d8:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   137de:	|  |  |     |         clr.b 571(sp)
				break;
   137e2:	|  |  |     +-------- bra.s 1384e <readIniFile+0x358>

				default:
				if (doingSecond) {
   137e4:	|  |  '-----|-------> tst.w 566(sp)
   137e8:	|  |        |  ,----- beq.s 1381c <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   137ea:	|  |        |  |      move.b 571(sp),d0
   137ee:	|  |        |  |      move.b d0,d1
   137f0:	|  |        |  |      addq.b #1,d1
   137f2:	|  |        |  |      move.b d1,571(sp)
   137f6:	|  |        |  |      move.b d0,d0
   137f8:	|  |        |  |      andi.l #255,d0
   137fe:	|  |        |  |      lea 572(sp),a0
   13802:	|  |        |  |      adda.l d0,a0
   13804:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   1380a:	|  |        |  |      moveq #0,d0
   1380c:	|  |        |  |      move.b 571(sp),d0
   13810:	|  |        |  |      lea 572(sp),a0
   13814:	|  |        |  |      adda.l d0,a0
   13816:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   1381a:	|  |        |  |  ,-- bra.s 1384c <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   1381c:	|  |        |  '--|-> move.b 571(sp),d0
   13820:	|  |        |     |   move.b d0,d1
   13822:	|  |        |     |   addq.b #1,d1
   13824:	|  |        |     |   move.b d1,571(sp)
   13828:	|  |        |     |   move.b d0,d0
   1382a:	|  |        |     |   andi.l #255,d0
   13830:	|  |        |     |   lea 572(sp),a0
   13834:	|  |        |     |   adda.l d0,a0
   13836:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   1383c:	|  |        |     |   moveq #0,d0
   1383e:	|  |        |     |   move.b 571(sp),d0
   13842:	|  |        |     |   lea 572(sp),a0
   13846:	|  |        |     |   adda.l d0,a0
   13848:	|  |        |     |   clr.b -307(a0)
				break;
   1384c:	|  |        |     '-> nop
			}
		} while (keepGoing);
   1384e:	|  |        '-------> tst.w 568(sp)
   13852:	|  '----------------- bne.w 135e6 <readIniFile+0xf0>

		Close(fp);
   13856:	|                     move.l 546(sp),526(sp)
   1385c:	|                     move.l 1a7ac <DOSBase>,d0
   13862:	|                     movea.l d0,a6
   13864:	|                     move.l 526(sp),d1
   13868:	|                     jsr -36(a6)
   1386c:	|                     move.l d0,522(sp)
	}
}
   13870:	'-------------------> nop
   13872:	                      move.l (sp)+,d2
   13874:	                      movea.l (sp)+,a6
   13876:	                      lea 564(sp),sp
   1387a:	                      rts

0001387c <stringToInt>:

unsigned int stringToInt (char * s) {
   1387c:	             subq.l #8,sp
	int i = 0;
   1387e:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13882:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13886:	,----------> movea.l 12(sp),a0
   1388a:	|            move.b (a0),d0
   1388c:	|            cmpi.b #47,d0
   13890:	|        ,-- ble.s 138c8 <stringToInt+0x4c>
   13892:	|        |   movea.l 12(sp),a0
   13896:	|        |   move.b (a0),d0
   13898:	|        |   cmpi.b #57,d0
   1389c:	|        +-- bgt.s 138c8 <stringToInt+0x4c>
			i *= 10;
   1389e:	|        |   move.l 4(sp),d1
   138a2:	|        |   move.l d1,d0
   138a4:	|        |   add.l d0,d0
   138a6:	|        |   add.l d0,d0
   138a8:	|        |   add.l d1,d0
   138aa:	|        |   add.l d0,d0
   138ac:	|        |   move.l d0,4(sp)
			i += *s - '0';
   138b0:	|        |   movea.l 12(sp),a0
   138b4:	|        |   move.b (a0),d0
   138b6:	|        |   ext.w d0
   138b8:	|        |   movea.w d0,a0
   138ba:	|        |   moveq #-48,d0
   138bc:	|        |   add.l a0,d0
   138be:	|        |   add.l d0,4(sp)
			s ++;
   138c2:	|        |   addq.l #1,12(sp)
   138c6:	|  ,-----|-- bra.s 13900 <stringToInt+0x84>
		} else if (*s == '-') {
   138c8:	|  |     '-> movea.l 12(sp),a0
   138cc:	|  |         move.b (a0),d0
   138ce:	|  |         cmpi.b #45,d0
   138d2:	|  |     ,-- bne.s 138ec <stringToInt+0x70>
			negative = ! negative;
   138d4:	|  |     |   tst.w 2(sp)
   138d8:	|  |     |   seq d0
   138da:	|  |     |   neg.b d0
   138dc:	|  |     |   move.b d0,d0
   138de:	|  |     |   andi.w #255,d0
   138e2:	|  |     |   move.w d0,2(sp)
			s++;
   138e6:	|  |     |   addq.l #1,12(sp)
   138ea:	+--|-----|-- bra.s 13886 <stringToInt+0xa>
		} else {
			if (negative)
   138ec:	|  |     '-> tst.w 2(sp)
   138f0:	|  |     ,-- beq.s 138fa <stringToInt+0x7e>
				return -i;
   138f2:	|  |     |   move.l 4(sp),d0
   138f6:	|  |     |   neg.l d0
   138f8:	|  |  ,--|-- bra.s 13902 <stringToInt+0x86>
			return i;
   138fa:	|  |  |  '-> move.l 4(sp),d0
   138fe:	|  |  +----- bra.s 13902 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13900:	'--'--|----X bra.s 13886 <stringToInt+0xa>
		}
	}
   13902:	      '----> addq.l #8,sp
   13904:	             rts

00013906 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13906:	    lea -28(sp),sp
   1390a:	    move.l a6,-(sp)
   1390c:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   1390e:	    pea 19a33 <line.c.74a5f850+0x9c>
   13914:	    jsr 16f2c <KPrintF>
   1391a:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   1391c:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13920:	    move.l 40(sp),30(sp)
   13926:	    move.l #1005,26(sp)
   1392e:	    move.l 1a7ac <DOSBase>,d0
   13934:	    movea.l d0,a6
   13936:	    move.l 30(sp),d1
   1393a:	    move.l 26(sp),d2
   1393e:	    jsr -30(a6)
   13942:	    move.l d0,22(sp)
   13946:	    move.l 22(sp),d0
   1394a:	    move.l d0,18(sp)
	if (tester) {
   1394e:	,-- beq.s 1397e <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13950:	|   pea 19a4d <line.c.74a5f850+0xb6>
   13956:	|   jsr 16f2c <KPrintF>
   1395c:	|   addq.l #4,sp
		retval = 1;
   1395e:	|   move.b #1,35(sp)
		Close(tester);
   13964:	|   move.l 18(sp),14(sp)
   1396a:	|   move.l 1a7ac <DOSBase>,d0
   13970:	|   movea.l d0,a6
   13972:	|   move.l 14(sp),d1
   13976:	|   jsr -36(a6)
   1397a:	|   move.l d0,10(sp)
	}
	return retval;
   1397e:	'-> move.b 35(sp),d0
   13982:	    move.l (sp)+,d2
   13984:	    movea.l (sp)+,a6
   13986:	    lea 28(sp),sp
   1398a:	    rts

0001398c <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   1398c:	   ,-- bra.s 13996 <strcmp+0xa>
    {
        s1++;
   1398e:	,--|-> addq.l #1,4(sp)
        s2++;
   13992:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13996:	|  '-> movea.l 4(sp),a0
   1399a:	|      move.b (a0),d0
   1399c:	|  ,-- beq.s 139ae <strcmp+0x22>
   1399e:	|  |   movea.l 4(sp),a0
   139a2:	|  |   move.b (a0),d1
   139a4:	|  |   movea.l 8(sp),a0
   139a8:	|  |   move.b (a0),d0
   139aa:	|  |   cmp.b d1,d0
   139ac:	'--|-- beq.s 1398e <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   139ae:	   '-> movea.l 4(sp),a0
   139b2:	       move.b (a0),d0
   139b4:	       moveq #0,d1
   139b6:	       move.b d0,d1
   139b8:	       movea.l 8(sp),a0
   139bc:	       move.b (a0),d0
   139be:	       move.b d0,d0
   139c0:	       andi.l #255,d0
   139c6:	       sub.l d0,d1
   139c8:	       move.l d1,d0
}
   139ca:	       rts

000139cc <strlen>:

long unsigned int strlen (const char *s) 
{  
   139cc:	       subq.l #4,sp
	long unsigned int i = 0;
   139ce:	       clr.l (sp)
	while(s[i]) i++; 
   139d0:	   ,-- bra.s 139d4 <strlen+0x8>
   139d2:	,--|-> addq.l #1,(sp)
   139d4:	|  '-> movea.l 8(sp),a0
   139d8:	|      adda.l (sp),a0
   139da:	|      move.b (a0),d0
   139dc:	'----- bne.s 139d2 <strlen+0x6>
	return(i);
   139de:	       move.l (sp),d0
}
   139e0:	       addq.l #4,sp
   139e2:	       rts

000139e4 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   139e4:	    nop
   139e6:	,-> move.l 8(sp),d0
   139ea:	|   move.l d0,d1
   139ec:	|   addq.l #1,d1
   139ee:	|   move.l d1,8(sp)
   139f2:	|   movea.l 4(sp),a0
   139f6:	|   lea 1(a0),a1
   139fa:	|   move.l a1,4(sp)
   139fe:	|   movea.l d0,a1
   13a00:	|   move.b (a1),d0
   13a02:	|   move.b d0,(a0)
   13a04:	|   move.b (a0),d0
   13a06:	'-- bne.s 139e6 <strcpy+0x2>
}
   13a08:	    nop
   13a0a:	    rts

00013a0c <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13a0c:	    lea -20(sp),sp
   13a10:	    move.l a6,-(sp)
   13a12:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13a14:	    move.l 32(sp),-(sp)
   13a18:	    jsr 139cc <strlen>
   13a1e:	    addq.l #4,sp
   13a20:	    move.l d0,d2
   13a22:	    move.l 36(sp),-(sp)
   13a26:	    jsr 139cc <strlen>
   13a2c:	    addq.l #4,sp
   13a2e:	    add.l d2,d0
   13a30:	    move.l d0,d1
   13a32:	    addq.l #1,d1
   13a34:	    move.l d1,20(sp)
   13a38:	    clr.l 16(sp)
   13a3c:	    move.l 1a7a4 <SysBase>,d0
   13a42:	    movea.l d0,a6
   13a44:	    move.l 20(sp),d0
   13a48:	    move.l 16(sp),d1
   13a4c:	    jsr -684(a6)
   13a50:	    move.l d0,12(sp)
   13a54:	    move.l 12(sp),d0
   13a58:	    move.l d0,8(sp)
	char * t = newString;
   13a5c:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13a62:	    nop
   13a64:	,-> move.l 32(sp),d0
   13a68:	|   move.l d0,d1
   13a6a:	|   addq.l #1,d1
   13a6c:	|   move.l d1,32(sp)
   13a70:	|   movea.l 24(sp),a0
   13a74:	|   lea 1(a0),a1
   13a78:	|   move.l a1,24(sp)
   13a7c:	|   movea.l d0,a1
   13a7e:	|   move.b (a1),d0
   13a80:	|   move.b d0,(a0)
   13a82:	|   move.b (a0),d0
   13a84:	'-- bne.s 13a64 <joinStrings+0x58>
	t--;
   13a86:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13a8a:	    nop
   13a8c:	,-> move.l 36(sp),d0
   13a90:	|   move.l d0,d1
   13a92:	|   addq.l #1,d1
   13a94:	|   move.l d1,36(sp)
   13a98:	|   movea.l 24(sp),a0
   13a9c:	|   lea 1(a0),a1
   13aa0:	|   move.l a1,24(sp)
   13aa4:	|   movea.l d0,a1
   13aa6:	|   move.b (a1),d0
   13aa8:	|   move.b d0,(a0)
   13aaa:	|   move.b (a0),d0
   13aac:	'-- bne.s 13a8c <joinStrings+0x80>

	return newString;
   13aae:	    move.l 8(sp),d0
}
   13ab2:	    move.l (sp)+,d2
   13ab4:	    movea.l (sp)+,a6
   13ab6:	    lea 20(sp),sp
   13aba:	    rts

00013abc <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13abc:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13ac0:	       moveq #10,d0
   13ac2:	       cmp.l 28(sp),d0
   13ac6:	   ,-- bne.s 13ae4 <itoa+0x28>
   13ac8:	   |   tst.l 20(sp)
   13acc:	   +-- bge.s 13ae4 <itoa+0x28>
        *str++ = '-';
   13ace:	   |   move.l 24(sp),d0
   13ad2:	   |   move.l d0,d1
   13ad4:	   |   addq.l #1,d1
   13ad6:	   |   move.l d1,24(sp)
   13ada:	   |   movea.l d0,a0
   13adc:	   |   move.b #45,(a0)
        value *= -1;
   13ae0:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13ae4:	   '-> move.l 24(sp),12(sp)
   13aea:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13af0:	   ,-> move.l 20(sp),d0
   13af4:	   |   move.l 28(sp),-(sp)
   13af8:	   |   move.l d0,-(sp)
   13afa:	   |   jsr 17964 <__modsi3>
   13b00:	   |   addq.l #8,sp
   13b02:	   |   movea.l d0,a1
   13b04:	   |   move.l 12(sp),d0
   13b08:	   |   move.l d0,d1
   13b0a:	   |   addq.l #1,d1
   13b0c:	   |   move.l d1,12(sp)
   13b10:	   |   lea 19a65 <line.c.74a5f850+0xce>,a0
   13b16:	   |   move.b (0,a1,a0.l),d1
   13b1a:	   |   movea.l d0,a0
   13b1c:	   |   move.b d1,(a0)
        value /= base;
   13b1e:	   |   move.l 28(sp),-(sp)
   13b22:	   |   move.l 24(sp),-(sp)
   13b26:	   |   jsr 17936 <__divsi3>
   13b2c:	   |   addq.l #8,sp
   13b2e:	   |   move.l d0,20(sp)
    } while (value);
   13b32:	   '-- bne.s 13af0 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13b34:	       move.l 12(sp),d0
   13b38:	       move.l d0,d1
   13b3a:	       subq.l #1,d1
   13b3c:	       move.l d1,12(sp)
   13b40:	       movea.l d0,a0
   13b42:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13b44:	       move.l 4(sp),8(sp)
   13b4a:	   ,-- bra.s 13b70 <itoa+0xb4>
        char temp = *low;
   13b4c:	,--|-> movea.l 8(sp),a0
   13b50:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13b54:	|  |   movea.l 12(sp),a0
   13b58:	|  |   move.b (a0),d0
   13b5a:	|  |   movea.l 8(sp),a0
   13b5e:	|  |   move.b d0,(a0)
        *ptr = temp;
   13b60:	|  |   movea.l 12(sp),a0
   13b64:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13b68:	|  |   addq.l #1,8(sp)
   13b6c:	|  |   subq.l #1,12(sp)
   13b70:	|  '-> move.l 8(sp),d0
   13b74:	|      cmp.l 12(sp),d0
   13b78:	'----- bcs.s 13b4c <itoa+0x90>
    }
    return rc;
   13b7a:	       move.l 4(sp),d0
}
   13b7e:	       lea 16(sp),sp
   13b82:	       rts

00013b84 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13b84:	                            lea -40(sp),sp
   13b88:	                            move.l d2,-(sp)
    char* s = str;
   13b8a:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13b90:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13b96:	   ,----------------------- bra.w 13cca <vsprintf2+0x146>
        if (*p == '%') {
   13b9a:	,--|----------------------> movea.l 36(sp),a0
   13b9e:	|  |                        move.b (a0),d0
   13ba0:	|  |                        cmpi.b #37,d0
   13ba4:	|  |  ,-------------------- bne.w 13cb0 <vsprintf2+0x12c>
            switch (*++p) {
   13ba8:	|  |  |                     addq.l #1,36(sp)
   13bac:	|  |  |                     movea.l 36(sp),a0
   13bb0:	|  |  |                     move.b (a0),d0
   13bb2:	|  |  |                     ext.w d0
   13bb4:	|  |  |                     movea.w d0,a0
   13bb6:	|  |  |                     moveq #115,d0
   13bb8:	|  |  |                     cmp.l a0,d0
   13bba:	|  |  |           ,-------- beq.s 13c32 <vsprintf2+0xae>
   13bbc:	|  |  |           |         moveq #115,d1
   13bbe:	|  |  |           |         cmp.l a0,d1
   13bc0:	|  |  |  ,--------|-------- blt.w 13c98 <vsprintf2+0x114>
   13bc4:	|  |  |  |        |         moveq #99,d2
   13bc6:	|  |  |  |        |         cmp.l a0,d2
   13bc8:	|  |  |  |  ,-----|-------- beq.w 13c70 <vsprintf2+0xec>
   13bcc:	|  |  |  |  |     |         moveq #100,d0
   13bce:	|  |  |  |  |     |         cmp.l a0,d0
   13bd0:	|  |  |  +--|-----|-------- bne.w 13c98 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13bd4:	|  |  |  |  |     |         addq.l #4,56(sp)
   13bd8:	|  |  |  |  |     |         movea.l 56(sp),a0
   13bdc:	|  |  |  |  |     |         move.l (a0),d0
   13bde:	|  |  |  |  |     |         move.l d0,d1
   13be0:	|  |  |  |  |     |         subq.l #1,d1
   13be2:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13be6:	|  |  |  |  |     |         pea a <_start+0xa>
   13bea:	|  |  |  |  |     |         lea 8(sp),a0
   13bee:	|  |  |  |  |     |         move.l a0,-(sp)
   13bf0:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13bf4:	|  |  |  |  |     |         jsr 13abc <itoa>
   13bfa:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13bfe:	|  |  |  |  |     |         lea 44(sp),a0
   13c02:	|  |  |  |  |     |         lea -40(a0),a0
   13c06:	|  |  |  |  |     |         move.l a0,28(sp)
   13c0a:	|  |  |  |  |     |     ,-- bra.s 13c26 <vsprintf2+0xa2>
                        *s++ = *b;
   13c0c:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   13c10:	|  |  |  |  |     |  |  |   move.l d0,d1
   13c12:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13c14:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13c18:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13c1c:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13c1e:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13c20:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13c22:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13c26:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   13c2a:	|  |  |  |  |     |  |      move.b (a0),d0
   13c2c:	|  |  |  |  |     |  '----- bne.s 13c0c <vsprintf2+0x88>
                    }
                    break;
   13c2e:	|  |  |  |  |  ,--|-------- bra.w 13cc6 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13c32:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   13c36:	|  |  |  |  |  |            movea.l 56(sp),a0
   13c3a:	|  |  |  |  |  |            move.l (a0),d0
   13c3c:	|  |  |  |  |  |            move.l d0,d1
   13c3e:	|  |  |  |  |  |            subq.l #1,d1
   13c40:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13c44:	|  |  |  |  |  |        ,-- bra.s 13c66 <vsprintf2+0xe2>
                        *s++ = *sval++;
   13c46:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   13c4a:	|  |  |  |  |  |     |  |   move.l d1,d2
   13c4c:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13c4e:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13c52:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13c56:	|  |  |  |  |  |     |  |   move.l d0,d2
   13c58:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13c5a:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13c5e:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13c60:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13c62:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13c64:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13c66:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   13c6a:	|  |  |  |  |  |     |      move.b (a0),d0
   13c6c:	|  |  |  |  |  |     '----- bne.s 13c46 <vsprintf2+0xc2>
                    }
                    break;
   13c6e:	|  |  |  |  |  +----------- bra.s 13cc6 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13c70:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   13c74:	|  |  |  |     |            movea.l 56(sp),a0
   13c78:	|  |  |  |     |            move.l (a0),d0
   13c7a:	|  |  |  |     |            move.l d0,d1
   13c7c:	|  |  |  |     |            subq.l #1,d1
   13c7e:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13c82:	|  |  |  |     |            move.l 40(sp),d0
   13c86:	|  |  |  |     |            move.l d0,d2
   13c88:	|  |  |  |     |            addq.l #1,d2
   13c8a:	|  |  |  |     |            move.l d2,40(sp)
   13c8e:	|  |  |  |     |            move.l 24(sp),d1
   13c92:	|  |  |  |     |            movea.l d0,a0
   13c94:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13c96:	|  |  |  |     +----------- bra.s 13cc6 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13c98:	|  |  |  '-----|----------> move.l 40(sp),d0
   13c9c:	|  |  |        |            move.l d0,d1
   13c9e:	|  |  |        |            addq.l #1,d1
   13ca0:	|  |  |        |            move.l d1,40(sp)
   13ca4:	|  |  |        |            movea.l 36(sp),a0
   13ca8:	|  |  |        |            move.b (a0),d1
   13caa:	|  |  |        |            movea.l d0,a0
   13cac:	|  |  |        |            move.b d1,(a0)
                    break;
   13cae:	|  |  |        +----------- bra.s 13cc6 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13cb0:	|  |  '--------|----------> move.l 40(sp),d0
   13cb4:	|  |           |            move.l d0,d1
   13cb6:	|  |           |            addq.l #1,d1
   13cb8:	|  |           |            move.l d1,40(sp)
   13cbc:	|  |           |            movea.l 36(sp),a0
   13cc0:	|  |           |            move.b (a0),d1
   13cc2:	|  |           |            movea.l d0,a0
   13cc4:	|  |           |            move.b d1,(a0)
        }
        p++;
   13cc6:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   13cca:	|  '----------------------> movea.l 36(sp),a0
   13cce:	|                           move.b (a0),d0
   13cd0:	'-------------------------- bne.w 13b9a <vsprintf2+0x16>
    }
    *s = '\0';
   13cd4:	                            movea.l 40(sp),a0
   13cd8:	                            clr.b (a0)
    return s - str;
   13cda:	                            move.l 40(sp),d0
   13cde:	                            sub.l 48(sp),d0
}
   13ce2:	                            move.l (sp)+,d2
   13ce4:	                            lea 40(sp),sp
   13ce8:	                            rts

00013cea <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13cea:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13cec:	moveq #16,d0
   13cee:	add.l sp,d0
   13cf0:	move.l d0,d1
   13cf2:	addq.l #4,d1
   13cf4:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   13cf8:	move.l 16(sp),d0
   13cfc:	move.l 4(sp),-(sp)
   13d00:	move.l d0,-(sp)
   13d02:	move.l 20(sp),-(sp)
   13d06:	jsr 13b84 <vsprintf2>
   13d0c:	lea 12(sp),sp
   13d10:	move.l d0,(sp)
    va_end(args);
   13d12:	clr.l 4(sp)

    return done;
   13d16:	move.l (sp),d0
}
   13d18:	addq.l #8,sp
   13d1a:	rts

00013d1c <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   13d1c:	       lea -20(sp),sp
   13d20:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13d22:	       moveq #12,d0
   13d24:	       move.l d0,20(sp)
   13d28:	       clr.l 16(sp)
   13d2c:	       move.l 1a7a4 <SysBase>,d0
   13d32:	       movea.l d0,a6
   13d34:	       move.l 20(sp),d0
   13d38:	       move.l 16(sp),d1
   13d3c:	       jsr -684(a6)
   13d40:	       move.l d0,12(sp)
   13d44:	       move.l 12(sp),d0
   13d48:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   13d4c:	   ,-- bne.s 13d52 <addVarToStack+0x36>
   13d4e:	   |   clr.w d0
   13d50:	,--|-- bra.s 13d9a <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   13d52:	|  '-> move.l 8(sp),d0
   13d56:	|      move.l d0,-(sp)
   13d58:	|      move.l 32(sp),-(sp)
   13d5c:	|      jsr 1487e <copyMain>
   13d62:	|      addq.l #8,sp
   13d64:	|      tst.w d0
   13d66:	|  ,-- bne.s 13d82 <addVarToStack+0x66>
        FreeVec(newStack);
   13d68:	|  |   move.l 8(sp),4(sp)
   13d6e:	|  |   move.l 1a7a4 <SysBase>,d0
   13d74:	|  |   movea.l d0,a6
   13d76:	|  |   movea.l 4(sp),a1
   13d7a:	|  |   jsr -690(a6)
        return FALSE;
   13d7e:	|  |   clr.w d0
   13d80:	+--|-- bra.s 13d9a <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   13d82:	|  '-> movea.l 32(sp),a0
   13d86:	|      move.l (a0),d0
   13d88:	|      movea.l 8(sp),a0
   13d8c:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13d90:	|      movea.l 32(sp),a0
   13d94:	|      move.l 8(sp),(a0)
    return TRUE;
   13d98:	|      moveq #1,d0
}
   13d9a:	'----> movea.l (sp)+,a6
   13d9c:	       lea 20(sp),sp
   13da0:	       rts

00013da2 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   13da2:	       lea -16(sp),sp
   13da6:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13da8:	       moveq #12,d0
   13daa:	       move.l d0,16(sp)
   13dae:	       clr.l 12(sp)
   13db2:	       move.l 1a7a4 <SysBase>,d0
   13db8:	       movea.l d0,a6
   13dba:	       move.l 16(sp),d0
   13dbe:	       move.l 12(sp),d1
   13dc2:	       jsr -684(a6)
   13dc6:	       move.l d0,8(sp)
   13dca:	       move.l 8(sp),d0
   13dce:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   13dd2:	   ,-- bne.s 13dd8 <addVarToStackQuick+0x36>
   13dd4:	   |   clr.w d0
   13dd6:	,--|-- bra.s 13e0e <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   13dd8:	|  '-> move.l 4(sp),d0
   13ddc:	|      pea 8 <_start+0x8>
   13de0:	|      move.l 28(sp),-(sp)
   13de4:	|      move.l d0,-(sp)
   13de6:	|      jsr 16ee0 <memcpy>
   13dec:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   13df0:	|      movea.l 24(sp),a0
   13df4:	|      clr.l (a0)

    newStack->next = *thisStack;
   13df6:	|      movea.l 28(sp),a0
   13dfa:	|      move.l (a0),d0
   13dfc:	|      movea.l 4(sp),a0
   13e00:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13e04:	|      movea.l 28(sp),a0
   13e08:	|      move.l 4(sp),(a0)
    return TRUE;
   13e0c:	|      moveq #1,d0
}
   13e0e:	'----> movea.l (sp)+,a6
   13e10:	       lea 16(sp),sp
   13e14:	       rts

00013e16 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   13e16:	       lea -16(sp),sp
   13e1a:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   13e1c:	       movea.l 24(sp),a0
   13e20:	       move.l (a0),d0
   13e22:	       moveq #1,d1
   13e24:	       cmp.l d0,d1
   13e26:	   ,-- bne.s 13e50 <addVariablesInSecond+0x3a>
   13e28:	   |   movea.l 28(sp),a0
   13e2c:	   |   move.l (a0),d0
   13e2e:	   |   moveq #1,d1
   13e30:	   |   cmp.l d0,d1
   13e32:	   +-- bne.s 13e50 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   13e34:	   |   movea.l 28(sp),a0
   13e38:	   |   move.l 4(a0),d1
   13e3c:	   |   movea.l 24(sp),a0
   13e40:	   |   move.l 4(a0),d0
   13e44:	   |   add.l d1,d0
   13e46:	   |   movea.l 28(sp),a0
   13e4a:	   |   move.l d0,4(a0)
   13e4e:	,--|-- bra.s 13eca <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   13e50:	|  '-> move.l 24(sp),-(sp)
   13e54:	|      jsr 14ab6 <getTextFromAnyVar>
   13e5a:	|      addq.l #4,sp
   13e5c:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   13e60:	|      move.l 28(sp),-(sp)
   13e64:	|      jsr 14ab6 <getTextFromAnyVar>
   13e6a:	|      addq.l #4,sp
   13e6c:	|      move.l d0,12(sp)

		unlinkVar(var2);
   13e70:	|      move.l 28(sp),-(sp)
   13e74:	|      jsr 1472e <unlinkVar>
   13e7a:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   13e7c:	|      move.l 12(sp),-(sp)
   13e80:	|      move.l 20(sp),-(sp)
   13e84:	|      jsr 13a0c <joinStrings>
   13e8a:	|      addq.l #8,sp
   13e8c:	|      movea.l 28(sp),a0
   13e90:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   13e94:	|      movea.l 28(sp),a0
   13e98:	|      moveq #3,d0
   13e9a:	|      move.l d0,(a0)
		FreeVec(string1);
   13e9c:	|      move.l 16(sp),8(sp)
   13ea2:	|      move.l 1a7a4 <SysBase>,d0
   13ea8:	|      movea.l d0,a6
   13eaa:	|      movea.l 8(sp),a1
   13eae:	|      jsr -690(a6)
		FreeVec(string2);
   13eb2:	|      move.l 12(sp),4(sp)
   13eb8:	|      move.l 1a7a4 <SysBase>,d0
   13ebe:	|      movea.l d0,a6
   13ec0:	|      movea.l 4(sp),a1
   13ec4:	|      jsr -690(a6)
	}
}
   13ec8:	|      nop
   13eca:	'----> nop
   13ecc:	       movea.l (sp)+,a6
   13ece:	       lea 16(sp),sp
   13ed2:	       rts

00013ed4 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   13ed4:	movea.l 8(sp),a0
   13ed8:	move.l 4(a0),-(sp)
   13edc:	move.l (a0),-(sp)
   13ede:	movea.l 12(sp),a0
   13ee2:	move.l 4(a0),-(sp)
   13ee6:	move.l (a0),-(sp)
   13ee8:	jsr 13f0a <compareVars>
   13eee:	lea 16(sp),sp
   13ef2:	move.l d0,-(sp)
   13ef4:	pea 1 <_start+0x1>
   13ef8:	move.l 16(sp),-(sp)
   13efc:	jsr 14dd2 <setVariable>
   13f02:	lea 12(sp),sp
}
   13f06:	nop
   13f08:	rts

00013f0a <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   13f0a:	       subq.l #4,sp
	int re = 0;
   13f0c:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   13f0e:	       move.l 8(sp),d1
   13f12:	       move.l 16(sp),d0
   13f16:	       cmp.l d1,d0
   13f18:	,----- bne.w 13fe0 <compareVars+0xd6>
		switch (var1.varType) {
   13f1c:	|      move.l 8(sp),d0
   13f20:	|      moveq #9,d1
   13f22:	|      cmp.l d0,d1
   13f24:	|  ,-- bcs.w 13fc8 <compareVars+0xbe>
   13f28:	|  |   add.l d0,d0
   13f2a:	|  |   movea.l d0,a0
   13f2c:	|  |   adda.l #81720,a0
   13f32:	|  |   move.w (a0),d0
   13f34:	|  |   jmp (13f38 <compareVars+0x2e>,pc,d0.w)
   13f38:	|  |   ori.b #-112,(a4)
   13f3c:	|  |   ori.l #5243024,(a0)
   13f42:	|  |   ori.l #7733392,(a0)
   13f48:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   13f4e:	|  |   move.l d0,(sp)
			break;
   13f50:	+--|-- bra.w 13fe0 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   13f54:	|  |   move.l 12(sp),d1
   13f58:	|  |   move.l 20(sp),d0
   13f5c:	|  |   cmp.l d1,d0
   13f5e:	|  |   seq d0
   13f60:	|  |   neg.b d0
   13f62:	|  |   move.b d0,d0
   13f64:	|  |   andi.l #255,d0
   13f6a:	|  |   move.l d0,(sp)
			break;
   13f6c:	+--|-- bra.s 13fe0 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   13f6e:	|  |   move.l 12(sp),d1
   13f72:	|  |   move.l 20(sp),d0
   13f76:	|  |   cmp.l d1,d0
   13f78:	|  |   seq d0
   13f7a:	|  |   neg.b d0
   13f7c:	|  |   move.b d0,d0
   13f7e:	|  |   andi.l #255,d0
   13f84:	|  |   move.l d0,(sp)
			break;
   13f86:	+--|-- bra.s 13fe0 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   13f88:	|  |   move.l 20(sp),d1
   13f8c:	|  |   move.l 12(sp),d0
   13f90:	|  |   move.l d1,-(sp)
   13f92:	|  |   move.l d0,-(sp)
   13f94:	|  |   jsr 1398c <strcmp>
   13f9a:	|  |   addq.l #8,sp
   13f9c:	|  |   tst.l d0
   13f9e:	|  |   seq d0
   13fa0:	|  |   neg.b d0
   13fa2:	|  |   move.b d0,d0
   13fa4:	|  |   andi.l #255,d0
   13faa:	|  |   move.l d0,(sp)
			break;
   13fac:	+--|-- bra.s 13fe0 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   13fae:	|  |   move.l 12(sp),d1
   13fb2:	|  |   move.l 20(sp),d0
   13fb6:	|  |   cmp.l d1,d0
   13fb8:	|  |   seq d0
   13fba:	|  |   neg.b d0
   13fbc:	|  |   move.b d0,d0
   13fbe:	|  |   andi.l #255,d0
   13fc4:	|  |   move.l d0,(sp)
			break;
   13fc6:	+--|-- bra.s 13fe0 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   13fc8:	|  '-> move.l 12(sp),d1
   13fcc:	|      move.l 20(sp),d0
   13fd0:	|      cmp.l d1,d0
   13fd2:	|      seq d0
   13fd4:	|      neg.b d0
   13fd6:	|      move.b d0,d0
   13fd8:	|      andi.l #255,d0
   13fde:	|      move.l d0,(sp)
		}
	}
	return re;
   13fe0:	'----> move.l (sp),d0
}
   13fe2:	       addq.l #4,sp
   13fe4:	       rts

00013fe6 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   13fe6:	             lea -16(sp),sp
   13fea:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   13fec:	             movea.l 28(sp),a0
   13ff0:	             moveq #6,d0
   13ff2:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   13ff4:	             moveq #12,d0
   13ff6:	             move.l d0,12(sp)
   13ffa:	             clr.l 8(sp)
   13ffe:	             move.l 1a7a4 <SysBase>,d0
   14004:	             movea.l d0,a6
   14006:	             move.l 12(sp),d0
   1400a:	             move.l 8(sp),d1
   1400e:	             jsr -684(a6)
   14012:	             move.l d0,4(sp)
   14016:	             move.l 4(sp),d0
   1401a:	             movea.l 28(sp),a0
   1401e:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   14022:	             movea.l 28(sp),a0
   14026:	             move.l 4(a0),d0
   1402a:	         ,-- bne.s 14032 <copyStack+0x4c>
   1402c:	         |   clr.w d0
   1402e:	,--------|-- bra.w 140b4 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   14032:	|        '-> movea.l 28(sp),a0
   14036:	|            movea.l 4(a0),a0
   1403a:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   1403c:	|            movea.l 28(sp),a0
   14040:	|            movea.l 4(a0),a0
   14044:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   14048:	|            movea.l 28(sp),a0
   1404c:	|            movea.l 4(a0),a0
   14050:	|            moveq #1,d0
   14052:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   14056:	|            movea.l 24(sp),a0
   1405a:	|            movea.l 4(a0),a0
   1405e:	|            move.l (a0),16(sp)

	while (a) {
   14062:	|     ,----- bra.s 140ac <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   14064:	|  ,--|----> movea.l 28(sp),a0
   14068:	|  |  |      move.l 4(a0),d0
   1406c:	|  |  |      move.l d0,d1
   1406e:	|  |  |      move.l 16(sp),d0
   14072:	|  |  |      move.l d1,-(sp)
   14074:	|  |  |      move.l d0,-(sp)
   14076:	|  |  |      jsr 13d1c <addVarToStack>
   1407c:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   1407e:	|  |  |      movea.l 28(sp),a0
   14082:	|  |  |      movea.l 4(a0),a0
   14086:	|  |  |      move.l 4(a0),d0
   1408a:	|  |  |  ,-- bne.s 140a2 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   1408c:	|  |  |  |   movea.l 28(sp),a0
   14090:	|  |  |  |   movea.l 4(a0),a1
   14094:	|  |  |  |   movea.l 28(sp),a0
   14098:	|  |  |  |   movea.l 4(a0),a0
   1409c:	|  |  |  |   move.l (a1),d0
   1409e:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   140a2:	|  |  |  '-> movea.l 16(sp),a0
   140a6:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   140ac:	|  |  '----> tst.l 16(sp)
   140b0:	|  '-------- bne.s 14064 <copyStack+0x7e>
	}

	return TRUE;
   140b2:	|            moveq #1,d0
}
   140b4:	'----------> movea.l (sp)+,a6
   140b6:	             lea 16(sp),sp
   140ba:	             rts

000140bc <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   140bc:	                lea -20(sp),sp
   140c0:	                move.l a6,-(sp)
   140c2:	                move.l 36(sp),d0
   140c6:	                move.w d0,d0
   140c8:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   140cc:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   140d2:	                clr.l 16(sp)

    while (*huntVar) {
   140d6:	   ,----------- bra.s 14154 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   140d8:	,--|----------> movea.l 20(sp),a0
   140dc:	|  |            movea.l (a0),a0
   140de:	|  |            movea.l 28(sp),a1
   140e2:	|  |            move.l 4(a1),-(sp)
   140e6:	|  |            move.l (a1),-(sp)
   140e8:	|  |            move.l 4(a0),-(sp)
   140ec:	|  |            move.l (a0),-(sp)
   140ee:	|  |            jsr 13f0a <compareVars>
   140f4:	|  |            lea 16(sp),sp
   140f8:	|  |            tst.l d0
   140fa:	|  |  ,-------- beq.s 14146 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   140fc:	|  |  |         movea.l 20(sp),a0
   14100:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   14104:	|  |  |         movea.l 12(sp),a0
   14108:	|  |  |         move.l 8(a0),d0
   1410c:	|  |  |         movea.l 20(sp),a0
   14110:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   14112:	|  |  |         move.l 12(sp),d0
   14116:	|  |  |         move.l d0,-(sp)
   14118:	|  |  |         jsr 1472e <unlinkVar>
   1411e:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   14120:	|  |  |         move.l 12(sp),8(sp)
   14126:	|  |  |         move.l 1a7a4 <SysBase>,d0
   1412c:	|  |  |         movea.l d0,a6
   1412e:	|  |  |         movea.l 8(sp),a1
   14132:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   14136:	|  |  |         tst.w 6(sp)
   1413a:	|  |  |     ,-- bne.s 14140 <deleteVarFromStack+0x84>
   1413c:	|  |  |     |   moveq #1,d0
   1413e:	|  |  |  ,--|-- bra.s 14162 <deleteVarFromStack+0xa6>
            reply++;
   14140:	|  |  |  |  '-> addq.l #1,16(sp)
   14144:	|  +--|--|----- bra.s 14154 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   14146:	|  |  '--|----> movea.l 20(sp),a0
   1414a:	|  |     |      move.l (a0),d0
   1414c:	|  |     |      move.l d0,d1
   1414e:	|  |     |      addq.l #8,d1
   14150:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   14154:	|  '-----|----> movea.l 20(sp),a0
   14158:	|        |      move.l (a0),d0
   1415a:	'--------|----- bne.w 140d8 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   1415e:	         |      move.l 16(sp),d0
}
   14162:	         '----> movea.l (sp)+,a6
   14164:	                lea 20(sp),sp
   14168:	                rts

0001416a <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   1416a:	       movea.l 4(sp),a0
   1416e:	       move.l 4(a0),d0
   14172:	       cmp.l 8(sp),d0
   14176:	   ,-- bhi.s 1417c <fastArrayGetByIndex+0x12>
   14178:	   |   moveq #0,d0
   1417a:	,--|-- bra.s 1418a <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   1417c:	|  '-> movea.l 4(sp),a0
   14180:	|      move.l (a0),d1
   14182:	|      move.l 8(sp),d0
   14186:	|      lsl.l #3,d0
   14188:	|      add.l d1,d0
}
   1418a:	'----> rts

0001418c <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   1418c:	                lea -32(sp),sp
   14190:	                move.l a6,-(sp)
   14192:	                move.l a2,-(sp)
    struct persona *p = NULL;
   14194:	                clr.l 36(sp)

    switch (thisVar->varType) {
   14198:	                movea.l 44(sp),a0
   1419c:	                move.l (a0),d0
   1419e:	                moveq #8,d1
   141a0:	                cmp.l d0,d1
   141a2:	            ,-- beq.s 141b0 <getCostumeFromVar+0x24>
   141a4:	            |   moveq #9,d1
   141a6:	            |   cmp.l d0,d1
   141a8:	   ,--------|-- beq.w 1425e <getCostumeFromVar+0xd2>
   141ac:	,--|--------|-- bra.w 14268 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   141b0:	|  |        '-> moveq #8,d0
   141b2:	|  |            move.l d0,28(sp)
   141b6:	|  |            clr.l 24(sp)
   141ba:	|  |            move.l 1a7a4 <SysBase>,d0
   141c0:	|  |            movea.l d0,a6
   141c2:	|  |            move.l 28(sp),d0
   141c6:	|  |            move.l 24(sp),d1
   141ca:	|  |            jsr -684(a6)
   141ce:	|  |            move.l d0,20(sp)
   141d2:	|  |            move.l 20(sp),d0
   141d6:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   141da:	|  |        ,-- bne.s 141e2 <getCostumeFromVar+0x56>
   141dc:	|  |        |   moveq #0,d0
   141de:	|  |  ,-----|-- bra.w 14292 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   141e2:	|  |  |     '-> movea.l 36(sp),a0
   141e6:	|  |  |         moveq #1,d1
   141e8:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   141ec:	|  |  |         moveq #12,d0
   141ee:	|  |  |         move.l d0,16(sp)
   141f2:	|  |  |         clr.l 12(sp)
   141f6:	|  |  |         move.l 1a7a4 <SysBase>,d0
   141fc:	|  |  |         movea.l d0,a6
   141fe:	|  |  |         move.l 16(sp),d0
   14202:	|  |  |         move.l 12(sp),d1
   14206:	|  |  |         jsr -684(a6)
   1420a:	|  |  |         move.l d0,8(sp)
   1420e:	|  |  |         move.l 8(sp),d0
   14212:	|  |  |         movea.l 36(sp),a0
   14216:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14218:	|  |  |         movea.l 36(sp),a0
   1421c:	|  |  |         move.l (a0),d0
   1421e:	|  |  |     ,-- bne.s 14224 <getCostumeFromVar+0x98>
   14220:	|  |  |     |   moveq #0,d0
   14222:	|  |  +-----|-- bra.s 14292 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   14224:	|  |  |     '-> clr.l 32(sp)
   14228:	|  |  |     ,-- bra.s 14254 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   1422a:	|  |  |  ,--|-> movea.l 44(sp),a0
   1422e:	|  |  |  |  |   move.l 4(a0),d0
   14232:	|  |  |  |  |   movea.l 36(sp),a0
   14236:	|  |  |  |  |   movea.l (a0),a0
   14238:	|  |  |  |  |   move.l 32(sp),d1
   1423c:	|  |  |  |  |   add.l d1,d1
   1423e:	|  |  |  |  |   add.l d1,d1
   14240:	|  |  |  |  |   lea (0,a0,d1.l),a2
   14244:	|  |  |  |  |   move.l d0,-(sp)
   14246:	|  |  |  |  |   jsr 9256 <copyAnim>
   1424c:	|  |  |  |  |   addq.l #4,sp
   1424e:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   14250:	|  |  |  |  |   addq.l #1,32(sp)
   14254:	|  |  |  |  '-> moveq #2,d1
   14256:	|  |  |  |      cmp.l 32(sp),d1
   1425a:	|  |  |  '----- bge.s 1422a <getCostumeFromVar+0x9e>
            }
            break;
   1425c:	|  |  |     ,-- bra.s 1428e <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   1425e:	|  '--|-----|-> movea.l 44(sp),a0
   14262:	|     |     |   move.l 4(a0),d0
   14266:	|     +-----|-- bra.s 14292 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14268:	'-----|-----|-> movea.l 44(sp),a0
   1426c:	      |     |   move.l (a0),d0
   1426e:	      |     |   add.l d0,d0
   14270:	      |     |   movea.l d0,a1
   14272:	      |     |   adda.l d0,a1
   14274:	      |     |   lea 1a680 <typeName>,a0
   1427a:	      |     |   move.l (0,a1,a0.l),d0
   1427e:	      |     |   move.l d0,-(sp)
   14280:	      |     |   pea 19ad7 <line.c.74a5f850+0x140>
   14286:	      |     |   jsr 16f2c <KPrintF>
   1428c:	      |     |   addq.l #8,sp
    }

    return p;
   1428e:	      |     '-> move.l 36(sp),d0
}
   14292:	      '-------> movea.l (sp)+,a2
   14294:	                movea.l (sp)+,a6
   14296:	                lea 32(sp),sp
   1429a:	                rts

0001429c <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   1429c:	                lea -96(sp),sp
   142a0:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   142a4:	                move.l 116(sp),-(sp)
   142a8:	                pea 19b0f <line.c.74a5f850+0x178>
   142ae:	                jsr 13a0c <joinStrings>
   142b4:	                addq.l #8,sp
   142b6:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   142ba:	            ,-- bne.s 142c2 <getSavedGamesStack+0x26>
   142bc:	            |   clr.w d0
   142be:	,-----------|-- bra.w 144d6 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   142c2:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   142c6:	|               move.l #105233,98(sp)
   142ce:	|               moveq #-2,d0
   142d0:	|               move.l d0,94(sp)
   142d4:	|               move.l 1a7ac <DOSBase>,d0
   142da:	|               movea.l d0,a6
   142dc:	|               move.l 98(sp),d1
   142e0:	|               move.l 94(sp),d2
   142e4:	|               jsr -84(a6)
   142e8:	|               move.l d0,90(sp)
   142ec:	|               move.l 90(sp),d0
   142f0:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   142f4:	|           ,-- bne.s 142fc <getSavedGamesStack+0x60>
   142f6:	|           |   clr.w d0
   142f8:	+-----------|-- bra.w 144d6 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   142fc:	|           '-> move.l #260,82(sp)
   14304:	|               move.l #65536,78(sp)
   1430c:	|               move.l 1a7a4 <SysBase>,d0
   14312:	|               movea.l d0,a6
   14314:	|               move.l 82(sp),d0
   14318:	|               move.l 78(sp),d1
   1431c:	|               jsr -684(a6)
   14320:	|               move.l d0,74(sp)
   14324:	|               move.l 74(sp),d0
   14328:	|               move.l d0,70(sp)
	if (!fib) {
   1432c:	|           ,-- bne.s 1434a <getSavedGamesStack+0xae>
		UnLock(dirLock);
   1432e:	|           |   move.l 86(sp),22(sp)
   14334:	|           |   move.l 1a7ac <DOSBase>,d0
   1433a:	|           |   movea.l d0,a6
   1433c:	|           |   move.l 22(sp),d1
   14340:	|           |   jsr -90(a6)
		return FALSE;
   14344:	|           |   clr.w d0
   14346:	+-----------|-- bra.w 144d6 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   1434a:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   1434e:	|               move.l 86(sp),66(sp)
   14354:	|               move.l 70(sp),62(sp)
   1435a:	|               move.l 1a7ac <DOSBase>,d0
   14360:	|               movea.l d0,a6
   14362:	|               move.l 66(sp),d1
   14366:	|               move.l 62(sp),d2
   1436a:	|               jsr -102(a6)
   1436e:	|               move.l d0,58(sp)
   14372:	|               move.l 58(sp),d0
   14376:	|  ,----------- beq.w 1448a <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   1437a:	|  |        ,-- bra.w 14456 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   1437e:	|  |  ,-----|-> move.l 70(sp),d2
   14382:	|  |  |     |   addq.l #8,d2
   14384:	|  |  |     |   move.l 70(sp),d0
   14388:	|  |  |     |   addq.l #8,d0
   1438a:	|  |  |     |   move.l d0,-(sp)
   1438c:	|  |  |     |   jsr 139cc <strlen>
   14392:	|  |  |     |   addq.l #4,sp
   14394:	|  |  |     |   move.l d0,d3
   14396:	|  |  |     |   move.l 116(sp),-(sp)
   1439a:	|  |  |     |   jsr 139cc <strlen>
   143a0:	|  |  |     |   addq.l #4,sp
   143a2:	|  |  |     |   move.l d3,d1
   143a4:	|  |  |     |   sub.l d0,d1
   143a6:	|  |  |     |   move.l d2,d0
   143a8:	|  |  |     |   add.l d1,d0
   143aa:	|  |  |     |   move.l 116(sp),-(sp)
   143ae:	|  |  |     |   move.l d0,-(sp)
   143b0:	|  |  |     |   jsr 1398c <strcmp>
   143b6:	|  |  |     |   addq.l #8,sp
   143b8:	|  |  |     |   tst.l d0
   143ba:	|  |  |     +-- bne.w 14456 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   143be:	|  |  |     |   move.l 70(sp),d0
   143c2:	|  |  |     |   addq.l #8,d0
   143c4:	|  |  |     |   move.l d0,-(sp)
   143c6:	|  |  |     |   jsr 139cc <strlen>
   143cc:	|  |  |     |   addq.l #4,sp
   143ce:	|  |  |     |   move.l d0,d2
   143d0:	|  |  |     |   move.l 116(sp),-(sp)
   143d4:	|  |  |     |   jsr 139cc <strlen>
   143da:	|  |  |     |   addq.l #4,sp
   143dc:	|  |  |     |   move.l d0,d1
   143de:	|  |  |     |   move.l d2,d0
   143e0:	|  |  |     |   sub.l d1,d0
   143e2:	|  |  |     |   movea.l 70(sp),a0
   143e6:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   143ea:	|  |  |     |   move.l 70(sp),d0
   143ee:	|  |  |     |   addq.l #8,d0
   143f0:	|  |  |     |   move.l d0,-(sp)
   143f2:	|  |  |     |   jsr 118 <decodeFilename>
   143f8:	|  |  |     |   addq.l #4,sp
   143fa:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   143fe:	|  |  |     |   move.l 42(sp),-(sp)
   14402:	|  |  |     |   lea 18(sp),a0
   14406:	|  |  |     |   move.l a0,-(sp)
   14408:	|  |  |     |   jsr 14702 <makeTextVar>
   1440e:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14410:	|  |  |     |   move.l 42(sp),38(sp)
   14416:	|  |  |     |   move.l 1a7a4 <SysBase>,d0
   1441c:	|  |  |     |   movea.l d0,a6
   1441e:	|  |  |     |   movea.l 38(sp),a1
   14422:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14426:	|  |  |     |   move.l 112(sp),d0
   1442a:	|  |  |     |   move.l d0,-(sp)
   1442c:	|  |  |     |   lea 18(sp),a0
   14430:	|  |  |     |   move.l a0,-(sp)
   14432:	|  |  |     |   jsr 13d1c <addVarToStack>
   14438:	|  |  |     |   addq.l #8,sp
   1443a:	|  |  |     |   tst.w d0
   1443c:	|  |  |  ,--|-- beq.s 1448e <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   1443e:	|  |  |  |  |   movea.l 112(sp),a0
   14442:	|  |  |  |  |   move.l 4(a0),d0
   14446:	|  |  |  |  +-- bne.s 14456 <getSavedGamesStack+0x1ba>
   14448:	|  |  |  |  |   movea.l 112(sp),a0
   1444c:	|  |  |  |  |   move.l (a0),d0
   1444e:	|  |  |  |  |   movea.l 112(sp),a0
   14452:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14456:	|  |  |  |  '-> move.l 86(sp),54(sp)
   1445c:	|  |  |  |      move.l 70(sp),50(sp)
   14462:	|  |  |  |      move.l 1a7ac <DOSBase>,d0
   14468:	|  |  |  |      movea.l d0,a6
   1446a:	|  |  |  |      move.l 54(sp),d1
   1446e:	|  |  |  |      move.l 50(sp),d2
   14472:	|  |  |  |      jsr -108(a6)
   14476:	|  |  |  |      move.l d0,46(sp)
   1447a:	|  |  |  |      move.l 46(sp),d0
   1447e:	|  |  '--|----- bne.w 1437e <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14482:	|  |     |      move.w #1,106(sp)
   14488:	|  |     |  ,-- bra.s 14490 <getSavedGamesStack+0x1f4>
	}

cleanup:
   1448a:	|  '-----|--|-> nop
   1448c:	|        |  +-- bra.s 14490 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1448e:	|        '--|-> nop
	FreeVec(fib);
   14490:	|           '-> move.l 70(sp),34(sp)
   14496:	|               move.l 1a7a4 <SysBase>,d0
   1449c:	|               movea.l d0,a6
   1449e:	|               movea.l 34(sp),a1
   144a2:	|               jsr -690(a6)
	UnLock(dirLock);
   144a6:	|               move.l 86(sp),30(sp)
   144ac:	|               move.l 1a7ac <DOSBase>,d0
   144b2:	|               movea.l d0,a6
   144b4:	|               move.l 30(sp),d1
   144b8:	|               jsr -90(a6)
	FreeVec(pattern);
   144bc:	|               move.l 102(sp),26(sp)
   144c2:	|               move.l 1a7a4 <SysBase>,d0
   144c8:	|               movea.l d0,a6
   144ca:	|               movea.l 26(sp),a1
   144ce:	|               jsr -690(a6)
	return result;
   144d2:	|               move.w 106(sp),d0
}
   144d6:	'-------------> movem.l (sp)+,d2-d3/a6
   144da:	                lea 96(sp),sp
   144de:	                rts

000144e0 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   144e0:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   144e2:	       movea.l 20(sp),a0
   144e6:	       move.l (a0),d0
   144e8:	       cmp.l 16(sp),d0
   144ec:	,----- beq.s 14550 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   144ee:	|      move.l 16(sp),d0
   144f2:	|      add.l d0,d0
   144f4:	|      movea.l d0,a1
   144f6:	|      adda.l d0,a1
   144f8:	|      lea 1a680 <typeName>,a0
   144fe:	|      move.l (0,a1,a0.l),d0
   14502:	|      move.l d0,-(sp)
   14504:	|      pea 19b13 <line.c.74a5f850+0x17c>
   1450a:	|      jsr 13a0c <joinStrings>
   14510:	|      addq.l #8,sp
   14512:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14516:	|      movea.l 20(sp),a0
   1451a:	|      move.l (a0),d0
   1451c:	|      add.l d0,d0
   1451e:	|      movea.l d0,a1
   14520:	|      adda.l d0,a1
   14522:	|      lea 1a680 <typeName>,a0
   14528:	|      move.l (0,a1,a0.l),d0
   1452c:	|      move.l d0,-(sp)
   1452e:	|      pea 19b55 <line.c.74a5f850+0x1be>
   14534:	|      jsr 13a0c <joinStrings>
   1453a:	|      addq.l #8,sp
   1453c:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   1453e:	|      move.l (sp),-(sp)
   14540:	|      move.l 8(sp),-(sp)
   14544:	|      jsr 16f2c <KPrintF>
   1454a:	|      addq.l #8,sp

		return FALSE;
   1454c:	|      clr.w d0
   1454e:	|  ,-- bra.s 14560 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14550:	'--|-> movea.l 20(sp),a0
   14554:	   |   move.l 4(a0),d0
   14558:	   |   movea.l 12(sp),a0
   1455c:	   |   move.l d0,(a0)
	return TRUE;
   1455e:	   |   moveq #1,d0
}
   14560:	   '-> addq.l #8,sp
   14562:	       rts

00014564 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14564:	move.l 8(sp),-(sp)
   14568:	jsr 6922 <getNumberedString>
   1456e:	addq.l #4,sp
   14570:	move.l d0,-(sp)
   14572:	move.l 8(sp),-(sp)
   14576:	jsr 14702 <makeTextVar>
   1457c:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   1457e:	movea.l 4(sp),a0
   14582:	move.l 4(a0),d0
   14586:	sne d0
   14588:	neg.b d0
   1458a:	move.b d0,d0
   1458c:	andi.w #255,d0
}
   14590:	rts

00014592 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   14592:	          subq.l #8,sp
    int size = stackSize(stacky);
   14594:	          move.l 16(sp),-(sp)
   14598:	          jsr 14e40 <stackSize>
   1459e:	          addq.l #4,sp
   145a0:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   145a4:	          move.l 4(sp),-(sp)
   145a8:	          move.l 16(sp),-(sp)
   145ac:	          jsr 145fc <makeFastArraySize>
   145b2:	          addq.l #8,sp
   145b4:	          tst.w d0
   145b6:	      ,-- bne.s 145bc <makeFastArrayFromStack+0x2a>
   145b8:	      |   clr.w d0
   145ba:	,-----|-- bra.s 145f8 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   145bc:	|     '-> movea.l 16(sp),a0
   145c0:	|         move.l (a0),(sp)
    size = 0;
   145c2:	|         clr.l 4(sp)
    while (allV) {
   145c6:	|     ,-- bra.s 145f2 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   145c8:	|  ,--|-> movea.l 12(sp),a0
   145cc:	|  |  |   movea.l 4(a0),a0
   145d0:	|  |  |   move.l (a0),d1
   145d2:	|  |  |   move.l 4(sp),d0
   145d6:	|  |  |   lsl.l #3,d0
   145d8:	|  |  |   add.l d0,d1
   145da:	|  |  |   move.l (sp),d0
   145dc:	|  |  |   move.l d1,-(sp)
   145de:	|  |  |   move.l d0,-(sp)
   145e0:	|  |  |   jsr 1487e <copyMain>
   145e6:	|  |  |   addq.l #8,sp
        size++;
   145e8:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   145ec:	|  |  |   movea.l (sp),a0
   145ee:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   145f2:	|  |  '-> tst.l (sp)
   145f4:	|  '----- bne.s 145c8 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   145f6:	|         moveq #1,d0
}
   145f8:	'-------> addq.l #8,sp
   145fa:	          rts

000145fc <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   145fc:	          lea -28(sp),sp
   14600:	          move.l a6,-(sp)
    if (size < 0) {
   14602:	          tst.l 40(sp)
   14606:	      ,-- bge.s 1461c <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14608:	      |   pea 19b9a <line.c.74a5f850+0x203>
   1460e:	      |   jsr 16f2c <KPrintF>
   14614:	      |   addq.l #4,sp
		return FALSE;
   14616:	      |   clr.w d0
   14618:	,-----|-- bra.w 146fa <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   1461c:	|     '-> move.l 36(sp),-(sp)
   14620:	|         jsr 1472e <unlinkVar>
   14626:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14628:	|         movea.l 36(sp),a0
   1462c:	|         moveq #10,d0
   1462e:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14630:	|         moveq #12,d0
   14632:	|         move.l d0,24(sp)
   14636:	|         clr.l 20(sp)
   1463a:	|         move.l 1a7a4 <SysBase>,d0
   14640:	|         movea.l d0,a6
   14642:	|         move.l 24(sp),d0
   14646:	|         move.l 20(sp),d1
   1464a:	|         jsr -684(a6)
   1464e:	|         move.l d0,16(sp)
   14652:	|         move.l 16(sp),d0
   14656:	|         movea.l 36(sp),a0
   1465a:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   1465e:	|         movea.l 36(sp),a0
   14662:	|         move.l 4(a0),d0
   14666:	|     ,-- bne.s 1466e <makeFastArraySize+0x72>
   14668:	|     |   clr.w d0
   1466a:	+-----|-- bra.w 146fa <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   1466e:	|     '-> move.l 40(sp),d0
   14672:	|         lsl.l #3,d0
   14674:	|         move.l d0,12(sp)
   14678:	|         clr.l 8(sp)
   1467c:	|         move.l 1a7a4 <SysBase>,d0
   14682:	|         movea.l d0,a6
   14684:	|         move.l 12(sp),d0
   14688:	|         move.l 8(sp),d1
   1468c:	|         jsr -684(a6)
   14690:	|         move.l d0,4(sp)
   14694:	|         move.l 4(sp),d0
   14698:	|         movea.l 36(sp),a0
   1469c:	|         movea.l 4(a0),a0
   146a0:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   146a2:	|         movea.l 36(sp),a0
   146a6:	|         movea.l 4(a0),a0
   146aa:	|         move.l (a0),d0
   146ac:	|     ,-- bne.s 146b2 <makeFastArraySize+0xb6>
   146ae:	|     |   clr.w d0
   146b0:	+-----|-- bra.s 146fa <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   146b2:	|     '-> clr.l 28(sp)
   146b6:	|     ,-- bra.s 146d2 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   146b8:	|  ,--|-> movea.l 36(sp),a0
   146bc:	|  |  |   movea.l 4(a0),a0
   146c0:	|  |  |   move.l (a0),d1
   146c2:	|  |  |   move.l 28(sp),d0
   146c6:	|  |  |   lsl.l #3,d0
   146c8:	|  |  |   movea.l d1,a0
   146ca:	|  |  |   adda.l d0,a0
   146cc:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   146ce:	|  |  |   addq.l #1,28(sp)
   146d2:	|  |  '-> move.l 28(sp),d0
   146d6:	|  |      cmp.l 40(sp),d0
   146da:	|  '----- blt.s 146b8 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   146dc:	|         movea.l 36(sp),a0
   146e0:	|         movea.l 4(a0),a0
   146e4:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   146ea:	|         movea.l 36(sp),a0
   146ee:	|         movea.l 4(a0),a0
   146f2:	|         moveq #1,d0
   146f4:	|         move.l d0,8(a0)
    return TRUE;
   146f8:	|         moveq #1,d0
}
   146fa:	'-------> movea.l (sp)+,a6
   146fc:	          lea 28(sp),sp
   14700:	          rts

00014702 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14702:	move.l 4(sp),-(sp)
   14706:	jsr 1472e <unlinkVar>
   1470c:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   1470e:	movea.l 4(sp),a0
   14712:	moveq #3,d0
   14714:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14716:	move.l 8(sp),-(sp)
   1471a:	jsr b8 <copyString>
   14720:	addq.l #4,sp
   14722:	movea.l 4(sp),a0
   14726:	move.l d0,4(a0)
}
   1472a:	nop
   1472c:	rts

0001472e <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   1472e:	                      lea -16(sp),sp
   14732:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14734:	                      movea.l 24(sp),a0
   14738:	                      move.l (a0),d0
   1473a:	                      moveq #10,d1
   1473c:	                      cmp.l d0,d1
   1473e:	            ,-------- beq.w 147f6 <unlinkVar+0xc8>
   14742:	            |         moveq #10,d1
   14744:	            |         cmp.l d0,d1
   14746:	,-----------|-------- bcs.w 1486a <unlinkVar+0x13c>
   1474a:	|           |         moveq #8,d1
   1474c:	|           |         cmp.l d0,d1
   1474e:	|  ,--------|-------- beq.w 14856 <unlinkVar+0x128>
   14752:	|  |        |         moveq #8,d1
   14754:	|  |        |         cmp.l d0,d1
   14756:	+--|--------|-------- bcs.w 1486a <unlinkVar+0x13c>
   1475a:	|  |        |         moveq #3,d1
   1475c:	|  |        |         cmp.l d0,d1
   1475e:	|  |        |     ,-- beq.s 1476a <unlinkVar+0x3c>
   14760:	|  |        |     |   moveq #6,d1
   14762:	|  |        |     |   cmp.l d0,d1
   14764:	|  |        |  ,--|-- beq.s 14790 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14766:	+--|--------|--|--|-- bra.w 1486a <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   1476a:	|  |        |  |  '-> movea.l 24(sp),a0
   1476e:	|  |        |  |      move.l 4(a0),4(sp)
   14774:	|  |        |  |      move.l 1a7a4 <SysBase>,d0
   1477a:	|  |        |  |      movea.l d0,a6
   1477c:	|  |        |  |      movea.l 4(sp),a1
   14780:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14784:	|  |        |  |      movea.l 24(sp),a0
   14788:	|  |        |  |      clr.l 4(a0)
		break;
   1478c:	|  |  ,-----|--|----- bra.w 14874 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14790:	|  |  |     |  '----> movea.l 24(sp),a0
   14794:	|  |  |     |         movea.l 4(a0),a0
   14798:	|  |  |     |         move.l 8(a0),d0
   1479c:	|  |  |     |         subq.l #1,d0
   1479e:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   147a2:	|  |  |     |         movea.l 24(sp),a0
   147a6:	|  |  |     |         movea.l 4(a0),a0
   147aa:	|  |  |     |         move.l 8(a0),d0
   147ae:	|  |  |  ,--|-------- bgt.w 1486e <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   147b2:	|  |  |  |  |     ,-- bra.s 147c6 <unlinkVar+0x98>
   147b4:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   147b8:	|  |  |  |  |  |  |   move.l 4(a0),d0
   147bc:	|  |  |  |  |  |  |   move.l d0,-(sp)
   147be:	|  |  |  |  |  |  |   jsr 14e64 <trimStack>
   147c4:	|  |  |  |  |  |  |   addq.l #4,sp
   147c6:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   147ca:	|  |  |  |  |  |      movea.l 4(a0),a0
   147ce:	|  |  |  |  |  |      move.l (a0),d0
   147d0:	|  |  |  |  |  '----- bne.s 147b4 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   147d2:	|  |  |  |  |         movea.l 24(sp),a0
   147d6:	|  |  |  |  |         move.l 4(a0),8(sp)
   147dc:	|  |  |  |  |         move.l 1a7a4 <SysBase>,d0
   147e2:	|  |  |  |  |         movea.l d0,a6
   147e4:	|  |  |  |  |         movea.l 8(sp),a1
   147e8:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   147ec:	|  |  |  |  |         movea.l 24(sp),a0
   147f0:	|  |  |  |  |         clr.l 4(a0)
		break;
   147f4:	|  |  |  +--|-------- bra.s 1486e <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   147f6:	|  |  |  |  '-------> movea.l 24(sp),a0
   147fa:	|  |  |  |            movea.l 4(a0),a0
   147fe:	|  |  |  |            move.l 8(a0),d0
   14802:	|  |  |  |            subq.l #1,d0
   14804:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14808:	|  |  |  |            movea.l 24(sp),a0
   1480c:	|  |  |  |            movea.l 4(a0),a0
   14810:	|  |  |  |            move.l 8(a0),d0
   14814:	|  |  |  |        ,-- bgt.s 14872 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14816:	|  |  |  |        |   movea.l 24(sp),a0
   1481a:	|  |  |  |        |   movea.l 4(a0),a0
   1481e:	|  |  |  |        |   move.l (a0),16(sp)
   14822:	|  |  |  |        |   move.l 1a7a4 <SysBase>,d0
   14828:	|  |  |  |        |   movea.l d0,a6
   1482a:	|  |  |  |        |   movea.l 16(sp),a1
   1482e:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14832:	|  |  |  |        |   movea.l 24(sp),a0
   14836:	|  |  |  |        |   move.l 4(a0),12(sp)
   1483c:	|  |  |  |        |   move.l 1a7a4 <SysBase>,d0
   14842:	|  |  |  |        |   movea.l d0,a6
   14844:	|  |  |  |        |   movea.l 12(sp),a1
   14848:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   1484c:	|  |  |  |        |   movea.l 24(sp),a0
   14850:	|  |  |  |        |   clr.l 4(a0)
		break;
   14854:	|  |  |  |        +-- bra.s 14872 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14856:	|  '--|--|--------|-> movea.l 24(sp),a0
   1485a:	|     |  |        |   move.l 4(a0),d0
   1485e:	|     |  |        |   move.l d0,-(sp)
   14860:	|     |  |        |   jsr 9622 <deleteAnim>
   14866:	|     |  |        |   addq.l #4,sp
		break;
   14868:	|     +--|--------|-- bra.s 14874 <unlinkVar+0x146>
		break;
   1486a:	'-----|--|--------|-> nop
   1486c:	      +--|--------|-- bra.s 14874 <unlinkVar+0x146>
		break;
   1486e:	      |  '--------|-> nop
   14870:	      +-----------|-- bra.s 14874 <unlinkVar+0x146>
		break;
   14872:	      |           '-> nop
	}
}
   14874:	      '-------------> nop
   14876:	                      movea.l (sp)+,a6
   14878:	                      lea 16(sp),sp
   1487c:	                      rts

0001487e <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   1487e:	       movea.l 4(sp),a0
   14882:	       move.l (a0),d0
   14884:	       movea.l 8(sp),a0
   14888:	       move.l d0,(a0)
	switch (to->varType) {
   1488a:	       movea.l 8(sp),a0
   1488e:	       move.l (a0),d0
   14890:	       moveq #10,d1
   14892:	       cmp.l d0,d1
   14894:	,----- bcs.w 14986 <copyMain+0x108>
   14898:	|      add.l d0,d0
   1489a:	|      movea.l d0,a0
   1489c:	|      adda.l #84136,a0
   148a2:	|      move.w (a0),d0
   148a4:	|      jmp (148a8 <copyMain+0x2a>,pc,d0.w)
   148a8:	|      .short 0x00da
   148aa:	|      ori.b #22,(a6)
   148ae:	|      ori.w #22,(a4)
   148b2:	|      ori.b #-126,(a6)
   148b6:	|      ori.b #-68,(a6)
   148ba:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   148c2:	|      move.l 4(a0),d0
   148c6:	|      movea.l 8(sp),a0
   148ca:	|      move.l d0,4(a0)
		return TRUE;
   148ce:	|      moveq #1,d0
   148d0:	|  ,-- bra.w 14998 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   148d4:	|  |   movea.l 4(sp),a0
   148d8:	|  |   move.l 4(a0),d0
   148dc:	|  |   movea.l 8(sp),a0
   148e0:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   148e4:	|  |   movea.l 8(sp),a0
   148e8:	|  |   movea.l 4(a0),a0
   148ec:	|  |   move.l 8(a0),d0
   148f0:	|  |   addq.l #1,d0
   148f2:	|  |   move.l d0,8(a0)
		return TRUE;
   148f6:	|  |   moveq #1,d0
   148f8:	|  +-- bra.w 14998 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   148fc:	|  |   movea.l 4(sp),a0
   14900:	|  |   move.l 4(a0),d0
   14904:	|  |   move.l d0,-(sp)
   14906:	|  |   jsr b8 <copyString>
   1490c:	|  |   addq.l #4,sp
   1490e:	|  |   movea.l 8(sp),a0
   14912:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14916:	|  |   movea.l 8(sp),a0
   1491a:	|  |   move.l 4(a0),d0
   1491e:	|  |   sne d0
   14920:	|  |   neg.b d0
   14922:	|  |   move.b d0,d0
   14924:	|  |   andi.w #255,d0
   14928:	|  +-- bra.s 14998 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   1492a:	|  |   movea.l 4(sp),a0
   1492e:	|  |   move.l 4(a0),d0
   14932:	|  |   movea.l 8(sp),a0
   14936:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   1493a:	|  |   movea.l 8(sp),a0
   1493e:	|  |   movea.l 4(a0),a0
   14942:	|  |   move.l 8(a0),d0
   14946:	|  |   addq.l #1,d0
   14948:	|  |   move.l d0,8(a0)
		return TRUE;
   1494c:	|  |   moveq #1,d0
   1494e:	|  +-- bra.s 14998 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14950:	|  |   movea.l 4(sp),a0
   14954:	|  |   move.l 4(a0),d0
   14958:	|  |   movea.l 8(sp),a0
   1495c:	|  |   move.l d0,4(a0)
		return TRUE;
   14960:	|  |   moveq #1,d0
   14962:	|  +-- bra.s 14998 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14964:	|  |   movea.l 4(sp),a0
   14968:	|  |   move.l 4(a0),d0
   1496c:	|  |   move.l d0,-(sp)
   1496e:	|  |   jsr 9256 <copyAnim>
   14974:	|  |   addq.l #4,sp
   14976:	|  |   movea.l 8(sp),a0
   1497a:	|  |   move.l d0,4(a0)
		return TRUE;
   1497e:	|  |   moveq #1,d0
   14980:	|  +-- bra.s 14998 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14982:	|  |   moveq #1,d0
   14984:	|  +-- bra.s 14998 <copyMain+0x11a>

		default:
		break;
   14986:	'--|-> nop
	}
	KPrintF("Unknown value type");
   14988:	   |   pea 19beb <line.c.74a5f850+0x254>
   1498e:	   |   jsr 16f2c <KPrintF>
   14994:	   |   addq.l #4,sp
	return FALSE;
   14996:	   |   clr.w d0
}
   14998:	   '-> rts

0001499a <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   1499a:	move.l 8(sp),-(sp)
   1499e:	jsr 1472e <unlinkVar>
   149a4:	addq.l #4,sp
	return copyMain(from, to);
   149a6:	move.l 8(sp),-(sp)
   149aa:	move.l 8(sp),-(sp)
   149ae:	jsr 1487e <copyMain>
   149b4:	addq.l #8,sp
}
   149b6:	rts

000149b8 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   149b8:	       movea.l 4(sp),a0
   149bc:	       move.l (a0),d0
   149be:	       moveq #8,d1
   149c0:	       cmp.l d0,d1
   149c2:	   ,-- bne.s 149d8 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   149c4:	   |   movea.l 4(sp),a0
   149c8:	   |   move.l 4(a0),d0
   149cc:	   |   move.l d0,-(sp)
   149ce:	   |   jsr 9256 <copyAnim>
   149d4:	   |   addq.l #4,sp
   149d6:	,--|-- bra.s 14a1e <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   149d8:	|  '-> movea.l 4(sp),a0
   149dc:	|      move.l (a0),d0
   149de:	|      moveq #1,d1
   149e0:	|      cmp.l d0,d1
   149e2:	|  ,-- bne.s 149f6 <getAnimationFromVar+0x3e>
   149e4:	|  |   movea.l 4(sp),a0
   149e8:	|  |   move.l 4(a0),d0
   149ec:	|  +-- bne.s 149f6 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   149ee:	|  |   jsr aa26 <makeNullAnim>
   149f4:	+--|-- bra.s 14a1e <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   149f6:	|  '-> movea.l 4(sp),a0
   149fa:	|      move.l (a0),d0
   149fc:	|      add.l d0,d0
   149fe:	|      movea.l d0,a1
   14a00:	|      adda.l d0,a1
   14a02:	|      lea 1a680 <typeName>,a0
   14a08:	|      move.l (0,a1,a0.l),d0
   14a0c:	|      move.l d0,-(sp)
   14a0e:	|      pea 19ad7 <line.c.74a5f850+0x140>
   14a14:	|      jsr 16f2c <KPrintF>
   14a1a:	|      addq.l #8,sp
	return NULL;
   14a1c:	|      moveq #0,d0
}
   14a1e:	'----> rts

00014a20 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14a20:	       movea.l 4(sp),a0
   14a24:	       move.l (a0),d0
   14a26:	       moveq #10,d1
   14a28:	       cmp.l d0,d1
   14a2a:	,----- bcs.w 14ab0 <getBoolean+0x90>
   14a2e:	|      add.l d0,d0
   14a30:	|      movea.l d0,a0
   14a32:	|      adda.l #84542,a0
   14a38:	|      move.w (a0),d0
   14a3a:	|      jmp (14a3e <getBoolean+0x1e>,pc,d0.w)
   14a3e:	|      ori.b #26,(a6)
   14a42:	|      ori.w #68,(114,a2,d0.w)
   14a48:	|      ori.w #46,(114,a2,d0.w)
   14a4e:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14a54:	|      clr.w d0
   14a56:	|  ,-- bra.s 14ab4 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14a58:	|  |   movea.l 4(sp),a0
   14a5c:	|  |   move.l 4(a0),d0
   14a60:	|  |   sne d0
   14a62:	|  |   neg.b d0
   14a64:	|  |   move.b d0,d0
   14a66:	|  |   andi.w #255,d0
   14a6a:	|  +-- bra.s 14ab4 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14a6c:	|  |   movea.l 4(sp),a0
   14a70:	|  |   movea.l 4(a0),a0
   14a74:	|  |   move.l (a0),d0
   14a76:	|  |   sne d0
   14a78:	|  |   neg.b d0
   14a7a:	|  |   move.b d0,d0
   14a7c:	|  |   andi.w #255,d0
   14a80:	|  +-- bra.s 14ab4 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14a82:	|  |   movea.l 4(sp),a0
   14a86:	|  |   movea.l 4(a0),a0
   14a8a:	|  |   move.b (a0),d0
   14a8c:	|  |   sne d0
   14a8e:	|  |   neg.b d0
   14a90:	|  |   move.b d0,d0
   14a92:	|  |   andi.w #255,d0
   14a96:	|  +-- bra.s 14ab4 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14a98:	|  |   movea.l 4(sp),a0
   14a9c:	|  |   movea.l 4(a0),a0
   14aa0:	|  |   move.l 4(a0),d0
   14aa4:	|  |   sne d0
   14aa6:	|  |   neg.b d0
   14aa8:	|  |   move.b d0,d0
   14aaa:	|  |   andi.w #255,d0
   14aae:	|  +-- bra.s 14ab4 <getBoolean+0x94>

		default:
		break;
   14ab0:	'--|-> nop
	}
	return TRUE;
   14ab2:	   |   moveq #1,d0
}
   14ab4:	   '-> rts

00014ab6 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14ab6:	      ,----------> lea -76(sp),sp
   14aba:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14abc:	      |            movea.l 84(sp),a0
   14ac0:	      |            move.l (a0),d0
   14ac2:	      |            moveq #10,d1
   14ac4:	      |            cmp.l d0,d1
   14ac6:	,-----|----------- bcs.w 14d64 <getTextFromAnyVar+0x2ae>
   14aca:	|     |            add.l d0,d0
   14acc:	|     |            movea.l d0,a0
   14ace:	|     |            adda.l #84698,a0
   14ad4:	|     |            move.w (a0),d0
   14ad6:	|     |            jmp (14ada <getTextFromAnyVar+0x24>,pc,d0.w)
   14ada:	|     |            .short 0x028a
   14adc:	|     |            bset d0,(a0)+
   14ade:	|     |            .short 0x028a
   14ae0:	|     |            ori.b #-118,(a6)
   14ae4:	|     |            andi.b #8,ccr
   14ae8:	|     |            andi.w #650,-(a0)
   14aec:	|     |            .short 0x028a
   14aee:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14af4:	|     |            move.l 4(a0),d0
   14af8:	|     |            move.l d0,-(sp)
   14afa:	|     |            jsr b8 <copyString>
   14b00:	|     |            addq.l #4,sp
   14b02:	|  ,--|----------- bra.w 14d86 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14b06:	|  |  |            pea 19bfe <graphics.c.7a652652+0xb>
   14b0c:	|  |  |            jsr b8 <copyString>
   14b12:	|  |  |            addq.l #4,sp
   14b14:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14b18:	|  |  |            clr.l 72(sp)
   14b1c:	|  |  |     ,----- bra.w 14bc6 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14b20:	|  |  |  ,--|----> pea 19c04 <graphics.c.7a652652+0x11>
   14b26:	|  |  |  |  |      move.l 80(sp),-(sp)
   14b2a:	|  |  |  |  |      jsr 13a0c <joinStrings>
   14b30:	|  |  |  |  |      addq.l #8,sp
   14b32:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14b36:	|  |  |  |  |  ,-- bne.s 14b3e <getTextFromAnyVar+0x88>
   14b38:	|  |  |  |  |  |   moveq #0,d0
   14b3a:	|  +--|--|--|--|-- bra.w 14d86 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14b3e:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   14b44:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14b4a:	|  |  |  |  |      movea.l d0,a6
   14b4c:	|  |  |  |  |      movea.l 56(sp),a1
   14b50:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14b54:	|  |  |  |  |      movea.l 84(sp),a0
   14b58:	|  |  |  |  |      movea.l 4(a0),a0
   14b5c:	|  |  |  |  |      move.l (a0),d1
   14b5e:	|  |  |  |  |      move.l 72(sp),d0
   14b62:	|  |  |  |  |      lsl.l #3,d0
   14b64:	|  |  |  |  |      add.l d1,d0
   14b66:	|  |  |  |  |      move.l d0,-(sp)
   14b68:	|  |  +--|--|----- jsr 14ab6 <getTextFromAnyVar>(pc)
   14b6c:	|  |  |  |  |      addq.l #4,sp
   14b6e:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14b72:	|  |  |  |  |      move.l 52(sp),-(sp)
   14b76:	|  |  |  |  |      move.l 64(sp),-(sp)
   14b7a:	|  |  |  |  |      jsr 13a0c <joinStrings>
   14b80:	|  |  |  |  |      addq.l #8,sp
   14b82:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14b86:	|  |  |  |  |  ,-- bne.s 14b8e <getTextFromAnyVar+0xd8>
   14b88:	|  |  |  |  |  |   moveq #0,d0
   14b8a:	|  +--|--|--|--|-- bra.w 14d86 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14b8e:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   14b94:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14b9a:	|  |  |  |  |      movea.l d0,a6
   14b9c:	|  |  |  |  |      movea.l 48(sp),a1
   14ba0:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14ba4:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14ba8:	|  |  |  |  |      move.l 60(sp),44(sp)
   14bae:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14bb4:	|  |  |  |  |      movea.l d0,a6
   14bb6:	|  |  |  |  |      movea.l 44(sp),a1
   14bba:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14bbe:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14bc2:	|  |  |  |  |      addq.l #1,72(sp)
   14bc6:	|  |  |  |  '----> movea.l 84(sp),a0
   14bca:	|  |  |  |         movea.l 4(a0),a0
   14bce:	|  |  |  |         move.l 4(a0),d0
   14bd2:	|  |  |  |         cmp.l 72(sp),d0
   14bd6:	|  |  |  '-------- bgt.w 14b20 <getTextFromAnyVar+0x6a>
			}
			return builder;
   14bda:	|  |  |            move.l 76(sp),d0
   14bde:	|  +--|----------- bra.w 14d86 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14be2:	|  |  |            pea 19c06 <graphics.c.7a652652+0x13>
   14be8:	|  |  |            jsr b8 <copyString>
   14bee:	|  |  |            addq.l #4,sp
   14bf0:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14bf4:	|  |  |            movea.l 84(sp),a0
   14bf8:	|  |  |            movea.l 4(a0),a0
   14bfc:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14c00:	|  |  |     ,----- bra.w 14ca2 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14c04:	|  |  |  ,--|----> pea 19c04 <graphics.c.7a652652+0x11>
   14c0a:	|  |  |  |  |      move.l 72(sp),-(sp)
   14c0e:	|  |  |  |  |      jsr 13a0c <joinStrings>
   14c14:	|  |  |  |  |      addq.l #8,sp
   14c16:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14c1a:	|  |  |  |  |  ,-- bne.s 14c22 <getTextFromAnyVar+0x16c>
   14c1c:	|  |  |  |  |  |   moveq #0,d0
   14c1e:	|  +--|--|--|--|-- bra.w 14d86 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14c22:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   14c28:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14c2e:	|  |  |  |  |      movea.l d0,a6
   14c30:	|  |  |  |  |      movea.l 32(sp),a1
   14c34:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14c38:	|  |  |  |  |      move.l 64(sp),d0
   14c3c:	|  |  |  |  |      move.l d0,-(sp)
   14c3e:	|  |  '--|--|----- jsr 14ab6 <getTextFromAnyVar>(pc)
   14c42:	|  |     |  |      addq.l #4,sp
   14c44:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14c48:	|  |     |  |      move.l 28(sp),-(sp)
   14c4c:	|  |     |  |      move.l 40(sp),-(sp)
   14c50:	|  |     |  |      jsr 13a0c <joinStrings>
   14c56:	|  |     |  |      addq.l #8,sp
   14c58:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14c5c:	|  |     |  |  ,-- bne.s 14c64 <getTextFromAnyVar+0x1ae>
   14c5e:	|  |     |  |  |   moveq #0,d0
   14c60:	|  +-----|--|--|-- bra.w 14d86 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14c64:	|  |     |  |  '-> move.l 28(sp),24(sp)
   14c6a:	|  |     |  |      move.l 1a7a4 <SysBase>,d0
   14c70:	|  |     |  |      movea.l d0,a6
   14c72:	|  |     |  |      movea.l 24(sp),a1
   14c76:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14c7a:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14c7e:	|  |     |  |      move.l 36(sp),20(sp)
   14c84:	|  |     |  |      move.l 1a7a4 <SysBase>,d0
   14c8a:	|  |     |  |      movea.l d0,a6
   14c8c:	|  |     |  |      movea.l 20(sp),a1
   14c90:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14c94:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14c98:	|  |     |  |      movea.l 64(sp),a0
   14c9c:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14ca2:	|  |     |  '----> tst.l 64(sp)
   14ca6:	|  |     '-------- bne.w 14c04 <getTextFromAnyVar+0x14e>
			}
			return builder;
   14caa:	|  |               move.l 68(sp),d0
   14cae:	|  +-------------- bra.w 14d86 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14cb2:	|  |               moveq #10,d0
   14cb4:	|  |               move.l d0,16(sp)
   14cb8:	|  |               clr.l 12(sp)
   14cbc:	|  |               move.l 1a7a4 <SysBase>,d0
   14cc2:	|  |               movea.l d0,a6
   14cc4:	|  |               move.l 16(sp),d0
   14cc8:	|  |               move.l 12(sp),d1
   14ccc:	|  |               jsr -684(a6)
   14cd0:	|  |               move.l d0,8(sp)
   14cd4:	|  |               move.l 8(sp),d0
   14cd8:	|  |               move.l d0,4(sp)
			if (! buff) {
   14cdc:	|  |           ,-- bne.s 14cf2 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14cde:	|  |           |   pea 19c0d <graphics.c.7a652652+0x1a>
   14ce4:	|  |           |   jsr 16f2c <KPrintF>
   14cea:	|  |           |   addq.l #4,sp
				return NULL;
   14cec:	|  |           |   moveq #0,d0
   14cee:	|  +-----------|-- bra.w 14d86 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14cf2:	|  |           '-> movea.l 84(sp),a0
   14cf6:	|  |               move.l 4(a0),d0
   14cfa:	|  |               move.l d0,-(sp)
   14cfc:	|  |               pea 19c37 <graphics.c.7a652652+0x44>
   14d02:	|  |               move.l 12(sp),-(sp)
   14d06:	|  |               jsr 13cea <sprintf>
   14d0c:	|  |               lea 12(sp),sp
			return buff;
   14d10:	|  |               move.l 4(sp),d0
   14d14:	|  +-------------- bra.s 14d86 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   14d16:	|  |               movea.l 84(sp),a0
   14d1a:	|  |               move.l 4(a0),d0
   14d1e:	|  |               move.l d0,-(sp)
   14d20:	|  |               jsr 3da2 <resourceNameFromNum>
   14d26:	|  |               addq.l #4,sp
   14d28:	|  |               move.l d0,-(sp)
   14d2a:	|  |               pea 18637 <PutChar+0xc69>
   14d30:	|  |               jsr 13a0c <joinStrings>
   14d36:	|  |               addq.l #8,sp
   14d38:	|  +-------------- bra.s 14d86 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   14d3a:	|  |               movea.l 84(sp),a0
   14d3e:	|  |               move.l 4(a0),d0
   14d42:	|  |               move.l d0,-(sp)
   14d44:	|  |               jsr d246 <findObjectType>
   14d4a:	|  |               addq.l #4,sp
   14d4c:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   14d50:	+--|-------------- beq.s 14d64 <getTextFromAnyVar+0x2ae>
   14d52:	|  |               movea.l 40(sp),a0
   14d56:	|  |               move.l (a0),d0
   14d58:	|  |               move.l d0,-(sp)
   14d5a:	|  |               jsr b8 <copyString>
   14d60:	|  |               addq.l #4,sp
   14d62:	|  +-------------- bra.s 14d86 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   14d64:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   14d66:	   |               movea.l 84(sp),a0
   14d6a:	   |               move.l (a0),d0
   14d6c:	   |               add.l d0,d0
   14d6e:	   |               movea.l d0,a1
   14d70:	   |               adda.l d0,a1
   14d72:	   |               lea 1a680 <typeName>,a0
   14d78:	   |               move.l (0,a1,a0.l),d0
   14d7c:	   |               move.l d0,-(sp)
   14d7e:	   |               jsr b8 <copyString>
   14d84:	   |               addq.l #4,sp
}
   14d86:	   '-------------> movea.l (sp)+,a6
   14d88:	                   lea 76(sp),sp
   14d8c:	                   rts

00014d8e <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   14d8e:	move.l 4(sp),-(sp)
   14d92:	jsr 1472e <unlinkVar>
   14d98:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   14d9a:	movea.l 4(sp),a0
   14d9e:	moveq #8,d0
   14da0:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   14da2:	movea.l 4(sp),a0
   14da6:	move.l 8(sp),4(a0)
}
   14dac:	nop
   14dae:	rts

00014db0 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   14db0:	move.l 4(sp),-(sp)
   14db4:	jsr 1472e <unlinkVar>
   14dba:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   14dbc:	movea.l 4(sp),a0
   14dc0:	moveq #9,d0
   14dc2:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   14dc4:	movea.l 4(sp),a0
   14dc8:	move.l 8(sp),4(a0)
}
   14dce:	nop
   14dd0:	rts

00014dd2 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   14dd2:	move.l 4(sp),-(sp)
   14dd6:	jsr 1472e <unlinkVar>
   14ddc:	addq.l #4,sp
   14dde:	movea.l 4(sp),a0
   14de2:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   14de6:	movea.l 4(sp),a0
   14dea:	move.l 12(sp),4(a0)
   14df0:	nop
   14df2:	rts

00014df4 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   14df4:	      ,-- bra.s 14e06 <stackGetByIndex+0x12>
        vS = vS->next;
   14df6:	,-----|-> movea.l 4(sp),a0
   14dfa:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   14e00:	|     +-- bne.s 14e06 <stackGetByIndex+0x12>
            return NULL;
   14e02:	|     |   moveq #0,d0
   14e04:	|  ,--|-- bra.s 14e1a <stackGetByIndex+0x26>
    while (theIndex--) {
   14e06:	|  |  '-> move.l 8(sp),d0
   14e0a:	|  |      move.l d0,d1
   14e0c:	|  |      subq.l #1,d1
   14e0e:	|  |      move.l d1,8(sp)
   14e12:	|  |      tst.l d0
   14e14:	'--|----- bne.s 14df6 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   14e16:	   |      move.l 4(sp),d0
}
   14e1a:	   '----> rts

00014e1c <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   14e1c:	          tst.l 4(sp)
   14e20:	      ,-- bne.s 14e30 <stackFindLast+0x14>
		return NULL;
   14e22:	      |   moveq #0,d0
   14e24:	,-----|-- bra.s 14e3e <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   14e26:	|  ,--|-> movea.l 4(sp),a0
   14e2a:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   14e30:	|  |  '-> movea.l 4(sp),a0
   14e34:	|  |      move.l 8(a0),d0
   14e38:	|  '----- bne.s 14e26 <stackFindLast+0xa>

	return hunt;
   14e3a:	|         move.l 4(sp),d0
}
   14e3e:	'-------> rts

00014e40 <stackSize>:

int stackSize (const struct stackHandler * me) {
   14e40:	       subq.l #8,sp
	int r = 0;
   14e42:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   14e46:	       movea.l 12(sp),a0
   14e4a:	       move.l (a0),(sp)
	while (a) {
   14e4c:	   ,-- bra.s 14e58 <stackSize+0x18>
		r ++;
   14e4e:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   14e52:	|  |   movea.l (sp),a0
   14e54:	|  |   move.l 8(a0),(sp)
	while (a) {
   14e58:	|  '-> tst.l (sp)
   14e5a:	'----- bne.s 14e4e <stackSize+0xe>
	}
	return r;
   14e5c:	       move.l 4(sp),d0
}
   14e60:	       addq.l #8,sp
   14e62:	       rts

00014e64 <trimStack>:

void trimStack (struct variableStack ** stack) {
   14e64:	subq.l #8,sp
   14e66:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   14e68:	movea.l 16(sp),a0
   14e6c:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   14e70:	movea.l 16(sp),a0
   14e74:	movea.l (a0),a0
   14e76:	move.l 8(a0),d0
   14e7a:	movea.l 16(sp),a0
   14e7e:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   14e80:	move.l 8(sp),d0
   14e84:	move.l d0,-(sp)
   14e86:	jsr 1472e <unlinkVar>
   14e8c:	addq.l #4,sp
	FreeVec(killMe);
   14e8e:	move.l 8(sp),4(sp)
   14e94:	move.l 1a7a4 <SysBase>,d0
   14e9a:	movea.l d0,a6
   14e9c:	movea.l 4(sp),a1
   14ea0:	jsr -690(a6)
   14ea4:	nop
   14ea6:	movea.l (sp)+,a6
   14ea8:	addq.l #8,sp
   14eaa:	rts

00014eac <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   14eac:	       lea -52(sp),sp
   14eb0:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   14eb2:	       pea 19c3a <graphics.c.7a652652+0x47>
   14eb8:	       jsr 16f2c <KPrintF>
   14ebe:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   14ec0:	       moveq #68,d0
   14ec2:	       move.l d0,52(sp)
   14ec6:	       clr.l 48(sp)
   14eca:	       move.l 1a7a4 <SysBase>,d0
   14ed0:	       movea.l d0,a6
   14ed2:	       move.l 52(sp),d0
   14ed6:	       move.l 48(sp),d1
   14eda:	       jsr -684(a6)
   14ede:	       move.l d0,44(sp)
   14ee2:	       move.l 44(sp),d0
   14ee6:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   14eea:	   ,-- bne.s 14ef2 <freeze+0x46>
   14eec:	   |   clr.w d0
   14eee:	,--|-- bra.w 15084 <freeze+0x1d8>

	CstFreeze();
   14ef2:	|  '-> jsr 1c2a <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   14ef8:	|      move.l 1a840 <sceneWidth>,d0
   14efe:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   14f02:	|      move.l 1a844 <sceneHeight>,d0
   14f08:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   14f0c:	|      move.l 1a840 <sceneWidth>,d0
   14f12:	|      movea.l 40(sp),a0
   14f16:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   14f1a:	|      move.l 1a844 <sceneHeight>,d0
   14f20:	|      movea.l 40(sp),a0
   14f24:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   14f28:	|      move.l 1a85e <cameraX>,d0
   14f2e:	|      movea.l 40(sp),a0
   14f32:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   14f36:	|      move.l 1a862 <cameraY>,d0
   14f3c:	|      movea.l 40(sp),a0
   14f40:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   14f44:	|      move.l 1a142 <cameraZoom>,d0
   14f4a:	|      movea.l 40(sp),a0
   14f4e:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   14f52:	|      move.w #1,1a84c <backdropExists>

	newFreezer -> allPeople = allPeople;
   14f5a:	|      move.l 1a808 <allPeople>,d0
   14f60:	|      movea.l 40(sp),a0
   14f64:	|      move.l d0,(a0)
	allPeople = NULL;
   14f66:	|      clr.l 1a808 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   14f6c:	|      moveq #42,d0
   14f6e:	|      move.l d0,28(sp)
   14f72:	|      clr.l 24(sp)
   14f76:	|      move.l 1a7a4 <SysBase>,d0
   14f7c:	|      movea.l d0,a6
   14f7e:	|      move.l 28(sp),d0
   14f82:	|      move.l 24(sp),d1
   14f86:	|      jsr -684(a6)
   14f8a:	|      move.l d0,20(sp)
   14f8e:	|      move.l 20(sp),d0
   14f92:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   14f96:	|  ,-- bne.s 14f9e <freeze+0xf2>
   14f98:	|  |   clr.w d0
   14f9a:	+--|-- bra.w 15084 <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   14f9e:	|  '-> move.l 1a8b4 <allScreenRegions>,d0
   14fa4:	|      movea.l 40(sp),a0
   14fa8:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   14fac:	|      clr.l 1a8b4 <allScreenRegions>
	overRegion = NULL;
   14fb2:	|      clr.l 1a8b8 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   14fb8:	|      move.l 1a6aa <mouseCursorAnim>,d0
   14fbe:	|      movea.l 40(sp),a0
   14fc2:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   14fc6:	|      move.l 1a6ae <mouseCursorFrameNum>,d0
   14fcc:	|      movea.l 40(sp),a0
   14fd0:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   14fd4:	|      jsr aa26 <makeNullAnim>
   14fda:	|      move.l d0,1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   14fe0:	|      clr.l 1a6ae <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   14fe6:	|      move.l 1a804 <zBuffer>,d0
   14fec:	|      movea.l 40(sp),a0
   14ff0:	|      move.l d0,60(a0)
	zBuffer = NULL;
   14ff4:	|      clr.l 1a804 <zBuffer>

	newFreezer -> speech = speech;
   14ffa:	|      move.l 1a800 <speech>,d0
   15000:	|      movea.l 40(sp),a0
   15004:	|      move.l d0,20(a0)
	initSpeech ();
   15008:	|      jsr 7b54 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   1500e:	|      move.l 1a11c <currentEvents>,d0
   15014:	|      movea.l 40(sp),a0
   15018:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   1501c:	|      moveq #28,d0
   1501e:	|      move.l d0,12(sp)
   15022:	|      clr.l 8(sp)
   15026:	|      move.l 1a7a4 <SysBase>,d0
   1502c:	|      movea.l d0,a6
   1502e:	|      move.l 12(sp),d0
   15032:	|      move.l 8(sp),d1
   15036:	|      jsr -684(a6)
   1503a:	|      move.l d0,4(sp)
   1503e:	|      move.l 4(sp),d0
   15042:	|      move.l d0,1a11c <currentEvents>
	if (!currentEvents) return FALSE;
   15048:	|      move.l 1a11c <currentEvents>,d0
   1504e:	|  ,-- bne.s 15054 <freeze+0x1a8>
   15050:	|  |   clr.w d0
   15052:	+--|-- bra.s 15084 <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   15054:	|  '-> move.l 1a11c <currentEvents>,d0
   1505a:	|      pea 1c <_start+0x1c>
   1505e:	|      clr.l -(sp)
   15060:	|      move.l d0,-(sp)
   15062:	|      jsr 16eb0 <memset>
   15068:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   1506c:	|      move.l 1a898 <frozenStuff>,d0
   15072:	|      movea.l 40(sp),a0
   15076:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   1507a:	|      move.l 40(sp),1a898 <frozenStuff>

	return TRUE;
   15082:	|      moveq #1,d0
}
   15084:	'----> movea.l (sp)+,a6
   15086:	       lea 52(sp),sp
   1508a:	       rts

0001508c <howFrozen>:

int howFrozen () {
   1508c:	       subq.l #8,sp
	int a = 0;
   1508e:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   15092:	       move.l 1a898 <frozenStuff>,(sp)
	while (f) {
   15098:	   ,-- bra.s 150a4 <howFrozen+0x18>
		a ++;
   1509a:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   1509e:	|  |   movea.l (sp),a0
   150a0:	|  |   move.l 64(a0),(sp)
	while (f) {
   150a4:	|  '-> tst.l (sp)
   150a6:	'----- bne.s 1509a <howFrozen+0xe>
	}
	return a;
   150a8:	       move.l 4(sp),d0
}
   150ac:	       addq.l #8,sp
   150ae:	       rts

000150b0 <unfreeze>:

void unfreeze () {
   150b0:	       lea -16(sp),sp
   150b4:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   150b6:	       move.l 1a898 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   150be:	       move.l 1a898 <frozenStuff>,d0
   150c4:	,----- beq.w 152fc <unfreeze+0x24c>

	CstUnfreeze();
   150c8:	|      jsr 39d0 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   150ce:	|      movea.l 1a898 <frozenStuff>,a0
   150d4:	|      move.l 48(a0),d0
   150d8:	|      move.l d0,1a840 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   150de:	|      movea.l 1a898 <frozenStuff>,a0
   150e4:	|      move.l 52(a0),d0
   150e8:	|      move.l d0,1a844 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   150ee:	|      movea.l 1a898 <frozenStuff>,a0
   150f4:	|      move.l 40(a0),d0
   150f8:	|      move.l d0,1a85e <cameraX>
	cameraY = frozenStuff -> cameraY;
   150fe:	|      movea.l 1a898 <frozenStuff>,a0
   15104:	|      move.l 44(a0),d0
   15108:	|      move.l d0,1a862 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   1510e:	|      move.l 1a760 <input+0xa>,d0
   15114:	|      move.l d0,-(sp)
   15116:	|      jsr 1735e <__floatsisf>
   1511c:	|      addq.l #4,sp
   1511e:	|      move.l d0,d1
   15120:	|      move.l 1a142 <cameraZoom>,d0
   15126:	|      move.l d0,-(sp)
   15128:	|      move.l d1,-(sp)
   1512a:	|      jsr 17410 <__mulsf3>
   15130:	|      addq.l #8,sp
   15132:	|      move.l d0,-(sp)
   15134:	|      jsr 172f6 <__fixsfsi>
   1513a:	|      addq.l #4,sp
   1513c:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   15142:	|      move.l 1a764 <input+0xe>,d0
   15148:	|      move.l d0,-(sp)
   1514a:	|      jsr 1735e <__floatsisf>
   15150:	|      addq.l #4,sp
   15152:	|      move.l d0,d1
   15154:	|      move.l 1a142 <cameraZoom>,d0
   1515a:	|      move.l d0,-(sp)
   1515c:	|      move.l d1,-(sp)
   1515e:	|      jsr 17410 <__mulsf3>
   15164:	|      addq.l #8,sp
   15166:	|      move.l d0,-(sp)
   15168:	|      jsr 172f6 <__fixsfsi>
   1516e:	|      addq.l #4,sp
   15170:	|      move.l d0,1a764 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15176:	|      movea.l 1a898 <frozenStuff>,a0
   1517c:	|      move.l 56(a0),d0
   15180:	|      move.l d0,1a142 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15186:	|      move.l 1a760 <input+0xa>,d0
   1518c:	|      move.l d0,-(sp)
   1518e:	|      jsr 1735e <__floatsisf>
   15194:	|      addq.l #4,sp
   15196:	|      move.l d0,d1
   15198:	|      move.l 1a142 <cameraZoom>,d0
   1519e:	|      move.l d0,-(sp)
   151a0:	|      move.l d1,-(sp)
   151a2:	|      jsr 17214 <__divsf3>
   151a8:	|      addq.l #8,sp
   151aa:	|      move.l d0,-(sp)
   151ac:	|      jsr 172f6 <__fixsfsi>
   151b2:	|      addq.l #4,sp
   151b4:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   151ba:	|      move.l 1a764 <input+0xe>,d0
   151c0:	|      move.l d0,-(sp)
   151c2:	|      jsr 1735e <__floatsisf>
   151c8:	|      addq.l #4,sp
   151ca:	|      move.l d0,d1
   151cc:	|      move.l 1a142 <cameraZoom>,d0
   151d2:	|      move.l d0,-(sp)
   151d4:	|      move.l d1,-(sp)
   151d6:	|      jsr 17214 <__divsf3>
   151dc:	|      addq.l #8,sp
   151de:	|      move.l d0,-(sp)
   151e0:	|      jsr 172f6 <__fixsfsi>
   151e6:	|      addq.l #4,sp
   151e8:	|      move.l d0,1a764 <input+0xe>

	killAllPeople ();
   151ee:	|      jsr a72e <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   151f4:	|      movea.l 1a898 <frozenStuff>,a0
   151fa:	|      move.l (a0),d0
   151fc:	|      move.l d0,1a808 <allPeople>

	killAllRegions ();
   15202:	|      jsr 15758 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15208:	|      movea.l 1a898 <frozenStuff>,a0
   1520e:	|      move.l 4(a0),d0
   15212:	|      move.l d0,1a8b4 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15218:	|      move.l 1a6aa <mouseCursorAnim>,d0
   1521e:	|      move.l d0,-(sp)
   15220:	|      jsr 9622 <deleteAnim>
   15226:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15228:	|      movea.l 1a898 <frozenStuff>,a0
   1522e:	|      move.l 32(a0),d0
   15232:	|      move.l d0,1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15238:	|      movea.l 1a898 <frozenStuff>,a0
   1523e:	|      move.l 36(a0),d0
   15242:	|      move.l d0,1a6ae <mouseCursorFrameNum>

	killZBuffer ();
   15248:	|      jsr 83c8 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   1524e:	|      movea.l 1a898 <frozenStuff>,a0
   15254:	|      move.l 60(a0),d0
   15258:	|      move.l d0,1a804 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   1525e:	|      move.l 1a11c <currentEvents>,d0
   15264:	|  ,-- beq.s 1527e <unfreeze+0x1ce>
   15266:	|  |   move.l 1a11c <currentEvents>,12(sp)
   1526e:	|  |   move.l 1a7a4 <SysBase>,d0
   15274:	|  |   movea.l d0,a6
   15276:	|  |   movea.l 12(sp),a1
   1527a:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   1527e:	|  '-> movea.l 1a898 <frozenStuff>,a0
   15284:	|      move.l 28(a0),d0
   15288:	|      move.l d0,1a11c <currentEvents>

	killAllSpeech ();
   1528e:	|      jsr 7bec <killAllSpeech>
	if (speech) FreeVec(speech);
   15294:	|      move.l 1a800 <speech>,d0
   1529a:	|  ,-- beq.s 152b4 <unfreeze+0x204>
   1529c:	|  |   move.l 1a800 <speech>,8(sp)
   152a4:	|  |   move.l 1a7a4 <SysBase>,d0
   152aa:	|  |   movea.l d0,a6
   152ac:	|  |   movea.l 8(sp),a1
   152b0:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   152b4:	|  '-> movea.l 1a898 <frozenStuff>,a0
   152ba:	|      move.l 20(a0),d0
   152be:	|      move.l d0,1a800 <speech>

	frozenStuff = frozenStuff -> next;
   152c4:	|      movea.l 1a898 <frozenStuff>,a0
   152ca:	|      move.l 64(a0),d0
   152ce:	|      move.l d0,1a898 <frozenStuff>

	overRegion = NULL;
   152d4:	|      clr.l 1a8b8 <overRegion>
	if (killMe) FreeVec(killMe);
   152da:	|      tst.l 16(sp)
   152de:	|  ,-- beq.s 152f6 <unfreeze+0x246>
   152e0:	|  |   move.l 16(sp),4(sp)
   152e6:	|  |   move.l 1a7a4 <SysBase>,d0
   152ec:	|  |   movea.l d0,a6
   152ee:	|  |   movea.l 4(sp),a1
   152f2:	|  |   jsr -690(a6)
	killMe = NULL;
   152f6:	|  '-> clr.l 16(sp)
   152fa:	|  ,-- bra.s 152fe <unfreeze+0x24e>
	if (! frozenStuff) return;
   152fc:	'--|-> nop
}
   152fe:	   '-> movea.l (sp)+,a6
   15300:	       lea 16(sp),sp
   15304:	       rts

00015306 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15306:	pea 19c4c <graphics.c.7a652652+0x59>
   1530c:	jsr 16f2c <KPrintF>
   15312:	addq.l #4,sp
	return FALSE;
   15314:	clr.w d0
}
   15316:	rts

00015318 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15318:	          lea -32(sp),sp
   1531c:	          move.l a6,-(sp)
   1531e:	          move.l d2,-(sp)
	unsigned int a = 0;
   15320:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15324:	          move.l 1a8a4 <fontOrderString>,d0
   1532a:	      ,-- beq.s 15344 <loadFont+0x2c>
   1532c:	      |   move.l 1a8a4 <fontOrderString>,24(sp)
   15334:	      |   move.l 1a7a4 <SysBase>,d0
   1533a:	      |   movea.l d0,a6
   1533c:	      |   movea.l 24(sp),a1
   15340:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15344:	      '-> move.l 48(sp),-(sp)
   15348:	          jsr b8 <copyString>
   1534e:	          addq.l #4,sp
   15350:	          move.l d0,1a8a4 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15356:	          move.l 1a8b0 <theFont>,d0
   1535c:	      ,-- beq.s 1536e <loadFont+0x56>
   1535e:	      |   move.l 1a8b0 <theFont>,d0
   15364:	      |   move.l d0,-(sp)
   15366:	      |   jsr 8706 <forgetSpriteBank>
   1536c:	      |   addq.l #4,sp
	theFont = NULL;
   1536e:	      '-> clr.l 1a8b0 <theFont>

	loadedFontNum = filenum;
   15374:	          move.l 44(sp),1a8a0 <loadedFontNum>

	fontTableSize = 0;
   1537c:	          clr.l 1a8ac <fontTableSize>
	char *tmp = charOrder;
   15382:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   15388:	   ,----- bra.s 153c4 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   1538a:	,--|----> movea.l 32(sp),a0
   1538e:	|  |      move.b (a0),d0
   15390:	|  |      ext.w d0
   15392:	|  |      movea.w d0,a0
   15394:	|  |      move.l 1a8ac <fontTableSize>,d0
   1539a:	|  |      move.l d0,d0
   1539c:	|  |      move.b d0,d0
   1539e:	|  |      andi.l #255,d0
   153a4:	|  |      cmp.l a0,d0
   153a6:	|  |  ,-- bge.s 153b8 <loadFont+0xa0>
   153a8:	|  |  |   movea.l 32(sp),a0
   153ac:	|  |  |   move.b (a0),d0
   153ae:	|  |  |   ext.w d0
   153b0:	|  |  |   movea.w d0,a0
   153b2:	|  |  |   move.l a0,1a8ac <fontTableSize>
		*tmp++;
   153b8:	|  |  '-> move.l 32(sp),d0
   153bc:	|  |      move.l d0,d1
   153be:	|  |      addq.l #1,d1
   153c0:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   153c4:	|  '----> movea.l 32(sp),a0
   153c8:	|         move.b (a0),d0
   153ca:	'-------- bne.s 1538a <loadFont+0x72>
	}
	fontTableSize++;
   153cc:	          move.l 1a8ac <fontTableSize>,d0
   153d2:	          addq.l #1,d0
   153d4:	          move.l d0,1a8ac <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   153da:	          move.l 1a8a8 <fontTable>,d0
   153e0:	      ,-- beq.s 153fa <loadFont+0xe2>
   153e2:	      |   move.l 1a8a8 <fontTable>,20(sp)
   153ea:	      |   move.l 1a7a4 <SysBase>,d0
   153f0:	      |   movea.l d0,a6
   153f2:	      |   movea.l 20(sp),a1
   153f6:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   153fa:	      '-> move.l 1a8ac <fontTableSize>,d0
   15400:	          add.l d0,d0
   15402:	          add.l d0,d0
   15404:	          move.l d0,16(sp)
   15408:	          clr.l 12(sp)
   1540c:	          move.l 1a7a4 <SysBase>,d0
   15412:	          movea.l d0,a6
   15414:	          move.l 16(sp),d0
   15418:	          move.l 12(sp),d1
   1541c:	          jsr -684(a6)
   15420:	          move.l d0,8(sp)
   15424:	          move.l 8(sp),d0
   15428:	          move.l d0,1a8a8 <fontTable>
	if (!fontTable) return FALSE;
   1542e:	          move.l 1a8a8 <fontTable>,d0
   15434:	      ,-- bne.s 1543c <loadFont+0x124>
   15436:	      |   clr.w d0
   15438:	,-----|-- bra.w 154e2 <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   1543c:	|     '-> clr.l 36(sp)
   15440:	|     ,-- bra.s 1545a <loadFont+0x142>
		fontTable[a] = 0;
   15442:	|  ,--|-> move.l 1a8a8 <fontTable>,d1
   15448:	|  |  |   move.l 36(sp),d0
   1544c:	|  |  |   add.l d0,d0
   1544e:	|  |  |   add.l d0,d0
   15450:	|  |  |   movea.l d1,a0
   15452:	|  |  |   adda.l d0,a0
   15454:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15456:	|  |  |   addq.l #1,36(sp)
   1545a:	|  |  '-> move.l 1a8ac <fontTableSize>,d0
   15460:	|  |      cmp.l 36(sp),d0
   15464:	|  '----- bhi.s 15442 <loadFont+0x12a>
	}
	a = 0;
   15466:	|         clr.l 36(sp)
	int i = 0;
   1546a:	|         clr.l 28(sp)
	tmp = charOrder;
   1546e:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15474:	|     ,-- bra.s 154a4 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15476:	|  ,--|-> move.l 1a8a8 <fontTable>,d1
   1547c:	|  |  |   move.l 32(sp),d0
   15480:	|  |  |   move.l d0,d2
   15482:	|  |  |   addq.l #1,d2
   15484:	|  |  |   move.l d2,32(sp)
   15488:	|  |  |   movea.l d0,a0
   1548a:	|  |  |   move.b (a0),d0
   1548c:	|  |  |   ext.w d0
   1548e:	|  |  |   movea.w d0,a0
   15490:	|  |  |   move.l a0,d0
   15492:	|  |  |   add.l a0,d0
   15494:	|  |  |   add.l d0,d0
   15496:	|  |  |   movea.l d1,a0
   15498:	|  |  |   adda.l d0,a0
   1549a:	|  |  |   move.l 28(sp),d0
   1549e:	|  |  |   move.l d0,(a0)
		i++;
   154a0:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   154a4:	|  |  '-> movea.l 32(sp),a0
   154a8:	|  |      move.b (a0),d0
   154aa:	|  '----- bne.s 15476 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   154ac:	|         move.l 44(sp),-(sp)
   154b0:	|         jsr 15c6a <loadBankForAnim>
   154b6:	|         addq.l #4,sp
   154b8:	|         move.l d0,1a8b0 <theFont>
	if (!theFont) {
   154be:	|         move.l 1a8b0 <theFont>,d0
   154c4:	|     ,-- bne.s 154d8 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   154c6:	|     |   pea 19c73 <graphics.c.7a652652+0x80>
   154cc:	|     |   jsr 16f2c <KPrintF>
   154d2:	|     |   addq.l #4,sp
		return FALSE;
   154d4:	|     |   clr.w d0
   154d6:	+-----|-- bra.s 154e2 <loadFont+0x1ca>
	}
	fontHeight = h;
   154d8:	|     '-> move.l 52(sp),1a89c <fontHeight>
	return TRUE;
   154e0:	|         moveq #1,d0
}
   154e2:	'-------> move.l (sp)+,d2
   154e4:	          movea.l (sp)+,a6
   154e6:	          lea 32(sp),sp
   154ea:	          rts

000154ec <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   154ec:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   154f0:	                clr.l 4(sp)

    if (!fontTableSize) return;
   154f4:	                move.l 1a8ac <fontTableSize>,d0
   154fa:	,-------------- beq.w 155c2 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   154fe:	|               move.w 1a6a8 <fontSpace>,d0
   15504:	|               asr.w #1,d0
   15506:	|               ext.l d0
   15508:	|               add.l d0,20(sp)
	char *tmp = theText;
   1550c:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15512:	|     ,-------- bra.w 155b6 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15516:	|  ,--|-------> movea.l 1a8b0 <theFont>,a0
   1551c:	|  |  |         movea.l 16(a0),a0
   15520:	|  |  |         movea.l 8(sp),a1
   15524:	|  |  |         move.b (a1),d0
   15526:	|  |  |         move.b d0,d0
   15528:	|  |  |         andi.l #255,d0
   1552e:	|  |  |         move.l 1a8ac <fontTableSize>,d1
   15534:	|  |  |         cmp.l d0,d1
   15536:	|  |  |  ,----- bls.s 15562 <pasteStringToBackdrop+0x76>
   15538:	|  |  |  |      move.l 1a8a8 <fontTable>,d1
   1553e:	|  |  |  |      movea.l 8(sp),a1
   15542:	|  |  |  |      move.b (a1),d0
   15544:	|  |  |  |      move.b d0,d0
   15546:	|  |  |  |      andi.l #255,d0
   1554c:	|  |  |  |      add.l d0,d0
   1554e:	|  |  |  |      add.l d0,d0
   15550:	|  |  |  |      movea.l d1,a1
   15552:	|  |  |  |      adda.l d0,a1
   15554:	|  |  |  |      move.l (a1),d1
   15556:	|  |  |  |      move.l d1,d0
   15558:	|  |  |  |      lsl.l #3,d0
   1555a:	|  |  |  |      sub.l d1,d0
   1555c:	|  |  |  |      add.l d0,d0
   1555e:	|  |  |  |      add.l d0,d0
   15560:	|  |  |  |  ,-- bra.s 15564 <pasteStringToBackdrop+0x78>
   15562:	|  |  |  '--|-> moveq #0,d0
   15564:	|  |  |     '-> adda.l d0,a0
   15566:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15568:	|  |  |         move.l 24(sp),d1
   1556c:	|  |  |         movea.l (sp),a0
   1556e:	|  |  |         move.l 12(a0),d0
   15572:	|  |  |         move.l d0,d0
   15574:	|  |  |         sub.w d0,d1
   15576:	|  |  |         move.w d1,d0
   15578:	|  |  |         movea.w d0,a1
   1557a:	|  |  |         move.l 20(sp),d1
   1557e:	|  |  |         movea.l (sp),a0
   15580:	|  |  |         move.l 8(a0),d0
   15584:	|  |  |         move.l d0,d0
   15586:	|  |  |         sub.w d0,d1
   15588:	|  |  |         move.w d1,d0
   1558a:	|  |  |         movea.w d0,a0
   1558c:	|  |  |         move.l a1,-(sp)
   1558e:	|  |  |         move.l a0,-(sp)
   15590:	|  |  |         move.l 8(sp),-(sp)
   15594:	|  |  |         jsr 2242 <CstPasteChar>
   1559a:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   1559e:	|  |  |         movea.l (sp),a0
   155a0:	|  |  |         move.l (a0),d1
   155a2:	|  |  |         move.w 1a6a8 <fontSpace>,d0
   155a8:	|  |  |         movea.w d0,a0
   155aa:	|  |  |         move.l d1,d0
   155ac:	|  |  |         add.l a0,d0
   155ae:	|  |  |         add.l d0,20(sp)
		tmp++;
   155b2:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   155b6:	|  |  '-------> movea.l 8(sp),a0
   155ba:	|  |            move.b (a0),d0
   155bc:	|  '----------- bne.w 15516 <pasteStringToBackdrop+0x2a>
   155c0:	|           ,-- bra.s 155c4 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   155c2:	'-----------|-> nop
    }
}
   155c4:	            '-> lea 12(sp),sp
   155c8:	                rts

000155ca <stringWidth>:


int stringWidth (char * theText) {
   155ca:	       subq.l #8,sp
	int a = 0;
   155cc:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   155d0:	       clr.l (sp)

	if (! fontTableSize) return 0;
   155d2:	       move.l 1a8ac <fontTableSize>,d0
   155d8:	,----- bne.s 155de <stringWidth+0x14>
   155da:	|      moveq #0,d0
   155dc:	|  ,-- bra.s 155e0 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   155de:	'--|-> move.l (sp),d0
}
   155e0:	   '-> addq.l #8,sp
   155e2:	       rts

000155e4 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   155e4:	       lea -16(sp),sp
   155e8:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   155ea:	       moveq #36,d0
   155ec:	       move.l d0,16(sp)
   155f0:	       clr.l 12(sp)
   155f4:	       move.l 1a7a4 <SysBase>,d0
   155fa:	       movea.l d0,a6
   155fc:	       move.l 16(sp),d0
   15600:	       move.l 12(sp),d1
   15604:	       jsr -684(a6)
   15608:	       move.l d0,8(sp)
   1560c:	       move.l 8(sp),d0
   15610:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15614:	   ,-- bne.s 1561c <addScreenRegion+0x38>
   15616:	   |   clr.w d0
   15618:	,--|-- bra.w 1569c <addScreenRegion+0xb8>
    newRegion->di = di;
   1561c:	|  '-> movea.l 4(sp),a0
   15620:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15626:	|      movea.l 4(sp),a0
   1562a:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1562e:	|      movea.l 4(sp),a0
   15632:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15638:	|      movea.l 4(sp),a0
   1563c:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15642:	|      movea.l 4(sp),a0
   15646:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   1564c:	|      movea.l 4(sp),a0
   15650:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15656:	|      movea.l 4(sp),a0
   1565a:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15660:	|      move.l 52(sp),-(sp)
   15664:	|      jsr d336 <loadObjectType>
   1566a:	|      addq.l #4,sp
   1566c:	|      movea.l 4(sp),a0
   15670:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15674:	|      move.l 1a8b4 <allScreenRegions>,d0
   1567a:	|      movea.l 4(sp),a0
   1567e:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15682:	|      move.l 4(sp),1a8b4 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   1568a:	|      movea.l 4(sp),a0
   1568e:	|      move.l 28(a0),d0
   15692:	|      sne d0
   15694:	|      neg.b d0
   15696:	|      move.b d0,d0
   15698:	|      andi.w #255,d0
}
   1569c:	'----> movea.l (sp)+,a6
   1569e:	       lea 16(sp),sp
   156a2:	       rts

000156a4 <getOverRegion>:

void getOverRegion () {
   156a4:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   156a6:	             move.l 1a8b4 <allScreenRegions>,(sp)
	while (thisRegion) {
   156ac:	   ,-------- bra.s 1571a <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   156ae:	,--|-------> move.l 1a760 <input+0xa>,d0
   156b4:	|  |         movea.l (sp),a0
   156b6:	|  |         movea.l (a0),a0
   156b8:	|  |         move.l 1a85e <cameraX>,d1
   156be:	|  |         suba.l d1,a0
   156c0:	|  |         cmpa.l d0,a0
   156c2:	|  |  ,----- bgt.s 15714 <getOverRegion+0x70>
   156c4:	|  |  |      move.l 1a764 <input+0xe>,d0
   156ca:	|  |  |      movea.l (sp),a0
   156cc:	|  |  |      movea.l 4(a0),a0
   156d0:	|  |  |      move.l 1a862 <cameraY>,d1
   156d6:	|  |  |      suba.l d1,a0
   156d8:	|  |  |      cmpa.l d0,a0
   156da:	|  |  +----- bgt.s 15714 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   156dc:	|  |  |      move.l 1a760 <input+0xa>,d0
   156e2:	|  |  |      movea.l (sp),a0
   156e4:	|  |  |      movea.l 8(a0),a0
   156e8:	|  |  |      move.l 1a85e <cameraX>,d1
   156ee:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   156f0:	|  |  |      cmpa.l d0,a0
   156f2:	|  |  +----- blt.s 15714 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   156f4:	|  |  |      move.l 1a764 <input+0xe>,d0
   156fa:	|  |  |      movea.l (sp),a0
   156fc:	|  |  |      movea.l 12(a0),a0
   15700:	|  |  |      move.l 1a862 <cameraY>,d1
   15706:	|  |  |      suba.l d1,a0
   15708:	|  |  |      cmpa.l d0,a0
   1570a:	|  |  +----- blt.s 15714 <getOverRegion+0x70>
			overRegion = thisRegion;
   1570c:	|  |  |      move.l (sp),1a8b8 <overRegion>
			return;
   15712:	|  |  |  ,-- bra.s 15726 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15714:	|  |  '--|-> movea.l (sp),a0
   15716:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   1571a:	|  '-----|-> tst.l (sp)
   1571c:	'--------|-- bne.s 156ae <getOverRegion+0xa>
	}
	overRegion = NULL;
   1571e:	         |   clr.l 1a8b8 <overRegion>
	return;
   15724:	         |   nop
}
   15726:	         '-> addq.l #4,sp
   15728:	             rts

0001572a <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   1572a:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1572c:	             move.l 1a8b4 <allScreenRegions>,(sp)

	while (thisRegion) {
   15732:	   ,-------- bra.s 1574e <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15734:	,--|-------> movea.l (sp),a0
   15736:	|  |         movea.l 28(a0),a0
   1573a:	|  |         move.l 4(a0),d0
   1573e:	|  |         cmp.l 8(sp),d0
   15742:	|  |     ,-- bne.s 15748 <getRegionForObject+0x1e>
			return thisRegion;
   15744:	|  |     |   move.l (sp),d0
   15746:	|  |  ,--|-- bra.s 15754 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15748:	|  |  |  '-> movea.l (sp),a0
   1574a:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   1574e:	|  '--|----> tst.l (sp)
   15750:	'-----|----- bne.s 15734 <getRegionForObject+0xa>
	}

	return NULL;
   15752:	      |      moveq #0,d0
}
   15754:	      '----> addq.l #4,sp
   15756:	             rts

00015758 <killAllRegions>:

void killAllRegions () {
   15758:	       subq.l #8,sp
   1575a:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1575c:	   ,-- bra.s 1579e <killAllRegions+0x46>
		killRegion = allScreenRegions;
   1575e:	,--|-> move.l 1a8b4 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15766:	|  |   movea.l 1a8b4 <allScreenRegions>,a0
   1576c:	|  |   move.l 32(a0),d0
   15770:	|  |   move.l d0,1a8b4 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15776:	|  |   movea.l 8(sp),a0
   1577a:	|  |   move.l 28(a0),d0
   1577e:	|  |   move.l d0,-(sp)
   15780:	|  |   jsr d5ee <removeObjectType>
   15786:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15788:	|  |   move.l 8(sp),4(sp)
   1578e:	|  |   move.l 1a7a4 <SysBase>,d0
   15794:	|  |   movea.l d0,a6
   15796:	|  |   movea.l 4(sp),a1
   1579a:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   1579e:	|  '-> move.l 1a8b4 <allScreenRegions>,d0
   157a4:	'----- bne.s 1575e <killAllRegions+0x6>
	}
	overRegion = NULL;
   157a6:	       clr.l 1a8b8 <overRegion>
}
   157ac:	       nop
   157ae:	       movea.l (sp)+,a6
   157b0:	       addq.l #8,sp
   157b2:	       rts

000157b4 <loadRegions>:

void loadRegions (BPTR fp) {
   157b4:	       lea -24(sp),sp
   157b8:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   157ba:	       move.l 32(sp),-(sp)
   157be:	       jsr 6bc <get2bytes>
   157c4:	       addq.l #4,sp
   157c6:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   157ca:	       move.l #108724,20(sp)

	while (numRegions --) {
   157d2:	   ,-- bra.w 158b0 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   157d6:	,--|-> moveq #36,d0
   157d8:	|  |   move.l d0,16(sp)
   157dc:	|  |   clr.l 12(sp)
   157e0:	|  |   move.l 1a7a4 <SysBase>,d0
   157e6:	|  |   movea.l d0,a6
   157e8:	|  |   move.l 16(sp),d0
   157ec:	|  |   move.l 12(sp),d1
   157f0:	|  |   jsr -684(a6)
   157f4:	|  |   move.l d0,8(sp)
   157f8:	|  |   move.l 8(sp),d0
   157fc:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15800:	|  |   movea.l 20(sp),a0
   15804:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15808:	|  |   moveq #32,d1
   1580a:	|  |   add.l 4(sp),d1
   1580e:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15812:	|  |   move.l 32(sp),-(sp)
   15816:	|  |   jsr 6bc <get2bytes>
   1581c:	|  |   addq.l #4,sp
   1581e:	|  |   movea.l 4(sp),a0
   15822:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15824:	|  |   move.l 32(sp),-(sp)
   15828:	|  |   jsr 6bc <get2bytes>
   1582e:	|  |   addq.l #4,sp
   15830:	|  |   movea.l 4(sp),a0
   15834:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15838:	|  |   move.l 32(sp),-(sp)
   1583c:	|  |   jsr 6bc <get2bytes>
   15842:	|  |   addq.l #4,sp
   15844:	|  |   movea.l 4(sp),a0
   15848:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   1584c:	|  |   move.l 32(sp),-(sp)
   15850:	|  |   jsr 6bc <get2bytes>
   15856:	|  |   addq.l #4,sp
   15858:	|  |   movea.l 4(sp),a0
   1585c:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15860:	|  |   move.l 32(sp),-(sp)
   15864:	|  |   jsr 6bc <get2bytes>
   1586a:	|  |   addq.l #4,sp
   1586c:	|  |   movea.l 4(sp),a0
   15870:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15874:	|  |   move.l 32(sp),-(sp)
   15878:	|  |   jsr 6bc <get2bytes>
   1587e:	|  |   addq.l #4,sp
   15880:	|  |   movea.l 4(sp),a0
   15884:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15888:	|  |   move.l 32(sp),-(sp)
   1588c:	|  |   jsr 6bc <get2bytes>
   15892:	|  |   addq.l #4,sp
   15894:	|  |   movea.l 4(sp),a0
   15898:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   1589c:	|  |   move.l 32(sp),-(sp)
   158a0:	|  |   jsr d2e4 <loadObjectRef>
   158a6:	|  |   addq.l #4,sp
   158a8:	|  |   movea.l 4(sp),a0
   158ac:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   158b0:	|  '-> move.l 24(sp),d0
   158b4:	|      move.l d0,d1
   158b6:	|      subq.l #1,d1
   158b8:	|      move.l d1,24(sp)
   158bc:	|      tst.l d0
   158be:	'----- bne.w 157d6 <loadRegions+0x22>
	}
	* pointy = NULL;
   158c2:	       movea.l 20(sp),a0
   158c6:	       clr.l (a0)
}
   158c8:	       nop
   158ca:	       movea.l (sp)+,a6
   158cc:	       lea 24(sp),sp
   158d0:	       rts

000158d2 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   158d2:	             lea -12(sp),sp
   158d6:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   158d8:	             move.l #108724,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   158e0:	   ,-------- bra.s 1595a <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   158e2:	,--|-------> movea.l 12(sp),a0
   158e6:	|  |         movea.l (a0),a0
   158e8:	|  |         movea.l 28(a0),a0
   158ec:	|  |         move.l 4(a0),d0
   158f0:	|  |         cmp.l 20(sp),d0
   158f4:	|  |  ,----- bne.s 1594c <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   158f6:	|  |  |      movea.l 12(sp),a0
   158fa:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   158fe:	|  |  |      movea.l 8(sp),a0
   15902:	|  |  |      move.l 32(a0),d0
   15906:	|  |  |      movea.l 12(sp),a0
   1590a:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   1590c:	|  |  |      movea.l 8(sp),a0
   15910:	|  |  |      move.l 28(a0),d0
   15914:	|  |  |      move.l d0,-(sp)
   15916:	|  |  |      jsr d5ee <removeObjectType>
   1591c:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   1591e:	|  |  |      move.l 1a8b8 <overRegion>,d0
   15924:	|  |  |      cmp.l 8(sp),d0
   15928:	|  |  |  ,-- bne.s 15930 <removeScreenRegion+0x5e>
   1592a:	|  |  |  |   clr.l 1a8b8 <overRegion>
            FreeVec(killMe);
   15930:	|  |  |  '-> move.l 8(sp),4(sp)
   15936:	|  |  |      move.l 1a7a4 <SysBase>,d0
   1593c:	|  |  |      movea.l d0,a6
   1593e:	|  |  |      movea.l 4(sp),a1
   15942:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15946:	|  |  |      clr.l 8(sp)
   1594a:	|  +--|----- bra.s 1595a <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   1594c:	|  |  '----> movea.l 12(sp),a0
   15950:	|  |         move.l (a0),d0
   15952:	|  |         moveq #32,d1
   15954:	|  |         add.l d0,d1
   15956:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   1595a:	|  '-------> movea.l 12(sp),a0
   1595e:	|            move.l (a0),d0
   15960:	'----------- bne.s 158e2 <removeScreenRegion+0x10>
        }
    }
}
   15962:	             nop
   15964:	             nop
   15966:	             movea.l (sp)+,a6
   15968:	             lea 12(sp),sp
   1596c:	             rts

0001596e <saveRegions>:

void saveRegions (BPTR fp) {
   1596e:	       subq.l #8,sp
	int numRegions = 0;
   15970:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15974:	       move.l 1a8b4 <allScreenRegions>,(sp)
	while (thisRegion) {
   1597a:	   ,-- bra.s 15986 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   1597c:	,--|-> movea.l (sp),a0
   1597e:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15982:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15986:	|  '-> tst.l (sp)
   15988:	'----- bne.s 1597c <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   1598a:	       move.l 12(sp),-(sp)
   1598e:	       move.l 8(sp),-(sp)
   15992:	       jsr 8d0 <put2bytes>
   15998:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   1599a:	       move.l 1a8b4 <allScreenRegions>,(sp)
	while (thisRegion) {
   159a0:	,----- bra.w 15a48 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   159a4:	|  ,-> movea.l (sp),a0
   159a6:	|  |   move.l (a0),d0
   159a8:	|  |   move.l 12(sp),-(sp)
   159ac:	|  |   move.l d0,-(sp)
   159ae:	|  |   jsr 8d0 <put2bytes>
   159b4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   159b6:	|  |   movea.l (sp),a0
   159b8:	|  |   move.l 4(a0),d0
   159bc:	|  |   move.l 12(sp),-(sp)
   159c0:	|  |   move.l d0,-(sp)
   159c2:	|  |   jsr 8d0 <put2bytes>
   159c8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   159ca:	|  |   movea.l (sp),a0
   159cc:	|  |   move.l 8(a0),d0
   159d0:	|  |   move.l 12(sp),-(sp)
   159d4:	|  |   move.l d0,-(sp)
   159d6:	|  |   jsr 8d0 <put2bytes>
   159dc:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   159de:	|  |   movea.l (sp),a0
   159e0:	|  |   move.l 12(a0),d0
   159e4:	|  |   move.l 12(sp),-(sp)
   159e8:	|  |   move.l d0,-(sp)
   159ea:	|  |   jsr 8d0 <put2bytes>
   159f0:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   159f2:	|  |   movea.l (sp),a0
   159f4:	|  |   move.l 16(a0),d0
   159f8:	|  |   move.l 12(sp),-(sp)
   159fc:	|  |   move.l d0,-(sp)
   159fe:	|  |   jsr 8d0 <put2bytes>
   15a04:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15a06:	|  |   movea.l (sp),a0
   15a08:	|  |   move.l 20(a0),d0
   15a0c:	|  |   move.l 12(sp),-(sp)
   15a10:	|  |   move.l d0,-(sp)
   15a12:	|  |   jsr 8d0 <put2bytes>
   15a18:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15a1a:	|  |   movea.l (sp),a0
   15a1c:	|  |   move.l 24(a0),d0
   15a20:	|  |   move.l 12(sp),-(sp)
   15a24:	|  |   move.l d0,-(sp)
   15a26:	|  |   jsr 8d0 <put2bytes>
   15a2c:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15a2e:	|  |   movea.l (sp),a0
   15a30:	|  |   move.l 28(a0),d0
   15a34:	|  |   move.l 12(sp),-(sp)
   15a38:	|  |   move.l d0,-(sp)
   15a3a:	|  |   jsr d68e <saveObjectRef>
   15a40:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15a42:	|  |   movea.l (sp),a0
   15a44:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15a48:	'--|-> tst.l (sp)
   15a4a:	   '-- bne.w 159a4 <saveRegions+0x36>
	}
}
   15a4e:	       nop
   15a50:	       nop
   15a52:	       addq.l #8,sp
   15a54:	       rts

00015a56 <showBoxes>:

void showBoxes () {
   15a56:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15a58:	       move.l 1a8b4 <allScreenRegions>,(sp)

	while (huntRegion) {
   15a5e:	,----- bra.w 15afa <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15a62:	|  ,-> movea.l (sp),a0
   15a64:	|  |   move.l 12(a0),d0
   15a68:	|  |   movea.l d0,a1
   15a6a:	|  |   movea.l (sp),a0
   15a6c:	|  |   move.l 4(a0),d0
   15a70:	|  |   move.l d0,d1
   15a72:	|  |   movea.l (sp),a0
   15a74:	|  |   move.l (a0),d0
   15a76:	|  |   move.l a1,-(sp)
   15a78:	|  |   move.l d1,-(sp)
   15a7a:	|  |   move.l d0,-(sp)
   15a7c:	|  |   jsr cf72 <drawVerticalLine>
   15a82:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15a86:	|  |   movea.l (sp),a0
   15a88:	|  |   move.l 12(a0),d0
   15a8c:	|  |   movea.l d0,a1
   15a8e:	|  |   movea.l (sp),a0
   15a90:	|  |   move.l 4(a0),d0
   15a94:	|  |   move.l d0,d1
   15a96:	|  |   movea.l (sp),a0
   15a98:	|  |   move.l 8(a0),d0
   15a9c:	|  |   move.l a1,-(sp)
   15a9e:	|  |   move.l d1,-(sp)
   15aa0:	|  |   move.l d0,-(sp)
   15aa2:	|  |   jsr cf72 <drawVerticalLine>
   15aa8:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15aac:	|  |   movea.l (sp),a0
   15aae:	|  |   move.l 8(a0),d0
   15ab2:	|  |   movea.l d0,a1
   15ab4:	|  |   movea.l (sp),a0
   15ab6:	|  |   move.l 4(a0),d0
   15aba:	|  |   move.l d0,d1
   15abc:	|  |   movea.l (sp),a0
   15abe:	|  |   move.l (a0),d0
   15ac0:	|  |   move.l a1,-(sp)
   15ac2:	|  |   move.l d1,-(sp)
   15ac4:	|  |   move.l d0,-(sp)
   15ac6:	|  |   jsr cf4c <drawHorizontalLine>
   15acc:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15ad0:	|  |   movea.l (sp),a0
   15ad2:	|  |   move.l 8(a0),d0
   15ad6:	|  |   movea.l d0,a1
   15ad8:	|  |   movea.l (sp),a0
   15ada:	|  |   move.l 12(a0),d0
   15ade:	|  |   move.l d0,d1
   15ae0:	|  |   movea.l (sp),a0
   15ae2:	|  |   move.l (a0),d0
   15ae4:	|  |   move.l a1,-(sp)
   15ae6:	|  |   move.l d1,-(sp)
   15ae8:	|  |   move.l d0,-(sp)
   15aea:	|  |   jsr cf4c <drawHorizontalLine>
   15af0:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15af4:	|  |   movea.l (sp),a0
   15af6:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15afa:	'--|-> tst.l (sp)
   15afc:	   '-- bne.w 15a62 <showBoxes+0xc>
	}
   15b00:	       nop
   15b02:	       nop
   15b04:	       addq.l #4,sp
   15b06:	       rts

00015b08 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15b08:	       lea -88(sp),sp
   15b0c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15b0e:	       move.l 1a7a4 <SysBase>,d0
   15b14:	       movea.l d0,a6
   15b16:	       jsr -666(a6)
   15b1a:	       move.l d0,88(sp)
   15b1e:	       move.l 88(sp),d0
   15b22:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15b26:	       move.l 84(sp),80(sp)
   15b2c:	       moveq #40,d0
   15b2e:	       move.l d0,76(sp)
   15b32:	       move.l 1a7a4 <SysBase>,d0
   15b38:	       movea.l d0,a6
   15b3a:	       movea.l 80(sp),a0
   15b3e:	       move.l 76(sp),d0
   15b42:	       jsr -654(a6)
   15b46:	       move.l d0,72(sp)
   15b4a:	       move.l 72(sp),d0
   15b4e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15b52:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15b58:	       move.l #105613,60(sp)
   15b60:	       clr.l 56(sp)
   15b64:	       move.l 64(sp),52(sp)
   15b6a:	       clr.l 48(sp)
   15b6e:	       move.l 1a7a4 <SysBase>,d0
   15b74:	       movea.l d0,a6
   15b76:	       movea.l 60(sp),a0
   15b7a:	       move.l 56(sp),d0
   15b7e:	       movea.l 52(sp),a1
   15b82:	       move.l 48(sp),d1
   15b86:	       jsr -444(a6)
   15b8a:	       move.b d0,47(sp)
   15b8e:	       move.b 47(sp),d0
   15b92:	   ,-- beq.s 15ba8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15b94:	   |   pea 19c9a <graphics.c.7a652652+0xa7>
   15b9a:	   |   jsr 16f2c <KPrintF>
   15ba0:	   |   addq.l #4,sp
        return 0;
   15ba2:	   |   moveq #0,d0
   15ba4:	,--|-- bra.w 15c62 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15ba8:	|  '-> movea.l 64(sp),a0
   15bac:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15bb2:	|      lea 92(sp),a0
   15bb6:	|      lea -86(a0),a0
   15bba:	|      move.l a0,38(sp)
   15bbe:	|      movea.l 42(sp),a6
   15bc2:	|      movea.l 38(sp),a0
   15bc6:	|      jsr -60(a6)
   15bca:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15bce:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15bd4:	|      move.l #1103515245,-(sp)
   15bda:	|      move.l 34(sp),-(sp)
   15bde:	|      jsr 178b8 <__mulsi3>
   15be4:	|      addq.l #8,sp
   15be6:	|      addi.l #12345,d0
   15bec:	|      move.l d0,d1
   15bee:	|      bclr #31,d1
   15bf2:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15bf6:	|      move.l 30(sp),d0
   15bfa:	|      pea 64 <_start+0x64>
   15bfe:	|      move.l d0,-(sp)
   15c00:	|      jsr 17992 <__umodsi3>
   15c06:	|      addq.l #8,sp
   15c08:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15c0c:	|      move.l 26(sp),-(sp)
   15c10:	|      pea 19cb7 <graphics.c.7a652652+0xc4>
   15c16:	|      jsr 16f2c <KPrintF>
   15c1c:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15c1e:	|      move.l 64(sp),22(sp)
   15c24:	|      move.l 1a7a4 <SysBase>,d0
   15c2a:	|      movea.l d0,a6
   15c2c:	|      movea.l 22(sp),a1
   15c30:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15c34:	|      move.l 64(sp),18(sp)
   15c3a:	|      move.l 1a7a4 <SysBase>,d0
   15c40:	|      movea.l d0,a6
   15c42:	|      movea.l 18(sp),a0
   15c46:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15c4a:	|      move.l 84(sp),14(sp)
   15c50:	|      move.l 1a7a4 <SysBase>,d0
   15c56:	|      movea.l d0,a6
   15c58:	|      movea.l 14(sp),a0
   15c5c:	|      jsr -672(a6)
    return 0;
   15c60:	|      moveq #0,d0
   15c62:	'----> movea.l (sp)+,a6
   15c64:	       lea 88(sp),sp
   15c68:	       rts

00015c6a <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15c6a:	             lea -20(sp),sp
   15c6e:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15c70:	             move.l 1a8bc <allLoadedBanks>,20(sp)
	while (returnMe) {
   15c78:	      ,----- bra.s 15caa <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15c7a:	   ,--|----> movea.l 20(sp),a0
   15c7e:	   |  |      move.l (a0),d0
   15c80:	   |  |      cmp.l 28(sp),d0
   15c84:	   |  |  ,-- bne.s 15ca0 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15c86:	   |  |  |   movea.l 20(sp),a0
   15c8a:	   |  |  |   move.l 4(a0),d0
   15c8e:	   |  |  |   addq.l #1,d0
   15c90:	   |  |  |   movea.l 20(sp),a0
   15c94:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15c98:	   |  |  |   move.l 20(sp),d0
   15c9c:	,--|--|--|-- bra.w 15d3e <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   15ca0:	|  |  |  '-> movea.l 20(sp),a0
   15ca4:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15caa:	|  |  '----> tst.l 20(sp)
   15cae:	|  '-------- bne.s 15c7a <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15cb0:	|            moveq #26,d0
   15cb2:	|            move.l d0,16(sp)
   15cb6:	|            clr.l 12(sp)
   15cba:	|            move.l 1a7a4 <SysBase>,d0
   15cc0:	|            movea.l d0,a6
   15cc2:	|            move.l 16(sp),d0
   15cc6:	|            move.l 12(sp),d1
   15cca:	|            jsr -684(a6)
   15cce:	|            move.l d0,8(sp)
   15cd2:	|            move.l 8(sp),d0
   15cd6:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15cda:	|     ,----- beq.s 15d3c <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   15cdc:	|     |      movea.l 20(sp),a0
   15ce0:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   15ce4:	|     |      move.l 20(sp),d0
   15ce8:	|     |      addq.l #8,d0
   15cea:	|     |      move.l d0,-(sp)
   15cec:	|     |      move.l 32(sp),-(sp)
   15cf0:	|     |      jsr 8812 <loadSpriteBank>
   15cf6:	|     |      addq.l #8,sp
   15cf8:	|     |      tst.w d0
   15cfa:	|     |  ,-- beq.s 15d22 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   15cfc:	|     |  |   movea.l 20(sp),a0
   15d00:	|     |  |   moveq #1,d0
   15d02:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   15d06:	|     |  |   move.l 1a8bc <allLoadedBanks>,d0
   15d0c:	|     |  |   movea.l 20(sp),a0
   15d10:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   15d14:	|     |  |   move.l 20(sp),1a8bc <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   15d1c:	|     |  |   move.l 20(sp),d0
   15d20:	+-----|--|-- bra.s 15d3e <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   15d22:	|     |  '-> move.l 20(sp),4(sp)
   15d28:	|     |      move.l 1a7a4 <SysBase>,d0
   15d2e:	|     |      movea.l d0,a6
   15d30:	|     |      movea.l 4(sp),a1
   15d34:	|     |      jsr -690(a6)
			return NULL;
   15d38:	|     |      moveq #0,d0
   15d3a:	+-----|----- bra.s 15d3e <loadBankForAnim+0xd4>
		}
	} else return NULL;
   15d3c:	|     '----> moveq #0,d0
}
   15d3e:	'----------> movea.l (sp)+,a6
   15d40:	             lea 20(sp),sp
   15d44:	             rts

00015d46 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   15d46:	       lea -60(sp),sp
   15d4a:	       move.l d3,-(sp)
   15d4c:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   15d4e:	       move.l 88(sp),d0
   15d52:	       sub.l 80(sp),d0
   15d56:	       move.l d0,-(sp)
   15d58:	       jsr 1731e <__floatsidf>
   15d5e:	       addq.l #4,sp
   15d60:	       move.l d0,32(sp)
   15d64:	       move.l d1,36(sp)
   15d68:	       move.l 32(sp),60(sp)
   15d6e:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   15d74:	       move.l 92(sp),d0
   15d78:	       sub.l 84(sp),d0
   15d7c:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   15d80:	       move.l 96(sp),d0
   15d84:	       sub.l 80(sp),d0
   15d88:	       move.l d0,-(sp)
   15d8a:	       jsr 1731e <__floatsidf>
   15d90:	       addq.l #4,sp
   15d92:	       move.l 64(sp),-(sp)
   15d96:	       move.l 64(sp),-(sp)
   15d9a:	       move.l d1,-(sp)
   15d9c:	       move.l d0,-(sp)
   15d9e:	       jsr 173ae <__muldf3>
   15da4:	       lea 16(sp),sp
   15da8:	       move.l d0,d2
   15daa:	       move.l d1,d3
   15dac:	       move.l 100(sp),d0
   15db0:	       sub.l 84(sp),d0
   15db4:	       move.l 56(sp),-(sp)
   15db8:	       move.l d0,-(sp)
   15dba:	       jsr 178b8 <__mulsi3>
   15dc0:	       addq.l #8,sp
   15dc2:	       move.l d0,-(sp)
   15dc4:	       jsr 1731e <__floatsidf>
   15dca:	       addq.l #4,sp
   15dcc:	       move.l d1,-(sp)
   15dce:	       move.l d0,-(sp)
   15dd0:	       move.l d3,-(sp)
   15dd2:	       move.l d2,-(sp)
   15dd4:	       jsr 17150 <__adddf3>
   15dda:	       lea 16(sp),sp
   15dde:	       move.l d0,24(sp)
   15de2:	       move.l d1,28(sp)
   15de6:	       move.l 24(sp),48(sp)
   15dec:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   15df2:	       move.l 64(sp),-(sp)
   15df6:	       move.l 64(sp),-(sp)
   15dfa:	       move.l 72(sp),-(sp)
   15dfe:	       move.l 72(sp),-(sp)
   15e02:	       jsr 173ae <__muldf3>
   15e08:	       lea 16(sp),sp
   15e0c:	       move.l d0,d2
   15e0e:	       move.l d1,d3
   15e10:	       move.l 56(sp),-(sp)
   15e14:	       move.l 60(sp),-(sp)
   15e18:	       jsr 178b8 <__mulsi3>
   15e1e:	       addq.l #8,sp
   15e20:	       move.l d0,-(sp)
   15e22:	       jsr 1731e <__floatsidf>
   15e28:	       addq.l #4,sp
   15e2a:	       move.l d1,-(sp)
   15e2c:	       move.l d0,-(sp)
   15e2e:	       move.l d3,-(sp)
   15e30:	       move.l d2,-(sp)
   15e32:	       jsr 17150 <__adddf3>
   15e38:	       lea 16(sp),sp
   15e3c:	       move.l d1,-(sp)
   15e3e:	       move.l d0,-(sp)
   15e40:	       move.l 60(sp),-(sp)
   15e44:	       move.l 60(sp),-(sp)
   15e48:	       jsr 171b2 <__divdf3>
   15e4e:	       lea 16(sp),sp
   15e52:	       move.l d0,16(sp)
   15e56:	       move.l d1,20(sp)
   15e5a:	       move.l 16(sp),48(sp)
   15e60:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   15e66:	       clr.l -(sp)
   15e68:	       clr.l -(sp)
   15e6a:	       move.l 60(sp),-(sp)
   15e6e:	       move.l 60(sp),-(sp)
   15e72:	       jsr 17536 <__ltdf2>
   15e78:	       lea 16(sp),sp
   15e7c:	       tst.l d0
   15e7e:	   ,-- bge.s 15e94 <closestPointOnLine+0x14e>
		*closestX = x1;
   15e80:	   |   movea.l 72(sp),a0
   15e84:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   15e88:	   |   movea.l 76(sp),a0
   15e8c:	   |   move.l 84(sp),(a0)
   15e90:	,--|-- bra.w 15f62 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   15e94:	|  '-> clr.l -(sp)
   15e96:	|      move.l #1072693248,-(sp)
   15e9c:	|      move.l 60(sp),-(sp)
   15ea0:	|      move.l 60(sp),-(sp)
   15ea4:	|      jsr 1747c <__gtdf2>
   15eaa:	|      lea 16(sp),sp
   15eae:	|      tst.l d0
   15eb0:	|  ,-- ble.s 15ec6 <closestPointOnLine+0x180>
		*closestX = x2;
   15eb2:	|  |   movea.l 72(sp),a0
   15eb6:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   15eba:	|  |   movea.l 76(sp),a0
   15ebe:	|  |   move.l 92(sp),(a0)
   15ec2:	+--|-- bra.w 15f62 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   15ec6:	|  '-> move.l 64(sp),-(sp)
   15eca:	|      move.l 64(sp),-(sp)
   15ece:	|      move.l 60(sp),-(sp)
   15ed2:	|      move.l 60(sp),-(sp)
   15ed6:	|      jsr 173ae <__muldf3>
   15edc:	|      lea 16(sp),sp
   15ee0:	|      move.l d0,8(sp)
   15ee4:	|      move.l d1,12(sp)
   15ee8:	|      move.l 8(sp),40(sp)
   15eee:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   15ef4:	|      move.l 44(sp),-(sp)
   15ef8:	|      move.l 44(sp),-(sp)
   15efc:	|      jsr 172c0 <__fixdfsi>
   15f02:	|      addq.l #8,sp
   15f04:	|      movea.l 72(sp),a0
   15f08:	|      move.l d0,(a0)
		*closestX += x1;
   15f0a:	|      movea.l 72(sp),a0
   15f0e:	|      move.l (a0),d0
   15f10:	|      add.l 80(sp),d0
   15f14:	|      movea.l 72(sp),a0
   15f18:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   15f1a:	|      move.l 56(sp),-(sp)
   15f1e:	|      jsr 1731e <__floatsidf>
   15f24:	|      addq.l #4,sp
   15f26:	|      move.l 52(sp),-(sp)
   15f2a:	|      move.l 52(sp),-(sp)
   15f2e:	|      move.l d1,-(sp)
   15f30:	|      move.l d0,-(sp)
   15f32:	|      jsr 173ae <__muldf3>
   15f38:	|      lea 16(sp),sp
   15f3c:	|      move.l d1,-(sp)
   15f3e:	|      move.l d0,-(sp)
   15f40:	|      jsr 172c0 <__fixdfsi>
   15f46:	|      addq.l #8,sp
   15f48:	|      movea.l 76(sp),a0
   15f4c:	|      move.l d0,(a0)
		*closestY += y1;
   15f4e:	|      movea.l 76(sp),a0
   15f52:	|      move.l (a0),d0
   15f54:	|      add.l 84(sp),d0
   15f58:	|      movea.l 76(sp),a0
   15f5c:	|      move.l d0,(a0)
		return TRUE;
   15f5e:	|      moveq #1,d0
   15f60:	|  ,-- bra.s 15f64 <closestPointOnLine+0x21e>
	}
	return FALSE;
   15f62:	'--|-> clr.w d0
}
   15f64:	   '-> move.l (sp)+,d2
   15f66:	       move.l (sp)+,d3
   15f68:	       lea 60(sp),sp
   15f6c:	       rts

00015f6e <drawFloor>:

void drawFloor() {
   15f6e:	                lea -12(sp),sp
   15f72:	                move.l d3,-(sp)
   15f74:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   15f76:	                clr.l 16(sp)
   15f7a:	   ,----------- bra.w 1618e <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   15f7e:	,--|----------> movea.l 1a8c0 <currentFloor>,a0
   15f84:	|  |            move.l 12(a0),d1
   15f88:	|  |            move.l 16(sp),d0
   15f8c:	|  |            lsl.l #3,d0
   15f8e:	|  |            movea.l d1,a0
   15f90:	|  |            adda.l d0,a0
   15f92:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   15f96:	|  |            moveq #1,d0
   15f98:	|  |            cmp.l 8(sp),d0
   15f9c:	|  |  ,-------- bge.w 1618a <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   15fa0:	|  |  |         moveq #1,d0
   15fa2:	|  |  |         move.l d0,12(sp)
   15fa6:	|  |  |     ,-- bra.w 160a0 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   15faa:	|  |  |  ,--|-> movea.l 1a8c0 <currentFloor>,a0
   15fb0:	|  |  |  |  |   move.l 4(a0),d1
   15fb4:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   15fba:	|  |  |  |  |   movea.l 12(a0),a0
   15fbe:	|  |  |  |  |   move.l 16(sp),d0
   15fc2:	|  |  |  |  |   lsl.l #3,d0
   15fc4:	|  |  |  |  |   adda.l d0,a0
   15fc6:	|  |  |  |  |   movea.l 4(a0),a0
   15fca:	|  |  |  |  |   move.l 12(sp),d0
   15fce:	|  |  |  |  |   add.l d0,d0
   15fd0:	|  |  |  |  |   add.l d0,d0
   15fd2:	|  |  |  |  |   adda.l d0,a0
   15fd4:	|  |  |  |  |   move.l (a0),d0
   15fd6:	|  |  |  |  |   lsl.l #3,d0
   15fd8:	|  |  |  |  |   movea.l d1,a0
   15fda:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   15fdc:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   15fe0:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   15fe6:	|  |  |  |  |   move.l 4(a0),d1
   15fea:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   15ff0:	|  |  |  |  |   movea.l 12(a0),a0
   15ff4:	|  |  |  |  |   move.l 16(sp),d0
   15ff8:	|  |  |  |  |   lsl.l #3,d0
   15ffa:	|  |  |  |  |   adda.l d0,a0
   15ffc:	|  |  |  |  |   movea.l 4(a0),a0
   16000:	|  |  |  |  |   move.l 12(sp),d0
   16004:	|  |  |  |  |   add.l d0,d0
   16006:	|  |  |  |  |   add.l d0,d0
   16008:	|  |  |  |  |   adda.l d0,a0
   1600a:	|  |  |  |  |   move.l (a0),d0
   1600c:	|  |  |  |  |   lsl.l #3,d0
   1600e:	|  |  |  |  |   movea.l d1,a0
   16010:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16012:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   16014:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   1601a:	|  |  |  |  |   move.l 4(a0),d1
   1601e:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16024:	|  |  |  |  |   movea.l 12(a0),a0
   16028:	|  |  |  |  |   move.l 16(sp),d0
   1602c:	|  |  |  |  |   lsl.l #3,d0
   1602e:	|  |  |  |  |   adda.l d0,a0
   16030:	|  |  |  |  |   movea.l 4(a0),a0
   16034:	|  |  |  |  |   move.l 12(sp),d0
   16038:	|  |  |  |  |   addi.l #1073741823,d0
   1603e:	|  |  |  |  |   add.l d0,d0
   16040:	|  |  |  |  |   add.l d0,d0
   16042:	|  |  |  |  |   adda.l d0,a0
   16044:	|  |  |  |  |   move.l (a0),d0
   16046:	|  |  |  |  |   lsl.l #3,d0
   16048:	|  |  |  |  |   movea.l d1,a0
   1604a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1604c:	|  |  |  |  |   move.l 4(a0),d1
   16050:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16056:	|  |  |  |  |   move.l 4(a0),d3
   1605a:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16060:	|  |  |  |  |   movea.l 12(a0),a0
   16064:	|  |  |  |  |   move.l 16(sp),d0
   16068:	|  |  |  |  |   lsl.l #3,d0
   1606a:	|  |  |  |  |   adda.l d0,a0
   1606c:	|  |  |  |  |   movea.l 4(a0),a0
   16070:	|  |  |  |  |   move.l 12(sp),d0
   16074:	|  |  |  |  |   addi.l #1073741823,d0
   1607a:	|  |  |  |  |   add.l d0,d0
   1607c:	|  |  |  |  |   add.l d0,d0
   1607e:	|  |  |  |  |   adda.l d0,a0
   16080:	|  |  |  |  |   move.l (a0),d0
   16082:	|  |  |  |  |   lsl.l #3,d0
   16084:	|  |  |  |  |   movea.l d3,a0
   16086:	|  |  |  |  |   adda.l d0,a0
   16088:	|  |  |  |  |   move.l (a0),d0
   1608a:	|  |  |  |  |   move.l d2,-(sp)
   1608c:	|  |  |  |  |   move.l a1,-(sp)
   1608e:	|  |  |  |  |   move.l d1,-(sp)
   16090:	|  |  |  |  |   move.l d0,-(sp)
   16092:	|  |  |  |  |   jsr 3b0c <drawLine>
   16098:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   1609c:	|  |  |  |  |   addq.l #1,12(sp)
   160a0:	|  |  |  |  '-> move.l 12(sp),d0
   160a4:	|  |  |  |      cmp.l 8(sp),d0
   160a8:	|  |  |  '----- blt.w 15faa <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   160ac:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   160b2:	|  |  |         move.l 4(a0),d1
   160b6:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   160bc:	|  |  |         movea.l 12(a0),a0
   160c0:	|  |  |         move.l 16(sp),d0
   160c4:	|  |  |         lsl.l #3,d0
   160c6:	|  |  |         adda.l d0,a0
   160c8:	|  |  |         movea.l 4(a0),a0
   160cc:	|  |  |         move.l 8(sp),d0
   160d0:	|  |  |         addi.l #1073741823,d0
   160d6:	|  |  |         add.l d0,d0
   160d8:	|  |  |         add.l d0,d0
   160da:	|  |  |         adda.l d0,a0
   160dc:	|  |  |         move.l (a0),d0
   160de:	|  |  |         lsl.l #3,d0
   160e0:	|  |  |         movea.l d1,a0
   160e2:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   160e4:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   160e8:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   160ee:	|  |  |         move.l 4(a0),d1
   160f2:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   160f8:	|  |  |         movea.l 12(a0),a0
   160fc:	|  |  |         move.l 16(sp),d0
   16100:	|  |  |         lsl.l #3,d0
   16102:	|  |  |         adda.l d0,a0
   16104:	|  |  |         movea.l 4(a0),a0
   16108:	|  |  |         move.l 8(sp),d0
   1610c:	|  |  |         addi.l #1073741823,d0
   16112:	|  |  |         add.l d0,d0
   16114:	|  |  |         add.l d0,d0
   16116:	|  |  |         adda.l d0,a0
   16118:	|  |  |         move.l (a0),d0
   1611a:	|  |  |         lsl.l #3,d0
   1611c:	|  |  |         movea.l d1,a0
   1611e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16120:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   16122:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   16128:	|  |  |         move.l 4(a0),d1
   1612c:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   16132:	|  |  |         movea.l 12(a0),a0
   16136:	|  |  |         move.l 16(sp),d0
   1613a:	|  |  |         lsl.l #3,d0
   1613c:	|  |  |         adda.l d0,a0
   1613e:	|  |  |         movea.l 4(a0),a0
   16142:	|  |  |         move.l (a0),d0
   16144:	|  |  |         lsl.l #3,d0
   16146:	|  |  |         movea.l d1,a0
   16148:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1614a:	|  |  |         move.l 4(a0),d1
   1614e:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   16154:	|  |  |         move.l 4(a0),d3
   16158:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   1615e:	|  |  |         movea.l 12(a0),a0
   16162:	|  |  |         move.l 16(sp),d0
   16166:	|  |  |         lsl.l #3,d0
   16168:	|  |  |         adda.l d0,a0
   1616a:	|  |  |         movea.l 4(a0),a0
   1616e:	|  |  |         move.l (a0),d0
   16170:	|  |  |         lsl.l #3,d0
   16172:	|  |  |         movea.l d3,a0
   16174:	|  |  |         adda.l d0,a0
   16176:	|  |  |         move.l (a0),d0
   16178:	|  |  |         move.l d2,-(sp)
   1617a:	|  |  |         move.l a1,-(sp)
   1617c:	|  |  |         move.l d1,-(sp)
   1617e:	|  |  |         move.l d0,-(sp)
   16180:	|  |  |         jsr 3b0c <drawLine>
   16186:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1618a:	|  |  '-------> addq.l #1,16(sp)
   1618e:	|  '----------> movea.l 1a8c0 <currentFloor>,a0
   16194:	|               move.l 8(a0),d0
   16198:	|               cmp.l 16(sp),d0
   1619c:	'-------------- bgt.w 15f7e <drawFloor+0x10>
        }
    }
}
   161a0:	                nop
   161a2:	                nop
   161a4:	                move.l (sp)+,d2
   161a6:	                move.l (sp)+,d3
   161a8:	                lea 12(sp),sp
   161ac:	                rts

000161ae <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   161ae:	                      lea -12(sp),sp
    int sharedVertices = 0;
   161b2:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   161b6:	                      clr.l 4(sp)
   161ba:	   ,----------------- bra.w 1624c <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   161be:	,--|----------------> clr.l (sp)
   161c0:	|  |     ,----------- bra.s 1623c <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   161c2:	|  |  ,--|----------> movea.l 16(sp),a0
   161c6:	|  |  |  |            move.l 4(a0),d1
   161ca:	|  |  |  |            move.l 4(sp),d0
   161ce:	|  |  |  |            add.l d0,d0
   161d0:	|  |  |  |            add.l d0,d0
   161d2:	|  |  |  |            movea.l d1,a0
   161d4:	|  |  |  |            adda.l d0,a0
   161d6:	|  |  |  |            move.l (a0),d1
   161d8:	|  |  |  |            movea.l 20(sp),a0
   161dc:	|  |  |  |            movea.l 4(a0),a0
   161e0:	|  |  |  |            move.l (sp),d0
   161e2:	|  |  |  |            add.l d0,d0
   161e4:	|  |  |  |            add.l d0,d0
   161e6:	|  |  |  |            adda.l d0,a0
   161e8:	|  |  |  |            move.l (a0),d0
   161ea:	|  |  |  |            cmp.l d1,d0
   161ec:	|  |  |  |  ,-------- bne.s 1623a <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   161ee:	|  |  |  |  |         move.l 8(sp),d0
   161f2:	|  |  |  |  |         move.l d0,d1
   161f4:	|  |  |  |  |         addq.l #1,d1
   161f6:	|  |  |  |  |         move.l d1,8(sp)
   161fa:	|  |  |  |  |         tst.l d0
   161fc:	|  |  |  |  |     ,-- beq.s 1621e <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   161fe:	|  |  |  |  |     |   movea.l 16(sp),a0
   16202:	|  |  |  |  |     |   move.l 4(a0),d1
   16206:	|  |  |  |  |     |   move.l 4(sp),d0
   1620a:	|  |  |  |  |     |   add.l d0,d0
   1620c:	|  |  |  |  |     |   add.l d0,d0
   1620e:	|  |  |  |  |     |   movea.l d1,a0
   16210:	|  |  |  |  |     |   adda.l d0,a0
   16212:	|  |  |  |  |     |   move.l (a0),d0
   16214:	|  |  |  |  |     |   movea.l 28(sp),a0
   16218:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   1621a:	|  |  |  |  |     |   moveq #1,d0
   1621c:	|  |  |  |  |  ,--|-- bra.s 1625c <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   1621e:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   16222:	|  |  |  |  |  |      move.l 4(a0),d1
   16226:	|  |  |  |  |  |      move.l 4(sp),d0
   1622a:	|  |  |  |  |  |      add.l d0,d0
   1622c:	|  |  |  |  |  |      add.l d0,d0
   1622e:	|  |  |  |  |  |      movea.l d1,a0
   16230:	|  |  |  |  |  |      adda.l d0,a0
   16232:	|  |  |  |  |  |      move.l (a0),d0
   16234:	|  |  |  |  |  |      movea.l 24(sp),a0
   16238:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   1623a:	|  |  |  |  '--|----> addq.l #1,(sp)
   1623c:	|  |  |  '-----|----> movea.l 20(sp),a0
   16240:	|  |  |        |      move.l (a0),d0
   16242:	|  |  |        |      cmp.l (sp),d0
   16244:	|  |  '--------|----- bgt.w 161c2 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16248:	|  |           |      addq.l #1,4(sp)
   1624c:	|  '-----------|----> movea.l 16(sp),a0
   16250:	|              |      move.l (a0),d0
   16252:	|              |      cmp.l 4(sp),d0
   16256:	'--------------|----- bgt.w 161be <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   1625a:	               |      clr.w d0
}
   1625c:	               '----> lea 12(sp),sp
   16260:	                      rts

00016262 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   16262:	movea.l 1a8c0 <currentFloor>,a0
   16268:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   1626c:	movea.l 1a8c0 <currentFloor>,a0
   16272:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   16276:	movea.l 1a8c0 <currentFloor>,a0
   1627c:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   16280:	movea.l 1a8c0 <currentFloor>,a0
   16286:	clr.l 16(a0)
}
   1628a:	nop
   1628c:	rts

0001628e <inFloor>:

int inFloor (int x, int y) {
   1628e:	          subq.l #8,sp
	int i, r = -1;
   16290:	          moveq #-1,d0
   16292:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16294:	          clr.l 4(sp)
   16298:	   ,----- bra.s 162cc <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   1629a:	,--|----> movea.l 1a8c0 <currentFloor>,a0
   162a0:	|  |      move.l 12(a0),d1
   162a4:	|  |      move.l 4(sp),d0
   162a8:	|  |      lsl.l #3,d0
   162aa:	|  |      add.l d1,d0
   162ac:	|  |      move.l 16(sp),-(sp)
   162b0:	|  |      move.l 16(sp),-(sp)
   162b4:	|  |      move.l d0,-(sp)
   162b6:	|  |      jsr 16498 <pointInFloorPolygon>
   162bc:	|  |      lea 12(sp),sp
   162c0:	|  |      tst.w d0
   162c2:	|  |  ,-- beq.s 162c8 <inFloor+0x3a>
			r = i;
   162c4:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   162c8:	|  |  '-> addq.l #1,4(sp)
   162cc:	|  '----> movea.l 1a8c0 <currentFloor>,a0
   162d2:	|         move.l 8(a0),d0
   162d6:	|         cmp.l 4(sp),d0
   162da:	'-------- bgt.s 1629a <inFloor+0xc>

	return r;
   162dc:	          move.l (sp),d0
}
   162de:	          addq.l #8,sp
   162e0:	          rts

000162e2 <initFloor>:

BOOL initFloor () {
   162e2:	       lea -12(sp),sp
   162e6:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   162e8:	       moveq #20,d0
   162ea:	       move.l d0,12(sp)
   162ee:	       clr.l 8(sp)
   162f2:	       move.l 1a7a4 <SysBase>,d0
   162f8:	       movea.l d0,a6
   162fa:	       move.l 12(sp),d0
   162fe:	       move.l 8(sp),d1
   16302:	       jsr -684(a6)
   16306:	       move.l d0,4(sp)
   1630a:	       move.l 4(sp),d0
   1630e:	       move.l d0,1a8c0 <currentFloor>

    if(currentFloor == 0) {
   16314:	       move.l 1a8c0 <currentFloor>,d0
   1631a:	,----- bne.s 1632e <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   1631c:	|      pea 19cca <graphics.c.7a652652+0xd7>
   16322:	|      jsr 16f2c <KPrintF>
   16328:	|      addq.l #4,sp
        return FALSE;
   1632a:	|      clr.w d0
   1632c:	|  ,-- bra.s 16336 <initFloor+0x54>
    }

	noFloor ();
   1632e:	'--|-> jsr 16262 <noFloor>
	return TRUE;
   16334:	   |   moveq #1,d0
}
   16336:	   '-> movea.l (sp)+,a6
   16338:	       lea 12(sp),sp
   1633c:	       rts

0001633e <killFloor>:

void killFloor () {
   1633e:	       lea -24(sp),sp
   16342:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16344:	       clr.l 24(sp)
   16348:	   ,-- bra.s 163a2 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   1634a:	,--|-> movea.l 1a8c0 <currentFloor>,a0
   16350:	|  |   move.l 12(a0),d1
   16354:	|  |   move.l 24(sp),d0
   16358:	|  |   lsl.l #3,d0
   1635a:	|  |   movea.l d1,a0
   1635c:	|  |   adda.l d0,a0
   1635e:	|  |   move.l 4(a0),8(sp)
   16364:	|  |   move.l 1a7a4 <SysBase>,d0
   1636a:	|  |   movea.l d0,a6
   1636c:	|  |   movea.l 8(sp),a1
   16370:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   16374:	|  |   movea.l 1a8c0 <currentFloor>,a0
   1637a:	|  |   move.l 16(a0),d1
   1637e:	|  |   move.l 24(sp),d0
   16382:	|  |   add.l d0,d0
   16384:	|  |   add.l d0,d0
   16386:	|  |   movea.l d1,a0
   16388:	|  |   adda.l d0,a0
   1638a:	|  |   move.l (a0),4(sp)
   1638e:	|  |   move.l 1a7a4 <SysBase>,d0
   16394:	|  |   movea.l d0,a6
   16396:	|  |   movea.l 4(sp),a1
   1639a:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1639e:	|  |   addq.l #1,24(sp)
   163a2:	|  '-> movea.l 1a8c0 <currentFloor>,a0
   163a8:	|      move.l 8(a0),d0
   163ac:	|      cmp.l 24(sp),d0
   163b0:	'----- bgt.s 1634a <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   163b2:	       movea.l 1a8c0 <currentFloor>,a0
   163b8:	       move.l 12(a0),20(sp)
   163be:	       move.l 1a7a4 <SysBase>,d0
   163c4:	       movea.l d0,a6
   163c6:	       movea.l 20(sp),a1
   163ca:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   163ce:	       movea.l 1a8c0 <currentFloor>,a0
   163d4:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   163d8:	       movea.l 1a8c0 <currentFloor>,a0
   163de:	       move.l 4(a0),16(sp)
   163e4:	       move.l 1a7a4 <SysBase>,d0
   163ea:	       movea.l d0,a6
   163ec:	       movea.l 16(sp),a1
   163f0:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   163f4:	       movea.l 1a8c0 <currentFloor>,a0
   163fa:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   163fe:	       movea.l 1a8c0 <currentFloor>,a0
   16404:	       move.l 16(a0),12(sp)
   1640a:	       move.l 1a7a4 <SysBase>,d0
   16410:	       movea.l d0,a6
   16412:	       movea.l 12(sp),a1
   16416:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   1641a:	       movea.l 1a8c0 <currentFloor>,a0
   16420:	       clr.l 16(a0)
}
   16424:	       nop
   16426:	       movea.l (sp)+,a6
   16428:	       lea 24(sp),sp
   1642c:	       rts

0001642e <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   1642e:	                   lea -12(sp),sp
	int sharedVertices = 0;
   16432:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16436:	                   clr.l 4(sp)
   1643a:	   ,-------------- bra.s 16486 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   1643c:	,--|-------------> clr.l (sp)
   1643e:	|  |     ,-------- bra.s 1647a <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   16440:	|  |  ,--|-------> move.l 20(sp),d1
   16444:	|  |  |  |         move.l 4(sp),d0
   16448:	|  |  |  |         add.l d0,d0
   1644a:	|  |  |  |         add.l d0,d0
   1644c:	|  |  |  |         movea.l d1,a0
   1644e:	|  |  |  |         adda.l d0,a0
   16450:	|  |  |  |         move.l (a0),d1
   16452:	|  |  |  |         movea.l 28(sp),a0
   16456:	|  |  |  |         move.l (sp),d0
   16458:	|  |  |  |         add.l d0,d0
   1645a:	|  |  |  |         add.l d0,d0
   1645c:	|  |  |  |         adda.l d0,a0
   1645e:	|  |  |  |         move.l (a0),d0
   16460:	|  |  |  |         cmp.l d1,d0
   16462:	|  |  |  |     ,-- bne.s 16478 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   16464:	|  |  |  |     |   move.l 8(sp),d0
   16468:	|  |  |  |     |   move.l d0,d1
   1646a:	|  |  |  |     |   addq.l #1,d1
   1646c:	|  |  |  |     |   move.l d1,8(sp)
   16470:	|  |  |  |     |   tst.l d0
   16472:	|  |  |  |     +-- beq.s 16478 <polysShareSide+0x4a>
   16474:	|  |  |  |     |   moveq #1,d0
   16476:	|  |  |  |  ,--|-- bra.s 16492 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16478:	|  |  |  |  |  '-> addq.l #1,(sp)
   1647a:	|  |  |  '--|----> move.l 24(sp),d0
   1647e:	|  |  |     |      cmp.l (sp),d0
   16480:	|  |  '-----|----- bgt.s 16440 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16482:	|  |        |      addq.l #1,4(sp)
   16486:	|  '--------|----> move.l 16(sp),d0
   1648a:	|           |      cmp.l 4(sp),d0
   1648e:	'-----------|----- bgt.s 1643c <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16490:	            |      clr.w d0
}
   16492:	            '----> lea 12(sp),sp
   16496:	                   rts

00016498 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   16498:	             lea -28(sp),sp
   1649c:	             move.l d3,-(sp)
   1649e:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   164a0:	             clr.l 32(sp)
   164a4:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   164a8:	             movea.l 40(sp),a0
   164ac:	             move.l (a0),d0
   164ae:	             move.l d0,d1
   164b0:	             subq.l #1,d1
   164b2:	             move.l d1,28(sp)
   164b6:	   ,-------- bra.w 166b0 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   164ba:	,--|-------> movea.l 1a8c0 <currentFloor>,a0
   164c0:	|  |         move.l 4(a0),d1
   164c4:	|  |         movea.l 40(sp),a0
   164c8:	|  |         movea.l 4(a0),a0
   164cc:	|  |         move.l 32(sp),d0
   164d0:	|  |         add.l d0,d0
   164d2:	|  |         add.l d0,d0
   164d4:	|  |         adda.l d0,a0
   164d6:	|  |         move.l (a0),d0
   164d8:	|  |         lsl.l #3,d0
   164da:	|  |         movea.l d1,a0
   164dc:	|  |         adda.l d0,a0
   164de:	|  |         move.l (a0),d0
   164e0:	|  |         move.l d0,-(sp)
   164e2:	|  |         jsr 1735e <__floatsisf>
   164e8:	|  |         addq.l #4,sp
   164ea:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   164ee:	|  |         movea.l 1a8c0 <currentFloor>,a0
   164f4:	|  |         move.l 4(a0),d1
   164f8:	|  |         movea.l 40(sp),a0
   164fc:	|  |         movea.l 4(a0),a0
   16500:	|  |         move.l 32(sp),d0
   16504:	|  |         add.l d0,d0
   16506:	|  |         add.l d0,d0
   16508:	|  |         adda.l d0,a0
   1650a:	|  |         move.l (a0),d0
   1650c:	|  |         lsl.l #3,d0
   1650e:	|  |         movea.l d1,a0
   16510:	|  |         adda.l d0,a0
   16512:	|  |         move.l 4(a0),d0
   16516:	|  |         move.l d0,-(sp)
   16518:	|  |         jsr 1735e <__floatsisf>
   1651e:	|  |         addq.l #4,sp
   16520:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16524:	|  |         movea.l 1a8c0 <currentFloor>,a0
   1652a:	|  |         move.l 4(a0),d1
   1652e:	|  |         movea.l 40(sp),a0
   16532:	|  |         movea.l 4(a0),a0
   16536:	|  |         move.l 28(sp),d0
   1653a:	|  |         add.l d0,d0
   1653c:	|  |         add.l d0,d0
   1653e:	|  |         adda.l d0,a0
   16540:	|  |         move.l (a0),d0
   16542:	|  |         lsl.l #3,d0
   16544:	|  |         movea.l d1,a0
   16546:	|  |         adda.l d0,a0
   16548:	|  |         move.l (a0),d0
   1654a:	|  |         move.l d0,-(sp)
   1654c:	|  |         jsr 1735e <__floatsisf>
   16552:	|  |         addq.l #4,sp
   16554:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16558:	|  |         movea.l 1a8c0 <currentFloor>,a0
   1655e:	|  |         move.l 4(a0),d1
   16562:	|  |         movea.l 40(sp),a0
   16566:	|  |         movea.l 4(a0),a0
   1656a:	|  |         move.l 28(sp),d0
   1656e:	|  |         add.l d0,d0
   16570:	|  |         add.l d0,d0
   16572:	|  |         adda.l d0,a0
   16574:	|  |         move.l (a0),d0
   16576:	|  |         lsl.l #3,d0
   16578:	|  |         movea.l d1,a0
   1657a:	|  |         adda.l d0,a0
   1657c:	|  |         move.l 4(a0),d0
   16580:	|  |         move.l d0,-(sp)
   16582:	|  |         jsr 1735e <__floatsisf>
   16588:	|  |         addq.l #4,sp
   1658a:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1658e:	|  |         move.l 48(sp),-(sp)
   16592:	|  |         jsr 1735e <__floatsisf>
   16598:	|  |         addq.l #4,sp
   1659a:	|  |         move.l d0,-(sp)
   1659c:	|  |         move.l 20(sp),-(sp)
   165a0:	|  |         jsr 17500 <__lesf2>
   165a6:	|  |         addq.l #8,sp
   165a8:	|  |         tst.l d0
   165aa:	|  |     ,-- bgt.s 165ca <pointInFloorPolygon+0x132>
   165ac:	|  |     |   move.l 48(sp),-(sp)
   165b0:	|  |     |   jsr 1735e <__floatsisf>
   165b6:	|  |     |   addq.l #4,sp
   165b8:	|  |     |   move.l d0,-(sp)
   165ba:	|  |     |   move.l 12(sp),-(sp)
   165be:	|  |     |   jsr 174ca <__gtsf2>
   165c4:	|  |     |   addq.l #8,sp
   165c6:	|  |     |   tst.l d0
   165c8:	|  |  ,--|-- bgt.s 1660a <pointInFloorPolygon+0x172>
   165ca:	|  |  |  '-> move.l 48(sp),-(sp)
   165ce:	|  |  |      jsr 1735e <__floatsisf>
   165d4:	|  |  |      addq.l #4,sp
   165d6:	|  |  |      move.l d0,-(sp)
   165d8:	|  |  |      move.l 12(sp),-(sp)
   165dc:	|  |  |      jsr 17500 <__lesf2>
   165e2:	|  |  |      addq.l #8,sp
   165e4:	|  |  |      tst.l d0
   165e6:	|  |  |  ,-- bgt.w 166a0 <pointInFloorPolygon+0x208>
   165ea:	|  |  |  |   move.l 48(sp),-(sp)
   165ee:	|  |  |  |   jsr 1735e <__floatsisf>
   165f4:	|  |  |  |   addq.l #4,sp
   165f6:	|  |  |  |   move.l d0,-(sp)
   165f8:	|  |  |  |   move.l 20(sp),-(sp)
   165fc:	|  |  |  |   jsr 174ca <__gtsf2>
   16602:	|  |  |  |   addq.l #8,sp
   16604:	|  |  |  |   tst.l d0
   16606:	|  |  |  +-- ble.w 166a0 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   1660a:	|  |  '--|-> move.l 44(sp),-(sp)
   1660e:	|  |     |   jsr 1735e <__floatsisf>
   16614:	|  |     |   addq.l #4,sp
   16616:	|  |     |   move.l d0,d3
   16618:	|  |     |   move.l 20(sp),-(sp)
   1661c:	|  |     |   move.l 16(sp),-(sp)
   16620:	|  |     |   jsr 17652 <__subsf3>
   16626:	|  |     |   addq.l #8,sp
   16628:	|  |     |   move.l d0,d2
   1662a:	|  |     |   move.l 48(sp),-(sp)
   1662e:	|  |     |   jsr 1735e <__floatsisf>
   16634:	|  |     |   addq.l #4,sp
   16636:	|  |     |   move.l 16(sp),-(sp)
   1663a:	|  |     |   move.l d0,-(sp)
   1663c:	|  |     |   jsr 17652 <__subsf3>
   16642:	|  |     |   addq.l #8,sp
   16644:	|  |     |   move.l d0,-(sp)
   16646:	|  |     |   move.l d2,-(sp)
   16648:	|  |     |   jsr 17410 <__mulsf3>
   1664e:	|  |     |   addq.l #8,sp
   16650:	|  |     |   move.l d0,d2
   16652:	|  |     |   move.l 16(sp),-(sp)
   16656:	|  |     |   move.l 12(sp),-(sp)
   1665a:	|  |     |   jsr 17652 <__subsf3>
   16660:	|  |     |   addq.l #8,sp
   16662:	|  |     |   move.l d0,-(sp)
   16664:	|  |     |   move.l d2,-(sp)
   16666:	|  |     |   jsr 17214 <__divsf3>
   1666c:	|  |     |   addq.l #8,sp
   1666e:	|  |     |   move.l 20(sp),-(sp)
   16672:	|  |     |   move.l d0,-(sp)
   16674:	|  |     |   jsr 1711a <__addsf3>
   1667a:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1667c:	|  |     |   move.l d0,-(sp)
   1667e:	|  |     |   move.l d3,-(sp)
   16680:	|  |     |   jsr 17584 <__ltsf2>
   16686:	|  |     |   addq.l #8,sp
   16688:	|  |     |   tst.l d0
   1668a:	|  |     +-- bge.s 166a0 <pointInFloorPolygon+0x208>

			c = !c;
   1668c:	|  |     |   tst.l 24(sp)
   16690:	|  |     |   seq d0
   16692:	|  |     |   neg.b d0
   16694:	|  |     |   move.b d0,d0
   16696:	|  |     |   andi.l #255,d0
   1669c:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   166a0:	|  |     '-> move.l 32(sp),d0
   166a4:	|  |         move.l d0,d1
   166a6:	|  |         addq.l #1,d1
   166a8:	|  |         move.l d1,32(sp)
   166ac:	|  |         move.l d0,28(sp)
   166b0:	|  '-------> movea.l 40(sp),a0
   166b4:	|            move.l (a0),d0
   166b6:	|            cmp.l 32(sp),d0
   166ba:	'----------- bgt.w 164ba <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   166be:	             tst.l 24(sp)
   166c2:	             sne d0
   166c4:	             neg.b d0
   166c6:	             move.b d0,d0
   166c8:	             andi.w #255,d0
}
   166cc:	             move.l (sp)+,d2
   166ce:	             move.l (sp)+,d3
   166d0:	             lea 28(sp),sp
   166d4:	             rts

000166d6 <setFloor>:

BOOL setFloor (int fileNum) {
   166d6:	                               lea -132(sp),sp
   166da:	                               move.l a6,-(sp)
   166dc:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   166de:	                               jsr 1633e <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   166e4:	                               move.l 144(sp),-(sp)
   166e8:	                               jsr 6a20 <openFileFromNum>
   166ee:	                               addq.l #4,sp
   166f0:	                               tst.l d0
   166f2:	                           ,-- bne.s 166fa <setFloor+0x24>
   166f4:	                           |   clr.w d0
   166f6:	,--------------------------|-- bra.w 16e46 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   166fa:	|                          '-> movea.l 1a8c0 <currentFloor>,a0
   16700:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16704:	|                              move.l 1a78c <bigDataFile>,118(sp)
   1670c:	|                              move.l 1a7ac <DOSBase>,d0
   16712:	|                              movea.l d0,a6
   16714:	|                              move.l 118(sp),d1
   16718:	|                              jsr -306(a6)
   1671c:	|                              move.l d0,114(sp)
   16720:	|                              move.l 114(sp),d0
   16724:	|                              movea.l 1a8c0 <currentFloor>,a0
   1672a:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   1672e:	|                              movea.l 1a8c0 <currentFloor>,a0
   16734:	|                              move.l 8(a0),d0
   16738:	|                              lsl.l #3,d0
   1673a:	|                              move.l d0,110(sp)
   1673e:	|                              clr.l 106(sp)
   16742:	|                              move.l 1a7a4 <SysBase>,d0
   16748:	|                              movea.l d0,a6
   1674a:	|                              move.l 110(sp),d0
   1674e:	|                              move.l 106(sp),d1
   16752:	|                              jsr -684(a6)
   16756:	|                              move.l d0,102(sp)
   1675a:	|                              move.l 102(sp),d0
   1675e:	|                              movea.l 1a8c0 <currentFloor>,a0
   16764:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16768:	|                              movea.l 1a8c0 <currentFloor>,a0
   1676e:	|                              move.l 12(a0),d0
   16772:	|                          ,-- bne.s 16788 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16774:	|                          |   pea 19cee <graphics.c.7a652652+0xfb>
   1677a:	|                          |   jsr 16f2c <KPrintF>
   16780:	|                          |   addq.l #4,sp
		return FALSE;
   16782:	|                          |   clr.w d0
   16784:	+--------------------------|-- bra.w 16e46 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16788:	|                          '-> clr.l 136(sp)
   1678c:	|                    ,-------- bra.w 168a4 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16790:	|                 ,--|-------> move.l 1a78c <bigDataFile>,26(sp)
   16798:	|                 |  |         move.l 1a7ac <DOSBase>,d0
   1679e:	|                 |  |         movea.l d0,a6
   167a0:	|                 |  |         move.l 26(sp),d1
   167a4:	|                 |  |         jsr -306(a6)
   167a8:	|                 |  |         move.l d0,22(sp)
   167ac:	|                 |  |         move.l 22(sp),d1
   167b0:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   167b6:	|                 |  |         movea.l 12(a0),a0
   167ba:	|                 |  |         move.l 136(sp),d0
   167be:	|                 |  |         lsl.l #3,d0
   167c0:	|                 |  |         adda.l d0,a0
   167c2:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   167c4:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   167ca:	|                 |  |         move.l 12(a0),d1
   167ce:	|                 |  |         move.l 136(sp),d0
   167d2:	|                 |  |         lsl.l #3,d0
   167d4:	|                 |  |         movea.l d1,a0
   167d6:	|                 |  |         adda.l d0,a0
   167d8:	|                 |  |         move.l (a0),d0
   167da:	|                 |  |         add.l d0,d0
   167dc:	|                 |  |         add.l d0,d0
   167de:	|                 |  |         move.l d0,18(sp)
   167e2:	|                 |  |         clr.l 14(sp)
   167e6:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   167ec:	|                 |  |         movea.l d0,a6
   167ee:	|                 |  |         move.l 18(sp),d0
   167f2:	|                 |  |         move.l 14(sp),d1
   167f6:	|                 |  |         jsr -684(a6)
   167fa:	|                 |  |         move.l d0,10(sp)
   167fe:	|                 |  |         move.l 10(sp),d1
   16802:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16808:	|                 |  |         movea.l 12(a0),a0
   1680c:	|                 |  |         move.l 136(sp),d0
   16810:	|                 |  |         lsl.l #3,d0
   16812:	|                 |  |         adda.l d0,a0
   16814:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16818:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   1681e:	|                 |  |         move.l 12(a0),d1
   16822:	|                 |  |         move.l 136(sp),d0
   16826:	|                 |  |         lsl.l #3,d0
   16828:	|                 |  |         movea.l d1,a0
   1682a:	|                 |  |         adda.l d0,a0
   1682c:	|                 |  |         move.l 4(a0),d0
   16830:	|                 |  |     ,-- bne.s 16846 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16832:	|                 |  |     |   pea 19cee <graphics.c.7a652652+0xfb>
   16838:	|                 |  |     |   jsr 16f2c <KPrintF>
   1683e:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16840:	|                 |  |     |   clr.w d0
   16842:	+-----------------|--|-----|-- bra.w 16e46 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16846:	|                 |  |     '-> clr.l 132(sp)
   1684a:	|                 |  |     ,-- bra.s 16884 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   1684c:	|                 |  |  ,--|-> move.l 1a78c <bigDataFile>,d1
   16852:	|                 |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16858:	|                 |  |  |  |   movea.l 12(a0),a0
   1685c:	|                 |  |  |  |   move.l 136(sp),d0
   16860:	|                 |  |  |  |   lsl.l #3,d0
   16862:	|                 |  |  |  |   adda.l d0,a0
   16864:	|                 |  |  |  |   movea.l 4(a0),a0
   16868:	|                 |  |  |  |   move.l 132(sp),d0
   1686c:	|                 |  |  |  |   add.l d0,d0
   1686e:	|                 |  |  |  |   add.l d0,d0
   16870:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16874:	|                 |  |  |  |   move.l d1,-(sp)
   16876:	|                 |  |  |  |   jsr 6bc <get2bytes>
   1687c:	|                 |  |  |  |   addq.l #4,sp
   1687e:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16880:	|                 |  |  |  |   addq.l #1,132(sp)
   16884:	|                 |  |  |  '-> movea.l 1a8c0 <currentFloor>,a0
   1688a:	|                 |  |  |      move.l 12(a0),d1
   1688e:	|                 |  |  |      move.l 136(sp),d0
   16892:	|                 |  |  |      lsl.l #3,d0
   16894:	|                 |  |  |      movea.l d1,a0
   16896:	|                 |  |  |      adda.l d0,a0
   16898:	|                 |  |  |      move.l (a0),d0
   1689a:	|                 |  |  |      cmp.l 132(sp),d0
   1689e:	|                 |  |  '----- bgt.s 1684c <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   168a0:	|                 |  |         addq.l #1,136(sp)
   168a4:	|                 |  '-------> movea.l 1a8c0 <currentFloor>,a0
   168aa:	|                 |            move.l 8(a0),d0
   168ae:	|                 |            cmp.l 136(sp),d0
   168b2:	|                 '----------- bgt.w 16790 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   168b6:	|                              move.l 1a78c <bigDataFile>,d0
   168bc:	|                              move.l d0,-(sp)
   168be:	|                              jsr 6bc <get2bytes>
   168c4:	|                              addq.l #4,sp
   168c6:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   168ca:	|                              move.l 136(sp),d0
   168ce:	|                              lsl.l #3,d0
   168d0:	|                              move.l d0,98(sp)
   168d4:	|                              clr.l 94(sp)
   168d8:	|                              move.l 1a7a4 <SysBase>,d0
   168de:	|                              movea.l d0,a6
   168e0:	|                              move.l 98(sp),d0
   168e4:	|                              move.l 94(sp),d1
   168e8:	|                              jsr -684(a6)
   168ec:	|                              move.l d0,90(sp)
   168f0:	|                              move.l 90(sp),d0
   168f4:	|                              movea.l 1a8c0 <currentFloor>,a0
   168fa:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   168fe:	|                              movea.l 1a8c0 <currentFloor>,a0
   16904:	|                              move.l 4(a0),d0
   16908:	|                          ,-- bne.s 1691e <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   1690a:	|                          |   pea 19cee <graphics.c.7a652652+0xfb>
   16910:	|                          |   jsr 16f2c <KPrintF>
   16916:	|                          |   addq.l #4,sp
		return FALSE;
   16918:	|                          |   clr.w d0
   1691a:	+--------------------------|-- bra.w 16e46 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   1691e:	|                          '-> clr.l 132(sp)
   16922:	|                          ,-- bra.s 16976 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16924:	|                       ,--|-> move.l 1a78c <bigDataFile>,d1
   1692a:	|                       |  |   movea.l 1a8c0 <currentFloor>,a0
   16930:	|                       |  |   movea.l 4(a0),a0
   16934:	|                       |  |   move.l 132(sp),d0
   16938:	|                       |  |   lsl.l #3,d0
   1693a:	|                       |  |   lea (0,a0,d0.l),a2
   1693e:	|                       |  |   move.l d1,-(sp)
   16940:	|                       |  |   jsr 6bc <get2bytes>
   16946:	|                       |  |   addq.l #4,sp
   16948:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   1694a:	|                       |  |   move.l 1a78c <bigDataFile>,d1
   16950:	|                       |  |   movea.l 1a8c0 <currentFloor>,a0
   16956:	|                       |  |   movea.l 4(a0),a0
   1695a:	|                       |  |   move.l 132(sp),d0
   1695e:	|                       |  |   lsl.l #3,d0
   16960:	|                       |  |   lea (0,a0,d0.l),a2
   16964:	|                       |  |   move.l d1,-(sp)
   16966:	|                       |  |   jsr 6bc <get2bytes>
   1696c:	|                       |  |   addq.l #4,sp
   1696e:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16972:	|                       |  |   addq.l #1,132(sp)
   16976:	|                       |  '-> move.l 132(sp),d0
   1697a:	|                       |      cmp.l 136(sp),d0
   1697e:	|                       '----- blt.s 16924 <setFloor+0x24e>
	}

	finishAccess ();
   16980:	|                              jsr 6918 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16986:	|                              movea.l 1a8c0 <currentFloor>,a0
   1698c:	|                              move.l 8(a0),d0
   16990:	|                              add.l d0,d0
   16992:	|                              add.l d0,d0
   16994:	|                              move.l d0,86(sp)
   16998:	|                              clr.l 82(sp)
   1699c:	|                              move.l 1a7a4 <SysBase>,d0
   169a2:	|                              movea.l d0,a6
   169a4:	|                              move.l 86(sp),d0
   169a8:	|                              move.l 82(sp),d1
   169ac:	|                              jsr -684(a6)
   169b0:	|                              move.l d0,78(sp)
   169b4:	|                              move.l 78(sp),d0
   169b8:	|                              movea.l 1a8c0 <currentFloor>,a0
   169be:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   169c2:	|                              movea.l 1a8c0 <currentFloor>,a0
   169c8:	|                              move.l 8(a0),d0
   169cc:	|                              add.l d0,d0
   169ce:	|                              add.l d0,d0
   169d0:	|                              move.l d0,74(sp)
   169d4:	|                              clr.l 70(sp)
   169d8:	|                              move.l 1a7a4 <SysBase>,d0
   169de:	|                              movea.l d0,a6
   169e0:	|                              move.l 74(sp),d0
   169e4:	|                              move.l 70(sp),d1
   169e8:	|                              jsr -684(a6)
   169ec:	|                              move.l d0,66(sp)
   169f0:	|                              move.l 66(sp),d0
   169f4:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   169f8:	|                              movea.l 1a8c0 <currentFloor>,a0
   169fe:	|                              move.l 16(a0),d0
   16a02:	|                          ,-- bne.s 16a18 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16a04:	|                          |   pea 19cee <graphics.c.7a652652+0xfb>
   16a0a:	|                          |   jsr 16f2c <KPrintF>
   16a10:	|                          |   addq.l #4,sp
		return FALSE;
   16a12:	|                          |   clr.w d0
   16a14:	+--------------------------|-- bra.w 16e46 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16a18:	|                          '-> clr.l 136(sp)
   16a1c:	|                    ,-------- bra.w 16b40 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16a20:	|                 ,--|-------> movea.l 1a8c0 <currentFloor>,a0
   16a26:	|                 |  |         move.l 8(a0),d0
   16a2a:	|                 |  |         add.l d0,d0
   16a2c:	|                 |  |         add.l d0,d0
   16a2e:	|                 |  |         move.l d0,50(sp)
   16a32:	|                 |  |         clr.l 46(sp)
   16a36:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   16a3c:	|                 |  |         movea.l d0,a6
   16a3e:	|                 |  |         move.l 50(sp),d0
   16a42:	|                 |  |         move.l 46(sp),d1
   16a46:	|                 |  |         jsr -684(a6)
   16a4a:	|                 |  |         move.l d0,42(sp)
   16a4e:	|                 |  |         move.l 42(sp),d0
   16a52:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16a58:	|                 |  |         movea.l 16(a0),a0
   16a5c:	|                 |  |         move.l 136(sp),d1
   16a60:	|                 |  |         add.l d1,d1
   16a62:	|                 |  |         add.l d1,d1
   16a64:	|                 |  |         adda.l d1,a0
   16a66:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16a68:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16a6e:	|                 |  |         move.l 8(a0),d0
   16a72:	|                 |  |         add.l d0,d0
   16a74:	|                 |  |         add.l d0,d0
   16a76:	|                 |  |         move.l d0,38(sp)
   16a7a:	|                 |  |         clr.l 34(sp)
   16a7e:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   16a84:	|                 |  |         movea.l d0,a6
   16a86:	|                 |  |         move.l 38(sp),d0
   16a8a:	|                 |  |         move.l 34(sp),d1
   16a8e:	|                 |  |         jsr -684(a6)
   16a92:	|                 |  |         move.l d0,30(sp)
   16a96:	|                 |  |         move.l 30(sp),d1
   16a9a:	|                 |  |         move.l 136(sp),d0
   16a9e:	|                 |  |         add.l d0,d0
   16aa0:	|                 |  |         add.l d0,d0
   16aa2:	|                 |  |         movea.l 62(sp),a0
   16aa6:	|                 |  |         adda.l d0,a0
   16aa8:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16aaa:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16ab0:	|                 |  |         move.l 16(a0),d1
   16ab4:	|                 |  |         move.l 136(sp),d0
   16ab8:	|                 |  |         add.l d0,d0
   16aba:	|                 |  |         add.l d0,d0
   16abc:	|                 |  |         movea.l d1,a0
   16abe:	|                 |  |         adda.l d0,a0
   16ac0:	|                 |  |         move.l (a0),d0
   16ac2:	|                 |  |     ,-- bne.s 16ad8 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16ac4:	|                 |  |     |   pea 19cee <graphics.c.7a652652+0xfb>
   16aca:	|                 |  |     |   jsr 16f2c <KPrintF>
   16ad0:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16ad2:	|                 |  |     |   clr.w d0
   16ad4:	+-----------------|--|-----|-- bra.w 16e46 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16ad8:	|                 |  |     '-> clr.l 132(sp)
   16adc:	|                 |  |     ,-- bra.s 16b2c <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16ade:	|                 |  |  ,--|-> movea.l 1a8c0 <currentFloor>,a0
   16ae4:	|                 |  |  |  |   move.l 16(a0),d1
   16ae8:	|                 |  |  |  |   move.l 136(sp),d0
   16aec:	|                 |  |  |  |   add.l d0,d0
   16aee:	|                 |  |  |  |   add.l d0,d0
   16af0:	|                 |  |  |  |   movea.l d1,a0
   16af2:	|                 |  |  |  |   adda.l d0,a0
   16af4:	|                 |  |  |  |   move.l (a0),d1
   16af6:	|                 |  |  |  |   move.l 132(sp),d0
   16afa:	|                 |  |  |  |   add.l d0,d0
   16afc:	|                 |  |  |  |   add.l d0,d0
   16afe:	|                 |  |  |  |   movea.l d1,a0
   16b00:	|                 |  |  |  |   adda.l d0,a0
   16b02:	|                 |  |  |  |   moveq #-1,d1
   16b04:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16b06:	|                 |  |  |  |   move.l 136(sp),d0
   16b0a:	|                 |  |  |  |   add.l d0,d0
   16b0c:	|                 |  |  |  |   add.l d0,d0
   16b0e:	|                 |  |  |  |   movea.l 62(sp),a0
   16b12:	|                 |  |  |  |   adda.l d0,a0
   16b14:	|                 |  |  |  |   move.l (a0),d1
   16b16:	|                 |  |  |  |   move.l 132(sp),d0
   16b1a:	|                 |  |  |  |   add.l d0,d0
   16b1c:	|                 |  |  |  |   add.l d0,d0
   16b1e:	|                 |  |  |  |   movea.l d1,a0
   16b20:	|                 |  |  |  |   adda.l d0,a0
   16b22:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16b28:	|                 |  |  |  |   addq.l #1,132(sp)
   16b2c:	|                 |  |  |  '-> movea.l 1a8c0 <currentFloor>,a0
   16b32:	|                 |  |  |      move.l 8(a0),d0
   16b36:	|                 |  |  |      cmp.l 132(sp),d0
   16b3a:	|                 |  |  '----- bgt.s 16ade <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16b3c:	|                 |  |         addq.l #1,136(sp)
   16b40:	|                 |  '-------> movea.l 1a8c0 <currentFloor>,a0
   16b46:	|                 |            move.l 8(a0),d0
   16b4a:	|                 |            cmp.l 136(sp),d0
   16b4e:	|                 '----------- bgt.w 16a20 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16b52:	|                              clr.l 136(sp)
   16b56:	|              ,-------------- bra.w 16c5c <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16b5a:	|           ,--|-------------> clr.l 132(sp)
   16b5e:	|           |  |     ,-------- bra.w 16c46 <setFloor+0x570>
			if (i != j) {
   16b62:	|           |  |  ,--|-------> move.l 136(sp),d0
   16b66:	|           |  |  |  |         cmp.l 132(sp),d0
   16b6a:	|           |  |  |  |     ,-- beq.w 16bfc <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16b6e:	|           |  |  |  |     |   movea.l 1a8c0 <currentFloor>,a0
   16b74:	|           |  |  |  |     |   move.l 12(a0),d1
   16b78:	|           |  |  |  |     |   move.l 132(sp),d0
   16b7c:	|           |  |  |  |     |   lsl.l #3,d0
   16b7e:	|           |  |  |  |     |   movea.l d1,a1
   16b80:	|           |  |  |  |     |   adda.l d0,a1
   16b82:	|           |  |  |  |     |   movea.l 1a8c0 <currentFloor>,a0
   16b88:	|           |  |  |  |     |   move.l 12(a0),d1
   16b8c:	|           |  |  |  |     |   move.l 136(sp),d0
   16b90:	|           |  |  |  |     |   lsl.l #3,d0
   16b92:	|           |  |  |  |     |   movea.l d1,a0
   16b94:	|           |  |  |  |     |   adda.l d0,a0
   16b96:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16b9a:	|           |  |  |  |     |   move.l (a1),-(sp)
   16b9c:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16ba0:	|           |  |  |  |     |   move.l (a0),-(sp)
   16ba2:	|           |  |  |  |     |   jsr 1642e <polysShareSide>
   16ba8:	|           |  |  |  |     |   lea 16(sp),sp
   16bac:	|           |  |  |  |     |   tst.w d0
   16bae:	|           |  |  |  |  ,--|-- beq.w 16c42 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16bb2:	|           |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16bb8:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16bbc:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16bc0:	|           |  |  |  |  |  |   add.l d0,d0
   16bc2:	|           |  |  |  |  |  |   add.l d0,d0
   16bc4:	|           |  |  |  |  |  |   movea.l d1,a0
   16bc6:	|           |  |  |  |  |  |   adda.l d0,a0
   16bc8:	|           |  |  |  |  |  |   move.l (a0),d1
   16bca:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16bce:	|           |  |  |  |  |  |   add.l d0,d0
   16bd0:	|           |  |  |  |  |  |   add.l d0,d0
   16bd2:	|           |  |  |  |  |  |   movea.l d1,a0
   16bd4:	|           |  |  |  |  |  |   adda.l d0,a0
   16bd6:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16bda:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16bde:	|           |  |  |  |  |  |   add.l d0,d0
   16be0:	|           |  |  |  |  |  |   add.l d0,d0
   16be2:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16be6:	|           |  |  |  |  |  |   adda.l d0,a0
   16be8:	|           |  |  |  |  |  |   move.l (a0),d1
   16bea:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16bee:	|           |  |  |  |  |  |   add.l d0,d0
   16bf0:	|           |  |  |  |  |  |   add.l d0,d0
   16bf2:	|           |  |  |  |  |  |   movea.l d1,a0
   16bf4:	|           |  |  |  |  |  |   adda.l d0,a0
   16bf6:	|           |  |  |  |  |  |   moveq #1,d1
   16bf8:	|           |  |  |  |  |  |   move.l d1,(a0)
   16bfa:	|           |  |  |  |  +--|-- bra.s 16c42 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16bfc:	|           |  |  |  |  |  '-> movea.l 1a8c0 <currentFloor>,a0
   16c02:	|           |  |  |  |  |      move.l 16(a0),d1
   16c06:	|           |  |  |  |  |      move.l 136(sp),d0
   16c0a:	|           |  |  |  |  |      add.l d0,d0
   16c0c:	|           |  |  |  |  |      add.l d0,d0
   16c0e:	|           |  |  |  |  |      movea.l d1,a0
   16c10:	|           |  |  |  |  |      adda.l d0,a0
   16c12:	|           |  |  |  |  |      move.l (a0),d1
   16c14:	|           |  |  |  |  |      move.l 132(sp),d0
   16c18:	|           |  |  |  |  |      add.l d0,d0
   16c1a:	|           |  |  |  |  |      add.l d0,d0
   16c1c:	|           |  |  |  |  |      movea.l d1,a0
   16c1e:	|           |  |  |  |  |      adda.l d0,a0
   16c20:	|           |  |  |  |  |      moveq #-2,d0
   16c22:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16c24:	|           |  |  |  |  |      move.l 136(sp),d0
   16c28:	|           |  |  |  |  |      add.l d0,d0
   16c2a:	|           |  |  |  |  |      add.l d0,d0
   16c2c:	|           |  |  |  |  |      movea.l 62(sp),a0
   16c30:	|           |  |  |  |  |      adda.l d0,a0
   16c32:	|           |  |  |  |  |      move.l (a0),d1
   16c34:	|           |  |  |  |  |      move.l 132(sp),d0
   16c38:	|           |  |  |  |  |      add.l d0,d0
   16c3a:	|           |  |  |  |  |      add.l d0,d0
   16c3c:	|           |  |  |  |  |      movea.l d1,a0
   16c3e:	|           |  |  |  |  |      adda.l d0,a0
   16c40:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16c42:	|           |  |  |  |  '----> addq.l #1,132(sp)
   16c46:	|           |  |  |  '-------> movea.l 1a8c0 <currentFloor>,a0
   16c4c:	|           |  |  |            move.l 8(a0),d0
   16c50:	|           |  |  |            cmp.l 132(sp),d0
   16c54:	|           |  |  '----------- bgt.w 16b62 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16c58:	|           |  |               addq.l #1,136(sp)
   16c5c:	|           |  '-------------> movea.l 1a8c0 <currentFloor>,a0
   16c62:	|           |                  move.l 8(a0),d0
   16c66:	|           |                  cmp.l 136(sp),d0
   16c6a:	|           '----------------- bgt.w 16b5a <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16c6e:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16c72:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16c76:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16c7a:	|  |                           clr.l 136(sp)
   16c7e:	|  |     ,-------------------- bra.w 16dd4 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16c82:	|  |  ,--|-------------------> clr.l 132(sp)
   16c86:	|  |  |  |     ,-------------- bra.w 16dbe <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   16c8a:	|  |  |  |  ,--|-------------> movea.l 1a8c0 <currentFloor>,a0
   16c90:	|  |  |  |  |  |               move.l 16(a0),d1
   16c94:	|  |  |  |  |  |               move.l 136(sp),d0
   16c98:	|  |  |  |  |  |               add.l d0,d0
   16c9a:	|  |  |  |  |  |               add.l d0,d0
   16c9c:	|  |  |  |  |  |               movea.l d1,a0
   16c9e:	|  |  |  |  |  |               adda.l d0,a0
   16ca0:	|  |  |  |  |  |               move.l (a0),d1
   16ca2:	|  |  |  |  |  |               move.l 132(sp),d0
   16ca6:	|  |  |  |  |  |               add.l d0,d0
   16ca8:	|  |  |  |  |  |               add.l d0,d0
   16caa:	|  |  |  |  |  |               movea.l d1,a0
   16cac:	|  |  |  |  |  |               adda.l d0,a0
   16cae:	|  |  |  |  |  |               move.l (a0),d0
   16cb0:	|  |  |  |  |  |               moveq #-1,d1
   16cb2:	|  |  |  |  |  |               cmp.l d0,d1
   16cb4:	|  |  |  |  |  |  ,----------- bne.w 16dba <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16cb8:	|  |  |  |  |  |  |            clr.l 122(sp)
   16cbc:	|  |  |  |  |  |  |     ,----- bra.w 16da8 <setFloor+0x6d2>
						if (d != i && d != j) {
   16cc0:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   16cc4:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16cc8:	|  |  |  |  |  |  |  |  |  ,-- beq.w 16da4 <setFloor+0x6ce>
   16ccc:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16cd0:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16cd4:	|  |  |  |  |  |  |  |  |  +-- beq.w 16da4 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16cd8:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16cde:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16ce2:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16ce6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ce8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16cea:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16cec:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16cee:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16cf0:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16cf4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16cf6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16cf8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16cfa:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16cfc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   16cfe:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   16d02:	|  |  |  |  |  |  |  |  |  +-- bne.w 16da4 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   16d06:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16d0c:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16d10:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16d14:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d16:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d18:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16d1a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d1c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16d1e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16d22:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d24:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d26:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16d28:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d2a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   16d2c:	|  |  |  |  |  |  |  |  |  +-- bmi.s 16da4 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   16d2e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16d32:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d34:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d36:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16d3a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d3c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16d3e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16d42:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d44:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d46:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16d48:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d4a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   16d4c:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   16d50:	|  |  |  |  |  |  |  |  |  +-- bgt.s 16da4 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   16d52:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16d58:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16d5c:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16d60:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d62:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d64:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16d66:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d68:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16d6a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16d6e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d70:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d72:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16d74:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d76:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   16d7a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16d7e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d80:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d82:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16d86:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d88:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16d8a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16d8e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d90:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d92:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16d94:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d96:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   16d9a:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   16d9c:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   16d9e:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16da4:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   16da8:	|  |  |  |  |  |  |  |  '----> movea.l 1a8c0 <currentFloor>,a0
   16dae:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   16db2:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   16db6:	|  |  |  |  |  |  |  '-------- bgt.w 16cc0 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16dba:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   16dbe:	|  |  |  |  |  '-------------> movea.l 1a8c0 <currentFloor>,a0
   16dc4:	|  |  |  |  |                  move.l 8(a0),d0
   16dc8:	|  |  |  |  |                  cmp.l 132(sp),d0
   16dcc:	|  |  |  |  '----------------- bgt.w 16c8a <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16dd0:	|  |  |  |                     addq.l #1,136(sp)
   16dd4:	|  |  |  '-------------------> movea.l 1a8c0 <currentFloor>,a0
   16dda:	|  |  |                        move.l 8(a0),d0
   16dde:	|  |  |                        cmp.l 136(sp),d0
   16de2:	|  |  '----------------------- bgt.w 16c82 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   16de6:	|  |                           tst.w 130(sp)
   16dea:	|  '-------------------------- bne.w 16c72 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16dee:	|                              clr.l 136(sp)
   16df2:	|                          ,-- bra.s 16e1a <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   16df4:	|                       ,--|-> move.l 136(sp),d0
   16df8:	|                       |  |   add.l d0,d0
   16dfa:	|                       |  |   add.l d0,d0
   16dfc:	|                       |  |   movea.l 62(sp),a0
   16e00:	|                       |  |   adda.l d0,a0
   16e02:	|                       |  |   move.l (a0),54(sp)
   16e06:	|                       |  |   move.l 1a7a4 <SysBase>,d0
   16e0c:	|                       |  |   movea.l d0,a6
   16e0e:	|                       |  |   movea.l 54(sp),a1
   16e12:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e16:	|                       |  |   addq.l #1,136(sp)
   16e1a:	|                       |  '-> movea.l 1a8c0 <currentFloor>,a0
   16e20:	|                       |      move.l 8(a0),d0
   16e24:	|                       |      cmp.l 136(sp),d0
   16e28:	|                       '----- bgt.s 16df4 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   16e2a:	|                              move.l 62(sp),58(sp)
   16e30:	|                              move.l 1a7a4 <SysBase>,d0
   16e36:	|                              movea.l d0,a6
   16e38:	|                              movea.l 58(sp),a1
   16e3c:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   16e40:	|                              clr.l 62(sp)

	return TRUE;
   16e44:	|                              moveq #1,d0
}
   16e46:	'----------------------------> movea.l (sp)+,a2
   16e48:	                               movea.l (sp)+,a6
   16e4a:	                               lea 132(sp),sp
   16e4e:	                               rts

00016e50 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   16e50:	jsr 1633e <killFloor>
	noFloor ();
   16e56:	jsr 16262 <noFloor>
   16e5c:	nop
   16e5e:	rts

00016e60 <WaitVbl>:
void WaitVbl() {
   16e60:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   16e62:	   ,-> movea.l #14675972,a0
   16e68:	   |   move.l (a0),d0
   16e6a:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   16e6c:	   |   move.l (sp),d0
   16e6e:	   |   andi.l #130816,d0
   16e74:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   16e76:	   |   move.l (sp),d0
   16e78:	   |   cmpi.l #76800,d0
   16e7e:	   '-- beq.s 16e62 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   16e80:	,----> movea.l #14675972,a0
   16e86:	|      move.l (a0),d0
   16e88:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   16e8c:	|      move.l 4(sp),d0
   16e90:	|      andi.l #130816,d0
   16e96:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   16e9a:	|      move.l 4(sp),d0
   16e9e:	|      cmpi.l #76800,d0
   16ea4:	|  ,-- beq.s 16ea8 <WaitVbl+0x48>
	while (1) {
   16ea6:	'--|-- bra.s 16e80 <WaitVbl+0x20>
			break;
   16ea8:	   '-> nop
}
   16eaa:	       nop
   16eac:	       addq.l #8,sp
   16eae:	       rts

00016eb0 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   16eb0:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   16eb2:	       move.l 8(sp),(sp)
	while(len-- > 0)
   16eb6:	   ,-- bra.s 16ec8 <memset+0x18>
		*ptr++ = val;
   16eb8:	,--|-> move.l (sp),d0
   16eba:	|  |   move.l d0,d1
   16ebc:	|  |   addq.l #1,d1
   16ebe:	|  |   move.l d1,(sp)
   16ec0:	|  |   move.l 12(sp),d1
   16ec4:	|  |   movea.l d0,a0
   16ec6:	|  |   move.b d1,(a0)
	while(len-- > 0)
   16ec8:	|  '-> move.l 16(sp),d0
   16ecc:	|      move.l d0,d1
   16ece:	|      subq.l #1,d1
   16ed0:	|      move.l d1,16(sp)
   16ed4:	|      tst.l d0
   16ed6:	'----- bne.s 16eb8 <memset+0x8>
	return dest;
   16ed8:	       move.l 8(sp),d0
}
   16edc:	       addq.l #4,sp
   16ede:	       rts

00016ee0 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   16ee0:	       subq.l #8,sp
   16ee2:	       move.l d2,-(sp)
	char *d = (char *)dest;
   16ee4:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   16eea:	       move.l 20(sp),4(sp)
	while(len--)
   16ef0:	   ,-- bra.s 16f12 <memcpy+0x32>
		*d++ = *s++;
   16ef2:	,--|-> move.l 4(sp),d1
   16ef6:	|  |   move.l d1,d0
   16ef8:	|  |   addq.l #1,d0
   16efa:	|  |   move.l d0,4(sp)
   16efe:	|  |   move.l 8(sp),d0
   16f02:	|  |   move.l d0,d2
   16f04:	|  |   addq.l #1,d2
   16f06:	|  |   move.l d2,8(sp)
   16f0a:	|  |   movea.l d1,a0
   16f0c:	|  |   move.b (a0),d1
   16f0e:	|  |   movea.l d0,a0
   16f10:	|  |   move.b d1,(a0)
	while(len--)
   16f12:	|  '-> move.l 24(sp),d0
   16f16:	|      move.l d0,d1
   16f18:	|      subq.l #1,d1
   16f1a:	|      move.l d1,24(sp)
   16f1e:	|      tst.l d0
   16f20:	'----- bne.s 16ef2 <memcpy+0x12>
	return dest;
   16f22:	       move.l 16(sp),d0
}
   16f26:	       move.l (sp)+,d2
   16f28:	       addq.l #8,sp
   16f2a:	       rts

00016f2c <KPrintF>:
void KPrintF(const char* fmt, ...) {
   16f2c:	       lea -128(sp),sp
   16f30:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   16f34:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4d07>,d0
   16f3a:	       cmpi.w #20153,d0
   16f3e:	   ,-- beq.s 16f62 <KPrintF+0x36>
   16f40:	   |   cmpi.w #-24562,d0
   16f44:	   +-- beq.s 16f62 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   16f46:	   |   movea.l 1a7a4 <SysBase>,a6
   16f4c:	   |   movea.l 144(sp),a0
   16f50:	   |   lea 148(sp),a1
   16f54:	   |   lea 179c0 <KPutCharX>,a2
   16f5a:	   |   suba.l a3,a3
   16f5c:	   |   jsr -522(a6)
}
   16f60:	,--|-- bra.s 16f8c <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   16f62:	|  '-> movea.l 1a7a4 <SysBase>,a6
   16f68:	|      movea.l 144(sp),a0
   16f6c:	|      lea 148(sp),a1
   16f70:	|      lea 179ce <PutChar>,a2
   16f76:	|      lea 12(sp),a3
   16f7a:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   16f7e:	|      move.l a3,-(sp)
   16f80:	|      pea 56 <_start+0x56>
   16f84:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4d07>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   16f8a:	|      addq.l #8,sp
}
   16f8c:	'----> movem.l (sp)+,a2-a3/a6
   16f90:	       lea 128(sp),sp
   16f94:	       rts

00016f96 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   16f96:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   16f98:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   16f9e:	       movea.l (sp),a0
   16fa0:	       move.w (a0),d0
   16fa2:	       cmpi.w #20153,d0
   16fa6:	   ,-- beq.s 16fb2 <debug_cmd+0x1c>
   16fa8:	   |   movea.l (sp),a0
   16faa:	   |   move.w (a0),d0
   16fac:	   |   cmpi.w #-24562,d0
   16fb0:	,--|-- bne.s 16fd0 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   16fb2:	|  '-> move.l 20(sp),-(sp)
   16fb6:	|      move.l 20(sp),-(sp)
   16fba:	|      move.l 20(sp),-(sp)
   16fbe:	|      move.l 20(sp),-(sp)
   16fc2:	|      pea 58 <_start+0x58>
   16fc6:	|      movea.l 20(sp),a0
   16fca:	|      jsr (a0)
   16fcc:	|      lea 20(sp),sp
	}
}
   16fd0:	'----> nop
   16fd2:	       addq.l #4,sp
   16fd4:	       rts

00016fd6 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   16fd6:	       move.l d2,-(sp)
	while(*source && --num > 0)
   16fd8:	   ,-- bra.s 16ffa <my_strncpy+0x24>
		*destination++ = *source++;
   16fda:	,--|-> move.l 12(sp),d1
   16fde:	|  |   move.l d1,d0
   16fe0:	|  |   addq.l #1,d0
   16fe2:	|  |   move.l d0,12(sp)
   16fe6:	|  |   move.l 8(sp),d0
   16fea:	|  |   move.l d0,d2
   16fec:	|  |   addq.l #1,d2
   16fee:	|  |   move.l d2,8(sp)
   16ff2:	|  |   movea.l d1,a0
   16ff4:	|  |   move.b (a0),d1
   16ff6:	|  |   movea.l d0,a0
   16ff8:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   16ffa:	|  '-> movea.l 12(sp),a0
   16ffe:	|      move.b (a0),d0
   17000:	|  ,-- beq.s 17008 <my_strncpy+0x32>
   17002:	|  |   subq.l #1,16(sp)
   17006:	'--|-- bne.s 16fda <my_strncpy+0x4>
	*destination = '\0';
   17008:	   '-> movea.l 8(sp),a0
   1700c:	       clr.b (a0)
}
   1700e:	       nop
   17010:	       move.l (sp)+,d2
   17012:	       rts

00017014 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   17014:	    lea -60(sp),sp
   17018:	    movea.l 72(sp),a1
   1701c:	    movea.l 76(sp),a0
   17020:	    move.l 80(sp),d1
   17024:	    move.l 84(sp),d0
   17028:	    movea.w a1,a1
   1702a:	    move.w a1,8(sp)
   1702e:	    movea.w a0,a0
   17030:	    move.w a0,6(sp)
   17034:	    move.w d1,d1
   17036:	    move.w d1,4(sp)
   1703a:	    move.w d0,d0
   1703c:	    move.w d0,2(sp)
	struct debug_resource resource = {
   17040:	    lea 10(sp),a0
   17044:	    clr.l (a0)
   17046:	    addq.l #4,a0
   17048:	    clr.l (a0)
   1704a:	    addq.l #4,a0
   1704c:	    clr.l (a0)
   1704e:	    addq.l #4,a0
   17050:	    clr.l (a0)
   17052:	    addq.l #4,a0
   17054:	    clr.l (a0)
   17056:	    addq.l #4,a0
   17058:	    clr.l (a0)
   1705a:	    addq.l #4,a0
   1705c:	    clr.l (a0)
   1705e:	    addq.l #4,a0
   17060:	    clr.l (a0)
   17062:	    addq.l #4,a0
   17064:	    clr.l (a0)
   17066:	    addq.l #4,a0
   17068:	    clr.l (a0)
   1706a:	    addq.l #4,a0
   1706c:	    clr.l (a0)
   1706e:	    addq.l #4,a0
   17070:	    clr.l (a0)
   17072:	    addq.l #4,a0
   17074:	    clr.w (a0)
   17076:	    addq.l #2,a0
		.address = (unsigned int)addr,
   17078:	    move.l 64(sp),d0
	struct debug_resource resource = {
   1707c:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   17080:	    move.w 8(sp),d0
   17084:	,-- bpl.s 17088 <debug_register_bitmap+0x74>
   17086:	|   addq.w #7,d0
   17088:	'-> asr.w #3,d0
   1708a:	    movea.w d0,a0
   1708c:	    movea.w 6(sp),a1
   17090:	    move.l a1,-(sp)
   17092:	    move.l a0,-(sp)
   17094:	    jsr 178b8 <__mulsi3>
   1709a:	    addq.l #8,sp
   1709c:	    movea.w 4(sp),a0
   170a0:	    move.l a0,-(sp)
   170a2:	    move.l d0,-(sp)
   170a4:	    jsr 178b8 <__mulsi3>
   170aa:	    addq.l #8,sp
	struct debug_resource resource = {
   170ac:	    move.l d0,14(sp)
   170b0:	    move.w 2(sp),52(sp)
   170b6:	    move.w 8(sp),54(sp)
   170bc:	    move.w 6(sp),56(sp)
   170c2:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   170c8:	    moveq #0,d0
   170ca:	    move.w 2(sp),d0
   170ce:	    moveq #2,d1
   170d0:	    and.l d1,d0
   170d2:	,-- beq.s 170de <debug_register_bitmap+0xca>
		resource.size *= 2;
   170d4:	|   move.l 14(sp),d0
   170d8:	|   add.l d0,d0
   170da:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   170de:	'-> pea 20 <_start+0x20>
   170e2:	    move.l 72(sp),-(sp)
   170e6:	    lea 18(sp),a0
   170ea:	    move.l a0,d0
   170ec:	    addq.l #8,d0
   170ee:	    move.l d0,-(sp)
   170f0:	    jsr 16fd6 <my_strncpy>
   170f6:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   170fa:	    lea 10(sp),a0
   170fe:	    clr.l -(sp)
   17100:	    clr.l -(sp)
   17102:	    move.l a0,-(sp)
   17104:	    pea 4 <_start+0x4>
   17108:	    jsr 16f96 <debug_cmd>
   1710e:	    lea 16(sp),sp
}
   17112:	    nop
   17114:	    lea 60(sp),sp
   17118:	    rts

0001711a <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   1711a:	lea -12(sp),sp
   1711e:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   17120:	move.l 20(sp),12(sp)
   17126:	move.l 24(sp),8(sp)
   1712c:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17132:	movea.l d0,a6
   17134:	move.l 12(sp),d0
   17138:	move.l 8(sp),d1
   1713c:	jsr -66(a6)
   17140:	move.l d0,4(sp)
   17144:	move.l 4(sp),d0
}
   17148:	movea.l (sp)+,a6
   1714a:	lea 12(sp),sp
   1714e:	rts

00017150 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   17150:	lea -32(sp),sp
   17154:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17158:	move.l 48(sp),36(sp)
   1715e:	move.l 52(sp),40(sp)
   17164:	move.l 56(sp),28(sp)
   1716a:	move.l 60(sp),32(sp)
   17170:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   17176:	movea.l d0,a6
   17178:	move.l 36(sp),d0
   1717c:	move.l 40(sp),d1
   17180:	move.l 28(sp),d2
   17184:	move.l 32(sp),d3
   17188:	jsr -66(a6)
   1718c:	move.l d0,12(sp)
   17190:	move.l d1,16(sp)
   17194:	move.l 12(sp),20(sp)
   1719a:	move.l 16(sp),24(sp)
   171a0:	move.l 20(sp),d0
   171a4:	move.l 24(sp),d1
}
   171a8:	movem.l (sp)+,d2-d3/a6
   171ac:	lea 32(sp),sp
   171b0:	rts

000171b2 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   171b2:	lea -32(sp),sp
   171b6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   171ba:	move.l 48(sp),36(sp)
   171c0:	move.l 52(sp),40(sp)
   171c6:	move.l 56(sp),28(sp)
   171cc:	move.l 60(sp),32(sp)
   171d2:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   171d8:	movea.l d0,a6
   171da:	move.l 36(sp),d0
   171de:	move.l 40(sp),d1
   171e2:	move.l 28(sp),d2
   171e6:	move.l 32(sp),d3
   171ea:	jsr -84(a6)
   171ee:	move.l d0,12(sp)
   171f2:	move.l d1,16(sp)
   171f6:	move.l 12(sp),20(sp)
   171fc:	move.l 16(sp),24(sp)
   17202:	move.l 20(sp),d0
   17206:	move.l 24(sp),d1
}
   1720a:	movem.l (sp)+,d2-d3/a6
   1720e:	lea 32(sp),sp
   17212:	rts

00017214 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   17214:	lea -12(sp),sp
   17218:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   1721a:	move.l 20(sp),12(sp)
   17220:	move.l 24(sp),8(sp)
   17226:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1722c:	movea.l d0,a6
   1722e:	move.l 12(sp),d0
   17232:	move.l 8(sp),d1
   17236:	jsr -84(a6)
   1723a:	move.l d0,4(sp)
   1723e:	move.l 4(sp),d0
}
   17242:	movea.l (sp)+,a6
   17244:	lea 12(sp),sp
   17248:	rts

0001724a <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   1724a:	lea -12(sp),sp
   1724e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17250:	move.l 20(sp),12(sp)
   17256:	move.l 24(sp),8(sp)
   1725c:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17262:	movea.l d0,a6
   17264:	move.l 12(sp),d0
   17268:	move.l 8(sp),d1
   1726c:	jsr -42(a6)
   17270:	move.l d0,4(sp)
   17274:	move.l 4(sp),d0
}
   17278:	movea.l (sp)+,a6
   1727a:	lea 12(sp),sp
   1727e:	rts

00017280 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   17280:	lea -20(sp),sp
   17284:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   17286:	move.l 28(sp),20(sp)
   1728c:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   17292:	movea.l d0,a6
   17294:	move.l 20(sp),d0
   17298:	jsr -108(a6)
   1729c:	move.l d0,4(sp)
   172a0:	move.l d1,8(sp)
   172a4:	move.l 4(sp),12(sp)
   172aa:	move.l 8(sp),16(sp)
   172b0:	move.l 12(sp),d0
   172b4:	move.l 16(sp),d1
}
   172b8:	movea.l (sp)+,a6
   172ba:	lea 20(sp),sp
   172be:	rts

000172c0 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   172c0:	lea -12(sp),sp
   172c4:	move.l a6,-(sp)
	return IEEEDPFix(value);
   172c6:	move.l 20(sp),8(sp)
   172cc:	move.l 24(sp),12(sp)
   172d2:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   172d8:	movea.l d0,a6
   172da:	move.l 8(sp),d0
   172de:	move.l 12(sp),d1
   172e2:	jsr -30(a6)
   172e6:	move.l d0,4(sp)
   172ea:	move.l 4(sp),d0
}
   172ee:	movea.l (sp)+,a6
   172f0:	lea 12(sp),sp
   172f4:	rts

000172f6 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   172f6:	subq.l #8,sp
   172f8:	move.l a6,-(sp)
	return IEEESPFix(value);
   172fa:	move.l 16(sp),8(sp)
   17300:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17306:	movea.l d0,a6
   17308:	move.l 8(sp),d0
   1730c:	jsr -30(a6)
   17310:	move.l d0,4(sp)
   17314:	move.l 4(sp),d0
}
   17318:	movea.l (sp)+,a6
   1731a:	addq.l #8,sp
   1731c:	rts

0001731e <__floatsidf>:


DOUBLE __floatsidf (int i) {
   1731e:	lea -20(sp),sp
   17322:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17324:	move.l 28(sp),20(sp)
   1732a:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   17330:	movea.l d0,a6
   17332:	move.l 20(sp),d0
   17336:	jsr -36(a6)
   1733a:	move.l d0,4(sp)
   1733e:	move.l d1,8(sp)
   17342:	move.l 4(sp),12(sp)
   17348:	move.l 8(sp),16(sp)
   1734e:	move.l 12(sp),d0
   17352:	move.l 16(sp),d1
}
   17356:	movea.l (sp)+,a6
   17358:	lea 20(sp),sp
   1735c:	rts

0001735e <__floatsisf>:

FLOAT __floatsisf(int i) {
   1735e:	subq.l #8,sp
   17360:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17362:	move.l 16(sp),8(sp)
   17368:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1736e:	movea.l d0,a6
   17370:	move.l 8(sp),d0
   17374:	jsr -36(a6)
   17378:	move.l d0,4(sp)
   1737c:	move.l 4(sp),d0
}
   17380:	movea.l (sp)+,a6
   17382:	addq.l #8,sp
   17384:	rts

00017386 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17386:	subq.l #8,sp
   17388:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1738a:	move.l 16(sp),8(sp)
   17390:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17396:	movea.l d0,a6
   17398:	move.l 8(sp),d0
   1739c:	jsr -36(a6)
   173a0:	move.l d0,4(sp)
   173a4:	move.l 4(sp),d0
}
   173a8:	movea.l (sp)+,a6
   173aa:	addq.l #8,sp
   173ac:	rts

000173ae <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   173ae:	lea -32(sp),sp
   173b2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   173b6:	move.l 48(sp),36(sp)
   173bc:	move.l 52(sp),40(sp)
   173c2:	move.l 56(sp),28(sp)
   173c8:	move.l 60(sp),32(sp)
   173ce:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   173d4:	movea.l d0,a6
   173d6:	move.l 36(sp),d0
   173da:	move.l 40(sp),d1
   173de:	move.l 28(sp),d2
   173e2:	move.l 32(sp),d3
   173e6:	jsr -78(a6)
   173ea:	move.l d0,12(sp)
   173ee:	move.l d1,16(sp)
   173f2:	move.l 12(sp),20(sp)
   173f8:	move.l 16(sp),24(sp)
   173fe:	move.l 20(sp),d0
   17402:	move.l 24(sp),d1
}
   17406:	movem.l (sp)+,d2-d3/a6
   1740a:	lea 32(sp),sp
   1740e:	rts

00017410 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   17410:	lea -12(sp),sp
   17414:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17416:	move.l 20(sp),12(sp)
   1741c:	move.l 24(sp),8(sp)
   17422:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17428:	movea.l d0,a6
   1742a:	move.l 12(sp),d0
   1742e:	move.l 8(sp),d1
   17432:	jsr -78(a6)
   17436:	move.l d0,4(sp)
   1743a:	move.l 4(sp),d0
}
   1743e:	movea.l (sp)+,a6
   17440:	lea 12(sp),sp
   17444:	rts

00017446 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17446:	lea -12(sp),sp
   1744a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1744c:	move.l 20(sp),12(sp)
   17452:	move.l 24(sp),8(sp)
   17458:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1745e:	movea.l d0,a6
   17460:	move.l 12(sp),d0
   17464:	move.l 8(sp),d1
   17468:	jsr -42(a6)
   1746c:	move.l d0,4(sp)
   17470:	move.l 4(sp),d0
}
   17474:	movea.l (sp)+,a6
   17476:	lea 12(sp),sp
   1747a:	rts

0001747c <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1747c:	lea -20(sp),sp
   17480:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17484:	move.l 36(sp),24(sp)
   1748a:	move.l 40(sp),28(sp)
   17490:	move.l 44(sp),16(sp)
   17496:	move.l 48(sp),20(sp)
   1749c:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   174a2:	movea.l d0,a6
   174a4:	move.l 24(sp),d0
   174a8:	move.l 28(sp),d1
   174ac:	move.l 16(sp),d2
   174b0:	move.l 20(sp),d3
   174b4:	jsr -42(a6)
   174b8:	move.l d0,12(sp)
   174bc:	move.l 12(sp),d0
}
   174c0:	movem.l (sp)+,d2-d3/a6
   174c4:	lea 20(sp),sp
   174c8:	rts

000174ca <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   174ca:	lea -12(sp),sp
   174ce:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   174d0:	move.l 20(sp),12(sp)
   174d6:	move.l 24(sp),8(sp)
   174dc:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   174e2:	movea.l d0,a6
   174e4:	move.l 12(sp),d0
   174e8:	move.l 8(sp),d1
   174ec:	jsr -42(a6)
   174f0:	move.l d0,4(sp)
   174f4:	move.l 4(sp),d0
}
   174f8:	movea.l (sp)+,a6
   174fa:	lea 12(sp),sp
   174fe:	rts

00017500 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17500:	lea -12(sp),sp
   17504:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17506:	move.l 20(sp),12(sp)
   1750c:	move.l 24(sp),8(sp)
   17512:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17518:	movea.l d0,a6
   1751a:	move.l 12(sp),d0
   1751e:	move.l 8(sp),d1
   17522:	jsr -42(a6)
   17526:	move.l d0,4(sp)
   1752a:	move.l 4(sp),d0
}
   1752e:	movea.l (sp)+,a6
   17530:	lea 12(sp),sp
   17534:	rts

00017536 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17536:	lea -20(sp),sp
   1753a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1753e:	move.l 36(sp),24(sp)
   17544:	move.l 40(sp),28(sp)
   1754a:	move.l 44(sp),16(sp)
   17550:	move.l 48(sp),20(sp)
   17556:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   1755c:	movea.l d0,a6
   1755e:	move.l 24(sp),d0
   17562:	move.l 28(sp),d1
   17566:	move.l 16(sp),d2
   1756a:	move.l 20(sp),d3
   1756e:	jsr -42(a6)
   17572:	move.l d0,12(sp)
   17576:	move.l 12(sp),d0
}
   1757a:	movem.l (sp)+,d2-d3/a6
   1757e:	lea 20(sp),sp
   17582:	rts

00017584 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17584:	lea -12(sp),sp
   17588:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1758a:	move.l 20(sp),12(sp)
   17590:	move.l 24(sp),8(sp)
   17596:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1759c:	movea.l d0,a6
   1759e:	move.l 12(sp),d0
   175a2:	move.l 8(sp),d1
   175a6:	jsr -42(a6)
   175aa:	move.l d0,4(sp)
   175ae:	move.l 4(sp),d0
}
   175b2:	movea.l (sp)+,a6
   175b4:	lea 12(sp),sp
   175b8:	rts

000175ba <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   175ba:	lea -12(sp),sp
   175be:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   175c0:	move.l 20(sp),12(sp)
   175c6:	move.l 24(sp),8(sp)
   175cc:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   175d2:	movea.l d0,a6
   175d4:	move.l 12(sp),d0
   175d8:	move.l 8(sp),d1
   175dc:	jsr -42(a6)
   175e0:	move.l d0,4(sp)
   175e4:	move.l 4(sp),d0
}
   175e8:	movea.l (sp)+,a6
   175ea:	lea 12(sp),sp
   175ee:	rts

000175f0 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   175f0:	lea -32(sp),sp
   175f4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   175f8:	move.l 48(sp),36(sp)
   175fe:	move.l 52(sp),40(sp)
   17604:	move.l 56(sp),28(sp)
   1760a:	move.l 60(sp),32(sp)
   17610:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   17616:	movea.l d0,a6
   17618:	move.l 36(sp),d0
   1761c:	move.l 40(sp),d1
   17620:	move.l 28(sp),d2
   17624:	move.l 32(sp),d3
   17628:	jsr -72(a6)
   1762c:	move.l d0,12(sp)
   17630:	move.l d1,16(sp)
   17634:	move.l 12(sp),20(sp)
   1763a:	move.l 16(sp),24(sp)
   17640:	move.l 20(sp),d0
   17644:	move.l 24(sp),d1
}
   17648:	movem.l (sp)+,d2-d3/a6
   1764c:	lea 32(sp),sp
   17650:	rts

00017652 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17652:	lea -12(sp),sp
   17656:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17658:	move.l 20(sp),12(sp)
   1765e:	move.l 24(sp),8(sp)
   17664:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1766a:	movea.l d0,a6
   1766c:	move.l 12(sp),d0
   17670:	move.l 8(sp),d1
   17674:	jsr -72(a6)
   17678:	move.l d0,4(sp)
   1767c:	move.l 4(sp),d0
}
   17680:	movea.l (sp)+,a6
   17682:	lea 12(sp),sp
   17686:	rts

00017688 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17688:	lea -12(sp),sp
   1768c:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   1768e:	move.l 20(sp),8(sp)
   17694:	move.l 24(sp),12(sp)
   1769a:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   176a0:	movea.l d0,a6
   176a2:	move.l 8(sp),d0
   176a6:	move.l 12(sp),d1
   176aa:	jsr -102(a6)
   176ae:	move.l d0,4(sp)
   176b2:	move.l 4(sp),d0
}
   176b6:	movea.l (sp)+,a6
   176b8:	lea 12(sp),sp
   176bc:	rts

000176be <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   176be:	       lea -24(sp),sp
   176c2:	       move.l a6,-(sp)
    if (x > 0) {
   176c4:	       clr.l -(sp)
   176c6:	       move.l 40(sp),-(sp)
   176ca:	       jsr 174ca <__gtsf2>
   176d0:	       addq.l #8,sp
   176d2:	       tst.l d0
   176d4:	   ,-- ble.s 17706 <atan2f+0x48>
        return IEEESPAtan(y / x);
   176d6:	   |   move.l 36(sp),-(sp)
   176da:	   |   move.l 36(sp),-(sp)
   176de:	   |   jsr 17214 <__divsf3>
   176e4:	   |   addq.l #8,sp
   176e6:	   |   move.l d0,8(sp)
   176ea:	   |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   176f0:	   |   movea.l d0,a6
   176f2:	   |   move.l 8(sp),d0
   176f6:	   |   jsr -30(a6)
   176fa:	   |   move.l d0,4(sp)
   176fe:	   |   move.l 4(sp),d0
   17702:	,--|-- bra.w 17866 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17706:	|  '-> clr.l -(sp)
   17708:	|      move.l 40(sp),-(sp)
   1770c:	|      jsr 17584 <__ltsf2>
   17712:	|      addq.l #8,sp
   17714:	|      tst.l d0
   17716:	|  ,-- bge.s 1778a <atan2f+0xcc>
   17718:	|  |   clr.l -(sp)
   1771a:	|  |   move.l 36(sp),-(sp)
   1771e:	|  |   jsr 17446 <__gesf2>
   17724:	|  |   addq.l #8,sp
   17726:	|  |   tst.l d0
   17728:	|  +-- blt.s 1778a <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   1772a:	|  |   move.l 36(sp),-(sp)
   1772e:	|  |   move.l 36(sp),-(sp)
   17732:	|  |   jsr 17214 <__divsf3>
   17738:	|  |   addq.l #8,sp
   1773a:	|  |   move.l d0,24(sp)
   1773e:	|  |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   17744:	|  |   movea.l d0,a6
   17746:	|  |   move.l 24(sp),d0
   1774a:	|  |   jsr -30(a6)
   1774e:	|  |   move.l d0,20(sp)
   17752:	|  |   move.l 20(sp),d0
   17756:	|  |   move.l d0,-(sp)
   17758:	|  |   jsr 17280 <__extendsfdf2>
   1775e:	|  |   addq.l #4,sp
   17760:	|  |   move.l #1413754136,-(sp)
   17766:	|  |   move.l #1074340347,-(sp)
   1776c:	|  |   move.l d1,-(sp)
   1776e:	|  |   move.l d0,-(sp)
   17770:	|  |   jsr 17150 <__adddf3>
   17776:	|  |   lea 16(sp),sp
   1777a:	|  |   move.l d1,-(sp)
   1777c:	|  |   move.l d0,-(sp)
   1777e:	|  |   jsr 17688 <__truncdfsf2>
   17784:	|  |   addq.l #8,sp
   17786:	+--|-- bra.w 17866 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   1778a:	|  '-> clr.l -(sp)
   1778c:	|      move.l 40(sp),-(sp)
   17790:	|      jsr 17584 <__ltsf2>
   17796:	|      addq.l #8,sp
   17798:	|      tst.l d0
   1779a:	|  ,-- bge.s 1780c <atan2f+0x14e>
   1779c:	|  |   clr.l -(sp)
   1779e:	|  |   move.l 36(sp),-(sp)
   177a2:	|  |   jsr 17584 <__ltsf2>
   177a8:	|  |   addq.l #8,sp
   177aa:	|  |   tst.l d0
   177ac:	|  +-- bge.s 1780c <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   177ae:	|  |   move.l 36(sp),-(sp)
   177b2:	|  |   move.l 36(sp),-(sp)
   177b6:	|  |   jsr 17214 <__divsf3>
   177bc:	|  |   addq.l #8,sp
   177be:	|  |   move.l d0,16(sp)
   177c2:	|  |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   177c8:	|  |   movea.l d0,a6
   177ca:	|  |   move.l 16(sp),d0
   177ce:	|  |   jsr -30(a6)
   177d2:	|  |   move.l d0,12(sp)
   177d6:	|  |   move.l 12(sp),d0
   177da:	|  |   move.l d0,-(sp)
   177dc:	|  |   jsr 17280 <__extendsfdf2>
   177e2:	|  |   addq.l #4,sp
   177e4:	|  |   move.l #1413754136,-(sp)
   177ea:	|  |   move.l #1074340347,-(sp)
   177f0:	|  |   move.l d1,-(sp)
   177f2:	|  |   move.l d0,-(sp)
   177f4:	|  |   jsr 175f0 <__subdf3>
   177fa:	|  |   lea 16(sp),sp
   177fe:	|  |   move.l d1,-(sp)
   17800:	|  |   move.l d0,-(sp)
   17802:	|  |   jsr 17688 <__truncdfsf2>
   17808:	|  |   addq.l #8,sp
   1780a:	+--|-- bra.s 17866 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   1780c:	|  '-> clr.l -(sp)
   1780e:	|      move.l 40(sp),-(sp)
   17812:	|      jsr 1724a <__eqsf2>
   17818:	|      addq.l #8,sp
   1781a:	|      tst.l d0
   1781c:	|  ,-- bne.s 17838 <atan2f+0x17a>
   1781e:	|  |   clr.l -(sp)
   17820:	|  |   move.l 36(sp),-(sp)
   17824:	|  |   jsr 174ca <__gtsf2>
   1782a:	|  |   addq.l #8,sp
   1782c:	|  |   tst.l d0
   1782e:	|  +-- ble.s 17838 <atan2f+0x17a>
        return PI / 2;
   17830:	|  |   move.l #1070141403,d0
   17836:	+--|-- bra.s 17866 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17838:	|  '-> clr.l -(sp)
   1783a:	|      move.l 40(sp),-(sp)
   1783e:	|      jsr 1724a <__eqsf2>
   17844:	|      addq.l #8,sp
   17846:	|      tst.l d0
   17848:	|  ,-- bne.s 17864 <atan2f+0x1a6>
   1784a:	|  |   clr.l -(sp)
   1784c:	|  |   move.l 36(sp),-(sp)
   17850:	|  |   jsr 17584 <__ltsf2>
   17856:	|  |   addq.l #8,sp
   17858:	|  |   tst.l d0
   1785a:	|  +-- bge.s 17864 <atan2f+0x1a6>
        return -PI / 2;
   1785c:	|  |   move.l #-1077342245,d0
   17862:	+--|-- bra.s 17866 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17864:	|  '-> moveq #0,d0
    }
}
   17866:	'----> movea.l (sp)+,a6
   17868:	       lea 24(sp),sp
   1786c:	       rts

0001786e <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   1786e:	lea -24(sp),sp
   17872:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17874:	move.l 32(sp),20(sp)
   1787a:	move.l 36(sp),24(sp)
   17880:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   17886:	movea.l d0,a6
   17888:	move.l 20(sp),d0
   1788c:	move.l 24(sp),d1
   17890:	jsr -96(a6)
   17894:	move.l d0,4(sp)
   17898:	move.l d1,8(sp)
   1789c:	move.l 4(sp),12(sp)
   178a2:	move.l 8(sp),16(sp)
   178a8:	move.l 12(sp),d0
   178ac:	move.l 16(sp),d1
}
   178b0:	movea.l (sp)+,a6
   178b2:	lea 24(sp),sp
   178b6:	rts

000178b8 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   178b8:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   178bc:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   178c0:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   178c4:	mulu.w 8(sp),d1
	addw	d1, d0
   178c8:	add.w d1,d0
	swap	d0
   178ca:	swap d0
	clrw	d0
   178cc:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   178ce:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   178d2:	mulu.w 10(sp),d1
	addl	d1, d0
   178d6:	add.l d1,d0
	rts
   178d8:	rts

000178da <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   178da:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   178dc:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   178e0:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   178e4:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   178ea:	   ,-- bcc.s 17902 <__udivsi3+0x28>
	movel	d0, d2
   178ec:	   |   move.l d0,d2
	clrw	d2
   178ee:	   |   clr.w d2
	swap	d2
   178f0:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   178f2:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   178f4:	   |   move.w d2,d0
	swap	d0
   178f6:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   178f8:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   178fc:	   |   divu.w d1,d2
	movew	d2, d0
   178fe:	   |   move.w d2,d0
	jra	6f
   17900:	,--|-- bra.s 17932 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17902:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17904:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17906:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17908:	|  |   cmpi.l #65536,d1
	jcc	4b
   1790e:	|  '-- bcc.s 17904 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17910:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17912:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17918:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   1791a:	|      mulu.w d0,d1
	swap	d2
   1791c:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   1791e:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17920:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17922:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17924:	|  ,-- bne.s 17930 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17926:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17928:	|  +-- bcs.s 17930 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   1792a:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   1792e:	+--|-- bls.s 17932 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17930:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   17932:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17934:	       rts

00017936 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17936:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17938:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   1793a:	    move.l 12(sp),d1
	jpl	1f
   1793e:	,-- bpl.s 17944 <__divsi3+0xe>
	negl	d1
   17940:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17942:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17944:	'-> move.l 8(sp),d0
	jpl	2f
   17948:	,-- bpl.s 1794e <__divsi3+0x18>
	negl	d0
   1794a:	|   neg.l d0
	negb	d2
   1794c:	|   neg.b d2

2:	movel	d1, sp@-
   1794e:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17950:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17952:	    jsr 178da <__udivsi3>
	addql	#8, sp
   17958:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   1795a:	    tst.b d2
	jpl	3f
   1795c:	,-- bpl.s 17960 <__divsi3+0x2a>
	negl	d0
   1795e:	|   neg.l d0

3:	movel	sp@+, d2
   17960:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17962:	    rts

00017964 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17964:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17968:	move.l 4(sp),d0
	movel	d1, sp@-
   1796c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1796e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17970:	jsr 17936 <__divsi3>
	addql	#8, sp
   17976:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17978:	move.l 8(sp),d1
	movel	d1, sp@-
   1797c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1797e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17980:	jsr 178b8 <__mulsi3>
	addql	#8, sp
   17986:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17988:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1798c:	sub.l d0,d1
	movel	d1, d0
   1798e:	move.l d1,d0
	rts
   17990:	rts

00017992 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17992:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17996:	move.l 4(sp),d0
	movel	d1, sp@-
   1799a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1799c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   1799e:	jsr 178da <__udivsi3>
	addql	#8, sp
   179a4:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   179a6:	move.l 8(sp),d1
	movel	d1, sp@-
   179aa:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   179ac:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   179ae:	jsr 178b8 <__mulsi3>
	addql	#8, sp
   179b4:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   179b6:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   179ba:	sub.l d0,d1
	movel	d1, d0
   179bc:	move.l d1,d0
	rts
   179be:	rts

000179c0 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   179c0:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   179c2:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   179c6:	jsr -516(a6)
    move.l (sp)+, a6
   179ca:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   179cc:	rts

000179ce <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   179ce:	move.b d0,(a3)+
	rts
   179d0:	rts
