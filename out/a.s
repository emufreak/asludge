
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #115573,d0
       8:	       subi.l #115573,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c375 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #115573,d0
      40:	       subi.l #115573,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c375 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 7f50 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #115573,d0
      7e:	       subi.l #115573,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c375 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13ce4 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1cb26 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13cfc <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c376 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13ce4 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1cb26 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1c376 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13ce4 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1cb26 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17d7e <PutChar+0x4>
     35c:	|  |              |   jsr 172d8 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1cb2e <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1cb2e <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1cb2e <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1cb2e <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1cb2e <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1cb2e <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1cb2e <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17da8 <PutChar+0x2e>
     834:	|   jsr 172d8 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1cb2e <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17dc4 <PutChar+0x4a>
     8a6:	|   jsr 172d8 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1cb2e <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1cb2e <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1cb2e <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1cb2e <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1cb2e <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1cb2e <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1cb2e <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1cb2e <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1cb26 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1cb2e <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13ce4 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1cb2e <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1ca20 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1ca20 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1ca20 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1ca20 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1ca20 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1cae6 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1ca20 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1ca20 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1cae2 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1ca20 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1ca20 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 141a <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1ca20 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 988e <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1ca20 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1ca24 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1ca28 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2c10 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -20(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17dec <PutChar+0x72>
     e1a:	          jsr 172d8 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1ca3c <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17e05 <PutChar+0x8b>
     e30:	      |   jsr 172d8 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w ff2 <CstBlankScreen+0x1e4>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1ca36 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,12(sp)
  //custom->color[0] = 0xf00;


  WaitBlit();
     e4a:	|         move.l 1cb32 <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 36(sp),d0
     e5a:	|         sub.l 28(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,10(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 40(sp),d0
     e6c:	|         move.l 32(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,8(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 12(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 12(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 12(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 12(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 12(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 10(sp),d0
     eb0:	|         movea.l 12(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 12(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 12(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1ca3c <CstBackDrop>,d0
     ed2:	|         move.l d0,20(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 28(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 32(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,20(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 8(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 10(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,6(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 10(sp),d0
     f10:	|         muls.w 8(sp),d0
     f14:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 17e33 <PutChar+0xb9>
     f1e:	|         jsr 172d8 <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 16(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 20(sp),d0
     f30:	|  |  |   movea.l 12(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 12(sp),a0
     f3c:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1cb32 <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,20(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,16(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 16(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 17e53 <PutChar+0xd9>
     f68:	|         jsr 172d8 <KPrintF>
     f6e:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f70:	|         move.w #2,1ca48 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f78:	|         move.l 1ca7a <winWidth>,d0
     f7e:	|         lsr.l #4,d0
     f80:	|         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
     f86:	|         move.l a0,d1
     f88:	|         addq.l #2,d1
     f8a:	|         move.l d1,1ca5e <CstBackDropBufferApplyCursor>
     f90:	|         move.l d0,d0
     f92:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f94:	|         move.l 1ca7e <winHeight>,d0
     f9a:	|         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
     fa0:	|         move.l a0,d1
     fa2:	|         addq.l #2,d1
     fa4:	|         move.l d1,1ca5e <CstBackDropBufferApplyCursor>
     faa:	|         move.l d0,d0
     fac:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fae:	|         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
     fb4:	|         move.l a0,d0
     fb6:	|         addq.l #2,d0
     fb8:	|         move.l d0,1ca5e <CstBackDropBufferApplyCursor>
     fbe:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fc0:	|         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
     fc6:	|         move.l a0,d0
     fc8:	|         addq.l #2,d0
     fca:	|         move.l d0,1ca5e <CstBackDropBufferApplyCursor>
     fd0:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fd2:	|         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
     fd8:	|         move.l a0,d0
     fda:	|         addq.l #2,d0
     fdc:	|         move.l d0,1ca5e <CstBackDropBufferApplyCursor>
     fe2:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fe4:	|         pea 17e73 <PutChar+0xf9>
     fea:	|         jsr 172d8 <KPrintF>
     ff0:	|         addq.l #4,sp

  //custom->color[0] = 0x000;	
}
     ff2:	'-------> movea.l (sp)+,a6
     ff4:	          lea 20(sp),sp
     ff8:	          rts

00000ffa <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     ffa:	       lea -52(sp),sp
     ffe:	       move.l a6,-(sp)
    1000:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    1002:	       move.l #400,32(sp)
    100a:	       moveq #2,d0
    100c:	       move.l d0,28(sp)
    1010:	       move.l 1cb26 <SysBase>,d0
    1016:	       movea.l d0,a6
    1018:	       move.l 32(sp),d0
    101c:	       move.l 28(sp),d1
    1020:	       jsr -198(a6)
    1024:	       move.l d0,24(sp)
    1028:	       move.l 24(sp),d0
    102c:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1030:	   ,-- bne.s 105a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1032:	   |   pea 28 <_start+0x28>
    1036:	   |   pea 17e88 <PutChar+0x10e>
    103c:	   |   jsr 172d8 <KPrintF>
    1042:	   |   addq.l #8,sp
    Exit(1);
    1044:	   |   moveq #1,d1
    1046:	   |   move.l d1,16(sp)
    104a:	   |   move.l 1cb2e <DOSBase>,d0
    1050:	   |   movea.l d0,a6
    1052:	   |   move.l 16(sp),d1
    1056:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    105a:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1060:	       move.l 56(sp),1ca6a <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    1068:	       move.l #115576,52(sp)
  for(int i=0; i<16;i++)
    1070:	       clr.l 48(sp)
    1074:	   ,-- bra.s 109a <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1076:	,--|-> move.l 52(sp),d1
    107a:	|  |   move.l d1,d2
    107c:	|  |   addq.l #4,d2
    107e:	|  |   move.l d2,52(sp)
    1082:	|  |   move.l 56(sp),d0
    1086:	|  |   move.l d0,d2
    1088:	|  |   addq.l #4,d2
    108a:	|  |   move.l d2,56(sp)
    108e:	|  |   movea.l d1,a0
    1090:	|  |   move.l (a0),d1
    1092:	|  |   movea.l d0,a0
    1094:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    1096:	|  |   addq.l #1,48(sp)
    109a:	|  '-> moveq #15,d0
    109c:	|      cmp.l 48(sp),d0
    10a0:	'----- bge.s 1076 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    10a2:	       move.l #115640,52(sp)

  for(int i=0; i<12;i++)
    10aa:	       clr.l 44(sp)
    10ae:	   ,-- bra.s 10d4 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    10b0:	,--|-> move.l 52(sp),d1
    10b4:	|  |   move.l d1,d2
    10b6:	|  |   addq.l #4,d2
    10b8:	|  |   move.l d2,52(sp)
    10bc:	|  |   move.l 56(sp),d0
    10c0:	|  |   move.l d0,d2
    10c2:	|  |   addq.l #4,d2
    10c4:	|  |   move.l d2,56(sp)
    10c8:	|  |   movea.l d1,a0
    10ca:	|  |   move.l (a0),d1
    10cc:	|  |   movea.l d0,a0
    10ce:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10d0:	|  |   addq.l #1,44(sp)
    10d4:	|  '-> moveq #11,d0
    10d6:	|      cmp.l 44(sp),d0
    10da:	'----- bge.s 10b0 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10dc:	       move.l #115688,52(sp)
  for(int i=0; i<10;i++)
    10e4:	       clr.l 40(sp)
    10e8:	   ,-- bra.s 110e <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10ea:	,--|-> move.l 52(sp),d1
    10ee:	|  |   move.l d1,d2
    10f0:	|  |   addq.l #4,d2
    10f2:	|  |   move.l d2,52(sp)
    10f6:	|  |   move.l 56(sp),d0
    10fa:	|  |   move.l d0,d2
    10fc:	|  |   addq.l #4,d2
    10fe:	|  |   move.l d2,56(sp)
    1102:	|  |   movea.l d1,a0
    1104:	|  |   move.l (a0),d1
    1106:	|  |   movea.l d0,a0
    1108:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    110a:	|  |   addq.l #1,40(sp)
    110e:	|  '-> moveq #9,d0
    1110:	|      cmp.l 40(sp),d0
    1114:	'----- bge.s 10ea <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    1116:	       move.l #115728,52(sp)
  CstClColor = (UWORD *) cl;
    111e:	       move.l 56(sp),1ca62 <CstClColor>
  for(int i=0; i<32;i++)
    1126:	       clr.l 36(sp)
    112a:	   ,-- bra.s 1150 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    112c:	,--|-> move.l 52(sp),d1
    1130:	|  |   move.l d1,d2
    1132:	|  |   addq.l #4,d2
    1134:	|  |   move.l d2,52(sp)
    1138:	|  |   move.l 56(sp),d0
    113c:	|  |   move.l d0,d2
    113e:	|  |   addq.l #4,d2
    1140:	|  |   move.l d2,56(sp)
    1144:	|  |   movea.l d1,a0
    1146:	|  |   move.l (a0),d1
    1148:	|  |   movea.l d0,a0
    114a:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    114c:	|  |   addq.l #1,36(sp)
    1150:	|  '-> moveq #31,d0
    1152:	|      cmp.l 36(sp),d0
    1156:	'----- bge.s 112c <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1158:	       moveq #40,d1
    115a:	       cmp.l 64(sp),d1
    115e:	   ,-- bge.s 11bc <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1160:	   |   moveq #-40,d2
    1162:	   |   add.l 64(sp),d2
    1166:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    116a:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1170:	   |   move.l 8(sp),d0
    1174:	   |   move.l d0,d1
    1176:	   |   addq.l #2,d1
    1178:	   |   move.l d1,8(sp)
    117c:	   |   movea.l d0,a0
    117e:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1182:	   |   move.l 8(sp),d0
    1186:	   |   move.l d0,d1
    1188:	   |   addq.l #2,d1
    118a:	   |   move.l d1,8(sp)
    118e:	   |   move.l 12(sp),d1
    1192:	   |   movea.l d0,a0
    1194:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    1196:	   |   move.l 8(sp),d0
    119a:	   |   move.l d0,d1
    119c:	   |   addq.l #2,d1
    119e:	   |   move.l d1,8(sp)
    11a2:	   |   movea.l d0,a0
    11a4:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    11a8:	   |   move.l 8(sp),d0
    11ac:	   |   move.l d0,d1
    11ae:	   |   addq.l #2,d1
    11b0:	   |   move.l d1,8(sp)
    11b4:	   |   move.l 12(sp),d1
    11b8:	   |   movea.l d0,a0
    11ba:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    11bc:	   '-> move.l 56(sp),d0
    11c0:	       move.l d0,d1
    11c2:	       addq.l #4,d1
    11c4:	       move.l d1,56(sp)
    11c8:	       moveq #-2,d2
    11ca:	       movea.l d0,a0
    11cc:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11ce:	       move.l 20(sp),d0
}
    11d2:	       move.l (sp)+,d2
    11d4:	       movea.l (sp)+,a6
    11d6:	       lea 52(sp),sp
    11da:	       rts

000011dc <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11dc:	                lea -40(sp),sp
    11e0:	                move.l a6,-(sp)
    11e2:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11e4:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11ec:	                pea 17ec3 <PutChar+0x149>
    11f2:	                jsr 172d8 <KPrintF>
    11f8:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11fa:	                move.l 1ca5a <CstBackDropBufferApplyStart>,d0
    1200:	                move.l d0,1ca5e <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    1206:	                move.l 1ca5a <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    120e:	                movea.l 44(sp),a0
    1212:	                move.w (a0),d0
    1214:	,-------------- beq.w 140e <CstDisplayBackDrop+0x232>
    1218:	|               move.l 1ca4e <CstDrawBuffer>,d0
    121e:	+-------------- beq.w 140e <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    1222:	|               move.l 1cb32 <GfxBase>,d0
    1228:	|               movea.l d0,a6
    122a:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    122e:	|               movea.l 16(sp),a0
    1232:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    1238:	|               movea.l 16(sp),a0
    123c:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1242:	|               movea.l 16(sp),a0
    1246:	|               move.w #2544,64(a0)
  
  while(*cursor)
    124c:	|     ,-------- bra.w 13b4 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1250:	|  ,--|-------> move.l 44(sp),d0
    1254:	|  |  |         move.l d0,d1
    1256:	|  |  |         addq.l #2,d1
    1258:	|  |  |         move.l d1,44(sp)
    125c:	|  |  |         movea.l d0,a0
    125e:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1262:	|  |  |         move.l 44(sp),d0
    1266:	|  |  |         move.l d0,d1
    1268:	|  |  |         addq.l #2,d1
    126a:	|  |  |         move.l d1,44(sp)
    126e:	|  |  |         movea.l d0,a0
    1270:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1274:	|  |  |         move.l 44(sp),d0
    1278:	|  |  |         move.l d0,d1
    127a:	|  |  |         addq.l #2,d1
    127c:	|  |  |         move.l d1,44(sp)
    1280:	|  |  |         movea.l d0,a0
    1282:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    1286:	|  |  |         move.l 44(sp),d0
    128a:	|  |  |         move.l d0,d1
    128c:	|  |  |         addq.l #2,d1
    128e:	|  |  |         move.l d1,44(sp)
    1292:	|  |  |         movea.l d0,a0
    1294:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    1298:	|  |  |         move.l 1ca7a <winWidth>,d0
    129e:	|  |  |         lsr.l #3,d0
    12a0:	|  |  |         move.l d0,d1
    12a2:	|  |  |         move.w 14(sp),d0
    12a6:	|  |  |         add.w d0,d0
    12a8:	|  |  |         sub.w d0,d1
    12aa:	|  |  |         movea.l 16(sp),a0
    12ae:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    12b2:	|  |  |         move.l 1ca7a <winWidth>,d0
    12b8:	|  |  |         lsr.l #3,d0
    12ba:	|  |  |         move.l d0,d1
    12bc:	|  |  |         move.w 14(sp),d0
    12c0:	|  |  |         add.w d0,d0
    12c2:	|  |  |         sub.w d0,d1
    12c4:	|  |  |         movea.l 16(sp),a0
    12c8:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12cc:	|  |  |         moveq #0,d0
    12ce:	|  |  |         move.w 8(sp),d0
    12d2:	|  |  |         move.l 1ca7a <winWidth>,d1
    12d8:	|  |  |         move.l d1,-(sp)
    12da:	|  |  |         move.l d0,-(sp)
    12dc:	|  |  |         jsr 17c64 <__mulsi3>
    12e2:	|  |  |         addq.l #8,sp
    12e4:	|  |  |         move.l d0,d1
    12e6:	|  |  |         lsr.l #3,d1
    12e8:	|  |  |         move.l 1ca3c <CstBackDrop>,d0
    12ee:	|  |  |         add.l d0,d1
    12f0:	|  |  |         moveq #0,d0
    12f2:	|  |  |         move.w 10(sp),d0
    12f6:	|  |  |         move.l d1,d2
    12f8:	|  |  |         add.l d0,d2
    12fa:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12fe:	|  |  |         moveq #0,d0
    1300:	|  |  |         move.w 8(sp),d0
    1304:	|  |  |         move.l 1ca7a <winWidth>,d1
    130a:	|  |  |         move.l d1,-(sp)
    130c:	|  |  |         move.l d0,-(sp)
    130e:	|  |  |         jsr 17c64 <__mulsi3>
    1314:	|  |  |         addq.l #8,sp
    1316:	|  |  |         move.l d0,d1
    1318:	|  |  |         lsr.l #3,d1
    131a:	|  |  |         move.l 1ca4e <CstDrawBuffer>,d0
    1320:	|  |  |         add.l d0,d1
    1322:	|  |  |         moveq #0,d0
    1324:	|  |  |         move.w 10(sp),d0
    1328:	|  |  |         move.l d1,d2
    132a:	|  |  |         add.l d0,d2
    132c:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1330:	|  |  |         clr.l 32(sp)
    1334:	|  |  |     ,-- bra.s 13ac <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    1336:	|  |  |  ,--|-> move.l 40(sp),d0
    133a:	|  |  |  |  |   movea.l 16(sp),a0
    133e:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1342:	|  |  |  |  |   move.l 36(sp),d0
    1346:	|  |  |  |  |   movea.l 16(sp),a0
    134a:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    134e:	|  |  |  |  |   move.w 12(sp),d0
    1352:	|  |  |  |  |   lsl.w #6,d0
    1354:	|  |  |  |  |   add.w 14(sp),d0
    1358:	|  |  |  |  |   movea.l 16(sp),a0
    135c:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1360:	|  |  |  |  |   move.l 1ca7a <winWidth>,d0
    1366:	|  |  |  |  |   lsr.l #3,d0
    1368:	|  |  |  |  |   move.l 1ca7e <winHeight>,d1
    136e:	|  |  |  |  |   move.l d1,-(sp)
    1370:	|  |  |  |  |   move.l d0,-(sp)
    1372:	|  |  |  |  |   jsr 17c64 <__mulsi3>
    1378:	|  |  |  |  |   addq.l #8,sp
    137a:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    137e:	|  |  |  |  |   move.l 1ca7a <winWidth>,d0
    1384:	|  |  |  |  |   lsr.l #3,d0
    1386:	|  |  |  |  |   move.l 1ca7e <winHeight>,d1
    138c:	|  |  |  |  |   move.l d1,-(sp)
    138e:	|  |  |  |  |   move.l d0,-(sp)
    1390:	|  |  |  |  |   jsr 17c64 <__mulsi3>
    1396:	|  |  |  |  |   addq.l #8,sp
    1398:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    139c:	|  |  |  |  |   move.l 1cb32 <GfxBase>,d0
    13a2:	|  |  |  |  |   movea.l d0,a6
    13a4:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    13a8:	|  |  |  |  |   addq.l #1,32(sp)
    13ac:	|  |  |  |  '-> moveq #4,d0
    13ae:	|  |  |  |      cmp.l 32(sp),d0
    13b2:	|  |  |  '----- bge.s 1336 <CstDisplayBackDrop+0x15a>
  while(*cursor)
    13b4:	|  |  '-------> movea.l 44(sp),a0
    13b8:	|  |            move.w (a0),d0
    13ba:	|  '----------- bne.w 1250 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    13be:	|               move.l 1ca66 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    13c6:	|               move.l 1ca62 <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13ce:	|               clr.l 20(sp)
    13d2:	|           ,-- bra.s 1404 <CstDisplayBackDrop+0x228>
    *tmp++;
    13d4:	|        ,--|-> move.l 24(sp),d0
    13d8:	|        |  |   move.l d0,d1
    13da:	|        |  |   addq.l #2,d1
    13dc:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13e0:	|        |  |   move.l 28(sp),d1
    13e4:	|        |  |   move.l d1,d2
    13e6:	|        |  |   addq.l #2,d2
    13e8:	|        |  |   move.l d2,28(sp)
    13ec:	|        |  |   move.l 24(sp),d0
    13f0:	|        |  |   move.l d0,d2
    13f2:	|        |  |   addq.l #2,d2
    13f4:	|        |  |   move.l d2,24(sp)
    13f8:	|        |  |   movea.l d1,a0
    13fa:	|        |  |   move.w (a0),d1
    13fc:	|        |  |   movea.l d0,a0
    13fe:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    1400:	|        |  |   addq.l #1,20(sp)
    1404:	|        |  '-> moveq #31,d0
    1406:	|        |      cmp.l 20(sp),d0
    140a:	|        '----- bge.s 13d4 <CstDisplayBackDrop+0x1f8>
    140c:	|           ,-- bra.s 1410 <CstDisplayBackDrop+0x234>
    return;
    140e:	'-----------|-> nop
  }
}
    1410:	            '-> move.l (sp)+,d2
    1412:	                movea.l (sp)+,a6
    1414:	                lea 40(sp),sp
    1418:	                rts

0000141a <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    141a:	lea -20(sp),sp
    141e:	movea.l 24(sp),a0
    1422:	move.l 28(sp),d1
    1426:	move.l 32(sp),d0
    142a:	movea.w a0,a0
    142c:	move.w a0,4(sp)
    1430:	move.w d1,d1
    1432:	move.w d1,2(sp)
    1436:	move.w d0,d0
    1438:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    143a:	move.w 2(sp),d0
    143e:	movea.l 36(sp),a0
    1442:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1444:	move.w 4(sp),d0
    1448:	lsr.w #1,d0
    144a:	movea.l 36(sp),a0
    144e:	addq.l #1,a0
    1450:	move.l d0,d0
    1452:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1454:	move.w 2(sp),d1
    1458:	move.w (sp),d0
    145a:	movea.l 36(sp),a0
    145e:	addq.l #2,a0
    1460:	add.b d1,d0
    1462:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1464:	move.w 4(sp),d0
    1468:	andi.w #1,d0
    146c:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1470:	move.w 2(sp),d0
    1474:	add.w (sp),d0
    1476:	move.w d0,d0
    1478:	andi.l #65535,d0
    147e:	asr.l #7,d0
    1480:	move.l d0,d0
    1482:	move.w d0,d1
    1484:	andi.w #2,d1
    1488:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    148c:	moveq #0,d0
    148e:	move.w 2(sp),d0
    1492:	asr.l #6,d0
    1494:	move.l d0,d0
    1496:	move.w d0,d1
    1498:	andi.w #4,d1
    149c:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    14a0:	move.w 18(sp),d1
    14a4:	move.w 16(sp),d0
    14a8:	add.b d0,d1
    14aa:	move.w 14(sp),d0
    14ae:	movea.l 36(sp),a0
    14b2:	addq.l #3,a0
    14b4:	add.b d1,d0
    14b6:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    14b8:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    14be:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    14c4:	move.l 10(sp),d0
    14c8:	clr.w d0
    14ca:	swap d0
    14cc:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14d0:	move.l 1ca6a <CstClCursor>,d0
    14d6:	movea.l d0,a0
    14d8:	addq.l #2,a0
    14da:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14de:	move.l 1ca6a <CstClCursor>,d0
    14e4:	movea.l d0,a0
    14e6:	addq.l #6,a0
    14e8:	move.w 8(sp),(a0)

}
    14ec:	nop
    14ee:	lea 20(sp),sp
    14f2:	rts

000014f4 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14f4:	    move.w 1ca48 <CstApplyBackDropCounter>,d0
    14fa:	,-- beq.s 1510 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14fc:	|   jsr 11dc <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    1502:	|   move.w 1ca48 <CstApplyBackDropCounter>,d0
    1508:	|   subq.w #1,d0
    150a:	|   move.w d0,1ca48 <CstApplyBackDropCounter>
  }    
}
    1510:	'-> nop
    1512:	    rts

00001514 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    1514:	                                                             subq.l #8,sp
    1516:	                                                             movem.l d2-d7/a2-a6,-(sp)
    151a:	                                                             movea.l 56(sp),a3
    151e:	                                                             movea.l 60(sp),a2
    1522:	                                                             move.l 64(sp),d2
    1526:	                                                             move.l 68(sp),d7
    152a:	                                                             movea.w d2,a4
    152c:	                                                             move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1530:	                                                             clr.l -(sp)
    1532:	                                                             pea 1 <_start+0x1>
    1536:	                                                             movea.w 6(a3),a0
    153a:	                                                             move.l a0,-(sp)
    153c:	                                                             movea.w 2(a3),a0
    1540:	                                                             move.l a0,-(sp)
    1542:	                                                             pea 17edf <PutChar+0x165>
    1548:	                                                             move.l 1ca6e <CstZBufferResult>,-(sp)
    154e:	                                                             lea 173c0 <debug_register_bitmap>,a5
    1554:	                                                             jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    1556:	                                                             clr.l -(sp)
    1558:	                                                             pea 1 <_start+0x1>
    155c:	                                                             movea.w 6(a3),a0
    1560:	                                                             move.l a0,-(sp)
    1562:	                                                             move.w 2(a3),d0
    1566:	                                                             addi.w #16,d0
    156a:	                                                             movea.w d0,a0
    156c:	                                                             move.l a0,-(sp)
    156e:	                                                             pea 17eea <PutChar+0x170>
    1574:	                                                             move.l 1ca72 <CstZBufferWork>,-(sp)
    157a:	                                                             jsr (a5)
  #endif    

  while(zbuffer) 
    157c:	                                                             lea 48(sp),sp
    1580:	                                                             cmpa.w #0,a2
    1584:	,----------------------------------------------------------- beq.w 1a20 <CstDrawZBuffer+0x50c>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1588:	|                                                            move.w d2,48(sp)
    158c:	|                                                            move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    158e:	|                                                            movea.l 4(a3),a5
  WORD zbufferset = 0;
    1592:	|                                                            clr.w d0
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1594:	|                       ,----------------------------------> move.w a5,d3
    1596:	|                       |                                    add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    1598:	|                       |                                    andi.l #65535,d3
    159e:	|                       |                                    cmp.l 16(a2),d3
    15a2:	|                       |  ,-------------------------------- bge.w 173c <CstDrawZBuffer+0x228>
    WORD zbufferx1oncanvas = zbuffer->topx;
    15a6:	|                       |  |                                 move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    15aa:	|                       |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    15ae:	|                       |  |                                 move.w d6,d0
    15b0:	|                       |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    15b4:	|                       |  |                                 move.w 6(a2),d4
    15b8:	|                       |  |                                 add.w d5,d4
    {    
      zbufferset = 1;

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    15ba:	|                       |  |                                 cmp.w a4,d6
    15bc:	|                    ,--|--|-------------------------------- bge.w 18b4 <CstDrawZBuffer+0x3a0>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    15c0:	|                    |  |  |                                 cmp.w a4,d0
    15c2:	|        ,-----------|--|--|-------------------------------- ble.w 173a <CstDrawZBuffer+0x226>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    15c6:	|        |           |  |  |                                 move.w 50(sp),d0
    15ca:	|        |           |  |  |                                 cmp.w d0,d5
    15cc:	|        |     ,-----|--|--|-------------------------------- blt.w 1a00 <CstDrawZBuffer+0x4ec>
    15d0:	|        |     |     |  |  |                                 movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    15d2:	|        |     |     |  |  |                                 cmpa.l d3,a0
    15d4:	|        +-----|-----|--|--|-------------------------------- bge.w 173a <CstDrawZBuffer+0x226>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    15d8:	|        |     |     |  |  |                                 move.w 48(sp),d0
    15dc:	|        |     |     |  |  |                                 sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    15de:	|        |     |     |  |  |                                 move.w d0,d6
    15e0:	|        |     |     |  |  |                                 andi.w #15,d6
    15e4:	|        |     |     |  |  |                                 movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    15e6:	|        |     |     |  |  |                                 tst.l d2
    15e8:	|        |  ,--|-----|--|--|-------------------------------- blt.w 175c <CstDrawZBuffer+0x248>
    15ec:	|        |  |  |  ,--|--|--|-------------------------------> asr.l #4,d2
    15ee:	|        |  |  |  |  |  |  |                                 add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    15f0:	|        |  |  |  |  |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
          custom->bltalwm = 0xffff;                      
    15f8:	|        |  |  |  |  |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
          custom->bltcon1 = 0;          
    1600:	|        |  |  |  |  |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    1608:	|        |  |  |  |  |  |  |                                 lea 1cb32 <GfxBase>,a0
    160e:	|        |  |  |  |  |  |  |                                 movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1610:	|        |  |  |  |  |  |  |                                 lsr.w #4,d0
    1612:	|        |  |  |  |  |  |  |                                 move.w d0,d6
    1614:	|        |  |  |  |  |  |  |                                 add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    1616:	|        |  |  |  |  |  |  |                                 andi.l #65535,d6
    161c:	|        |  |  |  |  |  |  |                                 add.l 20(a2),d6
          if (xdiffrest) {
    1620:	|        |  |  |  |  |  |  |                                 clr.w d0
    1622:	|        |  |  |  |  |  |  |                                 cmp.w a5,d0
    1624:	|        |  |  |  |  |  |  |           ,-------------------- beq.w 179c <CstDrawZBuffer+0x288>
            bytewidth += 2; 
    1628:	|        |  |  |  |  |  |  |           |     ,-------------> addq.w #2,d2
            WaitBlit();   
    162a:	|        |  |  |  |  |  |  |           |     |               jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    162e:	|        |  |  |  |  |  |  |           |     |               move.l 1ca72 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    1638:	|        |  |  |  |  |  |  |           |     |               move.w a5,d0
    163a:	|        |  |  |  |  |  |  |           |     |               moveq #12,d1
    163c:	|        |  |  |  |  |  |  |           |     |               lsl.w d1,d0
    163e:	|        |  |  |  |  |  |  |           |     |               move.w #2544,d1
    1642:	|        |  |  |  |  |  |  |           |     |               sub.w d0,d1
    1644:	|        |  |  |  |  |  |  |           |     |               move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    164a:	|        |  |  |  |  |  |  |           |     |               move.l (a2),d0
    164c:	|        |  |  |  |  |  |  |           |     |               move.l d0,d1
    164e:	|  ,-----|--|--|--|--|--|--|-----------|-----|-------------- bmi.w 1aba <CstDrawZBuffer+0x5a6>
    1652:	|  |     |  |  |  |  |  |  |           |     |               asr.l #3,d1
    1654:	|  |     |  |  |  |  |  |  |           |     |               sub.w d2,d1
    1656:	|  |     |  |  |  |  |  |  |           |     |               move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
            custom->bltdmod = 0;                                                            
    165c:	|  |     |  |  |  |  |  |  |           |     |               move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1664:	|  |  ,--|--|--|--|--|--|--|-----------|-----|-------------> move.w d7,d1
    1666:	|  |  |  |  |  |  |  |  |  |           |     |               sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1668:	|  |  |  |  |  |  |  |  |  |           |     |               movea.w d4,a0
    166a:	|  |  |  |  |  |  |  |  |  |           |     |               cmpa.l d3,a0
    166c:	|  |  |  |  |  |  |  |  |  |           |  ,--|-------------- ble.w 17dc <CstDrawZBuffer+0x2c8>
          height = sprite->height;
    1670:	|  |  |  |  |  |  |  |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1674:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.l d0,-(sp)
    1676:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.w d1,-(sp)
    1678:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      clr.w -(sp)
    167a:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      jsr 17c64 <__mulsi3>
    1680:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      addq.l #8,sp
    1682:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      tst.l d0
    1684:	|  |  |  |  |  |  |  |  |  |           |  |  |  ,-----|----- blt.w 17f2 <CstDrawZBuffer+0x2de>
    1688:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    168a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.l d6,d0
    168c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
        UWORD bltsize =  height*64+bytewidth/2;          
    1692:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    1694:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1696:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.w d2,d4
    1698:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
       
        WaitBlit();
    169e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lea 1cb32 <GfxBase>,a0
    16a4:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    16a6:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    16aa:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
        custom->bltalwm = 0xffff;
    16b2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
        custom->bltamod = 2;
    16ba:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
        custom->bltbmod = 0;
    16c2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3c21>
        custom->bltdmod = 0;
    16ca:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
        custom->bltcon0 = 0xd0c; //Copy A to D
    16d2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
        custom->bltcon1 = 0;        
    16da:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    16e2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l 1ca72 <CstZBufferWork>,d0
    16e8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   addq.l #2,d0
    16ea:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16f0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l (a3),d2
    16f2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l 4(a3),a5
    16f6:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d2,d0
    16f8:	|  |  |  |  |  |  |  |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 187c <CstDrawZBuffer+0x368>
    16fc:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    16fe:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l a5,-(sp)
    1700:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    1702:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   jsr 17c64 <__mulsi3>
    1708:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    170a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    170c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    170e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    1710:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    1712:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    1716:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
        custom->bltdpt = (APTR) CstZBufferResult;
    171c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l 1ca6e <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1726:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.w a5,d1
    1728:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    172a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    172c:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 186a <CstDrawZBuffer+0x356>
    1730:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    1732:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    1734:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
      zbufferset = 1;
    173a:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d0

      }
    }
    zbuffer = zbuffer->nextPanel;
    173c:	|  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    1740:	|  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    1744:	|  |  |  |  |  |  |  |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 1594 <CstDrawZBuffer+0x80>
  }
  
  if(zbufferset == 0)
    1748:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.w d0
    174a:	+--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- beq.w 1a20 <CstDrawZBuffer+0x50c>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    174e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 1ca6e <CstZBufferResult>,d0

}
    1754:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1758:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    175a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    175c:	|  |  |  |  >--|--|--|--------|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    175e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    1760:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    1762:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    1764:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
          custom->bltalwm = 0xffff;                      
    176c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
          custom->bltcon1 = 0;          
    1774:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>
            WaitBlit();   
    177c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 1cb32 <GfxBase>,a0
    1782:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1784:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    1786:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    1788:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    178a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    1790:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    1794:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   clr.w d0
    1796:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    1798:	|  |  |  |  |  |  |  |        |  |  |  |  |  '--|--|--|--|-- bne.w 1628 <CstDrawZBuffer+0x114>
            WaitBlit();         
    179c:	|  |  |  |  |  |  |  |        |  |  |  '--|-----|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    17a0:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l 1ca72 <CstZBufferWork>,d0
    17a6:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   addq.l #2,d0
    17a8:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
            custom->bltcon0 = 4096 + 0x9f0;              
    17ae:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    17b6:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l (a2),d0
    17b8:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,d1
    17ba:	|  |  |  |  |  |  |  |  ,-----|--|--|-----|-----|--|--|--|-- bmi.w 1ad2 <CstDrawZBuffer+0x5be>
    17be:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   asr.l #3,d1
    17c0:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   sub.w d2,d1
    17c2:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
            custom->bltdmod = 2;                                                            
    17c8:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    17d0:	|  |  |  |  |  |  |  |  |  ,--|--|--|-----|-----|--|--|--|-> move.w d7,d1
    17d2:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    17d4:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   movea.w d4,a0
    17d6:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   cmpa.l d3,a0
    17d8:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  '--|-- bgt.w 1670 <CstDrawZBuffer+0x15c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    17dc:	|  |  |  |  |  |  |  |  |  |  |  |  |     '-----|--|-----|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    17de:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    17e0:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    17e2:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    17e4:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr 17c64 <__mulsi3>
    17ea:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    17ec:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    17ee:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 1688 <CstDrawZBuffer+0x174>
    17f2:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    17f4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    17f6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l d6,d0
    17f8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
        UWORD bltsize =  height*64+bytewidth/2;          
    17fe:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    1800:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1802:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    1804:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
        WaitBlit();
    180a:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1cb32 <GfxBase>,a0
    1810:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    1812:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    1816:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
        custom->bltalwm = 0xffff;
    181e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
        custom->bltamod = 2;
    1826:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
        custom->bltbmod = 0;
    182e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3c21>
        custom->bltdmod = 0;
    1836:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
        custom->bltcon0 = 0xd0c; //Copy A to D
    183e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
        custom->bltcon1 = 0;        
    1846:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    184e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 1ca72 <CstZBufferWork>,d0
    1854:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         addq.l #2,d0
    1856:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    185c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    185e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l 4(a3),a5
    1862:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    1864:	|  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 16fc <CstDrawZBuffer+0x1e8>
    1868:	|  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 187c <CstDrawZBuffer+0x368>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    186a:	|  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    186c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    186e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    1870:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    1872:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    1878:	|  |  |  +--|--|--|--|--|--|--|--|--|----------------------- bra.w 173a <CstDrawZBuffer+0x226>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    187c:	|  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    187e:	|  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    1880:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l a5,-(sp)
    1882:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    1884:	|  |  |  |  |  |  |  |  |  |  |     |                        jsr 17c64 <__mulsi3>
    188a:	|  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    188c:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    188e:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1890:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1892:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1894:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    1898:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
        custom->bltdpt = (APTR) CstZBufferResult;
    189e:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l 1ca6e <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    18a8:	|  |  |  |  |  |  |  |  |  |  |     |                        move.w a5,d1
    18aa:	|  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    18ac:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    18ae:	|  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 1730 <CstDrawZBuffer+0x21c>
    18b2:	|  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 186a <CstDrawZBuffer+0x356>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    18b4:	|  |  |  |  |  |  |  '--|--|-------------------------------> move.w 48(sp),d1
    18b8:	|  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    18ba:	|  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    18c0:	|  |  |  |  |  |  |     |  |                                 movea.l d1,a6
    18c2:	|  |  |  |  |  |  |     |  |                                 movea.w d6,a1
    18c4:	|  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    18c6:	|  |  |  +--|--|--|-----|--|-------------------------------- bge.w 173a <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    18ca:	|  |  |  |  |  |  |     |  |                                 move.w 50(sp),d1
    18ce:	|  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    18d0:	|  |  |  |  |  |  |     |  |           ,-------------------- bge.w 19dc <CstDrawZBuffer+0x4c8>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    18d4:	|  |  |  |  |  |  |     |  |           |                     cmp.w 50(sp),d4
    18d8:	|  |  |  +--|--|--|-----|--|-----------|-------------------- ble.w 173a <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    18dc:	|  |  |  |  |  |  |     |  |           |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    18e0:	|  |  |  |  |  |  |     |  |           |                     move.w d6,d1
    18e2:	|  |  |  |  |  |  |     |  |           |                     lsr.w #4,d1
    18e4:	|  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    18e6:	|  |  |  |  |  |  |     |  |           |                     andi.w #15,d6
    18ea:	|  |  |  |  |  |  |     |  |           |                     move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    18ee:	|  |  |  |  |  |  |     |  |           |                     tst.l d2
    18f0:	|  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 197a <CstDrawZBuffer+0x466>
    18f4:	|  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    18f6:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    18f8:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    18fa:	|  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    18fc:	|  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l a0,a6
    18fe:	|  |  |  |  |  |  |     |  |        |  |  |  ,-------------- bge.w 198c <CstDrawZBuffer+0x478>
            WaitBlit();  
    1902:	|  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1cb32 <GfxBase>,a0
    1908:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    190a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    190e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
            custom->bltalwm = 0xffff;          
    1916:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
            custom->bltdpt = CstZBufferWork;        
    191e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 1ca72 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
            custom->bltcon1 = 0;               
    1928:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1930:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1934:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    1936:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    1938:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.s 19a4 <CstDrawZBuffer+0x490>
    193a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    193c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a6
    193e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    1940:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      tst.w 46(sp)
    1944:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.s 19b2 <CstDrawZBuffer+0x49e>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    1946:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w 46(sp),d6
    194a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    194c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d6
    194e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addi.w #2544,d6
    1952:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1958:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
              custom->bltdmod = 0;                                                            
    195e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
              xdiffbyte += 2;                 
    1966:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,d1
    1968:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d1
    196a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    196c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d1
    1972:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,d6
    1974:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   sub.l d1,d6
    1976:	|  |  +--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 1664 <CstDrawZBuffer+0x150>
          bytewidth = (sprite->width/16)*2 + 2;
    197a:	|  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d6
    197c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d6,d2
    197e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    1980:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    1982:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    1984:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    1986:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l a0,a6
    1988:	|  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- blt.w 1902 <CstDrawZBuffer+0x3ee>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    198c:	|  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 17ef4 <PutChar+0x17a>
    1992:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 172d8 <KPrintF>
              return FALSE;
    1998:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    199a:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   moveq #0,d0
}
    199c:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    19a0:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #8,sp
    19a2:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19a4:	|  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    19a6:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    19a8:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a6
    19aa:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    19ac:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   tst.w 46(sp)
    19b0:	|  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 1946 <CstDrawZBuffer+0x432>
              custom->bltcon0 = 0x9f0;              
    19b2:	|  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19ba:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
              custom->bltdmod = 0;                                                            
    19c0:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
              xdiffbyte += 2;                 
    19c8:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a5,d1
    19ca:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d1
    19cc:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    19ce:	|  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d1
    19d4:	|  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,d6
    19d6:	|  |  |  |  |  |  |     |  |        |  |  |                  sub.l d1,d6
    19d8:	|  |  +--|--|--|--|-----|--|--------|--|--|----------------- bra.w 1664 <CstDrawZBuffer+0x150>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    19dc:	|  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19de:	|  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    19e0:	|  |  |  +--|--|--|-----|--|--------|-----|----------------- bge.w 173a <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    19e4:	|  |  |  |  |  |  |     |  |        |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    19e8:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,d1
    19ea:	|  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d1
    19ec:	|  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    19ee:	|  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d6
    19f2:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    19f6:	|  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    19f8:	|  |  |  |  |  |  |     |  |        |     '----------------- bge.w 18f4 <CstDrawZBuffer+0x3e0>
    19fc:	|  |  |  |  |  |  |     |  |        '----------------------- bra.w 197a <CstDrawZBuffer+0x466>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1a00:	|  |  |  |  |  '--|-----|--|-------------------------------> cmp.w 50(sp),d4
    1a04:	|  |  |  '--|-----|-----|--|-------------------------------- ble.w 173a <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1a08:	|  |  |     |     |     |  |                                 move.w 48(sp),d0
    1a0c:	|  |  |     |     |     |  |                                 sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1a0e:	|  |  |     |     |     |  |                                 move.w d0,d6
    1a10:	|  |  |     |     |     |  |                                 andi.w #15,d6
    1a14:	|  |  |     |     |     |  |                                 movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1a16:	|  |  |     |     |     |  |                                 tst.l d2
    1a18:	|  |  |     |     '-----|--|-------------------------------- bge.w 15ec <CstDrawZBuffer+0xd8>
    1a1c:	|  |  |     '-----------|--|-------------------------------- bra.w 175c <CstDrawZBuffer+0x248>
    WaitBlit();
    1a20:	'--|--|-----------------|--|-------------------------------> movea.l 1cb32 <GfxBase>,a6
    1a26:	   |  |                 |  |                                 jsr -228(a6)
    custom->bltafwm = 0xffff;
    1a2a:	   |  |                 |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
    custom->bltalwm = 0xffff;
    1a32:	   |  |                 |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
    custom->bltamod = 0;
    1a3a:	   |  |                 |  |                                 move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
    custom->bltbmod = 0;
    1a42:	   |  |                 |  |                                 move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3c21>
    custom->bltcmod = 0;
    1a4a:	   |  |                 |  |                                 move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3c1f>
    custom->bltdmod = 0;
    1a52:	   |  |                 |  |                                 move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1a5a:	   |  |                 |  |                                 move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
    custom->bltcon1 = 0;        
    1a62:	   |  |                 |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1a6a:	   |  |                 |  |                                 move.l (a3),d2
    1a6c:	   |  |                 |  |                                 move.l 4(a3),d3
    1a70:	   |  |                 |  |                                 move.l d2,d0
    1a72:	   |  |                 |  |                       ,-------- bmi.w 1afa <CstDrawZBuffer+0x5e6>
    1a76:	   |  |                 |  |                       |         asr.l #3,d0
    1a78:	   |  |                 |  |                       |         move.l d3,-(sp)
    1a7a:	   |  |                 |  |                       |         move.l d0,-(sp)
    1a7c:	   |  |                 |  |                       |         jsr 17c64 <__mulsi3>
    1a82:	   |  |                 |  |                       |         addq.l #8,sp
    1a84:	   |  |                 |  |                       |         move.l d0,d1
    1a86:	   |  |                 |  |                       |         add.l d0,d1
    1a88:	   |  |                 |  |                       |         add.l d1,d1
    1a8a:	   |  |                 |  |                       |         add.l d1,d0
    1a8c:	   |  |                 |  |                       |         add.l 24(a3),d0
    1a90:	   |  |                 |  |                       |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltdpt = (APTR) CstZBufferResult;
    1a96:	   |  |                 |  |                       |         move.l 1ca6e <CstZBufferResult>,d0
    1a9c:	   |  |                 |  |                       |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1aa2:	   |  |                 |  |                       |         lsl.w #6,d3
    1aa4:	   |  |                 |  |                       |         tst.l d2
    1aa6:	   |  |                 |  |                    ,--|-------- blt.s 1aea <CstDrawZBuffer+0x5d6>
    1aa8:	   |  |                 |  |                    |  |  ,----> asr.l #4,d2
    1aaa:	   |  |                 |  |                    |  |  |      add.w d2,d3
    1aac:	   |  |                 |  |                    |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
}
    1ab2:	   |  |                 |  |                    |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1ab6:	   |  |                 |  |                    |  |  |  |   addq.l #8,sp
    1ab8:	   |  |                 |  |                    |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1aba:	   '--|-----------------|--|--------------------|--|--|--|-> addq.l #7,d1
    1abc:	      |                 |  |                    |  |  |  |   asr.l #3,d1
    1abe:	      |                 |  |                    |  |  |  |   sub.w d2,d1
    1ac0:	      |                 |  |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
            custom->bltdmod = 0;                                                            
    1ac6:	      |                 |  |                    |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
    1ace:	      '-----------------|--|--------------------|--|--|--|-- bra.w 1664 <CstDrawZBuffer+0x150>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1ad2:	                        '--|--------------------|--|--|--|-> addq.l #7,d1
    1ad4:	                           |                    |  |  |  |   asr.l #3,d1
    1ad6:	                           |                    |  |  |  |   sub.w d2,d1
    1ad8:	                           |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
            custom->bltdmod = 2;                                                            
    1ade:	                           |                    |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
    1ae6:	                           '--------------------|--|--|--|-- bra.w 17d0 <CstDrawZBuffer+0x2bc>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1aea:	                                                >--|--|--|-> moveq #15,d1
    1aec:	                                                |  |  |  |   add.l d1,d2
    1aee:	                                                |  |  |  |   asr.l #4,d2
    1af0:	                                                |  |  |  |   add.w d2,d3
    1af2:	                                                |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
  return CstZBufferResult;
    1af8:	                                                |  |  |  '-- bra.s 1ab2 <CstDrawZBuffer+0x59e>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1afa:	                                                |  '--|----> addq.l #7,d0
    1afc:	                                                |     |      asr.l #3,d0
    1afe:	                                                |     |      move.l d3,-(sp)
    1b00:	                                                |     |      move.l d0,-(sp)
    1b02:	                                                |     |      jsr 17c64 <__mulsi3>
    1b08:	                                                |     |      addq.l #8,sp
    1b0a:	                                                |     |      move.l d0,d1
    1b0c:	                                                |     |      add.l d0,d1
    1b0e:	                                                |     |      add.l d1,d1
    1b10:	                                                |     |      add.l d1,d0
    1b12:	                                                |     |      add.l 24(a3),d0
    1b16:	                                                |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltdpt = (APTR) CstZBufferResult;
    1b1c:	                                                |     |      move.l 1ca6e <CstZBufferResult>,d0
    1b22:	                                                |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b28:	                                                |     |      lsl.w #6,d3
    1b2a:	                                                |     |      tst.l d2
    1b2c:	                                                |     '----- bge.w 1aa8 <CstDrawZBuffer+0x594>
    1b30:	                                                '----------- bra.s 1aea <CstDrawZBuffer+0x5d6>

00001b32 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1b32:	    lea -20(sp),sp
    1b36:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1b38:	    move.l 1ca4e <CstDrawBuffer>,d0
    1b3e:	,-- beq.s 1b58 <CstFreeBuffer+0x26>
    1b40:	|   move.l 1ca4e <CstDrawBuffer>,20(sp)
    1b48:	|   move.l 1cb26 <SysBase>,d0
    1b4e:	|   movea.l d0,a6
    1b50:	|   movea.l 20(sp),a1
    1b54:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1b58:	'-> move.l 1ca4a <CstViewBuffer>,d0
    1b5e:	,-- beq.s 1b78 <CstFreeBuffer+0x46>
    1b60:	|   move.l 1ca4a <CstViewBuffer>,16(sp)
    1b68:	|   move.l 1cb26 <SysBase>,d0
    1b6e:	|   movea.l d0,a6
    1b70:	|   movea.l 16(sp),a1
    1b74:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1b78:	'-> move.l 1ca44 <CstCopperList>,d0
    1b7e:	,-- beq.s 1b98 <CstFreeBuffer+0x66>
    1b80:	|   move.l 1ca44 <CstCopperList>,12(sp)
    1b88:	|   move.l 1cb26 <SysBase>,d0
    1b8e:	|   movea.l d0,a6
    1b90:	|   movea.l 12(sp),a1
    1b94:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1b98:	'-> move.l 1ca3c <CstBackDrop>,d0
    1b9e:	,-- beq.s 1bb8 <CstFreeBuffer+0x86>
    1ba0:	|   move.l 1ca3c <CstBackDrop>,8(sp)
    1ba8:	|   move.l 1cb26 <SysBase>,d0
    1bae:	|   movea.l d0,a6
    1bb0:	|   movea.l 8(sp),a1
    1bb4:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1bb8:	'-> move.l 1ca40 <CstBackDropBackup>,d0
    1bbe:	,-- beq.s 1bd8 <CstFreeBuffer+0xa6>
    1bc0:	|   move.l 1ca40 <CstBackDropBackup>,4(sp)
    1bc8:	|   move.l 1cb26 <SysBase>,d0
    1bce:	|   movea.l d0,a6
    1bd0:	|   movea.l 4(sp),a1
    1bd4:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1bd8:	'-> clr.l 1ca4e <CstDrawBuffer>
  CstViewBuffer = NULL;
    1bde:	    clr.l 1ca4a <CstViewBuffer>
  CstCopperList = NULL;
    1be4:	    clr.l 1ca44 <CstCopperList>
  CstBackDrop = NULL;
    1bea:	    clr.l 1ca3c <CstBackDrop>

}
    1bf0:	    nop
    1bf2:	    movea.l (sp)+,a6
    1bf4:	    lea 20(sp),sp
    1bf8:	    rts

00001bfa <CstFreeze>:



void CstFreeze( ) {
    1bfa:	       lea -36(sp),sp
    1bfe:	       move.l a6,-(sp)
    1c00:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1c02:	       pea 17f44 <PutChar+0x1ca>
    1c08:	       jsr 172d8 <KPrintF>
    1c0e:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1c10:	       move.l 1ca7a <winWidth>,d0
    1c16:	       lsr.l #3,d0
    1c18:	       move.l d0,d1
    1c1a:	       move.l 1ca7e <winHeight>,d0
    1c20:	       move.l d0,d0
    1c22:	       muls.w d0,d1
    1c24:	       move.w d1,d0
    1c26:	       add.w d0,d0
    1c28:	       add.w d0,d0
    1c2a:	       move.w d0,d2
    1c2c:	       add.w d1,d2
    1c2e:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1c32:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1c3a:	       moveq #0,d0
    1c3c:	       move.w 26(sp),d0
    1c40:	       move.l d0,18(sp)
    1c44:	       clr.l 14(sp)
    1c48:	       move.l 1cb26 <SysBase>,d0
    1c4e:	       movea.l d0,a6
    1c50:	       move.l 18(sp),d0
    1c54:	       move.l 14(sp),d1
    1c58:	       jsr -684(a6)
    1c5c:	       move.l d0,10(sp)
    1c60:	       move.l 10(sp),d0
    1c64:	       move.l d0,1ca40 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1c6a:	       move.l 1ca40 <CstBackDropBackup>,d0
    1c70:	   ,-- bne.s 1c80 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1c72:	   |   pea 17f6b <PutChar+0x1f1>
    1c78:	   |   jsr 172d8 <KPrintF>
    1c7e:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1c80:	   '-> move.l 1ca7e <winHeight>,d0
    1c86:	       move.l d0,d0
    1c88:	       movea.w d0,a1
    1c8a:	       move.l 1ca7a <winWidth>,d0
    1c90:	       move.l d0,d0
    1c92:	       movea.w d0,a0
    1c94:	       move.l 1ca40 <CstBackDropBackup>,d0
    1c9a:	       clr.l -(sp)
    1c9c:	       pea 5 <_start+0x5>
    1ca0:	       move.l a1,-(sp)
    1ca2:	       move.l a0,-(sp)
    1ca4:	       pea 17fa3 <PutChar+0x229>
    1caa:	       move.l d0,-(sp)
    1cac:	       jsr 173c0 <debug_register_bitmap>
    1cb2:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1cb6:	       move.l 1ca3c <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1cbe:	       move.l 1ca40 <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1cc6:	       clr.l 32(sp)
    1cca:	   ,-- bra.s 1cf0 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1ccc:	,--|-> move.l 40(sp),d1
    1cd0:	|  |   move.l d1,d0
    1cd2:	|  |   addq.l #4,d0
    1cd4:	|  |   move.l d0,40(sp)
    1cd8:	|  |   move.l 36(sp),d0
    1cdc:	|  |   move.l d0,d2
    1cde:	|  |   addq.l #4,d2
    1ce0:	|  |   move.l d2,36(sp)
    1ce4:	|  |   movea.l d1,a0
    1ce6:	|  |   move.l (a0),d1
    1ce8:	|  |   movea.l d0,a0
    1cea:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1cec:	|  |   addq.l #1,32(sp)
    1cf0:	|  '-> move.w 26(sp),d0
    1cf4:	|      lsr.w #2,d0
    1cf6:	|      move.w d0,d0
    1cf8:	|      andi.l #65535,d0
    1cfe:	|      cmp.l 32(sp),d0
    1d02:	'----- bgt.s 1ccc <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1d04:	       move.l 1ca4a <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1d0c:	       move.l 1ca3c <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1d14:	       clr.l 28(sp)
    1d18:	   ,-- bra.s 1d3e <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1d1a:	,--|-> move.l 40(sp),d1
    1d1e:	|  |   move.l d1,d0
    1d20:	|  |   addq.l #4,d0
    1d22:	|  |   move.l d0,40(sp)
    1d26:	|  |   move.l 36(sp),d0
    1d2a:	|  |   move.l d0,d2
    1d2c:	|  |   addq.l #4,d2
    1d2e:	|  |   move.l d2,36(sp)
    1d32:	|  |   movea.l d1,a0
    1d34:	|  |   move.l (a0),d1
    1d36:	|  |   movea.l d0,a0
    1d38:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d3a:	|  |   addq.l #1,28(sp)
    1d3e:	|  '-> move.w 26(sp),d0
    1d42:	|      lsr.w #2,d0
    1d44:	|      move.w d0,d0
    1d46:	|      andi.l #65535,d0
    1d4c:	|      cmp.l 28(sp),d0
    1d50:	'----- bgt.s 1d1a <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1d52:	       move.w #2,1ca48 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1d5a:	       move.l 1ca7a <winWidth>,d0
    1d60:	       lsr.l #4,d0
    1d62:	       movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    1d68:	       move.l a0,d1
    1d6a:	       addq.l #2,d1
    1d6c:	       move.l d1,1ca5e <CstBackDropBufferApplyCursor>
    1d72:	       move.l d0,d0
    1d74:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1d76:	       move.l 1ca7e <winHeight>,d0
    1d7c:	       movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    1d82:	       move.l a0,d1
    1d84:	       addq.l #2,d1
    1d86:	       move.l d1,1ca5e <CstBackDropBufferApplyCursor>
    1d8c:	       move.l d0,d0
    1d8e:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d90:	       movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    1d96:	       move.l a0,d0
    1d98:	       addq.l #2,d0
    1d9a:	       move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    1da0:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1da2:	       movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    1da8:	       move.l a0,d0
    1daa:	       addq.l #2,d0
    1dac:	       move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    1db2:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1db4:	       movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    1dba:	       move.l a0,d0
    1dbc:	       addq.l #2,d0
    1dbe:	       move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    1dc4:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1dc6:	       pea 17fb2 <PutChar+0x238>
    1dcc:	       jsr 172d8 <KPrintF>
    1dd2:	       addq.l #4,sp

}  
    1dd4:	       nop
    1dd6:	       move.l (sp)+,d2
    1dd8:	       movea.l (sp)+,a6
    1dda:	       lea 36(sp),sp
    1dde:	       rts

00001de0 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1de0:	             lea -144(sp),sp
    1de4:	             movem.l d2-d4/a6,-(sp)


	KPrintF("CstLoadBackDrop: Loading of Background started");
    1de8:	             pea 17fc6 <PutChar+0x24c>
    1dee:	             jsr 172d8 <KPrintF>
    1df4:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1df6:	             move.l 164(sp),-(sp)
    1dfa:	             jsr 6bc <get2bytes>
    1e00:	             addq.l #4,sp
    1e02:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1e06:	             move.l 164(sp),-(sp)
    1e0a:	             jsr 6bc <get2bytes>
    1e10:	             addq.l #4,sp
    1e12:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1e16:	             move.w 134(sp),d0
    1e1a:	             lsr.w #3,d0
    1e1c:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1e20:	             move.w 130(sp),d0
    1e24:	             lsr.w #1,d0
    1e26:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1e2a:	             move.l 1ca7a <winWidth>,d0
    1e30:	             lsr.l #3,d0
    1e32:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1e36:	             move.w 130(sp),d0
    1e3a:	             muls.w 132(sp),d0
    1e3e:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1e42:	             move.w 124(sp),d1
    1e46:	             move.w d1,d0
    1e48:	             add.w d0,d0
    1e4a:	             add.w d0,d0
    1e4c:	             move.w d0,d2
    1e4e:	             add.w d1,d2
    1e50:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1e54:	             move.w 1ca36 <CstPaletteLoaded>,d0
    1e5a:	,----------- bne.w 1ef4 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1e5e:	|            move.w #384,120(sp)

    if(CstPalette) {
    1e64:	|            move.l 1ca66 <CstPalette>,d0
    1e6a:	|        ,-- beq.s 1e84 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1e6c:	|        |   move.l 1ca66 <CstPalette>,116(sp)
    1e74:	|        |   move.l 1cb26 <SysBase>,d0
    1e7a:	|        |   movea.l d0,a6
    1e7c:	|        |   movea.l 116(sp),a1
    1e80:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1e84:	|        '-> moveq #64,d0
    1e86:	|            move.l d0,112(sp)
    1e8a:	|            clr.l 108(sp)
    1e8e:	|            move.l 1cb26 <SysBase>,d0
    1e94:	|            movea.l d0,a6
    1e96:	|            move.l 112(sp),d0
    1e9a:	|            move.l 108(sp),d1
    1e9e:	|            jsr -684(a6)
    1ea2:	|            move.l d0,104(sp)
    1ea6:	|            move.l 104(sp),d0
    1eaa:	|            move.l d0,1ca66 <CstPalette>
    CstPaletteLoaded = 1;
    1eb0:	|            move.w #1,1ca36 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1eb8:	|            move.l 1ca66 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ec0:	|            clr.l 152(sp)
    1ec4:	|        ,-- bra.s 1eea <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1ec6:	|     ,--|-> move.l 164(sp),-(sp)
    1eca:	|     |  |   jsr 6bc <get2bytes>
    1ed0:	|     |  |   addq.l #4,sp
    1ed2:	|     |  |   move.l d0,d1
    1ed4:	|     |  |   move.l 156(sp),d0
    1ed8:	|     |  |   move.l d0,d2
    1eda:	|     |  |   addq.l #2,d2
    1edc:	|     |  |   move.l d2,156(sp)
    1ee0:	|     |  |   move.l d1,d1
    1ee2:	|     |  |   movea.l d0,a0
    1ee4:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ee6:	|     |  |   addq.l #1,152(sp)
    1eea:	|     |  '-> moveq #31,d0
    1eec:	|     |      cmp.l 152(sp),d0
    1ef0:	|     '----- bge.s 1ec6 <CstLoadBackdrop+0xe6>
    1ef2:	|  ,-------- bra.s 1f12 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ef4:	'--|-------> clr.l 148(sp)
    1ef8:	   |     ,-- bra.s 1f0a <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1efa:	   |  ,--|-> move.l 164(sp),-(sp)
    1efe:	   |  |  |   jsr 6bc <get2bytes>
    1f04:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1f06:	   |  |  |   addq.l #1,148(sp)
    1f0a:	   |  |  '-> moveq #31,d2
    1f0c:	   |  |      cmp.l 148(sp),d2
    1f10:	   |  '----- bge.s 1efa <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1f12:	   '-------> moveq #0,d0
    1f14:	             move.w 122(sp),d0
    1f18:	             move.l d0,100(sp)
    1f1c:	             moveq #2,d0
    1f1e:	             move.l d0,96(sp)
    1f22:	             move.l 1cb26 <SysBase>,d0
    1f28:	             movea.l d0,a6
    1f2a:	             move.l 100(sp),d0
    1f2e:	             move.l 96(sp),d1
    1f32:	             jsr -684(a6)
    1f36:	             move.l d0,92(sp)
    1f3a:	             move.l 92(sp),d0
    1f3e:	             move.l d0,88(sp)
  if( !tmpbuffer)
    1f42:	         ,-- bne.s 1f52 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1f44:	         |   pea 17ff5 <PutChar+0x27b>
    1f4a:	         |   jsr 172d8 <KPrintF>
    1f50:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1f52:	         '-> moveq #0,d0
    1f54:	             move.w 124(sp),d0
    1f58:	             move.l d0,84(sp)
    1f5c:	             moveq #2,d2
    1f5e:	             move.l d2,80(sp)
    1f62:	             move.l 1cb26 <SysBase>,d0
    1f68:	             movea.l d0,a6
    1f6a:	             move.l 84(sp),d0
    1f6e:	             move.l 80(sp),d1
    1f72:	             jsr -684(a6)
    1f76:	             move.l d0,76(sp)
    1f7a:	             move.l 76(sp),d0
    1f7e:	             move.l d0,72(sp)
  if( !tmpmask)
    1f82:	         ,-- bne.s 1f92 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1f84:	         |   pea 1802b <PutChar+0x2b1>
    1f8a:	         |   jsr 172d8 <KPrintF>
    1f90:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    1f92:	         '-> move.w 132(sp),d0
    1f96:	             movea.w d0,a1
    1f98:	             move.w 134(sp),d0
    1f9c:	             movea.w d0,a0
    1f9e:	             clr.l -(sp)
    1fa0:	             pea 5 <_start+0x5>
    1fa4:	             move.l a1,-(sp)
    1fa6:	             move.l a0,-(sp)
    1fa8:	             pea 1805f <PutChar+0x2e5>
    1fae:	             move.l 108(sp),-(sp)
    1fb2:	             jsr 173c0 <debug_register_bitmap>
    1fb8:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    1fbc:	             move.w 132(sp),d0
    1fc0:	             movea.w d0,a1
    1fc2:	             move.w 134(sp),d0
    1fc6:	             movea.w d0,a0
    1fc8:	             clr.l -(sp)
    1fca:	             pea 1 <_start+0x1>
    1fce:	             move.l a1,-(sp)
    1fd0:	             move.l a0,-(sp)
    1fd2:	             pea 1806d <PutChar+0x2f3>
    1fd8:	             move.l 108(sp),-(sp)
    1fdc:	             jsr 173c0 <debug_register_bitmap>
    1fe2:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1fe6:	             move.l 164(sp),68(sp)
    1fec:	             move.l 88(sp),64(sp)
    1ff2:	             moveq #2,d0
    1ff4:	             move.l d0,60(sp)
    1ff8:	             move.w 122(sp),d0
    1ffc:	             lsr.w #1,d0
    1ffe:	             move.w d0,d0
    2000:	             andi.l #65535,d0
    2006:	             move.l d0,56(sp)
    200a:	             move.l 1cb2e <DOSBase>,d0
    2010:	             movea.l d0,a6
    2012:	             move.l 68(sp),d1
    2016:	             move.l 64(sp),d2
    201a:	             move.l 60(sp),d3
    201e:	             move.l 56(sp),d4
    2022:	             jsr -324(a6)
    2026:	             move.l d0,52(sp)
    202a:	             move.l 52(sp),d0
    202e:	             move.w d0,50(sp)
  if(!count) {
    2032:	         ,-- bne.s 2046 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2034:	         |   pea 18079 <PutChar+0x2ff>
    203a:	         |   jsr 172d8 <KPrintF>
    2040:	         |   addq.l #4,sp
    return;
    2042:	   ,-----|-- bra.w 2292 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    2046:	   |     '-> move.l 164(sp),46(sp)
    204c:	   |         move.l 72(sp),42(sp)
    2052:	   |         moveq #2,d2
    2054:	   |         move.l d2,38(sp)
    2058:	   |         move.w 124(sp),d0
    205c:	   |         lsr.w #1,d0
    205e:	   |         move.w d0,d0
    2060:	   |         andi.l #65535,d0
    2066:	   |         move.l d0,34(sp)
    206a:	   |         move.l 1cb2e <DOSBase>,d0
    2070:	   |         movea.l d0,a6
    2072:	   |         move.l 46(sp),d1
    2076:	   |         move.l 42(sp),d2
    207a:	   |         move.l 38(sp),d3
    207e:	   |         move.l 34(sp),d4
    2082:	   |         jsr -324(a6)
    2086:	   |         move.l d0,30(sp)
    208a:	   |         move.l 30(sp),d0
    208e:	   |         move.w d0,50(sp)
   

  if(!count) {
    2092:	   |     ,-- bne.s 20a6 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    2094:	   |     |   pea 18079 <PutChar+0x2ff>
    209a:	   |     |   jsr 172d8 <KPrintF>
    20a0:	   |     |   addq.l #4,sp
    return;
    20a2:	   +-----|-- bra.w 2292 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    20a6:	   |     '-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    20ae:	   |         move.l 1ca3c <CstBackDrop>,d0
    20b4:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    20b8:	   |         move.l 172(sp),d0
    20bc:	   |         move.w d0,d1
    20be:	   |         muls.w 126(sp),d1
    20c2:	   |         move.l 168(sp),d0
    20c6:	   |     ,-- bpl.s 20ca <CstLoadBackdrop+0x2ea>
    20c8:	   |     |   addq.l #7,d0
    20ca:	   |     '-> asr.l #3,d0
    20cc:	   |         move.l d0,d0
    20ce:	   |         movea.w d1,a0
    20d0:	   |         adda.w d0,a0
    20d2:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    20d6:	   |         moveq #0,d0
    20d8:	   |         move.w 24(sp),d0
    20dc:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    20e0:	   |         pea 18094 <PutChar+0x31a>
    20e6:	   |         jsr 172d8 <KPrintF>
    20ec:	   |         addq.l #4,sp


  WaitBlit();
    20ee:	   |         move.l 1cb32 <GfxBase>,d0
    20f4:	   |         movea.l d0,a6
    20f6:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    20fa:	   |         movea.l 26(sp),a0
    20fe:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    2104:	   |         movea.l 26(sp),a0
    2108:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    210e:	   |         movea.l 26(sp),a0
    2112:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    2118:	   |         movea.l 26(sp),a0
    211c:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    2122:	   |         move.w 126(sp),d0
    2126:	   |         sub.w 130(sp),d0
    212a:	   |         movea.l 26(sp),a0
    212e:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    2132:	   |         move.w 126(sp),d0
    2136:	   |         sub.w 130(sp),d0
    213a:	   |         movea.l 26(sp),a0
    213e:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    2142:	   |         movea.l 26(sp),a0
    2146:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    214c:	   |         movea.l 26(sp),a0
    2150:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2156:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    215c:	   |         clr.l 136(sp)
    2160:	   |     ,-- bra.s 21c2 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    2162:	   |  ,--|-> movea.l 26(sp),a0
    2166:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    216c:	   |  |  |   move.l 140(sp),d0
    2170:	   |  |  |   movea.l 26(sp),a0
    2174:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    2178:	   |  |  |   move.l 144(sp),d0
    217c:	   |  |  |   movea.l 26(sp),a0
    2180:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    2184:	   |  |  |   move.l 144(sp),d0
    2188:	   |  |  |   movea.l 26(sp),a0
    218c:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    2190:	   |  |  |   move.w 132(sp),d0
    2194:	   |  |  |   lsl.w #6,d0
    2196:	   |  |  |   add.w 128(sp),d0
    219a:	   |  |  |   movea.l 26(sp),a0
    219e:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    21a2:	   |  |  |   moveq #0,d0
    21a4:	   |  |  |   move.w 124(sp),d0
    21a8:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    21ac:	   |  |  |   move.w 1ca3a <CstBackdropSizePlane>,d0
    21b2:	   |  |  |   move.w d0,d0
    21b4:	   |  |  |   andi.l #65535,d0
    21ba:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    21be:	   |  |  |   addq.l #1,136(sp)
    21c2:	   |  |  '-> moveq #4,d0
    21c4:	   |  |      cmp.l 136(sp),d0
    21c8:	   |  '----- bge.s 2162 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    21ca:	   |         move.l 1cb32 <GfxBase>,d0
    21d0:	   |         movea.l d0,a6
    21d2:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    21d6:	   |         pea 180b3 <PutChar+0x339>
    21dc:	   |         jsr 172d8 <KPrintF>
    21e2:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    21e4:	   |         move.l 88(sp),20(sp)
    21ea:	   |         move.l 1cb26 <SysBase>,d0
    21f0:	   |         movea.l d0,a6
    21f2:	   |         movea.l 20(sp),a1
    21f6:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    21fa:	   |         move.l 72(sp),16(sp)
    2200:	   |         move.l 1cb26 <SysBase>,d0
    2206:	   |         movea.l d0,a6
    2208:	   |         movea.l 16(sp),a1
    220c:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    2210:	   |         move.w #2,1ca48 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    2218:	   |         move.l 1ca7a <winWidth>,d0
    221e:	   |         lsr.l #4,d0
    2220:	   |         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    2226:	   |         move.l a0,d1
    2228:	   |         addq.l #2,d1
    222a:	   |         move.l d1,1ca5e <CstBackDropBufferApplyCursor>
    2230:	   |         move.l d0,d0
    2232:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2234:	   |         move.l 1ca7e <winHeight>,d0
    223a:	   |         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    2240:	   |         move.l a0,d1
    2242:	   |         addq.l #2,d1
    2244:	   |         move.l d1,1ca5e <CstBackDropBufferApplyCursor>
    224a:	   |         move.l d0,d0
    224c:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    224e:	   |         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    2254:	   |         move.l a0,d0
    2256:	   |         addq.l #2,d0
    2258:	   |         move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    225e:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2260:	   |         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    2266:	   |         move.l a0,d0
    2268:	   |         addq.l #2,d0
    226a:	   |         move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    2270:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2272:	   |         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    2278:	   |         move.l a0,d0
    227a:	   |         addq.l #2,d0
    227c:	   |         move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    2282:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    2284:	   |         pea 180d3 <PutChar+0x359>
    228a:	   |         jsr 172d8 <KPrintF>
    2290:	   |         addq.l #4,sp

}
    2292:	   '-------> movem.l (sp)+,d2-d4/a6
    2296:	             lea 144(sp),sp
    229a:	             rts

0000229c <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    229c:	                lea -72(sp),sp
    22a0:	                move.l a6,-(sp)
    22a2:	                move.l d2,-(sp)
    22a4:	                move.l 88(sp),d1
    22a8:	                move.l 92(sp),d0
    22ac:	                move.w d1,d1
    22ae:	                move.w d1,10(sp)
    22b2:	                move.w d0,d0
    22b4:	                move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;	
    22b8:	                move.l #14675968,28(sp)
  //custom->color[0] = 0x0f0;
  UWORD *destination = 0;
    22c0:	                clr.l 24(sp)
  CstApplyBackDropCounter = 2;
    22c4:	                move.w #2,1ca48 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    22cc:	                move.l 1ca3c <CstBackDrop>,24(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    22d4:	                clr.l 56(sp)

  blitwidth = single->width/16;
    22d8:	                movea.l 84(sp),a0
    22dc:	                move.l (a0),d0
    22de:	                movea.l d0,a0
    22e0:	                cmpa.w #0,a0
    22e4:	            ,-- bge.s 22ea <CstPasteChar+0x4e>
    22e6:	            |   lea 15(a0),a0
    22ea:	            '-> move.l a0,d0
    22ec:	                asr.l #4,d0
    22ee:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    22f2:	            ,-- bne.s 22fa <CstPasteChar+0x5e>
    22f4:	            |   moveq #1,d0
    22f6:	            |   move.l d0,40(sp)

  if( y < 0) {
    22fa:	            '-> tst.w 8(sp)
    22fe:	         ,----- bge.s 2348 <CstPasteChar+0xac>
    if(y + single->height < 0) {
    2300:	         |      movea.w 8(sp),a1
    2304:	         |      movea.l 84(sp),a0
    2308:	         |      move.l 4(a0),d0
    230c:	         |      add.l a1,d0
    230e:	         |  ,-- bpl.s 2322 <CstPasteChar+0x86>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2310:	         |  |   pea 180ed <PutChar+0x373>
    2316:	         |  |   jsr 172d8 <KPrintF>
    231c:	         |  |   addq.l #4,sp
      return;
    231e:	,--------|--|-- bra.w 29dc <CstPasteChar+0x740>
    }
    ystartdst = 0;
    2322:	|        |  '-> clr.l 52(sp)
    ystartsrc = y*-1;
    2326:	|        |      move.w 8(sp),d0
    232a:	|        |      ext.l d0
    232c:	|        |      move.l d0,d1
    232e:	|        |      neg.l d1
    2330:	|        |      move.l d1,48(sp)
    blitheight = single->height+y;
    2334:	|        |      movea.l 84(sp),a0
    2338:	|        |      move.l 4(a0),d0
    233c:	|        |      movea.w 8(sp),a0
    2340:	|        |      add.l a0,d0
    2342:	|        |      move.l d0,44(sp)
    2346:	|     ,--|----- bra.s 23ba <CstPasteChar+0x11e>
  } else if(y+single->height > (int) winHeight) {
    2348:	|     |  '----> movea.w 8(sp),a1
    234c:	|     |         movea.l 84(sp),a0
    2350:	|     |         move.l 4(a0),d0
    2354:	|     |         move.l a1,d1
    2356:	|     |         add.l d0,d1
    2358:	|     |         move.l 1ca7e <winHeight>,d0
    235e:	|     |         cmp.l d1,d0
    2360:	|     |  ,----- bge.s 23a2 <CstPasteChar+0x106>
    if(y  > (int) winHeight) {
    2362:	|     |  |      movea.w 8(sp),a0
    2366:	|     |  |      move.l 1ca7e <winHeight>,d0
    236c:	|     |  |      cmp.l a0,d0
    236e:	|     |  |  ,-- bge.s 2382 <CstPasteChar+0xe6>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2370:	|     |  |  |   pea 180ed <PutChar+0x373>
    2376:	|     |  |  |   jsr 172d8 <KPrintF>
    237c:	|     |  |  |   addq.l #4,sp
      return;
    237e:	+-----|--|--|-- bra.w 29dc <CstPasteChar+0x740>
    }
    ystartdst = y;
    2382:	|     |  |  '-> movea.w 8(sp),a0
    2386:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    238a:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    238e:	|     |  |      move.l 1ca7e <winHeight>,d0
    2394:	|     |  |      movea.w 8(sp),a0
    2398:	|     |  |      move.l d0,d1
    239a:	|     |  |      sub.l a0,d1
    239c:	|     |  |      move.l d1,44(sp)
    23a0:	|     +--|----- bra.s 23ba <CstPasteChar+0x11e>
  } else {
    ystartdst = y;
    23a2:	|     |  '----> movea.w 8(sp),a0
    23a6:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    23aa:	|     |         clr.l 48(sp)
    blitheight = single->height;
    23ae:	|     |         movea.l 84(sp),a0
    23b2:	|     |         move.l 4(a0),d0
    23b6:	|     |         move.l d0,44(sp)
  }


   if( x < 0) { //Leftmost part outside screen
    23ba:	|     '-------> tst.w 10(sp)
    23be:	|        ,----- bge.w 2530 <CstPasteChar+0x294>
    if(x + single->width < 0) {
    23c2:	|        |      movea.w 10(sp),a1
    23c6:	|        |      movea.l 84(sp),a0
    23ca:	|        |      move.l (a0),d0
    23cc:	|        |      add.l a1,d0
    23ce:	|        |  ,-- bpl.s 23e2 <CstPasteChar+0x146>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    23d0:	|        |  |   pea 180ed <PutChar+0x373>
    23d6:	|        |  |   jsr 172d8 <KPrintF>
    23dc:	|        |  |   addq.l #4,sp
      return;
    23de:	+--------|--|-- bra.w 29dc <CstPasteChar+0x740>

    }
    
    extrawords = 1;
    23e2:	|        |  '-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    23e8:	|        |      move.w 10(sp),d0
    23ec:	|        |  ,-- bpl.s 23f2 <CstPasteChar+0x156>
    23ee:	|        |  |   addi.w #15,d0
    23f2:	|        |  '-> asr.w #4,d0
    23f4:	|        |      neg.w d0
    23f6:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    23fa:	|        |      move.w 10(sp),d0
    23fe:	|        |      ext.l d0
    2400:	|        |      neg.l d0
    2402:	|        |      andi.l #-2147483633,d0
    2408:	|        |  ,-- bpl.s 2412 <CstPasteChar+0x176>
    240a:	|        |  |   subq.l #1,d0
    240c:	|        |  |   moveq #-16,d1
    240e:	|        |  |   or.l d1,d0
    2410:	|        |  |   addq.l #1,d0
    2412:	|        |  '-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2416:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    241a:	|        |      movea.l 84(sp),a0
    241e:	|        |      move.l 24(a0),d0
    2422:	|        |      move.l d0,d1
    2424:	|        |      moveq #0,d0
    2426:	|        |      move.w 76(sp),d0
    242a:	|        |      add.l d0,d0
    242c:	|        |      move.l d1,d2
    242e:	|        |      add.l d0,d2
    2430:	|        |      movea.l 84(sp),a0
    2434:	|        |      move.l (a0),d0
    2436:	|        |      move.l 48(sp),-(sp)
    243a:	|        |      move.l d0,-(sp)
    243c:	|        |      jsr 17c64 <__mulsi3>
    2442:	|        |      addq.l #8,sp
    2444:	|        |      lsr.l #3,d0
    2446:	|        |      move.l d2,d1
    2448:	|        |      add.l d0,d1
    244a:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    244e:	|        |      move.l 1ca7a <winWidth>,d0
    2454:	|        |      move.l 52(sp),-(sp)
    2458:	|        |      move.l d0,-(sp)
    245a:	|        |      jsr 17c64 <__mulsi3>
    2460:	|        |      addq.l #8,sp
    2462:	|        |      lsr.l #3,d0
    2464:	|        |      move.l 24(sp),d1
    2468:	|        |      add.l d1,d0
    246a:	|        |      move.l d0,d2
    246c:	|        |      subq.l #2,d2
    246e:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2472:	|        |      move.l 1ca7a <winWidth>,d0
    2478:	|        |      move.l 52(sp),-(sp)
    247c:	|        |      move.l d0,-(sp)
    247e:	|        |      jsr 17c64 <__mulsi3>
    2484:	|        |      addq.l #8,sp
    2486:	|        |      lsr.l #3,d0
    2488:	|        |      move.l 24(sp),d1
    248c:	|        |      add.l d1,d0
    248e:	|        |      move.l d0,d1
    2490:	|        |      subq.l #2,d1
    2492:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    2496:	|        |      moveq #0,d0
    2498:	|        |      move.w 74(sp),d0
    249c:	|        |      moveq #16,d1
    249e:	|        |      sub.l d0,d1
    24a0:	|        |      move.l d1,d0
    24a2:	|        |      moveq #12,d2
    24a4:	|        |      lsl.l d2,d0
    24a6:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    24aa:	|        |      movea.l 84(sp),a0
    24ae:	|        |      move.l (a0),d0
    24b0:	|        |      movea.l d0,a0
    24b2:	|        |      cmpa.w #0,a0
    24b6:	|        |  ,-- bge.s 24bc <CstPasteChar+0x220>
    24b8:	|        |  |   lea 15(a0),a0
    24bc:	|        |  '-> move.l a0,d0
    24be:	|        |      asr.l #4,d0
    24c0:	|        |      move.l d0,d0
    24c2:	|        |      add.w 76(sp),d0
    24c6:	|        |      movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    24cc:	|        |      move.l a0,d1
    24ce:	|        |      addq.l #2,d1
    24d0:	|        |      move.l d1,1ca5e <CstBackDropBufferApplyCursor>
    24d6:	|        |      add.w 78(sp),d0
    24da:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    24dc:	|        |      movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    24e2:	|        |      move.l a0,d0
    24e4:	|        |      addq.l #2,d0
    24e6:	|        |      move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    24ec:	|        |      move.l 44(sp),d0
    24f0:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    24f2:	|        |      movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    24f8:	|        |      move.l a0,d0
    24fa:	|        |      addq.l #2,d0
    24fc:	|        |      move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    2502:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2504:	|        |      movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    250a:	|        |      move.l a0,d0
    250c:	|        |      addq.l #2,d0
    250e:	|        |      move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    2514:	|        |      move.l 52(sp),d0
    2518:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    251a:	|        |      movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    2520:	|        |      move.l a0,d0
    2522:	|        |      addq.l #2,d0
    2524:	|        |      move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    252a:	|        |      clr.w (a0)
    252c:	|     ,--|----- bra.w 2844 <CstPasteChar+0x5a8>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2530:	|     |  '----> movea.w 10(sp),a1
    2534:	|     |         movea.l 84(sp),a0
    2538:	|     |         move.l (a0),d0
    253a:	|     |         move.l a1,d1
    253c:	|     |         add.l d0,d1
    253e:	|     |         move.l 1ca7a <winWidth>,d0
    2544:	|     |         cmp.l d1,d0
    2546:	|     |  ,----- bge.w 26e2 <CstPasteChar+0x446>

    if(x - single->width > (int) winWidth)
    254a:	|     |  |      movea.w 10(sp),a1
    254e:	|     |  |      movea.l 84(sp),a0
    2552:	|     |  |      move.l (a0),d0
    2554:	|     |  |      move.l a1,d1
    2556:	|     |  |      sub.l d0,d1
    2558:	|     |  |      move.l 1ca7a <winWidth>,d0
    255e:	|     |  |      cmp.l d1,d0
    2560:	|     |  |  ,-- bge.s 2574 <CstPasteChar+0x2d8>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2562:	|     |  |  |   pea 180ed <PutChar+0x373>
    2568:	|     |  |  |   jsr 172d8 <KPrintF>
    256e:	|     |  |  |   addq.l #4,sp
      return;
    2570:	+-----|--|--|-- bra.w 29dc <CstPasteChar+0x740>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2574:	|     |  |  '-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2578:	|     |  |      movea.w 10(sp),a1
    257c:	|     |  |      movea.l 84(sp),a0
    2580:	|     |  |      move.l (a0),d0
    2582:	|     |  |      add.l a1,d0
    2584:	|     |  |      move.l d0,d1
    2586:	|     |  |      move.l 1ca7a <winWidth>,d0
    258c:	|     |  |      sub.l d0,d1
    258e:	|     |  |      move.l d1,d0
    2590:	|     |  |      lsr.l #4,d0
    2592:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    2596:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    259a:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    25a0:	|     |  |      movea.l 84(sp),a0
    25a4:	|     |  |      move.l 24(a0),d0
    25a8:	|     |  |      move.l d0,d2
    25aa:	|     |  |      movea.l 84(sp),a0
    25ae:	|     |  |      move.l (a0),d0
    25b0:	|     |  |      move.l 48(sp),-(sp)
    25b4:	|     |  |      move.l d0,-(sp)
    25b6:	|     |  |      jsr 17c64 <__mulsi3>
    25bc:	|     |  |      addq.l #8,sp
    25be:	|     |  |      lsr.l #3,d0
    25c0:	|     |  |      move.l d2,d1
    25c2:	|     |  |      add.l d0,d1
    25c4:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    25c8:	|     |  |      move.l 1ca7a <winWidth>,d0
    25ce:	|     |  |      move.l 52(sp),-(sp)
    25d2:	|     |  |      move.l d0,-(sp)
    25d4:	|     |  |      jsr 17c64 <__mulsi3>
    25da:	|     |  |      addq.l #8,sp
    25dc:	|     |  |      lsr.l #3,d0
    25de:	|     |  |      move.l 24(sp),d1
    25e2:	|     |  |      add.l d0,d1
    25e4:	|     |  |      move.w 10(sp),d0
    25e8:	|     |  |  ,-- bpl.s 25ee <CstPasteChar+0x352>
    25ea:	|     |  |  |   addi.w #15,d0
    25ee:	|     |  |  '-> asr.w #4,d0
    25f0:	|     |  |      movea.w d0,a0
    25f2:	|     |  |      move.l a0,d0
    25f4:	|     |  |      add.l a0,d0
    25f6:	|     |  |      move.l d1,d2
    25f8:	|     |  |      add.l d0,d2
    25fa:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    25fe:	|     |  |      move.l 1ca7a <winWidth>,d0
    2604:	|     |  |      move.l 52(sp),-(sp)
    2608:	|     |  |      move.l d0,-(sp)
    260a:	|     |  |      jsr 17c64 <__mulsi3>
    2610:	|     |  |      addq.l #8,sp
    2612:	|     |  |      lsr.l #3,d0
    2614:	|     |  |      move.l 24(sp),d1
    2618:	|     |  |      add.l d0,d1
    261a:	|     |  |      move.w 10(sp),d0
    261e:	|     |  |  ,-- bpl.s 2624 <CstPasteChar+0x388>
    2620:	|     |  |  |   addi.w #15,d0
    2624:	|     |  |  '-> asr.w #4,d0
    2626:	|     |  |      movea.w d0,a0
    2628:	|     |  |      move.l a0,d0
    262a:	|     |  |      add.l a0,d0
    262c:	|     |  |      move.l d1,d2
    262e:	|     |  |      add.l d0,d2
    2630:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    2634:	|     |  |      movea.l 84(sp),a0
    2638:	|     |  |      move.l (a0),d0
    263a:	|     |  |      andi.l #-2147483633,d0
    2640:	|     |  |  ,-- bpl.s 264a <CstPasteChar+0x3ae>
    2642:	|     |  |  |   subq.l #1,d0
    2644:	|     |  |  |   moveq #-16,d1
    2646:	|     |  |  |   or.l d1,d0
    2648:	|     |  |  |   addq.l #1,d0
    264a:	|     |  |  '-> moveq #12,d2
    264c:	|     |  |      lsl.l d2,d0
    264e:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2652:	|     |  |      movea.l 84(sp),a0
    2656:	|     |  |      move.l (a0),d0
    2658:	|     |  |      movea.l d0,a0
    265a:	|     |  |      cmpa.w #0,a0
    265e:	|     |  |  ,-- bge.s 2664 <CstPasteChar+0x3c8>
    2660:	|     |  |  |   lea 15(a0),a0
    2664:	|     |  |  '-> move.l a0,d0
    2666:	|     |  |      asr.l #4,d0
    2668:	|     |  |      move.l d0,d0
    266a:	|     |  |      movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    2670:	|     |  |      move.l a0,d1
    2672:	|     |  |      addq.l #2,d1
    2674:	|     |  |      move.l d1,1ca5e <CstBackDropBufferApplyCursor>
    267a:	|     |  |      add.w 76(sp),d0
    267e:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2680:	|     |  |      movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    2686:	|     |  |      move.l a0,d0
    2688:	|     |  |      addq.l #2,d0
    268a:	|     |  |      move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    2690:	|     |  |      move.l 44(sp),d0
    2694:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2696:	|     |  |      move.w 10(sp),d0
    269a:	|     |  |  ,-- bpl.s 26a0 <CstPasteChar+0x404>
    269c:	|     |  |  |   addi.w #15,d0
    26a0:	|     |  |  '-> asr.w #4,d0
    26a2:	|     |  |      movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    26a8:	|     |  |      move.l a0,d1
    26aa:	|     |  |      addq.l #2,d1
    26ac:	|     |  |      move.l d1,1ca5e <CstBackDropBufferApplyCursor>
    26b2:	|     |  |      add.w d0,d0
    26b4:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    26b6:	|     |  |      movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    26bc:	|     |  |      move.l a0,d0
    26be:	|     |  |      addq.l #2,d0
    26c0:	|     |  |      move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    26c6:	|     |  |      move.l 52(sp),d0
    26ca:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    26cc:	|     |  |      movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    26d2:	|     |  |      move.l a0,d0
    26d4:	|     |  |      addq.l #2,d0
    26d6:	|     |  |      move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    26dc:	|     |  |      clr.w (a0)
    26de:	|     +--|----- bra.w 2844 <CstPasteChar+0x5a8>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    26e2:	|     |  '----> move.w #1,78(sp)
    cutwordssource = 0;
    26e8:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    26ec:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    26f0:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    26f4:	|     |         movea.l 84(sp),a0
    26f8:	|     |         move.l 24(a0),d0
    26fc:	|     |         move.l d0,d2
    26fe:	|     |         movea.l 84(sp),a0
    2702:	|     |         move.l (a0),d0
    2704:	|     |         movea.l d0,a0
    2706:	|     |         cmpa.w #0,a0
    270a:	|     |     ,-- bge.s 2710 <CstPasteChar+0x474>
    270c:	|     |     |   lea 15(a0),a0
    2710:	|     |     '-> move.l a0,d0
    2712:	|     |         asr.l #4,d0
    2714:	|     |         move.l 48(sp),-(sp)
    2718:	|     |         move.l d0,-(sp)
    271a:	|     |         jsr 17c64 <__mulsi3>
    2720:	|     |         addq.l #8,sp
    2722:	|     |         add.l d0,d0
    2724:	|     |         move.l d2,d1
    2726:	|     |         add.l d0,d1
    2728:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    272c:	|     |         move.l 1ca7a <winWidth>,d0
    2732:	|     |         move.l 52(sp),-(sp)
    2736:	|     |         move.l d0,-(sp)
    2738:	|     |         jsr 17c64 <__mulsi3>
    273e:	|     |         addq.l #8,sp
    2740:	|     |         lsr.l #3,d0
    2742:	|     |         move.l 24(sp),d1
    2746:	|     |         add.l d0,d1
    2748:	|     |         move.w 10(sp),d0
    274c:	|     |     ,-- bpl.s 2752 <CstPasteChar+0x4b6>
    274e:	|     |     |   addi.w #15,d0
    2752:	|     |     '-> asr.w #4,d0
    2754:	|     |         movea.w d0,a0
    2756:	|     |         move.l a0,d0
    2758:	|     |         add.l a0,d0
    275a:	|     |         move.l d1,d2
    275c:	|     |         add.l d0,d2
    275e:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2762:	|     |         move.l 1ca7a <winWidth>,d0
    2768:	|     |         move.l 52(sp),-(sp)
    276c:	|     |         move.l d0,-(sp)
    276e:	|     |         jsr 17c64 <__mulsi3>
    2774:	|     |         addq.l #8,sp
    2776:	|     |         lsr.l #3,d0
    2778:	|     |         move.l 24(sp),d1
    277c:	|     |         add.l d0,d1
    277e:	|     |         move.w 10(sp),d0
    2782:	|     |     ,-- bpl.s 2788 <CstPasteChar+0x4ec>
    2784:	|     |     |   addi.w #15,d0
    2788:	|     |     '-> asr.w #4,d0
    278a:	|     |         movea.w d0,a0
    278c:	|     |         move.l a0,d0
    278e:	|     |         add.l a0,d0
    2790:	|     |         move.l d1,d2
    2792:	|     |         add.l d0,d2
    2794:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    2798:	|     |         move.w 10(sp),d0
    279c:	|     |         andi.w #-32753,d0
    27a0:	|     |     ,-- bpl.s 27aa <CstPasteChar+0x50e>
    27a2:	|     |     |   subq.w #1,d0
    27a4:	|     |     |   ori.w #-16,d0
    27a8:	|     |     |   addq.w #1,d0
    27aa:	|     |     '-> ext.l d0
    27ac:	|     |         moveq #12,d1
    27ae:	|     |         lsl.l d1,d0
    27b0:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    27b4:	|     |         movea.l 84(sp),a0
    27b8:	|     |         move.l (a0),d0
    27ba:	|     |         movea.l d0,a0
    27bc:	|     |         cmpa.w #0,a0
    27c0:	|     |     ,-- bge.s 27c6 <CstPasteChar+0x52a>
    27c2:	|     |     |   lea 15(a0),a0
    27c6:	|     |     '-> move.l a0,d0
    27c8:	|     |         asr.l #4,d0
    27ca:	|     |         move.l d0,d0
    27cc:	|     |         add.w 76(sp),d0
    27d0:	|     |         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    27d6:	|     |         move.l a0,d1
    27d8:	|     |         addq.l #2,d1
    27da:	|     |         move.l d1,1ca5e <CstBackDropBufferApplyCursor>
    27e0:	|     |         add.w 78(sp),d0
    27e4:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    27e6:	|     |         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    27ec:	|     |         move.l a0,d0
    27ee:	|     |         addq.l #2,d0
    27f0:	|     |         move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    27f6:	|     |         move.l 44(sp),d0
    27fa:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    27fc:	|     |         move.w 10(sp),d0
    2800:	|     |     ,-- bpl.s 2806 <CstPasteChar+0x56a>
    2802:	|     |     |   addi.w #15,d0
    2806:	|     |     '-> asr.w #4,d0
    2808:	|     |         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    280e:	|     |         move.l a0,d1
    2810:	|     |         addq.l #2,d1
    2812:	|     |         move.l d1,1ca5e <CstBackDropBufferApplyCursor>
    2818:	|     |         add.w d0,d0
    281a:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    281c:	|     |         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    2822:	|     |         move.l a0,d0
    2824:	|     |         addq.l #2,d0
    2826:	|     |         move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    282c:	|     |         move.l 52(sp),d0
    2830:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2832:	|     |         movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    2838:	|     |         move.l a0,d0
    283a:	|     |         addq.l #2,d0
    283c:	|     |         move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    2842:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2844:	|     '-------> moveq #0,d0
    2846:	|               move.w 74(sp),d0
    284a:	|               moveq #0,d1
    284c:	|               not.w d1
    284e:	|               asr.l d0,d1
    2850:	|               move.w d1,22(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2854:	|               moveq #0,d1
    2856:	|               move.w 76(sp),d1
    285a:	|               moveq #0,d0
    285c:	|               move.w 78(sp),d0
    2860:	|               sub.l d0,d1
    2862:	|               move.l d1,d0
    2864:	|               add.w d0,d0
    2866:	|               move.w d0,20(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    286a:	|               move.l 1ca7a <winWidth>,d0
    2870:	|               lsr.l #3,d0
    2872:	|               move.l d0,d2
    2874:	|               move.w 76(sp),d1
    2878:	|               sub.w 78(sp),d1
    287c:	|               move.l 40(sp),d0
    2880:	|               sub.w d0,d1
    2882:	|               move.w d1,d0
    2884:	|               add.w d1,d0
    2886:	|               add.w d2,d0
    2888:	|               move.w d0,18(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    288c:	|               move.l 1ca7a <winWidth>,d0
    2892:	|               lsr.l #3,d0
    2894:	|               move.l d0,d2
    2896:	|               move.w 76(sp),d1
    289a:	|               sub.w 78(sp),d1
    289e:	|               move.l 40(sp),d0
    28a2:	|               sub.w d0,d1
    28a4:	|               move.w d1,d0
    28a6:	|               add.w d1,d0
    28a8:	|               add.w d2,d0
    28aa:	|               move.w d0,16(sp)

  WaitBlit();
    28ae:	|               move.l 1cb32 <GfxBase>,d0
    28b4:	|               movea.l d0,a6
    28b6:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    28ba:	|               movea.l 28(sp),a0
    28be:	|               move.w 22(sp),68(a0)
  custom->bltalwm = bltalwm;
    28c4:	|               movea.l 28(sp),a0
    28c8:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    28ce:	|               move.w 20(sp),d0
    28d2:	|               movea.l 28(sp),a0
    28d6:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    28da:	|               move.w 18(sp),d0
    28de:	|               movea.l 28(sp),a0
    28e2:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    28e6:	|               move.w 16(sp),d0
    28ea:	|               movea.l 28(sp),a0
    28ee:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    28f2:	|               move.l 1ca7a <winWidth>,d0
    28f8:	|               lsr.l #3,d0
    28fa:	|               move.l d0,d1
    28fc:	|               move.l 1ca7e <winHeight>,d0
    2902:	|               move.l d0,d0
    2904:	|               move.w d1,d2
    2906:	|               muls.w d0,d2
    2908:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    290c:	|               move.w 1ca34 <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2914:	|               move.w 38(sp),d0
    2918:	|               andi.w #1,d0
    291c:	|               move.w d0,12(sp)
  if(tmp2) {
    2920:	|        ,----- beq.s 292a <CstPasteChar+0x68e>
    minterm = 0xbfa;
    2922:	|        |      move.w #3066,36(sp)
    2928:	|        |  ,-- bra.s 2930 <CstPasteChar+0x694>
  } else {
    minterm = 0xb0a;
    292a:	|        '--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2930:	|           '-> clr.l 32(sp)
    2934:	|     ,-------- bra.w 29d2 <CstPasteChar+0x736>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2938:	|  ,--|-------> move.l 56(sp),d0
    293c:	|  |  |         add.w 36(sp),d0
    2940:	|  |  |         movea.l 28(sp),a0
    2944:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2948:	|  |  |         move.l 68(sp),d0
    294c:	|  |  |         movea.l 28(sp),a0
    2950:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2954:	|  |  |         move.l 64(sp),d0
    2958:	|  |  |         movea.l 28(sp),a0
    295c:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2960:	|  |  |         move.l 60(sp),d0
    2964:	|  |  |         movea.l 28(sp),a0
    2968:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    296c:	|  |  |         move.l 44(sp),d0
    2970:	|  |  |         lsl.w #6,d0
    2972:	|  |  |         move.l 40(sp),d1
    2976:	|  |  |         add.w d1,d0
    2978:	|  |  |         sub.w 76(sp),d0
    297c:	|  |  |         add.w 78(sp),d0
    2980:	|  |  |         movea.l 28(sp),a0
    2984:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2988:	|  |  |         moveq #0,d0
    298a:	|  |  |         move.w 14(sp),d0
    298e:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2992:	|  |  |         moveq #0,d0
    2994:	|  |  |         move.w 14(sp),d0
    2998:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    299c:	|  |  |         move.w 38(sp),d0
    29a0:	|  |  |         lsr.w #1,d0
    29a2:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    29a6:	|  |  |         move.w 38(sp),d1
    29aa:	|  |  |         andi.w #1,d1
    29ae:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    29b2:	|  |  |  ,----- beq.s 29bc <CstPasteChar+0x720>
      minterm = 0xbfa;
    29b4:	|  |  |  |      move.w #3066,36(sp)
    29ba:	|  |  |  |  ,-- bra.s 29c2 <CstPasteChar+0x726>
    } else {
      minterm = 0xb0a;
    29bc:	|  |  |  '--|-> move.w #2826,36(sp)
    }   

    WaitBlit();     
    29c2:	|  |  |     '-> move.l 1cb32 <GfxBase>,d0
    29c8:	|  |  |         movea.l d0,a6
    29ca:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    29ce:	|  |  |         addq.l #1,32(sp)
    29d2:	|  |  '-------> moveq #4,d2
    29d4:	|  |            cmp.l 32(sp),d2
    29d8:	|  '----------- bge.w 2938 <CstPasteChar+0x69c>
  }   
  //custom->color[0] = 0x000;
}
    29dc:	'-------------> move.l (sp)+,d2
    29de:	                movea.l (sp)+,a6
    29e0:	                lea 72(sp),sp
    29e4:	                rts

000029e6 <CstRestoreScreen>:


void CstRestoreScreen()
{
    29e6:	                   lea -24(sp),sp
    29ea:	                   move.l a6,-(sp)
    29ec:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    29ee:	                   move.l #14675968,16(sp)
  //custom->color[0] = 0xf00;
  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    29f6:	                   move.l 1ca56 <CstCleanupQueueDrawBuffer>,d0
    29fc:	,----------------- beq.w 2c04 <CstRestoreScreen+0x21e>
    2a00:	|                  move.l 1ca4e <CstDrawBuffer>,d0
    2a06:	+----------------- beq.w 2c04 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2a0a:	|                  move.l 1cb32 <GfxBase>,d0
    2a10:	|                  movea.l d0,a6
    2a12:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2a16:	|                  movea.l 16(sp),a0
    2a1a:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2a20:	|                  movea.l 16(sp),a0
    2a24:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2a2a:	|                  movea.l 16(sp),a0
    2a2e:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2a34:	|     ,----------- bra.w 2bf8 <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    2a38:	|  ,--|----------> movea.l 1ca56 <CstCleanupQueueDrawBuffer>,a0
    2a3e:	|  |  |            move.l 4(a0),d0
    2a42:	|  |  |  ,-------- beq.w 2bc6 <CstRestoreScreen+0x1e0>
    2a46:	|  |  |  |         movea.l 1ca56 <CstCleanupQueueDrawBuffer>,a0
    2a4c:	|  |  |  |         movea.l 4(a0),a0
    2a50:	|  |  |  |         move.l 16(a0),d0
    2a54:	|  |  |  |         moveq #2,d1
    2a56:	|  |  |  |         cmp.l d0,d1
    2a58:	|  |  |  +-------- blt.w 2bc6 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2a5c:	|  |  |  |         move.l 1ca7a <winWidth>,d0
    2a62:	|  |  |  |         lsr.l #3,d0
    2a64:	|  |  |  |         move.l d0,d1
    2a66:	|  |  |  |         movea.l 1ca56 <CstCleanupQueueDrawBuffer>,a0
    2a6c:	|  |  |  |         move.w 8(a0),d0
    2a70:	|  |  |  |         add.w d0,d0
    2a72:	|  |  |  |         sub.w d0,d1
    2a74:	|  |  |  |         movea.l 16(sp),a0
    2a78:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2a7c:	|  |  |  |         move.l 1ca7a <winWidth>,d0
    2a82:	|  |  |  |         lsr.l #3,d0
    2a84:	|  |  |  |         move.l d0,d1
    2a86:	|  |  |  |         movea.l 1ca56 <CstCleanupQueueDrawBuffer>,a0
    2a8c:	|  |  |  |         move.w 8(a0),d0
    2a90:	|  |  |  |         add.w d0,d0
    2a92:	|  |  |  |         sub.w d0,d1
    2a94:	|  |  |  |         movea.l 16(sp),a0
    2a98:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2a9c:	|  |  |  |         movea.l 1ca56 <CstCleanupQueueDrawBuffer>,a0
    2aa2:	|  |  |  |         move.w 14(a0),d0
    2aa6:	|  |  |  |         move.w d0,d0
    2aa8:	|  |  |  |         andi.l #65535,d0
    2aae:	|  |  |  |         move.l 1ca7a <winWidth>,d1
    2ab4:	|  |  |  |         move.l d1,-(sp)
    2ab6:	|  |  |  |         move.l d0,-(sp)
    2ab8:	|  |  |  |         jsr 17c64 <__mulsi3>
    2abe:	|  |  |  |         addq.l #8,sp
    2ac0:	|  |  |  |         move.l d0,d1
    2ac2:	|  |  |  |         lsr.l #3,d1
    2ac4:	|  |  |  |         move.l 1ca3c <CstBackDrop>,d0
    2aca:	|  |  |  |         add.l d0,d1
    2acc:	|  |  |  |         movea.l 1ca56 <CstCleanupQueueDrawBuffer>,a0
    2ad2:	|  |  |  |         move.w 12(a0),d0
    2ad6:	|  |  |  |         move.w d0,d0
    2ad8:	|  |  |  |         andi.l #65535,d0
    2ade:	|  |  |  |         move.l d1,d2
    2ae0:	|  |  |  |         add.l d0,d2
    2ae2:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2ae6:	|  |  |  |         movea.l 1ca56 <CstCleanupQueueDrawBuffer>,a0
    2aec:	|  |  |  |         move.w 14(a0),d0
    2af0:	|  |  |  |         move.w d0,d0
    2af2:	|  |  |  |         andi.l #65535,d0
    2af8:	|  |  |  |         move.l 1ca7a <winWidth>,d1
    2afe:	|  |  |  |         move.l d1,-(sp)
    2b00:	|  |  |  |         move.l d0,-(sp)
    2b02:	|  |  |  |         jsr 17c64 <__mulsi3>
    2b08:	|  |  |  |         addq.l #8,sp
    2b0a:	|  |  |  |         move.l d0,d1
    2b0c:	|  |  |  |         lsr.l #3,d1
    2b0e:	|  |  |  |         move.l 1ca4e <CstDrawBuffer>,d0
    2b14:	|  |  |  |         add.l d0,d1
    2b16:	|  |  |  |         movea.l 1ca56 <CstCleanupQueueDrawBuffer>,a0
    2b1c:	|  |  |  |         move.w 12(a0),d0
    2b20:	|  |  |  |         move.w d0,d0
    2b22:	|  |  |  |         andi.l #65535,d0
    2b28:	|  |  |  |         move.l d1,d2
    2b2a:	|  |  |  |         add.l d0,d2
    2b2c:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b30:	|  |  |  |         clr.l 20(sp)
    2b34:	|  |  |  |     ,-- bra.w 2bbc <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2b38:	|  |  |  |  ,--|-> move.l 28(sp),d0
    2b3c:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b40:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2b44:	|  |  |  |  |  |   move.l 24(sp),d0
    2b48:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b4c:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2b50:	|  |  |  |  |  |   movea.l 1ca56 <CstCleanupQueueDrawBuffer>,a0
    2b56:	|  |  |  |  |  |   move.w 10(a0),d0
    2b5a:	|  |  |  |  |  |   lsl.w #6,d0
    2b5c:	|  |  |  |  |  |   movea.l 1ca56 <CstCleanupQueueDrawBuffer>,a0
    2b62:	|  |  |  |  |  |   move.w 8(a0),d1
    2b66:	|  |  |  |  |  |   add.w d1,d0
    2b68:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b6c:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2b70:	|  |  |  |  |  |   move.l 1ca7a <winWidth>,d0
    2b76:	|  |  |  |  |  |   lsr.l #3,d0
    2b78:	|  |  |  |  |  |   move.l 1ca7e <winHeight>,d1
    2b7e:	|  |  |  |  |  |   move.l d1,-(sp)
    2b80:	|  |  |  |  |  |   move.l d0,-(sp)
    2b82:	|  |  |  |  |  |   jsr 17c64 <__mulsi3>
    2b88:	|  |  |  |  |  |   addq.l #8,sp
    2b8a:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2b8e:	|  |  |  |  |  |   move.l 1ca7a <winWidth>,d0
    2b94:	|  |  |  |  |  |   lsr.l #3,d0
    2b96:	|  |  |  |  |  |   move.l 1ca7e <winHeight>,d1
    2b9c:	|  |  |  |  |  |   move.l d1,-(sp)
    2b9e:	|  |  |  |  |  |   move.l d0,-(sp)
    2ba0:	|  |  |  |  |  |   jsr 17c64 <__mulsi3>
    2ba6:	|  |  |  |  |  |   addq.l #8,sp
    2ba8:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2bac:	|  |  |  |  |  |   move.l 1cb32 <GfxBase>,d0
    2bb2:	|  |  |  |  |  |   movea.l d0,a6
    2bb4:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2bb8:	|  |  |  |  |  |   addq.l #1,20(sp)
    2bbc:	|  |  |  |  |  '-> moveq #4,d0
    2bbe:	|  |  |  |  |      cmp.l 20(sp),d0
    2bc2:	|  |  |  |  '----- bge.w 2b38 <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2bc6:	|  |  |  '-------> move.l 1ca56 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2bce:	|  |  |            movea.l 1ca56 <CstCleanupQueueDrawBuffer>,a0
    2bd4:	|  |  |            move.l 16(a0),d0
    2bd8:	|  |  |            move.l d0,1ca56 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2bde:	|  |  |            move.l 12(sp),8(sp)
    2be4:	|  |  |            move.l 1cb26 <SysBase>,d0
    2bea:	|  |  |            movea.l d0,a6
    2bec:	|  |  |            movea.l 8(sp),a1
    2bf0:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2bf4:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2bf8:	|  |  '----------> move.l 1ca56 <CstCleanupQueueDrawBuffer>,d0
    2bfe:	|  '-------------- bne.w 2a38 <CstRestoreScreen+0x52>
    2c02:	|              ,-- bra.s 2c06 <CstRestoreScreen+0x220>
    return;
    2c04:	'--------------|-> nop
  }
  //custom->color[0] = 0x000;
}
    2c06:	               '-> move.l (sp)+,d2
    2c08:	                   movea.l (sp)+,a6
    2c0a:	                   lea 24(sp),sp
    2c0e:	                   rts

00002c10 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2c10:	                                                                               lea -44(sp),sp
    2c14:	                                                                               movem.l d2-d7/a2-a6,-(sp)
    2c18:	                                                                               movea.l 92(sp),a2
    2c1c:	                                                                               move.l 96(sp),80(sp)
    2c22:	                                                                               move.l 100(sp),d4
    2c26:	                                                                               move.l 104(sp),56(sp)
    2c2c:	                                                                               move.l 108(sp),d2
    2c30:	                                                                               move.w d4,d3
    2c32:	                                                                               move.w 58(sp),d6
    2c36:	                                                                               movea.w d2,a6
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2c38:	                                                                               movea.w d6,a5
    2c3a:	                                                                               movea.w d4,a4
    2c3c:	                                                                               move.l a5,-(sp)
    2c3e:	                                                                               move.l a4,-(sp)
    2c40:	                                                                               move.l 1cb82 <zBuffer>,-(sp)
    2c46:	                                                                               move.l a2,-(sp)
    2c48:	                                                                               jsr 1514 <CstDrawZBuffer>
    2c4e:	                                                                               move.l d0,d5

  UWORD *destination = 0;
  switch(destinationtype)
    2c50:	                                                                               lea 16(sp),sp
    2c54:	                                                                               moveq #1,d0
    2c56:	                                                                               cmp.w d2,d0
    2c58:	                                                ,----------------------------- beq.w 306a <CstScaleSprite+0x45a>
    2c5c:	                                                |                              moveq #2,d1
    2c5e:	                                                |                              cmp.w d2,d1
    2c60:	                                                |                       ,----- beq.w 2f24 <CstScaleSprite+0x314>
    2c64:	                                                |                       |      suba.l a3,a3
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2c66:	                                                |  ,--------------------|----> move.l 4(a2),d1
    2c6a:	                                                |  |                    |      move.l a5,d0
    2c6c:	                                                |  |                    |      add.l d1,d0
  if( y < 0) {
    2c6e:	                                                |  |                    |      tst.w d6
    2c70:	                                                |  |           ,--------|----- blt.w 2f40 <CstScaleSprite+0x330>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2c74:	                                                |  |           |  ,-----|----> movea.l 1ca7e <winHeight>,a0
    2c7a:	                                                |  |           |  |     |      cmp.l a0,d0
    2c7c:	                                                |  |  ,--------|--|-----|----- ble.w 3074 <CstScaleSprite+0x464>
    if(y  > (int) winHeight) {
    2c80:	                                                |  |  |        |  |     |      cmpa.l a5,a0
    2c82:	                     ,--------------------------|--|--|--------|--|-----|----- blt.w 3136 <CstScaleSprite+0x526>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    2c86:	                     |                          |  |  |        |  |     |      move.l a5,44(sp)
    ystartsrc = 0;
    blitheight = winHeight-y;
    2c8a:	                     |                          |  |  |        |  |     |      suba.l a5,a0
    2c8c:	                     |                          |  |  |        |  |     |      move.l a0,66(sp)
    ystartsrc = 0;
    2c90:	                     |                          |  |  |        |  |     |      suba.l a1,a1


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2c92:	                     |                          |  |  |  ,-----|--|-----|----> move.l (a2),d1
    2c94:	                     |                          |  |  |  |     |  |     |      move.l a4,d0
    2c96:	                     |                          |  |  |  |     |  |     |      add.l d1,d0
  if( x < 0) 
    2c98:	                     |                          |  |  |  |     |  |     |      tst.w d3
    2c9a:	                     |                          |  |  |  |     |  |  ,--|----- blt.w 2f60 <CstScaleSprite+0x350>
      *CstBackDropBufferApplyCursor++ = blitheight;
      *CstBackDropBufferApplyCursor++ = 0;
      *CstBackDropBufferApplyCursor++ = ystartdst;
      *CstBackDropBufferApplyCursor++ = 0;
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2c9e:	                     |                          |  |  |  |     |  |  |  |  ,-> move.l 1ca7a <winWidth>,d3
    2ca4:	                     |                          |  |  |  |     |  |  |  |  |   cmp.l d3,d0
    2ca6:	                     |                          |  |  |  |  ,--|--|--|--|--|-- ble.w 3082 <CstScaleSprite+0x472>

    if(x - single->width > (int) winWidth)
    2caa:	                     |                          |  |  |  |  |  |  |  |  |  |   suba.l d1,a4
    2cac:	                     |                          |  |  |  |  |  |  |  |  |  |   cmpa.l d3,a4
    2cae:	                     +--------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 3136 <CstScaleSprite+0x526>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2cb2:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d2
    2cb4:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d3,d2
    2cb6:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #4,d2
    2cb8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d2,d6
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2cba:	                     |                          |  |  |  |  |  |  |  |  |  |   lea 17c64 <__mulsi3>,a4
    2cc0:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a1,-(sp)
    2cc2:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    2cc4:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,56(sp)
    2cc8:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2cca:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2ccc:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2cce:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2cd0:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2cd4:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2cd8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 44(sp),-(sp)
    2cdc:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2cde:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2ce0:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2ce2:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2ce4:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2ce6:	                     |                          |  |  |  |  |  |  |  |  |  |   asr.w #4,d7
    2ce8:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a0
    2cea:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a1
    2cec:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a1
    2cee:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a3
    2cf0:	                     |                          |  |  |  |  |  |  |  |  |  |   lea (0,a3,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2cf4:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2cf6:	                     |                          |  |  |  |  |  |  |  |  |  |   and.l d4,d0
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    2cf8:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l #65535,a4
    2cfe:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a4,d7
    2d00:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d0,d7
    2d02:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d7,a4
      CstCleanupQueueDrawBuffer->height = blitheight;
    2d04:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->x = x;
      CstCleanupQueueDrawBuffer->y = y;
      CstCleanupQueueDrawBuffer->person = person; 
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2d0a:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w a0,a0
    2d0c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w a0,66(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2d10:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 46(sp),44(sp)
      *CstBackDropBufferApplyCursor++ = 0;
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2d16:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d2,a3
    2d18:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w d2,a3
    bltcon0 = 0xfca + ((x%16) << 12);
    2d1a:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d7
    2d1c:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d7,d0
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    2d1e:	                     |                          |  |  |  |  |  |  |  |  |  |   addi.w #4042,d0
    2d22:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    2d26:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2d28:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    2d2a:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.w d0,d7
    2d2c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d7,72(sp)
    if( destinationtype == SCREEN)
    2d30:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 48(sp),d1
    2d34:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #1,d7
    2d36:	                     |                          |  |  |  |  |  |  |  |  |  |   cmp.w a6,d7
    2d38:	            ,--------|--------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 344a <CstScaleSprite+0x83a>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2d3c:	            |        |                          |  |  |  |  |  |  |  |  |  |   movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    2d42:	            |        |                          |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    2d44:	   ,--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 34f2 <CstScaleSprite+0x8e2>
    2d48:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    2d4a:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2d4c:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2d4e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2d54:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2d5a:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2d60:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   lea 10(a0),a1
    2d64:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l a1,1ca5e <CstBackDropBufferApplyCursor>
    2d6a:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w 8(a0)
    2d6e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2d74:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2d76:	,--|--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> lsr.l #3,d3
    2d78:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,d4
    2d7a:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d3,d4
    2d7c:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d1
    2d7e:	|  |  ,-----|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3340 <CstScaleSprite+0x730>
    2d82:	|  |  |  ,--|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    2d84:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   sub.w d1,d4
  WaitBlit();
    2d86:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l #117554,d3
    2d8c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2d8e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2d90:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    2d94:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
  custom->bltalwm = bltalwm;
    2d9c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
  custom->bltamod = bltamod;
    2da2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
  custom->bltbmod = bltbmod;
    2da8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3c21>
  custom->bltcmod = bltcmod;
    2dae:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3c1f>
  custom->bltdmod = bltdmod;
    2db4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
  custom->bltcon0 = bltcon0;
    2dba:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
  custom->bltcon1 = bltcon1;  
    2dc2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2dca:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2dcc:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),d7
    2dd0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    2dd2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d1
    2dd4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #3,d1
    2dd6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d1
    bltbpt += bltbptplus;
    2dda:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d1
    2de0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    2de2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 1ca7a <winWidth>,d4
    2de8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d4
    2dea:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 1ca80 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    2df0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    2df6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    2dfc:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    2e04:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    2e0a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e10:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e12:	|  |  |  |  |  ,-----|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 323e <CstScaleSprite+0x62e>
    2e16:	|  |  |  |  |  |  ,--|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e18:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e1a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2e1c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2e1e:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    2e24:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a4
    2e28:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2e2a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltdpt += bltcptplus;
    WaitBlit();
    2e2c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2e2e:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2e30:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e34:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e36:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    2e3c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    2e42:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    2e48:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e4e:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e50:	|  |  |  |  |  |  |  |                 ,--------|--|--|--|--|--|--|--|--|--|-- blt.w 3280 <CstScaleSprite+0x670>
    2e54:	|  |  |  |  |  |  |  |                 |     ,--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e56:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e58:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2e5a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2e5c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    2e62:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2e64:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    2e66:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2e68:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2e6a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e6e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e70:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    2e76:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    2e7c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    2e82:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e88:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e8a:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--|--|--|--|--|--|--|--|-- blt.w 32be <CstScaleSprite+0x6ae>
    2e8e:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e90:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e92:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2e94:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2e96:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    2e9c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2e9e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    2ea0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2ea2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2ea4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ea8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2eaa:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    2eb0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    2eb6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    2ebc:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ec2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2ec4:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 32fc <CstScaleSprite+0x6ec>
    2ec8:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2eca:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2ecc:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2ece:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2ed0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    2ed6:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    2eda:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    WaitBlit();
    2edc:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2ede:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2ee0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ee4:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2ee6:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    2eec:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    2ef2:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    2ef8:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2efe:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2f00:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 321a <CstScaleSprite+0x60a>
    2f04:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2f06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2f08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d2
    2f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d2
    2f0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    WaitBlit();
    2f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2f16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    2f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    2f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 44(sp),sp
    2f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   rts
      CstApplyBackDropCounter = 2;
    2f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-> move.w #2,1ca48 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   movea.l 1ca3c <CstBackDrop>,a3
    if(y + single->height < 0) {
    2f32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l 4(a2),d1
    2f36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l a5,d0
    2f38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   add.l d1,d0
  if( y < 0) {
    2f3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   tst.w d6
    2f3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----|-- bge.w 2c74 <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    2f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-----|-----|-> tst.l d0
    2f42:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|-----|-- blt.w 3136 <CstScaleSprite+0x526>
    ystartsrc = y*-1;
    2f46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a5,d7
    2f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   neg.l d7
    2f4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   movea.l d7,a1
    blitheight = single->height+y;
    2f4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d0,66(sp)
    ystartdst = 0;
    2f50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   clr.l 44(sp)
    if(x + single->width < 0) {
    2f54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l (a2),d1
    2f56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a4,d0
    2f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   add.l d1,d0
  if( x < 0) 
    2f5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   tst.w d3
    2f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     '-- bge.w 2c9e <CstScaleSprite+0x8e>
    if(x + single->width < 0) {
    2f60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '-------> tst.l d0
    2f62:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- blt.w 3136 <CstScaleSprite+0x526>
    cutwordssource = (x*-1)/16; 
    2f66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,d0
    2f68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addi.w #15,d0
    2f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.w #4,d0
    2f6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.w d0
    2f70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,78(sp)
    2f74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,d6
    cutmaskpixel = (x*-1)%16;   
    2f76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a4,d0
    2f78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.l d0
    2f7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d2
    2f7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  and.l d0,d2
    2f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d2,84(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1ca7a <winWidth>,d3
    2f88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 17c64 <__mulsi3>,a4
    2f8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d3,-(sp)
    2f90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),-(sp)
    2f94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d1,56(sp)
    2f98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a1,60(sp)
    2f9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr (a4)
    2f9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addq.l #8,sp
    2fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    2fa2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),d1
    2fa6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l 52(sp),a1
    2faa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d2
    2fac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.w 314c <CstScaleSprite+0x53c>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lea (-2,a3,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2fb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a0
    2fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         subq.w #1,a0
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2fba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #16,d7
    2fbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         sub.l d2,d7
    2fbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d7,d2
    2fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d0
    2fc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    2fc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addi.w #4042,d2
    2fc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,70(sp)
  custom->bltcon1 = bltcon1;  
    2fcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d2
    2fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.w d2,d7
    2fd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d7,72(sp)
      extrawords = 1;
    2fd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a3
    2fda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a3,a3
    2fdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a1,-(sp)
    2fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,-(sp)
    2fe0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,56(sp)
    2fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a0,60(sp)
    2fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         jsr (a4)
    2fea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addq.l #8,sp
    2fec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsr.l #3,d0
    2fee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d5
    2ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2ff2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l 24(a2),a3
    2ff6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d0
    2ff8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    2ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3002:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3006:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #0,d0
    3008:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         not.w d0
    300a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 84(sp),d7
    300e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         asr.l d7,d0
    3010:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3014:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.l 52(sp),a0
    3018:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w a0,a3
    301a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.w a0,a3
    if( destinationtype == SCREEN)
    301c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 48(sp),d1
    3020:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d0
    3022:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.w a6,d0
    3024:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  ,----- beq.w 31b2 <CstScaleSprite+0x5a2>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    3028:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,-> movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    302e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l d1,d0
    3030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   asr.l #4,d0
    3032:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w 78(sp),d0
    3036:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d2,d0
    3038:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    303a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 68(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3040:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 46(sp),6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    304a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lea 10(a0),a1
    304e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l a1,1ca5e <CstBackDropBufferApplyCursor>
    3054:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 8(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    3058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    305a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lsr.l #3,d3
    305c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w a3,d4
    305e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d3,d4
    3060:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   tst.l d1
    3062:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bge.w 2d82 <CstScaleSprite+0x172>
    3066:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bra.w 3340 <CstScaleSprite+0x730>
      destination = (UWORD *) CstDrawBuffer;      
    306a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--------|--|--|-> movea.l 1ca4e <CstDrawBuffer>,a3
      break;
    3070:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--------|--|--|-- bra.w 2c66 <CstScaleSprite+0x56>
    ystartdst = y;
    3074:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--------|--|--|-> move.l a5,44(sp)
    blitheight = single->height;
    3078:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   move.l d1,66(sp)
    ystartsrc = 0;
    307c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   suba.l a1,a1
    307e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--------|--|--|-- bra.w 2c92 <CstScaleSprite+0x82>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3082:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--------|--|--|-> lea 17c64 <__mulsi3>,a4
    3088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a1,-(sp)
    308a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,-(sp)
    308c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,56(sp)
    3090:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    3092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    3094:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    3096:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l 24(a2),d0
    309c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    30a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 44(sp),-(sp)
    30a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d3,-(sp)
    30a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    30a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    30aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    30ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d6
    30ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   asr.w #4,d6
    30b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w d6,a0
    30b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a0
    30b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a3
    30b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lea (0,a3,d0.l),a5
      CstCleanupQueueDrawBuffer->height = blitheight;
    30ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    30c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.w d6,d6
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    30c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w 46(sp),a3
    bltcon0 = 0xfca + ((x%16) << 12);
    30c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    30c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #12,d7
    30ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
  custom->bltcon0 = bltcon0;
    30cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addi.w #4042,d0
    30d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    30d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    30d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
    30d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,72(sp)
    if( destinationtype == SCREEN)
    30dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 48(sp),d1
    30e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #1,d7
    30e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   cmp.w a6,d7
    30e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    ,--|--|--|-- beq.w 33da <CstScaleSprite+0x7ca>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    30e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    30ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   move.l d1,d0
    30f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,--------|--|--|--|-- bmi.w 34b8 <CstScaleSprite+0x8a8>
    30f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   asr.l #4,d0
    30f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   addq.w #1,d0
    30f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    30fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3100:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3104:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3108:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   lea 10(a0),a1
    310c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l a1,1ca5e <CstBackDropBufferApplyCursor>
    3112:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 8(a0)
    3116:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w #-1,76(sp)
    311c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    3120:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    3122:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w d6
    extrawords = 1;
    3124:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #1,d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3126:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|--------|--|--|--|-> lsr.l #3,d3
    3128:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   move.w a3,d4
    312a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   add.w d3,d4
    312c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   tst.l d1
    312e:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bge.w 2d82 <CstScaleSprite+0x172>
    3132:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bra.w 3340 <CstScaleSprite+0x730>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    3136:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-> move.l #98541,92(sp)
}
    313e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3142:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   lea 44(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    3146:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   jmp 172d8 <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    314c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  '--|--|-> lea (0,a3,d0.l),a5
    3150:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a0
    3154:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w 72(sp)
    3158:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w #4042,70(sp)
      extrawords = 0;
    315e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3160:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a3
    3164:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a3,a3
    3166:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a1,-(sp)
    3168:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,-(sp)
    316a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,56(sp)
    316e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a0,60(sp)
    3172:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   jsr (a4)
    3174:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   addq.l #8,sp
    3176:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   lsr.l #3,d0
    3178:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d5
    317a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    317c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l 24(a2),a3
    3180:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d0
    3182:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3186:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    318c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3190:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #0,d0
    3192:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   not.w d0
    3194:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 84(sp),d7
    3198:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   asr.l d7,d0
    319a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    319e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.l 52(sp),a0
    31a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w a0,a3
    31a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.w a0,a3
    if( destinationtype == SCREEN)
    31a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 48(sp),d1
    31aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #1,d0
    31ac:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   cmp.w a6,d0
    31ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  '-- bne.w 3028 <CstScaleSprite+0x418>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    31b2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     '----> move.l 1ca56 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    31b8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l 1cb26 <SysBase>,a6
    31be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #20,d0
    31c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #0,d1
    31c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            jsr -684(a6)
    31c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l d0,a0
    31c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d0,1ca56 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    31ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    31d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    31d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    31da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    31e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l (a2),d1
    31e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d1,d0
    31e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     ,--|----------- bmi.w 3528 <CstScaleSprite+0x918>
    31e8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            asr.l #4,d0
    31ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w 78(sp),d0
    31ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w d2,d0
    31f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    31f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    31fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    31fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3202:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.l 1ca7a <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    3208:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    320a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  ,--|--|----------> lsr.l #3,d3
    320c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w a3,d4
    320e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d3,d4
    3210:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d1
    3212:	|  |  |  +--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bge.w 2d82 <CstScaleSprite+0x172>
    3216:	|  |  +--|--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bra.w 3340 <CstScaleSprite+0x730>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    321a:	|  |  |  |  |  |  |     >--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    321c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    321e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    3220:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d0,d2
    3222:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d2
    3224:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d2
    3226:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    WaitBlit();
    322c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    322e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    3230:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
}
    3234:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movem.l (sp)+,d2-d7/a2-a6
    3238:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            lea 44(sp),sp
    323c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            rts
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    323e:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    3240:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    3242:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    3244:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d2,d0
    3246:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d0
    3248:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d0
    324a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    3250:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 62(sp),a4
    3254:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    3256:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    3258:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    325a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    325c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3260:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3262:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    3268:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    326e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    3274:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    327a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d0
    327c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--------|--|--|--|--|----------- bge.w 2e54 <CstScaleSprite+0x244>
    3280:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|----------> moveq #15,d1
    3282:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d1,d0
    3284:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            asr.l #4,d0
    3286:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d2,d0
    3288:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d7,d0
    328a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            sub.w d6,d0
    328c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    3292:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    3294:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    3296:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l d3,a0
    3298:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l (a0),a6
    329a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    329e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    32a0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    32a6:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    32ac:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    32b2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32b8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            tst.l d0
    32ba:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|----------- bge.w 2e8e <CstScaleSprite+0x27e>
    32be:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|----------> moveq #15,d1
    32c0:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d1,d0
    32c2:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            asr.l #4,d0
    32c4:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d2,d0
    32c6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d7,d0
    32c8:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            sub.w d6,d0
    32ca:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    32d0:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    32d2:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    32d4:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l d3,a0
    32d6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l (a0),a6
    32d8:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32dc:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    32de:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    32e4:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    32ea:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    32f0:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32f6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            tst.l d0
    32f8:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|----------- bge.w 2ec8 <CstScaleSprite+0x2b8>
    32fc:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|----------> moveq #15,d1
    32fe:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d1,d0
    3300:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            asr.l #4,d0
    3302:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d2,d0
    3304:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d7,d0
    3306:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            sub.w d6,d0
    3308:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3c17>
    bltbpt += bltbptplus;
    330e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    3312:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l a5,d4
    WaitBlit();
    3314:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l d3,a0
    3316:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l (a0),a6
    3318:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    331c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    331e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    3324:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    332a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    3330:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3336:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            tst.l d0
    3338:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|----------- bge.w 2f04 <CstScaleSprite+0x2f4>
    333c:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|----------- bra.w 321a <CstScaleSprite+0x60a>
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3340:	|  |  >--|--|--|--|-----------------------------------|--|--|--|--|----------> addq.l #7,d1
    3342:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    3344:	|  |  |  |  |  |  |                                   |  |  |  |  |            sub.w d1,d4
  WaitBlit();
    3346:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l #117554,d3
    334c:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d3,a0
    334e:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l (a0),a6
    3350:	|  |  |  |  |  |  |                                   |  |  |  |  |            jsr -228(a6)
  custom->bltafwm = bltafwm;
    3354:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb3c03>
  custom->bltalwm = bltalwm;
    335c:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3c05>
  custom->bltamod = bltamod;
    3362:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3c23>
  custom->bltbmod = bltbmod;
    3368:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3c21>
  custom->bltcmod = bltcmod;
    336e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3c1f>
  custom->bltdmod = bltdmod;
    3374:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3c25>
  custom->bltcon0 = bltcon0;
    337a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb3bff>
  custom->bltcon1 = bltcon1;  
    3382:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb3c01>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    338a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    338c:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 60(sp),d7
    3390:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3392:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d0,d1
    3394:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    3396:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 6(a2),d1
    bltbpt += bltbptplus;
    339a:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d1
    33a0:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    33a2:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 1ca7a <winWidth>,d4
    33a8:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsr.l #3,d4
    33aa:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 1ca80 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    33b0:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    33b6:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3c0f>
    custom->bltbpt = (APTR) bltbpt;
    33bc:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb3c0b>
    custom->bltcpt = (APTR) bltcpt;
    33c4:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3c07>
    custom->bltdpt = (APTR) bltdpt;
    33ca:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3c13>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33d0:	|  |  |  |  |  |  |                                   |  |  |  |  |            tst.l d0
    33d2:	|  |  |  |  |  |  '-----------------------------------|--|--|--|--|----------- bge.w 2e16 <CstScaleSprite+0x206>
    33d6:	|  |  |  |  |  '--------------------------------------|--|--|--|--|----------- bra.w 323e <CstScaleSprite+0x62e>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    33da:	|  |  |  |  |                                         |  |  |  |  '----------> move.l 1ca56 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    33e0:	|  |  |  |  |                                         |  |  |  |               movea.l 1cb26 <SysBase>,a6
    33e6:	|  |  |  |  |                                         |  |  |  |               moveq #20,d0
    33e8:	|  |  |  |  |                                         |  |  |  |               moveq #0,d1
    33ea:	|  |  |  |  |                                         |  |  |  |               jsr -684(a6)
    33ee:	|  |  |  |  |                                         |  |  |  |               movea.l d0,a0
    33f0:	|  |  |  |  |                                         |  |  |  |               move.l d0,1ca56 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    33f6:	|  |  |  |  |                                         |  |  |  |               move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    33fa:	|  |  |  |  |                                         |  |  |  |               move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    33fc:	|  |  |  |  |                                         |  |  |  |               move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3402:	|  |  |  |  |                                         |  |  |  |               move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3408:	|  |  |  |  |                                         |  |  |  |               move.l (a2),d1
    340a:	|  |  |  |  |                                         |  |  |  |               move.l d1,d0
    340c:	|  |  |  |  |                                         |  |  |  |     ,-------- bmi.w 3552 <CstScaleSprite+0x942>
    3410:	|  |  |  |  |                                         |  |  |  |     |         asr.l #4,d0
    3412:	|  |  |  |  |                                         |  |  |  |     |         addq.w #1,d0
    3414:	|  |  |  |  |                                         |  |  |  |     |         move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3418:	|  |  |  |  |                                         |  |  |  |     |         move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    341e:	|  |  |  |  |                                         |  |  |  |     |         move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3422:	|  |  |  |  |                                         |  |  |  |     |         move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3426:	|  |  |  |  |                                         |  |  |  |     |         move.l 1ca7a <winWidth>,d3
    342c:	|  |  |  |  |                                         |  |  |  |     |         move.w #-1,76(sp)
    3432:	|  |  |  |  |                                         |  |  |  |     |         movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    3436:	|  |  |  |  |                                         |  |  |  |     |         suba.l a4,a4
    cutwordssource = 0;
    3438:	|  |  |  |  |                                         |  |  |  |     |         clr.w d6
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    343a:	|  |  |  |  |                                         |  |  |  |  ,--|-------> lsr.l #3,d3
    343c:	|  |  |  |  |                                         |  |  |  |  |  |         move.w a3,d4
    343e:	|  |  |  |  |                                         |  |  |  |  |  |         add.w d3,d4
    3440:	|  |  |  |  |                                         |  |  |  |  |  |         tst.l d1
    3442:	|  |  |  +--|-----------------------------------------|--|--|--|--|--|-------- bge.w 2d82 <CstScaleSprite+0x172>
    3446:	|  |  +--|--|-----------------------------------------|--|--|--|--|--|-------- bra.w 3340 <CstScaleSprite+0x730>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    344a:	|  |  |  |  '-----------------------------------------|--|--|--|--|--|-------> move.l 1ca56 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3450:	|  |  |  |                                            |  |  |  |  |  |         movea.l 1cb26 <SysBase>,a6
    3456:	|  |  |  |                                            |  |  |  |  |  |         moveq #20,d0
    3458:	|  |  |  |                                            |  |  |  |  |  |         moveq #0,d1
    345a:	|  |  |  |                                            |  |  |  |  |  |         jsr -684(a6)
    345e:	|  |  |  |                                            |  |  |  |  |  |         movea.l d0,a0
    3460:	|  |  |  |                                            |  |  |  |  |  |         move.l d0,1ca56 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3466:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    346a:	|  |  |  |                                            |  |  |  |  |  |         move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    346c:	|  |  |  |                                            |  |  |  |  |  |         move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3472:	|  |  |  |                                            |  |  |  |  |  |         move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3478:	|  |  |  |                                            |  |  |  |  |  |         move.l (a2),d1
    347a:	|  |  |  |                                            |  |  |  |  |  |         move.l d1,d0
    347c:	|  |  |  |                                            |  |  |  |  |  |     ,-- bmi.w 3584 <CstScaleSprite+0x974>
    3480:	|  |  |  |                                            |  |  |  |  |  |     |   asr.l #4,d0
    3482:	|  |  |  |                                            |  |  |  |  |  |     |   add.w d0,d2
    3484:	|  |  |  |                                            |  |  |  |  |  |     |   move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3488:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    348e:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3494:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    349a:	|  |  |  |                                            |  |  |  |  |  |     |   move.l 1ca7a <winWidth>,d3
    34a0:	|  |  |  |                                            |  |  |  |  |  |     |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    34a6:	|  |  |  |                                            |  |  |  |  |  |     |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    34a8:	|  |  |  |                                            |  |  |  |  |  |  ,--|-> lsr.l #3,d3
    34aa:	|  |  |  |                                            |  |  |  |  |  |  |  |   move.w a3,d4
    34ac:	|  |  |  |                                            |  |  |  |  |  |  |  |   add.w d3,d4
    34ae:	|  |  |  |                                            |  |  |  |  |  |  |  |   tst.l d1
    34b0:	|  |  |  '--------------------------------------------|--|--|--|--|--|--|--|-- bge.w 2d82 <CstScaleSprite+0x172>
    34b4:	|  |  '-----------------------------------------------|--|--|--|--|--|--|--|-- bra.w 3340 <CstScaleSprite+0x730>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    34b8:	|  |                                                  |  '--|--|--|--|--|--|-> moveq #15,d0
    34ba:	|  |                                                  |     |  |  |  |  |  |   add.l d1,d0
    34bc:	|  |                                                  |     |  |  |  |  |  |   asr.l #4,d0
    34be:	|  |                                                  |     |  |  |  |  |  |   addq.w #1,d0
    34c0:	|  |                                                  |     |  |  |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    34c2:	|  |                                                  |     |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    34c8:	|  |                                                  |     |  |  |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    34cc:	|  |                                                  |     |  |  |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    34d0:	|  |                                                  |     |  |  |  |  |  |   lea 10(a0),a1
    34d4:	|  |                                                  |     |  |  |  |  |  |   move.l a1,1ca5e <CstBackDropBufferApplyCursor>
    34da:	|  |                                                  |     |  |  |  |  |  |   clr.w 8(a0)
    34de:	|  |                                                  |     |  |  |  |  |  |   move.w #-1,76(sp)
    34e4:	|  |                                                  |     |  |  |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    34e8:	|  |                                                  |     |  |  |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    34ea:	|  |                                                  |     |  |  |  |  |  |   clr.w d6
    extrawords = 1;
    34ec:	|  |                                                  |     |  |  |  |  |  |   moveq #1,d2
    34ee:	|  |                                                  '-----|--|--|--|--|--|-- bra.w 3126 <CstScaleSprite+0x516>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    34f2:	|  '--------------------------------------------------------|--|--|--|--|--|-> moveq #15,d0
    34f4:	|                                                           |  |  |  |  |  |   add.l d1,d0
    34f6:	|                                                           |  |  |  |  |  |   asr.l #4,d0
    34f8:	|                                                           |  |  |  |  |  |   add.w d0,d2
    34fa:	|                                                           |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    34fc:	|                                                           |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3502:	|                                                           |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3508:	|                                                           |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    350e:	|                                                           |  |  |  |  |  |   lea 10(a0),a1
    3512:	|                                                           |  |  |  |  |  |   move.l a1,1ca5e <CstBackDropBufferApplyCursor>
    3518:	|                                                           |  |  |  |  |  |   clr.w 8(a0)
    351c:	|                                                           |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3522:	|                                                           |  |  |  |  |  |   clr.w d2
    3524:	'-----------------------------------------------------------|--|--|--|--|--|-- bra.w 2d76 <CstScaleSprite+0x166>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3528:	                                                            |  '--|--|--|--|-> moveq #15,d0
    352a:	                                                            |     |  |  |  |   add.l d1,d0
    352c:	                                                            |     |  |  |  |   asr.l #4,d0
    352e:	                                                            |     |  |  |  |   add.w 78(sp),d0
    3532:	                                                            |     |  |  |  |   add.w d2,d0
    3534:	                                                            |     |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3538:	                                                            |     |  |  |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    353e:	                                                            |     |  |  |  |   clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3542:	                                                            |     |  |  |  |   move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3546:	                                                            |     |  |  |  |   move.l 1ca7a <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    354c:	                                                            |     |  |  |  |   suba.l a4,a4
    354e:	                                                            '-----|--|--|--|-- bra.w 320a <CstScaleSprite+0x5fa>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3552:	                                                                  |  '--|--|-> moveq #15,d0
    3554:	                                                                  |     |  |   add.l d1,d0
    3556:	                                                                  |     |  |   asr.l #4,d0
    3558:	                                                                  |     |  |   addq.w #1,d0
    355a:	                                                                  |     |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    355e:	                                                                  |     |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3564:	                                                                  |     |  |   move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3568:	                                                                  |     |  |   move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    356c:	                                                                  |     |  |   move.l 1ca7a <winWidth>,d3
    3572:	                                                                  |     |  |   move.w #-1,76(sp)
    3578:	                                                                  |     |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    357c:	                                                                  |     |  |   suba.l a4,a4
    cutwordssource = 0;
    357e:	                                                                  |     |  |   clr.w d6
    3580:	                                                                  '-----|--|-- bra.w 343a <CstScaleSprite+0x82a>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3584:	                                                                        |  '-> moveq #15,d0
    3586:	                                                                        |      add.l d1,d0
    3588:	                                                                        |      asr.l #4,d0
    358a:	                                                                        |      add.w d0,d2
    358c:	                                                                        |      move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3590:	                                                                        |      move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3596:	                                                                        |      move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    359c:	                                                                        |      move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    35a2:	                                                                        |      move.l 1ca7a <winWidth>,d3
    35a8:	                                                                        |      move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    35ae:	                                                                        |      clr.w d2
    35b0:	                                                                        '----- bra.w 34a8 <CstScaleSprite+0x898>

000035b4 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    35b4:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    35b6:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    35bc:	move.l 8(sp),d0
    35c0:	movea.l (sp),a0
    35c2:	move.l d0,128(a0)
}
    35c6:	nop
    35c8:	addq.l #4,sp
    35ca:	rts

000035cc <CstSwapBuffer>:

void CstSwapBuffer( ) {
    35cc:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    35d0:	move.l 1ca4a <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    35d8:	move.l 1ca4e <CstDrawBuffer>,d0
    35de:	move.l d0,1ca4a <CstViewBuffer>
  CstDrawBuffer = tmp;
    35e4:	move.l 16(sp),1ca4e <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    35ec:	move.l 1ca52 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    35f4:	move.l 1ca56 <CstCleanupQueueDrawBuffer>,d0
    35fa:	move.l d0,1ca52 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3600:	move.l 12(sp),1ca56 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3608:	move.l 1ca44 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3610:	move.l 1ca4a <CstViewBuffer>,d0
    3616:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    361a:	move.l 4(sp),d0
    361e:	clr.w d0
    3620:	swap d0
    3622:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    3626:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    362a:	movea.w #118,a0
    362e:	adda.l 8(sp),a0
    3632:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3634:	movea.w #114,a0
    3638:	adda.l 8(sp),a0
    363c:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3640:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3648:	move.l 4(sp),d0
    364c:	clr.w d0
    364e:	swap d0
    3650:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3654:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    3658:	movea.w #126,a0
    365c:	adda.l 8(sp),a0
    3660:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3662:	movea.w #122,a0
    3666:	adda.l 8(sp),a0
    366a:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    366e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3676:	move.l 4(sp),d0
    367a:	clr.w d0
    367c:	swap d0
    367e:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3682:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3686:	movea.l 8(sp),a0
    368a:	lea 134(a0),a0
    368e:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3690:	movea.l 8(sp),a0
    3694:	lea 130(a0),a0
    3698:	move.w 2(sp),(a0)

  ptr +=  40*256;
    369c:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    36a4:	move.l 4(sp),d0
    36a8:	clr.w d0
    36aa:	swap d0
    36ac:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    36b0:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    36b4:	movea.l 8(sp),a0
    36b8:	lea 142(a0),a0
    36bc:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    36be:	movea.l 8(sp),a0
    36c2:	lea 138(a0),a0
    36c6:	move.w 2(sp),(a0)

  ptr +=  40*256;
    36ca:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    36d2:	move.l 4(sp),d0
    36d6:	clr.w d0
    36d8:	swap d0
    36da:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    36de:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    36e2:	movea.l 8(sp),a0
    36e6:	lea 150(a0),a0
    36ea:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    36ec:	movea.l 8(sp),a0
    36f0:	lea 146(a0),a0
    36f4:	move.w 2(sp),(a0)

}
    36f8:	nop
    36fa:	lea 20(sp),sp
    36fe:	rts

00003700 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3700:	          lea -80(sp),sp
    3704:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3706:	          pea 18120 <PutChar+0x3a6>
    370c:	          jsr 172d8 <KPrintF>
    3712:	          addq.l #4,sp

  width = width / 8;
    3714:	          move.l 88(sp),d0
    3718:	      ,-- bpl.s 371c <CstReserveBackdrop+0x1c>
    371a:	      |   addq.l #7,d0
    371c:	      '-> asr.l #3,d0
    371e:	          move.l d0,88(sp)

  if( width < 40) 
    3722:	          moveq #39,d0
    3724:	          cmp.l 88(sp),d0
    3728:	      ,-- blt.s 373e <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    372a:	      |   pea 1813a <PutChar+0x3c0>
    3730:	      |   jsr 172d8 <KPrintF>
    3736:	      |   addq.l #4,sp
    return FALSE;
    3738:	      |   clr.w d0
    373a:	,-----|-- bra.w 3ae0 <CstReserveBackdrop+0x3e0>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    373e:	|     '-> pea 18178 <PutChar+0x3fe>
    3744:	|         jsr 172d8 <KPrintF>
    374a:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    374c:	|         move.l 88(sp),-(sp)
    3750:	|         jsr ffa <CstCreateCopperlist>
    3756:	|         addq.l #4,sp
    3758:	|         move.l d0,1ca44 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    375e:	|         pea 18198 <PutChar+0x41e>
    3764:	|         jsr 172d8 <KPrintF>
    376a:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    376c:	|         move.l 88(sp),d1
    3770:	|         move.l 92(sp),d0
    3774:	|         muls.w d1,d0
    3776:	|         move.w d0,1ca3a <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    377c:	|         move.w 1ca3a <CstBackdropSizePlane>,d1
    3782:	|         move.w d1,d0
    3784:	|         add.w d0,d0
    3786:	|         add.w d0,d0
    3788:	|         add.w d1,d0
    378a:	|         move.w d0,1ca38 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3790:	|         move.w 1ca38 <CstBackdropSize>,d0
    3796:	|         move.w d0,d0
    3798:	|         andi.l #65535,d0
    379e:	|         move.l d0,72(sp)
    37a2:	|         moveq #2,d1
    37a4:	|         move.l d1,68(sp)
    37a8:	|         move.l 1cb26 <SysBase>,d0
    37ae:	|         movea.l d0,a6
    37b0:	|         move.l 72(sp),d0
    37b4:	|         move.l 68(sp),d1
    37b8:	|         jsr -684(a6)
    37bc:	|         move.l d0,64(sp)
    37c0:	|         move.l 64(sp),d0
    37c4:	|         move.l d0,1ca3c <CstBackDrop>
  if( !CstBackDrop)
    37ca:	|         move.l 1ca3c <CstBackDrop>,d0
    37d0:	|     ,-- bne.s 37e6 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    37d2:	|     |   pea 181bf <PutChar+0x445>
    37d8:	|     |   jsr 172d8 <KPrintF>
    37de:	|     |   addq.l #4,sp
    return FALSE;  
    37e0:	|     |   clr.w d0
    37e2:	+-----|-- bra.w 3ae0 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    37e6:	|     '-> pea 181f7 <PutChar+0x47d>
    37ec:	|         jsr 172d8 <KPrintF>
    37f2:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    37f4:	|         move.l 1ca3c <CstBackDrop>,80(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    37fc:	|         clr.l 76(sp)
    3800:	|     ,-- bra.s 3816 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3802:	|  ,--|-> move.l 80(sp),d0
    3806:	|  |  |   move.l d0,d1
    3808:	|  |  |   addq.l #4,d1
    380a:	|  |  |   move.l d1,80(sp)
    380e:	|  |  |   movea.l d0,a0
    3810:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3812:	|  |  |   addq.l #1,76(sp)
    3816:	|  |  '-> move.w 1ca38 <CstBackdropSize>,d0
    381c:	|  |      lsr.w #2,d0
    381e:	|  |      move.w d0,d0
    3820:	|  |      andi.l #65535,d0
    3826:	|  |      cmp.l 76(sp),d0
    382a:	|  '----- bgt.s 3802 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    382c:	|         move.w 1ca38 <CstBackdropSize>,d0
    3832:	|         move.w d0,d0
    3834:	|         andi.l #65535,d0
    383a:	|         move.l 88(sp),d1
    383e:	|         add.l d1,d1
    3840:	|         add.l d1,d0
    3842:	|         move.l d0,60(sp)
    3846:	|         moveq #2,d0
    3848:	|         move.l d0,56(sp)
    384c:	|         move.l 1cb26 <SysBase>,d0
    3852:	|         movea.l d0,a6
    3854:	|         move.l 60(sp),d0
    3858:	|         move.l 56(sp),d1
    385c:	|         jsr -684(a6)
    3860:	|         move.l d0,52(sp)
    3864:	|         move.l 52(sp),d0
    3868:	|         move.l d0,1ca4e <CstDrawBuffer>
  if( !CstDrawBuffer)
    386e:	|         move.l 1ca4e <CstDrawBuffer>,d0
    3874:	|     ,-- bne.s 388a <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3876:	|     |   pea 1821d <PutChar+0x4a3>
    387c:	|     |   jsr 172d8 <KPrintF>
    3882:	|     |   addq.l #4,sp
    return FALSE;  
    3884:	|     |   clr.w d0
    3886:	+-----|-- bra.w 3ae0 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    388a:	|     '-> pea 18257 <PutChar+0x4dd>
    3890:	|         jsr 172d8 <KPrintF>
    3896:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3898:	|         move.l #10000,48(sp)
    38a0:	|         clr.l 44(sp)
    38a4:	|         move.l 1cb26 <SysBase>,d0
    38aa:	|         movea.l d0,a6
    38ac:	|         move.l 48(sp),d0
    38b0:	|         move.l 44(sp),d1
    38b4:	|         jsr -684(a6)
    38b8:	|         move.l d0,40(sp)
    38bc:	|         move.l 40(sp),d0
    38c0:	|         move.l d0,1ca5a <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    38c6:	|         move.l 1ca5a <CstBackDropBufferApplyStart>,d0
    38cc:	|     ,-- bne.s 38e2 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    38ce:	|     |   pea 1827f <PutChar+0x505>
    38d4:	|     |   jsr 172d8 <KPrintF>
    38da:	|     |   addq.l #4,sp
    return FALSE;  
    38dc:	|     |   clr.w d0
    38de:	+-----|-- bra.w 3ae0 <CstReserveBackdrop+0x3e0>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    38e2:	|     '-> move.l 1ca5a <CstBackDropBufferApplyStart>,d0
    38e8:	|         move.l d0,1ca5e <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    38ee:	|         movea.l 1ca5a <CstBackDropBufferApplyStart>,a0
    38f4:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    38f6:	|         movea.l 1ca5a <CstBackDropBufferApplyStart>,a0
    38fc:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    38fe:	|         move.w 1ca38 <CstBackdropSize>,d0
    3904:	|         move.w d0,d0
    3906:	|         andi.l #65535,d0
    390c:	|         move.l 88(sp),d1
    3910:	|         add.l d1,d1
    3912:	|         add.l d1,d0
    3914:	|         move.l d0,36(sp)
    3918:	|         moveq #2,d1
    391a:	|         move.l d1,32(sp)
    391e:	|         move.l 1cb26 <SysBase>,d0
    3924:	|         movea.l d0,a6
    3926:	|         move.l 36(sp),d0
    392a:	|         move.l 32(sp),d1
    392e:	|         jsr -684(a6)
    3932:	|         move.l d0,28(sp)
    3936:	|         move.l 28(sp),d0
    393a:	|         move.l d0,1ca4a <CstViewBuffer>
  if( !CstViewBuffer)
    3940:	|         move.l 1ca4a <CstViewBuffer>,d0
    3946:	|     ,-- bne.s 395c <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3948:	|     |   pea 182ca <PutChar+0x550>
    394e:	|     |   jsr 172d8 <KPrintF>
    3954:	|     |   addq.l #4,sp
    return FALSE;  
    3956:	|     |   clr.w d0
    3958:	+-----|-- bra.w 3ae0 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    395c:	|     '-> pea 18304 <PutChar+0x58a>
    3962:	|         jsr 172d8 <KPrintF>
    3968:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    396a:	|         move.l 1ca4e <CstDrawBuffer>,d1
    3970:	|         move.l 88(sp),d0
    3974:	|     ,-- bpl.s 3978 <CstReserveBackdrop+0x278>
    3976:	|     |   addq.l #3,d0
    3978:	|     '-> asr.l #2,d0
    397a:	|         add.l d0,d0
    397c:	|         add.l d0,d0
    397e:	|         add.l d1,d0
    3980:	|         move.l d0,1ca4e <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3986:	|         move.l 1ca4a <CstViewBuffer>,d1
    398c:	|         move.l 88(sp),d0
    3990:	|     ,-- bpl.s 3994 <CstReserveBackdrop+0x294>
    3992:	|     |   addq.l #3,d0
    3994:	|     '-> asr.l #2,d0
    3996:	|         add.l d0,d0
    3998:	|         add.l d0,d0
    399a:	|         add.l d1,d0
    399c:	|         move.l d0,1ca4a <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    39a2:	|         move.l #5200,24(sp)
    39aa:	|         moveq #2,d0
    39ac:	|         move.l d0,20(sp)
    39b0:	|         move.l 1cb26 <SysBase>,d0
    39b6:	|         movea.l d0,a6
    39b8:	|         move.l 24(sp),d0
    39bc:	|         move.l 20(sp),d1
    39c0:	|         jsr -684(a6)
    39c4:	|         move.l d0,16(sp)
    39c8:	|         move.l 16(sp),d0
    39cc:	|         move.l d0,1ca6e <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    39d2:	|         move.l #5600,12(sp)
    39da:	|         moveq #2,d1
    39dc:	|         move.l d1,8(sp)
    39e0:	|         move.l 1cb26 <SysBase>,d0
    39e6:	|         movea.l d0,a6
    39e8:	|         move.l 12(sp),d0
    39ec:	|         move.l 8(sp),d1
    39f0:	|         jsr -684(a6)
    39f4:	|         move.l d0,4(sp)
    39f8:	|         move.l 4(sp),d0
    39fc:	|         move.l d0,1ca72 <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3a02:	|         move.l 1ca3c <CstBackDrop>,d0
    3a08:	|         clr.l -(sp)
    3a0a:	|         pea 5 <_start+0x5>
    3a0e:	|         pea 100 <copyString+0x48>
    3a12:	|         pea 140 <decodeFilename+0x28>
    3a16:	|         pea 1832c <PutChar+0x5b2>
    3a1c:	|         move.l d0,-(sp)
    3a1e:	|         jsr 173c0 <debug_register_bitmap>
    3a24:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3a28:	|         move.l 92(sp),d0
    3a2c:	|         movea.w d0,a1
    3a2e:	|         move.l 88(sp),d0
    3a32:	|         lsl.w #3,d0
    3a34:	|         movea.w d0,a0
    3a36:	|         move.l 1ca4e <CstDrawBuffer>,d0
    3a3c:	|         clr.l -(sp)
    3a3e:	|         pea 5 <_start+0x5>
    3a42:	|         move.l a1,-(sp)
    3a44:	|         move.l a0,-(sp)
    3a46:	|         pea 1833c <PutChar+0x5c2>
    3a4c:	|         move.l d0,-(sp)
    3a4e:	|         jsr 173c0 <debug_register_bitmap>
    3a54:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3a58:	|         move.l 92(sp),d0
    3a5c:	|         movea.w d0,a1
    3a5e:	|         move.l 88(sp),d0
    3a62:	|         lsl.w #3,d0
    3a64:	|         movea.w d0,a0
    3a66:	|         move.l 1ca4a <CstViewBuffer>,d0
    3a6c:	|         clr.l -(sp)
    3a6e:	|         pea 5 <_start+0x5>
    3a72:	|         move.l a1,-(sp)
    3a74:	|         move.l a0,-(sp)
    3a76:	|         pea 1834b <PutChar+0x5d1>
    3a7c:	|         move.l d0,-(sp)
    3a7e:	|         jsr 173c0 <debug_register_bitmap>
    3a84:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3a88:	|         move.l 1ca44 <CstCopperList>,d0
    3a8e:	|     ,-- beq.s 3aa0 <CstReserveBackdrop+0x3a0>
    3a90:	|     |   move.l 1ca4e <CstDrawBuffer>,d0
    3a96:	|     +-- beq.s 3aa0 <CstReserveBackdrop+0x3a0>
    3a98:	|     |   move.l 1ca4a <CstViewBuffer>,d0
    3a9e:	|  ,--|-- bne.s 3ab2 <CstReserveBackdrop+0x3b2>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3aa0:	|  |  '-> pea 1835a <PutChar+0x5e0>
    3aa6:	|  |      jsr 172d8 <KPrintF>
    3aac:	|  |      addq.l #4,sp
    return FALSE;
    3aae:	|  |      clr.w d0
    3ab0:	+--|----- bra.s 3ae0 <CstReserveBackdrop+0x3e0>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3ab2:	|  '----> pea 18387 <PutChar+0x60d>
    3ab8:	|         jsr 172d8 <KPrintF>
    3abe:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3ac0:	|         move.l 1ca44 <CstCopperList>,d0
    3ac6:	|         move.l d0,-(sp)
    3ac8:	|         jsr 35b4 <CstSetCl>
    3ace:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3ad0:	|         pea 183ae <PutChar+0x634>
    3ad6:	|         jsr 172d8 <KPrintF>
    3adc:	|         addq.l #4,sp
  return TRUE;
    3ade:	|         moveq #1,d0

}
    3ae0:	'-------> movea.l (sp)+,a6
    3ae2:	          lea 80(sp),sp
    3ae6:	          rts

00003ae8 <CstUnfreeze>:

void CstUnfreeze() {
    3ae8:	       lea -24(sp),sp
    3aec:	       move.l a6,-(sp)
    3aee:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3af0:	       pea 183d1 <PutChar+0x657>
    3af6:	       jsr 172d8 <KPrintF>
    3afc:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3afe:	       move.l 1ca7a <winWidth>,d0
    3b04:	       lsr.l #3,d0
    3b06:	       move.l d0,d1
    3b08:	       move.l 1ca7e <winHeight>,d0
    3b0e:	       move.l d0,d0
    3b10:	       muls.w d0,d1
    3b12:	       move.w d1,d0
    3b14:	       add.w d0,d0
    3b16:	       add.w d0,d0
    3b18:	       move.w d0,d2
    3b1a:	       add.w d1,d2
    3b1c:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3b20:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3b28:	       move.l 1ca7e <winHeight>,d0
    3b2e:	       move.l d0,d0
    3b30:	       movea.w d0,a1
    3b32:	       move.l 1ca7a <winWidth>,d0
    3b38:	       move.l d0,d0
    3b3a:	       movea.w d0,a0
    3b3c:	       move.l 1ca40 <CstBackDropBackup>,d0
    3b42:	       clr.l -(sp)
    3b44:	       pea 5 <_start+0x5>
    3b48:	       move.l a1,-(sp)
    3b4a:	       move.l a0,-(sp)
    3b4c:	       pea 17fa3 <PutChar+0x229>
    3b52:	       move.l d0,-(sp)
    3b54:	       jsr 173c0 <debug_register_bitmap>
    3b5a:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3b5e:	       move.l 1ca40 <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3b66:	       move.l 1ca3c <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3b6e:	       clr.l 20(sp)
    3b72:	   ,-- bra.s 3b98 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3b74:	,--|-> move.l 28(sp),d1
    3b78:	|  |   move.l d1,d0
    3b7a:	|  |   addq.l #4,d0
    3b7c:	|  |   move.l d0,28(sp)
    3b80:	|  |   move.l 24(sp),d0
    3b84:	|  |   move.l d0,d2
    3b86:	|  |   addq.l #4,d2
    3b88:	|  |   move.l d2,24(sp)
    3b8c:	|  |   movea.l d1,a0
    3b8e:	|  |   move.l (a0),d1
    3b90:	|  |   movea.l d0,a0
    3b92:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3b94:	|  |   addq.l #1,20(sp)
    3b98:	|  '-> move.w 18(sp),d0
    3b9c:	|      lsr.w #2,d0
    3b9e:	|      move.w d0,d0
    3ba0:	|      andi.l #65535,d0
    3ba6:	|      cmp.l 20(sp),d0
    3baa:	'----- bgt.s 3b74 <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3bac:	       move.w #2,1ca48 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3bb4:	       move.l 1ca7a <winWidth>,d0
    3bba:	       lsr.l #4,d0
    3bbc:	       movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    3bc2:	       move.l a0,d1
    3bc4:	       addq.l #2,d1
    3bc6:	       move.l d1,1ca5e <CstBackDropBufferApplyCursor>
    3bcc:	       move.l d0,d0
    3bce:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3bd0:	       move.l 1ca7e <winHeight>,d0
    3bd6:	       movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    3bdc:	       move.l a0,d1
    3bde:	       addq.l #2,d1
    3be0:	       move.l d1,1ca5e <CstBackDropBufferApplyCursor>
    3be6:	       move.l d0,d0
    3be8:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3bea:	       movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    3bf0:	       move.l a0,d0
    3bf2:	       addq.l #2,d0
    3bf4:	       move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    3bfa:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3bfc:	       movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    3c02:	       move.l a0,d0
    3c04:	       addq.l #2,d0
    3c06:	       move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    3c0c:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3c0e:	       movea.l 1ca5e <CstBackDropBufferApplyCursor>,a0
    3c14:	       move.l a0,d0
    3c16:	       addq.l #2,d0
    3c18:	       move.l d0,1ca5e <CstBackDropBufferApplyCursor>
    3c1e:	       clr.w (a0)
  
  if( CstBackDropBackup) {
    3c20:	       move.l 1ca40 <CstBackDropBackup>,d0
    3c26:	   ,-- beq.s 3c4e <CstUnfreeze+0x166>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    3c28:	   |   pea 183fc <PutChar+0x682>
    3c2e:	   |   jsr 172d8 <KPrintF>
    3c34:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    3c36:	   |   move.l 1ca40 <CstBackDropBackup>,10(sp)
    3c3e:	   |   move.l 1cb26 <SysBase>,d0
    3c44:	   |   movea.l d0,a6
    3c46:	   |   movea.l 10(sp),a1
    3c4a:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    3c4e:	   '-> pea 18420 <PutChar+0x6a6>
    3c54:	       jsr 172d8 <KPrintF>
    3c5a:	       addq.l #4,sp

}
    3c5c:	       nop
    3c5e:	       move.l (sp)+,d2
    3c60:	       movea.l (sp)+,a6
    3c62:	       lea 24(sp),sp
    3c66:	       rts

00003c68 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    3c68:	       lea -28(sp),sp
    3c6c:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    3c70:	       move.l 52(sp),-(sp)
    3c74:	       jsr 158e2 <stringWidth>
    3c7a:	       addq.l #4,sp
    3c7c:	       asr.l #1,d0
    3c7e:	       move.l d0,-(sp)
    3c80:	       jsr 1770a <__floatsisf>
    3c86:	       addq.l #4,sp
    3c88:	       move.l d0,d1
    3c8a:	       move.l 1c4b8 <cameraZoom>,d0
    3c90:	       move.l d0,-(sp)
    3c92:	       move.l d1,-(sp)
    3c94:	       jsr 175c0 <__divsf3>
    3c9a:	       addq.l #8,sp
    3c9c:	       move.l d0,-(sp)
    3c9e:	       jsr 176a2 <__fixsfsi>
    3ca4:	       addq.l #4,sp
    3ca6:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    3caa:	       move.l 56(sp),d0
    3cae:	       sub.l 44(sp),d0
    3cb2:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    3cb6:	       move.l 56(sp),d0
    3cba:	       add.l 44(sp),d0
    3cbe:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    3cc2:	       moveq #12,d0
    3cc4:	       move.l d0,32(sp)
    3cc8:	       clr.l 28(sp)
    3ccc:	       move.l 1cb26 <SysBase>,d0
    3cd2:	       movea.l d0,a6
    3cd4:	       move.l 32(sp),d0
    3cd8:	       move.l 28(sp),d1
    3cdc:	       jsr -684(a6)
    3ce0:	       move.l d0,24(sp)
    3ce4:	       move.l 24(sp),d0
    3ce8:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    3cec:	       movea.l 1ca76 <speech>,a0
    3cf2:	       move.l 4(a0),d0
    3cf6:	       movea.l 20(sp),a0
    3cfa:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    3cfe:	       move.l 52(sp),-(sp)
    3d02:	       jsr b8 <copyString>
    3d08:	       addq.l #4,sp
    3d0a:	       movea.l 20(sp),a0
    3d0e:	       move.l d0,(a0)
	newLine -> x = xx1;
    3d10:	       movea.l 20(sp),a0
    3d14:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    3d1a:	       movea.l 1ca76 <speech>,a0
    3d20:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    3d26:	       moveq #4,d0
    3d28:	       cmp.l 40(sp),d0
    3d2c:	   ,-- blt.s 3d4e <addSpeechLine+0xe6>
    3d2e:	   |   movea.l 60(sp),a0
    3d32:	   |   move.l (a0),d1
    3d34:	   |   moveq #5,d0
    3d36:	   |   sub.l 40(sp),d0
    3d3a:	   |   cmp.l d1,d0
    3d3c:	   +-- ble.s 3d4e <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    3d3e:	   |   moveq #5,d0
    3d40:	   |   sub.l 40(sp),d0
    3d44:	   |   movea.l 60(sp),a0
    3d48:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    3d4a:	,--|-- bra.w 3e7a <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3d4e:	|  '-> move.l 36(sp),-(sp)
    3d52:	|      jsr 1770a <__floatsisf>
    3d58:	|      addq.l #4,sp
    3d5a:	|      move.l d0,d2
    3d5c:	|      move.l 1ca7a <winWidth>,d0
    3d62:	|      move.l d0,-(sp)
    3d64:	|      jsr 17732 <__floatunsisf>
    3d6a:	|      addq.l #4,sp
    3d6c:	|      move.l d0,d1
    3d6e:	|      move.l 1c4b8 <cameraZoom>,d0
    3d74:	|      move.l d0,-(sp)
    3d76:	|      move.l d1,-(sp)
    3d78:	|      jsr 175c0 <__divsf3>
    3d7e:	|      addq.l #8,sp
    3d80:	|      move.l #1084227584,-(sp)
    3d86:	|      move.l d0,-(sp)
    3d88:	|      jsr 179fe <__subsf3>
    3d8e:	|      addq.l #8,sp
    3d90:	|      move.l d0,-(sp)
    3d92:	|      move.l d2,-(sp)
    3d94:	|      jsr 177f2 <__gesf2>
    3d9a:	|      addq.l #8,sp
    3d9c:	|      tst.l d0
    3d9e:	|  ,-- bge.s 3da4 <addSpeechLine+0x13c>
}
    3da0:	+--|-- bra.w 3e7a <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3da4:	|  '-> movea.l 60(sp),a0
    3da8:	|      move.l (a0),d0
    3daa:	|      move.l d0,-(sp)
    3dac:	|      jsr 1770a <__floatsisf>
    3db2:	|      addq.l #4,sp
    3db4:	|      move.l d0,-(sp)
    3db6:	|      jsr 1762c <__extendsfdf2>
    3dbc:	|      addq.l #4,sp
    3dbe:	|      move.l d0,d4
    3dc0:	|      move.l d1,d5
    3dc2:	|      move.l 1ca7a <winWidth>,d0
    3dc8:	|      move.l d0,-(sp)
    3dca:	|      jsr 17732 <__floatunsisf>
    3dd0:	|      addq.l #4,sp
    3dd2:	|      move.l d0,d1
    3dd4:	|      move.l 1c4b8 <cameraZoom>,d0
    3dda:	|      move.l d0,-(sp)
    3ddc:	|      move.l d1,-(sp)
    3dde:	|      jsr 175c0 <__divsf3>
    3de4:	|      addq.l #8,sp
    3de6:	|      move.l d0,-(sp)
    3de8:	|      jsr 1762c <__extendsfdf2>
    3dee:	|      addq.l #4,sp
    3df0:	|      clr.l -(sp)
    3df2:	|      move.l #1075052544,-(sp)
    3df8:	|      move.l d1,-(sp)
    3dfa:	|      move.l d0,-(sp)
    3dfc:	|      jsr 1799c <__subdf3>
    3e02:	|      lea 16(sp),sp
    3e06:	|      move.l d0,d2
    3e08:	|      move.l d1,d3
    3e0a:	|      move.l 36(sp),-(sp)
    3e0e:	|      jsr 176ca <__floatsidf>
    3e14:	|      addq.l #4,sp
    3e16:	|      move.l d1,-(sp)
    3e18:	|      move.l d0,-(sp)
    3e1a:	|      move.l d3,-(sp)
    3e1c:	|      move.l d2,-(sp)
    3e1e:	|      jsr 1799c <__subdf3>
    3e24:	|      lea 16(sp),sp
    3e28:	|      move.l d1,-(sp)
    3e2a:	|      move.l d0,-(sp)
    3e2c:	|      move.l d5,-(sp)
    3e2e:	|      move.l d4,-(sp)
    3e30:	|      jsr 17828 <__gtdf2>
    3e36:	|      lea 16(sp),sp
    3e3a:	|      tst.l d0
    3e3c:	|  ,-- bgt.s 3e40 <addSpeechLine+0x1d8>
}
    3e3e:	+--|-- bra.s 3e7a <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    3e40:	|  '-> move.l 1ca7a <winWidth>,d0
    3e46:	|      move.l d0,-(sp)
    3e48:	|      jsr 17732 <__floatunsisf>
    3e4e:	|      addq.l #4,sp
    3e50:	|      move.l d0,d1
    3e52:	|      move.l 1c4b8 <cameraZoom>,d0
    3e58:	|      move.l d0,-(sp)
    3e5a:	|      move.l d1,-(sp)
    3e5c:	|      jsr 175c0 <__divsf3>
    3e62:	|      addq.l #8,sp
    3e64:	|      move.l d0,-(sp)
    3e66:	|      jsr 176a2 <__fixsfsi>
    3e6c:	|      addq.l #4,sp
    3e6e:	|      subq.l #5,d0
    3e70:	|      sub.l 36(sp),d0
    3e74:	|      movea.l 60(sp),a0
    3e78:	|      move.l d0,(a0)
}
    3e7a:	'----> nop
    3e7c:	       movem.l (sp)+,d2-d5/a6
    3e80:	       lea 28(sp),sp
    3e84:	       rts

00003e86 <initSpeech>:


void initSpeech () {
    3e86:	       lea -12(sp),sp
    3e8a:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    3e8c:	       moveq #20,d0
    3e8e:	       move.l d0,12(sp)
    3e92:	       clr.l 8(sp)
    3e96:	       move.l 1cb26 <SysBase>,d0
    3e9c:	       movea.l d0,a6
    3e9e:	       move.l 12(sp),d0
    3ea2:	       move.l 8(sp),d1
    3ea6:	       jsr -684(a6)
    3eaa:	       move.l d0,4(sp)
    3eae:	       move.l 4(sp),d0
    3eb2:	       move.l d0,1ca76 <speech>
	if (speech) {
    3eb8:	       move.l 1ca76 <speech>,d0
    3ebe:	,----- beq.s 3eea <initSpeech+0x64>
		speech -> currentTalker = NULL;
    3ec0:	|      movea.l 1ca76 <speech>,a0
    3ec6:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    3ec8:	|      movea.l 1ca76 <speech>,a0
    3ece:	|      clr.l 4(a0)
		speech -> speechY = 0;
    3ed2:	|      movea.l 1ca76 <speech>,a0
    3ed8:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    3edc:	|      movea.l 1ca76 <speech>,a0
    3ee2:	|      moveq #-1,d0
    3ee4:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    3ee8:	|  ,-- bra.s 3ef8 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    3eea:	'--|-> pea 18436 <PutChar+0x6bc>
    3ef0:	   |   jsr 172d8 <KPrintF>
    3ef6:	   |   addq.l #4,sp
}
    3ef8:	   '-> nop
    3efa:	       movea.l (sp)+,a6
    3efc:	       lea 12(sp),sp
    3f00:	       rts

00003f02 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    3f02:	       movea.l 1ca76 <speech>,a0
    3f08:	       move.l 4(a0),d0
    3f0c:	,----- beq.s 3f1a <isThereAnySpeechGoingOn+0x18>
    3f0e:	|      movea.l 1ca76 <speech>,a0
    3f14:	|      move.l 16(a0),d0
    3f18:	|  ,-- bra.s 3f1c <isThereAnySpeechGoingOn+0x1a>
    3f1a:	'--|-> moveq #-1,d0
}
    3f1c:	   '-> rts

00003f1e <killAllSpeech>:

void killAllSpeech () {
    3f1e:	       lea -12(sp),sp
    3f22:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    3f24:	       movea.l 1ca76 <speech>,a0
    3f2a:	       move.l 12(a0),d0
    3f2e:	       moveq #-1,d1
    3f30:	       cmp.l d0,d1
    3f32:	   ,-- beq.s 3f40 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    3f34:	   |   movea.l 1ca76 <speech>,a0
    3f3a:	   |   moveq #-1,d0
    3f3c:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    3f40:	   '-> movea.l 1ca76 <speech>,a0
    3f46:	       move.l (a0),d0
    3f48:	,----- beq.w 3fd4 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    3f4c:	|      movea.l 1ca76 <speech>,a0
    3f52:	|      move.l (a0),d1
    3f54:	|      lea -132(sp),sp
    3f58:	|      move.l sp,d0
    3f5a:	|      movea.w #132,a0
    3f5e:	|      move.l a0,-(sp)
    3f60:	|      move.l d1,-(sp)
    3f62:	|      move.l d0,-(sp)
    3f64:	|      jsr 1728c <memcpy>
    3f6a:	|      lea 12(sp),sp
    3f6e:	|      jsr aaf0 <makeSilent>
    3f74:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    3f78:	|      movea.l 1ca76 <speech>,a0
    3f7e:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    3f80:	+----- bra.s 3fd4 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    3f82:	|  ,-> movea.l 1ca76 <speech>,a0
    3f88:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    3f8e:	|  |   movea.l 1ca76 <speech>,a0
    3f94:	|  |   movea.l 4(a0),a1
    3f98:	|  |   movea.l 1ca76 <speech>,a0
    3f9e:	|  |   move.l 4(a1),d0
    3fa2:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    3fa6:	|  |   movea.l 12(sp),a0
    3faa:	|  |   move.l (a0),8(sp)
    3fae:	|  |   move.l 1cb26 <SysBase>,d0
    3fb4:	|  |   movea.l d0,a6
    3fb6:	|  |   movea.l 8(sp),a1
    3fba:	|  |   jsr -690(a6)
		FreeVec(killMe);
    3fbe:	|  |   move.l 12(sp),4(sp)
    3fc4:	|  |   move.l 1cb26 <SysBase>,d0
    3fca:	|  |   movea.l d0,a6
    3fcc:	|  |   movea.l 4(sp),a1
    3fd0:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    3fd4:	'--|-> movea.l 1ca76 <speech>,a0
    3fda:	   |   move.l 4(a0),d0
    3fde:	   '-- bne.s 3f82 <killAllSpeech+0x64>
	}
}
    3fe0:	       nop
    3fe2:	       nop
    3fe4:	       movea.l (sp)+,a6
    3fe6:	       lea 12(sp),sp
    3fea:	       rts

00003fec <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    3fec:	pea 2 <_start+0x2>
    3ff0:	move.l 8(sp),-(sp)
    3ff4:	jsr 414c <setFrames>
    3ffa:	addq.l #8,sp
}
    3ffc:	nop
    3ffe:	rts

00004000 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    4000:	       lea -52(sp),sp
    4004:	       move.l a6,-(sp)
    4006:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    4008:	       movea.l 64(sp),a0
    400c:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    4012:	       move.l 1c490 <speechSpeed>,d0
    4018:	       move.l 68(sp),-(sp)
    401c:	       move.l d0,-(sp)
    401e:	       jsr a46 <putFloat>
    4024:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    4026:	       movea.l 64(sp),a0
    402a:	       move.l 8(a0),d0
    402e:	       move.l 68(sp),-(sp)
    4032:	       move.l d0,-(sp)
    4034:	       jsr 8d0 <put2bytes>
    403a:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    403c:	       movea.l 64(sp),a0
    4040:	       move.l 16(a0),d0
    4044:	       move.l 68(sp),-(sp)
    4048:	       move.l d0,-(sp)
    404a:	       jsr 8d0 <put2bytes>
    4050:	       addq.l #8,sp
		if (sS -> currentTalker) {
    4052:	       movea.l 64(sp),a0
    4056:	       move.l (a0),d0
    4058:	   ,-- beq.s 409c <saveSpeech+0x9c>
			FPutC (fp, 1);
    405a:	   |   move.l 68(sp),40(sp)
    4060:	   |   moveq #1,d0
    4062:	   |   move.l d0,36(sp)
    4066:	   |   move.l 1cb2e <DOSBase>,d0
    406c:	   |   movea.l d0,a6
    406e:	   |   move.l 40(sp),d1
    4072:	   |   move.l 36(sp),d2
    4076:	   |   jsr -312(a6)
    407a:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    407e:	   |   movea.l 64(sp),a0
    4082:	   |   movea.l (a0),a0
    4084:	   |   movea.l 114(a0),a0
    4088:	   |   move.l 4(a0),d0
    408c:	   |   move.l 68(sp),-(sp)
    4090:	   |   move.l d0,-(sp)
    4092:	   |   jsr 8d0 <put2bytes>
    4098:	   |   addq.l #8,sp
    409a:	,--|-- bra.s 4118 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    409c:	|  '-> move.l 68(sp),52(sp)
    40a2:	|      clr.l 48(sp)
    40a6:	|      move.l 1cb2e <DOSBase>,d0
    40ac:	|      movea.l d0,a6
    40ae:	|      move.l 52(sp),d1
    40b2:	|      move.l 48(sp),d2
    40b6:	|      jsr -312(a6)
    40ba:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    40be:	+----- bra.s 4118 <saveSpeech+0x118>
			FPutC (fp, 1);
    40c0:	|  ,-> move.l 68(sp),16(sp)
    40c6:	|  |   moveq #1,d0
    40c8:	|  |   move.l d0,12(sp)
    40cc:	|  |   move.l 1cb2e <DOSBase>,d0
    40d2:	|  |   movea.l d0,a6
    40d4:	|  |   move.l 16(sp),d1
    40d8:	|  |   move.l 12(sp),d2
    40dc:	|  |   jsr -312(a6)
    40e0:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    40e4:	|  |   movea.l 56(sp),a0
    40e8:	|  |   move.l (a0),d0
    40ea:	|  |   move.l 68(sp),-(sp)
    40ee:	|  |   move.l d0,-(sp)
    40f0:	|  |   jsr bd8 <writeString>
    40f6:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    40f8:	|  |   movea.l 56(sp),a0
    40fc:	|  |   move.l 8(a0),d0
    4100:	|  |   move.l 68(sp),-(sp)
    4104:	|  |   move.l d0,-(sp)
    4106:	|  |   jsr 8d0 <put2bytes>
    410c:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    410e:	|  |   movea.l 56(sp),a0
    4112:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    4118:	'--|-> tst.l 56(sp)
    411c:	   '-- bne.s 40c0 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    411e:	       move.l 68(sp),28(sp)
    4124:	       clr.l 24(sp)
    4128:	       move.l 1cb2e <DOSBase>,d0
    412e:	       movea.l d0,a6
    4130:	       move.l 28(sp),d1
    4134:	       move.l 24(sp),d2
    4138:	       jsr -312(a6)
    413c:	       move.l d0,20(sp)
}
    4140:	       nop
    4142:	       move.l (sp)+,d2
    4144:	       movea.l (sp)+,a6
    4146:	       lea 52(sp),sp
    414a:	       rts

0000414c <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    414c:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    414e:	movea.l 8(sp),a0
    4152:	movea.l 80(a0),a0
    4156:	move.l (a0),d2
    4158:	movea.l 8(sp),a0
    415c:	movea.l 80(a0),a0
    4160:	move.l 4(a0),d0
    4164:	move.l 12(sp),-(sp)
    4168:	move.l d0,-(sp)
    416a:	jsr 17c64 <__mulsi3>
    4170:	addq.l #8,sp
    4172:	move.l d0,d1
    4174:	movea.l 8(sp),a0
    4178:	move.l 106(a0),d0
    417c:	add.l d1,d0
    417e:	add.l d0,d0
    4180:	add.l d0,d0
    4182:	movea.l d2,a0
    4184:	adda.l d0,a0
    4186:	move.l (a0),d0
    4188:	movea.l 8(sp),a0
    418c:	move.l d0,72(a0)
}
    4190:	nop
    4192:	move.l (sp)+,d2
    4194:	rts

00004196 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4196:	       lea -20(sp),sp
    419a:	       move.l d2,-(sp)
    419c:	       move.l 40(sp),d0
    41a0:	       move.w d0,d0
    41a2:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    41a6:	       movea.l 1ca76 <speech>,a0
    41ac:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    41b2:	       move.l 32(sp),-(sp)
    41b6:	       jsr a5b0 <findPerson>
    41bc:	       addq.l #4,sp
    41be:	       move.l d0,16(sp)
    if (thisPerson) {
    41c2:	   ,-- beq.s 41e8 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    41c4:	   |   movea.w 6(sp),a0
    41c8:	   |   move.l a0,-(sp)
    41ca:	   |   move.l 40(sp),-(sp)
    41ce:	   |   move.l 24(sp),-(sp)
    41d2:	   |   move.l 40(sp),-(sp)
    41d6:	   |   jsr 42ae <wrapSpeechPerson>
    41dc:	   |   lea 16(sp),sp
    41e0:	   |   move.l d0,20(sp)
    41e4:	,--|-- bra.w 42a2 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    41e8:	|  '-> move.l 32(sp),-(sp)
    41ec:	|      jsr 15aba <getRegionForObject>
    41f2:	|      addq.l #4,sp
    41f4:	|      move.l d0,12(sp)
        if (thisRegion) {
    41f8:	|  ,-- beq.s 4264 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    41fa:	|  |   movea.l 12(sp),a0
    41fe:	|  |   movea.l 28(a0),a0
    4202:	|  |   move.l 28(a0),d0
    4206:	|  |   movea.l 12(sp),a0
    420a:	|  |   movea.l 4(a0),a1
    420e:	|  |   movea.l 12(sp),a0
    4212:	|  |   movea.l 28(a0),a0
    4216:	|  |   move.l 20(a0),d1
    421a:	|  |   movea.l a1,a0
    421c:	|  |   suba.l d1,a0
    421e:	|  |   move.l 1cbe0 <cameraY>,d1
    4224:	|  |   movea.l a0,a1
    4226:	|  |   suba.l d1,a1
    4228:	|  |   movea.l 12(sp),a0
    422c:	|  |   move.l (a0),d2
    422e:	|  |   movea.l 12(sp),a0
    4232:	|  |   move.l 8(a0),d1
    4236:	|  |   add.l d2,d1
    4238:	|  |   move.l d1,d2
    423a:	|  |   asr.l #1,d2
    423c:	|  |   move.l 1cbdc <cameraX>,d1
    4242:	|  |   movea.l d2,a0
    4244:	|  |   suba.l d1,a0
    4246:	|  |   move.l 36(sp),-(sp)
    424a:	|  |   move.l d0,-(sp)
    424c:	|  |   move.l a1,-(sp)
    424e:	|  |   move.l a0,-(sp)
    4250:	|  |   move.l 44(sp),-(sp)
    4254:	|  |   jsr 43cc <wrapSpeechXY>
    425a:	|  |   lea 20(sp),sp
    425e:	|  |   move.l d0,20(sp)
    4262:	+--|-- bra.s 42a2 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    4264:	|  '-> move.l 32(sp),-(sp)
    4268:	|      jsr d51e <findObjectType>
    426e:	|      addq.l #4,sp
    4270:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    4274:	|      movea.l 8(sp),a0
    4278:	|      move.l 28(a0),d1
    427c:	|      move.l 1ca7a <winWidth>,d0
    4282:	|      lsr.l #1,d0
    4284:	|      move.l 36(sp),-(sp)
    4288:	|      move.l d1,-(sp)
    428a:	|      pea a <_start+0xa>
    428e:	|      move.l d0,-(sp)
    4290:	|      move.l 44(sp),-(sp)
    4294:	|      jsr 43cc <wrapSpeechXY>
    429a:	|      lea 20(sp),sp
    429e:	|      move.l d0,20(sp)
        }
    }
    return i;
    42a2:	'----> move.l 20(sp),d0
}
    42a6:	       move.l (sp)+,d2
    42a8:	       lea 20(sp),sp
    42ac:	       rts

000042ae <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    42ae:	    subq.l #8,sp
    42b0:	    movem.l d2-d4,-(sp)
    42b4:	    move.l 36(sp),d0
    42b8:	    move.w d0,d0
    42ba:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    42be:	    movea.l 28(sp),a0
    42c2:	    movea.l 114(a0),a0
    42c6:	    move.l 28(a0),d2
    42ca:	    movea.l 28(sp),a0
    42ce:	    move.l 4(a0),d3
    42d2:	    move.l 1cbe0 <cameraY>,d0
    42d8:	    move.l d0,-(sp)
    42da:	    jsr 1770a <__floatsisf>
    42e0:	    addq.l #4,sp
    42e2:	    move.l d0,-(sp)
    42e4:	    move.l d3,-(sp)
    42e6:	    jsr 179fe <__subsf3>
    42ec:	    addq.l #8,sp
    42ee:	    move.l d0,d3
    42f0:	    movea.l 28(sp),a0
    42f4:	    move.l 32(a0),d4
    42f8:	    movea.l 28(sp),a0
    42fc:	    move.l 20(a0),d1
    4300:	    movea.l 28(sp),a0
    4304:	    move.l 24(a0),d0
    4308:	    sub.l d0,d1
    430a:	    move.l d1,-(sp)
    430c:	    jsr 1770a <__floatsisf>
    4312:	    addq.l #4,sp
    4314:	    move.l d0,-(sp)
    4316:	    move.l d4,-(sp)
    4318:	    jsr 177bc <__mulsf3>
    431e:	    addq.l #8,sp
    4320:	    move.l d0,-(sp)
    4322:	    move.l d3,-(sp)
    4324:	    jsr 179fe <__subsf3>
    432a:	    addq.l #8,sp
    432c:	    move.l d0,d3
    432e:	    movea.l 28(sp),a0
    4332:	    movea.l 114(a0),a0
    4336:	    move.l 20(a0),d0
    433a:	    move.l d0,-(sp)
    433c:	    jsr 1770a <__floatsisf>
    4342:	    addq.l #4,sp
    4344:	    move.l d0,-(sp)
    4346:	    move.l d3,-(sp)
    4348:	    jsr 179fe <__subsf3>
    434e:	    addq.l #8,sp
    4350:	    move.l d0,-(sp)
    4352:	    jsr 176a2 <__fixsfsi>
    4358:	    addq.l #4,sp
    435a:	    move.l d0,d4
    435c:	    movea.l 28(sp),a0
    4360:	    move.l (a0),d3
    4362:	    move.l 1cbdc <cameraX>,d0
    4368:	    move.l d0,-(sp)
    436a:	    jsr 1770a <__floatsisf>
    4370:	    addq.l #4,sp
    4372:	    move.l d0,-(sp)
    4374:	    move.l d3,-(sp)
    4376:	    jsr 179fe <__subsf3>
    437c:	    addq.l #8,sp
    437e:	    move.l d0,-(sp)
    4380:	    jsr 176a2 <__fixsfsi>
    4386:	    addq.l #4,sp
    4388:	    move.l 32(sp),-(sp)
    438c:	    move.l d2,-(sp)
    438e:	    move.l d4,-(sp)
    4390:	    move.l d0,-(sp)
    4392:	    move.l 40(sp),-(sp)
    4396:	    jsr 43cc <wrapSpeechXY>
    439c:	    lea 20(sp),sp
    43a0:	    move.l d0,16(sp)
	if (animPerson) {
    43a4:	    tst.w 14(sp)
    43a8:	,-- beq.s 43c0 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    43aa:	|   move.l 28(sp),-(sp)
    43ae:	|   jsr 3fec <makeTalker>
    43b4:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    43b6:	|   movea.l 1ca76 <speech>,a0
    43bc:	|   move.l 28(sp),(a0)
	}
	return i;
    43c0:	'-> move.l 16(sp),d0
}
    43c4:	    movem.l (sp)+,d2-d4
    43c8:	    addq.l #8,sp
    43ca:	    rts

000043cc <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    43cc:	                   lea -16(sp),sp
    43d0:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    43d4:	                   clr.l 16(sp)
    killAllSpeech();
    43d8:	                   jsr 3f1e <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    43de:	                   move.l 36(sp),-(sp)
    43e2:	                   jsr 13ce4 <strlen>
    43e8:	                   addq.l #4,sp
    43ea:	                   movea.l d0,a0
    43ec:	                   lea 20(a0),a0
    43f0:	                   move.l a0,-(sp)
    43f2:	                   jsr 17732 <__floatunsisf>
    43f8:	                   addq.l #4,sp
    43fa:	                   move.l d0,d1
    43fc:	                   move.l 1c490 <speechSpeed>,d0
    4402:	                   move.l d0,-(sp)
    4404:	                   move.l d1,-(sp)
    4406:	                   jsr 177bc <__mulsf3>
    440c:	                   addq.l #8,sp
    440e:	                   move.l d0,-(sp)
    4410:	                   jsr 176a2 <__fixsfsi>
    4416:	                   addq.l #4,sp
    4418:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    441c:	               ,-- bgt.s 4424 <wrapSpeechXY+0x58>
    441e:	               |   moveq #1,d0
    4420:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    4424:	               '-> moveq #-1,d1
    4426:	                   cmp.l 52(sp),d1
    442a:	               ,-- beq.s 446a <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    442c:	               |   move.l 1cbf0 <speechMode>,d0
    4432:	               +-- ble.s 446a <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    4434:	               |   clr.l -(sp)
    4436:	               |   move.l 56(sp),-(sp)
    443a:	               |   jsr d1de <startSound>
    4440:	               |   addq.l #8,sp
    4442:	               |   tst.w d0
    4444:	               +-- beq.s 446a <wrapSpeechXY+0x9e>
                speechTime = -10;
    4446:	               |   moveq #-10,d0
    4448:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    444c:	               |   movea.l 1ca76 <speech>,a0
    4452:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    4458:	               |   move.l 1cbf0 <speechMode>,d0
    445e:	               |   moveq #2,d1
    4460:	               |   cmp.l d0,d1
    4462:	               +-- bne.s 446a <wrapSpeechXY+0x9e>
    4464:	               |   moveq #-10,d0
    4466:	,--------------|-- bra.w 46f0 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    446a:	|              '-> movea.l 1ca76 <speech>,a0
    4470:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    4476:	|     ,----------- bra.w 452a <wrapSpeechXY+0x15e>
        a = wrap;
    447a:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    4480:	|  |  |        ,-- bra.s 4490 <wrapSpeechXY+0xc4>
            a--;
    4482:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    4486:	|  |  |  |     +-- bne.s 4490 <wrapSpeechXY+0xc4>
                a = wrap;
    4488:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    448e:	|  |  |  |  ,--|-- bra.s 44a2 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    4490:	|  |  |  |  |  '-> move.l 28(sp),d0
    4494:	|  |  |  |  |      movea.l 36(sp),a0
    4498:	|  |  |  |  |      adda.l d0,a0
    449a:	|  |  |  |  |      move.b (a0),d0
    449c:	|  |  |  |  |      cmpi.b #32,d0
    44a0:	|  |  |  '--|----- bne.s 4482 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    44a2:	|  |  |     '----> move.l 28(sp),d0
    44a6:	|  |  |            movea.l 36(sp),a0
    44aa:	|  |  |            adda.l d0,a0
    44ac:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    44ae:	|  |  |            lea 16(sp),a0
    44b2:	|  |  |            move.l a0,-(sp)
    44b4:	|  |  |            move.l 44(sp),-(sp)
    44b8:	|  |  |            move.l 44(sp),-(sp)
    44bc:	|  |  |            jsr 3c68 <addSpeechLine>
    44c2:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    44c6:	|  |  |            move.l 28(sp),d0
    44ca:	|  |  |            movea.l 36(sp),a0
    44ce:	|  |  |            adda.l d0,a0
    44d0:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    44d4:	|  |  |            move.l 28(sp),d0
    44d8:	|  |  |            addq.l #1,d0
    44da:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    44de:	|  |  |            move.l 44(sp),-(sp)
    44e2:	|  |  |            jsr 1770a <__floatsisf>
    44e8:	|  |  |            addq.l #4,sp
    44ea:	|  |  |            move.l d0,d2
    44ec:	|  |  |            move.l 1cc1a <fontHeight>,d0
    44f2:	|  |  |            move.l d0,-(sp)
    44f4:	|  |  |            jsr 1770a <__floatsisf>
    44fa:	|  |  |            addq.l #4,sp
    44fc:	|  |  |            move.l d0,d1
    44fe:	|  |  |            move.l 1c4b8 <cameraZoom>,d0
    4504:	|  |  |            move.l d0,-(sp)
    4506:	|  |  |            move.l d1,-(sp)
    4508:	|  |  |            jsr 175c0 <__divsf3>
    450e:	|  |  |            addq.l #8,sp
    4510:	|  |  |            move.l d0,-(sp)
    4512:	|  |  |            move.l d2,-(sp)
    4514:	|  |  |            jsr 179fe <__subsf3>
    451a:	|  |  |            addq.l #8,sp
    451c:	|  |  |            move.l d0,-(sp)
    451e:	|  |  |            jsr 176a2 <__fixsfsi>
    4524:	|  |  |            addq.l #4,sp
    4526:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    452a:	|  |  '----------> move.l 36(sp),-(sp)
    452e:	|  |               jsr 13ce4 <strlen>
    4534:	|  |               addq.l #4,sp
    4536:	|  |               move.l d0,d1
    4538:	|  |               move.l 48(sp),d0
    453c:	|  |               cmp.l d1,d0
    453e:	|  '-------------- bcs.w 447a <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    4542:	|                  lea 16(sp),a0
    4546:	|                  move.l a0,-(sp)
    4548:	|                  move.l 44(sp),-(sp)
    454c:	|                  move.l 44(sp),-(sp)
    4550:	|                  jsr 3c68 <addSpeechLine>
    4556:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    455a:	|                  move.l 44(sp),-(sp)
    455e:	|                  jsr 1770a <__floatsisf>
    4564:	|                  addq.l #4,sp
    4566:	|                  move.l d0,d2
    4568:	|                  move.l 1cc1a <fontHeight>,d0
    456e:	|                  move.l d0,-(sp)
    4570:	|                  jsr 1770a <__floatsisf>
    4576:	|                  addq.l #4,sp
    4578:	|                  move.l d0,d1
    457a:	|                  move.l 1c4b8 <cameraZoom>,d0
    4580:	|                  move.l d0,-(sp)
    4582:	|                  move.l d1,-(sp)
    4584:	|                  jsr 175c0 <__divsf3>
    458a:	|                  addq.l #8,sp
    458c:	|                  move.l d0,-(sp)
    458e:	|                  move.l d2,-(sp)
    4590:	|                  jsr 179fe <__subsf3>
    4596:	|                  addq.l #8,sp
    4598:	|                  move.l d0,-(sp)
    459a:	|                  jsr 176a2 <__fixsfsi>
    45a0:	|                  addq.l #4,sp
    45a2:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    45a6:	|              ,-- bpl.s 45c4 <wrapSpeechXY+0x1f8>
    45a8:	|              |   movea.l 1ca76 <speech>,a0
    45ae:	|              |   move.l 8(a0),d0
    45b2:	|              |   movea.l 1ca76 <speech>,a0
    45b8:	|              |   sub.l 44(sp),d0
    45bc:	|              |   move.l d0,8(a0)
    45c0:	|           ,--|-- bra.w 46b2 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    45c4:	|           |  '-> movea.l 1ca76 <speech>,a0
    45ca:	|           |      move.l 8(a0),d0
    45ce:	|           |      move.l d0,-(sp)
    45d0:	|           |      jsr 1770a <__floatsisf>
    45d6:	|           |      addq.l #4,sp
    45d8:	|           |      move.l d0,d2
    45da:	|           |      move.l 1cbe0 <cameraY>,d0
    45e0:	|           |      move.l d0,-(sp)
    45e2:	|           |      jsr 1770a <__floatsisf>
    45e8:	|           |      addq.l #4,sp
    45ea:	|           |      move.l d0,d3
    45ec:	|           |      move.l 1ca7e <winHeight>,d4
    45f2:	|           |      move.l 1cc1a <fontHeight>,d0
    45f8:	|           |      pea 3 <_start+0x3>
    45fc:	|           |      move.l d0,-(sp)
    45fe:	|           |      jsr 17ce2 <__divsi3>
    4604:	|           |      addq.l #8,sp
    4606:	|           |      move.l d4,d1
    4608:	|           |      sub.l d0,d1
    460a:	|           |      move.l d1,-(sp)
    460c:	|           |      jsr 17732 <__floatunsisf>
    4612:	|           |      addq.l #4,sp
    4614:	|           |      move.l d0,d1
    4616:	|           |      move.l 1c4b8 <cameraZoom>,d0
    461c:	|           |      move.l d0,-(sp)
    461e:	|           |      move.l d1,-(sp)
    4620:	|           |      jsr 175c0 <__divsf3>
    4626:	|           |      addq.l #8,sp
    4628:	|           |      move.l d0,-(sp)
    462a:	|           |      move.l d3,-(sp)
    462c:	|           |      jsr 174c6 <__addsf3>
    4632:	|           |      addq.l #8,sp
    4634:	|           |      move.l d0,-(sp)
    4636:	|           |      move.l d2,-(sp)
    4638:	|           |      jsr 17876 <__gtsf2>
    463e:	|           |      addq.l #8,sp
    4640:	|           |      tst.l d0
    4642:	|           +----- ble.s 46b2 <wrapSpeechXY+0x2e6>
    4644:	|           |      move.l 1cbe0 <cameraY>,d0
    464a:	|           |      move.l d0,-(sp)
    464c:	|           |      jsr 1770a <__floatsisf>
    4652:	|           |      addq.l #4,sp
    4654:	|           |      move.l d0,d2
    4656:	|           |      move.l 1ca7e <winHeight>,d3
    465c:	|           |      move.l 1cc1a <fontHeight>,d0
    4662:	|           |      pea 3 <_start+0x3>
    4666:	|           |      move.l d0,-(sp)
    4668:	|           |      jsr 17ce2 <__divsi3>
    466e:	|           |      addq.l #8,sp
    4670:	|           |      move.l d3,d1
    4672:	|           |      sub.l d0,d1
    4674:	|           |      move.l d1,-(sp)
    4676:	|           |      jsr 17732 <__floatunsisf>
    467c:	|           |      addq.l #4,sp
    467e:	|           |      move.l d0,d1
    4680:	|           |      move.l 1c4b8 <cameraZoom>,d0
    4686:	|           |      move.l d0,-(sp)
    4688:	|           |      move.l d1,-(sp)
    468a:	|           |      jsr 175c0 <__divsf3>
    4690:	|           |      addq.l #8,sp
    4692:	|           |      move.l d0,-(sp)
    4694:	|           |      move.l d2,-(sp)
    4696:	|           |      jsr 174c6 <__addsf3>
    469c:	|           |      addq.l #8,sp
    469e:	|           |      movea.l 1ca76 <speech>,a2
    46a4:	|           |      move.l d0,-(sp)
    46a6:	|           |      jsr 176a2 <__fixsfsi>
    46ac:	|           |      addq.l #4,sp
    46ae:	|           |      move.l d0,8(a2)

    if (offset) {
    46b2:	|           '----> move.l 16(sp),d0
    46b6:	|        ,-------- beq.s 46ec <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    46b8:	|        |         movea.l 1ca76 <speech>,a0
    46be:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    46c4:	|        |     ,-- bra.s 46e6 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    46c6:	|        |  ,--|-> movea.l 20(sp),a0
    46ca:	|        |  |  |   move.l 8(a0),d1
    46ce:	|        |  |  |   move.l 16(sp),d0
    46d2:	|        |  |  |   add.l d1,d0
    46d4:	|        |  |  |   movea.l 20(sp),a0
    46d8:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    46dc:	|        |  |  |   movea.l 20(sp),a0
    46e0:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    46e6:	|        |  |  '-> tst.l 20(sp)
    46ea:	|        |  '----- bne.s 46c6 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    46ec:	|        '-------> move.l 24(sp),d0
}
    46f0:	'----------------> movem.l (sp)+,d2-d4/a2
    46f4:	                   lea 16(sp),sp
    46f8:	                   rts

000046fa <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    46fa:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    46fe:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    4702:	       tst.l 24(sp)
    4706:	   ,-- bge.s 470c <drawLine+0x12>
    4708:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    470c:	   '-> tst.l 28(sp)
    4710:	   ,-- bge.s 4716 <drawLine+0x1c>
    4712:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    4716:	   '-> tst.l 32(sp)
    471a:	   ,-- bge.s 4720 <drawLine+0x26>
    471c:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    4720:	   '-> tst.l 36(sp)
    4724:	   ,-- bge.s 472a <drawLine+0x30>
    4726:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    472a:	   '-> move.l 1cbbe <sceneWidth>,d0
    4730:	       cmp.l 24(sp),d0
    4734:	   ,-- bge.s 4744 <drawLine+0x4a>
    4736:	   |   move.l 1cbbe <sceneWidth>,d0
    473c:	   |   move.l d0,d1
    473e:	   |   subq.l #1,d1
    4740:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    4744:	   '-> move.l 1cbbe <sceneWidth>,d0
    474a:	       cmp.l 32(sp),d0
    474e:	   ,-- bge.s 475e <drawLine+0x64>
    4750:	   |   move.l 1cbbe <sceneWidth>,d0
    4756:	   |   move.l d0,d1
    4758:	   |   subq.l #1,d1
    475a:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    475e:	   '-> move.l 1cbc2 <sceneHeight>,d0
    4764:	       cmp.l 28(sp),d0
    4768:	   ,-- bge.s 4778 <drawLine+0x7e>
    476a:	   |   move.l 1cbc2 <sceneHeight>,d0
    4770:	   |   move.l d0,d1
    4772:	   |   subq.l #1,d1
    4774:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    4778:	   '-> move.l 1cbc2 <sceneHeight>,d0
    477e:	       cmp.l 36(sp),d0
    4782:	   ,-- bge.s 4792 <drawLine+0x98>
    4784:	   |   move.l 1cbc2 <sceneHeight>,d0
    478a:	   |   move.l d0,d1
    478c:	   |   subq.l #1,d1
    478e:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    4792:	   '-> move.l 24(sp),d0
    4796:	       cmp.l 32(sp),d0
    479a:	,----- ble.s 47b6 <drawLine+0xbc>
		x = x2; 
    479c:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    47a2:	|      tst.w 10(sp)
    47a6:	|      seq d0
    47a8:	|      neg.b d0
    47aa:	|      move.b d0,d0
    47ac:	|      andi.w #255,d0
    47b0:	|      move.w d0,10(sp)
    47b4:	|  ,-- bra.s 47bc <drawLine+0xc2>
	} else x = x1;
    47b6:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    47bc:	   '-> move.l 28(sp),d1
    47c0:	       cmp.l 36(sp),d1
    47c4:	,----- ble.s 47e0 <drawLine+0xe6>
		y = y2; 
    47c6:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    47cc:	|      tst.w 10(sp)
    47d0:	|      seq d0
    47d2:	|      neg.b d0
    47d4:	|      move.b d0,d0
    47d6:	|      andi.w #255,d0
    47da:	|      move.w d0,10(sp)
    47de:	|  ,-- bra.s 47e6 <drawLine+0xec>
	} else y = y1;	
    47e0:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    47e6:	   '-> move.l 32(sp),d0
    47ea:	       sub.l 24(sp),d0
    47ee:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    47f2:	       move.l 6(sp),d0
    47f6:	   ,-- bpl.s 47fa <drawLine+0x100>
    47f8:	   |   neg.l d0
    47fa:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    47fe:	       move.l 36(sp),d1
    4802:	       sub.l 28(sp),d1
    4806:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    480a:	       move.l 2(sp),d0
    480e:	   ,-- bpl.s 4812 <drawLine+0x118>
    4810:	   |   neg.l d0
    4812:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    4816:	       tst.l 6(sp)
    481a:	   ,-- bne.s 483e <drawLine+0x144>
		diffX = 1;
    481c:	   |   moveq #1,d0
    481e:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    4822:	   |   move.l 1cbbe <sceneWidth>,d0
    4828:	   |   subq.l #1,d0
    482a:	   |   cmp.l 16(sp),d0
    482e:	   +-- bne.s 483e <drawLine+0x144>
    4830:	   |   move.l 1cbbe <sceneWidth>,d0
    4836:	   |   move.l d0,d1
    4838:	   |   subq.l #2,d1
    483a:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    483e:	   '-> tst.l 2(sp)
    4842:	   ,-- bne.s 4866 <drawLine+0x16c>
		diffY = 1;
    4844:	   |   moveq #1,d0
    4846:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    484a:	   |   move.l 1cbc2 <sceneHeight>,d0
    4850:	   |   subq.l #1,d0
    4852:	   |   cmp.l 12(sp),d0
    4856:	   +-- bne.s 4866 <drawLine+0x16c>
    4858:	   |   move.l 1cbc2 <sceneHeight>,d0
    485e:	   |   move.l d0,d1
    4860:	   |   subq.l #2,d1
    4862:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4866:	   '-> pea 18473 <PutChar+0x6f9>
    486c:	       jsr 172d8 <KPrintF>
    4872:	       addq.l #4,sp
	
}
    4874:	       nop
    4876:	       lea 20(sp),sp
    487a:	       rts

0000487c <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    487c:	                      lea -24(sp),sp
    4880:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4882:	                      move.l 1ca82 <firstTexture>,d0
    4888:	,-------------------- beq.w 4966 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    488c:	|                     clr.l 24(sp)
    4890:	|     ,-------------- bra.w 495a <deleteTextures+0xde>
			BOOL found = FALSE;
    4894:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4898:	|  |  |               move.l 1ca82 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    48a0:	|  |  |               movea.l 20(sp),a0
    48a4:	|  |  |               move.l (a0),d1
    48a6:	|  |  |               move.l 24(sp),d0
    48aa:	|  |  |               add.l d0,d0
    48ac:	|  |  |               add.l d0,d0
    48ae:	|  |  |               movea.l 36(sp),a0
    48b2:	|  |  |               adda.l d0,a0
    48b4:	|  |  |               move.l (a0),d0
    48b6:	|  |  |               cmp.l d1,d0
    48b8:	|  |  |  ,----------- bne.w 494c <deleteTextures+0xd0>
				found = TRUE;
    48bc:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    48c2:	|  |  |  |            movea.l 20(sp),a0
    48c6:	|  |  |  |            move.l 12(a0),d0
    48ca:	|  |  |  |            move.l d0,1ca82 <firstTexture>
				FreeVec(list);
    48d0:	|  |  |  |            move.l 20(sp),6(sp)
    48d6:	|  |  |  |            move.l 1cb26 <SysBase>,d0
    48dc:	|  |  |  |            movea.l d0,a6
    48de:	|  |  |  |            movea.l 6(sp),a1
    48e2:	|  |  |  |            jsr -690(a6)
				continue;
    48e6:	|  |  |  |  ,-------- bra.s 4956 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    48e8:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    48ec:	|  |  |  |  |  |      movea.l 12(a0),a0
    48f0:	|  |  |  |  |  |      move.l (a0),d1
    48f2:	|  |  |  |  |  |      move.l 24(sp),d0
    48f6:	|  |  |  |  |  |      add.l d0,d0
    48f8:	|  |  |  |  |  |      add.l d0,d0
    48fa:	|  |  |  |  |  |      movea.l 36(sp),a0
    48fe:	|  |  |  |  |  |      adda.l d0,a0
    4900:	|  |  |  |  |  |      move.l (a0),d0
    4902:	|  |  |  |  |  |      cmp.l d1,d0
    4904:	|  |  |  |  |  |  ,-- bne.s 4942 <deleteTextures+0xc6>
					found = TRUE;
    4906:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    490c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4910:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4916:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    491a:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    491e:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4922:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4926:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    492a:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4930:	|  |  |  |  |  |  |   move.l 1cb26 <SysBase>,d0
    4936:	|  |  |  |  |  |  |   movea.l d0,a6
    4938:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    493c:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4940:	|  |  |  |  +--|--|-- bra.s 4956 <deleteTextures+0xda>
				}
				list = list->next;
    4942:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    4946:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    494c:	|  |  |  '--|--|----> movea.l 20(sp),a0
    4950:	|  |  |     |  |      move.l 12(a0),d0
    4954:	|  |  |     |  '----- bne.s 48e8 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4956:	|  |  |     '-------> addq.l #1,24(sp)
    495a:	|  |  '-------------> move.l 24(sp),d0
    495e:	|  |                  cmp.l 32(sp),d0
    4962:	|  '----------------- bcs.w 4894 <deleteTextures+0x18>
			}
		}
	}
}
    4966:	'-------------------> nop
    4968:	                      movea.l (sp)+,a6
    496a:	                      lea 24(sp),sp
    496e:	                      rts

00004970 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4970:	subq.l #4,sp
    4972:	move.l 8(sp),d0
    4976:	move.w d0,d0
    4978:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    497c:	pea 18496 <PutChar+0x71c>
    4982:	jsr 172d8 <KPrintF>
    4988:	addq.l #4,sp
}
    498a:	nop
    498c:	addq.l #4,sp
    498e:	rts

00004990 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4990:	       moveq #-1,d0
    4992:	       cmp.l 4(sp),d0
    4996:	   ,-- bne.s 499c <resourceNameFromNum+0xc>
    4998:	   |   moveq #0,d0
    499a:	,--|-- bra.s 49d4 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    499c:	|  '-> move.l 1cb02 <numResourceNames>,d0
    49a2:	|  ,-- bne.s 49ac <resourceNameFromNum+0x1c>
    49a4:	|  |   move.l #99526,d0
    49aa:	+--|-- bra.s 49d4 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    49ac:	|  '-> move.l 1cb02 <numResourceNames>,d0
    49b2:	|      cmp.l 4(sp),d0
    49b6:	|  ,-- ble.s 49ce <resourceNameFromNum+0x3e>
    49b8:	|  |   move.l 1caba <allResourceNames>,d1
    49be:	|  |   move.l 4(sp),d0
    49c2:	|  |   add.l d0,d0
    49c4:	|  |   add.l d0,d0
    49c6:	|  |   movea.l d1,a0
    49c8:	|  |   adda.l d0,a0
    49ca:	|  |   move.l (a0),d0
    49cc:	+--|-- bra.s 49d4 <resourceNameFromNum+0x44>
	return "Unknown resource";
    49ce:	|  '-> move.l #99535,d0
    49d4:	'----> rts

000049d6 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    49d6:	          lea -44(sp),sp
    49da:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    49de:	          move.l #320,1ca7a <winWidth>
    winHeight = 256;
    49e8:	          move.l #256,1ca7e <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    49f2:	          tst.l 60(sp)
    49f6:	      ,-- bne.s 4a0e <main_sludge+0x38>
		bundleFolder = copyString("game/");
    49f8:	      |   pea 184e0 <PutChar+0x766>
    49fe:	      |   jsr b8 <copyString>
    4a04:	      |   addq.l #4,sp
    4a06:	      |   move.l d0,1ca92 <bundleFolder>
    4a0c:	   ,--|-- bra.s 4a24 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4a0e:	   |  '-> movea.l 64(sp),a0
    4a12:	   |      move.l (a0),d0
    4a14:	   |      move.l d0,-(sp)
    4a16:	   |      jsr b8 <copyString>
    4a1c:	   |      addq.l #4,sp
    4a1e:	   |      move.l d0,1ca92 <bundleFolder>
	}
    
	int lastSlash = -1;
    4a24:	   '----> moveq #-1,d0
    4a26:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4a2a:	          clr.l 44(sp)
    4a2e:	   ,----- bra.s 4a50 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4a30:	,--|----> move.l 1ca92 <bundleFolder>,d1
    4a36:	|  |      move.l 44(sp),d0
    4a3a:	|  |      movea.l d1,a0
    4a3c:	|  |      adda.l d0,a0
    4a3e:	|  |      move.b (a0),d0
    4a40:	|  |      cmpi.b #47,d0
    4a44:	|  |  ,-- bne.s 4a4c <main_sludge+0x76>
    4a46:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4a4c:	|  |  '-> addq.l #1,44(sp)
    4a50:	|  '----> move.l 1ca92 <bundleFolder>,d1
    4a56:	|         move.l 44(sp),d0
    4a5a:	|         movea.l d1,a0
    4a5c:	|         adda.l d0,a0
    4a5e:	|         move.b (a0),d0
    4a60:	'-------- bne.s 4a30 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4a62:	          move.l 1ca92 <bundleFolder>,d0
    4a68:	          move.l 48(sp),d1
    4a6c:	          addq.l #1,d1
    4a6e:	          movea.l d0,a0
    4a70:	          adda.l d1,a0
    4a72:	          clr.b (a0)

	if (argc > 1) {
    4a74:	          moveq #1,d0
    4a76:	          cmp.l 60(sp),d0
    4a7a:	      ,-- bge.s 4a96 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4a7c:	      |   move.l 60(sp),d0
    4a80:	      |   addi.l #1073741823,d0
    4a86:	      |   add.l d0,d0
    4a88:	      |   add.l d0,d0
    4a8a:	      |   movea.l 64(sp),a0
    4a8e:	      |   adda.l d0,a0
    4a90:	      |   move.l (a0),52(sp)
    4a94:	   ,--|-- bra.s 4af0 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4a96:	   |  '-> move.l 1ca92 <bundleFolder>,d0
    4a9c:	   |      pea 184e6 <PutChar+0x76c>
    4aa2:	   |      move.l d0,-(sp)
    4aa4:	   |      jsr 13d24 <joinStrings>
    4aaa:	   |      addq.l #8,sp
    4aac:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4ab0:	   |      move.l 52(sp),-(sp)
    4ab4:	   |      jsr 13c1e <fileExists>
    4aba:	   |      addq.l #4,sp
    4abc:	   |      tst.b d0
    4abe:	   +----- bne.s 4af0 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4ac0:	   |      move.l 52(sp),40(sp)
    4ac6:	   |      move.l 1cb26 <SysBase>,d0
    4acc:	   |      movea.l d0,a6
    4ace:	   |      movea.l 40(sp),a1
    4ad2:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4ad6:	   |      move.l 1ca92 <bundleFolder>,d0
    4adc:	   |      pea 184f3 <PutChar+0x779>
    4ae2:	   |      move.l d0,-(sp)
    4ae4:	   |      jsr 13d24 <joinStrings>
    4aea:	   |      addq.l #8,sp
    4aec:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4af0:	   '----> pea 184fc <PutChar+0x782>
    4af6:	          jsr 172d8 <KPrintF>
    4afc:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4afe:	          move.l 52(sp),-(sp)
    4b02:	          jsr 13c1e <fileExists>
    4b08:	          addq.l #4,sp
    4b0a:	          tst.b d0
    4b0c:	      ,-- bne.s 4b64 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4b0e:	      |   move.l 1cb2e <DOSBase>,d0
    4b14:	      |   movea.l d0,a6
    4b16:	      |   jsr -60(a6)
    4b1a:	      |   move.l d0,28(sp)
    4b1e:	      |   move.l 28(sp),d0
    4b22:	      |   move.l d0,24(sp)
    4b26:	      |   move.l #99580,20(sp)
    4b2e:	      |   moveq #21,d0
    4b30:	      |   move.l d0,16(sp)
    4b34:	      |   move.l 1cb2e <DOSBase>,d0
    4b3a:	      |   movea.l d0,a6
    4b3c:	      |   move.l 24(sp),d1
    4b40:	      |   move.l 20(sp),d2
    4b44:	      |   move.l 16(sp),d3
    4b48:	      |   jsr -48(a6)
    4b4c:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    4b50:	      |   pea 184fc <PutChar+0x782>
    4b56:	      |   jsr 172d8 <KPrintF>
    4b5c:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4b5e:	      |   moveq #0,d0
    4b60:	,-----|-- bra.w 4d62 <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    4b64:	|     '-> pea 18512 <PutChar+0x798>
    4b6a:	|         jsr 172d8 <KPrintF>
    4b70:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    4b72:	|         move.l 52(sp),-(sp)
    4b76:	|         jsr 4d6c <setGameFilePath>
    4b7c:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4b7e:	|         move.l 52(sp),-(sp)
    4b82:	|         jsr 62b6 <initSludge>
    4b88:	|         addq.l #4,sp
    4b8a:	|         tst.w d0
    4b8c:	|     ,-- bne.s 4b94 <main_sludge+0x1be>
    4b8e:	|     |   moveq #0,d0
    4b90:	+-----|-- bra.w 4d62 <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4b94:	|     '-> move.l 1ca7a <winWidth>,d0
    4b9a:	|         cmpi.l #320,d0
    4ba0:	|     ,-- bne.s 4bb0 <main_sludge+0x1da>
    4ba2:	|     |   move.l 1ca7e <winHeight>,d0
    4ba8:	|     |   cmpi.l #256,d0
    4bae:	|  ,--|-- beq.s 4bd2 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4bb0:	|  |  '-> pea 18523 <PutChar+0x7a9>
    4bb6:	|  |      jsr 172d8 <KPrintF>
    4bbc:	|  |      addq.l #4,sp
		winWidth = 320;
    4bbe:	|  |      move.l #320,1ca7a <winWidth>
		winHeight = 256;
    4bc8:	|  |      move.l #256,1ca7e <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4bd2:	|  '----> pea 185a0 <PutChar+0x826>
    4bd8:	|         jsr 172d8 <KPrintF>
    4bde:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4be0:	|         move.l 1ca7e <winHeight>,d0
    4be6:	|         move.l d0,d1
    4be8:	|         move.l 1ca7a <winWidth>,d0
    4bee:	|         move.l d1,-(sp)
    4bf0:	|         move.l d0,-(sp)
    4bf2:	|         jsr d3fc <resizeBackdrop>
    4bf8:	|         addq.l #8,sp
    4bfa:	|         tst.w d0
    4bfc:	|     ,-- bne.s 4c12 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4bfe:	|     |   pea 185b3 <PutChar+0x839>
    4c04:	|     |   jsr 172d8 <KPrintF>
    4c0a:	|     |   addq.l #4,sp
		return FALSE;
    4c0c:	|     |   moveq #0,d0
    4c0e:	+-----|-- bra.w 4d62 <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4c12:	|     '-> pea 185d9 <PutChar+0x85f>
    4c18:	|         jsr 172d8 <KPrintF>
    4c1e:	|         addq.l #4,sp
	if (! initPeople ())
    4c20:	|         jsr a916 <initPeople>
    4c26:	|         tst.w d0
    4c28:	|     ,-- bne.s 4c3e <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4c2a:	|     |   pea 185e6 <PutChar+0x86c>
    4c30:	|     |   jsr 172d8 <KPrintF>
    4c36:	|     |   addq.l #4,sp
		return FALSE;
    4c38:	|     |   moveq #0,d0
    4c3a:	+-----|-- bra.w 4d62 <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    4c3e:	|     '-> pea 18607 <PutChar+0x88d>
    4c44:	|         jsr 172d8 <KPrintF>
    4c4a:	|         addq.l #4,sp
	if (! initFloor ())
    4c4c:	|         jsr 1668e <initFloor>
    4c52:	|         tst.w d0
    4c54:	|     ,-- bne.s 4c6a <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    4c56:	|     |   pea 18613 <PutChar+0x899>
    4c5c:	|     |   jsr 172d8 <KPrintF>
    4c62:	|     |   addq.l #4,sp
		
		return FALSE;
    4c64:	|     |   moveq #0,d0
    4c66:	+-----|-- bra.w 4d62 <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    4c6a:	|     '-> pea 18633 <PutChar+0x8b9>
    4c70:	|         jsr 172d8 <KPrintF>
    4c76:	|         addq.l #4,sp
	if (! initObjectTypes ())
    4c78:	|         jsr d5b8 <initObjectTypes>
    4c7e:	|         tst.w d0
    4c80:	|     ,-- bne.s 4c96 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    4c82:	|     |   pea 18644 <PutChar+0x8ca>
    4c88:	|     |   jsr 172d8 <KPrintF>
    4c8e:	|     |   addq.l #4,sp
		return FALSE;
    4c90:	|     |   moveq #0,d0
    4c92:	+-----|-- bra.w 4d62 <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    4c96:	|     '-> pea 1866a <PutChar+0x8f0>
    4c9c:	|         jsr 172d8 <KPrintF>
    4ca2:	|         addq.l #4,sp
	initSpeech ();
    4ca4:	|         jsr 3e86 <initSpeech>
	KPrintF("Init status bar\n");
    4caa:	|         pea 18677 <PutChar+0x8fd>
    4cb0:	|         jsr 172d8 <KPrintF>
    4cb6:	|         addq.l #4,sp
	initStatusBar ();
    4cb8:	|         jsr 8316 <initStatusBar>

	KPrintF("Get numbered string\n");
    4cbe:	|         pea 18688 <PutChar+0x90e>
    4cc4:	|         jsr 172d8 <KPrintF>
    4cca:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    4ccc:	|         pea 1 <_start+0x1>
    4cd0:	|         jsr 7620 <getNumberedString>
    4cd6:	|         addq.l #4,sp
    4cd8:	|         move.l d0,1ca8a <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4cde:	|         pea 1869d <PutChar+0x923>
    4ce4:	|         jsr 172d8 <KPrintF>
    4cea:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    4cec:	|         move.l 1caf6 <noStack>,d0
    4cf2:	|         pea 1 <_start+0x1>
    4cf6:	|         move.l d0,-(sp)
    4cf8:	|         clr.l -(sp)
    4cfa:	|         clr.l -(sp)
    4cfc:	|         clr.l -(sp)
    4cfe:	|         jsr 7478 <startNewFunctionNum>
    4d04:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    4d08:	|         pea 186b5 <PutChar+0x93b>
    4d0e:	|         jsr 172d8 <KPrintF>
    4d14:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    4d16:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    4d1e:	|         clr.l 1ca96 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    4d24:	|     ,-- bra.s 4d44 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    4d26:	|  ,--|-> jsr 72f8 <sludgeDisplay>
		CsiCheckInput();
    4d2c:	|  |  |   jsr cf1a <CsiCheckInput>
		walkAllPeople();
    4d32:	|  |  |   jsr bed4 <walkAllPeople>
		handleInput();
    4d38:	|  |  |   jsr 6050 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    4d3e:	|  |  |   jsr 1720c <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    4d44:	|  |  '-> move.l 1ca96 <weAreDoneSoQuit>,d0
    4d4a:	|  '----- beq.s 4d26 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    4d4c:	|         move.l 52(sp),32(sp)
    4d52:	|         move.l 1cb26 <SysBase>,d0
    4d58:	|         movea.l d0,a6
    4d5a:	|         movea.l 32(sp),a1
    4d5e:	|         jsr -690(a6)
}
    4d62:	'-------> movem.l (sp)+,d2-d3/a6
    4d66:	          lea 44(sp),sp
    4d6a:	          rts

00004d6c <setGameFilePath>:

void setGameFilePath (char * f) {
    4d6c:	          lea -1104(sp),sp
    4d70:	          move.l a6,-(sp)
    4d72:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4d74:	          move.l #1112,d0
    4d7a:	          add.l sp,d0
    4d7c:	          addi.l #-1102,d0
    4d82:	          move.l d0,1100(sp)
    4d86:	          move.l #998,1096(sp)
    4d8e:	          move.l 1cb2e <DOSBase>,d0
    4d94:	          movea.l d0,a6
    4d96:	          move.l 1100(sp),d1
    4d9a:	          move.l 1096(sp),d2
    4d9e:	          jsr -564(a6)
    4da2:	          move.w d0,1094(sp)
    4da6:	          move.w 1094(sp),d0
    4daa:	      ,-- bne.s 4dba <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    4dac:	      |   pea 186c8 <PutChar+0x94e>
    4db2:	      |   jsr 172d8 <KPrintF>
    4db8:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    4dba:	      '-> moveq #-1,d0
    4dbc:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    4dc0:	          clr.l 1104(sp)
    4dc4:	   ,----- bra.s 4de2 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    4dc6:	,--|----> move.l 1104(sp),d0
    4dca:	|  |      movea.l 1116(sp),a0
    4dce:	|  |      adda.l d0,a0
    4dd0:	|  |      move.b (a0),d0
    4dd2:	|  |      cmpi.b #47,d0
    4dd6:	|  |  ,-- bne.s 4dde <setGameFilePath+0x72>
    4dd8:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    4dde:	|  |  '-> addq.l #1,1104(sp)
    4de2:	|  '----> move.l 1104(sp),d0
    4de6:	|         movea.l 1116(sp),a0
    4dea:	|         adda.l d0,a0
    4dec:	|         move.b (a0),d0
    4dee:	'-------- bne.s 4dc6 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4df0:	          moveq #-1,d0
    4df2:	          cmp.l 1108(sp),d0
    4df6:	   ,----- beq.s 4e70 <setGameFilePath+0x104>
		f[got] = 0;	
    4df8:	   |      move.l 1108(sp),d0
    4dfc:	   |      movea.l 1116(sp),a0
    4e00:	   |      adda.l d0,a0
    4e02:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    4e04:	   |      move.l 1116(sp),1090(sp)
    4e0a:	   |      moveq #-2,d0
    4e0c:	   |      move.l d0,1086(sp)
    4e10:	   |      move.l 1cb2e <DOSBase>,d0
    4e16:	   |      movea.l d0,a6
    4e18:	   |      move.l 1090(sp),d1
    4e1c:	   |      move.l 1086(sp),d2
    4e20:	   |      jsr -84(a6)
    4e24:	   |      move.l d0,1082(sp)
    4e28:	   |      move.l 1082(sp),d0
    4e2c:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    4e30:	   |      move.l 1078(sp),1074(sp)
    4e36:	   |      move.l 1cb2e <DOSBase>,d0
    4e3c:	   |      movea.l d0,a6
    4e3e:	   |      move.l 1074(sp),d1
    4e42:	   |      jsr -126(a6)
    4e46:	   |      move.l d0,1070(sp)
    4e4a:	   |      move.l 1070(sp),d0
    4e4e:	   |  ,-- bne.s 4e62 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    4e50:	   |  |   move.l 1116(sp),-(sp)
    4e54:	   |  |   pea 186ee <PutChar+0x974>
    4e5a:	   |  |   jsr 172d8 <KPrintF>
    4e60:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    4e62:	   |  '-> move.l 1108(sp),d0
    4e66:	   |      movea.l 1116(sp),a0
    4e6a:	   |      adda.l d0,a0
    4e6c:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4e70:	   '----> move.l #400,1066(sp)
    4e78:	          clr.l 1062(sp)
    4e7c:	          move.l 1cb26 <SysBase>,d0
    4e82:	          movea.l d0,a6
    4e84:	          move.l 1066(sp),d0
    4e88:	          move.l 1062(sp),d1
    4e8c:	          jsr -684(a6)
    4e90:	          move.l d0,1058(sp)
    4e94:	          move.l 1058(sp),d0
    4e98:	          move.l d0,1ca8e <gamePath>
	if (gamePath==0) {
    4e9e:	          move.l 1ca8e <gamePath>,d0
    4ea4:	      ,-- bne.s 4eb8 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    4ea6:	      |   pea 18721 <PutChar+0x9a7>
    4eac:	      |   jsr 172d8 <KPrintF>
    4eb2:	      |   addq.l #4,sp
    4eb4:	   ,--|-- bra.w 4fa0 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    4eb8:	   |  '-> move.l 1ca8e <gamePath>,1054(sp)
    4ec0:	   |      moveq #-2,d0
    4ec2:	   |      move.l d0,1050(sp)
    4ec6:	   |      move.l 1cb2e <DOSBase>,d0
    4ecc:	   |      movea.l d0,a6
    4ece:	   |      move.l 1054(sp),d1
    4ed2:	   |      move.l 1050(sp),d2
    4ed6:	   |      jsr -84(a6)
    4eda:	   |      move.l d0,1046(sp)
    4ede:	   |      move.l 1046(sp),d0
    4ee2:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    4ee6:	   |      move.l 1042(sp),1038(sp)
    4eec:	   |      move.l 1cb2e <DOSBase>,d0
    4ef2:	   |      movea.l d0,a6
    4ef4:	   |      move.l 1038(sp),d1
    4ef8:	   |      jsr -126(a6)
    4efc:	   |      move.l d0,1034(sp)
    4f00:	   |      move.l 1034(sp),d0
    4f04:	   |  ,-- bne.s 4f14 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    4f06:	   |  |   pea 1875c <PutChar+0x9e2>
    4f0c:	   |  |   jsr 172d8 <KPrintF>
    4f12:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    4f14:	   |  '-> move.l #1112,d0
    4f1a:	   |      add.l sp,d0
    4f1c:	   |      addi.l #-1102,d0
    4f22:	   |      move.l d0,1030(sp)
    4f26:	   |      moveq #-2,d0
    4f28:	   |      move.l d0,1026(sp)
    4f2c:	   |      move.l 1cb2e <DOSBase>,d0
    4f32:	   |      movea.l d0,a6
    4f34:	   |      move.l 1030(sp),d1
    4f38:	   |      move.l 1026(sp),d2
    4f3c:	   |      jsr -84(a6)
    4f40:	   |      move.l d0,1022(sp)
    4f44:	   |      move.l 1022(sp),d0
    4f48:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    4f4c:	   |      move.l 1042(sp),1018(sp)
    4f52:	   |      move.l 1cb2e <DOSBase>,d0
    4f58:	   |      movea.l d0,a6
    4f5a:	   |      move.l 1018(sp),d1
    4f5e:	   |      jsr -126(a6)
    4f62:	   |      move.l d0,1014(sp)
    4f66:	   |      move.l 1014(sp),d0
    4f6a:	   |  ,-- bne.s 4f80 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    4f6c:	   |  |   moveq #10,d0
    4f6e:	   |  |   add.l sp,d0
    4f70:	   |  |   move.l d0,-(sp)
    4f72:	   |  |   pea 18788 <PutChar+0xa0e>
    4f78:	   |  |   jsr 172d8 <KPrintF>
    4f7e:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    4f80:	   |  '-> move.l 1ca8e <gamePath>,d0
    4f86:	   +----- beq.s 4fa0 <setGameFilePath+0x234>
    4f88:	   |      move.l 1ca8e <gamePath>,1010(sp)
    4f90:	   |      move.l 1cb26 <SysBase>,d0
    4f96:	   |      movea.l d0,a6
    4f98:	   |      movea.l 1010(sp),a1
    4f9c:	   |      jsr -690(a6)
}
    4fa0:	   '----> move.l (sp)+,d2
    4fa2:	          movea.l (sp)+,a6
    4fa4:	          lea 1104(sp),sp
    4fa8:	          rts

00004faa <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    4faa:	,-------> lea -16(sp),sp
    4fae:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    4fb0:	|         move.l 24(sp),d0
    4fb4:	|         move.l d0,-(sp)
    4fb6:	|         pea 18890 <PutChar+0xb16>
    4fbc:	|         jsr 172d8 <KPrintF>
    4fc2:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    4fc4:	|         move.l 24(sp),-(sp)
    4fc8:	|         jsr 7074 <pauseFunction>
    4fce:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    4fd0:	|     ,-- bra.s 4fe2 <abortFunction+0x38>
    4fd2:	|  ,--|-> moveq #24,d0
    4fd4:	|  |  |   add.l 24(sp),d0
    4fd8:	|  |  |   move.l d0,-(sp)
    4fda:	|  |  |   jsr 1517c <trimStack>
    4fe0:	|  |  |   addq.l #4,sp
    4fe2:	|  |  '-> movea.l 24(sp),a0
    4fe6:	|  |      move.l 24(a0),d0
    4fea:	|  '----- bne.s 4fd2 <abortFunction+0x28>
	FreeVec( fun -> compiledLines);
    4fec:	|         movea.l 24(sp),a0
    4ff0:	|         move.l 4(a0),12(sp)
    4ff6:	|         move.l 1cb26 <SysBase>,d0
    4ffc:	|         movea.l d0,a6
    4ffe:	|         movea.l 12(sp),a1
    5002:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5006:	|         clr.l 16(sp)
    500a:	|     ,-- bra.s 502a <abortFunction+0x80>
    500c:	|  ,--|-> movea.l 24(sp),a0
    5010:	|  |  |   move.l 20(a0),d1
    5014:	|  |  |   move.l 16(sp),d0
    5018:	|  |  |   lsl.l #3,d0
    501a:	|  |  |   add.l d1,d0
    501c:	|  |  |   move.l d0,-(sp)
    501e:	|  |  |   jsr 14a46 <unlinkVar>
    5024:	|  |  |   addq.l #4,sp
    5026:	|  |  |   addq.l #1,16(sp)
    502a:	|  |  '-> movea.l 24(sp),a0
    502e:	|  |      move.l 8(a0),d0
    5032:	|  |      cmp.l 16(sp),d0
    5036:	|  '----- bgt.s 500c <abortFunction+0x62>
	if( fun -> numLocals > 0) {
    5038:	|         movea.l 24(sp),a0
    503c:	|         move.l 8(a0),d0
    5040:	|     ,-- ble.s 505c <abortFunction+0xb2>
		FreeVec(fun -> localVars);
    5042:	|     |   movea.l 24(sp),a0
    5046:	|     |   move.l 20(a0),8(sp)
    504c:	|     |   move.l 1cb26 <SysBase>,d0
    5052:	|     |   movea.l d0,a6
    5054:	|     |   movea.l 8(sp),a1
    5058:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    505c:	|     '-> moveq #28,d0
    505e:	|         add.l 24(sp),d0
    5062:	|         move.l d0,-(sp)
    5064:	|         jsr 14a46 <unlinkVar>
    506a:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    506c:	|         movea.l 24(sp),a0
    5070:	|         move.l 40(a0),d0
    5074:	|     ,-- beq.s 5086 <abortFunction+0xdc>
    5076:	|     |   movea.l 24(sp),a0
    507a:	|     |   move.l 40(a0),d0
    507e:	|     |   move.l d0,-(sp)
    5080:	'-----|-- jsr 4faa <abortFunction>(pc)
    5084:	      |   addq.l #4,sp
	FreeVec(fun);
    5086:	      '-> move.l 24(sp),4(sp)
    508c:	          move.l 1cb26 <SysBase>,d0
    5092:	          movea.l d0,a6
    5094:	          movea.l 4(sp),a1
    5098:	          jsr -690(a6)
	fun = NULL;
    509c:	          clr.l 24(sp)
	KPrintF("abortFunction finished\n");
    50a0:	          pea 188aa <PutChar+0xb30>
    50a6:	          jsr 172d8 <KPrintF>
    50ac:	          addq.l #4,sp
}
    50ae:	          nop
    50b0:	          movea.l (sp)+,a6
    50b2:	          lea 16(sp),sp
    50b6:	          rts

000050b8 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    50b8:	          subq.l #8,sp
	int n = 0;
    50ba:	          clr.l 4(sp)
	*killedMyself = FALSE;
    50be:	          movea.l 20(sp),a0
    50c2:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    50c4:	          move.l 1cabe <allRunningFunctions>,(sp)
	while (fun) {
    50ca:	   ,----- bra.s 50f8 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    50cc:	,--|----> movea.l (sp),a0
    50ce:	|  |      move.l (a0),d0
    50d0:	|  |      cmp.l 12(sp),d0
    50d4:	|  |  ,-- bne.s 50f2 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    50d6:	|  |  |   movea.l (sp),a0
    50d8:	|  |  |   move.w #1,54(a0)
			n++;
    50de:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    50e2:	|  |  |   move.l (sp),d0
    50e4:	|  |  |   cmp.l 16(sp),d0
    50e8:	|  |  +-- bne.s 50f2 <cancelAFunction+0x3a>
    50ea:	|  |  |   movea.l 20(sp),a0
    50ee:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    50f2:	|  |  '-> movea.l (sp),a0
    50f4:	|  |      move.l 44(a0),(sp)
	while (fun) {
    50f8:	|  '----> tst.l (sp)
    50fa:	'-------- bne.s 50cc <cancelAFunction+0x14>
	}
	return n;
    50fc:	          move.l 4(sp),d0
}
    5100:	          addq.l #8,sp
    5102:	          rts

00005104 <completeTimers>:


void completeTimers () {
    5104:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5106:	          move.l 1cabe <allRunningFunctions>,(sp)

	while (thisFunction) {
    510c:	   ,----- bra.s 5122 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    510e:	,--|----> movea.l (sp),a0
    5110:	|  |      move.b 56(a0),d0
    5114:	|  |  ,-- bne.s 511c <completeTimers+0x18>
    5116:	|  |  |   movea.l (sp),a0
    5118:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    511c:	|  |  '-> movea.l (sp),a0
    511e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5122:	|  '----> tst.l (sp)
    5124:	'-------- bne.s 510e <completeTimers+0xa>
	}
}
    5126:	          nop
    5128:	          nop
    512a:	          addq.l #4,sp
    512c:	          rts

0000512e <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    512e:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    5132:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    5138:	                                                             movea.l 80(sp),a0
    513c:	                                                             move.w 54(a0),d0
    5140:	,----------------------------------------------------------- beq.w 5fce <continueFunction+0xea0>
		abortFunction (fun);
    5144:	|                                                            move.l 80(sp),-(sp)
    5148:	|                                                            jsr 4faa <abortFunction>
    514e:	|                                                            addq.l #4,sp
		return TRUE;
    5150:	|                                                            moveq #1,d0
    5152:	|  ,-------------------------------------------------------- bra.w 5fd8 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    5156:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    515c:	|  |  |                                                      movea.l 80(sp),a0
    5160:	|  |  |                                                      move.l 4(a0),d1
    5164:	|  |  |                                                      movea.l 80(sp),a0
    5168:	|  |  |                                                      move.l 36(a0),d0
    516c:	|  |  |                                                      lsl.l #3,d0
    516e:	|  |  |                                                      movea.l d1,a0
    5170:	|  |  |                                                      adda.l d0,a0
    5172:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    5178:	|  |  |                                                      movea.l 80(sp),a0
    517c:	|  |  |                                                      move.l 4(a0),d1
    5180:	|  |  |                                                      movea.l 80(sp),a0
    5184:	|  |  |                                                      move.l 36(a0),d0
    5188:	|  |  |                                                      lsl.l #3,d0
    518a:	|  |  |                                                      movea.l d1,a0
    518c:	|  |  |                                                      adda.l d0,a0
    518e:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    5192:	|  |  |                                                      moveq #41,d0
    5194:	|  |  |                                                      cmp.l 64(sp),d0
    5198:	|  |  |  ,-------------------------------------------------- bcs.w 5f82 <continueFunction+0xe54>
    519c:	|  |  |  |                                                   move.l 64(sp),d0
    51a0:	|  |  |  |                                                   add.l d0,d0
    51a2:	|  |  |  |                                                   movea.l d0,a0
    51a4:	|  |  |  |                                                   adda.l #20912,a0
    51aa:	|  |  |  |                                                   move.w (a0),d0
    51ac:	|  |  |  |                                                   jmp (51b0 <continueFunction+0x82>,pc,d0.w)
    51b0:	|  |  |  |                                                   bset d6,(a2)
    51b2:	|  |  |  |                                                   ori.w #2670,(a4)
    51b6:	|  |  |  |                                                   eori.w #2416,d6
    51ba:	|  |  |  |                                                   bchg d4,d2
    51bc:	|  |  |  |                                                   bclr d4,(a4)+
    51be:	|  |  |  |                                                   andi.l #181013194,d4
    51c4:	|  |  |  |                                                   .short 0x0aca
    51c6:	|  |  |  |                                                   .short 0x0aca
    51c8:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    51d0:	|  |  |  |                                                   .short 0x0aca
    51d2:	|  |  |  |                                                   andi.w #906,-(a4)
    51d6:	|  |  |  |                                                   bchg d1,196(a2)
    51da:	|  |  |  |                                                   bset d1,580(a4)
    51de:	|  |  |  |                                                   bclr d1,2576(a2)
    51e2:	|  |  |  |                                                   andi.b #-56,2762(a2)
    51e8:	|  |  |  |                                                   .short 0x0aca
    51ea:	|  |  |  |                                                   eori.l #63572682,d0
    51f0:	|  |  |  |                                                   .short 0x0aca
    51f2:	|  |  |  |                                                   bchg d3,-(a2)
    51f4:	|  |  |  |                                                   bchg #-36,(a2)
    51f8:	|  |  |  |                                                   .short 0x08cc
    51fa:	|  |  |  |                                                   addi.b #14,1038(a0)
    5200:	|  |  |  |                                                   .short 0x040e
    5202:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    5206:	|  |  |  |                                                   ori.w #8232,(a0)
    520a:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    5210:	|  |  |  |                                                   ori.w #12136,(a0)
    5214:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    521a:	|  |  |  |                                                   ori.w #12328,(a0)
    521e:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    5224:	|  |  |  |                                                   add.l 44(sp),d1
    5228:	|  |  |  |                                                   moveq #28,d0
    522a:	|  |  |  |                                                   add.l 80(sp),d0
    522e:	|  |  |  |                                                   move.l d1,-(sp)
    5230:	|  |  |  |                                                   move.l d0,-(sp)
    5232:	|  |  |  |                                                   jsr 14cb2 <copyVariable>
    5238:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    523a:	|  |  |  |                                                   move.l 80(sp),-(sp)
    523e:	|  |  |  |                                                   jsr 5fde <finishFunction>
    5244:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    5246:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    524c:	|  |  |  |                                                   move.l 80(sp),-(sp)
    5250:	|  |  |  |                                                   jsr 711c <restartFunction>
    5256:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    5258:	|  |  |  |  ,----------------------------------------------- bra.w 5fb6 <continueFunction+0xe88>
				finishFunction (fun);
    525c:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    5260:	|  |  |  |  |                                                jsr 5fde <finishFunction>
    5266:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    5268:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    526c:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    5270:	|  |  |  |  +----------------------------------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    5274:	|  |  |  |  |                                                movea.l 80(sp),a0
    5278:	|  |  |  |  |                                                move.l 28(a0),d0
    527c:	|  |  |  |  |                                                moveq #2,d1
    527e:	|  |  |  |  |                                                cmp.l d0,d1
    5280:	|  |  |  |  |                                            ,-- beq.s 528c <continueFunction+0x15e>
    5282:	|  |  |  |  |                                            |   moveq #4,d1
    5284:	|  |  |  |  |                                            |   cmp.l d0,d1
    5286:	|  |  |  |  |                                         ,--|-- beq.s 52da <continueFunction+0x1ac>
    5288:	|  |  |  |  |                                ,--------|--|-- bra.w 53c2 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    528c:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    5290:	|  |  |  |  |                                |        |      jsr 7074 <pauseFunction>
    5296:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    5298:	|  |  |  |  |                                |        |      moveq #24,d0
    529a:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    529e:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    52a2:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    52a6:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    52aa:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    52ac:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    52b0:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    52b4:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    52b6:	|  |  |  |  |                                |        |      jsr 7478 <startNewFunctionNum>
    52bc:	|  |  |  |  |                                |        |      lea 20(sp),sp
    52c0:	|  |  |  |  |                                |        |      tst.l d0
    52c2:	|  |  |  |  |                                |        |  ,-- bne.s 52ca <continueFunction+0x19c>
    52c4:	|  |  |  |  |                                |        |  |   clr.w d0
    52c6:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 5fd8 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    52ca:	|  |  |  |  |                                |        |  '-> move.l 1cabe <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    52d2:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    52d6:	|  |  |  |  |                                |  ,-----|----- bra.w 53d6 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    52da:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    52de:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    52e2:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    52e6:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    52ea:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    52ec:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    52ee:	|  |  |  |  |                                |  |            jsr 134da <callBuiltIn>
    52f4:	|  |  |  |  |                                |  |            lea 12(sp),sp
    52f8:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    52fc:	|  |  |  |  |                                |  |            moveq #5,d0
    52fe:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    5302:	|  |  |  |  |                                |  |  ,-------- bcs.w 53be <continueFunction+0x290>
    5306:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    530a:	|  |  |  |  |                                |  |  |         add.l d0,d0
    530c:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    530e:	|  |  |  |  |                                |  |  |         adda.l #21274,a0
    5314:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    5316:	|  |  |  |  |                                |  |  |         jmp (531a <continueFunction+0x1ec>,pc,d0.w)
    531a:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    5320:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    5324:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    532a:	|  |  |  |  |                                |  |  |         divu.w d2,d4
    532c:	|  |  |  |  |                                |  |  |         jsr 172d8 <KPrintF>
    5332:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    5334:	|  |  |  |  |                                |  |  |         clr.w d0
    5336:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 5fd8 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    533a:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    533e:	|  |  |  |  |                                |  |  |         jsr 7074 <pauseFunction>
    5344:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    5346:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    534a:	|  |  |  |  |                                |  |  |  ,----- bra.s 53c0 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    534c:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    5350:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    5354:	|  |  |  |  |                                |  |  |  +----- bra.s 53c0 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    5356:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    535a:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    5360:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    5362:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    5366:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    536a:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    536e:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5370:	|  |  |  |  |                                |  |  |  |      jsr 150ea <setVariable>
    5376:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    537a:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    537e:	|  |  |  |  |                                |  |  |  |      jsr 7074 <pauseFunction>
    5384:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    5386:	|  |  |  |  |                                |  |  |  |      move.l 1caf6 <noStack>,d1
    538c:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    5390:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5392:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    5394:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    5398:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    539a:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    539c:	|  |  |  |  |                                |  |  |  |      jsr 7478 <startNewFunctionNum>
    53a2:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    53a6:	|  |  |  |  |                                |  |  |  |      tst.l d0
    53a8:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 53b0 <continueFunction+0x282>
    53aa:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    53ac:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 5fd8 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    53b0:	|  |  |  |  |                                |  |  |  |  '-> move.l 1cabe <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    53b8:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    53bc:	|  |  |  |  |                                |  |  |  +----- bra.s 53c0 <continueFunction+0x292>

						default:
						break;
    53be:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    53c0:	|  |  |  |  |                                |  +-----'----X bra.s 53d6 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    53c2:	|  |  |  |  |                                '--|----------> pea 1890d <PutChar+0xb93>
    53c8:	|  |  |  |  |                                   |            jsr 172d8 <KPrintF>
    53ce:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    53d0:	|  |  |  |  |                                   |            clr.w d0
    53d2:	|  +--|--|--|-----------------------------------|----------- bra.w 5fd8 <continueFunction+0xeaa>
			}
			break;
    53d6:	|  |  |  |  +-----------------------------------'----------X bra.w 5fb6 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    53da:	|  |  |  |  |                                                moveq #28,d0
    53dc:	|  |  |  |  |                                                add.l 80(sp),d0
    53e0:	|  |  |  |  |                                                clr.l -(sp)
    53e2:	|  |  |  |  |                                                clr.l -(sp)
    53e4:	|  |  |  |  |                                                move.l d0,-(sp)
    53e6:	|  |  |  |  |                                                jsr 150ea <setVariable>
    53ec:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    53f0:	|  |  |  |  +----------------------------------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    53f4:	|  |  |  |  |                                                move.l 68(sp),d1
    53f8:	|  |  |  |  |                                                moveq #28,d0
    53fa:	|  |  |  |  |                                                add.l 80(sp),d0
    53fe:	|  |  |  |  |                                                move.l d1,-(sp)
    5400:	|  |  |  |  |                                                pea 5 <_start+0x5>
    5404:	|  |  |  |  |                                                move.l d0,-(sp)
    5406:	|  |  |  |  |                                                jsr 150ea <setVariable>
    540c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    5410:	|  |  |  |  +----------------------------------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    5414:	|  |  |  |  |                                                move.l 68(sp),d1
    5418:	|  |  |  |  |                                                moveq #28,d0
    541a:	|  |  |  |  |                                                add.l 80(sp),d0
    541e:	|  |  |  |  |                                                move.l d1,-(sp)
    5420:	|  |  |  |  |                                                pea 1 <_start+0x1>
    5424:	|  |  |  |  |                                                move.l d0,-(sp)
    5426:	|  |  |  |  |                                                jsr 150ea <setVariable>
    542c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    5430:	|  |  |  |  +----------------------------------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    5434:	|  |  |  |  |                                                moveq #28,d0
    5436:	|  |  |  |  |                                                add.l 80(sp),d0
    543a:	|  |  |  |  |                                                movea.l 80(sp),a0
    543e:	|  |  |  |  |                                                movea.l 20(a0),a0
    5442:	|  |  |  |  |                                                move.l 68(sp),d1
    5446:	|  |  |  |  |                                                lsl.l #3,d1
    5448:	|  |  |  |  |                                                add.l a0,d1
    544a:	|  |  |  |  |                                                move.l d0,-(sp)
    544c:	|  |  |  |  |                                                move.l d1,-(sp)
    544e:	|  |  |  |  |                                                jsr 14cb2 <copyVariable>
    5454:	|  |  |  |  |                                                addq.l #8,sp
    5456:	|  |  |  |  |                                                tst.w d0
    5458:	|  |  |  |  |  ,-------------------------------------------- bne.w 5f94 <continueFunction+0xe66>
    545c:	|  |  |  |  |  |                                             clr.w d0
    545e:	|  +--|--|--|--|-------------------------------------------- bra.w 5fd8 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    5462:	|  |  |  |  |  |                                             moveq #28,d0
    5464:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5468:	|  |  |  |  |  |                                             move.l d0,-(sp)
    546a:	|  |  |  |  |  |                                             jsr 14d38 <getBoolean>
    5470:	|  |  |  |  |  |                                             addq.l #4,sp
    5472:	|  |  |  |  |  |                                             tst.w d0
    5474:	|  |  |  |  |  |                                      ,----- beq.s 5490 <continueFunction+0x362>
    5476:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    547a:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    547e:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    5480:	|  |  |  |  |  |                                      |      jsr 14d38 <getBoolean>
    5486:	|  |  |  |  |  |                                      |      addq.l #4,sp
    5488:	|  |  |  |  |  |                                      |      tst.w d0
    548a:	|  |  |  |  |  |                                      +----- beq.s 5490 <continueFunction+0x362>
    548c:	|  |  |  |  |  |                                      |      moveq #1,d0
    548e:	|  |  |  |  |  |                                      |  ,-- bra.s 5492 <continueFunction+0x364>
    5490:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5492:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5494:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5498:	|  |  |  |  |  |                                             move.l d0,-(sp)
    549a:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    549e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    54a0:	|  |  |  |  |  |                                             jsr 150ea <setVariable>
    54a6:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    54aa:	|  |  |  |  |  |                                             moveq #24,d0
    54ac:	|  |  |  |  |  |                                             add.l 80(sp),d0
    54b0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    54b2:	|  |  |  |  |  |                                             jsr 1517c <trimStack>
    54b8:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    54ba:	|  |  |  |  +--|-------------------------------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    54be:	|  |  |  |  |  |                                             moveq #28,d0
    54c0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    54c4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    54c6:	|  |  |  |  |  |                                             jsr 14d38 <getBoolean>
    54cc:	|  |  |  |  |  |                                             addq.l #4,sp
    54ce:	|  |  |  |  |  |                                             tst.w d0
    54d0:	|  |  |  |  |  |                                         ,-- bne.s 54e8 <continueFunction+0x3ba>
    54d2:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    54d6:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    54da:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    54dc:	|  |  |  |  |  |                                         |   jsr 14d38 <getBoolean>
    54e2:	|  |  |  |  |  |                                         |   addq.l #4,sp
    54e4:	|  |  |  |  |  |                                         |   tst.w d0
    54e6:	|  |  |  |  |  |                                      ,--|-- beq.s 54ec <continueFunction+0x3be>
    54e8:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    54ea:	|  |  |  |  |  |                                      |  ,-- bra.s 54ee <continueFunction+0x3c0>
    54ec:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    54ee:	|  |  |  |  |  |                                         '-> moveq #28,d1
    54f0:	|  |  |  |  |  |                                             add.l 80(sp),d1
    54f4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    54f6:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    54fa:	|  |  |  |  |  |                                             move.l d1,-(sp)
    54fc:	|  |  |  |  |  |                                             jsr 150ea <setVariable>
    5502:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5506:	|  |  |  |  |  |                                             moveq #24,d0
    5508:	|  |  |  |  |  |                                             add.l 80(sp),d0
    550c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    550e:	|  |  |  |  |  |                                             jsr 1517c <trimStack>
    5514:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5516:	|  |  |  |  +--|-------------------------------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    551a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    551e:	|  |  |  |  |  |                                             moveq #28,d0
    5520:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5524:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5526:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    552a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    552c:	|  |  |  |  |  |                                             jsr 150ea <setVariable>
    5532:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5536:	|  |  |  |  +--|-------------------------------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    553a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    553e:	|  |  |  |  |  |                                             moveq #28,d0
    5540:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5544:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5546:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    554a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    554c:	|  |  |  |  |  |                                             jsr 150ea <setVariable>
    5552:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5556:	|  |  |  |  +--|-------------------------------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    555a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    555e:	|  |  |  |  |  |                                             moveq #28,d0
    5560:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5564:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5566:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    556a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    556c:	|  |  |  |  |  |                                             jsr 150ea <setVariable>
    5572:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5576:	|  |  |  |  +--|-------------------------------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    557a:	|  |  |  |  |  |                                             move.l 1ca86 <dialogValue>,d0
    5580:	|  |  |  |  |  |                                             moveq #1,d1
    5582:	|  |  |  |  |  |                                             cmp.l d0,d1
    5584:	|  |  |  |  |  |  ,----------------------------------------- beq.w 5f98 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    5588:	|  |  |  |  |  |  |                                          pea 18922 <PutChar+0xba8>
    558e:	|  |  |  |  |  |  |                                          jsr 172d8 <KPrintF>
    5594:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    5596:	|  |  |  |  |  |  |                                          clr.w d0
    5598:	|  +--|--|--|--|--|----------------------------------------- bra.w 5fd8 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    559c:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    55a0:	|  |  |  |  |  |  |                                          moveq #28,d0
    55a2:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    55a6:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    55a8:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    55aa:	|  |  |  |  |  |  |                                          jsr 1487c <loadStringToVar>
    55b0:	|  |  |  |  |  |  |                                          addq.l #8,sp
    55b2:	|  |  |  |  |  |  |                                          tst.w d0
    55b4:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 5f9c <continueFunction+0xe6e>
					return FALSE;
    55b8:	|  |  |  |  |  |  |  |                                       clr.w d0
    55ba:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5fd8 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    55be:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    55c2:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    55c6:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    55c8:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    55ca:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    55cc:	|  |  |  |  |  |  |  |                                ,----- beq.s 562a <continueFunction+0x4fc>
    55ce:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    55d0:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    55d2:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 57be <continueFunction+0x690>
    55d6:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    55d8:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 55e4 <continueFunction+0x4b6>
    55da:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    55dc:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    55de:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 562a <continueFunction+0x4fc>
    55e0:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 57be <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    55e4:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    55e6:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    55ea:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 5616 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    55ec:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    55ee:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    55f2:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    55f4:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    55f6:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    55f8:	|  |  |  |  |  |  |  |              |                 |  |   jsr 150ea <setVariable>
    55fe:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    5602:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    5604:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    5608:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    560a:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1517c <trimStack>
    5610:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    5612:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 57d4 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    5616:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 18963 <PutChar+0xbe9>
    561c:	|  |  |  |  |  |  |  |              |  |              |      jsr 172d8 <KPrintF>
    5622:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    5624:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    5626:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 5fd8 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    562a:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    562e:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5632:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    5636:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    5638:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 564e <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    563a:	|  |  |  |  |  |  |  |              |  |                 |   pea 1899f <PutChar+0xc25>
    5640:	|  |  |  |  |  |  |  |              |  |                 |   jsr 172d8 <KPrintF>
    5646:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    5648:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    564a:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5fd8 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    564e:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    5650:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5654:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5656:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    565a:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    565e:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    5660:	|  |  |  |  |  |  |  |              |  |                     jsr 147f8 <getValueType>
    5666:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    566a:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    566c:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5674 <continueFunction+0x546>
    566e:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5670:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5fd8 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5674:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    5678:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    567c:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    567e:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    5680:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    5682:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 56a4 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    5684:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    5688:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    568a:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    568e:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    5692:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    5696:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    5698:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    569a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14482 <fastArrayGetByIndex>
    56a0:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    56a2:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 56c4 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    56a4:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    56a8:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    56aa:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    56ae:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    56b2:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    56b6:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    56b8:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    56ba:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    56bc:	|  |  |  |  |  |  |  |              |  |              |      jsr 1510c <stackGetByIndex>
    56c2:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    56c4:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    56c8:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    56ca:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    56ce:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    56d0:	|  |  |  |  |  |  |  |              |  |                     jsr 1517c <trimStack>
    56d6:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    56d8:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    56dc:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 56f8 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    56de:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    56e0:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    56e4:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    56e6:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    56e8:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    56ea:	|  |  |  |  |  |  |  |              |  |                 |   jsr 150ea <setVariable>
    56f0:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    56f4:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 57d2 <continueFunction+0x6a4>
						switch (com) {
    56f8:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    56fa:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    56fe:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 570c <continueFunction+0x5de>
    5700:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    5702:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    5706:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 5756 <continueFunction+0x628>
    5708:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 579e <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    570c:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    5710:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    5714:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    5718:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    571a:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 147f8 <getValueType>
    5720:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    5724:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    5726:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 572e <continueFunction+0x600>
    5728:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    572a:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 57b8 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    572e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    5730:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    5732:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    5736:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    5738:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    573c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    573e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 150ea <setVariable>
    5744:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    5748:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    574a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    574c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    5750:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    5754:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 57bc <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5756:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    575a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    575e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    5762:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    5764:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 147f8 <getValueType>
    576a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    576e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    5770:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 5776 <continueFunction+0x648>
    5772:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    5774:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 57b8 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5776:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    5778:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    577a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    577e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    5780:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5784:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    5786:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 150ea <setVariable>
    578c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5790:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    5792:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    5794:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    5798:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    579c:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 57bc <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    579e:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    57a0:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    57a4:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    57a6:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    57aa:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14cb2 <copyVariable>
    57b0:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    57b2:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    57b4:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 57d2 <continueFunction+0x6a4>
    57b6:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    57b8:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 5fd8 <continueFunction+0xeaa>
				break;
    57bc:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 57d2 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    57be:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 189bd <PutChar+0xc43>
    57c4:	|  |  |  |  |  |  |  |                 |  |                  jsr 172d8 <KPrintF>
    57ca:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    57cc:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    57ce:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 5fd8 <continueFunction+0xeaa>
				break;
    57d2:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    57d4:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 5fb6 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    57d8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    57dc:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    57e0:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    57e2:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    57e4:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    57e6:	|  |  |  |  |  |  |  |                                   ,-- beq.s 57f4 <continueFunction+0x6c6>
    57e8:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    57ea:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    57ec:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 58a0 <continueFunction+0x772>
    57f0:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 58fe <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    57f4:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    57f8:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    57fc:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5800:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5802:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5818 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    5804:	|  |  |  |  |  |  |  |                             |  |  |   pea 1899f <PutChar+0xc25>
    580a:	|  |  |  |  |  |  |  |                             |  |  |   jsr 172d8 <KPrintF>
    5810:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    5812:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5814:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5fd8 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5818:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    581a:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    581e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5820:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    5824:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    5828:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    582a:	|  |  |  |  |  |  |  |                             |  |      jsr 147f8 <getValueType>
    5830:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5834:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5836:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 583e <continueFunction+0x710>
    5838:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    583a:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5fd8 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    583e:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5842:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5846:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    584a:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    584c:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5850:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5852:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    5856:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    585a:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    585e:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5860:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5862:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    5864:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5866:	|  |  |  |  |  |  |  |                             |  |      jsr 7324 <stackSetByIndex>
    586c:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5870:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5872:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 587a <continueFunction+0x74c>
						return FALSE;
    5874:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5876:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5fd8 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    587a:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    587c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5880:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5882:	|  |  |  |  |  |  |  |                             |  |      jsr 1517c <trimStack>
    5888:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    588a:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    588c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5890:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5892:	|  |  |  |  |  |  |  |                             |  |      jsr 1517c <trimStack>
    5898:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    589a:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    589c:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 5fb6 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    58a0:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    58a2:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    58a6:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    58a8:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    58ac:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    58b0:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    58b2:	|  |  |  |  |  |  |  |                             |         jsr 147f8 <getValueType>
    58b8:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    58bc:	|  |  |  |  |  |  |  |                             |         tst.w d0
    58be:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 58c6 <continueFunction+0x798>
    58c0:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    58c2:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 5fd8 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    58c6:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    58ca:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    58cc:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    58d0:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    58d4:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    58d8:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    58da:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    58dc:	|  |  |  |  |  |  |  |                             |         jsr 14482 <fastArrayGetByIndex>
    58e2:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    58e4:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    58e8:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 58f8 <continueFunction+0x7ca>
    58ea:	|  |  |  |  |  |  |  |                             |     |   pea 189e1 <PutChar+0xc67>
    58f0:	|  |  |  |  |  |  |  |                             |     |   jsr 172d8 <KPrintF>
    58f6:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    58f8:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    58fa:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 5fd8 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    58fe:	|  |  |  |  |  |  |  |                             '-------> pea 189bd <PutChar+0xc43>
    5904:	|  |  |  |  |  |  |  |                                       jsr 172d8 <KPrintF>
    590a:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    590c:	|  |  |  |  |  |  |  |                                       clr.w d0
    590e:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5fd8 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5912:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5916:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    591a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    591e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5920:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5922:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5924:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5928:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    592c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    592e:	|  |  |  |  |  |  |  |                                       jsr 147f8 <getValueType>
    5934:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5938:	|  |  |  |  |  |  |  |                                       tst.w d0
    593a:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5942 <continueFunction+0x814>
    593c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    593e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5fd8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5942:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    5946:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5948:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    594c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    594e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5952:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5954:	|  |  |  |  |  |  |  |                                       jsr 150ea <setVariable>
    595a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    595e:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5962:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5964:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5966:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    596a:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    596e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5972:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5974:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5976:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5978:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    597c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    597e:	|  |  |  |  |  |  |  |                                       jsr 150ea <setVariable>
    5984:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5988:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    598c:	|  |  |  |  |  |  |  |                                       move.l 1cad4 <globalVars>,d1
    5992:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5996:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5998:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    599a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    599c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    59a0:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    59a4:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    59a6:	|  |  |  |  |  |  |  |                                       jsr 147f8 <getValueType>
    59ac:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    59b0:	|  |  |  |  |  |  |  |                                       tst.w d0
    59b2:	|  |  |  |  |  |  |  |                                   ,-- bne.s 59ba <continueFunction+0x88c>
    59b4:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    59b6:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5fd8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    59ba:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    59be:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    59c0:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    59c4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    59c6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    59ca:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    59cc:	|  |  |  |  |  |  |  |                                       jsr 150ea <setVariable>
    59d2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    59d6:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    59da:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    59dc:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    59de:	|  |  |  |  |  |  |  |                                       movea.l 1cad4 <globalVars>,a0
    59e4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    59e8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    59ea:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    59ec:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    59ee:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    59f2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    59f4:	|  |  |  |  |  |  |  |                                       jsr 150ea <setVariable>
    59fa:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    59fe:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5a02:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5a06:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5a0a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a0e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a10:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5a12:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a14:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a18:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5a1c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5a1e:	|  |  |  |  |  |  |  |                                       jsr 147f8 <getValueType>
    5a24:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5a28:	|  |  |  |  |  |  |  |                                       tst.w d0
    5a2a:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5a32 <continueFunction+0x904>
    5a2c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5a2e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5fd8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5a32:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    5a36:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5a38:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5a3c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5a3e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a42:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a44:	|  |  |  |  |  |  |  |                                       jsr 150ea <setVariable>
    5a4a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5a4e:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5a52:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5a54:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5a56:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5a5a:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5a5e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a62:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a64:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5a66:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5a68:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a6c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a6e:	|  |  |  |  |  |  |  |                                       jsr 150ea <setVariable>
    5a74:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5a78:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5a7c:	|  |  |  |  |  |  |  |                                       move.l 1cad4 <globalVars>,d1
    5a82:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a86:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a88:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5a8a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a8c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a90:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    5a94:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5a96:	|  |  |  |  |  |  |  |                                       jsr 147f8 <getValueType>
    5a9c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5aa0:	|  |  |  |  |  |  |  |                                       tst.w d0
    5aa2:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5aaa <continueFunction+0x97c>
    5aa4:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5aa6:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5fd8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5aaa:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    5aae:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5ab0:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5ab4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ab6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5aba:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5abc:	|  |  |  |  |  |  |  |                                       jsr 150ea <setVariable>
    5ac2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    5ac6:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5aca:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5acc:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5ace:	|  |  |  |  |  |  |  |                                       movea.l 1cad4 <globalVars>,a0
    5ad4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5ad8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5ada:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5adc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ade:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ae2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ae4:	|  |  |  |  |  |  |  |                                       jsr 150ea <setVariable>
    5aea:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5aee:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    5af2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5af6:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5afa:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5afe:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5b00:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    5b02:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5b04:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5b08:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5b0a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5b0c:	|  |  |  |  |  |  |  |                                       jsr 14cb2 <copyVariable>
    5b12:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5b14:	|  |  |  |  |  |  |  |                                       tst.w d0
    5b16:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 5fa0 <continueFunction+0xe72>
    5b1a:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5b1c:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 5fd8 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5b20:	|  |  |  |  |  |  |  |  |                                    move.l 1cad4 <globalVars>,d1
    5b26:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5b2a:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5b2c:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5b2e:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5b30:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5b34:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    5b36:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    5b38:	|  |  |  |  |  |  |  |  |                                    jsr 14cb2 <copyVariable>
    5b3e:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    5b40:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    5b42:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 5fa4 <continueFunction+0xe76>
    5b46:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    5b48:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 5fd8 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    5b4c:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    5b4e:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    5b52:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1cad4 <globalVars>,a0
    5b58:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    5b5c:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    5b5e:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    5b60:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    5b62:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    5b64:	|  |  |  |  |  |  |  |  |  |                                 jsr 14cb2 <copyVariable>
    5b6a:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    5b6c:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    5b6e:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 5fa8 <continueFunction+0xe7a>
    5b72:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    5b74:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 5fd8 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    5b78:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    5b7a:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    5b7e:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    5b80:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    5b84:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    5b86:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    5b88:	|  |  |  |  |  |  |  |  |  |  |                              jsr 14034 <addVarToStack>
    5b8e:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5b90:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5b92:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 5fac <continueFunction+0xe7e>
    5b96:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    5b98:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 5fd8 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5b9c:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5b9e:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5ba2:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    5ba4:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    5ba8:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5baa:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5bac:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 140ba <addVarToStackQuick>
    5bb2:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    5bb4:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    5bb6:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 5fb0 <continueFunction+0xe82>
    5bba:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5bbc:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 5fd8 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5bc0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5bc2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5bc6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5bc8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14d38 <getBoolean>
    5bce:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5bd0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5bd2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    5bd4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    5bd6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    5bd8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5bda:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5bdc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5be0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5be2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    5be6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5be8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 150ea <setVariable>
    5bee:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5bf2:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    5bf6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5bf8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5bfc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5bfe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14d38 <getBoolean>
    5c04:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5c06:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5c08:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 5fb4 <continueFunction+0xe86>
				advanceNow = FALSE;
    5c0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5c10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5c14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5c1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 5fb4 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5c1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5c22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5c26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5c2c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 5fb6 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5c30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5c32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5c36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5c38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5c3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5c40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    5c42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 147f8 <getValueType>
    5c48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5c4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    5c4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 5c56 <continueFunction+0xb28>
    5c50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5c52:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 5fd8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    5c56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    5c5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5c5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    5c5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5c60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5c64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    5c66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5c6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5c6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 150ea <setVariable>
    5c72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    5c76:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 5fb6 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    5c7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5c7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    5c82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 5f6c <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    5c86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    5c88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5c8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 5d08 <continueFunction+0xbda>
    5c8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5c90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    5c94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 5d52 <continueFunction+0xc24>
    5c98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5c9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5c9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 5cac <continueFunction+0xb7e>
    5ca0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5ca2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    5ca6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 5cda <continueFunction+0xbac>
    5ca8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 5d52 <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5cac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    5cae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5cb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    5cb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    5cba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5cbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5cbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1412e <addVariablesInSecond>
    5cc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    5cc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    5cc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5ccc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5cce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1517c <trimStack>
    5cd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    5cd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 5f80 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5cda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    5cdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5ce0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    5ce4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    5ce8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5cea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    5cec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 141ec <compareVariablesInSecond>
    5cf2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    5cf4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    5cf6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5cfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5cfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1517c <trimStack>
    5d02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    5d04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 5f80 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5d08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    5d0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5d0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5d12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    5d16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5d18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5d1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 141ec <compareVariablesInSecond>
    5d20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5d22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    5d24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5d28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5d2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1517c <trimStack>
    5d30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    5d32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5d36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    5d3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    5d3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    5d3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    5d40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    5d46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5d4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    5d4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 5f80 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    5d52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    5d56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    5d5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5d5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5d60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    5d64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5d66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 147f8 <getValueType>
    5d6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5d70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5d72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5d7a <continueFunction+0xc4c>
    5d74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5d76:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5fd8 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    5d7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    5d7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5d80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5d82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5d86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5d8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5d8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 147f8 <getValueType>
    5d92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5d96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5d98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5da0 <continueFunction+0xc72>
    5d9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5d9c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5fd8 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5da0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    5da2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5da6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5da8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1517c <trimStack>
    5dae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    5db0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    5db2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    5db6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    5db8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    5dba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 5f7e <continueFunction+0xe50>
    5dbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5dc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    5dc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #24014,a0
    5dc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    5dca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5dce <continueFunction+0xca0>,pc,d0.w)
    5dce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    5dd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    5dd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5ddc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    5dde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5de6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5dee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    5df6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    5dfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5e02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5e06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17c64 <__mulsi3>
    5e10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5e12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5e14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5e16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5e1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5e20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150ea <setVariable>
    5e28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5e2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f80 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    5e30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5e34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5e38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    5e3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5e3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5e40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5e46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150ea <setVariable>
    5e4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5e52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f80 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    5e56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5e5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5e5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17d10 <__modsi3>
    5e68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5e6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5e6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5e6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5e72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5e78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150ea <setVariable>
    5e80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5e84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f80 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    5e88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5e8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5e90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17ce2 <__divsi3>
    5e9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5e9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5e9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5ea0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5ea4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5ea6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5eaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5eac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150ea <setVariable>
    5eb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5eb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f80 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    5eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5ebe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5ec2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5ec4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    5ec6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5ec8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5eca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5ece:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5ed2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5ed4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5ed8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5eda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150ea <setVariable>
    5ee0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5ee4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f80 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    5ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5eec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5ef0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5ef2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    5ef4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5ef8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5efa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5efc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5f00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5f06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5f08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150ea <setVariable>
    5f0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5f80 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    5f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5f18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5f1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5f20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5f28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5f2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5f32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5f34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150ea <setVariable>
    5f3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5f3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5f80 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    5f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5f44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5f4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    5f4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5f4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5f50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5f52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5f54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5f5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5f60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150ea <setVariable>
    5f66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5f6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5f80 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    5f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 18a02 <PutChar+0xc88>
    5f72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 172d8 <KPrintF>
    5f78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    5f7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    5f7c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 5fd8 <continueFunction+0xeaa>
						break;
    5f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    5f80:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 5fb6 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    5f82:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 18a1a <PutChar+0xca0>
    5f88:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 172d8 <KPrintF>
    5f8e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    5f90:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    5f92:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 5fd8 <continueFunction+0xeaa>
			break;
    5f94:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    5f96:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 5fb6 <continueFunction+0xe88>
			break;
    5f98:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    5f9a:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 5fb6 <continueFunction+0xe88>
			break;
    5f9c:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    5f9e:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 5fb6 <continueFunction+0xe88>
			break;
    5fa0:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    5fa2:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 5fb6 <continueFunction+0xe88>
			break;
    5fa4:	|  |  |     |              '--|--|--|--|-------------------> nop
    5fa6:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 5fb6 <continueFunction+0xe88>
			break;
    5fa8:	|  |  |     |                 '--|--|--|-------------------> nop
    5faa:	|  |  |     +--------------------|--|--|-------------------- bra.s 5fb6 <continueFunction+0xe88>
			break;
    5fac:	|  |  |     |                    '--|--|-------------------> nop
    5fae:	|  |  |     +-----------------------|--|-------------------- bra.s 5fb6 <continueFunction+0xe88>
			break;
    5fb0:	|  |  |     |                       '--|-------------------> nop
    5fb2:	|  |  |     +--------------------------|-------------------- bra.s 5fb6 <continueFunction+0xe88>
			break;
    5fb4:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    5fb6:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    5fba:	+--|--|----------------------------------------------------- beq.s 5fce <continueFunction+0xea0>
    5fbc:	|  |  |                                                      movea.l 80(sp),a0
    5fc0:	|  |  |                                                      move.l 36(a0),d0
    5fc4:	|  |  |                                                      addq.l #1,d0
    5fc6:	|  |  |                                                      movea.l 80(sp),a0
    5fca:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    5fce:	'--|--|----------------------------------------------------> tst.w 74(sp)
    5fd2:	   |  '----------------------------------------------------- bne.w 5156 <continueFunction+0x28>

	}
	return TRUE;
    5fd6:	   |                                                         moveq #1,d0
}
    5fd8:	   '-------------------------------------------------------> lea 76(sp),sp
    5fdc:	                                                             rts

00005fde <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
	KPrintF("finishFunction %d started\n", &fun->originalNumber);
    5fde:	    move.l 4(sp),d0
    5fe2:	    move.l d0,-(sp)
    5fe4:	    pea 18a46 <PutChar+0xccc>
    5fea:	    jsr 172d8 <KPrintF>
    5ff0:	    addq.l #8,sp

	pauseFunction (fun);
    5ff2:	    move.l 4(sp),-(sp)
    5ff6:	    jsr 7074 <pauseFunction>
    5ffc:	    addq.l #4,sp

	//Keep function loaed in memory if it is the focus function
	if( fun != currentEvents -> focusFunction) {	
    5ffe:	    movea.l 1c496 <currentEvents>,a0
    6004:	    move.l 20(a0),d0
    6008:	    cmp.l 4(sp),d0
    600c:	,-- beq.s 601a <finishFunction+0x3c>
		unloadFunction (fun);
    600e:	|   move.l 4(sp),-(sp)
    6012:	|   jsr 7524 <unloadFunction>
    6018:	|   addq.l #4,sp
	}	
}
    601a:	'-> nop
    601c:	    rts

0000601e <freezeSubs>:

void freezeSubs () {
    601e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6020:	          move.l 1cabe <allRunningFunctions>,(sp)

	while (thisFunction) {
    6026:	   ,----- bra.s 6044 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    6028:	,--|----> movea.l (sp),a0
    602a:	|  |      move.w 52(a0),d0
    602e:	|  |  ,-- bne.s 603e <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    6030:	|  |  |   movea.l (sp),a0
    6032:	|  |  |   move.b 56(a0),d0
    6036:	|  |  |   addq.b #1,d0
    6038:	|  |  |   movea.l (sp),a0
    603a:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    603e:	|  |  '-> movea.l (sp),a0
    6040:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6044:	|  '----> tst.l (sp)
    6046:	'-------- bne.s 6028 <freezeSubs+0xa>
	}
}
    6048:	          nop
    604a:	          nop
    604c:	          addq.l #4,sp
    604e:	          rts

00006050 <handleInput>:

BOOL handleInput () {
    6050:	             lea -16(sp),sp
    6054:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    6056:	             move.l 1cc36 <overRegion>,d0
    605c:	         ,-- bne.s 6064 <handleInput+0x14>
    605e:	         |   jsr 15a34 <getOverRegion>

	if (input.justMoved) {
    6064:	         '-> move.w 1cadc <input+0x4>,d0
    606a:	         ,-- beq.s 60a8 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    606c:	         |   movea.l 1c496 <currentEvents>,a0
    6072:	         |   move.l 16(a0),d0
    6076:	         +-- beq.s 60a8 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6078:	         |   move.l 1caf6 <noStack>,d1
    607e:	         |   movea.l 1c496 <currentEvents>,a0
    6084:	         |   move.l 16(a0),d0
    6088:	         |   pea 1 <_start+0x1>
    608c:	         |   move.l d1,-(sp)
    608e:	         |   clr.l -(sp)
    6090:	         |   clr.l -(sp)
    6092:	         |   move.l d0,-(sp)
    6094:	         |   jsr 7478 <startNewFunctionNum>
    609a:	         |   lea 20(sp),sp
    609e:	         |   tst.l d0
    60a0:	         +-- bne.s 60a8 <handleInput+0x58>
    60a2:	         |   clr.w d0
    60a4:	,--------|-- bra.w 62ae <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    60a8:	|        '-> clr.w 1cadc <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    60ae:	|            move.l 1caee <lastRegion>,d1
    60b4:	|            move.l 1cc36 <overRegion>,d0
    60ba:	|            cmp.l d1,d0
    60bc:	|  ,-------- beq.w 6194 <handleInput+0x144>
    60c0:	|  |         movea.l 1c496 <currentEvents>,a0
    60c6:	|  |         move.l 20(a0),d0
    60ca:	|  +-------- beq.w 6194 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    60ce:	|  |         moveq #12,d0
    60d0:	|  |         move.l d0,16(sp)
    60d4:	|  |         clr.l 12(sp)
    60d8:	|  |         move.l 1cb26 <SysBase>,d0
    60de:	|  |         movea.l d0,a6
    60e0:	|  |         move.l 16(sp),d0
    60e4:	|  |         move.l 12(sp),d1
    60e8:	|  |         jsr -684(a6)
    60ec:	|  |         move.l d0,8(sp)
    60f0:	|  |         move.l 8(sp),d0
    60f4:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    60f8:	|  |         move.l 4(sp),d0
    60fc:	|  |     ,-- bne.s 6112 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    60fe:	|  |     |   pea 18a61 <PutChar+0xce7>
    6104:	|  |     |   jsr 172d8 <KPrintF>
    610a:	|  |     |   addq.l #4,sp
			return FALSE;
    610c:	|  |     |   clr.w d0
    610e:	+--|-----|-- bra.w 62ae <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    6112:	|  |     '-> movea.l 4(sp),a0
    6116:	|  |         clr.l (a0)
		if (overRegion) {
    6118:	|  |         move.l 1cc36 <overRegion>,d0
    611e:	|  |  ,----- beq.s 6146 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    6120:	|  |  |      movea.l 1cc36 <overRegion>,a0
    6126:	|  |  |      movea.l 28(a0),a0
    612a:	|  |  |      move.l 4(a0),d1
    612e:	|  |  |      move.l 4(sp),d0
    6132:	|  |  |      move.l d1,-(sp)
    6134:	|  |  |      pea 7 <_start+0x7>
    6138:	|  |  |      move.l d0,-(sp)
    613a:	|  |  |      jsr 150ea <setVariable>
    6140:	|  |  |      lea 12(sp),sp
    6144:	|  |  |  ,-- bra.s 615c <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    6146:	|  |  '--|-> move.l 4(sp),d0
    614a:	|  |     |   clr.l -(sp)
    614c:	|  |     |   pea 1 <_start+0x1>
    6150:	|  |     |   move.l d0,-(sp)
    6152:	|  |     |   jsr 150ea <setVariable>
    6158:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    615c:	|  |     '-> movea.l 4(sp),a0
    6160:	|  |         clr.l 8(a0)
		
		if (! startNewFunctionLoaded (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    6164:	|  |         movea.l 1c496 <currentEvents>,a0
    616a:	|  |         move.l 20(a0),d0
    616e:	|  |         pea 1 <_start+0x1>
    6172:	|  |         lea 8(sp),a0
    6176:	|  |         move.l a0,-(sp)
    6178:	|  |         clr.l -(sp)
    617a:	|  |         pea 1 <_start+0x1>
    617e:	|  |         move.l d0,-(sp)
    6180:	|  |         jsr 7368 <startNewFunctionLoaded>
    6186:	|  |         lea 20(sp),sp
    618a:	|  |         tst.l d0
    618c:	|  +-------- bne.s 6194 <handleInput+0x144>
    618e:	|  |         clr.w d0
    6190:	+--|-------- bra.w 62ae <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    6194:	|  '-------> move.w 1cade <input+0x6>,d0
    619a:	|        ,-- beq.s 61d8 <handleInput+0x188>
    619c:	|        |   movea.l 1c496 <currentEvents>,a0
    61a2:	|        |   move.l 4(a0),d0
    61a6:	|        +-- beq.s 61d8 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    61a8:	|        |   move.l 1caf6 <noStack>,d1
    61ae:	|        |   movea.l 1c496 <currentEvents>,a0
    61b4:	|        |   move.l 4(a0),d0
    61b8:	|        |   pea 1 <_start+0x1>
    61bc:	|        |   move.l d1,-(sp)
    61be:	|        |   clr.l -(sp)
    61c0:	|        |   clr.l -(sp)
    61c2:	|        |   move.l d0,-(sp)
    61c4:	|        |   jsr 7478 <startNewFunctionNum>
    61ca:	|        |   lea 20(sp),sp
    61ce:	|        |   tst.l d0
    61d0:	|        +-- bne.s 61d8 <handleInput+0x188>
    61d2:	|        |   clr.w d0
    61d4:	+--------|-- bra.w 62ae <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    61d8:	|        '-> move.w 1cae0 <input+0x8>,d0
    61de:	|        ,-- beq.s 621c <handleInput+0x1cc>
    61e0:	|        |   movea.l 1c496 <currentEvents>,a0
    61e6:	|        |   move.l 12(a0),d0
    61ea:	|        +-- beq.s 621c <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    61ec:	|        |   move.l 1caf6 <noStack>,d1
    61f2:	|        |   movea.l 1c496 <currentEvents>,a0
    61f8:	|        |   move.l 12(a0),d0
    61fc:	|        |   pea 1 <_start+0x1>
    6200:	|        |   move.l d1,-(sp)
    6202:	|        |   clr.l -(sp)
    6204:	|        |   clr.l -(sp)
    6206:	|        |   move.l d0,-(sp)
    6208:	|        |   jsr 7478 <startNewFunctionNum>
    620e:	|        |   lea 20(sp),sp
    6212:	|        |   tst.l d0
    6214:	|        +-- bne.s 621c <handleInput+0x1cc>
    6216:	|        |   clr.w d0
    6218:	+--------|-- bra.w 62ae <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    621c:	|        '-> move.w 1cad8 <input>,d0
    6222:	|        ,-- beq.s 625a <handleInput+0x20a>
    6224:	|        |   movea.l 1c496 <currentEvents>,a0
    622a:	|        |   move.l (a0),d0
    622c:	|        +-- beq.s 625a <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    622e:	|        |   move.l 1caf6 <noStack>,d1
    6234:	|        |   movea.l 1c496 <currentEvents>,a0
    623a:	|        |   move.l (a0),d0
    623c:	|        |   pea 1 <_start+0x1>
    6240:	|        |   move.l d1,-(sp)
    6242:	|        |   clr.l -(sp)
    6244:	|        |   clr.l -(sp)
    6246:	|        |   move.l d0,-(sp)
    6248:	|        |   jsr 7478 <startNewFunctionNum>
    624e:	|        |   lea 20(sp),sp
    6252:	|        |   tst.l d0
    6254:	|        +-- bne.s 625a <handleInput+0x20a>
    6256:	|        |   clr.w d0
    6258:	+--------|-- bra.s 62ae <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    625a:	|        '-> move.w 1cada <input+0x2>,d0
    6260:	|        ,-- beq.s 629c <handleInput+0x24c>
    6262:	|        |   movea.l 1c496 <currentEvents>,a0
    6268:	|        |   move.l 8(a0),d0
    626c:	|        +-- beq.s 629c <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    626e:	|        |   move.l 1caf6 <noStack>,d1
    6274:	|        |   movea.l 1c496 <currentEvents>,a0
    627a:	|        |   move.l 8(a0),d0
    627e:	|        |   pea 1 <_start+0x1>
    6282:	|        |   move.l d1,-(sp)
    6284:	|        |   clr.l -(sp)
    6286:	|        |   clr.l -(sp)
    6288:	|        |   move.l d0,-(sp)
    628a:	|        |   jsr 7478 <startNewFunctionNum>
    6290:	|        |   lea 20(sp),sp
    6294:	|        |   tst.l d0
    6296:	|        +-- bne.s 629c <handleInput+0x24c>
    6298:	|        |   clr.w d0
    629a:	+--------|-- bra.s 62ae <handleInput+0x25e>
	}

	lastRegion = overRegion;
    629c:	|        '-> move.l 1cc36 <overRegion>,d0
    62a2:	|            move.l d0,1caee <lastRegion>
	return runSludge ();
    62a8:	|            jsr 7136 <runSludge>
}
    62ae:	'----------> movea.l (sp)+,a6
    62b0:	             lea 16(sp),sp
    62b4:	             rts

000062b6 <initSludge>:

BOOL initSludge (char * filename) {
    62b6:	             lea -292(sp),sp
    62ba:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    62be:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    62c2:	             jsr acf4 <makeNullAnim>
    62c8:	             move.l d0,1ca20 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    62ce:	             pea 1cad0 <gameVersion>
    62d4:	             pea 18a97 <PutChar+0xd1d>
    62da:	             pea 45 <_start+0x45>
    62de:	             pea 47 <_start+0x47>
    62e2:	             move.l 332(sp),-(sp)
    62e6:	             jsr 6d04 <openAndVerify>
    62ec:	             lea 20(sp),sp
    62f0:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    62f4:	         ,-- bne.s 62fc <initSludge+0x46>
    62f6:	         |   clr.w d0
    62f8:	,--------|-- bra.w 6a24 <initSludge+0x76e>
	if (FGetC (fp)) {
    62fc:	|        '-> move.l 288(sp),284(sp)
    6302:	|            move.l 1cb2e <DOSBase>,d0
    6308:	|            movea.l d0,a6
    630a:	|            move.l 284(sp),d1
    630e:	|            jsr -306(a6)
    6312:	|            move.l d0,280(sp)
    6316:	|            move.l 280(sp),d0
    631a:	|  ,-------- beq.w 64c4 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    631e:	|  |         move.l 288(sp),-(sp)
    6322:	|  |         jsr 6bc <get2bytes>
    6328:	|  |         addq.l #4,sp
    632a:	|  |         move.l d0,1cafa <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    6330:	|  |         move.l 1cafa <numBIFNames>,d0
    6336:	|  |         move.l d0,276(sp)
    633a:	|  |         clr.l 272(sp)
    633e:	|  |         move.l 1cb26 <SysBase>,d0
    6344:	|  |         movea.l d0,a6
    6346:	|  |         move.l 276(sp),d0
    634a:	|  |         move.l 272(sp),d1
    634e:	|  |         jsr -684(a6)
    6352:	|  |         move.l d0,268(sp)
    6356:	|  |         move.l 268(sp),d0
    635a:	|  |         move.l d0,1cab6 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    6360:	|  |         move.l 1cab6 <allBIFNames>,d0
    6366:	|  |     ,-- bne.s 636e <initSludge+0xb8>
    6368:	|  |     |   clr.w d0
    636a:	+--|-----|-- bra.w 6a24 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    636e:	|  |     '-> clr.l 304(sp)
    6372:	|  |     ,-- bra.s 6398 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    6374:	|  |  ,--|-> move.l 1cab6 <allBIFNames>,d1
    637a:	|  |  |  |   move.l 304(sp),d0
    637e:	|  |  |  |   add.l d0,d0
    6380:	|  |  |  |   add.l d0,d0
    6382:	|  |  |  |   movea.l d1,a2
    6384:	|  |  |  |   adda.l d0,a2
    6386:	|  |  |  |   move.l 288(sp),-(sp)
    638a:	|  |  |  |   jsr b02 <readString>
    6390:	|  |  |  |   addq.l #4,sp
    6392:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    6394:	|  |  |  |   addq.l #1,304(sp)
    6398:	|  |  |  '-> move.l 1cafa <numBIFNames>,d0
    639e:	|  |  |      cmp.l 304(sp),d0
    63a2:	|  |  '----- bgt.s 6374 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    63a4:	|  |         move.l 288(sp),-(sp)
    63a8:	|  |         jsr 6bc <get2bytes>
    63ae:	|  |         addq.l #4,sp
    63b0:	|  |         move.l d0,1cb06 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    63b6:	|  |         move.l 1cb06 <numUserFunc>,d0
    63bc:	|  |         move.l d0,264(sp)
    63c0:	|  |         clr.l 260(sp)
    63c4:	|  |         move.l 1cb26 <SysBase>,d0
    63ca:	|  |         movea.l d0,a6
    63cc:	|  |         move.l 264(sp),d0
    63d0:	|  |         move.l 260(sp),d1
    63d4:	|  |         jsr -684(a6)
    63d8:	|  |         move.l d0,256(sp)
    63dc:	|  |         move.l 256(sp),d0
    63e0:	|  |         move.l d0,1cac2 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    63e6:	|  |         move.l 1cac2 <allUserFunc>,d0
    63ec:	|  |     ,-- bne.s 63f4 <initSludge+0x13e>
    63ee:	|  |     |   clr.w d0
    63f0:	+--|-----|-- bra.w 6a24 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    63f4:	|  |     '-> clr.l 300(sp)
    63f8:	|  |     ,-- bra.s 641e <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    63fa:	|  |  ,--|-> move.l 1cac2 <allUserFunc>,d1
    6400:	|  |  |  |   move.l 300(sp),d0
    6404:	|  |  |  |   add.l d0,d0
    6406:	|  |  |  |   add.l d0,d0
    6408:	|  |  |  |   movea.l d1,a2
    640a:	|  |  |  |   adda.l d0,a2
    640c:	|  |  |  |   move.l 288(sp),-(sp)
    6410:	|  |  |  |   jsr b02 <readString>
    6416:	|  |  |  |   addq.l #4,sp
    6418:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    641a:	|  |  |  |   addq.l #1,300(sp)
    641e:	|  |  |  '-> move.l 1cb06 <numUserFunc>,d0
    6424:	|  |  |      cmp.l 300(sp),d0
    6428:	|  |  '----- bgt.s 63fa <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    642a:	|  |         move.l 1cad0 <gameVersion>,d0
    6430:	|  |         cmpi.l #258,d0
    6436:	|  +-------- ble.w 64c4 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    643a:	|  |         move.l 288(sp),-(sp)
    643e:	|  |         jsr 6bc <get2bytes>
    6444:	|  |         addq.l #4,sp
    6446:	|  |         move.l d0,1cb02 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    644c:	|  |         move.l 1cb02 <numResourceNames>,d0
    6452:	|  |         add.l d0,d0
    6454:	|  |         add.l d0,d0
    6456:	|  |         move.l d0,252(sp)
    645a:	|  |         clr.l 248(sp)
    645e:	|  |         move.l 1cb26 <SysBase>,d0
    6464:	|  |         movea.l d0,a6
    6466:	|  |         move.l 252(sp),d0
    646a:	|  |         move.l 248(sp),d1
    646e:	|  |         jsr -684(a6)
    6472:	|  |         move.l d0,244(sp)
    6476:	|  |         move.l 244(sp),d0
    647a:	|  |         move.l d0,1caba <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    6480:	|  |         move.l 1caba <allResourceNames>,d0
    6486:	|  |     ,-- bne.s 648e <initSludge+0x1d8>
    6488:	|  |     |   clr.w d0
    648a:	+--|-----|-- bra.w 6a24 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    648e:	|  |     '-> clr.l 296(sp)
    6492:	|  |     ,-- bra.s 64b8 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    6494:	|  |  ,--|-> move.l 1caba <allResourceNames>,d1
    649a:	|  |  |  |   move.l 296(sp),d0
    649e:	|  |  |  |   add.l d0,d0
    64a0:	|  |  |  |   add.l d0,d0
    64a2:	|  |  |  |   movea.l d1,a2
    64a4:	|  |  |  |   adda.l d0,a2
    64a6:	|  |  |  |   move.l 288(sp),-(sp)
    64aa:	|  |  |  |   jsr b02 <readString>
    64b0:	|  |  |  |   addq.l #4,sp
    64b2:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    64b4:	|  |  |  |   addq.l #1,296(sp)
    64b8:	|  |  |  '-> move.l 1cb02 <numResourceNames>,d0
    64be:	|  |  |      cmp.l 296(sp),d0
    64c2:	|  |  '----- bgt.s 6494 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    64c4:	|  '-------> move.l #129,1cae2 <input+0xa>
	input.mouseY = 100;
    64ce:	|            moveq #100,d0
    64d0:	|            move.l d0,1cae6 <input+0xe>
	winWidth = get2bytes (fp);
    64d6:	|            move.l 288(sp),-(sp)
    64da:	|            jsr 6bc <get2bytes>
    64e0:	|            addq.l #4,sp
    64e2:	|            move.l d0,1ca7a <winWidth>
	winHeight = get2bytes (fp);
    64e8:	|            move.l 288(sp),-(sp)
    64ec:	|            jsr 6bc <get2bytes>
    64f2:	|            addq.l #4,sp
    64f4:	|            move.l d0,1ca7e <winHeight>
	specialSettings = FGetC (fp);
    64fa:	|            move.l 288(sp),240(sp)
    6500:	|            move.l 1cb2e <DOSBase>,d0
    6506:	|            movea.l d0,a6
    6508:	|            move.l 240(sp),d1
    650c:	|            jsr -306(a6)
    6510:	|            move.l d0,236(sp)
    6514:	|            move.l 236(sp),d0
    6518:	|            move.l d0,1cb0a <specialSettings>

	desiredfps = 1000/FGetC (fp);
    651e:	|            move.l 288(sp),232(sp)
    6524:	|            move.l 1cb2e <DOSBase>,d0
    652a:	|            movea.l d0,a6
    652c:	|            move.l 232(sp),d1
    6530:	|            jsr -306(a6)
    6534:	|            move.l d0,228(sp)
    6538:	|            move.l 228(sp),d0
    653c:	|            move.l d0,-(sp)
    653e:	|            pea 3e8 <encodeFilename+0xea>
    6542:	|            jsr 17ce2 <__divsi3>
    6548:	|            addq.l #8,sp
    654a:	|            move.l d0,1c4a8 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    6550:	|            move.l 288(sp),-(sp)
    6554:	|            jsr b02 <readString>
    655a:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    655c:	|            move.l 288(sp),224(sp)
    6562:	|            move.l #117448,220(sp)
    656a:	|            moveq #8,d1
    656c:	|            move.l d1,216(sp)
    6570:	|            moveq #1,d0
    6572:	|            move.l d0,212(sp)
    6576:	|            move.l 1cb2e <DOSBase>,d0
    657c:	|            movea.l d0,a6
    657e:	|            move.l 224(sp),d1
    6582:	|            move.l 220(sp),d2
    6586:	|            move.l 216(sp),d3
    658a:	|            move.l 212(sp),d4
    658e:	|            jsr -324(a6)
    6592:	|            move.l d0,208(sp)
    6596:	|            move.l 208(sp),d0
    659a:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    659e:	|            moveq #1,d1
    65a0:	|            cmp.l 204(sp),d1
    65a4:	|        ,-- beq.s 65b4 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    65a6:	|        |   pea 18ad0 <PutChar+0xd56>
    65ac:	|        |   jsr 172d8 <KPrintF>
    65b2:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    65b4:	|        '-> move.l 1cad0 <gameVersion>,d0
    65ba:	|            cmpi.l #258,d0
    65c0:	|        ,-- ble.s 65d0 <initSludge+0x31a>
    65c2:	|        |   move.l 288(sp),-(sp)
    65c6:	|        |   jsr b02 <readString>
    65cc:	|        |   addq.l #4,sp
    65ce:	|     ,--|-- bra.s 65e4 <initSludge+0x32e>
    65d0:	|     |  '-> pea 18aee <PutChar+0xd74>
    65d6:	|     |      pea 18aee <PutChar+0xd74>
    65dc:	|     |      jsr 13d24 <joinStrings>
    65e2:	|     |      addq.l #8,sp
    65e4:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    65e8:	|            move.l 1cad0 <gameVersion>,d0
    65ee:	|            cmpi.l #258,d0
    65f4:	|     ,----- ble.s 6616 <initSludge+0x360>
    65f6:	|     |      move.l 288(sp),196(sp)
    65fc:	|     |      move.l 1cb2e <DOSBase>,d0
    6602:	|     |      movea.l d0,a6
    6604:	|     |      move.l 196(sp),d1
    6608:	|     |      jsr -306(a6)
    660c:	|     |      move.l d0,192(sp)
    6610:	|     |      move.l 192(sp),d0
    6614:	|     |  ,-- bra.s 6618 <initSludge+0x362>
    6616:	|     '--|-> moveq #0,d0
    6618:	|        '-> move.l d0,1cc02 <gameSettings+0x4>
	makeLanguageTable (fp);
    661e:	|            move.l 288(sp),-(sp)
    6622:	|            jsr 136da <makeLanguageTable>
    6628:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    662a:	|            move.l 1cad0 <gameVersion>,d0
    6630:	|            cmpi.l #261,d0
    6636:	|        ,-- ble.s 6684 <initSludge+0x3ce>
	{
		FGetC(fp);
    6638:	|        |   move.l 288(sp),188(sp)
    663e:	|        |   move.l 1cb2e <DOSBase>,d0
    6644:	|        |   movea.l d0,a6
    6646:	|        |   move.l 188(sp),d1
    664a:	|        |   jsr -306(a6)
    664e:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    6652:	|        |   move.l 288(sp),180(sp)
    6658:	|        |   move.l 1cb2e <DOSBase>,d0
    665e:	|        |   movea.l d0,a6
    6660:	|        |   move.l 180(sp),d1
    6664:	|        |   jsr -306(a6)
    6668:	|        |   move.l d0,176(sp)
		getFloat (fp);
    666c:	|        |   move.l 288(sp),-(sp)
    6670:	|        |   jsr 7d8 <getFloat>
    6676:	|        |   addq.l #4,sp
		getFloat (fp);
    6678:	|        |   move.l 288(sp),-(sp)
    667c:	|        |   jsr 7d8 <getFloat>
    6682:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    6684:	|        '-> move.l 288(sp),-(sp)
    6688:	|            jsr b02 <readString>
    668e:	|            addq.l #4,sp
    6690:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    6694:	|            pea 18aef <PutChar+0xd75>
    669a:	|            move.l 176(sp),-(sp)
    669e:	|            jsr 13ca4 <strcmp>
    66a4:	|            addq.l #8,sp
    66a6:	|            tst.l d0
    66a8:	|        ,-- beq.s 66b0 <initSludge+0x3fa>
		return FALSE;
    66aa:	|        |   clr.w d0
    66ac:	+--------|-- bra.w 6a24 <initSludge+0x76e>
	}
	FreeVec( checker);
    66b0:	|        '-> move.l 172(sp),168(sp)
    66b6:	|            move.l 1cb26 <SysBase>,d0
    66bc:	|            movea.l d0,a6
    66be:	|            movea.l 168(sp),a1
    66c2:	|            jsr -690(a6)
	checker = NULL;
    66c6:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    66ca:	|            move.l 288(sp),164(sp)
    66d0:	|            move.l 1cb2e <DOSBase>,d0
    66d6:	|            movea.l d0,a6
    66d8:	|            move.l 164(sp),d1
    66dc:	|            jsr -306(a6)
    66e0:	|            move.l d0,160(sp)
    66e4:	|            move.l 160(sp),d0
    66e8:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    66ec:	|            moveq #0,d0
    66ee:	|            move.b 159(sp),d0
    66f2:	|            moveq #1,d1
    66f4:	|            and.l d1,d0
    66f6:	|        ,-- beq.s 674e <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    66f8:	|        |   move.l 1cb2e <DOSBase>,d0
    66fe:	|        |   movea.l d0,a6
    6700:	|        |   jsr -60(a6)
    6704:	|        |   move.l d0,38(sp)
    6708:	|        |   move.l 38(sp),d0
    670c:	|        |   move.l d0,34(sp)
    6710:	|        |   move.l #101111,30(sp)
    6718:	|        |   moveq #54,d0
    671a:	|        |   move.l d0,26(sp)
    671e:	|        |   move.l 1cb2e <DOSBase>,d0
    6724:	|        |   movea.l d0,a6
    6726:	|        |   move.l 34(sp),d1
    672a:	|        |   move.l 30(sp),d2
    672e:	|        |   move.l 26(sp),d3
    6732:	|        |   jsr -48(a6)
    6736:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    673a:	|        |   pea 18b2e <PutChar+0xdb4>
    6740:	|        |   jsr 172d8 <KPrintF>
    6746:	|        |   addq.l #4,sp
		return FALSE;
    6748:	|        |   clr.w d0
    674a:	+--------|-- bra.w 6a24 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    674e:	|        '-> move.l 288(sp),-(sp)
    6752:	|            jsr 6bc <get2bytes>
    6758:	|            addq.l #4,sp
    675a:	|            move.l d0,1cafe <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    6760:	|            move.l 1cafe <numGlobals>,d0
    6766:	|            lsl.l #3,d0
    6768:	|            move.l d0,154(sp)
    676c:	|            clr.l 150(sp)
    6770:	|            move.l 1cb26 <SysBase>,d0
    6776:	|            movea.l d0,a6
    6778:	|            move.l 154(sp),d0
    677c:	|            move.l 150(sp),d1
    6780:	|            jsr -684(a6)
    6784:	|            move.l d0,146(sp)
    6788:	|            move.l 146(sp),d0
    678c:	|            move.l d0,1cad4 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    6792:	|            move.l 1cad4 <globalVars>,d0
    6798:	|        ,-- bne.s 67b6 <initSludge+0x500>
    679a:	|        |   move.l 1cafe <numGlobals>,d0
    67a0:	|        +-- ble.s 67b6 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    67a2:	|        |   pea 18b66 <PutChar+0xdec>
    67a8:	|        |   jsr 172d8 <KPrintF>
    67ae:	|        |   addq.l #4,sp
		return FALSE;
    67b0:	|        |   clr.w d0
    67b2:	+--------|-- bra.w 6a24 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    67b6:	|        '-> clr.l 308(sp)
    67ba:	|        ,-- bra.s 67d2 <initSludge+0x51c>
    67bc:	|     ,--|-> move.l 1cad4 <globalVars>,d1
    67c2:	|     |  |   move.l 308(sp),d0
    67c6:	|     |  |   lsl.l #3,d0
    67c8:	|     |  |   movea.l d1,a0
    67ca:	|     |  |   adda.l d0,a0
    67cc:	|     |  |   clr.l (a0)
    67ce:	|     |  |   addq.l #1,308(sp)
    67d2:	|     |  '-> move.l 1cafe <numGlobals>,d0
    67d8:	|     |      cmp.l 308(sp),d0
    67dc:	|     '----- bgt.s 67bc <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    67de:	|            move.l 1cc02 <gameSettings+0x4>,d0
    67e4:	|            clr.l -(sp)
    67e6:	|            move.l d0,-(sp)
    67e8:	|            move.l 296(sp),-(sp)
    67ec:	|            jsr 7966 <setFileIndices>
    67f2:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    67f6:	|            pea 1 <_start+0x1>
    67fa:	|            jsr 7620 <getNumberedString>
    6800:	|            addq.l #4,sp
    6802:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6806:	|            move.l 142(sp),-(sp)
    680a:	|            jsr 2fe <encodeFilename>
    6810:	|            addq.l #4,sp
    6812:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    6816:	|            move.l 142(sp),134(sp)
    681c:	|            move.l 1cb26 <SysBase>,d0
    6822:	|            movea.l d0,a6
    6824:	|            movea.l 134(sp),a1
    6828:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    682c:	|            move.l 138(sp),130(sp)
    6832:	|            move.l 1cb2e <DOSBase>,d0
    6838:	|            movea.l d0,a6
    683a:	|            move.l 130(sp),d1
    683e:	|            jsr -120(a6)
    6842:	|            move.l d0,126(sp)
    6846:	|            move.l 126(sp),d0
    684a:	|            move.l d0,292(sp)
	if(lock == 0) {
    684e:	|        ,-- bne.s 687c <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6850:	|        |   move.l 138(sp),122(sp)
    6856:	|        |   moveq #-2,d1
    6858:	|        |   move.l d1,118(sp)
    685c:	|        |   move.l 1cb2e <DOSBase>,d0
    6862:	|        |   movea.l d0,a6
    6864:	|        |   move.l 122(sp),d1
    6868:	|        |   move.l 118(sp),d2
    686c:	|        |   jsr -84(a6)
    6870:	|        |   move.l d0,114(sp)
    6874:	|        |   move.l 114(sp),d0
    6878:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    687c:	|        '-> move.l 292(sp),110(sp)
    6882:	|            move.l 1cb2e <DOSBase>,d0
    6888:	|            movea.l d0,a6
    688a:	|            move.l 110(sp),d1
    688e:	|            jsr -126(a6)
    6892:	|            move.l d0,106(sp)
    6896:	|            move.l 106(sp),d0
    689a:	|        ,-- bne.s 68f6 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    689c:	|        |   move.l 138(sp),-(sp)
    68a0:	|        |   pea 18b99 <PutChar+0xe1f>
    68a6:	|        |   jsr 172d8 <KPrintF>
    68ac:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    68ae:	|        |   move.l 1cb2e <DOSBase>,d0
    68b4:	|        |   movea.l d0,a6
    68b6:	|        |   jsr -60(a6)
    68ba:	|        |   move.l d0,58(sp)
    68be:	|        |   move.l 58(sp),d0
    68c2:	|        |   move.l d0,54(sp)
    68c6:	|        |   move.l #101318,50(sp)
    68ce:	|        |   moveq #40,d0
    68d0:	|        |   move.l d0,46(sp)
    68d4:	|        |   move.l 1cb2e <DOSBase>,d0
    68da:	|        |   movea.l d0,a6
    68dc:	|        |   move.l 54(sp),d1
    68e0:	|        |   move.l 50(sp),d2
    68e4:	|        |   move.l 46(sp),d3
    68e8:	|        |   jsr -48(a6)
    68ec:	|        |   move.l d0,42(sp)
		return FALSE;
    68f0:	|        |   clr.w d0
    68f2:	+--------|-- bra.w 6a24 <initSludge+0x76e>
	}

	FreeVec(gameName);
    68f6:	|        '-> move.l 138(sp),102(sp)
    68fc:	|            move.l 1cb26 <SysBase>,d0
    6902:	|            movea.l d0,a6
    6904:	|            movea.l 102(sp),a1
    6908:	|            jsr -690(a6)

	readIniFile (filename);
    690c:	|            move.l 316(sp),-(sp)
    6910:	|            jsr 1380e <readIniFile>
    6916:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6918:	|            jsr 135e0 <getLanguageForFileB>
    691e:	|            move.l d0,1c49a <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    6924:	|            move.l 1c49a <languageNum>,d0
    692a:	|        ,-- bpl.s 693a <initSludge+0x684>
    692c:	|        |   pea 18bef <PutChar+0xe75>
    6932:	|        |   jsr 172d8 <KPrintF>
    6938:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    693a:	|        '-> move.l 1c49a <languageNum>,d0
    6940:	|            move.l d0,d1
    6942:	|            move.l 1cc02 <gameSettings+0x4>,d0
    6948:	|            move.l d1,-(sp)
    694a:	|            move.l d0,-(sp)
    694c:	|            clr.l -(sp)
    694e:	|            jsr 7966 <setFileIndices>
    6954:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6958:	|            movea.l 200(sp),a0
    695c:	|            move.b (a0),d0
    695e:	|     ,----- beq.w 6a08 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6962:	|     |      move.l 200(sp),-(sp)
    6966:	|     |      jsr 2fe <encodeFilename>
    696c:	|     |      addq.l #4,sp
    696e:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6972:	|     |      move.l 98(sp),94(sp)
    6978:	|     |      move.l 1cb2e <DOSBase>,d0
    697e:	|     |      movea.l d0,a6
    6980:	|     |      move.l 94(sp),d1
    6984:	|     |      jsr -120(a6)
    6988:	|     |      move.l d0,90(sp)
    698c:	|     |      move.l 90(sp),d0
    6990:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6994:	|     |  ,-- bne.s 69c2 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6996:	|     |  |   move.l 98(sp),86(sp)
    699c:	|     |  |   moveq #-2,d1
    699e:	|     |  |   move.l d1,82(sp)
    69a2:	|     |  |   move.l 1cb2e <DOSBase>,d0
    69a8:	|     |  |   movea.l d0,a6
    69aa:	|     |  |   move.l 86(sp),d1
    69ae:	|     |  |   move.l 82(sp),d2
    69b2:	|     |  |   jsr -84(a6)
    69b6:	|     |  |   move.l d0,78(sp)
    69ba:	|     |  |   move.l 78(sp),d0
    69be:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    69c2:	|     |  '-> move.l 292(sp),74(sp)
    69c8:	|     |      move.l 1cb2e <DOSBase>,d0
    69ce:	|     |      movea.l d0,a6
    69d0:	|     |      move.l 74(sp),d1
    69d4:	|     |      jsr -126(a6)
    69d8:	|     |      move.l d0,70(sp)
    69dc:	|     |      move.l 70(sp),d0
    69e0:	|     |  ,-- bne.s 69f2 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    69e2:	|     |  |   move.l 1cb2e <DOSBase>,d0
    69e8:	|     |  |   movea.l d0,a6
    69ea:	|     |  |   jsr -60(a6)
    69ee:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    69f2:	|     |  '-> move.l 98(sp),62(sp)
    69f8:	|     |      move.l 1cb26 <SysBase>,d0
    69fe:	|     |      movea.l d0,a6
    6a00:	|     |      movea.l 62(sp),a1
    6a04:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6a08:	|     '----> movea.l 1ca7e <winHeight>,a0
    6a0e:	|            lea -15(a0),a0
    6a12:	|            move.l a0,d0
    6a14:	|            move.l d0,-(sp)
    6a16:	|            pea a <_start+0xa>
    6a1a:	|            jsr 83ac <positionStatus>
    6a20:	|            addq.l #8,sp

	return TRUE;
    6a22:	|            moveq #1,d0
}
    6a24:	'----------> movem.l (sp)+,d2-d4/a2/a6
    6a28:	             lea 292(sp),sp
    6a2c:	             rts

00006a2e <killSpeechTimers>:

void killSpeechTimers () {
    6a2e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6a30:	          move.l 1cabe <allRunningFunctions>,(sp)

	while (thisFunction) {
    6a36:	   ,----- bra.s 6a62 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6a38:	,--|----> movea.l (sp),a0
    6a3a:	|  |      move.b 56(a0),d0
    6a3e:	|  |  ,-- bne.s 6a5c <killSpeechTimers+0x2e>
    6a40:	|  |  |   movea.l (sp),a0
    6a42:	|  |  |   move.w 50(a0),d0
    6a46:	|  |  +-- beq.s 6a5c <killSpeechTimers+0x2e>
    6a48:	|  |  |   movea.l (sp),a0
    6a4a:	|  |  |   move.l 12(a0),d0
    6a4e:	|  |  +-- beq.s 6a5c <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6a50:	|  |  |   movea.l (sp),a0
    6a52:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6a56:	|  |  |   movea.l (sp),a0
    6a58:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6a5c:	|  |  '-> movea.l (sp),a0
    6a5e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6a62:	|  '----> tst.l (sp)
    6a64:	'-------- bne.s 6a38 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6a66:	          jsr 3f1e <killAllSpeech>
}
    6a6c:	          nop
    6a6e:	          addq.l #4,sp
    6a70:	          rts

00006a72 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    6a72:	             lea -52(sp),sp
    6a76:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    6a78:	             movea.l 60(sp),a0
    6a7c:	             move.l (a0),d0
    6a7e:	             move.l d0,-(sp)
    6a80:	             jsr 78a6 <openSubSlice>
    6a86:	             addq.l #4,sp
    6a88:	             tst.w d0
    6a8a:	         ,-- bne.s 6a92 <loadFunctionCode+0x20>
    6a8c:	         |   clr.w d0
    6a8e:	,--------|-- bra.w 6c5c <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6a92:	|        '-> move.l 1cb0e <bigDataFile>,44(sp)
    6a9a:	|            move.l 1cb2e <DOSBase>,d0
    6aa0:	|            movea.l d0,a6
    6aa2:	|            move.l 44(sp),d1
    6aa6:	|            jsr -306(a6)
    6aaa:	|            move.l d0,40(sp)
    6aae:	|            move.l 40(sp),d0
    6ab2:	|            move.l d0,d0
    6ab4:	|            movea.l 60(sp),a0
    6ab8:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    6abc:	|            move.l 1cb0e <bigDataFile>,d0
    6ac2:	|            move.l d0,-(sp)
    6ac4:	|            jsr 6bc <get2bytes>
    6aca:	|            addq.l #4,sp
    6acc:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    6ad0:	|            move.l 1cb0e <bigDataFile>,d0
    6ad6:	|            move.l d0,-(sp)
    6ad8:	|            jsr 6bc <get2bytes>
    6ade:	|            addq.l #4,sp
    6ae0:	|            movea.l 60(sp),a0
    6ae4:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    6ae8:	|            move.l 1cb0e <bigDataFile>,d0
    6aee:	|            move.l d0,-(sp)
    6af0:	|            jsr 6bc <get2bytes>
    6af6:	|            addq.l #4,sp
    6af8:	|            movea.l 60(sp),a0
    6afc:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6b00:	|            move.l 36(sp),d0
    6b04:	|            lsl.l #3,d0
    6b06:	|            move.l d0,32(sp)
    6b0a:	|            clr.l 28(sp)
    6b0e:	|            move.l 1cb26 <SysBase>,d0
    6b14:	|            movea.l d0,a6
    6b16:	|            move.l 32(sp),d0
    6b1a:	|            move.l 28(sp),d1
    6b1e:	|            jsr -684(a6)
    6b22:	|            move.l d0,24(sp)
    6b26:	|            move.l 24(sp),d0
    6b2a:	|            movea.l 60(sp),a0
    6b2e:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6b32:	|            movea.l 60(sp),a0
    6b36:	|            move.l 4(a0),d0
    6b3a:	|        ,-- bne.s 6b50 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6b3c:	|        |   pea 18c1a <PutChar+0xea0>
    6b42:	|        |   jsr 172d8 <KPrintF>
    6b48:	|        |   addq.l #4,sp
		return FALSE;
    6b4a:	|        |   clr.w d0
    6b4c:	+--------|-- bra.w 6c5c <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6b50:	|        '-> clr.l 52(sp)
    6b54:	|        ,-- bra.s 6bb6 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    6b56:	|     ,--|-> move.l 1cb0e <bigDataFile>,8(sp)
    6b5e:	|     |  |   move.l 1cb2e <DOSBase>,d0
    6b64:	|     |  |   movea.l d0,a6
    6b66:	|     |  |   move.l 8(sp),d1
    6b6a:	|     |  |   jsr -306(a6)
    6b6e:	|     |  |   move.l d0,4(sp)
    6b72:	|     |  |   move.l 4(sp),d1
    6b76:	|     |  |   movea.l 60(sp),a0
    6b7a:	|     |  |   movea.l 4(a0),a0
    6b7e:	|     |  |   move.l 52(sp),d0
    6b82:	|     |  |   lsl.l #3,d0
    6b84:	|     |  |   adda.l d0,a0
    6b86:	|     |  |   move.l d1,d0
    6b88:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6b8a:	|     |  |   move.l 1cb0e <bigDataFile>,d0
    6b90:	|     |  |   move.l d0,-(sp)
    6b92:	|     |  |   jsr 6bc <get2bytes>
    6b98:	|     |  |   addq.l #4,sp
    6b9a:	|     |  |   move.l d0,d1
    6b9c:	|     |  |   movea.l 60(sp),a0
    6ba0:	|     |  |   movea.l 4(a0),a0
    6ba4:	|     |  |   move.l 52(sp),d0
    6ba8:	|     |  |   lsl.l #3,d0
    6baa:	|     |  |   adda.l d0,a0
    6bac:	|     |  |   move.l d1,d0
    6bae:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6bb2:	|     |  |   addq.l #1,52(sp)
    6bb6:	|     |  '-> move.l 52(sp),d0
    6bba:	|     |      cmp.l 36(sp),d0
    6bbe:	|     '----- bcs.s 6b56 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6bc0:	|            jsr 7616 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6bc6:	|            movea.l 60(sp),a0
    6bca:	|            move.l 8(a0),d0
    6bce:	|  ,-------- ble.w 6c52 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6bd2:	|  |         movea.l 60(sp),a0
    6bd6:	|  |         move.l 8(a0),d0
    6bda:	|  |         lsl.l #3,d0
    6bdc:	|  |         move.l d0,20(sp)
    6be0:	|  |         clr.l 16(sp)
    6be4:	|  |         move.l 1cb26 <SysBase>,d0
    6bea:	|  |         movea.l d0,a6
    6bec:	|  |         move.l 20(sp),d0
    6bf0:	|  |         move.l 16(sp),d1
    6bf4:	|  |         jsr -684(a6)
    6bf8:	|  |         move.l d0,12(sp)
    6bfc:	|  |         move.l 12(sp),d0
    6c00:	|  |         movea.l 60(sp),a0
    6c04:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    6c08:	|  |         movea.l 60(sp),a0
    6c0c:	|  |         move.l 20(a0),d0
    6c10:	|  |     ,-- bne.s 6c24 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6c12:	|  |     |   pea 18c1a <PutChar+0xea0>
    6c18:	|  |     |   jsr 172d8 <KPrintF>
    6c1e:	|  |     |   addq.l #4,sp
			return FALSE;
    6c20:	|  |     |   clr.w d0
    6c22:	+--|-----|-- bra.s 6c5c <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    6c24:	|  |     '-> clr.l 48(sp)
    6c28:	|  |     ,-- bra.s 6c42 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6c2a:	|  |  ,--|-> movea.l 60(sp),a0
    6c2e:	|  |  |  |   move.l 20(a0),d1
    6c32:	|  |  |  |   move.l 48(sp),d0
    6c36:	|  |  |  |   lsl.l #3,d0
    6c38:	|  |  |  |   movea.l d1,a0
    6c3a:	|  |  |  |   adda.l d0,a0
    6c3c:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6c3e:	|  |  |  |   addq.l #1,48(sp)
    6c42:	|  |  |  '-> movea.l 60(sp),a0
    6c46:	|  |  |      move.l 8(a0),d0
    6c4a:	|  |  |      cmp.l 48(sp),d0
    6c4e:	|  |  '----- bgt.s 6c2a <loadFunctionCode+0x1b8>
    6c50:	|  |     ,-- bra.s 6c5a <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    6c52:	|  '-----|-> movea.l 60(sp),a0
    6c56:	|        |   clr.l 8(a0)
	}
	return TRUE;
    6c5a:	|        '-> moveq #1,d0
}
    6c5c:	'----------> movea.l (sp)+,a6
    6c5e:	             lea 52(sp),sp
    6c62:	             rts

00006c64 <loadHandlers>:

void loadHandlers (BPTR fp) {
    6c64:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    6c66:	movea.l 1c496 <currentEvents>,a2
    6c6c:	move.l 8(sp),-(sp)
    6c70:	jsr 6bc <get2bytes>
    6c76:	addq.l #4,sp
    6c78:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    6c7a:	movea.l 1c496 <currentEvents>,a2
    6c80:	move.l 8(sp),-(sp)
    6c84:	jsr 6bc <get2bytes>
    6c8a:	addq.l #4,sp
    6c8c:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6c90:	movea.l 1c496 <currentEvents>,a2
    6c96:	move.l 8(sp),-(sp)
    6c9a:	jsr 6bc <get2bytes>
    6ca0:	addq.l #4,sp
    6ca2:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    6ca6:	movea.l 1c496 <currentEvents>,a2
    6cac:	move.l 8(sp),-(sp)
    6cb0:	jsr 6bc <get2bytes>
    6cb6:	addq.l #4,sp
    6cb8:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    6cbc:	movea.l 1c496 <currentEvents>,a2
    6cc2:	move.l 8(sp),-(sp)
    6cc6:	jsr 6bc <get2bytes>
    6ccc:	addq.l #4,sp
    6cce:	move.l d0,16(a2)
	currentEvents -> focusFunction			= (struct loadedFunction *) get4bytes (fp); //Todo: Changed to pointer type. Check if this is correct.
    6cd2:	move.l 8(sp),-(sp)
    6cd6:	jsr 718 <get4bytes>
    6cdc:	addq.l #4,sp
    6cde:	movea.l 1c496 <currentEvents>,a0
    6ce4:	move.l d0,20(a0)
	currentEvents -> spaceFunction			= get2bytes (fp);
    6ce8:	movea.l 1c496 <currentEvents>,a2
    6cee:	move.l 8(sp),-(sp)
    6cf2:	jsr 6bc <get2bytes>
    6cf8:	addq.l #4,sp
    6cfa:	move.l d0,24(a2)
}
    6cfe:	nop
    6d00:	movea.l (sp)+,a2
    6d02:	rts

00006d04 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    6d04:	       lea -312(sp),sp
    6d08:	       movem.l d2-d3/a6,-(sp)
    6d0c:	       move.l 332(sp),d1
    6d10:	       move.l 336(sp),d0
    6d14:	       move.b d1,d1
    6d16:	       move.b d1,16(sp)
    6d1a:	       move.b d0,d0
    6d1c:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6d20:	       move.l 328(sp),318(sp)
    6d26:	       move.l #1005,314(sp)
    6d2e:	       move.l 1cb2e <DOSBase>,d0
    6d34:	       movea.l d0,a6
    6d36:	       move.l 318(sp),d1
    6d3a:	       move.l 314(sp),d2
    6d3e:	       jsr -30(a6)
    6d42:	       move.l d0,310(sp)
    6d46:	       move.l 310(sp),d0
    6d4a:	       move.l d0,306(sp)

	if (! fp) {
    6d4e:	   ,-- bne.s 6daa <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6d50:	   |   move.l 1cb2e <DOSBase>,d0
    6d56:	   |   movea.l d0,a6
    6d58:	   |   jsr -60(a6)
    6d5c:	   |   move.l d0,154(sp)
    6d60:	   |   move.l 154(sp),d0
    6d64:	   |   move.l d0,150(sp)
    6d68:	   |   move.l #101443,146(sp)
    6d70:	   |   moveq #31,d0
    6d72:	   |   move.l d0,142(sp)
    6d76:	   |   move.l 1cb2e <DOSBase>,d0
    6d7c:	   |   movea.l d0,a6
    6d7e:	   |   move.l 150(sp),d1
    6d82:	   |   move.l 146(sp),d2
    6d86:	   |   move.l 142(sp),d3
    6d8a:	   |   jsr -48(a6)
    6d8e:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6d92:	   |   move.l 328(sp),-(sp)
    6d96:	   |   pea 18c63 <PutChar+0xee9>
    6d9c:	   |   jsr 172d8 <KPrintF>
    6da2:	   |   addq.l #8,sp
		return NULL;
    6da4:	   |   moveq #0,d0
    6da6:	,--|-- bra.w 706a <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    6daa:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    6dae:	|      move.l 306(sp),302(sp)
    6db4:	|      move.l 1cb2e <DOSBase>,d0
    6dba:	|      movea.l d0,a6
    6dbc:	|      move.l 302(sp),d1
    6dc0:	|      jsr -306(a6)
    6dc4:	|      move.l d0,298(sp)
    6dc8:	|      move.l 298(sp),d0
    6dcc:	|      moveq #83,d1
    6dce:	|      cmp.l d0,d1
    6dd0:	|  ,-- beq.s 6dd8 <openAndVerify+0xd4>
    6dd2:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    6dd8:	|  '-> move.l 306(sp),294(sp)
    6dde:	|      move.l 1cb2e <DOSBase>,d0
    6de4:	|      movea.l d0,a6
    6de6:	|      move.l 294(sp),d1
    6dea:	|      jsr -306(a6)
    6dee:	|      move.l d0,290(sp)
    6df2:	|      move.l 290(sp),d0
    6df6:	|      moveq #76,d1
    6df8:	|      cmp.l d0,d1
    6dfa:	|  ,-- beq.s 6e02 <openAndVerify+0xfe>
    6dfc:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    6e02:	|  '-> move.l 306(sp),286(sp)
    6e08:	|      move.l 1cb2e <DOSBase>,d0
    6e0e:	|      movea.l d0,a6
    6e10:	|      move.l 286(sp),d1
    6e14:	|      jsr -306(a6)
    6e18:	|      move.l d0,282(sp)
    6e1c:	|      move.l 282(sp),d0
    6e20:	|      moveq #85,d1
    6e22:	|      cmp.l d0,d1
    6e24:	|  ,-- beq.s 6e2c <openAndVerify+0x128>
    6e26:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    6e2c:	|  '-> move.l 306(sp),278(sp)
    6e32:	|      move.l 1cb2e <DOSBase>,d0
    6e38:	|      movea.l d0,a6
    6e3a:	|      move.l 278(sp),d1
    6e3e:	|      jsr -306(a6)
    6e42:	|      move.l d0,274(sp)
    6e46:	|      move.l 274(sp),d0
    6e4a:	|      moveq #68,d1
    6e4c:	|      cmp.l d0,d1
    6e4e:	|  ,-- beq.s 6e56 <openAndVerify+0x152>
    6e50:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    6e56:	|  '-> move.l 306(sp),270(sp)
    6e5c:	|      move.l 1cb2e <DOSBase>,d0
    6e62:	|      movea.l d0,a6
    6e64:	|      move.l 270(sp),d1
    6e68:	|      jsr -306(a6)
    6e6c:	|      move.l d0,266(sp)
    6e70:	|      move.l 266(sp),d1
    6e74:	|      move.b 16(sp),d0
    6e78:	|      ext.w d0
    6e7a:	|      movea.w d0,a0
    6e7c:	|      cmpa.l d1,a0
    6e7e:	|  ,-- beq.s 6e86 <openAndVerify+0x182>
    6e80:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    6e86:	|  '-> move.l 306(sp),262(sp)
    6e8c:	|      move.l 1cb2e <DOSBase>,d0
    6e92:	|      movea.l d0,a6
    6e94:	|      move.l 262(sp),d1
    6e98:	|      jsr -306(a6)
    6e9c:	|      move.l d0,258(sp)
    6ea0:	|      move.l 258(sp),d1
    6ea4:	|      move.b 14(sp),d0
    6ea8:	|      ext.w d0
    6eaa:	|      movea.w d0,a0
    6eac:	|      cmpa.l d1,a0
    6eae:	|  ,-- beq.s 6eb6 <openAndVerify+0x1b2>
    6eb0:	|  |   move.w #1,322(sp)
	if (headerBad) {
    6eb6:	|  '-> tst.w 322(sp)
    6eba:	|  ,-- beq.s 6f12 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    6ebc:	|  |   move.l 1cb2e <DOSBase>,d0
    6ec2:	|  |   movea.l d0,a6
    6ec4:	|  |   jsr -60(a6)
    6ec8:	|  |   move.l d0,174(sp)
    6ecc:	|  |   move.l 174(sp),d0
    6ed0:	|  |   move.l d0,170(sp)
    6ed4:	|  |   move.l #101506,166(sp)
    6edc:	|  |   moveq #31,d0
    6ede:	|  |   move.l d0,162(sp)
    6ee2:	|  |   move.l 1cb2e <DOSBase>,d0
    6ee8:	|  |   movea.l d0,a6
    6eea:	|  |   move.l 170(sp),d1
    6eee:	|  |   move.l 166(sp),d2
    6ef2:	|  |   move.l 162(sp),d3
    6ef6:	|  |   jsr -48(a6)
    6efa:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    6efe:	|  |   pea 18c82 <PutChar+0xf08>
    6f04:	|  |   jsr 172d8 <KPrintF>
    6f0a:	|  |   addq.l #4,sp
		return NULL;
    6f0c:	|  |   moveq #0,d0
    6f0e:	+--|-- bra.w 706a <openAndVerify+0x366>
	}
	FGetC (fp);
    6f12:	|  '-> move.l 306(sp),254(sp)
    6f18:	|      move.l 1cb2e <DOSBase>,d0
    6f1e:	|      movea.l d0,a6
    6f20:	|      move.l 254(sp),d1
    6f24:	|      jsr -306(a6)
    6f28:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    6f2c:	|      nop
    6f2e:	|  ,-> move.l 306(sp),246(sp)
    6f34:	|  |   move.l 1cb2e <DOSBase>,d0
    6f3a:	|  |   movea.l d0,a6
    6f3c:	|  |   move.l 246(sp),d1
    6f40:	|  |   jsr -306(a6)
    6f44:	|  |   move.l d0,242(sp)
    6f48:	|  |   move.l 242(sp),d0
    6f4c:	|  '-- bne.s 6f2e <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    6f4e:	|      move.l 306(sp),238(sp)
    6f54:	|      move.l 1cb2e <DOSBase>,d0
    6f5a:	|      movea.l d0,a6
    6f5c:	|      move.l 238(sp),d1
    6f60:	|      jsr -306(a6)
    6f64:	|      move.l d0,234(sp)
    6f68:	|      move.l 234(sp),d0
    6f6c:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    6f70:	|      move.l 306(sp),226(sp)
    6f76:	|      move.l 1cb2e <DOSBase>,d0
    6f7c:	|      movea.l d0,a6
    6f7e:	|      move.l 226(sp),d1
    6f82:	|      jsr -306(a6)
    6f86:	|      move.l d0,222(sp)
    6f8a:	|      move.l 222(sp),d0
    6f8e:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    6f92:	|      move.l 230(sp),d0
    6f96:	|      lsl.l #8,d0
    6f98:	|      add.l 218(sp),d0
    6f9c:	|      movea.l 344(sp),a0
    6fa0:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    6fa2:	|      movea.l 344(sp),a0
    6fa6:	|      move.l (a0),d0
    6fa8:	|      cmpi.l #514,d0
    6fae:	|  ,-- ble.s 7004 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    6fb0:	|  |   move.l 1cb2e <DOSBase>,d0
    6fb6:	|  |   movea.l d0,a6
    6fb8:	|  |   jsr -60(a6)
    6fbc:	|  |   move.l d0,194(sp)
    6fc0:	|  |   move.l 194(sp),d0
    6fc4:	|  |   move.l d0,190(sp)
    6fc8:	|  |   move.l #101533,186(sp)
    6fd0:	|  |   moveq #100,d1
    6fd2:	|  |   move.l d1,182(sp)
    6fd6:	|  |   move.l 1cb2e <DOSBase>,d0
    6fdc:	|  |   movea.l d0,a6
    6fde:	|  |   move.l 190(sp),d1
    6fe2:	|  |   move.l 186(sp),d2
    6fe6:	|  |   move.l 182(sp),d3
    6fea:	|  |   jsr -48(a6)
    6fee:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    6ff2:	|  |   pea 18c9d <PutChar+0xf23>
    6ff8:	|  |   jsr 172d8 <KPrintF>
    6ffe:	|  |   addq.l #4,sp
		return NULL;
    7000:	|  |   moveq #0,d0
    7002:	+--|-- bra.s 706a <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    7004:	|  '-> movea.l 344(sp),a0
    7008:	|      move.l (a0),d0
    700a:	|      cmpi.l #257,d0
    7010:	|  ,-- bgt.s 7066 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    7012:	|  |   move.l 1cb2e <DOSBase>,d0
    7018:	|  |   movea.l d0,a6
    701a:	|  |   jsr -60(a6)
    701e:	|  |   move.l d0,214(sp)
    7022:	|  |   move.l 214(sp),d0
    7026:	|  |   move.l d0,210(sp)
    702a:	|  |   move.l #101602,206(sp)
    7032:	|  |   moveq #100,d0
    7034:	|  |   move.l d0,202(sp)
    7038:	|  |   move.l 1cb2e <DOSBase>,d0
    703e:	|  |   movea.l d0,a6
    7040:	|  |   move.l 210(sp),d1
    7044:	|  |   move.l 206(sp),d2
    7048:	|  |   move.l 202(sp),d3
    704c:	|  |   jsr -48(a6)
    7050:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    7054:	|  |   pea 18ce2 <PutChar+0xf68>
    705a:	|  |   jsr 172d8 <KPrintF>
    7060:	|  |   addq.l #4,sp
		return NULL;
    7062:	|  |   moveq #0,d0
    7064:	+--|-- bra.s 706a <openAndVerify+0x366>
	}
	return fp;
    7066:	|  '-> move.l 306(sp),d0
}
    706a:	'----> movem.l (sp)+,d2-d3/a6
    706e:	       lea 312(sp),sp
    7072:	       rts

00007074 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    7074:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    7076:	          move.l #117438,(sp)
	while (* huntAndDestroy) {
    707c:	   ,----- bra.s 70a8 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    707e:	,--|----> movea.l (sp),a0
    7080:	|  |      move.l (a0),d0
    7082:	|  |      cmp.l 8(sp),d0
    7086:	|  |  ,-- bne.s 709e <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    7088:	|  |  |   movea.l (sp),a0
    708a:	|  |  |   movea.l (a0),a0
    708c:	|  |  |   move.l 44(a0),d0
    7090:	|  |  |   movea.l (sp),a0
    7092:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    7094:	|  |  |   movea.l 8(sp),a0
    7098:	|  |  |   clr.l 44(a0)
    709c:	|  +--|-- bra.s 70a8 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    709e:	|  |  '-> movea.l (sp),a0
    70a0:	|  |      move.l (a0),d0
    70a2:	|  |      moveq #44,d1
    70a4:	|  |      add.l d0,d1
    70a6:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    70a8:	|  '----> movea.l (sp),a0
    70aa:	|         move.l (a0),d0
    70ac:	'-------- bne.s 707e <pauseFunction+0xa>
		}
	}
}
    70ae:	          nop
    70b0:	          nop
    70b2:	          addq.l #4,sp
    70b4:	          rts

000070b6 <preloadNewFunctionNum>:

struct loadedFunction *preloadNewFunctionNum (unsigned int funcNum) {
    70b6:	       lea -16(sp),sp
    70ba:	       move.l a6,-(sp)
	
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    70bc:	       moveq #58,d0
    70be:	       move.l d0,16(sp)
    70c2:	       clr.l 12(sp)
    70c6:	       move.l 1cb26 <SysBase>,d0
    70cc:	       movea.l d0,a6
    70ce:	       move.l 16(sp),d0
    70d2:	       move.l 12(sp),d1
    70d6:	       jsr -684(a6)
    70da:	       move.l d0,8(sp)
    70de:	       move.l 8(sp),d0
    70e2:	       move.l d0,4(sp)
	if(!newFunc) {
    70e6:	   ,-- bne.s 70fa <preloadNewFunctionNum+0x44>
		KPrintF("startNewFunction: Cannot allocate memory");
    70e8:	   |   pea 18d29 <PutChar+0xfaf>
    70ee:	   |   jsr 172d8 <KPrintF>
    70f4:	   |   addq.l #4,sp
		return 0;
    70f6:	   |   moveq #0,d0
    70f8:	,--|-- bra.s 7114 <preloadNewFunctionNum+0x5e>
	}

	newFunc -> originalNumber = funcNum;
    70fa:	|  '-> move.l 24(sp),d0
    70fe:	|      movea.l 4(sp),a0
    7102:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    7104:	|      move.l 4(sp),-(sp)
    7108:	|      jsr 6a72 <loadFunctionCode>
    710e:	|      addq.l #4,sp

	return newFunc;
    7110:	|      move.l 4(sp),d0
}
    7114:	'----> movea.l (sp)+,a6
    7116:	       lea 16(sp),sp
    711a:	       rts

0000711c <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    711c:	move.l 1cabe <allRunningFunctions>,d0
    7122:	movea.l 4(sp),a0
    7126:	move.l d0,44(a0)
	allRunningFunctions = fun;
    712a:	move.l 4(sp),1cabe <allRunningFunctions>
}
    7132:	nop
    7134:	rts

00007136 <runSludge>:

BOOL runSludge () {
    7136:	                   lea -12(sp),sp
    713a:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    713c:	                   move.l 1cabe <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    7144:	      ,----------- bra.s 71c0 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    7146:	   ,--|----------> movea.l 12(sp),a0
    714a:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    7150:	   |  |            movea.l 12(sp),a0
    7154:	   |  |            move.b 56(a0),d0
    7158:	   |  |  ,-------- bne.s 71ba <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    715a:	   |  |  |         movea.l 12(sp),a0
    715e:	   |  |  |         move.l 12(a0),d0
    7162:	   |  |  |  ,----- beq.s 718c <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    7164:	   |  |  |  |      movea.l 12(sp),a0
    7168:	   |  |  |  |      move.l 12(a0),d0
    716c:	   |  |  |  |  ,-- bpl.s 7178 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    716e:	   |  |  |  |  |   movea.l 12(sp),a0
    7172:	   |  |  |  |  |   clr.l 12(a0)
    7176:	   |  |  +--|--|-- bra.s 71ba <runSludge+0x84>
				} else if (
					! -- (thisFunction -> timeLeft)) {
    7178:	   |  |  |  |  '-> movea.l 12(sp),a0
    717c:	   |  |  |  |      move.l 12(a0),d0
    7180:	   |  |  |  |      subq.l #1,d0
				} else if (
    7182:	   |  |  |  |      movea.l 12(sp),a0
    7186:	   |  |  |  |      move.l d0,12(a0)
    718a:	   |  |  +--|----- bra.s 71ba <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    718c:	   |  |  |  '----> movea.l 12(sp),a0
    7190:	   |  |  |         move.w 50(a0),d0
    7194:	   |  |  |     ,-- beq.s 71a4 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    7196:	   |  |  |     |   movea.l 12(sp),a0
    719a:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    719e:	   |  |  |     |   jsr 3f1e <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    71a4:	   |  |  |     '-> move.l 12(sp),-(sp)
    71a8:	   |  |  |         jsr 512e <continueFunction>
    71ae:	   |  |  |         addq.l #4,sp
    71b0:	   |  |  |         tst.w d0
    71b2:	   |  |  +-------- bne.s 71ba <runSludge+0x84>
					return FALSE;
    71b4:	   |  |  |         clr.w d0
    71b6:	,--|--|--|-------- bra.w 7246 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    71ba:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    71c0:	|  |  '----------> tst.l 12(sp)
    71c4:	|  '-------------- bne.s 7146 <runSludge+0x10>
	}

	if (loadNow) {
    71c6:	|                  move.l 1caf2 <loadNow>,d0
    71cc:	|        ,-------- beq.s 7244 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    71ce:	|        |         movea.l 1caf2 <loadNow>,a0
    71d4:	|        |         move.b (a0),d0
    71d6:	|        |         cmpi.b #58,d0
    71da:	|        |  ,----- bne.s 720e <runSludge+0xd8>
			saveGame (loadNow + 1);
    71dc:	|        |  |      move.l 1caf2 <loadNow>,d0
    71e2:	|        |  |      addq.l #1,d0
    71e4:	|        |  |      move.l d0,-(sp)
    71e6:	|        |  |      jsr c74a <saveGame>
    71ec:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    71ee:	|        |  |      movea.l 1cbec <saverFunc>,a0
    71f4:	|        |  |      lea 28(a0),a0
    71f8:	|        |  |      pea 1 <_start+0x1>
    71fc:	|        |  |      pea 1 <_start+0x1>
    7200:	|        |  |      move.l a0,-(sp)
    7202:	|        |  |      jsr 150ea <setVariable>
    7208:	|        |  |      lea 12(sp),sp
    720c:	|        |  |  ,-- bra.s 7226 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    720e:	|        |  '--|-> move.l 1caf2 <loadNow>,d0
    7214:	|        |     |   move.l d0,-(sp)
    7216:	|        |     |   jsr c292 <loadGame>
    721c:	|        |     |   addq.l #4,sp
    721e:	|        |     |   tst.w d0
    7220:	|        |     +-- bne.s 7226 <runSludge+0xf0>
    7222:	|        |     |   clr.w d0
    7224:	+--------|-----|-- bra.s 7246 <runSludge+0x110>
		}
		FreeVec(loadNow);
    7226:	|        |     '-> move.l 1caf2 <loadNow>,8(sp)
    722e:	|        |         move.l 1cb26 <SysBase>,d0
    7234:	|        |         movea.l d0,a6
    7236:	|        |         movea.l 8(sp),a1
    723a:	|        |         jsr -690(a6)
		loadNow = NULL;
    723e:	|        |         clr.l 1caf2 <loadNow>
	}

	return TRUE;
    7244:	|        '-------> moveq #1,d0
}
    7246:	'----------------> movea.l (sp)+,a6
    7248:	                   lea 12(sp),sp
    724c:	                   rts

0000724e <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    724e:	movea.l 1c496 <currentEvents>,a0
    7254:	move.l (a0),d0
    7256:	move.l 4(sp),-(sp)
    725a:	move.l d0,-(sp)
    725c:	jsr 8d0 <put2bytes>
    7262:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    7264:	movea.l 1c496 <currentEvents>,a0
    726a:	move.l 4(a0),d0
    726e:	move.l 4(sp),-(sp)
    7272:	move.l d0,-(sp)
    7274:	jsr 8d0 <put2bytes>
    727a:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    727c:	movea.l 1c496 <currentEvents>,a0
    7282:	move.l 8(a0),d0
    7286:	move.l 4(sp),-(sp)
    728a:	move.l d0,-(sp)
    728c:	jsr 8d0 <put2bytes>
    7292:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    7294:	movea.l 1c496 <currentEvents>,a0
    729a:	move.l 12(a0),d0
    729e:	move.l 4(sp),-(sp)
    72a2:	move.l d0,-(sp)
    72a4:	jsr 8d0 <put2bytes>
    72aa:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    72ac:	movea.l 1c496 <currentEvents>,a0
    72b2:	move.l 16(a0),d0
    72b6:	move.l 4(sp),-(sp)
    72ba:	move.l d0,-(sp)
    72bc:	jsr 8d0 <put2bytes>
    72c2:	addq.l #8,sp
	put4bytes ((ULONG) currentEvents -> focusFunction,			fp); //Todo: Changed to pointer type. Check if this is correct.
    72c4:	movea.l 1c496 <currentEvents>,a0
    72ca:	move.l 20(a0),d0
    72ce:	move.l 4(sp),-(sp)
    72d2:	move.l d0,-(sp)
    72d4:	jsr 958 <put4bytes>
    72da:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    72dc:	movea.l 1c496 <currentEvents>,a0
    72e2:	move.l 24(a0),d0
    72e6:	move.l 4(sp),-(sp)
    72ea:	move.l d0,-(sp)
    72ec:	jsr 8d0 <put2bytes>
    72f2:	addq.l #8,sp
}
    72f4:	nop
    72f6:	rts

000072f8 <sludgeDisplay>:

void sludgeDisplay () {					
    72f8:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    72fa:	move.l #14675968,(sp)
	displayCursor();
    7300:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    7306:	jsr 14f4 <CstDrawBackdrop>
	CstRestoreScreen();
    730c:	jsr 29e6 <CstRestoreScreen>
	drawPeople();
    7312:	jsr 9fcc <drawPeople>
	CstSwapBuffer();
    7318:	jsr 35cc <CstSwapBuffer>
}
    731e:	nop
    7320:	addq.l #4,sp
    7322:	rts

00007324 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    7324:	      ,-- bra.s 7344 <stackSetByIndex+0x20>
		vS = vS->next;
    7326:	,-----|-> movea.l 4(sp),a0
    732a:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    7330:	|     +-- bne.s 7344 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    7332:	|     |   pea 18d52 <PutChar+0xfd8>
    7338:	|     |   jsr 172d8 <KPrintF>
    733e:	|     |   addq.l #4,sp
			return FALSE;
    7340:	|     |   clr.w d0
    7342:	|  ,--|-- bra.s 7366 <stackSetByIndex+0x42>
	while (theIndex--) {
    7344:	|  |  '-> move.l 8(sp),d0
    7348:	|  |      move.l d0,d1
    734a:	|  |      subq.l #1,d1
    734c:	|  |      move.l d1,8(sp)
    7350:	|  |      tst.l d0
    7352:	'--|----- bne.s 7326 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    7354:	   |      move.l 4(sp),d0
    7358:	   |      move.l d0,-(sp)
    735a:	   |      move.l 16(sp),-(sp)
    735e:	   |      jsr 14cb2 <copyVariable>
    7364:	   |      addq.l #8,sp
}
    7366:	   '----> rts

00007368 <startNewFunctionLoaded>:

int startNewFunctionLoaded (struct loadedFunction * newFunc, unsigned int numParamsExpected,struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7368:	             subq.l #8,sp
    736a:	             move.l 28(sp),d0
    736e:	             move.w d0,d0
    7370:	             move.w d0,2(sp)
	
	if (newFunc -> numArgs != (int)numParamsExpected) {
    7374:	             movea.l 12(sp),a0
    7378:	             move.l 16(a0),d1
    737c:	             move.l 16(sp),d0
    7380:	             cmp.l d1,d0
    7382:	         ,-- beq.s 7398 <startNewFunctionLoaded+0x30>
		KPrintF("Wrong number of parameters!");
    7384:	         |   pea 18d6b <PutChar+0xff1>
    738a:	         |   jsr 172d8 <KPrintF>
    7390:	         |   addq.l #4,sp
		return NULL; 
    7392:	         |   moveq #0,d0
    7394:	,--------|-- bra.w 7474 <startNewFunctionLoaded+0x10c>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    7398:	|        '-> movea.l 12(sp),a0
    739c:	|            move.l 16(a0),d1
    73a0:	|            movea.l 12(sp),a0
    73a4:	|            move.l 8(a0),d0
    73a8:	|            cmp.l d1,d0
    73aa:	|  ,-------- bge.s 7414 <startNewFunctionLoaded+0xac>
		KPrintF ("More arguments than local variable space!");
    73ac:	|  |         pea 18d87 <PutChar+0x100d>
    73b2:	|  |         jsr 172d8 <KPrintF>
    73b8:	|  |         addq.l #4,sp
		return NULL; 
    73ba:	|  |         moveq #0,d0
    73bc:	+--|-------- bra.w 7474 <startNewFunctionLoaded+0x10c>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    73c0:	|  |  ,----> movea.l 24(sp),a0
    73c4:	|  |  |      move.l (a0),4(sp)
		numParamsExpected --;
    73c8:	|  |  |      subq.l #1,16(sp)
		if (*vStack == NULL) {
    73cc:	|  |  |      movea.l 24(sp),a0
    73d0:	|  |  |      move.l (a0),d0
    73d2:	|  |  |  ,-- bne.s 73e8 <startNewFunctionLoaded+0x80>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    73d4:	|  |  |  |   pea 18db1 <PutChar+0x1037>
    73da:	|  |  |  |   jsr 172d8 <KPrintF>
    73e0:	|  |  |  |   addq.l #4,sp
			return NULL;
    73e2:	|  |  |  |   moveq #0,d0
    73e4:	+--|--|--|-- bra.w 7474 <startNewFunctionLoaded+0x10c>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    73e8:	|  |  |  '-> movea.l 12(sp),a0
    73ec:	|  |  |      move.l 20(a0),d1
    73f0:	|  |  |      move.l 16(sp),d0
    73f4:	|  |  |      lsl.l #3,d0
    73f6:	|  |  |      add.l d0,d1
    73f8:	|  |  |      move.l 4(sp),d0
    73fc:	|  |  |      move.l d1,-(sp)
    73fe:	|  |  |      move.l d0,-(sp)
    7400:	|  |  |      jsr 14cb2 <copyVariable>
    7406:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    7408:	|  |  |      move.l 24(sp),-(sp)
    740c:	|  |  |      jsr 1517c <trimStack>
    7412:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    7414:	|  '--|----> tst.l 16(sp)
    7418:	|     '----- bne.s 73c0 <startNewFunctionLoaded+0x58>
	}

	newFunc -> cancelMe = FALSE;
    741a:	|            movea.l 12(sp),a0
    741e:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    7422:	|            movea.l 12(sp),a0
    7426:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    742a:	|            movea.l 12(sp),a0
    742e:	|            move.w 2(sp),48(a0)
	newFunc -> calledBy = calledBy;
    7434:	|            movea.l 12(sp),a0
    7438:	|            move.l 20(sp),40(a0)
	newFunc -> stack = NULL;
    743e:	|            movea.l 12(sp),a0
    7442:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    7446:	|            movea.l 12(sp),a0
    744a:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    744e:	|            movea.l 12(sp),a0
    7452:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    7456:	|            movea.l 12(sp),a0
    745a:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    745e:	|            movea.l 12(sp),a0
    7462:	|            clr.l 28(a0)

	restartFunction (newFunc);
    7466:	|            move.l 12(sp),-(sp)
    746a:	|            jsr 711c <restartFunction>
    7470:	|            addq.l #4,sp
	return 1;
    7472:	|            moveq #1,d0
}
    7474:	'----------> addq.l #8,sp
    7476:	             rts

00007478 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7478:	       lea -24(sp),sp
    747c:	       move.l a6,-(sp)
    747e:	       move.l 48(sp),d0
    7482:	       move.w d0,d0
    7484:	       move.w d0,6(sp)
	
	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7488:	       move.l #14675968,24(sp)
	//custom->color[0] = 0x00f;	

	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    7490:	       moveq #58,d0
    7492:	       move.l d0,20(sp)
    7496:	       clr.l 16(sp)
    749a:	       move.l 1cb26 <SysBase>,d0
    74a0:	       movea.l d0,a6
    74a2:	       move.l 20(sp),d0
    74a6:	       move.l 16(sp),d1
    74aa:	       jsr -684(a6)
    74ae:	       move.l d0,12(sp)
    74b2:	       move.l 12(sp),d0
    74b6:	       move.l d0,8(sp)
	if(!newFunc) {
    74ba:	   ,-- bne.s 74ce <startNewFunctionNum+0x56>
		KPrintF("startNewFunction: Cannot allocate memory");
    74bc:	   |   pea 18d29 <PutChar+0xfaf>
    74c2:	   |   jsr 172d8 <KPrintF>
    74c8:	   |   addq.l #4,sp
		return 0;
    74ca:	   |   moveq #0,d0
    74cc:	,--|-- bra.s 751c <startNewFunctionNum+0xa4>
	}
	if(funcNum == 145) {
    74ce:	|  '-> cmpi.l #145,32(sp)
    74d6:	|  ,-- bne.s 74e6 <startNewFunctionNum+0x6e>
		KPrintF("startNewFunction: funcNum 145");
    74d8:	|  |   pea 18dfc <PutChar+0x1082>
    74de:	|  |   jsr 172d8 <KPrintF>
    74e4:	|  |   addq.l #4,sp
	}

	newFunc -> originalNumber = funcNum;
    74e6:	|  '-> move.l 32(sp),d0
    74ea:	|      movea.l 8(sp),a0
    74ee:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    74f0:	|      move.l 8(sp),-(sp)
    74f4:	|      jsr 6a72 <loadFunctionCode>
    74fa:	|      addq.l #4,sp
	//custom->color[0] = 0x000;	
	return startNewFunctionLoaded (newFunc, numParamsExpected, calledBy, vStack, returnSommet);
    74fc:	|      movea.w 6(sp),a0
    7500:	|      move.l a0,-(sp)
    7502:	|      move.l 48(sp),-(sp)
    7506:	|      move.l 48(sp),-(sp)
    750a:	|      move.l 48(sp),-(sp)
    750e:	|      move.l 24(sp),-(sp)
    7512:	|      jsr 7368 <startNewFunctionLoaded>
    7518:	|      lea 20(sp),sp
}
    751c:	'----> movea.l (sp)+,a6
    751e:	       lea 24(sp),sp
    7522:	       rts

00007524 <unloadFunction>:

void unloadFunction (struct loadedFunction * fun) {
    7524:	             lea -12(sp),sp
    7528:	             move.l a6,-(sp)

	int a;

	//Keep function loaed in memory
	if( fun == currentEvents -> focusFunction) {	
    752a:	             movea.l 1c496 <currentEvents>,a0
    7530:	             move.l 20(a0),d0
    7534:	             cmp.l 20(sp),d0
    7538:	,----------- beq.w 75da <unloadFunction+0xb6>
		return;
	}

	if (fun -> stack) 
    753c:	|            movea.l 20(sp),a0
    7540:	|            move.l 24(a0),d0
    7544:	|        ,-- beq.s 7558 <unloadFunction+0x34>
	{
		KPrintF("unloadfunction: error non empty stack");
    7546:	|        |   pea 18e1a <PutChar+0x10a0>
    754c:	|        |   jsr 172d8 <KPrintF>
    7552:	|        |   addq.l #4,sp
		return;
    7554:	|  ,-----|-- bra.w 75dc <unloadFunction+0xb8>
	}
	FreeVec( fun -> compiledLines);
    7558:	|  |     '-> movea.l 20(sp),a0
    755c:	|  |         move.l 4(a0),8(sp)
    7562:	|  |         move.l 1cb26 <SysBase>,d0
    7568:	|  |         movea.l d0,a6
    756a:	|  |         movea.l 8(sp),a1
    756e:	|  |         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    7572:	|  |         clr.l 12(sp)
    7576:	|  |     ,-- bra.s 7596 <unloadFunction+0x72>
    7578:	|  |  ,--|-> movea.l 20(sp),a0
    757c:	|  |  |  |   move.l 20(a0),d1
    7580:	|  |  |  |   move.l 12(sp),d0
    7584:	|  |  |  |   lsl.l #3,d0
    7586:	|  |  |  |   add.l d1,d0
    7588:	|  |  |  |   move.l d0,-(sp)
    758a:	|  |  |  |   jsr 14a46 <unlinkVar>
    7590:	|  |  |  |   addq.l #4,sp
    7592:	|  |  |  |   addq.l #1,12(sp)
    7596:	|  |  |  '-> movea.l 20(sp),a0
    759a:	|  |  |      move.l 8(a0),d0
    759e:	|  |  |      cmp.l 12(sp),d0
    75a2:	|  |  '----- bgt.s 7578 <unloadFunction+0x54>
	if( fun->numLocals > 0) {
    75a4:	|  |         movea.l 20(sp),a0
    75a8:	|  |         move.l 8(a0),d0
    75ac:	|  |     ,-- ble.s 75c8 <unloadFunction+0xa4>
		FreeVec(fun -> localVars);
    75ae:	|  |     |   movea.l 20(sp),a0
    75b2:	|  |     |   move.l 20(a0),4(sp)
    75b8:	|  |     |   move.l 1cb26 <SysBase>,d0
    75be:	|  |     |   movea.l d0,a6
    75c0:	|  |     |   movea.l 4(sp),a1
    75c4:	|  |     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    75c8:	|  |     '-> moveq #28,d0
    75ca:	|  |         add.l 20(sp),d0
    75ce:	|  |         move.l d0,-(sp)
    75d0:	|  |         jsr 14a46 <unlinkVar>
    75d6:	|  |         addq.l #4,sp
    75d8:	|  +-------- bra.s 75dc <unloadFunction+0xb8>
		return;
    75da:	'--|-------> nop
}
    75dc:	   '-------> movea.l (sp)+,a6
    75de:	             lea 12(sp),sp
    75e2:	             rts

000075e4 <unfreezeSubs>:

void unfreezeSubs () {
    75e4:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    75e6:	          move.l 1cabe <allRunningFunctions>,(sp)

	while (thisFunction) {
    75ec:	   ,----- bra.s 760a <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    75ee:	,--|----> movea.l (sp),a0
    75f0:	|  |      move.b 56(a0),d0
    75f4:	|  |  ,-- beq.s 7604 <unfreezeSubs+0x20>
    75f6:	|  |  |   movea.l (sp),a0
    75f8:	|  |  |   move.b 56(a0),d0
    75fc:	|  |  |   subq.b #1,d0
    75fe:	|  |  |   movea.l (sp),a0
    7600:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    7604:	|  |  '-> movea.l (sp),a0
    7606:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    760a:	|  '----> tst.l (sp)
    760c:	'-------- bne.s 75ee <unfreezeSubs+0xa>
	}
}
    760e:	          nop
    7610:	          nop
    7612:	          addq.l #4,sp
    7614:	          rts

00007616 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    7616:	clr.w 1c4a2 <sliceBusy>
}
    761c:	nop
    761e:	rts

00007620 <getNumberedString>:

char * getNumberedString (int value) {
    7620:	       lea -56(sp),sp
    7624:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    7628:	       move.w 1c4a2 <sliceBusy>,d0
    762e:	   ,-- beq.s 7678 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    7630:	   |   move.l 1cb2e <DOSBase>,d0
    7636:	   |   movea.l d0,a6
    7638:	   |   jsr -60(a6)
    763c:	   |   move.l d0,28(sp)
    7640:	   |   move.l 28(sp),d0
    7644:	   |   move.l d0,24(sp)
    7648:	   |   move.l #101952,20(sp)
    7650:	   |   moveq #76,d0
    7652:	   |   move.l d0,16(sp)
    7656:	   |   move.l 1cb2e <DOSBase>,d0
    765c:	   |   movea.l d0,a6
    765e:	   |   move.l 24(sp),d1
    7662:	   |   move.l 20(sp),d2
    7666:	   |   move.l 16(sp),d3
    766a:	   |   jsr -48(a6)
    766e:	   |   move.l d0,12(sp)
		return NULL;
    7672:	   |   moveq #0,d0
    7674:	,--|-- bra.w 7714 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    7678:	|  '-> move.l 1cb0e <bigDataFile>,64(sp)
    7680:	|      move.l 72(sp),d0
    7684:	|      add.l d0,d0
    7686:	|      add.l d0,d0
    7688:	|      move.l d0,d1
    768a:	|      move.l 1cb1a <startOfTextIndex>,d0
    7690:	|      add.l d1,d0
    7692:	|      move.l d0,60(sp)
    7696:	|      moveq #-1,d0
    7698:	|      move.l d0,56(sp)
    769c:	|      move.l 1cb2e <DOSBase>,d0
    76a2:	|      movea.l d0,a6
    76a4:	|      move.l 64(sp),d1
    76a8:	|      move.l 60(sp),d2
    76ac:	|      move.l 56(sp),d3
    76b0:	|      jsr -66(a6)
    76b4:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    76b8:	|      move.l 1cb0e <bigDataFile>,d0
    76be:	|      move.l d0,-(sp)
    76c0:	|      jsr 718 <get4bytes>
    76c6:	|      addq.l #4,sp
    76c8:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    76cc:	|      move.l 1cb0e <bigDataFile>,48(sp)
    76d4:	|      move.l 72(sp),44(sp)
    76da:	|      moveq #-1,d0
    76dc:	|      move.l d0,40(sp)
    76e0:	|      move.l 1cb2e <DOSBase>,d0
    76e6:	|      movea.l d0,a6
    76e8:	|      move.l 48(sp),d1
    76ec:	|      move.l 44(sp),d2
    76f0:	|      move.l 40(sp),d3
    76f4:	|      jsr -66(a6)
    76f8:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    76fc:	|      move.l 1cb0e <bigDataFile>,d0
    7702:	|      move.l d0,-(sp)
    7704:	|      jsr b02 <readString>
    770a:	|      addq.l #4,sp
    770c:	|      move.l d0,32(sp)
	
	return s;
    7710:	|      move.l 32(sp),d0
}
    7714:	'----> movem.l (sp)+,d2-d3/a6
    7718:	       lea 56(sp),sp
    771c:	       rts

0000771e <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    771e:	       lea -32(sp),sp
    7722:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    7726:	       move.w 1c4a2 <sliceBusy>,d0
    772c:	   ,-- beq.s 7748 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    772e:	   |   pea 18e8d <PutChar+0x1113>
    7734:	   |   pea 18eab <PutChar+0x1131>
    773a:	   |   jsr 172d8 <KPrintF>
    7740:	   |   addq.l #8,sp
		return 0;
    7742:	   |   moveq #0,d0
    7744:	,--|-- bra.w 77dc <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    7748:	|  '-> move.l 1cb0e <bigDataFile>,40(sp)
    7750:	|      move.l 48(sp),d0
    7754:	|      add.l d0,d0
    7756:	|      add.l d0,d0
    7758:	|      move.l d0,d1
    775a:	|      move.l 1cb16 <startOfDataIndex>,d0
    7760:	|      add.l d1,d0
    7762:	|      move.l d0,36(sp)
    7766:	|      moveq #-1,d0
    7768:	|      move.l d0,32(sp)
    776c:	|      move.l 1cb2e <DOSBase>,d0
    7772:	|      movea.l d0,a6
    7774:	|      move.l 40(sp),d1
    7778:	|      move.l 36(sp),d2
    777c:	|      move.l 32(sp),d3
    7780:	|      jsr -66(a6)
    7784:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    7788:	|      move.l 1cb0e <bigDataFile>,24(sp)
    7790:	|      move.l 1cb0e <bigDataFile>,d0
    7796:	|      move.l d0,-(sp)
    7798:	|      jsr 718 <get4bytes>
    779e:	|      addq.l #4,sp
    77a0:	|      move.l d0,20(sp)
    77a4:	|      clr.l 16(sp)
    77a8:	|      move.l 1cb2e <DOSBase>,d0
    77ae:	|      movea.l d0,a6
    77b0:	|      move.l 24(sp),d1
    77b4:	|      move.l 20(sp),d2
    77b8:	|      move.l 16(sp),d3
    77bc:	|      jsr -66(a6)
    77c0:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    77c4:	|      move.w #1,1c4a2 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    77cc:	|      move.l 1cb0e <bigDataFile>,d0
    77d2:	|      move.l d0,-(sp)
    77d4:	|      jsr 718 <get4bytes>
    77da:	|      addq.l #4,sp
}
    77dc:	'----> movem.l (sp)+,d2-d3/a6
    77e0:	       lea 32(sp),sp
    77e4:	       rts

000077e6 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    77e6:	       lea -32(sp),sp
    77ea:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    77ee:	       move.w 1c4a2 <sliceBusy>,d0
    77f4:	   ,-- beq.s 7810 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    77f6:	   |   pea 18e8d <PutChar+0x1113>
    77fc:	   |   pea 18eab <PutChar+0x1131>
    7802:	   |   jsr 172d8 <KPrintF>
    7808:	   |   addq.l #8,sp
        return FALSE;
    780a:	   |   clr.w d0
    780c:	,--|-- bra.w 789c <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    7810:	|  '-> move.l 1cb0e <bigDataFile>,40(sp)
    7818:	|      move.l 48(sp),d0
    781c:	|      add.l d0,d0
    781e:	|      add.l d0,d0
    7820:	|      move.l d0,d1
    7822:	|      move.l 1cb22 <startOfObjectIndex>,d0
    7828:	|      add.l d1,d0
    782a:	|      move.l d0,36(sp)
    782e:	|      moveq #-1,d0
    7830:	|      move.l d0,32(sp)
    7834:	|      move.l 1cb2e <DOSBase>,d0
    783a:	|      movea.l d0,a6
    783c:	|      move.l 40(sp),d1
    7840:	|      move.l 36(sp),d2
    7844:	|      move.l 32(sp),d3
    7848:	|      jsr -66(a6)
    784c:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    7850:	|      move.l 1cb0e <bigDataFile>,24(sp)
    7858:	|      move.l 1cb0e <bigDataFile>,d0
    785e:	|      move.l d0,-(sp)
    7860:	|      jsr 718 <get4bytes>
    7866:	|      addq.l #4,sp
    7868:	|      move.l d0,20(sp)
    786c:	|      moveq #-1,d0
    786e:	|      move.l d0,16(sp)
    7872:	|      move.l 1cb2e <DOSBase>,d0
    7878:	|      movea.l d0,a6
    787a:	|      move.l 24(sp),d1
    787e:	|      move.l 20(sp),d2
    7882:	|      move.l 16(sp),d3
    7886:	|      jsr -66(a6)
    788a:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    788e:	|      move.w #1,1c4a2 <sliceBusy>
    7896:	|      move.w 1c4a2 <sliceBusy>,d0
}
    789c:	'----> movem.l (sp)+,d2-d3/a6
    78a0:	       lea 32(sp),sp
    78a4:	       rts

000078a6 <openSubSlice>:

BOOL openSubSlice (int num) {
    78a6:	       lea -32(sp),sp
    78aa:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    78ae:	       move.w 1c4a2 <sliceBusy>,d0
    78b4:	   ,-- beq.s 78d0 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    78b6:	   |   pea 18e8d <PutChar+0x1113>
    78bc:	   |   pea 18eab <PutChar+0x1131>
    78c2:	   |   jsr 172d8 <KPrintF>
    78c8:	   |   addq.l #8,sp
		return FALSE;
    78ca:	   |   clr.w d0
    78cc:	,--|-- bra.w 795c <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    78d0:	|  '-> move.l 1cb0e <bigDataFile>,40(sp)
    78d8:	|      move.l 48(sp),d0
    78dc:	|      add.l d0,d0
    78de:	|      add.l d0,d0
    78e0:	|      move.l d0,d1
    78e2:	|      move.l 1cb1e <startOfSubIndex>,d0
    78e8:	|      add.l d1,d0
    78ea:	|      move.l d0,36(sp)
    78ee:	|      moveq #-1,d0
    78f0:	|      move.l d0,32(sp)
    78f4:	|      move.l 1cb2e <DOSBase>,d0
    78fa:	|      movea.l d0,a6
    78fc:	|      move.l 40(sp),d1
    7900:	|      move.l 36(sp),d2
    7904:	|      move.l 32(sp),d3
    7908:	|      jsr -66(a6)
    790c:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    7910:	|      move.l 1cb0e <bigDataFile>,24(sp)
    7918:	|      move.l 1cb0e <bigDataFile>,d0
    791e:	|      move.l d0,-(sp)
    7920:	|      jsr 718 <get4bytes>
    7926:	|      addq.l #4,sp
    7928:	|      move.l d0,20(sp)
    792c:	|      moveq #-1,d0
    792e:	|      move.l d0,16(sp)
    7932:	|      move.l 1cb2e <DOSBase>,d0
    7938:	|      movea.l d0,a6
    793a:	|      move.l 24(sp),d1
    793e:	|      move.l 20(sp),d2
    7942:	|      move.l 16(sp),d3
    7946:	|      jsr -66(a6)
    794a:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    794e:	|      move.w #1,1c4a2 <sliceBusy>
    7956:	|      move.w 1c4a2 <sliceBusy>,d0
}
    795c:	'----> movem.l (sp)+,d2-d3/a6
    7960:	       lea 32(sp),sp
    7964:	       rts

00007966 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    7966:	       lea -180(sp),sp
    796a:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    796e:	       tst.l 196(sp)
    7972:	,----- beq.s 79b2 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7974:	|      move.l 196(sp),1cb0e <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    797c:	|      move.l 196(sp),168(sp)
    7982:	|      clr.l 164(sp)
    7986:	|      clr.l 160(sp)
    798a:	|      move.l 1cb2e <DOSBase>,d0
    7990:	|      movea.l d0,a6
    7992:	|      move.l 168(sp),d1
    7996:	|      move.l 164(sp),d2
    799a:	|      move.l 160(sp),d3
    799e:	|      jsr -66(a6)
    79a2:	|      move.l d0,156(sp)
    79a6:	|      move.l 156(sp),d0
    79aa:	|      move.l d0,1cb12 <startIndex>
    79b0:	|  ,-- bra.s 79ec <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    79b2:	'--|-> move.l 1cb0e <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    79ba:	   |   move.l 196(sp),184(sp)
    79c0:	   |   move.l 1cb12 <startIndex>,d0
    79c6:	   |   move.l d0,180(sp)
    79ca:	   |   moveq #-1,d0
    79cc:	   |   move.l d0,176(sp)
    79d0:	   |   move.l 1cb2e <DOSBase>,d0
    79d6:	   |   movea.l d0,a6
    79d8:	   |   move.l 184(sp),d1
    79dc:	   |   move.l 180(sp),d2
    79e0:	   |   move.l 176(sp),d3
    79e4:	   |   jsr -66(a6)
    79e8:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    79ec:	   '-> clr.w 1c4a2 <sliceBusy>

	if (skipBefore > numLanguages) {
    79f2:	       move.l 204(sp),d0
    79f6:	       cmp.l 200(sp),d0
    79fa:	   ,-- bls.s 7a0e <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    79fc:	   |   pea 18ec5 <PutChar+0x114b>
    7a02:	   |   jsr 172d8 <KPrintF>
    7a08:	   |   addq.l #4,sp
		skipBefore = 0;
    7a0a:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    7a0e:	   '-> move.l 200(sp),d0
    7a12:	       sub.l 204(sp),d0
    7a16:	       move.l d0,188(sp)
	while (skipBefore) {
    7a1a:	   ,-- bra.s 7a58 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    7a1c:	,--|-> move.l 196(sp),24(sp)
    7a22:	|  |   move.l 196(sp),-(sp)
    7a26:	|  |   jsr 718 <get4bytes>
    7a2c:	|  |   addq.l #4,sp
    7a2e:	|  |   move.l d0,20(sp)
    7a32:	|  |   moveq #-1,d0
    7a34:	|  |   move.l d0,16(sp)
    7a38:	|  |   move.l 1cb2e <DOSBase>,d0
    7a3e:	|  |   movea.l d0,a6
    7a40:	|  |   move.l 24(sp),d1
    7a44:	|  |   move.l 20(sp),d2
    7a48:	|  |   move.l 16(sp),d3
    7a4c:	|  |   jsr -66(a6)
    7a50:	|  |   move.l d0,12(sp)
		skipBefore --;
    7a54:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    7a58:	|  '-> tst.l 204(sp)
    7a5c:	'----- bne.s 7a1c <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7a5e:	       move.l 196(sp),152(sp)
    7a64:	       clr.l 148(sp)
    7a68:	       clr.l 144(sp)
    7a6c:	       move.l 1cb2e <DOSBase>,d0
    7a72:	       movea.l d0,a6
    7a74:	       move.l 152(sp),d1
    7a78:	       move.l 148(sp),d2
    7a7c:	       move.l 144(sp),d3
    7a80:	       jsr -66(a6)
    7a84:	       move.l d0,140(sp)
    7a88:	       move.l 140(sp),d0
    7a8c:	       addq.l #4,d0
    7a8e:	       move.l d0,1cb1a <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7a94:	       move.l 196(sp),136(sp)
    7a9a:	       move.l 196(sp),-(sp)
    7a9e:	       jsr 718 <get4bytes>
    7aa4:	       addq.l #4,sp
    7aa6:	       move.l d0,132(sp)
    7aaa:	       moveq #-1,d0
    7aac:	       move.l d0,128(sp)
    7ab0:	       move.l 1cb2e <DOSBase>,d0
    7ab6:	       movea.l d0,a6
    7ab8:	       move.l 136(sp),d1
    7abc:	       move.l 132(sp),d2
    7ac0:	       move.l 128(sp),d3
    7ac4:	       jsr -66(a6)
    7ac8:	       move.l d0,124(sp)

	while (skipAfter) {
    7acc:	   ,-- bra.s 7b0a <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7ace:	,--|-> move.l 196(sp),40(sp)
    7ad4:	|  |   move.l 196(sp),-(sp)
    7ad8:	|  |   jsr 718 <get4bytes>
    7ade:	|  |   addq.l #4,sp
    7ae0:	|  |   move.l d0,36(sp)
    7ae4:	|  |   moveq #-1,d0
    7ae6:	|  |   move.l d0,32(sp)
    7aea:	|  |   move.l 1cb2e <DOSBase>,d0
    7af0:	|  |   movea.l d0,a6
    7af2:	|  |   move.l 40(sp),d1
    7af6:	|  |   move.l 36(sp),d2
    7afa:	|  |   move.l 32(sp),d3
    7afe:	|  |   jsr -66(a6)
    7b02:	|  |   move.l d0,28(sp)
		skipAfter --;
    7b06:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    7b0a:	|  '-> tst.l 188(sp)
    7b0e:	'----- bne.s 7ace <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7b10:	       move.l 196(sp),120(sp)
    7b16:	       clr.l 116(sp)
    7b1a:	       clr.l 112(sp)
    7b1e:	       move.l 1cb2e <DOSBase>,d0
    7b24:	       movea.l d0,a6
    7b26:	       move.l 120(sp),d1
    7b2a:	       move.l 116(sp),d2
    7b2e:	       move.l 112(sp),d3
    7b32:	       jsr -66(a6)
    7b36:	       move.l d0,108(sp)
    7b3a:	       move.l 108(sp),d0
    7b3e:	       addq.l #4,d0
    7b40:	       move.l d0,1cb1e <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    7b46:	       move.l 196(sp),104(sp)
    7b4c:	       move.l 196(sp),-(sp)
    7b50:	       jsr 718 <get4bytes>
    7b56:	       addq.l #4,sp
    7b58:	       move.l d0,100(sp)
    7b5c:	       clr.l 96(sp)
    7b60:	       move.l 1cb2e <DOSBase>,d0
    7b66:	       movea.l d0,a6
    7b68:	       move.l 104(sp),d1
    7b6c:	       move.l 100(sp),d2
    7b70:	       move.l 96(sp),d3
    7b74:	       jsr -66(a6)
    7b78:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7b7c:	       move.l 196(sp),88(sp)
    7b82:	       clr.l 84(sp)
    7b86:	       clr.l 80(sp)
    7b8a:	       move.l 1cb2e <DOSBase>,d0
    7b90:	       movea.l d0,a6
    7b92:	       move.l 88(sp),d1
    7b96:	       move.l 84(sp),d2
    7b9a:	       move.l 80(sp),d3
    7b9e:	       jsr -66(a6)
    7ba2:	       move.l d0,76(sp)
    7ba6:	       move.l 76(sp),d0
    7baa:	       addq.l #4,d0
    7bac:	       move.l d0,1cb22 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7bb2:	       move.l 196(sp),72(sp)
    7bb8:	       move.l 196(sp),-(sp)
    7bbc:	       jsr 718 <get4bytes>
    7bc2:	       addq.l #4,sp
    7bc4:	       move.l d0,68(sp)
    7bc8:	       clr.l 64(sp)
    7bcc:	       move.l 1cb2e <DOSBase>,d0
    7bd2:	       movea.l d0,a6
    7bd4:	       move.l 72(sp),d1
    7bd8:	       move.l 68(sp),d2
    7bdc:	       move.l 64(sp),d3
    7be0:	       jsr -66(a6)
    7be4:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    7be8:	       move.l 196(sp),56(sp)
    7bee:	       clr.l 52(sp)
    7bf2:	       clr.l 48(sp)
    7bf6:	       move.l 1cb2e <DOSBase>,d0
    7bfc:	       movea.l d0,a6
    7bfe:	       move.l 56(sp),d1
    7c02:	       move.l 52(sp),d2
    7c06:	       move.l 48(sp),d3
    7c0a:	       jsr -66(a6)
    7c0e:	       move.l d0,44(sp)
    7c12:	       move.l 44(sp),d0
    7c16:	       move.l d0,1cb16 <startOfDataIndex>
    7c1c:	       nop
    7c1e:	       movem.l (sp)+,d2-d3/a6
    7c22:	       lea 180(sp),sp
    7c26:	       rts

00007c28 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    7c28:	    lea -20(sp),sp
    7c2c:	    move.l a6,-(sp)
    7c2e:	    move.l d7,-(sp)
	APTR vbr = 0;
    7c30:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    7c34:	    move.w #20090,10(sp)
    7c3a:	    move.w #2049,12(sp)
    7c40:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    7c46:	    movea.l 1cb26 <SysBase>,a0
    7c4c:	    move.w 296(a0),d0
    7c50:	    move.w d0,d0
    7c52:	    andi.l #65535,d0
    7c58:	    moveq #1,d1
    7c5a:	    and.l d1,d0
    7c5c:	,-- beq.s 7c8a <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    7c5e:	|   lea 28(sp),a0
    7c62:	|   lea -18(a0),a0
    7c66:	|   move.l a0,20(sp)
    7c6a:	|   move.l 1cb26 <SysBase>,d0
    7c70:	|   movea.l d0,a6
    7c72:	|   move.l 20(sp),d7
    7c76:	|   exg d7,a5
    7c78:	|   jsr -30(a6)
    7c7c:	|   exg d7,a5
    7c7e:	|   move.l d0,16(sp)
    7c82:	|   move.l 16(sp),d0
    7c86:	|   move.l d0,24(sp)

	return vbr;
    7c8a:	'-> move.l 24(sp),d0
}
    7c8e:	    move.l (sp)+,d7
    7c90:	    movea.l (sp)+,a6
    7c92:	    lea 20(sp),sp
    7c96:	    rts

00007c98 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    7c98:	movea.l 1cb4c <VBR>,a0
    7c9e:	lea 108(a0),a0
    7ca2:	move.l 4(sp),(a0)
}
    7ca6:	nop
    7ca8:	rts

00007caa <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    7caa:	movea.l 1cb4c <VBR>,a0
    7cb0:	move.l 108(a0),d0
}
    7cb4:	rts

00007cb6 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    7cb6:	       subq.l #8,sp
    7cb8:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    7cba:	       pea 18f0e <PutChar+0x1194>
    7cc0:	       jsr 172d8 <KPrintF>
    7cc6:	       addq.l #4,sp
	Forbid();
    7cc8:	       move.l 1cb26 <SysBase>,d0
    7cce:	       movea.l d0,a6
    7cd0:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    7cd4:	       pea 18f26 <PutChar+0x11ac>
    7cda:	       jsr 172d8 <KPrintF>
    7ce0:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    7ce2:	       movea.l 1cb2a <custom>,a0
    7ce8:	       move.w 16(a0),d0
    7cec:	       move.w d0,1cb4a <SystemADKCON>
	SystemInts=custom->intenar;
    7cf2:	       movea.l 1cb2a <custom>,a0
    7cf8:	       move.w 28(a0),d0
    7cfc:	       move.w d0,1cb46 <SystemInts>
	SystemDMA=custom->dmaconr;
    7d02:	       movea.l 1cb2a <custom>,a0
    7d08:	       move.w 2(a0),d0
    7d0c:	       move.w d0,1cb48 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    7d12:	       movea.l 1cb32 <GfxBase>,a0
    7d18:	       move.l 34(a0),d0
    7d1c:	       move.l d0,1cb54 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    7d22:	       pea 18f44 <PutChar+0x11ca>
    7d28:	       jsr 172d8 <KPrintF>
    7d2e:	       addq.l #4,sp
	LoadView(0);
    7d30:	       clr.l 4(sp)
    7d34:	       move.l 1cb32 <GfxBase>,d0
    7d3a:	       movea.l d0,a6
    7d3c:	       movea.l 4(sp),a1
    7d40:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    7d44:	       pea 18f5a <PutChar+0x11e0>
    7d4a:	       jsr 172d8 <KPrintF>
    7d50:	       addq.l #4,sp
	WaitTOF();
    7d52:	       move.l 1cb32 <GfxBase>,d0
    7d58:	       movea.l d0,a6
    7d5a:	       jsr -270(a6)
	WaitTOF();
    7d5e:	       move.l 1cb32 <GfxBase>,d0
    7d64:	       movea.l d0,a6
    7d66:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    7d6a:	       pea 18f6f <PutChar+0x11f5>
    7d70:	       jsr 172d8 <KPrintF>
    7d76:	       addq.l #4,sp
	WaitVbl();
    7d78:	       jsr 1720c <WaitVbl>
	WaitVbl();
    7d7e:	       jsr 1720c <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7d84:	       pea 18f84 <PutChar+0x120a>
    7d8a:	       jsr 172d8 <KPrintF>
    7d90:	       addq.l #4,sp
	OwnBlitter();
    7d92:	       move.l 1cb32 <GfxBase>,d0
    7d98:	       movea.l d0,a6
    7d9a:	       jsr -456(a6)
	WaitBlit();	
    7d9e:	       move.l 1cb32 <GfxBase>,d0
    7da4:	       movea.l d0,a6
    7da6:	       jsr -228(a6)
	Disable();
    7daa:	       move.l 1cb26 <SysBase>,d0
    7db0:	       movea.l d0,a6
    7db2:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    7db6:	       pea 18fa5 <PutChar+0x122b>
    7dbc:	       jsr 172d8 <KPrintF>
    7dc2:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7dc4:	       movea.l 1cb2a <custom>,a0
    7dca:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    7dd0:	       pea 18fbc <PutChar+0x1242>
    7dd6:	       jsr 172d8 <KPrintF>
    7ddc:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    7dde:	       clr.l 8(sp)
    7de2:	   ,-- bra.s 7e00 <TakeSystem+0x14a>
		custom->color[a]=0;
    7de4:	,--|-> movea.l 1cb2a <custom>,a0
    7dea:	|  |   move.l 8(sp),d0
    7dee:	|  |   addi.l #192,d0
    7df4:	|  |   add.l d0,d0
    7df6:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    7dfc:	|  |   addq.l #1,8(sp)
    7e00:	|  '-> moveq #31,d0
    7e02:	|      cmp.l 8(sp),d0
    7e06:	'----- bge.s 7de4 <TakeSystem+0x12e>

	WaitVbl();
    7e08:	       jsr 1720c <WaitVbl>
	WaitVbl();
    7e0e:	       jsr 1720c <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    7e14:	       pea 18fe1 <PutChar+0x1267>
    7e1a:	       jsr 172d8 <KPrintF>
    7e20:	       addq.l #4,sp
	VBR=GetVBR();
    7e22:	       jsr 7c28 <GetVBR>
    7e28:	       move.l d0,1cb4c <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    7e2e:	       jsr 7caa <GetInterruptHandler>
    7e34:	       move.l d0,1cb50 <SystemIrq>
}
    7e3a:	       nop
    7e3c:	       movea.l (sp)+,a6
    7e3e:	       addq.l #8,sp
    7e40:	       rts

00007e42 <FreeSystem>:

void FreeSystem() { 
    7e42:	subq.l #4,sp
    7e44:	move.l a6,-(sp)
	WaitVbl();
    7e46:	jsr 1720c <WaitVbl>
	WaitBlit();
    7e4c:	move.l 1cb32 <GfxBase>,d0
    7e52:	movea.l d0,a6
    7e54:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    7e58:	movea.l 1cb2a <custom>,a0
    7e5e:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    7e64:	movea.l 1cb2a <custom>,a0
    7e6a:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7e70:	movea.l 1cb2a <custom>,a0
    7e76:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    7e7c:	move.l 1cb50 <SystemIrq>,d0
    7e82:	move.l d0,-(sp)
    7e84:	jsr 7c98 <SetInterruptHandler>
    7e8a:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    7e8c:	movea.l 1cb32 <GfxBase>,a0
    7e92:	move.l 38(a0),d0
    7e96:	movea.l 1cb2a <custom>,a0
    7e9c:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    7ea0:	movea.l 1cb32 <GfxBase>,a0
    7ea6:	move.l 50(a0),d0
    7eaa:	movea.l 1cb2a <custom>,a0
    7eb0:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    7eb4:	movea.l 1cb2a <custom>,a0
    7eba:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    7ec0:	move.w 1cb48 <SystemDMA>,d0
    7ec6:	movea.l 1cb2a <custom>,a0
    7ecc:	ori.w #-32768,d0
    7ed0:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    7ed4:	move.w 1cb4a <SystemADKCON>,d0
    7eda:	movea.l 1cb2a <custom>,a0
    7ee0:	ori.w #-32768,d0
    7ee4:	move.w d0,158(a0)

	WaitBlit();	
    7ee8:	move.l 1cb32 <GfxBase>,d0
    7eee:	movea.l d0,a6
    7ef0:	jsr -228(a6)
	DisownBlitter();
    7ef4:	move.l 1cb32 <GfxBase>,d0
    7efa:	movea.l d0,a6
    7efc:	jsr -462(a6)
	Enable();
    7f00:	move.l 1cb26 <SysBase>,d0
    7f06:	movea.l d0,a6
    7f08:	jsr -126(a6)

	LoadView(ActiView);
    7f0c:	move.l 1cb54 <ActiView>,4(sp)
    7f14:	move.l 1cb32 <GfxBase>,d0
    7f1a:	movea.l d0,a6
    7f1c:	movea.l 4(sp),a1
    7f20:	jsr -222(a6)
	WaitTOF();
    7f24:	move.l 1cb32 <GfxBase>,d0
    7f2a:	movea.l d0,a6
    7f2c:	jsr -270(a6)
	WaitTOF();
    7f30:	move.l 1cb32 <GfxBase>,d0
    7f36:	movea.l d0,a6
    7f38:	jsr -270(a6)

	Permit();
    7f3c:	move.l 1cb26 <SysBase>,d0
    7f42:	movea.l d0,a6
    7f44:	jsr -138(a6)
}
    7f48:	nop
    7f4a:	movea.l (sp)+,a6
    7f4c:	addq.l #4,sp
    7f4e:	rts

00007f50 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    7f50:	       lea -132(sp),sp
    7f54:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    7f58:	       clr.l 140(sp)
    7f5c:	   ,-- bra.s 7f62 <main+0x12>
    7f5e:	,--|-> addq.l #1,140(sp)
    7f62:	|  '-> cmpi.l #999,140(sp)
    7f6a:	'----- ble.s 7f5e <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    7f6c:	       movea.w #4,a0
    7f70:	       move.l (a0),d0
    7f72:	       move.l d0,1cb26 <SysBase>
	custom = (struct Custom*)0xdff000;	
    7f78:	       move.l #14675968,1cb2a <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    7f82:	       move.l #102405,136(sp)
    7f8a:	       clr.l 132(sp)
    7f8e:	       move.l 1cb26 <SysBase>,d0
    7f94:	       movea.l d0,a6
    7f96:	       movea.l 136(sp),a1
    7f9a:	       move.l 132(sp),d0
    7f9e:	       jsr -552(a6)
    7fa2:	       move.l d0,128(sp)
    7fa6:	       move.l 128(sp),d0
    7faa:	       move.l d0,1cb32 <GfxBase>
	if (!GfxBase)
    7fb0:	       move.l 1cb32 <GfxBase>,d0
    7fb6:	   ,-- bne.s 7fcc <main+0x7c>
		Exit(0);
    7fb8:	   |   clr.l 124(sp)
    7fbc:	   |   move.l 1cb2e <DOSBase>,d0
    7fc2:	   |   movea.l d0,a6
    7fc4:	   |   move.l 124(sp),d1
    7fc8:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    7fcc:	   '-> move.l #102422,120(sp)
    7fd4:	       clr.l 116(sp)
    7fd8:	       move.l 1cb26 <SysBase>,d0
    7fde:	       movea.l d0,a6
    7fe0:	       movea.l 120(sp),a1
    7fe4:	       move.l 116(sp),d0
    7fe8:	       jsr -552(a6)
    7fec:	       move.l d0,112(sp)
    7ff0:	       move.l 112(sp),d0
    7ff4:	       move.l d0,1cb2e <DOSBase>
	if (!DOSBase)
    7ffa:	       move.l 1cb2e <DOSBase>,d0
    8000:	   ,-- bne.s 8016 <main+0xc6>
		Exit(0);
    8002:	   |   clr.l 108(sp)
    8006:	   |   move.l 1cb2e <DOSBase>,d0
    800c:	   |   movea.l d0,a6
    800e:	   |   move.l 108(sp),d1
    8012:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    8016:	   '-> move.l #102434,104(sp)
    801e:	       clr.l 100(sp)
    8022:	       move.l 1cb26 <SysBase>,d0
    8028:	       movea.l d0,a6
    802a:	       movea.l 104(sp),a1
    802e:	       move.l 100(sp),d0
    8032:	       jsr -552(a6)
    8036:	       move.l d0,96(sp)
    803a:	       move.l 96(sp),d0
    803e:	       move.l d0,1cb36 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    8044:	       move.l 1cb36 <MathIeeeSingBasBase>,d0
    804a:	   ,-- bne.s 8060 <main+0x110>
		Exit(0);	
    804c:	   |   clr.l 92(sp)
    8050:	   |   move.l 1cb2e <DOSBase>,d0
    8056:	   |   movea.l d0,a6
    8058:	   |   move.l 92(sp),d1
    805c:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    8060:	   '-> move.l #102458,88(sp)
    8068:	       clr.l 84(sp)
    806c:	       move.l 1cb26 <SysBase>,d0
    8072:	       movea.l d0,a6
    8074:	       movea.l 88(sp),a1
    8078:	       move.l 84(sp),d0
    807c:	       jsr -552(a6)
    8080:	       move.l d0,80(sp)
    8084:	       move.l 80(sp),d0
    8088:	       move.l d0,1cb3a <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    808e:	       move.l 1cb3a <MathIeeeSingTransBase>,d0
    8094:	   ,-- bne.s 80aa <main+0x15a>
		Exit(0);
    8096:	   |   clr.l 76(sp)
    809a:	   |   move.l 1cb2e <DOSBase>,d0
    80a0:	   |   movea.l d0,a6
    80a2:	   |   move.l 76(sp),d1
    80a6:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    80aa:	   '-> move.l #102484,72(sp)
    80b2:	       clr.l 68(sp)
    80b6:	       move.l 1cb26 <SysBase>,d0
    80bc:	       movea.l d0,a6
    80be:	       movea.l 72(sp),a1
    80c2:	       move.l 68(sp),d0
    80c6:	       jsr -552(a6)
    80ca:	       move.l d0,64(sp)
    80ce:	       move.l 64(sp),d0
    80d2:	       move.l d0,1cb42 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    80d8:	       move.l 1cb42 <MathIeeeDoubTransBase>,d0
    80de:	   ,-- bne.s 80f4 <main+0x1a4>
		Exit(0);
    80e0:	   |   clr.l 60(sp)
    80e4:	   |   move.l 1cb2e <DOSBase>,d0
    80ea:	   |   movea.l d0,a6
    80ec:	   |   move.l 60(sp),d1
    80f0:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    80f4:	   '-> move.l #102510,56(sp)
    80fc:	       clr.l 52(sp)
    8100:	       move.l 1cb26 <SysBase>,d0
    8106:	       movea.l d0,a6
    8108:	       movea.l 56(sp),a1
    810c:	       move.l 52(sp),d0
    8110:	       jsr -552(a6)
    8114:	       move.l d0,48(sp)
    8118:	       move.l 48(sp),d0
    811c:	       move.l d0,1cb3e <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    8122:	       move.l 1cb3e <MathIeeeDoubBasBase>,d0
    8128:	   ,-- bne.s 813e <main+0x1ee>
		Exit(0);
    812a:	   |   clr.l 44(sp)
    812e:	   |   move.l 1cb2e <DOSBase>,d0
    8134:	   |   movea.l d0,a6
    8136:	   |   move.l 44(sp),d1
    813a:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 035!\n");
    813e:	   '-> pea 19086 <PutChar+0x130c>
    8144:	       jsr 172d8 <KPrintF>
    814a:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    814c:	       move.l 1cb2e <DOSBase>,d0
    8152:	       movea.l d0,a6
    8154:	       jsr -60(a6)
    8158:	       move.l d0,40(sp)
    815c:	       move.l 40(sp),d0
    8160:	       move.l d0,36(sp)
    8164:	       move.l #102566,32(sp)
    816c:	       moveq #25,d0
    816e:	       move.l d0,28(sp)
    8172:	       move.l 1cb2e <DOSBase>,d0
    8178:	       movea.l d0,a6
    817a:	       move.l 36(sp),d1
    817e:	       move.l 32(sp),d2
    8182:	       move.l 28(sp),d3
    8186:	       jsr -48(a6)
    818a:	       move.l d0,24(sp)
	Delay(50);
    818e:	       moveq #50,d0
    8190:	       move.l d0,20(sp)
    8194:	       move.l 1cb2e <DOSBase>,d0
    819a:	       movea.l d0,a6
    819c:	       move.l 20(sp),d1
    81a0:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    81a4:	       pea 190bf <PutChar+0x1345>
    81aa:	       jsr 172d8 <KPrintF>
    81b0:	       addq.l #4,sp
	TakeSystem();
    81b2:	       jsr 7cb6 <TakeSystem>
	KPrintF("System Taken\n");
    81b8:	       pea 190ce <PutChar+0x1354>
    81be:	       jsr 172d8 <KPrintF>
    81c4:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    81c6:	       movea.l 1cb2a <custom>,a0
    81cc:	       move.w #-30721,150(a0)
	WaitVbl();
    81d2:	       jsr 1720c <WaitVbl>

	KPrintF("Starting main_sludge\n");
    81d8:	       pea 190dc <PutChar+0x1362>
    81de:	       jsr 172d8 <KPrintF>
    81e4:	       addq.l #4,sp
	main_sludge(argc, argv);	
    81e6:	       move.l 152(sp),-(sp)
    81ea:	       move.l 152(sp),-(sp)
    81ee:	       jsr 49d6 <main_sludge>
    81f4:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    81f6:	       jsr 7e42 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    81fc:	       move.l 1cb2e <DOSBase>,16(sp)
    8204:	       move.l 1cb26 <SysBase>,d0
    820a:	       movea.l d0,a6
    820c:	       movea.l 16(sp),a1
    8210:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    8214:	       move.l 1cb32 <GfxBase>,12(sp)
    821c:	       move.l 1cb26 <SysBase>,d0
    8222:	       movea.l d0,a6
    8224:	       movea.l 12(sp),a1
    8228:	       jsr -414(a6)
    822c:	       moveq #0,d0
}
    822e:	       movem.l (sp)+,d2-d3/a6
    8232:	       lea 132(sp),sp
    8236:	       rts

00008238 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    8238:	    lea -16(sp),sp
    823c:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    823e:	    moveq #8,d0
    8240:	    move.l d0,16(sp)
    8244:	    clr.l 12(sp)
    8248:	    move.l 1cb26 <SysBase>,d0
    824e:	    movea.l d0,a6
    8250:	    move.l 16(sp),d0
    8254:	    move.l 12(sp),d1
    8258:	    jsr -684(a6)
    825c:	    move.l d0,8(sp)
    8260:	    move.l 8(sp),d0
    8264:	    move.l d0,4(sp)
	if (!newStat) {
    8268:	,-- bne.s 8298 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    826a:	|   movea.l 1c4a4 <nowStatus>,a0
    8270:	|   move.l (a0),d0
    8272:	|   movea.l 4(sp),a0
    8276:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    827a:	|   pea 18aee <PutChar+0xd74>
    8280:	|   jsr b8 <copyString>
    8286:	|   addq.l #4,sp
    8288:	|   movea.l 4(sp),a0
    828c:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    828e:	|   movea.l 1c4a4 <nowStatus>,a0
    8294:	|   move.l 4(sp),(a0)
	}
}
    8298:	'-> nop
    829a:	    movea.l (sp)+,a6
    829c:	    lea 16(sp),sp
    82a0:	    rts

000082a2 <clearStatusBar>:

void clearStatusBar () {
    82a2:	       lea -16(sp),sp
    82a6:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    82a8:	       movea.l 1c4a4 <nowStatus>,a0
    82ae:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    82b2:	       movea.l 1c4a4 <nowStatus>,a0
    82b8:	       moveq #-1,d0
    82ba:	       move.l d0,6(a0)
	while (stat) {
    82be:	   ,-- bra.s 82fe <clearStatusBar+0x5c>
		kill = stat;
    82c0:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    82c6:	|  |   movea.l 16(sp),a0
    82ca:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    82d0:	|  |   movea.l 12(sp),a0
    82d4:	|  |   move.l (a0),8(sp)
    82d8:	|  |   move.l 1cb26 <SysBase>,d0
    82de:	|  |   movea.l d0,a6
    82e0:	|  |   movea.l 8(sp),a1
    82e4:	|  |   jsr -690(a6)
		FreeVec(kill);
    82e8:	|  |   move.l 12(sp),4(sp)
    82ee:	|  |   move.l 1cb26 <SysBase>,d0
    82f4:	|  |   movea.l d0,a6
    82f6:	|  |   movea.l 4(sp),a1
    82fa:	|  |   jsr -690(a6)
	while (stat) {
    82fe:	|  '-> tst.l 16(sp)
    8302:	'----- bne.s 82c0 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    8304:	       movea.l 1c4a4 <nowStatus>,a0
    830a:	       clr.l (a0)
}
    830c:	       nop
    830e:	       movea.l (sp)+,a6
    8310:	       lea 16(sp),sp
    8314:	       rts

00008316 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    8316:	clr.l 1cb58 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    831c:	move.w #-1,1cb5c <mainStatus+0x4>
	mainStatus.litStatus = -1;
    8324:	moveq #-1,d0
    8326:	move.l d0,1cb5e <mainStatus+0x6>
	mainStatus.statusX = 10;
    832c:	moveq #10,d0
    832e:	move.l d0,1cb62 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    8334:	movea.l 1ca7e <winHeight>,a0
    833a:	lea -15(a0),a0
    833e:	move.l a0,d0
    8340:	move.l d0,1cb66 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    8346:	nop
    8348:	rts

0000834a <killLastStatus>:

void killLastStatus () {
    834a:	    lea -12(sp),sp
    834e:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    8350:	    movea.l 1c4a4 <nowStatus>,a0
    8356:	    move.l (a0),d0
    8358:	,-- beq.s 83a2 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    835a:	|   movea.l 1c4a4 <nowStatus>,a0
    8360:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    8364:	|   movea.l 1c4a4 <nowStatus>,a0
    836a:	|   movea.l 12(sp),a1
    836e:	|   move.l 4(a1),d0
    8372:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    8374:	|   movea.l 12(sp),a0
    8378:	|   move.l (a0),8(sp)
    837c:	|   move.l 1cb26 <SysBase>,d0
    8382:	|   movea.l d0,a6
    8384:	|   movea.l 8(sp),a1
    8388:	|   jsr -690(a6)
		FreeVec(kill);
    838c:	|   move.l 12(sp),4(sp)
    8392:	|   move.l 1cb26 <SysBase>,d0
    8398:	|   movea.l d0,a6
    839a:	|   movea.l 4(sp),a1
    839e:	|   jsr -690(a6)
	}
}
    83a2:	'-> nop
    83a4:	    movea.l (sp)+,a6
    83a6:	    lea 12(sp),sp
    83aa:	    rts

000083ac <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    83ac:	movea.l 1c4a4 <nowStatus>,a0
    83b2:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    83b8:	movea.l 1c4a4 <nowStatus>,a0
    83be:	move.l 8(sp),14(a0)
}
    83c4:	nop
    83c6:	rts

000083c8 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    83c8:	       lea -100(sp),sp
    83cc:	       move.l a6,-(sp)
    83ce:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    83d0:	       movea.l 1c4a4 <nowStatus>,a0
    83d6:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    83da:	       movea.l 1c4a4 <nowStatus>,a0
    83e0:	       move.w 4(a0),d0
    83e4:	       move.w d0,d0
    83e6:	       andi.l #65535,d0
    83ec:	       move.l 112(sp),-(sp)
    83f0:	       move.l d0,-(sp)
    83f2:	       jsr 8d0 <put2bytes>
    83f8:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    83fa:	       movea.l 1c4a4 <nowStatus>,a0
    8400:	       move.l 6(a0),d0
    8404:	       move.l d0,d0
    8406:	       movea.w d0,a0
    8408:	       move.l 112(sp),-(sp)
    840c:	       move.l a0,-(sp)
    840e:	       jsr a9c <putSigned>
    8414:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    8416:	       movea.l 1c4a4 <nowStatus>,a0
    841c:	       move.l 10(a0),d0
    8420:	       move.l 112(sp),-(sp)
    8424:	       move.l d0,-(sp)
    8426:	       jsr 8d0 <put2bytes>
    842c:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    842e:	       movea.l 1c4a4 <nowStatus>,a0
    8434:	       move.l 14(a0),d0
    8438:	       move.l 112(sp),-(sp)
    843c:	       move.l d0,-(sp)
    843e:	       jsr 8d0 <put2bytes>
    8444:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    8446:	       move.l 112(sp),100(sp)
    844c:	       movea.l 1c4a4 <nowStatus>,a0
    8452:	       move.l 18(a0),96(sp)
    8458:	       move.l 1cb2e <DOSBase>,d0
    845e:	       movea.l d0,a6
    8460:	       move.l 100(sp),d1
    8464:	       move.l 96(sp),d2
    8468:	       jsr -312(a6)
    846c:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    8470:	       move.l 112(sp),88(sp)
    8476:	       movea.l 1c4a4 <nowStatus>,a0
    847c:	       move.l 22(a0),84(sp)
    8482:	       move.l 1cb2e <DOSBase>,d0
    8488:	       movea.l d0,a6
    848a:	       move.l 88(sp),d1
    848e:	       move.l 84(sp),d2
    8492:	       jsr -312(a6)
    8496:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    849a:	       move.l 112(sp),76(sp)
    84a0:	       movea.l 1c4a4 <nowStatus>,a0
    84a6:	       move.l 26(a0),72(sp)
    84ac:	       move.l 1cb2e <DOSBase>,d0
    84b2:	       movea.l d0,a6
    84b4:	       move.l 76(sp),d1
    84b8:	       move.l 72(sp),d2
    84bc:	       jsr -312(a6)
    84c0:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    84c4:	       move.l 112(sp),64(sp)
    84ca:	       movea.l 1c4a4 <nowStatus>,a0
    84d0:	       move.l 30(a0),60(sp)
    84d6:	       move.l 1cb2e <DOSBase>,d0
    84dc:	       movea.l d0,a6
    84de:	       move.l 64(sp),d1
    84e2:	       move.l 60(sp),d2
    84e6:	       jsr -312(a6)
    84ea:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    84ee:	       move.l 112(sp),52(sp)
    84f4:	       movea.l 1c4a4 <nowStatus>,a0
    84fa:	       move.l 34(a0),48(sp)
    8500:	       move.l 1cb2e <DOSBase>,d0
    8506:	       movea.l d0,a6
    8508:	       move.l 52(sp),d1
    850c:	       move.l 48(sp),d2
    8510:	       jsr -312(a6)
    8514:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    8518:	       move.l 112(sp),40(sp)
    851e:	       movea.l 1c4a4 <nowStatus>,a0
    8524:	       move.l 38(a0),36(sp)
    852a:	       move.l 1cb2e <DOSBase>,d0
    8530:	       movea.l d0,a6
    8532:	       move.l 40(sp),d1
    8536:	       move.l 36(sp),d2
    853a:	       jsr -312(a6)
    853e:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    8542:	   ,-- bra.s 8586 <saveStatusBars+0x1be>
		FPutC (fp,1);
    8544:	,--|-> move.l 112(sp),16(sp)
    854a:	|  |   moveq #1,d0
    854c:	|  |   move.l d0,12(sp)
    8550:	|  |   move.l 1cb2e <DOSBase>,d0
    8556:	|  |   movea.l d0,a6
    8558:	|  |   move.l 16(sp),d1
    855c:	|  |   move.l 12(sp),d2
    8560:	|  |   jsr -312(a6)
    8564:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    8568:	|  |   movea.l 104(sp),a0
    856c:	|  |   move.l (a0),d0
    856e:	|  |   move.l 112(sp),-(sp)
    8572:	|  |   move.l d0,-(sp)
    8574:	|  |   jsr bd8 <writeString>
    857a:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    857c:	|  |   movea.l 104(sp),a0
    8580:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    8586:	|  '-> tst.l 104(sp)
    858a:	'----- bne.s 8544 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    858c:	       move.l 112(sp),28(sp)
    8592:	       clr.l 24(sp)
    8596:	       move.l 1cb2e <DOSBase>,d0
    859c:	       movea.l d0,a6
    859e:	       move.l 28(sp),d1
    85a2:	       move.l 24(sp),d2
    85a6:	       jsr -312(a6)
    85aa:	       move.l d0,20(sp)
}
    85ae:	       nop
    85b0:	       move.l (sp)+,d2
    85b2:	       movea.l (sp)+,a6
    85b4:	       lea 100(sp),sp
    85b8:	       rts

000085ba <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    85ba:	movea.l 1c4a4 <nowStatus>,a0
    85c0:	move.l 4(sp),6(a0)
}
    85c6:	nop
    85c8:	rts

000085ca <setStatusBar>:

void setStatusBar (char * txt) {
    85ca:	    subq.l #4,sp
    85cc:	    move.l a6,-(sp)
    85ce:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    85d0:	    movea.l 1c4a4 <nowStatus>,a0
    85d6:	    move.l (a0),d0
    85d8:	,-- beq.s 860c <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    85da:	|   movea.l 1c4a4 <nowStatus>,a0
    85e0:	|   movea.l (a0),a0
    85e2:	|   move.l (a0),8(sp)
    85e6:	|   move.l 1cb26 <SysBase>,d0
    85ec:	|   movea.l d0,a6
    85ee:	|   movea.l 8(sp),a1
    85f2:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    85f6:	|   movea.l 1c4a4 <nowStatus>,a0
    85fc:	|   movea.l (a0),a2
    85fe:	|   move.l 16(sp),-(sp)
    8602:	|   jsr b8 <copyString>
    8608:	|   addq.l #4,sp
    860a:	|   move.l d0,(a2)
	}
}
    860c:	'-> nop
    860e:	    movea.l (sp)+,a2
    8610:	    movea.l (sp)+,a6
    8612:	    addq.l #4,sp
    8614:	    rts

00008616 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    8616:	       movea.l 1c4a4 <nowStatus>,a0
    861c:	       move.l (a0),d0
    861e:	,----- beq.s 862c <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    8620:	|      movea.l 1c4a4 <nowStatus>,a0
    8626:	|      movea.l (a0),a0
    8628:	|      move.l (a0),d0
    862a:	|  ,-- bra.s 8632 <statusBarText+0x1c>
	} else {
		return "";
    862c:	'--|-> move.l #101102,d0
	}
    8632:	   '-> rts

00008634 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    8634:	       lea -12(sp),sp
    8638:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    863a:	       move.l 1cb82 <zBuffer>,12(sp)

	while(zbuffercursor) {
    8642:	   ,-- bra.s 866a <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    8644:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    864a:	|  |   movea.l 12(sp),a0
    864e:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8654:	|  |   move.l 8(sp),4(sp)
    865a:	|  |   move.l 1cb26 <SysBase>,d0
    8660:	|  |   movea.l d0,a6
    8662:	|  |   movea.l 4(sp),a1
    8666:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    866a:	|  '-> tst.l 12(sp)
    866e:	'----- bne.s 8644 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8670:	       clr.l 1cb82 <zBuffer>
}
    8676:	       nop
    8678:	       movea.l (sp)+,a6
    867a:	       lea 12(sp),sp
    867e:	       rts

00008680 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8680:	                lea -304(sp),sp
    8684:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    8688:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    868c:	                jsr 8634 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8692:	                move.l 328(sp),d0
    8696:	                move.l d0,-(sp)
    8698:	                jsr 771e <openFileFromNum>
    869e:	                addq.l #4,sp
    86a0:	                tst.l d0
    86a2:	            ,-- bne.s 86aa <setZBuffer+0x2a>
    86a4:	            |   clr.w d0
    86a6:	,-----------|-- bra.w 8968 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    86aa:	|           '-> move.l 1cb0e <bigDataFile>,310(sp)
    86b2:	|               move.l 1cb2e <DOSBase>,d0
    86b8:	|               movea.l d0,a6
    86ba:	|               move.l 310(sp),d1
    86be:	|               jsr -306(a6)
    86c2:	|               move.l d0,306(sp)
    86c6:	|               move.l 306(sp),d0
    86ca:	|               moveq #97,d1
    86cc:	|               cmp.l d0,d1
    86ce:	|        ,----- bne.s 8742 <setZBuffer+0xc2>
    86d0:	|        |      move.l 1cb0e <bigDataFile>,302(sp)
    86d8:	|        |      move.l 1cb2e <DOSBase>,d0
    86de:	|        |      movea.l d0,a6
    86e0:	|        |      move.l 302(sp),d1
    86e4:	|        |      jsr -306(a6)
    86e8:	|        |      move.l d0,298(sp)
    86ec:	|        |      move.l 298(sp),d0
    86f0:	|        |      moveq #115,d1
    86f2:	|        |      cmp.l d0,d1
    86f4:	|        +----- bne.s 8742 <setZBuffer+0xc2>
    86f6:	|        |      move.l 1cb0e <bigDataFile>,294(sp)
    86fe:	|        |      move.l 1cb2e <DOSBase>,d0
    8704:	|        |      movea.l d0,a6
    8706:	|        |      move.l 294(sp),d1
    870a:	|        |      jsr -306(a6)
    870e:	|        |      move.l d0,290(sp)
    8712:	|        |      move.l 290(sp),d0
    8716:	|        |      moveq #122,d1
    8718:	|        |      cmp.l d0,d1
    871a:	|        +----- bne.s 8742 <setZBuffer+0xc2>
    871c:	|        |      move.l 1cb0e <bigDataFile>,286(sp)
    8724:	|        |      move.l 1cb2e <DOSBase>,d0
    872a:	|        |      movea.l d0,a6
    872c:	|        |      move.l 286(sp),d1
    8730:	|        |      jsr -306(a6)
    8734:	|        |      move.l d0,282(sp)
    8738:	|        |      move.l 282(sp),d0
    873c:	|        |      moveq #98,d1
    873e:	|        |      cmp.l d0,d1
    8740:	|        |  ,-- beq.s 8756 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    8742:	|        '--|-> pea 19119 <PutChar+0x139f>
    8748:	|           |   jsr 172d8 <KPrintF>
    874e:	|           |   addq.l #4,sp
		 return FALSE;
    8750:	|           |   clr.w d0
    8752:	+-----------|-- bra.w 8968 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8756:	|           '-> move.l 1cb0e <bigDataFile>,278(sp)
    875e:	|               move.l 1cb2e <DOSBase>,d0
    8764:	|               movea.l d0,a6
    8766:	|               move.l 278(sp),d1
    876a:	|               jsr -306(a6)
    876e:	|               move.l d0,274(sp)
    8772:	|               move.l 274(sp),d0
    8776:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    877a:	|               moveq #28,d0
    877c:	|               move.l d0,270(sp)
    8780:	|               clr.l 266(sp)
    8784:	|               move.l 1cb26 <SysBase>,d0
    878a:	|               movea.l d0,a6
    878c:	|               move.l 270(sp),d0
    8790:	|               move.l 266(sp),d1
    8794:	|               jsr -684(a6)
    8798:	|               move.l d0,262(sp)
    879c:	|               move.l 262(sp),d0
    87a0:	|               move.l d0,1cb82 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    87a6:	|               move.l 1cb82 <zBuffer>,318(sp)

	while(numelements--)
    87ae:	|     ,-------- bra.w 894e <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    87b2:	|  ,--|-------> move.l 1cb0e <bigDataFile>,d0
    87b8:	|  |  |         move.l d0,-(sp)
    87ba:	|  |  |         jsr 6bc <get2bytes>
    87c0:	|  |  |         addq.l #4,sp
    87c2:	|  |  |         movea.l 318(sp),a0
    87c6:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    87c8:	|  |  |         move.l 1cb0e <bigDataFile>,d0
    87ce:	|  |  |         move.l d0,-(sp)
    87d0:	|  |  |         jsr 6bc <get2bytes>
    87d6:	|  |  |         addq.l #4,sp
    87d8:	|  |  |         movea.l 318(sp),a0
    87dc:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    87e0:	|  |  |         move.l 1cb0e <bigDataFile>,d0
    87e6:	|  |  |         move.l d0,-(sp)
    87e8:	|  |  |         jsr 6bc <get2bytes>
    87ee:	|  |  |         addq.l #4,sp
    87f0:	|  |  |         movea.l 318(sp),a0
    87f4:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    87f8:	|  |  |         move.l 1cb0e <bigDataFile>,d0
    87fe:	|  |  |         move.l d0,-(sp)
    8800:	|  |  |         jsr 6bc <get2bytes>
    8806:	|  |  |         addq.l #4,sp
    8808:	|  |  |         movea.l 318(sp),a0
    880c:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    8810:	|  |  |         move.l 1cb0e <bigDataFile>,d0
    8816:	|  |  |         move.l d0,-(sp)
    8818:	|  |  |         jsr 6bc <get2bytes>
    881e:	|  |  |         addq.l #4,sp
    8820:	|  |  |         movea.l 318(sp),a0
    8824:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8828:	|  |  |         movea.l 318(sp),a0
    882c:	|  |  |         move.l (a0),d0
    882e:	|  |  |         movea.l 318(sp),a0
    8832:	|  |  |         move.l 4(a0),d1
    8836:	|  |  |         move.l d1,-(sp)
    8838:	|  |  |         move.l d0,-(sp)
    883a:	|  |  |         jsr 17c64 <__mulsi3>
    8840:	|  |  |         addq.l #8,sp
    8842:	|  |  |         tst.l d0
    8844:	|  |  |     ,-- bge.s 8848 <setZBuffer+0x1c8>
    8846:	|  |  |     |   addq.l #7,d0
    8848:	|  |  |     '-> asr.l #3,d0
    884a:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    884e:	|  |  |         moveq #0,d0
    8850:	|  |  |         move.w 260(sp),d0
    8854:	|  |  |         move.l d0,256(sp)
    8858:	|  |  |         moveq #2,d1
    885a:	|  |  |         move.l d1,252(sp)
    885e:	|  |  |         move.l 1cb26 <SysBase>,d0
    8864:	|  |  |         movea.l d0,a6
    8866:	|  |  |         move.l 256(sp),d0
    886a:	|  |  |         move.l 252(sp),d1
    886e:	|  |  |         jsr -684(a6)
    8872:	|  |  |         move.l d0,248(sp)
    8876:	|  |  |         move.l 248(sp),d0
    887a:	|  |  |         movea.l 318(sp),a0
    887e:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8882:	|  |  |         move.l 1cb0e <bigDataFile>,244(sp)
    888a:	|  |  |         movea.l 318(sp),a0
    888e:	|  |  |         move.l 20(a0),240(sp)
    8894:	|  |  |         moveq #1,d0
    8896:	|  |  |         move.l d0,236(sp)
    889a:	|  |  |         moveq #0,d0
    889c:	|  |  |         move.w 260(sp),d0
    88a0:	|  |  |         move.l d0,232(sp)
    88a4:	|  |  |         move.l 1cb2e <DOSBase>,d0
    88aa:	|  |  |         movea.l d0,a6
    88ac:	|  |  |         move.l 244(sp),d1
    88b0:	|  |  |         move.l 240(sp),d2
    88b4:	|  |  |         move.l 236(sp),d3
    88b8:	|  |  |         move.l 232(sp),d4
    88bc:	|  |  |         jsr -324(a6)
    88c0:	|  |  |         move.l d0,228(sp)
    88c4:	|  |  |         move.l 228(sp),d0
    88c8:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    88cc:	|  |  |         tst.w 322(sp)
    88d0:	|  |  |  ,----- beq.s 890c <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    88d2:	|  |  |  |      moveq #28,d1
    88d4:	|  |  |  |      move.l d1,222(sp)
    88d8:	|  |  |  |      clr.l 218(sp)
    88dc:	|  |  |  |      move.l 1cb26 <SysBase>,d0
    88e2:	|  |  |  |      movea.l d0,a6
    88e4:	|  |  |  |      move.l 222(sp),d0
    88e8:	|  |  |  |      move.l 218(sp),d1
    88ec:	|  |  |  |      jsr -684(a6)
    88f0:	|  |  |  |      move.l d0,214(sp)
    88f4:	|  |  |  |      move.l 214(sp),d0
    88f8:	|  |  |  |      movea.l 318(sp),a0
    88fc:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8900:	|  |  |  |      movea.l 318(sp),a0
    8904:	|  |  |  |      move.l 24(a0),318(sp)
    890a:	|  |  |  |  ,-- bra.s 8914 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    890c:	|  |  |  '--|-> movea.l 318(sp),a0
    8910:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    8914:	|  |  |     '-> movea.l 318(sp),a0
    8918:	|  |  |         move.l 4(a0),d0
    891c:	|  |  |         move.l d0,d0
    891e:	|  |  |         movea.w d0,a1
    8920:	|  |  |         movea.l 318(sp),a0
    8924:	|  |  |         move.l (a0),d0
    8926:	|  |  |         move.l d0,d0
    8928:	|  |  |         movea.w d0,a0
    892a:	|  |  |         movea.l 318(sp),a2
    892e:	|  |  |         move.l 20(a2),d0
    8932:	|  |  |         clr.l -(sp)
    8934:	|  |  |         pea 1 <_start+0x1>
    8938:	|  |  |         move.l a1,-(sp)
    893a:	|  |  |         move.l a0,-(sp)
    893c:	|  |  |         pea 1912d <PutChar+0x13b3>
    8942:	|  |  |         move.l d0,-(sp)
    8944:	|  |  |         jsr 173c0 <debug_register_bitmap>
    894a:	|  |  |         lea 24(sp),sp
	while(numelements--)
    894e:	|  |  '-------> move.w 322(sp),d0
    8952:	|  |            move.w d0,d1
    8954:	|  |            subq.w #1,d1
    8956:	|  |            move.w d1,322(sp)
    895a:	|  |            tst.w d0
    895c:	|  '----------- bne.w 87b2 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8960:	|               jsr 7616 <finishAccess>
	
	return TRUE;
    8966:	|               moveq #1,d0
}
    8968:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    896c:	                lea 304(sp),sp
    8970:	                rts

00008972 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8972:	          lea -32(sp),sp
    8976:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8978:	          move.l 40(sp),d0
    897c:	          addq.l #8,d0
    897e:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8982:	          clr.l 32(sp)
    8986:	   ,----- bra.s 89cc <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8988:	,--|----> movea.l 24(sp),a0
    898c:	|  |      movea.l 8(a0),a0
    8990:	|  |      move.l 32(sp),d1
    8994:	|  |      move.l d1,d0
    8996:	|  |      lsl.l #3,d0
    8998:	|  |      sub.l d1,d0
    899a:	|  |      add.l d0,d0
    899c:	|  |      add.l d0,d0
    899e:	|  |      adda.l d0,a0
    89a0:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    89a4:	|  |      movea.l 8(sp),a0
    89a8:	|  |      move.l 24(a0),d0
    89ac:	|  |  ,-- beq.s 89c8 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    89ae:	|  |  |   movea.l 8(sp),a0
    89b2:	|  |  |   move.l 24(a0),4(sp)
    89b8:	|  |  |   move.l 1cb26 <SysBase>,d0
    89be:	|  |  |   movea.l d0,a6
    89c0:	|  |  |   movea.l 4(sp),a1
    89c4:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    89c8:	|  |  '-> addq.l #1,32(sp)
    89cc:	|  '----> movea.l 24(sp),a0
    89d0:	|         move.l (a0),d0
    89d2:	|         cmp.l 32(sp),d0
    89d6:	'-------- bgt.s 8988 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    89d8:	          movea.l 24(sp),a0
    89dc:	          move.l 8(a0),20(sp)
    89e2:	          move.l 1cb26 <SysBase>,d0
    89e8:	          movea.l d0,a6
    89ea:	          movea.l 20(sp),a1
    89ee:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    89f2:	          move.l 1cc3a <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    89fa:	      ,-- bra.s 8a06 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    89fc:	   ,--|-> movea.l 28(sp),a0
    8a00:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8a06:	   |  '-> movea.l 28(sp),a0
    8a0a:	   |      movea.l 22(a0),a0
    8a0e:	   |      move.l (a0),d1
    8a10:	   |      movea.l 40(sp),a0
    8a14:	   |      move.l (a0),d0
    8a16:	   |      cmp.l d1,d0
    8a18:	   |  ,-- beq.s 8a20 <forgetSpriteBank+0xae>
    8a1a:	   |  |   tst.l 28(sp)
    8a1e:	   '--|-- bne.s 89fc <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8a20:	      '-> tst.l 28(sp)
    8a24:	   ,----- beq.s 8a4e <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8a26:	   |      movea.l 40(sp),a0
    8a2a:	   |      move.l 22(a0),d0
    8a2e:	   |      movea.l 28(sp),a0
    8a32:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8a36:	   |      move.l 40(sp),12(sp)
    8a3c:	   |      move.l 1cb26 <SysBase>,d0
    8a42:	   |      movea.l d0,a6
    8a44:	   |      movea.l 12(sp),a1
    8a48:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8a4c:	   |  ,-- bra.s 8a74 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8a4e:	   '--|-> movea.l 1cc3a <allLoadedBanks>,a0
    8a54:	      |   move.l 22(a0),d0
    8a58:	      |   move.l d0,1cc3a <allLoadedBanks>
		FreeVec( forgetme);
    8a5e:	      |   move.l 40(sp),16(sp)
    8a64:	      |   move.l 1cb26 <SysBase>,d0
    8a6a:	      |   movea.l d0,a6
    8a6c:	      |   movea.l 16(sp),a1
    8a70:	      |   jsr -690(a6)
}
    8a74:	      '-> nop
    8a76:	          movea.l (sp)+,a6
    8a78:	          lea 32(sp),sp
    8a7c:	          rts

00008a7e <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8a7e:	                      lea -84(sp),sp
    8a82:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8a86:	                      pea 19139 <PutChar+0x13bf>
    8a8c:	                      jsr 172d8 <KPrintF>
    8a92:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8a94:	                      clr.l 94(sp)
    8a98:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8a9c:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8aa0:	                      move.l 108(sp),-(sp)
    8aa4:	                      jsr 771e <openFileFromNum>
    8aaa:	                      addq.l #4,sp
    8aac:	                      tst.l d0
    8aae:	                  ,-- bne.s 8ac4 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8ab0:	                  |   pea 19153 <PutChar+0x13d9>
    8ab6:	                  |   jsr 172d8 <KPrintF>
    8abc:	                  |   addq.l #4,sp
		return FALSE;
    8abe:	                  |   clr.w d0
    8ac0:	,-----------------|-- bra.w 8eb8 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8ac4:	|                 '-> move.l 1cb0e <bigDataFile>,d0
    8aca:	|                     move.l d0,-(sp)
    8acc:	|                     jsr 6bc <get2bytes>
    8ad2:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8ad4:	|                     move.l 1cb0e <bigDataFile>,82(sp)
    8adc:	|                     move.l 1cb2e <DOSBase>,d0
    8ae2:	|                     movea.l d0,a6
    8ae4:	|                     move.l 82(sp),d1
    8ae8:	|                     jsr -306(a6)
    8aec:	|                     move.l d0,78(sp)
    8af0:	|                     move.l 78(sp),d0
    8af4:	|                     movea.l 112(sp),a0
    8af8:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8afc:	|                     move.l 1cb0e <bigDataFile>,d0
    8b02:	|                     move.l d0,-(sp)
    8b04:	|                     jsr 6bc <get2bytes>
    8b0a:	|                     addq.l #4,sp
    8b0c:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8b10:	|                 ,-- bgt.s 8b26 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8b12:	|                 |   pea 19181 <PutChar+0x1407>
    8b18:	|                 |   jsr 172d8 <KPrintF>
    8b1e:	|                 |   addq.l #4,sp
		return FALSE;
    8b20:	|                 |   clr.w d0
    8b22:	+-----------------|-- bra.w 8eb8 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8b26:	|                 '-> movea.l 112(sp),a0
    8b2a:	|                     move.l 4(a0),d0
    8b2e:	|                     moveq #3,d1
    8b30:	|                     cmp.l d0,d1
    8b32:	|                 ,-- bne.s 8b40 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8b34:	|                 |   movea.l 112(sp),a0
    8b38:	|                 |   move.w #1,12(a0)
    8b3e:	|              ,--|-- bra.s 8b62 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8b40:	|              |  '-> movea.l 112(sp),a0
    8b44:	|              |      move.l 4(a0),d0
    8b48:	|              |      moveq #3,d1
    8b4a:	|              |      cmp.l d0,d1
    8b4c:	|              +----- bge.s 8b62 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8b4e:	|              |      pea 191c1 <PutChar+0x1447>
    8b54:	|              |      jsr 172d8 <KPrintF>
    8b5a:	|              |      addq.l #4,sp
		return FALSE;
    8b5c:	|              |      clr.w d0
    8b5e:	+--------------|----- bra.w 8eb8 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8b62:	|              '----> movea.l 112(sp),a0
    8b66:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8b6a:	|                     move.l 74(sp),d1
    8b6e:	|                     move.l d1,d0
    8b70:	|                     lsl.l #3,d0
    8b72:	|                     sub.l d1,d0
    8b74:	|                     add.l d0,d0
    8b76:	|                     add.l d0,d0
    8b78:	|                     move.l d0,70(sp)
    8b7c:	|                     clr.l 66(sp)
    8b80:	|                     move.l 1cb26 <SysBase>,d0
    8b86:	|                     movea.l d0,a6
    8b88:	|                     move.l 70(sp),d0
    8b8c:	|                     move.l 66(sp),d1
    8b90:	|                     jsr -684(a6)
    8b94:	|                     move.l d0,62(sp)
    8b98:	|                     move.l 62(sp),d0
    8b9c:	|                     movea.l 112(sp),a0
    8ba0:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8ba4:	|                     movea.l 112(sp),a0
    8ba8:	|                     move.l 8(a0),d0
    8bac:	|                 ,-- bne.s 8bb4 <loadSpriteBank+0x136>
    8bae:	|                 |   clr.w d0
    8bb0:	+-----------------|-- bra.w 8eb8 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8bb4:	|                 '-> moveq #1,d0
    8bb6:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8bba:	|                     clr.l 100(sp)
    8bbe:	|     ,-------------- bra.w 8e96 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8bc2:	|  ,--|-------------> move.l 1cb0e <bigDataFile>,d0
    8bc8:	|  |  |               move.l d0,-(sp)
    8bca:	|  |  |               jsr 6bc <get2bytes>
    8bd0:	|  |  |               addq.l #4,sp
    8bd2:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8bd6:	|  |  |               movea.l 112(sp),a0
    8bda:	|  |  |               movea.l 8(a0),a0
    8bde:	|  |  |               move.l 100(sp),d1
    8be2:	|  |  |               move.l d1,d0
    8be4:	|  |  |               lsl.l #3,d0
    8be6:	|  |  |               sub.l d1,d0
    8be8:	|  |  |               add.l d0,d0
    8bea:	|  |  |               add.l d0,d0
    8bec:	|  |  |               adda.l d0,a0
    8bee:	|  |  |               moveq #0,d0
    8bf0:	|  |  |               move.w 60(sp),d0
    8bf4:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8bf6:	|  |  |               movea.l 1cb0e <bigDataFile>,a1
    8bfc:	|  |  |               movea.l 112(sp),a0
    8c00:	|  |  |               movea.l 8(a0),a0
    8c04:	|  |  |               move.l 100(sp),d1
    8c08:	|  |  |               move.l d1,d0
    8c0a:	|  |  |               lsl.l #3,d0
    8c0c:	|  |  |               sub.l d1,d0
    8c0e:	|  |  |               add.l d0,d0
    8c10:	|  |  |               add.l d0,d0
    8c12:	|  |  |               lea (0,a0,d0.l),a2
    8c16:	|  |  |               move.l a1,-(sp)
    8c18:	|  |  |               jsr 6bc <get2bytes>
    8c1e:	|  |  |               addq.l #4,sp
    8c20:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8c24:	|  |  |               movea.l 1cb0e <bigDataFile>,a1
    8c2a:	|  |  |               movea.l 112(sp),a0
    8c2e:	|  |  |               movea.l 8(a0),a0
    8c32:	|  |  |               move.l 100(sp),d1
    8c36:	|  |  |               move.l d1,d0
    8c38:	|  |  |               lsl.l #3,d0
    8c3a:	|  |  |               sub.l d1,d0
    8c3c:	|  |  |               add.l d0,d0
    8c3e:	|  |  |               add.l d0,d0
    8c40:	|  |  |               lea (0,a0,d0.l),a2
    8c44:	|  |  |               move.l a1,-(sp)
    8c46:	|  |  |               jsr 6bc <get2bytes>
    8c4c:	|  |  |               addq.l #4,sp
    8c4e:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8c52:	|  |  |               movea.l 1cb0e <bigDataFile>,a1
    8c58:	|  |  |               movea.l 112(sp),a0
    8c5c:	|  |  |               movea.l 8(a0),a0
    8c60:	|  |  |               move.l 100(sp),d1
    8c64:	|  |  |               move.l d1,d0
    8c66:	|  |  |               lsl.l #3,d0
    8c68:	|  |  |               sub.l d1,d0
    8c6a:	|  |  |               add.l d0,d0
    8c6c:	|  |  |               add.l d0,d0
    8c6e:	|  |  |               lea (0,a0,d0.l),a2
    8c72:	|  |  |               move.l a1,-(sp)
    8c74:	|  |  |               jsr 6bc <get2bytes>
    8c7a:	|  |  |               addq.l #4,sp
    8c7c:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8c80:	|  |  |               movea.l 112(sp),a0
    8c84:	|  |  |               move.l 4(a0),d0
    8c88:	|  |  |               moveq #3,d1
    8c8a:	|  |  |               cmp.l d0,d1
    8c8c:	|  |  |     ,-------- beq.w 8d28 <loadSpriteBank+0x2aa>
    8c90:	|  |  |     |         moveq #3,d1
    8c92:	|  |  |     |         cmp.l d0,d1
    8c94:	|  |  |  ,--|-------- blt.w 8dce <loadSpriteBank+0x350>
    8c98:	|  |  |  |  |         moveq #1,d1
    8c9a:	|  |  |  |  |         cmp.l d0,d1
    8c9c:	|  |  |  |  |     ,-- beq.s 8ca8 <loadSpriteBank+0x22a>
    8c9e:	|  |  |  |  |     |   moveq #2,d1
    8ca0:	|  |  |  |  |     |   cmp.l d0,d1
    8ca2:	|  |  |  |  |  ,--|-- beq.s 8cd4 <loadSpriteBank+0x256>
    8ca4:	|  |  |  +--|--|--|-- bra.w 8dce <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8ca8:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    8cac:	|  |  |  |  |  |      movea.l 8(a0),a0
    8cb0:	|  |  |  |  |  |      move.l 100(sp),d1
    8cb4:	|  |  |  |  |  |      move.l d1,d0
    8cb6:	|  |  |  |  |  |      lsl.l #3,d0
    8cb8:	|  |  |  |  |  |      sub.l d1,d0
    8cba:	|  |  |  |  |  |      add.l d0,d0
    8cbc:	|  |  |  |  |  |      add.l d0,d0
    8cbe:	|  |  |  |  |  |      adda.l d0,a0
    8cc0:	|  |  |  |  |  |      move.l 4(a0),d0
    8cc4:	|  |  |  |  |  |      addq.l #2,d0
    8cc6:	|  |  |  |  |  |      move.l d0,d0
    8cc8:	|  |  |  |  |  |      add.w d0,d0
    8cca:	|  |  |  |  |  |      add.w d0,d0
    8ccc:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8cd0:	|  |  |  +--|--|----- bra.w 8dce <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8cd4:	|  |  |  |  |  '----> movea.l 112(sp),a0
    8cd8:	|  |  |  |  |         movea.l 8(a0),a0
    8cdc:	|  |  |  |  |         move.l 100(sp),d1
    8ce0:	|  |  |  |  |         move.l d1,d0
    8ce2:	|  |  |  |  |         lsl.l #3,d0
    8ce4:	|  |  |  |  |         sub.l d1,d0
    8ce6:	|  |  |  |  |         add.l d0,d0
    8ce8:	|  |  |  |  |         add.l d0,d0
    8cea:	|  |  |  |  |         adda.l d0,a0
    8cec:	|  |  |  |  |         move.l (a0),d0
    8cee:	|  |  |  |  |     ,-- bpl.s 8cf2 <loadSpriteBank+0x274>
    8cf0:	|  |  |  |  |     |   addq.l #7,d0
    8cf2:	|  |  |  |  |     '-> asr.l #3,d0
    8cf4:	|  |  |  |  |         move.l d0,d2
    8cf6:	|  |  |  |  |         movea.l 112(sp),a0
    8cfa:	|  |  |  |  |         movea.l 8(a0),a0
    8cfe:	|  |  |  |  |         move.l 100(sp),d1
    8d02:	|  |  |  |  |         move.l d1,d0
    8d04:	|  |  |  |  |         lsl.l #3,d0
    8d06:	|  |  |  |  |         sub.l d1,d0
    8d08:	|  |  |  |  |         add.l d0,d0
    8d0a:	|  |  |  |  |         add.l d0,d0
    8d0c:	|  |  |  |  |         adda.l d0,a0
    8d0e:	|  |  |  |  |         move.l 4(a0),d0
    8d12:	|  |  |  |  |         move.l d0,d0
    8d14:	|  |  |  |  |         move.w d2,d1
    8d16:	|  |  |  |  |         muls.w d0,d1
    8d18:	|  |  |  |  |         move.w d1,d0
    8d1a:	|  |  |  |  |         add.w d0,d0
    8d1c:	|  |  |  |  |         add.w d1,d0
    8d1e:	|  |  |  |  |         add.w d0,d0
    8d20:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8d24:	|  |  |  +--|-------- bra.w 8dce <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8d28:	|  |  |  |  '-------> movea.l 112(sp),a0
    8d2c:	|  |  |  |            movea.l 8(a0),a0
    8d30:	|  |  |  |            move.l 100(sp),d1
    8d34:	|  |  |  |            move.l d1,d0
    8d36:	|  |  |  |            lsl.l #3,d0
    8d38:	|  |  |  |            sub.l d1,d0
    8d3a:	|  |  |  |            add.l d0,d0
    8d3c:	|  |  |  |            add.l d0,d0
    8d3e:	|  |  |  |            adda.l d0,a0
    8d40:	|  |  |  |            move.l (a0),d0
    8d42:	|  |  |  |            andi.l #-2147483633,d0
    8d48:	|  |  |  |        ,-- bpl.s 8d52 <loadSpriteBank+0x2d4>
    8d4a:	|  |  |  |        |   subq.l #1,d0
    8d4c:	|  |  |  |        |   moveq #-16,d1
    8d4e:	|  |  |  |        |   or.l d1,d0
    8d50:	|  |  |  |        |   addq.l #1,d0
    8d52:	|  |  |  |        '-> tst.l d0
    8d54:	|  |  |  |     ,----- ble.s 8d5a <loadSpriteBank+0x2dc>
    8d56:	|  |  |  |     |      moveq #2,d0
    8d58:	|  |  |  |     |  ,-- bra.s 8d5c <loadSpriteBank+0x2de>
    8d5a:	|  |  |  |     '--|-> clr.w d0
    8d5c:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8d60:	|  |  |  |            movea.l 112(sp),a0
    8d64:	|  |  |  |            movea.l 8(a0),a0
    8d68:	|  |  |  |            move.l 100(sp),d1
    8d6c:	|  |  |  |            move.l d1,d0
    8d6e:	|  |  |  |            lsl.l #3,d0
    8d70:	|  |  |  |            sub.l d1,d0
    8d72:	|  |  |  |            add.l d0,d0
    8d74:	|  |  |  |            add.l d0,d0
    8d76:	|  |  |  |            adda.l d0,a0
    8d78:	|  |  |  |            move.l (a0),d0
    8d7a:	|  |  |  |            movea.l d0,a0
    8d7c:	|  |  |  |            cmpa.w #0,a0
    8d80:	|  |  |  |        ,-- bge.s 8d86 <loadSpriteBank+0x308>
    8d82:	|  |  |  |        |   lea 15(a0),a0
    8d86:	|  |  |  |        '-> move.l a0,d0
    8d88:	|  |  |  |            asr.l #4,d0
    8d8a:	|  |  |  |            add.l d0,d0
    8d8c:	|  |  |  |            move.l d0,d1
    8d8e:	|  |  |  |            moveq #0,d0
    8d90:	|  |  |  |            move.w 58(sp),d0
    8d94:	|  |  |  |            add.l d1,d0
    8d96:	|  |  |  |            move.l d0,d2
    8d98:	|  |  |  |            movea.l 112(sp),a0
    8d9c:	|  |  |  |            movea.l 8(a0),a0
    8da0:	|  |  |  |            move.l 100(sp),d1
    8da4:	|  |  |  |            move.l d1,d0
    8da6:	|  |  |  |            lsl.l #3,d0
    8da8:	|  |  |  |            sub.l d1,d0
    8daa:	|  |  |  |            add.l d0,d0
    8dac:	|  |  |  |            add.l d0,d0
    8dae:	|  |  |  |            adda.l d0,a0
    8db0:	|  |  |  |            move.l 4(a0),d0
    8db4:	|  |  |  |            move.l d0,d0
    8db6:	|  |  |  |            move.w d2,d1
    8db8:	|  |  |  |            muls.w d0,d1
    8dba:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8dbe:	|  |  |  |            cmpi.w #100,98(sp)
    8dc4:	|  |  |  |        ,-- bls.s 8dcc <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8dc6:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8dcc:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8dce:	|  |  |  '----------> moveq #0,d0
    8dd0:	|  |  |               move.w 98(sp),d0
    8dd4:	|  |  |               add.l d0,d0
    8dd6:	|  |  |               move.l d0,52(sp)
    8dda:	|  |  |               moveq #2,d0
    8ddc:	|  |  |               move.l d0,48(sp)
    8de0:	|  |  |               move.l 1cb26 <SysBase>,d0
    8de6:	|  |  |               movea.l d0,a6
    8de8:	|  |  |               move.l 52(sp),d0
    8dec:	|  |  |               move.l 48(sp),d1
    8df0:	|  |  |               jsr -684(a6)
    8df4:	|  |  |               move.l d0,44(sp)
    8df8:	|  |  |               movea.l 44(sp),a1
    8dfc:	|  |  |               movea.l 112(sp),a0
    8e00:	|  |  |               movea.l 8(a0),a0
    8e04:	|  |  |               move.l 100(sp),d1
    8e08:	|  |  |               move.l d1,d0
    8e0a:	|  |  |               lsl.l #3,d0
    8e0c:	|  |  |               sub.l d1,d0
    8e0e:	|  |  |               add.l d0,d0
    8e10:	|  |  |               add.l d0,d0
    8e12:	|  |  |               adda.l d0,a0
    8e14:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8e18:	|  |  |               move.l 1cb0e <bigDataFile>,40(sp)
    8e20:	|  |  |               movea.l 112(sp),a0
    8e24:	|  |  |               movea.l 8(a0),a0
    8e28:	|  |  |               move.l 100(sp),d1
    8e2c:	|  |  |               move.l d1,d0
    8e2e:	|  |  |               lsl.l #3,d0
    8e30:	|  |  |               sub.l d1,d0
    8e32:	|  |  |               add.l d0,d0
    8e34:	|  |  |               add.l d0,d0
    8e36:	|  |  |               adda.l d0,a0
    8e38:	|  |  |               move.l 24(a0),36(sp)
    8e3e:	|  |  |               moveq #2,d1
    8e40:	|  |  |               move.l d1,32(sp)
    8e44:	|  |  |               move.w 98(sp),d0
    8e48:	|  |  |               lsr.w #1,d0
    8e4a:	|  |  |               move.w d0,d0
    8e4c:	|  |  |               andi.l #65535,d0
    8e52:	|  |  |               move.l d0,28(sp)
    8e56:	|  |  |               move.l 1cb2e <DOSBase>,d0
    8e5c:	|  |  |               movea.l d0,a6
    8e5e:	|  |  |               move.l 40(sp),d1
    8e62:	|  |  |               move.l 36(sp),d2
    8e66:	|  |  |               move.l 32(sp),d3
    8e6a:	|  |  |               move.l 28(sp),d4
    8e6e:	|  |  |               jsr -324(a6)
    8e72:	|  |  |               move.l d0,24(sp)
    8e76:	|  |  |               move.l 24(sp),d0
    8e7a:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8e7e:	|  |  |           ,-- bne.s 8e92 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8e80:	|  |  |           |   pea 191f6 <PutChar+0x147c>
    8e86:	|  |  |           |   jsr 172d8 <KPrintF>
    8e8c:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8e8e:	|  |  |           |   clr.w d0
    8e90:	+--|--|-----------|-- bra.s 8eb8 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    8e92:	|  |  |           '-> addq.l #1,100(sp)
    8e96:	|  |  '-------------> move.l 100(sp),d0
    8e9a:	|  |                  cmp.l 74(sp),d0
    8e9e:	|  '----------------- blt.w 8bc2 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    8ea2:	|                     jsr 7616 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    8ea8:	|                     pea 19229 <PutChar+0x14af>
    8eae:	|                     jsr 172d8 <KPrintF>
    8eb4:	|                     addq.l #4,sp
	return TRUE;
    8eb6:	|                     moveq #1,d0
}
    8eb8:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    8ebc:	                      lea 84(sp),sp
    8ec0:	                      rts

00008ec2 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8ec2:	                   lea -16(sp),sp
    8ec6:	                   move.l d2,-(sp)
    8ec8:	                   move.l 32(sp),d0
    8ecc:	                   move.w d0,d0
    8ece:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    8ed2:	                   movea.l 28(sp),a0
    8ed6:	                   move.l (a0),d2
    8ed8:	                   movea.l 24(sp),a0
    8edc:	                   move.l 8(a0),d0
    8ee0:	                   move.l d0,-(sp)
    8ee2:	                   jsr 1770a <__floatsisf>
    8ee8:	                   addq.l #4,sp
    8eea:	                   move.l d0,-(sp)
    8eec:	                   move.l d2,-(sp)
    8eee:	                   jsr 179fe <__subsf3>
    8ef4:	                   addq.l #8,sp
    8ef6:	                   move.l d0,-(sp)
    8ef8:	                   jsr 176a2 <__fixsfsi>
    8efe:	                   addq.l #4,sp
    8f00:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    8f04:	                   movea.l 28(sp),a0
    8f08:	                   move.l 4(a0),d2
    8f0c:	                   movea.l 24(sp),a0
    8f10:	                   move.l 12(a0),d0
    8f14:	                   move.l d0,-(sp)
    8f16:	                   jsr 1770a <__floatsisf>
    8f1c:	                   addq.l #4,sp
    8f1e:	                   move.l d0,-(sp)
    8f20:	                   move.l d2,-(sp)
    8f22:	                   jsr 179fe <__subsf3>
    8f28:	                   addq.l #8,sp
    8f2a:	                   move.l d0,-(sp)
    8f2c:	                   jsr 176a2 <__fixsfsi>
    8f32:	                   addq.l #4,sp
    8f34:	                   move.w d0,8(sp)

	if( x < 0)
    8f38:	                   tst.w 18(sp)
    8f3c:	               ,-- bge.s 8f70 <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    8f3e:	               |   movea.l 28(sp),a0
    8f42:	               |   move.l (a0),d2
    8f44:	               |   movea.l 24(sp),a0
    8f48:	               |   move.l 8(a0),d0
    8f4c:	               |   move.l d0,-(sp)
    8f4e:	               |   jsr 1770a <__floatsisf>
    8f54:	               |   addq.l #4,sp
    8f56:	               |   move.l d0,-(sp)
    8f58:	               |   move.l d2,-(sp)
    8f5a:	               |   jsr 179fe <__subsf3>
    8f60:	               |   addq.l #8,sp
    8f62:	               |   move.l d0,-(sp)
    8f64:	               |   jsr 176a2 <__fixsfsi>
    8f6a:	               |   addq.l #4,sp
    8f6c:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    8f70:	               '-> movea.w 8(sp),a1
    8f74:	                   movea.w 18(sp),a0
    8f78:	                   pea 1 <_start+0x1>
    8f7c:	                   move.l a1,-(sp)
    8f7e:	                   move.l a0,-(sp)
    8f80:	                   move.l 40(sp),-(sp)
    8f84:	                   move.l 40(sp),-(sp)
    8f88:	                   jsr 2c10 <CstScaleSprite>
    8f8e:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8f92:	                   movea.l 28(sp),a0
    8f96:	                   move.l 118(a0),d0
    8f9a:	                   moveq #8,d1
    8f9c:	                   and.l d1,d0
    8f9e:	   ,-------------- beq.w 906a <scaleSprite+0x1a8>
		if (single->xhot < 0)
    8fa2:	   |               movea.l 24(sp),a0
    8fa6:	   |               move.l 8(a0),d0
    8faa:	   |  ,----------- bpl.s 8fe6 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8fac:	   |  |            move.w 18(sp),d0
    8fb0:	   |  |            tst.w 6(sp)
    8fb4:	   |  |     ,----- beq.s 8fce <scaleSprite+0x10c>
    8fb6:	   |  |     |      movea.l 24(sp),a0
    8fba:	   |  |     |      move.l (a0),d1
    8fbc:	   |  |     |      move.l d1,d2
    8fbe:	   |  |     |      movea.l 24(sp),a0
    8fc2:	   |  |     |      move.l 8(a0),d1
    8fc6:	   |  |     |      move.l d1,d1
    8fc8:	   |  |     |      movea.w d2,a0
    8fca:	   |  |     |      suba.w d1,a0
    8fcc:	   |  |     |  ,-- bra.s 8fdc <scaleSprite+0x11a>
    8fce:	   |  |     '--|-> movea.l 24(sp),a0
    8fd2:	   |  |        |   move.l 8(a0),d1
    8fd6:	   |  |        |   move.l d1,d1
    8fd8:	   |  |        |   movea.w d1,a0
    8fda:	   |  |        |   addq.w #1,a0
    8fdc:	   |  |        '-> move.w d0,d1
    8fde:	   |  |            sub.w a0,d1
    8fe0:	   |  |            move.w d1,16(sp)
    8fe4:	   |  |  ,-------- bra.s 901e <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8fe6:	   |  '--|-------> move.w 18(sp),d1
    8fea:	   |     |         tst.w 6(sp)
    8fee:	   |     |  ,----- beq.s 900c <scaleSprite+0x14a>
    8ff0:	   |     |  |      movea.l 24(sp),a0
    8ff4:	   |     |  |      move.l (a0),d0
    8ff6:	   |     |  |      move.l d0,d2
    8ff8:	   |     |  |      movea.l 24(sp),a0
    8ffc:	   |     |  |      move.l 8(a0),d0
    9000:	   |     |  |      move.l d0,d0
    9002:	   |     |  |      movea.w d2,a0
    9004:	   |     |  |      suba.w d0,a0
    9006:	   |     |  |      move.w a0,d0
    9008:	   |     |  |      subq.w #1,d0
    900a:	   |     |  |  ,-- bra.s 9016 <scaleSprite+0x154>
    900c:	   |     |  '--|-> movea.l 24(sp),a0
    9010:	   |     |     |   move.l 8(a0),d0
    9014:	   |     |     |   move.l d0,d0
    9016:	   |     |     '-> movea.w d1,a0
    9018:	   |     |         suba.w d0,a0
    901a:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    901e:	   |     '-------> movea.l 28(sp),a0
    9022:	   |               move.l 24(a0),d0
    9026:	   |               move.l d0,d1
    9028:	   |               movea.l 24(sp),a0
    902c:	   |               move.l 12(a0),d0
    9030:	   |               move.l d0,d0
    9032:	   |               sub.w d0,d1
    9034:	   |               move.w 8(sp),d0
    9038:	   |               movea.w d1,a0
    903a:	   |               adda.w d0,a0
    903c:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    9040:	   |               movea.l 24(sp),a0
    9044:	   |               move.l (a0),d0
    9046:	   |               move.l d0,d0
    9048:	   |               move.w 16(sp),d1
    904c:	   |               add.w d0,d1
    904e:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    9052:	   |               movea.l 24(sp),a0
    9056:	   |               move.l 4(a0),d0
    905a:	   |               move.l d0,d0
    905c:	   |               movea.w 14(sp),a0
    9060:	   |               adda.w d0,a0
    9062:	   |               move.w a0,10(sp)
    9066:	,--|-------------- bra.w 9152 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    906a:	|  '-------------> move.w 18(sp),d1
    906e:	|                  move.l 1cbdc <cameraX>,d0
    9074:	|                  move.l d0,d0
    9076:	|                  sub.w d0,d1
    9078:	|                  move.w d1,18(sp)
		y -= cameraY;
    907c:	|                  move.w 8(sp),d1
    9080:	|                  move.l 1cbe0 <cameraY>,d0
    9086:	|                  move.l d0,d0
    9088:	|                  sub.w d0,d1
    908a:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    908e:	|                  movea.l 24(sp),a0
    9092:	|                  move.l 8(a0),d0
    9096:	|     ,----------- bpl.s 90d2 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9098:	|     |            move.w 18(sp),d0
    909c:	|     |            tst.w 6(sp)
    90a0:	|     |     ,----- beq.s 90ba <scaleSprite+0x1f8>
    90a2:	|     |     |      movea.l 24(sp),a0
    90a6:	|     |     |      move.l (a0),d1
    90a8:	|     |     |      move.l d1,d2
    90aa:	|     |     |      movea.l 24(sp),a0
    90ae:	|     |     |      move.l 8(a0),d1
    90b2:	|     |     |      move.l d1,d1
    90b4:	|     |     |      movea.w d2,a0
    90b6:	|     |     |      suba.w d1,a0
    90b8:	|     |     |  ,-- bra.s 90c8 <scaleSprite+0x206>
    90ba:	|     |     '--|-> movea.l 24(sp),a0
    90be:	|     |        |   move.l 8(a0),d1
    90c2:	|     |        |   move.l d1,d1
    90c4:	|     |        |   movea.w d1,a0
    90c6:	|     |        |   addq.w #1,a0
    90c8:	|     |        '-> move.w d0,d1
    90ca:	|     |            sub.w a0,d1
    90cc:	|     |            move.w d1,16(sp)
    90d0:	|     |  ,-------- bra.s 910a <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    90d2:	|     '--|-------> move.w 18(sp),d1
    90d6:	|        |         tst.w 6(sp)
    90da:	|        |  ,----- beq.s 90f8 <scaleSprite+0x236>
    90dc:	|        |  |      movea.l 24(sp),a0
    90e0:	|        |  |      move.l (a0),d0
    90e2:	|        |  |      move.l d0,d2
    90e4:	|        |  |      movea.l 24(sp),a0
    90e8:	|        |  |      move.l 8(a0),d0
    90ec:	|        |  |      move.l d0,d0
    90ee:	|        |  |      movea.w d2,a0
    90f0:	|        |  |      suba.w d0,a0
    90f2:	|        |  |      move.w a0,d0
    90f4:	|        |  |      subq.w #1,d0
    90f6:	|        |  |  ,-- bra.s 9102 <scaleSprite+0x240>
    90f8:	|        |  '--|-> movea.l 24(sp),a0
    90fc:	|        |     |   move.l 8(a0),d0
    9100:	|        |     |   move.l d0,d0
    9102:	|        |     '-> movea.w d1,a0
    9104:	|        |         suba.w d0,a0
    9106:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    910a:	|        '-------> movea.l 28(sp),a0
    910e:	|                  move.l 24(a0),d0
    9112:	|                  move.l d0,d1
    9114:	|                  movea.l 24(sp),a0
    9118:	|                  move.l 12(a0),d0
    911c:	|                  move.l d0,d0
    911e:	|                  sub.w d0,d1
    9120:	|                  move.w 8(sp),d0
    9124:	|                  movea.w d1,a0
    9126:	|                  adda.w d0,a0
    9128:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    912c:	|                  movea.l 24(sp),a0
    9130:	|                  move.l (a0),d0
    9132:	|                  move.l d0,d0
    9134:	|                  move.w 16(sp),d1
    9138:	|                  add.w d0,d1
    913a:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    913e:	|                  movea.l 24(sp),a0
    9142:	|                  move.l 4(a0),d0
    9146:	|                  move.l d0,d0
    9148:	|                  movea.w 14(sp),a0
    914c:	|                  adda.w d0,a0
    914e:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    9152:	'----------------> move.l 1cae2 <input+0xa>,d1
    9158:	                   moveq #0,d0
    915a:	                   move.w 16(sp),d0
    915e:	                   cmp.l d1,d0
    9160:	            ,----- bgt.s 9196 <scaleSprite+0x2d4>
    9162:	            |      move.l 1cae2 <input+0xa>,d1
    9168:	            |      moveq #0,d0
    916a:	            |      move.w 12(sp),d0
    916e:	            |      cmp.l d1,d0
    9170:	            +----- blt.s 9196 <scaleSprite+0x2d4>
    9172:	            |      move.l 1cae6 <input+0xe>,d1
    9178:	            |      moveq #0,d0
    917a:	            |      move.w 14(sp),d0
    917e:	            |      cmp.l d1,d0
    9180:	            +----- bgt.s 9196 <scaleSprite+0x2d4>
    9182:	            |      move.l 1cae6 <input+0xe>,d1
    9188:	            |      moveq #0,d0
    918a:	            |      move.w 10(sp),d0
    918e:	            |      cmp.l d1,d0
    9190:	            +----- blt.s 9196 <scaleSprite+0x2d4>
		return TRUE;
    9192:	            |      moveq #1,d0
    9194:	            |  ,-- bra.s 9198 <scaleSprite+0x2d6>
	}
	return FALSE;
    9196:	            '--|-> clr.w d0
    9198:	               '-> move.l (sp)+,d2
    919a:	                   lea 16(sp),sp
    919e:	                   rts

000091a0 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    91a0:	    move.l 4(sp),d0
    91a4:	,-- bpl.s 91a8 <TF_abs+0x8>
    91a6:	|   neg.l d0
}
    91a8:	'-> rts

000091aa <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    91aa:	             lea -28(sp),sp
    91ae:	             move.l a6,-(sp)
    91b0:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    91b2:	             move.l #132,28(sp)
    91ba:	             clr.l 24(sp)
    91be:	             move.l 1cb26 <SysBase>,d0
    91c4:	             movea.l d0,a6
    91c6:	             move.l 28(sp),d0
    91ca:	             move.l 24(sp),d1
    91ce:	             jsr -684(a6)
    91d2:	             move.l d0,20(sp)
    91d6:	             move.l 20(sp),d0
    91da:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    91de:	         ,-- bne.s 91e6 <addPerson+0x3c>
    91e0:	         |   clr.w d0
    91e2:	,--------|-- bra.w 9416 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    91e6:	|        '-> move.l 48(sp),-(sp)
    91ea:	|            jsr d60e <loadObjectType>
    91f0:	|            addq.l #4,sp
    91f2:	|            movea.l 16(sp),a0
    91f6:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    91fa:	|            movea.l 16(sp),a0
    91fe:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    9206:	|            movea.l 16(sp),a0
    920a:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    920e:	|            movea.l 16(sp),a0
    9212:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    9216:	|            move.l 44(sp),-(sp)
    921a:	|            jsr 1770a <__floatsisf>
    9220:	|            addq.l #4,sp
    9222:	|            move.l d0,d2
    9224:	|            move.l 40(sp),-(sp)
    9228:	|            jsr 1770a <__floatsisf>
    922e:	|            addq.l #4,sp
    9230:	|            move.l d2,-(sp)
    9232:	|            move.l d0,-(sp)
    9234:	|            move.l 24(sp),-(sp)
    9238:	|            jsr ad5a <moveAndScale>
    923e:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9242:	|            movea.l 16(sp),a0
    9246:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    924a:	|            movea.l 16(sp),a0
    924e:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    9254:	|            movea.l 16(sp),a0
    9258:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    925e:	|            movea.l 16(sp),a0
    9262:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    9266:	|            movea.l 16(sp),a0
    926a:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    926e:	|            movea.l 16(sp),a0
    9272:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    9278:	|            movea.l 16(sp),a0
    927c:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9280:	|            movea.l 16(sp),a0
    9284:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    928c:	|            movea.l 16(sp),a0
    9290:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9298:	|            movea.l 16(sp),a0
    929c:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    92a0:	|            movea.l 16(sp),a0
    92a4:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    92a8:	|            movea.l 16(sp),a0
    92ac:	|            movea.l 114(a0),a0
    92b0:	|            move.l 24(a0),d0
    92b4:	|            movea.l 16(sp),a0
    92b8:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    92bc:	|            movea.l 16(sp),a0
    92c0:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    92c4:	|            movea.l 16(sp),a0
    92c8:	|            movea.l 114(a0),a0
    92cc:	|            move.l 32(a0),d0
    92d0:	|            movea.l 16(sp),a0
    92d4:	|            move.l d0,122(a0)
    newPerson->r = 0;
    92d8:	|            movea.l 16(sp),a0
    92dc:	|            clr.b 126(a0)
    newPerson->g = 0;
    92e0:	|            movea.l 16(sp),a0
    92e4:	|            clr.b 127(a0)
    newPerson->b = 0;
    92e8:	|            movea.l 16(sp),a0
    92ec:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    92f0:	|            movea.l 16(sp),a0
    92f4:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    92f8:	|            movea.l 16(sp),a0
    92fc:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    9300:	|            movea.l 16(sp),a0
    9304:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    930a:	|            clr.l -(sp)
    930c:	|            move.l 20(sp),-(sp)
    9310:	|            jsr 414c <setFrames>
    9316:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    9318:	|            movea.l 52(sp),a0
    931c:	|            movea.l (a0),a0
    931e:	|            movea.l (a0),a0
    9320:	|            movea.l 4(a0),a0
    9324:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    9328:	|     ,----- bpl.s 9332 <addPerson+0x188>
    932a:	|     |      move.l 12(sp),d0
    932e:	|     |      neg.l d0
    9330:	|     |  ,-- bra.s 9334 <addPerson+0x18a>
    9332:	|     '--|-> moveq #1,d0
    9334:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    9338:	|            movea.l 52(sp),a0
    933c:	|            movea.l (a0),a0
    933e:	|            movea.l (a0),a0
    9340:	|            movea.l (a0),a0
    9342:	|            move.l 8(a0),d0
    9346:	|            cmp.l 8(sp),d0
    934a:	|     ,----- bgt.s 937c <addPerson+0x1d2>
        if (fNumSigned < 0) {
    934c:	|     |      tst.l 12(sp)
    9350:	|     |  ,-- bge.s 935e <addPerson+0x1b4>
            newPerson->height = 5;
    9352:	|     |  |   movea.l 16(sp),a0
    9356:	|     |  |   moveq #5,d0
    9358:	|     |  |   move.l d0,20(a0)
    935c:	|  ,--|--|-- bra.s 93a8 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    935e:	|  |  |  '-> movea.l 52(sp),a0
    9362:	|  |  |      movea.l (a0),a0
    9364:	|  |  |      movea.l (a0),a0
    9366:	|  |  |      movea.l (a0),a0
    9368:	|  |  |      movea.l 16(a0),a0
    936c:	|  |  |      move.l 12(a0),d0
    9370:	|  |  |      addq.l #5,d0
    9372:	|  |  |      movea.l 16(sp),a0
    9376:	|  |  |      move.l d0,20(a0)
    937a:	|  +--|----- bra.s 93a8 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    937c:	|  |  '----> movea.l 52(sp),a0
    9380:	|  |         movea.l (a0),a0
    9382:	|  |         movea.l (a0),a0
    9384:	|  |         movea.l (a0),a0
    9386:	|  |         movea.l 16(a0),a0
    938a:	|  |         move.l 8(sp),d1
    938e:	|  |         move.l d1,d0
    9390:	|  |         lsl.l #3,d0
    9392:	|  |         sub.l d1,d0
    9394:	|  |         add.l d0,d0
    9396:	|  |         add.l d0,d0
    9398:	|  |         adda.l d0,a0
    939a:	|  |         move.l 12(a0),d0
    939e:	|  |         addq.l #5,d0
    93a0:	|  |         movea.l 16(sp),a0
    93a4:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    93a8:	|  '-------> move.l #117638,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    93b0:	|        ,-- bra.s 93c0 <addPerson+0x216>
        changethat = &((*changethat)->next);
    93b2:	|     ,--|-> movea.l 32(sp),a0
    93b6:	|     |  |   move.l (a0),d0
    93b8:	|     |  |   moveq #36,d1
    93ba:	|     |  |   add.l d0,d1
    93bc:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    93c0:	|     |  '-> movea.l 32(sp),a0
    93c4:	|     |      move.l (a0),d0
    93c6:	|     |  ,-- beq.s 93ee <addPerson+0x244>
    93c8:	|     |  |   movea.l 32(sp),a0
    93cc:	|     |  |   movea.l (a0),a0
    93ce:	|     |  |   move.l 4(a0),d2
    93d2:	|     |  |   move.l 44(sp),-(sp)
    93d6:	|     |  |   jsr 1770a <__floatsisf>
    93dc:	|     |  |   addq.l #4,sp
    93de:	|     |  |   move.l d0,-(sp)
    93e0:	|     |  |   move.l d2,-(sp)
    93e2:	|     |  |   jsr 17930 <__ltsf2>
    93e8:	|     |  |   addq.l #8,sp
    93ea:	|     |  |   tst.l d0
    93ec:	|     '--|-- blt.s 93b2 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    93ee:	|        '-> movea.l 32(sp),a0
    93f2:	|            move.l (a0),d0
    93f4:	|            movea.l 16(sp),a0
    93f8:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    93fc:	|            movea.l 32(sp),a0
    9400:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    9404:	|            movea.l 16(sp),a0
    9408:	|            move.l 114(a0),d0
    940c:	|            sne d0
    940e:	|            neg.b d0
    9410:	|            move.b d0,d0
    9412:	|            andi.w #255,d0
}
    9416:	'----------> move.l (sp)+,d2
    9418:	             movea.l (sp)+,a6
    941a:	             lea 28(sp),sp
    941e:	             rts

00009420 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    9420:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9422:	       move.l 8(sp),-(sp)
    9426:	       jsr a5b0 <findPerson>
    942c:	       addq.l #4,sp
    942e:	       move.l d0,(sp)
    if (moveMe) {
    9430:	,----- beq.s 9464 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    9432:	|      movea.l (sp),a0
    9434:	|      move.l 68(a0),d0
    9438:	|  ,-- beq.s 944a <animatePerson+0x2a>
    943a:	|  |   movea.l (sp),a0
    943c:	|  |   move.l 68(a0),d0
    9440:	|  |   move.l d0,-(sp)
    9442:	|  |   jsr 4faa <abortFunction>
    9448:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    944a:	|  '-> movea.l (sp),a0
    944c:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    9450:	|      movea.l (sp),a0
    9452:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    9456:	|      movea.l (sp),a0
    9458:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    945c:	|      movea.l (sp),a0
    945e:	|      move.l 12(sp),72(a0)
    }
}
    9464:	'----> nop
    9466:	       addq.l #4,sp
    9468:	       rts

0000946a <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    946a:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    946c:	       move.l 8(sp),-(sp)
    9470:	       jsr a5b0 <findPerson>
    9476:	       addq.l #4,sp
    9478:	       move.l d0,(sp)
    if (moveMe) {
    947a:	,----- beq.s 94bc <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    947c:	|      movea.l (sp),a0
    947e:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9482:	|      movea.l (sp),a0
    9484:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    948a:	|      move.l (sp),-(sp)
    948c:	|      jsr aee8 <rethinkAngle>
    9492:	|      addq.l #4,sp
        if (moveMe->walking) {
    9494:	|      movea.l (sp),a0
    9496:	|      move.w 64(a0),d0
    949a:	|  ,-- beq.s 94ae <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    949c:	|  |   pea 1 <_start+0x1>
    94a0:	|  |   move.l 4(sp),-(sp)
    94a4:	|  |   jsr 414c <setFrames>
    94aa:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    94ac:	+--|-- bra.s 94bc <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    94ae:	|  '-> clr.l -(sp)
    94b0:	|      move.l 4(sp),-(sp)
    94b4:	|      jsr 414c <setFrames>
    94ba:	|      addq.l #8,sp
}
    94bc:	'----> nop
    94be:	       addq.l #4,sp
    94c0:	       rts

000094c2 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    94c2:	             lea -36(sp),sp
    94c6:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    94c8:	             movea.l 44(sp),a0
    94cc:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    94d2:	             moveq #12,d0
    94d4:	             move.l d0,28(sp)
    94d8:	             clr.l 24(sp)
    94dc:	             move.l 1cb26 <SysBase>,d0
    94e2:	             movea.l d0,a6
    94e4:	             move.l 28(sp),d0
    94e8:	             move.l 24(sp),d1
    94ec:	             jsr -684(a6)
    94f0:	             move.l d0,20(sp)
    94f4:	             move.l 20(sp),d0
    94f8:	             move.l d0,16(sp)
	if (!(newAnim)) {
    94fc:	         ,-- bne.s 9512 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    94fe:	         |   pea 19243 <PutChar+0x14c9>
    9504:	         |   jsr 172d8 <KPrintF>
    950a:	         |   addq.l #4,sp
		return NULL;
    950c:	         |   moveq #0,d0
    950e:	,--------|-- bra.w 9664 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9512:	|        '-> movea.l 44(sp),a0
    9516:	|            move.l (a0),d0
    9518:	|            movea.l 16(sp),a0
    951c:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    951e:	|            movea.l 16(sp),a0
    9522:	|            movea.l (a0),a0
    9524:	|            move.l 4(a0),d0
    9528:	|            addq.l #1,d0
    952a:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    952e:	|            movea.l 16(sp),a0
    9532:	|            move.l 32(sp),8(a0)

	if (num) {
    9538:	|  ,-------- beq.w 9658 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    953c:	|  |         move.l 32(sp),d1
    9540:	|  |         move.l d1,d0
    9542:	|  |         add.l d0,d0
    9544:	|  |         add.l d1,d0
    9546:	|  |         add.l d0,d0
    9548:	|  |         add.l d0,d0
    954a:	|  |         move.l d0,12(sp)
    954e:	|  |         clr.l 8(sp)
    9552:	|  |         move.l 1cb26 <SysBase>,d0
    9558:	|  |         movea.l d0,a6
    955a:	|  |         move.l 12(sp),d0
    955e:	|  |         move.l 8(sp),d1
    9562:	|  |         jsr -684(a6)
    9566:	|  |         move.l d0,4(sp)
    956a:	|  |         move.l 4(sp),d0
    956e:	|  |         movea.l 16(sp),a0
    9572:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9576:	|  |         movea.l 16(sp),a0
    957a:	|  |         move.l 4(a0),d0
    957e:	|  |     ,-- bne.s 9594 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9580:	|  |     |   pea 19243 <PutChar+0x14c9>
    9586:	|  |     |   jsr 172d8 <KPrintF>
    958c:	|  |     |   addq.l #4,sp
			return NULL;
    958e:	|  |     |   moveq #0,d0
    9590:	+--|-----|-- bra.w 9664 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9594:	|  |     '-> clr.l 36(sp)
    9598:	|  |     ,-- bra.w 964a <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    959c:	|  |  ,--|-> movea.l 44(sp),a0
    95a0:	|  |  |  |   movea.l 4(a0),a0
    95a4:	|  |  |  |   move.l 36(sp),d1
    95a8:	|  |  |  |   move.l d1,d0
    95aa:	|  |  |  |   add.l d0,d0
    95ac:	|  |  |  |   add.l d1,d0
    95ae:	|  |  |  |   add.l d0,d0
    95b0:	|  |  |  |   add.l d0,d0
    95b2:	|  |  |  |   lea (0,a0,d0.l),a1
    95b6:	|  |  |  |   movea.l 16(sp),a0
    95ba:	|  |  |  |   movea.l 4(a0),a0
    95be:	|  |  |  |   move.l 36(sp),d1
    95c2:	|  |  |  |   move.l d1,d0
    95c4:	|  |  |  |   add.l d0,d0
    95c6:	|  |  |  |   add.l d1,d0
    95c8:	|  |  |  |   add.l d0,d0
    95ca:	|  |  |  |   add.l d0,d0
    95cc:	|  |  |  |   adda.l d0,a0
    95ce:	|  |  |  |   move.l (a1),d0
    95d0:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    95d2:	|  |  |  |   movea.l 44(sp),a0
    95d6:	|  |  |  |   movea.l 4(a0),a0
    95da:	|  |  |  |   move.l 36(sp),d1
    95de:	|  |  |  |   move.l d1,d0
    95e0:	|  |  |  |   add.l d0,d0
    95e2:	|  |  |  |   add.l d1,d0
    95e4:	|  |  |  |   add.l d0,d0
    95e6:	|  |  |  |   add.l d0,d0
    95e8:	|  |  |  |   lea (0,a0,d0.l),a1
    95ec:	|  |  |  |   movea.l 16(sp),a0
    95f0:	|  |  |  |   movea.l 4(a0),a0
    95f4:	|  |  |  |   move.l 36(sp),d1
    95f8:	|  |  |  |   move.l d1,d0
    95fa:	|  |  |  |   add.l d0,d0
    95fc:	|  |  |  |   add.l d1,d0
    95fe:	|  |  |  |   add.l d0,d0
    9600:	|  |  |  |   add.l d0,d0
    9602:	|  |  |  |   adda.l d0,a0
    9604:	|  |  |  |   move.l 4(a1),d0
    9608:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    960c:	|  |  |  |   movea.l 44(sp),a0
    9610:	|  |  |  |   movea.l 4(a0),a0
    9614:	|  |  |  |   move.l 36(sp),d1
    9618:	|  |  |  |   move.l d1,d0
    961a:	|  |  |  |   add.l d0,d0
    961c:	|  |  |  |   add.l d1,d0
    961e:	|  |  |  |   add.l d0,d0
    9620:	|  |  |  |   add.l d0,d0
    9622:	|  |  |  |   lea (0,a0,d0.l),a1
    9626:	|  |  |  |   movea.l 16(sp),a0
    962a:	|  |  |  |   movea.l 4(a0),a0
    962e:	|  |  |  |   move.l 36(sp),d1
    9632:	|  |  |  |   move.l d1,d0
    9634:	|  |  |  |   add.l d0,d0
    9636:	|  |  |  |   add.l d1,d0
    9638:	|  |  |  |   add.l d0,d0
    963a:	|  |  |  |   add.l d0,d0
    963c:	|  |  |  |   adda.l d0,a0
    963e:	|  |  |  |   move.l 8(a1),d0
    9642:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    9646:	|  |  |  |   addq.l #1,36(sp)
    964a:	|  |  |  '-> move.l 36(sp),d0
    964e:	|  |  |      cmp.l 32(sp),d0
    9652:	|  |  '----- blt.w 959c <copyAnim+0xda>
    9656:	|  |     ,-- bra.s 9660 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    9658:	|  '-----|-> movea.l 16(sp),a0
    965c:	|        |   clr.l 4(a0)
	}

	return newAnim;
    9660:	|        '-> move.l 16(sp),d0
}
    9664:	'----------> movea.l (sp)+,a6
    9666:	             lea 36(sp),sp
    966a:	             rts

0000966c <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    966c:	                lea -44(sp),sp
    9670:	                move.l a6,-(sp)
    9672:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9674:	                moveq #12,d0
    9676:	                move.l d0,40(sp)
    967a:	                clr.l 36(sp)
    967e:	                move.l 1cb26 <SysBase>,d0
    9684:	                movea.l d0,a6
    9686:	                move.l 40(sp),d0
    968a:	                move.l 36(sp),d1
    968e:	                jsr -684(a6)
    9692:	                move.l d0,32(sp)
    9696:	                move.l 32(sp),d0
    969a:	                move.l d0,28(sp)
	if( !newP) {
    969e:	            ,-- bne.s 96b4 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    96a0:	            |   pea 19264 <PutChar+0x14ea>
    96a6:	            |   jsr 172d8 <KPrintF>
    96ac:	            |   addq.l #4,sp
		return NULL;
    96ae:	            |   moveq #0,d0
    96b0:	,-----------|-- bra.w 9884 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    96b4:	|           '-> movea.l 28(sp),a0
    96b8:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    96be:	|               move.l 56(sp),d1
    96c2:	|               move.l d1,d0
    96c4:	|               add.l d0,d0
    96c6:	|               add.l d1,d0
    96c8:	|               add.l d0,d0
    96ca:	|               add.l d0,d0
    96cc:	|               move.l d0,24(sp)
    96d0:	|               clr.l 20(sp)
    96d4:	|               move.l 1cb26 <SysBase>,d0
    96da:	|               movea.l d0,a6
    96dc:	|               move.l 24(sp),d0
    96e0:	|               move.l 20(sp),d1
    96e4:	|               jsr -684(a6)
    96e8:	|               move.l d0,16(sp)
    96ec:	|               move.l 16(sp),d0
    96f0:	|               movea.l 28(sp),a0
    96f4:	|               move.l d0,4(a0)
	if( !newP->frames) {
    96f8:	|               movea.l 28(sp),a0
    96fc:	|               move.l 4(a0),d0
    9700:	|           ,-- bne.s 9716 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9702:	|           |   pea 19264 <PutChar+0x14ea>
    9708:	|           |   jsr 172d8 <KPrintF>
    970e:	|           |   addq.l #4,sp
		return NULL;
    9710:	|           |   moveq #0,d0
    9712:	+-----------|-- bra.w 9884 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    9716:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    971c:	|               movea.l 60(sp),a0
    9720:	|               move.l (a0),44(sp)
	while (a) {
    9724:	|     ,-------- bra.w 9878 <createPersonaAnim+0x20c>
		a --;
    9728:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    972c:	|  |  |         movea.l 28(sp),a0
    9730:	|  |  |         movea.l 4(a0),a0
    9734:	|  |  |         move.l 48(sp),d1
    9738:	|  |  |         move.l d1,d0
    973a:	|  |  |         add.l d0,d0
    973c:	|  |  |         add.l d1,d0
    973e:	|  |  |         add.l d0,d0
    9740:	|  |  |         add.l d0,d0
    9742:	|  |  |         adda.l d0,a0
    9744:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    9748:	|  |  |         movea.l 44(sp),a0
    974c:	|  |  |         move.l (a0),d0
    974e:	|  |  |         moveq #5,d1
    9750:	|  |  |         cmp.l d0,d1
    9752:	|  |  |     ,-- bne.s 977e <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    9754:	|  |  |     |   movea.l 28(sp),a0
    9758:	|  |  |     |   movea.l 4(a0),a0
    975c:	|  |  |     |   move.l 48(sp),d1
    9760:	|  |  |     |   move.l d1,d0
    9762:	|  |  |     |   add.l d0,d0
    9764:	|  |  |     |   add.l d1,d0
    9766:	|  |  |     |   add.l d0,d0
    9768:	|  |  |     |   add.l d0,d0
    976a:	|  |  |     |   lea (0,a0,d0.l),a1
    976e:	|  |  |     |   movea.l 44(sp),a0
    9772:	|  |  |     |   move.l 4(a0),d0
    9776:	|  |  |     |   move.l d0,8(a1)
    977a:	|  |  |  ,--|-- bra.w 9826 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    977e:	|  |  |  |  '-> movea.l 44(sp),a0
    9782:	|  |  |  |      move.l (a0),d0
    9784:	|  |  |  |      moveq #2,d1
    9786:	|  |  |  |      cmp.l d0,d1
    9788:	|  |  |  |  ,-- bne.s 97b4 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    978a:	|  |  |  |  |   movea.l 44(sp),a0
    978e:	|  |  |  |  |   move.l 4(a0),d2
    9792:	|  |  |  |  |   movea.l 28(sp),a0
    9796:	|  |  |  |  |   movea.l 4(a0),a0
    979a:	|  |  |  |  |   move.l 48(sp),d1
    979e:	|  |  |  |  |   move.l d1,d0
    97a0:	|  |  |  |  |   add.l d0,d0
    97a2:	|  |  |  |  |   add.l d1,d0
    97a4:	|  |  |  |  |   add.l d0,d0
    97a6:	|  |  |  |  |   add.l d0,d0
    97a8:	|  |  |  |  |   adda.l d0,a0
    97aa:	|  |  |  |  |   move.l d2,d0
    97ac:	|  |  |  |  |   neg.l d0
    97ae:	|  |  |  |  |   move.l d0,8(a0)
    97b2:	|  |  |  +--|-- bra.s 9826 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    97b4:	|  |  |  |  '-> movea.l 44(sp),a0
    97b8:	|  |  |  |      move.l (a0),d0
    97ba:	|  |  |  |      moveq #6,d1
    97bc:	|  |  |  |      cmp.l d0,d1
    97be:	|  |  |  |  ,-- bne.s 9806 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    97c0:	|  |  |  |  |   movea.l 44(sp),a0
    97c4:	|  |  |  |  |   movea.l 4(a0),a0
    97c8:	|  |  |  |  |   move.l (a0),d0
    97ca:	|  |  |  |  |   move.l d0,-(sp)
    97cc:	|  |  |  |  |   pea 1 <_start+0x1>
    97d0:	|  |  |  |  |   lea 20(sp),a0
    97d4:	|  |  |  |  |   move.l a0,-(sp)
    97d6:	|  |  |  |  |   jsr 147f8 <getValueType>
    97dc:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    97e0:	|  |  |  |  |   movea.l 44(sp),a0
    97e4:	|  |  |  |  |   movea.l 4(a0),a0
    97e8:	|  |  |  |  |   movea.l (a0),a0
    97ea:	|  |  |  |  |   move.l 8(a0),d0
    97ee:	|  |  |  |  |   move.l d0,-(sp)
    97f0:	|  |  |  |  |   pea 1 <_start+0x1>
    97f4:	|  |  |  |  |   lea 16(sp),a0
    97f8:	|  |  |  |  |   move.l a0,-(sp)
    97fa:	|  |  |  |  |   jsr 147f8 <getValueType>
    9800:	|  |  |  |  |   lea 12(sp),sp
    9804:	|  |  |  +--|-- bra.s 9826 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    9806:	|  |  |  |  '-> move.l 44(sp),d0
    980a:	|  |  |  |      move.l d0,-(sp)
    980c:	|  |  |  |      pea 1 <_start+0x1>
    9810:	|  |  |  |      lea 20(sp),a0
    9814:	|  |  |  |      move.l a0,-(sp)
    9816:	|  |  |  |      jsr 147f8 <getValueType>
    981c:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    9820:	|  |  |  |      moveq #1,d0
    9822:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    9826:	|  |  |  '----> move.l 60(sp),-(sp)
    982a:	|  |  |         jsr 1517c <trimStack>
    9830:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    9832:	|  |  |         movea.l 28(sp),a0
    9836:	|  |  |         movea.l 4(a0),a0
    983a:	|  |  |         move.l 48(sp),d1
    983e:	|  |  |         move.l d1,d0
    9840:	|  |  |         add.l d0,d0
    9842:	|  |  |         add.l d1,d0
    9844:	|  |  |         add.l d0,d0
    9846:	|  |  |         add.l d0,d0
    9848:	|  |  |         adda.l d0,a0
    984a:	|  |  |         move.l 12(sp),d0
    984e:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    9850:	|  |  |         movea.l 28(sp),a0
    9854:	|  |  |         movea.l 4(a0),a0
    9858:	|  |  |         move.l 48(sp),d1
    985c:	|  |  |         move.l d1,d0
    985e:	|  |  |         add.l d0,d0
    9860:	|  |  |         add.l d1,d0
    9862:	|  |  |         add.l d0,d0
    9864:	|  |  |         add.l d0,d0
    9866:	|  |  |         adda.l d0,a0
    9868:	|  |  |         move.l 8(sp),d0
    986c:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9870:	|  |  |         movea.l 60(sp),a0
    9874:	|  |  |         move.l (a0),44(sp)
	while (a) {
    9878:	|  |  '-------> tst.l 48(sp)
    987c:	|  '----------- bne.w 9728 <createPersonaAnim+0xbc>
	}

	return newP;
    9880:	|               move.l 28(sp),d0
}
    9884:	'-------------> move.l (sp)+,d2
    9886:	                movea.l (sp)+,a6
    9888:	                lea 44(sp),sp
    988c:	                rts

0000988e <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    988e:	       lea -12(sp),sp
    9892:	       move.l a6,-(sp)

	if(orig->theSprites)
    9894:	       movea.l 20(sp),a0
    9898:	       move.l (a0),d0
    989a:	   ,-- beq.s 98c4 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    989c:	   |   movea.l 20(sp),a0
    98a0:	   |   movea.l (a0),a0
    98a2:	   |   move.l 4(a0),d0
    98a6:	   |   subq.l #1,d0
    98a8:	   |   move.l d0,4(a0)
    98ac:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    98b2:	   +-- bne.s 98c4 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    98b4:	   |   movea.l 20(sp),a0
    98b8:	   |   move.l (a0),d0
    98ba:	   |   move.l d0,-(sp)
    98bc:	   |   jsr 8972 <forgetSpriteBank>
    98c2:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    98c4:	   '-> tst.l 20(sp)
    98c8:	,----- beq.s 9908 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    98ca:	|      movea.l 20(sp),a0
    98ce:	|      move.l 8(a0),d0
    98d2:	|  ,-- beq.s 98ee <deleteAnim+0x60>
			FreeVec( orig->frames);
    98d4:	|  |   movea.l 20(sp),a0
    98d8:	|  |   move.l 4(a0),8(sp)
    98de:	|  |   move.l 1cb26 <SysBase>,d0
    98e4:	|  |   movea.l d0,a6
    98e6:	|  |   movea.l 8(sp),a1
    98ea:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    98ee:	|  '-> move.l 20(sp),4(sp)
    98f4:	|      move.l 1cb26 <SysBase>,d0
    98fa:	|      movea.l d0,a6
    98fc:	|      movea.l 4(sp),a1
    9900:	|      jsr -690(a6)
		orig = NULL;
    9904:	|      clr.l 20(sp)
	}	
	
}
    9908:	'----> nop
    990a:	       movea.l (sp)+,a6
    990c:	       lea 12(sp),sp
    9910:	       rts

00009912 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9912:	          lea -124(sp),sp
    9916:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    991a:	          movea.l 152(sp),a0
    991e:	          move.l 56(a0),d1
    9922:	          movea.l 152(sp),a0
    9926:	          move.l 60(a0),d0
    992a:	          cmp.l d1,d0
    992c:	      ,-- bne.s 995c <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    992e:	      |   movea.l 152(sp),a0
    9932:	      |   moveq #-1,d0
    9934:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    9938:	      |   movea.l 152(sp),a0
    993c:	      |   move.l 40(a0),d0
    9940:	      |   movea.l 152(sp),a0
    9944:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    9948:	      |   movea.l 152(sp),a0
    994c:	      |   move.l 44(a0),d0
    9950:	      |   movea.l 152(sp),a0
    9954:	      |   move.l d0,52(a0)
    9958:	   ,--|-- bra.w 9ec2 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    995c:	   |  '-> movea.l 1cc3e <currentFloor>,a0
    9962:	   |      move.l 16(a0),d1
    9966:	   |      movea.l 152(sp),a0
    996a:	   |      move.l 56(a0),d0
    996e:	   |      add.l d0,d0
    9970:	   |      add.l d0,d0
    9972:	   |      movea.l d1,a0
    9974:	   |      adda.l d0,a0
    9976:	   |      move.l (a0),d1
    9978:	   |      movea.l 152(sp),a0
    997c:	   |      move.l 60(a0),d0
    9980:	   |      add.l d0,d0
    9982:	   |      add.l d0,d0
    9984:	   |      movea.l d1,a0
    9986:	   |      adda.l d0,a0
    9988:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    998c:	   |      moveq #-1,d0
    998e:	   |      cmp.l 144(sp),d0
    9992:	   |  ,-- bne.s 999a <doBorderStuff+0x88>
    9994:	   |  |   clr.w d0
    9996:	,--|--|-- bra.w 9fc2 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    999a:	|  |  '-> movea.l 1cc3e <currentFloor>,a0
    99a0:	|  |      move.l 12(a0),d1
    99a4:	|  |      move.l 144(sp),d0
    99a8:	|  |      lsl.l #3,d0
    99aa:	|  |      add.l d0,d1
    99ac:	|  |      movea.l 1cc3e <currentFloor>,a0
    99b2:	|  |      movea.l 12(a0),a1
    99b6:	|  |      movea.l 152(sp),a0
    99ba:	|  |      move.l 56(a0),d0
    99be:	|  |      lsl.l #3,d0
    99c0:	|  |      add.l a1,d0
    99c2:	|  |      lea 40(sp),a0
    99c6:	|  |      move.l a0,-(sp)
    99c8:	|  |      lea 48(sp),a0
    99cc:	|  |      move.l a0,-(sp)
    99ce:	|  |      move.l d1,-(sp)
    99d0:	|  |      move.l d0,-(sp)
    99d2:	|  |      jsr 1653e <getMatchingCorners>
    99d8:	|  |      lea 16(sp),sp
    99dc:	|  |      tst.w d0
    99de:	|  |  ,-- bne.s 99f4 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    99e0:	|  |  |   pea 1928e <PutChar+0x1514>
    99e6:	|  |  |   jsr 172d8 <KPrintF>
    99ec:	|  |  |   addq.l #4,sp
            return FALSE;
    99ee:	|  |  |   clr.w d0
    99f0:	+--|--|-- bra.w 9fc2 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    99f4:	|  |  '-> movea.l 152(sp),a0
    99f8:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    99fe:	|  |      movea.l 152(sp),a0
    9a02:	|  |      move.l (a0),d0
    9a04:	|  |      move.l d0,-(sp)
    9a06:	|  |      jsr 176a2 <__fixsfsi>
    9a0c:	|  |      addq.l #4,sp
    9a0e:	|  |      move.l d0,140(sp)
    9a12:	|  |      movea.l 152(sp),a0
    9a16:	|  |      move.l 4(a0),d0
    9a1a:	|  |      move.l d0,-(sp)
    9a1c:	|  |      jsr 176a2 <__fixsfsi>
    9a22:	|  |      addq.l #4,sp
    9a24:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9a28:	|  |      movea.l 152(sp),a0
    9a2c:	|  |      move.l 40(a0),132(sp)
    9a32:	|  |      movea.l 152(sp),a0
    9a36:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9a3c:	|  |      movea.l 1cc3e <currentFloor>,a0
    9a42:	|  |      move.l 4(a0),d1
    9a46:	|  |      move.l 44(sp),d0
    9a4a:	|  |      lsl.l #3,d0
    9a4c:	|  |      movea.l d1,a0
    9a4e:	|  |      adda.l d0,a0
    9a50:	|  |      move.l (a0),124(sp)
    9a54:	|  |      movea.l 1cc3e <currentFloor>,a0
    9a5a:	|  |      move.l 4(a0),d1
    9a5e:	|  |      move.l 44(sp),d0
    9a62:	|  |      lsl.l #3,d0
    9a64:	|  |      movea.l d1,a0
    9a66:	|  |      adda.l d0,a0
    9a68:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9a6e:	|  |      movea.l 1cc3e <currentFloor>,a0
    9a74:	|  |      move.l 4(a0),d1
    9a78:	|  |      move.l 40(sp),d0
    9a7c:	|  |      lsl.l #3,d0
    9a7e:	|  |      movea.l d1,a0
    9a80:	|  |      adda.l d0,a0
    9a82:	|  |      move.l (a0),116(sp)
    9a86:	|  |      movea.l 1cc3e <currentFloor>,a0
    9a8c:	|  |      move.l 4(a0),d1
    9a90:	|  |      move.l 40(sp),d0
    9a94:	|  |      lsl.l #3,d0
    9a96:	|  |      movea.l d1,a0
    9a98:	|  |      adda.l d0,a0
    9a9a:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9aa0:	|  |      move.l 140(sp),d0
    9aa4:	|  |      sub.l 132(sp),d0
    9aa8:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9aac:	|  |      move.l 136(sp),d0
    9ab0:	|  |      sub.l 128(sp),d0
    9ab4:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9ab8:	|  |      move.l 116(sp),d0
    9abc:	|  |      sub.l 124(sp),d0
    9ac0:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9ac4:	|  |      move.l 112(sp),d0
    9ac8:	|  |      sub.l 120(sp),d0
    9acc:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9ad0:	|  |      move.l 124(sp),d0
    9ad4:	|  |      sub.l 140(sp),d0
    9ad8:	|  |      move.l 104(sp),-(sp)
    9adc:	|  |      move.l d0,-(sp)
    9ade:	|  |      jsr 17c64 <__mulsi3>
    9ae4:	|  |      addq.l #8,sp
    9ae6:	|  |      move.l d0,d2
    9ae8:	|  |      move.l 120(sp),d0
    9aec:	|  |      sub.l 136(sp),d0
    9af0:	|  |      move.l 108(sp),-(sp)
    9af4:	|  |      move.l d0,-(sp)
    9af6:	|  |      jsr 17c64 <__mulsi3>
    9afc:	|  |      addq.l #8,sp
    9afe:	|  |      move.l d2,d1
    9b00:	|  |      sub.l d0,d1
    9b02:	|  |      move.l d1,-(sp)
    9b04:	|  |      jsr 176ca <__floatsidf>
    9b0a:	|  |      addq.l #4,sp
    9b0c:	|  |      move.l d0,32(sp)
    9b10:	|  |      move.l d1,36(sp)
    9b14:	|  |      move.l 32(sp),88(sp)
    9b1a:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9b20:	|  |      move.l 96(sp),-(sp)
    9b24:	|  |      move.l 112(sp),-(sp)
    9b28:	|  |      jsr 17c64 <__mulsi3>
    9b2e:	|  |      addq.l #8,sp
    9b30:	|  |      move.l d0,d2
    9b32:	|  |      move.l 100(sp),-(sp)
    9b36:	|  |      move.l 108(sp),-(sp)
    9b3a:	|  |      jsr 17c64 <__mulsi3>
    9b40:	|  |      addq.l #8,sp
    9b42:	|  |      move.l d2,d1
    9b44:	|  |      sub.l d0,d1
    9b46:	|  |      move.l d1,-(sp)
    9b48:	|  |      jsr 176ca <__floatsidf>
    9b4e:	|  |      addq.l #4,sp
    9b50:	|  |      move.l d1,-(sp)
    9b52:	|  |      move.l d0,-(sp)
    9b54:	|  |      move.l 100(sp),-(sp)
    9b58:	|  |      move.l 100(sp),-(sp)
    9b5c:	|  |      jsr 1755e <__divdf3>
    9b62:	|  |      lea 16(sp),sp
    9b66:	|  |      move.l d0,24(sp)
    9b6a:	|  |      move.l d1,28(sp)
    9b6e:	|  |      move.l 24(sp),88(sp)
    9b74:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9b7a:	|  |      clr.l -(sp)
    9b7c:	|  |      clr.l -(sp)
    9b7e:	|  |      move.l 100(sp),-(sp)
    9b82:	|  |      move.l 100(sp),-(sp)
    9b86:	|  |      jsr 17828 <__gtdf2>
    9b8c:	|  |      lea 16(sp),sp
    9b90:	|  |      tst.l d0
    9b92:	|  |  ,-- ble.w 9c6a <doBorderStuff+0x358>
    9b96:	|  |  |   clr.l -(sp)
    9b98:	|  |  |   move.l #1072693248,-(sp)
    9b9e:	|  |  |   move.l 100(sp),-(sp)
    9ba2:	|  |  |   move.l 100(sp),-(sp)
    9ba6:	|  |  |   jsr 178e2 <__ltdf2>
    9bac:	|  |  |   lea 16(sp),sp
    9bb0:	|  |  |   tst.l d0
    9bb2:	|  |  +-- bge.w 9c6a <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9bb6:	|  |  |   move.l 124(sp),-(sp)
    9bba:	|  |  |   jsr 176ca <__floatsidf>
    9bc0:	|  |  |   addq.l #4,sp
    9bc2:	|  |  |   move.l d0,d2
    9bc4:	|  |  |   move.l d1,d3
    9bc6:	|  |  |   move.l 100(sp),-(sp)
    9bca:	|  |  |   jsr 176ca <__floatsidf>
    9bd0:	|  |  |   addq.l #4,sp
    9bd2:	|  |  |   move.l 92(sp),-(sp)
    9bd6:	|  |  |   move.l 92(sp),-(sp)
    9bda:	|  |  |   move.l d1,-(sp)
    9bdc:	|  |  |   move.l d0,-(sp)
    9bde:	|  |  |   jsr 1775a <__muldf3>
    9be4:	|  |  |   lea 16(sp),sp
    9be8:	|  |  |   move.l d1,-(sp)
    9bea:	|  |  |   move.l d0,-(sp)
    9bec:	|  |  |   move.l d3,-(sp)
    9bee:	|  |  |   move.l d2,-(sp)
    9bf0:	|  |  |   jsr 174fc <__adddf3>
    9bf6:	|  |  |   lea 16(sp),sp
    9bfa:	|  |  |   move.l d1,-(sp)
    9bfc:	|  |  |   move.l d0,-(sp)
    9bfe:	|  |  |   jsr 1766c <__fixdfsi>
    9c04:	|  |  |   addq.l #8,sp
    9c06:	|  |  |   movea.l 152(sp),a0
    9c0a:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9c0e:	|  |  |   move.l 120(sp),-(sp)
    9c12:	|  |  |   jsr 176ca <__floatsidf>
    9c18:	|  |  |   addq.l #4,sp
    9c1a:	|  |  |   move.l d0,d2
    9c1c:	|  |  |   move.l d1,d3
    9c1e:	|  |  |   move.l 96(sp),-(sp)
    9c22:	|  |  |   jsr 176ca <__floatsidf>
    9c28:	|  |  |   addq.l #4,sp
    9c2a:	|  |  |   move.l 92(sp),-(sp)
    9c2e:	|  |  |   move.l 92(sp),-(sp)
    9c32:	|  |  |   move.l d1,-(sp)
    9c34:	|  |  |   move.l d0,-(sp)
    9c36:	|  |  |   jsr 1775a <__muldf3>
    9c3c:	|  |  |   lea 16(sp),sp
    9c40:	|  |  |   move.l d1,-(sp)
    9c42:	|  |  |   move.l d0,-(sp)
    9c44:	|  |  |   move.l d3,-(sp)
    9c46:	|  |  |   move.l d2,-(sp)
    9c48:	|  |  |   jsr 174fc <__adddf3>
    9c4e:	|  |  |   lea 16(sp),sp
    9c52:	|  |  |   move.l d1,-(sp)
    9c54:	|  |  |   move.l d0,-(sp)
    9c56:	|  |  |   jsr 1766c <__fixdfsi>
    9c5c:	|  |  |   addq.l #8,sp
    9c5e:	|  |  |   movea.l 152(sp),a0
    9c62:	|  |  |   move.l d0,52(a0)
    9c66:	|  +--|-- bra.w 9ec2 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9c6a:	|  |  '-> move.l 140(sp),d0
    9c6e:	|  |      sub.l 124(sp),d0
    9c72:	|  |      move.l d0,84(sp)
    9c76:	|  |      move.l 140(sp),d0
    9c7a:	|  |      sub.l 116(sp),d0
    9c7e:	|  |      move.l d0,80(sp)
    9c82:	|  |      move.l 132(sp),d0
    9c86:	|  |      sub.l 124(sp),d0
    9c8a:	|  |      move.l d0,76(sp)
    9c8e:	|  |      move.l 132(sp),d0
    9c92:	|  |      sub.l 116(sp),d0
    9c96:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9c9a:	|  |      move.l 136(sp),d0
    9c9e:	|  |      sub.l 120(sp),d0
    9ca2:	|  |      move.l d0,68(sp)
    9ca6:	|  |      move.l 136(sp),d0
    9caa:	|  |      sub.l 112(sp),d0
    9cae:	|  |      move.l d0,64(sp)
    9cb2:	|  |      move.l 128(sp),d0
    9cb6:	|  |      sub.l 120(sp),d0
    9cba:	|  |      move.l d0,60(sp)
    9cbe:	|  |      move.l 128(sp),d0
    9cc2:	|  |      sub.l 112(sp),d0
    9cc6:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9cca:	|  |      move.l 84(sp),-(sp)
    9cce:	|  |      move.l 88(sp),-(sp)
    9cd2:	|  |      jsr 17c64 <__mulsi3>
    9cd8:	|  |      addq.l #8,sp
    9cda:	|  |      move.l d0,84(sp)
    9cde:	|  |      move.l 80(sp),-(sp)
    9ce2:	|  |      move.l 84(sp),-(sp)
    9ce6:	|  |      jsr 17c64 <__mulsi3>
    9cec:	|  |      addq.l #8,sp
    9cee:	|  |      move.l d0,80(sp)
    9cf2:	|  |      move.l 76(sp),-(sp)
    9cf6:	|  |      move.l 80(sp),-(sp)
    9cfa:	|  |      jsr 17c64 <__mulsi3>
    9d00:	|  |      addq.l #8,sp
    9d02:	|  |      move.l d0,76(sp)
    9d06:	|  |      move.l 72(sp),-(sp)
    9d0a:	|  |      move.l 76(sp),-(sp)
    9d0e:	|  |      jsr 17c64 <__mulsi3>
    9d14:	|  |      addq.l #8,sp
    9d16:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9d1a:	|  |      move.l 68(sp),-(sp)
    9d1e:	|  |      move.l 72(sp),-(sp)
    9d22:	|  |      jsr 17c64 <__mulsi3>
    9d28:	|  |      addq.l #8,sp
    9d2a:	|  |      move.l d0,68(sp)
    9d2e:	|  |      move.l 64(sp),-(sp)
    9d32:	|  |      move.l 68(sp),-(sp)
    9d36:	|  |      jsr 17c64 <__mulsi3>
    9d3c:	|  |      addq.l #8,sp
    9d3e:	|  |      move.l d0,64(sp)
    9d42:	|  |      move.l 60(sp),-(sp)
    9d46:	|  |      move.l 64(sp),-(sp)
    9d4a:	|  |      jsr 17c64 <__mulsi3>
    9d50:	|  |      addq.l #8,sp
    9d52:	|  |      move.l d0,60(sp)
    9d56:	|  |      move.l 56(sp),-(sp)
    9d5a:	|  |      move.l 60(sp),-(sp)
    9d5e:	|  |      jsr 17c64 <__mulsi3>
    9d64:	|  |      addq.l #8,sp
    9d66:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9d6a:	|  |      move.l 84(sp),-(sp)
    9d6e:	|  |      jsr 176ca <__floatsidf>
    9d74:	|  |      addq.l #4,sp
    9d76:	|  |      move.l d0,d2
    9d78:	|  |      move.l d1,d3
    9d7a:	|  |      move.l 68(sp),-(sp)
    9d7e:	|  |      jsr 176ca <__floatsidf>
    9d84:	|  |      addq.l #4,sp
    9d86:	|  |      move.l d1,-(sp)
    9d88:	|  |      move.l d0,-(sp)
    9d8a:	|  |      move.l d3,-(sp)
    9d8c:	|  |      move.l d2,-(sp)
    9d8e:	|  |      jsr 174fc <__adddf3>
    9d94:	|  |      lea 16(sp),sp
    9d98:	|  |      move.l d1,-(sp)
    9d9a:	|  |      move.l d0,-(sp)
    9d9c:	|  |      jsr 17c1a <sqrt>
    9da2:	|  |      addq.l #8,sp
    9da4:	|  |      move.l d0,d2
    9da6:	|  |      move.l d1,d3
    9da8:	|  |      move.l 76(sp),-(sp)
    9dac:	|  |      jsr 176ca <__floatsidf>
    9db2:	|  |      addq.l #4,sp
    9db4:	|  |      move.l d0,d4
    9db6:	|  |      move.l d1,d5
    9db8:	|  |      move.l 60(sp),-(sp)
    9dbc:	|  |      jsr 176ca <__floatsidf>
    9dc2:	|  |      addq.l #4,sp
    9dc4:	|  |      move.l d1,-(sp)
    9dc6:	|  |      move.l d0,-(sp)
    9dc8:	|  |      move.l d5,-(sp)
    9dca:	|  |      move.l d4,-(sp)
    9dcc:	|  |      jsr 174fc <__adddf3>
    9dd2:	|  |      lea 16(sp),sp
    9dd6:	|  |      move.l d1,-(sp)
    9dd8:	|  |      move.l d0,-(sp)
    9dda:	|  |      jsr 17c1a <sqrt>
    9de0:	|  |      addq.l #8,sp
    9de2:	|  |      move.l d1,-(sp)
    9de4:	|  |      move.l d0,-(sp)
    9de6:	|  |      move.l d3,-(sp)
    9de8:	|  |      move.l d2,-(sp)
    9dea:	|  |      jsr 174fc <__adddf3>
    9df0:	|  |      lea 16(sp),sp
    9df4:	|  |      move.l d0,d2
    9df6:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9df8:	|  |      move.l 80(sp),-(sp)
    9dfc:	|  |      jsr 176ca <__floatsidf>
    9e02:	|  |      addq.l #4,sp
    9e04:	|  |      move.l d0,d4
    9e06:	|  |      move.l d1,d5
    9e08:	|  |      move.l 64(sp),-(sp)
    9e0c:	|  |      jsr 176ca <__floatsidf>
    9e12:	|  |      addq.l #4,sp
    9e14:	|  |      move.l d1,-(sp)
    9e16:	|  |      move.l d0,-(sp)
    9e18:	|  |      move.l d5,-(sp)
    9e1a:	|  |      move.l d4,-(sp)
    9e1c:	|  |      jsr 174fc <__adddf3>
    9e22:	|  |      lea 16(sp),sp
    9e26:	|  |      move.l d1,-(sp)
    9e28:	|  |      move.l d0,-(sp)
    9e2a:	|  |      jsr 17c1a <sqrt>
    9e30:	|  |      addq.l #8,sp
    9e32:	|  |      move.l d0,d4
    9e34:	|  |      move.l d1,d5
    9e36:	|  |      move.l 72(sp),-(sp)
    9e3a:	|  |      jsr 176ca <__floatsidf>
    9e40:	|  |      addq.l #4,sp
    9e42:	|  |      move.l d0,d6
    9e44:	|  |      move.l d1,d7
    9e46:	|  |      move.l 56(sp),-(sp)
    9e4a:	|  |      jsr 176ca <__floatsidf>
    9e50:	|  |      addq.l #4,sp
    9e52:	|  |      move.l d1,-(sp)
    9e54:	|  |      move.l d0,-(sp)
    9e56:	|  |      move.l d7,-(sp)
    9e58:	|  |      move.l d6,-(sp)
    9e5a:	|  |      jsr 174fc <__adddf3>
    9e60:	|  |      lea 16(sp),sp
    9e64:	|  |      move.l d1,-(sp)
    9e66:	|  |      move.l d0,-(sp)
    9e68:	|  |      jsr 17c1a <sqrt>
    9e6e:	|  |      addq.l #8,sp
    9e70:	|  |      move.l d1,-(sp)
    9e72:	|  |      move.l d0,-(sp)
    9e74:	|  |      move.l d5,-(sp)
    9e76:	|  |      move.l d4,-(sp)
    9e78:	|  |      jsr 174fc <__adddf3>
    9e7e:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9e82:	|  |      move.l d1,-(sp)
    9e84:	|  |      move.l d0,-(sp)
    9e86:	|  |      move.l d3,-(sp)
    9e88:	|  |      move.l d2,-(sp)
    9e8a:	|  |      jsr 178e2 <__ltdf2>
    9e90:	|  |      lea 16(sp),sp
    9e94:	|  |      tst.l d0
    9e96:	|  |  ,-- bge.s 9eae <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9e98:	|  |  |   movea.l 152(sp),a0
    9e9c:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9ea2:	|  |  |   movea.l 152(sp),a0
    9ea6:	|  |  |   move.l 120(sp),52(a0)
    9eac:	|  +--|-- bra.s 9ec2 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9eae:	|  |  '-> movea.l 152(sp),a0
    9eb2:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9eb8:	|  |      movea.l 152(sp),a0
    9ebc:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9ec2:	|  '----> movea.l 152(sp),a0
    9ec6:	|         move.l 52(a0),d0
    9eca:	|         move.l d0,-(sp)
    9ecc:	|         jsr 1770a <__floatsisf>
    9ed2:	|         addq.l #4,sp
    9ed4:	|         move.l d0,d1
    9ed6:	|         movea.l 152(sp),a0
    9eda:	|         move.l 4(a0),d0
    9ede:	|         move.l d0,-(sp)
    9ee0:	|         move.l d1,-(sp)
    9ee2:	|         jsr 179fe <__subsf3>
    9ee8:	|         addq.l #8,sp
    9eea:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9eee:	|         movea.l 152(sp),a0
    9ef2:	|         move.l (a0),d2
    9ef4:	|         movea.l 152(sp),a0
    9ef8:	|         move.l 48(a0),d0
    9efc:	|         move.l d0,-(sp)
    9efe:	|         jsr 1770a <__floatsisf>
    9f04:	|         addq.l #4,sp
    9f06:	|         move.l d0,-(sp)
    9f08:	|         move.l d2,-(sp)
    9f0a:	|         jsr 179fe <__subsf3>
    9f10:	|         addq.l #8,sp
    9f12:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9f16:	|         clr.l -(sp)
    9f18:	|         move.l 52(sp),-(sp)
    9f1c:	|         jsr 17966 <__nesf2>
    9f22:	|         addq.l #8,sp
    9f24:	|         tst.l d0
    9f26:	|     ,-- bne.s 9f3a <doBorderStuff+0x628>
    9f28:	|     |   clr.l -(sp)
    9f2a:	|     |   move.l 56(sp),-(sp)
    9f2e:	|     |   jsr 17966 <__nesf2>
    9f34:	|     |   addq.l #8,sp
    9f36:	|     |   tst.l d0
    9f38:	|  ,--|-- beq.s 9fb0 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9f3a:	|  |  '-> move.l 52(sp),d0
    9f3e:	|  |      move.l d0,-(sp)
    9f40:	|  |      move.l d0,-(sp)
    9f42:	|  |      jsr 174c6 <__addsf3>
    9f48:	|  |      addq.l #8,sp
    9f4a:	|  |      move.l d0,-(sp)
    9f4c:	|  |      move.l 52(sp),-(sp)
    9f50:	|  |      jsr 17a6a <atan2f>
    9f56:	|  |      addq.l #8,sp
    9f58:	|  |      move.l d0,-(sp)
    9f5a:	|  |      jsr 1762c <__extendsfdf2>
    9f60:	|  |      addq.l #4,sp
    9f62:	|  |      move.l #-1540411785,-(sp)
    9f68:	|  |      move.l #1078765033,-(sp)
    9f6e:	|  |      move.l d1,-(sp)
    9f70:	|  |      move.l d0,-(sp)
    9f72:	|  |      jsr 1775a <__muldf3>
    9f78:	|  |      lea 16(sp),sp
    9f7c:	|  |      clr.l -(sp)
    9f7e:	|  |      move.l #1080459264,-(sp)
    9f84:	|  |      move.l d1,-(sp)
    9f86:	|  |      move.l d0,-(sp)
    9f88:	|  |      jsr 174fc <__adddf3>
    9f8e:	|  |      lea 16(sp),sp
    9f92:	|  |      move.l d1,-(sp)
    9f94:	|  |      move.l d0,-(sp)
    9f96:	|  |      jsr 1766c <__fixdfsi>
    9f9c:	|  |      addq.l #8,sp
    9f9e:	|  |      movea.l 152(sp),a0
    9fa2:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9fa6:	|  |      movea.l 152(sp),a0
    9faa:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    9fb0:	|  '----> pea 1 <_start+0x1>
    9fb4:	|         move.l 156(sp),-(sp)
    9fb8:	|         jsr 414c <setFrames>
    9fbe:	|         addq.l #8,sp
    return TRUE;
    9fc0:	|         moveq #1,d0
}
    9fc2:	'-------> movem.l (sp)+,d2-d7
    9fc6:	          lea 124(sp),sp
    9fca:	          rts

00009fcc <drawPeople>:

void drawPeople () {
    9fcc:	                   lea -24(sp),sp
    9fd0:	                   move.l d2,-(sp)

	shufflePeople ();
    9fd2:	                   jsr baca <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    9fd8:	                   move.l 1cb86 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    9fe0:	                   clr.l 20(sp)
	overRegion = NULL;
    9fe4:	                   clr.l 1cc36 <overRegion>

	while (thisPerson) {
    9fea:	   ,-------------- bra.w a59c <drawPeople+0x5d0>
		if (thisPerson -> show) {
    9fee:	,--|-------------> movea.l 24(sp),a0
    9ff2:	|  |               move.w 104(a0),d0
    9ff6:	|  |  ,----------- beq.w a350 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    9ffa:	|  |  |            movea.l 24(sp),a0
    9ffe:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a004:	|  |  |            movea.l 24(sp),a0
    a008:	|  |  |            move.l 76(a0),d0
    a00c:	|  |  |            cmp.l 20(sp),d0
    a010:	|  |  |  ,-------- beq.w a1de <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a014:	|  |  |  |         movea.l 24(sp),a0
    a018:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a01c:	|  |  |  |         movea.l 24(sp),a0
    a020:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a026:	|  |  |  |         movea.l 24(sp),a0
    a02a:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a02e:	|  |  |  |         movea.l 20(sp),a0
    a032:	|  |  |  |         movea.l 4(a0),a0
    a036:	|  |  |  |         move.l 4(a0),d0
    a03a:	|  |  |  |         movea.l 24(sp),a0
    a03e:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a042:	|  |  |  |         movea.l 20(sp),a0
    a046:	|  |  |  |         movea.l 4(a0),a1
    a04a:	|  |  |  |         movea.l 24(sp),a0
    a04e:	|  |  |  |         move.l 84(a0),d0
    a052:	|  |  |  |         move.l d0,d1
    a054:	|  |  |  |         move.l d1,d0
    a056:	|  |  |  |         add.l d0,d0
    a058:	|  |  |  |         add.l d1,d0
    a05a:	|  |  |  |         add.l d0,d0
    a05c:	|  |  |  |         add.l d0,d0
    a05e:	|  |  |  |         lea (0,a1,d0.l),a0
    a062:	|  |  |  |         move.l 8(a0),d0
    a066:	|  |  |  |     ,-- ble.w a108 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a06a:	|  |  |  |     |   movea.l 20(sp),a0
    a06e:	|  |  |  |     |   movea.l 4(a0),a1
    a072:	|  |  |  |     |   movea.l 24(sp),a0
    a076:	|  |  |  |     |   move.l 84(a0),d0
    a07a:	|  |  |  |     |   move.l d0,d1
    a07c:	|  |  |  |     |   move.l d1,d0
    a07e:	|  |  |  |     |   add.l d0,d0
    a080:	|  |  |  |     |   add.l d1,d0
    a082:	|  |  |  |     |   add.l d0,d0
    a084:	|  |  |  |     |   add.l d0,d0
    a086:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a08a:	|  |  |  |     |   move.l 8(a0),d0
    a08e:	|  |  |  |     |   clr.l -(sp)
    a090:	|  |  |  |     |   move.l d0,-(sp)
    a092:	|  |  |  |     |   jsr d1de <startSound>
    a098:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a09a:	|  |  |  |     |   movea.l 24(sp),a0
    a09e:	|  |  |  |     |   move.l 84(a0),d0
    a0a2:	|  |  |  |     |   addq.l #1,d0
    a0a4:	|  |  |  |     |   movea.l 24(sp),a0
    a0a8:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a0ac:	|  |  |  |     |   movea.l 24(sp),a0
    a0b0:	|  |  |  |     |   move.l 84(a0),d0
    a0b4:	|  |  |  |     |   movea.l 24(sp),a0
    a0b8:	|  |  |  |     |   movea.l 72(a0),a0
    a0bc:	|  |  |  |     |   move.l 8(a0),d1
    a0c0:	|  |  |  |     |   move.l d1,-(sp)
    a0c2:	|  |  |  |     |   move.l d0,-(sp)
    a0c4:	|  |  |  |     |   jsr 17d10 <__modsi3>
    a0ca:	|  |  |  |     |   addq.l #8,sp
    a0cc:	|  |  |  |     |   movea.l 24(sp),a0
    a0d0:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a0d4:	|  |  |  |     |   movea.l 24(sp),a0
    a0d8:	|  |  |  |     |   movea.l 72(a0),a0
    a0dc:	|  |  |  |     |   movea.l 4(a0),a1
    a0e0:	|  |  |  |     |   movea.l 24(sp),a0
    a0e4:	|  |  |  |     |   move.l 84(a0),d0
    a0e8:	|  |  |  |     |   move.l d0,d1
    a0ea:	|  |  |  |     |   move.l d1,d0
    a0ec:	|  |  |  |     |   add.l d0,d0
    a0ee:	|  |  |  |     |   add.l d1,d0
    a0f0:	|  |  |  |     |   add.l d0,d0
    a0f2:	|  |  |  |     |   add.l d0,d0
    a0f4:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a0f8:	|  |  |  |     |   move.l 4(a0),d0
    a0fc:	|  |  |  |     |   movea.l 24(sp),a0
    a100:	|  |  |  |     |   move.l d0,88(a0)
    a104:	|  |  |  |  ,--|-- bra.w a246 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a108:	|  |  |  |  |  '-> movea.l 20(sp),a0
    a10c:	|  |  |  |  |      movea.l 4(a0),a1
    a110:	|  |  |  |  |      movea.l 24(sp),a0
    a114:	|  |  |  |  |      move.l 84(a0),d0
    a118:	|  |  |  |  |      move.l d0,d1
    a11a:	|  |  |  |  |      move.l d1,d0
    a11c:	|  |  |  |  |      add.l d0,d0
    a11e:	|  |  |  |  |      add.l d1,d0
    a120:	|  |  |  |  |      add.l d0,d0
    a122:	|  |  |  |  |      add.l d0,d0
    a124:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a128:	|  |  |  |  |      move.l 8(a0),d0
    a12c:	|  |  |  |  +----- beq.w a246 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a130:	|  |  |  |  |      movea.l 1caf6 <noStack>,a1
    a136:	|  |  |  |  |      movea.l 20(sp),a0
    a13a:	|  |  |  |  |      move.l 4(a0),d2
    a13e:	|  |  |  |  |      movea.l 24(sp),a0
    a142:	|  |  |  |  |      move.l 84(a0),d0
    a146:	|  |  |  |  |      move.l d0,d1
    a148:	|  |  |  |  |      move.l d1,d0
    a14a:	|  |  |  |  |      add.l d0,d0
    a14c:	|  |  |  |  |      add.l d1,d0
    a14e:	|  |  |  |  |      add.l d0,d0
    a150:	|  |  |  |  |      add.l d0,d0
    a152:	|  |  |  |  |      movea.l d2,a0
    a154:	|  |  |  |  |      adda.l d0,a0
    a156:	|  |  |  |  |      move.l 8(a0),d0
    a15a:	|  |  |  |  |      neg.l d0
    a15c:	|  |  |  |  |      pea 1 <_start+0x1>
    a160:	|  |  |  |  |      move.l a1,-(sp)
    a162:	|  |  |  |  |      clr.l -(sp)
    a164:	|  |  |  |  |      clr.l -(sp)
    a166:	|  |  |  |  |      move.l d0,-(sp)
    a168:	|  |  |  |  |      jsr 7478 <startNewFunctionNum>
    a16e:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a172:	|  |  |  |  |      movea.l 24(sp),a0
    a176:	|  |  |  |  |      move.l 84(a0),d0
    a17a:	|  |  |  |  |      addq.l #1,d0
    a17c:	|  |  |  |  |      movea.l 24(sp),a0
    a180:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a184:	|  |  |  |  |      movea.l 24(sp),a0
    a188:	|  |  |  |  |      move.l 84(a0),d0
    a18c:	|  |  |  |  |      movea.l 24(sp),a0
    a190:	|  |  |  |  |      movea.l 72(a0),a0
    a194:	|  |  |  |  |      move.l 8(a0),d1
    a198:	|  |  |  |  |      move.l d1,-(sp)
    a19a:	|  |  |  |  |      move.l d0,-(sp)
    a19c:	|  |  |  |  |      jsr 17d10 <__modsi3>
    a1a2:	|  |  |  |  |      addq.l #8,sp
    a1a4:	|  |  |  |  |      movea.l 24(sp),a0
    a1a8:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a1ac:	|  |  |  |  |      movea.l 24(sp),a0
    a1b0:	|  |  |  |  |      movea.l 72(a0),a0
    a1b4:	|  |  |  |  |      movea.l 4(a0),a1
    a1b8:	|  |  |  |  |      movea.l 24(sp),a0
    a1bc:	|  |  |  |  |      move.l 84(a0),d0
    a1c0:	|  |  |  |  |      move.l d0,d1
    a1c2:	|  |  |  |  |      move.l d1,d0
    a1c4:	|  |  |  |  |      add.l d0,d0
    a1c6:	|  |  |  |  |      add.l d1,d0
    a1c8:	|  |  |  |  |      add.l d0,d0
    a1ca:	|  |  |  |  |      add.l d0,d0
    a1cc:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a1d0:	|  |  |  |  |      move.l 4(a0),d0
    a1d4:	|  |  |  |  |      movea.l 24(sp),a0
    a1d8:	|  |  |  |  |      move.l d0,88(a0)
    a1dc:	|  |  |  |  +----- bra.s a246 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a1de:	|  |  |  '--|----> movea.l 24(sp),a0
    a1e2:	|  |  |     |      move.l (a0),d0
    a1e4:	|  |  |     |      movea.l 24(sp),a0
    a1e8:	|  |  |     |      move.l 8(a0),d1
    a1ec:	|  |  |     |      move.l d1,-(sp)
    a1ee:	|  |  |     |      move.l d0,-(sp)
    a1f0:	|  |  |     |      jsr 175f6 <__eqsf2>
    a1f6:	|  |  |     |      addq.l #8,sp
    a1f8:	|  |  |     |      tst.l d0
    a1fa:	|  |  |     |  ,-- bne.s a23e <drawPeople+0x272>
    a1fc:	|  |  |     |  |   movea.l 24(sp),a0
    a200:	|  |  |     |  |   move.l 4(a0),d0
    a204:	|  |  |     |  |   movea.l 24(sp),a0
    a208:	|  |  |     |  |   move.l 12(a0),d1
    a20c:	|  |  |     |  |   move.l d1,-(sp)
    a20e:	|  |  |     |  |   move.l d0,-(sp)
    a210:	|  |  |     |  |   jsr 175f6 <__eqsf2>
    a216:	|  |  |     |  |   addq.l #8,sp
    a218:	|  |  |     |  |   tst.l d0
    a21a:	|  |  |     |  +-- bne.s a23e <drawPeople+0x272>
    a21c:	|  |  |     |  |   movea.l 20(sp),a0
    a220:	|  |  |     |  |   move.l 8(a0),d0
    a224:	|  |  |     |  |   moveq #1,d1
    a226:	|  |  |     |  |   cmp.l d0,d1
    a228:	|  |  |     |  +-- bne.s a23e <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a22a:	|  |  |     |  |   movea.l 24(sp),a0
    a22e:	|  |  |     |  |   move.l 16(a0),d0
    a232:	|  |  |     |  |   addq.l #1,d0
    a234:	|  |  |     |  |   movea.l 24(sp),a0
    a238:	|  |  |     |  |   move.l d0,16(a0)
    a23c:	|  |  |     +--|-- bra.s a246 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a23e:	|  |  |     |  '-> movea.l 24(sp),a0
    a242:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a246:	|  |  |     '----> movea.l 24(sp),a0
    a24a:	|  |  |            move.l (a0),d0
    a24c:	|  |  |            movea.l 24(sp),a0
    a250:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a254:	|  |  |            movea.l 24(sp),a0
    a258:	|  |  |            move.l 4(a0),d0
    a25c:	|  |  |            movea.l 24(sp),a0
    a260:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a264:	|  |  |            movea.l 20(sp),a0
    a268:	|  |  |            movea.l 4(a0),a1
    a26c:	|  |  |            movea.l 24(sp),a0
    a270:	|  |  |            move.l 84(a0),d0
    a274:	|  |  |            move.l d0,d1
    a276:	|  |  |            move.l d1,d0
    a278:	|  |  |            add.l d0,d0
    a27a:	|  |  |            add.l d1,d0
    a27c:	|  |  |            add.l d0,d0
    a27e:	|  |  |            add.l d0,d0
    a280:	|  |  |            lea (0,a1,d0.l),a0
    a284:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a288:	|  |  |            move.l 8(sp),d0
    a28c:	|  |  |            add.l d0,d0
    a28e:	|  |  |            subx.l d0,d0
    a290:	|  |  |            neg.l d0
    a292:	|  |  |            move.b d0,d0
    a294:	|  |  |            move.b d0,d0
    a296:	|  |  |            andi.l #255,d0
    a29c:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a2a0:	|  |  |            move.l 8(sp),-(sp)
    a2a4:	|  |  |            jsr 91a0 <TF_abs>
    a2aa:	|  |  |            addq.l #4,sp
    a2ac:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a2b0:	|  |  |            movea.l 20(sp),a0
    a2b4:	|  |  |            movea.l (a0),a0
    a2b6:	|  |  |            move.l 8(a0),d0
    a2ba:	|  |  |            cmp.l 12(sp),d0
    a2be:	|  |  |        ,-- bgt.s a2ce <drawPeople+0x302>
				fNum = 0;
    a2c0:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a2c4:	|  |  |        |   moveq #2,d0
    a2c6:	|  |  |        |   sub.l 16(sp),d0
    a2ca:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a2ce:	|  |  |        '-> moveq #2,d1
    a2d0:	|  |  |            cmp.l 16(sp),d1
    a2d4:	|  |  +----------- beq.s a350 <drawPeople+0x384>
				BOOL r = FALSE;
    a2d6:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a2da:	|  |  |            move.l 16(sp),d0
    a2de:	|  |  |            movea.w d0,a0
    a2e0:	|  |  |            movea.l 20(sp),a1
    a2e4:	|  |  |            movea.l (a1),a1
    a2e6:	|  |  |            movea.l 16(a1),a1
    a2ea:	|  |  |            move.l 12(sp),d1
    a2ee:	|  |  |            move.l d1,d0
    a2f0:	|  |  |            lsl.l #3,d0
    a2f2:	|  |  |            sub.l d1,d0
    a2f4:	|  |  |            add.l d0,d0
    a2f6:	|  |  |            add.l d0,d0
    a2f8:	|  |  |            add.l a1,d0
    a2fa:	|  |  |            move.l a0,-(sp)
    a2fc:	|  |  |            move.l 28(sp),-(sp)
    a300:	|  |  |            move.l d0,-(sp)
    a302:	|  |  |            jsr 8ec2 <scaleSprite>
    a308:	|  |  |            lea 12(sp),sp
    a30c:	|  |  |            move.w d0,6(sp)
				if (r) {
    a310:	|  |  +----------- beq.s a350 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a312:	|  |  |            movea.l 24(sp),a0
    a316:	|  |  |            movea.l 114(a0),a0
    a31a:	|  |  |            movea.l (a0),a0
    a31c:	|  |  |            move.b (a0),d0
    a31e:	|  |  +----------- beq.s a350 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a320:	|  |  |            move.l 1cba6 <personRegion+0x1c>,d1
    a326:	|  |  |            movea.l 24(sp),a0
    a32a:	|  |  |            move.l 114(a0),d0
    a32e:	|  |  |            cmp.l d1,d0
    a330:	|  |  |        ,-- beq.s a338 <drawPeople+0x36c>
    a332:	|  |  |        |   clr.l 1caee <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a338:	|  |  |        '-> movea.l 24(sp),a0
    a33c:	|  |  |            move.l 114(a0),d0
    a340:	|  |  |            move.l d0,1cba6 <personRegion+0x1c>
						overRegion = & personRegion;
    a346:	|  |  |            move.l #117642,1cc36 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a350:	|  |  '----------> movea.l 24(sp),a0
    a354:	|  |               move.l 88(a0),d0
    a358:	|  |               subq.l #1,d0
    a35a:	|  |               movea.l 24(sp),a0
    a35e:	|  |               move.l d0,88(a0)
    a362:	|  |               movea.l 24(sp),a0
    a366:	|  |               move.l 88(a0),d0
    a36a:	|  |        ,----- bne.w a592 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a36e:	|  |        |      movea.l 24(sp),a0
    a372:	|  |        |      move.l 84(a0),d0
    a376:	|  |        |      addq.l #1,d0
    a378:	|  |        |      movea.l 24(sp),a0
    a37c:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a380:	|  |        |      movea.l 24(sp),a0
    a384:	|  |        |      move.l 84(a0),d0
    a388:	|  |        |      movea.l 24(sp),a0
    a38c:	|  |        |      movea.l 72(a0),a0
    a390:	|  |        |      move.l 8(a0),d1
    a394:	|  |        |      move.l d1,-(sp)
    a396:	|  |        |      move.l d0,-(sp)
    a398:	|  |        |      jsr 17d10 <__modsi3>
    a39e:	|  |        |      addq.l #8,sp
    a3a0:	|  |        |      movea.l 24(sp),a0
    a3a4:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a3a8:	|  |        |      movea.l 24(sp),a0
    a3ac:	|  |        |      movea.l 72(a0),a0
    a3b0:	|  |        |      movea.l 4(a0),a1
    a3b4:	|  |        |      movea.l 24(sp),a0
    a3b8:	|  |        |      move.l 84(a0),d0
    a3bc:	|  |        |      move.l d0,d1
    a3be:	|  |        |      move.l d1,d0
    a3c0:	|  |        |      add.l d0,d0
    a3c2:	|  |        |      add.l d1,d0
    a3c4:	|  |        |      add.l d0,d0
    a3c6:	|  |        |      add.l d0,d0
    a3c8:	|  |        |      lea (0,a1,d0.l),a0
    a3cc:	|  |        |      move.l 4(a0),d0
    a3d0:	|  |        |      movea.l 24(sp),a0
    a3d4:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a3d8:	|  |        |      movea.l 24(sp),a0
    a3dc:	|  |        |      move.w 104(a0),d0
    a3e0:	|  |        +----- beq.w a592 <drawPeople+0x5c6>
    a3e4:	|  |        |      tst.l 20(sp)
    a3e8:	|  |        +----- beq.w a592 <drawPeople+0x5c6>
    a3ec:	|  |        |      movea.l 20(sp),a0
    a3f0:	|  |        |      move.l 4(a0),d0
    a3f4:	|  |        +----- beq.w a592 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a3f8:	|  |        |      movea.l 20(sp),a0
    a3fc:	|  |        |      movea.l 4(a0),a1
    a400:	|  |        |      movea.l 24(sp),a0
    a404:	|  |        |      move.l 84(a0),d0
    a408:	|  |        |      move.l d0,d1
    a40a:	|  |        |      move.l d1,d0
    a40c:	|  |        |      add.l d0,d0
    a40e:	|  |        |      add.l d1,d0
    a410:	|  |        |      add.l d0,d0
    a412:	|  |        |      add.l d0,d0
    a414:	|  |        |      lea (0,a1,d0.l),a0
    a418:	|  |        |      move.l 8(a0),d0
    a41c:	|  |        |  ,-- ble.w a4be <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a420:	|  |        |  |   movea.l 20(sp),a0
    a424:	|  |        |  |   movea.l 4(a0),a1
    a428:	|  |        |  |   movea.l 24(sp),a0
    a42c:	|  |        |  |   move.l 84(a0),d0
    a430:	|  |        |  |   move.l d0,d1
    a432:	|  |        |  |   move.l d1,d0
    a434:	|  |        |  |   add.l d0,d0
    a436:	|  |        |  |   add.l d1,d0
    a438:	|  |        |  |   add.l d0,d0
    a43a:	|  |        |  |   add.l d0,d0
    a43c:	|  |        |  |   lea (0,a1,d0.l),a0
    a440:	|  |        |  |   move.l 8(a0),d0
    a444:	|  |        |  |   clr.l -(sp)
    a446:	|  |        |  |   move.l d0,-(sp)
    a448:	|  |        |  |   jsr d1de <startSound>
    a44e:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a450:	|  |        |  |   movea.l 24(sp),a0
    a454:	|  |        |  |   move.l 84(a0),d0
    a458:	|  |        |  |   addq.l #1,d0
    a45a:	|  |        |  |   movea.l 24(sp),a0
    a45e:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a462:	|  |        |  |   movea.l 24(sp),a0
    a466:	|  |        |  |   move.l 84(a0),d0
    a46a:	|  |        |  |   movea.l 24(sp),a0
    a46e:	|  |        |  |   movea.l 72(a0),a0
    a472:	|  |        |  |   move.l 8(a0),d1
    a476:	|  |        |  |   move.l d1,-(sp)
    a478:	|  |        |  |   move.l d0,-(sp)
    a47a:	|  |        |  |   jsr 17d10 <__modsi3>
    a480:	|  |        |  |   addq.l #8,sp
    a482:	|  |        |  |   movea.l 24(sp),a0
    a486:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a48a:	|  |        |  |   movea.l 24(sp),a0
    a48e:	|  |        |  |   movea.l 72(a0),a0
    a492:	|  |        |  |   movea.l 4(a0),a1
    a496:	|  |        |  |   movea.l 24(sp),a0
    a49a:	|  |        |  |   move.l 84(a0),d0
    a49e:	|  |        |  |   move.l d0,d1
    a4a0:	|  |        |  |   move.l d1,d0
    a4a2:	|  |        |  |   add.l d0,d0
    a4a4:	|  |        |  |   add.l d1,d0
    a4a6:	|  |        |  |   add.l d0,d0
    a4a8:	|  |        |  |   add.l d0,d0
    a4aa:	|  |        |  |   lea (0,a1,d0.l),a0
    a4ae:	|  |        |  |   move.l 4(a0),d0
    a4b2:	|  |        |  |   movea.l 24(sp),a0
    a4b6:	|  |        |  |   move.l d0,88(a0)
    a4ba:	|  |        +--|-- bra.w a592 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a4be:	|  |        |  '-> movea.l 20(sp),a0
    a4c2:	|  |        |      movea.l 4(a0),a1
    a4c6:	|  |        |      movea.l 24(sp),a0
    a4ca:	|  |        |      move.l 84(a0),d0
    a4ce:	|  |        |      move.l d0,d1
    a4d0:	|  |        |      move.l d1,d0
    a4d2:	|  |        |      add.l d0,d0
    a4d4:	|  |        |      add.l d1,d0
    a4d6:	|  |        |      add.l d0,d0
    a4d8:	|  |        |      add.l d0,d0
    a4da:	|  |        |      lea (0,a1,d0.l),a0
    a4de:	|  |        |      move.l 8(a0),d0
    a4e2:	|  |        +----- beq.w a592 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a4e6:	|  |        |      movea.l 1caf6 <noStack>,a1
    a4ec:	|  |        |      movea.l 20(sp),a0
    a4f0:	|  |        |      move.l 4(a0),d2
    a4f4:	|  |        |      movea.l 24(sp),a0
    a4f8:	|  |        |      move.l 84(a0),d0
    a4fc:	|  |        |      move.l d0,d1
    a4fe:	|  |        |      move.l d1,d0
    a500:	|  |        |      add.l d0,d0
    a502:	|  |        |      add.l d1,d0
    a504:	|  |        |      add.l d0,d0
    a506:	|  |        |      add.l d0,d0
    a508:	|  |        |      movea.l d2,a0
    a50a:	|  |        |      adda.l d0,a0
    a50c:	|  |        |      move.l 8(a0),d0
    a510:	|  |        |      neg.l d0
    a512:	|  |        |      pea 1 <_start+0x1>
    a516:	|  |        |      move.l a1,-(sp)
    a518:	|  |        |      clr.l -(sp)
    a51a:	|  |        |      clr.l -(sp)
    a51c:	|  |        |      move.l d0,-(sp)
    a51e:	|  |        |      jsr 7478 <startNewFunctionNum>
    a524:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a528:	|  |        |      movea.l 24(sp),a0
    a52c:	|  |        |      move.l 84(a0),d0
    a530:	|  |        |      addq.l #1,d0
    a532:	|  |        |      movea.l 24(sp),a0
    a536:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a53a:	|  |        |      movea.l 24(sp),a0
    a53e:	|  |        |      move.l 84(a0),d0
    a542:	|  |        |      movea.l 24(sp),a0
    a546:	|  |        |      movea.l 72(a0),a0
    a54a:	|  |        |      move.l 8(a0),d1
    a54e:	|  |        |      move.l d1,-(sp)
    a550:	|  |        |      move.l d0,-(sp)
    a552:	|  |        |      jsr 17d10 <__modsi3>
    a558:	|  |        |      addq.l #8,sp
    a55a:	|  |        |      movea.l 24(sp),a0
    a55e:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a562:	|  |        |      movea.l 24(sp),a0
    a566:	|  |        |      movea.l 72(a0),a0
    a56a:	|  |        |      movea.l 4(a0),a1
    a56e:	|  |        |      movea.l 24(sp),a0
    a572:	|  |        |      move.l 84(a0),d0
    a576:	|  |        |      move.l d0,d1
    a578:	|  |        |      move.l d1,d0
    a57a:	|  |        |      add.l d0,d0
    a57c:	|  |        |      add.l d1,d0
    a57e:	|  |        |      add.l d0,d0
    a580:	|  |        |      add.l d0,d0
    a582:	|  |        |      lea (0,a1,d0.l),a0
    a586:	|  |        |      move.l 4(a0),d0
    a58a:	|  |        |      movea.l 24(sp),a0
    a58e:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a592:	|  |        '----> movea.l 24(sp),a0
    a596:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a59c:	|  '-------------> tst.l 24(sp)
    a5a0:	'----------------- bne.w 9fee <drawPeople+0x22>
	}
}
    a5a4:	                   nop
    a5a6:	                   nop
    a5a8:	                   move.l (sp)+,d2
    a5aa:	                   lea 24(sp),sp
    a5ae:	                   rts

0000a5b0 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a5b0:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    a5b2:	          pea 192a6 <PutChar+0x152c>
    a5b8:	          jsr 172d8 <KPrintF>
    a5be:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a5c0:	          move.l 1cb86 <allPeople>,(sp)
	while (thisPerson) {
    a5c6:	      ,-- bra.s a5de <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    a5c8:	,-----|-> movea.l (sp),a0
    a5ca:	|     |   movea.l 114(a0),a0
    a5ce:	|     |   move.l 4(a0),d0
    a5d2:	|     |   cmp.l 8(sp),d0
    a5d6:	|  ,--|-- beq.s a5e4 <findPerson+0x34>
		thisPerson = thisPerson -> next;
    a5d8:	|  |  |   movea.l (sp),a0
    a5da:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a5de:	|  |  '-> tst.l (sp)
    a5e0:	'--|----- bne.s a5c8 <findPerson+0x18>
    a5e2:	   |  ,-- bra.s a5e6 <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    a5e4:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    a5e6:	      '-> pea 192ba <PutChar+0x1540>
    a5ec:	          jsr 172d8 <KPrintF>
    a5f2:	          addq.l #4,sp
	return thisPerson;
    a5f4:	          move.l (sp),d0
}
    a5f6:	          addq.l #4,sp
    a5f8:	          rts

0000a5fa <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a5fa:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a5fc:	       move.l 12(sp),-(sp)
    a600:	       jsr a5b0 <findPerson>
    a606:	       addq.l #4,sp
    a608:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a60a:	   ,-- bne.s a610 <floatCharacter+0x16>
    a60c:	   |   clr.w d0
    a60e:	,--|-- bra.s a61a <floatCharacter+0x20>
	moveMe -> floaty = f;
    a610:	|  '-> movea.l (sp),a0
    a612:	|      move.l 8(sp),24(a0)
	return TRUE;
    a618:	|      moveq #1,d0
}
    a61a:	'----> addq.l #4,sp
    a61c:	       rts

0000a61e <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a61e:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a620:	          tst.l 8(sp)
    a624:	      ,-- bne.s a632 <forceWalkingPerson+0x14>
    a626:	      |   tst.l 12(sp)
    a62a:	      +-- bne.s a632 <forceWalkingPerson+0x14>
    a62c:	      |   clr.w d0
    a62e:	,-----|-- bra.w a6c4 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a632:	|     '-> move.l 16(sp),-(sp)
    a636:	|         jsr a5b0 <findPerson>
    a63c:	|         addq.l #4,sp
    a63e:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a640:	|     ,-- bne.s a646 <forceWalkingPerson+0x28>
    a642:	|     |   clr.w d0
    a644:	+-----|-- bra.s a6c4 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a646:	|     '-> movea.l (sp),a0
    a648:	|         move.l 68(a0),d0
    a64c:	|     ,-- beq.s a65e <forceWalkingPerson+0x40>
    a64e:	|     |   movea.l (sp),a0
    a650:	|     |   move.l 68(a0),d0
    a654:	|     |   move.l d0,-(sp)
    a656:	|     |   jsr 4faa <abortFunction>
    a65c:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a65e:	|     '-> movea.l (sp),a0
    a660:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a666:	|         movea.l (sp),a0
    a668:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a66c:	|         movea.l (sp),a0
    a66e:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a674:	|         movea.l (sp),a0
    a676:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a67c:	|         movea.l (sp),a0
    a67e:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a684:	|         movea.l (sp),a0
    a686:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a68a:	|         movea.l (sp),a0
    a68c:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a690:	|         move.l (sp),-(sp)
    a692:	|         jsr 9912 <doBorderStuff>
    a698:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a69a:	|         pea 1 <_start+0x1>
    a69e:	|         move.l 4(sp),-(sp)
    a6a2:	|         jsr bf58 <walkMe>
    a6a8:	|         addq.l #8,sp
    a6aa:	|         tst.w d0
    a6ac:	|     ,-- bne.s a6b6 <forceWalkingPerson+0x98>
    a6ae:	|     |   movea.l (sp),a0
    a6b0:	|     |   move.w 66(a0),d0
    a6b4:	|  ,--|-- beq.s a6c2 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a6b6:	|  |  '-> movea.l (sp),a0
    a6b8:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a6be:	|  |      moveq #1,d0
    a6c0:	+--|----- bra.s a6c4 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a6c2:	|  '----> clr.w d0
    }
}
    a6c4:	'-------> addq.l #4,sp
    a6c6:	          rts

0000a6c8 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a6c8:	                lea -56(sp),sp
    a6cc:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    a6ce:	                pea 192cf <PutChar+0x1555>
    a6d4:	                jsr 172d8 <KPrintF>
    a6da:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a6dc:	                move.l #320,56(sp)
    a6e4:	                move.l #200,52(sp)
    a6ec:	                moveq #-1,d0
    a6ee:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a6f2:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a6fa:	                clr.l 44(sp)
    a6fe:	   ,----------- bra.w a8d6 <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a702:	,--|----------> movea.l 1cc3e <currentFloor>,a0
    a708:	|  |            move.l 12(a0),d1
    a70c:	|  |            move.l 44(sp),d0
    a710:	|  |            lsl.l #3,d0
    a712:	|  |            movea.l d1,a0
    a714:	|  |            adda.l d0,a0
    a716:	|  |            move.l (a0),d0
    a718:	|  |            move.l d0,d1
    a71a:	|  |            subq.l #1,d1
    a71c:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a720:	|  |            clr.l 40(sp)
    a724:	|  |     ,----- bra.w a8b4 <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a728:	|  |  ,--|----> movea.l 1cc3e <currentFloor>,a0
    a72e:	|  |  |  |      move.l 4(a0),d1
    a732:	|  |  |  |      movea.l 1cc3e <currentFloor>,a0
    a738:	|  |  |  |      movea.l 12(a0),a0
    a73c:	|  |  |  |      move.l 44(sp),d0
    a740:	|  |  |  |      lsl.l #3,d0
    a742:	|  |  |  |      adda.l d0,a0
    a744:	|  |  |  |      movea.l 4(a0),a0
    a748:	|  |  |  |      move.l 40(sp),d0
    a74c:	|  |  |  |      add.l d0,d0
    a74e:	|  |  |  |      add.l d0,d0
    a750:	|  |  |  |      adda.l d0,a0
    a752:	|  |  |  |      move.l (a0),d0
    a754:	|  |  |  |      lsl.l #3,d0
    a756:	|  |  |  |      movea.l d1,a0
    a758:	|  |  |  |      adda.l d0,a0
    a75a:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a75e:	|  |  |  |      movea.l 1cc3e <currentFloor>,a0
    a764:	|  |  |  |      move.l 4(a0),d1
    a768:	|  |  |  |      movea.l 1cc3e <currentFloor>,a0
    a76e:	|  |  |  |      movea.l 12(a0),a0
    a772:	|  |  |  |      move.l 44(sp),d0
    a776:	|  |  |  |      lsl.l #3,d0
    a778:	|  |  |  |      adda.l d0,a0
    a77a:	|  |  |  |      movea.l 4(a0),a0
    a77e:	|  |  |  |      move.l 40(sp),d0
    a782:	|  |  |  |      add.l d0,d0
    a784:	|  |  |  |      add.l d0,d0
    a786:	|  |  |  |      adda.l d0,a0
    a788:	|  |  |  |      move.l (a0),d0
    a78a:	|  |  |  |      lsl.l #3,d0
    a78c:	|  |  |  |      movea.l d1,a0
    a78e:	|  |  |  |      adda.l d0,a0
    a790:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a796:	|  |  |  |      movea.l 1cc3e <currentFloor>,a0
    a79c:	|  |  |  |      move.l 4(a0),d1
    a7a0:	|  |  |  |      movea.l 1cc3e <currentFloor>,a0
    a7a6:	|  |  |  |      movea.l 12(a0),a0
    a7aa:	|  |  |  |      move.l 44(sp),d0
    a7ae:	|  |  |  |      lsl.l #3,d0
    a7b0:	|  |  |  |      adda.l d0,a0
    a7b2:	|  |  |  |      movea.l 4(a0),a0
    a7b6:	|  |  |  |      move.l 36(sp),d0
    a7ba:	|  |  |  |      add.l d0,d0
    a7bc:	|  |  |  |      add.l d0,d0
    a7be:	|  |  |  |      adda.l d0,a0
    a7c0:	|  |  |  |      move.l (a0),d0
    a7c2:	|  |  |  |      lsl.l #3,d0
    a7c4:	|  |  |  |      movea.l d1,a0
    a7c6:	|  |  |  |      adda.l d0,a0
    a7c8:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a7cc:	|  |  |  |      movea.l 1cc3e <currentFloor>,a0
    a7d2:	|  |  |  |      move.l 4(a0),d1
    a7d6:	|  |  |  |      movea.l 1cc3e <currentFloor>,a0
    a7dc:	|  |  |  |      movea.l 12(a0),a0
    a7e0:	|  |  |  |      move.l 44(sp),d0
    a7e4:	|  |  |  |      lsl.l #3,d0
    a7e6:	|  |  |  |      adda.l d0,a0
    a7e8:	|  |  |  |      movea.l 4(a0),a0
    a7ec:	|  |  |  |      move.l 36(sp),d0
    a7f0:	|  |  |  |      add.l d0,d0
    a7f2:	|  |  |  |      add.l d0,d0
    a7f4:	|  |  |  |      adda.l d0,a0
    a7f6:	|  |  |  |      move.l (a0),d0
    a7f8:	|  |  |  |      lsl.l #3,d0
    a7fa:	|  |  |  |      movea.l d1,a0
    a7fc:	|  |  |  |      adda.l d0,a0
    a7fe:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a804:	|  |  |  |      movea.l 68(sp),a0
    a808:	|  |  |  |      move.l (a0),d1
    a80a:	|  |  |  |      movea.l 64(sp),a0
    a80e:	|  |  |  |      move.l (a0),d0
    a810:	|  |  |  |      move.l d1,-(sp)
    a812:	|  |  |  |      move.l d0,-(sp)
    a814:	|  |  |  |      move.l 24(sp),-(sp)
    a818:	|  |  |  |      move.l 32(sp),-(sp)
    a81c:	|  |  |  |      move.l 40(sp),-(sp)
    a820:	|  |  |  |      move.l 48(sp),-(sp)
    a824:	|  |  |  |      lea 28(sp),a0
    a828:	|  |  |  |      move.l a0,-(sp)
    a82a:	|  |  |  |      lea 36(sp),a0
    a82e:	|  |  |  |      move.l a0,-(sp)
    a830:	|  |  |  |      jsr 160d6 <closestPointOnLine>
    a836:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a83a:	|  |  |  |      movea.l 64(sp),a0
    a83e:	|  |  |  |      move.l (a0),d0
    a840:	|  |  |  |      move.l 8(sp),d1
    a844:	|  |  |  |      move.l d0,d2
    a846:	|  |  |  |      sub.l d1,d2
    a848:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a84c:	|  |  |  |      movea.l 68(sp),a0
    a850:	|  |  |  |      move.l (a0),d0
    a852:	|  |  |  |      move.l 4(sp),d1
    a856:	|  |  |  |      move.l d0,d2
    a858:	|  |  |  |      sub.l d1,d2
    a85a:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a85e:	|  |  |  |      move.l 28(sp),-(sp)
    a862:	|  |  |  |      move.l 32(sp),-(sp)
    a866:	|  |  |  |      jsr 17c64 <__mulsi3>
    a86c:	|  |  |  |      addq.l #8,sp
    a86e:	|  |  |  |      move.l d0,d2
    a870:	|  |  |  |      move.l 24(sp),-(sp)
    a874:	|  |  |  |      move.l 28(sp),-(sp)
    a878:	|  |  |  |      jsr 17c64 <__mulsi3>
    a87e:	|  |  |  |      addq.l #8,sp
    a880:	|  |  |  |      move.l d2,d1
    a882:	|  |  |  |      add.l d0,d1
    a884:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a888:	|  |  |  |      move.l 12(sp),d2
    a88c:	|  |  |  |      cmp.l 32(sp),d2
    a890:	|  |  |  |  ,-- bge.s a8aa <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    a892:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a898:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a89e:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a8a4:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a8aa:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a8b0:	|  |  |  |      addq.l #1,40(sp)
    a8b4:	|  |  |  '----> movea.l 1cc3e <currentFloor>,a0
    a8ba:	|  |  |         move.l 12(a0),d1
    a8be:	|  |  |         move.l 44(sp),d0
    a8c2:	|  |  |         lsl.l #3,d0
    a8c4:	|  |  |         movea.l d1,a0
    a8c6:	|  |  |         adda.l d0,a0
    a8c8:	|  |  |         move.l (a0),d0
    a8ca:	|  |  |         cmp.l 40(sp),d0
    a8ce:	|  |  '-------- bgt.w a728 <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a8d2:	|  |            addq.l #1,44(sp)
    a8d6:	|  '----------> movea.l 1cc3e <currentFloor>,a0
    a8dc:	|               move.l 8(a0),d0
    a8e0:	|               cmp.l 44(sp),d0
    a8e4:	'-------------- bgt.w a702 <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    a8e8:	                moveq #-1,d0
    a8ea:	                cmp.l 48(sp),d0
    a8ee:	            ,-- bne.s a8f4 <handleClosestPoint+0x22c>
    a8f0:	            |   clr.w d0
    a8f2:	         ,--|-- bra.s a90e <handleClosestPoint+0x246>
	*setX = gotX;
    a8f4:	         |  '-> movea.l 64(sp),a0
    a8f8:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a8fc:	         |      movea.l 68(sp),a0
    a900:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a904:	         |      movea.l 72(sp),a0
    a908:	         |      move.l 48(sp),(a0)

	return TRUE;
    a90c:	         |      moveq #1,d0
}
    a90e:	         '----> move.l (sp)+,d2
    a910:	                lea 56(sp),sp
    a914:	                rts

0000a916 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a916:	clr.l 1cb9a <personRegion+0x10>
	personRegion.sY = 0;
    a91c:	clr.l 1cb9e <personRegion+0x14>
	personRegion.di = -1;
    a922:	moveq #-1,d0
    a924:	move.l d0,1cba2 <personRegion+0x18>
	allScreenRegions = NULL;
    a92a:	clr.l 1cc32 <allScreenRegions>

	return TRUE;
    a930:	moveq #1,d0
}
    a932:	rts

0000a934 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a934:	          subq.l #4,sp
    a936:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a938:	          tst.l 12(sp)
    a93c:	      ,-- bne.s a944 <jumpPerson+0x10>
    a93e:	      |   tst.l 16(sp)
    a942:	,-----|-- beq.s a9b8 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a944:	|     '-> move.l 20(sp),-(sp)
    a948:	|         jsr a5b0 <findPerson>
    a94e:	|         addq.l #4,sp
    a950:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a954:	|  ,----- beq.s a9bc <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a956:	|  |      movea.l 4(sp),a0
    a95a:	|  |      move.l 68(a0),d0
    a95e:	|  |  ,-- beq.s a972 <jumpPerson+0x3e>
    a960:	|  |  |   movea.l 4(sp),a0
    a964:	|  |  |   move.l 68(a0),d0
    a968:	|  |  |   move.l d0,-(sp)
    a96a:	|  |  |   jsr 4faa <abortFunction>
    a970:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a972:	|  |  '-> movea.l 4(sp),a0
    a976:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a97a:	|  |      movea.l 4(sp),a0
    a97e:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a982:	|  |      movea.l 4(sp),a0
    a986:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a98a:	|  |      move.l 16(sp),-(sp)
    a98e:	|  |      jsr 1770a <__floatsisf>
    a994:	|  |      addq.l #4,sp
    a996:	|  |      move.l d0,d2
    a998:	|  |      move.l 12(sp),-(sp)
    a99c:	|  |      jsr 1770a <__floatsisf>
    a9a2:	|  |      addq.l #4,sp
    a9a4:	|  |      move.l d2,-(sp)
    a9a6:	|  |      move.l d0,-(sp)
    a9a8:	|  |      move.l 12(sp),-(sp)
    a9ac:	|  |      jsr ad5a <moveAndScale>
    a9b2:	|  |      lea 12(sp),sp
    a9b6:	|  |  ,-- bra.s a9be <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    a9b8:	'--|--|-> nop
    a9ba:	   |  +-- bra.s a9be <jumpPerson+0x8a>
    if (!moveMe) return;
    a9bc:	   '--|-> nop
}
    a9be:	      '-> move.l (sp)+,d2
    a9c0:	          addq.l #4,sp
    a9c2:	          rts

0000a9c4 <killAllPeople>:


void killAllPeople () {
    a9c4:	          subq.l #8,sp
    a9c6:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    a9c8:	   ,----- bra.s aa34 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    a9ca:	,--|----> movea.l 1cb86 <allPeople>,a0
    a9d0:	|  |      move.l 68(a0),d0
    a9d4:	|  |  ,-- beq.s a9ea <killAllPeople+0x26>
    a9d6:	|  |  |   movea.l 1cb86 <allPeople>,a0
    a9dc:	|  |  |   move.l 68(a0),d0
    a9e0:	|  |  |   move.l d0,-(sp)
    a9e2:	|  |  |   jsr 4faa <abortFunction>
    a9e8:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    a9ea:	|  |  '-> movea.l 1cb86 <allPeople>,a0
    a9f0:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    a9f4:	|  |      move.l 1cb86 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    a9fc:	|  |      movea.l 1cb86 <allPeople>,a0
    aa02:	|  |      move.l 36(a0),d0
    aa06:	|  |      move.l d0,1cb86 <allPeople>
		removeObjectType (killPeople -> thisType);
    aa0c:	|  |      movea.l 8(sp),a0
    aa10:	|  |      move.l 114(a0),d0
    aa14:	|  |      move.l d0,-(sp)
    aa16:	|  |      jsr d8c6 <removeObjectType>
    aa1c:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    aa1e:	|  |      move.l 8(sp),4(sp)
    aa24:	|  |      move.l 1cb26 <SysBase>,d0
    aa2a:	|  |      movea.l d0,a6
    aa2c:	|  |      movea.l 4(sp),a1
    aa30:	|  |      jsr -690(a6)
	while (allPeople) {
    aa34:	|  '----> move.l 1cb86 <allPeople>,d0
    aa3a:	'-------- bne.s a9ca <killAllPeople+0x6>
	}
}
    aa3c:	          nop
    aa3e:	          nop
    aa40:	          movea.l (sp)+,a6
    aa42:	          addq.l #8,sp
    aa44:	          rts

0000aa46 <killMostPeople>:

void killMostPeople() {
    aa46:	          lea -12(sp),sp
    aa4a:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    aa4c:	          move.l #117638,12(sp)

    while (*lookyHere) {
    aa54:	   ,----- bra.w aada <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    aa58:	,--|----> movea.l 12(sp),a0
    aa5c:	|  |      movea.l (a0),a0
    aa5e:	|  |      move.l 118(a0),d0
    aa62:	|  |      moveq #32,d1
    aa64:	|  |      and.l d1,d0
    aa66:	|  |  ,-- beq.s aa78 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    aa68:	|  |  |   movea.l 12(sp),a0
    aa6c:	|  |  |   move.l (a0),d0
    aa6e:	|  |  |   moveq #36,d1
    aa70:	|  |  |   add.l d0,d1
    aa72:	|  |  |   move.l d1,12(sp)
    aa76:	|  +--|-- bra.s aada <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    aa78:	|  |  '-> movea.l 12(sp),a0
    aa7c:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    aa80:	|  |      movea.l 8(sp),a0
    aa84:	|  |      move.l 36(a0),d0
    aa88:	|  |      movea.l 12(sp),a0
    aa8c:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    aa8e:	|  |      movea.l 8(sp),a0
    aa92:	|  |      move.l 68(a0),d0
    aa96:	|  |  ,-- beq.s aaaa <killMostPeople+0x64>
    aa98:	|  |  |   movea.l 8(sp),a0
    aa9c:	|  |  |   move.l 68(a0),d0
    aaa0:	|  |  |   move.l d0,-(sp)
    aaa2:	|  |  |   jsr 4faa <abortFunction>
    aaa8:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    aaaa:	|  |  '-> movea.l 8(sp),a0
    aaae:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    aab2:	|  |      movea.l 8(sp),a0
    aab6:	|  |      move.l 114(a0),d0
    aaba:	|  |      move.l d0,-(sp)
    aabc:	|  |      jsr d8c6 <removeObjectType>
    aac2:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    aac4:	|  |      move.l 8(sp),4(sp)
    aaca:	|  |      move.l 1cb26 <SysBase>,d0
    aad0:	|  |      movea.l d0,a6
    aad2:	|  |      movea.l 4(sp),a1
    aad6:	|  |      jsr -690(a6)
    while (*lookyHere) {
    aada:	|  '----> movea.l 12(sp),a0
    aade:	|         move.l (a0),d0
    aae0:	'-------- bne.w aa58 <killMostPeople+0x12>
        }
    }
}
    aae4:	          nop
    aae6:	          nop
    aae8:	          movea.l (sp)+,a6
    aaea:	          lea 12(sp),sp
    aaee:	          rts

0000aaf0 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    aaf0:	clr.l -(sp)
    aaf2:	move.l sp,d0
    aaf4:	addq.l #8,d0
    aaf6:	move.l d0,-(sp)
    aaf8:	jsr 414c <setFrames>
    aafe:	addq.l #8,sp
}
    ab00:	nop
    ab02:	rts

0000ab04 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    ab04:	          lea -12(sp),sp
    ab08:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    ab0a:	          pea 19353 <PutChar+0x15d9>
    ab10:	          jsr 172d8 <KPrintF>
    ab16:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    ab18:	          tst.l 20(sp)
    ab1c:	      ,-- bne.s ab2a <makeWalkingPerson+0x26>
    ab1e:	      |   tst.l 24(sp)
    ab22:	      +-- bne.s ab2a <makeWalkingPerson+0x26>
    ab24:	      |   clr.w d0
    ab26:	,-----|-- bra.w acec <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    ab2a:	|     '-> movea.l 1cc3e <currentFloor>,a0
    ab30:	|         move.l 8(a0),d0
    ab34:	|     ,-- bne.s ab3c <makeWalkingPerson+0x38>
    ab36:	|     |   clr.w d0
    ab38:	+-----|-- bra.w acec <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ab3c:	|     '-> move.l 28(sp),d0
    ab40:	|         move.l d0,-(sp)
    ab42:	|         jsr a5b0 <findPerson>
    ab48:	|         addq.l #4,sp
    ab4a:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    ab4e:	|     ,-- bne.s ab6a <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    ab50:	|     |   move.l 28(sp),d0
    ab54:	|     |   move.l d0,-(sp)
    ab56:	|     |   pea 1936e <PutChar+0x15f4>
    ab5c:	|     |   jsr 172d8 <KPrintF>
    ab62:	|     |   addq.l #8,sp
		return FALSE;
    ab64:	|     |   clr.w d0
    ab66:	+-----|-- bra.w acec <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    ab6a:	|     '-> movea.l 12(sp),a0
    ab6e:	|         move.l 68(a0),d0
    ab72:	|     ,-- beq.s ab86 <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    ab74:	|     |   movea.l 12(sp),a0
    ab78:	|     |   move.l 68(a0),d0
    ab7c:	|     |   move.l d0,-(sp)
    ab7e:	|     |   jsr 4faa <abortFunction>
    ab84:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    ab86:	|     '-> movea.l 12(sp),a0
    ab8a:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    ab8e:	|         movea.l 12(sp),a0
    ab92:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    ab98:	|         movea.l 12(sp),a0
    ab9c:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    aba2:	|         movea.l 12(sp),a0
    aba6:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    abac:	|         movea.l 12(sp),a0
    abb0:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    abb6:	|         move.l 24(sp),-(sp)
    abba:	|         move.l 24(sp),-(sp)
    abbe:	|         jsr 1661e <inFloor>
    abc4:	|         addq.l #8,sp
    abc6:	|         movea.l 12(sp),a0
    abca:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    abce:	|         movea.l 12(sp),a0
    abd2:	|         move.l 60(a0),d0
    abd6:	|         moveq #-1,d1
    abd8:	|         cmp.l d0,d1
    abda:	|     ,-- bne.s ac0a <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    abdc:	|     |   movea.w #60,a0
    abe0:	|     |   adda.l 12(sp),a0
    abe4:	|     |   moveq #44,d1
    abe6:	|     |   add.l 12(sp),d1
    abea:	|     |   moveq #40,d0
    abec:	|     |   add.l 12(sp),d0
    abf0:	|     |   move.l a0,-(sp)
    abf2:	|     |   move.l d1,-(sp)
    abf4:	|     |   move.l d0,-(sp)
    abf6:	|     |   jsr a6c8 <handleClosestPoint>
    abfc:	|     |   lea 12(sp),sp
    ac00:	|     |   tst.w d0
    ac02:	|     +-- bne.s ac0a <makeWalkingPerson+0x106>
    ac04:	|     |   clr.w d0
    ac06:	+-----|-- bra.w acec <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    ac0a:	|     '-> movea.l 12(sp),a0
    ac0e:	|         move.l 4(a0),d0
    ac12:	|         move.l d0,-(sp)
    ac14:	|         jsr 176a2 <__fixsfsi>
    ac1a:	|         addq.l #4,sp
    ac1c:	|         move.l d0,d2
    ac1e:	|         movea.l 12(sp),a0
    ac22:	|         move.l (a0),d0
    ac24:	|         move.l d0,-(sp)
    ac26:	|         jsr 176a2 <__fixsfsi>
    ac2c:	|         addq.l #4,sp
    ac2e:	|         move.l d2,-(sp)
    ac30:	|         move.l d0,-(sp)
    ac32:	|         jsr 1661e <inFloor>
    ac38:	|         addq.l #8,sp
    ac3a:	|         movea.l 12(sp),a0
    ac3e:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    ac42:	|         movea.l 12(sp),a0
    ac46:	|         move.l 56(a0),d0
    ac4a:	|         moveq #-1,d1
    ac4c:	|         cmp.l d0,d1
    ac4e:	|     ,-- bne.s aca0 <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    ac50:	|     |   movea.l 12(sp),a0
    ac54:	|     |   move.l (a0),d0
    ac56:	|     |   move.l d0,-(sp)
    ac58:	|     |   jsr 176a2 <__fixsfsi>
    ac5e:	|     |   addq.l #4,sp
    ac60:	|     |   move.l d0,8(sp)
    ac64:	|     |   movea.l 12(sp),a0
    ac68:	|     |   move.l 4(a0),d0
    ac6c:	|     |   move.l d0,-(sp)
    ac6e:	|     |   jsr 176a2 <__fixsfsi>
    ac74:	|     |   addq.l #4,sp
    ac76:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    ac7a:	|     |   moveq #56,d0
    ac7c:	|     |   add.l 12(sp),d0
    ac80:	|     |   move.l d0,-(sp)
    ac82:	|     |   lea 8(sp),a0
    ac86:	|     |   move.l a0,-(sp)
    ac88:	|     |   moveq #16,d0
    ac8a:	|     |   add.l sp,d0
    ac8c:	|     |   move.l d0,-(sp)
    ac8e:	|     |   jsr a6c8 <handleClosestPoint>
    ac94:	|     |   lea 12(sp),sp
    ac98:	|     |   tst.w d0
    ac9a:	|     +-- bne.s aca0 <makeWalkingPerson+0x19c>
    ac9c:	|     |   clr.w d0
    ac9e:	+-----|-- bra.s acec <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    aca0:	|     '-> move.l 12(sp),-(sp)
    aca4:	|         jsr 9912 <doBorderStuff>
    acaa:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    acac:	|         clr.l -(sp)
    acae:	|         move.l 16(sp),-(sp)
    acb2:	|         jsr bf58 <walkMe>
    acb8:	|         addq.l #8,sp
    acba:	|         tst.w d0
    acbc:	|     ,-- bne.s acc8 <makeWalkingPerson+0x1c4>
    acbe:	|     |   movea.l 12(sp),a0
    acc2:	|     |   move.w 66(a0),d0
    acc6:	|  ,--|-- beq.s acea <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    acc8:	|  |  '-> lea 28(sp),a0
    accc:	|  |      move.l a0,-(sp)
    acce:	|  |      pea 19397 <PutChar+0x161d>
    acd4:	|  |      jsr 172d8 <KPrintF>
    acda:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    acdc:	|  |      movea.l 12(sp),a0
    ace0:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    ace6:	|  |      moveq #1,d0
    ace8:	+--|----- bra.s acec <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    acea:	|  '----> clr.w d0
	}
}
    acec:	'-------> move.l (sp)+,d2
    acee:	          lea 12(sp),sp
    acf2:	          rts

0000acf4 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    acf4:	       lea -16(sp),sp
    acf8:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    acfa:	       moveq #12,d0
    acfc:	       move.l d0,16(sp)
    ad00:	       clr.l 12(sp)
    ad04:	       move.l 1cb26 <SysBase>,d0
    ad0a:	       movea.l d0,a6
    ad0c:	       move.l 16(sp),d0
    ad10:	       move.l 12(sp),d1
    ad14:	       jsr -684(a6)
    ad18:	       move.l d0,8(sp)
    ad1c:	       move.l 8(sp),d0
    ad20:	       move.l d0,4(sp)
    if(newAnim == 0) {
    ad24:	   ,-- bne.s ad38 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    ad26:	   |   pea 193ca <PutChar+0x1650>
    ad2c:	   |   jsr 172d8 <KPrintF>
    ad32:	   |   addq.l #4,sp
        return NULL;    
    ad34:	   |   moveq #0,d0
    ad36:	,--|-- bra.s ad52 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    ad38:	|  '-> movea.l 4(sp),a0
    ad3c:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    ad3e:	|      movea.l 4(sp),a0
    ad42:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    ad46:	|      movea.l 4(sp),a0
    ad4a:	|      clr.l 4(a0)
	return newAnim;
    ad4e:	|      move.l 4(sp),d0
}
    ad52:	'----> movea.l (sp)+,a6
    ad54:	       lea 16(sp),sp
    ad58:	       rts

0000ad5a <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    ad5a:	    move.l d2,-(sp)
	me->x = x;
    ad5c:	    movea.l 8(sp),a0
    ad60:	    move.l 12(sp),(a0)
	me->y = y;
    ad64:	    movea.l 8(sp),a0
    ad68:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    ad6e:	    movea.l 8(sp),a0
    ad72:	    clr.l 8(a0)
	me->oldy = 0;
    ad76:	    movea.l 8(sp),a0
    ad7a:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    ad7e:	    movea.l 8(sp),a0
    ad82:	    move.l 118(a0),d0
    ad86:	    moveq #2,d1
    ad88:	    and.l d1,d0
    ad8a:	,-- bne.s ade2 <moveAndScale+0x88>
    ad8c:	|   move.w 1c4ae <scaleDivide>,d0
    ad92:	+-- beq.s ade2 <moveAndScale+0x88>
    ad94:	|   movea.l 8(sp),a0
    ad98:	|   move.l 4(a0),d2
    ad9c:	|   move.w 1c4ac <scaleHorizon>,d0
    ada2:	|   movea.w d0,a0
    ada4:	|   move.l a0,-(sp)
    ada6:	|   jsr 1770a <__floatsisf>
    adac:	|   addq.l #4,sp
    adae:	|   move.l d0,-(sp)
    adb0:	|   move.l d2,-(sp)
    adb2:	|   jsr 179fe <__subsf3>
    adb8:	|   addq.l #8,sp
    adba:	|   move.l d0,d2
    adbc:	|   move.w 1c4ae <scaleDivide>,d0
    adc2:	|   movea.w d0,a0
    adc4:	|   move.l a0,-(sp)
    adc6:	|   jsr 1770a <__floatsisf>
    adcc:	|   addq.l #4,sp
    adce:	|   move.l d0,-(sp)
    add0:	|   move.l d2,-(sp)
    add2:	|   jsr 175c0 <__divsf3>
    add8:	|   addq.l #8,sp
    adda:	|   movea.l 8(sp),a0
    adde:	|   move.l d0,32(a0)
}
    ade2:	'-> nop
    ade4:	    move.l (sp)+,d2
    ade6:	    rts

0000ade8 <removeOneCharacter>:

void removeOneCharacter (int i) {
    ade8:	          lea -16(sp),sp
    adec:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    adee:	          move.l 24(sp),-(sp)
    adf2:	          jsr a5b0 <findPerson>
    adf8:	          addq.l #4,sp
    adfa:	          move.l d0,8(sp)

    if (p) {
    adfe:	,-------- beq.w aede <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    ae02:	|         move.l 1cc36 <overRegion>,d0
    ae08:	|         cmpi.l #117642,d0
    ae0e:	|     ,-- bne.s ae2c <removeOneCharacter+0x44>
    ae10:	|     |   movea.l 1cc36 <overRegion>,a0
    ae16:	|     |   move.l 28(a0),d1
    ae1a:	|     |   movea.l 8(sp),a0
    ae1e:	|     |   move.l 114(a0),d0
    ae22:	|     |   cmp.l d1,d0
    ae24:	|     +-- bne.s ae2c <removeOneCharacter+0x44>
            overRegion = NULL;
    ae26:	|     |   clr.l 1cc36 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    ae2c:	|     '-> movea.l 8(sp),a0
    ae30:	|         move.l 68(a0),d0
    ae34:	|     ,-- beq.s ae48 <removeOneCharacter+0x60>
    ae36:	|     |   movea.l 8(sp),a0
    ae3a:	|     |   move.l 68(a0),d0
    ae3e:	|     |   move.l d0,-(sp)
    ae40:	|     |   jsr 4faa <abortFunction>
    ae46:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    ae48:	|     '-> movea.l 8(sp),a0
    ae4c:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    ae50:	|         clr.l 12(sp)
    ae54:	|     ,-- bra.s ae7c <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    ae56:	|  ,--|-> movea.l 8(sp),a0
    ae5a:	|  |  |   movea.l 80(a0),a0
    ae5e:	|  |  |   move.l (a0),d1
    ae60:	|  |  |   move.l 12(sp),d0
    ae64:	|  |  |   add.l d0,d0
    ae66:	|  |  |   add.l d0,d0
    ae68:	|  |  |   movea.l d1,a0
    ae6a:	|  |  |   adda.l d0,a0
    ae6c:	|  |  |   move.l (a0),d0
    ae6e:	|  |  |   move.l d0,-(sp)
    ae70:	|  |  |   jsr 988e <deleteAnim>
    ae76:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    ae78:	|  |  |   addq.l #1,12(sp)
    ae7c:	|  |  '-> moveq #2,d0
    ae7e:	|  |      cmp.l 12(sp),d0
    ae82:	|  '----- bge.s ae56 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    ae84:	|         move.l #117638,16(sp)
    ae8c:	|     ,-- bra.s ae9c <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    ae8e:	|  ,--|-> movea.l 16(sp),a0
    ae92:	|  |  |   move.l (a0),d0
    ae94:	|  |  |   moveq #36,d1
    ae96:	|  |  |   add.l d0,d1
    ae98:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    ae9c:	|  |  '-> movea.l 16(sp),a0
    aea0:	|  |      move.l (a0),d0
    aea2:	|  |      cmp.l 8(sp),d0
    aea6:	|  '----- bne.s ae8e <removeOneCharacter+0xa6>

        *killPeople = p->next;
    aea8:	|         movea.l 8(sp),a0
    aeac:	|         move.l 36(a0),d0
    aeb0:	|         movea.l 16(sp),a0
    aeb4:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    aeb6:	|         movea.l 8(sp),a0
    aeba:	|         move.l 114(a0),d0
    aebe:	|         move.l d0,-(sp)
    aec0:	|         jsr d8c6 <removeObjectType>
    aec6:	|         addq.l #4,sp
        FreeVec(p);
    aec8:	|         move.l 8(sp),4(sp)
    aece:	|         move.l 1cb26 <SysBase>,d0
    aed4:	|         movea.l d0,a6
    aed6:	|         movea.l 4(sp),a1
    aeda:	|         jsr -690(a6)
		
    }
}
    aede:	'-------> nop
    aee0:	          movea.l (sp)+,a6
    aee2:	          lea 16(sp),sp
    aee6:	          rts

0000aee8 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    aee8:	       subq.l #8,sp
    aeea:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    aeec:	       movea.l 16(sp),a0
    aef0:	       movea.l 80(a0),a0
    aef4:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    aefa:	       movea.l 16(sp),a0
    aefe:	       move.l 92(a0),d2
    af02:	       move.l 4(sp),-(sp)
    af06:	       pea b4 <_start+0xb4>
    af0a:	       jsr 17ce2 <__divsi3>
    af10:	       addq.l #8,sp
    af12:	       add.l d2,d0
    af14:	       move.l d0,d1
    af16:	       addi.l #180,d1
    af1c:	       movea.l 16(sp),a0
    af20:	       move.l 100(a0),d0
    af24:	       move.l d1,d2
    af26:	       add.l d0,d2
    af28:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    af2c:	   ,-- bra.s af36 <rethinkAngle+0x4e>
    af2e:	,--|-> addi.l #-360,8(sp)
    af36:	|  '-> cmpi.l #359,8(sp)
    af3e:	'----- bgt.s af2e <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    af40:	       move.l 4(sp),-(sp)
    af44:	       move.l 12(sp),-(sp)
    af48:	       jsr 17c64 <__mulsi3>
    af4e:	       addq.l #8,sp
    af50:	       pea 168 <decodeFilename+0x50>
    af54:	       move.l d0,-(sp)
    af56:	       jsr 17ce2 <__divsi3>
    af5c:	       addq.l #8,sp
    af5e:	       movea.l 16(sp),a0
    af62:	       move.l d0,106(a0)
}
    af66:	       nop
    af68:	       move.l (sp)+,d2
    af6a:	       addq.l #8,sp
    af6c:	       rts

0000af6e <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    af6e:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    af70:	          movea.l 8(sp),a0
    af74:	          move.l 8(a0),d0
    af78:	          move.l 12(sp),-(sp)
    af7c:	          move.l d0,-(sp)
    af7e:	          jsr 8d0 <put2bytes>
    af84:	          addq.l #8,sp
	if (p -> numFrames) {
    af86:	          movea.l 8(sp),a0
    af8a:	          move.l 8(a0),d0
    af8e:	,-------- beq.w b032 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    af92:	|         movea.l 8(sp),a0
    af96:	|         movea.l (a0),a0
    af98:	|         move.l (a0),d0
    af9a:	|         move.l 12(sp),-(sp)
    af9e:	|         move.l d0,-(sp)
    afa0:	|         jsr 958 <put4bytes>
    afa6:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    afa8:	|         clr.l (sp)
    afaa:	|     ,-- bra.s b024 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    afac:	|  ,--|-> movea.l 8(sp),a0
    afb0:	|  |  |   movea.l 4(a0),a0
    afb4:	|  |  |   move.l (sp),d1
    afb6:	|  |  |   move.l d1,d0
    afb8:	|  |  |   add.l d0,d0
    afba:	|  |  |   add.l d1,d0
    afbc:	|  |  |   add.l d0,d0
    afbe:	|  |  |   add.l d0,d0
    afc0:	|  |  |   adda.l d0,a0
    afc2:	|  |  |   move.l (a0),d0
    afc4:	|  |  |   move.l 12(sp),-(sp)
    afc8:	|  |  |   move.l d0,-(sp)
    afca:	|  |  |   jsr 958 <put4bytes>
    afd0:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    afd2:	|  |  |   movea.l 8(sp),a0
    afd6:	|  |  |   movea.l 4(a0),a0
    afda:	|  |  |   move.l (sp),d1
    afdc:	|  |  |   move.l d1,d0
    afde:	|  |  |   add.l d0,d0
    afe0:	|  |  |   add.l d1,d0
    afe2:	|  |  |   add.l d0,d0
    afe4:	|  |  |   add.l d0,d0
    afe6:	|  |  |   adda.l d0,a0
    afe8:	|  |  |   move.l 4(a0),d0
    afec:	|  |  |   move.l 12(sp),-(sp)
    aff0:	|  |  |   move.l d0,-(sp)
    aff2:	|  |  |   jsr 958 <put4bytes>
    aff8:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    affa:	|  |  |   movea.l 8(sp),a0
    affe:	|  |  |   movea.l 4(a0),a0
    b002:	|  |  |   move.l (sp),d1
    b004:	|  |  |   move.l d1,d0
    b006:	|  |  |   add.l d0,d0
    b008:	|  |  |   add.l d1,d0
    b00a:	|  |  |   add.l d0,d0
    b00c:	|  |  |   add.l d0,d0
    b00e:	|  |  |   adda.l d0,a0
    b010:	|  |  |   move.l 8(a0),d0
    b014:	|  |  |   move.l 12(sp),-(sp)
    b018:	|  |  |   move.l d0,-(sp)
    b01a:	|  |  |   jsr 958 <put4bytes>
    b020:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b022:	|  |  |   addq.l #1,(sp)
    b024:	|  |  '-> movea.l 8(sp),a0
    b028:	|  |      move.l 8(a0),d0
    b02c:	|  |      cmp.l (sp),d0
    b02e:	|  '----- bgt.w afac <saveAnim+0x3e>
		}
	}
	return TRUE;
    b032:	'-------> moveq #1,d0
}
    b034:	          addq.l #4,sp
    b036:	          rts

0000b038 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b038:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b03a:	             movea.l 8(sp),a0
    b03e:	             move.l 4(a0),d0
    b042:	             move.l 12(sp),-(sp)
    b046:	             move.l d0,-(sp)
    b048:	             jsr 8d0 <put2bytes>
    b04e:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b050:	             clr.l (sp)
    b052:	   ,-------- bra.s b07e <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b054:	,--|-------> movea.l 8(sp),a0
    b058:	|  |         move.l (a0),d1
    b05a:	|  |         move.l (sp),d0
    b05c:	|  |         add.l d0,d0
    b05e:	|  |         add.l d0,d0
    b060:	|  |         movea.l d1,a0
    b062:	|  |         adda.l d0,a0
    b064:	|  |         move.l (a0),d0
    b066:	|  |         move.l 12(sp),-(sp)
    b06a:	|  |         move.l d0,-(sp)
    b06c:	|  |         jsr af6e <saveAnim>
    b072:	|  |         addq.l #8,sp
    b074:	|  |         tst.w d0
    b076:	|  |     ,-- bne.s b07c <saveCostume+0x44>
    b078:	|  |     |   clr.w d0
    b07a:	|  |  ,--|-- bra.s b092 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b07c:	|  |  |  '-> addq.l #1,(sp)
    b07e:	|  '--|----> movea.l 8(sp),a0
    b082:	|     |      move.l 4(a0),d1
    b086:	|     |      move.l d1,d0
    b088:	|     |      add.l d0,d0
    b08a:	|     |      add.l d1,d0
    b08c:	|     |      cmp.l (sp),d0
    b08e:	'-----|----- bgt.s b054 <saveCostume+0x1c>
	}

	return TRUE;
    b090:	      |      moveq #1,d0
}
    b092:	      '----> addq.l #4,sp
    b094:	             rts

0000b096 <savePeople>:

BOOL savePeople (BPTR fp) {
    b096:	             lea -144(sp),sp
    b09a:	             move.l a6,-(sp)
    b09c:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b09e:	             move.l 1cb86 <allPeople>,148(sp)
	int countPeople = 0, a;
    b0a6:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b0aa:	             move.w 1c4ac <scaleHorizon>,d0
    b0b0:	             movea.w d0,a0
    b0b2:	             move.l 156(sp),-(sp)
    b0b6:	             move.l a0,-(sp)
    b0b8:	             jsr a9c <putSigned>
    b0be:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b0c0:	             move.w 1c4ae <scaleDivide>,d0
    b0c6:	             movea.w d0,a0
    b0c8:	             move.l 156(sp),-(sp)
    b0cc:	             move.l a0,-(sp)
    b0ce:	             jsr a9c <putSigned>
    b0d4:	             addq.l #8,sp

	while (me) {
    b0d6:	         ,-- bra.s b0e6 <savePeople+0x50>
		countPeople ++;
    b0d8:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    b0dc:	      |  |   movea.l 148(sp),a0
    b0e0:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b0e6:	      |  '-> tst.l 148(sp)
    b0ea:	      '----- bne.s b0d8 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b0ec:	             move.l 156(sp),-(sp)
    b0f0:	             move.l 148(sp),-(sp)
    b0f4:	             jsr 8d0 <put2bytes>
    b0fa:	             addq.l #8,sp

	me = allPeople;
    b0fc:	             move.l 1cb86 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b104:	             clr.l 140(sp)
    b108:	   ,-------- bra.w b560 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b10c:	,--|-------> movea.l 148(sp),a0
    b110:	|  |         move.l (a0),d0
    b112:	|  |         move.l 156(sp),-(sp)
    b116:	|  |         move.l d0,-(sp)
    b118:	|  |         jsr a46 <putFloat>
    b11e:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b120:	|  |         movea.l 148(sp),a0
    b124:	|  |         move.l 4(a0),d0
    b128:	|  |         move.l 156(sp),-(sp)
    b12c:	|  |         move.l d0,-(sp)
    b12e:	|  |         jsr a46 <putFloat>
    b134:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b136:	|  |         movea.l 148(sp),a0
    b13a:	|  |         move.l 80(a0),d0
    b13e:	|  |         move.l 156(sp),-(sp)
    b142:	|  |         move.l d0,-(sp)
    b144:	|  |         jsr b038 <saveCostume>
    b14a:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b14c:	|  |         movea.l 148(sp),a0
    b150:	|  |         move.l 72(a0),d0
    b154:	|  |         move.l 156(sp),-(sp)
    b158:	|  |         move.l d0,-(sp)
    b15a:	|  |         jsr af6e <saveAnim>
    b160:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b162:	|  |         move.l 156(sp),136(sp)
    b168:	|  |         movea.l 148(sp),a0
    b16c:	|  |         move.l 72(a0),d1
    b170:	|  |         movea.l 148(sp),a0
    b174:	|  |         move.l 76(a0),d0
    b178:	|  |         cmp.l d1,d0
    b17a:	|  |         seq d0
    b17c:	|  |         neg.b d0
    b17e:	|  |         move.b d0,d0
    b180:	|  |         andi.l #255,d0
    b186:	|  |         move.l d0,132(sp)
    b18a:	|  |         move.l 1cb2e <DOSBase>,d0
    b190:	|  |         movea.l d0,a6
    b192:	|  |         move.l 136(sp),d1
    b196:	|  |         move.l 132(sp),d2
    b19a:	|  |         jsr -312(a6)
    b19e:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b1a2:	|  |         movea.l 148(sp),a0
    b1a6:	|  |         move.l 32(a0),d0
    b1aa:	|  |         move.l 156(sp),-(sp)
    b1ae:	|  |         move.l d0,-(sp)
    b1b0:	|  |         jsr a46 <putFloat>
    b1b6:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b1b8:	|  |         movea.l 148(sp),a0
    b1bc:	|  |         move.l 118(a0),d0
    b1c0:	|  |         move.l 156(sp),-(sp)
    b1c4:	|  |         move.l d0,-(sp)
    b1c6:	|  |         jsr 8d0 <put2bytes>
    b1cc:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b1ce:	|  |         movea.l 148(sp),a0
    b1d2:	|  |         move.l 20(a0),d0
    b1d6:	|  |         move.l 156(sp),-(sp)
    b1da:	|  |         move.l d0,-(sp)
    b1dc:	|  |         jsr 8d0 <put2bytes>
    b1e2:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b1e4:	|  |         movea.l 148(sp),a0
    b1e8:	|  |         move.l 40(a0),d0
    b1ec:	|  |         move.l 156(sp),-(sp)
    b1f0:	|  |         move.l d0,-(sp)
    b1f2:	|  |         jsr 8d0 <put2bytes>
    b1f8:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b1fa:	|  |         movea.l 148(sp),a0
    b1fe:	|  |         move.l 44(a0),d0
    b202:	|  |         move.l 156(sp),-(sp)
    b206:	|  |         move.l d0,-(sp)
    b208:	|  |         jsr 8d0 <put2bytes>
    b20e:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b210:	|  |         movea.l 148(sp),a0
    b214:	|  |         move.l 48(a0),d0
    b218:	|  |         move.l 156(sp),-(sp)
    b21c:	|  |         move.l d0,-(sp)
    b21e:	|  |         jsr 8d0 <put2bytes>
    b224:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b226:	|  |         movea.l 148(sp),a0
    b22a:	|  |         move.l 52(a0),d0
    b22e:	|  |         move.l 156(sp),-(sp)
    b232:	|  |         move.l d0,-(sp)
    b234:	|  |         jsr 8d0 <put2bytes>
    b23a:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b23c:	|  |         movea.l 148(sp),a0
    b240:	|  |         move.l 84(a0),d0
    b244:	|  |         move.l 156(sp),-(sp)
    b248:	|  |         move.l d0,-(sp)
    b24a:	|  |         jsr 8d0 <put2bytes>
    b250:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b252:	|  |         movea.l 148(sp),a0
    b256:	|  |         move.l 88(a0),d0
    b25a:	|  |         move.l 156(sp),-(sp)
    b25e:	|  |         move.l d0,-(sp)
    b260:	|  |         jsr 8d0 <put2bytes>
    b266:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b268:	|  |         movea.l 148(sp),a0
    b26c:	|  |         move.l 28(a0),d0
    b270:	|  |         move.l 156(sp),-(sp)
    b274:	|  |         move.l d0,-(sp)
    b276:	|  |         jsr 8d0 <put2bytes>
    b27c:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b27e:	|  |         movea.l 148(sp),a0
    b282:	|  |         move.l 122(a0),d0
    b286:	|  |         move.l 156(sp),-(sp)
    b28a:	|  |         move.l d0,-(sp)
    b28c:	|  |         jsr 8d0 <put2bytes>
    b292:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b294:	|  |         movea.l 148(sp),a0
    b298:	|  |         move.l 24(a0),d0
    b29c:	|  |         move.l d0,d0
    b29e:	|  |         movea.w d0,a0
    b2a0:	|  |         move.l 156(sp),-(sp)
    b2a4:	|  |         move.l a0,-(sp)
    b2a6:	|  |         jsr a9c <putSigned>
    b2ac:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b2ae:	|  |         move.l 156(sp),124(sp)
    b2b4:	|  |         movea.l 148(sp),a0
    b2b8:	|  |         move.w 104(a0),d0
    b2bc:	|  |         movea.w d0,a0
    b2be:	|  |         move.l a0,120(sp)
    b2c2:	|  |         move.l 1cb2e <DOSBase>,d0
    b2c8:	|  |         movea.l d0,a6
    b2ca:	|  |         move.l 124(sp),d1
    b2ce:	|  |         move.l 120(sp),d2
    b2d2:	|  |         jsr -312(a6)
    b2d6:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b2da:	|  |         move.l 156(sp),112(sp)
    b2e0:	|  |         movea.l 148(sp),a0
    b2e4:	|  |         move.w 64(a0),d0
    b2e8:	|  |         movea.w d0,a0
    b2ea:	|  |         move.l a0,108(sp)
    b2ee:	|  |         move.l 1cb2e <DOSBase>,d0
    b2f4:	|  |         movea.l d0,a6
    b2f6:	|  |         move.l 112(sp),d1
    b2fa:	|  |         move.l 108(sp),d2
    b2fe:	|  |         jsr -312(a6)
    b302:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b306:	|  |         move.l 156(sp),100(sp)
    b30c:	|  |         movea.l 148(sp),a0
    b310:	|  |         move.w 66(a0),d0
    b314:	|  |         movea.w d0,a0
    b316:	|  |         move.l a0,96(sp)
    b31a:	|  |         move.l 1cb2e <DOSBase>,d0
    b320:	|  |         movea.l d0,a6
    b322:	|  |         move.l 100(sp),d1
    b326:	|  |         move.l 96(sp),d2
    b32a:	|  |         jsr -312(a6)
    b32e:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b332:	|  |         movea.l 148(sp),a0
    b336:	|  |         move.l 68(a0),d0
    b33a:	|  |  ,----- beq.s b378 <savePeople+0x2e2>
			FPutC (fp, 1);
    b33c:	|  |  |      move.l 156(sp),76(sp)
    b342:	|  |  |      moveq #1,d0
    b344:	|  |  |      move.l d0,72(sp)
    b348:	|  |  |      move.l 1cb2e <DOSBase>,d0
    b34e:	|  |  |      movea.l d0,a6
    b350:	|  |  |      move.l 76(sp),d1
    b354:	|  |  |      move.l 72(sp),d2
    b358:	|  |  |      jsr -312(a6)
    b35c:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b360:	|  |  |      movea.l 148(sp),a0
    b364:	|  |  |      move.l 68(a0),d0
    b368:	|  |  |      move.l 156(sp),-(sp)
    b36c:	|  |  |      move.l d0,-(sp)
    b36e:	|  |  |      jsr c592 <saveFunction>
    b374:	|  |  |      addq.l #8,sp
    b376:	|  |  |  ,-- bra.s b39c <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b378:	|  |  '--|-> move.l 156(sp),88(sp)
    b37e:	|  |     |   moveq #1,d0
    b380:	|  |     |   move.l d0,84(sp)
    b384:	|  |     |   move.l 1cb2e <DOSBase>,d0
    b38a:	|  |     |   movea.l d0,a6
    b38c:	|  |     |   move.l 88(sp),d1
    b390:	|  |     |   move.l 84(sp),d2
    b394:	|  |     |   jsr -312(a6)
    b398:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b39c:	|  |     '-> movea.l 148(sp),a0
    b3a0:	|  |         move.l 106(a0),d0
    b3a4:	|  |         move.l 156(sp),-(sp)
    b3a8:	|  |         move.l d0,-(sp)
    b3aa:	|  |         jsr 8d0 <put2bytes>
    b3b0:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b3b2:	|  |         movea.l 148(sp),a0
    b3b6:	|  |         move.l 92(a0),d0
    b3ba:	|  |         move.l 156(sp),-(sp)
    b3be:	|  |         move.l d0,-(sp)
    b3c0:	|  |         jsr 8d0 <put2bytes>
    b3c6:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b3c8:	|  |         movea.l 148(sp),a0
    b3cc:	|  |         move.l 100(a0),d0
    b3d0:	|  |         move.l 156(sp),-(sp)
    b3d4:	|  |         move.l d0,-(sp)
    b3d6:	|  |         jsr 8d0 <put2bytes>
    b3dc:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b3de:	|  |         movea.l 148(sp),a0
    b3e2:	|  |         move.l 96(a0),d0
    b3e6:	|  |         move.l 156(sp),-(sp)
    b3ea:	|  |         move.l d0,-(sp)
    b3ec:	|  |         jsr 8d0 <put2bytes>
    b3f2:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b3f4:	|  |         movea.l 148(sp),a0
    b3f8:	|  |         move.l 110(a0),d0
    b3fc:	|  |         move.l d0,d0
    b3fe:	|  |         movea.w d0,a0
    b400:	|  |         move.l 156(sp),-(sp)
    b404:	|  |         move.l a0,-(sp)
    b406:	|  |         jsr a9c <putSigned>
    b40c:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b40e:	|  |         movea.l 148(sp),a0
    b412:	|  |         move.l 56(a0),d0
    b416:	|  |         move.l d0,d0
    b418:	|  |         movea.w d0,a0
    b41a:	|  |         move.l 156(sp),-(sp)
    b41e:	|  |         move.l a0,-(sp)
    b420:	|  |         jsr a9c <putSigned>
    b426:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b428:	|  |         movea.l 148(sp),a0
    b42c:	|  |         move.l 60(a0),d0
    b430:	|  |         move.l d0,d0
    b432:	|  |         movea.w d0,a0
    b434:	|  |         move.l 156(sp),-(sp)
    b438:	|  |         move.l a0,-(sp)
    b43a:	|  |         jsr a9c <putSigned>
    b440:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b442:	|  |         move.l 156(sp),64(sp)
    b448:	|  |         movea.l 148(sp),a0
    b44c:	|  |         move.b 126(a0),d0
    b450:	|  |         move.b d0,d0
    b452:	|  |         andi.l #255,d0
    b458:	|  |         move.l d0,60(sp)
    b45c:	|  |         move.l 1cb2e <DOSBase>,d0
    b462:	|  |         movea.l d0,a6
    b464:	|  |         move.l 64(sp),d1
    b468:	|  |         move.l 60(sp),d2
    b46c:	|  |         jsr -312(a6)
    b470:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b474:	|  |         move.l 156(sp),52(sp)
    b47a:	|  |         movea.l 148(sp),a0
    b47e:	|  |         move.b 127(a0),d0
    b482:	|  |         move.b d0,d0
    b484:	|  |         andi.l #255,d0
    b48a:	|  |         move.l d0,48(sp)
    b48e:	|  |         move.l 1cb2e <DOSBase>,d0
    b494:	|  |         movea.l d0,a6
    b496:	|  |         move.l 52(sp),d1
    b49a:	|  |         move.l 48(sp),d2
    b49e:	|  |         jsr -312(a6)
    b4a2:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b4a6:	|  |         move.l 156(sp),40(sp)
    b4ac:	|  |         movea.l 148(sp),a0
    b4b0:	|  |         move.b 128(a0),d0
    b4b4:	|  |         move.b d0,d0
    b4b6:	|  |         andi.l #255,d0
    b4bc:	|  |         move.l d0,36(sp)
    b4c0:	|  |         move.l 1cb2e <DOSBase>,d0
    b4c6:	|  |         movea.l d0,a6
    b4c8:	|  |         move.l 40(sp),d1
    b4cc:	|  |         move.l 36(sp),d2
    b4d0:	|  |         jsr -312(a6)
    b4d4:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b4d8:	|  |         move.l 156(sp),28(sp)
    b4de:	|  |         movea.l 148(sp),a0
    b4e2:	|  |         move.b 129(a0),d0
    b4e6:	|  |         move.b d0,d0
    b4e8:	|  |         andi.l #255,d0
    b4ee:	|  |         move.l d0,24(sp)
    b4f2:	|  |         move.l 1cb2e <DOSBase>,d0
    b4f8:	|  |         movea.l d0,a6
    b4fa:	|  |         move.l 28(sp),d1
    b4fe:	|  |         move.l 24(sp),d2
    b502:	|  |         jsr -312(a6)
    b506:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b50a:	|  |         move.l 156(sp),16(sp)
    b510:	|  |         movea.l 148(sp),a0
    b514:	|  |         move.b 130(a0),d0
    b518:	|  |         move.b d0,d0
    b51a:	|  |         andi.l #255,d0
    b520:	|  |         move.l d0,12(sp)
    b524:	|  |         move.l 1cb2e <DOSBase>,d0
    b52a:	|  |         movea.l d0,a6
    b52c:	|  |         move.l 16(sp),d1
    b530:	|  |         move.l 12(sp),d2
    b534:	|  |         jsr -312(a6)
    b538:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b53c:	|  |         movea.l 148(sp),a0
    b540:	|  |         move.l 114(a0),d0
    b544:	|  |         move.l 156(sp),-(sp)
    b548:	|  |         move.l d0,-(sp)
    b54a:	|  |         jsr d966 <saveObjectRef>
    b550:	|  |         addq.l #8,sp

		me = me -> next;
    b552:	|  |         movea.l 148(sp),a0
    b556:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b55c:	|  |         addq.l #1,140(sp)
    b560:	|  '-------> movea.l 140(sp),a0
    b564:	|            cmpa.l 144(sp),a0
    b568:	'----------- blt.w b10c <savePeople+0x76>
	}
	return TRUE;
    b56c:	             moveq #1,d0
}
    b56e:	             move.l (sp)+,d2
    b570:	             movea.l (sp)+,a6
    b572:	             lea 144(sp),sp
    b576:	             rts

0000b578 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b578:	movea.l 4(sp),a0
    b57c:	move.l 8(sp),(a0)
}
    b580:	nop
    b582:	rts

0000b584 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b584:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b586:	       move.l 12(sp),-(sp)
    b58a:	       jsr a5b0 <findPerson>
    b590:	       addq.l #4,sp
    b592:	       move.l d0,(sp)
	if (! moveMe) return;
    b594:	,----- beq.s b5a8 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b596:	|      move.l 8(sp),-(sp)
    b59a:	|      move.l 4(sp),-(sp)
    b59e:	|      jsr b5ae <setMyDrawMode>
    b5a4:	|      addq.l #8,sp
    b5a6:	|  ,-- bra.s b5aa <setDrawMode+0x26>
	if (! moveMe) return;
    b5a8:	'--|-> nop
}
    b5aa:	   '-> addq.l #4,sp
    b5ac:	       rts

0000b5ae <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b5ae:	       moveq #19,d0
    b5b0:	       cmp.l 8(sp),d0
    b5b4:	,----- bcs.w ba8c <setMyDrawMode+0x4de>
    b5b8:	|      move.l 8(sp),d0
    b5bc:	|      add.l d0,d0
    b5be:	|      movea.l d0,a0
    b5c0:	|      adda.l #46540,a0
    b5c6:	|      move.w (a0),d0
    b5c8:	|      jmp (b5cc <setMyDrawMode+0x1e>,pc,d0.w)
    b5cc:	|      .short 0x04c0
    b5ce:	|      ori.l #6684712,-(a4)
    b5d4:	|      btst d0,-(a0)
    b5d6:	|      bchg d0,(a6)+
    b5d8:	|      bclr d0,(a4)+
    b5da:	|      bset d0,(a2)+
    b5dc:	|      andi.b #84,(a6)
    b5e0:	|      andi.l #55575312,(a2)
    b5e6:	|      .short 0x02d0
    b5e8:	|      bclr d1,(a0)
    b5ea:	|      .short 0x044a
    b5ec:	|      .short 0x040c
    b5ee:	|      movep.l d1,1158(a6)
    b5f2:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b5f4:	|      movea.l 4(sp),a0
    b5f8:	|      clr.b 128(a0)
    b5fc:	|      movea.l 4(sp),a0
    b600:	|      move.b 128(a0),d0
    b604:	|      movea.l 4(sp),a0
    b608:	|      move.b d0,127(a0)
    b60c:	|      movea.l 4(sp),a0
    b610:	|      move.b 127(a0),d0
    b614:	|      movea.l 4(sp),a0
    b618:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b61c:	|      movea.l 4(sp),a0
    b620:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b624:	|      movea.l 4(sp),a0
    b628:	|      move.b #64,130(a0)
			break;
    b62e:	|  ,-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b632:	|  |   movea.l 4(sp),a0
    b636:	|  |   clr.b 128(a0)
    b63a:	|  |   movea.l 4(sp),a0
    b63e:	|  |   move.b 128(a0),d0
    b642:	|  |   movea.l 4(sp),a0
    b646:	|  |   move.b d0,127(a0)
    b64a:	|  |   movea.l 4(sp),a0
    b64e:	|  |   move.b 127(a0),d0
    b652:	|  |   movea.l 4(sp),a0
    b656:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b65a:	|  |   movea.l 4(sp),a0
    b65e:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b662:	|  |   movea.l 4(sp),a0
    b666:	|  |   move.b #-128,130(a0)
			break;
    b66c:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b670:	|  |   movea.l 4(sp),a0
    b674:	|  |   clr.b 128(a0)
    b678:	|  |   movea.l 4(sp),a0
    b67c:	|  |   move.b 128(a0),d0
    b680:	|  |   movea.l 4(sp),a0
    b684:	|  |   move.b d0,127(a0)
    b688:	|  |   movea.l 4(sp),a0
    b68c:	|  |   move.b 127(a0),d0
    b690:	|  |   movea.l 4(sp),a0
    b694:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b698:	|  |   movea.l 4(sp),a0
    b69c:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b6a0:	|  |   movea.l 4(sp),a0
    b6a4:	|  |   move.b #-64,130(a0)
			break;
    b6aa:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6ae:	|  |   movea.l 4(sp),a0
    b6b2:	|  |   clr.b 128(a0)
    b6b6:	|  |   movea.l 4(sp),a0
    b6ba:	|  |   move.b 128(a0),d0
    b6be:	|  |   movea.l 4(sp),a0
    b6c2:	|  |   move.b d0,127(a0)
    b6c6:	|  |   movea.l 4(sp),a0
    b6ca:	|  |   move.b 127(a0),d0
    b6ce:	|  |   movea.l 4(sp),a0
    b6d2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b6d6:	|  |   movea.l 4(sp),a0
    b6da:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b6de:	|  |   movea.l 4(sp),a0
    b6e2:	|  |   move.b #-2,130(a0)
			break;
    b6e8:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6ec:	|  |   movea.l 4(sp),a0
    b6f0:	|  |   clr.b 128(a0)
    b6f4:	|  |   movea.l 4(sp),a0
    b6f8:	|  |   move.b 128(a0),d0
    b6fc:	|  |   movea.l 4(sp),a0
    b700:	|  |   move.b d0,127(a0)
    b704:	|  |   movea.l 4(sp),a0
    b708:	|  |   move.b 127(a0),d0
    b70c:	|  |   movea.l 4(sp),a0
    b710:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b714:	|  |   movea.l 4(sp),a0
    b718:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b71e:	|  |   movea.l 4(sp),a0
    b722:	|  |   clr.b 130(a0)
			break;
    b726:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b72a:	|  |   movea.l 4(sp),a0
    b72e:	|  |   clr.b 128(a0)
    b732:	|  |   movea.l 4(sp),a0
    b736:	|  |   move.b 128(a0),d0
    b73a:	|  |   movea.l 4(sp),a0
    b73e:	|  |   move.b d0,127(a0)
    b742:	|  |   movea.l 4(sp),a0
    b746:	|  |   move.b 127(a0),d0
    b74a:	|  |   movea.l 4(sp),a0
    b74e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b752:	|  |   movea.l 4(sp),a0
    b756:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b75c:	|  |   movea.l 4(sp),a0
    b760:	|  |   clr.b 130(a0)
			break;
    b764:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b768:	|  |   movea.l 4(sp),a0
    b76c:	|  |   clr.b 128(a0)
    b770:	|  |   movea.l 4(sp),a0
    b774:	|  |   move.b 128(a0),d0
    b778:	|  |   movea.l 4(sp),a0
    b77c:	|  |   move.b d0,127(a0)
    b780:	|  |   movea.l 4(sp),a0
    b784:	|  |   move.b 127(a0),d0
    b788:	|  |   movea.l 4(sp),a0
    b78c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b790:	|  |   movea.l 4(sp),a0
    b794:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b79a:	|  |   movea.l 4(sp),a0
    b79e:	|  |   clr.b 130(a0)
			break;
    b7a2:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7a6:	|  |   movea.l 4(sp),a0
    b7aa:	|  |   clr.b 128(a0)
    b7ae:	|  |   movea.l 4(sp),a0
    b7b2:	|  |   move.b 128(a0),d0
    b7b6:	|  |   movea.l 4(sp),a0
    b7ba:	|  |   move.b d0,127(a0)
    b7be:	|  |   movea.l 4(sp),a0
    b7c2:	|  |   move.b 127(a0),d0
    b7c6:	|  |   movea.l 4(sp),a0
    b7ca:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b7ce:	|  |   movea.l 4(sp),a0
    b7d2:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b7d6:	|  |   movea.l 4(sp),a0
    b7da:	|  |   clr.b 130(a0)
			break;
    b7de:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7e2:	|  |   movea.l 4(sp),a0
    b7e6:	|  |   clr.b 128(a0)
    b7ea:	|  |   movea.l 4(sp),a0
    b7ee:	|  |   move.b 128(a0),d0
    b7f2:	|  |   movea.l 4(sp),a0
    b7f6:	|  |   move.b d0,127(a0)
    b7fa:	|  |   movea.l 4(sp),a0
    b7fe:	|  |   move.b 127(a0),d0
    b802:	|  |   movea.l 4(sp),a0
    b806:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b80a:	|  |   movea.l 4(sp),a0
    b80e:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b812:	|  |   movea.l 4(sp),a0
    b816:	|  |   move.b #64,130(a0)
			break;
    b81c:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b820:	|  |   movea.l 4(sp),a0
    b824:	|  |   clr.b 128(a0)
    b828:	|  |   movea.l 4(sp),a0
    b82c:	|  |   move.b 128(a0),d0
    b830:	|  |   movea.l 4(sp),a0
    b834:	|  |   move.b d0,127(a0)
    b838:	|  |   movea.l 4(sp),a0
    b83c:	|  |   move.b 127(a0),d0
    b840:	|  |   movea.l 4(sp),a0
    b844:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b848:	|  |   movea.l 4(sp),a0
    b84c:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b850:	|  |   movea.l 4(sp),a0
    b854:	|  |   move.b #-128,130(a0)
			break;
    b85a:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b85e:	|  |   movea.l 4(sp),a0
    b862:	|  |   clr.b 128(a0)
    b866:	|  |   movea.l 4(sp),a0
    b86a:	|  |   move.b 128(a0),d0
    b86e:	|  |   movea.l 4(sp),a0
    b872:	|  |   move.b d0,127(a0)
    b876:	|  |   movea.l 4(sp),a0
    b87a:	|  |   move.b 127(a0),d0
    b87e:	|  |   movea.l 4(sp),a0
    b882:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b886:	|  |   movea.l 4(sp),a0
    b88a:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b88e:	|  |   movea.l 4(sp),a0
    b892:	|  |   move.b #-64,130(a0)
			break;
    b898:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b89c:	|  |   movea.l 4(sp),a0
    b8a0:	|  |   move.b #-128,128(a0)
    b8a6:	|  |   movea.l 4(sp),a0
    b8aa:	|  |   move.b 128(a0),d0
    b8ae:	|  |   movea.l 4(sp),a0
    b8b2:	|  |   move.b d0,127(a0)
    b8b6:	|  |   movea.l 4(sp),a0
    b8ba:	|  |   move.b 127(a0),d0
    b8be:	|  |   movea.l 4(sp),a0
    b8c2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b8c6:	|  |   movea.l 4(sp),a0
    b8ca:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b8d0:	|  |   movea.l 4(sp),a0
    b8d4:	|  |   clr.b 130(a0)
			break;
    b8d8:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b8dc:	|  |   movea.l 4(sp),a0
    b8e0:	|  |   move.b #-128,128(a0)
    b8e6:	|  |   movea.l 4(sp),a0
    b8ea:	|  |   move.b 128(a0),d0
    b8ee:	|  |   movea.l 4(sp),a0
    b8f2:	|  |   move.b d0,127(a0)
    b8f6:	|  |   movea.l 4(sp),a0
    b8fa:	|  |   move.b 127(a0),d0
    b8fe:	|  |   movea.l 4(sp),a0
    b902:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b906:	|  |   movea.l 4(sp),a0
    b90a:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b910:	|  |   movea.l 4(sp),a0
    b914:	|  |   clr.b 130(a0)
			break;
    b918:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b91c:	|  |   movea.l 4(sp),a0
    b920:	|  |   move.b #-128,128(a0)
    b926:	|  |   movea.l 4(sp),a0
    b92a:	|  |   move.b 128(a0),d0
    b92e:	|  |   movea.l 4(sp),a0
    b932:	|  |   move.b d0,127(a0)
    b936:	|  |   movea.l 4(sp),a0
    b93a:	|  |   move.b 127(a0),d0
    b93e:	|  |   movea.l 4(sp),a0
    b942:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b946:	|  |   movea.l 4(sp),a0
    b94a:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b950:	|  |   movea.l 4(sp),a0
    b954:	|  |   clr.b 130(a0)
			break;
    b958:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b95c:	|  |   movea.l 4(sp),a0
    b960:	|  |   move.b #-128,128(a0)
    b966:	|  |   movea.l 4(sp),a0
    b96a:	|  |   move.b 128(a0),d0
    b96e:	|  |   movea.l 4(sp),a0
    b972:	|  |   move.b d0,127(a0)
    b976:	|  |   movea.l 4(sp),a0
    b97a:	|  |   move.b 127(a0),d0
    b97e:	|  |   movea.l 4(sp),a0
    b982:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b986:	|  |   movea.l 4(sp),a0
    b98a:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b98e:	|  |   movea.l 4(sp),a0
    b992:	|  |   clr.b 130(a0)
			break;
    b996:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b99a:	|  |   movea.l 4(sp),a0
    b99e:	|  |   st 128(a0)
    b9a2:	|  |   movea.l 4(sp),a0
    b9a6:	|  |   move.b 128(a0),d0
    b9aa:	|  |   movea.l 4(sp),a0
    b9ae:	|  |   move.b d0,127(a0)
    b9b2:	|  |   movea.l 4(sp),a0
    b9b6:	|  |   move.b 127(a0),d0
    b9ba:	|  |   movea.l 4(sp),a0
    b9be:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b9c2:	|  |   movea.l 4(sp),a0
    b9c6:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b9cc:	|  |   movea.l 4(sp),a0
    b9d0:	|  |   clr.b 130(a0)
			break;
    b9d4:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b9d8:	|  |   movea.l 4(sp),a0
    b9dc:	|  |   st 128(a0)
    b9e0:	|  |   movea.l 4(sp),a0
    b9e4:	|  |   move.b 128(a0),d0
    b9e8:	|  |   movea.l 4(sp),a0
    b9ec:	|  |   move.b d0,127(a0)
    b9f0:	|  |   movea.l 4(sp),a0
    b9f4:	|  |   move.b 127(a0),d0
    b9f8:	|  |   movea.l 4(sp),a0
    b9fc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    ba00:	|  |   movea.l 4(sp),a0
    ba04:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    ba0a:	|  |   movea.l 4(sp),a0
    ba0e:	|  |   clr.b 130(a0)
			break;
    ba12:	|  +-- bra.w bac6 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba16:	|  |   movea.l 4(sp),a0
    ba1a:	|  |   st 128(a0)
    ba1e:	|  |   movea.l 4(sp),a0
    ba22:	|  |   move.b 128(a0),d0
    ba26:	|  |   movea.l 4(sp),a0
    ba2a:	|  |   move.b d0,127(a0)
    ba2e:	|  |   movea.l 4(sp),a0
    ba32:	|  |   move.b 127(a0),d0
    ba36:	|  |   movea.l 4(sp),a0
    ba3a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    ba3e:	|  |   movea.l 4(sp),a0
    ba42:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    ba48:	|  |   movea.l 4(sp),a0
    ba4c:	|  |   clr.b 130(a0)
			break;
    ba50:	|  +-- bra.s bac6 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba52:	|  |   movea.l 4(sp),a0
    ba56:	|  |   st 128(a0)
    ba5a:	|  |   movea.l 4(sp),a0
    ba5e:	|  |   move.b 128(a0),d0
    ba62:	|  |   movea.l 4(sp),a0
    ba66:	|  |   move.b d0,127(a0)
    ba6a:	|  |   movea.l 4(sp),a0
    ba6e:	|  |   move.b 127(a0),d0
    ba72:	|  |   movea.l 4(sp),a0
    ba76:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    ba7a:	|  |   movea.l 4(sp),a0
    ba7e:	|  |   st 129(a0)
			moveMe->transparency = 0;
    ba82:	|  |   movea.l 4(sp),a0
    ba86:	|  |   clr.b 130(a0)
			break;
    ba8a:	|  +-- bra.s bac6 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ba8c:	'--|-> movea.l 4(sp),a0
    ba90:	   |   clr.b 128(a0)
    ba94:	   |   movea.l 4(sp),a0
    ba98:	   |   move.b 128(a0),d0
    ba9c:	   |   movea.l 4(sp),a0
    baa0:	   |   move.b d0,127(a0)
    baa4:	   |   movea.l 4(sp),a0
    baa8:	   |   move.b 127(a0),d0
    baac:	   |   movea.l 4(sp),a0
    bab0:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bab4:	   |   movea.l 4(sp),a0
    bab8:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    babc:	   |   movea.l 4(sp),a0
    bac0:	   |   clr.b 130(a0)
			break;
    bac4:	   |   nop
	}
}
    bac6:	   '-> nop
    bac8:	       rts

0000baca <shufflePeople>:

void shufflePeople () {
    baca:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    bace:	             move.l #117638,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    bad6:	             move.l 1cb86 <allPeople>,d0
    badc:	,----------- beq.w bbb2 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    bae0:	|     ,----- bra.w bba2 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    bae4:	|  ,--|----> movea.l 16(sp),a0
    bae8:	|  |  |      movea.l (a0),a0
    baea:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    baf0:	|  |  |      movea.l 16(sp),a0
    baf4:	|  |  |      movea.l (a0),a0
    baf6:	|  |  |      move.l 118(a0),d0
    bafa:	|  |  |      moveq #1,d1
    bafc:	|  |  |      and.l d1,d0
    bafe:	|  |  |  ,-- beq.s bb16 <shufflePeople+0x4c>
    bb00:	|  |  |  |   move.l #1148846080,-(sp)
    bb06:	|  |  |  |   move.l 16(sp),-(sp)
    bb0a:	|  |  |  |   jsr 174c6 <__addsf3>
    bb10:	|  |  |  |   addq.l #8,sp
    bb12:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    bb16:	|  |  |  '-> movea.l 16(sp),a0
    bb1a:	|  |  |      movea.l (a0),a0
    bb1c:	|  |  |      movea.l 36(a0),a0
    bb20:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    bb26:	|  |  |      movea.l 16(sp),a0
    bb2a:	|  |  |      movea.l (a0),a0
    bb2c:	|  |  |      movea.l 36(a0),a0
    bb30:	|  |  |      move.l 118(a0),d0
    bb34:	|  |  |      moveq #1,d1
    bb36:	|  |  |      and.l d1,d0
    bb38:	|  |  |  ,-- beq.s bb50 <shufflePeople+0x86>
    bb3a:	|  |  |  |   move.l #1148846080,-(sp)
    bb40:	|  |  |  |   move.l 12(sp),-(sp)
    bb44:	|  |  |  |   jsr 174c6 <__addsf3>
    bb4a:	|  |  |  |   addq.l #8,sp
    bb4c:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bb50:	|  |  |  '-> move.l 8(sp),-(sp)
    bb54:	|  |  |      move.l 16(sp),-(sp)
    bb58:	|  |  |      jsr 17876 <__gtsf2>
    bb5e:	|  |  |      addq.l #8,sp
    bb60:	|  |  |      tst.l d0
    bb62:	|  |  |  ,-- ble.s bb94 <shufflePeople+0xca>
			A = (*thisReference);
    bb64:	|  |  |  |   movea.l 16(sp),a0
    bb68:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bb6c:	|  |  |  |   movea.l 16(sp),a0
    bb70:	|  |  |  |   movea.l (a0),a0
    bb72:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    bb76:	|  |  |  |   movea.l (sp),a0
    bb78:	|  |  |  |   move.l 36(a0),d0
    bb7c:	|  |  |  |   movea.l 4(sp),a0
    bb80:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bb84:	|  |  |  |   movea.l (sp),a0
    bb86:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bb8c:	|  |  |  |   movea.l 16(sp),a0
    bb90:	|  |  |  |   move.l (sp),(a0)
    bb92:	|  |  +--|-- bra.s bba2 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bb94:	|  |  |  '-> movea.l 16(sp),a0
    bb98:	|  |  |      move.l (a0),d0
    bb9a:	|  |  |      moveq #36,d1
    bb9c:	|  |  |      add.l d0,d1
    bb9e:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bba2:	|  |  '----> movea.l 16(sp),a0
    bba6:	|  |         movea.l (a0),a0
    bba8:	|  |         move.l 36(a0),d0
    bbac:	|  '-------- bne.w bae4 <shufflePeople+0x1a>
    bbb0:	|        ,-- bra.s bbb4 <shufflePeople+0xea>
	if (!allPeople) return;
    bbb2:	'--------|-> nop
		}
	}
}
    bbb4:	         '-> lea 20(sp),sp
    bbb8:	             rts

0000bbba <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bbba:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bbbc:	       tst.l 8(sp)
    bbc0:	   ,-- bgt.s bbc6 <setCharacterWalkSpeed+0xc>
    bbc2:	   |   clr.w d0
    bbc4:	,--|-- bra.s bbe4 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bbc6:	|  '-> move.l 12(sp),-(sp)
    bbca:	|      jsr a5b0 <findPerson>
    bbd0:	|      addq.l #4,sp
    bbd2:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bbd4:	|  ,-- bne.s bbda <setCharacterWalkSpeed+0x20>
    bbd6:	|  |   clr.w d0
    bbd8:	+--|-- bra.s bbe4 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bbda:	|  '-> movea.l (sp),a0
    bbdc:	|      move.l 8(sp),28(a0)
	return TRUE;
    bbe2:	|      moveq #1,d0
}
    bbe4:	'----> addq.l #4,sp
    bbe6:	       rts

0000bbe8 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bbe8:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bbea:	       move.l 8(sp),-(sp)
    bbee:	       jsr a5b0 <findPerson>
    bbf4:	       addq.l #4,sp
    bbf6:	       move.l d0,(sp)
    if (thisPerson) {
    bbf8:	,----- beq.s bc18 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bbfa:	|      movea.l (sp),a0
    bbfc:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bc02:	|      moveq #2,d0
    bc04:	|      and.l 12(sp),d0
    bc08:	|  ,-- beq.s bc14 <setPersonExtra+0x2c>
    bc0a:	|  |   movea.l (sp),a0
    bc0c:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bc14:	|  '-> moveq #1,d0
    bc16:	|  ,-- bra.s bc1a <setPersonExtra+0x32>
    }
    return FALSE;
    bc18:	'--|-> clr.w d0
}
    bc1a:	   '-> addq.l #4,sp
    bc1c:	       rts

0000bc1e <setScale>:


void setScale (short int h, short int d) {
    bc1e:	subq.l #4,sp
    bc20:	move.l 8(sp),d1
    bc24:	move.l 12(sp),d0
    bc28:	move.w d1,d1
    bc2a:	move.w d1,2(sp)
    bc2e:	move.w d0,d0
    bc30:	move.w d0,(sp)
	scaleHorizon = h;
    bc32:	move.w 2(sp),1c4ac <scaleHorizon>
	scaleDivide = d;
    bc3a:	move.w (sp),1c4ae <scaleDivide>
}
    bc40:	nop
    bc42:	addq.l #4,sp
    bc44:	rts

0000bc46 <setShown>:

void setShown (BOOL h, int ob) {
    bc46:	    subq.l #8,sp
    bc48:	    move.l 12(sp),d0
    bc4c:	    move.w d0,d0
    bc4e:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bc52:	    move.l 16(sp),-(sp)
    bc56:	    jsr a5b0 <findPerson>
    bc5c:	    addq.l #4,sp
    bc5e:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bc62:	,-- beq.s bc6e <setShown+0x28>
    bc64:	|   movea.l 4(sp),a0
    bc68:	|   move.w 2(sp),104(a0)
}
    bc6e:	'-> nop
    bc70:	    addq.l #8,sp
    bc72:	    rts

0000bc74 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bc74:	       subq.l #8,sp
    bc76:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bc78:	       movea.l 16(sp),a0
    bc7c:	       move.l 92(a0),d0
    bc80:	       move.l d0,d1
    bc82:	       addi.l #360,d1
    bc88:	       movea.l 16(sp),a0
    bc8c:	       move.l 96(a0),d0
    bc90:	       move.l d1,d2
    bc92:	       sub.l d0,d2
    bc94:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bc98:	       movea.l 16(sp),a0
    bc9c:	       move.l 122(a0),d0
    bca0:	   ,-- beq.s bcac <spinStep+0x38>
    bca2:	   |   movea.l 16(sp),a0
    bca6:	   |   move.l 122(a0),d0
    bcaa:	,--|-- bra.s bcc6 <spinStep+0x52>
    bcac:	|  '-> movea.l 16(sp),a0
    bcb0:	|      movea.l 80(a0),a0
    bcb4:	|      move.l 4(a0),d0
    bcb8:	|      move.l d0,-(sp)
    bcba:	|      pea 168 <decodeFilename+0x50>
    bcbe:	|      jsr 17ce2 <__divsi3>
    bcc4:	|      addq.l #8,sp
    bcc6:	'----> move.l d0,4(sp)
	while (diff > 180) {
    bcca:	   ,-- bra.s bcd4 <spinStep+0x60>
		diff -= 360;
    bccc:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bcd4:	|  '-> cmpi.l #180,8(sp)
    bcdc:	'----- bgt.s bccc <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bcde:	       move.l 8(sp),d0
    bce2:	       cmp.l 4(sp),d0
    bce6:	   ,-- blt.s bd04 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    bce8:	   |   movea.l 16(sp),a0
    bcec:	   |   move.l 92(a0),d0
    bcf0:	   |   sub.l 4(sp),d0
    bcf4:	   |   move.l d0,-(sp)
    bcf6:	   |   move.l 20(sp),-(sp)
    bcfa:	   |   jsr bde4 <turnMeAngle>
    bd00:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bd02:	,--|-- bra.s bd4a <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bd04:	|  '-> move.l 4(sp),d0
    bd08:	|      neg.l d0
    bd0a:	|      cmp.l 8(sp),d0
    bd0e:	|  ,-- blt.s bd2c <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bd10:	|  |   movea.l 16(sp),a0
    bd14:	|  |   move.l 92(a0),d0
    bd18:	|  |   add.l 4(sp),d0
    bd1c:	|  |   move.l d0,-(sp)
    bd1e:	|  |   move.l 20(sp),-(sp)
    bd22:	|  |   jsr bde4 <turnMeAngle>
    bd28:	|  |   addq.l #8,sp
}
    bd2a:	+--|-- bra.s bd4a <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bd2c:	|  '-> movea.l 16(sp),a0
    bd30:	|      move.l 96(a0),d0
    bd34:	|      move.l d0,-(sp)
    bd36:	|      move.l 20(sp),-(sp)
    bd3a:	|      jsr bde4 <turnMeAngle>
    bd40:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    bd42:	|      movea.l 16(sp),a0
    bd46:	|      clr.w 66(a0)
}
    bd4a:	'----> nop
    bd4c:	       move.l (sp)+,d2
    bd4e:	       addq.l #8,sp
    bd50:	       rts

0000bd52 <stopPerson>:


BOOL stopPerson (int o) {
    bd52:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bd54:	       move.l 8(sp),-(sp)
    bd58:	       jsr a5b0 <findPerson>
    bd5e:	       addq.l #4,sp
    bd60:	       move.l d0,(sp)
    if (moveMe)
    bd62:	,----- beq.s bda0 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bd64:	|      movea.l (sp),a0
    bd66:	|      move.l 68(a0),d0
    bd6a:	+----- beq.s bda0 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bd6c:	|      movea.l (sp),a0
    bd6e:	|      move.l 68(a0),d0
    bd72:	|      move.l d0,-(sp)
    bd74:	|      jsr 4faa <abortFunction>
    bd7a:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bd7c:	|      movea.l (sp),a0
    bd7e:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bd82:	|      movea.l (sp),a0
    bd84:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bd88:	|      movea.l (sp),a0
    bd8a:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bd8e:	|      clr.l -(sp)
    bd90:	|      move.l 4(sp),-(sp)
    bd94:	|      jsr 414c <setFrames>
    bd9a:	|      addq.l #8,sp
            return TRUE;
    bd9c:	|      moveq #1,d0
    bd9e:	|  ,-- bra.s bda2 <stopPerson+0x50>
        }
    return FALSE;
    bda0:	'--|-> clr.w d0
}
    bda2:	   '-> addq.l #4,sp
    bda4:	       rts

0000bda6 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bda6:	       subq.l #8,sp
	int total = 0;
    bda8:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bdac:	       clr.l (sp)
    bdae:	   ,-- bra.s bdd0 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bdb0:	,--|-> movea.l 12(sp),a0
    bdb4:	|  |   movea.l 4(a0),a0
    bdb8:	|  |   move.l (sp),d1
    bdba:	|  |   move.l d1,d0
    bdbc:	|  |   add.l d0,d0
    bdbe:	|  |   add.l d1,d0
    bdc0:	|  |   add.l d0,d0
    bdc2:	|  |   add.l d0,d0
    bdc4:	|  |   adda.l d0,a0
    bdc6:	|  |   move.l 4(a0),d0
    bdca:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bdce:	|  |   addq.l #1,(sp)
    bdd0:	|  '-> movea.l 12(sp),a0
    bdd4:	|      move.l 8(a0),d0
    bdd8:	|      cmp.l (sp),d0
    bdda:	'----- bgt.s bdb0 <timeForAnim+0xa>
	}
	return total;
    bddc:	       move.l 4(sp),d0
}
    bde0:	       addq.l #8,sp
    bde2:	       rts

0000bde4 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bde4:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bde6:	       movea.l 8(sp),a0
    bdea:	       movea.l 80(a0),a0
    bdee:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    bdf2:	       movea.l 8(sp),a0
    bdf6:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    bdfc:	       move.l (sp),-(sp)
    bdfe:	       pea b4 <_start+0xb4>
    be02:	       jsr 17ce2 <__divsi3>
    be08:	       addq.l #8,sp
    be0a:	       move.l d0,d1
    be0c:	       addi.l #180,d1
    be12:	       movea.l 8(sp),a0
    be16:	       move.l 100(a0),d0
    be1a:	       add.l d1,d0
    be1c:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    be20:	   ,-- bra.s be2a <turnMeAngle+0x46>
    be22:	,--|-> addi.l #-360,12(sp)
    be2a:	|  '-> cmpi.l #359,12(sp)
    be32:	'----- bgt.s be22 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    be34:	       move.l (sp),-(sp)
    be36:	       move.l 16(sp),-(sp)
    be3a:	       jsr 17c64 <__mulsi3>
    be40:	       addq.l #8,sp
    be42:	       pea 168 <decodeFilename+0x50>
    be46:	       move.l d0,-(sp)
    be48:	       jsr 17ce2 <__divsi3>
    be4e:	       addq.l #8,sp
    be50:	       movea.l 8(sp),a0
    be54:	       move.l d0,106(a0)
}
    be58:	       nop
    be5a:	       addq.l #4,sp
    be5c:	       rts

0000be5e <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    be5e:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    be60:	          move.l 8(sp),-(sp)
    be64:	          jsr a5b0 <findPerson>
    be6a:	          addq.l #4,sp
    be6c:	          move.l d0,(sp)
    if (thisPerson) {
    be6e:	,-------- beq.s bece <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    be70:	|         movea.l (sp),a0
    be72:	|         move.l 68(a0),d0
    be76:	|     ,-- beq.s be88 <turnPersonToFace+0x2a>
    be78:	|     |   movea.l (sp),a0
    be7a:	|     |   move.l 68(a0),d0
    be7e:	|     |   move.l d0,-(sp)
    be80:	|     |   jsr 4faa <abortFunction>
    be86:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    be88:	|     '-> movea.l (sp),a0
    be8a:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    be8e:	|         movea.l (sp),a0
    be90:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    be94:	|         movea.l (sp),a0
    be96:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    be9a:	|         move.l 12(sp),-(sp)
    be9e:	|         move.l 4(sp),-(sp)
    bea2:	|         jsr bde4 <turnMeAngle>
    bea8:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    beaa:	|         movea.l 1ca76 <speech>,a0
    beb0:	|         move.l (a0),d0
    beb2:	|         cmp.l (sp),d0
    beb4:	|  ,----- bne.s beba <turnPersonToFace+0x5c>
    beb6:	|  |      moveq #2,d0
    beb8:	|  |  ,-- bra.s bebc <turnPersonToFace+0x5e>
    beba:	|  '--|-> moveq #0,d0
    bebc:	|     '-> move.l d0,-(sp)
    bebe:	|         move.l 4(sp),-(sp)
    bec2:	|         jsr 414c <setFrames>
    bec8:	|         addq.l #8,sp
        return TRUE;
    beca:	|         moveq #1,d0
    becc:	|     ,-- bra.s bed0 <turnPersonToFace+0x72>
    }
    return FALSE;
    bece:	'-----|-> clr.w d0
}
    bed0:	      '-> addq.l #4,sp
    bed2:	          rts

0000bed4 <walkAllPeople>:

void walkAllPeople() {
    bed4:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    bed6:	             move.l 1cb86 <allPeople>,(sp)

	while (thisPerson) {
    bedc:	   ,-------- bra.s bf4c <walkAllPeople+0x78>
		if (thisPerson->walking) {
    bede:	,--|-------> movea.l (sp),a0
    bee0:	|  |         move.w 64(a0),d0
    bee4:	|  |     ,-- beq.s bef8 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    bee6:	|  |     |   pea 1 <_start+0x1>
    beea:	|  |     |   move.l 4(sp),-(sp)
    beee:	|  |     |   jsr bf58 <walkMe>
    bef4:	|  |     |   addq.l #8,sp
    bef6:	|  |  ,--|-- bra.s bf18 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    bef8:	|  |  |  '-> movea.l (sp),a0
    befa:	|  |  |      move.w 66(a0),d0
    befe:	|  |  +----- beq.s bf18 <walkAllPeople+0x44>
			spinStep(thisPerson);
    bf00:	|  |  |      move.l (sp),-(sp)
    bf02:	|  |  |      jsr bc74 <spinStep>
    bf08:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    bf0a:	|  |  |      clr.l -(sp)
    bf0c:	|  |  |      move.l 4(sp),-(sp)
    bf10:	|  |  |      jsr 414c <setFrames>
    bf16:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    bf18:	|  |  '----> movea.l (sp),a0
    bf1a:	|  |         move.w 64(a0),d0
    bf1e:	|  |     ,-- bne.s bf46 <walkAllPeople+0x72>
    bf20:	|  |     |   movea.l (sp),a0
    bf22:	|  |     |   move.w 66(a0),d0
    bf26:	|  |     +-- bne.s bf46 <walkAllPeople+0x72>
    bf28:	|  |     |   movea.l (sp),a0
    bf2a:	|  |     |   move.l 68(a0),d0
    bf2e:	|  |     +-- beq.s bf46 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    bf30:	|  |     |   movea.l (sp),a0
    bf32:	|  |     |   move.l 68(a0),d0
    bf36:	|  |     |   move.l d0,-(sp)
    bf38:	|  |     |   jsr 711c <restartFunction>
    bf3e:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    bf40:	|  |     |   movea.l (sp),a0
    bf42:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    bf46:	|  |     '-> movea.l (sp),a0
    bf48:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    bf4c:	|  '-------> tst.l (sp)
    bf4e:	'----------- bne.s bede <walkAllPeople+0xa>
	}
}
    bf50:	             nop
    bf52:	             nop
    bf54:	             addq.l #4,sp
    bf56:	             rts

0000bf58 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bf58:	                lea -20(sp),sp
    bf5c:	                move.l d3,-(sp)
    bf5e:	                move.l d2,-(sp)
    bf60:	                move.l 36(sp),d0
    bf64:	                move.w d0,d0
    bf66:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bf6a:	                cmpi.w #-1,10(sp)
    bf70:	,-------------- bne.s bf78 <walkMe+0x20>
    bf72:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bf78:	>-------------> movea.l 32(sp),a0
    bf7c:	|               move.l 48(a0),d0
    bf80:	|               move.l d0,-(sp)
    bf82:	|               jsr 1770a <__floatsisf>
    bf88:	|               addq.l #4,sp
    bf8a:	|               move.l d0,d1
    bf8c:	|               movea.l 32(sp),a0
    bf90:	|               move.l (a0),d0
    bf92:	|               move.l d0,-(sp)
    bf94:	|               move.l d1,-(sp)
    bf96:	|               jsr 179fe <__subsf3>
    bf9c:	|               addq.l #8,sp
    bf9e:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    bfa2:	|               movea.l 32(sp),a0
    bfa6:	|               move.l 52(a0),d0
    bfaa:	|               move.l d0,-(sp)
    bfac:	|               jsr 1770a <__floatsisf>
    bfb2:	|               addq.l #4,sp
    bfb4:	|               move.l d0,d1
    bfb6:	|               movea.l 32(sp),a0
    bfba:	|               move.l 4(a0),d0
    bfbe:	|               move.l d0,-(sp)
    bfc0:	|               move.l d1,-(sp)
    bfc2:	|               jsr 179fe <__subsf3>
    bfc8:	|               addq.l #8,sp
    bfca:	|               move.l d0,-(sp)
    bfcc:	|               move.l d0,-(sp)
    bfce:	|               jsr 174c6 <__addsf3>
    bfd4:	|               addq.l #8,sp
    bfd6:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    bfda:	|               movea.l 32(sp),a0
    bfde:	|               move.l 32(a0),d2
    bfe2:	|               movea.l 32(sp),a0
    bfe6:	|               move.l 28(a0),d0
    bfea:	|               move.l d0,-(sp)
    bfec:	|               jsr 1770a <__floatsisf>
    bff2:	|               addq.l #4,sp
    bff4:	|               move.l d0,-(sp)
    bff6:	|               move.l d2,-(sp)
    bff8:	|               jsr 177bc <__mulsf3>
    bffe:	|               addq.l #8,sp
    c000:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c004:	|               move.l 24(sp),-(sp)
    c008:	|               jsr 1762c <__extendsfdf2>
    c00e:	|               addq.l #4,sp
    c010:	|               move.l #-1717986918,-(sp)
    c016:	|               move.l #1070176665,-(sp)
    c01c:	|               move.l d1,-(sp)
    c01e:	|               move.l d0,-(sp)
    c020:	|               jsr 178e2 <__ltdf2>
    c026:	|               lea 16(sp),sp
    c02a:	|               tst.l d0
    c02c:	|           ,-- bge.s c036 <walkMe+0xde>
    c02e:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c036:	|           '-> move.l 20(sp),-(sp)
    c03a:	|               jsr 176a2 <__fixsfsi>
    c040:	|               addq.l #4,sp
    c042:	|               move.l d0,-(sp)
    c044:	|               jsr 91a0 <TF_abs>
    c04a:	|               addq.l #4,sp
    c04c:	|               move.l d0,d2
    c04e:	|               move.l 16(sp),-(sp)
    c052:	|               jsr 176a2 <__fixsfsi>
    c058:	|               addq.l #4,sp
    c05a:	|               move.l d0,-(sp)
    c05c:	|               jsr 91a0 <TF_abs>
    c062:	|               addq.l #4,sp
    c064:	|               cmp.l d2,d0
    c066:	|        ,----- bgt.s c08a <walkMe+0x132>
    c068:	|        |      move.l 20(sp),-(sp)
    c06c:	|        |      jsr 176a2 <__fixsfsi>
    c072:	|        |      addq.l #4,sp
    c074:	|        |      move.l d0,-(sp)
    c076:	|        |      jsr 91a0 <TF_abs>
    c07c:	|        |      addq.l #4,sp
    c07e:	|        |      move.l d0,-(sp)
    c080:	|        |      jsr 1770a <__floatsisf>
    c086:	|        |      addq.l #4,sp
    c088:	|        |  ,-- bra.s c0aa <walkMe+0x152>
    c08a:	|        '--|-> move.l 16(sp),-(sp)
    c08e:	|           |   jsr 176a2 <__fixsfsi>
    c094:	|           |   addq.l #4,sp
    c096:	|           |   move.l d0,-(sp)
    c098:	|           |   jsr 91a0 <TF_abs>
    c09e:	|           |   addq.l #4,sp
    c0a0:	|           |   move.l d0,-(sp)
    c0a2:	|           |   jsr 1770a <__floatsisf>
    c0a8:	|           |   addq.l #4,sp
    c0aa:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c0ae:	|               move.l 12(sp),-(sp)
    c0b2:	|               jsr 176a2 <__fixsfsi>
    c0b8:	|               addq.l #4,sp
    c0ba:	|               move.l d0,-(sp)
    c0bc:	|               jsr 91a0 <TF_abs>
    c0c2:	|               addq.l #4,sp
    c0c4:	|               move.l d0,-(sp)
    c0c6:	|               jsr 1770a <__floatsisf>
    c0cc:	|               addq.l #4,sp
    c0ce:	|               move.l d0,-(sp)
    c0d0:	|               move.l 28(sp),-(sp)
    c0d4:	|               jsr 17930 <__ltsf2>
    c0da:	|               addq.l #8,sp
    c0dc:	|               tst.l d0
    c0de:	|        ,----- bge.w c190 <walkMe+0x238>
			if (thisPerson->spinning) {
    c0e2:	|        |      movea.l 32(sp),a0
    c0e6:	|        |      move.w 66(a0),d0
    c0ea:	|        |  ,-- beq.s c108 <walkMe+0x1b0>
				spinStep(thisPerson);
    c0ec:	|        |  |   move.l 32(sp),-(sp)
    c0f0:	|        |  |   jsr bc74 <spinStep>
    c0f6:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c0f8:	|        |  |   pea 1 <_start+0x1>
    c0fc:	|        |  |   move.l 36(sp),-(sp)
    c100:	|        |  |   jsr 414c <setFrames>
    c106:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c108:	|        |  '-> move.l 24(sp),-(sp)
    c10c:	|        |      move.l 16(sp),-(sp)
    c110:	|        |      jsr 175c0 <__divsf3>
    c116:	|        |      addq.l #8,sp
    c118:	|        |      move.l d0,24(sp)
			if (move)
    c11c:	|        |      tst.w 10(sp)
    c120:	|        |  ,-- beq.s c18a <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c122:	|        |  |   movea.l 32(sp),a0
    c126:	|        |  |   move.l 4(a0),d2
    c12a:	|        |  |   move.l 24(sp),d0
    c12e:	|        |  |   move.l d0,-(sp)
    c130:	|        |  |   move.l d0,-(sp)
    c132:	|        |  |   jsr 174c6 <__addsf3>
    c138:	|        |  |   addq.l #8,sp
    c13a:	|        |  |   move.l d0,-(sp)
    c13c:	|        |  |   move.l 20(sp),-(sp)
    c140:	|        |  |   jsr 175c0 <__divsf3>
    c146:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c148:	|        |  |   move.l d0,-(sp)
    c14a:	|        |  |   move.l d2,-(sp)
    c14c:	|        |  |   jsr 174c6 <__addsf3>
    c152:	|        |  |   addq.l #8,sp
    c154:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c156:	|        |  |   movea.l 32(sp),a0
    c15a:	|        |  |   move.l (a0),d3
    c15c:	|        |  |   move.l 24(sp),-(sp)
    c160:	|        |  |   move.l 24(sp),-(sp)
    c164:	|        |  |   jsr 175c0 <__divsf3>
    c16a:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c16c:	|        |  |   move.l d0,-(sp)
    c16e:	|        |  |   move.l d3,-(sp)
    c170:	|        |  |   jsr 174c6 <__addsf3>
    c176:	|        |  |   addq.l #8,sp
    c178:	|        |  |   move.l d2,-(sp)
    c17a:	|        |  |   move.l d0,-(sp)
    c17c:	|        |  |   move.l 40(sp),-(sp)
    c180:	|        |  |   jsr ad5a <moveAndScale>
    c186:	|        |  |   lea 12(sp),sp
			return TRUE;
    c18a:	|        |  '-> moveq #1,d0
    c18c:	|  ,-----|----- bra.w c23e <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c190:	|  |     '----> movea.l 32(sp),a0
    c194:	|  |            move.l 56(a0),d0
    c198:	|  |            moveq #-1,d1
    c19a:	|  |            cmp.l d0,d1
    c19c:	|  |        ,-- bne.s c1d4 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c19e:	|  |        |   movea.l 32(sp),a0
    c1a2:	|  |        |   move.l 110(a0),d0
    c1a6:	|  |        |   moveq #-1,d1
    c1a8:	|  |        |   cmp.l d0,d1
    c1aa:	|  |  ,-----|-- beq.s c1e8 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c1ac:	|  |  |     |   movea.l 32(sp),a0
    c1b0:	|  |  |     |   move.l 110(a0),d0
    c1b4:	|  |  |     |   movea.l 32(sp),a0
    c1b8:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c1bc:	|  |  |     |   movea.l 32(sp),a0
    c1c0:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c1c6:	|  |  |     |   move.l 32(sp),-(sp)
    c1ca:	|  |  |     |   jsr bc74 <spinStep>
    c1d0:	|  |  |     |   addq.l #4,sp
			}
			break;
    c1d2:	|  |  +-----|-- bra.s c1e8 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c1d4:	|  |  |     '-> move.l 32(sp),-(sp)
    c1d8:	|  |  |         jsr 9912 <doBorderStuff>
    c1de:	|  |  |         addq.l #4,sp
    c1e0:	|  |  |         tst.w d0
    c1e2:	|  |  |  ,----- beq.s c1ec <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c1e4:	'--|--|--|----- bra.w bf78 <walkMe+0x20>
			break;
    c1e8:	   |  '--|----> nop
    c1ea:	   |     |  ,-- bra.s c1ee <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c1ec:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    c1ee:	   |        '-> movea.l 32(sp),a0
    c1f2:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c1f6:	   |            clr.l -(sp)
    c1f8:	   |            move.l 36(sp),-(sp)
    c1fc:	   |            jsr 414c <setFrames>
    c202:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c204:	   |            movea.l 32(sp),a0
    c208:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c20c:	   |            move.l d0,-(sp)
    c20e:	   |            jsr 1770a <__floatsisf>
    c214:	   |            addq.l #4,sp
    c216:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c218:	   |            movea.l 32(sp),a0
    c21c:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c220:	   |            move.l d0,-(sp)
    c222:	   |            jsr 1770a <__floatsisf>
    c228:	   |            addq.l #4,sp
    c22a:	   |            move.l d2,-(sp)
    c22c:	   |            move.l d0,-(sp)
    c22e:	   |            move.l 40(sp),-(sp)
    c232:	   |            jsr ad5a <moveAndScale>
    c238:	   |            lea 12(sp),sp
	return FALSE;
    c23c:	   |            clr.w d0
}
    c23e:	   '----------> move.l (sp)+,d2
    c240:	                move.l (sp)+,d3
    c242:	                lea 20(sp),sp
    c246:	                rts

0000c248 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c248:	       subq.l #8,sp
    c24a:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c24c:	   ,-- bra.s c27c <clearStackLib+0x34>
		k = stackLib;
    c24e:	,--|-> move.l 1cbb2 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c256:	|  |   movea.l 1cbb2 <stackLib>,a0
    c25c:	|  |   move.l 4(a0),d0
    c260:	|  |   move.l d0,1cbb2 <stackLib>
		FreeVec(k);
    c266:	|  |   move.l 8(sp),4(sp)
    c26c:	|  |   move.l 1cb26 <SysBase>,d0
    c272:	|  |   movea.l d0,a6
    c274:	|  |   movea.l 4(sp),a1
    c278:	|  |   jsr -690(a6)
	while (stackLib) {
    c27c:	|  '-> move.l 1cbb2 <stackLib>,d0
    c282:	'----- bne.s c24e <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c284:	       clr.l 1cbae <stackLibTotal>
}
    c28a:	       nop
    c28c:	       movea.l (sp)+,a6
    c28e:	       addq.l #8,sp
    c290:	       rts

0000c292 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c292:	          lea -128(sp),sp
    c296:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c29a:	      ,-- bra.s c2ac <loadGame+0x1a>
    c29c:	   ,--|-> move.l 1cabe <allRunningFunctions>,d0
    c2a2:	   |  |   move.l d0,-(sp)
    c2a4:	   |  |   jsr 5fde <finishFunction>
    c2aa:	   |  |   addq.l #4,sp
    c2ac:	   |  '-> move.l 1cabe <allRunningFunctions>,d0
    c2b2:	   '----- bne.s c29c <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c2b4:	          pea 1cbb6 <ssgVersion>
    c2ba:	          pea 19413 <PutChar+0x1699>
    c2c0:	          pea 41 <_start+0x41>
    c2c4:	          pea 53 <_start+0x53>
    c2c8:	          move.l 160(sp),-(sp)
    c2cc:	          jsr 6d04 <openAndVerify>
    c2d2:	          lea 20(sp),sp
    c2d6:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c2da:	      ,-- bne.s c2e2 <loadGame+0x50>
    c2dc:	      |   clr.w d0
    c2de:	,-----|-- bra.w c588 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c2e2:	|     '-> move.l 112(sp),108(sp)
    c2e8:	|         lea 140(sp),a0
    c2ec:	|         lea -126(a0),a0
    c2f0:	|         move.l a0,120(sp)
    c2f4:	|         moveq #8,d0
    c2f6:	|         move.l d0,116(sp)
    c2fa:	|         move.l 1cb2e <DOSBase>,d0
    c300:	|         movea.l d0,a6
    c302:	|         move.l 108(sp),d1
    c306:	|         move.l 120(sp),d2
    c30a:	|         move.l 116(sp),d3
    c30e:	|         jsr -42(a6)
    c312:	|         move.l d0,132(sp)
    c316:	|         move.l 132(sp),d0
    c31a:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c31e:	|         moveq #8,d0
    c320:	|         cmp.l 128(sp),d0
    c324:	|     ,-- beq.s c334 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c326:	|     |   pea 19434 <PutChar+0x16ba>
    c32c:	|     |   jsr 172d8 <KPrintF>
    c332:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c334:	|     '-> move.l 14(sp),d1
    c338:	|         move.l 1cac8 <fileTime>,d0
    c33e:	|         cmp.l d1,d0
    c340:	|     ,-- bne.s c350 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c342:	|     |   move.l 18(sp),d1
    c346:	|     |   move.l 1cacc <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c34c:	|     |   cmp.l d1,d0
    c34e:	|  ,--|-- beq.s c370 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c350:	|  |  '-> move.l 144(sp),-(sp)
    c354:	|  |      pea 19450 <PutChar+0x16d6>
    c35a:	|  |      pea 19517 <PutChar+0x179d>
    c360:	|  |      jsr 172d8 <KPrintF>
    c366:	|  |      lea 12(sp),sp
		return FALSE; 
    c36a:	|  |      clr.w d0
    c36c:	+--|----- bra.w c588 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c370:	|  '----> move.l 112(sp),124(sp)
    c376:	|         move.l 1cb2e <DOSBase>,d0
    c37c:	|         movea.l d0,a6
    c37e:	|         move.l 124(sp),d1
    c382:	|         jsr -306(a6)
    c386:	|         move.l d0,136(sp)
    c38a:	|         move.l 136(sp),d0
    c38e:	|         move.l d0,d0
    c390:	|         move.w d0,1c376 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c396:	|         move.l 112(sp),100(sp)
    c39c:	|         move.l 1cb2e <DOSBase>,d0
    c3a2:	|         movea.l d0,a6
    c3a4:	|         move.l 100(sp),d1
    c3a8:	|         jsr -306(a6)
    c3ac:	|         move.l d0,96(sp)
    c3b0:	|         move.l 96(sp),d0
    c3b4:	|         move.l d0,d0
    c3b6:	|         move.w d0,1cac6 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c3bc:	|         move.l 112(sp),92(sp)
    c3c2:	|         move.l 1cb2e <DOSBase>,d0
    c3c8:	|         movea.l d0,a6
    c3ca:	|         move.l 92(sp),d1
    c3ce:	|         jsr -306(a6)
    c3d2:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c3d6:	|         move.l 112(sp),84(sp)
    c3dc:	|         move.l 1cb2e <DOSBase>,d0
    c3e2:	|         movea.l d0,a6
    c3e4:	|         move.l 84(sp),d1
    c3e8:	|         jsr -306(a6)
    c3ec:	|         move.l d0,80(sp)
    c3f0:	|         move.l 80(sp),d0
    c3f4:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c3f8:	|     ,-- beq.s c42c <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c3fa:	|     |   move.l 112(sp),-(sp)
    c3fe:	|     |   jsr 6bc <get2bytes>
    c404:	|     |   addq.l #4,sp
    c406:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c40a:	|     |   move.l 112(sp),-(sp)
    c40e:	|     |   jsr 6bc <get2bytes>
    c414:	|     |   addq.l #4,sp
    c416:	|     |   move.l d0,1cc1a <fontHeight>
		charOrder = readString(fp);		
    c41c:	|     |   move.l 112(sp),-(sp)
    c420:	|     |   jsr b02 <readString>
    c426:	|     |   addq.l #4,sp
    c428:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c42c:	|     '-> move.l 104(sp),70(sp)
    c432:	|         move.l 1cb26 <SysBase>,d0
    c438:	|         movea.l d0,a6
    c43a:	|         movea.l 70(sp),a1
    c43e:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c442:	|         move.l 112(sp),-(sp)
    c446:	|         jsr 854 <getSigned>
    c44c:	|         addq.l #4,sp
    c44e:	|         move.w d0,1ca1e <fontSpace>

	killAllPeople ();
    c454:	|         jsr a9c4 <killAllPeople>
	killAllRegions ();
    c45a:	|         jsr 15ae8 <killAllRegions>

	int camerX = get2bytes (fp);
    c460:	|         move.l 112(sp),-(sp)
    c464:	|         jsr 6bc <get2bytes>
    c46a:	|         addq.l #4,sp
    c46c:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c470:	|         move.l 112(sp),-(sp)
    c474:	|         jsr 6bc <get2bytes>
    c47a:	|         addq.l #4,sp
    c47c:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c480:	|         move.l 112(sp),-(sp)
    c484:	|         jsr 7d8 <getFloat>
    c48a:	|         addq.l #4,sp
    c48c:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c490:	|         move.l 112(sp),54(sp)
    c496:	|         move.l 1cb2e <DOSBase>,d0
    c49c:	|         movea.l d0,a6
    c49e:	|         move.l 54(sp),d1
    c4a2:	|         jsr -306(a6)
    c4a6:	|         move.l d0,50(sp)
    c4aa:	|         move.l 50(sp),d0
    c4ae:	|         move.l d0,d0
    c4b0:	|         move.b d0,1c494 <brightnessLevel>

	loadHandlers (fp);
    c4b6:	|         move.l 112(sp),-(sp)
    c4ba:	|         jsr 6c64 <loadHandlers>
    c4c0:	|         addq.l #4,sp
	loadRegions (fp);
    c4c2:	|         move.l 112(sp),-(sp)
    c4c6:	|         jsr 15b44 <loadRegions>
    c4cc:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c4ce:	|         moveq #12,d0
    c4d0:	|         move.l d0,46(sp)
    c4d4:	|         clr.l 42(sp)
    c4d8:	|         move.l 1cb26 <SysBase>,d0
    c4de:	|         movea.l d0,a6
    c4e0:	|         move.l 46(sp),d0
    c4e4:	|         move.l 42(sp),d1
    c4e8:	|         jsr -684(a6)
    c4ec:	|         move.l d0,38(sp)
    c4f0:	|         move.l 38(sp),d0
    c4f4:	|         move.l d0,1ca20 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c4fa:	|         move.l 1ca20 <mouseCursorAnim>,d0
    c500:	|     ,-- bne.s c514 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c502:	|     |   pea 19521 <PutChar+0x17a7>
    c508:	|     |   jsr 172d8 <KPrintF>
    c50e:	|     |   addq.l #4,sp
		return FALSE;
    c510:	|     |   clr.w d0
    c512:	+-----|-- bra.s c588 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c514:	|     '-> jsr d3b8 <nosnapshot>
	if (FGetC (fp)) {
    c51a:	|         move.l 112(sp),34(sp)
    c520:	|         move.l 1cb2e <DOSBase>,d0
    c526:	|         movea.l d0,a6
    c528:	|         move.l 34(sp),d1
    c52c:	|         jsr -306(a6)
    c530:	|         move.l d0,30(sp)
    c534:	|         move.l 30(sp),d0
    c538:	|     ,-- beq.s c54e <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c53a:	|     |   move.l 112(sp),-(sp)
    c53e:	|     |   jsr d438 <restoreSnapshot>
    c544:	|     |   addq.l #4,sp
    c546:	|     |   tst.w d0
    c548:	|     +-- bne.s c54e <loadGame+0x2bc>
    c54a:	|     |   clr.w d0
    c54c:	+-----|-- bra.s c588 <loadGame+0x2f6>
	}

	Close (fp);
    c54e:	|     '-> move.l 112(sp),26(sp)
    c554:	|         move.l 1cb2e <DOSBase>,d0
    c55a:	|         movea.l d0,a6
    c55c:	|         move.l 26(sp),d1
    c560:	|         jsr -36(a6)
    c564:	|         move.l d0,22(sp)
	clearStackLib ();
    c568:	|         jsr c248 <clearStackLib>

	cameraX = camerX;
    c56e:	|         move.l 66(sp),1cbdc <cameraX>
	cameraY = camerY;
    c576:	|         move.l 62(sp),1cbe0 <cameraY>
	cameraZoom = camerZ;
    c57e:	|         move.l 58(sp),1c4b8 <cameraZoom>

	return TRUE;
    c586:	|         moveq #1,d0
}
    c588:	'-------> movem.l (sp)+,d2-d3/a6
    c58c:	          lea 128(sp),sp
    c590:	          rts

0000c592 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c592:	   ,-> lea -64(sp),sp
    c596:	   |   move.l a6,-(sp)
    c598:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c59a:	   |   movea.l 76(sp),a0
    c59e:	   |   move.l (a0),d0
    c5a0:	   |   move.l 80(sp),-(sp)
    c5a4:	   |   move.l d0,-(sp)
    c5a6:	   |   jsr 8d0 <put2bytes>
    c5ac:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c5ae:	   |   movea.l 76(sp),a0
    c5b2:	   |   move.l 40(a0),d0
    c5b6:	,--|-- beq.s c5f2 <saveFunction+0x60>
		FPutC (fp, 1);
    c5b8:	|  |   move.l 80(sp),52(sp)
    c5be:	|  |   moveq #1,d0
    c5c0:	|  |   move.l d0,48(sp)
    c5c4:	|  |   move.l 1cb2e <DOSBase>,d0
    c5ca:	|  |   movea.l d0,a6
    c5cc:	|  |   move.l 52(sp),d1
    c5d0:	|  |   move.l 48(sp),d2
    c5d4:	|  |   jsr -312(a6)
    c5d8:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c5dc:	|  |   movea.l 76(sp),a0
    c5e0:	|  |   move.l 40(a0),d0
    c5e4:	|  |   move.l 80(sp),-(sp)
    c5e8:	|  |   move.l d0,-(sp)
    c5ea:	|  '-- jsr c592 <saveFunction>(pc)
    c5ee:	|      addq.l #8,sp
    c5f0:	|  ,-- bra.s c614 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c5f2:	'--|-> move.l 80(sp),64(sp)
    c5f8:	   |   clr.l 60(sp)
    c5fc:	   |   move.l 1cb2e <DOSBase>,d0
    c602:	   |   movea.l d0,a6
    c604:	   |   move.l 64(sp),d1
    c608:	   |   move.l 60(sp),d2
    c60c:	   |   jsr -312(a6)
    c610:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c614:	   '-> movea.l 76(sp),a0
    c618:	       move.l 12(a0),d0
    c61c:	       move.l 80(sp),-(sp)
    c620:	       move.l d0,-(sp)
    c622:	       jsr 958 <put4bytes>
    c628:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c62a:	       movea.l 76(sp),a0
    c62e:	       move.l 36(a0),d0
    c632:	       move.l 80(sp),-(sp)
    c636:	       move.l d0,-(sp)
    c638:	       jsr 8d0 <put2bytes>
    c63e:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c640:	       move.l 80(sp),40(sp)
    c646:	       movea.l 76(sp),a0
    c64a:	       move.w 54(a0),d0
    c64e:	       movea.w d0,a0
    c650:	       move.l a0,36(sp)
    c654:	       move.l 1cb2e <DOSBase>,d0
    c65a:	       movea.l d0,a6
    c65c:	       move.l 40(sp),d1
    c660:	       move.l 36(sp),d2
    c664:	       jsr -312(a6)
    c668:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c66c:	       move.l 80(sp),28(sp)
    c672:	       movea.l 76(sp),a0
    c676:	       move.w 48(a0),d0
    c67a:	       movea.w d0,a0
    c67c:	       move.l a0,24(sp)
    c680:	       move.l 1cb2e <DOSBase>,d0
    c686:	       movea.l d0,a6
    c688:	       move.l 28(sp),d1
    c68c:	       move.l 24(sp),d2
    c690:	       jsr -312(a6)
    c694:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c698:	       move.l 80(sp),16(sp)
    c69e:	       movea.l 76(sp),a0
    c6a2:	       move.w 50(a0),d0
    c6a6:	       movea.w d0,a0
    c6a8:	       move.l a0,12(sp)
    c6ac:	       move.l 1cb2e <DOSBase>,d0
    c6b2:	       movea.l d0,a6
    c6b4:	       move.l 16(sp),d1
    c6b8:	       move.l 12(sp),d2
    c6bc:	       jsr -312(a6)
    c6c0:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c6c4:	       moveq #28,d0
    c6c6:	       add.l 76(sp),d0
    c6ca:	       move.l 80(sp),-(sp)
    c6ce:	       move.l d0,-(sp)
    c6d0:	       jsr cdea <saveVariable>
    c6d6:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c6d8:	       movea.l 76(sp),a0
    c6dc:	       move.b 56(a0),d0
    c6e0:	   ,-- beq.s c6f0 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c6e2:	   |   pea 19542 <PutChar+0x17c8>
    c6e8:	   |   jsr 172d8 <KPrintF>
    c6ee:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c6f0:	   '-> movea.l 76(sp),a0
    c6f4:	       move.l 24(a0),d0
    c6f8:	       move.l 80(sp),-(sp)
    c6fc:	       move.l d0,-(sp)
    c6fe:	       jsr cc5e <saveStack>
    c704:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c706:	       clr.l 68(sp)
    c70a:	   ,-- bra.s c72e <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c70c:	,--|-> movea.l 76(sp),a0
    c710:	|  |   move.l 20(a0),d1
    c714:	|  |   move.l 68(sp),d0
    c718:	|  |   lsl.l #3,d0
    c71a:	|  |   add.l d1,d0
    c71c:	|  |   move.l 80(sp),-(sp)
    c720:	|  |   move.l d0,-(sp)
    c722:	|  |   jsr cdea <saveVariable>
    c728:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c72a:	|  |   addq.l #1,68(sp)
    c72e:	|  '-> movea.l 76(sp),a0
    c732:	|      move.l 8(a0),d0
    c736:	|      cmp.l 68(sp),d0
    c73a:	'----- bgt.s c70c <saveFunction+0x17a>
	}
}
    c73c:	       nop
    c73e:	       nop
    c740:	       move.l (sp)+,d2
    c742:	       movea.l (sp)+,a6
    c744:	       lea 64(sp),sp
    c748:	       rts

0000c74a <saveGame>:

BOOL saveGame (char * fname) {
    c74a:	          lea -248(sp),sp
    c74e:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c752:	          move.l 264(sp),244(sp)
    c758:	          move.l #1006,240(sp)
    c760:	          move.l 1cb2e <DOSBase>,d0
    c766:	          movea.l d0,a6
    c768:	          move.l 244(sp),d1
    c76c:	          move.l 240(sp),d2
    c770:	          jsr -30(a6)
    c774:	          move.l d0,236(sp)
    c778:	          move.l 236(sp),d0
    c77c:	          move.l d0,232(sp)
	if (fp == NULL) {
    c780:	      ,-- bne.s c796 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c782:	      |   pea 19564 <PutChar+0x17ea>
    c788:	      |   jsr 172d8 <KPrintF>
    c78e:	      |   addq.l #4,sp
		return FALSE;
    c790:	      |   clr.w d0
    c792:	,-----|-- bra.w cc54 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c796:	|     '-> move.l 232(sp),228(sp)
    c79c:	|         move.l #103809,224(sp)
    c7a4:	|         moveq #6,d0
    c7a6:	|         move.l d0,220(sp)
    c7aa:	|         move.l 1cb2e <DOSBase>,d0
    c7b0:	|         movea.l d0,a6
    c7b2:	|         move.l 228(sp),d1
    c7b6:	|         move.l 224(sp),d2
    c7ba:	|         move.l 220(sp),d3
    c7be:	|         jsr -48(a6)
    c7c2:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c7c6:	|         move.l 232(sp),212(sp)
    c7cc:	|         clr.l 208(sp)
    c7d0:	|         move.l 1cb2e <DOSBase>,d0
    c7d6:	|         movea.l d0,a6
    c7d8:	|         move.l 212(sp),d1
    c7dc:	|         move.l 208(sp),d2
    c7e0:	|         jsr -312(a6)
    c7e4:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c7e8:	|         move.l 232(sp),200(sp)
    c7ee:	|         clr.l 196(sp)
    c7f2:	|         move.l 1cb2e <DOSBase>,d0
    c7f8:	|         movea.l d0,a6
    c7fa:	|         move.l 200(sp),d1
    c7fe:	|         move.l 196(sp),d2
    c802:	|         jsr -312(a6)
    c806:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c80a:	|         move.l 232(sp),188(sp)
    c810:	|         moveq #2,d0
    c812:	|         move.l d0,184(sp)
    c816:	|         move.l 1cb2e <DOSBase>,d0
    c81c:	|         movea.l d0,a6
    c81e:	|         move.l 188(sp),d1
    c822:	|         move.l 184(sp),d2
    c826:	|         jsr -312(a6)
    c82a:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c82e:	|         move.l 232(sp),176(sp)
    c834:	|         moveq #2,d0
    c836:	|         move.l d0,172(sp)
    c83a:	|         move.l 1cb2e <DOSBase>,d0
    c840:	|         movea.l d0,a6
    c842:	|         move.l 176(sp),d1
    c846:	|         move.l 172(sp),d2
    c84a:	|         jsr -312(a6)
    c84e:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c852:	|         move.l 232(sp),164(sp)
    c858:	|         move.l #117448,160(sp)
    c860:	|         moveq #8,d0
    c862:	|         move.l d0,156(sp)
    c866:	|         move.l 1cb2e <DOSBase>,d0
    c86c:	|         movea.l d0,a6
    c86e:	|         move.l 164(sp),d1
    c872:	|         move.l 160(sp),d2
    c876:	|         move.l 156(sp),d3
    c87a:	|         jsr -48(a6)
    c87e:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c882:	|         move.l 232(sp),148(sp)
    c888:	|         move.w 1c376 <allowAnyFilename>,d0
    c88e:	|         movea.w d0,a0
    c890:	|         move.l a0,144(sp)
    c894:	|         move.l 1cb2e <DOSBase>,d0
    c89a:	|         movea.l d0,a6
    c89c:	|         move.l 148(sp),d1
    c8a0:	|         move.l 144(sp),d2
    c8a4:	|         jsr -312(a6)
    c8a8:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c8ac:	|         move.l 232(sp),136(sp)
    c8b2:	|         move.w 1cac6 <captureAllKeys>,d0
    c8b8:	|         movea.w d0,a0
    c8ba:	|         move.l a0,132(sp)
    c8be:	|         move.l 1cb2e <DOSBase>,d0
    c8c4:	|         movea.l d0,a6
    c8c6:	|         move.l 136(sp),d1
    c8ca:	|         move.l 132(sp),d2
    c8ce:	|         jsr -312(a6)
    c8d2:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c8d6:	|         move.l 232(sp),124(sp)
    c8dc:	|         moveq #1,d0
    c8de:	|         move.l d0,120(sp)
    c8e2:	|         move.l 1cb2e <DOSBase>,d0
    c8e8:	|         movea.l d0,a6
    c8ea:	|         move.l 124(sp),d1
    c8ee:	|         move.l 120(sp),d2
    c8f2:	|         jsr -312(a6)
    c8f6:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c8fa:	|         move.l 232(sp),112(sp)
    c900:	|         move.l 1cc2a <fontTableSize>,d0
    c906:	|         sgt d0
    c908:	|         neg.b d0
    c90a:	|         move.b d0,d0
    c90c:	|         andi.l #255,d0
    c912:	|         move.l d0,108(sp)
    c916:	|         move.l 1cb2e <DOSBase>,d0
    c91c:	|         movea.l d0,a6
    c91e:	|         move.l 112(sp),d1
    c922:	|         move.l 108(sp),d2
    c926:	|         jsr -312(a6)
    c92a:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c92e:	|         move.l 1cc2a <fontTableSize>,d0
    c934:	|     ,-- ble.s c972 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c936:	|     |   move.l 1cc1e <loadedFontNum>,d0
    c93c:	|     |   move.l 232(sp),-(sp)
    c940:	|     |   move.l d0,-(sp)
    c942:	|     |   jsr 8d0 <put2bytes>
    c948:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c94a:	|     |   move.l 1cc1a <fontHeight>,d0
    c950:	|     |   move.l 232(sp),-(sp)
    c954:	|     |   move.l d0,-(sp)
    c956:	|     |   jsr 8d0 <put2bytes>
    c95c:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c95e:	|     |   move.l 1cc22 <fontOrderString>,d0
    c964:	|     |   move.l 232(sp),-(sp)
    c968:	|     |   move.l d0,-(sp)
    c96a:	|     |   jsr bd8 <writeString>
    c970:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c972:	|     '-> move.w 1ca1e <fontSpace>,d0
    c978:	|         movea.w d0,a0
    c97a:	|         move.l 232(sp),-(sp)
    c97e:	|         move.l a0,-(sp)
    c980:	|         jsr a9c <putSigned>
    c986:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c988:	|         move.l 1cbdc <cameraX>,d0
    c98e:	|         move.l 232(sp),-(sp)
    c992:	|         move.l d0,-(sp)
    c994:	|         jsr 8d0 <put2bytes>
    c99a:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c99c:	|         move.l 1cbe0 <cameraY>,d0
    c9a2:	|         move.l 232(sp),-(sp)
    c9a6:	|         move.l d0,-(sp)
    c9a8:	|         jsr 8d0 <put2bytes>
    c9ae:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c9b0:	|         move.l 1c4b8 <cameraZoom>,d0
    c9b6:	|         move.l 232(sp),-(sp)
    c9ba:	|         move.l d0,-(sp)
    c9bc:	|         jsr a46 <putFloat>
    c9c2:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c9c4:	|         move.l 232(sp),100(sp)
    c9ca:	|         move.b 1c494 <brightnessLevel>,d0
    c9d0:	|         move.b d0,d0
    c9d2:	|         andi.l #255,d0
    c9d8:	|         move.l d0,96(sp)
    c9dc:	|         move.l 1cb2e <DOSBase>,d0
    c9e2:	|         movea.l d0,a6
    c9e4:	|         move.l 100(sp),d1
    c9e8:	|         move.l 96(sp),d2
    c9ec:	|         jsr -312(a6)
    c9f0:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    c9f4:	|         move.l 232(sp),-(sp)
    c9f8:	|         jsr 724e <saveHandlers>
    c9fe:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    ca00:	|         move.l 232(sp),-(sp)
    ca04:	|         jsr 15cfe <saveRegions>
    ca0a:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    ca0c:	|         move.l 1ca20 <mouseCursorAnim>,d0
    ca12:	|         move.l 232(sp),-(sp)
    ca16:	|         move.l d0,-(sp)
    ca18:	|         jsr af6e <saveAnim>
    ca1e:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    ca20:	|         move.l 1ca24 <mouseCursorFrameNum>,d0
    ca26:	|         move.l 232(sp),-(sp)
    ca2a:	|         move.l d0,-(sp)
    ca2c:	|         jsr 8d0 <put2bytes>
    ca32:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    ca34:	|         move.l 1cabe <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    ca3c:	|         clr.l 248(sp)
	while (thisFunction) {
    ca40:	|     ,-- bra.s ca50 <saveGame+0x306>
		countFunctions ++;
    ca42:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    ca46:	|  |  |   movea.l 252(sp),a0
    ca4a:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ca50:	|  |  '-> tst.l 252(sp)
    ca54:	|  '----- bne.s ca42 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    ca56:	|         move.l 232(sp),-(sp)
    ca5a:	|         move.l 252(sp),-(sp)
    ca5e:	|         jsr 8d0 <put2bytes>
    ca64:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    ca66:	|         move.l 1cabe <allRunningFunctions>,252(sp)
	while (thisFunction) {
    ca6e:	|     ,-- bra.s ca8a <saveGame+0x340>
		saveFunction (thisFunction, fp);
    ca70:	|  ,--|-> move.l 232(sp),-(sp)
    ca74:	|  |  |   move.l 256(sp),-(sp)
    ca78:	|  |  |   jsr c592 <saveFunction>
    ca7e:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    ca80:	|  |  |   movea.l 252(sp),a0
    ca84:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ca8a:	|  |  '-> tst.l 252(sp)
    ca8e:	|  '----- bne.s ca70 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    ca90:	|         clr.l 256(sp)
    ca94:	|     ,-- bra.s cab6 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    ca96:	|  ,--|-> move.l 1cad4 <globalVars>,d1
    ca9c:	|  |  |   move.l 256(sp),d0
    caa0:	|  |  |   lsl.l #3,d0
    caa2:	|  |  |   add.l d1,d0
    caa4:	|  |  |   move.l 232(sp),-(sp)
    caa8:	|  |  |   move.l d0,-(sp)
    caaa:	|  |  |   jsr cdea <saveVariable>
    cab0:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    cab2:	|  |  |   addq.l #1,256(sp)
    cab6:	|  |  '-> move.l 1cafe <numGlobals>,d0
    cabc:	|  |      cmp.l 256(sp),d0
    cac0:	|  '----- bgt.s ca96 <saveGame+0x34c>
	}

	savePeople (fp);
    cac2:	|         move.l 232(sp),-(sp)
    cac6:	|         jsr b096 <savePeople>
    cacc:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    cace:	|         movea.l 1cc3e <currentFloor>,a0
    cad4:	|         move.l 8(a0),d0
    cad8:	|  ,----- beq.s cb16 <saveGame+0x3cc>
		FPutC (fp, 1);
    cada:	|  |      move.l 232(sp),76(sp)
    cae0:	|  |      moveq #1,d0
    cae2:	|  |      move.l d0,72(sp)
    cae6:	|  |      move.l 1cb2e <DOSBase>,d0
    caec:	|  |      movea.l d0,a6
    caee:	|  |      move.l 76(sp),d1
    caf2:	|  |      move.l 72(sp),d2
    caf6:	|  |      jsr -312(a6)
    cafa:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    cafe:	|  |      movea.l 1cc3e <currentFloor>,a0
    cb04:	|  |      move.l (a0),d0
    cb06:	|  |      move.l 232(sp),-(sp)
    cb0a:	|  |      move.l d0,-(sp)
    cb0c:	|  |      jsr 8d0 <put2bytes>
    cb12:	|  |      addq.l #8,sp
    cb14:	|  |  ,-- bra.s cb38 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    cb16:	|  '--|-> move.l 232(sp),88(sp)
    cb1c:	|     |   clr.l 84(sp)
    cb20:	|     |   move.l 1cb2e <DOSBase>,d0
    cb26:	|     |   movea.l d0,a6
    cb28:	|     |   move.l 88(sp),d1
    cb2c:	|     |   move.l 84(sp),d2
    cb30:	|     |   jsr -312(a6)
    cb34:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    cb38:	|     '-> move.l 232(sp),64(sp)
    cb3e:	|         move.l 1cbf0 <speechMode>,60(sp)
    cb46:	|         move.l 1cb2e <DOSBase>,d0
    cb4c:	|         movea.l d0,a6
    cb4e:	|         move.l 64(sp),d1
    cb52:	|         move.l 60(sp),d2
    cb56:	|         jsr -312(a6)
    cb5a:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    cb5e:	|         move.b 1c9f4 <fadeMode>,d0
    cb64:	|         move.b d0,d0
    cb66:	|         andi.l #255,d0
    cb6c:	|         move.l d0,52(sp)
    cb70:	|         move.l 232(sp),48(sp)
    cb76:	|         move.l 1cb2e <DOSBase>,d0
    cb7c:	|         movea.l d0,a6
    cb7e:	|         move.l 52(sp),d1
    cb82:	|         move.l 48(sp),d2
    cb86:	|         jsr -312(a6)
    cb8a:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    cb8e:	|         move.l 1ca76 <speech>,d0
    cb94:	|         move.l 232(sp),-(sp)
    cb98:	|         move.l d0,-(sp)
    cb9a:	|         jsr 4000 <saveSpeech>
    cba0:	|         addq.l #8,sp
	saveStatusBars (fp);
    cba2:	|         move.l 232(sp),-(sp)
    cba6:	|         jsr 83c8 <saveStatusBars>
    cbac:	|         addq.l #4,sp
	saveSounds (fp);
    cbae:	|         move.l 232(sp),-(sp)
    cbb2:	|         jsr d15c <saveSounds>
    cbb8:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cbba:	|         move.w 1cbda <saveEncoding>,d0
    cbc0:	|         move.w d0,d0
    cbc2:	|         andi.l #65535,d0
    cbc8:	|         move.l 232(sp),-(sp)
    cbcc:	|         move.l d0,-(sp)
    cbce:	|         jsr 8d0 <put2bytes>
    cbd4:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    cbd6:	|         move.l 1cbcc <parallaxStuff>,d0
    cbdc:	|         move.l 232(sp),-(sp)
    cbe0:	|         move.l d0,-(sp)
    cbe2:	|         jsr d45e <saveParallaxRecursive>
    cbe8:	|         addq.l #8,sp
	FPutC (fp, 0);
    cbea:	|         move.l 232(sp),40(sp)
    cbf0:	|         clr.l 36(sp)
    cbf4:	|         move.l 1cb2e <DOSBase>,d0
    cbfa:	|         movea.l d0,a6
    cbfc:	|         move.l 40(sp),d1
    cc00:	|         move.l 36(sp),d2
    cc04:	|         jsr -312(a6)
    cc08:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    cc0c:	|         move.l 232(sp),28(sp)
    cc12:	|         move.l 1c49a <languageNum>,24(sp)
    cc1a:	|         move.l 1cb2e <DOSBase>,d0
    cc20:	|         movea.l d0,a6
    cc22:	|         move.l 28(sp),d1
    cc26:	|         move.l 24(sp),d2
    cc2a:	|         jsr -312(a6)
    cc2e:	|         move.l d0,20(sp)

	Close(fp);
    cc32:	|         move.l 232(sp),16(sp)
    cc38:	|         move.l 1cb2e <DOSBase>,d0
    cc3e:	|         movea.l d0,a6
    cc40:	|         move.l 16(sp),d1
    cc44:	|         jsr -36(a6)
    cc48:	|         move.l d0,12(sp)
	clearStackLib ();
    cc4c:	|         jsr c248 <clearStackLib>
	return TRUE;
    cc52:	|         moveq #1,d0
}
    cc54:	'-------> movem.l (sp)+,d2-d3/a6
    cc58:	          lea 248(sp),sp
    cc5c:	          rts

0000cc5e <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cc5e:	       lea -12(sp),sp
	int elements = 0;
    cc62:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cc66:	       move.l 16(sp),(sp)
	while (search) {
    cc6a:	   ,-- bra.s cc76 <saveStack+0x18>
		elements ++;
    cc6c:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    cc70:	|  |   movea.l (sp),a0
    cc72:	|  |   move.l 8(a0),(sp)
	while (search) {
    cc76:	|  '-> tst.l (sp)
    cc78:	'----- bne.s cc6c <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cc7a:	       move.l 20(sp),-(sp)
    cc7e:	       move.l 12(sp),-(sp)
    cc82:	       jsr 8d0 <put2bytes>
    cc88:	       addq.l #8,sp
	search = vs;
    cc8a:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cc8e:	       clr.l 4(sp)
    cc92:	   ,-- bra.s ccae <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cc94:	,--|-> move.l (sp),d0
    cc96:	|  |   move.l 20(sp),-(sp)
    cc9a:	|  |   move.l d0,-(sp)
    cc9c:	|  |   jsr cdea <saveVariable>
    cca2:	|  |   addq.l #8,sp
		search = search -> next;
    cca4:	|  |   movea.l (sp),a0
    cca6:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    ccaa:	|  |   addq.l #1,4(sp)
    ccae:	|  '-> move.l 4(sp),d0
    ccb2:	|      cmp.l 8(sp),d0
    ccb6:	'----- blt.s cc94 <saveStack+0x36>
	}
}
    ccb8:	       nop
    ccba:	       nop
    ccbc:	       lea 12(sp),sp
    ccc0:	       rts

0000ccc2 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    ccc2:	             lea -44(sp),sp
    ccc6:	             move.l a6,-(sp)
    ccc8:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    ccca:	             move.l 1cbb2 <stackLib>,48(sp)
	int a = 0;
    ccd2:	             clr.l 44(sp)
	while (s) {
    ccd6:	      ,----- bra.s cd34 <saveStackRef+0x72>
		if (s -> stack == vs) {
    ccd8:	   ,--|----> movea.l 48(sp),a0
    ccdc:	   |  |      move.l (a0),d0
    ccde:	   |  |      cmp.l 56(sp),d0
    cce2:	   |  |  ,-- bne.s cd26 <saveStackRef+0x64>
			FPutC (fp, 1);
    cce4:	   |  |  |   move.l 60(sp),16(sp)
    ccea:	   |  |  |   moveq #1,d0
    ccec:	   |  |  |   move.l d0,12(sp)
    ccf0:	   |  |  |   move.l 1cb2e <DOSBase>,d0
    ccf6:	   |  |  |   movea.l d0,a6
    ccf8:	   |  |  |   move.l 16(sp),d1
    ccfc:	   |  |  |   move.l 12(sp),d2
    cd00:	   |  |  |   jsr -312(a6)
    cd04:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    cd08:	   |  |  |   move.l 1cbae <stackLibTotal>,d0
    cd0e:	   |  |  |   sub.l 44(sp),d0
    cd12:	   |  |  |   move.l 60(sp),-(sp)
    cd16:	   |  |  |   move.l d0,-(sp)
    cd18:	   |  |  |   jsr 8d0 <put2bytes>
    cd1e:	   |  |  |   addq.l #8,sp
			return TRUE;
    cd20:	   |  |  |   moveq #1,d0
    cd22:	,--|--|--|-- bra.w cde0 <saveStackRef+0x11e>
		}
		s = s -> next;
    cd26:	|  |  |  '-> movea.l 48(sp),a0
    cd2a:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    cd30:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cd34:	|  |  '----> tst.l 48(sp)
    cd38:	|  '-------- bne.s ccd8 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    cd3a:	|            move.l 60(sp),40(sp)
    cd40:	|            clr.l 36(sp)
    cd44:	|            move.l 1cb2e <DOSBase>,d0
    cd4a:	|            movea.l d0,a6
    cd4c:	|            move.l 40(sp),d1
    cd50:	|            move.l 36(sp),d2
    cd54:	|            jsr -312(a6)
    cd58:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cd5c:	|            movea.l 56(sp),a0
    cd60:	|            move.l (a0),d0
    cd62:	|            move.l 60(sp),-(sp)
    cd66:	|            move.l d0,-(sp)
    cd68:	|            jsr cc5e <saveStack>
    cd6e:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cd70:	|            moveq #8,d0
    cd72:	|            move.l d0,28(sp)
    cd76:	|            clr.l 24(sp)
    cd7a:	|            move.l 1cb26 <SysBase>,d0
    cd80:	|            movea.l d0,a6
    cd82:	|            move.l 28(sp),d0
    cd86:	|            move.l 24(sp),d1
    cd8a:	|            jsr -684(a6)
    cd8e:	|            move.l d0,20(sp)
    cd92:	|            move.l 20(sp),d0
    cd96:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cd9a:	|            move.l 1cbae <stackLibTotal>,d0
    cda0:	|            addq.l #1,d0
    cda2:	|            move.l d0,1cbae <stackLibTotal>
	if (! s) {
    cda8:	|            tst.l 48(sp)
    cdac:	|        ,-- bne.s cdc0 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cdae:	|        |   pea 195b0 <PutChar+0x1836>
    cdb4:	|        |   jsr 172d8 <KPrintF>
    cdba:	|        |   addq.l #4,sp
		return FALSE;
    cdbc:	|        |   clr.w d0
    cdbe:	+--------|-- bra.s cde0 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cdc0:	|        '-> move.l 1cbb2 <stackLib>,d0
    cdc6:	|            movea.l 48(sp),a0
    cdca:	|            move.l d0,4(a0)
	s -> stack = vs;
    cdce:	|            movea.l 48(sp),a0
    cdd2:	|            move.l 56(sp),(a0)
	stackLib = s;
    cdd6:	|            move.l 48(sp),1cbb2 <stackLib>
	return TRUE;
    cdde:	|            moveq #1,d0
}
    cde0:	'----------> move.l (sp)+,d2
    cde2:	             movea.l (sp)+,a6
    cde4:	             lea 44(sp),sp
    cde8:	             rts

0000cdea <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cdea:	          lea -12(sp),sp
    cdee:	          move.l a6,-(sp)
    cdf0:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cdf2:	          move.l 28(sp),16(sp)
    cdf8:	          movea.l 24(sp),a0
    cdfc:	          move.l (a0),d0
    cdfe:	          move.l d0,12(sp)
    ce02:	          move.l 1cb2e <DOSBase>,d0
    ce08:	          movea.l d0,a6
    ce0a:	          move.l 16(sp),d1
    ce0e:	          move.l 12(sp),d2
    ce12:	          jsr -312(a6)
    ce16:	          move.l d0,8(sp)
	switch (from -> varType) {
    ce1a:	          movea.l 24(sp),a0
    ce1e:	          move.l (a0),d0
    ce20:	          moveq #9,d1
    ce22:	          cmp.l d0,d1
    ce24:	      ,-- bcs.w ced4 <saveVariable+0xea>
    ce28:	      |   add.l d0,d0
    ce2a:	      |   movea.l d0,a0
    ce2c:	      |   adda.l #52792,a0
    ce32:	      |   move.w (a0),d0
    ce34:	      |   jmp (ce38 <saveVariable+0x4e>,pc,d0.w)
    ce38:	      |   ori.l #1310740,(a0)+
    ce3e:	      |   ori.b #20,(20,a0,d0.w)
    ce44:	      |   .short 0x004c
    ce46:	      |   ori.b #126,(a4)
    ce4a:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    ce4e:	      |   ori.b #40,(a0)+
    ce52:	      |   ori.b #47,d4
    ce56:	      |   ori.b #0,(a4)+
    ce5a:	      |   jsr 958 <put4bytes>
    ce60:	      |   addq.l #8,sp
		return TRUE;
    ce62:	      |   moveq #1,d0
    ce64:	,-----|-- bra.w cf10 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    ce68:	|     |   movea.l 24(sp),a0
    ce6c:	|     |   move.l 4(a0),d0
    ce70:	|     |   move.l 28(sp),-(sp)
    ce74:	|     |   move.l d0,-(sp)
    ce76:	|     |   jsr bd8 <writeString>
    ce7c:	|     |   addq.l #8,sp
		return TRUE;
    ce7e:	|     |   moveq #1,d0
    ce80:	+-----|-- bra.w cf10 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    ce84:	|     |   movea.l 24(sp),a0
    ce88:	|     |   move.l 4(a0),d0
    ce8c:	|     |   move.l 28(sp),-(sp)
    ce90:	|     |   move.l d0,-(sp)
    ce92:	|     |   jsr ccc2 <saveStackRef>
    ce98:	|     |   addq.l #8,sp
    ce9a:	+-----|-- bra.s cf10 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    ce9c:	|     |   movea.l 24(sp),a0
    cea0:	|     |   move.l 4(a0),d0
    cea4:	|     |   move.l 28(sp),-(sp)
    cea8:	|     |   move.l d0,-(sp)
    ceaa:	|     |   jsr b038 <saveCostume>
    ceb0:	|     |   addq.l #8,sp
		return FALSE;
    ceb2:	|     |   clr.w d0
    ceb4:	+-----|-- bra.s cf10 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    ceb6:	|     |   movea.l 24(sp),a0
    ceba:	|     |   move.l 4(a0),d0
    cebe:	|     |   move.l 28(sp),-(sp)
    cec2:	|     |   move.l d0,-(sp)
    cec4:	|     |   jsr af6e <saveAnim>
    ceca:	|     |   addq.l #8,sp
		return FALSE;
    cecc:	|     |   clr.w d0
    cece:	+-----|-- bra.s cf10 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    ced0:	|     |   clr.w d0
    ced2:	+-----|-- bra.s cf10 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    ced4:	|     '-> movea.l 24(sp),a0
    ced8:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    ceda:	|         moveq #10,d1
    cedc:	|         cmp.l d0,d1
    cede:	|  ,----- bcs.s cef8 <saveVariable+0x10e>
						typeName[from->varType] :
    cee0:	|  |      movea.l 24(sp),a0
    cee4:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cee6:	|  |      add.l d0,d0
    cee8:	|  |      movea.l d0,a1
    ceea:	|  |      adda.l d0,a1
    ceec:	|  |      lea 1c9f6 <typeName>,a0
    cef2:	|  |      move.l (0,a1,a0.l),d0
    cef6:	|  |  ,-- bra.s cefe <saveVariable+0x114>
    cef8:	|  '--|-> move.l #103893,d0
    cefe:	|     '-> move.l d0,-(sp)
    cf00:	|         pea 195dc <PutChar+0x1862>
    cf06:	|         jsr 172d8 <KPrintF>
    cf0c:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cf0e:	|         moveq #1,d0
    cf10:	'-------> move.l (sp)+,d2
    cf12:	          movea.l (sp)+,a6
    cf14:	          lea 12(sp),sp
    cf18:	          rts

0000cf1a <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    cf1a:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cf1e:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cf26:	          movea.l 4(sp),a0
    cf2a:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cf30:	          movea.l 4(sp),a0
    cf34:	          move.w 10(a0),d0
    cf38:	          lsr.w #8,d0
    cf3a:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    cf3e:	          movea.l 4(sp),a0
    cf42:	          move.w 10(a0),d0
    cf46:	          move.b d0,(sp)

    if(counterx_new)
    cf48:	,-------- beq.w cfee <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cf4c:	|         clr.w d1
    cf4e:	|         move.b (sp),d1
    cf50:	|         move.w 1cbba <counterx_old>,d0
    cf56:	|         sub.w d0,d1
    cf58:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cf5c:	|         cmpi.w #128,10(sp)
    cf62:	|     ,-- blt.s cf7a <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cf64:	|     |   move.w #1,1cadc <input+0x4>
            counterx_diff -= 256;    
    cf6c:	|     |   move.w 10(sp),d0
    cf70:	|     |   addi.w #-256,d0
    cf74:	|     |   move.w d0,10(sp)
    cf78:	|  ,--|-- bra.s cfa6 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    cf7a:	|  |  '-> cmpi.w #-129,10(sp)
    cf80:	|  |  ,-- bgt.s cf98 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    cf82:	|  |  |   move.w 10(sp),d0
    cf86:	|  |  |   addi.w #256,d0
    cf8a:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    cf8e:	|  |  |   move.w #1,1cadc <input+0x4>
    cf96:	|  +--|-- bra.s cfa6 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    cf98:	|  |  '-> tst.w 10(sp)
    cf9c:	|  +----- beq.s cfa6 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    cf9e:	|  |      move.w #1,1cadc <input+0x4>
        }

        input.mouseX += counterx_diff;
    cfa6:	|  '----> move.l 1cae2 <input+0xa>,d0
    cfac:	|         movea.w 10(sp),a0
    cfb0:	|         add.l a0,d0
    cfb2:	|         move.l d0,1cae2 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    cfb8:	|         move.l 1cae2 <input+0xa>,d1
    cfbe:	|         move.l 1ca7a <winWidth>,d0
    cfc4:	|         cmp.l d1,d0
    cfc6:	|     ,-- bge.s cfd6 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    cfc8:	|     |   move.l 1ca7a <winWidth>,d0
    cfce:	|     |   move.l d0,1cae2 <input+0xa>
    cfd4:	|  ,--|-- bra.s cfe4 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    cfd6:	|  |  '-> move.l 1cae2 <input+0xa>,d0
    cfdc:	|  +----- bpl.s cfe4 <CsiCheckInput+0xca>
            input.mouseX = 0;
    cfde:	|  |      clr.l 1cae2 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    cfe4:	|  '----> clr.w d0
    cfe6:	|         move.b (sp),d0
    cfe8:	|         move.w d0,1cbba <counterx_old>
    }    

    if(countery_new)
    cfee:	'-------> tst.b 1(sp)
    cff2:	,-------- beq.w d09c <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    cff6:	|         clr.w d1
    cff8:	|         move.b 1(sp),d1
    cffc:	|         move.w 1cbbc <countery_old>,d0
    d002:	|         sub.w d0,d1
    d004:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d008:	|         cmpi.w #128,8(sp)
    d00e:	|     ,-- blt.s d026 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d010:	|     |   move.w #1,1cadc <input+0x4>
            countery_diff -= 256;    
    d018:	|     |   move.w 8(sp),d0
    d01c:	|     |   addi.w #-256,d0
    d020:	|     |   move.w d0,8(sp)
    d024:	|  ,--|-- bra.s d052 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d026:	|  |  '-> cmpi.w #-129,8(sp)
    d02c:	|  |  ,-- bgt.s d044 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d02e:	|  |  |   move.w #1,1cadc <input+0x4>
            countery_diff += 256;
    d036:	|  |  |   move.w 8(sp),d0
    d03a:	|  |  |   addi.w #256,d0
    d03e:	|  |  |   move.w d0,8(sp)
    d042:	|  +--|-- bra.s d052 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d044:	|  |  '-> tst.w 8(sp)
    d048:	|  +----- beq.s d052 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d04a:	|  |      move.w #1,1cadc <input+0x4>
        }

        input.mouseY += countery_diff;
    d052:	|  '----> move.l 1cae6 <input+0xe>,d0
    d058:	|         movea.w 8(sp),a0
    d05c:	|         add.l a0,d0
    d05e:	|         move.l d0,1cae6 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d064:	|         move.l 1cae6 <input+0xe>,d1
    d06a:	|         move.l 1ca7e <winHeight>,d0
    d070:	|         cmp.l d1,d0
    d072:	|     ,-- bge.s d082 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d074:	|     |   move.l 1ca7e <winHeight>,d0
    d07a:	|     |   move.l d0,1cae6 <input+0xe>
    d080:	|  ,--|-- bra.s d090 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d082:	|  |  '-> move.l 1cae6 <input+0xe>,d0
    d088:	|  +----- bpl.s d090 <CsiCheckInput+0x176>
            input.mouseY = 0;
    d08a:	|  |      clr.l 1cae6 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d090:	|  '----> clr.w d0
    d092:	|         move.b 1(sp),d0
    d096:	|         move.w d0,1cbbc <countery_old>
    } 

    input.leftRelease = FALSE;
    d09c:	'-------> clr.w 1cade <input+0x6>
    input.rightRelease = FALSE;
    d0a2:	          clr.w 1cae0 <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d0a8:	          move.w 1cad8 <input>,d0
    d0ae:	      ,-- beq.s d0d4 <CsiCheckInput+0x1ba>
    d0b0:	      |   movea.l #12574721,a0
    d0b6:	      |   move.b (a0),d0
    d0b8:	      |   move.b d0,d0
    d0ba:	      |   andi.l #255,d0
    d0c0:	      |   moveq #64,d1
    d0c2:	      |   and.l d1,d0
    d0c4:	      +-- beq.s d0d4 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    d0c6:	      |   clr.w 1cad8 <input>
        input.leftRelease = TRUE;
    d0cc:	      |   move.w #1,1cade <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d0d4:	      '-> move.w 1cada <input+0x2>,d0
    d0da:	      ,-- beq.s d102 <CsiCheckInput+0x1e8>
    d0dc:	      |   movea.l #14675990,a0
    d0e2:	      |   move.w (a0),d0
    d0e4:	      |   move.w d0,d0
    d0e6:	      |   andi.l #65535,d0
    d0ec:	      |   andi.l #1024,d0
    d0f2:	      +-- beq.s d102 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    d0f4:	      |   clr.w 1cada <input+0x2>
        input.rightRelease = TRUE;
    d0fa:	      |   move.w #1,1cae0 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d102:	      '-> movea.l #12574721,a0
    d108:	          move.b (a0),d0
    d10a:	          move.b d0,d0
    d10c:	          andi.l #255,d0
    d112:	          moveq #64,d1
    d114:	          and.l d1,d0
    d116:	      ,-- bne.s d120 <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    d118:	      |   move.w #1,1cad8 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d120:	      '-> movea.l #14675990,a0
    d126:	          move.w (a0),d0
    d128:	          move.w d0,d0
    d12a:	          andi.l #65535,d0
    d130:	          andi.l #1024,d0
    d136:	      ,-- bne.s d140 <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    d138:	      |   move.w #1,1cada <input+0x2>
    }

    d140:	      '-> nop
    d142:	          lea 12(sp),sp
    d146:	          rts

0000d148 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d148:	moveq #0,d0
}
    d14a:	rts

0000d14c <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d14c:	nop
    d14e:	rts

0000d150 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d150:	nop
    d152:	rts

0000d154 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d154:	moveq #1,d0
}
    d156:	rts

0000d158 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d158:	nop
    d15a:	rts

0000d15c <saveSounds>:

void saveSounds (BPTR fp) {
    d15c:	lea -12(sp),sp
    d160:	move.l a6,-(sp)
    d162:	move.l d2,-(sp)
	FPutC (fp,0);
    d164:	move.l 24(sp),16(sp)
    d16a:	clr.l 12(sp)
    d16e:	move.l 1cb2e <DOSBase>,d0
    d174:	movea.l d0,a6
    d176:	move.l 16(sp),d1
    d17a:	move.l 12(sp),d2
    d17e:	jsr -312(a6)
    d182:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d186:	move.l 1c4b4 <defSoundVol>,d0
    d18c:	move.l 24(sp),-(sp)
    d190:	move.l d0,-(sp)
    d192:	jsr 8d0 <put2bytes>
    d198:	addq.l #8,sp
	put2bytes (defVol, fp);
    d19a:	move.l 1c4b0 <defVol>,d0
    d1a0:	move.l 24(sp),-(sp)
    d1a4:	move.l d0,-(sp)
    d1a6:	jsr 8d0 <put2bytes>
    d1ac:	addq.l #8,sp
}
    d1ae:	nop
    d1b0:	move.l (sp)+,d2
    d1b2:	movea.l (sp)+,a6
    d1b4:	lea 12(sp),sp
    d1b8:	rts

0000d1ba <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d1ba:	move.l 4(sp),1c4b0 <defVol>
}
    d1c2:	nop
    d1c4:	rts

0000d1c6 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d1c6:	move.l 4(sp),1c4b4 <defSoundVol>
}
    d1ce:	nop
    d1d0:	rts

0000d1d2 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d1d2:	nop
    d1d4:	rts

0000d1d6 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d1d6:	nop
    d1d8:	rts

0000d1da <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d1da:	nop
    d1dc:	rts

0000d1de <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d1de:	subq.l #4,sp
    d1e0:	move.l 12(sp),d0
    d1e4:	move.w d0,d0
    d1e6:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d1ea:	moveq #1,d0
}
    d1ec:	addq.l #4,sp
    d1ee:	rts

0000d1f0 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d1f0:	nop
    d1f2:	rts

0000d1f4 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    d1f4:	move.l 16(sp),-(sp)
    d1f8:	move.l 16(sp),-(sp)
    d1fc:	move.l 16(sp),-(sp)
    d200:	move.l 16(sp),-(sp)
    d204:	jsr e0e <CstBlankScreen>
    d20a:	lea 16(sp),sp
}
    d20e:	nop
    d210:	rts

0000d212 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d212:	pea 195ff <PutChar+0x1885>
    d218:	jsr 172d8 <KPrintF>
    d21e:	addq.l #4,sp
}
    d220:	nop
    d222:	rts

0000d224 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d224:	movea.l 8(sp),a1
    d228:	movea.l 12(sp),a0
    d22c:	move.l 8(sp),d1
    d230:	move.l 4(sp),d0
    d234:	move.l a1,-(sp)
    d236:	move.l a0,-(sp)
    d238:	move.l d1,-(sp)
    d23a:	move.l d0,-(sp)
    d23c:	jsr 46fa <drawLine>
    d242:	lea 16(sp),sp
}
    d246:	nop
    d248:	rts

0000d24a <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d24a:	movea.l 12(sp),a1
    d24e:	movea.l 4(sp),a0
    d252:	move.l 8(sp),d1
    d256:	move.l 4(sp),d0
    d25a:	move.l a1,-(sp)
    d25c:	move.l a0,-(sp)
    d25e:	move.l d1,-(sp)
    d260:	move.l d0,-(sp)
    d262:	jsr 46fa <drawLine>
    d268:	lea 16(sp),sp
}
    d26c:	nop
    d26e:	rts

0000d270 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d270:	pea 19638 <PutChar+0x18be>
    d276:	jsr 172d8 <KPrintF>
    d27c:	addq.l #4,sp
}
    d27e:	nop
    d280:	rts

0000d282 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d282:	jsr 1b32 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d288:	pea 1cbc6 <backdropTextureName>
    d28e:	pea 1 <_start+0x1>
    d292:	jsr 487c <deleteTextures>
    d298:	addq.l #8,sp
	backdropTextureName = 0;
    d29a:	clr.l 1cbc6 <backdropTextureName>
	backdropExists = FALSE;
    d2a0:	clr.w 1cbca <backdropExists>
}
    d2a6:	nop
    d2a8:	rts

0000d2aa <killParallax>:

void killParallax () {
    d2aa:	          lea -12(sp),sp
    d2ae:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d2b0:	   ,----- bra.s d31c <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d2b2:	,--|----> move.l 1cbcc <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d2ba:	|  |      movea.l 12(sp),a0
    d2be:	|  |      move.l 42(a0),d0
    d2c2:	|  |      move.l d0,1cbcc <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d2c8:	|  |      move.l 12(sp),d0
    d2cc:	|  |      addq.l #4,d0
    d2ce:	|  |      move.l d0,-(sp)
    d2d0:	|  |      pea 1 <_start+0x1>
    d2d4:	|  |      jsr 487c <deleteTextures>
    d2da:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d2dc:	|  |      movea.l 12(sp),a0
    d2e0:	|  |      move.l (a0),d0
    d2e2:	|  |  ,-- beq.s d2fc <killParallax+0x52>
    d2e4:	|  |  |   movea.l 12(sp),a0
    d2e8:	|  |  |   move.l (a0),8(sp)
    d2ec:	|  |  |   move.l 1cb26 <SysBase>,d0
    d2f2:	|  |  |   movea.l d0,a6
    d2f4:	|  |  |   movea.l 8(sp),a1
    d2f8:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d2fc:	|  |  '-> tst.l 12(sp)
    d300:	|  |  ,-- beq.s d318 <killParallax+0x6e>
    d302:	|  |  |   move.l 12(sp),4(sp)
    d308:	|  |  |   move.l 1cb26 <SysBase>,d0
    d30e:	|  |  |   movea.l d0,a6
    d310:	|  |  |   movea.l 4(sp),a1
    d314:	|  |  |   jsr -690(a6)
		k = NULL;
    d318:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d31c:	|  '----> move.l 1cbcc <parallaxStuff>,d0
    d322:	'-------- bne.s d2b2 <killParallax+0x8>
	}
}
    d324:	          nop
    d326:	          nop
    d328:	          movea.l (sp)+,a6
    d32a:	          lea 12(sp),sp
    d32e:	          rts

0000d330 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d330:	       move.l 4(sp),-(sp)
    d334:	       jsr 771e <openFileFromNum>
    d33a:	       addq.l #4,sp
    d33c:	       tst.l d0
    d33e:	   ,-- bne.s d350 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d340:	   |   pea 19659 <PutChar+0x18df>
    d346:	   |   jsr 172d8 <KPrintF>
    d34c:	   |   addq.l #4,sp
		return;
    d34e:	,--|-- bra.s d370 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d350:	|  '-> move.l 1cb0e <bigDataFile>,d0
    d356:	|      move.l 12(sp),-(sp)
    d35a:	|      move.l 12(sp),-(sp)
    d35e:	|      move.l d0,-(sp)
    d360:	|      jsr 1de0 <CstLoadBackdrop>
    d366:	|      lea 12(sp),sp
	finishAccess ();
    d36a:	|      jsr 7616 <finishAccess>
	
}
    d370:	'----> rts

0000d372 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d372:	subq.l #8,sp
    d374:	movea.l 12(sp),a0
    d378:	move.l 16(sp),d1
    d37c:	move.l 20(sp),d0
    d380:	movea.w a0,a0
    d382:	move.w a0,6(sp)
    d386:	move.w d1,d1
    d388:	move.w d1,4(sp)
    d38c:	move.w d0,d0
    d38e:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d392:	pea 196a8 <PutChar+0x192e>
    d398:	jsr 172d8 <KPrintF>
    d39e:	addq.l #4,sp

}
    d3a0:	nop
    d3a2:	addq.l #8,sp
    d3a4:	rts

0000d3a6 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d3a6:	pea 196cb <PutChar+0x1951>
    d3ac:	jsr 172d8 <KPrintF>
    d3b2:	addq.l #4,sp
}
    d3b4:	nop
    d3b6:	rts

0000d3b8 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d3b8:	pea 1cbd0 <snapshotTextureName>
    d3be:	pea 1 <_start+0x1>
    d3c2:	jsr 487c <deleteTextures>
    d3c8:	addq.l #8,sp
	snapshotTextureName = 0;
    d3ca:	clr.l 1cbd0 <snapshotTextureName>
}
    d3d0:	nop
    d3d2:	rts

0000d3d4 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d3d4:	clr.l 1cbdc <cameraX>
	cameraY = 0;
    d3da:	clr.l 1cbe0 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d3e0:	move.l 1cbc2 <sceneHeight>,d0
    d3e6:	move.l d0,d1
    d3e8:	move.l 1cbbe <sceneWidth>,d0
    d3ee:	move.l d1,-(sp)
    d3f0:	move.l d0,-(sp)
    d3f2:	jsr 3700 <CstReserveBackdrop>
    d3f8:	addq.l #8,sp
}
    d3fa:	rts

0000d3fc <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d3fc:	jsr d282 <killBackDrop>
	killParallax ();
    d402:	jsr d2aa <killParallax>
	killZBuffer ();
    d408:	jsr 8634 <killZBuffer>
	sceneWidth = x;
    d40e:	move.l 4(sp),d0
    d412:	move.l d0,1cbbe <sceneWidth>
	sceneHeight = y;
    d418:	move.l 8(sp),d0
    d41c:	move.l d0,1cbc2 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d422:	pea 19704 <PutChar+0x198a>
    d428:	jsr 172d8 <KPrintF>
    d42e:	addq.l #4,sp
	return reserveBackdrop();
    d430:	jsr d3d4 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d436:	rts

0000d438 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d438:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d43a:	move.l 12(sp),-(sp)
    d43e:	jsr 6bc <get2bytes>
    d444:	addq.l #4,sp
    d446:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d44a:	move.l 12(sp),-(sp)
    d44e:	jsr 6bc <get2bytes>
    d454:	addq.l #4,sp
    d456:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d458:	moveq #1,d0
}
    d45a:	addq.l #8,sp
    d45c:	rts

0000d45e <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d45e:	   ,-> lea -12(sp),sp
    d462:	   |   move.l a6,-(sp)
    d464:	   |   move.l d2,-(sp)
	if (me) {
    d466:	   |   tst.l 24(sp)
    d46a:	,--|-- beq.w d500 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d46e:	|  |   movea.l 24(sp),a0
    d472:	|  |   move.l 42(a0),d0
    d476:	|  |   move.l 28(sp),-(sp)
    d47a:	|  |   move.l d0,-(sp)
    d47c:	|  '-- jsr d45e <saveParallaxRecursive>(pc)
    d480:	|      addq.l #8,sp
		FPutC (fp, 1);
    d482:	|      move.l 28(sp),16(sp)
    d488:	|      moveq #1,d0
    d48a:	|      move.l d0,12(sp)
    d48e:	|      move.l 1cb2e <DOSBase>,d0
    d494:	|      movea.l d0,a6
    d496:	|      move.l 16(sp),d1
    d49a:	|      move.l 12(sp),d2
    d49e:	|      jsr -312(a6)
    d4a2:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d4a6:	|      movea.l 24(sp),a0
    d4aa:	|      move.w 28(a0),d0
    d4ae:	|      move.w d0,d0
    d4b0:	|      andi.l #65535,d0
    d4b6:	|      move.l 28(sp),-(sp)
    d4ba:	|      move.l d0,-(sp)
    d4bc:	|      jsr 8d0 <put2bytes>
    d4c2:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d4c4:	|      movea.l 24(sp),a0
    d4c8:	|      move.w 30(a0),d0
    d4cc:	|      move.w d0,d0
    d4ce:	|      andi.l #65535,d0
    d4d4:	|      move.l 28(sp),-(sp)
    d4d8:	|      move.l d0,-(sp)
    d4da:	|      jsr 8d0 <put2bytes>
    d4e0:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d4e2:	|      movea.l 24(sp),a0
    d4e6:	|      move.w 32(a0),d0
    d4ea:	|      move.w d0,d0
    d4ec:	|      andi.l #65535,d0
    d4f2:	|      move.l 28(sp),-(sp)
    d4f6:	|      move.l d0,-(sp)
    d4f8:	|      jsr 8d0 <put2bytes>
    d4fe:	|      addq.l #8,sp
	}
}
    d500:	'----> nop
    d502:	       move.l (sp)+,d2
    d504:	       movea.l (sp)+,a6
    d506:	       lea 12(sp),sp
    d50a:	       rts

0000d50c <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d50c:	pea 1972b <PutChar+0x19b1>
    d512:	jsr 172d8 <KPrintF>
    d518:	addq.l #4,sp
	return TRUE;
    d51a:	moveq #1,d0
    d51c:	rts

0000d51e <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d51e:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d520:	             move.l 1cbd4 <allObjectTypes>,(sp)

	while (huntType) {
    d526:	      ,----- bra.s d53e <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d528:	   ,--|----> movea.l (sp),a0
    d52a:	   |  |      move.l 4(a0),d0
    d52e:	   |  |      cmp.l 8(sp),d0
    d532:	   |  |  ,-- bne.s d538 <findObjectType+0x1a>
    d534:	   |  |  |   move.l (sp),d0
    d536:	,--|--|--|-- bra.s d54e <findObjectType+0x30>
		huntType = huntType -> next;
    d538:	|  |  |  '-> movea.l (sp),a0
    d53a:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d53e:	|  |  '----> tst.l (sp)
    d540:	|  '-------- bne.s d528 <findObjectType+0xa>
	}

	return loadObjectType (i);
    d542:	|            move.l 8(sp),-(sp)
    d546:	|            jsr d60e <loadObjectType>
    d54c:	|            addq.l #4,sp
}
    d54e:	'----------> addq.l #4,sp
    d550:	             rts

0000d552 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d552:	             lea -12(sp),sp
	int i, num = 0;
    d556:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d55a:	             move.l 20(sp),-(sp)
    d55e:	             jsr d51e <findObjectType>
    d564:	             addq.l #4,sp
    d566:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d568:	             clr.l 8(sp)
    d56c:	   ,-------- bra.s d5a2 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d56e:	,--|-------> movea.l (sp),a0
    d570:	|  |         move.l 38(a0),d1
    d574:	|  |         move.l 8(sp),d0
    d578:	|  |         lsl.l #3,d0
    d57a:	|  |         movea.l d1,a0
    d57c:	|  |         adda.l d0,a0
    d57e:	|  |         move.l (a0),d0
    d580:	|  |         cmp.l 16(sp),d0
    d584:	|  |  ,----- bne.s d59e <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d586:	|  |  |      movea.l (sp),a0
    d588:	|  |  |      move.l 38(a0),d1
    d58c:	|  |  |      move.l 8(sp),d0
    d590:	|  |  |      lsl.l #3,d0
    d592:	|  |  |      movea.l d1,a0
    d594:	|  |  |      adda.l d0,a0
    d596:	|  |  |      move.l 4(a0),4(sp)
			break;
    d59c:	|  |  |  ,-- bra.s d5ae <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d59e:	|  |  '--|-> addq.l #1,8(sp)
    d5a2:	|  '-----|-> movea.l (sp),a0
    d5a4:	|        |   move.l 16(a0),d0
    d5a8:	|        |   cmp.l 8(sp),d0
    d5ac:	'--------|-- bgt.s d56e <getCombinationFunction+0x1c>
		}
	}

	return num;
    d5ae:	         '-> move.l 4(sp),d0
}
    d5b2:	             lea 12(sp),sp
    d5b6:	             rts

0000d5b8 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d5b8:	moveq #1,d0
}
    d5ba:	rts

0000d5bc <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d5bc:	subq.l #8,sp
    d5be:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d5c0:	move.l 16(sp),-(sp)
    d5c4:	jsr 6bc <get2bytes>
    d5ca:	addq.l #4,sp
    d5cc:	move.l d0,-(sp)
    d5ce:	jsr d60e <loadObjectType>
    d5d4:	addq.l #4,sp
    d5d6:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d5da:	movea.l 8(sp),a0
    d5de:	move.l (a0),4(sp)
    d5e2:	move.l 1cb26 <SysBase>,d0
    d5e8:	movea.l d0,a6
    d5ea:	movea.l 4(sp),a1
    d5ee:	jsr -690(a6)
	r -> screenName = readString (fp);
    d5f2:	move.l 16(sp),-(sp)
    d5f6:	jsr b02 <readString>
    d5fc:	addq.l #4,sp
    d5fe:	movea.l 8(sp),a0
    d602:	move.l d0,(a0)
	return r;
    d604:	move.l 8(sp),d0
}
    d608:	movea.l (sp)+,a6
    d60a:	addq.l #8,sp
    d60c:	rts

0000d60e <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d60e:	          lea -84(sp),sp
    d612:	          move.l a6,-(sp)
    d614:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d616:	          moveq #42,d0
    d618:	          move.l d0,84(sp)
    d61c:	          clr.l 80(sp)
    d620:	          move.l 1cb26 <SysBase>,d0
    d626:	          movea.l d0,a6
    d628:	          move.l 84(sp),d0
    d62c:	          move.l 80(sp),d1
    d630:	          jsr -684(a6)
    d634:	          move.l d0,76(sp)
    d638:	          move.l 76(sp),d0
    d63c:	          move.l d0,72(sp)

    if (newType) {
    d640:	,-------- beq.w d8ba <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d644:	|         move.l 96(sp),-(sp)
    d648:	|         jsr 77e6 <openObjectSlice>
    d64e:	|         addq.l #4,sp
    d650:	|         tst.w d0
    d652:	+-------- beq.w d8ba <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d656:	|         move.l 1cb0e <bigDataFile>,d0
    d65c:	|         move.l d0,-(sp)
    d65e:	|         jsr 6bc <get2bytes>
    d664:	|         addq.l #4,sp
    d666:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d66a:	|         move.l 1cb0e <bigDataFile>,64(sp)
    d672:	|         move.l 1cb2e <DOSBase>,d0
    d678:	|         movea.l d0,a6
    d67a:	|         move.l 64(sp),d1
    d67e:	|         jsr -306(a6)
    d682:	|         move.l d0,60(sp)
    d686:	|         move.l 60(sp),d0
    d68a:	|         move.l d0,d0
    d68c:	|         movea.l 72(sp),a0
    d690:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d694:	|         move.l 1cb0e <bigDataFile>,56(sp)
    d69c:	|         move.l 1cb2e <DOSBase>,d0
    d6a2:	|         movea.l d0,a6
    d6a4:	|         move.l 56(sp),d1
    d6a8:	|         jsr -306(a6)
    d6ac:	|         move.l d0,52(sp)
    d6b0:	|         move.l 52(sp),d0
    d6b4:	|         move.l d0,d0
    d6b6:	|         movea.l 72(sp),a0
    d6ba:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d6be:	|         move.l 1cb0e <bigDataFile>,48(sp)
    d6c6:	|         move.l 1cb2e <DOSBase>,d0
    d6cc:	|         movea.l d0,a6
    d6ce:	|         move.l 48(sp),d1
    d6d2:	|         jsr -306(a6)
    d6d6:	|         move.l d0,44(sp)
    d6da:	|         move.l 44(sp),d0
    d6de:	|         move.l d0,d0
    d6e0:	|         movea.l 72(sp),a0
    d6e4:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d6e8:	|         move.l 1cb0e <bigDataFile>,40(sp)
    d6f0:	|         move.l 1cb2e <DOSBase>,d0
    d6f6:	|         movea.l d0,a6
    d6f8:	|         move.l 40(sp),d1
    d6fc:	|         jsr -306(a6)
    d700:	|         move.l d0,36(sp)
    d704:	|         move.l 36(sp),d0
    d708:	|         movea.l 72(sp),a0
    d70c:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d710:	|         move.l 1cb0e <bigDataFile>,32(sp)
    d718:	|         move.l 1cb2e <DOSBase>,d0
    d71e:	|         movea.l d0,a6
    d720:	|         move.l 32(sp),d1
    d724:	|         jsr -306(a6)
    d728:	|         move.l d0,28(sp)
    d72c:	|         move.l 28(sp),d0
    d730:	|         movea.l 72(sp),a0
    d734:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d738:	|         move.l 1cb0e <bigDataFile>,d0
    d73e:	|         move.l d0,-(sp)
    d740:	|         jsr 718 <get4bytes>
    d746:	|         addq.l #4,sp
    d748:	|         movea.l 72(sp),a0
    d74c:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d750:	|         move.l 1cb0e <bigDataFile>,d0
    d756:	|         move.l d0,-(sp)
    d758:	|         jsr 6bc <get2bytes>
    d75e:	|         addq.l #4,sp
    d760:	|         movea.l 72(sp),a0
    d764:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d768:	|         move.l 1cb0e <bigDataFile>,24(sp)
    d770:	|         move.l 1cb2e <DOSBase>,d0
    d776:	|         movea.l d0,a6
    d778:	|         move.l 24(sp),d1
    d77c:	|         jsr -306(a6)
    d780:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d784:	|         move.l 1cb0e <bigDataFile>,d0
    d78a:	|         move.l d0,-(sp)
    d78c:	|         jsr 7d8 <getFloat>
    d792:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d794:	|         move.l 1cb0e <bigDataFile>,d0
    d79a:	|         move.l d0,-(sp)
    d79c:	|         jsr 7d8 <getFloat>
    d7a2:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d7a4:	|         move.l 1cb0e <bigDataFile>,d0
    d7aa:	|         move.l d0,-(sp)
    d7ac:	|         jsr 6bc <get2bytes>
    d7b2:	|         addq.l #4,sp
    d7b4:	|         move.l d0,d0
    d7b6:	|         movea.l 72(sp),a0
    d7ba:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d7be:	|         move.l 1cb0e <bigDataFile>,d0
    d7c4:	|         move.l d0,-(sp)
    d7c6:	|         jsr 6bc <get2bytes>
    d7cc:	|         addq.l #4,sp
    d7ce:	|         movea.l 72(sp),a0
    d7d2:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d7d6:	|         movea.l 72(sp),a0
    d7da:	|         move.l 16(a0),d0
    d7de:	|  ,----- beq.s d810 <loadObjectType+0x202>
    d7e0:	|  |      movea.l 72(sp),a0
    d7e4:	|  |      move.l 16(a0),d0
    d7e8:	|  |      lsl.l #3,d0
    d7ea:	|  |      move.l d0,16(sp)
    d7ee:	|  |      clr.l 12(sp)
    d7f2:	|  |      move.l 1cb26 <SysBase>,d0
    d7f8:	|  |      movea.l d0,a6
    d7fa:	|  |      move.l 16(sp),d0
    d7fe:	|  |      move.l 12(sp),d1
    d802:	|  |      jsr -684(a6)
    d806:	|  |      move.l d0,8(sp)
    d80a:	|  |      move.l 8(sp),d0
    d80e:	|  |  ,-- bra.s d812 <loadObjectType+0x204>
    d810:	|  '--|-> moveq #0,d0
    d812:	|     '-> movea.l 72(sp),a0
    d816:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d81a:	|         clr.l 88(sp)
    d81e:	|     ,-- bra.s d86e <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d820:	|  ,--|-> move.l 1cb0e <bigDataFile>,d1
    d826:	|  |  |   movea.l 72(sp),a0
    d82a:	|  |  |   movea.l 38(a0),a0
    d82e:	|  |  |   move.l 88(sp),d0
    d832:	|  |  |   lsl.l #3,d0
    d834:	|  |  |   lea (0,a0,d0.l),a2
    d838:	|  |  |   move.l d1,-(sp)
    d83a:	|  |  |   jsr 6bc <get2bytes>
    d840:	|  |  |   addq.l #4,sp
    d842:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d844:	|  |  |   move.l 1cb0e <bigDataFile>,d1
    d84a:	|  |  |   movea.l 72(sp),a0
    d84e:	|  |  |   movea.l 38(a0),a0
    d852:	|  |  |   move.l 88(sp),d0
    d856:	|  |  |   lsl.l #3,d0
    d858:	|  |  |   lea (0,a0,d0.l),a2
    d85c:	|  |  |   move.l d1,-(sp)
    d85e:	|  |  |   jsr 6bc <get2bytes>
    d864:	|  |  |   addq.l #4,sp
    d866:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d86a:	|  |  |   addq.l #1,88(sp)
    d86e:	|  |  '-> movea.l 72(sp),a0
    d872:	|  |      move.l 16(a0),d0
    d876:	|  |      cmp.l 88(sp),d0
    d87a:	|  '----- bgt.s d820 <loadObjectType+0x212>
            }
            finishAccess();
    d87c:	|         jsr 7616 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d882:	|         move.l 68(sp),-(sp)
    d886:	|         jsr 7620 <getNumberedString>
    d88c:	|         addq.l #4,sp
    d88e:	|         movea.l 72(sp),a0
    d892:	|         move.l d0,(a0)
            newType->objectNum = i;
    d894:	|         movea.l 72(sp),a0
    d898:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d89e:	|         move.l 1cbd4 <allObjectTypes>,d0
    d8a4:	|         movea.l 72(sp),a0
    d8a8:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d8ac:	|         move.l 72(sp),1cbd4 <allObjectTypes>
            return newType;
    d8b4:	|         move.l 72(sp),d0
    d8b8:	|     ,-- bra.s d8bc <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d8ba:	'-----|-> moveq #0,d0
}
    d8bc:	      '-> movea.l (sp)+,a2
    d8be:	          movea.l (sp)+,a6
    d8c0:	          lea 84(sp),sp
    d8c4:	          rts

0000d8c6 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d8c6:	             lea -16(sp),sp
    d8ca:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d8cc:	             move.l #117716,16(sp)

	while (* huntRegion) {
    d8d4:	   ,-------- bra.s d948 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d8d6:	,--|-------> movea.l 16(sp),a0
    d8da:	|  |         move.l (a0),d0
    d8dc:	|  |         cmp.l 24(sp),d0
    d8e0:	|  |  ,----- bne.s d93a <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d8e2:	|  |  |      movea.l 24(sp),a0
    d8e6:	|  |  |      move.l 8(a0),d0
    d8ea:	|  |  |      movea.l 16(sp),a0
    d8ee:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d8f0:	|  |  |      movea.l 24(sp),a0
    d8f4:	|  |  |      move.l 38(a0),12(sp)
    d8fa:	|  |  |      move.l 1cb26 <SysBase>,d0
    d900:	|  |  |      movea.l d0,a6
    d902:	|  |  |      movea.l 12(sp),a1
    d906:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d90a:	|  |  |      movea.l 24(sp),a0
    d90e:	|  |  |      move.l (a0),8(sp)
    d912:	|  |  |      move.l 1cb26 <SysBase>,d0
    d918:	|  |  |      movea.l d0,a6
    d91a:	|  |  |      movea.l 8(sp),a1
    d91e:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d922:	|  |  |      move.l 24(sp),4(sp)
    d928:	|  |  |      move.l 1cb26 <SysBase>,d0
    d92e:	|  |  |      movea.l d0,a6
    d930:	|  |  |      movea.l 4(sp),a1
    d934:	|  |  |      jsr -690(a6)
			return;
    d938:	|  |  |  ,-- bra.s d95e <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d93a:	|  |  '--|-> movea.l 16(sp),a0
    d93e:	|  |     |   move.l (a0),d0
    d940:	|  |     |   move.l d0,d1
    d942:	|  |     |   addq.l #8,d1
    d944:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d948:	|  '-----|-> movea.l 16(sp),a0
    d94c:	|        |   move.l (a0),d0
    d94e:	'--------|-- bne.s d8d6 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d950:	         |   pea 19752 <PutChar+0x19d8>
    d956:	         |   jsr 172d8 <KPrintF>
    d95c:	         |   addq.l #4,sp
}
    d95e:	         '-> movea.l (sp)+,a6
    d960:	             lea 16(sp),sp
    d964:	             rts

0000d966 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d966:	movea.l 4(sp),a0
    d96a:	move.l 4(a0),d0
    d96e:	move.l 8(sp),-(sp)
    d972:	move.l d0,-(sp)
    d974:	jsr 8d0 <put2bytes>
    d97a:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d97c:	movea.l 4(sp),a0
    d980:	move.l (a0),d0
    d982:	move.l 8(sp),-(sp)
    d986:	move.l d0,-(sp)
    d988:	jsr bd8 <writeString>
    d98e:	addq.l #8,sp
    d990:	nop
    d992:	rts

0000d994 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d994:	                         lea -112(sp),sp
    d998:	                         move.l a6,-(sp)
    d99a:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d99c:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d9a0:	                         move.w 1cbda <saveEncoding>,d0
    d9a6:	                  ,----- beq.s d9b0 <fileToStack+0x1c>
    d9a8:	                  |      move.l #104312,d0
    d9ae:	                  |  ,-- bra.s d9b6 <fileToStack+0x22>
    d9b0:	                  '--|-> move.l #104338,d0
    d9b6:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d9ba:	                         move.l 124(sp),112(sp)
    d9c0:	                         move.l #1005,108(sp)
    d9c8:	                         move.l 1cb2e <DOSBase>,d0
    d9ce:	                         movea.l d0,a6
    d9d0:	                         move.l 112(sp),d1
    d9d4:	                         move.l 108(sp),d2
    d9d8:	                         jsr -30(a6)
    d9dc:	                         move.l d0,104(sp)
    d9e0:	                         move.l 104(sp),d0
    d9e4:	                         move.l d0,100(sp)
    if (!fp) {
    d9e8:	                     ,-- bne.s da02 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d9ea:	                     |   move.l 124(sp),-(sp)
    d9ee:	                     |   pea 197a9 <PutChar+0x1a2f>
    d9f4:	                     |   jsr 172d8 <KPrintF>
    d9fa:	                     |   addq.l #8,sp
        return FALSE;
    d9fc:	                     |   clr.w d0
    d9fe:	,--------------------|-- bra.w dcf8 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    da02:	|                    '-> move.w 1cbda <saveEncoding>,d0
    da08:	|                        move.l d0,d0
    da0a:	|                        move.b d0,1cbd8 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    da10:	|                        move.w 1cbda <saveEncoding>,d0
    da16:	|                        lsr.w #8,d0
    da18:	|                        move.l d0,d0
    da1a:	|                        move.b d0,1cbd9 <encode2>

    while (*checker) {
    da20:	|                 ,----- bra.s da84 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    da22:	|              ,--|----> move.l 100(sp),30(sp)
    da28:	|              |  |      move.l 1cb2e <DOSBase>,d0
    da2e:	|              |  |      movea.l d0,a6
    da30:	|              |  |      move.l 30(sp),d1
    da34:	|              |  |      jsr -306(a6)
    da38:	|              |  |      move.l d0,26(sp)
    da3c:	|              |  |      move.l 26(sp),d1
    da40:	|              |  |      movea.l 116(sp),a0
    da44:	|              |  |      move.b (a0),d0
    da46:	|              |  |      ext.w d0
    da48:	|              |  |      movea.w d0,a0
    da4a:	|              |  |      cmpa.l d1,a0
    da4c:	|              |  |  ,-- beq.s da80 <fileToStack+0xec>
            Close(fp);
    da4e:	|              |  |  |   move.l 100(sp),22(sp)
    da54:	|              |  |  |   move.l 1cb2e <DOSBase>,d0
    da5a:	|              |  |  |   movea.l d0,a6
    da5c:	|              |  |  |   move.l 22(sp),d1
    da60:	|              |  |  |   jsr -36(a6)
    da64:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    da68:	|              |  |  |   move.l 124(sp),-(sp)
    da6c:	|              |  |  |   pea 197b6 <PutChar+0x1a3c>
    da72:	|              |  |  |   jsr 172d8 <KPrintF>
    da78:	|              |  |  |   addq.l #8,sp
            return FALSE;
    da7a:	|              |  |  |   clr.w d0
    da7c:	+--------------|--|--|-- bra.w dcf8 <fileToStack+0x364>
        }
        checker++;
    da80:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    da84:	|              |  '----> movea.l 116(sp),a0
    da88:	|              |         move.b (a0),d0
    da8a:	|              '-------- bne.s da22 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    da8c:	|                        move.w 1cbda <saveEncoding>,d0
    da92:	|  ,-------------------- beq.s db06 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    da94:	|  |                     move.l 100(sp),-(sp)
    da98:	|  |                     jsr dd02 <readStringEncoded>
    da9e:	|  |                     addq.l #4,sp
    daa0:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    daa4:	|  |                     pea 197f7 <PutChar+0x1a7d>
    daaa:	|  |                     move.l 100(sp),-(sp)
    daae:	|  |                     jsr 13ca4 <strcmp>
    dab4:	|  |                     addq.l #8,sp
    dab6:	|  |                     tst.l d0
    dab8:	|  |                 ,-- beq.s daec <fileToStack+0x158>
            Close(fp);
    daba:	|  |                 |   move.l 100(sp),88(sp)
    dac0:	|  |                 |   move.l 1cb2e <DOSBase>,d0
    dac6:	|  |                 |   movea.l d0,a6
    dac8:	|  |                 |   move.l 88(sp),d1
    dacc:	|  |                 |   jsr -36(a6)
    dad0:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    dad4:	|  |                 |   move.l 124(sp),-(sp)
    dad8:	|  |                 |   pea 19806 <PutChar+0x1a8c>
    dade:	|  |                 |   jsr 172d8 <KPrintF>
    dae4:	|  |                 |   addq.l #8,sp
            return FALSE;
    dae6:	|  |                 |   clr.w d0
    dae8:	+--|-----------------|-- bra.w dcf8 <fileToStack+0x364>
        }
        FreeVec(checker);
    daec:	|  |                 '-> move.l 96(sp),92(sp)
    daf2:	|  |                     move.l 1cb26 <SysBase>,d0
    daf8:	|  |                     movea.l d0,a6
    dafa:	|  |                     movea.l 92(sp),a1
    dafe:	|  |                     jsr -690(a6)
        checker = NULL;
    db02:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    db06:	|  >-------------------> move.w 1cbda <saveEncoding>,d0
    db0c:	|  |     ,-------------- beq.w dc40 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    db10:	|  |     |               move.l 100(sp),76(sp)
    db16:	|  |     |               move.l 1cb2e <DOSBase>,d0
    db1c:	|  |     |               movea.l d0,a6
    db1e:	|  |     |               move.l 76(sp),d1
    db22:	|  |     |               jsr -306(a6)
    db26:	|  |     |               move.l d0,72(sp)
    db2a:	|  |     |               move.l 72(sp),d0
    db2e:	|  |     |               move.b 1cbd8 <encode1>,d1
    db34:	|  |     |               ext.w d1
    db36:	|  |     |               ext.l d1
    db38:	|  |     |               move.l d0,d2
    db3a:	|  |     |               eor.l d1,d2
    db3c:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    db40:	|  |     |               moveq #-1,d0
    db42:	|  |     |               cmp.l 68(sp),d0
    db46:	|  |  ,--|-------------- beq.w dcd6 <fileToStack+0x342>

            char i = (char) tmp;
    db4a:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    db50:	|  |  |  |               move.b 67(sp),d0
    db54:	|  |  |  |               ext.w d0
    db56:	|  |  |  |               movea.w d0,a0
    db58:	|  |  |  |               moveq #2,d2
    db5a:	|  |  |  |               cmp.l a0,d2
    db5c:	|  |  |  |     ,-------- beq.s dbd8 <fileToStack+0x244>
    db5e:	|  |  |  |     |         moveq #2,d0
    db60:	|  |  |  |     |         cmp.l a0,d0
    db62:	|  |  |  |  ,--|-------- blt.w dc0e <fileToStack+0x27a>
    db66:	|  |  |  |  |  |         cmpa.w #0,a0
    db6a:	|  |  |  |  |  |     ,-- beq.s db76 <fileToStack+0x1e2>
    db6c:	|  |  |  |  |  |     |   moveq #1,d2
    db6e:	|  |  |  |  |  |     |   cmp.l a0,d2
    db70:	|  |  |  |  |  |  ,--|-- beq.s dbb2 <fileToStack+0x21e>
    db72:	|  |  |  |  +--|--|--|-- bra.w dc0e <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    db76:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    db7a:	|  |  |  |  |  |  |      jsr dd02 <readStringEncoded>
    db80:	|  |  |  |  |  |  |      addq.l #4,sp
    db82:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    db86:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    db8a:	|  |  |  |  |  |  |      lea 14(sp),a0
    db8e:	|  |  |  |  |  |  |      move.l a0,-(sp)
    db90:	|  |  |  |  |  |  |      jsr 14a1a <makeTextVar>
    db96:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    db98:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    db9e:	|  |  |  |  |  |  |      move.l 1cb26 <SysBase>,d0
    dba4:	|  |  |  |  |  |  |      movea.l d0,a6
    dba6:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    dbaa:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    dbae:	|  |  |  |  |  |  |  ,-- bra.w dc66 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    dbb2:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    dbb6:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    dbbc:	|  |  |  |  |  |     |   addq.l #4,sp
    dbbe:	|  |  |  |  |  |     |   move.l d0,-(sp)
    dbc0:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    dbc4:	|  |  |  |  |  |     |   lea 18(sp),a0
    dbc8:	|  |  |  |  |  |     |   move.l a0,-(sp)
    dbca:	|  |  |  |  |  |     |   jsr 150ea <setVariable>
    dbd0:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    dbd4:	|  |  |  |  |  |     +-- bra.w dc66 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    dbd8:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    dbde:	|  |  |  |  |        |   move.l 1cb2e <DOSBase>,d0
    dbe4:	|  |  |  |  |        |   movea.l d0,a6
    dbe6:	|  |  |  |  |        |   move.l 62(sp),d1
    dbea:	|  |  |  |  |        |   jsr -306(a6)
    dbee:	|  |  |  |  |        |   move.l d0,58(sp)
    dbf2:	|  |  |  |  |        |   move.l 58(sp),d0
    dbf6:	|  |  |  |  |        |   move.l d0,-(sp)
    dbf8:	|  |  |  |  |        |   pea 1 <_start+0x1>
    dbfc:	|  |  |  |  |        |   lea 18(sp),a0
    dc00:	|  |  |  |  |        |   move.l a0,-(sp)
    dc02:	|  |  |  |  |        |   jsr 150ea <setVariable>
    dc08:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    dc0c:	|  |  |  |  |        +-- bra.s dc66 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    dc0e:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    dc12:	|  |  |  |           |   pea 19888 <PutChar+0x1b0e>
    dc18:	|  |  |  |           |   jsr 172d8 <KPrintF>
    dc1e:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    dc20:	|  |  |  |           |   move.l 100(sp),46(sp)
    dc26:	|  |  |  |           |   move.l 1cb2e <DOSBase>,d0
    dc2c:	|  |  |  |           |   movea.l d0,a6
    dc2e:	|  |  |  |           |   move.l 46(sp),d1
    dc32:	|  |  |  |           |   jsr -36(a6)
    dc36:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    dc3a:	|  |  |  |           |   clr.w d0
    dc3c:	+--|--|--|-----------|-- bra.w dcf8 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    dc40:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    dc44:	|  |  |              |   jsr ddc8 <readTextPlain>
    dc4a:	|  |  |              |   addq.l #4,sp
    dc4c:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    dc50:	|  |  |        ,-----|-- beq.w dcda <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    dc54:	|  |  |        |     |   move.l 80(sp),-(sp)
    dc58:	|  |  |        |     |   lea 14(sp),a0
    dc5c:	|  |  |        |     |   move.l a0,-(sp)
    dc5e:	|  |  |        |     |   jsr 14a1a <makeTextVar>
    dc64:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dc66:	|  |  |        |     '-> movea.l 128(sp),a0
    dc6a:	|  |  |        |         move.l (a0),d0
    dc6c:	|  |  |        |  ,----- bne.s dc9c <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dc6e:	|  |  |        |  |      move.l 128(sp),d0
    dc72:	|  |  |        |  |      move.l d0,-(sp)
    dc74:	|  |  |        |  |      lea 14(sp),a0
    dc78:	|  |  |        |  |      move.l a0,-(sp)
    dc7a:	|  |  |        |  |      jsr 140ba <addVarToStackQuick>
    dc80:	|  |  |        |  |      addq.l #8,sp
    dc82:	|  |  |        |  |      tst.w d0
    dc84:	|  |  |        |  |  ,-- bne.s dc8a <fileToStack+0x2f6>
    dc86:	|  |  |        |  |  |   clr.w d0
    dc88:	+--|--|--------|--|--|-- bra.s dcf8 <fileToStack+0x364>
            sH->last = sH->first;
    dc8a:	|  |  |        |  |  '-> movea.l 128(sp),a0
    dc8e:	|  |  |        |  |      move.l (a0),d0
    dc90:	|  |  |        |  |      movea.l 128(sp),a0
    dc94:	|  |  |        |  |      move.l d0,4(a0)
    dc98:	|  +--|--------|--|----- bra.w db06 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    dc9c:	|  |  |        |  '----> movea.l 128(sp),a0
    dca0:	|  |  |        |         move.l 4(a0),d0
    dca4:	|  |  |        |         addq.l #8,d0
    dca6:	|  |  |        |         move.l d0,-(sp)
    dca8:	|  |  |        |         lea 14(sp),a0
    dcac:	|  |  |        |         move.l a0,-(sp)
    dcae:	|  |  |        |         jsr 140ba <addVarToStackQuick>
    dcb4:	|  |  |        |         addq.l #8,sp
    dcb6:	|  |  |        |         tst.w d0
    dcb8:	|  |  |        |     ,-- bne.s dcbe <fileToStack+0x32a>
    dcba:	|  |  |        |     |   clr.w d0
    dcbc:	+--|--|--------|-----|-- bra.s dcf8 <fileToStack+0x364>
            sH->last = sH->last->next;
    dcbe:	|  |  |        |     '-> movea.l 128(sp),a0
    dcc2:	|  |  |        |         movea.l 4(a0),a0
    dcc6:	|  |  |        |         move.l 8(a0),d0
    dcca:	|  |  |        |         movea.l 128(sp),a0
    dcce:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    dcd2:	|  '--|--------|-------- bra.w db06 <fileToStack+0x172>
            if (tmp == -1) break;
    dcd6:	|     '--------|-------> nop
    dcd8:	|              |     ,-- bra.s dcdc <fileToStack+0x348>
            if (!line) break;
    dcda:	|              '-----|-> nop
        }
    }
    Close(fp);
    dcdc:	|                    '-> move.l 100(sp),38(sp)
    dce2:	|                        move.l 1cb2e <DOSBase>,d0
    dce8:	|                        movea.l d0,a6
    dcea:	|                        move.l 38(sp),d1
    dcee:	|                        jsr -36(a6)
    dcf2:	|                        move.l d0,34(sp)
    return TRUE;
    dcf6:	|                        moveq #1,d0
}
    dcf8:	'----------------------> move.l (sp)+,d2
    dcfa:	                         movea.l (sp)+,a6
    dcfc:	                         lea 112(sp),sp
    dd00:	                         rts

0000dd02 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    dd02:	          lea -32(sp),sp
    dd06:	          move.l a6,-(sp)
    dd08:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    dd0a:	          move.l 44(sp),-(sp)
    dd0e:	          jsr 6bc <get2bytes>
    dd14:	          addq.l #4,sp
    dd16:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    dd1a:	          move.l 32(sp),d0
    dd1e:	          addq.l #1,d0
    dd20:	          move.l d0,28(sp)
    dd24:	          clr.l 24(sp)
    dd28:	          move.l 1cb26 <SysBase>,d0
    dd2e:	          movea.l d0,a6
    dd30:	          move.l 28(sp),d0
    dd34:	          move.l 24(sp),d1
    dd38:	          jsr -684(a6)
    dd3c:	          move.l d0,20(sp)
    dd40:	          move.l 20(sp),d0
    dd44:	          move.l d0,16(sp)
    if (!s) return NULL;
    dd48:	      ,-- bne.s dd4e <readStringEncoded+0x4c>
    dd4a:	      |   moveq #0,d0
    dd4c:	,-----|-- bra.s ddbe <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    dd4e:	|     '-> clr.l 36(sp)
    dd52:	|     ,-- bra.s dda4 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    dd54:	|  ,--|-> move.l 44(sp),12(sp)
    dd5a:	|  |  |   move.l 1cb2e <DOSBase>,d0
    dd60:	|  |  |   movea.l d0,a6
    dd62:	|  |  |   move.l 12(sp),d1
    dd66:	|  |  |   jsr -306(a6)
    dd6a:	|  |  |   move.l d0,8(sp)
    dd6e:	|  |  |   move.l 8(sp),d0
    dd72:	|  |  |   move.l d0,d1
    dd74:	|  |  |   move.b 1cbd8 <encode1>,d2
    dd7a:	|  |  |   move.l 36(sp),d0
    dd7e:	|  |  |   movea.l 16(sp),a0
    dd82:	|  |  |   adda.l d0,a0
    dd84:	|  |  |   move.b d1,d0
    dd86:	|  |  |   eor.b d2,d0
    dd88:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    dd8a:	|  |  |   move.b 1cbd8 <encode1>,d0
    dd90:	|  |  |   move.b d0,d1
    dd92:	|  |  |   move.b 1cbd9 <encode2>,d0
    dd98:	|  |  |   add.b d1,d0
    dd9a:	|  |  |   move.b d0,1cbd8 <encode1>
    for (a = 0; a < len; a++) {
    dda0:	|  |  |   addq.l #1,36(sp)
    dda4:	|  |  '-> move.l 36(sp),d0
    dda8:	|  |      cmp.l 32(sp),d0
    ddac:	|  '----- blt.s dd54 <readStringEncoded+0x52>
    }
    s[len] = 0;
    ddae:	|         move.l 32(sp),d0
    ddb2:	|         movea.l 16(sp),a0
    ddb6:	|         adda.l d0,a0
    ddb8:	|         clr.b (a0)
    return s;
    ddba:	|         move.l 16(sp),d0
}
    ddbe:	'-------> move.l (sp)+,d2
    ddc0:	          movea.l (sp)+,a6
    ddc2:	          lea 32(sp),sp
    ddc6:	          rts

0000ddc8 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    ddc8:	             lea -104(sp),sp
    ddcc:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    ddd0:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    ddd4:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    ddda:	             move.l 124(sp),106(sp)
    dde0:	             clr.l 102(sp)
    dde4:	             clr.l 98(sp)
    dde8:	             move.l 1cb2e <DOSBase>,d0
    ddee:	             movea.l d0,a6
    ddf0:	             move.l 106(sp),d1
    ddf4:	             move.l 102(sp),d2
    ddf8:	             move.l 98(sp),d3
    ddfc:	             jsr -66(a6)
    de00:	             move.l d0,94(sp)
    de04:	             move.l 94(sp),d0
    de08:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    de0c:	   ,-------- bra.s de50 <readTextPlain+0x88>
        tmp = FGetC(fp);
    de0e:	,--|-------> move.l 124(sp),22(sp)
    de14:	|  |         move.l 1cb2e <DOSBase>,d0
    de1a:	|  |         movea.l d0,a6
    de1c:	|  |         move.l 22(sp),d1
    de20:	|  |         jsr -306(a6)
    de24:	|  |         move.l d0,18(sp)
    de28:	|  |         move.l 18(sp),d0
    de2c:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    de30:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    de36:	|  |         cmpi.b #10,17(sp)
    de3c:	|  |  ,----- beq.s de46 <readTextPlain+0x7e>
    de3e:	|  |  |      moveq #-1,d0
    de40:	|  |  |      cmp.l 110(sp),d0
    de44:	|  |  |  ,-- bne.s de4c <readTextPlain+0x84>
            keepGoing = FALSE;
    de46:	|  |  '--|-> clr.w 114(sp)
    de4a:	|  +-----|-- bra.s de50 <readTextPlain+0x88>
        } else {
            stringSize++;
    de4c:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    de50:	|  '-------> tst.w 114(sp)
    de54:	'----------- bne.s de0e <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    de56:	             tst.l 116(sp)
    de5a:	         ,-- bne.s de6a <readTextPlain+0xa2>
    de5c:	         |   moveq #-1,d0
    de5e:	         |   cmp.l 110(sp),d0
    de62:	         +-- bne.s de6a <readTextPlain+0xa2>
        return NULL;
    de64:	         |   moveq #0,d0
    de66:	      ,--|-- bra.w df50 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    de6a:	      |  '-> move.l 124(sp),86(sp)
    de70:	      |      move.l 90(sp),82(sp)
    de76:	      |      moveq #-1,d0
    de78:	      |      move.l d0,78(sp)
    de7c:	      |      move.l 1cb2e <DOSBase>,d0
    de82:	      |      movea.l d0,a6
    de84:	      |      move.l 86(sp),d1
    de88:	      |      move.l 82(sp),d2
    de8c:	      |      move.l 78(sp),d3
    de90:	      |      jsr -66(a6)
    de94:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    de98:	      |      move.l 116(sp),d0
    de9c:	      |      addq.l #1,d0
    de9e:	      |      move.l d0,70(sp)
    dea2:	      |      clr.l 66(sp)
    dea6:	      |      move.l 1cb26 <SysBase>,d0
    deac:	      |      movea.l d0,a6
    deae:	      |      move.l 70(sp),d0
    deb2:	      |      move.l 66(sp),d1
    deb6:	      |      jsr -684(a6)
    deba:	      |      move.l d0,62(sp)
    debe:	      |      move.l 62(sp),d0
    dec2:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    dec6:	      |  ,-- bne.s dece <readTextPlain+0x106>
    dec8:	      |  |   moveq #0,d0
    deca:	      +--|-- bra.w df50 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    dece:	      |  '-> move.l 124(sp),54(sp)
    ded4:	      |      move.l 58(sp),50(sp)
    deda:	      |      moveq #1,d0
    dedc:	      |      move.l d0,46(sp)
    dee0:	      |      move.l 116(sp),42(sp)
    dee6:	      |      move.l 1cb2e <DOSBase>,d0
    deec:	      |      movea.l d0,a6
    deee:	      |      move.l 54(sp),d1
    def2:	      |      move.l 50(sp),d2
    def6:	      |      move.l 46(sp),d3
    defa:	      |      move.l 42(sp),d4
    defe:	      |      jsr -324(a6)
    df02:	      |      move.l d0,38(sp)
    df06:	      |      move.l 38(sp),d0
    df0a:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    df0e:	      |      move.l 34(sp),d0
    df12:	      |      cmp.l 116(sp),d0
    df16:	      |  ,-- beq.s df26 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    df18:	      |  |   pea 198bd <PutChar+0x1b43>
    df1e:	      |  |   jsr 172d8 <KPrintF>
    df24:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    df26:	      |  '-> move.l 124(sp),30(sp)
    df2c:	      |      move.l 1cb2e <DOSBase>,d0
    df32:	      |      movea.l d0,a6
    df34:	      |      move.l 30(sp),d1
    df38:	      |      jsr -306(a6)
    df3c:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    df40:	      |      move.l 116(sp),d0
    df44:	      |      movea.l 58(sp),a0
    df48:	      |      adda.l d0,a0
    df4a:	      |      clr.b (a0)
    }

    return reply;
    df4c:	      |      move.l 58(sp),d0
}
    df50:	      '----> movem.l (sp)+,d2-d4/a6
    df54:	             lea 104(sp),sp
    df58:	             rts

0000df5a <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    df5a:	                      lea -144(sp),sp
    df5e:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    df62:	                      move.l 160(sp),148(sp)
    df68:	                      move.l #1006,144(sp)
    df70:	                      move.l 1cb2e <DOSBase>,d0
    df76:	                      movea.l d0,a6
    df78:	                      move.l 148(sp),d1
    df7c:	                      move.l 144(sp),d2
    df80:	                      jsr -30(a6)
    df84:	                      move.l d0,140(sp)
    df88:	                      move.l 140(sp),d0
    df8c:	                      move.l d0,136(sp)

    if (!fp) {
    df90:	                  ,-- bne.s dfaa <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    df92:	                  |   move.l 160(sp),-(sp)
    df96:	                  |   pea 198de <PutChar+0x1b64>
    df9c:	                  |   jsr 172d8 <KPrintF>
    dfa2:	                  |   addq.l #8,sp
        return FALSE;
    dfa4:	                  |   clr.w d0
    dfa6:	,-----------------|-- bra.w e266 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    dfaa:	|                 '-> movea.l 164(sp),a0
    dfae:	|                     movea.l 4(a0),a0
    dfb2:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    dfb6:	|                     move.w 1cbda <saveEncoding>,d0
    dfbc:	|                     move.l d0,d0
    dfbe:	|                     move.b d0,1cbd8 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    dfc4:	|                     move.w 1cbda <saveEncoding>,d0
    dfca:	|                     lsr.w #8,d0
    dfcc:	|                     move.l d0,d0
    dfce:	|                     move.b d0,1cbd9 <encode2>

    if (saveEncoding) {
    dfd4:	|                     move.w 1cbda <saveEncoding>,d0
    dfda:	|                 ,-- beq.s e02c <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    dfdc:	|                 |   move.l 136(sp),116(sp)
    dfe2:	|                 |   move.l #104312,112(sp)
    dfea:	|                 |   moveq #99,d0
    dfec:	|                 |   not.b d0
    dfee:	|                 |   add.l sp,d0
    dff0:	|                 |   addi.l #-144,d0
    dff6:	|                 |   move.l d0,108(sp)
    dffa:	|                 |   move.l 1cb2e <DOSBase>,d0
    e000:	|                 |   movea.l d0,a6
    e002:	|                 |   move.l 116(sp),d1
    e006:	|                 |   move.l 112(sp),d2
    e00a:	|                 |   move.l 108(sp),d3
    e00e:	|                 |   jsr -354(a6)
    e012:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e016:	|                 |   move.l 136(sp),-(sp)
    e01a:	|                 |   pea 197f7 <PutChar+0x1a7d>
    e020:	|                 |   jsr e270 <writeStringEncoded>
    e026:	|                 |   addq.l #8,sp
    e028:	|  ,--------------|-- bra.w e23e <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e02c:	|  |              '-> move.l 136(sp),132(sp)
    e032:	|  |                  move.l #104338,128(sp)
    e03a:	|  |                  moveq #99,d1
    e03c:	|  |                  not.b d1
    e03e:	|  |                  add.l sp,d1
    e040:	|  |                  addi.l #-144,d1
    e046:	|  |                  move.l d1,124(sp)
    e04a:	|  |                  move.l 1cb2e <DOSBase>,d0
    e050:	|  |                  movea.l d0,a6
    e052:	|  |                  move.l 132(sp),d1
    e056:	|  |                  move.l 128(sp),d2
    e05a:	|  |                  move.l 124(sp),d3
    e05e:	|  |                  jsr -354(a6)
    e062:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e066:	|  +----------------- bra.w e23e <stackToFile+0x2e4>
        if (saveEncoding) {
    e06a:	|  |  ,-------------> move.w 1cbda <saveEncoding>,d0
    e070:	|  |  |     ,-------- beq.w e1c2 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e074:	|  |  |     |         movea.l 152(sp),a0
    e078:	|  |  |     |         move.l (a0),d0
    e07a:	|  |  |     |         moveq #1,d1
    e07c:	|  |  |     |         cmp.l d0,d1
    e07e:	|  |  |     |     ,-- beq.s e0ce <stackToFile+0x174>
    e080:	|  |  |     |     |   moveq #3,d1
    e082:	|  |  |     |     |   cmp.l d0,d1
    e084:	|  |  |     |  ,--|-- bne.w e190 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e088:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e08e:	|  |  |     |  |  |   move.b 1cbd8 <encode1>,d0
    e094:	|  |  |     |  |  |   ext.w d0
    e096:	|  |  |     |  |  |   movea.w d0,a0
    e098:	|  |  |     |  |  |   move.l a0,72(sp)
    e09c:	|  |  |     |  |  |   move.l 1cb2e <DOSBase>,d0
    e0a2:	|  |  |     |  |  |   movea.l d0,a6
    e0a4:	|  |  |     |  |  |   move.l 76(sp),d1
    e0a8:	|  |  |     |  |  |   move.l 72(sp),d2
    e0ac:	|  |  |     |  |  |   jsr -312(a6)
    e0b0:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e0b4:	|  |  |     |  |  |   movea.l 152(sp),a0
    e0b8:	|  |  |     |  |  |   move.l 4(a0),d0
    e0bc:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e0c0:	|  |  |     |  |  |   move.l d0,-(sp)
    e0c2:	|  |  |     |  |  |   jsr e270 <writeStringEncoded>
    e0c8:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e0ca:	|  |  |  ,--|--|--|-- bra.w e234 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e0ce:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    e0d2:	|  |  |  |  |  |      move.l 4(a0),d0
    e0d6:	|  |  |  |  |  |  ,-- bmi.s e146 <stackToFile+0x1ec>
    e0d8:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e0dc:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e0e0:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e0e6:	|  |  |  |  |  |  +-- bgt.s e146 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e0e8:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e0ee:	|  |  |  |  |  |  |   move.b 1cbd8 <encode1>,d0
    e0f4:	|  |  |  |  |  |  |   eori.b #2,d0
    e0f8:	|  |  |  |  |  |  |   ext.w d0
    e0fa:	|  |  |  |  |  |  |   movea.w d0,a0
    e0fc:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e100:	|  |  |  |  |  |  |   move.l 1cb2e <DOSBase>,d0
    e106:	|  |  |  |  |  |  |   movea.l d0,a6
    e108:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e10c:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e110:	|  |  |  |  |  |  |   jsr -312(a6)
    e114:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e118:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e11e:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e122:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e128:	|  |  |  |  |  |  |   move.l 1cb2e <DOSBase>,d0
    e12e:	|  |  |  |  |  |  |   movea.l d0,a6
    e130:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e134:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e138:	|  |  |  |  |  |  |   jsr -312(a6)
    e13c:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e140:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e142:	|  |  |  +--|--|--|-- bra.w e234 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e146:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    e14c:	|  |  |  |  |  |      move.b 1cbd8 <encode1>,d0
    e152:	|  |  |  |  |  |      eori.b #1,d0
    e156:	|  |  |  |  |  |      ext.w d0
    e158:	|  |  |  |  |  |      movea.w d0,a0
    e15a:	|  |  |  |  |  |      move.l a0,36(sp)
    e15e:	|  |  |  |  |  |      move.l 1cb2e <DOSBase>,d0
    e164:	|  |  |  |  |  |      movea.l d0,a6
    e166:	|  |  |  |  |  |      move.l 40(sp),d1
    e16a:	|  |  |  |  |  |      move.l 36(sp),d2
    e16e:	|  |  |  |  |  |      jsr -312(a6)
    e172:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e176:	|  |  |  |  |  |      movea.l 152(sp),a0
    e17a:	|  |  |  |  |  |      move.l 4(a0),d0
    e17e:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e182:	|  |  |  |  |  |      move.l d0,-(sp)
    e184:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e18a:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e18c:	|  |  |  +--|--|----- bra.w e234 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e190:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    e194:	|  |  |  |  |         pea 198f0 <PutChar+0x1b76>
    e19a:	|  |  |  |  |         jsr 172d8 <KPrintF>
    e1a0:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e1a2:	|  |  |  |  |         move.l 136(sp),28(sp)
    e1a8:	|  |  |  |  |         move.l 1cb2e <DOSBase>,d0
    e1ae:	|  |  |  |  |         movea.l d0,a6
    e1b0:	|  |  |  |  |         move.l 28(sp),d1
    e1b4:	|  |  |  |  |         jsr -36(a6)
    e1b8:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e1bc:	|  |  |  |  |         clr.w d0
    e1be:	+--|--|--|--|-------- bra.w e266 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e1c2:	|  |  |  |  '-------> move.l 152(sp),d0
    e1c6:	|  |  |  |            move.l d0,-(sp)
    e1c8:	|  |  |  |            jsr 14dce <getTextFromAnyVar>
    e1ce:	|  |  |  |            addq.l #4,sp
    e1d0:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e1d4:	|  |  |  |     ,----- beq.s e248 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e1d6:	|  |  |  |     |      movea.l 100(sp),a0
    e1da:	|  |  |  |     |      move.b (a0),d0
    e1dc:	|  |  |  |     |      ext.w d0
    e1de:	|  |  |  |     |      movea.w d0,a0
    e1e0:	|  |  |  |     |      move.l a0,12(sp)
    e1e4:	|  |  |  |     |      move.l 136(sp),96(sp)
    e1ea:	|  |  |  |     |      move.l #104780,92(sp)
    e1f2:	|  |  |  |     |      moveq #99,d0
    e1f4:	|  |  |  |     |      not.b d0
    e1f6:	|  |  |  |     |      add.l sp,d0
    e1f8:	|  |  |  |     |      addi.l #-144,d0
    e1fe:	|  |  |  |     |      move.l d0,88(sp)
    e202:	|  |  |  |     |      move.l 1cb2e <DOSBase>,d0
    e208:	|  |  |  |     |      movea.l d0,a6
    e20a:	|  |  |  |     |      move.l 96(sp),d1
    e20e:	|  |  |  |     |      move.l 92(sp),d2
    e212:	|  |  |  |     |      move.l 88(sp),d3
    e216:	|  |  |  |     |      jsr -354(a6)
    e21a:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e21e:	|  |  |  |     |      move.l 100(sp),80(sp)
    e224:	|  |  |  |     |      move.l 1cb26 <SysBase>,d0
    e22a:	|  |  |  |     |      movea.l d0,a6
    e22c:	|  |  |  |     |      movea.l 80(sp),a1
    e230:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e234:	|  |  |  '-----|----> movea.l 152(sp),a0
    e238:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e23e:	|  '--|--------|----> tst.l 152(sp)
    e242:	|     '--------|----- bne.w e06a <stackToFile+0x110>
    e246:	|              |  ,-- bra.s e24a <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e248:	|              '--|-> nop
    }
    Close(fp);
    e24a:	|                 '-> move.l 136(sp),20(sp)
    e250:	|                     move.l 1cb2e <DOSBase>,d0
    e256:	|                     movea.l d0,a6
    e258:	|                     move.l 20(sp),d1
    e25c:	|                     jsr -36(a6)
    e260:	|                     move.l d0,16(sp)
    return TRUE;
    e264:	|                     moveq #1,d0
}
    e266:	'-------------------> movem.l (sp)+,d2-d3/a6
    e26a:	                      lea 144(sp),sp
    e26e:	                      rts

0000e270 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e270:	       lea -20(sp),sp
    e274:	       move.l a6,-(sp)
    e276:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e278:	       move.l 32(sp),-(sp)
    e27c:	       jsr 13ce4 <strlen>
    e282:	       addq.l #4,sp
    e284:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e288:	       move.l 36(sp),-(sp)
    e28c:	       move.l 24(sp),-(sp)
    e290:	       jsr 8d0 <put2bytes>
    e296:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e298:	       clr.l 24(sp)
    e29c:	   ,-- bra.s e2f2 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e29e:	,--|-> move.l 36(sp),16(sp)
    e2a4:	|  |   move.l 24(sp),d0
    e2a8:	|  |   movea.l 32(sp),a0
    e2ac:	|  |   adda.l d0,a0
    e2ae:	|  |   move.b (a0),d1
    e2b0:	|  |   move.b 1cbd8 <encode1>,d0
    e2b6:	|  |   eor.b d1,d0
    e2b8:	|  |   ext.w d0
    e2ba:	|  |   movea.w d0,a0
    e2bc:	|  |   move.l a0,12(sp)
    e2c0:	|  |   move.l 1cb2e <DOSBase>,d0
    e2c6:	|  |   movea.l d0,a6
    e2c8:	|  |   move.l 16(sp),d1
    e2cc:	|  |   move.l 12(sp),d2
    e2d0:	|  |   jsr -312(a6)
    e2d4:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e2d8:	|  |   move.b 1cbd8 <encode1>,d0
    e2de:	|  |   move.b d0,d1
    e2e0:	|  |   move.b 1cbd9 <encode2>,d0
    e2e6:	|  |   add.b d1,d0
    e2e8:	|  |   move.b d0,1cbd8 <encode1>
	for (a = 0; a < len; a ++) {
    e2ee:	|  |   addq.l #1,24(sp)
    e2f2:	|  '-> move.l 24(sp),d0
    e2f6:	|      cmp.l 20(sp),d0
    e2fa:	'----- blt.s e29e <writeStringEncoded+0x2e>
	}
}
    e2fc:	       nop
    e2fe:	       nop
    e300:	       move.l (sp)+,d2
    e302:	       movea.l (sp)+,a6
    e304:	       lea 20(sp),sp
    e308:	       rts

0000e30a <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e30a:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e30c:	                   tst.l 8(sp)
    e310:	               ,-- bne.s e316 <failSecurityCheck+0xc>
    e312:	               |   moveq #1,d0
    e314:	,--------------|-- bra.s e394 <failSecurityCheck+0x8a>

	int a = 0;
    e316:	|              '-> clr.l (sp)

	while (fn[a]) {
    e318:	|     ,----------- bra.s e386 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e31a:	|  ,--|----------> move.l (sp),d0
    e31c:	|  |  |            movea.l 8(sp),a0
    e320:	|  |  |            adda.l d0,a0
    e322:	|  |  |            move.b (a0),d0
    e324:	|  |  |            ext.w d0
    e326:	|  |  |            movea.w d0,a0
    e328:	|  |  |            moveq #124,d0
    e32a:	|  |  |            cmp.l a0,d0
    e32c:	|  |  |     ,----- beq.s e36e <failSecurityCheck+0x64>
    e32e:	|  |  |     |      moveq #124,d1
    e330:	|  |  |     |      cmp.l a0,d1
    e332:	|  |  |  ,--|----- blt.s e384 <failSecurityCheck+0x7a>
    e334:	|  |  |  |  |      moveq #92,d0
    e336:	|  |  |  |  |      cmp.l a0,d0
    e338:	|  |  |  |  +----- beq.s e36e <failSecurityCheck+0x64>
    e33a:	|  |  |  |  |      moveq #92,d1
    e33c:	|  |  |  |  |      cmp.l a0,d1
    e33e:	|  |  |  +--|----- blt.s e384 <failSecurityCheck+0x7a>
    e340:	|  |  |  |  |      moveq #60,d0
    e342:	|  |  |  |  |      cmp.l a0,d0
    e344:	|  |  |  |  |  ,-- blt.s e364 <failSecurityCheck+0x5a>
    e346:	|  |  |  |  |  |   moveq #34,d1
    e348:	|  |  |  |  |  |   cmp.l a0,d1
    e34a:	|  |  |  +--|--|-- bgt.s e384 <failSecurityCheck+0x7a>
    e34c:	|  |  |  |  |  |   moveq #-34,d1
    e34e:	|  |  |  |  |  |   add.l a0,d1
    e350:	|  |  |  |  |  |   move.l #83894529,d0
    e356:	|  |  |  |  |  |   lsr.l d1,d0
    e358:	|  |  |  |  |  |   moveq #1,d1
    e35a:	|  |  |  |  |  |   and.l d1,d0
    e35c:	|  |  |  |  |  |   sne d0
    e35e:	|  |  |  |  |  |   neg.b d0
    e360:	|  |  |  |  +--|-- bne.s e36e <failSecurityCheck+0x64>
    e362:	|  |  |  +--|--|-- bra.s e384 <failSecurityCheck+0x7a>
    e364:	|  |  |  |  |  '-> lea -62(a0),a0
    e368:	|  |  |  |  |      moveq #1,d0
    e36a:	|  |  |  |  |      cmp.l a0,d0
    e36c:	|  |  |  +--|----- bcs.s e384 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e36e:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e372:	|  |  |  |         pea 19950 <PutChar+0x1bd6>
    e378:	|  |  |  |         jsr 172d8 <KPrintF>
    e37e:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e380:	|  |  |  |         moveq #1,d0
    e382:	+--|--|--|-------- bra.s e394 <failSecurityCheck+0x8a>
		}
		a++;
    e384:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e386:	|  |  '----------> move.l (sp),d0
    e388:	|  |               movea.l 8(sp),a0
    e38c:	|  |               adda.l d0,a0
    e38e:	|  |               move.b (a0),d0
    e390:	|  '-------------- bne.s e31a <failSecurityCheck+0x10>
	}
	return FALSE;
    e392:	|                  clr.w d0
}
    e394:	'----------------> addq.l #4,sp
    e396:	                   rts

0000e398 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e398:	             lea -24(sp),sp
    e39c:	             move.l a6,-(sp)
    e39e:	             move.l 40(sp),d0
    e3a2:	             move.w d0,d0
    e3a4:	             move.w d0,6(sp)
	int fileNum = -1;
    e3a8:	             moveq #-1,d0
    e3aa:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e3ae:	             jsr 6a2e <killSpeechTimers>

	switch (numParams) {
    e3b4:	             moveq #2,d0
    e3b6:	             cmp.l 32(sp),d0
    e3ba:	      ,----- beq.s e3fe <sayCore+0x66>
    e3bc:	      |      moveq #3,d0
    e3be:	      |      cmp.l 32(sp),d0
    e3c2:	,-----|----- bne.w e4e0 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e3c6:	|     |      movea.l 36(sp),a0
    e3ca:	|     |      move.l 24(a0),d0
    e3ce:	|     |      move.l d0,-(sp)
    e3d0:	|     |      pea 5 <_start+0x5>
    e3d4:	|     |      lea 20(sp),a0
    e3d8:	|     |      move.l a0,-(sp)
    e3da:	|     |      jsr 147f8 <getValueType>
    e3e0:	|     |      lea 12(sp),sp
    e3e4:	|     |      tst.w d0
    e3e6:	|     |  ,-- bne.s e3ee <sayCore+0x56>
    e3e8:	|     |  |   moveq #1,d0
    e3ea:	|  ,--|--|-- bra.w e4f0 <sayCore+0x158>
			trimStack (&fun -> stack);
    e3ee:	|  |  |  '-> moveq #24,d0
    e3f0:	|  |  |      add.l 36(sp),d0
    e3f4:	|  |  |      move.l d0,-(sp)
    e3f6:	|  |  |      jsr 1517c <trimStack>
    e3fc:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e3fe:	|  |  '----> movea.l 36(sp),a0
    e402:	|  |         move.l 24(a0),d0
    e406:	|  |         move.l d0,-(sp)
    e408:	|  |         jsr 14dce <getTextFromAnyVar>
    e40e:	|  |         addq.l #4,sp
    e410:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e414:	|  |     ,-- bne.s e41c <sayCore+0x84>
    e416:	|  |     |   moveq #1,d0
    e418:	|  +-----|-- bra.w e4f0 <sayCore+0x158>
			trimStack (&fun -> stack);
    e41c:	|  |     '-> moveq #24,d0
    e41e:	|  |         add.l 36(sp),d0
    e422:	|  |         move.l d0,-(sp)
    e424:	|  |         jsr 1517c <trimStack>
    e42a:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e42c:	|  |         movea.l 36(sp),a0
    e430:	|  |         move.l 24(a0),d0
    e434:	|  |         move.l d0,-(sp)
    e436:	|  |         pea 7 <_start+0x7>
    e43a:	|  |         lea 16(sp),a0
    e43e:	|  |         move.l a0,-(sp)
    e440:	|  |         jsr 147f8 <getValueType>
    e446:	|  |         lea 12(sp),sp
    e44a:	|  |         tst.w d0
    e44c:	|  |     ,-- bne.s e454 <sayCore+0xbc>
    e44e:	|  |     |   moveq #1,d0
    e450:	|  +-----|-- bra.w e4f0 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e454:	|  |     '-> movea.l 36(sp),a0
    e458:	|  |         move.l 24(a0),d0
    e45c:	|  |         move.l d0,-(sp)
    e45e:	|  |         pea 7 <_start+0x7>
    e462:	|  |         lea 16(sp),a0
    e466:	|  |         move.l a0,-(sp)
    e468:	|  |         jsr 147f8 <getValueType>
    e46e:	|  |         lea 12(sp),sp
    e472:	|  |         tst.w d0
    e474:	|  |     ,-- bne.s e47a <sayCore+0xe2>
    e476:	|  |     |   moveq #1,d0
    e478:	|  +-----|-- bra.s e4f0 <sayCore+0x158>
			trimStack (&fun -> stack);
    e47a:	|  |     '-> moveq #24,d0
    e47c:	|  |         add.l 36(sp),d0
    e480:	|  |         move.l d0,-(sp)
    e482:	|  |         jsr 1517c <trimStack>
    e488:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e48a:	|  |         movea.w 6(sp),a0
    e48e:	|  |         move.l 12(sp),d1
    e492:	|  |         move.l 8(sp),d0
    e496:	|  |         move.l a0,-(sp)
    e498:	|  |         move.l d1,-(sp)
    e49a:	|  |         move.l d0,-(sp)
    e49c:	|  |         move.l 36(sp),-(sp)
    e4a0:	|  |         jsr 4196 <wrapSpeech>
    e4a6:	|  |         lea 16(sp),sp
    e4aa:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e4ae:	|  |         movea.l 36(sp),a0
    e4b2:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e4b8:	|  |         movea.l 36(sp),a0
    e4bc:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e4c2:	|  |         move.l 24(sp),16(sp)
    e4c8:	|  |         move.l 1cb26 <SysBase>,d0
    e4ce:	|  |         movea.l d0,a6
    e4d0:	|  |         movea.l 16(sp),a1
    e4d4:	|  |         jsr -690(a6)
			newText = NULL;
    e4d8:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e4dc:	|  |         moveq #0,d0
    e4de:	|  +-------- bra.s e4f0 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e4e0:	'--|-------> pea 199d6 <PutChar+0x1c5c>
    e4e6:	   |         jsr 172d8 <KPrintF>
    e4ec:	   |         addq.l #4,sp
	return BR_ERROR;
    e4ee:	   |         moveq #1,d0
}
    e4f0:	   '-------> movea.l (sp)+,a6
    e4f2:	             lea 24(sp),sp
    e4f6:	             rts

0000e4f8 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e4f8:	pea 1 <_start+0x1>
    e4fc:	move.l 12(sp),-(sp)
    e500:	move.l 12(sp),-(sp)
    e504:	jsr e398 <sayCore>
    e50a:	lea 12(sp),sp
}
    e50e:	rts

0000e510 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e510:	clr.l -(sp)
    e512:	move.l 12(sp),-(sp)
    e516:	move.l 12(sp),-(sp)
    e51a:	jsr e398 <sayCore>
    e520:	lea 12(sp),sp
}
    e524:	rts

0000e526 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e526:	jsr 151c4 <freeze>
	freezeSubs (); 
    e52c:	jsr 601e <freezeSubs>
	fun -> freezerLevel = 0;
    e532:	movea.l 8(sp),a0
    e536:	clr.b 56(a0)
	return BR_CONTINUE;
    e53a:	moveq #2,d0
}
    e53c:	rts

0000e53e <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e53e:	jsr 153c8 <unfreeze>
	unfreezeSubs (); 
    e544:	jsr 75e4 <unfreezeSubs>
	return BR_CONTINUE;
    e54a:	moveq #2,d0
}
    e54c:	rts

0000e54e <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e54e:	jsr 153a4 <howFrozen>
    e554:	move.l d0,d1
    e556:	moveq #28,d0
    e558:	add.l 8(sp),d0
    e55c:	move.l d1,-(sp)
    e55e:	pea 1 <_start+0x1>
    e562:	move.l d0,-(sp)
    e564:	jsr 150ea <setVariable>
    e56a:	lea 12(sp),sp
	return BR_CONTINUE; 
    e56e:	moveq #2,d0
}
    e570:	rts

0000e572 <builtIn_setCursor>:

builtIn(setCursor)
{
    e572:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e574:	movea.l 12(sp),a0
    e578:	move.l 24(a0),d0
    e57c:	move.l d0,-(sp)
    e57e:	jsr 14cd0 <getAnimationFromVar>
    e584:	addq.l #4,sp
    e586:	move.l d0,(sp)
	pickAnimCursor (aa);
    e588:	move.l (sp),-(sp)
    e58a:	jsr d6c <pickAnimCursor>
    e590:	addq.l #4,sp
	trimStack (&fun -> stack);
    e592:	moveq #24,d0
    e594:	add.l 12(sp),d0
    e598:	move.l d0,-(sp)
    e59a:	jsr 1517c <trimStack>
    e5a0:	addq.l #4,sp
	return BR_CONTINUE;
    e5a2:	moveq #2,d0
}
    e5a4:	addq.l #4,sp
    e5a6:	rts

0000e5a8 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e5a8:	move.l 1cae2 <input+0xa>,d1
    e5ae:	move.l 1cbdc <cameraX>,d0
    e5b4:	add.l d0,d1
    e5b6:	moveq #28,d0
    e5b8:	add.l 8(sp),d0
    e5bc:	move.l d1,-(sp)
    e5be:	pea 1 <_start+0x1>
    e5c2:	move.l d0,-(sp)
    e5c4:	jsr 150ea <setVariable>
    e5ca:	lea 12(sp),sp
	return BR_CONTINUE;
    e5ce:	moveq #2,d0
}
    e5d0:	rts

0000e5d2 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e5d2:	move.l 1cae6 <input+0xe>,d1
    e5d8:	move.l 1cbe0 <cameraY>,d0
    e5de:	add.l d0,d1
    e5e0:	moveq #28,d0
    e5e2:	add.l 8(sp),d0
    e5e6:	move.l d1,-(sp)
    e5e8:	pea 1 <_start+0x1>
    e5ec:	move.l d0,-(sp)
    e5ee:	jsr 150ea <setVariable>
    e5f4:	lea 12(sp),sp
	return BR_CONTINUE;
    e5f8:	moveq #2,d0
}
    e5fa:	rts

0000e5fc <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e5fc:	move.l 1cae2 <input+0xa>,d0
    e602:	move.l d0,-(sp)
    e604:	jsr 1770a <__floatsisf>
    e60a:	addq.l #4,sp
    e60c:	move.l d0,d1
    e60e:	move.l 1c4b8 <cameraZoom>,d0
    e614:	move.l d0,-(sp)
    e616:	move.l d1,-(sp)
    e618:	jsr 177bc <__mulsf3>
    e61e:	addq.l #8,sp
    e620:	move.l d0,-(sp)
    e622:	jsr 176a2 <__fixsfsi>
    e628:	addq.l #4,sp
    e62a:	move.l d0,d1
    e62c:	moveq #28,d0
    e62e:	add.l 8(sp),d0
    e632:	move.l d1,-(sp)
    e634:	pea 1 <_start+0x1>
    e638:	move.l d0,-(sp)
    e63a:	jsr 150ea <setVariable>
    e640:	lea 12(sp),sp
	return BR_CONTINUE;
    e644:	moveq #2,d0
}
    e646:	rts

0000e648 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e648:	move.l 1cae6 <input+0xe>,d0
    e64e:	move.l d0,-(sp)
    e650:	jsr 1770a <__floatsisf>
    e656:	addq.l #4,sp
    e658:	move.l d0,d1
    e65a:	move.l 1c4b8 <cameraZoom>,d0
    e660:	move.l d0,-(sp)
    e662:	move.l d1,-(sp)
    e664:	jsr 177bc <__mulsf3>
    e66a:	addq.l #8,sp
    e66c:	move.l d0,-(sp)
    e66e:	jsr 176a2 <__fixsfsi>
    e674:	addq.l #4,sp
    e676:	move.l d0,d1
    e678:	moveq #28,d0
    e67a:	add.l 8(sp),d0
    e67e:	move.l d1,-(sp)
    e680:	pea 1 <_start+0x1>
    e684:	move.l d0,-(sp)
    e686:	jsr 150ea <setVariable>
    e68c:	lea 12(sp),sp
	return BR_CONTINUE;
    e690:	moveq #2,d0
}
    e692:	rts

0000e694 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e694:	jsr 8616 <statusBarText>
    e69a:	move.l d0,d1
    e69c:	moveq #28,d0
    e69e:	add.l 8(sp),d0
    e6a2:	move.l d1,-(sp)
    e6a4:	move.l d0,-(sp)
    e6a6:	jsr 14a1a <makeTextVar>
    e6ac:	addq.l #8,sp
	return BR_CONTINUE;
    e6ae:	moveq #2,d0
}
    e6b0:	rts

0000e6b2 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e6b2:	       lea -20(sp),sp
    e6b6:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e6b8:	       movea.l 32(sp),a0
    e6bc:	       move.l 24(a0),d0
    e6c0:	       move.l d0,-(sp)
    e6c2:	       jsr 14dce <getTextFromAnyVar>
    e6c8:	       addq.l #4,sp
    e6ca:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e6ce:	   ,-- bne.s e6d6 <builtIn_getMatchingFiles+0x24>
    e6d0:	   |   moveq #1,d0
    e6d2:	,--|-- bra.w e798 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e6d6:	|  '-> moveq #24,d0
    e6d8:	|      add.l 32(sp),d0
    e6dc:	|      move.l d0,-(sp)
    e6de:	|      jsr 1517c <trimStack>
    e6e4:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e6e6:	|      moveq #28,d0
    e6e8:	|      add.l 32(sp),d0
    e6ec:	|      move.l d0,-(sp)
    e6ee:	|      jsr 14a46 <unlinkVar>
    e6f4:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e6f6:	|      movea.l 32(sp),a0
    e6fa:	|      moveq #6,d0
    e6fc:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e700:	|      moveq #12,d0
    e702:	|      move.l d0,16(sp)
    e706:	|      clr.l 12(sp)
    e70a:	|      move.l 1cb26 <SysBase>,d0
    e710:	|      movea.l d0,a6
    e712:	|      move.l 16(sp),d0
    e716:	|      move.l 12(sp),d1
    e71a:	|      jsr -684(a6)
    e71e:	|      move.l d0,8(sp)
    e722:	|      move.l 8(sp),d0
    e726:	|      movea.l 32(sp),a0
    e72a:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e72e:	|      moveq #32,d0
    e730:	|      add.l 32(sp),d0
    e734:	|  ,-- bne.s e73a <builtIn_getMatchingFiles+0x88>
    e736:	|  |   moveq #1,d0
    e738:	+--|-- bra.s e798 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e73a:	|  '-> movea.l 32(sp),a0
    e73e:	|      movea.l 32(a0),a0
    e742:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e744:	|      movea.l 32(sp),a0
    e748:	|      movea.l 32(a0),a0
    e74c:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e750:	|      movea.l 32(sp),a0
    e754:	|      movea.l 32(a0),a0
    e758:	|      moveq #1,d0
    e75a:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e75e:	|      movea.l 32(sp),a0
    e762:	|      move.l 32(a0),d0
    e766:	|      move.l 20(sp),-(sp)
    e76a:	|      move.l d0,-(sp)
    e76c:	|      jsr 145b4 <getSavedGamesStack>
    e772:	|      addq.l #8,sp
    e774:	|      tst.w d0
    e776:	|  ,-- bne.s e77c <builtIn_getMatchingFiles+0xca>
    e778:	|  |   moveq #1,d0
    e77a:	+--|-- bra.s e798 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e77c:	|  '-> move.l 20(sp),4(sp)
    e782:	|      move.l 1cb26 <SysBase>,d0
    e788:	|      movea.l d0,a6
    e78a:	|      movea.l 4(sp),a1
    e78e:	|      jsr -690(a6)
	newText = NULL;
    e792:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e796:	|      moveq #2,d0
}
    e798:	'----> movea.l (sp)+,a6
    e79a:	       lea 20(sp),sp
    e79e:	       rts

0000e7a0 <builtIn_saveGame>:

builtIn(saveGame)
{
    e7a0:	       lea -12(sp),sp
    e7a4:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e7a6:	       movea.l 24(sp),a0
    e7aa:	       move.l 24(a0),d0
    e7ae:	       move.l d0,-(sp)
    e7b0:	       jsr 14dce <getTextFromAnyVar>
    e7b6:	       addq.l #4,sp
    e7b8:	       move.l d0,1caf2 <loadNow>
    trimStack(&fun->stack);
    e7be:	       moveq #24,d0
    e7c0:	       add.l 24(sp),d0
    e7c4:	       move.l d0,-(sp)
    e7c6:	       jsr 1517c <trimStack>
    e7cc:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e7ce:	       move.l 1caf2 <loadNow>,d0
    e7d4:	       move.l d0,-(sp)
    e7d6:	       jsr 2fe <encodeFilename>
    e7dc:	       addq.l #4,sp
    e7de:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e7e2:	       move.l 1caf2 <loadNow>,8(sp)
    e7ea:	       move.l 1cb26 <SysBase>,d0
    e7f0:	       movea.l d0,a6
    e7f2:	       movea.l 8(sp),a1
    e7f6:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e7fa:	       move.l 12(sp),-(sp)
    e7fe:	       jsr e30a <failSecurityCheck>
    e804:	       addq.l #4,sp
    e806:	       tst.w d0
    e808:	   ,-- beq.s e80e <builtIn_saveGame+0x6e>
    e80a:	   |   moveq #1,d0
    e80c:	,--|-- bra.s e85e <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e80e:	|  '-> move.l 12(sp),-(sp)
    e812:	|      pea 19a04 <PutChar+0x1c8a>
    e818:	|      jsr 13d24 <joinStrings>
    e81e:	|      addq.l #8,sp
    e820:	|      move.l d0,1caf2 <loadNow>
    FreeVec(aaaaa);
    e826:	|      move.l 12(sp),4(sp)
    e82c:	|      move.l 1cb26 <SysBase>,d0
    e832:	|      movea.l d0,a6
    e834:	|      movea.l 4(sp),a1
    e838:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e83c:	|      moveq #28,d0
    e83e:	|      add.l 24(sp),d0
    e842:	|      clr.l -(sp)
    e844:	|      pea 1 <_start+0x1>
    e848:	|      move.l d0,-(sp)
    e84a:	|      jsr 150ea <setVariable>
    e850:	|      lea 12(sp),sp
    saverFunc = fun;
    e854:	|      move.l 24(sp),1cbec <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e85c:	|      moveq #0,d0
}
    e85e:	'----> movea.l (sp)+,a6
    e860:	       lea 12(sp),sp
    e864:	       rts

0000e866 <builtIn_fileExists>:

builtIn(fileExists)
{
    e866:	       lea -36(sp),sp
    e86a:	       move.l a6,-(sp)
    e86c:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e86e:	       movea.l 52(sp),a0
    e872:	       move.l 24(a0),d0
    e876:	       move.l d0,-(sp)
    e878:	       jsr 14dce <getTextFromAnyVar>
    e87e:	       addq.l #4,sp
    e880:	       move.l d0,1caf2 <loadNow>
    trimStack(&fun->stack);
    e886:	       moveq #24,d0
    e888:	       add.l 52(sp),d0
    e88c:	       move.l d0,-(sp)
    e88e:	       jsr 1517c <trimStack>
    e894:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e896:	       move.l 1caf2 <loadNow>,d0
    e89c:	       move.l d0,-(sp)
    e89e:	       jsr 2fe <encodeFilename>
    e8a4:	       addq.l #4,sp
    e8a6:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e8aa:	       move.l 1caf2 <loadNow>,36(sp)
    e8b2:	       move.l 1cb26 <SysBase>,d0
    e8b8:	       movea.l d0,a6
    e8ba:	       movea.l 36(sp),a1
    e8be:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e8c2:	       move.l 40(sp),-(sp)
    e8c6:	       jsr e30a <failSecurityCheck>
    e8cc:	       addq.l #4,sp
    e8ce:	       tst.w d0
    e8d0:	   ,-- beq.s e8d8 <builtIn_fileExists+0x72>
    e8d2:	   |   moveq #1,d0
    e8d4:	,--|-- bra.w e978 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e8d8:	|  '-> move.l 40(sp),32(sp)
    e8de:	|      move.l #1005,28(sp)
    e8e6:	|      move.l 1cb2e <DOSBase>,d0
    e8ec:	|      movea.l d0,a6
    e8ee:	|      move.l 32(sp),d1
    e8f2:	|      move.l 28(sp),d2
    e8f6:	|      jsr -30(a6)
    e8fa:	|      move.l d0,24(sp)
    e8fe:	|      move.l 24(sp),d0
    e902:	|      move.l d0,20(sp)
    if (!fp) {        
    e906:	|  ,-- bne.s e916 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e908:	|  |   pea 19a06 <PutChar+0x1c8c>
    e90e:	|  |   jsr 172d8 <KPrintF>
    e914:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e916:	|  '-> tst.l 20(sp)
    e91a:	|      sne d0
    e91c:	|      neg.b d0
    e91e:	|      moveq #0,d1
    e920:	|      move.b d0,d1
    e922:	|      moveq #28,d0
    e924:	|      add.l 52(sp),d0
    e928:	|      move.l d1,-(sp)
    e92a:	|      pea 1 <_start+0x1>
    e92e:	|      move.l d0,-(sp)
    e930:	|      jsr 150ea <setVariable>
    e936:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e93a:	|      tst.l 20(sp)
    e93e:	|  ,-- beq.s e95a <builtIn_fileExists+0xf4>
    e940:	|  |   move.l 20(sp),16(sp)
    e946:	|  |   move.l 1cb2e <DOSBase>,d0
    e94c:	|  |   movea.l d0,a6
    e94e:	|  |   move.l 16(sp),d1
    e952:	|  |   jsr -36(a6)
    e956:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e95a:	|  '-> move.l 40(sp),8(sp)
    e960:	|      move.l 1cb26 <SysBase>,d0
    e966:	|      movea.l d0,a6
    e968:	|      movea.l 8(sp),a1
    e96c:	|      jsr -690(a6)
    loadNow = NULL;
    e970:	|      clr.l 1caf2 <loadNow>
    return BR_CONTINUE;
    e976:	|      moveq #2,d0
}
    e978:	'----> move.l (sp)+,d2
    e97a:	       movea.l (sp)+,a6
    e97c:	       lea 36(sp),sp
    e980:	       rts

0000e982 <builtIn_loadGame>:

builtIn(loadGame)
{
    e982:	       lea -36(sp),sp
    e986:	       move.l a6,-(sp)
    e988:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e98a:	       movea.l 52(sp),a0
    e98e:	       move.l 24(a0),d0
    e992:	       move.l d0,-(sp)
    e994:	       jsr 14dce <getTextFromAnyVar>
    e99a:	       addq.l #4,sp
    e99c:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e9a0:	       moveq #24,d0
    e9a2:	       add.l 52(sp),d0
    e9a6:	       move.l d0,-(sp)
    e9a8:	       jsr 1517c <trimStack>
    e9ae:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e9b0:	       move.l 40(sp),-(sp)
    e9b4:	       jsr 2fe <encodeFilename>
    e9ba:	       addq.l #4,sp
    e9bc:	       move.l d0,1caf2 <loadNow>
    FreeVec(aaaaa);
    e9c2:	       move.l 40(sp),36(sp)
    e9c8:	       move.l 1cb26 <SysBase>,d0
    e9ce:	       movea.l d0,a6
    e9d0:	       movea.l 36(sp),a1
    e9d4:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e9d8:	       move.l 1caf2 <loadNow>,d0
    e9de:	       move.l d0,-(sp)
    e9e0:	       jsr e30a <failSecurityCheck>
    e9e6:	       addq.l #4,sp
    e9e8:	       tst.w d0
    e9ea:	   ,-- beq.s e9f0 <builtIn_loadGame+0x6e>
    e9ec:	   |   moveq #1,d0
    e9ee:	,--|-- bra.s ea60 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e9f0:	|  '-> move.l 1caf2 <loadNow>,32(sp)
    e9f8:	|      move.l #1005,28(sp)
    ea00:	|      move.l 1cb2e <DOSBase>,d0
    ea06:	|      movea.l d0,a6
    ea08:	|      move.l 32(sp),d1
    ea0c:	|      move.l 28(sp),d2
    ea10:	|      jsr -30(a6)
    ea14:	|      move.l d0,24(sp)
    ea18:	|      move.l 24(sp),d0
    ea1c:	|      move.l d0,20(sp)
    if (fp) {
    ea20:	|  ,-- beq.s ea40 <builtIn_loadGame+0xbe>
        Close(fp);
    ea22:	|  |   move.l 20(sp),12(sp)
    ea28:	|  |   move.l 1cb2e <DOSBase>,d0
    ea2e:	|  |   movea.l d0,a6
    ea30:	|  |   move.l 12(sp),d1
    ea34:	|  |   jsr -36(a6)
    ea38:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    ea3c:	|  |   moveq #0,d0
    ea3e:	+--|-- bra.s ea60 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    ea40:	|  '-> move.l 1caf2 <loadNow>,16(sp)
    ea48:	|      move.l 1cb26 <SysBase>,d0
    ea4e:	|      movea.l d0,a6
    ea50:	|      movea.l 16(sp),a1
    ea54:	|      jsr -690(a6)
    loadNow = NULL;
    ea58:	|      clr.l 1caf2 <loadNow>
    return BR_CONTINUE;
    ea5e:	|      moveq #2,d0
}
    ea60:	'----> move.l (sp)+,d2
    ea62:	       movea.l (sp)+,a6
    ea64:	       lea 36(sp),sp
    ea68:	       rts

0000ea6a <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    ea6a:	move.l 1cbc2 <sceneHeight>,d0
    ea70:	move.l d0,d1
    ea72:	move.l 1cbbe <sceneWidth>,d0
    ea78:	move.l d1,-(sp)
    ea7a:	move.l d0,-(sp)
    ea7c:	clr.l -(sp)
    ea7e:	clr.l -(sp)
    ea80:	jsr d1f4 <blankScreen>
    ea86:	lea 16(sp),sp
	return BR_CONTINUE;
    ea8a:	moveq #2,d0
}
    ea8c:	rts

0000ea8e <builtIn_blankArea>:

builtIn(blankArea)
{
    ea8e:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ea92:	       movea.l 24(sp),a0
    ea96:	       move.l 24(a0),d0
    ea9a:	       move.l d0,-(sp)
    ea9c:	       pea 1 <_start+0x1>
    eaa0:	       lea 8(sp),a0
    eaa4:	       move.l a0,-(sp)
    eaa6:	       jsr 147f8 <getValueType>
    eaac:	       lea 12(sp),sp
    eab0:	       tst.w d0
    eab2:	   ,-- bne.s eaba <builtIn_blankArea+0x2c>
    eab4:	   |   moveq #1,d0
    eab6:	,--|-- bra.w eb90 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eaba:	|  '-> moveq #24,d0
    eabc:	|      add.l 24(sp),d0
    eac0:	|      move.l d0,-(sp)
    eac2:	|      jsr 1517c <trimStack>
    eac8:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eaca:	|      movea.l 24(sp),a0
    eace:	|      move.l 24(a0),d0
    ead2:	|      move.l d0,-(sp)
    ead4:	|      pea 1 <_start+0x1>
    ead8:	|      lea 12(sp),a0
    eadc:	|      move.l a0,-(sp)
    eade:	|      jsr 147f8 <getValueType>
    eae4:	|      lea 12(sp),sp
    eae8:	|      tst.w d0
    eaea:	|  ,-- bne.s eaf2 <builtIn_blankArea+0x64>
    eaec:	|  |   moveq #1,d0
    eaee:	+--|-- bra.w eb90 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eaf2:	|  '-> moveq #24,d0
    eaf4:	|      add.l 24(sp),d0
    eaf8:	|      move.l d0,-(sp)
    eafa:	|      jsr 1517c <trimStack>
    eb00:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eb02:	|      movea.l 24(sp),a0
    eb06:	|      move.l 24(a0),d0
    eb0a:	|      move.l d0,-(sp)
    eb0c:	|      pea 1 <_start+0x1>
    eb10:	|      moveq #16,d0
    eb12:	|      add.l sp,d0
    eb14:	|      move.l d0,-(sp)
    eb16:	|      jsr 147f8 <getValueType>
    eb1c:	|      lea 12(sp),sp
    eb20:	|      tst.w d0
    eb22:	|  ,-- bne.s eb28 <builtIn_blankArea+0x9a>
    eb24:	|  |   moveq #1,d0
    eb26:	+--|-- bra.s eb90 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb28:	|  '-> moveq #24,d0
    eb2a:	|      add.l 24(sp),d0
    eb2e:	|      move.l d0,-(sp)
    eb30:	|      jsr 1517c <trimStack>
    eb36:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eb38:	|      movea.l 24(sp),a0
    eb3c:	|      move.l 24(a0),d0
    eb40:	|      move.l d0,-(sp)
    eb42:	|      pea 1 <_start+0x1>
    eb46:	|      moveq #20,d0
    eb48:	|      add.l sp,d0
    eb4a:	|      move.l d0,-(sp)
    eb4c:	|      jsr 147f8 <getValueType>
    eb52:	|      lea 12(sp),sp
    eb56:	|      tst.w d0
    eb58:	|  ,-- bne.s eb5e <builtIn_blankArea+0xd0>
    eb5a:	|  |   moveq #1,d0
    eb5c:	+--|-- bra.s eb90 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb5e:	|  '-> moveq #24,d0
    eb60:	|      add.l 24(sp),d0
    eb64:	|      move.l d0,-(sp)
    eb66:	|      jsr 1517c <trimStack>
    eb6c:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    eb6e:	|      movea.l (sp),a1
    eb70:	|      movea.l 4(sp),a0
    eb74:	|      move.l 8(sp),d1
    eb78:	|      move.l 12(sp),d0
    eb7c:	|      move.l a1,-(sp)
    eb7e:	|      move.l a0,-(sp)
    eb80:	|      move.l d1,-(sp)
    eb82:	|      move.l d0,-(sp)
    eb84:	|      jsr d1f4 <blankScreen>
    eb8a:	|      lea 16(sp),sp
	return BR_CONTINUE;
    eb8e:	|      moveq #2,d0
}
    eb90:	'----> lea 16(sp),sp
    eb94:	       rts

0000eb96 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    eb96:	jsr d212 <darkScreen>
	return BR_CONTINUE;
    eb9c:	moveq #2,d0
}
    eb9e:	rts

0000eba0 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    eba0:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eba4:	       movea.l 20(sp),a0
    eba8:	       move.l 24(a0),d0
    ebac:	       move.l d0,-(sp)
    ebae:	       pea 1 <_start+0x1>
    ebb2:	       lea 8(sp),a0
    ebb6:	       move.l a0,-(sp)
    ebb8:	       jsr 147f8 <getValueType>
    ebbe:	       lea 12(sp),sp
    ebc2:	       tst.w d0
    ebc4:	   ,-- bne.s ebcc <builtIn_addOverlay+0x2c>
    ebc6:	   |   moveq #1,d0
    ebc8:	,--|-- bra.w ec64 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ebcc:	|  '-> moveq #24,d0
    ebce:	|      add.l 20(sp),d0
    ebd2:	|      move.l d0,-(sp)
    ebd4:	|      jsr 1517c <trimStack>
    ebda:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebdc:	|      movea.l 20(sp),a0
    ebe0:	|      move.l 24(a0),d0
    ebe4:	|      move.l d0,-(sp)
    ebe6:	|      pea 1 <_start+0x1>
    ebea:	|      moveq #12,d0
    ebec:	|      add.l sp,d0
    ebee:	|      move.l d0,-(sp)
    ebf0:	|      jsr 147f8 <getValueType>
    ebf6:	|      lea 12(sp),sp
    ebfa:	|      tst.w d0
    ebfc:	|  ,-- bne.s ec02 <builtIn_addOverlay+0x62>
    ebfe:	|  |   moveq #1,d0
    ec00:	+--|-- bra.s ec64 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ec02:	|  '-> moveq #24,d0
    ec04:	|      add.l 20(sp),d0
    ec08:	|      move.l d0,-(sp)
    ec0a:	|      jsr 1517c <trimStack>
    ec10:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec12:	|      movea.l 20(sp),a0
    ec16:	|      move.l 24(a0),d0
    ec1a:	|      move.l d0,-(sp)
    ec1c:	|      pea 5 <_start+0x5>
    ec20:	|      moveq #16,d0
    ec22:	|      add.l sp,d0
    ec24:	|      move.l d0,-(sp)
    ec26:	|      jsr 147f8 <getValueType>
    ec2c:	|      lea 12(sp),sp
    ec30:	|      tst.w d0
    ec32:	|  ,-- bne.s ec38 <builtIn_addOverlay+0x98>
    ec34:	|  |   moveq #1,d0
    ec36:	+--|-- bra.s ec64 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ec38:	|  '-> moveq #24,d0
    ec3a:	|      add.l 20(sp),d0
    ec3e:	|      move.l d0,-(sp)
    ec40:	|      jsr 1517c <trimStack>
    ec46:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ec48:	|      movea.l (sp),a0
    ec4a:	|      move.l 4(sp),d1
    ec4e:	|      move.l 8(sp),d0
    ec52:	|      move.l a0,-(sp)
    ec54:	|      move.l d1,-(sp)
    ec56:	|      move.l d0,-(sp)
    ec58:	|      jsr d330 <loadBackDrop>
    ec5e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ec62:	|      moveq #2,d0
}
    ec64:	'----> lea 12(sp),sp
    ec68:	       rts

0000ec6a <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ec6a:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec6e:	       movea.l 20(sp),a0
    ec72:	       move.l 24(a0),d0
    ec76:	       move.l d0,-(sp)
    ec78:	       pea 1 <_start+0x1>
    ec7c:	       lea 8(sp),a0
    ec80:	       move.l a0,-(sp)
    ec82:	       jsr 147f8 <getValueType>
    ec88:	       lea 12(sp),sp
    ec8c:	       tst.w d0
    ec8e:	   ,-- bne.s ec96 <builtIn_mixOverlay+0x2c>
    ec90:	   |   moveq #1,d0
    ec92:	,--|-- bra.w ed2e <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ec96:	|  '-> moveq #24,d0
    ec98:	|      add.l 20(sp),d0
    ec9c:	|      move.l d0,-(sp)
    ec9e:	|      jsr 1517c <trimStack>
    eca4:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eca6:	|      movea.l 20(sp),a0
    ecaa:	|      move.l 24(a0),d0
    ecae:	|      move.l d0,-(sp)
    ecb0:	|      pea 1 <_start+0x1>
    ecb4:	|      moveq #12,d0
    ecb6:	|      add.l sp,d0
    ecb8:	|      move.l d0,-(sp)
    ecba:	|      jsr 147f8 <getValueType>
    ecc0:	|      lea 12(sp),sp
    ecc4:	|      tst.w d0
    ecc6:	|  ,-- bne.s eccc <builtIn_mixOverlay+0x62>
    ecc8:	|  |   moveq #1,d0
    ecca:	+--|-- bra.s ed2e <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eccc:	|  '-> moveq #24,d0
    ecce:	|      add.l 20(sp),d0
    ecd2:	|      move.l d0,-(sp)
    ecd4:	|      jsr 1517c <trimStack>
    ecda:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ecdc:	|      movea.l 20(sp),a0
    ece0:	|      move.l 24(a0),d0
    ece4:	|      move.l d0,-(sp)
    ece6:	|      pea 5 <_start+0x5>
    ecea:	|      moveq #16,d0
    ecec:	|      add.l sp,d0
    ecee:	|      move.l d0,-(sp)
    ecf0:	|      jsr 147f8 <getValueType>
    ecf6:	|      lea 12(sp),sp
    ecfa:	|      tst.w d0
    ecfc:	|  ,-- bne.s ed02 <builtIn_mixOverlay+0x98>
    ecfe:	|  |   moveq #1,d0
    ed00:	+--|-- bra.s ed2e <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ed02:	|  '-> moveq #24,d0
    ed04:	|      add.l 20(sp),d0
    ed08:	|      move.l d0,-(sp)
    ed0a:	|      jsr 1517c <trimStack>
    ed10:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    ed12:	|      movea.l (sp),a0
    ed14:	|      move.l 4(sp),d1
    ed18:	|      move.l 8(sp),d0
    ed1c:	|      move.l a0,-(sp)
    ed1e:	|      move.l d1,-(sp)
    ed20:	|      move.l d0,-(sp)
    ed22:	|      jsr d3a6 <mixBackDrop>
    ed28:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ed2c:	|      moveq #2,d0
}
    ed2e:	'----> lea 12(sp),sp
    ed32:	       rts

0000ed34 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ed34:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed38:	       movea.l 20(sp),a0
    ed3c:	       move.l 24(a0),d0
    ed40:	       move.l d0,-(sp)
    ed42:	       pea 1 <_start+0x1>
    ed46:	       lea 8(sp),a0
    ed4a:	       move.l a0,-(sp)
    ed4c:	       jsr 147f8 <getValueType>
    ed52:	       lea 12(sp),sp
    ed56:	       tst.w d0
    ed58:	   ,-- bne.s ed60 <builtIn_pasteImage+0x2c>
    ed5a:	   |   moveq #1,d0
    ed5c:	,--|-- bra.w edf0 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ed60:	|  '-> moveq #24,d0
    ed62:	|      add.l 20(sp),d0
    ed66:	|      move.l d0,-(sp)
    ed68:	|      jsr 1517c <trimStack>
    ed6e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed70:	|      movea.l 20(sp),a0
    ed74:	|      move.l 24(a0),d0
    ed78:	|      move.l d0,-(sp)
    ed7a:	|      pea 1 <_start+0x1>
    ed7e:	|      moveq #12,d0
    ed80:	|      add.l sp,d0
    ed82:	|      move.l d0,-(sp)
    ed84:	|      jsr 147f8 <getValueType>
    ed8a:	|      lea 12(sp),sp
    ed8e:	|      tst.w d0
    ed90:	|  ,-- bne.s ed96 <builtIn_pasteImage+0x62>
    ed92:	|  |   moveq #1,d0
    ed94:	+--|-- bra.s edf0 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ed96:	|  '-> moveq #24,d0
    ed98:	|      add.l 20(sp),d0
    ed9c:	|      move.l d0,-(sp)
    ed9e:	|      jsr 1517c <trimStack>
    eda4:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    eda6:	|      movea.l 20(sp),a0
    edaa:	|      move.l 24(a0),d0
    edae:	|      move.l d0,-(sp)
    edb0:	|      jsr 14cd0 <getAnimationFromVar>
    edb6:	|      addq.l #4,sp
    edb8:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    edbc:	|      moveq #24,d0
    edbe:	|      add.l 20(sp),d0
    edc2:	|      move.l d0,-(sp)
    edc4:	|      jsr 1517c <trimStack>
    edca:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    edcc:	|      tst.l 8(sp)
    edd0:	|  ,-- bne.s edd6 <builtIn_pasteImage+0xa2>
    edd2:	|  |   moveq #2,d0
    edd4:	+--|-- bra.s edf0 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    edd6:	|  '-> move.l (sp),d1
    edd8:	|      move.l 4(sp),d0
    eddc:	|      move.l 8(sp),-(sp)
    ede0:	|      move.l d1,-(sp)
    ede2:	|      move.l d0,-(sp)
    ede4:	|      jsr d94 <pasteCursor>
    edea:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    edee:	|      moveq #2,d0
}
    edf0:	'----> lea 12(sp),sp
    edf4:	       rts

0000edf6 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    edf6:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edf8:	       movea.l 16(sp),a0
    edfc:	       move.l 24(a0),d0
    ee00:	       move.l d0,-(sp)
    ee02:	       pea 1 <_start+0x1>
    ee06:	       move.l sp,d0
    ee08:	       addq.l #8,d0
    ee0a:	       move.l d0,-(sp)
    ee0c:	       jsr 147f8 <getValueType>
    ee12:	       lea 12(sp),sp
    ee16:	       tst.w d0
    ee18:	   ,-- bne.s ee20 <builtIn_setSceneDimensions+0x2a>
    ee1a:	   |   moveq #1,d0
    ee1c:	,--|-- bra.w eea8 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ee20:	|  '-> moveq #24,d0
    ee22:	|      add.l 16(sp),d0
    ee26:	|      move.l d0,-(sp)
    ee28:	|      jsr 1517c <trimStack>
    ee2e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee30:	|      movea.l 16(sp),a0
    ee34:	|      move.l 24(a0),d0
    ee38:	|      move.l d0,-(sp)
    ee3a:	|      pea 1 <_start+0x1>
    ee3e:	|      moveq #12,d0
    ee40:	|      add.l sp,d0
    ee42:	|      move.l d0,-(sp)
    ee44:	|      jsr 147f8 <getValueType>
    ee4a:	|      lea 12(sp),sp
    ee4e:	|      tst.w d0
    ee50:	|  ,-- bne.s ee56 <builtIn_setSceneDimensions+0x60>
    ee52:	|  |   moveq #1,d0
    ee54:	+--|-- bra.s eea8 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ee56:	|  '-> moveq #24,d0
    ee58:	|      add.l 16(sp),d0
    ee5c:	|      move.l d0,-(sp)
    ee5e:	|      jsr 1517c <trimStack>
    ee64:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    ee66:	|      move.l (sp),d1
    ee68:	|      move.l 4(sp),d0
    ee6c:	|      move.l d1,-(sp)
    ee6e:	|      move.l d0,-(sp)
    ee70:	|      jsr d3fc <resizeBackdrop>
    ee76:	|      addq.l #8,sp
    ee78:	|      tst.w d0
    ee7a:	|  ,-- beq.s ee98 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ee7c:	|  |   move.l (sp),d1
    ee7e:	|  |   move.l 4(sp),d0
    ee82:	|  |   move.l d1,-(sp)
    ee84:	|  |   move.l d0,-(sp)
    ee86:	|  |   clr.l -(sp)
    ee88:	|  |   clr.l -(sp)
    ee8a:	|  |   jsr d1f4 <blankScreen>
    ee90:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    ee94:	|  |   moveq #2,d0
    ee96:	+--|-- bra.s eea8 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    ee98:	|  '-> pea 19a24 <talk.c.490538ff+0x15>
    ee9e:	|      jsr 172d8 <KPrintF>
    eea4:	|      addq.l #4,sp
	return BR_ERROR;
    eea6:	|      moveq #1,d0
}
    eea8:	'----> addq.l #8,sp
    eeaa:	       rts

0000eeac <builtIn_aimCamera>:

builtIn(aimCamera)
{
    eeac:	          move.l d3,-(sp)
    eeae:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eeb0:	          movea.l 16(sp),a0
    eeb4:	          move.l 24(a0),d0
    eeb8:	          move.l d0,-(sp)
    eeba:	          pea 1 <_start+0x1>
    eebe:	          pea 1cbe0 <cameraY>
    eec4:	          jsr 147f8 <getValueType>
    eeca:	          lea 12(sp),sp
    eece:	          tst.w d0
    eed0:	      ,-- bne.s eed8 <builtIn_aimCamera+0x2c>
    eed2:	      |   moveq #1,d0
    eed4:	,-----|-- bra.w f15a <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    eed8:	|     '-> moveq #24,d0
    eeda:	|         add.l 16(sp),d0
    eede:	|         move.l d0,-(sp)
    eee0:	|         jsr 1517c <trimStack>
    eee6:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eee8:	|         movea.l 16(sp),a0
    eeec:	|         move.l 24(a0),d0
    eef0:	|         move.l d0,-(sp)
    eef2:	|         pea 1 <_start+0x1>
    eef6:	|         pea 1cbdc <cameraX>
    eefc:	|         jsr 147f8 <getValueType>
    ef02:	|         lea 12(sp),sp
    ef06:	|         tst.w d0
    ef08:	|     ,-- bne.s ef10 <builtIn_aimCamera+0x64>
    ef0a:	|     |   moveq #1,d0
    ef0c:	+-----|-- bra.w f15a <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ef10:	|     '-> moveq #24,d0
    ef12:	|         add.l 16(sp),d0
    ef16:	|         move.l d0,-(sp)
    ef18:	|         jsr 1517c <trimStack>
    ef1e:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    ef20:	|         move.l 1cbdc <cameraX>,d0
    ef26:	|         move.l d0,-(sp)
    ef28:	|         jsr 1770a <__floatsisf>
    ef2e:	|         addq.l #4,sp
    ef30:	|         move.l d0,d2
    ef32:	|         move.l 1ca7a <winWidth>,d0
    ef38:	|         lsr.l #1,d0
    ef3a:	|         move.l d0,-(sp)
    ef3c:	|         jsr 17732 <__floatunsisf>
    ef42:	|         addq.l #4,sp
    ef44:	|         move.l d0,d1
    ef46:	|         move.l 1c4b8 <cameraZoom>,d0
    ef4c:	|         move.l d0,-(sp)
    ef4e:	|         move.l d1,-(sp)
    ef50:	|         jsr 175c0 <__divsf3>
    ef56:	|         addq.l #8,sp
    ef58:	|         move.l d0,-(sp)
    ef5a:	|         move.l d2,-(sp)
    ef5c:	|         jsr 179fe <__subsf3>
    ef62:	|         addq.l #8,sp
    ef64:	|         move.l d0,-(sp)
    ef66:	|         jsr 176a2 <__fixsfsi>
    ef6c:	|         addq.l #4,sp
    ef6e:	|         move.l d0,1cbdc <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    ef74:	|         move.l 1cbe0 <cameraY>,d0
    ef7a:	|         move.l d0,-(sp)
    ef7c:	|         jsr 1770a <__floatsisf>
    ef82:	|         addq.l #4,sp
    ef84:	|         move.l d0,d2
    ef86:	|         move.l 1ca7e <winHeight>,d0
    ef8c:	|         lsr.l #1,d0
    ef8e:	|         move.l d0,-(sp)
    ef90:	|         jsr 17732 <__floatunsisf>
    ef96:	|         addq.l #4,sp
    ef98:	|         move.l d0,d1
    ef9a:	|         move.l 1c4b8 <cameraZoom>,d0
    efa0:	|         move.l d0,-(sp)
    efa2:	|         move.l d1,-(sp)
    efa4:	|         jsr 175c0 <__divsf3>
    efaa:	|         addq.l #8,sp
    efac:	|         move.l d0,-(sp)
    efae:	|         move.l d2,-(sp)
    efb0:	|         jsr 179fe <__subsf3>
    efb6:	|         addq.l #8,sp
    efb8:	|         move.l d0,-(sp)
    efba:	|         jsr 176a2 <__fixsfsi>
    efc0:	|         addq.l #4,sp
    efc2:	|         move.l d0,1cbe0 <cameraY>

	if (cameraX < 0) cameraX = 0;
    efc8:	|         move.l 1cbdc <cameraX>,d0
    efce:	|     ,-- bpl.s efda <builtIn_aimCamera+0x12e>
    efd0:	|     |   clr.l 1cbdc <cameraX>
    efd6:	|  ,--|-- bra.w f090 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    efda:	|  |  '-> move.l 1cbdc <cameraX>,d0
    efe0:	|  |      move.l d0,-(sp)
    efe2:	|  |      jsr 1770a <__floatsisf>
    efe8:	|  |      addq.l #4,sp
    efea:	|  |      move.l d0,d2
    efec:	|  |      move.l 1cbbe <sceneWidth>,d0
    eff2:	|  |      move.l d0,-(sp)
    eff4:	|  |      jsr 17732 <__floatunsisf>
    effa:	|  |      addq.l #4,sp
    effc:	|  |      move.l d0,d3
    effe:	|  |      move.l 1ca7a <winWidth>,d0
    f004:	|  |      move.l d0,-(sp)
    f006:	|  |      jsr 17732 <__floatunsisf>
    f00c:	|  |      addq.l #4,sp
    f00e:	|  |      move.l d0,d1
    f010:	|  |      move.l 1c4b8 <cameraZoom>,d0
    f016:	|  |      move.l d0,-(sp)
    f018:	|  |      move.l d1,-(sp)
    f01a:	|  |      jsr 175c0 <__divsf3>
    f020:	|  |      addq.l #8,sp
    f022:	|  |      move.l d0,-(sp)
    f024:	|  |      move.l d3,-(sp)
    f026:	|  |      jsr 179fe <__subsf3>
    f02c:	|  |      addq.l #8,sp
    f02e:	|  |      move.l d0,-(sp)
    f030:	|  |      move.l d2,-(sp)
    f032:	|  |      jsr 17876 <__gtsf2>
    f038:	|  |      addq.l #8,sp
    f03a:	|  |      tst.l d0
    f03c:	|  +----- ble.s f090 <builtIn_aimCamera+0x1e4>
    f03e:	|  |      move.l 1cbbe <sceneWidth>,d0
    f044:	|  |      move.l d0,-(sp)
    f046:	|  |      jsr 17732 <__floatunsisf>
    f04c:	|  |      addq.l #4,sp
    f04e:	|  |      move.l d0,d2
    f050:	|  |      move.l 1ca7a <winWidth>,d0
    f056:	|  |      move.l d0,-(sp)
    f058:	|  |      jsr 17732 <__floatunsisf>
    f05e:	|  |      addq.l #4,sp
    f060:	|  |      move.l d0,d1
    f062:	|  |      move.l 1c4b8 <cameraZoom>,d0
    f068:	|  |      move.l d0,-(sp)
    f06a:	|  |      move.l d1,-(sp)
    f06c:	|  |      jsr 175c0 <__divsf3>
    f072:	|  |      addq.l #8,sp
    f074:	|  |      move.l d0,-(sp)
    f076:	|  |      move.l d2,-(sp)
    f078:	|  |      jsr 179fe <__subsf3>
    f07e:	|  |      addq.l #8,sp
    f080:	|  |      move.l d0,-(sp)
    f082:	|  |      jsr 176a2 <__fixsfsi>
    f088:	|  |      addq.l #4,sp
    f08a:	|  |      move.l d0,1cbdc <cameraX>
	if (cameraY < 0) cameraY = 0;
    f090:	|  '----> move.l 1cbe0 <cameraY>,d0
    f096:	|     ,-- bpl.s f0a2 <builtIn_aimCamera+0x1f6>
    f098:	|     |   clr.l 1cbe0 <cameraY>
    f09e:	|  ,--|-- bra.w f158 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f0a2:	|  |  '-> move.l 1cbe0 <cameraY>,d0
    f0a8:	|  |      move.l d0,-(sp)
    f0aa:	|  |      jsr 1770a <__floatsisf>
    f0b0:	|  |      addq.l #4,sp
    f0b2:	|  |      move.l d0,d2
    f0b4:	|  |      move.l 1cbc2 <sceneHeight>,d0
    f0ba:	|  |      move.l d0,-(sp)
    f0bc:	|  |      jsr 17732 <__floatunsisf>
    f0c2:	|  |      addq.l #4,sp
    f0c4:	|  |      move.l d0,d3
    f0c6:	|  |      move.l 1ca7e <winHeight>,d0
    f0cc:	|  |      move.l d0,-(sp)
    f0ce:	|  |      jsr 17732 <__floatunsisf>
    f0d4:	|  |      addq.l #4,sp
    f0d6:	|  |      move.l d0,d1
    f0d8:	|  |      move.l 1c4b8 <cameraZoom>,d0
    f0de:	|  |      move.l d0,-(sp)
    f0e0:	|  |      move.l d1,-(sp)
    f0e2:	|  |      jsr 175c0 <__divsf3>
    f0e8:	|  |      addq.l #8,sp
    f0ea:	|  |      move.l d0,-(sp)
    f0ec:	|  |      move.l d3,-(sp)
    f0ee:	|  |      jsr 179fe <__subsf3>
    f0f4:	|  |      addq.l #8,sp
    f0f6:	|  |      move.l d0,-(sp)
    f0f8:	|  |      move.l d2,-(sp)
    f0fa:	|  |      jsr 17876 <__gtsf2>
    f100:	|  |      addq.l #8,sp
    f102:	|  |      tst.l d0
    f104:	|  +----- ble.s f158 <builtIn_aimCamera+0x2ac>
    f106:	|  |      move.l 1cbc2 <sceneHeight>,d0
    f10c:	|  |      move.l d0,-(sp)
    f10e:	|  |      jsr 17732 <__floatunsisf>
    f114:	|  |      addq.l #4,sp
    f116:	|  |      move.l d0,d2
    f118:	|  |      move.l 1ca7e <winHeight>,d0
    f11e:	|  |      move.l d0,-(sp)
    f120:	|  |      jsr 17732 <__floatunsisf>
    f126:	|  |      addq.l #4,sp
    f128:	|  |      move.l d0,d1
    f12a:	|  |      move.l 1c4b8 <cameraZoom>,d0
    f130:	|  |      move.l d0,-(sp)
    f132:	|  |      move.l d1,-(sp)
    f134:	|  |      jsr 175c0 <__divsf3>
    f13a:	|  |      addq.l #8,sp
    f13c:	|  |      move.l d0,-(sp)
    f13e:	|  |      move.l d2,-(sp)
    f140:	|  |      jsr 179fe <__subsf3>
    f146:	|  |      addq.l #8,sp
    f148:	|  |      move.l d0,-(sp)
    f14a:	|  |      jsr 176a2 <__fixsfsi>
    f150:	|  |      addq.l #4,sp
    f152:	|  |      move.l d0,1cbe0 <cameraY>
	return BR_CONTINUE;
    f158:	|  '----> moveq #2,d0
}
    f15a:	'-------> move.l (sp)+,d2
    f15c:	          move.l (sp)+,d3
    f15e:	          rts

0000f160 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f160:	       subq.l #4,sp
    f162:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f164:	       movea.l 16(sp),a0
    f168:	       move.l 24(a0),d0
    f16c:	       move.l d0,-(sp)
    f16e:	       pea 1 <_start+0x1>
    f172:	       moveq #12,d0
    f174:	       add.l sp,d0
    f176:	       move.l d0,-(sp)
    f178:	       jsr 147f8 <getValueType>
    f17e:	       lea 12(sp),sp
    f182:	       tst.w d0
    f184:	   ,-- bne.s f18c <builtIn_zoomCamera+0x2c>
    f186:	   |   moveq #1,d0
    f188:	,--|-- bra.w f386 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f18c:	|  '-> moveq #24,d0
    f18e:	|      add.l 16(sp),d0
    f192:	|      move.l d0,-(sp)
    f194:	|      jsr 1517c <trimStack>
    f19a:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f19c:	|      move.l 1cae2 <input+0xa>,d0
    f1a2:	|      move.l d0,-(sp)
    f1a4:	|      jsr 1770a <__floatsisf>
    f1aa:	|      addq.l #4,sp
    f1ac:	|      move.l d0,d1
    f1ae:	|      move.l 1c4b8 <cameraZoom>,d0
    f1b4:	|      move.l d0,-(sp)
    f1b6:	|      move.l d1,-(sp)
    f1b8:	|      jsr 177bc <__mulsf3>
    f1be:	|      addq.l #8,sp
    f1c0:	|      move.l d0,-(sp)
    f1c2:	|      jsr 176a2 <__fixsfsi>
    f1c8:	|      addq.l #4,sp
    f1ca:	|      move.l d0,1cae2 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f1d0:	|      move.l 1cae6 <input+0xe>,d0
    f1d6:	|      move.l d0,-(sp)
    f1d8:	|      jsr 1770a <__floatsisf>
    f1de:	|      addq.l #4,sp
    f1e0:	|      move.l d0,d1
    f1e2:	|      move.l 1c4b8 <cameraZoom>,d0
    f1e8:	|      move.l d0,-(sp)
    f1ea:	|      move.l d1,-(sp)
    f1ec:	|      jsr 177bc <__mulsf3>
    f1f2:	|      addq.l #8,sp
    f1f4:	|      move.l d0,-(sp)
    f1f6:	|      jsr 176a2 <__fixsfsi>
    f1fc:	|      addq.l #4,sp
    f1fe:	|      move.l d0,1cae6 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f204:	|      move.l 4(sp),d0
    f208:	|      move.l d0,-(sp)
    f20a:	|      jsr 1770a <__floatsisf>
    f210:	|      addq.l #4,sp
    f212:	|      move.l #1008981770,-(sp)
    f218:	|      move.l d0,-(sp)
    f21a:	|      jsr 177bc <__mulsf3>
    f220:	|      addq.l #8,sp
    f222:	|      move.l d0,1c4b8 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f228:	|      move.l 1ca7a <winWidth>,d0
    f22e:	|      move.l d0,-(sp)
    f230:	|      jsr 17732 <__floatunsisf>
    f236:	|      addq.l #4,sp
    f238:	|      move.l d0,d1
    f23a:	|      move.l 1c4b8 <cameraZoom>,d0
    f240:	|      move.l d0,-(sp)
    f242:	|      move.l d1,-(sp)
    f244:	|      jsr 175c0 <__divsf3>
    f24a:	|      addq.l #8,sp
    f24c:	|      move.l d0,d2
    f24e:	|      move.l 1cbbe <sceneWidth>,d0
    f254:	|      move.l d0,-(sp)
    f256:	|      jsr 17732 <__floatunsisf>
    f25c:	|      addq.l #4,sp
    f25e:	|      move.l d0,-(sp)
    f260:	|      move.l d2,-(sp)
    f262:	|      jsr 17876 <__gtsf2>
    f268:	|      addq.l #8,sp
    f26a:	|      tst.l d0
    f26c:	|  ,-- ble.s f2a2 <builtIn_zoomCamera+0x142>
    f26e:	|  |   move.l 1ca7a <winWidth>,d0
    f274:	|  |   move.l d0,-(sp)
    f276:	|  |   jsr 17732 <__floatunsisf>
    f27c:	|  |   addq.l #4,sp
    f27e:	|  |   move.l d0,d2
    f280:	|  |   move.l 1cbbe <sceneWidth>,d0
    f286:	|  |   move.l d0,-(sp)
    f288:	|  |   jsr 17732 <__floatunsisf>
    f28e:	|  |   addq.l #4,sp
    f290:	|  |   move.l d0,-(sp)
    f292:	|  |   move.l d2,-(sp)
    f294:	|  |   jsr 175c0 <__divsf3>
    f29a:	|  |   addq.l #8,sp
    f29c:	|  |   move.l d0,1c4b8 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f2a2:	|  '-> move.l 1ca7e <winHeight>,d0
    f2a8:	|      move.l d0,-(sp)
    f2aa:	|      jsr 17732 <__floatunsisf>
    f2b0:	|      addq.l #4,sp
    f2b2:	|      move.l d0,d1
    f2b4:	|      move.l 1c4b8 <cameraZoom>,d0
    f2ba:	|      move.l d0,-(sp)
    f2bc:	|      move.l d1,-(sp)
    f2be:	|      jsr 175c0 <__divsf3>
    f2c4:	|      addq.l #8,sp
    f2c6:	|      move.l d0,d2
    f2c8:	|      move.l 1cbc2 <sceneHeight>,d0
    f2ce:	|      move.l d0,-(sp)
    f2d0:	|      jsr 17732 <__floatunsisf>
    f2d6:	|      addq.l #4,sp
    f2d8:	|      move.l d0,-(sp)
    f2da:	|      move.l d2,-(sp)
    f2dc:	|      jsr 17876 <__gtsf2>
    f2e2:	|      addq.l #8,sp
    f2e4:	|      tst.l d0
    f2e6:	|  ,-- ble.s f31c <builtIn_zoomCamera+0x1bc>
    f2e8:	|  |   move.l 1ca7e <winHeight>,d0
    f2ee:	|  |   move.l d0,-(sp)
    f2f0:	|  |   jsr 17732 <__floatunsisf>
    f2f6:	|  |   addq.l #4,sp
    f2f8:	|  |   move.l d0,d2
    f2fa:	|  |   move.l 1cbc2 <sceneHeight>,d0
    f300:	|  |   move.l d0,-(sp)
    f302:	|  |   jsr 17732 <__floatunsisf>
    f308:	|  |   addq.l #4,sp
    f30a:	|  |   move.l d0,-(sp)
    f30c:	|  |   move.l d2,-(sp)
    f30e:	|  |   jsr 175c0 <__divsf3>
    f314:	|  |   addq.l #8,sp
    f316:	|  |   move.l d0,1c4b8 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f31c:	|  '-> move.l 1cae2 <input+0xa>,d0
    f322:	|      move.l d0,-(sp)
    f324:	|      jsr 1770a <__floatsisf>
    f32a:	|      addq.l #4,sp
    f32c:	|      move.l d0,d1
    f32e:	|      move.l 1c4b8 <cameraZoom>,d0
    f334:	|      move.l d0,-(sp)
    f336:	|      move.l d1,-(sp)
    f338:	|      jsr 175c0 <__divsf3>
    f33e:	|      addq.l #8,sp
    f340:	|      move.l d0,-(sp)
    f342:	|      jsr 176a2 <__fixsfsi>
    f348:	|      addq.l #4,sp
    f34a:	|      move.l d0,1cae2 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f350:	|      move.l 1cae6 <input+0xe>,d0
    f356:	|      move.l d0,-(sp)
    f358:	|      jsr 1770a <__floatsisf>
    f35e:	|      addq.l #4,sp
    f360:	|      move.l d0,d1
    f362:	|      move.l 1c4b8 <cameraZoom>,d0
    f368:	|      move.l d0,-(sp)
    f36a:	|      move.l d1,-(sp)
    f36c:	|      jsr 175c0 <__divsf3>
    f372:	|      addq.l #8,sp
    f374:	|      move.l d0,-(sp)
    f376:	|      jsr 176a2 <__fixsfsi>
    f37c:	|      addq.l #4,sp
    f37e:	|      move.l d0,1cae6 <input+0xe>

	return BR_CONTINUE;
    f384:	|      moveq #2,d0
}
    f386:	'----> move.l (sp)+,d2
    f388:	       addq.l #4,sp
    f38a:	       rts

0000f38c <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f38c:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f38e:	             tst.l 8(sp)
    f392:	         ,-- bne.s f3a6 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f394:	         |   pea 19a49 <talk.c.490538ff+0x3a>
    f39a:	         |   jsr 172d8 <KPrintF>
    f3a0:	         |   addq.l #4,sp
		return BR_ERROR;
    f3a2:	         |   moveq #1,d0
    f3a4:	,--------|-- bra.s f406 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f3a6:	|        '-> jsr 15e98 <rand>
    f3ac:	|            move.l d0,d1
    f3ae:	|            move.l 8(sp),d0
    f3b2:	|            move.l d0,-(sp)
    f3b4:	|            move.l d1,-(sp)
    f3b6:	|            jsr 17d3e <__umodsi3>
    f3bc:	|            addq.l #8,sp
    f3be:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f3c0:	|     ,----- bra.s f3f4 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f3c2:	|  ,--|----> move.l (sp),d0
    f3c4:	|  |  |      cmp.l 8(sp),d0
    f3c8:	|  |  |  ,-- bne.s f3e4 <builtIn_pickOne+0x58>
    f3ca:	|  |  |  |   moveq #28,d0
    f3cc:	|  |  |  |   add.l 12(sp),d0
    f3d0:	|  |  |  |   movea.l 12(sp),a0
    f3d4:	|  |  |  |   move.l 24(a0),d1
    f3d8:	|  |  |  |   move.l d0,-(sp)
    f3da:	|  |  |  |   move.l d1,-(sp)
    f3dc:	|  |  |  |   jsr 14cb2 <copyVariable>
    f3e2:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f3e4:	|  |  |  '-> moveq #24,d0
    f3e6:	|  |  |      add.l 12(sp),d0
    f3ea:	|  |  |      move.l d0,-(sp)
    f3ec:	|  |  |      jsr 1517c <trimStack>
    f3f2:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f3f4:	|  |  '----> move.l 8(sp),d0
    f3f8:	|  |         move.l d0,d1
    f3fa:	|  |         subq.l #1,d1
    f3fc:	|  |         move.l d1,8(sp)
    f400:	|  |         tst.l d0
    f402:	|  '-------- bne.s f3c2 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f404:	|            moveq #2,d0
}
    f406:	'----------> addq.l #4,sp
    f408:	             rts

0000f40a <builtIn_substring>:

builtIn(substring)
{
    f40a:	       lea -40(sp),sp
    f40e:	       move.l a6,-(sp)
    f410:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f412:	       movea.l 56(sp),a0
    f416:	       move.l 24(a0),d0
    f41a:	       move.l d0,-(sp)
    f41c:	       pea 1 <_start+0x1>
    f420:	       lea 16(sp),a0
    f424:	       move.l a0,-(sp)
    f426:	       jsr 147f8 <getValueType>
    f42c:	       lea 12(sp),sp
    f430:	       tst.w d0
    f432:	   ,-- bne.s f43a <builtIn_substring+0x30>
    f434:	   |   moveq #1,d0
    f436:	,--|-- bra.w f5b2 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f43a:	|  '-> moveq #24,d0
    f43c:	|      add.l 56(sp),d0
    f440:	|      move.l d0,-(sp)
    f442:	|      jsr 1517c <trimStack>
    f448:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f44a:	|      movea.l 56(sp),a0
    f44e:	|      move.l 24(a0),d0
    f452:	|      move.l d0,-(sp)
    f454:	|      pea 1 <_start+0x1>
    f458:	|      lea 20(sp),a0
    f45c:	|      move.l a0,-(sp)
    f45e:	|      jsr 147f8 <getValueType>
    f464:	|      lea 12(sp),sp
    f468:	|      tst.w d0
    f46a:	|  ,-- bne.s f472 <builtIn_substring+0x68>
    f46c:	|  |   moveq #1,d0
    f46e:	+--|-- bra.w f5b2 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f472:	|  '-> moveq #24,d0
    f474:	|      add.l 56(sp),d0
    f478:	|      move.l d0,-(sp)
    f47a:	|      jsr 1517c <trimStack>
    f480:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f482:	|      movea.l 56(sp),a0
    f486:	|      move.l 24(a0),d0
    f48a:	|      move.l d0,-(sp)
    f48c:	|      jsr 14dce <getTextFromAnyVar>
    f492:	|      addq.l #4,sp
    f494:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f498:	|      moveq #24,d0
    f49a:	|      add.l 56(sp),d0
    f49e:	|      move.l d0,-(sp)
    f4a0:	|      jsr 1517c <trimStack>
    f4a6:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f4a8:	|      move.l 44(sp),-(sp)
    f4ac:	|      jsr 13ce4 <strlen>
    f4b2:	|      addq.l #4,sp
    f4b4:	|      move.l d0,d1
    f4b6:	|      move.l 12(sp),d0
    f4ba:	|      movea.l d0,a0
    f4bc:	|      move.l 8(sp),d0
    f4c0:	|      add.l a0,d0
    f4c2:	|      cmp.l d1,d0
    f4c4:	|  ,-- bls.s f4fa <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f4c6:	|  |   move.l 44(sp),-(sp)
    f4ca:	|  |   jsr 13ce4 <strlen>
    f4d0:	|  |   addq.l #4,sp
    f4d2:	|  |   move.l d0,d1
    f4d4:	|  |   move.l 12(sp),d0
    f4d8:	|  |   sub.l d0,d1
    f4da:	|  |   move.l d1,d0
    f4dc:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f4e0:	|  |   move.l 44(sp),-(sp)
    f4e4:	|  |   jsr 13ce4 <strlen>
    f4ea:	|  |   addq.l #4,sp
    f4ec:	|  |   move.l d0,d1
    f4ee:	|  |   move.l 12(sp),d0
    f4f2:	|  |   cmp.l d1,d0
    f4f4:	|  +-- bls.s f4fa <builtIn_substring+0xf0>
            start = 0;
    f4f6:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f4fa:	|  '-> move.l 8(sp),d0
    f4fe:	|  ,-- bpl.s f504 <builtIn_substring+0xfa>
        length = 0;
    f500:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f504:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f50a:	|      move.l 12(sp),d1
    f50e:	|      move.l 8(sp),d0
    f512:	|      move.l d1,d2
    f514:	|      add.l d0,d2
    f516:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f51a:	|      move.l 36(sp),d0
    f51e:	|      sub.l 40(sp),d0
    f522:	|      addq.l #1,d0
    f524:	|      move.l d0,32(sp)
    f528:	|      clr.l 28(sp)
    f52c:	|      move.l 1cb26 <SysBase>,d0
    f532:	|      movea.l d0,a6
    f534:	|      move.l 32(sp),d0
    f538:	|      move.l 28(sp),d1
    f53c:	|      jsr -684(a6)
    f540:	|      move.l d0,24(sp)
    f544:	|      move.l 24(sp),d0
    f548:	|      move.l d0,20(sp)
    if (!newString) {
    f54c:	|  ,-- bne.s f552 <builtIn_substring+0x148>
        return BR_ERROR;
    f54e:	|  |   moveq #1,d0
    f550:	+--|-- bra.s f5b2 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f552:	|  '-> move.l 36(sp),d0
    f556:	|      sub.l 40(sp),d0
    f55a:	|      move.l d0,d1
    f55c:	|      move.l 40(sp),d0
    f560:	|      add.l 44(sp),d0
    f564:	|      move.l d1,-(sp)
    f566:	|      move.l d0,-(sp)
    f568:	|      move.l 28(sp),-(sp)
    f56c:	|      jsr 1728c <memcpy>
    f572:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f576:	|      move.l 36(sp),d0
    f57a:	|      sub.l 40(sp),d0
    f57e:	|      movea.l 20(sp),a0
    f582:	|      adda.l d0,a0
    f584:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f586:	|      moveq #28,d0
    f588:	|      add.l 56(sp),d0
    f58c:	|      move.l 20(sp),-(sp)
    f590:	|      move.l d0,-(sp)
    f592:	|      jsr 14a1a <makeTextVar>
    f598:	|      addq.l #8,sp
    FreeVec(newString);
    f59a:	|      move.l 20(sp),16(sp)
    f5a0:	|      move.l 1cb26 <SysBase>,d0
    f5a6:	|      movea.l d0,a6
    f5a8:	|      movea.l 16(sp),a1
    f5ac:	|      jsr -690(a6)
    return BR_CONTINUE;
    f5b0:	|      moveq #2,d0
}
    f5b2:	'----> move.l (sp)+,d2
    f5b4:	       movea.l (sp)+,a6
    f5b6:	       lea 40(sp),sp
    f5ba:	       rts

0000f5bc <builtIn_stringLength>:

builtIn(stringLength)
{
    f5bc:	subq.l #8,sp
    f5be:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f5c0:	movea.l 20(sp),a0
    f5c4:	move.l 24(a0),d0
    f5c8:	move.l d0,-(sp)
    f5ca:	jsr 14dce <getTextFromAnyVar>
    f5d0:	addq.l #4,sp
    f5d2:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f5d6:	moveq #24,d0
    f5d8:	add.l 20(sp),d0
    f5dc:	move.l d0,-(sp)
    f5de:	jsr 1517c <trimStack>
    f5e4:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f5e6:	move.l 8(sp),-(sp)
    f5ea:	jsr 13ce4 <strlen>
    f5f0:	addq.l #4,sp
    f5f2:	move.l d0,d1
    f5f4:	moveq #28,d0
    f5f6:	add.l 20(sp),d0
    f5fa:	move.l d1,-(sp)
    f5fc:	pea 1 <_start+0x1>
    f600:	move.l d0,-(sp)
    f602:	jsr 150ea <setVariable>
    f608:	lea 12(sp),sp
	FreeVec(newText);
    f60c:	move.l 8(sp),4(sp)
    f612:	move.l 1cb26 <SysBase>,d0
    f618:	movea.l d0,a6
    f61a:	movea.l 4(sp),a1
    f61e:	jsr -690(a6)
	return BR_CONTINUE;
    f622:	moveq #2,d0
}
    f624:	movea.l (sp)+,a6
    f626:	addq.l #8,sp
    f628:	rts

0000f62a <builtIn_newStack>:

builtIn(newStack)
{
    f62a:	             lea -12(sp),sp
    f62e:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f630:	             moveq #28,d0
    f632:	             add.l 24(sp),d0
    f636:	             move.l d0,-(sp)
    f638:	             jsr 14a46 <unlinkVar>
    f63e:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f640:	             movea.l 24(sp),a0
    f644:	             moveq #6,d0
    f646:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f64a:	             moveq #12,d1
    f64c:	             move.l d1,12(sp)
    f650:	             clr.l 8(sp)
    f654:	             move.l 1cb26 <SysBase>,d0
    f65a:	             movea.l d0,a6
    f65c:	             move.l 12(sp),d0
    f660:	             move.l 8(sp),d1
    f664:	             jsr -684(a6)
    f668:	             move.l d0,4(sp)
    f66c:	             move.l 4(sp),d0
    f670:	             movea.l 24(sp),a0
    f674:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f678:	             movea.l 24(sp),a0
    f67c:	             move.l 32(a0),d0
    f680:	         ,-- bne.s f688 <builtIn_newStack+0x5e>
    f682:	         |   moveq #1,d0
    f684:	,--------|-- bra.w f71a <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f688:	|        '-> movea.l 24(sp),a0
    f68c:	|            movea.l 32(a0),a0
    f690:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f692:	|            movea.l 24(sp),a0
    f696:	|            movea.l 32(a0),a0
    f69a:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f69e:	|            movea.l 24(sp),a0
    f6a2:	|            movea.l 32(a0),a0
    f6a6:	|            moveq #1,d0
    f6a8:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f6ac:	|     ,----- bra.s f708 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f6ae:	|  ,--|----> movea.l 24(sp),a0
    f6b2:	|  |  |      move.l 32(a0),d0
    f6b6:	|  |  |      move.l d0,d1
    f6b8:	|  |  |      movea.l 24(sp),a0
    f6bc:	|  |  |      move.l 24(a0),d0
    f6c0:	|  |  |      move.l d1,-(sp)
    f6c2:	|  |  |      move.l d0,-(sp)
    f6c4:	|  |  |      jsr 14034 <addVarToStack>
    f6ca:	|  |  |      addq.l #8,sp
    f6cc:	|  |  |      tst.w d0
    f6ce:	|  |  |  ,-- bne.s f6d4 <builtIn_newStack+0xaa>
    f6d0:	|  |  |  |   moveq #1,d0
    f6d2:	+--|--|--|-- bra.s f71a <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f6d4:	|  |  |  '-> movea.l 24(sp),a0
    f6d8:	|  |  |      movea.l 32(a0),a0
    f6dc:	|  |  |      move.l 4(a0),d0
    f6e0:	|  |  |  ,-- bne.s f6f8 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f6e2:	|  |  |  |   movea.l 24(sp),a0
    f6e6:	|  |  |  |   movea.l 32(a0),a1
    f6ea:	|  |  |  |   movea.l 24(sp),a0
    f6ee:	|  |  |  |   movea.l 32(a0),a0
    f6f2:	|  |  |  |   move.l (a1),d0
    f6f4:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f6f8:	|  |  |  '-> moveq #24,d0
    f6fa:	|  |  |      add.l 24(sp),d0
    f6fe:	|  |  |      move.l d0,-(sp)
    f700:	|  |  |      jsr 1517c <trimStack>
    f706:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f708:	|  |  '----> move.l 20(sp),d0
    f70c:	|  |         move.l d0,d1
    f70e:	|  |         subq.l #1,d1
    f710:	|  |         move.l d1,20(sp)
    f714:	|  |         tst.l d0
    f716:	|  '-------- bne.s f6ae <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f718:	|            moveq #2,d0
}
    f71a:	'----------> movea.l (sp)+,a6
    f71c:	             lea 12(sp),sp
    f720:	             rts

0000f722 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f722:	          movea.l 8(sp),a0
    f726:	          movea.l 24(a0),a0
    f72a:	          move.l (a0),d0
    f72c:	          moveq #6,d1
    f72e:	          cmp.l d0,d1
    f730:	      ,-- beq.s f74c <builtIn_stackSize+0x2a>
    f732:	      |   moveq #10,d1
    f734:	      |   cmp.l d0,d1
    f736:	   ,--|-- beq.s f790 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f738:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f73a:	   |  |   pea 19a7c <talk.c.490538ff+0x6d>
    f740:	   |  |   jsr 172d8 <KPrintF>
    f746:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f748:	   |  |   moveq #1,d0
    f74a:	,--|--|-- bra.s f7ca <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f74c:	|  |  '-> movea.l 8(sp),a0
    f750:	|  |      movea.l 24(a0),a0
    f754:	|  |      move.l 4(a0),d0
    f758:	|  |      move.l d0,-(sp)
    f75a:	|  |      jsr 15158 <stackSize>
    f760:	|  |      addq.l #4,sp
    f762:	|  |      move.l d0,d1
    f764:	|  |      moveq #28,d0
    f766:	|  |      add.l 8(sp),d0
    f76a:	|  |      move.l d1,-(sp)
    f76c:	|  |      pea 1 <_start+0x1>
    f770:	|  |      move.l d0,-(sp)
    f772:	|  |      jsr 150ea <setVariable>
    f778:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f77c:	|  |      moveq #24,d0
    f77e:	|  |      add.l 8(sp),d0
    f782:	|  |      move.l d0,-(sp)
    f784:	|  |      jsr 1517c <trimStack>
    f78a:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f78c:	|  |      moveq #2,d0
    f78e:	+--|----- bra.s f7ca <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f790:	|  '----> movea.l 8(sp),a0
    f794:	|         movea.l 24(a0),a0
    f798:	|         movea.l 4(a0),a0
    f79c:	|         move.l 4(a0),d1
    f7a0:	|         moveq #28,d0
    f7a2:	|         add.l 8(sp),d0
    f7a6:	|         move.l d1,-(sp)
    f7a8:	|         pea 1 <_start+0x1>
    f7ac:	|         move.l d0,-(sp)
    f7ae:	|         jsr 150ea <setVariable>
    f7b4:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f7b8:	|         moveq #24,d0
    f7ba:	|         add.l 8(sp),d0
    f7be:	|         move.l d0,-(sp)
    f7c0:	|         jsr 1517c <trimStack>
    f7c6:	|         addq.l #4,sp
			return BR_CONTINUE;
    f7c8:	|         moveq #2,d0
}
    f7ca:	'-------> rts

0000f7cc <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f7cc:	       movea.l 8(sp),a0
    f7d0:	       movea.l 24(a0),a0
    f7d4:	       move.l (a0),d0
    f7d6:	       moveq #6,d1
    f7d8:	       cmp.l d0,d1
    f7da:	   ,-- beq.s f7ee <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f7dc:	   |   pea 19aa5 <talk.c.490538ff+0x96>
    f7e2:	   |   jsr 172d8 <KPrintF>
    f7e8:	   |   addq.l #4,sp
		return BR_ERROR;
    f7ea:	   |   moveq #1,d0
    f7ec:	,--|-- bra.s f822 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f7ee:	|  '-> moveq #28,d0
    f7f0:	|      add.l 8(sp),d0
    f7f4:	|      movea.l 8(sp),a0
    f7f8:	|      move.l 24(a0),d1
    f7fc:	|      move.l d0,-(sp)
    f7fe:	|      move.l d1,-(sp)
    f800:	|      jsr 142fe <copyStack>
    f806:	|      addq.l #8,sp
    f808:	|      tst.w d0
    f80a:	|  ,-- bne.s f810 <builtIn_copyStack+0x44>
    f80c:	|  |   moveq #1,d0
    f80e:	+--|-- bra.s f822 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f810:	|  '-> moveq #24,d0
    f812:	|      add.l 8(sp),d0
    f816:	|      move.l d0,-(sp)
    f818:	|      jsr 1517c <trimStack>
    f81e:	|      addq.l #4,sp
	return BR_CONTINUE;
    f820:	|      moveq #2,d0
}
    f822:	'----> rts

0000f824 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f824:	       movea.l 8(sp),a0
    f828:	       movea.l 24(a0),a0
    f82c:	       movea.l 8(a0),a0
    f830:	       move.l (a0),d0
    f832:	       moveq #6,d1
    f834:	       cmp.l d0,d1
    f836:	   ,-- beq.s f84c <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f838:	   |   pea 19abe <talk.c.490538ff+0xaf>
    f83e:	   |   jsr 172d8 <KPrintF>
    f844:	   |   addq.l #4,sp
		return BR_ERROR;
    f846:	   |   moveq #1,d0
    f848:	,--|-- bra.w f8da <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f84c:	|  '-> movea.l 8(sp),a0
    f850:	|      movea.l 24(a0),a0
    f854:	|      movea.l 8(a0),a0
    f858:	|      move.l 4(a0),d0
    f85c:	|      move.l d0,d1
    f85e:	|      movea.l 8(sp),a0
    f862:	|      move.l 24(a0),d0
    f866:	|      move.l d1,-(sp)
    f868:	|      move.l d0,-(sp)
    f86a:	|      jsr 14034 <addVarToStack>
    f870:	|      addq.l #8,sp
    f872:	|      tst.w d0
    f874:	|  ,-- bne.s f87a <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f876:	|  |   moveq #1,d0
    f878:	+--|-- bra.s f8da <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f87a:	|  '-> movea.l 8(sp),a0
    f87e:	|      movea.l 24(a0),a0
    f882:	|      movea.l 8(a0),a0
    f886:	|      movea.l 4(a0),a0
    f88a:	|      movea.l (a0),a0
    f88c:	|      move.l 8(a0),d0
    f890:	|  ,-- bne.s f8b8 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f892:	|  |   movea.l 8(sp),a0
    f896:	|  |   movea.l 24(a0),a0
    f89a:	|  |   movea.l 8(a0),a0
    f89e:	|  |   movea.l 4(a0),a1
    f8a2:	|  |   movea.l 8(sp),a0
    f8a6:	|  |   movea.l 24(a0),a0
    f8aa:	|  |   movea.l 8(a0),a0
    f8ae:	|  |   movea.l 4(a0),a0
    f8b2:	|  |   move.l (a1),d0
    f8b4:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f8b8:	|  '-> moveq #24,d0
    f8ba:	|      add.l 8(sp),d0
    f8be:	|      move.l d0,-(sp)
    f8c0:	|      jsr 1517c <trimStack>
    f8c6:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f8c8:	|      moveq #24,d0
    f8ca:	|      add.l 8(sp),d0
    f8ce:	|      move.l d0,-(sp)
    f8d0:	|      jsr 1517c <trimStack>
    f8d6:	|      addq.l #4,sp
	return BR_CONTINUE;
    f8d8:	|      moveq #2,d0
}
    f8da:	'----> rts

0000f8dc <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f8dc:	             movea.l 8(sp),a0
    f8e0:	             movea.l 24(a0),a0
    f8e4:	             movea.l 8(a0),a0
    f8e8:	             move.l (a0),d0
    f8ea:	             moveq #6,d1
    f8ec:	             cmp.l d0,d1
    f8ee:	         ,-- beq.s f904 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f8f0:	         |   pea 19abe <talk.c.490538ff+0xaf>
    f8f6:	         |   jsr 172d8 <KPrintF>
    f8fc:	         |   addq.l #4,sp
		return BR_ERROR;
    f8fe:	         |   moveq #1,d0
    f900:	,--------|-- bra.w f9f2 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f904:	|        '-> movea.l 8(sp),a0
    f908:	|            movea.l 24(a0),a0
    f90c:	|            movea.l 8(a0),a0
    f910:	|            movea.l 4(a0),a0
    f914:	|            move.l (a0),d0
    f916:	|     ,----- bne.s f970 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f918:	|     |      movea.l 8(sp),a0
    f91c:	|     |      movea.l 24(a0),a0
    f920:	|     |      movea.l 8(a0),a0
    f924:	|     |      move.l 4(a0),d0
    f928:	|     |      move.l d0,d1
    f92a:	|     |      movea.l 8(sp),a0
    f92e:	|     |      move.l 24(a0),d0
    f932:	|     |      move.l d1,-(sp)
    f934:	|     |      move.l d0,-(sp)
    f936:	|     |      jsr 14034 <addVarToStack>
    f93c:	|     |      addq.l #8,sp
    f93e:	|     |      tst.w d0
    f940:	|     |  ,-- bne.s f948 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f942:	|     |  |   moveq #1,d0
    f944:	+-----|--|-- bra.w f9f2 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f948:	|     |  '-> movea.l 8(sp),a0
    f94c:	|     |      movea.l 24(a0),a0
    f950:	|     |      movea.l 8(a0),a0
    f954:	|     |      movea.l 4(a0),a1
    f958:	|     |      movea.l 8(sp),a0
    f95c:	|     |      movea.l 24(a0),a0
    f960:	|     |      movea.l 8(a0),a0
    f964:	|     |      movea.l 4(a0),a0
    f968:	|     |      move.l (a1),d0
    f96a:	|     |      move.l d0,4(a0)
    f96e:	|  ,--|----- bra.s f9d0 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f970:	|  |  '----> movea.l 8(sp),a0
    f974:	|  |         movea.l 24(a0),a0
    f978:	|  |         movea.l 8(a0),a0
    f97c:	|  |         movea.l 4(a0),a0
    f980:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f984:	|  |         move.l d0,d1
    f986:	|  |         addq.l #8,d1
    f988:	|  |         movea.l 8(sp),a0
    f98c:	|  |         move.l 24(a0),d0
    f990:	|  |         move.l d1,-(sp)
    f992:	|  |         move.l d0,-(sp)
    f994:	|  |         jsr 14034 <addVarToStack>
    f99a:	|  |         addq.l #8,sp
    f99c:	|  |         tst.w d0
    f99e:	|  |     ,-- bne.s f9a4 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f9a0:	|  |     |   moveq #1,d0
    f9a2:	+--|-----|-- bra.s f9f2 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f9a4:	|  |     '-> movea.l 8(sp),a0
    f9a8:	|  |         movea.l 24(a0),a0
    f9ac:	|  |         movea.l 8(a0),a0
    f9b0:	|  |         movea.l 4(a0),a0
    f9b4:	|  |         movea.l 4(a0),a1
    f9b8:	|  |         movea.l 8(sp),a0
    f9bc:	|  |         movea.l 24(a0),a0
    f9c0:	|  |         movea.l 8(a0),a0
    f9c4:	|  |         movea.l 4(a0),a0
    f9c8:	|  |         move.l 8(a1),d0
    f9cc:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f9d0:	|  '-------> moveq #24,d0
    f9d2:	|            add.l 8(sp),d0
    f9d6:	|            move.l d0,-(sp)
    f9d8:	|            jsr 1517c <trimStack>
    f9de:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f9e0:	|            moveq #24,d0
    f9e2:	|            add.l 8(sp),d0
    f9e6:	|            move.l d0,-(sp)
    f9e8:	|            jsr 1517c <trimStack>
    f9ee:	|            addq.l #4,sp
	return BR_CONTINUE;
    f9f0:	|            moveq #2,d0
}
    f9f2:	'----------> rts

0000f9f4 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f9f4:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f9f6:	       movea.l 12(sp),a0
    f9fa:	       movea.l 24(a0),a0
    f9fe:	       movea.l 8(a0),a0
    fa02:	       move.l (a0),d0
    fa04:	       moveq #6,d1
    fa06:	       cmp.l d0,d1
    fa08:	   ,-- beq.s fa1e <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fa0a:	   |   pea 19aa5 <talk.c.490538ff+0x96>
    fa10:	   |   jsr 172d8 <KPrintF>
    fa16:	   |   addq.l #4,sp
		return BR_ERROR;
    fa18:	   |   moveq #1,d0
    fa1a:	,--|-- bra.w fab4 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    fa1e:	|  '-> movea.l 12(sp),a0
    fa22:	|      movea.l 24(a0),a0
    fa26:	|      movea.l 8(a0),a0
    fa2a:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fa2e:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fa30:	|      movea.l 12(sp),a0
    fa34:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fa38:	|      clr.l -(sp)
    fa3a:	|      move.l d1,-(sp)
    fa3c:	|      move.l d0,-(sp)
    fa3e:	|      jsr 143d4 <deleteVarFromStack>
    fa44:	|      lea 12(sp),sp
    fa48:	|      move.l d0,d1
    fa4a:	|      moveq #28,d0
    fa4c:	|      add.l 12(sp),d0
    fa50:	|      move.l d1,-(sp)
    fa52:	|      pea 1 <_start+0x1>
    fa56:	|      move.l d0,-(sp)
    fa58:	|      jsr 150ea <setVariable>
    fa5e:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fa62:	|      movea.l 12(sp),a0
    fa66:	|      movea.l 24(a0),a0
    fa6a:	|      movea.l 8(a0),a0
    fa6e:	|      movea.l 4(a0),a0
    fa72:	|      move.l (a0),d0
    fa74:	|      movea.l 12(sp),a0
    fa78:	|      movea.l 24(a0),a0
    fa7c:	|      movea.l 8(a0),a0
    fa80:	|      movea.l 4(a0),a2
    fa84:	|      move.l d0,-(sp)
    fa86:	|      jsr 15134 <stackFindLast>
    fa8c:	|      addq.l #4,sp
    fa8e:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fa92:	|      moveq #24,d0
    fa94:	|      add.l 12(sp),d0
    fa98:	|      move.l d0,-(sp)
    fa9a:	|      jsr 1517c <trimStack>
    faa0:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    faa2:	|      moveq #24,d0
    faa4:	|      add.l 12(sp),d0
    faa8:	|      move.l d0,-(sp)
    faaa:	|      jsr 1517c <trimStack>
    fab0:	|      addq.l #4,sp
	return BR_CONTINUE;
    fab2:	|      moveq #2,d0
}
    fab4:	'----> movea.l (sp)+,a2
    fab6:	       rts

0000fab8 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fab8:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    faba:	       movea.l 12(sp),a0
    fabe:	       movea.l 24(a0),a0
    fac2:	       movea.l 8(a0),a0
    fac6:	       move.l (a0),d0
    fac8:	       moveq #6,d1
    faca:	       cmp.l d0,d1
    facc:	   ,-- beq.s fae2 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    face:	   |   pea 19aa5 <talk.c.490538ff+0x96>
    fad4:	   |   jsr 172d8 <KPrintF>
    fada:	   |   addq.l #4,sp
		return BR_ERROR;
    fadc:	   |   moveq #1,d0
    fade:	,--|-- bra.w fb7a <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fae2:	|  '-> movea.l 12(sp),a0
    fae6:	|      movea.l 24(a0),a0
    faea:	|      movea.l 8(a0),a0
    faee:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    faf2:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    faf4:	|      movea.l 12(sp),a0
    faf8:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fafc:	|      pea 1 <_start+0x1>
    fb00:	|      move.l d1,-(sp)
    fb02:	|      move.l d0,-(sp)
    fb04:	|      jsr 143d4 <deleteVarFromStack>
    fb0a:	|      lea 12(sp),sp
    fb0e:	|      move.l d0,d1
    fb10:	|      moveq #28,d0
    fb12:	|      add.l 12(sp),d0
    fb16:	|      move.l d1,-(sp)
    fb18:	|      pea 1 <_start+0x1>
    fb1c:	|      move.l d0,-(sp)
    fb1e:	|      jsr 150ea <setVariable>
    fb24:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fb28:	|      movea.l 12(sp),a0
    fb2c:	|      movea.l 24(a0),a0
    fb30:	|      movea.l 8(a0),a0
    fb34:	|      movea.l 4(a0),a0
    fb38:	|      move.l (a0),d0
    fb3a:	|      movea.l 12(sp),a0
    fb3e:	|      movea.l 24(a0),a0
    fb42:	|      movea.l 8(a0),a0
    fb46:	|      movea.l 4(a0),a2
    fb4a:	|      move.l d0,-(sp)
    fb4c:	|      jsr 15134 <stackFindLast>
    fb52:	|      addq.l #4,sp
    fb54:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fb58:	|      moveq #24,d0
    fb5a:	|      add.l 12(sp),d0
    fb5e:	|      move.l d0,-(sp)
    fb60:	|      jsr 1517c <trimStack>
    fb66:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fb68:	|      moveq #24,d0
    fb6a:	|      add.l 12(sp),d0
    fb6e:	|      move.l d0,-(sp)
    fb70:	|      jsr 1517c <trimStack>
    fb76:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb78:	|      moveq #2,d0
} 
    fb7a:	'----> movea.l (sp)+,a2
    fb7c:	       rts

0000fb7e <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fb7e:	       movea.l 8(sp),a0
    fb82:	       movea.l 24(a0),a0
    fb86:	       move.l (a0),d0
    fb88:	       moveq #6,d1
    fb8a:	       cmp.l d0,d1
    fb8c:	   ,-- beq.s fba0 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fb8e:	   |   pea 19aa5 <talk.c.490538ff+0x96>
    fb94:	   |   jsr 172d8 <KPrintF>
    fb9a:	   |   addq.l #4,sp
		return BR_ERROR;
    fb9c:	   |   moveq #1,d0
    fb9e:	,--|-- bra.s fc0a <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fba0:	|  '-> movea.l 8(sp),a0
    fba4:	|      movea.l 24(a0),a0
    fba8:	|      movea.l 4(a0),a0
    fbac:	|      move.l (a0),d0
    fbae:	|  ,-- bne.s fbc2 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fbb0:	|  |   pea 19ad6 <talk.c.490538ff+0xc7>
    fbb6:	|  |   jsr 172d8 <KPrintF>
    fbbc:	|  |   addq.l #4,sp
		return BR_ERROR;
    fbbe:	|  |   moveq #1,d0
    fbc0:	+--|-- bra.s fc0a <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fbc2:	|  '-> moveq #28,d0
    fbc4:	|      add.l 8(sp),d0
    fbc8:	|      movea.l 8(sp),a0
    fbcc:	|      movea.l 24(a0),a0
    fbd0:	|      movea.l 4(a0),a0
    fbd4:	|      move.l (a0),d1
    fbd6:	|      move.l d0,-(sp)
    fbd8:	|      move.l d1,-(sp)
    fbda:	|      jsr 14cb2 <copyVariable>
    fbe0:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fbe2:	|      movea.l 8(sp),a0
    fbe6:	|      movea.l 24(a0),a0
    fbea:	|      move.l 4(a0),d0
    fbee:	|      move.l d0,-(sp)
    fbf0:	|      jsr 1517c <trimStack>
    fbf6:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fbf8:	|      moveq #24,d0
    fbfa:	|      add.l 8(sp),d0
    fbfe:	|      move.l d0,-(sp)
    fc00:	|      jsr 1517c <trimStack>
    fc06:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc08:	|      moveq #2,d0
}
    fc0a:	'----> rts

0000fc0c <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fc0c:	       movea.l 8(sp),a0
    fc10:	       movea.l 24(a0),a0
    fc14:	       move.l (a0),d0
    fc16:	       moveq #6,d1
    fc18:	       cmp.l d0,d1
    fc1a:	   ,-- beq.s fc2e <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fc1c:	   |   pea 19aa5 <talk.c.490538ff+0x96>
    fc22:	   |   jsr 172d8 <KPrintF>
    fc28:	   |   addq.l #4,sp
		return BR_ERROR;
    fc2a:	   |   moveq #1,d0
    fc2c:	,--|-- bra.s fc82 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fc2e:	|  '-> movea.l 8(sp),a0
    fc32:	|      movea.l 24(a0),a0
    fc36:	|      movea.l 4(a0),a0
    fc3a:	|      move.l (a0),d0
    fc3c:	|  ,-- bne.s fc50 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fc3e:	|  |   pea 19ad6 <talk.c.490538ff+0xc7>
    fc44:	|  |   jsr 172d8 <KPrintF>
    fc4a:	|  |   addq.l #4,sp
		return BR_ERROR;
    fc4c:	|  |   moveq #1,d0
    fc4e:	+--|-- bra.s fc82 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fc50:	|  '-> moveq #28,d0
    fc52:	|      add.l 8(sp),d0
    fc56:	|      movea.l 8(sp),a0
    fc5a:	|      movea.l 24(a0),a0
    fc5e:	|      movea.l 4(a0),a0
    fc62:	|      move.l (a0),d1
    fc64:	|      move.l d0,-(sp)
    fc66:	|      move.l d1,-(sp)
    fc68:	|      jsr 14cb2 <copyVariable>
    fc6e:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fc70:	|      moveq #24,d0
    fc72:	|      add.l 8(sp),d0
    fc76:	|      move.l d0,-(sp)
    fc78:	|      jsr 1517c <trimStack>
    fc7e:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc80:	|      moveq #2,d0
}
    fc82:	'----> rts

0000fc84 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fc84:	       movea.l 8(sp),a0
    fc88:	       movea.l 24(a0),a0
    fc8c:	       move.l (a0),d0
    fc8e:	       moveq #6,d1
    fc90:	       cmp.l d0,d1
    fc92:	   ,-- beq.s fca6 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fc94:	   |   pea 19aa5 <talk.c.490538ff+0x96>
    fc9a:	   |   jsr 172d8 <KPrintF>
    fca0:	   |   addq.l #4,sp
		return BR_ERROR;
    fca2:	   |   moveq #1,d0
    fca4:	,--|-- bra.s fcfc <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fca6:	|  '-> movea.l 8(sp),a0
    fcaa:	|      movea.l 24(a0),a0
    fcae:	|      movea.l 4(a0),a0
    fcb2:	|      move.l (a0),d0
    fcb4:	|  ,-- bne.s fcc8 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fcb6:	|  |   pea 19ad6 <talk.c.490538ff+0xc7>
    fcbc:	|  |   jsr 172d8 <KPrintF>
    fcc2:	|  |   addq.l #4,sp
		return BR_ERROR;
    fcc4:	|  |   moveq #1,d0
    fcc6:	+--|-- bra.s fcfc <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fcc8:	|  '-> moveq #28,d0
    fcca:	|      add.l 8(sp),d0
    fcce:	|      movea.l 8(sp),a0
    fcd2:	|      movea.l 24(a0),a0
    fcd6:	|      movea.l 4(a0),a0
    fcda:	|      move.l 4(a0),d1
    fcde:	|      move.l d0,-(sp)
    fce0:	|      move.l d1,-(sp)
    fce2:	|      jsr 14cb2 <copyVariable>
    fce8:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fcea:	|      moveq #24,d0
    fcec:	|      add.l 8(sp),d0
    fcf0:	|      move.l d0,-(sp)
    fcf2:	|      jsr 1517c <trimStack>
    fcf8:	|      addq.l #4,sp
	return BR_CONTINUE;
    fcfa:	|      moveq #2,d0
}
    fcfc:	'----> rts

0000fcfe <builtIn_random>:

builtIn(random)
{
    fcfe:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fd00:	       movea.l 12(sp),a0
    fd04:	       move.l 24(a0),d0
    fd08:	       move.l d0,-(sp)
    fd0a:	       pea 1 <_start+0x1>
    fd0e:	       move.l sp,d0
    fd10:	       addq.l #8,d0
    fd12:	       move.l d0,-(sp)
    fd14:	       jsr 147f8 <getValueType>
    fd1a:	       lea 12(sp),sp
    fd1e:	       tst.w d0
    fd20:	   ,-- bne.s fd26 <builtIn_random+0x28>
		return BR_ERROR;
    fd22:	   |   moveq #1,d0
    fd24:	,--|-- bra.s fd70 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fd26:	|  '-> moveq #24,d0
    fd28:	|      add.l 12(sp),d0
    fd2c:	|      move.l d0,-(sp)
    fd2e:	|      jsr 1517c <trimStack>
    fd34:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fd36:	|      move.l (sp),d0
    fd38:	|  ,-- bgt.s fd3e <builtIn_random+0x40>
    fd3a:	|  |   moveq #1,d0
    fd3c:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fd3e:	|  '-> jsr 15e98 <rand>
    fd44:	|      move.l d0,d1
    fd46:	|      move.l (sp),d0
    fd48:	|      move.l d0,-(sp)
    fd4a:	|      move.l d1,-(sp)
    fd4c:	|      jsr 17d3e <__umodsi3>
    fd52:	|      addq.l #8,sp
    fd54:	|      move.l d0,d1
    fd56:	|      moveq #28,d0
    fd58:	|      add.l 12(sp),d0
    fd5c:	|      move.l d1,-(sp)
    fd5e:	|      pea 1 <_start+0x1>
    fd62:	|      move.l d0,-(sp)
    fd64:	|      jsr 150ea <setVariable>
    fd6a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fd6e:	|      moveq #2,d0
}
    fd70:	'----> addq.l #4,sp
    fd72:	       rts

0000fd74 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fd74:	nop
    fd76:	rts

0000fd78 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fd78:	moveq #2,d0
}
    fd7a:	rts

0000fd7c <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fd7c:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fd7e:	       movea.l 12(sp),a0
    fd82:	       move.l 24(a0),d0
    fd86:	       move.l d0,-(sp)
    fd88:	       pea 1 <_start+0x1>
    fd8c:	       move.l sp,d0
    fd8e:	       addq.l #8,d0
    fd90:	       move.l d0,-(sp)
    fd92:	       jsr 147f8 <getValueType>
    fd98:	       lea 12(sp),sp
    fd9c:	       tst.w d0
    fd9e:	   ,-- bne.s fdb2 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fda0:	   |   pea 19ae9 <talk.c.490538ff+0xda>
    fda6:	   |   jsr 172d8 <KPrintF>
    fdac:	   |   addq.l #4,sp
		return BR_ERROR;
    fdae:	   |   moveq #1,d0
    fdb0:	,--|-- bra.s fdf2 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fdb2:	|  '-> moveq #24,d0
    fdb4:	|      add.l 12(sp),d0
    fdb8:	|      move.l d0,-(sp)
    fdba:	|      jsr 1517c <trimStack>
    fdc0:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fdc2:	|      move.l (sp),d0
    fdc4:	|      move.l d0,d0
    fdc6:	|      move.w d0,1ca34 <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fdcc:	|      move.w 1ca34 <textPaletteIndex>,d0
    fdd2:	|      cmpi.w #31,d0
    fdd6:	|  ,-- bls.s fdf0 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fdd8:	|  |   pea 19b10 <talk.c.490538ff+0x101>
    fdde:	|  |   jsr 172d8 <KPrintF>
    fde4:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fde6:	|  |   clr.w 1ca34 <textPaletteIndex>
		return BR_ERROR;
    fdec:	|  |   moveq #1,d0
    fdee:	+--|-- bra.s fdf2 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fdf0:	|  '-> moveq #2,d0
}
    fdf2:	'----> addq.l #4,sp
    fdf4:	       rts

0000fdf6 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fdf6:	moveq #2,d0
}
    fdf8:	rts

0000fdfa <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fdfa:	moveq #2,d0
}
    fdfc:	rts

0000fdfe <builtIn_setFont>:


builtIn(setFont)
{
    fdfe:	       lea -16(sp),sp
    fe02:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fe04:	       movea.l 28(sp),a0
    fe08:	       move.l 24(a0),d0
    fe0c:	       move.l d0,-(sp)
    fe0e:	       pea 1 <_start+0x1>
    fe12:	       lea 12(sp),a0
    fe16:	       move.l a0,-(sp)
    fe18:	       jsr 147f8 <getValueType>
    fe1e:	       lea 12(sp),sp
    fe22:	       tst.w d0
    fe24:	   ,-- bne.s fe2c <builtIn_setFont+0x2e>
    fe26:	   |   moveq #1,d0
    fe28:	,--|-- bra.w feda <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fe2c:	|  '-> moveq #24,d0
    fe2e:	|      add.l 28(sp),d0
    fe32:	|      move.l d0,-(sp)
    fe34:	|      jsr 1517c <trimStack>
    fe3a:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fe3c:	|      movea.l 28(sp),a0
    fe40:	|      move.l 24(a0),d0
    fe44:	|      move.l d0,-(sp)
    fe46:	|      jsr 14dce <getTextFromAnyVar>
    fe4c:	|      addq.l #4,sp
    fe4e:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fe52:	|  ,-- bne.s fe5a <builtIn_setFont+0x5c>
    fe54:	|  |   moveq #1,d0
    fe56:	+--|-- bra.w feda <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fe5a:	|  '-> moveq #24,d0
    fe5c:	|      add.l 28(sp),d0
    fe60:	|      move.l d0,-(sp)
    fe62:	|      jsr 1517c <trimStack>
    fe68:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fe6a:	|      movea.l 28(sp),a0
    fe6e:	|      move.l 24(a0),d0
    fe72:	|      move.l d0,-(sp)
    fe74:	|      pea 5 <_start+0x5>
    fe78:	|      lea 16(sp),a0
    fe7c:	|      move.l a0,-(sp)
    fe7e:	|      jsr 147f8 <getValueType>
    fe84:	|      lea 12(sp),sp
    fe88:	|      tst.w d0
    fe8a:	|  ,-- bne.s fe90 <builtIn_setFont+0x92>
    fe8c:	|  |   moveq #1,d0
    fe8e:	+--|-- bra.s feda <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fe90:	|  '-> moveq #24,d0
    fe92:	|      add.l 28(sp),d0
    fe96:	|      move.l d0,-(sp)
    fe98:	|      jsr 1517c <trimStack>
    fe9e:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    fea0:	|      move.l 4(sp),d1
    fea4:	|      move.l 8(sp),d0
    fea8:	|      move.l d1,-(sp)
    feaa:	|      move.l 20(sp),-(sp)
    feae:	|      move.l d0,-(sp)
    feb0:	|      jsr 15630 <loadFont>
    feb6:	|      lea 12(sp),sp
    feba:	|      tst.w d0
    febc:	|  ,-- bne.s fec2 <builtIn_setFont+0xc4>
    febe:	|  |   moveq #1,d0
    fec0:	+--|-- bra.s feda <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fec2:	|  '-> move.l 16(sp),12(sp)
    fec8:	|      move.l 1cb26 <SysBase>,d0
    fece:	|      movea.l d0,a6
    fed0:	|      movea.l 12(sp),a1
    fed4:	|      jsr -690(a6)

    return BR_CONTINUE;
    fed8:	|      moveq #2,d0
}
    feda:	'----> movea.l (sp)+,a6
    fedc:	       lea 16(sp),sp
    fee0:	       rts

0000fee2 <builtIn_inFont>:

builtIn(inFont)
{
    fee2:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fee4:	       movea.l 12(sp),a0
    fee8:	       move.l 24(a0),d0
    feec:	       move.l d0,-(sp)
    feee:	       jsr 14dce <getTextFromAnyVar>
    fef4:	       addq.l #4,sp
    fef6:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    fef8:	   ,-- bne.s fefe <builtIn_inFont+0x1c>
    fefa:	   |   moveq #1,d0
    fefc:	,--|-- bra.s ff34 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    fefe:	|  '-> moveq #24,d0
    ff00:	|      add.l 12(sp),d0
    ff04:	|      move.l d0,-(sp)
    ff06:	|      jsr 1517c <trimStack>
    ff0c:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    ff0e:	|      move.l (sp),-(sp)
    ff10:	|      jsr 1561e <isInFont>
    ff16:	|      addq.l #4,sp
    ff18:	|      movea.w d0,a0
    ff1a:	|      moveq #28,d0
    ff1c:	|      add.l 12(sp),d0
    ff20:	|      move.l a0,-(sp)
    ff22:	|      pea 1 <_start+0x1>
    ff26:	|      move.l d0,-(sp)
    ff28:	|      jsr 150ea <setVariable>
    ff2e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ff32:	|      moveq #2,d0
}
    ff34:	'----> addq.l #4,sp
    ff36:	       rts

0000ff38 <builtIn_pasteString>:

builtIn(pasteString)
{
    ff38:	       lea -16(sp),sp
    ff3c:	       move.l a6,-(sp)
    ff3e:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ff40:	       movea.l 32(sp),a0
    ff44:	       move.l 24(a0),d0
    ff48:	       move.l d0,-(sp)
    ff4a:	       jsr 14dce <getTextFromAnyVar>
    ff50:	       addq.l #4,sp
    ff52:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    ff56:	       moveq #24,d0
    ff58:	       add.l 32(sp),d0
    ff5c:	       move.l d0,-(sp)
    ff5e:	       jsr 1517c <trimStack>
    ff64:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ff66:	       movea.l 32(sp),a0
    ff6a:	       move.l 24(a0),d0
    ff6e:	       move.l d0,-(sp)
    ff70:	       pea 1 <_start+0x1>
    ff74:	       lea 20(sp),a0
    ff78:	       move.l a0,-(sp)
    ff7a:	       jsr 147f8 <getValueType>
    ff80:	       lea 12(sp),sp
    ff84:	       tst.w d0
    ff86:	   ,-- bne.s ff8e <builtIn_pasteString+0x56>
    ff88:	   |   moveq #1,d0
    ff8a:	,--|-- bra.w 10030 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    ff8e:	|  '-> moveq #24,d0
    ff90:	|      add.l 32(sp),d0
    ff94:	|      move.l d0,-(sp)
    ff96:	|      jsr 1517c <trimStack>
    ff9c:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ff9e:	|      movea.l 32(sp),a0
    ffa2:	|      move.l 24(a0),d0
    ffa6:	|      move.l d0,-(sp)
    ffa8:	|      pea 1 <_start+0x1>
    ffac:	|      lea 16(sp),a0
    ffb0:	|      move.l a0,-(sp)
    ffb2:	|      jsr 147f8 <getValueType>
    ffb8:	|      lea 12(sp),sp
    ffbc:	|      tst.w d0
    ffbe:	|  ,-- bne.s ffc4 <builtIn_pasteString+0x8c>
    ffc0:	|  |   moveq #1,d0
    ffc2:	+--|-- bra.s 10030 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    ffc4:	|  '-> moveq #24,d0
    ffc6:	|      add.l 32(sp),d0
    ffca:	|      move.l d0,-(sp)
    ffcc:	|      jsr 1517c <trimStack>
    ffd2:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
    ffd4:	|      move.l 8(sp),d0
    ffd8:	|      cmpi.l #65535,d0
    ffde:	|  ,-- bne.s fffe <builtIn_pasteString+0xc6>
		x = (winWidth - stringWidth(newText)) >> 1;
    ffe0:	|  |   move.l 1ca7a <winWidth>,d2
    ffe6:	|  |   move.l 20(sp),-(sp)
    ffea:	|  |   jsr 158e2 <stringWidth>
    fff0:	|  |   addq.l #4,sp
    fff2:	|  |   move.l d2,d1
    fff4:	|  |   sub.l d0,d1
    fff6:	|  |   move.l d1,d0
    fff8:	|  |   lsr.l #1,d0
    fffa:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    fffe:	|  '-> move.l 12(sp),d1
   10002:	|      move.l 8(sp),d0
   10006:	|      move.l d1,-(sp)
   10008:	|      move.l d0,-(sp)
   1000a:	|      move.l 28(sp),-(sp)
   1000e:	|      jsr 15804 <pasteStringToBackdrop>
   10014:	|      lea 12(sp),sp
    FreeVec(newText); 
   10018:	|      move.l 20(sp),16(sp)
   1001e:	|      move.l 1cb26 <SysBase>,d0
   10024:	|      movea.l d0,a6
   10026:	|      movea.l 16(sp),a1
   1002a:	|      jsr -690(a6)
    return BR_CONTINUE;
   1002e:	|      moveq #2,d0
}
   10030:	'----> move.l (sp)+,d2
   10032:	       movea.l (sp)+,a6
   10034:	       lea 16(sp),sp
   10038:	       rts

0001003a <builtIn_anim>:

builtIn(anim)
{
   1003a:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   1003e:	       moveq #1,d0
   10040:	       cmp.l 16(sp),d0
   10044:	   ,-- blt.s 1005a <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10046:	   |   pea 19b3a <talk.c.490538ff+0x12b>
   1004c:	   |   jsr 172d8 <KPrintF>
   10052:	   |   addq.l #4,sp
		return BR_ERROR;
   10054:	   |   moveq #1,d0
   10056:	,--|-- bra.w 100e8 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   1005a:	|  '-> moveq #24,d1
   1005c:	|      add.l 20(sp),d1
   10060:	|      move.l 16(sp),d0
   10064:	|      subq.l #1,d0
   10066:	|      move.l d1,-(sp)
   10068:	|      move.l d0,-(sp)
   1006a:	|      jsr 966c <createPersonaAnim>
   10070:	|      addq.l #8,sp
   10072:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10076:	|      movea.l 20(sp),a0
   1007a:	|      move.l 24(a0),d0
   1007e:	|      move.l d0,-(sp)
   10080:	|      pea 5 <_start+0x5>
   10084:	|      lea 8(sp),a0
   10088:	|      move.l a0,-(sp)
   1008a:	|      jsr 147f8 <getValueType>
   10090:	|      lea 12(sp),sp
   10094:	|      tst.w d0
   10096:	|  ,-- bne.s 1009c <builtIn_anim+0x62>
   10098:	|  |   moveq #1,d0
   1009a:	+--|-- bra.s 100e8 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   1009c:	|  '-> moveq #24,d0
   1009e:	|      add.l 20(sp),d0
   100a2:	|      move.l d0,-(sp)
   100a4:	|      jsr 1517c <trimStack>
   100aa:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   100ac:	|      move.l (sp),d0
   100ae:	|      move.l d0,-(sp)
   100b0:	|      jsr 15ffa <loadBankForAnim>
   100b6:	|      addq.l #4,sp
   100b8:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   100bc:	|  ,-- bne.s 100c2 <builtIn_anim+0x88>
   100be:	|  |   moveq #1,d0
   100c0:	+--|-- bra.s 100e8 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   100c2:	|  '-> move.l 4(sp),-(sp)
   100c6:	|      move.l 12(sp),-(sp)
   100ca:	|      jsr b578 <setBankFile>
   100d0:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   100d2:	|      moveq #28,d0
   100d4:	|      add.l 20(sp),d0
   100d8:	|      move.l 8(sp),-(sp)
   100dc:	|      move.l d0,-(sp)
   100de:	|      jsr 150a6 <newAnimationVariable>
   100e4:	|      addq.l #8,sp
	return BR_CONTINUE;
   100e6:	|      moveq #2,d0
}
   100e8:	'----> lea 12(sp),sp
   100ec:	       rts

000100ee <builtIn_costume>:

builtIn(costume)
{
   100ee:	          lea -32(sp),sp
   100f2:	          move.l a6,-(sp)
   100f4:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   100f6:	          moveq #8,d0
   100f8:	          move.l d0,32(sp)
   100fc:	          clr.l 28(sp)
   10100:	          move.l 1cb26 <SysBase>,d0
   10106:	          movea.l d0,a6
   10108:	          move.l 32(sp),d0
   1010c:	          move.l 28(sp),d1
   10110:	          jsr -684(a6)
   10114:	          move.l d0,24(sp)
   10118:	          move.l 24(sp),d0
   1011c:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   10120:	      ,-- bne.s 10128 <builtIn_costume+0x3a>
   10122:	      |   moveq #1,d0
   10124:	,-----|-- bra.w 10210 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   10128:	|     '-> move.l 44(sp),d0
   1012c:	|         pea 3 <_start+0x3>
   10130:	|         move.l d0,-(sp)
   10132:	|         jsr 17ce2 <__divsi3>
   10138:	|         addq.l #8,sp
   1013a:	|         movea.l 20(sp),a0
   1013e:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   10142:	|         tst.l 44(sp)
   10146:	|     ,-- beq.s 1015c <builtIn_costume+0x6e>
   10148:	|     |   movea.l 20(sp),a0
   1014c:	|     |   move.l 4(a0),d1
   10150:	|     |   move.l d1,d0
   10152:	|     |   add.l d0,d0
   10154:	|     |   add.l d1,d0
   10156:	|     |   cmp.l 44(sp),d0
   1015a:	|  ,--|-- beq.s 10170 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   1015c:	|  |  '-> pea 19b74 <talk.c.490538ff+0x165>
   10162:	|  |      jsr 172d8 <KPrintF>
   10168:	|  |      addq.l #4,sp
        return BR_ERROR;
   1016a:	|  |      moveq #1,d0
   1016c:	+--|----- bra.w 10210 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   10170:	|  '----> move.l 44(sp),d0
   10174:	|         add.l d0,d0
   10176:	|         add.l d0,d0
   10178:	|         move.l d0,16(sp)
   1017c:	|         clr.l 12(sp)
   10180:	|         move.l 1cb26 <SysBase>,d0
   10186:	|         movea.l d0,a6
   10188:	|         move.l 16(sp),d0
   1018c:	|         move.l 12(sp),d1
   10190:	|         jsr -684(a6)
   10194:	|         move.l d0,8(sp)
   10198:	|         move.l 8(sp),d0
   1019c:	|         movea.l 20(sp),a0
   101a0:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   101a2:	|         movea.l 20(sp),a0
   101a6:	|         move.l (a0),d0
   101a8:	|     ,-- bne.s 101ae <builtIn_costume+0xc0>
   101aa:	|     |   moveq #1,d0
   101ac:	+-----|-- bra.s 10210 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   101ae:	|     '-> move.l 44(sp),d0
   101b2:	|         subq.l #1,d0
   101b4:	|         move.l d0,36(sp)
   101b8:	|     ,-- bra.s 101f4 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   101ba:	|  ,--|-> movea.l 48(sp),a0
   101be:	|  |  |   move.l 24(a0),d0
   101c2:	|  |  |   movea.l 20(sp),a0
   101c6:	|  |  |   movea.l (a0),a0
   101c8:	|  |  |   move.l 36(sp),d1
   101cc:	|  |  |   add.l d1,d1
   101ce:	|  |  |   add.l d1,d1
   101d0:	|  |  |   lea (0,a0,d1.l),a2
   101d4:	|  |  |   move.l d0,-(sp)
   101d6:	|  |  |   jsr 14cd0 <getAnimationFromVar>
   101dc:	|  |  |   addq.l #4,sp
   101de:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   101e0:	|  |  |   moveq #24,d0
   101e2:	|  |  |   add.l 48(sp),d0
   101e6:	|  |  |   move.l d0,-(sp)
   101e8:	|  |  |   jsr 1517c <trimStack>
   101ee:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   101f0:	|  |  |   subq.l #1,36(sp)
   101f4:	|  |  '-> tst.l 36(sp)
   101f8:	|  '----- bge.s 101ba <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   101fa:	|         moveq #28,d0
   101fc:	|         add.l 48(sp),d0
   10200:	|         move.l 20(sp),-(sp)
   10204:	|         move.l d0,-(sp)
   10206:	|         jsr 150c8 <newCostumeVariable>
   1020c:	|         addq.l #8,sp
    return BR_CONTINUE;
   1020e:	|         moveq #2,d0
}
   10210:	'-------> movea.l (sp)+,a2
   10212:	          movea.l (sp)+,a6
   10214:	          lea 32(sp),sp
   10218:	          rts

0001021a <builtIn_launch>:

builtIn(launch)
{
   1021a:	          lea -20(sp),sp
   1021e:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   10220:	          movea.l 32(sp),a0
   10224:	          move.l 24(a0),d0
   10228:	          move.l d0,-(sp)
   1022a:	          jsr 14dce <getTextFromAnyVar>
   10230:	          addq.l #4,sp
   10232:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   10236:	      ,-- bne.s 1023e <builtIn_launch+0x24>
   10238:	      |   moveq #1,d0
   1023a:	,-----|-- bra.w 1036c <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   1023e:	|     '-> move.l 20(sp),-(sp)
   10242:	|         jsr 2fe <encodeFilename>
   10248:	|         addq.l #4,sp
   1024a:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   1024e:	|         moveq #24,d0
   10250:	|         add.l 32(sp),d0
   10254:	|         move.l d0,-(sp)
   10256:	|         jsr 1517c <trimStack>
   1025c:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   1025e:	|         movea.l 20(sp),a0
   10262:	|         move.b (a0),d0
   10264:	|         cmpi.b #104,d0
   10268:	|  ,----- bne.s 102d2 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   1026a:	|  |      movea.l 20(sp),a0
   1026e:	|  |      addq.l #1,a0
   10270:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   10272:	|  |      cmpi.b #116,d0
   10276:	|  +----- bne.s 102d2 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   10278:	|  |      movea.l 20(sp),a0
   1027c:	|  |      addq.l #2,a0
   1027e:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   10280:	|  |      cmpi.b #116,d0
   10284:	|  +----- bne.s 102d2 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   10286:	|  |      movea.l 20(sp),a0
   1028a:	|  |      addq.l #3,a0
   1028c:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   1028e:	|  |      cmpi.b #112,d0
   10292:	|  +----- bne.s 102d2 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10294:	|  |      movea.l 20(sp),a0
   10298:	|  |      addq.l #4,a0
   1029a:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   1029c:	|  |      cmpi.b #58,d0
   102a0:	|  |  ,-- beq.s 102be <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   102a2:	|  |  |   movea.l 20(sp),a0
   102a6:	|  |  |   addq.l #4,a0
   102a8:	|  |  |   move.b (a0),d0
   102aa:	|  |  |   cmpi.b #115,d0
   102ae:	|  +--|-- bne.s 102d2 <builtIn_launch+0xb8>
   102b0:	|  |  |   movea.l 20(sp),a0
   102b4:	|  |  |   addq.l #5,a0
   102b6:	|  |  |   move.b (a0),d0
   102b8:	|  |  |   cmpi.b #58,d0
   102bc:	|  +--|-- bne.s 102d2 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   102be:	|  |  '-> move.l 20(sp),-(sp)
   102c2:	|  |      jsr b8 <copyString>
   102c8:	|  |      addq.l #4,sp
   102ca:	|  |      move.l d0,1cbe4 <launchMe>
   102d0:	|  |  ,-- bra.s 10324 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   102d2:	|  '--|-> move.l 1ca8e <gamePath>,d0
   102d8:	|     |   pea 19bbf <talk.c.490538ff+0x1b0>
   102de:	|     |   move.l d0,-(sp)
   102e0:	|     |   jsr 13d24 <joinStrings>
   102e6:	|     |   addq.l #8,sp
   102e8:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   102ec:	|     |   move.l 16(sp),-(sp)
   102f0:	|     |   move.l 16(sp),-(sp)
   102f4:	|     |   jsr 13d24 <joinStrings>
   102fa:	|     |   addq.l #8,sp
   102fc:	|     |   move.l d0,1cbe4 <launchMe>
        FreeVec(newText);
   10302:	|     |   move.l 16(sp),8(sp)
   10308:	|     |   move.l 1cb26 <SysBase>,d0
   1030e:	|     |   movea.l d0,a6
   10310:	|     |   movea.l 8(sp),a1
   10314:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   10318:	|     |   move.l 1cbe4 <launchMe>,d0
   1031e:	|     +-- bne.s 10324 <builtIn_launch+0x10a>
   10320:	|     |   moveq #1,d0
   10322:	+-----|-- bra.s 1036c <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   10324:	|     '-> move.l 20(sp),4(sp)
   1032a:	|         move.l 1cb26 <SysBase>,d0
   10330:	|         movea.l d0,a6
   10332:	|         movea.l 4(sp),a1
   10336:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   1033a:	|         clr.l -(sp)
   1033c:	|         jsr 4970 <setGraphicsWindow>
   10342:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   10344:	|         moveq #28,d0
   10346:	|         add.l 32(sp),d0
   1034a:	|         pea 1 <_start+0x1>
   1034e:	|         pea 1 <_start+0x1>
   10352:	|         move.l d0,-(sp)
   10354:	|         jsr 150ea <setVariable>
   1035a:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   1035e:	|         moveq #28,d0
   10360:	|         add.l 32(sp),d0
   10364:	|         move.l d0,1cbe8 <launchResult>

    return BR_KEEP_AND_PAUSE;
   1036a:	|         moveq #0,d0
}
   1036c:	'-------> movea.l (sp)+,a6
   1036e:	          lea 20(sp),sp
   10372:	          rts

00010374 <builtIn_pause>:

builtIn(pause)
{
   10374:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10376:	       movea.l 12(sp),a0
   1037a:	       move.l 24(a0),d0
   1037e:	       move.l d0,-(sp)
   10380:	       pea 1 <_start+0x1>
   10384:	       move.l sp,d0
   10386:	       addq.l #8,d0
   10388:	       move.l d0,-(sp)
   1038a:	       jsr 147f8 <getValueType>
   10390:	       lea 12(sp),sp
   10394:	       tst.w d0
   10396:	   ,-- bne.s 1039c <builtIn_pause+0x28>
   10398:	   |   moveq #1,d0
   1039a:	,--|-- bra.s 103ca <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   1039c:	|  '-> moveq #24,d0
   1039e:	|      add.l 12(sp),d0
   103a2:	|      move.l d0,-(sp)
   103a4:	|      jsr 1517c <trimStack>
   103aa:	|      addq.l #4,sp
	if (theTime > 0) {
   103ac:	|      move.l (sp),d0
   103ae:	|  ,-- ble.s 103c8 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   103b0:	|  |   move.l (sp),d0
   103b2:	|  |   subq.l #1,d0
   103b4:	|  |   movea.l 12(sp),a0
   103b8:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   103bc:	|  |   movea.l 12(sp),a0
   103c0:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   103c4:	|  |   moveq #0,d0
   103c6:	+--|-- bra.s 103ca <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   103c8:	|  '-> moveq #2,d0
}
   103ca:	'----> addq.l #4,sp
   103cc:	       rts

000103ce <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   103ce:	jsr 5104 <completeTimers>
	return BR_CONTINUE;
   103d4:	moveq #2,d0
}
   103d6:	rts

000103d8 <builtIn_callEvent>:

builtIn(callEvent)
{
   103d8:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   103dc:	       movea.l 20(sp),a0
   103e0:	       move.l 24(a0),d0
   103e4:	       move.l d0,-(sp)
   103e6:	       pea 7 <_start+0x7>
   103ea:	       lea 8(sp),a0
   103ee:	       move.l a0,-(sp)
   103f0:	       jsr 147f8 <getValueType>
   103f6:	       lea 12(sp),sp
   103fa:	       tst.w d0
   103fc:	   ,-- bne.s 10404 <builtIn_callEvent+0x2c>
   103fe:	   |   moveq #1,d0
   10400:	,--|-- bra.w 1049a <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10404:	|  '-> moveq #24,d0
   10406:	|      add.l 20(sp),d0
   1040a:	|      move.l d0,-(sp)
   1040c:	|      jsr 1517c <trimStack>
   10412:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10414:	|      movea.l 20(sp),a0
   10418:	|      move.l 24(a0),d0
   1041c:	|      move.l d0,-(sp)
   1041e:	|      pea 7 <_start+0x7>
   10422:	|      moveq #12,d0
   10424:	|      add.l sp,d0
   10426:	|      move.l d0,-(sp)
   10428:	|      jsr 147f8 <getValueType>
   1042e:	|      lea 12(sp),sp
   10432:	|      tst.w d0
   10434:	|  ,-- bne.s 1043a <builtIn_callEvent+0x62>
   10436:	|  |   moveq #1,d0
   10438:	+--|-- bra.s 1049a <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   1043a:	|  '-> moveq #24,d0
   1043c:	|      add.l 20(sp),d0
   10440:	|      move.l d0,-(sp)
   10442:	|      jsr 1517c <trimStack>
   10448:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   1044a:	|      move.l (sp),d1
   1044c:	|      move.l 4(sp),d0
   10450:	|      move.l d1,-(sp)
   10452:	|      move.l d0,-(sp)
   10454:	|      jsr d552 <getCombinationFunction>
   1045a:	|      addq.l #8,sp
   1045c:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   10460:	|  ,-- beq.s 10480 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   10462:	|  |   moveq #28,d0
   10464:	|  |   add.l 20(sp),d0
   10468:	|  |   move.l 8(sp),-(sp)
   1046c:	|  |   pea 2 <_start+0x2>
   10470:	|  |   move.l d0,-(sp)
   10472:	|  |   jsr 150ea <setVariable>
   10478:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   1047c:	|  |   moveq #4,d0
   1047e:	+--|-- bra.s 1049a <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   10480:	|  '-> moveq #28,d0
   10482:	|      add.l 20(sp),d0
   10486:	|      clr.l -(sp)
   10488:	|      pea 1 <_start+0x1>
   1048c:	|      move.l d0,-(sp)
   1048e:	|      jsr 150ea <setVariable>
   10494:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10498:	|      moveq #2,d0
}
   1049a:	'----> lea 12(sp),sp
   1049e:	       rts

000104a0 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   104a0:	move.w #1,1cbf4 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   104a8:	moveq #2,d0
}
   104aa:	rts

000104ac <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   104ac:	moveq #24,d0
   104ae:	add.l 8(sp),d0
   104b2:	move.l d0,-(sp)
   104b4:	jsr 1517c <trimStack>
   104ba:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   104bc:	pea 19bc1 <talk.c.490538ff+0x1b2>
   104c2:	jsr 172d8 <KPrintF>
   104c8:	addq.l #4,sp
	return BR_CONTINUE;
   104ca:	moveq #2,d0
}
   104cc:	rts

000104ce <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   104ce:	pea 19bc1 <talk.c.490538ff+0x1b2>
   104d4:	jsr 172d8 <KPrintF>
   104da:	addq.l #4,sp
	return BR_CONTINUE;
   104dc:	moveq #2,d0
}
   104de:	rts

000104e0 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   104e0:	pea 19bc1 <talk.c.490538ff+0x1b2>
   104e6:	jsr 172d8 <KPrintF>
   104ec:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   104ee:	moveq #2,d0
}
   104f0:	rts

000104f2 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   104f2:	pea 19bc1 <talk.c.490538ff+0x1b2>
   104f8:	jsr 172d8 <KPrintF>
   104fe:	addq.l #4,sp
	return BR_CONTINUE;
   10500:	moveq #2,d0
}
   10502:	rts

00010504 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10504:	pea 19bc1 <talk.c.490538ff+0x1b2>
   1050a:	jsr 172d8 <KPrintF>
   10510:	addq.l #4,sp
	return BR_CONTINUE;
   10512:	moveq #2,d0
}
   10514:	rts

00010516 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10516:	pea 19bc1 <talk.c.490538ff+0x1b2>
   1051c:	jsr 172d8 <KPrintF>
   10522:	addq.l #4,sp
	return BR_CONTINUE;
   10524:	moveq #2,d0
}
   10526:	rts

00010528 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   10528:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1052c:	       movea.l 20(sp),a0
   10530:	       move.l 24(a0),d0
   10534:	       move.l d0,-(sp)
   10536:	       pea 1 <_start+0x1>
   1053a:	       moveq #16,d0
   1053c:	       add.l sp,d0
   1053e:	       move.l d0,-(sp)
   10540:	       jsr 147f8 <getValueType>
   10546:	       lea 12(sp),sp
   1054a:	       tst.w d0
   1054c:	   ,-- bne.s 10554 <builtIn_startMusic+0x2c>
   1054e:	   |   moveq #1,d0
   10550:	,--|-- bra.w 105f4 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10554:	|  '-> moveq #24,d0
   10556:	|      add.l 20(sp),d0
   1055a:	|      move.l d0,-(sp)
   1055c:	|      jsr 1517c <trimStack>
   10562:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10564:	|      movea.l 20(sp),a0
   10568:	|      move.l 24(a0),d0
   1056c:	|      move.l d0,-(sp)
   1056e:	|      pea 1 <_start+0x1>
   10572:	|      moveq #12,d0
   10574:	|      add.l sp,d0
   10576:	|      move.l d0,-(sp)
   10578:	|      jsr 147f8 <getValueType>
   1057e:	|      lea 12(sp),sp
   10582:	|      tst.w d0
   10584:	|  ,-- bne.s 1058a <builtIn_startMusic+0x62>
   10586:	|  |   moveq #1,d0
   10588:	+--|-- bra.s 105f4 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1058a:	|  '-> moveq #24,d0
   1058c:	|      add.l 20(sp),d0
   10590:	|      move.l d0,-(sp)
   10592:	|      jsr 1517c <trimStack>
   10598:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1059a:	|      movea.l 20(sp),a0
   1059e:	|      move.l 24(a0),d0
   105a2:	|      move.l d0,-(sp)
   105a4:	|      pea 5 <_start+0x5>
   105a8:	|      lea 8(sp),a0
   105ac:	|      move.l a0,-(sp)
   105ae:	|      jsr 147f8 <getValueType>
   105b4:	|      lea 12(sp),sp
   105b8:	|      tst.w d0
   105ba:	|  ,-- bne.s 105c0 <builtIn_startMusic+0x98>
   105bc:	|  |   moveq #1,d0
   105be:	+--|-- bra.s 105f4 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   105c0:	|  '-> moveq #24,d0
   105c2:	|      add.l 20(sp),d0
   105c6:	|      move.l d0,-(sp)
   105c8:	|      jsr 1517c <trimStack>
   105ce:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   105d0:	|      movea.l 8(sp),a0
   105d4:	|      move.l 4(sp),d1
   105d8:	|      move.l (sp),d0
   105da:	|      move.l a0,-(sp)
   105dc:	|      move.l d1,-(sp)
   105de:	|      move.l d0,-(sp)
   105e0:	|      jsr d154 <playMOD>
   105e6:	|      lea 12(sp),sp
   105ea:	|      tst.w d0
   105ec:	|  ,-- bne.s 105f2 <builtIn_startMusic+0xca>
   105ee:	|  |   moveq #2,d0
   105f0:	+--|-- bra.s 105f4 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   105f2:	|  '-> moveq #2,d0
}
   105f4:	'----> lea 12(sp),sp
   105f8:	       rts

000105fa <builtIn_stopMusic>:

builtIn(stopMusic)
{
   105fa:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   105fc:	       movea.l 12(sp),a0
   10600:	       move.l 24(a0),d0
   10604:	       move.l d0,-(sp)
   10606:	       pea 1 <_start+0x1>
   1060a:	       move.l sp,d0
   1060c:	       addq.l #8,d0
   1060e:	       move.l d0,-(sp)
   10610:	       jsr 147f8 <getValueType>
   10616:	       lea 12(sp),sp
   1061a:	       tst.w d0
   1061c:	   ,-- bne.s 10622 <builtIn_stopMusic+0x28>
   1061e:	   |   moveq #1,d0
   10620:	,--|-- bra.s 10640 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   10622:	|  '-> moveq #24,d0
   10624:	|      add.l 12(sp),d0
   10628:	|      move.l d0,-(sp)
   1062a:	|      jsr 1517c <trimStack>
   10630:	|      addq.l #4,sp
	stopMOD (v);
   10632:	|      move.l (sp),d0
   10634:	|      move.l d0,-(sp)
   10636:	|      jsr d1f0 <stopMOD>
   1063c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1063e:	|      moveq #2,d0
}
   10640:	'----> addq.l #4,sp
   10642:	       rts

00010644 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   10644:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10646:	       movea.l 16(sp),a0
   1064a:	       move.l 24(a0),d0
   1064e:	       move.l d0,-(sp)
   10650:	       pea 1 <_start+0x1>
   10654:	       move.l sp,d0
   10656:	       addq.l #8,d0
   10658:	       move.l d0,-(sp)
   1065a:	       jsr 147f8 <getValueType>
   10660:	       lea 12(sp),sp
   10664:	       tst.w d0
   10666:	   ,-- bne.s 1066c <builtIn_setMusicVolume+0x28>
   10668:	   |   moveq #1,d0
   1066a:	,--|-- bra.s 106c6 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   1066c:	|  '-> moveq #24,d0
   1066e:	|      add.l 16(sp),d0
   10672:	|      move.l d0,-(sp)
   10674:	|      jsr 1517c <trimStack>
   1067a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1067c:	|      movea.l 16(sp),a0
   10680:	|      move.l 24(a0),d0
   10684:	|      move.l d0,-(sp)
   10686:	|      pea 1 <_start+0x1>
   1068a:	|      moveq #12,d0
   1068c:	|      add.l sp,d0
   1068e:	|      move.l d0,-(sp)
   10690:	|      jsr 147f8 <getValueType>
   10696:	|      lea 12(sp),sp
   1069a:	|      tst.w d0
   1069c:	|  ,-- bne.s 106a2 <builtIn_setMusicVolume+0x5e>
   1069e:	|  |   moveq #1,d0
   106a0:	+--|-- bra.s 106c6 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   106a2:	|  '-> moveq #24,d0
   106a4:	|      add.l 16(sp),d0
   106a8:	|      move.l d0,-(sp)
   106aa:	|      jsr 1517c <trimStack>
   106b0:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   106b2:	|      move.l (sp),d1
   106b4:	|      move.l 4(sp),d0
   106b8:	|      move.l d1,-(sp)
   106ba:	|      move.l d0,-(sp)
   106bc:	|      jsr d1d6 <setMusicVolume>
   106c2:	|      addq.l #8,sp
	return BR_CONTINUE;
   106c4:	|      moveq #2,d0
}
   106c6:	'----> addq.l #8,sp
   106c8:	       rts

000106ca <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   106ca:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106cc:	       movea.l 12(sp),a0
   106d0:	       move.l 24(a0),d0
   106d4:	       move.l d0,-(sp)
   106d6:	       pea 1 <_start+0x1>
   106da:	       move.l sp,d0
   106dc:	       addq.l #8,d0
   106de:	       move.l d0,-(sp)
   106e0:	       jsr 147f8 <getValueType>
   106e6:	       lea 12(sp),sp
   106ea:	       tst.w d0
   106ec:	   ,-- bne.s 106f2 <builtIn_setDefaultMusicVolume+0x28>
   106ee:	   |   moveq #1,d0
   106f0:	,--|-- bra.s 10710 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   106f2:	|  '-> moveq #24,d0
   106f4:	|      add.l 12(sp),d0
   106f8:	|      move.l d0,-(sp)
   106fa:	|      jsr 1517c <trimStack>
   10700:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10702:	|      move.l (sp),d0
   10704:	|      move.l d0,-(sp)
   10706:	|      jsr d1ba <setDefaultMusicVolume>
   1070c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1070e:	|      moveq #2,d0
}
   10710:	'----> addq.l #4,sp
   10712:	       rts

00010714 <builtIn_playSound>:

builtIn(playSound)
{
   10714:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10716:	       movea.l 12(sp),a0
   1071a:	       move.l 24(a0),d0
   1071e:	       move.l d0,-(sp)
   10720:	       pea 5 <_start+0x5>
   10724:	       move.l sp,d0
   10726:	       addq.l #8,d0
   10728:	       move.l d0,-(sp)
   1072a:	       jsr 147f8 <getValueType>
   10730:	       lea 12(sp),sp
   10734:	       tst.w d0
   10736:	   ,-- bne.s 1073c <builtIn_playSound+0x28>
   10738:	   |   moveq #1,d0
   1073a:	,--|-- bra.s 10764 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   1073c:	|  '-> moveq #24,d0
   1073e:	|      add.l 12(sp),d0
   10742:	|      move.l d0,-(sp)
   10744:	|      jsr 1517c <trimStack>
   1074a:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   1074c:	|      move.l (sp),d0
   1074e:	|      clr.l -(sp)
   10750:	|      move.l d0,-(sp)
   10752:	|      jsr d1de <startSound>
   10758:	|      addq.l #8,sp
   1075a:	|      tst.w d0
   1075c:	|  ,-- bne.s 10762 <builtIn_playSound+0x4e>
   1075e:	|  |   moveq #2,d0
   10760:	+--|-- bra.s 10764 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   10762:	|  '-> moveq #2,d0
}
   10764:	'----> addq.l #4,sp
   10766:	       rts

00010768 <builtIn_loopSound>:

builtIn(loopSound)
{
   10768:	             lea -28(sp),sp
   1076c:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   1076e:	             tst.l 36(sp)
   10772:	         ,-- bgt.s 10788 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   10774:	         |   pea 19be4 <talk.c.490538ff+0x1d5>
   1077a:	         |   jsr 172d8 <KPrintF>
   10780:	         |   addq.l #4,sp
		return BR_ERROR;
   10782:	         |   moveq #1,d0
   10784:	,--------|-- bra.w 10944 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   10788:	|        '-> moveq #1,d0
   1078a:	|            cmp.l 36(sp),d0
   1078e:	|     ,----- blt.s 107ea <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10790:	|     |      movea.l 40(sp),a0
   10794:	|     |      move.l 24(a0),d0
   10798:	|     |      move.l d0,-(sp)
   1079a:	|     |      pea 5 <_start+0x5>
   1079e:	|     |      lea 16(sp),a0
   107a2:	|     |      move.l a0,-(sp)
   107a4:	|     |      jsr 147f8 <getValueType>
   107aa:	|     |      lea 12(sp),sp
   107ae:	|     |      tst.w d0
   107b0:	|     |  ,-- bne.s 107b8 <builtIn_loopSound+0x50>
   107b2:	|     |  |   moveq #1,d0
   107b4:	+-----|--|-- bra.w 10944 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   107b8:	|     |  '-> moveq #24,d0
   107ba:	|     |      add.l 40(sp),d0
   107be:	|     |      move.l d0,-(sp)
   107c0:	|     |      jsr 1517c <trimStack>
   107c6:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   107c8:	|     |      move.l 8(sp),d0
   107cc:	|     |      pea 1 <_start+0x1>
   107d0:	|     |      move.l d0,-(sp)
   107d2:	|     |      jsr d1de <startSound>
   107d8:	|     |      addq.l #8,sp
   107da:	|     |      tst.w d0
   107dc:	|     |  ,-- bne.s 107e4 <builtIn_loopSound+0x7c>
   107de:	|     |  |   moveq #2,d0
   107e0:	+-----|--|-- bra.w 10944 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   107e4:	|     |  '-> moveq #2,d0
   107e6:	+-----|----- bra.w 10944 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   107ea:	|     '----> moveq #2,d1
   107ec:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   107f0:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   107f4:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   107f8:	|            movea.l 40(sp),a0
   107fc:	|            movea.l 24(a0),a0
   10800:	|            move.l (a0),d0
   10802:	|            moveq #5,d1
   10804:	|            cmp.l d0,d1
   10806:	|  ,-------- beq.w 108de <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   1080a:	|  |         movea.l 40(sp),a0
   1080e:	|  |         move.l 24(a0),d0
   10812:	|  |         move.l d0,-(sp)
   10814:	|  |         pea 1 <_start+0x1>
   10818:	|  |         lea 12(sp),a0
   1081c:	|  |         move.l a0,-(sp)
   1081e:	|  |         jsr 147f8 <getValueType>
   10824:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10828:	|  |         moveq #24,d0
   1082a:	|  |         add.l 40(sp),d0
   1082e:	|  |         move.l d0,-(sp)
   10830:	|  |         jsr 1517c <trimStack>
   10836:	|  |         addq.l #4,sp
			numParams--;
   10838:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   1083c:	|  +-------- bra.w 108de <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10840:	|  |  ,----> movea.l 40(sp),a0
   10844:	|  |  |      move.l 24(a0),d0
   10848:	|  |  |      move.l d0,-(sp)
   1084a:	|  |  |      pea 5 <_start+0x5>
   1084e:	|  |  |      lea 16(sp),a0
   10852:	|  |  |      move.l a0,-(sp)
   10854:	|  |  |      jsr 147f8 <getValueType>
   1085a:	|  |  |      lea 12(sp),sp
   1085e:	|  |  |      tst.w d0
   10860:	|  |  |  ,-- bne.s 10876 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   10862:	|  |  |  |   pea 19c22 <talk.c.490538ff+0x213>
   10868:	|  |  |  |   jsr 172d8 <KPrintF>
   1086e:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10870:	|  |  |  |   moveq #1,d0
   10872:	+--|--|--|-- bra.w 10944 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10876:	|  |  |  '-> moveq #20,d0
   10878:	|  |  |      move.l d0,20(sp)
   1087c:	|  |  |      clr.l 16(sp)
   10880:	|  |  |      move.l 1cb26 <SysBase>,d0
   10886:	|  |  |      movea.l d0,a6
   10888:	|  |  |      move.l 20(sp),d0
   1088c:	|  |  |      move.l 16(sp),d1
   10890:	|  |  |      jsr -684(a6)
   10894:	|  |  |      move.l d0,12(sp)
   10898:	|  |  |      move.l 12(sp),d0
   1089c:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   108a0:	|  |  |  ,-- bne.s 108a8 <builtIn_loopSound+0x140>
   108a2:	|  |  |  |   moveq #1,d0
   108a4:	+--|--|--|-- bra.w 10944 <builtIn_loopSound+0x1dc>

			s->next = old;
   108a8:	|  |  |  '-> movea.l 28(sp),a0
   108ac:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   108b2:	|  |  |      movea.l 28(sp),a0
   108b6:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   108ba:	|  |  |      move.l 8(sp),d0
   108be:	|  |  |      movea.l 28(sp),a0
   108c2:	|  |  |      move.l d0,(a0)
			old = s;
   108c4:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   108ca:	|  |  |      moveq #24,d0
   108cc:	|  |  |      add.l 40(sp),d0
   108d0:	|  |  |      move.l d0,-(sp)
   108d2:	|  |  |      jsr 1517c <trimStack>
   108d8:	|  |  |      addq.l #4,sp
			numParams--;
   108da:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   108de:	|  '--|----> tst.l 36(sp)
   108e2:	|     '----- bne.w 10840 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   108e6:	|        ,-- bra.s 108f2 <builtIn_loopSound+0x18a>
   108e8:	|     ,--|-> movea.l 28(sp),a0
   108ec:	|     |  |   move.l 4(a0),28(sp)
   108f2:	|     |  '-> movea.l 28(sp),a0
   108f6:	|     |      move.l 4(a0),d0
   108fa:	|     '----- bne.s 108e8 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   108fc:	|            move.l 4(sp),d0
   10900:	|            moveq #1,d1
   10902:	|            cmp.l d0,d1
   10904:	|     ,----- bge.s 1091c <builtIn_loopSound+0x1b4>
			s->next = old;
   10906:	|     |      movea.l 28(sp),a0
   1090a:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10910:	|     |      movea.l 24(sp),a0
   10914:	|     |      move.l 28(sp),8(a0)
   1091a:	|     |  ,-- bra.s 1092c <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   1091c:	|     '--|-> move.l 4(sp),d0
   10920:	|        +-- beq.s 1092c <builtIn_loopSound+0x1c4>
			s->next = s;
   10922:	|        |   movea.l 28(sp),a0
   10926:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   1092c:	|        '-> movea.l 24(sp),a0
   10930:	|            moveq #-1,d0
   10932:	|            move.l d0,16(a0)
		playSoundList(old);
   10936:	|            move.l 24(sp),-(sp)
   1093a:	|            jsr d158 <playSoundList>
   10940:	|            addq.l #4,sp
		return BR_CONTINUE;
   10942:	|            moveq #2,d0
	}
}
   10944:	'----------> movea.l (sp)+,a6
   10946:	             lea 28(sp),sp
   1094a:	             rts

0001094c <builtIn_stopSound>:

builtIn(stopSound)
{
   1094c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1094e:	       movea.l 12(sp),a0
   10952:	       move.l 24(a0),d0
   10956:	       move.l d0,-(sp)
   10958:	       pea 5 <_start+0x5>
   1095c:	       move.l sp,d0
   1095e:	       addq.l #8,d0
   10960:	       move.l d0,-(sp)
   10962:	       jsr 147f8 <getValueType>
   10968:	       lea 12(sp),sp
   1096c:	       tst.w d0
   1096e:	   ,-- bne.s 10974 <builtIn_stopSound+0x28>
   10970:	   |   moveq #1,d0
   10972:	,--|-- bra.s 10992 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10974:	|  '-> moveq #24,d0
   10976:	|      add.l 12(sp),d0
   1097a:	|      move.l d0,-(sp)
   1097c:	|      jsr 1517c <trimStack>
   10982:	|      addq.l #4,sp
	huntKillSound (v);
   10984:	|      move.l (sp),d0
   10986:	|      move.l d0,-(sp)
   10988:	|      jsr d150 <huntKillSound>
   1098e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10990:	|      moveq #2,d0
}
   10992:	'----> addq.l #4,sp
   10994:	       rts

00010996 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10996:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10998:	       movea.l 12(sp),a0
   1099c:	       move.l 24(a0),d0
   109a0:	       move.l d0,-(sp)
   109a2:	       pea 1 <_start+0x1>
   109a6:	       move.l sp,d0
   109a8:	       addq.l #8,d0
   109aa:	       move.l d0,-(sp)
   109ac:	       jsr 147f8 <getValueType>
   109b2:	       lea 12(sp),sp
   109b6:	       tst.w d0
   109b8:	   ,-- bne.s 109be <builtIn_setDefaultSoundVolume+0x28>
   109ba:	   |   moveq #1,d0
   109bc:	,--|-- bra.s 109dc <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   109be:	|  '-> moveq #24,d0
   109c0:	|      add.l 12(sp),d0
   109c4:	|      move.l d0,-(sp)
   109c6:	|      jsr 1517c <trimStack>
   109cc:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   109ce:	|      move.l (sp),d0
   109d0:	|      move.l d0,-(sp)
   109d2:	|      jsr d1c6 <setDefaultSoundVolume>
   109d8:	|      addq.l #4,sp
	return BR_CONTINUE;
   109da:	|      moveq #2,d0
}
   109dc:	'----> addq.l #4,sp
   109de:	       rts

000109e0 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   109e0:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109e2:	       movea.l 16(sp),a0
   109e6:	       move.l 24(a0),d0
   109ea:	       move.l d0,-(sp)
   109ec:	       pea 1 <_start+0x1>
   109f0:	       move.l sp,d0
   109f2:	       addq.l #8,d0
   109f4:	       move.l d0,-(sp)
   109f6:	       jsr 147f8 <getValueType>
   109fc:	       lea 12(sp),sp
   10a00:	       tst.w d0
   10a02:	   ,-- bne.s 10a08 <builtIn_setSoundVolume+0x28>
   10a04:	   |   moveq #1,d0
   10a06:	,--|-- bra.s 10a62 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10a08:	|  '-> moveq #24,d0
   10a0a:	|      add.l 16(sp),d0
   10a0e:	|      move.l d0,-(sp)
   10a10:	|      jsr 1517c <trimStack>
   10a16:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a18:	|      movea.l 16(sp),a0
   10a1c:	|      move.l 24(a0),d0
   10a20:	|      move.l d0,-(sp)
   10a22:	|      pea 5 <_start+0x5>
   10a26:	|      moveq #12,d0
   10a28:	|      add.l sp,d0
   10a2a:	|      move.l d0,-(sp)
   10a2c:	|      jsr 147f8 <getValueType>
   10a32:	|      lea 12(sp),sp
   10a36:	|      tst.w d0
   10a38:	|  ,-- bne.s 10a3e <builtIn_setSoundVolume+0x5e>
   10a3a:	|  |   moveq #1,d0
   10a3c:	+--|-- bra.s 10a62 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10a3e:	|  '-> moveq #24,d0
   10a40:	|      add.l 16(sp),d0
   10a44:	|      move.l d0,-(sp)
   10a46:	|      jsr 1517c <trimStack>
   10a4c:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10a4e:	|      move.l (sp),d1
   10a50:	|      move.l 4(sp),d0
   10a54:	|      move.l d1,-(sp)
   10a56:	|      move.l d0,-(sp)
   10a58:	|      jsr d1da <setSoundVolume>
   10a5e:	|      addq.l #8,sp
	return BR_CONTINUE;
   10a60:	|      moveq #2,d0
}
   10a62:	'----> addq.l #8,sp
   10a64:	       rts

00010a66 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10a66:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a6a:	       movea.l 20(sp),a0
   10a6e:	       move.l 24(a0),d0
   10a72:	       move.l d0,-(sp)
   10a74:	       pea 1 <_start+0x1>
   10a78:	       moveq #12,d0
   10a7a:	       add.l sp,d0
   10a7c:	       move.l d0,-(sp)
   10a7e:	       jsr 147f8 <getValueType>
   10a84:	       lea 12(sp),sp
   10a88:	       tst.w d0
   10a8a:	   ,-- bne.s 10a92 <builtIn_setSoundLoopPoints+0x2c>
   10a8c:	   |   moveq #1,d0
   10a8e:	,--|-- bra.w 10b2a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10a92:	|  '-> moveq #24,d0
   10a94:	|      add.l 20(sp),d0
   10a98:	|      move.l d0,-(sp)
   10a9a:	|      jsr 1517c <trimStack>
   10aa0:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10aa2:	|      movea.l 20(sp),a0
   10aa6:	|      move.l 24(a0),d0
   10aaa:	|      move.l d0,-(sp)
   10aac:	|      pea 1 <_start+0x1>
   10ab0:	|      lea 8(sp),a0
   10ab4:	|      move.l a0,-(sp)
   10ab6:	|      jsr 147f8 <getValueType>
   10abc:	|      lea 12(sp),sp
   10ac0:	|      tst.w d0
   10ac2:	|  ,-- bne.s 10ac8 <builtIn_setSoundLoopPoints+0x62>
   10ac4:	|  |   moveq #1,d0
   10ac6:	+--|-- bra.s 10b2a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10ac8:	|  '-> moveq #24,d0
   10aca:	|      add.l 20(sp),d0
   10ace:	|      move.l d0,-(sp)
   10ad0:	|      jsr 1517c <trimStack>
   10ad6:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ad8:	|      movea.l 20(sp),a0
   10adc:	|      move.l 24(a0),d0
   10ae0:	|      move.l d0,-(sp)
   10ae2:	|      pea 5 <_start+0x5>
   10ae6:	|      moveq #16,d0
   10ae8:	|      add.l sp,d0
   10aea:	|      move.l d0,-(sp)
   10aec:	|      jsr 147f8 <getValueType>
   10af2:	|      lea 12(sp),sp
   10af6:	|      tst.w d0
   10af8:	|  ,-- bne.s 10afe <builtIn_setSoundLoopPoints+0x98>
   10afa:	|  |   moveq #1,d0
   10afc:	+--|-- bra.s 10b2a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10afe:	|  '-> moveq #24,d0
   10b00:	|      add.l 20(sp),d0
   10b04:	|      move.l d0,-(sp)
   10b06:	|      jsr 1517c <trimStack>
   10b0c:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10b0e:	|      movea.l 4(sp),a0
   10b12:	|      move.l (sp),d1
   10b14:	|      move.l 8(sp),d0
   10b18:	|      move.l a0,-(sp)
   10b1a:	|      move.l d1,-(sp)
   10b1c:	|      move.l d0,-(sp)
   10b1e:	|      jsr d1d2 <setSoundLoop>
   10b24:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10b28:	|      moveq #2,d0
}
   10b2a:	'----> lea 12(sp),sp
   10b2e:	       rts

00010b30 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10b30:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10b32:	          movea.l 12(sp),a0
   10b36:	          movea.l 24(a0),a0
   10b3a:	          move.l (a0),d0
   10b3c:	          moveq #5,d1
   10b3e:	          cmp.l d0,d1
   10b40:	,-------- bne.s 10b84 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10b42:	|         movea.l 12(sp),a0
   10b46:	|         move.l 24(a0),d0
   10b4a:	|         move.l d0,-(sp)
   10b4c:	|         pea 5 <_start+0x5>
   10b50:	|         move.l sp,d0
   10b52:	|         addq.l #8,d0
   10b54:	|         move.l d0,-(sp)
   10b56:	|         jsr 147f8 <getValueType>
   10b5c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10b60:	|         moveq #24,d0
   10b62:	|         add.l 12(sp),d0
   10b66:	|         move.l d0,-(sp)
   10b68:	|         jsr 1517c <trimStack>
   10b6e:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10b70:	|         move.l (sp),d0
   10b72:	|         move.l d0,-(sp)
   10b74:	|         jsr 16a82 <setFloor>
   10b7a:	|         addq.l #4,sp
   10b7c:	|         tst.w d0
   10b7e:	|  ,----- bne.s 10b9a <builtIn_setFloor+0x6a>
   10b80:	|  |      moveq #1,d0
   10b82:	|  |  ,-- bra.s 10b9c <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10b84:	'--|--|-> moveq #24,d0
   10b86:	   |  |   add.l 12(sp),d0
   10b8a:	   |  |   move.l d0,-(sp)
   10b8c:	   |  |   jsr 1517c <trimStack>
   10b92:	   |  |   addq.l #4,sp
		setFloorNull ();
   10b94:	   |  |   jsr 171fc <setFloorNull>
	}
	return BR_CONTINUE;
   10b9a:	   '--|-> moveq #2,d0
}
   10b9c:	      '-> addq.l #4,sp
   10b9e:	          rts

00010ba0 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10ba0:	jsr 162fe <drawFloor>
	return BR_CONTINUE;
   10ba6:	moveq #2,d0
}
   10ba8:	rts

00010baa <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10baa:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10bac:	          movea.l 12(sp),a0
   10bb0:	          movea.l 24(a0),a0
   10bb4:	          move.l (a0),d0
   10bb6:	          moveq #5,d1
   10bb8:	          cmp.l d0,d1
   10bba:	,-------- bne.s 10bfe <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10bbc:	|         movea.l 12(sp),a0
   10bc0:	|         move.l 24(a0),d0
   10bc4:	|         move.l d0,-(sp)
   10bc6:	|         pea 5 <_start+0x5>
   10bca:	|         move.l sp,d0
   10bcc:	|         addq.l #8,d0
   10bce:	|         move.l d0,-(sp)
   10bd0:	|         jsr 147f8 <getValueType>
   10bd6:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10bda:	|         moveq #24,d0
   10bdc:	|         add.l 12(sp),d0
   10be0:	|         move.l d0,-(sp)
   10be2:	|         jsr 1517c <trimStack>
   10be8:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10bea:	|         move.l (sp),d0
   10bec:	|         move.l d0,-(sp)
   10bee:	|         jsr 8680 <setZBuffer>
   10bf4:	|         addq.l #4,sp
   10bf6:	|         tst.w d0
   10bf8:	|  ,----- bne.s 10c14 <builtIn_setZBuffer+0x6a>
   10bfa:	|  |      moveq #1,d0
   10bfc:	|  |  ,-- bra.s 10c16 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10bfe:	'--|--|-> moveq #24,d0
   10c00:	   |  |   add.l 12(sp),d0
   10c04:	   |  |   move.l d0,-(sp)
   10c06:	   |  |   jsr 1517c <trimStack>
   10c0c:	   |  |   addq.l #4,sp
		killZBuffer ();
   10c0e:	   |  |   jsr 8634 <killZBuffer>
	}
	return BR_CONTINUE;
   10c14:	   '--|-> moveq #2,d0
}
   10c16:	      '-> addq.l #4,sp
   10c18:	          rts

00010c1a <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10c1a:	pea 19c59 <talk.c.490538ff+0x24a>
   10c20:	jsr 172d8 <KPrintF>
   10c26:	addq.l #4,sp
	return BR_CONTINUE;
   10c28:	moveq #2,d0
}
   10c2a:	rts

00010c2c <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c2c:	          movea.l 8(sp),a0
   10c30:	          move.l 24(a0),d0
   10c34:	          move.l d0,-(sp)
   10c36:	          pea 1 <_start+0x1>
   10c3a:	          pea 1cbf0 <speechMode>
   10c40:	          jsr 147f8 <getValueType>
   10c46:	          lea 12(sp),sp
   10c4a:	          tst.w d0
   10c4c:	      ,-- bne.s 10c52 <builtIn_setSpeechMode+0x26>
   10c4e:	      |   moveq #1,d0
   10c50:	,-----|-- bra.s 10c8a <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10c52:	|     '-> moveq #24,d0
   10c54:	|         add.l 8(sp),d0
   10c58:	|         move.l d0,-(sp)
   10c5a:	|         jsr 1517c <trimStack>
   10c60:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10c62:	|         move.l 1cbf0 <speechMode>,d0
   10c68:	|     ,-- bmi.s 10c76 <builtIn_setSpeechMode+0x4a>
   10c6a:	|     |   move.l 1cbf0 <speechMode>,d0
   10c70:	|     |   moveq #2,d1
   10c72:	|     |   cmp.l d0,d1
   10c74:	|  ,--|-- bge.s 10c88 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10c76:	|  |  '-> pea 19c72 <talk.c.490538ff+0x263>
   10c7c:	|  |      jsr 172d8 <KPrintF>
   10c82:	|  |      addq.l #4,sp
		return BR_ERROR;
   10c84:	|  |      moveq #1,d0
   10c86:	+--|----- bra.s 10c8a <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10c88:	|  '----> moveq #2,d0
}
   10c8a:	'-------> rts

00010c8c <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10c8c:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10c8e:	       jsr 3f02 <isThereAnySpeechGoingOn>
   10c94:	       move.l d0,(sp)
	if (i == -1) {
   10c96:	       moveq #-1,d0
   10c98:	       cmp.l (sp),d0
   10c9a:	,----- bne.s 10cb6 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10c9c:	|      moveq #28,d0
   10c9e:	|      add.l 12(sp),d0
   10ca2:	|      clr.l -(sp)
   10ca4:	|      pea 1 <_start+0x1>
   10ca8:	|      move.l d0,-(sp)
   10caa:	|      jsr 150ea <setVariable>
   10cb0:	|      lea 12(sp),sp
   10cb4:	|  ,-- bra.s 10cce <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10cb6:	'--|-> moveq #28,d0
   10cb8:	   |   add.l 12(sp),d0
   10cbc:	   |   move.l (sp),-(sp)
   10cbe:	   |   pea 7 <_start+0x7>
   10cc2:	   |   move.l d0,-(sp)
   10cc4:	   |   jsr 150ea <setVariable>
   10cca:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10cce:	   '-> moveq #2,d0
}
   10cd0:	       addq.l #4,sp
   10cd2:	       rts

00010cd4 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10cd4:	jsr 6a2e <killSpeechTimers>
	return BR_CONTINUE;
   10cda:	moveq #2,d0
}
   10cdc:	rts

00010cde <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10cde:	       move.l 1cc36 <overRegion>,d0
   10ce4:	,----- beq.s 10d0e <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10ce6:	|      movea.l 1cc36 <overRegion>,a0
   10cec:	|      movea.l 28(a0),a0
   10cf0:	|      move.l 4(a0),d1
   10cf4:	|      moveq #28,d0
   10cf6:	|      add.l 8(sp),d0
   10cfa:	|      move.l d1,-(sp)
   10cfc:	|      pea 7 <_start+0x7>
   10d00:	|      move.l d0,-(sp)
   10d02:	|      jsr 150ea <setVariable>
   10d08:	|      lea 12(sp),sp
   10d0c:	|  ,-- bra.s 10d26 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10d0e:	'--|-> moveq #28,d0
   10d10:	   |   add.l 8(sp),d0
   10d14:	   |   clr.l -(sp)
   10d16:	   |   pea 1 <_start+0x1>
   10d1a:	   |   move.l d0,-(sp)
   10d1c:	   |   jsr 150ea <setVariable>
   10d22:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10d26:	   '-> moveq #2,d0
}
   10d28:	       rts

00010d2a <builtIn_rename>:

builtIn(rename)
{
   10d2a:	       lea -16(sp),sp
   10d2e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10d30:	       movea.l 28(sp),a0
   10d34:	       move.l 24(a0),d0
   10d38:	       move.l d0,-(sp)
   10d3a:	       jsr 14dce <getTextFromAnyVar>
   10d40:	       addq.l #4,sp
   10d42:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10d46:	   ,-- bne.s 10d4c <builtIn_rename+0x22>
   10d48:	   |   moveq #1,d0
   10d4a:	,--|-- bra.s 10dc6 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10d4c:	|  '-> moveq #24,d0
   10d4e:	|      add.l 28(sp),d0
   10d52:	|      move.l d0,-(sp)
   10d54:	|      jsr 1517c <trimStack>
   10d5a:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10d5c:	|      movea.l 28(sp),a0
   10d60:	|      move.l 24(a0),d0
   10d64:	|      move.l d0,-(sp)
   10d66:	|      pea 7 <_start+0x7>
   10d6a:	|      lea 12(sp),a0
   10d6e:	|      move.l a0,-(sp)
   10d70:	|      jsr 147f8 <getValueType>
   10d76:	|      lea 12(sp),sp
   10d7a:	|      tst.w d0
   10d7c:	|  ,-- bne.s 10d82 <builtIn_rename+0x58>
   10d7e:	|  |   moveq #1,d0
   10d80:	+--|-- bra.s 10dc6 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10d82:	|  '-> moveq #24,d0
   10d84:	|      add.l 28(sp),d0
   10d88:	|      move.l d0,-(sp)
   10d8a:	|      jsr 1517c <trimStack>
   10d90:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10d92:	|      move.l 4(sp),d0
   10d96:	|      move.l d0,-(sp)
   10d98:	|      jsr d51e <findObjectType>
   10d9e:	|      addq.l #4,sp
   10da0:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10da4:	|      movea.l 12(sp),a0
   10da8:	|      move.l (a0),8(sp)
   10dac:	|      move.l 1cb26 <SysBase>,d0
   10db2:	|      movea.l d0,a6
   10db4:	|      movea.l 8(sp),a1
   10db8:	|      jsr -690(a6)
	o->screenName = newText;
   10dbc:	|      movea.l 12(sp),a0
   10dc0:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10dc4:	|      moveq #2,d0
}
   10dc6:	'----> movea.l (sp)+,a6
   10dc8:	       lea 16(sp),sp
   10dcc:	       rts

00010dce <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10dce:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10dd2:	          movea.l 20(sp),a0
   10dd6:	          move.l 24(a0),d0
   10dda:	          move.l d0,-(sp)
   10ddc:	          pea 7 <_start+0x7>
   10de0:	          lea 8(sp),a0
   10de4:	          move.l a0,-(sp)
   10de6:	          jsr 147f8 <getValueType>
   10dec:	          lea 12(sp),sp
   10df0:	          tst.w d0
   10df2:	      ,-- bne.s 10dfa <builtIn_getObjectX+0x2c>
   10df4:	      |   moveq #1,d0
   10df6:	,-----|-- bra.w 10e96 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10dfa:	|     '-> moveq #24,d0
   10dfc:	|         add.l 20(sp),d0
   10e00:	|         move.l d0,-(sp)
   10e02:	|         jsr 1517c <trimStack>
   10e08:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10e0a:	|         move.l (sp),d0
   10e0c:	|         move.l d0,-(sp)
   10e0e:	|         jsr a5b0 <findPerson>
   10e14:	|         addq.l #4,sp
   10e16:	|         move.l d0,8(sp)
	if (pers) {
   10e1a:	|     ,-- beq.s 10e48 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10e1c:	|     |   movea.l 8(sp),a0
   10e20:	|     |   move.l (a0),d0
   10e22:	|     |   move.l d0,-(sp)
   10e24:	|     |   jsr 176a2 <__fixsfsi>
   10e2a:	|     |   addq.l #4,sp
   10e2c:	|     |   move.l d0,d1
   10e2e:	|     |   moveq #28,d0
   10e30:	|     |   add.l 20(sp),d0
   10e34:	|     |   move.l d1,-(sp)
   10e36:	|     |   pea 1 <_start+0x1>
   10e3a:	|     |   move.l d0,-(sp)
   10e3c:	|     |   jsr 150ea <setVariable>
   10e42:	|     |   lea 12(sp),sp
   10e46:	|  ,--|-- bra.s 10e94 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10e48:	|  |  '-> move.l (sp),d0
   10e4a:	|  |      move.l d0,-(sp)
   10e4c:	|  |      jsr 15aba <getRegionForObject>
   10e52:	|  |      addq.l #4,sp
   10e54:	|  |      move.l d0,4(sp)
		if (la) {
   10e58:	|  |  ,-- beq.s 10e7c <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10e5a:	|  |  |   movea.l 4(sp),a0
   10e5e:	|  |  |   move.l 16(a0),d1
   10e62:	|  |  |   moveq #28,d0
   10e64:	|  |  |   add.l 20(sp),d0
   10e68:	|  |  |   move.l d1,-(sp)
   10e6a:	|  |  |   pea 1 <_start+0x1>
   10e6e:	|  |  |   move.l d0,-(sp)
   10e70:	|  |  |   jsr 150ea <setVariable>
   10e76:	|  |  |   lea 12(sp),sp
   10e7a:	|  +--|-- bra.s 10e94 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10e7c:	|  |  '-> moveq #28,d0
   10e7e:	|  |      add.l 20(sp),d0
   10e82:	|  |      clr.l -(sp)
   10e84:	|  |      pea 1 <_start+0x1>
   10e88:	|  |      move.l d0,-(sp)
   10e8a:	|  |      jsr 150ea <setVariable>
   10e90:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10e94:	|  '----> moveq #2,d0
}
   10e96:	'-------> lea 12(sp),sp
   10e9a:	          rts

00010e9c <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10e9c:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ea0:	          movea.l 20(sp),a0
   10ea4:	          move.l 24(a0),d0
   10ea8:	          move.l d0,-(sp)
   10eaa:	          pea 7 <_start+0x7>
   10eae:	          lea 8(sp),a0
   10eb2:	          move.l a0,-(sp)
   10eb4:	          jsr 147f8 <getValueType>
   10eba:	          lea 12(sp),sp
   10ebe:	          tst.w d0
   10ec0:	      ,-- bne.s 10ec8 <builtIn_getObjectY+0x2c>
   10ec2:	      |   moveq #1,d0
   10ec4:	,-----|-- bra.w 10f66 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10ec8:	|     '-> moveq #24,d0
   10eca:	|         add.l 20(sp),d0
   10ece:	|         move.l d0,-(sp)
   10ed0:	|         jsr 1517c <trimStack>
   10ed6:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10ed8:	|         move.l (sp),d0
   10eda:	|         move.l d0,-(sp)
   10edc:	|         jsr a5b0 <findPerson>
   10ee2:	|         addq.l #4,sp
   10ee4:	|         move.l d0,8(sp)
	if (pers) {
   10ee8:	|     ,-- beq.s 10f18 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10eea:	|     |   movea.l 8(sp),a0
   10eee:	|     |   move.l 4(a0),d0
   10ef2:	|     |   move.l d0,-(sp)
   10ef4:	|     |   jsr 176a2 <__fixsfsi>
   10efa:	|     |   addq.l #4,sp
   10efc:	|     |   move.l d0,d1
   10efe:	|     |   moveq #28,d0
   10f00:	|     |   add.l 20(sp),d0
   10f04:	|     |   move.l d1,-(sp)
   10f06:	|     |   pea 1 <_start+0x1>
   10f0a:	|     |   move.l d0,-(sp)
   10f0c:	|     |   jsr 150ea <setVariable>
   10f12:	|     |   lea 12(sp),sp
   10f16:	|  ,--|-- bra.s 10f64 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10f18:	|  |  '-> move.l (sp),d0
   10f1a:	|  |      move.l d0,-(sp)
   10f1c:	|  |      jsr 15aba <getRegionForObject>
   10f22:	|  |      addq.l #4,sp
   10f24:	|  |      move.l d0,4(sp)
		if (la) {
   10f28:	|  |  ,-- beq.s 10f4c <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10f2a:	|  |  |   movea.l 4(sp),a0
   10f2e:	|  |  |   move.l 20(a0),d1
   10f32:	|  |  |   moveq #28,d0
   10f34:	|  |  |   add.l 20(sp),d0
   10f38:	|  |  |   move.l d1,-(sp)
   10f3a:	|  |  |   pea 1 <_start+0x1>
   10f3e:	|  |  |   move.l d0,-(sp)
   10f40:	|  |  |   jsr 150ea <setVariable>
   10f46:	|  |  |   lea 12(sp),sp
   10f4a:	|  +--|-- bra.s 10f64 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10f4c:	|  |  '-> moveq #28,d0
   10f4e:	|  |      add.l 20(sp),d0
   10f52:	|  |      clr.l -(sp)
   10f54:	|  |      pea 1 <_start+0x1>
   10f58:	|  |      move.l d0,-(sp)
   10f5a:	|  |      jsr 150ea <setVariable>
   10f60:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10f64:	|  '----> moveq #2,d0
}
   10f66:	'-------> lea 12(sp),sp
   10f6a:	          rts

00010f6c <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10f6c:	       lea -32(sp),sp
   10f70:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f74:	       movea.l 56(sp),a0
   10f78:	       move.l 24(a0),d0
   10f7c:	       move.l d0,-(sp)
   10f7e:	       pea 1 <_start+0x1>
   10f82:	       lea 28(sp),a0
   10f86:	       move.l a0,-(sp)
   10f88:	       jsr 147f8 <getValueType>
   10f8e:	       lea 12(sp),sp
   10f92:	       tst.w d0
   10f94:	   ,-- bne.s 10f9c <builtIn_addScreenRegion+0x30>
   10f96:	   |   moveq #1,d0
   10f98:	,--|-- bra.w 11176 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f9c:	|  '-> moveq #24,d0
   10f9e:	|      add.l 56(sp),d0
   10fa2:	|      move.l d0,-(sp)
   10fa4:	|      jsr 1517c <trimStack>
   10faa:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fac:	|      movea.l 56(sp),a0
   10fb0:	|      move.l 24(a0),d0
   10fb4:	|      move.l d0,-(sp)
   10fb6:	|      pea 1 <_start+0x1>
   10fba:	|      moveq #48,d0
   10fbc:	|      add.l sp,d0
   10fbe:	|      move.l d0,-(sp)
   10fc0:	|      jsr 147f8 <getValueType>
   10fc6:	|      lea 12(sp),sp
   10fca:	|      tst.w d0
   10fcc:	|  ,-- bne.s 10fd4 <builtIn_addScreenRegion+0x68>
   10fce:	|  |   moveq #1,d0
   10fd0:	+--|-- bra.w 11176 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10fd4:	|  '-> moveq #24,d0
   10fd6:	|      add.l 56(sp),d0
   10fda:	|      move.l d0,-(sp)
   10fdc:	|      jsr 1517c <trimStack>
   10fe2:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fe4:	|      movea.l 56(sp),a0
   10fe8:	|      move.l 24(a0),d0
   10fec:	|      move.l d0,-(sp)
   10fee:	|      pea 1 <_start+0x1>
   10ff2:	|      moveq #52,d0
   10ff4:	|      add.l sp,d0
   10ff6:	|      move.l d0,-(sp)
   10ff8:	|      jsr 147f8 <getValueType>
   10ffe:	|      lea 12(sp),sp
   11002:	|      tst.w d0
   11004:	|  ,-- bne.s 1100c <builtIn_addScreenRegion+0xa0>
   11006:	|  |   moveq #1,d0
   11008:	+--|-- bra.w 11176 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1100c:	|  '-> moveq #24,d0
   1100e:	|      add.l 56(sp),d0
   11012:	|      move.l d0,-(sp)
   11014:	|      jsr 1517c <trimStack>
   1101a:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1101c:	|      movea.l 56(sp),a0
   11020:	|      move.l 24(a0),d0
   11024:	|      move.l d0,-(sp)
   11026:	|      pea 1 <_start+0x1>
   1102a:	|      lea 32(sp),a0
   1102e:	|      move.l a0,-(sp)
   11030:	|      jsr 147f8 <getValueType>
   11036:	|      lea 12(sp),sp
   1103a:	|      tst.w d0
   1103c:	|  ,-- bne.s 11044 <builtIn_addScreenRegion+0xd8>
   1103e:	|  |   moveq #1,d0
   11040:	+--|-- bra.w 11176 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11044:	|  '-> moveq #24,d0
   11046:	|      add.l 56(sp),d0
   1104a:	|      move.l d0,-(sp)
   1104c:	|      jsr 1517c <trimStack>
   11052:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11054:	|      movea.l 56(sp),a0
   11058:	|      move.l 24(a0),d0
   1105c:	|      move.l d0,-(sp)
   1105e:	|      pea 1 <_start+0x1>
   11062:	|      lea 36(sp),a0
   11066:	|      move.l a0,-(sp)
   11068:	|      jsr 147f8 <getValueType>
   1106e:	|      lea 12(sp),sp
   11072:	|      tst.w d0
   11074:	|  ,-- bne.s 1107c <builtIn_addScreenRegion+0x110>
   11076:	|  |   moveq #1,d0
   11078:	+--|-- bra.w 11176 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1107c:	|  '-> moveq #24,d0
   1107e:	|      add.l 56(sp),d0
   11082:	|      move.l d0,-(sp)
   11084:	|      jsr 1517c <trimStack>
   1108a:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1108c:	|      movea.l 56(sp),a0
   11090:	|      move.l 24(a0),d0
   11094:	|      move.l d0,-(sp)
   11096:	|      pea 1 <_start+0x1>
   1109a:	|      lea 40(sp),a0
   1109e:	|      move.l a0,-(sp)
   110a0:	|      jsr 147f8 <getValueType>
   110a6:	|      lea 12(sp),sp
   110aa:	|      tst.w d0
   110ac:	|  ,-- bne.s 110b4 <builtIn_addScreenRegion+0x148>
   110ae:	|  |   moveq #1,d0
   110b0:	+--|-- bra.w 11176 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110b4:	|  '-> moveq #24,d0
   110b6:	|      add.l 56(sp),d0
   110ba:	|      move.l d0,-(sp)
   110bc:	|      jsr 1517c <trimStack>
   110c2:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110c4:	|      movea.l 56(sp),a0
   110c8:	|      move.l 24(a0),d0
   110cc:	|      move.l d0,-(sp)
   110ce:	|      pea 1 <_start+0x1>
   110d2:	|      lea 44(sp),a0
   110d6:	|      move.l a0,-(sp)
   110d8:	|      jsr 147f8 <getValueType>
   110de:	|      lea 12(sp),sp
   110e2:	|      tst.w d0
   110e4:	|  ,-- bne.s 110ec <builtIn_addScreenRegion+0x180>
   110e6:	|  |   moveq #1,d0
   110e8:	+--|-- bra.w 11176 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110ec:	|  '-> moveq #24,d0
   110ee:	|      add.l 56(sp),d0
   110f2:	|      move.l d0,-(sp)
   110f4:	|      jsr 1517c <trimStack>
   110fa:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   110fc:	|      movea.l 56(sp),a0
   11100:	|      move.l 24(a0),d0
   11104:	|      move.l d0,-(sp)
   11106:	|      pea 7 <_start+0x7>
   1110a:	|      lea 24(sp),a0
   1110e:	|      move.l a0,-(sp)
   11110:	|      jsr 147f8 <getValueType>
   11116:	|      lea 12(sp),sp
   1111a:	|      tst.w d0
   1111c:	|  ,-- bne.s 11122 <builtIn_addScreenRegion+0x1b6>
   1111e:	|  |   moveq #1,d0
   11120:	+--|-- bra.s 11176 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11122:	|  '-> moveq #24,d0
   11124:	|      add.l 56(sp),d0
   11128:	|      move.l d0,-(sp)
   1112a:	|      jsr 1517c <trimStack>
   11130:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   11132:	|      move.l 16(sp),d5
   11136:	|      move.l 20(sp),d4
   1113a:	|      move.l 40(sp),d3
   1113e:	|      move.l 44(sp),d2
   11142:	|      movea.l 24(sp),a1
   11146:	|      movea.l 28(sp),a0
   1114a:	|      move.l 32(sp),d1
   1114e:	|      move.l 36(sp),d0
   11152:	|      move.l d5,-(sp)
   11154:	|      move.l d4,-(sp)
   11156:	|      move.l d3,-(sp)
   11158:	|      move.l d2,-(sp)
   1115a:	|      move.l a1,-(sp)
   1115c:	|      move.l a0,-(sp)
   1115e:	|      move.l d1,-(sp)
   11160:	|      move.l d0,-(sp)
   11162:	|      jsr 15974 <addScreenRegion>
   11168:	|      lea 32(sp),sp
   1116c:	|      tst.w d0
   1116e:	|  ,-- beq.s 11174 <builtIn_addScreenRegion+0x208>
   11170:	|  |   moveq #2,d0
   11172:	+--|-- bra.s 11176 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   11174:	|  '-> moveq #1,d0

}
   11176:	'----> movem.l (sp)+,d2-d5
   1117a:	       lea 32(sp),sp
   1117e:	       rts

00011180 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   11180:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11182:	       movea.l 12(sp),a0
   11186:	       move.l 24(a0),d0
   1118a:	       move.l d0,-(sp)
   1118c:	       pea 7 <_start+0x7>
   11190:	       move.l sp,d0
   11192:	       addq.l #8,d0
   11194:	       move.l d0,-(sp)
   11196:	       jsr 147f8 <getValueType>
   1119c:	       lea 12(sp),sp
   111a0:	       tst.w d0
   111a2:	   ,-- bne.s 111a8 <builtIn_removeScreenRegion+0x28>
   111a4:	   |   moveq #1,d0
   111a6:	,--|-- bra.s 111c6 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   111a8:	|  '-> moveq #24,d0
   111aa:	|      add.l 12(sp),d0
   111ae:	|      move.l d0,-(sp)
   111b0:	|      jsr 1517c <trimStack>
   111b6:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   111b8:	|      move.l (sp),d0
   111ba:	|      move.l d0,-(sp)
   111bc:	|      jsr 15c62 <removeScreenRegion>
   111c2:	|      addq.l #4,sp
	return BR_CONTINUE;
   111c4:	|      moveq #2,d0
}
   111c6:	'----> addq.l #4,sp
   111c8:	       rts

000111ca <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   111ca:	jsr 15de6 <showBoxes>
	return BR_CONTINUE;
   111d0:	moveq #2,d0
}
   111d2:	rts

000111d4 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   111d4:	jsr 15ae8 <killAllRegions>
	return BR_CONTINUE;
   111da:	moveq #2,d0
}
   111dc:	rts

000111de <builtIn_addCharacter>:

builtIn(addCharacter)
{
   111de:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   111e2:	       movea.l 24(sp),a0
   111e6:	       move.l 24(a0),d0
   111ea:	       move.l d0,-(sp)
   111ec:	       jsr 144a4 <getCostumeFromVar>
   111f2:	       addq.l #4,sp
   111f4:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   111f8:	   ,-- bne.s 11200 <builtIn_addCharacter+0x22>
   111fa:	   |   moveq #1,d0
   111fc:	,--|-- bra.w 112dc <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   11200:	|  '-> moveq #24,d0
   11202:	|      add.l 24(sp),d0
   11206:	|      move.l d0,-(sp)
   11208:	|      jsr 1517c <trimStack>
   1120e:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11210:	|      movea.l 24(sp),a0
   11214:	|      move.l 24(a0),d0
   11218:	|      move.l d0,-(sp)
   1121a:	|      pea 1 <_start+0x1>
   1121e:	|      lea 12(sp),a0
   11222:	|      move.l a0,-(sp)
   11224:	|      jsr 147f8 <getValueType>
   1122a:	|      lea 12(sp),sp
   1122e:	|      tst.w d0
   11230:	|  ,-- bne.s 11238 <builtIn_addCharacter+0x5a>
   11232:	|  |   moveq #1,d0
   11234:	+--|-- bra.w 112dc <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11238:	|  '-> moveq #24,d0
   1123a:	|      add.l 24(sp),d0
   1123e:	|      move.l d0,-(sp)
   11240:	|      jsr 1517c <trimStack>
   11246:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11248:	|      movea.l 24(sp),a0
   1124c:	|      move.l 24(a0),d0
   11250:	|      move.l d0,-(sp)
   11252:	|      pea 1 <_start+0x1>
   11256:	|      moveq #16,d0
   11258:	|      add.l sp,d0
   1125a:	|      move.l d0,-(sp)
   1125c:	|      jsr 147f8 <getValueType>
   11262:	|      lea 12(sp),sp
   11266:	|      tst.w d0
   11268:	|  ,-- bne.s 1126e <builtIn_addCharacter+0x90>
   1126a:	|  |   moveq #1,d0
   1126c:	+--|-- bra.s 112dc <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1126e:	|  '-> moveq #24,d0
   11270:	|      add.l 24(sp),d0
   11274:	|      move.l d0,-(sp)
   11276:	|      jsr 1517c <trimStack>
   1127c:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1127e:	|      movea.l 24(sp),a0
   11282:	|      move.l 24(a0),d0
   11286:	|      move.l d0,-(sp)
   11288:	|      pea 7 <_start+0x7>
   1128c:	|      lea 8(sp),a0
   11290:	|      move.l a0,-(sp)
   11292:	|      jsr 147f8 <getValueType>
   11298:	|      lea 12(sp),sp
   1129c:	|      tst.w d0
   1129e:	|  ,-- bne.s 112a4 <builtIn_addCharacter+0xc6>
   112a0:	|  |   moveq #1,d0
   112a2:	+--|-- bra.s 112dc <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   112a4:	|  '-> moveq #24,d0
   112a6:	|      add.l 24(sp),d0
   112aa:	|      move.l d0,-(sp)
   112ac:	|      jsr 1517c <trimStack>
   112b2:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   112b4:	|      movea.l (sp),a0
   112b6:	|      move.l 4(sp),d1
   112ba:	|      move.l 8(sp),d0
   112be:	|      move.l 12(sp),-(sp)
   112c2:	|      move.l a0,-(sp)
   112c4:	|      move.l d1,-(sp)
   112c6:	|      move.l d0,-(sp)
   112c8:	|      jsr 91aa <addPerson>
   112ce:	|      lea 16(sp),sp
   112d2:	|      tst.w d0
   112d4:	|  ,-- beq.s 112da <builtIn_addCharacter+0xfc>
   112d6:	|  |   moveq #2,d0
   112d8:	+--|-- bra.s 112dc <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   112da:	|  '-> moveq #1,d0
}
   112dc:	'----> lea 16(sp),sp
   112e0:	       rts

000112e2 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   112e2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112e4:	       movea.l 12(sp),a0
   112e8:	       move.l 24(a0),d0
   112ec:	       move.l d0,-(sp)
   112ee:	       pea 7 <_start+0x7>
   112f2:	       move.l sp,d0
   112f4:	       addq.l #8,d0
   112f6:	       move.l d0,-(sp)
   112f8:	       jsr 147f8 <getValueType>
   112fe:	       lea 12(sp),sp
   11302:	       tst.w d0
   11304:	   ,-- bne.s 1130a <builtIn_hideCharacter+0x28>
   11306:	   |   moveq #1,d0
   11308:	,--|-- bra.s 1132a <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   1130a:	|  '-> moveq #24,d0
   1130c:	|      add.l 12(sp),d0
   11310:	|      move.l d0,-(sp)
   11312:	|      jsr 1517c <trimStack>
   11318:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   1131a:	|      move.l (sp),d0
   1131c:	|      move.l d0,-(sp)
   1131e:	|      clr.l -(sp)
   11320:	|      jsr bc46 <setShown>
   11326:	|      addq.l #8,sp
	return BR_CONTINUE;
   11328:	|      moveq #2,d0
}
   1132a:	'----> addq.l #4,sp
   1132c:	       rts

0001132e <builtIn_showCharacter>:

builtIn(showCharacter)
{
   1132e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11330:	       movea.l 12(sp),a0
   11334:	       move.l 24(a0),d0
   11338:	       move.l d0,-(sp)
   1133a:	       pea 7 <_start+0x7>
   1133e:	       move.l sp,d0
   11340:	       addq.l #8,d0
   11342:	       move.l d0,-(sp)
   11344:	       jsr 147f8 <getValueType>
   1134a:	       lea 12(sp),sp
   1134e:	       tst.w d0
   11350:	   ,-- bne.s 11356 <builtIn_showCharacter+0x28>
   11352:	   |   moveq #1,d0
   11354:	,--|-- bra.s 11378 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   11356:	|  '-> moveq #24,d0
   11358:	|      add.l 12(sp),d0
   1135c:	|      move.l d0,-(sp)
   1135e:	|      jsr 1517c <trimStack>
   11364:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   11366:	|      move.l (sp),d0
   11368:	|      move.l d0,-(sp)
   1136a:	|      pea 1 <_start+0x1>
   1136e:	|      jsr bc46 <setShown>
   11374:	|      addq.l #8,sp
	return BR_CONTINUE;
   11376:	|      moveq #2,d0
}
   11378:	'----> addq.l #4,sp
   1137a:	       rts

0001137c <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   1137c:	jsr 6a2e <killSpeechTimers>
	killMostPeople ();
   11382:	jsr aa46 <killMostPeople>
	return BR_CONTINUE;
   11388:	moveq #2,d0
}
   1138a:	rts

0001138c <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   1138c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1138e:	       movea.l 16(sp),a0
   11392:	       move.l 24(a0),d0
   11396:	       move.l d0,-(sp)
   11398:	       pea 1 <_start+0x1>
   1139c:	       move.l sp,d0
   1139e:	       addq.l #8,d0
   113a0:	       move.l d0,-(sp)
   113a2:	       jsr 147f8 <getValueType>
   113a8:	       lea 12(sp),sp
   113ac:	       tst.w d0
   113ae:	   ,-- bne.s 113b4 <builtIn_setCharacterDrawMode+0x28>
   113b0:	   |   moveq #1,d0
   113b2:	,--|-- bra.s 1140e <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   113b4:	|  '-> moveq #24,d0
   113b6:	|      add.l 16(sp),d0
   113ba:	|      move.l d0,-(sp)
   113bc:	|      jsr 1517c <trimStack>
   113c2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113c4:	|      movea.l 16(sp),a0
   113c8:	|      move.l 24(a0),d0
   113cc:	|      move.l d0,-(sp)
   113ce:	|      pea 7 <_start+0x7>
   113d2:	|      moveq #12,d0
   113d4:	|      add.l sp,d0
   113d6:	|      move.l d0,-(sp)
   113d8:	|      jsr 147f8 <getValueType>
   113de:	|      lea 12(sp),sp
   113e2:	|      tst.w d0
   113e4:	|  ,-- bne.s 113ea <builtIn_setCharacterDrawMode+0x5e>
   113e6:	|  |   moveq #1,d0
   113e8:	+--|-- bra.s 1140e <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   113ea:	|  '-> moveq #24,d0
   113ec:	|      add.l 16(sp),d0
   113f0:	|      move.l d0,-(sp)
   113f2:	|      jsr 1517c <trimStack>
   113f8:	|      addq.l #4,sp
	setDrawMode (di, obj);
   113fa:	|      move.l 4(sp),d1
   113fe:	|      move.l (sp),d0
   11400:	|      move.l d1,-(sp)
   11402:	|      move.l d0,-(sp)
   11404:	|      jsr b584 <setDrawMode>
   1140a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1140c:	|      moveq #2,d0
}
   1140e:	'----> addq.l #8,sp
   11410:	       rts

00011412 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   11412:	pea 19cb0 <talk.c.490538ff+0x2a1>
   11418:	jsr 172d8 <KPrintF>
   1141e:	addq.l #4,sp
	return BR_CONTINUE;
   11420:	moveq #2,d0
}
   11422:	rts

00011424 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   11424:	pea 19ce3 <talk.c.490538ff+0x2d4>
   1142a:	jsr 172d8 <KPrintF>
   11430:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   11432:	moveq #2,d0
}
   11434:	rts

00011436 <builtIn_setScale>:

builtIn(setScale)
{
   11436:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11438:	       movea.l 16(sp),a0
   1143c:	       move.l 24(a0),d0
   11440:	       move.l d0,-(sp)
   11442:	       pea 1 <_start+0x1>
   11446:	       move.l sp,d0
   11448:	       addq.l #8,d0
   1144a:	       move.l d0,-(sp)
   1144c:	       jsr 147f8 <getValueType>
   11452:	       lea 12(sp),sp
   11456:	       tst.w d0
   11458:	   ,-- bne.s 1145e <builtIn_setScale+0x28>
   1145a:	   |   moveq #1,d0
   1145c:	,--|-- bra.s 114c0 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   1145e:	|  '-> moveq #24,d0
   11460:	|      add.l 16(sp),d0
   11464:	|      move.l d0,-(sp)
   11466:	|      jsr 1517c <trimStack>
   1146c:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1146e:	|      movea.l 16(sp),a0
   11472:	|      move.l 24(a0),d0
   11476:	|      move.l d0,-(sp)
   11478:	|      pea 1 <_start+0x1>
   1147c:	|      moveq #12,d0
   1147e:	|      add.l sp,d0
   11480:	|      move.l d0,-(sp)
   11482:	|      jsr 147f8 <getValueType>
   11488:	|      lea 12(sp),sp
   1148c:	|      tst.w d0
   1148e:	|  ,-- bne.s 11494 <builtIn_setScale+0x5e>
   11490:	|  |   moveq #1,d0
   11492:	+--|-- bra.s 114c0 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11494:	|  '-> moveq #24,d0
   11496:	|      add.l 16(sp),d0
   1149a:	|      move.l d0,-(sp)
   1149c:	|      jsr 1517c <trimStack>
   114a2:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   114a4:	|      move.l (sp),d0
   114a6:	|      move.l d0,d0
   114a8:	|      movea.w d0,a1
   114aa:	|      move.l 4(sp),d0
   114ae:	|      move.l d0,d0
   114b0:	|      movea.w d0,a0
   114b2:	|      move.l a1,-(sp)
   114b4:	|      move.l a0,-(sp)
   114b6:	|      jsr bc1e <setScale>
   114bc:	|      addq.l #8,sp
	return BR_CONTINUE;
   114be:	|      moveq #2,d0
}
   114c0:	'----> addq.l #8,sp
   114c2:	       rts

000114c4 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   114c4:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114c6:	       movea.l 12(sp),a0
   114ca:	       move.l 24(a0),d0
   114ce:	       move.l d0,-(sp)
   114d0:	       pea 7 <_start+0x7>
   114d4:	       move.l sp,d0
   114d6:	       addq.l #8,d0
   114d8:	       move.l d0,-(sp)
   114da:	       jsr 147f8 <getValueType>
   114e0:	       lea 12(sp),sp
   114e4:	       tst.w d0
   114e6:	   ,-- bne.s 114ec <builtIn_stopCharacter+0x28>
   114e8:	   |   moveq #1,d0
   114ea:	,--|-- bra.s 11524 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   114ec:	|  '-> moveq #24,d0
   114ee:	|      add.l 12(sp),d0
   114f2:	|      move.l d0,-(sp)
   114f4:	|      jsr 1517c <trimStack>
   114fa:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   114fc:	|      move.l (sp),d0
   114fe:	|      move.l d0,-(sp)
   11500:	|      jsr bd52 <stopPerson>
   11506:	|      addq.l #4,sp
   11508:	|      movea.w d0,a0
   1150a:	|      moveq #28,d0
   1150c:	|      add.l 12(sp),d0
   11510:	|      move.l a0,-(sp)
   11512:	|      pea 1 <_start+0x1>
   11516:	|      move.l d0,-(sp)
   11518:	|      jsr 150ea <setVariable>
   1151e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11522:	|      moveq #2,d0
}
   11524:	'----> addq.l #4,sp
   11526:	       rts

00011528 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   11528:	pea 19d1d <talk.c.490538ff+0x30e>
   1152e:	jsr 172d8 <KPrintF>
   11534:	addq.l #4,sp
	return BR_CONTINUE;
   11536:	moveq #2,d0
}
   11538:	rts

0001153a <builtIn_animate>:

builtIn(animate)
{
   1153a:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   1153c:	       movea.l 16(sp),a0
   11540:	       move.l 24(a0),d0
   11544:	       move.l d0,-(sp)
   11546:	       jsr 14cd0 <getAnimationFromVar>
   1154c:	       addq.l #4,sp
   1154e:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11552:	   ,-- bne.s 11558 <builtIn_animate+0x1e>
   11554:	   |   moveq #1,d0
   11556:	,--|-- bra.s 115d6 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11558:	|  '-> moveq #24,d0
   1155a:	|      add.l 16(sp),d0
   1155e:	|      move.l d0,-(sp)
   11560:	|      jsr 1517c <trimStack>
   11566:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11568:	|      movea.l 16(sp),a0
   1156c:	|      move.l 24(a0),d0
   11570:	|      move.l d0,-(sp)
   11572:	|      pea 7 <_start+0x7>
   11576:	|      move.l sp,d0
   11578:	|      addq.l #8,d0
   1157a:	|      move.l d0,-(sp)
   1157c:	|      jsr 147f8 <getValueType>
   11582:	|      lea 12(sp),sp
   11586:	|      tst.w d0
   11588:	|  ,-- bne.s 1158e <builtIn_animate+0x54>
   1158a:	|  |   moveq #1,d0
   1158c:	+--|-- bra.s 115d6 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   1158e:	|  '-> moveq #24,d0
   11590:	|      add.l 16(sp),d0
   11594:	|      move.l d0,-(sp)
   11596:	|      jsr 1517c <trimStack>
   1159c:	|      addq.l #4,sp
	animatePerson (obj, pp);
   1159e:	|      move.l (sp),d0
   115a0:	|      move.l 4(sp),-(sp)
   115a4:	|      move.l d0,-(sp)
   115a6:	|      jsr 9420 <animatePerson>
   115ac:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   115ae:	|      move.l 4(sp),-(sp)
   115b2:	|      jsr bda6 <timeForAnim>
   115b8:	|      addq.l #4,sp
   115ba:	|      move.l d0,d1
   115bc:	|      moveq #28,d0
   115be:	|      add.l 16(sp),d0
   115c2:	|      move.l d1,-(sp)
   115c4:	|      pea 1 <_start+0x1>
   115c8:	|      move.l d0,-(sp)
   115ca:	|      jsr 150ea <setVariable>
   115d0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   115d4:	|      moveq #2,d0
}
   115d6:	'----> addq.l #8,sp
   115d8:	       rts

000115da <builtIn_setCostume>:

builtIn(setCostume)
{
   115da:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   115dc:	       movea.l 16(sp),a0
   115e0:	       move.l 24(a0),d0
   115e4:	       move.l d0,-(sp)
   115e6:	       jsr 144a4 <getCostumeFromVar>
   115ec:	       addq.l #4,sp
   115ee:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   115f2:	   ,-- bne.s 115f8 <builtIn_setCostume+0x1e>
   115f4:	   |   moveq #1,d0
   115f6:	,--|-- bra.s 11650 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   115f8:	|  '-> moveq #24,d0
   115fa:	|      add.l 16(sp),d0
   115fe:	|      move.l d0,-(sp)
   11600:	|      jsr 1517c <trimStack>
   11606:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11608:	|      movea.l 16(sp),a0
   1160c:	|      move.l 24(a0),d0
   11610:	|      move.l d0,-(sp)
   11612:	|      pea 7 <_start+0x7>
   11616:	|      move.l sp,d0
   11618:	|      addq.l #8,d0
   1161a:	|      move.l d0,-(sp)
   1161c:	|      jsr 147f8 <getValueType>
   11622:	|      lea 12(sp),sp
   11626:	|      tst.w d0
   11628:	|  ,-- bne.s 1162e <builtIn_setCostume+0x54>
   1162a:	|  |   moveq #1,d0
   1162c:	+--|-- bra.s 11650 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1162e:	|  '-> moveq #24,d0
   11630:	|      add.l 16(sp),d0
   11634:	|      move.l d0,-(sp)
   11636:	|      jsr 1517c <trimStack>
   1163c:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   1163e:	|      move.l (sp),d0
   11640:	|      move.l 4(sp),-(sp)
   11644:	|      move.l d0,-(sp)
   11646:	|      jsr 946a <animatePersonUsingPersona>
   1164c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1164e:	|      moveq #2,d0
}
   11650:	'----> addq.l #8,sp
   11652:	       rts

00011654 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   11654:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11656:	       movea.l 16(sp),a0
   1165a:	       move.l 24(a0),d0
   1165e:	       move.l d0,-(sp)
   11660:	       pea 1 <_start+0x1>
   11664:	       move.l sp,d0
   11666:	       addq.l #8,d0
   11668:	       move.l d0,-(sp)
   1166a:	       jsr 147f8 <getValueType>
   11670:	       lea 12(sp),sp
   11674:	       tst.w d0
   11676:	   ,-- bne.s 1167c <builtIn_floatCharacter+0x28>
   11678:	   |   moveq #1,d0
   1167a:	,--|-- bra.s 116f0 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1167c:	|  '-> moveq #24,d0
   1167e:	|      add.l 16(sp),d0
   11682:	|      move.l d0,-(sp)
   11684:	|      jsr 1517c <trimStack>
   1168a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1168c:	|      movea.l 16(sp),a0
   11690:	|      move.l 24(a0),d0
   11694:	|      move.l d0,-(sp)
   11696:	|      pea 7 <_start+0x7>
   1169a:	|      moveq #12,d0
   1169c:	|      add.l sp,d0
   1169e:	|      move.l d0,-(sp)
   116a0:	|      jsr 147f8 <getValueType>
   116a6:	|      lea 12(sp),sp
   116aa:	|      tst.w d0
   116ac:	|  ,-- bne.s 116b2 <builtIn_floatCharacter+0x5e>
   116ae:	|  |   moveq #1,d0
   116b0:	+--|-- bra.s 116f0 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   116b2:	|  '-> moveq #24,d0
   116b4:	|      add.l 16(sp),d0
   116b8:	|      move.l d0,-(sp)
   116ba:	|      jsr 1517c <trimStack>
   116c0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   116c2:	|      move.l 4(sp),d1
   116c6:	|      move.l (sp),d0
   116c8:	|      move.l d1,-(sp)
   116ca:	|      move.l d0,-(sp)
   116cc:	|      jsr a5fa <floatCharacter>
   116d2:	|      addq.l #8,sp
   116d4:	|      movea.w d0,a0
   116d6:	|      moveq #28,d0
   116d8:	|      add.l 16(sp),d0
   116dc:	|      move.l a0,-(sp)
   116de:	|      pea 1 <_start+0x1>
   116e2:	|      move.l d0,-(sp)
   116e4:	|      jsr 150ea <setVariable>
   116ea:	|      lea 12(sp),sp
	return BR_CONTINUE;
   116ee:	|      moveq #2,d0
}
   116f0:	'----> addq.l #8,sp
   116f2:	       rts

000116f4 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   116f4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   116f6:	       movea.l 16(sp),a0
   116fa:	       move.l 24(a0),d0
   116fe:	       move.l d0,-(sp)
   11700:	       pea 1 <_start+0x1>
   11704:	       move.l sp,d0
   11706:	       addq.l #8,d0
   11708:	       move.l d0,-(sp)
   1170a:	       jsr 147f8 <getValueType>
   11710:	       lea 12(sp),sp
   11714:	       tst.w d0
   11716:	   ,-- bne.s 1171c <builtIn_setCharacterWalkSpeed+0x28>
   11718:	   |   moveq #1,d0
   1171a:	,--|-- bra.s 11790 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   1171c:	|  '-> moveq #24,d0
   1171e:	|      add.l 16(sp),d0
   11722:	|      move.l d0,-(sp)
   11724:	|      jsr 1517c <trimStack>
   1172a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1172c:	|      movea.l 16(sp),a0
   11730:	|      move.l 24(a0),d0
   11734:	|      move.l d0,-(sp)
   11736:	|      pea 7 <_start+0x7>
   1173a:	|      moveq #12,d0
   1173c:	|      add.l sp,d0
   1173e:	|      move.l d0,-(sp)
   11740:	|      jsr 147f8 <getValueType>
   11746:	|      lea 12(sp),sp
   1174a:	|      tst.w d0
   1174c:	|  ,-- bne.s 11752 <builtIn_setCharacterWalkSpeed+0x5e>
   1174e:	|  |   moveq #1,d0
   11750:	+--|-- bra.s 11790 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11752:	|  '-> moveq #24,d0
   11754:	|      add.l 16(sp),d0
   11758:	|      move.l d0,-(sp)
   1175a:	|      jsr 1517c <trimStack>
   11760:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   11762:	|      move.l 4(sp),d1
   11766:	|      move.l (sp),d0
   11768:	|      move.l d1,-(sp)
   1176a:	|      move.l d0,-(sp)
   1176c:	|      jsr bbba <setCharacterWalkSpeed>
   11772:	|      addq.l #8,sp
   11774:	|      movea.w d0,a0
   11776:	|      moveq #28,d0
   11778:	|      add.l 16(sp),d0
   1177c:	|      move.l a0,-(sp)
   1177e:	|      pea 1 <_start+0x1>
   11782:	|      move.l d0,-(sp)
   11784:	|      jsr 150ea <setVariable>
   1178a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1178e:	|      moveq #2,d0
}
   11790:	'----> addq.l #8,sp
   11792:	       rts

00011794 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   11794:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11796:	       movea.l 16(sp),a0
   1179a:	       move.l 24(a0),d0
   1179e:	       move.l d0,-(sp)
   117a0:	       pea 1 <_start+0x1>
   117a4:	       move.l sp,d0
   117a6:	       addq.l #8,d0
   117a8:	       move.l d0,-(sp)
   117aa:	       jsr 147f8 <getValueType>
   117b0:	       lea 12(sp),sp
   117b4:	       tst.w d0
   117b6:	   ,-- bne.s 117bc <builtIn_turnCharacter+0x28>
   117b8:	   |   moveq #1,d0
   117ba:	,--|-- bra.s 11830 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   117bc:	|  '-> moveq #24,d0
   117be:	|      add.l 16(sp),d0
   117c2:	|      move.l d0,-(sp)
   117c4:	|      jsr 1517c <trimStack>
   117ca:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117cc:	|      movea.l 16(sp),a0
   117d0:	|      move.l 24(a0),d0
   117d4:	|      move.l d0,-(sp)
   117d6:	|      pea 7 <_start+0x7>
   117da:	|      moveq #12,d0
   117dc:	|      add.l sp,d0
   117de:	|      move.l d0,-(sp)
   117e0:	|      jsr 147f8 <getValueType>
   117e6:	|      lea 12(sp),sp
   117ea:	|      tst.w d0
   117ec:	|  ,-- bne.s 117f2 <builtIn_turnCharacter+0x5e>
   117ee:	|  |   moveq #1,d0
   117f0:	+--|-- bra.s 11830 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   117f2:	|  '-> moveq #24,d0
   117f4:	|      add.l 16(sp),d0
   117f8:	|      move.l d0,-(sp)
   117fa:	|      jsr 1517c <trimStack>
   11800:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11802:	|      move.l (sp),d1
   11804:	|      move.l 4(sp),d0
   11808:	|      move.l d1,-(sp)
   1180a:	|      move.l d0,-(sp)
   1180c:	|      jsr be5e <turnPersonToFace>
   11812:	|      addq.l #8,sp
   11814:	|      movea.w d0,a0
   11816:	|      moveq #28,d0
   11818:	|      add.l 16(sp),d0
   1181c:	|      move.l a0,-(sp)
   1181e:	|      pea 1 <_start+0x1>
   11822:	|      move.l d0,-(sp)
   11824:	|      jsr 150ea <setVariable>
   1182a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1182e:	|      moveq #2,d0
}
   11830:	'----> addq.l #8,sp
   11832:	       rts

00011834 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   11834:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11836:	       movea.l 16(sp),a0
   1183a:	       move.l 24(a0),d0
   1183e:	       move.l d0,-(sp)
   11840:	       pea 1 <_start+0x1>
   11844:	       move.l sp,d0
   11846:	       addq.l #8,d0
   11848:	       move.l d0,-(sp)
   1184a:	       jsr 147f8 <getValueType>
   11850:	       lea 12(sp),sp
   11854:	       tst.w d0
   11856:	   ,-- bne.s 1185c <builtIn_setCharacterExtra+0x28>
   11858:	   |   moveq #1,d0
   1185a:	,--|-- bra.s 118d0 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   1185c:	|  '-> moveq #24,d0
   1185e:	|      add.l 16(sp),d0
   11862:	|      move.l d0,-(sp)
   11864:	|      jsr 1517c <trimStack>
   1186a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1186c:	|      movea.l 16(sp),a0
   11870:	|      move.l 24(a0),d0
   11874:	|      move.l d0,-(sp)
   11876:	|      pea 7 <_start+0x7>
   1187a:	|      moveq #12,d0
   1187c:	|      add.l sp,d0
   1187e:	|      move.l d0,-(sp)
   11880:	|      jsr 147f8 <getValueType>
   11886:	|      lea 12(sp),sp
   1188a:	|      tst.w d0
   1188c:	|  ,-- bne.s 11892 <builtIn_setCharacterExtra+0x5e>
   1188e:	|  |   moveq #1,d0
   11890:	+--|-- bra.s 118d0 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11892:	|  '-> moveq #24,d0
   11894:	|      add.l 16(sp),d0
   11898:	|      move.l d0,-(sp)
   1189a:	|      jsr 1517c <trimStack>
   118a0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   118a2:	|      move.l (sp),d1
   118a4:	|      move.l 4(sp),d0
   118a8:	|      move.l d1,-(sp)
   118aa:	|      move.l d0,-(sp)
   118ac:	|      jsr bbe8 <setPersonExtra>
   118b2:	|      addq.l #8,sp
   118b4:	|      movea.w d0,a0
   118b6:	|      moveq #28,d0
   118b8:	|      add.l 16(sp),d0
   118bc:	|      move.l a0,-(sp)
   118be:	|      pea 1 <_start+0x1>
   118c2:	|      move.l d0,-(sp)
   118c4:	|      jsr 150ea <setVariable>
   118ca:	|      lea 12(sp),sp
	return BR_CONTINUE;
   118ce:	|      moveq #2,d0
}
   118d0:	'----> addq.l #8,sp
   118d2:	       rts

000118d4 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   118d4:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118d6:	       movea.l 12(sp),a0
   118da:	       move.l 24(a0),d0
   118de:	       move.l d0,-(sp)
   118e0:	       pea 7 <_start+0x7>
   118e4:	       move.l sp,d0
   118e6:	       addq.l #8,d0
   118e8:	       move.l d0,-(sp)
   118ea:	       jsr 147f8 <getValueType>
   118f0:	       lea 12(sp),sp
   118f4:	       tst.w d0
   118f6:	   ,-- bne.s 118fc <builtIn_removeCharacter+0x28>
   118f8:	   |   moveq #1,d0
   118fa:	,--|-- bra.s 1191a <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   118fc:	|  '-> moveq #24,d0
   118fe:	|      add.l 12(sp),d0
   11902:	|      move.l d0,-(sp)
   11904:	|      jsr 1517c <trimStack>
   1190a:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   1190c:	|      move.l (sp),d0
   1190e:	|      move.l d0,-(sp)
   11910:	|      jsr ade8 <removeOneCharacter>
   11916:	|      addq.l #4,sp
	return BR_CONTINUE;
   11918:	|      moveq #2,d0
}
   1191a:	'----> addq.l #4,sp
   1191c:	       rts

0001191e <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   1191e:	                lea -28(sp),sp
   11922:	                move.l d2,-(sp)
   11924:	                move.l 44(sp),d1
   11928:	                move.l 48(sp),d0
   1192c:	                move.w d1,d1
   1192e:	                move.w d1,6(sp)
   11932:	                move.w d0,d0
   11934:	                move.w d0,4(sp)
	switch (numParams) {
   11938:	                moveq #2,d0
   1193a:	                cmp.l 36(sp),d0
   1193e:	      ,-------- beq.w 11a80 <moveChr+0x162>
   11942:	      |         moveq #3,d0
   11944:	      |         cmp.l 36(sp),d0
   11948:	,-----|-------- bne.w 11bb4 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1194c:	|     |         movea.l 40(sp),a0
   11950:	|     |         move.l 24(a0),d0
   11954:	|     |         move.l d0,-(sp)
   11956:	|     |         pea 1 <_start+0x1>
   1195a:	|     |         lea 20(sp),a0
   1195e:	|     |         move.l a0,-(sp)
   11960:	|     |         jsr 147f8 <getValueType>
   11966:	|     |         lea 12(sp),sp
   1196a:	|     |         tst.w d0
   1196c:	|     |     ,-- bne.s 11974 <moveChr+0x56>
   1196e:	|     |     |   moveq #1,d0
   11970:	|  ,--|-----|-- bra.w 11bc4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11974:	|  |  |     '-> moveq #24,d0
   11976:	|  |  |         add.l 40(sp),d0
   1197a:	|  |  |         move.l d0,-(sp)
   1197c:	|  |  |         jsr 1517c <trimStack>
   11982:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11984:	|  |  |         movea.l 40(sp),a0
   11988:	|  |  |         move.l 24(a0),d0
   1198c:	|  |  |         move.l d0,-(sp)
   1198e:	|  |  |         pea 1 <_start+0x1>
   11992:	|  |  |         lea 24(sp),a0
   11996:	|  |  |         move.l a0,-(sp)
   11998:	|  |  |         jsr 147f8 <getValueType>
   1199e:	|  |  |         lea 12(sp),sp
   119a2:	|  |  |         tst.w d0
   119a4:	|  |  |     ,-- bne.s 119ac <moveChr+0x8e>
   119a6:	|  |  |     |   moveq #1,d0
   119a8:	|  +--|-----|-- bra.w 11bc4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   119ac:	|  |  |     '-> moveq #24,d0
   119ae:	|  |  |         add.l 40(sp),d0
   119b2:	|  |  |         move.l d0,-(sp)
   119b4:	|  |  |         jsr 1517c <trimStack>
   119ba:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   119bc:	|  |  |         movea.l 40(sp),a0
   119c0:	|  |  |         move.l 24(a0),d0
   119c4:	|  |  |         move.l d0,-(sp)
   119c6:	|  |  |         pea 7 <_start+0x7>
   119ca:	|  |  |         lea 16(sp),a0
   119ce:	|  |  |         move.l a0,-(sp)
   119d0:	|  |  |         jsr 147f8 <getValueType>
   119d6:	|  |  |         lea 12(sp),sp
   119da:	|  |  |         tst.w d0
   119dc:	|  |  |     ,-- bne.s 119e4 <moveChr+0xc6>
   119de:	|  |  |     |   moveq #1,d0
   119e0:	|  +--|-----|-- bra.w 11bc4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   119e4:	|  |  |     '-> moveq #24,d0
   119e6:	|  |  |         add.l 40(sp),d0
   119ea:	|  |  |         move.l d0,-(sp)
   119ec:	|  |  |         jsr 1517c <trimStack>
   119f2:	|  |  |         addq.l #4,sp

			if (force) {
   119f4:	|  |  |         tst.w 6(sp)
   119f8:	|  |  |     ,-- beq.s 11a28 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   119fa:	|  |  |     |   movea.l 8(sp),a0
   119fe:	|  |  |     |   move.l 12(sp),d1
   11a02:	|  |  |     |   move.l 16(sp),d0
   11a06:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4bbe>
   11a0a:	|  |  |     |   move.l 44(sp),-(sp)
   11a0e:	|  |  |     |   move.l a0,-(sp)
   11a10:	|  |  |     |   move.l d1,-(sp)
   11a12:	|  |  |     |   move.l d0,-(sp)
   11a14:	|  |  |     |   jsr a61e <forceWalkingPerson>
   11a1a:	|  |  |     |   lea 20(sp),sp
   11a1e:	|  |  |     |   tst.w d0
   11a20:	|  |  |  ,--|-- beq.s 11a7a <moveChr+0x15c>
   11a22:	|  |  |  |  |   moveq #3,d0
   11a24:	|  +--|--|--|-- bra.w 11bc4 <moveChr+0x2a6>
			} else if (immediate) {
   11a28:	|  |  |  |  '-> tst.w 4(sp)
   11a2c:	|  |  |  |  ,-- beq.s 11a4c <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11a2e:	|  |  |  |  |   movea.l 8(sp),a0
   11a32:	|  |  |  |  |   move.l 12(sp),d1
   11a36:	|  |  |  |  |   move.l 16(sp),d0
   11a3a:	|  |  |  |  |   move.l a0,-(sp)
   11a3c:	|  |  |  |  |   move.l d1,-(sp)
   11a3e:	|  |  |  |  |   move.l d0,-(sp)
   11a40:	|  |  |  |  |   jsr a934 <jumpPerson>
   11a46:	|  |  |  |  |   lea 12(sp),sp
   11a4a:	|  |  |  +--|-- bra.s 11a7a <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11a4c:	|  |  |  |  '-> movea.l 8(sp),a0
   11a50:	|  |  |  |      move.l 12(sp),d1
   11a54:	|  |  |  |      move.l 16(sp),d0
   11a58:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4bbe>
   11a5c:	|  |  |  |      move.l 44(sp),-(sp)
   11a60:	|  |  |  |      move.l a0,-(sp)
   11a62:	|  |  |  |      move.l d1,-(sp)
   11a64:	|  |  |  |      move.l d0,-(sp)
   11a66:	|  |  |  |      jsr ab04 <makeWalkingPerson>
   11a6c:	|  |  |  |      lea 20(sp),sp
   11a70:	|  |  |  |      tst.w d0
   11a72:	|  |  |  +----- beq.s 11a7a <moveChr+0x15c>
   11a74:	|  |  |  |      moveq #3,d0
   11a76:	|  +--|--|----- bra.w 11bc4 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11a7a:	|  |  |  '----> moveq #2,d0
   11a7c:	|  +--|-------- bra.w 11bc4 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a80:	|  |  '-------> movea.l 40(sp),a0
   11a84:	|  |            move.l 24(a0),d0
   11a88:	|  |            move.l d0,-(sp)
   11a8a:	|  |            pea 7 <_start+0x7>
   11a8e:	|  |            moveq #32,d0
   11a90:	|  |            add.l sp,d0
   11a92:	|  |            move.l d0,-(sp)
   11a94:	|  |            jsr 147f8 <getValueType>
   11a9a:	|  |            lea 12(sp),sp
   11a9e:	|  |            tst.w d0
   11aa0:	|  |        ,-- bne.s 11aa8 <moveChr+0x18a>
   11aa2:	|  |        |   moveq #1,d0
   11aa4:	|  +--------|-- bra.w 11bc4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11aa8:	|  |        '-> moveq #24,d0
   11aaa:	|  |            add.l 40(sp),d0
   11aae:	|  |            move.l d0,-(sp)
   11ab0:	|  |            jsr 1517c <trimStack>
   11ab6:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11ab8:	|  |            movea.l 40(sp),a0
   11abc:	|  |            move.l 24(a0),d0
   11ac0:	|  |            move.l d0,-(sp)
   11ac2:	|  |            pea 7 <_start+0x7>
   11ac6:	|  |            lea 28(sp),a0
   11aca:	|  |            move.l a0,-(sp)
   11acc:	|  |            jsr 147f8 <getValueType>
   11ad2:	|  |            lea 12(sp),sp
   11ad6:	|  |            tst.w d0
   11ad8:	|  |        ,-- bne.s 11ae0 <moveChr+0x1c2>
   11ada:	|  |        |   moveq #1,d0
   11adc:	|  +--------|-- bra.w 11bc4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11ae0:	|  |        '-> moveq #24,d0
   11ae2:	|  |            add.l 40(sp),d0
   11ae6:	|  |            move.l d0,-(sp)
   11ae8:	|  |            jsr 1517c <trimStack>
   11aee:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11af0:	|  |            move.l 24(sp),d0
   11af4:	|  |            move.l d0,-(sp)
   11af6:	|  |            jsr 15aba <getRegionForObject>
   11afc:	|  |            addq.l #4,sp
   11afe:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11b02:	|  |        ,-- bne.s 11b0a <moveChr+0x1ec>
   11b04:	|  |        |   moveq #2,d0
   11b06:	|  +--------|-- bra.w 11bc4 <moveChr+0x2a6>

			if (force)
   11b0a:	|  |        '-> tst.w 6(sp)
   11b0e:	|  |        ,-- beq.s 11b4a <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11b10:	|  |        |   movea.l 28(sp),a0
   11b14:	|  |        |   move.l 24(a0),d2
   11b18:	|  |        |   movea.l 20(sp),a1
   11b1c:	|  |        |   movea.l 28(sp),a0
   11b20:	|  |        |   move.l 20(a0),d1
   11b24:	|  |        |   movea.l 28(sp),a0
   11b28:	|  |        |   move.l 16(a0),d0
   11b2c:	|  |        |   move.l d2,-(sp)
   11b2e:	|  |        |   move.l 44(sp),-(sp)
   11b32:	|  |        |   move.l a1,-(sp)
   11b34:	|  |        |   move.l d1,-(sp)
   11b36:	|  |        |   move.l d0,-(sp)
   11b38:	|  |        |   jsr a61e <forceWalkingPerson>
   11b3e:	|  |        |   lea 20(sp),sp
   11b42:	|  |        |   tst.w d0
   11b44:	|  |     ,--|-- beq.s 11bb0 <moveChr+0x292>
   11b46:	|  |     |  |   moveq #3,d0
   11b48:	|  +-----|--|-- bra.s 11bc4 <moveChr+0x2a6>
			}
			else if (immediate)
   11b4a:	|  |     |  '-> tst.w 4(sp)
   11b4e:	|  |     |  ,-- beq.s 11b76 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11b50:	|  |     |  |   movea.l 20(sp),a1
   11b54:	|  |     |  |   movea.l 28(sp),a0
   11b58:	|  |     |  |   move.l 20(a0),d1
   11b5c:	|  |     |  |   movea.l 28(sp),a0
   11b60:	|  |     |  |   move.l 16(a0),d0
   11b64:	|  |     |  |   move.l a1,-(sp)
   11b66:	|  |     |  |   move.l d1,-(sp)
   11b68:	|  |     |  |   move.l d0,-(sp)
   11b6a:	|  |     |  |   jsr a934 <jumpPerson>
   11b70:	|  |     |  |   lea 12(sp),sp
   11b74:	|  |     +--|-- bra.s 11bb0 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11b76:	|  |     |  '-> movea.l 28(sp),a0
   11b7a:	|  |     |      move.l 24(a0),d2
   11b7e:	|  |     |      movea.l 20(sp),a1
   11b82:	|  |     |      movea.l 28(sp),a0
   11b86:	|  |     |      move.l 20(a0),d1
   11b8a:	|  |     |      movea.l 28(sp),a0
   11b8e:	|  |     |      move.l 16(a0),d0
   11b92:	|  |     |      move.l d2,-(sp)
   11b94:	|  |     |      move.l 44(sp),-(sp)
   11b98:	|  |     |      move.l a1,-(sp)
   11b9a:	|  |     |      move.l d1,-(sp)
   11b9c:	|  |     |      move.l d0,-(sp)
   11b9e:	|  |     |      jsr ab04 <makeWalkingPerson>
   11ba4:	|  |     |      lea 20(sp),sp
   11ba8:	|  |     |      tst.w d0
   11baa:	|  |     +----- beq.s 11bb0 <moveChr+0x292>
   11bac:	|  |     |      moveq #3,d0
   11bae:	|  +-----|----- bra.s 11bc4 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11bb0:	|  |     '----> moveq #2,d0
   11bb2:	|  +----------- bra.s 11bc4 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11bb4:	'--|----------> pea 19d3b <talk.c.490538ff+0x32c>
   11bba:	   |            jsr 172d8 <KPrintF>
   11bc0:	   |            addq.l #4,sp
			return BR_ERROR;
   11bc2:	   |            moveq #1,d0
	}
}
   11bc4:	   '----------> move.l (sp)+,d2
   11bc6:	                lea 28(sp),sp
   11bca:	                rts

00011bcc <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11bcc:	clr.l -(sp)
   11bce:	clr.l -(sp)
   11bd0:	move.l 16(sp),-(sp)
   11bd4:	move.l 16(sp),-(sp)
   11bd8:	jsr 1191e <moveChr>
   11bde:	lea 16(sp),sp
}
   11be2:	rts

00011be4 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11be4:	clr.l -(sp)
   11be6:	pea 1 <_start+0x1>
   11bea:	move.l 16(sp),-(sp)
   11bee:	move.l 16(sp),-(sp)
   11bf2:	jsr 1191e <moveChr>
   11bf8:	lea 16(sp),sp
}
   11bfc:	rts

00011bfe <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11bfe:	pea 1 <_start+0x1>
   11c02:	clr.l -(sp)
   11c04:	move.l 16(sp),-(sp)
   11c08:	move.l 16(sp),-(sp)
   11c0c:	jsr 1191e <moveChr>
   11c12:	lea 16(sp),sp
}
   11c16:	rts

00011c18 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11c18:	jsr 82a2 <clearStatusBar>
	return BR_CONTINUE;
   11c1e:	moveq #2,d0
}
   11c20:	rts

00011c22 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11c22:	jsr 834a <killLastStatus>
	return BR_CONTINUE;
   11c28:	moveq #2,d0
}
   11c2a:	rts

00011c2c <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11c2c:	jsr 8238 <addStatusBar>
	return BR_CONTINUE;
   11c32:	moveq #2,d0
}
   11c34:	rts

00011c36 <builtIn_statusText>:

builtIn(statusText)
{
   11c36:	       subq.l #8,sp
   11c38:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11c3a:	       movea.l 20(sp),a0
   11c3e:	       move.l 24(a0),d0
   11c42:	       move.l d0,-(sp)
   11c44:	       jsr 14dce <getTextFromAnyVar>
   11c4a:	       addq.l #4,sp
   11c4c:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11c50:	   ,-- bne.s 11c56 <builtIn_statusText+0x20>
   11c52:	   |   moveq #1,d0
   11c54:	,--|-- bra.s 11c8a <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11c56:	|  '-> moveq #24,d0
   11c58:	|      add.l 20(sp),d0
   11c5c:	|      move.l d0,-(sp)
   11c5e:	|      jsr 1517c <trimStack>
   11c64:	|      addq.l #4,sp
	setStatusBar(newText);
   11c66:	|      move.l 8(sp),-(sp)
   11c6a:	|      jsr 85ca <setStatusBar>
   11c70:	|      addq.l #4,sp
	FreeVec(newText);
   11c72:	|      move.l 8(sp),4(sp)
   11c78:	|      move.l 1cb26 <SysBase>,d0
   11c7e:	|      movea.l d0,a6
   11c80:	|      movea.l 4(sp),a1
   11c84:	|      jsr -690(a6)
	return BR_CONTINUE;
   11c88:	|      moveq #2,d0
}
   11c8a:	'----> movea.l (sp)+,a6
   11c8c:	       addq.l #8,sp
   11c8e:	       rts

00011c90 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11c90:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c92:	       movea.l 12(sp),a0
   11c96:	       move.l 24(a0),d0
   11c9a:	       move.l d0,-(sp)
   11c9c:	       pea 1 <_start+0x1>
   11ca0:	       move.l sp,d0
   11ca2:	       addq.l #8,d0
   11ca4:	       move.l d0,-(sp)
   11ca6:	       jsr 147f8 <getValueType>
   11cac:	       lea 12(sp),sp
   11cb0:	       tst.w d0
   11cb2:	   ,-- bne.s 11cb8 <builtIn_lightStatus+0x28>
   11cb4:	   |   moveq #1,d0
   11cb6:	,--|-- bra.s 11cd6 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11cb8:	|  '-> moveq #24,d0
   11cba:	|      add.l 12(sp),d0
   11cbe:	|      move.l d0,-(sp)
   11cc0:	|      jsr 1517c <trimStack>
   11cc6:	|      addq.l #4,sp
	setLitStatus (val);
   11cc8:	|      move.l (sp),d0
   11cca:	|      move.l d0,-(sp)
   11ccc:	|      jsr 85ba <setLitStatus>
   11cd2:	|      addq.l #4,sp
	return BR_CONTINUE;
   11cd4:	|      moveq #2,d0
}
   11cd6:	'----> addq.l #4,sp
   11cd8:	       rts

00011cda <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11cda:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11cdc:	       movea.l 16(sp),a0
   11ce0:	       move.l 24(a0),d0
   11ce4:	       move.l d0,-(sp)
   11ce6:	       pea 1 <_start+0x1>
   11cea:	       move.l sp,d0
   11cec:	       addq.l #8,d0
   11cee:	       move.l d0,-(sp)
   11cf0:	       jsr 147f8 <getValueType>
   11cf6:	       lea 12(sp),sp
   11cfa:	       tst.w d0
   11cfc:	   ,-- bne.s 11d02 <builtIn_positionStatus+0x28>
   11cfe:	   |   moveq #1,d0
   11d00:	,--|-- bra.s 11d5c <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11d02:	|  '-> moveq #24,d0
   11d04:	|      add.l 16(sp),d0
   11d08:	|      move.l d0,-(sp)
   11d0a:	|      jsr 1517c <trimStack>
   11d10:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d12:	|      movea.l 16(sp),a0
   11d16:	|      move.l 24(a0),d0
   11d1a:	|      move.l d0,-(sp)
   11d1c:	|      pea 1 <_start+0x1>
   11d20:	|      moveq #12,d0
   11d22:	|      add.l sp,d0
   11d24:	|      move.l d0,-(sp)
   11d26:	|      jsr 147f8 <getValueType>
   11d2c:	|      lea 12(sp),sp
   11d30:	|      tst.w d0
   11d32:	|  ,-- bne.s 11d38 <builtIn_positionStatus+0x5e>
   11d34:	|  |   moveq #1,d0
   11d36:	+--|-- bra.s 11d5c <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11d38:	|  '-> moveq #24,d0
   11d3a:	|      add.l 16(sp),d0
   11d3e:	|      move.l d0,-(sp)
   11d40:	|      jsr 1517c <trimStack>
   11d46:	|      addq.l #4,sp
	positionStatus (x, y);
   11d48:	|      move.l (sp),d1
   11d4a:	|      move.l 4(sp),d0
   11d4e:	|      move.l d1,-(sp)
   11d50:	|      move.l d0,-(sp)
   11d52:	|      jsr 83ac <positionStatus>
   11d58:	|      addq.l #8,sp
	return BR_CONTINUE;
   11d5a:	|      moveq #2,d0
}
   11d5c:	'----> addq.l #8,sp
   11d5e:	       rts

00011d60 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11d60:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d62:	       movea.l 12(sp),a0
   11d66:	       move.l 24(a0),d0
   11d6a:	       move.l d0,-(sp)
   11d6c:	       pea 1 <_start+0x1>
   11d70:	       move.l sp,d0
   11d72:	       addq.l #8,d0
   11d74:	       move.l d0,-(sp)
   11d76:	       jsr 147f8 <getValueType>
   11d7c:	       lea 12(sp),sp
   11d80:	       tst.w d0
   11d82:	   ,-- bne.s 11d88 <builtIn_alignStatus+0x28>
   11d84:	   |   moveq #1,d0
   11d86:	,--|-- bra.s 11da8 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11d88:	|  '-> moveq #24,d0
   11d8a:	|      add.l 12(sp),d0
   11d8e:	|      move.l d0,-(sp)
   11d90:	|      jsr 1517c <trimStack>
   11d96:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11d98:	|      move.l (sp),d0
   11d9a:	|      movea.l 1c4a4 <nowStatus>,a0
   11da0:	|      move.l d0,d0
   11da2:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11da6:	|      moveq #2,d0
}
   11da8:	'----> addq.l #4,sp
   11daa:	       rts

00011dac <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11dac:	             tst.l 4(sp)
   11db0:	      ,----- beq.s 11dbc <getFuncNumForCallback+0x10>
   11db2:	      |      moveq #1,d0
   11db4:	      |      cmp.l 4(sp),d0
   11db8:	      |  ,-- beq.s 11dc2 <getFuncNumForCallback+0x16>
   11dba:	   ,--|--|-- bra.s 11df8 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11dbc:	   |  '--|-> clr.l 12(sp)
			break;
   11dc0:	,--|-----|-- bra.s 11e0a <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11dc2:	|  |     '-> movea.l 8(sp),a0
   11dc6:	|  |         move.l 24(a0),d0
   11dca:	|  |         move.l d0,-(sp)
   11dcc:	|  |         pea 2 <_start+0x2>
   11dd0:	|  |         move.l 20(sp),-(sp)
   11dd4:	|  |         jsr 147f8 <getValueType>
   11dda:	|  |         lea 12(sp),sp
   11dde:	|  |         tst.w d0
   11de0:	|  |     ,-- bne.s 11de6 <getFuncNumForCallback+0x3a>
   11de2:	|  |     |   clr.w d0
   11de4:	|  |  ,--|-- bra.s 11e0c <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11de6:	|  |  |  '-> moveq #24,d0
   11de8:	|  |  |      add.l 8(sp),d0
   11dec:	|  |  |      move.l d0,-(sp)
   11dee:	|  |  |      jsr 1517c <trimStack>
   11df4:	|  |  |      addq.l #4,sp
			break;
   11df6:	+--|--|----- bra.s 11e0a <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11df8:	|  '--|----> pea 19d71 <talk.c.490538ff+0x362>
   11dfe:	|     |      jsr 172d8 <KPrintF>
   11e04:	|     |      addq.l #4,sp
			return FALSE;
   11e06:	|     |      clr.w d0
   11e08:	|     +----- bra.s 11e0c <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11e0a:	'-----|----> moveq #1,d0
}
   11e0c:	      '----> rts

00011e0e <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11e0e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e10:	       move.l sp,d0
   11e12:	       move.l d0,-(sp)
   11e14:	       move.l 16(sp),-(sp)
   11e18:	       move.l 16(sp),-(sp)
   11e1c:	       jsr 11dac <getFuncNumForCallback>
   11e22:	       lea 12(sp),sp
   11e26:	       tst.w d0
   11e28:	,----- beq.s 11e38 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11e2a:	|      movea.l 1c496 <currentEvents>,a0
   11e30:	|      move.l (sp),d0
   11e32:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11e34:	|      moveq #2,d0
   11e36:	|  ,-- bra.s 11e3a <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11e38:	'--|-> moveq #1,d0
}
   11e3a:	   '-> addq.l #4,sp
   11e3c:	       rts

00011e3e <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11e3e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e40:	       move.l sp,d0
   11e42:	       move.l d0,-(sp)
   11e44:	       move.l 16(sp),-(sp)
   11e48:	       move.l 16(sp),-(sp)
   11e4c:	       jsr 11dac <getFuncNumForCallback>
   11e52:	       lea 12(sp),sp
   11e56:	       tst.w d0
   11e58:	,----- beq.s 11e6a <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11e5a:	|      movea.l 1c496 <currentEvents>,a0
   11e60:	|      move.l (sp),d0
   11e62:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11e66:	|      moveq #2,d0
   11e68:	|  ,-- bra.s 11e6c <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11e6a:	'--|-> moveq #1,d0
}
   11e6c:	   '-> addq.l #4,sp
   11e6e:	       rts

00011e70 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11e70:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e72:	       move.l sp,d0
   11e74:	       move.l d0,-(sp)
   11e76:	       move.l 16(sp),-(sp)
   11e7a:	       move.l 16(sp),-(sp)
   11e7e:	       jsr 11dac <getFuncNumForCallback>
   11e84:	       lea 12(sp),sp
   11e88:	       tst.w d0
   11e8a:	,----- beq.s 11e9c <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11e8c:	|      movea.l 1c496 <currentEvents>,a0
   11e92:	|      move.l (sp),d0
   11e94:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11e98:	|      moveq #2,d0
   11e9a:	|  ,-- bra.s 11e9e <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11e9c:	'--|-> moveq #1,d0
}
   11e9e:	   '-> addq.l #4,sp
   11ea0:	       rts

00011ea2 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11ea2:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ea4:	       move.l sp,d0
   11ea6:	       move.l d0,-(sp)
   11ea8:	       move.l 16(sp),-(sp)
   11eac:	       move.l 16(sp),-(sp)
   11eb0:	       jsr 11dac <getFuncNumForCallback>
   11eb6:	       lea 12(sp),sp
   11eba:	       tst.w d0
   11ebc:	,----- beq.s 11ece <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11ebe:	|      movea.l 1c496 <currentEvents>,a0
   11ec4:	|      move.l (sp),d0
   11ec6:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11eca:	|      moveq #2,d0
   11ecc:	|  ,-- bra.s 11ed0 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11ece:	'--|-> moveq #1,d0
}
   11ed0:	   '-> addq.l #4,sp
   11ed2:	       rts

00011ed4 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11ed4:	       subq.l #8,sp
   11ed6:	       move.l a2,-(sp)
	UNUSEDALL
	int functionNum;	

	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ed8:	       move.l sp,d0
   11eda:	       addq.l #4,d0
   11edc:	       move.l d0,-(sp)
   11ede:	       move.l 24(sp),-(sp)
   11ee2:	       move.l 24(sp),-(sp)
   11ee6:	       jsr 11dac <getFuncNumForCallback>
   11eec:	       lea 12(sp),sp
   11ef0:	       tst.w d0
   11ef2:	,----- beq.s 11f3e <builtIn_onFocusChange+0x6a>
	{
		struct loadedFunction *oldfunc = currentEvents -> focusFunction;
   11ef4:	|      movea.l 1c496 <currentEvents>,a0
   11efa:	|      move.l 20(a0),8(sp)
		currentEvents -> focusFunction = preloadNewFunctionNum(functionNum);		
   11f00:	|      move.l 4(sp),d0
   11f04:	|      movea.l 1c496 <currentEvents>,a2
   11f0a:	|      move.l d0,-(sp)
   11f0c:	|      jsr 70b6 <preloadNewFunctionNum>
   11f12:	|      addq.l #4,sp
   11f14:	|      move.l d0,20(a2)
		if( oldfunc != NULL && oldfunc != currentEvents -> focusFunction )
   11f18:	|      tst.l 8(sp)
   11f1c:	|  ,-- beq.s 11f3a <builtIn_onFocusChange+0x66>
   11f1e:	|  |   movea.l 1c496 <currentEvents>,a0
   11f24:	|  |   move.l 20(a0),d0
   11f28:	|  |   cmp.l 8(sp),d0
   11f2c:	|  +-- beq.s 11f3a <builtIn_onFocusChange+0x66>
		{
			unloadFunction(oldfunc);
   11f2e:	|  |   move.l 8(sp),-(sp)
   11f32:	|  |   jsr 7524 <unloadFunction>
   11f38:	|  |   addq.l #4,sp
		}
		

		return BR_CONTINUE;
   11f3a:	|  '-> moveq #2,d0
   11f3c:	|  ,-- bra.s 11f40 <builtIn_onFocusChange+0x6c>
	}
	return BR_ERROR;
   11f3e:	'--|-> moveq #1,d0
}
   11f40:	   '-> movea.l (sp)+,a2
   11f42:	       addq.l #8,sp
   11f44:	       rts

00011f46 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11f46:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f48:	       move.l sp,d0
   11f4a:	       move.l d0,-(sp)
   11f4c:	       move.l 16(sp),-(sp)
   11f50:	       move.l 16(sp),-(sp)
   11f54:	       jsr 11dac <getFuncNumForCallback>
   11f5a:	       lea 12(sp),sp
   11f5e:	       tst.w d0
   11f60:	,----- beq.s 11f72 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11f62:	|      movea.l 1c496 <currentEvents>,a0
   11f68:	|      move.l (sp),d0
   11f6a:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11f6e:	|      moveq #2,d0
   11f70:	|  ,-- bra.s 11f74 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11f72:	'--|-> moveq #1,d0
}
   11f74:	   '-> addq.l #4,sp
   11f76:	       rts

00011f78 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11f78:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f7a:	       move.l sp,d0
   11f7c:	       move.l d0,-(sp)
   11f7e:	       move.l 16(sp),-(sp)
   11f82:	       move.l 16(sp),-(sp)
   11f86:	       jsr 11dac <getFuncNumForCallback>
   11f8c:	       lea 12(sp),sp
   11f90:	       tst.w d0
   11f92:	,----- beq.s 11fa4 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11f94:	|      movea.l 1c496 <currentEvents>,a0
   11f9a:	|      move.l (sp),d0
   11f9c:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11fa0:	|      moveq #2,d0
   11fa2:	|  ,-- bra.s 11fa6 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11fa4:	'--|-> moveq #1,d0
}
   11fa6:	   '-> addq.l #4,sp
   11fa8:	       rts

00011faa <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11faa:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11fac:	          move.l sp,d0
   11fae:	          move.l d0,-(sp)
   11fb0:	          move.l 16(sp),-(sp)
   11fb4:	          move.l 16(sp),-(sp)
   11fb8:	          jsr 11dac <getFuncNumForCallback>
   11fbe:	          lea 12(sp),sp
   11fc2:	          tst.w d0
   11fc4:	,-------- beq.s 11ff0 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11fc6:	|         move.l 1caf6 <noStack>,d1
   11fcc:	|         move.l (sp),d0
   11fce:	|         pea 1 <_start+0x1>
   11fd2:	|         move.l d1,-(sp)
   11fd4:	|         clr.l -(sp)
   11fd6:	|         clr.l -(sp)
   11fd8:	|         move.l d0,-(sp)
   11fda:	|         jsr 7478 <startNewFunctionNum>
   11fe0:	|         lea 20(sp),sp
   11fe4:	|         tst.l d0
   11fe6:	|     ,-- bne.s 11fec <builtIn_spawnSub+0x42>
   11fe8:	|     |   moveq #1,d0
   11fea:	|  ,--|-- bra.s 11ff2 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11fec:	|  |  '-> moveq #2,d0
   11fee:	|  +----- bra.s 11ff2 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11ff0:	'--|----> moveq #1,d0
}
   11ff2:	   '----> addq.l #4,sp
   11ff4:	          rts

00011ff6 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11ff6:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ff8:	          move.l sp,d0
   11ffa:	          addq.l #4,d0
   11ffc:	          move.l d0,-(sp)
   11ffe:	          move.l 20(sp),-(sp)
   12002:	          move.l 20(sp),-(sp)
   12006:	          jsr 11dac <getFuncNumForCallback>
   1200c:	          lea 12(sp),sp
   12010:	          tst.w d0
   12012:	,-------- beq.s 12048 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   12014:	|         move.l 4(sp),d1
   12018:	|         move.l sp,d0
   1201a:	|         addq.l #2,d0
   1201c:	|         move.l d0,-(sp)
   1201e:	|         move.l 20(sp),-(sp)
   12022:	|         move.l d1,-(sp)
   12024:	|         jsr 50b8 <cancelAFunction>
   1202a:	|         lea 12(sp),sp
		if (killedMyself) {
   1202e:	|         move.w 2(sp),d0
   12032:	|  ,----- beq.s 12044 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   12034:	|  |      move.l 16(sp),-(sp)
   12038:	|  |      jsr 4faa <abortFunction>
   1203e:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   12040:	|  |      moveq #5,d0
   12042:	|  |  ,-- bra.s 1204a <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   12044:	|  '--|-> moveq #2,d0
   12046:	|     +-- bra.s 1204a <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   12048:	'-----|-> moveq #1,d0
}
   1204a:	      '-> addq.l #8,sp
   1204c:	          rts

0001204e <builtIn_stringWidth>:

builtIn(stringWidth)
{
   1204e:	       subq.l #8,sp
   12050:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   12052:	       movea.l 20(sp),a0
   12056:	       move.l 24(a0),d0
   1205a:	       move.l d0,-(sp)
   1205c:	       jsr 14dce <getTextFromAnyVar>
   12062:	       addq.l #4,sp
   12064:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   12068:	   ,-- bne.s 1206e <builtIn_stringWidth+0x20>
   1206a:	   |   moveq #1,d0
   1206c:	,--|-- bra.s 120bc <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   1206e:	|  '-> moveq #24,d0
   12070:	|      add.l 20(sp),d0
   12074:	|      move.l d0,-(sp)
   12076:	|      jsr 1517c <trimStack>
   1207c:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   1207e:	|      move.l 8(sp),-(sp)
   12082:	|      jsr 158e2 <stringWidth>
   12088:	|      addq.l #4,sp
   1208a:	|      move.l d0,d1
   1208c:	|      moveq #28,d0
   1208e:	|      add.l 20(sp),d0
   12092:	|      move.l d1,-(sp)
   12094:	|      pea 1 <_start+0x1>
   12098:	|      move.l d0,-(sp)
   1209a:	|      jsr 150ea <setVariable>
   120a0:	|      lea 12(sp),sp
	FreeVec(theText);
   120a4:	|      move.l 8(sp),4(sp)
   120aa:	|      move.l 1cb26 <SysBase>,d0
   120b0:	|      movea.l d0,a6
   120b2:	|      movea.l 4(sp),a1
   120b6:	|      jsr -690(a6)
	return BR_CONTINUE;
   120ba:	|      moveq #2,d0
}
   120bc:	'----> movea.l (sp)+,a6
   120be:	       addq.l #8,sp
   120c0:	       rts

000120c2 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   120c2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   120c4:	       movea.l 12(sp),a0
   120c8:	       move.l 24(a0),d0
   120cc:	       move.l d0,-(sp)
   120ce:	       pea 1 <_start+0x1>
   120d2:	       move.l sp,d0
   120d4:	       addq.l #8,d0
   120d6:	       move.l d0,-(sp)
   120d8:	       jsr 147f8 <getValueType>
   120de:	       lea 12(sp),sp
   120e2:	       tst.w d0
   120e4:	   ,-- bne.s 120ea <builtIn_hardScroll+0x28>
   120e6:	   |   moveq #1,d0
   120e8:	,--|-- bra.s 12108 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   120ea:	|  '-> moveq #24,d0
   120ec:	|      add.l 12(sp),d0
   120f0:	|      move.l d0,-(sp)
   120f2:	|      jsr 1517c <trimStack>
   120f8:	|      addq.l #4,sp
	hardScroll (v);
   120fa:	|      move.l (sp),d0
   120fc:	|      move.l d0,-(sp)
   120fe:	|      jsr d270 <hardScroll>
   12104:	|      addq.l #4,sp
	return BR_CONTINUE;
   12106:	|      moveq #2,d0
}
   12108:	'----> addq.l #4,sp
   1210a:	       rts

0001210c <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   1210c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1210e:	       movea.l 12(sp),a0
   12112:	       move.l 24(a0),d0
   12116:	       move.l d0,-(sp)
   12118:	       pea 7 <_start+0x7>
   1211c:	       move.l sp,d0
   1211e:	       addq.l #8,d0
   12120:	       move.l d0,-(sp)
   12122:	       jsr 147f8 <getValueType>
   12128:	       lea 12(sp),sp
   1212c:	       tst.w d0
   1212e:	   ,-- bne.s 12134 <builtIn_isScreenRegion+0x28>
   12130:	   |   moveq #1,d0
   12132:	,--|-- bra.s 12174 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   12134:	|  '-> moveq #24,d0
   12136:	|      add.l 12(sp),d0
   1213a:	|      move.l d0,-(sp)
   1213c:	|      jsr 1517c <trimStack>
   12142:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   12144:	|      move.l (sp),d0
   12146:	|      move.l d0,-(sp)
   12148:	|      jsr 15aba <getRegionForObject>
   1214e:	|      addq.l #4,sp
   12150:	|      tst.l d0
   12152:	|      sne d0
   12154:	|      neg.b d0
   12156:	|      moveq #0,d1
   12158:	|      move.b d0,d1
   1215a:	|      moveq #28,d0
   1215c:	|      add.l 12(sp),d0
   12160:	|      move.l d1,-(sp)
   12162:	|      pea 1 <_start+0x1>
   12166:	|      move.l d0,-(sp)
   12168:	|      jsr 150ea <setVariable>
   1216e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12172:	|      moveq #2,d0
}
   12174:	'----> addq.l #4,sp
   12176:	       rts

00012178 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   12178:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1217a:	       movea.l 12(sp),a0
   1217e:	       move.l 24(a0),d0
   12182:	       move.l d0,-(sp)
   12184:	       pea 1 <_start+0x1>
   12188:	       move.l sp,d0
   1218a:	       addq.l #8,d0
   1218c:	       move.l d0,-(sp)
   1218e:	       jsr 147f8 <getValueType>
   12194:	       lea 12(sp),sp
   12198:	       tst.w d0
   1219a:	   ,-- bne.s 121a0 <builtIn_setSpeechSpeed+0x28>
   1219c:	   |   moveq #1,d0
   1219e:	,--|-- bra.s 121ee <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   121a0:	|  '-> moveq #24,d0
   121a2:	|      add.l 12(sp),d0
   121a6:	|      move.l d0,-(sp)
   121a8:	|      jsr 1517c <trimStack>
   121ae:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   121b0:	|      move.l (sp),d0
   121b2:	|      move.l d0,-(sp)
   121b4:	|      jsr 1770a <__floatsisf>
   121ba:	|      addq.l #4,sp
   121bc:	|      move.l #1008981770,-(sp)
   121c2:	|      move.l d0,-(sp)
   121c4:	|      jsr 177bc <__mulsf3>
   121ca:	|      addq.l #8,sp
   121cc:	|      move.l d0,1c490 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   121d2:	|      moveq #28,d0
   121d4:	|      add.l 12(sp),d0
   121d8:	|      pea 1 <_start+0x1>
   121dc:	|      pea 1 <_start+0x1>
   121e0:	|      move.l d0,-(sp)
   121e2:	|      jsr 150ea <setVariable>
   121e8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   121ec:	|      moveq #2,d0
}
   121ee:	'----> addq.l #4,sp
   121f0:	       rts

000121f2 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   121f2:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   121f4:	       movea.l 12(sp),a0
   121f8:	       move.l 24(a0),d0
   121fc:	       move.l d0,-(sp)
   121fe:	       pea 1 <_start+0x1>
   12202:	       move.l sp,d0
   12204:	       addq.l #8,d0
   12206:	       move.l d0,-(sp)
   12208:	       jsr 147f8 <getValueType>
   1220e:	       lea 12(sp),sp
   12212:	       tst.w d0
   12214:	   ,-- bne.s 1221a <builtIn_setFontSpacing+0x28>
   12216:	   |   moveq #1,d0
   12218:	,--|-- bra.s 12250 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   1221a:	|  '-> move.l (sp),d0
   1221c:	|      move.l d0,d0
   1221e:	|      move.w d0,1ca1e <fontSpace>
	trimStack (&fun -> stack);
   12224:	|      moveq #24,d0
   12226:	|      add.l 12(sp),d0
   1222a:	|      move.l d0,-(sp)
   1222c:	|      jsr 1517c <trimStack>
   12232:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12234:	|      moveq #28,d0
   12236:	|      add.l 12(sp),d0
   1223a:	|      pea 1 <_start+0x1>
   1223e:	|      pea 1 <_start+0x1>
   12242:	|      move.l d0,-(sp)
   12244:	|      jsr 150ea <setVariable>
   1224a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1224e:	|      moveq #2,d0
}
   12250:	'----> addq.l #4,sp
   12252:	       rts

00012254 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   12254:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12256:	          movea.l 12(sp),a0
   1225a:	          move.l 24(a0),d0
   1225e:	          move.l d0,-(sp)
   12260:	          pea 1 <_start+0x1>
   12264:	          move.l sp,d0
   12266:	          addq.l #8,d0
   12268:	          move.l d0,-(sp)
   1226a:	          jsr 147f8 <getValueType>
   12270:	          lea 12(sp),sp
   12274:	          tst.w d0
   12276:	      ,-- bne.s 1227c <builtIn_transitionLevel+0x28>
   12278:	      |   moveq #1,d0
   1227a:	,-----|-- bra.s 122d0 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   1227c:	|     '-> moveq #24,d0
   1227e:	|         add.l 12(sp),d0
   12282:	|         move.l d0,-(sp)
   12284:	|         jsr 1517c <trimStack>
   1228a:	|         addq.l #4,sp

	if (number < 0)
   1228c:	|         move.l (sp),d0
   1228e:	|     ,-- bpl.s 12298 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   12290:	|     |   clr.b 1c494 <brightnessLevel>
   12296:	|  ,--|-- bra.s 122b4 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   12298:	|  |  '-> move.l (sp),d0
   1229a:	|  |      cmpi.l #255,d0
   122a0:	|  |  ,-- ble.s 122aa <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   122a2:	|  |  |   st 1c494 <brightnessLevel>
   122a8:	|  +--|-- bra.s 122b4 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   122aa:	|  |  '-> move.l (sp),d0
   122ac:	|  |      move.l d0,d0
   122ae:	|  |      move.b d0,1c494 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   122b4:	|  '----> moveq #28,d0
   122b6:	|         add.l 12(sp),d0
   122ba:	|         pea 1 <_start+0x1>
   122be:	|         pea 1 <_start+0x1>
   122c2:	|         move.l d0,-(sp)
   122c4:	|         jsr 150ea <setVariable>
   122ca:	|         lea 12(sp),sp
	return BR_CONTINUE;
   122ce:	|         moveq #2,d0
}
   122d0:	'-------> addq.l #4,sp
   122d2:	          rts

000122d4 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   122d4:	movea.l 8(sp),a0
   122d8:	move.l 24(a0),d0
   122dc:	move.l d0,-(sp)
   122de:	jsr 14d38 <getBoolean>
   122e4:	addq.l #4,sp
   122e6:	move.w d0,1cac6 <captureAllKeys>
	trimStack (&fun -> stack);
   122ec:	moveq #24,d0
   122ee:	add.l 8(sp),d0
   122f2:	move.l d0,-(sp)
   122f4:	jsr 1517c <trimStack>
   122fa:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   122fc:	move.w 1cac6 <captureAllKeys>,d0
   12302:	movea.w d0,a0
   12304:	moveq #28,d0
   12306:	add.l 8(sp),d0
   1230a:	move.l a0,-(sp)
   1230c:	pea 1 <_start+0x1>
   12310:	move.l d0,-(sp)
   12312:	jsr 150ea <setVariable>
   12318:	lea 12(sp),sp
	return BR_CONTINUE;
   1231c:	moveq #2,d0
}
   1231e:	rts

00012320 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12320:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12324:	       movea.l 20(sp),a0
   12328:	       move.l 24(a0),d0
   1232c:	       move.l d0,-(sp)
   1232e:	       pea 1 <_start+0x1>
   12332:	       moveq #12,d0
   12334:	       add.l sp,d0
   12336:	       move.l d0,-(sp)
   12338:	       jsr 147f8 <getValueType>
   1233e:	       lea 12(sp),sp
   12342:	       tst.w d0
   12344:	   ,-- bne.s 1234c <builtIn_spinCharacter+0x2c>
   12346:	   |   moveq #1,d0
   12348:	,--|-- bra.w 123fc <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1234c:	|  '-> moveq #24,d0
   1234e:	|      add.l 20(sp),d0
   12352:	|      move.l d0,-(sp)
   12354:	|      jsr 1517c <trimStack>
   1235a:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1235c:	|      movea.l 20(sp),a0
   12360:	|      move.l 24(a0),d0
   12364:	|      move.l d0,-(sp)
   12366:	|      pea 7 <_start+0x7>
   1236a:	|      lea 8(sp),a0
   1236e:	|      move.l a0,-(sp)
   12370:	|      jsr 147f8 <getValueType>
   12376:	|      lea 12(sp),sp
   1237a:	|      tst.w d0
   1237c:	|  ,-- bne.s 12382 <builtIn_spinCharacter+0x62>
   1237e:	|  |   moveq #1,d0
   12380:	+--|-- bra.s 123fc <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12382:	|  '-> moveq #24,d0
   12384:	|      add.l 20(sp),d0
   12388:	|      move.l d0,-(sp)
   1238a:	|      jsr 1517c <trimStack>
   12390:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12392:	|      move.l (sp),d0
   12394:	|      move.l d0,-(sp)
   12396:	|      jsr a5b0 <findPerson>
   1239c:	|      addq.l #4,sp
   1239e:	|      move.l d0,8(sp)
	if (thisPerson) {
   123a2:	|  ,-- beq.s 123e2 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   123a4:	|  |   move.l 4(sp),d0
   123a8:	|  |   movea.l 8(sp),a0
   123ac:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   123b0:	|  |   movea.l 8(sp),a0
   123b4:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   123ba:	|  |   movea.l 8(sp),a0
   123be:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   123c4:	|  |   moveq #28,d0
   123c6:	|  |   add.l 20(sp),d0
   123ca:	|  |   pea 1 <_start+0x1>
   123ce:	|  |   pea 1 <_start+0x1>
   123d2:	|  |   move.l d0,-(sp)
   123d4:	|  |   jsr 150ea <setVariable>
   123da:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   123de:	|  |   moveq #3,d0
   123e0:	+--|-- bra.s 123fc <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   123e2:	|  '-> moveq #28,d0
   123e4:	|      add.l 20(sp),d0
   123e8:	|      clr.l -(sp)
   123ea:	|      pea 1 <_start+0x1>
   123ee:	|      move.l d0,-(sp)
   123f0:	|      jsr 150ea <setVariable>
   123f6:	|      lea 12(sp),sp
		return BR_CONTINUE;
   123fa:	|      moveq #2,d0
	}
}
   123fc:	'----> lea 12(sp),sp
   12400:	       rts

00012402 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   12402:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12404:	          movea.l 16(sp),a0
   12408:	          move.l 24(a0),d0
   1240c:	          move.l d0,-(sp)
   1240e:	          pea 7 <_start+0x7>
   12412:	          move.l sp,d0
   12414:	          addq.l #8,d0
   12416:	          move.l d0,-(sp)
   12418:	          jsr 147f8 <getValueType>
   1241e:	          lea 12(sp),sp
   12422:	          tst.w d0
   12424:	      ,-- bne.s 1242a <builtIn_getCharacterDirection+0x28>
   12426:	      |   moveq #1,d0
   12428:	,-----|-- bra.s 12488 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   1242a:	|     '-> moveq #24,d0
   1242c:	|         add.l 16(sp),d0
   12430:	|         move.l d0,-(sp)
   12432:	|         jsr 1517c <trimStack>
   12438:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1243a:	|         move.l (sp),d0
   1243c:	|         move.l d0,-(sp)
   1243e:	|         jsr a5b0 <findPerson>
   12444:	|         addq.l #4,sp
   12446:	|         move.l d0,4(sp)
	if (thisPerson) {
   1244a:	|  ,----- beq.s 1246e <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   1244c:	|  |      movea.l 4(sp),a0
   12450:	|  |      move.l 106(a0),d1
   12454:	|  |      moveq #28,d0
   12456:	|  |      add.l 16(sp),d0
   1245a:	|  |      move.l d1,-(sp)
   1245c:	|  |      pea 1 <_start+0x1>
   12460:	|  |      move.l d0,-(sp)
   12462:	|  |      jsr 150ea <setVariable>
   12468:	|  |      lea 12(sp),sp
   1246c:	|  |  ,-- bra.s 12486 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1246e:	|  '--|-> moveq #28,d0
   12470:	|     |   add.l 16(sp),d0
   12474:	|     |   clr.l -(sp)
   12476:	|     |   pea 1 <_start+0x1>
   1247a:	|     |   move.l d0,-(sp)
   1247c:	|     |   jsr 150ea <setVariable>
   12482:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12486:	|     '-> moveq #2,d0
}
   12488:	'-------> addq.l #8,sp
   1248a:	          rts

0001248c <builtIn_isCharacter>:

builtIn(isCharacter)
{
   1248c:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1248e:	       movea.l 16(sp),a0
   12492:	       move.l 24(a0),d0
   12496:	       move.l d0,-(sp)
   12498:	       pea 7 <_start+0x7>
   1249c:	       move.l sp,d0
   1249e:	       addq.l #8,d0
   124a0:	       move.l d0,-(sp)
   124a2:	       jsr 147f8 <getValueType>
   124a8:	       lea 12(sp),sp
   124ac:	       tst.w d0
   124ae:	   ,-- bne.s 124b4 <builtIn_isCharacter+0x28>
   124b0:	   |   moveq #1,d0
   124b2:	,--|-- bra.s 124f6 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   124b4:	|  '-> moveq #24,d0
   124b6:	|      add.l 16(sp),d0
   124ba:	|      move.l d0,-(sp)
   124bc:	|      jsr 1517c <trimStack>
   124c2:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   124c4:	|      move.l (sp),d0
   124c6:	|      move.l d0,-(sp)
   124c8:	|      jsr a5b0 <findPerson>
   124ce:	|      addq.l #4,sp
   124d0:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   124d4:	|      sne d0
   124d6:	|      neg.b d0
   124d8:	|      moveq #0,d1
   124da:	|      move.b d0,d1
   124dc:	|      moveq #28,d0
   124de:	|      add.l 16(sp),d0
   124e2:	|      move.l d1,-(sp)
   124e4:	|      pea 1 <_start+0x1>
   124e8:	|      move.l d0,-(sp)
   124ea:	|      jsr 150ea <setVariable>
   124f0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   124f4:	|      moveq #2,d0
}
   124f6:	'----> addq.l #8,sp
   124f8:	       rts

000124fa <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   124fa:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   124fc:	          movea.l 16(sp),a0
   12500:	          move.l 24(a0),d0
   12504:	          move.l d0,-(sp)
   12506:	          pea 7 <_start+0x7>
   1250a:	          move.l sp,d0
   1250c:	          addq.l #8,d0
   1250e:	          move.l d0,-(sp)
   12510:	          jsr 147f8 <getValueType>
   12516:	          lea 12(sp),sp
   1251a:	          tst.w d0
   1251c:	      ,-- bne.s 12522 <builtIn_normalCharacter+0x28>
   1251e:	      |   moveq #1,d0
   12520:	,-----|-- bra.s 1259e <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   12522:	|     '-> moveq #24,d0
   12524:	|         add.l 16(sp),d0
   12528:	|         move.l d0,-(sp)
   1252a:	|         jsr 1517c <trimStack>
   12530:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12532:	|         move.l (sp),d0
   12534:	|         move.l d0,-(sp)
   12536:	|         jsr a5b0 <findPerson>
   1253c:	|         addq.l #4,sp
   1253e:	|         move.l d0,4(sp)
	if (thisPerson)
   12542:	|  ,----- beq.s 12584 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   12544:	|  |      movea.l 4(sp),a0
   12548:	|  |      movea.l 80(a0),a0
   1254c:	|  |      move.l (a0),d1
   1254e:	|  |      movea.l 4(sp),a0
   12552:	|  |      move.l 106(a0),d0
   12556:	|  |      add.l d0,d0
   12558:	|  |      add.l d0,d0
   1255a:	|  |      movea.l d1,a0
   1255c:	|  |      adda.l d0,a0
   1255e:	|  |      move.l (a0),d0
   12560:	|  |      movea.l 4(sp),a0
   12564:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12568:	|  |      moveq #28,d0
   1256a:	|  |      add.l 16(sp),d0
   1256e:	|  |      pea 1 <_start+0x1>
   12572:	|  |      pea 1 <_start+0x1>
   12576:	|  |      move.l d0,-(sp)
   12578:	|  |      jsr 150ea <setVariable>
   1257e:	|  |      lea 12(sp),sp
   12582:	|  |  ,-- bra.s 1259c <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12584:	|  '--|-> moveq #28,d0
   12586:	|     |   add.l 16(sp),d0
   1258a:	|     |   clr.l -(sp)
   1258c:	|     |   pea 1 <_start+0x1>
   12590:	|     |   move.l d0,-(sp)
   12592:	|     |   jsr 150ea <setVariable>
   12598:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1259c:	|     '-> moveq #2,d0
}
   1259e:	'-------> addq.l #8,sp
   125a0:	          rts

000125a2 <builtIn_isMoving>:

builtIn(isMoving)
{
   125a2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   125a4:	          movea.l 16(sp),a0
   125a8:	          move.l 24(a0),d0
   125ac:	          move.l d0,-(sp)
   125ae:	          pea 7 <_start+0x7>
   125b2:	          move.l sp,d0
   125b4:	          addq.l #8,d0
   125b6:	          move.l d0,-(sp)
   125b8:	          jsr 147f8 <getValueType>
   125be:	          lea 12(sp),sp
   125c2:	          tst.w d0
   125c4:	      ,-- bne.s 125ca <builtIn_isMoving+0x28>
   125c6:	      |   moveq #1,d0
   125c8:	,-----|-- bra.s 1262a <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   125ca:	|     '-> moveq #24,d0
   125cc:	|         add.l 16(sp),d0
   125d0:	|         move.l d0,-(sp)
   125d2:	|         jsr 1517c <trimStack>
   125d8:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   125da:	|         move.l (sp),d0
   125dc:	|         move.l d0,-(sp)
   125de:	|         jsr a5b0 <findPerson>
   125e4:	|         addq.l #4,sp
   125e6:	|         move.l d0,4(sp)
	if (thisPerson)
   125ea:	|  ,----- beq.s 12610 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   125ec:	|  |      movea.l 4(sp),a0
   125f0:	|  |      move.w 64(a0),d0
   125f4:	|  |      movea.w d0,a0
   125f6:	|  |      moveq #28,d0
   125f8:	|  |      add.l 16(sp),d0
   125fc:	|  |      move.l a0,-(sp)
   125fe:	|  |      pea 1 <_start+0x1>
   12602:	|  |      move.l d0,-(sp)
   12604:	|  |      jsr 150ea <setVariable>
   1260a:	|  |      lea 12(sp),sp
   1260e:	|  |  ,-- bra.s 12628 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12610:	|  '--|-> moveq #28,d0
   12612:	|     |   add.l 16(sp),d0
   12616:	|     |   clr.l -(sp)
   12618:	|     |   pea 1 <_start+0x1>
   1261c:	|     |   move.l d0,-(sp)
   1261e:	|     |   jsr 150ea <setVariable>
   12624:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12628:	|     '-> moveq #2,d0
}
   1262a:	'-------> addq.l #8,sp
   1262c:	          rts

0001262e <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   1262e:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12632:	          movea.l 20(sp),a0
   12636:	          move.l 24(a0),d0
   1263a:	          move.l d0,-(sp)
   1263c:	          pea 7 <_start+0x7>
   12640:	          lea 8(sp),a0
   12644:	          move.l a0,-(sp)
   12646:	          jsr 147f8 <getValueType>
   1264c:	          lea 12(sp),sp
   12650:	          tst.w d0
   12652:	      ,-- bne.s 1265a <builtIn_fetchEvent+0x2c>
   12654:	      |   moveq #1,d0
   12656:	,-----|-- bra.w 126ee <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1265a:	|     '-> moveq #24,d0
   1265c:	|         add.l 20(sp),d0
   12660:	|         move.l d0,-(sp)
   12662:	|         jsr 1517c <trimStack>
   12668:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1266a:	|         movea.l 20(sp),a0
   1266e:	|         move.l 24(a0),d0
   12672:	|         move.l d0,-(sp)
   12674:	|         pea 7 <_start+0x7>
   12678:	|         moveq #12,d0
   1267a:	|         add.l sp,d0
   1267c:	|         move.l d0,-(sp)
   1267e:	|         jsr 147f8 <getValueType>
   12684:	|         lea 12(sp),sp
   12688:	|         tst.w d0
   1268a:	|     ,-- bne.s 12690 <builtIn_fetchEvent+0x62>
   1268c:	|     |   moveq #1,d0
   1268e:	+-----|-- bra.s 126ee <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12690:	|     '-> moveq #24,d0
   12692:	|         add.l 20(sp),d0
   12696:	|         move.l d0,-(sp)
   12698:	|         jsr 1517c <trimStack>
   1269e:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   126a0:	|         move.l (sp),d1
   126a2:	|         move.l 4(sp),d0
   126a6:	|         move.l d1,-(sp)
   126a8:	|         move.l d0,-(sp)
   126aa:	|         jsr d552 <getCombinationFunction>
   126b0:	|         addq.l #8,sp
   126b2:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   126b6:	|  ,----- beq.s 126d4 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   126b8:	|  |      moveq #28,d0
   126ba:	|  |      add.l 20(sp),d0
   126be:	|  |      move.l 8(sp),-(sp)
   126c2:	|  |      pea 2 <_start+0x2>
   126c6:	|  |      move.l d0,-(sp)
   126c8:	|  |      jsr 150ea <setVariable>
   126ce:	|  |      lea 12(sp),sp
   126d2:	|  |  ,-- bra.s 126ec <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   126d4:	|  '--|-> moveq #28,d0
   126d6:	|     |   add.l 20(sp),d0
   126da:	|     |   clr.l -(sp)
   126dc:	|     |   pea 1 <_start+0x1>
   126e0:	|     |   move.l d0,-(sp)
   126e2:	|     |   jsr 150ea <setVariable>
   126e8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   126ec:	|     '-> moveq #2,d0
}
   126ee:	'-------> lea 12(sp),sp
   126f2:	          rts

000126f4 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   126f4:	       lea -24(sp),sp
   126f8:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   126fa:	       movea.l 36(sp),a0
   126fe:	       move.l 24(a0),d0
   12702:	       move.l d0,-(sp)
   12704:	       jsr 14dce <getTextFromAnyVar>
   1270a:	       addq.l #4,sp
   1270c:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12710:	       moveq #24,d0
   12712:	       add.l 36(sp),d0
   12716:	       move.l d0,-(sp)
   12718:	       jsr 1517c <trimStack>
   1271e:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12720:	       move.l 24(sp),-(sp)
   12724:	       jsr 2fe <encodeFilename>
   1272a:	       addq.l #4,sp
   1272c:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12730:	       move.l 24(sp),16(sp)
   12736:	       move.l 1cb26 <SysBase>,d0
   1273c:	       movea.l d0,a6
   1273e:	       movea.l 16(sp),a1
   12742:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12746:	       move.l 20(sp),-(sp)
   1274a:	       jsr e30a <failSecurityCheck>
   12750:	       addq.l #4,sp
   12752:	       tst.w d0
   12754:	   ,-- beq.s 1275a <builtIn_deleteFile+0x66>
   12756:	   |   moveq #1,d0
   12758:	,--|-- bra.s 127a8 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   1275a:	|  '-> move.l 20(sp),12(sp)
   12760:	|      move.l 1cb2e <DOSBase>,d0
   12766:	|      movea.l d0,a6
   12768:	|      move.l 12(sp),d1
   1276c:	|      jsr -72(a6)
   12770:	|      move.l d0,8(sp)
   12774:	|      move.l 8(sp),d1
   12778:	|      moveq #28,d0
   1277a:	|      add.l 36(sp),d0
   1277e:	|      move.l d1,-(sp)
   12780:	|      pea 1 <_start+0x1>
   12784:	|      move.l d0,-(sp)
   12786:	|      jsr 150ea <setVariable>
   1278c:	|      lea 12(sp),sp
    FreeVec(nam);
   12790:	|      move.l 20(sp),4(sp)
   12796:	|      move.l 1cb26 <SysBase>,d0
   1279c:	|      movea.l d0,a6
   1279e:	|      movea.l 4(sp),a1
   127a2:	|      jsr -690(a6)

    return BR_CONTINUE;
   127a6:	|      moveq #2,d0
}
   127a8:	'----> movea.l (sp)+,a6
   127aa:	       lea 24(sp),sp
   127ae:	       rts

000127b0 <builtIn_renameFile>:

builtIn(renameFile)
{
   127b0:	       lea -40(sp),sp
   127b4:	       move.l a6,-(sp)
   127b6:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   127b8:	       movea.l 56(sp),a0
   127bc:	       move.l 24(a0),d0
   127c0:	       move.l d0,-(sp)
   127c2:	       jsr 14dce <getTextFromAnyVar>
   127c8:	       addq.l #4,sp
   127ca:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   127ce:	       move.l 44(sp),-(sp)
   127d2:	       jsr 2fe <encodeFilename>
   127d8:	       addq.l #4,sp
   127da:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   127de:	       moveq #24,d0
   127e0:	       add.l 56(sp),d0
   127e4:	       move.l d0,-(sp)
   127e6:	       jsr 1517c <trimStack>
   127ec:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   127ee:	       move.l 40(sp),-(sp)
   127f2:	       jsr e30a <failSecurityCheck>
   127f8:	       addq.l #4,sp
   127fa:	       tst.w d0
   127fc:	   ,-- beq.s 12804 <builtIn_renameFile+0x54>
   127fe:	   |   moveq #1,d0
   12800:	,--|-- bra.w 128ea <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12804:	|  '-> move.l 44(sp),36(sp)
   1280a:	|      move.l 1cb26 <SysBase>,d0
   12810:	|      movea.l d0,a6
   12812:	|      movea.l 36(sp),a1
   12816:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   1281a:	|      movea.l 56(sp),a0
   1281e:	|      move.l 24(a0),d0
   12822:	|      move.l d0,-(sp)
   12824:	|      jsr 14dce <getTextFromAnyVar>
   1282a:	|      addq.l #4,sp
   1282c:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12830:	|      move.l 44(sp),-(sp)
   12834:	|      jsr 2fe <encodeFilename>
   1283a:	|      addq.l #4,sp
   1283c:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12840:	|      moveq #24,d0
   12842:	|      add.l 56(sp),d0
   12846:	|      move.l d0,-(sp)
   12848:	|      jsr 1517c <trimStack>
   1284e:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12850:	|      move.l 32(sp),-(sp)
   12854:	|      jsr e30a <failSecurityCheck>
   1285a:	|      addq.l #4,sp
   1285c:	|      tst.w d0
   1285e:	|  ,-- beq.s 12866 <builtIn_renameFile+0xb6>
   12860:	|  |   moveq #1,d0
   12862:	+--|-- bra.w 128ea <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12866:	|  '-> move.l 44(sp),28(sp)
   1286c:	|      move.l 1cb26 <SysBase>,d0
   12872:	|      movea.l d0,a6
   12874:	|      movea.l 28(sp),a1
   12878:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   1287c:	|      move.l 32(sp),24(sp)
   12882:	|      move.l 40(sp),20(sp)
   12888:	|      move.l 1cb2e <DOSBase>,d0
   1288e:	|      movea.l d0,a6
   12890:	|      move.l 24(sp),d1
   12894:	|      move.l 20(sp),d2
   12898:	|      jsr -78(a6)
   1289c:	|      move.l d0,16(sp)
   128a0:	|      move.l 16(sp),d1
   128a4:	|      moveq #28,d0
   128a6:	|      add.l 56(sp),d0
   128aa:	|      move.l d1,-(sp)
   128ac:	|      pea 1 <_start+0x1>
   128b0:	|      move.l d0,-(sp)
   128b2:	|      jsr 150ea <setVariable>
   128b8:	|      lea 12(sp),sp
	FreeVec(nam);
   128bc:	|      move.l 32(sp),12(sp)
   128c2:	|      move.l 1cb26 <SysBase>,d0
   128c8:	|      movea.l d0,a6
   128ca:	|      movea.l 12(sp),a1
   128ce:	|      jsr -690(a6)
	FreeVec(newnam);
   128d2:	|      move.l 40(sp),8(sp)
   128d8:	|      move.l 1cb26 <SysBase>,d0
   128de:	|      movea.l d0,a6
   128e0:	|      movea.l 8(sp),a1
   128e4:	|      jsr -690(a6)

	return BR_CONTINUE;
   128e8:	|      moveq #2,d0
}
   128ea:	'----> move.l (sp)+,d2
   128ec:	       movea.l (sp)+,a6
   128ee:	       lea 40(sp),sp
   128f2:	       rts

000128f4 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   128f4:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   128f6:	       movea.l 12(sp),a0
   128fa:	       move.l 24(a0),d0
   128fe:	       move.l d0,-(sp)
   12900:	       pea 5 <_start+0x5>
   12904:	       move.l sp,d0
   12906:	       addq.l #8,d0
   12908:	       move.l d0,-(sp)
   1290a:	       jsr 147f8 <getValueType>
   12910:	       lea 12(sp),sp
   12914:	       tst.w d0
   12916:	   ,-- bne.s 1291c <builtIn_cacheSound+0x28>
   12918:	   |   moveq #1,d0
   1291a:	,--|-- bra.s 12944 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   1291c:	|  '-> moveq #24,d0
   1291e:	|      add.l 12(sp),d0
   12922:	|      move.l d0,-(sp)
   12924:	|      jsr 1517c <trimStack>
   1292a:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   1292c:	|      move.l (sp),d0
   1292e:	|      move.l d0,-(sp)
   12930:	|      jsr d148 <cacheSound>
   12936:	|      addq.l #4,sp
   12938:	|      moveq #-1,d1
   1293a:	|      cmp.l d0,d1
   1293c:	|  ,-- bne.s 12942 <builtIn_cacheSound+0x4e>
   1293e:	|  |   moveq #1,d0
   12940:	+--|-- bra.s 12944 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12942:	|  '-> moveq #2,d0
}
   12944:	'----> addq.l #4,sp
   12946:	       rts

00012948 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12948:	pea 19d86 <talk.c.490538ff+0x377>
   1294e:	jsr 172d8 <KPrintF>
   12954:	addq.l #4,sp
	return BR_CONTINUE;
   12956:	moveq #2,d0
}
   12958:	rts

0001295a <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   1295a:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1295e:	          movea.l 20(sp),a0
   12962:	          move.l 24(a0),d0
   12966:	          move.l d0,-(sp)
   12968:	          pea 1 <_start+0x1>
   1296c:	          moveq #12,d0
   1296e:	          add.l sp,d0
   12970:	          move.l d0,-(sp)
   12972:	          jsr 147f8 <getValueType>
   12978:	          lea 12(sp),sp
   1297c:	          tst.w d0
   1297e:	      ,-- bne.s 12986 <builtIn_setCharacterSpinSpeed+0x2c>
   12980:	      |   moveq #1,d0
   12982:	,-----|-- bra.w 12a20 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12986:	|     '-> moveq #24,d0
   12988:	|         add.l 20(sp),d0
   1298c:	|         move.l d0,-(sp)
   1298e:	|         jsr 1517c <trimStack>
   12994:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12996:	|         movea.l 20(sp),a0
   1299a:	|         move.l 24(a0),d0
   1299e:	|         move.l d0,-(sp)
   129a0:	|         pea 7 <_start+0x7>
   129a4:	|         lea 8(sp),a0
   129a8:	|         move.l a0,-(sp)
   129aa:	|         jsr 147f8 <getValueType>
   129b0:	|         lea 12(sp),sp
   129b4:	|         tst.w d0
   129b6:	|     ,-- bne.s 129bc <builtIn_setCharacterSpinSpeed+0x62>
   129b8:	|     |   moveq #1,d0
   129ba:	+-----|-- bra.s 12a20 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   129bc:	|     '-> moveq #24,d0
   129be:	|         add.l 20(sp),d0
   129c2:	|         move.l d0,-(sp)
   129c4:	|         jsr 1517c <trimStack>
   129ca:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   129cc:	|         move.l (sp),d0
   129ce:	|         move.l d0,-(sp)
   129d0:	|         jsr a5b0 <findPerson>
   129d6:	|         addq.l #4,sp
   129d8:	|         move.l d0,8(sp)

	if (thisPerson) {
   129dc:	|  ,----- beq.s 12a06 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   129de:	|  |      move.l 4(sp),d0
   129e2:	|  |      movea.l 8(sp),a0
   129e6:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   129ea:	|  |      moveq #28,d0
   129ec:	|  |      add.l 20(sp),d0
   129f0:	|  |      pea 1 <_start+0x1>
   129f4:	|  |      pea 1 <_start+0x1>
   129f8:	|  |      move.l d0,-(sp)
   129fa:	|  |      jsr 150ea <setVariable>
   12a00:	|  |      lea 12(sp),sp
   12a04:	|  |  ,-- bra.s 12a1e <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12a06:	|  '--|-> moveq #28,d0
   12a08:	|     |   add.l 20(sp),d0
   12a0c:	|     |   clr.l -(sp)
   12a0e:	|     |   pea 1 <_start+0x1>
   12a12:	|     |   move.l d0,-(sp)
   12a14:	|     |   jsr 150ea <setVariable>
   12a1a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12a1e:	|     '-> moveq #2,d0
}
   12a20:	'-------> lea 12(sp),sp
   12a24:	          rts

00012a26 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12a26:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12a2a:	          movea.l 20(sp),a0
   12a2e:	          move.l 24(a0),d0
   12a32:	          move.l d0,-(sp)
   12a34:	          pea 1 <_start+0x1>
   12a38:	          moveq #12,d0
   12a3a:	          add.l sp,d0
   12a3c:	          move.l d0,-(sp)
   12a3e:	          jsr 147f8 <getValueType>
   12a44:	          lea 12(sp),sp
   12a48:	          tst.w d0
   12a4a:	      ,-- bne.s 12a52 <builtIn_setCharacterAngleOffset+0x2c>
   12a4c:	      |   moveq #1,d0
   12a4e:	,-----|-- bra.w 12aec <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12a52:	|     '-> moveq #24,d0
   12a54:	|         add.l 20(sp),d0
   12a58:	|         move.l d0,-(sp)
   12a5a:	|         jsr 1517c <trimStack>
   12a60:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a62:	|         movea.l 20(sp),a0
   12a66:	|         move.l 24(a0),d0
   12a6a:	|         move.l d0,-(sp)
   12a6c:	|         pea 7 <_start+0x7>
   12a70:	|         lea 8(sp),a0
   12a74:	|         move.l a0,-(sp)
   12a76:	|         jsr 147f8 <getValueType>
   12a7c:	|         lea 12(sp),sp
   12a80:	|         tst.w d0
   12a82:	|     ,-- bne.s 12a88 <builtIn_setCharacterAngleOffset+0x62>
   12a84:	|     |   moveq #1,d0
   12a86:	+-----|-- bra.s 12aec <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12a88:	|     '-> moveq #24,d0
   12a8a:	|         add.l 20(sp),d0
   12a8e:	|         move.l d0,-(sp)
   12a90:	|         jsr 1517c <trimStack>
   12a96:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12a98:	|         move.l (sp),d0
   12a9a:	|         move.l d0,-(sp)
   12a9c:	|         jsr a5b0 <findPerson>
   12aa2:	|         addq.l #4,sp
   12aa4:	|         move.l d0,8(sp)

	if (thisPerson) {
   12aa8:	|  ,----- beq.s 12ad2 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12aaa:	|  |      move.l 4(sp),d0
   12aae:	|  |      movea.l 8(sp),a0
   12ab2:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12ab6:	|  |      moveq #28,d0
   12ab8:	|  |      add.l 20(sp),d0
   12abc:	|  |      pea 1 <_start+0x1>
   12ac0:	|  |      pea 1 <_start+0x1>
   12ac4:	|  |      move.l d0,-(sp)
   12ac6:	|  |      jsr 150ea <setVariable>
   12acc:	|  |      lea 12(sp),sp
   12ad0:	|  |  ,-- bra.s 12aea <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12ad2:	|  '--|-> moveq #28,d0
   12ad4:	|     |   add.l 20(sp),d0
   12ad8:	|     |   clr.l -(sp)
   12ada:	|     |   pea 1 <_start+0x1>
   12ade:	|     |   move.l d0,-(sp)
   12ae0:	|     |   jsr 150ea <setVariable>
   12ae6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12aea:	|     '-> moveq #2,d0
}
   12aec:	'-------> lea 12(sp),sp
   12af0:	          rts

00012af2 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12af2:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12af4:	       movea.l 12(sp),a0
   12af8:	       move.l 24(a0),d0
   12afc:	       move.l d0,-(sp)
   12afe:	       pea 1 <_start+0x1>
   12b02:	       move.l sp,d0
   12b04:	       addq.l #8,d0
   12b06:	       move.l d0,-(sp)
   12b08:	       jsr 147f8 <getValueType>
   12b0e:	       lea 12(sp),sp
   12b12:	       tst.w d0
   12b14:	   ,-- bne.s 12b1a <builtIn_transitionMode+0x28>
   12b16:	   |   moveq #1,d0
   12b18:	,--|-- bra.s 12b50 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12b1a:	|  '-> move.l (sp),d0
   12b1c:	|      move.l d0,d0
   12b1e:	|      move.b d0,1c9f4 <fadeMode>
	trimStack (&fun -> stack);
   12b24:	|      moveq #24,d0
   12b26:	|      add.l 12(sp),d0
   12b2a:	|      move.l d0,-(sp)
   12b2c:	|      jsr 1517c <trimStack>
   12b32:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12b34:	|      moveq #28,d0
   12b36:	|      add.l 12(sp),d0
   12b3a:	|      pea 1 <_start+0x1>
   12b3e:	|      pea 1 <_start+0x1>
   12b42:	|      move.l d0,-(sp)
   12b44:	|      jsr 150ea <setVariable>
   12b4a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12b4e:	|      moveq #2,d0
}
   12b50:	'----> addq.l #4,sp
   12b52:	       rts

00012b54 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12b54:	moveq #24,d0
   12b56:	add.l 8(sp),d0
   12b5a:	move.l d0,-(sp)
   12b5c:	jsr 1517c <trimStack>
   12b62:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12b64:	moveq #28,d0
   12b66:	add.l 8(sp),d0
   12b6a:	pea 1 <_start+0x1>
   12b6e:	pea 1 <_start+0x1>
   12b72:	move.l d0,-(sp)
   12b74:	jsr 150ea <setVariable>
   12b7a:	lea 12(sp),sp
	return BR_CONTINUE;
   12b7e:	moveq #2,d0
}
   12b80:	rts

00012b82 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12b82:	pea 19db0 <talk.c.490538ff+0x3a1>
   12b88:	jsr 172d8 <KPrintF>
   12b8e:	addq.l #4,sp
	return BR_CONTINUE;
   12b90:	moveq #2,d0
}
   12b92:	rts

00012b94 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12b94:	       lea -16(sp),sp
   12b98:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12b9a:	       movea.l 28(sp),a0
   12b9e:	       move.l 24(a0),d0
   12ba2:	       move.l d0,-(sp)
   12ba4:	       jsr 14dce <getTextFromAnyVar>
   12baa:	       addq.l #4,sp
   12bac:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12bb0:	   ,-- bne.s 12bb8 <builtIn_saveCustomData+0x24>
   12bb2:	   |   moveq #1,d0
   12bb4:	,--|-- bra.w 12c6a <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12bb8:	|  '-> move.l 16(sp),-(sp)
   12bbc:	|      jsr 2fe <encodeFilename>
   12bc2:	|      addq.l #4,sp
   12bc4:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12bc8:	|      move.l 16(sp),8(sp)
   12bce:	|      move.l 1cb26 <SysBase>,d0
   12bd4:	|      movea.l d0,a6
   12bd6:	|      movea.l 8(sp),a1
   12bda:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12bde:	|      move.l 12(sp),-(sp)
   12be2:	|      jsr e30a <failSecurityCheck>
   12be8:	|      addq.l #4,sp
   12bea:	|      tst.w d0
   12bec:	|  ,-- beq.s 12bf2 <builtIn_saveCustomData+0x5e>
   12bee:	|  |   moveq #1,d0
   12bf0:	+--|-- bra.s 12c6a <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12bf2:	|  '-> moveq #24,d0
   12bf4:	|      add.l 28(sp),d0
   12bf8:	|      move.l d0,-(sp)
   12bfa:	|      jsr 1517c <trimStack>
   12c00:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12c02:	|      movea.l 28(sp),a0
   12c06:	|      movea.l 24(a0),a0
   12c0a:	|      move.l (a0),d0
   12c0c:	|      moveq #6,d1
   12c0e:	|      cmp.l d0,d1
   12c10:	|  ,-- beq.s 12c24 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12c12:	|  |   pea 19ddd <talk.c.490538ff+0x3ce>
   12c18:	|  |   jsr 172d8 <KPrintF>
   12c1e:	|  |   addq.l #4,sp
		return BR_ERROR;
   12c20:	|  |   moveq #1,d0
   12c22:	+--|-- bra.s 12c6a <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12c24:	|  '-> movea.l 28(sp),a0
   12c28:	|      move.l 24(a0),d0
   12c2c:	|      move.l d0,-(sp)
   12c2e:	|      move.l 16(sp),-(sp)
   12c32:	|      jsr df5a <stackToFile>
   12c38:	|      addq.l #8,sp
   12c3a:	|      tst.w d0
   12c3c:	|  ,-- bne.s 12c42 <builtIn_saveCustomData+0xae>
   12c3e:	|  |   moveq #1,d0
   12c40:	+--|-- bra.s 12c6a <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12c42:	|  '-> moveq #24,d0
   12c44:	|      add.l 28(sp),d0
   12c48:	|      move.l d0,-(sp)
   12c4a:	|      jsr 1517c <trimStack>
   12c50:	|      addq.l #4,sp
	FreeVec(fileName);
   12c52:	|      move.l 12(sp),4(sp)
   12c58:	|      move.l 1cb26 <SysBase>,d0
   12c5e:	|      movea.l d0,a6
   12c60:	|      movea.l 4(sp),a1
   12c64:	|      jsr -690(a6)
	return BR_CONTINUE;
   12c68:	|      moveq #2,d0
}
   12c6a:	'----> movea.l (sp)+,a6
   12c6c:	       lea 16(sp),sp
   12c70:	       rts

00012c72 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12c72:	       lea -28(sp),sp
   12c76:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12c78:	       movea.l 40(sp),a0
   12c7c:	       move.l 24(a0),d0
   12c80:	       move.l d0,-(sp)
   12c82:	       jsr 14dce <getTextFromAnyVar>
   12c88:	       addq.l #4,sp
   12c8a:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12c8e:	   ,-- bne.s 12c96 <builtIn_loadCustomData+0x24>
   12c90:	   |   moveq #1,d0
   12c92:	,--|-- bra.w 12d92 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12c96:	|  '-> move.l 28(sp),-(sp)
   12c9a:	|      jsr 2fe <encodeFilename>
   12ca0:	|      addq.l #4,sp
   12ca2:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12ca6:	|      move.l 28(sp),20(sp)
   12cac:	|      move.l 1cb26 <SysBase>,d0
   12cb2:	|      movea.l d0,a6
   12cb4:	|      movea.l 20(sp),a1
   12cb8:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12cbc:	|      move.l 24(sp),-(sp)
   12cc0:	|      jsr e30a <failSecurityCheck>
   12cc6:	|      addq.l #4,sp
   12cc8:	|      tst.w d0
   12cca:	|  ,-- beq.s 12cd2 <builtIn_loadCustomData+0x60>
   12ccc:	|  |   moveq #1,d0
   12cce:	+--|-- bra.w 12d92 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12cd2:	|  '-> moveq #24,d0
   12cd4:	|      add.l 40(sp),d0
   12cd8:	|      move.l d0,-(sp)
   12cda:	|      jsr 1517c <trimStack>
   12ce0:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12ce2:	|      moveq #28,d0
   12ce4:	|      add.l 40(sp),d0
   12ce8:	|      move.l d0,-(sp)
   12cea:	|      jsr 14a46 <unlinkVar>
   12cf0:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12cf2:	|      movea.l 40(sp),a0
   12cf6:	|      moveq #6,d0
   12cf8:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12cfc:	|      moveq #12,d0
   12cfe:	|      move.l d0,16(sp)
   12d02:	|      clr.l 12(sp)
   12d06:	|      move.l 1cb26 <SysBase>,d0
   12d0c:	|      movea.l d0,a6
   12d0e:	|      move.l 16(sp),d0
   12d12:	|      move.l 12(sp),d1
   12d16:	|      jsr -684(a6)
   12d1a:	|      move.l d0,8(sp)
   12d1e:	|      move.l 8(sp),d0
   12d22:	|      movea.l 40(sp),a0
   12d26:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12d2a:	|      movea.l 40(sp),a0
   12d2e:	|      move.l 32(a0),d0
   12d32:	|  ,-- bne.s 12d38 <builtIn_loadCustomData+0xc6>
   12d34:	|  |   moveq #1,d0
   12d36:	+--|-- bra.s 12d92 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12d38:	|  '-> movea.l 40(sp),a0
   12d3c:	|      movea.l 32(a0),a0
   12d40:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12d42:	|      movea.l 40(sp),a0
   12d46:	|      movea.l 32(a0),a0
   12d4a:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12d4e:	|      movea.l 40(sp),a0
   12d52:	|      movea.l 32(a0),a0
   12d56:	|      moveq #1,d0
   12d58:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12d5c:	|      movea.l 40(sp),a0
   12d60:	|      move.l 32(a0),d0
   12d64:	|      move.l d0,-(sp)
   12d66:	|      move.l 28(sp),-(sp)
   12d6a:	|      jsr d994 <fileToStack>
   12d70:	|      addq.l #8,sp
   12d72:	|      tst.w d0
   12d74:	|  ,-- bne.s 12d7a <builtIn_loadCustomData+0x108>
   12d76:	|  |   moveq #1,d0
   12d78:	+--|-- bra.s 12d92 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12d7a:	|  '-> move.l 24(sp),4(sp)
   12d80:	|      move.l 1cb26 <SysBase>,d0
   12d86:	|      movea.l d0,a6
   12d88:	|      movea.l 4(sp),a1
   12d8c:	|      jsr -690(a6)
	return BR_CONTINUE;
   12d90:	|      moveq #2,d0
}
   12d92:	'----> movea.l (sp)+,a6
   12d94:	       lea 28(sp),sp
   12d98:	       rts

00012d9a <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12d9a:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d9c:	       movea.l 12(sp),a0
   12da0:	       move.l 24(a0),d0
   12da4:	       move.l d0,-(sp)
   12da6:	       pea 1 <_start+0x1>
   12daa:	       move.l sp,d0
   12dac:	       addq.l #8,d0
   12dae:	       move.l d0,-(sp)
   12db0:	       jsr 147f8 <getValueType>
   12db6:	       lea 12(sp),sp
   12dba:	       tst.w d0
   12dbc:	   ,-- bne.s 12dc2 <builtIn_setCustomEncoding+0x28>
   12dbe:	   |   moveq #1,d0
   12dc0:	,--|-- bra.s 12df8 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12dc2:	|  '-> move.l (sp),d0
   12dc4:	|      move.l d0,d0
   12dc6:	|      move.w d0,1cbda <saveEncoding>
	trimStack (&fun -> stack);
   12dcc:	|      moveq #24,d0
   12dce:	|      add.l 12(sp),d0
   12dd2:	|      move.l d0,-(sp)
   12dd4:	|      jsr 1517c <trimStack>
   12dda:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12ddc:	|      moveq #28,d0
   12dde:	|      add.l 12(sp),d0
   12de2:	|      pea 1 <_start+0x1>
   12de6:	|      pea 1 <_start+0x1>
   12dea:	|      move.l d0,-(sp)
   12dec:	|      jsr 150ea <setVariable>
   12df2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12df6:	|      moveq #2,d0
}
   12df8:	'----> addq.l #4,sp
   12dfa:	       rts

00012dfc <builtIn_freeSound>:

builtIn(freeSound)
{
   12dfc:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12dfe:	       movea.l 12(sp),a0
   12e02:	       move.l 24(a0),d0
   12e06:	       move.l d0,-(sp)
   12e08:	       pea 5 <_start+0x5>
   12e0c:	       move.l sp,d0
   12e0e:	       addq.l #8,d0
   12e10:	       move.l d0,-(sp)
   12e12:	       jsr 147f8 <getValueType>
   12e18:	       lea 12(sp),sp
   12e1c:	       tst.w d0
   12e1e:	   ,-- bne.s 12e24 <builtIn_freeSound+0x28>
   12e20:	   |   moveq #1,d0
   12e22:	,--|-- bra.s 12e42 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12e24:	|  '-> moveq #24,d0
   12e26:	|      add.l 12(sp),d0
   12e2a:	|      move.l d0,-(sp)
   12e2c:	|      jsr 1517c <trimStack>
   12e32:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12e34:	|      move.l (sp),d0
   12e36:	|      move.l d0,-(sp)
   12e38:	|      jsr d14c <huntKillFreeSound>
   12e3e:	|      addq.l #4,sp
	return BR_CONTINUE;
   12e40:	|      moveq #2,d0
}
   12e42:	'----> addq.l #4,sp
   12e44:	       rts

00012e46 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12e46:	       lea -12(sp),sp
   12e4a:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e4c:	       movea.l 24(sp),a0
   12e50:	       move.l 24(a0),d0
   12e54:	       move.l d0,-(sp)
   12e56:	       pea 1 <_start+0x1>
   12e5a:	       moveq #16,d0
   12e5c:	       add.l sp,d0
   12e5e:	       move.l d0,-(sp)
   12e60:	       jsr 147f8 <getValueType>
   12e66:	       lea 12(sp),sp
   12e6a:	       tst.w d0
   12e6c:	   ,-- bne.s 12e74 <builtIn_parallaxAdd+0x2e>
   12e6e:	   |   moveq #1,d0
   12e70:	,--|-- bra.w 12f48 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e74:	|  '-> moveq #24,d0
   12e76:	|      add.l 24(sp),d0
   12e7a:	|      move.l d0,-(sp)
   12e7c:	|      jsr 1517c <trimStack>
   12e82:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e84:	|      movea.l 24(sp),a0
   12e88:	|      move.l 24(a0),d0
   12e8c:	|      move.l d0,-(sp)
   12e8e:	|      pea 1 <_start+0x1>
   12e92:	|      moveq #20,d0
   12e94:	|      add.l sp,d0
   12e96:	|      move.l d0,-(sp)
   12e98:	|      jsr 147f8 <getValueType>
   12e9e:	|      lea 12(sp),sp
   12ea2:	|      tst.w d0
   12ea4:	|  ,-- bne.s 12eac <builtIn_parallaxAdd+0x66>
   12ea6:	|  |   moveq #1,d0
   12ea8:	+--|-- bra.w 12f48 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12eac:	|  '-> moveq #24,d0
   12eae:	|      add.l 24(sp),d0
   12eb2:	|      move.l d0,-(sp)
   12eb4:	|      jsr 1517c <trimStack>
   12eba:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12ebc:	|      movea.l 24(sp),a0
   12ec0:	|      move.l 24(a0),d0
   12ec4:	|      move.l d0,-(sp)
   12ec6:	|      pea 5 <_start+0x5>
   12eca:	|      lea 12(sp),a0
   12ece:	|      move.l a0,-(sp)
   12ed0:	|      jsr 147f8 <getValueType>
   12ed6:	|      lea 12(sp),sp
   12eda:	|      tst.w d0
   12edc:	|  ,-- bne.s 12ee2 <builtIn_parallaxAdd+0x9c>
   12ede:	|  |   moveq #1,d0
   12ee0:	+--|-- bra.s 12f48 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12ee2:	|  '-> moveq #24,d0
   12ee4:	|      add.l 24(sp),d0
   12ee8:	|      move.l d0,-(sp)
   12eea:	|      jsr 1517c <trimStack>
   12ef0:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12ef2:	|      move.l 8(sp),d0
   12ef6:	|      move.l d0,d0
   12ef8:	|      moveq #0,d2
   12efa:	|      move.w d0,d2
   12efc:	|      move.l 12(sp),d0
   12f00:	|      move.l d0,d0
   12f02:	|      moveq #0,d1
   12f04:	|      move.w d0,d1
   12f06:	|      move.l 4(sp),d0
   12f0a:	|      move.l d0,d0
   12f0c:	|      move.w d0,d0
   12f0e:	|      andi.l #65535,d0
   12f14:	|      move.l d2,-(sp)
   12f16:	|      move.l d1,-(sp)
   12f18:	|      move.l d0,-(sp)
   12f1a:	|      jsr d372 <loadParallax>
   12f20:	|      lea 12(sp),sp
   12f24:	|      tst.w d0
   12f26:	|  ,-- bne.s 12f2c <builtIn_parallaxAdd+0xe6>
   12f28:	|  |   moveq #1,d0
   12f2a:	+--|-- bra.s 12f48 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12f2c:	|  '-> moveq #28,d0
   12f2e:	|      add.l 24(sp),d0
   12f32:	|      pea 1 <_start+0x1>
   12f36:	|      pea 1 <_start+0x1>
   12f3a:	|      move.l d0,-(sp)
   12f3c:	|      jsr 150ea <setVariable>
   12f42:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12f46:	|      moveq #2,d0
}
   12f48:	'----> move.l (sp)+,d2
   12f4a:	       lea 12(sp),sp
   12f4e:	       rts

00012f50 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12f50:	jsr d2aa <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12f56:	moveq #28,d0
   12f58:	add.l 8(sp),d0
   12f5c:	pea 1 <_start+0x1>
   12f60:	pea 1 <_start+0x1>
   12f64:	move.l d0,-(sp)
   12f66:	jsr 150ea <setVariable>
   12f6c:	lea 12(sp),sp
	return BR_CONTINUE;
   12f70:	moveq #2,d0
}
   12f72:	rts

00012f74 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12f74:	pea 19dfb <talk.c.490538ff+0x3ec>
   12f7a:	jsr 172d8 <KPrintF>
   12f80:	addq.l #4,sp

	return BR_CONTINUE;
   12f82:	moveq #2,d0
}
   12f84:	rts

00012f86 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12f86:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12f88:	             movea.l 16(sp),a0
   12f8c:	             movea.l 24(a0),a0
   12f90:	             move.l (a0),d0
   12f92:	             moveq #1,d1
   12f94:	             cmp.l d0,d1
   12f96:	      ,----- beq.s 12fde <builtIn_makeFastArray+0x58>
   12f98:	      |      moveq #6,d1
   12f9a:	      |      cmp.l d0,d1
   12f9c:	,-----|----- bne.s 1301c <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12f9e:	|     |      movea.l 16(sp),a0
   12fa2:	|     |      movea.l 24(a0),a0
   12fa6:	|     |      move.l 4(a0),d1
   12faa:	|     |      moveq #28,d0
   12fac:	|     |      add.l 16(sp),d0
   12fb0:	|     |      move.l d1,-(sp)
   12fb2:	|     |      move.l d0,-(sp)
   12fb4:	|     |      jsr 148aa <makeFastArrayFromStack>
   12fba:	|     |      addq.l #8,sp
   12fbc:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12fc0:	|     |      moveq #24,d0
   12fc2:	|     |      add.l 16(sp),d0
   12fc6:	|     |      move.l d0,-(sp)
   12fc8:	|     |      jsr 1517c <trimStack>
   12fce:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12fd0:	|     |      tst.w 6(sp)
   12fd4:	|     |  ,-- beq.s 12fda <builtIn_makeFastArray+0x54>
   12fd6:	|     |  |   moveq #2,d0
   12fd8:	|  ,--|--|-- bra.s 1302e <builtIn_makeFastArray+0xa8>
   12fda:	|  |  |  '-> moveq #1,d0
   12fdc:	|  +--|----- bra.s 1302e <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12fde:	|  |  '----> movea.l 16(sp),a0
   12fe2:	|  |         movea.l 24(a0),a0
   12fe6:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12fec:	|  |         moveq #24,d0
   12fee:	|  |         add.l 16(sp),d0
   12ff2:	|  |         move.l d0,-(sp)
   12ff4:	|  |         jsr 1517c <trimStack>
   12ffa:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12ffc:	|  |         moveq #28,d0
   12ffe:	|  |         add.l 16(sp),d0
   13002:	|  |         move.l 2(sp),-(sp)
   13006:	|  |         move.l d0,-(sp)
   13008:	|  |         jsr 14914 <makeFastArraySize>
   1300e:	|  |         addq.l #8,sp
   13010:	|  |         tst.w d0
   13012:	|  |     ,-- beq.s 13018 <builtIn_makeFastArray+0x92>
   13014:	|  |     |   moveq #2,d0
   13016:	|  +-----|-- bra.s 1302e <builtIn_makeFastArray+0xa8>
   13018:	|  |     '-> moveq #1,d0
   1301a:	|  +-------- bra.s 1302e <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   1301c:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   1301e:	   |         pea 19e24 <talk.c.490538ff+0x415>
   13024:	   |         jsr 172d8 <KPrintF>
   1302a:	   |         addq.l #4,sp
	return BR_ERROR;
   1302c:	   |         moveq #1,d0
}
   1302e:	   '-------> addq.l #8,sp
   13030:	             rts

00013032 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   13032:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13034:	          movea.l 16(sp),a0
   13038:	          move.l 24(a0),d0
   1303c:	          move.l d0,-(sp)
   1303e:	          pea 7 <_start+0x7>
   13042:	          move.l sp,d0
   13044:	          addq.l #8,d0
   13046:	          move.l d0,-(sp)
   13048:	          jsr 147f8 <getValueType>
   1304e:	          lea 12(sp),sp
   13052:	          tst.w d0
   13054:	      ,-- bne.s 1305a <builtIn_getCharacterScale+0x28>
   13056:	      |   moveq #1,d0
   13058:	,-----|-- bra.s 130d4 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   1305a:	|     '-> moveq #24,d0
   1305c:	|         add.l 16(sp),d0
   13060:	|         move.l d0,-(sp)
   13062:	|         jsr 1517c <trimStack>
   13068:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   1306a:	|         move.l (sp),d0
   1306c:	|         move.l d0,-(sp)
   1306e:	|         jsr a5b0 <findPerson>
   13074:	|         addq.l #4,sp
   13076:	|         move.l d0,4(sp)
	if (pers) {
   1307a:	|  ,----- beq.s 130ba <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   1307c:	|  |      movea.l 4(sp),a0
   13080:	|  |      move.l 32(a0),d0
   13084:	|  |      move.l #1120403456,-(sp)
   1308a:	|  |      move.l d0,-(sp)
   1308c:	|  |      jsr 177bc <__mulsf3>
   13092:	|  |      addq.l #8,sp
   13094:	|  |      move.l d0,-(sp)
   13096:	|  |      jsr 176a2 <__fixsfsi>
   1309c:	|  |      addq.l #4,sp
   1309e:	|  |      move.l d0,d1
   130a0:	|  |      moveq #28,d0
   130a2:	|  |      add.l 16(sp),d0
   130a6:	|  |      move.l d1,-(sp)
   130a8:	|  |      pea 1 <_start+0x1>
   130ac:	|  |      move.l d0,-(sp)
   130ae:	|  |      jsr 150ea <setVariable>
   130b4:	|  |      lea 12(sp),sp
   130b8:	|  |  ,-- bra.s 130d2 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   130ba:	|  '--|-> moveq #28,d0
   130bc:	|     |   add.l 16(sp),d0
   130c0:	|     |   clr.l -(sp)
   130c2:	|     |   pea 1 <_start+0x1>
   130c6:	|     |   move.l d0,-(sp)
   130c8:	|     |   jsr 150ea <setVariable>
   130ce:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   130d2:	|     '-> moveq #2,d0
}
   130d4:	'-------> addq.l #8,sp
   130d6:	          rts

000130d8 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   130d8:	move.l 1cbfe <gameSettings>,d0
   130de:	move.l d0,d1
   130e0:	moveq #28,d0
   130e2:	add.l 8(sp),d0
   130e6:	move.l d1,-(sp)
   130e8:	pea 1 <_start+0x1>
   130ec:	move.l d0,-(sp)
   130ee:	jsr 150ea <setVariable>
   130f4:	lea 12(sp),sp
	return BR_CONTINUE;
   130f8:	moveq #2,d0
}
   130fa:	rts

000130fc <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   130fc:	moveq #24,d0
   130fe:	add.l 8(sp),d0
   13102:	move.l d0,-(sp)
   13104:	jsr 1517c <trimStack>
   1310a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1310c:	moveq #24,d0
   1310e:	add.l 8(sp),d0
   13112:	move.l d0,-(sp)
   13114:	jsr 1517c <trimStack>
   1311a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   1311c:	moveq #28,d0
   1311e:	add.l 8(sp),d0
   13122:	clr.l -(sp)
   13124:	pea 1 <_start+0x1>
   13128:	move.l d0,-(sp)
   1312a:	jsr 150ea <setVariable>
   13130:	lea 12(sp),sp

	return BR_CONTINUE;
   13134:	moveq #2,d0

}
   13136:	rts

00013138 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   13138:	move.l 1c49e <lastFramesPerSecond>,d1
   1313e:	moveq #28,d0
   13140:	add.l 8(sp),d0
   13144:	move.l d1,-(sp)
   13146:	pea 1 <_start+0x1>
   1314a:	move.l d0,-(sp)
   1314c:	jsr 150ea <setVariable>
   13152:	lea 12(sp),sp
	return BR_CONTINUE;
   13156:	moveq #2,d0
}
   13158:	rts

0001315a <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   1315a:	moveq #2,d0
}
   1315c:	rts

0001315e <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   1315e:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13162:	          movea.l 60(sp),a0
   13166:	          move.l 24(a0),d0
   1316a:	          move.l d0,-(sp)
   1316c:	          pea 1 <_start+0x1>
   13170:	          pea 1ca30 <thumbHeight>
   13176:	          jsr 147f8 <getValueType>
   1317c:	          lea 12(sp),sp
   13180:	          tst.w d0
   13182:	      ,-- bne.s 1318a <builtIn_setThumbnailSize+0x2c>
   13184:	      |   moveq #1,d0
   13186:	,-----|-- bra.w 13246 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1318a:	|     '-> moveq #24,d0
   1318c:	|         add.l 60(sp),d0
   13190:	|         move.l d0,-(sp)
   13192:	|         jsr 1517c <trimStack>
   13198:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1319a:	|         movea.l 60(sp),a0
   1319e:	|         move.l 24(a0),d0
   131a2:	|         move.l d0,-(sp)
   131a4:	|         pea 1 <_start+0x1>
   131a8:	|         pea 1ca2c <thumbWidth>
   131ae:	|         jsr 147f8 <getValueType>
   131b4:	|         lea 12(sp),sp
   131b8:	|         tst.w d0
   131ba:	|     ,-- bne.s 131c2 <builtIn_setThumbnailSize+0x64>
   131bc:	|     |   moveq #1,d0
   131be:	+-----|-- bra.w 13246 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   131c2:	|     '-> moveq #24,d0
   131c4:	|         add.l 60(sp),d0
   131c8:	|         move.l d0,-(sp)
   131ca:	|         jsr 1517c <trimStack>
   131d0:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   131d2:	|         move.l 1ca2c <thumbWidth>,d0
   131d8:	|     ,-- bmi.s 13206 <builtIn_setThumbnailSize+0xa8>
   131da:	|     |   move.l 1ca30 <thumbHeight>,d0
   131e0:	|     +-- bmi.s 13206 <builtIn_setThumbnailSize+0xa8>
   131e2:	|     |   move.l 1ca2c <thumbWidth>,d0
   131e8:	|     |   move.l d0,d1
   131ea:	|     |   move.l 1ca7a <winWidth>,d0
   131f0:	|     |   cmp.l d1,d0
   131f2:	|     +-- bcs.s 13206 <builtIn_setThumbnailSize+0xa8>
   131f4:	|     |   move.l 1ca30 <thumbHeight>,d0
   131fa:	|     |   move.l d0,d1
   131fc:	|     |   move.l 1ca7e <winHeight>,d0
   13202:	|     |   cmp.l d1,d0
   13204:	|  ,--|-- bcc.s 13244 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   13206:	|  |  '-> move.l 1ca30 <thumbHeight>,d1
   1320c:	|  |      move.l 1ca2c <thumbWidth>,d0
   13212:	|  |      move.l d1,-(sp)
   13214:	|  |      move.l d0,-(sp)
   13216:	|  |      pea 19e4b <talk.c.490538ff+0x43c>
   1321c:	|  |      lea 14(sp),a0
   13220:	|  |      move.l a0,-(sp)
   13222:	|  |      jsr 14002 <sprintf>
   13228:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   1322c:	|  |      lea 2(sp),a0
   13230:	|  |      move.l a0,-(sp)
   13232:	|  |      pea 19e53 <talk.c.490538ff+0x444>
   13238:	|  |      jsr 172d8 <KPrintF>
   1323e:	|  |      addq.l #8,sp
		return BR_ERROR;
   13240:	|  |      moveq #1,d0
   13242:	+--|----- bra.s 13246 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   13244:	|  '----> moveq #2,d0
}
   13246:	'-------> lea 52(sp),sp
   1324a:	          rts

0001324c <builtIn_hasFlag>:

builtIn(hasFlag)
{
   1324c:	       lea -12(sp),sp
   13250:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13252:	       movea.l 24(sp),a0
   13256:	       move.l 24(a0),d0
   1325a:	       move.l d0,-(sp)
   1325c:	       pea 1 <_start+0x1>
   13260:	       lea 12(sp),a0
   13264:	       move.l a0,-(sp)
   13266:	       jsr 147f8 <getValueType>
   1326c:	       lea 12(sp),sp
   13270:	       tst.w d0
   13272:	   ,-- bne.s 1327a <builtIn_hasFlag+0x2e>
   13274:	   |   moveq #1,d0
   13276:	,--|-- bra.w 1330a <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1327a:	|  '-> moveq #24,d0
   1327c:	|      add.l 24(sp),d0
   13280:	|      move.l d0,-(sp)
   13282:	|      jsr 1517c <trimStack>
   13288:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1328a:	|      movea.l 24(sp),a0
   1328e:	|      move.l 24(a0),d0
   13292:	|      move.l d0,-(sp)
   13294:	|      pea 7 <_start+0x7>
   13298:	|      moveq #16,d0
   1329a:	|      add.l sp,d0
   1329c:	|      move.l d0,-(sp)
   1329e:	|      jsr 147f8 <getValueType>
   132a4:	|      lea 12(sp),sp
   132a8:	|      tst.w d0
   132aa:	|  ,-- bne.s 132b0 <builtIn_hasFlag+0x64>
   132ac:	|  |   moveq #1,d0
   132ae:	+--|-- bra.s 1330a <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   132b0:	|  '-> moveq #24,d0
   132b2:	|      add.l 24(sp),d0
   132b6:	|      move.l d0,-(sp)
   132b8:	|      jsr 1517c <trimStack>
   132be:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   132c0:	|      move.l 8(sp),d0
   132c4:	|      move.l d0,-(sp)
   132c6:	|      jsr d51e <findObjectType>
   132cc:	|      addq.l #4,sp
   132ce:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   132d2:	|  ,-- bne.s 132d8 <builtIn_hasFlag+0x8c>
   132d4:	|  |   moveq #1,d0
   132d6:	+--|-- bra.s 1330a <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   132d8:	|  '-> movea.l 12(sp),a0
   132dc:	|      move.w 36(a0),d0
   132e0:	|      moveq #0,d2
   132e2:	|      move.w d0,d2
   132e4:	|      move.l 4(sp),d1
   132e8:	|      moveq #1,d0
   132ea:	|      lsl.l d1,d0
   132ec:	|      move.l d2,d1
   132ee:	|      and.l d0,d1
   132f0:	|      moveq #28,d0
   132f2:	|      add.l 24(sp),d0
   132f6:	|      move.l d1,-(sp)
   132f8:	|      pea 1 <_start+0x1>
   132fc:	|      move.l d0,-(sp)
   132fe:	|      jsr 150ea <setVariable>
   13304:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13308:	|      moveq #2,d0
}
   1330a:	'----> move.l (sp)+,d2
   1330c:	       lea 12(sp),sp
   13310:	       rts

00013312 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   13312:	       jsr d50c <snapshot>
   13318:	       tst.w d0
   1331a:	,----- beq.s 13320 <builtIn_snapshotGrab+0xe>
   1331c:	|      moveq #2,d0
   1331e:	|  ,-- bra.s 13322 <builtIn_snapshotGrab+0x10>
   13320:	'--|-> moveq #1,d0
}
   13322:	   '-> rts

00013324 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   13324:	jsr d3b8 <nosnapshot>
	return BR_CONTINUE;
   1332a:	moveq #2,d0
}
   1332c:	rts

0001332e <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   1332e:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13330:	move.w 1c376 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   13338:	movea.l 12(sp),a0
   1333c:	move.l 24(a0),d0
   13340:	move.l d0,-(sp)
   13342:	jsr 14d38 <getBoolean>
   13348:	addq.l #4,sp
   1334a:	move.w d0,1c376 <allowAnyFilename>
	trimStack (&fun -> stack);
   13350:	moveq #24,d0
   13352:	add.l 12(sp),d0
   13356:	move.l d0,-(sp)
   13358:	jsr 1517c <trimStack>
   1335e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   13360:	movea.w 2(sp),a0
   13364:	moveq #28,d0
   13366:	add.l 12(sp),d0
   1336a:	move.l a0,-(sp)
   1336c:	pea 1 <_start+0x1>
   13370:	move.l d0,-(sp)
   13372:	jsr 150ea <setVariable>
   13378:	lea 12(sp),sp
	return BR_CONTINUE;
   1337c:	moveq #2,d0
}
   1337e:	addq.l #4,sp
   13380:	rts

00013382 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13382:	moveq #24,d0
   13384:	add.l 8(sp),d0
   13388:	move.l d0,-(sp)
   1338a:	jsr 1517c <trimStack>
   13390:	addq.l #4,sp
	trimStack (&fun -> stack);
   13392:	moveq #24,d0
   13394:	add.l 8(sp),d0
   13398:	move.l d0,-(sp)
   1339a:	jsr 1517c <trimStack>
   133a0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   133a2:	moveq #28,d0
   133a4:	add.l 8(sp),d0
   133a8:	clr.l -(sp)
   133aa:	pea 1 <_start+0x1>
   133ae:	move.l d0,-(sp)
   133b0:	jsr 150ea <setVariable>
   133b6:	lea 12(sp),sp

	return BR_CONTINUE;
   133ba:	moveq #2,d0
}
   133bc:	rts

000133be <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   133be:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   133c0:	movea.l 12(sp),a0
   133c4:	move.l 24(a0),d0
   133c8:	move.l d0,-(sp)
   133ca:	jsr 14dce <getTextFromAnyVar>
   133d0:	addq.l #4,sp
   133d2:	move.l d0,(sp)
	trimStack (&fun -> stack);
   133d4:	moveq #24,d0
   133d6:	add.l 12(sp),d0
   133da:	move.l d0,-(sp)
   133dc:	jsr 1517c <trimStack>
   133e2:	addq.l #4,sp
	KPrintF (mess);
   133e4:	move.l (sp),-(sp)
   133e6:	jsr 172d8 <KPrintF>
   133ec:	addq.l #4,sp
	return BR_ERROR;
   133ee:	moveq #1,d0
}
   133f0:	addq.l #4,sp
   133f2:	rts

000133f4 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   133f4:	moveq #24,d0
   133f6:	add.l 8(sp),d0
   133fa:	move.l d0,-(sp)
   133fc:	jsr 1517c <trimStack>
   13402:	addq.l #4,sp
	trimStack (&fun -> stack);
   13404:	moveq #24,d0
   13406:	add.l 8(sp),d0
   1340a:	move.l d0,-(sp)
   1340c:	jsr 1517c <trimStack>
   13412:	addq.l #4,sp
	trimStack (&fun -> stack);
   13414:	moveq #24,d0
   13416:	add.l 8(sp),d0
   1341a:	move.l d0,-(sp)
   1341c:	jsr 1517c <trimStack>
   13422:	addq.l #4,sp
	trimStack (&fun -> stack);
   13424:	moveq #24,d0
   13426:	add.l 8(sp),d0
   1342a:	move.l d0,-(sp)
   1342c:	jsr 1517c <trimStack>
   13432:	addq.l #4,sp

	return BR_CONTINUE;
   13434:	moveq #2,d0
}
   13436:	rts

00013438 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13438:	moveq #24,d0
   1343a:	add.l 8(sp),d0
   1343e:	move.l d0,-(sp)
   13440:	jsr 1517c <trimStack>
   13446:	addq.l #4,sp
	trimStack (&fun -> stack);
   13448:	moveq #24,d0
   1344a:	add.l 8(sp),d0
   1344e:	move.l d0,-(sp)
   13450:	jsr 1517c <trimStack>
   13456:	addq.l #4,sp
	trimStack (&fun -> stack);
   13458:	moveq #24,d0
   1345a:	add.l 8(sp),d0
   1345e:	move.l d0,-(sp)
   13460:	jsr 1517c <trimStack>
   13466:	addq.l #4,sp

	return BR_CONTINUE;
   13468:	moveq #2,d0

}
   1346a:	rts

0001346c <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   1346c:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   1346e:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13474:	sne d0
   13476:	neg.b d0
   13478:	moveq #0,d1
   1347a:	move.b d0,d1
   1347c:	moveq #28,d0
   1347e:	add.l 12(sp),d0
   13482:	move.l d1,-(sp)
   13484:	pea 1 <_start+0x1>
   13488:	move.l d0,-(sp)
   1348a:	jsr 150ea <setVariable>
   13490:	lea 12(sp),sp
	return BR_CONTINUE;
   13494:	moveq #2,d0
}
   13496:	addq.l #4,sp
   13498:	rts

0001349a <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   1349a:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   1349c:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   134a2:	pea 19e6a <talk.c.490538ff+0x45b>
   134a8:	jsr 172d8 <KPrintF>
   134ae:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   134b0:	tst.w 2(sp)
   134b4:	sne d0
   134b6:	neg.b d0
   134b8:	moveq #0,d1
   134ba:	move.b d0,d1
   134bc:	moveq #28,d0
   134be:	add.l 12(sp),d0
   134c2:	move.l d1,-(sp)
   134c4:	pea 1 <_start+0x1>
   134c8:	move.l d0,-(sp)
   134ca:	jsr 150ea <setVariable>
   134d0:	lea 12(sp),sp
	return BR_CONTINUE;
   134d4:	moveq #2,d0
}
   134d6:	addq.l #4,sp
   134d8:	rts

000134da <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   134da:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   134de:	             move.l 104(sp),d0
   134e2:	             cmpi.l #166,d0
   134e8:	,----------- bhi.w 135ca <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   134ec:	|            move.l 104(sp),d0
   134f0:	|            add.l d0,d0
   134f2:	|            movea.l d0,a1
   134f4:	|            adda.l d0,a1
   134f6:	|            lea 1c4bc <paramNum>,a0
   134fc:	|            move.l (0,a1,a0.l),d0
   13500:	|            moveq #-1,d1
   13502:	|            cmp.l d0,d1
   13504:	|  ,-------- beq.w 13592 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   13508:	|  |         move.l 104(sp),d0
   1350c:	|  |         add.l d0,d0
   1350e:	|  |         movea.l d0,a1
   13510:	|  |         adda.l d0,a1
   13512:	|  |         lea 1c4bc <paramNum>,a0
   13518:	|  |         move.l (0,a1,a0.l),d0
   1351c:	|  |         cmp.l 108(sp),d0
   13520:	|  +-------- beq.s 13592 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   13522:	|  |         move.l 104(sp),d0
   13526:	|  |         add.l d0,d0
   13528:	|  |         movea.l d0,a1
   1352a:	|  |         adda.l d0,a1
   1352c:	|  |         lea 1c4bc <paramNum>,a0
   13532:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   13536:	|  |         moveq #1,d1
   13538:	|  |         cmp.l d0,d1
   1353a:	|  |  ,----- bne.s 13544 <callBuiltIn+0x6a>
   1353c:	|  |  |      move.l #101102,d0
   13542:	|  |  |  ,-- bra.s 1354a <callBuiltIn+0x70>
   13544:	|  |  '--|-> move.l #106144,d0
   1354a:	|  |     '-> move.l 104(sp),d1
   1354e:	|  |         add.l d1,d1
   13550:	|  |         movea.l d1,a1
   13552:	|  |         adda.l d1,a1
   13554:	|  |         lea 1c4bc <paramNum>,a0
   1355a:	|  |         move.l (0,a1,a0.l),d1
   1355e:	|  |         move.l d0,-(sp)
   13560:	|  |         move.l d1,-(sp)
   13562:	|  |         pea 19ea2 <talk.c.490538ff+0x493>
   13568:	|  |         lea 12(sp),a0
   1356c:	|  |         move.l a0,-(sp)
   1356e:	|  |         jsr 14002 <sprintf>
   13574:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   13578:	|  |         movea.l sp,a0
   1357a:	|  |         move.l a0,-(sp)
   1357c:	|  |         jsr b8 <copyString>
   13582:	|  |         addq.l #4,sp
   13584:	|  |         move.l d0,-(sp)
   13586:	|  |         jsr 172d8 <KPrintF>
   1358c:	|  |         addq.l #4,sp
				return BR_ERROR;
   1358e:	|  |         moveq #1,d0
   13590:	|  |     ,-- bra.s 135da <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   13592:	|  '-----|-> move.l 104(sp),d0
   13596:	|        |   add.l d0,d0
   13598:	|        |   movea.l d0,a1
   1359a:	|        |   adda.l d0,a1
   1359c:	|        |   lea 1c758 <builtInFunctionArray>,a0
   135a2:	|        |   move.l (0,a1,a0.l),d0
   135a6:	+--------|-- beq.s 135ca <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   135a8:	|        |   move.l 104(sp),d0
   135ac:	|        |   add.l d0,d0
   135ae:	|        |   movea.l d0,a1
   135b0:	|        |   adda.l d0,a1
   135b2:	|        |   lea 1c758 <builtInFunctionArray>,a0
   135b8:	|        |   movea.l (0,a1,a0.l),a0
   135bc:	|        |   move.l 112(sp),-(sp)
   135c0:	|        |   move.l 112(sp),-(sp)
   135c4:	|        |   jsr (a0)
   135c6:	|        |   addq.l #8,sp
   135c8:	|        +-- bra.s 135da <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   135ca:	'--------|-> pea 19ecd <talk.c.490538ff+0x4be>
   135d0:	         |   jsr 172d8 <KPrintF>
   135d6:	         |   addq.l #4,sp
	return BR_ERROR;
   135d8:	         |   moveq #1,d0
}
   135da:	         '-> lea 100(sp),sp
   135de:	             rts

000135e0 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   135e0:	          subq.l #8,sp
	int indexNum = -1;
   135e2:	          moveq #-1,d0
   135e4:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   135e8:	          clr.l (sp)
   135ea:	   ,----- bra.s 13610 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   135ec:	,--|----> move.l 1cbf6 <languageTable>,d1
   135f2:	|  |      move.l (sp),d0
   135f4:	|  |      add.l d0,d0
   135f6:	|  |      add.l d0,d0
   135f8:	|  |      movea.l d1,a0
   135fa:	|  |      adda.l d0,a0
   135fc:	|  |      move.l (a0),d0
   135fe:	|  |      move.l d0,d1
   13600:	|  |      move.l 1cbfe <gameSettings>,d0
   13606:	|  |      cmp.l d1,d0
   13608:	|  |  ,-- bne.s 1360e <getLanguageForFileB+0x2e>
   1360a:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1360e:	|  |  '-> addq.l #1,(sp)
   13610:	|  '----> move.l 1cc02 <gameSettings+0x4>,d0
   13616:	|         cmp.l (sp),d0
   13618:	'-------- bcc.s 135ec <getLanguageForFileB+0xc>
	}

	return indexNum;
   1361a:	          move.l 4(sp),d0
}
   1361e:	          addq.l #8,sp
   13620:	          rts

00013622 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   13622:	          lea -20(sp),sp
   13626:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13628:	          move.l 28(sp),-(sp)
   1362c:	          jsr 13ce4 <strlen>
   13632:	          addq.l #4,sp
   13634:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13638:	          moveq #4,d0
   1363a:	          cmp.l 12(sp),d0
   1363e:	      ,-- bge.s 13662 <getPrefsFilename+0x40>
   13640:	      |   move.l 12(sp),d0
   13644:	      |   subq.l #4,d0
   13646:	      |   movea.l 28(sp),a0
   1364a:	      |   adda.l d0,a0
   1364c:	      |   move.b (a0),d0
   1364e:	      |   cmpi.b #46,d0
   13652:	      +-- bne.s 13662 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   13654:	      |   move.l 12(sp),d0
   13658:	      |   subq.l #4,d0
   1365a:	      |   movea.l 28(sp),a0
   1365e:	      |   adda.l d0,a0
   13660:	      |   clr.b (a0)
	}

	char * f = filename;
   13662:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   13668:	          clr.l 20(sp)
   1366c:	   ,----- bra.s 13694 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   1366e:	,--|----> move.l 20(sp),d0
   13672:	|  |      movea.l 28(sp),a0
   13676:	|  |      adda.l d0,a0
   13678:	|  |      move.b (a0),d0
   1367a:	|  |      cmpi.b #47,d0
   1367e:	|  |  ,-- bne.s 13690 <getPrefsFilename+0x6e>
   13680:	|  |  |   move.l 20(sp),d0
   13684:	|  |  |   addq.l #1,d0
   13686:	|  |  |   move.l 28(sp),d1
   1368a:	|  |  |   add.l d0,d1
   1368c:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   13690:	|  |  '-> addq.l #1,20(sp)
   13694:	|  '----> move.l 20(sp),d0
   13698:	|         cmp.l 12(sp),d0
   1369c:	'-------- blt.s 1366e <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   1369e:	          pea 19ef8 <talk.c.490538ff+0x4e9>
   136a4:	          move.l 20(sp),-(sp)
   136a8:	          jsr 13d24 <joinStrings>
   136ae:	          addq.l #8,sp
   136b0:	          move.l d0,8(sp)

	FreeVec(filename);
   136b4:	          move.l 28(sp),4(sp)
   136ba:	          move.l 1cb26 <SysBase>,d0
   136c0:	          movea.l d0,a6
   136c2:	          movea.l 4(sp),a1
   136c6:	          jsr -690(a6)
	filename = NULL;
   136ca:	          clr.l 28(sp)
	return joined;
   136ce:	          move.l 8(sp),d0
}
   136d2:	          movea.l (sp)+,a6
   136d4:	          lea 20(sp),sp
   136d8:	          rts

000136da <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   136da:	             lea -28(sp),sp
   136de:	             move.l a6,-(sp)
   136e0:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   136e2:	             move.l 1cc02 <gameSettings+0x4>,d0
   136e8:	             move.l d0,d1
   136ea:	             addq.l #1,d1
   136ec:	             move.l d1,28(sp)
   136f0:	             clr.l 24(sp)
   136f4:	             move.l 1cb26 <SysBase>,d0
   136fa:	             movea.l d0,a6
   136fc:	             move.l 28(sp),d0
   13700:	             move.l 24(sp),d1
   13704:	             jsr -684(a6)
   13708:	             move.l d0,20(sp)
   1370c:	             move.l 20(sp),d0
   13710:	             move.l d0,1cbf6 <languageTable>
    if( languageTable == 0) {
   13716:	             move.l 1cbf6 <languageTable>,d0
   1371c:	         ,-- bne.s 1372c <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   1371e:	         |   pea 19efd <talk.c.490538ff+0x4ee>
   13724:	         |   jsr 172d8 <KPrintF>
   1372a:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   1372c:	         '-> move.l 1cc02 <gameSettings+0x4>,d0
   13732:	             move.l d0,d1
   13734:	             addq.l #1,d1
   13736:	             move.l d1,16(sp)
   1373a:	             clr.l 12(sp)
   1373e:	             move.l 1cb26 <SysBase>,d0
   13744:	             movea.l d0,a6
   13746:	             move.l 16(sp),d0
   1374a:	             move.l 12(sp),d1
   1374e:	             jsr -684(a6)
   13752:	             move.l d0,8(sp)
   13756:	             move.l 8(sp),d0
   1375a:	             move.l d0,1cbfa <languageName>
	if( languageName == 0) {
   13760:	             move.l 1cbfa <languageName>,d0
   13766:	         ,-- bne.s 13776 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   13768:	         |   pea 19f33 <talk.c.490538ff+0x524>
   1376e:	         |   jsr 172d8 <KPrintF>
   13774:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13776:	         '-> clr.l 32(sp)
   1377a:	   ,-------- bra.s 137f2 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   1377c:	,--|-------> tst.l 32(sp)
   13780:	|  |  ,----- beq.s 13790 <makeLanguageTable+0xb6>
   13782:	|  |  |      move.l 40(sp),-(sp)
   13786:	|  |  |      jsr 6bc <get2bytes>
   1378c:	|  |  |      addq.l #4,sp
   1378e:	|  |  |  ,-- bra.s 13792 <makeLanguageTable+0xb8>
   13790:	|  |  '--|-> moveq #0,d0
   13792:	|  |     '-> movea.l 1cbf6 <languageTable>,a0
   13798:	|  |         move.l 32(sp),d1
   1379c:	|  |         add.l d1,d1
   1379e:	|  |         add.l d1,d1
   137a0:	|  |         adda.l d1,a0
   137a2:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   137a4:	|  |         move.l 1cbfa <languageName>,d1
   137aa:	|  |         move.l 32(sp),d0
   137ae:	|  |         add.l d0,d0
   137b0:	|  |         add.l d0,d0
   137b2:	|  |         movea.l d1,a0
   137b4:	|  |         adda.l d0,a0
   137b6:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   137b8:	|  |         move.l 1cad0 <gameVersion>,d0
   137be:	|  |         cmpi.l #511,d0
   137c4:	|  |     ,-- ble.s 137ee <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   137c6:	|  |     |   move.l 1cc02 <gameSettings+0x4>,d0
   137cc:	|  |     +-- beq.s 137ee <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   137ce:	|  |     |   move.l 1cbfa <languageName>,d1
   137d4:	|  |     |   move.l 32(sp),d0
   137d8:	|  |     |   add.l d0,d0
   137da:	|  |     |   add.l d0,d0
   137dc:	|  |     |   movea.l d1,a2
   137de:	|  |     |   adda.l d0,a2
   137e0:	|  |     |   move.l 40(sp),-(sp)
   137e4:	|  |     |   jsr b02 <readString>
   137ea:	|  |     |   addq.l #4,sp
   137ec:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   137ee:	|  |     '-> addq.l #1,32(sp)
   137f2:	|  '-------> move.l 1cc02 <gameSettings+0x4>,d0
   137f8:	|            cmp.l 32(sp),d0
   137fc:	'----------- bcc.w 1377c <makeLanguageTable+0xa2>
		}
	}
}
   13800:	             nop
   13802:	             nop
   13804:	             movea.l (sp)+,a2
   13806:	             movea.l (sp)+,a6
   13808:	             lea 28(sp),sp
   1380c:	             rts

0001380e <readIniFile>:

void readIniFile (char * filename) {
   1380e:	                      lea -564(sp),sp
   13812:	                      move.l a6,-(sp)
   13814:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   13816:	                      move.l 576(sp),-(sp)
   1381a:	                      jsr b8 <copyString>
   13820:	                      addq.l #4,sp
   13822:	                      move.l d0,-(sp)
   13824:	                      jsr 13622 <getPrefsFilename>
   1382a:	                      addq.l #4,sp
   1382c:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13830:	                      move.l 562(sp),558(sp)
   13836:	                      move.l #1005,554(sp)
   1383e:	                      move.l 1cb2e <DOSBase>,d0
   13844:	                      movea.l d0,a6
   13846:	                      move.l 558(sp),d1
   1384a:	                      move.l 554(sp),d2
   1384e:	                      jsr -30(a6)
   13852:	                      move.l d0,550(sp)
   13856:	                      move.l 550(sp),d0
   1385a:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   1385e:	                      clr.l 1cbfe <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   13864:	                      move.w #1,1cc06 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   1386c:	                      clr.l 1cc08 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13872:	                      moveq #1,d0
   13874:	                      move.l d0,1cc0c <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   1387a:	                      clr.w 1cc10 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13880:	                      clr.w 1cc12 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13886:	                      clr.w 1cc14 <gameSettings+0x16>

	FreeVec(langName);
   1388c:	                      move.l 562(sp),542(sp)
   13892:	                      move.l 1cb26 <SysBase>,d0
   13898:	                      movea.l d0,a6
   1389a:	                      movea.l 542(sp),a1
   1389e:	                      jsr -690(a6)
	langName = NULL;
   138a2:	                      clr.l 562(sp)

	if (fp) {
   138a6:	                      tst.l 546(sp)
   138aa:	,-------------------- beq.w 13b88 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   138ae:	|                     move.l sp,d0
   138b0:	|                     addi.l #265,d0
   138b6:	|                     move.l #257,d1
   138bc:	|                     move.l d1,-(sp)
   138be:	|                     clr.l -(sp)
   138c0:	|                     move.l d0,-(sp)
   138c2:	|                     jsr 1725c <memset>
   138c8:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   138cc:	|                     move.l sp,d0
   138ce:	|                     addq.l #8,d0
   138d0:	|                     move.l #257,d1
   138d6:	|                     move.l d1,-(sp)
   138d8:	|                     clr.l -(sp)
   138da:	|                     move.l d0,-(sp)
   138dc:	|                     jsr 1725c <memset>
   138e2:	|                     lea 12(sp),sp
		unsigned char here = 0;
   138e6:	|                     clr.b 571(sp)
		char readChar = ' ';
   138ea:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   138f0:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   138f6:	|                     clr.w 566(sp)
		LONG tmp = 0;
   138fa:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   138fe:	|  ,----------------> move.l 546(sp),534(sp)
   13904:	|  |                  move.l 1cb2e <DOSBase>,d0
   1390a:	|  |                  movea.l d0,a6
   1390c:	|  |                  move.l 534(sp),d1
   13910:	|  |                  jsr -306(a6)
   13914:	|  |                  move.l d0,530(sp)
   13918:	|  |                  move.l 530(sp),d0
   1391c:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13920:	|  |                  moveq #-1,d1
   13922:	|  |                  cmp.l 538(sp),d1
   13926:	|  |           ,----- bne.s 13934 <readIniFile+0x126>
				readChar = '\n';
   13928:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   1392e:	|  |           |      clr.w 568(sp)
   13932:	|  |           |  ,-- bra.s 1393a <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13934:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   1393a:	|  |              '-> move.b 570(sp),d0
   1393e:	|  |                  ext.w d0
   13940:	|  |                  movea.w d0,a0
   13942:	|  |                  moveq #61,d0
   13944:	|  |                  cmp.l a0,d0
   13946:	|  |     ,----------- beq.w 13af0 <readIniFile+0x2e2>
   1394a:	|  |     |            moveq #61,d1
   1394c:	|  |     |            cmp.l a0,d1
   1394e:	|  |  ,--|----------- blt.w 13afc <readIniFile+0x2ee>
   13952:	|  |  |  |            moveq #10,d0
   13954:	|  |  |  |            cmp.l a0,d0
   13956:	|  |  |  |        ,-- beq.s 13960 <readIniFile+0x152>
   13958:	|  |  |  |        |   moveq #13,d1
   1395a:	|  |  |  |        |   cmp.l a0,d1
   1395c:	|  |  +--|--------|-- bne.w 13afc <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13960:	|  |  |  |        '-> tst.w 566(sp)
   13964:	|  |  |  |     ,----- beq.w 13ade <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13968:	|  |  |  |     |      pea 19f67 <talk.c.490538ff+0x558>
   1396e:	|  |  |  |     |      move.l sp,d0
   13970:	|  |  |  |     |      addi.l #269,d0
   13976:	|  |  |  |     |      move.l d0,-(sp)
   13978:	|  |  |  |     |      jsr 13ca4 <strcmp>
   1397e:	|  |  |  |     |      addq.l #8,sp
   13980:	|  |  |  |     |      tst.l d0
   13982:	|  |  |  |     |  ,-- bne.s 1399c <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13984:	|  |  |  |     |  |   move.l sp,d0
   13986:	|  |  |  |     |  |   addq.l #8,d0
   13988:	|  |  |  |     |  |   move.l d0,-(sp)
   1398a:	|  |  |  |     |  |   jsr 13b94 <stringToInt>
   13990:	|  |  |  |     |  |   addq.l #4,sp
   13992:	|  |  |  |     |  |   move.l d0,1cbfe <gameSettings>
   13998:	|  |  |  |     +--|-- bra.w 13ade <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   1399c:	|  |  |  |     |  '-> pea 19f70 <talk.c.490538ff+0x561>
   139a2:	|  |  |  |     |      move.l sp,d0
   139a4:	|  |  |  |     |      addi.l #269,d0
   139aa:	|  |  |  |     |      move.l d0,-(sp)
   139ac:	|  |  |  |     |      jsr 13ca4 <strcmp>
   139b2:	|  |  |  |     |      addq.l #8,sp
   139b4:	|  |  |  |     |      tst.l d0
   139b6:	|  |  |  |     |  ,-- bne.s 139dc <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   139b8:	|  |  |  |     |  |   move.l sp,d0
   139ba:	|  |  |  |     |  |   addq.l #8,d0
   139bc:	|  |  |  |     |  |   move.l d0,-(sp)
   139be:	|  |  |  |     |  |   jsr 13b94 <stringToInt>
   139c4:	|  |  |  |     |  |   addq.l #4,sp
   139c6:	|  |  |  |     |  |   tst.l d0
   139c8:	|  |  |  |     |  |   seq d0
   139ca:	|  |  |  |     |  |   neg.b d0
   139cc:	|  |  |  |     |  |   move.b d0,d0
   139ce:	|  |  |  |     |  |   andi.w #255,d0
   139d2:	|  |  |  |     |  |   move.w d0,1cc06 <gameSettings+0x8>
   139d8:	|  |  |  |     +--|-- bra.w 13ade <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   139dc:	|  |  |  |     |  '-> pea 19f77 <talk.c.490538ff+0x568>
   139e2:	|  |  |  |     |      move.l sp,d0
   139e4:	|  |  |  |     |      addi.l #269,d0
   139ea:	|  |  |  |     |      move.l d0,-(sp)
   139ec:	|  |  |  |     |      jsr 13ca4 <strcmp>
   139f2:	|  |  |  |     |      addq.l #8,sp
   139f4:	|  |  |  |     |      tst.l d0
   139f6:	|  |  |  |     |  ,-- bne.s 13a10 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   139f8:	|  |  |  |     |  |   move.l sp,d0
   139fa:	|  |  |  |     |  |   addq.l #8,d0
   139fc:	|  |  |  |     |  |   move.l d0,-(sp)
   139fe:	|  |  |  |     |  |   jsr 13b94 <stringToInt>
   13a04:	|  |  |  |     |  |   addq.l #4,sp
   13a06:	|  |  |  |     |  |   move.l d0,1cc08 <gameSettings+0xa>
   13a0c:	|  |  |  |     +--|-- bra.w 13ade <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13a10:	|  |  |  |     |  '-> pea 19f7f <talk.c.490538ff+0x570>
   13a16:	|  |  |  |     |      move.l sp,d0
   13a18:	|  |  |  |     |      addi.l #269,d0
   13a1e:	|  |  |  |     |      move.l d0,-(sp)
   13a20:	|  |  |  |     |      jsr 13ca4 <strcmp>
   13a26:	|  |  |  |     |      addq.l #8,sp
   13a28:	|  |  |  |     |      tst.l d0
   13a2a:	|  |  |  |     |  ,-- bne.s 13a44 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13a2c:	|  |  |  |     |  |   move.l sp,d0
   13a2e:	|  |  |  |     |  |   addq.l #8,d0
   13a30:	|  |  |  |     |  |   move.l d0,-(sp)
   13a32:	|  |  |  |     |  |   jsr 13b94 <stringToInt>
   13a38:	|  |  |  |     |  |   addq.l #4,sp
   13a3a:	|  |  |  |     |  |   move.l d0,1cc0c <gameSettings+0xe>
   13a40:	|  |  |  |     +--|-- bra.w 13ade <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13a44:	|  |  |  |     |  '-> pea 19f89 <talk.c.490538ff+0x57a>
   13a4a:	|  |  |  |     |      move.l sp,d0
   13a4c:	|  |  |  |     |      addi.l #269,d0
   13a52:	|  |  |  |     |      move.l d0,-(sp)
   13a54:	|  |  |  |     |      jsr 13ca4 <strcmp>
   13a5a:	|  |  |  |     |      addq.l #8,sp
   13a5c:	|  |  |  |     |      tst.l d0
   13a5e:	|  |  |  |     |  ,-- bne.s 13a78 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13a60:	|  |  |  |     |  |   move.l sp,d0
   13a62:	|  |  |  |     |  |   addq.l #8,d0
   13a64:	|  |  |  |     |  |   move.l d0,-(sp)
   13a66:	|  |  |  |     |  |   jsr 13b94 <stringToInt>
   13a6c:	|  |  |  |     |  |   addq.l #4,sp
   13a6e:	|  |  |  |     |  |   move.l d0,d0
   13a70:	|  |  |  |     |  |   move.w d0,1cc10 <gameSettings+0x12>
   13a76:	|  |  |  |     +--|-- bra.s 13ade <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13a78:	|  |  |  |     |  '-> pea 19f95 <talk.c.490538ff+0x586>
   13a7e:	|  |  |  |     |      move.l sp,d0
   13a80:	|  |  |  |     |      addi.l #269,d0
   13a86:	|  |  |  |     |      move.l d0,-(sp)
   13a88:	|  |  |  |     |      jsr 13ca4 <strcmp>
   13a8e:	|  |  |  |     |      addq.l #8,sp
   13a90:	|  |  |  |     |      tst.l d0
   13a92:	|  |  |  |     |  ,-- bne.s 13aac <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13a94:	|  |  |  |     |  |   move.l sp,d0
   13a96:	|  |  |  |     |  |   addq.l #8,d0
   13a98:	|  |  |  |     |  |   move.l d0,-(sp)
   13a9a:	|  |  |  |     |  |   jsr 13b94 <stringToInt>
   13aa0:	|  |  |  |     |  |   addq.l #4,sp
   13aa2:	|  |  |  |     |  |   move.l d0,d0
   13aa4:	|  |  |  |     |  |   move.w d0,1cc12 <gameSettings+0x14>
   13aaa:	|  |  |  |     +--|-- bra.s 13ade <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13aac:	|  |  |  |     |  '-> pea 19fa3 <talk.c.490538ff+0x594>
   13ab2:	|  |  |  |     |      move.l sp,d0
   13ab4:	|  |  |  |     |      addi.l #269,d0
   13aba:	|  |  |  |     |      move.l d0,-(sp)
   13abc:	|  |  |  |     |      jsr 13ca4 <strcmp>
   13ac2:	|  |  |  |     |      addq.l #8,sp
   13ac4:	|  |  |  |     |      tst.l d0
   13ac6:	|  |  |  |     +----- bne.s 13ade <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13ac8:	|  |  |  |     |      move.l sp,d0
   13aca:	|  |  |  |     |      addq.l #8,d0
   13acc:	|  |  |  |     |      move.l d0,-(sp)
   13ace:	|  |  |  |     |      jsr 13b94 <stringToInt>
   13ad4:	|  |  |  |     |      addq.l #4,sp
   13ad6:	|  |  |  |     |      move.l d0,d0
   13ad8:	|  |  |  |     |      move.w d0,1cc14 <gameSettings+0x16>
					}
				}
				here = 0;
   13ade:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   13ae2:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13ae6:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13aea:	|  |  |  |            clr.b 8(sp)
				break;
   13aee:	|  |  |  |  ,-------- bra.s 13b66 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13af0:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   13af6:	|  |  |     |         clr.b 571(sp)
				break;
   13afa:	|  |  |     +-------- bra.s 13b66 <readIniFile+0x358>

				default:
				if (doingSecond) {
   13afc:	|  |  '-----|-------> tst.w 566(sp)
   13b00:	|  |        |  ,----- beq.s 13b34 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13b02:	|  |        |  |      move.b 571(sp),d0
   13b06:	|  |        |  |      move.b d0,d1
   13b08:	|  |        |  |      addq.b #1,d1
   13b0a:	|  |        |  |      move.b d1,571(sp)
   13b0e:	|  |        |  |      move.b d0,d0
   13b10:	|  |        |  |      andi.l #255,d0
   13b16:	|  |        |  |      lea 572(sp),a0
   13b1a:	|  |        |  |      adda.l d0,a0
   13b1c:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13b22:	|  |        |  |      moveq #0,d0
   13b24:	|  |        |  |      move.b 571(sp),d0
   13b28:	|  |        |  |      lea 572(sp),a0
   13b2c:	|  |        |  |      adda.l d0,a0
   13b2e:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13b32:	|  |        |  |  ,-- bra.s 13b64 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13b34:	|  |        |  '--|-> move.b 571(sp),d0
   13b38:	|  |        |     |   move.b d0,d1
   13b3a:	|  |        |     |   addq.b #1,d1
   13b3c:	|  |        |     |   move.b d1,571(sp)
   13b40:	|  |        |     |   move.b d0,d0
   13b42:	|  |        |     |   andi.l #255,d0
   13b48:	|  |        |     |   lea 572(sp),a0
   13b4c:	|  |        |     |   adda.l d0,a0
   13b4e:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13b54:	|  |        |     |   moveq #0,d0
   13b56:	|  |        |     |   move.b 571(sp),d0
   13b5a:	|  |        |     |   lea 572(sp),a0
   13b5e:	|  |        |     |   adda.l d0,a0
   13b60:	|  |        |     |   clr.b -307(a0)
				break;
   13b64:	|  |        |     '-> nop
			}
		} while (keepGoing);
   13b66:	|  |        '-------> tst.w 568(sp)
   13b6a:	|  '----------------- bne.w 138fe <readIniFile+0xf0>

		Close(fp);
   13b6e:	|                     move.l 546(sp),526(sp)
   13b74:	|                     move.l 1cb2e <DOSBase>,d0
   13b7a:	|                     movea.l d0,a6
   13b7c:	|                     move.l 526(sp),d1
   13b80:	|                     jsr -36(a6)
   13b84:	|                     move.l d0,522(sp)
	}
}
   13b88:	'-------------------> nop
   13b8a:	                      move.l (sp)+,d2
   13b8c:	                      movea.l (sp)+,a6
   13b8e:	                      lea 564(sp),sp
   13b92:	                      rts

00013b94 <stringToInt>:

unsigned int stringToInt (char * s) {
   13b94:	             subq.l #8,sp
	int i = 0;
   13b96:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13b9a:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13b9e:	,----------> movea.l 12(sp),a0
   13ba2:	|            move.b (a0),d0
   13ba4:	|            cmpi.b #47,d0
   13ba8:	|        ,-- ble.s 13be0 <stringToInt+0x4c>
   13baa:	|        |   movea.l 12(sp),a0
   13bae:	|        |   move.b (a0),d0
   13bb0:	|        |   cmpi.b #57,d0
   13bb4:	|        +-- bgt.s 13be0 <stringToInt+0x4c>
			i *= 10;
   13bb6:	|        |   move.l 4(sp),d1
   13bba:	|        |   move.l d1,d0
   13bbc:	|        |   add.l d0,d0
   13bbe:	|        |   add.l d0,d0
   13bc0:	|        |   add.l d1,d0
   13bc2:	|        |   add.l d0,d0
   13bc4:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13bc8:	|        |   movea.l 12(sp),a0
   13bcc:	|        |   move.b (a0),d0
   13bce:	|        |   ext.w d0
   13bd0:	|        |   movea.w d0,a0
   13bd2:	|        |   moveq #-48,d0
   13bd4:	|        |   add.l a0,d0
   13bd6:	|        |   add.l d0,4(sp)
			s ++;
   13bda:	|        |   addq.l #1,12(sp)
   13bde:	|  ,-----|-- bra.s 13c18 <stringToInt+0x84>
		} else if (*s == '-') {
   13be0:	|  |     '-> movea.l 12(sp),a0
   13be4:	|  |         move.b (a0),d0
   13be6:	|  |         cmpi.b #45,d0
   13bea:	|  |     ,-- bne.s 13c04 <stringToInt+0x70>
			negative = ! negative;
   13bec:	|  |     |   tst.w 2(sp)
   13bf0:	|  |     |   seq d0
   13bf2:	|  |     |   neg.b d0
   13bf4:	|  |     |   move.b d0,d0
   13bf6:	|  |     |   andi.w #255,d0
   13bfa:	|  |     |   move.w d0,2(sp)
			s++;
   13bfe:	|  |     |   addq.l #1,12(sp)
   13c02:	+--|-----|-- bra.s 13b9e <stringToInt+0xa>
		} else {
			if (negative)
   13c04:	|  |     '-> tst.w 2(sp)
   13c08:	|  |     ,-- beq.s 13c12 <stringToInt+0x7e>
				return -i;
   13c0a:	|  |     |   move.l 4(sp),d0
   13c0e:	|  |     |   neg.l d0
   13c10:	|  |  ,--|-- bra.s 13c1a <stringToInt+0x86>
			return i;
   13c12:	|  |  |  '-> move.l 4(sp),d0
   13c16:	|  |  +----- bra.s 13c1a <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13c18:	'--'--|----X bra.s 13b9e <stringToInt+0xa>
		}
	}
   13c1a:	      '----> addq.l #8,sp
   13c1c:	             rts

00013c1e <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13c1e:	    lea -28(sp),sp
   13c22:	    move.l a6,-(sp)
   13c24:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13c26:	    pea 19fad <talk.c.490538ff+0x59e>
   13c2c:	    jsr 172d8 <KPrintF>
   13c32:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13c34:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13c38:	    move.l 40(sp),30(sp)
   13c3e:	    move.l #1005,26(sp)
   13c46:	    move.l 1cb2e <DOSBase>,d0
   13c4c:	    movea.l d0,a6
   13c4e:	    move.l 30(sp),d1
   13c52:	    move.l 26(sp),d2
   13c56:	    jsr -30(a6)
   13c5a:	    move.l d0,22(sp)
   13c5e:	    move.l 22(sp),d0
   13c62:	    move.l d0,18(sp)
	if (tester) {
   13c66:	,-- beq.s 13c96 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13c68:	|   pea 19fc7 <talk.c.490538ff+0x5b8>
   13c6e:	|   jsr 172d8 <KPrintF>
   13c74:	|   addq.l #4,sp
		retval = 1;
   13c76:	|   move.b #1,35(sp)
		Close(tester);
   13c7c:	|   move.l 18(sp),14(sp)
   13c82:	|   move.l 1cb2e <DOSBase>,d0
   13c88:	|   movea.l d0,a6
   13c8a:	|   move.l 14(sp),d1
   13c8e:	|   jsr -36(a6)
   13c92:	|   move.l d0,10(sp)
	}
	return retval;
   13c96:	'-> move.b 35(sp),d0
   13c9a:	    move.l (sp)+,d2
   13c9c:	    movea.l (sp)+,a6
   13c9e:	    lea 28(sp),sp
   13ca2:	    rts

00013ca4 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13ca4:	   ,-- bra.s 13cae <strcmp+0xa>
    {
        s1++;
   13ca6:	,--|-> addq.l #1,4(sp)
        s2++;
   13caa:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13cae:	|  '-> movea.l 4(sp),a0
   13cb2:	|      move.b (a0),d0
   13cb4:	|  ,-- beq.s 13cc6 <strcmp+0x22>
   13cb6:	|  |   movea.l 4(sp),a0
   13cba:	|  |   move.b (a0),d1
   13cbc:	|  |   movea.l 8(sp),a0
   13cc0:	|  |   move.b (a0),d0
   13cc2:	|  |   cmp.b d1,d0
   13cc4:	'--|-- beq.s 13ca6 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13cc6:	   '-> movea.l 4(sp),a0
   13cca:	       move.b (a0),d0
   13ccc:	       moveq #0,d1
   13cce:	       move.b d0,d1
   13cd0:	       movea.l 8(sp),a0
   13cd4:	       move.b (a0),d0
   13cd6:	       move.b d0,d0
   13cd8:	       andi.l #255,d0
   13cde:	       sub.l d0,d1
   13ce0:	       move.l d1,d0
}
   13ce2:	       rts

00013ce4 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13ce4:	       subq.l #4,sp
	long unsigned int i = 0;
   13ce6:	       clr.l (sp)
	while(s[i]) i++; 
   13ce8:	   ,-- bra.s 13cec <strlen+0x8>
   13cea:	,--|-> addq.l #1,(sp)
   13cec:	|  '-> movea.l 8(sp),a0
   13cf0:	|      adda.l (sp),a0
   13cf2:	|      move.b (a0),d0
   13cf4:	'----- bne.s 13cea <strlen+0x6>
	return(i);
   13cf6:	       move.l (sp),d0
}
   13cf8:	       addq.l #4,sp
   13cfa:	       rts

00013cfc <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13cfc:	    nop
   13cfe:	,-> move.l 8(sp),d0
   13d02:	|   move.l d0,d1
   13d04:	|   addq.l #1,d1
   13d06:	|   move.l d1,8(sp)
   13d0a:	|   movea.l 4(sp),a0
   13d0e:	|   lea 1(a0),a1
   13d12:	|   move.l a1,4(sp)
   13d16:	|   movea.l d0,a1
   13d18:	|   move.b (a1),d0
   13d1a:	|   move.b d0,(a0)
   13d1c:	|   move.b (a0),d0
   13d1e:	'-- bne.s 13cfe <strcpy+0x2>
}
   13d20:	    nop
   13d22:	    rts

00013d24 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13d24:	    lea -20(sp),sp
   13d28:	    move.l a6,-(sp)
   13d2a:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13d2c:	    move.l 32(sp),-(sp)
   13d30:	    jsr 13ce4 <strlen>
   13d36:	    addq.l #4,sp
   13d38:	    move.l d0,d2
   13d3a:	    move.l 36(sp),-(sp)
   13d3e:	    jsr 13ce4 <strlen>
   13d44:	    addq.l #4,sp
   13d46:	    add.l d2,d0
   13d48:	    move.l d0,d1
   13d4a:	    addq.l #1,d1
   13d4c:	    move.l d1,20(sp)
   13d50:	    clr.l 16(sp)
   13d54:	    move.l 1cb26 <SysBase>,d0
   13d5a:	    movea.l d0,a6
   13d5c:	    move.l 20(sp),d0
   13d60:	    move.l 16(sp),d1
   13d64:	    jsr -684(a6)
   13d68:	    move.l d0,12(sp)
   13d6c:	    move.l 12(sp),d0
   13d70:	    move.l d0,8(sp)
	char * t = newString;
   13d74:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13d7a:	    nop
   13d7c:	,-> move.l 32(sp),d0
   13d80:	|   move.l d0,d1
   13d82:	|   addq.l #1,d1
   13d84:	|   move.l d1,32(sp)
   13d88:	|   movea.l 24(sp),a0
   13d8c:	|   lea 1(a0),a1
   13d90:	|   move.l a1,24(sp)
   13d94:	|   movea.l d0,a1
   13d96:	|   move.b (a1),d0
   13d98:	|   move.b d0,(a0)
   13d9a:	|   move.b (a0),d0
   13d9c:	'-- bne.s 13d7c <joinStrings+0x58>
	t--;
   13d9e:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13da2:	    nop
   13da4:	,-> move.l 36(sp),d0
   13da8:	|   move.l d0,d1
   13daa:	|   addq.l #1,d1
   13dac:	|   move.l d1,36(sp)
   13db0:	|   movea.l 24(sp),a0
   13db4:	|   lea 1(a0),a1
   13db8:	|   move.l a1,24(sp)
   13dbc:	|   movea.l d0,a1
   13dbe:	|   move.b (a1),d0
   13dc0:	|   move.b d0,(a0)
   13dc2:	|   move.b (a0),d0
   13dc4:	'-- bne.s 13da4 <joinStrings+0x80>

	return newString;
   13dc6:	    move.l 8(sp),d0
}
   13dca:	    move.l (sp)+,d2
   13dcc:	    movea.l (sp)+,a6
   13dce:	    lea 20(sp),sp
   13dd2:	    rts

00013dd4 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13dd4:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13dd8:	       moveq #10,d0
   13dda:	       cmp.l 28(sp),d0
   13dde:	   ,-- bne.s 13dfc <itoa+0x28>
   13de0:	   |   tst.l 20(sp)
   13de4:	   +-- bge.s 13dfc <itoa+0x28>
        *str++ = '-';
   13de6:	   |   move.l 24(sp),d0
   13dea:	   |   move.l d0,d1
   13dec:	   |   addq.l #1,d1
   13dee:	   |   move.l d1,24(sp)
   13df2:	   |   movea.l d0,a0
   13df4:	   |   move.b #45,(a0)
        value *= -1;
   13df8:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13dfc:	   '-> move.l 24(sp),12(sp)
   13e02:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13e08:	   ,-> move.l 20(sp),d0
   13e0c:	   |   move.l 28(sp),-(sp)
   13e10:	   |   move.l d0,-(sp)
   13e12:	   |   jsr 17d10 <__modsi3>
   13e18:	   |   addq.l #8,sp
   13e1a:	   |   movea.l d0,a1
   13e1c:	   |   move.l 12(sp),d0
   13e20:	   |   move.l d0,d1
   13e22:	   |   addq.l #1,d1
   13e24:	   |   move.l d1,12(sp)
   13e28:	   |   lea 19fdf <talk.c.490538ff+0x5d0>,a0
   13e2e:	   |   move.b (0,a1,a0.l),d1
   13e32:	   |   movea.l d0,a0
   13e34:	   |   move.b d1,(a0)
        value /= base;
   13e36:	   |   move.l 28(sp),-(sp)
   13e3a:	   |   move.l 24(sp),-(sp)
   13e3e:	   |   jsr 17ce2 <__divsi3>
   13e44:	   |   addq.l #8,sp
   13e46:	   |   move.l d0,20(sp)
    } while (value);
   13e4a:	   '-- bne.s 13e08 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13e4c:	       move.l 12(sp),d0
   13e50:	       move.l d0,d1
   13e52:	       subq.l #1,d1
   13e54:	       move.l d1,12(sp)
   13e58:	       movea.l d0,a0
   13e5a:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13e5c:	       move.l 4(sp),8(sp)
   13e62:	   ,-- bra.s 13e88 <itoa+0xb4>
        char temp = *low;
   13e64:	,--|-> movea.l 8(sp),a0
   13e68:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13e6c:	|  |   movea.l 12(sp),a0
   13e70:	|  |   move.b (a0),d0
   13e72:	|  |   movea.l 8(sp),a0
   13e76:	|  |   move.b d0,(a0)
        *ptr = temp;
   13e78:	|  |   movea.l 12(sp),a0
   13e7c:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13e80:	|  |   addq.l #1,8(sp)
   13e84:	|  |   subq.l #1,12(sp)
   13e88:	|  '-> move.l 8(sp),d0
   13e8c:	|      cmp.l 12(sp),d0
   13e90:	'----- bcs.s 13e64 <itoa+0x90>
    }
    return rc;
   13e92:	       move.l 4(sp),d0
}
   13e96:	       lea 16(sp),sp
   13e9a:	       rts

00013e9c <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13e9c:	                            lea -40(sp),sp
   13ea0:	                            move.l d2,-(sp)
    char* s = str;
   13ea2:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13ea8:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13eae:	   ,----------------------- bra.w 13fe2 <vsprintf2+0x146>
        if (*p == '%') {
   13eb2:	,--|----------------------> movea.l 36(sp),a0
   13eb6:	|  |                        move.b (a0),d0
   13eb8:	|  |                        cmpi.b #37,d0
   13ebc:	|  |  ,-------------------- bne.w 13fc8 <vsprintf2+0x12c>
            switch (*++p) {
   13ec0:	|  |  |                     addq.l #1,36(sp)
   13ec4:	|  |  |                     movea.l 36(sp),a0
   13ec8:	|  |  |                     move.b (a0),d0
   13eca:	|  |  |                     ext.w d0
   13ecc:	|  |  |                     movea.w d0,a0
   13ece:	|  |  |                     moveq #115,d0
   13ed0:	|  |  |                     cmp.l a0,d0
   13ed2:	|  |  |           ,-------- beq.s 13f4a <vsprintf2+0xae>
   13ed4:	|  |  |           |         moveq #115,d1
   13ed6:	|  |  |           |         cmp.l a0,d1
   13ed8:	|  |  |  ,--------|-------- blt.w 13fb0 <vsprintf2+0x114>
   13edc:	|  |  |  |        |         moveq #99,d2
   13ede:	|  |  |  |        |         cmp.l a0,d2
   13ee0:	|  |  |  |  ,-----|-------- beq.w 13f88 <vsprintf2+0xec>
   13ee4:	|  |  |  |  |     |         moveq #100,d0
   13ee6:	|  |  |  |  |     |         cmp.l a0,d0
   13ee8:	|  |  |  +--|-----|-------- bne.w 13fb0 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13eec:	|  |  |  |  |     |         addq.l #4,56(sp)
   13ef0:	|  |  |  |  |     |         movea.l 56(sp),a0
   13ef4:	|  |  |  |  |     |         move.l (a0),d0
   13ef6:	|  |  |  |  |     |         move.l d0,d1
   13ef8:	|  |  |  |  |     |         subq.l #1,d1
   13efa:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13efe:	|  |  |  |  |     |         pea a <_start+0xa>
   13f02:	|  |  |  |  |     |         lea 8(sp),a0
   13f06:	|  |  |  |  |     |         move.l a0,-(sp)
   13f08:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13f0c:	|  |  |  |  |     |         jsr 13dd4 <itoa>
   13f12:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13f16:	|  |  |  |  |     |         lea 44(sp),a0
   13f1a:	|  |  |  |  |     |         lea -40(a0),a0
   13f1e:	|  |  |  |  |     |         move.l a0,28(sp)
   13f22:	|  |  |  |  |     |     ,-- bra.s 13f3e <vsprintf2+0xa2>
                        *s++ = *b;
   13f24:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   13f28:	|  |  |  |  |     |  |  |   move.l d0,d1
   13f2a:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13f2c:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13f30:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13f34:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13f36:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13f38:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13f3a:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13f3e:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   13f42:	|  |  |  |  |     |  |      move.b (a0),d0
   13f44:	|  |  |  |  |     |  '----- bne.s 13f24 <vsprintf2+0x88>
                    }
                    break;
   13f46:	|  |  |  |  |  ,--|-------- bra.w 13fde <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13f4a:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   13f4e:	|  |  |  |  |  |            movea.l 56(sp),a0
   13f52:	|  |  |  |  |  |            move.l (a0),d0
   13f54:	|  |  |  |  |  |            move.l d0,d1
   13f56:	|  |  |  |  |  |            subq.l #1,d1
   13f58:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13f5c:	|  |  |  |  |  |        ,-- bra.s 13f7e <vsprintf2+0xe2>
                        *s++ = *sval++;
   13f5e:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   13f62:	|  |  |  |  |  |     |  |   move.l d1,d2
   13f64:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13f66:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13f6a:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13f6e:	|  |  |  |  |  |     |  |   move.l d0,d2
   13f70:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13f72:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13f76:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13f78:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13f7a:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13f7c:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13f7e:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   13f82:	|  |  |  |  |  |     |      move.b (a0),d0
   13f84:	|  |  |  |  |  |     '----- bne.s 13f5e <vsprintf2+0xc2>
                    }
                    break;
   13f86:	|  |  |  |  |  +----------- bra.s 13fde <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13f88:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   13f8c:	|  |  |  |     |            movea.l 56(sp),a0
   13f90:	|  |  |  |     |            move.l (a0),d0
   13f92:	|  |  |  |     |            move.l d0,d1
   13f94:	|  |  |  |     |            subq.l #1,d1
   13f96:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13f9a:	|  |  |  |     |            move.l 40(sp),d0
   13f9e:	|  |  |  |     |            move.l d0,d2
   13fa0:	|  |  |  |     |            addq.l #1,d2
   13fa2:	|  |  |  |     |            move.l d2,40(sp)
   13fa6:	|  |  |  |     |            move.l 24(sp),d1
   13faa:	|  |  |  |     |            movea.l d0,a0
   13fac:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13fae:	|  |  |  |     +----------- bra.s 13fde <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13fb0:	|  |  |  '-----|----------> move.l 40(sp),d0
   13fb4:	|  |  |        |            move.l d0,d1
   13fb6:	|  |  |        |            addq.l #1,d1
   13fb8:	|  |  |        |            move.l d1,40(sp)
   13fbc:	|  |  |        |            movea.l 36(sp),a0
   13fc0:	|  |  |        |            move.b (a0),d1
   13fc2:	|  |  |        |            movea.l d0,a0
   13fc4:	|  |  |        |            move.b d1,(a0)
                    break;
   13fc6:	|  |  |        +----------- bra.s 13fde <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13fc8:	|  |  '--------|----------> move.l 40(sp),d0
   13fcc:	|  |           |            move.l d0,d1
   13fce:	|  |           |            addq.l #1,d1
   13fd0:	|  |           |            move.l d1,40(sp)
   13fd4:	|  |           |            movea.l 36(sp),a0
   13fd8:	|  |           |            move.b (a0),d1
   13fda:	|  |           |            movea.l d0,a0
   13fdc:	|  |           |            move.b d1,(a0)
        }
        p++;
   13fde:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   13fe2:	|  '----------------------> movea.l 36(sp),a0
   13fe6:	|                           move.b (a0),d0
   13fe8:	'-------------------------- bne.w 13eb2 <vsprintf2+0x16>
    }
    *s = '\0';
   13fec:	                            movea.l 40(sp),a0
   13ff0:	                            clr.b (a0)
    return s - str;
   13ff2:	                            move.l 40(sp),d0
   13ff6:	                            sub.l 48(sp),d0
}
   13ffa:	                            move.l (sp)+,d2
   13ffc:	                            lea 40(sp),sp
   14000:	                            rts

00014002 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   14002:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   14004:	moveq #16,d0
   14006:	add.l sp,d0
   14008:	move.l d0,d1
   1400a:	addq.l #4,d1
   1400c:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   14010:	move.l 16(sp),d0
   14014:	move.l 4(sp),-(sp)
   14018:	move.l d0,-(sp)
   1401a:	move.l 20(sp),-(sp)
   1401e:	jsr 13e9c <vsprintf2>
   14024:	lea 12(sp),sp
   14028:	move.l d0,(sp)
    va_end(args);
   1402a:	clr.l 4(sp)

    return done;
   1402e:	move.l (sp),d0
}
   14030:	addq.l #8,sp
   14032:	rts

00014034 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   14034:	       lea -20(sp),sp
   14038:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1403a:	       moveq #12,d0
   1403c:	       move.l d0,20(sp)
   14040:	       clr.l 16(sp)
   14044:	       move.l 1cb26 <SysBase>,d0
   1404a:	       movea.l d0,a6
   1404c:	       move.l 20(sp),d0
   14050:	       move.l 16(sp),d1
   14054:	       jsr -684(a6)
   14058:	       move.l d0,12(sp)
   1405c:	       move.l 12(sp),d0
   14060:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   14064:	   ,-- bne.s 1406a <addVarToStack+0x36>
   14066:	   |   clr.w d0
   14068:	,--|-- bra.s 140b2 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   1406a:	|  '-> move.l 8(sp),d0
   1406e:	|      move.l d0,-(sp)
   14070:	|      move.l 32(sp),-(sp)
   14074:	|      jsr 14b96 <copyMain>
   1407a:	|      addq.l #8,sp
   1407c:	|      tst.w d0
   1407e:	|  ,-- bne.s 1409a <addVarToStack+0x66>
        FreeVec(newStack);
   14080:	|  |   move.l 8(sp),4(sp)
   14086:	|  |   move.l 1cb26 <SysBase>,d0
   1408c:	|  |   movea.l d0,a6
   1408e:	|  |   movea.l 4(sp),a1
   14092:	|  |   jsr -690(a6)
        return FALSE;
   14096:	|  |   clr.w d0
   14098:	+--|-- bra.s 140b2 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   1409a:	|  '-> movea.l 32(sp),a0
   1409e:	|      move.l (a0),d0
   140a0:	|      movea.l 8(sp),a0
   140a4:	|      move.l d0,8(a0)
    *thisStack = newStack;
   140a8:	|      movea.l 32(sp),a0
   140ac:	|      move.l 8(sp),(a0)
    return TRUE;
   140b0:	|      moveq #1,d0
}
   140b2:	'----> movea.l (sp)+,a6
   140b4:	       lea 20(sp),sp
   140b8:	       rts

000140ba <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   140ba:	       lea -16(sp),sp
   140be:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   140c0:	       moveq #12,d0
   140c2:	       move.l d0,16(sp)
   140c6:	       clr.l 12(sp)
   140ca:	       move.l 1cb26 <SysBase>,d0
   140d0:	       movea.l d0,a6
   140d2:	       move.l 16(sp),d0
   140d6:	       move.l 12(sp),d1
   140da:	       jsr -684(a6)
   140de:	       move.l d0,8(sp)
   140e2:	       move.l 8(sp),d0
   140e6:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   140ea:	   ,-- bne.s 140f0 <addVarToStackQuick+0x36>
   140ec:	   |   clr.w d0
   140ee:	,--|-- bra.s 14126 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   140f0:	|  '-> move.l 4(sp),d0
   140f4:	|      pea 8 <_start+0x8>
   140f8:	|      move.l 28(sp),-(sp)
   140fc:	|      move.l d0,-(sp)
   140fe:	|      jsr 1728c <memcpy>
   14104:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   14108:	|      movea.l 24(sp),a0
   1410c:	|      clr.l (a0)

    newStack->next = *thisStack;
   1410e:	|      movea.l 28(sp),a0
   14112:	|      move.l (a0),d0
   14114:	|      movea.l 4(sp),a0
   14118:	|      move.l d0,8(a0)
    *thisStack = newStack;
   1411c:	|      movea.l 28(sp),a0
   14120:	|      move.l 4(sp),(a0)
    return TRUE;
   14124:	|      moveq #1,d0
}
   14126:	'----> movea.l (sp)+,a6
   14128:	       lea 16(sp),sp
   1412c:	       rts

0001412e <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   1412e:	       lea -16(sp),sp
   14132:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   14134:	       movea.l 24(sp),a0
   14138:	       move.l (a0),d0
   1413a:	       moveq #1,d1
   1413c:	       cmp.l d0,d1
   1413e:	   ,-- bne.s 14168 <addVariablesInSecond+0x3a>
   14140:	   |   movea.l 28(sp),a0
   14144:	   |   move.l (a0),d0
   14146:	   |   moveq #1,d1
   14148:	   |   cmp.l d0,d1
   1414a:	   +-- bne.s 14168 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   1414c:	   |   movea.l 28(sp),a0
   14150:	   |   move.l 4(a0),d1
   14154:	   |   movea.l 24(sp),a0
   14158:	   |   move.l 4(a0),d0
   1415c:	   |   add.l d1,d0
   1415e:	   |   movea.l 28(sp),a0
   14162:	   |   move.l d0,4(a0)
   14166:	,--|-- bra.s 141e2 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   14168:	|  '-> move.l 24(sp),-(sp)
   1416c:	|      jsr 14dce <getTextFromAnyVar>
   14172:	|      addq.l #4,sp
   14174:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   14178:	|      move.l 28(sp),-(sp)
   1417c:	|      jsr 14dce <getTextFromAnyVar>
   14182:	|      addq.l #4,sp
   14184:	|      move.l d0,12(sp)

		unlinkVar(var2);
   14188:	|      move.l 28(sp),-(sp)
   1418c:	|      jsr 14a46 <unlinkVar>
   14192:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   14194:	|      move.l 12(sp),-(sp)
   14198:	|      move.l 20(sp),-(sp)
   1419c:	|      jsr 13d24 <joinStrings>
   141a2:	|      addq.l #8,sp
   141a4:	|      movea.l 28(sp),a0
   141a8:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   141ac:	|      movea.l 28(sp),a0
   141b0:	|      moveq #3,d0
   141b2:	|      move.l d0,(a0)
		FreeVec(string1);
   141b4:	|      move.l 16(sp),8(sp)
   141ba:	|      move.l 1cb26 <SysBase>,d0
   141c0:	|      movea.l d0,a6
   141c2:	|      movea.l 8(sp),a1
   141c6:	|      jsr -690(a6)
		FreeVec(string2);
   141ca:	|      move.l 12(sp),4(sp)
   141d0:	|      move.l 1cb26 <SysBase>,d0
   141d6:	|      movea.l d0,a6
   141d8:	|      movea.l 4(sp),a1
   141dc:	|      jsr -690(a6)
	}
}
   141e0:	|      nop
   141e2:	'----> nop
   141e4:	       movea.l (sp)+,a6
   141e6:	       lea 16(sp),sp
   141ea:	       rts

000141ec <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   141ec:	movea.l 8(sp),a0
   141f0:	move.l 4(a0),-(sp)
   141f4:	move.l (a0),-(sp)
   141f6:	movea.l 12(sp),a0
   141fa:	move.l 4(a0),-(sp)
   141fe:	move.l (a0),-(sp)
   14200:	jsr 14222 <compareVars>
   14206:	lea 16(sp),sp
   1420a:	move.l d0,-(sp)
   1420c:	pea 1 <_start+0x1>
   14210:	move.l 16(sp),-(sp)
   14214:	jsr 150ea <setVariable>
   1421a:	lea 12(sp),sp
}
   1421e:	nop
   14220:	rts

00014222 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   14222:	       subq.l #4,sp
	int re = 0;
   14224:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   14226:	       move.l 8(sp),d1
   1422a:	       move.l 16(sp),d0
   1422e:	       cmp.l d1,d0
   14230:	,----- bne.w 142f8 <compareVars+0xd6>
		switch (var1.varType) {
   14234:	|      move.l 8(sp),d0
   14238:	|      moveq #9,d1
   1423a:	|      cmp.l d0,d1
   1423c:	|  ,-- bcs.w 142e0 <compareVars+0xbe>
   14240:	|  |   add.l d0,d0
   14242:	|  |   movea.l d0,a0
   14244:	|  |   adda.l #82512,a0
   1424a:	|  |   move.w (a0),d0
   1424c:	|  |   jmp (14250 <compareVars+0x2e>,pc,d0.w)
   14250:	|  |   ori.b #-112,(a4)
   14254:	|  |   ori.l #5243024,(a0)
   1425a:	|  |   ori.l #7733392,(a0)
   14260:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   14266:	|  |   move.l d0,(sp)
			break;
   14268:	+--|-- bra.w 142f8 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   1426c:	|  |   move.l 12(sp),d1
   14270:	|  |   move.l 20(sp),d0
   14274:	|  |   cmp.l d1,d0
   14276:	|  |   seq d0
   14278:	|  |   neg.b d0
   1427a:	|  |   move.b d0,d0
   1427c:	|  |   andi.l #255,d0
   14282:	|  |   move.l d0,(sp)
			break;
   14284:	+--|-- bra.s 142f8 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   14286:	|  |   move.l 12(sp),d1
   1428a:	|  |   move.l 20(sp),d0
   1428e:	|  |   cmp.l d1,d0
   14290:	|  |   seq d0
   14292:	|  |   neg.b d0
   14294:	|  |   move.b d0,d0
   14296:	|  |   andi.l #255,d0
   1429c:	|  |   move.l d0,(sp)
			break;
   1429e:	+--|-- bra.s 142f8 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   142a0:	|  |   move.l 20(sp),d1
   142a4:	|  |   move.l 12(sp),d0
   142a8:	|  |   move.l d1,-(sp)
   142aa:	|  |   move.l d0,-(sp)
   142ac:	|  |   jsr 13ca4 <strcmp>
   142b2:	|  |   addq.l #8,sp
   142b4:	|  |   tst.l d0
   142b6:	|  |   seq d0
   142b8:	|  |   neg.b d0
   142ba:	|  |   move.b d0,d0
   142bc:	|  |   andi.l #255,d0
   142c2:	|  |   move.l d0,(sp)
			break;
   142c4:	+--|-- bra.s 142f8 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   142c6:	|  |   move.l 12(sp),d1
   142ca:	|  |   move.l 20(sp),d0
   142ce:	|  |   cmp.l d1,d0
   142d0:	|  |   seq d0
   142d2:	|  |   neg.b d0
   142d4:	|  |   move.b d0,d0
   142d6:	|  |   andi.l #255,d0
   142dc:	|  |   move.l d0,(sp)
			break;
   142de:	+--|-- bra.s 142f8 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   142e0:	|  '-> move.l 12(sp),d1
   142e4:	|      move.l 20(sp),d0
   142e8:	|      cmp.l d1,d0
   142ea:	|      seq d0
   142ec:	|      neg.b d0
   142ee:	|      move.b d0,d0
   142f0:	|      andi.l #255,d0
   142f6:	|      move.l d0,(sp)
		}
	}
	return re;
   142f8:	'----> move.l (sp),d0
}
   142fa:	       addq.l #4,sp
   142fc:	       rts

000142fe <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   142fe:	             lea -16(sp),sp
   14302:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   14304:	             movea.l 28(sp),a0
   14308:	             moveq #6,d0
   1430a:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   1430c:	             moveq #12,d0
   1430e:	             move.l d0,12(sp)
   14312:	             clr.l 8(sp)
   14316:	             move.l 1cb26 <SysBase>,d0
   1431c:	             movea.l d0,a6
   1431e:	             move.l 12(sp),d0
   14322:	             move.l 8(sp),d1
   14326:	             jsr -684(a6)
   1432a:	             move.l d0,4(sp)
   1432e:	             move.l 4(sp),d0
   14332:	             movea.l 28(sp),a0
   14336:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   1433a:	             movea.l 28(sp),a0
   1433e:	             move.l 4(a0),d0
   14342:	         ,-- bne.s 1434a <copyStack+0x4c>
   14344:	         |   clr.w d0
   14346:	,--------|-- bra.w 143cc <copyStack+0xce>
	to->varData.theStack->first = NULL;
   1434a:	|        '-> movea.l 28(sp),a0
   1434e:	|            movea.l 4(a0),a0
   14352:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   14354:	|            movea.l 28(sp),a0
   14358:	|            movea.l 4(a0),a0
   1435c:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   14360:	|            movea.l 28(sp),a0
   14364:	|            movea.l 4(a0),a0
   14368:	|            moveq #1,d0
   1436a:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   1436e:	|            movea.l 24(sp),a0
   14372:	|            movea.l 4(a0),a0
   14376:	|            move.l (a0),16(sp)

	while (a) {
   1437a:	|     ,----- bra.s 143c4 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   1437c:	|  ,--|----> movea.l 28(sp),a0
   14380:	|  |  |      move.l 4(a0),d0
   14384:	|  |  |      move.l d0,d1
   14386:	|  |  |      move.l 16(sp),d0
   1438a:	|  |  |      move.l d1,-(sp)
   1438c:	|  |  |      move.l d0,-(sp)
   1438e:	|  |  |      jsr 14034 <addVarToStack>
   14394:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   14396:	|  |  |      movea.l 28(sp),a0
   1439a:	|  |  |      movea.l 4(a0),a0
   1439e:	|  |  |      move.l 4(a0),d0
   143a2:	|  |  |  ,-- bne.s 143ba <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   143a4:	|  |  |  |   movea.l 28(sp),a0
   143a8:	|  |  |  |   movea.l 4(a0),a1
   143ac:	|  |  |  |   movea.l 28(sp),a0
   143b0:	|  |  |  |   movea.l 4(a0),a0
   143b4:	|  |  |  |   move.l (a1),d0
   143b6:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   143ba:	|  |  |  '-> movea.l 16(sp),a0
   143be:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   143c4:	|  |  '----> tst.l 16(sp)
   143c8:	|  '-------- bne.s 1437c <copyStack+0x7e>
	}

	return TRUE;
   143ca:	|            moveq #1,d0
}
   143cc:	'----------> movea.l (sp)+,a6
   143ce:	             lea 16(sp),sp
   143d2:	             rts

000143d4 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   143d4:	                lea -20(sp),sp
   143d8:	                move.l a6,-(sp)
   143da:	                move.l 36(sp),d0
   143de:	                move.w d0,d0
   143e0:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   143e4:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   143ea:	                clr.l 16(sp)

    while (*huntVar) {
   143ee:	   ,----------- bra.s 1446c <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   143f0:	,--|----------> movea.l 20(sp),a0
   143f4:	|  |            movea.l (a0),a0
   143f6:	|  |            movea.l 28(sp),a1
   143fa:	|  |            move.l 4(a1),-(sp)
   143fe:	|  |            move.l (a1),-(sp)
   14400:	|  |            move.l 4(a0),-(sp)
   14404:	|  |            move.l (a0),-(sp)
   14406:	|  |            jsr 14222 <compareVars>
   1440c:	|  |            lea 16(sp),sp
   14410:	|  |            tst.l d0
   14412:	|  |  ,-------- beq.s 1445e <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   14414:	|  |  |         movea.l 20(sp),a0
   14418:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   1441c:	|  |  |         movea.l 12(sp),a0
   14420:	|  |  |         move.l 8(a0),d0
   14424:	|  |  |         movea.l 20(sp),a0
   14428:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   1442a:	|  |  |         move.l 12(sp),d0
   1442e:	|  |  |         move.l d0,-(sp)
   14430:	|  |  |         jsr 14a46 <unlinkVar>
   14436:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   14438:	|  |  |         move.l 12(sp),8(sp)
   1443e:	|  |  |         move.l 1cb26 <SysBase>,d0
   14444:	|  |  |         movea.l d0,a6
   14446:	|  |  |         movea.l 8(sp),a1
   1444a:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   1444e:	|  |  |         tst.w 6(sp)
   14452:	|  |  |     ,-- bne.s 14458 <deleteVarFromStack+0x84>
   14454:	|  |  |     |   moveq #1,d0
   14456:	|  |  |  ,--|-- bra.s 1447a <deleteVarFromStack+0xa6>
            reply++;
   14458:	|  |  |  |  '-> addq.l #1,16(sp)
   1445c:	|  +--|--|----- bra.s 1446c <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   1445e:	|  |  '--|----> movea.l 20(sp),a0
   14462:	|  |     |      move.l (a0),d0
   14464:	|  |     |      move.l d0,d1
   14466:	|  |     |      addq.l #8,d1
   14468:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   1446c:	|  '-----|----> movea.l 20(sp),a0
   14470:	|        |      move.l (a0),d0
   14472:	'--------|----- bne.w 143f0 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   14476:	         |      move.l 16(sp),d0
}
   1447a:	         '----> movea.l (sp)+,a6
   1447c:	                lea 20(sp),sp
   14480:	                rts

00014482 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   14482:	       movea.l 4(sp),a0
   14486:	       move.l 4(a0),d0
   1448a:	       cmp.l 8(sp),d0
   1448e:	   ,-- bhi.s 14494 <fastArrayGetByIndex+0x12>
   14490:	   |   moveq #0,d0
   14492:	,--|-- bra.s 144a2 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   14494:	|  '-> movea.l 4(sp),a0
   14498:	|      move.l (a0),d1
   1449a:	|      move.l 8(sp),d0
   1449e:	|      lsl.l #3,d0
   144a0:	|      add.l d1,d0
}
   144a2:	'----> rts

000144a4 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   144a4:	                lea -32(sp),sp
   144a8:	                move.l a6,-(sp)
   144aa:	                move.l a2,-(sp)
    struct persona *p = NULL;
   144ac:	                clr.l 36(sp)

    switch (thisVar->varType) {
   144b0:	                movea.l 44(sp),a0
   144b4:	                move.l (a0),d0
   144b6:	                moveq #8,d1
   144b8:	                cmp.l d0,d1
   144ba:	            ,-- beq.s 144c8 <getCostumeFromVar+0x24>
   144bc:	            |   moveq #9,d1
   144be:	            |   cmp.l d0,d1
   144c0:	   ,--------|-- beq.w 14576 <getCostumeFromVar+0xd2>
   144c4:	,--|--------|-- bra.w 14580 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   144c8:	|  |        '-> moveq #8,d0
   144ca:	|  |            move.l d0,28(sp)
   144ce:	|  |            clr.l 24(sp)
   144d2:	|  |            move.l 1cb26 <SysBase>,d0
   144d8:	|  |            movea.l d0,a6
   144da:	|  |            move.l 28(sp),d0
   144de:	|  |            move.l 24(sp),d1
   144e2:	|  |            jsr -684(a6)
   144e6:	|  |            move.l d0,20(sp)
   144ea:	|  |            move.l 20(sp),d0
   144ee:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   144f2:	|  |        ,-- bne.s 144fa <getCostumeFromVar+0x56>
   144f4:	|  |        |   moveq #0,d0
   144f6:	|  |  ,-----|-- bra.w 145aa <getCostumeFromVar+0x106>
            p->numDirections = 1;
   144fa:	|  |  |     '-> movea.l 36(sp),a0
   144fe:	|  |  |         moveq #1,d1
   14500:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   14504:	|  |  |         moveq #12,d0
   14506:	|  |  |         move.l d0,16(sp)
   1450a:	|  |  |         clr.l 12(sp)
   1450e:	|  |  |         move.l 1cb26 <SysBase>,d0
   14514:	|  |  |         movea.l d0,a6
   14516:	|  |  |         move.l 16(sp),d0
   1451a:	|  |  |         move.l 12(sp),d1
   1451e:	|  |  |         jsr -684(a6)
   14522:	|  |  |         move.l d0,8(sp)
   14526:	|  |  |         move.l 8(sp),d0
   1452a:	|  |  |         movea.l 36(sp),a0
   1452e:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14530:	|  |  |         movea.l 36(sp),a0
   14534:	|  |  |         move.l (a0),d0
   14536:	|  |  |     ,-- bne.s 1453c <getCostumeFromVar+0x98>
   14538:	|  |  |     |   moveq #0,d0
   1453a:	|  |  +-----|-- bra.s 145aa <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   1453c:	|  |  |     '-> clr.l 32(sp)
   14540:	|  |  |     ,-- bra.s 1456c <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14542:	|  |  |  ,--|-> movea.l 44(sp),a0
   14546:	|  |  |  |  |   move.l 4(a0),d0
   1454a:	|  |  |  |  |   movea.l 36(sp),a0
   1454e:	|  |  |  |  |   movea.l (a0),a0
   14550:	|  |  |  |  |   move.l 32(sp),d1
   14554:	|  |  |  |  |   add.l d1,d1
   14556:	|  |  |  |  |   add.l d1,d1
   14558:	|  |  |  |  |   lea (0,a0,d1.l),a2
   1455c:	|  |  |  |  |   move.l d0,-(sp)
   1455e:	|  |  |  |  |   jsr 94c2 <copyAnim>
   14564:	|  |  |  |  |   addq.l #4,sp
   14566:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   14568:	|  |  |  |  |   addq.l #1,32(sp)
   1456c:	|  |  |  |  '-> moveq #2,d1
   1456e:	|  |  |  |      cmp.l 32(sp),d1
   14572:	|  |  |  '----- bge.s 14542 <getCostumeFromVar+0x9e>
            }
            break;
   14574:	|  |  |     ,-- bra.s 145a6 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   14576:	|  '--|-----|-> movea.l 44(sp),a0
   1457a:	|     |     |   move.l 4(a0),d0
   1457e:	|     +-----|-- bra.s 145aa <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14580:	'-----|-----|-> movea.l 44(sp),a0
   14584:	      |     |   move.l (a0),d0
   14586:	      |     |   add.l d0,d0
   14588:	      |     |   movea.l d0,a1
   1458a:	      |     |   adda.l d0,a1
   1458c:	      |     |   lea 1c9f6 <typeName>,a0
   14592:	      |     |   move.l (0,a1,a0.l),d0
   14596:	      |     |   move.l d0,-(sp)
   14598:	      |     |   pea 1a051 <talk.c.490538ff+0x642>
   1459e:	      |     |   jsr 172d8 <KPrintF>
   145a4:	      |     |   addq.l #8,sp
    }

    return p;
   145a6:	      |     '-> move.l 36(sp),d0
}
   145aa:	      '-------> movea.l (sp)+,a2
   145ac:	                movea.l (sp)+,a6
   145ae:	                lea 32(sp),sp
   145b2:	                rts

000145b4 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   145b4:	                lea -96(sp),sp
   145b8:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   145bc:	                move.l 116(sp),-(sp)
   145c0:	                pea 1a089 <talk.c.490538ff+0x67a>
   145c6:	                jsr 13d24 <joinStrings>
   145cc:	                addq.l #8,sp
   145ce:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   145d2:	            ,-- bne.s 145da <getSavedGamesStack+0x26>
   145d4:	            |   clr.w d0
   145d6:	,-----------|-- bra.w 147ee <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   145da:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   145de:	|               move.l #106635,98(sp)
   145e6:	|               moveq #-2,d0
   145e8:	|               move.l d0,94(sp)
   145ec:	|               move.l 1cb2e <DOSBase>,d0
   145f2:	|               movea.l d0,a6
   145f4:	|               move.l 98(sp),d1
   145f8:	|               move.l 94(sp),d2
   145fc:	|               jsr -84(a6)
   14600:	|               move.l d0,90(sp)
   14604:	|               move.l 90(sp),d0
   14608:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   1460c:	|           ,-- bne.s 14614 <getSavedGamesStack+0x60>
   1460e:	|           |   clr.w d0
   14610:	+-----------|-- bra.w 147ee <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   14614:	|           '-> move.l #260,82(sp)
   1461c:	|               move.l #65536,78(sp)
   14624:	|               move.l 1cb26 <SysBase>,d0
   1462a:	|               movea.l d0,a6
   1462c:	|               move.l 82(sp),d0
   14630:	|               move.l 78(sp),d1
   14634:	|               jsr -684(a6)
   14638:	|               move.l d0,74(sp)
   1463c:	|               move.l 74(sp),d0
   14640:	|               move.l d0,70(sp)
	if (!fib) {
   14644:	|           ,-- bne.s 14662 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   14646:	|           |   move.l 86(sp),22(sp)
   1464c:	|           |   move.l 1cb2e <DOSBase>,d0
   14652:	|           |   movea.l d0,a6
   14654:	|           |   move.l 22(sp),d1
   14658:	|           |   jsr -90(a6)
		return FALSE;
   1465c:	|           |   clr.w d0
   1465e:	+-----------|-- bra.w 147ee <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   14662:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   14666:	|               move.l 86(sp),66(sp)
   1466c:	|               move.l 70(sp),62(sp)
   14672:	|               move.l 1cb2e <DOSBase>,d0
   14678:	|               movea.l d0,a6
   1467a:	|               move.l 66(sp),d1
   1467e:	|               move.l 62(sp),d2
   14682:	|               jsr -102(a6)
   14686:	|               move.l d0,58(sp)
   1468a:	|               move.l 58(sp),d0
   1468e:	|  ,----------- beq.w 147a2 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   14692:	|  |        ,-- bra.w 1476e <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   14696:	|  |  ,-----|-> move.l 70(sp),d2
   1469a:	|  |  |     |   addq.l #8,d2
   1469c:	|  |  |     |   move.l 70(sp),d0
   146a0:	|  |  |     |   addq.l #8,d0
   146a2:	|  |  |     |   move.l d0,-(sp)
   146a4:	|  |  |     |   jsr 13ce4 <strlen>
   146aa:	|  |  |     |   addq.l #4,sp
   146ac:	|  |  |     |   move.l d0,d3
   146ae:	|  |  |     |   move.l 116(sp),-(sp)
   146b2:	|  |  |     |   jsr 13ce4 <strlen>
   146b8:	|  |  |     |   addq.l #4,sp
   146ba:	|  |  |     |   move.l d3,d1
   146bc:	|  |  |     |   sub.l d0,d1
   146be:	|  |  |     |   move.l d2,d0
   146c0:	|  |  |     |   add.l d1,d0
   146c2:	|  |  |     |   move.l 116(sp),-(sp)
   146c6:	|  |  |     |   move.l d0,-(sp)
   146c8:	|  |  |     |   jsr 13ca4 <strcmp>
   146ce:	|  |  |     |   addq.l #8,sp
   146d0:	|  |  |     |   tst.l d0
   146d2:	|  |  |     +-- bne.w 1476e <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   146d6:	|  |  |     |   move.l 70(sp),d0
   146da:	|  |  |     |   addq.l #8,d0
   146dc:	|  |  |     |   move.l d0,-(sp)
   146de:	|  |  |     |   jsr 13ce4 <strlen>
   146e4:	|  |  |     |   addq.l #4,sp
   146e6:	|  |  |     |   move.l d0,d2
   146e8:	|  |  |     |   move.l 116(sp),-(sp)
   146ec:	|  |  |     |   jsr 13ce4 <strlen>
   146f2:	|  |  |     |   addq.l #4,sp
   146f4:	|  |  |     |   move.l d0,d1
   146f6:	|  |  |     |   move.l d2,d0
   146f8:	|  |  |     |   sub.l d1,d0
   146fa:	|  |  |     |   movea.l 70(sp),a0
   146fe:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   14702:	|  |  |     |   move.l 70(sp),d0
   14706:	|  |  |     |   addq.l #8,d0
   14708:	|  |  |     |   move.l d0,-(sp)
   1470a:	|  |  |     |   jsr 118 <decodeFilename>
   14710:	|  |  |     |   addq.l #4,sp
   14712:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   14716:	|  |  |     |   move.l 42(sp),-(sp)
   1471a:	|  |  |     |   lea 18(sp),a0
   1471e:	|  |  |     |   move.l a0,-(sp)
   14720:	|  |  |     |   jsr 14a1a <makeTextVar>
   14726:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14728:	|  |  |     |   move.l 42(sp),38(sp)
   1472e:	|  |  |     |   move.l 1cb26 <SysBase>,d0
   14734:	|  |  |     |   movea.l d0,a6
   14736:	|  |  |     |   movea.l 38(sp),a1
   1473a:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1473e:	|  |  |     |   move.l 112(sp),d0
   14742:	|  |  |     |   move.l d0,-(sp)
   14744:	|  |  |     |   lea 18(sp),a0
   14748:	|  |  |     |   move.l a0,-(sp)
   1474a:	|  |  |     |   jsr 14034 <addVarToStack>
   14750:	|  |  |     |   addq.l #8,sp
   14752:	|  |  |     |   tst.w d0
   14754:	|  |  |  ,--|-- beq.s 147a6 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   14756:	|  |  |  |  |   movea.l 112(sp),a0
   1475a:	|  |  |  |  |   move.l 4(a0),d0
   1475e:	|  |  |  |  +-- bne.s 1476e <getSavedGamesStack+0x1ba>
   14760:	|  |  |  |  |   movea.l 112(sp),a0
   14764:	|  |  |  |  |   move.l (a0),d0
   14766:	|  |  |  |  |   movea.l 112(sp),a0
   1476a:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   1476e:	|  |  |  |  '-> move.l 86(sp),54(sp)
   14774:	|  |  |  |      move.l 70(sp),50(sp)
   1477a:	|  |  |  |      move.l 1cb2e <DOSBase>,d0
   14780:	|  |  |  |      movea.l d0,a6
   14782:	|  |  |  |      move.l 54(sp),d1
   14786:	|  |  |  |      move.l 50(sp),d2
   1478a:	|  |  |  |      jsr -108(a6)
   1478e:	|  |  |  |      move.l d0,46(sp)
   14792:	|  |  |  |      move.l 46(sp),d0
   14796:	|  |  '--|----- bne.w 14696 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   1479a:	|  |     |      move.w #1,106(sp)
   147a0:	|  |     |  ,-- bra.s 147a8 <getSavedGamesStack+0x1f4>
	}

cleanup:
   147a2:	|  '-----|--|-> nop
   147a4:	|        |  +-- bra.s 147a8 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   147a6:	|        '--|-> nop
	FreeVec(fib);
   147a8:	|           '-> move.l 70(sp),34(sp)
   147ae:	|               move.l 1cb26 <SysBase>,d0
   147b4:	|               movea.l d0,a6
   147b6:	|               movea.l 34(sp),a1
   147ba:	|               jsr -690(a6)
	UnLock(dirLock);
   147be:	|               move.l 86(sp),30(sp)
   147c4:	|               move.l 1cb2e <DOSBase>,d0
   147ca:	|               movea.l d0,a6
   147cc:	|               move.l 30(sp),d1
   147d0:	|               jsr -90(a6)
	FreeVec(pattern);
   147d4:	|               move.l 102(sp),26(sp)
   147da:	|               move.l 1cb26 <SysBase>,d0
   147e0:	|               movea.l d0,a6
   147e2:	|               movea.l 26(sp),a1
   147e6:	|               jsr -690(a6)
	return result;
   147ea:	|               move.w 106(sp),d0
}
   147ee:	'-------------> movem.l (sp)+,d2-d3/a6
   147f2:	                lea 96(sp),sp
   147f6:	                rts

000147f8 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   147f8:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   147fa:	       movea.l 20(sp),a0
   147fe:	       move.l (a0),d0
   14800:	       cmp.l 16(sp),d0
   14804:	,----- beq.s 14868 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   14806:	|      move.l 16(sp),d0
   1480a:	|      add.l d0,d0
   1480c:	|      movea.l d0,a1
   1480e:	|      adda.l d0,a1
   14810:	|      lea 1c9f6 <typeName>,a0
   14816:	|      move.l (0,a1,a0.l),d0
   1481a:	|      move.l d0,-(sp)
   1481c:	|      pea 1a08d <talk.c.490538ff+0x67e>
   14822:	|      jsr 13d24 <joinStrings>
   14828:	|      addq.l #8,sp
   1482a:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   1482e:	|      movea.l 20(sp),a0
   14832:	|      move.l (a0),d0
   14834:	|      add.l d0,d0
   14836:	|      movea.l d0,a1
   14838:	|      adda.l d0,a1
   1483a:	|      lea 1c9f6 <typeName>,a0
   14840:	|      move.l (0,a1,a0.l),d0
   14844:	|      move.l d0,-(sp)
   14846:	|      pea 1a0cf <talk.c.490538ff+0x6c0>
   1484c:	|      jsr 13d24 <joinStrings>
   14852:	|      addq.l #8,sp
   14854:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   14856:	|      move.l (sp),-(sp)
   14858:	|      move.l 8(sp),-(sp)
   1485c:	|      jsr 172d8 <KPrintF>
   14862:	|      addq.l #8,sp

		return FALSE;
   14864:	|      clr.w d0
   14866:	|  ,-- bra.s 14878 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14868:	'--|-> movea.l 20(sp),a0
   1486c:	   |   move.l 4(a0),d0
   14870:	   |   movea.l 12(sp),a0
   14874:	   |   move.l d0,(a0)
	return TRUE;
   14876:	   |   moveq #1,d0
}
   14878:	   '-> addq.l #8,sp
   1487a:	       rts

0001487c <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   1487c:	move.l 8(sp),-(sp)
   14880:	jsr 7620 <getNumberedString>
   14886:	addq.l #4,sp
   14888:	move.l d0,-(sp)
   1488a:	move.l 8(sp),-(sp)
   1488e:	jsr 14a1a <makeTextVar>
   14894:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14896:	movea.l 4(sp),a0
   1489a:	move.l 4(a0),d0
   1489e:	sne d0
   148a0:	neg.b d0
   148a2:	move.b d0,d0
   148a4:	andi.w #255,d0
}
   148a8:	rts

000148aa <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   148aa:	          subq.l #8,sp
    int size = stackSize(stacky);
   148ac:	          move.l 16(sp),-(sp)
   148b0:	          jsr 15158 <stackSize>
   148b6:	          addq.l #4,sp
   148b8:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   148bc:	          move.l 4(sp),-(sp)
   148c0:	          move.l 16(sp),-(sp)
   148c4:	          jsr 14914 <makeFastArraySize>
   148ca:	          addq.l #8,sp
   148cc:	          tst.w d0
   148ce:	      ,-- bne.s 148d4 <makeFastArrayFromStack+0x2a>
   148d0:	      |   clr.w d0
   148d2:	,-----|-- bra.s 14910 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   148d4:	|     '-> movea.l 16(sp),a0
   148d8:	|         move.l (a0),(sp)
    size = 0;
   148da:	|         clr.l 4(sp)
    while (allV) {
   148de:	|     ,-- bra.s 1490a <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   148e0:	|  ,--|-> movea.l 12(sp),a0
   148e4:	|  |  |   movea.l 4(a0),a0
   148e8:	|  |  |   move.l (a0),d1
   148ea:	|  |  |   move.l 4(sp),d0
   148ee:	|  |  |   lsl.l #3,d0
   148f0:	|  |  |   add.l d0,d1
   148f2:	|  |  |   move.l (sp),d0
   148f4:	|  |  |   move.l d1,-(sp)
   148f6:	|  |  |   move.l d0,-(sp)
   148f8:	|  |  |   jsr 14b96 <copyMain>
   148fe:	|  |  |   addq.l #8,sp
        size++;
   14900:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   14904:	|  |  |   movea.l (sp),a0
   14906:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   1490a:	|  |  '-> tst.l (sp)
   1490c:	|  '----- bne.s 148e0 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   1490e:	|         moveq #1,d0
}
   14910:	'-------> addq.l #8,sp
   14912:	          rts

00014914 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   14914:	          lea -28(sp),sp
   14918:	          move.l a6,-(sp)
    if (size < 0) {
   1491a:	          tst.l 40(sp)
   1491e:	      ,-- bge.s 14934 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14920:	      |   pea 1a114 <talk.c.490538ff+0x705>
   14926:	      |   jsr 172d8 <KPrintF>
   1492c:	      |   addq.l #4,sp
		return FALSE;
   1492e:	      |   clr.w d0
   14930:	,-----|-- bra.w 14a12 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14934:	|     '-> move.l 36(sp),-(sp)
   14938:	|         jsr 14a46 <unlinkVar>
   1493e:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14940:	|         movea.l 36(sp),a0
   14944:	|         moveq #10,d0
   14946:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14948:	|         moveq #12,d0
   1494a:	|         move.l d0,24(sp)
   1494e:	|         clr.l 20(sp)
   14952:	|         move.l 1cb26 <SysBase>,d0
   14958:	|         movea.l d0,a6
   1495a:	|         move.l 24(sp),d0
   1495e:	|         move.l 20(sp),d1
   14962:	|         jsr -684(a6)
   14966:	|         move.l d0,16(sp)
   1496a:	|         move.l 16(sp),d0
   1496e:	|         movea.l 36(sp),a0
   14972:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14976:	|         movea.l 36(sp),a0
   1497a:	|         move.l 4(a0),d0
   1497e:	|     ,-- bne.s 14986 <makeFastArraySize+0x72>
   14980:	|     |   clr.w d0
   14982:	+-----|-- bra.w 14a12 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14986:	|     '-> move.l 40(sp),d0
   1498a:	|         lsl.l #3,d0
   1498c:	|         move.l d0,12(sp)
   14990:	|         clr.l 8(sp)
   14994:	|         move.l 1cb26 <SysBase>,d0
   1499a:	|         movea.l d0,a6
   1499c:	|         move.l 12(sp),d0
   149a0:	|         move.l 8(sp),d1
   149a4:	|         jsr -684(a6)
   149a8:	|         move.l d0,4(sp)
   149ac:	|         move.l 4(sp),d0
   149b0:	|         movea.l 36(sp),a0
   149b4:	|         movea.l 4(a0),a0
   149b8:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   149ba:	|         movea.l 36(sp),a0
   149be:	|         movea.l 4(a0),a0
   149c2:	|         move.l (a0),d0
   149c4:	|     ,-- bne.s 149ca <makeFastArraySize+0xb6>
   149c6:	|     |   clr.w d0
   149c8:	+-----|-- bra.s 14a12 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   149ca:	|     '-> clr.l 28(sp)
   149ce:	|     ,-- bra.s 149ea <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   149d0:	|  ,--|-> movea.l 36(sp),a0
   149d4:	|  |  |   movea.l 4(a0),a0
   149d8:	|  |  |   move.l (a0),d1
   149da:	|  |  |   move.l 28(sp),d0
   149de:	|  |  |   lsl.l #3,d0
   149e0:	|  |  |   movea.l d1,a0
   149e2:	|  |  |   adda.l d0,a0
   149e4:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   149e6:	|  |  |   addq.l #1,28(sp)
   149ea:	|  |  '-> move.l 28(sp),d0
   149ee:	|  |      cmp.l 40(sp),d0
   149f2:	|  '----- blt.s 149d0 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   149f4:	|         movea.l 36(sp),a0
   149f8:	|         movea.l 4(a0),a0
   149fc:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14a02:	|         movea.l 36(sp),a0
   14a06:	|         movea.l 4(a0),a0
   14a0a:	|         moveq #1,d0
   14a0c:	|         move.l d0,8(a0)
    return TRUE;
   14a10:	|         moveq #1,d0
}
   14a12:	'-------> movea.l (sp)+,a6
   14a14:	          lea 28(sp),sp
   14a18:	          rts

00014a1a <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14a1a:	move.l 4(sp),-(sp)
   14a1e:	jsr 14a46 <unlinkVar>
   14a24:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14a26:	movea.l 4(sp),a0
   14a2a:	moveq #3,d0
   14a2c:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14a2e:	move.l 8(sp),-(sp)
   14a32:	jsr b8 <copyString>
   14a38:	addq.l #4,sp
   14a3a:	movea.l 4(sp),a0
   14a3e:	move.l d0,4(a0)
}
   14a42:	nop
   14a44:	rts

00014a46 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14a46:	                      lea -16(sp),sp
   14a4a:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14a4c:	                      movea.l 24(sp),a0
   14a50:	                      move.l (a0),d0
   14a52:	                      moveq #10,d1
   14a54:	                      cmp.l d0,d1
   14a56:	            ,-------- beq.w 14b0e <unlinkVar+0xc8>
   14a5a:	            |         moveq #10,d1
   14a5c:	            |         cmp.l d0,d1
   14a5e:	,-----------|-------- bcs.w 14b82 <unlinkVar+0x13c>
   14a62:	|           |         moveq #8,d1
   14a64:	|           |         cmp.l d0,d1
   14a66:	|  ,--------|-------- beq.w 14b6e <unlinkVar+0x128>
   14a6a:	|  |        |         moveq #8,d1
   14a6c:	|  |        |         cmp.l d0,d1
   14a6e:	+--|--------|-------- bcs.w 14b82 <unlinkVar+0x13c>
   14a72:	|  |        |         moveq #3,d1
   14a74:	|  |        |         cmp.l d0,d1
   14a76:	|  |        |     ,-- beq.s 14a82 <unlinkVar+0x3c>
   14a78:	|  |        |     |   moveq #6,d1
   14a7a:	|  |        |     |   cmp.l d0,d1
   14a7c:	|  |        |  ,--|-- beq.s 14aa8 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14a7e:	+--|--------|--|--|-- bra.w 14b82 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14a82:	|  |        |  |  '-> movea.l 24(sp),a0
   14a86:	|  |        |  |      move.l 4(a0),4(sp)
   14a8c:	|  |        |  |      move.l 1cb26 <SysBase>,d0
   14a92:	|  |        |  |      movea.l d0,a6
   14a94:	|  |        |  |      movea.l 4(sp),a1
   14a98:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14a9c:	|  |        |  |      movea.l 24(sp),a0
   14aa0:	|  |        |  |      clr.l 4(a0)
		break;
   14aa4:	|  |  ,-----|--|----- bra.w 14b8c <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14aa8:	|  |  |     |  '----> movea.l 24(sp),a0
   14aac:	|  |  |     |         movea.l 4(a0),a0
   14ab0:	|  |  |     |         move.l 8(a0),d0
   14ab4:	|  |  |     |         subq.l #1,d0
   14ab6:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14aba:	|  |  |     |         movea.l 24(sp),a0
   14abe:	|  |  |     |         movea.l 4(a0),a0
   14ac2:	|  |  |     |         move.l 8(a0),d0
   14ac6:	|  |  |  ,--|-------- bgt.w 14b86 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14aca:	|  |  |  |  |     ,-- bra.s 14ade <unlinkVar+0x98>
   14acc:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   14ad0:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14ad4:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14ad6:	|  |  |  |  |  |  |   jsr 1517c <trimStack>
   14adc:	|  |  |  |  |  |  |   addq.l #4,sp
   14ade:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   14ae2:	|  |  |  |  |  |      movea.l 4(a0),a0
   14ae6:	|  |  |  |  |  |      move.l (a0),d0
   14ae8:	|  |  |  |  |  '----- bne.s 14acc <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14aea:	|  |  |  |  |         movea.l 24(sp),a0
   14aee:	|  |  |  |  |         move.l 4(a0),8(sp)
   14af4:	|  |  |  |  |         move.l 1cb26 <SysBase>,d0
   14afa:	|  |  |  |  |         movea.l d0,a6
   14afc:	|  |  |  |  |         movea.l 8(sp),a1
   14b00:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14b04:	|  |  |  |  |         movea.l 24(sp),a0
   14b08:	|  |  |  |  |         clr.l 4(a0)
		break;
   14b0c:	|  |  |  +--|-------- bra.s 14b86 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14b0e:	|  |  |  |  '-------> movea.l 24(sp),a0
   14b12:	|  |  |  |            movea.l 4(a0),a0
   14b16:	|  |  |  |            move.l 8(a0),d0
   14b1a:	|  |  |  |            subq.l #1,d0
   14b1c:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14b20:	|  |  |  |            movea.l 24(sp),a0
   14b24:	|  |  |  |            movea.l 4(a0),a0
   14b28:	|  |  |  |            move.l 8(a0),d0
   14b2c:	|  |  |  |        ,-- bgt.s 14b8a <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14b2e:	|  |  |  |        |   movea.l 24(sp),a0
   14b32:	|  |  |  |        |   movea.l 4(a0),a0
   14b36:	|  |  |  |        |   move.l (a0),16(sp)
   14b3a:	|  |  |  |        |   move.l 1cb26 <SysBase>,d0
   14b40:	|  |  |  |        |   movea.l d0,a6
   14b42:	|  |  |  |        |   movea.l 16(sp),a1
   14b46:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14b4a:	|  |  |  |        |   movea.l 24(sp),a0
   14b4e:	|  |  |  |        |   move.l 4(a0),12(sp)
   14b54:	|  |  |  |        |   move.l 1cb26 <SysBase>,d0
   14b5a:	|  |  |  |        |   movea.l d0,a6
   14b5c:	|  |  |  |        |   movea.l 12(sp),a1
   14b60:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14b64:	|  |  |  |        |   movea.l 24(sp),a0
   14b68:	|  |  |  |        |   clr.l 4(a0)
		break;
   14b6c:	|  |  |  |        +-- bra.s 14b8a <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14b6e:	|  '--|--|--------|-> movea.l 24(sp),a0
   14b72:	|     |  |        |   move.l 4(a0),d0
   14b76:	|     |  |        |   move.l d0,-(sp)
   14b78:	|     |  |        |   jsr 988e <deleteAnim>
   14b7e:	|     |  |        |   addq.l #4,sp
		break;
   14b80:	|     +--|--------|-- bra.s 14b8c <unlinkVar+0x146>
		break;
   14b82:	'-----|--|--------|-> nop
   14b84:	      +--|--------|-- bra.s 14b8c <unlinkVar+0x146>
		break;
   14b86:	      |  '--------|-> nop
   14b88:	      +-----------|-- bra.s 14b8c <unlinkVar+0x146>
		break;
   14b8a:	      |           '-> nop
	}
}
   14b8c:	      '-------------> nop
   14b8e:	                      movea.l (sp)+,a6
   14b90:	                      lea 16(sp),sp
   14b94:	                      rts

00014b96 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14b96:	       movea.l 4(sp),a0
   14b9a:	       move.l (a0),d0
   14b9c:	       movea.l 8(sp),a0
   14ba0:	       move.l d0,(a0)
	switch (to->varType) {
   14ba2:	       movea.l 8(sp),a0
   14ba6:	       move.l (a0),d0
   14ba8:	       moveq #10,d1
   14baa:	       cmp.l d0,d1
   14bac:	,----- bcs.w 14c9e <copyMain+0x108>
   14bb0:	|      add.l d0,d0
   14bb2:	|      movea.l d0,a0
   14bb4:	|      adda.l #84928,a0
   14bba:	|      move.w (a0),d0
   14bbc:	|      jmp (14bc0 <copyMain+0x2a>,pc,d0.w)
   14bc0:	|      .short 0x00da
   14bc2:	|      ori.b #22,(a6)
   14bc6:	|      ori.w #22,(a4)
   14bca:	|      ori.b #-126,(a6)
   14bce:	|      ori.b #-68,(a6)
   14bd2:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14bda:	|      move.l 4(a0),d0
   14bde:	|      movea.l 8(sp),a0
   14be2:	|      move.l d0,4(a0)
		return TRUE;
   14be6:	|      moveq #1,d0
   14be8:	|  ,-- bra.w 14cb0 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14bec:	|  |   movea.l 4(sp),a0
   14bf0:	|  |   move.l 4(a0),d0
   14bf4:	|  |   movea.l 8(sp),a0
   14bf8:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14bfc:	|  |   movea.l 8(sp),a0
   14c00:	|  |   movea.l 4(a0),a0
   14c04:	|  |   move.l 8(a0),d0
   14c08:	|  |   addq.l #1,d0
   14c0a:	|  |   move.l d0,8(a0)
		return TRUE;
   14c0e:	|  |   moveq #1,d0
   14c10:	|  +-- bra.w 14cb0 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14c14:	|  |   movea.l 4(sp),a0
   14c18:	|  |   move.l 4(a0),d0
   14c1c:	|  |   move.l d0,-(sp)
   14c1e:	|  |   jsr b8 <copyString>
   14c24:	|  |   addq.l #4,sp
   14c26:	|  |   movea.l 8(sp),a0
   14c2a:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14c2e:	|  |   movea.l 8(sp),a0
   14c32:	|  |   move.l 4(a0),d0
   14c36:	|  |   sne d0
   14c38:	|  |   neg.b d0
   14c3a:	|  |   move.b d0,d0
   14c3c:	|  |   andi.w #255,d0
   14c40:	|  +-- bra.s 14cb0 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14c42:	|  |   movea.l 4(sp),a0
   14c46:	|  |   move.l 4(a0),d0
   14c4a:	|  |   movea.l 8(sp),a0
   14c4e:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14c52:	|  |   movea.l 8(sp),a0
   14c56:	|  |   movea.l 4(a0),a0
   14c5a:	|  |   move.l 8(a0),d0
   14c5e:	|  |   addq.l #1,d0
   14c60:	|  |   move.l d0,8(a0)
		return TRUE;
   14c64:	|  |   moveq #1,d0
   14c66:	|  +-- bra.s 14cb0 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14c68:	|  |   movea.l 4(sp),a0
   14c6c:	|  |   move.l 4(a0),d0
   14c70:	|  |   movea.l 8(sp),a0
   14c74:	|  |   move.l d0,4(a0)
		return TRUE;
   14c78:	|  |   moveq #1,d0
   14c7a:	|  +-- bra.s 14cb0 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14c7c:	|  |   movea.l 4(sp),a0
   14c80:	|  |   move.l 4(a0),d0
   14c84:	|  |   move.l d0,-(sp)
   14c86:	|  |   jsr 94c2 <copyAnim>
   14c8c:	|  |   addq.l #4,sp
   14c8e:	|  |   movea.l 8(sp),a0
   14c92:	|  |   move.l d0,4(a0)
		return TRUE;
   14c96:	|  |   moveq #1,d0
   14c98:	|  +-- bra.s 14cb0 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14c9a:	|  |   moveq #1,d0
   14c9c:	|  +-- bra.s 14cb0 <copyMain+0x11a>

		default:
		break;
   14c9e:	'--|-> nop
	}
	KPrintF("Unknown value type");
   14ca0:	   |   pea 1a165 <talk.c.490538ff+0x756>
   14ca6:	   |   jsr 172d8 <KPrintF>
   14cac:	   |   addq.l #4,sp
	return FALSE;
   14cae:	   |   clr.w d0
}
   14cb0:	   '-> rts

00014cb2 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14cb2:	move.l 8(sp),-(sp)
   14cb6:	jsr 14a46 <unlinkVar>
   14cbc:	addq.l #4,sp
	return copyMain(from, to);
   14cbe:	move.l 8(sp),-(sp)
   14cc2:	move.l 8(sp),-(sp)
   14cc6:	jsr 14b96 <copyMain>
   14ccc:	addq.l #8,sp
}
   14cce:	rts

00014cd0 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14cd0:	       movea.l 4(sp),a0
   14cd4:	       move.l (a0),d0
   14cd6:	       moveq #8,d1
   14cd8:	       cmp.l d0,d1
   14cda:	   ,-- bne.s 14cf0 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14cdc:	   |   movea.l 4(sp),a0
   14ce0:	   |   move.l 4(a0),d0
   14ce4:	   |   move.l d0,-(sp)
   14ce6:	   |   jsr 94c2 <copyAnim>
   14cec:	   |   addq.l #4,sp
   14cee:	,--|-- bra.s 14d36 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14cf0:	|  '-> movea.l 4(sp),a0
   14cf4:	|      move.l (a0),d0
   14cf6:	|      moveq #1,d1
   14cf8:	|      cmp.l d0,d1
   14cfa:	|  ,-- bne.s 14d0e <getAnimationFromVar+0x3e>
   14cfc:	|  |   movea.l 4(sp),a0
   14d00:	|  |   move.l 4(a0),d0
   14d04:	|  +-- bne.s 14d0e <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14d06:	|  |   jsr acf4 <makeNullAnim>
   14d0c:	+--|-- bra.s 14d36 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14d0e:	|  '-> movea.l 4(sp),a0
   14d12:	|      move.l (a0),d0
   14d14:	|      add.l d0,d0
   14d16:	|      movea.l d0,a1
   14d18:	|      adda.l d0,a1
   14d1a:	|      lea 1c9f6 <typeName>,a0
   14d20:	|      move.l (0,a1,a0.l),d0
   14d24:	|      move.l d0,-(sp)
   14d26:	|      pea 1a051 <talk.c.490538ff+0x642>
   14d2c:	|      jsr 172d8 <KPrintF>
   14d32:	|      addq.l #8,sp
	return NULL;
   14d34:	|      moveq #0,d0
}
   14d36:	'----> rts

00014d38 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14d38:	       movea.l 4(sp),a0
   14d3c:	       move.l (a0),d0
   14d3e:	       moveq #10,d1
   14d40:	       cmp.l d0,d1
   14d42:	,----- bcs.w 14dc8 <getBoolean+0x90>
   14d46:	|      add.l d0,d0
   14d48:	|      movea.l d0,a0
   14d4a:	|      adda.l #85334,a0
   14d50:	|      move.w (a0),d0
   14d52:	|      jmp (14d56 <getBoolean+0x1e>,pc,d0.w)
   14d56:	|      ori.b #26,(a6)
   14d5a:	|      ori.w #68,(114,a2,d0.w)
   14d60:	|      ori.w #46,(114,a2,d0.w)
   14d66:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14d6c:	|      clr.w d0
   14d6e:	|  ,-- bra.s 14dcc <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14d70:	|  |   movea.l 4(sp),a0
   14d74:	|  |   move.l 4(a0),d0
   14d78:	|  |   sne d0
   14d7a:	|  |   neg.b d0
   14d7c:	|  |   move.b d0,d0
   14d7e:	|  |   andi.w #255,d0
   14d82:	|  +-- bra.s 14dcc <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14d84:	|  |   movea.l 4(sp),a0
   14d88:	|  |   movea.l 4(a0),a0
   14d8c:	|  |   move.l (a0),d0
   14d8e:	|  |   sne d0
   14d90:	|  |   neg.b d0
   14d92:	|  |   move.b d0,d0
   14d94:	|  |   andi.w #255,d0
   14d98:	|  +-- bra.s 14dcc <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14d9a:	|  |   movea.l 4(sp),a0
   14d9e:	|  |   movea.l 4(a0),a0
   14da2:	|  |   move.b (a0),d0
   14da4:	|  |   sne d0
   14da6:	|  |   neg.b d0
   14da8:	|  |   move.b d0,d0
   14daa:	|  |   andi.w #255,d0
   14dae:	|  +-- bra.s 14dcc <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14db0:	|  |   movea.l 4(sp),a0
   14db4:	|  |   movea.l 4(a0),a0
   14db8:	|  |   move.l 4(a0),d0
   14dbc:	|  |   sne d0
   14dbe:	|  |   neg.b d0
   14dc0:	|  |   move.b d0,d0
   14dc2:	|  |   andi.w #255,d0
   14dc6:	|  +-- bra.s 14dcc <getBoolean+0x94>

		default:
		break;
   14dc8:	'--|-> nop
	}
	return TRUE;
   14dca:	   |   moveq #1,d0
}
   14dcc:	   '-> rts

00014dce <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14dce:	      ,----------> lea -76(sp),sp
   14dd2:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14dd4:	      |            movea.l 84(sp),a0
   14dd8:	      |            move.l (a0),d0
   14dda:	      |            moveq #10,d1
   14ddc:	      |            cmp.l d0,d1
   14dde:	,-----|----------- bcs.w 1507c <getTextFromAnyVar+0x2ae>
   14de2:	|     |            add.l d0,d0
   14de4:	|     |            movea.l d0,a0
   14de6:	|     |            adda.l #85490,a0
   14dec:	|     |            move.w (a0),d0
   14dee:	|     |            jmp (14df2 <getTextFromAnyVar+0x24>,pc,d0.w)
   14df2:	|     |            .short 0x028a
   14df4:	|     |            bset d0,(a0)+
   14df6:	|     |            .short 0x028a
   14df8:	|     |            ori.b #-118,(a6)
   14dfc:	|     |            andi.b #8,ccr
   14e00:	|     |            andi.w #650,-(a0)
   14e04:	|     |            .short 0x028a
   14e06:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14e0c:	|     |            move.l 4(a0),d0
   14e10:	|     |            move.l d0,-(sp)
   14e12:	|     |            jsr b8 <copyString>
   14e18:	|     |            addq.l #4,sp
   14e1a:	|  ,--|----------- bra.w 1509e <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14e1e:	|  |  |            pea 1a178 <talk.c.490538ff+0x769>
   14e24:	|  |  |            jsr b8 <copyString>
   14e2a:	|  |  |            addq.l #4,sp
   14e2c:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14e30:	|  |  |            clr.l 72(sp)
   14e34:	|  |  |     ,----- bra.w 14ede <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14e38:	|  |  |  ,--|----> pea 1a17e <talk.c.490538ff+0x76f>
   14e3e:	|  |  |  |  |      move.l 80(sp),-(sp)
   14e42:	|  |  |  |  |      jsr 13d24 <joinStrings>
   14e48:	|  |  |  |  |      addq.l #8,sp
   14e4a:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14e4e:	|  |  |  |  |  ,-- bne.s 14e56 <getTextFromAnyVar+0x88>
   14e50:	|  |  |  |  |  |   moveq #0,d0
   14e52:	|  +--|--|--|--|-- bra.w 1509e <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14e56:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   14e5c:	|  |  |  |  |      move.l 1cb26 <SysBase>,d0
   14e62:	|  |  |  |  |      movea.l d0,a6
   14e64:	|  |  |  |  |      movea.l 56(sp),a1
   14e68:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14e6c:	|  |  |  |  |      movea.l 84(sp),a0
   14e70:	|  |  |  |  |      movea.l 4(a0),a0
   14e74:	|  |  |  |  |      move.l (a0),d1
   14e76:	|  |  |  |  |      move.l 72(sp),d0
   14e7a:	|  |  |  |  |      lsl.l #3,d0
   14e7c:	|  |  |  |  |      add.l d1,d0
   14e7e:	|  |  |  |  |      move.l d0,-(sp)
   14e80:	|  |  +--|--|----- jsr 14dce <getTextFromAnyVar>(pc)
   14e84:	|  |  |  |  |      addq.l #4,sp
   14e86:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14e8a:	|  |  |  |  |      move.l 52(sp),-(sp)
   14e8e:	|  |  |  |  |      move.l 64(sp),-(sp)
   14e92:	|  |  |  |  |      jsr 13d24 <joinStrings>
   14e98:	|  |  |  |  |      addq.l #8,sp
   14e9a:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14e9e:	|  |  |  |  |  ,-- bne.s 14ea6 <getTextFromAnyVar+0xd8>
   14ea0:	|  |  |  |  |  |   moveq #0,d0
   14ea2:	|  +--|--|--|--|-- bra.w 1509e <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14ea6:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   14eac:	|  |  |  |  |      move.l 1cb26 <SysBase>,d0
   14eb2:	|  |  |  |  |      movea.l d0,a6
   14eb4:	|  |  |  |  |      movea.l 48(sp),a1
   14eb8:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14ebc:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14ec0:	|  |  |  |  |      move.l 60(sp),44(sp)
   14ec6:	|  |  |  |  |      move.l 1cb26 <SysBase>,d0
   14ecc:	|  |  |  |  |      movea.l d0,a6
   14ece:	|  |  |  |  |      movea.l 44(sp),a1
   14ed2:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14ed6:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14eda:	|  |  |  |  |      addq.l #1,72(sp)
   14ede:	|  |  |  |  '----> movea.l 84(sp),a0
   14ee2:	|  |  |  |         movea.l 4(a0),a0
   14ee6:	|  |  |  |         move.l 4(a0),d0
   14eea:	|  |  |  |         cmp.l 72(sp),d0
   14eee:	|  |  |  '-------- bgt.w 14e38 <getTextFromAnyVar+0x6a>
			}
			return builder;
   14ef2:	|  |  |            move.l 76(sp),d0
   14ef6:	|  +--|----------- bra.w 1509e <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14efa:	|  |  |            pea 1a180 <talk.c.490538ff+0x771>
   14f00:	|  |  |            jsr b8 <copyString>
   14f06:	|  |  |            addq.l #4,sp
   14f08:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14f0c:	|  |  |            movea.l 84(sp),a0
   14f10:	|  |  |            movea.l 4(a0),a0
   14f14:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14f18:	|  |  |     ,----- bra.w 14fba <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14f1c:	|  |  |  ,--|----> pea 1a17e <talk.c.490538ff+0x76f>
   14f22:	|  |  |  |  |      move.l 72(sp),-(sp)
   14f26:	|  |  |  |  |      jsr 13d24 <joinStrings>
   14f2c:	|  |  |  |  |      addq.l #8,sp
   14f2e:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14f32:	|  |  |  |  |  ,-- bne.s 14f3a <getTextFromAnyVar+0x16c>
   14f34:	|  |  |  |  |  |   moveq #0,d0
   14f36:	|  +--|--|--|--|-- bra.w 1509e <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14f3a:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   14f40:	|  |  |  |  |      move.l 1cb26 <SysBase>,d0
   14f46:	|  |  |  |  |      movea.l d0,a6
   14f48:	|  |  |  |  |      movea.l 32(sp),a1
   14f4c:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14f50:	|  |  |  |  |      move.l 64(sp),d0
   14f54:	|  |  |  |  |      move.l d0,-(sp)
   14f56:	|  |  '--|--|----- jsr 14dce <getTextFromAnyVar>(pc)
   14f5a:	|  |     |  |      addq.l #4,sp
   14f5c:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14f60:	|  |     |  |      move.l 28(sp),-(sp)
   14f64:	|  |     |  |      move.l 40(sp),-(sp)
   14f68:	|  |     |  |      jsr 13d24 <joinStrings>
   14f6e:	|  |     |  |      addq.l #8,sp
   14f70:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14f74:	|  |     |  |  ,-- bne.s 14f7c <getTextFromAnyVar+0x1ae>
   14f76:	|  |     |  |  |   moveq #0,d0
   14f78:	|  +-----|--|--|-- bra.w 1509e <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14f7c:	|  |     |  |  '-> move.l 28(sp),24(sp)
   14f82:	|  |     |  |      move.l 1cb26 <SysBase>,d0
   14f88:	|  |     |  |      movea.l d0,a6
   14f8a:	|  |     |  |      movea.l 24(sp),a1
   14f8e:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14f92:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14f96:	|  |     |  |      move.l 36(sp),20(sp)
   14f9c:	|  |     |  |      move.l 1cb26 <SysBase>,d0
   14fa2:	|  |     |  |      movea.l d0,a6
   14fa4:	|  |     |  |      movea.l 20(sp),a1
   14fa8:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14fac:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14fb0:	|  |     |  |      movea.l 64(sp),a0
   14fb4:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14fba:	|  |     |  '----> tst.l 64(sp)
   14fbe:	|  |     '-------- bne.w 14f1c <getTextFromAnyVar+0x14e>
			}
			return builder;
   14fc2:	|  |               move.l 68(sp),d0
   14fc6:	|  +-------------- bra.w 1509e <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14fca:	|  |               moveq #10,d0
   14fcc:	|  |               move.l d0,16(sp)
   14fd0:	|  |               clr.l 12(sp)
   14fd4:	|  |               move.l 1cb26 <SysBase>,d0
   14fda:	|  |               movea.l d0,a6
   14fdc:	|  |               move.l 16(sp),d0
   14fe0:	|  |               move.l 12(sp),d1
   14fe4:	|  |               jsr -684(a6)
   14fe8:	|  |               move.l d0,8(sp)
   14fec:	|  |               move.l 8(sp),d0
   14ff0:	|  |               move.l d0,4(sp)
			if (! buff) {
   14ff4:	|  |           ,-- bne.s 1500a <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14ff6:	|  |           |   pea 1a187 <talk.c.490538ff+0x778>
   14ffc:	|  |           |   jsr 172d8 <KPrintF>
   15002:	|  |           |   addq.l #4,sp
				return NULL;
   15004:	|  |           |   moveq #0,d0
   15006:	|  +-----------|-- bra.w 1509e <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   1500a:	|  |           '-> movea.l 84(sp),a0
   1500e:	|  |               move.l 4(a0),d0
   15012:	|  |               move.l d0,-(sp)
   15014:	|  |               pea 1a1b1 <talk.c.490538ff+0x7a2>
   1501a:	|  |               move.l 12(sp),-(sp)
   1501e:	|  |               jsr 14002 <sprintf>
   15024:	|  |               lea 12(sp),sp
			return buff;
   15028:	|  |               move.l 4(sp),d0
   1502c:	|  +-------------- bra.s 1509e <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   1502e:	|  |               movea.l 84(sp),a0
   15032:	|  |               move.l 4(a0),d0
   15036:	|  |               move.l d0,-(sp)
   15038:	|  |               jsr 4990 <resourceNameFromNum>
   1503e:	|  |               addq.l #4,sp
   15040:	|  |               move.l d0,-(sp)
   15042:	|  |               pea 18aee <PutChar+0xd74>
   15048:	|  |               jsr 13d24 <joinStrings>
   1504e:	|  |               addq.l #8,sp
   15050:	|  +-------------- bra.s 1509e <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   15052:	|  |               movea.l 84(sp),a0
   15056:	|  |               move.l 4(a0),d0
   1505a:	|  |               move.l d0,-(sp)
   1505c:	|  |               jsr d51e <findObjectType>
   15062:	|  |               addq.l #4,sp
   15064:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   15068:	+--|-------------- beq.s 1507c <getTextFromAnyVar+0x2ae>
   1506a:	|  |               movea.l 40(sp),a0
   1506e:	|  |               move.l (a0),d0
   15070:	|  |               move.l d0,-(sp)
   15072:	|  |               jsr b8 <copyString>
   15078:	|  |               addq.l #4,sp
   1507a:	|  +-------------- bra.s 1509e <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   1507c:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   1507e:	   |               movea.l 84(sp),a0
   15082:	   |               move.l (a0),d0
   15084:	   |               add.l d0,d0
   15086:	   |               movea.l d0,a1
   15088:	   |               adda.l d0,a1
   1508a:	   |               lea 1c9f6 <typeName>,a0
   15090:	   |               move.l (0,a1,a0.l),d0
   15094:	   |               move.l d0,-(sp)
   15096:	   |               jsr b8 <copyString>
   1509c:	   |               addq.l #4,sp
}
   1509e:	   '-------------> movea.l (sp)+,a6
   150a0:	                   lea 76(sp),sp
   150a4:	                   rts

000150a6 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   150a6:	move.l 4(sp),-(sp)
   150aa:	jsr 14a46 <unlinkVar>
   150b0:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   150b2:	movea.l 4(sp),a0
   150b6:	moveq #8,d0
   150b8:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   150ba:	movea.l 4(sp),a0
   150be:	move.l 8(sp),4(a0)
}
   150c4:	nop
   150c6:	rts

000150c8 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   150c8:	move.l 4(sp),-(sp)
   150cc:	jsr 14a46 <unlinkVar>
   150d2:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   150d4:	movea.l 4(sp),a0
   150d8:	moveq #9,d0
   150da:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   150dc:	movea.l 4(sp),a0
   150e0:	move.l 8(sp),4(a0)
}
   150e6:	nop
   150e8:	rts

000150ea <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   150ea:	move.l 4(sp),-(sp)
   150ee:	jsr 14a46 <unlinkVar>
   150f4:	addq.l #4,sp
   150f6:	movea.l 4(sp),a0
   150fa:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   150fe:	movea.l 4(sp),a0
   15102:	move.l 12(sp),4(a0)
   15108:	nop
   1510a:	rts

0001510c <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   1510c:	      ,-- bra.s 1511e <stackGetByIndex+0x12>
        vS = vS->next;
   1510e:	,-----|-> movea.l 4(sp),a0
   15112:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   15118:	|     +-- bne.s 1511e <stackGetByIndex+0x12>
            return NULL;
   1511a:	|     |   moveq #0,d0
   1511c:	|  ,--|-- bra.s 15132 <stackGetByIndex+0x26>
    while (theIndex--) {
   1511e:	|  |  '-> move.l 8(sp),d0
   15122:	|  |      move.l d0,d1
   15124:	|  |      subq.l #1,d1
   15126:	|  |      move.l d1,8(sp)
   1512a:	|  |      tst.l d0
   1512c:	'--|----- bne.s 1510e <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   1512e:	   |      move.l 4(sp),d0
}
   15132:	   '----> rts

00015134 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   15134:	          tst.l 4(sp)
   15138:	      ,-- bne.s 15148 <stackFindLast+0x14>
		return NULL;
   1513a:	      |   moveq #0,d0
   1513c:	,-----|-- bra.s 15156 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   1513e:	|  ,--|-> movea.l 4(sp),a0
   15142:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   15148:	|  |  '-> movea.l 4(sp),a0
   1514c:	|  |      move.l 8(a0),d0
   15150:	|  '----- bne.s 1513e <stackFindLast+0xa>

	return hunt;
   15152:	|         move.l 4(sp),d0
}
   15156:	'-------> rts

00015158 <stackSize>:

int stackSize (const struct stackHandler * me) {
   15158:	       subq.l #8,sp
	int r = 0;
   1515a:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   1515e:	       movea.l 12(sp),a0
   15162:	       move.l (a0),(sp)
	while (a) {
   15164:	   ,-- bra.s 15170 <stackSize+0x18>
		r ++;
   15166:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   1516a:	|  |   movea.l (sp),a0
   1516c:	|  |   move.l 8(a0),(sp)
	while (a) {
   15170:	|  '-> tst.l (sp)
   15172:	'----- bne.s 15166 <stackSize+0xe>
	}
	return r;
   15174:	       move.l 4(sp),d0
}
   15178:	       addq.l #8,sp
   1517a:	       rts

0001517c <trimStack>:

void trimStack (struct variableStack ** stack) {
   1517c:	subq.l #8,sp
   1517e:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   15180:	movea.l 16(sp),a0
   15184:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   15188:	movea.l 16(sp),a0
   1518c:	movea.l (a0),a0
   1518e:	move.l 8(a0),d0
   15192:	movea.l 16(sp),a0
   15196:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   15198:	move.l 8(sp),d0
   1519c:	move.l d0,-(sp)
   1519e:	jsr 14a46 <unlinkVar>
   151a4:	addq.l #4,sp
	FreeVec(killMe);
   151a6:	move.l 8(sp),4(sp)
   151ac:	move.l 1cb26 <SysBase>,d0
   151b2:	movea.l d0,a6
   151b4:	movea.l 4(sp),a1
   151b8:	jsr -690(a6)
   151bc:	nop
   151be:	movea.l (sp)+,a6
   151c0:	addq.l #8,sp
   151c2:	rts

000151c4 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   151c4:	       lea -52(sp),sp
   151c8:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   151ca:	       pea 1a1b4 <talk.c.490538ff+0x7a5>
   151d0:	       jsr 172d8 <KPrintF>
   151d6:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   151d8:	       moveq #68,d0
   151da:	       move.l d0,52(sp)
   151de:	       clr.l 48(sp)
   151e2:	       move.l 1cb26 <SysBase>,d0
   151e8:	       movea.l d0,a6
   151ea:	       move.l 52(sp),d0
   151ee:	       move.l 48(sp),d1
   151f2:	       jsr -684(a6)
   151f6:	       move.l d0,44(sp)
   151fa:	       move.l 44(sp),d0
   151fe:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   15202:	   ,-- bne.s 1520a <freeze+0x46>
   15204:	   |   clr.w d0
   15206:	,--|-- bra.w 1539c <freeze+0x1d8>

	CstFreeze();
   1520a:	|  '-> jsr 1bfa <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   15210:	|      move.l 1cbbe <sceneWidth>,d0
   15216:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   1521a:	|      move.l 1cbc2 <sceneHeight>,d0
   15220:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   15224:	|      move.l 1cbbe <sceneWidth>,d0
   1522a:	|      movea.l 40(sp),a0
   1522e:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   15232:	|      move.l 1cbc2 <sceneHeight>,d0
   15238:	|      movea.l 40(sp),a0
   1523c:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   15240:	|      move.l 1cbdc <cameraX>,d0
   15246:	|      movea.l 40(sp),a0
   1524a:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   1524e:	|      move.l 1cbe0 <cameraY>,d0
   15254:	|      movea.l 40(sp),a0
   15258:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   1525c:	|      move.l 1c4b8 <cameraZoom>,d0
   15262:	|      movea.l 40(sp),a0
   15266:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   1526a:	|      move.w #1,1cbca <backdropExists>

	newFreezer -> allPeople = allPeople;
   15272:	|      move.l 1cb86 <allPeople>,d0
   15278:	|      movea.l 40(sp),a0
   1527c:	|      move.l d0,(a0)
	allPeople = NULL;
   1527e:	|      clr.l 1cb86 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   15284:	|      moveq #42,d0
   15286:	|      move.l d0,28(sp)
   1528a:	|      clr.l 24(sp)
   1528e:	|      move.l 1cb26 <SysBase>,d0
   15294:	|      movea.l d0,a6
   15296:	|      move.l 28(sp),d0
   1529a:	|      move.l 24(sp),d1
   1529e:	|      jsr -684(a6)
   152a2:	|      move.l d0,20(sp)
   152a6:	|      move.l 20(sp),d0
   152aa:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   152ae:	|  ,-- bne.s 152b6 <freeze+0xf2>
   152b0:	|  |   clr.w d0
   152b2:	+--|-- bra.w 1539c <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   152b6:	|  '-> move.l 1cc32 <allScreenRegions>,d0
   152bc:	|      movea.l 40(sp),a0
   152c0:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   152c4:	|      clr.l 1cc32 <allScreenRegions>
	overRegion = NULL;
   152ca:	|      clr.l 1cc36 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   152d0:	|      move.l 1ca20 <mouseCursorAnim>,d0
   152d6:	|      movea.l 40(sp),a0
   152da:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   152de:	|      move.l 1ca24 <mouseCursorFrameNum>,d0
   152e4:	|      movea.l 40(sp),a0
   152e8:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   152ec:	|      jsr acf4 <makeNullAnim>
   152f2:	|      move.l d0,1ca20 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   152f8:	|      clr.l 1ca24 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   152fe:	|      move.l 1cb82 <zBuffer>,d0
   15304:	|      movea.l 40(sp),a0
   15308:	|      move.l d0,60(a0)
	zBuffer = NULL;
   1530c:	|      clr.l 1cb82 <zBuffer>

	newFreezer -> speech = speech;
   15312:	|      move.l 1ca76 <speech>,d0
   15318:	|      movea.l 40(sp),a0
   1531c:	|      move.l d0,20(a0)
	initSpeech ();
   15320:	|      jsr 3e86 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   15326:	|      move.l 1c496 <currentEvents>,d0
   1532c:	|      movea.l 40(sp),a0
   15330:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   15334:	|      moveq #28,d0
   15336:	|      move.l d0,12(sp)
   1533a:	|      clr.l 8(sp)
   1533e:	|      move.l 1cb26 <SysBase>,d0
   15344:	|      movea.l d0,a6
   15346:	|      move.l 12(sp),d0
   1534a:	|      move.l 8(sp),d1
   1534e:	|      jsr -684(a6)
   15352:	|      move.l d0,4(sp)
   15356:	|      move.l 4(sp),d0
   1535a:	|      move.l d0,1c496 <currentEvents>
	if (!currentEvents) return FALSE;
   15360:	|      move.l 1c496 <currentEvents>,d0
   15366:	|  ,-- bne.s 1536c <freeze+0x1a8>
   15368:	|  |   clr.w d0
   1536a:	+--|-- bra.s 1539c <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   1536c:	|  '-> move.l 1c496 <currentEvents>,d0
   15372:	|      pea 1c <_start+0x1c>
   15376:	|      clr.l -(sp)
   15378:	|      move.l d0,-(sp)
   1537a:	|      jsr 1725c <memset>
   15380:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   15384:	|      move.l 1cc16 <frozenStuff>,d0
   1538a:	|      movea.l 40(sp),a0
   1538e:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   15392:	|      move.l 40(sp),1cc16 <frozenStuff>

	return TRUE;
   1539a:	|      moveq #1,d0
}
   1539c:	'----> movea.l (sp)+,a6
   1539e:	       lea 52(sp),sp
   153a2:	       rts

000153a4 <howFrozen>:

int howFrozen () {
   153a4:	       subq.l #8,sp
	int a = 0;
   153a6:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   153aa:	       move.l 1cc16 <frozenStuff>,(sp)
	while (f) {
   153b0:	   ,-- bra.s 153bc <howFrozen+0x18>
		a ++;
   153b2:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   153b6:	|  |   movea.l (sp),a0
   153b8:	|  |   move.l 64(a0),(sp)
	while (f) {
   153bc:	|  '-> tst.l (sp)
   153be:	'----- bne.s 153b2 <howFrozen+0xe>
	}
	return a;
   153c0:	       move.l 4(sp),d0
}
   153c4:	       addq.l #8,sp
   153c6:	       rts

000153c8 <unfreeze>:

void unfreeze () {
   153c8:	       lea -16(sp),sp
   153cc:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   153ce:	       move.l 1cc16 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   153d6:	       move.l 1cc16 <frozenStuff>,d0
   153dc:	,----- beq.w 15614 <unfreeze+0x24c>

	CstUnfreeze();
   153e0:	|      jsr 3ae8 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   153e6:	|      movea.l 1cc16 <frozenStuff>,a0
   153ec:	|      move.l 48(a0),d0
   153f0:	|      move.l d0,1cbbe <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   153f6:	|      movea.l 1cc16 <frozenStuff>,a0
   153fc:	|      move.l 52(a0),d0
   15400:	|      move.l d0,1cbc2 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   15406:	|      movea.l 1cc16 <frozenStuff>,a0
   1540c:	|      move.l 40(a0),d0
   15410:	|      move.l d0,1cbdc <cameraX>
	cameraY = frozenStuff -> cameraY;
   15416:	|      movea.l 1cc16 <frozenStuff>,a0
   1541c:	|      move.l 44(a0),d0
   15420:	|      move.l d0,1cbe0 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   15426:	|      move.l 1cae2 <input+0xa>,d0
   1542c:	|      move.l d0,-(sp)
   1542e:	|      jsr 1770a <__floatsisf>
   15434:	|      addq.l #4,sp
   15436:	|      move.l d0,d1
   15438:	|      move.l 1c4b8 <cameraZoom>,d0
   1543e:	|      move.l d0,-(sp)
   15440:	|      move.l d1,-(sp)
   15442:	|      jsr 177bc <__mulsf3>
   15448:	|      addq.l #8,sp
   1544a:	|      move.l d0,-(sp)
   1544c:	|      jsr 176a2 <__fixsfsi>
   15452:	|      addq.l #4,sp
   15454:	|      move.l d0,1cae2 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   1545a:	|      move.l 1cae6 <input+0xe>,d0
   15460:	|      move.l d0,-(sp)
   15462:	|      jsr 1770a <__floatsisf>
   15468:	|      addq.l #4,sp
   1546a:	|      move.l d0,d1
   1546c:	|      move.l 1c4b8 <cameraZoom>,d0
   15472:	|      move.l d0,-(sp)
   15474:	|      move.l d1,-(sp)
   15476:	|      jsr 177bc <__mulsf3>
   1547c:	|      addq.l #8,sp
   1547e:	|      move.l d0,-(sp)
   15480:	|      jsr 176a2 <__fixsfsi>
   15486:	|      addq.l #4,sp
   15488:	|      move.l d0,1cae6 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   1548e:	|      movea.l 1cc16 <frozenStuff>,a0
   15494:	|      move.l 56(a0),d0
   15498:	|      move.l d0,1c4b8 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   1549e:	|      move.l 1cae2 <input+0xa>,d0
   154a4:	|      move.l d0,-(sp)
   154a6:	|      jsr 1770a <__floatsisf>
   154ac:	|      addq.l #4,sp
   154ae:	|      move.l d0,d1
   154b0:	|      move.l 1c4b8 <cameraZoom>,d0
   154b6:	|      move.l d0,-(sp)
   154b8:	|      move.l d1,-(sp)
   154ba:	|      jsr 175c0 <__divsf3>
   154c0:	|      addq.l #8,sp
   154c2:	|      move.l d0,-(sp)
   154c4:	|      jsr 176a2 <__fixsfsi>
   154ca:	|      addq.l #4,sp
   154cc:	|      move.l d0,1cae2 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   154d2:	|      move.l 1cae6 <input+0xe>,d0
   154d8:	|      move.l d0,-(sp)
   154da:	|      jsr 1770a <__floatsisf>
   154e0:	|      addq.l #4,sp
   154e2:	|      move.l d0,d1
   154e4:	|      move.l 1c4b8 <cameraZoom>,d0
   154ea:	|      move.l d0,-(sp)
   154ec:	|      move.l d1,-(sp)
   154ee:	|      jsr 175c0 <__divsf3>
   154f4:	|      addq.l #8,sp
   154f6:	|      move.l d0,-(sp)
   154f8:	|      jsr 176a2 <__fixsfsi>
   154fe:	|      addq.l #4,sp
   15500:	|      move.l d0,1cae6 <input+0xe>

	killAllPeople ();
   15506:	|      jsr a9c4 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   1550c:	|      movea.l 1cc16 <frozenStuff>,a0
   15512:	|      move.l (a0),d0
   15514:	|      move.l d0,1cb86 <allPeople>

	killAllRegions ();
   1551a:	|      jsr 15ae8 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15520:	|      movea.l 1cc16 <frozenStuff>,a0
   15526:	|      move.l 4(a0),d0
   1552a:	|      move.l d0,1cc32 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15530:	|      move.l 1ca20 <mouseCursorAnim>,d0
   15536:	|      move.l d0,-(sp)
   15538:	|      jsr 988e <deleteAnim>
   1553e:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15540:	|      movea.l 1cc16 <frozenStuff>,a0
   15546:	|      move.l 32(a0),d0
   1554a:	|      move.l d0,1ca20 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15550:	|      movea.l 1cc16 <frozenStuff>,a0
   15556:	|      move.l 36(a0),d0
   1555a:	|      move.l d0,1ca24 <mouseCursorFrameNum>

	killZBuffer ();
   15560:	|      jsr 8634 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   15566:	|      movea.l 1cc16 <frozenStuff>,a0
   1556c:	|      move.l 60(a0),d0
   15570:	|      move.l d0,1cb82 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   15576:	|      move.l 1c496 <currentEvents>,d0
   1557c:	|  ,-- beq.s 15596 <unfreeze+0x1ce>
   1557e:	|  |   move.l 1c496 <currentEvents>,12(sp)
   15586:	|  |   move.l 1cb26 <SysBase>,d0
   1558c:	|  |   movea.l d0,a6
   1558e:	|  |   movea.l 12(sp),a1
   15592:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   15596:	|  '-> movea.l 1cc16 <frozenStuff>,a0
   1559c:	|      move.l 28(a0),d0
   155a0:	|      move.l d0,1c496 <currentEvents>

	killAllSpeech ();
   155a6:	|      jsr 3f1e <killAllSpeech>
	if (speech) FreeVec(speech);
   155ac:	|      move.l 1ca76 <speech>,d0
   155b2:	|  ,-- beq.s 155cc <unfreeze+0x204>
   155b4:	|  |   move.l 1ca76 <speech>,8(sp)
   155bc:	|  |   move.l 1cb26 <SysBase>,d0
   155c2:	|  |   movea.l d0,a6
   155c4:	|  |   movea.l 8(sp),a1
   155c8:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   155cc:	|  '-> movea.l 1cc16 <frozenStuff>,a0
   155d2:	|      move.l 20(a0),d0
   155d6:	|      move.l d0,1ca76 <speech>

	frozenStuff = frozenStuff -> next;
   155dc:	|      movea.l 1cc16 <frozenStuff>,a0
   155e2:	|      move.l 64(a0),d0
   155e6:	|      move.l d0,1cc16 <frozenStuff>

	overRegion = NULL;
   155ec:	|      clr.l 1cc36 <overRegion>
	if (killMe) FreeVec(killMe);
   155f2:	|      tst.l 16(sp)
   155f6:	|  ,-- beq.s 1560e <unfreeze+0x246>
   155f8:	|  |   move.l 16(sp),4(sp)
   155fe:	|  |   move.l 1cb26 <SysBase>,d0
   15604:	|  |   movea.l d0,a6
   15606:	|  |   movea.l 4(sp),a1
   1560a:	|  |   jsr -690(a6)
	killMe = NULL;
   1560e:	|  '-> clr.l 16(sp)
   15612:	|  ,-- bra.s 15616 <unfreeze+0x24e>
	if (! frozenStuff) return;
   15614:	'--|-> nop
}
   15616:	   '-> movea.l (sp)+,a6
   15618:	       lea 16(sp),sp
   1561c:	       rts

0001561e <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   1561e:	pea 1a1c6 <talk.c.490538ff+0x7b7>
   15624:	jsr 172d8 <KPrintF>
   1562a:	addq.l #4,sp
	return FALSE;
   1562c:	clr.w d0
}
   1562e:	rts

00015630 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15630:	          lea -32(sp),sp
   15634:	          move.l a6,-(sp)
   15636:	          move.l d2,-(sp)
	unsigned int a = 0;
   15638:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   1563c:	          move.l 1cc22 <fontOrderString>,d0
   15642:	      ,-- beq.s 1565c <loadFont+0x2c>
   15644:	      |   move.l 1cc22 <fontOrderString>,24(sp)
   1564c:	      |   move.l 1cb26 <SysBase>,d0
   15652:	      |   movea.l d0,a6
   15654:	      |   movea.l 24(sp),a1
   15658:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   1565c:	      '-> move.l 48(sp),-(sp)
   15660:	          jsr b8 <copyString>
   15666:	          addq.l #4,sp
   15668:	          move.l d0,1cc22 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   1566e:	          move.l 1cc2e <theFont>,d0
   15674:	      ,-- beq.s 15686 <loadFont+0x56>
   15676:	      |   move.l 1cc2e <theFont>,d0
   1567c:	      |   move.l d0,-(sp)
   1567e:	      |   jsr 8972 <forgetSpriteBank>
   15684:	      |   addq.l #4,sp
	theFont = NULL;
   15686:	      '-> clr.l 1cc2e <theFont>

	loadedFontNum = filenum;
   1568c:	          move.l 44(sp),1cc1e <loadedFontNum>

	fontTableSize = 0;
   15694:	          clr.l 1cc2a <fontTableSize>
	char *tmp = charOrder;
   1569a:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   156a0:	   ,----- bra.s 156dc <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   156a2:	,--|----> movea.l 32(sp),a0
   156a6:	|  |      move.b (a0),d0
   156a8:	|  |      ext.w d0
   156aa:	|  |      movea.w d0,a0
   156ac:	|  |      move.l 1cc2a <fontTableSize>,d0
   156b2:	|  |      move.l d0,d0
   156b4:	|  |      move.b d0,d0
   156b6:	|  |      andi.l #255,d0
   156bc:	|  |      cmp.l a0,d0
   156be:	|  |  ,-- bge.s 156d0 <loadFont+0xa0>
   156c0:	|  |  |   movea.l 32(sp),a0
   156c4:	|  |  |   move.b (a0),d0
   156c6:	|  |  |   ext.w d0
   156c8:	|  |  |   movea.w d0,a0
   156ca:	|  |  |   move.l a0,1cc2a <fontTableSize>
		*tmp++;
   156d0:	|  |  '-> move.l 32(sp),d0
   156d4:	|  |      move.l d0,d1
   156d6:	|  |      addq.l #1,d1
   156d8:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   156dc:	|  '----> movea.l 32(sp),a0
   156e0:	|         move.b (a0),d0
   156e2:	'-------- bne.s 156a2 <loadFont+0x72>
	}
	fontTableSize++;
   156e4:	          move.l 1cc2a <fontTableSize>,d0
   156ea:	          addq.l #1,d0
   156ec:	          move.l d0,1cc2a <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   156f2:	          move.l 1cc26 <fontTable>,d0
   156f8:	      ,-- beq.s 15712 <loadFont+0xe2>
   156fa:	      |   move.l 1cc26 <fontTable>,20(sp)
   15702:	      |   move.l 1cb26 <SysBase>,d0
   15708:	      |   movea.l d0,a6
   1570a:	      |   movea.l 20(sp),a1
   1570e:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15712:	      '-> move.l 1cc2a <fontTableSize>,d0
   15718:	          add.l d0,d0
   1571a:	          add.l d0,d0
   1571c:	          move.l d0,16(sp)
   15720:	          clr.l 12(sp)
   15724:	          move.l 1cb26 <SysBase>,d0
   1572a:	          movea.l d0,a6
   1572c:	          move.l 16(sp),d0
   15730:	          move.l 12(sp),d1
   15734:	          jsr -684(a6)
   15738:	          move.l d0,8(sp)
   1573c:	          move.l 8(sp),d0
   15740:	          move.l d0,1cc26 <fontTable>
	if (!fontTable) return FALSE;
   15746:	          move.l 1cc26 <fontTable>,d0
   1574c:	      ,-- bne.s 15754 <loadFont+0x124>
   1574e:	      |   clr.w d0
   15750:	,-----|-- bra.w 157fa <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   15754:	|     '-> clr.l 36(sp)
   15758:	|     ,-- bra.s 15772 <loadFont+0x142>
		fontTable[a] = 0;
   1575a:	|  ,--|-> move.l 1cc26 <fontTable>,d1
   15760:	|  |  |   move.l 36(sp),d0
   15764:	|  |  |   add.l d0,d0
   15766:	|  |  |   add.l d0,d0
   15768:	|  |  |   movea.l d1,a0
   1576a:	|  |  |   adda.l d0,a0
   1576c:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   1576e:	|  |  |   addq.l #1,36(sp)
   15772:	|  |  '-> move.l 1cc2a <fontTableSize>,d0
   15778:	|  |      cmp.l 36(sp),d0
   1577c:	|  '----- bhi.s 1575a <loadFont+0x12a>
	}
	a = 0;
   1577e:	|         clr.l 36(sp)
	int i = 0;
   15782:	|         clr.l 28(sp)
	tmp = charOrder;
   15786:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   1578c:	|     ,-- bra.s 157bc <loadFont+0x18c>
		fontTable[*tmp++] = i;
   1578e:	|  ,--|-> move.l 1cc26 <fontTable>,d1
   15794:	|  |  |   move.l 32(sp),d0
   15798:	|  |  |   move.l d0,d2
   1579a:	|  |  |   addq.l #1,d2
   1579c:	|  |  |   move.l d2,32(sp)
   157a0:	|  |  |   movea.l d0,a0
   157a2:	|  |  |   move.b (a0),d0
   157a4:	|  |  |   ext.w d0
   157a6:	|  |  |   movea.w d0,a0
   157a8:	|  |  |   move.l a0,d0
   157aa:	|  |  |   add.l a0,d0
   157ac:	|  |  |   add.l d0,d0
   157ae:	|  |  |   movea.l d1,a0
   157b0:	|  |  |   adda.l d0,a0
   157b2:	|  |  |   move.l 28(sp),d0
   157b6:	|  |  |   move.l d0,(a0)
		i++;
   157b8:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   157bc:	|  |  '-> movea.l 32(sp),a0
   157c0:	|  |      move.b (a0),d0
   157c2:	|  '----- bne.s 1578e <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   157c4:	|         move.l 44(sp),-(sp)
   157c8:	|         jsr 15ffa <loadBankForAnim>
   157ce:	|         addq.l #4,sp
   157d0:	|         move.l d0,1cc2e <theFont>
	if (!theFont) {
   157d6:	|         move.l 1cc2e <theFont>,d0
   157dc:	|     ,-- bne.s 157f0 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   157de:	|     |   pea 1a1ed <talk.c.490538ff+0x7de>
   157e4:	|     |   jsr 172d8 <KPrintF>
   157ea:	|     |   addq.l #4,sp
		return FALSE;
   157ec:	|     |   clr.w d0
   157ee:	+-----|-- bra.s 157fa <loadFont+0x1ca>
	}
	fontHeight = h;
   157f0:	|     '-> move.l 52(sp),1cc1a <fontHeight>
	return TRUE;
   157f8:	|         moveq #1,d0
}
   157fa:	'-------> move.l (sp)+,d2
   157fc:	          movea.l (sp)+,a6
   157fe:	          lea 32(sp),sp
   15802:	          rts

00015804 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   15804:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   15808:	                clr.l 4(sp)

    if (!fontTableSize) return;
   1580c:	                move.l 1cc2a <fontTableSize>,d0
   15812:	,-------------- beq.w 158da <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   15816:	|               move.w 1ca1e <fontSpace>,d0
   1581c:	|               asr.w #1,d0
   1581e:	|               ext.l d0
   15820:	|               add.l d0,20(sp)
	char *tmp = theText;
   15824:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   1582a:	|     ,-------- bra.w 158ce <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   1582e:	|  ,--|-------> movea.l 1cc2e <theFont>,a0
   15834:	|  |  |         movea.l 16(a0),a0
   15838:	|  |  |         movea.l 8(sp),a1
   1583c:	|  |  |         move.b (a1),d0
   1583e:	|  |  |         move.b d0,d0
   15840:	|  |  |         andi.l #255,d0
   15846:	|  |  |         move.l 1cc2a <fontTableSize>,d1
   1584c:	|  |  |         cmp.l d0,d1
   1584e:	|  |  |  ,----- bls.s 1587a <pasteStringToBackdrop+0x76>
   15850:	|  |  |  |      move.l 1cc26 <fontTable>,d1
   15856:	|  |  |  |      movea.l 8(sp),a1
   1585a:	|  |  |  |      move.b (a1),d0
   1585c:	|  |  |  |      move.b d0,d0
   1585e:	|  |  |  |      andi.l #255,d0
   15864:	|  |  |  |      add.l d0,d0
   15866:	|  |  |  |      add.l d0,d0
   15868:	|  |  |  |      movea.l d1,a1
   1586a:	|  |  |  |      adda.l d0,a1
   1586c:	|  |  |  |      move.l (a1),d1
   1586e:	|  |  |  |      move.l d1,d0
   15870:	|  |  |  |      lsl.l #3,d0
   15872:	|  |  |  |      sub.l d1,d0
   15874:	|  |  |  |      add.l d0,d0
   15876:	|  |  |  |      add.l d0,d0
   15878:	|  |  |  |  ,-- bra.s 1587c <pasteStringToBackdrop+0x78>
   1587a:	|  |  |  '--|-> moveq #0,d0
   1587c:	|  |  |     '-> adda.l d0,a0
   1587e:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15880:	|  |  |         move.l 24(sp),d1
   15884:	|  |  |         movea.l (sp),a0
   15886:	|  |  |         move.l 12(a0),d0
   1588a:	|  |  |         move.l d0,d0
   1588c:	|  |  |         sub.w d0,d1
   1588e:	|  |  |         move.w d1,d0
   15890:	|  |  |         movea.w d0,a1
   15892:	|  |  |         move.l 20(sp),d1
   15896:	|  |  |         movea.l (sp),a0
   15898:	|  |  |         move.l 8(a0),d0
   1589c:	|  |  |         move.l d0,d0
   1589e:	|  |  |         sub.w d0,d1
   158a0:	|  |  |         move.w d1,d0
   158a2:	|  |  |         movea.w d0,a0
   158a4:	|  |  |         move.l a1,-(sp)
   158a6:	|  |  |         move.l a0,-(sp)
   158a8:	|  |  |         move.l 8(sp),-(sp)
   158ac:	|  |  |         jsr 229c <CstPasteChar>
   158b2:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   158b6:	|  |  |         movea.l (sp),a0
   158b8:	|  |  |         move.l (a0),d1
   158ba:	|  |  |         move.w 1ca1e <fontSpace>,d0
   158c0:	|  |  |         movea.w d0,a0
   158c2:	|  |  |         move.l d1,d0
   158c4:	|  |  |         add.l a0,d0
   158c6:	|  |  |         add.l d0,20(sp)
		tmp++;
   158ca:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   158ce:	|  |  '-------> movea.l 8(sp),a0
   158d2:	|  |            move.b (a0),d0
   158d4:	|  '----------- bne.w 1582e <pasteStringToBackdrop+0x2a>
   158d8:	|           ,-- bra.s 158dc <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   158da:	'-----------|-> nop
    }
}
   158dc:	            '-> lea 12(sp),sp
   158e0:	                rts

000158e2 <stringWidth>:


int stringWidth (char * theText) {
   158e2:	                lea -16(sp),sp
	int a = 0;
   158e6:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   158ea:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   158ee:	                move.l 1cc2a <fontTableSize>,d0
   158f4:	            ,-- bne.s 158fa <stringWidth+0x18>
   158f6:	            |   moveq #0,d0
   158f8:	,-----------|-- bra.s 1596e <stringWidth+0x8c>

	char *tmp = theText;
   158fa:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   15900:	|     ,-------- bra.s 15962 <stringWidth+0x80>
        c = *tmp++;
   15902:	|  ,--|-------> move.l 8(sp),d0
   15906:	|  |  |         move.l d0,d1
   15908:	|  |  |         addq.l #1,d1
   1590a:	|  |  |         move.l d1,8(sp)
   1590e:	|  |  |         movea.l d0,a0
   15910:	|  |  |         move.b (a0),d0
   15912:	|  |  |         ext.w d0
   15914:	|  |  |         movea.w d0,a0
   15916:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   15918:	|  |  |         movea.l 1cc2e <theFont>,a0
   1591e:	|  |  |         movea.l 16(a0),a1
   15922:	|  |  |         move.l 1cc2a <fontTableSize>,d0
   15928:	|  |  |         cmp.l (sp),d0
   1592a:	|  |  |  ,----- bls.s 1594a <stringWidth+0x68>
   1592c:	|  |  |  |      move.l 1cc26 <fontTable>,d1
   15932:	|  |  |  |      move.l (sp),d0
   15934:	|  |  |  |      add.l d0,d0
   15936:	|  |  |  |      add.l d0,d0
   15938:	|  |  |  |      movea.l d1,a0
   1593a:	|  |  |  |      adda.l d0,a0
   1593c:	|  |  |  |      move.l (a0),d1
   1593e:	|  |  |  |      move.l d1,d0
   15940:	|  |  |  |      lsl.l #3,d0
   15942:	|  |  |  |      sub.l d1,d0
   15944:	|  |  |  |      add.l d0,d0
   15946:	|  |  |  |      add.l d0,d0
   15948:	|  |  |  |  ,-- bra.s 1594c <stringWidth+0x6a>
   1594a:	|  |  |  '--|-> moveq #0,d0
   1594c:	|  |  |     '-> lea (0,a1,d0.l),a0
   15950:	|  |  |         move.l (a0),d1
   15952:	|  |  |         move.w 1ca1e <fontSpace>,d0
   15958:	|  |  |         movea.w d0,a0
   1595a:	|  |  |         move.l d1,d0
   1595c:	|  |  |         add.l a0,d0
   1595e:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   15962:	|  |  '-------> movea.l 8(sp),a0
   15966:	|  |            move.b (a0),d0
   15968:	|  '----------- bne.s 15902 <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   1596a:	|               move.l 12(sp),d0
}
   1596e:	'-------------> lea 16(sp),sp
   15972:	                rts

00015974 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15974:	       lea -16(sp),sp
   15978:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   1597a:	       moveq #36,d0
   1597c:	       move.l d0,16(sp)
   15980:	       clr.l 12(sp)
   15984:	       move.l 1cb26 <SysBase>,d0
   1598a:	       movea.l d0,a6
   1598c:	       move.l 16(sp),d0
   15990:	       move.l 12(sp),d1
   15994:	       jsr -684(a6)
   15998:	       move.l d0,8(sp)
   1599c:	       move.l 8(sp),d0
   159a0:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   159a4:	   ,-- bne.s 159ac <addScreenRegion+0x38>
   159a6:	   |   clr.w d0
   159a8:	,--|-- bra.w 15a2c <addScreenRegion+0xb8>
    newRegion->di = di;
   159ac:	|  '-> movea.l 4(sp),a0
   159b0:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   159b6:	|      movea.l 4(sp),a0
   159ba:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   159be:	|      movea.l 4(sp),a0
   159c2:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   159c8:	|      movea.l 4(sp),a0
   159cc:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   159d2:	|      movea.l 4(sp),a0
   159d6:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   159dc:	|      movea.l 4(sp),a0
   159e0:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   159e6:	|      movea.l 4(sp),a0
   159ea:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   159f0:	|      move.l 52(sp),-(sp)
   159f4:	|      jsr d60e <loadObjectType>
   159fa:	|      addq.l #4,sp
   159fc:	|      movea.l 4(sp),a0
   15a00:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15a04:	|      move.l 1cc32 <allScreenRegions>,d0
   15a0a:	|      movea.l 4(sp),a0
   15a0e:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15a12:	|      move.l 4(sp),1cc32 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15a1a:	|      movea.l 4(sp),a0
   15a1e:	|      move.l 28(a0),d0
   15a22:	|      sne d0
   15a24:	|      neg.b d0
   15a26:	|      move.b d0,d0
   15a28:	|      andi.w #255,d0
}
   15a2c:	'----> movea.l (sp)+,a6
   15a2e:	       lea 16(sp),sp
   15a32:	       rts

00015a34 <getOverRegion>:

void getOverRegion () {
   15a34:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15a36:	             move.l 1cc32 <allScreenRegions>,(sp)
	while (thisRegion) {
   15a3c:	   ,-------- bra.s 15aaa <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15a3e:	,--|-------> move.l 1cae2 <input+0xa>,d0
   15a44:	|  |         movea.l (sp),a0
   15a46:	|  |         movea.l (a0),a0
   15a48:	|  |         move.l 1cbdc <cameraX>,d1
   15a4e:	|  |         suba.l d1,a0
   15a50:	|  |         cmpa.l d0,a0
   15a52:	|  |  ,----- bgt.s 15aa4 <getOverRegion+0x70>
   15a54:	|  |  |      move.l 1cae6 <input+0xe>,d0
   15a5a:	|  |  |      movea.l (sp),a0
   15a5c:	|  |  |      movea.l 4(a0),a0
   15a60:	|  |  |      move.l 1cbe0 <cameraY>,d1
   15a66:	|  |  |      suba.l d1,a0
   15a68:	|  |  |      cmpa.l d0,a0
   15a6a:	|  |  +----- bgt.s 15aa4 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15a6c:	|  |  |      move.l 1cae2 <input+0xa>,d0
   15a72:	|  |  |      movea.l (sp),a0
   15a74:	|  |  |      movea.l 8(a0),a0
   15a78:	|  |  |      move.l 1cbdc <cameraX>,d1
   15a7e:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15a80:	|  |  |      cmpa.l d0,a0
   15a82:	|  |  +----- blt.s 15aa4 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15a84:	|  |  |      move.l 1cae6 <input+0xe>,d0
   15a8a:	|  |  |      movea.l (sp),a0
   15a8c:	|  |  |      movea.l 12(a0),a0
   15a90:	|  |  |      move.l 1cbe0 <cameraY>,d1
   15a96:	|  |  |      suba.l d1,a0
   15a98:	|  |  |      cmpa.l d0,a0
   15a9a:	|  |  +----- blt.s 15aa4 <getOverRegion+0x70>
			overRegion = thisRegion;
   15a9c:	|  |  |      move.l (sp),1cc36 <overRegion>
			return;
   15aa2:	|  |  |  ,-- bra.s 15ab6 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15aa4:	|  |  '--|-> movea.l (sp),a0
   15aa6:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15aaa:	|  '-----|-> tst.l (sp)
   15aac:	'--------|-- bne.s 15a3e <getOverRegion+0xa>
	}
	overRegion = NULL;
   15aae:	         |   clr.l 1cc36 <overRegion>
	return;
   15ab4:	         |   nop
}
   15ab6:	         '-> addq.l #4,sp
   15ab8:	             rts

00015aba <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15aba:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15abc:	             move.l 1cc32 <allScreenRegions>,(sp)

	while (thisRegion) {
   15ac2:	   ,-------- bra.s 15ade <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15ac4:	,--|-------> movea.l (sp),a0
   15ac6:	|  |         movea.l 28(a0),a0
   15aca:	|  |         move.l 4(a0),d0
   15ace:	|  |         cmp.l 8(sp),d0
   15ad2:	|  |     ,-- bne.s 15ad8 <getRegionForObject+0x1e>
			return thisRegion;
   15ad4:	|  |     |   move.l (sp),d0
   15ad6:	|  |  ,--|-- bra.s 15ae4 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15ad8:	|  |  |  '-> movea.l (sp),a0
   15ada:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   15ade:	|  '--|----> tst.l (sp)
   15ae0:	'-----|----- bne.s 15ac4 <getRegionForObject+0xa>
	}

	return NULL;
   15ae2:	      |      moveq #0,d0
}
   15ae4:	      '----> addq.l #4,sp
   15ae6:	             rts

00015ae8 <killAllRegions>:

void killAllRegions () {
   15ae8:	       subq.l #8,sp
   15aea:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15aec:	   ,-- bra.s 15b2e <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15aee:	,--|-> move.l 1cc32 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15af6:	|  |   movea.l 1cc32 <allScreenRegions>,a0
   15afc:	|  |   move.l 32(a0),d0
   15b00:	|  |   move.l d0,1cc32 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15b06:	|  |   movea.l 8(sp),a0
   15b0a:	|  |   move.l 28(a0),d0
   15b0e:	|  |   move.l d0,-(sp)
   15b10:	|  |   jsr d8c6 <removeObjectType>
   15b16:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15b18:	|  |   move.l 8(sp),4(sp)
   15b1e:	|  |   move.l 1cb26 <SysBase>,d0
   15b24:	|  |   movea.l d0,a6
   15b26:	|  |   movea.l 4(sp),a1
   15b2a:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15b2e:	|  '-> move.l 1cc32 <allScreenRegions>,d0
   15b34:	'----- bne.s 15aee <killAllRegions+0x6>
	}
	overRegion = NULL;
   15b36:	       clr.l 1cc36 <overRegion>
}
   15b3c:	       nop
   15b3e:	       movea.l (sp)+,a6
   15b40:	       addq.l #8,sp
   15b42:	       rts

00015b44 <loadRegions>:

void loadRegions (BPTR fp) {
   15b44:	       lea -24(sp),sp
   15b48:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15b4a:	       move.l 32(sp),-(sp)
   15b4e:	       jsr 6bc <get2bytes>
   15b54:	       addq.l #4,sp
   15b56:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15b5a:	       move.l #117810,20(sp)

	while (numRegions --) {
   15b62:	   ,-- bra.w 15c40 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15b66:	,--|-> moveq #36,d0
   15b68:	|  |   move.l d0,16(sp)
   15b6c:	|  |   clr.l 12(sp)
   15b70:	|  |   move.l 1cb26 <SysBase>,d0
   15b76:	|  |   movea.l d0,a6
   15b78:	|  |   move.l 16(sp),d0
   15b7c:	|  |   move.l 12(sp),d1
   15b80:	|  |   jsr -684(a6)
   15b84:	|  |   move.l d0,8(sp)
   15b88:	|  |   move.l 8(sp),d0
   15b8c:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15b90:	|  |   movea.l 20(sp),a0
   15b94:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15b98:	|  |   moveq #32,d1
   15b9a:	|  |   add.l 4(sp),d1
   15b9e:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15ba2:	|  |   move.l 32(sp),-(sp)
   15ba6:	|  |   jsr 6bc <get2bytes>
   15bac:	|  |   addq.l #4,sp
   15bae:	|  |   movea.l 4(sp),a0
   15bb2:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15bb4:	|  |   move.l 32(sp),-(sp)
   15bb8:	|  |   jsr 6bc <get2bytes>
   15bbe:	|  |   addq.l #4,sp
   15bc0:	|  |   movea.l 4(sp),a0
   15bc4:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15bc8:	|  |   move.l 32(sp),-(sp)
   15bcc:	|  |   jsr 6bc <get2bytes>
   15bd2:	|  |   addq.l #4,sp
   15bd4:	|  |   movea.l 4(sp),a0
   15bd8:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15bdc:	|  |   move.l 32(sp),-(sp)
   15be0:	|  |   jsr 6bc <get2bytes>
   15be6:	|  |   addq.l #4,sp
   15be8:	|  |   movea.l 4(sp),a0
   15bec:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15bf0:	|  |   move.l 32(sp),-(sp)
   15bf4:	|  |   jsr 6bc <get2bytes>
   15bfa:	|  |   addq.l #4,sp
   15bfc:	|  |   movea.l 4(sp),a0
   15c00:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15c04:	|  |   move.l 32(sp),-(sp)
   15c08:	|  |   jsr 6bc <get2bytes>
   15c0e:	|  |   addq.l #4,sp
   15c10:	|  |   movea.l 4(sp),a0
   15c14:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15c18:	|  |   move.l 32(sp),-(sp)
   15c1c:	|  |   jsr 6bc <get2bytes>
   15c22:	|  |   addq.l #4,sp
   15c24:	|  |   movea.l 4(sp),a0
   15c28:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15c2c:	|  |   move.l 32(sp),-(sp)
   15c30:	|  |   jsr d5bc <loadObjectRef>
   15c36:	|  |   addq.l #4,sp
   15c38:	|  |   movea.l 4(sp),a0
   15c3c:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15c40:	|  '-> move.l 24(sp),d0
   15c44:	|      move.l d0,d1
   15c46:	|      subq.l #1,d1
   15c48:	|      move.l d1,24(sp)
   15c4c:	|      tst.l d0
   15c4e:	'----- bne.w 15b66 <loadRegions+0x22>
	}
	* pointy = NULL;
   15c52:	       movea.l 20(sp),a0
   15c56:	       clr.l (a0)
}
   15c58:	       nop
   15c5a:	       movea.l (sp)+,a6
   15c5c:	       lea 24(sp),sp
   15c60:	       rts

00015c62 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15c62:	             lea -12(sp),sp
   15c66:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15c68:	             move.l #117810,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15c70:	   ,-------- bra.s 15cea <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15c72:	,--|-------> movea.l 12(sp),a0
   15c76:	|  |         movea.l (a0),a0
   15c78:	|  |         movea.l 28(a0),a0
   15c7c:	|  |         move.l 4(a0),d0
   15c80:	|  |         cmp.l 20(sp),d0
   15c84:	|  |  ,----- bne.s 15cdc <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15c86:	|  |  |      movea.l 12(sp),a0
   15c8a:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15c8e:	|  |  |      movea.l 8(sp),a0
   15c92:	|  |  |      move.l 32(a0),d0
   15c96:	|  |  |      movea.l 12(sp),a0
   15c9a:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15c9c:	|  |  |      movea.l 8(sp),a0
   15ca0:	|  |  |      move.l 28(a0),d0
   15ca4:	|  |  |      move.l d0,-(sp)
   15ca6:	|  |  |      jsr d8c6 <removeObjectType>
   15cac:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15cae:	|  |  |      move.l 1cc36 <overRegion>,d0
   15cb4:	|  |  |      cmp.l 8(sp),d0
   15cb8:	|  |  |  ,-- bne.s 15cc0 <removeScreenRegion+0x5e>
   15cba:	|  |  |  |   clr.l 1cc36 <overRegion>
            FreeVec(killMe);
   15cc0:	|  |  |  '-> move.l 8(sp),4(sp)
   15cc6:	|  |  |      move.l 1cb26 <SysBase>,d0
   15ccc:	|  |  |      movea.l d0,a6
   15cce:	|  |  |      movea.l 4(sp),a1
   15cd2:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15cd6:	|  |  |      clr.l 8(sp)
   15cda:	|  +--|----- bra.s 15cea <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15cdc:	|  |  '----> movea.l 12(sp),a0
   15ce0:	|  |         move.l (a0),d0
   15ce2:	|  |         moveq #32,d1
   15ce4:	|  |         add.l d0,d1
   15ce6:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15cea:	|  '-------> movea.l 12(sp),a0
   15cee:	|            move.l (a0),d0
   15cf0:	'----------- bne.s 15c72 <removeScreenRegion+0x10>
        }
    }
}
   15cf2:	             nop
   15cf4:	             nop
   15cf6:	             movea.l (sp)+,a6
   15cf8:	             lea 12(sp),sp
   15cfc:	             rts

00015cfe <saveRegions>:

void saveRegions (BPTR fp) {
   15cfe:	       subq.l #8,sp
	int numRegions = 0;
   15d00:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15d04:	       move.l 1cc32 <allScreenRegions>,(sp)
	while (thisRegion) {
   15d0a:	   ,-- bra.s 15d16 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15d0c:	,--|-> movea.l (sp),a0
   15d0e:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15d12:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15d16:	|  '-> tst.l (sp)
   15d18:	'----- bne.s 15d0c <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15d1a:	       move.l 12(sp),-(sp)
   15d1e:	       move.l 8(sp),-(sp)
   15d22:	       jsr 8d0 <put2bytes>
   15d28:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15d2a:	       move.l 1cc32 <allScreenRegions>,(sp)
	while (thisRegion) {
   15d30:	,----- bra.w 15dd8 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15d34:	|  ,-> movea.l (sp),a0
   15d36:	|  |   move.l (a0),d0
   15d38:	|  |   move.l 12(sp),-(sp)
   15d3c:	|  |   move.l d0,-(sp)
   15d3e:	|  |   jsr 8d0 <put2bytes>
   15d44:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15d46:	|  |   movea.l (sp),a0
   15d48:	|  |   move.l 4(a0),d0
   15d4c:	|  |   move.l 12(sp),-(sp)
   15d50:	|  |   move.l d0,-(sp)
   15d52:	|  |   jsr 8d0 <put2bytes>
   15d58:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15d5a:	|  |   movea.l (sp),a0
   15d5c:	|  |   move.l 8(a0),d0
   15d60:	|  |   move.l 12(sp),-(sp)
   15d64:	|  |   move.l d0,-(sp)
   15d66:	|  |   jsr 8d0 <put2bytes>
   15d6c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15d6e:	|  |   movea.l (sp),a0
   15d70:	|  |   move.l 12(a0),d0
   15d74:	|  |   move.l 12(sp),-(sp)
   15d78:	|  |   move.l d0,-(sp)
   15d7a:	|  |   jsr 8d0 <put2bytes>
   15d80:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15d82:	|  |   movea.l (sp),a0
   15d84:	|  |   move.l 16(a0),d0
   15d88:	|  |   move.l 12(sp),-(sp)
   15d8c:	|  |   move.l d0,-(sp)
   15d8e:	|  |   jsr 8d0 <put2bytes>
   15d94:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15d96:	|  |   movea.l (sp),a0
   15d98:	|  |   move.l 20(a0),d0
   15d9c:	|  |   move.l 12(sp),-(sp)
   15da0:	|  |   move.l d0,-(sp)
   15da2:	|  |   jsr 8d0 <put2bytes>
   15da8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15daa:	|  |   movea.l (sp),a0
   15dac:	|  |   move.l 24(a0),d0
   15db0:	|  |   move.l 12(sp),-(sp)
   15db4:	|  |   move.l d0,-(sp)
   15db6:	|  |   jsr 8d0 <put2bytes>
   15dbc:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15dbe:	|  |   movea.l (sp),a0
   15dc0:	|  |   move.l 28(a0),d0
   15dc4:	|  |   move.l 12(sp),-(sp)
   15dc8:	|  |   move.l d0,-(sp)
   15dca:	|  |   jsr d966 <saveObjectRef>
   15dd0:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15dd2:	|  |   movea.l (sp),a0
   15dd4:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15dd8:	'--|-> tst.l (sp)
   15dda:	   '-- bne.w 15d34 <saveRegions+0x36>
	}
}
   15dde:	       nop
   15de0:	       nop
   15de2:	       addq.l #8,sp
   15de4:	       rts

00015de6 <showBoxes>:

void showBoxes () {
   15de6:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15de8:	       move.l 1cc32 <allScreenRegions>,(sp)

	while (huntRegion) {
   15dee:	,----- bra.w 15e8a <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15df2:	|  ,-> movea.l (sp),a0
   15df4:	|  |   move.l 12(a0),d0
   15df8:	|  |   movea.l d0,a1
   15dfa:	|  |   movea.l (sp),a0
   15dfc:	|  |   move.l 4(a0),d0
   15e00:	|  |   move.l d0,d1
   15e02:	|  |   movea.l (sp),a0
   15e04:	|  |   move.l (a0),d0
   15e06:	|  |   move.l a1,-(sp)
   15e08:	|  |   move.l d1,-(sp)
   15e0a:	|  |   move.l d0,-(sp)
   15e0c:	|  |   jsr d24a <drawVerticalLine>
   15e12:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15e16:	|  |   movea.l (sp),a0
   15e18:	|  |   move.l 12(a0),d0
   15e1c:	|  |   movea.l d0,a1
   15e1e:	|  |   movea.l (sp),a0
   15e20:	|  |   move.l 4(a0),d0
   15e24:	|  |   move.l d0,d1
   15e26:	|  |   movea.l (sp),a0
   15e28:	|  |   move.l 8(a0),d0
   15e2c:	|  |   move.l a1,-(sp)
   15e2e:	|  |   move.l d1,-(sp)
   15e30:	|  |   move.l d0,-(sp)
   15e32:	|  |   jsr d24a <drawVerticalLine>
   15e38:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15e3c:	|  |   movea.l (sp),a0
   15e3e:	|  |   move.l 8(a0),d0
   15e42:	|  |   movea.l d0,a1
   15e44:	|  |   movea.l (sp),a0
   15e46:	|  |   move.l 4(a0),d0
   15e4a:	|  |   move.l d0,d1
   15e4c:	|  |   movea.l (sp),a0
   15e4e:	|  |   move.l (a0),d0
   15e50:	|  |   move.l a1,-(sp)
   15e52:	|  |   move.l d1,-(sp)
   15e54:	|  |   move.l d0,-(sp)
   15e56:	|  |   jsr d224 <drawHorizontalLine>
   15e5c:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15e60:	|  |   movea.l (sp),a0
   15e62:	|  |   move.l 8(a0),d0
   15e66:	|  |   movea.l d0,a1
   15e68:	|  |   movea.l (sp),a0
   15e6a:	|  |   move.l 12(a0),d0
   15e6e:	|  |   move.l d0,d1
   15e70:	|  |   movea.l (sp),a0
   15e72:	|  |   move.l (a0),d0
   15e74:	|  |   move.l a1,-(sp)
   15e76:	|  |   move.l d1,-(sp)
   15e78:	|  |   move.l d0,-(sp)
   15e7a:	|  |   jsr d224 <drawHorizontalLine>
   15e80:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15e84:	|  |   movea.l (sp),a0
   15e86:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15e8a:	'--|-> tst.l (sp)
   15e8c:	   '-- bne.w 15df2 <showBoxes+0xc>
	}
   15e90:	       nop
   15e92:	       nop
   15e94:	       addq.l #4,sp
   15e96:	       rts

00015e98 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15e98:	       lea -88(sp),sp
   15e9c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15e9e:	       move.l 1cb26 <SysBase>,d0
   15ea4:	       movea.l d0,a6
   15ea6:	       jsr -666(a6)
   15eaa:	       move.l d0,88(sp)
   15eae:	       move.l 88(sp),d0
   15eb2:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15eb6:	       move.l 84(sp),80(sp)
   15ebc:	       moveq #40,d0
   15ebe:	       move.l d0,76(sp)
   15ec2:	       move.l 1cb26 <SysBase>,d0
   15ec8:	       movea.l d0,a6
   15eca:	       movea.l 80(sp),a0
   15ece:	       move.l 76(sp),d0
   15ed2:	       jsr -654(a6)
   15ed6:	       move.l d0,72(sp)
   15eda:	       move.l 72(sp),d0
   15ede:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15ee2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15ee8:	       move.l #107015,60(sp)
   15ef0:	       clr.l 56(sp)
   15ef4:	       move.l 64(sp),52(sp)
   15efa:	       clr.l 48(sp)
   15efe:	       move.l 1cb26 <SysBase>,d0
   15f04:	       movea.l d0,a6
   15f06:	       movea.l 60(sp),a0
   15f0a:	       move.l 56(sp),d0
   15f0e:	       movea.l 52(sp),a1
   15f12:	       move.l 48(sp),d1
   15f16:	       jsr -444(a6)
   15f1a:	       move.b d0,47(sp)
   15f1e:	       move.b 47(sp),d0
   15f22:	   ,-- beq.s 15f38 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15f24:	   |   pea 1a214 <talk.c.490538ff+0x805>
   15f2a:	   |   jsr 172d8 <KPrintF>
   15f30:	   |   addq.l #4,sp
        return 0;
   15f32:	   |   moveq #0,d0
   15f34:	,--|-- bra.w 15ff2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15f38:	|  '-> movea.l 64(sp),a0
   15f3c:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15f42:	|      lea 92(sp),a0
   15f46:	|      lea -86(a0),a0
   15f4a:	|      move.l a0,38(sp)
   15f4e:	|      movea.l 42(sp),a6
   15f52:	|      movea.l 38(sp),a0
   15f56:	|      jsr -60(a6)
   15f5a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15f5e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15f64:	|      move.l #1103515245,-(sp)
   15f6a:	|      move.l 34(sp),-(sp)
   15f6e:	|      jsr 17c64 <__mulsi3>
   15f74:	|      addq.l #8,sp
   15f76:	|      addi.l #12345,d0
   15f7c:	|      move.l d0,d1
   15f7e:	|      bclr #31,d1
   15f82:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15f86:	|      move.l 30(sp),d0
   15f8a:	|      pea 64 <_start+0x64>
   15f8e:	|      move.l d0,-(sp)
   15f90:	|      jsr 17d3e <__umodsi3>
   15f96:	|      addq.l #8,sp
   15f98:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15f9c:	|      move.l 26(sp),-(sp)
   15fa0:	|      pea 1a231 <talk.c.490538ff+0x822>
   15fa6:	|      jsr 172d8 <KPrintF>
   15fac:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15fae:	|      move.l 64(sp),22(sp)
   15fb4:	|      move.l 1cb26 <SysBase>,d0
   15fba:	|      movea.l d0,a6
   15fbc:	|      movea.l 22(sp),a1
   15fc0:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15fc4:	|      move.l 64(sp),18(sp)
   15fca:	|      move.l 1cb26 <SysBase>,d0
   15fd0:	|      movea.l d0,a6
   15fd2:	|      movea.l 18(sp),a0
   15fd6:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15fda:	|      move.l 84(sp),14(sp)
   15fe0:	|      move.l 1cb26 <SysBase>,d0
   15fe6:	|      movea.l d0,a6
   15fe8:	|      movea.l 14(sp),a0
   15fec:	|      jsr -672(a6)
    return 0;
   15ff0:	|      moveq #0,d0
   15ff2:	'----> movea.l (sp)+,a6
   15ff4:	       lea 88(sp),sp
   15ff8:	       rts

00015ffa <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15ffa:	             lea -20(sp),sp
   15ffe:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   16000:	             move.l 1cc3a <allLoadedBanks>,20(sp)
	while (returnMe) {
   16008:	      ,----- bra.s 1603a <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   1600a:	   ,--|----> movea.l 20(sp),a0
   1600e:	   |  |      move.l (a0),d0
   16010:	   |  |      cmp.l 28(sp),d0
   16014:	   |  |  ,-- bne.s 16030 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   16016:	   |  |  |   movea.l 20(sp),a0
   1601a:	   |  |  |   move.l 4(a0),d0
   1601e:	   |  |  |   addq.l #1,d0
   16020:	   |  |  |   movea.l 20(sp),a0
   16024:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   16028:	   |  |  |   move.l 20(sp),d0
   1602c:	,--|--|--|-- bra.w 160ce <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   16030:	|  |  |  '-> movea.l 20(sp),a0
   16034:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   1603a:	|  |  '----> tst.l 20(sp)
   1603e:	|  '-------- bne.s 1600a <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   16040:	|            moveq #26,d0
   16042:	|            move.l d0,16(sp)
   16046:	|            clr.l 12(sp)
   1604a:	|            move.l 1cb26 <SysBase>,d0
   16050:	|            movea.l d0,a6
   16052:	|            move.l 16(sp),d0
   16056:	|            move.l 12(sp),d1
   1605a:	|            jsr -684(a6)
   1605e:	|            move.l d0,8(sp)
   16062:	|            move.l 8(sp),d0
   16066:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   1606a:	|     ,----- beq.s 160cc <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   1606c:	|     |      movea.l 20(sp),a0
   16070:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   16074:	|     |      move.l 20(sp),d0
   16078:	|     |      addq.l #8,d0
   1607a:	|     |      move.l d0,-(sp)
   1607c:	|     |      move.l 32(sp),-(sp)
   16080:	|     |      jsr 8a7e <loadSpriteBank>
   16086:	|     |      addq.l #8,sp
   16088:	|     |      tst.w d0
   1608a:	|     |  ,-- beq.s 160b2 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   1608c:	|     |  |   movea.l 20(sp),a0
   16090:	|     |  |   moveq #1,d0
   16092:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   16096:	|     |  |   move.l 1cc3a <allLoadedBanks>,d0
   1609c:	|     |  |   movea.l 20(sp),a0
   160a0:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   160a4:	|     |  |   move.l 20(sp),1cc3a <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   160ac:	|     |  |   move.l 20(sp),d0
   160b0:	+-----|--|-- bra.s 160ce <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   160b2:	|     |  '-> move.l 20(sp),4(sp)
   160b8:	|     |      move.l 1cb26 <SysBase>,d0
   160be:	|     |      movea.l d0,a6
   160c0:	|     |      movea.l 4(sp),a1
   160c4:	|     |      jsr -690(a6)
			return NULL;
   160c8:	|     |      moveq #0,d0
   160ca:	+-----|----- bra.s 160ce <loadBankForAnim+0xd4>
		}
	} else return NULL;
   160cc:	|     '----> moveq #0,d0
}
   160ce:	'----------> movea.l (sp)+,a6
   160d0:	             lea 20(sp),sp
   160d4:	             rts

000160d6 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   160d6:	       lea -60(sp),sp
   160da:	       move.l d3,-(sp)
   160dc:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   160de:	       move.l 88(sp),d0
   160e2:	       sub.l 80(sp),d0
   160e6:	       move.l d0,-(sp)
   160e8:	       jsr 176ca <__floatsidf>
   160ee:	       addq.l #4,sp
   160f0:	       move.l d0,32(sp)
   160f4:	       move.l d1,36(sp)
   160f8:	       move.l 32(sp),60(sp)
   160fe:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   16104:	       move.l 92(sp),d0
   16108:	       sub.l 84(sp),d0
   1610c:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   16110:	       move.l 96(sp),d0
   16114:	       sub.l 80(sp),d0
   16118:	       move.l d0,-(sp)
   1611a:	       jsr 176ca <__floatsidf>
   16120:	       addq.l #4,sp
   16122:	       move.l 64(sp),-(sp)
   16126:	       move.l 64(sp),-(sp)
   1612a:	       move.l d1,-(sp)
   1612c:	       move.l d0,-(sp)
   1612e:	       jsr 1775a <__muldf3>
   16134:	       lea 16(sp),sp
   16138:	       move.l d0,d2
   1613a:	       move.l d1,d3
   1613c:	       move.l 100(sp),d0
   16140:	       sub.l 84(sp),d0
   16144:	       move.l 56(sp),-(sp)
   16148:	       move.l d0,-(sp)
   1614a:	       jsr 17c64 <__mulsi3>
   16150:	       addq.l #8,sp
   16152:	       move.l d0,-(sp)
   16154:	       jsr 176ca <__floatsidf>
   1615a:	       addq.l #4,sp
   1615c:	       move.l d1,-(sp)
   1615e:	       move.l d0,-(sp)
   16160:	       move.l d3,-(sp)
   16162:	       move.l d2,-(sp)
   16164:	       jsr 174fc <__adddf3>
   1616a:	       lea 16(sp),sp
   1616e:	       move.l d0,24(sp)
   16172:	       move.l d1,28(sp)
   16176:	       move.l 24(sp),48(sp)
   1617c:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   16182:	       move.l 64(sp),-(sp)
   16186:	       move.l 64(sp),-(sp)
   1618a:	       move.l 72(sp),-(sp)
   1618e:	       move.l 72(sp),-(sp)
   16192:	       jsr 1775a <__muldf3>
   16198:	       lea 16(sp),sp
   1619c:	       move.l d0,d2
   1619e:	       move.l d1,d3
   161a0:	       move.l 56(sp),-(sp)
   161a4:	       move.l 60(sp),-(sp)
   161a8:	       jsr 17c64 <__mulsi3>
   161ae:	       addq.l #8,sp
   161b0:	       move.l d0,-(sp)
   161b2:	       jsr 176ca <__floatsidf>
   161b8:	       addq.l #4,sp
   161ba:	       move.l d1,-(sp)
   161bc:	       move.l d0,-(sp)
   161be:	       move.l d3,-(sp)
   161c0:	       move.l d2,-(sp)
   161c2:	       jsr 174fc <__adddf3>
   161c8:	       lea 16(sp),sp
   161cc:	       move.l d1,-(sp)
   161ce:	       move.l d0,-(sp)
   161d0:	       move.l 60(sp),-(sp)
   161d4:	       move.l 60(sp),-(sp)
   161d8:	       jsr 1755e <__divdf3>
   161de:	       lea 16(sp),sp
   161e2:	       move.l d0,16(sp)
   161e6:	       move.l d1,20(sp)
   161ea:	       move.l 16(sp),48(sp)
   161f0:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   161f6:	       clr.l -(sp)
   161f8:	       clr.l -(sp)
   161fa:	       move.l 60(sp),-(sp)
   161fe:	       move.l 60(sp),-(sp)
   16202:	       jsr 178e2 <__ltdf2>
   16208:	       lea 16(sp),sp
   1620c:	       tst.l d0
   1620e:	   ,-- bge.s 16224 <closestPointOnLine+0x14e>
		*closestX = x1;
   16210:	   |   movea.l 72(sp),a0
   16214:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   16218:	   |   movea.l 76(sp),a0
   1621c:	   |   move.l 84(sp),(a0)
   16220:	,--|-- bra.w 162f2 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   16224:	|  '-> clr.l -(sp)
   16226:	|      move.l #1072693248,-(sp)
   1622c:	|      move.l 60(sp),-(sp)
   16230:	|      move.l 60(sp),-(sp)
   16234:	|      jsr 17828 <__gtdf2>
   1623a:	|      lea 16(sp),sp
   1623e:	|      tst.l d0
   16240:	|  ,-- ble.s 16256 <closestPointOnLine+0x180>
		*closestX = x2;
   16242:	|  |   movea.l 72(sp),a0
   16246:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   1624a:	|  |   movea.l 76(sp),a0
   1624e:	|  |   move.l 92(sp),(a0)
   16252:	+--|-- bra.w 162f2 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   16256:	|  '-> move.l 64(sp),-(sp)
   1625a:	|      move.l 64(sp),-(sp)
   1625e:	|      move.l 60(sp),-(sp)
   16262:	|      move.l 60(sp),-(sp)
   16266:	|      jsr 1775a <__muldf3>
   1626c:	|      lea 16(sp),sp
   16270:	|      move.l d0,8(sp)
   16274:	|      move.l d1,12(sp)
   16278:	|      move.l 8(sp),40(sp)
   1627e:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   16284:	|      move.l 44(sp),-(sp)
   16288:	|      move.l 44(sp),-(sp)
   1628c:	|      jsr 1766c <__fixdfsi>
   16292:	|      addq.l #8,sp
   16294:	|      movea.l 72(sp),a0
   16298:	|      move.l d0,(a0)
		*closestX += x1;
   1629a:	|      movea.l 72(sp),a0
   1629e:	|      move.l (a0),d0
   162a0:	|      add.l 80(sp),d0
   162a4:	|      movea.l 72(sp),a0
   162a8:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   162aa:	|      move.l 56(sp),-(sp)
   162ae:	|      jsr 176ca <__floatsidf>
   162b4:	|      addq.l #4,sp
   162b6:	|      move.l 52(sp),-(sp)
   162ba:	|      move.l 52(sp),-(sp)
   162be:	|      move.l d1,-(sp)
   162c0:	|      move.l d0,-(sp)
   162c2:	|      jsr 1775a <__muldf3>
   162c8:	|      lea 16(sp),sp
   162cc:	|      move.l d1,-(sp)
   162ce:	|      move.l d0,-(sp)
   162d0:	|      jsr 1766c <__fixdfsi>
   162d6:	|      addq.l #8,sp
   162d8:	|      movea.l 76(sp),a0
   162dc:	|      move.l d0,(a0)
		*closestY += y1;
   162de:	|      movea.l 76(sp),a0
   162e2:	|      move.l (a0),d0
   162e4:	|      add.l 84(sp),d0
   162e8:	|      movea.l 76(sp),a0
   162ec:	|      move.l d0,(a0)
		return TRUE;
   162ee:	|      moveq #1,d0
   162f0:	|  ,-- bra.s 162f4 <closestPointOnLine+0x21e>
	}
	return FALSE;
   162f2:	'--|-> clr.w d0
}
   162f4:	   '-> move.l (sp)+,d2
   162f6:	       move.l (sp)+,d3
   162f8:	       lea 60(sp),sp
   162fc:	       rts

000162fe <drawFloor>:

void drawFloor() {
   162fe:	                lea -12(sp),sp
   16302:	                move.l d3,-(sp)
   16304:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16306:	                clr.l 16(sp)
   1630a:	   ,----------- bra.w 1651e <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   1630e:	,--|----------> movea.l 1cc3e <currentFloor>,a0
   16314:	|  |            move.l 12(a0),d1
   16318:	|  |            move.l 16(sp),d0
   1631c:	|  |            lsl.l #3,d0
   1631e:	|  |            movea.l d1,a0
   16320:	|  |            adda.l d0,a0
   16322:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   16326:	|  |            moveq #1,d0
   16328:	|  |            cmp.l 8(sp),d0
   1632c:	|  |  ,-------- bge.w 1651a <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   16330:	|  |  |         moveq #1,d0
   16332:	|  |  |         move.l d0,12(sp)
   16336:	|  |  |     ,-- bra.w 16430 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   1633a:	|  |  |  ,--|-> movea.l 1cc3e <currentFloor>,a0
   16340:	|  |  |  |  |   move.l 4(a0),d1
   16344:	|  |  |  |  |   movea.l 1cc3e <currentFloor>,a0
   1634a:	|  |  |  |  |   movea.l 12(a0),a0
   1634e:	|  |  |  |  |   move.l 16(sp),d0
   16352:	|  |  |  |  |   lsl.l #3,d0
   16354:	|  |  |  |  |   adda.l d0,a0
   16356:	|  |  |  |  |   movea.l 4(a0),a0
   1635a:	|  |  |  |  |   move.l 12(sp),d0
   1635e:	|  |  |  |  |   add.l d0,d0
   16360:	|  |  |  |  |   add.l d0,d0
   16362:	|  |  |  |  |   adda.l d0,a0
   16364:	|  |  |  |  |   move.l (a0),d0
   16366:	|  |  |  |  |   lsl.l #3,d0
   16368:	|  |  |  |  |   movea.l d1,a0
   1636a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1636c:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   16370:	|  |  |  |  |   movea.l 1cc3e <currentFloor>,a0
   16376:	|  |  |  |  |   move.l 4(a0),d1
   1637a:	|  |  |  |  |   movea.l 1cc3e <currentFloor>,a0
   16380:	|  |  |  |  |   movea.l 12(a0),a0
   16384:	|  |  |  |  |   move.l 16(sp),d0
   16388:	|  |  |  |  |   lsl.l #3,d0
   1638a:	|  |  |  |  |   adda.l d0,a0
   1638c:	|  |  |  |  |   movea.l 4(a0),a0
   16390:	|  |  |  |  |   move.l 12(sp),d0
   16394:	|  |  |  |  |   add.l d0,d0
   16396:	|  |  |  |  |   add.l d0,d0
   16398:	|  |  |  |  |   adda.l d0,a0
   1639a:	|  |  |  |  |   move.l (a0),d0
   1639c:	|  |  |  |  |   lsl.l #3,d0
   1639e:	|  |  |  |  |   movea.l d1,a0
   163a0:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   163a2:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   163a4:	|  |  |  |  |   movea.l 1cc3e <currentFloor>,a0
   163aa:	|  |  |  |  |   move.l 4(a0),d1
   163ae:	|  |  |  |  |   movea.l 1cc3e <currentFloor>,a0
   163b4:	|  |  |  |  |   movea.l 12(a0),a0
   163b8:	|  |  |  |  |   move.l 16(sp),d0
   163bc:	|  |  |  |  |   lsl.l #3,d0
   163be:	|  |  |  |  |   adda.l d0,a0
   163c0:	|  |  |  |  |   movea.l 4(a0),a0
   163c4:	|  |  |  |  |   move.l 12(sp),d0
   163c8:	|  |  |  |  |   addi.l #1073741823,d0
   163ce:	|  |  |  |  |   add.l d0,d0
   163d0:	|  |  |  |  |   add.l d0,d0
   163d2:	|  |  |  |  |   adda.l d0,a0
   163d4:	|  |  |  |  |   move.l (a0),d0
   163d6:	|  |  |  |  |   lsl.l #3,d0
   163d8:	|  |  |  |  |   movea.l d1,a0
   163da:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   163dc:	|  |  |  |  |   move.l 4(a0),d1
   163e0:	|  |  |  |  |   movea.l 1cc3e <currentFloor>,a0
   163e6:	|  |  |  |  |   move.l 4(a0),d3
   163ea:	|  |  |  |  |   movea.l 1cc3e <currentFloor>,a0
   163f0:	|  |  |  |  |   movea.l 12(a0),a0
   163f4:	|  |  |  |  |   move.l 16(sp),d0
   163f8:	|  |  |  |  |   lsl.l #3,d0
   163fa:	|  |  |  |  |   adda.l d0,a0
   163fc:	|  |  |  |  |   movea.l 4(a0),a0
   16400:	|  |  |  |  |   move.l 12(sp),d0
   16404:	|  |  |  |  |   addi.l #1073741823,d0
   1640a:	|  |  |  |  |   add.l d0,d0
   1640c:	|  |  |  |  |   add.l d0,d0
   1640e:	|  |  |  |  |   adda.l d0,a0
   16410:	|  |  |  |  |   move.l (a0),d0
   16412:	|  |  |  |  |   lsl.l #3,d0
   16414:	|  |  |  |  |   movea.l d3,a0
   16416:	|  |  |  |  |   adda.l d0,a0
   16418:	|  |  |  |  |   move.l (a0),d0
   1641a:	|  |  |  |  |   move.l d2,-(sp)
   1641c:	|  |  |  |  |   move.l a1,-(sp)
   1641e:	|  |  |  |  |   move.l d1,-(sp)
   16420:	|  |  |  |  |   move.l d0,-(sp)
   16422:	|  |  |  |  |   jsr 46fa <drawLine>
   16428:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   1642c:	|  |  |  |  |   addq.l #1,12(sp)
   16430:	|  |  |  |  '-> move.l 12(sp),d0
   16434:	|  |  |  |      cmp.l 8(sp),d0
   16438:	|  |  |  '----- blt.w 1633a <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   1643c:	|  |  |         movea.l 1cc3e <currentFloor>,a0
   16442:	|  |  |         move.l 4(a0),d1
   16446:	|  |  |         movea.l 1cc3e <currentFloor>,a0
   1644c:	|  |  |         movea.l 12(a0),a0
   16450:	|  |  |         move.l 16(sp),d0
   16454:	|  |  |         lsl.l #3,d0
   16456:	|  |  |         adda.l d0,a0
   16458:	|  |  |         movea.l 4(a0),a0
   1645c:	|  |  |         move.l 8(sp),d0
   16460:	|  |  |         addi.l #1073741823,d0
   16466:	|  |  |         add.l d0,d0
   16468:	|  |  |         add.l d0,d0
   1646a:	|  |  |         adda.l d0,a0
   1646c:	|  |  |         move.l (a0),d0
   1646e:	|  |  |         lsl.l #3,d0
   16470:	|  |  |         movea.l d1,a0
   16472:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16474:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   16478:	|  |  |         movea.l 1cc3e <currentFloor>,a0
   1647e:	|  |  |         move.l 4(a0),d1
   16482:	|  |  |         movea.l 1cc3e <currentFloor>,a0
   16488:	|  |  |         movea.l 12(a0),a0
   1648c:	|  |  |         move.l 16(sp),d0
   16490:	|  |  |         lsl.l #3,d0
   16492:	|  |  |         adda.l d0,a0
   16494:	|  |  |         movea.l 4(a0),a0
   16498:	|  |  |         move.l 8(sp),d0
   1649c:	|  |  |         addi.l #1073741823,d0
   164a2:	|  |  |         add.l d0,d0
   164a4:	|  |  |         add.l d0,d0
   164a6:	|  |  |         adda.l d0,a0
   164a8:	|  |  |         move.l (a0),d0
   164aa:	|  |  |         lsl.l #3,d0
   164ac:	|  |  |         movea.l d1,a0
   164ae:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   164b0:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   164b2:	|  |  |         movea.l 1cc3e <currentFloor>,a0
   164b8:	|  |  |         move.l 4(a0),d1
   164bc:	|  |  |         movea.l 1cc3e <currentFloor>,a0
   164c2:	|  |  |         movea.l 12(a0),a0
   164c6:	|  |  |         move.l 16(sp),d0
   164ca:	|  |  |         lsl.l #3,d0
   164cc:	|  |  |         adda.l d0,a0
   164ce:	|  |  |         movea.l 4(a0),a0
   164d2:	|  |  |         move.l (a0),d0
   164d4:	|  |  |         lsl.l #3,d0
   164d6:	|  |  |         movea.l d1,a0
   164d8:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   164da:	|  |  |         move.l 4(a0),d1
   164de:	|  |  |         movea.l 1cc3e <currentFloor>,a0
   164e4:	|  |  |         move.l 4(a0),d3
   164e8:	|  |  |         movea.l 1cc3e <currentFloor>,a0
   164ee:	|  |  |         movea.l 12(a0),a0
   164f2:	|  |  |         move.l 16(sp),d0
   164f6:	|  |  |         lsl.l #3,d0
   164f8:	|  |  |         adda.l d0,a0
   164fa:	|  |  |         movea.l 4(a0),a0
   164fe:	|  |  |         move.l (a0),d0
   16500:	|  |  |         lsl.l #3,d0
   16502:	|  |  |         movea.l d3,a0
   16504:	|  |  |         adda.l d0,a0
   16506:	|  |  |         move.l (a0),d0
   16508:	|  |  |         move.l d2,-(sp)
   1650a:	|  |  |         move.l a1,-(sp)
   1650c:	|  |  |         move.l d1,-(sp)
   1650e:	|  |  |         move.l d0,-(sp)
   16510:	|  |  |         jsr 46fa <drawLine>
   16516:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1651a:	|  |  '-------> addq.l #1,16(sp)
   1651e:	|  '----------> movea.l 1cc3e <currentFloor>,a0
   16524:	|               move.l 8(a0),d0
   16528:	|               cmp.l 16(sp),d0
   1652c:	'-------------- bgt.w 1630e <drawFloor+0x10>
        }
    }
}
   16530:	                nop
   16532:	                nop
   16534:	                move.l (sp)+,d2
   16536:	                move.l (sp)+,d3
   16538:	                lea 12(sp),sp
   1653c:	                rts

0001653e <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   1653e:	                      lea -12(sp),sp
    int sharedVertices = 0;
   16542:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   16546:	                      clr.l 4(sp)
   1654a:	   ,----------------- bra.w 165dc <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   1654e:	,--|----------------> clr.l (sp)
   16550:	|  |     ,----------- bra.s 165cc <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   16552:	|  |  ,--|----------> movea.l 16(sp),a0
   16556:	|  |  |  |            move.l 4(a0),d1
   1655a:	|  |  |  |            move.l 4(sp),d0
   1655e:	|  |  |  |            add.l d0,d0
   16560:	|  |  |  |            add.l d0,d0
   16562:	|  |  |  |            movea.l d1,a0
   16564:	|  |  |  |            adda.l d0,a0
   16566:	|  |  |  |            move.l (a0),d1
   16568:	|  |  |  |            movea.l 20(sp),a0
   1656c:	|  |  |  |            movea.l 4(a0),a0
   16570:	|  |  |  |            move.l (sp),d0
   16572:	|  |  |  |            add.l d0,d0
   16574:	|  |  |  |            add.l d0,d0
   16576:	|  |  |  |            adda.l d0,a0
   16578:	|  |  |  |            move.l (a0),d0
   1657a:	|  |  |  |            cmp.l d1,d0
   1657c:	|  |  |  |  ,-------- bne.s 165ca <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   1657e:	|  |  |  |  |         move.l 8(sp),d0
   16582:	|  |  |  |  |         move.l d0,d1
   16584:	|  |  |  |  |         addq.l #1,d1
   16586:	|  |  |  |  |         move.l d1,8(sp)
   1658a:	|  |  |  |  |         tst.l d0
   1658c:	|  |  |  |  |     ,-- beq.s 165ae <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   1658e:	|  |  |  |  |     |   movea.l 16(sp),a0
   16592:	|  |  |  |  |     |   move.l 4(a0),d1
   16596:	|  |  |  |  |     |   move.l 4(sp),d0
   1659a:	|  |  |  |  |     |   add.l d0,d0
   1659c:	|  |  |  |  |     |   add.l d0,d0
   1659e:	|  |  |  |  |     |   movea.l d1,a0
   165a0:	|  |  |  |  |     |   adda.l d0,a0
   165a2:	|  |  |  |  |     |   move.l (a0),d0
   165a4:	|  |  |  |  |     |   movea.l 28(sp),a0
   165a8:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   165aa:	|  |  |  |  |     |   moveq #1,d0
   165ac:	|  |  |  |  |  ,--|-- bra.s 165ec <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   165ae:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   165b2:	|  |  |  |  |  |      move.l 4(a0),d1
   165b6:	|  |  |  |  |  |      move.l 4(sp),d0
   165ba:	|  |  |  |  |  |      add.l d0,d0
   165bc:	|  |  |  |  |  |      add.l d0,d0
   165be:	|  |  |  |  |  |      movea.l d1,a0
   165c0:	|  |  |  |  |  |      adda.l d0,a0
   165c2:	|  |  |  |  |  |      move.l (a0),d0
   165c4:	|  |  |  |  |  |      movea.l 24(sp),a0
   165c8:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   165ca:	|  |  |  |  '--|----> addq.l #1,(sp)
   165cc:	|  |  |  '-----|----> movea.l 20(sp),a0
   165d0:	|  |  |        |      move.l (a0),d0
   165d2:	|  |  |        |      cmp.l (sp),d0
   165d4:	|  |  '--------|----- bgt.w 16552 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   165d8:	|  |           |      addq.l #1,4(sp)
   165dc:	|  '-----------|----> movea.l 16(sp),a0
   165e0:	|              |      move.l (a0),d0
   165e2:	|              |      cmp.l 4(sp),d0
   165e6:	'--------------|----- bgt.w 1654e <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   165ea:	               |      clr.w d0
}
   165ec:	               '----> lea 12(sp),sp
   165f0:	                      rts

000165f2 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   165f2:	movea.l 1cc3e <currentFloor>,a0
   165f8:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   165fc:	movea.l 1cc3e <currentFloor>,a0
   16602:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   16606:	movea.l 1cc3e <currentFloor>,a0
   1660c:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   16610:	movea.l 1cc3e <currentFloor>,a0
   16616:	clr.l 16(a0)
}
   1661a:	nop
   1661c:	rts

0001661e <inFloor>:

int inFloor (int x, int y) {
   1661e:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   16620:	          pea 1a244 <talk.c.490538ff+0x835>
   16626:	          jsr 172d8 <KPrintF>
   1662c:	          addq.l #4,sp
	int i, r = -1;
   1662e:	          moveq #-1,d0
   16630:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16632:	          clr.l 4(sp)
   16636:	   ,----- bra.s 1666a <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   16638:	,--|----> movea.l 1cc3e <currentFloor>,a0
   1663e:	|  |      move.l 12(a0),d1
   16642:	|  |      move.l 4(sp),d0
   16646:	|  |      lsl.l #3,d0
   16648:	|  |      add.l d1,d0
   1664a:	|  |      move.l 16(sp),-(sp)
   1664e:	|  |      move.l 16(sp),-(sp)
   16652:	|  |      move.l d0,-(sp)
   16654:	|  |      jsr 16844 <pointInFloorPolygon>
   1665a:	|  |      lea 12(sp),sp
   1665e:	|  |      tst.w d0
   16660:	|  |  ,-- beq.s 16666 <inFloor+0x48>
			r = i;
   16662:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16666:	|  |  '-> addq.l #1,4(sp)
   1666a:	|  '----> movea.l 1cc3e <currentFloor>,a0
   16670:	|         move.l 8(a0),d0
   16674:	|         cmp.l 4(sp),d0
   16678:	'-------- bgt.s 16638 <inFloor+0x1a>

	KPrintF("infloor finished\n");
   1667a:	          pea 1a255 <talk.c.490538ff+0x846>
   16680:	          jsr 172d8 <KPrintF>
   16686:	          addq.l #4,sp
	return r;
   16688:	          move.l (sp),d0
}
   1668a:	          addq.l #8,sp
   1668c:	          rts

0001668e <initFloor>:

BOOL initFloor () {
   1668e:	       lea -12(sp),sp
   16692:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16694:	       moveq #20,d0
   16696:	       move.l d0,12(sp)
   1669a:	       clr.l 8(sp)
   1669e:	       move.l 1cb26 <SysBase>,d0
   166a4:	       movea.l d0,a6
   166a6:	       move.l 12(sp),d0
   166aa:	       move.l 8(sp),d1
   166ae:	       jsr -684(a6)
   166b2:	       move.l d0,4(sp)
   166b6:	       move.l 4(sp),d0
   166ba:	       move.l d0,1cc3e <currentFloor>

    if(currentFloor == 0) {
   166c0:	       move.l 1cc3e <currentFloor>,d0
   166c6:	,----- bne.s 166da <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   166c8:	|      pea 1a267 <talk.c.490538ff+0x858>
   166ce:	|      jsr 172d8 <KPrintF>
   166d4:	|      addq.l #4,sp
        return FALSE;
   166d6:	|      clr.w d0
   166d8:	|  ,-- bra.s 166e2 <initFloor+0x54>
    }

	noFloor ();
   166da:	'--|-> jsr 165f2 <noFloor>
	return TRUE;
   166e0:	   |   moveq #1,d0
}
   166e2:	   '-> movea.l (sp)+,a6
   166e4:	       lea 12(sp),sp
   166e8:	       rts

000166ea <killFloor>:

void killFloor () {
   166ea:	       lea -24(sp),sp
   166ee:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   166f0:	       clr.l 24(sp)
   166f4:	   ,-- bra.s 1674e <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   166f6:	,--|-> movea.l 1cc3e <currentFloor>,a0
   166fc:	|  |   move.l 12(a0),d1
   16700:	|  |   move.l 24(sp),d0
   16704:	|  |   lsl.l #3,d0
   16706:	|  |   movea.l d1,a0
   16708:	|  |   adda.l d0,a0
   1670a:	|  |   move.l 4(a0),8(sp)
   16710:	|  |   move.l 1cb26 <SysBase>,d0
   16716:	|  |   movea.l d0,a6
   16718:	|  |   movea.l 8(sp),a1
   1671c:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   16720:	|  |   movea.l 1cc3e <currentFloor>,a0
   16726:	|  |   move.l 16(a0),d1
   1672a:	|  |   move.l 24(sp),d0
   1672e:	|  |   add.l d0,d0
   16730:	|  |   add.l d0,d0
   16732:	|  |   movea.l d1,a0
   16734:	|  |   adda.l d0,a0
   16736:	|  |   move.l (a0),4(sp)
   1673a:	|  |   move.l 1cb26 <SysBase>,d0
   16740:	|  |   movea.l d0,a6
   16742:	|  |   movea.l 4(sp),a1
   16746:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1674a:	|  |   addq.l #1,24(sp)
   1674e:	|  '-> movea.l 1cc3e <currentFloor>,a0
   16754:	|      move.l 8(a0),d0
   16758:	|      cmp.l 24(sp),d0
   1675c:	'----- bgt.s 166f6 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   1675e:	       movea.l 1cc3e <currentFloor>,a0
   16764:	       move.l 12(a0),20(sp)
   1676a:	       move.l 1cb26 <SysBase>,d0
   16770:	       movea.l d0,a6
   16772:	       movea.l 20(sp),a1
   16776:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   1677a:	       movea.l 1cc3e <currentFloor>,a0
   16780:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16784:	       movea.l 1cc3e <currentFloor>,a0
   1678a:	       move.l 4(a0),16(sp)
   16790:	       move.l 1cb26 <SysBase>,d0
   16796:	       movea.l d0,a6
   16798:	       movea.l 16(sp),a1
   1679c:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   167a0:	       movea.l 1cc3e <currentFloor>,a0
   167a6:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   167aa:	       movea.l 1cc3e <currentFloor>,a0
   167b0:	       move.l 16(a0),12(sp)
   167b6:	       move.l 1cb26 <SysBase>,d0
   167bc:	       movea.l d0,a6
   167be:	       movea.l 12(sp),a1
   167c2:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   167c6:	       movea.l 1cc3e <currentFloor>,a0
   167cc:	       clr.l 16(a0)
}
   167d0:	       nop
   167d2:	       movea.l (sp)+,a6
   167d4:	       lea 24(sp),sp
   167d8:	       rts

000167da <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   167da:	                   lea -12(sp),sp
	int sharedVertices = 0;
   167de:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   167e2:	                   clr.l 4(sp)
   167e6:	   ,-------------- bra.s 16832 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   167e8:	,--|-------------> clr.l (sp)
   167ea:	|  |     ,-------- bra.s 16826 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   167ec:	|  |  ,--|-------> move.l 20(sp),d1
   167f0:	|  |  |  |         move.l 4(sp),d0
   167f4:	|  |  |  |         add.l d0,d0
   167f6:	|  |  |  |         add.l d0,d0
   167f8:	|  |  |  |         movea.l d1,a0
   167fa:	|  |  |  |         adda.l d0,a0
   167fc:	|  |  |  |         move.l (a0),d1
   167fe:	|  |  |  |         movea.l 28(sp),a0
   16802:	|  |  |  |         move.l (sp),d0
   16804:	|  |  |  |         add.l d0,d0
   16806:	|  |  |  |         add.l d0,d0
   16808:	|  |  |  |         adda.l d0,a0
   1680a:	|  |  |  |         move.l (a0),d0
   1680c:	|  |  |  |         cmp.l d1,d0
   1680e:	|  |  |  |     ,-- bne.s 16824 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   16810:	|  |  |  |     |   move.l 8(sp),d0
   16814:	|  |  |  |     |   move.l d0,d1
   16816:	|  |  |  |     |   addq.l #1,d1
   16818:	|  |  |  |     |   move.l d1,8(sp)
   1681c:	|  |  |  |     |   tst.l d0
   1681e:	|  |  |  |     +-- beq.s 16824 <polysShareSide+0x4a>
   16820:	|  |  |  |     |   moveq #1,d0
   16822:	|  |  |  |  ,--|-- bra.s 1683e <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16824:	|  |  |  |  |  '-> addq.l #1,(sp)
   16826:	|  |  |  '--|----> move.l 24(sp),d0
   1682a:	|  |  |     |      cmp.l (sp),d0
   1682c:	|  |  '-----|----- bgt.s 167ec <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   1682e:	|  |        |      addq.l #1,4(sp)
   16832:	|  '--------|----> move.l 16(sp),d0
   16836:	|           |      cmp.l 4(sp),d0
   1683a:	'-----------|----- bgt.s 167e8 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   1683c:	            |      clr.w d0
}
   1683e:	            '----> lea 12(sp),sp
   16842:	                   rts

00016844 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   16844:	             lea -28(sp),sp
   16848:	             move.l d3,-(sp)
   1684a:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   1684c:	             clr.l 32(sp)
   16850:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16854:	             movea.l 40(sp),a0
   16858:	             move.l (a0),d0
   1685a:	             move.l d0,d1
   1685c:	             subq.l #1,d1
   1685e:	             move.l d1,28(sp)
   16862:	   ,-------- bra.w 16a5c <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   16866:	,--|-------> movea.l 1cc3e <currentFloor>,a0
   1686c:	|  |         move.l 4(a0),d1
   16870:	|  |         movea.l 40(sp),a0
   16874:	|  |         movea.l 4(a0),a0
   16878:	|  |         move.l 32(sp),d0
   1687c:	|  |         add.l d0,d0
   1687e:	|  |         add.l d0,d0
   16880:	|  |         adda.l d0,a0
   16882:	|  |         move.l (a0),d0
   16884:	|  |         lsl.l #3,d0
   16886:	|  |         movea.l d1,a0
   16888:	|  |         adda.l d0,a0
   1688a:	|  |         move.l (a0),d0
   1688c:	|  |         move.l d0,-(sp)
   1688e:	|  |         jsr 1770a <__floatsisf>
   16894:	|  |         addq.l #4,sp
   16896:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   1689a:	|  |         movea.l 1cc3e <currentFloor>,a0
   168a0:	|  |         move.l 4(a0),d1
   168a4:	|  |         movea.l 40(sp),a0
   168a8:	|  |         movea.l 4(a0),a0
   168ac:	|  |         move.l 32(sp),d0
   168b0:	|  |         add.l d0,d0
   168b2:	|  |         add.l d0,d0
   168b4:	|  |         adda.l d0,a0
   168b6:	|  |         move.l (a0),d0
   168b8:	|  |         lsl.l #3,d0
   168ba:	|  |         movea.l d1,a0
   168bc:	|  |         adda.l d0,a0
   168be:	|  |         move.l 4(a0),d0
   168c2:	|  |         move.l d0,-(sp)
   168c4:	|  |         jsr 1770a <__floatsisf>
   168ca:	|  |         addq.l #4,sp
   168cc:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   168d0:	|  |         movea.l 1cc3e <currentFloor>,a0
   168d6:	|  |         move.l 4(a0),d1
   168da:	|  |         movea.l 40(sp),a0
   168de:	|  |         movea.l 4(a0),a0
   168e2:	|  |         move.l 28(sp),d0
   168e6:	|  |         add.l d0,d0
   168e8:	|  |         add.l d0,d0
   168ea:	|  |         adda.l d0,a0
   168ec:	|  |         move.l (a0),d0
   168ee:	|  |         lsl.l #3,d0
   168f0:	|  |         movea.l d1,a0
   168f2:	|  |         adda.l d0,a0
   168f4:	|  |         move.l (a0),d0
   168f6:	|  |         move.l d0,-(sp)
   168f8:	|  |         jsr 1770a <__floatsisf>
   168fe:	|  |         addq.l #4,sp
   16900:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16904:	|  |         movea.l 1cc3e <currentFloor>,a0
   1690a:	|  |         move.l 4(a0),d1
   1690e:	|  |         movea.l 40(sp),a0
   16912:	|  |         movea.l 4(a0),a0
   16916:	|  |         move.l 28(sp),d0
   1691a:	|  |         add.l d0,d0
   1691c:	|  |         add.l d0,d0
   1691e:	|  |         adda.l d0,a0
   16920:	|  |         move.l (a0),d0
   16922:	|  |         lsl.l #3,d0
   16924:	|  |         movea.l d1,a0
   16926:	|  |         adda.l d0,a0
   16928:	|  |         move.l 4(a0),d0
   1692c:	|  |         move.l d0,-(sp)
   1692e:	|  |         jsr 1770a <__floatsisf>
   16934:	|  |         addq.l #4,sp
   16936:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1693a:	|  |         move.l 48(sp),-(sp)
   1693e:	|  |         jsr 1770a <__floatsisf>
   16944:	|  |         addq.l #4,sp
   16946:	|  |         move.l d0,-(sp)
   16948:	|  |         move.l 20(sp),-(sp)
   1694c:	|  |         jsr 178ac <__lesf2>
   16952:	|  |         addq.l #8,sp
   16954:	|  |         tst.l d0
   16956:	|  |     ,-- bgt.s 16976 <pointInFloorPolygon+0x132>
   16958:	|  |     |   move.l 48(sp),-(sp)
   1695c:	|  |     |   jsr 1770a <__floatsisf>
   16962:	|  |     |   addq.l #4,sp
   16964:	|  |     |   move.l d0,-(sp)
   16966:	|  |     |   move.l 12(sp),-(sp)
   1696a:	|  |     |   jsr 17876 <__gtsf2>
   16970:	|  |     |   addq.l #8,sp
   16972:	|  |     |   tst.l d0
   16974:	|  |  ,--|-- bgt.s 169b6 <pointInFloorPolygon+0x172>
   16976:	|  |  |  '-> move.l 48(sp),-(sp)
   1697a:	|  |  |      jsr 1770a <__floatsisf>
   16980:	|  |  |      addq.l #4,sp
   16982:	|  |  |      move.l d0,-(sp)
   16984:	|  |  |      move.l 12(sp),-(sp)
   16988:	|  |  |      jsr 178ac <__lesf2>
   1698e:	|  |  |      addq.l #8,sp
   16990:	|  |  |      tst.l d0
   16992:	|  |  |  ,-- bgt.w 16a4c <pointInFloorPolygon+0x208>
   16996:	|  |  |  |   move.l 48(sp),-(sp)
   1699a:	|  |  |  |   jsr 1770a <__floatsisf>
   169a0:	|  |  |  |   addq.l #4,sp
   169a2:	|  |  |  |   move.l d0,-(sp)
   169a4:	|  |  |  |   move.l 20(sp),-(sp)
   169a8:	|  |  |  |   jsr 17876 <__gtsf2>
   169ae:	|  |  |  |   addq.l #8,sp
   169b0:	|  |  |  |   tst.l d0
   169b2:	|  |  |  +-- ble.w 16a4c <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   169b6:	|  |  '--|-> move.l 44(sp),-(sp)
   169ba:	|  |     |   jsr 1770a <__floatsisf>
   169c0:	|  |     |   addq.l #4,sp
   169c2:	|  |     |   move.l d0,d3
   169c4:	|  |     |   move.l 20(sp),-(sp)
   169c8:	|  |     |   move.l 16(sp),-(sp)
   169cc:	|  |     |   jsr 179fe <__subsf3>
   169d2:	|  |     |   addq.l #8,sp
   169d4:	|  |     |   move.l d0,d2
   169d6:	|  |     |   move.l 48(sp),-(sp)
   169da:	|  |     |   jsr 1770a <__floatsisf>
   169e0:	|  |     |   addq.l #4,sp
   169e2:	|  |     |   move.l 16(sp),-(sp)
   169e6:	|  |     |   move.l d0,-(sp)
   169e8:	|  |     |   jsr 179fe <__subsf3>
   169ee:	|  |     |   addq.l #8,sp
   169f0:	|  |     |   move.l d0,-(sp)
   169f2:	|  |     |   move.l d2,-(sp)
   169f4:	|  |     |   jsr 177bc <__mulsf3>
   169fa:	|  |     |   addq.l #8,sp
   169fc:	|  |     |   move.l d0,d2
   169fe:	|  |     |   move.l 16(sp),-(sp)
   16a02:	|  |     |   move.l 12(sp),-(sp)
   16a06:	|  |     |   jsr 179fe <__subsf3>
   16a0c:	|  |     |   addq.l #8,sp
   16a0e:	|  |     |   move.l d0,-(sp)
   16a10:	|  |     |   move.l d2,-(sp)
   16a12:	|  |     |   jsr 175c0 <__divsf3>
   16a18:	|  |     |   addq.l #8,sp
   16a1a:	|  |     |   move.l 20(sp),-(sp)
   16a1e:	|  |     |   move.l d0,-(sp)
   16a20:	|  |     |   jsr 174c6 <__addsf3>
   16a26:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16a28:	|  |     |   move.l d0,-(sp)
   16a2a:	|  |     |   move.l d3,-(sp)
   16a2c:	|  |     |   jsr 17930 <__ltsf2>
   16a32:	|  |     |   addq.l #8,sp
   16a34:	|  |     |   tst.l d0
   16a36:	|  |     +-- bge.s 16a4c <pointInFloorPolygon+0x208>

			c = !c;
   16a38:	|  |     |   tst.l 24(sp)
   16a3c:	|  |     |   seq d0
   16a3e:	|  |     |   neg.b d0
   16a40:	|  |     |   move.b d0,d0
   16a42:	|  |     |   andi.l #255,d0
   16a48:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16a4c:	|  |     '-> move.l 32(sp),d0
   16a50:	|  |         move.l d0,d1
   16a52:	|  |         addq.l #1,d1
   16a54:	|  |         move.l d1,32(sp)
   16a58:	|  |         move.l d0,28(sp)
   16a5c:	|  '-------> movea.l 40(sp),a0
   16a60:	|            move.l (a0),d0
   16a62:	|            cmp.l 32(sp),d0
   16a66:	'----------- bgt.w 16866 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16a6a:	             tst.l 24(sp)
   16a6e:	             sne d0
   16a70:	             neg.b d0
   16a72:	             move.b d0,d0
   16a74:	             andi.w #255,d0
}
   16a78:	             move.l (sp)+,d2
   16a7a:	             move.l (sp)+,d3
   16a7c:	             lea 28(sp),sp
   16a80:	             rts

00016a82 <setFloor>:

BOOL setFloor (int fileNum) {
   16a82:	                               lea -132(sp),sp
   16a86:	                               move.l a6,-(sp)
   16a88:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16a8a:	                               jsr 166ea <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16a90:	                               move.l 144(sp),-(sp)
   16a94:	                               jsr 771e <openFileFromNum>
   16a9a:	                               addq.l #4,sp
   16a9c:	                               tst.l d0
   16a9e:	                           ,-- bne.s 16aa6 <setFloor+0x24>
   16aa0:	                           |   clr.w d0
   16aa2:	,--------------------------|-- bra.w 171f2 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16aa6:	|                          '-> movea.l 1cc3e <currentFloor>,a0
   16aac:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16ab0:	|                              move.l 1cb0e <bigDataFile>,118(sp)
   16ab8:	|                              move.l 1cb2e <DOSBase>,d0
   16abe:	|                              movea.l d0,a6
   16ac0:	|                              move.l 118(sp),d1
   16ac4:	|                              jsr -306(a6)
   16ac8:	|                              move.l d0,114(sp)
   16acc:	|                              move.l 114(sp),d0
   16ad0:	|                              movea.l 1cc3e <currentFloor>,a0
   16ad6:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16ada:	|                              movea.l 1cc3e <currentFloor>,a0
   16ae0:	|                              move.l 8(a0),d0
   16ae4:	|                              lsl.l #3,d0
   16ae6:	|                              move.l d0,110(sp)
   16aea:	|                              clr.l 106(sp)
   16aee:	|                              move.l 1cb26 <SysBase>,d0
   16af4:	|                              movea.l d0,a6
   16af6:	|                              move.l 110(sp),d0
   16afa:	|                              move.l 106(sp),d1
   16afe:	|                              jsr -684(a6)
   16b02:	|                              move.l d0,102(sp)
   16b06:	|                              move.l 102(sp),d0
   16b0a:	|                              movea.l 1cc3e <currentFloor>,a0
   16b10:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16b14:	|                              movea.l 1cc3e <currentFloor>,a0
   16b1a:	|                              move.l 12(a0),d0
   16b1e:	|                          ,-- bne.s 16b34 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16b20:	|                          |   pea 1a28b <talk.c.490538ff+0x87c>
   16b26:	|                          |   jsr 172d8 <KPrintF>
   16b2c:	|                          |   addq.l #4,sp
		return FALSE;
   16b2e:	|                          |   clr.w d0
   16b30:	+--------------------------|-- bra.w 171f2 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16b34:	|                          '-> clr.l 136(sp)
   16b38:	|                    ,-------- bra.w 16c50 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16b3c:	|                 ,--|-------> move.l 1cb0e <bigDataFile>,26(sp)
   16b44:	|                 |  |         move.l 1cb2e <DOSBase>,d0
   16b4a:	|                 |  |         movea.l d0,a6
   16b4c:	|                 |  |         move.l 26(sp),d1
   16b50:	|                 |  |         jsr -306(a6)
   16b54:	|                 |  |         move.l d0,22(sp)
   16b58:	|                 |  |         move.l 22(sp),d1
   16b5c:	|                 |  |         movea.l 1cc3e <currentFloor>,a0
   16b62:	|                 |  |         movea.l 12(a0),a0
   16b66:	|                 |  |         move.l 136(sp),d0
   16b6a:	|                 |  |         lsl.l #3,d0
   16b6c:	|                 |  |         adda.l d0,a0
   16b6e:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16b70:	|                 |  |         movea.l 1cc3e <currentFloor>,a0
   16b76:	|                 |  |         move.l 12(a0),d1
   16b7a:	|                 |  |         move.l 136(sp),d0
   16b7e:	|                 |  |         lsl.l #3,d0
   16b80:	|                 |  |         movea.l d1,a0
   16b82:	|                 |  |         adda.l d0,a0
   16b84:	|                 |  |         move.l (a0),d0
   16b86:	|                 |  |         add.l d0,d0
   16b88:	|                 |  |         add.l d0,d0
   16b8a:	|                 |  |         move.l d0,18(sp)
   16b8e:	|                 |  |         clr.l 14(sp)
   16b92:	|                 |  |         move.l 1cb26 <SysBase>,d0
   16b98:	|                 |  |         movea.l d0,a6
   16b9a:	|                 |  |         move.l 18(sp),d0
   16b9e:	|                 |  |         move.l 14(sp),d1
   16ba2:	|                 |  |         jsr -684(a6)
   16ba6:	|                 |  |         move.l d0,10(sp)
   16baa:	|                 |  |         move.l 10(sp),d1
   16bae:	|                 |  |         movea.l 1cc3e <currentFloor>,a0
   16bb4:	|                 |  |         movea.l 12(a0),a0
   16bb8:	|                 |  |         move.l 136(sp),d0
   16bbc:	|                 |  |         lsl.l #3,d0
   16bbe:	|                 |  |         adda.l d0,a0
   16bc0:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16bc4:	|                 |  |         movea.l 1cc3e <currentFloor>,a0
   16bca:	|                 |  |         move.l 12(a0),d1
   16bce:	|                 |  |         move.l 136(sp),d0
   16bd2:	|                 |  |         lsl.l #3,d0
   16bd4:	|                 |  |         movea.l d1,a0
   16bd6:	|                 |  |         adda.l d0,a0
   16bd8:	|                 |  |         move.l 4(a0),d0
   16bdc:	|                 |  |     ,-- bne.s 16bf2 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16bde:	|                 |  |     |   pea 1a28b <talk.c.490538ff+0x87c>
   16be4:	|                 |  |     |   jsr 172d8 <KPrintF>
   16bea:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16bec:	|                 |  |     |   clr.w d0
   16bee:	+-----------------|--|-----|-- bra.w 171f2 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16bf2:	|                 |  |     '-> clr.l 132(sp)
   16bf6:	|                 |  |     ,-- bra.s 16c30 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16bf8:	|                 |  |  ,--|-> move.l 1cb0e <bigDataFile>,d1
   16bfe:	|                 |  |  |  |   movea.l 1cc3e <currentFloor>,a0
   16c04:	|                 |  |  |  |   movea.l 12(a0),a0
   16c08:	|                 |  |  |  |   move.l 136(sp),d0
   16c0c:	|                 |  |  |  |   lsl.l #3,d0
   16c0e:	|                 |  |  |  |   adda.l d0,a0
   16c10:	|                 |  |  |  |   movea.l 4(a0),a0
   16c14:	|                 |  |  |  |   move.l 132(sp),d0
   16c18:	|                 |  |  |  |   add.l d0,d0
   16c1a:	|                 |  |  |  |   add.l d0,d0
   16c1c:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16c20:	|                 |  |  |  |   move.l d1,-(sp)
   16c22:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16c28:	|                 |  |  |  |   addq.l #4,sp
   16c2a:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16c2c:	|                 |  |  |  |   addq.l #1,132(sp)
   16c30:	|                 |  |  |  '-> movea.l 1cc3e <currentFloor>,a0
   16c36:	|                 |  |  |      move.l 12(a0),d1
   16c3a:	|                 |  |  |      move.l 136(sp),d0
   16c3e:	|                 |  |  |      lsl.l #3,d0
   16c40:	|                 |  |  |      movea.l d1,a0
   16c42:	|                 |  |  |      adda.l d0,a0
   16c44:	|                 |  |  |      move.l (a0),d0
   16c46:	|                 |  |  |      cmp.l 132(sp),d0
   16c4a:	|                 |  |  '----- bgt.s 16bf8 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16c4c:	|                 |  |         addq.l #1,136(sp)
   16c50:	|                 |  '-------> movea.l 1cc3e <currentFloor>,a0
   16c56:	|                 |            move.l 8(a0),d0
   16c5a:	|                 |            cmp.l 136(sp),d0
   16c5e:	|                 '----------- bgt.w 16b3c <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16c62:	|                              move.l 1cb0e <bigDataFile>,d0
   16c68:	|                              move.l d0,-(sp)
   16c6a:	|                              jsr 6bc <get2bytes>
   16c70:	|                              addq.l #4,sp
   16c72:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16c76:	|                              move.l 136(sp),d0
   16c7a:	|                              lsl.l #3,d0
   16c7c:	|                              move.l d0,98(sp)
   16c80:	|                              clr.l 94(sp)
   16c84:	|                              move.l 1cb26 <SysBase>,d0
   16c8a:	|                              movea.l d0,a6
   16c8c:	|                              move.l 98(sp),d0
   16c90:	|                              move.l 94(sp),d1
   16c94:	|                              jsr -684(a6)
   16c98:	|                              move.l d0,90(sp)
   16c9c:	|                              move.l 90(sp),d0
   16ca0:	|                              movea.l 1cc3e <currentFloor>,a0
   16ca6:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16caa:	|                              movea.l 1cc3e <currentFloor>,a0
   16cb0:	|                              move.l 4(a0),d0
   16cb4:	|                          ,-- bne.s 16cca <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16cb6:	|                          |   pea 1a28b <talk.c.490538ff+0x87c>
   16cbc:	|                          |   jsr 172d8 <KPrintF>
   16cc2:	|                          |   addq.l #4,sp
		return FALSE;
   16cc4:	|                          |   clr.w d0
   16cc6:	+--------------------------|-- bra.w 171f2 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16cca:	|                          '-> clr.l 132(sp)
   16cce:	|                          ,-- bra.s 16d22 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16cd0:	|                       ,--|-> move.l 1cb0e <bigDataFile>,d1
   16cd6:	|                       |  |   movea.l 1cc3e <currentFloor>,a0
   16cdc:	|                       |  |   movea.l 4(a0),a0
   16ce0:	|                       |  |   move.l 132(sp),d0
   16ce4:	|                       |  |   lsl.l #3,d0
   16ce6:	|                       |  |   lea (0,a0,d0.l),a2
   16cea:	|                       |  |   move.l d1,-(sp)
   16cec:	|                       |  |   jsr 6bc <get2bytes>
   16cf2:	|                       |  |   addq.l #4,sp
   16cf4:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16cf6:	|                       |  |   move.l 1cb0e <bigDataFile>,d1
   16cfc:	|                       |  |   movea.l 1cc3e <currentFloor>,a0
   16d02:	|                       |  |   movea.l 4(a0),a0
   16d06:	|                       |  |   move.l 132(sp),d0
   16d0a:	|                       |  |   lsl.l #3,d0
   16d0c:	|                       |  |   lea (0,a0,d0.l),a2
   16d10:	|                       |  |   move.l d1,-(sp)
   16d12:	|                       |  |   jsr 6bc <get2bytes>
   16d18:	|                       |  |   addq.l #4,sp
   16d1a:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16d1e:	|                       |  |   addq.l #1,132(sp)
   16d22:	|                       |  '-> move.l 132(sp),d0
   16d26:	|                       |      cmp.l 136(sp),d0
   16d2a:	|                       '----- blt.s 16cd0 <setFloor+0x24e>
	}

	finishAccess ();
   16d2c:	|                              jsr 7616 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16d32:	|                              movea.l 1cc3e <currentFloor>,a0
   16d38:	|                              move.l 8(a0),d0
   16d3c:	|                              add.l d0,d0
   16d3e:	|                              add.l d0,d0
   16d40:	|                              move.l d0,86(sp)
   16d44:	|                              clr.l 82(sp)
   16d48:	|                              move.l 1cb26 <SysBase>,d0
   16d4e:	|                              movea.l d0,a6
   16d50:	|                              move.l 86(sp),d0
   16d54:	|                              move.l 82(sp),d1
   16d58:	|                              jsr -684(a6)
   16d5c:	|                              move.l d0,78(sp)
   16d60:	|                              move.l 78(sp),d0
   16d64:	|                              movea.l 1cc3e <currentFloor>,a0
   16d6a:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16d6e:	|                              movea.l 1cc3e <currentFloor>,a0
   16d74:	|                              move.l 8(a0),d0
   16d78:	|                              add.l d0,d0
   16d7a:	|                              add.l d0,d0
   16d7c:	|                              move.l d0,74(sp)
   16d80:	|                              clr.l 70(sp)
   16d84:	|                              move.l 1cb26 <SysBase>,d0
   16d8a:	|                              movea.l d0,a6
   16d8c:	|                              move.l 74(sp),d0
   16d90:	|                              move.l 70(sp),d1
   16d94:	|                              jsr -684(a6)
   16d98:	|                              move.l d0,66(sp)
   16d9c:	|                              move.l 66(sp),d0
   16da0:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16da4:	|                              movea.l 1cc3e <currentFloor>,a0
   16daa:	|                              move.l 16(a0),d0
   16dae:	|                          ,-- bne.s 16dc4 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16db0:	|                          |   pea 1a28b <talk.c.490538ff+0x87c>
   16db6:	|                          |   jsr 172d8 <KPrintF>
   16dbc:	|                          |   addq.l #4,sp
		return FALSE;
   16dbe:	|                          |   clr.w d0
   16dc0:	+--------------------------|-- bra.w 171f2 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16dc4:	|                          '-> clr.l 136(sp)
   16dc8:	|                    ,-------- bra.w 16eec <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16dcc:	|                 ,--|-------> movea.l 1cc3e <currentFloor>,a0
   16dd2:	|                 |  |         move.l 8(a0),d0
   16dd6:	|                 |  |         add.l d0,d0
   16dd8:	|                 |  |         add.l d0,d0
   16dda:	|                 |  |         move.l d0,50(sp)
   16dde:	|                 |  |         clr.l 46(sp)
   16de2:	|                 |  |         move.l 1cb26 <SysBase>,d0
   16de8:	|                 |  |         movea.l d0,a6
   16dea:	|                 |  |         move.l 50(sp),d0
   16dee:	|                 |  |         move.l 46(sp),d1
   16df2:	|                 |  |         jsr -684(a6)
   16df6:	|                 |  |         move.l d0,42(sp)
   16dfa:	|                 |  |         move.l 42(sp),d0
   16dfe:	|                 |  |         movea.l 1cc3e <currentFloor>,a0
   16e04:	|                 |  |         movea.l 16(a0),a0
   16e08:	|                 |  |         move.l 136(sp),d1
   16e0c:	|                 |  |         add.l d1,d1
   16e0e:	|                 |  |         add.l d1,d1
   16e10:	|                 |  |         adda.l d1,a0
   16e12:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16e14:	|                 |  |         movea.l 1cc3e <currentFloor>,a0
   16e1a:	|                 |  |         move.l 8(a0),d0
   16e1e:	|                 |  |         add.l d0,d0
   16e20:	|                 |  |         add.l d0,d0
   16e22:	|                 |  |         move.l d0,38(sp)
   16e26:	|                 |  |         clr.l 34(sp)
   16e2a:	|                 |  |         move.l 1cb26 <SysBase>,d0
   16e30:	|                 |  |         movea.l d0,a6
   16e32:	|                 |  |         move.l 38(sp),d0
   16e36:	|                 |  |         move.l 34(sp),d1
   16e3a:	|                 |  |         jsr -684(a6)
   16e3e:	|                 |  |         move.l d0,30(sp)
   16e42:	|                 |  |         move.l 30(sp),d1
   16e46:	|                 |  |         move.l 136(sp),d0
   16e4a:	|                 |  |         add.l d0,d0
   16e4c:	|                 |  |         add.l d0,d0
   16e4e:	|                 |  |         movea.l 62(sp),a0
   16e52:	|                 |  |         adda.l d0,a0
   16e54:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16e56:	|                 |  |         movea.l 1cc3e <currentFloor>,a0
   16e5c:	|                 |  |         move.l 16(a0),d1
   16e60:	|                 |  |         move.l 136(sp),d0
   16e64:	|                 |  |         add.l d0,d0
   16e66:	|                 |  |         add.l d0,d0
   16e68:	|                 |  |         movea.l d1,a0
   16e6a:	|                 |  |         adda.l d0,a0
   16e6c:	|                 |  |         move.l (a0),d0
   16e6e:	|                 |  |     ,-- bne.s 16e84 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16e70:	|                 |  |     |   pea 1a28b <talk.c.490538ff+0x87c>
   16e76:	|                 |  |     |   jsr 172d8 <KPrintF>
   16e7c:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16e7e:	|                 |  |     |   clr.w d0
   16e80:	+-----------------|--|-----|-- bra.w 171f2 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e84:	|                 |  |     '-> clr.l 132(sp)
   16e88:	|                 |  |     ,-- bra.s 16ed8 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16e8a:	|                 |  |  ,--|-> movea.l 1cc3e <currentFloor>,a0
   16e90:	|                 |  |  |  |   move.l 16(a0),d1
   16e94:	|                 |  |  |  |   move.l 136(sp),d0
   16e98:	|                 |  |  |  |   add.l d0,d0
   16e9a:	|                 |  |  |  |   add.l d0,d0
   16e9c:	|                 |  |  |  |   movea.l d1,a0
   16e9e:	|                 |  |  |  |   adda.l d0,a0
   16ea0:	|                 |  |  |  |   move.l (a0),d1
   16ea2:	|                 |  |  |  |   move.l 132(sp),d0
   16ea6:	|                 |  |  |  |   add.l d0,d0
   16ea8:	|                 |  |  |  |   add.l d0,d0
   16eaa:	|                 |  |  |  |   movea.l d1,a0
   16eac:	|                 |  |  |  |   adda.l d0,a0
   16eae:	|                 |  |  |  |   moveq #-1,d1
   16eb0:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16eb2:	|                 |  |  |  |   move.l 136(sp),d0
   16eb6:	|                 |  |  |  |   add.l d0,d0
   16eb8:	|                 |  |  |  |   add.l d0,d0
   16eba:	|                 |  |  |  |   movea.l 62(sp),a0
   16ebe:	|                 |  |  |  |   adda.l d0,a0
   16ec0:	|                 |  |  |  |   move.l (a0),d1
   16ec2:	|                 |  |  |  |   move.l 132(sp),d0
   16ec6:	|                 |  |  |  |   add.l d0,d0
   16ec8:	|                 |  |  |  |   add.l d0,d0
   16eca:	|                 |  |  |  |   movea.l d1,a0
   16ecc:	|                 |  |  |  |   adda.l d0,a0
   16ece:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16ed4:	|                 |  |  |  |   addq.l #1,132(sp)
   16ed8:	|                 |  |  |  '-> movea.l 1cc3e <currentFloor>,a0
   16ede:	|                 |  |  |      move.l 8(a0),d0
   16ee2:	|                 |  |  |      cmp.l 132(sp),d0
   16ee6:	|                 |  |  '----- bgt.s 16e8a <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ee8:	|                 |  |         addq.l #1,136(sp)
   16eec:	|                 |  '-------> movea.l 1cc3e <currentFloor>,a0
   16ef2:	|                 |            move.l 8(a0),d0
   16ef6:	|                 |            cmp.l 136(sp),d0
   16efa:	|                 '----------- bgt.w 16dcc <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16efe:	|                              clr.l 136(sp)
   16f02:	|              ,-------------- bra.w 17008 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f06:	|           ,--|-------------> clr.l 132(sp)
   16f0a:	|           |  |     ,-------- bra.w 16ff2 <setFloor+0x570>
			if (i != j) {
   16f0e:	|           |  |  ,--|-------> move.l 136(sp),d0
   16f12:	|           |  |  |  |         cmp.l 132(sp),d0
   16f16:	|           |  |  |  |     ,-- beq.w 16fa8 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16f1a:	|           |  |  |  |     |   movea.l 1cc3e <currentFloor>,a0
   16f20:	|           |  |  |  |     |   move.l 12(a0),d1
   16f24:	|           |  |  |  |     |   move.l 132(sp),d0
   16f28:	|           |  |  |  |     |   lsl.l #3,d0
   16f2a:	|           |  |  |  |     |   movea.l d1,a1
   16f2c:	|           |  |  |  |     |   adda.l d0,a1
   16f2e:	|           |  |  |  |     |   movea.l 1cc3e <currentFloor>,a0
   16f34:	|           |  |  |  |     |   move.l 12(a0),d1
   16f38:	|           |  |  |  |     |   move.l 136(sp),d0
   16f3c:	|           |  |  |  |     |   lsl.l #3,d0
   16f3e:	|           |  |  |  |     |   movea.l d1,a0
   16f40:	|           |  |  |  |     |   adda.l d0,a0
   16f42:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16f46:	|           |  |  |  |     |   move.l (a1),-(sp)
   16f48:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16f4c:	|           |  |  |  |     |   move.l (a0),-(sp)
   16f4e:	|           |  |  |  |     |   jsr 167da <polysShareSide>
   16f54:	|           |  |  |  |     |   lea 16(sp),sp
   16f58:	|           |  |  |  |     |   tst.w d0
   16f5a:	|           |  |  |  |  ,--|-- beq.w 16fee <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16f5e:	|           |  |  |  |  |  |   movea.l 1cc3e <currentFloor>,a0
   16f64:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16f68:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16f6c:	|           |  |  |  |  |  |   add.l d0,d0
   16f6e:	|           |  |  |  |  |  |   add.l d0,d0
   16f70:	|           |  |  |  |  |  |   movea.l d1,a0
   16f72:	|           |  |  |  |  |  |   adda.l d0,a0
   16f74:	|           |  |  |  |  |  |   move.l (a0),d1
   16f76:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16f7a:	|           |  |  |  |  |  |   add.l d0,d0
   16f7c:	|           |  |  |  |  |  |   add.l d0,d0
   16f7e:	|           |  |  |  |  |  |   movea.l d1,a0
   16f80:	|           |  |  |  |  |  |   adda.l d0,a0
   16f82:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16f86:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16f8a:	|           |  |  |  |  |  |   add.l d0,d0
   16f8c:	|           |  |  |  |  |  |   add.l d0,d0
   16f8e:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16f92:	|           |  |  |  |  |  |   adda.l d0,a0
   16f94:	|           |  |  |  |  |  |   move.l (a0),d1
   16f96:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16f9a:	|           |  |  |  |  |  |   add.l d0,d0
   16f9c:	|           |  |  |  |  |  |   add.l d0,d0
   16f9e:	|           |  |  |  |  |  |   movea.l d1,a0
   16fa0:	|           |  |  |  |  |  |   adda.l d0,a0
   16fa2:	|           |  |  |  |  |  |   moveq #1,d1
   16fa4:	|           |  |  |  |  |  |   move.l d1,(a0)
   16fa6:	|           |  |  |  |  +--|-- bra.s 16fee <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16fa8:	|           |  |  |  |  |  '-> movea.l 1cc3e <currentFloor>,a0
   16fae:	|           |  |  |  |  |      move.l 16(a0),d1
   16fb2:	|           |  |  |  |  |      move.l 136(sp),d0
   16fb6:	|           |  |  |  |  |      add.l d0,d0
   16fb8:	|           |  |  |  |  |      add.l d0,d0
   16fba:	|           |  |  |  |  |      movea.l d1,a0
   16fbc:	|           |  |  |  |  |      adda.l d0,a0
   16fbe:	|           |  |  |  |  |      move.l (a0),d1
   16fc0:	|           |  |  |  |  |      move.l 132(sp),d0
   16fc4:	|           |  |  |  |  |      add.l d0,d0
   16fc6:	|           |  |  |  |  |      add.l d0,d0
   16fc8:	|           |  |  |  |  |      movea.l d1,a0
   16fca:	|           |  |  |  |  |      adda.l d0,a0
   16fcc:	|           |  |  |  |  |      moveq #-2,d0
   16fce:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16fd0:	|           |  |  |  |  |      move.l 136(sp),d0
   16fd4:	|           |  |  |  |  |      add.l d0,d0
   16fd6:	|           |  |  |  |  |      add.l d0,d0
   16fd8:	|           |  |  |  |  |      movea.l 62(sp),a0
   16fdc:	|           |  |  |  |  |      adda.l d0,a0
   16fde:	|           |  |  |  |  |      move.l (a0),d1
   16fe0:	|           |  |  |  |  |      move.l 132(sp),d0
   16fe4:	|           |  |  |  |  |      add.l d0,d0
   16fe6:	|           |  |  |  |  |      add.l d0,d0
   16fe8:	|           |  |  |  |  |      movea.l d1,a0
   16fea:	|           |  |  |  |  |      adda.l d0,a0
   16fec:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16fee:	|           |  |  |  |  '----> addq.l #1,132(sp)
   16ff2:	|           |  |  |  '-------> movea.l 1cc3e <currentFloor>,a0
   16ff8:	|           |  |  |            move.l 8(a0),d0
   16ffc:	|           |  |  |            cmp.l 132(sp),d0
   17000:	|           |  |  '----------- bgt.w 16f0e <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17004:	|           |  |               addq.l #1,136(sp)
   17008:	|           |  '-------------> movea.l 1cc3e <currentFloor>,a0
   1700e:	|           |                  move.l 8(a0),d0
   17012:	|           |                  cmp.l 136(sp),d0
   17016:	|           '----------------- bgt.w 16f06 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   1701a:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   1701e:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   17022:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17026:	|  |                           clr.l 136(sp)
   1702a:	|  |     ,-------------------- bra.w 17180 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1702e:	|  |  ,--|-------------------> clr.l 132(sp)
   17032:	|  |  |  |     ,-------------- bra.w 1716a <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   17036:	|  |  |  |  ,--|-------------> movea.l 1cc3e <currentFloor>,a0
   1703c:	|  |  |  |  |  |               move.l 16(a0),d1
   17040:	|  |  |  |  |  |               move.l 136(sp),d0
   17044:	|  |  |  |  |  |               add.l d0,d0
   17046:	|  |  |  |  |  |               add.l d0,d0
   17048:	|  |  |  |  |  |               movea.l d1,a0
   1704a:	|  |  |  |  |  |               adda.l d0,a0
   1704c:	|  |  |  |  |  |               move.l (a0),d1
   1704e:	|  |  |  |  |  |               move.l 132(sp),d0
   17052:	|  |  |  |  |  |               add.l d0,d0
   17054:	|  |  |  |  |  |               add.l d0,d0
   17056:	|  |  |  |  |  |               movea.l d1,a0
   17058:	|  |  |  |  |  |               adda.l d0,a0
   1705a:	|  |  |  |  |  |               move.l (a0),d0
   1705c:	|  |  |  |  |  |               moveq #-1,d1
   1705e:	|  |  |  |  |  |               cmp.l d0,d1
   17060:	|  |  |  |  |  |  ,----------- bne.w 17166 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   17064:	|  |  |  |  |  |  |            clr.l 122(sp)
   17068:	|  |  |  |  |  |  |     ,----- bra.w 17154 <setFloor+0x6d2>
						if (d != i && d != j) {
   1706c:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   17070:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   17074:	|  |  |  |  |  |  |  |  |  ,-- beq.w 17150 <setFloor+0x6ce>
   17078:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   1707c:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   17080:	|  |  |  |  |  |  |  |  |  +-- beq.w 17150 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   17084:	|  |  |  |  |  |  |  |  |  |   movea.l 1cc3e <currentFloor>,a0
   1708a:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1708e:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17092:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17094:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17096:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17098:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1709a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1709c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   170a0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170a2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170a4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   170a6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170a8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   170aa:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   170ae:	|  |  |  |  |  |  |  |  |  +-- bne.w 17150 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   170b2:	|  |  |  |  |  |  |  |  |  |   movea.l 1cc3e <currentFloor>,a0
   170b8:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   170bc:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   170c0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170c2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170c4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   170c6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170c8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   170ca:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   170ce:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170d0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170d2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   170d4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170d6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   170d8:	|  |  |  |  |  |  |  |  |  +-- bmi.s 17150 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   170da:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   170de:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170e0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170e2:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   170e6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170e8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   170ea:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   170ee:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170f0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170f2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   170f4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170f6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   170f8:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   170fc:	|  |  |  |  |  |  |  |  |  +-- bgt.s 17150 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   170fe:	|  |  |  |  |  |  |  |  |  |   movea.l 1cc3e <currentFloor>,a0
   17104:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17108:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1710c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1710e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17110:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17112:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17114:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17116:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1711a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1711c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1711e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17120:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17122:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   17126:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1712a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1712c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1712e:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17132:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17134:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17136:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1713a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1713c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1713e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17140:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17142:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   17146:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   17148:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   1714a:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   17150:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   17154:	|  |  |  |  |  |  |  |  '----> movea.l 1cc3e <currentFloor>,a0
   1715a:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   1715e:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   17162:	|  |  |  |  |  |  |  '-------- bgt.w 1706c <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17166:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   1716a:	|  |  |  |  |  '-------------> movea.l 1cc3e <currentFloor>,a0
   17170:	|  |  |  |  |                  move.l 8(a0),d0
   17174:	|  |  |  |  |                  cmp.l 132(sp),d0
   17178:	|  |  |  |  '----------------- bgt.w 17036 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1717c:	|  |  |  |                     addq.l #1,136(sp)
   17180:	|  |  |  '-------------------> movea.l 1cc3e <currentFloor>,a0
   17186:	|  |  |                        move.l 8(a0),d0
   1718a:	|  |  |                        cmp.l 136(sp),d0
   1718e:	|  |  '----------------------- bgt.w 1702e <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   17192:	|  |                           tst.w 130(sp)
   17196:	|  '-------------------------- bne.w 1701e <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1719a:	|                              clr.l 136(sp)
   1719e:	|                          ,-- bra.s 171c6 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   171a0:	|                       ,--|-> move.l 136(sp),d0
   171a4:	|                       |  |   add.l d0,d0
   171a6:	|                       |  |   add.l d0,d0
   171a8:	|                       |  |   movea.l 62(sp),a0
   171ac:	|                       |  |   adda.l d0,a0
   171ae:	|                       |  |   move.l (a0),54(sp)
   171b2:	|                       |  |   move.l 1cb26 <SysBase>,d0
   171b8:	|                       |  |   movea.l d0,a6
   171ba:	|                       |  |   movea.l 54(sp),a1
   171be:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   171c2:	|                       |  |   addq.l #1,136(sp)
   171c6:	|                       |  '-> movea.l 1cc3e <currentFloor>,a0
   171cc:	|                       |      move.l 8(a0),d0
   171d0:	|                       |      cmp.l 136(sp),d0
   171d4:	|                       '----- bgt.s 171a0 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   171d6:	|                              move.l 62(sp),58(sp)
   171dc:	|                              move.l 1cb26 <SysBase>,d0
   171e2:	|                              movea.l d0,a6
   171e4:	|                              movea.l 58(sp),a1
   171e8:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   171ec:	|                              clr.l 62(sp)

	return TRUE;
   171f0:	|                              moveq #1,d0
}
   171f2:	'----------------------------> movea.l (sp)+,a2
   171f4:	                               movea.l (sp)+,a6
   171f6:	                               lea 132(sp),sp
   171fa:	                               rts

000171fc <setFloorNull>:

void setFloorNull () {
	killFloor ();
   171fc:	jsr 166ea <killFloor>
	noFloor ();
   17202:	jsr 165f2 <noFloor>
   17208:	nop
   1720a:	rts

0001720c <WaitVbl>:
void WaitVbl() {
   1720c:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1720e:	   ,-> movea.l #14675972,a0
   17214:	   |   move.l (a0),d0
   17216:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   17218:	   |   move.l (sp),d0
   1721a:	   |   andi.l #130816,d0
   17220:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   17222:	   |   move.l (sp),d0
   17224:	   |   cmpi.l #76800,d0
   1722a:	   '-- beq.s 1720e <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1722c:	,----> movea.l #14675972,a0
   17232:	|      move.l (a0),d0
   17234:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   17238:	|      move.l 4(sp),d0
   1723c:	|      andi.l #130816,d0
   17242:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   17246:	|      move.l 4(sp),d0
   1724a:	|      cmpi.l #76800,d0
   17250:	|  ,-- beq.s 17254 <WaitVbl+0x48>
	while (1) {
   17252:	'--|-- bra.s 1722c <WaitVbl+0x20>
			break;
   17254:	   '-> nop
}
   17256:	       nop
   17258:	       addq.l #8,sp
   1725a:	       rts

0001725c <memset>:
void* memset(void *dest, int val, unsigned long len) {
   1725c:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   1725e:	       move.l 8(sp),(sp)
	while(len-- > 0)
   17262:	   ,-- bra.s 17274 <memset+0x18>
		*ptr++ = val;
   17264:	,--|-> move.l (sp),d0
   17266:	|  |   move.l d0,d1
   17268:	|  |   addq.l #1,d1
   1726a:	|  |   move.l d1,(sp)
   1726c:	|  |   move.l 12(sp),d1
   17270:	|  |   movea.l d0,a0
   17272:	|  |   move.b d1,(a0)
	while(len-- > 0)
   17274:	|  '-> move.l 16(sp),d0
   17278:	|      move.l d0,d1
   1727a:	|      subq.l #1,d1
   1727c:	|      move.l d1,16(sp)
   17280:	|      tst.l d0
   17282:	'----- bne.s 17264 <memset+0x8>
	return dest;
   17284:	       move.l 8(sp),d0
}
   17288:	       addq.l #4,sp
   1728a:	       rts

0001728c <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   1728c:	       subq.l #8,sp
   1728e:	       move.l d2,-(sp)
	char *d = (char *)dest;
   17290:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   17296:	       move.l 20(sp),4(sp)
	while(len--)
   1729c:	   ,-- bra.s 172be <memcpy+0x32>
		*d++ = *s++;
   1729e:	,--|-> move.l 4(sp),d1
   172a2:	|  |   move.l d1,d0
   172a4:	|  |   addq.l #1,d0
   172a6:	|  |   move.l d0,4(sp)
   172aa:	|  |   move.l 8(sp),d0
   172ae:	|  |   move.l d0,d2
   172b0:	|  |   addq.l #1,d2
   172b2:	|  |   move.l d2,8(sp)
   172b6:	|  |   movea.l d1,a0
   172b8:	|  |   move.b (a0),d1
   172ba:	|  |   movea.l d0,a0
   172bc:	|  |   move.b d1,(a0)
	while(len--)
   172be:	|  '-> move.l 24(sp),d0
   172c2:	|      move.l d0,d1
   172c4:	|      subq.l #1,d1
   172c6:	|      move.l d1,24(sp)
   172ca:	|      tst.l d0
   172cc:	'----- bne.s 1729e <memcpy+0x12>
	return dest;
   172ce:	       move.l 16(sp),d0
}
   172d2:	       move.l (sp)+,d2
   172d4:	       addq.l #8,sp
   172d6:	       rts

000172d8 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   172d8:	       lea -128(sp),sp
   172dc:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   172e0:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4b1f>,d0
   172e6:	       cmpi.w #20153,d0
   172ea:	   ,-- beq.s 1730e <KPrintF+0x36>
   172ec:	   |   cmpi.w #-24562,d0
   172f0:	   +-- beq.s 1730e <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   172f2:	   |   movea.l 1cb26 <SysBase>,a6
   172f8:	   |   movea.l 144(sp),a0
   172fc:	   |   lea 148(sp),a1
   17300:	   |   lea 17d6c <KPutCharX>,a2
   17306:	   |   suba.l a3,a3
   17308:	   |   jsr -522(a6)
}
   1730c:	,--|-- bra.s 17338 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   1730e:	|  '-> movea.l 1cb26 <SysBase>,a6
   17314:	|      movea.l 144(sp),a0
   17318:	|      lea 148(sp),a1
   1731c:	|      lea 17d7a <PutChar>,a2
   17322:	|      lea 12(sp),a3
   17326:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   1732a:	|      move.l a3,-(sp)
   1732c:	|      pea 56 <_start+0x56>
   17330:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4b1f>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17336:	|      addq.l #8,sp
}
   17338:	'----> movem.l (sp)+,a2-a3/a6
   1733c:	       lea 128(sp),sp
   17340:	       rts

00017342 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   17342:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   17344:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   1734a:	       movea.l (sp),a0
   1734c:	       move.w (a0),d0
   1734e:	       cmpi.w #20153,d0
   17352:	   ,-- beq.s 1735e <debug_cmd+0x1c>
   17354:	   |   movea.l (sp),a0
   17356:	   |   move.w (a0),d0
   17358:	   |   cmpi.w #-24562,d0
   1735c:	,--|-- bne.s 1737c <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   1735e:	|  '-> move.l 20(sp),-(sp)
   17362:	|      move.l 20(sp),-(sp)
   17366:	|      move.l 20(sp),-(sp)
   1736a:	|      move.l 20(sp),-(sp)
   1736e:	|      pea 58 <_start+0x58>
   17372:	|      movea.l 20(sp),a0
   17376:	|      jsr (a0)
   17378:	|      lea 20(sp),sp
	}
}
   1737c:	'----> nop
   1737e:	       addq.l #4,sp
   17380:	       rts

00017382 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   17382:	       move.l d2,-(sp)
	while(*source && --num > 0)
   17384:	   ,-- bra.s 173a6 <my_strncpy+0x24>
		*destination++ = *source++;
   17386:	,--|-> move.l 12(sp),d1
   1738a:	|  |   move.l d1,d0
   1738c:	|  |   addq.l #1,d0
   1738e:	|  |   move.l d0,12(sp)
   17392:	|  |   move.l 8(sp),d0
   17396:	|  |   move.l d0,d2
   17398:	|  |   addq.l #1,d2
   1739a:	|  |   move.l d2,8(sp)
   1739e:	|  |   movea.l d1,a0
   173a0:	|  |   move.b (a0),d1
   173a2:	|  |   movea.l d0,a0
   173a4:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   173a6:	|  '-> movea.l 12(sp),a0
   173aa:	|      move.b (a0),d0
   173ac:	|  ,-- beq.s 173b4 <my_strncpy+0x32>
   173ae:	|  |   subq.l #1,16(sp)
   173b2:	'--|-- bne.s 17386 <my_strncpy+0x4>
	*destination = '\0';
   173b4:	   '-> movea.l 8(sp),a0
   173b8:	       clr.b (a0)
}
   173ba:	       nop
   173bc:	       move.l (sp)+,d2
   173be:	       rts

000173c0 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   173c0:	    lea -60(sp),sp
   173c4:	    movea.l 72(sp),a1
   173c8:	    movea.l 76(sp),a0
   173cc:	    move.l 80(sp),d1
   173d0:	    move.l 84(sp),d0
   173d4:	    movea.w a1,a1
   173d6:	    move.w a1,8(sp)
   173da:	    movea.w a0,a0
   173dc:	    move.w a0,6(sp)
   173e0:	    move.w d1,d1
   173e2:	    move.w d1,4(sp)
   173e6:	    move.w d0,d0
   173e8:	    move.w d0,2(sp)
	struct debug_resource resource = {
   173ec:	    lea 10(sp),a0
   173f0:	    clr.l (a0)
   173f2:	    addq.l #4,a0
   173f4:	    clr.l (a0)
   173f6:	    addq.l #4,a0
   173f8:	    clr.l (a0)
   173fa:	    addq.l #4,a0
   173fc:	    clr.l (a0)
   173fe:	    addq.l #4,a0
   17400:	    clr.l (a0)
   17402:	    addq.l #4,a0
   17404:	    clr.l (a0)
   17406:	    addq.l #4,a0
   17408:	    clr.l (a0)
   1740a:	    addq.l #4,a0
   1740c:	    clr.l (a0)
   1740e:	    addq.l #4,a0
   17410:	    clr.l (a0)
   17412:	    addq.l #4,a0
   17414:	    clr.l (a0)
   17416:	    addq.l #4,a0
   17418:	    clr.l (a0)
   1741a:	    addq.l #4,a0
   1741c:	    clr.l (a0)
   1741e:	    addq.l #4,a0
   17420:	    clr.w (a0)
   17422:	    addq.l #2,a0
		.address = (unsigned int)addr,
   17424:	    move.l 64(sp),d0
	struct debug_resource resource = {
   17428:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   1742c:	    move.w 8(sp),d0
   17430:	,-- bpl.s 17434 <debug_register_bitmap+0x74>
   17432:	|   addq.w #7,d0
   17434:	'-> asr.w #3,d0
   17436:	    movea.w d0,a0
   17438:	    movea.w 6(sp),a1
   1743c:	    move.l a1,-(sp)
   1743e:	    move.l a0,-(sp)
   17440:	    jsr 17c64 <__mulsi3>
   17446:	    addq.l #8,sp
   17448:	    movea.w 4(sp),a0
   1744c:	    move.l a0,-(sp)
   1744e:	    move.l d0,-(sp)
   17450:	    jsr 17c64 <__mulsi3>
   17456:	    addq.l #8,sp
	struct debug_resource resource = {
   17458:	    move.l d0,14(sp)
   1745c:	    move.w 2(sp),52(sp)
   17462:	    move.w 8(sp),54(sp)
   17468:	    move.w 6(sp),56(sp)
   1746e:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   17474:	    moveq #0,d0
   17476:	    move.w 2(sp),d0
   1747a:	    moveq #2,d1
   1747c:	    and.l d1,d0
   1747e:	,-- beq.s 1748a <debug_register_bitmap+0xca>
		resource.size *= 2;
   17480:	|   move.l 14(sp),d0
   17484:	|   add.l d0,d0
   17486:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   1748a:	'-> pea 20 <_start+0x20>
   1748e:	    move.l 72(sp),-(sp)
   17492:	    lea 18(sp),a0
   17496:	    move.l a0,d0
   17498:	    addq.l #8,d0
   1749a:	    move.l d0,-(sp)
   1749c:	    jsr 17382 <my_strncpy>
   174a2:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   174a6:	    lea 10(sp),a0
   174aa:	    clr.l -(sp)
   174ac:	    clr.l -(sp)
   174ae:	    move.l a0,-(sp)
   174b0:	    pea 4 <_start+0x4>
   174b4:	    jsr 17342 <debug_cmd>
   174ba:	    lea 16(sp),sp
}
   174be:	    nop
   174c0:	    lea 60(sp),sp
   174c4:	    rts

000174c6 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   174c6:	lea -12(sp),sp
   174ca:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   174cc:	move.l 20(sp),12(sp)
   174d2:	move.l 24(sp),8(sp)
   174d8:	move.l 1cb36 <MathIeeeSingBasBase>,d0
   174de:	movea.l d0,a6
   174e0:	move.l 12(sp),d0
   174e4:	move.l 8(sp),d1
   174e8:	jsr -66(a6)
   174ec:	move.l d0,4(sp)
   174f0:	move.l 4(sp),d0
}
   174f4:	movea.l (sp)+,a6
   174f6:	lea 12(sp),sp
   174fa:	rts

000174fc <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   174fc:	lea -32(sp),sp
   17500:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17504:	move.l 48(sp),36(sp)
   1750a:	move.l 52(sp),40(sp)
   17510:	move.l 56(sp),28(sp)
   17516:	move.l 60(sp),32(sp)
   1751c:	move.l 1cb3e <MathIeeeDoubBasBase>,d0
   17522:	movea.l d0,a6
   17524:	move.l 36(sp),d0
   17528:	move.l 40(sp),d1
   1752c:	move.l 28(sp),d2
   17530:	move.l 32(sp),d3
   17534:	jsr -66(a6)
   17538:	move.l d0,12(sp)
   1753c:	move.l d1,16(sp)
   17540:	move.l 12(sp),20(sp)
   17546:	move.l 16(sp),24(sp)
   1754c:	move.l 20(sp),d0
   17550:	move.l 24(sp),d1
}
   17554:	movem.l (sp)+,d2-d3/a6
   17558:	lea 32(sp),sp
   1755c:	rts

0001755e <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   1755e:	lea -32(sp),sp
   17562:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   17566:	move.l 48(sp),36(sp)
   1756c:	move.l 52(sp),40(sp)
   17572:	move.l 56(sp),28(sp)
   17578:	move.l 60(sp),32(sp)
   1757e:	move.l 1cb3e <MathIeeeDoubBasBase>,d0
   17584:	movea.l d0,a6
   17586:	move.l 36(sp),d0
   1758a:	move.l 40(sp),d1
   1758e:	move.l 28(sp),d2
   17592:	move.l 32(sp),d3
   17596:	jsr -84(a6)
   1759a:	move.l d0,12(sp)
   1759e:	move.l d1,16(sp)
   175a2:	move.l 12(sp),20(sp)
   175a8:	move.l 16(sp),24(sp)
   175ae:	move.l 20(sp),d0
   175b2:	move.l 24(sp),d1
}
   175b6:	movem.l (sp)+,d2-d3/a6
   175ba:	lea 32(sp),sp
   175be:	rts

000175c0 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   175c0:	lea -12(sp),sp
   175c4:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   175c6:	move.l 20(sp),12(sp)
   175cc:	move.l 24(sp),8(sp)
   175d2:	move.l 1cb36 <MathIeeeSingBasBase>,d0
   175d8:	movea.l d0,a6
   175da:	move.l 12(sp),d0
   175de:	move.l 8(sp),d1
   175e2:	jsr -84(a6)
   175e6:	move.l d0,4(sp)
   175ea:	move.l 4(sp),d0
}
   175ee:	movea.l (sp)+,a6
   175f0:	lea 12(sp),sp
   175f4:	rts

000175f6 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   175f6:	lea -12(sp),sp
   175fa:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   175fc:	move.l 20(sp),12(sp)
   17602:	move.l 24(sp),8(sp)
   17608:	move.l 1cb36 <MathIeeeSingBasBase>,d0
   1760e:	movea.l d0,a6
   17610:	move.l 12(sp),d0
   17614:	move.l 8(sp),d1
   17618:	jsr -42(a6)
   1761c:	move.l d0,4(sp)
   17620:	move.l 4(sp),d0
}
   17624:	movea.l (sp)+,a6
   17626:	lea 12(sp),sp
   1762a:	rts

0001762c <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   1762c:	lea -20(sp),sp
   17630:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   17632:	move.l 28(sp),20(sp)
   17638:	move.l 1cb42 <MathIeeeDoubTransBase>,d0
   1763e:	movea.l d0,a6
   17640:	move.l 20(sp),d0
   17644:	jsr -108(a6)
   17648:	move.l d0,4(sp)
   1764c:	move.l d1,8(sp)
   17650:	move.l 4(sp),12(sp)
   17656:	move.l 8(sp),16(sp)
   1765c:	move.l 12(sp),d0
   17660:	move.l 16(sp),d1
}
   17664:	movea.l (sp)+,a6
   17666:	lea 20(sp),sp
   1766a:	rts

0001766c <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   1766c:	lea -12(sp),sp
   17670:	move.l a6,-(sp)
	return IEEEDPFix(value);
   17672:	move.l 20(sp),8(sp)
   17678:	move.l 24(sp),12(sp)
   1767e:	move.l 1cb3e <MathIeeeDoubBasBase>,d0
   17684:	movea.l d0,a6
   17686:	move.l 8(sp),d0
   1768a:	move.l 12(sp),d1
   1768e:	jsr -30(a6)
   17692:	move.l d0,4(sp)
   17696:	move.l 4(sp),d0
}
   1769a:	movea.l (sp)+,a6
   1769c:	lea 12(sp),sp
   176a0:	rts

000176a2 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   176a2:	subq.l #8,sp
   176a4:	move.l a6,-(sp)
	return IEEESPFix(value);
   176a6:	move.l 16(sp),8(sp)
   176ac:	move.l 1cb36 <MathIeeeSingBasBase>,d0
   176b2:	movea.l d0,a6
   176b4:	move.l 8(sp),d0
   176b8:	jsr -30(a6)
   176bc:	move.l d0,4(sp)
   176c0:	move.l 4(sp),d0
}
   176c4:	movea.l (sp)+,a6
   176c6:	addq.l #8,sp
   176c8:	rts

000176ca <__floatsidf>:


DOUBLE __floatsidf (int i) {
   176ca:	lea -20(sp),sp
   176ce:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   176d0:	move.l 28(sp),20(sp)
   176d6:	move.l 1cb3e <MathIeeeDoubBasBase>,d0
   176dc:	movea.l d0,a6
   176de:	move.l 20(sp),d0
   176e2:	jsr -36(a6)
   176e6:	move.l d0,4(sp)
   176ea:	move.l d1,8(sp)
   176ee:	move.l 4(sp),12(sp)
   176f4:	move.l 8(sp),16(sp)
   176fa:	move.l 12(sp),d0
   176fe:	move.l 16(sp),d1
}
   17702:	movea.l (sp)+,a6
   17704:	lea 20(sp),sp
   17708:	rts

0001770a <__floatsisf>:

FLOAT __floatsisf(int i) {
   1770a:	subq.l #8,sp
   1770c:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1770e:	move.l 16(sp),8(sp)
   17714:	move.l 1cb36 <MathIeeeSingBasBase>,d0
   1771a:	movea.l d0,a6
   1771c:	move.l 8(sp),d0
   17720:	jsr -36(a6)
   17724:	move.l d0,4(sp)
   17728:	move.l 4(sp),d0
}
   1772c:	movea.l (sp)+,a6
   1772e:	addq.l #8,sp
   17730:	rts

00017732 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17732:	subq.l #8,sp
   17734:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17736:	move.l 16(sp),8(sp)
   1773c:	move.l 1cb36 <MathIeeeSingBasBase>,d0
   17742:	movea.l d0,a6
   17744:	move.l 8(sp),d0
   17748:	jsr -36(a6)
   1774c:	move.l d0,4(sp)
   17750:	move.l 4(sp),d0
}
   17754:	movea.l (sp)+,a6
   17756:	addq.l #8,sp
   17758:	rts

0001775a <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   1775a:	lea -32(sp),sp
   1775e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   17762:	move.l 48(sp),36(sp)
   17768:	move.l 52(sp),40(sp)
   1776e:	move.l 56(sp),28(sp)
   17774:	move.l 60(sp),32(sp)
   1777a:	move.l 1cb3e <MathIeeeDoubBasBase>,d0
   17780:	movea.l d0,a6
   17782:	move.l 36(sp),d0
   17786:	move.l 40(sp),d1
   1778a:	move.l 28(sp),d2
   1778e:	move.l 32(sp),d3
   17792:	jsr -78(a6)
   17796:	move.l d0,12(sp)
   1779a:	move.l d1,16(sp)
   1779e:	move.l 12(sp),20(sp)
   177a4:	move.l 16(sp),24(sp)
   177aa:	move.l 20(sp),d0
   177ae:	move.l 24(sp),d1
}
   177b2:	movem.l (sp)+,d2-d3/a6
   177b6:	lea 32(sp),sp
   177ba:	rts

000177bc <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   177bc:	lea -12(sp),sp
   177c0:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   177c2:	move.l 20(sp),12(sp)
   177c8:	move.l 24(sp),8(sp)
   177ce:	move.l 1cb36 <MathIeeeSingBasBase>,d0
   177d4:	movea.l d0,a6
   177d6:	move.l 12(sp),d0
   177da:	move.l 8(sp),d1
   177de:	jsr -78(a6)
   177e2:	move.l d0,4(sp)
   177e6:	move.l 4(sp),d0
}
   177ea:	movea.l (sp)+,a6
   177ec:	lea 12(sp),sp
   177f0:	rts

000177f2 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   177f2:	lea -12(sp),sp
   177f6:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   177f8:	move.l 20(sp),12(sp)
   177fe:	move.l 24(sp),8(sp)
   17804:	move.l 1cb36 <MathIeeeSingBasBase>,d0
   1780a:	movea.l d0,a6
   1780c:	move.l 12(sp),d0
   17810:	move.l 8(sp),d1
   17814:	jsr -42(a6)
   17818:	move.l d0,4(sp)
   1781c:	move.l 4(sp),d0
}
   17820:	movea.l (sp)+,a6
   17822:	lea 12(sp),sp
   17826:	rts

00017828 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   17828:	lea -20(sp),sp
   1782c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17830:	move.l 36(sp),24(sp)
   17836:	move.l 40(sp),28(sp)
   1783c:	move.l 44(sp),16(sp)
   17842:	move.l 48(sp),20(sp)
   17848:	move.l 1cb3e <MathIeeeDoubBasBase>,d0
   1784e:	movea.l d0,a6
   17850:	move.l 24(sp),d0
   17854:	move.l 28(sp),d1
   17858:	move.l 16(sp),d2
   1785c:	move.l 20(sp),d3
   17860:	jsr -42(a6)
   17864:	move.l d0,12(sp)
   17868:	move.l 12(sp),d0
}
   1786c:	movem.l (sp)+,d2-d3/a6
   17870:	lea 20(sp),sp
   17874:	rts

00017876 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17876:	lea -12(sp),sp
   1787a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1787c:	move.l 20(sp),12(sp)
   17882:	move.l 24(sp),8(sp)
   17888:	move.l 1cb36 <MathIeeeSingBasBase>,d0
   1788e:	movea.l d0,a6
   17890:	move.l 12(sp),d0
   17894:	move.l 8(sp),d1
   17898:	jsr -42(a6)
   1789c:	move.l d0,4(sp)
   178a0:	move.l 4(sp),d0
}
   178a4:	movea.l (sp)+,a6
   178a6:	lea 12(sp),sp
   178aa:	rts

000178ac <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   178ac:	lea -12(sp),sp
   178b0:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   178b2:	move.l 20(sp),12(sp)
   178b8:	move.l 24(sp),8(sp)
   178be:	move.l 1cb36 <MathIeeeSingBasBase>,d0
   178c4:	movea.l d0,a6
   178c6:	move.l 12(sp),d0
   178ca:	move.l 8(sp),d1
   178ce:	jsr -42(a6)
   178d2:	move.l d0,4(sp)
   178d6:	move.l 4(sp),d0
}
   178da:	movea.l (sp)+,a6
   178dc:	lea 12(sp),sp
   178e0:	rts

000178e2 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   178e2:	lea -20(sp),sp
   178e6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   178ea:	move.l 36(sp),24(sp)
   178f0:	move.l 40(sp),28(sp)
   178f6:	move.l 44(sp),16(sp)
   178fc:	move.l 48(sp),20(sp)
   17902:	move.l 1cb3e <MathIeeeDoubBasBase>,d0
   17908:	movea.l d0,a6
   1790a:	move.l 24(sp),d0
   1790e:	move.l 28(sp),d1
   17912:	move.l 16(sp),d2
   17916:	move.l 20(sp),d3
   1791a:	jsr -42(a6)
   1791e:	move.l d0,12(sp)
   17922:	move.l 12(sp),d0
}
   17926:	movem.l (sp)+,d2-d3/a6
   1792a:	lea 20(sp),sp
   1792e:	rts

00017930 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17930:	lea -12(sp),sp
   17934:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17936:	move.l 20(sp),12(sp)
   1793c:	move.l 24(sp),8(sp)
   17942:	move.l 1cb36 <MathIeeeSingBasBase>,d0
   17948:	movea.l d0,a6
   1794a:	move.l 12(sp),d0
   1794e:	move.l 8(sp),d1
   17952:	jsr -42(a6)
   17956:	move.l d0,4(sp)
   1795a:	move.l 4(sp),d0
}
   1795e:	movea.l (sp)+,a6
   17960:	lea 12(sp),sp
   17964:	rts

00017966 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17966:	lea -12(sp),sp
   1796a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1796c:	move.l 20(sp),12(sp)
   17972:	move.l 24(sp),8(sp)
   17978:	move.l 1cb36 <MathIeeeSingBasBase>,d0
   1797e:	movea.l d0,a6
   17980:	move.l 12(sp),d0
   17984:	move.l 8(sp),d1
   17988:	jsr -42(a6)
   1798c:	move.l d0,4(sp)
   17990:	move.l 4(sp),d0
}
   17994:	movea.l (sp)+,a6
   17996:	lea 12(sp),sp
   1799a:	rts

0001799c <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   1799c:	lea -32(sp),sp
   179a0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   179a4:	move.l 48(sp),36(sp)
   179aa:	move.l 52(sp),40(sp)
   179b0:	move.l 56(sp),28(sp)
   179b6:	move.l 60(sp),32(sp)
   179bc:	move.l 1cb3e <MathIeeeDoubBasBase>,d0
   179c2:	movea.l d0,a6
   179c4:	move.l 36(sp),d0
   179c8:	move.l 40(sp),d1
   179cc:	move.l 28(sp),d2
   179d0:	move.l 32(sp),d3
   179d4:	jsr -72(a6)
   179d8:	move.l d0,12(sp)
   179dc:	move.l d1,16(sp)
   179e0:	move.l 12(sp),20(sp)
   179e6:	move.l 16(sp),24(sp)
   179ec:	move.l 20(sp),d0
   179f0:	move.l 24(sp),d1
}
   179f4:	movem.l (sp)+,d2-d3/a6
   179f8:	lea 32(sp),sp
   179fc:	rts

000179fe <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   179fe:	lea -12(sp),sp
   17a02:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17a04:	move.l 20(sp),12(sp)
   17a0a:	move.l 24(sp),8(sp)
   17a10:	move.l 1cb36 <MathIeeeSingBasBase>,d0
   17a16:	movea.l d0,a6
   17a18:	move.l 12(sp),d0
   17a1c:	move.l 8(sp),d1
   17a20:	jsr -72(a6)
   17a24:	move.l d0,4(sp)
   17a28:	move.l 4(sp),d0
}
   17a2c:	movea.l (sp)+,a6
   17a2e:	lea 12(sp),sp
   17a32:	rts

00017a34 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17a34:	lea -12(sp),sp
   17a38:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17a3a:	move.l 20(sp),8(sp)
   17a40:	move.l 24(sp),12(sp)
   17a46:	move.l 1cb42 <MathIeeeDoubTransBase>,d0
   17a4c:	movea.l d0,a6
   17a4e:	move.l 8(sp),d0
   17a52:	move.l 12(sp),d1
   17a56:	jsr -102(a6)
   17a5a:	move.l d0,4(sp)
   17a5e:	move.l 4(sp),d0
}
   17a62:	movea.l (sp)+,a6
   17a64:	lea 12(sp),sp
   17a68:	rts

00017a6a <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   17a6a:	       lea -24(sp),sp
   17a6e:	       move.l a6,-(sp)
    if (x > 0) {
   17a70:	       clr.l -(sp)
   17a72:	       move.l 40(sp),-(sp)
   17a76:	       jsr 17876 <__gtsf2>
   17a7c:	       addq.l #8,sp
   17a7e:	       tst.l d0
   17a80:	   ,-- ble.s 17ab2 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17a82:	   |   move.l 36(sp),-(sp)
   17a86:	   |   move.l 36(sp),-(sp)
   17a8a:	   |   jsr 175c0 <__divsf3>
   17a90:	   |   addq.l #8,sp
   17a92:	   |   move.l d0,8(sp)
   17a96:	   |   move.l 1cb3a <MathIeeeSingTransBase>,d0
   17a9c:	   |   movea.l d0,a6
   17a9e:	   |   move.l 8(sp),d0
   17aa2:	   |   jsr -30(a6)
   17aa6:	   |   move.l d0,4(sp)
   17aaa:	   |   move.l 4(sp),d0
   17aae:	,--|-- bra.w 17c12 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17ab2:	|  '-> clr.l -(sp)
   17ab4:	|      move.l 40(sp),-(sp)
   17ab8:	|      jsr 17930 <__ltsf2>
   17abe:	|      addq.l #8,sp
   17ac0:	|      tst.l d0
   17ac2:	|  ,-- bge.s 17b36 <atan2f+0xcc>
   17ac4:	|  |   clr.l -(sp)
   17ac6:	|  |   move.l 36(sp),-(sp)
   17aca:	|  |   jsr 177f2 <__gesf2>
   17ad0:	|  |   addq.l #8,sp
   17ad2:	|  |   tst.l d0
   17ad4:	|  +-- blt.s 17b36 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17ad6:	|  |   move.l 36(sp),-(sp)
   17ada:	|  |   move.l 36(sp),-(sp)
   17ade:	|  |   jsr 175c0 <__divsf3>
   17ae4:	|  |   addq.l #8,sp
   17ae6:	|  |   move.l d0,24(sp)
   17aea:	|  |   move.l 1cb3a <MathIeeeSingTransBase>,d0
   17af0:	|  |   movea.l d0,a6
   17af2:	|  |   move.l 24(sp),d0
   17af6:	|  |   jsr -30(a6)
   17afa:	|  |   move.l d0,20(sp)
   17afe:	|  |   move.l 20(sp),d0
   17b02:	|  |   move.l d0,-(sp)
   17b04:	|  |   jsr 1762c <__extendsfdf2>
   17b0a:	|  |   addq.l #4,sp
   17b0c:	|  |   move.l #1413754136,-(sp)
   17b12:	|  |   move.l #1074340347,-(sp)
   17b18:	|  |   move.l d1,-(sp)
   17b1a:	|  |   move.l d0,-(sp)
   17b1c:	|  |   jsr 174fc <__adddf3>
   17b22:	|  |   lea 16(sp),sp
   17b26:	|  |   move.l d1,-(sp)
   17b28:	|  |   move.l d0,-(sp)
   17b2a:	|  |   jsr 17a34 <__truncdfsf2>
   17b30:	|  |   addq.l #8,sp
   17b32:	+--|-- bra.w 17c12 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17b36:	|  '-> clr.l -(sp)
   17b38:	|      move.l 40(sp),-(sp)
   17b3c:	|      jsr 17930 <__ltsf2>
   17b42:	|      addq.l #8,sp
   17b44:	|      tst.l d0
   17b46:	|  ,-- bge.s 17bb8 <atan2f+0x14e>
   17b48:	|  |   clr.l -(sp)
   17b4a:	|  |   move.l 36(sp),-(sp)
   17b4e:	|  |   jsr 17930 <__ltsf2>
   17b54:	|  |   addq.l #8,sp
   17b56:	|  |   tst.l d0
   17b58:	|  +-- bge.s 17bb8 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17b5a:	|  |   move.l 36(sp),-(sp)
   17b5e:	|  |   move.l 36(sp),-(sp)
   17b62:	|  |   jsr 175c0 <__divsf3>
   17b68:	|  |   addq.l #8,sp
   17b6a:	|  |   move.l d0,16(sp)
   17b6e:	|  |   move.l 1cb3a <MathIeeeSingTransBase>,d0
   17b74:	|  |   movea.l d0,a6
   17b76:	|  |   move.l 16(sp),d0
   17b7a:	|  |   jsr -30(a6)
   17b7e:	|  |   move.l d0,12(sp)
   17b82:	|  |   move.l 12(sp),d0
   17b86:	|  |   move.l d0,-(sp)
   17b88:	|  |   jsr 1762c <__extendsfdf2>
   17b8e:	|  |   addq.l #4,sp
   17b90:	|  |   move.l #1413754136,-(sp)
   17b96:	|  |   move.l #1074340347,-(sp)
   17b9c:	|  |   move.l d1,-(sp)
   17b9e:	|  |   move.l d0,-(sp)
   17ba0:	|  |   jsr 1799c <__subdf3>
   17ba6:	|  |   lea 16(sp),sp
   17baa:	|  |   move.l d1,-(sp)
   17bac:	|  |   move.l d0,-(sp)
   17bae:	|  |   jsr 17a34 <__truncdfsf2>
   17bb4:	|  |   addq.l #8,sp
   17bb6:	+--|-- bra.s 17c12 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17bb8:	|  '-> clr.l -(sp)
   17bba:	|      move.l 40(sp),-(sp)
   17bbe:	|      jsr 175f6 <__eqsf2>
   17bc4:	|      addq.l #8,sp
   17bc6:	|      tst.l d0
   17bc8:	|  ,-- bne.s 17be4 <atan2f+0x17a>
   17bca:	|  |   clr.l -(sp)
   17bcc:	|  |   move.l 36(sp),-(sp)
   17bd0:	|  |   jsr 17876 <__gtsf2>
   17bd6:	|  |   addq.l #8,sp
   17bd8:	|  |   tst.l d0
   17bda:	|  +-- ble.s 17be4 <atan2f+0x17a>
        return PI / 2;
   17bdc:	|  |   move.l #1070141403,d0
   17be2:	+--|-- bra.s 17c12 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17be4:	|  '-> clr.l -(sp)
   17be6:	|      move.l 40(sp),-(sp)
   17bea:	|      jsr 175f6 <__eqsf2>
   17bf0:	|      addq.l #8,sp
   17bf2:	|      tst.l d0
   17bf4:	|  ,-- bne.s 17c10 <atan2f+0x1a6>
   17bf6:	|  |   clr.l -(sp)
   17bf8:	|  |   move.l 36(sp),-(sp)
   17bfc:	|  |   jsr 17930 <__ltsf2>
   17c02:	|  |   addq.l #8,sp
   17c04:	|  |   tst.l d0
   17c06:	|  +-- bge.s 17c10 <atan2f+0x1a6>
        return -PI / 2;
   17c08:	|  |   move.l #-1077342245,d0
   17c0e:	+--|-- bra.s 17c12 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17c10:	|  '-> moveq #0,d0
    }
}
   17c12:	'----> movea.l (sp)+,a6
   17c14:	       lea 24(sp),sp
   17c18:	       rts

00017c1a <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17c1a:	lea -24(sp),sp
   17c1e:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17c20:	move.l 32(sp),20(sp)
   17c26:	move.l 36(sp),24(sp)
   17c2c:	move.l 1cb42 <MathIeeeDoubTransBase>,d0
   17c32:	movea.l d0,a6
   17c34:	move.l 20(sp),d0
   17c38:	move.l 24(sp),d1
   17c3c:	jsr -96(a6)
   17c40:	move.l d0,4(sp)
   17c44:	move.l d1,8(sp)
   17c48:	move.l 4(sp),12(sp)
   17c4e:	move.l 8(sp),16(sp)
   17c54:	move.l 12(sp),d0
   17c58:	move.l 16(sp),d1
}
   17c5c:	movea.l (sp)+,a6
   17c5e:	lea 24(sp),sp
   17c62:	rts

00017c64 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17c64:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17c68:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17c6c:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17c70:	mulu.w 8(sp),d1
	addw	d1, d0
   17c74:	add.w d1,d0
	swap	d0
   17c76:	swap d0
	clrw	d0
   17c78:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17c7a:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17c7e:	mulu.w 10(sp),d1
	addl	d1, d0
   17c82:	add.l d1,d0
	rts
   17c84:	rts

00017c86 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17c86:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17c88:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17c8c:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17c90:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17c96:	   ,-- bcc.s 17cae <__udivsi3+0x28>
	movel	d0, d2
   17c98:	   |   move.l d0,d2
	clrw	d2
   17c9a:	   |   clr.w d2
	swap	d2
   17c9c:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17c9e:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17ca0:	   |   move.w d2,d0
	swap	d0
   17ca2:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17ca4:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17ca8:	   |   divu.w d1,d2
	movew	d2, d0
   17caa:	   |   move.w d2,d0
	jra	6f
   17cac:	,--|-- bra.s 17cde <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17cae:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17cb0:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17cb2:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17cb4:	|  |   cmpi.l #65536,d1
	jcc	4b
   17cba:	|  '-- bcc.s 17cb0 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17cbc:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17cbe:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17cc4:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17cc6:	|      mulu.w d0,d1
	swap	d2
   17cc8:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17cca:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17ccc:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17cce:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17cd0:	|  ,-- bne.s 17cdc <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17cd2:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17cd4:	|  +-- bcs.s 17cdc <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17cd6:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17cda:	+--|-- bls.s 17cde <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17cdc:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   17cde:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17ce0:	       rts

00017ce2 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17ce2:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17ce4:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17ce6:	    move.l 12(sp),d1
	jpl	1f
   17cea:	,-- bpl.s 17cf0 <__divsi3+0xe>
	negl	d1
   17cec:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17cee:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17cf0:	'-> move.l 8(sp),d0
	jpl	2f
   17cf4:	,-- bpl.s 17cfa <__divsi3+0x18>
	negl	d0
   17cf6:	|   neg.l d0
	negb	d2
   17cf8:	|   neg.b d2

2:	movel	d1, sp@-
   17cfa:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17cfc:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17cfe:	    jsr 17c86 <__udivsi3>
	addql	#8, sp
   17d04:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17d06:	    tst.b d2
	jpl	3f
   17d08:	,-- bpl.s 17d0c <__divsi3+0x2a>
	negl	d0
   17d0a:	|   neg.l d0

3:	movel	sp@+, d2
   17d0c:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17d0e:	    rts

00017d10 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17d10:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17d14:	move.l 4(sp),d0
	movel	d1, sp@-
   17d18:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17d1a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17d1c:	jsr 17ce2 <__divsi3>
	addql	#8, sp
   17d22:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17d24:	move.l 8(sp),d1
	movel	d1, sp@-
   17d28:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17d2a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17d2c:	jsr 17c64 <__mulsi3>
	addql	#8, sp
   17d32:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17d34:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17d38:	sub.l d0,d1
	movel	d1, d0
   17d3a:	move.l d1,d0
	rts
   17d3c:	rts

00017d3e <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17d3e:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17d42:	move.l 4(sp),d0
	movel	d1, sp@-
   17d46:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17d48:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17d4a:	jsr 17c86 <__udivsi3>
	addql	#8, sp
   17d50:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17d52:	move.l 8(sp),d1
	movel	d1, sp@-
   17d56:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17d58:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17d5a:	jsr 17c64 <__mulsi3>
	addql	#8, sp
   17d60:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17d62:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17d66:	sub.l d0,d1
	movel	d1, d0
   17d68:	move.l d1,d0
	rts
   17d6a:	rts

00017d6c <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17d6c:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17d6e:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17d72:	jsr -516(a6)
    move.l (sp)+, a6
   17d76:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17d78:	rts

00017d7a <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17d7a:	move.b d0,(a3)+
	rts
   17d7c:	rts
