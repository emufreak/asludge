
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #106496,d0
       8:	       subi.l #106496,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1a000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #106496,d0
      40:	       subi.l #106496,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1a000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 7260 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #106496,d0
      7e:	       subi.l #106496,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1a000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 139da <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1a7a4 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 139f2 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1a000 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 139da <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1a7a4 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1a000 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 139da <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1a7a4 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 179e0 <PutChar+0x4>
     35c:	|  |              |   jsr 16f3a <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1a7ac <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1a7ac <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1a7ac <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1a7ac <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1a7ac <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1a7ac <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1a7ac <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17a0a <PutChar+0x2e>
     834:	|   jsr 16f3a <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1a7ac <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17a26 <PutChar+0x4a>
     8a6:	|   jsr 16f3a <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1a7ac <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1a7ac <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1a7ac <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1a7ac <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1a7ac <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1a7ac <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1a7ac <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1a7ac <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1a7a4 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1a7ac <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 139da <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1a7ac <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1a6aa <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1a764 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1a760 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1a6aa <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9630 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1a6ae <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1a6b2 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2bb6 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17a4e <PutChar+0x72>
     e1a:	          jsr 16f3a <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1a6c6 <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17a67 <PutChar+0x8b>
     e30:	      |   jsr 16f3a <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1a6c0 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     ,-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     '-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1a7b0 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1a6c6 <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17a95 <PutChar+0xb9>
     ef0:	|         jsr 16f3a <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     ,-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  ,--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1a7b0 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  '-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  '----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17ab5 <PutChar+0xd9>
     f3c:	|         jsr 16f3a <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1a6f8 <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1a6fc <winHeight>,d0
     f6e:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17ad5 <PutChar+0xf9>
     fbe:	|         jsr 16f3a <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	'-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1a7a4 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   ,-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17aea <PutChar+0x10e>
    1010:	   |   jsr 16f3a <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1a7ac <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1a6f4 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #106498,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   ,-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	,--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  '-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	'----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #106562,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   ,-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	,--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  '-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	'----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #106610,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   ,-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	,--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  '-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	'----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #106650,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1a6ec <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   ,-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	,--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  '-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	'----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   ,-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   '-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 17b25 <PutChar+0x149>
    11c6:	                jsr 16f3a <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1a6e4 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	,-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1a6d8 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1a7b0 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     ,-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  ,--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1a6f8 <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1a6f8 <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1a6f8 <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 178c6 <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1a6c6 <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1a6f8 <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 178c6 <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1a6d8 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     ,-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  ,--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1a6fc <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 178c6 <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1a6fc <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 178c6 <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1a7b0 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  '-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  '----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  '-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  '----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1a6f0 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1a6ec <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           ,-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        ,--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  '-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        '----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           ,-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	'-----------|-> nop
  }
}
    13e4:	            '-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1a6f4 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1a6f4 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1a6d2 <CstApplyBackDropCounter>,d0
    14ce:	,-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1a6d2 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1a6d2 <CstApplyBackDropCounter>
  }    
}
    14e4:	'-> nop
    14e6:	    rts

000014e8 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    14e8:	                                                                         lea -28(sp),sp
    14ec:	                                                                         movem.l d2-d7/a2-a6,-(sp)
    14f0:	                                                                         movea.l 76(sp),a3
    14f4:	                                                                         movea.l 80(sp),a2
    14f8:	                                                                         move.l 84(sp),d2
    14fc:	                                                                         move.l 88(sp),d6
    1500:	                                                                         move.w d2,54(sp)
    1504:	                                                                         move.w d6,58(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
  //In Case nothing needs to be done return sprite mask without changes
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP); 
    1508:	                                                                         move.l (a3),d0
    150a:	   ,-------------------------------------------------------------------- bmi.w 1a1e <CstDrawZBuffer+0x536>
    150e:	   |                                                                     asr.l #3,d0
    1510:	   |                                                                     lea 178c6 <__mulsi3>,a4
    1516:	   |                                                                     move.l 4(a3),-(sp)
    151a:	   |                                                                     move.l d0,-(sp)
    151c:	   |                                                                     jsr (a4)
    151e:	   |                                                                     addq.l #8,sp
    1520:	   |                                                                     lea 1a7a4 <SysBase>,a0
    1526:	   |                                                                     movea.l (a0),a6
    1528:	   |                                                                     moveq #2,d1
    152a:	   |                                                                     jsr -684(a6)
    152e:	   |                                                                     move.l d0,64(sp)
  UBYTE *tmpbuffer = AllocVec( (sprite->width/8+2)*sprite->height, MEMF_CHIP);               
    1532:	   |                                                                     move.l (a3),d0
    1534:	,--|-------------------------------------------------------------------- bmi.w 1a18 <CstDrawZBuffer+0x530>
    1538:	|  |  ,----------------------------------------------------------------> asr.l #3,d0
    153a:	|  |  |                                                                  move.l 4(a3),-(sp)
    153e:	|  |  |                                                                  movea.l d0,a6
    1540:	|  |  |                                                                  pea 2(a6)
    1544:	|  |  |                                                                  jsr (a4)
    1546:	|  |  |                                                                  addq.l #8,sp
    1548:	|  |  |                                                                  lea 1a7a4 <SysBase>,a0
    154e:	|  |  |                                                                  movea.l (a0),a6
    1550:	|  |  |                                                                  moveq #2,d1
    1552:	|  |  |                                                                  jsr -684(a6)
    1556:	|  |  |                                                                  move.l d0,60(sp)
  #ifdef EMULATOR
    debug_register_bitmap(returnvalue, "SpriteMask", sprite->width, sprite->height, 1, 0);
    debug_register_bitmap(tmpbuffer, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
  #endif    

  while(zbuffer) 
    155a:	|  |  |                                                                  cmpa.w #0,a2
    155e:	|  |  |  ,-------------------------------------------------------------- beq.w 1a4c <CstDrawZBuffer+0x564>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1562:	|  |  |  |                                                               move.w d2,56(sp)
    1566:	|  |  |  |                                                               move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1568:	|  |  |  |                                                               move.l 4(a3),d7
  WORD zbufferset = 0;
    156c:	|  |  |  |                                                               clr.w d4
          else
          {       
            //xdiffbyte += -2;      
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();         
            custom->bltdpt = tmpbuffer + 2;       
    156e:	|  |  |  |                                                               addq.l #2,d0
    1570:	|  |  |  |                                                               move.l d0,68(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1574:	|  |  |  |                          ,----------------------------------> move.w d6,d3
    1576:	|  |  |  |                          |                                    add.w d7,d3
    if(spritey2oncanvas < zbuffer->yz) 
    1578:	|  |  |  |                          |                                    andi.l #65535,d3
    157e:	|  |  |  |                          |                                    cmp.l 16(a2),d3
    1582:	|  |  |  |                          |  ,-------------------------------- bge.w 1710 <CstDrawZBuffer+0x228>
    WORD zbufferx1oncanvas = zbuffer->topx;
    1586:	|  |  |  |                          |  |                                 movea.l 8(a2),a5
    WORD zbuffery1oncanvas = zbuffer->topy;
    158a:	|  |  |  |                          |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    158e:	|  |  |  |                          |  |                                 move.w a5,d0
    1590:	|  |  |  |                          |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1594:	|  |  |  |                          |  |                                 move.w 6(a2),d4
    1598:	|  |  |  |                          |  |                                 add.w d5,d4
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    159a:	|  |  |  |                          |  |                                 move.w a5,d1
    159c:	|  |  |  |                          |  |                                 cmp.w 54(sp),d1
    15a0:	|  |  |  |                       ,--|--|-------------------------------- bge.w 1886 <CstDrawZBuffer+0x39e>
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    15a4:	|  |  |  |                       |  |  |                                 cmp.w 54(sp),d0
    15a8:	|  |  |  |        ,--------------|--|--|-------------------------------- ble.w 170e <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    15ac:	|  |  |  |        |              |  |  |                                 move.w 58(sp),d0
    15b0:	|  |  |  |        |              |  |  |                                 cmp.w d0,d5
    15b2:	|  |  |  |        |     ,--------|--|--|-------------------------------- blt.w 19fa <CstDrawZBuffer+0x512>
    15b6:	|  |  |  |        |     |        |  |  |                                 movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    15b8:	|  |  |  |        |     |        |  |  |                                 cmpa.l d3,a0
    15ba:	|  |  |  |        +-----|--------|--|--|-------------------------------- bge.w 170e <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    15be:	|  |  |  |        |     |        |  |  |                                 move.w 56(sp),d0
    15c2:	|  |  |  |        |     |        |  |  |                                 sub.w a5,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    15c4:	|  |  |  |        |     |        |  |  |                                 move.w d0,d7
    15c6:	|  |  |  |        |     |        |  |  |                                 andi.w #15,d7
          bytewidth = (sprite->width/16)*2;
    15ca:	|  |  |  |        |     |        |  |  |                                 tst.l d2
    15cc:	|  |  |  |        |  ,--|--------|--|--|-------------------------------- blt.w 1740 <CstDrawZBuffer+0x258>
    15d0:	|  |  |  |        |  |  |  ,-----|--|--|-------------------------------> asr.l #4,d2
    15d2:	|  |  |  |        |  |  |  |     |  |  |                                 add.w d2,d2
          custom->bltafwm = 0xffff;
    15d4:	|  |  |  |        |  |  |  |     |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
          custom->bltalwm = 0xffff;                      
    15dc:	|  |  |  |        |  |  |  |     |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
          custom->bltcon1 = 0;          
    15e4:	|  |  |  |        |  |  |  |     |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>
            WaitBlit();   
    15ec:	|  |  |  |        |  |  |  |     |  |  |                                 lea 1a7b0 <GfxBase>,a0
    15f2:	|  |  |  |        |  |  |  |     |  |  |                                 movea.l (a0),a6
            custom->bltdpt = tmpbuffer + 2;       
    15f4:	|  |  |  |        |  |  |  |     |  |  |                                 movea.l 68(sp),a5
          xdiffbyte = (xdiff / 16) * 2;          
    15f8:	|  |  |  |        |  |  |  |     |  |  |                                 lsr.w #4,d0
    15fa:	|  |  |  |        |  |  |  |     |  |  |                                 add.w d0,d0
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    15fc:	|  |  |  |        |  |  |  |     |  |  |                                 andi.l #65535,d0
    1602:	|  |  |  |        |  |  |  |     |  |  |                                 add.l 20(a2),d0
    1606:	|  |  |  |        |  |  |  |     |  |  |                                 move.l d0,50(sp)
          if (xdiffrest) {
    160a:	|  |  |  |        |  |  |  |     |  |  |                                 tst.w d7
    160c:	|  |  |  |        |  |  |  |     |  |  |           ,-------------------- beq.w 1784 <CstDrawZBuffer+0x29c>
            bytewidth += 2; 
    1610:	|  |  |  |        |  |  |  |     |  |  |           |  ,----------------> addq.w #2,d2
            WaitBlit();   
    1612:	|  |  |  |        |  |  |  |     |  |  |           |  |                  jsr -228(a6)
            custom->bltdpt = tmpbuffer;                
    1616:	|  |  |  |        |  |  |  |     |  |  |           |  |                  move.l 60(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    161e:	|  |  |  |        |  |  |  |     |  |  |           |  |                  moveq #12,d0
    1620:	|  |  |  |        |  |  |  |     |  |  |           |  |                  lsl.w d0,d7
    1622:	|  |  |  |        |  |  |  |     |  |  |           |  |                  move.w #2544,d0
    1626:	|  |  |  |        |  |  |  |     |  |  |           |  |                  sub.w d7,d0
    1628:	|  |  |  |        |  |  |  |     |  |  |           |  |                  move.w d0,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    162e:	|  |  |  |        |  |  |  |     |  |  |           |  |                  move.l (a2),d0
    1630:	|  |  |  |        |  |  |  |     |  |  |           |  |                  move.l d0,d1
    1632:	|  |  |  |  ,-----|--|--|--|-----|--|--|-----------|--|----------------- bmi.w 1b0a <CstDrawZBuffer+0x622>
    1636:	|  |  |  |  |     |  |  |  |     |  |  |           |  |                  asr.l #3,d1
    1638:	|  |  |  |  |     |  |  |  |     |  |  |           |  |                  sub.w d2,d1
    163a:	|  |  |  |  |     |  |  |  |     |  |  |           |  |                  move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
            custom->bltdmod = 0;                                                            
    1640:	|  |  |  |  |     |  |  |  |     |  |  |           |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1648:	|  |  |  |  |  ,--|--|--|--|-----|--|--|-----------|--|----------------> move.w d6,d1
    164a:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |                  sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    164c:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |                  movea.w d4,a0
    164e:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |                  cmpa.l d3,a0
    1650:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  ,-------------- ble.w 17be <CstDrawZBuffer+0x2d6>
          height = sprite->height;
    1654:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1658:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |        |      move.l d0,-(sp)
    165a:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |        |      move.w d1,-(sp)
    165c:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |        |      clr.w -(sp)
    165e:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |        |      jsr (a4)
    1660:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |        |      addq.l #8,sp
    1662:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |        |      tst.l d0
    1664:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  ,-----|----- blt.w 17d0 <CstDrawZBuffer+0x2e8>
    1668:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    166a:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   add.l 50(sp),d0
    166e:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
        UWORD bltsize =  height*64+bytewidth/2;          
    1674:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    1676:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1678:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   add.w d2,d4
    167a:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
       
        WaitBlit();
    1680:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   lea 1a7b0 <GfxBase>,a0
    1686:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    1688:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    168c:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
        custom->bltalwm = 0xffff;
    1694:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
        custom->bltamod = 2;
    169c:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
        custom->bltbmod = 0;
    16a4:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e09>
        custom->bltdmod = 0;
    16ac:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
        custom->bltcon0 = 0xd0c; //Copy A to D
    16b4:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
        custom->bltcon1 = 0;        
    16bc:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>

        custom->bltapt = (APTR) tmpbuffer + 2;
    16c4:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.l a5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16ca:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.l (a3),d2
    16cc:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.l 4(a3),d7
    16d0:	|  |  |  |  |  |  |  |  |  |     |  |  |           |  |  |  |     |  |   move.l d2,d0
    16d2:	|  |  |  |  |  |  |  |  |  |     |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 1854 <CstDrawZBuffer+0x36c>
    16d6:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    16d8:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   move.l d7,-(sp)
    16da:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    16dc:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   jsr (a4)
    16de:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    16e0:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    16e2:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    16e4:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    16e6:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    16e8:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    16ec:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
        custom->bltdpt = (APTR) returnvalue;
    16f2:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   move.l 64(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    16fa:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   move.w d7,d1
    16fc:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    16fe:	|  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    1700:	|  |  |  |  |  |  |  |  |  |     |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 1842 <CstDrawZBuffer+0x35a>
    1704:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    1706:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    1708:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
      zbufferset = 1;
    170e:	|  |  |  |  |  |  >--|--|--|-----|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d4

      }
    }
    zbuffer = zbuffer->nextPanel;
    1710:	|  |  |  |  |  |  |  |  |  |     |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    1714:	|  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    1718:	|  |  |  |  |  |  |  |  |  |     |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 1574 <CstDrawZBuffer+0x8c>
  }
  FreeVec( tmpbuffer);
    171c:	|  |  |  |  |  |  |  |  |  |     |        |  |  |  |  |  |  |  |  |  |   lea 1a7a4 <SysBase>,a0
    1722:	|  |  |  |  |  |  |  |  |  |     |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    1724:	|  |  |  |  |  |  |  |  |  |     |        |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a1
    1728:	|  |  |  |  |  |  |  |  |  |     |        |  |  |  |  |  |  |  |  |  |   jsr -690(a6)
  if(zbufferset == 0)
    172c:	|  |  |  |  |  |  |  |  |  |     |        |  |  |  |  |  |  |  |  |  |   tst.w d4
    172e:	|  |  |  |  |  |  |  |  |  |     |     ,--|--|--|--|--|--|--|--|--|--|-- beq.w 1a5a <CstDrawZBuffer+0x572>

  }

  return returnvalue;

}
    1732:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   move.l 64(sp),d0
    1736:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    173a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   lea 28(sp),sp
    173e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    1740:	|  |  |  |  |  |  |  >--|--|-----|-----|--|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    1742:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    1744:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    1746:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    1748:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
          custom->bltalwm = 0xffff;                      
    1750:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
          custom->bltcon1 = 0;          
    1758:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>
            WaitBlit();   
    1760:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   lea 1a7b0 <GfxBase>,a0
    1766:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
            custom->bltdpt = tmpbuffer + 2;       
    1768:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a5
          xdiffbyte = (xdiff / 16) * 2;          
    176c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    176e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   add.w d0,d0
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    1770:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   andi.l #65535,d0
    1776:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d0
    177a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   move.l d0,50(sp)
          if (xdiffrest) {
    177e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |   tst.w d7
    1780:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  '--|--|--|--|--|-- bne.w 1610 <CstDrawZBuffer+0x128>
            WaitBlit();         
    1784:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  '-----|--|--|--|--|-> jsr -228(a6)
            custom->bltdpt = tmpbuffer + 2;       
    1788:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |        |  |  |  |  |   move.l 68(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
            custom->bltcon0 = 4096 + 0x9f0;              
    1790:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |        |  |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1798:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |        |  |  |  |  |   move.l (a2),d0
    179a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |        |  |  |  |  |   move.l d0,d1
    179c:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--------|--|--|--|--|-- bmi.w 1af2 <CstDrawZBuffer+0x60a>
    17a0:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |  |  |  |   asr.l #3,d1
    17a2:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |  |  |  |   sub.w d2,d1
    17a4:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
            custom->bltdmod = 2;                                                            
    17aa:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    17b2:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--------|--|--|--|--|-> move.w d6,d1
    17b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    17b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |   movea.w d4,a0
    17b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |   cmpa.l d3,a0
    17ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  '--|-- bgt.w 1654 <CstDrawZBuffer+0x16c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    17be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|-----|-> sub.w d6,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    17c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    17c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    17c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    17c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr (a4)
    17c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    17ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    17cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 1668 <CstDrawZBuffer+0x180>
    17d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    17d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    17d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l 50(sp),d0
    17d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
        UWORD bltsize =  height*64+bytewidth/2;          
    17de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    17e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    17e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    17e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
        WaitBlit();
    17ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1a7b0 <GfxBase>,a0
    17f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    17f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    17f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
        custom->bltalwm = 0xffff;
    17fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
        custom->bltamod = 2;
    1806:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
        custom->bltbmod = 0;
    180e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e09>
        custom->bltdmod = 0;
    1816:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
        custom->bltcon0 = 0xd0c; //Copy A to D
    181e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
        custom->bltcon1 = 0;        
    1826:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>
        custom->bltapt = (APTR) tmpbuffer + 2;
    182e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l a5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1834:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    1836:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 4(a3),d7
    183a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    183c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 16d6 <CstDrawZBuffer+0x1ee>
    1840:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 1854 <CstDrawZBuffer+0x36c>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1842:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    1844:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    1846:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    1848:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    184a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    1850:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 170e <CstDrawZBuffer+0x226>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1854:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    1856:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    1858:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        move.l d7,-(sp)
    185a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    185c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        jsr (a4)
    185e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    1860:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    1862:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1864:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1866:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1868:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    186c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
        custom->bltdpt = (APTR) returnvalue;
    1872:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        move.l 64(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    187a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        move.w d7,d1
    187c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    187e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    1880:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 1704 <CstDrawZBuffer+0x21c>
    1884:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 1842 <CstDrawZBuffer+0x35a>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1886:	|  |  |  |  |  |  |  |  |  |  |  '--|--|-------------------------------> move.w 56(sp),d1
    188a:	|  |  |  |  |  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    188c:	|  |  |  |  |  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    1892:	|  |  |  |  |  |  |  |  |  |  |     |  |                                 move.l d1,46(sp)
    1896:	|  |  |  |  |  |  |  |  |  |  |     |  |                                 movea.w a5,a1
    1898:	|  |  |  |  |  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    189a:	|  |  |  |  |  |  +--|--|--|--|-----|--|-------------------------------- bge.w 170e <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    189e:	|  |  |  |  |  |  |  |  |  |  |     |  |                                 move.w 58(sp),d1
    18a2:	|  |  |  |  |  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    18a4:	|  |  |  |  |  |  |  |  |  |  |     |  |           ,-------------------- bge.w 19d4 <CstDrawZBuffer+0x4ec>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    18a8:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     cmp.w 58(sp),d4
    18ac:	|  |  |  |  |  |  +--|--|--|--|-----|--|-----------|-------------------- ble.w 170e <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    18b0:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     suba.w 56(sp),a5
          xdiffbyte = (xdiff / 16) * 2;          
    18b4:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     move.w a5,d7
    18b6:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     lsr.w #4,d7
    18b8:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     move.w d7,50(sp)
          xdiffrest = (xdiff - xdiffbyte * 8);       
    18bc:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     move.w a5,d1
    18be:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     andi.w #15,d1
    18c2:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          bytewidth = (sprite->width/16)*2 + 2;
    18c4:	|  |  |  |  |  |  |  |  |  |  |     |  |           |                     tst.l d2
    18c6:	|  |  |  |  |  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 195e <CstDrawZBuffer+0x476>
    18ca:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    18cc:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    18ce:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    18d0:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    18d2:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l 46(sp),a0
    18d6:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  ,-------------- ble.w 1972 <CstDrawZBuffer+0x48a>
            WaitBlit();  
    18da:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1a7b0 <GfxBase>,a0
    18e0:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    18e2:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    18e6:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
            custom->bltalwm = 0xffff;          
    18ee:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
            custom->bltdpt = tmpbuffer;        
    18f6:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 60(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
            custom->bltcon1 = 0;               
    18fe:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1906:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    190a:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    190c:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    190e:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.w 1992 <CstDrawZBuffer+0x4aa>
    1912:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    1914:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a1
    1916:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a1
            if (xdiffrest) {
    1918:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |     |      clr.w d1
    191a:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |     |      cmp.w a5,d1
    191c:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.w 19a0 <CstDrawZBuffer+0x4b8>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    1920:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w a5,d7
    1922:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    1924:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d7
    1926:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d7,a5
    1928:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lea 2544(a5),a5
    192c:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1932:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
              custom->bltdmod = 0;                                                            
    1938:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
            custom->bltdpt = tmpbuffer + 2;       
    1940:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.l 60(sp),a5
    1944:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #2,a5
              xdiffbyte += 2;                 
    1946:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w 50(sp),d7
    194a:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d7
    194c:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d7,d7
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    194e:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d7
    1954:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   suba.l d7,a0
    1956:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,50(sp)
    195a:	|  |  |  |  |  +--|--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 1648 <CstDrawZBuffer+0x160>
          bytewidth = (sprite->width/16)*2 + 2;
    195e:	|  |  |  |  |  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d7
    1960:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d7,d2
    1962:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    1964:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    1966:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    1968:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    196a:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l 46(sp),a0
    196e:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- bgt.w 18da <CstDrawZBuffer+0x3f2>
              KPrintF("Cstdrawzbuffer: Current version onl supports zbuffer size equal to screen size");
    1972:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 17b41 <PutChar+0x165>
    1978:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 16f3a <KPrintF>
              return FALSE;
    197e:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    1980:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  |  |   clr.l 64(sp)
}
    1984:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  |  |   move.l 64(sp),d0
    1988:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    198c:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  |  |   lea 28(sp),sp
    1990:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1992:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    1994:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    1996:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a1
    1998:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a1
            if (xdiffrest) {
    199a:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |     |   clr.w d1
    199c:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |     |   cmp.w a5,d1
    199e:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 1920 <CstDrawZBuffer+0x438>
              custom->bltcon0 = 0x9f0;              
    19a0:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19a8:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  move.w a1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
              custom->bltdmod = 0;                                                            
    19ae:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
            custom->bltdpt = tmpbuffer + 2;       
    19b6:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  movea.l 60(sp),a5
    19ba:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  addq.l #2,a5
              xdiffbyte += 2;                 
    19bc:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  move.w 50(sp),d7
    19c0:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d7
    19c2:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  add.w d7,d7
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    19c4:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d7
    19ca:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  suba.l d7,a0
    19cc:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,50(sp)
    19d0:	|  |  |  |  |  +--|--|--|--|--|-----|--|--------|--|--|----------------- bra.w 1648 <CstDrawZBuffer+0x160>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    19d4:	|  |  |  |  |  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19d6:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    19d8:	|  |  |  |  |  |  +--|--|--|--|-----|--|--------|-----|----------------- bge.w 170e <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    19dc:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  suba.w 56(sp),a5
          xdiffbyte = (xdiff / 16) * 2;          
    19e0:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  move.w a5,d7
    19e2:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d7
    19e4:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  move.w d7,50(sp)
          xdiffrest = (xdiff - xdiffbyte * 8);       
    19e8:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  move.w a5,d1
    19ea:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d1
    19ee:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          bytewidth = (sprite->width/16)*2 + 2;
    19f0:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    19f2:	|  |  |  |  |  |  |  |  |  |  |     |  |        |     '----------------- bge.w 18ca <CstDrawZBuffer+0x3e2>
    19f6:	|  |  |  |  |  |  |  |  |  |  |     |  |        '----------------------- bra.w 195e <CstDrawZBuffer+0x476>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19fa:	|  |  |  |  |  |  |  |  '--|--|-----|--|-------------------------------> cmp.w 58(sp),d4
    19fe:	|  |  |  |  |  |  '--|-----|--|-----|--|-------------------------------- ble.w 170e <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1a02:	|  |  |  |  |  |     |     |  |     |  |                                 move.w 56(sp),d0
    1a06:	|  |  |  |  |  |     |     |  |     |  |                                 sub.w a5,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1a08:	|  |  |  |  |  |     |     |  |     |  |                                 move.w d0,d7
    1a0a:	|  |  |  |  |  |     |     |  |     |  |                                 andi.w #15,d7
          bytewidth = (sprite->width/16)*2;
    1a0e:	|  |  |  |  |  |     |     |  |     |  |                                 tst.l d2
    1a10:	|  |  |  |  |  |     |     '--|-----|--|-------------------------------- bge.w 15d0 <CstDrawZBuffer+0xe8>
    1a14:	|  |  |  |  |  |     '--------|-----|--|-------------------------------- bra.w 1740 <CstDrawZBuffer+0x258>
  UBYTE *tmpbuffer = AllocVec( (sprite->width/8+2)*sprite->height, MEMF_CHIP);               
    1a18:	>--|--|--|--|--|--------------|-----|--|-------------------------------> addq.l #7,d0
    1a1a:	|  |  +--|--|--|--------------|-----|--|-------------------------------- bra.w 1538 <CstDrawZBuffer+0x50>
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP); 
    1a1e:	|  '--|--|--|--|--------------|-----|--|-------------------------------> addq.l #7,d0
    1a20:	|     |  |  |  |              |     |  |                                 asr.l #3,d0
    1a22:	|     |  |  |  |              |     |  |                                 lea 178c6 <__mulsi3>,a4
    1a28:	|     |  |  |  |              |     |  |                                 move.l 4(a3),-(sp)
    1a2c:	|     |  |  |  |              |     |  |                                 move.l d0,-(sp)
    1a2e:	|     |  |  |  |              |     |  |                                 jsr (a4)
    1a30:	|     |  |  |  |              |     |  |                                 addq.l #8,sp
    1a32:	|     |  |  |  |              |     |  |                                 lea 1a7a4 <SysBase>,a0
    1a38:	|     |  |  |  |              |     |  |                                 movea.l (a0),a6
    1a3a:	|     |  |  |  |              |     |  |                                 moveq #2,d1
    1a3c:	|     |  |  |  |              |     |  |                                 jsr -684(a6)
    1a40:	|     |  |  |  |              |     |  |                                 move.l d0,64(sp)
  UBYTE *tmpbuffer = AllocVec( (sprite->width/8+2)*sprite->height, MEMF_CHIP);               
    1a44:	|     |  |  |  |              |     |  |                                 move.l (a3),d0
    1a46:	|     '--|--|--|--------------|-----|--|-------------------------------- bpl.w 1538 <CstDrawZBuffer+0x50>
    1a4a:	'--------|--|--|--------------|-----|--|-------------------------------- bra.s 1a18 <CstDrawZBuffer+0x530>
    1a4c:	         '--|--|--------------|-----|--|-------------------------------> movea.l d0,a1
  FreeVec( tmpbuffer);
    1a4e:	            |  |              |     |  |                                 lea 1a7a4 <SysBase>,a0
    1a54:	            |  |              |     |  |                                 movea.l (a0),a6
    1a56:	            |  |              |     |  |                                 jsr -690(a6)
    WaitBlit();
    1a5a:	            |  |              |     |  '-------------------------------> movea.l 1a7b0 <GfxBase>,a6
    1a60:	            |  |              |     |                                    jsr -228(a6)
    custom->bltafwm = 0xffff;
    1a64:	            |  |              |     |                                    move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
    custom->bltalwm = 0xffff;
    1a6c:	            |  |              |     |                                    move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
    custom->bltamod = 0;
    1a74:	            |  |              |     |                                    move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
    custom->bltbmod = 0;
    1a7c:	            |  |              |     |                                    move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e09>
    custom->bltcmod = 0;
    1a84:	            |  |              |     |                                    move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e07>
    custom->bltdmod = 0;
    1a8c:	            |  |              |     |                                    move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1a94:	            |  |              |     |                                    move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
    custom->bltcon1 = 0;        
    1a9c:	            |  |              |     |                                    move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1aa4:	            |  |              |     |                                    move.l (a3),d2
    1aa6:	            |  |              |     |                                    move.l 4(a3),d3
    1aaa:	            |  |              |     |                                    move.l d2,d0
    1aac:	            |  |              |     |                          ,-------- bmi.w 1b32 <CstDrawZBuffer+0x64a>
    1ab0:	            |  |              |     |                          |         asr.l #3,d0
    1ab2:	            |  |              |     |                          |         move.l d3,-(sp)
    1ab4:	            |  |              |     |                          |         move.l d0,-(sp)
    1ab6:	            |  |              |     |                          |         jsr (a4)
    1ab8:	            |  |              |     |                          |         addq.l #8,sp
    1aba:	            |  |              |     |                          |         move.l d0,d1
    1abc:	            |  |              |     |                          |         add.l d0,d1
    1abe:	            |  |              |     |                          |         add.l d1,d1
    1ac0:	            |  |              |     |                          |         add.l d1,d0
    1ac2:	            |  |              |     |                          |         add.l 24(a3),d0
    1ac6:	            |  |              |     |                          |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltdpt = (APTR) returnvalue;
    1acc:	            |  |              |     |                          |         move.l 64(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1ad4:	            |  |              |     |                          |         lsl.w #6,d3
    1ad6:	            |  |              |     |                          |         tst.l d2
    1ad8:	            |  |              |     |                       ,--|-------- blt.s 1b22 <CstDrawZBuffer+0x63a>
    1ada:	            |  |              |     |                       |  |  ,----> asr.l #4,d2
    1adc:	            |  |              |     |                       |  |  |      add.w d2,d3
    1ade:	            |  |              |     |                       |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
}
    1ae4:	            |  |              |     |                       |  |  |  ,-> move.l 64(sp),d0
    1ae8:	            |  |              |     |                       |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1aec:	            |  |              |     |                       |  |  |  |   lea 28(sp),sp
    1af0:	            |  |              |     |                       |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1af2:	            |  |              '-----|-----------------------|--|--|--|-> addq.l #7,d1
    1af4:	            |  |                    |                       |  |  |  |   asr.l #3,d1
    1af6:	            |  |                    |                       |  |  |  |   sub.w d2,d1
    1af8:	            |  |                    |                       |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
            custom->bltdmod = 2;                                                            
    1afe:	            |  |                    |                       |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
    1b06:	            |  |                    '-----------------------|--|--|--|-- bra.w 17b2 <CstDrawZBuffer+0x2ca>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1b0a:	            '--|--------------------------------------------|--|--|--|-> addq.l #7,d1
    1b0c:	               |                                            |  |  |  |   asr.l #3,d1
    1b0e:	               |                                            |  |  |  |   sub.w d2,d1
    1b10:	               |                                            |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
            custom->bltdmod = 0;                                                            
    1b16:	               |                                            |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
    1b1e:	               '--------------------------------------------|--|--|--|-- bra.w 1648 <CstDrawZBuffer+0x160>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b22:	                                                            >--|--|--|-> moveq #15,d0
    1b24:	                                                            |  |  |  |   add.l d0,d2
    1b26:	                                                            |  |  |  |   asr.l #4,d2
    1b28:	                                                            |  |  |  |   add.w d2,d3
    1b2a:	                                                            |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    1b30:	                                                            |  |  |  '-- bra.s 1ae4 <CstDrawZBuffer+0x5fc>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1b32:	                                                            |  '--|----> addq.l #7,d0
    1b34:	                                                            |     |      asr.l #3,d0
    1b36:	                                                            |     |      move.l d3,-(sp)
    1b38:	                                                            |     |      move.l d0,-(sp)
    1b3a:	                                                            |     |      jsr (a4)
    1b3c:	                                                            |     |      addq.l #8,sp
    1b3e:	                                                            |     |      move.l d0,d1
    1b40:	                                                            |     |      add.l d0,d1
    1b42:	                                                            |     |      add.l d1,d1
    1b44:	                                                            |     |      add.l d1,d0
    1b46:	                                                            |     |      add.l 24(a3),d0
    1b4a:	                                                            |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltdpt = (APTR) returnvalue;
    1b50:	                                                            |     |      move.l 64(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b58:	                                                            |     |      lsl.w #6,d3
    1b5a:	                                                            |     |      tst.l d2
    1b5c:	                                                            |     '----- bge.w 1ada <CstDrawZBuffer+0x5f2>
    1b60:	                                                            '----------- bra.s 1b22 <CstDrawZBuffer+0x63a>

00001b62 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1b62:	    lea -20(sp),sp
    1b66:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1b68:	    move.l 1a6d8 <CstDrawBuffer>,d0
    1b6e:	,-- beq.s 1b88 <CstFreeBuffer+0x26>
    1b70:	|   move.l 1a6d8 <CstDrawBuffer>,20(sp)
    1b78:	|   move.l 1a7a4 <SysBase>,d0
    1b7e:	|   movea.l d0,a6
    1b80:	|   movea.l 20(sp),a1
    1b84:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1b88:	'-> move.l 1a6d4 <CstViewBuffer>,d0
    1b8e:	,-- beq.s 1ba8 <CstFreeBuffer+0x46>
    1b90:	|   move.l 1a6d4 <CstViewBuffer>,16(sp)
    1b98:	|   move.l 1a7a4 <SysBase>,d0
    1b9e:	|   movea.l d0,a6
    1ba0:	|   movea.l 16(sp),a1
    1ba4:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1ba8:	'-> move.l 1a6ce <CstCopperList>,d0
    1bae:	,-- beq.s 1bc8 <CstFreeBuffer+0x66>
    1bb0:	|   move.l 1a6ce <CstCopperList>,12(sp)
    1bb8:	|   move.l 1a7a4 <SysBase>,d0
    1bbe:	|   movea.l d0,a6
    1bc0:	|   movea.l 12(sp),a1
    1bc4:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1bc8:	'-> move.l 1a6c6 <CstBackDrop>,d0
    1bce:	,-- beq.s 1be8 <CstFreeBuffer+0x86>
    1bd0:	|   move.l 1a6c6 <CstBackDrop>,8(sp)
    1bd8:	|   move.l 1a7a4 <SysBase>,d0
    1bde:	|   movea.l d0,a6
    1be0:	|   movea.l 8(sp),a1
    1be4:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1be8:	'-> move.l 1a6ca <CstBackDropBackup>,d0
    1bee:	,-- beq.s 1c08 <CstFreeBuffer+0xa6>
    1bf0:	|   move.l 1a6ca <CstBackDropBackup>,4(sp)
    1bf8:	|   move.l 1a7a4 <SysBase>,d0
    1bfe:	|   movea.l d0,a6
    1c00:	|   movea.l 4(sp),a1
    1c04:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1c08:	'-> clr.l 1a6d8 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1c0e:	    clr.l 1a6d4 <CstViewBuffer>
  CstCopperList = NULL;
    1c14:	    clr.l 1a6ce <CstCopperList>
  CstBackDrop = NULL;
    1c1a:	    clr.l 1a6c6 <CstBackDrop>

}
    1c20:	    nop
    1c22:	    movea.l (sp)+,a6
    1c24:	    lea 20(sp),sp
    1c28:	    rts

00001c2a <CstFreeze>:



void CstFreeze( ) {
    1c2a:	       lea -36(sp),sp
    1c2e:	       move.l a6,-(sp)
    1c30:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1c32:	       pea 17b90 <PutChar+0x1b4>
    1c38:	       jsr 16f3a <KPrintF>
    1c3e:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1c40:	       move.l 1a6f8 <winWidth>,d0
    1c46:	       lsr.l #3,d0
    1c48:	       move.l d0,d1
    1c4a:	       move.l 1a6fc <winHeight>,d0
    1c50:	       move.l d0,d0
    1c52:	       muls.w d0,d1
    1c54:	       move.w d1,d0
    1c56:	       add.w d0,d0
    1c58:	       add.w d0,d0
    1c5a:	       move.w d0,d2
    1c5c:	       add.w d1,d2
    1c5e:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1c62:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1c6a:	       moveq #0,d0
    1c6c:	       move.w 26(sp),d0
    1c70:	       move.l d0,18(sp)
    1c74:	       clr.l 14(sp)
    1c78:	       move.l 1a7a4 <SysBase>,d0
    1c7e:	       movea.l d0,a6
    1c80:	       move.l 18(sp),d0
    1c84:	       move.l 14(sp),d1
    1c88:	       jsr -684(a6)
    1c8c:	       move.l d0,10(sp)
    1c90:	       move.l 10(sp),d0
    1c94:	       move.l d0,1a6ca <CstBackDropBackup>
  if( !CstBackDropBackup)
    1c9a:	       move.l 1a6ca <CstBackDropBackup>,d0
    1ca0:	   ,-- bne.s 1cb0 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1ca2:	   |   pea 17bb7 <PutChar+0x1db>
    1ca8:	   |   jsr 16f3a <KPrintF>
    1cae:	   |   addq.l #4,sp

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1cb0:	   '-> move.l 1a6c6 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1cb8:	       move.l 1a6ca <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1cc0:	       clr.l 32(sp)
    1cc4:	   ,-- bra.s 1cea <CstFreeze+0xc0>
  {
    *dst++ = *src++;
    1cc6:	,--|-> move.l 40(sp),d1
    1cca:	|  |   move.l d1,d0
    1ccc:	|  |   addq.l #4,d0
    1cce:	|  |   move.l d0,40(sp)
    1cd2:	|  |   move.l 36(sp),d0
    1cd6:	|  |   move.l d0,d2
    1cd8:	|  |   addq.l #4,d2
    1cda:	|  |   move.l d2,36(sp)
    1cde:	|  |   movea.l d1,a0
    1ce0:	|  |   move.l (a0),d1
    1ce2:	|  |   movea.l d0,a0
    1ce4:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1ce6:	|  |   addq.l #1,32(sp)
    1cea:	|  '-> move.w 26(sp),d0
    1cee:	|      lsr.w #2,d0
    1cf0:	|      move.w d0,d0
    1cf2:	|      andi.l #65535,d0
    1cf8:	|      cmp.l 32(sp),d0
    1cfc:	'----- bgt.s 1cc6 <CstFreeze+0x9c>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1cfe:	       move.l 1a6d4 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1d06:	       move.l 1a6c6 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1d0e:	       clr.l 28(sp)
    1d12:	   ,-- bra.s 1d38 <CstFreeze+0x10e>
  {
    *dst++ = *src++;
    1d14:	,--|-> move.l 40(sp),d1
    1d18:	|  |   move.l d1,d0
    1d1a:	|  |   addq.l #4,d0
    1d1c:	|  |   move.l d0,40(sp)
    1d20:	|  |   move.l 36(sp),d0
    1d24:	|  |   move.l d0,d2
    1d26:	|  |   addq.l #4,d2
    1d28:	|  |   move.l d2,36(sp)
    1d2c:	|  |   movea.l d1,a0
    1d2e:	|  |   move.l (a0),d1
    1d30:	|  |   movea.l d0,a0
    1d32:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d34:	|  |   addq.l #1,28(sp)
    1d38:	|  '-> move.w 26(sp),d0
    1d3c:	|      lsr.w #2,d0
    1d3e:	|      move.w d0,d0
    1d40:	|      andi.l #65535,d0
    1d46:	|      cmp.l 28(sp),d0
    1d4a:	'----- bgt.s 1d14 <CstFreeze+0xea>
  }

  CstApplyBackDropCounter = 2;
    1d4c:	       move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1d54:	       move.l 1a6f8 <winWidth>,d0
    1d5a:	       lsr.l #4,d0
    1d5c:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1d62:	       move.l a0,d1
    1d64:	       addq.l #2,d1
    1d66:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1d6c:	       move.l d0,d0
    1d6e:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1d70:	       move.l 1a6fc <winHeight>,d0
    1d76:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1d7c:	       move.l a0,d1
    1d7e:	       addq.l #2,d1
    1d80:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1d86:	       move.l d0,d0
    1d88:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d8a:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1d90:	       move.l a0,d0
    1d92:	       addq.l #2,d0
    1d94:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1d9a:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d9c:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1da2:	       move.l a0,d0
    1da4:	       addq.l #2,d0
    1da6:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1dac:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1dae:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1db4:	       move.l a0,d0
    1db6:	       addq.l #2,d0
    1db8:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1dbe:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1dc0:	       pea 17bef <PutChar+0x213>
    1dc6:	       jsr 16f3a <KPrintF>
    1dcc:	       addq.l #4,sp

}  
    1dce:	       nop
    1dd0:	       move.l (sp)+,d2
    1dd2:	       movea.l (sp)+,a6
    1dd4:	       lea 36(sp),sp
    1dd8:	       rts

00001dda <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1dda:	             lea -144(sp),sp
    1dde:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1de2:	             pea 17c03 <PutChar+0x227>
    1de8:	             jsr 16f3a <KPrintF>
    1dee:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1df0:	             move.l 164(sp),-(sp)
    1df4:	             jsr 6bc <get2bytes>
    1dfa:	             addq.l #4,sp
    1dfc:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1e00:	             move.l 164(sp),-(sp)
    1e04:	             jsr 6bc <get2bytes>
    1e0a:	             addq.l #4,sp
    1e0c:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1e10:	             move.w 134(sp),d0
    1e14:	             lsr.w #3,d0
    1e16:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1e1a:	             move.w 130(sp),d0
    1e1e:	             lsr.w #1,d0
    1e20:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1e24:	             move.l 1a6f8 <winWidth>,d0
    1e2a:	             lsr.l #3,d0
    1e2c:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1e30:	             move.w 130(sp),d0
    1e34:	             muls.w 132(sp),d0
    1e38:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1e3c:	             move.w 124(sp),d1
    1e40:	             move.w d1,d0
    1e42:	             add.w d0,d0
    1e44:	             add.w d0,d0
    1e46:	             move.w d0,d2
    1e48:	             add.w d1,d2
    1e4a:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1e4e:	             move.w 1a6c0 <CstPaletteLoaded>,d0
    1e54:	,----------- bne.w 1eee <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1e58:	|            move.w #384,120(sp)

    if(CstPalette) {
    1e5e:	|            move.l 1a6f0 <CstPalette>,d0
    1e64:	|        ,-- beq.s 1e7e <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1e66:	|        |   move.l 1a6f0 <CstPalette>,116(sp)
    1e6e:	|        |   move.l 1a7a4 <SysBase>,d0
    1e74:	|        |   movea.l d0,a6
    1e76:	|        |   movea.l 116(sp),a1
    1e7a:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1e7e:	|        '-> moveq #64,d0
    1e80:	|            move.l d0,112(sp)
    1e84:	|            clr.l 108(sp)
    1e88:	|            move.l 1a7a4 <SysBase>,d0
    1e8e:	|            movea.l d0,a6
    1e90:	|            move.l 112(sp),d0
    1e94:	|            move.l 108(sp),d1
    1e98:	|            jsr -684(a6)
    1e9c:	|            move.l d0,104(sp)
    1ea0:	|            move.l 104(sp),d0
    1ea4:	|            move.l d0,1a6f0 <CstPalette>
    CstPaletteLoaded = 1;
    1eaa:	|            move.w #1,1a6c0 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1eb2:	|            move.l 1a6f0 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1eba:	|            clr.l 152(sp)
    1ebe:	|        ,-- bra.s 1ee4 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1ec0:	|     ,--|-> move.l 164(sp),-(sp)
    1ec4:	|     |  |   jsr 6bc <get2bytes>
    1eca:	|     |  |   addq.l #4,sp
    1ecc:	|     |  |   move.l d0,d1
    1ece:	|     |  |   move.l 156(sp),d0
    1ed2:	|     |  |   move.l d0,d2
    1ed4:	|     |  |   addq.l #2,d2
    1ed6:	|     |  |   move.l d2,156(sp)
    1eda:	|     |  |   move.l d1,d1
    1edc:	|     |  |   movea.l d0,a0
    1ede:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ee0:	|     |  |   addq.l #1,152(sp)
    1ee4:	|     |  '-> moveq #31,d0
    1ee6:	|     |      cmp.l 152(sp),d0
    1eea:	|     '----- bge.s 1ec0 <CstLoadBackdrop+0xe6>
    1eec:	|  ,-------- bra.s 1f0c <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1eee:	'--|-------> clr.l 148(sp)
    1ef2:	   |     ,-- bra.s 1f04 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1ef4:	   |  ,--|-> move.l 164(sp),-(sp)
    1ef8:	   |  |  |   jsr 6bc <get2bytes>
    1efe:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1f00:	   |  |  |   addq.l #1,148(sp)
    1f04:	   |  |  '-> moveq #31,d2
    1f06:	   |  |      cmp.l 148(sp),d2
    1f0a:	   |  '----- bge.s 1ef4 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1f0c:	   '-------> moveq #0,d0
    1f0e:	             move.w 122(sp),d0
    1f12:	             move.l d0,100(sp)
    1f16:	             moveq #2,d0
    1f18:	             move.l d0,96(sp)
    1f1c:	             move.l 1a7a4 <SysBase>,d0
    1f22:	             movea.l d0,a6
    1f24:	             move.l 100(sp),d0
    1f28:	             move.l 96(sp),d1
    1f2c:	             jsr -684(a6)
    1f30:	             move.l d0,92(sp)
    1f34:	             move.l 92(sp),d0
    1f38:	             move.l d0,88(sp)
  if( !tmpbuffer)
    1f3c:	         ,-- bne.s 1f4c <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1f3e:	         |   pea 17c32 <PutChar+0x256>
    1f44:	         |   jsr 16f3a <KPrintF>
    1f4a:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1f4c:	         '-> moveq #0,d0
    1f4e:	             move.w 124(sp),d0
    1f52:	             move.l d0,84(sp)
    1f56:	             moveq #2,d2
    1f58:	             move.l d2,80(sp)
    1f5c:	             move.l 1a7a4 <SysBase>,d0
    1f62:	             movea.l d0,a6
    1f64:	             move.l 84(sp),d0
    1f68:	             move.l 80(sp),d1
    1f6c:	             jsr -684(a6)
    1f70:	             move.l d0,76(sp)
    1f74:	             move.l 76(sp),d0
    1f78:	             move.l d0,72(sp)
  if( !tmpmask)
    1f7c:	         ,-- bne.s 1f8c <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1f7e:	         |   pea 17c68 <PutChar+0x28c>
    1f84:	         |   jsr 16f3a <KPrintF>
    1f8a:	         |   addq.l #4,sp
#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1f8c:	         '-> move.l 164(sp),68(sp)
    1f92:	             move.l 88(sp),64(sp)
    1f98:	             moveq #2,d0
    1f9a:	             move.l d0,60(sp)
    1f9e:	             move.w 122(sp),d0
    1fa2:	             lsr.w #1,d0
    1fa4:	             move.w d0,d0
    1fa6:	             andi.l #65535,d0
    1fac:	             move.l d0,56(sp)
    1fb0:	             move.l 1a7ac <DOSBase>,d0
    1fb6:	             movea.l d0,a6
    1fb8:	             move.l 68(sp),d1
    1fbc:	             move.l 64(sp),d2
    1fc0:	             move.l 60(sp),d3
    1fc4:	             move.l 56(sp),d4
    1fc8:	             jsr -324(a6)
    1fcc:	             move.l d0,52(sp)
    1fd0:	             move.l 52(sp),d0
    1fd4:	             move.w d0,50(sp)
  if(!count) {
    1fd8:	         ,-- bne.s 1fec <CstLoadBackdrop+0x212>
    KPrintF("Error while reading stream");
    1fda:	         |   pea 17c9c <PutChar+0x2c0>
    1fe0:	         |   jsr 16f3a <KPrintF>
    1fe6:	         |   addq.l #4,sp
    return;
    1fe8:	   ,-----|-- bra.w 2238 <CstLoadBackdrop+0x45e>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    1fec:	   |     '-> move.l 164(sp),46(sp)
    1ff2:	   |         move.l 72(sp),42(sp)
    1ff8:	   |         moveq #2,d2
    1ffa:	   |         move.l d2,38(sp)
    1ffe:	   |         move.w 124(sp),d0
    2002:	   |         lsr.w #1,d0
    2004:	   |         move.w d0,d0
    2006:	   |         andi.l #65535,d0
    200c:	   |         move.l d0,34(sp)
    2010:	   |         move.l 1a7ac <DOSBase>,d0
    2016:	   |         movea.l d0,a6
    2018:	   |         move.l 46(sp),d1
    201c:	   |         move.l 42(sp),d2
    2020:	   |         move.l 38(sp),d3
    2024:	   |         move.l 34(sp),d4
    2028:	   |         jsr -324(a6)
    202c:	   |         move.l d0,30(sp)
    2030:	   |         move.l 30(sp),d0
    2034:	   |         move.w d0,50(sp)
   

  if(!count) {
    2038:	   |     ,-- bne.s 204c <CstLoadBackdrop+0x272>
    KPrintF("Error while reading stream");
    203a:	   |     |   pea 17c9c <PutChar+0x2c0>
    2040:	   |     |   jsr 16f3a <KPrintF>
    2046:	   |     |   addq.l #4,sp
    return;
    2048:	   +-----|-- bra.w 2238 <CstLoadBackdrop+0x45e>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    204c:	   |     '-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    2054:	   |         move.l 1a6c6 <CstBackDrop>,d0
    205a:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    205e:	   |         move.l 172(sp),d0
    2062:	   |         move.w d0,d1
    2064:	   |         muls.w 126(sp),d1
    2068:	   |         move.l 168(sp),d0
    206c:	   |     ,-- bpl.s 2070 <CstLoadBackdrop+0x296>
    206e:	   |     |   addq.l #7,d0
    2070:	   |     '-> asr.l #3,d0
    2072:	   |         move.l d0,d0
    2074:	   |         movea.w d1,a0
    2076:	   |         adda.w d0,a0
    2078:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    207c:	   |         moveq #0,d0
    207e:	   |         move.w 24(sp),d0
    2082:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    2086:	   |         pea 17cb7 <PutChar+0x2db>
    208c:	   |         jsr 16f3a <KPrintF>
    2092:	   |         addq.l #4,sp


  WaitBlit();
    2094:	   |         move.l 1a7b0 <GfxBase>,d0
    209a:	   |         movea.l d0,a6
    209c:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    20a0:	   |         movea.l 26(sp),a0
    20a4:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    20aa:	   |         movea.l 26(sp),a0
    20ae:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    20b4:	   |         movea.l 26(sp),a0
    20b8:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    20be:	   |         movea.l 26(sp),a0
    20c2:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    20c8:	   |         move.w 126(sp),d0
    20cc:	   |         sub.w 130(sp),d0
    20d0:	   |         movea.l 26(sp),a0
    20d4:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    20d8:	   |         move.w 126(sp),d0
    20dc:	   |         sub.w 130(sp),d0
    20e0:	   |         movea.l 26(sp),a0
    20e4:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    20e8:	   |         movea.l 26(sp),a0
    20ec:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    20f2:	   |         movea.l 26(sp),a0
    20f6:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    20fc:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2102:	   |         clr.l 136(sp)
    2106:	   |     ,-- bra.s 2168 <CstLoadBackdrop+0x38e>
  {    
    custom->bltapt = (APTR) tmpmask;
    2108:	   |  ,--|-> movea.l 26(sp),a0
    210c:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2112:	   |  |  |   move.l 140(sp),d0
    2116:	   |  |  |   movea.l 26(sp),a0
    211a:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    211e:	   |  |  |   move.l 144(sp),d0
    2122:	   |  |  |   movea.l 26(sp),a0
    2126:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    212a:	   |  |  |   move.l 144(sp),d0
    212e:	   |  |  |   movea.l 26(sp),a0
    2132:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    2136:	   |  |  |   move.w 132(sp),d0
    213a:	   |  |  |   lsl.w #6,d0
    213c:	   |  |  |   add.w 128(sp),d0
    2140:	   |  |  |   movea.l 26(sp),a0
    2144:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    2148:	   |  |  |   moveq #0,d0
    214a:	   |  |  |   move.w 124(sp),d0
    214e:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    2152:	   |  |  |   move.w 1a6c4 <CstBackdropSizePlane>,d0
    2158:	   |  |  |   move.w d0,d0
    215a:	   |  |  |   andi.l #65535,d0
    2160:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2164:	   |  |  |   addq.l #1,136(sp)
    2168:	   |  |  '-> moveq #4,d0
    216a:	   |  |      cmp.l 136(sp),d0
    216e:	   |  '----- bge.s 2108 <CstLoadBackdrop+0x32e>
  }    

  WaitBlit();
    2170:	   |         move.l 1a7b0 <GfxBase>,d0
    2176:	   |         movea.l d0,a6
    2178:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    217c:	   |         pea 17cd6 <PutChar+0x2fa>
    2182:	   |         jsr 16f3a <KPrintF>
    2188:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    218a:	   |         move.l 88(sp),20(sp)
    2190:	   |         move.l 1a7a4 <SysBase>,d0
    2196:	   |         movea.l d0,a6
    2198:	   |         movea.l 20(sp),a1
    219c:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    21a0:	   |         move.l 72(sp),16(sp)
    21a6:	   |         move.l 1a7a4 <SysBase>,d0
    21ac:	   |         movea.l d0,a6
    21ae:	   |         movea.l 16(sp),a1
    21b2:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    21b6:	   |         move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    21be:	   |         move.l 1a6f8 <winWidth>,d0
    21c4:	   |         lsr.l #4,d0
    21c6:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    21cc:	   |         move.l a0,d1
    21ce:	   |         addq.l #2,d1
    21d0:	   |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    21d6:	   |         move.l d0,d0
    21d8:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    21da:	   |         move.l 1a6fc <winHeight>,d0
    21e0:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    21e6:	   |         move.l a0,d1
    21e8:	   |         addq.l #2,d1
    21ea:	   |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    21f0:	   |         move.l d0,d0
    21f2:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    21f4:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    21fa:	   |         move.l a0,d0
    21fc:	   |         addq.l #2,d0
    21fe:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2204:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2206:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    220c:	   |         move.l a0,d0
    220e:	   |         addq.l #2,d0
    2210:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2216:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2218:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    221e:	   |         move.l a0,d0
    2220:	   |         addq.l #2,d0
    2222:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2228:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    222a:	   |         pea 17cf6 <PutChar+0x31a>
    2230:	   |         jsr 16f3a <KPrintF>
    2236:	   |         addq.l #4,sp

}
    2238:	   '-------> movem.l (sp)+,d2-d4/a6
    223c:	             lea 144(sp),sp
    2240:	             rts

00002242 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    2242:	                lea -72(sp),sp
    2246:	                move.l a6,-(sp)
    2248:	                move.l d2,-(sp)
    224a:	                move.l 88(sp),d1
    224e:	                move.l 92(sp),d0
    2252:	                move.w d1,d1
    2254:	                move.w d1,10(sp)
    2258:	                move.w d0,d0
    225a:	                move.w d0,8(sp)
  UWORD *destination = 0;
    225e:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    2262:	                move.w #2,1a6d2 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    226a:	                move.l 1a6c6 <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    2272:	                clr.l 56(sp)

  blitwidth = single->width/16;
    2276:	                movea.l 84(sp),a0
    227a:	                move.l (a0),d0
    227c:	                movea.l d0,a0
    227e:	                cmpa.w #0,a0
    2282:	            ,-- bge.s 2288 <CstPasteChar+0x46>
    2284:	            |   lea 15(a0),a0
    2288:	            '-> move.l a0,d0
    228a:	                asr.l #4,d0
    228c:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    2290:	            ,-- bne.s 2298 <CstPasteChar+0x56>
    2292:	            |   moveq #1,d0
    2294:	            |   move.l d0,40(sp)

  if( y < 0) {
    2298:	            '-> tst.w 8(sp)
    229c:	         ,----- bge.s 22e6 <CstPasteChar+0xa4>
    if(y + single->height < 0) {
    229e:	         |      movea.w 8(sp),a1
    22a2:	         |      movea.l 84(sp),a0
    22a6:	         |      move.l 4(a0),d0
    22aa:	         |      add.l a1,d0
    22ac:	         |  ,-- bpl.s 22c0 <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    22ae:	         |  |   pea 17d10 <PutChar+0x334>
    22b4:	         |  |   jsr 16f3a <KPrintF>
    22ba:	         |  |   addq.l #4,sp
      return;
    22bc:	,--------|--|-- bra.w 2982 <CstPasteChar+0x740>
    }
    ystartdst = 0;
    22c0:	|        |  '-> clr.l 52(sp)
    ystartsrc = y*-1;
    22c4:	|        |      move.w 8(sp),d0
    22c8:	|        |      ext.l d0
    22ca:	|        |      move.l d0,d1
    22cc:	|        |      neg.l d1
    22ce:	|        |      move.l d1,48(sp)
    blitheight = single->height+y;
    22d2:	|        |      movea.l 84(sp),a0
    22d6:	|        |      move.l 4(a0),d0
    22da:	|        |      movea.w 8(sp),a0
    22de:	|        |      add.l a0,d0
    22e0:	|        |      move.l d0,44(sp)
    22e4:	|     ,--|----- bra.s 2358 <CstPasteChar+0x116>
  } else if(y+single->height > (int) winHeight) {
    22e6:	|     |  '----> movea.w 8(sp),a1
    22ea:	|     |         movea.l 84(sp),a0
    22ee:	|     |         move.l 4(a0),d0
    22f2:	|     |         move.l a1,d1
    22f4:	|     |         add.l d0,d1
    22f6:	|     |         move.l 1a6fc <winHeight>,d0
    22fc:	|     |         cmp.l d1,d0
    22fe:	|     |  ,----- bge.s 2340 <CstPasteChar+0xfe>
    if(y  > (int) winHeight) {
    2300:	|     |  |      movea.w 8(sp),a0
    2304:	|     |  |      move.l 1a6fc <winHeight>,d0
    230a:	|     |  |      cmp.l a0,d0
    230c:	|     |  |  ,-- bge.s 2320 <CstPasteChar+0xde>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    230e:	|     |  |  |   pea 17d10 <PutChar+0x334>
    2314:	|     |  |  |   jsr 16f3a <KPrintF>
    231a:	|     |  |  |   addq.l #4,sp
      return;
    231c:	+-----|--|--|-- bra.w 2982 <CstPasteChar+0x740>
    }
    ystartdst = y;
    2320:	|     |  |  '-> movea.w 8(sp),a0
    2324:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    2328:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    232c:	|     |  |      move.l 1a6fc <winHeight>,d0
    2332:	|     |  |      movea.w 8(sp),a0
    2336:	|     |  |      move.l d0,d1
    2338:	|     |  |      sub.l a0,d1
    233a:	|     |  |      move.l d1,44(sp)
    233e:	|     +--|----- bra.s 2358 <CstPasteChar+0x116>
  } else {
    ystartdst = y;
    2340:	|     |  '----> movea.w 8(sp),a0
    2344:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    2348:	|     |         clr.l 48(sp)
    blitheight = single->height;
    234c:	|     |         movea.l 84(sp),a0
    2350:	|     |         move.l 4(a0),d0
    2354:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    2358:	|     '-------> tst.w 10(sp)
    235c:	|        ,----- bge.w 24ce <CstPasteChar+0x28c>
    if(x + single->width < 0) {
    2360:	|        |      movea.w 10(sp),a1
    2364:	|        |      movea.l 84(sp),a0
    2368:	|        |      move.l (a0),d0
    236a:	|        |      add.l a1,d0
    236c:	|        |  ,-- bpl.s 2380 <CstPasteChar+0x13e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    236e:	|        |  |   pea 17d10 <PutChar+0x334>
    2374:	|        |  |   jsr 16f3a <KPrintF>
    237a:	|        |  |   addq.l #4,sp
      return;
    237c:	+--------|--|-- bra.w 2982 <CstPasteChar+0x740>

    }
    
    extrawords = 1;
    2380:	|        |  '-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    2386:	|        |      move.w 10(sp),d0
    238a:	|        |  ,-- bpl.s 2390 <CstPasteChar+0x14e>
    238c:	|        |  |   addi.w #15,d0
    2390:	|        |  '-> asr.w #4,d0
    2392:	|        |      neg.w d0
    2394:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    2398:	|        |      move.w 10(sp),d0
    239c:	|        |      ext.l d0
    239e:	|        |      neg.l d0
    23a0:	|        |      andi.l #-2147483633,d0
    23a6:	|        |  ,-- bpl.s 23b0 <CstPasteChar+0x16e>
    23a8:	|        |  |   subq.l #1,d0
    23aa:	|        |  |   moveq #-16,d1
    23ac:	|        |  |   or.l d1,d0
    23ae:	|        |  |   addq.l #1,d0
    23b0:	|        |  '-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    23b4:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    23b8:	|        |      movea.l 84(sp),a0
    23bc:	|        |      move.l 24(a0),d0
    23c0:	|        |      move.l d0,d1
    23c2:	|        |      moveq #0,d0
    23c4:	|        |      move.w 76(sp),d0
    23c8:	|        |      add.l d0,d0
    23ca:	|        |      move.l d1,d2
    23cc:	|        |      add.l d0,d2
    23ce:	|        |      movea.l 84(sp),a0
    23d2:	|        |      move.l (a0),d0
    23d4:	|        |      move.l 48(sp),-(sp)
    23d8:	|        |      move.l d0,-(sp)
    23da:	|        |      jsr 178c6 <__mulsi3>
    23e0:	|        |      addq.l #8,sp
    23e2:	|        |      lsr.l #3,d0
    23e4:	|        |      move.l d2,d1
    23e6:	|        |      add.l d0,d1
    23e8:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    23ec:	|        |      move.l 1a6f8 <winWidth>,d0
    23f2:	|        |      move.l 52(sp),-(sp)
    23f6:	|        |      move.l d0,-(sp)
    23f8:	|        |      jsr 178c6 <__mulsi3>
    23fe:	|        |      addq.l #8,sp
    2400:	|        |      lsr.l #3,d0
    2402:	|        |      move.l 28(sp),d1
    2406:	|        |      add.l d1,d0
    2408:	|        |      move.l d0,d2
    240a:	|        |      subq.l #2,d2
    240c:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2410:	|        |      move.l 1a6f8 <winWidth>,d0
    2416:	|        |      move.l 52(sp),-(sp)
    241a:	|        |      move.l d0,-(sp)
    241c:	|        |      jsr 178c6 <__mulsi3>
    2422:	|        |      addq.l #8,sp
    2424:	|        |      lsr.l #3,d0
    2426:	|        |      move.l 28(sp),d1
    242a:	|        |      add.l d1,d0
    242c:	|        |      move.l d0,d1
    242e:	|        |      subq.l #2,d1
    2430:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    2434:	|        |      moveq #0,d0
    2436:	|        |      move.w 74(sp),d0
    243a:	|        |      moveq #16,d1
    243c:	|        |      sub.l d0,d1
    243e:	|        |      move.l d1,d0
    2440:	|        |      moveq #12,d2
    2442:	|        |      lsl.l d2,d0
    2444:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2448:	|        |      movea.l 84(sp),a0
    244c:	|        |      move.l (a0),d0
    244e:	|        |      movea.l d0,a0
    2450:	|        |      cmpa.w #0,a0
    2454:	|        |  ,-- bge.s 245a <CstPasteChar+0x218>
    2456:	|        |  |   lea 15(a0),a0
    245a:	|        |  '-> move.l a0,d0
    245c:	|        |      asr.l #4,d0
    245e:	|        |      move.l d0,d0
    2460:	|        |      add.w 76(sp),d0
    2464:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    246a:	|        |      move.l a0,d1
    246c:	|        |      addq.l #2,d1
    246e:	|        |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2474:	|        |      add.w 78(sp),d0
    2478:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    247a:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2480:	|        |      move.l a0,d0
    2482:	|        |      addq.l #2,d0
    2484:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    248a:	|        |      move.l 44(sp),d0
    248e:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2490:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2496:	|        |      move.l a0,d0
    2498:	|        |      addq.l #2,d0
    249a:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    24a0:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    24a2:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    24a8:	|        |      move.l a0,d0
    24aa:	|        |      addq.l #2,d0
    24ac:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    24b2:	|        |      move.l 52(sp),d0
    24b6:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    24b8:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    24be:	|        |      move.l a0,d0
    24c0:	|        |      addq.l #2,d0
    24c2:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    24c8:	|        |      clr.w (a0)
    24ca:	|     ,--|----- bra.w 27e2 <CstPasteChar+0x5a0>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    24ce:	|     |  '----> movea.w 10(sp),a1
    24d2:	|     |         movea.l 84(sp),a0
    24d6:	|     |         move.l (a0),d0
    24d8:	|     |         move.l a1,d1
    24da:	|     |         add.l d0,d1
    24dc:	|     |         move.l 1a6f8 <winWidth>,d0
    24e2:	|     |         cmp.l d1,d0
    24e4:	|     |  ,----- bge.w 2680 <CstPasteChar+0x43e>

    if(x - single->width > (int) winWidth)
    24e8:	|     |  |      movea.w 10(sp),a1
    24ec:	|     |  |      movea.l 84(sp),a0
    24f0:	|     |  |      move.l (a0),d0
    24f2:	|     |  |      move.l a1,d1
    24f4:	|     |  |      sub.l d0,d1
    24f6:	|     |  |      move.l 1a6f8 <winWidth>,d0
    24fc:	|     |  |      cmp.l d1,d0
    24fe:	|     |  |  ,-- bge.s 2512 <CstPasteChar+0x2d0>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2500:	|     |  |  |   pea 17d10 <PutChar+0x334>
    2506:	|     |  |  |   jsr 16f3a <KPrintF>
    250c:	|     |  |  |   addq.l #4,sp
      return;
    250e:	+-----|--|--|-- bra.w 2982 <CstPasteChar+0x740>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2512:	|     |  |  '-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2516:	|     |  |      movea.w 10(sp),a1
    251a:	|     |  |      movea.l 84(sp),a0
    251e:	|     |  |      move.l (a0),d0
    2520:	|     |  |      add.l a1,d0
    2522:	|     |  |      move.l d0,d1
    2524:	|     |  |      move.l 1a6f8 <winWidth>,d0
    252a:	|     |  |      sub.l d0,d1
    252c:	|     |  |      move.l d1,d0
    252e:	|     |  |      lsr.l #4,d0
    2530:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    2534:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2538:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    253e:	|     |  |      movea.l 84(sp),a0
    2542:	|     |  |      move.l 24(a0),d0
    2546:	|     |  |      move.l d0,d2
    2548:	|     |  |      movea.l 84(sp),a0
    254c:	|     |  |      move.l (a0),d0
    254e:	|     |  |      move.l 48(sp),-(sp)
    2552:	|     |  |      move.l d0,-(sp)
    2554:	|     |  |      jsr 178c6 <__mulsi3>
    255a:	|     |  |      addq.l #8,sp
    255c:	|     |  |      lsr.l #3,d0
    255e:	|     |  |      move.l d2,d1
    2560:	|     |  |      add.l d0,d1
    2562:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2566:	|     |  |      move.l 1a6f8 <winWidth>,d0
    256c:	|     |  |      move.l 52(sp),-(sp)
    2570:	|     |  |      move.l d0,-(sp)
    2572:	|     |  |      jsr 178c6 <__mulsi3>
    2578:	|     |  |      addq.l #8,sp
    257a:	|     |  |      lsr.l #3,d0
    257c:	|     |  |      move.l 28(sp),d1
    2580:	|     |  |      add.l d0,d1
    2582:	|     |  |      move.w 10(sp),d0
    2586:	|     |  |  ,-- bpl.s 258c <CstPasteChar+0x34a>
    2588:	|     |  |  |   addi.w #15,d0
    258c:	|     |  |  '-> asr.w #4,d0
    258e:	|     |  |      movea.w d0,a0
    2590:	|     |  |      move.l a0,d0
    2592:	|     |  |      add.l a0,d0
    2594:	|     |  |      move.l d1,d2
    2596:	|     |  |      add.l d0,d2
    2598:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    259c:	|     |  |      move.l 1a6f8 <winWidth>,d0
    25a2:	|     |  |      move.l 52(sp),-(sp)
    25a6:	|     |  |      move.l d0,-(sp)
    25a8:	|     |  |      jsr 178c6 <__mulsi3>
    25ae:	|     |  |      addq.l #8,sp
    25b0:	|     |  |      lsr.l #3,d0
    25b2:	|     |  |      move.l 28(sp),d1
    25b6:	|     |  |      add.l d0,d1
    25b8:	|     |  |      move.w 10(sp),d0
    25bc:	|     |  |  ,-- bpl.s 25c2 <CstPasteChar+0x380>
    25be:	|     |  |  |   addi.w #15,d0
    25c2:	|     |  |  '-> asr.w #4,d0
    25c4:	|     |  |      movea.w d0,a0
    25c6:	|     |  |      move.l a0,d0
    25c8:	|     |  |      add.l a0,d0
    25ca:	|     |  |      move.l d1,d2
    25cc:	|     |  |      add.l d0,d2
    25ce:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    25d2:	|     |  |      movea.l 84(sp),a0
    25d6:	|     |  |      move.l (a0),d0
    25d8:	|     |  |      andi.l #-2147483633,d0
    25de:	|     |  |  ,-- bpl.s 25e8 <CstPasteChar+0x3a6>
    25e0:	|     |  |  |   subq.l #1,d0
    25e2:	|     |  |  |   moveq #-16,d1
    25e4:	|     |  |  |   or.l d1,d0
    25e6:	|     |  |  |   addq.l #1,d0
    25e8:	|     |  |  '-> moveq #12,d2
    25ea:	|     |  |      lsl.l d2,d0
    25ec:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    25f0:	|     |  |      movea.l 84(sp),a0
    25f4:	|     |  |      move.l (a0),d0
    25f6:	|     |  |      movea.l d0,a0
    25f8:	|     |  |      cmpa.w #0,a0
    25fc:	|     |  |  ,-- bge.s 2602 <CstPasteChar+0x3c0>
    25fe:	|     |  |  |   lea 15(a0),a0
    2602:	|     |  |  '-> move.l a0,d0
    2604:	|     |  |      asr.l #4,d0
    2606:	|     |  |      move.l d0,d0
    2608:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    260e:	|     |  |      move.l a0,d1
    2610:	|     |  |      addq.l #2,d1
    2612:	|     |  |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2618:	|     |  |      add.w 76(sp),d0
    261c:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    261e:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2624:	|     |  |      move.l a0,d0
    2626:	|     |  |      addq.l #2,d0
    2628:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    262e:	|     |  |      move.l 44(sp),d0
    2632:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2634:	|     |  |      move.w 10(sp),d0
    2638:	|     |  |  ,-- bpl.s 263e <CstPasteChar+0x3fc>
    263a:	|     |  |  |   addi.w #15,d0
    263e:	|     |  |  '-> asr.w #4,d0
    2640:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2646:	|     |  |      move.l a0,d1
    2648:	|     |  |      addq.l #2,d1
    264a:	|     |  |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2650:	|     |  |      add.w d0,d0
    2652:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2654:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    265a:	|     |  |      move.l a0,d0
    265c:	|     |  |      addq.l #2,d0
    265e:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2664:	|     |  |      move.l 52(sp),d0
    2668:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    266a:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2670:	|     |  |      move.l a0,d0
    2672:	|     |  |      addq.l #2,d0
    2674:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    267a:	|     |  |      clr.w (a0)
    267c:	|     +--|----- bra.w 27e2 <CstPasteChar+0x5a0>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2680:	|     |  '----> move.w #1,78(sp)
    cutwordssource = 0;
    2686:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    268a:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    268e:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    2692:	|     |         movea.l 84(sp),a0
    2696:	|     |         move.l 24(a0),d0
    269a:	|     |         move.l d0,d2
    269c:	|     |         movea.l 84(sp),a0
    26a0:	|     |         move.l (a0),d0
    26a2:	|     |         movea.l d0,a0
    26a4:	|     |         cmpa.w #0,a0
    26a8:	|     |     ,-- bge.s 26ae <CstPasteChar+0x46c>
    26aa:	|     |     |   lea 15(a0),a0
    26ae:	|     |     '-> move.l a0,d0
    26b0:	|     |         asr.l #4,d0
    26b2:	|     |         move.l 48(sp),-(sp)
    26b6:	|     |         move.l d0,-(sp)
    26b8:	|     |         jsr 178c6 <__mulsi3>
    26be:	|     |         addq.l #8,sp
    26c0:	|     |         add.l d0,d0
    26c2:	|     |         move.l d2,d1
    26c4:	|     |         add.l d0,d1
    26c6:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    26ca:	|     |         move.l 1a6f8 <winWidth>,d0
    26d0:	|     |         move.l 52(sp),-(sp)
    26d4:	|     |         move.l d0,-(sp)
    26d6:	|     |         jsr 178c6 <__mulsi3>
    26dc:	|     |         addq.l #8,sp
    26de:	|     |         lsr.l #3,d0
    26e0:	|     |         move.l 28(sp),d1
    26e4:	|     |         add.l d0,d1
    26e6:	|     |         move.w 10(sp),d0
    26ea:	|     |     ,-- bpl.s 26f0 <CstPasteChar+0x4ae>
    26ec:	|     |     |   addi.w #15,d0
    26f0:	|     |     '-> asr.w #4,d0
    26f2:	|     |         movea.w d0,a0
    26f4:	|     |         move.l a0,d0
    26f6:	|     |         add.l a0,d0
    26f8:	|     |         move.l d1,d2
    26fa:	|     |         add.l d0,d2
    26fc:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2700:	|     |         move.l 1a6f8 <winWidth>,d0
    2706:	|     |         move.l 52(sp),-(sp)
    270a:	|     |         move.l d0,-(sp)
    270c:	|     |         jsr 178c6 <__mulsi3>
    2712:	|     |         addq.l #8,sp
    2714:	|     |         lsr.l #3,d0
    2716:	|     |         move.l 28(sp),d1
    271a:	|     |         add.l d0,d1
    271c:	|     |         move.w 10(sp),d0
    2720:	|     |     ,-- bpl.s 2726 <CstPasteChar+0x4e4>
    2722:	|     |     |   addi.w #15,d0
    2726:	|     |     '-> asr.w #4,d0
    2728:	|     |         movea.w d0,a0
    272a:	|     |         move.l a0,d0
    272c:	|     |         add.l a0,d0
    272e:	|     |         move.l d1,d2
    2730:	|     |         add.l d0,d2
    2732:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    2736:	|     |         move.w 10(sp),d0
    273a:	|     |         andi.w #-32753,d0
    273e:	|     |     ,-- bpl.s 2748 <CstPasteChar+0x506>
    2740:	|     |     |   subq.w #1,d0
    2742:	|     |     |   ori.w #-16,d0
    2746:	|     |     |   addq.w #1,d0
    2748:	|     |     '-> ext.l d0
    274a:	|     |         moveq #12,d1
    274c:	|     |         lsl.l d1,d0
    274e:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2752:	|     |         movea.l 84(sp),a0
    2756:	|     |         move.l (a0),d0
    2758:	|     |         movea.l d0,a0
    275a:	|     |         cmpa.w #0,a0
    275e:	|     |     ,-- bge.s 2764 <CstPasteChar+0x522>
    2760:	|     |     |   lea 15(a0),a0
    2764:	|     |     '-> move.l a0,d0
    2766:	|     |         asr.l #4,d0
    2768:	|     |         move.l d0,d0
    276a:	|     |         add.w 76(sp),d0
    276e:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2774:	|     |         move.l a0,d1
    2776:	|     |         addq.l #2,d1
    2778:	|     |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    277e:	|     |         add.w 78(sp),d0
    2782:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2784:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    278a:	|     |         move.l a0,d0
    278c:	|     |         addq.l #2,d0
    278e:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2794:	|     |         move.l 44(sp),d0
    2798:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    279a:	|     |         move.w 10(sp),d0
    279e:	|     |     ,-- bpl.s 27a4 <CstPasteChar+0x562>
    27a0:	|     |     |   addi.w #15,d0
    27a4:	|     |     '-> asr.w #4,d0
    27a6:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    27ac:	|     |         move.l a0,d1
    27ae:	|     |         addq.l #2,d1
    27b0:	|     |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    27b6:	|     |         add.w d0,d0
    27b8:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    27ba:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    27c0:	|     |         move.l a0,d0
    27c2:	|     |         addq.l #2,d0
    27c4:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    27ca:	|     |         move.l 52(sp),d0
    27ce:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    27d0:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    27d6:	|     |         move.l a0,d0
    27d8:	|     |         addq.l #2,d0
    27da:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    27e0:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    27e2:	|     '-------> moveq #0,d0
    27e4:	|               move.w 74(sp),d0
    27e8:	|               moveq #0,d1
    27ea:	|               not.w d1
    27ec:	|               asr.l d0,d1
    27ee:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    27f2:	|               moveq #0,d1
    27f4:	|               move.w 76(sp),d1
    27f8:	|               moveq #0,d0
    27fa:	|               move.w 78(sp),d0
    27fe:	|               sub.l d0,d1
    2800:	|               move.l d1,d0
    2802:	|               add.w d0,d0
    2804:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2808:	|               move.l 1a6f8 <winWidth>,d0
    280e:	|               lsr.l #3,d0
    2810:	|               move.l d0,d2
    2812:	|               move.w 76(sp),d1
    2816:	|               sub.w 78(sp),d1
    281a:	|               move.l 40(sp),d0
    281e:	|               sub.w d0,d1
    2820:	|               move.w d1,d0
    2822:	|               add.w d1,d0
    2824:	|               add.w d2,d0
    2826:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    282a:	|               move.l 1a6f8 <winWidth>,d0
    2830:	|               lsr.l #3,d0
    2832:	|               move.l d0,d2
    2834:	|               move.w 76(sp),d1
    2838:	|               sub.w 78(sp),d1
    283c:	|               move.l 40(sp),d0
    2840:	|               sub.w d0,d1
    2842:	|               move.w d1,d0
    2844:	|               add.w d1,d0
    2846:	|               add.w d2,d0
    2848:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    284c:	|               move.l #14675968,16(sp)
  WaitBlit();
    2854:	|               move.l 1a7b0 <GfxBase>,d0
    285a:	|               movea.l d0,a6
    285c:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2860:	|               movea.l 16(sp),a0
    2864:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    286a:	|               movea.l 16(sp),a0
    286e:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2874:	|               move.w 24(sp),d0
    2878:	|               movea.l 16(sp),a0
    287c:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2880:	|               move.w 22(sp),d0
    2884:	|               movea.l 16(sp),a0
    2888:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    288c:	|               move.w 20(sp),d0
    2890:	|               movea.l 16(sp),a0
    2894:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2898:	|               move.l 1a6f8 <winWidth>,d0
    289e:	|               lsr.l #3,d0
    28a0:	|               move.l d0,d1
    28a2:	|               move.l 1a6fc <winHeight>,d0
    28a8:	|               move.l d0,d0
    28aa:	|               move.w d1,d2
    28ac:	|               muls.w d0,d2
    28ae:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    28b2:	|               move.w 1a6be <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    28ba:	|               move.w 38(sp),d0
    28be:	|               andi.w #1,d0
    28c2:	|               move.w d0,12(sp)
  if(tmp2) {
    28c6:	|        ,----- beq.s 28d0 <CstPasteChar+0x68e>
    minterm = 0xbfa;
    28c8:	|        |      move.w #3066,36(sp)
    28ce:	|        |  ,-- bra.s 28d6 <CstPasteChar+0x694>
  } else {
    minterm = 0xb0a;
    28d0:	|        '--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    28d6:	|           '-> clr.l 32(sp)
    28da:	|     ,-------- bra.w 2978 <CstPasteChar+0x736>
  {

    custom->bltcon0 = bltcon0 + minterm;
    28de:	|  ,--|-------> move.l 56(sp),d0
    28e2:	|  |  |         add.w 36(sp),d0
    28e6:	|  |  |         movea.l 16(sp),a0
    28ea:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    28ee:	|  |  |         move.l 68(sp),d0
    28f2:	|  |  |         movea.l 16(sp),a0
    28f6:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    28fa:	|  |  |         move.l 64(sp),d0
    28fe:	|  |  |         movea.l 16(sp),a0
    2902:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2906:	|  |  |         move.l 60(sp),d0
    290a:	|  |  |         movea.l 16(sp),a0
    290e:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2912:	|  |  |         move.l 44(sp),d0
    2916:	|  |  |         lsl.w #6,d0
    2918:	|  |  |         move.l 40(sp),d1
    291c:	|  |  |         add.w d1,d0
    291e:	|  |  |         sub.w 76(sp),d0
    2922:	|  |  |         add.w 78(sp),d0
    2926:	|  |  |         movea.l 16(sp),a0
    292a:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    292e:	|  |  |         moveq #0,d0
    2930:	|  |  |         move.w 14(sp),d0
    2934:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2938:	|  |  |         moveq #0,d0
    293a:	|  |  |         move.w 14(sp),d0
    293e:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2942:	|  |  |         move.w 38(sp),d0
    2946:	|  |  |         lsr.w #1,d0
    2948:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    294c:	|  |  |         move.w 38(sp),d1
    2950:	|  |  |         andi.w #1,d1
    2954:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2958:	|  |  |  ,----- beq.s 2962 <CstPasteChar+0x720>
      minterm = 0xbfa;
    295a:	|  |  |  |      move.w #3066,36(sp)
    2960:	|  |  |  |  ,-- bra.s 2968 <CstPasteChar+0x726>
    } else {
      minterm = 0xb0a;
    2962:	|  |  |  '--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2968:	|  |  |     '-> move.l 1a7b0 <GfxBase>,d0
    296e:	|  |  |         movea.l d0,a6
    2970:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2974:	|  |  |         addq.l #1,32(sp)
    2978:	|  |  '-------> moveq #4,d2
    297a:	|  |            cmp.l 32(sp),d2
    297e:	|  '----------- bge.w 28de <CstPasteChar+0x69c>
 
  }   
}
    2982:	'-------------> move.l (sp)+,d2
    2984:	                movea.l (sp)+,a6
    2986:	                lea 72(sp),sp
    298a:	                rts

0000298c <CstRestoreScreen>:


void CstRestoreScreen()
{
    298c:	                   lea -24(sp),sp
    2990:	                   move.l a6,-(sp)
    2992:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2994:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    299c:	                   move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    29a2:	,----------------- beq.w 2baa <CstRestoreScreen+0x21e>
    29a6:	|                  move.l 1a6d8 <CstDrawBuffer>,d0
    29ac:	+----------------- beq.w 2baa <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    29b0:	|                  move.l 1a7b0 <GfxBase>,d0
    29b6:	|                  movea.l d0,a6
    29b8:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    29bc:	|                  movea.l 16(sp),a0
    29c0:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    29c6:	|                  movea.l 16(sp),a0
    29ca:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    29d0:	|                  movea.l 16(sp),a0
    29d4:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    29da:	|     ,----------- bra.w 2b9e <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    29de:	|  ,--|----------> movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    29e4:	|  |  |            move.l 4(a0),d0
    29e8:	|  |  |  ,-------- beq.w 2b6c <CstRestoreScreen+0x1e0>
    29ec:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    29f2:	|  |  |  |         movea.l 4(a0),a0
    29f6:	|  |  |  |         move.l 16(a0),d0
    29fa:	|  |  |  |         moveq #2,d1
    29fc:	|  |  |  |         cmp.l d0,d1
    29fe:	|  |  |  +-------- blt.w 2b6c <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2a02:	|  |  |  |         move.l 1a6f8 <winWidth>,d0
    2a08:	|  |  |  |         lsr.l #3,d0
    2a0a:	|  |  |  |         move.l d0,d1
    2a0c:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a12:	|  |  |  |         move.w 8(a0),d0
    2a16:	|  |  |  |         add.w d0,d0
    2a18:	|  |  |  |         sub.w d0,d1
    2a1a:	|  |  |  |         movea.l 16(sp),a0
    2a1e:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2a22:	|  |  |  |         move.l 1a6f8 <winWidth>,d0
    2a28:	|  |  |  |         lsr.l #3,d0
    2a2a:	|  |  |  |         move.l d0,d1
    2a2c:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a32:	|  |  |  |         move.w 8(a0),d0
    2a36:	|  |  |  |         add.w d0,d0
    2a38:	|  |  |  |         sub.w d0,d1
    2a3a:	|  |  |  |         movea.l 16(sp),a0
    2a3e:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2a42:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a48:	|  |  |  |         move.w 14(a0),d0
    2a4c:	|  |  |  |         move.w d0,d0
    2a4e:	|  |  |  |         andi.l #65535,d0
    2a54:	|  |  |  |         move.l 1a6f8 <winWidth>,d1
    2a5a:	|  |  |  |         move.l d1,-(sp)
    2a5c:	|  |  |  |         move.l d0,-(sp)
    2a5e:	|  |  |  |         jsr 178c6 <__mulsi3>
    2a64:	|  |  |  |         addq.l #8,sp
    2a66:	|  |  |  |         move.l d0,d1
    2a68:	|  |  |  |         lsr.l #3,d1
    2a6a:	|  |  |  |         move.l 1a6c6 <CstBackDrop>,d0
    2a70:	|  |  |  |         add.l d0,d1
    2a72:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a78:	|  |  |  |         move.w 12(a0),d0
    2a7c:	|  |  |  |         move.w d0,d0
    2a7e:	|  |  |  |         andi.l #65535,d0
    2a84:	|  |  |  |         move.l d1,d2
    2a86:	|  |  |  |         add.l d0,d2
    2a88:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2a8c:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a92:	|  |  |  |         move.w 14(a0),d0
    2a96:	|  |  |  |         move.w d0,d0
    2a98:	|  |  |  |         andi.l #65535,d0
    2a9e:	|  |  |  |         move.l 1a6f8 <winWidth>,d1
    2aa4:	|  |  |  |         move.l d1,-(sp)
    2aa6:	|  |  |  |         move.l d0,-(sp)
    2aa8:	|  |  |  |         jsr 178c6 <__mulsi3>
    2aae:	|  |  |  |         addq.l #8,sp
    2ab0:	|  |  |  |         move.l d0,d1
    2ab2:	|  |  |  |         lsr.l #3,d1
    2ab4:	|  |  |  |         move.l 1a6d8 <CstDrawBuffer>,d0
    2aba:	|  |  |  |         add.l d0,d1
    2abc:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2ac2:	|  |  |  |         move.w 12(a0),d0
    2ac6:	|  |  |  |         move.w d0,d0
    2ac8:	|  |  |  |         andi.l #65535,d0
    2ace:	|  |  |  |         move.l d1,d2
    2ad0:	|  |  |  |         add.l d0,d2
    2ad2:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2ad6:	|  |  |  |         clr.l 20(sp)
    2ada:	|  |  |  |     ,-- bra.w 2b62 <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2ade:	|  |  |  |  ,--|-> move.l 28(sp),d0
    2ae2:	|  |  |  |  |  |   movea.l 16(sp),a0
    2ae6:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2aea:	|  |  |  |  |  |   move.l 24(sp),d0
    2aee:	|  |  |  |  |  |   movea.l 16(sp),a0
    2af2:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2af6:	|  |  |  |  |  |   movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2afc:	|  |  |  |  |  |   move.w 10(a0),d0
    2b00:	|  |  |  |  |  |   lsl.w #6,d0
    2b02:	|  |  |  |  |  |   movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b08:	|  |  |  |  |  |   move.w 8(a0),d1
    2b0c:	|  |  |  |  |  |   add.w d1,d0
    2b0e:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b12:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2b16:	|  |  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    2b1c:	|  |  |  |  |  |   lsr.l #3,d0
    2b1e:	|  |  |  |  |  |   move.l 1a6fc <winHeight>,d1
    2b24:	|  |  |  |  |  |   move.l d1,-(sp)
    2b26:	|  |  |  |  |  |   move.l d0,-(sp)
    2b28:	|  |  |  |  |  |   jsr 178c6 <__mulsi3>
    2b2e:	|  |  |  |  |  |   addq.l #8,sp
    2b30:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2b34:	|  |  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    2b3a:	|  |  |  |  |  |   lsr.l #3,d0
    2b3c:	|  |  |  |  |  |   move.l 1a6fc <winHeight>,d1
    2b42:	|  |  |  |  |  |   move.l d1,-(sp)
    2b44:	|  |  |  |  |  |   move.l d0,-(sp)
    2b46:	|  |  |  |  |  |   jsr 178c6 <__mulsi3>
    2b4c:	|  |  |  |  |  |   addq.l #8,sp
    2b4e:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2b52:	|  |  |  |  |  |   move.l 1a7b0 <GfxBase>,d0
    2b58:	|  |  |  |  |  |   movea.l d0,a6
    2b5a:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b5e:	|  |  |  |  |  |   addq.l #1,20(sp)
    2b62:	|  |  |  |  |  '-> moveq #4,d0
    2b64:	|  |  |  |  |      cmp.l 20(sp),d0
    2b68:	|  |  |  |  '----- bge.w 2ade <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2b6c:	|  |  |  '-------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2b74:	|  |  |            movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b7a:	|  |  |            move.l 16(a0),d0
    2b7e:	|  |  |            move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2b84:	|  |  |            move.l 12(sp),8(sp)
    2b8a:	|  |  |            move.l 1a7a4 <SysBase>,d0
    2b90:	|  |  |            movea.l d0,a6
    2b92:	|  |  |            movea.l 8(sp),a1
    2b96:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2b9a:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2b9e:	|  |  '----------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    2ba4:	|  '-------------- bne.w 29de <CstRestoreScreen+0x52>
    2ba8:	|              ,-- bra.s 2bac <CstRestoreScreen+0x220>
    return;
    2baa:	'--------------|-> nop
  }
  
}
    2bac:	               '-> move.l (sp)+,d2
    2bae:	                   movea.l (sp)+,a6
    2bb0:	                   lea 24(sp),sp
    2bb4:	                   rts

00002bb6 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2bb6:	                                                                               lea -44(sp),sp
    2bba:	                                                                               movem.l d2-d7/a2-a6,-(sp)
    2bbe:	                                                                               movea.l 92(sp),a2
    2bc2:	                                                                               move.l 96(sp),82(sp)
    2bc8:	                                                                               move.l 100(sp),d6
    2bcc:	                                                                               movea.l 104(sp),a4
    2bd0:	                                                                               move.l 108(sp),d2
    2bd4:	                                                                               move.w d6,d5
    2bd6:	                                                                               move.w a4,d3
    2bd8:	                                                                               move.w d2,50(sp)
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2bdc:	                                                                               movea.w a4,a5
    2bde:	                                                                               move.w d6,d4
    2be0:	                                                                               ext.l d4
    2be2:	                                                                               move.l a5,-(sp)
    2be4:	                                                                               move.l d4,-(sp)
    2be6:	                                                                               move.l 1a804 <zBuffer>,-(sp)
    2bec:	                                                                               move.l a2,-(sp)
    2bee:	                                                                               jsr 14e8 <CstDrawZBuffer>
    2bf4:	                                                                               move.l d0,84(sp)

  UWORD *destination = 0;
  switch(destinationtype)
    2bf8:	                                                                               lea 16(sp),sp
    2bfc:	                                                                               cmpi.w #1,50(sp)
    2c02:	                                                ,----------------------------- beq.w 300c <CstScaleSprite+0x456>
    2c06:	                                                |                              cmpi.w #2,50(sp)
    2c0c:	                                                |                       ,----- beq.w 2ed2 <CstScaleSprite+0x31c>
    2c10:	                                                |                       |      suba.l a6,a6
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2c12:	                                                |  ,--------------------|----> move.l 4(a2),d1
    2c16:	                                                |  |                    |      move.l a5,d0
    2c18:	                                                |  |                    |      add.l d1,d0
  if( y < 0) {
    2c1a:	                                                |  |                    |      tst.w d3
    2c1c:	                                                |  |           ,--------|----- blt.w 2eee <CstScaleSprite+0x338>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2c20:	                                                |  |           |  ,-----|----> movea.l 1a6fc <winHeight>,a0
    2c26:	                                                |  |           |  |     |      cmp.l a0,d0
    2c28:	                                                |  |  ,--------|--|-----|----- ble.w 3016 <CstScaleSprite+0x460>
    if(y  > (int) winHeight) {
    2c2c:	                                                |  |  |        |  |     |      cmpa.l a5,a0
    2c2e:	                     ,--------------------------|--|--|--------|--|-----|----- blt.w 30d4 <CstScaleSprite+0x51e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    ystartsrc = 0;
    blitheight = winHeight-y;
    2c32:	                     |                          |  |  |        |  |     |      suba.l a5,a0
    2c34:	                     |                          |  |  |        |  |     |      move.l a0,74(sp)
    ystartsrc = 0;
    2c38:	                     |                          |  |  |        |  |     |      moveq #0,d7


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2c3a:	                     |                          |  |  |  ,-----|--|-----|----> move.l (a2),d3
    2c3c:	                     |                          |  |  |  |     |  |     |      move.l d4,d0
    2c3e:	                     |                          |  |  |  |     |  |     |      add.l d3,d0
  if( x < 0) 
    2c40:	                     |                          |  |  |  |     |  |     |      tst.w d5
    2c42:	                     |                          |  |  |  |     |  |  ,--|----- blt.w 2f0a <CstScaleSprite+0x354>
      *CstBackDropBufferApplyCursor++ = blitheight;
      *CstBackDropBufferApplyCursor++ = 0;
      *CstBackDropBufferApplyCursor++ = ystartdst;
      *CstBackDropBufferApplyCursor++ = 0;
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2c46:	                     |                          |  |  |  |     |  |  |  |  ,-> move.l 1a6f8 <winWidth>,d5
    2c4c:	                     |                          |  |  |  |     |  |  |  |  |   cmp.l d5,d0
    2c4e:	                     |                          |  |  |  |  ,--|--|--|--|--|-- ble.w 3020 <CstScaleSprite+0x46a>

    if(x - single->width > (int) winWidth)
    2c52:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d3,d4
    2c54:	                     |                          |  |  |  |  |  |  |  |  |  |   cmp.l d5,d4
    2c56:	                     +--------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 30d4 <CstScaleSprite+0x51e>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2c5a:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d5,d0
    2c5c:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #4,d0
    2c5e:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,64(sp)
    2c62:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d0,a3
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2c64:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l #96454,d2
    2c6a:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d7,-(sp)
    2c6c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2c6e:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d2,a0
    2c70:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a0)
    2c72:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2c74:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2c76:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 68(sp),d7
    2c7a:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l d0,d7
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2c7c:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2c80:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2c84:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a5,-(sp)
    2c86:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d5,-(sp)
    2c88:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d2,a1
    2c8a:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a1)
    2c8c:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2c8e:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2c90:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d6,d1
    2c92:	                     |                          |  |  |  |  |  |  |  |  |  |   asr.w #4,d1
    2c94:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d1,a0
    2c96:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a0,a0
    2c98:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a0,a6
    2c9a:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l d0,a6
    2c9c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a6,54(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2ca0:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2ca2:	                     |                          |  |  |  |  |  |  |  |  |  |   and.l d6,d0
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    2ca4:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #0,d2
    2ca6:	                     |                          |  |  |  |  |  |  |  |  |  |   not.w d2
    2ca8:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d0,d2
    2caa:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d2,58(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    2cae:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->x = x;
      CstCleanupQueueDrawBuffer->y = y;
      CstCleanupQueueDrawBuffer->person = person; 
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2cb4:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d1,d2
    2cb6:	                     |                          |  |  |  |  |  |  |  |  |  |   add.w d1,d2
      *CstBackDropBufferApplyCursor++ = 0;
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2cb8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),d4
    2cbc:	                     |                          |  |  |  |  |  |  |  |  |  |   add.w d4,d4
    bltcon0 = 0xfca + ((x%16) << 12);
    2cbe:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d1
    2cc0:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d1,d0
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    2cc2:	                     |                          |  |  |  |  |  |  |  |  |  |   addi.w #4042,d0
    2cc6:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,78(sp)
  custom->bltcon1 = bltcon1;  
    2cca:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d6,d0
    2ccc:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.w d1,d0
    2cce:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,80(sp)
    if( destinationtype == SCREEN)
    2cd2:	                     |                          |  |  |  |  |  |  |  |  |  |   cmpi.w #1,50(sp)
    2cd8:	            ,--------|--------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 33fe <CstScaleSprite+0x848>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2cdc:	            |        |                          |  |  |  |  |  |  |  |  |  |   movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2ce2:	            |        |                          |  |  |  |  |  |  |  |  |  |   move.l d3,d0
    2ce4:	   ,--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 34b4 <CstScaleSprite+0x8fe>
    2ce8:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    2cea:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),d1
    2cee:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d0,d1
    2cf0:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d1,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2cf2:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2cf8:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d2,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2cfc:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2d00:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   lea 10(a0),a1
    2d04:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    2d0a:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w 8(a0)
    2d0e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2d14:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w d2
    2d16:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l #108452,50(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2d1e:	,--|--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> lsr.l #3,d5
    2d20:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d4,d5
    2d22:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d3
    2d24:	|  |  ,-----|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 32ec <CstScaleSprite+0x736>
    2d28:	|  |  |  ,--|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d3
    2d2a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   sub.w d3,d5
  WaitBlit();
    2d2c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lea 1a7b0 <GfxBase>,a4
    2d32:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2d34:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    2d38:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
  custom->bltalwm = bltalwm;
    2d40:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 58(sp),dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
  custom->bltamod = bltamod;
    2d48:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
  custom->bltbmod = bltbmod;
    2d4e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e09>
  custom->bltcmod = bltcmod;
    2d54:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d5,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e07>
  custom->bltdmod = bltdmod;
    2d5a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d5,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
  custom->bltcon0 = bltcon0;
    2d60:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 78(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
  custom->bltcon1 = bltcon1;  
    2d68:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 80(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2d70:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2d72:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),d5
    2d76:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsl.w #6,d5
  UWORD bltbptplus = (single->width >> 3)*single->height;
    2d78:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d4
    2d7a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #3,d4
    2d7c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d4
    bltbpt += bltbptplus;
    2d80:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
  UWORD bltcptplus = winWidth/8*winHeight;
    2d86:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 1a6f8 <winWidth>,d3
    2d8c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d3
    2d8e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 1a6fe <winHeight+0x2>,d3
    bltcpt += bltcptplus;
    2d94:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d3
    custom->bltapt = (APTR) bltapt;
    2d9a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    2da0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    2da8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 54(sp),dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    2db0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 54(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2db8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2dba:	|  |  |  |  |  ,-----|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 31f0 <CstScaleSprite+0x63a>
    2dbe:	|  |  |  |  |  |  ,--|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2dc0:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2dc2:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2dc4:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2dc6:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    2dcc:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a5
    2dd0:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltcpt += bltcptplus;
    2dd2:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l 54(sp),d6
    2dd6:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.l d3,d6
    bltdpt += bltcptplus;
    WaitBlit();
    2dd8:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2dda:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2dde:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2de0:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    2de6:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    2dec:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d6,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    2df2:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d6,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2df8:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2dfa:	|  |  |  |  |  |  |  |                 ,--------|--|--|--|--|--|--|--|--|--|-- blt.w 3234 <CstScaleSprite+0x67e>
    2dfe:	|  |  |  |  |  |  |  |                 |     ,--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e00:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e02:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2e04:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2e06:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    2e0c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltcpt += bltcptplus;
    2e0e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.l d3,d6
    WaitBlit();
    2e10:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2e12:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e16:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e18:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    2e1e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    2e24:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    2e2a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e30:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e32:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--|--|--|--|--|--|--|--|-- blt.w 3270 <CstScaleSprite+0x6ba>
    2e36:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e38:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e3a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2e3c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2e3e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    2e44:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltcpt += bltcptplus;
    2e46:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.l d3,d6
    WaitBlit();
    2e48:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2e4a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e4e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e50:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    2e56:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    2e5c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    2e62:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e68:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e6a:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 32ac <CstScaleSprite+0x6f6>
    2e6e:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e70:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e72:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2e74:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2e76:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    2e7c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    bltcpt += bltcptplus;
    2e7e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l d6,d3
    WaitBlit();
    2e80:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2e82:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e86:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e88:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    2e8e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    2e94:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d3,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    2e9a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d3,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ea0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2ea2:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 31c0 <CstScaleSprite+0x60a>
    2ea6:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2ea8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2eaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d5,d2
    2eac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d2
    2eae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    WaitBlit();
    2eb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2eb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

  FreeVec(mask);
    2eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l 50(sp),a0
    2ebe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2ec0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a1
    2ec4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -690(a6)
}
    2ec8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    2ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 44(sp),sp
    2ed0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   rts
      CstApplyBackDropCounter = 2;
    2ed2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-> move.w #2,1a6d2 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2eda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   movea.l 1a6c6 <CstBackDrop>,a6
    if(y + single->height < 0) {
    2ee0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l 4(a2),d1
    2ee4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l a5,d0
    2ee6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   add.l d1,d0
  if( y < 0) {
    2ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   tst.w d3
    2eea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----|-- bge.w 2c20 <CstScaleSprite+0x6a>
    if(y + single->height < 0) {
    2eee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-----|-----|-> tst.l d0
    2ef0:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|-----|-- blt.w 30d4 <CstScaleSprite+0x51e>
    ystartsrc = y*-1;
    2ef4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a5,d7
    2ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   neg.l d7
    blitheight = single->height+y;
    2ef8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d0,74(sp)
    ystartdst = 0;
    2efc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   suba.l a5,a5
    if(x + single->width < 0) {
    2efe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l (a2),d3
    2f00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d4,d0
    2f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   add.l d3,d0
  if( x < 0) 
    2f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   tst.w d5
    2f06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     '-- bge.w 2c46 <CstScaleSprite+0x90>
    if(x + single->width < 0) {
    2f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '-------> tst.l d0
    2f0c:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- blt.w 30d4 <CstScaleSprite+0x51e>
    cutwordssource = (x*-1)/16; 
    2f10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d6,d0
    2f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addi.w #15,d0
    2f16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.w #4,d0
    2f18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.w d0
    2f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,58(sp)
    2f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.w d0,a3
    cutmaskpixel = (x*-1)%16;   
    2f20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.l d4
    2f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    2f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  and.l d0,d4
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1a6f8 <winWidth>,d5
    2f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 178c6 <__mulsi3>,a0
    2f32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d5,-(sp)
    2f34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,-(sp)
    2f36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a0,54(sp)
    2f3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr (a0)
    2f3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addq.l #8,sp
    2f3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    2f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l 46(sp),a0
    2f44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d4
    2f46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.w 30ea <CstScaleSprite+0x534>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lea (-2,a6,d0.l),a6
    2f4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a6,54(sp)
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 58(sp),d1
    2f56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         subq.w #1,d1
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w #16,a1
    2f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         suba.l d4,a1
    2f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a1,d2
    2f60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d0
    2f62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    2f64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addi.w #4042,d2
    2f68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,78(sp)
  custom->bltcon1 = bltcon1;  
    2f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w a1,d2
    2f6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.w d0,d2
    2f70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,80(sp)
      extrawords = 1;
    2f74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2f76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 58(sp),a6
    2f7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a6,a6
    2f7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d7,-(sp)
    2f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d3,-(sp)
    2f80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,54(sp)
    2f84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         jsr (a0)
    2f86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addq.l #8,sp
    2f88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsr.l #3,d0
    2f8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.l 68(sp),a0
    2f8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a6,a0
    2f90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a0,d7
    2f92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l d0,d7
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2f94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l 24(a2),a6
    2f98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a6,d0
    2f9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d0,60(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    2f9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w a5,86(sp)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #0,d0
    2faa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         not.w d0
    2fac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         asr.l d4,d0
    2fae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d0,66(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 46(sp),d1
    2fb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d1,d4
    2fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.w d1,d4
    if( destinationtype == SCREEN)
    2fba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmpi.w #1,50(sp)
    2fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  ,----- beq.w 314e <CstScaleSprite+0x598>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2fc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,-> movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2fca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l d3,d0
    2fcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   asr.l #4,d0
    2fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w 58(sp),d0
    2fd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d2,d0
    2fd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 76(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2fdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2fe0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lea 10(a0),a1
    2fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    2fee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 8(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    2ff2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 58(sp)
    2ff6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l #108452,50(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2ffe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lsr.l #3,d5
    3000:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d4,d5
    3002:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   tst.l d3
    3004:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bge.w 2d28 <CstScaleSprite+0x172>
    3008:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bra.w 32ec <CstScaleSprite+0x736>
      destination = (UWORD *) CstDrawBuffer;      
    300c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--------|--|--|-> movea.l 1a6d8 <CstDrawBuffer>,a6
      break;
    3012:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--------|--|--|-- bra.w 2c12 <CstScaleSprite+0x5c>
    blitheight = single->height;
    3016:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--------|--|--|-> move.l d1,74(sp)
    ystartsrc = 0;
    301a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   moveq #0,d7
    301c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--------|--|--|-- bra.w 2c3a <CstScaleSprite+0x84>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3020:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--------|--|--|-> lea 178c6 <__mulsi3>,a3
    3026:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d7,-(sp)
    3028:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d3,-(sp)
    302a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a3)
    302c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    302e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    3030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 68(sp),d7
    3034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l d0,d7
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3036:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l 24(a2),d0
    303a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    303e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a5,-(sp)
    3040:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d5,-(sp)
    3042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a3)
    3044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    3046:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    3048:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d6,d4
    304a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   asr.w #4,d4
    304c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w d4,a0
    304e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a0
    3050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a6
    3052:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l d0,a6
    3054:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a6,54(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    305e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.w d4,d4
    bltcon0 = 0xfca + ((x%16) << 12);
    3060:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d6,d0
    3062:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #12,d1
    3064:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d1,d0
  custom->bltcon0 = bltcon0;
    3066:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addi.w #4042,d0
    306a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,78(sp)
  custom->bltcon1 = bltcon1;  
    306e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d6,d0
    3070:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d1,d0
    3072:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,80(sp)
    if( destinationtype == SCREEN)
    3076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   cmpi.w #1,50(sp)
    307c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    ,--|--|--|-- beq.w 3388 <CstScaleSprite+0x7d2>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    3080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3086:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   move.l d3,d0
    3088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,--------|--|--|--|-- bmi.w 3472 <CstScaleSprite+0x8bc>
    308c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   asr.l #4,d0
    308e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   addq.w #1,d0
    3090:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d4,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    309c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    30a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   lea 10(a0),a1
    30a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    30aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 8(a0)
    30ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w #-1,66(sp)
    30b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    30b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 58(sp)
    cutwordssource = 0;
    30ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   suba.l a3,a3
    extrawords = 1;
    30bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #1,d2
    30be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l #108452,50(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    30c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|--------|--|--|--|-> lsr.l #3,d5
    30c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   add.w d4,d5
    30ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   tst.l d3
    30cc:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bge.w 2d28 <CstScaleSprite+0x172>
    30d0:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bra.w 32ec <CstScaleSprite+0x736>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    30d4:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-> move.l #97552,92(sp)
}
    30dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    30e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   lea 44(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    30e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   jmp 16f3a <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    30ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  '--|--|-> adda.l d0,a6
    30ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a6,54(sp)
    30f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 58(sp),d1
    30f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w 80(sp)
    30f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w #4042,78(sp)
      extrawords = 0;
    30fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3100:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 58(sp),a6
    3104:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a6,a6
    3106:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d7,-(sp)
    3108:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d3,-(sp)
    310a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,54(sp)
    310e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   jsr (a0)
    3110:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   addq.l #8,sp
    3112:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   lsr.l #3,d0
    3114:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.l 68(sp),a0
    3118:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a6,a0
    311a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a0,d7
    311c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l d0,d7
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    311e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l 24(a2),a6
    3122:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a6,d0
    3124:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d0,60(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3128:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    312e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w a5,86(sp)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3132:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #0,d0
    3134:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   not.w d0
    3136:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   asr.l d4,d0
    3138:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d0,66(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    313c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 46(sp),d1
    3140:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d1,d4
    3142:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.w d1,d4
    if( destinationtype == SCREEN)
    3144:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   cmpi.w #1,50(sp)
    314a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  '-- bne.w 2fc4 <CstScaleSprite+0x40e>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    314e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     '----> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3154:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l #108452,50(sp)
    315c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            lea 1a7a4 <SysBase>,a1
    3162:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l (a1),a6
    3164:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #20,d0
    3166:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #0,d1
    3168:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            jsr -684(a6)
    316c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l d0,a0
    316e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3174:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    3178:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w d6,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    317a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w a4,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    317e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l 82(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3184:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l (a2),d3
    3186:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,d0
    3188:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     ,--|----------- bmi.w 34f2 <CstScaleSprite+0x93c>
    318c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            asr.l #4,d0
    318e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w 58(sp),d0
    3192:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w d2,d0
    3194:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3198:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    319e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    31a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 86(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    31a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.l 1a6f8 <winWidth>,d5
    bltalwm = 0; //Last Word of this channel almost masked out
    31ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 58(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    31b2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  ,--|--|----------> lsr.l #3,d5
    31b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d4,d5
    31b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d3
    31b8:	|  |  |  +--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bge.w 2d28 <CstScaleSprite+0x172>
    31bc:	|  |  +--|--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bra.w 32ec <CstScaleSprite+0x736>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31c0:	|  |  |  |  |  |  |     >--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    31c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    31c4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    31c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d0,d2
    31c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d5,d2
    31ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w a3,d2
    31cc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    WaitBlit();
    31d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a4),a6
    31d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
  FreeVec(mask);
    31d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 50(sp),a0
    31dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    31de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 68(sp),a1
    31e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -690(a6)
}
    31e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movem.l (sp)+,d2-d7/a2-a6
    31ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            lea 44(sp),sp
    31ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            rts
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31f0:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    31f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    31f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    31f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d2,d0
    31f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d5,d0
    31fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w a3,d0
    31fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    3202:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 60(sp),a5
    3206:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l d4,a5
    bltcpt += bltcptplus;
    3208:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l 54(sp),d6
    320c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d3,d6
    WaitBlit();
    320e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a4),a6
    3210:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3214:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3216:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    321c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    3222:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d6,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    3228:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d6,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    322e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d0
    3230:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--------|--|--|--|--|----------- bge.w 2dfe <CstScaleSprite+0x248>
    3234:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|----------> moveq #15,d1
    3236:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d1,d0
    3238:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            asr.l #4,d0
    323a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d2,d0
    323c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d5,d0
    323e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            sub.w a3,d0
    3240:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    3246:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l d4,a5
    bltcpt += bltcptplus;
    3248:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d3,d6
    WaitBlit();
    324a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l (a4),a6
    324c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3250:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3252:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    3258:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    325e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d6,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    3264:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d6,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    326a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            tst.l d0
    326c:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|----------- bge.w 2e36 <CstScaleSprite+0x280>
    3270:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|----------> moveq #15,d1
    3272:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d1,d0
    3274:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            asr.l #4,d0
    3276:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d2,d0
    3278:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d5,d0
    327a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            sub.w a3,d0
    327c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    3282:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l d4,a5
    bltcpt += bltcptplus;
    3284:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d3,d6
    WaitBlit();
    3286:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l (a4),a6
    3288:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    328c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    328e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    3294:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    329a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d6,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    32a0:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d6,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32a6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            tst.l d0
    32a8:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|----------- bge.w 2e6e <CstScaleSprite+0x2b8>
    32ac:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|----------> moveq #15,d1
    32ae:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d1,d0
    32b0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            asr.l #4,d0
    32b2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d2,d0
    32b4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d5,d0
    32b6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            sub.w a3,d0
    32b8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3dff>
    bltbpt += bltbptplus;
    32be:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l a5,d4
    bltcpt += bltcptplus;
    32c0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d6,d3
    WaitBlit();
    32c2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l (a4),a6
    32c4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32c8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    32ca:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    32d0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    32d6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d3,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    32dc:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d3,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32e2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            tst.l d0
    32e4:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|----------- bge.w 2ea6 <CstScaleSprite+0x2f0>
    32e8:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|----------- bra.w 31c0 <CstScaleSprite+0x60a>
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    32ec:	|  |  >--|--|--|--|-----------------------------------|--|--|--|--|----------> addq.l #7,d3
    32ee:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d3
    32f0:	|  |  |  |  |  |  |                                   |  |  |  |  |            sub.w d3,d5
  WaitBlit();
    32f2:	|  |  |  |  |  |  |                                   |  |  |  |  |            lea 1a7b0 <GfxBase>,a4
    32f8:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l (a4),a6
    32fa:	|  |  |  |  |  |  |                                   |  |  |  |  |            jsr -228(a6)
  custom->bltafwm = bltafwm;
    32fe:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 66(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb3deb>
  custom->bltalwm = bltalwm;
    3306:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 58(sp),dff046 <gcc8_c_support.c.c60c1f2b+0xdb3ded>
  custom->bltamod = bltamod;
    330e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e0b>
  custom->bltbmod = bltbmod;
    3314:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e09>
  custom->bltcmod = bltcmod;
    331a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d5,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e07>
  custom->bltdmod = bltdmod;
    3320:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d5,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e0d>
  custom->bltcon0 = bltcon0;
    3326:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 78(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb3de7>
  custom->bltcon1 = bltcon1;  
    332e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 80(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb3de9>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3336:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3338:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 72(sp),d5
    333c:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsl.w #6,d5
  UWORD bltbptplus = (single->width >> 3)*single->height;
    333e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d0,d4
    3340:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d4
    3342:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 6(a2),d4
    bltbpt += bltbptplus;
    3346:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d4
  UWORD bltcptplus = winWidth/8*winHeight;
    334c:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 1a6f8 <winWidth>,d3
    3352:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsr.l #3,d3
    3354:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 1a6fe <winHeight+0x2>,d3
    bltcpt += bltcptplus;
    335a:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d3
    custom->bltapt = (APTR) bltapt;
    3360:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3df7>
    custom->bltbpt = (APTR) bltbpt;
    3366:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb3df3>
    custom->bltcpt = (APTR) bltcpt;
    336e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 54(sp),dff048 <gcc8_c_support.c.c60c1f2b+0xdb3def>
    custom->bltdpt = (APTR) bltdpt;
    3376:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 54(sp),dff054 <gcc8_c_support.c.c60c1f2b+0xdb3dfb>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    337e:	|  |  |  |  |  |  |                                   |  |  |  |  |            tst.l d0
    3380:	|  |  |  |  |  |  '-----------------------------------|--|--|--|--|----------- bge.w 2dbe <CstScaleSprite+0x208>
    3384:	|  |  |  |  |  '--------------------------------------|--|--|--|--|----------- bra.w 31f0 <CstScaleSprite+0x63a>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3388:	|  |  |  |  |                                         |  |  |  |  '----------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    338e:	|  |  |  |  |                                         |  |  |  |               move.l #108452,50(sp)
    3396:	|  |  |  |  |                                         |  |  |  |               lea 1a7a4 <SysBase>,a0
    339c:	|  |  |  |  |                                         |  |  |  |               movea.l (a0),a6
    339e:	|  |  |  |  |                                         |  |  |  |               moveq #20,d0
    33a0:	|  |  |  |  |                                         |  |  |  |               moveq #0,d1
    33a2:	|  |  |  |  |                                         |  |  |  |               jsr -684(a6)
    33a6:	|  |  |  |  |                                         |  |  |  |               movea.l d0,a0
    33a8:	|  |  |  |  |                                         |  |  |  |               move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    33ae:	|  |  |  |  |                                         |  |  |  |               move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    33b2:	|  |  |  |  |                                         |  |  |  |               move.w d6,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    33b4:	|  |  |  |  |                                         |  |  |  |               move.w a4,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    33b8:	|  |  |  |  |                                         |  |  |  |               move.l 82(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    33be:	|  |  |  |  |                                         |  |  |  |               move.l (a2),d3
    33c0:	|  |  |  |  |                                         |  |  |  |               move.l d3,d0
    33c2:	|  |  |  |  |                                         |  |  |  |     ,-------- bmi.w 3520 <CstScaleSprite+0x96a>
    33c6:	|  |  |  |  |                                         |  |  |  |     |         asr.l #4,d0
    33c8:	|  |  |  |  |                                         |  |  |  |     |         addq.w #1,d0
    33ca:	|  |  |  |  |                                         |  |  |  |     |         move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    33ce:	|  |  |  |  |                                         |  |  |  |     |         move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    33d4:	|  |  |  |  |                                         |  |  |  |     |         move.w d4,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    33d8:	|  |  |  |  |                                         |  |  |  |     |         move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    33dc:	|  |  |  |  |                                         |  |  |  |     |         move.l 1a6f8 <winWidth>,d5
    33e2:	|  |  |  |  |                                         |  |  |  |     |         move.w #-1,66(sp)
    33e8:	|  |  |  |  |                                         |  |  |  |     |         moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    33ea:	|  |  |  |  |                                         |  |  |  |     |         clr.w 58(sp)
    cutwordssource = 0;
    33ee:	|  |  |  |  |                                         |  |  |  |     |         suba.l a3,a3
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    33f0:	|  |  |  |  |                                         |  |  |  |  ,--|-------> lsr.l #3,d5
    33f2:	|  |  |  |  |                                         |  |  |  |  |  |         add.w d4,d5
    33f4:	|  |  |  |  |                                         |  |  |  |  |  |         tst.l d3
    33f6:	|  |  |  +--|-----------------------------------------|--|--|--|--|--|-------- bge.w 2d28 <CstScaleSprite+0x172>
    33fa:	|  |  +--|--|-----------------------------------------|--|--|--|--|--|-------- bra.w 32ec <CstScaleSprite+0x736>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    33fe:	|  |  |  |  '-----------------------------------------|--|--|--|--|--|-------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3404:	|  |  |  |                                            |  |  |  |  |  |         move.l #108452,50(sp)
    340c:	|  |  |  |                                            |  |  |  |  |  |         lea 1a7a4 <SysBase>,a0
    3412:	|  |  |  |                                            |  |  |  |  |  |         movea.l (a0),a6
    3414:	|  |  |  |                                            |  |  |  |  |  |         moveq #20,d0
    3416:	|  |  |  |                                            |  |  |  |  |  |         moveq #0,d1
    3418:	|  |  |  |                                            |  |  |  |  |  |         jsr -684(a6)
    341c:	|  |  |  |                                            |  |  |  |  |  |         movea.l d0,a0
    341e:	|  |  |  |                                            |  |  |  |  |  |         move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3424:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    3428:	|  |  |  |                                            |  |  |  |  |  |         move.w d6,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    342a:	|  |  |  |                                            |  |  |  |  |  |         move.w a4,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    342e:	|  |  |  |                                            |  |  |  |  |  |         move.l 82(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3434:	|  |  |  |                                            |  |  |  |  |  |         move.l (a2),d3
    3436:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,d0
    3438:	|  |  |  |                                            |  |  |  |  |  |     ,-- bmi.w 3552 <CstScaleSprite+0x99c>
    343c:	|  |  |  |                                            |  |  |  |  |  |     |   asr.l #4,d0
    343e:	|  |  |  |                                            |  |  |  |  |  |     |   movea.w 66(sp),a1
    3442:	|  |  |  |                                            |  |  |  |  |  |     |   adda.w d0,a1
    3444:	|  |  |  |                                            |  |  |  |  |  |     |   move.w a1,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3448:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    344e:	|  |  |  |                                            |  |  |  |  |  |     |   move.w d2,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3452:	|  |  |  |                                            |  |  |  |  |  |     |   move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3456:	|  |  |  |                                            |  |  |  |  |  |     |   move.l 1a6f8 <winWidth>,d5
    345c:	|  |  |  |                                            |  |  |  |  |  |     |   move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3462:	|  |  |  |                                            |  |  |  |  |  |     |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3464:	|  |  |  |                                            |  |  |  |  |  |  ,--|-> lsr.l #3,d5
    3466:	|  |  |  |                                            |  |  |  |  |  |  |  |   add.w d4,d5
    3468:	|  |  |  |                                            |  |  |  |  |  |  |  |   tst.l d3
    346a:	|  |  |  '--------------------------------------------|--|--|--|--|--|--|--|-- bge.w 2d28 <CstScaleSprite+0x172>
    346e:	|  |  '-----------------------------------------------|--|--|--|--|--|--|--|-- bra.w 32ec <CstScaleSprite+0x736>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    3472:	|  |                                                  |  '--|--|--|--|--|--|-> moveq #15,d0
    3474:	|  |                                                  |     |  |  |  |  |  |   add.l d3,d0
    3476:	|  |                                                  |     |  |  |  |  |  |   asr.l #4,d0
    3478:	|  |                                                  |     |  |  |  |  |  |   addq.w #1,d0
    347a:	|  |                                                  |     |  |  |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    347c:	|  |                                                  |     |  |  |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3482:	|  |                                                  |     |  |  |  |  |  |   move.w d4,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3486:	|  |                                                  |     |  |  |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    348a:	|  |                                                  |     |  |  |  |  |  |   lea 10(a0),a1
    348e:	|  |                                                  |     |  |  |  |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    3494:	|  |                                                  |     |  |  |  |  |  |   clr.w 8(a0)
    3498:	|  |                                                  |     |  |  |  |  |  |   move.w #-1,66(sp)
    349e:	|  |                                                  |     |  |  |  |  |  |   moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    34a0:	|  |                                                  |     |  |  |  |  |  |   clr.w 58(sp)
    cutwordssource = 0;
    34a4:	|  |                                                  |     |  |  |  |  |  |   suba.l a3,a3
    extrawords = 1;
    34a6:	|  |                                                  |     |  |  |  |  |  |   moveq #1,d2
    34a8:	|  |                                                  |     |  |  |  |  |  |   move.l #108452,50(sp)
    34b0:	|  |                                                  '-----|--|--|--|--|--|-- bra.w 30c6 <CstScaleSprite+0x510>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    34b4:	|  '--------------------------------------------------------|--|--|--|--|--|-> moveq #15,d0
    34b6:	|                                                           |  |  |  |  |  |   add.l d3,d0
    34b8:	|                                                           |  |  |  |  |  |   asr.l #4,d0
    34ba:	|                                                           |  |  |  |  |  |   move.w 66(sp),d1
    34be:	|                                                           |  |  |  |  |  |   add.w d0,d1
    34c0:	|                                                           |  |  |  |  |  |   move.w d1,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    34c2:	|                                                           |  |  |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    34c8:	|                                                           |  |  |  |  |  |   move.w d2,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    34cc:	|                                                           |  |  |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    34d0:	|                                                           |  |  |  |  |  |   lea 10(a0),a1
    34d4:	|                                                           |  |  |  |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    34da:	|                                                           |  |  |  |  |  |   clr.w 8(a0)
    34de:	|                                                           |  |  |  |  |  |   move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    34e4:	|                                                           |  |  |  |  |  |   clr.w d2
    34e6:	|                                                           |  |  |  |  |  |   move.l #108452,50(sp)
    34ee:	'-----------------------------------------------------------|--|--|--|--|--|-- bra.w 2d1e <CstScaleSprite+0x168>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    34f2:	                                                            |  '--|--|--|--|-> moveq #15,d0
    34f4:	                                                            |     |  |  |  |   add.l d3,d0
    34f6:	                                                            |     |  |  |  |   asr.l #4,d0
    34f8:	                                                            |     |  |  |  |   add.w 58(sp),d0
    34fc:	                                                            |     |  |  |  |   add.w d2,d0
    34fe:	                                                            |     |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3502:	                                                            |     |  |  |  |   move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3508:	                                                            |     |  |  |  |   clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    350c:	                                                            |     |  |  |  |   move.w 86(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3512:	                                                            |     |  |  |  |   move.l 1a6f8 <winWidth>,d5
    bltalwm = 0; //Last Word of this channel almost masked out
    3518:	                                                            |     |  |  |  |   clr.w 58(sp)
    351c:	                                                            '-----|--|--|--|-- bra.w 31b2 <CstScaleSprite+0x5fc>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3520:	                                                                  |  '--|--|-> moveq #15,d0
    3522:	                                                                  |     |  |   add.l d3,d0
    3524:	                                                                  |     |  |   asr.l #4,d0
    3526:	                                                                  |     |  |   addq.w #1,d0
    3528:	                                                                  |     |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    352c:	                                                                  |     |  |   move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3532:	                                                                  |     |  |   move.w d4,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3536:	                                                                  |     |  |   move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    353a:	                                                                  |     |  |   move.l 1a6f8 <winWidth>,d5
    3540:	                                                                  |     |  |   move.w #-1,66(sp)
    3546:	                                                                  |     |  |   moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    3548:	                                                                  |     |  |   clr.w 58(sp)
    cutwordssource = 0;
    354c:	                                                                  |     |  |   suba.l a3,a3
    354e:	                                                                  '-----|--|-- bra.w 33f0 <CstScaleSprite+0x83a>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3552:	                                                                        |  '-> moveq #15,d0
    3554:	                                                                        |      add.l d3,d0
    3556:	                                                                        |      asr.l #4,d0
    3558:	                                                                        |      movea.w 66(sp),a1
    355c:	                                                                        |      adda.w d0,a1
    355e:	                                                                        |      move.w a1,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3562:	                                                                        |      move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3568:	                                                                        |      move.w d2,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    356c:	                                                                        |      move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3570:	                                                                        |      move.l 1a6f8 <winWidth>,d5
    3576:	                                                                        |      move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    357c:	                                                                        |      clr.w d2
    357e:	                                                                        '----- bra.w 3464 <CstScaleSprite+0x8ae>

00003582 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3582:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3584:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    358a:	move.l 8(sp),d0
    358e:	movea.l (sp),a0
    3590:	move.l d0,128(a0)
}
    3594:	nop
    3596:	addq.l #4,sp
    3598:	rts

0000359a <CstSwapBuffer>:

void CstSwapBuffer( ) {
    359a:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    359e:	move.l 1a6d4 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    35a6:	move.l 1a6d8 <CstDrawBuffer>,d0
    35ac:	move.l d0,1a6d4 <CstViewBuffer>
  CstDrawBuffer = tmp;
    35b2:	move.l 16(sp),1a6d8 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    35ba:	move.l 1a6dc <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    35c2:	move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    35c8:	move.l d0,1a6dc <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    35ce:	move.l 12(sp),1a6e0 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    35d6:	move.l 1a6ce <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    35de:	move.l 1a6d4 <CstViewBuffer>,d0
    35e4:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    35e8:	move.l 4(sp),d0
    35ec:	clr.w d0
    35ee:	swap d0
    35f0:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    35f4:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    35f8:	movea.w #118,a0
    35fc:	adda.l 8(sp),a0
    3600:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3602:	movea.w #114,a0
    3606:	adda.l 8(sp),a0
    360a:	move.w 2(sp),(a0)

  ptr +=  40*256;
    360e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3616:	move.l 4(sp),d0
    361a:	clr.w d0
    361c:	swap d0
    361e:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3622:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    3626:	movea.w #126,a0
    362a:	adda.l 8(sp),a0
    362e:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3630:	movea.w #122,a0
    3634:	adda.l 8(sp),a0
    3638:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    363c:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3644:	move.l 4(sp),d0
    3648:	clr.w d0
    364a:	swap d0
    364c:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3650:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3654:	movea.l 8(sp),a0
    3658:	lea 134(a0),a0
    365c:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    365e:	movea.l 8(sp),a0
    3662:	lea 130(a0),a0
    3666:	move.w 2(sp),(a0)

  ptr +=  40*256;
    366a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3672:	move.l 4(sp),d0
    3676:	clr.w d0
    3678:	swap d0
    367a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    367e:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3682:	movea.l 8(sp),a0
    3686:	lea 142(a0),a0
    368a:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    368c:	movea.l 8(sp),a0
    3690:	lea 138(a0),a0
    3694:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3698:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    36a0:	move.l 4(sp),d0
    36a4:	clr.w d0
    36a6:	swap d0
    36a8:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    36ac:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    36b0:	movea.l 8(sp),a0
    36b4:	lea 150(a0),a0
    36b8:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    36ba:	movea.l 8(sp),a0
    36be:	lea 146(a0),a0
    36c2:	move.w 2(sp),(a0)

}
    36c6:	nop
    36c8:	lea 20(sp),sp
    36cc:	rts

000036ce <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    36ce:	          lea -56(sp),sp
    36d2:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    36d4:	          pea 17d43 <PutChar+0x367>
    36da:	          jsr 16f3a <KPrintF>
    36e0:	          addq.l #4,sp

  width = width / 8;
    36e2:	          move.l 64(sp),d0
    36e6:	      ,-- bpl.s 36ea <CstReserveBackdrop+0x1c>
    36e8:	      |   addq.l #7,d0
    36ea:	      '-> asr.l #3,d0
    36ec:	          move.l d0,64(sp)

  if( width < 40) 
    36f0:	          moveq #39,d0
    36f2:	          cmp.l 64(sp),d0
    36f6:	      ,-- blt.s 370c <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    36f8:	      |   pea 17d5d <PutChar+0x381>
    36fe:	      |   jsr 16f3a <KPrintF>
    3704:	      |   addq.l #4,sp
    return FALSE;
    3706:	      |   clr.w d0
    3708:	,-----|-- bra.w 39c8 <CstReserveBackdrop+0x2fa>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    370c:	|     '-> pea 17d9b <PutChar+0x3bf>
    3712:	|         jsr 16f3a <KPrintF>
    3718:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    371a:	|         move.l 64(sp),-(sp)
    371e:	|         jsr fce <CstCreateCopperlist>
    3724:	|         addq.l #4,sp
    3726:	|         move.l d0,1a6ce <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    372c:	|         pea 17dbb <PutChar+0x3df>
    3732:	|         jsr 16f3a <KPrintF>
    3738:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    373a:	|         move.l 64(sp),d1
    373e:	|         move.l 68(sp),d0
    3742:	|         muls.w d1,d0
    3744:	|         move.w d0,1a6c4 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    374a:	|         move.w 1a6c4 <CstBackdropSizePlane>,d1
    3750:	|         move.w d1,d0
    3752:	|         add.w d0,d0
    3754:	|         add.w d0,d0
    3756:	|         add.w d1,d0
    3758:	|         move.w d0,1a6c2 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    375e:	|         move.w 1a6c2 <CstBackdropSize>,d0
    3764:	|         move.w d0,d0
    3766:	|         andi.l #65535,d0
    376c:	|         move.l d0,48(sp)
    3770:	|         moveq #2,d1
    3772:	|         move.l d1,44(sp)
    3776:	|         move.l 1a7a4 <SysBase>,d0
    377c:	|         movea.l d0,a6
    377e:	|         move.l 48(sp),d0
    3782:	|         move.l 44(sp),d1
    3786:	|         jsr -684(a6)
    378a:	|         move.l d0,40(sp)
    378e:	|         move.l 40(sp),d0
    3792:	|         move.l d0,1a6c6 <CstBackDrop>
  if( !CstBackDrop)
    3798:	|         move.l 1a6c6 <CstBackDrop>,d0
    379e:	|     ,-- bne.s 37b4 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    37a0:	|     |   pea 17de2 <PutChar+0x406>
    37a6:	|     |   jsr 16f3a <KPrintF>
    37ac:	|     |   addq.l #4,sp
    return FALSE;  
    37ae:	|     |   clr.w d0
    37b0:	+-----|-- bra.w 39c8 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    37b4:	|     '-> pea 17e1a <PutChar+0x43e>
    37ba:	|         jsr 16f3a <KPrintF>
    37c0:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    37c2:	|         move.l 1a6c6 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    37ca:	|         clr.l 52(sp)
    37ce:	|     ,-- bra.s 37e4 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    37d0:	|  ,--|-> move.l 56(sp),d0
    37d4:	|  |  |   move.l d0,d1
    37d6:	|  |  |   addq.l #4,d1
    37d8:	|  |  |   move.l d1,56(sp)
    37dc:	|  |  |   movea.l d0,a0
    37de:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    37e0:	|  |  |   addq.l #1,52(sp)
    37e4:	|  |  '-> move.w 1a6c2 <CstBackdropSize>,d0
    37ea:	|  |      lsr.w #2,d0
    37ec:	|  |      move.w d0,d0
    37ee:	|  |      andi.l #65535,d0
    37f4:	|  |      cmp.l 52(sp),d0
    37f8:	|  '----- bgt.s 37d0 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    37fa:	|         move.w 1a6c2 <CstBackdropSize>,d0
    3800:	|         move.w d0,d0
    3802:	|         andi.l #65535,d0
    3808:	|         move.l 64(sp),d1
    380c:	|         add.l d1,d1
    380e:	|         add.l d1,d0
    3810:	|         move.l d0,36(sp)
    3814:	|         moveq #2,d0
    3816:	|         move.l d0,32(sp)
    381a:	|         move.l 1a7a4 <SysBase>,d0
    3820:	|         movea.l d0,a6
    3822:	|         move.l 36(sp),d0
    3826:	|         move.l 32(sp),d1
    382a:	|         jsr -684(a6)
    382e:	|         move.l d0,28(sp)
    3832:	|         move.l 28(sp),d0
    3836:	|         move.l d0,1a6d8 <CstDrawBuffer>
  if( !CstDrawBuffer)
    383c:	|         move.l 1a6d8 <CstDrawBuffer>,d0
    3842:	|     ,-- bne.s 3858 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3844:	|     |   pea 17e40 <PutChar+0x464>
    384a:	|     |   jsr 16f3a <KPrintF>
    3850:	|     |   addq.l #4,sp
    return FALSE;  
    3852:	|     |   clr.w d0
    3854:	+-----|-- bra.w 39c8 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3858:	|     '-> pea 17e7a <PutChar+0x49e>
    385e:	|         jsr 16f3a <KPrintF>
    3864:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3866:	|         move.l #10000,24(sp)
    386e:	|         clr.l 20(sp)
    3872:	|         move.l 1a7a4 <SysBase>,d0
    3878:	|         movea.l d0,a6
    387a:	|         move.l 24(sp),d0
    387e:	|         move.l 20(sp),d1
    3882:	|         jsr -684(a6)
    3886:	|         move.l d0,16(sp)
    388a:	|         move.l 16(sp),d0
    388e:	|         move.l d0,1a6e4 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3894:	|         move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    389a:	|     ,-- bne.s 38b0 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    389c:	|     |   pea 17ea2 <PutChar+0x4c6>
    38a2:	|     |   jsr 16f3a <KPrintF>
    38a8:	|     |   addq.l #4,sp
    return FALSE;  
    38aa:	|     |   clr.w d0
    38ac:	+-----|-- bra.w 39c8 <CstReserveBackdrop+0x2fa>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    38b0:	|     '-> move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    38b6:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    38bc:	|         movea.l 1a6e4 <CstBackDropBufferApplyStart>,a0
    38c2:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    38c4:	|         movea.l 1a6e4 <CstBackDropBufferApplyStart>,a0
    38ca:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    38cc:	|         move.w 1a6c2 <CstBackdropSize>,d0
    38d2:	|         move.w d0,d0
    38d4:	|         andi.l #65535,d0
    38da:	|         move.l 64(sp),d1
    38de:	|         add.l d1,d1
    38e0:	|         add.l d1,d0
    38e2:	|         move.l d0,12(sp)
    38e6:	|         moveq #2,d1
    38e8:	|         move.l d1,8(sp)
    38ec:	|         move.l 1a7a4 <SysBase>,d0
    38f2:	|         movea.l d0,a6
    38f4:	|         move.l 12(sp),d0
    38f8:	|         move.l 8(sp),d1
    38fc:	|         jsr -684(a6)
    3900:	|         move.l d0,4(sp)
    3904:	|         move.l 4(sp),d0
    3908:	|         move.l d0,1a6d4 <CstViewBuffer>
  if( !CstViewBuffer)
    390e:	|         move.l 1a6d4 <CstViewBuffer>,d0
    3914:	|     ,-- bne.s 392a <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3916:	|     |   pea 17eed <PutChar+0x511>
    391c:	|     |   jsr 16f3a <KPrintF>
    3922:	|     |   addq.l #4,sp
    return FALSE;  
    3924:	|     |   clr.w d0
    3926:	+-----|-- bra.w 39c8 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    392a:	|     '-> pea 17f27 <PutChar+0x54b>
    3930:	|         jsr 16f3a <KPrintF>
    3936:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3938:	|         move.l 1a6d8 <CstDrawBuffer>,d1
    393e:	|         move.l 64(sp),d0
    3942:	|     ,-- bpl.s 3946 <CstReserveBackdrop+0x278>
    3944:	|     |   addq.l #3,d0
    3946:	|     '-> asr.l #2,d0
    3948:	|         add.l d0,d0
    394a:	|         add.l d0,d0
    394c:	|         add.l d1,d0
    394e:	|         move.l d0,1a6d8 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3954:	|         move.l 1a6d4 <CstViewBuffer>,d1
    395a:	|         move.l 64(sp),d0
    395e:	|     ,-- bpl.s 3962 <CstReserveBackdrop+0x294>
    3960:	|     |   addq.l #3,d0
    3962:	|     '-> asr.l #2,d0
    3964:	|         add.l d0,d0
    3966:	|         add.l d0,d0
    3968:	|         add.l d1,d0
    396a:	|         move.l d0,1a6d4 <CstViewBuffer>
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3970:	|         move.l 1a6ce <CstCopperList>,d0
    3976:	|     ,-- beq.s 3988 <CstReserveBackdrop+0x2ba>
    3978:	|     |   move.l 1a6d8 <CstDrawBuffer>,d0
    397e:	|     +-- beq.s 3988 <CstReserveBackdrop+0x2ba>
    3980:	|     |   move.l 1a6d4 <CstViewBuffer>,d0
    3986:	|  ,--|-- bne.s 399a <CstReserveBackdrop+0x2cc>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3988:	|  |  '-> pea 17f4f <PutChar+0x573>
    398e:	|  |      jsr 16f3a <KPrintF>
    3994:	|  |      addq.l #4,sp
    return FALSE;
    3996:	|  |      clr.w d0
    3998:	+--|----- bra.s 39c8 <CstReserveBackdrop+0x2fa>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    399a:	|  '----> pea 17f7c <PutChar+0x5a0>
    39a0:	|         jsr 16f3a <KPrintF>
    39a6:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    39a8:	|         move.l 1a6ce <CstCopperList>,d0
    39ae:	|         move.l d0,-(sp)
    39b0:	|         jsr 3582 <CstSetCl>
    39b6:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    39b8:	|         pea 17fa3 <PutChar+0x5c7>
    39be:	|         jsr 16f3a <KPrintF>
    39c4:	|         addq.l #4,sp
  return TRUE;
    39c6:	|         moveq #1,d0

}
    39c8:	'-------> movea.l (sp)+,a6
    39ca:	          lea 56(sp),sp
    39ce:	          rts

000039d0 <CstUnfreeze>:

void CstUnfreeze() {
    39d0:	       lea -24(sp),sp
    39d4:	       move.l a6,-(sp)
    39d6:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    39d8:	       pea 17fc6 <PutChar+0x5ea>
    39de:	       jsr 16f3a <KPrintF>
    39e4:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    39e6:	       move.l 1a6f8 <winWidth>,d0
    39ec:	       lsr.l #3,d0
    39ee:	       move.l d0,d1
    39f0:	       move.l 1a6fc <winHeight>,d0
    39f6:	       move.l d0,d0
    39f8:	       muls.w d0,d1
    39fa:	       move.w d1,d0
    39fc:	       add.w d0,d0
    39fe:	       add.w d0,d0
    3a00:	       move.w d0,d2
    3a02:	       add.w d1,d2
    3a04:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3a08:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3a10:	       move.l 1a6ca <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3a18:	       move.l 1a6c6 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3a20:	       clr.l 20(sp)
    3a24:	   ,-- bra.s 3a4a <CstUnfreeze+0x7a>
  {
    *dst++ = *src++;
    3a26:	,--|-> move.l 28(sp),d1
    3a2a:	|  |   move.l d1,d0
    3a2c:	|  |   addq.l #4,d0
    3a2e:	|  |   move.l d0,28(sp)
    3a32:	|  |   move.l 24(sp),d0
    3a36:	|  |   move.l d0,d2
    3a38:	|  |   addq.l #4,d2
    3a3a:	|  |   move.l d2,24(sp)
    3a3e:	|  |   movea.l d1,a0
    3a40:	|  |   move.l (a0),d1
    3a42:	|  |   movea.l d0,a0
    3a44:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3a46:	|  |   addq.l #1,20(sp)
    3a4a:	|  '-> move.w 18(sp),d0
    3a4e:	|      lsr.w #2,d0
    3a50:	|      move.w d0,d0
    3a52:	|      andi.l #65535,d0
    3a58:	|      cmp.l 20(sp),d0
    3a5c:	'----- bgt.s 3a26 <CstUnfreeze+0x56>
  }

  CstApplyBackDropCounter = 2;
    3a5e:	       move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3a66:	       move.l 1a6f8 <winWidth>,d0
    3a6c:	       lsr.l #4,d0
    3a6e:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3a74:	       move.l a0,d1
    3a76:	       addq.l #2,d1
    3a78:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    3a7e:	       move.l d0,d0
    3a80:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3a82:	       move.l 1a6fc <winHeight>,d0
    3a88:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3a8e:	       move.l a0,d1
    3a90:	       addq.l #2,d1
    3a92:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    3a98:	       move.l d0,d0
    3a9a:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3a9c:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3aa2:	       move.l a0,d0
    3aa4:	       addq.l #2,d0
    3aa6:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3aac:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3aae:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3ab4:	       move.l a0,d0
    3ab6:	       addq.l #2,d0
    3ab8:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3abe:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3ac0:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3ac6:	       move.l a0,d0
    3ac8:	       addq.l #2,d0
    3aca:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3ad0:	       clr.w (a0)
  
  if( CstBackDropBackup) {
    3ad2:	       move.l 1a6ca <CstBackDropBackup>,d0
    3ad8:	   ,-- beq.s 3b00 <CstUnfreeze+0x130>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    3ada:	   |   pea 17ff1 <PutChar+0x615>
    3ae0:	   |   jsr 16f3a <KPrintF>
    3ae6:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    3ae8:	   |   move.l 1a6ca <CstBackDropBackup>,10(sp)
    3af0:	   |   move.l 1a7a4 <SysBase>,d0
    3af6:	   |   movea.l d0,a6
    3af8:	   |   movea.l 10(sp),a1
    3afc:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    3b00:	   '-> pea 18015 <PutChar+0x639>
    3b06:	       jsr 16f3a <KPrintF>
    3b0c:	       addq.l #4,sp

}
    3b0e:	       nop
    3b10:	       move.l (sp)+,d2
    3b12:	       movea.l (sp)+,a6
    3b14:	       lea 24(sp),sp
    3b18:	       rts

00003b1a <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    3b1a:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    3b1e:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3b22:	       tst.l 24(sp)
    3b26:	   ,-- bge.s 3b2c <drawLine+0x12>
    3b28:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    3b2c:	   '-> tst.l 28(sp)
    3b30:	   ,-- bge.s 3b36 <drawLine+0x1c>
    3b32:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3b36:	   '-> tst.l 32(sp)
    3b3a:	   ,-- bge.s 3b40 <drawLine+0x26>
    3b3c:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3b40:	   '-> tst.l 36(sp)
    3b44:	   ,-- bge.s 3b4a <drawLine+0x30>
    3b46:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    3b4a:	   '-> move.l 1a840 <sceneWidth>,d0
    3b50:	       cmp.l 24(sp),d0
    3b54:	   ,-- bge.s 3b64 <drawLine+0x4a>
    3b56:	   |   move.l 1a840 <sceneWidth>,d0
    3b5c:	   |   move.l d0,d1
    3b5e:	   |   subq.l #1,d1
    3b60:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3b64:	   '-> move.l 1a840 <sceneWidth>,d0
    3b6a:	       cmp.l 32(sp),d0
    3b6e:	   ,-- bge.s 3b7e <drawLine+0x64>
    3b70:	   |   move.l 1a840 <sceneWidth>,d0
    3b76:	   |   move.l d0,d1
    3b78:	   |   subq.l #1,d1
    3b7a:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    3b7e:	   '-> move.l 1a844 <sceneHeight>,d0
    3b84:	       cmp.l 28(sp),d0
    3b88:	   ,-- bge.s 3b98 <drawLine+0x7e>
    3b8a:	   |   move.l 1a844 <sceneHeight>,d0
    3b90:	   |   move.l d0,d1
    3b92:	   |   subq.l #1,d1
    3b94:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    3b98:	   '-> move.l 1a844 <sceneHeight>,d0
    3b9e:	       cmp.l 36(sp),d0
    3ba2:	   ,-- bge.s 3bb2 <drawLine+0x98>
    3ba4:	   |   move.l 1a844 <sceneHeight>,d0
    3baa:	   |   move.l d0,d1
    3bac:	   |   subq.l #1,d1
    3bae:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    3bb2:	   '-> move.l 24(sp),d0
    3bb6:	       cmp.l 32(sp),d0
    3bba:	,----- ble.s 3bd6 <drawLine+0xbc>
		x = x2; 
    3bbc:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    3bc2:	|      tst.w 10(sp)
    3bc6:	|      seq d0
    3bc8:	|      neg.b d0
    3bca:	|      move.b d0,d0
    3bcc:	|      andi.w #255,d0
    3bd0:	|      move.w d0,10(sp)
    3bd4:	|  ,-- bra.s 3bdc <drawLine+0xc2>
	} else x = x1;
    3bd6:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    3bdc:	   '-> move.l 28(sp),d1
    3be0:	       cmp.l 36(sp),d1
    3be4:	,----- ble.s 3c00 <drawLine+0xe6>
		y = y2; 
    3be6:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    3bec:	|      tst.w 10(sp)
    3bf0:	|      seq d0
    3bf2:	|      neg.b d0
    3bf4:	|      move.b d0,d0
    3bf6:	|      andi.w #255,d0
    3bfa:	|      move.w d0,10(sp)
    3bfe:	|  ,-- bra.s 3c06 <drawLine+0xec>
	} else y = y1;	
    3c00:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    3c06:	   '-> move.l 32(sp),d0
    3c0a:	       sub.l 24(sp),d0
    3c0e:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    3c12:	       move.l 6(sp),d0
    3c16:	   ,-- bpl.s 3c1a <drawLine+0x100>
    3c18:	   |   neg.l d0
    3c1a:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    3c1e:	       move.l 36(sp),d1
    3c22:	       sub.l 28(sp),d1
    3c26:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    3c2a:	       move.l 2(sp),d0
    3c2e:	   ,-- bpl.s 3c32 <drawLine+0x118>
    3c30:	   |   neg.l d0
    3c32:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    3c36:	       tst.l 6(sp)
    3c3a:	   ,-- bne.s 3c5e <drawLine+0x144>
		diffX = 1;
    3c3c:	   |   moveq #1,d0
    3c3e:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    3c42:	   |   move.l 1a840 <sceneWidth>,d0
    3c48:	   |   subq.l #1,d0
    3c4a:	   |   cmp.l 16(sp),d0
    3c4e:	   +-- bne.s 3c5e <drawLine+0x144>
    3c50:	   |   move.l 1a840 <sceneWidth>,d0
    3c56:	   |   move.l d0,d1
    3c58:	   |   subq.l #2,d1
    3c5a:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    3c5e:	   '-> tst.l 2(sp)
    3c62:	   ,-- bne.s 3c86 <drawLine+0x16c>
		diffY = 1;
    3c64:	   |   moveq #1,d0
    3c66:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    3c6a:	   |   move.l 1a844 <sceneHeight>,d0
    3c70:	   |   subq.l #1,d0
    3c72:	   |   cmp.l 12(sp),d0
    3c76:	   +-- bne.s 3c86 <drawLine+0x16c>
    3c78:	   |   move.l 1a844 <sceneHeight>,d0
    3c7e:	   |   move.l d0,d1
    3c80:	   |   subq.l #2,d1
    3c82:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    3c86:	   '-> pea 1802b <PutChar+0x64f>
    3c8c:	       jsr 16f3a <KPrintF>
    3c92:	       addq.l #4,sp
	
}
    3c94:	       nop
    3c96:	       lea 20(sp),sp
    3c9a:	       rts

00003c9c <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    3c9c:	                      lea -24(sp),sp
    3ca0:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    3ca2:	                      move.l 1a700 <firstTexture>,d0
    3ca8:	,-------------------- beq.w 3d86 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    3cac:	|                     clr.l 24(sp)
    3cb0:	|     ,-------------- bra.w 3d7a <deleteTextures+0xde>
			BOOL found = FALSE;
    3cb4:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    3cb8:	|  |  |               move.l 1a700 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    3cc0:	|  |  |               movea.l 20(sp),a0
    3cc4:	|  |  |               move.l (a0),d1
    3cc6:	|  |  |               move.l 24(sp),d0
    3cca:	|  |  |               add.l d0,d0
    3ccc:	|  |  |               add.l d0,d0
    3cce:	|  |  |               movea.l 36(sp),a0
    3cd2:	|  |  |               adda.l d0,a0
    3cd4:	|  |  |               move.l (a0),d0
    3cd6:	|  |  |               cmp.l d1,d0
    3cd8:	|  |  |  ,----------- bne.w 3d6c <deleteTextures+0xd0>
				found = TRUE;
    3cdc:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    3ce2:	|  |  |  |            movea.l 20(sp),a0
    3ce6:	|  |  |  |            move.l 12(a0),d0
    3cea:	|  |  |  |            move.l d0,1a700 <firstTexture>
				FreeVec(list);
    3cf0:	|  |  |  |            move.l 20(sp),6(sp)
    3cf6:	|  |  |  |            move.l 1a7a4 <SysBase>,d0
    3cfc:	|  |  |  |            movea.l d0,a6
    3cfe:	|  |  |  |            movea.l 6(sp),a1
    3d02:	|  |  |  |            jsr -690(a6)
				continue;
    3d06:	|  |  |  |  ,-------- bra.s 3d76 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    3d08:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    3d0c:	|  |  |  |  |  |      movea.l 12(a0),a0
    3d10:	|  |  |  |  |  |      move.l (a0),d1
    3d12:	|  |  |  |  |  |      move.l 24(sp),d0
    3d16:	|  |  |  |  |  |      add.l d0,d0
    3d18:	|  |  |  |  |  |      add.l d0,d0
    3d1a:	|  |  |  |  |  |      movea.l 36(sp),a0
    3d1e:	|  |  |  |  |  |      adda.l d0,a0
    3d20:	|  |  |  |  |  |      move.l (a0),d0
    3d22:	|  |  |  |  |  |      cmp.l d1,d0
    3d24:	|  |  |  |  |  |  ,-- bne.s 3d62 <deleteTextures+0xc6>
					found = TRUE;
    3d26:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    3d2c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3d30:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    3d36:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3d3a:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    3d3e:	|  |  |  |  |  |  |   move.l 12(a0),d0
    3d42:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3d46:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    3d4a:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    3d50:	|  |  |  |  |  |  |   move.l 1a7a4 <SysBase>,d0
    3d56:	|  |  |  |  |  |  |   movea.l d0,a6
    3d58:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    3d5c:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    3d60:	|  |  |  |  +--|--|-- bra.s 3d76 <deleteTextures+0xda>
				}
				list = list->next;
    3d62:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    3d66:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    3d6c:	|  |  |  '--|--|----> movea.l 20(sp),a0
    3d70:	|  |  |     |  |      move.l 12(a0),d0
    3d74:	|  |  |     |  '----- bne.s 3d08 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    3d76:	|  |  |     '-------> addq.l #1,24(sp)
    3d7a:	|  |  '-------------> move.l 24(sp),d0
    3d7e:	|  |                  cmp.l 32(sp),d0
    3d82:	|  '----------------- bcs.w 3cb4 <deleteTextures+0x18>
			}
		}
	}
}
    3d86:	'-------------------> nop
    3d88:	                      movea.l (sp)+,a6
    3d8a:	                      lea 24(sp),sp
    3d8e:	                      rts

00003d90 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    3d90:	subq.l #4,sp
    3d92:	move.l 8(sp),d0
    3d96:	move.w d0,d0
    3d98:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    3d9c:	pea 1804e <PutChar+0x672>
    3da2:	jsr 16f3a <KPrintF>
    3da8:	addq.l #4,sp
}
    3daa:	nop
    3dac:	addq.l #4,sp
    3dae:	rts

00003db0 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    3db0:	       moveq #-1,d0
    3db2:	       cmp.l 4(sp),d0
    3db6:	   ,-- bne.s 3dbc <resourceNameFromNum+0xc>
    3db8:	   |   moveq #0,d0
    3dba:	,--|-- bra.s 3df4 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    3dbc:	|  '-> move.l 1a780 <numResourceNames>,d0
    3dc2:	|  ,-- bne.s 3dcc <resourceNameFromNum+0x1c>
    3dc4:	|  |   move.l #98430,d0
    3dca:	+--|-- bra.s 3df4 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    3dcc:	|  '-> move.l 1a780 <numResourceNames>,d0
    3dd2:	|      cmp.l 4(sp),d0
    3dd6:	|  ,-- ble.s 3dee <resourceNameFromNum+0x3e>
    3dd8:	|  |   move.l 1a738 <allResourceNames>,d1
    3dde:	|  |   move.l 4(sp),d0
    3de2:	|  |   add.l d0,d0
    3de4:	|  |   add.l d0,d0
    3de6:	|  |   movea.l d1,a0
    3de8:	|  |   adda.l d0,a0
    3dea:	|  |   move.l (a0),d0
    3dec:	+--|-- bra.s 3df4 <resourceNameFromNum+0x44>
	return "Unknown resource";
    3dee:	|  '-> move.l #98439,d0
    3df4:	'----> rts

00003df6 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    3df6:	          lea -44(sp),sp
    3dfa:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    3dfe:	          move.l #320,1a6f8 <winWidth>
    winHeight = 256;
    3e08:	          move.l #256,1a6fc <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    3e12:	          tst.l 60(sp)
    3e16:	      ,-- bne.s 3e2e <main_sludge+0x38>
		bundleFolder = copyString("game/");
    3e18:	      |   pea 18098 <PutChar+0x6bc>
    3e1e:	      |   jsr b8 <copyString>
    3e24:	      |   addq.l #4,sp
    3e26:	      |   move.l d0,1a710 <bundleFolder>
    3e2c:	   ,--|-- bra.s 3e44 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    3e2e:	   |  '-> movea.l 64(sp),a0
    3e32:	   |      move.l (a0),d0
    3e34:	   |      move.l d0,-(sp)
    3e36:	   |      jsr b8 <copyString>
    3e3c:	   |      addq.l #4,sp
    3e3e:	   |      move.l d0,1a710 <bundleFolder>
	}
    
	int lastSlash = -1;
    3e44:	   '----> moveq #-1,d0
    3e46:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    3e4a:	          clr.l 44(sp)
    3e4e:	   ,----- bra.s 3e70 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    3e50:	,--|----> move.l 1a710 <bundleFolder>,d1
    3e56:	|  |      move.l 44(sp),d0
    3e5a:	|  |      movea.l d1,a0
    3e5c:	|  |      adda.l d0,a0
    3e5e:	|  |      move.b (a0),d0
    3e60:	|  |      cmpi.b #47,d0
    3e64:	|  |  ,-- bne.s 3e6c <main_sludge+0x76>
    3e66:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    3e6c:	|  |  '-> addq.l #1,44(sp)
    3e70:	|  '----> move.l 1a710 <bundleFolder>,d1
    3e76:	|         move.l 44(sp),d0
    3e7a:	|         movea.l d1,a0
    3e7c:	|         adda.l d0,a0
    3e7e:	|         move.b (a0),d0
    3e80:	'-------- bne.s 3e50 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    3e82:	          move.l 1a710 <bundleFolder>,d0
    3e88:	          move.l 48(sp),d1
    3e8c:	          addq.l #1,d1
    3e8e:	          movea.l d0,a0
    3e90:	          adda.l d1,a0
    3e92:	          clr.b (a0)

	if (argc > 1) {
    3e94:	          moveq #1,d0
    3e96:	          cmp.l 60(sp),d0
    3e9a:	      ,-- bge.s 3eb6 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    3e9c:	      |   move.l 60(sp),d0
    3ea0:	      |   addi.l #1073741823,d0
    3ea6:	      |   add.l d0,d0
    3ea8:	      |   add.l d0,d0
    3eaa:	      |   movea.l 64(sp),a0
    3eae:	      |   adda.l d0,a0
    3eb0:	      |   move.l (a0),52(sp)
    3eb4:	   ,--|-- bra.s 3f10 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    3eb6:	   |  '-> move.l 1a710 <bundleFolder>,d0
    3ebc:	   |      pea 1809e <PutChar+0x6c2>
    3ec2:	   |      move.l d0,-(sp)
    3ec4:	   |      jsr 13a1a <joinStrings>
    3eca:	   |      addq.l #8,sp
    3ecc:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    3ed0:	   |      move.l 52(sp),-(sp)
    3ed4:	   |      jsr 13914 <fileExists>
    3eda:	   |      addq.l #4,sp
    3edc:	   |      tst.b d0
    3ede:	   +----- bne.s 3f10 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    3ee0:	   |      move.l 52(sp),40(sp)
    3ee6:	   |      move.l 1a7a4 <SysBase>,d0
    3eec:	   |      movea.l d0,a6
    3eee:	   |      movea.l 40(sp),a1
    3ef2:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    3ef6:	   |      move.l 1a710 <bundleFolder>,d0
    3efc:	   |      pea 180ab <PutChar+0x6cf>
    3f02:	   |      move.l d0,-(sp)
    3f04:	   |      jsr 13a1a <joinStrings>
    3f0a:	   |      addq.l #8,sp
    3f0c:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    3f10:	   '----> pea 180b4 <PutChar+0x6d8>
    3f16:	          jsr 16f3a <KPrintF>
    3f1c:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    3f1e:	          move.l 52(sp),-(sp)
    3f22:	          jsr 13914 <fileExists>
    3f28:	          addq.l #4,sp
    3f2a:	          tst.b d0
    3f2c:	      ,-- bne.s 3f84 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    3f2e:	      |   move.l 1a7ac <DOSBase>,d0
    3f34:	      |   movea.l d0,a6
    3f36:	      |   jsr -60(a6)
    3f3a:	      |   move.l d0,28(sp)
    3f3e:	      |   move.l 28(sp),d0
    3f42:	      |   move.l d0,24(sp)
    3f46:	      |   move.l #98484,20(sp)
    3f4e:	      |   moveq #21,d0
    3f50:	      |   move.l d0,16(sp)
    3f54:	      |   move.l 1a7ac <DOSBase>,d0
    3f5a:	      |   movea.l d0,a6
    3f5c:	      |   move.l 24(sp),d1
    3f60:	      |   move.l 20(sp),d2
    3f64:	      |   move.l 16(sp),d3
    3f68:	      |   jsr -48(a6)
    3f6c:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    3f70:	      |   pea 180b4 <PutChar+0x6d8>
    3f76:	      |   jsr 16f3a <KPrintF>
    3f7c:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    3f7e:	      |   moveq #0,d0
    3f80:	,-----|-- bra.w 4182 <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    3f84:	|     '-> pea 180ca <PutChar+0x6ee>
    3f8a:	|         jsr 16f3a <KPrintF>
    3f90:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    3f92:	|         move.l 52(sp),-(sp)
    3f96:	|         jsr 418c <setGameFilePath>
    3f9c:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    3f9e:	|         move.l 52(sp),-(sp)
    3fa2:	|         jsr 573a <initSludge>
    3fa8:	|         addq.l #4,sp
    3faa:	|         tst.w d0
    3fac:	|     ,-- bne.s 3fb4 <main_sludge+0x1be>
    3fae:	|     |   moveq #0,d0
    3fb0:	+-----|-- bra.w 4182 <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    3fb4:	|     '-> move.l 1a6f8 <winWidth>,d0
    3fba:	|         cmpi.l #320,d0
    3fc0:	|     ,-- bne.s 3fd0 <main_sludge+0x1da>
    3fc2:	|     |   move.l 1a6fc <winHeight>,d0
    3fc8:	|     |   cmpi.l #256,d0
    3fce:	|  ,--|-- beq.s 3ff2 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    3fd0:	|  |  '-> pea 180db <PutChar+0x6ff>
    3fd6:	|  |      jsr 16f3a <KPrintF>
    3fdc:	|  |      addq.l #4,sp
		winWidth = 320;
    3fde:	|  |      move.l #320,1a6f8 <winWidth>
		winHeight = 256;
    3fe8:	|  |      move.l #256,1a6fc <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    3ff2:	|  '----> pea 18158 <PutChar+0x77c>
    3ff8:	|         jsr 16f3a <KPrintF>
    3ffe:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4000:	|         move.l 1a6fc <winHeight>,d0
    4006:	|         move.l d0,d1
    4008:	|         move.l 1a6f8 <winWidth>,d0
    400e:	|         move.l d1,-(sp)
    4010:	|         move.l d0,-(sp)
    4012:	|         jsr d132 <resizeBackdrop>
    4018:	|         addq.l #8,sp
    401a:	|         tst.w d0
    401c:	|     ,-- bne.s 4032 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    401e:	|     |   pea 1816b <PutChar+0x78f>
    4024:	|     |   jsr 16f3a <KPrintF>
    402a:	|     |   addq.l #4,sp
		return FALSE;
    402c:	|     |   moveq #0,d0
    402e:	+-----|-- bra.w 4182 <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4032:	|     '-> pea 18191 <PutChar+0x7b5>
    4038:	|         jsr 16f3a <KPrintF>
    403e:	|         addq.l #4,sp
	if (! initPeople ())
    4040:	|         jsr a68e <initPeople>
    4046:	|         tst.w d0
    4048:	|     ,-- bne.s 405e <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    404a:	|     |   pea 1819e <PutChar+0x7c2>
    4050:	|     |   jsr 16f3a <KPrintF>
    4056:	|     |   addq.l #4,sp
		return FALSE;
    4058:	|     |   moveq #0,d0
    405a:	+-----|-- bra.w 4182 <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    405e:	|     '-> pea 181bf <PutChar+0x7e3>
    4064:	|         jsr 16f3a <KPrintF>
    406a:	|         addq.l #4,sp
	if (! initFloor ())
    406c:	|         jsr 162f0 <initFloor>
    4072:	|         tst.w d0
    4074:	|     ,-- bne.s 408a <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    4076:	|     |   pea 181cb <PutChar+0x7ef>
    407c:	|     |   jsr 16f3a <KPrintF>
    4082:	|     |   addq.l #4,sp
		
		return FALSE;
    4084:	|     |   moveq #0,d0
    4086:	+-----|-- bra.w 4182 <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    408a:	|     '-> pea 181eb <PutChar+0x80f>
    4090:	|         jsr 16f3a <KPrintF>
    4096:	|         addq.l #4,sp
	if (! initObjectTypes ())
    4098:	|         jsr d2ee <initObjectTypes>
    409e:	|         tst.w d0
    40a0:	|     ,-- bne.s 40b6 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    40a2:	|     |   pea 181fc <PutChar+0x820>
    40a8:	|     |   jsr 16f3a <KPrintF>
    40ae:	|     |   addq.l #4,sp
		return FALSE;
    40b0:	|     |   moveq #0,d0
    40b2:	+-----|-- bra.w 4182 <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    40b6:	|     '-> pea 18222 <PutChar+0x846>
    40bc:	|         jsr 16f3a <KPrintF>
    40c2:	|         addq.l #4,sp
	initSpeech ();
    40c4:	|         jsr 7b62 <initSpeech>
	KPrintF("Init status bar\n");
    40ca:	|         pea 1822f <PutChar+0x853>
    40d0:	|         jsr 16f3a <KPrintF>
    40d6:	|         addq.l #4,sp
	initStatusBar ();
    40d8:	|         jsr 7626 <initStatusBar>

	KPrintF("Get numbered string\n");
    40de:	|         pea 18240 <PutChar+0x864>
    40e4:	|         jsr 16f3a <KPrintF>
    40ea:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    40ec:	|         pea 1 <_start+0x1>
    40f0:	|         jsr 6930 <getNumberedString>
    40f6:	|         addq.l #4,sp
    40f8:	|         move.l d0,1a708 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    40fe:	|         pea 18255 <PutChar+0x879>
    4104:	|         jsr 16f3a <KPrintF>
    410a:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    410c:	|         move.l 1a774 <noStack>,d0
    4112:	|         pea 1 <_start+0x1>
    4116:	|         move.l d0,-(sp)
    4118:	|         clr.l -(sp)
    411a:	|         clr.l -(sp)
    411c:	|         clr.l -(sp)
    411e:	|         jsr 6786 <startNewFunctionNum>
    4124:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    4128:	|         pea 1826d <PutChar+0x891>
    412e:	|         jsr 16f3a <KPrintF>
    4134:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    4136:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    413e:	|         clr.l 1a714 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    4144:	|     ,-- bra.s 4164 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    4146:	|  ,--|-> jsr 6716 <sludgeDisplay>
		CsiCheckInput();
    414c:	|  |  |   jsr cc5a <CsiCheckInput>
		walkAllPeople();
    4152:	|  |  |   jsr bc14 <walkAllPeople>
		handleInput();
    4158:	|  |  |   jsr 54d4 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    415e:	|  |  |   jsr 16e6e <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    4164:	|  |  '-> move.l 1a714 <weAreDoneSoQuit>,d0
    416a:	|  '----- beq.s 4146 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    416c:	|         move.l 52(sp),32(sp)
    4172:	|         move.l 1a7a4 <SysBase>,d0
    4178:	|         movea.l d0,a6
    417a:	|         movea.l 32(sp),a1
    417e:	|         jsr -690(a6)
}
    4182:	'-------> movem.l (sp)+,d2-d3/a6
    4186:	          lea 44(sp),sp
    418a:	          rts

0000418c <setGameFilePath>:

void setGameFilePath (char * f) {
    418c:	          lea -1104(sp),sp
    4190:	          move.l a6,-(sp)
    4192:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4194:	          move.l #1112,d0
    419a:	          add.l sp,d0
    419c:	          addi.l #-1102,d0
    41a2:	          move.l d0,1100(sp)
    41a6:	          move.l #998,1096(sp)
    41ae:	          move.l 1a7ac <DOSBase>,d0
    41b4:	          movea.l d0,a6
    41b6:	          move.l 1100(sp),d1
    41ba:	          move.l 1096(sp),d2
    41be:	          jsr -564(a6)
    41c2:	          move.w d0,1094(sp)
    41c6:	          move.w 1094(sp),d0
    41ca:	      ,-- bne.s 41da <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    41cc:	      |   pea 18280 <PutChar+0x8a4>
    41d2:	      |   jsr 16f3a <KPrintF>
    41d8:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    41da:	      '-> moveq #-1,d0
    41dc:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    41e0:	          clr.l 1104(sp)
    41e4:	   ,----- bra.s 4202 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    41e6:	,--|----> move.l 1104(sp),d0
    41ea:	|  |      movea.l 1116(sp),a0
    41ee:	|  |      adda.l d0,a0
    41f0:	|  |      move.b (a0),d0
    41f2:	|  |      cmpi.b #47,d0
    41f6:	|  |  ,-- bne.s 41fe <setGameFilePath+0x72>
    41f8:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    41fe:	|  |  '-> addq.l #1,1104(sp)
    4202:	|  '----> move.l 1104(sp),d0
    4206:	|         movea.l 1116(sp),a0
    420a:	|         adda.l d0,a0
    420c:	|         move.b (a0),d0
    420e:	'-------- bne.s 41e6 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4210:	          moveq #-1,d0
    4212:	          cmp.l 1108(sp),d0
    4216:	   ,----- beq.s 4290 <setGameFilePath+0x104>
		f[got] = 0;	
    4218:	   |      move.l 1108(sp),d0
    421c:	   |      movea.l 1116(sp),a0
    4220:	   |      adda.l d0,a0
    4222:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    4224:	   |      move.l 1116(sp),1090(sp)
    422a:	   |      moveq #-2,d0
    422c:	   |      move.l d0,1086(sp)
    4230:	   |      move.l 1a7ac <DOSBase>,d0
    4236:	   |      movea.l d0,a6
    4238:	   |      move.l 1090(sp),d1
    423c:	   |      move.l 1086(sp),d2
    4240:	   |      jsr -84(a6)
    4244:	   |      move.l d0,1082(sp)
    4248:	   |      move.l 1082(sp),d0
    424c:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    4250:	   |      move.l 1078(sp),1074(sp)
    4256:	   |      move.l 1a7ac <DOSBase>,d0
    425c:	   |      movea.l d0,a6
    425e:	   |      move.l 1074(sp),d1
    4262:	   |      jsr -126(a6)
    4266:	   |      move.l d0,1070(sp)
    426a:	   |      move.l 1070(sp),d0
    426e:	   |  ,-- bne.s 4282 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    4270:	   |  |   move.l 1116(sp),-(sp)
    4274:	   |  |   pea 182a6 <PutChar+0x8ca>
    427a:	   |  |   jsr 16f3a <KPrintF>
    4280:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    4282:	   |  '-> move.l 1108(sp),d0
    4286:	   |      movea.l 1116(sp),a0
    428a:	   |      adda.l d0,a0
    428c:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4290:	   '----> move.l #400,1066(sp)
    4298:	          clr.l 1062(sp)
    429c:	          move.l 1a7a4 <SysBase>,d0
    42a2:	          movea.l d0,a6
    42a4:	          move.l 1066(sp),d0
    42a8:	          move.l 1062(sp),d1
    42ac:	          jsr -684(a6)
    42b0:	          move.l d0,1058(sp)
    42b4:	          move.l 1058(sp),d0
    42b8:	          move.l d0,1a70c <gamePath>
	if (gamePath==0) {
    42be:	          move.l 1a70c <gamePath>,d0
    42c4:	      ,-- bne.s 42d8 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    42c6:	      |   pea 182d9 <PutChar+0x8fd>
    42cc:	      |   jsr 16f3a <KPrintF>
    42d2:	      |   addq.l #4,sp
    42d4:	   ,--|-- bra.w 43c0 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    42d8:	   |  '-> move.l 1a70c <gamePath>,1054(sp)
    42e0:	   |      moveq #-2,d0
    42e2:	   |      move.l d0,1050(sp)
    42e6:	   |      move.l 1a7ac <DOSBase>,d0
    42ec:	   |      movea.l d0,a6
    42ee:	   |      move.l 1054(sp),d1
    42f2:	   |      move.l 1050(sp),d2
    42f6:	   |      jsr -84(a6)
    42fa:	   |      move.l d0,1046(sp)
    42fe:	   |      move.l 1046(sp),d0
    4302:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    4306:	   |      move.l 1042(sp),1038(sp)
    430c:	   |      move.l 1a7ac <DOSBase>,d0
    4312:	   |      movea.l d0,a6
    4314:	   |      move.l 1038(sp),d1
    4318:	   |      jsr -126(a6)
    431c:	   |      move.l d0,1034(sp)
    4320:	   |      move.l 1034(sp),d0
    4324:	   |  ,-- bne.s 4334 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    4326:	   |  |   pea 18314 <PutChar+0x938>
    432c:	   |  |   jsr 16f3a <KPrintF>
    4332:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    4334:	   |  '-> move.l #1112,d0
    433a:	   |      add.l sp,d0
    433c:	   |      addi.l #-1102,d0
    4342:	   |      move.l d0,1030(sp)
    4346:	   |      moveq #-2,d0
    4348:	   |      move.l d0,1026(sp)
    434c:	   |      move.l 1a7ac <DOSBase>,d0
    4352:	   |      movea.l d0,a6
    4354:	   |      move.l 1030(sp),d1
    4358:	   |      move.l 1026(sp),d2
    435c:	   |      jsr -84(a6)
    4360:	   |      move.l d0,1022(sp)
    4364:	   |      move.l 1022(sp),d0
    4368:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    436c:	   |      move.l 1042(sp),1018(sp)
    4372:	   |      move.l 1a7ac <DOSBase>,d0
    4378:	   |      movea.l d0,a6
    437a:	   |      move.l 1018(sp),d1
    437e:	   |      jsr -126(a6)
    4382:	   |      move.l d0,1014(sp)
    4386:	   |      move.l 1014(sp),d0
    438a:	   |  ,-- bne.s 43a0 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    438c:	   |  |   moveq #10,d0
    438e:	   |  |   add.l sp,d0
    4390:	   |  |   move.l d0,-(sp)
    4392:	   |  |   pea 18340 <PutChar+0x964>
    4398:	   |  |   jsr 16f3a <KPrintF>
    439e:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    43a0:	   |  '-> move.l 1a70c <gamePath>,d0
    43a6:	   +----- beq.s 43c0 <setGameFilePath+0x234>
    43a8:	   |      move.l 1a70c <gamePath>,1010(sp)
    43b0:	   |      move.l 1a7a4 <SysBase>,d0
    43b6:	   |      movea.l d0,a6
    43b8:	   |      movea.l 1010(sp),a1
    43bc:	   |      jsr -690(a6)
}
    43c0:	   '----> move.l (sp)+,d2
    43c2:	          movea.l (sp)+,a6
    43c4:	          lea 1104(sp),sp
    43c8:	          rts

000043ca <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    43ca:	,-------> lea -16(sp),sp
    43ce:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    43d0:	|         move.l 24(sp),-(sp)
    43d4:	|         jsr 64f8 <pauseFunction>
    43da:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    43dc:	|     ,-- bra.s 43ee <abortFunction+0x24>
    43de:	|  ,--|-> moveq #24,d0
    43e0:	|  |  |   add.l 24(sp),d0
    43e4:	|  |  |   move.l d0,-(sp)
    43e6:	|  |  |   jsr 14e72 <trimStack>
    43ec:	|  |  |   addq.l #4,sp
    43ee:	|  |  '-> movea.l 24(sp),a0
    43f2:	|  |      move.l 24(a0),d0
    43f6:	|  '----- bne.s 43de <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    43f8:	|         movea.l 24(sp),a0
    43fc:	|         move.l 4(a0),12(sp)
    4402:	|         move.l 1a7a4 <SysBase>,d0
    4408:	|         movea.l d0,a6
    440a:	|         movea.l 12(sp),a1
    440e:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    4412:	|         clr.l 16(sp)
    4416:	|     ,-- bra.s 4436 <abortFunction+0x6c>
    4418:	|  ,--|-> movea.l 24(sp),a0
    441c:	|  |  |   move.l 20(a0),d1
    4420:	|  |  |   move.l 16(sp),d0
    4424:	|  |  |   lsl.l #3,d0
    4426:	|  |  |   add.l d1,d0
    4428:	|  |  |   move.l d0,-(sp)
    442a:	|  |  |   jsr 1473c <unlinkVar>
    4430:	|  |  |   addq.l #4,sp
    4432:	|  |  |   addq.l #1,16(sp)
    4436:	|  |  '-> movea.l 24(sp),a0
    443a:	|  |      move.l 8(a0),d0
    443e:	|  |      cmp.l 16(sp),d0
    4442:	|  '----- bgt.s 4418 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    4444:	|         movea.l 24(sp),a0
    4448:	|         move.l 20(a0),8(sp)
    444e:	|         move.l 1a7a4 <SysBase>,d0
    4454:	|         movea.l d0,a6
    4456:	|         movea.l 8(sp),a1
    445a:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    445e:	|         moveq #28,d0
    4460:	|         add.l 24(sp),d0
    4464:	|         move.l d0,-(sp)
    4466:	|         jsr 1473c <unlinkVar>
    446c:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    446e:	|         movea.l 24(sp),a0
    4472:	|         move.l 40(a0),d0
    4476:	|     ,-- beq.s 4488 <abortFunction+0xbe>
    4478:	|     |   movea.l 24(sp),a0
    447c:	|     |   move.l 40(a0),d0
    4480:	|     |   move.l d0,-(sp)
    4482:	'-----|-- jsr 43ca <abortFunction>(pc)
    4486:	      |   addq.l #4,sp
	FreeVec(fun);
    4488:	      '-> move.l 24(sp),4(sp)
    448e:	          move.l 1a7a4 <SysBase>,d0
    4494:	          movea.l d0,a6
    4496:	          movea.l 4(sp),a1
    449a:	          jsr -690(a6)
	fun = NULL;
    449e:	          clr.l 24(sp)
}
    44a2:	          nop
    44a4:	          movea.l (sp)+,a6
    44a6:	          lea 16(sp),sp
    44aa:	          rts

000044ac <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    44ac:	          subq.l #8,sp
	int n = 0;
    44ae:	          clr.l 4(sp)
	*killedMyself = FALSE;
    44b2:	          movea.l 20(sp),a0
    44b6:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    44b8:	          move.l 1a73c <allRunningFunctions>,(sp)
	while (fun) {
    44be:	   ,----- bra.s 44ec <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    44c0:	,--|----> movea.l (sp),a0
    44c2:	|  |      move.l (a0),d0
    44c4:	|  |      cmp.l 12(sp),d0
    44c8:	|  |  ,-- bne.s 44e6 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    44ca:	|  |  |   movea.l (sp),a0
    44cc:	|  |  |   move.w #1,54(a0)
			n++;
    44d2:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    44d6:	|  |  |   move.l (sp),d0
    44d8:	|  |  |   cmp.l 16(sp),d0
    44dc:	|  |  +-- bne.s 44e6 <cancelAFunction+0x3a>
    44de:	|  |  |   movea.l 20(sp),a0
    44e2:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    44e6:	|  |  '-> movea.l (sp),a0
    44e8:	|  |      move.l 44(a0),(sp)
	while (fun) {
    44ec:	|  '----> tst.l (sp)
    44ee:	'-------- bne.s 44c0 <cancelAFunction+0x14>
	}
	return n;
    44f0:	          move.l 4(sp),d0
}
    44f4:	          addq.l #8,sp
    44f6:	          rts

000044f8 <completeTimers>:


void completeTimers () {
    44f8:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    44fa:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    4500:	   ,----- bra.s 4516 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    4502:	,--|----> movea.l (sp),a0
    4504:	|  |      move.b 56(a0),d0
    4508:	|  |  ,-- bne.s 4510 <completeTimers+0x18>
    450a:	|  |  |   movea.l (sp),a0
    450c:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    4510:	|  |  '-> movea.l (sp),a0
    4512:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4516:	|  '----> tst.l (sp)
    4518:	'-------- bne.s 4502 <completeTimers+0xa>
	}
}
    451a:	          nop
    451c:	          nop
    451e:	          addq.l #4,sp
    4520:	          rts

00004522 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    4522:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    4526:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    452c:	                                                             movea.l 80(sp),a0
    4530:	                                                             move.w 54(a0),d0
    4534:	,----------------------------------------------------------- beq.w 53c2 <continueFunction+0xea0>
		abortFunction (fun);
    4538:	|                                                            move.l 80(sp),-(sp)
    453c:	|                                                            jsr 43ca <abortFunction>
    4542:	|                                                            addq.l #4,sp
		return TRUE;
    4544:	|                                                            moveq #1,d0
    4546:	|  ,-------------------------------------------------------- bra.w 53cc <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    454a:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    4550:	|  |  |                                                      movea.l 80(sp),a0
    4554:	|  |  |                                                      move.l 4(a0),d1
    4558:	|  |  |                                                      movea.l 80(sp),a0
    455c:	|  |  |                                                      move.l 36(a0),d0
    4560:	|  |  |                                                      lsl.l #3,d0
    4562:	|  |  |                                                      movea.l d1,a0
    4564:	|  |  |                                                      adda.l d0,a0
    4566:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    456c:	|  |  |                                                      movea.l 80(sp),a0
    4570:	|  |  |                                                      move.l 4(a0),d1
    4574:	|  |  |                                                      movea.l 80(sp),a0
    4578:	|  |  |                                                      move.l 36(a0),d0
    457c:	|  |  |                                                      lsl.l #3,d0
    457e:	|  |  |                                                      movea.l d1,a0
    4580:	|  |  |                                                      adda.l d0,a0
    4582:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    4586:	|  |  |                                                      moveq #41,d0
    4588:	|  |  |                                                      cmp.l 64(sp),d0
    458c:	|  |  |  ,-------------------------------------------------- bcs.w 5376 <continueFunction+0xe54>
    4590:	|  |  |  |                                                   move.l 64(sp),d0
    4594:	|  |  |  |                                                   add.l d0,d0
    4596:	|  |  |  |                                                   movea.l d0,a0
    4598:	|  |  |  |                                                   adda.l #17828,a0
    459e:	|  |  |  |                                                   move.w (a0),d0
    45a0:	|  |  |  |                                                   jmp (45a4 <continueFunction+0x82>,pc,d0.w)
    45a4:	|  |  |  |                                                   bset d6,(a2)
    45a6:	|  |  |  |                                                   ori.w #2670,(a4)
    45aa:	|  |  |  |                                                   eori.w #2416,d6
    45ae:	|  |  |  |                                                   bchg d4,d2
    45b0:	|  |  |  |                                                   bclr d4,(a4)+
    45b2:	|  |  |  |                                                   andi.l #181013194,d4
    45b8:	|  |  |  |                                                   .short 0x0aca
    45ba:	|  |  |  |                                                   .short 0x0aca
    45bc:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    45c4:	|  |  |  |                                                   .short 0x0aca
    45c6:	|  |  |  |                                                   andi.w #906,-(a4)
    45ca:	|  |  |  |                                                   bchg d1,196(a2)
    45ce:	|  |  |  |                                                   bset d1,580(a4)
    45d2:	|  |  |  |                                                   bclr d1,2576(a2)
    45d6:	|  |  |  |                                                   andi.b #-56,2762(a2)
    45dc:	|  |  |  |                                                   .short 0x0aca
    45de:	|  |  |  |                                                   eori.l #63572682,d0
    45e4:	|  |  |  |                                                   .short 0x0aca
    45e6:	|  |  |  |                                                   bchg d3,-(a2)
    45e8:	|  |  |  |                                                   bchg #-36,(a2)
    45ec:	|  |  |  |                                                   .short 0x08cc
    45ee:	|  |  |  |                                                   addi.b #14,1038(a0)
    45f4:	|  |  |  |                                                   .short 0x040e
    45f6:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    45fa:	|  |  |  |                                                   ori.w #8232,(a0)
    45fe:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    4604:	|  |  |  |                                                   ori.w #12136,(a0)
    4608:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    460e:	|  |  |  |                                                   ori.w #12328,(a0)
    4612:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    4618:	|  |  |  |                                                   add.l 44(sp),d1
    461c:	|  |  |  |                                                   moveq #28,d0
    461e:	|  |  |  |                                                   add.l 80(sp),d0
    4622:	|  |  |  |                                                   move.l d1,-(sp)
    4624:	|  |  |  |                                                   move.l d0,-(sp)
    4626:	|  |  |  |                                                   jsr 149a8 <copyVariable>
    462c:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    462e:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4632:	|  |  |  |                                                   jsr 53d2 <finishFunction>
    4638:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    463a:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    4640:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4644:	|  |  |  |                                                   jsr 653a <restartFunction>
    464a:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    464c:	|  |  |  |  ,----------------------------------------------- bra.w 53aa <continueFunction+0xe88>
				finishFunction (fun);
    4650:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    4654:	|  |  |  |  |                                                jsr 53d2 <finishFunction>
    465a:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    465c:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    4660:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    4664:	|  |  |  |  +----------------------------------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    4668:	|  |  |  |  |                                                movea.l 80(sp),a0
    466c:	|  |  |  |  |                                                move.l 28(a0),d0
    4670:	|  |  |  |  |                                                moveq #2,d1
    4672:	|  |  |  |  |                                                cmp.l d0,d1
    4674:	|  |  |  |  |                                            ,-- beq.s 4680 <continueFunction+0x15e>
    4676:	|  |  |  |  |                                            |   moveq #4,d1
    4678:	|  |  |  |  |                                            |   cmp.l d0,d1
    467a:	|  |  |  |  |                                         ,--|-- beq.s 46ce <continueFunction+0x1ac>
    467c:	|  |  |  |  |                                ,--------|--|-- bra.w 47b6 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    4680:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    4684:	|  |  |  |  |                                |        |      jsr 64f8 <pauseFunction>
    468a:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    468c:	|  |  |  |  |                                |        |      moveq #24,d0
    468e:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    4692:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    4696:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    469a:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    469e:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    46a0:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    46a4:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    46a8:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    46aa:	|  |  |  |  |                                |        |      jsr 6786 <startNewFunctionNum>
    46b0:	|  |  |  |  |                                |        |      lea 20(sp),sp
    46b4:	|  |  |  |  |                                |        |      tst.l d0
    46b6:	|  |  |  |  |                                |        |  ,-- bne.s 46be <continueFunction+0x19c>
    46b8:	|  |  |  |  |                                |        |  |   clr.w d0
    46ba:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 53cc <continueFunction+0xeaa>
				fun = allRunningFunctions;
    46be:	|  |  |  |  |                                |        |  '-> move.l 1a73c <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    46c6:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    46ca:	|  |  |  |  |                                |  ,-----|----- bra.w 47ca <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    46ce:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    46d2:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    46d6:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    46da:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    46de:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    46e0:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    46e2:	|  |  |  |  |                                |  |            jsr 131d0 <callBuiltIn>
    46e8:	|  |  |  |  |                                |  |            lea 12(sp),sp
    46ec:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    46f0:	|  |  |  |  |                                |  |            moveq #5,d0
    46f2:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    46f6:	|  |  |  |  |                                |  |  ,-------- bcs.w 47b2 <continueFunction+0x290>
    46fa:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    46fe:	|  |  |  |  |                                |  |  |         add.l d0,d0
    4700:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    4702:	|  |  |  |  |                                |  |  |         adda.l #18190,a0
    4708:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    470a:	|  |  |  |  |                                |  |  |         jmp (470e <continueFunction+0x1ec>,pc,d0.w)
    470e:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    4714:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    4718:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    471e:	|  |  |  |  |                                |  |  |         .short 0x8448
    4720:	|  |  |  |  |                                |  |  |         jsr 16f3a <KPrintF>
    4726:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    4728:	|  |  |  |  |                                |  |  |         clr.w d0
    472a:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 53cc <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    472e:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    4732:	|  |  |  |  |                                |  |  |         jsr 64f8 <pauseFunction>
    4738:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    473a:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    473e:	|  |  |  |  |                                |  |  |  ,----- bra.s 47b4 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    4740:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    4744:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    4748:	|  |  |  |  |                                |  |  |  +----- bra.s 47b4 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    474a:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    474e:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    4754:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    4756:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    475a:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    475e:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4762:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4764:	|  |  |  |  |                                |  |  |  |      jsr 14de0 <setVariable>
    476a:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    476e:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    4772:	|  |  |  |  |                                |  |  |  |      jsr 64f8 <pauseFunction>
    4778:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    477a:	|  |  |  |  |                                |  |  |  |      move.l 1a774 <noStack>,d1
    4780:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    4784:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4786:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    4788:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    478c:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    478e:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4790:	|  |  |  |  |                                |  |  |  |      jsr 6786 <startNewFunctionNum>
    4796:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    479a:	|  |  |  |  |                                |  |  |  |      tst.l d0
    479c:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 47a4 <continueFunction+0x282>
    479e:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    47a0:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 53cc <continueFunction+0xeaa>
							fun = allRunningFunctions;
    47a4:	|  |  |  |  |                                |  |  |  |  '-> move.l 1a73c <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    47ac:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    47b0:	|  |  |  |  |                                |  |  |  +----- bra.s 47b4 <continueFunction+0x292>

						default:
						break;
    47b2:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    47b4:	|  |  |  |  |                                |  +-----'----X bra.s 47ca <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    47b6:	|  |  |  |  |                                '--|----------> pea 18493 <PutChar+0xab7>
    47bc:	|  |  |  |  |                                   |            jsr 16f3a <KPrintF>
    47c2:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    47c4:	|  |  |  |  |                                   |            clr.w d0
    47c6:	|  +--|--|--|-----------------------------------|----------- bra.w 53cc <continueFunction+0xeaa>
			}
			break;
    47ca:	|  |  |  |  +-----------------------------------'----------X bra.w 53aa <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    47ce:	|  |  |  |  |                                                moveq #28,d0
    47d0:	|  |  |  |  |                                                add.l 80(sp),d0
    47d4:	|  |  |  |  |                                                clr.l -(sp)
    47d6:	|  |  |  |  |                                                clr.l -(sp)
    47d8:	|  |  |  |  |                                                move.l d0,-(sp)
    47da:	|  |  |  |  |                                                jsr 14de0 <setVariable>
    47e0:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    47e4:	|  |  |  |  +----------------------------------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    47e8:	|  |  |  |  |                                                move.l 68(sp),d1
    47ec:	|  |  |  |  |                                                moveq #28,d0
    47ee:	|  |  |  |  |                                                add.l 80(sp),d0
    47f2:	|  |  |  |  |                                                move.l d1,-(sp)
    47f4:	|  |  |  |  |                                                pea 5 <_start+0x5>
    47f8:	|  |  |  |  |                                                move.l d0,-(sp)
    47fa:	|  |  |  |  |                                                jsr 14de0 <setVariable>
    4800:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4804:	|  |  |  |  +----------------------------------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    4808:	|  |  |  |  |                                                move.l 68(sp),d1
    480c:	|  |  |  |  |                                                moveq #28,d0
    480e:	|  |  |  |  |                                                add.l 80(sp),d0
    4812:	|  |  |  |  |                                                move.l d1,-(sp)
    4814:	|  |  |  |  |                                                pea 1 <_start+0x1>
    4818:	|  |  |  |  |                                                move.l d0,-(sp)
    481a:	|  |  |  |  |                                                jsr 14de0 <setVariable>
    4820:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4824:	|  |  |  |  +----------------------------------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4828:	|  |  |  |  |                                                moveq #28,d0
    482a:	|  |  |  |  |                                                add.l 80(sp),d0
    482e:	|  |  |  |  |                                                movea.l 80(sp),a0
    4832:	|  |  |  |  |                                                movea.l 20(a0),a0
    4836:	|  |  |  |  |                                                move.l 68(sp),d1
    483a:	|  |  |  |  |                                                lsl.l #3,d1
    483c:	|  |  |  |  |                                                add.l a0,d1
    483e:	|  |  |  |  |                                                move.l d0,-(sp)
    4840:	|  |  |  |  |                                                move.l d1,-(sp)
    4842:	|  |  |  |  |                                                jsr 149a8 <copyVariable>
    4848:	|  |  |  |  |                                                addq.l #8,sp
    484a:	|  |  |  |  |                                                tst.w d0
    484c:	|  |  |  |  |  ,-------------------------------------------- bne.w 5388 <continueFunction+0xe66>
    4850:	|  |  |  |  |  |                                             clr.w d0
    4852:	|  +--|--|--|--|-------------------------------------------- bra.w 53cc <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4856:	|  |  |  |  |  |                                             moveq #28,d0
    4858:	|  |  |  |  |  |                                             add.l 80(sp),d0
    485c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    485e:	|  |  |  |  |  |                                             jsr 14a2e <getBoolean>
    4864:	|  |  |  |  |  |                                             addq.l #4,sp
    4866:	|  |  |  |  |  |                                             tst.w d0
    4868:	|  |  |  |  |  |                                      ,----- beq.s 4884 <continueFunction+0x362>
    486a:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    486e:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    4872:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    4874:	|  |  |  |  |  |                                      |      jsr 14a2e <getBoolean>
    487a:	|  |  |  |  |  |                                      |      addq.l #4,sp
    487c:	|  |  |  |  |  |                                      |      tst.w d0
    487e:	|  |  |  |  |  |                                      +----- beq.s 4884 <continueFunction+0x362>
    4880:	|  |  |  |  |  |                                      |      moveq #1,d0
    4882:	|  |  |  |  |  |                                      |  ,-- bra.s 4886 <continueFunction+0x364>
    4884:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    4886:	|  |  |  |  |  |                                         '-> moveq #28,d1
    4888:	|  |  |  |  |  |                                             add.l 80(sp),d1
    488c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    488e:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4892:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4894:	|  |  |  |  |  |                                             jsr 14de0 <setVariable>
    489a:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    489e:	|  |  |  |  |  |                                             moveq #24,d0
    48a0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    48a4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    48a6:	|  |  |  |  |  |                                             jsr 14e72 <trimStack>
    48ac:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    48ae:	|  |  |  |  +--|-------------------------------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    48b2:	|  |  |  |  |  |                                             moveq #28,d0
    48b4:	|  |  |  |  |  |                                             add.l 80(sp),d0
    48b8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    48ba:	|  |  |  |  |  |                                             jsr 14a2e <getBoolean>
    48c0:	|  |  |  |  |  |                                             addq.l #4,sp
    48c2:	|  |  |  |  |  |                                             tst.w d0
    48c4:	|  |  |  |  |  |                                         ,-- bne.s 48dc <continueFunction+0x3ba>
    48c6:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    48ca:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    48ce:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    48d0:	|  |  |  |  |  |                                         |   jsr 14a2e <getBoolean>
    48d6:	|  |  |  |  |  |                                         |   addq.l #4,sp
    48d8:	|  |  |  |  |  |                                         |   tst.w d0
    48da:	|  |  |  |  |  |                                      ,--|-- beq.s 48e0 <continueFunction+0x3be>
    48dc:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    48de:	|  |  |  |  |  |                                      |  ,-- bra.s 48e2 <continueFunction+0x3c0>
    48e0:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    48e2:	|  |  |  |  |  |                                         '-> moveq #28,d1
    48e4:	|  |  |  |  |  |                                             add.l 80(sp),d1
    48e8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    48ea:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    48ee:	|  |  |  |  |  |                                             move.l d1,-(sp)
    48f0:	|  |  |  |  |  |                                             jsr 14de0 <setVariable>
    48f6:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    48fa:	|  |  |  |  |  |                                             moveq #24,d0
    48fc:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4900:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4902:	|  |  |  |  |  |                                             jsr 14e72 <trimStack>
    4908:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    490a:	|  |  |  |  +--|-------------------------------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    490e:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4912:	|  |  |  |  |  |                                             moveq #28,d0
    4914:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4918:	|  |  |  |  |  |                                             move.l d1,-(sp)
    491a:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    491e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4920:	|  |  |  |  |  |                                             jsr 14de0 <setVariable>
    4926:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    492a:	|  |  |  |  +--|-------------------------------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    492e:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4932:	|  |  |  |  |  |                                             moveq #28,d0
    4934:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4938:	|  |  |  |  |  |                                             move.l d1,-(sp)
    493a:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    493e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4940:	|  |  |  |  |  |                                             jsr 14de0 <setVariable>
    4946:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    494a:	|  |  |  |  +--|-------------------------------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    494e:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4952:	|  |  |  |  |  |                                             moveq #28,d0
    4954:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4958:	|  |  |  |  |  |                                             move.l d1,-(sp)
    495a:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    495e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4960:	|  |  |  |  |  |                                             jsr 14de0 <setVariable>
    4966:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    496a:	|  |  |  |  +--|-------------------------------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    496e:	|  |  |  |  |  |                                             move.l 1a704 <dialogValue>,d0
    4974:	|  |  |  |  |  |                                             moveq #1,d1
    4976:	|  |  |  |  |  |                                             cmp.l d0,d1
    4978:	|  |  |  |  |  |  ,----------------------------------------- beq.w 538c <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    497c:	|  |  |  |  |  |  |                                          pea 184a8 <PutChar+0xacc>
    4982:	|  |  |  |  |  |  |                                          jsr 16f3a <KPrintF>
    4988:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    498a:	|  |  |  |  |  |  |                                          clr.w d0
    498c:	|  +--|--|--|--|--|----------------------------------------- bra.w 53cc <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    4990:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    4994:	|  |  |  |  |  |  |                                          moveq #28,d0
    4996:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    499a:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    499c:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    499e:	|  |  |  |  |  |  |                                          jsr 14572 <loadStringToVar>
    49a4:	|  |  |  |  |  |  |                                          addq.l #8,sp
    49a6:	|  |  |  |  |  |  |                                          tst.w d0
    49a8:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 5390 <continueFunction+0xe6e>
					return FALSE;
    49ac:	|  |  |  |  |  |  |  |                                       clr.w d0
    49ae:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 53cc <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    49b2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    49b6:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    49ba:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    49bc:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    49be:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    49c0:	|  |  |  |  |  |  |  |                                ,----- beq.s 4a1e <continueFunction+0x4fc>
    49c2:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    49c4:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    49c6:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 4bb2 <continueFunction+0x690>
    49ca:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    49cc:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 49d8 <continueFunction+0x4b6>
    49ce:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    49d0:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    49d2:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4a1e <continueFunction+0x4fc>
    49d4:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 4bb2 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    49d8:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    49da:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    49de:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 4a0a <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    49e0:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    49e2:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    49e6:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    49e8:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    49ea:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    49ec:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14de0 <setVariable>
    49f2:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    49f6:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    49f8:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    49fc:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    49fe:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14e72 <trimStack>
    4a04:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    4a06:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 4bc8 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    4a0a:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 184e9 <PutChar+0xb0d>
    4a10:	|  |  |  |  |  |  |  |              |  |              |      jsr 16f3a <KPrintF>
    4a16:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4a18:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4a1a:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 53cc <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4a1e:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    4a22:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4a26:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4a2a:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4a2c:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 4a42 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4a2e:	|  |  |  |  |  |  |  |              |  |                 |   pea 18525 <PutChar+0xb49>
    4a34:	|  |  |  |  |  |  |  |              |  |                 |   jsr 16f3a <KPrintF>
    4a3a:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4a3c:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4a3e:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 53cc <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4a42:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    4a44:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4a48:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4a4a:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4a4e:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    4a52:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    4a54:	|  |  |  |  |  |  |  |              |  |                     jsr 144ee <getValueType>
    4a5a:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4a5e:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    4a60:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 4a68 <continueFunction+0x546>
    4a62:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4a64:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 53cc <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4a68:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    4a6c:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4a70:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    4a72:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    4a74:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    4a76:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 4a98 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    4a78:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    4a7c:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    4a7e:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    4a82:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    4a86:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    4a8a:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    4a8c:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4a8e:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14178 <fastArrayGetByIndex>
    4a94:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    4a96:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 4ab8 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    4a98:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    4a9c:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    4a9e:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    4aa2:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    4aa6:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    4aaa:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    4aac:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    4aae:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    4ab0:	|  |  |  |  |  |  |  |              |  |              |      jsr 14e02 <stackGetByIndex>
    4ab6:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4ab8:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    4abc:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    4abe:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4ac2:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4ac4:	|  |  |  |  |  |  |  |              |  |                     jsr 14e72 <trimStack>
    4aca:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    4acc:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    4ad0:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 4aec <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    4ad2:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    4ad4:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4ad8:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4ada:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4adc:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4ade:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14de0 <setVariable>
    4ae4:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4ae8:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 4bc6 <continueFunction+0x6a4>
						switch (com) {
    4aec:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    4aee:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    4af2:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 4b00 <continueFunction+0x5de>
    4af4:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4af6:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4afa:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 4b4a <continueFunction+0x628>
    4afc:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 4b92 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4b00:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    4b04:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4b08:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4b0c:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4b0e:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 144ee <getValueType>
    4b14:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4b18:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4b1a:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 4b22 <continueFunction+0x600>
    4b1c:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4b1e:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 4bac <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4b22:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    4b24:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4b26:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4b2a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4b2c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    4b30:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    4b32:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 14de0 <setVariable>
    4b38:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4b3c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4b3e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    4b40:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    4b44:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4b48:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 4bb0 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4b4a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    4b4e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4b52:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4b56:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4b58:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 144ee <getValueType>
    4b5e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    4b62:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    4b64:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 4b6a <continueFunction+0x648>
    4b66:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4b68:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 4bac <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4b6a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    4b6c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4b6e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    4b72:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    4b74:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4b78:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    4b7a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14de0 <setVariable>
    4b80:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    4b84:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    4b86:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    4b88:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    4b8c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    4b90:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 4bb0 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    4b92:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    4b94:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    4b98:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    4b9a:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    4b9e:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 149a8 <copyVariable>
    4ba4:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    4ba6:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    4ba8:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 4bc6 <continueFunction+0x6a4>
    4baa:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4bac:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 53cc <continueFunction+0xeaa>
				break;
    4bb0:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 4bc6 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    4bb2:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 18543 <PutChar+0xb67>
    4bb8:	|  |  |  |  |  |  |  |                 |  |                  jsr 16f3a <KPrintF>
    4bbe:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    4bc0:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    4bc2:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 53cc <continueFunction+0xeaa>
				break;
    4bc6:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    4bc8:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 53aa <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    4bcc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4bd0:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4bd4:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4bd6:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    4bd8:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4bda:	|  |  |  |  |  |  |  |                                   ,-- beq.s 4be8 <continueFunction+0x6c6>
    4bdc:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    4bde:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    4be0:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 4c94 <continueFunction+0x772>
    4be4:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 4cf2 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4be8:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    4bec:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4bf0:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4bf4:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4bf6:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 4c0c <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    4bf8:	|  |  |  |  |  |  |  |                             |  |  |   pea 18525 <PutChar+0xb49>
    4bfe:	|  |  |  |  |  |  |  |                             |  |  |   jsr 16f3a <KPrintF>
    4c04:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    4c06:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4c08:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 53cc <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4c0c:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    4c0e:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4c12:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4c14:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    4c18:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    4c1c:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    4c1e:	|  |  |  |  |  |  |  |                             |  |      jsr 144ee <getValueType>
    4c24:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4c28:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4c2a:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 4c32 <continueFunction+0x710>
    4c2c:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4c2e:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 53cc <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    4c32:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    4c36:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4c3a:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    4c3e:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    4c40:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    4c44:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    4c46:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    4c4a:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4c4e:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4c52:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4c54:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    4c56:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    4c58:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4c5a:	|  |  |  |  |  |  |  |                             |  |      jsr 6742 <stackSetByIndex>
    4c60:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4c64:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4c66:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 4c6e <continueFunction+0x74c>
						return FALSE;
    4c68:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4c6a:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 53cc <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    4c6e:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    4c70:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4c74:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4c76:	|  |  |  |  |  |  |  |                             |  |      jsr 14e72 <trimStack>
    4c7c:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    4c7e:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    4c80:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4c84:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4c86:	|  |  |  |  |  |  |  |                             |  |      jsr 14e72 <trimStack>
    4c8c:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    4c8e:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    4c90:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 53aa <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    4c94:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    4c96:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    4c9a:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    4c9c:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    4ca0:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    4ca4:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    4ca6:	|  |  |  |  |  |  |  |                             |         jsr 144ee <getValueType>
    4cac:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    4cb0:	|  |  |  |  |  |  |  |                             |         tst.w d0
    4cb2:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 4cba <continueFunction+0x798>
    4cb4:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    4cb6:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 53cc <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    4cba:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    4cbe:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    4cc0:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    4cc4:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    4cc8:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    4ccc:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    4cce:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    4cd0:	|  |  |  |  |  |  |  |                             |         jsr 14178 <fastArrayGetByIndex>
    4cd6:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    4cd8:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    4cdc:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 4cec <continueFunction+0x7ca>
    4cde:	|  |  |  |  |  |  |  |                             |     |   pea 18567 <PutChar+0xb8b>
    4ce4:	|  |  |  |  |  |  |  |                             |     |   jsr 16f3a <KPrintF>
    4cea:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    4cec:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    4cee:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 53cc <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    4cf2:	|  |  |  |  |  |  |  |                             '-------> pea 18543 <PutChar+0xb67>
    4cf8:	|  |  |  |  |  |  |  |                                       jsr 16f3a <KPrintF>
    4cfe:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    4d00:	|  |  |  |  |  |  |  |                                       clr.w d0
    4d02:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 53cc <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4d06:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4d0a:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4d0e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4d12:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4d14:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4d16:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4d18:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4d1c:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    4d20:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4d22:	|  |  |  |  |  |  |  |                                       jsr 144ee <getValueType>
    4d28:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4d2c:	|  |  |  |  |  |  |  |                                       tst.w d0
    4d2e:	|  |  |  |  |  |  |  |                                   ,-- bne.s 4d36 <continueFunction+0x814>
    4d30:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4d32:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 53cc <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4d36:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    4d3a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4d3c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4d40:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4d42:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4d46:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4d48:	|  |  |  |  |  |  |  |                                       jsr 14de0 <setVariable>
    4d4e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    4d52:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    4d56:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4d58:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    4d5a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4d5e:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    4d62:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4d66:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4d68:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4d6a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4d6c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4d70:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4d72:	|  |  |  |  |  |  |  |                                       jsr 14de0 <setVariable>
    4d78:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4d7c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    4d80:	|  |  |  |  |  |  |  |                                       move.l 1a752 <globalVars>,d1
    4d86:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4d8a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4d8c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4d8e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4d90:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4d94:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    4d98:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4d9a:	|  |  |  |  |  |  |  |                                       jsr 144ee <getValueType>
    4da0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4da4:	|  |  |  |  |  |  |  |                                       tst.w d0
    4da6:	|  |  |  |  |  |  |  |                                   ,-- bne.s 4dae <continueFunction+0x88c>
    4da8:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4daa:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 53cc <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4dae:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    4db2:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4db4:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4db8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4dba:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4dbe:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4dc0:	|  |  |  |  |  |  |  |                                       jsr 14de0 <setVariable>
    4dc6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    4dca:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    4dce:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4dd0:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    4dd2:	|  |  |  |  |  |  |  |                                       movea.l 1a752 <globalVars>,a0
    4dd8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4ddc:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4dde:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4de0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4de2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4de6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4de8:	|  |  |  |  |  |  |  |                                       jsr 14de0 <setVariable>
    4dee:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4df2:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4df6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4dfa:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4dfe:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4e02:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4e04:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4e06:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4e08:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4e0c:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    4e10:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4e12:	|  |  |  |  |  |  |  |                                       jsr 144ee <getValueType>
    4e18:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4e1c:	|  |  |  |  |  |  |  |                                       tst.w d0
    4e1e:	|  |  |  |  |  |  |  |                                   ,-- bne.s 4e26 <continueFunction+0x904>
    4e20:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4e22:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 53cc <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4e26:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    4e2a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4e2c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4e30:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4e32:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4e36:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4e38:	|  |  |  |  |  |  |  |                                       jsr 14de0 <setVariable>
    4e3e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    4e42:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    4e46:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4e48:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4e4a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4e4e:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    4e52:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4e56:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4e58:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4e5a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4e5c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4e60:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4e62:	|  |  |  |  |  |  |  |                                       jsr 14de0 <setVariable>
    4e68:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4e6c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    4e70:	|  |  |  |  |  |  |  |                                       move.l 1a752 <globalVars>,d1
    4e76:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4e7a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4e7c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4e7e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4e80:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4e84:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    4e88:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4e8a:	|  |  |  |  |  |  |  |                                       jsr 144ee <getValueType>
    4e90:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4e94:	|  |  |  |  |  |  |  |                                       tst.w d0
    4e96:	|  |  |  |  |  |  |  |                                   ,-- bne.s 4e9e <continueFunction+0x97c>
    4e98:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4e9a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 53cc <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4e9e:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    4ea2:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4ea4:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4ea8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4eaa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4eae:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4eb0:	|  |  |  |  |  |  |  |                                       jsr 14de0 <setVariable>
    4eb6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    4eba:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    4ebe:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4ec0:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4ec2:	|  |  |  |  |  |  |  |                                       movea.l 1a752 <globalVars>,a0
    4ec8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4ecc:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4ece:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4ed0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4ed2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4ed6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4ed8:	|  |  |  |  |  |  |  |                                       jsr 14de0 <setVariable>
    4ede:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4ee2:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    4ee6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4eea:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4eee:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4ef2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4ef4:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    4ef6:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4ef8:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4efc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4efe:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4f00:	|  |  |  |  |  |  |  |                                       jsr 149a8 <copyVariable>
    4f06:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    4f08:	|  |  |  |  |  |  |  |                                       tst.w d0
    4f0a:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 5394 <continueFunction+0xe72>
    4f0e:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    4f10:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 53cc <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    4f14:	|  |  |  |  |  |  |  |  |                                    move.l 1a752 <globalVars>,d1
    4f1a:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    4f1e:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    4f20:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    4f22:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    4f24:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    4f28:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    4f2a:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    4f2c:	|  |  |  |  |  |  |  |  |                                    jsr 149a8 <copyVariable>
    4f32:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    4f34:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    4f36:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 5398 <continueFunction+0xe76>
    4f3a:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    4f3c:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 53cc <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    4f40:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    4f42:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    4f46:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1a752 <globalVars>,a0
    4f4c:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    4f50:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    4f52:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    4f54:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    4f56:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    4f58:	|  |  |  |  |  |  |  |  |  |                                 jsr 149a8 <copyVariable>
    4f5e:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    4f60:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    4f62:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 539c <continueFunction+0xe7a>
    4f66:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    4f68:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 53cc <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    4f6c:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    4f6e:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    4f72:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    4f74:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    4f78:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    4f7a:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    4f7c:	|  |  |  |  |  |  |  |  |  |  |                              jsr 13d2a <addVarToStack>
    4f82:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    4f84:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    4f86:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 53a0 <continueFunction+0xe7e>
    4f8a:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    4f8c:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 53cc <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    4f90:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    4f92:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    4f96:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    4f98:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    4f9c:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    4f9e:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    4fa0:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 13db0 <addVarToStackQuick>
    4fa6:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    4fa8:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    4faa:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 53a4 <continueFunction+0xe82>
    4fae:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    4fb0:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 53cc <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    4fb4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4fb6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4fba:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4fbc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14a2e <getBoolean>
    4fc2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4fc4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    4fc8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    4fca:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    4fcc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    4fce:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4fd0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4fd4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    4fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    4fda:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4fdc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14de0 <setVariable>
    4fe2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    4fe6:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    4fea:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4fec:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4ff2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14a2e <getBoolean>
    4ff8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4ffa:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 53a8 <continueFunction+0xe86>
				advanceNow = FALSE;
    5000:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5004:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5008:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    500e:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 53a8 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5012:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5016:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    501a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5020:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 53aa <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5024:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5026:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    502a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    502c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    5036:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 144ee <getValueType>
    503c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5040:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    5042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 504a <continueFunction+0xb28>
    5044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5046:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 53cc <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    504a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    504e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    5052:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5054:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    505a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    505e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5060:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14de0 <setVariable>
    5066:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    506a:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 53aa <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    506e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5072:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    5076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 5360 <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    507a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    507c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 50fc <continueFunction+0xbda>
    5082:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    5088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 5146 <continueFunction+0xc24>
    508c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    508e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 50a0 <continueFunction+0xb7e>
    5094:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5096:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    509a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 50ce <continueFunction+0xbac>
    509c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 5146 <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    50a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    50a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    50a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    50aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    50ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    50b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    50b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 13e24 <addVariablesInSecond>
    50b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    50ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    50bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    50c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    50c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14e72 <trimStack>
    50c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    50ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 5374 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    50ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    50d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    50d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    50d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    50dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    50de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    50e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 13ee2 <compareVariablesInSecond>
    50e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    50e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    50ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    50ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    50f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14e72 <trimStack>
    50f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    50f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 5374 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    50fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    50fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5102:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5106:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    510a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    510c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    510e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 13ee2 <compareVariablesInSecond>
    5114:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5116:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    5118:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    511c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    511e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14e72 <trimStack>
    5124:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    5126:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    512a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    512e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    5130:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    5132:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    5134:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    513a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    513e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    5142:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 5374 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    5146:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    514a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    514e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5150:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5154:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    5158:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    515a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 144ee <getValueType>
    5160:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5164:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5166:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 516e <continueFunction+0xc4c>
    5168:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    516a:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 53cc <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    516e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    5170:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5174:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5176:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    517a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    517e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5180:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 144ee <getValueType>
    5186:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    518a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    518c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5194 <continueFunction+0xc72>
    518e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5190:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 53cc <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5194:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    5196:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    519a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    519c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14e72 <trimStack>
    51a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    51a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    51a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    51aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    51ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    51ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 5372 <continueFunction+0xe50>
    51b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    51b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    51b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #20930,a0
    51bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    51be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (51c2 <continueFunction+0xca0>,pc,d0.w)
    51c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    51c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    51c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    51d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    51d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    51da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    51e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    51ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    51f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    51f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    51fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    51fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    51fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 178c6 <__mulsi3>
    5204:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5206:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5208:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    520a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    520e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5210:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5214:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5216:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14de0 <setVariable>
    521c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5220:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5374 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    5224:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    522c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    522e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5230:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5234:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5236:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    523a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    523c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14de0 <setVariable>
    5242:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5246:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5374 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    524a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    524e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5252:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5254:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17972 <__modsi3>
    525c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    525e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5260:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5262:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5266:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5268:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    526c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    526e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14de0 <setVariable>
    5274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5278:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5374 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    527c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5280:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5284:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5288:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17944 <__divsi3>
    528e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5294:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    529a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    529e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    52a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14de0 <setVariable>
    52a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    52aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5374 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    52ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    52b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    52b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    52b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    52ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    52bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    52be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    52c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    52c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    52c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    52c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    52cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    52ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14de0 <setVariable>
    52d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    52d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5374 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    52dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    52e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    52e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    52e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    52e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    52ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    52ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    52ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    52f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    52f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    52f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    52fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    52fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14de0 <setVariable>
    5302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5306:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5374 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    5308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    530c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5310:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    531a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    531c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5322:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5326:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14de0 <setVariable>
    532e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5374 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    5334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    533c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    533e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    5340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5348:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    534c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    534e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5354:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14de0 <setVariable>
    535a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    535e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5374 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    5360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 18588 <PutChar+0xbac>
    5366:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 16f3a <KPrintF>
    536c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    536e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    5370:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 53cc <continueFunction+0xeaa>
						break;
    5372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    5374:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 53aa <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    5376:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 185a0 <PutChar+0xbc4>
    537c:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 16f3a <KPrintF>
    5382:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    5384:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    5386:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 53cc <continueFunction+0xeaa>
			break;
    5388:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    538a:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 53aa <continueFunction+0xe88>
			break;
    538c:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    538e:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 53aa <continueFunction+0xe88>
			break;
    5390:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    5392:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 53aa <continueFunction+0xe88>
			break;
    5394:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    5396:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 53aa <continueFunction+0xe88>
			break;
    5398:	|  |  |     |              '--|--|--|--|-------------------> nop
    539a:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 53aa <continueFunction+0xe88>
			break;
    539c:	|  |  |     |                 '--|--|--|-------------------> nop
    539e:	|  |  |     +--------------------|--|--|-------------------- bra.s 53aa <continueFunction+0xe88>
			break;
    53a0:	|  |  |     |                    '--|--|-------------------> nop
    53a2:	|  |  |     +-----------------------|--|-------------------- bra.s 53aa <continueFunction+0xe88>
			break;
    53a4:	|  |  |     |                       '--|-------------------> nop
    53a6:	|  |  |     +--------------------------|-------------------- bra.s 53aa <continueFunction+0xe88>
			break;
    53a8:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    53aa:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    53ae:	+--|--|----------------------------------------------------- beq.s 53c2 <continueFunction+0xea0>
    53b0:	|  |  |                                                      movea.l 80(sp),a0
    53b4:	|  |  |                                                      move.l 36(a0),d0
    53b8:	|  |  |                                                      addq.l #1,d0
    53ba:	|  |  |                                                      movea.l 80(sp),a0
    53be:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    53c2:	'--|--|----------------------------------------------------> tst.w 74(sp)
    53c6:	   |  '----------------------------------------------------- bne.w 454a <continueFunction+0x28>

	}
	return TRUE;
    53ca:	   |                                                         moveq #1,d0
}
    53cc:	   '-------------------------------------------------------> lea 76(sp),sp
    53d0:	                                                             rts

000053d2 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    53d2:	          lea -16(sp),sp
    53d6:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    53d8:	          move.l 24(sp),-(sp)
    53dc:	          jsr 64f8 <pauseFunction>
    53e2:	          addq.l #4,sp
	if (fun -> stack) 
    53e4:	          movea.l 24(sp),a0
    53e8:	          move.l 24(a0),d0
    53ec:	      ,-- beq.s 5400 <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    53ee:	      |   pea 185cc <PutChar+0xbf0>
    53f4:	      |   jsr 16f3a <KPrintF>
    53fa:	      |   addq.l #4,sp
		return;
    53fc:	,-----|-- bra.w 549a <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    5400:	|     '-> movea.l 24(sp),a0
    5404:	|         move.l 4(a0),12(sp)
    540a:	|         move.l 1a7a4 <SysBase>,d0
    5410:	|         movea.l d0,a6
    5412:	|         movea.l 12(sp),a1
    5416:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    541a:	|         clr.l 16(sp)
    541e:	|     ,-- bra.s 543e <finishFunction+0x6c>
    5420:	|  ,--|-> movea.l 24(sp),a0
    5424:	|  |  |   move.l 20(a0),d1
    5428:	|  |  |   move.l 16(sp),d0
    542c:	|  |  |   lsl.l #3,d0
    542e:	|  |  |   add.l d1,d0
    5430:	|  |  |   move.l d0,-(sp)
    5432:	|  |  |   jsr 1473c <unlinkVar>
    5438:	|  |  |   addq.l #4,sp
    543a:	|  |  |   addq.l #1,16(sp)
    543e:	|  |  '-> movea.l 24(sp),a0
    5442:	|  |      move.l 8(a0),d0
    5446:	|  |      cmp.l 16(sp),d0
    544a:	|  '----- bgt.s 5420 <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    544c:	|         movea.l 24(sp),a0
    5450:	|         move.l 8(a0),d0
    5454:	|     ,-- ble.s 5470 <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    5456:	|     |   movea.l 24(sp),a0
    545a:	|     |   move.l 20(a0),8(sp)
    5460:	|     |   move.l 1a7a4 <SysBase>,d0
    5466:	|     |   movea.l d0,a6
    5468:	|     |   movea.l 8(sp),a1
    546c:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    5470:	|     '-> moveq #28,d0
    5472:	|         add.l 24(sp),d0
    5476:	|         move.l d0,-(sp)
    5478:	|         jsr 1473c <unlinkVar>
    547e:	|         addq.l #4,sp
	FreeVec(fun);
    5480:	|         move.l 24(sp),4(sp)
    5486:	|         move.l 1a7a4 <SysBase>,d0
    548c:	|         movea.l d0,a6
    548e:	|         movea.l 4(sp),a1
    5492:	|         jsr -690(a6)
	fun = NULL;
    5496:	|         clr.l 24(sp)
}
    549a:	'-------> movea.l (sp)+,a6
    549c:	          lea 16(sp),sp
    54a0:	          rts

000054a2 <freezeSubs>:

void freezeSubs () {
    54a2:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    54a4:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    54aa:	   ,----- bra.s 54c8 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    54ac:	,--|----> movea.l (sp),a0
    54ae:	|  |      move.w 52(a0),d0
    54b2:	|  |  ,-- bne.s 54c2 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    54b4:	|  |  |   movea.l (sp),a0
    54b6:	|  |  |   move.b 56(a0),d0
    54ba:	|  |  |   addq.b #1,d0
    54bc:	|  |  |   movea.l (sp),a0
    54be:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    54c2:	|  |  '-> movea.l (sp),a0
    54c4:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    54c8:	|  '----> tst.l (sp)
    54ca:	'-------- bne.s 54ac <freezeSubs+0xa>
	}
}
    54cc:	          nop
    54ce:	          nop
    54d0:	          addq.l #4,sp
    54d2:	          rts

000054d4 <handleInput>:

BOOL handleInput () {
    54d4:	             lea -16(sp),sp
    54d8:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    54da:	             move.l 1a8b8 <overRegion>,d0
    54e0:	         ,-- bne.s 54e8 <handleInput+0x14>
    54e2:	         |   jsr 156b2 <getOverRegion>

	if (input.justMoved) {
    54e8:	         '-> move.w 1a75a <input+0x4>,d0
    54ee:	         ,-- beq.s 552c <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    54f0:	         |   movea.l 1a11c <currentEvents>,a0
    54f6:	         |   move.l 16(a0),d0
    54fa:	         +-- beq.s 552c <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    54fc:	         |   move.l 1a774 <noStack>,d1
    5502:	         |   movea.l 1a11c <currentEvents>,a0
    5508:	         |   move.l 16(a0),d0
    550c:	         |   pea 1 <_start+0x1>
    5510:	         |   move.l d1,-(sp)
    5512:	         |   clr.l -(sp)
    5514:	         |   clr.l -(sp)
    5516:	         |   move.l d0,-(sp)
    5518:	         |   jsr 6786 <startNewFunctionNum>
    551e:	         |   lea 20(sp),sp
    5522:	         |   tst.l d0
    5524:	         +-- bne.s 552c <handleInput+0x58>
    5526:	         |   clr.w d0
    5528:	,--------|-- bra.w 5732 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    552c:	|        '-> clr.w 1a75a <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    5532:	|            move.l 1a76c <lastRegion>,d1
    5538:	|            move.l 1a8b8 <overRegion>,d0
    553e:	|            cmp.l d1,d0
    5540:	|  ,-------- beq.w 5618 <handleInput+0x144>
    5544:	|  |         movea.l 1a11c <currentEvents>,a0
    554a:	|  |         move.l 20(a0),d0
    554e:	|  +-------- beq.w 5618 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    5552:	|  |         moveq #12,d0
    5554:	|  |         move.l d0,16(sp)
    5558:	|  |         clr.l 12(sp)
    555c:	|  |         move.l 1a7a4 <SysBase>,d0
    5562:	|  |         movea.l d0,a6
    5564:	|  |         move.l 16(sp),d0
    5568:	|  |         move.l 12(sp),d1
    556c:	|  |         jsr -684(a6)
    5570:	|  |         move.l d0,8(sp)
    5574:	|  |         move.l 8(sp),d0
    5578:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    557c:	|  |         move.l 4(sp),d0
    5580:	|  |     ,-- bne.s 5596 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    5582:	|  |     |   pea 185f2 <PutChar+0xc16>
    5588:	|  |     |   jsr 16f3a <KPrintF>
    558e:	|  |     |   addq.l #4,sp
			return FALSE;
    5590:	|  |     |   clr.w d0
    5592:	+--|-----|-- bra.w 5732 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    5596:	|  |     '-> movea.l 4(sp),a0
    559a:	|  |         clr.l (a0)
		if (overRegion) {
    559c:	|  |         move.l 1a8b8 <overRegion>,d0
    55a2:	|  |  ,----- beq.s 55ca <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    55a4:	|  |  |      movea.l 1a8b8 <overRegion>,a0
    55aa:	|  |  |      movea.l 28(a0),a0
    55ae:	|  |  |      move.l 4(a0),d1
    55b2:	|  |  |      move.l 4(sp),d0
    55b6:	|  |  |      move.l d1,-(sp)
    55b8:	|  |  |      pea 7 <_start+0x7>
    55bc:	|  |  |      move.l d0,-(sp)
    55be:	|  |  |      jsr 14de0 <setVariable>
    55c4:	|  |  |      lea 12(sp),sp
    55c8:	|  |  |  ,-- bra.s 55e0 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    55ca:	|  |  '--|-> move.l 4(sp),d0
    55ce:	|  |     |   clr.l -(sp)
    55d0:	|  |     |   pea 1 <_start+0x1>
    55d4:	|  |     |   move.l d0,-(sp)
    55d6:	|  |     |   jsr 14de0 <setVariable>
    55dc:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    55e0:	|  |     '-> movea.l 4(sp),a0
    55e4:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    55e8:	|  |         movea.l 1a11c <currentEvents>,a0
    55ee:	|  |         move.l 20(a0),d0
    55f2:	|  |         pea 1 <_start+0x1>
    55f6:	|  |         lea 8(sp),a0
    55fa:	|  |         move.l a0,-(sp)
    55fc:	|  |         clr.l -(sp)
    55fe:	|  |         pea 1 <_start+0x1>
    5602:	|  |         move.l d0,-(sp)
    5604:	|  |         jsr 6786 <startNewFunctionNum>
    560a:	|  |         lea 20(sp),sp
    560e:	|  |         tst.l d0
    5610:	|  +-------- bne.s 5618 <handleInput+0x144>
    5612:	|  |         clr.w d0
    5614:	+--|-------- bra.w 5732 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    5618:	|  '-------> move.w 1a75c <input+0x6>,d0
    561e:	|        ,-- beq.s 565c <handleInput+0x188>
    5620:	|        |   movea.l 1a11c <currentEvents>,a0
    5626:	|        |   move.l 4(a0),d0
    562a:	|        +-- beq.s 565c <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    562c:	|        |   move.l 1a774 <noStack>,d1
    5632:	|        |   movea.l 1a11c <currentEvents>,a0
    5638:	|        |   move.l 4(a0),d0
    563c:	|        |   pea 1 <_start+0x1>
    5640:	|        |   move.l d1,-(sp)
    5642:	|        |   clr.l -(sp)
    5644:	|        |   clr.l -(sp)
    5646:	|        |   move.l d0,-(sp)
    5648:	|        |   jsr 6786 <startNewFunctionNum>
    564e:	|        |   lea 20(sp),sp
    5652:	|        |   tst.l d0
    5654:	|        +-- bne.s 565c <handleInput+0x188>
    5656:	|        |   clr.w d0
    5658:	+--------|-- bra.w 5732 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    565c:	|        '-> move.w 1a75e <input+0x8>,d0
    5662:	|        ,-- beq.s 56a0 <handleInput+0x1cc>
    5664:	|        |   movea.l 1a11c <currentEvents>,a0
    566a:	|        |   move.l 12(a0),d0
    566e:	|        +-- beq.s 56a0 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5670:	|        |   move.l 1a774 <noStack>,d1
    5676:	|        |   movea.l 1a11c <currentEvents>,a0
    567c:	|        |   move.l 12(a0),d0
    5680:	|        |   pea 1 <_start+0x1>
    5684:	|        |   move.l d1,-(sp)
    5686:	|        |   clr.l -(sp)
    5688:	|        |   clr.l -(sp)
    568a:	|        |   move.l d0,-(sp)
    568c:	|        |   jsr 6786 <startNewFunctionNum>
    5692:	|        |   lea 20(sp),sp
    5696:	|        |   tst.l d0
    5698:	|        +-- bne.s 56a0 <handleInput+0x1cc>
    569a:	|        |   clr.w d0
    569c:	+--------|-- bra.w 5732 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    56a0:	|        '-> move.w 1a756 <input>,d0
    56a6:	|        ,-- beq.s 56de <handleInput+0x20a>
    56a8:	|        |   movea.l 1a11c <currentEvents>,a0
    56ae:	|        |   move.l (a0),d0
    56b0:	|        +-- beq.s 56de <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    56b2:	|        |   move.l 1a774 <noStack>,d1
    56b8:	|        |   movea.l 1a11c <currentEvents>,a0
    56be:	|        |   move.l (a0),d0
    56c0:	|        |   pea 1 <_start+0x1>
    56c4:	|        |   move.l d1,-(sp)
    56c6:	|        |   clr.l -(sp)
    56c8:	|        |   clr.l -(sp)
    56ca:	|        |   move.l d0,-(sp)
    56cc:	|        |   jsr 6786 <startNewFunctionNum>
    56d2:	|        |   lea 20(sp),sp
    56d6:	|        |   tst.l d0
    56d8:	|        +-- bne.s 56de <handleInput+0x20a>
    56da:	|        |   clr.w d0
    56dc:	+--------|-- bra.s 5732 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    56de:	|        '-> move.w 1a758 <input+0x2>,d0
    56e4:	|        ,-- beq.s 5720 <handleInput+0x24c>
    56e6:	|        |   movea.l 1a11c <currentEvents>,a0
    56ec:	|        |   move.l 8(a0),d0
    56f0:	|        +-- beq.s 5720 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    56f2:	|        |   move.l 1a774 <noStack>,d1
    56f8:	|        |   movea.l 1a11c <currentEvents>,a0
    56fe:	|        |   move.l 8(a0),d0
    5702:	|        |   pea 1 <_start+0x1>
    5706:	|        |   move.l d1,-(sp)
    5708:	|        |   clr.l -(sp)
    570a:	|        |   clr.l -(sp)
    570c:	|        |   move.l d0,-(sp)
    570e:	|        |   jsr 6786 <startNewFunctionNum>
    5714:	|        |   lea 20(sp),sp
    5718:	|        |   tst.l d0
    571a:	|        +-- bne.s 5720 <handleInput+0x24c>
    571c:	|        |   clr.w d0
    571e:	+--------|-- bra.s 5732 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    5720:	|        '-> move.l 1a8b8 <overRegion>,d0
    5726:	|            move.l d0,1a76c <lastRegion>
	return runSludge ();
    572c:	|            jsr 6554 <runSludge>
}
    5732:	'----------> movea.l (sp)+,a6
    5734:	             lea 16(sp),sp
    5738:	             rts

0000573a <initSludge>:

BOOL initSludge (char * filename) {
    573a:	             lea -292(sp),sp
    573e:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    5742:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    5746:	             jsr aa34 <makeNullAnim>
    574c:	             move.l d0,1a6aa <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    5752:	             pea 1a74e <gameVersion>
    5758:	             pea 18628 <PutChar+0xc4c>
    575e:	             pea 45 <_start+0x45>
    5762:	             pea 47 <_start+0x47>
    5766:	             move.l 332(sp),-(sp)
    576a:	             jsr 6188 <openAndVerify>
    5770:	             lea 20(sp),sp
    5774:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    5778:	         ,-- bne.s 5780 <initSludge+0x46>
    577a:	         |   clr.w d0
    577c:	,--------|-- bra.w 5ea8 <initSludge+0x76e>
	if (FGetC (fp)) {
    5780:	|        '-> move.l 288(sp),284(sp)
    5786:	|            move.l 1a7ac <DOSBase>,d0
    578c:	|            movea.l d0,a6
    578e:	|            move.l 284(sp),d1
    5792:	|            jsr -306(a6)
    5796:	|            move.l d0,280(sp)
    579a:	|            move.l 280(sp),d0
    579e:	|  ,-------- beq.w 5948 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    57a2:	|  |         move.l 288(sp),-(sp)
    57a6:	|  |         jsr 6bc <get2bytes>
    57ac:	|  |         addq.l #4,sp
    57ae:	|  |         move.l d0,1a778 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    57b4:	|  |         move.l 1a778 <numBIFNames>,d0
    57ba:	|  |         move.l d0,276(sp)
    57be:	|  |         clr.l 272(sp)
    57c2:	|  |         move.l 1a7a4 <SysBase>,d0
    57c8:	|  |         movea.l d0,a6
    57ca:	|  |         move.l 276(sp),d0
    57ce:	|  |         move.l 272(sp),d1
    57d2:	|  |         jsr -684(a6)
    57d6:	|  |         move.l d0,268(sp)
    57da:	|  |         move.l 268(sp),d0
    57de:	|  |         move.l d0,1a734 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    57e4:	|  |         move.l 1a734 <allBIFNames>,d0
    57ea:	|  |     ,-- bne.s 57f2 <initSludge+0xb8>
    57ec:	|  |     |   clr.w d0
    57ee:	+--|-----|-- bra.w 5ea8 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    57f2:	|  |     '-> clr.l 304(sp)
    57f6:	|  |     ,-- bra.s 581c <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    57f8:	|  |  ,--|-> move.l 1a734 <allBIFNames>,d1
    57fe:	|  |  |  |   move.l 304(sp),d0
    5802:	|  |  |  |   add.l d0,d0
    5804:	|  |  |  |   add.l d0,d0
    5806:	|  |  |  |   movea.l d1,a2
    5808:	|  |  |  |   adda.l d0,a2
    580a:	|  |  |  |   move.l 288(sp),-(sp)
    580e:	|  |  |  |   jsr b02 <readString>
    5814:	|  |  |  |   addq.l #4,sp
    5816:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5818:	|  |  |  |   addq.l #1,304(sp)
    581c:	|  |  |  '-> move.l 1a778 <numBIFNames>,d0
    5822:	|  |  |      cmp.l 304(sp),d0
    5826:	|  |  '----- bgt.s 57f8 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5828:	|  |         move.l 288(sp),-(sp)
    582c:	|  |         jsr 6bc <get2bytes>
    5832:	|  |         addq.l #4,sp
    5834:	|  |         move.l d0,1a784 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    583a:	|  |         move.l 1a784 <numUserFunc>,d0
    5840:	|  |         move.l d0,264(sp)
    5844:	|  |         clr.l 260(sp)
    5848:	|  |         move.l 1a7a4 <SysBase>,d0
    584e:	|  |         movea.l d0,a6
    5850:	|  |         move.l 264(sp),d0
    5854:	|  |         move.l 260(sp),d1
    5858:	|  |         jsr -684(a6)
    585c:	|  |         move.l d0,256(sp)
    5860:	|  |         move.l 256(sp),d0
    5864:	|  |         move.l d0,1a740 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    586a:	|  |         move.l 1a740 <allUserFunc>,d0
    5870:	|  |     ,-- bne.s 5878 <initSludge+0x13e>
    5872:	|  |     |   clr.w d0
    5874:	+--|-----|-- bra.w 5ea8 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    5878:	|  |     '-> clr.l 300(sp)
    587c:	|  |     ,-- bra.s 58a2 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    587e:	|  |  ,--|-> move.l 1a740 <allUserFunc>,d1
    5884:	|  |  |  |   move.l 300(sp),d0
    5888:	|  |  |  |   add.l d0,d0
    588a:	|  |  |  |   add.l d0,d0
    588c:	|  |  |  |   movea.l d1,a2
    588e:	|  |  |  |   adda.l d0,a2
    5890:	|  |  |  |   move.l 288(sp),-(sp)
    5894:	|  |  |  |   jsr b02 <readString>
    589a:	|  |  |  |   addq.l #4,sp
    589c:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    589e:	|  |  |  |   addq.l #1,300(sp)
    58a2:	|  |  |  '-> move.l 1a784 <numUserFunc>,d0
    58a8:	|  |  |      cmp.l 300(sp),d0
    58ac:	|  |  '----- bgt.s 587e <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    58ae:	|  |         move.l 1a74e <gameVersion>,d0
    58b4:	|  |         cmpi.l #258,d0
    58ba:	|  +-------- ble.w 5948 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    58be:	|  |         move.l 288(sp),-(sp)
    58c2:	|  |         jsr 6bc <get2bytes>
    58c8:	|  |         addq.l #4,sp
    58ca:	|  |         move.l d0,1a780 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    58d0:	|  |         move.l 1a780 <numResourceNames>,d0
    58d6:	|  |         add.l d0,d0
    58d8:	|  |         add.l d0,d0
    58da:	|  |         move.l d0,252(sp)
    58de:	|  |         clr.l 248(sp)
    58e2:	|  |         move.l 1a7a4 <SysBase>,d0
    58e8:	|  |         movea.l d0,a6
    58ea:	|  |         move.l 252(sp),d0
    58ee:	|  |         move.l 248(sp),d1
    58f2:	|  |         jsr -684(a6)
    58f6:	|  |         move.l d0,244(sp)
    58fa:	|  |         move.l 244(sp),d0
    58fe:	|  |         move.l d0,1a738 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    5904:	|  |         move.l 1a738 <allResourceNames>,d0
    590a:	|  |     ,-- bne.s 5912 <initSludge+0x1d8>
    590c:	|  |     |   clr.w d0
    590e:	+--|-----|-- bra.w 5ea8 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    5912:	|  |     '-> clr.l 296(sp)
    5916:	|  |     ,-- bra.s 593c <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    5918:	|  |  ,--|-> move.l 1a738 <allResourceNames>,d1
    591e:	|  |  |  |   move.l 296(sp),d0
    5922:	|  |  |  |   add.l d0,d0
    5924:	|  |  |  |   add.l d0,d0
    5926:	|  |  |  |   movea.l d1,a2
    5928:	|  |  |  |   adda.l d0,a2
    592a:	|  |  |  |   move.l 288(sp),-(sp)
    592e:	|  |  |  |   jsr b02 <readString>
    5934:	|  |  |  |   addq.l #4,sp
    5936:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5938:	|  |  |  |   addq.l #1,296(sp)
    593c:	|  |  |  '-> move.l 1a780 <numResourceNames>,d0
    5942:	|  |  |      cmp.l 296(sp),d0
    5946:	|  |  '----- bgt.s 5918 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5948:	|  '-------> move.l #129,1a760 <input+0xa>
	input.mouseY = 100;
    5952:	|            moveq #100,d0
    5954:	|            move.l d0,1a764 <input+0xe>
	winWidth = get2bytes (fp);
    595a:	|            move.l 288(sp),-(sp)
    595e:	|            jsr 6bc <get2bytes>
    5964:	|            addq.l #4,sp
    5966:	|            move.l d0,1a6f8 <winWidth>
	winHeight = get2bytes (fp);
    596c:	|            move.l 288(sp),-(sp)
    5970:	|            jsr 6bc <get2bytes>
    5976:	|            addq.l #4,sp
    5978:	|            move.l d0,1a6fc <winHeight>
	specialSettings = FGetC (fp);
    597e:	|            move.l 288(sp),240(sp)
    5984:	|            move.l 1a7ac <DOSBase>,d0
    598a:	|            movea.l d0,a6
    598c:	|            move.l 240(sp),d1
    5990:	|            jsr -306(a6)
    5994:	|            move.l d0,236(sp)
    5998:	|            move.l 236(sp),d0
    599c:	|            move.l d0,1a788 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    59a2:	|            move.l 288(sp),232(sp)
    59a8:	|            move.l 1a7ac <DOSBase>,d0
    59ae:	|            movea.l d0,a6
    59b0:	|            move.l 232(sp),d1
    59b4:	|            jsr -306(a6)
    59b8:	|            move.l d0,228(sp)
    59bc:	|            move.l 228(sp),d0
    59c0:	|            move.l d0,-(sp)
    59c2:	|            pea 3e8 <encodeFilename+0xea>
    59c6:	|            jsr 17944 <__divsi3>
    59cc:	|            addq.l #8,sp
    59ce:	|            move.l d0,1a132 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    59d4:	|            move.l 288(sp),-(sp)
    59d8:	|            jsr b02 <readString>
    59de:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    59e0:	|            move.l 288(sp),224(sp)
    59e6:	|            move.l #108358,220(sp)
    59ee:	|            moveq #8,d1
    59f0:	|            move.l d1,216(sp)
    59f4:	|            moveq #1,d0
    59f6:	|            move.l d0,212(sp)
    59fa:	|            move.l 1a7ac <DOSBase>,d0
    5a00:	|            movea.l d0,a6
    5a02:	|            move.l 224(sp),d1
    5a06:	|            move.l 220(sp),d2
    5a0a:	|            move.l 216(sp),d3
    5a0e:	|            move.l 212(sp),d4
    5a12:	|            jsr -324(a6)
    5a16:	|            move.l d0,208(sp)
    5a1a:	|            move.l 208(sp),d0
    5a1e:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    5a22:	|            moveq #1,d1
    5a24:	|            cmp.l 204(sp),d1
    5a28:	|        ,-- beq.s 5a38 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5a2a:	|        |   pea 18661 <PutChar+0xc85>
    5a30:	|        |   jsr 16f3a <KPrintF>
    5a36:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5a38:	|        '-> move.l 1a74e <gameVersion>,d0
    5a3e:	|            cmpi.l #258,d0
    5a44:	|        ,-- ble.s 5a54 <initSludge+0x31a>
    5a46:	|        |   move.l 288(sp),-(sp)
    5a4a:	|        |   jsr b02 <readString>
    5a50:	|        |   addq.l #4,sp
    5a52:	|     ,--|-- bra.s 5a68 <initSludge+0x32e>
    5a54:	|     |  '-> pea 1867f <PutChar+0xca3>
    5a5a:	|     |      pea 1867f <PutChar+0xca3>
    5a60:	|     |      jsr 13a1a <joinStrings>
    5a66:	|     |      addq.l #8,sp
    5a68:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5a6c:	|            move.l 1a74e <gameVersion>,d0
    5a72:	|            cmpi.l #258,d0
    5a78:	|     ,----- ble.s 5a9a <initSludge+0x360>
    5a7a:	|     |      move.l 288(sp),196(sp)
    5a80:	|     |      move.l 1a7ac <DOSBase>,d0
    5a86:	|     |      movea.l d0,a6
    5a88:	|     |      move.l 196(sp),d1
    5a8c:	|     |      jsr -306(a6)
    5a90:	|     |      move.l d0,192(sp)
    5a94:	|     |      move.l 192(sp),d0
    5a98:	|     |  ,-- bra.s 5a9c <initSludge+0x362>
    5a9a:	|     '--|-> moveq #0,d0
    5a9c:	|        '-> move.l d0,1a884 <gameSettings+0x4>
	makeLanguageTable (fp);
    5aa2:	|            move.l 288(sp),-(sp)
    5aa6:	|            jsr 133d0 <makeLanguageTable>
    5aac:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    5aae:	|            move.l 1a74e <gameVersion>,d0
    5ab4:	|            cmpi.l #261,d0
    5aba:	|        ,-- ble.s 5b08 <initSludge+0x3ce>
	{
		FGetC(fp);
    5abc:	|        |   move.l 288(sp),188(sp)
    5ac2:	|        |   move.l 1a7ac <DOSBase>,d0
    5ac8:	|        |   movea.l d0,a6
    5aca:	|        |   move.l 188(sp),d1
    5ace:	|        |   jsr -306(a6)
    5ad2:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5ad6:	|        |   move.l 288(sp),180(sp)
    5adc:	|        |   move.l 1a7ac <DOSBase>,d0
    5ae2:	|        |   movea.l d0,a6
    5ae4:	|        |   move.l 180(sp),d1
    5ae8:	|        |   jsr -306(a6)
    5aec:	|        |   move.l d0,176(sp)
		getFloat (fp);
    5af0:	|        |   move.l 288(sp),-(sp)
    5af4:	|        |   jsr 7d8 <getFloat>
    5afa:	|        |   addq.l #4,sp
		getFloat (fp);
    5afc:	|        |   move.l 288(sp),-(sp)
    5b00:	|        |   jsr 7d8 <getFloat>
    5b06:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5b08:	|        '-> move.l 288(sp),-(sp)
    5b0c:	|            jsr b02 <readString>
    5b12:	|            addq.l #4,sp
    5b14:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5b18:	|            pea 18680 <PutChar+0xca4>
    5b1e:	|            move.l 176(sp),-(sp)
    5b22:	|            jsr 1399a <strcmp>
    5b28:	|            addq.l #8,sp
    5b2a:	|            tst.l d0
    5b2c:	|        ,-- beq.s 5b34 <initSludge+0x3fa>
		return FALSE;
    5b2e:	|        |   clr.w d0
    5b30:	+--------|-- bra.w 5ea8 <initSludge+0x76e>
	}
	FreeVec( checker);
    5b34:	|        '-> move.l 172(sp),168(sp)
    5b3a:	|            move.l 1a7a4 <SysBase>,d0
    5b40:	|            movea.l d0,a6
    5b42:	|            movea.l 168(sp),a1
    5b46:	|            jsr -690(a6)
	checker = NULL;
    5b4a:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5b4e:	|            move.l 288(sp),164(sp)
    5b54:	|            move.l 1a7ac <DOSBase>,d0
    5b5a:	|            movea.l d0,a6
    5b5c:	|            move.l 164(sp),d1
    5b60:	|            jsr -306(a6)
    5b64:	|            move.l d0,160(sp)
    5b68:	|            move.l 160(sp),d0
    5b6c:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    5b70:	|            moveq #0,d0
    5b72:	|            move.b 159(sp),d0
    5b76:	|            moveq #1,d1
    5b78:	|            and.l d1,d0
    5b7a:	|        ,-- beq.s 5bd2 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    5b7c:	|        |   move.l 1a7ac <DOSBase>,d0
    5b82:	|        |   movea.l d0,a6
    5b84:	|        |   jsr -60(a6)
    5b88:	|        |   move.l d0,38(sp)
    5b8c:	|        |   move.l 38(sp),d0
    5b90:	|        |   move.l d0,34(sp)
    5b94:	|        |   move.l #99976,30(sp)
    5b9c:	|        |   moveq #54,d0
    5b9e:	|        |   move.l d0,26(sp)
    5ba2:	|        |   move.l 1a7ac <DOSBase>,d0
    5ba8:	|        |   movea.l d0,a6
    5baa:	|        |   move.l 34(sp),d1
    5bae:	|        |   move.l 30(sp),d2
    5bb2:	|        |   move.l 26(sp),d3
    5bb6:	|        |   jsr -48(a6)
    5bba:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    5bbe:	|        |   pea 186bf <PutChar+0xce3>
    5bc4:	|        |   jsr 16f3a <KPrintF>
    5bca:	|        |   addq.l #4,sp
		return FALSE;
    5bcc:	|        |   clr.w d0
    5bce:	+--------|-- bra.w 5ea8 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    5bd2:	|        '-> move.l 288(sp),-(sp)
    5bd6:	|            jsr 6bc <get2bytes>
    5bdc:	|            addq.l #4,sp
    5bde:	|            move.l d0,1a77c <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    5be4:	|            move.l 1a77c <numGlobals>,d0
    5bea:	|            lsl.l #3,d0
    5bec:	|            move.l d0,154(sp)
    5bf0:	|            clr.l 150(sp)
    5bf4:	|            move.l 1a7a4 <SysBase>,d0
    5bfa:	|            movea.l d0,a6
    5bfc:	|            move.l 154(sp),d0
    5c00:	|            move.l 150(sp),d1
    5c04:	|            jsr -684(a6)
    5c08:	|            move.l d0,146(sp)
    5c0c:	|            move.l 146(sp),d0
    5c10:	|            move.l d0,1a752 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    5c16:	|            move.l 1a752 <globalVars>,d0
    5c1c:	|        ,-- bne.s 5c3a <initSludge+0x500>
    5c1e:	|        |   move.l 1a77c <numGlobals>,d0
    5c24:	|        +-- ble.s 5c3a <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    5c26:	|        |   pea 186f7 <PutChar+0xd1b>
    5c2c:	|        |   jsr 16f3a <KPrintF>
    5c32:	|        |   addq.l #4,sp
		return FALSE;
    5c34:	|        |   clr.w d0
    5c36:	+--------|-- bra.w 5ea8 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    5c3a:	|        '-> clr.l 308(sp)
    5c3e:	|        ,-- bra.s 5c56 <initSludge+0x51c>
    5c40:	|     ,--|-> move.l 1a752 <globalVars>,d1
    5c46:	|     |  |   move.l 308(sp),d0
    5c4a:	|     |  |   lsl.l #3,d0
    5c4c:	|     |  |   movea.l d1,a0
    5c4e:	|     |  |   adda.l d0,a0
    5c50:	|     |  |   clr.l (a0)
    5c52:	|     |  |   addq.l #1,308(sp)
    5c56:	|     |  '-> move.l 1a77c <numGlobals>,d0
    5c5c:	|     |      cmp.l 308(sp),d0
    5c60:	|     '----- bgt.s 5c40 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    5c62:	|            move.l 1a884 <gameSettings+0x4>,d0
    5c68:	|            clr.l -(sp)
    5c6a:	|            move.l d0,-(sp)
    5c6c:	|            move.l 296(sp),-(sp)
    5c70:	|            jsr 6c76 <setFileIndices>
    5c76:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    5c7a:	|            pea 1 <_start+0x1>
    5c7e:	|            jsr 6930 <getNumberedString>
    5c84:	|            addq.l #4,sp
    5c86:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    5c8a:	|            move.l 142(sp),-(sp)
    5c8e:	|            jsr 2fe <encodeFilename>
    5c94:	|            addq.l #4,sp
    5c96:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    5c9a:	|            move.l 142(sp),134(sp)
    5ca0:	|            move.l 1a7a4 <SysBase>,d0
    5ca6:	|            movea.l d0,a6
    5ca8:	|            movea.l 134(sp),a1
    5cac:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    5cb0:	|            move.l 138(sp),130(sp)
    5cb6:	|            move.l 1a7ac <DOSBase>,d0
    5cbc:	|            movea.l d0,a6
    5cbe:	|            move.l 130(sp),d1
    5cc2:	|            jsr -120(a6)
    5cc6:	|            move.l d0,126(sp)
    5cca:	|            move.l 126(sp),d0
    5cce:	|            move.l d0,292(sp)
	if(lock == 0) {
    5cd2:	|        ,-- bne.s 5d00 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    5cd4:	|        |   move.l 138(sp),122(sp)
    5cda:	|        |   moveq #-2,d1
    5cdc:	|        |   move.l d1,118(sp)
    5ce0:	|        |   move.l 1a7ac <DOSBase>,d0
    5ce6:	|        |   movea.l d0,a6
    5ce8:	|        |   move.l 122(sp),d1
    5cec:	|        |   move.l 118(sp),d2
    5cf0:	|        |   jsr -84(a6)
    5cf4:	|        |   move.l d0,114(sp)
    5cf8:	|        |   move.l 114(sp),d0
    5cfc:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    5d00:	|        '-> move.l 292(sp),110(sp)
    5d06:	|            move.l 1a7ac <DOSBase>,d0
    5d0c:	|            movea.l d0,a6
    5d0e:	|            move.l 110(sp),d1
    5d12:	|            jsr -126(a6)
    5d16:	|            move.l d0,106(sp)
    5d1a:	|            move.l 106(sp),d0
    5d1e:	|        ,-- bne.s 5d7a <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    5d20:	|        |   move.l 138(sp),-(sp)
    5d24:	|        |   pea 1872a <PutChar+0xd4e>
    5d2a:	|        |   jsr 16f3a <KPrintF>
    5d30:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    5d32:	|        |   move.l 1a7ac <DOSBase>,d0
    5d38:	|        |   movea.l d0,a6
    5d3a:	|        |   jsr -60(a6)
    5d3e:	|        |   move.l d0,58(sp)
    5d42:	|        |   move.l 58(sp),d0
    5d46:	|        |   move.l d0,54(sp)
    5d4a:	|        |   move.l #100183,50(sp)
    5d52:	|        |   moveq #40,d0
    5d54:	|        |   move.l d0,46(sp)
    5d58:	|        |   move.l 1a7ac <DOSBase>,d0
    5d5e:	|        |   movea.l d0,a6
    5d60:	|        |   move.l 54(sp),d1
    5d64:	|        |   move.l 50(sp),d2
    5d68:	|        |   move.l 46(sp),d3
    5d6c:	|        |   jsr -48(a6)
    5d70:	|        |   move.l d0,42(sp)
		return FALSE;
    5d74:	|        |   clr.w d0
    5d76:	+--------|-- bra.w 5ea8 <initSludge+0x76e>
	}

	FreeVec(gameName);
    5d7a:	|        '-> move.l 138(sp),102(sp)
    5d80:	|            move.l 1a7a4 <SysBase>,d0
    5d86:	|            movea.l d0,a6
    5d88:	|            movea.l 102(sp),a1
    5d8c:	|            jsr -690(a6)

	readIniFile (filename);
    5d90:	|            move.l 316(sp),-(sp)
    5d94:	|            jsr 13504 <readIniFile>
    5d9a:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    5d9c:	|            jsr 132d6 <getLanguageForFileB>
    5da2:	|            move.l d0,1a120 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    5da8:	|            move.l 1a120 <languageNum>,d0
    5dae:	|        ,-- bpl.s 5dbe <initSludge+0x684>
    5db0:	|        |   pea 18780 <PutChar+0xda4>
    5db6:	|        |   jsr 16f3a <KPrintF>
    5dbc:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    5dbe:	|        '-> move.l 1a120 <languageNum>,d0
    5dc4:	|            move.l d0,d1
    5dc6:	|            move.l 1a884 <gameSettings+0x4>,d0
    5dcc:	|            move.l d1,-(sp)
    5dce:	|            move.l d0,-(sp)
    5dd0:	|            clr.l -(sp)
    5dd2:	|            jsr 6c76 <setFileIndices>
    5dd8:	|            lea 12(sp),sp

	if (dataFol[0]) {
    5ddc:	|            movea.l 200(sp),a0
    5de0:	|            move.b (a0),d0
    5de2:	|     ,----- beq.w 5e8c <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    5de6:	|     |      move.l 200(sp),-(sp)
    5dea:	|     |      jsr 2fe <encodeFilename>
    5df0:	|     |      addq.l #4,sp
    5df2:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    5df6:	|     |      move.l 98(sp),94(sp)
    5dfc:	|     |      move.l 1a7ac <DOSBase>,d0
    5e02:	|     |      movea.l d0,a6
    5e04:	|     |      move.l 94(sp),d1
    5e08:	|     |      jsr -120(a6)
    5e0c:	|     |      move.l d0,90(sp)
    5e10:	|     |      move.l 90(sp),d0
    5e14:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    5e18:	|     |  ,-- bne.s 5e46 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    5e1a:	|     |  |   move.l 98(sp),86(sp)
    5e20:	|     |  |   moveq #-2,d1
    5e22:	|     |  |   move.l d1,82(sp)
    5e26:	|     |  |   move.l 1a7ac <DOSBase>,d0
    5e2c:	|     |  |   movea.l d0,a6
    5e2e:	|     |  |   move.l 86(sp),d1
    5e32:	|     |  |   move.l 82(sp),d2
    5e36:	|     |  |   jsr -84(a6)
    5e3a:	|     |  |   move.l d0,78(sp)
    5e3e:	|     |  |   move.l 78(sp),d0
    5e42:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    5e46:	|     |  '-> move.l 292(sp),74(sp)
    5e4c:	|     |      move.l 1a7ac <DOSBase>,d0
    5e52:	|     |      movea.l d0,a6
    5e54:	|     |      move.l 74(sp),d1
    5e58:	|     |      jsr -126(a6)
    5e5c:	|     |      move.l d0,70(sp)
    5e60:	|     |      move.l 70(sp),d0
    5e64:	|     |  ,-- bne.s 5e76 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    5e66:	|     |  |   move.l 1a7ac <DOSBase>,d0
    5e6c:	|     |  |   movea.l d0,a6
    5e6e:	|     |  |   jsr -60(a6)
    5e72:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    5e76:	|     |  '-> move.l 98(sp),62(sp)
    5e7c:	|     |      move.l 1a7a4 <SysBase>,d0
    5e82:	|     |      movea.l d0,a6
    5e84:	|     |      movea.l 62(sp),a1
    5e88:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    5e8c:	|     '----> movea.l 1a6fc <winHeight>,a0
    5e92:	|            lea -15(a0),a0
    5e96:	|            move.l a0,d0
    5e98:	|            move.l d0,-(sp)
    5e9a:	|            pea a <_start+0xa>
    5e9e:	|            jsr 76bc <positionStatus>
    5ea4:	|            addq.l #8,sp

	return TRUE;
    5ea6:	|            moveq #1,d0
}
    5ea8:	'----------> movem.l (sp)+,d2-d4/a2/a6
    5eac:	             lea 292(sp),sp
    5eb0:	             rts

00005eb2 <killSpeechTimers>:

void killSpeechTimers () {
    5eb2:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5eb4:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    5eba:	   ,----- bra.s 5ee6 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    5ebc:	,--|----> movea.l (sp),a0
    5ebe:	|  |      move.b 56(a0),d0
    5ec2:	|  |  ,-- bne.s 5ee0 <killSpeechTimers+0x2e>
    5ec4:	|  |  |   movea.l (sp),a0
    5ec6:	|  |  |   move.w 50(a0),d0
    5eca:	|  |  +-- beq.s 5ee0 <killSpeechTimers+0x2e>
    5ecc:	|  |  |   movea.l (sp),a0
    5ece:	|  |  |   move.l 12(a0),d0
    5ed2:	|  |  +-- beq.s 5ee0 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    5ed4:	|  |  |   movea.l (sp),a0
    5ed6:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    5eda:	|  |  |   movea.l (sp),a0
    5edc:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    5ee0:	|  |  '-> movea.l (sp),a0
    5ee2:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5ee6:	|  '----> tst.l (sp)
    5ee8:	'-------- bne.s 5ebc <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    5eea:	          jsr 7bfa <killAllSpeech>
}
    5ef0:	          nop
    5ef2:	          addq.l #4,sp
    5ef4:	          rts

00005ef6 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    5ef6:	             lea -52(sp),sp
    5efa:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    5efc:	             movea.l 60(sp),a0
    5f00:	             move.l (a0),d0
    5f02:	             move.l d0,-(sp)
    5f04:	             jsr 6bb6 <openSubSlice>
    5f0a:	             addq.l #4,sp
    5f0c:	             tst.w d0
    5f0e:	         ,-- bne.s 5f16 <loadFunctionCode+0x20>
    5f10:	         |   clr.w d0
    5f12:	,--------|-- bra.w 60e0 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    5f16:	|        '-> move.l 1a78c <bigDataFile>,44(sp)
    5f1e:	|            move.l 1a7ac <DOSBase>,d0
    5f24:	|            movea.l d0,a6
    5f26:	|            move.l 44(sp),d1
    5f2a:	|            jsr -306(a6)
    5f2e:	|            move.l d0,40(sp)
    5f32:	|            move.l 40(sp),d0
    5f36:	|            move.l d0,d0
    5f38:	|            movea.l 60(sp),a0
    5f3c:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    5f40:	|            move.l 1a78c <bigDataFile>,d0
    5f46:	|            move.l d0,-(sp)
    5f48:	|            jsr 6bc <get2bytes>
    5f4e:	|            addq.l #4,sp
    5f50:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    5f54:	|            move.l 1a78c <bigDataFile>,d0
    5f5a:	|            move.l d0,-(sp)
    5f5c:	|            jsr 6bc <get2bytes>
    5f62:	|            addq.l #4,sp
    5f64:	|            movea.l 60(sp),a0
    5f68:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    5f6c:	|            move.l 1a78c <bigDataFile>,d0
    5f72:	|            move.l d0,-(sp)
    5f74:	|            jsr 6bc <get2bytes>
    5f7a:	|            addq.l #4,sp
    5f7c:	|            movea.l 60(sp),a0
    5f80:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    5f84:	|            move.l 36(sp),d0
    5f88:	|            lsl.l #3,d0
    5f8a:	|            move.l d0,32(sp)
    5f8e:	|            clr.l 28(sp)
    5f92:	|            move.l 1a7a4 <SysBase>,d0
    5f98:	|            movea.l d0,a6
    5f9a:	|            move.l 32(sp),d0
    5f9e:	|            move.l 28(sp),d1
    5fa2:	|            jsr -684(a6)
    5fa6:	|            move.l d0,24(sp)
    5faa:	|            move.l 24(sp),d0
    5fae:	|            movea.l 60(sp),a0
    5fb2:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    5fb6:	|            movea.l 60(sp),a0
    5fba:	|            move.l 4(a0),d0
    5fbe:	|        ,-- bne.s 5fd4 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    5fc0:	|        |   pea 187ab <PutChar+0xdcf>
    5fc6:	|        |   jsr 16f3a <KPrintF>
    5fcc:	|        |   addq.l #4,sp
		return FALSE;
    5fce:	|        |   clr.w d0
    5fd0:	+--------|-- bra.w 60e0 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    5fd4:	|        '-> clr.l 52(sp)
    5fd8:	|        ,-- bra.s 603a <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    5fda:	|     ,--|-> move.l 1a78c <bigDataFile>,8(sp)
    5fe2:	|     |  |   move.l 1a7ac <DOSBase>,d0
    5fe8:	|     |  |   movea.l d0,a6
    5fea:	|     |  |   move.l 8(sp),d1
    5fee:	|     |  |   jsr -306(a6)
    5ff2:	|     |  |   move.l d0,4(sp)
    5ff6:	|     |  |   move.l 4(sp),d1
    5ffa:	|     |  |   movea.l 60(sp),a0
    5ffe:	|     |  |   movea.l 4(a0),a0
    6002:	|     |  |   move.l 52(sp),d0
    6006:	|     |  |   lsl.l #3,d0
    6008:	|     |  |   adda.l d0,a0
    600a:	|     |  |   move.l d1,d0
    600c:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    600e:	|     |  |   move.l 1a78c <bigDataFile>,d0
    6014:	|     |  |   move.l d0,-(sp)
    6016:	|     |  |   jsr 6bc <get2bytes>
    601c:	|     |  |   addq.l #4,sp
    601e:	|     |  |   move.l d0,d1
    6020:	|     |  |   movea.l 60(sp),a0
    6024:	|     |  |   movea.l 4(a0),a0
    6028:	|     |  |   move.l 52(sp),d0
    602c:	|     |  |   lsl.l #3,d0
    602e:	|     |  |   adda.l d0,a0
    6030:	|     |  |   move.l d1,d0
    6032:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6036:	|     |  |   addq.l #1,52(sp)
    603a:	|     |  '-> move.l 52(sp),d0
    603e:	|     |      cmp.l 36(sp),d0
    6042:	|     '----- bcs.s 5fda <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6044:	|            jsr 6926 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    604a:	|            movea.l 60(sp),a0
    604e:	|            move.l 8(a0),d0
    6052:	|  ,-------- ble.w 60d6 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6056:	|  |         movea.l 60(sp),a0
    605a:	|  |         move.l 8(a0),d0
    605e:	|  |         lsl.l #3,d0
    6060:	|  |         move.l d0,20(sp)
    6064:	|  |         clr.l 16(sp)
    6068:	|  |         move.l 1a7a4 <SysBase>,d0
    606e:	|  |         movea.l d0,a6
    6070:	|  |         move.l 20(sp),d0
    6074:	|  |         move.l 16(sp),d1
    6078:	|  |         jsr -684(a6)
    607c:	|  |         move.l d0,12(sp)
    6080:	|  |         move.l 12(sp),d0
    6084:	|  |         movea.l 60(sp),a0
    6088:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    608c:	|  |         movea.l 60(sp),a0
    6090:	|  |         move.l 20(a0),d0
    6094:	|  |     ,-- bne.s 60a8 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6096:	|  |     |   pea 187ab <PutChar+0xdcf>
    609c:	|  |     |   jsr 16f3a <KPrintF>
    60a2:	|  |     |   addq.l #4,sp
			return FALSE;
    60a4:	|  |     |   clr.w d0
    60a6:	+--|-----|-- bra.s 60e0 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    60a8:	|  |     '-> clr.l 48(sp)
    60ac:	|  |     ,-- bra.s 60c6 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    60ae:	|  |  ,--|-> movea.l 60(sp),a0
    60b2:	|  |  |  |   move.l 20(a0),d1
    60b6:	|  |  |  |   move.l 48(sp),d0
    60ba:	|  |  |  |   lsl.l #3,d0
    60bc:	|  |  |  |   movea.l d1,a0
    60be:	|  |  |  |   adda.l d0,a0
    60c0:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    60c2:	|  |  |  |   addq.l #1,48(sp)
    60c6:	|  |  |  '-> movea.l 60(sp),a0
    60ca:	|  |  |      move.l 8(a0),d0
    60ce:	|  |  |      cmp.l 48(sp),d0
    60d2:	|  |  '----- bgt.s 60ae <loadFunctionCode+0x1b8>
    60d4:	|  |     ,-- bra.s 60de <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    60d6:	|  '-----|-> movea.l 60(sp),a0
    60da:	|        |   clr.l 8(a0)
	}
	return TRUE;
    60de:	|        '-> moveq #1,d0
}
    60e0:	'----------> movea.l (sp)+,a6
    60e2:	             lea 52(sp),sp
    60e6:	             rts

000060e8 <loadHandlers>:

void loadHandlers (BPTR fp) {
    60e8:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    60ea:	movea.l 1a11c <currentEvents>,a2
    60f0:	move.l 8(sp),-(sp)
    60f4:	jsr 6bc <get2bytes>
    60fa:	addq.l #4,sp
    60fc:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    60fe:	movea.l 1a11c <currentEvents>,a2
    6104:	move.l 8(sp),-(sp)
    6108:	jsr 6bc <get2bytes>
    610e:	addq.l #4,sp
    6110:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6114:	movea.l 1a11c <currentEvents>,a2
    611a:	move.l 8(sp),-(sp)
    611e:	jsr 6bc <get2bytes>
    6124:	addq.l #4,sp
    6126:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    612a:	movea.l 1a11c <currentEvents>,a2
    6130:	move.l 8(sp),-(sp)
    6134:	jsr 6bc <get2bytes>
    613a:	addq.l #4,sp
    613c:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    6140:	movea.l 1a11c <currentEvents>,a2
    6146:	move.l 8(sp),-(sp)
    614a:	jsr 6bc <get2bytes>
    6150:	addq.l #4,sp
    6152:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    6156:	movea.l 1a11c <currentEvents>,a2
    615c:	move.l 8(sp),-(sp)
    6160:	jsr 6bc <get2bytes>
    6166:	addq.l #4,sp
    6168:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    616c:	movea.l 1a11c <currentEvents>,a2
    6172:	move.l 8(sp),-(sp)
    6176:	jsr 6bc <get2bytes>
    617c:	addq.l #4,sp
    617e:	move.l d0,24(a2)
}
    6182:	nop
    6184:	movea.l (sp)+,a2
    6186:	rts

00006188 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    6188:	       lea -312(sp),sp
    618c:	       movem.l d2-d3/a6,-(sp)
    6190:	       move.l 332(sp),d1
    6194:	       move.l 336(sp),d0
    6198:	       move.b d1,d1
    619a:	       move.b d1,16(sp)
    619e:	       move.b d0,d0
    61a0:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    61a4:	       move.l 328(sp),318(sp)
    61aa:	       move.l #1005,314(sp)
    61b2:	       move.l 1a7ac <DOSBase>,d0
    61b8:	       movea.l d0,a6
    61ba:	       move.l 318(sp),d1
    61be:	       move.l 314(sp),d2
    61c2:	       jsr -30(a6)
    61c6:	       move.l d0,310(sp)
    61ca:	       move.l 310(sp),d0
    61ce:	       move.l d0,306(sp)

	if (! fp) {
    61d2:	   ,-- bne.s 622e <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    61d4:	   |   move.l 1a7ac <DOSBase>,d0
    61da:	   |   movea.l d0,a6
    61dc:	   |   jsr -60(a6)
    61e0:	   |   move.l d0,154(sp)
    61e4:	   |   move.l 154(sp),d0
    61e8:	   |   move.l d0,150(sp)
    61ec:	   |   move.l #100308,146(sp)
    61f4:	   |   moveq #31,d0
    61f6:	   |   move.l d0,142(sp)
    61fa:	   |   move.l 1a7ac <DOSBase>,d0
    6200:	   |   movea.l d0,a6
    6202:	   |   move.l 150(sp),d1
    6206:	   |   move.l 146(sp),d2
    620a:	   |   move.l 142(sp),d3
    620e:	   |   jsr -48(a6)
    6212:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6216:	   |   move.l 328(sp),-(sp)
    621a:	   |   pea 187f4 <PutChar+0xe18>
    6220:	   |   jsr 16f3a <KPrintF>
    6226:	   |   addq.l #8,sp
		return NULL;
    6228:	   |   moveq #0,d0
    622a:	,--|-- bra.w 64ee <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    622e:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    6232:	|      move.l 306(sp),302(sp)
    6238:	|      move.l 1a7ac <DOSBase>,d0
    623e:	|      movea.l d0,a6
    6240:	|      move.l 302(sp),d1
    6244:	|      jsr -306(a6)
    6248:	|      move.l d0,298(sp)
    624c:	|      move.l 298(sp),d0
    6250:	|      moveq #83,d1
    6252:	|      cmp.l d0,d1
    6254:	|  ,-- beq.s 625c <openAndVerify+0xd4>
    6256:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    625c:	|  '-> move.l 306(sp),294(sp)
    6262:	|      move.l 1a7ac <DOSBase>,d0
    6268:	|      movea.l d0,a6
    626a:	|      move.l 294(sp),d1
    626e:	|      jsr -306(a6)
    6272:	|      move.l d0,290(sp)
    6276:	|      move.l 290(sp),d0
    627a:	|      moveq #76,d1
    627c:	|      cmp.l d0,d1
    627e:	|  ,-- beq.s 6286 <openAndVerify+0xfe>
    6280:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    6286:	|  '-> move.l 306(sp),286(sp)
    628c:	|      move.l 1a7ac <DOSBase>,d0
    6292:	|      movea.l d0,a6
    6294:	|      move.l 286(sp),d1
    6298:	|      jsr -306(a6)
    629c:	|      move.l d0,282(sp)
    62a0:	|      move.l 282(sp),d0
    62a4:	|      moveq #85,d1
    62a6:	|      cmp.l d0,d1
    62a8:	|  ,-- beq.s 62b0 <openAndVerify+0x128>
    62aa:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    62b0:	|  '-> move.l 306(sp),278(sp)
    62b6:	|      move.l 1a7ac <DOSBase>,d0
    62bc:	|      movea.l d0,a6
    62be:	|      move.l 278(sp),d1
    62c2:	|      jsr -306(a6)
    62c6:	|      move.l d0,274(sp)
    62ca:	|      move.l 274(sp),d0
    62ce:	|      moveq #68,d1
    62d0:	|      cmp.l d0,d1
    62d2:	|  ,-- beq.s 62da <openAndVerify+0x152>
    62d4:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    62da:	|  '-> move.l 306(sp),270(sp)
    62e0:	|      move.l 1a7ac <DOSBase>,d0
    62e6:	|      movea.l d0,a6
    62e8:	|      move.l 270(sp),d1
    62ec:	|      jsr -306(a6)
    62f0:	|      move.l d0,266(sp)
    62f4:	|      move.l 266(sp),d1
    62f8:	|      move.b 16(sp),d0
    62fc:	|      ext.w d0
    62fe:	|      movea.w d0,a0
    6300:	|      cmpa.l d1,a0
    6302:	|  ,-- beq.s 630a <openAndVerify+0x182>
    6304:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    630a:	|  '-> move.l 306(sp),262(sp)
    6310:	|      move.l 1a7ac <DOSBase>,d0
    6316:	|      movea.l d0,a6
    6318:	|      move.l 262(sp),d1
    631c:	|      jsr -306(a6)
    6320:	|      move.l d0,258(sp)
    6324:	|      move.l 258(sp),d1
    6328:	|      move.b 14(sp),d0
    632c:	|      ext.w d0
    632e:	|      movea.w d0,a0
    6330:	|      cmpa.l d1,a0
    6332:	|  ,-- beq.s 633a <openAndVerify+0x1b2>
    6334:	|  |   move.w #1,322(sp)
	if (headerBad) {
    633a:	|  '-> tst.w 322(sp)
    633e:	|  ,-- beq.s 6396 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    6340:	|  |   move.l 1a7ac <DOSBase>,d0
    6346:	|  |   movea.l d0,a6
    6348:	|  |   jsr -60(a6)
    634c:	|  |   move.l d0,174(sp)
    6350:	|  |   move.l 174(sp),d0
    6354:	|  |   move.l d0,170(sp)
    6358:	|  |   move.l #100371,166(sp)
    6360:	|  |   moveq #31,d0
    6362:	|  |   move.l d0,162(sp)
    6366:	|  |   move.l 1a7ac <DOSBase>,d0
    636c:	|  |   movea.l d0,a6
    636e:	|  |   move.l 170(sp),d1
    6372:	|  |   move.l 166(sp),d2
    6376:	|  |   move.l 162(sp),d3
    637a:	|  |   jsr -48(a6)
    637e:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    6382:	|  |   pea 18813 <PutChar+0xe37>
    6388:	|  |   jsr 16f3a <KPrintF>
    638e:	|  |   addq.l #4,sp
		return NULL;
    6390:	|  |   moveq #0,d0
    6392:	+--|-- bra.w 64ee <openAndVerify+0x366>
	}
	FGetC (fp);
    6396:	|  '-> move.l 306(sp),254(sp)
    639c:	|      move.l 1a7ac <DOSBase>,d0
    63a2:	|      movea.l d0,a6
    63a4:	|      move.l 254(sp),d1
    63a8:	|      jsr -306(a6)
    63ac:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    63b0:	|      nop
    63b2:	|  ,-> move.l 306(sp),246(sp)
    63b8:	|  |   move.l 1a7ac <DOSBase>,d0
    63be:	|  |   movea.l d0,a6
    63c0:	|  |   move.l 246(sp),d1
    63c4:	|  |   jsr -306(a6)
    63c8:	|  |   move.l d0,242(sp)
    63cc:	|  |   move.l 242(sp),d0
    63d0:	|  '-- bne.s 63b2 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    63d2:	|      move.l 306(sp),238(sp)
    63d8:	|      move.l 1a7ac <DOSBase>,d0
    63de:	|      movea.l d0,a6
    63e0:	|      move.l 238(sp),d1
    63e4:	|      jsr -306(a6)
    63e8:	|      move.l d0,234(sp)
    63ec:	|      move.l 234(sp),d0
    63f0:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    63f4:	|      move.l 306(sp),226(sp)
    63fa:	|      move.l 1a7ac <DOSBase>,d0
    6400:	|      movea.l d0,a6
    6402:	|      move.l 226(sp),d1
    6406:	|      jsr -306(a6)
    640a:	|      move.l d0,222(sp)
    640e:	|      move.l 222(sp),d0
    6412:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    6416:	|      move.l 230(sp),d0
    641a:	|      lsl.l #8,d0
    641c:	|      add.l 218(sp),d0
    6420:	|      movea.l 344(sp),a0
    6424:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    6426:	|      movea.l 344(sp),a0
    642a:	|      move.l (a0),d0
    642c:	|      cmpi.l #514,d0
    6432:	|  ,-- ble.s 6488 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    6434:	|  |   move.l 1a7ac <DOSBase>,d0
    643a:	|  |   movea.l d0,a6
    643c:	|  |   jsr -60(a6)
    6440:	|  |   move.l d0,194(sp)
    6444:	|  |   move.l 194(sp),d0
    6448:	|  |   move.l d0,190(sp)
    644c:	|  |   move.l #100398,186(sp)
    6454:	|  |   moveq #100,d1
    6456:	|  |   move.l d1,182(sp)
    645a:	|  |   move.l 1a7ac <DOSBase>,d0
    6460:	|  |   movea.l d0,a6
    6462:	|  |   move.l 190(sp),d1
    6466:	|  |   move.l 186(sp),d2
    646a:	|  |   move.l 182(sp),d3
    646e:	|  |   jsr -48(a6)
    6472:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    6476:	|  |   pea 1882e <PutChar+0xe52>
    647c:	|  |   jsr 16f3a <KPrintF>
    6482:	|  |   addq.l #4,sp
		return NULL;
    6484:	|  |   moveq #0,d0
    6486:	+--|-- bra.s 64ee <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    6488:	|  '-> movea.l 344(sp),a0
    648c:	|      move.l (a0),d0
    648e:	|      cmpi.l #257,d0
    6494:	|  ,-- bgt.s 64ea <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    6496:	|  |   move.l 1a7ac <DOSBase>,d0
    649c:	|  |   movea.l d0,a6
    649e:	|  |   jsr -60(a6)
    64a2:	|  |   move.l d0,214(sp)
    64a6:	|  |   move.l 214(sp),d0
    64aa:	|  |   move.l d0,210(sp)
    64ae:	|  |   move.l #100467,206(sp)
    64b6:	|  |   moveq #100,d0
    64b8:	|  |   move.l d0,202(sp)
    64bc:	|  |   move.l 1a7ac <DOSBase>,d0
    64c2:	|  |   movea.l d0,a6
    64c4:	|  |   move.l 210(sp),d1
    64c8:	|  |   move.l 206(sp),d2
    64cc:	|  |   move.l 202(sp),d3
    64d0:	|  |   jsr -48(a6)
    64d4:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    64d8:	|  |   pea 18873 <PutChar+0xe97>
    64de:	|  |   jsr 16f3a <KPrintF>
    64e4:	|  |   addq.l #4,sp
		return NULL;
    64e6:	|  |   moveq #0,d0
    64e8:	+--|-- bra.s 64ee <openAndVerify+0x366>
	}
	return fp;
    64ea:	|  '-> move.l 306(sp),d0
}
    64ee:	'----> movem.l (sp)+,d2-d3/a6
    64f2:	       lea 312(sp),sp
    64f6:	       rts

000064f8 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    64f8:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    64fa:	          move.l #108348,(sp)
	while (* huntAndDestroy) {
    6500:	   ,----- bra.s 652c <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    6502:	,--|----> movea.l (sp),a0
    6504:	|  |      move.l (a0),d0
    6506:	|  |      cmp.l 8(sp),d0
    650a:	|  |  ,-- bne.s 6522 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    650c:	|  |  |   movea.l (sp),a0
    650e:	|  |  |   movea.l (a0),a0
    6510:	|  |  |   move.l 44(a0),d0
    6514:	|  |  |   movea.l (sp),a0
    6516:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    6518:	|  |  |   movea.l 8(sp),a0
    651c:	|  |  |   clr.l 44(a0)
    6520:	|  +--|-- bra.s 652c <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    6522:	|  |  '-> movea.l (sp),a0
    6524:	|  |      move.l (a0),d0
    6526:	|  |      moveq #44,d1
    6528:	|  |      add.l d0,d1
    652a:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    652c:	|  '----> movea.l (sp),a0
    652e:	|         move.l (a0),d0
    6530:	'-------- bne.s 6502 <pauseFunction+0xa>
		}
	}
}
    6532:	          nop
    6534:	          nop
    6536:	          addq.l #4,sp
    6538:	          rts

0000653a <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    653a:	move.l 1a73c <allRunningFunctions>,d0
    6540:	movea.l 4(sp),a0
    6544:	move.l d0,44(a0)
	allRunningFunctions = fun;
    6548:	move.l 4(sp),1a73c <allRunningFunctions>
}
    6550:	nop
    6552:	rts

00006554 <runSludge>:

BOOL runSludge () {
    6554:	                   lea -12(sp),sp
    6558:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    655a:	                   move.l 1a73c <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    6562:	      ,----------- bra.s 65de <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    6564:	   ,--|----------> movea.l 12(sp),a0
    6568:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    656e:	   |  |            movea.l 12(sp),a0
    6572:	   |  |            move.b 56(a0),d0
    6576:	   |  |  ,-------- bne.s 65d8 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    6578:	   |  |  |         movea.l 12(sp),a0
    657c:	   |  |  |         move.l 12(a0),d0
    6580:	   |  |  |  ,----- beq.s 65aa <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    6582:	   |  |  |  |      movea.l 12(sp),a0
    6586:	   |  |  |  |      move.l 12(a0),d0
    658a:	   |  |  |  |  ,-- bpl.s 6596 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    658c:	   |  |  |  |  |   movea.l 12(sp),a0
    6590:	   |  |  |  |  |   clr.l 12(a0)
    6594:	   |  |  +--|--|-- bra.s 65d8 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    6596:	   |  |  |  |  '-> movea.l 12(sp),a0
    659a:	   |  |  |  |      move.l 12(a0),d0
    659e:	   |  |  |  |      subq.l #1,d0
    65a0:	   |  |  |  |      movea.l 12(sp),a0
    65a4:	   |  |  |  |      move.l d0,12(a0)
    65a8:	   |  |  +--|----- bra.s 65d8 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    65aa:	   |  |  |  '----> movea.l 12(sp),a0
    65ae:	   |  |  |         move.w 50(a0),d0
    65b2:	   |  |  |     ,-- beq.s 65c2 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    65b4:	   |  |  |     |   movea.l 12(sp),a0
    65b8:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    65bc:	   |  |  |     |   jsr 7bfa <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    65c2:	   |  |  |     '-> move.l 12(sp),-(sp)
    65c6:	   |  |  |         jsr 4522 <continueFunction>
    65cc:	   |  |  |         addq.l #4,sp
    65ce:	   |  |  |         tst.w d0
    65d0:	   |  |  +-------- bne.s 65d8 <runSludge+0x84>
					return FALSE;
    65d2:	   |  |  |         clr.w d0
    65d4:	,--|--|--|-------- bra.w 6664 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    65d8:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    65de:	|  |  '----------> tst.l 12(sp)
    65e2:	|  '-------------- bne.s 6564 <runSludge+0x10>
	}

	if (loadNow) {
    65e4:	|                  move.l 1a770 <loadNow>,d0
    65ea:	|        ,-------- beq.s 6662 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    65ec:	|        |         movea.l 1a770 <loadNow>,a0
    65f2:	|        |         move.b (a0),d0
    65f4:	|        |         cmpi.b #58,d0
    65f8:	|        |  ,----- bne.s 662c <runSludge+0xd8>
			saveGame (loadNow + 1);
    65fa:	|        |  |      move.l 1a770 <loadNow>,d0
    6600:	|        |  |      addq.l #1,d0
    6602:	|        |  |      move.l d0,-(sp)
    6604:	|        |  |      jsr c48a <saveGame>
    660a:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    660c:	|        |  |      movea.l 1a86e <saverFunc>,a0
    6612:	|        |  |      lea 28(a0),a0
    6616:	|        |  |      pea 1 <_start+0x1>
    661a:	|        |  |      pea 1 <_start+0x1>
    661e:	|        |  |      move.l a0,-(sp)
    6620:	|        |  |      jsr 14de0 <setVariable>
    6626:	|        |  |      lea 12(sp),sp
    662a:	|        |  |  ,-- bra.s 6644 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    662c:	|        |  '--|-> move.l 1a770 <loadNow>,d0
    6632:	|        |     |   move.l d0,-(sp)
    6634:	|        |     |   jsr bfd2 <loadGame>
    663a:	|        |     |   addq.l #4,sp
    663c:	|        |     |   tst.w d0
    663e:	|        |     +-- bne.s 6644 <runSludge+0xf0>
    6640:	|        |     |   clr.w d0
    6642:	+--------|-----|-- bra.s 6664 <runSludge+0x110>
		}
		FreeVec(loadNow);
    6644:	|        |     '-> move.l 1a770 <loadNow>,8(sp)
    664c:	|        |         move.l 1a7a4 <SysBase>,d0
    6652:	|        |         movea.l d0,a6
    6654:	|        |         movea.l 8(sp),a1
    6658:	|        |         jsr -690(a6)
		loadNow = NULL;
    665c:	|        |         clr.l 1a770 <loadNow>
	}

	return TRUE;
    6662:	|        '-------> moveq #1,d0
}
    6664:	'----------------> movea.l (sp)+,a6
    6666:	                   lea 12(sp),sp
    666a:	                   rts

0000666c <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    666c:	movea.l 1a11c <currentEvents>,a0
    6672:	move.l (a0),d0
    6674:	move.l 4(sp),-(sp)
    6678:	move.l d0,-(sp)
    667a:	jsr 8d0 <put2bytes>
    6680:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    6682:	movea.l 1a11c <currentEvents>,a0
    6688:	move.l 4(a0),d0
    668c:	move.l 4(sp),-(sp)
    6690:	move.l d0,-(sp)
    6692:	jsr 8d0 <put2bytes>
    6698:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    669a:	movea.l 1a11c <currentEvents>,a0
    66a0:	move.l 8(a0),d0
    66a4:	move.l 4(sp),-(sp)
    66a8:	move.l d0,-(sp)
    66aa:	jsr 8d0 <put2bytes>
    66b0:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    66b2:	movea.l 1a11c <currentEvents>,a0
    66b8:	move.l 12(a0),d0
    66bc:	move.l 4(sp),-(sp)
    66c0:	move.l d0,-(sp)
    66c2:	jsr 8d0 <put2bytes>
    66c8:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    66ca:	movea.l 1a11c <currentEvents>,a0
    66d0:	move.l 16(a0),d0
    66d4:	move.l 4(sp),-(sp)
    66d8:	move.l d0,-(sp)
    66da:	jsr 8d0 <put2bytes>
    66e0:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    66e2:	movea.l 1a11c <currentEvents>,a0
    66e8:	move.l 20(a0),d0
    66ec:	move.l 4(sp),-(sp)
    66f0:	move.l d0,-(sp)
    66f2:	jsr 8d0 <put2bytes>
    66f8:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    66fa:	movea.l 1a11c <currentEvents>,a0
    6700:	move.l 24(a0),d0
    6704:	move.l 4(sp),-(sp)
    6708:	move.l d0,-(sp)
    670a:	jsr 8d0 <put2bytes>
    6710:	addq.l #8,sp
}
    6712:	nop
    6714:	rts

00006716 <sludgeDisplay>:

void sludgeDisplay () {					
    6716:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    6718:	move.l #14675968,(sp)
	displayCursor();
    671e:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    6724:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    672a:	jsr 298c <CstRestoreScreen>
	drawPeople();
    6730:	jsr 9d6e <drawPeople>
	CstSwapBuffer();
    6736:	jsr 359a <CstSwapBuffer>
}
    673c:	nop
    673e:	addq.l #4,sp
    6740:	rts

00006742 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    6742:	      ,-- bra.s 6762 <stackSetByIndex+0x20>
		vS = vS->next;
    6744:	,-----|-> movea.l 4(sp),a0
    6748:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    674e:	|     +-- bne.s 6762 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    6750:	|     |   pea 188ba <PutChar+0xede>
    6756:	|     |   jsr 16f3a <KPrintF>
    675c:	|     |   addq.l #4,sp
			return FALSE;
    675e:	|     |   clr.w d0
    6760:	|  ,--|-- bra.s 6784 <stackSetByIndex+0x42>
	while (theIndex--) {
    6762:	|  |  '-> move.l 8(sp),d0
    6766:	|  |      move.l d0,d1
    6768:	|  |      subq.l #1,d1
    676a:	|  |      move.l d1,8(sp)
    676e:	|  |      tst.l d0
    6770:	'--|----- bne.s 6744 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    6772:	   |      move.l 4(sp),d0
    6776:	   |      move.l d0,-(sp)
    6778:	   |      move.l 16(sp),-(sp)
    677c:	   |      jsr 149a8 <copyVariable>
    6782:	   |      addq.l #8,sp
}
    6784:	   '----> rts

00006786 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    6786:	             lea -24(sp),sp
    678a:	             move.l a6,-(sp)
    678c:	             move.l 48(sp),d0
    6790:	             move.w d0,d0
    6792:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    6796:	             moveq #58,d0
    6798:	             move.l d0,24(sp)
    679c:	             clr.l 20(sp)
    67a0:	             move.l 1a7a4 <SysBase>,d0
    67a6:	             movea.l d0,a6
    67a8:	             move.l 24(sp),d0
    67ac:	             move.l 20(sp),d1
    67b0:	             jsr -684(a6)
    67b4:	             move.l d0,16(sp)
    67b8:	             move.l 16(sp),d0
    67bc:	             move.l d0,12(sp)
	if(!newFunc) {
    67c0:	         ,-- bne.s 67d6 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    67c2:	         |   pea 188d3 <PutChar+0xef7>
    67c8:	         |   jsr 16f3a <KPrintF>
    67ce:	         |   addq.l #4,sp
		return 0;
    67d0:	         |   moveq #0,d0
    67d2:	,--------|-- bra.w 68ec <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    67d6:	|        '-> move.l 32(sp),d0
    67da:	|            movea.l 12(sp),a0
    67de:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    67e0:	|            move.l 12(sp),-(sp)
    67e4:	|            jsr 5ef6 <loadFunctionCode>
    67ea:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    67ec:	|            movea.l 12(sp),a0
    67f0:	|            move.l 16(a0),d1
    67f4:	|            move.l 36(sp),d0
    67f8:	|            cmp.l d1,d0
    67fa:	|        ,-- beq.s 6810 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    67fc:	|        |   pea 188fc <PutChar+0xf20>
    6802:	|        |   jsr 16f3a <KPrintF>
    6808:	|        |   addq.l #4,sp
		return NULL; 
    680a:	|        |   moveq #0,d0
    680c:	+--------|-- bra.w 68ec <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    6810:	|        '-> movea.l 12(sp),a0
    6814:	|            move.l 16(a0),d1
    6818:	|            movea.l 12(sp),a0
    681c:	|            move.l 8(a0),d0
    6820:	|            cmp.l d1,d0
    6822:	|  ,-------- bge.s 688c <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    6824:	|  |         pea 18918 <PutChar+0xf3c>
    682a:	|  |         jsr 16f3a <KPrintF>
    6830:	|  |         addq.l #4,sp
		return NULL; 
    6832:	|  |         moveq #0,d0
    6834:	+--|-------- bra.w 68ec <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6838:	|  |  ,----> movea.l 44(sp),a0
    683c:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    6840:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    6844:	|  |  |      movea.l 44(sp),a0
    6848:	|  |  |      move.l (a0),d0
    684a:	|  |  |  ,-- bne.s 6860 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    684c:	|  |  |  |   pea 18942 <PutChar+0xf66>
    6852:	|  |  |  |   jsr 16f3a <KPrintF>
    6858:	|  |  |  |   addq.l #4,sp
			return NULL;
    685a:	|  |  |  |   moveq #0,d0
    685c:	+--|--|--|-- bra.w 68ec <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    6860:	|  |  |  '-> movea.l 12(sp),a0
    6864:	|  |  |      move.l 20(a0),d1
    6868:	|  |  |      move.l 36(sp),d0
    686c:	|  |  |      lsl.l #3,d0
    686e:	|  |  |      add.l d0,d1
    6870:	|  |  |      move.l 8(sp),d0
    6874:	|  |  |      move.l d1,-(sp)
    6876:	|  |  |      move.l d0,-(sp)
    6878:	|  |  |      jsr 149a8 <copyVariable>
    687e:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    6880:	|  |  |      move.l 44(sp),-(sp)
    6884:	|  |  |      jsr 14e72 <trimStack>
    688a:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    688c:	|  '--|----> tst.l 36(sp)
    6890:	|     '----- bne.s 6838 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    6892:	|            movea.l 12(sp),a0
    6896:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    689a:	|            movea.l 12(sp),a0
    689e:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    68a2:	|            movea.l 12(sp),a0
    68a6:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    68ac:	|            movea.l 12(sp),a0
    68b0:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    68b6:	|            movea.l 12(sp),a0
    68ba:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    68be:	|            movea.l 12(sp),a0
    68c2:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    68c6:	|            movea.l 12(sp),a0
    68ca:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    68ce:	|            movea.l 12(sp),a0
    68d2:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    68d6:	|            movea.l 12(sp),a0
    68da:	|            clr.l 28(a0)

	restartFunction (newFunc);
    68de:	|            move.l 12(sp),-(sp)
    68e2:	|            jsr 653a <restartFunction>
    68e8:	|            addq.l #4,sp
	return 1;
    68ea:	|            moveq #1,d0
}
    68ec:	'----------> movea.l (sp)+,a6
    68ee:	             lea 24(sp),sp
    68f2:	             rts

000068f4 <unfreezeSubs>:

void unfreezeSubs () {
    68f4:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    68f6:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    68fc:	   ,----- bra.s 691a <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    68fe:	,--|----> movea.l (sp),a0
    6900:	|  |      move.b 56(a0),d0
    6904:	|  |  ,-- beq.s 6914 <unfreezeSubs+0x20>
    6906:	|  |  |   movea.l (sp),a0
    6908:	|  |  |   move.b 56(a0),d0
    690c:	|  |  |   subq.b #1,d0
    690e:	|  |  |   movea.l (sp),a0
    6910:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    6914:	|  |  '-> movea.l (sp),a0
    6916:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    691a:	|  '----> tst.l (sp)
    691c:	'-------- bne.s 68fe <unfreezeSubs+0xa>
	}
}
    691e:	          nop
    6920:	          nop
    6922:	          addq.l #4,sp
    6924:	          rts

00006926 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6926:	clr.w 1a128 <sliceBusy>
}
    692c:	nop
    692e:	rts

00006930 <getNumberedString>:

char * getNumberedString (int value) {
    6930:	       lea -56(sp),sp
    6934:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6938:	       move.w 1a128 <sliceBusy>,d0
    693e:	   ,-- beq.s 6988 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    6940:	   |   move.l 1a7ac <DOSBase>,d0
    6946:	   |   movea.l d0,a6
    6948:	   |   jsr -60(a6)
    694c:	   |   move.l d0,28(sp)
    6950:	   |   move.l 28(sp),d0
    6954:	   |   move.l d0,24(sp)
    6958:	   |   move.l #100749,20(sp)
    6960:	   |   moveq #76,d0
    6962:	   |   move.l d0,16(sp)
    6966:	   |   move.l 1a7ac <DOSBase>,d0
    696c:	   |   movea.l d0,a6
    696e:	   |   move.l 24(sp),d1
    6972:	   |   move.l 20(sp),d2
    6976:	   |   move.l 16(sp),d3
    697a:	   |   jsr -48(a6)
    697e:	   |   move.l d0,12(sp)
		return NULL;
    6982:	   |   moveq #0,d0
    6984:	,--|-- bra.w 6a24 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    6988:	|  '-> move.l 1a78c <bigDataFile>,64(sp)
    6990:	|      move.l 72(sp),d0
    6994:	|      add.l d0,d0
    6996:	|      add.l d0,d0
    6998:	|      move.l d0,d1
    699a:	|      move.l 1a798 <startOfTextIndex>,d0
    69a0:	|      add.l d1,d0
    69a2:	|      move.l d0,60(sp)
    69a6:	|      moveq #-1,d0
    69a8:	|      move.l d0,56(sp)
    69ac:	|      move.l 1a7ac <DOSBase>,d0
    69b2:	|      movea.l d0,a6
    69b4:	|      move.l 64(sp),d1
    69b8:	|      move.l 60(sp),d2
    69bc:	|      move.l 56(sp),d3
    69c0:	|      jsr -66(a6)
    69c4:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    69c8:	|      move.l 1a78c <bigDataFile>,d0
    69ce:	|      move.l d0,-(sp)
    69d0:	|      jsr 718 <get4bytes>
    69d6:	|      addq.l #4,sp
    69d8:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    69dc:	|      move.l 1a78c <bigDataFile>,48(sp)
    69e4:	|      move.l 72(sp),44(sp)
    69ea:	|      moveq #-1,d0
    69ec:	|      move.l d0,40(sp)
    69f0:	|      move.l 1a7ac <DOSBase>,d0
    69f6:	|      movea.l d0,a6
    69f8:	|      move.l 48(sp),d1
    69fc:	|      move.l 44(sp),d2
    6a00:	|      move.l 40(sp),d3
    6a04:	|      jsr -66(a6)
    6a08:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    6a0c:	|      move.l 1a78c <bigDataFile>,d0
    6a12:	|      move.l d0,-(sp)
    6a14:	|      jsr b02 <readString>
    6a1a:	|      addq.l #4,sp
    6a1c:	|      move.l d0,32(sp)
	
	return s;
    6a20:	|      move.l 32(sp),d0
}
    6a24:	'----> movem.l (sp)+,d2-d3/a6
    6a28:	       lea 56(sp),sp
    6a2c:	       rts

00006a2e <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6a2e:	       lea -32(sp),sp
    6a32:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6a36:	       move.w 1a128 <sliceBusy>,d0
    6a3c:	   ,-- beq.s 6a58 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6a3e:	   |   pea 189da <PutChar+0xffe>
    6a44:	   |   pea 189f8 <PutChar+0x101c>
    6a4a:	   |   jsr 16f3a <KPrintF>
    6a50:	   |   addq.l #8,sp
		return 0;
    6a52:	   |   moveq #0,d0
    6a54:	,--|-- bra.w 6aec <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6a58:	|  '-> move.l 1a78c <bigDataFile>,40(sp)
    6a60:	|      move.l 48(sp),d0
    6a64:	|      add.l d0,d0
    6a66:	|      add.l d0,d0
    6a68:	|      move.l d0,d1
    6a6a:	|      move.l 1a794 <startOfDataIndex>,d0
    6a70:	|      add.l d1,d0
    6a72:	|      move.l d0,36(sp)
    6a76:	|      moveq #-1,d0
    6a78:	|      move.l d0,32(sp)
    6a7c:	|      move.l 1a7ac <DOSBase>,d0
    6a82:	|      movea.l d0,a6
    6a84:	|      move.l 40(sp),d1
    6a88:	|      move.l 36(sp),d2
    6a8c:	|      move.l 32(sp),d3
    6a90:	|      jsr -66(a6)
    6a94:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    6a98:	|      move.l 1a78c <bigDataFile>,24(sp)
    6aa0:	|      move.l 1a78c <bigDataFile>,d0
    6aa6:	|      move.l d0,-(sp)
    6aa8:	|      jsr 718 <get4bytes>
    6aae:	|      addq.l #4,sp
    6ab0:	|      move.l d0,20(sp)
    6ab4:	|      clr.l 16(sp)
    6ab8:	|      move.l 1a7ac <DOSBase>,d0
    6abe:	|      movea.l d0,a6
    6ac0:	|      move.l 24(sp),d1
    6ac4:	|      move.l 20(sp),d2
    6ac8:	|      move.l 16(sp),d3
    6acc:	|      jsr -66(a6)
    6ad0:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    6ad4:	|      move.w #1,1a128 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6adc:	|      move.l 1a78c <bigDataFile>,d0
    6ae2:	|      move.l d0,-(sp)
    6ae4:	|      jsr 718 <get4bytes>
    6aea:	|      addq.l #4,sp
}
    6aec:	'----> movem.l (sp)+,d2-d3/a6
    6af0:	       lea 32(sp),sp
    6af4:	       rts

00006af6 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6af6:	       lea -32(sp),sp
    6afa:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6afe:	       move.w 1a128 <sliceBusy>,d0
    6b04:	   ,-- beq.s 6b20 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6b06:	   |   pea 189da <PutChar+0xffe>
    6b0c:	   |   pea 189f8 <PutChar+0x101c>
    6b12:	   |   jsr 16f3a <KPrintF>
    6b18:	   |   addq.l #8,sp
        return FALSE;
    6b1a:	   |   clr.w d0
    6b1c:	,--|-- bra.w 6bac <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    6b20:	|  '-> move.l 1a78c <bigDataFile>,40(sp)
    6b28:	|      move.l 48(sp),d0
    6b2c:	|      add.l d0,d0
    6b2e:	|      add.l d0,d0
    6b30:	|      move.l d0,d1
    6b32:	|      move.l 1a7a0 <startOfObjectIndex>,d0
    6b38:	|      add.l d1,d0
    6b3a:	|      move.l d0,36(sp)
    6b3e:	|      moveq #-1,d0
    6b40:	|      move.l d0,32(sp)
    6b44:	|      move.l 1a7ac <DOSBase>,d0
    6b4a:	|      movea.l d0,a6
    6b4c:	|      move.l 40(sp),d1
    6b50:	|      move.l 36(sp),d2
    6b54:	|      move.l 32(sp),d3
    6b58:	|      jsr -66(a6)
    6b5c:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    6b60:	|      move.l 1a78c <bigDataFile>,24(sp)
    6b68:	|      move.l 1a78c <bigDataFile>,d0
    6b6e:	|      move.l d0,-(sp)
    6b70:	|      jsr 718 <get4bytes>
    6b76:	|      addq.l #4,sp
    6b78:	|      move.l d0,20(sp)
    6b7c:	|      moveq #-1,d0
    6b7e:	|      move.l d0,16(sp)
    6b82:	|      move.l 1a7ac <DOSBase>,d0
    6b88:	|      movea.l d0,a6
    6b8a:	|      move.l 24(sp),d1
    6b8e:	|      move.l 20(sp),d2
    6b92:	|      move.l 16(sp),d3
    6b96:	|      jsr -66(a6)
    6b9a:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    6b9e:	|      move.w #1,1a128 <sliceBusy>
    6ba6:	|      move.w 1a128 <sliceBusy>,d0
}
    6bac:	'----> movem.l (sp)+,d2-d3/a6
    6bb0:	       lea 32(sp),sp
    6bb4:	       rts

00006bb6 <openSubSlice>:

BOOL openSubSlice (int num) {
    6bb6:	       lea -32(sp),sp
    6bba:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    6bbe:	       move.w 1a128 <sliceBusy>,d0
    6bc4:	   ,-- beq.s 6be0 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6bc6:	   |   pea 189da <PutChar+0xffe>
    6bcc:	   |   pea 189f8 <PutChar+0x101c>
    6bd2:	   |   jsr 16f3a <KPrintF>
    6bd8:	   |   addq.l #8,sp
		return FALSE;
    6bda:	   |   clr.w d0
    6bdc:	,--|-- bra.w 6c6c <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    6be0:	|  '-> move.l 1a78c <bigDataFile>,40(sp)
    6be8:	|      move.l 48(sp),d0
    6bec:	|      add.l d0,d0
    6bee:	|      add.l d0,d0
    6bf0:	|      move.l d0,d1
    6bf2:	|      move.l 1a79c <startOfSubIndex>,d0
    6bf8:	|      add.l d1,d0
    6bfa:	|      move.l d0,36(sp)
    6bfe:	|      moveq #-1,d0
    6c00:	|      move.l d0,32(sp)
    6c04:	|      move.l 1a7ac <DOSBase>,d0
    6c0a:	|      movea.l d0,a6
    6c0c:	|      move.l 40(sp),d1
    6c10:	|      move.l 36(sp),d2
    6c14:	|      move.l 32(sp),d3
    6c18:	|      jsr -66(a6)
    6c1c:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    6c20:	|      move.l 1a78c <bigDataFile>,24(sp)
    6c28:	|      move.l 1a78c <bigDataFile>,d0
    6c2e:	|      move.l d0,-(sp)
    6c30:	|      jsr 718 <get4bytes>
    6c36:	|      addq.l #4,sp
    6c38:	|      move.l d0,20(sp)
    6c3c:	|      moveq #-1,d0
    6c3e:	|      move.l d0,16(sp)
    6c42:	|      move.l 1a7ac <DOSBase>,d0
    6c48:	|      movea.l d0,a6
    6c4a:	|      move.l 24(sp),d1
    6c4e:	|      move.l 20(sp),d2
    6c52:	|      move.l 16(sp),d3
    6c56:	|      jsr -66(a6)
    6c5a:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    6c5e:	|      move.w #1,1a128 <sliceBusy>
    6c66:	|      move.w 1a128 <sliceBusy>,d0
}
    6c6c:	'----> movem.l (sp)+,d2-d3/a6
    6c70:	       lea 32(sp),sp
    6c74:	       rts

00006c76 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    6c76:	       lea -180(sp),sp
    6c7a:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    6c7e:	       tst.l 196(sp)
    6c82:	,----- beq.s 6cc2 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    6c84:	|      move.l 196(sp),1a78c <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    6c8c:	|      move.l 196(sp),168(sp)
    6c92:	|      clr.l 164(sp)
    6c96:	|      clr.l 160(sp)
    6c9a:	|      move.l 1a7ac <DOSBase>,d0
    6ca0:	|      movea.l d0,a6
    6ca2:	|      move.l 168(sp),d1
    6ca6:	|      move.l 164(sp),d2
    6caa:	|      move.l 160(sp),d3
    6cae:	|      jsr -66(a6)
    6cb2:	|      move.l d0,156(sp)
    6cb6:	|      move.l 156(sp),d0
    6cba:	|      move.l d0,1a790 <startIndex>
    6cc0:	|  ,-- bra.s 6cfc <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    6cc2:	'--|-> move.l 1a78c <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    6cca:	   |   move.l 196(sp),184(sp)
    6cd0:	   |   move.l 1a790 <startIndex>,d0
    6cd6:	   |   move.l d0,180(sp)
    6cda:	   |   moveq #-1,d0
    6cdc:	   |   move.l d0,176(sp)
    6ce0:	   |   move.l 1a7ac <DOSBase>,d0
    6ce6:	   |   movea.l d0,a6
    6ce8:	   |   move.l 184(sp),d1
    6cec:	   |   move.l 180(sp),d2
    6cf0:	   |   move.l 176(sp),d3
    6cf4:	   |   jsr -66(a6)
    6cf8:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    6cfc:	   '-> clr.w 1a128 <sliceBusy>

	if (skipBefore > numLanguages) {
    6d02:	       move.l 204(sp),d0
    6d06:	       cmp.l 200(sp),d0
    6d0a:	   ,-- bls.s 6d1e <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    6d0c:	   |   pea 18a12 <PutChar+0x1036>
    6d12:	   |   jsr 16f3a <KPrintF>
    6d18:	   |   addq.l #4,sp
		skipBefore = 0;
    6d1a:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    6d1e:	   '-> move.l 200(sp),d0
    6d22:	       sub.l 204(sp),d0
    6d26:	       move.l d0,188(sp)
	while (skipBefore) {
    6d2a:	   ,-- bra.s 6d68 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    6d2c:	,--|-> move.l 196(sp),24(sp)
    6d32:	|  |   move.l 196(sp),-(sp)
    6d36:	|  |   jsr 718 <get4bytes>
    6d3c:	|  |   addq.l #4,sp
    6d3e:	|  |   move.l d0,20(sp)
    6d42:	|  |   moveq #-1,d0
    6d44:	|  |   move.l d0,16(sp)
    6d48:	|  |   move.l 1a7ac <DOSBase>,d0
    6d4e:	|  |   movea.l d0,a6
    6d50:	|  |   move.l 24(sp),d1
    6d54:	|  |   move.l 20(sp),d2
    6d58:	|  |   move.l 16(sp),d3
    6d5c:	|  |   jsr -66(a6)
    6d60:	|  |   move.l d0,12(sp)
		skipBefore --;
    6d64:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    6d68:	|  '-> tst.l 204(sp)
    6d6c:	'----- bne.s 6d2c <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6d6e:	       move.l 196(sp),152(sp)
    6d74:	       clr.l 148(sp)
    6d78:	       clr.l 144(sp)
    6d7c:	       move.l 1a7ac <DOSBase>,d0
    6d82:	       movea.l d0,a6
    6d84:	       move.l 152(sp),d1
    6d88:	       move.l 148(sp),d2
    6d8c:	       move.l 144(sp),d3
    6d90:	       jsr -66(a6)
    6d94:	       move.l d0,140(sp)
    6d98:	       move.l 140(sp),d0
    6d9c:	       addq.l #4,d0
    6d9e:	       move.l d0,1a798 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    6da4:	       move.l 196(sp),136(sp)
    6daa:	       move.l 196(sp),-(sp)
    6dae:	       jsr 718 <get4bytes>
    6db4:	       addq.l #4,sp
    6db6:	       move.l d0,132(sp)
    6dba:	       moveq #-1,d0
    6dbc:	       move.l d0,128(sp)
    6dc0:	       move.l 1a7ac <DOSBase>,d0
    6dc6:	       movea.l d0,a6
    6dc8:	       move.l 136(sp),d1
    6dcc:	       move.l 132(sp),d2
    6dd0:	       move.l 128(sp),d3
    6dd4:	       jsr -66(a6)
    6dd8:	       move.l d0,124(sp)

	while (skipAfter) {
    6ddc:	   ,-- bra.s 6e1a <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    6dde:	,--|-> move.l 196(sp),40(sp)
    6de4:	|  |   move.l 196(sp),-(sp)
    6de8:	|  |   jsr 718 <get4bytes>
    6dee:	|  |   addq.l #4,sp
    6df0:	|  |   move.l d0,36(sp)
    6df4:	|  |   moveq #-1,d0
    6df6:	|  |   move.l d0,32(sp)
    6dfa:	|  |   move.l 1a7ac <DOSBase>,d0
    6e00:	|  |   movea.l d0,a6
    6e02:	|  |   move.l 40(sp),d1
    6e06:	|  |   move.l 36(sp),d2
    6e0a:	|  |   move.l 32(sp),d3
    6e0e:	|  |   jsr -66(a6)
    6e12:	|  |   move.l d0,28(sp)
		skipAfter --;
    6e16:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    6e1a:	|  '-> tst.l 188(sp)
    6e1e:	'----- bne.s 6dde <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6e20:	       move.l 196(sp),120(sp)
    6e26:	       clr.l 116(sp)
    6e2a:	       clr.l 112(sp)
    6e2e:	       move.l 1a7ac <DOSBase>,d0
    6e34:	       movea.l d0,a6
    6e36:	       move.l 120(sp),d1
    6e3a:	       move.l 116(sp),d2
    6e3e:	       move.l 112(sp),d3
    6e42:	       jsr -66(a6)
    6e46:	       move.l d0,108(sp)
    6e4a:	       move.l 108(sp),d0
    6e4e:	       addq.l #4,d0
    6e50:	       move.l d0,1a79c <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    6e56:	       move.l 196(sp),104(sp)
    6e5c:	       move.l 196(sp),-(sp)
    6e60:	       jsr 718 <get4bytes>
    6e66:	       addq.l #4,sp
    6e68:	       move.l d0,100(sp)
    6e6c:	       clr.l 96(sp)
    6e70:	       move.l 1a7ac <DOSBase>,d0
    6e76:	       movea.l d0,a6
    6e78:	       move.l 104(sp),d1
    6e7c:	       move.l 100(sp),d2
    6e80:	       move.l 96(sp),d3
    6e84:	       jsr -66(a6)
    6e88:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6e8c:	       move.l 196(sp),88(sp)
    6e92:	       clr.l 84(sp)
    6e96:	       clr.l 80(sp)
    6e9a:	       move.l 1a7ac <DOSBase>,d0
    6ea0:	       movea.l d0,a6
    6ea2:	       move.l 88(sp),d1
    6ea6:	       move.l 84(sp),d2
    6eaa:	       move.l 80(sp),d3
    6eae:	       jsr -66(a6)
    6eb2:	       move.l d0,76(sp)
    6eb6:	       move.l 76(sp),d0
    6eba:	       addq.l #4,d0
    6ebc:	       move.l d0,1a7a0 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    6ec2:	       move.l 196(sp),72(sp)
    6ec8:	       move.l 196(sp),-(sp)
    6ecc:	       jsr 718 <get4bytes>
    6ed2:	       addq.l #4,sp
    6ed4:	       move.l d0,68(sp)
    6ed8:	       clr.l 64(sp)
    6edc:	       move.l 1a7ac <DOSBase>,d0
    6ee2:	       movea.l d0,a6
    6ee4:	       move.l 72(sp),d1
    6ee8:	       move.l 68(sp),d2
    6eec:	       move.l 64(sp),d3
    6ef0:	       jsr -66(a6)
    6ef4:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    6ef8:	       move.l 196(sp),56(sp)
    6efe:	       clr.l 52(sp)
    6f02:	       clr.l 48(sp)
    6f06:	       move.l 1a7ac <DOSBase>,d0
    6f0c:	       movea.l d0,a6
    6f0e:	       move.l 56(sp),d1
    6f12:	       move.l 52(sp),d2
    6f16:	       move.l 48(sp),d3
    6f1a:	       jsr -66(a6)
    6f1e:	       move.l d0,44(sp)
    6f22:	       move.l 44(sp),d0
    6f26:	       move.l d0,1a794 <startOfDataIndex>
    6f2c:	       nop
    6f2e:	       movem.l (sp)+,d2-d3/a6
    6f32:	       lea 180(sp),sp
    6f36:	       rts

00006f38 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    6f38:	    lea -20(sp),sp
    6f3c:	    move.l a6,-(sp)
    6f3e:	    move.l d7,-(sp)
	APTR vbr = 0;
    6f40:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    6f44:	    move.w #20090,10(sp)
    6f4a:	    move.w #2049,12(sp)
    6f50:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    6f56:	    movea.l 1a7a4 <SysBase>,a0
    6f5c:	    move.w 296(a0),d0
    6f60:	    move.w d0,d0
    6f62:	    andi.l #65535,d0
    6f68:	    moveq #1,d1
    6f6a:	    and.l d1,d0
    6f6c:	,-- beq.s 6f9a <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    6f6e:	|   lea 28(sp),a0
    6f72:	|   lea -18(a0),a0
    6f76:	|   move.l a0,20(sp)
    6f7a:	|   move.l 1a7a4 <SysBase>,d0
    6f80:	|   movea.l d0,a6
    6f82:	|   move.l 20(sp),d7
    6f86:	|   exg d7,a5
    6f88:	|   jsr -30(a6)
    6f8c:	|   exg d7,a5
    6f8e:	|   move.l d0,16(sp)
    6f92:	|   move.l 16(sp),d0
    6f96:	|   move.l d0,24(sp)

	return vbr;
    6f9a:	'-> move.l 24(sp),d0
}
    6f9e:	    move.l (sp)+,d7
    6fa0:	    movea.l (sp)+,a6
    6fa2:	    lea 20(sp),sp
    6fa6:	    rts

00006fa8 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    6fa8:	movea.l 1a7ca <VBR>,a0
    6fae:	lea 108(a0),a0
    6fb2:	move.l 4(sp),(a0)
}
    6fb6:	nop
    6fb8:	rts

00006fba <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    6fba:	movea.l 1a7ca <VBR>,a0
    6fc0:	move.l 108(a0),d0
}
    6fc4:	rts

00006fc6 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    6fc6:	       subq.l #8,sp
    6fc8:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    6fca:	       pea 18a5b <PutChar+0x107f>
    6fd0:	       jsr 16f3a <KPrintF>
    6fd6:	       addq.l #4,sp
	Forbid();
    6fd8:	       move.l 1a7a4 <SysBase>,d0
    6fde:	       movea.l d0,a6
    6fe0:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    6fe4:	       pea 18a73 <PutChar+0x1097>
    6fea:	       jsr 16f3a <KPrintF>
    6ff0:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    6ff2:	       movea.l 1a7a8 <custom>,a0
    6ff8:	       move.w 16(a0),d0
    6ffc:	       move.w d0,1a7c8 <SystemADKCON>
	SystemInts=custom->intenar;
    7002:	       movea.l 1a7a8 <custom>,a0
    7008:	       move.w 28(a0),d0
    700c:	       move.w d0,1a7c4 <SystemInts>
	SystemDMA=custom->dmaconr;
    7012:	       movea.l 1a7a8 <custom>,a0
    7018:	       move.w 2(a0),d0
    701c:	       move.w d0,1a7c6 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    7022:	       movea.l 1a7b0 <GfxBase>,a0
    7028:	       move.l 34(a0),d0
    702c:	       move.l d0,1a7d2 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    7032:	       pea 18a91 <PutChar+0x10b5>
    7038:	       jsr 16f3a <KPrintF>
    703e:	       addq.l #4,sp
	LoadView(0);
    7040:	       clr.l 4(sp)
    7044:	       move.l 1a7b0 <GfxBase>,d0
    704a:	       movea.l d0,a6
    704c:	       movea.l 4(sp),a1
    7050:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    7054:	       pea 18aa7 <PutChar+0x10cb>
    705a:	       jsr 16f3a <KPrintF>
    7060:	       addq.l #4,sp
	WaitTOF();
    7062:	       move.l 1a7b0 <GfxBase>,d0
    7068:	       movea.l d0,a6
    706a:	       jsr -270(a6)
	WaitTOF();
    706e:	       move.l 1a7b0 <GfxBase>,d0
    7074:	       movea.l d0,a6
    7076:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    707a:	       pea 18abc <PutChar+0x10e0>
    7080:	       jsr 16f3a <KPrintF>
    7086:	       addq.l #4,sp
	WaitVbl();
    7088:	       jsr 16e6e <WaitVbl>
	WaitVbl();
    708e:	       jsr 16e6e <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7094:	       pea 18ad1 <PutChar+0x10f5>
    709a:	       jsr 16f3a <KPrintF>
    70a0:	       addq.l #4,sp
	OwnBlitter();
    70a2:	       move.l 1a7b0 <GfxBase>,d0
    70a8:	       movea.l d0,a6
    70aa:	       jsr -456(a6)
	WaitBlit();	
    70ae:	       move.l 1a7b0 <GfxBase>,d0
    70b4:	       movea.l d0,a6
    70b6:	       jsr -228(a6)
	Disable();
    70ba:	       move.l 1a7a4 <SysBase>,d0
    70c0:	       movea.l d0,a6
    70c2:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    70c6:	       pea 18af2 <PutChar+0x1116>
    70cc:	       jsr 16f3a <KPrintF>
    70d2:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    70d4:	       movea.l 1a7a8 <custom>,a0
    70da:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    70e0:	       pea 18b09 <PutChar+0x112d>
    70e6:	       jsr 16f3a <KPrintF>
    70ec:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    70ee:	       clr.l 8(sp)
    70f2:	   ,-- bra.s 7110 <TakeSystem+0x14a>
		custom->color[a]=0;
    70f4:	,--|-> movea.l 1a7a8 <custom>,a0
    70fa:	|  |   move.l 8(sp),d0
    70fe:	|  |   addi.l #192,d0
    7104:	|  |   add.l d0,d0
    7106:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    710c:	|  |   addq.l #1,8(sp)
    7110:	|  '-> moveq #31,d0
    7112:	|      cmp.l 8(sp),d0
    7116:	'----- bge.s 70f4 <TakeSystem+0x12e>

	WaitVbl();
    7118:	       jsr 16e6e <WaitVbl>
	WaitVbl();
    711e:	       jsr 16e6e <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    7124:	       pea 18b2e <PutChar+0x1152>
    712a:	       jsr 16f3a <KPrintF>
    7130:	       addq.l #4,sp
	VBR=GetVBR();
    7132:	       jsr 6f38 <GetVBR>
    7138:	       move.l d0,1a7ca <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    713e:	       jsr 6fba <GetInterruptHandler>
    7144:	       move.l d0,1a7ce <SystemIrq>
}
    714a:	       nop
    714c:	       movea.l (sp)+,a6
    714e:	       addq.l #8,sp
    7150:	       rts

00007152 <FreeSystem>:

void FreeSystem() { 
    7152:	subq.l #4,sp
    7154:	move.l a6,-(sp)
	WaitVbl();
    7156:	jsr 16e6e <WaitVbl>
	WaitBlit();
    715c:	move.l 1a7b0 <GfxBase>,d0
    7162:	movea.l d0,a6
    7164:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    7168:	movea.l 1a7a8 <custom>,a0
    716e:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    7174:	movea.l 1a7a8 <custom>,a0
    717a:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7180:	movea.l 1a7a8 <custom>,a0
    7186:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    718c:	move.l 1a7ce <SystemIrq>,d0
    7192:	move.l d0,-(sp)
    7194:	jsr 6fa8 <SetInterruptHandler>
    719a:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    719c:	movea.l 1a7b0 <GfxBase>,a0
    71a2:	move.l 38(a0),d0
    71a6:	movea.l 1a7a8 <custom>,a0
    71ac:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    71b0:	movea.l 1a7b0 <GfxBase>,a0
    71b6:	move.l 50(a0),d0
    71ba:	movea.l 1a7a8 <custom>,a0
    71c0:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    71c4:	movea.l 1a7a8 <custom>,a0
    71ca:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    71d0:	move.w 1a7c6 <SystemDMA>,d0
    71d6:	movea.l 1a7a8 <custom>,a0
    71dc:	ori.w #-32768,d0
    71e0:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    71e4:	move.w 1a7c8 <SystemADKCON>,d0
    71ea:	movea.l 1a7a8 <custom>,a0
    71f0:	ori.w #-32768,d0
    71f4:	move.w d0,158(a0)

	WaitBlit();	
    71f8:	move.l 1a7b0 <GfxBase>,d0
    71fe:	movea.l d0,a6
    7200:	jsr -228(a6)
	DisownBlitter();
    7204:	move.l 1a7b0 <GfxBase>,d0
    720a:	movea.l d0,a6
    720c:	jsr -462(a6)
	Enable();
    7210:	move.l 1a7a4 <SysBase>,d0
    7216:	movea.l d0,a6
    7218:	jsr -126(a6)

	LoadView(ActiView);
    721c:	move.l 1a7d2 <ActiView>,4(sp)
    7224:	move.l 1a7b0 <GfxBase>,d0
    722a:	movea.l d0,a6
    722c:	movea.l 4(sp),a1
    7230:	jsr -222(a6)
	WaitTOF();
    7234:	move.l 1a7b0 <GfxBase>,d0
    723a:	movea.l d0,a6
    723c:	jsr -270(a6)
	WaitTOF();
    7240:	move.l 1a7b0 <GfxBase>,d0
    7246:	movea.l d0,a6
    7248:	jsr -270(a6)

	Permit();
    724c:	move.l 1a7a4 <SysBase>,d0
    7252:	movea.l d0,a6
    7254:	jsr -138(a6)
}
    7258:	nop
    725a:	movea.l (sp)+,a6
    725c:	addq.l #4,sp
    725e:	rts

00007260 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    7260:	       lea -132(sp),sp
    7264:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    7268:	       clr.l 140(sp)
    726c:	   ,-- bra.s 7272 <main+0x12>
    726e:	,--|-> addq.l #1,140(sp)
    7272:	|  '-> cmpi.l #999,140(sp)
    727a:	'----- ble.s 726e <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    727c:	       movea.w #4,a0
    7280:	       move.l (a0),d0
    7282:	       move.l d0,1a7a4 <SysBase>
	custom = (struct Custom*)0xdff000;	
    7288:	       move.l #14675968,1a7a8 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    7292:	       move.l #101202,136(sp)
    729a:	       clr.l 132(sp)
    729e:	       move.l 1a7a4 <SysBase>,d0
    72a4:	       movea.l d0,a6
    72a6:	       movea.l 136(sp),a1
    72aa:	       move.l 132(sp),d0
    72ae:	       jsr -552(a6)
    72b2:	       move.l d0,128(sp)
    72b6:	       move.l 128(sp),d0
    72ba:	       move.l d0,1a7b0 <GfxBase>
	if (!GfxBase)
    72c0:	       move.l 1a7b0 <GfxBase>,d0
    72c6:	   ,-- bne.s 72dc <main+0x7c>
		Exit(0);
    72c8:	   |   clr.l 124(sp)
    72cc:	   |   move.l 1a7ac <DOSBase>,d0
    72d2:	   |   movea.l d0,a6
    72d4:	   |   move.l 124(sp),d1
    72d8:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    72dc:	   '-> move.l #101219,120(sp)
    72e4:	       clr.l 116(sp)
    72e8:	       move.l 1a7a4 <SysBase>,d0
    72ee:	       movea.l d0,a6
    72f0:	       movea.l 120(sp),a1
    72f4:	       move.l 116(sp),d0
    72f8:	       jsr -552(a6)
    72fc:	       move.l d0,112(sp)
    7300:	       move.l 112(sp),d0
    7304:	       move.l d0,1a7ac <DOSBase>
	if (!DOSBase)
    730a:	       move.l 1a7ac <DOSBase>,d0
    7310:	   ,-- bne.s 7326 <main+0xc6>
		Exit(0);
    7312:	   |   clr.l 108(sp)
    7316:	   |   move.l 1a7ac <DOSBase>,d0
    731c:	   |   movea.l d0,a6
    731e:	   |   move.l 108(sp),d1
    7322:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    7326:	   '-> move.l #101231,104(sp)
    732e:	       clr.l 100(sp)
    7332:	       move.l 1a7a4 <SysBase>,d0
    7338:	       movea.l d0,a6
    733a:	       movea.l 104(sp),a1
    733e:	       move.l 100(sp),d0
    7342:	       jsr -552(a6)
    7346:	       move.l d0,96(sp)
    734a:	       move.l 96(sp),d0
    734e:	       move.l d0,1a7b4 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    7354:	       move.l 1a7b4 <MathIeeeSingBasBase>,d0
    735a:	   ,-- bne.s 7370 <main+0x110>
		Exit(0);	
    735c:	   |   clr.l 92(sp)
    7360:	   |   move.l 1a7ac <DOSBase>,d0
    7366:	   |   movea.l d0,a6
    7368:	   |   move.l 92(sp),d1
    736c:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    7370:	   '-> move.l #101255,88(sp)
    7378:	       clr.l 84(sp)
    737c:	       move.l 1a7a4 <SysBase>,d0
    7382:	       movea.l d0,a6
    7384:	       movea.l 88(sp),a1
    7388:	       move.l 84(sp),d0
    738c:	       jsr -552(a6)
    7390:	       move.l d0,80(sp)
    7394:	       move.l 80(sp),d0
    7398:	       move.l d0,1a7b8 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    739e:	       move.l 1a7b8 <MathIeeeSingTransBase>,d0
    73a4:	   ,-- bne.s 73ba <main+0x15a>
		Exit(0);
    73a6:	   |   clr.l 76(sp)
    73aa:	   |   move.l 1a7ac <DOSBase>,d0
    73b0:	   |   movea.l d0,a6
    73b2:	   |   move.l 76(sp),d1
    73b6:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    73ba:	   '-> move.l #101281,72(sp)
    73c2:	       clr.l 68(sp)
    73c6:	       move.l 1a7a4 <SysBase>,d0
    73cc:	       movea.l d0,a6
    73ce:	       movea.l 72(sp),a1
    73d2:	       move.l 68(sp),d0
    73d6:	       jsr -552(a6)
    73da:	       move.l d0,64(sp)
    73de:	       move.l 64(sp),d0
    73e2:	       move.l d0,1a7c0 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    73e8:	       move.l 1a7c0 <MathIeeeDoubTransBase>,d0
    73ee:	   ,-- bne.s 7404 <main+0x1a4>
		Exit(0);
    73f0:	   |   clr.l 60(sp)
    73f4:	   |   move.l 1a7ac <DOSBase>,d0
    73fa:	   |   movea.l d0,a6
    73fc:	   |   move.l 60(sp),d1
    7400:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    7404:	   '-> move.l #101307,56(sp)
    740c:	       clr.l 52(sp)
    7410:	       move.l 1a7a4 <SysBase>,d0
    7416:	       movea.l d0,a6
    7418:	       movea.l 56(sp),a1
    741c:	       move.l 52(sp),d0
    7420:	       jsr -552(a6)
    7424:	       move.l d0,48(sp)
    7428:	       move.l 48(sp),d0
    742c:	       move.l d0,1a7bc <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    7432:	       move.l 1a7bc <MathIeeeDoubBasBase>,d0
    7438:	   ,-- bne.s 744e <main+0x1ee>
		Exit(0);
    743a:	   |   clr.l 44(sp)
    743e:	   |   move.l 1a7ac <DOSBase>,d0
    7444:	   |   movea.l d0,a6
    7446:	   |   move.l 44(sp),d1
    744a:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 034!\n");
    744e:	   '-> pea 18bd3 <PutChar+0x11f7>
    7454:	       jsr 16f3a <KPrintF>
    745a:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 034!\n", 25);
    745c:	       move.l 1a7ac <DOSBase>,d0
    7462:	       movea.l d0,a6
    7464:	       jsr -60(a6)
    7468:	       move.l d0,40(sp)
    746c:	       move.l 40(sp),d0
    7470:	       move.l d0,36(sp)
    7474:	       move.l #101363,32(sp)
    747c:	       moveq #25,d0
    747e:	       move.l d0,28(sp)
    7482:	       move.l 1a7ac <DOSBase>,d0
    7488:	       movea.l d0,a6
    748a:	       move.l 36(sp),d1
    748e:	       move.l 32(sp),d2
    7492:	       move.l 28(sp),d3
    7496:	       jsr -48(a6)
    749a:	       move.l d0,24(sp)
	Delay(50);
    749e:	       moveq #50,d0
    74a0:	       move.l d0,20(sp)
    74a4:	       move.l 1a7ac <DOSBase>,d0
    74aa:	       movea.l d0,a6
    74ac:	       move.l 20(sp),d1
    74b0:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    74b4:	       pea 18c0c <PutChar+0x1230>
    74ba:	       jsr 16f3a <KPrintF>
    74c0:	       addq.l #4,sp
	TakeSystem();
    74c2:	       jsr 6fc6 <TakeSystem>
	KPrintF("System Taken\n");
    74c8:	       pea 18c1b <PutChar+0x123f>
    74ce:	       jsr 16f3a <KPrintF>
    74d4:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    74d6:	       movea.l 1a7a8 <custom>,a0
    74dc:	       move.w #-30721,150(a0)
	WaitVbl();
    74e2:	       jsr 16e6e <WaitVbl>

	KPrintF("Starting main_sludge\n");
    74e8:	       pea 18c29 <PutChar+0x124d>
    74ee:	       jsr 16f3a <KPrintF>
    74f4:	       addq.l #4,sp
	main_sludge(argc, argv);	
    74f6:	       move.l 152(sp),-(sp)
    74fa:	       move.l 152(sp),-(sp)
    74fe:	       jsr 3df6 <main_sludge>
    7504:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    7506:	       jsr 7152 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    750c:	       move.l 1a7ac <DOSBase>,16(sp)
    7514:	       move.l 1a7a4 <SysBase>,d0
    751a:	       movea.l d0,a6
    751c:	       movea.l 16(sp),a1
    7520:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    7524:	       move.l 1a7b0 <GfxBase>,12(sp)
    752c:	       move.l 1a7a4 <SysBase>,d0
    7532:	       movea.l d0,a6
    7534:	       movea.l 12(sp),a1
    7538:	       jsr -414(a6)
    753c:	       moveq #0,d0
}
    753e:	       movem.l (sp)+,d2-d3/a6
    7542:	       lea 132(sp),sp
    7546:	       rts

00007548 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    7548:	    lea -16(sp),sp
    754c:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    754e:	    moveq #8,d0
    7550:	    move.l d0,16(sp)
    7554:	    clr.l 12(sp)
    7558:	    move.l 1a7a4 <SysBase>,d0
    755e:	    movea.l d0,a6
    7560:	    move.l 16(sp),d0
    7564:	    move.l 12(sp),d1
    7568:	    jsr -684(a6)
    756c:	    move.l d0,8(sp)
    7570:	    move.l 8(sp),d0
    7574:	    move.l d0,4(sp)
	if (!newStat) {
    7578:	,-- bne.s 75a8 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    757a:	|   movea.l 1a12a <nowStatus>,a0
    7580:	|   move.l (a0),d0
    7582:	|   movea.l 4(sp),a0
    7586:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    758a:	|   pea 1867f <PutChar+0xca3>
    7590:	|   jsr b8 <copyString>
    7596:	|   addq.l #4,sp
    7598:	|   movea.l 4(sp),a0
    759c:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    759e:	|   movea.l 1a12a <nowStatus>,a0
    75a4:	|   move.l 4(sp),(a0)
	}
}
    75a8:	'-> nop
    75aa:	    movea.l (sp)+,a6
    75ac:	    lea 16(sp),sp
    75b0:	    rts

000075b2 <clearStatusBar>:

void clearStatusBar () {
    75b2:	       lea -16(sp),sp
    75b6:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    75b8:	       movea.l 1a12a <nowStatus>,a0
    75be:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    75c2:	       movea.l 1a12a <nowStatus>,a0
    75c8:	       moveq #-1,d0
    75ca:	       move.l d0,6(a0)
	while (stat) {
    75ce:	   ,-- bra.s 760e <clearStatusBar+0x5c>
		kill = stat;
    75d0:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    75d6:	|  |   movea.l 16(sp),a0
    75da:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    75e0:	|  |   movea.l 12(sp),a0
    75e4:	|  |   move.l (a0),8(sp)
    75e8:	|  |   move.l 1a7a4 <SysBase>,d0
    75ee:	|  |   movea.l d0,a6
    75f0:	|  |   movea.l 8(sp),a1
    75f4:	|  |   jsr -690(a6)
		FreeVec(kill);
    75f8:	|  |   move.l 12(sp),4(sp)
    75fe:	|  |   move.l 1a7a4 <SysBase>,d0
    7604:	|  |   movea.l d0,a6
    7606:	|  |   movea.l 4(sp),a1
    760a:	|  |   jsr -690(a6)
	while (stat) {
    760e:	|  '-> tst.l 16(sp)
    7612:	'----- bne.s 75d0 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    7614:	       movea.l 1a12a <nowStatus>,a0
    761a:	       clr.l (a0)
}
    761c:	       nop
    761e:	       movea.l (sp)+,a6
    7620:	       lea 16(sp),sp
    7624:	       rts

00007626 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    7626:	clr.l 1a7d6 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    762c:	move.w #-1,1a7da <mainStatus+0x4>
	mainStatus.litStatus = -1;
    7634:	moveq #-1,d0
    7636:	move.l d0,1a7dc <mainStatus+0x6>
	mainStatus.statusX = 10;
    763c:	moveq #10,d0
    763e:	move.l d0,1a7e0 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    7644:	movea.l 1a6fc <winHeight>,a0
    764a:	lea -15(a0),a0
    764e:	move.l a0,d0
    7650:	move.l d0,1a7e4 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    7656:	nop
    7658:	rts

0000765a <killLastStatus>:

void killLastStatus () {
    765a:	    lea -12(sp),sp
    765e:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    7660:	    movea.l 1a12a <nowStatus>,a0
    7666:	    move.l (a0),d0
    7668:	,-- beq.s 76b2 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    766a:	|   movea.l 1a12a <nowStatus>,a0
    7670:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    7674:	|   movea.l 1a12a <nowStatus>,a0
    767a:	|   movea.l 12(sp),a1
    767e:	|   move.l 4(a1),d0
    7682:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    7684:	|   movea.l 12(sp),a0
    7688:	|   move.l (a0),8(sp)
    768c:	|   move.l 1a7a4 <SysBase>,d0
    7692:	|   movea.l d0,a6
    7694:	|   movea.l 8(sp),a1
    7698:	|   jsr -690(a6)
		FreeVec(kill);
    769c:	|   move.l 12(sp),4(sp)
    76a2:	|   move.l 1a7a4 <SysBase>,d0
    76a8:	|   movea.l d0,a6
    76aa:	|   movea.l 4(sp),a1
    76ae:	|   jsr -690(a6)
	}
}
    76b2:	'-> nop
    76b4:	    movea.l (sp)+,a6
    76b6:	    lea 12(sp),sp
    76ba:	    rts

000076bc <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    76bc:	movea.l 1a12a <nowStatus>,a0
    76c2:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    76c8:	movea.l 1a12a <nowStatus>,a0
    76ce:	move.l 8(sp),14(a0)
}
    76d4:	nop
    76d6:	rts

000076d8 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    76d8:	       lea -100(sp),sp
    76dc:	       move.l a6,-(sp)
    76de:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    76e0:	       movea.l 1a12a <nowStatus>,a0
    76e6:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    76ea:	       movea.l 1a12a <nowStatus>,a0
    76f0:	       move.w 4(a0),d0
    76f4:	       move.w d0,d0
    76f6:	       andi.l #65535,d0
    76fc:	       move.l 112(sp),-(sp)
    7700:	       move.l d0,-(sp)
    7702:	       jsr 8d0 <put2bytes>
    7708:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    770a:	       movea.l 1a12a <nowStatus>,a0
    7710:	       move.l 6(a0),d0
    7714:	       move.l d0,d0
    7716:	       movea.w d0,a0
    7718:	       move.l 112(sp),-(sp)
    771c:	       move.l a0,-(sp)
    771e:	       jsr a9c <putSigned>
    7724:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    7726:	       movea.l 1a12a <nowStatus>,a0
    772c:	       move.l 10(a0),d0
    7730:	       move.l 112(sp),-(sp)
    7734:	       move.l d0,-(sp)
    7736:	       jsr 8d0 <put2bytes>
    773c:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    773e:	       movea.l 1a12a <nowStatus>,a0
    7744:	       move.l 14(a0),d0
    7748:	       move.l 112(sp),-(sp)
    774c:	       move.l d0,-(sp)
    774e:	       jsr 8d0 <put2bytes>
    7754:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    7756:	       move.l 112(sp),100(sp)
    775c:	       movea.l 1a12a <nowStatus>,a0
    7762:	       move.l 18(a0),96(sp)
    7768:	       move.l 1a7ac <DOSBase>,d0
    776e:	       movea.l d0,a6
    7770:	       move.l 100(sp),d1
    7774:	       move.l 96(sp),d2
    7778:	       jsr -312(a6)
    777c:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    7780:	       move.l 112(sp),88(sp)
    7786:	       movea.l 1a12a <nowStatus>,a0
    778c:	       move.l 22(a0),84(sp)
    7792:	       move.l 1a7ac <DOSBase>,d0
    7798:	       movea.l d0,a6
    779a:	       move.l 88(sp),d1
    779e:	       move.l 84(sp),d2
    77a2:	       jsr -312(a6)
    77a6:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    77aa:	       move.l 112(sp),76(sp)
    77b0:	       movea.l 1a12a <nowStatus>,a0
    77b6:	       move.l 26(a0),72(sp)
    77bc:	       move.l 1a7ac <DOSBase>,d0
    77c2:	       movea.l d0,a6
    77c4:	       move.l 76(sp),d1
    77c8:	       move.l 72(sp),d2
    77cc:	       jsr -312(a6)
    77d0:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    77d4:	       move.l 112(sp),64(sp)
    77da:	       movea.l 1a12a <nowStatus>,a0
    77e0:	       move.l 30(a0),60(sp)
    77e6:	       move.l 1a7ac <DOSBase>,d0
    77ec:	       movea.l d0,a6
    77ee:	       move.l 64(sp),d1
    77f2:	       move.l 60(sp),d2
    77f6:	       jsr -312(a6)
    77fa:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    77fe:	       move.l 112(sp),52(sp)
    7804:	       movea.l 1a12a <nowStatus>,a0
    780a:	       move.l 34(a0),48(sp)
    7810:	       move.l 1a7ac <DOSBase>,d0
    7816:	       movea.l d0,a6
    7818:	       move.l 52(sp),d1
    781c:	       move.l 48(sp),d2
    7820:	       jsr -312(a6)
    7824:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    7828:	       move.l 112(sp),40(sp)
    782e:	       movea.l 1a12a <nowStatus>,a0
    7834:	       move.l 38(a0),36(sp)
    783a:	       move.l 1a7ac <DOSBase>,d0
    7840:	       movea.l d0,a6
    7842:	       move.l 40(sp),d1
    7846:	       move.l 36(sp),d2
    784a:	       jsr -312(a6)
    784e:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7852:	   ,-- bra.s 7896 <saveStatusBars+0x1be>
		FPutC (fp,1);
    7854:	,--|-> move.l 112(sp),16(sp)
    785a:	|  |   moveq #1,d0
    785c:	|  |   move.l d0,12(sp)
    7860:	|  |   move.l 1a7ac <DOSBase>,d0
    7866:	|  |   movea.l d0,a6
    7868:	|  |   move.l 16(sp),d1
    786c:	|  |   move.l 12(sp),d2
    7870:	|  |   jsr -312(a6)
    7874:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    7878:	|  |   movea.l 104(sp),a0
    787c:	|  |   move.l (a0),d0
    787e:	|  |   move.l 112(sp),-(sp)
    7882:	|  |   move.l d0,-(sp)
    7884:	|  |   jsr bd8 <writeString>
    788a:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    788c:	|  |   movea.l 104(sp),a0
    7890:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    7896:	|  '-> tst.l 104(sp)
    789a:	'----- bne.s 7854 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    789c:	       move.l 112(sp),28(sp)
    78a2:	       clr.l 24(sp)
    78a6:	       move.l 1a7ac <DOSBase>,d0
    78ac:	       movea.l d0,a6
    78ae:	       move.l 28(sp),d1
    78b2:	       move.l 24(sp),d2
    78b6:	       jsr -312(a6)
    78ba:	       move.l d0,20(sp)
}
    78be:	       nop
    78c0:	       move.l (sp)+,d2
    78c2:	       movea.l (sp)+,a6
    78c4:	       lea 100(sp),sp
    78c8:	       rts

000078ca <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    78ca:	movea.l 1a12a <nowStatus>,a0
    78d0:	move.l 4(sp),6(a0)
}
    78d6:	nop
    78d8:	rts

000078da <setStatusBar>:

void setStatusBar (char * txt) {
    78da:	    subq.l #4,sp
    78dc:	    move.l a6,-(sp)
    78de:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    78e0:	    movea.l 1a12a <nowStatus>,a0
    78e6:	    move.l (a0),d0
    78e8:	,-- beq.s 791c <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    78ea:	|   movea.l 1a12a <nowStatus>,a0
    78f0:	|   movea.l (a0),a0
    78f2:	|   move.l (a0),8(sp)
    78f6:	|   move.l 1a7a4 <SysBase>,d0
    78fc:	|   movea.l d0,a6
    78fe:	|   movea.l 8(sp),a1
    7902:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    7906:	|   movea.l 1a12a <nowStatus>,a0
    790c:	|   movea.l (a0),a2
    790e:	|   move.l 16(sp),-(sp)
    7912:	|   jsr b8 <copyString>
    7918:	|   addq.l #4,sp
    791a:	|   move.l d0,(a2)
	}
}
    791c:	'-> nop
    791e:	    movea.l (sp)+,a2
    7920:	    movea.l (sp)+,a6
    7922:	    addq.l #4,sp
    7924:	    rts

00007926 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    7926:	       movea.l 1a12a <nowStatus>,a0
    792c:	       move.l (a0),d0
    792e:	,----- beq.s 793c <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7930:	|      movea.l 1a12a <nowStatus>,a0
    7936:	|      movea.l (a0),a0
    7938:	|      move.l (a0),d0
    793a:	|  ,-- bra.s 7942 <statusBarText+0x1c>
	} else {
		return "";
    793c:	'--|-> move.l #99967,d0
	}
    7942:	   '-> rts

00007944 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    7944:	       lea -28(sp),sp
    7948:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    794c:	       move.l 52(sp),-(sp)
    7950:	       jsr 155d8 <stringWidth>
    7956:	       addq.l #4,sp
    7958:	       asr.l #1,d0
    795a:	       move.l d0,-(sp)
    795c:	       jsr 1736c <__floatsisf>
    7962:	       addq.l #4,sp
    7964:	       move.l d0,d1
    7966:	       move.l 1a142 <cameraZoom>,d0
    796c:	       move.l d0,-(sp)
    796e:	       move.l d1,-(sp)
    7970:	       jsr 17222 <__divsf3>
    7976:	       addq.l #8,sp
    7978:	       move.l d0,-(sp)
    797a:	       jsr 17304 <__fixsfsi>
    7980:	       addq.l #4,sp
    7982:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    7986:	       move.l 56(sp),d0
    798a:	       sub.l 44(sp),d0
    798e:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    7992:	       move.l 56(sp),d0
    7996:	       add.l 44(sp),d0
    799a:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    799e:	       moveq #12,d0
    79a0:	       move.l d0,32(sp)
    79a4:	       clr.l 28(sp)
    79a8:	       move.l 1a7a4 <SysBase>,d0
    79ae:	       movea.l d0,a6
    79b0:	       move.l 32(sp),d0
    79b4:	       move.l 28(sp),d1
    79b8:	       jsr -684(a6)
    79bc:	       move.l d0,24(sp)
    79c0:	       move.l 24(sp),d0
    79c4:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    79c8:	       movea.l 1a800 <speech>,a0
    79ce:	       move.l 4(a0),d0
    79d2:	       movea.l 20(sp),a0
    79d6:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    79da:	       move.l 52(sp),-(sp)
    79de:	       jsr b8 <copyString>
    79e4:	       addq.l #4,sp
    79e6:	       movea.l 20(sp),a0
    79ea:	       move.l d0,(a0)
	newLine -> x = xx1;
    79ec:	       movea.l 20(sp),a0
    79f0:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    79f6:	       movea.l 1a800 <speech>,a0
    79fc:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    7a02:	       moveq #4,d0
    7a04:	       cmp.l 40(sp),d0
    7a08:	   ,-- blt.s 7a2a <addSpeechLine+0xe6>
    7a0a:	   |   movea.l 60(sp),a0
    7a0e:	   |   move.l (a0),d1
    7a10:	   |   moveq #5,d0
    7a12:	   |   sub.l 40(sp),d0
    7a16:	   |   cmp.l d1,d0
    7a18:	   +-- ble.s 7a2a <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7a1a:	   |   moveq #5,d0
    7a1c:	   |   sub.l 40(sp),d0
    7a20:	   |   movea.l 60(sp),a0
    7a24:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    7a26:	,--|-- bra.w 7b56 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7a2a:	|  '-> move.l 36(sp),-(sp)
    7a2e:	|      jsr 1736c <__floatsisf>
    7a34:	|      addq.l #4,sp
    7a36:	|      move.l d0,d2
    7a38:	|      move.l 1a6f8 <winWidth>,d0
    7a3e:	|      move.l d0,-(sp)
    7a40:	|      jsr 17394 <__floatunsisf>
    7a46:	|      addq.l #4,sp
    7a48:	|      move.l d0,d1
    7a4a:	|      move.l 1a142 <cameraZoom>,d0
    7a50:	|      move.l d0,-(sp)
    7a52:	|      move.l d1,-(sp)
    7a54:	|      jsr 17222 <__divsf3>
    7a5a:	|      addq.l #8,sp
    7a5c:	|      move.l #1084227584,-(sp)
    7a62:	|      move.l d0,-(sp)
    7a64:	|      jsr 17660 <__subsf3>
    7a6a:	|      addq.l #8,sp
    7a6c:	|      move.l d0,-(sp)
    7a6e:	|      move.l d2,-(sp)
    7a70:	|      jsr 17454 <__gesf2>
    7a76:	|      addq.l #8,sp
    7a78:	|      tst.l d0
    7a7a:	|  ,-- bge.s 7a80 <addSpeechLine+0x13c>
}
    7a7c:	+--|-- bra.w 7b56 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7a80:	|  '-> movea.l 60(sp),a0
    7a84:	|      move.l (a0),d0
    7a86:	|      move.l d0,-(sp)
    7a88:	|      jsr 1736c <__floatsisf>
    7a8e:	|      addq.l #4,sp
    7a90:	|      move.l d0,-(sp)
    7a92:	|      jsr 1728e <__extendsfdf2>
    7a98:	|      addq.l #4,sp
    7a9a:	|      move.l d0,d4
    7a9c:	|      move.l d1,d5
    7a9e:	|      move.l 1a6f8 <winWidth>,d0
    7aa4:	|      move.l d0,-(sp)
    7aa6:	|      jsr 17394 <__floatunsisf>
    7aac:	|      addq.l #4,sp
    7aae:	|      move.l d0,d1
    7ab0:	|      move.l 1a142 <cameraZoom>,d0
    7ab6:	|      move.l d0,-(sp)
    7ab8:	|      move.l d1,-(sp)
    7aba:	|      jsr 17222 <__divsf3>
    7ac0:	|      addq.l #8,sp
    7ac2:	|      move.l d0,-(sp)
    7ac4:	|      jsr 1728e <__extendsfdf2>
    7aca:	|      addq.l #4,sp
    7acc:	|      clr.l -(sp)
    7ace:	|      move.l #1075052544,-(sp)
    7ad4:	|      move.l d1,-(sp)
    7ad6:	|      move.l d0,-(sp)
    7ad8:	|      jsr 175fe <__subdf3>
    7ade:	|      lea 16(sp),sp
    7ae2:	|      move.l d0,d2
    7ae4:	|      move.l d1,d3
    7ae6:	|      move.l 36(sp),-(sp)
    7aea:	|      jsr 1732c <__floatsidf>
    7af0:	|      addq.l #4,sp
    7af2:	|      move.l d1,-(sp)
    7af4:	|      move.l d0,-(sp)
    7af6:	|      move.l d3,-(sp)
    7af8:	|      move.l d2,-(sp)
    7afa:	|      jsr 175fe <__subdf3>
    7b00:	|      lea 16(sp),sp
    7b04:	|      move.l d1,-(sp)
    7b06:	|      move.l d0,-(sp)
    7b08:	|      move.l d5,-(sp)
    7b0a:	|      move.l d4,-(sp)
    7b0c:	|      jsr 1748a <__gtdf2>
    7b12:	|      lea 16(sp),sp
    7b16:	|      tst.l d0
    7b18:	|  ,-- bgt.s 7b1c <addSpeechLine+0x1d8>
}
    7b1a:	+--|-- bra.s 7b56 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7b1c:	|  '-> move.l 1a6f8 <winWidth>,d0
    7b22:	|      move.l d0,-(sp)
    7b24:	|      jsr 17394 <__floatunsisf>
    7b2a:	|      addq.l #4,sp
    7b2c:	|      move.l d0,d1
    7b2e:	|      move.l 1a142 <cameraZoom>,d0
    7b34:	|      move.l d0,-(sp)
    7b36:	|      move.l d1,-(sp)
    7b38:	|      jsr 17222 <__divsf3>
    7b3e:	|      addq.l #8,sp
    7b40:	|      move.l d0,-(sp)
    7b42:	|      jsr 17304 <__fixsfsi>
    7b48:	|      addq.l #4,sp
    7b4a:	|      subq.l #5,d0
    7b4c:	|      sub.l 36(sp),d0
    7b50:	|      movea.l 60(sp),a0
    7b54:	|      move.l d0,(a0)
}
    7b56:	'----> nop
    7b58:	       movem.l (sp)+,d2-d5/a6
    7b5c:	       lea 28(sp),sp
    7b60:	       rts

00007b62 <initSpeech>:


void initSpeech () {
    7b62:	       lea -12(sp),sp
    7b66:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    7b68:	       moveq #20,d0
    7b6a:	       move.l d0,12(sp)
    7b6e:	       clr.l 8(sp)
    7b72:	       move.l 1a7a4 <SysBase>,d0
    7b78:	       movea.l d0,a6
    7b7a:	       move.l 12(sp),d0
    7b7e:	       move.l 8(sp),d1
    7b82:	       jsr -684(a6)
    7b86:	       move.l d0,4(sp)
    7b8a:	       move.l 4(sp),d0
    7b8e:	       move.l d0,1a800 <speech>
	if (speech) {
    7b94:	       move.l 1a800 <speech>,d0
    7b9a:	,----- beq.s 7bc6 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    7b9c:	|      movea.l 1a800 <speech>,a0
    7ba2:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    7ba4:	|      movea.l 1a800 <speech>,a0
    7baa:	|      clr.l 4(a0)
		speech -> speechY = 0;
    7bae:	|      movea.l 1a800 <speech>,a0
    7bb4:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    7bb8:	|      movea.l 1a800 <speech>,a0
    7bbe:	|      moveq #-1,d0
    7bc0:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    7bc4:	|  ,-- bra.s 7bd4 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    7bc6:	'--|-> pea 18c66 <PutChar+0x128a>
    7bcc:	   |   jsr 16f3a <KPrintF>
    7bd2:	   |   addq.l #4,sp
}
    7bd4:	   '-> nop
    7bd6:	       movea.l (sp)+,a6
    7bd8:	       lea 12(sp),sp
    7bdc:	       rts

00007bde <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    7bde:	       movea.l 1a800 <speech>,a0
    7be4:	       move.l 4(a0),d0
    7be8:	,----- beq.s 7bf6 <isThereAnySpeechGoingOn+0x18>
    7bea:	|      movea.l 1a800 <speech>,a0
    7bf0:	|      move.l 16(a0),d0
    7bf4:	|  ,-- bra.s 7bf8 <isThereAnySpeechGoingOn+0x1a>
    7bf6:	'--|-> moveq #-1,d0
}
    7bf8:	   '-> rts

00007bfa <killAllSpeech>:

void killAllSpeech () {
    7bfa:	       lea -12(sp),sp
    7bfe:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    7c00:	       movea.l 1a800 <speech>,a0
    7c06:	       move.l 12(a0),d0
    7c0a:	       moveq #-1,d1
    7c0c:	       cmp.l d0,d1
    7c0e:	   ,-- beq.s 7c1c <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    7c10:	   |   movea.l 1a800 <speech>,a0
    7c16:	   |   moveq #-1,d0
    7c18:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    7c1c:	   '-> movea.l 1a800 <speech>,a0
    7c22:	       move.l (a0),d0
    7c24:	,----- beq.w 7cb0 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    7c28:	|      movea.l 1a800 <speech>,a0
    7c2e:	|      move.l (a0),d1
    7c30:	|      lea -132(sp),sp
    7c34:	|      move.l sp,d0
    7c36:	|      movea.w #132,a0
    7c3a:	|      move.l a0,-(sp)
    7c3c:	|      move.l d1,-(sp)
    7c3e:	|      move.l d0,-(sp)
    7c40:	|      jsr 16eee <memcpy>
    7c46:	|      lea 12(sp),sp
    7c4a:	|      jsr a868 <makeSilent>
    7c50:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    7c54:	|      movea.l 1a800 <speech>,a0
    7c5a:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    7c5c:	+----- bra.s 7cb0 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    7c5e:	|  ,-> movea.l 1a800 <speech>,a0
    7c64:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    7c6a:	|  |   movea.l 1a800 <speech>,a0
    7c70:	|  |   movea.l 4(a0),a1
    7c74:	|  |   movea.l 1a800 <speech>,a0
    7c7a:	|  |   move.l 4(a1),d0
    7c7e:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    7c82:	|  |   movea.l 12(sp),a0
    7c86:	|  |   move.l (a0),8(sp)
    7c8a:	|  |   move.l 1a7a4 <SysBase>,d0
    7c90:	|  |   movea.l d0,a6
    7c92:	|  |   movea.l 8(sp),a1
    7c96:	|  |   jsr -690(a6)
		FreeVec(killMe);
    7c9a:	|  |   move.l 12(sp),4(sp)
    7ca0:	|  |   move.l 1a7a4 <SysBase>,d0
    7ca6:	|  |   movea.l d0,a6
    7ca8:	|  |   movea.l 4(sp),a1
    7cac:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    7cb0:	'--|-> movea.l 1a800 <speech>,a0
    7cb6:	   |   move.l 4(a0),d0
    7cba:	   '-- bne.s 7c5e <killAllSpeech+0x64>
	}
}
    7cbc:	       nop
    7cbe:	       nop
    7cc0:	       movea.l (sp)+,a6
    7cc2:	       lea 12(sp),sp
    7cc6:	       rts

00007cc8 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    7cc8:	pea 2 <_start+0x2>
    7ccc:	move.l 8(sp),-(sp)
    7cd0:	jsr 7e28 <setFrames>
    7cd6:	addq.l #8,sp
}
    7cd8:	nop
    7cda:	rts

00007cdc <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    7cdc:	       lea -52(sp),sp
    7ce0:	       move.l a6,-(sp)
    7ce2:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    7ce4:	       movea.l 64(sp),a0
    7ce8:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    7cee:	       move.l 1a12e <speechSpeed>,d0
    7cf4:	       move.l 68(sp),-(sp)
    7cf8:	       move.l d0,-(sp)
    7cfa:	       jsr a46 <putFloat>
    7d00:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    7d02:	       movea.l 64(sp),a0
    7d06:	       move.l 8(a0),d0
    7d0a:	       move.l 68(sp),-(sp)
    7d0e:	       move.l d0,-(sp)
    7d10:	       jsr 8d0 <put2bytes>
    7d16:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    7d18:	       movea.l 64(sp),a0
    7d1c:	       move.l 16(a0),d0
    7d20:	       move.l 68(sp),-(sp)
    7d24:	       move.l d0,-(sp)
    7d26:	       jsr 8d0 <put2bytes>
    7d2c:	       addq.l #8,sp
		if (sS -> currentTalker) {
    7d2e:	       movea.l 64(sp),a0
    7d32:	       move.l (a0),d0
    7d34:	   ,-- beq.s 7d78 <saveSpeech+0x9c>
			FPutC (fp, 1);
    7d36:	   |   move.l 68(sp),40(sp)
    7d3c:	   |   moveq #1,d0
    7d3e:	   |   move.l d0,36(sp)
    7d42:	   |   move.l 1a7ac <DOSBase>,d0
    7d48:	   |   movea.l d0,a6
    7d4a:	   |   move.l 40(sp),d1
    7d4e:	   |   move.l 36(sp),d2
    7d52:	   |   jsr -312(a6)
    7d56:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    7d5a:	   |   movea.l 64(sp),a0
    7d5e:	   |   movea.l (a0),a0
    7d60:	   |   movea.l 114(a0),a0
    7d64:	   |   move.l 4(a0),d0
    7d68:	   |   move.l 68(sp),-(sp)
    7d6c:	   |   move.l d0,-(sp)
    7d6e:	   |   jsr 8d0 <put2bytes>
    7d74:	   |   addq.l #8,sp
    7d76:	,--|-- bra.s 7df4 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    7d78:	|  '-> move.l 68(sp),52(sp)
    7d7e:	|      clr.l 48(sp)
    7d82:	|      move.l 1a7ac <DOSBase>,d0
    7d88:	|      movea.l d0,a6
    7d8a:	|      move.l 52(sp),d1
    7d8e:	|      move.l 48(sp),d2
    7d92:	|      jsr -312(a6)
    7d96:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    7d9a:	+----- bra.s 7df4 <saveSpeech+0x118>
			FPutC (fp, 1);
    7d9c:	|  ,-> move.l 68(sp),16(sp)
    7da2:	|  |   moveq #1,d0
    7da4:	|  |   move.l d0,12(sp)
    7da8:	|  |   move.l 1a7ac <DOSBase>,d0
    7dae:	|  |   movea.l d0,a6
    7db0:	|  |   move.l 16(sp),d1
    7db4:	|  |   move.l 12(sp),d2
    7db8:	|  |   jsr -312(a6)
    7dbc:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    7dc0:	|  |   movea.l 56(sp),a0
    7dc4:	|  |   move.l (a0),d0
    7dc6:	|  |   move.l 68(sp),-(sp)
    7dca:	|  |   move.l d0,-(sp)
    7dcc:	|  |   jsr bd8 <writeString>
    7dd2:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    7dd4:	|  |   movea.l 56(sp),a0
    7dd8:	|  |   move.l 8(a0),d0
    7ddc:	|  |   move.l 68(sp),-(sp)
    7de0:	|  |   move.l d0,-(sp)
    7de2:	|  |   jsr 8d0 <put2bytes>
    7de8:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    7dea:	|  |   movea.l 56(sp),a0
    7dee:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    7df4:	'--|-> tst.l 56(sp)
    7df8:	   '-- bne.s 7d9c <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    7dfa:	       move.l 68(sp),28(sp)
    7e00:	       clr.l 24(sp)
    7e04:	       move.l 1a7ac <DOSBase>,d0
    7e0a:	       movea.l d0,a6
    7e0c:	       move.l 28(sp),d1
    7e10:	       move.l 24(sp),d2
    7e14:	       jsr -312(a6)
    7e18:	       move.l d0,20(sp)
}
    7e1c:	       nop
    7e1e:	       move.l (sp)+,d2
    7e20:	       movea.l (sp)+,a6
    7e22:	       lea 52(sp),sp
    7e26:	       rts

00007e28 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    7e28:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    7e2a:	movea.l 8(sp),a0
    7e2e:	movea.l 80(a0),a0
    7e32:	move.l (a0),d2
    7e34:	movea.l 8(sp),a0
    7e38:	movea.l 80(a0),a0
    7e3c:	move.l 4(a0),d0
    7e40:	move.l 12(sp),-(sp)
    7e44:	move.l d0,-(sp)
    7e46:	jsr 178c6 <__mulsi3>
    7e4c:	addq.l #8,sp
    7e4e:	move.l d0,d1
    7e50:	movea.l 8(sp),a0
    7e54:	move.l 106(a0),d0
    7e58:	add.l d1,d0
    7e5a:	add.l d0,d0
    7e5c:	add.l d0,d0
    7e5e:	movea.l d2,a0
    7e60:	adda.l d0,a0
    7e62:	move.l (a0),d0
    7e64:	movea.l 8(sp),a0
    7e68:	move.l d0,72(a0)
}
    7e6c:	nop
    7e6e:	move.l (sp)+,d2
    7e70:	rts

00007e72 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    7e72:	       lea -20(sp),sp
    7e76:	       move.l d2,-(sp)
    7e78:	       move.l 40(sp),d0
    7e7c:	       move.w d0,d0
    7e7e:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    7e82:	       movea.l 1a800 <speech>,a0
    7e88:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    7e8e:	       move.l 32(sp),-(sp)
    7e92:	       jsr a352 <findPerson>
    7e98:	       addq.l #4,sp
    7e9a:	       move.l d0,16(sp)
    if (thisPerson) {
    7e9e:	   ,-- beq.s 7ec4 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    7ea0:	   |   movea.w 6(sp),a0
    7ea4:	   |   move.l a0,-(sp)
    7ea6:	   |   move.l 40(sp),-(sp)
    7eaa:	   |   move.l 24(sp),-(sp)
    7eae:	   |   move.l 40(sp),-(sp)
    7eb2:	   |   jsr 7f8a <wrapSpeechPerson>
    7eb8:	   |   lea 16(sp),sp
    7ebc:	   |   move.l d0,20(sp)
    7ec0:	,--|-- bra.w 7f7e <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    7ec4:	|  '-> move.l 32(sp),-(sp)
    7ec8:	|      jsr 15738 <getRegionForObject>
    7ece:	|      addq.l #4,sp
    7ed0:	|      move.l d0,12(sp)
        if (thisRegion) {
    7ed4:	|  ,-- beq.s 7f40 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    7ed6:	|  |   movea.l 12(sp),a0
    7eda:	|  |   movea.l 28(a0),a0
    7ede:	|  |   move.l 28(a0),d0
    7ee2:	|  |   movea.l 12(sp),a0
    7ee6:	|  |   movea.l 4(a0),a1
    7eea:	|  |   movea.l 12(sp),a0
    7eee:	|  |   movea.l 28(a0),a0
    7ef2:	|  |   move.l 20(a0),d1
    7ef6:	|  |   movea.l a1,a0
    7ef8:	|  |   suba.l d1,a0
    7efa:	|  |   move.l 1a862 <cameraY>,d1
    7f00:	|  |   movea.l a0,a1
    7f02:	|  |   suba.l d1,a1
    7f04:	|  |   movea.l 12(sp),a0
    7f08:	|  |   move.l (a0),d2
    7f0a:	|  |   movea.l 12(sp),a0
    7f0e:	|  |   move.l 8(a0),d1
    7f12:	|  |   add.l d2,d1
    7f14:	|  |   move.l d1,d2
    7f16:	|  |   asr.l #1,d2
    7f18:	|  |   move.l 1a85e <cameraX>,d1
    7f1e:	|  |   movea.l d2,a0
    7f20:	|  |   suba.l d1,a0
    7f22:	|  |   move.l 36(sp),-(sp)
    7f26:	|  |   move.l d0,-(sp)
    7f28:	|  |   move.l a1,-(sp)
    7f2a:	|  |   move.l a0,-(sp)
    7f2c:	|  |   move.l 44(sp),-(sp)
    7f30:	|  |   jsr 80a8 <wrapSpeechXY>
    7f36:	|  |   lea 20(sp),sp
    7f3a:	|  |   move.l d0,20(sp)
    7f3e:	+--|-- bra.s 7f7e <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    7f40:	|  '-> move.l 32(sp),-(sp)
    7f44:	|      jsr d254 <findObjectType>
    7f4a:	|      addq.l #4,sp
    7f4c:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    7f50:	|      movea.l 8(sp),a0
    7f54:	|      move.l 28(a0),d1
    7f58:	|      move.l 1a6f8 <winWidth>,d0
    7f5e:	|      lsr.l #1,d0
    7f60:	|      move.l 36(sp),-(sp)
    7f64:	|      move.l d1,-(sp)
    7f66:	|      pea a <_start+0xa>
    7f6a:	|      move.l d0,-(sp)
    7f6c:	|      move.l 44(sp),-(sp)
    7f70:	|      jsr 80a8 <wrapSpeechXY>
    7f76:	|      lea 20(sp),sp
    7f7a:	|      move.l d0,20(sp)
        }
    }
    return i;
    7f7e:	'----> move.l 20(sp),d0
}
    7f82:	       move.l (sp)+,d2
    7f84:	       lea 20(sp),sp
    7f88:	       rts

00007f8a <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    7f8a:	    subq.l #8,sp
    7f8c:	    movem.l d2-d4,-(sp)
    7f90:	    move.l 36(sp),d0
    7f94:	    move.w d0,d0
    7f96:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    7f9a:	    movea.l 28(sp),a0
    7f9e:	    movea.l 114(a0),a0
    7fa2:	    move.l 28(a0),d2
    7fa6:	    movea.l 28(sp),a0
    7faa:	    move.l 4(a0),d3
    7fae:	    move.l 1a862 <cameraY>,d0
    7fb4:	    move.l d0,-(sp)
    7fb6:	    jsr 1736c <__floatsisf>
    7fbc:	    addq.l #4,sp
    7fbe:	    move.l d0,-(sp)
    7fc0:	    move.l d3,-(sp)
    7fc2:	    jsr 17660 <__subsf3>
    7fc8:	    addq.l #8,sp
    7fca:	    move.l d0,d3
    7fcc:	    movea.l 28(sp),a0
    7fd0:	    move.l 32(a0),d4
    7fd4:	    movea.l 28(sp),a0
    7fd8:	    move.l 20(a0),d1
    7fdc:	    movea.l 28(sp),a0
    7fe0:	    move.l 24(a0),d0
    7fe4:	    sub.l d0,d1
    7fe6:	    move.l d1,-(sp)
    7fe8:	    jsr 1736c <__floatsisf>
    7fee:	    addq.l #4,sp
    7ff0:	    move.l d0,-(sp)
    7ff2:	    move.l d4,-(sp)
    7ff4:	    jsr 1741e <__mulsf3>
    7ffa:	    addq.l #8,sp
    7ffc:	    move.l d0,-(sp)
    7ffe:	    move.l d3,-(sp)
    8000:	    jsr 17660 <__subsf3>
    8006:	    addq.l #8,sp
    8008:	    move.l d0,d3
    800a:	    movea.l 28(sp),a0
    800e:	    movea.l 114(a0),a0
    8012:	    move.l 20(a0),d0
    8016:	    move.l d0,-(sp)
    8018:	    jsr 1736c <__floatsisf>
    801e:	    addq.l #4,sp
    8020:	    move.l d0,-(sp)
    8022:	    move.l d3,-(sp)
    8024:	    jsr 17660 <__subsf3>
    802a:	    addq.l #8,sp
    802c:	    move.l d0,-(sp)
    802e:	    jsr 17304 <__fixsfsi>
    8034:	    addq.l #4,sp
    8036:	    move.l d0,d4
    8038:	    movea.l 28(sp),a0
    803c:	    move.l (a0),d3
    803e:	    move.l 1a85e <cameraX>,d0
    8044:	    move.l d0,-(sp)
    8046:	    jsr 1736c <__floatsisf>
    804c:	    addq.l #4,sp
    804e:	    move.l d0,-(sp)
    8050:	    move.l d3,-(sp)
    8052:	    jsr 17660 <__subsf3>
    8058:	    addq.l #8,sp
    805a:	    move.l d0,-(sp)
    805c:	    jsr 17304 <__fixsfsi>
    8062:	    addq.l #4,sp
    8064:	    move.l 32(sp),-(sp)
    8068:	    move.l d2,-(sp)
    806a:	    move.l d4,-(sp)
    806c:	    move.l d0,-(sp)
    806e:	    move.l 40(sp),-(sp)
    8072:	    jsr 80a8 <wrapSpeechXY>
    8078:	    lea 20(sp),sp
    807c:	    move.l d0,16(sp)
	if (animPerson) {
    8080:	    tst.w 14(sp)
    8084:	,-- beq.s 809c <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    8086:	|   move.l 28(sp),-(sp)
    808a:	|   jsr 7cc8 <makeTalker>
    8090:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    8092:	|   movea.l 1a800 <speech>,a0
    8098:	|   move.l 28(sp),(a0)
	}
	return i;
    809c:	'-> move.l 16(sp),d0
}
    80a0:	    movem.l (sp)+,d2-d4
    80a4:	    addq.l #8,sp
    80a6:	    rts

000080a8 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    80a8:	                   lea -16(sp),sp
    80ac:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    80b0:	                   clr.l 16(sp)
    killAllSpeech();
    80b4:	                   jsr 7bfa <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    80ba:	                   move.l 36(sp),-(sp)
    80be:	                   jsr 139da <strlen>
    80c4:	                   addq.l #4,sp
    80c6:	                   movea.l d0,a0
    80c8:	                   lea 20(a0),a0
    80cc:	                   move.l a0,-(sp)
    80ce:	                   jsr 17394 <__floatunsisf>
    80d4:	                   addq.l #4,sp
    80d6:	                   move.l d0,d1
    80d8:	                   move.l 1a12e <speechSpeed>,d0
    80de:	                   move.l d0,-(sp)
    80e0:	                   move.l d1,-(sp)
    80e2:	                   jsr 1741e <__mulsf3>
    80e8:	                   addq.l #8,sp
    80ea:	                   move.l d0,-(sp)
    80ec:	                   jsr 17304 <__fixsfsi>
    80f2:	                   addq.l #4,sp
    80f4:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    80f8:	               ,-- bgt.s 8100 <wrapSpeechXY+0x58>
    80fa:	               |   moveq #1,d0
    80fc:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    8100:	               '-> moveq #-1,d1
    8102:	                   cmp.l 52(sp),d1
    8106:	               ,-- beq.s 8146 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    8108:	               |   move.l 1a872 <speechMode>,d0
    810e:	               +-- ble.s 8146 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    8110:	               |   clr.l -(sp)
    8112:	               |   move.l 56(sp),-(sp)
    8116:	               |   jsr cf1e <startSound>
    811c:	               |   addq.l #8,sp
    811e:	               |   tst.w d0
    8120:	               +-- beq.s 8146 <wrapSpeechXY+0x9e>
                speechTime = -10;
    8122:	               |   moveq #-10,d0
    8124:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    8128:	               |   movea.l 1a800 <speech>,a0
    812e:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    8134:	               |   move.l 1a872 <speechMode>,d0
    813a:	               |   moveq #2,d1
    813c:	               |   cmp.l d0,d1
    813e:	               +-- bne.s 8146 <wrapSpeechXY+0x9e>
    8140:	               |   moveq #-10,d0
    8142:	,--------------|-- bra.w 83cc <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    8146:	|              '-> movea.l 1a800 <speech>,a0
    814c:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    8152:	|     ,----------- bra.w 8206 <wrapSpeechXY+0x15e>
        a = wrap;
    8156:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    815c:	|  |  |        ,-- bra.s 816c <wrapSpeechXY+0xc4>
            a--;
    815e:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    8162:	|  |  |  |     +-- bne.s 816c <wrapSpeechXY+0xc4>
                a = wrap;
    8164:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    816a:	|  |  |  |  ,--|-- bra.s 817e <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    816c:	|  |  |  |  |  '-> move.l 28(sp),d0
    8170:	|  |  |  |  |      movea.l 36(sp),a0
    8174:	|  |  |  |  |      adda.l d0,a0
    8176:	|  |  |  |  |      move.b (a0),d0
    8178:	|  |  |  |  |      cmpi.b #32,d0
    817c:	|  |  |  '--|----- bne.s 815e <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    817e:	|  |  |     '----> move.l 28(sp),d0
    8182:	|  |  |            movea.l 36(sp),a0
    8186:	|  |  |            adda.l d0,a0
    8188:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    818a:	|  |  |            lea 16(sp),a0
    818e:	|  |  |            move.l a0,-(sp)
    8190:	|  |  |            move.l 44(sp),-(sp)
    8194:	|  |  |            move.l 44(sp),-(sp)
    8198:	|  |  |            jsr 7944 <addSpeechLine>
    819e:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    81a2:	|  |  |            move.l 28(sp),d0
    81a6:	|  |  |            movea.l 36(sp),a0
    81aa:	|  |  |            adda.l d0,a0
    81ac:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    81b0:	|  |  |            move.l 28(sp),d0
    81b4:	|  |  |            addq.l #1,d0
    81b6:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    81ba:	|  |  |            move.l 44(sp),-(sp)
    81be:	|  |  |            jsr 1736c <__floatsisf>
    81c4:	|  |  |            addq.l #4,sp
    81c6:	|  |  |            move.l d0,d2
    81c8:	|  |  |            move.l 1a89c <fontHeight>,d0
    81ce:	|  |  |            move.l d0,-(sp)
    81d0:	|  |  |            jsr 1736c <__floatsisf>
    81d6:	|  |  |            addq.l #4,sp
    81d8:	|  |  |            move.l d0,d1
    81da:	|  |  |            move.l 1a142 <cameraZoom>,d0
    81e0:	|  |  |            move.l d0,-(sp)
    81e2:	|  |  |            move.l d1,-(sp)
    81e4:	|  |  |            jsr 17222 <__divsf3>
    81ea:	|  |  |            addq.l #8,sp
    81ec:	|  |  |            move.l d0,-(sp)
    81ee:	|  |  |            move.l d2,-(sp)
    81f0:	|  |  |            jsr 17660 <__subsf3>
    81f6:	|  |  |            addq.l #8,sp
    81f8:	|  |  |            move.l d0,-(sp)
    81fa:	|  |  |            jsr 17304 <__fixsfsi>
    8200:	|  |  |            addq.l #4,sp
    8202:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    8206:	|  |  '----------> move.l 36(sp),-(sp)
    820a:	|  |               jsr 139da <strlen>
    8210:	|  |               addq.l #4,sp
    8212:	|  |               move.l d0,d1
    8214:	|  |               move.l 48(sp),d0
    8218:	|  |               cmp.l d1,d0
    821a:	|  '-------------- bcs.w 8156 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    821e:	|                  lea 16(sp),a0
    8222:	|                  move.l a0,-(sp)
    8224:	|                  move.l 44(sp),-(sp)
    8228:	|                  move.l 44(sp),-(sp)
    822c:	|                  jsr 7944 <addSpeechLine>
    8232:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    8236:	|                  move.l 44(sp),-(sp)
    823a:	|                  jsr 1736c <__floatsisf>
    8240:	|                  addq.l #4,sp
    8242:	|                  move.l d0,d2
    8244:	|                  move.l 1a89c <fontHeight>,d0
    824a:	|                  move.l d0,-(sp)
    824c:	|                  jsr 1736c <__floatsisf>
    8252:	|                  addq.l #4,sp
    8254:	|                  move.l d0,d1
    8256:	|                  move.l 1a142 <cameraZoom>,d0
    825c:	|                  move.l d0,-(sp)
    825e:	|                  move.l d1,-(sp)
    8260:	|                  jsr 17222 <__divsf3>
    8266:	|                  addq.l #8,sp
    8268:	|                  move.l d0,-(sp)
    826a:	|                  move.l d2,-(sp)
    826c:	|                  jsr 17660 <__subsf3>
    8272:	|                  addq.l #8,sp
    8274:	|                  move.l d0,-(sp)
    8276:	|                  jsr 17304 <__fixsfsi>
    827c:	|                  addq.l #4,sp
    827e:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    8282:	|              ,-- bpl.s 82a0 <wrapSpeechXY+0x1f8>
    8284:	|              |   movea.l 1a800 <speech>,a0
    828a:	|              |   move.l 8(a0),d0
    828e:	|              |   movea.l 1a800 <speech>,a0
    8294:	|              |   sub.l 44(sp),d0
    8298:	|              |   move.l d0,8(a0)
    829c:	|           ,--|-- bra.w 838e <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    82a0:	|           |  '-> movea.l 1a800 <speech>,a0
    82a6:	|           |      move.l 8(a0),d0
    82aa:	|           |      move.l d0,-(sp)
    82ac:	|           |      jsr 1736c <__floatsisf>
    82b2:	|           |      addq.l #4,sp
    82b4:	|           |      move.l d0,d2
    82b6:	|           |      move.l 1a862 <cameraY>,d0
    82bc:	|           |      move.l d0,-(sp)
    82be:	|           |      jsr 1736c <__floatsisf>
    82c4:	|           |      addq.l #4,sp
    82c6:	|           |      move.l d0,d3
    82c8:	|           |      move.l 1a6fc <winHeight>,d4
    82ce:	|           |      move.l 1a89c <fontHeight>,d0
    82d4:	|           |      pea 3 <_start+0x3>
    82d8:	|           |      move.l d0,-(sp)
    82da:	|           |      jsr 17944 <__divsi3>
    82e0:	|           |      addq.l #8,sp
    82e2:	|           |      move.l d4,d1
    82e4:	|           |      sub.l d0,d1
    82e6:	|           |      move.l d1,-(sp)
    82e8:	|           |      jsr 17394 <__floatunsisf>
    82ee:	|           |      addq.l #4,sp
    82f0:	|           |      move.l d0,d1
    82f2:	|           |      move.l 1a142 <cameraZoom>,d0
    82f8:	|           |      move.l d0,-(sp)
    82fa:	|           |      move.l d1,-(sp)
    82fc:	|           |      jsr 17222 <__divsf3>
    8302:	|           |      addq.l #8,sp
    8304:	|           |      move.l d0,-(sp)
    8306:	|           |      move.l d3,-(sp)
    8308:	|           |      jsr 17128 <__addsf3>
    830e:	|           |      addq.l #8,sp
    8310:	|           |      move.l d0,-(sp)
    8312:	|           |      move.l d2,-(sp)
    8314:	|           |      jsr 174d8 <__gtsf2>
    831a:	|           |      addq.l #8,sp
    831c:	|           |      tst.l d0
    831e:	|           +----- ble.s 838e <wrapSpeechXY+0x2e6>
    8320:	|           |      move.l 1a862 <cameraY>,d0
    8326:	|           |      move.l d0,-(sp)
    8328:	|           |      jsr 1736c <__floatsisf>
    832e:	|           |      addq.l #4,sp
    8330:	|           |      move.l d0,d2
    8332:	|           |      move.l 1a6fc <winHeight>,d3
    8338:	|           |      move.l 1a89c <fontHeight>,d0
    833e:	|           |      pea 3 <_start+0x3>
    8342:	|           |      move.l d0,-(sp)
    8344:	|           |      jsr 17944 <__divsi3>
    834a:	|           |      addq.l #8,sp
    834c:	|           |      move.l d3,d1
    834e:	|           |      sub.l d0,d1
    8350:	|           |      move.l d1,-(sp)
    8352:	|           |      jsr 17394 <__floatunsisf>
    8358:	|           |      addq.l #4,sp
    835a:	|           |      move.l d0,d1
    835c:	|           |      move.l 1a142 <cameraZoom>,d0
    8362:	|           |      move.l d0,-(sp)
    8364:	|           |      move.l d1,-(sp)
    8366:	|           |      jsr 17222 <__divsf3>
    836c:	|           |      addq.l #8,sp
    836e:	|           |      move.l d0,-(sp)
    8370:	|           |      move.l d2,-(sp)
    8372:	|           |      jsr 17128 <__addsf3>
    8378:	|           |      addq.l #8,sp
    837a:	|           |      movea.l 1a800 <speech>,a2
    8380:	|           |      move.l d0,-(sp)
    8382:	|           |      jsr 17304 <__fixsfsi>
    8388:	|           |      addq.l #4,sp
    838a:	|           |      move.l d0,8(a2)

    if (offset) {
    838e:	|           '----> move.l 16(sp),d0
    8392:	|        ,-------- beq.s 83c8 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    8394:	|        |         movea.l 1a800 <speech>,a0
    839a:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    83a0:	|        |     ,-- bra.s 83c2 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    83a2:	|        |  ,--|-> movea.l 20(sp),a0
    83a6:	|        |  |  |   move.l 8(a0),d1
    83aa:	|        |  |  |   move.l 16(sp),d0
    83ae:	|        |  |  |   add.l d1,d0
    83b0:	|        |  |  |   movea.l 20(sp),a0
    83b4:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    83b8:	|        |  |  |   movea.l 20(sp),a0
    83bc:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    83c2:	|        |  |  '-> tst.l 20(sp)
    83c6:	|        |  '----- bne.s 83a2 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    83c8:	|        '-------> move.l 24(sp),d0
}
    83cc:	'----------------> movem.l (sp)+,d2-d4/a2
    83d0:	                   lea 16(sp),sp
    83d4:	                   rts

000083d6 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    83d6:	       lea -12(sp),sp
    83da:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    83dc:	       move.l 1a804 <zBuffer>,12(sp)

	while(zbuffercursor) {
    83e4:	   ,-- bra.s 840c <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    83e6:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    83ec:	|  |   movea.l 12(sp),a0
    83f0:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    83f6:	|  |   move.l 8(sp),4(sp)
    83fc:	|  |   move.l 1a7a4 <SysBase>,d0
    8402:	|  |   movea.l d0,a6
    8404:	|  |   movea.l 4(sp),a1
    8408:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    840c:	|  '-> tst.l 12(sp)
    8410:	'----- bne.s 83e6 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8412:	       clr.l 1a804 <zBuffer>
}
    8418:	       nop
    841a:	       movea.l (sp)+,a6
    841c:	       lea 12(sp),sp
    8420:	       rts

00008422 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8422:	                lea -304(sp),sp
    8426:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    842a:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    842e:	                jsr 83d6 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8434:	                move.l 328(sp),d0
    8438:	                move.l d0,-(sp)
    843a:	                jsr 6a2e <openFileFromNum>
    8440:	                addq.l #4,sp
    8442:	                tst.l d0
    8444:	            ,-- bne.s 844c <setZBuffer+0x2a>
    8446:	            |   clr.w d0
    8448:	,-----------|-- bra.w 870a <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    844c:	|           '-> move.l 1a78c <bigDataFile>,310(sp)
    8454:	|               move.l 1a7ac <DOSBase>,d0
    845a:	|               movea.l d0,a6
    845c:	|               move.l 310(sp),d1
    8460:	|               jsr -306(a6)
    8464:	|               move.l d0,306(sp)
    8468:	|               move.l 306(sp),d0
    846c:	|               moveq #97,d1
    846e:	|               cmp.l d0,d1
    8470:	|        ,----- bne.s 84e4 <setZBuffer+0xc2>
    8472:	|        |      move.l 1a78c <bigDataFile>,302(sp)
    847a:	|        |      move.l 1a7ac <DOSBase>,d0
    8480:	|        |      movea.l d0,a6
    8482:	|        |      move.l 302(sp),d1
    8486:	|        |      jsr -306(a6)
    848a:	|        |      move.l d0,298(sp)
    848e:	|        |      move.l 298(sp),d0
    8492:	|        |      moveq #115,d1
    8494:	|        |      cmp.l d0,d1
    8496:	|        +----- bne.s 84e4 <setZBuffer+0xc2>
    8498:	|        |      move.l 1a78c <bigDataFile>,294(sp)
    84a0:	|        |      move.l 1a7ac <DOSBase>,d0
    84a6:	|        |      movea.l d0,a6
    84a8:	|        |      move.l 294(sp),d1
    84ac:	|        |      jsr -306(a6)
    84b0:	|        |      move.l d0,290(sp)
    84b4:	|        |      move.l 290(sp),d0
    84b8:	|        |      moveq #122,d1
    84ba:	|        |      cmp.l d0,d1
    84bc:	|        +----- bne.s 84e4 <setZBuffer+0xc2>
    84be:	|        |      move.l 1a78c <bigDataFile>,286(sp)
    84c6:	|        |      move.l 1a7ac <DOSBase>,d0
    84cc:	|        |      movea.l d0,a6
    84ce:	|        |      move.l 286(sp),d1
    84d2:	|        |      jsr -306(a6)
    84d6:	|        |      move.l d0,282(sp)
    84da:	|        |      move.l 282(sp),d0
    84de:	|        |      moveq #98,d1
    84e0:	|        |      cmp.l d0,d1
    84e2:	|        |  ,-- beq.s 84f8 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    84e4:	|        '--|-> pea 18ca3 <PutChar+0x12c7>
    84ea:	|           |   jsr 16f3a <KPrintF>
    84f0:	|           |   addq.l #4,sp
		 return FALSE;
    84f2:	|           |   clr.w d0
    84f4:	+-----------|-- bra.w 870a <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    84f8:	|           '-> move.l 1a78c <bigDataFile>,278(sp)
    8500:	|               move.l 1a7ac <DOSBase>,d0
    8506:	|               movea.l d0,a6
    8508:	|               move.l 278(sp),d1
    850c:	|               jsr -306(a6)
    8510:	|               move.l d0,274(sp)
    8514:	|               move.l 274(sp),d0
    8518:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    851c:	|               moveq #28,d0
    851e:	|               move.l d0,270(sp)
    8522:	|               clr.l 266(sp)
    8526:	|               move.l 1a7a4 <SysBase>,d0
    852c:	|               movea.l d0,a6
    852e:	|               move.l 270(sp),d0
    8532:	|               move.l 266(sp),d1
    8536:	|               jsr -684(a6)
    853a:	|               move.l d0,262(sp)
    853e:	|               move.l 262(sp),d0
    8542:	|               move.l d0,1a804 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    8548:	|               move.l 1a804 <zBuffer>,318(sp)

	while(numelements--)
    8550:	|     ,-------- bra.w 86f0 <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    8554:	|  ,--|-------> move.l 1a78c <bigDataFile>,d0
    855a:	|  |  |         move.l d0,-(sp)
    855c:	|  |  |         jsr 6bc <get2bytes>
    8562:	|  |  |         addq.l #4,sp
    8564:	|  |  |         movea.l 318(sp),a0
    8568:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    856a:	|  |  |         move.l 1a78c <bigDataFile>,d0
    8570:	|  |  |         move.l d0,-(sp)
    8572:	|  |  |         jsr 6bc <get2bytes>
    8578:	|  |  |         addq.l #4,sp
    857a:	|  |  |         movea.l 318(sp),a0
    857e:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    8582:	|  |  |         move.l 1a78c <bigDataFile>,d0
    8588:	|  |  |         move.l d0,-(sp)
    858a:	|  |  |         jsr 6bc <get2bytes>
    8590:	|  |  |         addq.l #4,sp
    8592:	|  |  |         movea.l 318(sp),a0
    8596:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    859a:	|  |  |         move.l 1a78c <bigDataFile>,d0
    85a0:	|  |  |         move.l d0,-(sp)
    85a2:	|  |  |         jsr 6bc <get2bytes>
    85a8:	|  |  |         addq.l #4,sp
    85aa:	|  |  |         movea.l 318(sp),a0
    85ae:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    85b2:	|  |  |         move.l 1a78c <bigDataFile>,d0
    85b8:	|  |  |         move.l d0,-(sp)
    85ba:	|  |  |         jsr 6bc <get2bytes>
    85c0:	|  |  |         addq.l #4,sp
    85c2:	|  |  |         movea.l 318(sp),a0
    85c6:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    85ca:	|  |  |         movea.l 318(sp),a0
    85ce:	|  |  |         move.l (a0),d0
    85d0:	|  |  |         movea.l 318(sp),a0
    85d4:	|  |  |         move.l 4(a0),d1
    85d8:	|  |  |         move.l d1,-(sp)
    85da:	|  |  |         move.l d0,-(sp)
    85dc:	|  |  |         jsr 178c6 <__mulsi3>
    85e2:	|  |  |         addq.l #8,sp
    85e4:	|  |  |         tst.l d0
    85e6:	|  |  |     ,-- bge.s 85ea <setZBuffer+0x1c8>
    85e8:	|  |  |     |   addq.l #7,d0
    85ea:	|  |  |     '-> asr.l #3,d0
    85ec:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    85f0:	|  |  |         moveq #0,d0
    85f2:	|  |  |         move.w 260(sp),d0
    85f6:	|  |  |         move.l d0,256(sp)
    85fa:	|  |  |         moveq #2,d1
    85fc:	|  |  |         move.l d1,252(sp)
    8600:	|  |  |         move.l 1a7a4 <SysBase>,d0
    8606:	|  |  |         movea.l d0,a6
    8608:	|  |  |         move.l 256(sp),d0
    860c:	|  |  |         move.l 252(sp),d1
    8610:	|  |  |         jsr -684(a6)
    8614:	|  |  |         move.l d0,248(sp)
    8618:	|  |  |         move.l 248(sp),d0
    861c:	|  |  |         movea.l 318(sp),a0
    8620:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8624:	|  |  |         move.l 1a78c <bigDataFile>,244(sp)
    862c:	|  |  |         movea.l 318(sp),a0
    8630:	|  |  |         move.l 20(a0),240(sp)
    8636:	|  |  |         moveq #1,d0
    8638:	|  |  |         move.l d0,236(sp)
    863c:	|  |  |         moveq #0,d0
    863e:	|  |  |         move.w 260(sp),d0
    8642:	|  |  |         move.l d0,232(sp)
    8646:	|  |  |         move.l 1a7ac <DOSBase>,d0
    864c:	|  |  |         movea.l d0,a6
    864e:	|  |  |         move.l 244(sp),d1
    8652:	|  |  |         move.l 240(sp),d2
    8656:	|  |  |         move.l 236(sp),d3
    865a:	|  |  |         move.l 232(sp),d4
    865e:	|  |  |         jsr -324(a6)
    8662:	|  |  |         move.l d0,228(sp)
    8666:	|  |  |         move.l 228(sp),d0
    866a:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    866e:	|  |  |         tst.w 322(sp)
    8672:	|  |  |  ,----- beq.s 86ae <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8674:	|  |  |  |      moveq #28,d1
    8676:	|  |  |  |      move.l d1,222(sp)
    867a:	|  |  |  |      clr.l 218(sp)
    867e:	|  |  |  |      move.l 1a7a4 <SysBase>,d0
    8684:	|  |  |  |      movea.l d0,a6
    8686:	|  |  |  |      move.l 222(sp),d0
    868a:	|  |  |  |      move.l 218(sp),d1
    868e:	|  |  |  |      jsr -684(a6)
    8692:	|  |  |  |      move.l d0,214(sp)
    8696:	|  |  |  |      move.l 214(sp),d0
    869a:	|  |  |  |      movea.l 318(sp),a0
    869e:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    86a2:	|  |  |  |      movea.l 318(sp),a0
    86a6:	|  |  |  |      move.l 24(a0),318(sp)
    86ac:	|  |  |  |  ,-- bra.s 86b6 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    86ae:	|  |  |  '--|-> movea.l 318(sp),a0
    86b2:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    86b6:	|  |  |     '-> movea.l 318(sp),a0
    86ba:	|  |  |         move.l 4(a0),d0
    86be:	|  |  |         move.l d0,d0
    86c0:	|  |  |         movea.w d0,a1
    86c2:	|  |  |         movea.l 318(sp),a0
    86c6:	|  |  |         move.l (a0),d0
    86c8:	|  |  |         move.l d0,d0
    86ca:	|  |  |         movea.w d0,a0
    86cc:	|  |  |         movea.l 318(sp),a2
    86d0:	|  |  |         move.l 20(a2),d0
    86d4:	|  |  |         clr.l -(sp)
    86d6:	|  |  |         pea 1 <_start+0x1>
    86da:	|  |  |         move.l a1,-(sp)
    86dc:	|  |  |         move.l a0,-(sp)
    86de:	|  |  |         pea 18cb7 <PutChar+0x12db>
    86e4:	|  |  |         move.l d0,-(sp)
    86e6:	|  |  |         jsr 17022 <debug_register_bitmap>
    86ec:	|  |  |         lea 24(sp),sp
	while(numelements--)
    86f0:	|  |  '-------> move.w 322(sp),d0
    86f4:	|  |            move.w d0,d1
    86f6:	|  |            subq.w #1,d1
    86f8:	|  |            move.w d1,322(sp)
    86fc:	|  |            tst.w d0
    86fe:	|  '----------- bne.w 8554 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8702:	|               jsr 6926 <finishAccess>
	
	return TRUE;
    8708:	|               moveq #1,d0
}
    870a:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    870e:	                lea 304(sp),sp
    8712:	                rts

00008714 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8714:	          lea -32(sp),sp
    8718:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    871a:	          move.l 40(sp),d0
    871e:	          addq.l #8,d0
    8720:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8724:	          clr.l 32(sp)
    8728:	   ,----- bra.s 876e <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    872a:	,--|----> movea.l 24(sp),a0
    872e:	|  |      movea.l 8(a0),a0
    8732:	|  |      move.l 32(sp),d1
    8736:	|  |      move.l d1,d0
    8738:	|  |      lsl.l #3,d0
    873a:	|  |      sub.l d1,d0
    873c:	|  |      add.l d0,d0
    873e:	|  |      add.l d0,d0
    8740:	|  |      adda.l d0,a0
    8742:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8746:	|  |      movea.l 8(sp),a0
    874a:	|  |      move.l 24(a0),d0
    874e:	|  |  ,-- beq.s 876a <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8750:	|  |  |   movea.l 8(sp),a0
    8754:	|  |  |   move.l 24(a0),4(sp)
    875a:	|  |  |   move.l 1a7a4 <SysBase>,d0
    8760:	|  |  |   movea.l d0,a6
    8762:	|  |  |   movea.l 4(sp),a1
    8766:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    876a:	|  |  '-> addq.l #1,32(sp)
    876e:	|  '----> movea.l 24(sp),a0
    8772:	|         move.l (a0),d0
    8774:	|         cmp.l 32(sp),d0
    8778:	'-------- bgt.s 872a <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    877a:	          movea.l 24(sp),a0
    877e:	          move.l 8(a0),20(sp)
    8784:	          move.l 1a7a4 <SysBase>,d0
    878a:	          movea.l d0,a6
    878c:	          movea.l 20(sp),a1
    8790:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8794:	          move.l 1a8bc <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    879c:	      ,-- bra.s 87a8 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    879e:	   ,--|-> movea.l 28(sp),a0
    87a2:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    87a8:	   |  '-> movea.l 28(sp),a0
    87ac:	   |      movea.l 22(a0),a0
    87b0:	   |      move.l (a0),d1
    87b2:	   |      movea.l 40(sp),a0
    87b6:	   |      move.l (a0),d0
    87b8:	   |      cmp.l d1,d0
    87ba:	   |  ,-- beq.s 87c2 <forgetSpriteBank+0xae>
    87bc:	   |  |   tst.l 28(sp)
    87c0:	   '--|-- bne.s 879e <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    87c2:	      '-> tst.l 28(sp)
    87c6:	   ,----- beq.s 87f0 <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    87c8:	   |      movea.l 40(sp),a0
    87cc:	   |      move.l 22(a0),d0
    87d0:	   |      movea.l 28(sp),a0
    87d4:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    87d8:	   |      move.l 40(sp),12(sp)
    87de:	   |      move.l 1a7a4 <SysBase>,d0
    87e4:	   |      movea.l d0,a6
    87e6:	   |      movea.l 12(sp),a1
    87ea:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    87ee:	   |  ,-- bra.s 8816 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    87f0:	   '--|-> movea.l 1a8bc <allLoadedBanks>,a0
    87f6:	      |   move.l 22(a0),d0
    87fa:	      |   move.l d0,1a8bc <allLoadedBanks>
		FreeVec( forgetme);
    8800:	      |   move.l 40(sp),16(sp)
    8806:	      |   move.l 1a7a4 <SysBase>,d0
    880c:	      |   movea.l d0,a6
    880e:	      |   movea.l 16(sp),a1
    8812:	      |   jsr -690(a6)
}
    8816:	      '-> nop
    8818:	          movea.l (sp)+,a6
    881a:	          lea 32(sp),sp
    881e:	          rts

00008820 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8820:	                      lea -84(sp),sp
    8824:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8828:	                      pea 18cc3 <PutChar+0x12e7>
    882e:	                      jsr 16f3a <KPrintF>
    8834:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8836:	                      clr.l 94(sp)
    883a:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    883e:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8842:	                      move.l 108(sp),-(sp)
    8846:	                      jsr 6a2e <openFileFromNum>
    884c:	                      addq.l #4,sp
    884e:	                      tst.l d0
    8850:	                  ,-- bne.s 8866 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8852:	                  |   pea 18cdd <PutChar+0x1301>
    8858:	                  |   jsr 16f3a <KPrintF>
    885e:	                  |   addq.l #4,sp
		return FALSE;
    8860:	                  |   clr.w d0
    8862:	,-----------------|-- bra.w 8c5a <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8866:	|                 '-> move.l 1a78c <bigDataFile>,d0
    886c:	|                     move.l d0,-(sp)
    886e:	|                     jsr 6bc <get2bytes>
    8874:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8876:	|                     move.l 1a78c <bigDataFile>,82(sp)
    887e:	|                     move.l 1a7ac <DOSBase>,d0
    8884:	|                     movea.l d0,a6
    8886:	|                     move.l 82(sp),d1
    888a:	|                     jsr -306(a6)
    888e:	|                     move.l d0,78(sp)
    8892:	|                     move.l 78(sp),d0
    8896:	|                     movea.l 112(sp),a0
    889a:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    889e:	|                     move.l 1a78c <bigDataFile>,d0
    88a4:	|                     move.l d0,-(sp)
    88a6:	|                     jsr 6bc <get2bytes>
    88ac:	|                     addq.l #4,sp
    88ae:	|                     move.l d0,74(sp)

	if (total <= 0) {
    88b2:	|                 ,-- bgt.s 88c8 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    88b4:	|                 |   pea 18d0b <PutChar+0x132f>
    88ba:	|                 |   jsr 16f3a <KPrintF>
    88c0:	|                 |   addq.l #4,sp
		return FALSE;
    88c2:	|                 |   clr.w d0
    88c4:	+-----------------|-- bra.w 8c5a <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    88c8:	|                 '-> movea.l 112(sp),a0
    88cc:	|                     move.l 4(a0),d0
    88d0:	|                     moveq #3,d1
    88d2:	|                     cmp.l d0,d1
    88d4:	|                 ,-- bne.s 88e2 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    88d6:	|                 |   movea.l 112(sp),a0
    88da:	|                 |   move.w #1,12(a0)
    88e0:	|              ,--|-- bra.s 8904 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    88e2:	|              |  '-> movea.l 112(sp),a0
    88e6:	|              |      move.l 4(a0),d0
    88ea:	|              |      moveq #3,d1
    88ec:	|              |      cmp.l d0,d1
    88ee:	|              +----- bge.s 8904 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    88f0:	|              |      pea 18d4b <PutChar+0x136f>
    88f6:	|              |      jsr 16f3a <KPrintF>
    88fc:	|              |      addq.l #4,sp
		return FALSE;
    88fe:	|              |      clr.w d0
    8900:	+--------------|----- bra.w 8c5a <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8904:	|              '----> movea.l 112(sp),a0
    8908:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    890c:	|                     move.l 74(sp),d1
    8910:	|                     move.l d1,d0
    8912:	|                     lsl.l #3,d0
    8914:	|                     sub.l d1,d0
    8916:	|                     add.l d0,d0
    8918:	|                     add.l d0,d0
    891a:	|                     move.l d0,70(sp)
    891e:	|                     clr.l 66(sp)
    8922:	|                     move.l 1a7a4 <SysBase>,d0
    8928:	|                     movea.l d0,a6
    892a:	|                     move.l 70(sp),d0
    892e:	|                     move.l 66(sp),d1
    8932:	|                     jsr -684(a6)
    8936:	|                     move.l d0,62(sp)
    893a:	|                     move.l 62(sp),d0
    893e:	|                     movea.l 112(sp),a0
    8942:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8946:	|                     movea.l 112(sp),a0
    894a:	|                     move.l 8(a0),d0
    894e:	|                 ,-- bne.s 8956 <loadSpriteBank+0x136>
    8950:	|                 |   clr.w d0
    8952:	+-----------------|-- bra.w 8c5a <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8956:	|                 '-> moveq #1,d0
    8958:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    895c:	|                     clr.l 100(sp)
    8960:	|     ,-------------- bra.w 8c38 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8964:	|  ,--|-------------> move.l 1a78c <bigDataFile>,d0
    896a:	|  |  |               move.l d0,-(sp)
    896c:	|  |  |               jsr 6bc <get2bytes>
    8972:	|  |  |               addq.l #4,sp
    8974:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8978:	|  |  |               movea.l 112(sp),a0
    897c:	|  |  |               movea.l 8(a0),a0
    8980:	|  |  |               move.l 100(sp),d1
    8984:	|  |  |               move.l d1,d0
    8986:	|  |  |               lsl.l #3,d0
    8988:	|  |  |               sub.l d1,d0
    898a:	|  |  |               add.l d0,d0
    898c:	|  |  |               add.l d0,d0
    898e:	|  |  |               adda.l d0,a0
    8990:	|  |  |               moveq #0,d0
    8992:	|  |  |               move.w 60(sp),d0
    8996:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8998:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    899e:	|  |  |               movea.l 112(sp),a0
    89a2:	|  |  |               movea.l 8(a0),a0
    89a6:	|  |  |               move.l 100(sp),d1
    89aa:	|  |  |               move.l d1,d0
    89ac:	|  |  |               lsl.l #3,d0
    89ae:	|  |  |               sub.l d1,d0
    89b0:	|  |  |               add.l d0,d0
    89b2:	|  |  |               add.l d0,d0
    89b4:	|  |  |               lea (0,a0,d0.l),a2
    89b8:	|  |  |               move.l a1,-(sp)
    89ba:	|  |  |               jsr 6bc <get2bytes>
    89c0:	|  |  |               addq.l #4,sp
    89c2:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    89c6:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    89cc:	|  |  |               movea.l 112(sp),a0
    89d0:	|  |  |               movea.l 8(a0),a0
    89d4:	|  |  |               move.l 100(sp),d1
    89d8:	|  |  |               move.l d1,d0
    89da:	|  |  |               lsl.l #3,d0
    89dc:	|  |  |               sub.l d1,d0
    89de:	|  |  |               add.l d0,d0
    89e0:	|  |  |               add.l d0,d0
    89e2:	|  |  |               lea (0,a0,d0.l),a2
    89e6:	|  |  |               move.l a1,-(sp)
    89e8:	|  |  |               jsr 6bc <get2bytes>
    89ee:	|  |  |               addq.l #4,sp
    89f0:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    89f4:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    89fa:	|  |  |               movea.l 112(sp),a0
    89fe:	|  |  |               movea.l 8(a0),a0
    8a02:	|  |  |               move.l 100(sp),d1
    8a06:	|  |  |               move.l d1,d0
    8a08:	|  |  |               lsl.l #3,d0
    8a0a:	|  |  |               sub.l d1,d0
    8a0c:	|  |  |               add.l d0,d0
    8a0e:	|  |  |               add.l d0,d0
    8a10:	|  |  |               lea (0,a0,d0.l),a2
    8a14:	|  |  |               move.l a1,-(sp)
    8a16:	|  |  |               jsr 6bc <get2bytes>
    8a1c:	|  |  |               addq.l #4,sp
    8a1e:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8a22:	|  |  |               movea.l 112(sp),a0
    8a26:	|  |  |               move.l 4(a0),d0
    8a2a:	|  |  |               moveq #3,d1
    8a2c:	|  |  |               cmp.l d0,d1
    8a2e:	|  |  |     ,-------- beq.w 8aca <loadSpriteBank+0x2aa>
    8a32:	|  |  |     |         moveq #3,d1
    8a34:	|  |  |     |         cmp.l d0,d1
    8a36:	|  |  |  ,--|-------- blt.w 8b70 <loadSpriteBank+0x350>
    8a3a:	|  |  |  |  |         moveq #1,d1
    8a3c:	|  |  |  |  |         cmp.l d0,d1
    8a3e:	|  |  |  |  |     ,-- beq.s 8a4a <loadSpriteBank+0x22a>
    8a40:	|  |  |  |  |     |   moveq #2,d1
    8a42:	|  |  |  |  |     |   cmp.l d0,d1
    8a44:	|  |  |  |  |  ,--|-- beq.s 8a76 <loadSpriteBank+0x256>
    8a46:	|  |  |  +--|--|--|-- bra.w 8b70 <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8a4a:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    8a4e:	|  |  |  |  |  |      movea.l 8(a0),a0
    8a52:	|  |  |  |  |  |      move.l 100(sp),d1
    8a56:	|  |  |  |  |  |      move.l d1,d0
    8a58:	|  |  |  |  |  |      lsl.l #3,d0
    8a5a:	|  |  |  |  |  |      sub.l d1,d0
    8a5c:	|  |  |  |  |  |      add.l d0,d0
    8a5e:	|  |  |  |  |  |      add.l d0,d0
    8a60:	|  |  |  |  |  |      adda.l d0,a0
    8a62:	|  |  |  |  |  |      move.l 4(a0),d0
    8a66:	|  |  |  |  |  |      addq.l #2,d0
    8a68:	|  |  |  |  |  |      move.l d0,d0
    8a6a:	|  |  |  |  |  |      add.w d0,d0
    8a6c:	|  |  |  |  |  |      add.w d0,d0
    8a6e:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8a72:	|  |  |  +--|--|----- bra.w 8b70 <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8a76:	|  |  |  |  |  '----> movea.l 112(sp),a0
    8a7a:	|  |  |  |  |         movea.l 8(a0),a0
    8a7e:	|  |  |  |  |         move.l 100(sp),d1
    8a82:	|  |  |  |  |         move.l d1,d0
    8a84:	|  |  |  |  |         lsl.l #3,d0
    8a86:	|  |  |  |  |         sub.l d1,d0
    8a88:	|  |  |  |  |         add.l d0,d0
    8a8a:	|  |  |  |  |         add.l d0,d0
    8a8c:	|  |  |  |  |         adda.l d0,a0
    8a8e:	|  |  |  |  |         move.l (a0),d0
    8a90:	|  |  |  |  |     ,-- bpl.s 8a94 <loadSpriteBank+0x274>
    8a92:	|  |  |  |  |     |   addq.l #7,d0
    8a94:	|  |  |  |  |     '-> asr.l #3,d0
    8a96:	|  |  |  |  |         move.l d0,d2
    8a98:	|  |  |  |  |         movea.l 112(sp),a0
    8a9c:	|  |  |  |  |         movea.l 8(a0),a0
    8aa0:	|  |  |  |  |         move.l 100(sp),d1
    8aa4:	|  |  |  |  |         move.l d1,d0
    8aa6:	|  |  |  |  |         lsl.l #3,d0
    8aa8:	|  |  |  |  |         sub.l d1,d0
    8aaa:	|  |  |  |  |         add.l d0,d0
    8aac:	|  |  |  |  |         add.l d0,d0
    8aae:	|  |  |  |  |         adda.l d0,a0
    8ab0:	|  |  |  |  |         move.l 4(a0),d0
    8ab4:	|  |  |  |  |         move.l d0,d0
    8ab6:	|  |  |  |  |         move.w d2,d1
    8ab8:	|  |  |  |  |         muls.w d0,d1
    8aba:	|  |  |  |  |         move.w d1,d0
    8abc:	|  |  |  |  |         add.w d0,d0
    8abe:	|  |  |  |  |         add.w d1,d0
    8ac0:	|  |  |  |  |         add.w d0,d0
    8ac2:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8ac6:	|  |  |  +--|-------- bra.w 8b70 <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8aca:	|  |  |  |  '-------> movea.l 112(sp),a0
    8ace:	|  |  |  |            movea.l 8(a0),a0
    8ad2:	|  |  |  |            move.l 100(sp),d1
    8ad6:	|  |  |  |            move.l d1,d0
    8ad8:	|  |  |  |            lsl.l #3,d0
    8ada:	|  |  |  |            sub.l d1,d0
    8adc:	|  |  |  |            add.l d0,d0
    8ade:	|  |  |  |            add.l d0,d0
    8ae0:	|  |  |  |            adda.l d0,a0
    8ae2:	|  |  |  |            move.l (a0),d0
    8ae4:	|  |  |  |            andi.l #-2147483633,d0
    8aea:	|  |  |  |        ,-- bpl.s 8af4 <loadSpriteBank+0x2d4>
    8aec:	|  |  |  |        |   subq.l #1,d0
    8aee:	|  |  |  |        |   moveq #-16,d1
    8af0:	|  |  |  |        |   or.l d1,d0
    8af2:	|  |  |  |        |   addq.l #1,d0
    8af4:	|  |  |  |        '-> tst.l d0
    8af6:	|  |  |  |     ,----- ble.s 8afc <loadSpriteBank+0x2dc>
    8af8:	|  |  |  |     |      moveq #2,d0
    8afa:	|  |  |  |     |  ,-- bra.s 8afe <loadSpriteBank+0x2de>
    8afc:	|  |  |  |     '--|-> clr.w d0
    8afe:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8b02:	|  |  |  |            movea.l 112(sp),a0
    8b06:	|  |  |  |            movea.l 8(a0),a0
    8b0a:	|  |  |  |            move.l 100(sp),d1
    8b0e:	|  |  |  |            move.l d1,d0
    8b10:	|  |  |  |            lsl.l #3,d0
    8b12:	|  |  |  |            sub.l d1,d0
    8b14:	|  |  |  |            add.l d0,d0
    8b16:	|  |  |  |            add.l d0,d0
    8b18:	|  |  |  |            adda.l d0,a0
    8b1a:	|  |  |  |            move.l (a0),d0
    8b1c:	|  |  |  |            movea.l d0,a0
    8b1e:	|  |  |  |            cmpa.w #0,a0
    8b22:	|  |  |  |        ,-- bge.s 8b28 <loadSpriteBank+0x308>
    8b24:	|  |  |  |        |   lea 15(a0),a0
    8b28:	|  |  |  |        '-> move.l a0,d0
    8b2a:	|  |  |  |            asr.l #4,d0
    8b2c:	|  |  |  |            add.l d0,d0
    8b2e:	|  |  |  |            move.l d0,d1
    8b30:	|  |  |  |            moveq #0,d0
    8b32:	|  |  |  |            move.w 58(sp),d0
    8b36:	|  |  |  |            add.l d1,d0
    8b38:	|  |  |  |            move.l d0,d2
    8b3a:	|  |  |  |            movea.l 112(sp),a0
    8b3e:	|  |  |  |            movea.l 8(a0),a0
    8b42:	|  |  |  |            move.l 100(sp),d1
    8b46:	|  |  |  |            move.l d1,d0
    8b48:	|  |  |  |            lsl.l #3,d0
    8b4a:	|  |  |  |            sub.l d1,d0
    8b4c:	|  |  |  |            add.l d0,d0
    8b4e:	|  |  |  |            add.l d0,d0
    8b50:	|  |  |  |            adda.l d0,a0
    8b52:	|  |  |  |            move.l 4(a0),d0
    8b56:	|  |  |  |            move.l d0,d0
    8b58:	|  |  |  |            move.w d2,d1
    8b5a:	|  |  |  |            muls.w d0,d1
    8b5c:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8b60:	|  |  |  |            cmpi.w #100,98(sp)
    8b66:	|  |  |  |        ,-- bls.s 8b6e <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8b68:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8b6e:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8b70:	|  |  |  '----------> moveq #0,d0
    8b72:	|  |  |               move.w 98(sp),d0
    8b76:	|  |  |               add.l d0,d0
    8b78:	|  |  |               move.l d0,52(sp)
    8b7c:	|  |  |               moveq #2,d0
    8b7e:	|  |  |               move.l d0,48(sp)
    8b82:	|  |  |               move.l 1a7a4 <SysBase>,d0
    8b88:	|  |  |               movea.l d0,a6
    8b8a:	|  |  |               move.l 52(sp),d0
    8b8e:	|  |  |               move.l 48(sp),d1
    8b92:	|  |  |               jsr -684(a6)
    8b96:	|  |  |               move.l d0,44(sp)
    8b9a:	|  |  |               movea.l 44(sp),a1
    8b9e:	|  |  |               movea.l 112(sp),a0
    8ba2:	|  |  |               movea.l 8(a0),a0
    8ba6:	|  |  |               move.l 100(sp),d1
    8baa:	|  |  |               move.l d1,d0
    8bac:	|  |  |               lsl.l #3,d0
    8bae:	|  |  |               sub.l d1,d0
    8bb0:	|  |  |               add.l d0,d0
    8bb2:	|  |  |               add.l d0,d0
    8bb4:	|  |  |               adda.l d0,a0
    8bb6:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8bba:	|  |  |               move.l 1a78c <bigDataFile>,40(sp)
    8bc2:	|  |  |               movea.l 112(sp),a0
    8bc6:	|  |  |               movea.l 8(a0),a0
    8bca:	|  |  |               move.l 100(sp),d1
    8bce:	|  |  |               move.l d1,d0
    8bd0:	|  |  |               lsl.l #3,d0
    8bd2:	|  |  |               sub.l d1,d0
    8bd4:	|  |  |               add.l d0,d0
    8bd6:	|  |  |               add.l d0,d0
    8bd8:	|  |  |               adda.l d0,a0
    8bda:	|  |  |               move.l 24(a0),36(sp)
    8be0:	|  |  |               moveq #2,d1
    8be2:	|  |  |               move.l d1,32(sp)
    8be6:	|  |  |               move.w 98(sp),d0
    8bea:	|  |  |               lsr.w #1,d0
    8bec:	|  |  |               move.w d0,d0
    8bee:	|  |  |               andi.l #65535,d0
    8bf4:	|  |  |               move.l d0,28(sp)
    8bf8:	|  |  |               move.l 1a7ac <DOSBase>,d0
    8bfe:	|  |  |               movea.l d0,a6
    8c00:	|  |  |               move.l 40(sp),d1
    8c04:	|  |  |               move.l 36(sp),d2
    8c08:	|  |  |               move.l 32(sp),d3
    8c0c:	|  |  |               move.l 28(sp),d4
    8c10:	|  |  |               jsr -324(a6)
    8c14:	|  |  |               move.l d0,24(sp)
    8c18:	|  |  |               move.l 24(sp),d0
    8c1c:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8c20:	|  |  |           ,-- bne.s 8c34 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8c22:	|  |  |           |   pea 18d80 <PutChar+0x13a4>
    8c28:	|  |  |           |   jsr 16f3a <KPrintF>
    8c2e:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8c30:	|  |  |           |   clr.w d0
    8c32:	+--|--|-----------|-- bra.s 8c5a <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    8c34:	|  |  |           '-> addq.l #1,100(sp)
    8c38:	|  |  '-------------> move.l 100(sp),d0
    8c3c:	|  |                  cmp.l 74(sp),d0
    8c40:	|  '----------------- blt.w 8964 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    8c44:	|                     jsr 6926 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    8c4a:	|                     pea 18db3 <PutChar+0x13d7>
    8c50:	|                     jsr 16f3a <KPrintF>
    8c56:	|                     addq.l #4,sp
	return TRUE;
    8c58:	|                     moveq #1,d0
}
    8c5a:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    8c5e:	                      lea 84(sp),sp
    8c62:	                      rts

00008c64 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8c64:	                   lea -16(sp),sp
    8c68:	                   move.l d2,-(sp)
    8c6a:	                   move.l 32(sp),d0
    8c6e:	                   move.w d0,d0
    8c70:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    8c74:	                   movea.l 28(sp),a0
    8c78:	                   move.l (a0),d2
    8c7a:	                   movea.l 24(sp),a0
    8c7e:	                   move.l 8(a0),d0
    8c82:	                   move.l d0,-(sp)
    8c84:	                   jsr 1736c <__floatsisf>
    8c8a:	                   addq.l #4,sp
    8c8c:	                   move.l d0,-(sp)
    8c8e:	                   move.l d2,-(sp)
    8c90:	                   jsr 17660 <__subsf3>
    8c96:	                   addq.l #8,sp
    8c98:	                   move.l d0,-(sp)
    8c9a:	                   jsr 17304 <__fixsfsi>
    8ca0:	                   addq.l #4,sp
    8ca2:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    8ca6:	                   movea.l 28(sp),a0
    8caa:	                   move.l 4(a0),d2
    8cae:	                   movea.l 24(sp),a0
    8cb2:	                   move.l 12(a0),d0
    8cb6:	                   move.l d0,-(sp)
    8cb8:	                   jsr 1736c <__floatsisf>
    8cbe:	                   addq.l #4,sp
    8cc0:	                   move.l d0,-(sp)
    8cc2:	                   move.l d2,-(sp)
    8cc4:	                   jsr 17660 <__subsf3>
    8cca:	                   addq.l #8,sp
    8ccc:	                   move.l d0,-(sp)
    8cce:	                   jsr 17304 <__fixsfsi>
    8cd4:	                   addq.l #4,sp
    8cd6:	                   move.w d0,8(sp)

	if( x < 0)
    8cda:	                   tst.w 18(sp)
    8cde:	               ,-- bge.s 8d12 <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    8ce0:	               |   movea.l 28(sp),a0
    8ce4:	               |   move.l (a0),d2
    8ce6:	               |   movea.l 24(sp),a0
    8cea:	               |   move.l 8(a0),d0
    8cee:	               |   move.l d0,-(sp)
    8cf0:	               |   jsr 1736c <__floatsisf>
    8cf6:	               |   addq.l #4,sp
    8cf8:	               |   move.l d0,-(sp)
    8cfa:	               |   move.l d2,-(sp)
    8cfc:	               |   jsr 17660 <__subsf3>
    8d02:	               |   addq.l #8,sp
    8d04:	               |   move.l d0,-(sp)
    8d06:	               |   jsr 17304 <__fixsfsi>
    8d0c:	               |   addq.l #4,sp
    8d0e:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    8d12:	               '-> movea.w 8(sp),a1
    8d16:	                   movea.w 18(sp),a0
    8d1a:	                   pea 1 <_start+0x1>
    8d1e:	                   move.l a1,-(sp)
    8d20:	                   move.l a0,-(sp)
    8d22:	                   move.l 40(sp),-(sp)
    8d26:	                   move.l 40(sp),-(sp)
    8d2a:	                   jsr 2bb6 <CstScaleSprite>
    8d30:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8d34:	                   movea.l 28(sp),a0
    8d38:	                   move.l 118(a0),d0
    8d3c:	                   moveq #8,d1
    8d3e:	                   and.l d1,d0
    8d40:	   ,-------------- beq.w 8e0c <scaleSprite+0x1a8>
		if (single->xhot < 0)
    8d44:	   |               movea.l 24(sp),a0
    8d48:	   |               move.l 8(a0),d0
    8d4c:	   |  ,----------- bpl.s 8d88 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8d4e:	   |  |            move.w 18(sp),d0
    8d52:	   |  |            tst.w 6(sp)
    8d56:	   |  |     ,----- beq.s 8d70 <scaleSprite+0x10c>
    8d58:	   |  |     |      movea.l 24(sp),a0
    8d5c:	   |  |     |      move.l (a0),d1
    8d5e:	   |  |     |      move.l d1,d2
    8d60:	   |  |     |      movea.l 24(sp),a0
    8d64:	   |  |     |      move.l 8(a0),d1
    8d68:	   |  |     |      move.l d1,d1
    8d6a:	   |  |     |      movea.w d2,a0
    8d6c:	   |  |     |      suba.w d1,a0
    8d6e:	   |  |     |  ,-- bra.s 8d7e <scaleSprite+0x11a>
    8d70:	   |  |     '--|-> movea.l 24(sp),a0
    8d74:	   |  |        |   move.l 8(a0),d1
    8d78:	   |  |        |   move.l d1,d1
    8d7a:	   |  |        |   movea.w d1,a0
    8d7c:	   |  |        |   addq.w #1,a0
    8d7e:	   |  |        '-> move.w d0,d1
    8d80:	   |  |            sub.w a0,d1
    8d82:	   |  |            move.w d1,16(sp)
    8d86:	   |  |  ,-------- bra.s 8dc0 <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8d88:	   |  '--|-------> move.w 18(sp),d1
    8d8c:	   |     |         tst.w 6(sp)
    8d90:	   |     |  ,----- beq.s 8dae <scaleSprite+0x14a>
    8d92:	   |     |  |      movea.l 24(sp),a0
    8d96:	   |     |  |      move.l (a0),d0
    8d98:	   |     |  |      move.l d0,d2
    8d9a:	   |     |  |      movea.l 24(sp),a0
    8d9e:	   |     |  |      move.l 8(a0),d0
    8da2:	   |     |  |      move.l d0,d0
    8da4:	   |     |  |      movea.w d2,a0
    8da6:	   |     |  |      suba.w d0,a0
    8da8:	   |     |  |      move.w a0,d0
    8daa:	   |     |  |      subq.w #1,d0
    8dac:	   |     |  |  ,-- bra.s 8db8 <scaleSprite+0x154>
    8dae:	   |     |  '--|-> movea.l 24(sp),a0
    8db2:	   |     |     |   move.l 8(a0),d0
    8db6:	   |     |     |   move.l d0,d0
    8db8:	   |     |     '-> movea.w d1,a0
    8dba:	   |     |         suba.w d0,a0
    8dbc:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8dc0:	   |     '-------> movea.l 28(sp),a0
    8dc4:	   |               move.l 24(a0),d0
    8dc8:	   |               move.l d0,d1
    8dca:	   |               movea.l 24(sp),a0
    8dce:	   |               move.l 12(a0),d0
    8dd2:	   |               move.l d0,d0
    8dd4:	   |               sub.w d0,d1
    8dd6:	   |               move.w 8(sp),d0
    8dda:	   |               movea.w d1,a0
    8ddc:	   |               adda.w d0,a0
    8dde:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    8de2:	   |               movea.l 24(sp),a0
    8de6:	   |               move.l (a0),d0
    8de8:	   |               move.l d0,d0
    8dea:	   |               move.w 16(sp),d1
    8dee:	   |               add.w d0,d1
    8df0:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    8df4:	   |               movea.l 24(sp),a0
    8df8:	   |               move.l 4(a0),d0
    8dfc:	   |               move.l d0,d0
    8dfe:	   |               movea.w 14(sp),a0
    8e02:	   |               adda.w d0,a0
    8e04:	   |               move.w a0,10(sp)
    8e08:	,--|-------------- bra.w 8ef4 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    8e0c:	|  '-------------> move.w 18(sp),d1
    8e10:	|                  move.l 1a85e <cameraX>,d0
    8e16:	|                  move.l d0,d0
    8e18:	|                  sub.w d0,d1
    8e1a:	|                  move.w d1,18(sp)
		y -= cameraY;
    8e1e:	|                  move.w 8(sp),d1
    8e22:	|                  move.l 1a862 <cameraY>,d0
    8e28:	|                  move.l d0,d0
    8e2a:	|                  sub.w d0,d1
    8e2c:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    8e30:	|                  movea.l 24(sp),a0
    8e34:	|                  move.l 8(a0),d0
    8e38:	|     ,----------- bpl.s 8e74 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8e3a:	|     |            move.w 18(sp),d0
    8e3e:	|     |            tst.w 6(sp)
    8e42:	|     |     ,----- beq.s 8e5c <scaleSprite+0x1f8>
    8e44:	|     |     |      movea.l 24(sp),a0
    8e48:	|     |     |      move.l (a0),d1
    8e4a:	|     |     |      move.l d1,d2
    8e4c:	|     |     |      movea.l 24(sp),a0
    8e50:	|     |     |      move.l 8(a0),d1
    8e54:	|     |     |      move.l d1,d1
    8e56:	|     |     |      movea.w d2,a0
    8e58:	|     |     |      suba.w d1,a0
    8e5a:	|     |     |  ,-- bra.s 8e6a <scaleSprite+0x206>
    8e5c:	|     |     '--|-> movea.l 24(sp),a0
    8e60:	|     |        |   move.l 8(a0),d1
    8e64:	|     |        |   move.l d1,d1
    8e66:	|     |        |   movea.w d1,a0
    8e68:	|     |        |   addq.w #1,a0
    8e6a:	|     |        '-> move.w d0,d1
    8e6c:	|     |            sub.w a0,d1
    8e6e:	|     |            move.w d1,16(sp)
    8e72:	|     |  ,-------- bra.s 8eac <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8e74:	|     '--|-------> move.w 18(sp),d1
    8e78:	|        |         tst.w 6(sp)
    8e7c:	|        |  ,----- beq.s 8e9a <scaleSprite+0x236>
    8e7e:	|        |  |      movea.l 24(sp),a0
    8e82:	|        |  |      move.l (a0),d0
    8e84:	|        |  |      move.l d0,d2
    8e86:	|        |  |      movea.l 24(sp),a0
    8e8a:	|        |  |      move.l 8(a0),d0
    8e8e:	|        |  |      move.l d0,d0
    8e90:	|        |  |      movea.w d2,a0
    8e92:	|        |  |      suba.w d0,a0
    8e94:	|        |  |      move.w a0,d0
    8e96:	|        |  |      subq.w #1,d0
    8e98:	|        |  |  ,-- bra.s 8ea4 <scaleSprite+0x240>
    8e9a:	|        |  '--|-> movea.l 24(sp),a0
    8e9e:	|        |     |   move.l 8(a0),d0
    8ea2:	|        |     |   move.l d0,d0
    8ea4:	|        |     '-> movea.w d1,a0
    8ea6:	|        |         suba.w d0,a0
    8ea8:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8eac:	|        '-------> movea.l 28(sp),a0
    8eb0:	|                  move.l 24(a0),d0
    8eb4:	|                  move.l d0,d1
    8eb6:	|                  movea.l 24(sp),a0
    8eba:	|                  move.l 12(a0),d0
    8ebe:	|                  move.l d0,d0
    8ec0:	|                  sub.w d0,d1
    8ec2:	|                  move.w 8(sp),d0
    8ec6:	|                  movea.w d1,a0
    8ec8:	|                  adda.w d0,a0
    8eca:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    8ece:	|                  movea.l 24(sp),a0
    8ed2:	|                  move.l (a0),d0
    8ed4:	|                  move.l d0,d0
    8ed6:	|                  move.w 16(sp),d1
    8eda:	|                  add.w d0,d1
    8edc:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    8ee0:	|                  movea.l 24(sp),a0
    8ee4:	|                  move.l 4(a0),d0
    8ee8:	|                  move.l d0,d0
    8eea:	|                  movea.w 14(sp),a0
    8eee:	|                  adda.w d0,a0
    8ef0:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    8ef4:	'----------------> move.l 1a760 <input+0xa>,d1
    8efa:	                   moveq #0,d0
    8efc:	                   move.w 16(sp),d0
    8f00:	                   cmp.l d1,d0
    8f02:	            ,----- bgt.s 8f38 <scaleSprite+0x2d4>
    8f04:	            |      move.l 1a760 <input+0xa>,d1
    8f0a:	            |      moveq #0,d0
    8f0c:	            |      move.w 12(sp),d0
    8f10:	            |      cmp.l d1,d0
    8f12:	            +----- blt.s 8f38 <scaleSprite+0x2d4>
    8f14:	            |      move.l 1a764 <input+0xe>,d1
    8f1a:	            |      moveq #0,d0
    8f1c:	            |      move.w 14(sp),d0
    8f20:	            |      cmp.l d1,d0
    8f22:	            +----- bgt.s 8f38 <scaleSprite+0x2d4>
    8f24:	            |      move.l 1a764 <input+0xe>,d1
    8f2a:	            |      moveq #0,d0
    8f2c:	            |      move.w 10(sp),d0
    8f30:	            |      cmp.l d1,d0
    8f32:	            +----- blt.s 8f38 <scaleSprite+0x2d4>
		return TRUE;
    8f34:	            |      moveq #1,d0
    8f36:	            |  ,-- bra.s 8f3a <scaleSprite+0x2d6>
	}
	return FALSE;
    8f38:	            '--|-> clr.w d0
    8f3a:	               '-> move.l (sp)+,d2
    8f3c:	                   lea 16(sp),sp
    8f40:	                   rts

00008f42 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    8f42:	    move.l 4(sp),d0
    8f46:	,-- bpl.s 8f4a <TF_abs+0x8>
    8f48:	|   neg.l d0
}
    8f4a:	'-> rts

00008f4c <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    8f4c:	             lea -28(sp),sp
    8f50:	             move.l a6,-(sp)
    8f52:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    8f54:	             move.l #132,28(sp)
    8f5c:	             clr.l 24(sp)
    8f60:	             move.l 1a7a4 <SysBase>,d0
    8f66:	             movea.l d0,a6
    8f68:	             move.l 28(sp),d0
    8f6c:	             move.l 24(sp),d1
    8f70:	             jsr -684(a6)
    8f74:	             move.l d0,20(sp)
    8f78:	             move.l 20(sp),d0
    8f7c:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    8f80:	         ,-- bne.s 8f88 <addPerson+0x3c>
    8f82:	         |   clr.w d0
    8f84:	,--------|-- bra.w 91b8 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    8f88:	|        '-> move.l 48(sp),-(sp)
    8f8c:	|            jsr d344 <loadObjectType>
    8f92:	|            addq.l #4,sp
    8f94:	|            movea.l 16(sp),a0
    8f98:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    8f9c:	|            movea.l 16(sp),a0
    8fa0:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    8fa8:	|            movea.l 16(sp),a0
    8fac:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    8fb0:	|            movea.l 16(sp),a0
    8fb4:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    8fb8:	|            move.l 44(sp),-(sp)
    8fbc:	|            jsr 1736c <__floatsisf>
    8fc2:	|            addq.l #4,sp
    8fc4:	|            move.l d0,d2
    8fc6:	|            move.l 40(sp),-(sp)
    8fca:	|            jsr 1736c <__floatsisf>
    8fd0:	|            addq.l #4,sp
    8fd2:	|            move.l d2,-(sp)
    8fd4:	|            move.l d0,-(sp)
    8fd6:	|            move.l 24(sp),-(sp)
    8fda:	|            jsr aa9a <moveAndScale>
    8fe0:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    8fe4:	|            movea.l 16(sp),a0
    8fe8:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    8fec:	|            movea.l 16(sp),a0
    8ff0:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    8ff6:	|            movea.l 16(sp),a0
    8ffa:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    9000:	|            movea.l 16(sp),a0
    9004:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    9008:	|            movea.l 16(sp),a0
    900c:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9010:	|            movea.l 16(sp),a0
    9014:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    901a:	|            movea.l 16(sp),a0
    901e:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9022:	|            movea.l 16(sp),a0
    9026:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    902e:	|            movea.l 16(sp),a0
    9032:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    903a:	|            movea.l 16(sp),a0
    903e:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9042:	|            movea.l 16(sp),a0
    9046:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    904a:	|            movea.l 16(sp),a0
    904e:	|            movea.l 114(a0),a0
    9052:	|            move.l 24(a0),d0
    9056:	|            movea.l 16(sp),a0
    905a:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    905e:	|            movea.l 16(sp),a0
    9062:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9066:	|            movea.l 16(sp),a0
    906a:	|            movea.l 114(a0),a0
    906e:	|            move.l 32(a0),d0
    9072:	|            movea.l 16(sp),a0
    9076:	|            move.l d0,122(a0)
    newPerson->r = 0;
    907a:	|            movea.l 16(sp),a0
    907e:	|            clr.b 126(a0)
    newPerson->g = 0;
    9082:	|            movea.l 16(sp),a0
    9086:	|            clr.b 127(a0)
    newPerson->b = 0;
    908a:	|            movea.l 16(sp),a0
    908e:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    9092:	|            movea.l 16(sp),a0
    9096:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    909a:	|            movea.l 16(sp),a0
    909e:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    90a2:	|            movea.l 16(sp),a0
    90a6:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    90ac:	|            clr.l -(sp)
    90ae:	|            move.l 20(sp),-(sp)
    90b2:	|            jsr 7e28 <setFrames>
    90b8:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    90ba:	|            movea.l 52(sp),a0
    90be:	|            movea.l (a0),a0
    90c0:	|            movea.l (a0),a0
    90c2:	|            movea.l 4(a0),a0
    90c6:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    90ca:	|     ,----- bpl.s 90d4 <addPerson+0x188>
    90cc:	|     |      move.l 12(sp),d0
    90d0:	|     |      neg.l d0
    90d2:	|     |  ,-- bra.s 90d6 <addPerson+0x18a>
    90d4:	|     '--|-> moveq #1,d0
    90d6:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    90da:	|            movea.l 52(sp),a0
    90de:	|            movea.l (a0),a0
    90e0:	|            movea.l (a0),a0
    90e2:	|            movea.l (a0),a0
    90e4:	|            move.l 8(a0),d0
    90e8:	|            cmp.l 8(sp),d0
    90ec:	|     ,----- bgt.s 911e <addPerson+0x1d2>
        if (fNumSigned < 0) {
    90ee:	|     |      tst.l 12(sp)
    90f2:	|     |  ,-- bge.s 9100 <addPerson+0x1b4>
            newPerson->height = 5;
    90f4:	|     |  |   movea.l 16(sp),a0
    90f8:	|     |  |   moveq #5,d0
    90fa:	|     |  |   move.l d0,20(a0)
    90fe:	|  ,--|--|-- bra.s 914a <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    9100:	|  |  |  '-> movea.l 52(sp),a0
    9104:	|  |  |      movea.l (a0),a0
    9106:	|  |  |      movea.l (a0),a0
    9108:	|  |  |      movea.l (a0),a0
    910a:	|  |  |      movea.l 16(a0),a0
    910e:	|  |  |      move.l 12(a0),d0
    9112:	|  |  |      addq.l #5,d0
    9114:	|  |  |      movea.l 16(sp),a0
    9118:	|  |  |      move.l d0,20(a0)
    911c:	|  +--|----- bra.s 914a <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    911e:	|  |  '----> movea.l 52(sp),a0
    9122:	|  |         movea.l (a0),a0
    9124:	|  |         movea.l (a0),a0
    9126:	|  |         movea.l (a0),a0
    9128:	|  |         movea.l 16(a0),a0
    912c:	|  |         move.l 8(sp),d1
    9130:	|  |         move.l d1,d0
    9132:	|  |         lsl.l #3,d0
    9134:	|  |         sub.l d1,d0
    9136:	|  |         add.l d0,d0
    9138:	|  |         add.l d0,d0
    913a:	|  |         adda.l d0,a0
    913c:	|  |         move.l 12(a0),d0
    9140:	|  |         addq.l #5,d0
    9142:	|  |         movea.l 16(sp),a0
    9146:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    914a:	|  '-------> move.l #108552,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9152:	|        ,-- bra.s 9162 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9154:	|     ,--|-> movea.l 32(sp),a0
    9158:	|     |  |   move.l (a0),d0
    915a:	|     |  |   moveq #36,d1
    915c:	|     |  |   add.l d0,d1
    915e:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9162:	|     |  '-> movea.l 32(sp),a0
    9166:	|     |      move.l (a0),d0
    9168:	|     |  ,-- beq.s 9190 <addPerson+0x244>
    916a:	|     |  |   movea.l 32(sp),a0
    916e:	|     |  |   movea.l (a0),a0
    9170:	|     |  |   move.l 4(a0),d2
    9174:	|     |  |   move.l 44(sp),-(sp)
    9178:	|     |  |   jsr 1736c <__floatsisf>
    917e:	|     |  |   addq.l #4,sp
    9180:	|     |  |   move.l d0,-(sp)
    9182:	|     |  |   move.l d2,-(sp)
    9184:	|     |  |   jsr 17592 <__ltsf2>
    918a:	|     |  |   addq.l #8,sp
    918c:	|     |  |   tst.l d0
    918e:	|     '--|-- blt.s 9154 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9190:	|        '-> movea.l 32(sp),a0
    9194:	|            move.l (a0),d0
    9196:	|            movea.l 16(sp),a0
    919a:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    919e:	|            movea.l 32(sp),a0
    91a2:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    91a6:	|            movea.l 16(sp),a0
    91aa:	|            move.l 114(a0),d0
    91ae:	|            sne d0
    91b0:	|            neg.b d0
    91b2:	|            move.b d0,d0
    91b4:	|            andi.w #255,d0
}
    91b8:	'----------> move.l (sp)+,d2
    91ba:	             movea.l (sp)+,a6
    91bc:	             lea 28(sp),sp
    91c0:	             rts

000091c2 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    91c2:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    91c4:	       move.l 8(sp),-(sp)
    91c8:	       jsr a352 <findPerson>
    91ce:	       addq.l #4,sp
    91d0:	       move.l d0,(sp)
    if (moveMe) {
    91d2:	,----- beq.s 9206 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    91d4:	|      movea.l (sp),a0
    91d6:	|      move.l 68(a0),d0
    91da:	|  ,-- beq.s 91ec <animatePerson+0x2a>
    91dc:	|  |   movea.l (sp),a0
    91de:	|  |   move.l 68(a0),d0
    91e2:	|  |   move.l d0,-(sp)
    91e4:	|  |   jsr 43ca <abortFunction>
    91ea:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    91ec:	|  '-> movea.l (sp),a0
    91ee:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    91f2:	|      movea.l (sp),a0
    91f4:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    91f8:	|      movea.l (sp),a0
    91fa:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    91fe:	|      movea.l (sp),a0
    9200:	|      move.l 12(sp),72(a0)
    }
}
    9206:	'----> nop
    9208:	       addq.l #4,sp
    920a:	       rts

0000920c <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    920c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    920e:	       move.l 8(sp),-(sp)
    9212:	       jsr a352 <findPerson>
    9218:	       addq.l #4,sp
    921a:	       move.l d0,(sp)
    if (moveMe) {
    921c:	,----- beq.s 925e <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    921e:	|      movea.l (sp),a0
    9220:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9224:	|      movea.l (sp),a0
    9226:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    922c:	|      move.l (sp),-(sp)
    922e:	|      jsr ac28 <rethinkAngle>
    9234:	|      addq.l #4,sp
        if (moveMe->walking) {
    9236:	|      movea.l (sp),a0
    9238:	|      move.w 64(a0),d0
    923c:	|  ,-- beq.s 9250 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    923e:	|  |   pea 1 <_start+0x1>
    9242:	|  |   move.l 4(sp),-(sp)
    9246:	|  |   jsr 7e28 <setFrames>
    924c:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    924e:	+--|-- bra.s 925e <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9250:	|  '-> clr.l -(sp)
    9252:	|      move.l 4(sp),-(sp)
    9256:	|      jsr 7e28 <setFrames>
    925c:	|      addq.l #8,sp
}
    925e:	'----> nop
    9260:	       addq.l #4,sp
    9262:	       rts

00009264 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9264:	             lea -36(sp),sp
    9268:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    926a:	             movea.l 44(sp),a0
    926e:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9274:	             moveq #12,d0
    9276:	             move.l d0,28(sp)
    927a:	             clr.l 24(sp)
    927e:	             move.l 1a7a4 <SysBase>,d0
    9284:	             movea.l d0,a6
    9286:	             move.l 28(sp),d0
    928a:	             move.l 24(sp),d1
    928e:	             jsr -684(a6)
    9292:	             move.l d0,20(sp)
    9296:	             move.l 20(sp),d0
    929a:	             move.l d0,16(sp)
	if (!(newAnim)) {
    929e:	         ,-- bne.s 92b4 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    92a0:	         |   pea 18dcd <PutChar+0x13f1>
    92a6:	         |   jsr 16f3a <KPrintF>
    92ac:	         |   addq.l #4,sp
		return NULL;
    92ae:	         |   moveq #0,d0
    92b0:	,--------|-- bra.w 9406 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    92b4:	|        '-> movea.l 44(sp),a0
    92b8:	|            move.l (a0),d0
    92ba:	|            movea.l 16(sp),a0
    92be:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    92c0:	|            movea.l 16(sp),a0
    92c4:	|            movea.l (a0),a0
    92c6:	|            move.l 4(a0),d0
    92ca:	|            addq.l #1,d0
    92cc:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    92d0:	|            movea.l 16(sp),a0
    92d4:	|            move.l 32(sp),8(a0)

	if (num) {
    92da:	|  ,-------- beq.w 93fa <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    92de:	|  |         move.l 32(sp),d1
    92e2:	|  |         move.l d1,d0
    92e4:	|  |         add.l d0,d0
    92e6:	|  |         add.l d1,d0
    92e8:	|  |         add.l d0,d0
    92ea:	|  |         add.l d0,d0
    92ec:	|  |         move.l d0,12(sp)
    92f0:	|  |         clr.l 8(sp)
    92f4:	|  |         move.l 1a7a4 <SysBase>,d0
    92fa:	|  |         movea.l d0,a6
    92fc:	|  |         move.l 12(sp),d0
    9300:	|  |         move.l 8(sp),d1
    9304:	|  |         jsr -684(a6)
    9308:	|  |         move.l d0,4(sp)
    930c:	|  |         move.l 4(sp),d0
    9310:	|  |         movea.l 16(sp),a0
    9314:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9318:	|  |         movea.l 16(sp),a0
    931c:	|  |         move.l 4(a0),d0
    9320:	|  |     ,-- bne.s 9336 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9322:	|  |     |   pea 18dcd <PutChar+0x13f1>
    9328:	|  |     |   jsr 16f3a <KPrintF>
    932e:	|  |     |   addq.l #4,sp
			return NULL;
    9330:	|  |     |   moveq #0,d0
    9332:	+--|-----|-- bra.w 9406 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9336:	|  |     '-> clr.l 36(sp)
    933a:	|  |     ,-- bra.w 93ec <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    933e:	|  |  ,--|-> movea.l 44(sp),a0
    9342:	|  |  |  |   movea.l 4(a0),a0
    9346:	|  |  |  |   move.l 36(sp),d1
    934a:	|  |  |  |   move.l d1,d0
    934c:	|  |  |  |   add.l d0,d0
    934e:	|  |  |  |   add.l d1,d0
    9350:	|  |  |  |   add.l d0,d0
    9352:	|  |  |  |   add.l d0,d0
    9354:	|  |  |  |   lea (0,a0,d0.l),a1
    9358:	|  |  |  |   movea.l 16(sp),a0
    935c:	|  |  |  |   movea.l 4(a0),a0
    9360:	|  |  |  |   move.l 36(sp),d1
    9364:	|  |  |  |   move.l d1,d0
    9366:	|  |  |  |   add.l d0,d0
    9368:	|  |  |  |   add.l d1,d0
    936a:	|  |  |  |   add.l d0,d0
    936c:	|  |  |  |   add.l d0,d0
    936e:	|  |  |  |   adda.l d0,a0
    9370:	|  |  |  |   move.l (a1),d0
    9372:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9374:	|  |  |  |   movea.l 44(sp),a0
    9378:	|  |  |  |   movea.l 4(a0),a0
    937c:	|  |  |  |   move.l 36(sp),d1
    9380:	|  |  |  |   move.l d1,d0
    9382:	|  |  |  |   add.l d0,d0
    9384:	|  |  |  |   add.l d1,d0
    9386:	|  |  |  |   add.l d0,d0
    9388:	|  |  |  |   add.l d0,d0
    938a:	|  |  |  |   lea (0,a0,d0.l),a1
    938e:	|  |  |  |   movea.l 16(sp),a0
    9392:	|  |  |  |   movea.l 4(a0),a0
    9396:	|  |  |  |   move.l 36(sp),d1
    939a:	|  |  |  |   move.l d1,d0
    939c:	|  |  |  |   add.l d0,d0
    939e:	|  |  |  |   add.l d1,d0
    93a0:	|  |  |  |   add.l d0,d0
    93a2:	|  |  |  |   add.l d0,d0
    93a4:	|  |  |  |   adda.l d0,a0
    93a6:	|  |  |  |   move.l 4(a1),d0
    93aa:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    93ae:	|  |  |  |   movea.l 44(sp),a0
    93b2:	|  |  |  |   movea.l 4(a0),a0
    93b6:	|  |  |  |   move.l 36(sp),d1
    93ba:	|  |  |  |   move.l d1,d0
    93bc:	|  |  |  |   add.l d0,d0
    93be:	|  |  |  |   add.l d1,d0
    93c0:	|  |  |  |   add.l d0,d0
    93c2:	|  |  |  |   add.l d0,d0
    93c4:	|  |  |  |   lea (0,a0,d0.l),a1
    93c8:	|  |  |  |   movea.l 16(sp),a0
    93cc:	|  |  |  |   movea.l 4(a0),a0
    93d0:	|  |  |  |   move.l 36(sp),d1
    93d4:	|  |  |  |   move.l d1,d0
    93d6:	|  |  |  |   add.l d0,d0
    93d8:	|  |  |  |   add.l d1,d0
    93da:	|  |  |  |   add.l d0,d0
    93dc:	|  |  |  |   add.l d0,d0
    93de:	|  |  |  |   adda.l d0,a0
    93e0:	|  |  |  |   move.l 8(a1),d0
    93e4:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    93e8:	|  |  |  |   addq.l #1,36(sp)
    93ec:	|  |  |  '-> move.l 36(sp),d0
    93f0:	|  |  |      cmp.l 32(sp),d0
    93f4:	|  |  '----- blt.w 933e <copyAnim+0xda>
    93f8:	|  |     ,-- bra.s 9402 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    93fa:	|  '-----|-> movea.l 16(sp),a0
    93fe:	|        |   clr.l 4(a0)
	}

	return newAnim;
    9402:	|        '-> move.l 16(sp),d0
}
    9406:	'----------> movea.l (sp)+,a6
    9408:	             lea 36(sp),sp
    940c:	             rts

0000940e <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    940e:	                lea -44(sp),sp
    9412:	                move.l a6,-(sp)
    9414:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9416:	                moveq #12,d0
    9418:	                move.l d0,40(sp)
    941c:	                clr.l 36(sp)
    9420:	                move.l 1a7a4 <SysBase>,d0
    9426:	                movea.l d0,a6
    9428:	                move.l 40(sp),d0
    942c:	                move.l 36(sp),d1
    9430:	                jsr -684(a6)
    9434:	                move.l d0,32(sp)
    9438:	                move.l 32(sp),d0
    943c:	                move.l d0,28(sp)
	if( !newP) {
    9440:	            ,-- bne.s 9456 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9442:	            |   pea 18dee <PutChar+0x1412>
    9448:	            |   jsr 16f3a <KPrintF>
    944e:	            |   addq.l #4,sp
		return NULL;
    9450:	            |   moveq #0,d0
    9452:	,-----------|-- bra.w 9626 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9456:	|           '-> movea.l 28(sp),a0
    945a:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9460:	|               move.l 56(sp),d1
    9464:	|               move.l d1,d0
    9466:	|               add.l d0,d0
    9468:	|               add.l d1,d0
    946a:	|               add.l d0,d0
    946c:	|               add.l d0,d0
    946e:	|               move.l d0,24(sp)
    9472:	|               clr.l 20(sp)
    9476:	|               move.l 1a7a4 <SysBase>,d0
    947c:	|               movea.l d0,a6
    947e:	|               move.l 24(sp),d0
    9482:	|               move.l 20(sp),d1
    9486:	|               jsr -684(a6)
    948a:	|               move.l d0,16(sp)
    948e:	|               move.l 16(sp),d0
    9492:	|               movea.l 28(sp),a0
    9496:	|               move.l d0,4(a0)
	if( !newP->frames) {
    949a:	|               movea.l 28(sp),a0
    949e:	|               move.l 4(a0),d0
    94a2:	|           ,-- bne.s 94b8 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    94a4:	|           |   pea 18dee <PutChar+0x1412>
    94aa:	|           |   jsr 16f3a <KPrintF>
    94b0:	|           |   addq.l #4,sp
		return NULL;
    94b2:	|           |   moveq #0,d0
    94b4:	+-----------|-- bra.w 9626 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    94b8:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    94be:	|               movea.l 60(sp),a0
    94c2:	|               move.l (a0),44(sp)
	while (a) {
    94c6:	|     ,-------- bra.w 961a <createPersonaAnim+0x20c>
		a --;
    94ca:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    94ce:	|  |  |         movea.l 28(sp),a0
    94d2:	|  |  |         movea.l 4(a0),a0
    94d6:	|  |  |         move.l 48(sp),d1
    94da:	|  |  |         move.l d1,d0
    94dc:	|  |  |         add.l d0,d0
    94de:	|  |  |         add.l d1,d0
    94e0:	|  |  |         add.l d0,d0
    94e2:	|  |  |         add.l d0,d0
    94e4:	|  |  |         adda.l d0,a0
    94e6:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    94ea:	|  |  |         movea.l 44(sp),a0
    94ee:	|  |  |         move.l (a0),d0
    94f0:	|  |  |         moveq #5,d1
    94f2:	|  |  |         cmp.l d0,d1
    94f4:	|  |  |     ,-- bne.s 9520 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    94f6:	|  |  |     |   movea.l 28(sp),a0
    94fa:	|  |  |     |   movea.l 4(a0),a0
    94fe:	|  |  |     |   move.l 48(sp),d1
    9502:	|  |  |     |   move.l d1,d0
    9504:	|  |  |     |   add.l d0,d0
    9506:	|  |  |     |   add.l d1,d0
    9508:	|  |  |     |   add.l d0,d0
    950a:	|  |  |     |   add.l d0,d0
    950c:	|  |  |     |   lea (0,a0,d0.l),a1
    9510:	|  |  |     |   movea.l 44(sp),a0
    9514:	|  |  |     |   move.l 4(a0),d0
    9518:	|  |  |     |   move.l d0,8(a1)
    951c:	|  |  |  ,--|-- bra.w 95c8 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9520:	|  |  |  |  '-> movea.l 44(sp),a0
    9524:	|  |  |  |      move.l (a0),d0
    9526:	|  |  |  |      moveq #2,d1
    9528:	|  |  |  |      cmp.l d0,d1
    952a:	|  |  |  |  ,-- bne.s 9556 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    952c:	|  |  |  |  |   movea.l 44(sp),a0
    9530:	|  |  |  |  |   move.l 4(a0),d2
    9534:	|  |  |  |  |   movea.l 28(sp),a0
    9538:	|  |  |  |  |   movea.l 4(a0),a0
    953c:	|  |  |  |  |   move.l 48(sp),d1
    9540:	|  |  |  |  |   move.l d1,d0
    9542:	|  |  |  |  |   add.l d0,d0
    9544:	|  |  |  |  |   add.l d1,d0
    9546:	|  |  |  |  |   add.l d0,d0
    9548:	|  |  |  |  |   add.l d0,d0
    954a:	|  |  |  |  |   adda.l d0,a0
    954c:	|  |  |  |  |   move.l d2,d0
    954e:	|  |  |  |  |   neg.l d0
    9550:	|  |  |  |  |   move.l d0,8(a0)
    9554:	|  |  |  +--|-- bra.s 95c8 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9556:	|  |  |  |  '-> movea.l 44(sp),a0
    955a:	|  |  |  |      move.l (a0),d0
    955c:	|  |  |  |      moveq #6,d1
    955e:	|  |  |  |      cmp.l d0,d1
    9560:	|  |  |  |  ,-- bne.s 95a8 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9562:	|  |  |  |  |   movea.l 44(sp),a0
    9566:	|  |  |  |  |   movea.l 4(a0),a0
    956a:	|  |  |  |  |   move.l (a0),d0
    956c:	|  |  |  |  |   move.l d0,-(sp)
    956e:	|  |  |  |  |   pea 1 <_start+0x1>
    9572:	|  |  |  |  |   lea 20(sp),a0
    9576:	|  |  |  |  |   move.l a0,-(sp)
    9578:	|  |  |  |  |   jsr 144ee <getValueType>
    957e:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9582:	|  |  |  |  |   movea.l 44(sp),a0
    9586:	|  |  |  |  |   movea.l 4(a0),a0
    958a:	|  |  |  |  |   movea.l (a0),a0
    958c:	|  |  |  |  |   move.l 8(a0),d0
    9590:	|  |  |  |  |   move.l d0,-(sp)
    9592:	|  |  |  |  |   pea 1 <_start+0x1>
    9596:	|  |  |  |  |   lea 16(sp),a0
    959a:	|  |  |  |  |   move.l a0,-(sp)
    959c:	|  |  |  |  |   jsr 144ee <getValueType>
    95a2:	|  |  |  |  |   lea 12(sp),sp
    95a6:	|  |  |  +--|-- bra.s 95c8 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    95a8:	|  |  |  |  '-> move.l 44(sp),d0
    95ac:	|  |  |  |      move.l d0,-(sp)
    95ae:	|  |  |  |      pea 1 <_start+0x1>
    95b2:	|  |  |  |      lea 20(sp),a0
    95b6:	|  |  |  |      move.l a0,-(sp)
    95b8:	|  |  |  |      jsr 144ee <getValueType>
    95be:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    95c2:	|  |  |  |      moveq #1,d0
    95c4:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    95c8:	|  |  |  '----> move.l 60(sp),-(sp)
    95cc:	|  |  |         jsr 14e72 <trimStack>
    95d2:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    95d4:	|  |  |         movea.l 28(sp),a0
    95d8:	|  |  |         movea.l 4(a0),a0
    95dc:	|  |  |         move.l 48(sp),d1
    95e0:	|  |  |         move.l d1,d0
    95e2:	|  |  |         add.l d0,d0
    95e4:	|  |  |         add.l d1,d0
    95e6:	|  |  |         add.l d0,d0
    95e8:	|  |  |         add.l d0,d0
    95ea:	|  |  |         adda.l d0,a0
    95ec:	|  |  |         move.l 12(sp),d0
    95f0:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    95f2:	|  |  |         movea.l 28(sp),a0
    95f6:	|  |  |         movea.l 4(a0),a0
    95fa:	|  |  |         move.l 48(sp),d1
    95fe:	|  |  |         move.l d1,d0
    9600:	|  |  |         add.l d0,d0
    9602:	|  |  |         add.l d1,d0
    9604:	|  |  |         add.l d0,d0
    9606:	|  |  |         add.l d0,d0
    9608:	|  |  |         adda.l d0,a0
    960a:	|  |  |         move.l 8(sp),d0
    960e:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9612:	|  |  |         movea.l 60(sp),a0
    9616:	|  |  |         move.l (a0),44(sp)
	while (a) {
    961a:	|  |  '-------> tst.l 48(sp)
    961e:	|  '----------- bne.w 94ca <createPersonaAnim+0xbc>
	}

	return newP;
    9622:	|               move.l 28(sp),d0
}
    9626:	'-------------> move.l (sp)+,d2
    9628:	                movea.l (sp)+,a6
    962a:	                lea 44(sp),sp
    962e:	                rts

00009630 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9630:	       lea -12(sp),sp
    9634:	       move.l a6,-(sp)

	if(orig->theSprites)
    9636:	       movea.l 20(sp),a0
    963a:	       move.l (a0),d0
    963c:	   ,-- beq.s 9666 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    963e:	   |   movea.l 20(sp),a0
    9642:	   |   movea.l (a0),a0
    9644:	   |   move.l 4(a0),d0
    9648:	   |   subq.l #1,d0
    964a:	   |   move.l d0,4(a0)
    964e:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9654:	   +-- bne.s 9666 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9656:	   |   movea.l 20(sp),a0
    965a:	   |   move.l (a0),d0
    965c:	   |   move.l d0,-(sp)
    965e:	   |   jsr 8714 <forgetSpriteBank>
    9664:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9666:	   '-> tst.l 20(sp)
    966a:	,----- beq.s 96aa <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    966c:	|      movea.l 20(sp),a0
    9670:	|      move.l 8(a0),d0
    9674:	|  ,-- beq.s 9690 <deleteAnim+0x60>
			FreeVec( orig->frames);
    9676:	|  |   movea.l 20(sp),a0
    967a:	|  |   move.l 4(a0),8(sp)
    9680:	|  |   move.l 1a7a4 <SysBase>,d0
    9686:	|  |   movea.l d0,a6
    9688:	|  |   movea.l 8(sp),a1
    968c:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9690:	|  '-> move.l 20(sp),4(sp)
    9696:	|      move.l 1a7a4 <SysBase>,d0
    969c:	|      movea.l d0,a6
    969e:	|      movea.l 4(sp),a1
    96a2:	|      jsr -690(a6)
		orig = NULL;
    96a6:	|      clr.l 20(sp)
	}	
	
}
    96aa:	'----> nop
    96ac:	       movea.l (sp)+,a6
    96ae:	       lea 12(sp),sp
    96b2:	       rts

000096b4 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    96b4:	          lea -124(sp),sp
    96b8:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    96bc:	          movea.l 152(sp),a0
    96c0:	          move.l 56(a0),d1
    96c4:	          movea.l 152(sp),a0
    96c8:	          move.l 60(a0),d0
    96cc:	          cmp.l d1,d0
    96ce:	      ,-- bne.s 96fe <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    96d0:	      |   movea.l 152(sp),a0
    96d4:	      |   moveq #-1,d0
    96d6:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    96da:	      |   movea.l 152(sp),a0
    96de:	      |   move.l 40(a0),d0
    96e2:	      |   movea.l 152(sp),a0
    96e6:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    96ea:	      |   movea.l 152(sp),a0
    96ee:	      |   move.l 44(a0),d0
    96f2:	      |   movea.l 152(sp),a0
    96f6:	      |   move.l d0,52(a0)
    96fa:	   ,--|-- bra.w 9c64 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    96fe:	   |  '-> movea.l 1a8c0 <currentFloor>,a0
    9704:	   |      move.l 16(a0),d1
    9708:	   |      movea.l 152(sp),a0
    970c:	   |      move.l 56(a0),d0
    9710:	   |      add.l d0,d0
    9712:	   |      add.l d0,d0
    9714:	   |      movea.l d1,a0
    9716:	   |      adda.l d0,a0
    9718:	   |      move.l (a0),d1
    971a:	   |      movea.l 152(sp),a0
    971e:	   |      move.l 60(a0),d0
    9722:	   |      add.l d0,d0
    9724:	   |      add.l d0,d0
    9726:	   |      movea.l d1,a0
    9728:	   |      adda.l d0,a0
    972a:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    972e:	   |      moveq #-1,d0
    9730:	   |      cmp.l 144(sp),d0
    9734:	   |  ,-- bne.s 973c <doBorderStuff+0x88>
    9736:	   |  |   clr.w d0
    9738:	,--|--|-- bra.w 9d64 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    973c:	|  |  '-> movea.l 1a8c0 <currentFloor>,a0
    9742:	|  |      move.l 12(a0),d1
    9746:	|  |      move.l 144(sp),d0
    974a:	|  |      lsl.l #3,d0
    974c:	|  |      add.l d0,d1
    974e:	|  |      movea.l 1a8c0 <currentFloor>,a0
    9754:	|  |      movea.l 12(a0),a1
    9758:	|  |      movea.l 152(sp),a0
    975c:	|  |      move.l 56(a0),d0
    9760:	|  |      lsl.l #3,d0
    9762:	|  |      add.l a1,d0
    9764:	|  |      lea 40(sp),a0
    9768:	|  |      move.l a0,-(sp)
    976a:	|  |      lea 48(sp),a0
    976e:	|  |      move.l a0,-(sp)
    9770:	|  |      move.l d1,-(sp)
    9772:	|  |      move.l d0,-(sp)
    9774:	|  |      jsr 161bc <getMatchingCorners>
    977a:	|  |      lea 16(sp),sp
    977e:	|  |      tst.w d0
    9780:	|  |  ,-- bne.s 9796 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9782:	|  |  |   pea 18e18 <PutChar+0x143c>
    9788:	|  |  |   jsr 16f3a <KPrintF>
    978e:	|  |  |   addq.l #4,sp
            return FALSE;
    9790:	|  |  |   clr.w d0
    9792:	+--|--|-- bra.w 9d64 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9796:	|  |  '-> movea.l 152(sp),a0
    979a:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    97a0:	|  |      movea.l 152(sp),a0
    97a4:	|  |      move.l (a0),d0
    97a6:	|  |      move.l d0,-(sp)
    97a8:	|  |      jsr 17304 <__fixsfsi>
    97ae:	|  |      addq.l #4,sp
    97b0:	|  |      move.l d0,140(sp)
    97b4:	|  |      movea.l 152(sp),a0
    97b8:	|  |      move.l 4(a0),d0
    97bc:	|  |      move.l d0,-(sp)
    97be:	|  |      jsr 17304 <__fixsfsi>
    97c4:	|  |      addq.l #4,sp
    97c6:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    97ca:	|  |      movea.l 152(sp),a0
    97ce:	|  |      move.l 40(a0),132(sp)
    97d4:	|  |      movea.l 152(sp),a0
    97d8:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    97de:	|  |      movea.l 1a8c0 <currentFloor>,a0
    97e4:	|  |      move.l 4(a0),d1
    97e8:	|  |      move.l 44(sp),d0
    97ec:	|  |      lsl.l #3,d0
    97ee:	|  |      movea.l d1,a0
    97f0:	|  |      adda.l d0,a0
    97f2:	|  |      move.l (a0),124(sp)
    97f6:	|  |      movea.l 1a8c0 <currentFloor>,a0
    97fc:	|  |      move.l 4(a0),d1
    9800:	|  |      move.l 44(sp),d0
    9804:	|  |      lsl.l #3,d0
    9806:	|  |      movea.l d1,a0
    9808:	|  |      adda.l d0,a0
    980a:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9810:	|  |      movea.l 1a8c0 <currentFloor>,a0
    9816:	|  |      move.l 4(a0),d1
    981a:	|  |      move.l 40(sp),d0
    981e:	|  |      lsl.l #3,d0
    9820:	|  |      movea.l d1,a0
    9822:	|  |      adda.l d0,a0
    9824:	|  |      move.l (a0),116(sp)
    9828:	|  |      movea.l 1a8c0 <currentFloor>,a0
    982e:	|  |      move.l 4(a0),d1
    9832:	|  |      move.l 40(sp),d0
    9836:	|  |      lsl.l #3,d0
    9838:	|  |      movea.l d1,a0
    983a:	|  |      adda.l d0,a0
    983c:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9842:	|  |      move.l 140(sp),d0
    9846:	|  |      sub.l 132(sp),d0
    984a:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    984e:	|  |      move.l 136(sp),d0
    9852:	|  |      sub.l 128(sp),d0
    9856:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    985a:	|  |      move.l 116(sp),d0
    985e:	|  |      sub.l 124(sp),d0
    9862:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9866:	|  |      move.l 112(sp),d0
    986a:	|  |      sub.l 120(sp),d0
    986e:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9872:	|  |      move.l 124(sp),d0
    9876:	|  |      sub.l 140(sp),d0
    987a:	|  |      move.l 104(sp),-(sp)
    987e:	|  |      move.l d0,-(sp)
    9880:	|  |      jsr 178c6 <__mulsi3>
    9886:	|  |      addq.l #8,sp
    9888:	|  |      move.l d0,d2
    988a:	|  |      move.l 120(sp),d0
    988e:	|  |      sub.l 136(sp),d0
    9892:	|  |      move.l 108(sp),-(sp)
    9896:	|  |      move.l d0,-(sp)
    9898:	|  |      jsr 178c6 <__mulsi3>
    989e:	|  |      addq.l #8,sp
    98a0:	|  |      move.l d2,d1
    98a2:	|  |      sub.l d0,d1
    98a4:	|  |      move.l d1,-(sp)
    98a6:	|  |      jsr 1732c <__floatsidf>
    98ac:	|  |      addq.l #4,sp
    98ae:	|  |      move.l d0,32(sp)
    98b2:	|  |      move.l d1,36(sp)
    98b6:	|  |      move.l 32(sp),88(sp)
    98bc:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    98c2:	|  |      move.l 96(sp),-(sp)
    98c6:	|  |      move.l 112(sp),-(sp)
    98ca:	|  |      jsr 178c6 <__mulsi3>
    98d0:	|  |      addq.l #8,sp
    98d2:	|  |      move.l d0,d2
    98d4:	|  |      move.l 100(sp),-(sp)
    98d8:	|  |      move.l 108(sp),-(sp)
    98dc:	|  |      jsr 178c6 <__mulsi3>
    98e2:	|  |      addq.l #8,sp
    98e4:	|  |      move.l d2,d1
    98e6:	|  |      sub.l d0,d1
    98e8:	|  |      move.l d1,-(sp)
    98ea:	|  |      jsr 1732c <__floatsidf>
    98f0:	|  |      addq.l #4,sp
    98f2:	|  |      move.l d1,-(sp)
    98f4:	|  |      move.l d0,-(sp)
    98f6:	|  |      move.l 100(sp),-(sp)
    98fa:	|  |      move.l 100(sp),-(sp)
    98fe:	|  |      jsr 171c0 <__divdf3>
    9904:	|  |      lea 16(sp),sp
    9908:	|  |      move.l d0,24(sp)
    990c:	|  |      move.l d1,28(sp)
    9910:	|  |      move.l 24(sp),88(sp)
    9916:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    991c:	|  |      clr.l -(sp)
    991e:	|  |      clr.l -(sp)
    9920:	|  |      move.l 100(sp),-(sp)
    9924:	|  |      move.l 100(sp),-(sp)
    9928:	|  |      jsr 1748a <__gtdf2>
    992e:	|  |      lea 16(sp),sp
    9932:	|  |      tst.l d0
    9934:	|  |  ,-- ble.w 9a0c <doBorderStuff+0x358>
    9938:	|  |  |   clr.l -(sp)
    993a:	|  |  |   move.l #1072693248,-(sp)
    9940:	|  |  |   move.l 100(sp),-(sp)
    9944:	|  |  |   move.l 100(sp),-(sp)
    9948:	|  |  |   jsr 17544 <__ltdf2>
    994e:	|  |  |   lea 16(sp),sp
    9952:	|  |  |   tst.l d0
    9954:	|  |  +-- bge.w 9a0c <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9958:	|  |  |   move.l 124(sp),-(sp)
    995c:	|  |  |   jsr 1732c <__floatsidf>
    9962:	|  |  |   addq.l #4,sp
    9964:	|  |  |   move.l d0,d2
    9966:	|  |  |   move.l d1,d3
    9968:	|  |  |   move.l 100(sp),-(sp)
    996c:	|  |  |   jsr 1732c <__floatsidf>
    9972:	|  |  |   addq.l #4,sp
    9974:	|  |  |   move.l 92(sp),-(sp)
    9978:	|  |  |   move.l 92(sp),-(sp)
    997c:	|  |  |   move.l d1,-(sp)
    997e:	|  |  |   move.l d0,-(sp)
    9980:	|  |  |   jsr 173bc <__muldf3>
    9986:	|  |  |   lea 16(sp),sp
    998a:	|  |  |   move.l d1,-(sp)
    998c:	|  |  |   move.l d0,-(sp)
    998e:	|  |  |   move.l d3,-(sp)
    9990:	|  |  |   move.l d2,-(sp)
    9992:	|  |  |   jsr 1715e <__adddf3>
    9998:	|  |  |   lea 16(sp),sp
    999c:	|  |  |   move.l d1,-(sp)
    999e:	|  |  |   move.l d0,-(sp)
    99a0:	|  |  |   jsr 172ce <__fixdfsi>
    99a6:	|  |  |   addq.l #8,sp
    99a8:	|  |  |   movea.l 152(sp),a0
    99ac:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    99b0:	|  |  |   move.l 120(sp),-(sp)
    99b4:	|  |  |   jsr 1732c <__floatsidf>
    99ba:	|  |  |   addq.l #4,sp
    99bc:	|  |  |   move.l d0,d2
    99be:	|  |  |   move.l d1,d3
    99c0:	|  |  |   move.l 96(sp),-(sp)
    99c4:	|  |  |   jsr 1732c <__floatsidf>
    99ca:	|  |  |   addq.l #4,sp
    99cc:	|  |  |   move.l 92(sp),-(sp)
    99d0:	|  |  |   move.l 92(sp),-(sp)
    99d4:	|  |  |   move.l d1,-(sp)
    99d6:	|  |  |   move.l d0,-(sp)
    99d8:	|  |  |   jsr 173bc <__muldf3>
    99de:	|  |  |   lea 16(sp),sp
    99e2:	|  |  |   move.l d1,-(sp)
    99e4:	|  |  |   move.l d0,-(sp)
    99e6:	|  |  |   move.l d3,-(sp)
    99e8:	|  |  |   move.l d2,-(sp)
    99ea:	|  |  |   jsr 1715e <__adddf3>
    99f0:	|  |  |   lea 16(sp),sp
    99f4:	|  |  |   move.l d1,-(sp)
    99f6:	|  |  |   move.l d0,-(sp)
    99f8:	|  |  |   jsr 172ce <__fixdfsi>
    99fe:	|  |  |   addq.l #8,sp
    9a00:	|  |  |   movea.l 152(sp),a0
    9a04:	|  |  |   move.l d0,52(a0)
    9a08:	|  +--|-- bra.w 9c64 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9a0c:	|  |  '-> move.l 140(sp),d0
    9a10:	|  |      sub.l 124(sp),d0
    9a14:	|  |      move.l d0,84(sp)
    9a18:	|  |      move.l 140(sp),d0
    9a1c:	|  |      sub.l 116(sp),d0
    9a20:	|  |      move.l d0,80(sp)
    9a24:	|  |      move.l 132(sp),d0
    9a28:	|  |      sub.l 124(sp),d0
    9a2c:	|  |      move.l d0,76(sp)
    9a30:	|  |      move.l 132(sp),d0
    9a34:	|  |      sub.l 116(sp),d0
    9a38:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9a3c:	|  |      move.l 136(sp),d0
    9a40:	|  |      sub.l 120(sp),d0
    9a44:	|  |      move.l d0,68(sp)
    9a48:	|  |      move.l 136(sp),d0
    9a4c:	|  |      sub.l 112(sp),d0
    9a50:	|  |      move.l d0,64(sp)
    9a54:	|  |      move.l 128(sp),d0
    9a58:	|  |      sub.l 120(sp),d0
    9a5c:	|  |      move.l d0,60(sp)
    9a60:	|  |      move.l 128(sp),d0
    9a64:	|  |      sub.l 112(sp),d0
    9a68:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9a6c:	|  |      move.l 84(sp),-(sp)
    9a70:	|  |      move.l 88(sp),-(sp)
    9a74:	|  |      jsr 178c6 <__mulsi3>
    9a7a:	|  |      addq.l #8,sp
    9a7c:	|  |      move.l d0,84(sp)
    9a80:	|  |      move.l 80(sp),-(sp)
    9a84:	|  |      move.l 84(sp),-(sp)
    9a88:	|  |      jsr 178c6 <__mulsi3>
    9a8e:	|  |      addq.l #8,sp
    9a90:	|  |      move.l d0,80(sp)
    9a94:	|  |      move.l 76(sp),-(sp)
    9a98:	|  |      move.l 80(sp),-(sp)
    9a9c:	|  |      jsr 178c6 <__mulsi3>
    9aa2:	|  |      addq.l #8,sp
    9aa4:	|  |      move.l d0,76(sp)
    9aa8:	|  |      move.l 72(sp),-(sp)
    9aac:	|  |      move.l 76(sp),-(sp)
    9ab0:	|  |      jsr 178c6 <__mulsi3>
    9ab6:	|  |      addq.l #8,sp
    9ab8:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9abc:	|  |      move.l 68(sp),-(sp)
    9ac0:	|  |      move.l 72(sp),-(sp)
    9ac4:	|  |      jsr 178c6 <__mulsi3>
    9aca:	|  |      addq.l #8,sp
    9acc:	|  |      move.l d0,68(sp)
    9ad0:	|  |      move.l 64(sp),-(sp)
    9ad4:	|  |      move.l 68(sp),-(sp)
    9ad8:	|  |      jsr 178c6 <__mulsi3>
    9ade:	|  |      addq.l #8,sp
    9ae0:	|  |      move.l d0,64(sp)
    9ae4:	|  |      move.l 60(sp),-(sp)
    9ae8:	|  |      move.l 64(sp),-(sp)
    9aec:	|  |      jsr 178c6 <__mulsi3>
    9af2:	|  |      addq.l #8,sp
    9af4:	|  |      move.l d0,60(sp)
    9af8:	|  |      move.l 56(sp),-(sp)
    9afc:	|  |      move.l 60(sp),-(sp)
    9b00:	|  |      jsr 178c6 <__mulsi3>
    9b06:	|  |      addq.l #8,sp
    9b08:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9b0c:	|  |      move.l 84(sp),-(sp)
    9b10:	|  |      jsr 1732c <__floatsidf>
    9b16:	|  |      addq.l #4,sp
    9b18:	|  |      move.l d0,d2
    9b1a:	|  |      move.l d1,d3
    9b1c:	|  |      move.l 68(sp),-(sp)
    9b20:	|  |      jsr 1732c <__floatsidf>
    9b26:	|  |      addq.l #4,sp
    9b28:	|  |      move.l d1,-(sp)
    9b2a:	|  |      move.l d0,-(sp)
    9b2c:	|  |      move.l d3,-(sp)
    9b2e:	|  |      move.l d2,-(sp)
    9b30:	|  |      jsr 1715e <__adddf3>
    9b36:	|  |      lea 16(sp),sp
    9b3a:	|  |      move.l d1,-(sp)
    9b3c:	|  |      move.l d0,-(sp)
    9b3e:	|  |      jsr 1787c <sqrt>
    9b44:	|  |      addq.l #8,sp
    9b46:	|  |      move.l d0,d2
    9b48:	|  |      move.l d1,d3
    9b4a:	|  |      move.l 76(sp),-(sp)
    9b4e:	|  |      jsr 1732c <__floatsidf>
    9b54:	|  |      addq.l #4,sp
    9b56:	|  |      move.l d0,d4
    9b58:	|  |      move.l d1,d5
    9b5a:	|  |      move.l 60(sp),-(sp)
    9b5e:	|  |      jsr 1732c <__floatsidf>
    9b64:	|  |      addq.l #4,sp
    9b66:	|  |      move.l d1,-(sp)
    9b68:	|  |      move.l d0,-(sp)
    9b6a:	|  |      move.l d5,-(sp)
    9b6c:	|  |      move.l d4,-(sp)
    9b6e:	|  |      jsr 1715e <__adddf3>
    9b74:	|  |      lea 16(sp),sp
    9b78:	|  |      move.l d1,-(sp)
    9b7a:	|  |      move.l d0,-(sp)
    9b7c:	|  |      jsr 1787c <sqrt>
    9b82:	|  |      addq.l #8,sp
    9b84:	|  |      move.l d1,-(sp)
    9b86:	|  |      move.l d0,-(sp)
    9b88:	|  |      move.l d3,-(sp)
    9b8a:	|  |      move.l d2,-(sp)
    9b8c:	|  |      jsr 1715e <__adddf3>
    9b92:	|  |      lea 16(sp),sp
    9b96:	|  |      move.l d0,d2
    9b98:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9b9a:	|  |      move.l 80(sp),-(sp)
    9b9e:	|  |      jsr 1732c <__floatsidf>
    9ba4:	|  |      addq.l #4,sp
    9ba6:	|  |      move.l d0,d4
    9ba8:	|  |      move.l d1,d5
    9baa:	|  |      move.l 64(sp),-(sp)
    9bae:	|  |      jsr 1732c <__floatsidf>
    9bb4:	|  |      addq.l #4,sp
    9bb6:	|  |      move.l d1,-(sp)
    9bb8:	|  |      move.l d0,-(sp)
    9bba:	|  |      move.l d5,-(sp)
    9bbc:	|  |      move.l d4,-(sp)
    9bbe:	|  |      jsr 1715e <__adddf3>
    9bc4:	|  |      lea 16(sp),sp
    9bc8:	|  |      move.l d1,-(sp)
    9bca:	|  |      move.l d0,-(sp)
    9bcc:	|  |      jsr 1787c <sqrt>
    9bd2:	|  |      addq.l #8,sp
    9bd4:	|  |      move.l d0,d4
    9bd6:	|  |      move.l d1,d5
    9bd8:	|  |      move.l 72(sp),-(sp)
    9bdc:	|  |      jsr 1732c <__floatsidf>
    9be2:	|  |      addq.l #4,sp
    9be4:	|  |      move.l d0,d6
    9be6:	|  |      move.l d1,d7
    9be8:	|  |      move.l 56(sp),-(sp)
    9bec:	|  |      jsr 1732c <__floatsidf>
    9bf2:	|  |      addq.l #4,sp
    9bf4:	|  |      move.l d1,-(sp)
    9bf6:	|  |      move.l d0,-(sp)
    9bf8:	|  |      move.l d7,-(sp)
    9bfa:	|  |      move.l d6,-(sp)
    9bfc:	|  |      jsr 1715e <__adddf3>
    9c02:	|  |      lea 16(sp),sp
    9c06:	|  |      move.l d1,-(sp)
    9c08:	|  |      move.l d0,-(sp)
    9c0a:	|  |      jsr 1787c <sqrt>
    9c10:	|  |      addq.l #8,sp
    9c12:	|  |      move.l d1,-(sp)
    9c14:	|  |      move.l d0,-(sp)
    9c16:	|  |      move.l d5,-(sp)
    9c18:	|  |      move.l d4,-(sp)
    9c1a:	|  |      jsr 1715e <__adddf3>
    9c20:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9c24:	|  |      move.l d1,-(sp)
    9c26:	|  |      move.l d0,-(sp)
    9c28:	|  |      move.l d3,-(sp)
    9c2a:	|  |      move.l d2,-(sp)
    9c2c:	|  |      jsr 17544 <__ltdf2>
    9c32:	|  |      lea 16(sp),sp
    9c36:	|  |      tst.l d0
    9c38:	|  |  ,-- bge.s 9c50 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9c3a:	|  |  |   movea.l 152(sp),a0
    9c3e:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9c44:	|  |  |   movea.l 152(sp),a0
    9c48:	|  |  |   move.l 120(sp),52(a0)
    9c4e:	|  +--|-- bra.s 9c64 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9c50:	|  |  '-> movea.l 152(sp),a0
    9c54:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9c5a:	|  |      movea.l 152(sp),a0
    9c5e:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9c64:	|  '----> movea.l 152(sp),a0
    9c68:	|         move.l 52(a0),d0
    9c6c:	|         move.l d0,-(sp)
    9c6e:	|         jsr 1736c <__floatsisf>
    9c74:	|         addq.l #4,sp
    9c76:	|         move.l d0,d1
    9c78:	|         movea.l 152(sp),a0
    9c7c:	|         move.l 4(a0),d0
    9c80:	|         move.l d0,-(sp)
    9c82:	|         move.l d1,-(sp)
    9c84:	|         jsr 17660 <__subsf3>
    9c8a:	|         addq.l #8,sp
    9c8c:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9c90:	|         movea.l 152(sp),a0
    9c94:	|         move.l (a0),d2
    9c96:	|         movea.l 152(sp),a0
    9c9a:	|         move.l 48(a0),d0
    9c9e:	|         move.l d0,-(sp)
    9ca0:	|         jsr 1736c <__floatsisf>
    9ca6:	|         addq.l #4,sp
    9ca8:	|         move.l d0,-(sp)
    9caa:	|         move.l d2,-(sp)
    9cac:	|         jsr 17660 <__subsf3>
    9cb2:	|         addq.l #8,sp
    9cb4:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9cb8:	|         clr.l -(sp)
    9cba:	|         move.l 52(sp),-(sp)
    9cbe:	|         jsr 175c8 <__nesf2>
    9cc4:	|         addq.l #8,sp
    9cc6:	|         tst.l d0
    9cc8:	|     ,-- bne.s 9cdc <doBorderStuff+0x628>
    9cca:	|     |   clr.l -(sp)
    9ccc:	|     |   move.l 56(sp),-(sp)
    9cd0:	|     |   jsr 175c8 <__nesf2>
    9cd6:	|     |   addq.l #8,sp
    9cd8:	|     |   tst.l d0
    9cda:	|  ,--|-- beq.s 9d52 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9cdc:	|  |  '-> move.l 52(sp),d0
    9ce0:	|  |      move.l d0,-(sp)
    9ce2:	|  |      move.l d0,-(sp)
    9ce4:	|  |      jsr 17128 <__addsf3>
    9cea:	|  |      addq.l #8,sp
    9cec:	|  |      move.l d0,-(sp)
    9cee:	|  |      move.l 52(sp),-(sp)
    9cf2:	|  |      jsr 176cc <atan2f>
    9cf8:	|  |      addq.l #8,sp
    9cfa:	|  |      move.l d0,-(sp)
    9cfc:	|  |      jsr 1728e <__extendsfdf2>
    9d02:	|  |      addq.l #4,sp
    9d04:	|  |      move.l #-1540411785,-(sp)
    9d0a:	|  |      move.l #1078765033,-(sp)
    9d10:	|  |      move.l d1,-(sp)
    9d12:	|  |      move.l d0,-(sp)
    9d14:	|  |      jsr 173bc <__muldf3>
    9d1a:	|  |      lea 16(sp),sp
    9d1e:	|  |      clr.l -(sp)
    9d20:	|  |      move.l #1080459264,-(sp)
    9d26:	|  |      move.l d1,-(sp)
    9d28:	|  |      move.l d0,-(sp)
    9d2a:	|  |      jsr 1715e <__adddf3>
    9d30:	|  |      lea 16(sp),sp
    9d34:	|  |      move.l d1,-(sp)
    9d36:	|  |      move.l d0,-(sp)
    9d38:	|  |      jsr 172ce <__fixdfsi>
    9d3e:	|  |      addq.l #8,sp
    9d40:	|  |      movea.l 152(sp),a0
    9d44:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9d48:	|  |      movea.l 152(sp),a0
    9d4c:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    9d52:	|  '----> pea 1 <_start+0x1>
    9d56:	|         move.l 156(sp),-(sp)
    9d5a:	|         jsr 7e28 <setFrames>
    9d60:	|         addq.l #8,sp
    return TRUE;
    9d62:	|         moveq #1,d0
}
    9d64:	'-------> movem.l (sp)+,d2-d7
    9d68:	          lea 124(sp),sp
    9d6c:	          rts

00009d6e <drawPeople>:

void drawPeople () {
    9d6e:	                   lea -24(sp),sp
    9d72:	                   move.l d2,-(sp)

	shufflePeople ();
    9d74:	                   jsr b80a <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    9d7a:	                   move.l 1a808 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    9d82:	                   clr.l 20(sp)
	overRegion = NULL;
    9d86:	                   clr.l 1a8b8 <overRegion>

	while (thisPerson) {
    9d8c:	   ,-------------- bra.w a33e <drawPeople+0x5d0>
		if (thisPerson -> show) {
    9d90:	,--|-------------> movea.l 24(sp),a0
    9d94:	|  |               move.w 104(a0),d0
    9d98:	|  |  ,----------- beq.w a0f2 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    9d9c:	|  |  |            movea.l 24(sp),a0
    9da0:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    9da6:	|  |  |            movea.l 24(sp),a0
    9daa:	|  |  |            move.l 76(a0),d0
    9dae:	|  |  |            cmp.l 20(sp),d0
    9db2:	|  |  |  ,-------- beq.w 9f80 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    9db6:	|  |  |  |         movea.l 24(sp),a0
    9dba:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    9dbe:	|  |  |  |         movea.l 24(sp),a0
    9dc2:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    9dc8:	|  |  |  |         movea.l 24(sp),a0
    9dcc:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    9dd0:	|  |  |  |         movea.l 20(sp),a0
    9dd4:	|  |  |  |         movea.l 4(a0),a0
    9dd8:	|  |  |  |         move.l 4(a0),d0
    9ddc:	|  |  |  |         movea.l 24(sp),a0
    9de0:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9de4:	|  |  |  |         movea.l 20(sp),a0
    9de8:	|  |  |  |         movea.l 4(a0),a1
    9dec:	|  |  |  |         movea.l 24(sp),a0
    9df0:	|  |  |  |         move.l 84(a0),d0
    9df4:	|  |  |  |         move.l d0,d1
    9df6:	|  |  |  |         move.l d1,d0
    9df8:	|  |  |  |         add.l d0,d0
    9dfa:	|  |  |  |         add.l d1,d0
    9dfc:	|  |  |  |         add.l d0,d0
    9dfe:	|  |  |  |         add.l d0,d0
    9e00:	|  |  |  |         lea (0,a1,d0.l),a0
    9e04:	|  |  |  |         move.l 8(a0),d0
    9e08:	|  |  |  |     ,-- ble.w 9eaa <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9e0c:	|  |  |  |     |   movea.l 20(sp),a0
    9e10:	|  |  |  |     |   movea.l 4(a0),a1
    9e14:	|  |  |  |     |   movea.l 24(sp),a0
    9e18:	|  |  |  |     |   move.l 84(a0),d0
    9e1c:	|  |  |  |     |   move.l d0,d1
    9e1e:	|  |  |  |     |   move.l d1,d0
    9e20:	|  |  |  |     |   add.l d0,d0
    9e22:	|  |  |  |     |   add.l d1,d0
    9e24:	|  |  |  |     |   add.l d0,d0
    9e26:	|  |  |  |     |   add.l d0,d0
    9e28:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9e2c:	|  |  |  |     |   move.l 8(a0),d0
    9e30:	|  |  |  |     |   clr.l -(sp)
    9e32:	|  |  |  |     |   move.l d0,-(sp)
    9e34:	|  |  |  |     |   jsr cf1e <startSound>
    9e3a:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9e3c:	|  |  |  |     |   movea.l 24(sp),a0
    9e40:	|  |  |  |     |   move.l 84(a0),d0
    9e44:	|  |  |  |     |   addq.l #1,d0
    9e46:	|  |  |  |     |   movea.l 24(sp),a0
    9e4a:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9e4e:	|  |  |  |     |   movea.l 24(sp),a0
    9e52:	|  |  |  |     |   move.l 84(a0),d0
    9e56:	|  |  |  |     |   movea.l 24(sp),a0
    9e5a:	|  |  |  |     |   movea.l 72(a0),a0
    9e5e:	|  |  |  |     |   move.l 8(a0),d1
    9e62:	|  |  |  |     |   move.l d1,-(sp)
    9e64:	|  |  |  |     |   move.l d0,-(sp)
    9e66:	|  |  |  |     |   jsr 17972 <__modsi3>
    9e6c:	|  |  |  |     |   addq.l #8,sp
    9e6e:	|  |  |  |     |   movea.l 24(sp),a0
    9e72:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9e76:	|  |  |  |     |   movea.l 24(sp),a0
    9e7a:	|  |  |  |     |   movea.l 72(a0),a0
    9e7e:	|  |  |  |     |   movea.l 4(a0),a1
    9e82:	|  |  |  |     |   movea.l 24(sp),a0
    9e86:	|  |  |  |     |   move.l 84(a0),d0
    9e8a:	|  |  |  |     |   move.l d0,d1
    9e8c:	|  |  |  |     |   move.l d1,d0
    9e8e:	|  |  |  |     |   add.l d0,d0
    9e90:	|  |  |  |     |   add.l d1,d0
    9e92:	|  |  |  |     |   add.l d0,d0
    9e94:	|  |  |  |     |   add.l d0,d0
    9e96:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9e9a:	|  |  |  |     |   move.l 4(a0),d0
    9e9e:	|  |  |  |     |   movea.l 24(sp),a0
    9ea2:	|  |  |  |     |   move.l d0,88(a0)
    9ea6:	|  |  |  |  ,--|-- bra.w 9fe8 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    9eaa:	|  |  |  |  |  '-> movea.l 20(sp),a0
    9eae:	|  |  |  |  |      movea.l 4(a0),a1
    9eb2:	|  |  |  |  |      movea.l 24(sp),a0
    9eb6:	|  |  |  |  |      move.l 84(a0),d0
    9eba:	|  |  |  |  |      move.l d0,d1
    9ebc:	|  |  |  |  |      move.l d1,d0
    9ebe:	|  |  |  |  |      add.l d0,d0
    9ec0:	|  |  |  |  |      add.l d1,d0
    9ec2:	|  |  |  |  |      add.l d0,d0
    9ec4:	|  |  |  |  |      add.l d0,d0
    9ec6:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9eca:	|  |  |  |  |      move.l 8(a0),d0
    9ece:	|  |  |  |  +----- beq.w 9fe8 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    9ed2:	|  |  |  |  |      movea.l 1a774 <noStack>,a1
    9ed8:	|  |  |  |  |      movea.l 20(sp),a0
    9edc:	|  |  |  |  |      move.l 4(a0),d2
    9ee0:	|  |  |  |  |      movea.l 24(sp),a0
    9ee4:	|  |  |  |  |      move.l 84(a0),d0
    9ee8:	|  |  |  |  |      move.l d0,d1
    9eea:	|  |  |  |  |      move.l d1,d0
    9eec:	|  |  |  |  |      add.l d0,d0
    9eee:	|  |  |  |  |      add.l d1,d0
    9ef0:	|  |  |  |  |      add.l d0,d0
    9ef2:	|  |  |  |  |      add.l d0,d0
    9ef4:	|  |  |  |  |      movea.l d2,a0
    9ef6:	|  |  |  |  |      adda.l d0,a0
    9ef8:	|  |  |  |  |      move.l 8(a0),d0
    9efc:	|  |  |  |  |      neg.l d0
    9efe:	|  |  |  |  |      pea 1 <_start+0x1>
    9f02:	|  |  |  |  |      move.l a1,-(sp)
    9f04:	|  |  |  |  |      clr.l -(sp)
    9f06:	|  |  |  |  |      clr.l -(sp)
    9f08:	|  |  |  |  |      move.l d0,-(sp)
    9f0a:	|  |  |  |  |      jsr 6786 <startNewFunctionNum>
    9f10:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    9f14:	|  |  |  |  |      movea.l 24(sp),a0
    9f18:	|  |  |  |  |      move.l 84(a0),d0
    9f1c:	|  |  |  |  |      addq.l #1,d0
    9f1e:	|  |  |  |  |      movea.l 24(sp),a0
    9f22:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9f26:	|  |  |  |  |      movea.l 24(sp),a0
    9f2a:	|  |  |  |  |      move.l 84(a0),d0
    9f2e:	|  |  |  |  |      movea.l 24(sp),a0
    9f32:	|  |  |  |  |      movea.l 72(a0),a0
    9f36:	|  |  |  |  |      move.l 8(a0),d1
    9f3a:	|  |  |  |  |      move.l d1,-(sp)
    9f3c:	|  |  |  |  |      move.l d0,-(sp)
    9f3e:	|  |  |  |  |      jsr 17972 <__modsi3>
    9f44:	|  |  |  |  |      addq.l #8,sp
    9f46:	|  |  |  |  |      movea.l 24(sp),a0
    9f4a:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9f4e:	|  |  |  |  |      movea.l 24(sp),a0
    9f52:	|  |  |  |  |      movea.l 72(a0),a0
    9f56:	|  |  |  |  |      movea.l 4(a0),a1
    9f5a:	|  |  |  |  |      movea.l 24(sp),a0
    9f5e:	|  |  |  |  |      move.l 84(a0),d0
    9f62:	|  |  |  |  |      move.l d0,d1
    9f64:	|  |  |  |  |      move.l d1,d0
    9f66:	|  |  |  |  |      add.l d0,d0
    9f68:	|  |  |  |  |      add.l d1,d0
    9f6a:	|  |  |  |  |      add.l d0,d0
    9f6c:	|  |  |  |  |      add.l d0,d0
    9f6e:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9f72:	|  |  |  |  |      move.l 4(a0),d0
    9f76:	|  |  |  |  |      movea.l 24(sp),a0
    9f7a:	|  |  |  |  |      move.l d0,88(a0)
    9f7e:	|  |  |  |  +----- bra.s 9fe8 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    9f80:	|  |  |  '--|----> movea.l 24(sp),a0
    9f84:	|  |  |     |      move.l (a0),d0
    9f86:	|  |  |     |      movea.l 24(sp),a0
    9f8a:	|  |  |     |      move.l 8(a0),d1
    9f8e:	|  |  |     |      move.l d1,-(sp)
    9f90:	|  |  |     |      move.l d0,-(sp)
    9f92:	|  |  |     |      jsr 17258 <__eqsf2>
    9f98:	|  |  |     |      addq.l #8,sp
    9f9a:	|  |  |     |      tst.l d0
    9f9c:	|  |  |     |  ,-- bne.s 9fe0 <drawPeople+0x272>
    9f9e:	|  |  |     |  |   movea.l 24(sp),a0
    9fa2:	|  |  |     |  |   move.l 4(a0),d0
    9fa6:	|  |  |     |  |   movea.l 24(sp),a0
    9faa:	|  |  |     |  |   move.l 12(a0),d1
    9fae:	|  |  |     |  |   move.l d1,-(sp)
    9fb0:	|  |  |     |  |   move.l d0,-(sp)
    9fb2:	|  |  |     |  |   jsr 17258 <__eqsf2>
    9fb8:	|  |  |     |  |   addq.l #8,sp
    9fba:	|  |  |     |  |   tst.l d0
    9fbc:	|  |  |     |  +-- bne.s 9fe0 <drawPeople+0x272>
    9fbe:	|  |  |     |  |   movea.l 20(sp),a0
    9fc2:	|  |  |     |  |   move.l 8(a0),d0
    9fc6:	|  |  |     |  |   moveq #1,d1
    9fc8:	|  |  |     |  |   cmp.l d0,d1
    9fca:	|  |  |     |  +-- bne.s 9fe0 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    9fcc:	|  |  |     |  |   movea.l 24(sp),a0
    9fd0:	|  |  |     |  |   move.l 16(a0),d0
    9fd4:	|  |  |     |  |   addq.l #1,d0
    9fd6:	|  |  |     |  |   movea.l 24(sp),a0
    9fda:	|  |  |     |  |   move.l d0,16(a0)
    9fde:	|  |  |     +--|-- bra.s 9fe8 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    9fe0:	|  |  |     |  '-> movea.l 24(sp),a0
    9fe4:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    9fe8:	|  |  |     '----> movea.l 24(sp),a0
    9fec:	|  |  |            move.l (a0),d0
    9fee:	|  |  |            movea.l 24(sp),a0
    9ff2:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    9ff6:	|  |  |            movea.l 24(sp),a0
    9ffa:	|  |  |            move.l 4(a0),d0
    9ffe:	|  |  |            movea.l 24(sp),a0
    a002:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a006:	|  |  |            movea.l 20(sp),a0
    a00a:	|  |  |            movea.l 4(a0),a1
    a00e:	|  |  |            movea.l 24(sp),a0
    a012:	|  |  |            move.l 84(a0),d0
    a016:	|  |  |            move.l d0,d1
    a018:	|  |  |            move.l d1,d0
    a01a:	|  |  |            add.l d0,d0
    a01c:	|  |  |            add.l d1,d0
    a01e:	|  |  |            add.l d0,d0
    a020:	|  |  |            add.l d0,d0
    a022:	|  |  |            lea (0,a1,d0.l),a0
    a026:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a02a:	|  |  |            move.l 8(sp),d0
    a02e:	|  |  |            add.l d0,d0
    a030:	|  |  |            subx.l d0,d0
    a032:	|  |  |            neg.l d0
    a034:	|  |  |            move.b d0,d0
    a036:	|  |  |            move.b d0,d0
    a038:	|  |  |            andi.l #255,d0
    a03e:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a042:	|  |  |            move.l 8(sp),-(sp)
    a046:	|  |  |            jsr 8f42 <TF_abs>
    a04c:	|  |  |            addq.l #4,sp
    a04e:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a052:	|  |  |            movea.l 20(sp),a0
    a056:	|  |  |            movea.l (a0),a0
    a058:	|  |  |            move.l 8(a0),d0
    a05c:	|  |  |            cmp.l 12(sp),d0
    a060:	|  |  |        ,-- bgt.s a070 <drawPeople+0x302>
				fNum = 0;
    a062:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a066:	|  |  |        |   moveq #2,d0
    a068:	|  |  |        |   sub.l 16(sp),d0
    a06c:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a070:	|  |  |        '-> moveq #2,d1
    a072:	|  |  |            cmp.l 16(sp),d1
    a076:	|  |  +----------- beq.s a0f2 <drawPeople+0x384>
				BOOL r = FALSE;
    a078:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a07c:	|  |  |            move.l 16(sp),d0
    a080:	|  |  |            movea.w d0,a0
    a082:	|  |  |            movea.l 20(sp),a1
    a086:	|  |  |            movea.l (a1),a1
    a088:	|  |  |            movea.l 16(a1),a1
    a08c:	|  |  |            move.l 12(sp),d1
    a090:	|  |  |            move.l d1,d0
    a092:	|  |  |            lsl.l #3,d0
    a094:	|  |  |            sub.l d1,d0
    a096:	|  |  |            add.l d0,d0
    a098:	|  |  |            add.l d0,d0
    a09a:	|  |  |            add.l a1,d0
    a09c:	|  |  |            move.l a0,-(sp)
    a09e:	|  |  |            move.l 28(sp),-(sp)
    a0a2:	|  |  |            move.l d0,-(sp)
    a0a4:	|  |  |            jsr 8c64 <scaleSprite>
    a0aa:	|  |  |            lea 12(sp),sp
    a0ae:	|  |  |            move.w d0,6(sp)
				if (r) {
    a0b2:	|  |  +----------- beq.s a0f2 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a0b4:	|  |  |            movea.l 24(sp),a0
    a0b8:	|  |  |            movea.l 114(a0),a0
    a0bc:	|  |  |            movea.l (a0),a0
    a0be:	|  |  |            move.b (a0),d0
    a0c0:	|  |  +----------- beq.s a0f2 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a0c2:	|  |  |            move.l 1a828 <personRegion+0x1c>,d1
    a0c8:	|  |  |            movea.l 24(sp),a0
    a0cc:	|  |  |            move.l 114(a0),d0
    a0d0:	|  |  |            cmp.l d1,d0
    a0d2:	|  |  |        ,-- beq.s a0da <drawPeople+0x36c>
    a0d4:	|  |  |        |   clr.l 1a76c <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a0da:	|  |  |        '-> movea.l 24(sp),a0
    a0de:	|  |  |            move.l 114(a0),d0
    a0e2:	|  |  |            move.l d0,1a828 <personRegion+0x1c>
						overRegion = & personRegion;
    a0e8:	|  |  |            move.l #108556,1a8b8 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a0f2:	|  |  '----------> movea.l 24(sp),a0
    a0f6:	|  |               move.l 88(a0),d0
    a0fa:	|  |               subq.l #1,d0
    a0fc:	|  |               movea.l 24(sp),a0
    a100:	|  |               move.l d0,88(a0)
    a104:	|  |               movea.l 24(sp),a0
    a108:	|  |               move.l 88(a0),d0
    a10c:	|  |        ,----- bne.w a334 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a110:	|  |        |      movea.l 24(sp),a0
    a114:	|  |        |      move.l 84(a0),d0
    a118:	|  |        |      addq.l #1,d0
    a11a:	|  |        |      movea.l 24(sp),a0
    a11e:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a122:	|  |        |      movea.l 24(sp),a0
    a126:	|  |        |      move.l 84(a0),d0
    a12a:	|  |        |      movea.l 24(sp),a0
    a12e:	|  |        |      movea.l 72(a0),a0
    a132:	|  |        |      move.l 8(a0),d1
    a136:	|  |        |      move.l d1,-(sp)
    a138:	|  |        |      move.l d0,-(sp)
    a13a:	|  |        |      jsr 17972 <__modsi3>
    a140:	|  |        |      addq.l #8,sp
    a142:	|  |        |      movea.l 24(sp),a0
    a146:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a14a:	|  |        |      movea.l 24(sp),a0
    a14e:	|  |        |      movea.l 72(a0),a0
    a152:	|  |        |      movea.l 4(a0),a1
    a156:	|  |        |      movea.l 24(sp),a0
    a15a:	|  |        |      move.l 84(a0),d0
    a15e:	|  |        |      move.l d0,d1
    a160:	|  |        |      move.l d1,d0
    a162:	|  |        |      add.l d0,d0
    a164:	|  |        |      add.l d1,d0
    a166:	|  |        |      add.l d0,d0
    a168:	|  |        |      add.l d0,d0
    a16a:	|  |        |      lea (0,a1,d0.l),a0
    a16e:	|  |        |      move.l 4(a0),d0
    a172:	|  |        |      movea.l 24(sp),a0
    a176:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a17a:	|  |        |      movea.l 24(sp),a0
    a17e:	|  |        |      move.w 104(a0),d0
    a182:	|  |        +----- beq.w a334 <drawPeople+0x5c6>
    a186:	|  |        |      tst.l 20(sp)
    a18a:	|  |        +----- beq.w a334 <drawPeople+0x5c6>
    a18e:	|  |        |      movea.l 20(sp),a0
    a192:	|  |        |      move.l 4(a0),d0
    a196:	|  |        +----- beq.w a334 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a19a:	|  |        |      movea.l 20(sp),a0
    a19e:	|  |        |      movea.l 4(a0),a1
    a1a2:	|  |        |      movea.l 24(sp),a0
    a1a6:	|  |        |      move.l 84(a0),d0
    a1aa:	|  |        |      move.l d0,d1
    a1ac:	|  |        |      move.l d1,d0
    a1ae:	|  |        |      add.l d0,d0
    a1b0:	|  |        |      add.l d1,d0
    a1b2:	|  |        |      add.l d0,d0
    a1b4:	|  |        |      add.l d0,d0
    a1b6:	|  |        |      lea (0,a1,d0.l),a0
    a1ba:	|  |        |      move.l 8(a0),d0
    a1be:	|  |        |  ,-- ble.w a260 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a1c2:	|  |        |  |   movea.l 20(sp),a0
    a1c6:	|  |        |  |   movea.l 4(a0),a1
    a1ca:	|  |        |  |   movea.l 24(sp),a0
    a1ce:	|  |        |  |   move.l 84(a0),d0
    a1d2:	|  |        |  |   move.l d0,d1
    a1d4:	|  |        |  |   move.l d1,d0
    a1d6:	|  |        |  |   add.l d0,d0
    a1d8:	|  |        |  |   add.l d1,d0
    a1da:	|  |        |  |   add.l d0,d0
    a1dc:	|  |        |  |   add.l d0,d0
    a1de:	|  |        |  |   lea (0,a1,d0.l),a0
    a1e2:	|  |        |  |   move.l 8(a0),d0
    a1e6:	|  |        |  |   clr.l -(sp)
    a1e8:	|  |        |  |   move.l d0,-(sp)
    a1ea:	|  |        |  |   jsr cf1e <startSound>
    a1f0:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a1f2:	|  |        |  |   movea.l 24(sp),a0
    a1f6:	|  |        |  |   move.l 84(a0),d0
    a1fa:	|  |        |  |   addq.l #1,d0
    a1fc:	|  |        |  |   movea.l 24(sp),a0
    a200:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a204:	|  |        |  |   movea.l 24(sp),a0
    a208:	|  |        |  |   move.l 84(a0),d0
    a20c:	|  |        |  |   movea.l 24(sp),a0
    a210:	|  |        |  |   movea.l 72(a0),a0
    a214:	|  |        |  |   move.l 8(a0),d1
    a218:	|  |        |  |   move.l d1,-(sp)
    a21a:	|  |        |  |   move.l d0,-(sp)
    a21c:	|  |        |  |   jsr 17972 <__modsi3>
    a222:	|  |        |  |   addq.l #8,sp
    a224:	|  |        |  |   movea.l 24(sp),a0
    a228:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a22c:	|  |        |  |   movea.l 24(sp),a0
    a230:	|  |        |  |   movea.l 72(a0),a0
    a234:	|  |        |  |   movea.l 4(a0),a1
    a238:	|  |        |  |   movea.l 24(sp),a0
    a23c:	|  |        |  |   move.l 84(a0),d0
    a240:	|  |        |  |   move.l d0,d1
    a242:	|  |        |  |   move.l d1,d0
    a244:	|  |        |  |   add.l d0,d0
    a246:	|  |        |  |   add.l d1,d0
    a248:	|  |        |  |   add.l d0,d0
    a24a:	|  |        |  |   add.l d0,d0
    a24c:	|  |        |  |   lea (0,a1,d0.l),a0
    a250:	|  |        |  |   move.l 4(a0),d0
    a254:	|  |        |  |   movea.l 24(sp),a0
    a258:	|  |        |  |   move.l d0,88(a0)
    a25c:	|  |        +--|-- bra.w a334 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a260:	|  |        |  '-> movea.l 20(sp),a0
    a264:	|  |        |      movea.l 4(a0),a1
    a268:	|  |        |      movea.l 24(sp),a0
    a26c:	|  |        |      move.l 84(a0),d0
    a270:	|  |        |      move.l d0,d1
    a272:	|  |        |      move.l d1,d0
    a274:	|  |        |      add.l d0,d0
    a276:	|  |        |      add.l d1,d0
    a278:	|  |        |      add.l d0,d0
    a27a:	|  |        |      add.l d0,d0
    a27c:	|  |        |      lea (0,a1,d0.l),a0
    a280:	|  |        |      move.l 8(a0),d0
    a284:	|  |        +----- beq.w a334 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a288:	|  |        |      movea.l 1a774 <noStack>,a1
    a28e:	|  |        |      movea.l 20(sp),a0
    a292:	|  |        |      move.l 4(a0),d2
    a296:	|  |        |      movea.l 24(sp),a0
    a29a:	|  |        |      move.l 84(a0),d0
    a29e:	|  |        |      move.l d0,d1
    a2a0:	|  |        |      move.l d1,d0
    a2a2:	|  |        |      add.l d0,d0
    a2a4:	|  |        |      add.l d1,d0
    a2a6:	|  |        |      add.l d0,d0
    a2a8:	|  |        |      add.l d0,d0
    a2aa:	|  |        |      movea.l d2,a0
    a2ac:	|  |        |      adda.l d0,a0
    a2ae:	|  |        |      move.l 8(a0),d0
    a2b2:	|  |        |      neg.l d0
    a2b4:	|  |        |      pea 1 <_start+0x1>
    a2b8:	|  |        |      move.l a1,-(sp)
    a2ba:	|  |        |      clr.l -(sp)
    a2bc:	|  |        |      clr.l -(sp)
    a2be:	|  |        |      move.l d0,-(sp)
    a2c0:	|  |        |      jsr 6786 <startNewFunctionNum>
    a2c6:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a2ca:	|  |        |      movea.l 24(sp),a0
    a2ce:	|  |        |      move.l 84(a0),d0
    a2d2:	|  |        |      addq.l #1,d0
    a2d4:	|  |        |      movea.l 24(sp),a0
    a2d8:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a2dc:	|  |        |      movea.l 24(sp),a0
    a2e0:	|  |        |      move.l 84(a0),d0
    a2e4:	|  |        |      movea.l 24(sp),a0
    a2e8:	|  |        |      movea.l 72(a0),a0
    a2ec:	|  |        |      move.l 8(a0),d1
    a2f0:	|  |        |      move.l d1,-(sp)
    a2f2:	|  |        |      move.l d0,-(sp)
    a2f4:	|  |        |      jsr 17972 <__modsi3>
    a2fa:	|  |        |      addq.l #8,sp
    a2fc:	|  |        |      movea.l 24(sp),a0
    a300:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a304:	|  |        |      movea.l 24(sp),a0
    a308:	|  |        |      movea.l 72(a0),a0
    a30c:	|  |        |      movea.l 4(a0),a1
    a310:	|  |        |      movea.l 24(sp),a0
    a314:	|  |        |      move.l 84(a0),d0
    a318:	|  |        |      move.l d0,d1
    a31a:	|  |        |      move.l d1,d0
    a31c:	|  |        |      add.l d0,d0
    a31e:	|  |        |      add.l d1,d0
    a320:	|  |        |      add.l d0,d0
    a322:	|  |        |      add.l d0,d0
    a324:	|  |        |      lea (0,a1,d0.l),a0
    a328:	|  |        |      move.l 4(a0),d0
    a32c:	|  |        |      movea.l 24(sp),a0
    a330:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a334:	|  |        '----> movea.l 24(sp),a0
    a338:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a33e:	|  '-------------> tst.l 24(sp)
    a342:	'----------------- bne.w 9d90 <drawPeople+0x22>
	}
}
    a346:	                   nop
    a348:	                   nop
    a34a:	                   move.l (sp)+,d2
    a34c:	                   lea 24(sp),sp
    a350:	                   rts

0000a352 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a352:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a354:	          move.l 1a808 <allPeople>,(sp)
	while (thisPerson) {
    a35a:	      ,-- bra.s a372 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a35c:	,-----|-> movea.l (sp),a0
    a35e:	|     |   movea.l 114(a0),a0
    a362:	|     |   move.l 4(a0),d0
    a366:	|     |   cmp.l 8(sp),d0
    a36a:	|  ,--|-- beq.s a378 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a36c:	|  |  |   movea.l (sp),a0
    a36e:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a372:	|  |  '-> tst.l (sp)
    a374:	'--|----- bne.s a35c <findPerson+0xa>
    a376:	   |  ,-- bra.s a37a <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a378:	   '--|-> nop
	}
	return thisPerson;
    a37a:	      '-> move.l (sp),d0
}
    a37c:	          addq.l #4,sp
    a37e:	          rts

0000a380 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a380:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a382:	       move.l 12(sp),-(sp)
    a386:	       jsr a352 <findPerson>
    a38c:	       addq.l #4,sp
    a38e:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a390:	   ,-- bne.s a396 <floatCharacter+0x16>
    a392:	   |   clr.w d0
    a394:	,--|-- bra.s a3a0 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a396:	|  '-> movea.l (sp),a0
    a398:	|      move.l 8(sp),24(a0)
	return TRUE;
    a39e:	|      moveq #1,d0
}
    a3a0:	'----> addq.l #4,sp
    a3a2:	       rts

0000a3a4 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a3a4:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a3a6:	          tst.l 8(sp)
    a3aa:	      ,-- bne.s a3b8 <forceWalkingPerson+0x14>
    a3ac:	      |   tst.l 12(sp)
    a3b0:	      +-- bne.s a3b8 <forceWalkingPerson+0x14>
    a3b2:	      |   clr.w d0
    a3b4:	,-----|-- bra.w a44a <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a3b8:	|     '-> move.l 16(sp),-(sp)
    a3bc:	|         jsr a352 <findPerson>
    a3c2:	|         addq.l #4,sp
    a3c4:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a3c6:	|     ,-- bne.s a3cc <forceWalkingPerson+0x28>
    a3c8:	|     |   clr.w d0
    a3ca:	+-----|-- bra.s a44a <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a3cc:	|     '-> movea.l (sp),a0
    a3ce:	|         move.l 68(a0),d0
    a3d2:	|     ,-- beq.s a3e4 <forceWalkingPerson+0x40>
    a3d4:	|     |   movea.l (sp),a0
    a3d6:	|     |   move.l 68(a0),d0
    a3da:	|     |   move.l d0,-(sp)
    a3dc:	|     |   jsr 43ca <abortFunction>
    a3e2:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a3e4:	|     '-> movea.l (sp),a0
    a3e6:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a3ec:	|         movea.l (sp),a0
    a3ee:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a3f2:	|         movea.l (sp),a0
    a3f4:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a3fa:	|         movea.l (sp),a0
    a3fc:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a402:	|         movea.l (sp),a0
    a404:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a40a:	|         movea.l (sp),a0
    a40c:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a410:	|         movea.l (sp),a0
    a412:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a416:	|         move.l (sp),-(sp)
    a418:	|         jsr 96b4 <doBorderStuff>
    a41e:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a420:	|         pea 1 <_start+0x1>
    a424:	|         move.l 4(sp),-(sp)
    a428:	|         jsr bc98 <walkMe>
    a42e:	|         addq.l #8,sp
    a430:	|         tst.w d0
    a432:	|     ,-- bne.s a43c <forceWalkingPerson+0x98>
    a434:	|     |   movea.l (sp),a0
    a436:	|     |   move.w 66(a0),d0
    a43a:	|  ,--|-- beq.s a448 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a43c:	|  |  '-> movea.l (sp),a0
    a43e:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a444:	|  |      moveq #1,d0
    a446:	+--|----- bra.s a44a <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a448:	|  '----> clr.w d0
    }
}
    a44a:	'-------> addq.l #4,sp
    a44c:	          rts

0000a44e <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a44e:	                lea -56(sp),sp
    a452:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a454:	                move.l #320,56(sp)
    a45c:	                move.l #200,52(sp)
    a464:	                moveq #-1,d0
    a466:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a46a:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a472:	                clr.l 44(sp)
    a476:	   ,----------- bra.w a64e <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a47a:	,--|----------> movea.l 1a8c0 <currentFloor>,a0
    a480:	|  |            move.l 12(a0),d1
    a484:	|  |            move.l 44(sp),d0
    a488:	|  |            lsl.l #3,d0
    a48a:	|  |            movea.l d1,a0
    a48c:	|  |            adda.l d0,a0
    a48e:	|  |            move.l (a0),d0
    a490:	|  |            move.l d0,d1
    a492:	|  |            subq.l #1,d1
    a494:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a498:	|  |            clr.l 40(sp)
    a49c:	|  |     ,----- bra.w a62c <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a4a0:	|  |  ,--|----> movea.l 1a8c0 <currentFloor>,a0
    a4a6:	|  |  |  |      move.l 4(a0),d1
    a4aa:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a4b0:	|  |  |  |      movea.l 12(a0),a0
    a4b4:	|  |  |  |      move.l 44(sp),d0
    a4b8:	|  |  |  |      lsl.l #3,d0
    a4ba:	|  |  |  |      adda.l d0,a0
    a4bc:	|  |  |  |      movea.l 4(a0),a0
    a4c0:	|  |  |  |      move.l 40(sp),d0
    a4c4:	|  |  |  |      add.l d0,d0
    a4c6:	|  |  |  |      add.l d0,d0
    a4c8:	|  |  |  |      adda.l d0,a0
    a4ca:	|  |  |  |      move.l (a0),d0
    a4cc:	|  |  |  |      lsl.l #3,d0
    a4ce:	|  |  |  |      movea.l d1,a0
    a4d0:	|  |  |  |      adda.l d0,a0
    a4d2:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a4d6:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a4dc:	|  |  |  |      move.l 4(a0),d1
    a4e0:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a4e6:	|  |  |  |      movea.l 12(a0),a0
    a4ea:	|  |  |  |      move.l 44(sp),d0
    a4ee:	|  |  |  |      lsl.l #3,d0
    a4f0:	|  |  |  |      adda.l d0,a0
    a4f2:	|  |  |  |      movea.l 4(a0),a0
    a4f6:	|  |  |  |      move.l 40(sp),d0
    a4fa:	|  |  |  |      add.l d0,d0
    a4fc:	|  |  |  |      add.l d0,d0
    a4fe:	|  |  |  |      adda.l d0,a0
    a500:	|  |  |  |      move.l (a0),d0
    a502:	|  |  |  |      lsl.l #3,d0
    a504:	|  |  |  |      movea.l d1,a0
    a506:	|  |  |  |      adda.l d0,a0
    a508:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a50e:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a514:	|  |  |  |      move.l 4(a0),d1
    a518:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a51e:	|  |  |  |      movea.l 12(a0),a0
    a522:	|  |  |  |      move.l 44(sp),d0
    a526:	|  |  |  |      lsl.l #3,d0
    a528:	|  |  |  |      adda.l d0,a0
    a52a:	|  |  |  |      movea.l 4(a0),a0
    a52e:	|  |  |  |      move.l 36(sp),d0
    a532:	|  |  |  |      add.l d0,d0
    a534:	|  |  |  |      add.l d0,d0
    a536:	|  |  |  |      adda.l d0,a0
    a538:	|  |  |  |      move.l (a0),d0
    a53a:	|  |  |  |      lsl.l #3,d0
    a53c:	|  |  |  |      movea.l d1,a0
    a53e:	|  |  |  |      adda.l d0,a0
    a540:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a544:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a54a:	|  |  |  |      move.l 4(a0),d1
    a54e:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a554:	|  |  |  |      movea.l 12(a0),a0
    a558:	|  |  |  |      move.l 44(sp),d0
    a55c:	|  |  |  |      lsl.l #3,d0
    a55e:	|  |  |  |      adda.l d0,a0
    a560:	|  |  |  |      movea.l 4(a0),a0
    a564:	|  |  |  |      move.l 36(sp),d0
    a568:	|  |  |  |      add.l d0,d0
    a56a:	|  |  |  |      add.l d0,d0
    a56c:	|  |  |  |      adda.l d0,a0
    a56e:	|  |  |  |      move.l (a0),d0
    a570:	|  |  |  |      lsl.l #3,d0
    a572:	|  |  |  |      movea.l d1,a0
    a574:	|  |  |  |      adda.l d0,a0
    a576:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a57c:	|  |  |  |      movea.l 68(sp),a0
    a580:	|  |  |  |      move.l (a0),d1
    a582:	|  |  |  |      movea.l 64(sp),a0
    a586:	|  |  |  |      move.l (a0),d0
    a588:	|  |  |  |      move.l d1,-(sp)
    a58a:	|  |  |  |      move.l d0,-(sp)
    a58c:	|  |  |  |      move.l 24(sp),-(sp)
    a590:	|  |  |  |      move.l 32(sp),-(sp)
    a594:	|  |  |  |      move.l 40(sp),-(sp)
    a598:	|  |  |  |      move.l 48(sp),-(sp)
    a59c:	|  |  |  |      lea 28(sp),a0
    a5a0:	|  |  |  |      move.l a0,-(sp)
    a5a2:	|  |  |  |      lea 36(sp),a0
    a5a6:	|  |  |  |      move.l a0,-(sp)
    a5a8:	|  |  |  |      jsr 15d54 <closestPointOnLine>
    a5ae:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a5b2:	|  |  |  |      movea.l 64(sp),a0
    a5b6:	|  |  |  |      move.l (a0),d0
    a5b8:	|  |  |  |      move.l 8(sp),d1
    a5bc:	|  |  |  |      move.l d0,d2
    a5be:	|  |  |  |      sub.l d1,d2
    a5c0:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a5c4:	|  |  |  |      movea.l 68(sp),a0
    a5c8:	|  |  |  |      move.l (a0),d0
    a5ca:	|  |  |  |      move.l 4(sp),d1
    a5ce:	|  |  |  |      move.l d0,d2
    a5d0:	|  |  |  |      sub.l d1,d2
    a5d2:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a5d6:	|  |  |  |      move.l 28(sp),-(sp)
    a5da:	|  |  |  |      move.l 32(sp),-(sp)
    a5de:	|  |  |  |      jsr 178c6 <__mulsi3>
    a5e4:	|  |  |  |      addq.l #8,sp
    a5e6:	|  |  |  |      move.l d0,d2
    a5e8:	|  |  |  |      move.l 24(sp),-(sp)
    a5ec:	|  |  |  |      move.l 28(sp),-(sp)
    a5f0:	|  |  |  |      jsr 178c6 <__mulsi3>
    a5f6:	|  |  |  |      addq.l #8,sp
    a5f8:	|  |  |  |      move.l d2,d1
    a5fa:	|  |  |  |      add.l d0,d1
    a5fc:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a600:	|  |  |  |      move.l 12(sp),d2
    a604:	|  |  |  |      cmp.l 32(sp),d2
    a608:	|  |  |  |  ,-- bge.s a622 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a60a:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a610:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a616:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a61c:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a622:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a628:	|  |  |  |      addq.l #1,40(sp)
    a62c:	|  |  |  '----> movea.l 1a8c0 <currentFloor>,a0
    a632:	|  |  |         move.l 12(a0),d1
    a636:	|  |  |         move.l 44(sp),d0
    a63a:	|  |  |         lsl.l #3,d0
    a63c:	|  |  |         movea.l d1,a0
    a63e:	|  |  |         adda.l d0,a0
    a640:	|  |  |         move.l (a0),d0
    a642:	|  |  |         cmp.l 40(sp),d0
    a646:	|  |  '-------- bgt.w a4a0 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a64a:	|  |            addq.l #1,44(sp)
    a64e:	|  '----------> movea.l 1a8c0 <currentFloor>,a0
    a654:	|               move.l 8(a0),d0
    a658:	|               cmp.l 44(sp),d0
    a65c:	'-------------- bgt.w a47a <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a660:	                moveq #-1,d0
    a662:	                cmp.l 48(sp),d0
    a666:	            ,-- bne.s a66c <handleClosestPoint+0x21e>
    a668:	            |   clr.w d0
    a66a:	         ,--|-- bra.s a686 <handleClosestPoint+0x238>
	*setX = gotX;
    a66c:	         |  '-> movea.l 64(sp),a0
    a670:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a674:	         |      movea.l 68(sp),a0
    a678:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a67c:	         |      movea.l 72(sp),a0
    a680:	         |      move.l 48(sp),(a0)

	return TRUE;
    a684:	         |      moveq #1,d0
}
    a686:	         '----> move.l (sp)+,d2
    a688:	                lea 56(sp),sp
    a68c:	                rts

0000a68e <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a68e:	clr.l 1a81c <personRegion+0x10>
	personRegion.sY = 0;
    a694:	clr.l 1a820 <personRegion+0x14>
	personRegion.di = -1;
    a69a:	moveq #-1,d0
    a69c:	move.l d0,1a824 <personRegion+0x18>
	allScreenRegions = NULL;
    a6a2:	clr.l 1a8b4 <allScreenRegions>

	return TRUE;
    a6a8:	moveq #1,d0
}
    a6aa:	rts

0000a6ac <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a6ac:	          subq.l #4,sp
    a6ae:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a6b0:	          tst.l 12(sp)
    a6b4:	      ,-- bne.s a6bc <jumpPerson+0x10>
    a6b6:	      |   tst.l 16(sp)
    a6ba:	,-----|-- beq.s a730 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a6bc:	|     '-> move.l 20(sp),-(sp)
    a6c0:	|         jsr a352 <findPerson>
    a6c6:	|         addq.l #4,sp
    a6c8:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a6cc:	|  ,----- beq.s a734 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a6ce:	|  |      movea.l 4(sp),a0
    a6d2:	|  |      move.l 68(a0),d0
    a6d6:	|  |  ,-- beq.s a6ea <jumpPerson+0x3e>
    a6d8:	|  |  |   movea.l 4(sp),a0
    a6dc:	|  |  |   move.l 68(a0),d0
    a6e0:	|  |  |   move.l d0,-(sp)
    a6e2:	|  |  |   jsr 43ca <abortFunction>
    a6e8:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a6ea:	|  |  '-> movea.l 4(sp),a0
    a6ee:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a6f2:	|  |      movea.l 4(sp),a0
    a6f6:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a6fa:	|  |      movea.l 4(sp),a0
    a6fe:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a702:	|  |      move.l 16(sp),-(sp)
    a706:	|  |      jsr 1736c <__floatsisf>
    a70c:	|  |      addq.l #4,sp
    a70e:	|  |      move.l d0,d2
    a710:	|  |      move.l 12(sp),-(sp)
    a714:	|  |      jsr 1736c <__floatsisf>
    a71a:	|  |      addq.l #4,sp
    a71c:	|  |      move.l d2,-(sp)
    a71e:	|  |      move.l d0,-(sp)
    a720:	|  |      move.l 12(sp),-(sp)
    a724:	|  |      jsr aa9a <moveAndScale>
    a72a:	|  |      lea 12(sp),sp
    a72e:	|  |  ,-- bra.s a736 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    a730:	'--|--|-> nop
    a732:	   |  +-- bra.s a736 <jumpPerson+0x8a>
    if (!moveMe) return;
    a734:	   '--|-> nop
}
    a736:	      '-> move.l (sp)+,d2
    a738:	          addq.l #4,sp
    a73a:	          rts

0000a73c <killAllPeople>:


void killAllPeople () {
    a73c:	          subq.l #8,sp
    a73e:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    a740:	   ,----- bra.s a7ac <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    a742:	,--|----> movea.l 1a808 <allPeople>,a0
    a748:	|  |      move.l 68(a0),d0
    a74c:	|  |  ,-- beq.s a762 <killAllPeople+0x26>
    a74e:	|  |  |   movea.l 1a808 <allPeople>,a0
    a754:	|  |  |   move.l 68(a0),d0
    a758:	|  |  |   move.l d0,-(sp)
    a75a:	|  |  |   jsr 43ca <abortFunction>
    a760:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    a762:	|  |  '-> movea.l 1a808 <allPeople>,a0
    a768:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    a76c:	|  |      move.l 1a808 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    a774:	|  |      movea.l 1a808 <allPeople>,a0
    a77a:	|  |      move.l 36(a0),d0
    a77e:	|  |      move.l d0,1a808 <allPeople>
		removeObjectType (killPeople -> thisType);
    a784:	|  |      movea.l 8(sp),a0
    a788:	|  |      move.l 114(a0),d0
    a78c:	|  |      move.l d0,-(sp)
    a78e:	|  |      jsr d5fc <removeObjectType>
    a794:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    a796:	|  |      move.l 8(sp),4(sp)
    a79c:	|  |      move.l 1a7a4 <SysBase>,d0
    a7a2:	|  |      movea.l d0,a6
    a7a4:	|  |      movea.l 4(sp),a1
    a7a8:	|  |      jsr -690(a6)
	while (allPeople) {
    a7ac:	|  '----> move.l 1a808 <allPeople>,d0
    a7b2:	'-------- bne.s a742 <killAllPeople+0x6>
	}
}
    a7b4:	          nop
    a7b6:	          nop
    a7b8:	          movea.l (sp)+,a6
    a7ba:	          addq.l #8,sp
    a7bc:	          rts

0000a7be <killMostPeople>:

void killMostPeople() {
    a7be:	          lea -12(sp),sp
    a7c2:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    a7c4:	          move.l #108552,12(sp)

    while (*lookyHere) {
    a7cc:	   ,----- bra.w a852 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    a7d0:	,--|----> movea.l 12(sp),a0
    a7d4:	|  |      movea.l (a0),a0
    a7d6:	|  |      move.l 118(a0),d0
    a7da:	|  |      moveq #32,d1
    a7dc:	|  |      and.l d1,d0
    a7de:	|  |  ,-- beq.s a7f0 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    a7e0:	|  |  |   movea.l 12(sp),a0
    a7e4:	|  |  |   move.l (a0),d0
    a7e6:	|  |  |   moveq #36,d1
    a7e8:	|  |  |   add.l d0,d1
    a7ea:	|  |  |   move.l d1,12(sp)
    a7ee:	|  +--|-- bra.s a852 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    a7f0:	|  |  '-> movea.l 12(sp),a0
    a7f4:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    a7f8:	|  |      movea.l 8(sp),a0
    a7fc:	|  |      move.l 36(a0),d0
    a800:	|  |      movea.l 12(sp),a0
    a804:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    a806:	|  |      movea.l 8(sp),a0
    a80a:	|  |      move.l 68(a0),d0
    a80e:	|  |  ,-- beq.s a822 <killMostPeople+0x64>
    a810:	|  |  |   movea.l 8(sp),a0
    a814:	|  |  |   move.l 68(a0),d0
    a818:	|  |  |   move.l d0,-(sp)
    a81a:	|  |  |   jsr 43ca <abortFunction>
    a820:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    a822:	|  |  '-> movea.l 8(sp),a0
    a826:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    a82a:	|  |      movea.l 8(sp),a0
    a82e:	|  |      move.l 114(a0),d0
    a832:	|  |      move.l d0,-(sp)
    a834:	|  |      jsr d5fc <removeObjectType>
    a83a:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    a83c:	|  |      move.l 8(sp),4(sp)
    a842:	|  |      move.l 1a7a4 <SysBase>,d0
    a848:	|  |      movea.l d0,a6
    a84a:	|  |      movea.l 4(sp),a1
    a84e:	|  |      jsr -690(a6)
    while (*lookyHere) {
    a852:	|  '----> movea.l 12(sp),a0
    a856:	|         move.l (a0),d0
    a858:	'-------- bne.w a7d0 <killMostPeople+0x12>
        }
    }
}
    a85c:	          nop
    a85e:	          nop
    a860:	          movea.l (sp)+,a6
    a862:	          lea 12(sp),sp
    a866:	          rts

0000a868 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    a868:	clr.l -(sp)
    a86a:	move.l sp,d0
    a86c:	addq.l #8,d0
    a86e:	move.l d0,-(sp)
    a870:	jsr 7e28 <setFrames>
    a876:	addq.l #8,sp
}
    a878:	nop
    a87a:	rts

0000a87c <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a87c:	          lea -12(sp),sp
    a880:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    a882:	          tst.l 20(sp)
    a886:	      ,-- bne.s a894 <makeWalkingPerson+0x18>
    a888:	      |   tst.l 24(sp)
    a88c:	      +-- bne.s a894 <makeWalkingPerson+0x18>
    a88e:	      |   clr.w d0
    a890:	,-----|-- bra.w aa2c <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    a894:	|     '-> movea.l 1a8c0 <currentFloor>,a0
    a89a:	|         move.l 8(a0),d0
    a89e:	|     ,-- bne.s a8a6 <makeWalkingPerson+0x2a>
    a8a0:	|     |   clr.w d0
    a8a2:	+-----|-- bra.w aa2c <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    a8a6:	|     '-> move.l 28(sp),-(sp)
    a8aa:	|         jsr a352 <findPerson>
    a8b0:	|         addq.l #4,sp
    a8b2:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    a8b6:	|     ,-- bne.s a8be <makeWalkingPerson+0x42>
    a8b8:	|     |   clr.w d0
    a8ba:	+-----|-- bra.w aa2c <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    a8be:	|     '-> movea.l 12(sp),a0
    a8c2:	|         move.l 68(a0),d0
    a8c6:	|     ,-- beq.s a8da <makeWalkingPerson+0x5e>
    a8c8:	|     |   movea.l 12(sp),a0
    a8cc:	|     |   move.l 68(a0),d0
    a8d0:	|     |   move.l d0,-(sp)
    a8d2:	|     |   jsr 43ca <abortFunction>
    a8d8:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    a8da:	|     '-> movea.l 12(sp),a0
    a8de:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    a8e2:	|         movea.l 12(sp),a0
    a8e6:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    a8ec:	|         movea.l 12(sp),a0
    a8f0:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    a8f6:	|         movea.l 12(sp),a0
    a8fa:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    a900:	|         movea.l 12(sp),a0
    a904:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    a90a:	|         move.l 24(sp),-(sp)
    a90e:	|         move.l 24(sp),-(sp)
    a912:	|         jsr 1629c <inFloor>
    a918:	|         addq.l #8,sp
    a91a:	|         movea.l 12(sp),a0
    a91e:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    a922:	|         movea.l 12(sp),a0
    a926:	|         move.l 60(a0),d0
    a92a:	|         moveq #-1,d1
    a92c:	|         cmp.l d0,d1
    a92e:	|     ,-- bne.s a95e <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    a930:	|     |   movea.w #60,a0
    a934:	|     |   adda.l 12(sp),a0
    a938:	|     |   moveq #44,d1
    a93a:	|     |   add.l 12(sp),d1
    a93e:	|     |   moveq #40,d0
    a940:	|     |   add.l 12(sp),d0
    a944:	|     |   move.l a0,-(sp)
    a946:	|     |   move.l d1,-(sp)
    a948:	|     |   move.l d0,-(sp)
    a94a:	|     |   jsr a44e <handleClosestPoint>
    a950:	|     |   lea 12(sp),sp
    a954:	|     |   tst.w d0
    a956:	|     +-- bne.s a95e <makeWalkingPerson+0xe2>
    a958:	|     |   clr.w d0
    a95a:	+-----|-- bra.w aa2c <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    a95e:	|     '-> movea.l 12(sp),a0
    a962:	|         move.l 4(a0),d0
    a966:	|         move.l d0,-(sp)
    a968:	|         jsr 17304 <__fixsfsi>
    a96e:	|         addq.l #4,sp
    a970:	|         move.l d0,d2
    a972:	|         movea.l 12(sp),a0
    a976:	|         move.l (a0),d0
    a978:	|         move.l d0,-(sp)
    a97a:	|         jsr 17304 <__fixsfsi>
    a980:	|         addq.l #4,sp
    a982:	|         move.l d2,-(sp)
    a984:	|         move.l d0,-(sp)
    a986:	|         jsr 1629c <inFloor>
    a98c:	|         addq.l #8,sp
    a98e:	|         movea.l 12(sp),a0
    a992:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    a996:	|         movea.l 12(sp),a0
    a99a:	|         move.l 56(a0),d0
    a99e:	|         moveq #-1,d1
    a9a0:	|         cmp.l d0,d1
    a9a2:	|     ,-- bne.s a9f4 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    a9a4:	|     |   movea.l 12(sp),a0
    a9a8:	|     |   move.l (a0),d0
    a9aa:	|     |   move.l d0,-(sp)
    a9ac:	|     |   jsr 17304 <__fixsfsi>
    a9b2:	|     |   addq.l #4,sp
    a9b4:	|     |   move.l d0,8(sp)
    a9b8:	|     |   movea.l 12(sp),a0
    a9bc:	|     |   move.l 4(a0),d0
    a9c0:	|     |   move.l d0,-(sp)
    a9c2:	|     |   jsr 17304 <__fixsfsi>
    a9c8:	|     |   addq.l #4,sp
    a9ca:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    a9ce:	|     |   moveq #56,d0
    a9d0:	|     |   add.l 12(sp),d0
    a9d4:	|     |   move.l d0,-(sp)
    a9d6:	|     |   lea 8(sp),a0
    a9da:	|     |   move.l a0,-(sp)
    a9dc:	|     |   moveq #16,d0
    a9de:	|     |   add.l sp,d0
    a9e0:	|     |   move.l d0,-(sp)
    a9e2:	|     |   jsr a44e <handleClosestPoint>
    a9e8:	|     |   lea 12(sp),sp
    a9ec:	|     |   tst.w d0
    a9ee:	|     +-- bne.s a9f4 <makeWalkingPerson+0x178>
    a9f0:	|     |   clr.w d0
    a9f2:	+-----|-- bra.s aa2c <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    a9f4:	|     '-> move.l 12(sp),-(sp)
    a9f8:	|         jsr 96b4 <doBorderStuff>
    a9fe:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    aa00:	|         clr.l -(sp)
    aa02:	|         move.l 16(sp),-(sp)
    aa06:	|         jsr bc98 <walkMe>
    aa0c:	|         addq.l #8,sp
    aa0e:	|         tst.w d0
    aa10:	|     ,-- bne.s aa1c <makeWalkingPerson+0x1a0>
    aa12:	|     |   movea.l 12(sp),a0
    aa16:	|     |   move.w 66(a0),d0
    aa1a:	|  ,--|-- beq.s aa2a <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    aa1c:	|  |  '-> movea.l 12(sp),a0
    aa20:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    aa26:	|  |      moveq #1,d0
    aa28:	+--|----- bra.s aa2c <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    aa2a:	|  '----> clr.w d0
	}
}
    aa2c:	'-------> move.l (sp)+,d2
    aa2e:	          lea 12(sp),sp
    aa32:	          rts

0000aa34 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    aa34:	       lea -16(sp),sp
    aa38:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    aa3a:	       moveq #12,d0
    aa3c:	       move.l d0,16(sp)
    aa40:	       clr.l 12(sp)
    aa44:	       move.l 1a7a4 <SysBase>,d0
    aa4a:	       movea.l d0,a6
    aa4c:	       move.l 16(sp),d0
    aa50:	       move.l 12(sp),d1
    aa54:	       jsr -684(a6)
    aa58:	       move.l d0,8(sp)
    aa5c:	       move.l 8(sp),d0
    aa60:	       move.l d0,4(sp)
    if(newAnim == 0) {
    aa64:	   ,-- bne.s aa78 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    aa66:	   |   pea 18e98 <PutChar+0x14bc>
    aa6c:	   |   jsr 16f3a <KPrintF>
    aa72:	   |   addq.l #4,sp
        return NULL;    
    aa74:	   |   moveq #0,d0
    aa76:	,--|-- bra.s aa92 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    aa78:	|  '-> movea.l 4(sp),a0
    aa7c:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    aa7e:	|      movea.l 4(sp),a0
    aa82:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    aa86:	|      movea.l 4(sp),a0
    aa8a:	|      clr.l 4(a0)
	return newAnim;
    aa8e:	|      move.l 4(sp),d0
}
    aa92:	'----> movea.l (sp)+,a6
    aa94:	       lea 16(sp),sp
    aa98:	       rts

0000aa9a <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    aa9a:	    move.l d2,-(sp)
	me->x = x;
    aa9c:	    movea.l 8(sp),a0
    aaa0:	    move.l 12(sp),(a0)
	me->y = y;
    aaa4:	    movea.l 8(sp),a0
    aaa8:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    aaae:	    movea.l 8(sp),a0
    aab2:	    clr.l 8(a0)
	me->oldy = 0;
    aab6:	    movea.l 8(sp),a0
    aaba:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    aabe:	    movea.l 8(sp),a0
    aac2:	    move.l 118(a0),d0
    aac6:	    moveq #2,d1
    aac8:	    and.l d1,d0
    aaca:	,-- bne.s ab22 <moveAndScale+0x88>
    aacc:	|   move.w 1a138 <scaleDivide>,d0
    aad2:	+-- beq.s ab22 <moveAndScale+0x88>
    aad4:	|   movea.l 8(sp),a0
    aad8:	|   move.l 4(a0),d2
    aadc:	|   move.w 1a136 <scaleHorizon>,d0
    aae2:	|   movea.w d0,a0
    aae4:	|   move.l a0,-(sp)
    aae6:	|   jsr 1736c <__floatsisf>
    aaec:	|   addq.l #4,sp
    aaee:	|   move.l d0,-(sp)
    aaf0:	|   move.l d2,-(sp)
    aaf2:	|   jsr 17660 <__subsf3>
    aaf8:	|   addq.l #8,sp
    aafa:	|   move.l d0,d2
    aafc:	|   move.w 1a138 <scaleDivide>,d0
    ab02:	|   movea.w d0,a0
    ab04:	|   move.l a0,-(sp)
    ab06:	|   jsr 1736c <__floatsisf>
    ab0c:	|   addq.l #4,sp
    ab0e:	|   move.l d0,-(sp)
    ab10:	|   move.l d2,-(sp)
    ab12:	|   jsr 17222 <__divsf3>
    ab18:	|   addq.l #8,sp
    ab1a:	|   movea.l 8(sp),a0
    ab1e:	|   move.l d0,32(a0)
}
    ab22:	'-> nop
    ab24:	    move.l (sp)+,d2
    ab26:	    rts

0000ab28 <removeOneCharacter>:

void removeOneCharacter (int i) {
    ab28:	          lea -16(sp),sp
    ab2c:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    ab2e:	          move.l 24(sp),-(sp)
    ab32:	          jsr a352 <findPerson>
    ab38:	          addq.l #4,sp
    ab3a:	          move.l d0,8(sp)

    if (p) {
    ab3e:	,-------- beq.w ac1e <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    ab42:	|         move.l 1a8b8 <overRegion>,d0
    ab48:	|         cmpi.l #108556,d0
    ab4e:	|     ,-- bne.s ab6c <removeOneCharacter+0x44>
    ab50:	|     |   movea.l 1a8b8 <overRegion>,a0
    ab56:	|     |   move.l 28(a0),d1
    ab5a:	|     |   movea.l 8(sp),a0
    ab5e:	|     |   move.l 114(a0),d0
    ab62:	|     |   cmp.l d1,d0
    ab64:	|     +-- bne.s ab6c <removeOneCharacter+0x44>
            overRegion = NULL;
    ab66:	|     |   clr.l 1a8b8 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    ab6c:	|     '-> movea.l 8(sp),a0
    ab70:	|         move.l 68(a0),d0
    ab74:	|     ,-- beq.s ab88 <removeOneCharacter+0x60>
    ab76:	|     |   movea.l 8(sp),a0
    ab7a:	|     |   move.l 68(a0),d0
    ab7e:	|     |   move.l d0,-(sp)
    ab80:	|     |   jsr 43ca <abortFunction>
    ab86:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    ab88:	|     '-> movea.l 8(sp),a0
    ab8c:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    ab90:	|         clr.l 12(sp)
    ab94:	|     ,-- bra.s abbc <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    ab96:	|  ,--|-> movea.l 8(sp),a0
    ab9a:	|  |  |   movea.l 80(a0),a0
    ab9e:	|  |  |   move.l (a0),d1
    aba0:	|  |  |   move.l 12(sp),d0
    aba4:	|  |  |   add.l d0,d0
    aba6:	|  |  |   add.l d0,d0
    aba8:	|  |  |   movea.l d1,a0
    abaa:	|  |  |   adda.l d0,a0
    abac:	|  |  |   move.l (a0),d0
    abae:	|  |  |   move.l d0,-(sp)
    abb0:	|  |  |   jsr 9630 <deleteAnim>
    abb6:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    abb8:	|  |  |   addq.l #1,12(sp)
    abbc:	|  |  '-> moveq #2,d0
    abbe:	|  |      cmp.l 12(sp),d0
    abc2:	|  '----- bge.s ab96 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    abc4:	|         move.l #108552,16(sp)
    abcc:	|     ,-- bra.s abdc <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    abce:	|  ,--|-> movea.l 16(sp),a0
    abd2:	|  |  |   move.l (a0),d0
    abd4:	|  |  |   moveq #36,d1
    abd6:	|  |  |   add.l d0,d1
    abd8:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    abdc:	|  |  '-> movea.l 16(sp),a0
    abe0:	|  |      move.l (a0),d0
    abe2:	|  |      cmp.l 8(sp),d0
    abe6:	|  '----- bne.s abce <removeOneCharacter+0xa6>

        *killPeople = p->next;
    abe8:	|         movea.l 8(sp),a0
    abec:	|         move.l 36(a0),d0
    abf0:	|         movea.l 16(sp),a0
    abf4:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    abf6:	|         movea.l 8(sp),a0
    abfa:	|         move.l 114(a0),d0
    abfe:	|         move.l d0,-(sp)
    ac00:	|         jsr d5fc <removeObjectType>
    ac06:	|         addq.l #4,sp
        FreeVec(p);
    ac08:	|         move.l 8(sp),4(sp)
    ac0e:	|         move.l 1a7a4 <SysBase>,d0
    ac14:	|         movea.l d0,a6
    ac16:	|         movea.l 4(sp),a1
    ac1a:	|         jsr -690(a6)
    }
}
    ac1e:	'-------> nop
    ac20:	          movea.l (sp)+,a6
    ac22:	          lea 16(sp),sp
    ac26:	          rts

0000ac28 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    ac28:	       subq.l #8,sp
    ac2a:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    ac2c:	       movea.l 16(sp),a0
    ac30:	       movea.l 80(a0),a0
    ac34:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    ac3a:	       movea.l 16(sp),a0
    ac3e:	       move.l 92(a0),d2
    ac42:	       move.l 4(sp),-(sp)
    ac46:	       pea b4 <_start+0xb4>
    ac4a:	       jsr 17944 <__divsi3>
    ac50:	       addq.l #8,sp
    ac52:	       add.l d2,d0
    ac54:	       move.l d0,d1
    ac56:	       addi.l #180,d1
    ac5c:	       movea.l 16(sp),a0
    ac60:	       move.l 100(a0),d0
    ac64:	       move.l d1,d2
    ac66:	       add.l d0,d2
    ac68:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    ac6c:	   ,-- bra.s ac76 <rethinkAngle+0x4e>
    ac6e:	,--|-> addi.l #-360,8(sp)
    ac76:	|  '-> cmpi.l #359,8(sp)
    ac7e:	'----- bgt.s ac6e <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    ac80:	       move.l 4(sp),-(sp)
    ac84:	       move.l 12(sp),-(sp)
    ac88:	       jsr 178c6 <__mulsi3>
    ac8e:	       addq.l #8,sp
    ac90:	       pea 168 <decodeFilename+0x50>
    ac94:	       move.l d0,-(sp)
    ac96:	       jsr 17944 <__divsi3>
    ac9c:	       addq.l #8,sp
    ac9e:	       movea.l 16(sp),a0
    aca2:	       move.l d0,106(a0)
}
    aca6:	       nop
    aca8:	       move.l (sp)+,d2
    acaa:	       addq.l #8,sp
    acac:	       rts

0000acae <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    acae:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    acb0:	          movea.l 8(sp),a0
    acb4:	          move.l 8(a0),d0
    acb8:	          move.l 12(sp),-(sp)
    acbc:	          move.l d0,-(sp)
    acbe:	          jsr 8d0 <put2bytes>
    acc4:	          addq.l #8,sp
	if (p -> numFrames) {
    acc6:	          movea.l 8(sp),a0
    acca:	          move.l 8(a0),d0
    acce:	,-------- beq.w ad72 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    acd2:	|         movea.l 8(sp),a0
    acd6:	|         movea.l (a0),a0
    acd8:	|         move.l (a0),d0
    acda:	|         move.l 12(sp),-(sp)
    acde:	|         move.l d0,-(sp)
    ace0:	|         jsr 958 <put4bytes>
    ace6:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    ace8:	|         clr.l (sp)
    acea:	|     ,-- bra.s ad64 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    acec:	|  ,--|-> movea.l 8(sp),a0
    acf0:	|  |  |   movea.l 4(a0),a0
    acf4:	|  |  |   move.l (sp),d1
    acf6:	|  |  |   move.l d1,d0
    acf8:	|  |  |   add.l d0,d0
    acfa:	|  |  |   add.l d1,d0
    acfc:	|  |  |   add.l d0,d0
    acfe:	|  |  |   add.l d0,d0
    ad00:	|  |  |   adda.l d0,a0
    ad02:	|  |  |   move.l (a0),d0
    ad04:	|  |  |   move.l 12(sp),-(sp)
    ad08:	|  |  |   move.l d0,-(sp)
    ad0a:	|  |  |   jsr 958 <put4bytes>
    ad10:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    ad12:	|  |  |   movea.l 8(sp),a0
    ad16:	|  |  |   movea.l 4(a0),a0
    ad1a:	|  |  |   move.l (sp),d1
    ad1c:	|  |  |   move.l d1,d0
    ad1e:	|  |  |   add.l d0,d0
    ad20:	|  |  |   add.l d1,d0
    ad22:	|  |  |   add.l d0,d0
    ad24:	|  |  |   add.l d0,d0
    ad26:	|  |  |   adda.l d0,a0
    ad28:	|  |  |   move.l 4(a0),d0
    ad2c:	|  |  |   move.l 12(sp),-(sp)
    ad30:	|  |  |   move.l d0,-(sp)
    ad32:	|  |  |   jsr 958 <put4bytes>
    ad38:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    ad3a:	|  |  |   movea.l 8(sp),a0
    ad3e:	|  |  |   movea.l 4(a0),a0
    ad42:	|  |  |   move.l (sp),d1
    ad44:	|  |  |   move.l d1,d0
    ad46:	|  |  |   add.l d0,d0
    ad48:	|  |  |   add.l d1,d0
    ad4a:	|  |  |   add.l d0,d0
    ad4c:	|  |  |   add.l d0,d0
    ad4e:	|  |  |   adda.l d0,a0
    ad50:	|  |  |   move.l 8(a0),d0
    ad54:	|  |  |   move.l 12(sp),-(sp)
    ad58:	|  |  |   move.l d0,-(sp)
    ad5a:	|  |  |   jsr 958 <put4bytes>
    ad60:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    ad62:	|  |  |   addq.l #1,(sp)
    ad64:	|  |  '-> movea.l 8(sp),a0
    ad68:	|  |      move.l 8(a0),d0
    ad6c:	|  |      cmp.l (sp),d0
    ad6e:	|  '----- bgt.w acec <saveAnim+0x3e>
		}
	}
	return TRUE;
    ad72:	'-------> moveq #1,d0
}
    ad74:	          addq.l #4,sp
    ad76:	          rts

0000ad78 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    ad78:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    ad7a:	             movea.l 8(sp),a0
    ad7e:	             move.l 4(a0),d0
    ad82:	             move.l 12(sp),-(sp)
    ad86:	             move.l d0,-(sp)
    ad88:	             jsr 8d0 <put2bytes>
    ad8e:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    ad90:	             clr.l (sp)
    ad92:	   ,-------- bra.s adbe <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    ad94:	,--|-------> movea.l 8(sp),a0
    ad98:	|  |         move.l (a0),d1
    ad9a:	|  |         move.l (sp),d0
    ad9c:	|  |         add.l d0,d0
    ad9e:	|  |         add.l d0,d0
    ada0:	|  |         movea.l d1,a0
    ada2:	|  |         adda.l d0,a0
    ada4:	|  |         move.l (a0),d0
    ada6:	|  |         move.l 12(sp),-(sp)
    adaa:	|  |         move.l d0,-(sp)
    adac:	|  |         jsr acae <saveAnim>
    adb2:	|  |         addq.l #8,sp
    adb4:	|  |         tst.w d0
    adb6:	|  |     ,-- bne.s adbc <saveCostume+0x44>
    adb8:	|  |     |   clr.w d0
    adba:	|  |  ,--|-- bra.s add2 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    adbc:	|  |  |  '-> addq.l #1,(sp)
    adbe:	|  '--|----> movea.l 8(sp),a0
    adc2:	|     |      move.l 4(a0),d1
    adc6:	|     |      move.l d1,d0
    adc8:	|     |      add.l d0,d0
    adca:	|     |      add.l d1,d0
    adcc:	|     |      cmp.l (sp),d0
    adce:	'-----|----- bgt.s ad94 <saveCostume+0x1c>
	}

	return TRUE;
    add0:	      |      moveq #1,d0
}
    add2:	      '----> addq.l #4,sp
    add4:	             rts

0000add6 <savePeople>:

BOOL savePeople (BPTR fp) {
    add6:	             lea -144(sp),sp
    adda:	             move.l a6,-(sp)
    addc:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    adde:	             move.l 1a808 <allPeople>,148(sp)
	int countPeople = 0, a;
    ade6:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    adea:	             move.w 1a136 <scaleHorizon>,d0
    adf0:	             movea.w d0,a0
    adf2:	             move.l 156(sp),-(sp)
    adf6:	             move.l a0,-(sp)
    adf8:	             jsr a9c <putSigned>
    adfe:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    ae00:	             move.w 1a138 <scaleDivide>,d0
    ae06:	             movea.w d0,a0
    ae08:	             move.l 156(sp),-(sp)
    ae0c:	             move.l a0,-(sp)
    ae0e:	             jsr a9c <putSigned>
    ae14:	             addq.l #8,sp

	while (me) {
    ae16:	         ,-- bra.s ae26 <savePeople+0x50>
		countPeople ++;
    ae18:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    ae1c:	      |  |   movea.l 148(sp),a0
    ae20:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    ae26:	      |  '-> tst.l 148(sp)
    ae2a:	      '----- bne.s ae18 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    ae2c:	             move.l 156(sp),-(sp)
    ae30:	             move.l 148(sp),-(sp)
    ae34:	             jsr 8d0 <put2bytes>
    ae3a:	             addq.l #8,sp

	me = allPeople;
    ae3c:	             move.l 1a808 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    ae44:	             clr.l 140(sp)
    ae48:	   ,-------- bra.w b2a0 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    ae4c:	,--|-------> movea.l 148(sp),a0
    ae50:	|  |         move.l (a0),d0
    ae52:	|  |         move.l 156(sp),-(sp)
    ae56:	|  |         move.l d0,-(sp)
    ae58:	|  |         jsr a46 <putFloat>
    ae5e:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    ae60:	|  |         movea.l 148(sp),a0
    ae64:	|  |         move.l 4(a0),d0
    ae68:	|  |         move.l 156(sp),-(sp)
    ae6c:	|  |         move.l d0,-(sp)
    ae6e:	|  |         jsr a46 <putFloat>
    ae74:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    ae76:	|  |         movea.l 148(sp),a0
    ae7a:	|  |         move.l 80(a0),d0
    ae7e:	|  |         move.l 156(sp),-(sp)
    ae82:	|  |         move.l d0,-(sp)
    ae84:	|  |         jsr ad78 <saveCostume>
    ae8a:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    ae8c:	|  |         movea.l 148(sp),a0
    ae90:	|  |         move.l 72(a0),d0
    ae94:	|  |         move.l 156(sp),-(sp)
    ae98:	|  |         move.l d0,-(sp)
    ae9a:	|  |         jsr acae <saveAnim>
    aea0:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    aea2:	|  |         move.l 156(sp),136(sp)
    aea8:	|  |         movea.l 148(sp),a0
    aeac:	|  |         move.l 72(a0),d1
    aeb0:	|  |         movea.l 148(sp),a0
    aeb4:	|  |         move.l 76(a0),d0
    aeb8:	|  |         cmp.l d1,d0
    aeba:	|  |         seq d0
    aebc:	|  |         neg.b d0
    aebe:	|  |         move.b d0,d0
    aec0:	|  |         andi.l #255,d0
    aec6:	|  |         move.l d0,132(sp)
    aeca:	|  |         move.l 1a7ac <DOSBase>,d0
    aed0:	|  |         movea.l d0,a6
    aed2:	|  |         move.l 136(sp),d1
    aed6:	|  |         move.l 132(sp),d2
    aeda:	|  |         jsr -312(a6)
    aede:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    aee2:	|  |         movea.l 148(sp),a0
    aee6:	|  |         move.l 32(a0),d0
    aeea:	|  |         move.l 156(sp),-(sp)
    aeee:	|  |         move.l d0,-(sp)
    aef0:	|  |         jsr a46 <putFloat>
    aef6:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    aef8:	|  |         movea.l 148(sp),a0
    aefc:	|  |         move.l 118(a0),d0
    af00:	|  |         move.l 156(sp),-(sp)
    af04:	|  |         move.l d0,-(sp)
    af06:	|  |         jsr 8d0 <put2bytes>
    af0c:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    af0e:	|  |         movea.l 148(sp),a0
    af12:	|  |         move.l 20(a0),d0
    af16:	|  |         move.l 156(sp),-(sp)
    af1a:	|  |         move.l d0,-(sp)
    af1c:	|  |         jsr 8d0 <put2bytes>
    af22:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    af24:	|  |         movea.l 148(sp),a0
    af28:	|  |         move.l 40(a0),d0
    af2c:	|  |         move.l 156(sp),-(sp)
    af30:	|  |         move.l d0,-(sp)
    af32:	|  |         jsr 8d0 <put2bytes>
    af38:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    af3a:	|  |         movea.l 148(sp),a0
    af3e:	|  |         move.l 44(a0),d0
    af42:	|  |         move.l 156(sp),-(sp)
    af46:	|  |         move.l d0,-(sp)
    af48:	|  |         jsr 8d0 <put2bytes>
    af4e:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    af50:	|  |         movea.l 148(sp),a0
    af54:	|  |         move.l 48(a0),d0
    af58:	|  |         move.l 156(sp),-(sp)
    af5c:	|  |         move.l d0,-(sp)
    af5e:	|  |         jsr 8d0 <put2bytes>
    af64:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    af66:	|  |         movea.l 148(sp),a0
    af6a:	|  |         move.l 52(a0),d0
    af6e:	|  |         move.l 156(sp),-(sp)
    af72:	|  |         move.l d0,-(sp)
    af74:	|  |         jsr 8d0 <put2bytes>
    af7a:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    af7c:	|  |         movea.l 148(sp),a0
    af80:	|  |         move.l 84(a0),d0
    af84:	|  |         move.l 156(sp),-(sp)
    af88:	|  |         move.l d0,-(sp)
    af8a:	|  |         jsr 8d0 <put2bytes>
    af90:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    af92:	|  |         movea.l 148(sp),a0
    af96:	|  |         move.l 88(a0),d0
    af9a:	|  |         move.l 156(sp),-(sp)
    af9e:	|  |         move.l d0,-(sp)
    afa0:	|  |         jsr 8d0 <put2bytes>
    afa6:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    afa8:	|  |         movea.l 148(sp),a0
    afac:	|  |         move.l 28(a0),d0
    afb0:	|  |         move.l 156(sp),-(sp)
    afb4:	|  |         move.l d0,-(sp)
    afb6:	|  |         jsr 8d0 <put2bytes>
    afbc:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    afbe:	|  |         movea.l 148(sp),a0
    afc2:	|  |         move.l 122(a0),d0
    afc6:	|  |         move.l 156(sp),-(sp)
    afca:	|  |         move.l d0,-(sp)
    afcc:	|  |         jsr 8d0 <put2bytes>
    afd2:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    afd4:	|  |         movea.l 148(sp),a0
    afd8:	|  |         move.l 24(a0),d0
    afdc:	|  |         move.l d0,d0
    afde:	|  |         movea.w d0,a0
    afe0:	|  |         move.l 156(sp),-(sp)
    afe4:	|  |         move.l a0,-(sp)
    afe6:	|  |         jsr a9c <putSigned>
    afec:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    afee:	|  |         move.l 156(sp),124(sp)
    aff4:	|  |         movea.l 148(sp),a0
    aff8:	|  |         move.w 104(a0),d0
    affc:	|  |         movea.w d0,a0
    affe:	|  |         move.l a0,120(sp)
    b002:	|  |         move.l 1a7ac <DOSBase>,d0
    b008:	|  |         movea.l d0,a6
    b00a:	|  |         move.l 124(sp),d1
    b00e:	|  |         move.l 120(sp),d2
    b012:	|  |         jsr -312(a6)
    b016:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b01a:	|  |         move.l 156(sp),112(sp)
    b020:	|  |         movea.l 148(sp),a0
    b024:	|  |         move.w 64(a0),d0
    b028:	|  |         movea.w d0,a0
    b02a:	|  |         move.l a0,108(sp)
    b02e:	|  |         move.l 1a7ac <DOSBase>,d0
    b034:	|  |         movea.l d0,a6
    b036:	|  |         move.l 112(sp),d1
    b03a:	|  |         move.l 108(sp),d2
    b03e:	|  |         jsr -312(a6)
    b042:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b046:	|  |         move.l 156(sp),100(sp)
    b04c:	|  |         movea.l 148(sp),a0
    b050:	|  |         move.w 66(a0),d0
    b054:	|  |         movea.w d0,a0
    b056:	|  |         move.l a0,96(sp)
    b05a:	|  |         move.l 1a7ac <DOSBase>,d0
    b060:	|  |         movea.l d0,a6
    b062:	|  |         move.l 100(sp),d1
    b066:	|  |         move.l 96(sp),d2
    b06a:	|  |         jsr -312(a6)
    b06e:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b072:	|  |         movea.l 148(sp),a0
    b076:	|  |         move.l 68(a0),d0
    b07a:	|  |  ,----- beq.s b0b8 <savePeople+0x2e2>
			FPutC (fp, 1);
    b07c:	|  |  |      move.l 156(sp),76(sp)
    b082:	|  |  |      moveq #1,d0
    b084:	|  |  |      move.l d0,72(sp)
    b088:	|  |  |      move.l 1a7ac <DOSBase>,d0
    b08e:	|  |  |      movea.l d0,a6
    b090:	|  |  |      move.l 76(sp),d1
    b094:	|  |  |      move.l 72(sp),d2
    b098:	|  |  |      jsr -312(a6)
    b09c:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b0a0:	|  |  |      movea.l 148(sp),a0
    b0a4:	|  |  |      move.l 68(a0),d0
    b0a8:	|  |  |      move.l 156(sp),-(sp)
    b0ac:	|  |  |      move.l d0,-(sp)
    b0ae:	|  |  |      jsr c2d2 <saveFunction>
    b0b4:	|  |  |      addq.l #8,sp
    b0b6:	|  |  |  ,-- bra.s b0dc <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b0b8:	|  |  '--|-> move.l 156(sp),88(sp)
    b0be:	|  |     |   moveq #1,d0
    b0c0:	|  |     |   move.l d0,84(sp)
    b0c4:	|  |     |   move.l 1a7ac <DOSBase>,d0
    b0ca:	|  |     |   movea.l d0,a6
    b0cc:	|  |     |   move.l 88(sp),d1
    b0d0:	|  |     |   move.l 84(sp),d2
    b0d4:	|  |     |   jsr -312(a6)
    b0d8:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b0dc:	|  |     '-> movea.l 148(sp),a0
    b0e0:	|  |         move.l 106(a0),d0
    b0e4:	|  |         move.l 156(sp),-(sp)
    b0e8:	|  |         move.l d0,-(sp)
    b0ea:	|  |         jsr 8d0 <put2bytes>
    b0f0:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b0f2:	|  |         movea.l 148(sp),a0
    b0f6:	|  |         move.l 92(a0),d0
    b0fa:	|  |         move.l 156(sp),-(sp)
    b0fe:	|  |         move.l d0,-(sp)
    b100:	|  |         jsr 8d0 <put2bytes>
    b106:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b108:	|  |         movea.l 148(sp),a0
    b10c:	|  |         move.l 100(a0),d0
    b110:	|  |         move.l 156(sp),-(sp)
    b114:	|  |         move.l d0,-(sp)
    b116:	|  |         jsr 8d0 <put2bytes>
    b11c:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b11e:	|  |         movea.l 148(sp),a0
    b122:	|  |         move.l 96(a0),d0
    b126:	|  |         move.l 156(sp),-(sp)
    b12a:	|  |         move.l d0,-(sp)
    b12c:	|  |         jsr 8d0 <put2bytes>
    b132:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b134:	|  |         movea.l 148(sp),a0
    b138:	|  |         move.l 110(a0),d0
    b13c:	|  |         move.l d0,d0
    b13e:	|  |         movea.w d0,a0
    b140:	|  |         move.l 156(sp),-(sp)
    b144:	|  |         move.l a0,-(sp)
    b146:	|  |         jsr a9c <putSigned>
    b14c:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b14e:	|  |         movea.l 148(sp),a0
    b152:	|  |         move.l 56(a0),d0
    b156:	|  |         move.l d0,d0
    b158:	|  |         movea.w d0,a0
    b15a:	|  |         move.l 156(sp),-(sp)
    b15e:	|  |         move.l a0,-(sp)
    b160:	|  |         jsr a9c <putSigned>
    b166:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b168:	|  |         movea.l 148(sp),a0
    b16c:	|  |         move.l 60(a0),d0
    b170:	|  |         move.l d0,d0
    b172:	|  |         movea.w d0,a0
    b174:	|  |         move.l 156(sp),-(sp)
    b178:	|  |         move.l a0,-(sp)
    b17a:	|  |         jsr a9c <putSigned>
    b180:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b182:	|  |         move.l 156(sp),64(sp)
    b188:	|  |         movea.l 148(sp),a0
    b18c:	|  |         move.b 126(a0),d0
    b190:	|  |         move.b d0,d0
    b192:	|  |         andi.l #255,d0
    b198:	|  |         move.l d0,60(sp)
    b19c:	|  |         move.l 1a7ac <DOSBase>,d0
    b1a2:	|  |         movea.l d0,a6
    b1a4:	|  |         move.l 64(sp),d1
    b1a8:	|  |         move.l 60(sp),d2
    b1ac:	|  |         jsr -312(a6)
    b1b0:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b1b4:	|  |         move.l 156(sp),52(sp)
    b1ba:	|  |         movea.l 148(sp),a0
    b1be:	|  |         move.b 127(a0),d0
    b1c2:	|  |         move.b d0,d0
    b1c4:	|  |         andi.l #255,d0
    b1ca:	|  |         move.l d0,48(sp)
    b1ce:	|  |         move.l 1a7ac <DOSBase>,d0
    b1d4:	|  |         movea.l d0,a6
    b1d6:	|  |         move.l 52(sp),d1
    b1da:	|  |         move.l 48(sp),d2
    b1de:	|  |         jsr -312(a6)
    b1e2:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b1e6:	|  |         move.l 156(sp),40(sp)
    b1ec:	|  |         movea.l 148(sp),a0
    b1f0:	|  |         move.b 128(a0),d0
    b1f4:	|  |         move.b d0,d0
    b1f6:	|  |         andi.l #255,d0
    b1fc:	|  |         move.l d0,36(sp)
    b200:	|  |         move.l 1a7ac <DOSBase>,d0
    b206:	|  |         movea.l d0,a6
    b208:	|  |         move.l 40(sp),d1
    b20c:	|  |         move.l 36(sp),d2
    b210:	|  |         jsr -312(a6)
    b214:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b218:	|  |         move.l 156(sp),28(sp)
    b21e:	|  |         movea.l 148(sp),a0
    b222:	|  |         move.b 129(a0),d0
    b226:	|  |         move.b d0,d0
    b228:	|  |         andi.l #255,d0
    b22e:	|  |         move.l d0,24(sp)
    b232:	|  |         move.l 1a7ac <DOSBase>,d0
    b238:	|  |         movea.l d0,a6
    b23a:	|  |         move.l 28(sp),d1
    b23e:	|  |         move.l 24(sp),d2
    b242:	|  |         jsr -312(a6)
    b246:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b24a:	|  |         move.l 156(sp),16(sp)
    b250:	|  |         movea.l 148(sp),a0
    b254:	|  |         move.b 130(a0),d0
    b258:	|  |         move.b d0,d0
    b25a:	|  |         andi.l #255,d0
    b260:	|  |         move.l d0,12(sp)
    b264:	|  |         move.l 1a7ac <DOSBase>,d0
    b26a:	|  |         movea.l d0,a6
    b26c:	|  |         move.l 16(sp),d1
    b270:	|  |         move.l 12(sp),d2
    b274:	|  |         jsr -312(a6)
    b278:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b27c:	|  |         movea.l 148(sp),a0
    b280:	|  |         move.l 114(a0),d0
    b284:	|  |         move.l 156(sp),-(sp)
    b288:	|  |         move.l d0,-(sp)
    b28a:	|  |         jsr d69c <saveObjectRef>
    b290:	|  |         addq.l #8,sp

		me = me -> next;
    b292:	|  |         movea.l 148(sp),a0
    b296:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b29c:	|  |         addq.l #1,140(sp)
    b2a0:	|  '-------> movea.l 140(sp),a0
    b2a4:	|            cmpa.l 144(sp),a0
    b2a8:	'----------- blt.w ae4c <savePeople+0x76>
	}
	return TRUE;
    b2ac:	             moveq #1,d0
}
    b2ae:	             move.l (sp)+,d2
    b2b0:	             movea.l (sp)+,a6
    b2b2:	             lea 144(sp),sp
    b2b6:	             rts

0000b2b8 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b2b8:	movea.l 4(sp),a0
    b2bc:	move.l 8(sp),(a0)
}
    b2c0:	nop
    b2c2:	rts

0000b2c4 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b2c4:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b2c6:	       move.l 12(sp),-(sp)
    b2ca:	       jsr a352 <findPerson>
    b2d0:	       addq.l #4,sp
    b2d2:	       move.l d0,(sp)
	if (! moveMe) return;
    b2d4:	,----- beq.s b2e8 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b2d6:	|      move.l 8(sp),-(sp)
    b2da:	|      move.l 4(sp),-(sp)
    b2de:	|      jsr b2ee <setMyDrawMode>
    b2e4:	|      addq.l #8,sp
    b2e6:	|  ,-- bra.s b2ea <setDrawMode+0x26>
	if (! moveMe) return;
    b2e8:	'--|-> nop
}
    b2ea:	   '-> addq.l #4,sp
    b2ec:	       rts

0000b2ee <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b2ee:	       moveq #19,d0
    b2f0:	       cmp.l 8(sp),d0
    b2f4:	,----- bcs.w b7cc <setMyDrawMode+0x4de>
    b2f8:	|      move.l 8(sp),d0
    b2fc:	|      add.l d0,d0
    b2fe:	|      movea.l d0,a0
    b300:	|      adda.l #45836,a0
    b306:	|      move.w (a0),d0
    b308:	|      jmp (b30c <setMyDrawMode+0x1e>,pc,d0.w)
    b30c:	|      .short 0x04c0
    b30e:	|      ori.l #6684712,-(a4)
    b314:	|      btst d0,-(a0)
    b316:	|      bchg d0,(a6)+
    b318:	|      bclr d0,(a4)+
    b31a:	|      bset d0,(a2)+
    b31c:	|      andi.b #84,(a6)
    b320:	|      andi.l #55575312,(a2)
    b326:	|      .short 0x02d0
    b328:	|      bclr d1,(a0)
    b32a:	|      .short 0x044a
    b32c:	|      .short 0x040c
    b32e:	|      movep.l d1,1158(a6)
    b332:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b334:	|      movea.l 4(sp),a0
    b338:	|      clr.b 128(a0)
    b33c:	|      movea.l 4(sp),a0
    b340:	|      move.b 128(a0),d0
    b344:	|      movea.l 4(sp),a0
    b348:	|      move.b d0,127(a0)
    b34c:	|      movea.l 4(sp),a0
    b350:	|      move.b 127(a0),d0
    b354:	|      movea.l 4(sp),a0
    b358:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b35c:	|      movea.l 4(sp),a0
    b360:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b364:	|      movea.l 4(sp),a0
    b368:	|      move.b #64,130(a0)
			break;
    b36e:	|  ,-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b372:	|  |   movea.l 4(sp),a0
    b376:	|  |   clr.b 128(a0)
    b37a:	|  |   movea.l 4(sp),a0
    b37e:	|  |   move.b 128(a0),d0
    b382:	|  |   movea.l 4(sp),a0
    b386:	|  |   move.b d0,127(a0)
    b38a:	|  |   movea.l 4(sp),a0
    b38e:	|  |   move.b 127(a0),d0
    b392:	|  |   movea.l 4(sp),a0
    b396:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b39a:	|  |   movea.l 4(sp),a0
    b39e:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b3a2:	|  |   movea.l 4(sp),a0
    b3a6:	|  |   move.b #-128,130(a0)
			break;
    b3ac:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b3b0:	|  |   movea.l 4(sp),a0
    b3b4:	|  |   clr.b 128(a0)
    b3b8:	|  |   movea.l 4(sp),a0
    b3bc:	|  |   move.b 128(a0),d0
    b3c0:	|  |   movea.l 4(sp),a0
    b3c4:	|  |   move.b d0,127(a0)
    b3c8:	|  |   movea.l 4(sp),a0
    b3cc:	|  |   move.b 127(a0),d0
    b3d0:	|  |   movea.l 4(sp),a0
    b3d4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b3d8:	|  |   movea.l 4(sp),a0
    b3dc:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b3e0:	|  |   movea.l 4(sp),a0
    b3e4:	|  |   move.b #-64,130(a0)
			break;
    b3ea:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b3ee:	|  |   movea.l 4(sp),a0
    b3f2:	|  |   clr.b 128(a0)
    b3f6:	|  |   movea.l 4(sp),a0
    b3fa:	|  |   move.b 128(a0),d0
    b3fe:	|  |   movea.l 4(sp),a0
    b402:	|  |   move.b d0,127(a0)
    b406:	|  |   movea.l 4(sp),a0
    b40a:	|  |   move.b 127(a0),d0
    b40e:	|  |   movea.l 4(sp),a0
    b412:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b416:	|  |   movea.l 4(sp),a0
    b41a:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b41e:	|  |   movea.l 4(sp),a0
    b422:	|  |   move.b #-2,130(a0)
			break;
    b428:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b42c:	|  |   movea.l 4(sp),a0
    b430:	|  |   clr.b 128(a0)
    b434:	|  |   movea.l 4(sp),a0
    b438:	|  |   move.b 128(a0),d0
    b43c:	|  |   movea.l 4(sp),a0
    b440:	|  |   move.b d0,127(a0)
    b444:	|  |   movea.l 4(sp),a0
    b448:	|  |   move.b 127(a0),d0
    b44c:	|  |   movea.l 4(sp),a0
    b450:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b454:	|  |   movea.l 4(sp),a0
    b458:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b45e:	|  |   movea.l 4(sp),a0
    b462:	|  |   clr.b 130(a0)
			break;
    b466:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b46a:	|  |   movea.l 4(sp),a0
    b46e:	|  |   clr.b 128(a0)
    b472:	|  |   movea.l 4(sp),a0
    b476:	|  |   move.b 128(a0),d0
    b47a:	|  |   movea.l 4(sp),a0
    b47e:	|  |   move.b d0,127(a0)
    b482:	|  |   movea.l 4(sp),a0
    b486:	|  |   move.b 127(a0),d0
    b48a:	|  |   movea.l 4(sp),a0
    b48e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b492:	|  |   movea.l 4(sp),a0
    b496:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b49c:	|  |   movea.l 4(sp),a0
    b4a0:	|  |   clr.b 130(a0)
			break;
    b4a4:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b4a8:	|  |   movea.l 4(sp),a0
    b4ac:	|  |   clr.b 128(a0)
    b4b0:	|  |   movea.l 4(sp),a0
    b4b4:	|  |   move.b 128(a0),d0
    b4b8:	|  |   movea.l 4(sp),a0
    b4bc:	|  |   move.b d0,127(a0)
    b4c0:	|  |   movea.l 4(sp),a0
    b4c4:	|  |   move.b 127(a0),d0
    b4c8:	|  |   movea.l 4(sp),a0
    b4cc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b4d0:	|  |   movea.l 4(sp),a0
    b4d4:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b4da:	|  |   movea.l 4(sp),a0
    b4de:	|  |   clr.b 130(a0)
			break;
    b4e2:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b4e6:	|  |   movea.l 4(sp),a0
    b4ea:	|  |   clr.b 128(a0)
    b4ee:	|  |   movea.l 4(sp),a0
    b4f2:	|  |   move.b 128(a0),d0
    b4f6:	|  |   movea.l 4(sp),a0
    b4fa:	|  |   move.b d0,127(a0)
    b4fe:	|  |   movea.l 4(sp),a0
    b502:	|  |   move.b 127(a0),d0
    b506:	|  |   movea.l 4(sp),a0
    b50a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b50e:	|  |   movea.l 4(sp),a0
    b512:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b516:	|  |   movea.l 4(sp),a0
    b51a:	|  |   clr.b 130(a0)
			break;
    b51e:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b522:	|  |   movea.l 4(sp),a0
    b526:	|  |   clr.b 128(a0)
    b52a:	|  |   movea.l 4(sp),a0
    b52e:	|  |   move.b 128(a0),d0
    b532:	|  |   movea.l 4(sp),a0
    b536:	|  |   move.b d0,127(a0)
    b53a:	|  |   movea.l 4(sp),a0
    b53e:	|  |   move.b 127(a0),d0
    b542:	|  |   movea.l 4(sp),a0
    b546:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b54a:	|  |   movea.l 4(sp),a0
    b54e:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b552:	|  |   movea.l 4(sp),a0
    b556:	|  |   move.b #64,130(a0)
			break;
    b55c:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b560:	|  |   movea.l 4(sp),a0
    b564:	|  |   clr.b 128(a0)
    b568:	|  |   movea.l 4(sp),a0
    b56c:	|  |   move.b 128(a0),d0
    b570:	|  |   movea.l 4(sp),a0
    b574:	|  |   move.b d0,127(a0)
    b578:	|  |   movea.l 4(sp),a0
    b57c:	|  |   move.b 127(a0),d0
    b580:	|  |   movea.l 4(sp),a0
    b584:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b588:	|  |   movea.l 4(sp),a0
    b58c:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b590:	|  |   movea.l 4(sp),a0
    b594:	|  |   move.b #-128,130(a0)
			break;
    b59a:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b59e:	|  |   movea.l 4(sp),a0
    b5a2:	|  |   clr.b 128(a0)
    b5a6:	|  |   movea.l 4(sp),a0
    b5aa:	|  |   move.b 128(a0),d0
    b5ae:	|  |   movea.l 4(sp),a0
    b5b2:	|  |   move.b d0,127(a0)
    b5b6:	|  |   movea.l 4(sp),a0
    b5ba:	|  |   move.b 127(a0),d0
    b5be:	|  |   movea.l 4(sp),a0
    b5c2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b5c6:	|  |   movea.l 4(sp),a0
    b5ca:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b5ce:	|  |   movea.l 4(sp),a0
    b5d2:	|  |   move.b #-64,130(a0)
			break;
    b5d8:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b5dc:	|  |   movea.l 4(sp),a0
    b5e0:	|  |   move.b #-128,128(a0)
    b5e6:	|  |   movea.l 4(sp),a0
    b5ea:	|  |   move.b 128(a0),d0
    b5ee:	|  |   movea.l 4(sp),a0
    b5f2:	|  |   move.b d0,127(a0)
    b5f6:	|  |   movea.l 4(sp),a0
    b5fa:	|  |   move.b 127(a0),d0
    b5fe:	|  |   movea.l 4(sp),a0
    b602:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b606:	|  |   movea.l 4(sp),a0
    b60a:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b610:	|  |   movea.l 4(sp),a0
    b614:	|  |   clr.b 130(a0)
			break;
    b618:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b61c:	|  |   movea.l 4(sp),a0
    b620:	|  |   move.b #-128,128(a0)
    b626:	|  |   movea.l 4(sp),a0
    b62a:	|  |   move.b 128(a0),d0
    b62e:	|  |   movea.l 4(sp),a0
    b632:	|  |   move.b d0,127(a0)
    b636:	|  |   movea.l 4(sp),a0
    b63a:	|  |   move.b 127(a0),d0
    b63e:	|  |   movea.l 4(sp),a0
    b642:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b646:	|  |   movea.l 4(sp),a0
    b64a:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b650:	|  |   movea.l 4(sp),a0
    b654:	|  |   clr.b 130(a0)
			break;
    b658:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b65c:	|  |   movea.l 4(sp),a0
    b660:	|  |   move.b #-128,128(a0)
    b666:	|  |   movea.l 4(sp),a0
    b66a:	|  |   move.b 128(a0),d0
    b66e:	|  |   movea.l 4(sp),a0
    b672:	|  |   move.b d0,127(a0)
    b676:	|  |   movea.l 4(sp),a0
    b67a:	|  |   move.b 127(a0),d0
    b67e:	|  |   movea.l 4(sp),a0
    b682:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b686:	|  |   movea.l 4(sp),a0
    b68a:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b690:	|  |   movea.l 4(sp),a0
    b694:	|  |   clr.b 130(a0)
			break;
    b698:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b69c:	|  |   movea.l 4(sp),a0
    b6a0:	|  |   move.b #-128,128(a0)
    b6a6:	|  |   movea.l 4(sp),a0
    b6aa:	|  |   move.b 128(a0),d0
    b6ae:	|  |   movea.l 4(sp),a0
    b6b2:	|  |   move.b d0,127(a0)
    b6b6:	|  |   movea.l 4(sp),a0
    b6ba:	|  |   move.b 127(a0),d0
    b6be:	|  |   movea.l 4(sp),a0
    b6c2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b6c6:	|  |   movea.l 4(sp),a0
    b6ca:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b6ce:	|  |   movea.l 4(sp),a0
    b6d2:	|  |   clr.b 130(a0)
			break;
    b6d6:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b6da:	|  |   movea.l 4(sp),a0
    b6de:	|  |   st 128(a0)
    b6e2:	|  |   movea.l 4(sp),a0
    b6e6:	|  |   move.b 128(a0),d0
    b6ea:	|  |   movea.l 4(sp),a0
    b6ee:	|  |   move.b d0,127(a0)
    b6f2:	|  |   movea.l 4(sp),a0
    b6f6:	|  |   move.b 127(a0),d0
    b6fa:	|  |   movea.l 4(sp),a0
    b6fe:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b702:	|  |   movea.l 4(sp),a0
    b706:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b70c:	|  |   movea.l 4(sp),a0
    b710:	|  |   clr.b 130(a0)
			break;
    b714:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b718:	|  |   movea.l 4(sp),a0
    b71c:	|  |   st 128(a0)
    b720:	|  |   movea.l 4(sp),a0
    b724:	|  |   move.b 128(a0),d0
    b728:	|  |   movea.l 4(sp),a0
    b72c:	|  |   move.b d0,127(a0)
    b730:	|  |   movea.l 4(sp),a0
    b734:	|  |   move.b 127(a0),d0
    b738:	|  |   movea.l 4(sp),a0
    b73c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b740:	|  |   movea.l 4(sp),a0
    b744:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b74a:	|  |   movea.l 4(sp),a0
    b74e:	|  |   clr.b 130(a0)
			break;
    b752:	|  +-- bra.w b806 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b756:	|  |   movea.l 4(sp),a0
    b75a:	|  |   st 128(a0)
    b75e:	|  |   movea.l 4(sp),a0
    b762:	|  |   move.b 128(a0),d0
    b766:	|  |   movea.l 4(sp),a0
    b76a:	|  |   move.b d0,127(a0)
    b76e:	|  |   movea.l 4(sp),a0
    b772:	|  |   move.b 127(a0),d0
    b776:	|  |   movea.l 4(sp),a0
    b77a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b77e:	|  |   movea.l 4(sp),a0
    b782:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b788:	|  |   movea.l 4(sp),a0
    b78c:	|  |   clr.b 130(a0)
			break;
    b790:	|  +-- bra.s b806 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b792:	|  |   movea.l 4(sp),a0
    b796:	|  |   st 128(a0)
    b79a:	|  |   movea.l 4(sp),a0
    b79e:	|  |   move.b 128(a0),d0
    b7a2:	|  |   movea.l 4(sp),a0
    b7a6:	|  |   move.b d0,127(a0)
    b7aa:	|  |   movea.l 4(sp),a0
    b7ae:	|  |   move.b 127(a0),d0
    b7b2:	|  |   movea.l 4(sp),a0
    b7b6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b7ba:	|  |   movea.l 4(sp),a0
    b7be:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b7c2:	|  |   movea.l 4(sp),a0
    b7c6:	|  |   clr.b 130(a0)
			break;
    b7ca:	|  +-- bra.s b806 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7cc:	'--|-> movea.l 4(sp),a0
    b7d0:	   |   clr.b 128(a0)
    b7d4:	   |   movea.l 4(sp),a0
    b7d8:	   |   move.b 128(a0),d0
    b7dc:	   |   movea.l 4(sp),a0
    b7e0:	   |   move.b d0,127(a0)
    b7e4:	   |   movea.l 4(sp),a0
    b7e8:	   |   move.b 127(a0),d0
    b7ec:	   |   movea.l 4(sp),a0
    b7f0:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b7f4:	   |   movea.l 4(sp),a0
    b7f8:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    b7fc:	   |   movea.l 4(sp),a0
    b800:	   |   clr.b 130(a0)
			break;
    b804:	   |   nop
	}
}
    b806:	   '-> nop
    b808:	       rts

0000b80a <shufflePeople>:

void shufflePeople () {
    b80a:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    b80e:	             move.l #108552,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    b816:	             move.l 1a808 <allPeople>,d0
    b81c:	,----------- beq.w b8f2 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    b820:	|     ,----- bra.w b8e2 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    b824:	|  ,--|----> movea.l 16(sp),a0
    b828:	|  |  |      movea.l (a0),a0
    b82a:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    b830:	|  |  |      movea.l 16(sp),a0
    b834:	|  |  |      movea.l (a0),a0
    b836:	|  |  |      move.l 118(a0),d0
    b83a:	|  |  |      moveq #1,d1
    b83c:	|  |  |      and.l d1,d0
    b83e:	|  |  |  ,-- beq.s b856 <shufflePeople+0x4c>
    b840:	|  |  |  |   move.l #1148846080,-(sp)
    b846:	|  |  |  |   move.l 16(sp),-(sp)
    b84a:	|  |  |  |   jsr 17128 <__addsf3>
    b850:	|  |  |  |   addq.l #8,sp
    b852:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    b856:	|  |  |  '-> movea.l 16(sp),a0
    b85a:	|  |  |      movea.l (a0),a0
    b85c:	|  |  |      movea.l 36(a0),a0
    b860:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    b866:	|  |  |      movea.l 16(sp),a0
    b86a:	|  |  |      movea.l (a0),a0
    b86c:	|  |  |      movea.l 36(a0),a0
    b870:	|  |  |      move.l 118(a0),d0
    b874:	|  |  |      moveq #1,d1
    b876:	|  |  |      and.l d1,d0
    b878:	|  |  |  ,-- beq.s b890 <shufflePeople+0x86>
    b87a:	|  |  |  |   move.l #1148846080,-(sp)
    b880:	|  |  |  |   move.l 12(sp),-(sp)
    b884:	|  |  |  |   jsr 17128 <__addsf3>
    b88a:	|  |  |  |   addq.l #8,sp
    b88c:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    b890:	|  |  |  '-> move.l 8(sp),-(sp)
    b894:	|  |  |      move.l 16(sp),-(sp)
    b898:	|  |  |      jsr 174d8 <__gtsf2>
    b89e:	|  |  |      addq.l #8,sp
    b8a0:	|  |  |      tst.l d0
    b8a2:	|  |  |  ,-- ble.s b8d4 <shufflePeople+0xca>
			A = (*thisReference);
    b8a4:	|  |  |  |   movea.l 16(sp),a0
    b8a8:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    b8ac:	|  |  |  |   movea.l 16(sp),a0
    b8b0:	|  |  |  |   movea.l (a0),a0
    b8b2:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    b8b6:	|  |  |  |   movea.l (sp),a0
    b8b8:	|  |  |  |   move.l 36(a0),d0
    b8bc:	|  |  |  |   movea.l 4(sp),a0
    b8c0:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    b8c4:	|  |  |  |   movea.l (sp),a0
    b8c6:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    b8cc:	|  |  |  |   movea.l 16(sp),a0
    b8d0:	|  |  |  |   move.l (sp),(a0)
    b8d2:	|  |  +--|-- bra.s b8e2 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    b8d4:	|  |  |  '-> movea.l 16(sp),a0
    b8d8:	|  |  |      move.l (a0),d0
    b8da:	|  |  |      moveq #36,d1
    b8dc:	|  |  |      add.l d0,d1
    b8de:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    b8e2:	|  |  '----> movea.l 16(sp),a0
    b8e6:	|  |         movea.l (a0),a0
    b8e8:	|  |         move.l 36(a0),d0
    b8ec:	|  '-------- bne.w b824 <shufflePeople+0x1a>
    b8f0:	|        ,-- bra.s b8f4 <shufflePeople+0xea>
	if (!allPeople) return;
    b8f2:	'--------|-> nop
		}
	}
}
    b8f4:	         '-> lea 20(sp),sp
    b8f8:	             rts

0000b8fa <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    b8fa:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    b8fc:	       tst.l 8(sp)
    b900:	   ,-- bgt.s b906 <setCharacterWalkSpeed+0xc>
    b902:	   |   clr.w d0
    b904:	,--|-- bra.s b924 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    b906:	|  '-> move.l 12(sp),-(sp)
    b90a:	|      jsr a352 <findPerson>
    b910:	|      addq.l #4,sp
    b912:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    b914:	|  ,-- bne.s b91a <setCharacterWalkSpeed+0x20>
    b916:	|  |   clr.w d0
    b918:	+--|-- bra.s b924 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    b91a:	|  '-> movea.l (sp),a0
    b91c:	|      move.l 8(sp),28(a0)
	return TRUE;
    b922:	|      moveq #1,d0
}
    b924:	'----> addq.l #4,sp
    b926:	       rts

0000b928 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    b928:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    b92a:	       move.l 8(sp),-(sp)
    b92e:	       jsr a352 <findPerson>
    b934:	       addq.l #4,sp
    b936:	       move.l d0,(sp)
    if (thisPerson) {
    b938:	,----- beq.s b958 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    b93a:	|      movea.l (sp),a0
    b93c:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    b942:	|      moveq #2,d0
    b944:	|      and.l 12(sp),d0
    b948:	|  ,-- beq.s b954 <setPersonExtra+0x2c>
    b94a:	|  |   movea.l (sp),a0
    b94c:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    b954:	|  '-> moveq #1,d0
    b956:	|  ,-- bra.s b95a <setPersonExtra+0x32>
    }
    return FALSE;
    b958:	'--|-> clr.w d0
}
    b95a:	   '-> addq.l #4,sp
    b95c:	       rts

0000b95e <setScale>:


void setScale (short int h, short int d) {
    b95e:	subq.l #4,sp
    b960:	move.l 8(sp),d1
    b964:	move.l 12(sp),d0
    b968:	move.w d1,d1
    b96a:	move.w d1,2(sp)
    b96e:	move.w d0,d0
    b970:	move.w d0,(sp)
	scaleHorizon = h;
    b972:	move.w 2(sp),1a136 <scaleHorizon>
	scaleDivide = d;
    b97a:	move.w (sp),1a138 <scaleDivide>
}
    b980:	nop
    b982:	addq.l #4,sp
    b984:	rts

0000b986 <setShown>:

void setShown (BOOL h, int ob) {
    b986:	    subq.l #8,sp
    b988:	    move.l 12(sp),d0
    b98c:	    move.w d0,d0
    b98e:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    b992:	    move.l 16(sp),-(sp)
    b996:	    jsr a352 <findPerson>
    b99c:	    addq.l #4,sp
    b99e:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    b9a2:	,-- beq.s b9ae <setShown+0x28>
    b9a4:	|   movea.l 4(sp),a0
    b9a8:	|   move.w 2(sp),104(a0)
}
    b9ae:	'-> nop
    b9b0:	    addq.l #8,sp
    b9b2:	    rts

0000b9b4 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    b9b4:	       subq.l #8,sp
    b9b6:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    b9b8:	       movea.l 16(sp),a0
    b9bc:	       move.l 92(a0),d0
    b9c0:	       move.l d0,d1
    b9c2:	       addi.l #360,d1
    b9c8:	       movea.l 16(sp),a0
    b9cc:	       move.l 96(a0),d0
    b9d0:	       move.l d1,d2
    b9d2:	       sub.l d0,d2
    b9d4:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    b9d8:	       movea.l 16(sp),a0
    b9dc:	       move.l 122(a0),d0
    b9e0:	   ,-- beq.s b9ec <spinStep+0x38>
    b9e2:	   |   movea.l 16(sp),a0
    b9e6:	   |   move.l 122(a0),d0
    b9ea:	,--|-- bra.s ba06 <spinStep+0x52>
    b9ec:	|  '-> movea.l 16(sp),a0
    b9f0:	|      movea.l 80(a0),a0
    b9f4:	|      move.l 4(a0),d0
    b9f8:	|      move.l d0,-(sp)
    b9fa:	|      pea 168 <decodeFilename+0x50>
    b9fe:	|      jsr 17944 <__divsi3>
    ba04:	|      addq.l #8,sp
    ba06:	'----> move.l d0,4(sp)
	while (diff > 180) {
    ba0a:	   ,-- bra.s ba14 <spinStep+0x60>
		diff -= 360;
    ba0c:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    ba14:	|  '-> cmpi.l #180,8(sp)
    ba1c:	'----- bgt.s ba0c <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    ba1e:	       move.l 8(sp),d0
    ba22:	       cmp.l 4(sp),d0
    ba26:	   ,-- blt.s ba44 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    ba28:	   |   movea.l 16(sp),a0
    ba2c:	   |   move.l 92(a0),d0
    ba30:	   |   sub.l 4(sp),d0
    ba34:	   |   move.l d0,-(sp)
    ba36:	   |   move.l 20(sp),-(sp)
    ba3a:	   |   jsr bb24 <turnMeAngle>
    ba40:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    ba42:	,--|-- bra.s ba8a <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    ba44:	|  '-> move.l 4(sp),d0
    ba48:	|      neg.l d0
    ba4a:	|      cmp.l 8(sp),d0
    ba4e:	|  ,-- blt.s ba6c <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    ba50:	|  |   movea.l 16(sp),a0
    ba54:	|  |   move.l 92(a0),d0
    ba58:	|  |   add.l 4(sp),d0
    ba5c:	|  |   move.l d0,-(sp)
    ba5e:	|  |   move.l 20(sp),-(sp)
    ba62:	|  |   jsr bb24 <turnMeAngle>
    ba68:	|  |   addq.l #8,sp
}
    ba6a:	+--|-- bra.s ba8a <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    ba6c:	|  '-> movea.l 16(sp),a0
    ba70:	|      move.l 96(a0),d0
    ba74:	|      move.l d0,-(sp)
    ba76:	|      move.l 20(sp),-(sp)
    ba7a:	|      jsr bb24 <turnMeAngle>
    ba80:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    ba82:	|      movea.l 16(sp),a0
    ba86:	|      clr.w 66(a0)
}
    ba8a:	'----> nop
    ba8c:	       move.l (sp)+,d2
    ba8e:	       addq.l #8,sp
    ba90:	       rts

0000ba92 <stopPerson>:


BOOL stopPerson (int o) {
    ba92:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    ba94:	       move.l 8(sp),-(sp)
    ba98:	       jsr a352 <findPerson>
    ba9e:	       addq.l #4,sp
    baa0:	       move.l d0,(sp)
    if (moveMe)
    baa2:	,----- beq.s bae0 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    baa4:	|      movea.l (sp),a0
    baa6:	|      move.l 68(a0),d0
    baaa:	+----- beq.s bae0 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    baac:	|      movea.l (sp),a0
    baae:	|      move.l 68(a0),d0
    bab2:	|      move.l d0,-(sp)
    bab4:	|      jsr 43ca <abortFunction>
    baba:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    babc:	|      movea.l (sp),a0
    babe:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bac2:	|      movea.l (sp),a0
    bac4:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bac8:	|      movea.l (sp),a0
    baca:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bace:	|      clr.l -(sp)
    bad0:	|      move.l 4(sp),-(sp)
    bad4:	|      jsr 7e28 <setFrames>
    bada:	|      addq.l #8,sp
            return TRUE;
    badc:	|      moveq #1,d0
    bade:	|  ,-- bra.s bae2 <stopPerson+0x50>
        }
    return FALSE;
    bae0:	'--|-> clr.w d0
}
    bae2:	   '-> addq.l #4,sp
    bae4:	       rts

0000bae6 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bae6:	       subq.l #8,sp
	int total = 0;
    bae8:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    baec:	       clr.l (sp)
    baee:	   ,-- bra.s bb10 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    baf0:	,--|-> movea.l 12(sp),a0
    baf4:	|  |   movea.l 4(a0),a0
    baf8:	|  |   move.l (sp),d1
    bafa:	|  |   move.l d1,d0
    bafc:	|  |   add.l d0,d0
    bafe:	|  |   add.l d1,d0
    bb00:	|  |   add.l d0,d0
    bb02:	|  |   add.l d0,d0
    bb04:	|  |   adda.l d0,a0
    bb06:	|  |   move.l 4(a0),d0
    bb0a:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bb0e:	|  |   addq.l #1,(sp)
    bb10:	|  '-> movea.l 12(sp),a0
    bb14:	|      move.l 8(a0),d0
    bb18:	|      cmp.l (sp),d0
    bb1a:	'----- bgt.s baf0 <timeForAnim+0xa>
	}
	return total;
    bb1c:	       move.l 4(sp),d0
}
    bb20:	       addq.l #8,sp
    bb22:	       rts

0000bb24 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bb24:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bb26:	       movea.l 8(sp),a0
    bb2a:	       movea.l 80(a0),a0
    bb2e:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    bb32:	       movea.l 8(sp),a0
    bb36:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    bb3c:	       move.l (sp),-(sp)
    bb3e:	       pea b4 <_start+0xb4>
    bb42:	       jsr 17944 <__divsi3>
    bb48:	       addq.l #8,sp
    bb4a:	       move.l d0,d1
    bb4c:	       addi.l #180,d1
    bb52:	       movea.l 8(sp),a0
    bb56:	       move.l 100(a0),d0
    bb5a:	       add.l d1,d0
    bb5c:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    bb60:	   ,-- bra.s bb6a <turnMeAngle+0x46>
    bb62:	,--|-> addi.l #-360,12(sp)
    bb6a:	|  '-> cmpi.l #359,12(sp)
    bb72:	'----- bgt.s bb62 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bb74:	       move.l (sp),-(sp)
    bb76:	       move.l 16(sp),-(sp)
    bb7a:	       jsr 178c6 <__mulsi3>
    bb80:	       addq.l #8,sp
    bb82:	       pea 168 <decodeFilename+0x50>
    bb86:	       move.l d0,-(sp)
    bb88:	       jsr 17944 <__divsi3>
    bb8e:	       addq.l #8,sp
    bb90:	       movea.l 8(sp),a0
    bb94:	       move.l d0,106(a0)
}
    bb98:	       nop
    bb9a:	       addq.l #4,sp
    bb9c:	       rts

0000bb9e <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    bb9e:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bba0:	          move.l 8(sp),-(sp)
    bba4:	          jsr a352 <findPerson>
    bbaa:	          addq.l #4,sp
    bbac:	          move.l d0,(sp)
    if (thisPerson) {
    bbae:	,-------- beq.s bc0e <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bbb0:	|         movea.l (sp),a0
    bbb2:	|         move.l 68(a0),d0
    bbb6:	|     ,-- beq.s bbc8 <turnPersonToFace+0x2a>
    bbb8:	|     |   movea.l (sp),a0
    bbba:	|     |   move.l 68(a0),d0
    bbbe:	|     |   move.l d0,-(sp)
    bbc0:	|     |   jsr 43ca <abortFunction>
    bbc6:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bbc8:	|     '-> movea.l (sp),a0
    bbca:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bbce:	|         movea.l (sp),a0
    bbd0:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bbd4:	|         movea.l (sp),a0
    bbd6:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bbda:	|         move.l 12(sp),-(sp)
    bbde:	|         move.l 4(sp),-(sp)
    bbe2:	|         jsr bb24 <turnMeAngle>
    bbe8:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bbea:	|         movea.l 1a800 <speech>,a0
    bbf0:	|         move.l (a0),d0
    bbf2:	|         cmp.l (sp),d0
    bbf4:	|  ,----- bne.s bbfa <turnPersonToFace+0x5c>
    bbf6:	|  |      moveq #2,d0
    bbf8:	|  |  ,-- bra.s bbfc <turnPersonToFace+0x5e>
    bbfa:	|  '--|-> moveq #0,d0
    bbfc:	|     '-> move.l d0,-(sp)
    bbfe:	|         move.l 4(sp),-(sp)
    bc02:	|         jsr 7e28 <setFrames>
    bc08:	|         addq.l #8,sp
        return TRUE;
    bc0a:	|         moveq #1,d0
    bc0c:	|     ,-- bra.s bc10 <turnPersonToFace+0x72>
    }
    return FALSE;
    bc0e:	'-----|-> clr.w d0
}
    bc10:	      '-> addq.l #4,sp
    bc12:	          rts

0000bc14 <walkAllPeople>:

void walkAllPeople() {
    bc14:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    bc16:	             move.l 1a808 <allPeople>,(sp)

	while (thisPerson) {
    bc1c:	   ,-------- bra.s bc8c <walkAllPeople+0x78>
		if (thisPerson->walking) {
    bc1e:	,--|-------> movea.l (sp),a0
    bc20:	|  |         move.w 64(a0),d0
    bc24:	|  |     ,-- beq.s bc38 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    bc26:	|  |     |   pea 1 <_start+0x1>
    bc2a:	|  |     |   move.l 4(sp),-(sp)
    bc2e:	|  |     |   jsr bc98 <walkMe>
    bc34:	|  |     |   addq.l #8,sp
    bc36:	|  |  ,--|-- bra.s bc58 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    bc38:	|  |  |  '-> movea.l (sp),a0
    bc3a:	|  |  |      move.w 66(a0),d0
    bc3e:	|  |  +----- beq.s bc58 <walkAllPeople+0x44>
			spinStep(thisPerson);
    bc40:	|  |  |      move.l (sp),-(sp)
    bc42:	|  |  |      jsr b9b4 <spinStep>
    bc48:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    bc4a:	|  |  |      clr.l -(sp)
    bc4c:	|  |  |      move.l 4(sp),-(sp)
    bc50:	|  |  |      jsr 7e28 <setFrames>
    bc56:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    bc58:	|  |  '----> movea.l (sp),a0
    bc5a:	|  |         move.w 64(a0),d0
    bc5e:	|  |     ,-- bne.s bc86 <walkAllPeople+0x72>
    bc60:	|  |     |   movea.l (sp),a0
    bc62:	|  |     |   move.w 66(a0),d0
    bc66:	|  |     +-- bne.s bc86 <walkAllPeople+0x72>
    bc68:	|  |     |   movea.l (sp),a0
    bc6a:	|  |     |   move.l 68(a0),d0
    bc6e:	|  |     +-- beq.s bc86 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    bc70:	|  |     |   movea.l (sp),a0
    bc72:	|  |     |   move.l 68(a0),d0
    bc76:	|  |     |   move.l d0,-(sp)
    bc78:	|  |     |   jsr 653a <restartFunction>
    bc7e:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    bc80:	|  |     |   movea.l (sp),a0
    bc82:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    bc86:	|  |     '-> movea.l (sp),a0
    bc88:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    bc8c:	|  '-------> tst.l (sp)
    bc8e:	'----------- bne.s bc1e <walkAllPeople+0xa>
	}
}
    bc90:	             nop
    bc92:	             nop
    bc94:	             addq.l #4,sp
    bc96:	             rts

0000bc98 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bc98:	                lea -20(sp),sp
    bc9c:	                move.l d3,-(sp)
    bc9e:	                move.l d2,-(sp)
    bca0:	                move.l 36(sp),d0
    bca4:	                move.w d0,d0
    bca6:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bcaa:	                cmpi.w #-1,10(sp)
    bcb0:	,-------------- bne.s bcb8 <walkMe+0x20>
    bcb2:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bcb8:	>-------------> movea.l 32(sp),a0
    bcbc:	|               move.l 48(a0),d0
    bcc0:	|               move.l d0,-(sp)
    bcc2:	|               jsr 1736c <__floatsisf>
    bcc8:	|               addq.l #4,sp
    bcca:	|               move.l d0,d1
    bccc:	|               movea.l 32(sp),a0
    bcd0:	|               move.l (a0),d0
    bcd2:	|               move.l d0,-(sp)
    bcd4:	|               move.l d1,-(sp)
    bcd6:	|               jsr 17660 <__subsf3>
    bcdc:	|               addq.l #8,sp
    bcde:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    bce2:	|               movea.l 32(sp),a0
    bce6:	|               move.l 52(a0),d0
    bcea:	|               move.l d0,-(sp)
    bcec:	|               jsr 1736c <__floatsisf>
    bcf2:	|               addq.l #4,sp
    bcf4:	|               move.l d0,d1
    bcf6:	|               movea.l 32(sp),a0
    bcfa:	|               move.l 4(a0),d0
    bcfe:	|               move.l d0,-(sp)
    bd00:	|               move.l d1,-(sp)
    bd02:	|               jsr 17660 <__subsf3>
    bd08:	|               addq.l #8,sp
    bd0a:	|               move.l d0,-(sp)
    bd0c:	|               move.l d0,-(sp)
    bd0e:	|               jsr 17128 <__addsf3>
    bd14:	|               addq.l #8,sp
    bd16:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    bd1a:	|               movea.l 32(sp),a0
    bd1e:	|               move.l 32(a0),d2
    bd22:	|               movea.l 32(sp),a0
    bd26:	|               move.l 28(a0),d0
    bd2a:	|               move.l d0,-(sp)
    bd2c:	|               jsr 1736c <__floatsisf>
    bd32:	|               addq.l #4,sp
    bd34:	|               move.l d0,-(sp)
    bd36:	|               move.l d2,-(sp)
    bd38:	|               jsr 1741e <__mulsf3>
    bd3e:	|               addq.l #8,sp
    bd40:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    bd44:	|               move.l 24(sp),-(sp)
    bd48:	|               jsr 1728e <__extendsfdf2>
    bd4e:	|               addq.l #4,sp
    bd50:	|               move.l #-1717986918,-(sp)
    bd56:	|               move.l #1070176665,-(sp)
    bd5c:	|               move.l d1,-(sp)
    bd5e:	|               move.l d0,-(sp)
    bd60:	|               jsr 17544 <__ltdf2>
    bd66:	|               lea 16(sp),sp
    bd6a:	|               tst.l d0
    bd6c:	|           ,-- bge.s bd76 <walkMe+0xde>
    bd6e:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    bd76:	|           '-> move.l 20(sp),-(sp)
    bd7a:	|               jsr 17304 <__fixsfsi>
    bd80:	|               addq.l #4,sp
    bd82:	|               move.l d0,-(sp)
    bd84:	|               jsr 8f42 <TF_abs>
    bd8a:	|               addq.l #4,sp
    bd8c:	|               move.l d0,d2
    bd8e:	|               move.l 16(sp),-(sp)
    bd92:	|               jsr 17304 <__fixsfsi>
    bd98:	|               addq.l #4,sp
    bd9a:	|               move.l d0,-(sp)
    bd9c:	|               jsr 8f42 <TF_abs>
    bda2:	|               addq.l #4,sp
    bda4:	|               cmp.l d2,d0
    bda6:	|        ,----- bgt.s bdca <walkMe+0x132>
    bda8:	|        |      move.l 20(sp),-(sp)
    bdac:	|        |      jsr 17304 <__fixsfsi>
    bdb2:	|        |      addq.l #4,sp
    bdb4:	|        |      move.l d0,-(sp)
    bdb6:	|        |      jsr 8f42 <TF_abs>
    bdbc:	|        |      addq.l #4,sp
    bdbe:	|        |      move.l d0,-(sp)
    bdc0:	|        |      jsr 1736c <__floatsisf>
    bdc6:	|        |      addq.l #4,sp
    bdc8:	|        |  ,-- bra.s bdea <walkMe+0x152>
    bdca:	|        '--|-> move.l 16(sp),-(sp)
    bdce:	|           |   jsr 17304 <__fixsfsi>
    bdd4:	|           |   addq.l #4,sp
    bdd6:	|           |   move.l d0,-(sp)
    bdd8:	|           |   jsr 8f42 <TF_abs>
    bdde:	|           |   addq.l #4,sp
    bde0:	|           |   move.l d0,-(sp)
    bde2:	|           |   jsr 1736c <__floatsisf>
    bde8:	|           |   addq.l #4,sp
    bdea:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    bdee:	|               move.l 12(sp),-(sp)
    bdf2:	|               jsr 17304 <__fixsfsi>
    bdf8:	|               addq.l #4,sp
    bdfa:	|               move.l d0,-(sp)
    bdfc:	|               jsr 8f42 <TF_abs>
    be02:	|               addq.l #4,sp
    be04:	|               move.l d0,-(sp)
    be06:	|               jsr 1736c <__floatsisf>
    be0c:	|               addq.l #4,sp
    be0e:	|               move.l d0,-(sp)
    be10:	|               move.l 28(sp),-(sp)
    be14:	|               jsr 17592 <__ltsf2>
    be1a:	|               addq.l #8,sp
    be1c:	|               tst.l d0
    be1e:	|        ,----- bge.w bed0 <walkMe+0x238>
			if (thisPerson->spinning) {
    be22:	|        |      movea.l 32(sp),a0
    be26:	|        |      move.w 66(a0),d0
    be2a:	|        |  ,-- beq.s be48 <walkMe+0x1b0>
				spinStep(thisPerson);
    be2c:	|        |  |   move.l 32(sp),-(sp)
    be30:	|        |  |   jsr b9b4 <spinStep>
    be36:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    be38:	|        |  |   pea 1 <_start+0x1>
    be3c:	|        |  |   move.l 36(sp),-(sp)
    be40:	|        |  |   jsr 7e28 <setFrames>
    be46:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    be48:	|        |  '-> move.l 24(sp),-(sp)
    be4c:	|        |      move.l 16(sp),-(sp)
    be50:	|        |      jsr 17222 <__divsf3>
    be56:	|        |      addq.l #8,sp
    be58:	|        |      move.l d0,24(sp)
			if (move)
    be5c:	|        |      tst.w 10(sp)
    be60:	|        |  ,-- beq.s beca <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    be62:	|        |  |   movea.l 32(sp),a0
    be66:	|        |  |   move.l 4(a0),d2
    be6a:	|        |  |   move.l 24(sp),d0
    be6e:	|        |  |   move.l d0,-(sp)
    be70:	|        |  |   move.l d0,-(sp)
    be72:	|        |  |   jsr 17128 <__addsf3>
    be78:	|        |  |   addq.l #8,sp
    be7a:	|        |  |   move.l d0,-(sp)
    be7c:	|        |  |   move.l 20(sp),-(sp)
    be80:	|        |  |   jsr 17222 <__divsf3>
    be86:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    be88:	|        |  |   move.l d0,-(sp)
    be8a:	|        |  |   move.l d2,-(sp)
    be8c:	|        |  |   jsr 17128 <__addsf3>
    be92:	|        |  |   addq.l #8,sp
    be94:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    be96:	|        |  |   movea.l 32(sp),a0
    be9a:	|        |  |   move.l (a0),d3
    be9c:	|        |  |   move.l 24(sp),-(sp)
    bea0:	|        |  |   move.l 24(sp),-(sp)
    bea4:	|        |  |   jsr 17222 <__divsf3>
    beaa:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    beac:	|        |  |   move.l d0,-(sp)
    beae:	|        |  |   move.l d3,-(sp)
    beb0:	|        |  |   jsr 17128 <__addsf3>
    beb6:	|        |  |   addq.l #8,sp
    beb8:	|        |  |   move.l d2,-(sp)
    beba:	|        |  |   move.l d0,-(sp)
    bebc:	|        |  |   move.l 40(sp),-(sp)
    bec0:	|        |  |   jsr aa9a <moveAndScale>
    bec6:	|        |  |   lea 12(sp),sp
			return TRUE;
    beca:	|        |  '-> moveq #1,d0
    becc:	|  ,-----|----- bra.w bf7e <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    bed0:	|  |     '----> movea.l 32(sp),a0
    bed4:	|  |            move.l 56(a0),d0
    bed8:	|  |            moveq #-1,d1
    beda:	|  |            cmp.l d0,d1
    bedc:	|  |        ,-- bne.s bf14 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    bede:	|  |        |   movea.l 32(sp),a0
    bee2:	|  |        |   move.l 110(a0),d0
    bee6:	|  |        |   moveq #-1,d1
    bee8:	|  |        |   cmp.l d0,d1
    beea:	|  |  ,-----|-- beq.s bf28 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    beec:	|  |  |     |   movea.l 32(sp),a0
    bef0:	|  |  |     |   move.l 110(a0),d0
    bef4:	|  |  |     |   movea.l 32(sp),a0
    bef8:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    befc:	|  |  |     |   movea.l 32(sp),a0
    bf00:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    bf06:	|  |  |     |   move.l 32(sp),-(sp)
    bf0a:	|  |  |     |   jsr b9b4 <spinStep>
    bf10:	|  |  |     |   addq.l #4,sp
			}
			break;
    bf12:	|  |  +-----|-- bra.s bf28 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    bf14:	|  |  |     '-> move.l 32(sp),-(sp)
    bf18:	|  |  |         jsr 96b4 <doBorderStuff>
    bf1e:	|  |  |         addq.l #4,sp
    bf20:	|  |  |         tst.w d0
    bf22:	|  |  |  ,----- beq.s bf2c <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bf24:	'--|--|--|----- bra.w bcb8 <walkMe+0x20>
			break;
    bf28:	   |  '--|----> nop
    bf2a:	   |     |  ,-- bra.s bf2e <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    bf2c:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    bf2e:	   |        '-> movea.l 32(sp),a0
    bf32:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    bf36:	   |            clr.l -(sp)
    bf38:	   |            move.l 36(sp),-(sp)
    bf3c:	   |            jsr 7e28 <setFrames>
    bf42:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    bf44:	   |            movea.l 32(sp),a0
    bf48:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    bf4c:	   |            move.l d0,-(sp)
    bf4e:	   |            jsr 1736c <__floatsisf>
    bf54:	   |            addq.l #4,sp
    bf56:	   |            move.l d0,d2
				 thisPerson->walkToX,
    bf58:	   |            movea.l 32(sp),a0
    bf5c:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    bf60:	   |            move.l d0,-(sp)
    bf62:	   |            jsr 1736c <__floatsisf>
    bf68:	   |            addq.l #4,sp
    bf6a:	   |            move.l d2,-(sp)
    bf6c:	   |            move.l d0,-(sp)
    bf6e:	   |            move.l 40(sp),-(sp)
    bf72:	   |            jsr aa9a <moveAndScale>
    bf78:	   |            lea 12(sp),sp
	return FALSE;
    bf7c:	   |            clr.w d0
}
    bf7e:	   '----------> move.l (sp)+,d2
    bf80:	                move.l (sp)+,d3
    bf82:	                lea 20(sp),sp
    bf86:	                rts

0000bf88 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    bf88:	       subq.l #8,sp
    bf8a:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    bf8c:	   ,-- bra.s bfbc <clearStackLib+0x34>
		k = stackLib;
    bf8e:	,--|-> move.l 1a834 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    bf96:	|  |   movea.l 1a834 <stackLib>,a0
    bf9c:	|  |   move.l 4(a0),d0
    bfa0:	|  |   move.l d0,1a834 <stackLib>
		FreeVec(k);
    bfa6:	|  |   move.l 8(sp),4(sp)
    bfac:	|  |   move.l 1a7a4 <SysBase>,d0
    bfb2:	|  |   movea.l d0,a6
    bfb4:	|  |   movea.l 4(sp),a1
    bfb8:	|  |   jsr -690(a6)
	while (stackLib) {
    bfbc:	|  '-> move.l 1a834 <stackLib>,d0
    bfc2:	'----- bne.s bf8e <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    bfc4:	       clr.l 1a830 <stackLibTotal>
}
    bfca:	       nop
    bfcc:	       movea.l (sp)+,a6
    bfce:	       addq.l #8,sp
    bfd0:	       rts

0000bfd2 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    bfd2:	          lea -128(sp),sp
    bfd6:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    bfda:	      ,-- bra.s bfec <loadGame+0x1a>
    bfdc:	   ,--|-> move.l 1a73c <allRunningFunctions>,d0
    bfe2:	   |  |   move.l d0,-(sp)
    bfe4:	   |  |   jsr 53d2 <finishFunction>
    bfea:	   |  |   addq.l #4,sp
    bfec:	   |  '-> move.l 1a73c <allRunningFunctions>,d0
    bff2:	   '----- bne.s bfdc <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    bff4:	          pea 1a838 <ssgVersion>
    bffa:	          pea 18ee1 <PutChar+0x1505>
    c000:	          pea 41 <_start+0x41>
    c004:	          pea 53 <_start+0x53>
    c008:	          move.l 160(sp),-(sp)
    c00c:	          jsr 6188 <openAndVerify>
    c012:	          lea 20(sp),sp
    c016:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c01a:	      ,-- bne.s c022 <loadGame+0x50>
    c01c:	      |   clr.w d0
    c01e:	,-----|-- bra.w c2c8 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c022:	|     '-> move.l 112(sp),108(sp)
    c028:	|         lea 140(sp),a0
    c02c:	|         lea -126(a0),a0
    c030:	|         move.l a0,120(sp)
    c034:	|         moveq #8,d0
    c036:	|         move.l d0,116(sp)
    c03a:	|         move.l 1a7ac <DOSBase>,d0
    c040:	|         movea.l d0,a6
    c042:	|         move.l 108(sp),d1
    c046:	|         move.l 120(sp),d2
    c04a:	|         move.l 116(sp),d3
    c04e:	|         jsr -42(a6)
    c052:	|         move.l d0,132(sp)
    c056:	|         move.l 132(sp),d0
    c05a:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c05e:	|         moveq #8,d0
    c060:	|         cmp.l 128(sp),d0
    c064:	|     ,-- beq.s c074 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c066:	|     |   pea 18f02 <PutChar+0x1526>
    c06c:	|     |   jsr 16f3a <KPrintF>
    c072:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c074:	|     '-> move.l 14(sp),d1
    c078:	|         move.l 1a746 <fileTime>,d0
    c07e:	|         cmp.l d1,d0
    c080:	|     ,-- bne.s c090 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c082:	|     |   move.l 18(sp),d1
    c086:	|     |   move.l 1a74a <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c08c:	|     |   cmp.l d1,d0
    c08e:	|  ,--|-- beq.s c0b0 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c090:	|  |  '-> move.l 144(sp),-(sp)
    c094:	|  |      pea 18f1e <PutChar+0x1542>
    c09a:	|  |      pea 18fe5 <PutChar+0x1609>
    c0a0:	|  |      jsr 16f3a <KPrintF>
    c0a6:	|  |      lea 12(sp),sp
		return FALSE; 
    c0aa:	|  |      clr.w d0
    c0ac:	+--|----- bra.w c2c8 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c0b0:	|  '----> move.l 112(sp),124(sp)
    c0b6:	|         move.l 1a7ac <DOSBase>,d0
    c0bc:	|         movea.l d0,a6
    c0be:	|         move.l 124(sp),d1
    c0c2:	|         jsr -306(a6)
    c0c6:	|         move.l d0,136(sp)
    c0ca:	|         move.l 136(sp),d0
    c0ce:	|         move.l d0,d0
    c0d0:	|         move.w d0,1a000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c0d6:	|         move.l 112(sp),100(sp)
    c0dc:	|         move.l 1a7ac <DOSBase>,d0
    c0e2:	|         movea.l d0,a6
    c0e4:	|         move.l 100(sp),d1
    c0e8:	|         jsr -306(a6)
    c0ec:	|         move.l d0,96(sp)
    c0f0:	|         move.l 96(sp),d0
    c0f4:	|         move.l d0,d0
    c0f6:	|         move.w d0,1a744 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c0fc:	|         move.l 112(sp),92(sp)
    c102:	|         move.l 1a7ac <DOSBase>,d0
    c108:	|         movea.l d0,a6
    c10a:	|         move.l 92(sp),d1
    c10e:	|         jsr -306(a6)
    c112:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c116:	|         move.l 112(sp),84(sp)
    c11c:	|         move.l 1a7ac <DOSBase>,d0
    c122:	|         movea.l d0,a6
    c124:	|         move.l 84(sp),d1
    c128:	|         jsr -306(a6)
    c12c:	|         move.l d0,80(sp)
    c130:	|         move.l 80(sp),d0
    c134:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c138:	|     ,-- beq.s c16c <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c13a:	|     |   move.l 112(sp),-(sp)
    c13e:	|     |   jsr 6bc <get2bytes>
    c144:	|     |   addq.l #4,sp
    c146:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c14a:	|     |   move.l 112(sp),-(sp)
    c14e:	|     |   jsr 6bc <get2bytes>
    c154:	|     |   addq.l #4,sp
    c156:	|     |   move.l d0,1a89c <fontHeight>
		charOrder = readString(fp);		
    c15c:	|     |   move.l 112(sp),-(sp)
    c160:	|     |   jsr b02 <readString>
    c166:	|     |   addq.l #4,sp
    c168:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c16c:	|     '-> move.l 104(sp),70(sp)
    c172:	|         move.l 1a7a4 <SysBase>,d0
    c178:	|         movea.l d0,a6
    c17a:	|         movea.l 70(sp),a1
    c17e:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c182:	|         move.l 112(sp),-(sp)
    c186:	|         jsr 854 <getSigned>
    c18c:	|         addq.l #4,sp
    c18e:	|         move.w d0,1a6a8 <fontSpace>

	killAllPeople ();
    c194:	|         jsr a73c <killAllPeople>
	killAllRegions ();
    c19a:	|         jsr 15766 <killAllRegions>

	int camerX = get2bytes (fp);
    c1a0:	|         move.l 112(sp),-(sp)
    c1a4:	|         jsr 6bc <get2bytes>
    c1aa:	|         addq.l #4,sp
    c1ac:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c1b0:	|         move.l 112(sp),-(sp)
    c1b4:	|         jsr 6bc <get2bytes>
    c1ba:	|         addq.l #4,sp
    c1bc:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c1c0:	|         move.l 112(sp),-(sp)
    c1c4:	|         jsr 7d8 <getFloat>
    c1ca:	|         addq.l #4,sp
    c1cc:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c1d0:	|         move.l 112(sp),54(sp)
    c1d6:	|         move.l 1a7ac <DOSBase>,d0
    c1dc:	|         movea.l d0,a6
    c1de:	|         move.l 54(sp),d1
    c1e2:	|         jsr -306(a6)
    c1e6:	|         move.l d0,50(sp)
    c1ea:	|         move.l 50(sp),d0
    c1ee:	|         move.l d0,d0
    c1f0:	|         move.b d0,1a11a <brightnessLevel>

	loadHandlers (fp);
    c1f6:	|         move.l 112(sp),-(sp)
    c1fa:	|         jsr 60e8 <loadHandlers>
    c200:	|         addq.l #4,sp
	loadRegions (fp);
    c202:	|         move.l 112(sp),-(sp)
    c206:	|         jsr 157c2 <loadRegions>
    c20c:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c20e:	|         moveq #12,d0
    c210:	|         move.l d0,46(sp)
    c214:	|         clr.l 42(sp)
    c218:	|         move.l 1a7a4 <SysBase>,d0
    c21e:	|         movea.l d0,a6
    c220:	|         move.l 46(sp),d0
    c224:	|         move.l 42(sp),d1
    c228:	|         jsr -684(a6)
    c22c:	|         move.l d0,38(sp)
    c230:	|         move.l 38(sp),d0
    c234:	|         move.l d0,1a6aa <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c23a:	|         move.l 1a6aa <mouseCursorAnim>,d0
    c240:	|     ,-- bne.s c254 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c242:	|     |   pea 18fef <PutChar+0x1613>
    c248:	|     |   jsr 16f3a <KPrintF>
    c24e:	|     |   addq.l #4,sp
		return FALSE;
    c250:	|     |   clr.w d0
    c252:	+-----|-- bra.s c2c8 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c254:	|     '-> jsr d0ee <nosnapshot>
	if (FGetC (fp)) {
    c25a:	|         move.l 112(sp),34(sp)
    c260:	|         move.l 1a7ac <DOSBase>,d0
    c266:	|         movea.l d0,a6
    c268:	|         move.l 34(sp),d1
    c26c:	|         jsr -306(a6)
    c270:	|         move.l d0,30(sp)
    c274:	|         move.l 30(sp),d0
    c278:	|     ,-- beq.s c28e <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c27a:	|     |   move.l 112(sp),-(sp)
    c27e:	|     |   jsr d16e <restoreSnapshot>
    c284:	|     |   addq.l #4,sp
    c286:	|     |   tst.w d0
    c288:	|     +-- bne.s c28e <loadGame+0x2bc>
    c28a:	|     |   clr.w d0
    c28c:	+-----|-- bra.s c2c8 <loadGame+0x2f6>
	}

	Close (fp);
    c28e:	|     '-> move.l 112(sp),26(sp)
    c294:	|         move.l 1a7ac <DOSBase>,d0
    c29a:	|         movea.l d0,a6
    c29c:	|         move.l 26(sp),d1
    c2a0:	|         jsr -36(a6)
    c2a4:	|         move.l d0,22(sp)
	clearStackLib ();
    c2a8:	|         jsr bf88 <clearStackLib>

	cameraX = camerX;
    c2ae:	|         move.l 66(sp),1a85e <cameraX>
	cameraY = camerY;
    c2b6:	|         move.l 62(sp),1a862 <cameraY>
	cameraZoom = camerZ;
    c2be:	|         move.l 58(sp),1a142 <cameraZoom>

	return TRUE;
    c2c6:	|         moveq #1,d0
}
    c2c8:	'-------> movem.l (sp)+,d2-d3/a6
    c2cc:	          lea 128(sp),sp
    c2d0:	          rts

0000c2d2 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c2d2:	   ,-> lea -64(sp),sp
    c2d6:	   |   move.l a6,-(sp)
    c2d8:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c2da:	   |   movea.l 76(sp),a0
    c2de:	   |   move.l (a0),d0
    c2e0:	   |   move.l 80(sp),-(sp)
    c2e4:	   |   move.l d0,-(sp)
    c2e6:	   |   jsr 8d0 <put2bytes>
    c2ec:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c2ee:	   |   movea.l 76(sp),a0
    c2f2:	   |   move.l 40(a0),d0
    c2f6:	,--|-- beq.s c332 <saveFunction+0x60>
		FPutC (fp, 1);
    c2f8:	|  |   move.l 80(sp),52(sp)
    c2fe:	|  |   moveq #1,d0
    c300:	|  |   move.l d0,48(sp)
    c304:	|  |   move.l 1a7ac <DOSBase>,d0
    c30a:	|  |   movea.l d0,a6
    c30c:	|  |   move.l 52(sp),d1
    c310:	|  |   move.l 48(sp),d2
    c314:	|  |   jsr -312(a6)
    c318:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c31c:	|  |   movea.l 76(sp),a0
    c320:	|  |   move.l 40(a0),d0
    c324:	|  |   move.l 80(sp),-(sp)
    c328:	|  |   move.l d0,-(sp)
    c32a:	|  '-- jsr c2d2 <saveFunction>(pc)
    c32e:	|      addq.l #8,sp
    c330:	|  ,-- bra.s c354 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c332:	'--|-> move.l 80(sp),64(sp)
    c338:	   |   clr.l 60(sp)
    c33c:	   |   move.l 1a7ac <DOSBase>,d0
    c342:	   |   movea.l d0,a6
    c344:	   |   move.l 64(sp),d1
    c348:	   |   move.l 60(sp),d2
    c34c:	   |   jsr -312(a6)
    c350:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c354:	   '-> movea.l 76(sp),a0
    c358:	       move.l 12(a0),d0
    c35c:	       move.l 80(sp),-(sp)
    c360:	       move.l d0,-(sp)
    c362:	       jsr 958 <put4bytes>
    c368:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c36a:	       movea.l 76(sp),a0
    c36e:	       move.l 36(a0),d0
    c372:	       move.l 80(sp),-(sp)
    c376:	       move.l d0,-(sp)
    c378:	       jsr 8d0 <put2bytes>
    c37e:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c380:	       move.l 80(sp),40(sp)
    c386:	       movea.l 76(sp),a0
    c38a:	       move.w 54(a0),d0
    c38e:	       movea.w d0,a0
    c390:	       move.l a0,36(sp)
    c394:	       move.l 1a7ac <DOSBase>,d0
    c39a:	       movea.l d0,a6
    c39c:	       move.l 40(sp),d1
    c3a0:	       move.l 36(sp),d2
    c3a4:	       jsr -312(a6)
    c3a8:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c3ac:	       move.l 80(sp),28(sp)
    c3b2:	       movea.l 76(sp),a0
    c3b6:	       move.w 48(a0),d0
    c3ba:	       movea.w d0,a0
    c3bc:	       move.l a0,24(sp)
    c3c0:	       move.l 1a7ac <DOSBase>,d0
    c3c6:	       movea.l d0,a6
    c3c8:	       move.l 28(sp),d1
    c3cc:	       move.l 24(sp),d2
    c3d0:	       jsr -312(a6)
    c3d4:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c3d8:	       move.l 80(sp),16(sp)
    c3de:	       movea.l 76(sp),a0
    c3e2:	       move.w 50(a0),d0
    c3e6:	       movea.w d0,a0
    c3e8:	       move.l a0,12(sp)
    c3ec:	       move.l 1a7ac <DOSBase>,d0
    c3f2:	       movea.l d0,a6
    c3f4:	       move.l 16(sp),d1
    c3f8:	       move.l 12(sp),d2
    c3fc:	       jsr -312(a6)
    c400:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c404:	       moveq #28,d0
    c406:	       add.l 76(sp),d0
    c40a:	       move.l 80(sp),-(sp)
    c40e:	       move.l d0,-(sp)
    c410:	       jsr cb2a <saveVariable>
    c416:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c418:	       movea.l 76(sp),a0
    c41c:	       move.b 56(a0),d0
    c420:	   ,-- beq.s c430 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c422:	   |   pea 19010 <PutChar+0x1634>
    c428:	   |   jsr 16f3a <KPrintF>
    c42e:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c430:	   '-> movea.l 76(sp),a0
    c434:	       move.l 24(a0),d0
    c438:	       move.l 80(sp),-(sp)
    c43c:	       move.l d0,-(sp)
    c43e:	       jsr c99e <saveStack>
    c444:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c446:	       clr.l 68(sp)
    c44a:	   ,-- bra.s c46e <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c44c:	,--|-> movea.l 76(sp),a0
    c450:	|  |   move.l 20(a0),d1
    c454:	|  |   move.l 68(sp),d0
    c458:	|  |   lsl.l #3,d0
    c45a:	|  |   add.l d1,d0
    c45c:	|  |   move.l 80(sp),-(sp)
    c460:	|  |   move.l d0,-(sp)
    c462:	|  |   jsr cb2a <saveVariable>
    c468:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c46a:	|  |   addq.l #1,68(sp)
    c46e:	|  '-> movea.l 76(sp),a0
    c472:	|      move.l 8(a0),d0
    c476:	|      cmp.l 68(sp),d0
    c47a:	'----- bgt.s c44c <saveFunction+0x17a>
	}
}
    c47c:	       nop
    c47e:	       nop
    c480:	       move.l (sp)+,d2
    c482:	       movea.l (sp)+,a6
    c484:	       lea 64(sp),sp
    c488:	       rts

0000c48a <saveGame>:

BOOL saveGame (char * fname) {
    c48a:	          lea -248(sp),sp
    c48e:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c492:	          move.l 264(sp),244(sp)
    c498:	          move.l #1006,240(sp)
    c4a0:	          move.l 1a7ac <DOSBase>,d0
    c4a6:	          movea.l d0,a6
    c4a8:	          move.l 244(sp),d1
    c4ac:	          move.l 240(sp),d2
    c4b0:	          jsr -30(a6)
    c4b4:	          move.l d0,236(sp)
    c4b8:	          move.l 236(sp),d0
    c4bc:	          move.l d0,232(sp)
	if (fp == NULL) {
    c4c0:	      ,-- bne.s c4d6 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c4c2:	      |   pea 19032 <PutChar+0x1656>
    c4c8:	      |   jsr 16f3a <KPrintF>
    c4ce:	      |   addq.l #4,sp
		return FALSE;
    c4d0:	      |   clr.w d0
    c4d2:	,-----|-- bra.w c994 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c4d6:	|     '-> move.l 232(sp),228(sp)
    c4dc:	|         move.l #102479,224(sp)
    c4e4:	|         moveq #6,d0
    c4e6:	|         move.l d0,220(sp)
    c4ea:	|         move.l 1a7ac <DOSBase>,d0
    c4f0:	|         movea.l d0,a6
    c4f2:	|         move.l 228(sp),d1
    c4f6:	|         move.l 224(sp),d2
    c4fa:	|         move.l 220(sp),d3
    c4fe:	|         jsr -48(a6)
    c502:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c506:	|         move.l 232(sp),212(sp)
    c50c:	|         clr.l 208(sp)
    c510:	|         move.l 1a7ac <DOSBase>,d0
    c516:	|         movea.l d0,a6
    c518:	|         move.l 212(sp),d1
    c51c:	|         move.l 208(sp),d2
    c520:	|         jsr -312(a6)
    c524:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c528:	|         move.l 232(sp),200(sp)
    c52e:	|         clr.l 196(sp)
    c532:	|         move.l 1a7ac <DOSBase>,d0
    c538:	|         movea.l d0,a6
    c53a:	|         move.l 200(sp),d1
    c53e:	|         move.l 196(sp),d2
    c542:	|         jsr -312(a6)
    c546:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c54a:	|         move.l 232(sp),188(sp)
    c550:	|         moveq #2,d0
    c552:	|         move.l d0,184(sp)
    c556:	|         move.l 1a7ac <DOSBase>,d0
    c55c:	|         movea.l d0,a6
    c55e:	|         move.l 188(sp),d1
    c562:	|         move.l 184(sp),d2
    c566:	|         jsr -312(a6)
    c56a:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c56e:	|         move.l 232(sp),176(sp)
    c574:	|         moveq #2,d0
    c576:	|         move.l d0,172(sp)
    c57a:	|         move.l 1a7ac <DOSBase>,d0
    c580:	|         movea.l d0,a6
    c582:	|         move.l 176(sp),d1
    c586:	|         move.l 172(sp),d2
    c58a:	|         jsr -312(a6)
    c58e:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c592:	|         move.l 232(sp),164(sp)
    c598:	|         move.l #108358,160(sp)
    c5a0:	|         moveq #8,d0
    c5a2:	|         move.l d0,156(sp)
    c5a6:	|         move.l 1a7ac <DOSBase>,d0
    c5ac:	|         movea.l d0,a6
    c5ae:	|         move.l 164(sp),d1
    c5b2:	|         move.l 160(sp),d2
    c5b6:	|         move.l 156(sp),d3
    c5ba:	|         jsr -48(a6)
    c5be:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c5c2:	|         move.l 232(sp),148(sp)
    c5c8:	|         move.w 1a000 <allowAnyFilename>,d0
    c5ce:	|         movea.w d0,a0
    c5d0:	|         move.l a0,144(sp)
    c5d4:	|         move.l 1a7ac <DOSBase>,d0
    c5da:	|         movea.l d0,a6
    c5dc:	|         move.l 148(sp),d1
    c5e0:	|         move.l 144(sp),d2
    c5e4:	|         jsr -312(a6)
    c5e8:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c5ec:	|         move.l 232(sp),136(sp)
    c5f2:	|         move.w 1a744 <captureAllKeys>,d0
    c5f8:	|         movea.w d0,a0
    c5fa:	|         move.l a0,132(sp)
    c5fe:	|         move.l 1a7ac <DOSBase>,d0
    c604:	|         movea.l d0,a6
    c606:	|         move.l 136(sp),d1
    c60a:	|         move.l 132(sp),d2
    c60e:	|         jsr -312(a6)
    c612:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c616:	|         move.l 232(sp),124(sp)
    c61c:	|         moveq #1,d0
    c61e:	|         move.l d0,120(sp)
    c622:	|         move.l 1a7ac <DOSBase>,d0
    c628:	|         movea.l d0,a6
    c62a:	|         move.l 124(sp),d1
    c62e:	|         move.l 120(sp),d2
    c632:	|         jsr -312(a6)
    c636:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c63a:	|         move.l 232(sp),112(sp)
    c640:	|         move.l 1a8ac <fontTableSize>,d0
    c646:	|         sgt d0
    c648:	|         neg.b d0
    c64a:	|         move.b d0,d0
    c64c:	|         andi.l #255,d0
    c652:	|         move.l d0,108(sp)
    c656:	|         move.l 1a7ac <DOSBase>,d0
    c65c:	|         movea.l d0,a6
    c65e:	|         move.l 112(sp),d1
    c662:	|         move.l 108(sp),d2
    c666:	|         jsr -312(a6)
    c66a:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c66e:	|         move.l 1a8ac <fontTableSize>,d0
    c674:	|     ,-- ble.s c6b2 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c676:	|     |   move.l 1a8a0 <loadedFontNum>,d0
    c67c:	|     |   move.l 232(sp),-(sp)
    c680:	|     |   move.l d0,-(sp)
    c682:	|     |   jsr 8d0 <put2bytes>
    c688:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c68a:	|     |   move.l 1a89c <fontHeight>,d0
    c690:	|     |   move.l 232(sp),-(sp)
    c694:	|     |   move.l d0,-(sp)
    c696:	|     |   jsr 8d0 <put2bytes>
    c69c:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c69e:	|     |   move.l 1a8a4 <fontOrderString>,d0
    c6a4:	|     |   move.l 232(sp),-(sp)
    c6a8:	|     |   move.l d0,-(sp)
    c6aa:	|     |   jsr bd8 <writeString>
    c6b0:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c6b2:	|     '-> move.w 1a6a8 <fontSpace>,d0
    c6b8:	|         movea.w d0,a0
    c6ba:	|         move.l 232(sp),-(sp)
    c6be:	|         move.l a0,-(sp)
    c6c0:	|         jsr a9c <putSigned>
    c6c6:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c6c8:	|         move.l 1a85e <cameraX>,d0
    c6ce:	|         move.l 232(sp),-(sp)
    c6d2:	|         move.l d0,-(sp)
    c6d4:	|         jsr 8d0 <put2bytes>
    c6da:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c6dc:	|         move.l 1a862 <cameraY>,d0
    c6e2:	|         move.l 232(sp),-(sp)
    c6e6:	|         move.l d0,-(sp)
    c6e8:	|         jsr 8d0 <put2bytes>
    c6ee:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c6f0:	|         move.l 1a142 <cameraZoom>,d0
    c6f6:	|         move.l 232(sp),-(sp)
    c6fa:	|         move.l d0,-(sp)
    c6fc:	|         jsr a46 <putFloat>
    c702:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c704:	|         move.l 232(sp),100(sp)
    c70a:	|         move.b 1a11a <brightnessLevel>,d0
    c710:	|         move.b d0,d0
    c712:	|         andi.l #255,d0
    c718:	|         move.l d0,96(sp)
    c71c:	|         move.l 1a7ac <DOSBase>,d0
    c722:	|         movea.l d0,a6
    c724:	|         move.l 100(sp),d1
    c728:	|         move.l 96(sp),d2
    c72c:	|         jsr -312(a6)
    c730:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    c734:	|         move.l 232(sp),-(sp)
    c738:	|         jsr 666c <saveHandlers>
    c73e:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    c740:	|         move.l 232(sp),-(sp)
    c744:	|         jsr 1597c <saveRegions>
    c74a:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    c74c:	|         move.l 1a6aa <mouseCursorAnim>,d0
    c752:	|         move.l 232(sp),-(sp)
    c756:	|         move.l d0,-(sp)
    c758:	|         jsr acae <saveAnim>
    c75e:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    c760:	|         move.l 1a6ae <mouseCursorFrameNum>,d0
    c766:	|         move.l 232(sp),-(sp)
    c76a:	|         move.l d0,-(sp)
    c76c:	|         jsr 8d0 <put2bytes>
    c772:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    c774:	|         move.l 1a73c <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    c77c:	|         clr.l 248(sp)
	while (thisFunction) {
    c780:	|     ,-- bra.s c790 <saveGame+0x306>
		countFunctions ++;
    c782:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    c786:	|  |  |   movea.l 252(sp),a0
    c78a:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c790:	|  |  '-> tst.l 252(sp)
    c794:	|  '----- bne.s c782 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    c796:	|         move.l 232(sp),-(sp)
    c79a:	|         move.l 252(sp),-(sp)
    c79e:	|         jsr 8d0 <put2bytes>
    c7a4:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    c7a6:	|         move.l 1a73c <allRunningFunctions>,252(sp)
	while (thisFunction) {
    c7ae:	|     ,-- bra.s c7ca <saveGame+0x340>
		saveFunction (thisFunction, fp);
    c7b0:	|  ,--|-> move.l 232(sp),-(sp)
    c7b4:	|  |  |   move.l 256(sp),-(sp)
    c7b8:	|  |  |   jsr c2d2 <saveFunction>
    c7be:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    c7c0:	|  |  |   movea.l 252(sp),a0
    c7c4:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c7ca:	|  |  '-> tst.l 252(sp)
    c7ce:	|  '----- bne.s c7b0 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    c7d0:	|         clr.l 256(sp)
    c7d4:	|     ,-- bra.s c7f6 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    c7d6:	|  ,--|-> move.l 1a752 <globalVars>,d1
    c7dc:	|  |  |   move.l 256(sp),d0
    c7e0:	|  |  |   lsl.l #3,d0
    c7e2:	|  |  |   add.l d1,d0
    c7e4:	|  |  |   move.l 232(sp),-(sp)
    c7e8:	|  |  |   move.l d0,-(sp)
    c7ea:	|  |  |   jsr cb2a <saveVariable>
    c7f0:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    c7f2:	|  |  |   addq.l #1,256(sp)
    c7f6:	|  |  '-> move.l 1a77c <numGlobals>,d0
    c7fc:	|  |      cmp.l 256(sp),d0
    c800:	|  '----- bgt.s c7d6 <saveGame+0x34c>
	}

	savePeople (fp);
    c802:	|         move.l 232(sp),-(sp)
    c806:	|         jsr add6 <savePeople>
    c80c:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    c80e:	|         movea.l 1a8c0 <currentFloor>,a0
    c814:	|         move.l 8(a0),d0
    c818:	|  ,----- beq.s c856 <saveGame+0x3cc>
		FPutC (fp, 1);
    c81a:	|  |      move.l 232(sp),76(sp)
    c820:	|  |      moveq #1,d0
    c822:	|  |      move.l d0,72(sp)
    c826:	|  |      move.l 1a7ac <DOSBase>,d0
    c82c:	|  |      movea.l d0,a6
    c82e:	|  |      move.l 76(sp),d1
    c832:	|  |      move.l 72(sp),d2
    c836:	|  |      jsr -312(a6)
    c83a:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    c83e:	|  |      movea.l 1a8c0 <currentFloor>,a0
    c844:	|  |      move.l (a0),d0
    c846:	|  |      move.l 232(sp),-(sp)
    c84a:	|  |      move.l d0,-(sp)
    c84c:	|  |      jsr 8d0 <put2bytes>
    c852:	|  |      addq.l #8,sp
    c854:	|  |  ,-- bra.s c878 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    c856:	|  '--|-> move.l 232(sp),88(sp)
    c85c:	|     |   clr.l 84(sp)
    c860:	|     |   move.l 1a7ac <DOSBase>,d0
    c866:	|     |   movea.l d0,a6
    c868:	|     |   move.l 88(sp),d1
    c86c:	|     |   move.l 84(sp),d2
    c870:	|     |   jsr -312(a6)
    c874:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    c878:	|     '-> move.l 232(sp),64(sp)
    c87e:	|         move.l 1a872 <speechMode>,60(sp)
    c886:	|         move.l 1a7ac <DOSBase>,d0
    c88c:	|         movea.l d0,a6
    c88e:	|         move.l 64(sp),d1
    c892:	|         move.l 60(sp),d2
    c896:	|         jsr -312(a6)
    c89a:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    c89e:	|         move.b 1a67e <fadeMode>,d0
    c8a4:	|         move.b d0,d0
    c8a6:	|         andi.l #255,d0
    c8ac:	|         move.l d0,52(sp)
    c8b0:	|         move.l 232(sp),48(sp)
    c8b6:	|         move.l 1a7ac <DOSBase>,d0
    c8bc:	|         movea.l d0,a6
    c8be:	|         move.l 52(sp),d1
    c8c2:	|         move.l 48(sp),d2
    c8c6:	|         jsr -312(a6)
    c8ca:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    c8ce:	|         move.l 1a800 <speech>,d0
    c8d4:	|         move.l 232(sp),-(sp)
    c8d8:	|         move.l d0,-(sp)
    c8da:	|         jsr 7cdc <saveSpeech>
    c8e0:	|         addq.l #8,sp
	saveStatusBars (fp);
    c8e2:	|         move.l 232(sp),-(sp)
    c8e6:	|         jsr 76d8 <saveStatusBars>
    c8ec:	|         addq.l #4,sp
	saveSounds (fp);
    c8ee:	|         move.l 232(sp),-(sp)
    c8f2:	|         jsr ce9c <saveSounds>
    c8f8:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    c8fa:	|         move.w 1a85c <saveEncoding>,d0
    c900:	|         move.w d0,d0
    c902:	|         andi.l #65535,d0
    c908:	|         move.l 232(sp),-(sp)
    c90c:	|         move.l d0,-(sp)
    c90e:	|         jsr 8d0 <put2bytes>
    c914:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    c916:	|         move.l 1a84e <parallaxStuff>,d0
    c91c:	|         move.l 232(sp),-(sp)
    c920:	|         move.l d0,-(sp)
    c922:	|         jsr d194 <saveParallaxRecursive>
    c928:	|         addq.l #8,sp
	FPutC (fp, 0);
    c92a:	|         move.l 232(sp),40(sp)
    c930:	|         clr.l 36(sp)
    c934:	|         move.l 1a7ac <DOSBase>,d0
    c93a:	|         movea.l d0,a6
    c93c:	|         move.l 40(sp),d1
    c940:	|         move.l 36(sp),d2
    c944:	|         jsr -312(a6)
    c948:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    c94c:	|         move.l 232(sp),28(sp)
    c952:	|         move.l 1a120 <languageNum>,24(sp)
    c95a:	|         move.l 1a7ac <DOSBase>,d0
    c960:	|         movea.l d0,a6
    c962:	|         move.l 28(sp),d1
    c966:	|         move.l 24(sp),d2
    c96a:	|         jsr -312(a6)
    c96e:	|         move.l d0,20(sp)

	Close(fp);
    c972:	|         move.l 232(sp),16(sp)
    c978:	|         move.l 1a7ac <DOSBase>,d0
    c97e:	|         movea.l d0,a6
    c980:	|         move.l 16(sp),d1
    c984:	|         jsr -36(a6)
    c988:	|         move.l d0,12(sp)
	clearStackLib ();
    c98c:	|         jsr bf88 <clearStackLib>
	return TRUE;
    c992:	|         moveq #1,d0
}
    c994:	'-------> movem.l (sp)+,d2-d3/a6
    c998:	          lea 248(sp),sp
    c99c:	          rts

0000c99e <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    c99e:	       lea -12(sp),sp
	int elements = 0;
    c9a2:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    c9a6:	       move.l 16(sp),(sp)
	while (search) {
    c9aa:	   ,-- bra.s c9b6 <saveStack+0x18>
		elements ++;
    c9ac:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    c9b0:	|  |   movea.l (sp),a0
    c9b2:	|  |   move.l 8(a0),(sp)
	while (search) {
    c9b6:	|  '-> tst.l (sp)
    c9b8:	'----- bne.s c9ac <saveStack+0xe>
	}

	put2bytes (elements, fp);
    c9ba:	       move.l 20(sp),-(sp)
    c9be:	       move.l 12(sp),-(sp)
    c9c2:	       jsr 8d0 <put2bytes>
    c9c8:	       addq.l #8,sp
	search = vs;
    c9ca:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    c9ce:	       clr.l 4(sp)
    c9d2:	   ,-- bra.s c9ee <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    c9d4:	,--|-> move.l (sp),d0
    c9d6:	|  |   move.l 20(sp),-(sp)
    c9da:	|  |   move.l d0,-(sp)
    c9dc:	|  |   jsr cb2a <saveVariable>
    c9e2:	|  |   addq.l #8,sp
		search = search -> next;
    c9e4:	|  |   movea.l (sp),a0
    c9e6:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    c9ea:	|  |   addq.l #1,4(sp)
    c9ee:	|  '-> move.l 4(sp),d0
    c9f2:	|      cmp.l 8(sp),d0
    c9f6:	'----- blt.s c9d4 <saveStack+0x36>
	}
}
    c9f8:	       nop
    c9fa:	       nop
    c9fc:	       lea 12(sp),sp
    ca00:	       rts

0000ca02 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    ca02:	             lea -44(sp),sp
    ca06:	             move.l a6,-(sp)
    ca08:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    ca0a:	             move.l 1a834 <stackLib>,48(sp)
	int a = 0;
    ca12:	             clr.l 44(sp)
	while (s) {
    ca16:	      ,----- bra.s ca74 <saveStackRef+0x72>
		if (s -> stack == vs) {
    ca18:	   ,--|----> movea.l 48(sp),a0
    ca1c:	   |  |      move.l (a0),d0
    ca1e:	   |  |      cmp.l 56(sp),d0
    ca22:	   |  |  ,-- bne.s ca66 <saveStackRef+0x64>
			FPutC (fp, 1);
    ca24:	   |  |  |   move.l 60(sp),16(sp)
    ca2a:	   |  |  |   moveq #1,d0
    ca2c:	   |  |  |   move.l d0,12(sp)
    ca30:	   |  |  |   move.l 1a7ac <DOSBase>,d0
    ca36:	   |  |  |   movea.l d0,a6
    ca38:	   |  |  |   move.l 16(sp),d1
    ca3c:	   |  |  |   move.l 12(sp),d2
    ca40:	   |  |  |   jsr -312(a6)
    ca44:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    ca48:	   |  |  |   move.l 1a830 <stackLibTotal>,d0
    ca4e:	   |  |  |   sub.l 44(sp),d0
    ca52:	   |  |  |   move.l 60(sp),-(sp)
    ca56:	   |  |  |   move.l d0,-(sp)
    ca58:	   |  |  |   jsr 8d0 <put2bytes>
    ca5e:	   |  |  |   addq.l #8,sp
			return TRUE;
    ca60:	   |  |  |   moveq #1,d0
    ca62:	,--|--|--|-- bra.w cb20 <saveStackRef+0x11e>
		}
		s = s -> next;
    ca66:	|  |  |  '-> movea.l 48(sp),a0
    ca6a:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    ca70:	|  |  |      addq.l #1,44(sp)
	while (s) {
    ca74:	|  |  '----> tst.l 48(sp)
    ca78:	|  '-------- bne.s ca18 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    ca7a:	|            move.l 60(sp),40(sp)
    ca80:	|            clr.l 36(sp)
    ca84:	|            move.l 1a7ac <DOSBase>,d0
    ca8a:	|            movea.l d0,a6
    ca8c:	|            move.l 40(sp),d1
    ca90:	|            move.l 36(sp),d2
    ca94:	|            jsr -312(a6)
    ca98:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    ca9c:	|            movea.l 56(sp),a0
    caa0:	|            move.l (a0),d0
    caa2:	|            move.l 60(sp),-(sp)
    caa6:	|            move.l d0,-(sp)
    caa8:	|            jsr c99e <saveStack>
    caae:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cab0:	|            moveq #8,d0
    cab2:	|            move.l d0,28(sp)
    cab6:	|            clr.l 24(sp)
    caba:	|            move.l 1a7a4 <SysBase>,d0
    cac0:	|            movea.l d0,a6
    cac2:	|            move.l 28(sp),d0
    cac6:	|            move.l 24(sp),d1
    caca:	|            jsr -684(a6)
    cace:	|            move.l d0,20(sp)
    cad2:	|            move.l 20(sp),d0
    cad6:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cada:	|            move.l 1a830 <stackLibTotal>,d0
    cae0:	|            addq.l #1,d0
    cae2:	|            move.l d0,1a830 <stackLibTotal>
	if (! s) {
    cae8:	|            tst.l 48(sp)
    caec:	|        ,-- bne.s cb00 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    caee:	|        |   pea 1907e <PutChar+0x16a2>
    caf4:	|        |   jsr 16f3a <KPrintF>
    cafa:	|        |   addq.l #4,sp
		return FALSE;
    cafc:	|        |   clr.w d0
    cafe:	+--------|-- bra.s cb20 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cb00:	|        '-> move.l 1a834 <stackLib>,d0
    cb06:	|            movea.l 48(sp),a0
    cb0a:	|            move.l d0,4(a0)
	s -> stack = vs;
    cb0e:	|            movea.l 48(sp),a0
    cb12:	|            move.l 56(sp),(a0)
	stackLib = s;
    cb16:	|            move.l 48(sp),1a834 <stackLib>
	return TRUE;
    cb1e:	|            moveq #1,d0
}
    cb20:	'----------> move.l (sp)+,d2
    cb22:	             movea.l (sp)+,a6
    cb24:	             lea 44(sp),sp
    cb28:	             rts

0000cb2a <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cb2a:	          lea -12(sp),sp
    cb2e:	          move.l a6,-(sp)
    cb30:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cb32:	          move.l 28(sp),16(sp)
    cb38:	          movea.l 24(sp),a0
    cb3c:	          move.l (a0),d0
    cb3e:	          move.l d0,12(sp)
    cb42:	          move.l 1a7ac <DOSBase>,d0
    cb48:	          movea.l d0,a6
    cb4a:	          move.l 16(sp),d1
    cb4e:	          move.l 12(sp),d2
    cb52:	          jsr -312(a6)
    cb56:	          move.l d0,8(sp)
	switch (from -> varType) {
    cb5a:	          movea.l 24(sp),a0
    cb5e:	          move.l (a0),d0
    cb60:	          moveq #9,d1
    cb62:	          cmp.l d0,d1
    cb64:	      ,-- bcs.w cc14 <saveVariable+0xea>
    cb68:	      |   add.l d0,d0
    cb6a:	      |   movea.l d0,a0
    cb6c:	      |   adda.l #52088,a0
    cb72:	      |   move.w (a0),d0
    cb74:	      |   jmp (cb78 <saveVariable+0x4e>,pc,d0.w)
    cb78:	      |   ori.l #1310740,(a0)+
    cb7e:	      |   ori.b #20,(20,a0,d0.w)
    cb84:	      |   .short 0x004c
    cb86:	      |   ori.b #126,(a4)
    cb8a:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    cb8e:	      |   ori.b #40,(a0)+
    cb92:	      |   ori.b #47,d4
    cb96:	      |   ori.b #0,(a4)+
    cb9a:	      |   jsr 958 <put4bytes>
    cba0:	      |   addq.l #8,sp
		return TRUE;
    cba2:	      |   moveq #1,d0
    cba4:	,-----|-- bra.w cc50 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    cba8:	|     |   movea.l 24(sp),a0
    cbac:	|     |   move.l 4(a0),d0
    cbb0:	|     |   move.l 28(sp),-(sp)
    cbb4:	|     |   move.l d0,-(sp)
    cbb6:	|     |   jsr bd8 <writeString>
    cbbc:	|     |   addq.l #8,sp
		return TRUE;
    cbbe:	|     |   moveq #1,d0
    cbc0:	+-----|-- bra.w cc50 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    cbc4:	|     |   movea.l 24(sp),a0
    cbc8:	|     |   move.l 4(a0),d0
    cbcc:	|     |   move.l 28(sp),-(sp)
    cbd0:	|     |   move.l d0,-(sp)
    cbd2:	|     |   jsr ca02 <saveStackRef>
    cbd8:	|     |   addq.l #8,sp
    cbda:	+-----|-- bra.s cc50 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    cbdc:	|     |   movea.l 24(sp),a0
    cbe0:	|     |   move.l 4(a0),d0
    cbe4:	|     |   move.l 28(sp),-(sp)
    cbe8:	|     |   move.l d0,-(sp)
    cbea:	|     |   jsr ad78 <saveCostume>
    cbf0:	|     |   addq.l #8,sp
		return FALSE;
    cbf2:	|     |   clr.w d0
    cbf4:	+-----|-- bra.s cc50 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    cbf6:	|     |   movea.l 24(sp),a0
    cbfa:	|     |   move.l 4(a0),d0
    cbfe:	|     |   move.l 28(sp),-(sp)
    cc02:	|     |   move.l d0,-(sp)
    cc04:	|     |   jsr acae <saveAnim>
    cc0a:	|     |   addq.l #8,sp
		return FALSE;
    cc0c:	|     |   clr.w d0
    cc0e:	+-----|-- bra.s cc50 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    cc10:	|     |   clr.w d0
    cc12:	+-----|-- bra.s cc50 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    cc14:	|     '-> movea.l 24(sp),a0
    cc18:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cc1a:	|         moveq #10,d1
    cc1c:	|         cmp.l d0,d1
    cc1e:	|  ,----- bcs.s cc38 <saveVariable+0x10e>
						typeName[from->varType] :
    cc20:	|  |      movea.l 24(sp),a0
    cc24:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cc26:	|  |      add.l d0,d0
    cc28:	|  |      movea.l d0,a1
    cc2a:	|  |      adda.l d0,a1
    cc2c:	|  |      lea 1a680 <typeName>,a0
    cc32:	|  |      move.l (0,a1,a0.l),d0
    cc36:	|  |  ,-- bra.s cc3e <saveVariable+0x114>
    cc38:	|  '--|-> move.l #102563,d0
    cc3e:	|     '-> move.l d0,-(sp)
    cc40:	|         pea 190aa <PutChar+0x16ce>
    cc46:	|         jsr 16f3a <KPrintF>
    cc4c:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cc4e:	|         moveq #1,d0
    cc50:	'-------> move.l (sp)+,d2
    cc52:	          movea.l (sp)+,a6
    cc54:	          lea 12(sp),sp
    cc58:	          rts

0000cc5a <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    cc5a:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cc5e:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cc66:	          movea.l 4(sp),a0
    cc6a:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cc70:	          movea.l 4(sp),a0
    cc74:	          move.w 10(a0),d0
    cc78:	          lsr.w #8,d0
    cc7a:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    cc7e:	          movea.l 4(sp),a0
    cc82:	          move.w 10(a0),d0
    cc86:	          move.b d0,(sp)

    if(counterx_new)
    cc88:	,-------- beq.w cd2e <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cc8c:	|         clr.w d1
    cc8e:	|         move.b (sp),d1
    cc90:	|         move.w 1a83c <counterx_old>,d0
    cc96:	|         sub.w d0,d1
    cc98:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cc9c:	|         cmpi.w #128,10(sp)
    cca2:	|     ,-- blt.s ccba <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cca4:	|     |   move.w #1,1a75a <input+0x4>
            counterx_diff -= 256;    
    ccac:	|     |   move.w 10(sp),d0
    ccb0:	|     |   addi.w #-256,d0
    ccb4:	|     |   move.w d0,10(sp)
    ccb8:	|  ,--|-- bra.s cce6 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    ccba:	|  |  '-> cmpi.w #-129,10(sp)
    ccc0:	|  |  ,-- bgt.s ccd8 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    ccc2:	|  |  |   move.w 10(sp),d0
    ccc6:	|  |  |   addi.w #256,d0
    ccca:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    ccce:	|  |  |   move.w #1,1a75a <input+0x4>
    ccd6:	|  +--|-- bra.s cce6 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    ccd8:	|  |  '-> tst.w 10(sp)
    ccdc:	|  +----- beq.s cce6 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    ccde:	|  |      move.w #1,1a75a <input+0x4>
        }

        input.mouseX += counterx_diff;
    cce6:	|  '----> move.l 1a760 <input+0xa>,d0
    ccec:	|         movea.w 10(sp),a0
    ccf0:	|         add.l a0,d0
    ccf2:	|         move.l d0,1a760 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    ccf8:	|         move.l 1a760 <input+0xa>,d1
    ccfe:	|         move.l 1a6f8 <winWidth>,d0
    cd04:	|         cmp.l d1,d0
    cd06:	|     ,-- bge.s cd16 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    cd08:	|     |   move.l 1a6f8 <winWidth>,d0
    cd0e:	|     |   move.l d0,1a760 <input+0xa>
    cd14:	|  ,--|-- bra.s cd24 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    cd16:	|  |  '-> move.l 1a760 <input+0xa>,d0
    cd1c:	|  +----- bpl.s cd24 <CsiCheckInput+0xca>
            input.mouseX = 0;
    cd1e:	|  |      clr.l 1a760 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    cd24:	|  '----> clr.w d0
    cd26:	|         move.b (sp),d0
    cd28:	|         move.w d0,1a83c <counterx_old>
    }    

    if(countery_new)
    cd2e:	'-------> tst.b 1(sp)
    cd32:	,-------- beq.w cddc <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    cd36:	|         clr.w d1
    cd38:	|         move.b 1(sp),d1
    cd3c:	|         move.w 1a83e <countery_old>,d0
    cd42:	|         sub.w d0,d1
    cd44:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    cd48:	|         cmpi.w #128,8(sp)
    cd4e:	|     ,-- blt.s cd66 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    cd50:	|     |   move.w #1,1a75a <input+0x4>
            countery_diff -= 256;    
    cd58:	|     |   move.w 8(sp),d0
    cd5c:	|     |   addi.w #-256,d0
    cd60:	|     |   move.w d0,8(sp)
    cd64:	|  ,--|-- bra.s cd92 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    cd66:	|  |  '-> cmpi.w #-129,8(sp)
    cd6c:	|  |  ,-- bgt.s cd84 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    cd6e:	|  |  |   move.w #1,1a75a <input+0x4>
            countery_diff += 256;
    cd76:	|  |  |   move.w 8(sp),d0
    cd7a:	|  |  |   addi.w #256,d0
    cd7e:	|  |  |   move.w d0,8(sp)
    cd82:	|  +--|-- bra.s cd92 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    cd84:	|  |  '-> tst.w 8(sp)
    cd88:	|  +----- beq.s cd92 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    cd8a:	|  |      move.w #1,1a75a <input+0x4>
        }

        input.mouseY += countery_diff;
    cd92:	|  '----> move.l 1a764 <input+0xe>,d0
    cd98:	|         movea.w 8(sp),a0
    cd9c:	|         add.l a0,d0
    cd9e:	|         move.l d0,1a764 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    cda4:	|         move.l 1a764 <input+0xe>,d1
    cdaa:	|         move.l 1a6fc <winHeight>,d0
    cdb0:	|         cmp.l d1,d0
    cdb2:	|     ,-- bge.s cdc2 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    cdb4:	|     |   move.l 1a6fc <winHeight>,d0
    cdba:	|     |   move.l d0,1a764 <input+0xe>
    cdc0:	|  ,--|-- bra.s cdd0 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    cdc2:	|  |  '-> move.l 1a764 <input+0xe>,d0
    cdc8:	|  +----- bpl.s cdd0 <CsiCheckInput+0x176>
            input.mouseY = 0;
    cdca:	|  |      clr.l 1a764 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    cdd0:	|  '----> clr.w d0
    cdd2:	|         move.b 1(sp),d0
    cdd6:	|         move.w d0,1a83e <countery_old>
    } 

    input.leftRelease = FALSE;
    cddc:	'-------> clr.w 1a75c <input+0x6>
    input.rightRelease = FALSE;
    cde2:	          clr.w 1a75e <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    cde8:	          move.w 1a756 <input>,d0
    cdee:	      ,-- beq.s ce14 <CsiCheckInput+0x1ba>
    cdf0:	      |   movea.l #12574721,a0
    cdf6:	      |   move.b (a0),d0
    cdf8:	      |   move.b d0,d0
    cdfa:	      |   andi.l #255,d0
    ce00:	      |   moveq #64,d1
    ce02:	      |   and.l d1,d0
    ce04:	      +-- beq.s ce14 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    ce06:	      |   clr.w 1a756 <input>
        input.leftRelease = TRUE;
    ce0c:	      |   move.w #1,1a75c <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    ce14:	      '-> move.w 1a758 <input+0x2>,d0
    ce1a:	      ,-- beq.s ce42 <CsiCheckInput+0x1e8>
    ce1c:	      |   movea.l #14675990,a0
    ce22:	      |   move.w (a0),d0
    ce24:	      |   move.w d0,d0
    ce26:	      |   andi.l #65535,d0
    ce2c:	      |   andi.l #1024,d0
    ce32:	      +-- beq.s ce42 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    ce34:	      |   clr.w 1a758 <input+0x2>
        input.rightRelease = TRUE;
    ce3a:	      |   move.w #1,1a75e <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    ce42:	      '-> movea.l #12574721,a0
    ce48:	          move.b (a0),d0
    ce4a:	          move.b d0,d0
    ce4c:	          andi.l #255,d0
    ce52:	          moveq #64,d1
    ce54:	          and.l d1,d0
    ce56:	      ,-- bne.s ce60 <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    ce58:	      |   move.w #1,1a756 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    ce60:	      '-> movea.l #14675990,a0
    ce66:	          move.w (a0),d0
    ce68:	          move.w d0,d0
    ce6a:	          andi.l #65535,d0
    ce70:	          andi.l #1024,d0
    ce76:	      ,-- bne.s ce80 <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    ce78:	      |   move.w #1,1a758 <input+0x2>
    }

    ce80:	      '-> nop
    ce82:	          lea 12(sp),sp
    ce86:	          rts

0000ce88 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    ce88:	moveq #0,d0
}
    ce8a:	rts

0000ce8c <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    ce8c:	nop
    ce8e:	rts

0000ce90 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    ce90:	nop
    ce92:	rts

0000ce94 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    ce94:	moveq #1,d0
}
    ce96:	rts

0000ce98 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    ce98:	nop
    ce9a:	rts

0000ce9c <saveSounds>:

void saveSounds (BPTR fp) {
    ce9c:	lea -12(sp),sp
    cea0:	move.l a6,-(sp)
    cea2:	move.l d2,-(sp)
	FPutC (fp,0);
    cea4:	move.l 24(sp),16(sp)
    ceaa:	clr.l 12(sp)
    ceae:	move.l 1a7ac <DOSBase>,d0
    ceb4:	movea.l d0,a6
    ceb6:	move.l 16(sp),d1
    ceba:	move.l 12(sp),d2
    cebe:	jsr -312(a6)
    cec2:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    cec6:	move.l 1a13e <defSoundVol>,d0
    cecc:	move.l 24(sp),-(sp)
    ced0:	move.l d0,-(sp)
    ced2:	jsr 8d0 <put2bytes>
    ced8:	addq.l #8,sp
	put2bytes (defVol, fp);
    ceda:	move.l 1a13a <defVol>,d0
    cee0:	move.l 24(sp),-(sp)
    cee4:	move.l d0,-(sp)
    cee6:	jsr 8d0 <put2bytes>
    ceec:	addq.l #8,sp
}
    ceee:	nop
    cef0:	move.l (sp)+,d2
    cef2:	movea.l (sp)+,a6
    cef4:	lea 12(sp),sp
    cef8:	rts

0000cefa <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    cefa:	move.l 4(sp),1a13a <defVol>
}
    cf02:	nop
    cf04:	rts

0000cf06 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    cf06:	move.l 4(sp),1a13e <defSoundVol>
}
    cf0e:	nop
    cf10:	rts

0000cf12 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    cf12:	nop
    cf14:	rts

0000cf16 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    cf16:	nop
    cf18:	rts

0000cf1a <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    cf1a:	nop
    cf1c:	rts

0000cf1e <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    cf1e:	subq.l #4,sp
    cf20:	move.l 12(sp),d0
    cf24:	move.w d0,d0
    cf26:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    cf2a:	moveq #1,d0
}
    cf2c:	addq.l #4,sp
    cf2e:	rts

0000cf30 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    cf30:	nop
    cf32:	rts

0000cf34 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    cf34:	move.l 16(sp),-(sp)
    cf38:	move.l 16(sp),-(sp)
    cf3c:	jsr e0e <CstBlankScreen>
    cf42:	addq.l #8,sp
}
    cf44:	nop
    cf46:	rts

0000cf48 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    cf48:	pea 190cd <PutChar+0x16f1>
    cf4e:	jsr 16f3a <KPrintF>
    cf54:	addq.l #4,sp
}
    cf56:	nop
    cf58:	rts

0000cf5a <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    cf5a:	movea.l 8(sp),a1
    cf5e:	movea.l 12(sp),a0
    cf62:	move.l 8(sp),d1
    cf66:	move.l 4(sp),d0
    cf6a:	move.l a1,-(sp)
    cf6c:	move.l a0,-(sp)
    cf6e:	move.l d1,-(sp)
    cf70:	move.l d0,-(sp)
    cf72:	jsr 3b1a <drawLine>
    cf78:	lea 16(sp),sp
}
    cf7c:	nop
    cf7e:	rts

0000cf80 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    cf80:	movea.l 12(sp),a1
    cf84:	movea.l 4(sp),a0
    cf88:	move.l 8(sp),d1
    cf8c:	move.l 4(sp),d0
    cf90:	move.l a1,-(sp)
    cf92:	move.l a0,-(sp)
    cf94:	move.l d1,-(sp)
    cf96:	move.l d0,-(sp)
    cf98:	jsr 3b1a <drawLine>
    cf9e:	lea 16(sp),sp
}
    cfa2:	nop
    cfa4:	rts

0000cfa6 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    cfa6:	pea 19106 <PutChar+0x172a>
    cfac:	jsr 16f3a <KPrintF>
    cfb2:	addq.l #4,sp
}
    cfb4:	nop
    cfb6:	rts

0000cfb8 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    cfb8:	jsr 1b62 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    cfbe:	pea 1a848 <backdropTextureName>
    cfc4:	pea 1 <_start+0x1>
    cfc8:	jsr 3c9c <deleteTextures>
    cfce:	addq.l #8,sp
	backdropTextureName = 0;
    cfd0:	clr.l 1a848 <backdropTextureName>
	backdropExists = FALSE;
    cfd6:	clr.w 1a84c <backdropExists>
}
    cfdc:	nop
    cfde:	rts

0000cfe0 <killParallax>:

void killParallax () {
    cfe0:	          lea -12(sp),sp
    cfe4:	          move.l a6,-(sp)
	while (parallaxStuff) {
    cfe6:	   ,----- bra.s d052 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    cfe8:	,--|----> move.l 1a84e <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    cff0:	|  |      movea.l 12(sp),a0
    cff4:	|  |      move.l 42(a0),d0
    cff8:	|  |      move.l d0,1a84e <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    cffe:	|  |      move.l 12(sp),d0
    d002:	|  |      addq.l #4,d0
    d004:	|  |      move.l d0,-(sp)
    d006:	|  |      pea 1 <_start+0x1>
    d00a:	|  |      jsr 3c9c <deleteTextures>
    d010:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d012:	|  |      movea.l 12(sp),a0
    d016:	|  |      move.l (a0),d0
    d018:	|  |  ,-- beq.s d032 <killParallax+0x52>
    d01a:	|  |  |   movea.l 12(sp),a0
    d01e:	|  |  |   move.l (a0),8(sp)
    d022:	|  |  |   move.l 1a7a4 <SysBase>,d0
    d028:	|  |  |   movea.l d0,a6
    d02a:	|  |  |   movea.l 8(sp),a1
    d02e:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d032:	|  |  '-> tst.l 12(sp)
    d036:	|  |  ,-- beq.s d04e <killParallax+0x6e>
    d038:	|  |  |   move.l 12(sp),4(sp)
    d03e:	|  |  |   move.l 1a7a4 <SysBase>,d0
    d044:	|  |  |   movea.l d0,a6
    d046:	|  |  |   movea.l 4(sp),a1
    d04a:	|  |  |   jsr -690(a6)
		k = NULL;
    d04e:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d052:	|  '----> move.l 1a84e <parallaxStuff>,d0
    d058:	'-------- bne.s cfe8 <killParallax+0x8>
	}
}
    d05a:	          nop
    d05c:	          nop
    d05e:	          movea.l (sp)+,a6
    d060:	          lea 12(sp),sp
    d064:	          rts

0000d066 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d066:	       move.l 4(sp),-(sp)
    d06a:	       jsr 6a2e <openFileFromNum>
    d070:	       addq.l #4,sp
    d072:	       tst.l d0
    d074:	   ,-- bne.s d086 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d076:	   |   pea 19127 <PutChar+0x174b>
    d07c:	   |   jsr 16f3a <KPrintF>
    d082:	   |   addq.l #4,sp
		return;
    d084:	,--|-- bra.s d0a6 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d086:	|  '-> move.l 1a78c <bigDataFile>,d0
    d08c:	|      move.l 12(sp),-(sp)
    d090:	|      move.l 12(sp),-(sp)
    d094:	|      move.l d0,-(sp)
    d096:	|      jsr 1dda <CstLoadBackdrop>
    d09c:	|      lea 12(sp),sp
	finishAccess ();
    d0a0:	|      jsr 6926 <finishAccess>
	
}
    d0a6:	'----> rts

0000d0a8 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d0a8:	subq.l #8,sp
    d0aa:	movea.l 12(sp),a0
    d0ae:	move.l 16(sp),d1
    d0b2:	move.l 20(sp),d0
    d0b6:	movea.w a0,a0
    d0b8:	move.w a0,6(sp)
    d0bc:	move.w d1,d1
    d0be:	move.w d1,4(sp)
    d0c2:	move.w d0,d0
    d0c4:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d0c8:	pea 19176 <PutChar+0x179a>
    d0ce:	jsr 16f3a <KPrintF>
    d0d4:	addq.l #4,sp

}
    d0d6:	nop
    d0d8:	addq.l #8,sp
    d0da:	rts

0000d0dc <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d0dc:	pea 19199 <PutChar+0x17bd>
    d0e2:	jsr 16f3a <KPrintF>
    d0e8:	addq.l #4,sp
}
    d0ea:	nop
    d0ec:	rts

0000d0ee <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d0ee:	pea 1a852 <snapshotTextureName>
    d0f4:	pea 1 <_start+0x1>
    d0f8:	jsr 3c9c <deleteTextures>
    d0fe:	addq.l #8,sp
	snapshotTextureName = 0;
    d100:	clr.l 1a852 <snapshotTextureName>
}
    d106:	nop
    d108:	rts

0000d10a <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d10a:	clr.l 1a85e <cameraX>
	cameraY = 0;
    d110:	clr.l 1a862 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d116:	move.l 1a844 <sceneHeight>,d0
    d11c:	move.l d0,d1
    d11e:	move.l 1a840 <sceneWidth>,d0
    d124:	move.l d1,-(sp)
    d126:	move.l d0,-(sp)
    d128:	jsr 36ce <CstReserveBackdrop>
    d12e:	addq.l #8,sp
}
    d130:	rts

0000d132 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d132:	jsr cfb8 <killBackDrop>
	killParallax ();
    d138:	jsr cfe0 <killParallax>
	killZBuffer ();
    d13e:	jsr 83d6 <killZBuffer>
	sceneWidth = x;
    d144:	move.l 4(sp),d0
    d148:	move.l d0,1a840 <sceneWidth>
	sceneHeight = y;
    d14e:	move.l 8(sp),d0
    d152:	move.l d0,1a844 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d158:	pea 191d2 <PutChar+0x17f6>
    d15e:	jsr 16f3a <KPrintF>
    d164:	addq.l #4,sp
	return reserveBackdrop();
    d166:	jsr d10a <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d16c:	rts

0000d16e <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d16e:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d170:	move.l 12(sp),-(sp)
    d174:	jsr 6bc <get2bytes>
    d17a:	addq.l #4,sp
    d17c:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d180:	move.l 12(sp),-(sp)
    d184:	jsr 6bc <get2bytes>
    d18a:	addq.l #4,sp
    d18c:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d18e:	moveq #1,d0
}
    d190:	addq.l #8,sp
    d192:	rts

0000d194 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d194:	   ,-> lea -12(sp),sp
    d198:	   |   move.l a6,-(sp)
    d19a:	   |   move.l d2,-(sp)
	if (me) {
    d19c:	   |   tst.l 24(sp)
    d1a0:	,--|-- beq.w d236 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d1a4:	|  |   movea.l 24(sp),a0
    d1a8:	|  |   move.l 42(a0),d0
    d1ac:	|  |   move.l 28(sp),-(sp)
    d1b0:	|  |   move.l d0,-(sp)
    d1b2:	|  '-- jsr d194 <saveParallaxRecursive>(pc)
    d1b6:	|      addq.l #8,sp
		FPutC (fp, 1);
    d1b8:	|      move.l 28(sp),16(sp)
    d1be:	|      moveq #1,d0
    d1c0:	|      move.l d0,12(sp)
    d1c4:	|      move.l 1a7ac <DOSBase>,d0
    d1ca:	|      movea.l d0,a6
    d1cc:	|      move.l 16(sp),d1
    d1d0:	|      move.l 12(sp),d2
    d1d4:	|      jsr -312(a6)
    d1d8:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d1dc:	|      movea.l 24(sp),a0
    d1e0:	|      move.w 28(a0),d0
    d1e4:	|      move.w d0,d0
    d1e6:	|      andi.l #65535,d0
    d1ec:	|      move.l 28(sp),-(sp)
    d1f0:	|      move.l d0,-(sp)
    d1f2:	|      jsr 8d0 <put2bytes>
    d1f8:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d1fa:	|      movea.l 24(sp),a0
    d1fe:	|      move.w 30(a0),d0
    d202:	|      move.w d0,d0
    d204:	|      andi.l #65535,d0
    d20a:	|      move.l 28(sp),-(sp)
    d20e:	|      move.l d0,-(sp)
    d210:	|      jsr 8d0 <put2bytes>
    d216:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d218:	|      movea.l 24(sp),a0
    d21c:	|      move.w 32(a0),d0
    d220:	|      move.w d0,d0
    d222:	|      andi.l #65535,d0
    d228:	|      move.l 28(sp),-(sp)
    d22c:	|      move.l d0,-(sp)
    d22e:	|      jsr 8d0 <put2bytes>
    d234:	|      addq.l #8,sp
	}
}
    d236:	'----> nop
    d238:	       move.l (sp)+,d2
    d23a:	       movea.l (sp)+,a6
    d23c:	       lea 12(sp),sp
    d240:	       rts

0000d242 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d242:	pea 191f9 <PutChar+0x181d>
    d248:	jsr 16f3a <KPrintF>
    d24e:	addq.l #4,sp
	return TRUE;
    d250:	moveq #1,d0
    d252:	rts

0000d254 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d254:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d256:	             move.l 1a856 <allObjectTypes>,(sp)

	while (huntType) {
    d25c:	      ,----- bra.s d274 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d25e:	   ,--|----> movea.l (sp),a0
    d260:	   |  |      move.l 4(a0),d0
    d264:	   |  |      cmp.l 8(sp),d0
    d268:	   |  |  ,-- bne.s d26e <findObjectType+0x1a>
    d26a:	   |  |  |   move.l (sp),d0
    d26c:	,--|--|--|-- bra.s d284 <findObjectType+0x30>
		huntType = huntType -> next;
    d26e:	|  |  |  '-> movea.l (sp),a0
    d270:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d274:	|  |  '----> tst.l (sp)
    d276:	|  '-------- bne.s d25e <findObjectType+0xa>
	}

	return loadObjectType (i);
    d278:	|            move.l 8(sp),-(sp)
    d27c:	|            jsr d344 <loadObjectType>
    d282:	|            addq.l #4,sp
}
    d284:	'----------> addq.l #4,sp
    d286:	             rts

0000d288 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d288:	             lea -12(sp),sp
	int i, num = 0;
    d28c:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d290:	             move.l 20(sp),-(sp)
    d294:	             jsr d254 <findObjectType>
    d29a:	             addq.l #4,sp
    d29c:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d29e:	             clr.l 8(sp)
    d2a2:	   ,-------- bra.s d2d8 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d2a4:	,--|-------> movea.l (sp),a0
    d2a6:	|  |         move.l 38(a0),d1
    d2aa:	|  |         move.l 8(sp),d0
    d2ae:	|  |         lsl.l #3,d0
    d2b0:	|  |         movea.l d1,a0
    d2b2:	|  |         adda.l d0,a0
    d2b4:	|  |         move.l (a0),d0
    d2b6:	|  |         cmp.l 16(sp),d0
    d2ba:	|  |  ,----- bne.s d2d4 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d2bc:	|  |  |      movea.l (sp),a0
    d2be:	|  |  |      move.l 38(a0),d1
    d2c2:	|  |  |      move.l 8(sp),d0
    d2c6:	|  |  |      lsl.l #3,d0
    d2c8:	|  |  |      movea.l d1,a0
    d2ca:	|  |  |      adda.l d0,a0
    d2cc:	|  |  |      move.l 4(a0),4(sp)
			break;
    d2d2:	|  |  |  ,-- bra.s d2e4 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d2d4:	|  |  '--|-> addq.l #1,8(sp)
    d2d8:	|  '-----|-> movea.l (sp),a0
    d2da:	|        |   move.l 16(a0),d0
    d2de:	|        |   cmp.l 8(sp),d0
    d2e2:	'--------|-- bgt.s d2a4 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d2e4:	         '-> move.l 4(sp),d0
}
    d2e8:	             lea 12(sp),sp
    d2ec:	             rts

0000d2ee <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d2ee:	moveq #1,d0
}
    d2f0:	rts

0000d2f2 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d2f2:	subq.l #8,sp
    d2f4:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d2f6:	move.l 16(sp),-(sp)
    d2fa:	jsr 6bc <get2bytes>
    d300:	addq.l #4,sp
    d302:	move.l d0,-(sp)
    d304:	jsr d344 <loadObjectType>
    d30a:	addq.l #4,sp
    d30c:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d310:	movea.l 8(sp),a0
    d314:	move.l (a0),4(sp)
    d318:	move.l 1a7a4 <SysBase>,d0
    d31e:	movea.l d0,a6
    d320:	movea.l 4(sp),a1
    d324:	jsr -690(a6)
	r -> screenName = readString (fp);
    d328:	move.l 16(sp),-(sp)
    d32c:	jsr b02 <readString>
    d332:	addq.l #4,sp
    d334:	movea.l 8(sp),a0
    d338:	move.l d0,(a0)
	return r;
    d33a:	move.l 8(sp),d0
}
    d33e:	movea.l (sp)+,a6
    d340:	addq.l #8,sp
    d342:	rts

0000d344 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d344:	          lea -84(sp),sp
    d348:	          move.l a6,-(sp)
    d34a:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d34c:	          moveq #42,d0
    d34e:	          move.l d0,84(sp)
    d352:	          clr.l 80(sp)
    d356:	          move.l 1a7a4 <SysBase>,d0
    d35c:	          movea.l d0,a6
    d35e:	          move.l 84(sp),d0
    d362:	          move.l 80(sp),d1
    d366:	          jsr -684(a6)
    d36a:	          move.l d0,76(sp)
    d36e:	          move.l 76(sp),d0
    d372:	          move.l d0,72(sp)

    if (newType) {
    d376:	,-------- beq.w d5f0 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d37a:	|         move.l 96(sp),-(sp)
    d37e:	|         jsr 6af6 <openObjectSlice>
    d384:	|         addq.l #4,sp
    d386:	|         tst.w d0
    d388:	+-------- beq.w d5f0 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d38c:	|         move.l 1a78c <bigDataFile>,d0
    d392:	|         move.l d0,-(sp)
    d394:	|         jsr 6bc <get2bytes>
    d39a:	|         addq.l #4,sp
    d39c:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d3a0:	|         move.l 1a78c <bigDataFile>,64(sp)
    d3a8:	|         move.l 1a7ac <DOSBase>,d0
    d3ae:	|         movea.l d0,a6
    d3b0:	|         move.l 64(sp),d1
    d3b4:	|         jsr -306(a6)
    d3b8:	|         move.l d0,60(sp)
    d3bc:	|         move.l 60(sp),d0
    d3c0:	|         move.l d0,d0
    d3c2:	|         movea.l 72(sp),a0
    d3c6:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d3ca:	|         move.l 1a78c <bigDataFile>,56(sp)
    d3d2:	|         move.l 1a7ac <DOSBase>,d0
    d3d8:	|         movea.l d0,a6
    d3da:	|         move.l 56(sp),d1
    d3de:	|         jsr -306(a6)
    d3e2:	|         move.l d0,52(sp)
    d3e6:	|         move.l 52(sp),d0
    d3ea:	|         move.l d0,d0
    d3ec:	|         movea.l 72(sp),a0
    d3f0:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d3f4:	|         move.l 1a78c <bigDataFile>,48(sp)
    d3fc:	|         move.l 1a7ac <DOSBase>,d0
    d402:	|         movea.l d0,a6
    d404:	|         move.l 48(sp),d1
    d408:	|         jsr -306(a6)
    d40c:	|         move.l d0,44(sp)
    d410:	|         move.l 44(sp),d0
    d414:	|         move.l d0,d0
    d416:	|         movea.l 72(sp),a0
    d41a:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d41e:	|         move.l 1a78c <bigDataFile>,40(sp)
    d426:	|         move.l 1a7ac <DOSBase>,d0
    d42c:	|         movea.l d0,a6
    d42e:	|         move.l 40(sp),d1
    d432:	|         jsr -306(a6)
    d436:	|         move.l d0,36(sp)
    d43a:	|         move.l 36(sp),d0
    d43e:	|         movea.l 72(sp),a0
    d442:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d446:	|         move.l 1a78c <bigDataFile>,32(sp)
    d44e:	|         move.l 1a7ac <DOSBase>,d0
    d454:	|         movea.l d0,a6
    d456:	|         move.l 32(sp),d1
    d45a:	|         jsr -306(a6)
    d45e:	|         move.l d0,28(sp)
    d462:	|         move.l 28(sp),d0
    d466:	|         movea.l 72(sp),a0
    d46a:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d46e:	|         move.l 1a78c <bigDataFile>,d0
    d474:	|         move.l d0,-(sp)
    d476:	|         jsr 718 <get4bytes>
    d47c:	|         addq.l #4,sp
    d47e:	|         movea.l 72(sp),a0
    d482:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d486:	|         move.l 1a78c <bigDataFile>,d0
    d48c:	|         move.l d0,-(sp)
    d48e:	|         jsr 6bc <get2bytes>
    d494:	|         addq.l #4,sp
    d496:	|         movea.l 72(sp),a0
    d49a:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d49e:	|         move.l 1a78c <bigDataFile>,24(sp)
    d4a6:	|         move.l 1a7ac <DOSBase>,d0
    d4ac:	|         movea.l d0,a6
    d4ae:	|         move.l 24(sp),d1
    d4b2:	|         jsr -306(a6)
    d4b6:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d4ba:	|         move.l 1a78c <bigDataFile>,d0
    d4c0:	|         move.l d0,-(sp)
    d4c2:	|         jsr 7d8 <getFloat>
    d4c8:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d4ca:	|         move.l 1a78c <bigDataFile>,d0
    d4d0:	|         move.l d0,-(sp)
    d4d2:	|         jsr 7d8 <getFloat>
    d4d8:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d4da:	|         move.l 1a78c <bigDataFile>,d0
    d4e0:	|         move.l d0,-(sp)
    d4e2:	|         jsr 6bc <get2bytes>
    d4e8:	|         addq.l #4,sp
    d4ea:	|         move.l d0,d0
    d4ec:	|         movea.l 72(sp),a0
    d4f0:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d4f4:	|         move.l 1a78c <bigDataFile>,d0
    d4fa:	|         move.l d0,-(sp)
    d4fc:	|         jsr 6bc <get2bytes>
    d502:	|         addq.l #4,sp
    d504:	|         movea.l 72(sp),a0
    d508:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d50c:	|         movea.l 72(sp),a0
    d510:	|         move.l 16(a0),d0
    d514:	|  ,----- beq.s d546 <loadObjectType+0x202>
    d516:	|  |      movea.l 72(sp),a0
    d51a:	|  |      move.l 16(a0),d0
    d51e:	|  |      lsl.l #3,d0
    d520:	|  |      move.l d0,16(sp)
    d524:	|  |      clr.l 12(sp)
    d528:	|  |      move.l 1a7a4 <SysBase>,d0
    d52e:	|  |      movea.l d0,a6
    d530:	|  |      move.l 16(sp),d0
    d534:	|  |      move.l 12(sp),d1
    d538:	|  |      jsr -684(a6)
    d53c:	|  |      move.l d0,8(sp)
    d540:	|  |      move.l 8(sp),d0
    d544:	|  |  ,-- bra.s d548 <loadObjectType+0x204>
    d546:	|  '--|-> moveq #0,d0
    d548:	|     '-> movea.l 72(sp),a0
    d54c:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d550:	|         clr.l 88(sp)
    d554:	|     ,-- bra.s d5a4 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d556:	|  ,--|-> move.l 1a78c <bigDataFile>,d1
    d55c:	|  |  |   movea.l 72(sp),a0
    d560:	|  |  |   movea.l 38(a0),a0
    d564:	|  |  |   move.l 88(sp),d0
    d568:	|  |  |   lsl.l #3,d0
    d56a:	|  |  |   lea (0,a0,d0.l),a2
    d56e:	|  |  |   move.l d1,-(sp)
    d570:	|  |  |   jsr 6bc <get2bytes>
    d576:	|  |  |   addq.l #4,sp
    d578:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d57a:	|  |  |   move.l 1a78c <bigDataFile>,d1
    d580:	|  |  |   movea.l 72(sp),a0
    d584:	|  |  |   movea.l 38(a0),a0
    d588:	|  |  |   move.l 88(sp),d0
    d58c:	|  |  |   lsl.l #3,d0
    d58e:	|  |  |   lea (0,a0,d0.l),a2
    d592:	|  |  |   move.l d1,-(sp)
    d594:	|  |  |   jsr 6bc <get2bytes>
    d59a:	|  |  |   addq.l #4,sp
    d59c:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d5a0:	|  |  |   addq.l #1,88(sp)
    d5a4:	|  |  '-> movea.l 72(sp),a0
    d5a8:	|  |      move.l 16(a0),d0
    d5ac:	|  |      cmp.l 88(sp),d0
    d5b0:	|  '----- bgt.s d556 <loadObjectType+0x212>
            }
            finishAccess();
    d5b2:	|         jsr 6926 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d5b8:	|         move.l 68(sp),-(sp)
    d5bc:	|         jsr 6930 <getNumberedString>
    d5c2:	|         addq.l #4,sp
    d5c4:	|         movea.l 72(sp),a0
    d5c8:	|         move.l d0,(a0)
            newType->objectNum = i;
    d5ca:	|         movea.l 72(sp),a0
    d5ce:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d5d4:	|         move.l 1a856 <allObjectTypes>,d0
    d5da:	|         movea.l 72(sp),a0
    d5de:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d5e2:	|         move.l 72(sp),1a856 <allObjectTypes>
            return newType;
    d5ea:	|         move.l 72(sp),d0
    d5ee:	|     ,-- bra.s d5f2 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d5f0:	'-----|-> moveq #0,d0
}
    d5f2:	      '-> movea.l (sp)+,a2
    d5f4:	          movea.l (sp)+,a6
    d5f6:	          lea 84(sp),sp
    d5fa:	          rts

0000d5fc <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d5fc:	             lea -16(sp),sp
    d600:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d602:	             move.l #108630,16(sp)

	while (* huntRegion) {
    d60a:	   ,-------- bra.s d67e <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d60c:	,--|-------> movea.l 16(sp),a0
    d610:	|  |         move.l (a0),d0
    d612:	|  |         cmp.l 24(sp),d0
    d616:	|  |  ,----- bne.s d670 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d618:	|  |  |      movea.l 24(sp),a0
    d61c:	|  |  |      move.l 8(a0),d0
    d620:	|  |  |      movea.l 16(sp),a0
    d624:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d626:	|  |  |      movea.l 24(sp),a0
    d62a:	|  |  |      move.l 38(a0),12(sp)
    d630:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d636:	|  |  |      movea.l d0,a6
    d638:	|  |  |      movea.l 12(sp),a1
    d63c:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d640:	|  |  |      movea.l 24(sp),a0
    d644:	|  |  |      move.l (a0),8(sp)
    d648:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d64e:	|  |  |      movea.l d0,a6
    d650:	|  |  |      movea.l 8(sp),a1
    d654:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d658:	|  |  |      move.l 24(sp),4(sp)
    d65e:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d664:	|  |  |      movea.l d0,a6
    d666:	|  |  |      movea.l 4(sp),a1
    d66a:	|  |  |      jsr -690(a6)
			return;
    d66e:	|  |  |  ,-- bra.s d694 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d670:	|  |  '--|-> movea.l 16(sp),a0
    d674:	|  |     |   move.l (a0),d0
    d676:	|  |     |   move.l d0,d1
    d678:	|  |     |   addq.l #8,d1
    d67a:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d67e:	|  '-----|-> movea.l 16(sp),a0
    d682:	|        |   move.l (a0),d0
    d684:	'--------|-- bne.s d60c <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d686:	         |   pea 19220 <PutChar+0x1844>
    d68c:	         |   jsr 16f3a <KPrintF>
    d692:	         |   addq.l #4,sp
}
    d694:	         '-> movea.l (sp)+,a6
    d696:	             lea 16(sp),sp
    d69a:	             rts

0000d69c <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d69c:	movea.l 4(sp),a0
    d6a0:	move.l 4(a0),d0
    d6a4:	move.l 8(sp),-(sp)
    d6a8:	move.l d0,-(sp)
    d6aa:	jsr 8d0 <put2bytes>
    d6b0:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d6b2:	movea.l 4(sp),a0
    d6b6:	move.l (a0),d0
    d6b8:	move.l 8(sp),-(sp)
    d6bc:	move.l d0,-(sp)
    d6be:	jsr bd8 <writeString>
    d6c4:	addq.l #8,sp
    d6c6:	nop
    d6c8:	rts

0000d6ca <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d6ca:	                         lea -112(sp),sp
    d6ce:	                         move.l a6,-(sp)
    d6d0:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d6d2:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d6d6:	                         move.w 1a85c <saveEncoding>,d0
    d6dc:	                  ,----- beq.s d6e6 <fileToStack+0x1c>
    d6de:	                  |      move.l #102982,d0
    d6e4:	                  |  ,-- bra.s d6ec <fileToStack+0x22>
    d6e6:	                  '--|-> move.l #103008,d0
    d6ec:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d6f0:	                         move.l 124(sp),112(sp)
    d6f6:	                         move.l #1005,108(sp)
    d6fe:	                         move.l 1a7ac <DOSBase>,d0
    d704:	                         movea.l d0,a6
    d706:	                         move.l 112(sp),d1
    d70a:	                         move.l 108(sp),d2
    d70e:	                         jsr -30(a6)
    d712:	                         move.l d0,104(sp)
    d716:	                         move.l 104(sp),d0
    d71a:	                         move.l d0,100(sp)
    if (!fp) {
    d71e:	                     ,-- bne.s d738 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d720:	                     |   move.l 124(sp),-(sp)
    d724:	                     |   pea 19277 <PutChar+0x189b>
    d72a:	                     |   jsr 16f3a <KPrintF>
    d730:	                     |   addq.l #8,sp
        return FALSE;
    d732:	                     |   clr.w d0
    d734:	,--------------------|-- bra.w da2e <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    d738:	|                    '-> move.w 1a85c <saveEncoding>,d0
    d73e:	|                        move.l d0,d0
    d740:	|                        move.b d0,1a85a <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    d746:	|                        move.w 1a85c <saveEncoding>,d0
    d74c:	|                        lsr.w #8,d0
    d74e:	|                        move.l d0,d0
    d750:	|                        move.b d0,1a85b <encode2>

    while (*checker) {
    d756:	|                 ,----- bra.s d7ba <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    d758:	|              ,--|----> move.l 100(sp),30(sp)
    d75e:	|              |  |      move.l 1a7ac <DOSBase>,d0
    d764:	|              |  |      movea.l d0,a6
    d766:	|              |  |      move.l 30(sp),d1
    d76a:	|              |  |      jsr -306(a6)
    d76e:	|              |  |      move.l d0,26(sp)
    d772:	|              |  |      move.l 26(sp),d1
    d776:	|              |  |      movea.l 116(sp),a0
    d77a:	|              |  |      move.b (a0),d0
    d77c:	|              |  |      ext.w d0
    d77e:	|              |  |      movea.w d0,a0
    d780:	|              |  |      cmpa.l d1,a0
    d782:	|              |  |  ,-- beq.s d7b6 <fileToStack+0xec>
            Close(fp);
    d784:	|              |  |  |   move.l 100(sp),22(sp)
    d78a:	|              |  |  |   move.l 1a7ac <DOSBase>,d0
    d790:	|              |  |  |   movea.l d0,a6
    d792:	|              |  |  |   move.l 22(sp),d1
    d796:	|              |  |  |   jsr -36(a6)
    d79a:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    d79e:	|              |  |  |   move.l 124(sp),-(sp)
    d7a2:	|              |  |  |   pea 19284 <PutChar+0x18a8>
    d7a8:	|              |  |  |   jsr 16f3a <KPrintF>
    d7ae:	|              |  |  |   addq.l #8,sp
            return FALSE;
    d7b0:	|              |  |  |   clr.w d0
    d7b2:	+--------------|--|--|-- bra.w da2e <fileToStack+0x364>
        }
        checker++;
    d7b6:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    d7ba:	|              |  '----> movea.l 116(sp),a0
    d7be:	|              |         move.b (a0),d0
    d7c0:	|              '-------- bne.s d758 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    d7c2:	|                        move.w 1a85c <saveEncoding>,d0
    d7c8:	|  ,-------------------- beq.s d83c <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    d7ca:	|  |                     move.l 100(sp),-(sp)
    d7ce:	|  |                     jsr da38 <readStringEncoded>
    d7d4:	|  |                     addq.l #4,sp
    d7d6:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    d7da:	|  |                     pea 192c5 <PutChar+0x18e9>
    d7e0:	|  |                     move.l 100(sp),-(sp)
    d7e4:	|  |                     jsr 1399a <strcmp>
    d7ea:	|  |                     addq.l #8,sp
    d7ec:	|  |                     tst.l d0
    d7ee:	|  |                 ,-- beq.s d822 <fileToStack+0x158>
            Close(fp);
    d7f0:	|  |                 |   move.l 100(sp),88(sp)
    d7f6:	|  |                 |   move.l 1a7ac <DOSBase>,d0
    d7fc:	|  |                 |   movea.l d0,a6
    d7fe:	|  |                 |   move.l 88(sp),d1
    d802:	|  |                 |   jsr -36(a6)
    d806:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    d80a:	|  |                 |   move.l 124(sp),-(sp)
    d80e:	|  |                 |   pea 192d4 <PutChar+0x18f8>
    d814:	|  |                 |   jsr 16f3a <KPrintF>
    d81a:	|  |                 |   addq.l #8,sp
            return FALSE;
    d81c:	|  |                 |   clr.w d0
    d81e:	+--|-----------------|-- bra.w da2e <fileToStack+0x364>
        }
        FreeVec(checker);
    d822:	|  |                 '-> move.l 96(sp),92(sp)
    d828:	|  |                     move.l 1a7a4 <SysBase>,d0
    d82e:	|  |                     movea.l d0,a6
    d830:	|  |                     movea.l 92(sp),a1
    d834:	|  |                     jsr -690(a6)
        checker = NULL;
    d838:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    d83c:	|  >-------------------> move.w 1a85c <saveEncoding>,d0
    d842:	|  |     ,-------------- beq.w d976 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    d846:	|  |     |               move.l 100(sp),76(sp)
    d84c:	|  |     |               move.l 1a7ac <DOSBase>,d0
    d852:	|  |     |               movea.l d0,a6
    d854:	|  |     |               move.l 76(sp),d1
    d858:	|  |     |               jsr -306(a6)
    d85c:	|  |     |               move.l d0,72(sp)
    d860:	|  |     |               move.l 72(sp),d0
    d864:	|  |     |               move.b 1a85a <encode1>,d1
    d86a:	|  |     |               ext.w d1
    d86c:	|  |     |               ext.l d1
    d86e:	|  |     |               move.l d0,d2
    d870:	|  |     |               eor.l d1,d2
    d872:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    d876:	|  |     |               moveq #-1,d0
    d878:	|  |     |               cmp.l 68(sp),d0
    d87c:	|  |  ,--|-------------- beq.w da0c <fileToStack+0x342>

            char i = (char) tmp;
    d880:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    d886:	|  |  |  |               move.b 67(sp),d0
    d88a:	|  |  |  |               ext.w d0
    d88c:	|  |  |  |               movea.w d0,a0
    d88e:	|  |  |  |               moveq #2,d2
    d890:	|  |  |  |               cmp.l a0,d2
    d892:	|  |  |  |     ,-------- beq.s d90e <fileToStack+0x244>
    d894:	|  |  |  |     |         moveq #2,d0
    d896:	|  |  |  |     |         cmp.l a0,d0
    d898:	|  |  |  |  ,--|-------- blt.w d944 <fileToStack+0x27a>
    d89c:	|  |  |  |  |  |         cmpa.w #0,a0
    d8a0:	|  |  |  |  |  |     ,-- beq.s d8ac <fileToStack+0x1e2>
    d8a2:	|  |  |  |  |  |     |   moveq #1,d2
    d8a4:	|  |  |  |  |  |     |   cmp.l a0,d2
    d8a6:	|  |  |  |  |  |  ,--|-- beq.s d8e8 <fileToStack+0x21e>
    d8a8:	|  |  |  |  +--|--|--|-- bra.w d944 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    d8ac:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    d8b0:	|  |  |  |  |  |  |      jsr da38 <readStringEncoded>
    d8b6:	|  |  |  |  |  |  |      addq.l #4,sp
    d8b8:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    d8bc:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    d8c0:	|  |  |  |  |  |  |      lea 14(sp),a0
    d8c4:	|  |  |  |  |  |  |      move.l a0,-(sp)
    d8c6:	|  |  |  |  |  |  |      jsr 14710 <makeTextVar>
    d8cc:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    d8ce:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    d8d4:	|  |  |  |  |  |  |      move.l 1a7a4 <SysBase>,d0
    d8da:	|  |  |  |  |  |  |      movea.l d0,a6
    d8dc:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    d8e0:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    d8e4:	|  |  |  |  |  |  |  ,-- bra.w d99c <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    d8e8:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    d8ec:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    d8f2:	|  |  |  |  |  |     |   addq.l #4,sp
    d8f4:	|  |  |  |  |  |     |   move.l d0,-(sp)
    d8f6:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    d8fa:	|  |  |  |  |  |     |   lea 18(sp),a0
    d8fe:	|  |  |  |  |  |     |   move.l a0,-(sp)
    d900:	|  |  |  |  |  |     |   jsr 14de0 <setVariable>
    d906:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    d90a:	|  |  |  |  |  |     +-- bra.w d99c <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    d90e:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    d914:	|  |  |  |  |        |   move.l 1a7ac <DOSBase>,d0
    d91a:	|  |  |  |  |        |   movea.l d0,a6
    d91c:	|  |  |  |  |        |   move.l 62(sp),d1
    d920:	|  |  |  |  |        |   jsr -306(a6)
    d924:	|  |  |  |  |        |   move.l d0,58(sp)
    d928:	|  |  |  |  |        |   move.l 58(sp),d0
    d92c:	|  |  |  |  |        |   move.l d0,-(sp)
    d92e:	|  |  |  |  |        |   pea 1 <_start+0x1>
    d932:	|  |  |  |  |        |   lea 18(sp),a0
    d936:	|  |  |  |  |        |   move.l a0,-(sp)
    d938:	|  |  |  |  |        |   jsr 14de0 <setVariable>
    d93e:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    d942:	|  |  |  |  |        +-- bra.s d99c <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    d944:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    d948:	|  |  |  |           |   pea 19356 <PutChar+0x197a>
    d94e:	|  |  |  |           |   jsr 16f3a <KPrintF>
    d954:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    d956:	|  |  |  |           |   move.l 100(sp),46(sp)
    d95c:	|  |  |  |           |   move.l 1a7ac <DOSBase>,d0
    d962:	|  |  |  |           |   movea.l d0,a6
    d964:	|  |  |  |           |   move.l 46(sp),d1
    d968:	|  |  |  |           |   jsr -36(a6)
    d96c:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    d970:	|  |  |  |           |   clr.w d0
    d972:	+--|--|--|-----------|-- bra.w da2e <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    d976:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    d97a:	|  |  |              |   jsr dafe <readTextPlain>
    d980:	|  |  |              |   addq.l #4,sp
    d982:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    d986:	|  |  |        ,-----|-- beq.w da10 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    d98a:	|  |  |        |     |   move.l 80(sp),-(sp)
    d98e:	|  |  |        |     |   lea 14(sp),a0
    d992:	|  |  |        |     |   move.l a0,-(sp)
    d994:	|  |  |        |     |   jsr 14710 <makeTextVar>
    d99a:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    d99c:	|  |  |        |     '-> movea.l 128(sp),a0
    d9a0:	|  |  |        |         move.l (a0),d0
    d9a2:	|  |  |        |  ,----- bne.s d9d2 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    d9a4:	|  |  |        |  |      move.l 128(sp),d0
    d9a8:	|  |  |        |  |      move.l d0,-(sp)
    d9aa:	|  |  |        |  |      lea 14(sp),a0
    d9ae:	|  |  |        |  |      move.l a0,-(sp)
    d9b0:	|  |  |        |  |      jsr 13db0 <addVarToStackQuick>
    d9b6:	|  |  |        |  |      addq.l #8,sp
    d9b8:	|  |  |        |  |      tst.w d0
    d9ba:	|  |  |        |  |  ,-- bne.s d9c0 <fileToStack+0x2f6>
    d9bc:	|  |  |        |  |  |   clr.w d0
    d9be:	+--|--|--------|--|--|-- bra.s da2e <fileToStack+0x364>
            sH->last = sH->first;
    d9c0:	|  |  |        |  |  '-> movea.l 128(sp),a0
    d9c4:	|  |  |        |  |      move.l (a0),d0
    d9c6:	|  |  |        |  |      movea.l 128(sp),a0
    d9ca:	|  |  |        |  |      move.l d0,4(a0)
    d9ce:	|  +--|--------|--|----- bra.w d83c <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    d9d2:	|  |  |        |  '----> movea.l 128(sp),a0
    d9d6:	|  |  |        |         move.l 4(a0),d0
    d9da:	|  |  |        |         addq.l #8,d0
    d9dc:	|  |  |        |         move.l d0,-(sp)
    d9de:	|  |  |        |         lea 14(sp),a0
    d9e2:	|  |  |        |         move.l a0,-(sp)
    d9e4:	|  |  |        |         jsr 13db0 <addVarToStackQuick>
    d9ea:	|  |  |        |         addq.l #8,sp
    d9ec:	|  |  |        |         tst.w d0
    d9ee:	|  |  |        |     ,-- bne.s d9f4 <fileToStack+0x32a>
    d9f0:	|  |  |        |     |   clr.w d0
    d9f2:	+--|--|--------|-----|-- bra.s da2e <fileToStack+0x364>
            sH->last = sH->last->next;
    d9f4:	|  |  |        |     '-> movea.l 128(sp),a0
    d9f8:	|  |  |        |         movea.l 4(a0),a0
    d9fc:	|  |  |        |         move.l 8(a0),d0
    da00:	|  |  |        |         movea.l 128(sp),a0
    da04:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    da08:	|  '--|--------|-------- bra.w d83c <fileToStack+0x172>
            if (tmp == -1) break;
    da0c:	|     '--------|-------> nop
    da0e:	|              |     ,-- bra.s da12 <fileToStack+0x348>
            if (!line) break;
    da10:	|              '-----|-> nop
        }
    }
    Close(fp);
    da12:	|                    '-> move.l 100(sp),38(sp)
    da18:	|                        move.l 1a7ac <DOSBase>,d0
    da1e:	|                        movea.l d0,a6
    da20:	|                        move.l 38(sp),d1
    da24:	|                        jsr -36(a6)
    da28:	|                        move.l d0,34(sp)
    return TRUE;
    da2c:	|                        moveq #1,d0
}
    da2e:	'----------------------> move.l (sp)+,d2
    da30:	                         movea.l (sp)+,a6
    da32:	                         lea 112(sp),sp
    da36:	                         rts

0000da38 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    da38:	          lea -32(sp),sp
    da3c:	          move.l a6,-(sp)
    da3e:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    da40:	          move.l 44(sp),-(sp)
    da44:	          jsr 6bc <get2bytes>
    da4a:	          addq.l #4,sp
    da4c:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    da50:	          move.l 32(sp),d0
    da54:	          addq.l #1,d0
    da56:	          move.l d0,28(sp)
    da5a:	          clr.l 24(sp)
    da5e:	          move.l 1a7a4 <SysBase>,d0
    da64:	          movea.l d0,a6
    da66:	          move.l 28(sp),d0
    da6a:	          move.l 24(sp),d1
    da6e:	          jsr -684(a6)
    da72:	          move.l d0,20(sp)
    da76:	          move.l 20(sp),d0
    da7a:	          move.l d0,16(sp)
    if (!s) return NULL;
    da7e:	      ,-- bne.s da84 <readStringEncoded+0x4c>
    da80:	      |   moveq #0,d0
    da82:	,-----|-- bra.s daf4 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    da84:	|     '-> clr.l 36(sp)
    da88:	|     ,-- bra.s dada <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    da8a:	|  ,--|-> move.l 44(sp),12(sp)
    da90:	|  |  |   move.l 1a7ac <DOSBase>,d0
    da96:	|  |  |   movea.l d0,a6
    da98:	|  |  |   move.l 12(sp),d1
    da9c:	|  |  |   jsr -306(a6)
    daa0:	|  |  |   move.l d0,8(sp)
    daa4:	|  |  |   move.l 8(sp),d0
    daa8:	|  |  |   move.l d0,d1
    daaa:	|  |  |   move.b 1a85a <encode1>,d2
    dab0:	|  |  |   move.l 36(sp),d0
    dab4:	|  |  |   movea.l 16(sp),a0
    dab8:	|  |  |   adda.l d0,a0
    daba:	|  |  |   move.b d1,d0
    dabc:	|  |  |   eor.b d2,d0
    dabe:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    dac0:	|  |  |   move.b 1a85a <encode1>,d0
    dac6:	|  |  |   move.b d0,d1
    dac8:	|  |  |   move.b 1a85b <encode2>,d0
    dace:	|  |  |   add.b d1,d0
    dad0:	|  |  |   move.b d0,1a85a <encode1>
    for (a = 0; a < len; a++) {
    dad6:	|  |  |   addq.l #1,36(sp)
    dada:	|  |  '-> move.l 36(sp),d0
    dade:	|  |      cmp.l 32(sp),d0
    dae2:	|  '----- blt.s da8a <readStringEncoded+0x52>
    }
    s[len] = 0;
    dae4:	|         move.l 32(sp),d0
    dae8:	|         movea.l 16(sp),a0
    daec:	|         adda.l d0,a0
    daee:	|         clr.b (a0)
    return s;
    daf0:	|         move.l 16(sp),d0
}
    daf4:	'-------> move.l (sp)+,d2
    daf6:	          movea.l (sp)+,a6
    daf8:	          lea 32(sp),sp
    dafc:	          rts

0000dafe <readTextPlain>:

char *readTextPlain(BPTR fp) {
    dafe:	             lea -104(sp),sp
    db02:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    db06:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    db0a:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    db10:	             move.l 124(sp),106(sp)
    db16:	             clr.l 102(sp)
    db1a:	             clr.l 98(sp)
    db1e:	             move.l 1a7ac <DOSBase>,d0
    db24:	             movea.l d0,a6
    db26:	             move.l 106(sp),d1
    db2a:	             move.l 102(sp),d2
    db2e:	             move.l 98(sp),d3
    db32:	             jsr -66(a6)
    db36:	             move.l d0,94(sp)
    db3a:	             move.l 94(sp),d0
    db3e:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    db42:	   ,-------- bra.s db86 <readTextPlain+0x88>
        tmp = FGetC(fp);
    db44:	,--|-------> move.l 124(sp),22(sp)
    db4a:	|  |         move.l 1a7ac <DOSBase>,d0
    db50:	|  |         movea.l d0,a6
    db52:	|  |         move.l 22(sp),d1
    db56:	|  |         jsr -306(a6)
    db5a:	|  |         move.l d0,18(sp)
    db5e:	|  |         move.l 18(sp),d0
    db62:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    db66:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    db6c:	|  |         cmpi.b #10,17(sp)
    db72:	|  |  ,----- beq.s db7c <readTextPlain+0x7e>
    db74:	|  |  |      moveq #-1,d0
    db76:	|  |  |      cmp.l 110(sp),d0
    db7a:	|  |  |  ,-- bne.s db82 <readTextPlain+0x84>
            keepGoing = FALSE;
    db7c:	|  |  '--|-> clr.w 114(sp)
    db80:	|  +-----|-- bra.s db86 <readTextPlain+0x88>
        } else {
            stringSize++;
    db82:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    db86:	|  '-------> tst.w 114(sp)
    db8a:	'----------- bne.s db44 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    db8c:	             tst.l 116(sp)
    db90:	         ,-- bne.s dba0 <readTextPlain+0xa2>
    db92:	         |   moveq #-1,d0
    db94:	         |   cmp.l 110(sp),d0
    db98:	         +-- bne.s dba0 <readTextPlain+0xa2>
        return NULL;
    db9a:	         |   moveq #0,d0
    db9c:	      ,--|-- bra.w dc86 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    dba0:	      |  '-> move.l 124(sp),86(sp)
    dba6:	      |      move.l 90(sp),82(sp)
    dbac:	      |      moveq #-1,d0
    dbae:	      |      move.l d0,78(sp)
    dbb2:	      |      move.l 1a7ac <DOSBase>,d0
    dbb8:	      |      movea.l d0,a6
    dbba:	      |      move.l 86(sp),d1
    dbbe:	      |      move.l 82(sp),d2
    dbc2:	      |      move.l 78(sp),d3
    dbc6:	      |      jsr -66(a6)
    dbca:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    dbce:	      |      move.l 116(sp),d0
    dbd2:	      |      addq.l #1,d0
    dbd4:	      |      move.l d0,70(sp)
    dbd8:	      |      clr.l 66(sp)
    dbdc:	      |      move.l 1a7a4 <SysBase>,d0
    dbe2:	      |      movea.l d0,a6
    dbe4:	      |      move.l 70(sp),d0
    dbe8:	      |      move.l 66(sp),d1
    dbec:	      |      jsr -684(a6)
    dbf0:	      |      move.l d0,62(sp)
    dbf4:	      |      move.l 62(sp),d0
    dbf8:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    dbfc:	      |  ,-- bne.s dc04 <readTextPlain+0x106>
    dbfe:	      |  |   moveq #0,d0
    dc00:	      +--|-- bra.w dc86 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    dc04:	      |  '-> move.l 124(sp),54(sp)
    dc0a:	      |      move.l 58(sp),50(sp)
    dc10:	      |      moveq #1,d0
    dc12:	      |      move.l d0,46(sp)
    dc16:	      |      move.l 116(sp),42(sp)
    dc1c:	      |      move.l 1a7ac <DOSBase>,d0
    dc22:	      |      movea.l d0,a6
    dc24:	      |      move.l 54(sp),d1
    dc28:	      |      move.l 50(sp),d2
    dc2c:	      |      move.l 46(sp),d3
    dc30:	      |      move.l 42(sp),d4
    dc34:	      |      jsr -324(a6)
    dc38:	      |      move.l d0,38(sp)
    dc3c:	      |      move.l 38(sp),d0
    dc40:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    dc44:	      |      move.l 34(sp),d0
    dc48:	      |      cmp.l 116(sp),d0
    dc4c:	      |  ,-- beq.s dc5c <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    dc4e:	      |  |   pea 1938b <PutChar+0x19af>
    dc54:	      |  |   jsr 16f3a <KPrintF>
    dc5a:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    dc5c:	      |  '-> move.l 124(sp),30(sp)
    dc62:	      |      move.l 1a7ac <DOSBase>,d0
    dc68:	      |      movea.l d0,a6
    dc6a:	      |      move.l 30(sp),d1
    dc6e:	      |      jsr -306(a6)
    dc72:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    dc76:	      |      move.l 116(sp),d0
    dc7a:	      |      movea.l 58(sp),a0
    dc7e:	      |      adda.l d0,a0
    dc80:	      |      clr.b (a0)
    }

    return reply;
    dc82:	      |      move.l 58(sp),d0
}
    dc86:	      '----> movem.l (sp)+,d2-d4/a6
    dc8a:	             lea 104(sp),sp
    dc8e:	             rts

0000dc90 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    dc90:	                      lea -144(sp),sp
    dc94:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    dc98:	                      move.l 160(sp),148(sp)
    dc9e:	                      move.l #1006,144(sp)
    dca6:	                      move.l 1a7ac <DOSBase>,d0
    dcac:	                      movea.l d0,a6
    dcae:	                      move.l 148(sp),d1
    dcb2:	                      move.l 144(sp),d2
    dcb6:	                      jsr -30(a6)
    dcba:	                      move.l d0,140(sp)
    dcbe:	                      move.l 140(sp),d0
    dcc2:	                      move.l d0,136(sp)

    if (!fp) {
    dcc6:	                  ,-- bne.s dce0 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    dcc8:	                  |   move.l 160(sp),-(sp)
    dccc:	                  |   pea 193ac <PutChar+0x19d0>
    dcd2:	                  |   jsr 16f3a <KPrintF>
    dcd8:	                  |   addq.l #8,sp
        return FALSE;
    dcda:	                  |   clr.w d0
    dcdc:	,-----------------|-- bra.w df9c <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    dce0:	|                 '-> movea.l 164(sp),a0
    dce4:	|                     movea.l 4(a0),a0
    dce8:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    dcec:	|                     move.w 1a85c <saveEncoding>,d0
    dcf2:	|                     move.l d0,d0
    dcf4:	|                     move.b d0,1a85a <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    dcfa:	|                     move.w 1a85c <saveEncoding>,d0
    dd00:	|                     lsr.w #8,d0
    dd02:	|                     move.l d0,d0
    dd04:	|                     move.b d0,1a85b <encode2>

    if (saveEncoding) {
    dd0a:	|                     move.w 1a85c <saveEncoding>,d0
    dd10:	|                 ,-- beq.s dd62 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    dd12:	|                 |   move.l 136(sp),116(sp)
    dd18:	|                 |   move.l #102982,112(sp)
    dd20:	|                 |   moveq #99,d0
    dd22:	|                 |   not.b d0
    dd24:	|                 |   add.l sp,d0
    dd26:	|                 |   addi.l #-144,d0
    dd2c:	|                 |   move.l d0,108(sp)
    dd30:	|                 |   move.l 1a7ac <DOSBase>,d0
    dd36:	|                 |   movea.l d0,a6
    dd38:	|                 |   move.l 116(sp),d1
    dd3c:	|                 |   move.l 112(sp),d2
    dd40:	|                 |   move.l 108(sp),d3
    dd44:	|                 |   jsr -354(a6)
    dd48:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    dd4c:	|                 |   move.l 136(sp),-(sp)
    dd50:	|                 |   pea 192c5 <PutChar+0x18e9>
    dd56:	|                 |   jsr dfa6 <writeStringEncoded>
    dd5c:	|                 |   addq.l #8,sp
    dd5e:	|  ,--------------|-- bra.w df74 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    dd62:	|  |              '-> move.l 136(sp),132(sp)
    dd68:	|  |                  move.l #103008,128(sp)
    dd70:	|  |                  moveq #99,d1
    dd72:	|  |                  not.b d1
    dd74:	|  |                  add.l sp,d1
    dd76:	|  |                  addi.l #-144,d1
    dd7c:	|  |                  move.l d1,124(sp)
    dd80:	|  |                  move.l 1a7ac <DOSBase>,d0
    dd86:	|  |                  movea.l d0,a6
    dd88:	|  |                  move.l 132(sp),d1
    dd8c:	|  |                  move.l 128(sp),d2
    dd90:	|  |                  move.l 124(sp),d3
    dd94:	|  |                  jsr -354(a6)
    dd98:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    dd9c:	|  +----------------- bra.w df74 <stackToFile+0x2e4>
        if (saveEncoding) {
    dda0:	|  |  ,-------------> move.w 1a85c <saveEncoding>,d0
    dda6:	|  |  |     ,-------- beq.w def8 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    ddaa:	|  |  |     |         movea.l 152(sp),a0
    ddae:	|  |  |     |         move.l (a0),d0
    ddb0:	|  |  |     |         moveq #1,d1
    ddb2:	|  |  |     |         cmp.l d0,d1
    ddb4:	|  |  |     |     ,-- beq.s de04 <stackToFile+0x174>
    ddb6:	|  |  |     |     |   moveq #3,d1
    ddb8:	|  |  |     |     |   cmp.l d0,d1
    ddba:	|  |  |     |  ,--|-- bne.w dec6 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    ddbe:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    ddc4:	|  |  |     |  |  |   move.b 1a85a <encode1>,d0
    ddca:	|  |  |     |  |  |   ext.w d0
    ddcc:	|  |  |     |  |  |   movea.w d0,a0
    ddce:	|  |  |     |  |  |   move.l a0,72(sp)
    ddd2:	|  |  |     |  |  |   move.l 1a7ac <DOSBase>,d0
    ddd8:	|  |  |     |  |  |   movea.l d0,a6
    ddda:	|  |  |     |  |  |   move.l 76(sp),d1
    ddde:	|  |  |     |  |  |   move.l 72(sp),d2
    dde2:	|  |  |     |  |  |   jsr -312(a6)
    dde6:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    ddea:	|  |  |     |  |  |   movea.l 152(sp),a0
    ddee:	|  |  |     |  |  |   move.l 4(a0),d0
    ddf2:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    ddf6:	|  |  |     |  |  |   move.l d0,-(sp)
    ddf8:	|  |  |     |  |  |   jsr dfa6 <writeStringEncoded>
    ddfe:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    de00:	|  |  |  ,--|--|--|-- bra.w df6a <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    de04:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    de08:	|  |  |  |  |  |      move.l 4(a0),d0
    de0c:	|  |  |  |  |  |  ,-- bmi.s de7c <stackToFile+0x1ec>
    de0e:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    de12:	|  |  |  |  |  |  |   move.l 4(a0),d0
    de16:	|  |  |  |  |  |  |   cmpi.l #255,d0
    de1c:	|  |  |  |  |  |  +-- bgt.s de7c <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    de1e:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    de24:	|  |  |  |  |  |  |   move.b 1a85a <encode1>,d0
    de2a:	|  |  |  |  |  |  |   eori.b #2,d0
    de2e:	|  |  |  |  |  |  |   ext.w d0
    de30:	|  |  |  |  |  |  |   movea.w d0,a0
    de32:	|  |  |  |  |  |  |   move.l a0,60(sp)
    de36:	|  |  |  |  |  |  |   move.l 1a7ac <DOSBase>,d0
    de3c:	|  |  |  |  |  |  |   movea.l d0,a6
    de3e:	|  |  |  |  |  |  |   move.l 64(sp),d1
    de42:	|  |  |  |  |  |  |   move.l 60(sp),d2
    de46:	|  |  |  |  |  |  |   jsr -312(a6)
    de4a:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    de4e:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    de54:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    de58:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    de5e:	|  |  |  |  |  |  |   move.l 1a7ac <DOSBase>,d0
    de64:	|  |  |  |  |  |  |   movea.l d0,a6
    de66:	|  |  |  |  |  |  |   move.l 52(sp),d1
    de6a:	|  |  |  |  |  |  |   move.l 48(sp),d2
    de6e:	|  |  |  |  |  |  |   jsr -312(a6)
    de72:	|  |  |  |  |  |  |   move.l d0,44(sp)
    de76:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    de78:	|  |  |  +--|--|--|-- bra.w df6a <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    de7c:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    de82:	|  |  |  |  |  |      move.b 1a85a <encode1>,d0
    de88:	|  |  |  |  |  |      eori.b #1,d0
    de8c:	|  |  |  |  |  |      ext.w d0
    de8e:	|  |  |  |  |  |      movea.w d0,a0
    de90:	|  |  |  |  |  |      move.l a0,36(sp)
    de94:	|  |  |  |  |  |      move.l 1a7ac <DOSBase>,d0
    de9a:	|  |  |  |  |  |      movea.l d0,a6
    de9c:	|  |  |  |  |  |      move.l 40(sp),d1
    dea0:	|  |  |  |  |  |      move.l 36(sp),d2
    dea4:	|  |  |  |  |  |      jsr -312(a6)
    dea8:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    deac:	|  |  |  |  |  |      movea.l 152(sp),a0
    deb0:	|  |  |  |  |  |      move.l 4(a0),d0
    deb4:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    deb8:	|  |  |  |  |  |      move.l d0,-(sp)
    deba:	|  |  |  |  |  |      jsr 958 <put4bytes>
    dec0:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    dec2:	|  |  |  +--|--|----- bra.w df6a <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    dec6:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    deca:	|  |  |  |  |         pea 193be <PutChar+0x19e2>
    ded0:	|  |  |  |  |         jsr 16f3a <KPrintF>
    ded6:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    ded8:	|  |  |  |  |         move.l 136(sp),28(sp)
    dede:	|  |  |  |  |         move.l 1a7ac <DOSBase>,d0
    dee4:	|  |  |  |  |         movea.l d0,a6
    dee6:	|  |  |  |  |         move.l 28(sp),d1
    deea:	|  |  |  |  |         jsr -36(a6)
    deee:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    def2:	|  |  |  |  |         clr.w d0
    def4:	+--|--|--|--|-------- bra.w df9c <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    def8:	|  |  |  |  '-------> move.l 152(sp),d0
    defc:	|  |  |  |            move.l d0,-(sp)
    defe:	|  |  |  |            jsr 14ac4 <getTextFromAnyVar>
    df04:	|  |  |  |            addq.l #4,sp
    df06:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    df0a:	|  |  |  |     ,----- beq.s df7e <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    df0c:	|  |  |  |     |      movea.l 100(sp),a0
    df10:	|  |  |  |     |      move.b (a0),d0
    df12:	|  |  |  |     |      ext.w d0
    df14:	|  |  |  |     |      movea.w d0,a0
    df16:	|  |  |  |     |      move.l a0,12(sp)
    df1a:	|  |  |  |     |      move.l 136(sp),96(sp)
    df20:	|  |  |  |     |      move.l #103450,92(sp)
    df28:	|  |  |  |     |      moveq #99,d0
    df2a:	|  |  |  |     |      not.b d0
    df2c:	|  |  |  |     |      add.l sp,d0
    df2e:	|  |  |  |     |      addi.l #-144,d0
    df34:	|  |  |  |     |      move.l d0,88(sp)
    df38:	|  |  |  |     |      move.l 1a7ac <DOSBase>,d0
    df3e:	|  |  |  |     |      movea.l d0,a6
    df40:	|  |  |  |     |      move.l 96(sp),d1
    df44:	|  |  |  |     |      move.l 92(sp),d2
    df48:	|  |  |  |     |      move.l 88(sp),d3
    df4c:	|  |  |  |     |      jsr -354(a6)
    df50:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    df54:	|  |  |  |     |      move.l 100(sp),80(sp)
    df5a:	|  |  |  |     |      move.l 1a7a4 <SysBase>,d0
    df60:	|  |  |  |     |      movea.l d0,a6
    df62:	|  |  |  |     |      movea.l 80(sp),a1
    df66:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    df6a:	|  |  |  '-----|----> movea.l 152(sp),a0
    df6e:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    df74:	|  '--|--------|----> tst.l 152(sp)
    df78:	|     '--------|----- bne.w dda0 <stackToFile+0x110>
    df7c:	|              |  ,-- bra.s df80 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    df7e:	|              '--|-> nop
    }
    Close(fp);
    df80:	|                 '-> move.l 136(sp),20(sp)
    df86:	|                     move.l 1a7ac <DOSBase>,d0
    df8c:	|                     movea.l d0,a6
    df8e:	|                     move.l 20(sp),d1
    df92:	|                     jsr -36(a6)
    df96:	|                     move.l d0,16(sp)
    return TRUE;
    df9a:	|                     moveq #1,d0
}
    df9c:	'-------------------> movem.l (sp)+,d2-d3/a6
    dfa0:	                      lea 144(sp),sp
    dfa4:	                      rts

0000dfa6 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    dfa6:	       lea -20(sp),sp
    dfaa:	       move.l a6,-(sp)
    dfac:	       move.l d2,-(sp)
	int a, len = strlen (s);
    dfae:	       move.l 32(sp),-(sp)
    dfb2:	       jsr 139da <strlen>
    dfb8:	       addq.l #4,sp
    dfba:	       move.l d0,20(sp)

	put2bytes (len, fp);
    dfbe:	       move.l 36(sp),-(sp)
    dfc2:	       move.l 24(sp),-(sp)
    dfc6:	       jsr 8d0 <put2bytes>
    dfcc:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    dfce:	       clr.l 24(sp)
    dfd2:	   ,-- bra.s e028 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    dfd4:	,--|-> move.l 36(sp),16(sp)
    dfda:	|  |   move.l 24(sp),d0
    dfde:	|  |   movea.l 32(sp),a0
    dfe2:	|  |   adda.l d0,a0
    dfe4:	|  |   move.b (a0),d1
    dfe6:	|  |   move.b 1a85a <encode1>,d0
    dfec:	|  |   eor.b d1,d0
    dfee:	|  |   ext.w d0
    dff0:	|  |   movea.w d0,a0
    dff2:	|  |   move.l a0,12(sp)
    dff6:	|  |   move.l 1a7ac <DOSBase>,d0
    dffc:	|  |   movea.l d0,a6
    dffe:	|  |   move.l 16(sp),d1
    e002:	|  |   move.l 12(sp),d2
    e006:	|  |   jsr -312(a6)
    e00a:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e00e:	|  |   move.b 1a85a <encode1>,d0
    e014:	|  |   move.b d0,d1
    e016:	|  |   move.b 1a85b <encode2>,d0
    e01c:	|  |   add.b d1,d0
    e01e:	|  |   move.b d0,1a85a <encode1>
	for (a = 0; a < len; a ++) {
    e024:	|  |   addq.l #1,24(sp)
    e028:	|  '-> move.l 24(sp),d0
    e02c:	|      cmp.l 20(sp),d0
    e030:	'----- blt.s dfd4 <writeStringEncoded+0x2e>
	}
}
    e032:	       nop
    e034:	       nop
    e036:	       move.l (sp)+,d2
    e038:	       movea.l (sp)+,a6
    e03a:	       lea 20(sp),sp
    e03e:	       rts

0000e040 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e040:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e042:	                   tst.l 8(sp)
    e046:	               ,-- bne.s e04c <failSecurityCheck+0xc>
    e048:	               |   moveq #1,d0
    e04a:	,--------------|-- bra.s e0ca <failSecurityCheck+0x8a>

	int a = 0;
    e04c:	|              '-> clr.l (sp)

	while (fn[a]) {
    e04e:	|     ,----------- bra.s e0bc <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e050:	|  ,--|----------> move.l (sp),d0
    e052:	|  |  |            movea.l 8(sp),a0
    e056:	|  |  |            adda.l d0,a0
    e058:	|  |  |            move.b (a0),d0
    e05a:	|  |  |            ext.w d0
    e05c:	|  |  |            movea.w d0,a0
    e05e:	|  |  |            moveq #124,d0
    e060:	|  |  |            cmp.l a0,d0
    e062:	|  |  |     ,----- beq.s e0a4 <failSecurityCheck+0x64>
    e064:	|  |  |     |      moveq #124,d1
    e066:	|  |  |     |      cmp.l a0,d1
    e068:	|  |  |  ,--|----- blt.s e0ba <failSecurityCheck+0x7a>
    e06a:	|  |  |  |  |      moveq #92,d0
    e06c:	|  |  |  |  |      cmp.l a0,d0
    e06e:	|  |  |  |  +----- beq.s e0a4 <failSecurityCheck+0x64>
    e070:	|  |  |  |  |      moveq #92,d1
    e072:	|  |  |  |  |      cmp.l a0,d1
    e074:	|  |  |  +--|----- blt.s e0ba <failSecurityCheck+0x7a>
    e076:	|  |  |  |  |      moveq #60,d0
    e078:	|  |  |  |  |      cmp.l a0,d0
    e07a:	|  |  |  |  |  ,-- blt.s e09a <failSecurityCheck+0x5a>
    e07c:	|  |  |  |  |  |   moveq #34,d1
    e07e:	|  |  |  |  |  |   cmp.l a0,d1
    e080:	|  |  |  +--|--|-- bgt.s e0ba <failSecurityCheck+0x7a>
    e082:	|  |  |  |  |  |   moveq #-34,d1
    e084:	|  |  |  |  |  |   add.l a0,d1
    e086:	|  |  |  |  |  |   move.l #83894529,d0
    e08c:	|  |  |  |  |  |   lsr.l d1,d0
    e08e:	|  |  |  |  |  |   moveq #1,d1
    e090:	|  |  |  |  |  |   and.l d1,d0
    e092:	|  |  |  |  |  |   sne d0
    e094:	|  |  |  |  |  |   neg.b d0
    e096:	|  |  |  |  +--|-- bne.s e0a4 <failSecurityCheck+0x64>
    e098:	|  |  |  +--|--|-- bra.s e0ba <failSecurityCheck+0x7a>
    e09a:	|  |  |  |  |  '-> lea -62(a0),a0
    e09e:	|  |  |  |  |      moveq #1,d0
    e0a0:	|  |  |  |  |      cmp.l a0,d0
    e0a2:	|  |  |  +--|----- bcs.s e0ba <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e0a4:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e0a8:	|  |  |  |         pea 1941e <PutChar+0x1a42>
    e0ae:	|  |  |  |         jsr 16f3a <KPrintF>
    e0b4:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e0b6:	|  |  |  |         moveq #1,d0
    e0b8:	+--|--|--|-------- bra.s e0ca <failSecurityCheck+0x8a>
		}
		a++;
    e0ba:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e0bc:	|  |  '----------> move.l (sp),d0
    e0be:	|  |               movea.l 8(sp),a0
    e0c2:	|  |               adda.l d0,a0
    e0c4:	|  |               move.b (a0),d0
    e0c6:	|  '-------------- bne.s e050 <failSecurityCheck+0x10>
	}
	return FALSE;
    e0c8:	|                  clr.w d0
}
    e0ca:	'----------------> addq.l #4,sp
    e0cc:	                   rts

0000e0ce <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e0ce:	             lea -24(sp),sp
    e0d2:	             move.l a6,-(sp)
    e0d4:	             move.l 40(sp),d0
    e0d8:	             move.w d0,d0
    e0da:	             move.w d0,6(sp)
	int fileNum = -1;
    e0de:	             moveq #-1,d0
    e0e0:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e0e4:	             jsr 5eb2 <killSpeechTimers>

	switch (numParams) {
    e0ea:	             moveq #2,d0
    e0ec:	             cmp.l 32(sp),d0
    e0f0:	      ,----- beq.s e134 <sayCore+0x66>
    e0f2:	      |      moveq #3,d0
    e0f4:	      |      cmp.l 32(sp),d0
    e0f8:	,-----|----- bne.w e216 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e0fc:	|     |      movea.l 36(sp),a0
    e100:	|     |      move.l 24(a0),d0
    e104:	|     |      move.l d0,-(sp)
    e106:	|     |      pea 5 <_start+0x5>
    e10a:	|     |      lea 20(sp),a0
    e10e:	|     |      move.l a0,-(sp)
    e110:	|     |      jsr 144ee <getValueType>
    e116:	|     |      lea 12(sp),sp
    e11a:	|     |      tst.w d0
    e11c:	|     |  ,-- bne.s e124 <sayCore+0x56>
    e11e:	|     |  |   moveq #1,d0
    e120:	|  ,--|--|-- bra.w e226 <sayCore+0x158>
			trimStack (&fun -> stack);
    e124:	|  |  |  '-> moveq #24,d0
    e126:	|  |  |      add.l 36(sp),d0
    e12a:	|  |  |      move.l d0,-(sp)
    e12c:	|  |  |      jsr 14e72 <trimStack>
    e132:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e134:	|  |  '----> movea.l 36(sp),a0
    e138:	|  |         move.l 24(a0),d0
    e13c:	|  |         move.l d0,-(sp)
    e13e:	|  |         jsr 14ac4 <getTextFromAnyVar>
    e144:	|  |         addq.l #4,sp
    e146:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e14a:	|  |     ,-- bne.s e152 <sayCore+0x84>
    e14c:	|  |     |   moveq #1,d0
    e14e:	|  +-----|-- bra.w e226 <sayCore+0x158>
			trimStack (&fun -> stack);
    e152:	|  |     '-> moveq #24,d0
    e154:	|  |         add.l 36(sp),d0
    e158:	|  |         move.l d0,-(sp)
    e15a:	|  |         jsr 14e72 <trimStack>
    e160:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e162:	|  |         movea.l 36(sp),a0
    e166:	|  |         move.l 24(a0),d0
    e16a:	|  |         move.l d0,-(sp)
    e16c:	|  |         pea 7 <_start+0x7>
    e170:	|  |         lea 16(sp),a0
    e174:	|  |         move.l a0,-(sp)
    e176:	|  |         jsr 144ee <getValueType>
    e17c:	|  |         lea 12(sp),sp
    e180:	|  |         tst.w d0
    e182:	|  |     ,-- bne.s e18a <sayCore+0xbc>
    e184:	|  |     |   moveq #1,d0
    e186:	|  +-----|-- bra.w e226 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e18a:	|  |     '-> movea.l 36(sp),a0
    e18e:	|  |         move.l 24(a0),d0
    e192:	|  |         move.l d0,-(sp)
    e194:	|  |         pea 7 <_start+0x7>
    e198:	|  |         lea 16(sp),a0
    e19c:	|  |         move.l a0,-(sp)
    e19e:	|  |         jsr 144ee <getValueType>
    e1a4:	|  |         lea 12(sp),sp
    e1a8:	|  |         tst.w d0
    e1aa:	|  |     ,-- bne.s e1b0 <sayCore+0xe2>
    e1ac:	|  |     |   moveq #1,d0
    e1ae:	|  +-----|-- bra.s e226 <sayCore+0x158>
			trimStack (&fun -> stack);
    e1b0:	|  |     '-> moveq #24,d0
    e1b2:	|  |         add.l 36(sp),d0
    e1b6:	|  |         move.l d0,-(sp)
    e1b8:	|  |         jsr 14e72 <trimStack>
    e1be:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e1c0:	|  |         movea.w 6(sp),a0
    e1c4:	|  |         move.l 12(sp),d1
    e1c8:	|  |         move.l 8(sp),d0
    e1cc:	|  |         move.l a0,-(sp)
    e1ce:	|  |         move.l d1,-(sp)
    e1d0:	|  |         move.l d0,-(sp)
    e1d2:	|  |         move.l 36(sp),-(sp)
    e1d6:	|  |         jsr 7e72 <wrapSpeech>
    e1dc:	|  |         lea 16(sp),sp
    e1e0:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e1e4:	|  |         movea.l 36(sp),a0
    e1e8:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e1ee:	|  |         movea.l 36(sp),a0
    e1f2:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e1f8:	|  |         move.l 24(sp),16(sp)
    e1fe:	|  |         move.l 1a7a4 <SysBase>,d0
    e204:	|  |         movea.l d0,a6
    e206:	|  |         movea.l 16(sp),a1
    e20a:	|  |         jsr -690(a6)
			newText = NULL;
    e20e:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e212:	|  |         moveq #0,d0
    e214:	|  +-------- bra.s e226 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e216:	'--|-------> pea 194a4 <PutChar+0x1ac8>
    e21c:	   |         jsr 16f3a <KPrintF>
    e222:	   |         addq.l #4,sp
	return BR_ERROR;
    e224:	   |         moveq #1,d0
}
    e226:	   '-------> movea.l (sp)+,a6
    e228:	             lea 24(sp),sp
    e22c:	             rts

0000e22e <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e22e:	pea 1 <_start+0x1>
    e232:	move.l 12(sp),-(sp)
    e236:	move.l 12(sp),-(sp)
    e23a:	jsr e0ce <sayCore>
    e240:	lea 12(sp),sp
}
    e244:	rts

0000e246 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e246:	clr.l -(sp)
    e248:	move.l 12(sp),-(sp)
    e24c:	move.l 12(sp),-(sp)
    e250:	jsr e0ce <sayCore>
    e256:	lea 12(sp),sp
}
    e25a:	rts

0000e25c <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e25c:	jsr 14eba <freeze>
	freezeSubs (); 
    e262:	jsr 54a2 <freezeSubs>
	fun -> freezerLevel = 0;
    e268:	movea.l 8(sp),a0
    e26c:	clr.b 56(a0)
	return BR_CONTINUE;
    e270:	moveq #2,d0
}
    e272:	rts

0000e274 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e274:	jsr 150be <unfreeze>
	unfreezeSubs (); 
    e27a:	jsr 68f4 <unfreezeSubs>
	return BR_CONTINUE;
    e280:	moveq #2,d0
}
    e282:	rts

0000e284 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e284:	jsr 1509a <howFrozen>
    e28a:	move.l d0,d1
    e28c:	moveq #28,d0
    e28e:	add.l 8(sp),d0
    e292:	move.l d1,-(sp)
    e294:	pea 1 <_start+0x1>
    e298:	move.l d0,-(sp)
    e29a:	jsr 14de0 <setVariable>
    e2a0:	lea 12(sp),sp
	return BR_CONTINUE; 
    e2a4:	moveq #2,d0
}
    e2a6:	rts

0000e2a8 <builtIn_setCursor>:

builtIn(setCursor)
{
    e2a8:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e2aa:	movea.l 12(sp),a0
    e2ae:	move.l 24(a0),d0
    e2b2:	move.l d0,-(sp)
    e2b4:	jsr 149c6 <getAnimationFromVar>
    e2ba:	addq.l #4,sp
    e2bc:	move.l d0,(sp)
	pickAnimCursor (aa);
    e2be:	move.l (sp),-(sp)
    e2c0:	jsr d6c <pickAnimCursor>
    e2c6:	addq.l #4,sp
	trimStack (&fun -> stack);
    e2c8:	moveq #24,d0
    e2ca:	add.l 12(sp),d0
    e2ce:	move.l d0,-(sp)
    e2d0:	jsr 14e72 <trimStack>
    e2d6:	addq.l #4,sp
	return BR_CONTINUE;
    e2d8:	moveq #2,d0
}
    e2da:	addq.l #4,sp
    e2dc:	rts

0000e2de <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e2de:	move.l 1a760 <input+0xa>,d1
    e2e4:	move.l 1a85e <cameraX>,d0
    e2ea:	add.l d0,d1
    e2ec:	moveq #28,d0
    e2ee:	add.l 8(sp),d0
    e2f2:	move.l d1,-(sp)
    e2f4:	pea 1 <_start+0x1>
    e2f8:	move.l d0,-(sp)
    e2fa:	jsr 14de0 <setVariable>
    e300:	lea 12(sp),sp
	return BR_CONTINUE;
    e304:	moveq #2,d0
}
    e306:	rts

0000e308 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e308:	move.l 1a764 <input+0xe>,d1
    e30e:	move.l 1a862 <cameraY>,d0
    e314:	add.l d0,d1
    e316:	moveq #28,d0
    e318:	add.l 8(sp),d0
    e31c:	move.l d1,-(sp)
    e31e:	pea 1 <_start+0x1>
    e322:	move.l d0,-(sp)
    e324:	jsr 14de0 <setVariable>
    e32a:	lea 12(sp),sp
	return BR_CONTINUE;
    e32e:	moveq #2,d0
}
    e330:	rts

0000e332 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e332:	move.l 1a760 <input+0xa>,d0
    e338:	move.l d0,-(sp)
    e33a:	jsr 1736c <__floatsisf>
    e340:	addq.l #4,sp
    e342:	move.l d0,d1
    e344:	move.l 1a142 <cameraZoom>,d0
    e34a:	move.l d0,-(sp)
    e34c:	move.l d1,-(sp)
    e34e:	jsr 1741e <__mulsf3>
    e354:	addq.l #8,sp
    e356:	move.l d0,-(sp)
    e358:	jsr 17304 <__fixsfsi>
    e35e:	addq.l #4,sp
    e360:	move.l d0,d1
    e362:	moveq #28,d0
    e364:	add.l 8(sp),d0
    e368:	move.l d1,-(sp)
    e36a:	pea 1 <_start+0x1>
    e36e:	move.l d0,-(sp)
    e370:	jsr 14de0 <setVariable>
    e376:	lea 12(sp),sp
	return BR_CONTINUE;
    e37a:	moveq #2,d0
}
    e37c:	rts

0000e37e <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e37e:	move.l 1a764 <input+0xe>,d0
    e384:	move.l d0,-(sp)
    e386:	jsr 1736c <__floatsisf>
    e38c:	addq.l #4,sp
    e38e:	move.l d0,d1
    e390:	move.l 1a142 <cameraZoom>,d0
    e396:	move.l d0,-(sp)
    e398:	move.l d1,-(sp)
    e39a:	jsr 1741e <__mulsf3>
    e3a0:	addq.l #8,sp
    e3a2:	move.l d0,-(sp)
    e3a4:	jsr 17304 <__fixsfsi>
    e3aa:	addq.l #4,sp
    e3ac:	move.l d0,d1
    e3ae:	moveq #28,d0
    e3b0:	add.l 8(sp),d0
    e3b4:	move.l d1,-(sp)
    e3b6:	pea 1 <_start+0x1>
    e3ba:	move.l d0,-(sp)
    e3bc:	jsr 14de0 <setVariable>
    e3c2:	lea 12(sp),sp
	return BR_CONTINUE;
    e3c6:	moveq #2,d0
}
    e3c8:	rts

0000e3ca <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e3ca:	jsr 7926 <statusBarText>
    e3d0:	move.l d0,d1
    e3d2:	moveq #28,d0
    e3d4:	add.l 8(sp),d0
    e3d8:	move.l d1,-(sp)
    e3da:	move.l d0,-(sp)
    e3dc:	jsr 14710 <makeTextVar>
    e3e2:	addq.l #8,sp
	return BR_CONTINUE;
    e3e4:	moveq #2,d0
}
    e3e6:	rts

0000e3e8 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e3e8:	       lea -20(sp),sp
    e3ec:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e3ee:	       movea.l 32(sp),a0
    e3f2:	       move.l 24(a0),d0
    e3f6:	       move.l d0,-(sp)
    e3f8:	       jsr 14ac4 <getTextFromAnyVar>
    e3fe:	       addq.l #4,sp
    e400:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e404:	   ,-- bne.s e40c <builtIn_getMatchingFiles+0x24>
    e406:	   |   moveq #1,d0
    e408:	,--|-- bra.w e4ce <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e40c:	|  '-> moveq #24,d0
    e40e:	|      add.l 32(sp),d0
    e412:	|      move.l d0,-(sp)
    e414:	|      jsr 14e72 <trimStack>
    e41a:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e41c:	|      moveq #28,d0
    e41e:	|      add.l 32(sp),d0
    e422:	|      move.l d0,-(sp)
    e424:	|      jsr 1473c <unlinkVar>
    e42a:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e42c:	|      movea.l 32(sp),a0
    e430:	|      moveq #6,d0
    e432:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e436:	|      moveq #12,d0
    e438:	|      move.l d0,16(sp)
    e43c:	|      clr.l 12(sp)
    e440:	|      move.l 1a7a4 <SysBase>,d0
    e446:	|      movea.l d0,a6
    e448:	|      move.l 16(sp),d0
    e44c:	|      move.l 12(sp),d1
    e450:	|      jsr -684(a6)
    e454:	|      move.l d0,8(sp)
    e458:	|      move.l 8(sp),d0
    e45c:	|      movea.l 32(sp),a0
    e460:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e464:	|      moveq #32,d0
    e466:	|      add.l 32(sp),d0
    e46a:	|  ,-- bne.s e470 <builtIn_getMatchingFiles+0x88>
    e46c:	|  |   moveq #1,d0
    e46e:	+--|-- bra.s e4ce <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e470:	|  '-> movea.l 32(sp),a0
    e474:	|      movea.l 32(a0),a0
    e478:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e47a:	|      movea.l 32(sp),a0
    e47e:	|      movea.l 32(a0),a0
    e482:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e486:	|      movea.l 32(sp),a0
    e48a:	|      movea.l 32(a0),a0
    e48e:	|      moveq #1,d0
    e490:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e494:	|      movea.l 32(sp),a0
    e498:	|      move.l 32(a0),d0
    e49c:	|      move.l 20(sp),-(sp)
    e4a0:	|      move.l d0,-(sp)
    e4a2:	|      jsr 142aa <getSavedGamesStack>
    e4a8:	|      addq.l #8,sp
    e4aa:	|      tst.w d0
    e4ac:	|  ,-- bne.s e4b2 <builtIn_getMatchingFiles+0xca>
    e4ae:	|  |   moveq #1,d0
    e4b0:	+--|-- bra.s e4ce <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e4b2:	|  '-> move.l 20(sp),4(sp)
    e4b8:	|      move.l 1a7a4 <SysBase>,d0
    e4be:	|      movea.l d0,a6
    e4c0:	|      movea.l 4(sp),a1
    e4c4:	|      jsr -690(a6)
	newText = NULL;
    e4c8:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e4cc:	|      moveq #2,d0
}
    e4ce:	'----> movea.l (sp)+,a6
    e4d0:	       lea 20(sp),sp
    e4d4:	       rts

0000e4d6 <builtIn_saveGame>:

builtIn(saveGame)
{
    e4d6:	       lea -12(sp),sp
    e4da:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e4dc:	       movea.l 24(sp),a0
    e4e0:	       move.l 24(a0),d0
    e4e4:	       move.l d0,-(sp)
    e4e6:	       jsr 14ac4 <getTextFromAnyVar>
    e4ec:	       addq.l #4,sp
    e4ee:	       move.l d0,1a770 <loadNow>
    trimStack(&fun->stack);
    e4f4:	       moveq #24,d0
    e4f6:	       add.l 24(sp),d0
    e4fa:	       move.l d0,-(sp)
    e4fc:	       jsr 14e72 <trimStack>
    e502:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e504:	       move.l 1a770 <loadNow>,d0
    e50a:	       move.l d0,-(sp)
    e50c:	       jsr 2fe <encodeFilename>
    e512:	       addq.l #4,sp
    e514:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e518:	       move.l 1a770 <loadNow>,8(sp)
    e520:	       move.l 1a7a4 <SysBase>,d0
    e526:	       movea.l d0,a6
    e528:	       movea.l 8(sp),a1
    e52c:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e530:	       move.l 12(sp),-(sp)
    e534:	       jsr e040 <failSecurityCheck>
    e53a:	       addq.l #4,sp
    e53c:	       tst.w d0
    e53e:	   ,-- beq.s e544 <builtIn_saveGame+0x6e>
    e540:	   |   moveq #1,d0
    e542:	,--|-- bra.s e594 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e544:	|  '-> move.l 12(sp),-(sp)
    e548:	|      pea 194d2 <PutChar+0x1af6>
    e54e:	|      jsr 13a1a <joinStrings>
    e554:	|      addq.l #8,sp
    e556:	|      move.l d0,1a770 <loadNow>
    FreeVec(aaaaa);
    e55c:	|      move.l 12(sp),4(sp)
    e562:	|      move.l 1a7a4 <SysBase>,d0
    e568:	|      movea.l d0,a6
    e56a:	|      movea.l 4(sp),a1
    e56e:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e572:	|      moveq #28,d0
    e574:	|      add.l 24(sp),d0
    e578:	|      clr.l -(sp)
    e57a:	|      pea 1 <_start+0x1>
    e57e:	|      move.l d0,-(sp)
    e580:	|      jsr 14de0 <setVariable>
    e586:	|      lea 12(sp),sp
    saverFunc = fun;
    e58a:	|      move.l 24(sp),1a86e <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e592:	|      moveq #0,d0
}
    e594:	'----> movea.l (sp)+,a6
    e596:	       lea 12(sp),sp
    e59a:	       rts

0000e59c <builtIn_fileExists>:

builtIn(fileExists)
{
    e59c:	       lea -36(sp),sp
    e5a0:	       move.l a6,-(sp)
    e5a2:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e5a4:	       movea.l 52(sp),a0
    e5a8:	       move.l 24(a0),d0
    e5ac:	       move.l d0,-(sp)
    e5ae:	       jsr 14ac4 <getTextFromAnyVar>
    e5b4:	       addq.l #4,sp
    e5b6:	       move.l d0,1a770 <loadNow>
    trimStack(&fun->stack);
    e5bc:	       moveq #24,d0
    e5be:	       add.l 52(sp),d0
    e5c2:	       move.l d0,-(sp)
    e5c4:	       jsr 14e72 <trimStack>
    e5ca:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e5cc:	       move.l 1a770 <loadNow>,d0
    e5d2:	       move.l d0,-(sp)
    e5d4:	       jsr 2fe <encodeFilename>
    e5da:	       addq.l #4,sp
    e5dc:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e5e0:	       move.l 1a770 <loadNow>,36(sp)
    e5e8:	       move.l 1a7a4 <SysBase>,d0
    e5ee:	       movea.l d0,a6
    e5f0:	       movea.l 36(sp),a1
    e5f4:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e5f8:	       move.l 40(sp),-(sp)
    e5fc:	       jsr e040 <failSecurityCheck>
    e602:	       addq.l #4,sp
    e604:	       tst.w d0
    e606:	   ,-- beq.s e60e <builtIn_fileExists+0x72>
    e608:	   |   moveq #1,d0
    e60a:	,--|-- bra.w e6ae <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e60e:	|  '-> move.l 40(sp),32(sp)
    e614:	|      move.l #1005,28(sp)
    e61c:	|      move.l 1a7ac <DOSBase>,d0
    e622:	|      movea.l d0,a6
    e624:	|      move.l 32(sp),d1
    e628:	|      move.l 28(sp),d2
    e62c:	|      jsr -30(a6)
    e630:	|      move.l d0,24(sp)
    e634:	|      move.l 24(sp),d0
    e638:	|      move.l d0,20(sp)
    if (!fp) {        
    e63c:	|  ,-- bne.s e64c <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e63e:	|  |   pea 194d4 <PutChar+0x1af8>
    e644:	|  |   jsr 16f3a <KPrintF>
    e64a:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e64c:	|  '-> tst.l 20(sp)
    e650:	|      sne d0
    e652:	|      neg.b d0
    e654:	|      moveq #0,d1
    e656:	|      move.b d0,d1
    e658:	|      moveq #28,d0
    e65a:	|      add.l 52(sp),d0
    e65e:	|      move.l d1,-(sp)
    e660:	|      pea 1 <_start+0x1>
    e664:	|      move.l d0,-(sp)
    e666:	|      jsr 14de0 <setVariable>
    e66c:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e670:	|      tst.l 20(sp)
    e674:	|  ,-- beq.s e690 <builtIn_fileExists+0xf4>
    e676:	|  |   move.l 20(sp),16(sp)
    e67c:	|  |   move.l 1a7ac <DOSBase>,d0
    e682:	|  |   movea.l d0,a6
    e684:	|  |   move.l 16(sp),d1
    e688:	|  |   jsr -36(a6)
    e68c:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e690:	|  '-> move.l 40(sp),8(sp)
    e696:	|      move.l 1a7a4 <SysBase>,d0
    e69c:	|      movea.l d0,a6
    e69e:	|      movea.l 8(sp),a1
    e6a2:	|      jsr -690(a6)
    loadNow = NULL;
    e6a6:	|      clr.l 1a770 <loadNow>
    return BR_CONTINUE;
    e6ac:	|      moveq #2,d0
}
    e6ae:	'----> move.l (sp)+,d2
    e6b0:	       movea.l (sp)+,a6
    e6b2:	       lea 36(sp),sp
    e6b6:	       rts

0000e6b8 <builtIn_loadGame>:

builtIn(loadGame)
{
    e6b8:	       lea -36(sp),sp
    e6bc:	       move.l a6,-(sp)
    e6be:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e6c0:	       movea.l 52(sp),a0
    e6c4:	       move.l 24(a0),d0
    e6c8:	       move.l d0,-(sp)
    e6ca:	       jsr 14ac4 <getTextFromAnyVar>
    e6d0:	       addq.l #4,sp
    e6d2:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e6d6:	       moveq #24,d0
    e6d8:	       add.l 52(sp),d0
    e6dc:	       move.l d0,-(sp)
    e6de:	       jsr 14e72 <trimStack>
    e6e4:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e6e6:	       move.l 40(sp),-(sp)
    e6ea:	       jsr 2fe <encodeFilename>
    e6f0:	       addq.l #4,sp
    e6f2:	       move.l d0,1a770 <loadNow>
    FreeVec(aaaaa);
    e6f8:	       move.l 40(sp),36(sp)
    e6fe:	       move.l 1a7a4 <SysBase>,d0
    e704:	       movea.l d0,a6
    e706:	       movea.l 36(sp),a1
    e70a:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e70e:	       move.l 1a770 <loadNow>,d0
    e714:	       move.l d0,-(sp)
    e716:	       jsr e040 <failSecurityCheck>
    e71c:	       addq.l #4,sp
    e71e:	       tst.w d0
    e720:	   ,-- beq.s e726 <builtIn_loadGame+0x6e>
    e722:	   |   moveq #1,d0
    e724:	,--|-- bra.s e796 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e726:	|  '-> move.l 1a770 <loadNow>,32(sp)
    e72e:	|      move.l #1005,28(sp)
    e736:	|      move.l 1a7ac <DOSBase>,d0
    e73c:	|      movea.l d0,a6
    e73e:	|      move.l 32(sp),d1
    e742:	|      move.l 28(sp),d2
    e746:	|      jsr -30(a6)
    e74a:	|      move.l d0,24(sp)
    e74e:	|      move.l 24(sp),d0
    e752:	|      move.l d0,20(sp)
    if (fp) {
    e756:	|  ,-- beq.s e776 <builtIn_loadGame+0xbe>
        Close(fp);
    e758:	|  |   move.l 20(sp),12(sp)
    e75e:	|  |   move.l 1a7ac <DOSBase>,d0
    e764:	|  |   movea.l d0,a6
    e766:	|  |   move.l 12(sp),d1
    e76a:	|  |   jsr -36(a6)
    e76e:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    e772:	|  |   moveq #0,d0
    e774:	+--|-- bra.s e796 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    e776:	|  '-> move.l 1a770 <loadNow>,16(sp)
    e77e:	|      move.l 1a7a4 <SysBase>,d0
    e784:	|      movea.l d0,a6
    e786:	|      movea.l 16(sp),a1
    e78a:	|      jsr -690(a6)
    loadNow = NULL;
    e78e:	|      clr.l 1a770 <loadNow>
    return BR_CONTINUE;
    e794:	|      moveq #2,d0
}
    e796:	'----> move.l (sp)+,d2
    e798:	       movea.l (sp)+,a6
    e79a:	       lea 36(sp),sp
    e79e:	       rts

0000e7a0 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    e7a0:	move.l 1a844 <sceneHeight>,d0
    e7a6:	move.l d0,d1
    e7a8:	move.l 1a840 <sceneWidth>,d0
    e7ae:	move.l d1,-(sp)
    e7b0:	move.l d0,-(sp)
    e7b2:	clr.l -(sp)
    e7b4:	clr.l -(sp)
    e7b6:	jsr cf34 <blankScreen>
    e7bc:	lea 16(sp),sp
	return BR_CONTINUE;
    e7c0:	moveq #2,d0
}
    e7c2:	rts

0000e7c4 <builtIn_blankArea>:

builtIn(blankArea)
{
    e7c4:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e7c8:	       movea.l 24(sp),a0
    e7cc:	       move.l 24(a0),d0
    e7d0:	       move.l d0,-(sp)
    e7d2:	       pea 1 <_start+0x1>
    e7d6:	       lea 8(sp),a0
    e7da:	       move.l a0,-(sp)
    e7dc:	       jsr 144ee <getValueType>
    e7e2:	       lea 12(sp),sp
    e7e6:	       tst.w d0
    e7e8:	   ,-- bne.s e7f0 <builtIn_blankArea+0x2c>
    e7ea:	   |   moveq #1,d0
    e7ec:	,--|-- bra.w e8c6 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e7f0:	|  '-> moveq #24,d0
    e7f2:	|      add.l 24(sp),d0
    e7f6:	|      move.l d0,-(sp)
    e7f8:	|      jsr 14e72 <trimStack>
    e7fe:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e800:	|      movea.l 24(sp),a0
    e804:	|      move.l 24(a0),d0
    e808:	|      move.l d0,-(sp)
    e80a:	|      pea 1 <_start+0x1>
    e80e:	|      lea 12(sp),a0
    e812:	|      move.l a0,-(sp)
    e814:	|      jsr 144ee <getValueType>
    e81a:	|      lea 12(sp),sp
    e81e:	|      tst.w d0
    e820:	|  ,-- bne.s e828 <builtIn_blankArea+0x64>
    e822:	|  |   moveq #1,d0
    e824:	+--|-- bra.w e8c6 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e828:	|  '-> moveq #24,d0
    e82a:	|      add.l 24(sp),d0
    e82e:	|      move.l d0,-(sp)
    e830:	|      jsr 14e72 <trimStack>
    e836:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e838:	|      movea.l 24(sp),a0
    e83c:	|      move.l 24(a0),d0
    e840:	|      move.l d0,-(sp)
    e842:	|      pea 1 <_start+0x1>
    e846:	|      moveq #16,d0
    e848:	|      add.l sp,d0
    e84a:	|      move.l d0,-(sp)
    e84c:	|      jsr 144ee <getValueType>
    e852:	|      lea 12(sp),sp
    e856:	|      tst.w d0
    e858:	|  ,-- bne.s e85e <builtIn_blankArea+0x9a>
    e85a:	|  |   moveq #1,d0
    e85c:	+--|-- bra.s e8c6 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e85e:	|  '-> moveq #24,d0
    e860:	|      add.l 24(sp),d0
    e864:	|      move.l d0,-(sp)
    e866:	|      jsr 14e72 <trimStack>
    e86c:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e86e:	|      movea.l 24(sp),a0
    e872:	|      move.l 24(a0),d0
    e876:	|      move.l d0,-(sp)
    e878:	|      pea 1 <_start+0x1>
    e87c:	|      moveq #20,d0
    e87e:	|      add.l sp,d0
    e880:	|      move.l d0,-(sp)
    e882:	|      jsr 144ee <getValueType>
    e888:	|      lea 12(sp),sp
    e88c:	|      tst.w d0
    e88e:	|  ,-- bne.s e894 <builtIn_blankArea+0xd0>
    e890:	|  |   moveq #1,d0
    e892:	+--|-- bra.s e8c6 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e894:	|  '-> moveq #24,d0
    e896:	|      add.l 24(sp),d0
    e89a:	|      move.l d0,-(sp)
    e89c:	|      jsr 14e72 <trimStack>
    e8a2:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    e8a4:	|      movea.l (sp),a1
    e8a6:	|      movea.l 4(sp),a0
    e8aa:	|      move.l 8(sp),d1
    e8ae:	|      move.l 12(sp),d0
    e8b2:	|      move.l a1,-(sp)
    e8b4:	|      move.l a0,-(sp)
    e8b6:	|      move.l d1,-(sp)
    e8b8:	|      move.l d0,-(sp)
    e8ba:	|      jsr cf34 <blankScreen>
    e8c0:	|      lea 16(sp),sp
	return BR_CONTINUE;
    e8c4:	|      moveq #2,d0
}
    e8c6:	'----> lea 16(sp),sp
    e8ca:	       rts

0000e8cc <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    e8cc:	jsr cf48 <darkScreen>
	return BR_CONTINUE;
    e8d2:	moveq #2,d0
}
    e8d4:	rts

0000e8d6 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    e8d6:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e8da:	       movea.l 20(sp),a0
    e8de:	       move.l 24(a0),d0
    e8e2:	       move.l d0,-(sp)
    e8e4:	       pea 1 <_start+0x1>
    e8e8:	       lea 8(sp),a0
    e8ec:	       move.l a0,-(sp)
    e8ee:	       jsr 144ee <getValueType>
    e8f4:	       lea 12(sp),sp
    e8f8:	       tst.w d0
    e8fa:	   ,-- bne.s e902 <builtIn_addOverlay+0x2c>
    e8fc:	   |   moveq #1,d0
    e8fe:	,--|-- bra.w e99a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e902:	|  '-> moveq #24,d0
    e904:	|      add.l 20(sp),d0
    e908:	|      move.l d0,-(sp)
    e90a:	|      jsr 14e72 <trimStack>
    e910:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e912:	|      movea.l 20(sp),a0
    e916:	|      move.l 24(a0),d0
    e91a:	|      move.l d0,-(sp)
    e91c:	|      pea 1 <_start+0x1>
    e920:	|      moveq #12,d0
    e922:	|      add.l sp,d0
    e924:	|      move.l d0,-(sp)
    e926:	|      jsr 144ee <getValueType>
    e92c:	|      lea 12(sp),sp
    e930:	|      tst.w d0
    e932:	|  ,-- bne.s e938 <builtIn_addOverlay+0x62>
    e934:	|  |   moveq #1,d0
    e936:	+--|-- bra.s e99a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e938:	|  '-> moveq #24,d0
    e93a:	|      add.l 20(sp),d0
    e93e:	|      move.l d0,-(sp)
    e940:	|      jsr 14e72 <trimStack>
    e946:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e948:	|      movea.l 20(sp),a0
    e94c:	|      move.l 24(a0),d0
    e950:	|      move.l d0,-(sp)
    e952:	|      pea 5 <_start+0x5>
    e956:	|      moveq #16,d0
    e958:	|      add.l sp,d0
    e95a:	|      move.l d0,-(sp)
    e95c:	|      jsr 144ee <getValueType>
    e962:	|      lea 12(sp),sp
    e966:	|      tst.w d0
    e968:	|  ,-- bne.s e96e <builtIn_addOverlay+0x98>
    e96a:	|  |   moveq #1,d0
    e96c:	+--|-- bra.s e99a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e96e:	|  '-> moveq #24,d0
    e970:	|      add.l 20(sp),d0
    e974:	|      move.l d0,-(sp)
    e976:	|      jsr 14e72 <trimStack>
    e97c:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    e97e:	|      movea.l (sp),a0
    e980:	|      move.l 4(sp),d1
    e984:	|      move.l 8(sp),d0
    e988:	|      move.l a0,-(sp)
    e98a:	|      move.l d1,-(sp)
    e98c:	|      move.l d0,-(sp)
    e98e:	|      jsr d066 <loadBackDrop>
    e994:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e998:	|      moveq #2,d0
}
    e99a:	'----> lea 12(sp),sp
    e99e:	       rts

0000e9a0 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    e9a0:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9a4:	       movea.l 20(sp),a0
    e9a8:	       move.l 24(a0),d0
    e9ac:	       move.l d0,-(sp)
    e9ae:	       pea 1 <_start+0x1>
    e9b2:	       lea 8(sp),a0
    e9b6:	       move.l a0,-(sp)
    e9b8:	       jsr 144ee <getValueType>
    e9be:	       lea 12(sp),sp
    e9c2:	       tst.w d0
    e9c4:	   ,-- bne.s e9cc <builtIn_mixOverlay+0x2c>
    e9c6:	   |   moveq #1,d0
    e9c8:	,--|-- bra.w ea64 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    e9cc:	|  '-> moveq #24,d0
    e9ce:	|      add.l 20(sp),d0
    e9d2:	|      move.l d0,-(sp)
    e9d4:	|      jsr 14e72 <trimStack>
    e9da:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9dc:	|      movea.l 20(sp),a0
    e9e0:	|      move.l 24(a0),d0
    e9e4:	|      move.l d0,-(sp)
    e9e6:	|      pea 1 <_start+0x1>
    e9ea:	|      moveq #12,d0
    e9ec:	|      add.l sp,d0
    e9ee:	|      move.l d0,-(sp)
    e9f0:	|      jsr 144ee <getValueType>
    e9f6:	|      lea 12(sp),sp
    e9fa:	|      tst.w d0
    e9fc:	|  ,-- bne.s ea02 <builtIn_mixOverlay+0x62>
    e9fe:	|  |   moveq #1,d0
    ea00:	+--|-- bra.s ea64 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ea02:	|  '-> moveq #24,d0
    ea04:	|      add.l 20(sp),d0
    ea08:	|      move.l d0,-(sp)
    ea0a:	|      jsr 14e72 <trimStack>
    ea10:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea12:	|      movea.l 20(sp),a0
    ea16:	|      move.l 24(a0),d0
    ea1a:	|      move.l d0,-(sp)
    ea1c:	|      pea 5 <_start+0x5>
    ea20:	|      moveq #16,d0
    ea22:	|      add.l sp,d0
    ea24:	|      move.l d0,-(sp)
    ea26:	|      jsr 144ee <getValueType>
    ea2c:	|      lea 12(sp),sp
    ea30:	|      tst.w d0
    ea32:	|  ,-- bne.s ea38 <builtIn_mixOverlay+0x98>
    ea34:	|  |   moveq #1,d0
    ea36:	+--|-- bra.s ea64 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ea38:	|  '-> moveq #24,d0
    ea3a:	|      add.l 20(sp),d0
    ea3e:	|      move.l d0,-(sp)
    ea40:	|      jsr 14e72 <trimStack>
    ea46:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    ea48:	|      movea.l (sp),a0
    ea4a:	|      move.l 4(sp),d1
    ea4e:	|      move.l 8(sp),d0
    ea52:	|      move.l a0,-(sp)
    ea54:	|      move.l d1,-(sp)
    ea56:	|      move.l d0,-(sp)
    ea58:	|      jsr d0dc <mixBackDrop>
    ea5e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ea62:	|      moveq #2,d0
}
    ea64:	'----> lea 12(sp),sp
    ea68:	       rts

0000ea6a <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ea6a:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea6e:	       movea.l 20(sp),a0
    ea72:	       move.l 24(a0),d0
    ea76:	       move.l d0,-(sp)
    ea78:	       pea 1 <_start+0x1>
    ea7c:	       lea 8(sp),a0
    ea80:	       move.l a0,-(sp)
    ea82:	       jsr 144ee <getValueType>
    ea88:	       lea 12(sp),sp
    ea8c:	       tst.w d0
    ea8e:	   ,-- bne.s ea96 <builtIn_pasteImage+0x2c>
    ea90:	   |   moveq #1,d0
    ea92:	,--|-- bra.w eb26 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ea96:	|  '-> moveq #24,d0
    ea98:	|      add.l 20(sp),d0
    ea9c:	|      move.l d0,-(sp)
    ea9e:	|      jsr 14e72 <trimStack>
    eaa4:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eaa6:	|      movea.l 20(sp),a0
    eaaa:	|      move.l 24(a0),d0
    eaae:	|      move.l d0,-(sp)
    eab0:	|      pea 1 <_start+0x1>
    eab4:	|      moveq #12,d0
    eab6:	|      add.l sp,d0
    eab8:	|      move.l d0,-(sp)
    eaba:	|      jsr 144ee <getValueType>
    eac0:	|      lea 12(sp),sp
    eac4:	|      tst.w d0
    eac6:	|  ,-- bne.s eacc <builtIn_pasteImage+0x62>
    eac8:	|  |   moveq #1,d0
    eaca:	+--|-- bra.s eb26 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    eacc:	|  '-> moveq #24,d0
    eace:	|      add.l 20(sp),d0
    ead2:	|      move.l d0,-(sp)
    ead4:	|      jsr 14e72 <trimStack>
    eada:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    eadc:	|      movea.l 20(sp),a0
    eae0:	|      move.l 24(a0),d0
    eae4:	|      move.l d0,-(sp)
    eae6:	|      jsr 149c6 <getAnimationFromVar>
    eaec:	|      addq.l #4,sp
    eaee:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    eaf2:	|      moveq #24,d0
    eaf4:	|      add.l 20(sp),d0
    eaf8:	|      move.l d0,-(sp)
    eafa:	|      jsr 14e72 <trimStack>
    eb00:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    eb02:	|      tst.l 8(sp)
    eb06:	|  ,-- bne.s eb0c <builtIn_pasteImage+0xa2>
    eb08:	|  |   moveq #2,d0
    eb0a:	+--|-- bra.s eb26 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    eb0c:	|  '-> move.l (sp),d1
    eb0e:	|      move.l 4(sp),d0
    eb12:	|      move.l 8(sp),-(sp)
    eb16:	|      move.l d1,-(sp)
    eb18:	|      move.l d0,-(sp)
    eb1a:	|      jsr d94 <pasteCursor>
    eb20:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    eb24:	|      moveq #2,d0
}
    eb26:	'----> lea 12(sp),sp
    eb2a:	       rts

0000eb2c <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    eb2c:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb2e:	       movea.l 16(sp),a0
    eb32:	       move.l 24(a0),d0
    eb36:	       move.l d0,-(sp)
    eb38:	       pea 1 <_start+0x1>
    eb3c:	       move.l sp,d0
    eb3e:	       addq.l #8,d0
    eb40:	       move.l d0,-(sp)
    eb42:	       jsr 144ee <getValueType>
    eb48:	       lea 12(sp),sp
    eb4c:	       tst.w d0
    eb4e:	   ,-- bne.s eb56 <builtIn_setSceneDimensions+0x2a>
    eb50:	   |   moveq #1,d0
    eb52:	,--|-- bra.w ebde <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    eb56:	|  '-> moveq #24,d0
    eb58:	|      add.l 16(sp),d0
    eb5c:	|      move.l d0,-(sp)
    eb5e:	|      jsr 14e72 <trimStack>
    eb64:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb66:	|      movea.l 16(sp),a0
    eb6a:	|      move.l 24(a0),d0
    eb6e:	|      move.l d0,-(sp)
    eb70:	|      pea 1 <_start+0x1>
    eb74:	|      moveq #12,d0
    eb76:	|      add.l sp,d0
    eb78:	|      move.l d0,-(sp)
    eb7a:	|      jsr 144ee <getValueType>
    eb80:	|      lea 12(sp),sp
    eb84:	|      tst.w d0
    eb86:	|  ,-- bne.s eb8c <builtIn_setSceneDimensions+0x60>
    eb88:	|  |   moveq #1,d0
    eb8a:	+--|-- bra.s ebde <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    eb8c:	|  '-> moveq #24,d0
    eb8e:	|      add.l 16(sp),d0
    eb92:	|      move.l d0,-(sp)
    eb94:	|      jsr 14e72 <trimStack>
    eb9a:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    eb9c:	|      move.l (sp),d1
    eb9e:	|      move.l 4(sp),d0
    eba2:	|      move.l d1,-(sp)
    eba4:	|      move.l d0,-(sp)
    eba6:	|      jsr d132 <resizeBackdrop>
    ebac:	|      addq.l #8,sp
    ebae:	|      tst.w d0
    ebb0:	|  ,-- beq.s ebce <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ebb2:	|  |   move.l (sp),d1
    ebb4:	|  |   move.l 4(sp),d0
    ebb8:	|  |   move.l d1,-(sp)
    ebba:	|  |   move.l d0,-(sp)
    ebbc:	|  |   clr.l -(sp)
    ebbe:	|  |   clr.l -(sp)
    ebc0:	|  |   jsr cf34 <blankScreen>
    ebc6:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    ebca:	|  |   moveq #2,d0
    ebcc:	+--|-- bra.s ebde <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    ebce:	|  '-> pea 194f2 <PutChar+0x1b16>
    ebd4:	|      jsr 16f3a <KPrintF>
    ebda:	|      addq.l #4,sp
	return BR_ERROR;
    ebdc:	|      moveq #1,d0
}
    ebde:	'----> addq.l #8,sp
    ebe0:	       rts

0000ebe2 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    ebe2:	          move.l d3,-(sp)
    ebe4:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebe6:	          movea.l 16(sp),a0
    ebea:	          move.l 24(a0),d0
    ebee:	          move.l d0,-(sp)
    ebf0:	          pea 1 <_start+0x1>
    ebf4:	          pea 1a862 <cameraY>
    ebfa:	          jsr 144ee <getValueType>
    ec00:	          lea 12(sp),sp
    ec04:	          tst.w d0
    ec06:	      ,-- bne.s ec0e <builtIn_aimCamera+0x2c>
    ec08:	      |   moveq #1,d0
    ec0a:	,-----|-- bra.w ee90 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ec0e:	|     '-> moveq #24,d0
    ec10:	|         add.l 16(sp),d0
    ec14:	|         move.l d0,-(sp)
    ec16:	|         jsr 14e72 <trimStack>
    ec1c:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec1e:	|         movea.l 16(sp),a0
    ec22:	|         move.l 24(a0),d0
    ec26:	|         move.l d0,-(sp)
    ec28:	|         pea 1 <_start+0x1>
    ec2c:	|         pea 1a85e <cameraX>
    ec32:	|         jsr 144ee <getValueType>
    ec38:	|         lea 12(sp),sp
    ec3c:	|         tst.w d0
    ec3e:	|     ,-- bne.s ec46 <builtIn_aimCamera+0x64>
    ec40:	|     |   moveq #1,d0
    ec42:	+-----|-- bra.w ee90 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ec46:	|     '-> moveq #24,d0
    ec48:	|         add.l 16(sp),d0
    ec4c:	|         move.l d0,-(sp)
    ec4e:	|         jsr 14e72 <trimStack>
    ec54:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    ec56:	|         move.l 1a85e <cameraX>,d0
    ec5c:	|         move.l d0,-(sp)
    ec5e:	|         jsr 1736c <__floatsisf>
    ec64:	|         addq.l #4,sp
    ec66:	|         move.l d0,d2
    ec68:	|         move.l 1a6f8 <winWidth>,d0
    ec6e:	|         lsr.l #1,d0
    ec70:	|         move.l d0,-(sp)
    ec72:	|         jsr 17394 <__floatunsisf>
    ec78:	|         addq.l #4,sp
    ec7a:	|         move.l d0,d1
    ec7c:	|         move.l 1a142 <cameraZoom>,d0
    ec82:	|         move.l d0,-(sp)
    ec84:	|         move.l d1,-(sp)
    ec86:	|         jsr 17222 <__divsf3>
    ec8c:	|         addq.l #8,sp
    ec8e:	|         move.l d0,-(sp)
    ec90:	|         move.l d2,-(sp)
    ec92:	|         jsr 17660 <__subsf3>
    ec98:	|         addq.l #8,sp
    ec9a:	|         move.l d0,-(sp)
    ec9c:	|         jsr 17304 <__fixsfsi>
    eca2:	|         addq.l #4,sp
    eca4:	|         move.l d0,1a85e <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    ecaa:	|         move.l 1a862 <cameraY>,d0
    ecb0:	|         move.l d0,-(sp)
    ecb2:	|         jsr 1736c <__floatsisf>
    ecb8:	|         addq.l #4,sp
    ecba:	|         move.l d0,d2
    ecbc:	|         move.l 1a6fc <winHeight>,d0
    ecc2:	|         lsr.l #1,d0
    ecc4:	|         move.l d0,-(sp)
    ecc6:	|         jsr 17394 <__floatunsisf>
    eccc:	|         addq.l #4,sp
    ecce:	|         move.l d0,d1
    ecd0:	|         move.l 1a142 <cameraZoom>,d0
    ecd6:	|         move.l d0,-(sp)
    ecd8:	|         move.l d1,-(sp)
    ecda:	|         jsr 17222 <__divsf3>
    ece0:	|         addq.l #8,sp
    ece2:	|         move.l d0,-(sp)
    ece4:	|         move.l d2,-(sp)
    ece6:	|         jsr 17660 <__subsf3>
    ecec:	|         addq.l #8,sp
    ecee:	|         move.l d0,-(sp)
    ecf0:	|         jsr 17304 <__fixsfsi>
    ecf6:	|         addq.l #4,sp
    ecf8:	|         move.l d0,1a862 <cameraY>

	if (cameraX < 0) cameraX = 0;
    ecfe:	|         move.l 1a85e <cameraX>,d0
    ed04:	|     ,-- bpl.s ed10 <builtIn_aimCamera+0x12e>
    ed06:	|     |   clr.l 1a85e <cameraX>
    ed0c:	|  ,--|-- bra.w edc6 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    ed10:	|  |  '-> move.l 1a85e <cameraX>,d0
    ed16:	|  |      move.l d0,-(sp)
    ed18:	|  |      jsr 1736c <__floatsisf>
    ed1e:	|  |      addq.l #4,sp
    ed20:	|  |      move.l d0,d2
    ed22:	|  |      move.l 1a840 <sceneWidth>,d0
    ed28:	|  |      move.l d0,-(sp)
    ed2a:	|  |      jsr 17394 <__floatunsisf>
    ed30:	|  |      addq.l #4,sp
    ed32:	|  |      move.l d0,d3
    ed34:	|  |      move.l 1a6f8 <winWidth>,d0
    ed3a:	|  |      move.l d0,-(sp)
    ed3c:	|  |      jsr 17394 <__floatunsisf>
    ed42:	|  |      addq.l #4,sp
    ed44:	|  |      move.l d0,d1
    ed46:	|  |      move.l 1a142 <cameraZoom>,d0
    ed4c:	|  |      move.l d0,-(sp)
    ed4e:	|  |      move.l d1,-(sp)
    ed50:	|  |      jsr 17222 <__divsf3>
    ed56:	|  |      addq.l #8,sp
    ed58:	|  |      move.l d0,-(sp)
    ed5a:	|  |      move.l d3,-(sp)
    ed5c:	|  |      jsr 17660 <__subsf3>
    ed62:	|  |      addq.l #8,sp
    ed64:	|  |      move.l d0,-(sp)
    ed66:	|  |      move.l d2,-(sp)
    ed68:	|  |      jsr 174d8 <__gtsf2>
    ed6e:	|  |      addq.l #8,sp
    ed70:	|  |      tst.l d0
    ed72:	|  +----- ble.s edc6 <builtIn_aimCamera+0x1e4>
    ed74:	|  |      move.l 1a840 <sceneWidth>,d0
    ed7a:	|  |      move.l d0,-(sp)
    ed7c:	|  |      jsr 17394 <__floatunsisf>
    ed82:	|  |      addq.l #4,sp
    ed84:	|  |      move.l d0,d2
    ed86:	|  |      move.l 1a6f8 <winWidth>,d0
    ed8c:	|  |      move.l d0,-(sp)
    ed8e:	|  |      jsr 17394 <__floatunsisf>
    ed94:	|  |      addq.l #4,sp
    ed96:	|  |      move.l d0,d1
    ed98:	|  |      move.l 1a142 <cameraZoom>,d0
    ed9e:	|  |      move.l d0,-(sp)
    eda0:	|  |      move.l d1,-(sp)
    eda2:	|  |      jsr 17222 <__divsf3>
    eda8:	|  |      addq.l #8,sp
    edaa:	|  |      move.l d0,-(sp)
    edac:	|  |      move.l d2,-(sp)
    edae:	|  |      jsr 17660 <__subsf3>
    edb4:	|  |      addq.l #8,sp
    edb6:	|  |      move.l d0,-(sp)
    edb8:	|  |      jsr 17304 <__fixsfsi>
    edbe:	|  |      addq.l #4,sp
    edc0:	|  |      move.l d0,1a85e <cameraX>
	if (cameraY < 0) cameraY = 0;
    edc6:	|  '----> move.l 1a862 <cameraY>,d0
    edcc:	|     ,-- bpl.s edd8 <builtIn_aimCamera+0x1f6>
    edce:	|     |   clr.l 1a862 <cameraY>
    edd4:	|  ,--|-- bra.w ee8e <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    edd8:	|  |  '-> move.l 1a862 <cameraY>,d0
    edde:	|  |      move.l d0,-(sp)
    ede0:	|  |      jsr 1736c <__floatsisf>
    ede6:	|  |      addq.l #4,sp
    ede8:	|  |      move.l d0,d2
    edea:	|  |      move.l 1a844 <sceneHeight>,d0
    edf0:	|  |      move.l d0,-(sp)
    edf2:	|  |      jsr 17394 <__floatunsisf>
    edf8:	|  |      addq.l #4,sp
    edfa:	|  |      move.l d0,d3
    edfc:	|  |      move.l 1a6fc <winHeight>,d0
    ee02:	|  |      move.l d0,-(sp)
    ee04:	|  |      jsr 17394 <__floatunsisf>
    ee0a:	|  |      addq.l #4,sp
    ee0c:	|  |      move.l d0,d1
    ee0e:	|  |      move.l 1a142 <cameraZoom>,d0
    ee14:	|  |      move.l d0,-(sp)
    ee16:	|  |      move.l d1,-(sp)
    ee18:	|  |      jsr 17222 <__divsf3>
    ee1e:	|  |      addq.l #8,sp
    ee20:	|  |      move.l d0,-(sp)
    ee22:	|  |      move.l d3,-(sp)
    ee24:	|  |      jsr 17660 <__subsf3>
    ee2a:	|  |      addq.l #8,sp
    ee2c:	|  |      move.l d0,-(sp)
    ee2e:	|  |      move.l d2,-(sp)
    ee30:	|  |      jsr 174d8 <__gtsf2>
    ee36:	|  |      addq.l #8,sp
    ee38:	|  |      tst.l d0
    ee3a:	|  +----- ble.s ee8e <builtIn_aimCamera+0x2ac>
    ee3c:	|  |      move.l 1a844 <sceneHeight>,d0
    ee42:	|  |      move.l d0,-(sp)
    ee44:	|  |      jsr 17394 <__floatunsisf>
    ee4a:	|  |      addq.l #4,sp
    ee4c:	|  |      move.l d0,d2
    ee4e:	|  |      move.l 1a6fc <winHeight>,d0
    ee54:	|  |      move.l d0,-(sp)
    ee56:	|  |      jsr 17394 <__floatunsisf>
    ee5c:	|  |      addq.l #4,sp
    ee5e:	|  |      move.l d0,d1
    ee60:	|  |      move.l 1a142 <cameraZoom>,d0
    ee66:	|  |      move.l d0,-(sp)
    ee68:	|  |      move.l d1,-(sp)
    ee6a:	|  |      jsr 17222 <__divsf3>
    ee70:	|  |      addq.l #8,sp
    ee72:	|  |      move.l d0,-(sp)
    ee74:	|  |      move.l d2,-(sp)
    ee76:	|  |      jsr 17660 <__subsf3>
    ee7c:	|  |      addq.l #8,sp
    ee7e:	|  |      move.l d0,-(sp)
    ee80:	|  |      jsr 17304 <__fixsfsi>
    ee86:	|  |      addq.l #4,sp
    ee88:	|  |      move.l d0,1a862 <cameraY>
	return BR_CONTINUE;
    ee8e:	|  '----> moveq #2,d0
}
    ee90:	'-------> move.l (sp)+,d2
    ee92:	          move.l (sp)+,d3
    ee94:	          rts

0000ee96 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    ee96:	       subq.l #4,sp
    ee98:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee9a:	       movea.l 16(sp),a0
    ee9e:	       move.l 24(a0),d0
    eea2:	       move.l d0,-(sp)
    eea4:	       pea 1 <_start+0x1>
    eea8:	       moveq #12,d0
    eeaa:	       add.l sp,d0
    eeac:	       move.l d0,-(sp)
    eeae:	       jsr 144ee <getValueType>
    eeb4:	       lea 12(sp),sp
    eeb8:	       tst.w d0
    eeba:	   ,-- bne.s eec2 <builtIn_zoomCamera+0x2c>
    eebc:	   |   moveq #1,d0
    eebe:	,--|-- bra.w f0bc <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    eec2:	|  '-> moveq #24,d0
    eec4:	|      add.l 16(sp),d0
    eec8:	|      move.l d0,-(sp)
    eeca:	|      jsr 14e72 <trimStack>
    eed0:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    eed2:	|      move.l 1a760 <input+0xa>,d0
    eed8:	|      move.l d0,-(sp)
    eeda:	|      jsr 1736c <__floatsisf>
    eee0:	|      addq.l #4,sp
    eee2:	|      move.l d0,d1
    eee4:	|      move.l 1a142 <cameraZoom>,d0
    eeea:	|      move.l d0,-(sp)
    eeec:	|      move.l d1,-(sp)
    eeee:	|      jsr 1741e <__mulsf3>
    eef4:	|      addq.l #8,sp
    eef6:	|      move.l d0,-(sp)
    eef8:	|      jsr 17304 <__fixsfsi>
    eefe:	|      addq.l #4,sp
    ef00:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    ef06:	|      move.l 1a764 <input+0xe>,d0
    ef0c:	|      move.l d0,-(sp)
    ef0e:	|      jsr 1736c <__floatsisf>
    ef14:	|      addq.l #4,sp
    ef16:	|      move.l d0,d1
    ef18:	|      move.l 1a142 <cameraZoom>,d0
    ef1e:	|      move.l d0,-(sp)
    ef20:	|      move.l d1,-(sp)
    ef22:	|      jsr 1741e <__mulsf3>
    ef28:	|      addq.l #8,sp
    ef2a:	|      move.l d0,-(sp)
    ef2c:	|      jsr 17304 <__fixsfsi>
    ef32:	|      addq.l #4,sp
    ef34:	|      move.l d0,1a764 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    ef3a:	|      move.l 4(sp),d0
    ef3e:	|      move.l d0,-(sp)
    ef40:	|      jsr 1736c <__floatsisf>
    ef46:	|      addq.l #4,sp
    ef48:	|      move.l #1008981770,-(sp)
    ef4e:	|      move.l d0,-(sp)
    ef50:	|      jsr 1741e <__mulsf3>
    ef56:	|      addq.l #8,sp
    ef58:	|      move.l d0,1a142 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    ef5e:	|      move.l 1a6f8 <winWidth>,d0
    ef64:	|      move.l d0,-(sp)
    ef66:	|      jsr 17394 <__floatunsisf>
    ef6c:	|      addq.l #4,sp
    ef6e:	|      move.l d0,d1
    ef70:	|      move.l 1a142 <cameraZoom>,d0
    ef76:	|      move.l d0,-(sp)
    ef78:	|      move.l d1,-(sp)
    ef7a:	|      jsr 17222 <__divsf3>
    ef80:	|      addq.l #8,sp
    ef82:	|      move.l d0,d2
    ef84:	|      move.l 1a840 <sceneWidth>,d0
    ef8a:	|      move.l d0,-(sp)
    ef8c:	|      jsr 17394 <__floatunsisf>
    ef92:	|      addq.l #4,sp
    ef94:	|      move.l d0,-(sp)
    ef96:	|      move.l d2,-(sp)
    ef98:	|      jsr 174d8 <__gtsf2>
    ef9e:	|      addq.l #8,sp
    efa0:	|      tst.l d0
    efa2:	|  ,-- ble.s efd8 <builtIn_zoomCamera+0x142>
    efa4:	|  |   move.l 1a6f8 <winWidth>,d0
    efaa:	|  |   move.l d0,-(sp)
    efac:	|  |   jsr 17394 <__floatunsisf>
    efb2:	|  |   addq.l #4,sp
    efb4:	|  |   move.l d0,d2
    efb6:	|  |   move.l 1a840 <sceneWidth>,d0
    efbc:	|  |   move.l d0,-(sp)
    efbe:	|  |   jsr 17394 <__floatunsisf>
    efc4:	|  |   addq.l #4,sp
    efc6:	|  |   move.l d0,-(sp)
    efc8:	|  |   move.l d2,-(sp)
    efca:	|  |   jsr 17222 <__divsf3>
    efd0:	|  |   addq.l #8,sp
    efd2:	|  |   move.l d0,1a142 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    efd8:	|  '-> move.l 1a6fc <winHeight>,d0
    efde:	|      move.l d0,-(sp)
    efe0:	|      jsr 17394 <__floatunsisf>
    efe6:	|      addq.l #4,sp
    efe8:	|      move.l d0,d1
    efea:	|      move.l 1a142 <cameraZoom>,d0
    eff0:	|      move.l d0,-(sp)
    eff2:	|      move.l d1,-(sp)
    eff4:	|      jsr 17222 <__divsf3>
    effa:	|      addq.l #8,sp
    effc:	|      move.l d0,d2
    effe:	|      move.l 1a844 <sceneHeight>,d0
    f004:	|      move.l d0,-(sp)
    f006:	|      jsr 17394 <__floatunsisf>
    f00c:	|      addq.l #4,sp
    f00e:	|      move.l d0,-(sp)
    f010:	|      move.l d2,-(sp)
    f012:	|      jsr 174d8 <__gtsf2>
    f018:	|      addq.l #8,sp
    f01a:	|      tst.l d0
    f01c:	|  ,-- ble.s f052 <builtIn_zoomCamera+0x1bc>
    f01e:	|  |   move.l 1a6fc <winHeight>,d0
    f024:	|  |   move.l d0,-(sp)
    f026:	|  |   jsr 17394 <__floatunsisf>
    f02c:	|  |   addq.l #4,sp
    f02e:	|  |   move.l d0,d2
    f030:	|  |   move.l 1a844 <sceneHeight>,d0
    f036:	|  |   move.l d0,-(sp)
    f038:	|  |   jsr 17394 <__floatunsisf>
    f03e:	|  |   addq.l #4,sp
    f040:	|  |   move.l d0,-(sp)
    f042:	|  |   move.l d2,-(sp)
    f044:	|  |   jsr 17222 <__divsf3>
    f04a:	|  |   addq.l #8,sp
    f04c:	|  |   move.l d0,1a142 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f052:	|  '-> move.l 1a760 <input+0xa>,d0
    f058:	|      move.l d0,-(sp)
    f05a:	|      jsr 1736c <__floatsisf>
    f060:	|      addq.l #4,sp
    f062:	|      move.l d0,d1
    f064:	|      move.l 1a142 <cameraZoom>,d0
    f06a:	|      move.l d0,-(sp)
    f06c:	|      move.l d1,-(sp)
    f06e:	|      jsr 17222 <__divsf3>
    f074:	|      addq.l #8,sp
    f076:	|      move.l d0,-(sp)
    f078:	|      jsr 17304 <__fixsfsi>
    f07e:	|      addq.l #4,sp
    f080:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f086:	|      move.l 1a764 <input+0xe>,d0
    f08c:	|      move.l d0,-(sp)
    f08e:	|      jsr 1736c <__floatsisf>
    f094:	|      addq.l #4,sp
    f096:	|      move.l d0,d1
    f098:	|      move.l 1a142 <cameraZoom>,d0
    f09e:	|      move.l d0,-(sp)
    f0a0:	|      move.l d1,-(sp)
    f0a2:	|      jsr 17222 <__divsf3>
    f0a8:	|      addq.l #8,sp
    f0aa:	|      move.l d0,-(sp)
    f0ac:	|      jsr 17304 <__fixsfsi>
    f0b2:	|      addq.l #4,sp
    f0b4:	|      move.l d0,1a764 <input+0xe>

	return BR_CONTINUE;
    f0ba:	|      moveq #2,d0
}
    f0bc:	'----> move.l (sp)+,d2
    f0be:	       addq.l #4,sp
    f0c0:	       rts

0000f0c2 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f0c2:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f0c4:	             tst.l 8(sp)
    f0c8:	         ,-- bne.s f0dc <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f0ca:	         |   pea 19517 <PutChar+0x1b3b>
    f0d0:	         |   jsr 16f3a <KPrintF>
    f0d6:	         |   addq.l #4,sp
		return BR_ERROR;
    f0d8:	         |   moveq #1,d0
    f0da:	,--------|-- bra.s f13c <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f0dc:	|        '-> jsr 15b16 <rand>
    f0e2:	|            move.l d0,d1
    f0e4:	|            move.l 8(sp),d0
    f0e8:	|            move.l d0,-(sp)
    f0ea:	|            move.l d1,-(sp)
    f0ec:	|            jsr 179a0 <__umodsi3>
    f0f2:	|            addq.l #8,sp
    f0f4:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f0f6:	|     ,----- bra.s f12a <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f0f8:	|  ,--|----> move.l (sp),d0
    f0fa:	|  |  |      cmp.l 8(sp),d0
    f0fe:	|  |  |  ,-- bne.s f11a <builtIn_pickOne+0x58>
    f100:	|  |  |  |   moveq #28,d0
    f102:	|  |  |  |   add.l 12(sp),d0
    f106:	|  |  |  |   movea.l 12(sp),a0
    f10a:	|  |  |  |   move.l 24(a0),d1
    f10e:	|  |  |  |   move.l d0,-(sp)
    f110:	|  |  |  |   move.l d1,-(sp)
    f112:	|  |  |  |   jsr 149a8 <copyVariable>
    f118:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f11a:	|  |  |  '-> moveq #24,d0
    f11c:	|  |  |      add.l 12(sp),d0
    f120:	|  |  |      move.l d0,-(sp)
    f122:	|  |  |      jsr 14e72 <trimStack>
    f128:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f12a:	|  |  '----> move.l 8(sp),d0
    f12e:	|  |         move.l d0,d1
    f130:	|  |         subq.l #1,d1
    f132:	|  |         move.l d1,8(sp)
    f136:	|  |         tst.l d0
    f138:	|  '-------- bne.s f0f8 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f13a:	|            moveq #2,d0
}
    f13c:	'----------> addq.l #4,sp
    f13e:	             rts

0000f140 <builtIn_substring>:

builtIn(substring)
{
    f140:	       lea -40(sp),sp
    f144:	       move.l a6,-(sp)
    f146:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f148:	       movea.l 56(sp),a0
    f14c:	       move.l 24(a0),d0
    f150:	       move.l d0,-(sp)
    f152:	       pea 1 <_start+0x1>
    f156:	       lea 16(sp),a0
    f15a:	       move.l a0,-(sp)
    f15c:	       jsr 144ee <getValueType>
    f162:	       lea 12(sp),sp
    f166:	       tst.w d0
    f168:	   ,-- bne.s f170 <builtIn_substring+0x30>
    f16a:	   |   moveq #1,d0
    f16c:	,--|-- bra.w f2e8 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f170:	|  '-> moveq #24,d0
    f172:	|      add.l 56(sp),d0
    f176:	|      move.l d0,-(sp)
    f178:	|      jsr 14e72 <trimStack>
    f17e:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f180:	|      movea.l 56(sp),a0
    f184:	|      move.l 24(a0),d0
    f188:	|      move.l d0,-(sp)
    f18a:	|      pea 1 <_start+0x1>
    f18e:	|      lea 20(sp),a0
    f192:	|      move.l a0,-(sp)
    f194:	|      jsr 144ee <getValueType>
    f19a:	|      lea 12(sp),sp
    f19e:	|      tst.w d0
    f1a0:	|  ,-- bne.s f1a8 <builtIn_substring+0x68>
    f1a2:	|  |   moveq #1,d0
    f1a4:	+--|-- bra.w f2e8 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f1a8:	|  '-> moveq #24,d0
    f1aa:	|      add.l 56(sp),d0
    f1ae:	|      move.l d0,-(sp)
    f1b0:	|      jsr 14e72 <trimStack>
    f1b6:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f1b8:	|      movea.l 56(sp),a0
    f1bc:	|      move.l 24(a0),d0
    f1c0:	|      move.l d0,-(sp)
    f1c2:	|      jsr 14ac4 <getTextFromAnyVar>
    f1c8:	|      addq.l #4,sp
    f1ca:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f1ce:	|      moveq #24,d0
    f1d0:	|      add.l 56(sp),d0
    f1d4:	|      move.l d0,-(sp)
    f1d6:	|      jsr 14e72 <trimStack>
    f1dc:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f1de:	|      move.l 44(sp),-(sp)
    f1e2:	|      jsr 139da <strlen>
    f1e8:	|      addq.l #4,sp
    f1ea:	|      move.l d0,d1
    f1ec:	|      move.l 12(sp),d0
    f1f0:	|      movea.l d0,a0
    f1f2:	|      move.l 8(sp),d0
    f1f6:	|      add.l a0,d0
    f1f8:	|      cmp.l d1,d0
    f1fa:	|  ,-- bls.s f230 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f1fc:	|  |   move.l 44(sp),-(sp)
    f200:	|  |   jsr 139da <strlen>
    f206:	|  |   addq.l #4,sp
    f208:	|  |   move.l d0,d1
    f20a:	|  |   move.l 12(sp),d0
    f20e:	|  |   sub.l d0,d1
    f210:	|  |   move.l d1,d0
    f212:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f216:	|  |   move.l 44(sp),-(sp)
    f21a:	|  |   jsr 139da <strlen>
    f220:	|  |   addq.l #4,sp
    f222:	|  |   move.l d0,d1
    f224:	|  |   move.l 12(sp),d0
    f228:	|  |   cmp.l d1,d0
    f22a:	|  +-- bls.s f230 <builtIn_substring+0xf0>
            start = 0;
    f22c:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f230:	|  '-> move.l 8(sp),d0
    f234:	|  ,-- bpl.s f23a <builtIn_substring+0xfa>
        length = 0;
    f236:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f23a:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f240:	|      move.l 12(sp),d1
    f244:	|      move.l 8(sp),d0
    f248:	|      move.l d1,d2
    f24a:	|      add.l d0,d2
    f24c:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f250:	|      move.l 36(sp),d0
    f254:	|      sub.l 40(sp),d0
    f258:	|      addq.l #1,d0
    f25a:	|      move.l d0,32(sp)
    f25e:	|      clr.l 28(sp)
    f262:	|      move.l 1a7a4 <SysBase>,d0
    f268:	|      movea.l d0,a6
    f26a:	|      move.l 32(sp),d0
    f26e:	|      move.l 28(sp),d1
    f272:	|      jsr -684(a6)
    f276:	|      move.l d0,24(sp)
    f27a:	|      move.l 24(sp),d0
    f27e:	|      move.l d0,20(sp)
    if (!newString) {
    f282:	|  ,-- bne.s f288 <builtIn_substring+0x148>
        return BR_ERROR;
    f284:	|  |   moveq #1,d0
    f286:	+--|-- bra.s f2e8 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f288:	|  '-> move.l 36(sp),d0
    f28c:	|      sub.l 40(sp),d0
    f290:	|      move.l d0,d1
    f292:	|      move.l 40(sp),d0
    f296:	|      add.l 44(sp),d0
    f29a:	|      move.l d1,-(sp)
    f29c:	|      move.l d0,-(sp)
    f29e:	|      move.l 28(sp),-(sp)
    f2a2:	|      jsr 16eee <memcpy>
    f2a8:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f2ac:	|      move.l 36(sp),d0
    f2b0:	|      sub.l 40(sp),d0
    f2b4:	|      movea.l 20(sp),a0
    f2b8:	|      adda.l d0,a0
    f2ba:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f2bc:	|      moveq #28,d0
    f2be:	|      add.l 56(sp),d0
    f2c2:	|      move.l 20(sp),-(sp)
    f2c6:	|      move.l d0,-(sp)
    f2c8:	|      jsr 14710 <makeTextVar>
    f2ce:	|      addq.l #8,sp
    FreeVec(newString);
    f2d0:	|      move.l 20(sp),16(sp)
    f2d6:	|      move.l 1a7a4 <SysBase>,d0
    f2dc:	|      movea.l d0,a6
    f2de:	|      movea.l 16(sp),a1
    f2e2:	|      jsr -690(a6)
    return BR_CONTINUE;
    f2e6:	|      moveq #2,d0
}
    f2e8:	'----> move.l (sp)+,d2
    f2ea:	       movea.l (sp)+,a6
    f2ec:	       lea 40(sp),sp
    f2f0:	       rts

0000f2f2 <builtIn_stringLength>:

builtIn(stringLength)
{
    f2f2:	subq.l #8,sp
    f2f4:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f2f6:	movea.l 20(sp),a0
    f2fa:	move.l 24(a0),d0
    f2fe:	move.l d0,-(sp)
    f300:	jsr 14ac4 <getTextFromAnyVar>
    f306:	addq.l #4,sp
    f308:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f30c:	moveq #24,d0
    f30e:	add.l 20(sp),d0
    f312:	move.l d0,-(sp)
    f314:	jsr 14e72 <trimStack>
    f31a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f31c:	move.l 8(sp),-(sp)
    f320:	jsr 139da <strlen>
    f326:	addq.l #4,sp
    f328:	move.l d0,d1
    f32a:	moveq #28,d0
    f32c:	add.l 20(sp),d0
    f330:	move.l d1,-(sp)
    f332:	pea 1 <_start+0x1>
    f336:	move.l d0,-(sp)
    f338:	jsr 14de0 <setVariable>
    f33e:	lea 12(sp),sp
	FreeVec(newText);
    f342:	move.l 8(sp),4(sp)
    f348:	move.l 1a7a4 <SysBase>,d0
    f34e:	movea.l d0,a6
    f350:	movea.l 4(sp),a1
    f354:	jsr -690(a6)
	return BR_CONTINUE;
    f358:	moveq #2,d0
}
    f35a:	movea.l (sp)+,a6
    f35c:	addq.l #8,sp
    f35e:	rts

0000f360 <builtIn_newStack>:

builtIn(newStack)
{
    f360:	             lea -12(sp),sp
    f364:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f366:	             moveq #28,d0
    f368:	             add.l 24(sp),d0
    f36c:	             move.l d0,-(sp)
    f36e:	             jsr 1473c <unlinkVar>
    f374:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f376:	             movea.l 24(sp),a0
    f37a:	             moveq #6,d0
    f37c:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f380:	             moveq #12,d1
    f382:	             move.l d1,12(sp)
    f386:	             clr.l 8(sp)
    f38a:	             move.l 1a7a4 <SysBase>,d0
    f390:	             movea.l d0,a6
    f392:	             move.l 12(sp),d0
    f396:	             move.l 8(sp),d1
    f39a:	             jsr -684(a6)
    f39e:	             move.l d0,4(sp)
    f3a2:	             move.l 4(sp),d0
    f3a6:	             movea.l 24(sp),a0
    f3aa:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f3ae:	             movea.l 24(sp),a0
    f3b2:	             move.l 32(a0),d0
    f3b6:	         ,-- bne.s f3be <builtIn_newStack+0x5e>
    f3b8:	         |   moveq #1,d0
    f3ba:	,--------|-- bra.w f450 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f3be:	|        '-> movea.l 24(sp),a0
    f3c2:	|            movea.l 32(a0),a0
    f3c6:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f3c8:	|            movea.l 24(sp),a0
    f3cc:	|            movea.l 32(a0),a0
    f3d0:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f3d4:	|            movea.l 24(sp),a0
    f3d8:	|            movea.l 32(a0),a0
    f3dc:	|            moveq #1,d0
    f3de:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f3e2:	|     ,----- bra.s f43e <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f3e4:	|  ,--|----> movea.l 24(sp),a0
    f3e8:	|  |  |      move.l 32(a0),d0
    f3ec:	|  |  |      move.l d0,d1
    f3ee:	|  |  |      movea.l 24(sp),a0
    f3f2:	|  |  |      move.l 24(a0),d0
    f3f6:	|  |  |      move.l d1,-(sp)
    f3f8:	|  |  |      move.l d0,-(sp)
    f3fa:	|  |  |      jsr 13d2a <addVarToStack>
    f400:	|  |  |      addq.l #8,sp
    f402:	|  |  |      tst.w d0
    f404:	|  |  |  ,-- bne.s f40a <builtIn_newStack+0xaa>
    f406:	|  |  |  |   moveq #1,d0
    f408:	+--|--|--|-- bra.s f450 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f40a:	|  |  |  '-> movea.l 24(sp),a0
    f40e:	|  |  |      movea.l 32(a0),a0
    f412:	|  |  |      move.l 4(a0),d0
    f416:	|  |  |  ,-- bne.s f42e <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f418:	|  |  |  |   movea.l 24(sp),a0
    f41c:	|  |  |  |   movea.l 32(a0),a1
    f420:	|  |  |  |   movea.l 24(sp),a0
    f424:	|  |  |  |   movea.l 32(a0),a0
    f428:	|  |  |  |   move.l (a1),d0
    f42a:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f42e:	|  |  |  '-> moveq #24,d0
    f430:	|  |  |      add.l 24(sp),d0
    f434:	|  |  |      move.l d0,-(sp)
    f436:	|  |  |      jsr 14e72 <trimStack>
    f43c:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f43e:	|  |  '----> move.l 20(sp),d0
    f442:	|  |         move.l d0,d1
    f444:	|  |         subq.l #1,d1
    f446:	|  |         move.l d1,20(sp)
    f44a:	|  |         tst.l d0
    f44c:	|  '-------- bne.s f3e4 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f44e:	|            moveq #2,d0
}
    f450:	'----------> movea.l (sp)+,a6
    f452:	             lea 12(sp),sp
    f456:	             rts

0000f458 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f458:	          movea.l 8(sp),a0
    f45c:	          movea.l 24(a0),a0
    f460:	          move.l (a0),d0
    f462:	          moveq #6,d1
    f464:	          cmp.l d0,d1
    f466:	      ,-- beq.s f482 <builtIn_stackSize+0x2a>
    f468:	      |   moveq #10,d1
    f46a:	      |   cmp.l d0,d1
    f46c:	   ,--|-- beq.s f4c6 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f46e:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f470:	   |  |   pea 1954a <PutChar+0x1b6e>
    f476:	   |  |   jsr 16f3a <KPrintF>
    f47c:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f47e:	   |  |   moveq #1,d0
    f480:	,--|--|-- bra.s f500 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f482:	|  |  '-> movea.l 8(sp),a0
    f486:	|  |      movea.l 24(a0),a0
    f48a:	|  |      move.l 4(a0),d0
    f48e:	|  |      move.l d0,-(sp)
    f490:	|  |      jsr 14e4e <stackSize>
    f496:	|  |      addq.l #4,sp
    f498:	|  |      move.l d0,d1
    f49a:	|  |      moveq #28,d0
    f49c:	|  |      add.l 8(sp),d0
    f4a0:	|  |      move.l d1,-(sp)
    f4a2:	|  |      pea 1 <_start+0x1>
    f4a6:	|  |      move.l d0,-(sp)
    f4a8:	|  |      jsr 14de0 <setVariable>
    f4ae:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f4b2:	|  |      moveq #24,d0
    f4b4:	|  |      add.l 8(sp),d0
    f4b8:	|  |      move.l d0,-(sp)
    f4ba:	|  |      jsr 14e72 <trimStack>
    f4c0:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f4c2:	|  |      moveq #2,d0
    f4c4:	+--|----- bra.s f500 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f4c6:	|  '----> movea.l 8(sp),a0
    f4ca:	|         movea.l 24(a0),a0
    f4ce:	|         movea.l 4(a0),a0
    f4d2:	|         move.l 4(a0),d1
    f4d6:	|         moveq #28,d0
    f4d8:	|         add.l 8(sp),d0
    f4dc:	|         move.l d1,-(sp)
    f4de:	|         pea 1 <_start+0x1>
    f4e2:	|         move.l d0,-(sp)
    f4e4:	|         jsr 14de0 <setVariable>
    f4ea:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f4ee:	|         moveq #24,d0
    f4f0:	|         add.l 8(sp),d0
    f4f4:	|         move.l d0,-(sp)
    f4f6:	|         jsr 14e72 <trimStack>
    f4fc:	|         addq.l #4,sp
			return BR_CONTINUE;
    f4fe:	|         moveq #2,d0
}
    f500:	'-------> rts

0000f502 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f502:	       movea.l 8(sp),a0
    f506:	       movea.l 24(a0),a0
    f50a:	       move.l (a0),d0
    f50c:	       moveq #6,d1
    f50e:	       cmp.l d0,d1
    f510:	   ,-- beq.s f524 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f512:	   |   pea 19573 <PutChar+0x1b97>
    f518:	   |   jsr 16f3a <KPrintF>
    f51e:	   |   addq.l #4,sp
		return BR_ERROR;
    f520:	   |   moveq #1,d0
    f522:	,--|-- bra.s f558 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f524:	|  '-> moveq #28,d0
    f526:	|      add.l 8(sp),d0
    f52a:	|      movea.l 8(sp),a0
    f52e:	|      move.l 24(a0),d1
    f532:	|      move.l d0,-(sp)
    f534:	|      move.l d1,-(sp)
    f536:	|      jsr 13ff4 <copyStack>
    f53c:	|      addq.l #8,sp
    f53e:	|      tst.w d0
    f540:	|  ,-- bne.s f546 <builtIn_copyStack+0x44>
    f542:	|  |   moveq #1,d0
    f544:	+--|-- bra.s f558 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f546:	|  '-> moveq #24,d0
    f548:	|      add.l 8(sp),d0
    f54c:	|      move.l d0,-(sp)
    f54e:	|      jsr 14e72 <trimStack>
    f554:	|      addq.l #4,sp
	return BR_CONTINUE;
    f556:	|      moveq #2,d0
}
    f558:	'----> rts

0000f55a <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f55a:	       movea.l 8(sp),a0
    f55e:	       movea.l 24(a0),a0
    f562:	       movea.l 8(a0),a0
    f566:	       move.l (a0),d0
    f568:	       moveq #6,d1
    f56a:	       cmp.l d0,d1
    f56c:	   ,-- beq.s f582 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f56e:	   |   pea 1958c <PutChar+0x1bb0>
    f574:	   |   jsr 16f3a <KPrintF>
    f57a:	   |   addq.l #4,sp
		return BR_ERROR;
    f57c:	   |   moveq #1,d0
    f57e:	,--|-- bra.w f610 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f582:	|  '-> movea.l 8(sp),a0
    f586:	|      movea.l 24(a0),a0
    f58a:	|      movea.l 8(a0),a0
    f58e:	|      move.l 4(a0),d0
    f592:	|      move.l d0,d1
    f594:	|      movea.l 8(sp),a0
    f598:	|      move.l 24(a0),d0
    f59c:	|      move.l d1,-(sp)
    f59e:	|      move.l d0,-(sp)
    f5a0:	|      jsr 13d2a <addVarToStack>
    f5a6:	|      addq.l #8,sp
    f5a8:	|      tst.w d0
    f5aa:	|  ,-- bne.s f5b0 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f5ac:	|  |   moveq #1,d0
    f5ae:	+--|-- bra.s f610 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f5b0:	|  '-> movea.l 8(sp),a0
    f5b4:	|      movea.l 24(a0),a0
    f5b8:	|      movea.l 8(a0),a0
    f5bc:	|      movea.l 4(a0),a0
    f5c0:	|      movea.l (a0),a0
    f5c2:	|      move.l 8(a0),d0
    f5c6:	|  ,-- bne.s f5ee <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f5c8:	|  |   movea.l 8(sp),a0
    f5cc:	|  |   movea.l 24(a0),a0
    f5d0:	|  |   movea.l 8(a0),a0
    f5d4:	|  |   movea.l 4(a0),a1
    f5d8:	|  |   movea.l 8(sp),a0
    f5dc:	|  |   movea.l 24(a0),a0
    f5e0:	|  |   movea.l 8(a0),a0
    f5e4:	|  |   movea.l 4(a0),a0
    f5e8:	|  |   move.l (a1),d0
    f5ea:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f5ee:	|  '-> moveq #24,d0
    f5f0:	|      add.l 8(sp),d0
    f5f4:	|      move.l d0,-(sp)
    f5f6:	|      jsr 14e72 <trimStack>
    f5fc:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f5fe:	|      moveq #24,d0
    f600:	|      add.l 8(sp),d0
    f604:	|      move.l d0,-(sp)
    f606:	|      jsr 14e72 <trimStack>
    f60c:	|      addq.l #4,sp
	return BR_CONTINUE;
    f60e:	|      moveq #2,d0
}
    f610:	'----> rts

0000f612 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f612:	             movea.l 8(sp),a0
    f616:	             movea.l 24(a0),a0
    f61a:	             movea.l 8(a0),a0
    f61e:	             move.l (a0),d0
    f620:	             moveq #6,d1
    f622:	             cmp.l d0,d1
    f624:	         ,-- beq.s f63a <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f626:	         |   pea 1958c <PutChar+0x1bb0>
    f62c:	         |   jsr 16f3a <KPrintF>
    f632:	         |   addq.l #4,sp
		return BR_ERROR;
    f634:	         |   moveq #1,d0
    f636:	,--------|-- bra.w f728 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f63a:	|        '-> movea.l 8(sp),a0
    f63e:	|            movea.l 24(a0),a0
    f642:	|            movea.l 8(a0),a0
    f646:	|            movea.l 4(a0),a0
    f64a:	|            move.l (a0),d0
    f64c:	|     ,----- bne.s f6a6 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f64e:	|     |      movea.l 8(sp),a0
    f652:	|     |      movea.l 24(a0),a0
    f656:	|     |      movea.l 8(a0),a0
    f65a:	|     |      move.l 4(a0),d0
    f65e:	|     |      move.l d0,d1
    f660:	|     |      movea.l 8(sp),a0
    f664:	|     |      move.l 24(a0),d0
    f668:	|     |      move.l d1,-(sp)
    f66a:	|     |      move.l d0,-(sp)
    f66c:	|     |      jsr 13d2a <addVarToStack>
    f672:	|     |      addq.l #8,sp
    f674:	|     |      tst.w d0
    f676:	|     |  ,-- bne.s f67e <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f678:	|     |  |   moveq #1,d0
    f67a:	+-----|--|-- bra.w f728 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f67e:	|     |  '-> movea.l 8(sp),a0
    f682:	|     |      movea.l 24(a0),a0
    f686:	|     |      movea.l 8(a0),a0
    f68a:	|     |      movea.l 4(a0),a1
    f68e:	|     |      movea.l 8(sp),a0
    f692:	|     |      movea.l 24(a0),a0
    f696:	|     |      movea.l 8(a0),a0
    f69a:	|     |      movea.l 4(a0),a0
    f69e:	|     |      move.l (a1),d0
    f6a0:	|     |      move.l d0,4(a0)
    f6a4:	|  ,--|----- bra.s f706 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f6a6:	|  |  '----> movea.l 8(sp),a0
    f6aa:	|  |         movea.l 24(a0),a0
    f6ae:	|  |         movea.l 8(a0),a0
    f6b2:	|  |         movea.l 4(a0),a0
    f6b6:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f6ba:	|  |         move.l d0,d1
    f6bc:	|  |         addq.l #8,d1
    f6be:	|  |         movea.l 8(sp),a0
    f6c2:	|  |         move.l 24(a0),d0
    f6c6:	|  |         move.l d1,-(sp)
    f6c8:	|  |         move.l d0,-(sp)
    f6ca:	|  |         jsr 13d2a <addVarToStack>
    f6d0:	|  |         addq.l #8,sp
    f6d2:	|  |         tst.w d0
    f6d4:	|  |     ,-- bne.s f6da <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f6d6:	|  |     |   moveq #1,d0
    f6d8:	+--|-----|-- bra.s f728 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f6da:	|  |     '-> movea.l 8(sp),a0
    f6de:	|  |         movea.l 24(a0),a0
    f6e2:	|  |         movea.l 8(a0),a0
    f6e6:	|  |         movea.l 4(a0),a0
    f6ea:	|  |         movea.l 4(a0),a1
    f6ee:	|  |         movea.l 8(sp),a0
    f6f2:	|  |         movea.l 24(a0),a0
    f6f6:	|  |         movea.l 8(a0),a0
    f6fa:	|  |         movea.l 4(a0),a0
    f6fe:	|  |         move.l 8(a1),d0
    f702:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f706:	|  '-------> moveq #24,d0
    f708:	|            add.l 8(sp),d0
    f70c:	|            move.l d0,-(sp)
    f70e:	|            jsr 14e72 <trimStack>
    f714:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f716:	|            moveq #24,d0
    f718:	|            add.l 8(sp),d0
    f71c:	|            move.l d0,-(sp)
    f71e:	|            jsr 14e72 <trimStack>
    f724:	|            addq.l #4,sp
	return BR_CONTINUE;
    f726:	|            moveq #2,d0
}
    f728:	'----------> rts

0000f72a <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f72a:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f72c:	       movea.l 12(sp),a0
    f730:	       movea.l 24(a0),a0
    f734:	       movea.l 8(a0),a0
    f738:	       move.l (a0),d0
    f73a:	       moveq #6,d1
    f73c:	       cmp.l d0,d1
    f73e:	   ,-- beq.s f754 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f740:	   |   pea 19573 <PutChar+0x1b97>
    f746:	   |   jsr 16f3a <KPrintF>
    f74c:	   |   addq.l #4,sp
		return BR_ERROR;
    f74e:	   |   moveq #1,d0
    f750:	,--|-- bra.w f7ea <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    f754:	|  '-> movea.l 12(sp),a0
    f758:	|      movea.l 24(a0),a0
    f75c:	|      movea.l 8(a0),a0
    f760:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f764:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f766:	|      movea.l 12(sp),a0
    f76a:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f76e:	|      clr.l -(sp)
    f770:	|      move.l d1,-(sp)
    f772:	|      move.l d0,-(sp)
    f774:	|      jsr 140ca <deleteVarFromStack>
    f77a:	|      lea 12(sp),sp
    f77e:	|      move.l d0,d1
    f780:	|      moveq #28,d0
    f782:	|      add.l 12(sp),d0
    f786:	|      move.l d1,-(sp)
    f788:	|      pea 1 <_start+0x1>
    f78c:	|      move.l d0,-(sp)
    f78e:	|      jsr 14de0 <setVariable>
    f794:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f798:	|      movea.l 12(sp),a0
    f79c:	|      movea.l 24(a0),a0
    f7a0:	|      movea.l 8(a0),a0
    f7a4:	|      movea.l 4(a0),a0
    f7a8:	|      move.l (a0),d0
    f7aa:	|      movea.l 12(sp),a0
    f7ae:	|      movea.l 24(a0),a0
    f7b2:	|      movea.l 8(a0),a0
    f7b6:	|      movea.l 4(a0),a2
    f7ba:	|      move.l d0,-(sp)
    f7bc:	|      jsr 14e2a <stackFindLast>
    f7c2:	|      addq.l #4,sp
    f7c4:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f7c8:	|      moveq #24,d0
    f7ca:	|      add.l 12(sp),d0
    f7ce:	|      move.l d0,-(sp)
    f7d0:	|      jsr 14e72 <trimStack>
    f7d6:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f7d8:	|      moveq #24,d0
    f7da:	|      add.l 12(sp),d0
    f7de:	|      move.l d0,-(sp)
    f7e0:	|      jsr 14e72 <trimStack>
    f7e6:	|      addq.l #4,sp
	return BR_CONTINUE;
    f7e8:	|      moveq #2,d0
}
    f7ea:	'----> movea.l (sp)+,a2
    f7ec:	       rts

0000f7ee <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    f7ee:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f7f0:	       movea.l 12(sp),a0
    f7f4:	       movea.l 24(a0),a0
    f7f8:	       movea.l 8(a0),a0
    f7fc:	       move.l (a0),d0
    f7fe:	       moveq #6,d1
    f800:	       cmp.l d0,d1
    f802:	   ,-- beq.s f818 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f804:	   |   pea 19573 <PutChar+0x1b97>
    f80a:	   |   jsr 16f3a <KPrintF>
    f810:	   |   addq.l #4,sp
		return BR_ERROR;
    f812:	   |   moveq #1,d0
    f814:	,--|-- bra.w f8b0 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    f818:	|  '-> movea.l 12(sp),a0
    f81c:	|      movea.l 24(a0),a0
    f820:	|      movea.l 8(a0),a0
    f824:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f828:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f82a:	|      movea.l 12(sp),a0
    f82e:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f832:	|      pea 1 <_start+0x1>
    f836:	|      move.l d1,-(sp)
    f838:	|      move.l d0,-(sp)
    f83a:	|      jsr 140ca <deleteVarFromStack>
    f840:	|      lea 12(sp),sp
    f844:	|      move.l d0,d1
    f846:	|      moveq #28,d0
    f848:	|      add.l 12(sp),d0
    f84c:	|      move.l d1,-(sp)
    f84e:	|      pea 1 <_start+0x1>
    f852:	|      move.l d0,-(sp)
    f854:	|      jsr 14de0 <setVariable>
    f85a:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f85e:	|      movea.l 12(sp),a0
    f862:	|      movea.l 24(a0),a0
    f866:	|      movea.l 8(a0),a0
    f86a:	|      movea.l 4(a0),a0
    f86e:	|      move.l (a0),d0
    f870:	|      movea.l 12(sp),a0
    f874:	|      movea.l 24(a0),a0
    f878:	|      movea.l 8(a0),a0
    f87c:	|      movea.l 4(a0),a2
    f880:	|      move.l d0,-(sp)
    f882:	|      jsr 14e2a <stackFindLast>
    f888:	|      addq.l #4,sp
    f88a:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f88e:	|      moveq #24,d0
    f890:	|      add.l 12(sp),d0
    f894:	|      move.l d0,-(sp)
    f896:	|      jsr 14e72 <trimStack>
    f89c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f89e:	|      moveq #24,d0
    f8a0:	|      add.l 12(sp),d0
    f8a4:	|      move.l d0,-(sp)
    f8a6:	|      jsr 14e72 <trimStack>
    f8ac:	|      addq.l #4,sp
	return BR_CONTINUE;
    f8ae:	|      moveq #2,d0
} 
    f8b0:	'----> movea.l (sp)+,a2
    f8b2:	       rts

0000f8b4 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f8b4:	       movea.l 8(sp),a0
    f8b8:	       movea.l 24(a0),a0
    f8bc:	       move.l (a0),d0
    f8be:	       moveq #6,d1
    f8c0:	       cmp.l d0,d1
    f8c2:	   ,-- beq.s f8d6 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f8c4:	   |   pea 19573 <PutChar+0x1b97>
    f8ca:	   |   jsr 16f3a <KPrintF>
    f8d0:	   |   addq.l #4,sp
		return BR_ERROR;
    f8d2:	   |   moveq #1,d0
    f8d4:	,--|-- bra.s f940 <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f8d6:	|  '-> movea.l 8(sp),a0
    f8da:	|      movea.l 24(a0),a0
    f8de:	|      movea.l 4(a0),a0
    f8e2:	|      move.l (a0),d0
    f8e4:	|  ,-- bne.s f8f8 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    f8e6:	|  |   pea 195a4 <PutChar+0x1bc8>
    f8ec:	|  |   jsr 16f3a <KPrintF>
    f8f2:	|  |   addq.l #4,sp
		return BR_ERROR;
    f8f4:	|  |   moveq #1,d0
    f8f6:	+--|-- bra.s f940 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    f8f8:	|  '-> moveq #28,d0
    f8fa:	|      add.l 8(sp),d0
    f8fe:	|      movea.l 8(sp),a0
    f902:	|      movea.l 24(a0),a0
    f906:	|      movea.l 4(a0),a0
    f90a:	|      move.l (a0),d1
    f90c:	|      move.l d0,-(sp)
    f90e:	|      move.l d1,-(sp)
    f910:	|      jsr 149a8 <copyVariable>
    f916:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    f918:	|      movea.l 8(sp),a0
    f91c:	|      movea.l 24(a0),a0
    f920:	|      move.l 4(a0),d0
    f924:	|      move.l d0,-(sp)
    f926:	|      jsr 14e72 <trimStack>
    f92c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f92e:	|      moveq #24,d0
    f930:	|      add.l 8(sp),d0
    f934:	|      move.l d0,-(sp)
    f936:	|      jsr 14e72 <trimStack>
    f93c:	|      addq.l #4,sp
	return BR_CONTINUE;
    f93e:	|      moveq #2,d0
}
    f940:	'----> rts

0000f942 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f942:	       movea.l 8(sp),a0
    f946:	       movea.l 24(a0),a0
    f94a:	       move.l (a0),d0
    f94c:	       moveq #6,d1
    f94e:	       cmp.l d0,d1
    f950:	   ,-- beq.s f964 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    f952:	   |   pea 19573 <PutChar+0x1b97>
    f958:	   |   jsr 16f3a <KPrintF>
    f95e:	   |   addq.l #4,sp
		return BR_ERROR;
    f960:	   |   moveq #1,d0
    f962:	,--|-- bra.s f9b8 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f964:	|  '-> movea.l 8(sp),a0
    f968:	|      movea.l 24(a0),a0
    f96c:	|      movea.l 4(a0),a0
    f970:	|      move.l (a0),d0
    f972:	|  ,-- bne.s f986 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    f974:	|  |   pea 195a4 <PutChar+0x1bc8>
    f97a:	|  |   jsr 16f3a <KPrintF>
    f980:	|  |   addq.l #4,sp
		return BR_ERROR;
    f982:	|  |   moveq #1,d0
    f984:	+--|-- bra.s f9b8 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    f986:	|  '-> moveq #28,d0
    f988:	|      add.l 8(sp),d0
    f98c:	|      movea.l 8(sp),a0
    f990:	|      movea.l 24(a0),a0
    f994:	|      movea.l 4(a0),a0
    f998:	|      move.l (a0),d1
    f99a:	|      move.l d0,-(sp)
    f99c:	|      move.l d1,-(sp)
    f99e:	|      jsr 149a8 <copyVariable>
    f9a4:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    f9a6:	|      moveq #24,d0
    f9a8:	|      add.l 8(sp),d0
    f9ac:	|      move.l d0,-(sp)
    f9ae:	|      jsr 14e72 <trimStack>
    f9b4:	|      addq.l #4,sp
	return BR_CONTINUE;
    f9b6:	|      moveq #2,d0
}
    f9b8:	'----> rts

0000f9ba <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f9ba:	       movea.l 8(sp),a0
    f9be:	       movea.l 24(a0),a0
    f9c2:	       move.l (a0),d0
    f9c4:	       moveq #6,d1
    f9c6:	       cmp.l d0,d1
    f9c8:	   ,-- beq.s f9dc <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    f9ca:	   |   pea 19573 <PutChar+0x1b97>
    f9d0:	   |   jsr 16f3a <KPrintF>
    f9d6:	   |   addq.l #4,sp
		return BR_ERROR;
    f9d8:	   |   moveq #1,d0
    f9da:	,--|-- bra.s fa32 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f9dc:	|  '-> movea.l 8(sp),a0
    f9e0:	|      movea.l 24(a0),a0
    f9e4:	|      movea.l 4(a0),a0
    f9e8:	|      move.l (a0),d0
    f9ea:	|  ,-- bne.s f9fe <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    f9ec:	|  |   pea 195a4 <PutChar+0x1bc8>
    f9f2:	|  |   jsr 16f3a <KPrintF>
    f9f8:	|  |   addq.l #4,sp
		return BR_ERROR;
    f9fa:	|  |   moveq #1,d0
    f9fc:	+--|-- bra.s fa32 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    f9fe:	|  '-> moveq #28,d0
    fa00:	|      add.l 8(sp),d0
    fa04:	|      movea.l 8(sp),a0
    fa08:	|      movea.l 24(a0),a0
    fa0c:	|      movea.l 4(a0),a0
    fa10:	|      move.l 4(a0),d1
    fa14:	|      move.l d0,-(sp)
    fa16:	|      move.l d1,-(sp)
    fa18:	|      jsr 149a8 <copyVariable>
    fa1e:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fa20:	|      moveq #24,d0
    fa22:	|      add.l 8(sp),d0
    fa26:	|      move.l d0,-(sp)
    fa28:	|      jsr 14e72 <trimStack>
    fa2e:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa30:	|      moveq #2,d0
}
    fa32:	'----> rts

0000fa34 <builtIn_random>:

builtIn(random)
{
    fa34:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fa36:	       movea.l 12(sp),a0
    fa3a:	       move.l 24(a0),d0
    fa3e:	       move.l d0,-(sp)
    fa40:	       pea 1 <_start+0x1>
    fa44:	       move.l sp,d0
    fa46:	       addq.l #8,d0
    fa48:	       move.l d0,-(sp)
    fa4a:	       jsr 144ee <getValueType>
    fa50:	       lea 12(sp),sp
    fa54:	       tst.w d0
    fa56:	   ,-- bne.s fa5c <builtIn_random+0x28>
		return BR_ERROR;
    fa58:	   |   moveq #1,d0
    fa5a:	,--|-- bra.s faa6 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fa5c:	|  '-> moveq #24,d0
    fa5e:	|      add.l 12(sp),d0
    fa62:	|      move.l d0,-(sp)
    fa64:	|      jsr 14e72 <trimStack>
    fa6a:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fa6c:	|      move.l (sp),d0
    fa6e:	|  ,-- bgt.s fa74 <builtIn_random+0x40>
    fa70:	|  |   moveq #1,d0
    fa72:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fa74:	|  '-> jsr 15b16 <rand>
    fa7a:	|      move.l d0,d1
    fa7c:	|      move.l (sp),d0
    fa7e:	|      move.l d0,-(sp)
    fa80:	|      move.l d1,-(sp)
    fa82:	|      jsr 179a0 <__umodsi3>
    fa88:	|      addq.l #8,sp
    fa8a:	|      move.l d0,d1
    fa8c:	|      moveq #28,d0
    fa8e:	|      add.l 12(sp),d0
    fa92:	|      move.l d1,-(sp)
    fa94:	|      pea 1 <_start+0x1>
    fa98:	|      move.l d0,-(sp)
    fa9a:	|      jsr 14de0 <setVariable>
    faa0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    faa4:	|      moveq #2,d0
}
    faa6:	'----> addq.l #4,sp
    faa8:	       rts

0000faaa <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    faaa:	nop
    faac:	rts

0000faae <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    faae:	moveq #2,d0
}
    fab0:	rts

0000fab2 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fab2:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fab4:	       movea.l 12(sp),a0
    fab8:	       move.l 24(a0),d0
    fabc:	       move.l d0,-(sp)
    fabe:	       pea 1 <_start+0x1>
    fac2:	       move.l sp,d0
    fac4:	       addq.l #8,d0
    fac6:	       move.l d0,-(sp)
    fac8:	       jsr 144ee <getValueType>
    face:	       lea 12(sp),sp
    fad2:	       tst.w d0
    fad4:	   ,-- bne.s fae8 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fad6:	   |   pea 195b7 <PutChar+0x1bdb>
    fadc:	   |   jsr 16f3a <KPrintF>
    fae2:	   |   addq.l #4,sp
		return BR_ERROR;
    fae4:	   |   moveq #1,d0
    fae6:	,--|-- bra.s fb28 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fae8:	|  '-> moveq #24,d0
    faea:	|      add.l 12(sp),d0
    faee:	|      move.l d0,-(sp)
    faf0:	|      jsr 14e72 <trimStack>
    faf6:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    faf8:	|      move.l (sp),d0
    fafa:	|      move.l d0,d0
    fafc:	|      move.w d0,1a6be <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fb02:	|      move.w 1a6be <textPaletteIndex>,d0
    fb08:	|      cmpi.w #31,d0
    fb0c:	|  ,-- bls.s fb26 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fb0e:	|  |   pea 195de <PutChar+0x1c02>
    fb14:	|  |   jsr 16f3a <KPrintF>
    fb1a:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fb1c:	|  |   clr.w 1a6be <textPaletteIndex>
		return BR_ERROR;
    fb22:	|  |   moveq #1,d0
    fb24:	+--|-- bra.s fb28 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fb26:	|  '-> moveq #2,d0
}
    fb28:	'----> addq.l #4,sp
    fb2a:	       rts

0000fb2c <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fb2c:	moveq #2,d0
}
    fb2e:	rts

0000fb30 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fb30:	moveq #2,d0
}
    fb32:	rts

0000fb34 <builtIn_setFont>:


builtIn(setFont)
{
    fb34:	       lea -16(sp),sp
    fb38:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fb3a:	       movea.l 28(sp),a0
    fb3e:	       move.l 24(a0),d0
    fb42:	       move.l d0,-(sp)
    fb44:	       pea 1 <_start+0x1>
    fb48:	       lea 12(sp),a0
    fb4c:	       move.l a0,-(sp)
    fb4e:	       jsr 144ee <getValueType>
    fb54:	       lea 12(sp),sp
    fb58:	       tst.w d0
    fb5a:	   ,-- bne.s fb62 <builtIn_setFont+0x2e>
    fb5c:	   |   moveq #1,d0
    fb5e:	,--|-- bra.w fc10 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fb62:	|  '-> moveq #24,d0
    fb64:	|      add.l 28(sp),d0
    fb68:	|      move.l d0,-(sp)
    fb6a:	|      jsr 14e72 <trimStack>
    fb70:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fb72:	|      movea.l 28(sp),a0
    fb76:	|      move.l 24(a0),d0
    fb7a:	|      move.l d0,-(sp)
    fb7c:	|      jsr 14ac4 <getTextFromAnyVar>
    fb82:	|      addq.l #4,sp
    fb84:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fb88:	|  ,-- bne.s fb90 <builtIn_setFont+0x5c>
    fb8a:	|  |   moveq #1,d0
    fb8c:	+--|-- bra.w fc10 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fb90:	|  '-> moveq #24,d0
    fb92:	|      add.l 28(sp),d0
    fb96:	|      move.l d0,-(sp)
    fb98:	|      jsr 14e72 <trimStack>
    fb9e:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fba0:	|      movea.l 28(sp),a0
    fba4:	|      move.l 24(a0),d0
    fba8:	|      move.l d0,-(sp)
    fbaa:	|      pea 5 <_start+0x5>
    fbae:	|      lea 16(sp),a0
    fbb2:	|      move.l a0,-(sp)
    fbb4:	|      jsr 144ee <getValueType>
    fbba:	|      lea 12(sp),sp
    fbbe:	|      tst.w d0
    fbc0:	|  ,-- bne.s fbc6 <builtIn_setFont+0x92>
    fbc2:	|  |   moveq #1,d0
    fbc4:	+--|-- bra.s fc10 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fbc6:	|  '-> moveq #24,d0
    fbc8:	|      add.l 28(sp),d0
    fbcc:	|      move.l d0,-(sp)
    fbce:	|      jsr 14e72 <trimStack>
    fbd4:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    fbd6:	|      move.l 4(sp),d1
    fbda:	|      move.l 8(sp),d0
    fbde:	|      move.l d1,-(sp)
    fbe0:	|      move.l 20(sp),-(sp)
    fbe4:	|      move.l d0,-(sp)
    fbe6:	|      jsr 15326 <loadFont>
    fbec:	|      lea 12(sp),sp
    fbf0:	|      tst.w d0
    fbf2:	|  ,-- bne.s fbf8 <builtIn_setFont+0xc4>
    fbf4:	|  |   moveq #1,d0
    fbf6:	+--|-- bra.s fc10 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fbf8:	|  '-> move.l 16(sp),12(sp)
    fbfe:	|      move.l 1a7a4 <SysBase>,d0
    fc04:	|      movea.l d0,a6
    fc06:	|      movea.l 12(sp),a1
    fc0a:	|      jsr -690(a6)

    return BR_CONTINUE;
    fc0e:	|      moveq #2,d0
}
    fc10:	'----> movea.l (sp)+,a6
    fc12:	       lea 16(sp),sp
    fc16:	       rts

0000fc18 <builtIn_inFont>:

builtIn(inFont)
{
    fc18:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fc1a:	       movea.l 12(sp),a0
    fc1e:	       move.l 24(a0),d0
    fc22:	       move.l d0,-(sp)
    fc24:	       jsr 14ac4 <getTextFromAnyVar>
    fc2a:	       addq.l #4,sp
    fc2c:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    fc2e:	   ,-- bne.s fc34 <builtIn_inFont+0x1c>
    fc30:	   |   moveq #1,d0
    fc32:	,--|-- bra.s fc6a <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    fc34:	|  '-> moveq #24,d0
    fc36:	|      add.l 12(sp),d0
    fc3a:	|      move.l d0,-(sp)
    fc3c:	|      jsr 14e72 <trimStack>
    fc42:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    fc44:	|      move.l (sp),-(sp)
    fc46:	|      jsr 15314 <isInFont>
    fc4c:	|      addq.l #4,sp
    fc4e:	|      movea.w d0,a0
    fc50:	|      moveq #28,d0
    fc52:	|      add.l 12(sp),d0
    fc56:	|      move.l a0,-(sp)
    fc58:	|      pea 1 <_start+0x1>
    fc5c:	|      move.l d0,-(sp)
    fc5e:	|      jsr 14de0 <setVariable>
    fc64:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fc68:	|      moveq #2,d0
}
    fc6a:	'----> addq.l #4,sp
    fc6c:	       rts

0000fc6e <builtIn_pasteString>:

builtIn(pasteString)
{
    fc6e:	       lea -16(sp),sp
    fc72:	       move.l a6,-(sp)
    fc74:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fc76:	       movea.l 32(sp),a0
    fc7a:	       move.l 24(a0),d0
    fc7e:	       move.l d0,-(sp)
    fc80:	       jsr 14ac4 <getTextFromAnyVar>
    fc86:	       addq.l #4,sp
    fc88:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    fc8c:	       moveq #24,d0
    fc8e:	       add.l 32(sp),d0
    fc92:	       move.l d0,-(sp)
    fc94:	       jsr 14e72 <trimStack>
    fc9a:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fc9c:	       movea.l 32(sp),a0
    fca0:	       move.l 24(a0),d0
    fca4:	       move.l d0,-(sp)
    fca6:	       pea 1 <_start+0x1>
    fcaa:	       lea 20(sp),a0
    fcae:	       move.l a0,-(sp)
    fcb0:	       jsr 144ee <getValueType>
    fcb6:	       lea 12(sp),sp
    fcba:	       tst.w d0
    fcbc:	   ,-- bne.s fcc4 <builtIn_pasteString+0x56>
    fcbe:	   |   moveq #1,d0
    fcc0:	,--|-- bra.w fd66 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fcc4:	|  '-> moveq #24,d0
    fcc6:	|      add.l 32(sp),d0
    fcca:	|      move.l d0,-(sp)
    fccc:	|      jsr 14e72 <trimStack>
    fcd2:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fcd4:	|      movea.l 32(sp),a0
    fcd8:	|      move.l 24(a0),d0
    fcdc:	|      move.l d0,-(sp)
    fcde:	|      pea 1 <_start+0x1>
    fce2:	|      lea 16(sp),a0
    fce6:	|      move.l a0,-(sp)
    fce8:	|      jsr 144ee <getValueType>
    fcee:	|      lea 12(sp),sp
    fcf2:	|      tst.w d0
    fcf4:	|  ,-- bne.s fcfa <builtIn_pasteString+0x8c>
    fcf6:	|  |   moveq #1,d0
    fcf8:	+--|-- bra.s fd66 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fcfa:	|  '-> moveq #24,d0
    fcfc:	|      add.l 32(sp),d0
    fd00:	|      move.l d0,-(sp)
    fd02:	|      jsr 14e72 <trimStack>
    fd08:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    fd0a:	|      move.l 8(sp),d0
    fd0e:	|      cmpi.l #65535,d0
    fd14:	|  ,-- bne.s fd34 <builtIn_pasteString+0xc6>
    fd16:	|  |   move.l 1a6f8 <winWidth>,d2
    fd1c:	|  |   move.l 20(sp),-(sp)
    fd20:	|  |   jsr 155d8 <stringWidth>
    fd26:	|  |   addq.l #4,sp
    fd28:	|  |   move.l d2,d1
    fd2a:	|  |   sub.l d0,d1
    fd2c:	|  |   move.l d1,d0
    fd2e:	|  |   lsr.l #1,d0
    fd30:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    fd34:	|  '-> move.l 12(sp),d1
    fd38:	|      move.l 8(sp),d0
    fd3c:	|      move.l d1,-(sp)
    fd3e:	|      move.l d0,-(sp)
    fd40:	|      move.l 28(sp),-(sp)
    fd44:	|      jsr 154fa <pasteStringToBackdrop>
    fd4a:	|      lea 12(sp),sp
    FreeVec(newText); 
    fd4e:	|      move.l 20(sp),16(sp)
    fd54:	|      move.l 1a7a4 <SysBase>,d0
    fd5a:	|      movea.l d0,a6
    fd5c:	|      movea.l 16(sp),a1
    fd60:	|      jsr -690(a6)
    return BR_CONTINUE;
    fd64:	|      moveq #2,d0
}
    fd66:	'----> move.l (sp)+,d2
    fd68:	       movea.l (sp)+,a6
    fd6a:	       lea 16(sp),sp
    fd6e:	       rts

0000fd70 <builtIn_anim>:

builtIn(anim)
{
    fd70:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    fd74:	       moveq #1,d0
    fd76:	       cmp.l 16(sp),d0
    fd7a:	   ,-- blt.s fd90 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    fd7c:	   |   pea 19608 <PutChar+0x1c2c>
    fd82:	   |   jsr 16f3a <KPrintF>
    fd88:	   |   addq.l #4,sp
		return BR_ERROR;
    fd8a:	   |   moveq #1,d0
    fd8c:	,--|-- bra.w fe1e <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    fd90:	|  '-> moveq #24,d1
    fd92:	|      add.l 20(sp),d1
    fd96:	|      move.l 16(sp),d0
    fd9a:	|      subq.l #1,d0
    fd9c:	|      move.l d1,-(sp)
    fd9e:	|      move.l d0,-(sp)
    fda0:	|      jsr 940e <createPersonaAnim>
    fda6:	|      addq.l #8,sp
    fda8:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fdac:	|      movea.l 20(sp),a0
    fdb0:	|      move.l 24(a0),d0
    fdb4:	|      move.l d0,-(sp)
    fdb6:	|      pea 5 <_start+0x5>
    fdba:	|      lea 8(sp),a0
    fdbe:	|      move.l a0,-(sp)
    fdc0:	|      jsr 144ee <getValueType>
    fdc6:	|      lea 12(sp),sp
    fdca:	|      tst.w d0
    fdcc:	|  ,-- bne.s fdd2 <builtIn_anim+0x62>
    fdce:	|  |   moveq #1,d0
    fdd0:	+--|-- bra.s fe1e <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    fdd2:	|  '-> moveq #24,d0
    fdd4:	|      add.l 20(sp),d0
    fdd8:	|      move.l d0,-(sp)
    fdda:	|      jsr 14e72 <trimStack>
    fde0:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    fde2:	|      move.l (sp),d0
    fde4:	|      move.l d0,-(sp)
    fde6:	|      jsr 15c78 <loadBankForAnim>
    fdec:	|      addq.l #4,sp
    fdee:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    fdf2:	|  ,-- bne.s fdf8 <builtIn_anim+0x88>
    fdf4:	|  |   moveq #1,d0
    fdf6:	+--|-- bra.s fe1e <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    fdf8:	|  '-> move.l 4(sp),-(sp)
    fdfc:	|      move.l 12(sp),-(sp)
    fe00:	|      jsr b2b8 <setBankFile>
    fe06:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    fe08:	|      moveq #28,d0
    fe0a:	|      add.l 20(sp),d0
    fe0e:	|      move.l 8(sp),-(sp)
    fe12:	|      move.l d0,-(sp)
    fe14:	|      jsr 14d9c <newAnimationVariable>
    fe1a:	|      addq.l #8,sp
	return BR_CONTINUE;
    fe1c:	|      moveq #2,d0
}
    fe1e:	'----> lea 12(sp),sp
    fe22:	       rts

0000fe24 <builtIn_costume>:

builtIn(costume)
{
    fe24:	          lea -32(sp),sp
    fe28:	          move.l a6,-(sp)
    fe2a:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    fe2c:	          moveq #8,d0
    fe2e:	          move.l d0,32(sp)
    fe32:	          clr.l 28(sp)
    fe36:	          move.l 1a7a4 <SysBase>,d0
    fe3c:	          movea.l d0,a6
    fe3e:	          move.l 32(sp),d0
    fe42:	          move.l 28(sp),d1
    fe46:	          jsr -684(a6)
    fe4a:	          move.l d0,24(sp)
    fe4e:	          move.l 24(sp),d0
    fe52:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    fe56:	      ,-- bne.s fe5e <builtIn_costume+0x3a>
    fe58:	      |   moveq #1,d0
    fe5a:	,-----|-- bra.w ff46 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    fe5e:	|     '-> move.l 44(sp),d0
    fe62:	|         pea 3 <_start+0x3>
    fe66:	|         move.l d0,-(sp)
    fe68:	|         jsr 17944 <__divsi3>
    fe6e:	|         addq.l #8,sp
    fe70:	|         movea.l 20(sp),a0
    fe74:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    fe78:	|         tst.l 44(sp)
    fe7c:	|     ,-- beq.s fe92 <builtIn_costume+0x6e>
    fe7e:	|     |   movea.l 20(sp),a0
    fe82:	|     |   move.l 4(a0),d1
    fe86:	|     |   move.l d1,d0
    fe88:	|     |   add.l d0,d0
    fe8a:	|     |   add.l d1,d0
    fe8c:	|     |   cmp.l 44(sp),d0
    fe90:	|  ,--|-- beq.s fea6 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    fe92:	|  |  '-> pea 19642 <PutChar+0x1c66>
    fe98:	|  |      jsr 16f3a <KPrintF>
    fe9e:	|  |      addq.l #4,sp
        return BR_ERROR;
    fea0:	|  |      moveq #1,d0
    fea2:	+--|----- bra.w ff46 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    fea6:	|  '----> move.l 44(sp),d0
    feaa:	|         add.l d0,d0
    feac:	|         add.l d0,d0
    feae:	|         move.l d0,16(sp)
    feb2:	|         clr.l 12(sp)
    feb6:	|         move.l 1a7a4 <SysBase>,d0
    febc:	|         movea.l d0,a6
    febe:	|         move.l 16(sp),d0
    fec2:	|         move.l 12(sp),d1
    fec6:	|         jsr -684(a6)
    feca:	|         move.l d0,8(sp)
    fece:	|         move.l 8(sp),d0
    fed2:	|         movea.l 20(sp),a0
    fed6:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    fed8:	|         movea.l 20(sp),a0
    fedc:	|         move.l (a0),d0
    fede:	|     ,-- bne.s fee4 <builtIn_costume+0xc0>
    fee0:	|     |   moveq #1,d0
    fee2:	+-----|-- bra.s ff46 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    fee4:	|     '-> move.l 44(sp),d0
    fee8:	|         subq.l #1,d0
    feea:	|         move.l d0,36(sp)
    feee:	|     ,-- bra.s ff2a <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    fef0:	|  ,--|-> movea.l 48(sp),a0
    fef4:	|  |  |   move.l 24(a0),d0
    fef8:	|  |  |   movea.l 20(sp),a0
    fefc:	|  |  |   movea.l (a0),a0
    fefe:	|  |  |   move.l 36(sp),d1
    ff02:	|  |  |   add.l d1,d1
    ff04:	|  |  |   add.l d1,d1
    ff06:	|  |  |   lea (0,a0,d1.l),a2
    ff0a:	|  |  |   move.l d0,-(sp)
    ff0c:	|  |  |   jsr 149c6 <getAnimationFromVar>
    ff12:	|  |  |   addq.l #4,sp
    ff14:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    ff16:	|  |  |   moveq #24,d0
    ff18:	|  |  |   add.l 48(sp),d0
    ff1c:	|  |  |   move.l d0,-(sp)
    ff1e:	|  |  |   jsr 14e72 <trimStack>
    ff24:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    ff26:	|  |  |   subq.l #1,36(sp)
    ff2a:	|  |  '-> tst.l 36(sp)
    ff2e:	|  '----- bge.s fef0 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    ff30:	|         moveq #28,d0
    ff32:	|         add.l 48(sp),d0
    ff36:	|         move.l 20(sp),-(sp)
    ff3a:	|         move.l d0,-(sp)
    ff3c:	|         jsr 14dbe <newCostumeVariable>
    ff42:	|         addq.l #8,sp
    return BR_CONTINUE;
    ff44:	|         moveq #2,d0
}
    ff46:	'-------> movea.l (sp)+,a2
    ff48:	          movea.l (sp)+,a6
    ff4a:	          lea 32(sp),sp
    ff4e:	          rts

0000ff50 <builtIn_launch>:

builtIn(launch)
{
    ff50:	          lea -20(sp),sp
    ff54:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    ff56:	          movea.l 32(sp),a0
    ff5a:	          move.l 24(a0),d0
    ff5e:	          move.l d0,-(sp)
    ff60:	          jsr 14ac4 <getTextFromAnyVar>
    ff66:	          addq.l #4,sp
    ff68:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    ff6c:	      ,-- bne.s ff74 <builtIn_launch+0x24>
    ff6e:	      |   moveq #1,d0
    ff70:	,-----|-- bra.w 100a2 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    ff74:	|     '-> move.l 20(sp),-(sp)
    ff78:	|         jsr 2fe <encodeFilename>
    ff7e:	|         addq.l #4,sp
    ff80:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    ff84:	|         moveq #24,d0
    ff86:	|         add.l 32(sp),d0
    ff8a:	|         move.l d0,-(sp)
    ff8c:	|         jsr 14e72 <trimStack>
    ff92:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    ff94:	|         movea.l 20(sp),a0
    ff98:	|         move.b (a0),d0
    ff9a:	|         cmpi.b #104,d0
    ff9e:	|  ,----- bne.s 10008 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    ffa0:	|  |      movea.l 20(sp),a0
    ffa4:	|  |      addq.l #1,a0
    ffa6:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    ffa8:	|  |      cmpi.b #116,d0
    ffac:	|  +----- bne.s 10008 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    ffae:	|  |      movea.l 20(sp),a0
    ffb2:	|  |      addq.l #2,a0
    ffb4:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    ffb6:	|  |      cmpi.b #116,d0
    ffba:	|  +----- bne.s 10008 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    ffbc:	|  |      movea.l 20(sp),a0
    ffc0:	|  |      addq.l #3,a0
    ffc2:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    ffc4:	|  |      cmpi.b #112,d0
    ffc8:	|  +----- bne.s 10008 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    ffca:	|  |      movea.l 20(sp),a0
    ffce:	|  |      addq.l #4,a0
    ffd0:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    ffd2:	|  |      cmpi.b #58,d0
    ffd6:	|  |  ,-- beq.s fff4 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    ffd8:	|  |  |   movea.l 20(sp),a0
    ffdc:	|  |  |   addq.l #4,a0
    ffde:	|  |  |   move.b (a0),d0
    ffe0:	|  |  |   cmpi.b #115,d0
    ffe4:	|  +--|-- bne.s 10008 <builtIn_launch+0xb8>
    ffe6:	|  |  |   movea.l 20(sp),a0
    ffea:	|  |  |   addq.l #5,a0
    ffec:	|  |  |   move.b (a0),d0
    ffee:	|  |  |   cmpi.b #58,d0
    fff2:	|  +--|-- bne.s 10008 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    fff4:	|  |  '-> move.l 20(sp),-(sp)
    fff8:	|  |      jsr b8 <copyString>
    fffe:	|  |      addq.l #4,sp
   10000:	|  |      move.l d0,1a866 <launchMe>
   10006:	|  |  ,-- bra.s 1005a <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10008:	|  '--|-> move.l 1a70c <gamePath>,d0
   1000e:	|     |   pea 1968d <PutChar+0x1cb1>
   10014:	|     |   move.l d0,-(sp)
   10016:	|     |   jsr 13a1a <joinStrings>
   1001c:	|     |   addq.l #8,sp
   1001e:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   10022:	|     |   move.l 16(sp),-(sp)
   10026:	|     |   move.l 16(sp),-(sp)
   1002a:	|     |   jsr 13a1a <joinStrings>
   10030:	|     |   addq.l #8,sp
   10032:	|     |   move.l d0,1a866 <launchMe>
        FreeVec(newText);
   10038:	|     |   move.l 16(sp),8(sp)
   1003e:	|     |   move.l 1a7a4 <SysBase>,d0
   10044:	|     |   movea.l d0,a6
   10046:	|     |   movea.l 8(sp),a1
   1004a:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   1004e:	|     |   move.l 1a866 <launchMe>,d0
   10054:	|     +-- bne.s 1005a <builtIn_launch+0x10a>
   10056:	|     |   moveq #1,d0
   10058:	+-----|-- bra.s 100a2 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   1005a:	|     '-> move.l 20(sp),4(sp)
   10060:	|         move.l 1a7a4 <SysBase>,d0
   10066:	|         movea.l d0,a6
   10068:	|         movea.l 4(sp),a1
   1006c:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   10070:	|         clr.l -(sp)
   10072:	|         jsr 3d90 <setGraphicsWindow>
   10078:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   1007a:	|         moveq #28,d0
   1007c:	|         add.l 32(sp),d0
   10080:	|         pea 1 <_start+0x1>
   10084:	|         pea 1 <_start+0x1>
   10088:	|         move.l d0,-(sp)
   1008a:	|         jsr 14de0 <setVariable>
   10090:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   10094:	|         moveq #28,d0
   10096:	|         add.l 32(sp),d0
   1009a:	|         move.l d0,1a86a <launchResult>

    return BR_KEEP_AND_PAUSE;
   100a0:	|         moveq #0,d0
}
   100a2:	'-------> movea.l (sp)+,a6
   100a4:	          lea 20(sp),sp
   100a8:	          rts

000100aa <builtIn_pause>:

builtIn(pause)
{
   100aa:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   100ac:	       movea.l 12(sp),a0
   100b0:	       move.l 24(a0),d0
   100b4:	       move.l d0,-(sp)
   100b6:	       pea 1 <_start+0x1>
   100ba:	       move.l sp,d0
   100bc:	       addq.l #8,d0
   100be:	       move.l d0,-(sp)
   100c0:	       jsr 144ee <getValueType>
   100c6:	       lea 12(sp),sp
   100ca:	       tst.w d0
   100cc:	   ,-- bne.s 100d2 <builtIn_pause+0x28>
   100ce:	   |   moveq #1,d0
   100d0:	,--|-- bra.s 10100 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   100d2:	|  '-> moveq #24,d0
   100d4:	|      add.l 12(sp),d0
   100d8:	|      move.l d0,-(sp)
   100da:	|      jsr 14e72 <trimStack>
   100e0:	|      addq.l #4,sp
	if (theTime > 0) {
   100e2:	|      move.l (sp),d0
   100e4:	|  ,-- ble.s 100fe <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   100e6:	|  |   move.l (sp),d0
   100e8:	|  |   subq.l #1,d0
   100ea:	|  |   movea.l 12(sp),a0
   100ee:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   100f2:	|  |   movea.l 12(sp),a0
   100f6:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   100fa:	|  |   moveq #0,d0
   100fc:	+--|-- bra.s 10100 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   100fe:	|  '-> moveq #2,d0
}
   10100:	'----> addq.l #4,sp
   10102:	       rts

00010104 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   10104:	jsr 44f8 <completeTimers>
	return BR_CONTINUE;
   1010a:	moveq #2,d0
}
   1010c:	rts

0001010e <builtIn_callEvent>:

builtIn(callEvent)
{
   1010e:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10112:	       movea.l 20(sp),a0
   10116:	       move.l 24(a0),d0
   1011a:	       move.l d0,-(sp)
   1011c:	       pea 7 <_start+0x7>
   10120:	       lea 8(sp),a0
   10124:	       move.l a0,-(sp)
   10126:	       jsr 144ee <getValueType>
   1012c:	       lea 12(sp),sp
   10130:	       tst.w d0
   10132:	   ,-- bne.s 1013a <builtIn_callEvent+0x2c>
   10134:	   |   moveq #1,d0
   10136:	,--|-- bra.w 101d0 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   1013a:	|  '-> moveq #24,d0
   1013c:	|      add.l 20(sp),d0
   10140:	|      move.l d0,-(sp)
   10142:	|      jsr 14e72 <trimStack>
   10148:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1014a:	|      movea.l 20(sp),a0
   1014e:	|      move.l 24(a0),d0
   10152:	|      move.l d0,-(sp)
   10154:	|      pea 7 <_start+0x7>
   10158:	|      moveq #12,d0
   1015a:	|      add.l sp,d0
   1015c:	|      move.l d0,-(sp)
   1015e:	|      jsr 144ee <getValueType>
   10164:	|      lea 12(sp),sp
   10168:	|      tst.w d0
   1016a:	|  ,-- bne.s 10170 <builtIn_callEvent+0x62>
   1016c:	|  |   moveq #1,d0
   1016e:	+--|-- bra.s 101d0 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10170:	|  '-> moveq #24,d0
   10172:	|      add.l 20(sp),d0
   10176:	|      move.l d0,-(sp)
   10178:	|      jsr 14e72 <trimStack>
   1017e:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   10180:	|      move.l (sp),d1
   10182:	|      move.l 4(sp),d0
   10186:	|      move.l d1,-(sp)
   10188:	|      move.l d0,-(sp)
   1018a:	|      jsr d288 <getCombinationFunction>
   10190:	|      addq.l #8,sp
   10192:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   10196:	|  ,-- beq.s 101b6 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   10198:	|  |   moveq #28,d0
   1019a:	|  |   add.l 20(sp),d0
   1019e:	|  |   move.l 8(sp),-(sp)
   101a2:	|  |   pea 2 <_start+0x2>
   101a6:	|  |   move.l d0,-(sp)
   101a8:	|  |   jsr 14de0 <setVariable>
   101ae:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   101b2:	|  |   moveq #4,d0
   101b4:	+--|-- bra.s 101d0 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   101b6:	|  '-> moveq #28,d0
   101b8:	|      add.l 20(sp),d0
   101bc:	|      clr.l -(sp)
   101be:	|      pea 1 <_start+0x1>
   101c2:	|      move.l d0,-(sp)
   101c4:	|      jsr 14de0 <setVariable>
   101ca:	|      lea 12(sp),sp
	return BR_CONTINUE;
   101ce:	|      moveq #2,d0
}
   101d0:	'----> lea 12(sp),sp
   101d4:	       rts

000101d6 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   101d6:	move.w #1,1a876 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   101de:	moveq #2,d0
}
   101e0:	rts

000101e2 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   101e2:	moveq #24,d0
   101e4:	add.l 8(sp),d0
   101e8:	move.l d0,-(sp)
   101ea:	jsr 14e72 <trimStack>
   101f0:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   101f2:	pea 1968f <PutChar+0x1cb3>
   101f8:	jsr 16f3a <KPrintF>
   101fe:	addq.l #4,sp
	return BR_CONTINUE;
   10200:	moveq #2,d0
}
   10202:	rts

00010204 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   10204:	pea 1968f <PutChar+0x1cb3>
   1020a:	jsr 16f3a <KPrintF>
   10210:	addq.l #4,sp
	return BR_CONTINUE;
   10212:	moveq #2,d0
}
   10214:	rts

00010216 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   10216:	pea 1968f <PutChar+0x1cb3>
   1021c:	jsr 16f3a <KPrintF>
   10222:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   10224:	moveq #2,d0
}
   10226:	rts

00010228 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   10228:	pea 1968f <PutChar+0x1cb3>
   1022e:	jsr 16f3a <KPrintF>
   10234:	addq.l #4,sp
	return BR_CONTINUE;
   10236:	moveq #2,d0
}
   10238:	rts

0001023a <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1023a:	pea 1968f <PutChar+0x1cb3>
   10240:	jsr 16f3a <KPrintF>
   10246:	addq.l #4,sp
	return BR_CONTINUE;
   10248:	moveq #2,d0
}
   1024a:	rts

0001024c <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1024c:	pea 1968f <PutChar+0x1cb3>
   10252:	jsr 16f3a <KPrintF>
   10258:	addq.l #4,sp
	return BR_CONTINUE;
   1025a:	moveq #2,d0
}
   1025c:	rts

0001025e <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   1025e:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10262:	       movea.l 20(sp),a0
   10266:	       move.l 24(a0),d0
   1026a:	       move.l d0,-(sp)
   1026c:	       pea 1 <_start+0x1>
   10270:	       moveq #16,d0
   10272:	       add.l sp,d0
   10274:	       move.l d0,-(sp)
   10276:	       jsr 144ee <getValueType>
   1027c:	       lea 12(sp),sp
   10280:	       tst.w d0
   10282:	   ,-- bne.s 1028a <builtIn_startMusic+0x2c>
   10284:	   |   moveq #1,d0
   10286:	,--|-- bra.w 1032a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1028a:	|  '-> moveq #24,d0
   1028c:	|      add.l 20(sp),d0
   10290:	|      move.l d0,-(sp)
   10292:	|      jsr 14e72 <trimStack>
   10298:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1029a:	|      movea.l 20(sp),a0
   1029e:	|      move.l 24(a0),d0
   102a2:	|      move.l d0,-(sp)
   102a4:	|      pea 1 <_start+0x1>
   102a8:	|      moveq #12,d0
   102aa:	|      add.l sp,d0
   102ac:	|      move.l d0,-(sp)
   102ae:	|      jsr 144ee <getValueType>
   102b4:	|      lea 12(sp),sp
   102b8:	|      tst.w d0
   102ba:	|  ,-- bne.s 102c0 <builtIn_startMusic+0x62>
   102bc:	|  |   moveq #1,d0
   102be:	+--|-- bra.s 1032a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   102c0:	|  '-> moveq #24,d0
   102c2:	|      add.l 20(sp),d0
   102c6:	|      move.l d0,-(sp)
   102c8:	|      jsr 14e72 <trimStack>
   102ce:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   102d0:	|      movea.l 20(sp),a0
   102d4:	|      move.l 24(a0),d0
   102d8:	|      move.l d0,-(sp)
   102da:	|      pea 5 <_start+0x5>
   102de:	|      lea 8(sp),a0
   102e2:	|      move.l a0,-(sp)
   102e4:	|      jsr 144ee <getValueType>
   102ea:	|      lea 12(sp),sp
   102ee:	|      tst.w d0
   102f0:	|  ,-- bne.s 102f6 <builtIn_startMusic+0x98>
   102f2:	|  |   moveq #1,d0
   102f4:	+--|-- bra.s 1032a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   102f6:	|  '-> moveq #24,d0
   102f8:	|      add.l 20(sp),d0
   102fc:	|      move.l d0,-(sp)
   102fe:	|      jsr 14e72 <trimStack>
   10304:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10306:	|      movea.l 8(sp),a0
   1030a:	|      move.l 4(sp),d1
   1030e:	|      move.l (sp),d0
   10310:	|      move.l a0,-(sp)
   10312:	|      move.l d1,-(sp)
   10314:	|      move.l d0,-(sp)
   10316:	|      jsr ce94 <playMOD>
   1031c:	|      lea 12(sp),sp
   10320:	|      tst.w d0
   10322:	|  ,-- bne.s 10328 <builtIn_startMusic+0xca>
   10324:	|  |   moveq #2,d0
   10326:	+--|-- bra.s 1032a <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   10328:	|  '-> moveq #2,d0
}
   1032a:	'----> lea 12(sp),sp
   1032e:	       rts

00010330 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10330:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10332:	       movea.l 12(sp),a0
   10336:	       move.l 24(a0),d0
   1033a:	       move.l d0,-(sp)
   1033c:	       pea 1 <_start+0x1>
   10340:	       move.l sp,d0
   10342:	       addq.l #8,d0
   10344:	       move.l d0,-(sp)
   10346:	       jsr 144ee <getValueType>
   1034c:	       lea 12(sp),sp
   10350:	       tst.w d0
   10352:	   ,-- bne.s 10358 <builtIn_stopMusic+0x28>
   10354:	   |   moveq #1,d0
   10356:	,--|-- bra.s 10376 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   10358:	|  '-> moveq #24,d0
   1035a:	|      add.l 12(sp),d0
   1035e:	|      move.l d0,-(sp)
   10360:	|      jsr 14e72 <trimStack>
   10366:	|      addq.l #4,sp
	stopMOD (v);
   10368:	|      move.l (sp),d0
   1036a:	|      move.l d0,-(sp)
   1036c:	|      jsr cf30 <stopMOD>
   10372:	|      addq.l #4,sp
	return BR_CONTINUE;
   10374:	|      moveq #2,d0
}
   10376:	'----> addq.l #4,sp
   10378:	       rts

0001037a <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   1037a:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1037c:	       movea.l 16(sp),a0
   10380:	       move.l 24(a0),d0
   10384:	       move.l d0,-(sp)
   10386:	       pea 1 <_start+0x1>
   1038a:	       move.l sp,d0
   1038c:	       addq.l #8,d0
   1038e:	       move.l d0,-(sp)
   10390:	       jsr 144ee <getValueType>
   10396:	       lea 12(sp),sp
   1039a:	       tst.w d0
   1039c:	   ,-- bne.s 103a2 <builtIn_setMusicVolume+0x28>
   1039e:	   |   moveq #1,d0
   103a0:	,--|-- bra.s 103fc <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   103a2:	|  '-> moveq #24,d0
   103a4:	|      add.l 16(sp),d0
   103a8:	|      move.l d0,-(sp)
   103aa:	|      jsr 14e72 <trimStack>
   103b0:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103b2:	|      movea.l 16(sp),a0
   103b6:	|      move.l 24(a0),d0
   103ba:	|      move.l d0,-(sp)
   103bc:	|      pea 1 <_start+0x1>
   103c0:	|      moveq #12,d0
   103c2:	|      add.l sp,d0
   103c4:	|      move.l d0,-(sp)
   103c6:	|      jsr 144ee <getValueType>
   103cc:	|      lea 12(sp),sp
   103d0:	|      tst.w d0
   103d2:	|  ,-- bne.s 103d8 <builtIn_setMusicVolume+0x5e>
   103d4:	|  |   moveq #1,d0
   103d6:	+--|-- bra.s 103fc <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   103d8:	|  '-> moveq #24,d0
   103da:	|      add.l 16(sp),d0
   103de:	|      move.l d0,-(sp)
   103e0:	|      jsr 14e72 <trimStack>
   103e6:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   103e8:	|      move.l (sp),d1
   103ea:	|      move.l 4(sp),d0
   103ee:	|      move.l d1,-(sp)
   103f0:	|      move.l d0,-(sp)
   103f2:	|      jsr cf16 <setMusicVolume>
   103f8:	|      addq.l #8,sp
	return BR_CONTINUE;
   103fa:	|      moveq #2,d0
}
   103fc:	'----> addq.l #8,sp
   103fe:	       rts

00010400 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10400:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10402:	       movea.l 12(sp),a0
   10406:	       move.l 24(a0),d0
   1040a:	       move.l d0,-(sp)
   1040c:	       pea 1 <_start+0x1>
   10410:	       move.l sp,d0
   10412:	       addq.l #8,d0
   10414:	       move.l d0,-(sp)
   10416:	       jsr 144ee <getValueType>
   1041c:	       lea 12(sp),sp
   10420:	       tst.w d0
   10422:	   ,-- bne.s 10428 <builtIn_setDefaultMusicVolume+0x28>
   10424:	   |   moveq #1,d0
   10426:	,--|-- bra.s 10446 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10428:	|  '-> moveq #24,d0
   1042a:	|      add.l 12(sp),d0
   1042e:	|      move.l d0,-(sp)
   10430:	|      jsr 14e72 <trimStack>
   10436:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10438:	|      move.l (sp),d0
   1043a:	|      move.l d0,-(sp)
   1043c:	|      jsr cefa <setDefaultMusicVolume>
   10442:	|      addq.l #4,sp
	return BR_CONTINUE;
   10444:	|      moveq #2,d0
}
   10446:	'----> addq.l #4,sp
   10448:	       rts

0001044a <builtIn_playSound>:

builtIn(playSound)
{
   1044a:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1044c:	       movea.l 12(sp),a0
   10450:	       move.l 24(a0),d0
   10454:	       move.l d0,-(sp)
   10456:	       pea 5 <_start+0x5>
   1045a:	       move.l sp,d0
   1045c:	       addq.l #8,d0
   1045e:	       move.l d0,-(sp)
   10460:	       jsr 144ee <getValueType>
   10466:	       lea 12(sp),sp
   1046a:	       tst.w d0
   1046c:	   ,-- bne.s 10472 <builtIn_playSound+0x28>
   1046e:	   |   moveq #1,d0
   10470:	,--|-- bra.s 1049a <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   10472:	|  '-> moveq #24,d0
   10474:	|      add.l 12(sp),d0
   10478:	|      move.l d0,-(sp)
   1047a:	|      jsr 14e72 <trimStack>
   10480:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   10482:	|      move.l (sp),d0
   10484:	|      clr.l -(sp)
   10486:	|      move.l d0,-(sp)
   10488:	|      jsr cf1e <startSound>
   1048e:	|      addq.l #8,sp
   10490:	|      tst.w d0
   10492:	|  ,-- bne.s 10498 <builtIn_playSound+0x4e>
   10494:	|  |   moveq #2,d0
   10496:	+--|-- bra.s 1049a <builtIn_playSound+0x50>
	return BR_CONTINUE;
   10498:	|  '-> moveq #2,d0
}
   1049a:	'----> addq.l #4,sp
   1049c:	       rts

0001049e <builtIn_loopSound>:

builtIn(loopSound)
{
   1049e:	             lea -28(sp),sp
   104a2:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   104a4:	             tst.l 36(sp)
   104a8:	         ,-- bgt.s 104be <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   104aa:	         |   pea 196b2 <PutChar+0x1cd6>
   104b0:	         |   jsr 16f3a <KPrintF>
   104b6:	         |   addq.l #4,sp
		return BR_ERROR;
   104b8:	         |   moveq #1,d0
   104ba:	,--------|-- bra.w 1067a <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   104be:	|        '-> moveq #1,d0
   104c0:	|            cmp.l 36(sp),d0
   104c4:	|     ,----- blt.s 10520 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   104c6:	|     |      movea.l 40(sp),a0
   104ca:	|     |      move.l 24(a0),d0
   104ce:	|     |      move.l d0,-(sp)
   104d0:	|     |      pea 5 <_start+0x5>
   104d4:	|     |      lea 16(sp),a0
   104d8:	|     |      move.l a0,-(sp)
   104da:	|     |      jsr 144ee <getValueType>
   104e0:	|     |      lea 12(sp),sp
   104e4:	|     |      tst.w d0
   104e6:	|     |  ,-- bne.s 104ee <builtIn_loopSound+0x50>
   104e8:	|     |  |   moveq #1,d0
   104ea:	+-----|--|-- bra.w 1067a <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   104ee:	|     |  '-> moveq #24,d0
   104f0:	|     |      add.l 40(sp),d0
   104f4:	|     |      move.l d0,-(sp)
   104f6:	|     |      jsr 14e72 <trimStack>
   104fc:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   104fe:	|     |      move.l 8(sp),d0
   10502:	|     |      pea 1 <_start+0x1>
   10506:	|     |      move.l d0,-(sp)
   10508:	|     |      jsr cf1e <startSound>
   1050e:	|     |      addq.l #8,sp
   10510:	|     |      tst.w d0
   10512:	|     |  ,-- bne.s 1051a <builtIn_loopSound+0x7c>
   10514:	|     |  |   moveq #2,d0
   10516:	+-----|--|-- bra.w 1067a <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   1051a:	|     |  '-> moveq #2,d0
   1051c:	+-----|----- bra.w 1067a <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10520:	|     '----> moveq #2,d1
   10522:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10526:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   1052a:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   1052e:	|            movea.l 40(sp),a0
   10532:	|            movea.l 24(a0),a0
   10536:	|            move.l (a0),d0
   10538:	|            moveq #5,d1
   1053a:	|            cmp.l d0,d1
   1053c:	|  ,-------- beq.w 10614 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10540:	|  |         movea.l 40(sp),a0
   10544:	|  |         move.l 24(a0),d0
   10548:	|  |         move.l d0,-(sp)
   1054a:	|  |         pea 1 <_start+0x1>
   1054e:	|  |         lea 12(sp),a0
   10552:	|  |         move.l a0,-(sp)
   10554:	|  |         jsr 144ee <getValueType>
   1055a:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   1055e:	|  |         moveq #24,d0
   10560:	|  |         add.l 40(sp),d0
   10564:	|  |         move.l d0,-(sp)
   10566:	|  |         jsr 14e72 <trimStack>
   1056c:	|  |         addq.l #4,sp
			numParams--;
   1056e:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10572:	|  +-------- bra.w 10614 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10576:	|  |  ,----> movea.l 40(sp),a0
   1057a:	|  |  |      move.l 24(a0),d0
   1057e:	|  |  |      move.l d0,-(sp)
   10580:	|  |  |      pea 5 <_start+0x5>
   10584:	|  |  |      lea 16(sp),a0
   10588:	|  |  |      move.l a0,-(sp)
   1058a:	|  |  |      jsr 144ee <getValueType>
   10590:	|  |  |      lea 12(sp),sp
   10594:	|  |  |      tst.w d0
   10596:	|  |  |  ,-- bne.s 105ac <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   10598:	|  |  |  |   pea 196f0 <PutChar+0x1d14>
   1059e:	|  |  |  |   jsr 16f3a <KPrintF>
   105a4:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   105a6:	|  |  |  |   moveq #1,d0
   105a8:	+--|--|--|-- bra.w 1067a <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   105ac:	|  |  |  '-> moveq #20,d0
   105ae:	|  |  |      move.l d0,20(sp)
   105b2:	|  |  |      clr.l 16(sp)
   105b6:	|  |  |      move.l 1a7a4 <SysBase>,d0
   105bc:	|  |  |      movea.l d0,a6
   105be:	|  |  |      move.l 20(sp),d0
   105c2:	|  |  |      move.l 16(sp),d1
   105c6:	|  |  |      jsr -684(a6)
   105ca:	|  |  |      move.l d0,12(sp)
   105ce:	|  |  |      move.l 12(sp),d0
   105d2:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   105d6:	|  |  |  ,-- bne.s 105de <builtIn_loopSound+0x140>
   105d8:	|  |  |  |   moveq #1,d0
   105da:	+--|--|--|-- bra.w 1067a <builtIn_loopSound+0x1dc>

			s->next = old;
   105de:	|  |  |  '-> movea.l 28(sp),a0
   105e2:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   105e8:	|  |  |      movea.l 28(sp),a0
   105ec:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   105f0:	|  |  |      move.l 8(sp),d0
   105f4:	|  |  |      movea.l 28(sp),a0
   105f8:	|  |  |      move.l d0,(a0)
			old = s;
   105fa:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10600:	|  |  |      moveq #24,d0
   10602:	|  |  |      add.l 40(sp),d0
   10606:	|  |  |      move.l d0,-(sp)
   10608:	|  |  |      jsr 14e72 <trimStack>
   1060e:	|  |  |      addq.l #4,sp
			numParams--;
   10610:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10614:	|  '--|----> tst.l 36(sp)
   10618:	|     '----- bne.w 10576 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   1061c:	|        ,-- bra.s 10628 <builtIn_loopSound+0x18a>
   1061e:	|     ,--|-> movea.l 28(sp),a0
   10622:	|     |  |   move.l 4(a0),28(sp)
   10628:	|     |  '-> movea.l 28(sp),a0
   1062c:	|     |      move.l 4(a0),d0
   10630:	|     '----- bne.s 1061e <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10632:	|            move.l 4(sp),d0
   10636:	|            moveq #1,d1
   10638:	|            cmp.l d0,d1
   1063a:	|     ,----- bge.s 10652 <builtIn_loopSound+0x1b4>
			s->next = old;
   1063c:	|     |      movea.l 28(sp),a0
   10640:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10646:	|     |      movea.l 24(sp),a0
   1064a:	|     |      move.l 28(sp),8(a0)
   10650:	|     |  ,-- bra.s 10662 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10652:	|     '--|-> move.l 4(sp),d0
   10656:	|        +-- beq.s 10662 <builtIn_loopSound+0x1c4>
			s->next = s;
   10658:	|        |   movea.l 28(sp),a0
   1065c:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10662:	|        '-> movea.l 24(sp),a0
   10666:	|            moveq #-1,d0
   10668:	|            move.l d0,16(a0)
		playSoundList(old);
   1066c:	|            move.l 24(sp),-(sp)
   10670:	|            jsr ce98 <playSoundList>
   10676:	|            addq.l #4,sp
		return BR_CONTINUE;
   10678:	|            moveq #2,d0
	}
}
   1067a:	'----------> movea.l (sp)+,a6
   1067c:	             lea 28(sp),sp
   10680:	             rts

00010682 <builtIn_stopSound>:

builtIn(stopSound)
{
   10682:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10684:	       movea.l 12(sp),a0
   10688:	       move.l 24(a0),d0
   1068c:	       move.l d0,-(sp)
   1068e:	       pea 5 <_start+0x5>
   10692:	       move.l sp,d0
   10694:	       addq.l #8,d0
   10696:	       move.l d0,-(sp)
   10698:	       jsr 144ee <getValueType>
   1069e:	       lea 12(sp),sp
   106a2:	       tst.w d0
   106a4:	   ,-- bne.s 106aa <builtIn_stopSound+0x28>
   106a6:	   |   moveq #1,d0
   106a8:	,--|-- bra.s 106c8 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   106aa:	|  '-> moveq #24,d0
   106ac:	|      add.l 12(sp),d0
   106b0:	|      move.l d0,-(sp)
   106b2:	|      jsr 14e72 <trimStack>
   106b8:	|      addq.l #4,sp
	huntKillSound (v);
   106ba:	|      move.l (sp),d0
   106bc:	|      move.l d0,-(sp)
   106be:	|      jsr ce90 <huntKillSound>
   106c4:	|      addq.l #4,sp
	return BR_CONTINUE;
   106c6:	|      moveq #2,d0
}
   106c8:	'----> addq.l #4,sp
   106ca:	       rts

000106cc <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   106cc:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106ce:	       movea.l 12(sp),a0
   106d2:	       move.l 24(a0),d0
   106d6:	       move.l d0,-(sp)
   106d8:	       pea 1 <_start+0x1>
   106dc:	       move.l sp,d0
   106de:	       addq.l #8,d0
   106e0:	       move.l d0,-(sp)
   106e2:	       jsr 144ee <getValueType>
   106e8:	       lea 12(sp),sp
   106ec:	       tst.w d0
   106ee:	   ,-- bne.s 106f4 <builtIn_setDefaultSoundVolume+0x28>
   106f0:	   |   moveq #1,d0
   106f2:	,--|-- bra.s 10712 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   106f4:	|  '-> moveq #24,d0
   106f6:	|      add.l 12(sp),d0
   106fa:	|      move.l d0,-(sp)
   106fc:	|      jsr 14e72 <trimStack>
   10702:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10704:	|      move.l (sp),d0
   10706:	|      move.l d0,-(sp)
   10708:	|      jsr cf06 <setDefaultSoundVolume>
   1070e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10710:	|      moveq #2,d0
}
   10712:	'----> addq.l #4,sp
   10714:	       rts

00010716 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10716:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10718:	       movea.l 16(sp),a0
   1071c:	       move.l 24(a0),d0
   10720:	       move.l d0,-(sp)
   10722:	       pea 1 <_start+0x1>
   10726:	       move.l sp,d0
   10728:	       addq.l #8,d0
   1072a:	       move.l d0,-(sp)
   1072c:	       jsr 144ee <getValueType>
   10732:	       lea 12(sp),sp
   10736:	       tst.w d0
   10738:	   ,-- bne.s 1073e <builtIn_setSoundVolume+0x28>
   1073a:	   |   moveq #1,d0
   1073c:	,--|-- bra.s 10798 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   1073e:	|  '-> moveq #24,d0
   10740:	|      add.l 16(sp),d0
   10744:	|      move.l d0,-(sp)
   10746:	|      jsr 14e72 <trimStack>
   1074c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1074e:	|      movea.l 16(sp),a0
   10752:	|      move.l 24(a0),d0
   10756:	|      move.l d0,-(sp)
   10758:	|      pea 5 <_start+0x5>
   1075c:	|      moveq #12,d0
   1075e:	|      add.l sp,d0
   10760:	|      move.l d0,-(sp)
   10762:	|      jsr 144ee <getValueType>
   10768:	|      lea 12(sp),sp
   1076c:	|      tst.w d0
   1076e:	|  ,-- bne.s 10774 <builtIn_setSoundVolume+0x5e>
   10770:	|  |   moveq #1,d0
   10772:	+--|-- bra.s 10798 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10774:	|  '-> moveq #24,d0
   10776:	|      add.l 16(sp),d0
   1077a:	|      move.l d0,-(sp)
   1077c:	|      jsr 14e72 <trimStack>
   10782:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10784:	|      move.l (sp),d1
   10786:	|      move.l 4(sp),d0
   1078a:	|      move.l d1,-(sp)
   1078c:	|      move.l d0,-(sp)
   1078e:	|      jsr cf1a <setSoundVolume>
   10794:	|      addq.l #8,sp
	return BR_CONTINUE;
   10796:	|      moveq #2,d0
}
   10798:	'----> addq.l #8,sp
   1079a:	       rts

0001079c <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   1079c:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107a0:	       movea.l 20(sp),a0
   107a4:	       move.l 24(a0),d0
   107a8:	       move.l d0,-(sp)
   107aa:	       pea 1 <_start+0x1>
   107ae:	       moveq #12,d0
   107b0:	       add.l sp,d0
   107b2:	       move.l d0,-(sp)
   107b4:	       jsr 144ee <getValueType>
   107ba:	       lea 12(sp),sp
   107be:	       tst.w d0
   107c0:	   ,-- bne.s 107c8 <builtIn_setSoundLoopPoints+0x2c>
   107c2:	   |   moveq #1,d0
   107c4:	,--|-- bra.w 10860 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   107c8:	|  '-> moveq #24,d0
   107ca:	|      add.l 20(sp),d0
   107ce:	|      move.l d0,-(sp)
   107d0:	|      jsr 14e72 <trimStack>
   107d6:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107d8:	|      movea.l 20(sp),a0
   107dc:	|      move.l 24(a0),d0
   107e0:	|      move.l d0,-(sp)
   107e2:	|      pea 1 <_start+0x1>
   107e6:	|      lea 8(sp),a0
   107ea:	|      move.l a0,-(sp)
   107ec:	|      jsr 144ee <getValueType>
   107f2:	|      lea 12(sp),sp
   107f6:	|      tst.w d0
   107f8:	|  ,-- bne.s 107fe <builtIn_setSoundLoopPoints+0x62>
   107fa:	|  |   moveq #1,d0
   107fc:	+--|-- bra.s 10860 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   107fe:	|  '-> moveq #24,d0
   10800:	|      add.l 20(sp),d0
   10804:	|      move.l d0,-(sp)
   10806:	|      jsr 14e72 <trimStack>
   1080c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1080e:	|      movea.l 20(sp),a0
   10812:	|      move.l 24(a0),d0
   10816:	|      move.l d0,-(sp)
   10818:	|      pea 5 <_start+0x5>
   1081c:	|      moveq #16,d0
   1081e:	|      add.l sp,d0
   10820:	|      move.l d0,-(sp)
   10822:	|      jsr 144ee <getValueType>
   10828:	|      lea 12(sp),sp
   1082c:	|      tst.w d0
   1082e:	|  ,-- bne.s 10834 <builtIn_setSoundLoopPoints+0x98>
   10830:	|  |   moveq #1,d0
   10832:	+--|-- bra.s 10860 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10834:	|  '-> moveq #24,d0
   10836:	|      add.l 20(sp),d0
   1083a:	|      move.l d0,-(sp)
   1083c:	|      jsr 14e72 <trimStack>
   10842:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10844:	|      movea.l 4(sp),a0
   10848:	|      move.l (sp),d1
   1084a:	|      move.l 8(sp),d0
   1084e:	|      move.l a0,-(sp)
   10850:	|      move.l d1,-(sp)
   10852:	|      move.l d0,-(sp)
   10854:	|      jsr cf12 <setSoundLoop>
   1085a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1085e:	|      moveq #2,d0
}
   10860:	'----> lea 12(sp),sp
   10864:	       rts

00010866 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10866:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10868:	          movea.l 12(sp),a0
   1086c:	          movea.l 24(a0),a0
   10870:	          move.l (a0),d0
   10872:	          moveq #5,d1
   10874:	          cmp.l d0,d1
   10876:	,-------- bne.s 108ba <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10878:	|         movea.l 12(sp),a0
   1087c:	|         move.l 24(a0),d0
   10880:	|         move.l d0,-(sp)
   10882:	|         pea 5 <_start+0x5>
   10886:	|         move.l sp,d0
   10888:	|         addq.l #8,d0
   1088a:	|         move.l d0,-(sp)
   1088c:	|         jsr 144ee <getValueType>
   10892:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10896:	|         moveq #24,d0
   10898:	|         add.l 12(sp),d0
   1089c:	|         move.l d0,-(sp)
   1089e:	|         jsr 14e72 <trimStack>
   108a4:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   108a6:	|         move.l (sp),d0
   108a8:	|         move.l d0,-(sp)
   108aa:	|         jsr 166e4 <setFloor>
   108b0:	|         addq.l #4,sp
   108b2:	|         tst.w d0
   108b4:	|  ,----- bne.s 108d0 <builtIn_setFloor+0x6a>
   108b6:	|  |      moveq #1,d0
   108b8:	|  |  ,-- bra.s 108d2 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   108ba:	'--|--|-> moveq #24,d0
   108bc:	   |  |   add.l 12(sp),d0
   108c0:	   |  |   move.l d0,-(sp)
   108c2:	   |  |   jsr 14e72 <trimStack>
   108c8:	   |  |   addq.l #4,sp
		setFloorNull ();
   108ca:	   |  |   jsr 16e5e <setFloorNull>
	}
	return BR_CONTINUE;
   108d0:	   '--|-> moveq #2,d0
}
   108d2:	      '-> addq.l #4,sp
   108d4:	          rts

000108d6 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   108d6:	jsr 15f7c <drawFloor>
	return BR_CONTINUE;
   108dc:	moveq #2,d0
}
   108de:	rts

000108e0 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   108e0:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   108e2:	          movea.l 12(sp),a0
   108e6:	          movea.l 24(a0),a0
   108ea:	          move.l (a0),d0
   108ec:	          moveq #5,d1
   108ee:	          cmp.l d0,d1
   108f0:	,-------- bne.s 10934 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   108f2:	|         movea.l 12(sp),a0
   108f6:	|         move.l 24(a0),d0
   108fa:	|         move.l d0,-(sp)
   108fc:	|         pea 5 <_start+0x5>
   10900:	|         move.l sp,d0
   10902:	|         addq.l #8,d0
   10904:	|         move.l d0,-(sp)
   10906:	|         jsr 144ee <getValueType>
   1090c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10910:	|         moveq #24,d0
   10912:	|         add.l 12(sp),d0
   10916:	|         move.l d0,-(sp)
   10918:	|         jsr 14e72 <trimStack>
   1091e:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10920:	|         move.l (sp),d0
   10922:	|         move.l d0,-(sp)
   10924:	|         jsr 8422 <setZBuffer>
   1092a:	|         addq.l #4,sp
   1092c:	|         tst.w d0
   1092e:	|  ,----- bne.s 1094a <builtIn_setZBuffer+0x6a>
   10930:	|  |      moveq #1,d0
   10932:	|  |  ,-- bra.s 1094c <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10934:	'--|--|-> moveq #24,d0
   10936:	   |  |   add.l 12(sp),d0
   1093a:	   |  |   move.l d0,-(sp)
   1093c:	   |  |   jsr 14e72 <trimStack>
   10942:	   |  |   addq.l #4,sp
		killZBuffer ();
   10944:	   |  |   jsr 83d6 <killZBuffer>
	}
	return BR_CONTINUE;
   1094a:	   '--|-> moveq #2,d0
}
   1094c:	      '-> addq.l #4,sp
   1094e:	          rts

00010950 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10950:	pea 19727 <PutChar+0x1d4b>
   10956:	jsr 16f3a <KPrintF>
   1095c:	addq.l #4,sp
	return BR_CONTINUE;
   1095e:	moveq #2,d0
}
   10960:	rts

00010962 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10962:	          movea.l 8(sp),a0
   10966:	          move.l 24(a0),d0
   1096a:	          move.l d0,-(sp)
   1096c:	          pea 1 <_start+0x1>
   10970:	          pea 1a872 <speechMode>
   10976:	          jsr 144ee <getValueType>
   1097c:	          lea 12(sp),sp
   10980:	          tst.w d0
   10982:	      ,-- bne.s 10988 <builtIn_setSpeechMode+0x26>
   10984:	      |   moveq #1,d0
   10986:	,-----|-- bra.s 109c0 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10988:	|     '-> moveq #24,d0
   1098a:	|         add.l 8(sp),d0
   1098e:	|         move.l d0,-(sp)
   10990:	|         jsr 14e72 <trimStack>
   10996:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10998:	|         move.l 1a872 <speechMode>,d0
   1099e:	|     ,-- bmi.s 109ac <builtIn_setSpeechMode+0x4a>
   109a0:	|     |   move.l 1a872 <speechMode>,d0
   109a6:	|     |   moveq #2,d1
   109a8:	|     |   cmp.l d0,d1
   109aa:	|  ,--|-- bge.s 109be <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   109ac:	|  |  '-> pea 19740 <PutChar+0x1d64>
   109b2:	|  |      jsr 16f3a <KPrintF>
   109b8:	|  |      addq.l #4,sp
		return BR_ERROR;
   109ba:	|  |      moveq #1,d0
   109bc:	+--|----- bra.s 109c0 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   109be:	|  '----> moveq #2,d0
}
   109c0:	'-------> rts

000109c2 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   109c2:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   109c4:	       jsr 7bde <isThereAnySpeechGoingOn>
   109ca:	       move.l d0,(sp)
	if (i == -1) {
   109cc:	       moveq #-1,d0
   109ce:	       cmp.l (sp),d0
   109d0:	,----- bne.s 109ec <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   109d2:	|      moveq #28,d0
   109d4:	|      add.l 12(sp),d0
   109d8:	|      clr.l -(sp)
   109da:	|      pea 1 <_start+0x1>
   109de:	|      move.l d0,-(sp)
   109e0:	|      jsr 14de0 <setVariable>
   109e6:	|      lea 12(sp),sp
   109ea:	|  ,-- bra.s 10a04 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   109ec:	'--|-> moveq #28,d0
   109ee:	   |   add.l 12(sp),d0
   109f2:	   |   move.l (sp),-(sp)
   109f4:	   |   pea 7 <_start+0x7>
   109f8:	   |   move.l d0,-(sp)
   109fa:	   |   jsr 14de0 <setVariable>
   10a00:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10a04:	   '-> moveq #2,d0
}
   10a06:	       addq.l #4,sp
   10a08:	       rts

00010a0a <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10a0a:	jsr 5eb2 <killSpeechTimers>
	return BR_CONTINUE;
   10a10:	moveq #2,d0
}
   10a12:	rts

00010a14 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10a14:	       move.l 1a8b8 <overRegion>,d0
   10a1a:	,----- beq.s 10a44 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10a1c:	|      movea.l 1a8b8 <overRegion>,a0
   10a22:	|      movea.l 28(a0),a0
   10a26:	|      move.l 4(a0),d1
   10a2a:	|      moveq #28,d0
   10a2c:	|      add.l 8(sp),d0
   10a30:	|      move.l d1,-(sp)
   10a32:	|      pea 7 <_start+0x7>
   10a36:	|      move.l d0,-(sp)
   10a38:	|      jsr 14de0 <setVariable>
   10a3e:	|      lea 12(sp),sp
   10a42:	|  ,-- bra.s 10a5c <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10a44:	'--|-> moveq #28,d0
   10a46:	   |   add.l 8(sp),d0
   10a4a:	   |   clr.l -(sp)
   10a4c:	   |   pea 1 <_start+0x1>
   10a50:	   |   move.l d0,-(sp)
   10a52:	   |   jsr 14de0 <setVariable>
   10a58:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10a5c:	   '-> moveq #2,d0
}
   10a5e:	       rts

00010a60 <builtIn_rename>:

builtIn(rename)
{
   10a60:	       lea -16(sp),sp
   10a64:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10a66:	       movea.l 28(sp),a0
   10a6a:	       move.l 24(a0),d0
   10a6e:	       move.l d0,-(sp)
   10a70:	       jsr 14ac4 <getTextFromAnyVar>
   10a76:	       addq.l #4,sp
   10a78:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10a7c:	   ,-- bne.s 10a82 <builtIn_rename+0x22>
   10a7e:	   |   moveq #1,d0
   10a80:	,--|-- bra.s 10afc <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10a82:	|  '-> moveq #24,d0
   10a84:	|      add.l 28(sp),d0
   10a88:	|      move.l d0,-(sp)
   10a8a:	|      jsr 14e72 <trimStack>
   10a90:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10a92:	|      movea.l 28(sp),a0
   10a96:	|      move.l 24(a0),d0
   10a9a:	|      move.l d0,-(sp)
   10a9c:	|      pea 7 <_start+0x7>
   10aa0:	|      lea 12(sp),a0
   10aa4:	|      move.l a0,-(sp)
   10aa6:	|      jsr 144ee <getValueType>
   10aac:	|      lea 12(sp),sp
   10ab0:	|      tst.w d0
   10ab2:	|  ,-- bne.s 10ab8 <builtIn_rename+0x58>
   10ab4:	|  |   moveq #1,d0
   10ab6:	+--|-- bra.s 10afc <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10ab8:	|  '-> moveq #24,d0
   10aba:	|      add.l 28(sp),d0
   10abe:	|      move.l d0,-(sp)
   10ac0:	|      jsr 14e72 <trimStack>
   10ac6:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10ac8:	|      move.l 4(sp),d0
   10acc:	|      move.l d0,-(sp)
   10ace:	|      jsr d254 <findObjectType>
   10ad4:	|      addq.l #4,sp
   10ad6:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10ada:	|      movea.l 12(sp),a0
   10ade:	|      move.l (a0),8(sp)
   10ae2:	|      move.l 1a7a4 <SysBase>,d0
   10ae8:	|      movea.l d0,a6
   10aea:	|      movea.l 8(sp),a1
   10aee:	|      jsr -690(a6)
	o->screenName = newText;
   10af2:	|      movea.l 12(sp),a0
   10af6:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10afa:	|      moveq #2,d0
}
   10afc:	'----> movea.l (sp)+,a6
   10afe:	       lea 16(sp),sp
   10b02:	       rts

00010b04 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10b04:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10b08:	          movea.l 20(sp),a0
   10b0c:	          move.l 24(a0),d0
   10b10:	          move.l d0,-(sp)
   10b12:	          pea 7 <_start+0x7>
   10b16:	          lea 8(sp),a0
   10b1a:	          move.l a0,-(sp)
   10b1c:	          jsr 144ee <getValueType>
   10b22:	          lea 12(sp),sp
   10b26:	          tst.w d0
   10b28:	      ,-- bne.s 10b30 <builtIn_getObjectX+0x2c>
   10b2a:	      |   moveq #1,d0
   10b2c:	,-----|-- bra.w 10bcc <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10b30:	|     '-> moveq #24,d0
   10b32:	|         add.l 20(sp),d0
   10b36:	|         move.l d0,-(sp)
   10b38:	|         jsr 14e72 <trimStack>
   10b3e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10b40:	|         move.l (sp),d0
   10b42:	|         move.l d0,-(sp)
   10b44:	|         jsr a352 <findPerson>
   10b4a:	|         addq.l #4,sp
   10b4c:	|         move.l d0,8(sp)
	if (pers) {
   10b50:	|     ,-- beq.s 10b7e <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10b52:	|     |   movea.l 8(sp),a0
   10b56:	|     |   move.l (a0),d0
   10b58:	|     |   move.l d0,-(sp)
   10b5a:	|     |   jsr 17304 <__fixsfsi>
   10b60:	|     |   addq.l #4,sp
   10b62:	|     |   move.l d0,d1
   10b64:	|     |   moveq #28,d0
   10b66:	|     |   add.l 20(sp),d0
   10b6a:	|     |   move.l d1,-(sp)
   10b6c:	|     |   pea 1 <_start+0x1>
   10b70:	|     |   move.l d0,-(sp)
   10b72:	|     |   jsr 14de0 <setVariable>
   10b78:	|     |   lea 12(sp),sp
   10b7c:	|  ,--|-- bra.s 10bca <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10b7e:	|  |  '-> move.l (sp),d0
   10b80:	|  |      move.l d0,-(sp)
   10b82:	|  |      jsr 15738 <getRegionForObject>
   10b88:	|  |      addq.l #4,sp
   10b8a:	|  |      move.l d0,4(sp)
		if (la) {
   10b8e:	|  |  ,-- beq.s 10bb2 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10b90:	|  |  |   movea.l 4(sp),a0
   10b94:	|  |  |   move.l 16(a0),d1
   10b98:	|  |  |   moveq #28,d0
   10b9a:	|  |  |   add.l 20(sp),d0
   10b9e:	|  |  |   move.l d1,-(sp)
   10ba0:	|  |  |   pea 1 <_start+0x1>
   10ba4:	|  |  |   move.l d0,-(sp)
   10ba6:	|  |  |   jsr 14de0 <setVariable>
   10bac:	|  |  |   lea 12(sp),sp
   10bb0:	|  +--|-- bra.s 10bca <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10bb2:	|  |  '-> moveq #28,d0
   10bb4:	|  |      add.l 20(sp),d0
   10bb8:	|  |      clr.l -(sp)
   10bba:	|  |      pea 1 <_start+0x1>
   10bbe:	|  |      move.l d0,-(sp)
   10bc0:	|  |      jsr 14de0 <setVariable>
   10bc6:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10bca:	|  '----> moveq #2,d0
}
   10bcc:	'-------> lea 12(sp),sp
   10bd0:	          rts

00010bd2 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10bd2:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10bd6:	          movea.l 20(sp),a0
   10bda:	          move.l 24(a0),d0
   10bde:	          move.l d0,-(sp)
   10be0:	          pea 7 <_start+0x7>
   10be4:	          lea 8(sp),a0
   10be8:	          move.l a0,-(sp)
   10bea:	          jsr 144ee <getValueType>
   10bf0:	          lea 12(sp),sp
   10bf4:	          tst.w d0
   10bf6:	      ,-- bne.s 10bfe <builtIn_getObjectY+0x2c>
   10bf8:	      |   moveq #1,d0
   10bfa:	,-----|-- bra.w 10c9c <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10bfe:	|     '-> moveq #24,d0
   10c00:	|         add.l 20(sp),d0
   10c04:	|         move.l d0,-(sp)
   10c06:	|         jsr 14e72 <trimStack>
   10c0c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10c0e:	|         move.l (sp),d0
   10c10:	|         move.l d0,-(sp)
   10c12:	|         jsr a352 <findPerson>
   10c18:	|         addq.l #4,sp
   10c1a:	|         move.l d0,8(sp)
	if (pers) {
   10c1e:	|     ,-- beq.s 10c4e <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10c20:	|     |   movea.l 8(sp),a0
   10c24:	|     |   move.l 4(a0),d0
   10c28:	|     |   move.l d0,-(sp)
   10c2a:	|     |   jsr 17304 <__fixsfsi>
   10c30:	|     |   addq.l #4,sp
   10c32:	|     |   move.l d0,d1
   10c34:	|     |   moveq #28,d0
   10c36:	|     |   add.l 20(sp),d0
   10c3a:	|     |   move.l d1,-(sp)
   10c3c:	|     |   pea 1 <_start+0x1>
   10c40:	|     |   move.l d0,-(sp)
   10c42:	|     |   jsr 14de0 <setVariable>
   10c48:	|     |   lea 12(sp),sp
   10c4c:	|  ,--|-- bra.s 10c9a <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10c4e:	|  |  '-> move.l (sp),d0
   10c50:	|  |      move.l d0,-(sp)
   10c52:	|  |      jsr 15738 <getRegionForObject>
   10c58:	|  |      addq.l #4,sp
   10c5a:	|  |      move.l d0,4(sp)
		if (la) {
   10c5e:	|  |  ,-- beq.s 10c82 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10c60:	|  |  |   movea.l 4(sp),a0
   10c64:	|  |  |   move.l 20(a0),d1
   10c68:	|  |  |   moveq #28,d0
   10c6a:	|  |  |   add.l 20(sp),d0
   10c6e:	|  |  |   move.l d1,-(sp)
   10c70:	|  |  |   pea 1 <_start+0x1>
   10c74:	|  |  |   move.l d0,-(sp)
   10c76:	|  |  |   jsr 14de0 <setVariable>
   10c7c:	|  |  |   lea 12(sp),sp
   10c80:	|  +--|-- bra.s 10c9a <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10c82:	|  |  '-> moveq #28,d0
   10c84:	|  |      add.l 20(sp),d0
   10c88:	|  |      clr.l -(sp)
   10c8a:	|  |      pea 1 <_start+0x1>
   10c8e:	|  |      move.l d0,-(sp)
   10c90:	|  |      jsr 14de0 <setVariable>
   10c96:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10c9a:	|  '----> moveq #2,d0
}
   10c9c:	'-------> lea 12(sp),sp
   10ca0:	          rts

00010ca2 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10ca2:	       lea -32(sp),sp
   10ca6:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10caa:	       movea.l 56(sp),a0
   10cae:	       move.l 24(a0),d0
   10cb2:	       move.l d0,-(sp)
   10cb4:	       pea 1 <_start+0x1>
   10cb8:	       lea 28(sp),a0
   10cbc:	       move.l a0,-(sp)
   10cbe:	       jsr 144ee <getValueType>
   10cc4:	       lea 12(sp),sp
   10cc8:	       tst.w d0
   10cca:	   ,-- bne.s 10cd2 <builtIn_addScreenRegion+0x30>
   10ccc:	   |   moveq #1,d0
   10cce:	,--|-- bra.w 10eac <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10cd2:	|  '-> moveq #24,d0
   10cd4:	|      add.l 56(sp),d0
   10cd8:	|      move.l d0,-(sp)
   10cda:	|      jsr 14e72 <trimStack>
   10ce0:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ce2:	|      movea.l 56(sp),a0
   10ce6:	|      move.l 24(a0),d0
   10cea:	|      move.l d0,-(sp)
   10cec:	|      pea 1 <_start+0x1>
   10cf0:	|      moveq #48,d0
   10cf2:	|      add.l sp,d0
   10cf4:	|      move.l d0,-(sp)
   10cf6:	|      jsr 144ee <getValueType>
   10cfc:	|      lea 12(sp),sp
   10d00:	|      tst.w d0
   10d02:	|  ,-- bne.s 10d0a <builtIn_addScreenRegion+0x68>
   10d04:	|  |   moveq #1,d0
   10d06:	+--|-- bra.w 10eac <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10d0a:	|  '-> moveq #24,d0
   10d0c:	|      add.l 56(sp),d0
   10d10:	|      move.l d0,-(sp)
   10d12:	|      jsr 14e72 <trimStack>
   10d18:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d1a:	|      movea.l 56(sp),a0
   10d1e:	|      move.l 24(a0),d0
   10d22:	|      move.l d0,-(sp)
   10d24:	|      pea 1 <_start+0x1>
   10d28:	|      moveq #52,d0
   10d2a:	|      add.l sp,d0
   10d2c:	|      move.l d0,-(sp)
   10d2e:	|      jsr 144ee <getValueType>
   10d34:	|      lea 12(sp),sp
   10d38:	|      tst.w d0
   10d3a:	|  ,-- bne.s 10d42 <builtIn_addScreenRegion+0xa0>
   10d3c:	|  |   moveq #1,d0
   10d3e:	+--|-- bra.w 10eac <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10d42:	|  '-> moveq #24,d0
   10d44:	|      add.l 56(sp),d0
   10d48:	|      move.l d0,-(sp)
   10d4a:	|      jsr 14e72 <trimStack>
   10d50:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d52:	|      movea.l 56(sp),a0
   10d56:	|      move.l 24(a0),d0
   10d5a:	|      move.l d0,-(sp)
   10d5c:	|      pea 1 <_start+0x1>
   10d60:	|      lea 32(sp),a0
   10d64:	|      move.l a0,-(sp)
   10d66:	|      jsr 144ee <getValueType>
   10d6c:	|      lea 12(sp),sp
   10d70:	|      tst.w d0
   10d72:	|  ,-- bne.s 10d7a <builtIn_addScreenRegion+0xd8>
   10d74:	|  |   moveq #1,d0
   10d76:	+--|-- bra.w 10eac <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10d7a:	|  '-> moveq #24,d0
   10d7c:	|      add.l 56(sp),d0
   10d80:	|      move.l d0,-(sp)
   10d82:	|      jsr 14e72 <trimStack>
   10d88:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d8a:	|      movea.l 56(sp),a0
   10d8e:	|      move.l 24(a0),d0
   10d92:	|      move.l d0,-(sp)
   10d94:	|      pea 1 <_start+0x1>
   10d98:	|      lea 36(sp),a0
   10d9c:	|      move.l a0,-(sp)
   10d9e:	|      jsr 144ee <getValueType>
   10da4:	|      lea 12(sp),sp
   10da8:	|      tst.w d0
   10daa:	|  ,-- bne.s 10db2 <builtIn_addScreenRegion+0x110>
   10dac:	|  |   moveq #1,d0
   10dae:	+--|-- bra.w 10eac <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10db2:	|  '-> moveq #24,d0
   10db4:	|      add.l 56(sp),d0
   10db8:	|      move.l d0,-(sp)
   10dba:	|      jsr 14e72 <trimStack>
   10dc0:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10dc2:	|      movea.l 56(sp),a0
   10dc6:	|      move.l 24(a0),d0
   10dca:	|      move.l d0,-(sp)
   10dcc:	|      pea 1 <_start+0x1>
   10dd0:	|      lea 40(sp),a0
   10dd4:	|      move.l a0,-(sp)
   10dd6:	|      jsr 144ee <getValueType>
   10ddc:	|      lea 12(sp),sp
   10de0:	|      tst.w d0
   10de2:	|  ,-- bne.s 10dea <builtIn_addScreenRegion+0x148>
   10de4:	|  |   moveq #1,d0
   10de6:	+--|-- bra.w 10eac <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10dea:	|  '-> moveq #24,d0
   10dec:	|      add.l 56(sp),d0
   10df0:	|      move.l d0,-(sp)
   10df2:	|      jsr 14e72 <trimStack>
   10df8:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10dfa:	|      movea.l 56(sp),a0
   10dfe:	|      move.l 24(a0),d0
   10e02:	|      move.l d0,-(sp)
   10e04:	|      pea 1 <_start+0x1>
   10e08:	|      lea 44(sp),a0
   10e0c:	|      move.l a0,-(sp)
   10e0e:	|      jsr 144ee <getValueType>
   10e14:	|      lea 12(sp),sp
   10e18:	|      tst.w d0
   10e1a:	|  ,-- bne.s 10e22 <builtIn_addScreenRegion+0x180>
   10e1c:	|  |   moveq #1,d0
   10e1e:	+--|-- bra.w 10eac <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e22:	|  '-> moveq #24,d0
   10e24:	|      add.l 56(sp),d0
   10e28:	|      move.l d0,-(sp)
   10e2a:	|      jsr 14e72 <trimStack>
   10e30:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e32:	|      movea.l 56(sp),a0
   10e36:	|      move.l 24(a0),d0
   10e3a:	|      move.l d0,-(sp)
   10e3c:	|      pea 7 <_start+0x7>
   10e40:	|      lea 24(sp),a0
   10e44:	|      move.l a0,-(sp)
   10e46:	|      jsr 144ee <getValueType>
   10e4c:	|      lea 12(sp),sp
   10e50:	|      tst.w d0
   10e52:	|  ,-- bne.s 10e58 <builtIn_addScreenRegion+0x1b6>
   10e54:	|  |   moveq #1,d0
   10e56:	+--|-- bra.s 10eac <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e58:	|  '-> moveq #24,d0
   10e5a:	|      add.l 56(sp),d0
   10e5e:	|      move.l d0,-(sp)
   10e60:	|      jsr 14e72 <trimStack>
   10e66:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   10e68:	|      move.l 16(sp),d5
   10e6c:	|      move.l 20(sp),d4
   10e70:	|      move.l 40(sp),d3
   10e74:	|      move.l 44(sp),d2
   10e78:	|      movea.l 24(sp),a1
   10e7c:	|      movea.l 28(sp),a0
   10e80:	|      move.l 32(sp),d1
   10e84:	|      move.l 36(sp),d0
   10e88:	|      move.l d5,-(sp)
   10e8a:	|      move.l d4,-(sp)
   10e8c:	|      move.l d3,-(sp)
   10e8e:	|      move.l d2,-(sp)
   10e90:	|      move.l a1,-(sp)
   10e92:	|      move.l a0,-(sp)
   10e94:	|      move.l d1,-(sp)
   10e96:	|      move.l d0,-(sp)
   10e98:	|      jsr 155f2 <addScreenRegion>
   10e9e:	|      lea 32(sp),sp
   10ea2:	|      tst.w d0
   10ea4:	|  ,-- beq.s 10eaa <builtIn_addScreenRegion+0x208>
   10ea6:	|  |   moveq #2,d0
   10ea8:	+--|-- bra.s 10eac <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   10eaa:	|  '-> moveq #1,d0

}
   10eac:	'----> movem.l (sp)+,d2-d5
   10eb0:	       lea 32(sp),sp
   10eb4:	       rts

00010eb6 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   10eb6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10eb8:	       movea.l 12(sp),a0
   10ebc:	       move.l 24(a0),d0
   10ec0:	       move.l d0,-(sp)
   10ec2:	       pea 7 <_start+0x7>
   10ec6:	       move.l sp,d0
   10ec8:	       addq.l #8,d0
   10eca:	       move.l d0,-(sp)
   10ecc:	       jsr 144ee <getValueType>
   10ed2:	       lea 12(sp),sp
   10ed6:	       tst.w d0
   10ed8:	   ,-- bne.s 10ede <builtIn_removeScreenRegion+0x28>
   10eda:	   |   moveq #1,d0
   10edc:	,--|-- bra.s 10efc <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   10ede:	|  '-> moveq #24,d0
   10ee0:	|      add.l 12(sp),d0
   10ee4:	|      move.l d0,-(sp)
   10ee6:	|      jsr 14e72 <trimStack>
   10eec:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   10eee:	|      move.l (sp),d0
   10ef0:	|      move.l d0,-(sp)
   10ef2:	|      jsr 158e0 <removeScreenRegion>
   10ef8:	|      addq.l #4,sp
	return BR_CONTINUE;
   10efa:	|      moveq #2,d0
}
   10efc:	'----> addq.l #4,sp
   10efe:	       rts

00010f00 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   10f00:	jsr 15a64 <showBoxes>
	return BR_CONTINUE;
   10f06:	moveq #2,d0
}
   10f08:	rts

00010f0a <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   10f0a:	jsr 15766 <killAllRegions>
	return BR_CONTINUE;
   10f10:	moveq #2,d0
}
   10f12:	rts

00010f14 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   10f14:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   10f18:	       movea.l 24(sp),a0
   10f1c:	       move.l 24(a0),d0
   10f20:	       move.l d0,-(sp)
   10f22:	       jsr 1419a <getCostumeFromVar>
   10f28:	       addq.l #4,sp
   10f2a:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   10f2e:	   ,-- bne.s 10f36 <builtIn_addCharacter+0x22>
   10f30:	   |   moveq #1,d0
   10f32:	,--|-- bra.w 11012 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   10f36:	|  '-> moveq #24,d0
   10f38:	|      add.l 24(sp),d0
   10f3c:	|      move.l d0,-(sp)
   10f3e:	|      jsr 14e72 <trimStack>
   10f44:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f46:	|      movea.l 24(sp),a0
   10f4a:	|      move.l 24(a0),d0
   10f4e:	|      move.l d0,-(sp)
   10f50:	|      pea 1 <_start+0x1>
   10f54:	|      lea 12(sp),a0
   10f58:	|      move.l a0,-(sp)
   10f5a:	|      jsr 144ee <getValueType>
   10f60:	|      lea 12(sp),sp
   10f64:	|      tst.w d0
   10f66:	|  ,-- bne.s 10f6e <builtIn_addCharacter+0x5a>
   10f68:	|  |   moveq #1,d0
   10f6a:	+--|-- bra.w 11012 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10f6e:	|  '-> moveq #24,d0
   10f70:	|      add.l 24(sp),d0
   10f74:	|      move.l d0,-(sp)
   10f76:	|      jsr 14e72 <trimStack>
   10f7c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f7e:	|      movea.l 24(sp),a0
   10f82:	|      move.l 24(a0),d0
   10f86:	|      move.l d0,-(sp)
   10f88:	|      pea 1 <_start+0x1>
   10f8c:	|      moveq #16,d0
   10f8e:	|      add.l sp,d0
   10f90:	|      move.l d0,-(sp)
   10f92:	|      jsr 144ee <getValueType>
   10f98:	|      lea 12(sp),sp
   10f9c:	|      tst.w d0
   10f9e:	|  ,-- bne.s 10fa4 <builtIn_addCharacter+0x90>
   10fa0:	|  |   moveq #1,d0
   10fa2:	+--|-- bra.s 11012 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10fa4:	|  '-> moveq #24,d0
   10fa6:	|      add.l 24(sp),d0
   10faa:	|      move.l d0,-(sp)
   10fac:	|      jsr 14e72 <trimStack>
   10fb2:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10fb4:	|      movea.l 24(sp),a0
   10fb8:	|      move.l 24(a0),d0
   10fbc:	|      move.l d0,-(sp)
   10fbe:	|      pea 7 <_start+0x7>
   10fc2:	|      lea 8(sp),a0
   10fc6:	|      move.l a0,-(sp)
   10fc8:	|      jsr 144ee <getValueType>
   10fce:	|      lea 12(sp),sp
   10fd2:	|      tst.w d0
   10fd4:	|  ,-- bne.s 10fda <builtIn_addCharacter+0xc6>
   10fd6:	|  |   moveq #1,d0
   10fd8:	+--|-- bra.s 11012 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10fda:	|  '-> moveq #24,d0
   10fdc:	|      add.l 24(sp),d0
   10fe0:	|      move.l d0,-(sp)
   10fe2:	|      jsr 14e72 <trimStack>
   10fe8:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   10fea:	|      movea.l (sp),a0
   10fec:	|      move.l 4(sp),d1
   10ff0:	|      move.l 8(sp),d0
   10ff4:	|      move.l 12(sp),-(sp)
   10ff8:	|      move.l a0,-(sp)
   10ffa:	|      move.l d1,-(sp)
   10ffc:	|      move.l d0,-(sp)
   10ffe:	|      jsr 8f4c <addPerson>
   11004:	|      lea 16(sp),sp
   11008:	|      tst.w d0
   1100a:	|  ,-- beq.s 11010 <builtIn_addCharacter+0xfc>
   1100c:	|  |   moveq #2,d0
   1100e:	+--|-- bra.s 11012 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   11010:	|  '-> moveq #1,d0
}
   11012:	'----> lea 16(sp),sp
   11016:	       rts

00011018 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   11018:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1101a:	       movea.l 12(sp),a0
   1101e:	       move.l 24(a0),d0
   11022:	       move.l d0,-(sp)
   11024:	       pea 7 <_start+0x7>
   11028:	       move.l sp,d0
   1102a:	       addq.l #8,d0
   1102c:	       move.l d0,-(sp)
   1102e:	       jsr 144ee <getValueType>
   11034:	       lea 12(sp),sp
   11038:	       tst.w d0
   1103a:	   ,-- bne.s 11040 <builtIn_hideCharacter+0x28>
   1103c:	   |   moveq #1,d0
   1103e:	,--|-- bra.s 11060 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   11040:	|  '-> moveq #24,d0
   11042:	|      add.l 12(sp),d0
   11046:	|      move.l d0,-(sp)
   11048:	|      jsr 14e72 <trimStack>
   1104e:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   11050:	|      move.l (sp),d0
   11052:	|      move.l d0,-(sp)
   11054:	|      clr.l -(sp)
   11056:	|      jsr b986 <setShown>
   1105c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1105e:	|      moveq #2,d0
}
   11060:	'----> addq.l #4,sp
   11062:	       rts

00011064 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   11064:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11066:	       movea.l 12(sp),a0
   1106a:	       move.l 24(a0),d0
   1106e:	       move.l d0,-(sp)
   11070:	       pea 7 <_start+0x7>
   11074:	       move.l sp,d0
   11076:	       addq.l #8,d0
   11078:	       move.l d0,-(sp)
   1107a:	       jsr 144ee <getValueType>
   11080:	       lea 12(sp),sp
   11084:	       tst.w d0
   11086:	   ,-- bne.s 1108c <builtIn_showCharacter+0x28>
   11088:	   |   moveq #1,d0
   1108a:	,--|-- bra.s 110ae <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   1108c:	|  '-> moveq #24,d0
   1108e:	|      add.l 12(sp),d0
   11092:	|      move.l d0,-(sp)
   11094:	|      jsr 14e72 <trimStack>
   1109a:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   1109c:	|      move.l (sp),d0
   1109e:	|      move.l d0,-(sp)
   110a0:	|      pea 1 <_start+0x1>
   110a4:	|      jsr b986 <setShown>
   110aa:	|      addq.l #8,sp
	return BR_CONTINUE;
   110ac:	|      moveq #2,d0
}
   110ae:	'----> addq.l #4,sp
   110b0:	       rts

000110b2 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   110b2:	jsr 5eb2 <killSpeechTimers>
	killMostPeople ();
   110b8:	jsr a7be <killMostPeople>
	return BR_CONTINUE;
   110be:	moveq #2,d0
}
   110c0:	rts

000110c2 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   110c2:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110c4:	       movea.l 16(sp),a0
   110c8:	       move.l 24(a0),d0
   110cc:	       move.l d0,-(sp)
   110ce:	       pea 1 <_start+0x1>
   110d2:	       move.l sp,d0
   110d4:	       addq.l #8,d0
   110d6:	       move.l d0,-(sp)
   110d8:	       jsr 144ee <getValueType>
   110de:	       lea 12(sp),sp
   110e2:	       tst.w d0
   110e4:	   ,-- bne.s 110ea <builtIn_setCharacterDrawMode+0x28>
   110e6:	   |   moveq #1,d0
   110e8:	,--|-- bra.s 11144 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   110ea:	|  '-> moveq #24,d0
   110ec:	|      add.l 16(sp),d0
   110f0:	|      move.l d0,-(sp)
   110f2:	|      jsr 14e72 <trimStack>
   110f8:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   110fa:	|      movea.l 16(sp),a0
   110fe:	|      move.l 24(a0),d0
   11102:	|      move.l d0,-(sp)
   11104:	|      pea 7 <_start+0x7>
   11108:	|      moveq #12,d0
   1110a:	|      add.l sp,d0
   1110c:	|      move.l d0,-(sp)
   1110e:	|      jsr 144ee <getValueType>
   11114:	|      lea 12(sp),sp
   11118:	|      tst.w d0
   1111a:	|  ,-- bne.s 11120 <builtIn_setCharacterDrawMode+0x5e>
   1111c:	|  |   moveq #1,d0
   1111e:	+--|-- bra.s 11144 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11120:	|  '-> moveq #24,d0
   11122:	|      add.l 16(sp),d0
   11126:	|      move.l d0,-(sp)
   11128:	|      jsr 14e72 <trimStack>
   1112e:	|      addq.l #4,sp
	setDrawMode (di, obj);
   11130:	|      move.l 4(sp),d1
   11134:	|      move.l (sp),d0
   11136:	|      move.l d1,-(sp)
   11138:	|      move.l d0,-(sp)
   1113a:	|      jsr b2c4 <setDrawMode>
   11140:	|      addq.l #8,sp
	return BR_CONTINUE;
   11142:	|      moveq #2,d0
}
   11144:	'----> addq.l #8,sp
   11146:	       rts

00011148 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   11148:	pea 1977e <PutChar+0x1da2>
   1114e:	jsr 16f3a <KPrintF>
   11154:	addq.l #4,sp
	return BR_CONTINUE;
   11156:	moveq #2,d0
}
   11158:	rts

0001115a <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   1115a:	pea 197b1 <PutChar+0x1dd5>
   11160:	jsr 16f3a <KPrintF>
   11166:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   11168:	moveq #2,d0
}
   1116a:	rts

0001116c <builtIn_setScale>:

builtIn(setScale)
{
   1116c:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1116e:	       movea.l 16(sp),a0
   11172:	       move.l 24(a0),d0
   11176:	       move.l d0,-(sp)
   11178:	       pea 1 <_start+0x1>
   1117c:	       move.l sp,d0
   1117e:	       addq.l #8,d0
   11180:	       move.l d0,-(sp)
   11182:	       jsr 144ee <getValueType>
   11188:	       lea 12(sp),sp
   1118c:	       tst.w d0
   1118e:	   ,-- bne.s 11194 <builtIn_setScale+0x28>
   11190:	   |   moveq #1,d0
   11192:	,--|-- bra.s 111f6 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11194:	|  '-> moveq #24,d0
   11196:	|      add.l 16(sp),d0
   1119a:	|      move.l d0,-(sp)
   1119c:	|      jsr 14e72 <trimStack>
   111a2:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111a4:	|      movea.l 16(sp),a0
   111a8:	|      move.l 24(a0),d0
   111ac:	|      move.l d0,-(sp)
   111ae:	|      pea 1 <_start+0x1>
   111b2:	|      moveq #12,d0
   111b4:	|      add.l sp,d0
   111b6:	|      move.l d0,-(sp)
   111b8:	|      jsr 144ee <getValueType>
   111be:	|      lea 12(sp),sp
   111c2:	|      tst.w d0
   111c4:	|  ,-- bne.s 111ca <builtIn_setScale+0x5e>
   111c6:	|  |   moveq #1,d0
   111c8:	+--|-- bra.s 111f6 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   111ca:	|  '-> moveq #24,d0
   111cc:	|      add.l 16(sp),d0
   111d0:	|      move.l d0,-(sp)
   111d2:	|      jsr 14e72 <trimStack>
   111d8:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   111da:	|      move.l (sp),d0
   111dc:	|      move.l d0,d0
   111de:	|      movea.w d0,a1
   111e0:	|      move.l 4(sp),d0
   111e4:	|      move.l d0,d0
   111e6:	|      movea.w d0,a0
   111e8:	|      move.l a1,-(sp)
   111ea:	|      move.l a0,-(sp)
   111ec:	|      jsr b95e <setScale>
   111f2:	|      addq.l #8,sp
	return BR_CONTINUE;
   111f4:	|      moveq #2,d0
}
   111f6:	'----> addq.l #8,sp
   111f8:	       rts

000111fa <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   111fa:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   111fc:	       movea.l 12(sp),a0
   11200:	       move.l 24(a0),d0
   11204:	       move.l d0,-(sp)
   11206:	       pea 7 <_start+0x7>
   1120a:	       move.l sp,d0
   1120c:	       addq.l #8,d0
   1120e:	       move.l d0,-(sp)
   11210:	       jsr 144ee <getValueType>
   11216:	       lea 12(sp),sp
   1121a:	       tst.w d0
   1121c:	   ,-- bne.s 11222 <builtIn_stopCharacter+0x28>
   1121e:	   |   moveq #1,d0
   11220:	,--|-- bra.s 1125a <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   11222:	|  '-> moveq #24,d0
   11224:	|      add.l 12(sp),d0
   11228:	|      move.l d0,-(sp)
   1122a:	|      jsr 14e72 <trimStack>
   11230:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   11232:	|      move.l (sp),d0
   11234:	|      move.l d0,-(sp)
   11236:	|      jsr ba92 <stopPerson>
   1123c:	|      addq.l #4,sp
   1123e:	|      movea.w d0,a0
   11240:	|      moveq #28,d0
   11242:	|      add.l 12(sp),d0
   11246:	|      move.l a0,-(sp)
   11248:	|      pea 1 <_start+0x1>
   1124c:	|      move.l d0,-(sp)
   1124e:	|      jsr 14de0 <setVariable>
   11254:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11258:	|      moveq #2,d0
}
   1125a:	'----> addq.l #4,sp
   1125c:	       rts

0001125e <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   1125e:	pea 197eb <PutChar+0x1e0f>
   11264:	jsr 16f3a <KPrintF>
   1126a:	addq.l #4,sp
	return BR_CONTINUE;
   1126c:	moveq #2,d0
}
   1126e:	rts

00011270 <builtIn_animate>:

builtIn(animate)
{
   11270:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   11272:	       movea.l 16(sp),a0
   11276:	       move.l 24(a0),d0
   1127a:	       move.l d0,-(sp)
   1127c:	       jsr 149c6 <getAnimationFromVar>
   11282:	       addq.l #4,sp
   11284:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11288:	   ,-- bne.s 1128e <builtIn_animate+0x1e>
   1128a:	   |   moveq #1,d0
   1128c:	,--|-- bra.s 1130c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   1128e:	|  '-> moveq #24,d0
   11290:	|      add.l 16(sp),d0
   11294:	|      move.l d0,-(sp)
   11296:	|      jsr 14e72 <trimStack>
   1129c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1129e:	|      movea.l 16(sp),a0
   112a2:	|      move.l 24(a0),d0
   112a6:	|      move.l d0,-(sp)
   112a8:	|      pea 7 <_start+0x7>
   112ac:	|      move.l sp,d0
   112ae:	|      addq.l #8,d0
   112b0:	|      move.l d0,-(sp)
   112b2:	|      jsr 144ee <getValueType>
   112b8:	|      lea 12(sp),sp
   112bc:	|      tst.w d0
   112be:	|  ,-- bne.s 112c4 <builtIn_animate+0x54>
   112c0:	|  |   moveq #1,d0
   112c2:	+--|-- bra.s 1130c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   112c4:	|  '-> moveq #24,d0
   112c6:	|      add.l 16(sp),d0
   112ca:	|      move.l d0,-(sp)
   112cc:	|      jsr 14e72 <trimStack>
   112d2:	|      addq.l #4,sp
	animatePerson (obj, pp);
   112d4:	|      move.l (sp),d0
   112d6:	|      move.l 4(sp),-(sp)
   112da:	|      move.l d0,-(sp)
   112dc:	|      jsr 91c2 <animatePerson>
   112e2:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   112e4:	|      move.l 4(sp),-(sp)
   112e8:	|      jsr bae6 <timeForAnim>
   112ee:	|      addq.l #4,sp
   112f0:	|      move.l d0,d1
   112f2:	|      moveq #28,d0
   112f4:	|      add.l 16(sp),d0
   112f8:	|      move.l d1,-(sp)
   112fa:	|      pea 1 <_start+0x1>
   112fe:	|      move.l d0,-(sp)
   11300:	|      jsr 14de0 <setVariable>
   11306:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1130a:	|      moveq #2,d0
}
   1130c:	'----> addq.l #8,sp
   1130e:	       rts

00011310 <builtIn_setCostume>:

builtIn(setCostume)
{
   11310:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11312:	       movea.l 16(sp),a0
   11316:	       move.l 24(a0),d0
   1131a:	       move.l d0,-(sp)
   1131c:	       jsr 1419a <getCostumeFromVar>
   11322:	       addq.l #4,sp
   11324:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11328:	   ,-- bne.s 1132e <builtIn_setCostume+0x1e>
   1132a:	   |   moveq #1,d0
   1132c:	,--|-- bra.s 11386 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1132e:	|  '-> moveq #24,d0
   11330:	|      add.l 16(sp),d0
   11334:	|      move.l d0,-(sp)
   11336:	|      jsr 14e72 <trimStack>
   1133c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1133e:	|      movea.l 16(sp),a0
   11342:	|      move.l 24(a0),d0
   11346:	|      move.l d0,-(sp)
   11348:	|      pea 7 <_start+0x7>
   1134c:	|      move.l sp,d0
   1134e:	|      addq.l #8,d0
   11350:	|      move.l d0,-(sp)
   11352:	|      jsr 144ee <getValueType>
   11358:	|      lea 12(sp),sp
   1135c:	|      tst.w d0
   1135e:	|  ,-- bne.s 11364 <builtIn_setCostume+0x54>
   11360:	|  |   moveq #1,d0
   11362:	+--|-- bra.s 11386 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11364:	|  '-> moveq #24,d0
   11366:	|      add.l 16(sp),d0
   1136a:	|      move.l d0,-(sp)
   1136c:	|      jsr 14e72 <trimStack>
   11372:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   11374:	|      move.l (sp),d0
   11376:	|      move.l 4(sp),-(sp)
   1137a:	|      move.l d0,-(sp)
   1137c:	|      jsr 920c <animatePersonUsingPersona>
   11382:	|      addq.l #8,sp
	return BR_CONTINUE;
   11384:	|      moveq #2,d0
}
   11386:	'----> addq.l #8,sp
   11388:	       rts

0001138a <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   1138a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1138c:	       movea.l 16(sp),a0
   11390:	       move.l 24(a0),d0
   11394:	       move.l d0,-(sp)
   11396:	       pea 1 <_start+0x1>
   1139a:	       move.l sp,d0
   1139c:	       addq.l #8,d0
   1139e:	       move.l d0,-(sp)
   113a0:	       jsr 144ee <getValueType>
   113a6:	       lea 12(sp),sp
   113aa:	       tst.w d0
   113ac:	   ,-- bne.s 113b2 <builtIn_floatCharacter+0x28>
   113ae:	   |   moveq #1,d0
   113b0:	,--|-- bra.s 11426 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   113b2:	|  '-> moveq #24,d0
   113b4:	|      add.l 16(sp),d0
   113b8:	|      move.l d0,-(sp)
   113ba:	|      jsr 14e72 <trimStack>
   113c0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113c2:	|      movea.l 16(sp),a0
   113c6:	|      move.l 24(a0),d0
   113ca:	|      move.l d0,-(sp)
   113cc:	|      pea 7 <_start+0x7>
   113d0:	|      moveq #12,d0
   113d2:	|      add.l sp,d0
   113d4:	|      move.l d0,-(sp)
   113d6:	|      jsr 144ee <getValueType>
   113dc:	|      lea 12(sp),sp
   113e0:	|      tst.w d0
   113e2:	|  ,-- bne.s 113e8 <builtIn_floatCharacter+0x5e>
   113e4:	|  |   moveq #1,d0
   113e6:	+--|-- bra.s 11426 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   113e8:	|  '-> moveq #24,d0
   113ea:	|      add.l 16(sp),d0
   113ee:	|      move.l d0,-(sp)
   113f0:	|      jsr 14e72 <trimStack>
   113f6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   113f8:	|      move.l 4(sp),d1
   113fc:	|      move.l (sp),d0
   113fe:	|      move.l d1,-(sp)
   11400:	|      move.l d0,-(sp)
   11402:	|      jsr a380 <floatCharacter>
   11408:	|      addq.l #8,sp
   1140a:	|      movea.w d0,a0
   1140c:	|      moveq #28,d0
   1140e:	|      add.l 16(sp),d0
   11412:	|      move.l a0,-(sp)
   11414:	|      pea 1 <_start+0x1>
   11418:	|      move.l d0,-(sp)
   1141a:	|      jsr 14de0 <setVariable>
   11420:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11424:	|      moveq #2,d0
}
   11426:	'----> addq.l #8,sp
   11428:	       rts

0001142a <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   1142a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1142c:	       movea.l 16(sp),a0
   11430:	       move.l 24(a0),d0
   11434:	       move.l d0,-(sp)
   11436:	       pea 1 <_start+0x1>
   1143a:	       move.l sp,d0
   1143c:	       addq.l #8,d0
   1143e:	       move.l d0,-(sp)
   11440:	       jsr 144ee <getValueType>
   11446:	       lea 12(sp),sp
   1144a:	       tst.w d0
   1144c:	   ,-- bne.s 11452 <builtIn_setCharacterWalkSpeed+0x28>
   1144e:	   |   moveq #1,d0
   11450:	,--|-- bra.s 114c6 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11452:	|  '-> moveq #24,d0
   11454:	|      add.l 16(sp),d0
   11458:	|      move.l d0,-(sp)
   1145a:	|      jsr 14e72 <trimStack>
   11460:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11462:	|      movea.l 16(sp),a0
   11466:	|      move.l 24(a0),d0
   1146a:	|      move.l d0,-(sp)
   1146c:	|      pea 7 <_start+0x7>
   11470:	|      moveq #12,d0
   11472:	|      add.l sp,d0
   11474:	|      move.l d0,-(sp)
   11476:	|      jsr 144ee <getValueType>
   1147c:	|      lea 12(sp),sp
   11480:	|      tst.w d0
   11482:	|  ,-- bne.s 11488 <builtIn_setCharacterWalkSpeed+0x5e>
   11484:	|  |   moveq #1,d0
   11486:	+--|-- bra.s 114c6 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11488:	|  '-> moveq #24,d0
   1148a:	|      add.l 16(sp),d0
   1148e:	|      move.l d0,-(sp)
   11490:	|      jsr 14e72 <trimStack>
   11496:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   11498:	|      move.l 4(sp),d1
   1149c:	|      move.l (sp),d0
   1149e:	|      move.l d1,-(sp)
   114a0:	|      move.l d0,-(sp)
   114a2:	|      jsr b8fa <setCharacterWalkSpeed>
   114a8:	|      addq.l #8,sp
   114aa:	|      movea.w d0,a0
   114ac:	|      moveq #28,d0
   114ae:	|      add.l 16(sp),d0
   114b2:	|      move.l a0,-(sp)
   114b4:	|      pea 1 <_start+0x1>
   114b8:	|      move.l d0,-(sp)
   114ba:	|      jsr 14de0 <setVariable>
   114c0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   114c4:	|      moveq #2,d0
}
   114c6:	'----> addq.l #8,sp
   114c8:	       rts

000114ca <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   114ca:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114cc:	       movea.l 16(sp),a0
   114d0:	       move.l 24(a0),d0
   114d4:	       move.l d0,-(sp)
   114d6:	       pea 1 <_start+0x1>
   114da:	       move.l sp,d0
   114dc:	       addq.l #8,d0
   114de:	       move.l d0,-(sp)
   114e0:	       jsr 144ee <getValueType>
   114e6:	       lea 12(sp),sp
   114ea:	       tst.w d0
   114ec:	   ,-- bne.s 114f2 <builtIn_turnCharacter+0x28>
   114ee:	   |   moveq #1,d0
   114f0:	,--|-- bra.s 11566 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   114f2:	|  '-> moveq #24,d0
   114f4:	|      add.l 16(sp),d0
   114f8:	|      move.l d0,-(sp)
   114fa:	|      jsr 14e72 <trimStack>
   11500:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11502:	|      movea.l 16(sp),a0
   11506:	|      move.l 24(a0),d0
   1150a:	|      move.l d0,-(sp)
   1150c:	|      pea 7 <_start+0x7>
   11510:	|      moveq #12,d0
   11512:	|      add.l sp,d0
   11514:	|      move.l d0,-(sp)
   11516:	|      jsr 144ee <getValueType>
   1151c:	|      lea 12(sp),sp
   11520:	|      tst.w d0
   11522:	|  ,-- bne.s 11528 <builtIn_turnCharacter+0x5e>
   11524:	|  |   moveq #1,d0
   11526:	+--|-- bra.s 11566 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11528:	|  '-> moveq #24,d0
   1152a:	|      add.l 16(sp),d0
   1152e:	|      move.l d0,-(sp)
   11530:	|      jsr 14e72 <trimStack>
   11536:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11538:	|      move.l (sp),d1
   1153a:	|      move.l 4(sp),d0
   1153e:	|      move.l d1,-(sp)
   11540:	|      move.l d0,-(sp)
   11542:	|      jsr bb9e <turnPersonToFace>
   11548:	|      addq.l #8,sp
   1154a:	|      movea.w d0,a0
   1154c:	|      moveq #28,d0
   1154e:	|      add.l 16(sp),d0
   11552:	|      move.l a0,-(sp)
   11554:	|      pea 1 <_start+0x1>
   11558:	|      move.l d0,-(sp)
   1155a:	|      jsr 14de0 <setVariable>
   11560:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11564:	|      moveq #2,d0
}
   11566:	'----> addq.l #8,sp
   11568:	       rts

0001156a <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   1156a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1156c:	       movea.l 16(sp),a0
   11570:	       move.l 24(a0),d0
   11574:	       move.l d0,-(sp)
   11576:	       pea 1 <_start+0x1>
   1157a:	       move.l sp,d0
   1157c:	       addq.l #8,d0
   1157e:	       move.l d0,-(sp)
   11580:	       jsr 144ee <getValueType>
   11586:	       lea 12(sp),sp
   1158a:	       tst.w d0
   1158c:	   ,-- bne.s 11592 <builtIn_setCharacterExtra+0x28>
   1158e:	   |   moveq #1,d0
   11590:	,--|-- bra.s 11606 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11592:	|  '-> moveq #24,d0
   11594:	|      add.l 16(sp),d0
   11598:	|      move.l d0,-(sp)
   1159a:	|      jsr 14e72 <trimStack>
   115a0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   115a2:	|      movea.l 16(sp),a0
   115a6:	|      move.l 24(a0),d0
   115aa:	|      move.l d0,-(sp)
   115ac:	|      pea 7 <_start+0x7>
   115b0:	|      moveq #12,d0
   115b2:	|      add.l sp,d0
   115b4:	|      move.l d0,-(sp)
   115b6:	|      jsr 144ee <getValueType>
   115bc:	|      lea 12(sp),sp
   115c0:	|      tst.w d0
   115c2:	|  ,-- bne.s 115c8 <builtIn_setCharacterExtra+0x5e>
   115c4:	|  |   moveq #1,d0
   115c6:	+--|-- bra.s 11606 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   115c8:	|  '-> moveq #24,d0
   115ca:	|      add.l 16(sp),d0
   115ce:	|      move.l d0,-(sp)
   115d0:	|      jsr 14e72 <trimStack>
   115d6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   115d8:	|      move.l (sp),d1
   115da:	|      move.l 4(sp),d0
   115de:	|      move.l d1,-(sp)
   115e0:	|      move.l d0,-(sp)
   115e2:	|      jsr b928 <setPersonExtra>
   115e8:	|      addq.l #8,sp
   115ea:	|      movea.w d0,a0
   115ec:	|      moveq #28,d0
   115ee:	|      add.l 16(sp),d0
   115f2:	|      move.l a0,-(sp)
   115f4:	|      pea 1 <_start+0x1>
   115f8:	|      move.l d0,-(sp)
   115fa:	|      jsr 14de0 <setVariable>
   11600:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11604:	|      moveq #2,d0
}
   11606:	'----> addq.l #8,sp
   11608:	       rts

0001160a <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   1160a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1160c:	       movea.l 12(sp),a0
   11610:	       move.l 24(a0),d0
   11614:	       move.l d0,-(sp)
   11616:	       pea 7 <_start+0x7>
   1161a:	       move.l sp,d0
   1161c:	       addq.l #8,d0
   1161e:	       move.l d0,-(sp)
   11620:	       jsr 144ee <getValueType>
   11626:	       lea 12(sp),sp
   1162a:	       tst.w d0
   1162c:	   ,-- bne.s 11632 <builtIn_removeCharacter+0x28>
   1162e:	   |   moveq #1,d0
   11630:	,--|-- bra.s 11650 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11632:	|  '-> moveq #24,d0
   11634:	|      add.l 12(sp),d0
   11638:	|      move.l d0,-(sp)
   1163a:	|      jsr 14e72 <trimStack>
   11640:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11642:	|      move.l (sp),d0
   11644:	|      move.l d0,-(sp)
   11646:	|      jsr ab28 <removeOneCharacter>
   1164c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1164e:	|      moveq #2,d0
}
   11650:	'----> addq.l #4,sp
   11652:	       rts

00011654 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11654:	                lea -28(sp),sp
   11658:	                move.l d2,-(sp)
   1165a:	                move.l 44(sp),d1
   1165e:	                move.l 48(sp),d0
   11662:	                move.w d1,d1
   11664:	                move.w d1,6(sp)
   11668:	                move.w d0,d0
   1166a:	                move.w d0,4(sp)
	switch (numParams) {
   1166e:	                moveq #2,d0
   11670:	                cmp.l 36(sp),d0
   11674:	      ,-------- beq.w 117b6 <moveChr+0x162>
   11678:	      |         moveq #3,d0
   1167a:	      |         cmp.l 36(sp),d0
   1167e:	,-----|-------- bne.w 118ea <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11682:	|     |         movea.l 40(sp),a0
   11686:	|     |         move.l 24(a0),d0
   1168a:	|     |         move.l d0,-(sp)
   1168c:	|     |         pea 1 <_start+0x1>
   11690:	|     |         lea 20(sp),a0
   11694:	|     |         move.l a0,-(sp)
   11696:	|     |         jsr 144ee <getValueType>
   1169c:	|     |         lea 12(sp),sp
   116a0:	|     |         tst.w d0
   116a2:	|     |     ,-- bne.s 116aa <moveChr+0x56>
   116a4:	|     |     |   moveq #1,d0
   116a6:	|  ,--|-----|-- bra.w 118fa <moveChr+0x2a6>
			trimStack (&fun -> stack);
   116aa:	|  |  |     '-> moveq #24,d0
   116ac:	|  |  |         add.l 40(sp),d0
   116b0:	|  |  |         move.l d0,-(sp)
   116b2:	|  |  |         jsr 14e72 <trimStack>
   116b8:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   116ba:	|  |  |         movea.l 40(sp),a0
   116be:	|  |  |         move.l 24(a0),d0
   116c2:	|  |  |         move.l d0,-(sp)
   116c4:	|  |  |         pea 1 <_start+0x1>
   116c8:	|  |  |         lea 24(sp),a0
   116cc:	|  |  |         move.l a0,-(sp)
   116ce:	|  |  |         jsr 144ee <getValueType>
   116d4:	|  |  |         lea 12(sp),sp
   116d8:	|  |  |         tst.w d0
   116da:	|  |  |     ,-- bne.s 116e2 <moveChr+0x8e>
   116dc:	|  |  |     |   moveq #1,d0
   116de:	|  +--|-----|-- bra.w 118fa <moveChr+0x2a6>
			trimStack (&fun -> stack);
   116e2:	|  |  |     '-> moveq #24,d0
   116e4:	|  |  |         add.l 40(sp),d0
   116e8:	|  |  |         move.l d0,-(sp)
   116ea:	|  |  |         jsr 14e72 <trimStack>
   116f0:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116f2:	|  |  |         movea.l 40(sp),a0
   116f6:	|  |  |         move.l 24(a0),d0
   116fa:	|  |  |         move.l d0,-(sp)
   116fc:	|  |  |         pea 7 <_start+0x7>
   11700:	|  |  |         lea 16(sp),a0
   11704:	|  |  |         move.l a0,-(sp)
   11706:	|  |  |         jsr 144ee <getValueType>
   1170c:	|  |  |         lea 12(sp),sp
   11710:	|  |  |         tst.w d0
   11712:	|  |  |     ,-- bne.s 1171a <moveChr+0xc6>
   11714:	|  |  |     |   moveq #1,d0
   11716:	|  +--|-----|-- bra.w 118fa <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1171a:	|  |  |     '-> moveq #24,d0
   1171c:	|  |  |         add.l 40(sp),d0
   11720:	|  |  |         move.l d0,-(sp)
   11722:	|  |  |         jsr 14e72 <trimStack>
   11728:	|  |  |         addq.l #4,sp

			if (force) {
   1172a:	|  |  |         tst.w 6(sp)
   1172e:	|  |  |     ,-- beq.s 1175e <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11730:	|  |  |     |   movea.l 8(sp),a0
   11734:	|  |  |     |   move.l 12(sp),d1
   11738:	|  |  |     |   move.l 16(sp),d0
   1173c:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4da6>
   11740:	|  |  |     |   move.l 44(sp),-(sp)
   11744:	|  |  |     |   move.l a0,-(sp)
   11746:	|  |  |     |   move.l d1,-(sp)
   11748:	|  |  |     |   move.l d0,-(sp)
   1174a:	|  |  |     |   jsr a3a4 <forceWalkingPerson>
   11750:	|  |  |     |   lea 20(sp),sp
   11754:	|  |  |     |   tst.w d0
   11756:	|  |  |  ,--|-- beq.s 117b0 <moveChr+0x15c>
   11758:	|  |  |  |  |   moveq #3,d0
   1175a:	|  +--|--|--|-- bra.w 118fa <moveChr+0x2a6>
			} else if (immediate) {
   1175e:	|  |  |  |  '-> tst.w 4(sp)
   11762:	|  |  |  |  ,-- beq.s 11782 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11764:	|  |  |  |  |   movea.l 8(sp),a0
   11768:	|  |  |  |  |   move.l 12(sp),d1
   1176c:	|  |  |  |  |   move.l 16(sp),d0
   11770:	|  |  |  |  |   move.l a0,-(sp)
   11772:	|  |  |  |  |   move.l d1,-(sp)
   11774:	|  |  |  |  |   move.l d0,-(sp)
   11776:	|  |  |  |  |   jsr a6ac <jumpPerson>
   1177c:	|  |  |  |  |   lea 12(sp),sp
   11780:	|  |  |  +--|-- bra.s 117b0 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11782:	|  |  |  |  '-> movea.l 8(sp),a0
   11786:	|  |  |  |      move.l 12(sp),d1
   1178a:	|  |  |  |      move.l 16(sp),d0
   1178e:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4da6>
   11792:	|  |  |  |      move.l 44(sp),-(sp)
   11796:	|  |  |  |      move.l a0,-(sp)
   11798:	|  |  |  |      move.l d1,-(sp)
   1179a:	|  |  |  |      move.l d0,-(sp)
   1179c:	|  |  |  |      jsr a87c <makeWalkingPerson>
   117a2:	|  |  |  |      lea 20(sp),sp
   117a6:	|  |  |  |      tst.w d0
   117a8:	|  |  |  +----- beq.s 117b0 <moveChr+0x15c>
   117aa:	|  |  |  |      moveq #3,d0
   117ac:	|  +--|--|----- bra.w 118fa <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   117b0:	|  |  |  '----> moveq #2,d0
   117b2:	|  +--|-------- bra.w 118fa <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117b6:	|  |  '-------> movea.l 40(sp),a0
   117ba:	|  |            move.l 24(a0),d0
   117be:	|  |            move.l d0,-(sp)
   117c0:	|  |            pea 7 <_start+0x7>
   117c4:	|  |            moveq #32,d0
   117c6:	|  |            add.l sp,d0
   117c8:	|  |            move.l d0,-(sp)
   117ca:	|  |            jsr 144ee <getValueType>
   117d0:	|  |            lea 12(sp),sp
   117d4:	|  |            tst.w d0
   117d6:	|  |        ,-- bne.s 117de <moveChr+0x18a>
   117d8:	|  |        |   moveq #1,d0
   117da:	|  +--------|-- bra.w 118fa <moveChr+0x2a6>
			trimStack (&fun -> stack);
   117de:	|  |        '-> moveq #24,d0
   117e0:	|  |            add.l 40(sp),d0
   117e4:	|  |            move.l d0,-(sp)
   117e6:	|  |            jsr 14e72 <trimStack>
   117ec:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117ee:	|  |            movea.l 40(sp),a0
   117f2:	|  |            move.l 24(a0),d0
   117f6:	|  |            move.l d0,-(sp)
   117f8:	|  |            pea 7 <_start+0x7>
   117fc:	|  |            lea 28(sp),a0
   11800:	|  |            move.l a0,-(sp)
   11802:	|  |            jsr 144ee <getValueType>
   11808:	|  |            lea 12(sp),sp
   1180c:	|  |            tst.w d0
   1180e:	|  |        ,-- bne.s 11816 <moveChr+0x1c2>
   11810:	|  |        |   moveq #1,d0
   11812:	|  +--------|-- bra.w 118fa <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11816:	|  |        '-> moveq #24,d0
   11818:	|  |            add.l 40(sp),d0
   1181c:	|  |            move.l d0,-(sp)
   1181e:	|  |            jsr 14e72 <trimStack>
   11824:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11826:	|  |            move.l 24(sp),d0
   1182a:	|  |            move.l d0,-(sp)
   1182c:	|  |            jsr 15738 <getRegionForObject>
   11832:	|  |            addq.l #4,sp
   11834:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11838:	|  |        ,-- bne.s 11840 <moveChr+0x1ec>
   1183a:	|  |        |   moveq #2,d0
   1183c:	|  +--------|-- bra.w 118fa <moveChr+0x2a6>

			if (force)
   11840:	|  |        '-> tst.w 6(sp)
   11844:	|  |        ,-- beq.s 11880 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11846:	|  |        |   movea.l 28(sp),a0
   1184a:	|  |        |   move.l 24(a0),d2
   1184e:	|  |        |   movea.l 20(sp),a1
   11852:	|  |        |   movea.l 28(sp),a0
   11856:	|  |        |   move.l 20(a0),d1
   1185a:	|  |        |   movea.l 28(sp),a0
   1185e:	|  |        |   move.l 16(a0),d0
   11862:	|  |        |   move.l d2,-(sp)
   11864:	|  |        |   move.l 44(sp),-(sp)
   11868:	|  |        |   move.l a1,-(sp)
   1186a:	|  |        |   move.l d1,-(sp)
   1186c:	|  |        |   move.l d0,-(sp)
   1186e:	|  |        |   jsr a3a4 <forceWalkingPerson>
   11874:	|  |        |   lea 20(sp),sp
   11878:	|  |        |   tst.w d0
   1187a:	|  |     ,--|-- beq.s 118e6 <moveChr+0x292>
   1187c:	|  |     |  |   moveq #3,d0
   1187e:	|  +-----|--|-- bra.s 118fa <moveChr+0x2a6>
			}
			else if (immediate)
   11880:	|  |     |  '-> tst.w 4(sp)
   11884:	|  |     |  ,-- beq.s 118ac <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11886:	|  |     |  |   movea.l 20(sp),a1
   1188a:	|  |     |  |   movea.l 28(sp),a0
   1188e:	|  |     |  |   move.l 20(a0),d1
   11892:	|  |     |  |   movea.l 28(sp),a0
   11896:	|  |     |  |   move.l 16(a0),d0
   1189a:	|  |     |  |   move.l a1,-(sp)
   1189c:	|  |     |  |   move.l d1,-(sp)
   1189e:	|  |     |  |   move.l d0,-(sp)
   118a0:	|  |     |  |   jsr a6ac <jumpPerson>
   118a6:	|  |     |  |   lea 12(sp),sp
   118aa:	|  |     +--|-- bra.s 118e6 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   118ac:	|  |     |  '-> movea.l 28(sp),a0
   118b0:	|  |     |      move.l 24(a0),d2
   118b4:	|  |     |      movea.l 20(sp),a1
   118b8:	|  |     |      movea.l 28(sp),a0
   118bc:	|  |     |      move.l 20(a0),d1
   118c0:	|  |     |      movea.l 28(sp),a0
   118c4:	|  |     |      move.l 16(a0),d0
   118c8:	|  |     |      move.l d2,-(sp)
   118ca:	|  |     |      move.l 44(sp),-(sp)
   118ce:	|  |     |      move.l a1,-(sp)
   118d0:	|  |     |      move.l d1,-(sp)
   118d2:	|  |     |      move.l d0,-(sp)
   118d4:	|  |     |      jsr a87c <makeWalkingPerson>
   118da:	|  |     |      lea 20(sp),sp
   118de:	|  |     |      tst.w d0
   118e0:	|  |     +----- beq.s 118e6 <moveChr+0x292>
   118e2:	|  |     |      moveq #3,d0
   118e4:	|  +-----|----- bra.s 118fa <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   118e6:	|  |     '----> moveq #2,d0
   118e8:	|  +----------- bra.s 118fa <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   118ea:	'--|----------> pea 19809 <PutChar+0x1e2d>
   118f0:	   |            jsr 16f3a <KPrintF>
   118f6:	   |            addq.l #4,sp
			return BR_ERROR;
   118f8:	   |            moveq #1,d0
	}
}
   118fa:	   '----------> move.l (sp)+,d2
   118fc:	                lea 28(sp),sp
   11900:	                rts

00011902 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11902:	clr.l -(sp)
   11904:	clr.l -(sp)
   11906:	move.l 16(sp),-(sp)
   1190a:	move.l 16(sp),-(sp)
   1190e:	jsr 11654 <moveChr>
   11914:	lea 16(sp),sp
}
   11918:	rts

0001191a <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   1191a:	clr.l -(sp)
   1191c:	pea 1 <_start+0x1>
   11920:	move.l 16(sp),-(sp)
   11924:	move.l 16(sp),-(sp)
   11928:	jsr 11654 <moveChr>
   1192e:	lea 16(sp),sp
}
   11932:	rts

00011934 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11934:	pea 1 <_start+0x1>
   11938:	clr.l -(sp)
   1193a:	move.l 16(sp),-(sp)
   1193e:	move.l 16(sp),-(sp)
   11942:	jsr 11654 <moveChr>
   11948:	lea 16(sp),sp
}
   1194c:	rts

0001194e <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   1194e:	jsr 75b2 <clearStatusBar>
	return BR_CONTINUE;
   11954:	moveq #2,d0
}
   11956:	rts

00011958 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11958:	jsr 765a <killLastStatus>
	return BR_CONTINUE;
   1195e:	moveq #2,d0
}
   11960:	rts

00011962 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11962:	jsr 7548 <addStatusBar>
	return BR_CONTINUE;
   11968:	moveq #2,d0
}
   1196a:	rts

0001196c <builtIn_statusText>:

builtIn(statusText)
{
   1196c:	       subq.l #8,sp
   1196e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11970:	       movea.l 20(sp),a0
   11974:	       move.l 24(a0),d0
   11978:	       move.l d0,-(sp)
   1197a:	       jsr 14ac4 <getTextFromAnyVar>
   11980:	       addq.l #4,sp
   11982:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11986:	   ,-- bne.s 1198c <builtIn_statusText+0x20>
   11988:	   |   moveq #1,d0
   1198a:	,--|-- bra.s 119c0 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   1198c:	|  '-> moveq #24,d0
   1198e:	|      add.l 20(sp),d0
   11992:	|      move.l d0,-(sp)
   11994:	|      jsr 14e72 <trimStack>
   1199a:	|      addq.l #4,sp
	setStatusBar(newText);
   1199c:	|      move.l 8(sp),-(sp)
   119a0:	|      jsr 78da <setStatusBar>
   119a6:	|      addq.l #4,sp
	FreeVec(newText);
   119a8:	|      move.l 8(sp),4(sp)
   119ae:	|      move.l 1a7a4 <SysBase>,d0
   119b4:	|      movea.l d0,a6
   119b6:	|      movea.l 4(sp),a1
   119ba:	|      jsr -690(a6)
	return BR_CONTINUE;
   119be:	|      moveq #2,d0
}
   119c0:	'----> movea.l (sp)+,a6
   119c2:	       addq.l #8,sp
   119c4:	       rts

000119c6 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   119c6:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   119c8:	       movea.l 12(sp),a0
   119cc:	       move.l 24(a0),d0
   119d0:	       move.l d0,-(sp)
   119d2:	       pea 1 <_start+0x1>
   119d6:	       move.l sp,d0
   119d8:	       addq.l #8,d0
   119da:	       move.l d0,-(sp)
   119dc:	       jsr 144ee <getValueType>
   119e2:	       lea 12(sp),sp
   119e6:	       tst.w d0
   119e8:	   ,-- bne.s 119ee <builtIn_lightStatus+0x28>
   119ea:	   |   moveq #1,d0
   119ec:	,--|-- bra.s 11a0c <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   119ee:	|  '-> moveq #24,d0
   119f0:	|      add.l 12(sp),d0
   119f4:	|      move.l d0,-(sp)
   119f6:	|      jsr 14e72 <trimStack>
   119fc:	|      addq.l #4,sp
	setLitStatus (val);
   119fe:	|      move.l (sp),d0
   11a00:	|      move.l d0,-(sp)
   11a02:	|      jsr 78ca <setLitStatus>
   11a08:	|      addq.l #4,sp
	return BR_CONTINUE;
   11a0a:	|      moveq #2,d0
}
   11a0c:	'----> addq.l #4,sp
   11a0e:	       rts

00011a10 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11a10:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a12:	       movea.l 16(sp),a0
   11a16:	       move.l 24(a0),d0
   11a1a:	       move.l d0,-(sp)
   11a1c:	       pea 1 <_start+0x1>
   11a20:	       move.l sp,d0
   11a22:	       addq.l #8,d0
   11a24:	       move.l d0,-(sp)
   11a26:	       jsr 144ee <getValueType>
   11a2c:	       lea 12(sp),sp
   11a30:	       tst.w d0
   11a32:	   ,-- bne.s 11a38 <builtIn_positionStatus+0x28>
   11a34:	   |   moveq #1,d0
   11a36:	,--|-- bra.s 11a92 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11a38:	|  '-> moveq #24,d0
   11a3a:	|      add.l 16(sp),d0
   11a3e:	|      move.l d0,-(sp)
   11a40:	|      jsr 14e72 <trimStack>
   11a46:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a48:	|      movea.l 16(sp),a0
   11a4c:	|      move.l 24(a0),d0
   11a50:	|      move.l d0,-(sp)
   11a52:	|      pea 1 <_start+0x1>
   11a56:	|      moveq #12,d0
   11a58:	|      add.l sp,d0
   11a5a:	|      move.l d0,-(sp)
   11a5c:	|      jsr 144ee <getValueType>
   11a62:	|      lea 12(sp),sp
   11a66:	|      tst.w d0
   11a68:	|  ,-- bne.s 11a6e <builtIn_positionStatus+0x5e>
   11a6a:	|  |   moveq #1,d0
   11a6c:	+--|-- bra.s 11a92 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11a6e:	|  '-> moveq #24,d0
   11a70:	|      add.l 16(sp),d0
   11a74:	|      move.l d0,-(sp)
   11a76:	|      jsr 14e72 <trimStack>
   11a7c:	|      addq.l #4,sp
	positionStatus (x, y);
   11a7e:	|      move.l (sp),d1
   11a80:	|      move.l 4(sp),d0
   11a84:	|      move.l d1,-(sp)
   11a86:	|      move.l d0,-(sp)
   11a88:	|      jsr 76bc <positionStatus>
   11a8e:	|      addq.l #8,sp
	return BR_CONTINUE;
   11a90:	|      moveq #2,d0
}
   11a92:	'----> addq.l #8,sp
   11a94:	       rts

00011a96 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11a96:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a98:	       movea.l 12(sp),a0
   11a9c:	       move.l 24(a0),d0
   11aa0:	       move.l d0,-(sp)
   11aa2:	       pea 1 <_start+0x1>
   11aa6:	       move.l sp,d0
   11aa8:	       addq.l #8,d0
   11aaa:	       move.l d0,-(sp)
   11aac:	       jsr 144ee <getValueType>
   11ab2:	       lea 12(sp),sp
   11ab6:	       tst.w d0
   11ab8:	   ,-- bne.s 11abe <builtIn_alignStatus+0x28>
   11aba:	   |   moveq #1,d0
   11abc:	,--|-- bra.s 11ade <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11abe:	|  '-> moveq #24,d0
   11ac0:	|      add.l 12(sp),d0
   11ac4:	|      move.l d0,-(sp)
   11ac6:	|      jsr 14e72 <trimStack>
   11acc:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11ace:	|      move.l (sp),d0
   11ad0:	|      movea.l 1a12a <nowStatus>,a0
   11ad6:	|      move.l d0,d0
   11ad8:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11adc:	|      moveq #2,d0
}
   11ade:	'----> addq.l #4,sp
   11ae0:	       rts

00011ae2 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11ae2:	             tst.l 4(sp)
   11ae6:	      ,----- beq.s 11af2 <getFuncNumForCallback+0x10>
   11ae8:	      |      moveq #1,d0
   11aea:	      |      cmp.l 4(sp),d0
   11aee:	      |  ,-- beq.s 11af8 <getFuncNumForCallback+0x16>
   11af0:	   ,--|--|-- bra.s 11b2e <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11af2:	   |  '--|-> clr.l 12(sp)
			break;
   11af6:	,--|-----|-- bra.s 11b40 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11af8:	|  |     '-> movea.l 8(sp),a0
   11afc:	|  |         move.l 24(a0),d0
   11b00:	|  |         move.l d0,-(sp)
   11b02:	|  |         pea 2 <_start+0x2>
   11b06:	|  |         move.l 20(sp),-(sp)
   11b0a:	|  |         jsr 144ee <getValueType>
   11b10:	|  |         lea 12(sp),sp
   11b14:	|  |         tst.w d0
   11b16:	|  |     ,-- bne.s 11b1c <getFuncNumForCallback+0x3a>
   11b18:	|  |     |   clr.w d0
   11b1a:	|  |  ,--|-- bra.s 11b42 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11b1c:	|  |  |  '-> moveq #24,d0
   11b1e:	|  |  |      add.l 8(sp),d0
   11b22:	|  |  |      move.l d0,-(sp)
   11b24:	|  |  |      jsr 14e72 <trimStack>
   11b2a:	|  |  |      addq.l #4,sp
			break;
   11b2c:	+--|--|----- bra.s 11b40 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11b2e:	|  '--|----> pea 1983f <PutChar+0x1e63>
   11b34:	|     |      jsr 16f3a <KPrintF>
   11b3a:	|     |      addq.l #4,sp
			return FALSE;
   11b3c:	|     |      clr.w d0
   11b3e:	|     +----- bra.s 11b42 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11b40:	'-----|----> moveq #1,d0
}
   11b42:	      '----> rts

00011b44 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11b44:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11b46:	       move.l sp,d0
   11b48:	       move.l d0,-(sp)
   11b4a:	       move.l 16(sp),-(sp)
   11b4e:	       move.l 16(sp),-(sp)
   11b52:	       jsr 11ae2 <getFuncNumForCallback>
   11b58:	       lea 12(sp),sp
   11b5c:	       tst.w d0
   11b5e:	,----- beq.s 11b6e <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11b60:	|      movea.l 1a11c <currentEvents>,a0
   11b66:	|      move.l (sp),d0
   11b68:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11b6a:	|      moveq #2,d0
   11b6c:	|  ,-- bra.s 11b70 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11b6e:	'--|-> moveq #1,d0
}
   11b70:	   '-> addq.l #4,sp
   11b72:	       rts

00011b74 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11b74:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11b76:	       move.l sp,d0
   11b78:	       move.l d0,-(sp)
   11b7a:	       move.l 16(sp),-(sp)
   11b7e:	       move.l 16(sp),-(sp)
   11b82:	       jsr 11ae2 <getFuncNumForCallback>
   11b88:	       lea 12(sp),sp
   11b8c:	       tst.w d0
   11b8e:	,----- beq.s 11ba0 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11b90:	|      movea.l 1a11c <currentEvents>,a0
   11b96:	|      move.l (sp),d0
   11b98:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11b9c:	|      moveq #2,d0
   11b9e:	|  ,-- bra.s 11ba2 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11ba0:	'--|-> moveq #1,d0
}
   11ba2:	   '-> addq.l #4,sp
   11ba4:	       rts

00011ba6 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11ba6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ba8:	       move.l sp,d0
   11baa:	       move.l d0,-(sp)
   11bac:	       move.l 16(sp),-(sp)
   11bb0:	       move.l 16(sp),-(sp)
   11bb4:	       jsr 11ae2 <getFuncNumForCallback>
   11bba:	       lea 12(sp),sp
   11bbe:	       tst.w d0
   11bc0:	,----- beq.s 11bd2 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11bc2:	|      movea.l 1a11c <currentEvents>,a0
   11bc8:	|      move.l (sp),d0
   11bca:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11bce:	|      moveq #2,d0
   11bd0:	|  ,-- bra.s 11bd4 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11bd2:	'--|-> moveq #1,d0
}
   11bd4:	   '-> addq.l #4,sp
   11bd6:	       rts

00011bd8 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11bd8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11bda:	       move.l sp,d0
   11bdc:	       move.l d0,-(sp)
   11bde:	       move.l 16(sp),-(sp)
   11be2:	       move.l 16(sp),-(sp)
   11be6:	       jsr 11ae2 <getFuncNumForCallback>
   11bec:	       lea 12(sp),sp
   11bf0:	       tst.w d0
   11bf2:	,----- beq.s 11c04 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11bf4:	|      movea.l 1a11c <currentEvents>,a0
   11bfa:	|      move.l (sp),d0
   11bfc:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11c00:	|      moveq #2,d0
   11c02:	|  ,-- bra.s 11c06 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11c04:	'--|-> moveq #1,d0
}
   11c06:	   '-> addq.l #4,sp
   11c08:	       rts

00011c0a <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11c0a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c0c:	       move.l sp,d0
   11c0e:	       move.l d0,-(sp)
   11c10:	       move.l 16(sp),-(sp)
   11c14:	       move.l 16(sp),-(sp)
   11c18:	       jsr 11ae2 <getFuncNumForCallback>
   11c1e:	       lea 12(sp),sp
   11c22:	       tst.w d0
   11c24:	,----- beq.s 11c36 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11c26:	|      movea.l 1a11c <currentEvents>,a0
   11c2c:	|      move.l (sp),d0
   11c2e:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11c32:	|      moveq #2,d0
   11c34:	|  ,-- bra.s 11c38 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   11c36:	'--|-> moveq #1,d0
}
   11c38:	   '-> addq.l #4,sp
   11c3a:	       rts

00011c3c <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11c3c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c3e:	       move.l sp,d0
   11c40:	       move.l d0,-(sp)
   11c42:	       move.l 16(sp),-(sp)
   11c46:	       move.l 16(sp),-(sp)
   11c4a:	       jsr 11ae2 <getFuncNumForCallback>
   11c50:	       lea 12(sp),sp
   11c54:	       tst.w d0
   11c56:	,----- beq.s 11c68 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11c58:	|      movea.l 1a11c <currentEvents>,a0
   11c5e:	|      move.l (sp),d0
   11c60:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11c64:	|      moveq #2,d0
   11c66:	|  ,-- bra.s 11c6a <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11c68:	'--|-> moveq #1,d0
}
   11c6a:	   '-> addq.l #4,sp
   11c6c:	       rts

00011c6e <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11c6e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c70:	       move.l sp,d0
   11c72:	       move.l d0,-(sp)
   11c74:	       move.l 16(sp),-(sp)
   11c78:	       move.l 16(sp),-(sp)
   11c7c:	       jsr 11ae2 <getFuncNumForCallback>
   11c82:	       lea 12(sp),sp
   11c86:	       tst.w d0
   11c88:	,----- beq.s 11c9a <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11c8a:	|      movea.l 1a11c <currentEvents>,a0
   11c90:	|      move.l (sp),d0
   11c92:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11c96:	|      moveq #2,d0
   11c98:	|  ,-- bra.s 11c9c <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11c9a:	'--|-> moveq #1,d0
}
   11c9c:	   '-> addq.l #4,sp
   11c9e:	       rts

00011ca0 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11ca0:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ca2:	          move.l sp,d0
   11ca4:	          move.l d0,-(sp)
   11ca6:	          move.l 16(sp),-(sp)
   11caa:	          move.l 16(sp),-(sp)
   11cae:	          jsr 11ae2 <getFuncNumForCallback>
   11cb4:	          lea 12(sp),sp
   11cb8:	          tst.w d0
   11cba:	,-------- beq.s 11ce6 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11cbc:	|         move.l 1a774 <noStack>,d1
   11cc2:	|         move.l (sp),d0
   11cc4:	|         pea 1 <_start+0x1>
   11cc8:	|         move.l d1,-(sp)
   11cca:	|         clr.l -(sp)
   11ccc:	|         clr.l -(sp)
   11cce:	|         move.l d0,-(sp)
   11cd0:	|         jsr 6786 <startNewFunctionNum>
   11cd6:	|         lea 20(sp),sp
   11cda:	|         tst.l d0
   11cdc:	|     ,-- bne.s 11ce2 <builtIn_spawnSub+0x42>
   11cde:	|     |   moveq #1,d0
   11ce0:	|  ,--|-- bra.s 11ce8 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11ce2:	|  |  '-> moveq #2,d0
   11ce4:	|  +----- bra.s 11ce8 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11ce6:	'--|----> moveq #1,d0
}
   11ce8:	   '----> addq.l #4,sp
   11cea:	          rts

00011cec <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11cec:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11cee:	          move.l sp,d0
   11cf0:	          addq.l #4,d0
   11cf2:	          move.l d0,-(sp)
   11cf4:	          move.l 20(sp),-(sp)
   11cf8:	          move.l 20(sp),-(sp)
   11cfc:	          jsr 11ae2 <getFuncNumForCallback>
   11d02:	          lea 12(sp),sp
   11d06:	          tst.w d0
   11d08:	,-------- beq.s 11d3e <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   11d0a:	|         move.l 4(sp),d1
   11d0e:	|         move.l sp,d0
   11d10:	|         addq.l #2,d0
   11d12:	|         move.l d0,-(sp)
   11d14:	|         move.l 20(sp),-(sp)
   11d18:	|         move.l d1,-(sp)
   11d1a:	|         jsr 44ac <cancelAFunction>
   11d20:	|         lea 12(sp),sp
		if (killedMyself) {
   11d24:	|         move.w 2(sp),d0
   11d28:	|  ,----- beq.s 11d3a <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   11d2a:	|  |      move.l 16(sp),-(sp)
   11d2e:	|  |      jsr 43ca <abortFunction>
   11d34:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   11d36:	|  |      moveq #5,d0
   11d38:	|  |  ,-- bra.s 11d40 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   11d3a:	|  '--|-> moveq #2,d0
   11d3c:	|     +-- bra.s 11d40 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   11d3e:	'-----|-> moveq #1,d0
}
   11d40:	      '-> addq.l #8,sp
   11d42:	          rts

00011d44 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   11d44:	       subq.l #8,sp
   11d46:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   11d48:	       movea.l 20(sp),a0
   11d4c:	       move.l 24(a0),d0
   11d50:	       move.l d0,-(sp)
   11d52:	       jsr 14ac4 <getTextFromAnyVar>
   11d58:	       addq.l #4,sp
   11d5a:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   11d5e:	   ,-- bne.s 11d64 <builtIn_stringWidth+0x20>
   11d60:	   |   moveq #1,d0
   11d62:	,--|-- bra.s 11db2 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   11d64:	|  '-> moveq #24,d0
   11d66:	|      add.l 20(sp),d0
   11d6a:	|      move.l d0,-(sp)
   11d6c:	|      jsr 14e72 <trimStack>
   11d72:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   11d74:	|      move.l 8(sp),-(sp)
   11d78:	|      jsr 155d8 <stringWidth>
   11d7e:	|      addq.l #4,sp
   11d80:	|      move.l d0,d1
   11d82:	|      moveq #28,d0
   11d84:	|      add.l 20(sp),d0
   11d88:	|      move.l d1,-(sp)
   11d8a:	|      pea 1 <_start+0x1>
   11d8e:	|      move.l d0,-(sp)
   11d90:	|      jsr 14de0 <setVariable>
   11d96:	|      lea 12(sp),sp
	FreeVec(theText);
   11d9a:	|      move.l 8(sp),4(sp)
   11da0:	|      move.l 1a7a4 <SysBase>,d0
   11da6:	|      movea.l d0,a6
   11da8:	|      movea.l 4(sp),a1
   11dac:	|      jsr -690(a6)
	return BR_CONTINUE;
   11db0:	|      moveq #2,d0
}
   11db2:	'----> movea.l (sp)+,a6
   11db4:	       addq.l #8,sp
   11db6:	       rts

00011db8 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   11db8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11dba:	       movea.l 12(sp),a0
   11dbe:	       move.l 24(a0),d0
   11dc2:	       move.l d0,-(sp)
   11dc4:	       pea 1 <_start+0x1>
   11dc8:	       move.l sp,d0
   11dca:	       addq.l #8,d0
   11dcc:	       move.l d0,-(sp)
   11dce:	       jsr 144ee <getValueType>
   11dd4:	       lea 12(sp),sp
   11dd8:	       tst.w d0
   11dda:	   ,-- bne.s 11de0 <builtIn_hardScroll+0x28>
   11ddc:	   |   moveq #1,d0
   11dde:	,--|-- bra.s 11dfe <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   11de0:	|  '-> moveq #24,d0
   11de2:	|      add.l 12(sp),d0
   11de6:	|      move.l d0,-(sp)
   11de8:	|      jsr 14e72 <trimStack>
   11dee:	|      addq.l #4,sp
	hardScroll (v);
   11df0:	|      move.l (sp),d0
   11df2:	|      move.l d0,-(sp)
   11df4:	|      jsr cfa6 <hardScroll>
   11dfa:	|      addq.l #4,sp
	return BR_CONTINUE;
   11dfc:	|      moveq #2,d0
}
   11dfe:	'----> addq.l #4,sp
   11e00:	       rts

00011e02 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   11e02:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11e04:	       movea.l 12(sp),a0
   11e08:	       move.l 24(a0),d0
   11e0c:	       move.l d0,-(sp)
   11e0e:	       pea 7 <_start+0x7>
   11e12:	       move.l sp,d0
   11e14:	       addq.l #8,d0
   11e16:	       move.l d0,-(sp)
   11e18:	       jsr 144ee <getValueType>
   11e1e:	       lea 12(sp),sp
   11e22:	       tst.w d0
   11e24:	   ,-- bne.s 11e2a <builtIn_isScreenRegion+0x28>
   11e26:	   |   moveq #1,d0
   11e28:	,--|-- bra.s 11e6a <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   11e2a:	|  '-> moveq #24,d0
   11e2c:	|      add.l 12(sp),d0
   11e30:	|      move.l d0,-(sp)
   11e32:	|      jsr 14e72 <trimStack>
   11e38:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   11e3a:	|      move.l (sp),d0
   11e3c:	|      move.l d0,-(sp)
   11e3e:	|      jsr 15738 <getRegionForObject>
   11e44:	|      addq.l #4,sp
   11e46:	|      tst.l d0
   11e48:	|      sne d0
   11e4a:	|      neg.b d0
   11e4c:	|      moveq #0,d1
   11e4e:	|      move.b d0,d1
   11e50:	|      moveq #28,d0
   11e52:	|      add.l 12(sp),d0
   11e56:	|      move.l d1,-(sp)
   11e58:	|      pea 1 <_start+0x1>
   11e5c:	|      move.l d0,-(sp)
   11e5e:	|      jsr 14de0 <setVariable>
   11e64:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11e68:	|      moveq #2,d0
}
   11e6a:	'----> addq.l #4,sp
   11e6c:	       rts

00011e6e <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   11e6e:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e70:	       movea.l 12(sp),a0
   11e74:	       move.l 24(a0),d0
   11e78:	       move.l d0,-(sp)
   11e7a:	       pea 1 <_start+0x1>
   11e7e:	       move.l sp,d0
   11e80:	       addq.l #8,d0
   11e82:	       move.l d0,-(sp)
   11e84:	       jsr 144ee <getValueType>
   11e8a:	       lea 12(sp),sp
   11e8e:	       tst.w d0
   11e90:	   ,-- bne.s 11e96 <builtIn_setSpeechSpeed+0x28>
   11e92:	   |   moveq #1,d0
   11e94:	,--|-- bra.s 11ee4 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   11e96:	|  '-> moveq #24,d0
   11e98:	|      add.l 12(sp),d0
   11e9c:	|      move.l d0,-(sp)
   11e9e:	|      jsr 14e72 <trimStack>
   11ea4:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   11ea6:	|      move.l (sp),d0
   11ea8:	|      move.l d0,-(sp)
   11eaa:	|      jsr 1736c <__floatsisf>
   11eb0:	|      addq.l #4,sp
   11eb2:	|      move.l #1008981770,-(sp)
   11eb8:	|      move.l d0,-(sp)
   11eba:	|      jsr 1741e <__mulsf3>
   11ec0:	|      addq.l #8,sp
   11ec2:	|      move.l d0,1a12e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   11ec8:	|      moveq #28,d0
   11eca:	|      add.l 12(sp),d0
   11ece:	|      pea 1 <_start+0x1>
   11ed2:	|      pea 1 <_start+0x1>
   11ed6:	|      move.l d0,-(sp)
   11ed8:	|      jsr 14de0 <setVariable>
   11ede:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11ee2:	|      moveq #2,d0
}
   11ee4:	'----> addq.l #4,sp
   11ee6:	       rts

00011ee8 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   11ee8:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11eea:	       movea.l 12(sp),a0
   11eee:	       move.l 24(a0),d0
   11ef2:	       move.l d0,-(sp)
   11ef4:	       pea 1 <_start+0x1>
   11ef8:	       move.l sp,d0
   11efa:	       addq.l #8,d0
   11efc:	       move.l d0,-(sp)
   11efe:	       jsr 144ee <getValueType>
   11f04:	       lea 12(sp),sp
   11f08:	       tst.w d0
   11f0a:	   ,-- bne.s 11f10 <builtIn_setFontSpacing+0x28>
   11f0c:	   |   moveq #1,d0
   11f0e:	,--|-- bra.s 11f46 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   11f10:	|  '-> move.l (sp),d0
   11f12:	|      move.l d0,d0
   11f14:	|      move.w d0,1a6a8 <fontSpace>
	trimStack (&fun -> stack);
   11f1a:	|      moveq #24,d0
   11f1c:	|      add.l 12(sp),d0
   11f20:	|      move.l d0,-(sp)
   11f22:	|      jsr 14e72 <trimStack>
   11f28:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11f2a:	|      moveq #28,d0
   11f2c:	|      add.l 12(sp),d0
   11f30:	|      pea 1 <_start+0x1>
   11f34:	|      pea 1 <_start+0x1>
   11f38:	|      move.l d0,-(sp)
   11f3a:	|      jsr 14de0 <setVariable>
   11f40:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11f44:	|      moveq #2,d0
}
   11f46:	'----> addq.l #4,sp
   11f48:	       rts

00011f4a <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   11f4a:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f4c:	          movea.l 12(sp),a0
   11f50:	          move.l 24(a0),d0
   11f54:	          move.l d0,-(sp)
   11f56:	          pea 1 <_start+0x1>
   11f5a:	          move.l sp,d0
   11f5c:	          addq.l #8,d0
   11f5e:	          move.l d0,-(sp)
   11f60:	          jsr 144ee <getValueType>
   11f66:	          lea 12(sp),sp
   11f6a:	          tst.w d0
   11f6c:	      ,-- bne.s 11f72 <builtIn_transitionLevel+0x28>
   11f6e:	      |   moveq #1,d0
   11f70:	,-----|-- bra.s 11fc6 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   11f72:	|     '-> moveq #24,d0
   11f74:	|         add.l 12(sp),d0
   11f78:	|         move.l d0,-(sp)
   11f7a:	|         jsr 14e72 <trimStack>
   11f80:	|         addq.l #4,sp

	if (number < 0)
   11f82:	|         move.l (sp),d0
   11f84:	|     ,-- bpl.s 11f8e <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   11f86:	|     |   clr.b 1a11a <brightnessLevel>
   11f8c:	|  ,--|-- bra.s 11faa <builtIn_transitionLevel+0x60>
	else if (number > 255)
   11f8e:	|  |  '-> move.l (sp),d0
   11f90:	|  |      cmpi.l #255,d0
   11f96:	|  |  ,-- ble.s 11fa0 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   11f98:	|  |  |   st 1a11a <brightnessLevel>
   11f9e:	|  +--|-- bra.s 11faa <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   11fa0:	|  |  '-> move.l (sp),d0
   11fa2:	|  |      move.l d0,d0
   11fa4:	|  |      move.b d0,1a11a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   11faa:	|  '----> moveq #28,d0
   11fac:	|         add.l 12(sp),d0
   11fb0:	|         pea 1 <_start+0x1>
   11fb4:	|         pea 1 <_start+0x1>
   11fb8:	|         move.l d0,-(sp)
   11fba:	|         jsr 14de0 <setVariable>
   11fc0:	|         lea 12(sp),sp
	return BR_CONTINUE;
   11fc4:	|         moveq #2,d0
}
   11fc6:	'-------> addq.l #4,sp
   11fc8:	          rts

00011fca <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   11fca:	movea.l 8(sp),a0
   11fce:	move.l 24(a0),d0
   11fd2:	move.l d0,-(sp)
   11fd4:	jsr 14a2e <getBoolean>
   11fda:	addq.l #4,sp
   11fdc:	move.w d0,1a744 <captureAllKeys>
	trimStack (&fun -> stack);
   11fe2:	moveq #24,d0
   11fe4:	add.l 8(sp),d0
   11fe8:	move.l d0,-(sp)
   11fea:	jsr 14e72 <trimStack>
   11ff0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   11ff2:	move.w 1a744 <captureAllKeys>,d0
   11ff8:	movea.w d0,a0
   11ffa:	moveq #28,d0
   11ffc:	add.l 8(sp),d0
   12000:	move.l a0,-(sp)
   12002:	pea 1 <_start+0x1>
   12006:	move.l d0,-(sp)
   12008:	jsr 14de0 <setVariable>
   1200e:	lea 12(sp),sp
	return BR_CONTINUE;
   12012:	moveq #2,d0
}
   12014:	rts

00012016 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12016:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1201a:	       movea.l 20(sp),a0
   1201e:	       move.l 24(a0),d0
   12022:	       move.l d0,-(sp)
   12024:	       pea 1 <_start+0x1>
   12028:	       moveq #12,d0
   1202a:	       add.l sp,d0
   1202c:	       move.l d0,-(sp)
   1202e:	       jsr 144ee <getValueType>
   12034:	       lea 12(sp),sp
   12038:	       tst.w d0
   1203a:	   ,-- bne.s 12042 <builtIn_spinCharacter+0x2c>
   1203c:	   |   moveq #1,d0
   1203e:	,--|-- bra.w 120f2 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12042:	|  '-> moveq #24,d0
   12044:	|      add.l 20(sp),d0
   12048:	|      move.l d0,-(sp)
   1204a:	|      jsr 14e72 <trimStack>
   12050:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12052:	|      movea.l 20(sp),a0
   12056:	|      move.l 24(a0),d0
   1205a:	|      move.l d0,-(sp)
   1205c:	|      pea 7 <_start+0x7>
   12060:	|      lea 8(sp),a0
   12064:	|      move.l a0,-(sp)
   12066:	|      jsr 144ee <getValueType>
   1206c:	|      lea 12(sp),sp
   12070:	|      tst.w d0
   12072:	|  ,-- bne.s 12078 <builtIn_spinCharacter+0x62>
   12074:	|  |   moveq #1,d0
   12076:	+--|-- bra.s 120f2 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12078:	|  '-> moveq #24,d0
   1207a:	|      add.l 20(sp),d0
   1207e:	|      move.l d0,-(sp)
   12080:	|      jsr 14e72 <trimStack>
   12086:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12088:	|      move.l (sp),d0
   1208a:	|      move.l d0,-(sp)
   1208c:	|      jsr a352 <findPerson>
   12092:	|      addq.l #4,sp
   12094:	|      move.l d0,8(sp)
	if (thisPerson) {
   12098:	|  ,-- beq.s 120d8 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   1209a:	|  |   move.l 4(sp),d0
   1209e:	|  |   movea.l 8(sp),a0
   120a2:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   120a6:	|  |   movea.l 8(sp),a0
   120aa:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   120b0:	|  |   movea.l 8(sp),a0
   120b4:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   120ba:	|  |   moveq #28,d0
   120bc:	|  |   add.l 20(sp),d0
   120c0:	|  |   pea 1 <_start+0x1>
   120c4:	|  |   pea 1 <_start+0x1>
   120c8:	|  |   move.l d0,-(sp)
   120ca:	|  |   jsr 14de0 <setVariable>
   120d0:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   120d4:	|  |   moveq #3,d0
   120d6:	+--|-- bra.s 120f2 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   120d8:	|  '-> moveq #28,d0
   120da:	|      add.l 20(sp),d0
   120de:	|      clr.l -(sp)
   120e0:	|      pea 1 <_start+0x1>
   120e4:	|      move.l d0,-(sp)
   120e6:	|      jsr 14de0 <setVariable>
   120ec:	|      lea 12(sp),sp
		return BR_CONTINUE;
   120f0:	|      moveq #2,d0
	}
}
   120f2:	'----> lea 12(sp),sp
   120f6:	       rts

000120f8 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   120f8:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   120fa:	          movea.l 16(sp),a0
   120fe:	          move.l 24(a0),d0
   12102:	          move.l d0,-(sp)
   12104:	          pea 7 <_start+0x7>
   12108:	          move.l sp,d0
   1210a:	          addq.l #8,d0
   1210c:	          move.l d0,-(sp)
   1210e:	          jsr 144ee <getValueType>
   12114:	          lea 12(sp),sp
   12118:	          tst.w d0
   1211a:	      ,-- bne.s 12120 <builtIn_getCharacterDirection+0x28>
   1211c:	      |   moveq #1,d0
   1211e:	,-----|-- bra.s 1217e <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   12120:	|     '-> moveq #24,d0
   12122:	|         add.l 16(sp),d0
   12126:	|         move.l d0,-(sp)
   12128:	|         jsr 14e72 <trimStack>
   1212e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12130:	|         move.l (sp),d0
   12132:	|         move.l d0,-(sp)
   12134:	|         jsr a352 <findPerson>
   1213a:	|         addq.l #4,sp
   1213c:	|         move.l d0,4(sp)
	if (thisPerson) {
   12140:	|  ,----- beq.s 12164 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   12142:	|  |      movea.l 4(sp),a0
   12146:	|  |      move.l 106(a0),d1
   1214a:	|  |      moveq #28,d0
   1214c:	|  |      add.l 16(sp),d0
   12150:	|  |      move.l d1,-(sp)
   12152:	|  |      pea 1 <_start+0x1>
   12156:	|  |      move.l d0,-(sp)
   12158:	|  |      jsr 14de0 <setVariable>
   1215e:	|  |      lea 12(sp),sp
   12162:	|  |  ,-- bra.s 1217c <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12164:	|  '--|-> moveq #28,d0
   12166:	|     |   add.l 16(sp),d0
   1216a:	|     |   clr.l -(sp)
   1216c:	|     |   pea 1 <_start+0x1>
   12170:	|     |   move.l d0,-(sp)
   12172:	|     |   jsr 14de0 <setVariable>
   12178:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1217c:	|     '-> moveq #2,d0
}
   1217e:	'-------> addq.l #8,sp
   12180:	          rts

00012182 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   12182:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12184:	       movea.l 16(sp),a0
   12188:	       move.l 24(a0),d0
   1218c:	       move.l d0,-(sp)
   1218e:	       pea 7 <_start+0x7>
   12192:	       move.l sp,d0
   12194:	       addq.l #8,d0
   12196:	       move.l d0,-(sp)
   12198:	       jsr 144ee <getValueType>
   1219e:	       lea 12(sp),sp
   121a2:	       tst.w d0
   121a4:	   ,-- bne.s 121aa <builtIn_isCharacter+0x28>
   121a6:	   |   moveq #1,d0
   121a8:	,--|-- bra.s 121ec <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   121aa:	|  '-> moveq #24,d0
   121ac:	|      add.l 16(sp),d0
   121b0:	|      move.l d0,-(sp)
   121b2:	|      jsr 14e72 <trimStack>
   121b8:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   121ba:	|      move.l (sp),d0
   121bc:	|      move.l d0,-(sp)
   121be:	|      jsr a352 <findPerson>
   121c4:	|      addq.l #4,sp
   121c6:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   121ca:	|      sne d0
   121cc:	|      neg.b d0
   121ce:	|      moveq #0,d1
   121d0:	|      move.b d0,d1
   121d2:	|      moveq #28,d0
   121d4:	|      add.l 16(sp),d0
   121d8:	|      move.l d1,-(sp)
   121da:	|      pea 1 <_start+0x1>
   121de:	|      move.l d0,-(sp)
   121e0:	|      jsr 14de0 <setVariable>
   121e6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   121ea:	|      moveq #2,d0
}
   121ec:	'----> addq.l #8,sp
   121ee:	       rts

000121f0 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   121f0:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   121f2:	          movea.l 16(sp),a0
   121f6:	          move.l 24(a0),d0
   121fa:	          move.l d0,-(sp)
   121fc:	          pea 7 <_start+0x7>
   12200:	          move.l sp,d0
   12202:	          addq.l #8,d0
   12204:	          move.l d0,-(sp)
   12206:	          jsr 144ee <getValueType>
   1220c:	          lea 12(sp),sp
   12210:	          tst.w d0
   12212:	      ,-- bne.s 12218 <builtIn_normalCharacter+0x28>
   12214:	      |   moveq #1,d0
   12216:	,-----|-- bra.s 12294 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   12218:	|     '-> moveq #24,d0
   1221a:	|         add.l 16(sp),d0
   1221e:	|         move.l d0,-(sp)
   12220:	|         jsr 14e72 <trimStack>
   12226:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12228:	|         move.l (sp),d0
   1222a:	|         move.l d0,-(sp)
   1222c:	|         jsr a352 <findPerson>
   12232:	|         addq.l #4,sp
   12234:	|         move.l d0,4(sp)
	if (thisPerson)
   12238:	|  ,----- beq.s 1227a <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   1223a:	|  |      movea.l 4(sp),a0
   1223e:	|  |      movea.l 80(a0),a0
   12242:	|  |      move.l (a0),d1
   12244:	|  |      movea.l 4(sp),a0
   12248:	|  |      move.l 106(a0),d0
   1224c:	|  |      add.l d0,d0
   1224e:	|  |      add.l d0,d0
   12250:	|  |      movea.l d1,a0
   12252:	|  |      adda.l d0,a0
   12254:	|  |      move.l (a0),d0
   12256:	|  |      movea.l 4(sp),a0
   1225a:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1225e:	|  |      moveq #28,d0
   12260:	|  |      add.l 16(sp),d0
   12264:	|  |      pea 1 <_start+0x1>
   12268:	|  |      pea 1 <_start+0x1>
   1226c:	|  |      move.l d0,-(sp)
   1226e:	|  |      jsr 14de0 <setVariable>
   12274:	|  |      lea 12(sp),sp
   12278:	|  |  ,-- bra.s 12292 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1227a:	|  '--|-> moveq #28,d0
   1227c:	|     |   add.l 16(sp),d0
   12280:	|     |   clr.l -(sp)
   12282:	|     |   pea 1 <_start+0x1>
   12286:	|     |   move.l d0,-(sp)
   12288:	|     |   jsr 14de0 <setVariable>
   1228e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12292:	|     '-> moveq #2,d0
}
   12294:	'-------> addq.l #8,sp
   12296:	          rts

00012298 <builtIn_isMoving>:

builtIn(isMoving)
{
   12298:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1229a:	          movea.l 16(sp),a0
   1229e:	          move.l 24(a0),d0
   122a2:	          move.l d0,-(sp)
   122a4:	          pea 7 <_start+0x7>
   122a8:	          move.l sp,d0
   122aa:	          addq.l #8,d0
   122ac:	          move.l d0,-(sp)
   122ae:	          jsr 144ee <getValueType>
   122b4:	          lea 12(sp),sp
   122b8:	          tst.w d0
   122ba:	      ,-- bne.s 122c0 <builtIn_isMoving+0x28>
   122bc:	      |   moveq #1,d0
   122be:	,-----|-- bra.s 12320 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   122c0:	|     '-> moveq #24,d0
   122c2:	|         add.l 16(sp),d0
   122c6:	|         move.l d0,-(sp)
   122c8:	|         jsr 14e72 <trimStack>
   122ce:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   122d0:	|         move.l (sp),d0
   122d2:	|         move.l d0,-(sp)
   122d4:	|         jsr a352 <findPerson>
   122da:	|         addq.l #4,sp
   122dc:	|         move.l d0,4(sp)
	if (thisPerson)
   122e0:	|  ,----- beq.s 12306 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   122e2:	|  |      movea.l 4(sp),a0
   122e6:	|  |      move.w 64(a0),d0
   122ea:	|  |      movea.w d0,a0
   122ec:	|  |      moveq #28,d0
   122ee:	|  |      add.l 16(sp),d0
   122f2:	|  |      move.l a0,-(sp)
   122f4:	|  |      pea 1 <_start+0x1>
   122f8:	|  |      move.l d0,-(sp)
   122fa:	|  |      jsr 14de0 <setVariable>
   12300:	|  |      lea 12(sp),sp
   12304:	|  |  ,-- bra.s 1231e <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12306:	|  '--|-> moveq #28,d0
   12308:	|     |   add.l 16(sp),d0
   1230c:	|     |   clr.l -(sp)
   1230e:	|     |   pea 1 <_start+0x1>
   12312:	|     |   move.l d0,-(sp)
   12314:	|     |   jsr 14de0 <setVariable>
   1231a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1231e:	|     '-> moveq #2,d0
}
   12320:	'-------> addq.l #8,sp
   12322:	          rts

00012324 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12324:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12328:	          movea.l 20(sp),a0
   1232c:	          move.l 24(a0),d0
   12330:	          move.l d0,-(sp)
   12332:	          pea 7 <_start+0x7>
   12336:	          lea 8(sp),a0
   1233a:	          move.l a0,-(sp)
   1233c:	          jsr 144ee <getValueType>
   12342:	          lea 12(sp),sp
   12346:	          tst.w d0
   12348:	      ,-- bne.s 12350 <builtIn_fetchEvent+0x2c>
   1234a:	      |   moveq #1,d0
   1234c:	,-----|-- bra.w 123e4 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12350:	|     '-> moveq #24,d0
   12352:	|         add.l 20(sp),d0
   12356:	|         move.l d0,-(sp)
   12358:	|         jsr 14e72 <trimStack>
   1235e:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12360:	|         movea.l 20(sp),a0
   12364:	|         move.l 24(a0),d0
   12368:	|         move.l d0,-(sp)
   1236a:	|         pea 7 <_start+0x7>
   1236e:	|         moveq #12,d0
   12370:	|         add.l sp,d0
   12372:	|         move.l d0,-(sp)
   12374:	|         jsr 144ee <getValueType>
   1237a:	|         lea 12(sp),sp
   1237e:	|         tst.w d0
   12380:	|     ,-- bne.s 12386 <builtIn_fetchEvent+0x62>
   12382:	|     |   moveq #1,d0
   12384:	+-----|-- bra.s 123e4 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12386:	|     '-> moveq #24,d0
   12388:	|         add.l 20(sp),d0
   1238c:	|         move.l d0,-(sp)
   1238e:	|         jsr 14e72 <trimStack>
   12394:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12396:	|         move.l (sp),d1
   12398:	|         move.l 4(sp),d0
   1239c:	|         move.l d1,-(sp)
   1239e:	|         move.l d0,-(sp)
   123a0:	|         jsr d288 <getCombinationFunction>
   123a6:	|         addq.l #8,sp
   123a8:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   123ac:	|  ,----- beq.s 123ca <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   123ae:	|  |      moveq #28,d0
   123b0:	|  |      add.l 20(sp),d0
   123b4:	|  |      move.l 8(sp),-(sp)
   123b8:	|  |      pea 2 <_start+0x2>
   123bc:	|  |      move.l d0,-(sp)
   123be:	|  |      jsr 14de0 <setVariable>
   123c4:	|  |      lea 12(sp),sp
   123c8:	|  |  ,-- bra.s 123e2 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   123ca:	|  '--|-> moveq #28,d0
   123cc:	|     |   add.l 20(sp),d0
   123d0:	|     |   clr.l -(sp)
   123d2:	|     |   pea 1 <_start+0x1>
   123d6:	|     |   move.l d0,-(sp)
   123d8:	|     |   jsr 14de0 <setVariable>
   123de:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   123e2:	|     '-> moveq #2,d0
}
   123e4:	'-------> lea 12(sp),sp
   123e8:	          rts

000123ea <builtIn_deleteFile>:

builtIn(deleteFile)
{
   123ea:	       lea -24(sp),sp
   123ee:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   123f0:	       movea.l 36(sp),a0
   123f4:	       move.l 24(a0),d0
   123f8:	       move.l d0,-(sp)
   123fa:	       jsr 14ac4 <getTextFromAnyVar>
   12400:	       addq.l #4,sp
   12402:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12406:	       moveq #24,d0
   12408:	       add.l 36(sp),d0
   1240c:	       move.l d0,-(sp)
   1240e:	       jsr 14e72 <trimStack>
   12414:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12416:	       move.l 24(sp),-(sp)
   1241a:	       jsr 2fe <encodeFilename>
   12420:	       addq.l #4,sp
   12422:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12426:	       move.l 24(sp),16(sp)
   1242c:	       move.l 1a7a4 <SysBase>,d0
   12432:	       movea.l d0,a6
   12434:	       movea.l 16(sp),a1
   12438:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   1243c:	       move.l 20(sp),-(sp)
   12440:	       jsr e040 <failSecurityCheck>
   12446:	       addq.l #4,sp
   12448:	       tst.w d0
   1244a:	   ,-- beq.s 12450 <builtIn_deleteFile+0x66>
   1244c:	   |   moveq #1,d0
   1244e:	,--|-- bra.s 1249e <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12450:	|  '-> move.l 20(sp),12(sp)
   12456:	|      move.l 1a7ac <DOSBase>,d0
   1245c:	|      movea.l d0,a6
   1245e:	|      move.l 12(sp),d1
   12462:	|      jsr -72(a6)
   12466:	|      move.l d0,8(sp)
   1246a:	|      move.l 8(sp),d1
   1246e:	|      moveq #28,d0
   12470:	|      add.l 36(sp),d0
   12474:	|      move.l d1,-(sp)
   12476:	|      pea 1 <_start+0x1>
   1247a:	|      move.l d0,-(sp)
   1247c:	|      jsr 14de0 <setVariable>
   12482:	|      lea 12(sp),sp
    FreeVec(nam);
   12486:	|      move.l 20(sp),4(sp)
   1248c:	|      move.l 1a7a4 <SysBase>,d0
   12492:	|      movea.l d0,a6
   12494:	|      movea.l 4(sp),a1
   12498:	|      jsr -690(a6)

    return BR_CONTINUE;
   1249c:	|      moveq #2,d0
}
   1249e:	'----> movea.l (sp)+,a6
   124a0:	       lea 24(sp),sp
   124a4:	       rts

000124a6 <builtIn_renameFile>:

builtIn(renameFile)
{
   124a6:	       lea -40(sp),sp
   124aa:	       move.l a6,-(sp)
   124ac:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   124ae:	       movea.l 56(sp),a0
   124b2:	       move.l 24(a0),d0
   124b6:	       move.l d0,-(sp)
   124b8:	       jsr 14ac4 <getTextFromAnyVar>
   124be:	       addq.l #4,sp
   124c0:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   124c4:	       move.l 44(sp),-(sp)
   124c8:	       jsr 2fe <encodeFilename>
   124ce:	       addq.l #4,sp
   124d0:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   124d4:	       moveq #24,d0
   124d6:	       add.l 56(sp),d0
   124da:	       move.l d0,-(sp)
   124dc:	       jsr 14e72 <trimStack>
   124e2:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   124e4:	       move.l 40(sp),-(sp)
   124e8:	       jsr e040 <failSecurityCheck>
   124ee:	       addq.l #4,sp
   124f0:	       tst.w d0
   124f2:	   ,-- beq.s 124fa <builtIn_renameFile+0x54>
   124f4:	   |   moveq #1,d0
   124f6:	,--|-- bra.w 125e0 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   124fa:	|  '-> move.l 44(sp),36(sp)
   12500:	|      move.l 1a7a4 <SysBase>,d0
   12506:	|      movea.l d0,a6
   12508:	|      movea.l 36(sp),a1
   1250c:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12510:	|      movea.l 56(sp),a0
   12514:	|      move.l 24(a0),d0
   12518:	|      move.l d0,-(sp)
   1251a:	|      jsr 14ac4 <getTextFromAnyVar>
   12520:	|      addq.l #4,sp
   12522:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12526:	|      move.l 44(sp),-(sp)
   1252a:	|      jsr 2fe <encodeFilename>
   12530:	|      addq.l #4,sp
   12532:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12536:	|      moveq #24,d0
   12538:	|      add.l 56(sp),d0
   1253c:	|      move.l d0,-(sp)
   1253e:	|      jsr 14e72 <trimStack>
   12544:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12546:	|      move.l 32(sp),-(sp)
   1254a:	|      jsr e040 <failSecurityCheck>
   12550:	|      addq.l #4,sp
   12552:	|      tst.w d0
   12554:	|  ,-- beq.s 1255c <builtIn_renameFile+0xb6>
   12556:	|  |   moveq #1,d0
   12558:	+--|-- bra.w 125e0 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1255c:	|  '-> move.l 44(sp),28(sp)
   12562:	|      move.l 1a7a4 <SysBase>,d0
   12568:	|      movea.l d0,a6
   1256a:	|      movea.l 28(sp),a1
   1256e:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12572:	|      move.l 32(sp),24(sp)
   12578:	|      move.l 40(sp),20(sp)
   1257e:	|      move.l 1a7ac <DOSBase>,d0
   12584:	|      movea.l d0,a6
   12586:	|      move.l 24(sp),d1
   1258a:	|      move.l 20(sp),d2
   1258e:	|      jsr -78(a6)
   12592:	|      move.l d0,16(sp)
   12596:	|      move.l 16(sp),d1
   1259a:	|      moveq #28,d0
   1259c:	|      add.l 56(sp),d0
   125a0:	|      move.l d1,-(sp)
   125a2:	|      pea 1 <_start+0x1>
   125a6:	|      move.l d0,-(sp)
   125a8:	|      jsr 14de0 <setVariable>
   125ae:	|      lea 12(sp),sp
	FreeVec(nam);
   125b2:	|      move.l 32(sp),12(sp)
   125b8:	|      move.l 1a7a4 <SysBase>,d0
   125be:	|      movea.l d0,a6
   125c0:	|      movea.l 12(sp),a1
   125c4:	|      jsr -690(a6)
	FreeVec(newnam);
   125c8:	|      move.l 40(sp),8(sp)
   125ce:	|      move.l 1a7a4 <SysBase>,d0
   125d4:	|      movea.l d0,a6
   125d6:	|      movea.l 8(sp),a1
   125da:	|      jsr -690(a6)

	return BR_CONTINUE;
   125de:	|      moveq #2,d0
}
   125e0:	'----> move.l (sp)+,d2
   125e2:	       movea.l (sp)+,a6
   125e4:	       lea 40(sp),sp
   125e8:	       rts

000125ea <builtIn_cacheSound>:

builtIn(cacheSound)
{
   125ea:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   125ec:	       movea.l 12(sp),a0
   125f0:	       move.l 24(a0),d0
   125f4:	       move.l d0,-(sp)
   125f6:	       pea 5 <_start+0x5>
   125fa:	       move.l sp,d0
   125fc:	       addq.l #8,d0
   125fe:	       move.l d0,-(sp)
   12600:	       jsr 144ee <getValueType>
   12606:	       lea 12(sp),sp
   1260a:	       tst.w d0
   1260c:	   ,-- bne.s 12612 <builtIn_cacheSound+0x28>
   1260e:	   |   moveq #1,d0
   12610:	,--|-- bra.s 1263a <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12612:	|  '-> moveq #24,d0
   12614:	|      add.l 12(sp),d0
   12618:	|      move.l d0,-(sp)
   1261a:	|      jsr 14e72 <trimStack>
   12620:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12622:	|      move.l (sp),d0
   12624:	|      move.l d0,-(sp)
   12626:	|      jsr ce88 <cacheSound>
   1262c:	|      addq.l #4,sp
   1262e:	|      moveq #-1,d1
   12630:	|      cmp.l d0,d1
   12632:	|  ,-- bne.s 12638 <builtIn_cacheSound+0x4e>
   12634:	|  |   moveq #1,d0
   12636:	+--|-- bra.s 1263a <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12638:	|  '-> moveq #2,d0
}
   1263a:	'----> addq.l #4,sp
   1263c:	       rts

0001263e <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   1263e:	pea 19854 <PutChar+0x1e78>
   12644:	jsr 16f3a <KPrintF>
   1264a:	addq.l #4,sp
	return BR_CONTINUE;
   1264c:	moveq #2,d0
}
   1264e:	rts

00012650 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12650:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12654:	          movea.l 20(sp),a0
   12658:	          move.l 24(a0),d0
   1265c:	          move.l d0,-(sp)
   1265e:	          pea 1 <_start+0x1>
   12662:	          moveq #12,d0
   12664:	          add.l sp,d0
   12666:	          move.l d0,-(sp)
   12668:	          jsr 144ee <getValueType>
   1266e:	          lea 12(sp),sp
   12672:	          tst.w d0
   12674:	      ,-- bne.s 1267c <builtIn_setCharacterSpinSpeed+0x2c>
   12676:	      |   moveq #1,d0
   12678:	,-----|-- bra.w 12716 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1267c:	|     '-> moveq #24,d0
   1267e:	|         add.l 20(sp),d0
   12682:	|         move.l d0,-(sp)
   12684:	|         jsr 14e72 <trimStack>
   1268a:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1268c:	|         movea.l 20(sp),a0
   12690:	|         move.l 24(a0),d0
   12694:	|         move.l d0,-(sp)
   12696:	|         pea 7 <_start+0x7>
   1269a:	|         lea 8(sp),a0
   1269e:	|         move.l a0,-(sp)
   126a0:	|         jsr 144ee <getValueType>
   126a6:	|         lea 12(sp),sp
   126aa:	|         tst.w d0
   126ac:	|     ,-- bne.s 126b2 <builtIn_setCharacterSpinSpeed+0x62>
   126ae:	|     |   moveq #1,d0
   126b0:	+-----|-- bra.s 12716 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   126b2:	|     '-> moveq #24,d0
   126b4:	|         add.l 20(sp),d0
   126b8:	|         move.l d0,-(sp)
   126ba:	|         jsr 14e72 <trimStack>
   126c0:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   126c2:	|         move.l (sp),d0
   126c4:	|         move.l d0,-(sp)
   126c6:	|         jsr a352 <findPerson>
   126cc:	|         addq.l #4,sp
   126ce:	|         move.l d0,8(sp)

	if (thisPerson) {
   126d2:	|  ,----- beq.s 126fc <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   126d4:	|  |      move.l 4(sp),d0
   126d8:	|  |      movea.l 8(sp),a0
   126dc:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   126e0:	|  |      moveq #28,d0
   126e2:	|  |      add.l 20(sp),d0
   126e6:	|  |      pea 1 <_start+0x1>
   126ea:	|  |      pea 1 <_start+0x1>
   126ee:	|  |      move.l d0,-(sp)
   126f0:	|  |      jsr 14de0 <setVariable>
   126f6:	|  |      lea 12(sp),sp
   126fa:	|  |  ,-- bra.s 12714 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   126fc:	|  '--|-> moveq #28,d0
   126fe:	|     |   add.l 20(sp),d0
   12702:	|     |   clr.l -(sp)
   12704:	|     |   pea 1 <_start+0x1>
   12708:	|     |   move.l d0,-(sp)
   1270a:	|     |   jsr 14de0 <setVariable>
   12710:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12714:	|     '-> moveq #2,d0
}
   12716:	'-------> lea 12(sp),sp
   1271a:	          rts

0001271c <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   1271c:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12720:	          movea.l 20(sp),a0
   12724:	          move.l 24(a0),d0
   12728:	          move.l d0,-(sp)
   1272a:	          pea 1 <_start+0x1>
   1272e:	          moveq #12,d0
   12730:	          add.l sp,d0
   12732:	          move.l d0,-(sp)
   12734:	          jsr 144ee <getValueType>
   1273a:	          lea 12(sp),sp
   1273e:	          tst.w d0
   12740:	      ,-- bne.s 12748 <builtIn_setCharacterAngleOffset+0x2c>
   12742:	      |   moveq #1,d0
   12744:	,-----|-- bra.w 127e2 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12748:	|     '-> moveq #24,d0
   1274a:	|         add.l 20(sp),d0
   1274e:	|         move.l d0,-(sp)
   12750:	|         jsr 14e72 <trimStack>
   12756:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12758:	|         movea.l 20(sp),a0
   1275c:	|         move.l 24(a0),d0
   12760:	|         move.l d0,-(sp)
   12762:	|         pea 7 <_start+0x7>
   12766:	|         lea 8(sp),a0
   1276a:	|         move.l a0,-(sp)
   1276c:	|         jsr 144ee <getValueType>
   12772:	|         lea 12(sp),sp
   12776:	|         tst.w d0
   12778:	|     ,-- bne.s 1277e <builtIn_setCharacterAngleOffset+0x62>
   1277a:	|     |   moveq #1,d0
   1277c:	+-----|-- bra.s 127e2 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   1277e:	|     '-> moveq #24,d0
   12780:	|         add.l 20(sp),d0
   12784:	|         move.l d0,-(sp)
   12786:	|         jsr 14e72 <trimStack>
   1278c:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   1278e:	|         move.l (sp),d0
   12790:	|         move.l d0,-(sp)
   12792:	|         jsr a352 <findPerson>
   12798:	|         addq.l #4,sp
   1279a:	|         move.l d0,8(sp)

	if (thisPerson) {
   1279e:	|  ,----- beq.s 127c8 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   127a0:	|  |      move.l 4(sp),d0
   127a4:	|  |      movea.l 8(sp),a0
   127a8:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   127ac:	|  |      moveq #28,d0
   127ae:	|  |      add.l 20(sp),d0
   127b2:	|  |      pea 1 <_start+0x1>
   127b6:	|  |      pea 1 <_start+0x1>
   127ba:	|  |      move.l d0,-(sp)
   127bc:	|  |      jsr 14de0 <setVariable>
   127c2:	|  |      lea 12(sp),sp
   127c6:	|  |  ,-- bra.s 127e0 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   127c8:	|  '--|-> moveq #28,d0
   127ca:	|     |   add.l 20(sp),d0
   127ce:	|     |   clr.l -(sp)
   127d0:	|     |   pea 1 <_start+0x1>
   127d4:	|     |   move.l d0,-(sp)
   127d6:	|     |   jsr 14de0 <setVariable>
   127dc:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   127e0:	|     '-> moveq #2,d0
}
   127e2:	'-------> lea 12(sp),sp
   127e6:	          rts

000127e8 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   127e8:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   127ea:	       movea.l 12(sp),a0
   127ee:	       move.l 24(a0),d0
   127f2:	       move.l d0,-(sp)
   127f4:	       pea 1 <_start+0x1>
   127f8:	       move.l sp,d0
   127fa:	       addq.l #8,d0
   127fc:	       move.l d0,-(sp)
   127fe:	       jsr 144ee <getValueType>
   12804:	       lea 12(sp),sp
   12808:	       tst.w d0
   1280a:	   ,-- bne.s 12810 <builtIn_transitionMode+0x28>
   1280c:	   |   moveq #1,d0
   1280e:	,--|-- bra.s 12846 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12810:	|  '-> move.l (sp),d0
   12812:	|      move.l d0,d0
   12814:	|      move.b d0,1a67e <fadeMode>
	trimStack (&fun -> stack);
   1281a:	|      moveq #24,d0
   1281c:	|      add.l 12(sp),d0
   12820:	|      move.l d0,-(sp)
   12822:	|      jsr 14e72 <trimStack>
   12828:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1282a:	|      moveq #28,d0
   1282c:	|      add.l 12(sp),d0
   12830:	|      pea 1 <_start+0x1>
   12834:	|      pea 1 <_start+0x1>
   12838:	|      move.l d0,-(sp)
   1283a:	|      jsr 14de0 <setVariable>
   12840:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12844:	|      moveq #2,d0
}
   12846:	'----> addq.l #4,sp
   12848:	       rts

0001284a <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1284a:	moveq #24,d0
   1284c:	add.l 8(sp),d0
   12850:	move.l d0,-(sp)
   12852:	jsr 14e72 <trimStack>
   12858:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   1285a:	moveq #28,d0
   1285c:	add.l 8(sp),d0
   12860:	pea 1 <_start+0x1>
   12864:	pea 1 <_start+0x1>
   12868:	move.l d0,-(sp)
   1286a:	jsr 14de0 <setVariable>
   12870:	lea 12(sp),sp
	return BR_CONTINUE;
   12874:	moveq #2,d0
}
   12876:	rts

00012878 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12878:	pea 1987e <PutChar+0x1ea2>
   1287e:	jsr 16f3a <KPrintF>
   12884:	addq.l #4,sp
	return BR_CONTINUE;
   12886:	moveq #2,d0
}
   12888:	rts

0001288a <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   1288a:	       lea -16(sp),sp
   1288e:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12890:	       movea.l 28(sp),a0
   12894:	       move.l 24(a0),d0
   12898:	       move.l d0,-(sp)
   1289a:	       jsr 14ac4 <getTextFromAnyVar>
   128a0:	       addq.l #4,sp
   128a2:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   128a6:	   ,-- bne.s 128ae <builtIn_saveCustomData+0x24>
   128a8:	   |   moveq #1,d0
   128aa:	,--|-- bra.w 12960 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   128ae:	|  '-> move.l 16(sp),-(sp)
   128b2:	|      jsr 2fe <encodeFilename>
   128b8:	|      addq.l #4,sp
   128ba:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   128be:	|      move.l 16(sp),8(sp)
   128c4:	|      move.l 1a7a4 <SysBase>,d0
   128ca:	|      movea.l d0,a6
   128cc:	|      movea.l 8(sp),a1
   128d0:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   128d4:	|      move.l 12(sp),-(sp)
   128d8:	|      jsr e040 <failSecurityCheck>
   128de:	|      addq.l #4,sp
   128e0:	|      tst.w d0
   128e2:	|  ,-- beq.s 128e8 <builtIn_saveCustomData+0x5e>
   128e4:	|  |   moveq #1,d0
   128e6:	+--|-- bra.s 12960 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   128e8:	|  '-> moveq #24,d0
   128ea:	|      add.l 28(sp),d0
   128ee:	|      move.l d0,-(sp)
   128f0:	|      jsr 14e72 <trimStack>
   128f6:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   128f8:	|      movea.l 28(sp),a0
   128fc:	|      movea.l 24(a0),a0
   12900:	|      move.l (a0),d0
   12902:	|      moveq #6,d1
   12904:	|      cmp.l d0,d1
   12906:	|  ,-- beq.s 1291a <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12908:	|  |   pea 198ab <PutChar+0x1ecf>
   1290e:	|  |   jsr 16f3a <KPrintF>
   12914:	|  |   addq.l #4,sp
		return BR_ERROR;
   12916:	|  |   moveq #1,d0
   12918:	+--|-- bra.s 12960 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   1291a:	|  '-> movea.l 28(sp),a0
   1291e:	|      move.l 24(a0),d0
   12922:	|      move.l d0,-(sp)
   12924:	|      move.l 16(sp),-(sp)
   12928:	|      jsr dc90 <stackToFile>
   1292e:	|      addq.l #8,sp
   12930:	|      tst.w d0
   12932:	|  ,-- bne.s 12938 <builtIn_saveCustomData+0xae>
   12934:	|  |   moveq #1,d0
   12936:	+--|-- bra.s 12960 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12938:	|  '-> moveq #24,d0
   1293a:	|      add.l 28(sp),d0
   1293e:	|      move.l d0,-(sp)
   12940:	|      jsr 14e72 <trimStack>
   12946:	|      addq.l #4,sp
	FreeVec(fileName);
   12948:	|      move.l 12(sp),4(sp)
   1294e:	|      move.l 1a7a4 <SysBase>,d0
   12954:	|      movea.l d0,a6
   12956:	|      movea.l 4(sp),a1
   1295a:	|      jsr -690(a6)
	return BR_CONTINUE;
   1295e:	|      moveq #2,d0
}
   12960:	'----> movea.l (sp)+,a6
   12962:	       lea 16(sp),sp
   12966:	       rts

00012968 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12968:	       lea -28(sp),sp
   1296c:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   1296e:	       movea.l 40(sp),a0
   12972:	       move.l 24(a0),d0
   12976:	       move.l d0,-(sp)
   12978:	       jsr 14ac4 <getTextFromAnyVar>
   1297e:	       addq.l #4,sp
   12980:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12984:	   ,-- bne.s 1298c <builtIn_loadCustomData+0x24>
   12986:	   |   moveq #1,d0
   12988:	,--|-- bra.w 12a88 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   1298c:	|  '-> move.l 28(sp),-(sp)
   12990:	|      jsr 2fe <encodeFilename>
   12996:	|      addq.l #4,sp
   12998:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   1299c:	|      move.l 28(sp),20(sp)
   129a2:	|      move.l 1a7a4 <SysBase>,d0
   129a8:	|      movea.l d0,a6
   129aa:	|      movea.l 20(sp),a1
   129ae:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   129b2:	|      move.l 24(sp),-(sp)
   129b6:	|      jsr e040 <failSecurityCheck>
   129bc:	|      addq.l #4,sp
   129be:	|      tst.w d0
   129c0:	|  ,-- beq.s 129c8 <builtIn_loadCustomData+0x60>
   129c2:	|  |   moveq #1,d0
   129c4:	+--|-- bra.w 12a88 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   129c8:	|  '-> moveq #24,d0
   129ca:	|      add.l 40(sp),d0
   129ce:	|      move.l d0,-(sp)
   129d0:	|      jsr 14e72 <trimStack>
   129d6:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   129d8:	|      moveq #28,d0
   129da:	|      add.l 40(sp),d0
   129de:	|      move.l d0,-(sp)
   129e0:	|      jsr 1473c <unlinkVar>
   129e6:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   129e8:	|      movea.l 40(sp),a0
   129ec:	|      moveq #6,d0
   129ee:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   129f2:	|      moveq #12,d0
   129f4:	|      move.l d0,16(sp)
   129f8:	|      clr.l 12(sp)
   129fc:	|      move.l 1a7a4 <SysBase>,d0
   12a02:	|      movea.l d0,a6
   12a04:	|      move.l 16(sp),d0
   12a08:	|      move.l 12(sp),d1
   12a0c:	|      jsr -684(a6)
   12a10:	|      move.l d0,8(sp)
   12a14:	|      move.l 8(sp),d0
   12a18:	|      movea.l 40(sp),a0
   12a1c:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12a20:	|      movea.l 40(sp),a0
   12a24:	|      move.l 32(a0),d0
   12a28:	|  ,-- bne.s 12a2e <builtIn_loadCustomData+0xc6>
   12a2a:	|  |   moveq #1,d0
   12a2c:	+--|-- bra.s 12a88 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12a2e:	|  '-> movea.l 40(sp),a0
   12a32:	|      movea.l 32(a0),a0
   12a36:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12a38:	|      movea.l 40(sp),a0
   12a3c:	|      movea.l 32(a0),a0
   12a40:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12a44:	|      movea.l 40(sp),a0
   12a48:	|      movea.l 32(a0),a0
   12a4c:	|      moveq #1,d0
   12a4e:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12a52:	|      movea.l 40(sp),a0
   12a56:	|      move.l 32(a0),d0
   12a5a:	|      move.l d0,-(sp)
   12a5c:	|      move.l 28(sp),-(sp)
   12a60:	|      jsr d6ca <fileToStack>
   12a66:	|      addq.l #8,sp
   12a68:	|      tst.w d0
   12a6a:	|  ,-- bne.s 12a70 <builtIn_loadCustomData+0x108>
   12a6c:	|  |   moveq #1,d0
   12a6e:	+--|-- bra.s 12a88 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12a70:	|  '-> move.l 24(sp),4(sp)
   12a76:	|      move.l 1a7a4 <SysBase>,d0
   12a7c:	|      movea.l d0,a6
   12a7e:	|      movea.l 4(sp),a1
   12a82:	|      jsr -690(a6)
	return BR_CONTINUE;
   12a86:	|      moveq #2,d0
}
   12a88:	'----> movea.l (sp)+,a6
   12a8a:	       lea 28(sp),sp
   12a8e:	       rts

00012a90 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12a90:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12a92:	       movea.l 12(sp),a0
   12a96:	       move.l 24(a0),d0
   12a9a:	       move.l d0,-(sp)
   12a9c:	       pea 1 <_start+0x1>
   12aa0:	       move.l sp,d0
   12aa2:	       addq.l #8,d0
   12aa4:	       move.l d0,-(sp)
   12aa6:	       jsr 144ee <getValueType>
   12aac:	       lea 12(sp),sp
   12ab0:	       tst.w d0
   12ab2:	   ,-- bne.s 12ab8 <builtIn_setCustomEncoding+0x28>
   12ab4:	   |   moveq #1,d0
   12ab6:	,--|-- bra.s 12aee <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12ab8:	|  '-> move.l (sp),d0
   12aba:	|      move.l d0,d0
   12abc:	|      move.w d0,1a85c <saveEncoding>
	trimStack (&fun -> stack);
   12ac2:	|      moveq #24,d0
   12ac4:	|      add.l 12(sp),d0
   12ac8:	|      move.l d0,-(sp)
   12aca:	|      jsr 14e72 <trimStack>
   12ad0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12ad2:	|      moveq #28,d0
   12ad4:	|      add.l 12(sp),d0
   12ad8:	|      pea 1 <_start+0x1>
   12adc:	|      pea 1 <_start+0x1>
   12ae0:	|      move.l d0,-(sp)
   12ae2:	|      jsr 14de0 <setVariable>
   12ae8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12aec:	|      moveq #2,d0
}
   12aee:	'----> addq.l #4,sp
   12af0:	       rts

00012af2 <builtIn_freeSound>:

builtIn(freeSound)
{
   12af2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12af4:	       movea.l 12(sp),a0
   12af8:	       move.l 24(a0),d0
   12afc:	       move.l d0,-(sp)
   12afe:	       pea 5 <_start+0x5>
   12b02:	       move.l sp,d0
   12b04:	       addq.l #8,d0
   12b06:	       move.l d0,-(sp)
   12b08:	       jsr 144ee <getValueType>
   12b0e:	       lea 12(sp),sp
   12b12:	       tst.w d0
   12b14:	   ,-- bne.s 12b1a <builtIn_freeSound+0x28>
   12b16:	   |   moveq #1,d0
   12b18:	,--|-- bra.s 12b38 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12b1a:	|  '-> moveq #24,d0
   12b1c:	|      add.l 12(sp),d0
   12b20:	|      move.l d0,-(sp)
   12b22:	|      jsr 14e72 <trimStack>
   12b28:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12b2a:	|      move.l (sp),d0
   12b2c:	|      move.l d0,-(sp)
   12b2e:	|      jsr ce8c <huntKillFreeSound>
   12b34:	|      addq.l #4,sp
	return BR_CONTINUE;
   12b36:	|      moveq #2,d0
}
   12b38:	'----> addq.l #4,sp
   12b3a:	       rts

00012b3c <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12b3c:	       lea -12(sp),sp
   12b40:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12b42:	       movea.l 24(sp),a0
   12b46:	       move.l 24(a0),d0
   12b4a:	       move.l d0,-(sp)
   12b4c:	       pea 1 <_start+0x1>
   12b50:	       moveq #16,d0
   12b52:	       add.l sp,d0
   12b54:	       move.l d0,-(sp)
   12b56:	       jsr 144ee <getValueType>
   12b5c:	       lea 12(sp),sp
   12b60:	       tst.w d0
   12b62:	   ,-- bne.s 12b6a <builtIn_parallaxAdd+0x2e>
   12b64:	   |   moveq #1,d0
   12b66:	,--|-- bra.w 12c3e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12b6a:	|  '-> moveq #24,d0
   12b6c:	|      add.l 24(sp),d0
   12b70:	|      move.l d0,-(sp)
   12b72:	|      jsr 14e72 <trimStack>
   12b78:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12b7a:	|      movea.l 24(sp),a0
   12b7e:	|      move.l 24(a0),d0
   12b82:	|      move.l d0,-(sp)
   12b84:	|      pea 1 <_start+0x1>
   12b88:	|      moveq #20,d0
   12b8a:	|      add.l sp,d0
   12b8c:	|      move.l d0,-(sp)
   12b8e:	|      jsr 144ee <getValueType>
   12b94:	|      lea 12(sp),sp
   12b98:	|      tst.w d0
   12b9a:	|  ,-- bne.s 12ba2 <builtIn_parallaxAdd+0x66>
   12b9c:	|  |   moveq #1,d0
   12b9e:	+--|-- bra.w 12c3e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12ba2:	|  '-> moveq #24,d0
   12ba4:	|      add.l 24(sp),d0
   12ba8:	|      move.l d0,-(sp)
   12baa:	|      jsr 14e72 <trimStack>
   12bb0:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12bb2:	|      movea.l 24(sp),a0
   12bb6:	|      move.l 24(a0),d0
   12bba:	|      move.l d0,-(sp)
   12bbc:	|      pea 5 <_start+0x5>
   12bc0:	|      lea 12(sp),a0
   12bc4:	|      move.l a0,-(sp)
   12bc6:	|      jsr 144ee <getValueType>
   12bcc:	|      lea 12(sp),sp
   12bd0:	|      tst.w d0
   12bd2:	|  ,-- bne.s 12bd8 <builtIn_parallaxAdd+0x9c>
   12bd4:	|  |   moveq #1,d0
   12bd6:	+--|-- bra.s 12c3e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12bd8:	|  '-> moveq #24,d0
   12bda:	|      add.l 24(sp),d0
   12bde:	|      move.l d0,-(sp)
   12be0:	|      jsr 14e72 <trimStack>
   12be6:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12be8:	|      move.l 8(sp),d0
   12bec:	|      move.l d0,d0
   12bee:	|      moveq #0,d2
   12bf0:	|      move.w d0,d2
   12bf2:	|      move.l 12(sp),d0
   12bf6:	|      move.l d0,d0
   12bf8:	|      moveq #0,d1
   12bfa:	|      move.w d0,d1
   12bfc:	|      move.l 4(sp),d0
   12c00:	|      move.l d0,d0
   12c02:	|      move.w d0,d0
   12c04:	|      andi.l #65535,d0
   12c0a:	|      move.l d2,-(sp)
   12c0c:	|      move.l d1,-(sp)
   12c0e:	|      move.l d0,-(sp)
   12c10:	|      jsr d0a8 <loadParallax>
   12c16:	|      lea 12(sp),sp
   12c1a:	|      tst.w d0
   12c1c:	|  ,-- bne.s 12c22 <builtIn_parallaxAdd+0xe6>
   12c1e:	|  |   moveq #1,d0
   12c20:	+--|-- bra.s 12c3e <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12c22:	|  '-> moveq #28,d0
   12c24:	|      add.l 24(sp),d0
   12c28:	|      pea 1 <_start+0x1>
   12c2c:	|      pea 1 <_start+0x1>
   12c30:	|      move.l d0,-(sp)
   12c32:	|      jsr 14de0 <setVariable>
   12c38:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12c3c:	|      moveq #2,d0
}
   12c3e:	'----> move.l (sp)+,d2
   12c40:	       lea 12(sp),sp
   12c44:	       rts

00012c46 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12c46:	jsr cfe0 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12c4c:	moveq #28,d0
   12c4e:	add.l 8(sp),d0
   12c52:	pea 1 <_start+0x1>
   12c56:	pea 1 <_start+0x1>
   12c5a:	move.l d0,-(sp)
   12c5c:	jsr 14de0 <setVariable>
   12c62:	lea 12(sp),sp
	return BR_CONTINUE;
   12c66:	moveq #2,d0
}
   12c68:	rts

00012c6a <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12c6a:	pea 198c9 <PutChar+0x1eed>
   12c70:	jsr 16f3a <KPrintF>
   12c76:	addq.l #4,sp

	return BR_CONTINUE;
   12c78:	moveq #2,d0
}
   12c7a:	rts

00012c7c <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12c7c:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12c7e:	             movea.l 16(sp),a0
   12c82:	             movea.l 24(a0),a0
   12c86:	             move.l (a0),d0
   12c88:	             moveq #1,d1
   12c8a:	             cmp.l d0,d1
   12c8c:	      ,----- beq.s 12cd4 <builtIn_makeFastArray+0x58>
   12c8e:	      |      moveq #6,d1
   12c90:	      |      cmp.l d0,d1
   12c92:	,-----|----- bne.s 12d12 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12c94:	|     |      movea.l 16(sp),a0
   12c98:	|     |      movea.l 24(a0),a0
   12c9c:	|     |      move.l 4(a0),d1
   12ca0:	|     |      moveq #28,d0
   12ca2:	|     |      add.l 16(sp),d0
   12ca6:	|     |      move.l d1,-(sp)
   12ca8:	|     |      move.l d0,-(sp)
   12caa:	|     |      jsr 145a0 <makeFastArrayFromStack>
   12cb0:	|     |      addq.l #8,sp
   12cb2:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12cb6:	|     |      moveq #24,d0
   12cb8:	|     |      add.l 16(sp),d0
   12cbc:	|     |      move.l d0,-(sp)
   12cbe:	|     |      jsr 14e72 <trimStack>
   12cc4:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12cc6:	|     |      tst.w 6(sp)
   12cca:	|     |  ,-- beq.s 12cd0 <builtIn_makeFastArray+0x54>
   12ccc:	|     |  |   moveq #2,d0
   12cce:	|  ,--|--|-- bra.s 12d24 <builtIn_makeFastArray+0xa8>
   12cd0:	|  |  |  '-> moveq #1,d0
   12cd2:	|  +--|----- bra.s 12d24 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12cd4:	|  |  '----> movea.l 16(sp),a0
   12cd8:	|  |         movea.l 24(a0),a0
   12cdc:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12ce2:	|  |         moveq #24,d0
   12ce4:	|  |         add.l 16(sp),d0
   12ce8:	|  |         move.l d0,-(sp)
   12cea:	|  |         jsr 14e72 <trimStack>
   12cf0:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12cf2:	|  |         moveq #28,d0
   12cf4:	|  |         add.l 16(sp),d0
   12cf8:	|  |         move.l 2(sp),-(sp)
   12cfc:	|  |         move.l d0,-(sp)
   12cfe:	|  |         jsr 1460a <makeFastArraySize>
   12d04:	|  |         addq.l #8,sp
   12d06:	|  |         tst.w d0
   12d08:	|  |     ,-- beq.s 12d0e <builtIn_makeFastArray+0x92>
   12d0a:	|  |     |   moveq #2,d0
   12d0c:	|  +-----|-- bra.s 12d24 <builtIn_makeFastArray+0xa8>
   12d0e:	|  |     '-> moveq #1,d0
   12d10:	|  +-------- bra.s 12d24 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   12d12:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   12d14:	   |         pea 198f2 <PutChar+0x1f16>
   12d1a:	   |         jsr 16f3a <KPrintF>
   12d20:	   |         addq.l #4,sp
	return BR_ERROR;
   12d22:	   |         moveq #1,d0
}
   12d24:	   '-------> addq.l #8,sp
   12d26:	             rts

00012d28 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   12d28:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12d2a:	          movea.l 16(sp),a0
   12d2e:	          move.l 24(a0),d0
   12d32:	          move.l d0,-(sp)
   12d34:	          pea 7 <_start+0x7>
   12d38:	          move.l sp,d0
   12d3a:	          addq.l #8,d0
   12d3c:	          move.l d0,-(sp)
   12d3e:	          jsr 144ee <getValueType>
   12d44:	          lea 12(sp),sp
   12d48:	          tst.w d0
   12d4a:	      ,-- bne.s 12d50 <builtIn_getCharacterScale+0x28>
   12d4c:	      |   moveq #1,d0
   12d4e:	,-----|-- bra.s 12dca <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   12d50:	|     '-> moveq #24,d0
   12d52:	|         add.l 16(sp),d0
   12d56:	|         move.l d0,-(sp)
   12d58:	|         jsr 14e72 <trimStack>
   12d5e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   12d60:	|         move.l (sp),d0
   12d62:	|         move.l d0,-(sp)
   12d64:	|         jsr a352 <findPerson>
   12d6a:	|         addq.l #4,sp
   12d6c:	|         move.l d0,4(sp)
	if (pers) {
   12d70:	|  ,----- beq.s 12db0 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   12d72:	|  |      movea.l 4(sp),a0
   12d76:	|  |      move.l 32(a0),d0
   12d7a:	|  |      move.l #1120403456,-(sp)
   12d80:	|  |      move.l d0,-(sp)
   12d82:	|  |      jsr 1741e <__mulsf3>
   12d88:	|  |      addq.l #8,sp
   12d8a:	|  |      move.l d0,-(sp)
   12d8c:	|  |      jsr 17304 <__fixsfsi>
   12d92:	|  |      addq.l #4,sp
   12d94:	|  |      move.l d0,d1
   12d96:	|  |      moveq #28,d0
   12d98:	|  |      add.l 16(sp),d0
   12d9c:	|  |      move.l d1,-(sp)
   12d9e:	|  |      pea 1 <_start+0x1>
   12da2:	|  |      move.l d0,-(sp)
   12da4:	|  |      jsr 14de0 <setVariable>
   12daa:	|  |      lea 12(sp),sp
   12dae:	|  |  ,-- bra.s 12dc8 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12db0:	|  '--|-> moveq #28,d0
   12db2:	|     |   add.l 16(sp),d0
   12db6:	|     |   clr.l -(sp)
   12db8:	|     |   pea 1 <_start+0x1>
   12dbc:	|     |   move.l d0,-(sp)
   12dbe:	|     |   jsr 14de0 <setVariable>
   12dc4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12dc8:	|     '-> moveq #2,d0
}
   12dca:	'-------> addq.l #8,sp
   12dcc:	          rts

00012dce <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   12dce:	move.l 1a880 <gameSettings>,d0
   12dd4:	move.l d0,d1
   12dd6:	moveq #28,d0
   12dd8:	add.l 8(sp),d0
   12ddc:	move.l d1,-(sp)
   12dde:	pea 1 <_start+0x1>
   12de2:	move.l d0,-(sp)
   12de4:	jsr 14de0 <setVariable>
   12dea:	lea 12(sp),sp
	return BR_CONTINUE;
   12dee:	moveq #2,d0
}
   12df0:	rts

00012df2 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12df2:	moveq #24,d0
   12df4:	add.l 8(sp),d0
   12df8:	move.l d0,-(sp)
   12dfa:	jsr 14e72 <trimStack>
   12e00:	addq.l #4,sp
	trimStack (&fun -> stack);
   12e02:	moveq #24,d0
   12e04:	add.l 8(sp),d0
   12e08:	move.l d0,-(sp)
   12e0a:	jsr 14e72 <trimStack>
   12e10:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   12e12:	moveq #28,d0
   12e14:	add.l 8(sp),d0
   12e18:	clr.l -(sp)
   12e1a:	pea 1 <_start+0x1>
   12e1e:	move.l d0,-(sp)
   12e20:	jsr 14de0 <setVariable>
   12e26:	lea 12(sp),sp

	return BR_CONTINUE;
   12e2a:	moveq #2,d0

}
   12e2c:	rts

00012e2e <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   12e2e:	move.l 1a124 <lastFramesPerSecond>,d1
   12e34:	moveq #28,d0
   12e36:	add.l 8(sp),d0
   12e3a:	move.l d1,-(sp)
   12e3c:	pea 1 <_start+0x1>
   12e40:	move.l d0,-(sp)
   12e42:	jsr 14de0 <setVariable>
   12e48:	lea 12(sp),sp
	return BR_CONTINUE;
   12e4c:	moveq #2,d0
}
   12e4e:	rts

00012e50 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   12e50:	moveq #2,d0
}
   12e52:	rts

00012e54 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   12e54:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e58:	          movea.l 60(sp),a0
   12e5c:	          move.l 24(a0),d0
   12e60:	          move.l d0,-(sp)
   12e62:	          pea 1 <_start+0x1>
   12e66:	          pea 1a6ba <thumbHeight>
   12e6c:	          jsr 144ee <getValueType>
   12e72:	          lea 12(sp),sp
   12e76:	          tst.w d0
   12e78:	      ,-- bne.s 12e80 <builtIn_setThumbnailSize+0x2c>
   12e7a:	      |   moveq #1,d0
   12e7c:	,-----|-- bra.w 12f3c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12e80:	|     '-> moveq #24,d0
   12e82:	|         add.l 60(sp),d0
   12e86:	|         move.l d0,-(sp)
   12e88:	|         jsr 14e72 <trimStack>
   12e8e:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e90:	|         movea.l 60(sp),a0
   12e94:	|         move.l 24(a0),d0
   12e98:	|         move.l d0,-(sp)
   12e9a:	|         pea 1 <_start+0x1>
   12e9e:	|         pea 1a6b6 <thumbWidth>
   12ea4:	|         jsr 144ee <getValueType>
   12eaa:	|         lea 12(sp),sp
   12eae:	|         tst.w d0
   12eb0:	|     ,-- bne.s 12eb8 <builtIn_setThumbnailSize+0x64>
   12eb2:	|     |   moveq #1,d0
   12eb4:	+-----|-- bra.w 12f3c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12eb8:	|     '-> moveq #24,d0
   12eba:	|         add.l 60(sp),d0
   12ebe:	|         move.l d0,-(sp)
   12ec0:	|         jsr 14e72 <trimStack>
   12ec6:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   12ec8:	|         move.l 1a6b6 <thumbWidth>,d0
   12ece:	|     ,-- bmi.s 12efc <builtIn_setThumbnailSize+0xa8>
   12ed0:	|     |   move.l 1a6ba <thumbHeight>,d0
   12ed6:	|     +-- bmi.s 12efc <builtIn_setThumbnailSize+0xa8>
   12ed8:	|     |   move.l 1a6b6 <thumbWidth>,d0
   12ede:	|     |   move.l d0,d1
   12ee0:	|     |   move.l 1a6f8 <winWidth>,d0
   12ee6:	|     |   cmp.l d1,d0
   12ee8:	|     +-- bcs.s 12efc <builtIn_setThumbnailSize+0xa8>
   12eea:	|     |   move.l 1a6ba <thumbHeight>,d0
   12ef0:	|     |   move.l d0,d1
   12ef2:	|     |   move.l 1a6fc <winHeight>,d0
   12ef8:	|     |   cmp.l d1,d0
   12efa:	|  ,--|-- bcc.s 12f3a <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   12efc:	|  |  '-> move.l 1a6ba <thumbHeight>,d1
   12f02:	|  |      move.l 1a6b6 <thumbWidth>,d0
   12f08:	|  |      move.l d1,-(sp)
   12f0a:	|  |      move.l d0,-(sp)
   12f0c:	|  |      pea 19919 <PutChar+0x1f3d>
   12f12:	|  |      lea 14(sp),a0
   12f16:	|  |      move.l a0,-(sp)
   12f18:	|  |      jsr 13cf8 <sprintf>
   12f1e:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   12f22:	|  |      lea 2(sp),a0
   12f26:	|  |      move.l a0,-(sp)
   12f28:	|  |      pea 19921 <PutChar+0x1f45>
   12f2e:	|  |      jsr 16f3a <KPrintF>
   12f34:	|  |      addq.l #8,sp
		return BR_ERROR;
   12f36:	|  |      moveq #1,d0
   12f38:	+--|----- bra.s 12f3c <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   12f3a:	|  '----> moveq #2,d0
}
   12f3c:	'-------> lea 52(sp),sp
   12f40:	          rts

00012f42 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   12f42:	       lea -12(sp),sp
   12f46:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f48:	       movea.l 24(sp),a0
   12f4c:	       move.l 24(a0),d0
   12f50:	       move.l d0,-(sp)
   12f52:	       pea 1 <_start+0x1>
   12f56:	       lea 12(sp),a0
   12f5a:	       move.l a0,-(sp)
   12f5c:	       jsr 144ee <getValueType>
   12f62:	       lea 12(sp),sp
   12f66:	       tst.w d0
   12f68:	   ,-- bne.s 12f70 <builtIn_hasFlag+0x2e>
   12f6a:	   |   moveq #1,d0
   12f6c:	,--|-- bra.w 13000 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   12f70:	|  '-> moveq #24,d0
   12f72:	|      add.l 24(sp),d0
   12f76:	|      move.l d0,-(sp)
   12f78:	|      jsr 14e72 <trimStack>
   12f7e:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12f80:	|      movea.l 24(sp),a0
   12f84:	|      move.l 24(a0),d0
   12f88:	|      move.l d0,-(sp)
   12f8a:	|      pea 7 <_start+0x7>
   12f8e:	|      moveq #16,d0
   12f90:	|      add.l sp,d0
   12f92:	|      move.l d0,-(sp)
   12f94:	|      jsr 144ee <getValueType>
   12f9a:	|      lea 12(sp),sp
   12f9e:	|      tst.w d0
   12fa0:	|  ,-- bne.s 12fa6 <builtIn_hasFlag+0x64>
   12fa2:	|  |   moveq #1,d0
   12fa4:	+--|-- bra.s 13000 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   12fa6:	|  '-> moveq #24,d0
   12fa8:	|      add.l 24(sp),d0
   12fac:	|      move.l d0,-(sp)
   12fae:	|      jsr 14e72 <trimStack>
   12fb4:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   12fb6:	|      move.l 8(sp),d0
   12fba:	|      move.l d0,-(sp)
   12fbc:	|      jsr d254 <findObjectType>
   12fc2:	|      addq.l #4,sp
   12fc4:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   12fc8:	|  ,-- bne.s 12fce <builtIn_hasFlag+0x8c>
   12fca:	|  |   moveq #1,d0
   12fcc:	+--|-- bra.s 13000 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   12fce:	|  '-> movea.l 12(sp),a0
   12fd2:	|      move.w 36(a0),d0
   12fd6:	|      moveq #0,d2
   12fd8:	|      move.w d0,d2
   12fda:	|      move.l 4(sp),d1
   12fde:	|      moveq #1,d0
   12fe0:	|      lsl.l d1,d0
   12fe2:	|      move.l d2,d1
   12fe4:	|      and.l d0,d1
   12fe6:	|      moveq #28,d0
   12fe8:	|      add.l 24(sp),d0
   12fec:	|      move.l d1,-(sp)
   12fee:	|      pea 1 <_start+0x1>
   12ff2:	|      move.l d0,-(sp)
   12ff4:	|      jsr 14de0 <setVariable>
   12ffa:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12ffe:	|      moveq #2,d0
}
   13000:	'----> move.l (sp)+,d2
   13002:	       lea 12(sp),sp
   13006:	       rts

00013008 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   13008:	       jsr d242 <snapshot>
   1300e:	       tst.w d0
   13010:	,----- beq.s 13016 <builtIn_snapshotGrab+0xe>
   13012:	|      moveq #2,d0
   13014:	|  ,-- bra.s 13018 <builtIn_snapshotGrab+0x10>
   13016:	'--|-> moveq #1,d0
}
   13018:	   '-> rts

0001301a <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   1301a:	jsr d0ee <nosnapshot>
	return BR_CONTINUE;
   13020:	moveq #2,d0
}
   13022:	rts

00013024 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   13024:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13026:	move.w 1a000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1302e:	movea.l 12(sp),a0
   13032:	move.l 24(a0),d0
   13036:	move.l d0,-(sp)
   13038:	jsr 14a2e <getBoolean>
   1303e:	addq.l #4,sp
   13040:	move.w d0,1a000 <allowAnyFilename>
	trimStack (&fun -> stack);
   13046:	moveq #24,d0
   13048:	add.l 12(sp),d0
   1304c:	move.l d0,-(sp)
   1304e:	jsr 14e72 <trimStack>
   13054:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   13056:	movea.w 2(sp),a0
   1305a:	moveq #28,d0
   1305c:	add.l 12(sp),d0
   13060:	move.l a0,-(sp)
   13062:	pea 1 <_start+0x1>
   13066:	move.l d0,-(sp)
   13068:	jsr 14de0 <setVariable>
   1306e:	lea 12(sp),sp
	return BR_CONTINUE;
   13072:	moveq #2,d0
}
   13074:	addq.l #4,sp
   13076:	rts

00013078 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13078:	moveq #24,d0
   1307a:	add.l 8(sp),d0
   1307e:	move.l d0,-(sp)
   13080:	jsr 14e72 <trimStack>
   13086:	addq.l #4,sp
	trimStack (&fun -> stack);
   13088:	moveq #24,d0
   1308a:	add.l 8(sp),d0
   1308e:	move.l d0,-(sp)
   13090:	jsr 14e72 <trimStack>
   13096:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   13098:	moveq #28,d0
   1309a:	add.l 8(sp),d0
   1309e:	clr.l -(sp)
   130a0:	pea 1 <_start+0x1>
   130a4:	move.l d0,-(sp)
   130a6:	jsr 14de0 <setVariable>
   130ac:	lea 12(sp),sp

	return BR_CONTINUE;
   130b0:	moveq #2,d0
}
   130b2:	rts

000130b4 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   130b4:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   130b6:	movea.l 12(sp),a0
   130ba:	move.l 24(a0),d0
   130be:	move.l d0,-(sp)
   130c0:	jsr 14ac4 <getTextFromAnyVar>
   130c6:	addq.l #4,sp
   130c8:	move.l d0,(sp)
	trimStack (&fun -> stack);
   130ca:	moveq #24,d0
   130cc:	add.l 12(sp),d0
   130d0:	move.l d0,-(sp)
   130d2:	jsr 14e72 <trimStack>
   130d8:	addq.l #4,sp
	KPrintF (mess);
   130da:	move.l (sp),-(sp)
   130dc:	jsr 16f3a <KPrintF>
   130e2:	addq.l #4,sp
	return BR_ERROR;
   130e4:	moveq #1,d0
}
   130e6:	addq.l #4,sp
   130e8:	rts

000130ea <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   130ea:	moveq #24,d0
   130ec:	add.l 8(sp),d0
   130f0:	move.l d0,-(sp)
   130f2:	jsr 14e72 <trimStack>
   130f8:	addq.l #4,sp
	trimStack (&fun -> stack);
   130fa:	moveq #24,d0
   130fc:	add.l 8(sp),d0
   13100:	move.l d0,-(sp)
   13102:	jsr 14e72 <trimStack>
   13108:	addq.l #4,sp
	trimStack (&fun -> stack);
   1310a:	moveq #24,d0
   1310c:	add.l 8(sp),d0
   13110:	move.l d0,-(sp)
   13112:	jsr 14e72 <trimStack>
   13118:	addq.l #4,sp
	trimStack (&fun -> stack);
   1311a:	moveq #24,d0
   1311c:	add.l 8(sp),d0
   13120:	move.l d0,-(sp)
   13122:	jsr 14e72 <trimStack>
   13128:	addq.l #4,sp

	return BR_CONTINUE;
   1312a:	moveq #2,d0
}
   1312c:	rts

0001312e <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1312e:	moveq #24,d0
   13130:	add.l 8(sp),d0
   13134:	move.l d0,-(sp)
   13136:	jsr 14e72 <trimStack>
   1313c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1313e:	moveq #24,d0
   13140:	add.l 8(sp),d0
   13144:	move.l d0,-(sp)
   13146:	jsr 14e72 <trimStack>
   1314c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1314e:	moveq #24,d0
   13150:	add.l 8(sp),d0
   13154:	move.l d0,-(sp)
   13156:	jsr 14e72 <trimStack>
   1315c:	addq.l #4,sp

	return BR_CONTINUE;
   1315e:	moveq #2,d0

}
   13160:	rts

00013162 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   13162:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   13164:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1316a:	sne d0
   1316c:	neg.b d0
   1316e:	moveq #0,d1
   13170:	move.b d0,d1
   13172:	moveq #28,d0
   13174:	add.l 12(sp),d0
   13178:	move.l d1,-(sp)
   1317a:	pea 1 <_start+0x1>
   1317e:	move.l d0,-(sp)
   13180:	jsr 14de0 <setVariable>
   13186:	lea 12(sp),sp
	return BR_CONTINUE;
   1318a:	moveq #2,d0
}
   1318c:	addq.l #4,sp
   1318e:	rts

00013190 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   13190:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   13192:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   13198:	pea 19938 <PutChar+0x1f5c>
   1319e:	jsr 16f3a <KPrintF>
   131a4:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   131a6:	tst.w 2(sp)
   131aa:	sne d0
   131ac:	neg.b d0
   131ae:	moveq #0,d1
   131b0:	move.b d0,d1
   131b2:	moveq #28,d0
   131b4:	add.l 12(sp),d0
   131b8:	move.l d1,-(sp)
   131ba:	pea 1 <_start+0x1>
   131be:	move.l d0,-(sp)
   131c0:	jsr 14de0 <setVariable>
   131c6:	lea 12(sp),sp
	return BR_CONTINUE;
   131ca:	moveq #2,d0
}
   131cc:	addq.l #4,sp
   131ce:	rts

000131d0 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   131d0:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   131d4:	             move.l 104(sp),d0
   131d8:	             cmpi.l #166,d0
   131de:	,----------- bhi.w 132c0 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   131e2:	|            move.l 104(sp),d0
   131e6:	|            add.l d0,d0
   131e8:	|            movea.l d0,a1
   131ea:	|            adda.l d0,a1
   131ec:	|            lea 1a146 <paramNum>,a0
   131f2:	|            move.l (0,a1,a0.l),d0
   131f6:	|            moveq #-1,d1
   131f8:	|            cmp.l d0,d1
   131fa:	|  ,-------- beq.w 13288 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   131fe:	|  |         move.l 104(sp),d0
   13202:	|  |         add.l d0,d0
   13204:	|  |         movea.l d0,a1
   13206:	|  |         adda.l d0,a1
   13208:	|  |         lea 1a146 <paramNum>,a0
   1320e:	|  |         move.l (0,a1,a0.l),d0
   13212:	|  |         cmp.l 108(sp),d0
   13216:	|  +-------- beq.s 13288 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   13218:	|  |         move.l 104(sp),d0
   1321c:	|  |         add.l d0,d0
   1321e:	|  |         movea.l d0,a1
   13220:	|  |         adda.l d0,a1
   13222:	|  |         lea 1a146 <paramNum>,a0
   13228:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   1322c:	|  |         moveq #1,d1
   1322e:	|  |         cmp.l d0,d1
   13230:	|  |  ,----- bne.s 1323a <callBuiltIn+0x6a>
   13232:	|  |  |      move.l #99967,d0
   13238:	|  |  |  ,-- bra.s 13240 <callBuiltIn+0x70>
   1323a:	|  |  '--|-> move.l #104814,d0
   13240:	|  |     '-> move.l 104(sp),d1
   13244:	|  |         add.l d1,d1
   13246:	|  |         movea.l d1,a1
   13248:	|  |         adda.l d1,a1
   1324a:	|  |         lea 1a146 <paramNum>,a0
   13250:	|  |         move.l (0,a1,a0.l),d1
   13254:	|  |         move.l d0,-(sp)
   13256:	|  |         move.l d1,-(sp)
   13258:	|  |         pea 19970 <PutChar+0x1f94>
   1325e:	|  |         lea 12(sp),a0
   13262:	|  |         move.l a0,-(sp)
   13264:	|  |         jsr 13cf8 <sprintf>
   1326a:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   1326e:	|  |         movea.l sp,a0
   13270:	|  |         move.l a0,-(sp)
   13272:	|  |         jsr b8 <copyString>
   13278:	|  |         addq.l #4,sp
   1327a:	|  |         move.l d0,-(sp)
   1327c:	|  |         jsr 16f3a <KPrintF>
   13282:	|  |         addq.l #4,sp
				return BR_ERROR;
   13284:	|  |         moveq #1,d0
   13286:	|  |     ,-- bra.s 132d0 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   13288:	|  '-----|-> move.l 104(sp),d0
   1328c:	|        |   add.l d0,d0
   1328e:	|        |   movea.l d0,a1
   13290:	|        |   adda.l d0,a1
   13292:	|        |   lea 1a3e2 <builtInFunctionArray>,a0
   13298:	|        |   move.l (0,a1,a0.l),d0
   1329c:	+--------|-- beq.s 132c0 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   1329e:	|        |   move.l 104(sp),d0
   132a2:	|        |   add.l d0,d0
   132a4:	|        |   movea.l d0,a1
   132a6:	|        |   adda.l d0,a1
   132a8:	|        |   lea 1a3e2 <builtInFunctionArray>,a0
   132ae:	|        |   movea.l (0,a1,a0.l),a0
   132b2:	|        |   move.l 112(sp),-(sp)
   132b6:	|        |   move.l 112(sp),-(sp)
   132ba:	|        |   jsr (a0)
   132bc:	|        |   addq.l #8,sp
   132be:	|        +-- bra.s 132d0 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   132c0:	'--------|-> pea 1999b <line.c.74a5f850+0x4>
   132c6:	         |   jsr 16f3a <KPrintF>
   132cc:	         |   addq.l #4,sp
	return BR_ERROR;
   132ce:	         |   moveq #1,d0
}
   132d0:	         '-> lea 100(sp),sp
   132d4:	             rts

000132d6 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   132d6:	          subq.l #8,sp
	int indexNum = -1;
   132d8:	          moveq #-1,d0
   132da:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   132de:	          clr.l (sp)
   132e0:	   ,----- bra.s 13306 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   132e2:	,--|----> move.l 1a878 <languageTable>,d1
   132e8:	|  |      move.l (sp),d0
   132ea:	|  |      add.l d0,d0
   132ec:	|  |      add.l d0,d0
   132ee:	|  |      movea.l d1,a0
   132f0:	|  |      adda.l d0,a0
   132f2:	|  |      move.l (a0),d0
   132f4:	|  |      move.l d0,d1
   132f6:	|  |      move.l 1a880 <gameSettings>,d0
   132fc:	|  |      cmp.l d1,d0
   132fe:	|  |  ,-- bne.s 13304 <getLanguageForFileB+0x2e>
   13300:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13304:	|  |  '-> addq.l #1,(sp)
   13306:	|  '----> move.l 1a884 <gameSettings+0x4>,d0
   1330c:	|         cmp.l (sp),d0
   1330e:	'-------- bcc.s 132e2 <getLanguageForFileB+0xc>
	}

	return indexNum;
   13310:	          move.l 4(sp),d0
}
   13314:	          addq.l #8,sp
   13316:	          rts

00013318 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   13318:	          lea -20(sp),sp
   1331c:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   1331e:	          move.l 28(sp),-(sp)
   13322:	          jsr 139da <strlen>
   13328:	          addq.l #4,sp
   1332a:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   1332e:	          moveq #4,d0
   13330:	          cmp.l 12(sp),d0
   13334:	      ,-- bge.s 13358 <getPrefsFilename+0x40>
   13336:	      |   move.l 12(sp),d0
   1333a:	      |   subq.l #4,d0
   1333c:	      |   movea.l 28(sp),a0
   13340:	      |   adda.l d0,a0
   13342:	      |   move.b (a0),d0
   13344:	      |   cmpi.b #46,d0
   13348:	      +-- bne.s 13358 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   1334a:	      |   move.l 12(sp),d0
   1334e:	      |   subq.l #4,d0
   13350:	      |   movea.l 28(sp),a0
   13354:	      |   adda.l d0,a0
   13356:	      |   clr.b (a0)
	}

	char * f = filename;
   13358:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   1335e:	          clr.l 20(sp)
   13362:	   ,----- bra.s 1338a <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   13364:	,--|----> move.l 20(sp),d0
   13368:	|  |      movea.l 28(sp),a0
   1336c:	|  |      adda.l d0,a0
   1336e:	|  |      move.b (a0),d0
   13370:	|  |      cmpi.b #47,d0
   13374:	|  |  ,-- bne.s 13386 <getPrefsFilename+0x6e>
   13376:	|  |  |   move.l 20(sp),d0
   1337a:	|  |  |   addq.l #1,d0
   1337c:	|  |  |   move.l 28(sp),d1
   13380:	|  |  |   add.l d0,d1
   13382:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   13386:	|  |  '-> addq.l #1,20(sp)
   1338a:	|  '----> move.l 20(sp),d0
   1338e:	|         cmp.l 12(sp),d0
   13392:	'-------- blt.s 13364 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   13394:	          pea 199c6 <line.c.74a5f850+0x2f>
   1339a:	          move.l 20(sp),-(sp)
   1339e:	          jsr 13a1a <joinStrings>
   133a4:	          addq.l #8,sp
   133a6:	          move.l d0,8(sp)

	FreeVec(filename);
   133aa:	          move.l 28(sp),4(sp)
   133b0:	          move.l 1a7a4 <SysBase>,d0
   133b6:	          movea.l d0,a6
   133b8:	          movea.l 4(sp),a1
   133bc:	          jsr -690(a6)
	filename = NULL;
   133c0:	          clr.l 28(sp)
	return joined;
   133c4:	          move.l 8(sp),d0
}
   133c8:	          movea.l (sp)+,a6
   133ca:	          lea 20(sp),sp
   133ce:	          rts

000133d0 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   133d0:	             lea -28(sp),sp
   133d4:	             move.l a6,-(sp)
   133d6:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   133d8:	             move.l 1a884 <gameSettings+0x4>,d0
   133de:	             move.l d0,d1
   133e0:	             addq.l #1,d1
   133e2:	             move.l d1,28(sp)
   133e6:	             clr.l 24(sp)
   133ea:	             move.l 1a7a4 <SysBase>,d0
   133f0:	             movea.l d0,a6
   133f2:	             move.l 28(sp),d0
   133f6:	             move.l 24(sp),d1
   133fa:	             jsr -684(a6)
   133fe:	             move.l d0,20(sp)
   13402:	             move.l 20(sp),d0
   13406:	             move.l d0,1a878 <languageTable>
    if( languageTable == 0) {
   1340c:	             move.l 1a878 <languageTable>,d0
   13412:	         ,-- bne.s 13422 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13414:	         |   pea 199cb <line.c.74a5f850+0x34>
   1341a:	         |   jsr 16f3a <KPrintF>
   13420:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13422:	         '-> move.l 1a884 <gameSettings+0x4>,d0
   13428:	             move.l d0,d1
   1342a:	             addq.l #1,d1
   1342c:	             move.l d1,16(sp)
   13430:	             clr.l 12(sp)
   13434:	             move.l 1a7a4 <SysBase>,d0
   1343a:	             movea.l d0,a6
   1343c:	             move.l 16(sp),d0
   13440:	             move.l 12(sp),d1
   13444:	             jsr -684(a6)
   13448:	             move.l d0,8(sp)
   1344c:	             move.l 8(sp),d0
   13450:	             move.l d0,1a87c <languageName>
	if( languageName == 0) {
   13456:	             move.l 1a87c <languageName>,d0
   1345c:	         ,-- bne.s 1346c <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   1345e:	         |   pea 19a01 <line.c.74a5f850+0x6a>
   13464:	         |   jsr 16f3a <KPrintF>
   1346a:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1346c:	         '-> clr.l 32(sp)
   13470:	   ,-------- bra.s 134e8 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13472:	,--|-------> tst.l 32(sp)
   13476:	|  |  ,----- beq.s 13486 <makeLanguageTable+0xb6>
   13478:	|  |  |      move.l 40(sp),-(sp)
   1347c:	|  |  |      jsr 6bc <get2bytes>
   13482:	|  |  |      addq.l #4,sp
   13484:	|  |  |  ,-- bra.s 13488 <makeLanguageTable+0xb8>
   13486:	|  |  '--|-> moveq #0,d0
   13488:	|  |     '-> movea.l 1a878 <languageTable>,a0
   1348e:	|  |         move.l 32(sp),d1
   13492:	|  |         add.l d1,d1
   13494:	|  |         add.l d1,d1
   13496:	|  |         adda.l d1,a0
   13498:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   1349a:	|  |         move.l 1a87c <languageName>,d1
   134a0:	|  |         move.l 32(sp),d0
   134a4:	|  |         add.l d0,d0
   134a6:	|  |         add.l d0,d0
   134a8:	|  |         movea.l d1,a0
   134aa:	|  |         adda.l d0,a0
   134ac:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   134ae:	|  |         move.l 1a74e <gameVersion>,d0
   134b4:	|  |         cmpi.l #511,d0
   134ba:	|  |     ,-- ble.s 134e4 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   134bc:	|  |     |   move.l 1a884 <gameSettings+0x4>,d0
   134c2:	|  |     +-- beq.s 134e4 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   134c4:	|  |     |   move.l 1a87c <languageName>,d1
   134ca:	|  |     |   move.l 32(sp),d0
   134ce:	|  |     |   add.l d0,d0
   134d0:	|  |     |   add.l d0,d0
   134d2:	|  |     |   movea.l d1,a2
   134d4:	|  |     |   adda.l d0,a2
   134d6:	|  |     |   move.l 40(sp),-(sp)
   134da:	|  |     |   jsr b02 <readString>
   134e0:	|  |     |   addq.l #4,sp
   134e2:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   134e4:	|  |     '-> addq.l #1,32(sp)
   134e8:	|  '-------> move.l 1a884 <gameSettings+0x4>,d0
   134ee:	|            cmp.l 32(sp),d0
   134f2:	'----------- bcc.w 13472 <makeLanguageTable+0xa2>
		}
	}
}
   134f6:	             nop
   134f8:	             nop
   134fa:	             movea.l (sp)+,a2
   134fc:	             movea.l (sp)+,a6
   134fe:	             lea 28(sp),sp
   13502:	             rts

00013504 <readIniFile>:

void readIniFile (char * filename) {
   13504:	                      lea -564(sp),sp
   13508:	                      move.l a6,-(sp)
   1350a:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   1350c:	                      move.l 576(sp),-(sp)
   13510:	                      jsr b8 <copyString>
   13516:	                      addq.l #4,sp
   13518:	                      move.l d0,-(sp)
   1351a:	                      jsr 13318 <getPrefsFilename>
   13520:	                      addq.l #4,sp
   13522:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13526:	                      move.l 562(sp),558(sp)
   1352c:	                      move.l #1005,554(sp)
   13534:	                      move.l 1a7ac <DOSBase>,d0
   1353a:	                      movea.l d0,a6
   1353c:	                      move.l 558(sp),d1
   13540:	                      move.l 554(sp),d2
   13544:	                      jsr -30(a6)
   13548:	                      move.l d0,550(sp)
   1354c:	                      move.l 550(sp),d0
   13550:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13554:	                      clr.l 1a880 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   1355a:	                      move.w #1,1a888 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13562:	                      clr.l 1a88a <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13568:	                      moveq #1,d0
   1356a:	                      move.l d0,1a88e <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13570:	                      clr.w 1a892 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13576:	                      clr.w 1a894 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   1357c:	                      clr.w 1a896 <gameSettings+0x16>

	FreeVec(langName);
   13582:	                      move.l 562(sp),542(sp)
   13588:	                      move.l 1a7a4 <SysBase>,d0
   1358e:	                      movea.l d0,a6
   13590:	                      movea.l 542(sp),a1
   13594:	                      jsr -690(a6)
	langName = NULL;
   13598:	                      clr.l 562(sp)

	if (fp) {
   1359c:	                      tst.l 546(sp)
   135a0:	,-------------------- beq.w 1387e <readIniFile+0x37a>
		char lineSoFar[257] = "";
   135a4:	|                     move.l sp,d0
   135a6:	|                     addi.l #265,d0
   135ac:	|                     move.l #257,d1
   135b2:	|                     move.l d1,-(sp)
   135b4:	|                     clr.l -(sp)
   135b6:	|                     move.l d0,-(sp)
   135b8:	|                     jsr 16ebe <memset>
   135be:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   135c2:	|                     move.l sp,d0
   135c4:	|                     addq.l #8,d0
   135c6:	|                     move.l #257,d1
   135cc:	|                     move.l d1,-(sp)
   135ce:	|                     clr.l -(sp)
   135d0:	|                     move.l d0,-(sp)
   135d2:	|                     jsr 16ebe <memset>
   135d8:	|                     lea 12(sp),sp
		unsigned char here = 0;
   135dc:	|                     clr.b 571(sp)
		char readChar = ' ';
   135e0:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   135e6:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   135ec:	|                     clr.w 566(sp)
		LONG tmp = 0;
   135f0:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   135f4:	|  ,----------------> move.l 546(sp),534(sp)
   135fa:	|  |                  move.l 1a7ac <DOSBase>,d0
   13600:	|  |                  movea.l d0,a6
   13602:	|  |                  move.l 534(sp),d1
   13606:	|  |                  jsr -306(a6)
   1360a:	|  |                  move.l d0,530(sp)
   1360e:	|  |                  move.l 530(sp),d0
   13612:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13616:	|  |                  moveq #-1,d1
   13618:	|  |                  cmp.l 538(sp),d1
   1361c:	|  |           ,----- bne.s 1362a <readIniFile+0x126>
				readChar = '\n';
   1361e:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13624:	|  |           |      clr.w 568(sp)
   13628:	|  |           |  ,-- bra.s 13630 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   1362a:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13630:	|  |              '-> move.b 570(sp),d0
   13634:	|  |                  ext.w d0
   13636:	|  |                  movea.w d0,a0
   13638:	|  |                  moveq #61,d0
   1363a:	|  |                  cmp.l a0,d0
   1363c:	|  |     ,----------- beq.w 137e6 <readIniFile+0x2e2>
   13640:	|  |     |            moveq #61,d1
   13642:	|  |     |            cmp.l a0,d1
   13644:	|  |  ,--|----------- blt.w 137f2 <readIniFile+0x2ee>
   13648:	|  |  |  |            moveq #10,d0
   1364a:	|  |  |  |            cmp.l a0,d0
   1364c:	|  |  |  |        ,-- beq.s 13656 <readIniFile+0x152>
   1364e:	|  |  |  |        |   moveq #13,d1
   13650:	|  |  |  |        |   cmp.l a0,d1
   13652:	|  |  +--|--------|-- bne.w 137f2 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13656:	|  |  |  |        '-> tst.w 566(sp)
   1365a:	|  |  |  |     ,----- beq.w 137d4 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   1365e:	|  |  |  |     |      pea 19a35 <line.c.74a5f850+0x9e>
   13664:	|  |  |  |     |      move.l sp,d0
   13666:	|  |  |  |     |      addi.l #269,d0
   1366c:	|  |  |  |     |      move.l d0,-(sp)
   1366e:	|  |  |  |     |      jsr 1399a <strcmp>
   13674:	|  |  |  |     |      addq.l #8,sp
   13676:	|  |  |  |     |      tst.l d0
   13678:	|  |  |  |     |  ,-- bne.s 13692 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   1367a:	|  |  |  |     |  |   move.l sp,d0
   1367c:	|  |  |  |     |  |   addq.l #8,d0
   1367e:	|  |  |  |     |  |   move.l d0,-(sp)
   13680:	|  |  |  |     |  |   jsr 1388a <stringToInt>
   13686:	|  |  |  |     |  |   addq.l #4,sp
   13688:	|  |  |  |     |  |   move.l d0,1a880 <gameSettings>
   1368e:	|  |  |  |     +--|-- bra.w 137d4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13692:	|  |  |  |     |  '-> pea 19a3e <line.c.74a5f850+0xa7>
   13698:	|  |  |  |     |      move.l sp,d0
   1369a:	|  |  |  |     |      addi.l #269,d0
   136a0:	|  |  |  |     |      move.l d0,-(sp)
   136a2:	|  |  |  |     |      jsr 1399a <strcmp>
   136a8:	|  |  |  |     |      addq.l #8,sp
   136aa:	|  |  |  |     |      tst.l d0
   136ac:	|  |  |  |     |  ,-- bne.s 136d2 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   136ae:	|  |  |  |     |  |   move.l sp,d0
   136b0:	|  |  |  |     |  |   addq.l #8,d0
   136b2:	|  |  |  |     |  |   move.l d0,-(sp)
   136b4:	|  |  |  |     |  |   jsr 1388a <stringToInt>
   136ba:	|  |  |  |     |  |   addq.l #4,sp
   136bc:	|  |  |  |     |  |   tst.l d0
   136be:	|  |  |  |     |  |   seq d0
   136c0:	|  |  |  |     |  |   neg.b d0
   136c2:	|  |  |  |     |  |   move.b d0,d0
   136c4:	|  |  |  |     |  |   andi.w #255,d0
   136c8:	|  |  |  |     |  |   move.w d0,1a888 <gameSettings+0x8>
   136ce:	|  |  |  |     +--|-- bra.w 137d4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   136d2:	|  |  |  |     |  '-> pea 19a45 <line.c.74a5f850+0xae>
   136d8:	|  |  |  |     |      move.l sp,d0
   136da:	|  |  |  |     |      addi.l #269,d0
   136e0:	|  |  |  |     |      move.l d0,-(sp)
   136e2:	|  |  |  |     |      jsr 1399a <strcmp>
   136e8:	|  |  |  |     |      addq.l #8,sp
   136ea:	|  |  |  |     |      tst.l d0
   136ec:	|  |  |  |     |  ,-- bne.s 13706 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   136ee:	|  |  |  |     |  |   move.l sp,d0
   136f0:	|  |  |  |     |  |   addq.l #8,d0
   136f2:	|  |  |  |     |  |   move.l d0,-(sp)
   136f4:	|  |  |  |     |  |   jsr 1388a <stringToInt>
   136fa:	|  |  |  |     |  |   addq.l #4,sp
   136fc:	|  |  |  |     |  |   move.l d0,1a88a <gameSettings+0xa>
   13702:	|  |  |  |     +--|-- bra.w 137d4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13706:	|  |  |  |     |  '-> pea 19a4d <line.c.74a5f850+0xb6>
   1370c:	|  |  |  |     |      move.l sp,d0
   1370e:	|  |  |  |     |      addi.l #269,d0
   13714:	|  |  |  |     |      move.l d0,-(sp)
   13716:	|  |  |  |     |      jsr 1399a <strcmp>
   1371c:	|  |  |  |     |      addq.l #8,sp
   1371e:	|  |  |  |     |      tst.l d0
   13720:	|  |  |  |     |  ,-- bne.s 1373a <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13722:	|  |  |  |     |  |   move.l sp,d0
   13724:	|  |  |  |     |  |   addq.l #8,d0
   13726:	|  |  |  |     |  |   move.l d0,-(sp)
   13728:	|  |  |  |     |  |   jsr 1388a <stringToInt>
   1372e:	|  |  |  |     |  |   addq.l #4,sp
   13730:	|  |  |  |     |  |   move.l d0,1a88e <gameSettings+0xe>
   13736:	|  |  |  |     +--|-- bra.w 137d4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   1373a:	|  |  |  |     |  '-> pea 19a57 <line.c.74a5f850+0xc0>
   13740:	|  |  |  |     |      move.l sp,d0
   13742:	|  |  |  |     |      addi.l #269,d0
   13748:	|  |  |  |     |      move.l d0,-(sp)
   1374a:	|  |  |  |     |      jsr 1399a <strcmp>
   13750:	|  |  |  |     |      addq.l #8,sp
   13752:	|  |  |  |     |      tst.l d0
   13754:	|  |  |  |     |  ,-- bne.s 1376e <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13756:	|  |  |  |     |  |   move.l sp,d0
   13758:	|  |  |  |     |  |   addq.l #8,d0
   1375a:	|  |  |  |     |  |   move.l d0,-(sp)
   1375c:	|  |  |  |     |  |   jsr 1388a <stringToInt>
   13762:	|  |  |  |     |  |   addq.l #4,sp
   13764:	|  |  |  |     |  |   move.l d0,d0
   13766:	|  |  |  |     |  |   move.w d0,1a892 <gameSettings+0x12>
   1376c:	|  |  |  |     +--|-- bra.s 137d4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   1376e:	|  |  |  |     |  '-> pea 19a63 <line.c.74a5f850+0xcc>
   13774:	|  |  |  |     |      move.l sp,d0
   13776:	|  |  |  |     |      addi.l #269,d0
   1377c:	|  |  |  |     |      move.l d0,-(sp)
   1377e:	|  |  |  |     |      jsr 1399a <strcmp>
   13784:	|  |  |  |     |      addq.l #8,sp
   13786:	|  |  |  |     |      tst.l d0
   13788:	|  |  |  |     |  ,-- bne.s 137a2 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   1378a:	|  |  |  |     |  |   move.l sp,d0
   1378c:	|  |  |  |     |  |   addq.l #8,d0
   1378e:	|  |  |  |     |  |   move.l d0,-(sp)
   13790:	|  |  |  |     |  |   jsr 1388a <stringToInt>
   13796:	|  |  |  |     |  |   addq.l #4,sp
   13798:	|  |  |  |     |  |   move.l d0,d0
   1379a:	|  |  |  |     |  |   move.w d0,1a894 <gameSettings+0x14>
   137a0:	|  |  |  |     +--|-- bra.s 137d4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   137a2:	|  |  |  |     |  '-> pea 19a71 <line.c.74a5f850+0xda>
   137a8:	|  |  |  |     |      move.l sp,d0
   137aa:	|  |  |  |     |      addi.l #269,d0
   137b0:	|  |  |  |     |      move.l d0,-(sp)
   137b2:	|  |  |  |     |      jsr 1399a <strcmp>
   137b8:	|  |  |  |     |      addq.l #8,sp
   137ba:	|  |  |  |     |      tst.l d0
   137bc:	|  |  |  |     +----- bne.s 137d4 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   137be:	|  |  |  |     |      move.l sp,d0
   137c0:	|  |  |  |     |      addq.l #8,d0
   137c2:	|  |  |  |     |      move.l d0,-(sp)
   137c4:	|  |  |  |     |      jsr 1388a <stringToInt>
   137ca:	|  |  |  |     |      addq.l #4,sp
   137cc:	|  |  |  |     |      move.l d0,d0
   137ce:	|  |  |  |     |      move.w d0,1a896 <gameSettings+0x16>
					}
				}
				here = 0;
   137d4:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   137d8:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   137dc:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   137e0:	|  |  |  |            clr.b 8(sp)
				break;
   137e4:	|  |  |  |  ,-------- bra.s 1385c <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   137e6:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   137ec:	|  |  |     |         clr.b 571(sp)
				break;
   137f0:	|  |  |     +-------- bra.s 1385c <readIniFile+0x358>

				default:
				if (doingSecond) {
   137f2:	|  |  '-----|-------> tst.w 566(sp)
   137f6:	|  |        |  ,----- beq.s 1382a <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   137f8:	|  |        |  |      move.b 571(sp),d0
   137fc:	|  |        |  |      move.b d0,d1
   137fe:	|  |        |  |      addq.b #1,d1
   13800:	|  |        |  |      move.b d1,571(sp)
   13804:	|  |        |  |      move.b d0,d0
   13806:	|  |        |  |      andi.l #255,d0
   1380c:	|  |        |  |      lea 572(sp),a0
   13810:	|  |        |  |      adda.l d0,a0
   13812:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13818:	|  |        |  |      moveq #0,d0
   1381a:	|  |        |  |      move.b 571(sp),d0
   1381e:	|  |        |  |      lea 572(sp),a0
   13822:	|  |        |  |      adda.l d0,a0
   13824:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13828:	|  |        |  |  ,-- bra.s 1385a <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   1382a:	|  |        |  '--|-> move.b 571(sp),d0
   1382e:	|  |        |     |   move.b d0,d1
   13830:	|  |        |     |   addq.b #1,d1
   13832:	|  |        |     |   move.b d1,571(sp)
   13836:	|  |        |     |   move.b d0,d0
   13838:	|  |        |     |   andi.l #255,d0
   1383e:	|  |        |     |   lea 572(sp),a0
   13842:	|  |        |     |   adda.l d0,a0
   13844:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   1384a:	|  |        |     |   moveq #0,d0
   1384c:	|  |        |     |   move.b 571(sp),d0
   13850:	|  |        |     |   lea 572(sp),a0
   13854:	|  |        |     |   adda.l d0,a0
   13856:	|  |        |     |   clr.b -307(a0)
				break;
   1385a:	|  |        |     '-> nop
			}
		} while (keepGoing);
   1385c:	|  |        '-------> tst.w 568(sp)
   13860:	|  '----------------- bne.w 135f4 <readIniFile+0xf0>

		Close(fp);
   13864:	|                     move.l 546(sp),526(sp)
   1386a:	|                     move.l 1a7ac <DOSBase>,d0
   13870:	|                     movea.l d0,a6
   13872:	|                     move.l 526(sp),d1
   13876:	|                     jsr -36(a6)
   1387a:	|                     move.l d0,522(sp)
	}
}
   1387e:	'-------------------> nop
   13880:	                      move.l (sp)+,d2
   13882:	                      movea.l (sp)+,a6
   13884:	                      lea 564(sp),sp
   13888:	                      rts

0001388a <stringToInt>:

unsigned int stringToInt (char * s) {
   1388a:	             subq.l #8,sp
	int i = 0;
   1388c:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13890:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13894:	,----------> movea.l 12(sp),a0
   13898:	|            move.b (a0),d0
   1389a:	|            cmpi.b #47,d0
   1389e:	|        ,-- ble.s 138d6 <stringToInt+0x4c>
   138a0:	|        |   movea.l 12(sp),a0
   138a4:	|        |   move.b (a0),d0
   138a6:	|        |   cmpi.b #57,d0
   138aa:	|        +-- bgt.s 138d6 <stringToInt+0x4c>
			i *= 10;
   138ac:	|        |   move.l 4(sp),d1
   138b0:	|        |   move.l d1,d0
   138b2:	|        |   add.l d0,d0
   138b4:	|        |   add.l d0,d0
   138b6:	|        |   add.l d1,d0
   138b8:	|        |   add.l d0,d0
   138ba:	|        |   move.l d0,4(sp)
			i += *s - '0';
   138be:	|        |   movea.l 12(sp),a0
   138c2:	|        |   move.b (a0),d0
   138c4:	|        |   ext.w d0
   138c6:	|        |   movea.w d0,a0
   138c8:	|        |   moveq #-48,d0
   138ca:	|        |   add.l a0,d0
   138cc:	|        |   add.l d0,4(sp)
			s ++;
   138d0:	|        |   addq.l #1,12(sp)
   138d4:	|  ,-----|-- bra.s 1390e <stringToInt+0x84>
		} else if (*s == '-') {
   138d6:	|  |     '-> movea.l 12(sp),a0
   138da:	|  |         move.b (a0),d0
   138dc:	|  |         cmpi.b #45,d0
   138e0:	|  |     ,-- bne.s 138fa <stringToInt+0x70>
			negative = ! negative;
   138e2:	|  |     |   tst.w 2(sp)
   138e6:	|  |     |   seq d0
   138e8:	|  |     |   neg.b d0
   138ea:	|  |     |   move.b d0,d0
   138ec:	|  |     |   andi.w #255,d0
   138f0:	|  |     |   move.w d0,2(sp)
			s++;
   138f4:	|  |     |   addq.l #1,12(sp)
   138f8:	+--|-----|-- bra.s 13894 <stringToInt+0xa>
		} else {
			if (negative)
   138fa:	|  |     '-> tst.w 2(sp)
   138fe:	|  |     ,-- beq.s 13908 <stringToInt+0x7e>
				return -i;
   13900:	|  |     |   move.l 4(sp),d0
   13904:	|  |     |   neg.l d0
   13906:	|  |  ,--|-- bra.s 13910 <stringToInt+0x86>
			return i;
   13908:	|  |  |  '-> move.l 4(sp),d0
   1390c:	|  |  +----- bra.s 13910 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   1390e:	'--'--|----X bra.s 13894 <stringToInt+0xa>
		}
	}
   13910:	      '----> addq.l #8,sp
   13912:	             rts

00013914 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13914:	    lea -28(sp),sp
   13918:	    move.l a6,-(sp)
   1391a:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   1391c:	    pea 19a7b <line.c.74a5f850+0xe4>
   13922:	    jsr 16f3a <KPrintF>
   13928:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   1392a:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   1392e:	    move.l 40(sp),30(sp)
   13934:	    move.l #1005,26(sp)
   1393c:	    move.l 1a7ac <DOSBase>,d0
   13942:	    movea.l d0,a6
   13944:	    move.l 30(sp),d1
   13948:	    move.l 26(sp),d2
   1394c:	    jsr -30(a6)
   13950:	    move.l d0,22(sp)
   13954:	    move.l 22(sp),d0
   13958:	    move.l d0,18(sp)
	if (tester) {
   1395c:	,-- beq.s 1398c <fileExists+0x78>
		KPrintF("fileexists: File exists");
   1395e:	|   pea 19a95 <line.c.74a5f850+0xfe>
   13964:	|   jsr 16f3a <KPrintF>
   1396a:	|   addq.l #4,sp
		retval = 1;
   1396c:	|   move.b #1,35(sp)
		Close(tester);
   13972:	|   move.l 18(sp),14(sp)
   13978:	|   move.l 1a7ac <DOSBase>,d0
   1397e:	|   movea.l d0,a6
   13980:	|   move.l 14(sp),d1
   13984:	|   jsr -36(a6)
   13988:	|   move.l d0,10(sp)
	}
	return retval;
   1398c:	'-> move.b 35(sp),d0
   13990:	    move.l (sp)+,d2
   13992:	    movea.l (sp)+,a6
   13994:	    lea 28(sp),sp
   13998:	    rts

0001399a <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   1399a:	   ,-- bra.s 139a4 <strcmp+0xa>
    {
        s1++;
   1399c:	,--|-> addq.l #1,4(sp)
        s2++;
   139a0:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   139a4:	|  '-> movea.l 4(sp),a0
   139a8:	|      move.b (a0),d0
   139aa:	|  ,-- beq.s 139bc <strcmp+0x22>
   139ac:	|  |   movea.l 4(sp),a0
   139b0:	|  |   move.b (a0),d1
   139b2:	|  |   movea.l 8(sp),a0
   139b6:	|  |   move.b (a0),d0
   139b8:	|  |   cmp.b d1,d0
   139ba:	'--|-- beq.s 1399c <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   139bc:	   '-> movea.l 4(sp),a0
   139c0:	       move.b (a0),d0
   139c2:	       moveq #0,d1
   139c4:	       move.b d0,d1
   139c6:	       movea.l 8(sp),a0
   139ca:	       move.b (a0),d0
   139cc:	       move.b d0,d0
   139ce:	       andi.l #255,d0
   139d4:	       sub.l d0,d1
   139d6:	       move.l d1,d0
}
   139d8:	       rts

000139da <strlen>:

long unsigned int strlen (const char *s) 
{  
   139da:	       subq.l #4,sp
	long unsigned int i = 0;
   139dc:	       clr.l (sp)
	while(s[i]) i++; 
   139de:	   ,-- bra.s 139e2 <strlen+0x8>
   139e0:	,--|-> addq.l #1,(sp)
   139e2:	|  '-> movea.l 8(sp),a0
   139e6:	|      adda.l (sp),a0
   139e8:	|      move.b (a0),d0
   139ea:	'----- bne.s 139e0 <strlen+0x6>
	return(i);
   139ec:	       move.l (sp),d0
}
   139ee:	       addq.l #4,sp
   139f0:	       rts

000139f2 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   139f2:	    nop
   139f4:	,-> move.l 8(sp),d0
   139f8:	|   move.l d0,d1
   139fa:	|   addq.l #1,d1
   139fc:	|   move.l d1,8(sp)
   13a00:	|   movea.l 4(sp),a0
   13a04:	|   lea 1(a0),a1
   13a08:	|   move.l a1,4(sp)
   13a0c:	|   movea.l d0,a1
   13a0e:	|   move.b (a1),d0
   13a10:	|   move.b d0,(a0)
   13a12:	|   move.b (a0),d0
   13a14:	'-- bne.s 139f4 <strcpy+0x2>
}
   13a16:	    nop
   13a18:	    rts

00013a1a <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13a1a:	    lea -20(sp),sp
   13a1e:	    move.l a6,-(sp)
   13a20:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13a22:	    move.l 32(sp),-(sp)
   13a26:	    jsr 139da <strlen>
   13a2c:	    addq.l #4,sp
   13a2e:	    move.l d0,d2
   13a30:	    move.l 36(sp),-(sp)
   13a34:	    jsr 139da <strlen>
   13a3a:	    addq.l #4,sp
   13a3c:	    add.l d2,d0
   13a3e:	    move.l d0,d1
   13a40:	    addq.l #1,d1
   13a42:	    move.l d1,20(sp)
   13a46:	    clr.l 16(sp)
   13a4a:	    move.l 1a7a4 <SysBase>,d0
   13a50:	    movea.l d0,a6
   13a52:	    move.l 20(sp),d0
   13a56:	    move.l 16(sp),d1
   13a5a:	    jsr -684(a6)
   13a5e:	    move.l d0,12(sp)
   13a62:	    move.l 12(sp),d0
   13a66:	    move.l d0,8(sp)
	char * t = newString;
   13a6a:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13a70:	    nop
   13a72:	,-> move.l 32(sp),d0
   13a76:	|   move.l d0,d1
   13a78:	|   addq.l #1,d1
   13a7a:	|   move.l d1,32(sp)
   13a7e:	|   movea.l 24(sp),a0
   13a82:	|   lea 1(a0),a1
   13a86:	|   move.l a1,24(sp)
   13a8a:	|   movea.l d0,a1
   13a8c:	|   move.b (a1),d0
   13a8e:	|   move.b d0,(a0)
   13a90:	|   move.b (a0),d0
   13a92:	'-- bne.s 13a72 <joinStrings+0x58>
	t--;
   13a94:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13a98:	    nop
   13a9a:	,-> move.l 36(sp),d0
   13a9e:	|   move.l d0,d1
   13aa0:	|   addq.l #1,d1
   13aa2:	|   move.l d1,36(sp)
   13aa6:	|   movea.l 24(sp),a0
   13aaa:	|   lea 1(a0),a1
   13aae:	|   move.l a1,24(sp)
   13ab2:	|   movea.l d0,a1
   13ab4:	|   move.b (a1),d0
   13ab6:	|   move.b d0,(a0)
   13ab8:	|   move.b (a0),d0
   13aba:	'-- bne.s 13a9a <joinStrings+0x80>

	return newString;
   13abc:	    move.l 8(sp),d0
}
   13ac0:	    move.l (sp)+,d2
   13ac2:	    movea.l (sp)+,a6
   13ac4:	    lea 20(sp),sp
   13ac8:	    rts

00013aca <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13aca:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13ace:	       moveq #10,d0
   13ad0:	       cmp.l 28(sp),d0
   13ad4:	   ,-- bne.s 13af2 <itoa+0x28>
   13ad6:	   |   tst.l 20(sp)
   13ada:	   +-- bge.s 13af2 <itoa+0x28>
        *str++ = '-';
   13adc:	   |   move.l 24(sp),d0
   13ae0:	   |   move.l d0,d1
   13ae2:	   |   addq.l #1,d1
   13ae4:	   |   move.l d1,24(sp)
   13ae8:	   |   movea.l d0,a0
   13aea:	   |   move.b #45,(a0)
        value *= -1;
   13aee:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13af2:	   '-> move.l 24(sp),12(sp)
   13af8:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13afe:	   ,-> move.l 20(sp),d0
   13b02:	   |   move.l 28(sp),-(sp)
   13b06:	   |   move.l d0,-(sp)
   13b08:	   |   jsr 17972 <__modsi3>
   13b0e:	   |   addq.l #8,sp
   13b10:	   |   movea.l d0,a1
   13b12:	   |   move.l 12(sp),d0
   13b16:	   |   move.l d0,d1
   13b18:	   |   addq.l #1,d1
   13b1a:	   |   move.l d1,12(sp)
   13b1e:	   |   lea 19aad <line.c.74a5f850+0x116>,a0
   13b24:	   |   move.b (0,a1,a0.l),d1
   13b28:	   |   movea.l d0,a0
   13b2a:	   |   move.b d1,(a0)
        value /= base;
   13b2c:	   |   move.l 28(sp),-(sp)
   13b30:	   |   move.l 24(sp),-(sp)
   13b34:	   |   jsr 17944 <__divsi3>
   13b3a:	   |   addq.l #8,sp
   13b3c:	   |   move.l d0,20(sp)
    } while (value);
   13b40:	   '-- bne.s 13afe <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13b42:	       move.l 12(sp),d0
   13b46:	       move.l d0,d1
   13b48:	       subq.l #1,d1
   13b4a:	       move.l d1,12(sp)
   13b4e:	       movea.l d0,a0
   13b50:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13b52:	       move.l 4(sp),8(sp)
   13b58:	   ,-- bra.s 13b7e <itoa+0xb4>
        char temp = *low;
   13b5a:	,--|-> movea.l 8(sp),a0
   13b5e:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13b62:	|  |   movea.l 12(sp),a0
   13b66:	|  |   move.b (a0),d0
   13b68:	|  |   movea.l 8(sp),a0
   13b6c:	|  |   move.b d0,(a0)
        *ptr = temp;
   13b6e:	|  |   movea.l 12(sp),a0
   13b72:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13b76:	|  |   addq.l #1,8(sp)
   13b7a:	|  |   subq.l #1,12(sp)
   13b7e:	|  '-> move.l 8(sp),d0
   13b82:	|      cmp.l 12(sp),d0
   13b86:	'----- bcs.s 13b5a <itoa+0x90>
    }
    return rc;
   13b88:	       move.l 4(sp),d0
}
   13b8c:	       lea 16(sp),sp
   13b90:	       rts

00013b92 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13b92:	                            lea -40(sp),sp
   13b96:	                            move.l d2,-(sp)
    char* s = str;
   13b98:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13b9e:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13ba4:	   ,----------------------- bra.w 13cd8 <vsprintf2+0x146>
        if (*p == '%') {
   13ba8:	,--|----------------------> movea.l 36(sp),a0
   13bac:	|  |                        move.b (a0),d0
   13bae:	|  |                        cmpi.b #37,d0
   13bb2:	|  |  ,-------------------- bne.w 13cbe <vsprintf2+0x12c>
            switch (*++p) {
   13bb6:	|  |  |                     addq.l #1,36(sp)
   13bba:	|  |  |                     movea.l 36(sp),a0
   13bbe:	|  |  |                     move.b (a0),d0
   13bc0:	|  |  |                     ext.w d0
   13bc2:	|  |  |                     movea.w d0,a0
   13bc4:	|  |  |                     moveq #115,d0
   13bc6:	|  |  |                     cmp.l a0,d0
   13bc8:	|  |  |           ,-------- beq.s 13c40 <vsprintf2+0xae>
   13bca:	|  |  |           |         moveq #115,d1
   13bcc:	|  |  |           |         cmp.l a0,d1
   13bce:	|  |  |  ,--------|-------- blt.w 13ca6 <vsprintf2+0x114>
   13bd2:	|  |  |  |        |         moveq #99,d2
   13bd4:	|  |  |  |        |         cmp.l a0,d2
   13bd6:	|  |  |  |  ,-----|-------- beq.w 13c7e <vsprintf2+0xec>
   13bda:	|  |  |  |  |     |         moveq #100,d0
   13bdc:	|  |  |  |  |     |         cmp.l a0,d0
   13bde:	|  |  |  +--|-----|-------- bne.w 13ca6 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13be2:	|  |  |  |  |     |         addq.l #4,56(sp)
   13be6:	|  |  |  |  |     |         movea.l 56(sp),a0
   13bea:	|  |  |  |  |     |         move.l (a0),d0
   13bec:	|  |  |  |  |     |         move.l d0,d1
   13bee:	|  |  |  |  |     |         subq.l #1,d1
   13bf0:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13bf4:	|  |  |  |  |     |         pea a <_start+0xa>
   13bf8:	|  |  |  |  |     |         lea 8(sp),a0
   13bfc:	|  |  |  |  |     |         move.l a0,-(sp)
   13bfe:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13c02:	|  |  |  |  |     |         jsr 13aca <itoa>
   13c08:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13c0c:	|  |  |  |  |     |         lea 44(sp),a0
   13c10:	|  |  |  |  |     |         lea -40(a0),a0
   13c14:	|  |  |  |  |     |         move.l a0,28(sp)
   13c18:	|  |  |  |  |     |     ,-- bra.s 13c34 <vsprintf2+0xa2>
                        *s++ = *b;
   13c1a:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   13c1e:	|  |  |  |  |     |  |  |   move.l d0,d1
   13c20:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13c22:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13c26:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13c2a:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13c2c:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13c2e:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13c30:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13c34:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   13c38:	|  |  |  |  |     |  |      move.b (a0),d0
   13c3a:	|  |  |  |  |     |  '----- bne.s 13c1a <vsprintf2+0x88>
                    }
                    break;
   13c3c:	|  |  |  |  |  ,--|-------- bra.w 13cd4 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13c40:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   13c44:	|  |  |  |  |  |            movea.l 56(sp),a0
   13c48:	|  |  |  |  |  |            move.l (a0),d0
   13c4a:	|  |  |  |  |  |            move.l d0,d1
   13c4c:	|  |  |  |  |  |            subq.l #1,d1
   13c4e:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13c52:	|  |  |  |  |  |        ,-- bra.s 13c74 <vsprintf2+0xe2>
                        *s++ = *sval++;
   13c54:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   13c58:	|  |  |  |  |  |     |  |   move.l d1,d2
   13c5a:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13c5c:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13c60:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13c64:	|  |  |  |  |  |     |  |   move.l d0,d2
   13c66:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13c68:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13c6c:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13c6e:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13c70:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13c72:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13c74:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   13c78:	|  |  |  |  |  |     |      move.b (a0),d0
   13c7a:	|  |  |  |  |  |     '----- bne.s 13c54 <vsprintf2+0xc2>
                    }
                    break;
   13c7c:	|  |  |  |  |  +----------- bra.s 13cd4 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13c7e:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   13c82:	|  |  |  |     |            movea.l 56(sp),a0
   13c86:	|  |  |  |     |            move.l (a0),d0
   13c88:	|  |  |  |     |            move.l d0,d1
   13c8a:	|  |  |  |     |            subq.l #1,d1
   13c8c:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13c90:	|  |  |  |     |            move.l 40(sp),d0
   13c94:	|  |  |  |     |            move.l d0,d2
   13c96:	|  |  |  |     |            addq.l #1,d2
   13c98:	|  |  |  |     |            move.l d2,40(sp)
   13c9c:	|  |  |  |     |            move.l 24(sp),d1
   13ca0:	|  |  |  |     |            movea.l d0,a0
   13ca2:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13ca4:	|  |  |  |     +----------- bra.s 13cd4 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13ca6:	|  |  |  '-----|----------> move.l 40(sp),d0
   13caa:	|  |  |        |            move.l d0,d1
   13cac:	|  |  |        |            addq.l #1,d1
   13cae:	|  |  |        |            move.l d1,40(sp)
   13cb2:	|  |  |        |            movea.l 36(sp),a0
   13cb6:	|  |  |        |            move.b (a0),d1
   13cb8:	|  |  |        |            movea.l d0,a0
   13cba:	|  |  |        |            move.b d1,(a0)
                    break;
   13cbc:	|  |  |        +----------- bra.s 13cd4 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13cbe:	|  |  '--------|----------> move.l 40(sp),d0
   13cc2:	|  |           |            move.l d0,d1
   13cc4:	|  |           |            addq.l #1,d1
   13cc6:	|  |           |            move.l d1,40(sp)
   13cca:	|  |           |            movea.l 36(sp),a0
   13cce:	|  |           |            move.b (a0),d1
   13cd0:	|  |           |            movea.l d0,a0
   13cd2:	|  |           |            move.b d1,(a0)
        }
        p++;
   13cd4:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   13cd8:	|  '----------------------> movea.l 36(sp),a0
   13cdc:	|                           move.b (a0),d0
   13cde:	'-------------------------- bne.w 13ba8 <vsprintf2+0x16>
    }
    *s = '\0';
   13ce2:	                            movea.l 40(sp),a0
   13ce6:	                            clr.b (a0)
    return s - str;
   13ce8:	                            move.l 40(sp),d0
   13cec:	                            sub.l 48(sp),d0
}
   13cf0:	                            move.l (sp)+,d2
   13cf2:	                            lea 40(sp),sp
   13cf6:	                            rts

00013cf8 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13cf8:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13cfa:	moveq #16,d0
   13cfc:	add.l sp,d0
   13cfe:	move.l d0,d1
   13d00:	addq.l #4,d1
   13d02:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   13d06:	move.l 16(sp),d0
   13d0a:	move.l 4(sp),-(sp)
   13d0e:	move.l d0,-(sp)
   13d10:	move.l 20(sp),-(sp)
   13d14:	jsr 13b92 <vsprintf2>
   13d1a:	lea 12(sp),sp
   13d1e:	move.l d0,(sp)
    va_end(args);
   13d20:	clr.l 4(sp)

    return done;
   13d24:	move.l (sp),d0
}
   13d26:	addq.l #8,sp
   13d28:	rts

00013d2a <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   13d2a:	       lea -20(sp),sp
   13d2e:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13d30:	       moveq #12,d0
   13d32:	       move.l d0,20(sp)
   13d36:	       clr.l 16(sp)
   13d3a:	       move.l 1a7a4 <SysBase>,d0
   13d40:	       movea.l d0,a6
   13d42:	       move.l 20(sp),d0
   13d46:	       move.l 16(sp),d1
   13d4a:	       jsr -684(a6)
   13d4e:	       move.l d0,12(sp)
   13d52:	       move.l 12(sp),d0
   13d56:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   13d5a:	   ,-- bne.s 13d60 <addVarToStack+0x36>
   13d5c:	   |   clr.w d0
   13d5e:	,--|-- bra.s 13da8 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   13d60:	|  '-> move.l 8(sp),d0
   13d64:	|      move.l d0,-(sp)
   13d66:	|      move.l 32(sp),-(sp)
   13d6a:	|      jsr 1488c <copyMain>
   13d70:	|      addq.l #8,sp
   13d72:	|      tst.w d0
   13d74:	|  ,-- bne.s 13d90 <addVarToStack+0x66>
        FreeVec(newStack);
   13d76:	|  |   move.l 8(sp),4(sp)
   13d7c:	|  |   move.l 1a7a4 <SysBase>,d0
   13d82:	|  |   movea.l d0,a6
   13d84:	|  |   movea.l 4(sp),a1
   13d88:	|  |   jsr -690(a6)
        return FALSE;
   13d8c:	|  |   clr.w d0
   13d8e:	+--|-- bra.s 13da8 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   13d90:	|  '-> movea.l 32(sp),a0
   13d94:	|      move.l (a0),d0
   13d96:	|      movea.l 8(sp),a0
   13d9a:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13d9e:	|      movea.l 32(sp),a0
   13da2:	|      move.l 8(sp),(a0)
    return TRUE;
   13da6:	|      moveq #1,d0
}
   13da8:	'----> movea.l (sp)+,a6
   13daa:	       lea 20(sp),sp
   13dae:	       rts

00013db0 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   13db0:	       lea -16(sp),sp
   13db4:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13db6:	       moveq #12,d0
   13db8:	       move.l d0,16(sp)
   13dbc:	       clr.l 12(sp)
   13dc0:	       move.l 1a7a4 <SysBase>,d0
   13dc6:	       movea.l d0,a6
   13dc8:	       move.l 16(sp),d0
   13dcc:	       move.l 12(sp),d1
   13dd0:	       jsr -684(a6)
   13dd4:	       move.l d0,8(sp)
   13dd8:	       move.l 8(sp),d0
   13ddc:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   13de0:	   ,-- bne.s 13de6 <addVarToStackQuick+0x36>
   13de2:	   |   clr.w d0
   13de4:	,--|-- bra.s 13e1c <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   13de6:	|  '-> move.l 4(sp),d0
   13dea:	|      pea 8 <_start+0x8>
   13dee:	|      move.l 28(sp),-(sp)
   13df2:	|      move.l d0,-(sp)
   13df4:	|      jsr 16eee <memcpy>
   13dfa:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   13dfe:	|      movea.l 24(sp),a0
   13e02:	|      clr.l (a0)

    newStack->next = *thisStack;
   13e04:	|      movea.l 28(sp),a0
   13e08:	|      move.l (a0),d0
   13e0a:	|      movea.l 4(sp),a0
   13e0e:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13e12:	|      movea.l 28(sp),a0
   13e16:	|      move.l 4(sp),(a0)
    return TRUE;
   13e1a:	|      moveq #1,d0
}
   13e1c:	'----> movea.l (sp)+,a6
   13e1e:	       lea 16(sp),sp
   13e22:	       rts

00013e24 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   13e24:	       lea -16(sp),sp
   13e28:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   13e2a:	       movea.l 24(sp),a0
   13e2e:	       move.l (a0),d0
   13e30:	       moveq #1,d1
   13e32:	       cmp.l d0,d1
   13e34:	   ,-- bne.s 13e5e <addVariablesInSecond+0x3a>
   13e36:	   |   movea.l 28(sp),a0
   13e3a:	   |   move.l (a0),d0
   13e3c:	   |   moveq #1,d1
   13e3e:	   |   cmp.l d0,d1
   13e40:	   +-- bne.s 13e5e <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   13e42:	   |   movea.l 28(sp),a0
   13e46:	   |   move.l 4(a0),d1
   13e4a:	   |   movea.l 24(sp),a0
   13e4e:	   |   move.l 4(a0),d0
   13e52:	   |   add.l d1,d0
   13e54:	   |   movea.l 28(sp),a0
   13e58:	   |   move.l d0,4(a0)
   13e5c:	,--|-- bra.s 13ed8 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   13e5e:	|  '-> move.l 24(sp),-(sp)
   13e62:	|      jsr 14ac4 <getTextFromAnyVar>
   13e68:	|      addq.l #4,sp
   13e6a:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   13e6e:	|      move.l 28(sp),-(sp)
   13e72:	|      jsr 14ac4 <getTextFromAnyVar>
   13e78:	|      addq.l #4,sp
   13e7a:	|      move.l d0,12(sp)

		unlinkVar(var2);
   13e7e:	|      move.l 28(sp),-(sp)
   13e82:	|      jsr 1473c <unlinkVar>
   13e88:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   13e8a:	|      move.l 12(sp),-(sp)
   13e8e:	|      move.l 20(sp),-(sp)
   13e92:	|      jsr 13a1a <joinStrings>
   13e98:	|      addq.l #8,sp
   13e9a:	|      movea.l 28(sp),a0
   13e9e:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   13ea2:	|      movea.l 28(sp),a0
   13ea6:	|      moveq #3,d0
   13ea8:	|      move.l d0,(a0)
		FreeVec(string1);
   13eaa:	|      move.l 16(sp),8(sp)
   13eb0:	|      move.l 1a7a4 <SysBase>,d0
   13eb6:	|      movea.l d0,a6
   13eb8:	|      movea.l 8(sp),a1
   13ebc:	|      jsr -690(a6)
		FreeVec(string2);
   13ec0:	|      move.l 12(sp),4(sp)
   13ec6:	|      move.l 1a7a4 <SysBase>,d0
   13ecc:	|      movea.l d0,a6
   13ece:	|      movea.l 4(sp),a1
   13ed2:	|      jsr -690(a6)
	}
}
   13ed6:	|      nop
   13ed8:	'----> nop
   13eda:	       movea.l (sp)+,a6
   13edc:	       lea 16(sp),sp
   13ee0:	       rts

00013ee2 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   13ee2:	movea.l 8(sp),a0
   13ee6:	move.l 4(a0),-(sp)
   13eea:	move.l (a0),-(sp)
   13eec:	movea.l 12(sp),a0
   13ef0:	move.l 4(a0),-(sp)
   13ef4:	move.l (a0),-(sp)
   13ef6:	jsr 13f18 <compareVars>
   13efc:	lea 16(sp),sp
   13f00:	move.l d0,-(sp)
   13f02:	pea 1 <_start+0x1>
   13f06:	move.l 16(sp),-(sp)
   13f0a:	jsr 14de0 <setVariable>
   13f10:	lea 12(sp),sp
}
   13f14:	nop
   13f16:	rts

00013f18 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   13f18:	       subq.l #4,sp
	int re = 0;
   13f1a:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   13f1c:	       move.l 8(sp),d1
   13f20:	       move.l 16(sp),d0
   13f24:	       cmp.l d1,d0
   13f26:	,----- bne.w 13fee <compareVars+0xd6>
		switch (var1.varType) {
   13f2a:	|      move.l 8(sp),d0
   13f2e:	|      moveq #9,d1
   13f30:	|      cmp.l d0,d1
   13f32:	|  ,-- bcs.w 13fd6 <compareVars+0xbe>
   13f36:	|  |   add.l d0,d0
   13f38:	|  |   movea.l d0,a0
   13f3a:	|  |   adda.l #81734,a0
   13f40:	|  |   move.w (a0),d0
   13f42:	|  |   jmp (13f46 <compareVars+0x2e>,pc,d0.w)
   13f46:	|  |   ori.b #-112,(a4)
   13f4a:	|  |   ori.l #5243024,(a0)
   13f50:	|  |   ori.l #7733392,(a0)
   13f56:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   13f5c:	|  |   move.l d0,(sp)
			break;
   13f5e:	+--|-- bra.w 13fee <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   13f62:	|  |   move.l 12(sp),d1
   13f66:	|  |   move.l 20(sp),d0
   13f6a:	|  |   cmp.l d1,d0
   13f6c:	|  |   seq d0
   13f6e:	|  |   neg.b d0
   13f70:	|  |   move.b d0,d0
   13f72:	|  |   andi.l #255,d0
   13f78:	|  |   move.l d0,(sp)
			break;
   13f7a:	+--|-- bra.s 13fee <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   13f7c:	|  |   move.l 12(sp),d1
   13f80:	|  |   move.l 20(sp),d0
   13f84:	|  |   cmp.l d1,d0
   13f86:	|  |   seq d0
   13f88:	|  |   neg.b d0
   13f8a:	|  |   move.b d0,d0
   13f8c:	|  |   andi.l #255,d0
   13f92:	|  |   move.l d0,(sp)
			break;
   13f94:	+--|-- bra.s 13fee <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   13f96:	|  |   move.l 20(sp),d1
   13f9a:	|  |   move.l 12(sp),d0
   13f9e:	|  |   move.l d1,-(sp)
   13fa0:	|  |   move.l d0,-(sp)
   13fa2:	|  |   jsr 1399a <strcmp>
   13fa8:	|  |   addq.l #8,sp
   13faa:	|  |   tst.l d0
   13fac:	|  |   seq d0
   13fae:	|  |   neg.b d0
   13fb0:	|  |   move.b d0,d0
   13fb2:	|  |   andi.l #255,d0
   13fb8:	|  |   move.l d0,(sp)
			break;
   13fba:	+--|-- bra.s 13fee <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   13fbc:	|  |   move.l 12(sp),d1
   13fc0:	|  |   move.l 20(sp),d0
   13fc4:	|  |   cmp.l d1,d0
   13fc6:	|  |   seq d0
   13fc8:	|  |   neg.b d0
   13fca:	|  |   move.b d0,d0
   13fcc:	|  |   andi.l #255,d0
   13fd2:	|  |   move.l d0,(sp)
			break;
   13fd4:	+--|-- bra.s 13fee <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   13fd6:	|  '-> move.l 12(sp),d1
   13fda:	|      move.l 20(sp),d0
   13fde:	|      cmp.l d1,d0
   13fe0:	|      seq d0
   13fe2:	|      neg.b d0
   13fe4:	|      move.b d0,d0
   13fe6:	|      andi.l #255,d0
   13fec:	|      move.l d0,(sp)
		}
	}
	return re;
   13fee:	'----> move.l (sp),d0
}
   13ff0:	       addq.l #4,sp
   13ff2:	       rts

00013ff4 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   13ff4:	             lea -16(sp),sp
   13ff8:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   13ffa:	             movea.l 28(sp),a0
   13ffe:	             moveq #6,d0
   14000:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   14002:	             moveq #12,d0
   14004:	             move.l d0,12(sp)
   14008:	             clr.l 8(sp)
   1400c:	             move.l 1a7a4 <SysBase>,d0
   14012:	             movea.l d0,a6
   14014:	             move.l 12(sp),d0
   14018:	             move.l 8(sp),d1
   1401c:	             jsr -684(a6)
   14020:	             move.l d0,4(sp)
   14024:	             move.l 4(sp),d0
   14028:	             movea.l 28(sp),a0
   1402c:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   14030:	             movea.l 28(sp),a0
   14034:	             move.l 4(a0),d0
   14038:	         ,-- bne.s 14040 <copyStack+0x4c>
   1403a:	         |   clr.w d0
   1403c:	,--------|-- bra.w 140c2 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   14040:	|        '-> movea.l 28(sp),a0
   14044:	|            movea.l 4(a0),a0
   14048:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   1404a:	|            movea.l 28(sp),a0
   1404e:	|            movea.l 4(a0),a0
   14052:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   14056:	|            movea.l 28(sp),a0
   1405a:	|            movea.l 4(a0),a0
   1405e:	|            moveq #1,d0
   14060:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   14064:	|            movea.l 24(sp),a0
   14068:	|            movea.l 4(a0),a0
   1406c:	|            move.l (a0),16(sp)

	while (a) {
   14070:	|     ,----- bra.s 140ba <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   14072:	|  ,--|----> movea.l 28(sp),a0
   14076:	|  |  |      move.l 4(a0),d0
   1407a:	|  |  |      move.l d0,d1
   1407c:	|  |  |      move.l 16(sp),d0
   14080:	|  |  |      move.l d1,-(sp)
   14082:	|  |  |      move.l d0,-(sp)
   14084:	|  |  |      jsr 13d2a <addVarToStack>
   1408a:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   1408c:	|  |  |      movea.l 28(sp),a0
   14090:	|  |  |      movea.l 4(a0),a0
   14094:	|  |  |      move.l 4(a0),d0
   14098:	|  |  |  ,-- bne.s 140b0 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   1409a:	|  |  |  |   movea.l 28(sp),a0
   1409e:	|  |  |  |   movea.l 4(a0),a1
   140a2:	|  |  |  |   movea.l 28(sp),a0
   140a6:	|  |  |  |   movea.l 4(a0),a0
   140aa:	|  |  |  |   move.l (a1),d0
   140ac:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   140b0:	|  |  |  '-> movea.l 16(sp),a0
   140b4:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   140ba:	|  |  '----> tst.l 16(sp)
   140be:	|  '-------- bne.s 14072 <copyStack+0x7e>
	}

	return TRUE;
   140c0:	|            moveq #1,d0
}
   140c2:	'----------> movea.l (sp)+,a6
   140c4:	             lea 16(sp),sp
   140c8:	             rts

000140ca <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   140ca:	                lea -20(sp),sp
   140ce:	                move.l a6,-(sp)
   140d0:	                move.l 36(sp),d0
   140d4:	                move.w d0,d0
   140d6:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   140da:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   140e0:	                clr.l 16(sp)

    while (*huntVar) {
   140e4:	   ,----------- bra.s 14162 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   140e6:	,--|----------> movea.l 20(sp),a0
   140ea:	|  |            movea.l (a0),a0
   140ec:	|  |            movea.l 28(sp),a1
   140f0:	|  |            move.l 4(a1),-(sp)
   140f4:	|  |            move.l (a1),-(sp)
   140f6:	|  |            move.l 4(a0),-(sp)
   140fa:	|  |            move.l (a0),-(sp)
   140fc:	|  |            jsr 13f18 <compareVars>
   14102:	|  |            lea 16(sp),sp
   14106:	|  |            tst.l d0
   14108:	|  |  ,-------- beq.s 14154 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   1410a:	|  |  |         movea.l 20(sp),a0
   1410e:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   14112:	|  |  |         movea.l 12(sp),a0
   14116:	|  |  |         move.l 8(a0),d0
   1411a:	|  |  |         movea.l 20(sp),a0
   1411e:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   14120:	|  |  |         move.l 12(sp),d0
   14124:	|  |  |         move.l d0,-(sp)
   14126:	|  |  |         jsr 1473c <unlinkVar>
   1412c:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   1412e:	|  |  |         move.l 12(sp),8(sp)
   14134:	|  |  |         move.l 1a7a4 <SysBase>,d0
   1413a:	|  |  |         movea.l d0,a6
   1413c:	|  |  |         movea.l 8(sp),a1
   14140:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   14144:	|  |  |         tst.w 6(sp)
   14148:	|  |  |     ,-- bne.s 1414e <deleteVarFromStack+0x84>
   1414a:	|  |  |     |   moveq #1,d0
   1414c:	|  |  |  ,--|-- bra.s 14170 <deleteVarFromStack+0xa6>
            reply++;
   1414e:	|  |  |  |  '-> addq.l #1,16(sp)
   14152:	|  +--|--|----- bra.s 14162 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   14154:	|  |  '--|----> movea.l 20(sp),a0
   14158:	|  |     |      move.l (a0),d0
   1415a:	|  |     |      move.l d0,d1
   1415c:	|  |     |      addq.l #8,d1
   1415e:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   14162:	|  '-----|----> movea.l 20(sp),a0
   14166:	|        |      move.l (a0),d0
   14168:	'--------|----- bne.w 140e6 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   1416c:	         |      move.l 16(sp),d0
}
   14170:	         '----> movea.l (sp)+,a6
   14172:	                lea 20(sp),sp
   14176:	                rts

00014178 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   14178:	       movea.l 4(sp),a0
   1417c:	       move.l 4(a0),d0
   14180:	       cmp.l 8(sp),d0
   14184:	   ,-- bhi.s 1418a <fastArrayGetByIndex+0x12>
   14186:	   |   moveq #0,d0
   14188:	,--|-- bra.s 14198 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   1418a:	|  '-> movea.l 4(sp),a0
   1418e:	|      move.l (a0),d1
   14190:	|      move.l 8(sp),d0
   14194:	|      lsl.l #3,d0
   14196:	|      add.l d1,d0
}
   14198:	'----> rts

0001419a <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   1419a:	                lea -32(sp),sp
   1419e:	                move.l a6,-(sp)
   141a0:	                move.l a2,-(sp)
    struct persona *p = NULL;
   141a2:	                clr.l 36(sp)

    switch (thisVar->varType) {
   141a6:	                movea.l 44(sp),a0
   141aa:	                move.l (a0),d0
   141ac:	                moveq #8,d1
   141ae:	                cmp.l d0,d1
   141b0:	            ,-- beq.s 141be <getCostumeFromVar+0x24>
   141b2:	            |   moveq #9,d1
   141b4:	            |   cmp.l d0,d1
   141b6:	   ,--------|-- beq.w 1426c <getCostumeFromVar+0xd2>
   141ba:	,--|--------|-- bra.w 14276 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   141be:	|  |        '-> moveq #8,d0
   141c0:	|  |            move.l d0,28(sp)
   141c4:	|  |            clr.l 24(sp)
   141c8:	|  |            move.l 1a7a4 <SysBase>,d0
   141ce:	|  |            movea.l d0,a6
   141d0:	|  |            move.l 28(sp),d0
   141d4:	|  |            move.l 24(sp),d1
   141d8:	|  |            jsr -684(a6)
   141dc:	|  |            move.l d0,20(sp)
   141e0:	|  |            move.l 20(sp),d0
   141e4:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   141e8:	|  |        ,-- bne.s 141f0 <getCostumeFromVar+0x56>
   141ea:	|  |        |   moveq #0,d0
   141ec:	|  |  ,-----|-- bra.w 142a0 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   141f0:	|  |  |     '-> movea.l 36(sp),a0
   141f4:	|  |  |         moveq #1,d1
   141f6:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   141fa:	|  |  |         moveq #12,d0
   141fc:	|  |  |         move.l d0,16(sp)
   14200:	|  |  |         clr.l 12(sp)
   14204:	|  |  |         move.l 1a7a4 <SysBase>,d0
   1420a:	|  |  |         movea.l d0,a6
   1420c:	|  |  |         move.l 16(sp),d0
   14210:	|  |  |         move.l 12(sp),d1
   14214:	|  |  |         jsr -684(a6)
   14218:	|  |  |         move.l d0,8(sp)
   1421c:	|  |  |         move.l 8(sp),d0
   14220:	|  |  |         movea.l 36(sp),a0
   14224:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14226:	|  |  |         movea.l 36(sp),a0
   1422a:	|  |  |         move.l (a0),d0
   1422c:	|  |  |     ,-- bne.s 14232 <getCostumeFromVar+0x98>
   1422e:	|  |  |     |   moveq #0,d0
   14230:	|  |  +-----|-- bra.s 142a0 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   14232:	|  |  |     '-> clr.l 32(sp)
   14236:	|  |  |     ,-- bra.s 14262 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14238:	|  |  |  ,--|-> movea.l 44(sp),a0
   1423c:	|  |  |  |  |   move.l 4(a0),d0
   14240:	|  |  |  |  |   movea.l 36(sp),a0
   14244:	|  |  |  |  |   movea.l (a0),a0
   14246:	|  |  |  |  |   move.l 32(sp),d1
   1424a:	|  |  |  |  |   add.l d1,d1
   1424c:	|  |  |  |  |   add.l d1,d1
   1424e:	|  |  |  |  |   lea (0,a0,d1.l),a2
   14252:	|  |  |  |  |   move.l d0,-(sp)
   14254:	|  |  |  |  |   jsr 9264 <copyAnim>
   1425a:	|  |  |  |  |   addq.l #4,sp
   1425c:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   1425e:	|  |  |  |  |   addq.l #1,32(sp)
   14262:	|  |  |  |  '-> moveq #2,d1
   14264:	|  |  |  |      cmp.l 32(sp),d1
   14268:	|  |  |  '----- bge.s 14238 <getCostumeFromVar+0x9e>
            }
            break;
   1426a:	|  |  |     ,-- bra.s 1429c <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   1426c:	|  '--|-----|-> movea.l 44(sp),a0
   14270:	|     |     |   move.l 4(a0),d0
   14274:	|     +-----|-- bra.s 142a0 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14276:	'-----|-----|-> movea.l 44(sp),a0
   1427a:	      |     |   move.l (a0),d0
   1427c:	      |     |   add.l d0,d0
   1427e:	      |     |   movea.l d0,a1
   14280:	      |     |   adda.l d0,a1
   14282:	      |     |   lea 1a680 <typeName>,a0
   14288:	      |     |   move.l (0,a1,a0.l),d0
   1428c:	      |     |   move.l d0,-(sp)
   1428e:	      |     |   pea 19b1f <line.c.74a5f850+0x188>
   14294:	      |     |   jsr 16f3a <KPrintF>
   1429a:	      |     |   addq.l #8,sp
    }

    return p;
   1429c:	      |     '-> move.l 36(sp),d0
}
   142a0:	      '-------> movea.l (sp)+,a2
   142a2:	                movea.l (sp)+,a6
   142a4:	                lea 32(sp),sp
   142a8:	                rts

000142aa <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   142aa:	                lea -96(sp),sp
   142ae:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   142b2:	                move.l 116(sp),-(sp)
   142b6:	                pea 19b57 <line.c.74a5f850+0x1c0>
   142bc:	                jsr 13a1a <joinStrings>
   142c2:	                addq.l #8,sp
   142c4:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   142c8:	            ,-- bne.s 142d0 <getSavedGamesStack+0x26>
   142ca:	            |   clr.w d0
   142cc:	,-----------|-- bra.w 144e4 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   142d0:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   142d4:	|               move.l #105305,98(sp)
   142dc:	|               moveq #-2,d0
   142de:	|               move.l d0,94(sp)
   142e2:	|               move.l 1a7ac <DOSBase>,d0
   142e8:	|               movea.l d0,a6
   142ea:	|               move.l 98(sp),d1
   142ee:	|               move.l 94(sp),d2
   142f2:	|               jsr -84(a6)
   142f6:	|               move.l d0,90(sp)
   142fa:	|               move.l 90(sp),d0
   142fe:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   14302:	|           ,-- bne.s 1430a <getSavedGamesStack+0x60>
   14304:	|           |   clr.w d0
   14306:	+-----------|-- bra.w 144e4 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   1430a:	|           '-> move.l #260,82(sp)
   14312:	|               move.l #65536,78(sp)
   1431a:	|               move.l 1a7a4 <SysBase>,d0
   14320:	|               movea.l d0,a6
   14322:	|               move.l 82(sp),d0
   14326:	|               move.l 78(sp),d1
   1432a:	|               jsr -684(a6)
   1432e:	|               move.l d0,74(sp)
   14332:	|               move.l 74(sp),d0
   14336:	|               move.l d0,70(sp)
	if (!fib) {
   1433a:	|           ,-- bne.s 14358 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   1433c:	|           |   move.l 86(sp),22(sp)
   14342:	|           |   move.l 1a7ac <DOSBase>,d0
   14348:	|           |   movea.l d0,a6
   1434a:	|           |   move.l 22(sp),d1
   1434e:	|           |   jsr -90(a6)
		return FALSE;
   14352:	|           |   clr.w d0
   14354:	+-----------|-- bra.w 144e4 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   14358:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   1435c:	|               move.l 86(sp),66(sp)
   14362:	|               move.l 70(sp),62(sp)
   14368:	|               move.l 1a7ac <DOSBase>,d0
   1436e:	|               movea.l d0,a6
   14370:	|               move.l 66(sp),d1
   14374:	|               move.l 62(sp),d2
   14378:	|               jsr -102(a6)
   1437c:	|               move.l d0,58(sp)
   14380:	|               move.l 58(sp),d0
   14384:	|  ,----------- beq.w 14498 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   14388:	|  |        ,-- bra.w 14464 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   1438c:	|  |  ,-----|-> move.l 70(sp),d2
   14390:	|  |  |     |   addq.l #8,d2
   14392:	|  |  |     |   move.l 70(sp),d0
   14396:	|  |  |     |   addq.l #8,d0
   14398:	|  |  |     |   move.l d0,-(sp)
   1439a:	|  |  |     |   jsr 139da <strlen>
   143a0:	|  |  |     |   addq.l #4,sp
   143a2:	|  |  |     |   move.l d0,d3
   143a4:	|  |  |     |   move.l 116(sp),-(sp)
   143a8:	|  |  |     |   jsr 139da <strlen>
   143ae:	|  |  |     |   addq.l #4,sp
   143b0:	|  |  |     |   move.l d3,d1
   143b2:	|  |  |     |   sub.l d0,d1
   143b4:	|  |  |     |   move.l d2,d0
   143b6:	|  |  |     |   add.l d1,d0
   143b8:	|  |  |     |   move.l 116(sp),-(sp)
   143bc:	|  |  |     |   move.l d0,-(sp)
   143be:	|  |  |     |   jsr 1399a <strcmp>
   143c4:	|  |  |     |   addq.l #8,sp
   143c6:	|  |  |     |   tst.l d0
   143c8:	|  |  |     +-- bne.w 14464 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   143cc:	|  |  |     |   move.l 70(sp),d0
   143d0:	|  |  |     |   addq.l #8,d0
   143d2:	|  |  |     |   move.l d0,-(sp)
   143d4:	|  |  |     |   jsr 139da <strlen>
   143da:	|  |  |     |   addq.l #4,sp
   143dc:	|  |  |     |   move.l d0,d2
   143de:	|  |  |     |   move.l 116(sp),-(sp)
   143e2:	|  |  |     |   jsr 139da <strlen>
   143e8:	|  |  |     |   addq.l #4,sp
   143ea:	|  |  |     |   move.l d0,d1
   143ec:	|  |  |     |   move.l d2,d0
   143ee:	|  |  |     |   sub.l d1,d0
   143f0:	|  |  |     |   movea.l 70(sp),a0
   143f4:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   143f8:	|  |  |     |   move.l 70(sp),d0
   143fc:	|  |  |     |   addq.l #8,d0
   143fe:	|  |  |     |   move.l d0,-(sp)
   14400:	|  |  |     |   jsr 118 <decodeFilename>
   14406:	|  |  |     |   addq.l #4,sp
   14408:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   1440c:	|  |  |     |   move.l 42(sp),-(sp)
   14410:	|  |  |     |   lea 18(sp),a0
   14414:	|  |  |     |   move.l a0,-(sp)
   14416:	|  |  |     |   jsr 14710 <makeTextVar>
   1441c:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   1441e:	|  |  |     |   move.l 42(sp),38(sp)
   14424:	|  |  |     |   move.l 1a7a4 <SysBase>,d0
   1442a:	|  |  |     |   movea.l d0,a6
   1442c:	|  |  |     |   movea.l 38(sp),a1
   14430:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14434:	|  |  |     |   move.l 112(sp),d0
   14438:	|  |  |     |   move.l d0,-(sp)
   1443a:	|  |  |     |   lea 18(sp),a0
   1443e:	|  |  |     |   move.l a0,-(sp)
   14440:	|  |  |     |   jsr 13d2a <addVarToStack>
   14446:	|  |  |     |   addq.l #8,sp
   14448:	|  |  |     |   tst.w d0
   1444a:	|  |  |  ,--|-- beq.s 1449c <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   1444c:	|  |  |  |  |   movea.l 112(sp),a0
   14450:	|  |  |  |  |   move.l 4(a0),d0
   14454:	|  |  |  |  +-- bne.s 14464 <getSavedGamesStack+0x1ba>
   14456:	|  |  |  |  |   movea.l 112(sp),a0
   1445a:	|  |  |  |  |   move.l (a0),d0
   1445c:	|  |  |  |  |   movea.l 112(sp),a0
   14460:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14464:	|  |  |  |  '-> move.l 86(sp),54(sp)
   1446a:	|  |  |  |      move.l 70(sp),50(sp)
   14470:	|  |  |  |      move.l 1a7ac <DOSBase>,d0
   14476:	|  |  |  |      movea.l d0,a6
   14478:	|  |  |  |      move.l 54(sp),d1
   1447c:	|  |  |  |      move.l 50(sp),d2
   14480:	|  |  |  |      jsr -108(a6)
   14484:	|  |  |  |      move.l d0,46(sp)
   14488:	|  |  |  |      move.l 46(sp),d0
   1448c:	|  |  '--|----- bne.w 1438c <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14490:	|  |     |      move.w #1,106(sp)
   14496:	|  |     |  ,-- bra.s 1449e <getSavedGamesStack+0x1f4>
	}

cleanup:
   14498:	|  '-----|--|-> nop
   1449a:	|        |  +-- bra.s 1449e <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1449c:	|        '--|-> nop
	FreeVec(fib);
   1449e:	|           '-> move.l 70(sp),34(sp)
   144a4:	|               move.l 1a7a4 <SysBase>,d0
   144aa:	|               movea.l d0,a6
   144ac:	|               movea.l 34(sp),a1
   144b0:	|               jsr -690(a6)
	UnLock(dirLock);
   144b4:	|               move.l 86(sp),30(sp)
   144ba:	|               move.l 1a7ac <DOSBase>,d0
   144c0:	|               movea.l d0,a6
   144c2:	|               move.l 30(sp),d1
   144c6:	|               jsr -90(a6)
	FreeVec(pattern);
   144ca:	|               move.l 102(sp),26(sp)
   144d0:	|               move.l 1a7a4 <SysBase>,d0
   144d6:	|               movea.l d0,a6
   144d8:	|               movea.l 26(sp),a1
   144dc:	|               jsr -690(a6)
	return result;
   144e0:	|               move.w 106(sp),d0
}
   144e4:	'-------------> movem.l (sp)+,d2-d3/a6
   144e8:	                lea 96(sp),sp
   144ec:	                rts

000144ee <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   144ee:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   144f0:	       movea.l 20(sp),a0
   144f4:	       move.l (a0),d0
   144f6:	       cmp.l 16(sp),d0
   144fa:	,----- beq.s 1455e <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   144fc:	|      move.l 16(sp),d0
   14500:	|      add.l d0,d0
   14502:	|      movea.l d0,a1
   14504:	|      adda.l d0,a1
   14506:	|      lea 1a680 <typeName>,a0
   1450c:	|      move.l (0,a1,a0.l),d0
   14510:	|      move.l d0,-(sp)
   14512:	|      pea 19b5b <line.c.74a5f850+0x1c4>
   14518:	|      jsr 13a1a <joinStrings>
   1451e:	|      addq.l #8,sp
   14520:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14524:	|      movea.l 20(sp),a0
   14528:	|      move.l (a0),d0
   1452a:	|      add.l d0,d0
   1452c:	|      movea.l d0,a1
   1452e:	|      adda.l d0,a1
   14530:	|      lea 1a680 <typeName>,a0
   14536:	|      move.l (0,a1,a0.l),d0
   1453a:	|      move.l d0,-(sp)
   1453c:	|      pea 19b9d <line.c.74a5f850+0x206>
   14542:	|      jsr 13a1a <joinStrings>
   14548:	|      addq.l #8,sp
   1454a:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   1454c:	|      move.l (sp),-(sp)
   1454e:	|      move.l 8(sp),-(sp)
   14552:	|      jsr 16f3a <KPrintF>
   14558:	|      addq.l #8,sp

		return FALSE;
   1455a:	|      clr.w d0
   1455c:	|  ,-- bra.s 1456e <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   1455e:	'--|-> movea.l 20(sp),a0
   14562:	   |   move.l 4(a0),d0
   14566:	   |   movea.l 12(sp),a0
   1456a:	   |   move.l d0,(a0)
	return TRUE;
   1456c:	   |   moveq #1,d0
}
   1456e:	   '-> addq.l #8,sp
   14570:	       rts

00014572 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14572:	move.l 8(sp),-(sp)
   14576:	jsr 6930 <getNumberedString>
   1457c:	addq.l #4,sp
   1457e:	move.l d0,-(sp)
   14580:	move.l 8(sp),-(sp)
   14584:	jsr 14710 <makeTextVar>
   1458a:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   1458c:	movea.l 4(sp),a0
   14590:	move.l 4(a0),d0
   14594:	sne d0
   14596:	neg.b d0
   14598:	move.b d0,d0
   1459a:	andi.w #255,d0
}
   1459e:	rts

000145a0 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   145a0:	          subq.l #8,sp
    int size = stackSize(stacky);
   145a2:	          move.l 16(sp),-(sp)
   145a6:	          jsr 14e4e <stackSize>
   145ac:	          addq.l #4,sp
   145ae:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   145b2:	          move.l 4(sp),-(sp)
   145b6:	          move.l 16(sp),-(sp)
   145ba:	          jsr 1460a <makeFastArraySize>
   145c0:	          addq.l #8,sp
   145c2:	          tst.w d0
   145c4:	      ,-- bne.s 145ca <makeFastArrayFromStack+0x2a>
   145c6:	      |   clr.w d0
   145c8:	,-----|-- bra.s 14606 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   145ca:	|     '-> movea.l 16(sp),a0
   145ce:	|         move.l (a0),(sp)
    size = 0;
   145d0:	|         clr.l 4(sp)
    while (allV) {
   145d4:	|     ,-- bra.s 14600 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   145d6:	|  ,--|-> movea.l 12(sp),a0
   145da:	|  |  |   movea.l 4(a0),a0
   145de:	|  |  |   move.l (a0),d1
   145e0:	|  |  |   move.l 4(sp),d0
   145e4:	|  |  |   lsl.l #3,d0
   145e6:	|  |  |   add.l d0,d1
   145e8:	|  |  |   move.l (sp),d0
   145ea:	|  |  |   move.l d1,-(sp)
   145ec:	|  |  |   move.l d0,-(sp)
   145ee:	|  |  |   jsr 1488c <copyMain>
   145f4:	|  |  |   addq.l #8,sp
        size++;
   145f6:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   145fa:	|  |  |   movea.l (sp),a0
   145fc:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14600:	|  |  '-> tst.l (sp)
   14602:	|  '----- bne.s 145d6 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14604:	|         moveq #1,d0
}
   14606:	'-------> addq.l #8,sp
   14608:	          rts

0001460a <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   1460a:	          lea -28(sp),sp
   1460e:	          move.l a6,-(sp)
    if (size < 0) {
   14610:	          tst.l 40(sp)
   14614:	      ,-- bge.s 1462a <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14616:	      |   pea 19be2 <line.c.74a5f850+0x24b>
   1461c:	      |   jsr 16f3a <KPrintF>
   14622:	      |   addq.l #4,sp
		return FALSE;
   14624:	      |   clr.w d0
   14626:	,-----|-- bra.w 14708 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   1462a:	|     '-> move.l 36(sp),-(sp)
   1462e:	|         jsr 1473c <unlinkVar>
   14634:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14636:	|         movea.l 36(sp),a0
   1463a:	|         moveq #10,d0
   1463c:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   1463e:	|         moveq #12,d0
   14640:	|         move.l d0,24(sp)
   14644:	|         clr.l 20(sp)
   14648:	|         move.l 1a7a4 <SysBase>,d0
   1464e:	|         movea.l d0,a6
   14650:	|         move.l 24(sp),d0
   14654:	|         move.l 20(sp),d1
   14658:	|         jsr -684(a6)
   1465c:	|         move.l d0,16(sp)
   14660:	|         move.l 16(sp),d0
   14664:	|         movea.l 36(sp),a0
   14668:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   1466c:	|         movea.l 36(sp),a0
   14670:	|         move.l 4(a0),d0
   14674:	|     ,-- bne.s 1467c <makeFastArraySize+0x72>
   14676:	|     |   clr.w d0
   14678:	+-----|-- bra.w 14708 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   1467c:	|     '-> move.l 40(sp),d0
   14680:	|         lsl.l #3,d0
   14682:	|         move.l d0,12(sp)
   14686:	|         clr.l 8(sp)
   1468a:	|         move.l 1a7a4 <SysBase>,d0
   14690:	|         movea.l d0,a6
   14692:	|         move.l 12(sp),d0
   14696:	|         move.l 8(sp),d1
   1469a:	|         jsr -684(a6)
   1469e:	|         move.l d0,4(sp)
   146a2:	|         move.l 4(sp),d0
   146a6:	|         movea.l 36(sp),a0
   146aa:	|         movea.l 4(a0),a0
   146ae:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   146b0:	|         movea.l 36(sp),a0
   146b4:	|         movea.l 4(a0),a0
   146b8:	|         move.l (a0),d0
   146ba:	|     ,-- bne.s 146c0 <makeFastArraySize+0xb6>
   146bc:	|     |   clr.w d0
   146be:	+-----|-- bra.s 14708 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   146c0:	|     '-> clr.l 28(sp)
   146c4:	|     ,-- bra.s 146e0 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   146c6:	|  ,--|-> movea.l 36(sp),a0
   146ca:	|  |  |   movea.l 4(a0),a0
   146ce:	|  |  |   move.l (a0),d1
   146d0:	|  |  |   move.l 28(sp),d0
   146d4:	|  |  |   lsl.l #3,d0
   146d6:	|  |  |   movea.l d1,a0
   146d8:	|  |  |   adda.l d0,a0
   146da:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   146dc:	|  |  |   addq.l #1,28(sp)
   146e0:	|  |  '-> move.l 28(sp),d0
   146e4:	|  |      cmp.l 40(sp),d0
   146e8:	|  '----- blt.s 146c6 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   146ea:	|         movea.l 36(sp),a0
   146ee:	|         movea.l 4(a0),a0
   146f2:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   146f8:	|         movea.l 36(sp),a0
   146fc:	|         movea.l 4(a0),a0
   14700:	|         moveq #1,d0
   14702:	|         move.l d0,8(a0)
    return TRUE;
   14706:	|         moveq #1,d0
}
   14708:	'-------> movea.l (sp)+,a6
   1470a:	          lea 28(sp),sp
   1470e:	          rts

00014710 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14710:	move.l 4(sp),-(sp)
   14714:	jsr 1473c <unlinkVar>
   1471a:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   1471c:	movea.l 4(sp),a0
   14720:	moveq #3,d0
   14722:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14724:	move.l 8(sp),-(sp)
   14728:	jsr b8 <copyString>
   1472e:	addq.l #4,sp
   14730:	movea.l 4(sp),a0
   14734:	move.l d0,4(a0)
}
   14738:	nop
   1473a:	rts

0001473c <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   1473c:	                      lea -16(sp),sp
   14740:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14742:	                      movea.l 24(sp),a0
   14746:	                      move.l (a0),d0
   14748:	                      moveq #10,d1
   1474a:	                      cmp.l d0,d1
   1474c:	            ,-------- beq.w 14804 <unlinkVar+0xc8>
   14750:	            |         moveq #10,d1
   14752:	            |         cmp.l d0,d1
   14754:	,-----------|-------- bcs.w 14878 <unlinkVar+0x13c>
   14758:	|           |         moveq #8,d1
   1475a:	|           |         cmp.l d0,d1
   1475c:	|  ,--------|-------- beq.w 14864 <unlinkVar+0x128>
   14760:	|  |        |         moveq #8,d1
   14762:	|  |        |         cmp.l d0,d1
   14764:	+--|--------|-------- bcs.w 14878 <unlinkVar+0x13c>
   14768:	|  |        |         moveq #3,d1
   1476a:	|  |        |         cmp.l d0,d1
   1476c:	|  |        |     ,-- beq.s 14778 <unlinkVar+0x3c>
   1476e:	|  |        |     |   moveq #6,d1
   14770:	|  |        |     |   cmp.l d0,d1
   14772:	|  |        |  ,--|-- beq.s 1479e <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14774:	+--|--------|--|--|-- bra.w 14878 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14778:	|  |        |  |  '-> movea.l 24(sp),a0
   1477c:	|  |        |  |      move.l 4(a0),4(sp)
   14782:	|  |        |  |      move.l 1a7a4 <SysBase>,d0
   14788:	|  |        |  |      movea.l d0,a6
   1478a:	|  |        |  |      movea.l 4(sp),a1
   1478e:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14792:	|  |        |  |      movea.l 24(sp),a0
   14796:	|  |        |  |      clr.l 4(a0)
		break;
   1479a:	|  |  ,-----|--|----- bra.w 14882 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   1479e:	|  |  |     |  '----> movea.l 24(sp),a0
   147a2:	|  |  |     |         movea.l 4(a0),a0
   147a6:	|  |  |     |         move.l 8(a0),d0
   147aa:	|  |  |     |         subq.l #1,d0
   147ac:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   147b0:	|  |  |     |         movea.l 24(sp),a0
   147b4:	|  |  |     |         movea.l 4(a0),a0
   147b8:	|  |  |     |         move.l 8(a0),d0
   147bc:	|  |  |  ,--|-------- bgt.w 1487c <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   147c0:	|  |  |  |  |     ,-- bra.s 147d4 <unlinkVar+0x98>
   147c2:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   147c6:	|  |  |  |  |  |  |   move.l 4(a0),d0
   147ca:	|  |  |  |  |  |  |   move.l d0,-(sp)
   147cc:	|  |  |  |  |  |  |   jsr 14e72 <trimStack>
   147d2:	|  |  |  |  |  |  |   addq.l #4,sp
   147d4:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   147d8:	|  |  |  |  |  |      movea.l 4(a0),a0
   147dc:	|  |  |  |  |  |      move.l (a0),d0
   147de:	|  |  |  |  |  '----- bne.s 147c2 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   147e0:	|  |  |  |  |         movea.l 24(sp),a0
   147e4:	|  |  |  |  |         move.l 4(a0),8(sp)
   147ea:	|  |  |  |  |         move.l 1a7a4 <SysBase>,d0
   147f0:	|  |  |  |  |         movea.l d0,a6
   147f2:	|  |  |  |  |         movea.l 8(sp),a1
   147f6:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   147fa:	|  |  |  |  |         movea.l 24(sp),a0
   147fe:	|  |  |  |  |         clr.l 4(a0)
		break;
   14802:	|  |  |  +--|-------- bra.s 1487c <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14804:	|  |  |  |  '-------> movea.l 24(sp),a0
   14808:	|  |  |  |            movea.l 4(a0),a0
   1480c:	|  |  |  |            move.l 8(a0),d0
   14810:	|  |  |  |            subq.l #1,d0
   14812:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14816:	|  |  |  |            movea.l 24(sp),a0
   1481a:	|  |  |  |            movea.l 4(a0),a0
   1481e:	|  |  |  |            move.l 8(a0),d0
   14822:	|  |  |  |        ,-- bgt.s 14880 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14824:	|  |  |  |        |   movea.l 24(sp),a0
   14828:	|  |  |  |        |   movea.l 4(a0),a0
   1482c:	|  |  |  |        |   move.l (a0),16(sp)
   14830:	|  |  |  |        |   move.l 1a7a4 <SysBase>,d0
   14836:	|  |  |  |        |   movea.l d0,a6
   14838:	|  |  |  |        |   movea.l 16(sp),a1
   1483c:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14840:	|  |  |  |        |   movea.l 24(sp),a0
   14844:	|  |  |  |        |   move.l 4(a0),12(sp)
   1484a:	|  |  |  |        |   move.l 1a7a4 <SysBase>,d0
   14850:	|  |  |  |        |   movea.l d0,a6
   14852:	|  |  |  |        |   movea.l 12(sp),a1
   14856:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   1485a:	|  |  |  |        |   movea.l 24(sp),a0
   1485e:	|  |  |  |        |   clr.l 4(a0)
		break;
   14862:	|  |  |  |        +-- bra.s 14880 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14864:	|  '--|--|--------|-> movea.l 24(sp),a0
   14868:	|     |  |        |   move.l 4(a0),d0
   1486c:	|     |  |        |   move.l d0,-(sp)
   1486e:	|     |  |        |   jsr 9630 <deleteAnim>
   14874:	|     |  |        |   addq.l #4,sp
		break;
   14876:	|     +--|--------|-- bra.s 14882 <unlinkVar+0x146>
		break;
   14878:	'-----|--|--------|-> nop
   1487a:	      +--|--------|-- bra.s 14882 <unlinkVar+0x146>
		break;
   1487c:	      |  '--------|-> nop
   1487e:	      +-----------|-- bra.s 14882 <unlinkVar+0x146>
		break;
   14880:	      |           '-> nop
	}
}
   14882:	      '-------------> nop
   14884:	                      movea.l (sp)+,a6
   14886:	                      lea 16(sp),sp
   1488a:	                      rts

0001488c <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   1488c:	       movea.l 4(sp),a0
   14890:	       move.l (a0),d0
   14892:	       movea.l 8(sp),a0
   14896:	       move.l d0,(a0)
	switch (to->varType) {
   14898:	       movea.l 8(sp),a0
   1489c:	       move.l (a0),d0
   1489e:	       moveq #10,d1
   148a0:	       cmp.l d0,d1
   148a2:	,----- bcs.w 14994 <copyMain+0x108>
   148a6:	|      add.l d0,d0
   148a8:	|      movea.l d0,a0
   148aa:	|      adda.l #84150,a0
   148b0:	|      move.w (a0),d0
   148b2:	|      jmp (148b6 <copyMain+0x2a>,pc,d0.w)
   148b6:	|      .short 0x00da
   148b8:	|      ori.b #22,(a6)
   148bc:	|      ori.w #22,(a4)
   148c0:	|      ori.b #-126,(a6)
   148c4:	|      ori.b #-68,(a6)
   148c8:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   148d0:	|      move.l 4(a0),d0
   148d4:	|      movea.l 8(sp),a0
   148d8:	|      move.l d0,4(a0)
		return TRUE;
   148dc:	|      moveq #1,d0
   148de:	|  ,-- bra.w 149a6 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   148e2:	|  |   movea.l 4(sp),a0
   148e6:	|  |   move.l 4(a0),d0
   148ea:	|  |   movea.l 8(sp),a0
   148ee:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   148f2:	|  |   movea.l 8(sp),a0
   148f6:	|  |   movea.l 4(a0),a0
   148fa:	|  |   move.l 8(a0),d0
   148fe:	|  |   addq.l #1,d0
   14900:	|  |   move.l d0,8(a0)
		return TRUE;
   14904:	|  |   moveq #1,d0
   14906:	|  +-- bra.w 149a6 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   1490a:	|  |   movea.l 4(sp),a0
   1490e:	|  |   move.l 4(a0),d0
   14912:	|  |   move.l d0,-(sp)
   14914:	|  |   jsr b8 <copyString>
   1491a:	|  |   addq.l #4,sp
   1491c:	|  |   movea.l 8(sp),a0
   14920:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14924:	|  |   movea.l 8(sp),a0
   14928:	|  |   move.l 4(a0),d0
   1492c:	|  |   sne d0
   1492e:	|  |   neg.b d0
   14930:	|  |   move.b d0,d0
   14932:	|  |   andi.w #255,d0
   14936:	|  +-- bra.s 149a6 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14938:	|  |   movea.l 4(sp),a0
   1493c:	|  |   move.l 4(a0),d0
   14940:	|  |   movea.l 8(sp),a0
   14944:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14948:	|  |   movea.l 8(sp),a0
   1494c:	|  |   movea.l 4(a0),a0
   14950:	|  |   move.l 8(a0),d0
   14954:	|  |   addq.l #1,d0
   14956:	|  |   move.l d0,8(a0)
		return TRUE;
   1495a:	|  |   moveq #1,d0
   1495c:	|  +-- bra.s 149a6 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   1495e:	|  |   movea.l 4(sp),a0
   14962:	|  |   move.l 4(a0),d0
   14966:	|  |   movea.l 8(sp),a0
   1496a:	|  |   move.l d0,4(a0)
		return TRUE;
   1496e:	|  |   moveq #1,d0
   14970:	|  +-- bra.s 149a6 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14972:	|  |   movea.l 4(sp),a0
   14976:	|  |   move.l 4(a0),d0
   1497a:	|  |   move.l d0,-(sp)
   1497c:	|  |   jsr 9264 <copyAnim>
   14982:	|  |   addq.l #4,sp
   14984:	|  |   movea.l 8(sp),a0
   14988:	|  |   move.l d0,4(a0)
		return TRUE;
   1498c:	|  |   moveq #1,d0
   1498e:	|  +-- bra.s 149a6 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14990:	|  |   moveq #1,d0
   14992:	|  +-- bra.s 149a6 <copyMain+0x11a>

		default:
		break;
   14994:	'--|-> nop
	}
	KPrintF("Unknown value type");
   14996:	   |   pea 19c33 <graphics.c.7a652652+0x40>
   1499c:	   |   jsr 16f3a <KPrintF>
   149a2:	   |   addq.l #4,sp
	return FALSE;
   149a4:	   |   clr.w d0
}
   149a6:	   '-> rts

000149a8 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   149a8:	move.l 8(sp),-(sp)
   149ac:	jsr 1473c <unlinkVar>
   149b2:	addq.l #4,sp
	return copyMain(from, to);
   149b4:	move.l 8(sp),-(sp)
   149b8:	move.l 8(sp),-(sp)
   149bc:	jsr 1488c <copyMain>
   149c2:	addq.l #8,sp
}
   149c4:	rts

000149c6 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   149c6:	       movea.l 4(sp),a0
   149ca:	       move.l (a0),d0
   149cc:	       moveq #8,d1
   149ce:	       cmp.l d0,d1
   149d0:	   ,-- bne.s 149e6 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   149d2:	   |   movea.l 4(sp),a0
   149d6:	   |   move.l 4(a0),d0
   149da:	   |   move.l d0,-(sp)
   149dc:	   |   jsr 9264 <copyAnim>
   149e2:	   |   addq.l #4,sp
   149e4:	,--|-- bra.s 14a2c <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   149e6:	|  '-> movea.l 4(sp),a0
   149ea:	|      move.l (a0),d0
   149ec:	|      moveq #1,d1
   149ee:	|      cmp.l d0,d1
   149f0:	|  ,-- bne.s 14a04 <getAnimationFromVar+0x3e>
   149f2:	|  |   movea.l 4(sp),a0
   149f6:	|  |   move.l 4(a0),d0
   149fa:	|  +-- bne.s 14a04 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   149fc:	|  |   jsr aa34 <makeNullAnim>
   14a02:	+--|-- bra.s 14a2c <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14a04:	|  '-> movea.l 4(sp),a0
   14a08:	|      move.l (a0),d0
   14a0a:	|      add.l d0,d0
   14a0c:	|      movea.l d0,a1
   14a0e:	|      adda.l d0,a1
   14a10:	|      lea 1a680 <typeName>,a0
   14a16:	|      move.l (0,a1,a0.l),d0
   14a1a:	|      move.l d0,-(sp)
   14a1c:	|      pea 19b1f <line.c.74a5f850+0x188>
   14a22:	|      jsr 16f3a <KPrintF>
   14a28:	|      addq.l #8,sp
	return NULL;
   14a2a:	|      moveq #0,d0
}
   14a2c:	'----> rts

00014a2e <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14a2e:	       movea.l 4(sp),a0
   14a32:	       move.l (a0),d0
   14a34:	       moveq #10,d1
   14a36:	       cmp.l d0,d1
   14a38:	,----- bcs.w 14abe <getBoolean+0x90>
   14a3c:	|      add.l d0,d0
   14a3e:	|      movea.l d0,a0
   14a40:	|      adda.l #84556,a0
   14a46:	|      move.w (a0),d0
   14a48:	|      jmp (14a4c <getBoolean+0x1e>,pc,d0.w)
   14a4c:	|      ori.b #26,(a6)
   14a50:	|      ori.w #68,(114,a2,d0.w)
   14a56:	|      ori.w #46,(114,a2,d0.w)
   14a5c:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14a62:	|      clr.w d0
   14a64:	|  ,-- bra.s 14ac2 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14a66:	|  |   movea.l 4(sp),a0
   14a6a:	|  |   move.l 4(a0),d0
   14a6e:	|  |   sne d0
   14a70:	|  |   neg.b d0
   14a72:	|  |   move.b d0,d0
   14a74:	|  |   andi.w #255,d0
   14a78:	|  +-- bra.s 14ac2 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14a7a:	|  |   movea.l 4(sp),a0
   14a7e:	|  |   movea.l 4(a0),a0
   14a82:	|  |   move.l (a0),d0
   14a84:	|  |   sne d0
   14a86:	|  |   neg.b d0
   14a88:	|  |   move.b d0,d0
   14a8a:	|  |   andi.w #255,d0
   14a8e:	|  +-- bra.s 14ac2 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14a90:	|  |   movea.l 4(sp),a0
   14a94:	|  |   movea.l 4(a0),a0
   14a98:	|  |   move.b (a0),d0
   14a9a:	|  |   sne d0
   14a9c:	|  |   neg.b d0
   14a9e:	|  |   move.b d0,d0
   14aa0:	|  |   andi.w #255,d0
   14aa4:	|  +-- bra.s 14ac2 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14aa6:	|  |   movea.l 4(sp),a0
   14aaa:	|  |   movea.l 4(a0),a0
   14aae:	|  |   move.l 4(a0),d0
   14ab2:	|  |   sne d0
   14ab4:	|  |   neg.b d0
   14ab6:	|  |   move.b d0,d0
   14ab8:	|  |   andi.w #255,d0
   14abc:	|  +-- bra.s 14ac2 <getBoolean+0x94>

		default:
		break;
   14abe:	'--|-> nop
	}
	return TRUE;
   14ac0:	   |   moveq #1,d0
}
   14ac2:	   '-> rts

00014ac4 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14ac4:	      ,----------> lea -76(sp),sp
   14ac8:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14aca:	      |            movea.l 84(sp),a0
   14ace:	      |            move.l (a0),d0
   14ad0:	      |            moveq #10,d1
   14ad2:	      |            cmp.l d0,d1
   14ad4:	,-----|----------- bcs.w 14d72 <getTextFromAnyVar+0x2ae>
   14ad8:	|     |            add.l d0,d0
   14ada:	|     |            movea.l d0,a0
   14adc:	|     |            adda.l #84712,a0
   14ae2:	|     |            move.w (a0),d0
   14ae4:	|     |            jmp (14ae8 <getTextFromAnyVar+0x24>,pc,d0.w)
   14ae8:	|     |            .short 0x028a
   14aea:	|     |            bset d0,(a0)+
   14aec:	|     |            .short 0x028a
   14aee:	|     |            ori.b #-118,(a6)
   14af2:	|     |            andi.b #8,ccr
   14af6:	|     |            andi.w #650,-(a0)
   14afa:	|     |            .short 0x028a
   14afc:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14b02:	|     |            move.l 4(a0),d0
   14b06:	|     |            move.l d0,-(sp)
   14b08:	|     |            jsr b8 <copyString>
   14b0e:	|     |            addq.l #4,sp
   14b10:	|  ,--|----------- bra.w 14d94 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14b14:	|  |  |            pea 19c46 <graphics.c.7a652652+0x53>
   14b1a:	|  |  |            jsr b8 <copyString>
   14b20:	|  |  |            addq.l #4,sp
   14b22:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14b26:	|  |  |            clr.l 72(sp)
   14b2a:	|  |  |     ,----- bra.w 14bd4 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14b2e:	|  |  |  ,--|----> pea 19c4c <graphics.c.7a652652+0x59>
   14b34:	|  |  |  |  |      move.l 80(sp),-(sp)
   14b38:	|  |  |  |  |      jsr 13a1a <joinStrings>
   14b3e:	|  |  |  |  |      addq.l #8,sp
   14b40:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14b44:	|  |  |  |  |  ,-- bne.s 14b4c <getTextFromAnyVar+0x88>
   14b46:	|  |  |  |  |  |   moveq #0,d0
   14b48:	|  +--|--|--|--|-- bra.w 14d94 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14b4c:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   14b52:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14b58:	|  |  |  |  |      movea.l d0,a6
   14b5a:	|  |  |  |  |      movea.l 56(sp),a1
   14b5e:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14b62:	|  |  |  |  |      movea.l 84(sp),a0
   14b66:	|  |  |  |  |      movea.l 4(a0),a0
   14b6a:	|  |  |  |  |      move.l (a0),d1
   14b6c:	|  |  |  |  |      move.l 72(sp),d0
   14b70:	|  |  |  |  |      lsl.l #3,d0
   14b72:	|  |  |  |  |      add.l d1,d0
   14b74:	|  |  |  |  |      move.l d0,-(sp)
   14b76:	|  |  +--|--|----- jsr 14ac4 <getTextFromAnyVar>(pc)
   14b7a:	|  |  |  |  |      addq.l #4,sp
   14b7c:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14b80:	|  |  |  |  |      move.l 52(sp),-(sp)
   14b84:	|  |  |  |  |      move.l 64(sp),-(sp)
   14b88:	|  |  |  |  |      jsr 13a1a <joinStrings>
   14b8e:	|  |  |  |  |      addq.l #8,sp
   14b90:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14b94:	|  |  |  |  |  ,-- bne.s 14b9c <getTextFromAnyVar+0xd8>
   14b96:	|  |  |  |  |  |   moveq #0,d0
   14b98:	|  +--|--|--|--|-- bra.w 14d94 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14b9c:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   14ba2:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14ba8:	|  |  |  |  |      movea.l d0,a6
   14baa:	|  |  |  |  |      movea.l 48(sp),a1
   14bae:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14bb2:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14bb6:	|  |  |  |  |      move.l 60(sp),44(sp)
   14bbc:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14bc2:	|  |  |  |  |      movea.l d0,a6
   14bc4:	|  |  |  |  |      movea.l 44(sp),a1
   14bc8:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14bcc:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14bd0:	|  |  |  |  |      addq.l #1,72(sp)
   14bd4:	|  |  |  |  '----> movea.l 84(sp),a0
   14bd8:	|  |  |  |         movea.l 4(a0),a0
   14bdc:	|  |  |  |         move.l 4(a0),d0
   14be0:	|  |  |  |         cmp.l 72(sp),d0
   14be4:	|  |  |  '-------- bgt.w 14b2e <getTextFromAnyVar+0x6a>
			}
			return builder;
   14be8:	|  |  |            move.l 76(sp),d0
   14bec:	|  +--|----------- bra.w 14d94 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14bf0:	|  |  |            pea 19c4e <graphics.c.7a652652+0x5b>
   14bf6:	|  |  |            jsr b8 <copyString>
   14bfc:	|  |  |            addq.l #4,sp
   14bfe:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14c02:	|  |  |            movea.l 84(sp),a0
   14c06:	|  |  |            movea.l 4(a0),a0
   14c0a:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14c0e:	|  |  |     ,----- bra.w 14cb0 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14c12:	|  |  |  ,--|----> pea 19c4c <graphics.c.7a652652+0x59>
   14c18:	|  |  |  |  |      move.l 72(sp),-(sp)
   14c1c:	|  |  |  |  |      jsr 13a1a <joinStrings>
   14c22:	|  |  |  |  |      addq.l #8,sp
   14c24:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14c28:	|  |  |  |  |  ,-- bne.s 14c30 <getTextFromAnyVar+0x16c>
   14c2a:	|  |  |  |  |  |   moveq #0,d0
   14c2c:	|  +--|--|--|--|-- bra.w 14d94 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14c30:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   14c36:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14c3c:	|  |  |  |  |      movea.l d0,a6
   14c3e:	|  |  |  |  |      movea.l 32(sp),a1
   14c42:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14c46:	|  |  |  |  |      move.l 64(sp),d0
   14c4a:	|  |  |  |  |      move.l d0,-(sp)
   14c4c:	|  |  '--|--|----- jsr 14ac4 <getTextFromAnyVar>(pc)
   14c50:	|  |     |  |      addq.l #4,sp
   14c52:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14c56:	|  |     |  |      move.l 28(sp),-(sp)
   14c5a:	|  |     |  |      move.l 40(sp),-(sp)
   14c5e:	|  |     |  |      jsr 13a1a <joinStrings>
   14c64:	|  |     |  |      addq.l #8,sp
   14c66:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14c6a:	|  |     |  |  ,-- bne.s 14c72 <getTextFromAnyVar+0x1ae>
   14c6c:	|  |     |  |  |   moveq #0,d0
   14c6e:	|  +-----|--|--|-- bra.w 14d94 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14c72:	|  |     |  |  '-> move.l 28(sp),24(sp)
   14c78:	|  |     |  |      move.l 1a7a4 <SysBase>,d0
   14c7e:	|  |     |  |      movea.l d0,a6
   14c80:	|  |     |  |      movea.l 24(sp),a1
   14c84:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14c88:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14c8c:	|  |     |  |      move.l 36(sp),20(sp)
   14c92:	|  |     |  |      move.l 1a7a4 <SysBase>,d0
   14c98:	|  |     |  |      movea.l d0,a6
   14c9a:	|  |     |  |      movea.l 20(sp),a1
   14c9e:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14ca2:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14ca6:	|  |     |  |      movea.l 64(sp),a0
   14caa:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14cb0:	|  |     |  '----> tst.l 64(sp)
   14cb4:	|  |     '-------- bne.w 14c12 <getTextFromAnyVar+0x14e>
			}
			return builder;
   14cb8:	|  |               move.l 68(sp),d0
   14cbc:	|  +-------------- bra.w 14d94 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14cc0:	|  |               moveq #10,d0
   14cc2:	|  |               move.l d0,16(sp)
   14cc6:	|  |               clr.l 12(sp)
   14cca:	|  |               move.l 1a7a4 <SysBase>,d0
   14cd0:	|  |               movea.l d0,a6
   14cd2:	|  |               move.l 16(sp),d0
   14cd6:	|  |               move.l 12(sp),d1
   14cda:	|  |               jsr -684(a6)
   14cde:	|  |               move.l d0,8(sp)
   14ce2:	|  |               move.l 8(sp),d0
   14ce6:	|  |               move.l d0,4(sp)
			if (! buff) {
   14cea:	|  |           ,-- bne.s 14d00 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14cec:	|  |           |   pea 19c55 <graphics.c.7a652652+0x62>
   14cf2:	|  |           |   jsr 16f3a <KPrintF>
   14cf8:	|  |           |   addq.l #4,sp
				return NULL;
   14cfa:	|  |           |   moveq #0,d0
   14cfc:	|  +-----------|-- bra.w 14d94 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14d00:	|  |           '-> movea.l 84(sp),a0
   14d04:	|  |               move.l 4(a0),d0
   14d08:	|  |               move.l d0,-(sp)
   14d0a:	|  |               pea 19c7f <graphics.c.7a652652+0x8c>
   14d10:	|  |               move.l 12(sp),-(sp)
   14d14:	|  |               jsr 13cf8 <sprintf>
   14d1a:	|  |               lea 12(sp),sp
			return buff;
   14d1e:	|  |               move.l 4(sp),d0
   14d22:	|  +-------------- bra.s 14d94 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   14d24:	|  |               movea.l 84(sp),a0
   14d28:	|  |               move.l 4(a0),d0
   14d2c:	|  |               move.l d0,-(sp)
   14d2e:	|  |               jsr 3db0 <resourceNameFromNum>
   14d34:	|  |               addq.l #4,sp
   14d36:	|  |               move.l d0,-(sp)
   14d38:	|  |               pea 1867f <PutChar+0xca3>
   14d3e:	|  |               jsr 13a1a <joinStrings>
   14d44:	|  |               addq.l #8,sp
   14d46:	|  +-------------- bra.s 14d94 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   14d48:	|  |               movea.l 84(sp),a0
   14d4c:	|  |               move.l 4(a0),d0
   14d50:	|  |               move.l d0,-(sp)
   14d52:	|  |               jsr d254 <findObjectType>
   14d58:	|  |               addq.l #4,sp
   14d5a:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   14d5e:	+--|-------------- beq.s 14d72 <getTextFromAnyVar+0x2ae>
   14d60:	|  |               movea.l 40(sp),a0
   14d64:	|  |               move.l (a0),d0
   14d66:	|  |               move.l d0,-(sp)
   14d68:	|  |               jsr b8 <copyString>
   14d6e:	|  |               addq.l #4,sp
   14d70:	|  +-------------- bra.s 14d94 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   14d72:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   14d74:	   |               movea.l 84(sp),a0
   14d78:	   |               move.l (a0),d0
   14d7a:	   |               add.l d0,d0
   14d7c:	   |               movea.l d0,a1
   14d7e:	   |               adda.l d0,a1
   14d80:	   |               lea 1a680 <typeName>,a0
   14d86:	   |               move.l (0,a1,a0.l),d0
   14d8a:	   |               move.l d0,-(sp)
   14d8c:	   |               jsr b8 <copyString>
   14d92:	   |               addq.l #4,sp
}
   14d94:	   '-------------> movea.l (sp)+,a6
   14d96:	                   lea 76(sp),sp
   14d9a:	                   rts

00014d9c <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   14d9c:	move.l 4(sp),-(sp)
   14da0:	jsr 1473c <unlinkVar>
   14da6:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   14da8:	movea.l 4(sp),a0
   14dac:	moveq #8,d0
   14dae:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   14db0:	movea.l 4(sp),a0
   14db4:	move.l 8(sp),4(a0)
}
   14dba:	nop
   14dbc:	rts

00014dbe <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   14dbe:	move.l 4(sp),-(sp)
   14dc2:	jsr 1473c <unlinkVar>
   14dc8:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   14dca:	movea.l 4(sp),a0
   14dce:	moveq #9,d0
   14dd0:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   14dd2:	movea.l 4(sp),a0
   14dd6:	move.l 8(sp),4(a0)
}
   14ddc:	nop
   14dde:	rts

00014de0 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   14de0:	move.l 4(sp),-(sp)
   14de4:	jsr 1473c <unlinkVar>
   14dea:	addq.l #4,sp
   14dec:	movea.l 4(sp),a0
   14df0:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   14df4:	movea.l 4(sp),a0
   14df8:	move.l 12(sp),4(a0)
   14dfe:	nop
   14e00:	rts

00014e02 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   14e02:	      ,-- bra.s 14e14 <stackGetByIndex+0x12>
        vS = vS->next;
   14e04:	,-----|-> movea.l 4(sp),a0
   14e08:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   14e0e:	|     +-- bne.s 14e14 <stackGetByIndex+0x12>
            return NULL;
   14e10:	|     |   moveq #0,d0
   14e12:	|  ,--|-- bra.s 14e28 <stackGetByIndex+0x26>
    while (theIndex--) {
   14e14:	|  |  '-> move.l 8(sp),d0
   14e18:	|  |      move.l d0,d1
   14e1a:	|  |      subq.l #1,d1
   14e1c:	|  |      move.l d1,8(sp)
   14e20:	|  |      tst.l d0
   14e22:	'--|----- bne.s 14e04 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   14e24:	   |      move.l 4(sp),d0
}
   14e28:	   '----> rts

00014e2a <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   14e2a:	          tst.l 4(sp)
   14e2e:	      ,-- bne.s 14e3e <stackFindLast+0x14>
		return NULL;
   14e30:	      |   moveq #0,d0
   14e32:	,-----|-- bra.s 14e4c <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   14e34:	|  ,--|-> movea.l 4(sp),a0
   14e38:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   14e3e:	|  |  '-> movea.l 4(sp),a0
   14e42:	|  |      move.l 8(a0),d0
   14e46:	|  '----- bne.s 14e34 <stackFindLast+0xa>

	return hunt;
   14e48:	|         move.l 4(sp),d0
}
   14e4c:	'-------> rts

00014e4e <stackSize>:

int stackSize (const struct stackHandler * me) {
   14e4e:	       subq.l #8,sp
	int r = 0;
   14e50:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   14e54:	       movea.l 12(sp),a0
   14e58:	       move.l (a0),(sp)
	while (a) {
   14e5a:	   ,-- bra.s 14e66 <stackSize+0x18>
		r ++;
   14e5c:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   14e60:	|  |   movea.l (sp),a0
   14e62:	|  |   move.l 8(a0),(sp)
	while (a) {
   14e66:	|  '-> tst.l (sp)
   14e68:	'----- bne.s 14e5c <stackSize+0xe>
	}
	return r;
   14e6a:	       move.l 4(sp),d0
}
   14e6e:	       addq.l #8,sp
   14e70:	       rts

00014e72 <trimStack>:

void trimStack (struct variableStack ** stack) {
   14e72:	subq.l #8,sp
   14e74:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   14e76:	movea.l 16(sp),a0
   14e7a:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   14e7e:	movea.l 16(sp),a0
   14e82:	movea.l (a0),a0
   14e84:	move.l 8(a0),d0
   14e88:	movea.l 16(sp),a0
   14e8c:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   14e8e:	move.l 8(sp),d0
   14e92:	move.l d0,-(sp)
   14e94:	jsr 1473c <unlinkVar>
   14e9a:	addq.l #4,sp
	FreeVec(killMe);
   14e9c:	move.l 8(sp),4(sp)
   14ea2:	move.l 1a7a4 <SysBase>,d0
   14ea8:	movea.l d0,a6
   14eaa:	movea.l 4(sp),a1
   14eae:	jsr -690(a6)
   14eb2:	nop
   14eb4:	movea.l (sp)+,a6
   14eb6:	addq.l #8,sp
   14eb8:	rts

00014eba <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   14eba:	       lea -52(sp),sp
   14ebe:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   14ec0:	       pea 19c82 <graphics.c.7a652652+0x8f>
   14ec6:	       jsr 16f3a <KPrintF>
   14ecc:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   14ece:	       moveq #68,d0
   14ed0:	       move.l d0,52(sp)
   14ed4:	       clr.l 48(sp)
   14ed8:	       move.l 1a7a4 <SysBase>,d0
   14ede:	       movea.l d0,a6
   14ee0:	       move.l 52(sp),d0
   14ee4:	       move.l 48(sp),d1
   14ee8:	       jsr -684(a6)
   14eec:	       move.l d0,44(sp)
   14ef0:	       move.l 44(sp),d0
   14ef4:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   14ef8:	   ,-- bne.s 14f00 <freeze+0x46>
   14efa:	   |   clr.w d0
   14efc:	,--|-- bra.w 15092 <freeze+0x1d8>

	CstFreeze();
   14f00:	|  '-> jsr 1c2a <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   14f06:	|      move.l 1a840 <sceneWidth>,d0
   14f0c:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   14f10:	|      move.l 1a844 <sceneHeight>,d0
   14f16:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   14f1a:	|      move.l 1a840 <sceneWidth>,d0
   14f20:	|      movea.l 40(sp),a0
   14f24:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   14f28:	|      move.l 1a844 <sceneHeight>,d0
   14f2e:	|      movea.l 40(sp),a0
   14f32:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   14f36:	|      move.l 1a85e <cameraX>,d0
   14f3c:	|      movea.l 40(sp),a0
   14f40:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   14f44:	|      move.l 1a862 <cameraY>,d0
   14f4a:	|      movea.l 40(sp),a0
   14f4e:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   14f52:	|      move.l 1a142 <cameraZoom>,d0
   14f58:	|      movea.l 40(sp),a0
   14f5c:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   14f60:	|      move.w #1,1a84c <backdropExists>

	newFreezer -> allPeople = allPeople;
   14f68:	|      move.l 1a808 <allPeople>,d0
   14f6e:	|      movea.l 40(sp),a0
   14f72:	|      move.l d0,(a0)
	allPeople = NULL;
   14f74:	|      clr.l 1a808 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   14f7a:	|      moveq #42,d0
   14f7c:	|      move.l d0,28(sp)
   14f80:	|      clr.l 24(sp)
   14f84:	|      move.l 1a7a4 <SysBase>,d0
   14f8a:	|      movea.l d0,a6
   14f8c:	|      move.l 28(sp),d0
   14f90:	|      move.l 24(sp),d1
   14f94:	|      jsr -684(a6)
   14f98:	|      move.l d0,20(sp)
   14f9c:	|      move.l 20(sp),d0
   14fa0:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   14fa4:	|  ,-- bne.s 14fac <freeze+0xf2>
   14fa6:	|  |   clr.w d0
   14fa8:	+--|-- bra.w 15092 <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   14fac:	|  '-> move.l 1a8b4 <allScreenRegions>,d0
   14fb2:	|      movea.l 40(sp),a0
   14fb6:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   14fba:	|      clr.l 1a8b4 <allScreenRegions>
	overRegion = NULL;
   14fc0:	|      clr.l 1a8b8 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   14fc6:	|      move.l 1a6aa <mouseCursorAnim>,d0
   14fcc:	|      movea.l 40(sp),a0
   14fd0:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   14fd4:	|      move.l 1a6ae <mouseCursorFrameNum>,d0
   14fda:	|      movea.l 40(sp),a0
   14fde:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   14fe2:	|      jsr aa34 <makeNullAnim>
   14fe8:	|      move.l d0,1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   14fee:	|      clr.l 1a6ae <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   14ff4:	|      move.l 1a804 <zBuffer>,d0
   14ffa:	|      movea.l 40(sp),a0
   14ffe:	|      move.l d0,60(a0)
	zBuffer = NULL;
   15002:	|      clr.l 1a804 <zBuffer>

	newFreezer -> speech = speech;
   15008:	|      move.l 1a800 <speech>,d0
   1500e:	|      movea.l 40(sp),a0
   15012:	|      move.l d0,20(a0)
	initSpeech ();
   15016:	|      jsr 7b62 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   1501c:	|      move.l 1a11c <currentEvents>,d0
   15022:	|      movea.l 40(sp),a0
   15026:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   1502a:	|      moveq #28,d0
   1502c:	|      move.l d0,12(sp)
   15030:	|      clr.l 8(sp)
   15034:	|      move.l 1a7a4 <SysBase>,d0
   1503a:	|      movea.l d0,a6
   1503c:	|      move.l 12(sp),d0
   15040:	|      move.l 8(sp),d1
   15044:	|      jsr -684(a6)
   15048:	|      move.l d0,4(sp)
   1504c:	|      move.l 4(sp),d0
   15050:	|      move.l d0,1a11c <currentEvents>
	if (!currentEvents) return FALSE;
   15056:	|      move.l 1a11c <currentEvents>,d0
   1505c:	|  ,-- bne.s 15062 <freeze+0x1a8>
   1505e:	|  |   clr.w d0
   15060:	+--|-- bra.s 15092 <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   15062:	|  '-> move.l 1a11c <currentEvents>,d0
   15068:	|      pea 1c <_start+0x1c>
   1506c:	|      clr.l -(sp)
   1506e:	|      move.l d0,-(sp)
   15070:	|      jsr 16ebe <memset>
   15076:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   1507a:	|      move.l 1a898 <frozenStuff>,d0
   15080:	|      movea.l 40(sp),a0
   15084:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   15088:	|      move.l 40(sp),1a898 <frozenStuff>

	return TRUE;
   15090:	|      moveq #1,d0
}
   15092:	'----> movea.l (sp)+,a6
   15094:	       lea 52(sp),sp
   15098:	       rts

0001509a <howFrozen>:

int howFrozen () {
   1509a:	       subq.l #8,sp
	int a = 0;
   1509c:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   150a0:	       move.l 1a898 <frozenStuff>,(sp)
	while (f) {
   150a6:	   ,-- bra.s 150b2 <howFrozen+0x18>
		a ++;
   150a8:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   150ac:	|  |   movea.l (sp),a0
   150ae:	|  |   move.l 64(a0),(sp)
	while (f) {
   150b2:	|  '-> tst.l (sp)
   150b4:	'----- bne.s 150a8 <howFrozen+0xe>
	}
	return a;
   150b6:	       move.l 4(sp),d0
}
   150ba:	       addq.l #8,sp
   150bc:	       rts

000150be <unfreeze>:

void unfreeze () {
   150be:	       lea -16(sp),sp
   150c2:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   150c4:	       move.l 1a898 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   150cc:	       move.l 1a898 <frozenStuff>,d0
   150d2:	,----- beq.w 1530a <unfreeze+0x24c>

	CstUnfreeze();
   150d6:	|      jsr 39d0 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   150dc:	|      movea.l 1a898 <frozenStuff>,a0
   150e2:	|      move.l 48(a0),d0
   150e6:	|      move.l d0,1a840 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   150ec:	|      movea.l 1a898 <frozenStuff>,a0
   150f2:	|      move.l 52(a0),d0
   150f6:	|      move.l d0,1a844 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   150fc:	|      movea.l 1a898 <frozenStuff>,a0
   15102:	|      move.l 40(a0),d0
   15106:	|      move.l d0,1a85e <cameraX>
	cameraY = frozenStuff -> cameraY;
   1510c:	|      movea.l 1a898 <frozenStuff>,a0
   15112:	|      move.l 44(a0),d0
   15116:	|      move.l d0,1a862 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   1511c:	|      move.l 1a760 <input+0xa>,d0
   15122:	|      move.l d0,-(sp)
   15124:	|      jsr 1736c <__floatsisf>
   1512a:	|      addq.l #4,sp
   1512c:	|      move.l d0,d1
   1512e:	|      move.l 1a142 <cameraZoom>,d0
   15134:	|      move.l d0,-(sp)
   15136:	|      move.l d1,-(sp)
   15138:	|      jsr 1741e <__mulsf3>
   1513e:	|      addq.l #8,sp
   15140:	|      move.l d0,-(sp)
   15142:	|      jsr 17304 <__fixsfsi>
   15148:	|      addq.l #4,sp
   1514a:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   15150:	|      move.l 1a764 <input+0xe>,d0
   15156:	|      move.l d0,-(sp)
   15158:	|      jsr 1736c <__floatsisf>
   1515e:	|      addq.l #4,sp
   15160:	|      move.l d0,d1
   15162:	|      move.l 1a142 <cameraZoom>,d0
   15168:	|      move.l d0,-(sp)
   1516a:	|      move.l d1,-(sp)
   1516c:	|      jsr 1741e <__mulsf3>
   15172:	|      addq.l #8,sp
   15174:	|      move.l d0,-(sp)
   15176:	|      jsr 17304 <__fixsfsi>
   1517c:	|      addq.l #4,sp
   1517e:	|      move.l d0,1a764 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15184:	|      movea.l 1a898 <frozenStuff>,a0
   1518a:	|      move.l 56(a0),d0
   1518e:	|      move.l d0,1a142 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15194:	|      move.l 1a760 <input+0xa>,d0
   1519a:	|      move.l d0,-(sp)
   1519c:	|      jsr 1736c <__floatsisf>
   151a2:	|      addq.l #4,sp
   151a4:	|      move.l d0,d1
   151a6:	|      move.l 1a142 <cameraZoom>,d0
   151ac:	|      move.l d0,-(sp)
   151ae:	|      move.l d1,-(sp)
   151b0:	|      jsr 17222 <__divsf3>
   151b6:	|      addq.l #8,sp
   151b8:	|      move.l d0,-(sp)
   151ba:	|      jsr 17304 <__fixsfsi>
   151c0:	|      addq.l #4,sp
   151c2:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   151c8:	|      move.l 1a764 <input+0xe>,d0
   151ce:	|      move.l d0,-(sp)
   151d0:	|      jsr 1736c <__floatsisf>
   151d6:	|      addq.l #4,sp
   151d8:	|      move.l d0,d1
   151da:	|      move.l 1a142 <cameraZoom>,d0
   151e0:	|      move.l d0,-(sp)
   151e2:	|      move.l d1,-(sp)
   151e4:	|      jsr 17222 <__divsf3>
   151ea:	|      addq.l #8,sp
   151ec:	|      move.l d0,-(sp)
   151ee:	|      jsr 17304 <__fixsfsi>
   151f4:	|      addq.l #4,sp
   151f6:	|      move.l d0,1a764 <input+0xe>

	killAllPeople ();
   151fc:	|      jsr a73c <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   15202:	|      movea.l 1a898 <frozenStuff>,a0
   15208:	|      move.l (a0),d0
   1520a:	|      move.l d0,1a808 <allPeople>

	killAllRegions ();
   15210:	|      jsr 15766 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15216:	|      movea.l 1a898 <frozenStuff>,a0
   1521c:	|      move.l 4(a0),d0
   15220:	|      move.l d0,1a8b4 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15226:	|      move.l 1a6aa <mouseCursorAnim>,d0
   1522c:	|      move.l d0,-(sp)
   1522e:	|      jsr 9630 <deleteAnim>
   15234:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15236:	|      movea.l 1a898 <frozenStuff>,a0
   1523c:	|      move.l 32(a0),d0
   15240:	|      move.l d0,1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15246:	|      movea.l 1a898 <frozenStuff>,a0
   1524c:	|      move.l 36(a0),d0
   15250:	|      move.l d0,1a6ae <mouseCursorFrameNum>

	killZBuffer ();
   15256:	|      jsr 83d6 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   1525c:	|      movea.l 1a898 <frozenStuff>,a0
   15262:	|      move.l 60(a0),d0
   15266:	|      move.l d0,1a804 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   1526c:	|      move.l 1a11c <currentEvents>,d0
   15272:	|  ,-- beq.s 1528c <unfreeze+0x1ce>
   15274:	|  |   move.l 1a11c <currentEvents>,12(sp)
   1527c:	|  |   move.l 1a7a4 <SysBase>,d0
   15282:	|  |   movea.l d0,a6
   15284:	|  |   movea.l 12(sp),a1
   15288:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   1528c:	|  '-> movea.l 1a898 <frozenStuff>,a0
   15292:	|      move.l 28(a0),d0
   15296:	|      move.l d0,1a11c <currentEvents>

	killAllSpeech ();
   1529c:	|      jsr 7bfa <killAllSpeech>
	if (speech) FreeVec(speech);
   152a2:	|      move.l 1a800 <speech>,d0
   152a8:	|  ,-- beq.s 152c2 <unfreeze+0x204>
   152aa:	|  |   move.l 1a800 <speech>,8(sp)
   152b2:	|  |   move.l 1a7a4 <SysBase>,d0
   152b8:	|  |   movea.l d0,a6
   152ba:	|  |   movea.l 8(sp),a1
   152be:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   152c2:	|  '-> movea.l 1a898 <frozenStuff>,a0
   152c8:	|      move.l 20(a0),d0
   152cc:	|      move.l d0,1a800 <speech>

	frozenStuff = frozenStuff -> next;
   152d2:	|      movea.l 1a898 <frozenStuff>,a0
   152d8:	|      move.l 64(a0),d0
   152dc:	|      move.l d0,1a898 <frozenStuff>

	overRegion = NULL;
   152e2:	|      clr.l 1a8b8 <overRegion>
	if (killMe) FreeVec(killMe);
   152e8:	|      tst.l 16(sp)
   152ec:	|  ,-- beq.s 15304 <unfreeze+0x246>
   152ee:	|  |   move.l 16(sp),4(sp)
   152f4:	|  |   move.l 1a7a4 <SysBase>,d0
   152fa:	|  |   movea.l d0,a6
   152fc:	|  |   movea.l 4(sp),a1
   15300:	|  |   jsr -690(a6)
	killMe = NULL;
   15304:	|  '-> clr.l 16(sp)
   15308:	|  ,-- bra.s 1530c <unfreeze+0x24e>
	if (! frozenStuff) return;
   1530a:	'--|-> nop
}
   1530c:	   '-> movea.l (sp)+,a6
   1530e:	       lea 16(sp),sp
   15312:	       rts

00015314 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15314:	pea 19c94 <graphics.c.7a652652+0xa1>
   1531a:	jsr 16f3a <KPrintF>
   15320:	addq.l #4,sp
	return FALSE;
   15322:	clr.w d0
}
   15324:	rts

00015326 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15326:	          lea -32(sp),sp
   1532a:	          move.l a6,-(sp)
   1532c:	          move.l d2,-(sp)
	unsigned int a = 0;
   1532e:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15332:	          move.l 1a8a4 <fontOrderString>,d0
   15338:	      ,-- beq.s 15352 <loadFont+0x2c>
   1533a:	      |   move.l 1a8a4 <fontOrderString>,24(sp)
   15342:	      |   move.l 1a7a4 <SysBase>,d0
   15348:	      |   movea.l d0,a6
   1534a:	      |   movea.l 24(sp),a1
   1534e:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15352:	      '-> move.l 48(sp),-(sp)
   15356:	          jsr b8 <copyString>
   1535c:	          addq.l #4,sp
   1535e:	          move.l d0,1a8a4 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15364:	          move.l 1a8b0 <theFont>,d0
   1536a:	      ,-- beq.s 1537c <loadFont+0x56>
   1536c:	      |   move.l 1a8b0 <theFont>,d0
   15372:	      |   move.l d0,-(sp)
   15374:	      |   jsr 8714 <forgetSpriteBank>
   1537a:	      |   addq.l #4,sp
	theFont = NULL;
   1537c:	      '-> clr.l 1a8b0 <theFont>

	loadedFontNum = filenum;
   15382:	          move.l 44(sp),1a8a0 <loadedFontNum>

	fontTableSize = 0;
   1538a:	          clr.l 1a8ac <fontTableSize>
	char *tmp = charOrder;
   15390:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   15396:	   ,----- bra.s 153d2 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   15398:	,--|----> movea.l 32(sp),a0
   1539c:	|  |      move.b (a0),d0
   1539e:	|  |      ext.w d0
   153a0:	|  |      movea.w d0,a0
   153a2:	|  |      move.l 1a8ac <fontTableSize>,d0
   153a8:	|  |      move.l d0,d0
   153aa:	|  |      move.b d0,d0
   153ac:	|  |      andi.l #255,d0
   153b2:	|  |      cmp.l a0,d0
   153b4:	|  |  ,-- bge.s 153c6 <loadFont+0xa0>
   153b6:	|  |  |   movea.l 32(sp),a0
   153ba:	|  |  |   move.b (a0),d0
   153bc:	|  |  |   ext.w d0
   153be:	|  |  |   movea.w d0,a0
   153c0:	|  |  |   move.l a0,1a8ac <fontTableSize>
		*tmp++;
   153c6:	|  |  '-> move.l 32(sp),d0
   153ca:	|  |      move.l d0,d1
   153cc:	|  |      addq.l #1,d1
   153ce:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   153d2:	|  '----> movea.l 32(sp),a0
   153d6:	|         move.b (a0),d0
   153d8:	'-------- bne.s 15398 <loadFont+0x72>
	}
	fontTableSize++;
   153da:	          move.l 1a8ac <fontTableSize>,d0
   153e0:	          addq.l #1,d0
   153e2:	          move.l d0,1a8ac <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   153e8:	          move.l 1a8a8 <fontTable>,d0
   153ee:	      ,-- beq.s 15408 <loadFont+0xe2>
   153f0:	      |   move.l 1a8a8 <fontTable>,20(sp)
   153f8:	      |   move.l 1a7a4 <SysBase>,d0
   153fe:	      |   movea.l d0,a6
   15400:	      |   movea.l 20(sp),a1
   15404:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15408:	      '-> move.l 1a8ac <fontTableSize>,d0
   1540e:	          add.l d0,d0
   15410:	          add.l d0,d0
   15412:	          move.l d0,16(sp)
   15416:	          clr.l 12(sp)
   1541a:	          move.l 1a7a4 <SysBase>,d0
   15420:	          movea.l d0,a6
   15422:	          move.l 16(sp),d0
   15426:	          move.l 12(sp),d1
   1542a:	          jsr -684(a6)
   1542e:	          move.l d0,8(sp)
   15432:	          move.l 8(sp),d0
   15436:	          move.l d0,1a8a8 <fontTable>
	if (!fontTable) return FALSE;
   1543c:	          move.l 1a8a8 <fontTable>,d0
   15442:	      ,-- bne.s 1544a <loadFont+0x124>
   15444:	      |   clr.w d0
   15446:	,-----|-- bra.w 154f0 <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   1544a:	|     '-> clr.l 36(sp)
   1544e:	|     ,-- bra.s 15468 <loadFont+0x142>
		fontTable[a] = 0;
   15450:	|  ,--|-> move.l 1a8a8 <fontTable>,d1
   15456:	|  |  |   move.l 36(sp),d0
   1545a:	|  |  |   add.l d0,d0
   1545c:	|  |  |   add.l d0,d0
   1545e:	|  |  |   movea.l d1,a0
   15460:	|  |  |   adda.l d0,a0
   15462:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15464:	|  |  |   addq.l #1,36(sp)
   15468:	|  |  '-> move.l 1a8ac <fontTableSize>,d0
   1546e:	|  |      cmp.l 36(sp),d0
   15472:	|  '----- bhi.s 15450 <loadFont+0x12a>
	}
	a = 0;
   15474:	|         clr.l 36(sp)
	int i = 0;
   15478:	|         clr.l 28(sp)
	tmp = charOrder;
   1547c:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15482:	|     ,-- bra.s 154b2 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15484:	|  ,--|-> move.l 1a8a8 <fontTable>,d1
   1548a:	|  |  |   move.l 32(sp),d0
   1548e:	|  |  |   move.l d0,d2
   15490:	|  |  |   addq.l #1,d2
   15492:	|  |  |   move.l d2,32(sp)
   15496:	|  |  |   movea.l d0,a0
   15498:	|  |  |   move.b (a0),d0
   1549a:	|  |  |   ext.w d0
   1549c:	|  |  |   movea.w d0,a0
   1549e:	|  |  |   move.l a0,d0
   154a0:	|  |  |   add.l a0,d0
   154a2:	|  |  |   add.l d0,d0
   154a4:	|  |  |   movea.l d1,a0
   154a6:	|  |  |   adda.l d0,a0
   154a8:	|  |  |   move.l 28(sp),d0
   154ac:	|  |  |   move.l d0,(a0)
		i++;
   154ae:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   154b2:	|  |  '-> movea.l 32(sp),a0
   154b6:	|  |      move.b (a0),d0
   154b8:	|  '----- bne.s 15484 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   154ba:	|         move.l 44(sp),-(sp)
   154be:	|         jsr 15c78 <loadBankForAnim>
   154c4:	|         addq.l #4,sp
   154c6:	|         move.l d0,1a8b0 <theFont>
	if (!theFont) {
   154cc:	|         move.l 1a8b0 <theFont>,d0
   154d2:	|     ,-- bne.s 154e6 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   154d4:	|     |   pea 19cbb <graphics.c.7a652652+0xc8>
   154da:	|     |   jsr 16f3a <KPrintF>
   154e0:	|     |   addq.l #4,sp
		return FALSE;
   154e2:	|     |   clr.w d0
   154e4:	+-----|-- bra.s 154f0 <loadFont+0x1ca>
	}
	fontHeight = h;
   154e6:	|     '-> move.l 52(sp),1a89c <fontHeight>
	return TRUE;
   154ee:	|         moveq #1,d0
}
   154f0:	'-------> move.l (sp)+,d2
   154f2:	          movea.l (sp)+,a6
   154f4:	          lea 32(sp),sp
   154f8:	          rts

000154fa <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   154fa:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   154fe:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15502:	                move.l 1a8ac <fontTableSize>,d0
   15508:	,-------------- beq.w 155d0 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   1550c:	|               move.w 1a6a8 <fontSpace>,d0
   15512:	|               asr.w #1,d0
   15514:	|               ext.l d0
   15516:	|               add.l d0,20(sp)
	char *tmp = theText;
   1551a:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15520:	|     ,-------- bra.w 155c4 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15524:	|  ,--|-------> movea.l 1a8b0 <theFont>,a0
   1552a:	|  |  |         movea.l 16(a0),a0
   1552e:	|  |  |         movea.l 8(sp),a1
   15532:	|  |  |         move.b (a1),d0
   15534:	|  |  |         move.b d0,d0
   15536:	|  |  |         andi.l #255,d0
   1553c:	|  |  |         move.l 1a8ac <fontTableSize>,d1
   15542:	|  |  |         cmp.l d0,d1
   15544:	|  |  |  ,----- bls.s 15570 <pasteStringToBackdrop+0x76>
   15546:	|  |  |  |      move.l 1a8a8 <fontTable>,d1
   1554c:	|  |  |  |      movea.l 8(sp),a1
   15550:	|  |  |  |      move.b (a1),d0
   15552:	|  |  |  |      move.b d0,d0
   15554:	|  |  |  |      andi.l #255,d0
   1555a:	|  |  |  |      add.l d0,d0
   1555c:	|  |  |  |      add.l d0,d0
   1555e:	|  |  |  |      movea.l d1,a1
   15560:	|  |  |  |      adda.l d0,a1
   15562:	|  |  |  |      move.l (a1),d1
   15564:	|  |  |  |      move.l d1,d0
   15566:	|  |  |  |      lsl.l #3,d0
   15568:	|  |  |  |      sub.l d1,d0
   1556a:	|  |  |  |      add.l d0,d0
   1556c:	|  |  |  |      add.l d0,d0
   1556e:	|  |  |  |  ,-- bra.s 15572 <pasteStringToBackdrop+0x78>
   15570:	|  |  |  '--|-> moveq #0,d0
   15572:	|  |  |     '-> adda.l d0,a0
   15574:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15576:	|  |  |         move.l 24(sp),d1
   1557a:	|  |  |         movea.l (sp),a0
   1557c:	|  |  |         move.l 12(a0),d0
   15580:	|  |  |         move.l d0,d0
   15582:	|  |  |         sub.w d0,d1
   15584:	|  |  |         move.w d1,d0
   15586:	|  |  |         movea.w d0,a1
   15588:	|  |  |         move.l 20(sp),d1
   1558c:	|  |  |         movea.l (sp),a0
   1558e:	|  |  |         move.l 8(a0),d0
   15592:	|  |  |         move.l d0,d0
   15594:	|  |  |         sub.w d0,d1
   15596:	|  |  |         move.w d1,d0
   15598:	|  |  |         movea.w d0,a0
   1559a:	|  |  |         move.l a1,-(sp)
   1559c:	|  |  |         move.l a0,-(sp)
   1559e:	|  |  |         move.l 8(sp),-(sp)
   155a2:	|  |  |         jsr 2242 <CstPasteChar>
   155a8:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   155ac:	|  |  |         movea.l (sp),a0
   155ae:	|  |  |         move.l (a0),d1
   155b0:	|  |  |         move.w 1a6a8 <fontSpace>,d0
   155b6:	|  |  |         movea.w d0,a0
   155b8:	|  |  |         move.l d1,d0
   155ba:	|  |  |         add.l a0,d0
   155bc:	|  |  |         add.l d0,20(sp)
		tmp++;
   155c0:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   155c4:	|  |  '-------> movea.l 8(sp),a0
   155c8:	|  |            move.b (a0),d0
   155ca:	|  '----------- bne.w 15524 <pasteStringToBackdrop+0x2a>
   155ce:	|           ,-- bra.s 155d2 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   155d0:	'-----------|-> nop
    }
}
   155d2:	            '-> lea 12(sp),sp
   155d6:	                rts

000155d8 <stringWidth>:


int stringWidth (char * theText) {
   155d8:	       subq.l #8,sp
	int a = 0;
   155da:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   155de:	       clr.l (sp)

	if (! fontTableSize) return 0;
   155e0:	       move.l 1a8ac <fontTableSize>,d0
   155e6:	,----- bne.s 155ec <stringWidth+0x14>
   155e8:	|      moveq #0,d0
   155ea:	|  ,-- bra.s 155ee <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   155ec:	'--|-> move.l (sp),d0
}
   155ee:	   '-> addq.l #8,sp
   155f0:	       rts

000155f2 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   155f2:	       lea -16(sp),sp
   155f6:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   155f8:	       moveq #36,d0
   155fa:	       move.l d0,16(sp)
   155fe:	       clr.l 12(sp)
   15602:	       move.l 1a7a4 <SysBase>,d0
   15608:	       movea.l d0,a6
   1560a:	       move.l 16(sp),d0
   1560e:	       move.l 12(sp),d1
   15612:	       jsr -684(a6)
   15616:	       move.l d0,8(sp)
   1561a:	       move.l 8(sp),d0
   1561e:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15622:	   ,-- bne.s 1562a <addScreenRegion+0x38>
   15624:	   |   clr.w d0
   15626:	,--|-- bra.w 156aa <addScreenRegion+0xb8>
    newRegion->di = di;
   1562a:	|  '-> movea.l 4(sp),a0
   1562e:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15634:	|      movea.l 4(sp),a0
   15638:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1563c:	|      movea.l 4(sp),a0
   15640:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15646:	|      movea.l 4(sp),a0
   1564a:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15650:	|      movea.l 4(sp),a0
   15654:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   1565a:	|      movea.l 4(sp),a0
   1565e:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15664:	|      movea.l 4(sp),a0
   15668:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   1566e:	|      move.l 52(sp),-(sp)
   15672:	|      jsr d344 <loadObjectType>
   15678:	|      addq.l #4,sp
   1567a:	|      movea.l 4(sp),a0
   1567e:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15682:	|      move.l 1a8b4 <allScreenRegions>,d0
   15688:	|      movea.l 4(sp),a0
   1568c:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15690:	|      move.l 4(sp),1a8b4 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15698:	|      movea.l 4(sp),a0
   1569c:	|      move.l 28(a0),d0
   156a0:	|      sne d0
   156a2:	|      neg.b d0
   156a4:	|      move.b d0,d0
   156a6:	|      andi.w #255,d0
}
   156aa:	'----> movea.l (sp)+,a6
   156ac:	       lea 16(sp),sp
   156b0:	       rts

000156b2 <getOverRegion>:

void getOverRegion () {
   156b2:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   156b4:	             move.l 1a8b4 <allScreenRegions>,(sp)
	while (thisRegion) {
   156ba:	   ,-------- bra.s 15728 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   156bc:	,--|-------> move.l 1a760 <input+0xa>,d0
   156c2:	|  |         movea.l (sp),a0
   156c4:	|  |         movea.l (a0),a0
   156c6:	|  |         move.l 1a85e <cameraX>,d1
   156cc:	|  |         suba.l d1,a0
   156ce:	|  |         cmpa.l d0,a0
   156d0:	|  |  ,----- bgt.s 15722 <getOverRegion+0x70>
   156d2:	|  |  |      move.l 1a764 <input+0xe>,d0
   156d8:	|  |  |      movea.l (sp),a0
   156da:	|  |  |      movea.l 4(a0),a0
   156de:	|  |  |      move.l 1a862 <cameraY>,d1
   156e4:	|  |  |      suba.l d1,a0
   156e6:	|  |  |      cmpa.l d0,a0
   156e8:	|  |  +----- bgt.s 15722 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   156ea:	|  |  |      move.l 1a760 <input+0xa>,d0
   156f0:	|  |  |      movea.l (sp),a0
   156f2:	|  |  |      movea.l 8(a0),a0
   156f6:	|  |  |      move.l 1a85e <cameraX>,d1
   156fc:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   156fe:	|  |  |      cmpa.l d0,a0
   15700:	|  |  +----- blt.s 15722 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15702:	|  |  |      move.l 1a764 <input+0xe>,d0
   15708:	|  |  |      movea.l (sp),a0
   1570a:	|  |  |      movea.l 12(a0),a0
   1570e:	|  |  |      move.l 1a862 <cameraY>,d1
   15714:	|  |  |      suba.l d1,a0
   15716:	|  |  |      cmpa.l d0,a0
   15718:	|  |  +----- blt.s 15722 <getOverRegion+0x70>
			overRegion = thisRegion;
   1571a:	|  |  |      move.l (sp),1a8b8 <overRegion>
			return;
   15720:	|  |  |  ,-- bra.s 15734 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15722:	|  |  '--|-> movea.l (sp),a0
   15724:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15728:	|  '-----|-> tst.l (sp)
   1572a:	'--------|-- bne.s 156bc <getOverRegion+0xa>
	}
	overRegion = NULL;
   1572c:	         |   clr.l 1a8b8 <overRegion>
	return;
   15732:	         |   nop
}
   15734:	         '-> addq.l #4,sp
   15736:	             rts

00015738 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15738:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1573a:	             move.l 1a8b4 <allScreenRegions>,(sp)

	while (thisRegion) {
   15740:	   ,-------- bra.s 1575c <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15742:	,--|-------> movea.l (sp),a0
   15744:	|  |         movea.l 28(a0),a0
   15748:	|  |         move.l 4(a0),d0
   1574c:	|  |         cmp.l 8(sp),d0
   15750:	|  |     ,-- bne.s 15756 <getRegionForObject+0x1e>
			return thisRegion;
   15752:	|  |     |   move.l (sp),d0
   15754:	|  |  ,--|-- bra.s 15762 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15756:	|  |  |  '-> movea.l (sp),a0
   15758:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   1575c:	|  '--|----> tst.l (sp)
   1575e:	'-----|----- bne.s 15742 <getRegionForObject+0xa>
	}

	return NULL;
   15760:	      |      moveq #0,d0
}
   15762:	      '----> addq.l #4,sp
   15764:	             rts

00015766 <killAllRegions>:

void killAllRegions () {
   15766:	       subq.l #8,sp
   15768:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1576a:	   ,-- bra.s 157ac <killAllRegions+0x46>
		killRegion = allScreenRegions;
   1576c:	,--|-> move.l 1a8b4 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15774:	|  |   movea.l 1a8b4 <allScreenRegions>,a0
   1577a:	|  |   move.l 32(a0),d0
   1577e:	|  |   move.l d0,1a8b4 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15784:	|  |   movea.l 8(sp),a0
   15788:	|  |   move.l 28(a0),d0
   1578c:	|  |   move.l d0,-(sp)
   1578e:	|  |   jsr d5fc <removeObjectType>
   15794:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15796:	|  |   move.l 8(sp),4(sp)
   1579c:	|  |   move.l 1a7a4 <SysBase>,d0
   157a2:	|  |   movea.l d0,a6
   157a4:	|  |   movea.l 4(sp),a1
   157a8:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   157ac:	|  '-> move.l 1a8b4 <allScreenRegions>,d0
   157b2:	'----- bne.s 1576c <killAllRegions+0x6>
	}
	overRegion = NULL;
   157b4:	       clr.l 1a8b8 <overRegion>
}
   157ba:	       nop
   157bc:	       movea.l (sp)+,a6
   157be:	       addq.l #8,sp
   157c0:	       rts

000157c2 <loadRegions>:

void loadRegions (BPTR fp) {
   157c2:	       lea -24(sp),sp
   157c6:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   157c8:	       move.l 32(sp),-(sp)
   157cc:	       jsr 6bc <get2bytes>
   157d2:	       addq.l #4,sp
   157d4:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   157d8:	       move.l #108724,20(sp)

	while (numRegions --) {
   157e0:	   ,-- bra.w 158be <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   157e4:	,--|-> moveq #36,d0
   157e6:	|  |   move.l d0,16(sp)
   157ea:	|  |   clr.l 12(sp)
   157ee:	|  |   move.l 1a7a4 <SysBase>,d0
   157f4:	|  |   movea.l d0,a6
   157f6:	|  |   move.l 16(sp),d0
   157fa:	|  |   move.l 12(sp),d1
   157fe:	|  |   jsr -684(a6)
   15802:	|  |   move.l d0,8(sp)
   15806:	|  |   move.l 8(sp),d0
   1580a:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   1580e:	|  |   movea.l 20(sp),a0
   15812:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15816:	|  |   moveq #32,d1
   15818:	|  |   add.l 4(sp),d1
   1581c:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15820:	|  |   move.l 32(sp),-(sp)
   15824:	|  |   jsr 6bc <get2bytes>
   1582a:	|  |   addq.l #4,sp
   1582c:	|  |   movea.l 4(sp),a0
   15830:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15832:	|  |   move.l 32(sp),-(sp)
   15836:	|  |   jsr 6bc <get2bytes>
   1583c:	|  |   addq.l #4,sp
   1583e:	|  |   movea.l 4(sp),a0
   15842:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15846:	|  |   move.l 32(sp),-(sp)
   1584a:	|  |   jsr 6bc <get2bytes>
   15850:	|  |   addq.l #4,sp
   15852:	|  |   movea.l 4(sp),a0
   15856:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   1585a:	|  |   move.l 32(sp),-(sp)
   1585e:	|  |   jsr 6bc <get2bytes>
   15864:	|  |   addq.l #4,sp
   15866:	|  |   movea.l 4(sp),a0
   1586a:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   1586e:	|  |   move.l 32(sp),-(sp)
   15872:	|  |   jsr 6bc <get2bytes>
   15878:	|  |   addq.l #4,sp
   1587a:	|  |   movea.l 4(sp),a0
   1587e:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15882:	|  |   move.l 32(sp),-(sp)
   15886:	|  |   jsr 6bc <get2bytes>
   1588c:	|  |   addq.l #4,sp
   1588e:	|  |   movea.l 4(sp),a0
   15892:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15896:	|  |   move.l 32(sp),-(sp)
   1589a:	|  |   jsr 6bc <get2bytes>
   158a0:	|  |   addq.l #4,sp
   158a2:	|  |   movea.l 4(sp),a0
   158a6:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   158aa:	|  |   move.l 32(sp),-(sp)
   158ae:	|  |   jsr d2f2 <loadObjectRef>
   158b4:	|  |   addq.l #4,sp
   158b6:	|  |   movea.l 4(sp),a0
   158ba:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   158be:	|  '-> move.l 24(sp),d0
   158c2:	|      move.l d0,d1
   158c4:	|      subq.l #1,d1
   158c6:	|      move.l d1,24(sp)
   158ca:	|      tst.l d0
   158cc:	'----- bne.w 157e4 <loadRegions+0x22>
	}
	* pointy = NULL;
   158d0:	       movea.l 20(sp),a0
   158d4:	       clr.l (a0)
}
   158d6:	       nop
   158d8:	       movea.l (sp)+,a6
   158da:	       lea 24(sp),sp
   158de:	       rts

000158e0 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   158e0:	             lea -12(sp),sp
   158e4:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   158e6:	             move.l #108724,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   158ee:	   ,-------- bra.s 15968 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   158f0:	,--|-------> movea.l 12(sp),a0
   158f4:	|  |         movea.l (a0),a0
   158f6:	|  |         movea.l 28(a0),a0
   158fa:	|  |         move.l 4(a0),d0
   158fe:	|  |         cmp.l 20(sp),d0
   15902:	|  |  ,----- bne.s 1595a <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15904:	|  |  |      movea.l 12(sp),a0
   15908:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   1590c:	|  |  |      movea.l 8(sp),a0
   15910:	|  |  |      move.l 32(a0),d0
   15914:	|  |  |      movea.l 12(sp),a0
   15918:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   1591a:	|  |  |      movea.l 8(sp),a0
   1591e:	|  |  |      move.l 28(a0),d0
   15922:	|  |  |      move.l d0,-(sp)
   15924:	|  |  |      jsr d5fc <removeObjectType>
   1592a:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   1592c:	|  |  |      move.l 1a8b8 <overRegion>,d0
   15932:	|  |  |      cmp.l 8(sp),d0
   15936:	|  |  |  ,-- bne.s 1593e <removeScreenRegion+0x5e>
   15938:	|  |  |  |   clr.l 1a8b8 <overRegion>
            FreeVec(killMe);
   1593e:	|  |  |  '-> move.l 8(sp),4(sp)
   15944:	|  |  |      move.l 1a7a4 <SysBase>,d0
   1594a:	|  |  |      movea.l d0,a6
   1594c:	|  |  |      movea.l 4(sp),a1
   15950:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15954:	|  |  |      clr.l 8(sp)
   15958:	|  +--|----- bra.s 15968 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   1595a:	|  |  '----> movea.l 12(sp),a0
   1595e:	|  |         move.l (a0),d0
   15960:	|  |         moveq #32,d1
   15962:	|  |         add.l d0,d1
   15964:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15968:	|  '-------> movea.l 12(sp),a0
   1596c:	|            move.l (a0),d0
   1596e:	'----------- bne.s 158f0 <removeScreenRegion+0x10>
        }
    }
}
   15970:	             nop
   15972:	             nop
   15974:	             movea.l (sp)+,a6
   15976:	             lea 12(sp),sp
   1597a:	             rts

0001597c <saveRegions>:

void saveRegions (BPTR fp) {
   1597c:	       subq.l #8,sp
	int numRegions = 0;
   1597e:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15982:	       move.l 1a8b4 <allScreenRegions>,(sp)
	while (thisRegion) {
   15988:	   ,-- bra.s 15994 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   1598a:	,--|-> movea.l (sp),a0
   1598c:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15990:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15994:	|  '-> tst.l (sp)
   15996:	'----- bne.s 1598a <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15998:	       move.l 12(sp),-(sp)
   1599c:	       move.l 8(sp),-(sp)
   159a0:	       jsr 8d0 <put2bytes>
   159a6:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   159a8:	       move.l 1a8b4 <allScreenRegions>,(sp)
	while (thisRegion) {
   159ae:	,----- bra.w 15a56 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   159b2:	|  ,-> movea.l (sp),a0
   159b4:	|  |   move.l (a0),d0
   159b6:	|  |   move.l 12(sp),-(sp)
   159ba:	|  |   move.l d0,-(sp)
   159bc:	|  |   jsr 8d0 <put2bytes>
   159c2:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   159c4:	|  |   movea.l (sp),a0
   159c6:	|  |   move.l 4(a0),d0
   159ca:	|  |   move.l 12(sp),-(sp)
   159ce:	|  |   move.l d0,-(sp)
   159d0:	|  |   jsr 8d0 <put2bytes>
   159d6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   159d8:	|  |   movea.l (sp),a0
   159da:	|  |   move.l 8(a0),d0
   159de:	|  |   move.l 12(sp),-(sp)
   159e2:	|  |   move.l d0,-(sp)
   159e4:	|  |   jsr 8d0 <put2bytes>
   159ea:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   159ec:	|  |   movea.l (sp),a0
   159ee:	|  |   move.l 12(a0),d0
   159f2:	|  |   move.l 12(sp),-(sp)
   159f6:	|  |   move.l d0,-(sp)
   159f8:	|  |   jsr 8d0 <put2bytes>
   159fe:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15a00:	|  |   movea.l (sp),a0
   15a02:	|  |   move.l 16(a0),d0
   15a06:	|  |   move.l 12(sp),-(sp)
   15a0a:	|  |   move.l d0,-(sp)
   15a0c:	|  |   jsr 8d0 <put2bytes>
   15a12:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15a14:	|  |   movea.l (sp),a0
   15a16:	|  |   move.l 20(a0),d0
   15a1a:	|  |   move.l 12(sp),-(sp)
   15a1e:	|  |   move.l d0,-(sp)
   15a20:	|  |   jsr 8d0 <put2bytes>
   15a26:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15a28:	|  |   movea.l (sp),a0
   15a2a:	|  |   move.l 24(a0),d0
   15a2e:	|  |   move.l 12(sp),-(sp)
   15a32:	|  |   move.l d0,-(sp)
   15a34:	|  |   jsr 8d0 <put2bytes>
   15a3a:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15a3c:	|  |   movea.l (sp),a0
   15a3e:	|  |   move.l 28(a0),d0
   15a42:	|  |   move.l 12(sp),-(sp)
   15a46:	|  |   move.l d0,-(sp)
   15a48:	|  |   jsr d69c <saveObjectRef>
   15a4e:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15a50:	|  |   movea.l (sp),a0
   15a52:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15a56:	'--|-> tst.l (sp)
   15a58:	   '-- bne.w 159b2 <saveRegions+0x36>
	}
}
   15a5c:	       nop
   15a5e:	       nop
   15a60:	       addq.l #8,sp
   15a62:	       rts

00015a64 <showBoxes>:

void showBoxes () {
   15a64:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15a66:	       move.l 1a8b4 <allScreenRegions>,(sp)

	while (huntRegion) {
   15a6c:	,----- bra.w 15b08 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15a70:	|  ,-> movea.l (sp),a0
   15a72:	|  |   move.l 12(a0),d0
   15a76:	|  |   movea.l d0,a1
   15a78:	|  |   movea.l (sp),a0
   15a7a:	|  |   move.l 4(a0),d0
   15a7e:	|  |   move.l d0,d1
   15a80:	|  |   movea.l (sp),a0
   15a82:	|  |   move.l (a0),d0
   15a84:	|  |   move.l a1,-(sp)
   15a86:	|  |   move.l d1,-(sp)
   15a88:	|  |   move.l d0,-(sp)
   15a8a:	|  |   jsr cf80 <drawVerticalLine>
   15a90:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15a94:	|  |   movea.l (sp),a0
   15a96:	|  |   move.l 12(a0),d0
   15a9a:	|  |   movea.l d0,a1
   15a9c:	|  |   movea.l (sp),a0
   15a9e:	|  |   move.l 4(a0),d0
   15aa2:	|  |   move.l d0,d1
   15aa4:	|  |   movea.l (sp),a0
   15aa6:	|  |   move.l 8(a0),d0
   15aaa:	|  |   move.l a1,-(sp)
   15aac:	|  |   move.l d1,-(sp)
   15aae:	|  |   move.l d0,-(sp)
   15ab0:	|  |   jsr cf80 <drawVerticalLine>
   15ab6:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15aba:	|  |   movea.l (sp),a0
   15abc:	|  |   move.l 8(a0),d0
   15ac0:	|  |   movea.l d0,a1
   15ac2:	|  |   movea.l (sp),a0
   15ac4:	|  |   move.l 4(a0),d0
   15ac8:	|  |   move.l d0,d1
   15aca:	|  |   movea.l (sp),a0
   15acc:	|  |   move.l (a0),d0
   15ace:	|  |   move.l a1,-(sp)
   15ad0:	|  |   move.l d1,-(sp)
   15ad2:	|  |   move.l d0,-(sp)
   15ad4:	|  |   jsr cf5a <drawHorizontalLine>
   15ada:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15ade:	|  |   movea.l (sp),a0
   15ae0:	|  |   move.l 8(a0),d0
   15ae4:	|  |   movea.l d0,a1
   15ae6:	|  |   movea.l (sp),a0
   15ae8:	|  |   move.l 12(a0),d0
   15aec:	|  |   move.l d0,d1
   15aee:	|  |   movea.l (sp),a0
   15af0:	|  |   move.l (a0),d0
   15af2:	|  |   move.l a1,-(sp)
   15af4:	|  |   move.l d1,-(sp)
   15af6:	|  |   move.l d0,-(sp)
   15af8:	|  |   jsr cf5a <drawHorizontalLine>
   15afe:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15b02:	|  |   movea.l (sp),a0
   15b04:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15b08:	'--|-> tst.l (sp)
   15b0a:	   '-- bne.w 15a70 <showBoxes+0xc>
	}
   15b0e:	       nop
   15b10:	       nop
   15b12:	       addq.l #4,sp
   15b14:	       rts

00015b16 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15b16:	       lea -88(sp),sp
   15b1a:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15b1c:	       move.l 1a7a4 <SysBase>,d0
   15b22:	       movea.l d0,a6
   15b24:	       jsr -666(a6)
   15b28:	       move.l d0,88(sp)
   15b2c:	       move.l 88(sp),d0
   15b30:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15b34:	       move.l 84(sp),80(sp)
   15b3a:	       moveq #40,d0
   15b3c:	       move.l d0,76(sp)
   15b40:	       move.l 1a7a4 <SysBase>,d0
   15b46:	       movea.l d0,a6
   15b48:	       movea.l 80(sp),a0
   15b4c:	       move.l 76(sp),d0
   15b50:	       jsr -654(a6)
   15b54:	       move.l d0,72(sp)
   15b58:	       move.l 72(sp),d0
   15b5c:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15b60:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15b66:	       move.l #105685,60(sp)
   15b6e:	       clr.l 56(sp)
   15b72:	       move.l 64(sp),52(sp)
   15b78:	       clr.l 48(sp)
   15b7c:	       move.l 1a7a4 <SysBase>,d0
   15b82:	       movea.l d0,a6
   15b84:	       movea.l 60(sp),a0
   15b88:	       move.l 56(sp),d0
   15b8c:	       movea.l 52(sp),a1
   15b90:	       move.l 48(sp),d1
   15b94:	       jsr -444(a6)
   15b98:	       move.b d0,47(sp)
   15b9c:	       move.b 47(sp),d0
   15ba0:	   ,-- beq.s 15bb6 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15ba2:	   |   pea 19ce2 <graphics.c.7a652652+0xef>
   15ba8:	   |   jsr 16f3a <KPrintF>
   15bae:	   |   addq.l #4,sp
        return 0;
   15bb0:	   |   moveq #0,d0
   15bb2:	,--|-- bra.w 15c70 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15bb6:	|  '-> movea.l 64(sp),a0
   15bba:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15bc0:	|      lea 92(sp),a0
   15bc4:	|      lea -86(a0),a0
   15bc8:	|      move.l a0,38(sp)
   15bcc:	|      movea.l 42(sp),a6
   15bd0:	|      movea.l 38(sp),a0
   15bd4:	|      jsr -60(a6)
   15bd8:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15bdc:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15be2:	|      move.l #1103515245,-(sp)
   15be8:	|      move.l 34(sp),-(sp)
   15bec:	|      jsr 178c6 <__mulsi3>
   15bf2:	|      addq.l #8,sp
   15bf4:	|      addi.l #12345,d0
   15bfa:	|      move.l d0,d1
   15bfc:	|      bclr #31,d1
   15c00:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15c04:	|      move.l 30(sp),d0
   15c08:	|      pea 64 <_start+0x64>
   15c0c:	|      move.l d0,-(sp)
   15c0e:	|      jsr 179a0 <__umodsi3>
   15c14:	|      addq.l #8,sp
   15c16:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15c1a:	|      move.l 26(sp),-(sp)
   15c1e:	|      pea 19cff <graphics.c.7a652652+0x10c>
   15c24:	|      jsr 16f3a <KPrintF>
   15c2a:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15c2c:	|      move.l 64(sp),22(sp)
   15c32:	|      move.l 1a7a4 <SysBase>,d0
   15c38:	|      movea.l d0,a6
   15c3a:	|      movea.l 22(sp),a1
   15c3e:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15c42:	|      move.l 64(sp),18(sp)
   15c48:	|      move.l 1a7a4 <SysBase>,d0
   15c4e:	|      movea.l d0,a6
   15c50:	|      movea.l 18(sp),a0
   15c54:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15c58:	|      move.l 84(sp),14(sp)
   15c5e:	|      move.l 1a7a4 <SysBase>,d0
   15c64:	|      movea.l d0,a6
   15c66:	|      movea.l 14(sp),a0
   15c6a:	|      jsr -672(a6)
    return 0;
   15c6e:	|      moveq #0,d0
   15c70:	'----> movea.l (sp)+,a6
   15c72:	       lea 88(sp),sp
   15c76:	       rts

00015c78 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15c78:	             lea -20(sp),sp
   15c7c:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15c7e:	             move.l 1a8bc <allLoadedBanks>,20(sp)
	while (returnMe) {
   15c86:	      ,----- bra.s 15cb8 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15c88:	   ,--|----> movea.l 20(sp),a0
   15c8c:	   |  |      move.l (a0),d0
   15c8e:	   |  |      cmp.l 28(sp),d0
   15c92:	   |  |  ,-- bne.s 15cae <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15c94:	   |  |  |   movea.l 20(sp),a0
   15c98:	   |  |  |   move.l 4(a0),d0
   15c9c:	   |  |  |   addq.l #1,d0
   15c9e:	   |  |  |   movea.l 20(sp),a0
   15ca2:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15ca6:	   |  |  |   move.l 20(sp),d0
   15caa:	,--|--|--|-- bra.w 15d4c <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   15cae:	|  |  |  '-> movea.l 20(sp),a0
   15cb2:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15cb8:	|  |  '----> tst.l 20(sp)
   15cbc:	|  '-------- bne.s 15c88 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15cbe:	|            moveq #26,d0
   15cc0:	|            move.l d0,16(sp)
   15cc4:	|            clr.l 12(sp)
   15cc8:	|            move.l 1a7a4 <SysBase>,d0
   15cce:	|            movea.l d0,a6
   15cd0:	|            move.l 16(sp),d0
   15cd4:	|            move.l 12(sp),d1
   15cd8:	|            jsr -684(a6)
   15cdc:	|            move.l d0,8(sp)
   15ce0:	|            move.l 8(sp),d0
   15ce4:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15ce8:	|     ,----- beq.s 15d4a <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   15cea:	|     |      movea.l 20(sp),a0
   15cee:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   15cf2:	|     |      move.l 20(sp),d0
   15cf6:	|     |      addq.l #8,d0
   15cf8:	|     |      move.l d0,-(sp)
   15cfa:	|     |      move.l 32(sp),-(sp)
   15cfe:	|     |      jsr 8820 <loadSpriteBank>
   15d04:	|     |      addq.l #8,sp
   15d06:	|     |      tst.w d0
   15d08:	|     |  ,-- beq.s 15d30 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   15d0a:	|     |  |   movea.l 20(sp),a0
   15d0e:	|     |  |   moveq #1,d0
   15d10:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   15d14:	|     |  |   move.l 1a8bc <allLoadedBanks>,d0
   15d1a:	|     |  |   movea.l 20(sp),a0
   15d1e:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   15d22:	|     |  |   move.l 20(sp),1a8bc <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   15d2a:	|     |  |   move.l 20(sp),d0
   15d2e:	+-----|--|-- bra.s 15d4c <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   15d30:	|     |  '-> move.l 20(sp),4(sp)
   15d36:	|     |      move.l 1a7a4 <SysBase>,d0
   15d3c:	|     |      movea.l d0,a6
   15d3e:	|     |      movea.l 4(sp),a1
   15d42:	|     |      jsr -690(a6)
			return NULL;
   15d46:	|     |      moveq #0,d0
   15d48:	+-----|----- bra.s 15d4c <loadBankForAnim+0xd4>
		}
	} else return NULL;
   15d4a:	|     '----> moveq #0,d0
}
   15d4c:	'----------> movea.l (sp)+,a6
   15d4e:	             lea 20(sp),sp
   15d52:	             rts

00015d54 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   15d54:	       lea -60(sp),sp
   15d58:	       move.l d3,-(sp)
   15d5a:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   15d5c:	       move.l 88(sp),d0
   15d60:	       sub.l 80(sp),d0
   15d64:	       move.l d0,-(sp)
   15d66:	       jsr 1732c <__floatsidf>
   15d6c:	       addq.l #4,sp
   15d6e:	       move.l d0,32(sp)
   15d72:	       move.l d1,36(sp)
   15d76:	       move.l 32(sp),60(sp)
   15d7c:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   15d82:	       move.l 92(sp),d0
   15d86:	       sub.l 84(sp),d0
   15d8a:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   15d8e:	       move.l 96(sp),d0
   15d92:	       sub.l 80(sp),d0
   15d96:	       move.l d0,-(sp)
   15d98:	       jsr 1732c <__floatsidf>
   15d9e:	       addq.l #4,sp
   15da0:	       move.l 64(sp),-(sp)
   15da4:	       move.l 64(sp),-(sp)
   15da8:	       move.l d1,-(sp)
   15daa:	       move.l d0,-(sp)
   15dac:	       jsr 173bc <__muldf3>
   15db2:	       lea 16(sp),sp
   15db6:	       move.l d0,d2
   15db8:	       move.l d1,d3
   15dba:	       move.l 100(sp),d0
   15dbe:	       sub.l 84(sp),d0
   15dc2:	       move.l 56(sp),-(sp)
   15dc6:	       move.l d0,-(sp)
   15dc8:	       jsr 178c6 <__mulsi3>
   15dce:	       addq.l #8,sp
   15dd0:	       move.l d0,-(sp)
   15dd2:	       jsr 1732c <__floatsidf>
   15dd8:	       addq.l #4,sp
   15dda:	       move.l d1,-(sp)
   15ddc:	       move.l d0,-(sp)
   15dde:	       move.l d3,-(sp)
   15de0:	       move.l d2,-(sp)
   15de2:	       jsr 1715e <__adddf3>
   15de8:	       lea 16(sp),sp
   15dec:	       move.l d0,24(sp)
   15df0:	       move.l d1,28(sp)
   15df4:	       move.l 24(sp),48(sp)
   15dfa:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   15e00:	       move.l 64(sp),-(sp)
   15e04:	       move.l 64(sp),-(sp)
   15e08:	       move.l 72(sp),-(sp)
   15e0c:	       move.l 72(sp),-(sp)
   15e10:	       jsr 173bc <__muldf3>
   15e16:	       lea 16(sp),sp
   15e1a:	       move.l d0,d2
   15e1c:	       move.l d1,d3
   15e1e:	       move.l 56(sp),-(sp)
   15e22:	       move.l 60(sp),-(sp)
   15e26:	       jsr 178c6 <__mulsi3>
   15e2c:	       addq.l #8,sp
   15e2e:	       move.l d0,-(sp)
   15e30:	       jsr 1732c <__floatsidf>
   15e36:	       addq.l #4,sp
   15e38:	       move.l d1,-(sp)
   15e3a:	       move.l d0,-(sp)
   15e3c:	       move.l d3,-(sp)
   15e3e:	       move.l d2,-(sp)
   15e40:	       jsr 1715e <__adddf3>
   15e46:	       lea 16(sp),sp
   15e4a:	       move.l d1,-(sp)
   15e4c:	       move.l d0,-(sp)
   15e4e:	       move.l 60(sp),-(sp)
   15e52:	       move.l 60(sp),-(sp)
   15e56:	       jsr 171c0 <__divdf3>
   15e5c:	       lea 16(sp),sp
   15e60:	       move.l d0,16(sp)
   15e64:	       move.l d1,20(sp)
   15e68:	       move.l 16(sp),48(sp)
   15e6e:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   15e74:	       clr.l -(sp)
   15e76:	       clr.l -(sp)
   15e78:	       move.l 60(sp),-(sp)
   15e7c:	       move.l 60(sp),-(sp)
   15e80:	       jsr 17544 <__ltdf2>
   15e86:	       lea 16(sp),sp
   15e8a:	       tst.l d0
   15e8c:	   ,-- bge.s 15ea2 <closestPointOnLine+0x14e>
		*closestX = x1;
   15e8e:	   |   movea.l 72(sp),a0
   15e92:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   15e96:	   |   movea.l 76(sp),a0
   15e9a:	   |   move.l 84(sp),(a0)
   15e9e:	,--|-- bra.w 15f70 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   15ea2:	|  '-> clr.l -(sp)
   15ea4:	|      move.l #1072693248,-(sp)
   15eaa:	|      move.l 60(sp),-(sp)
   15eae:	|      move.l 60(sp),-(sp)
   15eb2:	|      jsr 1748a <__gtdf2>
   15eb8:	|      lea 16(sp),sp
   15ebc:	|      tst.l d0
   15ebe:	|  ,-- ble.s 15ed4 <closestPointOnLine+0x180>
		*closestX = x2;
   15ec0:	|  |   movea.l 72(sp),a0
   15ec4:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   15ec8:	|  |   movea.l 76(sp),a0
   15ecc:	|  |   move.l 92(sp),(a0)
   15ed0:	+--|-- bra.w 15f70 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   15ed4:	|  '-> move.l 64(sp),-(sp)
   15ed8:	|      move.l 64(sp),-(sp)
   15edc:	|      move.l 60(sp),-(sp)
   15ee0:	|      move.l 60(sp),-(sp)
   15ee4:	|      jsr 173bc <__muldf3>
   15eea:	|      lea 16(sp),sp
   15eee:	|      move.l d0,8(sp)
   15ef2:	|      move.l d1,12(sp)
   15ef6:	|      move.l 8(sp),40(sp)
   15efc:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   15f02:	|      move.l 44(sp),-(sp)
   15f06:	|      move.l 44(sp),-(sp)
   15f0a:	|      jsr 172ce <__fixdfsi>
   15f10:	|      addq.l #8,sp
   15f12:	|      movea.l 72(sp),a0
   15f16:	|      move.l d0,(a0)
		*closestX += x1;
   15f18:	|      movea.l 72(sp),a0
   15f1c:	|      move.l (a0),d0
   15f1e:	|      add.l 80(sp),d0
   15f22:	|      movea.l 72(sp),a0
   15f26:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   15f28:	|      move.l 56(sp),-(sp)
   15f2c:	|      jsr 1732c <__floatsidf>
   15f32:	|      addq.l #4,sp
   15f34:	|      move.l 52(sp),-(sp)
   15f38:	|      move.l 52(sp),-(sp)
   15f3c:	|      move.l d1,-(sp)
   15f3e:	|      move.l d0,-(sp)
   15f40:	|      jsr 173bc <__muldf3>
   15f46:	|      lea 16(sp),sp
   15f4a:	|      move.l d1,-(sp)
   15f4c:	|      move.l d0,-(sp)
   15f4e:	|      jsr 172ce <__fixdfsi>
   15f54:	|      addq.l #8,sp
   15f56:	|      movea.l 76(sp),a0
   15f5a:	|      move.l d0,(a0)
		*closestY += y1;
   15f5c:	|      movea.l 76(sp),a0
   15f60:	|      move.l (a0),d0
   15f62:	|      add.l 84(sp),d0
   15f66:	|      movea.l 76(sp),a0
   15f6a:	|      move.l d0,(a0)
		return TRUE;
   15f6c:	|      moveq #1,d0
   15f6e:	|  ,-- bra.s 15f72 <closestPointOnLine+0x21e>
	}
	return FALSE;
   15f70:	'--|-> clr.w d0
}
   15f72:	   '-> move.l (sp)+,d2
   15f74:	       move.l (sp)+,d3
   15f76:	       lea 60(sp),sp
   15f7a:	       rts

00015f7c <drawFloor>:

void drawFloor() {
   15f7c:	                lea -12(sp),sp
   15f80:	                move.l d3,-(sp)
   15f82:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   15f84:	                clr.l 16(sp)
   15f88:	   ,----------- bra.w 1619c <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   15f8c:	,--|----------> movea.l 1a8c0 <currentFloor>,a0
   15f92:	|  |            move.l 12(a0),d1
   15f96:	|  |            move.l 16(sp),d0
   15f9a:	|  |            lsl.l #3,d0
   15f9c:	|  |            movea.l d1,a0
   15f9e:	|  |            adda.l d0,a0
   15fa0:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   15fa4:	|  |            moveq #1,d0
   15fa6:	|  |            cmp.l 8(sp),d0
   15faa:	|  |  ,-------- bge.w 16198 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   15fae:	|  |  |         moveq #1,d0
   15fb0:	|  |  |         move.l d0,12(sp)
   15fb4:	|  |  |     ,-- bra.w 160ae <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   15fb8:	|  |  |  ,--|-> movea.l 1a8c0 <currentFloor>,a0
   15fbe:	|  |  |  |  |   move.l 4(a0),d1
   15fc2:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   15fc8:	|  |  |  |  |   movea.l 12(a0),a0
   15fcc:	|  |  |  |  |   move.l 16(sp),d0
   15fd0:	|  |  |  |  |   lsl.l #3,d0
   15fd2:	|  |  |  |  |   adda.l d0,a0
   15fd4:	|  |  |  |  |   movea.l 4(a0),a0
   15fd8:	|  |  |  |  |   move.l 12(sp),d0
   15fdc:	|  |  |  |  |   add.l d0,d0
   15fde:	|  |  |  |  |   add.l d0,d0
   15fe0:	|  |  |  |  |   adda.l d0,a0
   15fe2:	|  |  |  |  |   move.l (a0),d0
   15fe4:	|  |  |  |  |   lsl.l #3,d0
   15fe6:	|  |  |  |  |   movea.l d1,a0
   15fe8:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   15fea:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   15fee:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   15ff4:	|  |  |  |  |   move.l 4(a0),d1
   15ff8:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   15ffe:	|  |  |  |  |   movea.l 12(a0),a0
   16002:	|  |  |  |  |   move.l 16(sp),d0
   16006:	|  |  |  |  |   lsl.l #3,d0
   16008:	|  |  |  |  |   adda.l d0,a0
   1600a:	|  |  |  |  |   movea.l 4(a0),a0
   1600e:	|  |  |  |  |   move.l 12(sp),d0
   16012:	|  |  |  |  |   add.l d0,d0
   16014:	|  |  |  |  |   add.l d0,d0
   16016:	|  |  |  |  |   adda.l d0,a0
   16018:	|  |  |  |  |   move.l (a0),d0
   1601a:	|  |  |  |  |   lsl.l #3,d0
   1601c:	|  |  |  |  |   movea.l d1,a0
   1601e:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16020:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   16022:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16028:	|  |  |  |  |   move.l 4(a0),d1
   1602c:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16032:	|  |  |  |  |   movea.l 12(a0),a0
   16036:	|  |  |  |  |   move.l 16(sp),d0
   1603a:	|  |  |  |  |   lsl.l #3,d0
   1603c:	|  |  |  |  |   adda.l d0,a0
   1603e:	|  |  |  |  |   movea.l 4(a0),a0
   16042:	|  |  |  |  |   move.l 12(sp),d0
   16046:	|  |  |  |  |   addi.l #1073741823,d0
   1604c:	|  |  |  |  |   add.l d0,d0
   1604e:	|  |  |  |  |   add.l d0,d0
   16050:	|  |  |  |  |   adda.l d0,a0
   16052:	|  |  |  |  |   move.l (a0),d0
   16054:	|  |  |  |  |   lsl.l #3,d0
   16056:	|  |  |  |  |   movea.l d1,a0
   16058:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1605a:	|  |  |  |  |   move.l 4(a0),d1
   1605e:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16064:	|  |  |  |  |   move.l 4(a0),d3
   16068:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   1606e:	|  |  |  |  |   movea.l 12(a0),a0
   16072:	|  |  |  |  |   move.l 16(sp),d0
   16076:	|  |  |  |  |   lsl.l #3,d0
   16078:	|  |  |  |  |   adda.l d0,a0
   1607a:	|  |  |  |  |   movea.l 4(a0),a0
   1607e:	|  |  |  |  |   move.l 12(sp),d0
   16082:	|  |  |  |  |   addi.l #1073741823,d0
   16088:	|  |  |  |  |   add.l d0,d0
   1608a:	|  |  |  |  |   add.l d0,d0
   1608c:	|  |  |  |  |   adda.l d0,a0
   1608e:	|  |  |  |  |   move.l (a0),d0
   16090:	|  |  |  |  |   lsl.l #3,d0
   16092:	|  |  |  |  |   movea.l d3,a0
   16094:	|  |  |  |  |   adda.l d0,a0
   16096:	|  |  |  |  |   move.l (a0),d0
   16098:	|  |  |  |  |   move.l d2,-(sp)
   1609a:	|  |  |  |  |   move.l a1,-(sp)
   1609c:	|  |  |  |  |   move.l d1,-(sp)
   1609e:	|  |  |  |  |   move.l d0,-(sp)
   160a0:	|  |  |  |  |   jsr 3b1a <drawLine>
   160a6:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   160aa:	|  |  |  |  |   addq.l #1,12(sp)
   160ae:	|  |  |  |  '-> move.l 12(sp),d0
   160b2:	|  |  |  |      cmp.l 8(sp),d0
   160b6:	|  |  |  '----- blt.w 15fb8 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   160ba:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   160c0:	|  |  |         move.l 4(a0),d1
   160c4:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   160ca:	|  |  |         movea.l 12(a0),a0
   160ce:	|  |  |         move.l 16(sp),d0
   160d2:	|  |  |         lsl.l #3,d0
   160d4:	|  |  |         adda.l d0,a0
   160d6:	|  |  |         movea.l 4(a0),a0
   160da:	|  |  |         move.l 8(sp),d0
   160de:	|  |  |         addi.l #1073741823,d0
   160e4:	|  |  |         add.l d0,d0
   160e6:	|  |  |         add.l d0,d0
   160e8:	|  |  |         adda.l d0,a0
   160ea:	|  |  |         move.l (a0),d0
   160ec:	|  |  |         lsl.l #3,d0
   160ee:	|  |  |         movea.l d1,a0
   160f0:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   160f2:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   160f6:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   160fc:	|  |  |         move.l 4(a0),d1
   16100:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   16106:	|  |  |         movea.l 12(a0),a0
   1610a:	|  |  |         move.l 16(sp),d0
   1610e:	|  |  |         lsl.l #3,d0
   16110:	|  |  |         adda.l d0,a0
   16112:	|  |  |         movea.l 4(a0),a0
   16116:	|  |  |         move.l 8(sp),d0
   1611a:	|  |  |         addi.l #1073741823,d0
   16120:	|  |  |         add.l d0,d0
   16122:	|  |  |         add.l d0,d0
   16124:	|  |  |         adda.l d0,a0
   16126:	|  |  |         move.l (a0),d0
   16128:	|  |  |         lsl.l #3,d0
   1612a:	|  |  |         movea.l d1,a0
   1612c:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1612e:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   16130:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   16136:	|  |  |         move.l 4(a0),d1
   1613a:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   16140:	|  |  |         movea.l 12(a0),a0
   16144:	|  |  |         move.l 16(sp),d0
   16148:	|  |  |         lsl.l #3,d0
   1614a:	|  |  |         adda.l d0,a0
   1614c:	|  |  |         movea.l 4(a0),a0
   16150:	|  |  |         move.l (a0),d0
   16152:	|  |  |         lsl.l #3,d0
   16154:	|  |  |         movea.l d1,a0
   16156:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16158:	|  |  |         move.l 4(a0),d1
   1615c:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   16162:	|  |  |         move.l 4(a0),d3
   16166:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   1616c:	|  |  |         movea.l 12(a0),a0
   16170:	|  |  |         move.l 16(sp),d0
   16174:	|  |  |         lsl.l #3,d0
   16176:	|  |  |         adda.l d0,a0
   16178:	|  |  |         movea.l 4(a0),a0
   1617c:	|  |  |         move.l (a0),d0
   1617e:	|  |  |         lsl.l #3,d0
   16180:	|  |  |         movea.l d3,a0
   16182:	|  |  |         adda.l d0,a0
   16184:	|  |  |         move.l (a0),d0
   16186:	|  |  |         move.l d2,-(sp)
   16188:	|  |  |         move.l a1,-(sp)
   1618a:	|  |  |         move.l d1,-(sp)
   1618c:	|  |  |         move.l d0,-(sp)
   1618e:	|  |  |         jsr 3b1a <drawLine>
   16194:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16198:	|  |  '-------> addq.l #1,16(sp)
   1619c:	|  '----------> movea.l 1a8c0 <currentFloor>,a0
   161a2:	|               move.l 8(a0),d0
   161a6:	|               cmp.l 16(sp),d0
   161aa:	'-------------- bgt.w 15f8c <drawFloor+0x10>
        }
    }
}
   161ae:	                nop
   161b0:	                nop
   161b2:	                move.l (sp)+,d2
   161b4:	                move.l (sp)+,d3
   161b6:	                lea 12(sp),sp
   161ba:	                rts

000161bc <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   161bc:	                      lea -12(sp),sp
    int sharedVertices = 0;
   161c0:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   161c4:	                      clr.l 4(sp)
   161c8:	   ,----------------- bra.w 1625a <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   161cc:	,--|----------------> clr.l (sp)
   161ce:	|  |     ,----------- bra.s 1624a <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   161d0:	|  |  ,--|----------> movea.l 16(sp),a0
   161d4:	|  |  |  |            move.l 4(a0),d1
   161d8:	|  |  |  |            move.l 4(sp),d0
   161dc:	|  |  |  |            add.l d0,d0
   161de:	|  |  |  |            add.l d0,d0
   161e0:	|  |  |  |            movea.l d1,a0
   161e2:	|  |  |  |            adda.l d0,a0
   161e4:	|  |  |  |            move.l (a0),d1
   161e6:	|  |  |  |            movea.l 20(sp),a0
   161ea:	|  |  |  |            movea.l 4(a0),a0
   161ee:	|  |  |  |            move.l (sp),d0
   161f0:	|  |  |  |            add.l d0,d0
   161f2:	|  |  |  |            add.l d0,d0
   161f4:	|  |  |  |            adda.l d0,a0
   161f6:	|  |  |  |            move.l (a0),d0
   161f8:	|  |  |  |            cmp.l d1,d0
   161fa:	|  |  |  |  ,-------- bne.s 16248 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   161fc:	|  |  |  |  |         move.l 8(sp),d0
   16200:	|  |  |  |  |         move.l d0,d1
   16202:	|  |  |  |  |         addq.l #1,d1
   16204:	|  |  |  |  |         move.l d1,8(sp)
   16208:	|  |  |  |  |         tst.l d0
   1620a:	|  |  |  |  |     ,-- beq.s 1622c <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   1620c:	|  |  |  |  |     |   movea.l 16(sp),a0
   16210:	|  |  |  |  |     |   move.l 4(a0),d1
   16214:	|  |  |  |  |     |   move.l 4(sp),d0
   16218:	|  |  |  |  |     |   add.l d0,d0
   1621a:	|  |  |  |  |     |   add.l d0,d0
   1621c:	|  |  |  |  |     |   movea.l d1,a0
   1621e:	|  |  |  |  |     |   adda.l d0,a0
   16220:	|  |  |  |  |     |   move.l (a0),d0
   16222:	|  |  |  |  |     |   movea.l 28(sp),a0
   16226:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16228:	|  |  |  |  |     |   moveq #1,d0
   1622a:	|  |  |  |  |  ,--|-- bra.s 1626a <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   1622c:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   16230:	|  |  |  |  |  |      move.l 4(a0),d1
   16234:	|  |  |  |  |  |      move.l 4(sp),d0
   16238:	|  |  |  |  |  |      add.l d0,d0
   1623a:	|  |  |  |  |  |      add.l d0,d0
   1623c:	|  |  |  |  |  |      movea.l d1,a0
   1623e:	|  |  |  |  |  |      adda.l d0,a0
   16240:	|  |  |  |  |  |      move.l (a0),d0
   16242:	|  |  |  |  |  |      movea.l 24(sp),a0
   16246:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   16248:	|  |  |  |  '--|----> addq.l #1,(sp)
   1624a:	|  |  |  '-----|----> movea.l 20(sp),a0
   1624e:	|  |  |        |      move.l (a0),d0
   16250:	|  |  |        |      cmp.l (sp),d0
   16252:	|  |  '--------|----- bgt.w 161d0 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16256:	|  |           |      addq.l #1,4(sp)
   1625a:	|  '-----------|----> movea.l 16(sp),a0
   1625e:	|              |      move.l (a0),d0
   16260:	|              |      cmp.l 4(sp),d0
   16264:	'--------------|----- bgt.w 161cc <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   16268:	               |      clr.w d0
}
   1626a:	               '----> lea 12(sp),sp
   1626e:	                      rts

00016270 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   16270:	movea.l 1a8c0 <currentFloor>,a0
   16276:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   1627a:	movea.l 1a8c0 <currentFloor>,a0
   16280:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   16284:	movea.l 1a8c0 <currentFloor>,a0
   1628a:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   1628e:	movea.l 1a8c0 <currentFloor>,a0
   16294:	clr.l 16(a0)
}
   16298:	nop
   1629a:	rts

0001629c <inFloor>:

int inFloor (int x, int y) {
   1629c:	          subq.l #8,sp
	int i, r = -1;
   1629e:	          moveq #-1,d0
   162a0:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   162a2:	          clr.l 4(sp)
   162a6:	   ,----- bra.s 162da <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   162a8:	,--|----> movea.l 1a8c0 <currentFloor>,a0
   162ae:	|  |      move.l 12(a0),d1
   162b2:	|  |      move.l 4(sp),d0
   162b6:	|  |      lsl.l #3,d0
   162b8:	|  |      add.l d1,d0
   162ba:	|  |      move.l 16(sp),-(sp)
   162be:	|  |      move.l 16(sp),-(sp)
   162c2:	|  |      move.l d0,-(sp)
   162c4:	|  |      jsr 164a6 <pointInFloorPolygon>
   162ca:	|  |      lea 12(sp),sp
   162ce:	|  |      tst.w d0
   162d0:	|  |  ,-- beq.s 162d6 <inFloor+0x3a>
			r = i;
   162d2:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   162d6:	|  |  '-> addq.l #1,4(sp)
   162da:	|  '----> movea.l 1a8c0 <currentFloor>,a0
   162e0:	|         move.l 8(a0),d0
   162e4:	|         cmp.l 4(sp),d0
   162e8:	'-------- bgt.s 162a8 <inFloor+0xc>

	return r;
   162ea:	          move.l (sp),d0
}
   162ec:	          addq.l #8,sp
   162ee:	          rts

000162f0 <initFloor>:

BOOL initFloor () {
   162f0:	       lea -12(sp),sp
   162f4:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   162f6:	       moveq #20,d0
   162f8:	       move.l d0,12(sp)
   162fc:	       clr.l 8(sp)
   16300:	       move.l 1a7a4 <SysBase>,d0
   16306:	       movea.l d0,a6
   16308:	       move.l 12(sp),d0
   1630c:	       move.l 8(sp),d1
   16310:	       jsr -684(a6)
   16314:	       move.l d0,4(sp)
   16318:	       move.l 4(sp),d0
   1631c:	       move.l d0,1a8c0 <currentFloor>

    if(currentFloor == 0) {
   16322:	       move.l 1a8c0 <currentFloor>,d0
   16328:	,----- bne.s 1633c <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   1632a:	|      pea 19d12 <graphics.c.7a652652+0x11f>
   16330:	|      jsr 16f3a <KPrintF>
   16336:	|      addq.l #4,sp
        return FALSE;
   16338:	|      clr.w d0
   1633a:	|  ,-- bra.s 16344 <initFloor+0x54>
    }

	noFloor ();
   1633c:	'--|-> jsr 16270 <noFloor>
	return TRUE;
   16342:	   |   moveq #1,d0
}
   16344:	   '-> movea.l (sp)+,a6
   16346:	       lea 12(sp),sp
   1634a:	       rts

0001634c <killFloor>:

void killFloor () {
   1634c:	       lea -24(sp),sp
   16350:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16352:	       clr.l 24(sp)
   16356:	   ,-- bra.s 163b0 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16358:	,--|-> movea.l 1a8c0 <currentFloor>,a0
   1635e:	|  |   move.l 12(a0),d1
   16362:	|  |   move.l 24(sp),d0
   16366:	|  |   lsl.l #3,d0
   16368:	|  |   movea.l d1,a0
   1636a:	|  |   adda.l d0,a0
   1636c:	|  |   move.l 4(a0),8(sp)
   16372:	|  |   move.l 1a7a4 <SysBase>,d0
   16378:	|  |   movea.l d0,a6
   1637a:	|  |   movea.l 8(sp),a1
   1637e:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   16382:	|  |   movea.l 1a8c0 <currentFloor>,a0
   16388:	|  |   move.l 16(a0),d1
   1638c:	|  |   move.l 24(sp),d0
   16390:	|  |   add.l d0,d0
   16392:	|  |   add.l d0,d0
   16394:	|  |   movea.l d1,a0
   16396:	|  |   adda.l d0,a0
   16398:	|  |   move.l (a0),4(sp)
   1639c:	|  |   move.l 1a7a4 <SysBase>,d0
   163a2:	|  |   movea.l d0,a6
   163a4:	|  |   movea.l 4(sp),a1
   163a8:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   163ac:	|  |   addq.l #1,24(sp)
   163b0:	|  '-> movea.l 1a8c0 <currentFloor>,a0
   163b6:	|      move.l 8(a0),d0
   163ba:	|      cmp.l 24(sp),d0
   163be:	'----- bgt.s 16358 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   163c0:	       movea.l 1a8c0 <currentFloor>,a0
   163c6:	       move.l 12(a0),20(sp)
   163cc:	       move.l 1a7a4 <SysBase>,d0
   163d2:	       movea.l d0,a6
   163d4:	       movea.l 20(sp),a1
   163d8:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   163dc:	       movea.l 1a8c0 <currentFloor>,a0
   163e2:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   163e6:	       movea.l 1a8c0 <currentFloor>,a0
   163ec:	       move.l 4(a0),16(sp)
   163f2:	       move.l 1a7a4 <SysBase>,d0
   163f8:	       movea.l d0,a6
   163fa:	       movea.l 16(sp),a1
   163fe:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16402:	       movea.l 1a8c0 <currentFloor>,a0
   16408:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   1640c:	       movea.l 1a8c0 <currentFloor>,a0
   16412:	       move.l 16(a0),12(sp)
   16418:	       move.l 1a7a4 <SysBase>,d0
   1641e:	       movea.l d0,a6
   16420:	       movea.l 12(sp),a1
   16424:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16428:	       movea.l 1a8c0 <currentFloor>,a0
   1642e:	       clr.l 16(a0)
}
   16432:	       nop
   16434:	       movea.l (sp)+,a6
   16436:	       lea 24(sp),sp
   1643a:	       rts

0001643c <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   1643c:	                   lea -12(sp),sp
	int sharedVertices = 0;
   16440:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16444:	                   clr.l 4(sp)
   16448:	   ,-------------- bra.s 16494 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   1644a:	,--|-------------> clr.l (sp)
   1644c:	|  |     ,-------- bra.s 16488 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   1644e:	|  |  ,--|-------> move.l 20(sp),d1
   16452:	|  |  |  |         move.l 4(sp),d0
   16456:	|  |  |  |         add.l d0,d0
   16458:	|  |  |  |         add.l d0,d0
   1645a:	|  |  |  |         movea.l d1,a0
   1645c:	|  |  |  |         adda.l d0,a0
   1645e:	|  |  |  |         move.l (a0),d1
   16460:	|  |  |  |         movea.l 28(sp),a0
   16464:	|  |  |  |         move.l (sp),d0
   16466:	|  |  |  |         add.l d0,d0
   16468:	|  |  |  |         add.l d0,d0
   1646a:	|  |  |  |         adda.l d0,a0
   1646c:	|  |  |  |         move.l (a0),d0
   1646e:	|  |  |  |         cmp.l d1,d0
   16470:	|  |  |  |     ,-- bne.s 16486 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   16472:	|  |  |  |     |   move.l 8(sp),d0
   16476:	|  |  |  |     |   move.l d0,d1
   16478:	|  |  |  |     |   addq.l #1,d1
   1647a:	|  |  |  |     |   move.l d1,8(sp)
   1647e:	|  |  |  |     |   tst.l d0
   16480:	|  |  |  |     +-- beq.s 16486 <polysShareSide+0x4a>
   16482:	|  |  |  |     |   moveq #1,d0
   16484:	|  |  |  |  ,--|-- bra.s 164a0 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16486:	|  |  |  |  |  '-> addq.l #1,(sp)
   16488:	|  |  |  '--|----> move.l 24(sp),d0
   1648c:	|  |  |     |      cmp.l (sp),d0
   1648e:	|  |  '-----|----- bgt.s 1644e <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16490:	|  |        |      addq.l #1,4(sp)
   16494:	|  '--------|----> move.l 16(sp),d0
   16498:	|           |      cmp.l 4(sp),d0
   1649c:	'-----------|----- bgt.s 1644a <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   1649e:	            |      clr.w d0
}
   164a0:	            '----> lea 12(sp),sp
   164a4:	                   rts

000164a6 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   164a6:	             lea -28(sp),sp
   164aa:	             move.l d3,-(sp)
   164ac:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   164ae:	             clr.l 32(sp)
   164b2:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   164b6:	             movea.l 40(sp),a0
   164ba:	             move.l (a0),d0
   164bc:	             move.l d0,d1
   164be:	             subq.l #1,d1
   164c0:	             move.l d1,28(sp)
   164c4:	   ,-------- bra.w 166be <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   164c8:	,--|-------> movea.l 1a8c0 <currentFloor>,a0
   164ce:	|  |         move.l 4(a0),d1
   164d2:	|  |         movea.l 40(sp),a0
   164d6:	|  |         movea.l 4(a0),a0
   164da:	|  |         move.l 32(sp),d0
   164de:	|  |         add.l d0,d0
   164e0:	|  |         add.l d0,d0
   164e2:	|  |         adda.l d0,a0
   164e4:	|  |         move.l (a0),d0
   164e6:	|  |         lsl.l #3,d0
   164e8:	|  |         movea.l d1,a0
   164ea:	|  |         adda.l d0,a0
   164ec:	|  |         move.l (a0),d0
   164ee:	|  |         move.l d0,-(sp)
   164f0:	|  |         jsr 1736c <__floatsisf>
   164f6:	|  |         addq.l #4,sp
   164f8:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   164fc:	|  |         movea.l 1a8c0 <currentFloor>,a0
   16502:	|  |         move.l 4(a0),d1
   16506:	|  |         movea.l 40(sp),a0
   1650a:	|  |         movea.l 4(a0),a0
   1650e:	|  |         move.l 32(sp),d0
   16512:	|  |         add.l d0,d0
   16514:	|  |         add.l d0,d0
   16516:	|  |         adda.l d0,a0
   16518:	|  |         move.l (a0),d0
   1651a:	|  |         lsl.l #3,d0
   1651c:	|  |         movea.l d1,a0
   1651e:	|  |         adda.l d0,a0
   16520:	|  |         move.l 4(a0),d0
   16524:	|  |         move.l d0,-(sp)
   16526:	|  |         jsr 1736c <__floatsisf>
   1652c:	|  |         addq.l #4,sp
   1652e:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16532:	|  |         movea.l 1a8c0 <currentFloor>,a0
   16538:	|  |         move.l 4(a0),d1
   1653c:	|  |         movea.l 40(sp),a0
   16540:	|  |         movea.l 4(a0),a0
   16544:	|  |         move.l 28(sp),d0
   16548:	|  |         add.l d0,d0
   1654a:	|  |         add.l d0,d0
   1654c:	|  |         adda.l d0,a0
   1654e:	|  |         move.l (a0),d0
   16550:	|  |         lsl.l #3,d0
   16552:	|  |         movea.l d1,a0
   16554:	|  |         adda.l d0,a0
   16556:	|  |         move.l (a0),d0
   16558:	|  |         move.l d0,-(sp)
   1655a:	|  |         jsr 1736c <__floatsisf>
   16560:	|  |         addq.l #4,sp
   16562:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16566:	|  |         movea.l 1a8c0 <currentFloor>,a0
   1656c:	|  |         move.l 4(a0),d1
   16570:	|  |         movea.l 40(sp),a0
   16574:	|  |         movea.l 4(a0),a0
   16578:	|  |         move.l 28(sp),d0
   1657c:	|  |         add.l d0,d0
   1657e:	|  |         add.l d0,d0
   16580:	|  |         adda.l d0,a0
   16582:	|  |         move.l (a0),d0
   16584:	|  |         lsl.l #3,d0
   16586:	|  |         movea.l d1,a0
   16588:	|  |         adda.l d0,a0
   1658a:	|  |         move.l 4(a0),d0
   1658e:	|  |         move.l d0,-(sp)
   16590:	|  |         jsr 1736c <__floatsisf>
   16596:	|  |         addq.l #4,sp
   16598:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1659c:	|  |         move.l 48(sp),-(sp)
   165a0:	|  |         jsr 1736c <__floatsisf>
   165a6:	|  |         addq.l #4,sp
   165a8:	|  |         move.l d0,-(sp)
   165aa:	|  |         move.l 20(sp),-(sp)
   165ae:	|  |         jsr 1750e <__lesf2>
   165b4:	|  |         addq.l #8,sp
   165b6:	|  |         tst.l d0
   165b8:	|  |     ,-- bgt.s 165d8 <pointInFloorPolygon+0x132>
   165ba:	|  |     |   move.l 48(sp),-(sp)
   165be:	|  |     |   jsr 1736c <__floatsisf>
   165c4:	|  |     |   addq.l #4,sp
   165c6:	|  |     |   move.l d0,-(sp)
   165c8:	|  |     |   move.l 12(sp),-(sp)
   165cc:	|  |     |   jsr 174d8 <__gtsf2>
   165d2:	|  |     |   addq.l #8,sp
   165d4:	|  |     |   tst.l d0
   165d6:	|  |  ,--|-- bgt.s 16618 <pointInFloorPolygon+0x172>
   165d8:	|  |  |  '-> move.l 48(sp),-(sp)
   165dc:	|  |  |      jsr 1736c <__floatsisf>
   165e2:	|  |  |      addq.l #4,sp
   165e4:	|  |  |      move.l d0,-(sp)
   165e6:	|  |  |      move.l 12(sp),-(sp)
   165ea:	|  |  |      jsr 1750e <__lesf2>
   165f0:	|  |  |      addq.l #8,sp
   165f2:	|  |  |      tst.l d0
   165f4:	|  |  |  ,-- bgt.w 166ae <pointInFloorPolygon+0x208>
   165f8:	|  |  |  |   move.l 48(sp),-(sp)
   165fc:	|  |  |  |   jsr 1736c <__floatsisf>
   16602:	|  |  |  |   addq.l #4,sp
   16604:	|  |  |  |   move.l d0,-(sp)
   16606:	|  |  |  |   move.l 20(sp),-(sp)
   1660a:	|  |  |  |   jsr 174d8 <__gtsf2>
   16610:	|  |  |  |   addq.l #8,sp
   16612:	|  |  |  |   tst.l d0
   16614:	|  |  |  +-- ble.w 166ae <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16618:	|  |  '--|-> move.l 44(sp),-(sp)
   1661c:	|  |     |   jsr 1736c <__floatsisf>
   16622:	|  |     |   addq.l #4,sp
   16624:	|  |     |   move.l d0,d3
   16626:	|  |     |   move.l 20(sp),-(sp)
   1662a:	|  |     |   move.l 16(sp),-(sp)
   1662e:	|  |     |   jsr 17660 <__subsf3>
   16634:	|  |     |   addq.l #8,sp
   16636:	|  |     |   move.l d0,d2
   16638:	|  |     |   move.l 48(sp),-(sp)
   1663c:	|  |     |   jsr 1736c <__floatsisf>
   16642:	|  |     |   addq.l #4,sp
   16644:	|  |     |   move.l 16(sp),-(sp)
   16648:	|  |     |   move.l d0,-(sp)
   1664a:	|  |     |   jsr 17660 <__subsf3>
   16650:	|  |     |   addq.l #8,sp
   16652:	|  |     |   move.l d0,-(sp)
   16654:	|  |     |   move.l d2,-(sp)
   16656:	|  |     |   jsr 1741e <__mulsf3>
   1665c:	|  |     |   addq.l #8,sp
   1665e:	|  |     |   move.l d0,d2
   16660:	|  |     |   move.l 16(sp),-(sp)
   16664:	|  |     |   move.l 12(sp),-(sp)
   16668:	|  |     |   jsr 17660 <__subsf3>
   1666e:	|  |     |   addq.l #8,sp
   16670:	|  |     |   move.l d0,-(sp)
   16672:	|  |     |   move.l d2,-(sp)
   16674:	|  |     |   jsr 17222 <__divsf3>
   1667a:	|  |     |   addq.l #8,sp
   1667c:	|  |     |   move.l 20(sp),-(sp)
   16680:	|  |     |   move.l d0,-(sp)
   16682:	|  |     |   jsr 17128 <__addsf3>
   16688:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1668a:	|  |     |   move.l d0,-(sp)
   1668c:	|  |     |   move.l d3,-(sp)
   1668e:	|  |     |   jsr 17592 <__ltsf2>
   16694:	|  |     |   addq.l #8,sp
   16696:	|  |     |   tst.l d0
   16698:	|  |     +-- bge.s 166ae <pointInFloorPolygon+0x208>

			c = !c;
   1669a:	|  |     |   tst.l 24(sp)
   1669e:	|  |     |   seq d0
   166a0:	|  |     |   neg.b d0
   166a2:	|  |     |   move.b d0,d0
   166a4:	|  |     |   andi.l #255,d0
   166aa:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   166ae:	|  |     '-> move.l 32(sp),d0
   166b2:	|  |         move.l d0,d1
   166b4:	|  |         addq.l #1,d1
   166b6:	|  |         move.l d1,32(sp)
   166ba:	|  |         move.l d0,28(sp)
   166be:	|  '-------> movea.l 40(sp),a0
   166c2:	|            move.l (a0),d0
   166c4:	|            cmp.l 32(sp),d0
   166c8:	'----------- bgt.w 164c8 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   166cc:	             tst.l 24(sp)
   166d0:	             sne d0
   166d2:	             neg.b d0
   166d4:	             move.b d0,d0
   166d6:	             andi.w #255,d0
}
   166da:	             move.l (sp)+,d2
   166dc:	             move.l (sp)+,d3
   166de:	             lea 28(sp),sp
   166e2:	             rts

000166e4 <setFloor>:

BOOL setFloor (int fileNum) {
   166e4:	                               lea -132(sp),sp
   166e8:	                               move.l a6,-(sp)
   166ea:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   166ec:	                               jsr 1634c <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   166f2:	                               move.l 144(sp),-(sp)
   166f6:	                               jsr 6a2e <openFileFromNum>
   166fc:	                               addq.l #4,sp
   166fe:	                               tst.l d0
   16700:	                           ,-- bne.s 16708 <setFloor+0x24>
   16702:	                           |   clr.w d0
   16704:	,--------------------------|-- bra.w 16e54 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16708:	|                          '-> movea.l 1a8c0 <currentFloor>,a0
   1670e:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16712:	|                              move.l 1a78c <bigDataFile>,118(sp)
   1671a:	|                              move.l 1a7ac <DOSBase>,d0
   16720:	|                              movea.l d0,a6
   16722:	|                              move.l 118(sp),d1
   16726:	|                              jsr -306(a6)
   1672a:	|                              move.l d0,114(sp)
   1672e:	|                              move.l 114(sp),d0
   16732:	|                              movea.l 1a8c0 <currentFloor>,a0
   16738:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   1673c:	|                              movea.l 1a8c0 <currentFloor>,a0
   16742:	|                              move.l 8(a0),d0
   16746:	|                              lsl.l #3,d0
   16748:	|                              move.l d0,110(sp)
   1674c:	|                              clr.l 106(sp)
   16750:	|                              move.l 1a7a4 <SysBase>,d0
   16756:	|                              movea.l d0,a6
   16758:	|                              move.l 110(sp),d0
   1675c:	|                              move.l 106(sp),d1
   16760:	|                              jsr -684(a6)
   16764:	|                              move.l d0,102(sp)
   16768:	|                              move.l 102(sp),d0
   1676c:	|                              movea.l 1a8c0 <currentFloor>,a0
   16772:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16776:	|                              movea.l 1a8c0 <currentFloor>,a0
   1677c:	|                              move.l 12(a0),d0
   16780:	|                          ,-- bne.s 16796 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16782:	|                          |   pea 19d36 <graphics.c.7a652652+0x143>
   16788:	|                          |   jsr 16f3a <KPrintF>
   1678e:	|                          |   addq.l #4,sp
		return FALSE;
   16790:	|                          |   clr.w d0
   16792:	+--------------------------|-- bra.w 16e54 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16796:	|                          '-> clr.l 136(sp)
   1679a:	|                    ,-------- bra.w 168b2 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   1679e:	|                 ,--|-------> move.l 1a78c <bigDataFile>,26(sp)
   167a6:	|                 |  |         move.l 1a7ac <DOSBase>,d0
   167ac:	|                 |  |         movea.l d0,a6
   167ae:	|                 |  |         move.l 26(sp),d1
   167b2:	|                 |  |         jsr -306(a6)
   167b6:	|                 |  |         move.l d0,22(sp)
   167ba:	|                 |  |         move.l 22(sp),d1
   167be:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   167c4:	|                 |  |         movea.l 12(a0),a0
   167c8:	|                 |  |         move.l 136(sp),d0
   167cc:	|                 |  |         lsl.l #3,d0
   167ce:	|                 |  |         adda.l d0,a0
   167d0:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   167d2:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   167d8:	|                 |  |         move.l 12(a0),d1
   167dc:	|                 |  |         move.l 136(sp),d0
   167e0:	|                 |  |         lsl.l #3,d0
   167e2:	|                 |  |         movea.l d1,a0
   167e4:	|                 |  |         adda.l d0,a0
   167e6:	|                 |  |         move.l (a0),d0
   167e8:	|                 |  |         add.l d0,d0
   167ea:	|                 |  |         add.l d0,d0
   167ec:	|                 |  |         move.l d0,18(sp)
   167f0:	|                 |  |         clr.l 14(sp)
   167f4:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   167fa:	|                 |  |         movea.l d0,a6
   167fc:	|                 |  |         move.l 18(sp),d0
   16800:	|                 |  |         move.l 14(sp),d1
   16804:	|                 |  |         jsr -684(a6)
   16808:	|                 |  |         move.l d0,10(sp)
   1680c:	|                 |  |         move.l 10(sp),d1
   16810:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16816:	|                 |  |         movea.l 12(a0),a0
   1681a:	|                 |  |         move.l 136(sp),d0
   1681e:	|                 |  |         lsl.l #3,d0
   16820:	|                 |  |         adda.l d0,a0
   16822:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16826:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   1682c:	|                 |  |         move.l 12(a0),d1
   16830:	|                 |  |         move.l 136(sp),d0
   16834:	|                 |  |         lsl.l #3,d0
   16836:	|                 |  |         movea.l d1,a0
   16838:	|                 |  |         adda.l d0,a0
   1683a:	|                 |  |         move.l 4(a0),d0
   1683e:	|                 |  |     ,-- bne.s 16854 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16840:	|                 |  |     |   pea 19d36 <graphics.c.7a652652+0x143>
   16846:	|                 |  |     |   jsr 16f3a <KPrintF>
   1684c:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1684e:	|                 |  |     |   clr.w d0
   16850:	+-----------------|--|-----|-- bra.w 16e54 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16854:	|                 |  |     '-> clr.l 132(sp)
   16858:	|                 |  |     ,-- bra.s 16892 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   1685a:	|                 |  |  ,--|-> move.l 1a78c <bigDataFile>,d1
   16860:	|                 |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16866:	|                 |  |  |  |   movea.l 12(a0),a0
   1686a:	|                 |  |  |  |   move.l 136(sp),d0
   1686e:	|                 |  |  |  |   lsl.l #3,d0
   16870:	|                 |  |  |  |   adda.l d0,a0
   16872:	|                 |  |  |  |   movea.l 4(a0),a0
   16876:	|                 |  |  |  |   move.l 132(sp),d0
   1687a:	|                 |  |  |  |   add.l d0,d0
   1687c:	|                 |  |  |  |   add.l d0,d0
   1687e:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16882:	|                 |  |  |  |   move.l d1,-(sp)
   16884:	|                 |  |  |  |   jsr 6bc <get2bytes>
   1688a:	|                 |  |  |  |   addq.l #4,sp
   1688c:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1688e:	|                 |  |  |  |   addq.l #1,132(sp)
   16892:	|                 |  |  |  '-> movea.l 1a8c0 <currentFloor>,a0
   16898:	|                 |  |  |      move.l 12(a0),d1
   1689c:	|                 |  |  |      move.l 136(sp),d0
   168a0:	|                 |  |  |      lsl.l #3,d0
   168a2:	|                 |  |  |      movea.l d1,a0
   168a4:	|                 |  |  |      adda.l d0,a0
   168a6:	|                 |  |  |      move.l (a0),d0
   168a8:	|                 |  |  |      cmp.l 132(sp),d0
   168ac:	|                 |  |  '----- bgt.s 1685a <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   168ae:	|                 |  |         addq.l #1,136(sp)
   168b2:	|                 |  '-------> movea.l 1a8c0 <currentFloor>,a0
   168b8:	|                 |            move.l 8(a0),d0
   168bc:	|                 |            cmp.l 136(sp),d0
   168c0:	|                 '----------- bgt.w 1679e <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   168c4:	|                              move.l 1a78c <bigDataFile>,d0
   168ca:	|                              move.l d0,-(sp)
   168cc:	|                              jsr 6bc <get2bytes>
   168d2:	|                              addq.l #4,sp
   168d4:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   168d8:	|                              move.l 136(sp),d0
   168dc:	|                              lsl.l #3,d0
   168de:	|                              move.l d0,98(sp)
   168e2:	|                              clr.l 94(sp)
   168e6:	|                              move.l 1a7a4 <SysBase>,d0
   168ec:	|                              movea.l d0,a6
   168ee:	|                              move.l 98(sp),d0
   168f2:	|                              move.l 94(sp),d1
   168f6:	|                              jsr -684(a6)
   168fa:	|                              move.l d0,90(sp)
   168fe:	|                              move.l 90(sp),d0
   16902:	|                              movea.l 1a8c0 <currentFloor>,a0
   16908:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   1690c:	|                              movea.l 1a8c0 <currentFloor>,a0
   16912:	|                              move.l 4(a0),d0
   16916:	|                          ,-- bne.s 1692c <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16918:	|                          |   pea 19d36 <graphics.c.7a652652+0x143>
   1691e:	|                          |   jsr 16f3a <KPrintF>
   16924:	|                          |   addq.l #4,sp
		return FALSE;
   16926:	|                          |   clr.w d0
   16928:	+--------------------------|-- bra.w 16e54 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   1692c:	|                          '-> clr.l 132(sp)
   16930:	|                          ,-- bra.s 16984 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16932:	|                       ,--|-> move.l 1a78c <bigDataFile>,d1
   16938:	|                       |  |   movea.l 1a8c0 <currentFloor>,a0
   1693e:	|                       |  |   movea.l 4(a0),a0
   16942:	|                       |  |   move.l 132(sp),d0
   16946:	|                       |  |   lsl.l #3,d0
   16948:	|                       |  |   lea (0,a0,d0.l),a2
   1694c:	|                       |  |   move.l d1,-(sp)
   1694e:	|                       |  |   jsr 6bc <get2bytes>
   16954:	|                       |  |   addq.l #4,sp
   16956:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16958:	|                       |  |   move.l 1a78c <bigDataFile>,d1
   1695e:	|                       |  |   movea.l 1a8c0 <currentFloor>,a0
   16964:	|                       |  |   movea.l 4(a0),a0
   16968:	|                       |  |   move.l 132(sp),d0
   1696c:	|                       |  |   lsl.l #3,d0
   1696e:	|                       |  |   lea (0,a0,d0.l),a2
   16972:	|                       |  |   move.l d1,-(sp)
   16974:	|                       |  |   jsr 6bc <get2bytes>
   1697a:	|                       |  |   addq.l #4,sp
   1697c:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16980:	|                       |  |   addq.l #1,132(sp)
   16984:	|                       |  '-> move.l 132(sp),d0
   16988:	|                       |      cmp.l 136(sp),d0
   1698c:	|                       '----- blt.s 16932 <setFloor+0x24e>
	}

	finishAccess ();
   1698e:	|                              jsr 6926 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16994:	|                              movea.l 1a8c0 <currentFloor>,a0
   1699a:	|                              move.l 8(a0),d0
   1699e:	|                              add.l d0,d0
   169a0:	|                              add.l d0,d0
   169a2:	|                              move.l d0,86(sp)
   169a6:	|                              clr.l 82(sp)
   169aa:	|                              move.l 1a7a4 <SysBase>,d0
   169b0:	|                              movea.l d0,a6
   169b2:	|                              move.l 86(sp),d0
   169b6:	|                              move.l 82(sp),d1
   169ba:	|                              jsr -684(a6)
   169be:	|                              move.l d0,78(sp)
   169c2:	|                              move.l 78(sp),d0
   169c6:	|                              movea.l 1a8c0 <currentFloor>,a0
   169cc:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   169d0:	|                              movea.l 1a8c0 <currentFloor>,a0
   169d6:	|                              move.l 8(a0),d0
   169da:	|                              add.l d0,d0
   169dc:	|                              add.l d0,d0
   169de:	|                              move.l d0,74(sp)
   169e2:	|                              clr.l 70(sp)
   169e6:	|                              move.l 1a7a4 <SysBase>,d0
   169ec:	|                              movea.l d0,a6
   169ee:	|                              move.l 74(sp),d0
   169f2:	|                              move.l 70(sp),d1
   169f6:	|                              jsr -684(a6)
   169fa:	|                              move.l d0,66(sp)
   169fe:	|                              move.l 66(sp),d0
   16a02:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16a06:	|                              movea.l 1a8c0 <currentFloor>,a0
   16a0c:	|                              move.l 16(a0),d0
   16a10:	|                          ,-- bne.s 16a26 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16a12:	|                          |   pea 19d36 <graphics.c.7a652652+0x143>
   16a18:	|                          |   jsr 16f3a <KPrintF>
   16a1e:	|                          |   addq.l #4,sp
		return FALSE;
   16a20:	|                          |   clr.w d0
   16a22:	+--------------------------|-- bra.w 16e54 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16a26:	|                          '-> clr.l 136(sp)
   16a2a:	|                    ,-------- bra.w 16b4e <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16a2e:	|                 ,--|-------> movea.l 1a8c0 <currentFloor>,a0
   16a34:	|                 |  |         move.l 8(a0),d0
   16a38:	|                 |  |         add.l d0,d0
   16a3a:	|                 |  |         add.l d0,d0
   16a3c:	|                 |  |         move.l d0,50(sp)
   16a40:	|                 |  |         clr.l 46(sp)
   16a44:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   16a4a:	|                 |  |         movea.l d0,a6
   16a4c:	|                 |  |         move.l 50(sp),d0
   16a50:	|                 |  |         move.l 46(sp),d1
   16a54:	|                 |  |         jsr -684(a6)
   16a58:	|                 |  |         move.l d0,42(sp)
   16a5c:	|                 |  |         move.l 42(sp),d0
   16a60:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16a66:	|                 |  |         movea.l 16(a0),a0
   16a6a:	|                 |  |         move.l 136(sp),d1
   16a6e:	|                 |  |         add.l d1,d1
   16a70:	|                 |  |         add.l d1,d1
   16a72:	|                 |  |         adda.l d1,a0
   16a74:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16a76:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16a7c:	|                 |  |         move.l 8(a0),d0
   16a80:	|                 |  |         add.l d0,d0
   16a82:	|                 |  |         add.l d0,d0
   16a84:	|                 |  |         move.l d0,38(sp)
   16a88:	|                 |  |         clr.l 34(sp)
   16a8c:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   16a92:	|                 |  |         movea.l d0,a6
   16a94:	|                 |  |         move.l 38(sp),d0
   16a98:	|                 |  |         move.l 34(sp),d1
   16a9c:	|                 |  |         jsr -684(a6)
   16aa0:	|                 |  |         move.l d0,30(sp)
   16aa4:	|                 |  |         move.l 30(sp),d1
   16aa8:	|                 |  |         move.l 136(sp),d0
   16aac:	|                 |  |         add.l d0,d0
   16aae:	|                 |  |         add.l d0,d0
   16ab0:	|                 |  |         movea.l 62(sp),a0
   16ab4:	|                 |  |         adda.l d0,a0
   16ab6:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16ab8:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16abe:	|                 |  |         move.l 16(a0),d1
   16ac2:	|                 |  |         move.l 136(sp),d0
   16ac6:	|                 |  |         add.l d0,d0
   16ac8:	|                 |  |         add.l d0,d0
   16aca:	|                 |  |         movea.l d1,a0
   16acc:	|                 |  |         adda.l d0,a0
   16ace:	|                 |  |         move.l (a0),d0
   16ad0:	|                 |  |     ,-- bne.s 16ae6 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16ad2:	|                 |  |     |   pea 19d36 <graphics.c.7a652652+0x143>
   16ad8:	|                 |  |     |   jsr 16f3a <KPrintF>
   16ade:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16ae0:	|                 |  |     |   clr.w d0
   16ae2:	+-----------------|--|-----|-- bra.w 16e54 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16ae6:	|                 |  |     '-> clr.l 132(sp)
   16aea:	|                 |  |     ,-- bra.s 16b3a <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16aec:	|                 |  |  ,--|-> movea.l 1a8c0 <currentFloor>,a0
   16af2:	|                 |  |  |  |   move.l 16(a0),d1
   16af6:	|                 |  |  |  |   move.l 136(sp),d0
   16afa:	|                 |  |  |  |   add.l d0,d0
   16afc:	|                 |  |  |  |   add.l d0,d0
   16afe:	|                 |  |  |  |   movea.l d1,a0
   16b00:	|                 |  |  |  |   adda.l d0,a0
   16b02:	|                 |  |  |  |   move.l (a0),d1
   16b04:	|                 |  |  |  |   move.l 132(sp),d0
   16b08:	|                 |  |  |  |   add.l d0,d0
   16b0a:	|                 |  |  |  |   add.l d0,d0
   16b0c:	|                 |  |  |  |   movea.l d1,a0
   16b0e:	|                 |  |  |  |   adda.l d0,a0
   16b10:	|                 |  |  |  |   moveq #-1,d1
   16b12:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16b14:	|                 |  |  |  |   move.l 136(sp),d0
   16b18:	|                 |  |  |  |   add.l d0,d0
   16b1a:	|                 |  |  |  |   add.l d0,d0
   16b1c:	|                 |  |  |  |   movea.l 62(sp),a0
   16b20:	|                 |  |  |  |   adda.l d0,a0
   16b22:	|                 |  |  |  |   move.l (a0),d1
   16b24:	|                 |  |  |  |   move.l 132(sp),d0
   16b28:	|                 |  |  |  |   add.l d0,d0
   16b2a:	|                 |  |  |  |   add.l d0,d0
   16b2c:	|                 |  |  |  |   movea.l d1,a0
   16b2e:	|                 |  |  |  |   adda.l d0,a0
   16b30:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16b36:	|                 |  |  |  |   addq.l #1,132(sp)
   16b3a:	|                 |  |  |  '-> movea.l 1a8c0 <currentFloor>,a0
   16b40:	|                 |  |  |      move.l 8(a0),d0
   16b44:	|                 |  |  |      cmp.l 132(sp),d0
   16b48:	|                 |  |  '----- bgt.s 16aec <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16b4a:	|                 |  |         addq.l #1,136(sp)
   16b4e:	|                 |  '-------> movea.l 1a8c0 <currentFloor>,a0
   16b54:	|                 |            move.l 8(a0),d0
   16b58:	|                 |            cmp.l 136(sp),d0
   16b5c:	|                 '----------- bgt.w 16a2e <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16b60:	|                              clr.l 136(sp)
   16b64:	|              ,-------------- bra.w 16c6a <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16b68:	|           ,--|-------------> clr.l 132(sp)
   16b6c:	|           |  |     ,-------- bra.w 16c54 <setFloor+0x570>
			if (i != j) {
   16b70:	|           |  |  ,--|-------> move.l 136(sp),d0
   16b74:	|           |  |  |  |         cmp.l 132(sp),d0
   16b78:	|           |  |  |  |     ,-- beq.w 16c0a <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16b7c:	|           |  |  |  |     |   movea.l 1a8c0 <currentFloor>,a0
   16b82:	|           |  |  |  |     |   move.l 12(a0),d1
   16b86:	|           |  |  |  |     |   move.l 132(sp),d0
   16b8a:	|           |  |  |  |     |   lsl.l #3,d0
   16b8c:	|           |  |  |  |     |   movea.l d1,a1
   16b8e:	|           |  |  |  |     |   adda.l d0,a1
   16b90:	|           |  |  |  |     |   movea.l 1a8c0 <currentFloor>,a0
   16b96:	|           |  |  |  |     |   move.l 12(a0),d1
   16b9a:	|           |  |  |  |     |   move.l 136(sp),d0
   16b9e:	|           |  |  |  |     |   lsl.l #3,d0
   16ba0:	|           |  |  |  |     |   movea.l d1,a0
   16ba2:	|           |  |  |  |     |   adda.l d0,a0
   16ba4:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16ba8:	|           |  |  |  |     |   move.l (a1),-(sp)
   16baa:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16bae:	|           |  |  |  |     |   move.l (a0),-(sp)
   16bb0:	|           |  |  |  |     |   jsr 1643c <polysShareSide>
   16bb6:	|           |  |  |  |     |   lea 16(sp),sp
   16bba:	|           |  |  |  |     |   tst.w d0
   16bbc:	|           |  |  |  |  ,--|-- beq.w 16c50 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16bc0:	|           |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16bc6:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16bca:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16bce:	|           |  |  |  |  |  |   add.l d0,d0
   16bd0:	|           |  |  |  |  |  |   add.l d0,d0
   16bd2:	|           |  |  |  |  |  |   movea.l d1,a0
   16bd4:	|           |  |  |  |  |  |   adda.l d0,a0
   16bd6:	|           |  |  |  |  |  |   move.l (a0),d1
   16bd8:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16bdc:	|           |  |  |  |  |  |   add.l d0,d0
   16bde:	|           |  |  |  |  |  |   add.l d0,d0
   16be0:	|           |  |  |  |  |  |   movea.l d1,a0
   16be2:	|           |  |  |  |  |  |   adda.l d0,a0
   16be4:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16be8:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16bec:	|           |  |  |  |  |  |   add.l d0,d0
   16bee:	|           |  |  |  |  |  |   add.l d0,d0
   16bf0:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16bf4:	|           |  |  |  |  |  |   adda.l d0,a0
   16bf6:	|           |  |  |  |  |  |   move.l (a0),d1
   16bf8:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16bfc:	|           |  |  |  |  |  |   add.l d0,d0
   16bfe:	|           |  |  |  |  |  |   add.l d0,d0
   16c00:	|           |  |  |  |  |  |   movea.l d1,a0
   16c02:	|           |  |  |  |  |  |   adda.l d0,a0
   16c04:	|           |  |  |  |  |  |   moveq #1,d1
   16c06:	|           |  |  |  |  |  |   move.l d1,(a0)
   16c08:	|           |  |  |  |  +--|-- bra.s 16c50 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16c0a:	|           |  |  |  |  |  '-> movea.l 1a8c0 <currentFloor>,a0
   16c10:	|           |  |  |  |  |      move.l 16(a0),d1
   16c14:	|           |  |  |  |  |      move.l 136(sp),d0
   16c18:	|           |  |  |  |  |      add.l d0,d0
   16c1a:	|           |  |  |  |  |      add.l d0,d0
   16c1c:	|           |  |  |  |  |      movea.l d1,a0
   16c1e:	|           |  |  |  |  |      adda.l d0,a0
   16c20:	|           |  |  |  |  |      move.l (a0),d1
   16c22:	|           |  |  |  |  |      move.l 132(sp),d0
   16c26:	|           |  |  |  |  |      add.l d0,d0
   16c28:	|           |  |  |  |  |      add.l d0,d0
   16c2a:	|           |  |  |  |  |      movea.l d1,a0
   16c2c:	|           |  |  |  |  |      adda.l d0,a0
   16c2e:	|           |  |  |  |  |      moveq #-2,d0
   16c30:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16c32:	|           |  |  |  |  |      move.l 136(sp),d0
   16c36:	|           |  |  |  |  |      add.l d0,d0
   16c38:	|           |  |  |  |  |      add.l d0,d0
   16c3a:	|           |  |  |  |  |      movea.l 62(sp),a0
   16c3e:	|           |  |  |  |  |      adda.l d0,a0
   16c40:	|           |  |  |  |  |      move.l (a0),d1
   16c42:	|           |  |  |  |  |      move.l 132(sp),d0
   16c46:	|           |  |  |  |  |      add.l d0,d0
   16c48:	|           |  |  |  |  |      add.l d0,d0
   16c4a:	|           |  |  |  |  |      movea.l d1,a0
   16c4c:	|           |  |  |  |  |      adda.l d0,a0
   16c4e:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16c50:	|           |  |  |  |  '----> addq.l #1,132(sp)
   16c54:	|           |  |  |  '-------> movea.l 1a8c0 <currentFloor>,a0
   16c5a:	|           |  |  |            move.l 8(a0),d0
   16c5e:	|           |  |  |            cmp.l 132(sp),d0
   16c62:	|           |  |  '----------- bgt.w 16b70 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16c66:	|           |  |               addq.l #1,136(sp)
   16c6a:	|           |  '-------------> movea.l 1a8c0 <currentFloor>,a0
   16c70:	|           |                  move.l 8(a0),d0
   16c74:	|           |                  cmp.l 136(sp),d0
   16c78:	|           '----------------- bgt.w 16b68 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16c7c:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16c80:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16c84:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16c88:	|  |                           clr.l 136(sp)
   16c8c:	|  |     ,-------------------- bra.w 16de2 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16c90:	|  |  ,--|-------------------> clr.l 132(sp)
   16c94:	|  |  |  |     ,-------------- bra.w 16dcc <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   16c98:	|  |  |  |  ,--|-------------> movea.l 1a8c0 <currentFloor>,a0
   16c9e:	|  |  |  |  |  |               move.l 16(a0),d1
   16ca2:	|  |  |  |  |  |               move.l 136(sp),d0
   16ca6:	|  |  |  |  |  |               add.l d0,d0
   16ca8:	|  |  |  |  |  |               add.l d0,d0
   16caa:	|  |  |  |  |  |               movea.l d1,a0
   16cac:	|  |  |  |  |  |               adda.l d0,a0
   16cae:	|  |  |  |  |  |               move.l (a0),d1
   16cb0:	|  |  |  |  |  |               move.l 132(sp),d0
   16cb4:	|  |  |  |  |  |               add.l d0,d0
   16cb6:	|  |  |  |  |  |               add.l d0,d0
   16cb8:	|  |  |  |  |  |               movea.l d1,a0
   16cba:	|  |  |  |  |  |               adda.l d0,a0
   16cbc:	|  |  |  |  |  |               move.l (a0),d0
   16cbe:	|  |  |  |  |  |               moveq #-1,d1
   16cc0:	|  |  |  |  |  |               cmp.l d0,d1
   16cc2:	|  |  |  |  |  |  ,----------- bne.w 16dc8 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16cc6:	|  |  |  |  |  |  |            clr.l 122(sp)
   16cca:	|  |  |  |  |  |  |     ,----- bra.w 16db6 <setFloor+0x6d2>
						if (d != i && d != j) {
   16cce:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   16cd2:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16cd6:	|  |  |  |  |  |  |  |  |  ,-- beq.w 16db2 <setFloor+0x6ce>
   16cda:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16cde:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16ce2:	|  |  |  |  |  |  |  |  |  +-- beq.w 16db2 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16ce6:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16cec:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16cf0:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16cf4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16cf6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16cf8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16cfa:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16cfc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16cfe:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16d02:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d04:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d06:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16d08:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d0a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   16d0c:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   16d10:	|  |  |  |  |  |  |  |  |  +-- bne.w 16db2 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   16d14:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16d1a:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16d1e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16d22:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d24:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d26:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16d28:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d2a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16d2c:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16d30:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d32:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d34:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16d36:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d38:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   16d3a:	|  |  |  |  |  |  |  |  |  +-- bmi.s 16db2 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   16d3c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16d40:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d42:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d44:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16d48:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d4a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16d4c:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16d50:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d52:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d54:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16d56:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d58:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   16d5a:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   16d5e:	|  |  |  |  |  |  |  |  |  +-- bgt.s 16db2 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   16d60:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16d66:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16d6a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16d6e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d70:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d72:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16d74:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d76:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16d78:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16d7c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d7e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d80:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16d82:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d84:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   16d88:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16d8c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d8e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d90:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16d94:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16d96:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16d98:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16d9c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16d9e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16da0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16da2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16da4:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   16da8:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   16daa:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   16dac:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16db2:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   16db6:	|  |  |  |  |  |  |  |  '----> movea.l 1a8c0 <currentFloor>,a0
   16dbc:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   16dc0:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   16dc4:	|  |  |  |  |  |  |  '-------- bgt.w 16cce <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16dc8:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   16dcc:	|  |  |  |  |  '-------------> movea.l 1a8c0 <currentFloor>,a0
   16dd2:	|  |  |  |  |                  move.l 8(a0),d0
   16dd6:	|  |  |  |  |                  cmp.l 132(sp),d0
   16dda:	|  |  |  |  '----------------- bgt.w 16c98 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16dde:	|  |  |  |                     addq.l #1,136(sp)
   16de2:	|  |  |  '-------------------> movea.l 1a8c0 <currentFloor>,a0
   16de8:	|  |  |                        move.l 8(a0),d0
   16dec:	|  |  |                        cmp.l 136(sp),d0
   16df0:	|  |  '----------------------- bgt.w 16c90 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   16df4:	|  |                           tst.w 130(sp)
   16df8:	|  '-------------------------- bne.w 16c80 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16dfc:	|                              clr.l 136(sp)
   16e00:	|                          ,-- bra.s 16e28 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   16e02:	|                       ,--|-> move.l 136(sp),d0
   16e06:	|                       |  |   add.l d0,d0
   16e08:	|                       |  |   add.l d0,d0
   16e0a:	|                       |  |   movea.l 62(sp),a0
   16e0e:	|                       |  |   adda.l d0,a0
   16e10:	|                       |  |   move.l (a0),54(sp)
   16e14:	|                       |  |   move.l 1a7a4 <SysBase>,d0
   16e1a:	|                       |  |   movea.l d0,a6
   16e1c:	|                       |  |   movea.l 54(sp),a1
   16e20:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e24:	|                       |  |   addq.l #1,136(sp)
   16e28:	|                       |  '-> movea.l 1a8c0 <currentFloor>,a0
   16e2e:	|                       |      move.l 8(a0),d0
   16e32:	|                       |      cmp.l 136(sp),d0
   16e36:	|                       '----- bgt.s 16e02 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   16e38:	|                              move.l 62(sp),58(sp)
   16e3e:	|                              move.l 1a7a4 <SysBase>,d0
   16e44:	|                              movea.l d0,a6
   16e46:	|                              movea.l 58(sp),a1
   16e4a:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   16e4e:	|                              clr.l 62(sp)

	return TRUE;
   16e52:	|                              moveq #1,d0
}
   16e54:	'----------------------------> movea.l (sp)+,a2
   16e56:	                               movea.l (sp)+,a6
   16e58:	                               lea 132(sp),sp
   16e5c:	                               rts

00016e5e <setFloorNull>:

void setFloorNull () {
	killFloor ();
   16e5e:	jsr 1634c <killFloor>
	noFloor ();
   16e64:	jsr 16270 <noFloor>
   16e6a:	nop
   16e6c:	rts

00016e6e <WaitVbl>:
void WaitVbl() {
   16e6e:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   16e70:	   ,-> movea.l #14675972,a0
   16e76:	   |   move.l (a0),d0
   16e78:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   16e7a:	   |   move.l (sp),d0
   16e7c:	   |   andi.l #130816,d0
   16e82:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   16e84:	   |   move.l (sp),d0
   16e86:	   |   cmpi.l #76800,d0
   16e8c:	   '-- beq.s 16e70 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   16e8e:	,----> movea.l #14675972,a0
   16e94:	|      move.l (a0),d0
   16e96:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   16e9a:	|      move.l 4(sp),d0
   16e9e:	|      andi.l #130816,d0
   16ea4:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   16ea8:	|      move.l 4(sp),d0
   16eac:	|      cmpi.l #76800,d0
   16eb2:	|  ,-- beq.s 16eb6 <WaitVbl+0x48>
	while (1) {
   16eb4:	'--|-- bra.s 16e8e <WaitVbl+0x20>
			break;
   16eb6:	   '-> nop
}
   16eb8:	       nop
   16eba:	       addq.l #8,sp
   16ebc:	       rts

00016ebe <memset>:
void* memset(void *dest, int val, unsigned long len) {
   16ebe:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   16ec0:	       move.l 8(sp),(sp)
	while(len-- > 0)
   16ec4:	   ,-- bra.s 16ed6 <memset+0x18>
		*ptr++ = val;
   16ec6:	,--|-> move.l (sp),d0
   16ec8:	|  |   move.l d0,d1
   16eca:	|  |   addq.l #1,d1
   16ecc:	|  |   move.l d1,(sp)
   16ece:	|  |   move.l 12(sp),d1
   16ed2:	|  |   movea.l d0,a0
   16ed4:	|  |   move.b d1,(a0)
	while(len-- > 0)
   16ed6:	|  '-> move.l 16(sp),d0
   16eda:	|      move.l d0,d1
   16edc:	|      subq.l #1,d1
   16ede:	|      move.l d1,16(sp)
   16ee2:	|      tst.l d0
   16ee4:	'----- bne.s 16ec6 <memset+0x8>
	return dest;
   16ee6:	       move.l 8(sp),d0
}
   16eea:	       addq.l #4,sp
   16eec:	       rts

00016eee <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   16eee:	       subq.l #8,sp
   16ef0:	       move.l d2,-(sp)
	char *d = (char *)dest;
   16ef2:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   16ef8:	       move.l 20(sp),4(sp)
	while(len--)
   16efe:	   ,-- bra.s 16f20 <memcpy+0x32>
		*d++ = *s++;
   16f00:	,--|-> move.l 4(sp),d1
   16f04:	|  |   move.l d1,d0
   16f06:	|  |   addq.l #1,d0
   16f08:	|  |   move.l d0,4(sp)
   16f0c:	|  |   move.l 8(sp),d0
   16f10:	|  |   move.l d0,d2
   16f12:	|  |   addq.l #1,d2
   16f14:	|  |   move.l d2,8(sp)
   16f18:	|  |   movea.l d1,a0
   16f1a:	|  |   move.b (a0),d1
   16f1c:	|  |   movea.l d0,a0
   16f1e:	|  |   move.b d1,(a0)
	while(len--)
   16f20:	|  '-> move.l 24(sp),d0
   16f24:	|      move.l d0,d1
   16f26:	|      subq.l #1,d1
   16f28:	|      move.l d1,24(sp)
   16f2c:	|      tst.l d0
   16f2e:	'----- bne.s 16f00 <memcpy+0x12>
	return dest;
   16f30:	       move.l 16(sp),d0
}
   16f34:	       move.l (sp)+,d2
   16f36:	       addq.l #8,sp
   16f38:	       rts

00016f3a <KPrintF>:
void KPrintF(const char* fmt, ...) {
   16f3a:	       lea -128(sp),sp
   16f3e:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   16f42:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4d07>,d0
   16f48:	       cmpi.w #20153,d0
   16f4c:	   ,-- beq.s 16f70 <KPrintF+0x36>
   16f4e:	   |   cmpi.w #-24562,d0
   16f52:	   +-- beq.s 16f70 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   16f54:	   |   movea.l 1a7a4 <SysBase>,a6
   16f5a:	   |   movea.l 144(sp),a0
   16f5e:	   |   lea 148(sp),a1
   16f62:	   |   lea 179ce <KPutCharX>,a2
   16f68:	   |   suba.l a3,a3
   16f6a:	   |   jsr -522(a6)
}
   16f6e:	,--|-- bra.s 16f9a <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   16f70:	|  '-> movea.l 1a7a4 <SysBase>,a6
   16f76:	|      movea.l 144(sp),a0
   16f7a:	|      lea 148(sp),a1
   16f7e:	|      lea 179dc <PutChar>,a2
   16f84:	|      lea 12(sp),a3
   16f88:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   16f8c:	|      move.l a3,-(sp)
   16f8e:	|      pea 56 <_start+0x56>
   16f92:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4d07>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   16f98:	|      addq.l #8,sp
}
   16f9a:	'----> movem.l (sp)+,a2-a3/a6
   16f9e:	       lea 128(sp),sp
   16fa2:	       rts

00016fa4 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   16fa4:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   16fa6:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   16fac:	       movea.l (sp),a0
   16fae:	       move.w (a0),d0
   16fb0:	       cmpi.w #20153,d0
   16fb4:	   ,-- beq.s 16fc0 <debug_cmd+0x1c>
   16fb6:	   |   movea.l (sp),a0
   16fb8:	   |   move.w (a0),d0
   16fba:	   |   cmpi.w #-24562,d0
   16fbe:	,--|-- bne.s 16fde <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   16fc0:	|  '-> move.l 20(sp),-(sp)
   16fc4:	|      move.l 20(sp),-(sp)
   16fc8:	|      move.l 20(sp),-(sp)
   16fcc:	|      move.l 20(sp),-(sp)
   16fd0:	|      pea 58 <_start+0x58>
   16fd4:	|      movea.l 20(sp),a0
   16fd8:	|      jsr (a0)
   16fda:	|      lea 20(sp),sp
	}
}
   16fde:	'----> nop
   16fe0:	       addq.l #4,sp
   16fe2:	       rts

00016fe4 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   16fe4:	       move.l d2,-(sp)
	while(*source && --num > 0)
   16fe6:	   ,-- bra.s 17008 <my_strncpy+0x24>
		*destination++ = *source++;
   16fe8:	,--|-> move.l 12(sp),d1
   16fec:	|  |   move.l d1,d0
   16fee:	|  |   addq.l #1,d0
   16ff0:	|  |   move.l d0,12(sp)
   16ff4:	|  |   move.l 8(sp),d0
   16ff8:	|  |   move.l d0,d2
   16ffa:	|  |   addq.l #1,d2
   16ffc:	|  |   move.l d2,8(sp)
   17000:	|  |   movea.l d1,a0
   17002:	|  |   move.b (a0),d1
   17004:	|  |   movea.l d0,a0
   17006:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17008:	|  '-> movea.l 12(sp),a0
   1700c:	|      move.b (a0),d0
   1700e:	|  ,-- beq.s 17016 <my_strncpy+0x32>
   17010:	|  |   subq.l #1,16(sp)
   17014:	'--|-- bne.s 16fe8 <my_strncpy+0x4>
	*destination = '\0';
   17016:	   '-> movea.l 8(sp),a0
   1701a:	       clr.b (a0)
}
   1701c:	       nop
   1701e:	       move.l (sp)+,d2
   17020:	       rts

00017022 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   17022:	    lea -60(sp),sp
   17026:	    movea.l 72(sp),a1
   1702a:	    movea.l 76(sp),a0
   1702e:	    move.l 80(sp),d1
   17032:	    move.l 84(sp),d0
   17036:	    movea.w a1,a1
   17038:	    move.w a1,8(sp)
   1703c:	    movea.w a0,a0
   1703e:	    move.w a0,6(sp)
   17042:	    move.w d1,d1
   17044:	    move.w d1,4(sp)
   17048:	    move.w d0,d0
   1704a:	    move.w d0,2(sp)
	struct debug_resource resource = {
   1704e:	    lea 10(sp),a0
   17052:	    clr.l (a0)
   17054:	    addq.l #4,a0
   17056:	    clr.l (a0)
   17058:	    addq.l #4,a0
   1705a:	    clr.l (a0)
   1705c:	    addq.l #4,a0
   1705e:	    clr.l (a0)
   17060:	    addq.l #4,a0
   17062:	    clr.l (a0)
   17064:	    addq.l #4,a0
   17066:	    clr.l (a0)
   17068:	    addq.l #4,a0
   1706a:	    clr.l (a0)
   1706c:	    addq.l #4,a0
   1706e:	    clr.l (a0)
   17070:	    addq.l #4,a0
   17072:	    clr.l (a0)
   17074:	    addq.l #4,a0
   17076:	    clr.l (a0)
   17078:	    addq.l #4,a0
   1707a:	    clr.l (a0)
   1707c:	    addq.l #4,a0
   1707e:	    clr.l (a0)
   17080:	    addq.l #4,a0
   17082:	    clr.w (a0)
   17084:	    addq.l #2,a0
		.address = (unsigned int)addr,
   17086:	    move.l 64(sp),d0
	struct debug_resource resource = {
   1708a:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   1708e:	    move.w 8(sp),d0
   17092:	,-- bpl.s 17096 <debug_register_bitmap+0x74>
   17094:	|   addq.w #7,d0
   17096:	'-> asr.w #3,d0
   17098:	    movea.w d0,a0
   1709a:	    movea.w 6(sp),a1
   1709e:	    move.l a1,-(sp)
   170a0:	    move.l a0,-(sp)
   170a2:	    jsr 178c6 <__mulsi3>
   170a8:	    addq.l #8,sp
   170aa:	    movea.w 4(sp),a0
   170ae:	    move.l a0,-(sp)
   170b0:	    move.l d0,-(sp)
   170b2:	    jsr 178c6 <__mulsi3>
   170b8:	    addq.l #8,sp
	struct debug_resource resource = {
   170ba:	    move.l d0,14(sp)
   170be:	    move.w 2(sp),52(sp)
   170c4:	    move.w 8(sp),54(sp)
   170ca:	    move.w 6(sp),56(sp)
   170d0:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   170d6:	    moveq #0,d0
   170d8:	    move.w 2(sp),d0
   170dc:	    moveq #2,d1
   170de:	    and.l d1,d0
   170e0:	,-- beq.s 170ec <debug_register_bitmap+0xca>
		resource.size *= 2;
   170e2:	|   move.l 14(sp),d0
   170e6:	|   add.l d0,d0
   170e8:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   170ec:	'-> pea 20 <_start+0x20>
   170f0:	    move.l 72(sp),-(sp)
   170f4:	    lea 18(sp),a0
   170f8:	    move.l a0,d0
   170fa:	    addq.l #8,d0
   170fc:	    move.l d0,-(sp)
   170fe:	    jsr 16fe4 <my_strncpy>
   17104:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17108:	    lea 10(sp),a0
   1710c:	    clr.l -(sp)
   1710e:	    clr.l -(sp)
   17110:	    move.l a0,-(sp)
   17112:	    pea 4 <_start+0x4>
   17116:	    jsr 16fa4 <debug_cmd>
   1711c:	    lea 16(sp),sp
}
   17120:	    nop
   17122:	    lea 60(sp),sp
   17126:	    rts

00017128 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   17128:	lea -12(sp),sp
   1712c:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   1712e:	move.l 20(sp),12(sp)
   17134:	move.l 24(sp),8(sp)
   1713a:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17140:	movea.l d0,a6
   17142:	move.l 12(sp),d0
   17146:	move.l 8(sp),d1
   1714a:	jsr -66(a6)
   1714e:	move.l d0,4(sp)
   17152:	move.l 4(sp),d0
}
   17156:	movea.l (sp)+,a6
   17158:	lea 12(sp),sp
   1715c:	rts

0001715e <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   1715e:	lea -32(sp),sp
   17162:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17166:	move.l 48(sp),36(sp)
   1716c:	move.l 52(sp),40(sp)
   17172:	move.l 56(sp),28(sp)
   17178:	move.l 60(sp),32(sp)
   1717e:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   17184:	movea.l d0,a6
   17186:	move.l 36(sp),d0
   1718a:	move.l 40(sp),d1
   1718e:	move.l 28(sp),d2
   17192:	move.l 32(sp),d3
   17196:	jsr -66(a6)
   1719a:	move.l d0,12(sp)
   1719e:	move.l d1,16(sp)
   171a2:	move.l 12(sp),20(sp)
   171a8:	move.l 16(sp),24(sp)
   171ae:	move.l 20(sp),d0
   171b2:	move.l 24(sp),d1
}
   171b6:	movem.l (sp)+,d2-d3/a6
   171ba:	lea 32(sp),sp
   171be:	rts

000171c0 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   171c0:	lea -32(sp),sp
   171c4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   171c8:	move.l 48(sp),36(sp)
   171ce:	move.l 52(sp),40(sp)
   171d4:	move.l 56(sp),28(sp)
   171da:	move.l 60(sp),32(sp)
   171e0:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   171e6:	movea.l d0,a6
   171e8:	move.l 36(sp),d0
   171ec:	move.l 40(sp),d1
   171f0:	move.l 28(sp),d2
   171f4:	move.l 32(sp),d3
   171f8:	jsr -84(a6)
   171fc:	move.l d0,12(sp)
   17200:	move.l d1,16(sp)
   17204:	move.l 12(sp),20(sp)
   1720a:	move.l 16(sp),24(sp)
   17210:	move.l 20(sp),d0
   17214:	move.l 24(sp),d1
}
   17218:	movem.l (sp)+,d2-d3/a6
   1721c:	lea 32(sp),sp
   17220:	rts

00017222 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   17222:	lea -12(sp),sp
   17226:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   17228:	move.l 20(sp),12(sp)
   1722e:	move.l 24(sp),8(sp)
   17234:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1723a:	movea.l d0,a6
   1723c:	move.l 12(sp),d0
   17240:	move.l 8(sp),d1
   17244:	jsr -84(a6)
   17248:	move.l d0,4(sp)
   1724c:	move.l 4(sp),d0
}
   17250:	movea.l (sp)+,a6
   17252:	lea 12(sp),sp
   17256:	rts

00017258 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   17258:	lea -12(sp),sp
   1725c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1725e:	move.l 20(sp),12(sp)
   17264:	move.l 24(sp),8(sp)
   1726a:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17270:	movea.l d0,a6
   17272:	move.l 12(sp),d0
   17276:	move.l 8(sp),d1
   1727a:	jsr -42(a6)
   1727e:	move.l d0,4(sp)
   17282:	move.l 4(sp),d0
}
   17286:	movea.l (sp)+,a6
   17288:	lea 12(sp),sp
   1728c:	rts

0001728e <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   1728e:	lea -20(sp),sp
   17292:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   17294:	move.l 28(sp),20(sp)
   1729a:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   172a0:	movea.l d0,a6
   172a2:	move.l 20(sp),d0
   172a6:	jsr -108(a6)
   172aa:	move.l d0,4(sp)
   172ae:	move.l d1,8(sp)
   172b2:	move.l 4(sp),12(sp)
   172b8:	move.l 8(sp),16(sp)
   172be:	move.l 12(sp),d0
   172c2:	move.l 16(sp),d1
}
   172c6:	movea.l (sp)+,a6
   172c8:	lea 20(sp),sp
   172cc:	rts

000172ce <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   172ce:	lea -12(sp),sp
   172d2:	move.l a6,-(sp)
	return IEEEDPFix(value);
   172d4:	move.l 20(sp),8(sp)
   172da:	move.l 24(sp),12(sp)
   172e0:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   172e6:	movea.l d0,a6
   172e8:	move.l 8(sp),d0
   172ec:	move.l 12(sp),d1
   172f0:	jsr -30(a6)
   172f4:	move.l d0,4(sp)
   172f8:	move.l 4(sp),d0
}
   172fc:	movea.l (sp)+,a6
   172fe:	lea 12(sp),sp
   17302:	rts

00017304 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17304:	subq.l #8,sp
   17306:	move.l a6,-(sp)
	return IEEESPFix(value);
   17308:	move.l 16(sp),8(sp)
   1730e:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17314:	movea.l d0,a6
   17316:	move.l 8(sp),d0
   1731a:	jsr -30(a6)
   1731e:	move.l d0,4(sp)
   17322:	move.l 4(sp),d0
}
   17326:	movea.l (sp)+,a6
   17328:	addq.l #8,sp
   1732a:	rts

0001732c <__floatsidf>:


DOUBLE __floatsidf (int i) {
   1732c:	lea -20(sp),sp
   17330:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17332:	move.l 28(sp),20(sp)
   17338:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   1733e:	movea.l d0,a6
   17340:	move.l 20(sp),d0
   17344:	jsr -36(a6)
   17348:	move.l d0,4(sp)
   1734c:	move.l d1,8(sp)
   17350:	move.l 4(sp),12(sp)
   17356:	move.l 8(sp),16(sp)
   1735c:	move.l 12(sp),d0
   17360:	move.l 16(sp),d1
}
   17364:	movea.l (sp)+,a6
   17366:	lea 20(sp),sp
   1736a:	rts

0001736c <__floatsisf>:

FLOAT __floatsisf(int i) {
   1736c:	subq.l #8,sp
   1736e:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17370:	move.l 16(sp),8(sp)
   17376:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1737c:	movea.l d0,a6
   1737e:	move.l 8(sp),d0
   17382:	jsr -36(a6)
   17386:	move.l d0,4(sp)
   1738a:	move.l 4(sp),d0
}
   1738e:	movea.l (sp)+,a6
   17390:	addq.l #8,sp
   17392:	rts

00017394 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17394:	subq.l #8,sp
   17396:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17398:	move.l 16(sp),8(sp)
   1739e:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   173a4:	movea.l d0,a6
   173a6:	move.l 8(sp),d0
   173aa:	jsr -36(a6)
   173ae:	move.l d0,4(sp)
   173b2:	move.l 4(sp),d0
}
   173b6:	movea.l (sp)+,a6
   173b8:	addq.l #8,sp
   173ba:	rts

000173bc <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   173bc:	lea -32(sp),sp
   173c0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   173c4:	move.l 48(sp),36(sp)
   173ca:	move.l 52(sp),40(sp)
   173d0:	move.l 56(sp),28(sp)
   173d6:	move.l 60(sp),32(sp)
   173dc:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   173e2:	movea.l d0,a6
   173e4:	move.l 36(sp),d0
   173e8:	move.l 40(sp),d1
   173ec:	move.l 28(sp),d2
   173f0:	move.l 32(sp),d3
   173f4:	jsr -78(a6)
   173f8:	move.l d0,12(sp)
   173fc:	move.l d1,16(sp)
   17400:	move.l 12(sp),20(sp)
   17406:	move.l 16(sp),24(sp)
   1740c:	move.l 20(sp),d0
   17410:	move.l 24(sp),d1
}
   17414:	movem.l (sp)+,d2-d3/a6
   17418:	lea 32(sp),sp
   1741c:	rts

0001741e <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   1741e:	lea -12(sp),sp
   17422:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17424:	move.l 20(sp),12(sp)
   1742a:	move.l 24(sp),8(sp)
   17430:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17436:	movea.l d0,a6
   17438:	move.l 12(sp),d0
   1743c:	move.l 8(sp),d1
   17440:	jsr -78(a6)
   17444:	move.l d0,4(sp)
   17448:	move.l 4(sp),d0
}
   1744c:	movea.l (sp)+,a6
   1744e:	lea 12(sp),sp
   17452:	rts

00017454 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17454:	lea -12(sp),sp
   17458:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1745a:	move.l 20(sp),12(sp)
   17460:	move.l 24(sp),8(sp)
   17466:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1746c:	movea.l d0,a6
   1746e:	move.l 12(sp),d0
   17472:	move.l 8(sp),d1
   17476:	jsr -42(a6)
   1747a:	move.l d0,4(sp)
   1747e:	move.l 4(sp),d0
}
   17482:	movea.l (sp)+,a6
   17484:	lea 12(sp),sp
   17488:	rts

0001748a <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1748a:	lea -20(sp),sp
   1748e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17492:	move.l 36(sp),24(sp)
   17498:	move.l 40(sp),28(sp)
   1749e:	move.l 44(sp),16(sp)
   174a4:	move.l 48(sp),20(sp)
   174aa:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   174b0:	movea.l d0,a6
   174b2:	move.l 24(sp),d0
   174b6:	move.l 28(sp),d1
   174ba:	move.l 16(sp),d2
   174be:	move.l 20(sp),d3
   174c2:	jsr -42(a6)
   174c6:	move.l d0,12(sp)
   174ca:	move.l 12(sp),d0
}
   174ce:	movem.l (sp)+,d2-d3/a6
   174d2:	lea 20(sp),sp
   174d6:	rts

000174d8 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   174d8:	lea -12(sp),sp
   174dc:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   174de:	move.l 20(sp),12(sp)
   174e4:	move.l 24(sp),8(sp)
   174ea:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   174f0:	movea.l d0,a6
   174f2:	move.l 12(sp),d0
   174f6:	move.l 8(sp),d1
   174fa:	jsr -42(a6)
   174fe:	move.l d0,4(sp)
   17502:	move.l 4(sp),d0
}
   17506:	movea.l (sp)+,a6
   17508:	lea 12(sp),sp
   1750c:	rts

0001750e <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   1750e:	lea -12(sp),sp
   17512:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17514:	move.l 20(sp),12(sp)
   1751a:	move.l 24(sp),8(sp)
   17520:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17526:	movea.l d0,a6
   17528:	move.l 12(sp),d0
   1752c:	move.l 8(sp),d1
   17530:	jsr -42(a6)
   17534:	move.l d0,4(sp)
   17538:	move.l 4(sp),d0
}
   1753c:	movea.l (sp)+,a6
   1753e:	lea 12(sp),sp
   17542:	rts

00017544 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17544:	lea -20(sp),sp
   17548:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1754c:	move.l 36(sp),24(sp)
   17552:	move.l 40(sp),28(sp)
   17558:	move.l 44(sp),16(sp)
   1755e:	move.l 48(sp),20(sp)
   17564:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   1756a:	movea.l d0,a6
   1756c:	move.l 24(sp),d0
   17570:	move.l 28(sp),d1
   17574:	move.l 16(sp),d2
   17578:	move.l 20(sp),d3
   1757c:	jsr -42(a6)
   17580:	move.l d0,12(sp)
   17584:	move.l 12(sp),d0
}
   17588:	movem.l (sp)+,d2-d3/a6
   1758c:	lea 20(sp),sp
   17590:	rts

00017592 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17592:	lea -12(sp),sp
   17596:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17598:	move.l 20(sp),12(sp)
   1759e:	move.l 24(sp),8(sp)
   175a4:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   175aa:	movea.l d0,a6
   175ac:	move.l 12(sp),d0
   175b0:	move.l 8(sp),d1
   175b4:	jsr -42(a6)
   175b8:	move.l d0,4(sp)
   175bc:	move.l 4(sp),d0
}
   175c0:	movea.l (sp)+,a6
   175c2:	lea 12(sp),sp
   175c6:	rts

000175c8 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   175c8:	lea -12(sp),sp
   175cc:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   175ce:	move.l 20(sp),12(sp)
   175d4:	move.l 24(sp),8(sp)
   175da:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   175e0:	movea.l d0,a6
   175e2:	move.l 12(sp),d0
   175e6:	move.l 8(sp),d1
   175ea:	jsr -42(a6)
   175ee:	move.l d0,4(sp)
   175f2:	move.l 4(sp),d0
}
   175f6:	movea.l (sp)+,a6
   175f8:	lea 12(sp),sp
   175fc:	rts

000175fe <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   175fe:	lea -32(sp),sp
   17602:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17606:	move.l 48(sp),36(sp)
   1760c:	move.l 52(sp),40(sp)
   17612:	move.l 56(sp),28(sp)
   17618:	move.l 60(sp),32(sp)
   1761e:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   17624:	movea.l d0,a6
   17626:	move.l 36(sp),d0
   1762a:	move.l 40(sp),d1
   1762e:	move.l 28(sp),d2
   17632:	move.l 32(sp),d3
   17636:	jsr -72(a6)
   1763a:	move.l d0,12(sp)
   1763e:	move.l d1,16(sp)
   17642:	move.l 12(sp),20(sp)
   17648:	move.l 16(sp),24(sp)
   1764e:	move.l 20(sp),d0
   17652:	move.l 24(sp),d1
}
   17656:	movem.l (sp)+,d2-d3/a6
   1765a:	lea 32(sp),sp
   1765e:	rts

00017660 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17660:	lea -12(sp),sp
   17664:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17666:	move.l 20(sp),12(sp)
   1766c:	move.l 24(sp),8(sp)
   17672:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17678:	movea.l d0,a6
   1767a:	move.l 12(sp),d0
   1767e:	move.l 8(sp),d1
   17682:	jsr -72(a6)
   17686:	move.l d0,4(sp)
   1768a:	move.l 4(sp),d0
}
   1768e:	movea.l (sp)+,a6
   17690:	lea 12(sp),sp
   17694:	rts

00017696 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17696:	lea -12(sp),sp
   1769a:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   1769c:	move.l 20(sp),8(sp)
   176a2:	move.l 24(sp),12(sp)
   176a8:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   176ae:	movea.l d0,a6
   176b0:	move.l 8(sp),d0
   176b4:	move.l 12(sp),d1
   176b8:	jsr -102(a6)
   176bc:	move.l d0,4(sp)
   176c0:	move.l 4(sp),d0
}
   176c4:	movea.l (sp)+,a6
   176c6:	lea 12(sp),sp
   176ca:	rts

000176cc <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   176cc:	       lea -24(sp),sp
   176d0:	       move.l a6,-(sp)
    if (x > 0) {
   176d2:	       clr.l -(sp)
   176d4:	       move.l 40(sp),-(sp)
   176d8:	       jsr 174d8 <__gtsf2>
   176de:	       addq.l #8,sp
   176e0:	       tst.l d0
   176e2:	   ,-- ble.s 17714 <atan2f+0x48>
        return IEEESPAtan(y / x);
   176e4:	   |   move.l 36(sp),-(sp)
   176e8:	   |   move.l 36(sp),-(sp)
   176ec:	   |   jsr 17222 <__divsf3>
   176f2:	   |   addq.l #8,sp
   176f4:	   |   move.l d0,8(sp)
   176f8:	   |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   176fe:	   |   movea.l d0,a6
   17700:	   |   move.l 8(sp),d0
   17704:	   |   jsr -30(a6)
   17708:	   |   move.l d0,4(sp)
   1770c:	   |   move.l 4(sp),d0
   17710:	,--|-- bra.w 17874 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17714:	|  '-> clr.l -(sp)
   17716:	|      move.l 40(sp),-(sp)
   1771a:	|      jsr 17592 <__ltsf2>
   17720:	|      addq.l #8,sp
   17722:	|      tst.l d0
   17724:	|  ,-- bge.s 17798 <atan2f+0xcc>
   17726:	|  |   clr.l -(sp)
   17728:	|  |   move.l 36(sp),-(sp)
   1772c:	|  |   jsr 17454 <__gesf2>
   17732:	|  |   addq.l #8,sp
   17734:	|  |   tst.l d0
   17736:	|  +-- blt.s 17798 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17738:	|  |   move.l 36(sp),-(sp)
   1773c:	|  |   move.l 36(sp),-(sp)
   17740:	|  |   jsr 17222 <__divsf3>
   17746:	|  |   addq.l #8,sp
   17748:	|  |   move.l d0,24(sp)
   1774c:	|  |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   17752:	|  |   movea.l d0,a6
   17754:	|  |   move.l 24(sp),d0
   17758:	|  |   jsr -30(a6)
   1775c:	|  |   move.l d0,20(sp)
   17760:	|  |   move.l 20(sp),d0
   17764:	|  |   move.l d0,-(sp)
   17766:	|  |   jsr 1728e <__extendsfdf2>
   1776c:	|  |   addq.l #4,sp
   1776e:	|  |   move.l #1413754136,-(sp)
   17774:	|  |   move.l #1074340347,-(sp)
   1777a:	|  |   move.l d1,-(sp)
   1777c:	|  |   move.l d0,-(sp)
   1777e:	|  |   jsr 1715e <__adddf3>
   17784:	|  |   lea 16(sp),sp
   17788:	|  |   move.l d1,-(sp)
   1778a:	|  |   move.l d0,-(sp)
   1778c:	|  |   jsr 17696 <__truncdfsf2>
   17792:	|  |   addq.l #8,sp
   17794:	+--|-- bra.w 17874 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17798:	|  '-> clr.l -(sp)
   1779a:	|      move.l 40(sp),-(sp)
   1779e:	|      jsr 17592 <__ltsf2>
   177a4:	|      addq.l #8,sp
   177a6:	|      tst.l d0
   177a8:	|  ,-- bge.s 1781a <atan2f+0x14e>
   177aa:	|  |   clr.l -(sp)
   177ac:	|  |   move.l 36(sp),-(sp)
   177b0:	|  |   jsr 17592 <__ltsf2>
   177b6:	|  |   addq.l #8,sp
   177b8:	|  |   tst.l d0
   177ba:	|  +-- bge.s 1781a <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   177bc:	|  |   move.l 36(sp),-(sp)
   177c0:	|  |   move.l 36(sp),-(sp)
   177c4:	|  |   jsr 17222 <__divsf3>
   177ca:	|  |   addq.l #8,sp
   177cc:	|  |   move.l d0,16(sp)
   177d0:	|  |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   177d6:	|  |   movea.l d0,a6
   177d8:	|  |   move.l 16(sp),d0
   177dc:	|  |   jsr -30(a6)
   177e0:	|  |   move.l d0,12(sp)
   177e4:	|  |   move.l 12(sp),d0
   177e8:	|  |   move.l d0,-(sp)
   177ea:	|  |   jsr 1728e <__extendsfdf2>
   177f0:	|  |   addq.l #4,sp
   177f2:	|  |   move.l #1413754136,-(sp)
   177f8:	|  |   move.l #1074340347,-(sp)
   177fe:	|  |   move.l d1,-(sp)
   17800:	|  |   move.l d0,-(sp)
   17802:	|  |   jsr 175fe <__subdf3>
   17808:	|  |   lea 16(sp),sp
   1780c:	|  |   move.l d1,-(sp)
   1780e:	|  |   move.l d0,-(sp)
   17810:	|  |   jsr 17696 <__truncdfsf2>
   17816:	|  |   addq.l #8,sp
   17818:	+--|-- bra.s 17874 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   1781a:	|  '-> clr.l -(sp)
   1781c:	|      move.l 40(sp),-(sp)
   17820:	|      jsr 17258 <__eqsf2>
   17826:	|      addq.l #8,sp
   17828:	|      tst.l d0
   1782a:	|  ,-- bne.s 17846 <atan2f+0x17a>
   1782c:	|  |   clr.l -(sp)
   1782e:	|  |   move.l 36(sp),-(sp)
   17832:	|  |   jsr 174d8 <__gtsf2>
   17838:	|  |   addq.l #8,sp
   1783a:	|  |   tst.l d0
   1783c:	|  +-- ble.s 17846 <atan2f+0x17a>
        return PI / 2;
   1783e:	|  |   move.l #1070141403,d0
   17844:	+--|-- bra.s 17874 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17846:	|  '-> clr.l -(sp)
   17848:	|      move.l 40(sp),-(sp)
   1784c:	|      jsr 17258 <__eqsf2>
   17852:	|      addq.l #8,sp
   17854:	|      tst.l d0
   17856:	|  ,-- bne.s 17872 <atan2f+0x1a6>
   17858:	|  |   clr.l -(sp)
   1785a:	|  |   move.l 36(sp),-(sp)
   1785e:	|  |   jsr 17592 <__ltsf2>
   17864:	|  |   addq.l #8,sp
   17866:	|  |   tst.l d0
   17868:	|  +-- bge.s 17872 <atan2f+0x1a6>
        return -PI / 2;
   1786a:	|  |   move.l #-1077342245,d0
   17870:	+--|-- bra.s 17874 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17872:	|  '-> moveq #0,d0
    }
}
   17874:	'----> movea.l (sp)+,a6
   17876:	       lea 24(sp),sp
   1787a:	       rts

0001787c <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   1787c:	lea -24(sp),sp
   17880:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17882:	move.l 32(sp),20(sp)
   17888:	move.l 36(sp),24(sp)
   1788e:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   17894:	movea.l d0,a6
   17896:	move.l 20(sp),d0
   1789a:	move.l 24(sp),d1
   1789e:	jsr -96(a6)
   178a2:	move.l d0,4(sp)
   178a6:	move.l d1,8(sp)
   178aa:	move.l 4(sp),12(sp)
   178b0:	move.l 8(sp),16(sp)
   178b6:	move.l 12(sp),d0
   178ba:	move.l 16(sp),d1
}
   178be:	movea.l (sp)+,a6
   178c0:	lea 24(sp),sp
   178c4:	rts

000178c6 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   178c6:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   178ca:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   178ce:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   178d2:	mulu.w 8(sp),d1
	addw	d1, d0
   178d6:	add.w d1,d0
	swap	d0
   178d8:	swap d0
	clrw	d0
   178da:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   178dc:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   178e0:	mulu.w 10(sp),d1
	addl	d1, d0
   178e4:	add.l d1,d0
	rts
   178e6:	rts

000178e8 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   178e8:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   178ea:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   178ee:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   178f2:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   178f8:	   ,-- bcc.s 17910 <__udivsi3+0x28>
	movel	d0, d2
   178fa:	   |   move.l d0,d2
	clrw	d2
   178fc:	   |   clr.w d2
	swap	d2
   178fe:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17900:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17902:	   |   move.w d2,d0
	swap	d0
   17904:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17906:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   1790a:	   |   divu.w d1,d2
	movew	d2, d0
   1790c:	   |   move.w d2,d0
	jra	6f
   1790e:	,--|-- bra.s 17940 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17910:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17912:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17914:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17916:	|  |   cmpi.l #65536,d1
	jcc	4b
   1791c:	|  '-- bcc.s 17912 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   1791e:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17920:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17926:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17928:	|      mulu.w d0,d1
	swap	d2
   1792a:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   1792c:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   1792e:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17930:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17932:	|  ,-- bne.s 1793e <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17934:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17936:	|  +-- bcs.s 1793e <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17938:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   1793c:	+--|-- bls.s 17940 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   1793e:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   17940:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17942:	       rts

00017944 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17944:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17946:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17948:	    move.l 12(sp),d1
	jpl	1f
   1794c:	,-- bpl.s 17952 <__divsi3+0xe>
	negl	d1
   1794e:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17950:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17952:	'-> move.l 8(sp),d0
	jpl	2f
   17956:	,-- bpl.s 1795c <__divsi3+0x18>
	negl	d0
   17958:	|   neg.l d0
	negb	d2
   1795a:	|   neg.b d2

2:	movel	d1, sp@-
   1795c:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1795e:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17960:	    jsr 178e8 <__udivsi3>
	addql	#8, sp
   17966:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17968:	    tst.b d2
	jpl	3f
   1796a:	,-- bpl.s 1796e <__divsi3+0x2a>
	negl	d0
   1796c:	|   neg.l d0

3:	movel	sp@+, d2
   1796e:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17970:	    rts

00017972 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17972:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17976:	move.l 4(sp),d0
	movel	d1, sp@-
   1797a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1797c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   1797e:	jsr 17944 <__divsi3>
	addql	#8, sp
   17984:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17986:	move.l 8(sp),d1
	movel	d1, sp@-
   1798a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1798c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1798e:	jsr 178c6 <__mulsi3>
	addql	#8, sp
   17994:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17996:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1799a:	sub.l d0,d1
	movel	d1, d0
   1799c:	move.l d1,d0
	rts
   1799e:	rts

000179a0 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   179a0:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   179a4:	move.l 4(sp),d0
	movel	d1, sp@-
   179a8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   179aa:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   179ac:	jsr 178e8 <__udivsi3>
	addql	#8, sp
   179b2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   179b4:	move.l 8(sp),d1
	movel	d1, sp@-
   179b8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   179ba:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   179bc:	jsr 178c6 <__mulsi3>
	addql	#8, sp
   179c2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   179c4:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   179c8:	sub.l d0,d1
	movel	d1, d0
   179ca:	move.l d1,d0
	rts
   179cc:	rts

000179ce <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   179ce:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   179d0:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   179d4:	jsr -516(a6)
    move.l (sp)+, a6
   179d8:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   179da:	rts

000179dc <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   179dc:	move.b d0,(a3)+
	rts
   179de:	rts
