
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #122976,d0
       8:	       subi.l #122976,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1e060 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #122976,d0
      40:	       subi.l #122976,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1e060 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 8690 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #122976,d0
      7e:	       subi.l #122976,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1e060 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 14f10 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1e81c <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 14f28 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1e060 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 14f10 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1e81c <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1e060 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 14f10 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1e81c <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 18faa <PutChar+0x4>
     35c:	|  |              |   jsr 18504 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1e824 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1e824 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1e824 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1e824 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1e824 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1e824 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1e824 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 18fd4 <PutChar+0x2e>
     834:	|   jsr 18504 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1e824 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 18ff0 <PutChar+0x4a>
     8a6:	|   jsr 18504 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1e824 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1e824 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1e824 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1e824 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1e824 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1e824 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1e824 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1e824 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1e81c <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1e824 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 14f10 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1e824 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1e712 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1e712 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1e712 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1e712 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1e712 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1e7da <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1e712 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1e712 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1e7d6 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1e712 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1e712 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 1478 <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1e712 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr a27c <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1e712 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1e716 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1e71a <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 30f6 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -48(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 19018 <PutChar+0x72>
     e1a:	          jsr 18504 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1e72e <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 19031 <PutChar+0x8b>
     e30:	      |   jsr 18504 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w 10c2 <CstBlankScreen+0x2b4>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1e728 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,40(sp)
  //custom->color[0] = 0xf00;


  WaitBlit();
     e4a:	|         move.l 1e828 <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 64(sp),d0
     e5a:	|         sub.l 56(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,38(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 68(sp),d0
     e6c:	|         move.l 60(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,36(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 40(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 40(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 40(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 40(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 40(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 38(sp),d0
     eb0:	|         movea.l 40(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 40(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 40(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1e72e <CstBackDrop>,d0
     ed2:	|         move.l d0,48(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 56(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 60(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,48(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 36(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 38(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,34(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 38(sp),d0
     f10:	|         muls.w 36(sp),d0
     f14:	|         move.w d0,32(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 1905f <PutChar+0xb9>
     f1e:	|         jsr 18504 <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 44(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 48(sp),d0
     f30:	|  |  |   movea.l 40(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 40(sp),a0
     f3c:	|  |  |   move.w 34(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1e828 <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,48(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,44(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 44(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 1907f <PutChar+0xd9>
     f68:	|         jsr 18504 <KPrintF>
     f6e:	|         addq.l #4,sp

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
     f70:	|         move.l 1e746 <CstCleanupQueueDrawBuffer>,28(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
     f78:	|         moveq #20,d0
     f7a:	|         move.l d0,24(sp)
     f7e:	|         clr.l 20(sp)
     f82:	|         move.l 1e81c <SysBase>,d0
     f88:	|         movea.l d0,a6
     f8a:	|         move.l 24(sp),d0
     f8e:	|         move.l 20(sp),d1
     f92:	|         jsr -684(a6)
     f96:	|         move.l d0,16(sp)
     f9a:	|         move.l 16(sp),d0
     f9e:	|         move.l d0,1e746 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
     fa4:	|         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
     faa:	|         move.l 28(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = x1;
     fb0:	|         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
     fb6:	|         move.l 56(sp),d0
     fba:	|         move.w d0,(a0)
  CstCleanupQueueDrawBuffer->y = y1;
     fbc:	|         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
     fc2:	|         move.l 60(sp),d0
     fc6:	|         move.w d0,2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
     fca:	|         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
     fd0:	|         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = width/16;
     fd4:	|         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
     fda:	|         move.w 38(sp),d0
     fde:	|         lsr.w #4,d0
     fe0:	|         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = height;
     fe4:	|         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
     fea:	|         move.w 36(sp),10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = x1/8;;
     ff0:	|         move.l 56(sp),d0
     ff4:	|     ,-- bpl.s ff8 <CstBlankScreen+0x1ea>
     ff6:	|     |   addq.l #7,d0
     ff8:	|     '-> asr.l #3,d0
     ffa:	|         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    1000:	|         move.l d0,d0
    1002:	|         move.w d0,12(a0)
  CstCleanupQueueDrawBuffer->starty = y1;
    1006:	|         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    100c:	|         move.l 60(sp),d0
    1010:	|         move.w d0,14(a0)

  next = CstCleanupQueueViewBuffer;
    1014:	|         move.l 1e742 <CstCleanupQueueViewBuffer>,28(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    101c:	|         moveq #20,d0
    101e:	|         move.l d0,12(sp)
    1022:	|         clr.l 8(sp)
    1026:	|         move.l 1e81c <SysBase>,d0
    102c:	|         movea.l d0,a6
    102e:	|         move.l 12(sp),d0
    1032:	|         move.l 8(sp),d1
    1036:	|         jsr -684(a6)
    103a:	|         move.l d0,4(sp)
    103e:	|         move.l 4(sp),d0
    1042:	|         move.l d0,1e742 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1048:	|         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    104e:	|         move.l 28(sp),16(a0)
  CstCleanupQueueViewBuffer->x = x1;
    1054:	|         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    105a:	|         move.l 56(sp),d0
    105e:	|         move.w d0,(a0)
  CstCleanupQueueViewBuffer->y = y1;
    1060:	|         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    1066:	|         move.l 60(sp),d0
    106a:	|         move.w d0,2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    106e:	|         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    1074:	|         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = width/16;
    1078:	|         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    107e:	|         move.w 38(sp),d0
    1082:	|         lsr.w #4,d0
    1084:	|         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = height;
    1088:	|         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    108e:	|         move.w 36(sp),10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = x1/8;
    1094:	|         move.l 56(sp),d0
    1098:	|     ,-- bpl.s 109c <CstBlankScreen+0x28e>
    109a:	|     |   addq.l #7,d0
    109c:	|     '-> asr.l #3,d0
    109e:	|         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    10a4:	|         move.l d0,d0
    10a6:	|         move.w d0,12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    10aa:	|         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    10b0:	|         clr.w 14(a0)

  KPrintF("CstBlankScreen: end\n");
    10b4:	|         pea 1909f <PutChar+0xf9>
    10ba:	|         jsr 18504 <KPrintF>
    10c0:	|         addq.l #4,sp

  //custom->color[0] = 0x000;	
}
    10c2:	'-------> movea.l (sp)+,a6
    10c4:	          lea 48(sp),sp
    10c8:	          rts

000010ca <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
    10ca:	       lea -52(sp),sp
    10ce:	       move.l a6,-(sp)
    10d0:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    10d2:	       move.l #400,32(sp)
    10da:	       moveq #2,d0
    10dc:	       move.l d0,28(sp)
    10e0:	       move.l 1e81c <SysBase>,d0
    10e6:	       movea.l d0,a6
    10e8:	       move.l 32(sp),d0
    10ec:	       move.l 28(sp),d1
    10f0:	       jsr -198(a6)
    10f4:	       move.l d0,24(sp)
    10f8:	       move.l 24(sp),d0
    10fc:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1100:	   ,-- bne.s 112a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1102:	   |   pea 28 <_start+0x28>
    1106:	   |   pea 190b4 <PutChar+0x10e>
    110c:	   |   jsr 18504 <KPrintF>
    1112:	   |   addq.l #8,sp
    Exit(1);
    1114:	   |   moveq #1,d1
    1116:	   |   move.l d1,16(sp)
    111a:	   |   move.l 1e824 <DOSBase>,d0
    1120:	   |   movea.l d0,a6
    1122:	   |   move.l 16(sp),d1
    1126:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    112a:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1130:	       move.l 56(sp),1e752 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    1138:	       move.l #122978,52(sp)
  for(int i=0; i<16;i++)
    1140:	       clr.l 48(sp)
    1144:	   ,-- bra.s 116a <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1146:	,--|-> move.l 52(sp),d1
    114a:	|  |   move.l d1,d2
    114c:	|  |   addq.l #4,d2
    114e:	|  |   move.l d2,52(sp)
    1152:	|  |   move.l 56(sp),d0
    1156:	|  |   move.l d0,d2
    1158:	|  |   addq.l #4,d2
    115a:	|  |   move.l d2,56(sp)
    115e:	|  |   movea.l d1,a0
    1160:	|  |   move.l (a0),d1
    1162:	|  |   movea.l d0,a0
    1164:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    1166:	|  |   addq.l #1,48(sp)
    116a:	|  '-> moveq #15,d0
    116c:	|      cmp.l 48(sp),d0
    1170:	'----- bge.s 1146 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1172:	       move.l #123042,52(sp)

  for(int i=0; i<12;i++)
    117a:	       clr.l 44(sp)
    117e:	   ,-- bra.s 11a4 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1180:	,--|-> move.l 52(sp),d1
    1184:	|  |   move.l d1,d2
    1186:	|  |   addq.l #4,d2
    1188:	|  |   move.l d2,52(sp)
    118c:	|  |   move.l 56(sp),d0
    1190:	|  |   move.l d0,d2
    1192:	|  |   addq.l #4,d2
    1194:	|  |   move.l d2,56(sp)
    1198:	|  |   movea.l d1,a0
    119a:	|  |   move.l (a0),d1
    119c:	|  |   movea.l d0,a0
    119e:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    11a0:	|  |   addq.l #1,44(sp)
    11a4:	|  '-> moveq #11,d0
    11a6:	|      cmp.l 44(sp),d0
    11aa:	'----- bge.s 1180 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    11ac:	       move.l #123090,52(sp)
  for(int i=0; i<10;i++)
    11b4:	       clr.l 40(sp)
    11b8:	   ,-- bra.s 11de <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    11ba:	,--|-> move.l 52(sp),d1
    11be:	|  |   move.l d1,d2
    11c0:	|  |   addq.l #4,d2
    11c2:	|  |   move.l d2,52(sp)
    11c6:	|  |   move.l 56(sp),d0
    11ca:	|  |   move.l d0,d2
    11cc:	|  |   addq.l #4,d2
    11ce:	|  |   move.l d2,56(sp)
    11d2:	|  |   movea.l d1,a0
    11d4:	|  |   move.l (a0),d1
    11d6:	|  |   movea.l d0,a0
    11d8:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    11da:	|  |   addq.l #1,40(sp)
    11de:	|  '-> moveq #9,d0
    11e0:	|      cmp.l 40(sp),d0
    11e4:	'----- bge.s 11ba <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    11e6:	       move.l #123130,52(sp)
  CstClColor = (UWORD *) cl;
    11ee:	       move.l 56(sp),1e74a <CstClColor>
  for(int i=0; i<32;i++)
    11f6:	       clr.l 36(sp)
    11fa:	   ,-- bra.s 1220 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    11fc:	,--|-> move.l 52(sp),d1
    1200:	|  |   move.l d1,d2
    1202:	|  |   addq.l #4,d2
    1204:	|  |   move.l d2,52(sp)
    1208:	|  |   move.l 56(sp),d0
    120c:	|  |   move.l d0,d2
    120e:	|  |   addq.l #4,d2
    1210:	|  |   move.l d2,56(sp)
    1214:	|  |   movea.l d1,a0
    1216:	|  |   move.l (a0),d1
    1218:	|  |   movea.l d0,a0
    121a:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    121c:	|  |   addq.l #1,36(sp)
    1220:	|  '-> moveq #31,d0
    1222:	|      cmp.l 36(sp),d0
    1226:	'----- bge.s 11fc <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1228:	       moveq #40,d1
    122a:	       cmp.l 64(sp),d1
    122e:	   ,-- bge.s 128c <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1230:	   |   moveq #-40,d2
    1232:	   |   add.l 64(sp),d2
    1236:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    123a:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1240:	   |   move.l 8(sp),d0
    1244:	   |   move.l d0,d1
    1246:	   |   addq.l #2,d1
    1248:	   |   move.l d1,8(sp)
    124c:	   |   movea.l d0,a0
    124e:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1252:	   |   move.l 8(sp),d0
    1256:	   |   move.l d0,d1
    1258:	   |   addq.l #2,d1
    125a:	   |   move.l d1,8(sp)
    125e:	   |   move.l 12(sp),d1
    1262:	   |   movea.l d0,a0
    1264:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    1266:	   |   move.l 8(sp),d0
    126a:	   |   move.l d0,d1
    126c:	   |   addq.l #2,d1
    126e:	   |   move.l d1,8(sp)
    1272:	   |   movea.l d0,a0
    1274:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    1278:	   |   move.l 8(sp),d0
    127c:	   |   move.l d0,d1
    127e:	   |   addq.l #2,d1
    1280:	   |   move.l d1,8(sp)
    1284:	   |   move.l 12(sp),d1
    1288:	   |   movea.l d0,a0
    128a:	   |   move.w d1,(a0)
  }

  *cl++ = 0xffdffffe;
    128c:	   '-> move.l 56(sp),d0
    1290:	       move.l d0,d1
    1292:	       addq.l #4,d1
    1294:	       move.l d1,56(sp)
    1298:	       movea.l d0,a0
    129a:	       move.l #-2097154,(a0)
  *cl++ = 0x2d01ff00;
    12a0:	       move.l 56(sp),d0
    12a4:	       move.l d0,d1
    12a6:	       addq.l #4,d1
    12a8:	       move.l d1,56(sp)
    12ac:	       movea.l d0,a0
    12ae:	       move.l #755105536,(a0)
  *cl++ = 0x9c8010;
    12b4:	       move.l 56(sp),d0
    12b8:	       move.l d0,d1
    12ba:	       addq.l #4,d1
    12bc:	       move.l d1,56(sp)
    12c0:	       movea.l d0,a0
    12c2:	       move.l #10256400,(a0)

  *cl++ = 0xfffffffe;
    12c8:	       move.l 56(sp),d0
    12cc:	       move.l d0,d1
    12ce:	       addq.l #4,d1
    12d0:	       move.l d1,56(sp)
    12d4:	       moveq #-2,d2
    12d6:	       movea.l d0,a0
    12d8:	       move.l d2,(a0)
  return (UWORD *) retval;  
    12da:	       move.l 20(sp),d0
}
    12de:	       move.l (sp)+,d2
    12e0:	       movea.l (sp)+,a6
    12e2:	       lea 52(sp),sp
    12e6:	       rts

000012e8 <CstCreateZBufferLayer>:

void CstCreateZBufferLayer (BYTE *zbufferdata, UWORD x, UWORD y, UWORD width, UWORD height)
{
    12e8:	    lea -24(sp),sp
    12ec:	    move.l a6,-(sp)
    12ee:	    movea.l 36(sp),a1
    12f2:	    movea.l 40(sp),a0
    12f6:	    move.l 44(sp),d1
    12fa:	    move.l 48(sp),d0
    12fe:	    movea.w a1,a1
    1300:	    move.w a1,12(sp)
    1304:	    movea.w a0,a0
    1306:	    move.w a0,10(sp)
    130a:	    move.w d1,d1
    130c:	    move.w d1,8(sp)
    1310:	    move.w d0,d0
    1312:	    move.w d0,6(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1316:	    move.l #14675968,22(sp)

  #ifdef EMULATOR
    debug_register_bitmap(zbufferdata, "extrazbufferlayer", 320, 250, 1, 0);
    131e:	    clr.l -(sp)
    1320:	    pea 1 <_start+0x1>
    1324:	    pea fa <copyString+0x42>
    1328:	    pea 140 <decodeFilename+0x28>
    132c:	    pea 190ef <PutChar+0x149>
    1332:	    move.l 52(sp),-(sp)
    1336:	    jsr 185ec <debug_register_bitmap>
    133c:	    lea 24(sp),sp
  #endif    

  WaitBlit();
    1340:	    move.l 1e828 <GfxBase>,d0
    1346:	    movea.l d0,a6
    1348:	    jsr -228(a6)
  custom->bltafwm = 0xffff;
    134c:	    movea.l 22(sp),a0
    1350:	    move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1356:	    movea.l 22(sp),a0
    135a:	    move.w #-1,70(a0)
  custom->bltdmod = 0;  
    1360:	    movea.l 22(sp),a0
    1364:	    move.w #0,102(a0)
  custom->bltcon0 =  0x1f0;
    136a:	    movea.l 22(sp),a0
    136e:	    move.w #496,64(a0)
  custom->bltcon1 = 0x0;
    1374:	    movea.l 22(sp),a0
    1378:	    move.w #0,66(a0)
  custom->bltdpt = zbufferdata;
    137e:	    movea.l 22(sp),a0
    1382:	    move.l 32(sp),84(a0)
  custom->bltadat = 0;
    1388:	    movea.l 22(sp),a0
    138c:	    move.w #0,116(a0)
  custom->bltsize = 256 * 64 + 20;
    1392:	    movea.l 22(sp),a0
    1396:	    move.w #16404,88(a0)

  WaitBlit();
    139c:	    move.l 1e828 <GfxBase>,d0
    13a2:	    movea.l d0,a6
    13a4:	    jsr -228(a6)
  UWORD bltxoffset = (x / 16)*2;
    13a8:	    move.w 12(sp),d0
    13ac:	    lsr.w #4,d0
    13ae:	    add.w d0,d0
    13b0:	    move.w d0,20(sp)
  UWORD bltshift = x % 16;
    13b4:	    move.w 12(sp),d0
    13b8:	    andi.w #15,d0
    13bc:	    move.w d0,18(sp)
  UWORD bltafwm = 0xffff >> bltshift;
    13c0:	    moveq #0,d0
    13c2:	    move.w 18(sp),d0
    13c6:	    moveq #0,d1
    13c8:	    not.w d1
    13ca:	    asr.l d0,d1
    13cc:	    move.w d1,16(sp)
  UWORD bltalwm = ~bltafwm; 
    13d0:	    move.w 16(sp),d0
    13d4:	    not.w d0
    13d6:	    move.w d0,14(sp)

  UWORD bltwidth = width / 16;
    13da:	    move.w 8(sp),d0
    13de:	    lsr.w #4,d0
    13e0:	    move.w d0,26(sp)
  if(bltalwm != 0) bltwidth += 1; 
    13e4:	    tst.w 14(sp)
    13e8:	,-- beq.s 13ee <CstCreateZBufferLayer+0x106>
    13ea:	|   addq.w #1,26(sp)

  custom->bltafwm = bltafwm;
    13ee:	'-> movea.l 22(sp),a0
    13f2:	    move.w 16(sp),68(a0)
  custom->bltalwm = bltalwm;
    13f8:	    movea.l 22(sp),a0
    13fc:	    move.w 14(sp),70(a0)
  custom->bltdmod = 40 - bltwidth*2;  
    1402:	    moveq #0,d0
    1404:	    move.w 26(sp),d0
    1408:	    moveq #20,d1
    140a:	    sub.l d0,d1
    140c:	    move.l d1,d0
    140e:	    add.w d0,d0
    1410:	    movea.l 22(sp),a0
    1414:	    move.w d0,102(a0)
  custom->bltcon0 =  0x1f0;
    1418:	    movea.l 22(sp),a0
    141c:	    move.w #496,64(a0)
  custom->bltcon1 = 0x0;
    1422:	    movea.l 22(sp),a0
    1426:	    move.w #0,66(a0)
  custom->bltdpt = zbufferdata + (y * 40) + bltxoffset;
    142c:	    moveq #0,d1
    142e:	    move.w 10(sp),d1
    1432:	    move.l d1,d0
    1434:	    add.l d0,d0
    1436:	    add.l d0,d0
    1438:	    add.l d1,d0
    143a:	    lsl.l #3,d0
    143c:	    move.l d0,d1
    143e:	    moveq #0,d0
    1440:	    move.w 20(sp),d0
    1444:	    add.l d1,d0
    1446:	    add.l 32(sp),d0
    144a:	    movea.l 22(sp),a0
    144e:	    move.l d0,84(a0)
  custom->bltadat = 0xffff;;
    1452:	    movea.l 22(sp),a0
    1456:	    move.w #-1,116(a0)
  custom->bltsize = height * 64 + bltwidth;
    145c:	    move.w 6(sp),d0
    1460:	    lsl.w #6,d0
    1462:	    add.w 26(sp),d0
    1466:	    movea.l 22(sp),a0
    146a:	    move.w d0,88(a0)

}
    146e:	    nop
    1470:	    movea.l (sp)+,a6
    1472:	    lea 24(sp),sp
    1476:	    rts

00001478 <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    1478:	lea -20(sp),sp
    147c:	movea.l 24(sp),a0
    1480:	move.l 28(sp),d1
    1484:	move.l 32(sp),d0
    1488:	movea.w a0,a0
    148a:	move.w a0,4(sp)
    148e:	move.w d1,d1
    1490:	move.w d1,2(sp)
    1494:	move.w d0,d0
    1496:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    1498:	move.w 2(sp),d0
    149c:	movea.l 36(sp),a0
    14a0:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    14a2:	move.w 4(sp),d0
    14a6:	lsr.w #1,d0
    14a8:	movea.l 36(sp),a0
    14ac:	addq.l #1,a0
    14ae:	move.l d0,d0
    14b0:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    14b2:	move.w 2(sp),d1
    14b6:	move.w (sp),d0
    14b8:	movea.l 36(sp),a0
    14bc:	addq.l #2,a0
    14be:	add.b d1,d0
    14c0:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    14c2:	move.w 4(sp),d0
    14c6:	andi.w #1,d0
    14ca:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    14ce:	move.w 2(sp),d0
    14d2:	add.w (sp),d0
    14d4:	move.w d0,d0
    14d6:	andi.l #65535,d0
    14dc:	asr.l #7,d0
    14de:	move.l d0,d0
    14e0:	move.w d0,d1
    14e2:	andi.w #2,d1
    14e6:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    14ea:	moveq #0,d0
    14ec:	move.w 2(sp),d0
    14f0:	asr.l #6,d0
    14f2:	move.l d0,d0
    14f4:	move.w d0,d1
    14f6:	andi.w #4,d1
    14fa:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    14fe:	move.w 18(sp),d1
    1502:	move.w 16(sp),d0
    1506:	add.b d0,d1
    1508:	move.w 14(sp),d0
    150c:	movea.l 36(sp),a0
    1510:	addq.l #3,a0
    1512:	add.b d1,d0
    1514:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    1516:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    151c:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1522:	move.l 10(sp),d0
    1526:	clr.w d0
    1528:	swap d0
    152a:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    152e:	move.l 1e752 <CstClCursor>,d0
    1534:	movea.l d0,a0
    1536:	addq.l #2,a0
    1538:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    153c:	move.l 1e752 <CstClCursor>,d0
    1542:	movea.l d0,a0
    1544:	addq.l #6,a0
    1546:	move.w 8(sp),(a0)

}
    154a:	nop
    154c:	lea 20(sp),sp
    1550:	rts

00001552 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    1552:	                                                                subq.l #8,sp
    1554:	                                                                movem.l d2-d7/a2-a6,-(sp)
    1558:	                                                                movea.l 56(sp),a3
    155c:	                                                                movea.l 60(sp),a2
    1560:	                                                                move.l 64(sp),d2
    1564:	                                                                move.l 68(sp),d7
    1568:	                                                                movea.w d2,a4
    156a:	                                                                move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    156e:	                                                                clr.l -(sp)
    1570:	                                                                pea 1 <_start+0x1>
    1574:	                                                                movea.w 6(a3),a0
    1578:	                                                                move.l a0,-(sp)
    157a:	                                                                movea.w 2(a3),a0
    157e:	                                                                move.l a0,-(sp)
    1580:	                                                                pea 19101 <PutChar+0x15b>
    1586:	                                                                move.l 1e756 <CstZBufferResult>,-(sp)
    158c:	                                                                lea 185ec <debug_register_bitmap>,a5
    1592:	                                                                jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    1594:	                                                                clr.l -(sp)
    1596:	                                                                pea 1 <_start+0x1>
    159a:	                                                                movea.w 6(a3),a0
    159e:	                                                                move.l a0,-(sp)
    15a0:	                                                                move.w 2(a3),d0
    15a4:	                                                                addi.w #16,d0
    15a8:	                                                                movea.w d0,a0
    15aa:	                                                                move.l a0,-(sp)
    15ac:	                                                                pea 1910c <PutChar+0x166>
    15b2:	                                                                move.l 1e75a <CstZBufferWork>,-(sp)
    15b8:	                                                                jsr (a5)
  #endif    

  while(zbuffer) 
    15ba:	                                                                lea 48(sp),sp
    15be:	                                                                cmpa.w #0,a2
    15c2:	,-------------------------------------------------------------- beq.w 1a80 <CstDrawZBuffer+0x52e>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    15c6:	|                                                               move.w d2,48(sp)
    15ca:	|                                                               move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    15cc:	|                                                               movea.l 4(a3),a5
  WORD zbufferset = 0;
    15d0:	|                                                               clr.w 46(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    15d4:	|                       ,-------------------------------------> move.w a5,d3
    15d6:	|                       |                                       add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    15d8:	|                       |                                       andi.l #65535,d3
    15de:	|                       |                                       cmp.l 16(a2),d3
    15e2:	|        ,--------------|-------------------------------------- bge.w 1788 <CstDrawZBuffer+0x236>
    WORD zbufferx1oncanvas = zbuffer->topx;
    15e6:	|        |              |                                       move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    15ea:	|        |              |                                       move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    15ee:	|        |              |                                       move.w d6,d0
    15f0:	|        |              |                                       add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    15f4:	|        |              |                                       move.w 6(a2),d4
    15f8:	|        |              |                                       add.w d5,d4
    {    
      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    15fa:	|        |              |                                       cmp.w a4,d6
    15fc:	|        |           ,--|-------------------------------------- bge.w 1914 <CstDrawZBuffer+0x3c2>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    1600:	|        |           |  |                                       cmp.w a4,d0
    1602:	|        +-----------|--|-------------------------------------- ble.w 1788 <CstDrawZBuffer+0x236>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1606:	|        |           |  |                                       move.w 50(sp),d0
    160a:	|        |           |  |                                       cmp.w d0,d5
    160c:	|        |     ,-----|--|-------------------------------------- blt.w 1a60 <CstDrawZBuffer+0x50e>
    1610:	|        |     |     |  |                                       movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1612:	|        |     |     |  |                                       cmpa.l d3,a0
    1614:	|        +-----|-----|--|-------------------------------------- bge.w 1788 <CstDrawZBuffer+0x236>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1618:	|        |     |     |  |                                       move.w 48(sp),d0
    161c:	|        |     |     |  |                                       sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    161e:	|        |     |     |  |                                       move.w d0,d6
    1620:	|        |     |     |  |                                       andi.w #15,d6
    1624:	|        |     |     |  |                                       movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    1626:	|        |     |     |  |                                       tst.l d2
    1628:	|        |  ,--|-----|--|-------------------------------------- blt.w 17aa <CstDrawZBuffer+0x258>
    162c:	|        |  |  |  ,--|--|-------------------------------------> asr.l #4,d2
    162e:	|        |  |  |  |  |  |                                       add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    1630:	|        |  |  |  |  |  |                                       move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb193e>
          custom->bltalwm = 0xffff;                      
    1638:	|        |  |  |  |  |  |                                       move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1940>
          custom->bltcon1 = 0;          
    1640:	|        |  |  |  |  |  |                                       move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb193c>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    1648:	|        |  |  |  |  |  |                                       lea 1e828 <GfxBase>,a0
    164e:	|        |  |  |  |  |  |                                       movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1650:	|        |  |  |  |  |  |                                       lsr.w #4,d0
    1652:	|        |  |  |  |  |  |                                       move.w d0,d6
    1654:	|        |  |  |  |  |  |                                       add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    1656:	|        |  |  |  |  |  |                                       andi.l #65535,d6
    165c:	|        |  |  |  |  |  |                                       add.l 20(a2),d6
          if (xdiffrest) {
    1660:	|        |  |  |  |  |  |                                       clr.w d0
    1662:	|        |  |  |  |  |  |                                       cmp.w a5,d0
    1664:	|        |  |  |  |  |  |        ,----------------------------- beq.w 17ea <CstDrawZBuffer+0x298>
            bytewidth += 2; 
    1668:	|        |  |  |  |  |  |        |        ,-------------------> addq.w #2,d2
            WaitBlit();   
    166a:	|        |  |  |  |  |  |        |        |                     jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    166e:	|        |  |  |  |  |  |        |        |                     move.l 1e75a <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    1678:	|        |  |  |  |  |  |        |        |                     move.w a5,d0
    167a:	|        |  |  |  |  |  |        |        |                     moveq #12,d1
    167c:	|        |  |  |  |  |  |        |        |                     lsl.w d1,d0
    167e:	|        |  |  |  |  |  |        |        |                     move.w #2544,d1
    1682:	|        |  |  |  |  |  |        |        |                     sub.w d0,d1
    1684:	|        |  |  |  |  |  |        |        |                     move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb193a>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    168a:	|        |  |  |  |  |  |        |        |                     move.l (a2),d0
    168c:	|        |  |  |  |  |  |        |        |                     move.l d0,d1
    168e:	|  ,-----|--|--|--|--|--|--------|--------|-------------------- bmi.w 1b32 <CstDrawZBuffer+0x5e0>
    1692:	|  |     |  |  |  |  |  |        |        |                     asr.l #3,d1
    1694:	|  |     |  |  |  |  |  |        |        |                     sub.w d2,d1
    1696:	|  |     |  |  |  |  |  |        |        |                     move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb195e>
            custom->bltdmod = 0;                                                            
    169c:	|  |     |  |  |  |  |  |        |        |                     move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1960>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    16a4:	|  |  ,--|--|--|--|--|--|--------|--------|-------------------> move.w d7,d1
    16a6:	|  |  |  |  |  |  |  |  |        |        |                     sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    16a8:	|  |  |  |  |  |  |  |  |        |        |                     movea.w d4,a0
    16aa:	|  |  |  |  |  |  |  |  |        |        |                     cmpa.l d3,a0
    16ac:	|  |  |  |  |  |  |  |  |        |     ,--|-------------------- ble.w 182a <CstDrawZBuffer+0x2d8>
          height = sprite->height;
    16b0:	|  |  |  |  |  |  |  |  |        |     |  |        ,----------> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    16b4:	|  |  |  |  |  |  |  |  |        |     |  |        |            move.l d0,-(sp)
    16b6:	|  |  |  |  |  |  |  |  |        |     |  |        |            move.w d1,-(sp)
    16b8:	|  |  |  |  |  |  |  |  |        |     |  |        |            clr.w -(sp)
    16ba:	|  |  |  |  |  |  |  |  |        |     |  |        |            jsr 18e90 <__mulsi3>
    16c0:	|  |  |  |  |  |  |  |  |        |     |  |        |            addq.l #8,sp
    16c2:	|  |  |  |  |  |  |  |  |        |     |  |        |            tst.l d0
    16c4:	|  |  |  |  |  |  |  |  |        |     |  |  ,-----|----------- blt.w 1840 <CstDrawZBuffer+0x2ee>
    16c8:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  ,-------> asr.l #3,d0
    16ca:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         add.l d6,d0
    16cc:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
        UWORD bltsize =  height*64+bytewidth/2;          
    16d2:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         lsl.w #6,d4
    16d4:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    16d6:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         add.w d2,d4
    16d8:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
       
        WaitBlit();
    16de:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         lea 1e828 <GfxBase>,a0
    16e4:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         movea.l (a0),a6
    16e6:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         jsr -228(a6)

        custom->bltafwm = 0xffff;
    16ea:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb193e>
        custom->bltalwm = 0xffff;
    16f2:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1940>
        custom->bltamod = 2;
    16fa:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb195e>
        custom->bltbmod = 0;
    1702:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb195c>
        custom->bltdmod = 0;
    170a:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1960>
        custom->bltcon0 = 0xd0c; //Copy A to D
    1712:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb193a>
        custom->bltcon1 = 0;        
    171a:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb193c>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    1722:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l 1e75a <CstZBufferWork>,d0
    1728:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         addq.l #2,d0
    172a:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>

        if (zbufferset == 0) {
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1730:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l (a3),d2
    1732:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         movea.l 4(a3),a5
        if (zbufferset == 0) {
    1736:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         tst.w 46(sp)
    173a:	|  |  |  |  |  |  |  |  |        |  ,--|--|--|-----|--|-------- bne.w 18b8 <CstDrawZBuffer+0x366>
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    173e:	|  |  |  |  |  |  |  |  |        |  |  |  |  |  ,--|--|-------> move.l d2,d0
    1740:	|  |  |  |  |  |  |  |  |  ,-----|--|--|--|--|--|--|--|-------- bmi.w 18ee <CstDrawZBuffer+0x39c>
    1744:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         asr.l #3,d0
    1746:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l a5,-(sp)
    1748:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l d0,-(sp)
    174a:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         jsr 18e90 <__mulsi3>
    1750:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         addq.l #8,sp
    1752:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l d0,d1
    1754:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l d0,d1
    1756:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l d1,d1
    1758:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l d0,d1
    175a:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l 24(a3),d1
    175e:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1946>
        }
        else {
          custom->bltbpt = (APTR) CstZBufferResult;
        }
        custom->bltdpt = (APTR) CstZBufferResult;
    1764:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|-------> move.l 1e756 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    176e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.w a5,d1
    1770:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         lsl.w #6,d1
    1772:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d2,d0
    1774:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----- bmi.w 18d6 <CstDrawZBuffer+0x384>
    1778:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,-> asr.l #4,d0
    177a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    177c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
        zbufferset = 1;
    1782:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w #1,46(sp)
      }
    }
    zbuffer = zbuffer->nextPanel;
    1788:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    178c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    1790:	|  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|--|--|-- bne.w 15d4 <CstDrawZBuffer+0x82>
  }
  
  if(zbufferset == 0)
    1794:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   tst.w 46(sp)
    1798:	+--|--|--|--|--|--|--|-----|--|--|--|--|--|--|--|--|--|--|--|-- beq.w 1a80 <CstDrawZBuffer+0x52e>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    179c:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.l 1e756 <CstZBufferResult>,d0

}
    17a2:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    17a6:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    17a8:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    17aa:	|  |  |  |  >--|--|--|-----|--|--|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    17ac:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    17ae:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    17b0:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    17b2:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb193e>
          custom->bltalwm = 0xffff;                      
    17ba:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1940>
          custom->bltcon1 = 0;          
    17c2:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb193c>
            WaitBlit();   
    17ca:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   lea 1e828 <GfxBase>,a0
    17d0:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    17d2:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    17d4:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    17d6:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    17d8:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    17de:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    17e2:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   clr.w d0
    17e4:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    17e6:	|  |  |  |  |  |  |  |     |  |  |  |  |  '--|--|--|--|--|--|-- bne.w 1668 <CstDrawZBuffer+0x116>
            WaitBlit();         
    17ea:	|  |  |  |  |  |  |  |     |  |  '--|--|-----|--|--|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    17ee:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l 1e75a <CstZBufferWork>,d0
    17f4:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   addq.l #2,d0
    17f6:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
            custom->bltcon0 = 4096 + 0x9f0;              
    17fc:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb193a>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1804:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l (a2),d0
    1806:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l d0,d1
    1808:	|  |  |  |  |  |  |  |  ,--|--|-----|--|-----|--|--|--|--|--|-- bmi.w 1b1a <CstDrawZBuffer+0x5c8>
    180c:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   asr.l #3,d1
    180e:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   sub.w d2,d1
    1810:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb195e>
            custom->bltdmod = 2;                                                            
    1816:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1960>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    181e:	|  |  |  |  |  |  |  |  |  |  |  ,--|--|-----|--|--|--|--|--|-> move.w d7,d1
    1820:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1822:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |   movea.w d4,a0
    1824:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |   cmpa.l d3,a0
    1826:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  '--|--|--|-- bgt.w 16b0 <CstDrawZBuffer+0x15e>
          height = zbuffery2oncanvas - spritey1oncanvas;
    182a:	|  |  |  |  |  |  |  |  |  |  |  |  |  '-----|--|-----|--|--|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    182c:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   move.l d0,-(sp)
    182e:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   move.w d1,-(sp)
    1830:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   clr.w -(sp)
    1832:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   jsr 18e90 <__mulsi3>
    1838:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   addq.l #8,sp
    183a:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   tst.l d0
    183c:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     '--|--|-- bge.w 16c8 <CstDrawZBuffer+0x176>
    1840:	|  |  |  |  |  |  |  |  |  |  |  |  |        '--|--------|--|-> addq.l #7,d0
    1842:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   asr.l #3,d0
    1844:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   add.l d6,d0
    1846:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
        UWORD bltsize =  height*64+bytewidth/2;          
    184c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   lsl.w #6,d4
    184e:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1850:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   add.w d2,d4
    1852:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
        WaitBlit();
    1858:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   lea 1e828 <GfxBase>,a0
    185e:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   movea.l (a0),a6
    1860:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   jsr -228(a6)
        custom->bltafwm = 0xffff;
    1864:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb193e>
        custom->bltalwm = 0xffff;
    186c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1940>
        custom->bltamod = 2;
    1874:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb195e>
        custom->bltbmod = 0;
    187c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb195c>
        custom->bltdmod = 0;
    1884:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1960>
        custom->bltcon0 = 0xd0c; //Copy A to D
    188c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb193a>
        custom->bltcon1 = 0;        
    1894:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb193c>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    189c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l 1e75a <CstZBufferWork>,d0
    18a2:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   addq.l #2,d0
    18a4:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    18aa:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l (a3),d2
    18ac:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   movea.l 4(a3),a5
        if (zbufferset == 0) {
    18b0:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   tst.w 46(sp)
    18b4:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--------|--|-- beq.w 173e <CstDrawZBuffer+0x1ec>
          custom->bltbpt = (APTR) CstZBufferResult;
    18b8:	|  |  |  |  |  |  |  |  |  |  |  |  '--------------------|--|-> move.l 1e756 <CstZBufferResult>,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1946>
        custom->bltdpt = (APTR) CstZBufferResult;
    18c2:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   move.l 1e756 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    18cc:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   move.w a5,d1
    18ce:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   lsl.w #6,d1
    18d0:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   move.l d2,d0
    18d2:	|  |  |  |  |  |  |  |  |  |  |  |                       |  '-- bpl.w 1778 <CstDrawZBuffer+0x226>
    18d6:	|  |  |  |  |  |  |  |  |  |  |  |                       '----> moveq #15,d0
    18d8:	|  |  |  |  |  |  |  |  |  |  |  |                              add.l d2,d0
    18da:	|  |  |  |  |  |  |  |  |  |  |  |                              asr.l #4,d0
    18dc:	|  |  |  |  |  |  |  |  |  |  |  |                              add.w d1,d0
    18de:	|  |  |  |  |  |  |  |  |  |  |  |                              move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
        zbufferset = 1;
    18e4:	|  |  |  |  |  |  |  |  |  |  |  |                              move.w #1,46(sp)
    18ea:	|  |  |  +--|--|--|--|--|--|--|--|----------------------------- bra.w 1788 <CstDrawZBuffer+0x236>
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    18ee:	|  |  |  |  |  |  |  |  |  '--|--|----------------------------> addq.l #7,d0
    18f0:	|  |  |  |  |  |  |  |  |     |  |                              asr.l #3,d0
    18f2:	|  |  |  |  |  |  |  |  |     |  |                              move.l a5,-(sp)
    18f4:	|  |  |  |  |  |  |  |  |     |  |                              move.l d0,-(sp)
    18f6:	|  |  |  |  |  |  |  |  |     |  |                              jsr 18e90 <__mulsi3>
    18fc:	|  |  |  |  |  |  |  |  |     |  |                              addq.l #8,sp
    18fe:	|  |  |  |  |  |  |  |  |     |  |                              move.l d0,d1
    1900:	|  |  |  |  |  |  |  |  |     |  |                              add.l d0,d1
    1902:	|  |  |  |  |  |  |  |  |     |  |                              add.l d1,d1
    1904:	|  |  |  |  |  |  |  |  |     |  |                              add.l d0,d1
    1906:	|  |  |  |  |  |  |  |  |     |  |                              add.l 24(a3),d1
    190a:	|  |  |  |  |  |  |  |  |     |  |                              move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1946>
    1910:	|  |  |  |  |  |  |  |  |     '--|----------------------------- bra.w 1764 <CstDrawZBuffer+0x212>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1914:	|  |  |  |  |  |  |  '--|--------|----------------------------> move.w 48(sp),d1
    1918:	|  |  |  |  |  |  |     |        |                              add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    191a:	|  |  |  |  |  |  |     |        |                              andi.l #65535,d1
    1920:	|  |  |  |  |  |  |     |        |                              movea.l d1,a6
    1922:	|  |  |  |  |  |  |     |        |                              movea.w d6,a1
    1924:	|  |  |  |  |  |  |     |        |                              cmpa.l d1,a1
    1926:	|  |  |  +--|--|--|-----|--------|----------------------------- bge.w 1788 <CstDrawZBuffer+0x236>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    192a:	|  |  |  |  |  |  |     |        |                              move.w 50(sp),d1
    192e:	|  |  |  |  |  |  |     |        |                              cmp.w d1,d5
    1930:	|  |  |  |  |  |  |     |        |        ,-------------------- bge.w 1a3c <CstDrawZBuffer+0x4ea>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1934:	|  |  |  |  |  |  |     |        |        |                     cmp.w 50(sp),d4
    1938:	|  |  |  +--|--|--|-----|--------|--------|-------------------- ble.w 1788 <CstDrawZBuffer+0x236>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    193c:	|  |  |  |  |  |  |     |        |        |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1940:	|  |  |  |  |  |  |     |        |        |                     move.w d6,d1
    1942:	|  |  |  |  |  |  |     |        |        |                     lsr.w #4,d1
    1944:	|  |  |  |  |  |  |     |        |        |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1946:	|  |  |  |  |  |  |     |        |        |                     andi.w #15,d6
    194a:	|  |  |  |  |  |  |     |        |        |                     move.w d6,44(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    194e:	|  |  |  |  |  |  |     |        |        |                     tst.l d2
    1950:	|  |  |  |  |  |  |     |        |     ,--|-------------------- blt.w 19da <CstDrawZBuffer+0x488>
    1954:	|  |  |  |  |  |  |     |        |     |  |  ,----------------> asr.l #4,d2
    1956:	|  |  |  |  |  |  |     |        |     |  |  |                  addq.l #1,d2
    1958:	|  |  |  |  |  |  |     |        |     |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    195a:	|  |  |  |  |  |  |     |        |     |  |  |                  movea.w d0,a0
    195c:	|  |  |  |  |  |  |     |        |     |  |  |                  cmpa.l a0,a6
    195e:	|  |  |  |  |  |  |     |        |     |  |  |  ,-------------- bge.w 19ec <CstDrawZBuffer+0x49a>
            WaitBlit();  
    1962:	|  |  |  |  |  |  |     |        |     |  |  |  |  ,----------> lea 1e828 <GfxBase>,a0
    1968:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            movea.l (a0),a6
    196a:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    196e:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb193e>
            custom->bltalwm = 0xffff;          
    1976:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1940>
            custom->bltdpt = CstZBufferWork;        
    197e:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.l 1e75a <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
            custom->bltcon1 = 0;               
    1988:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb193c>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1990:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1994:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.l (a2),d0
    1996:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.l d0,d1
    1998:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     ,----- bmi.s 1a04 <CstDrawZBuffer+0x4b2>
    199a:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      asr.l #3,d1
    199c:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      movea.w d1,a6
    199e:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    19a0:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      tst.w 44(sp)
    19a4:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  ,--|----- beq.s 1a12 <CstDrawZBuffer+0x4c0>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    19a6:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  ,-> move.w 44(sp),d6
    19aa:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   moveq #12,d1
    19ac:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   lsl.w d1,d6
    19ae:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   addi.w #2544,d6
    19b2:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb193a>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19b8:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb195e>
              custom->bltdmod = 0;                                                            
    19be:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1960>
              xdiffbyte += 2;                 
    19c6:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w a5,d1
    19c8:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   addq.w #1,d1
    19ca:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    19cc:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   andi.l #65535,d1
    19d2:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.l a0,d6
    19d4:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   sub.l d1,d6
    19d6:	|  |  +--|--|--|--|-----|--------|-----|--|--|--|--|--|--|--|-- bra.w 16a4 <CstDrawZBuffer+0x152>
          bytewidth = (sprite->width/16)*2 + 2;
    19da:	|  |  |  |  |  |  |     |        |     >--|--|--|--|--|--|--|-> moveq #15,d6
    19dc:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   add.l d6,d2
    19de:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   asr.l #4,d2
    19e0:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   addq.l #1,d2
    19e2:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    19e4:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   movea.w d0,a0
    19e6:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   cmpa.l a0,a6
    19e8:	|  |  |  |  |  |  |     |        |     |  |  |  |  '--|--|--|-- blt.w 1962 <CstDrawZBuffer+0x410>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    19ec:	|  |  |  |  |  |  |     |        |     |  |  |  '-----|--|--|-> pea 19116 <PutChar+0x170>
    19f2:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   jsr 18504 <KPrintF>
              return FALSE;
    19f8:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   addq.l #4,sp
    19fa:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   moveq #0,d0
}
    19fc:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1a00:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   addq.l #8,sp
    1a02:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a04:	|  |  |  |  |  |  |     |        |     |  |  |        |  '--|-> addq.l #7,d1
    1a06:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   asr.l #3,d1
    1a08:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   movea.w d1,a6
    1a0a:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    1a0c:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   tst.w 44(sp)
    1a10:	|  |  |  |  |  |  |     |        |     |  |  |        |     '-- bne.s 19a6 <CstDrawZBuffer+0x454>
              custom->bltcon0 = 0x9f0;              
    1a12:	|  |  |  |  |  |  |     |        |     |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb193a>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a1a:	|  |  |  |  |  |  |     |        |     |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb195e>
              custom->bltdmod = 0;                                                            
    1a20:	|  |  |  |  |  |  |     |        |     |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1960>
              xdiffbyte += 2;                 
    1a28:	|  |  |  |  |  |  |     |        |     |  |  |                  move.w a5,d1
    1a2a:	|  |  |  |  |  |  |     |        |     |  |  |                  addq.w #1,d1
    1a2c:	|  |  |  |  |  |  |     |        |     |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a2e:	|  |  |  |  |  |  |     |        |     |  |  |                  andi.l #65535,d1
    1a34:	|  |  |  |  |  |  |     |        |     |  |  |                  move.l a0,d6
    1a36:	|  |  |  |  |  |  |     |        |     |  |  |                  sub.l d1,d6
    1a38:	|  |  +--|--|--|--|-----|--------|-----|--|--|----------------- bra.w 16a4 <CstDrawZBuffer+0x152>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1a3c:	|  |  |  |  |  |  |     |        |     |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1a3e:	|  |  |  |  |  |  |     |        |     |     |                  cmpa.l d3,a0
    1a40:	|  |  |  +--|--|--|-----|--------|-----|-----|----------------- bge.w 1788 <CstDrawZBuffer+0x236>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    1a44:	|  |  |  |  |  |  |     |        |     |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1a48:	|  |  |  |  |  |  |     |        |     |     |                  move.w d6,d1
    1a4a:	|  |  |  |  |  |  |     |        |     |     |                  lsr.w #4,d1
    1a4c:	|  |  |  |  |  |  |     |        |     |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1a4e:	|  |  |  |  |  |  |     |        |     |     |                  andi.w #15,d6
    1a52:	|  |  |  |  |  |  |     |        |     |     |                  move.w d6,44(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1a56:	|  |  |  |  |  |  |     |        |     |     |                  tst.l d2
    1a58:	|  |  |  |  |  |  |     |        |     |     '----------------- bge.w 1954 <CstDrawZBuffer+0x402>
    1a5c:	|  |  |  |  |  |  |     |        |     '----------------------- bra.w 19da <CstDrawZBuffer+0x488>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1a60:	|  |  |  |  |  '--|-----|--------|----------------------------> cmp.w 50(sp),d4
    1a64:	|  |  |  '--|-----|-----|--------|----------------------------- ble.w 1788 <CstDrawZBuffer+0x236>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1a68:	|  |  |     |     |     |        |                              move.w 48(sp),d0
    1a6c:	|  |  |     |     |     |        |                              sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1a6e:	|  |  |     |     |     |        |                              move.w d0,d6
    1a70:	|  |  |     |     |     |        |                              andi.w #15,d6
    1a74:	|  |  |     |     |     |        |                              movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1a76:	|  |  |     |     |     |        |                              tst.l d2
    1a78:	|  |  |     |     '-----|--------|----------------------------- bge.w 162c <CstDrawZBuffer+0xda>
    1a7c:	|  |  |     '-----------|--------|----------------------------- bra.w 17aa <CstDrawZBuffer+0x258>
    WaitBlit();
    1a80:	'--|--|-----------------|--------|----------------------------> movea.l 1e828 <GfxBase>,a6
    1a86:	   |  |                 |        |                              jsr -228(a6)
    custom->bltafwm = 0xffff;
    1a8a:	   |  |                 |        |                              move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb193e>
    custom->bltalwm = 0xffff;
    1a92:	   |  |                 |        |                              move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1940>
    custom->bltamod = 0;
    1a9a:	   |  |                 |        |                              move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb195e>
    custom->bltbmod = 0;
    1aa2:	   |  |                 |        |                              move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb195c>
    custom->bltcmod = 0;
    1aaa:	   |  |                 |        |                              move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb195a>
    custom->bltdmod = 0;
    1ab2:	   |  |                 |        |                              move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1960>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1aba:	   |  |                 |        |                              move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb193a>
    custom->bltcon1 = 0;        
    1ac2:	   |  |                 |        |                              move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb193c>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1aca:	   |  |                 |        |                              move.l (a3),d2
    1acc:	   |  |                 |        |                              move.l 4(a3),d3
    1ad0:	   |  |                 |        |                              move.l d2,d0
    1ad2:	   |  |                 |        |                    ,-------- bmi.w 1b5a <CstDrawZBuffer+0x608>
    1ad6:	   |  |                 |        |                    |         asr.l #3,d0
    1ad8:	   |  |                 |        |                    |         move.l d3,-(sp)
    1ada:	   |  |                 |        |                    |         move.l d0,-(sp)
    1adc:	   |  |                 |        |                    |         jsr 18e90 <__mulsi3>
    1ae2:	   |  |                 |        |                    |         addq.l #8,sp
    1ae4:	   |  |                 |        |                    |         move.l d0,d1
    1ae6:	   |  |                 |        |                    |         add.l d0,d1
    1ae8:	   |  |                 |        |                    |         add.l d1,d1
    1aea:	   |  |                 |        |                    |         add.l d1,d0
    1aec:	   |  |                 |        |                    |         add.l 24(a3),d0
    1af0:	   |  |                 |        |                    |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
    custom->bltdpt = (APTR) CstZBufferResult;
    1af6:	   |  |                 |        |                    |         move.l 1e756 <CstZBufferResult>,d0
    1afc:	   |  |                 |        |                    |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b02:	   |  |                 |        |                    |         lsl.w #6,d3
    1b04:	   |  |                 |        |                    |         tst.l d2
    1b06:	   |  |                 |        |                 ,--|-------- blt.s 1b4a <CstDrawZBuffer+0x5f8>
    1b08:	   |  |                 |        |                 |  |  ,----> asr.l #4,d2
    1b0a:	   |  |                 |        |                 |  |  |      add.w d2,d3
    1b0c:	   |  |                 |        |                 |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
}
    1b12:	   |  |                 |        |                 |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1b16:	   |  |                 |        |                 |  |  |  |   addq.l #8,sp
    1b18:	   |  |                 |        |                 |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1b1a:	   |  |                 '--------|-----------------|--|--|--|-> addq.l #7,d1
    1b1c:	   |  |                          |                 |  |  |  |   asr.l #3,d1
    1b1e:	   |  |                          |                 |  |  |  |   sub.w d2,d1
    1b20:	   |  |                          |                 |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb195e>
            custom->bltdmod = 2;                                                            
    1b26:	   |  |                          |                 |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1960>
    1b2e:	   |  |                          '-----------------|--|--|--|-- bra.w 181e <CstDrawZBuffer+0x2cc>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1b32:	   '--|--------------------------------------------|--|--|--|-> addq.l #7,d1
    1b34:	      |                                            |  |  |  |   asr.l #3,d1
    1b36:	      |                                            |  |  |  |   sub.w d2,d1
    1b38:	      |                                            |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb195e>
            custom->bltdmod = 0;                                                            
    1b3e:	      |                                            |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1960>
    1b46:	      '--------------------------------------------|--|--|--|-- bra.w 16a4 <CstDrawZBuffer+0x152>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b4a:	                                                   >--|--|--|-> moveq #15,d1
    1b4c:	                                                   |  |  |  |   add.l d1,d2
    1b4e:	                                                   |  |  |  |   asr.l #4,d2
    1b50:	                                                   |  |  |  |   add.w d2,d3
    1b52:	                                                   |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
  return CstZBufferResult;
    1b58:	                                                   |  |  |  '-- bra.s 1b12 <CstDrawZBuffer+0x5c0>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1b5a:	                                                   |  '--|----> addq.l #7,d0
    1b5c:	                                                   |     |      asr.l #3,d0
    1b5e:	                                                   |     |      move.l d3,-(sp)
    1b60:	                                                   |     |      move.l d0,-(sp)
    1b62:	                                                   |     |      jsr 18e90 <__mulsi3>
    1b68:	                                                   |     |      addq.l #8,sp
    1b6a:	                                                   |     |      move.l d0,d1
    1b6c:	                                                   |     |      add.l d0,d1
    1b6e:	                                                   |     |      add.l d1,d1
    1b70:	                                                   |     |      add.l d1,d0
    1b72:	                                                   |     |      add.l 24(a3),d0
    1b76:	                                                   |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
    custom->bltdpt = (APTR) CstZBufferResult;
    1b7c:	                                                   |     |      move.l 1e756 <CstZBufferResult>,d0
    1b82:	                                                   |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b88:	                                                   |     |      lsl.w #6,d3
    1b8a:	                                                   |     |      tst.l d2
    1b8c:	                                                   |     '----- bge.w 1b08 <CstDrawZBuffer+0x5b6>
    1b90:	                                                   '----------- bra.s 1b4a <CstDrawZBuffer+0x5f8>

00001b92 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1b92:	    lea -20(sp),sp
    1b96:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1b98:	    move.l 1e73e <CstDrawBuffer>,d0
    1b9e:	,-- beq.s 1bb8 <CstFreeBuffer+0x26>
    1ba0:	|   move.l 1e73e <CstDrawBuffer>,20(sp)
    1ba8:	|   move.l 1e81c <SysBase>,d0
    1bae:	|   movea.l d0,a6
    1bb0:	|   movea.l 20(sp),a1
    1bb4:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1bb8:	'-> move.l 1e73a <CstViewBuffer>,d0
    1bbe:	,-- beq.s 1bd8 <CstFreeBuffer+0x46>
    1bc0:	|   move.l 1e73a <CstViewBuffer>,16(sp)
    1bc8:	|   move.l 1e81c <SysBase>,d0
    1bce:	|   movea.l d0,a6
    1bd0:	|   movea.l 16(sp),a1
    1bd4:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1bd8:	'-> move.l 1e736 <CstCopperList>,d0
    1bde:	,-- beq.s 1bf8 <CstFreeBuffer+0x66>
    1be0:	|   move.l 1e736 <CstCopperList>,12(sp)
    1be8:	|   move.l 1e81c <SysBase>,d0
    1bee:	|   movea.l d0,a6
    1bf0:	|   movea.l 12(sp),a1
    1bf4:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1bf8:	'-> move.l 1e72e <CstBackDrop>,d0
    1bfe:	,-- beq.s 1c18 <CstFreeBuffer+0x86>
    1c00:	|   move.l 1e72e <CstBackDrop>,8(sp)
    1c08:	|   move.l 1e81c <SysBase>,d0
    1c0e:	|   movea.l d0,a6
    1c10:	|   movea.l 8(sp),a1
    1c14:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1c18:	'-> move.l 1e732 <CstBackDropBackup>,d0
    1c1e:	,-- beq.s 1c38 <CstFreeBuffer+0xa6>
    1c20:	|   move.l 1e732 <CstBackDropBackup>,4(sp)
    1c28:	|   move.l 1e81c <SysBase>,d0
    1c2e:	|   movea.l d0,a6
    1c30:	|   movea.l 4(sp),a1
    1c34:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1c38:	'-> clr.l 1e73e <CstDrawBuffer>
  CstViewBuffer = NULL;
    1c3e:	    clr.l 1e73a <CstViewBuffer>
  CstCopperList = NULL;
    1c44:	    clr.l 1e736 <CstCopperList>
  CstBackDrop = NULL;
    1c4a:	    clr.l 1e72e <CstBackDrop>

}
    1c50:	    nop
    1c52:	    movea.l (sp)+,a6
    1c54:	    lea 20(sp),sp
    1c58:	    rts

00001c5a <CstFreeze>:



void CstFreeze( ) {
    1c5a:	       lea -64(sp),sp
    1c5e:	       move.l a6,-(sp)
    1c60:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1c62:	       pea 19166 <PutChar+0x1c0>
    1c68:	       jsr 18504 <KPrintF>
    1c6e:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1c70:	       move.l 1e762 <winWidth>,d0
    1c76:	       lsr.l #3,d0
    1c78:	       move.l d0,d1
    1c7a:	       move.l 1e766 <winHeight>,d0
    1c80:	       move.l d0,d0
    1c82:	       muls.w d0,d1
    1c84:	       move.w d1,d0
    1c86:	       add.w d0,d0
    1c88:	       add.w d0,d0
    1c8a:	       move.w d0,d2
    1c8c:	       add.w d1,d2
    1c8e:	       move.w d2,54(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1c92:	       move.l #14675968,50(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1c9a:	       moveq #0,d0
    1c9c:	       move.w 54(sp),d0
    1ca0:	       move.l d0,46(sp)
    1ca4:	       clr.l 42(sp)
    1ca8:	       move.l 1e81c <SysBase>,d0
    1cae:	       movea.l d0,a6
    1cb0:	       move.l 46(sp),d0
    1cb4:	       move.l 42(sp),d1
    1cb8:	       jsr -684(a6)
    1cbc:	       move.l d0,38(sp)
    1cc0:	       move.l 38(sp),d0
    1cc4:	       move.l d0,1e732 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1cca:	       move.l 1e732 <CstBackDropBackup>,d0
    1cd0:	   ,-- bne.s 1ce0 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1cd2:	   |   pea 1918d <PutChar+0x1e7>
    1cd8:	   |   jsr 18504 <KPrintF>
    1cde:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1ce0:	   '-> move.l 1e766 <winHeight>,d0
    1ce6:	       move.l d0,d0
    1ce8:	       movea.w d0,a1
    1cea:	       move.l 1e762 <winWidth>,d0
    1cf0:	       move.l d0,d0
    1cf2:	       movea.w d0,a0
    1cf4:	       move.l 1e732 <CstBackDropBackup>,d0
    1cfa:	       clr.l -(sp)
    1cfc:	       pea 5 <_start+0x5>
    1d00:	       move.l a1,-(sp)
    1d02:	       move.l a0,-(sp)
    1d04:	       pea 191c5 <PutChar+0x21f>
    1d0a:	       move.l d0,-(sp)
    1d0c:	       jsr 185ec <debug_register_bitmap>
    1d12:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1d16:	       move.l 1e72e <CstBackDrop>,68(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1d1e:	       move.l 1e732 <CstBackDropBackup>,64(sp)
  for(int i=0;i<size/4;i++) 
    1d26:	       clr.l 60(sp)
    1d2a:	   ,-- bra.s 1d50 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1d2c:	,--|-> move.l 68(sp),d1
    1d30:	|  |   move.l d1,d0
    1d32:	|  |   addq.l #4,d0
    1d34:	|  |   move.l d0,68(sp)
    1d38:	|  |   move.l 64(sp),d0
    1d3c:	|  |   move.l d0,d2
    1d3e:	|  |   addq.l #4,d2
    1d40:	|  |   move.l d2,64(sp)
    1d44:	|  |   movea.l d1,a0
    1d46:	|  |   move.l (a0),d1
    1d48:	|  |   movea.l d0,a0
    1d4a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d4c:	|  |   addq.l #1,60(sp)
    1d50:	|  '-> move.w 54(sp),d0
    1d54:	|      lsr.w #2,d0
    1d56:	|      move.w d0,d0
    1d58:	|      andi.l #65535,d0
    1d5e:	|      cmp.l 60(sp),d0
    1d62:	'----- bgt.s 1d2c <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1d64:	       move.l 1e73a <CstViewBuffer>,68(sp)
  dst = (ULONG *) CstBackDrop;
    1d6c:	       move.l 1e72e <CstBackDrop>,64(sp)

  for(int i=0;i<size/4;i++) 
    1d74:	       clr.l 56(sp)
    1d78:	   ,-- bra.s 1d9e <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1d7a:	,--|-> move.l 68(sp),d1
    1d7e:	|  |   move.l d1,d0
    1d80:	|  |   addq.l #4,d0
    1d82:	|  |   move.l d0,68(sp)
    1d86:	|  |   move.l 64(sp),d0
    1d8a:	|  |   move.l d0,d2
    1d8c:	|  |   addq.l #4,d2
    1d8e:	|  |   move.l d2,64(sp)
    1d92:	|  |   movea.l d1,a0
    1d94:	|  |   move.l (a0),d1
    1d96:	|  |   movea.l d0,a0
    1d98:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d9a:	|  |   addq.l #1,56(sp)
    1d9e:	|  '-> move.w 54(sp),d0
    1da2:	|      lsr.w #2,d0
    1da4:	|      move.w d0,d0
    1da6:	|      andi.l #65535,d0
    1dac:	|      cmp.l 56(sp),d0
    1db0:	'----- bgt.s 1d7a <CstFreeze+0x120>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    1db2:	       move.l 1e746 <CstCleanupQueueDrawBuffer>,34(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1dba:	       moveq #20,d0
    1dbc:	       move.l d0,30(sp)
    1dc0:	       clr.l 26(sp)
    1dc4:	       move.l 1e81c <SysBase>,d0
    1dca:	       movea.l d0,a6
    1dcc:	       move.l 30(sp),d0
    1dd0:	       move.l 26(sp),d1
    1dd4:	       jsr -684(a6)
    1dd8:	       move.l d0,22(sp)
    1ddc:	       move.l 22(sp),d0
    1de0:	       move.l d0,1e746 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    1de6:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    1dec:	       move.l 34(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    1df2:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    1df8:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    1dfa:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    1e00:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    1e04:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    1e0a:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    1e0e:	       move.l 1e762 <winWidth>,d0
    1e14:	       lsr.l #4,d0
    1e16:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    1e1c:	       move.l d0,d0
    1e1e:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    1e22:	       move.l 1e766 <winHeight>,d0
    1e28:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    1e2e:	       move.l d0,d0
    1e30:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    1e34:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    1e3a:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    1e3e:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    1e44:	       clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    1e48:	       move.l 1e742 <CstCleanupQueueViewBuffer>,34(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1e50:	       moveq #20,d2
    1e52:	       move.l d2,18(sp)
    1e56:	       clr.l 14(sp)
    1e5a:	       move.l 1e81c <SysBase>,d0
    1e60:	       movea.l d0,a6
    1e62:	       move.l 18(sp),d0
    1e66:	       move.l 14(sp),d1
    1e6a:	       jsr -684(a6)
    1e6e:	       move.l d0,10(sp)
    1e72:	       move.l 10(sp),d0
    1e76:	       move.l d0,1e742 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1e7c:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    1e82:	       move.l 34(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    1e88:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    1e8e:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    1e90:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    1e96:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    1e9a:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    1ea0:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    1ea4:	       move.l 1e762 <winWidth>,d0
    1eaa:	       lsr.l #4,d0
    1eac:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    1eb2:	       move.l d0,d0
    1eb4:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    1eb8:	       move.l 1e766 <winHeight>,d0
    1ebe:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    1ec4:	       move.l d0,d0
    1ec6:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    1eca:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    1ed0:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    1ed4:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    1eda:	       clr.w 14(a0)

  KPrintF("CstFreeze: Finished");
    1ede:	       pea 191d4 <PutChar+0x22e>
    1ee4:	       jsr 18504 <KPrintF>
    1eea:	       addq.l #4,sp

}  
    1eec:	       nop
    1eee:	       move.l (sp)+,d2
    1ef0:	       movea.l (sp)+,a6
    1ef2:	       lea 64(sp),sp
    1ef6:	       rts

00001ef8 <CstLoadBackdrop>:

  AddIntServer( INTB_COPER, CstVbint); 

}

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1ef8:	             lea -172(sp),sp
    1efc:	             movem.l d2-d4/a6,-(sp)


	KPrintF("CstLoadBackDrop: Loading of Background started");
    1f00:	             pea 191f6 <PutChar+0x250>
    1f06:	             jsr 18504 <KPrintF>
    1f0c:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1f0e:	             move.l 192(sp),-(sp)
    1f12:	             jsr 6bc <get2bytes>
    1f18:	             addq.l #4,sp
    1f1a:	             move.w d0,162(sp)
  UWORD height = get2bytes(fp);  
    1f1e:	             move.l 192(sp),-(sp)
    1f22:	             jsr 6bc <get2bytes>
    1f28:	             addq.l #4,sp
    1f2a:	             move.w d0,160(sp)

  UWORD widthbyteslayer = width/8;
    1f2e:	             move.w 162(sp),d0
    1f32:	             lsr.w #3,d0
    1f34:	             move.w d0,158(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1f38:	             move.w 158(sp),d0
    1f3c:	             lsr.w #1,d0
    1f3e:	             move.w d0,156(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1f42:	             move.l 1e762 <winWidth>,d0
    1f48:	             lsr.l #3,d0
    1f4a:	             move.w d0,154(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1f4e:	             move.w 158(sp),d0
    1f52:	             muls.w 160(sp),d0
    1f56:	             move.w d0,152(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1f5a:	             move.w 152(sp),d1
    1f5e:	             move.w d1,d0
    1f60:	             add.w d0,d0
    1f62:	             add.w d0,d0
    1f64:	             move.w d0,d2
    1f66:	             add.w d1,d2
    1f68:	             move.w d2,150(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1f6c:	             move.w 1e728 <CstPaletteLoaded>,d0
    1f72:	,----------- bne.w 200c <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1f76:	|            move.w #384,148(sp)

    if(CstPalette) {
    1f7c:	|            move.l 1e74e <CstPalette>,d0
    1f82:	|        ,-- beq.s 1f9c <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1f84:	|        |   move.l 1e74e <CstPalette>,144(sp)
    1f8c:	|        |   move.l 1e81c <SysBase>,d0
    1f92:	|        |   movea.l d0,a6
    1f94:	|        |   movea.l 144(sp),a1
    1f98:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1f9c:	|        '-> moveq #64,d0
    1f9e:	|            move.l d0,140(sp)
    1fa2:	|            clr.l 136(sp)
    1fa6:	|            move.l 1e81c <SysBase>,d0
    1fac:	|            movea.l d0,a6
    1fae:	|            move.l 140(sp),d0
    1fb2:	|            move.l 136(sp),d1
    1fb6:	|            jsr -684(a6)
    1fba:	|            move.l d0,132(sp)
    1fbe:	|            move.l 132(sp),d0
    1fc2:	|            move.l d0,1e74e <CstPalette>
    CstPaletteLoaded = 1;
    1fc8:	|            move.w #1,1e728 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1fd0:	|            move.l 1e74e <CstPalette>,184(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1fd8:	|            clr.l 180(sp)
    1fdc:	|        ,-- bra.s 2002 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1fde:	|     ,--|-> move.l 192(sp),-(sp)
    1fe2:	|     |  |   jsr 6bc <get2bytes>
    1fe8:	|     |  |   addq.l #4,sp
    1fea:	|     |  |   move.l d0,d1
    1fec:	|     |  |   move.l 184(sp),d0
    1ff0:	|     |  |   move.l d0,d2
    1ff2:	|     |  |   addq.l #2,d2
    1ff4:	|     |  |   move.l d2,184(sp)
    1ff8:	|     |  |   move.l d1,d1
    1ffa:	|     |  |   movea.l d0,a0
    1ffc:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ffe:	|     |  |   addq.l #1,180(sp)
    2002:	|     |  '-> moveq #31,d0
    2004:	|     |      cmp.l 180(sp),d0
    2008:	|     '----- bge.s 1fde <CstLoadBackdrop+0xe6>
    200a:	|  ,-------- bra.s 202a <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    200c:	'--|-------> clr.l 176(sp)
    2010:	   |     ,-- bra.s 2022 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    2012:	   |  ,--|-> move.l 192(sp),-(sp)
    2016:	   |  |  |   jsr 6bc <get2bytes>
    201c:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    201e:	   |  |  |   addq.l #1,176(sp)
    2022:	   |  |  '-> moveq #31,d2
    2024:	   |  |      cmp.l 176(sp),d2
    2028:	   |  '----- bge.s 2012 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    202a:	   '-------> moveq #0,d0
    202c:	             move.w 150(sp),d0
    2030:	             move.l d0,128(sp)
    2034:	             moveq #2,d0
    2036:	             move.l d0,124(sp)
    203a:	             move.l 1e81c <SysBase>,d0
    2040:	             movea.l d0,a6
    2042:	             move.l 128(sp),d0
    2046:	             move.l 124(sp),d1
    204a:	             jsr -684(a6)
    204e:	             move.l d0,120(sp)
    2052:	             move.l 120(sp),d0
    2056:	             move.l d0,116(sp)
  if( !tmpbuffer)
    205a:	         ,-- bne.s 206a <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    205c:	         |   pea 19225 <PutChar+0x27f>
    2062:	         |   jsr 18504 <KPrintF>
    2068:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    206a:	         '-> moveq #0,d0
    206c:	             move.w 152(sp),d0
    2070:	             move.l d0,112(sp)
    2074:	             moveq #2,d2
    2076:	             move.l d2,108(sp)
    207a:	             move.l 1e81c <SysBase>,d0
    2080:	             movea.l d0,a6
    2082:	             move.l 112(sp),d0
    2086:	             move.l 108(sp),d1
    208a:	             jsr -684(a6)
    208e:	             move.l d0,104(sp)
    2092:	             move.l 104(sp),d0
    2096:	             move.l d0,100(sp)
  if( !tmpmask)
    209a:	         ,-- bne.s 20aa <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    209c:	         |   pea 1925b <PutChar+0x2b5>
    20a2:	         |   jsr 18504 <KPrintF>
    20a8:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    20aa:	         '-> move.w 160(sp),d0
    20ae:	             movea.w d0,a1
    20b0:	             move.w 162(sp),d0
    20b4:	             movea.w d0,a0
    20b6:	             clr.l -(sp)
    20b8:	             pea 5 <_start+0x5>
    20bc:	             move.l a1,-(sp)
    20be:	             move.l a0,-(sp)
    20c0:	             pea 1928f <PutChar+0x2e9>
    20c6:	             move.l 136(sp),-(sp)
    20ca:	             jsr 185ec <debug_register_bitmap>
    20d0:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    20d4:	             move.w 160(sp),d0
    20d8:	             movea.w d0,a1
    20da:	             move.w 162(sp),d0
    20de:	             movea.w d0,a0
    20e0:	             clr.l -(sp)
    20e2:	             pea 1 <_start+0x1>
    20e6:	             move.l a1,-(sp)
    20e8:	             move.l a0,-(sp)
    20ea:	             pea 1929d <PutChar+0x2f7>
    20f0:	             move.l 136(sp),-(sp)
    20f4:	             jsr 185ec <debug_register_bitmap>
    20fa:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    20fe:	             move.l 192(sp),96(sp)
    2104:	             move.l 116(sp),92(sp)
    210a:	             moveq #2,d0
    210c:	             move.l d0,88(sp)
    2110:	             move.w 150(sp),d0
    2114:	             lsr.w #1,d0
    2116:	             move.w d0,d0
    2118:	             andi.l #65535,d0
    211e:	             move.l d0,84(sp)
    2122:	             move.l 1e824 <DOSBase>,d0
    2128:	             movea.l d0,a6
    212a:	             move.l 96(sp),d1
    212e:	             move.l 92(sp),d2
    2132:	             move.l 88(sp),d3
    2136:	             move.l 84(sp),d4
    213a:	             jsr -324(a6)
    213e:	             move.l d0,80(sp)
    2142:	             move.l 80(sp),d0
    2146:	             move.w d0,78(sp)
  if(!count) {
    214a:	         ,-- bne.s 215e <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    214c:	         |   pea 192a9 <PutChar+0x303>
    2152:	         |   jsr 18504 <KPrintF>
    2158:	         |   addq.l #4,sp
    return;
    215a:	   ,-----|-- bra.w 246e <CstLoadBackdrop+0x576>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    215e:	   |     '-> move.l 192(sp),74(sp)
    2164:	   |         move.l 100(sp),70(sp)
    216a:	   |         moveq #2,d2
    216c:	   |         move.l d2,66(sp)
    2170:	   |         move.w 152(sp),d0
    2174:	   |         lsr.w #1,d0
    2176:	   |         move.w d0,d0
    2178:	   |         andi.l #65535,d0
    217e:	   |         move.l d0,62(sp)
    2182:	   |         move.l 1e824 <DOSBase>,d0
    2188:	   |         movea.l d0,a6
    218a:	   |         move.l 74(sp),d1
    218e:	   |         move.l 70(sp),d2
    2192:	   |         move.l 66(sp),d3
    2196:	   |         move.l 62(sp),d4
    219a:	   |         jsr -324(a6)
    219e:	   |         move.l d0,58(sp)
    21a2:	   |         move.l 58(sp),d0
    21a6:	   |         move.w d0,78(sp)
   

  if(!count) {
    21aa:	   |     ,-- bne.s 21be <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    21ac:	   |     |   pea 192a9 <PutChar+0x303>
    21b2:	   |     |   jsr 18504 <KPrintF>
    21b8:	   |     |   addq.l #4,sp
    return;
    21ba:	   +-----|-- bra.w 246e <CstLoadBackdrop+0x576>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    21be:	   |     '-> move.l #14675968,54(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    21c6:	   |         move.l 1e72e <CstBackDrop>,d0
    21cc:	   |         move.l d0,172(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    21d0:	   |         move.l 200(sp),d0
    21d4:	   |         move.w d0,d1
    21d6:	   |         muls.w 154(sp),d1
    21da:	   |         move.l 196(sp),d0
    21de:	   |     ,-- bpl.s 21e2 <CstLoadBackdrop+0x2ea>
    21e0:	   |     |   addq.l #7,d0
    21e2:	   |     '-> asr.l #3,d0
    21e4:	   |         move.l d0,d0
    21e6:	   |         movea.w d1,a0
    21e8:	   |         adda.w d0,a0
    21ea:	   |         move.w a0,52(sp)
  backdropcursor += offset; 
    21ee:	   |         moveq #0,d0
    21f0:	   |         move.w 52(sp),d0
    21f4:	   |         add.l d0,172(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    21f8:	   |         pea 192c4 <PutChar+0x31e>
    21fe:	   |         jsr 18504 <KPrintF>
    2204:	   |         addq.l #4,sp


  WaitBlit();
    2206:	   |         move.l 1e828 <GfxBase>,d0
    220c:	   |         movea.l d0,a6
    220e:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    2212:	   |         movea.l 54(sp),a0
    2216:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    221c:	   |         movea.l 54(sp),a0
    2220:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2226:	   |         movea.l 54(sp),a0
    222a:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    2230:	   |         movea.l 54(sp),a0
    2234:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    223a:	   |         move.w 154(sp),d0
    223e:	   |         sub.w 158(sp),d0
    2242:	   |         movea.l 54(sp),a0
    2246:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    224a:	   |         move.w 154(sp),d0
    224e:	   |         sub.w 158(sp),d0
    2252:	   |         movea.l 54(sp),a0
    2256:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    225a:	   |         movea.l 54(sp),a0
    225e:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    2264:	   |         movea.l 54(sp),a0
    2268:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    226e:	   |         move.l 116(sp),168(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2274:	   |         clr.l 164(sp)
    2278:	   |     ,-- bra.s 22e6 <CstLoadBackdrop+0x3ee>
  {   
    WaitBlit(); 
    227a:	   |  ,--|-> move.l 1e828 <GfxBase>,d0
    2280:	   |  |  |   movea.l d0,a6
    2282:	   |  |  |   jsr -228(a6)
    custom->bltapt = (APTR) tmpmask;
    2286:	   |  |  |   movea.l 54(sp),a0
    228a:	   |  |  |   move.l 100(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2290:	   |  |  |   move.l 168(sp),d0
    2294:	   |  |  |   movea.l 54(sp),a0
    2298:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    229c:	   |  |  |   move.l 172(sp),d0
    22a0:	   |  |  |   movea.l 54(sp),a0
    22a4:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    22a8:	   |  |  |   move.l 172(sp),d0
    22ac:	   |  |  |   movea.l 54(sp),a0
    22b0:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    22b4:	   |  |  |   move.w 160(sp),d0
    22b8:	   |  |  |   lsl.w #6,d0
    22ba:	   |  |  |   add.w 156(sp),d0
    22be:	   |  |  |   movea.l 54(sp),a0
    22c2:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    22c6:	   |  |  |   moveq #0,d0
    22c8:	   |  |  |   move.w 152(sp),d0
    22cc:	   |  |  |   add.l d0,168(sp)
    backdropcursor += CstBackdropSizePlane;
    22d0:	   |  |  |   move.w 1e72c <CstBackdropSizePlane>,d0
    22d6:	   |  |  |   move.w d0,d0
    22d8:	   |  |  |   andi.l #65535,d0
    22de:	   |  |  |   add.l d0,172(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    22e2:	   |  |  |   addq.l #1,164(sp)
    22e6:	   |  |  '-> moveq #4,d0
    22e8:	   |  |      cmp.l 164(sp),d0
    22ec:	   |  '----- bge.s 227a <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    22ee:	   |         move.l 1e828 <GfxBase>,d0
    22f4:	   |         movea.l d0,a6
    22f6:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    22fa:	   |         pea 192e3 <PutChar+0x33d>
    2300:	   |         jsr 18504 <KPrintF>
    2306:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    2308:	   |         move.l 116(sp),48(sp)
    230e:	   |         move.l 1e81c <SysBase>,d0
    2314:	   |         movea.l d0,a6
    2316:	   |         movea.l 48(sp),a1
    231a:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    231e:	   |         move.l 100(sp),44(sp)
    2324:	   |         move.l 1e81c <SysBase>,d0
    232a:	   |         movea.l d0,a6
    232c:	   |         movea.l 44(sp),a1
    2330:	   |         jsr -690(a6)

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2334:	   |         move.l 1e746 <CstCleanupQueueDrawBuffer>,40(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    233c:	   |         moveq #20,d2
    233e:	   |         move.l d2,36(sp)
    2342:	   |         clr.l 32(sp)
    2346:	   |         move.l 1e81c <SysBase>,d0
    234c:	   |         movea.l d0,a6
    234e:	   |         move.l 36(sp),d0
    2352:	   |         move.l 32(sp),d1
    2356:	   |         jsr -684(a6)
    235a:	   |         move.l d0,28(sp)
    235e:	   |         move.l 28(sp),d0
    2362:	   |         move.l d0,1e746 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    2368:	   |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    236e:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    2374:	   |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    237a:	   |         clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    237c:	   |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2382:	   |         clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    2386:	   |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    238c:	   |         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    2390:	   |         move.l 1e762 <winWidth>,d0
    2396:	   |         lsr.l #4,d0
    2398:	   |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    239e:	   |         move.l d0,d0
    23a0:	   |         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    23a4:	   |         move.l 1e766 <winHeight>,d0
    23aa:	   |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    23b0:	   |         move.l d0,d0
    23b2:	   |         move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    23b6:	   |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    23bc:	   |         clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    23c0:	   |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    23c6:	   |         clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    23ca:	   |         move.l 1e742 <CstCleanupQueueViewBuffer>,40(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    23d2:	   |         moveq #20,d0
    23d4:	   |         move.l d0,24(sp)
    23d8:	   |         clr.l 20(sp)
    23dc:	   |         move.l 1e81c <SysBase>,d0
    23e2:	   |         movea.l d0,a6
    23e4:	   |         move.l 24(sp),d0
    23e8:	   |         move.l 20(sp),d1
    23ec:	   |         jsr -684(a6)
    23f0:	   |         move.l d0,16(sp)
    23f4:	   |         move.l 16(sp),d0
    23f8:	   |         move.l d0,1e742 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    23fe:	   |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2404:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    240a:	   |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2410:	   |         clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    2412:	   |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2418:	   |         clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    241c:	   |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2422:	   |         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    2426:	   |         move.l 1e762 <winWidth>,d0
    242c:	   |         lsr.l #4,d0
    242e:	   |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2434:	   |         move.l d0,d0
    2436:	   |         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    243a:	   |         move.l 1e766 <winHeight>,d0
    2440:	   |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2446:	   |         move.l d0,d0
    2448:	   |         move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    244c:	   |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2452:	   |         clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    2456:	   |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    245c:	   |         clr.w 14(a0)

  KPrintF("CstLoadBackDrop: Finished");
    2460:	   |         pea 19303 <PutChar+0x35d>
    2466:	   |         jsr 18504 <KPrintF>
    246c:	   |         addq.l #4,sp

}
    246e:	   '-------> movem.l (sp)+,d2-d4/a6
    2472:	             lea 172(sp),sp
    2476:	             rts

00002478 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    2478:	                lea -156(sp),sp
    247c:	                move.l a6,-(sp)
    247e:	                move.l d2,-(sp)
    2480:	                move.l 172(sp),d1
    2484:	                move.l 176(sp),d0
    2488:	                move.w d1,d1
    248a:	                move.w d1,10(sp)
    248e:	                move.w d0,d0
    2490:	                move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;	
    2494:	                move.l #14675968,112(sp)
  //custom->color[0] = 0x0f0;
  UWORD *destination = 0;
    249c:	                clr.l 108(sp)
  destination = (UWORD *) CstBackDrop;      
    24a0:	                move.l 1e72e <CstBackDrop>,108(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    24a8:	                clr.l 140(sp)

  blitwidth = single->width/16;
    24ac:	                movea.l 168(sp),a0
    24b0:	                move.l (a0),d0
    24b2:	                movea.l d0,a0
    24b4:	                cmpa.w #0,a0
    24b8:	            ,-- bge.s 24be <CstPasteChar+0x46>
    24ba:	            |   lea 15(a0),a0
    24be:	            '-> move.l a0,d0
    24c0:	                asr.l #4,d0
    24c2:	                move.l d0,124(sp)
  if(blitwidth == 0) blitwidth = 1;
    24c6:	            ,-- bne.s 24ce <CstPasteChar+0x56>
    24c8:	            |   moveq #1,d0
    24ca:	            |   move.l d0,124(sp)

  if( y < 0) {
    24ce:	            '-> tst.w 8(sp)
    24d2:	         ,----- bge.s 251c <CstPasteChar+0xa4>
    if(y + single->height < 0) {
    24d4:	         |      movea.w 8(sp),a1
    24d8:	         |      movea.l 168(sp),a0
    24dc:	         |      move.l 4(a0),d0
    24e0:	         |      add.l a1,d0
    24e2:	         |  ,-- bpl.s 24f6 <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    24e4:	         |  |   pea 1931d <PutChar+0x377>
    24ea:	         |  |   jsr 18504 <KPrintF>
    24f0:	         |  |   addq.l #4,sp
      return;
    24f2:	,--------|--|-- bra.w 2e6a <CstPasteChar+0x9f2>
    }
    ystartdst = 0;
    24f6:	|        |  '-> clr.l 136(sp)
    ystartsrc = y*-1;
    24fa:	|        |      move.w 8(sp),d0
    24fe:	|        |      ext.l d0
    2500:	|        |      move.l d0,d1
    2502:	|        |      neg.l d1
    2504:	|        |      move.l d1,132(sp)
    blitheight = single->height+y;
    2508:	|        |      movea.l 168(sp),a0
    250c:	|        |      move.l 4(a0),d0
    2510:	|        |      movea.w 8(sp),a0
    2514:	|        |      add.l a0,d0
    2516:	|        |      move.l d0,128(sp)
    251a:	|     ,--|----- bra.s 258e <CstPasteChar+0x116>
  } else if(y+single->height > (int) winHeight) {
    251c:	|     |  '----> movea.w 8(sp),a1
    2520:	|     |         movea.l 168(sp),a0
    2524:	|     |         move.l 4(a0),d0
    2528:	|     |         move.l a1,d1
    252a:	|     |         add.l d0,d1
    252c:	|     |         move.l 1e766 <winHeight>,d0
    2532:	|     |         cmp.l d1,d0
    2534:	|     |  ,----- bge.s 2576 <CstPasteChar+0xfe>
    if(y  > (int) winHeight) {
    2536:	|     |  |      movea.w 8(sp),a0
    253a:	|     |  |      move.l 1e766 <winHeight>,d0
    2540:	|     |  |      cmp.l a0,d0
    2542:	|     |  |  ,-- bge.s 2556 <CstPasteChar+0xde>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2544:	|     |  |  |   pea 1931d <PutChar+0x377>
    254a:	|     |  |  |   jsr 18504 <KPrintF>
    2550:	|     |  |  |   addq.l #4,sp
      return;
    2552:	+-----|--|--|-- bra.w 2e6a <CstPasteChar+0x9f2>
    }
    ystartdst = y;
    2556:	|     |  |  '-> movea.w 8(sp),a0
    255a:	|     |  |      move.l a0,136(sp)
    ystartsrc = 0;
    255e:	|     |  |      clr.l 132(sp)
    blitheight = winHeight-y;
    2562:	|     |  |      move.l 1e766 <winHeight>,d0
    2568:	|     |  |      movea.w 8(sp),a0
    256c:	|     |  |      move.l d0,d1
    256e:	|     |  |      sub.l a0,d1
    2570:	|     |  |      move.l d1,128(sp)
    2574:	|     +--|----- bra.s 258e <CstPasteChar+0x116>
  } else {
    ystartdst = y;
    2576:	|     |  '----> movea.w 8(sp),a0
    257a:	|     |         move.l a0,136(sp)
    ystartsrc = 0;
    257e:	|     |         clr.l 132(sp)
    blitheight = single->height;
    2582:	|     |         movea.l 168(sp),a0
    2586:	|     |         move.l 4(a0),d0
    258a:	|     |         move.l d0,128(sp)
  }


   if( x < 0) { //Leftmost part outside screen
    258e:	|     '-------> tst.w 10(sp)
    2592:	|        ,----- bge.w 27da <CstPasteChar+0x362>
    if(x + single->width < 0) {
    2596:	|        |      movea.w 10(sp),a1
    259a:	|        |      movea.l 168(sp),a0
    259e:	|        |      move.l (a0),d0
    25a0:	|        |      add.l a1,d0
    25a2:	|        |  ,-- bpl.s 25b6 <CstPasteChar+0x13e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    25a4:	|        |  |   pea 1931d <PutChar+0x377>
    25aa:	|        |  |   jsr 18504 <KPrintF>
    25b0:	|        |  |   addq.l #4,sp
      return;
    25b2:	+--------|--|-- bra.w 2e6a <CstPasteChar+0x9f2>

    }
    
    extrawords = 1;
    25b6:	|        |  '-> move.w #1,162(sp)

    cutwordssource = (x*-1)/16; 
    25bc:	|        |      move.w 10(sp),d0
    25c0:	|        |  ,-- bpl.s 25c6 <CstPasteChar+0x14e>
    25c2:	|        |  |   addi.w #15,d0
    25c6:	|        |  '-> asr.w #4,d0
    25c8:	|        |      neg.w d0
    25ca:	|        |      move.w d0,160(sp)
    cutmaskpixel = (x*-1)%16;     
    25ce:	|        |      move.w 10(sp),d0
    25d2:	|        |      ext.l d0
    25d4:	|        |      neg.l d0
    25d6:	|        |      andi.l #-2147483633,d0
    25dc:	|        |  ,-- bpl.s 25e6 <CstPasteChar+0x16e>
    25de:	|        |  |   subq.l #1,d0
    25e0:	|        |  |   moveq #-16,d1
    25e2:	|        |  |   or.l d1,d0
    25e4:	|        |  |   addq.l #1,d0
    25e6:	|        |  '-> move.w d0,158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    25ea:	|        |      clr.w 156(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    25ee:	|        |      movea.l 168(sp),a0
    25f2:	|        |      move.l 24(a0),d0
    25f6:	|        |      move.l d0,d1
    25f8:	|        |      moveq #0,d0
    25fa:	|        |      move.w 160(sp),d0
    25fe:	|        |      add.l d0,d0
    2600:	|        |      move.l d1,d2
    2602:	|        |      add.l d0,d2
    2604:	|        |      movea.l 168(sp),a0
    2608:	|        |      move.l (a0),d0
    260a:	|        |      move.l 132(sp),-(sp)
    260e:	|        |      move.l d0,-(sp)
    2610:	|        |      jsr 18e90 <__mulsi3>
    2616:	|        |      addq.l #8,sp
    2618:	|        |      lsr.l #3,d0
    261a:	|        |      move.l d2,d1
    261c:	|        |      add.l d0,d1
    261e:	|        |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2622:	|        |      move.l 1e762 <winWidth>,d0
    2628:	|        |      move.l 136(sp),-(sp)
    262c:	|        |      move.l d0,-(sp)
    262e:	|        |      jsr 18e90 <__mulsi3>
    2634:	|        |      addq.l #8,sp
    2636:	|        |      lsr.l #3,d0
    2638:	|        |      move.l 108(sp),d1
    263c:	|        |      add.l d1,d0
    263e:	|        |      move.l d0,d2
    2640:	|        |      subq.l #2,d2
    2642:	|        |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2646:	|        |      move.l 1e762 <winWidth>,d0
    264c:	|        |      move.l 136(sp),-(sp)
    2650:	|        |      move.l d0,-(sp)
    2652:	|        |      jsr 18e90 <__mulsi3>
    2658:	|        |      addq.l #8,sp
    265a:	|        |      lsr.l #3,d0
    265c:	|        |      move.l 108(sp),d1
    2660:	|        |      add.l d1,d0
    2662:	|        |      move.l d0,d1
    2664:	|        |      subq.l #2,d1
    2666:	|        |      move.l d1,144(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    266a:	|        |      moveq #0,d0
    266c:	|        |      move.w 158(sp),d0
    2670:	|        |      moveq #16,d1
    2672:	|        |      sub.l d0,d1
    2674:	|        |      move.l d1,d0
    2676:	|        |      moveq #12,d2
    2678:	|        |      lsl.l d2,d0
    267a:	|        |      move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    267e:	|        |      move.l 1e746 <CstCleanupQueueDrawBuffer>,48(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2686:	|        |      moveq #20,d0
    2688:	|        |      move.l d0,44(sp)
    268c:	|        |      clr.l 40(sp)
    2690:	|        |      move.l 1e81c <SysBase>,d0
    2696:	|        |      movea.l d0,a6
    2698:	|        |      move.l 44(sp),d0
    269c:	|        |      move.l 40(sp),d1
    26a0:	|        |      jsr -684(a6)
    26a4:	|        |      move.l d0,36(sp)
    26a8:	|        |      move.l 36(sp),d0
    26ac:	|        |      move.l d0,1e746 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    26b2:	|        |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    26b8:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = 0;
    26be:	|        |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    26c4:	|        |      clr.w (a0)
    CstCleanupQueueDrawBuffer->y = 0;
    26c6:	|        |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    26cc:	|        |      clr.w 2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    26d0:	|        |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    26d6:	|        |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    26da:	|        |      movea.l 168(sp),a0
    26de:	|        |      move.l (a0),d0
    26e0:	|        |      movea.l d0,a0
    26e2:	|        |      cmpa.w #0,a0
    26e6:	|        |  ,-- bge.s 26ec <CstPasteChar+0x274>
    26e8:	|        |  |   lea 15(a0),a0
    26ec:	|        |  '-> move.l a0,d0
    26ee:	|        |      asr.l #4,d0
    26f0:	|        |      move.l d0,d0
    26f2:	|        |      add.w 160(sp),d0
    26f6:	|        |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    26fc:	|        |      add.w 162(sp),d0
    2700:	|        |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2704:	|        |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    270a:	|        |      move.l 128(sp),d0
    270e:	|        |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    2712:	|        |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2718:	|        |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    271c:	|        |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2722:	|        |      move.l 136(sp),d0
    2726:	|        |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    272a:	|        |      move.l 1e742 <CstCleanupQueueViewBuffer>,48(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2732:	|        |      moveq #20,d1
    2734:	|        |      move.l d1,32(sp)
    2738:	|        |      clr.l 28(sp)
    273c:	|        |      move.l 1e81c <SysBase>,d0
    2742:	|        |      movea.l d0,a6
    2744:	|        |      move.l 32(sp),d0
    2748:	|        |      move.l 28(sp),d1
    274c:	|        |      jsr -684(a6)
    2750:	|        |      move.l d0,24(sp)
    2754:	|        |      move.l 24(sp),d0
    2758:	|        |      move.l d0,1e742 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    275e:	|        |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2764:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueViewBuffer->x = 0;
    276a:	|        |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2770:	|        |      clr.w (a0)
    CstCleanupQueueViewBuffer->y = 0;
    2772:	|        |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2778:	|        |      clr.w 2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    277c:	|        |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2782:	|        |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2786:	|        |      movea.l 168(sp),a0
    278a:	|        |      move.l (a0),d0
    278c:	|        |      movea.l d0,a0
    278e:	|        |      cmpa.w #0,a0
    2792:	|        |  ,-- bge.s 2798 <CstPasteChar+0x320>
    2794:	|        |  |   lea 15(a0),a0
    2798:	|        |  '-> move.l a0,d0
    279a:	|        |      asr.l #4,d0
    279c:	|        |      move.l d0,d0
    279e:	|        |      add.w 160(sp),d0
    27a2:	|        |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    27a8:	|        |      add.w 162(sp),d0
    27ac:	|        |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    27b0:	|        |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    27b6:	|        |      move.l 128(sp),d0
    27ba:	|        |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = 0;
    27be:	|        |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    27c4:	|        |      clr.w 12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst; 
    27c8:	|        |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    27ce:	|        |      move.l 136(sp),d0
    27d2:	|        |      move.w d0,14(a0)
    27d6:	|     ,--|----- bra.w 2cd2 <CstPasteChar+0x85a>
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    27da:	|     |  '----> movea.w 10(sp),a1
    27de:	|     |         movea.l 168(sp),a0
    27e2:	|     |         move.l (a0),d0
    27e4:	|     |         move.l a1,d1
    27e6:	|     |         add.l d0,d1
    27e8:	|     |         move.l 1e762 <winWidth>,d0
    27ee:	|     |         cmp.l d1,d0
    27f0:	|     |  ,----- bge.w 2a7c <CstPasteChar+0x604>

    if(x - single->width > (int) winWidth)
    27f4:	|     |  |      movea.w 10(sp),a1
    27f8:	|     |  |      movea.l 168(sp),a0
    27fc:	|     |  |      move.l (a0),d0
    27fe:	|     |  |      move.l a1,d1
    2800:	|     |  |      sub.l d0,d1
    2802:	|     |  |      move.l 1e762 <winWidth>,d0
    2808:	|     |  |      cmp.l d1,d0
    280a:	|     |  |  ,-- bge.s 281e <CstPasteChar+0x3a6>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    280c:	|     |  |  |   pea 1931d <PutChar+0x377>
    2812:	|     |  |  |   jsr 18504 <KPrintF>
    2818:	|     |  |  |   addq.l #4,sp
      return;
    281a:	+-----|--|--|-- bra.w 2e6a <CstPasteChar+0x9f2>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    281e:	|     |  |  '-> clr.w 162(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2822:	|     |  |      movea.w 10(sp),a1
    2826:	|     |  |      movea.l 168(sp),a0
    282a:	|     |  |      move.l (a0),d0
    282c:	|     |  |      add.l a1,d0
    282e:	|     |  |      move.l d0,d1
    2830:	|     |  |      move.l 1e762 <winWidth>,d0
    2836:	|     |  |      sub.l d0,d1
    2838:	|     |  |      move.l d1,d0
    283a:	|     |  |      lsr.l #4,d0
    283c:	|     |  |      move.w d0,160(sp)
    cutmaskpixel = 0;
    2840:	|     |  |      clr.w 158(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2844:	|     |  |      move.w #-1,156(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    284a:	|     |  |      movea.l 168(sp),a0
    284e:	|     |  |      move.l 24(a0),d0
    2852:	|     |  |      move.l d0,d2
    2854:	|     |  |      movea.l 168(sp),a0
    2858:	|     |  |      move.l (a0),d0
    285a:	|     |  |      move.l 132(sp),-(sp)
    285e:	|     |  |      move.l d0,-(sp)
    2860:	|     |  |      jsr 18e90 <__mulsi3>
    2866:	|     |  |      addq.l #8,sp
    2868:	|     |  |      lsr.l #3,d0
    286a:	|     |  |      move.l d2,d1
    286c:	|     |  |      add.l d0,d1
    286e:	|     |  |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2872:	|     |  |      move.l 1e762 <winWidth>,d0
    2878:	|     |  |      move.l 136(sp),-(sp)
    287c:	|     |  |      move.l d0,-(sp)
    287e:	|     |  |      jsr 18e90 <__mulsi3>
    2884:	|     |  |      addq.l #8,sp
    2886:	|     |  |      lsr.l #3,d0
    2888:	|     |  |      move.l 108(sp),d1
    288c:	|     |  |      add.l d0,d1
    288e:	|     |  |      move.w 10(sp),d0
    2892:	|     |  |  ,-- bpl.s 2898 <CstPasteChar+0x420>
    2894:	|     |  |  |   addi.w #15,d0
    2898:	|     |  |  '-> asr.w #4,d0
    289a:	|     |  |      movea.w d0,a0
    289c:	|     |  |      move.l a0,d0
    289e:	|     |  |      add.l a0,d0
    28a0:	|     |  |      move.l d1,d2
    28a2:	|     |  |      add.l d0,d2
    28a4:	|     |  |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    28a8:	|     |  |      move.l 1e762 <winWidth>,d0
    28ae:	|     |  |      move.l 136(sp),-(sp)
    28b2:	|     |  |      move.l d0,-(sp)
    28b4:	|     |  |      jsr 18e90 <__mulsi3>
    28ba:	|     |  |      addq.l #8,sp
    28bc:	|     |  |      lsr.l #3,d0
    28be:	|     |  |      move.l 108(sp),d1
    28c2:	|     |  |      add.l d0,d1
    28c4:	|     |  |      move.w 10(sp),d0
    28c8:	|     |  |  ,-- bpl.s 28ce <CstPasteChar+0x456>
    28ca:	|     |  |  |   addi.w #15,d0
    28ce:	|     |  |  '-> asr.w #4,d0
    28d0:	|     |  |      movea.w d0,a0
    28d2:	|     |  |      move.l a0,d0
    28d4:	|     |  |      add.l a0,d0
    28d6:	|     |  |      move.l d1,d2
    28d8:	|     |  |      add.l d0,d2
    28da:	|     |  |      move.l d2,144(sp)
    bltcon0 = ((single->width%16) << 12);    
    28de:	|     |  |      movea.l 168(sp),a0
    28e2:	|     |  |      move.l (a0),d0
    28e4:	|     |  |      andi.l #-2147483633,d0
    28ea:	|     |  |  ,-- bpl.s 28f4 <CstPasteChar+0x47c>
    28ec:	|     |  |  |   subq.l #1,d0
    28ee:	|     |  |  |   moveq #-16,d1
    28f0:	|     |  |  |   or.l d1,d0
    28f2:	|     |  |  |   addq.l #1,d0
    28f4:	|     |  |  '-> moveq #12,d2
    28f6:	|     |  |      lsl.l d2,d0
    28f8:	|     |  |      move.l d0,140(sp)
    
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    28fc:	|     |  |      move.l 1e746 <CstCleanupQueueDrawBuffer>,76(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2904:	|     |  |      moveq #20,d0
    2906:	|     |  |      move.l d0,72(sp)
    290a:	|     |  |      clr.l 68(sp)
    290e:	|     |  |      move.l 1e81c <SysBase>,d0
    2914:	|     |  |      movea.l d0,a6
    2916:	|     |  |      move.l 72(sp),d0
    291a:	|     |  |      move.l 68(sp),d1
    291e:	|     |  |      jsr -684(a6)
    2922:	|     |  |      move.l d0,64(sp)
    2926:	|     |  |      move.l 64(sp),d0
    292a:	|     |  |      move.l d0,1e746 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2930:	|     |  |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2936:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    293c:	|     |  |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2942:	|     |  |      move.w 10(sp),d0
    2946:	|     |  |      move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    2948:	|     |  |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    294e:	|     |  |      move.l 136(sp),d0
    2952:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    2956:	|     |  |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    295c:	|     |  |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource;
    2960:	|     |  |      movea.l 168(sp),a0
    2964:	|     |  |      move.l (a0),d0
    2966:	|     |  |      movea.l d0,a0
    2968:	|     |  |      cmpa.w #0,a0
    296c:	|     |  |  ,-- bge.s 2972 <CstPasteChar+0x4fa>
    296e:	|     |  |  |   lea 15(a0),a0
    2972:	|     |  |  '-> move.l a0,d0
    2974:	|     |  |      asr.l #4,d0
    2976:	|     |  |      move.l d0,d0
    2978:	|     |  |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    297e:	|     |  |      add.w 160(sp),d0
    2982:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2986:	|     |  |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    298c:	|     |  |      move.l 128(sp),d0
    2990:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    2994:	|     |  |      move.w 10(sp),d0
    2998:	|     |  |  ,-- bpl.s 299e <CstPasteChar+0x526>
    299a:	|     |  |  |   addi.w #15,d0
    299e:	|     |  |  '-> asr.w #4,d0
    29a0:	|     |  |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    29a6:	|     |  |      add.w d0,d0
    29a8:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    29ac:	|     |  |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    29b2:	|     |  |      move.l 136(sp),d0
    29b6:	|     |  |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    29ba:	|     |  |      move.l 1e742 <CstCleanupQueueViewBuffer>,76(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    29c2:	|     |  |      moveq #20,d1
    29c4:	|     |  |      move.l d1,60(sp)
    29c8:	|     |  |      clr.l 56(sp)
    29cc:	|     |  |      move.l 1e81c <SysBase>,d0
    29d2:	|     |  |      movea.l d0,a6
    29d4:	|     |  |      move.l 60(sp),d0
    29d8:	|     |  |      move.l 56(sp),d1
    29dc:	|     |  |      jsr -684(a6)
    29e0:	|     |  |      move.l d0,52(sp)
    29e4:	|     |  |      move.l 52(sp),d0
    29e8:	|     |  |      move.l d0,1e742 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    29ee:	|     |  |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    29f4:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    29fa:	|     |  |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2a00:	|     |  |      move.w 10(sp),d0
    2a04:	|     |  |      move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2a06:	|     |  |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2a0c:	|     |  |      move.l 136(sp),d0
    2a10:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2a14:	|     |  |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2a1a:	|     |  |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    2a1e:	|     |  |      movea.l 168(sp),a0
    2a22:	|     |  |      move.l (a0),d0
    2a24:	|     |  |      movea.l d0,a0
    2a26:	|     |  |      cmpa.w #0,a0
    2a2a:	|     |  |  ,-- bge.s 2a30 <CstPasteChar+0x5b8>
    2a2c:	|     |  |  |   lea 15(a0),a0
    2a30:	|     |  |  '-> move.l a0,d0
    2a32:	|     |  |      asr.l #4,d0
    2a34:	|     |  |      move.l d0,d0
    2a36:	|     |  |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2a3c:	|     |  |      add.w 160(sp),d0
    2a40:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2a44:	|     |  |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2a4a:	|     |  |      move.l 128(sp),d0
    2a4e:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2a52:	|     |  |      move.w 10(sp),d0
    2a56:	|     |  |  ,-- bpl.s 2a5c <CstPasteChar+0x5e4>
    2a58:	|     |  |  |   addi.w #15,d0
    2a5c:	|     |  |  '-> asr.w #4,d0
    2a5e:	|     |  |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2a64:	|     |  |      add.w d0,d0
    2a66:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;     
    2a6a:	|     |  |      movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2a70:	|     |  |      move.l 136(sp),d0
    2a74:	|     |  |      move.w d0,14(a0)
    2a78:	|     +--|----- bra.w 2cd2 <CstPasteChar+0x85a>
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2a7c:	|     |  '----> move.w #1,162(sp)
    cutwordssource = 0;
    2a82:	|     |         clr.w 160(sp)
    cutmaskpixel = 0;
    2a86:	|     |         clr.w 158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2a8a:	|     |         clr.w 156(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    2a8e:	|     |         movea.l 168(sp),a0
    2a92:	|     |         move.l 24(a0),d0
    2a96:	|     |         move.l d0,d2
    2a98:	|     |         movea.l 168(sp),a0
    2a9c:	|     |         move.l (a0),d0
    2a9e:	|     |         movea.l d0,a0
    2aa0:	|     |         cmpa.w #0,a0
    2aa4:	|     |     ,-- bge.s 2aaa <CstPasteChar+0x632>
    2aa6:	|     |     |   lea 15(a0),a0
    2aaa:	|     |     '-> move.l a0,d0
    2aac:	|     |         asr.l #4,d0
    2aae:	|     |         move.l 132(sp),-(sp)
    2ab2:	|     |         move.l d0,-(sp)
    2ab4:	|     |         jsr 18e90 <__mulsi3>
    2aba:	|     |         addq.l #8,sp
    2abc:	|     |         add.l d0,d0
    2abe:	|     |         move.l d2,d1
    2ac0:	|     |         add.l d0,d1
    2ac2:	|     |         move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2ac6:	|     |         move.l 1e762 <winWidth>,d0
    2acc:	|     |         move.l 136(sp),-(sp)
    2ad0:	|     |         move.l d0,-(sp)
    2ad2:	|     |         jsr 18e90 <__mulsi3>
    2ad8:	|     |         addq.l #8,sp
    2ada:	|     |         lsr.l #3,d0
    2adc:	|     |         move.l 108(sp),d1
    2ae0:	|     |         add.l d0,d1
    2ae2:	|     |         move.w 10(sp),d0
    2ae6:	|     |     ,-- bpl.s 2aec <CstPasteChar+0x674>
    2ae8:	|     |     |   addi.w #15,d0
    2aec:	|     |     '-> asr.w #4,d0
    2aee:	|     |         movea.w d0,a0
    2af0:	|     |         move.l a0,d0
    2af2:	|     |         add.l a0,d0
    2af4:	|     |         move.l d1,d2
    2af6:	|     |         add.l d0,d2
    2af8:	|     |         move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2afc:	|     |         move.l 1e762 <winWidth>,d0
    2b02:	|     |         move.l 136(sp),-(sp)
    2b06:	|     |         move.l d0,-(sp)
    2b08:	|     |         jsr 18e90 <__mulsi3>
    2b0e:	|     |         addq.l #8,sp
    2b10:	|     |         lsr.l #3,d0
    2b12:	|     |         move.l 108(sp),d1
    2b16:	|     |         add.l d0,d1
    2b18:	|     |         move.w 10(sp),d0
    2b1c:	|     |     ,-- bpl.s 2b22 <CstPasteChar+0x6aa>
    2b1e:	|     |     |   addi.w #15,d0
    2b22:	|     |     '-> asr.w #4,d0
    2b24:	|     |         movea.w d0,a0
    2b26:	|     |         move.l a0,d0
    2b28:	|     |         add.l a0,d0
    2b2a:	|     |         move.l d1,d2
    2b2c:	|     |         add.l d0,d2
    2b2e:	|     |         move.l d2,144(sp)
    bltcon0 = ((x%16) << 12);
    2b32:	|     |         move.w 10(sp),d0
    2b36:	|     |         andi.w #-32753,d0
    2b3a:	|     |     ,-- bpl.s 2b44 <CstPasteChar+0x6cc>
    2b3c:	|     |     |   subq.w #1,d0
    2b3e:	|     |     |   ori.w #-16,d0
    2b42:	|     |     |   addq.w #1,d0
    2b44:	|     |     '-> ext.l d0
    2b46:	|     |         moveq #12,d1
    2b48:	|     |         lsl.l d1,d0
    2b4a:	|     |         move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2b4e:	|     |         move.l 1e746 <CstCleanupQueueDrawBuffer>,104(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2b56:	|     |         moveq #20,d2
    2b58:	|     |         move.l d2,100(sp)
    2b5c:	|     |         clr.l 96(sp)
    2b60:	|     |         move.l 1e81c <SysBase>,d0
    2b66:	|     |         movea.l d0,a6
    2b68:	|     |         move.l 100(sp),d0
    2b6c:	|     |         move.l 96(sp),d1
    2b70:	|     |         jsr -684(a6)
    2b74:	|     |         move.l d0,92(sp)
    2b78:	|     |         move.l 92(sp),d0
    2b7c:	|     |         move.l d0,1e746 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2b82:	|     |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2b88:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    2b8e:	|     |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2b94:	|     |         move.w 10(sp),d0
    2b98:	|     |         move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    2b9a:	|     |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2ba0:	|     |         move.l 136(sp),d0
    2ba4:	|     |         move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    2ba8:	|     |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2bae:	|     |         clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2bb2:	|     |         movea.l 168(sp),a0
    2bb6:	|     |         move.l (a0),d0
    2bb8:	|     |         movea.l d0,a0
    2bba:	|     |         cmpa.w #0,a0
    2bbe:	|     |     ,-- bge.s 2bc4 <CstPasteChar+0x74c>
    2bc0:	|     |     |   lea 15(a0),a0
    2bc4:	|     |     '-> move.l a0,d0
    2bc6:	|     |         asr.l #4,d0
    2bc8:	|     |         move.l d0,d0
    2bca:	|     |         add.w 160(sp),d0
    2bce:	|     |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2bd4:	|     |         add.w 162(sp),d0
    2bd8:	|     |         move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2bdc:	|     |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2be2:	|     |         move.l 128(sp),d0
    2be6:	|     |         move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    2bea:	|     |         move.w 10(sp),d0
    2bee:	|     |     ,-- bpl.s 2bf4 <CstPasteChar+0x77c>
    2bf0:	|     |     |   addi.w #15,d0
    2bf4:	|     |     '-> asr.w #4,d0
    2bf6:	|     |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2bfc:	|     |         add.w d0,d0
    2bfe:	|     |         move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2c02:	|     |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2c08:	|     |         move.l 136(sp),d0
    2c0c:	|     |         move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    2c10:	|     |         move.l 1e742 <CstCleanupQueueViewBuffer>,104(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2c18:	|     |         moveq #20,d0
    2c1a:	|     |         move.l d0,88(sp)
    2c1e:	|     |         clr.l 84(sp)
    2c22:	|     |         move.l 1e81c <SysBase>,d0
    2c28:	|     |         movea.l d0,a6
    2c2a:	|     |         move.l 88(sp),d0
    2c2e:	|     |         move.l 84(sp),d1
    2c32:	|     |         jsr -684(a6)
    2c36:	|     |         move.l d0,80(sp)
    2c3a:	|     |         move.l 80(sp),d0
    2c3e:	|     |         move.l d0,1e742 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2c44:	|     |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2c4a:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    2c50:	|     |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2c56:	|     |         move.w 10(sp),d0
    2c5a:	|     |         move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2c5c:	|     |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2c62:	|     |         move.l 136(sp),d0
    2c66:	|     |         move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2c6a:	|     |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2c70:	|     |         clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2c74:	|     |         movea.l 168(sp),a0
    2c78:	|     |         move.l (a0),d0
    2c7a:	|     |         movea.l d0,a0
    2c7c:	|     |         cmpa.w #0,a0
    2c80:	|     |     ,-- bge.s 2c86 <CstPasteChar+0x80e>
    2c82:	|     |     |   lea 15(a0),a0
    2c86:	|     |     '-> move.l a0,d0
    2c88:	|     |         asr.l #4,d0
    2c8a:	|     |         move.l d0,d0
    2c8c:	|     |         add.w 160(sp),d0
    2c90:	|     |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2c96:	|     |         add.w 162(sp),d0
    2c9a:	|     |         move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2c9e:	|     |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2ca4:	|     |         move.l 128(sp),d0
    2ca8:	|     |         move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2cac:	|     |         move.w 10(sp),d0
    2cb0:	|     |     ,-- bpl.s 2cb6 <CstPasteChar+0x83e>
    2cb2:	|     |     |   addi.w #15,d0
    2cb6:	|     |     '-> asr.w #4,d0
    2cb8:	|     |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2cbe:	|     |         add.w d0,d0
    2cc0:	|     |         move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;    
    2cc4:	|     |         movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    2cca:	|     |         move.l 136(sp),d0
    2cce:	|     |         move.w d0,14(a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2cd2:	|     '-------> moveq #0,d0
    2cd4:	|               move.w 158(sp),d0
    2cd8:	|               moveq #0,d1
    2cda:	|               not.w d1
    2cdc:	|               asr.l d0,d1
    2cde:	|               move.w d1,22(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2ce2:	|               moveq #0,d1
    2ce4:	|               move.w 160(sp),d1
    2ce8:	|               moveq #0,d0
    2cea:	|               move.w 162(sp),d0
    2cee:	|               sub.l d0,d1
    2cf0:	|               move.l d1,d0
    2cf2:	|               add.w d0,d0
    2cf4:	|               move.w d0,20(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2cf8:	|               move.l 1e762 <winWidth>,d0
    2cfe:	|               lsr.l #3,d0
    2d00:	|               move.l d0,d2
    2d02:	|               move.w 160(sp),d1
    2d06:	|               sub.w 162(sp),d1
    2d0a:	|               move.l 124(sp),d0
    2d0e:	|               sub.w d0,d1
    2d10:	|               move.w d1,d0
    2d12:	|               add.w d1,d0
    2d14:	|               add.w d2,d0
    2d16:	|               move.w d0,18(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2d1a:	|               move.l 1e762 <winWidth>,d0
    2d20:	|               lsr.l #3,d0
    2d22:	|               move.l d0,d2
    2d24:	|               move.w 160(sp),d1
    2d28:	|               sub.w 162(sp),d1
    2d2c:	|               move.l 124(sp),d0
    2d30:	|               sub.w d0,d1
    2d32:	|               move.w d1,d0
    2d34:	|               add.w d1,d0
    2d36:	|               add.w d2,d0
    2d38:	|               move.w d0,16(sp)

  WaitBlit();
    2d3c:	|               move.l 1e828 <GfxBase>,d0
    2d42:	|               movea.l d0,a6
    2d44:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2d48:	|               movea.l 112(sp),a0
    2d4c:	|               move.w 22(sp),68(a0)
  custom->bltalwm = bltalwm;
    2d52:	|               movea.l 112(sp),a0
    2d56:	|               move.w 156(sp),70(a0)
  custom->bltamod = bltamod;
    2d5c:	|               move.w 20(sp),d0
    2d60:	|               movea.l 112(sp),a0
    2d64:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2d68:	|               move.w 18(sp),d0
    2d6c:	|               movea.l 112(sp),a0
    2d70:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2d74:	|               move.w 16(sp),d0
    2d78:	|               movea.l 112(sp),a0
    2d7c:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2d80:	|               move.l 1e762 <winWidth>,d0
    2d86:	|               lsr.l #3,d0
    2d88:	|               move.l d0,d1
    2d8a:	|               move.l 1e766 <winHeight>,d0
    2d90:	|               move.l d0,d0
    2d92:	|               move.w d1,d2
    2d94:	|               muls.w d0,d2
    2d96:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2d9a:	|               move.w 1e726 <textPaletteIndex>,122(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2da2:	|               move.w 122(sp),d0
    2da6:	|               andi.w #1,d0
    2daa:	|               move.w d0,12(sp)
  if(tmp2) {
    2dae:	|        ,----- beq.s 2db8 <CstPasteChar+0x940>
    minterm = 0xbfa;
    2db0:	|        |      move.w #3066,120(sp)
    2db6:	|        |  ,-- bra.s 2dbe <CstPasteChar+0x946>
  } else {
    minterm = 0xb0a;
    2db8:	|        '--|-> move.w #2826,120(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2dbe:	|           '-> clr.l 116(sp)
    2dc2:	|     ,-------- bra.w 2e60 <CstPasteChar+0x9e8>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2dc6:	|  ,--|-------> move.l 140(sp),d0
    2dca:	|  |  |         add.w 120(sp),d0
    2dce:	|  |  |         movea.l 112(sp),a0
    2dd2:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2dd6:	|  |  |         move.l 152(sp),d0
    2dda:	|  |  |         movea.l 112(sp),a0
    2dde:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2de2:	|  |  |         move.l 148(sp),d0
    2de6:	|  |  |         movea.l 112(sp),a0
    2dea:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2dee:	|  |  |         move.l 144(sp),d0
    2df2:	|  |  |         movea.l 112(sp),a0
    2df6:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2dfa:	|  |  |         move.l 128(sp),d0
    2dfe:	|  |  |         lsl.w #6,d0
    2e00:	|  |  |         move.l 124(sp),d1
    2e04:	|  |  |         add.w d1,d0
    2e06:	|  |  |         sub.w 160(sp),d0
    2e0a:	|  |  |         add.w 162(sp),d0
    2e0e:	|  |  |         movea.l 112(sp),a0
    2e12:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2e16:	|  |  |         moveq #0,d0
    2e18:	|  |  |         move.w 14(sp),d0
    2e1c:	|  |  |         add.l d0,148(sp)
    bltdpt += bltcptplus;
    2e20:	|  |  |         moveq #0,d0
    2e22:	|  |  |         move.w 14(sp),d0
    2e26:	|  |  |         add.l d0,144(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2e2a:	|  |  |         move.w 122(sp),d0
    2e2e:	|  |  |         lsr.w #1,d0
    2e30:	|  |  |         move.w d0,122(sp)
    tmp2 = tmp & 0x01;
    2e34:	|  |  |         move.w 122(sp),d1
    2e38:	|  |  |         andi.w #1,d1
    2e3c:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2e40:	|  |  |  ,----- beq.s 2e4a <CstPasteChar+0x9d2>
      minterm = 0xbfa;
    2e42:	|  |  |  |      move.w #3066,120(sp)
    2e48:	|  |  |  |  ,-- bra.s 2e50 <CstPasteChar+0x9d8>
    } else {
      minterm = 0xb0a;
    2e4a:	|  |  |  '--|-> move.w #2826,120(sp)
    }   

    WaitBlit();     
    2e50:	|  |  |     '-> move.l 1e828 <GfxBase>,d0
    2e56:	|  |  |         movea.l d0,a6
    2e58:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2e5c:	|  |  |         addq.l #1,116(sp)
    2e60:	|  |  '-------> moveq #4,d2
    2e62:	|  |            cmp.l 116(sp),d2
    2e66:	|  '----------- bge.w 2dc6 <CstPasteChar+0x94e>
  }   
  //custom->color[0] = 0x000;
}
    2e6a:	'-------------> move.l (sp)+,d2
    2e6c:	                movea.l (sp)+,a6
    2e6e:	                lea 156(sp),sp
    2e72:	                rts

00002e74 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2e74:	                   lea -36(sp),sp
    2e78:	                   move.l a6,-(sp)
    2e7a:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2e7c:	                   move.l #14675968,16(sp)
  //custom->color[0] = 0xf00;
  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2e84:	                   move.l 1e746 <CstCleanupQueueDrawBuffer>,d0
    2e8a:	,----------------- beq.w 30ea <CstRestoreScreen+0x276>
    2e8e:	|                  move.l 1e73e <CstDrawBuffer>,d0
    2e94:	+----------------- beq.w 30ea <CstRestoreScreen+0x276>
    return;
  } 

  UWORD *colorpos = CstPalette;
    2e98:	|                  move.l 1e74e <CstPalette>,40(sp)
  UWORD *tmp = CstClColor;
    2ea0:	|                  move.l 1e74a <CstClColor>,36(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    2ea8:	|                  clr.l 32(sp)
    2eac:	|              ,-- bra.s 2ede <CstRestoreScreen+0x6a>
    *tmp++;
    2eae:	|           ,--|-> move.l 36(sp),d0
    2eb2:	|           |  |   move.l d0,d1
    2eb4:	|           |  |   addq.l #2,d1
    2eb6:	|           |  |   move.l d1,36(sp)
    *tmp++ = *colorpos++;
    2eba:	|           |  |   move.l 40(sp),d1
    2ebe:	|           |  |   move.l d1,d2
    2ec0:	|           |  |   addq.l #2,d2
    2ec2:	|           |  |   move.l d2,40(sp)
    2ec6:	|           |  |   move.l 36(sp),d0
    2eca:	|           |  |   move.l d0,d2
    2ecc:	|           |  |   addq.l #2,d2
    2ece:	|           |  |   move.l d2,36(sp)
    2ed2:	|           |  |   movea.l d1,a0
    2ed4:	|           |  |   move.w (a0),d1
    2ed6:	|           |  |   movea.l d0,a0
    2ed8:	|           |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    2eda:	|           |  |   addq.l #1,32(sp)
    2ede:	|           |  '-> moveq #31,d0
    2ee0:	|           |      cmp.l 32(sp),d0
    2ee4:	|           '----- bge.s 2eae <CstRestoreScreen+0x3a>
  }

  WaitBlit();
    2ee6:	|                  move.l 1e828 <GfxBase>,d0
    2eec:	|                  movea.l d0,a6
    2eee:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2ef2:	|                  movea.l 16(sp),a0
    2ef6:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2efc:	|                  movea.l 16(sp),a0
    2f00:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2f06:	|                  movea.l 16(sp),a0
    2f0a:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2f10:	|     ,----------- bra.w 30de <CstRestoreScreen+0x26a>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3
    2f14:	|  ,--|----------> movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2f1a:	|  |  |            move.l 4(a0),d0
    2f1e:	|  |  |     ,----- beq.s 2f34 <CstRestoreScreen+0xc0>
    2f20:	|  |  |     |      movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2f26:	|  |  |     |      movea.l 4(a0),a0
    2f2a:	|  |  |     |      move.l 16(a0),d0
    2f2e:	|  |  |     |      moveq #2,d1
    2f30:	|  |  |     |      cmp.l d0,d1
    2f32:	|  |  |     |  ,-- bge.s 2f42 <CstRestoreScreen+0xce>
      || CstCleanupQueueDrawBuffer->person == NULL)
    2f34:	|  |  |     '--|-> movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2f3a:	|  |  |        |   move.l 4(a0),d0
    2f3e:	|  |  |  ,-----|-- bne.w 30ac <CstRestoreScreen+0x238>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2f42:	|  |  |  |     '-> move.l 1e762 <winWidth>,d0
    2f48:	|  |  |  |         lsr.l #3,d0
    2f4a:	|  |  |  |         move.l d0,d1
    2f4c:	|  |  |  |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2f52:	|  |  |  |         move.w 8(a0),d0
    2f56:	|  |  |  |         add.w d0,d0
    2f58:	|  |  |  |         sub.w d0,d1
    2f5a:	|  |  |  |         movea.l 16(sp),a0
    2f5e:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2f62:	|  |  |  |         move.l 1e762 <winWidth>,d0
    2f68:	|  |  |  |         lsr.l #3,d0
    2f6a:	|  |  |  |         move.l d0,d1
    2f6c:	|  |  |  |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2f72:	|  |  |  |         move.w 8(a0),d0
    2f76:	|  |  |  |         add.w d0,d0
    2f78:	|  |  |  |         sub.w d0,d1
    2f7a:	|  |  |  |         movea.l 16(sp),a0
    2f7e:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2f82:	|  |  |  |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2f88:	|  |  |  |         move.w 14(a0),d0
    2f8c:	|  |  |  |         move.w d0,d0
    2f8e:	|  |  |  |         andi.l #65535,d0
    2f94:	|  |  |  |         move.l 1e762 <winWidth>,d1
    2f9a:	|  |  |  |         move.l d1,-(sp)
    2f9c:	|  |  |  |         move.l d0,-(sp)
    2f9e:	|  |  |  |         jsr 18e90 <__mulsi3>
    2fa4:	|  |  |  |         addq.l #8,sp
    2fa6:	|  |  |  |         move.l d0,d1
    2fa8:	|  |  |  |         lsr.l #3,d1
    2faa:	|  |  |  |         move.l 1e72e <CstBackDrop>,d0
    2fb0:	|  |  |  |         add.l d0,d1
    2fb2:	|  |  |  |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2fb8:	|  |  |  |         move.w 12(a0),d0
    2fbc:	|  |  |  |         move.w d0,d0
    2fbe:	|  |  |  |         andi.l #65535,d0
    2fc4:	|  |  |  |         move.l d1,d2
    2fc6:	|  |  |  |         add.l d0,d2
    2fc8:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2fcc:	|  |  |  |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    2fd2:	|  |  |  |         move.w 14(a0),d0
    2fd6:	|  |  |  |         move.w d0,d0
    2fd8:	|  |  |  |         andi.l #65535,d0
    2fde:	|  |  |  |         move.l 1e762 <winWidth>,d1
    2fe4:	|  |  |  |         move.l d1,-(sp)
    2fe6:	|  |  |  |         move.l d0,-(sp)
    2fe8:	|  |  |  |         jsr 18e90 <__mulsi3>
    2fee:	|  |  |  |         addq.l #8,sp
    2ff0:	|  |  |  |         move.l d0,d1
    2ff2:	|  |  |  |         lsr.l #3,d1
    2ff4:	|  |  |  |         move.l 1e73e <CstDrawBuffer>,d0
    2ffa:	|  |  |  |         add.l d0,d1
    2ffc:	|  |  |  |         movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    3002:	|  |  |  |         move.w 12(a0),d0
    3006:	|  |  |  |         move.w d0,d0
    3008:	|  |  |  |         andi.l #65535,d0
    300e:	|  |  |  |         move.l d1,d2
    3010:	|  |  |  |         add.l d0,d2
    3012:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3016:	|  |  |  |         clr.l 20(sp)
    301a:	|  |  |  |     ,-- bra.w 30a2 <CstRestoreScreen+0x22e>
      {
        custom->bltapt = (APTR) bltapt;
    301e:	|  |  |  |  ,--|-> move.l 28(sp),d0
    3022:	|  |  |  |  |  |   movea.l 16(sp),a0
    3026:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    302a:	|  |  |  |  |  |   move.l 24(sp),d0
    302e:	|  |  |  |  |  |   movea.l 16(sp),a0
    3032:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    3036:	|  |  |  |  |  |   movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    303c:	|  |  |  |  |  |   move.w 10(a0),d0
    3040:	|  |  |  |  |  |   lsl.w #6,d0
    3042:	|  |  |  |  |  |   movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    3048:	|  |  |  |  |  |   move.w 8(a0),d1
    304c:	|  |  |  |  |  |   add.w d1,d0
    304e:	|  |  |  |  |  |   movea.l 16(sp),a0
    3052:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    3056:	|  |  |  |  |  |   move.l 1e762 <winWidth>,d0
    305c:	|  |  |  |  |  |   lsr.l #3,d0
    305e:	|  |  |  |  |  |   move.l 1e766 <winHeight>,d1
    3064:	|  |  |  |  |  |   move.l d1,-(sp)
    3066:	|  |  |  |  |  |   move.l d0,-(sp)
    3068:	|  |  |  |  |  |   jsr 18e90 <__mulsi3>
    306e:	|  |  |  |  |  |   addq.l #8,sp
    3070:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    3074:	|  |  |  |  |  |   move.l 1e762 <winWidth>,d0
    307a:	|  |  |  |  |  |   lsr.l #3,d0
    307c:	|  |  |  |  |  |   move.l 1e766 <winHeight>,d1
    3082:	|  |  |  |  |  |   move.l d1,-(sp)
    3084:	|  |  |  |  |  |   move.l d0,-(sp)
    3086:	|  |  |  |  |  |   jsr 18e90 <__mulsi3>
    308c:	|  |  |  |  |  |   addq.l #8,sp
    308e:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    3092:	|  |  |  |  |  |   move.l 1e828 <GfxBase>,d0
    3098:	|  |  |  |  |  |   movea.l d0,a6
    309a:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    309e:	|  |  |  |  |  |   addq.l #1,20(sp)
    30a2:	|  |  |  |  |  '-> moveq #4,d0
    30a4:	|  |  |  |  |      cmp.l 20(sp),d0
    30a8:	|  |  |  |  '----- bge.w 301e <CstRestoreScreen+0x1aa>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    30ac:	|  |  |  '-------> move.l 1e746 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    30b4:	|  |  |            movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    30ba:	|  |  |            move.l 16(a0),d0
    30be:	|  |  |            move.l d0,1e746 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    30c4:	|  |  |            move.l 12(sp),8(sp)
    30ca:	|  |  |            move.l 1e81c <SysBase>,d0
    30d0:	|  |  |            movea.l d0,a6
    30d2:	|  |  |            movea.l 8(sp),a1
    30d6:	|  |  |            jsr -690(a6)
    todelete = NULL;
    30da:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    30de:	|  |  '----------> move.l 1e746 <CstCleanupQueueDrawBuffer>,d0
    30e4:	|  '-------------- bne.w 2f14 <CstRestoreScreen+0xa0>
    30e8:	|              ,-- bra.s 30ec <CstRestoreScreen+0x278>
    return;
    30ea:	'--------------|-> nop
  }
  //custom->color[0] = 0x000;
}
    30ec:	               '-> move.l (sp)+,d2
    30ee:	                   movea.l (sp)+,a6
    30f0:	                   lea 36(sp),sp
    30f4:	                   rts

000030f6 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    30f6:	                                                                                           lea -32(sp),sp
    30fa:	                                                                                           movem.l d2-d7/a2-a6,-(sp)
    30fe:	                                                                                           movea.l 80(sp),a2
    3102:	                                                                                           move.l 84(sp),64(sp)
    3108:	                                                                                           move.l 88(sp),d3
    310c:	                                                                                           move.l 92(sp),48(sp)
    3112:	                                                                                           move.w d3,d7
    3114:	                                                                                           move.w 50(sp),d2
    3118:	                                                                                           move.w 98(sp),d5
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    311c:	                                                                                           movea.w d2,a3
    311e:	                                                                                           movea.w d3,a6
    3120:	                                                                                           move.l a3,-(sp)
    3122:	                                                                                           move.l a6,-(sp)
    3124:	                                                                                           move.l 1e87c <zBuffer>,-(sp)
    312a:	                                                                                           move.l a2,-(sp)
    312c:	                                                                                           jsr 1552 <CstDrawZBuffer>
    3132:	                                                                                           move.l d0,d4

  UWORD *destination = 0;
  switch(destinationtype)
    3134:	                                                                                           lea 16(sp),sp
    3138:	                                                                                           cmpi.w #1,d5
    313c:	                                                            ,----------------------------- beq.w 360c <CstScaleSprite+0x516>
    3140:	                                                            |                              cmpi.w #2,d5
    3144:	                                                            |                 ,----------- beq.w 3472 <CstScaleSprite+0x37c>
    3148:	                                                            |                 |            suba.l a4,a4
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    314a:	                                                            |  ,--------------|----------> move.l 4(a2),d1
    314e:	                                                            |  |              |            move.l a3,d0
    3150:	                                                            |  |              |            add.l d1,d0
  if( y < 0) {
    3152:	                                                            |  |              |            tst.w d2
    3154:	                                                            |  |           ,--|----------- blt.w 3486 <CstScaleSprite+0x390>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    3158:	                                                            |  |           |  |  ,-------> movea.l 1e766 <winHeight>,a0
    315e:	                                                            |  |           |  |  |         cmp.l a0,d0
    3160:	                                                            |  |  ,--------|--|--|-------- ble.w 3616 <CstScaleSprite+0x520>
    if(y  > (int) winHeight) {
    3164:	                                                            |  |  |        |  |  |         cmpa.l a3,a0
    3166:	                     ,--------------------------------------|--|--|--------|--|--|-------- blt.w 3744 <CstScaleSprite+0x64e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    316a:	                     |                                      |  |  |        |  |  |         move.l a3,d6
    ystartsrc = 0;
    blitheight = winHeight-y;
    316c:	                     |                                      |  |  |        |  |  |         suba.l a3,a0
    316e:	                     |                                      |  |  |        |  |  |         move.l a0,54(sp)
    ystartsrc = 0;
    3172:	                     |                                      |  |  |        |  |  |         moveq #0,d2


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    3174:	                     |                                      |  |  |  ,-----|--|--|-------> move.l (a2),d1
    3176:	                     |                                      |  |  |  |     |  |  |         move.l a6,d0
    3178:	                     |                                      |  |  |  |     |  |  |         add.l d1,d0
  if( x < 0) 
    317a:	                     |                                      |  |  |  |     |  |  |         tst.w d7
    317c:	                     |                                      |  |  |  |     |  |  |  ,----- blt.w 34a2 <CstScaleSprite+0x3ac>
      CstCleanupQueueViewBuffer->height = blitheight; 
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    }           
  } 
  else if(x + single->width > (int) winWidth) 
    3180:	                     |                                      |  |  |  |     |  |  |  |  ,-> movea.l 1e762 <winWidth>,a5
    3186:	                     |                                      |  |  |  |     |  |  |  |  |   cmp.l a5,d0
    3188:	                     |                                      |  |  |  |  ,--|--|--|--|--|-- ble.w 3622 <CstScaleSprite+0x52c>
  { //Rightmost part outside screen   

    if(x - single->width > (int) winWidth)
    318c:	                     |                                      |  |  |  |  |  |  |  |  |  |   suba.l d1,a6
    318e:	                     |                                      |  |  |  |  |  |  |  |  |  |   cmpa.l a5,a6
    3190:	                     +--------------------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 3744 <CstScaleSprite+0x64e>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    3194:	                     |                                      |  |  |  |  |  |  |  |  |  |   sub.l a5,d0
    3196:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #4,d0
    3198:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,68(sp)
    319c:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.w d0,a3
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    319e:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 18e90 <__mulsi3>,a6
    31a4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d2,-(sp)
    31a6:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    31a8:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    31aa:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    31ac:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    31ae:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l d0,d4
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    31b0:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    31b4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    31b8:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,d7
    31ba:	                     |                                      |  |  |  |  |  |  |  |  |  |   asr.w #4,d7
    31bc:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d6,-(sp)
    31be:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,-(sp)
    31c0:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    31c2:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    31c4:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    31c6:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.w d7,a0
    31c8:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a0
    31ca:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a4
    31cc:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea (0,a4,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    31d0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,d2
    31d2:	                     |                                      |  |  |  |  |  |  |  |  |  |   andi.w #15,d2
    31d6:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,58(sp)
    31da:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #15,d1
    31dc:	                     |                                      |  |  |  |  |  |  |  |  |  |   and.l d3,d1
    31de:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    31e0:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d2
    31e2:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d2,d0
    31e4:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a4
    31e6:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 4042(a4),a4
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    31ea:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d0
    31ec:	                     |                                      |  |  |  |  |  |  |  |  |  |   not.w d0
    31ee:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d1,d0
    31f0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d0,52(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    31f4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 1e746 <CstCleanupQueueDrawBuffer>,d2
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    31fa:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l 1e81c <SysBase>,a6
    3200:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    3202:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    3204:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    3208:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    320a:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1e746 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3210:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d2,16(a0)

    CstCleanupQueueDrawBuffer->x = x;
    3214:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3216:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    321c:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3222:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    3224:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    3226:	         ,-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3a24 <CstScaleSprite+0x92e>
    322a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    322c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   movea.w 70(sp),a1
    3230:	         |           |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    3232:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3236:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 56(sp),d2
    323a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    323e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d7,d7
    3240:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,74(sp)
    3244:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3248:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,54(sp)
    324c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,14(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    } 
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3250:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 70(sp),d6
    3254:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d6,d6
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    3256:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    325a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 58(sp),d7
    325e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    3260:	         |           |                                      |  |  |  |  |  |  |  |  |  |   lsl.w d0,d7
    3262:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,58(sp)
    if( destinationtype != SCREEN)
    3266:	         |           |                                      |  |  |  |  |  |  |  |  |  |   cmpi.w #1,d5
    326a:	      ,--|-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 3a94 <CstScaleSprite+0x99e>
      next = CstCleanupQueueViewBuffer;
    326e:	      |  |  ,--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1e742 <CstCleanupQueueViewBuffer>,d5
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3274:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l 1e81c <SysBase>,a6
    327a:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    327c:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    327e:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    3282:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    3284:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1e742 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    328a:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d5,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    328e:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,(a0)
      CstCleanupQueueViewBuffer->y = y;
    3290:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    3296:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    329c:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    329e:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    32a0:	   ,--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3ada <CstScaleSprite+0x9e4>
    32a4:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    32a6:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 70(sp),d7
    32aa:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   add.w d0,d7
    32ac:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    32b0:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    32b4:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 74(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    32ba:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 54(sp),14(a0)
    32c0:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.w #-1,a4
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    32c4:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   clr.w d7
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    32c6:	,--|--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1e762 <winWidth>,d0
    32cc:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    32ce:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,d5
    32d0:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   add.w d0,d5
    32d2:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   tst.l d1
    32d4:	|  |  |  |  |  ,-----|--------------------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3818 <CstScaleSprite+0x722>
    32d8:	|  |  |  |  |  |  ,--|--------------------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    32da:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   sub.w d1,d5
  WaitBlit();
    32dc:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l #124968,d3
    32e2:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    32e4:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    32e6:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    32ea:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w a4,dff044 <gcc8_c_support.c.c60c1f2b+0xdb193e>
  custom->bltalwm = bltalwm;
    32f0:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 52(sp),dff046 <gcc8_c_support.c.c60c1f2b+0xdb1940>
  custom->bltamod = bltamod;
    32f8:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb195e>
  custom->bltbmod = bltbmod;
    32fe:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,dff062 <gcc8_c_support.c.c60c1f2b+0xdb195c>
  custom->bltcmod = bltcmod;
    3304:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d5,dff060 <gcc8_c_support.c.c60c1f2b+0xdb195a>
  custom->bltdmod = bltdmod;
    330a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d5,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1960>
  custom->bltcon0 = bltcon0;
    3310:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb193a>
  custom->bltcon1 = bltcon1;  
    3318:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 58(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb193c>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    3320:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3322:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsl.w #6,d2
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3324:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d6
    3326:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   asr.l #3,d6
    3328:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d6
    bltbpt += bltbptplus;
    332c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
  UWORD bltcptplus = winWidth/8*winHeight;
    3332:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 1e762 <winWidth>,d5
    3338:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d5
    333a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 1e768 <winHeight+0x2>,d5
    bltcpt += bltcptplus;
    3340:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d5
    custom->bltapt = (APTR) bltapt;
    3346:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
    custom->bltbpt = (APTR) bltbpt;
    334c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb1946>
    custom->bltcpt = (APTR) bltcpt;
    3354:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1942>
    custom->bltdpt = (APTR) bltdpt;
    335a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3360:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   tst.l d0
    3362:	|  |  |  |  |  |  |  |                       ,--------------|--|--|--|--|--|--|--|--|--|-- blt.w 38a8 <CstScaleSprite+0x7b2>
    3366:	|  |  |  |  |  |  |  |                       |     ,--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3368:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    336a:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    336c:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    336e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
    bltbpt += bltbptplus;
    3374:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a4
    3378:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d6,a4
    bltcpt += bltcptplus;
    337a:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d5,a5
    bltdpt += bltcptplus;
    WaitBlit();
    337c:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    337e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3380:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3384:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3386:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
    custom->bltbpt = (APTR) bltbpt;
    338c:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1946>
    custom->bltcpt = (APTR) bltcpt;
    3392:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1942>
    custom->bltdpt = (APTR) bltdpt;
    3398:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    339e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    33a0:	|  |  |  |  |  |  |  |                 ,-----|-----|--------|--|--|--|--|--|--|--|--|--|-- blt.w 38ea <CstScaleSprite+0x7f4>
    33a4:	|  |  |  |  |  |  |  |                 |     |  ,--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    33a6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    33a8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    33aa:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    33ac:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
    bltbpt += bltbptplus;
    33b2:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d6,a4
    bltcpt += bltcptplus;
    33b4:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d5,a5
    WaitBlit();
    33b6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    33b8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    33ba:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33be:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    33c0:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
    custom->bltbpt = (APTR) bltbpt;
    33c6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1946>
    custom->bltcpt = (APTR) bltcpt;
    33cc:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1942>
    custom->bltdpt = (APTR) bltdpt;
    33d2:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33d8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    33da:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3928 <CstScaleSprite+0x832>
    33de:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    33e0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    33e2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    33e4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    33e6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
    bltbpt += bltbptplus;
    33ec:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d6,a4
    bltcpt += bltcptplus;
    33ee:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d5,a5
    WaitBlit();
    33f0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    33f2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    33f4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33f8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    33fa:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
    custom->bltbpt = (APTR) bltbpt;
    3400:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1946>
    custom->bltcpt = (APTR) bltcpt;
    3406:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1942>
    custom->bltdpt = (APTR) bltdpt;
    340c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3412:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    3414:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3966 <CstScaleSprite+0x870>
    3418:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    341a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    341c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    341e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    3420:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
    bltbpt += bltbptplus;
    3426:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a4,d6
    bltcpt += bltcptplus;
    3428:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a5,d5
    WaitBlit();
    342a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    342c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    342e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3432:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3434:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
    custom->bltbpt = (APTR) bltbpt;
    343a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d6,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1946>
    custom->bltcpt = (APTR) bltcpt;
    3440:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1942>
    custom->bltdpt = (APTR) bltdpt;
    3446:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    344c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    344e:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 39a4 <CstScaleSprite+0x8ae>
    3452:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d7
    3456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d7
    3458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d7
    345a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d7,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
    WaitBlit();
    3460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    3462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    3468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    346c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 32(sp),sp
    3470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
      destination = (UWORD *) CstBackDrop;      
    3472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  '--|--|--|-> movea.l 1e72e <CstBackDrop>,a4
    if(y + single->height < 0) {
    3478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   move.l 4(a2),d1
    347c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   move.l a3,d0
    347e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   add.l d1,d0
  if( y < 0) {
    3480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   tst.w d2
    3482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     '--|--|-- bge.w 3158 <CstScaleSprite+0x62>
    if(y + single->height < 0) {
    3486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  '--------|--|-> tst.l d0
    3488:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|-----------|--|-- blt.w 3744 <CstScaleSprite+0x64e>
    ystartsrc = y*-1;
    348c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l a3,d2
    348e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   neg.l d2
    blitheight = single->height+y;
    3490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l d0,54(sp)
    ystartdst = 0;
    3494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   moveq #0,d6
    if(x + single->width < 0) {
    3496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l (a2),d1
    3498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l a6,d0
    349a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   add.l d1,d0
  if( x < 0) 
    349c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   tst.w d7
    349e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  '-- bge.w 3180 <CstScaleSprite+0x8a>
    if(x + single->width < 0) {
    34a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           '----> tst.l d0
    34a4:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|----------------- blt.w 3744 <CstScaleSprite+0x64e>
    cutwordssource = (x*-1)/16; 
    34a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d3,d0
    34aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addi.w #15,d0
    34ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  asr.w #4,d0
    34b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.w d0
    34b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,52(sp)
    34b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  movea.w d0,a3
    cutmaskpixel = (x*-1)%16;   
    34b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l a6,d0
    34ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.l d0
    34bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  moveq #15,d7
    34be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  and.l d0,d7
    34c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d7,68(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    34c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lea 18e90 <__mulsi3>,a6
    34ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 1e762 <winWidth>,-(sp)
    34d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d6,-(sp)
    34d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d1,52(sp)
    34d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  jsr (a6)
    34d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addq.l #8,sp
    34da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    34dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 44(sp),d1
    34e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  tst.l d7
    34e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  ,-------------- beq.w 375a <CstScaleSprite+0x664>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    34e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea (-2,a4,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    34ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w 52(sp),d7
    34ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               subq.w #1,d7
    34f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d7,74(sp)
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    34f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w #16,a0
    34f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               suba.l 68(sp),a0
    34fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l a0,d7
    34fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #12,d0
    3500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.l d0,d7
  custom->bltcon0 = bltcon0;
    3502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addi.w #4042,d7
    3506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d7,72(sp)
  custom->bltcon1 = bltcon1;  
    350a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a0,d7
    350c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.w d0,d7
    350e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d7,58(sp)
      extrawords = 1;
    3512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #1,d7
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w 52(sp),a4
    3518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l a4,a4
    351a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d2,-(sp)
    351c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,-(sp)
    351e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr (a6)
    3520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addq.l #8,sp
    3522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsr.l #3,d0
    3524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d4
    3526:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l d0,d4
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l 24(a2),a4
    352c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d0
    352e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 1e746 <CstCleanupQueueDrawBuffer>,d2
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l 1e81c <SysBase>,a6
    353e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #20,d0
    3540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #0,d1
    3542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr -684(a6)
    3546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l d0,a0
    3548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,1e746 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    354e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d2,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    3552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d3,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w 50(sp),2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    355a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l (a2),d1
    3562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,d0
    3564:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     ,-------- bmi.w 37c4 <CstScaleSprite+0x6ce>
    3568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     ,-> asr.l #4,d0
    356a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w 52(sp),d0
    356e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d7,d0
    3570:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    3574:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 56(sp),d2
    3578:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    357c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d6,54(sp)
    3584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d6,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   moveq #0,d0
    358a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   not.w d0
    358c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.l 68(sp),d6
    3590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   asr.l d6,d0
    3592:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   movea.l d0,a4
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3594:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 74(sp),d6
    3598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d6,d6
    if( destinationtype != SCREEN)
    359a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   cmpi.w #1,d5
    359e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  ,--|-----|-- beq.w 3802 <CstScaleSprite+0x70c>
      next = CstCleanupQueueViewBuffer;
    35a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  ,--|-> move.l 1e742 <CstCleanupQueueViewBuffer>,d5
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    35a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l 1e81c <SysBase>,a6
    35ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    35b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    35b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    35b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    35b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d0,1e742 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;
    35be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    35c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d3,(a0)
      CstCleanupQueueViewBuffer->y = y;
    35c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w 50(sp),2(a0)
      CstCleanupQueueViewBuffer->person = person;
    35ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    35d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    35d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    35d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|--|--|-- bmi.w 3a6e <CstScaleSprite+0x978>
    35d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    35da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w 52(sp),d0
    35de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    35e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    35e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    35e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    35ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w 54(sp),14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    35f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   clr.w 52(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    35f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|-> move.l 1e762 <winWidth>,d0
    35fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    35fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d6,d5
    3600:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d5
    3602:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    3604:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 32d8 <CstScaleSprite+0x1e2>
    3608:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 3818 <CstScaleSprite+0x722>
      destination = (UWORD *) CstDrawBuffer;      
    360c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|-> movea.l 1e73e <CstDrawBuffer>,a4
      break;
    3612:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--|--|--|--|--|-- bra.w 314a <CstScaleSprite+0x54>
    ystartdst = y;
    3616:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--|--|--|--|--|-> move.l a3,d6
    blitheight = single->height;
    3618:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   move.l d1,54(sp)
    ystartsrc = 0;
    361c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   moveq #0,d2
    361e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--|--|--|--|--|-- bra.w 3174 <CstScaleSprite+0x7e>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3622:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--|--|--|--|--|-> lea 18e90 <__mulsi3>,a3
    3628:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d2,-(sp)
    362a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,-(sp)
    362c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a3)
    362e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    3630:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    3632:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l d0,d4
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3634:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l 24(a2),d0
    3638:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    363c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d3,d7
    363e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   asr.w #4,d7
    3640:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d6,-(sp)
    3642:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l a5,-(sp)
    3644:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a3)
    3646:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    3648:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    364a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.w d7,a0
    364c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a0
    364e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a4
    3650:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea (0,a4,d0.l),a5
    bltcon0 = 0xfca + ((x%16) << 12);
    3654:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d3,d2
    3656:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   andi.w #15,d2
    365a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d2,58(sp)
    365e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #15,d0
    3660:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   and.l d3,d0
    3662:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #12,d1
    3664:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsl.l d1,d0
    3666:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a3
    3668:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 4042(a3),a3
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    366c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 1e746 <CstCleanupQueueDrawBuffer>,d2
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3672:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l 1e81c <SysBase>,a6
    3678:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #20,d0
    367a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #0,d1
    367c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr -684(a6)
    3680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a0
    3682:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,1e746 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3688:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d2,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    368c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d3,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    368e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w 50(sp),2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    3694:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    369a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l (a2),d1
    369c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,d0
    369e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-----|--|--|--|--|-- bmi.w 39c8 <CstScaleSprite+0x8d2>
    36a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   asr.l #4,d0
    36a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   addq.w #1,d0
    36a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    36aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w 56(sp),d2
    36ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    36b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   add.w d7,d7
    36b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    36b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   movea.w d6,a4
    36ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d6,14(a0)
  custom->bltcon0 = bltcon0;
    36be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w a3,72(sp)
  custom->bltcon1 = bltcon1;  
    36c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w 58(sp),d6
    36c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   moveq #12,d0
    36c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   lsl.w d0,d6
    36ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d6,58(sp)
    if( destinationtype != SCREEN)
    36ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   cmpi.w #1,d5
    36d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|-----|--|--|--|--|-- beq.w 3a00 <CstScaleSprite+0x90a>
      next = CstCleanupQueueViewBuffer;
    36d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,--|--|--|--|--|-> move.l 1e742 <CstCleanupQueueViewBuffer>,d5
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    36dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l 1e81c <SysBase>,a6
    36e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #20,d0
    36e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #0,d1
    36e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   jsr -684(a6)
    36ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l d0,a0
    36ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d0,1e742 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    36f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d5,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    36f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w d3,(a0)
      CstCleanupQueueViewBuffer->y = y;
    36f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w 50(sp),2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    36fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3704:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l (a2),d1
    3706:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d1,d0
    3708:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|-- bmi.w 3ab0 <CstScaleSprite+0x9ba>
    370c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   asr.l #4,d0
    370e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   addq.w #1,d0
    3710:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    3714:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    3718:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d7,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    371c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w a4,14(a0)
    3720:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   movea.w #-1,a4
    3724:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #-2,d6
    bltalwm = 0; //Last Word of this channel almost masked out
    3726:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   clr.w 52(sp)
    cutwordssource = 0;
    372a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   suba.l a3,a3
    extrawords = 1;
    372c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #1,d7
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    372e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|-> move.l 1e762 <winWidth>,d0
    3734:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    3736:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d6,d5
    3738:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d5
    373a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    373c:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 32d8 <CstScaleSprite+0x1e2>
    3740:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 3818 <CstScaleSprite+0x722>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    3744:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> move.l #103197,80(sp)
}
    374c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3750:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 32(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    3754:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jmp 18504 <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    375a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|-> lea (0,a4,d0.l),a5
    375e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w 52(sp),74(sp)
    3764:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w 58(sp)
    3768:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w #4042,72(sp)
      extrawords = 0;
    376e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w d7
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3770:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.w 52(sp),a4
    3774:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l a4,a4
    3776:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d2,-(sp)
    3778:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,-(sp)
    377a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr (a6)
    377c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   addq.l #8,sp
    377e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lsr.l #3,d0
    3780:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d4
    3782:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l d0,d4
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3784:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l 24(a2),a4
    3788:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d0
    378a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    378e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 1e746 <CstCleanupQueueDrawBuffer>,d2
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3794:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l 1e81c <SysBase>,a6
    379a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #20,d0
    379c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #0,d1
    379e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr -684(a6)
    37a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l d0,a0
    37a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,1e746 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    37aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d2,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    37ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w d3,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    37b0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w 50(sp),2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    37b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    37bc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l (a2),d1
    37be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,d0
    37c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-- bpl.w 3568 <CstScaleSprite+0x472>
    37c4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  '--|----> moveq #15,d0
    37c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.l d1,d0
    37c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l #4,d0
    37ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w 52(sp),d0
    37ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d7,d0
    37d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    37d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 56(sp),d2
    37d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    37dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    37e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d6,54(sp)
    37e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d6,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    37e8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      moveq #0,d0
    37ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      not.w d0
    37ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.l 68(sp),d6
    37f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l d6,d0
    37f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      movea.l d0,a4
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    37f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 74(sp),d6
    37f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d6,d6
    if( destinationtype != SCREEN)
    37fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      cmpi.w #1,d5
    37fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     '----- bne.w 35a2 <CstScaleSprite+0x4ac>
    bltalwm = 0; //Last Word of this channel almost masked out
    3802:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '----------> clr.w 52(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3806:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1e762 <winWidth>,d0
    380c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    380e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d6,d5
    3810:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  add.w d0,d5
    3812:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d1
    3814:	|  |  |  |  |  |  +-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- bge.w 32d8 <CstScaleSprite+0x1e2>
    3818:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------> addq.l #7,d1
    381a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d1
    381c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  sub.w d1,d5
  WaitBlit();
    381e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l #124968,d3
    3824:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l d3,a0
    3826:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l (a0),a6
    3828:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr -228(a6)
  custom->bltafwm = bltafwm;
    382c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w a4,dff044 <gcc8_c_support.c.c60c1f2b+0xdb193e>
  custom->bltalwm = bltalwm;
    3832:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 52(sp),dff046 <gcc8_c_support.c.c60c1f2b+0xdb1940>
  custom->bltamod = bltamod;
    383a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb195e>
  custom->bltbmod = bltbmod;
    3840:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d6,dff062 <gcc8_c_support.c.c60c1f2b+0xdb195c>
  custom->bltcmod = bltcmod;
    3846:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d5,dff060 <gcc8_c_support.c.c60c1f2b+0xdb195a>
  custom->bltdmod = bltdmod;
    384c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d5,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1960>
  custom->bltcon0 = bltcon0;
    3852:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb193a>
  custom->bltcon1 = bltcon1;  
    385a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 58(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb193c>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3862:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3864:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsl.w #6,d2
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3866:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d0,d6
    3868:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d6
    386a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 6(a2),d6
    bltbpt += bltbptplus;
    386e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d6
  UWORD bltcptplus = winWidth/8*winHeight;
    3874:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1e762 <winWidth>,d5
    387a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d5
    387c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 1e768 <winHeight+0x2>,d5
    bltcpt += bltcptplus;
    3882:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d5
    custom->bltapt = (APTR) bltapt;
    3888:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
    custom->bltbpt = (APTR) bltbpt;
    388e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb1946>
    custom->bltcpt = (APTR) bltcpt;
    3896:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1942>
    custom->bltdpt = (APTR) bltdpt;
    389c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d0
    38a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|----------------- bge.w 3366 <CstScaleSprite+0x270>
    38a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--|-----|--|--|--|--|--|--|----------------> moveq #15,d1
    38aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.l d1,d0
    38ac:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  asr.l #4,d0
    38ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d7,d0
    38b0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d2,d0
    38b2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  sub.w a3,d0
    38b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
    bltbpt += bltbptplus;
    38ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l 60(sp),a4
    38be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d6,a4
    bltcpt += bltcptplus;
    38c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d5,a5
    WaitBlit();
    38c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l d3,a0
    38c4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l (a0),a6
    38c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    38cc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
    custom->bltbpt = (APTR) bltbpt;
    38d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1946>
    custom->bltcpt = (APTR) bltcpt;
    38d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1942>
    custom->bltdpt = (APTR) bltdpt;
    38de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  tst.l d0
    38e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     '-----|--|--|--|--|--|--|----------------- bge.w 33a4 <CstScaleSprite+0x2ae>
    38ea:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|--|--|----------------> moveq #15,d1
    38ec:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.l d1,d0
    38ee:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  asr.l #4,d0
    38f0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d7,d0
    38f2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d2,d0
    38f4:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  sub.w a3,d0
    38f6:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
    bltbpt += bltbptplus;
    38fc:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d6,a4
    bltcpt += bltcptplus;
    38fe:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d5,a5
    WaitBlit();
    3900:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  movea.l d3,a0
    3902:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  movea.l (a0),a6
    3904:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3908:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    390a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
    custom->bltbpt = (APTR) bltbpt;
    3910:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1946>
    custom->bltcpt = (APTR) bltcpt;
    3916:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1942>
    custom->bltdpt = (APTR) bltdpt;
    391c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3922:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  tst.l d0
    3924:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|--|--|----------------- bge.w 33de <CstScaleSprite+0x2e8>
    3928:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|--|--|----------------> moveq #15,d1
    392a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.l d1,d0
    392c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  asr.l #4,d0
    392e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d7,d0
    3930:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d2,d0
    3932:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  sub.w a3,d0
    3934:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
    bltbpt += bltbptplus;
    393a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d6,a4
    bltcpt += bltcptplus;
    393c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d5,a5
    WaitBlit();
    393e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  movea.l d3,a0
    3940:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  movea.l (a0),a6
    3942:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3946:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3948:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
    custom->bltbpt = (APTR) bltbpt;
    394e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1946>
    custom->bltcpt = (APTR) bltcpt;
    3954:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1942>
    custom->bltdpt = (APTR) bltdpt;
    395a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3960:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  tst.l d0
    3962:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|--|--|----------------- bge.w 3418 <CstScaleSprite+0x322>
    3966:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|--|--|----------------> moveq #15,d1
    3968:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l d1,d0
    396a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  asr.l #4,d0
    396c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d7,d0
    396e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d2,d0
    3970:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  sub.w a3,d0
    3972:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
    bltbpt += bltbptplus;
    3978:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a4,d6
    bltcpt += bltcptplus;
    397a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a5,d5
    WaitBlit();
    397c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  movea.l d3,a0
    397e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  movea.l (a0),a6
    3980:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3984:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3986:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb194a>
    custom->bltbpt = (APTR) bltbpt;
    398c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d6,dff04c <gcc8_c_support.c.c60c1f2b+0xdb1946>
    custom->bltcpt = (APTR) bltcpt;
    3992:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1942>
    custom->bltdpt = (APTR) bltdpt;
    3998:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb194e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    399e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  tst.l d0
    39a0:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|--|--|----------------- bge.w 3452 <CstScaleSprite+0x35c>
    39a4:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|--|--|----------------> moveq #15,d1
    39a6:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.l d1,d0
    39a8:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  asr.l #4,d0
    39aa:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d0,d7
    39ac:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d2,d7
    39ae:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  sub.w a3,d7
    39b0:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  move.w d7,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1952>
    WaitBlit();
    39b6:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movea.l d3,a0
    39b8:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movea.l (a0),a6
    39ba:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  jsr -228(a6)
}
    39be:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movem.l (sp)+,d2-d7/a2-a6
    39c2:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  lea 32(sp),sp
    39c6:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  rts
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    39c8:	|  |  |  |  |  |  |                                   |  |  |  |  |  '--|----------------> moveq #15,d0
    39ca:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.l d1,d0
    39cc:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  asr.l #4,d0
    39ce:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  addq.w #1,d0
    39d0:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    39d4:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w 56(sp),d2
    39d8:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    39dc:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.w d7,d7
    39de:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    39e2:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  movea.w d6,a4
    39e4:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d6,14(a0)
  custom->bltcon0 = bltcon0;
    39e8:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w a3,72(sp)
  custom->bltcon1 = bltcon1;  
    39ec:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w 58(sp),d6
    39f0:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  moveq #12,d0
    39f2:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  lsl.w d0,d6
    39f4:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d6,58(sp)
    if( destinationtype != SCREEN)
    39f8:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  cmpi.w #1,d5
    39fc:	|  |  |  |  |  |  |                                   |  |  |  |  |     '----------------- bne.w 36d6 <CstScaleSprite+0x5e0>
    extrawords = 1;
    3a00:	|  |  |  |  |  |  |                                   |  |  |  |  '----------------------> moveq #1,d7
    3a02:	|  |  |  |  |  |  |                                   |  |  |  |                           movea.w #-1,a4
    3a06:	|  |  |  |  |  |  |                                   |  |  |  |                           moveq #-2,d6
    bltalwm = 0; //Last Word of this channel almost masked out
    3a08:	|  |  |  |  |  |  |                                   |  |  |  |                           clr.w 52(sp)
    cutwordssource = 0;
    3a0c:	|  |  |  |  |  |  |                                   |  |  |  |                           suba.l a3,a3
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3a0e:	|  |  |  |  |  |  |                                   |  |  |  |                           move.l 1e762 <winWidth>,d0
    3a14:	|  |  |  |  |  |  |                                   |  |  |  |                           lsr.l #3,d0
    3a16:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w d6,d5
    3a18:	|  |  |  |  |  |  |                                   |  |  |  |                           add.w d0,d5
    3a1a:	|  |  |  |  |  |  |                                   |  |  |  |                           tst.l d1
    3a1c:	|  |  |  |  |  |  +-----------------------------------|--|--|--|-------------------------- bge.w 32d8 <CstScaleSprite+0x1e2>
    3a20:	|  |  |  |  |  +--|-----------------------------------|--|--|--|-------------------------- bra.w 3818 <CstScaleSprite+0x722>
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3a24:	|  |  |  '--|--|--|-----------------------------------|--|--|--|-------------------------> moveq #15,d0
    3a26:	|  |  |     |  |  |                                   |  |  |  |                           add.l d1,d0
    3a28:	|  |  |     |  |  |                                   |  |  |  |                           asr.l #4,d0
    3a2a:	|  |  |     |  |  |                                   |  |  |  |                           movea.w 70(sp),a1
    3a2e:	|  |  |     |  |  |                                   |  |  |  |                           adda.w d0,a1
    3a30:	|  |  |     |  |  |                                   |  |  |  |                           move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3a34:	|  |  |     |  |  |                                   |  |  |  |                           move.w 56(sp),d2
    3a38:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3a3c:	|  |  |     |  |  |                                   |  |  |  |                           add.w d7,d7
    3a3e:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,74(sp)
    3a42:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3a46:	|  |  |     |  |  |                                   |  |  |  |                           move.w d6,54(sp)
    3a4a:	|  |  |     |  |  |                                   |  |  |  |                           move.w d6,14(a0)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3a4e:	|  |  |     |  |  |                                   |  |  |  |                           move.w 70(sp),d6
    3a52:	|  |  |     |  |  |                                   |  |  |  |                           add.w d6,d6
  custom->bltcon0 = bltcon0;
    3a54:	|  |  |     |  |  |                                   |  |  |  |                           move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    3a58:	|  |  |     |  |  |                                   |  |  |  |                           move.w 58(sp),d7
    3a5c:	|  |  |     |  |  |                                   |  |  |  |                           moveq #12,d0
    3a5e:	|  |  |     |  |  |                                   |  |  |  |                           lsl.w d0,d7
    3a60:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,58(sp)
    if( destinationtype != SCREEN)
    3a64:	|  |  |     |  |  |                                   |  |  |  |                           cmpi.w #1,d5
    3a68:	|  |  |     '--|--|-----------------------------------|--|--|--|-------------------------- bne.w 326e <CstScaleSprite+0x178>
    3a6c:	|  |  +--------|--|-----------------------------------|--|--|--|-------------------------- bra.s 3a94 <CstScaleSprite+0x99e>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3a6e:	|  |  |        |  |                                   |  '--|--|-------------------------> moveq #15,d0
    3a70:	|  |  |        |  |                                   |     |  |                           add.l d1,d0
    3a72:	|  |  |        |  |                                   |     |  |                           asr.l #4,d0
    3a74:	|  |  |        |  |                                   |     |  |                           add.w 52(sp),d0
    3a78:	|  |  |        |  |                                   |     |  |                           add.w d7,d0
    3a7a:	|  |  |        |  |                                   |     |  |                           move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    3a7e:	|  |  |        |  |                                   |     |  |                           move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    3a82:	|  |  |        |  |                                   |     |  |                           clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    3a86:	|  |  |        |  |                                   |     |  |                           move.w 54(sp),14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    3a8c:	|  |  |        |  |                                   |     |  |                           clr.w 52(sp)
    3a90:	|  |  |        |  |                                   '-----|--|-------------------------- bra.w 35f6 <CstScaleSprite+0x500>
    3a94:	|  |  '--------|--|-----------------------------------------|--|-------------------------> movea.w #-1,a4
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3a98:	|  |           |  |                                         |  |                           clr.w d7
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3a9a:	|  |           |  |                                         |  |                           move.l 1e762 <winWidth>,d0
    3aa0:	|  |           |  |                                         |  |                           lsr.l #3,d0
    3aa2:	|  |           |  |                                         |  |                           move.w d6,d5
    3aa4:	|  |           |  |                                         |  |                           add.w d0,d5
    3aa6:	|  |           |  |                                         |  |                           tst.l d1
    3aa8:	|  |           |  '-----------------------------------------|--|-------------------------- bge.w 32d8 <CstScaleSprite+0x1e2>
    3aac:	|  |           '--------------------------------------------|--|-------------------------- bra.w 3818 <CstScaleSprite+0x722>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3ab0:	|  |                                                        |  '-------------------------> moveq #15,d0
    3ab2:	|  |                                                        |                              add.l d1,d0
    3ab4:	|  |                                                        |                              asr.l #4,d0
    3ab6:	|  |                                                        |                              addq.w #1,d0
    3ab8:	|  |                                                        |                              move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    3abc:	|  |                                                        |                              move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    3ac0:	|  |                                                        |                              move.w d7,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    3ac4:	|  |                                                        |                              move.w a4,14(a0)
    3ac8:	|  |                                                        |                              movea.w #-1,a4
    3acc:	|  |                                                        |                              moveq #-2,d6
    bltalwm = 0; //Last Word of this channel almost masked out
    3ace:	|  |                                                        |                              clr.w 52(sp)
    cutwordssource = 0;
    3ad2:	|  |                                                        |                              suba.l a3,a3
    extrawords = 1;
    3ad4:	|  |                                                        |                              moveq #1,d7
    3ad6:	|  |                                                        '----------------------------- bra.w 372e <CstScaleSprite+0x638>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    3ada:	|  '-------------------------------------------------------------------------------------> moveq #15,d0
    3adc:	|                                                                                          add.l d1,d0
    3ade:	|                                                                                          asr.l #4,d0
    3ae0:	|                                                                                          move.w 70(sp),d7
    3ae4:	|                                                                                          add.w d0,d7
    3ae6:	|                                                                                          move.w d7,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    3aea:	|                                                                                          move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3aee:	|                                                                                          move.w 74(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    3af4:	|                                                                                          move.w 54(sp),14(a0)
    3afa:	|                                                                                          movea.w #-1,a4
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3afe:	|                                                                                          clr.w d7
    3b00:	'----------------------------------------------------------------------------------------- bra.w 32c6 <CstScaleSprite+0x1d0>

00003b04 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3b04:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3b06:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3b0c:	move.l 8(sp),d0
    3b10:	movea.l (sp),a0
    3b12:	move.l d0,128(a0)
}
    3b16:	nop
    3b18:	addq.l #4,sp
    3b1a:	rts

00003b1c <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3b1c:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3b20:	move.l 1e73a <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3b28:	move.l 1e73e <CstDrawBuffer>,d0
    3b2e:	move.l d0,1e73a <CstViewBuffer>
  CstDrawBuffer = tmp;
    3b34:	move.l 16(sp),1e73e <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3b3c:	move.l 1e742 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    3b44:	move.l 1e746 <CstCleanupQueueDrawBuffer>,d0
    3b4a:	move.l d0,1e742 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3b50:	move.l 12(sp),1e746 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3b58:	move.l 1e736 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3b60:	move.l 1e73a <CstViewBuffer>,d0
    3b66:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3b6a:	move.l 4(sp),d0
    3b6e:	clr.w d0
    3b70:	swap d0
    3b72:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    3b76:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    3b7a:	movea.w #118,a0
    3b7e:	adda.l 8(sp),a0
    3b82:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3b84:	movea.w #114,a0
    3b88:	adda.l 8(sp),a0
    3b8c:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3b90:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3b98:	move.l 4(sp),d0
    3b9c:	clr.w d0
    3b9e:	swap d0
    3ba0:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3ba4:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    3ba8:	movea.w #126,a0
    3bac:	adda.l 8(sp),a0
    3bb0:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3bb2:	movea.w #122,a0
    3bb6:	adda.l 8(sp),a0
    3bba:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3bbe:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3bc6:	move.l 4(sp),d0
    3bca:	clr.w d0
    3bcc:	swap d0
    3bce:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3bd2:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3bd6:	movea.l 8(sp),a0
    3bda:	lea 134(a0),a0
    3bde:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3be0:	movea.l 8(sp),a0
    3be4:	lea 130(a0),a0
    3be8:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3bec:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3bf4:	move.l 4(sp),d0
    3bf8:	clr.w d0
    3bfa:	swap d0
    3bfc:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3c00:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3c04:	movea.l 8(sp),a0
    3c08:	lea 142(a0),a0
    3c0c:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3c0e:	movea.l 8(sp),a0
    3c12:	lea 138(a0),a0
    3c16:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3c1a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3c22:	move.l 4(sp),d0
    3c26:	clr.w d0
    3c28:	swap d0
    3c2a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3c2e:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3c32:	movea.l 8(sp),a0
    3c36:	lea 150(a0),a0
    3c3a:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3c3c:	movea.l 8(sp),a0
    3c40:	lea 146(a0),a0
    3c44:	move.w 2(sp),(a0)

}
    3c48:	nop
    3c4a:	lea 20(sp),sp
    3c4e:	rts

00003c50 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3c50:	          lea -68(sp),sp
    3c54:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3c56:	          pea 19350 <PutChar+0x3aa>
    3c5c:	          jsr 18504 <KPrintF>
    3c62:	          addq.l #4,sp

  width = width / 8;
    3c64:	          move.l 76(sp),d0
    3c68:	      ,-- bpl.s 3c6c <CstReserveBackdrop+0x1c>
    3c6a:	      |   addq.l #7,d0
    3c6c:	      '-> asr.l #3,d0
    3c6e:	          move.l d0,76(sp)

  if( width < 40) 
    3c72:	          moveq #39,d0
    3c74:	          cmp.l 76(sp),d0
    3c78:	      ,-- blt.s 3c8e <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3c7a:	      |   pea 1936a <PutChar+0x3c4>
    3c80:	      |   jsr 18504 <KPrintF>
    3c86:	      |   addq.l #4,sp
    return FALSE;
    3c88:	      |   clr.w d0
    3c8a:	,-----|-- bra.w 3fca <CstReserveBackdrop+0x37a>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3c8e:	|     '-> pea 193a8 <PutChar+0x402>
    3c94:	|         jsr 18504 <KPrintF>
    3c9a:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3c9c:	|         move.l 76(sp),-(sp)
    3ca0:	|         jsr 10ca <CstCreateCopperlist>
    3ca6:	|         addq.l #4,sp
    3ca8:	|         move.l d0,1e736 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3cae:	|         pea 193c8 <PutChar+0x422>
    3cb4:	|         jsr 18504 <KPrintF>
    3cba:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3cbc:	|         move.l 76(sp),d1
    3cc0:	|         move.l 80(sp),d0
    3cc4:	|         muls.w d1,d0
    3cc6:	|         move.w d0,1e72c <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3ccc:	|         move.w 1e72c <CstBackdropSizePlane>,d1
    3cd2:	|         move.w d1,d0
    3cd4:	|         add.w d0,d0
    3cd6:	|         add.w d0,d0
    3cd8:	|         add.w d1,d0
    3cda:	|         move.w d0,1e72a <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3ce0:	|         move.w 1e72a <CstBackdropSize>,d0
    3ce6:	|         move.w d0,d0
    3ce8:	|         andi.l #65535,d0
    3cee:	|         move.l d0,60(sp)
    3cf2:	|         moveq #2,d1
    3cf4:	|         move.l d1,56(sp)
    3cf8:	|         move.l 1e81c <SysBase>,d0
    3cfe:	|         movea.l d0,a6
    3d00:	|         move.l 60(sp),d0
    3d04:	|         move.l 56(sp),d1
    3d08:	|         jsr -684(a6)
    3d0c:	|         move.l d0,52(sp)
    3d10:	|         move.l 52(sp),d0
    3d14:	|         move.l d0,1e72e <CstBackDrop>
  if( !CstBackDrop)
    3d1a:	|         move.l 1e72e <CstBackDrop>,d0
    3d20:	|     ,-- bne.s 3d36 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3d22:	|     |   pea 193ef <PutChar+0x449>
    3d28:	|     |   jsr 18504 <KPrintF>
    3d2e:	|     |   addq.l #4,sp
    return FALSE;  
    3d30:	|     |   clr.w d0
    3d32:	+-----|-- bra.w 3fca <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3d36:	|     '-> pea 19427 <PutChar+0x481>
    3d3c:	|         jsr 18504 <KPrintF>
    3d42:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3d44:	|         move.l 1e72e <CstBackDrop>,68(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3d4c:	|         clr.l 64(sp)
    3d50:	|     ,-- bra.s 3d66 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3d52:	|  ,--|-> move.l 68(sp),d0
    3d56:	|  |  |   move.l d0,d1
    3d58:	|  |  |   addq.l #4,d1
    3d5a:	|  |  |   move.l d1,68(sp)
    3d5e:	|  |  |   movea.l d0,a0
    3d60:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3d62:	|  |  |   addq.l #1,64(sp)
    3d66:	|  |  '-> move.w 1e72a <CstBackdropSize>,d0
    3d6c:	|  |      lsr.w #2,d0
    3d6e:	|  |      move.w d0,d0
    3d70:	|  |      andi.l #65535,d0
    3d76:	|  |      cmp.l 64(sp),d0
    3d7a:	|  '----- bgt.s 3d52 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3d7c:	|         move.w 1e72a <CstBackdropSize>,d0
    3d82:	|         move.w d0,d0
    3d84:	|         andi.l #65535,d0
    3d8a:	|         move.l 76(sp),d1
    3d8e:	|         add.l d1,d1
    3d90:	|         add.l d1,d0
    3d92:	|         move.l d0,48(sp)
    3d96:	|         moveq #2,d0
    3d98:	|         move.l d0,44(sp)
    3d9c:	|         move.l 1e81c <SysBase>,d0
    3da2:	|         movea.l d0,a6
    3da4:	|         move.l 48(sp),d0
    3da8:	|         move.l 44(sp),d1
    3dac:	|         jsr -684(a6)
    3db0:	|         move.l d0,40(sp)
    3db4:	|         move.l 40(sp),d0
    3db8:	|         move.l d0,1e73e <CstDrawBuffer>
  if( !CstDrawBuffer)
    3dbe:	|         move.l 1e73e <CstDrawBuffer>,d0
    3dc4:	|     ,-- bne.s 3dda <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3dc6:	|     |   pea 1944d <PutChar+0x4a7>
    3dcc:	|     |   jsr 18504 <KPrintF>
    3dd2:	|     |   addq.l #4,sp
    return FALSE;  
    3dd4:	|     |   clr.w d0
    3dd6:	+-----|-- bra.w 3fca <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3dda:	|     '-> pea 19487 <PutChar+0x4e1>
    3de0:	|         jsr 18504 <KPrintF>
    3de6:	|         addq.l #4,sp
    
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3de8:	|         move.w 1e72a <CstBackdropSize>,d0
    3dee:	|         move.w d0,d0
    3df0:	|         andi.l #65535,d0
    3df6:	|         move.l 76(sp),d1
    3dfa:	|         add.l d1,d1
    3dfc:	|         add.l d1,d0
    3dfe:	|         move.l d0,36(sp)
    3e02:	|         moveq #2,d1
    3e04:	|         move.l d1,32(sp)
    3e08:	|         move.l 1e81c <SysBase>,d0
    3e0e:	|         movea.l d0,a6
    3e10:	|         move.l 36(sp),d0
    3e14:	|         move.l 32(sp),d1
    3e18:	|         jsr -684(a6)
    3e1c:	|         move.l d0,28(sp)
    3e20:	|         move.l 28(sp),d0
    3e24:	|         move.l d0,1e73a <CstViewBuffer>
  if( !CstViewBuffer)
    3e2a:	|         move.l 1e73a <CstViewBuffer>,d0
    3e30:	|     ,-- bne.s 3e46 <CstReserveBackdrop+0x1f6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3e32:	|     |   pea 194af <PutChar+0x509>
    3e38:	|     |   jsr 18504 <KPrintF>
    3e3e:	|     |   addq.l #4,sp
    return FALSE;  
    3e40:	|     |   clr.w d0
    3e42:	+-----|-- bra.w 3fca <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3e46:	|     '-> pea 194e9 <PutChar+0x543>
    3e4c:	|         jsr 18504 <KPrintF>
    3e52:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3e54:	|         move.l 1e73e <CstDrawBuffer>,d1
    3e5a:	|         move.l 76(sp),d0
    3e5e:	|     ,-- bpl.s 3e62 <CstReserveBackdrop+0x212>
    3e60:	|     |   addq.l #3,d0
    3e62:	|     '-> asr.l #2,d0
    3e64:	|         add.l d0,d0
    3e66:	|         add.l d0,d0
    3e68:	|         add.l d1,d0
    3e6a:	|         move.l d0,1e73e <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3e70:	|         move.l 1e73a <CstViewBuffer>,d1
    3e76:	|         move.l 76(sp),d0
    3e7a:	|     ,-- bpl.s 3e7e <CstReserveBackdrop+0x22e>
    3e7c:	|     |   addq.l #3,d0
    3e7e:	|     '-> asr.l #2,d0
    3e80:	|         add.l d0,d0
    3e82:	|         add.l d0,d0
    3e84:	|         add.l d1,d0
    3e86:	|         move.l d0,1e73a <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3e8c:	|         move.l #5200,24(sp)
    3e94:	|         moveq #2,d0
    3e96:	|         move.l d0,20(sp)
    3e9a:	|         move.l 1e81c <SysBase>,d0
    3ea0:	|         movea.l d0,a6
    3ea2:	|         move.l 24(sp),d0
    3ea6:	|         move.l 20(sp),d1
    3eaa:	|         jsr -684(a6)
    3eae:	|         move.l d0,16(sp)
    3eb2:	|         move.l 16(sp),d0
    3eb6:	|         move.l d0,1e756 <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3ebc:	|         move.l #5600,12(sp)
    3ec4:	|         moveq #2,d1
    3ec6:	|         move.l d1,8(sp)
    3eca:	|         move.l 1e81c <SysBase>,d0
    3ed0:	|         movea.l d0,a6
    3ed2:	|         move.l 12(sp),d0
    3ed6:	|         move.l 8(sp),d1
    3eda:	|         jsr -684(a6)
    3ede:	|         move.l d0,4(sp)
    3ee2:	|         move.l 4(sp),d0
    3ee6:	|         move.l d0,1e75a <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3eec:	|         move.l 1e72e <CstBackDrop>,d0
    3ef2:	|         clr.l -(sp)
    3ef4:	|         pea 5 <_start+0x5>
    3ef8:	|         pea 100 <copyString+0x48>
    3efc:	|         pea 140 <decodeFilename+0x28>
    3f00:	|         pea 19511 <PutChar+0x56b>
    3f06:	|         move.l d0,-(sp)
    3f08:	|         jsr 185ec <debug_register_bitmap>
    3f0e:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3f12:	|         move.l 80(sp),d0
    3f16:	|         movea.w d0,a1
    3f18:	|         move.l 76(sp),d0
    3f1c:	|         lsl.w #3,d0
    3f1e:	|         movea.w d0,a0
    3f20:	|         move.l 1e73e <CstDrawBuffer>,d0
    3f26:	|         clr.l -(sp)
    3f28:	|         pea 5 <_start+0x5>
    3f2c:	|         move.l a1,-(sp)
    3f2e:	|         move.l a0,-(sp)
    3f30:	|         pea 19521 <PutChar+0x57b>
    3f36:	|         move.l d0,-(sp)
    3f38:	|         jsr 185ec <debug_register_bitmap>
    3f3e:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3f42:	|         move.l 80(sp),d0
    3f46:	|         movea.w d0,a1
    3f48:	|         move.l 76(sp),d0
    3f4c:	|         lsl.w #3,d0
    3f4e:	|         movea.w d0,a0
    3f50:	|         move.l 1e73a <CstViewBuffer>,d0
    3f56:	|         clr.l -(sp)
    3f58:	|         pea 5 <_start+0x5>
    3f5c:	|         move.l a1,-(sp)
    3f5e:	|         move.l a0,-(sp)
    3f60:	|         pea 19530 <PutChar+0x58a>
    3f66:	|         move.l d0,-(sp)
    3f68:	|         jsr 185ec <debug_register_bitmap>
    3f6e:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3f72:	|         move.l 1e736 <CstCopperList>,d0
    3f78:	|     ,-- beq.s 3f8a <CstReserveBackdrop+0x33a>
    3f7a:	|     |   move.l 1e73e <CstDrawBuffer>,d0
    3f80:	|     +-- beq.s 3f8a <CstReserveBackdrop+0x33a>
    3f82:	|     |   move.l 1e73a <CstViewBuffer>,d0
    3f88:	|  ,--|-- bne.s 3f9c <CstReserveBackdrop+0x34c>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3f8a:	|  |  '-> pea 1953f <PutChar+0x599>
    3f90:	|  |      jsr 18504 <KPrintF>
    3f96:	|  |      addq.l #4,sp
    return FALSE;
    3f98:	|  |      clr.w d0
    3f9a:	+--|----- bra.s 3fca <CstReserveBackdrop+0x37a>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3f9c:	|  '----> pea 1956c <PutChar+0x5c6>
    3fa2:	|         jsr 18504 <KPrintF>
    3fa8:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3faa:	|         move.l 1e736 <CstCopperList>,d0
    3fb0:	|         move.l d0,-(sp)
    3fb2:	|         jsr 3b04 <CstSetCl>
    3fb8:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3fba:	|         pea 19593 <PutChar+0x5ed>
    3fc0:	|         jsr 18504 <KPrintF>
    3fc6:	|         addq.l #4,sp
  return TRUE;
    3fc8:	|         moveq #1,d0

}
    3fca:	'-------> movea.l (sp)+,a6
    3fcc:	          lea 68(sp),sp
    3fd0:	          rts

00003fd2 <CstUnfreeze>:

void CstUnfreeze() {
    3fd2:	       lea -52(sp),sp
    3fd6:	       move.l a6,-(sp)
    3fd8:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3fda:	       pea 195b6 <PutChar+0x610>
    3fe0:	       jsr 18504 <KPrintF>
    3fe6:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3fe8:	       move.l 1e762 <winWidth>,d0
    3fee:	       lsr.l #3,d0
    3ff0:	       move.l d0,d1
    3ff2:	       move.l 1e766 <winHeight>,d0
    3ff8:	       move.l d0,d0
    3ffa:	       muls.w d0,d1
    3ffc:	       move.w d1,d0
    3ffe:	       add.w d0,d0
    4000:	       add.w d0,d0
    4002:	       move.w d0,d2
    4004:	       add.w d1,d2
    4006:	       move.w d2,46(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    400a:	       move.l #14675968,42(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    4012:	       move.l 1e766 <winHeight>,d0
    4018:	       move.l d0,d0
    401a:	       movea.w d0,a1
    401c:	       move.l 1e762 <winWidth>,d0
    4022:	       move.l d0,d0
    4024:	       movea.w d0,a0
    4026:	       move.l 1e732 <CstBackDropBackup>,d0
    402c:	       clr.l -(sp)
    402e:	       pea 5 <_start+0x5>
    4032:	       move.l a1,-(sp)
    4034:	       move.l a0,-(sp)
    4036:	       pea 191c5 <PutChar+0x21f>
    403c:	       move.l d0,-(sp)
    403e:	       jsr 185ec <debug_register_bitmap>
    4044:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    4048:	       move.l 1e732 <CstBackDropBackup>,56(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    4050:	       move.l 1e72e <CstBackDrop>,52(sp)
  for(int i=0;i<size/4;i++) 
    4058:	       clr.l 48(sp)
    405c:	   ,-- bra.s 4082 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    405e:	,--|-> move.l 56(sp),d1
    4062:	|  |   move.l d1,d0
    4064:	|  |   addq.l #4,d0
    4066:	|  |   move.l d0,56(sp)
    406a:	|  |   move.l 52(sp),d0
    406e:	|  |   move.l d0,d2
    4070:	|  |   addq.l #4,d2
    4072:	|  |   move.l d2,52(sp)
    4076:	|  |   movea.l d1,a0
    4078:	|  |   move.l (a0),d1
    407a:	|  |   movea.l d0,a0
    407c:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    407e:	|  |   addq.l #1,48(sp)
    4082:	|  '-> move.w 46(sp),d0
    4086:	|      lsr.w #2,d0
    4088:	|      move.w d0,d0
    408a:	|      andi.l #65535,d0
    4090:	|      cmp.l 48(sp),d0
    4094:	'----- bgt.s 405e <CstUnfreeze+0x8c>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    4096:	       move.l 1e746 <CstCleanupQueueDrawBuffer>,38(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    409e:	       moveq #20,d0
    40a0:	       move.l d0,34(sp)
    40a4:	       clr.l 30(sp)
    40a8:	       move.l 1e81c <SysBase>,d0
    40ae:	       movea.l d0,a6
    40b0:	       move.l 34(sp),d0
    40b4:	       move.l 30(sp),d1
    40b8:	       jsr -684(a6)
    40bc:	       move.l d0,26(sp)
    40c0:	       move.l 26(sp),d0
    40c4:	       move.l d0,1e746 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    40ca:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    40d0:	       move.l 38(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    40d6:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    40dc:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    40de:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    40e4:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    40e8:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    40ee:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    40f2:	       move.l 1e762 <winWidth>,d0
    40f8:	       lsr.l #4,d0
    40fa:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    4100:	       move.l d0,d0
    4102:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    4106:	       move.l 1e766 <winHeight>,d0
    410c:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    4112:	       move.l d0,d0
    4114:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    4118:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    411e:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    4122:	       movea.l 1e746 <CstCleanupQueueDrawBuffer>,a0
    4128:	       clr.w 14(a0)
  next = CstCleanupQueueViewBuffer;
    412c:	       move.l 1e742 <CstCleanupQueueViewBuffer>,38(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    4134:	       moveq #20,d2
    4136:	       move.l d2,22(sp)
    413a:	       clr.l 18(sp)
    413e:	       move.l 1e81c <SysBase>,d0
    4144:	       movea.l d0,a6
    4146:	       move.l 22(sp),d0
    414a:	       move.l 18(sp),d1
    414e:	       jsr -684(a6)
    4152:	       move.l d0,14(sp)
    4156:	       move.l 14(sp),d0
    415a:	       move.l d0,1e742 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    4160:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    4166:	       move.l 38(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    416c:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    4172:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    4174:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    417a:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    417e:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    4184:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    4188:	       move.l 1e762 <winWidth>,d0
    418e:	       lsr.l #4,d0
    4190:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    4196:	       move.l d0,d0
    4198:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    419c:	       move.l 1e766 <winHeight>,d0
    41a2:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    41a8:	       move.l d0,d0
    41aa:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    41ae:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    41b4:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0;  
    41b8:	       movea.l 1e742 <CstCleanupQueueViewBuffer>,a0
    41be:	       clr.w 14(a0)
  
  if( CstBackDropBackup) {
    41c2:	       move.l 1e732 <CstBackDropBackup>,d0
    41c8:	   ,-- beq.s 41f0 <CstUnfreeze+0x21e>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    41ca:	   |   pea 195e1 <PutChar+0x63b>
    41d0:	   |   jsr 18504 <KPrintF>
    41d6:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    41d8:	   |   move.l 1e732 <CstBackDropBackup>,10(sp)
    41e0:	   |   move.l 1e81c <SysBase>,d0
    41e6:	   |   movea.l d0,a6
    41e8:	   |   movea.l 10(sp),a1
    41ec:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    41f0:	   '-> pea 19605 <PutChar+0x65f>
    41f6:	       jsr 18504 <KPrintF>
    41fc:	       addq.l #4,sp

}
    41fe:	       nop
    4200:	       move.l (sp)+,d2
    4202:	       movea.l (sp)+,a6
    4204:	       lea 52(sp),sp
    4208:	       rts

0000420a <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    420a:	       lea -28(sp),sp
    420e:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    4212:	       move.l 52(sp),-(sp)
    4216:	       jsr 16b0e <stringWidth>
    421c:	       addq.l #4,sp
    421e:	       asr.l #1,d0
    4220:	       move.l d0,-(sp)
    4222:	       jsr 18936 <__floatsisf>
    4228:	       addq.l #4,sp
    422a:	       move.l d0,d1
    422c:	       move.l 1e1a2 <cameraZoom>,d0
    4232:	       move.l d0,-(sp)
    4234:	       move.l d1,-(sp)
    4236:	       jsr 187ec <__divsf3>
    423c:	       addq.l #8,sp
    423e:	       move.l d0,-(sp)
    4240:	       jsr 188ce <__fixsfsi>
    4246:	       addq.l #4,sp
    4248:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    424c:	       move.l 56(sp),d0
    4250:	       sub.l 44(sp),d0
    4254:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    4258:	       move.l 56(sp),d0
    425c:	       add.l 44(sp),d0
    4260:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    4264:	       moveq #12,d0
    4266:	       move.l d0,32(sp)
    426a:	       clr.l 28(sp)
    426e:	       move.l 1e81c <SysBase>,d0
    4274:	       movea.l d0,a6
    4276:	       move.l 32(sp),d0
    427a:	       move.l 28(sp),d1
    427e:	       jsr -684(a6)
    4282:	       move.l d0,24(sp)
    4286:	       move.l 24(sp),d0
    428a:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    428e:	       movea.l 1e75e <speech>,a0
    4294:	       move.l 4(a0),d0
    4298:	       movea.l 20(sp),a0
    429c:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    42a0:	       move.l 52(sp),-(sp)
    42a4:	       jsr b8 <copyString>
    42aa:	       addq.l #4,sp
    42ac:	       movea.l 20(sp),a0
    42b0:	       move.l d0,(a0)
	newLine -> x = xx1;
    42b2:	       movea.l 20(sp),a0
    42b6:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    42bc:	       movea.l 1e75e <speech>,a0
    42c2:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    42c8:	       moveq #4,d0
    42ca:	       cmp.l 40(sp),d0
    42ce:	   ,-- blt.s 42f0 <addSpeechLine+0xe6>
    42d0:	   |   movea.l 60(sp),a0
    42d4:	   |   move.l (a0),d1
    42d6:	   |   moveq #5,d0
    42d8:	   |   sub.l 40(sp),d0
    42dc:	   |   cmp.l d1,d0
    42de:	   +-- ble.s 42f0 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    42e0:	   |   moveq #5,d0
    42e2:	   |   sub.l 40(sp),d0
    42e6:	   |   movea.l 60(sp),a0
    42ea:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    42ec:	,--|-- bra.w 441c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    42f0:	|  '-> move.l 36(sp),-(sp)
    42f4:	|      jsr 18936 <__floatsisf>
    42fa:	|      addq.l #4,sp
    42fc:	|      move.l d0,d2
    42fe:	|      move.l 1e762 <winWidth>,d0
    4304:	|      move.l d0,-(sp)
    4306:	|      jsr 1895e <__floatunsisf>
    430c:	|      addq.l #4,sp
    430e:	|      move.l d0,d1
    4310:	|      move.l 1e1a2 <cameraZoom>,d0
    4316:	|      move.l d0,-(sp)
    4318:	|      move.l d1,-(sp)
    431a:	|      jsr 187ec <__divsf3>
    4320:	|      addq.l #8,sp
    4322:	|      move.l #1084227584,-(sp)
    4328:	|      move.l d0,-(sp)
    432a:	|      jsr 18c2a <__subsf3>
    4330:	|      addq.l #8,sp
    4332:	|      move.l d0,-(sp)
    4334:	|      move.l d2,-(sp)
    4336:	|      jsr 18a1e <__gesf2>
    433c:	|      addq.l #8,sp
    433e:	|      tst.l d0
    4340:	|  ,-- bge.s 4346 <addSpeechLine+0x13c>
}
    4342:	+--|-- bra.w 441c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4346:	|  '-> movea.l 60(sp),a0
    434a:	|      move.l (a0),d0
    434c:	|      move.l d0,-(sp)
    434e:	|      jsr 18936 <__floatsisf>
    4354:	|      addq.l #4,sp
    4356:	|      move.l d0,-(sp)
    4358:	|      jsr 18858 <__extendsfdf2>
    435e:	|      addq.l #4,sp
    4360:	|      move.l d0,d4
    4362:	|      move.l d1,d5
    4364:	|      move.l 1e762 <winWidth>,d0
    436a:	|      move.l d0,-(sp)
    436c:	|      jsr 1895e <__floatunsisf>
    4372:	|      addq.l #4,sp
    4374:	|      move.l d0,d1
    4376:	|      move.l 1e1a2 <cameraZoom>,d0
    437c:	|      move.l d0,-(sp)
    437e:	|      move.l d1,-(sp)
    4380:	|      jsr 187ec <__divsf3>
    4386:	|      addq.l #8,sp
    4388:	|      move.l d0,-(sp)
    438a:	|      jsr 18858 <__extendsfdf2>
    4390:	|      addq.l #4,sp
    4392:	|      clr.l -(sp)
    4394:	|      move.l #1075052544,-(sp)
    439a:	|      move.l d1,-(sp)
    439c:	|      move.l d0,-(sp)
    439e:	|      jsr 18bc8 <__subdf3>
    43a4:	|      lea 16(sp),sp
    43a8:	|      move.l d0,d2
    43aa:	|      move.l d1,d3
    43ac:	|      move.l 36(sp),-(sp)
    43b0:	|      jsr 188f6 <__floatsidf>
    43b6:	|      addq.l #4,sp
    43b8:	|      move.l d1,-(sp)
    43ba:	|      move.l d0,-(sp)
    43bc:	|      move.l d3,-(sp)
    43be:	|      move.l d2,-(sp)
    43c0:	|      jsr 18bc8 <__subdf3>
    43c6:	|      lea 16(sp),sp
    43ca:	|      move.l d1,-(sp)
    43cc:	|      move.l d0,-(sp)
    43ce:	|      move.l d5,-(sp)
    43d0:	|      move.l d4,-(sp)
    43d2:	|      jsr 18a54 <__gtdf2>
    43d8:	|      lea 16(sp),sp
    43dc:	|      tst.l d0
    43de:	|  ,-- bgt.s 43e2 <addSpeechLine+0x1d8>
}
    43e0:	+--|-- bra.s 441c <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    43e2:	|  '-> move.l 1e762 <winWidth>,d0
    43e8:	|      move.l d0,-(sp)
    43ea:	|      jsr 1895e <__floatunsisf>
    43f0:	|      addq.l #4,sp
    43f2:	|      move.l d0,d1
    43f4:	|      move.l 1e1a2 <cameraZoom>,d0
    43fa:	|      move.l d0,-(sp)
    43fc:	|      move.l d1,-(sp)
    43fe:	|      jsr 187ec <__divsf3>
    4404:	|      addq.l #8,sp
    4406:	|      move.l d0,-(sp)
    4408:	|      jsr 188ce <__fixsfsi>
    440e:	|      addq.l #4,sp
    4410:	|      subq.l #5,d0
    4412:	|      sub.l 36(sp),d0
    4416:	|      movea.l 60(sp),a0
    441a:	|      move.l d0,(a0)
}
    441c:	'----> nop
    441e:	       movem.l (sp)+,d2-d5/a6
    4422:	       lea 28(sp),sp
    4426:	       rts

00004428 <initSpeech>:


void initSpeech () {
    4428:	       lea -12(sp),sp
    442c:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    442e:	       moveq #20,d0
    4430:	       move.l d0,12(sp)
    4434:	       clr.l 8(sp)
    4438:	       move.l 1e81c <SysBase>,d0
    443e:	       movea.l d0,a6
    4440:	       move.l 12(sp),d0
    4444:	       move.l 8(sp),d1
    4448:	       jsr -684(a6)
    444c:	       move.l d0,4(sp)
    4450:	       move.l 4(sp),d0
    4454:	       move.l d0,1e75e <speech>
	if (speech) {
    445a:	       move.l 1e75e <speech>,d0
    4460:	,----- beq.s 448c <initSpeech+0x64>
		speech -> currentTalker = NULL;
    4462:	|      movea.l 1e75e <speech>,a0
    4468:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    446a:	|      movea.l 1e75e <speech>,a0
    4470:	|      clr.l 4(a0)
		speech -> speechY = 0;
    4474:	|      movea.l 1e75e <speech>,a0
    447a:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    447e:	|      movea.l 1e75e <speech>,a0
    4484:	|      moveq #-1,d0
    4486:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    448a:	|  ,-- bra.s 449a <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    448c:	'--|-> pea 19644 <PutChar+0x69e>
    4492:	   |   jsr 18504 <KPrintF>
    4498:	   |   addq.l #4,sp
}
    449a:	   '-> nop
    449c:	       movea.l (sp)+,a6
    449e:	       lea 12(sp),sp
    44a2:	       rts

000044a4 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    44a4:	       movea.l 1e75e <speech>,a0
    44aa:	       move.l 4(a0),d0
    44ae:	,----- beq.s 44bc <isThereAnySpeechGoingOn+0x18>
    44b0:	|      movea.l 1e75e <speech>,a0
    44b6:	|      move.l 16(a0),d0
    44ba:	|  ,-- bra.s 44be <isThereAnySpeechGoingOn+0x1a>
    44bc:	'--|-> moveq #-1,d0
}
    44be:	   '-> rts

000044c0 <killAllSpeech>:

void killAllSpeech () {
    44c0:	       lea -12(sp),sp
    44c4:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    44c6:	       movea.l 1e75e <speech>,a0
    44cc:	       move.l 12(a0),d0
    44d0:	       moveq #-1,d1
    44d2:	       cmp.l d0,d1
    44d4:	   ,-- beq.s 44e2 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    44d6:	   |   movea.l 1e75e <speech>,a0
    44dc:	   |   moveq #-1,d0
    44de:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    44e2:	   '-> movea.l 1e75e <speech>,a0
    44e8:	       move.l (a0),d0
    44ea:	,----- beq.w 4576 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    44ee:	|      movea.l 1e75e <speech>,a0
    44f4:	|      move.l (a0),d1
    44f6:	|      lea -132(sp),sp
    44fa:	|      move.l sp,d0
    44fc:	|      movea.w #132,a0
    4500:	|      move.l a0,-(sp)
    4502:	|      move.l d1,-(sp)
    4504:	|      move.l d0,-(sp)
    4506:	|      jsr 184b8 <memcpy>
    450c:	|      lea 12(sp),sp
    4510:	|      jsr b4de <makeSilent>
    4516:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    451a:	|      movea.l 1e75e <speech>,a0
    4520:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    4522:	+----- bra.s 4576 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    4524:	|  ,-> movea.l 1e75e <speech>,a0
    452a:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    4530:	|  |   movea.l 1e75e <speech>,a0
    4536:	|  |   movea.l 4(a0),a1
    453a:	|  |   movea.l 1e75e <speech>,a0
    4540:	|  |   move.l 4(a1),d0
    4544:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    4548:	|  |   movea.l 12(sp),a0
    454c:	|  |   move.l (a0),8(sp)
    4550:	|  |   move.l 1e81c <SysBase>,d0
    4556:	|  |   movea.l d0,a6
    4558:	|  |   movea.l 8(sp),a1
    455c:	|  |   jsr -690(a6)
		FreeVec(killMe);
    4560:	|  |   move.l 12(sp),4(sp)
    4566:	|  |   move.l 1e81c <SysBase>,d0
    456c:	|  |   movea.l d0,a6
    456e:	|  |   movea.l 4(sp),a1
    4572:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    4576:	'--|-> movea.l 1e75e <speech>,a0
    457c:	   |   move.l 4(a0),d0
    4580:	   '-- bne.s 4524 <killAllSpeech+0x64>
	}
}
    4582:	       nop
    4584:	       nop
    4586:	       movea.l (sp)+,a6
    4588:	       lea 12(sp),sp
    458c:	       rts

0000458e <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    458e:	pea 2 <_start+0x2>
    4592:	move.l 8(sp),-(sp)
    4596:	jsr 46ee <setFrames>
    459c:	addq.l #8,sp
}
    459e:	nop
    45a0:	rts

000045a2 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    45a2:	       lea -52(sp),sp
    45a6:	       move.l a6,-(sp)
    45a8:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    45aa:	       movea.l 64(sp),a0
    45ae:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    45b4:	       move.l 1e17a <speechSpeed>,d0
    45ba:	       move.l 68(sp),-(sp)
    45be:	       move.l d0,-(sp)
    45c0:	       jsr a46 <putFloat>
    45c6:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    45c8:	       movea.l 64(sp),a0
    45cc:	       move.l 8(a0),d0
    45d0:	       move.l 68(sp),-(sp)
    45d4:	       move.l d0,-(sp)
    45d6:	       jsr 8d0 <put2bytes>
    45dc:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    45de:	       movea.l 64(sp),a0
    45e2:	       move.l 16(a0),d0
    45e6:	       move.l 68(sp),-(sp)
    45ea:	       move.l d0,-(sp)
    45ec:	       jsr 8d0 <put2bytes>
    45f2:	       addq.l #8,sp
		if (sS -> currentTalker) {
    45f4:	       movea.l 64(sp),a0
    45f8:	       move.l (a0),d0
    45fa:	   ,-- beq.s 463e <saveSpeech+0x9c>
			FPutC (fp, 1);
    45fc:	   |   move.l 68(sp),40(sp)
    4602:	   |   moveq #1,d0
    4604:	   |   move.l d0,36(sp)
    4608:	   |   move.l 1e824 <DOSBase>,d0
    460e:	   |   movea.l d0,a6
    4610:	   |   move.l 40(sp),d1
    4614:	   |   move.l 36(sp),d2
    4618:	   |   jsr -312(a6)
    461c:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    4620:	   |   movea.l 64(sp),a0
    4624:	   |   movea.l (a0),a0
    4626:	   |   movea.l 114(a0),a0
    462a:	   |   move.l 4(a0),d0
    462e:	   |   move.l 68(sp),-(sp)
    4632:	   |   move.l d0,-(sp)
    4634:	   |   jsr 8d0 <put2bytes>
    463a:	   |   addq.l #8,sp
    463c:	,--|-- bra.s 46ba <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    463e:	|  '-> move.l 68(sp),52(sp)
    4644:	|      clr.l 48(sp)
    4648:	|      move.l 1e824 <DOSBase>,d0
    464e:	|      movea.l d0,a6
    4650:	|      move.l 52(sp),d1
    4654:	|      move.l 48(sp),d2
    4658:	|      jsr -312(a6)
    465c:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    4660:	+----- bra.s 46ba <saveSpeech+0x118>
			FPutC (fp, 1);
    4662:	|  ,-> move.l 68(sp),16(sp)
    4668:	|  |   moveq #1,d0
    466a:	|  |   move.l d0,12(sp)
    466e:	|  |   move.l 1e824 <DOSBase>,d0
    4674:	|  |   movea.l d0,a6
    4676:	|  |   move.l 16(sp),d1
    467a:	|  |   move.l 12(sp),d2
    467e:	|  |   jsr -312(a6)
    4682:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    4686:	|  |   movea.l 56(sp),a0
    468a:	|  |   move.l (a0),d0
    468c:	|  |   move.l 68(sp),-(sp)
    4690:	|  |   move.l d0,-(sp)
    4692:	|  |   jsr bd8 <writeString>
    4698:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    469a:	|  |   movea.l 56(sp),a0
    469e:	|  |   move.l 8(a0),d0
    46a2:	|  |   move.l 68(sp),-(sp)
    46a6:	|  |   move.l d0,-(sp)
    46a8:	|  |   jsr 8d0 <put2bytes>
    46ae:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    46b0:	|  |   movea.l 56(sp),a0
    46b4:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    46ba:	'--|-> tst.l 56(sp)
    46be:	   '-- bne.s 4662 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    46c0:	       move.l 68(sp),28(sp)
    46c6:	       clr.l 24(sp)
    46ca:	       move.l 1e824 <DOSBase>,d0
    46d0:	       movea.l d0,a6
    46d2:	       move.l 28(sp),d1
    46d6:	       move.l 24(sp),d2
    46da:	       jsr -312(a6)
    46de:	       move.l d0,20(sp)
}
    46e2:	       nop
    46e4:	       move.l (sp)+,d2
    46e6:	       movea.l (sp)+,a6
    46e8:	       lea 52(sp),sp
    46ec:	       rts

000046ee <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    46ee:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    46f0:	movea.l 8(sp),a0
    46f4:	movea.l 80(a0),a0
    46f8:	move.l (a0),d2
    46fa:	movea.l 8(sp),a0
    46fe:	movea.l 80(a0),a0
    4702:	move.l 4(a0),d0
    4706:	move.l 12(sp),-(sp)
    470a:	move.l d0,-(sp)
    470c:	jsr 18e90 <__mulsi3>
    4712:	addq.l #8,sp
    4714:	move.l d0,d1
    4716:	movea.l 8(sp),a0
    471a:	move.l 106(a0),d0
    471e:	add.l d1,d0
    4720:	add.l d0,d0
    4722:	add.l d0,d0
    4724:	movea.l d2,a0
    4726:	adda.l d0,a0
    4728:	move.l (a0),d0
    472a:	movea.l 8(sp),a0
    472e:	move.l d0,72(a0)
}
    4732:	nop
    4734:	move.l (sp)+,d2
    4736:	rts

00004738 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4738:	       lea -20(sp),sp
    473c:	       move.l d2,-(sp)
    473e:	       move.l 40(sp),d0
    4742:	       move.w d0,d0
    4744:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    4748:	       movea.l 1e75e <speech>,a0
    474e:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    4754:	       move.l 32(sp),-(sp)
    4758:	       jsr af9e <findPerson>
    475e:	       addq.l #4,sp
    4760:	       move.l d0,16(sp)
    if (thisPerson) {
    4764:	   ,-- beq.s 478a <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    4766:	   |   movea.w 6(sp),a0
    476a:	   |   move.l a0,-(sp)
    476c:	   |   move.l 40(sp),-(sp)
    4770:	   |   move.l 24(sp),-(sp)
    4774:	   |   move.l 40(sp),-(sp)
    4778:	   |   jsr 4850 <wrapSpeechPerson>
    477e:	   |   lea 16(sp),sp
    4782:	   |   move.l d0,20(sp)
    4786:	,--|-- bra.w 4844 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    478a:	|  '-> move.l 32(sp),-(sp)
    478e:	|      jsr 16ce6 <getRegionForObject>
    4794:	|      addq.l #4,sp
    4796:	|      move.l d0,12(sp)
        if (thisRegion) {
    479a:	|  ,-- beq.s 4806 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    479c:	|  |   movea.l 12(sp),a0
    47a0:	|  |   movea.l 28(a0),a0
    47a4:	|  |   move.l 28(a0),d0
    47a8:	|  |   movea.l 12(sp),a0
    47ac:	|  |   movea.l 4(a0),a1
    47b0:	|  |   movea.l 12(sp),a0
    47b4:	|  |   movea.l 28(a0),a0
    47b8:	|  |   move.l 20(a0),d1
    47bc:	|  |   movea.l a1,a0
    47be:	|  |   suba.l d1,a0
    47c0:	|  |   move.l 1e8da <cameraY>,d1
    47c6:	|  |   movea.l a0,a1
    47c8:	|  |   suba.l d1,a1
    47ca:	|  |   movea.l 12(sp),a0
    47ce:	|  |   move.l (a0),d2
    47d0:	|  |   movea.l 12(sp),a0
    47d4:	|  |   move.l 8(a0),d1
    47d8:	|  |   add.l d2,d1
    47da:	|  |   move.l d1,d2
    47dc:	|  |   asr.l #1,d2
    47de:	|  |   move.l 1e8d6 <cameraX>,d1
    47e4:	|  |   movea.l d2,a0
    47e6:	|  |   suba.l d1,a0
    47e8:	|  |   move.l 36(sp),-(sp)
    47ec:	|  |   move.l d0,-(sp)
    47ee:	|  |   move.l a1,-(sp)
    47f0:	|  |   move.l a0,-(sp)
    47f2:	|  |   move.l 44(sp),-(sp)
    47f6:	|  |   jsr 496e <wrapSpeechXY>
    47fc:	|  |   lea 20(sp),sp
    4800:	|  |   move.l d0,20(sp)
    4804:	+--|-- bra.s 4844 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    4806:	|  '-> move.l 32(sp),-(sp)
    480a:	|      jsr df0c <findObjectType>
    4810:	|      addq.l #4,sp
    4812:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    4816:	|      movea.l 8(sp),a0
    481a:	|      move.l 28(a0),d1
    481e:	|      move.l 1e762 <winWidth>,d0
    4824:	|      lsr.l #1,d0
    4826:	|      move.l 36(sp),-(sp)
    482a:	|      move.l d1,-(sp)
    482c:	|      pea a <_start+0xa>
    4830:	|      move.l d0,-(sp)
    4832:	|      move.l 44(sp),-(sp)
    4836:	|      jsr 496e <wrapSpeechXY>
    483c:	|      lea 20(sp),sp
    4840:	|      move.l d0,20(sp)
        }
    }
    return i;
    4844:	'----> move.l 20(sp),d0
}
    4848:	       move.l (sp)+,d2
    484a:	       lea 20(sp),sp
    484e:	       rts

00004850 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    4850:	    subq.l #8,sp
    4852:	    movem.l d2-d4,-(sp)
    4856:	    move.l 36(sp),d0
    485a:	    move.w d0,d0
    485c:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    4860:	    movea.l 28(sp),a0
    4864:	    movea.l 114(a0),a0
    4868:	    move.l 28(a0),d2
    486c:	    movea.l 28(sp),a0
    4870:	    move.l 4(a0),d3
    4874:	    move.l 1e8da <cameraY>,d0
    487a:	    move.l d0,-(sp)
    487c:	    jsr 18936 <__floatsisf>
    4882:	    addq.l #4,sp
    4884:	    move.l d0,-(sp)
    4886:	    move.l d3,-(sp)
    4888:	    jsr 18c2a <__subsf3>
    488e:	    addq.l #8,sp
    4890:	    move.l d0,d3
    4892:	    movea.l 28(sp),a0
    4896:	    move.l 32(a0),d4
    489a:	    movea.l 28(sp),a0
    489e:	    move.l 20(a0),d1
    48a2:	    movea.l 28(sp),a0
    48a6:	    move.l 24(a0),d0
    48aa:	    sub.l d0,d1
    48ac:	    move.l d1,-(sp)
    48ae:	    jsr 18936 <__floatsisf>
    48b4:	    addq.l #4,sp
    48b6:	    move.l d0,-(sp)
    48b8:	    move.l d4,-(sp)
    48ba:	    jsr 189e8 <__mulsf3>
    48c0:	    addq.l #8,sp
    48c2:	    move.l d0,-(sp)
    48c4:	    move.l d3,-(sp)
    48c6:	    jsr 18c2a <__subsf3>
    48cc:	    addq.l #8,sp
    48ce:	    move.l d0,d3
    48d0:	    movea.l 28(sp),a0
    48d4:	    movea.l 114(a0),a0
    48d8:	    move.l 20(a0),d0
    48dc:	    move.l d0,-(sp)
    48de:	    jsr 18936 <__floatsisf>
    48e4:	    addq.l #4,sp
    48e6:	    move.l d0,-(sp)
    48e8:	    move.l d3,-(sp)
    48ea:	    jsr 18c2a <__subsf3>
    48f0:	    addq.l #8,sp
    48f2:	    move.l d0,-(sp)
    48f4:	    jsr 188ce <__fixsfsi>
    48fa:	    addq.l #4,sp
    48fc:	    move.l d0,d4
    48fe:	    movea.l 28(sp),a0
    4902:	    move.l (a0),d3
    4904:	    move.l 1e8d6 <cameraX>,d0
    490a:	    move.l d0,-(sp)
    490c:	    jsr 18936 <__floatsisf>
    4912:	    addq.l #4,sp
    4914:	    move.l d0,-(sp)
    4916:	    move.l d3,-(sp)
    4918:	    jsr 18c2a <__subsf3>
    491e:	    addq.l #8,sp
    4920:	    move.l d0,-(sp)
    4922:	    jsr 188ce <__fixsfsi>
    4928:	    addq.l #4,sp
    492a:	    move.l 32(sp),-(sp)
    492e:	    move.l d2,-(sp)
    4930:	    move.l d4,-(sp)
    4932:	    move.l d0,-(sp)
    4934:	    move.l 40(sp),-(sp)
    4938:	    jsr 496e <wrapSpeechXY>
    493e:	    lea 20(sp),sp
    4942:	    move.l d0,16(sp)
	if (animPerson) {
    4946:	    tst.w 14(sp)
    494a:	,-- beq.s 4962 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    494c:	|   move.l 28(sp),-(sp)
    4950:	|   jsr 458e <makeTalker>
    4956:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    4958:	|   movea.l 1e75e <speech>,a0
    495e:	|   move.l 28(sp),(a0)
	}
	return i;
    4962:	'-> move.l 16(sp),d0
}
    4966:	    movem.l (sp)+,d2-d4
    496a:	    addq.l #8,sp
    496c:	    rts

0000496e <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    496e:	                   lea -16(sp),sp
    4972:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    4976:	                   clr.l 16(sp)
    killAllSpeech();
    497a:	                   jsr 44c0 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    4980:	                   move.l 36(sp),-(sp)
    4984:	                   jsr 14f10 <strlen>
    498a:	                   addq.l #4,sp
    498c:	                   movea.l d0,a0
    498e:	                   lea 20(a0),a0
    4992:	                   move.l a0,-(sp)
    4994:	                   jsr 1895e <__floatunsisf>
    499a:	                   addq.l #4,sp
    499c:	                   move.l d0,d1
    499e:	                   move.l 1e17a <speechSpeed>,d0
    49a4:	                   move.l d0,-(sp)
    49a6:	                   move.l d1,-(sp)
    49a8:	                   jsr 189e8 <__mulsf3>
    49ae:	                   addq.l #8,sp
    49b0:	                   move.l d0,-(sp)
    49b2:	                   jsr 188ce <__fixsfsi>
    49b8:	                   addq.l #4,sp
    49ba:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    49be:	               ,-- bgt.s 49c6 <wrapSpeechXY+0x58>
    49c0:	               |   moveq #1,d0
    49c2:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    49c6:	               '-> moveq #-1,d1
    49c8:	                   cmp.l 52(sp),d1
    49cc:	               ,-- beq.s 4a0c <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    49ce:	               |   move.l 1e8ea <speechMode>,d0
    49d4:	               +-- ble.s 4a0c <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    49d6:	               |   clr.l -(sp)
    49d8:	               |   move.l 56(sp),-(sp)
    49dc:	               |   jsr dbcc <startSound>
    49e2:	               |   addq.l #8,sp
    49e4:	               |   tst.w d0
    49e6:	               +-- beq.s 4a0c <wrapSpeechXY+0x9e>
                speechTime = -10;
    49e8:	               |   moveq #-10,d0
    49ea:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    49ee:	               |   movea.l 1e75e <speech>,a0
    49f4:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    49fa:	               |   move.l 1e8ea <speechMode>,d0
    4a00:	               |   moveq #2,d1
    4a02:	               |   cmp.l d0,d1
    4a04:	               +-- bne.s 4a0c <wrapSpeechXY+0x9e>
    4a06:	               |   moveq #-10,d0
    4a08:	,--------------|-- bra.w 4c92 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    4a0c:	|              '-> movea.l 1e75e <speech>,a0
    4a12:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    4a18:	|     ,----------- bra.w 4acc <wrapSpeechXY+0x15e>
        a = wrap;
    4a1c:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    4a22:	|  |  |        ,-- bra.s 4a32 <wrapSpeechXY+0xc4>
            a--;
    4a24:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    4a28:	|  |  |  |     +-- bne.s 4a32 <wrapSpeechXY+0xc4>
                a = wrap;
    4a2a:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    4a30:	|  |  |  |  ,--|-- bra.s 4a44 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    4a32:	|  |  |  |  |  '-> move.l 28(sp),d0
    4a36:	|  |  |  |  |      movea.l 36(sp),a0
    4a3a:	|  |  |  |  |      adda.l d0,a0
    4a3c:	|  |  |  |  |      move.b (a0),d0
    4a3e:	|  |  |  |  |      cmpi.b #32,d0
    4a42:	|  |  |  '--|----- bne.s 4a24 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    4a44:	|  |  |     '----> move.l 28(sp),d0
    4a48:	|  |  |            movea.l 36(sp),a0
    4a4c:	|  |  |            adda.l d0,a0
    4a4e:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    4a50:	|  |  |            lea 16(sp),a0
    4a54:	|  |  |            move.l a0,-(sp)
    4a56:	|  |  |            move.l 44(sp),-(sp)
    4a5a:	|  |  |            move.l 44(sp),-(sp)
    4a5e:	|  |  |            jsr 420a <addSpeechLine>
    4a64:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    4a68:	|  |  |            move.l 28(sp),d0
    4a6c:	|  |  |            movea.l 36(sp),a0
    4a70:	|  |  |            adda.l d0,a0
    4a72:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    4a76:	|  |  |            move.l 28(sp),d0
    4a7a:	|  |  |            addq.l #1,d0
    4a7c:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    4a80:	|  |  |            move.l 44(sp),-(sp)
    4a84:	|  |  |            jsr 18936 <__floatsisf>
    4a8a:	|  |  |            addq.l #4,sp
    4a8c:	|  |  |            move.l d0,d2
    4a8e:	|  |  |            move.l 1e914 <fontHeight>,d0
    4a94:	|  |  |            move.l d0,-(sp)
    4a96:	|  |  |            jsr 18936 <__floatsisf>
    4a9c:	|  |  |            addq.l #4,sp
    4a9e:	|  |  |            move.l d0,d1
    4aa0:	|  |  |            move.l 1e1a2 <cameraZoom>,d0
    4aa6:	|  |  |            move.l d0,-(sp)
    4aa8:	|  |  |            move.l d1,-(sp)
    4aaa:	|  |  |            jsr 187ec <__divsf3>
    4ab0:	|  |  |            addq.l #8,sp
    4ab2:	|  |  |            move.l d0,-(sp)
    4ab4:	|  |  |            move.l d2,-(sp)
    4ab6:	|  |  |            jsr 18c2a <__subsf3>
    4abc:	|  |  |            addq.l #8,sp
    4abe:	|  |  |            move.l d0,-(sp)
    4ac0:	|  |  |            jsr 188ce <__fixsfsi>
    4ac6:	|  |  |            addq.l #4,sp
    4ac8:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    4acc:	|  |  '----------> move.l 36(sp),-(sp)
    4ad0:	|  |               jsr 14f10 <strlen>
    4ad6:	|  |               addq.l #4,sp
    4ad8:	|  |               move.l d0,d1
    4ada:	|  |               move.l 48(sp),d0
    4ade:	|  |               cmp.l d1,d0
    4ae0:	|  '-------------- bcs.w 4a1c <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    4ae4:	|                  lea 16(sp),a0
    4ae8:	|                  move.l a0,-(sp)
    4aea:	|                  move.l 44(sp),-(sp)
    4aee:	|                  move.l 44(sp),-(sp)
    4af2:	|                  jsr 420a <addSpeechLine>
    4af8:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    4afc:	|                  move.l 44(sp),-(sp)
    4b00:	|                  jsr 18936 <__floatsisf>
    4b06:	|                  addq.l #4,sp
    4b08:	|                  move.l d0,d2
    4b0a:	|                  move.l 1e914 <fontHeight>,d0
    4b10:	|                  move.l d0,-(sp)
    4b12:	|                  jsr 18936 <__floatsisf>
    4b18:	|                  addq.l #4,sp
    4b1a:	|                  move.l d0,d1
    4b1c:	|                  move.l 1e1a2 <cameraZoom>,d0
    4b22:	|                  move.l d0,-(sp)
    4b24:	|                  move.l d1,-(sp)
    4b26:	|                  jsr 187ec <__divsf3>
    4b2c:	|                  addq.l #8,sp
    4b2e:	|                  move.l d0,-(sp)
    4b30:	|                  move.l d2,-(sp)
    4b32:	|                  jsr 18c2a <__subsf3>
    4b38:	|                  addq.l #8,sp
    4b3a:	|                  move.l d0,-(sp)
    4b3c:	|                  jsr 188ce <__fixsfsi>
    4b42:	|                  addq.l #4,sp
    4b44:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    4b48:	|              ,-- bpl.s 4b66 <wrapSpeechXY+0x1f8>
    4b4a:	|              |   movea.l 1e75e <speech>,a0
    4b50:	|              |   move.l 8(a0),d0
    4b54:	|              |   movea.l 1e75e <speech>,a0
    4b5a:	|              |   sub.l 44(sp),d0
    4b5e:	|              |   move.l d0,8(a0)
    4b62:	|           ,--|-- bra.w 4c54 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    4b66:	|           |  '-> movea.l 1e75e <speech>,a0
    4b6c:	|           |      move.l 8(a0),d0
    4b70:	|           |      move.l d0,-(sp)
    4b72:	|           |      jsr 18936 <__floatsisf>
    4b78:	|           |      addq.l #4,sp
    4b7a:	|           |      move.l d0,d2
    4b7c:	|           |      move.l 1e8da <cameraY>,d0
    4b82:	|           |      move.l d0,-(sp)
    4b84:	|           |      jsr 18936 <__floatsisf>
    4b8a:	|           |      addq.l #4,sp
    4b8c:	|           |      move.l d0,d3
    4b8e:	|           |      move.l 1e766 <winHeight>,d4
    4b94:	|           |      move.l 1e914 <fontHeight>,d0
    4b9a:	|           |      pea 3 <_start+0x3>
    4b9e:	|           |      move.l d0,-(sp)
    4ba0:	|           |      jsr 18f0e <__divsi3>
    4ba6:	|           |      addq.l #8,sp
    4ba8:	|           |      move.l d4,d1
    4baa:	|           |      sub.l d0,d1
    4bac:	|           |      move.l d1,-(sp)
    4bae:	|           |      jsr 1895e <__floatunsisf>
    4bb4:	|           |      addq.l #4,sp
    4bb6:	|           |      move.l d0,d1
    4bb8:	|           |      move.l 1e1a2 <cameraZoom>,d0
    4bbe:	|           |      move.l d0,-(sp)
    4bc0:	|           |      move.l d1,-(sp)
    4bc2:	|           |      jsr 187ec <__divsf3>
    4bc8:	|           |      addq.l #8,sp
    4bca:	|           |      move.l d0,-(sp)
    4bcc:	|           |      move.l d3,-(sp)
    4bce:	|           |      jsr 186f2 <__addsf3>
    4bd4:	|           |      addq.l #8,sp
    4bd6:	|           |      move.l d0,-(sp)
    4bd8:	|           |      move.l d2,-(sp)
    4bda:	|           |      jsr 18aa2 <__gtsf2>
    4be0:	|           |      addq.l #8,sp
    4be2:	|           |      tst.l d0
    4be4:	|           +----- ble.s 4c54 <wrapSpeechXY+0x2e6>
    4be6:	|           |      move.l 1e8da <cameraY>,d0
    4bec:	|           |      move.l d0,-(sp)
    4bee:	|           |      jsr 18936 <__floatsisf>
    4bf4:	|           |      addq.l #4,sp
    4bf6:	|           |      move.l d0,d2
    4bf8:	|           |      move.l 1e766 <winHeight>,d3
    4bfe:	|           |      move.l 1e914 <fontHeight>,d0
    4c04:	|           |      pea 3 <_start+0x3>
    4c08:	|           |      move.l d0,-(sp)
    4c0a:	|           |      jsr 18f0e <__divsi3>
    4c10:	|           |      addq.l #8,sp
    4c12:	|           |      move.l d3,d1
    4c14:	|           |      sub.l d0,d1
    4c16:	|           |      move.l d1,-(sp)
    4c18:	|           |      jsr 1895e <__floatunsisf>
    4c1e:	|           |      addq.l #4,sp
    4c20:	|           |      move.l d0,d1
    4c22:	|           |      move.l 1e1a2 <cameraZoom>,d0
    4c28:	|           |      move.l d0,-(sp)
    4c2a:	|           |      move.l d1,-(sp)
    4c2c:	|           |      jsr 187ec <__divsf3>
    4c32:	|           |      addq.l #8,sp
    4c34:	|           |      move.l d0,-(sp)
    4c36:	|           |      move.l d2,-(sp)
    4c38:	|           |      jsr 186f2 <__addsf3>
    4c3e:	|           |      addq.l #8,sp
    4c40:	|           |      movea.l 1e75e <speech>,a2
    4c46:	|           |      move.l d0,-(sp)
    4c48:	|           |      jsr 188ce <__fixsfsi>
    4c4e:	|           |      addq.l #4,sp
    4c50:	|           |      move.l d0,8(a2)

    if (offset) {
    4c54:	|           '----> move.l 16(sp),d0
    4c58:	|        ,-------- beq.s 4c8e <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    4c5a:	|        |         movea.l 1e75e <speech>,a0
    4c60:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    4c66:	|        |     ,-- bra.s 4c88 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    4c68:	|        |  ,--|-> movea.l 20(sp),a0
    4c6c:	|        |  |  |   move.l 8(a0),d1
    4c70:	|        |  |  |   move.l 16(sp),d0
    4c74:	|        |  |  |   add.l d1,d0
    4c76:	|        |  |  |   movea.l 20(sp),a0
    4c7a:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    4c7e:	|        |  |  |   movea.l 20(sp),a0
    4c82:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    4c88:	|        |  |  '-> tst.l 20(sp)
    4c8c:	|        |  '----- bne.s 4c68 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    4c8e:	|        '-------> move.l 24(sp),d0
}
    4c92:	'----------------> movem.l (sp)+,d2-d4/a2
    4c96:	                   lea 16(sp),sp
    4c9a:	                   rts

00004c9c <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    4c9c:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    4ca0:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    4ca4:	       tst.l 24(sp)
    4ca8:	   ,-- bge.s 4cae <drawLine+0x12>
    4caa:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    4cae:	   '-> tst.l 28(sp)
    4cb2:	   ,-- bge.s 4cb8 <drawLine+0x1c>
    4cb4:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    4cb8:	   '-> tst.l 32(sp)
    4cbc:	   ,-- bge.s 4cc2 <drawLine+0x26>
    4cbe:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    4cc2:	   '-> tst.l 36(sp)
    4cc6:	   ,-- bge.s 4ccc <drawLine+0x30>
    4cc8:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    4ccc:	   '-> move.l 1e8b8 <sceneWidth>,d0
    4cd2:	       cmp.l 24(sp),d0
    4cd6:	   ,-- bge.s 4ce6 <drawLine+0x4a>
    4cd8:	   |   move.l 1e8b8 <sceneWidth>,d0
    4cde:	   |   move.l d0,d1
    4ce0:	   |   subq.l #1,d1
    4ce2:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    4ce6:	   '-> move.l 1e8b8 <sceneWidth>,d0
    4cec:	       cmp.l 32(sp),d0
    4cf0:	   ,-- bge.s 4d00 <drawLine+0x64>
    4cf2:	   |   move.l 1e8b8 <sceneWidth>,d0
    4cf8:	   |   move.l d0,d1
    4cfa:	   |   subq.l #1,d1
    4cfc:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    4d00:	   '-> move.l 1e8bc <sceneHeight>,d0
    4d06:	       cmp.l 28(sp),d0
    4d0a:	   ,-- bge.s 4d1a <drawLine+0x7e>
    4d0c:	   |   move.l 1e8bc <sceneHeight>,d0
    4d12:	   |   move.l d0,d1
    4d14:	   |   subq.l #1,d1
    4d16:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    4d1a:	   '-> move.l 1e8bc <sceneHeight>,d0
    4d20:	       cmp.l 36(sp),d0
    4d24:	   ,-- bge.s 4d34 <drawLine+0x98>
    4d26:	   |   move.l 1e8bc <sceneHeight>,d0
    4d2c:	   |   move.l d0,d1
    4d2e:	   |   subq.l #1,d1
    4d30:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    4d34:	   '-> move.l 24(sp),d0
    4d38:	       cmp.l 32(sp),d0
    4d3c:	,----- ble.s 4d58 <drawLine+0xbc>
		x = x2; 
    4d3e:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    4d44:	|      tst.w 10(sp)
    4d48:	|      seq d0
    4d4a:	|      neg.b d0
    4d4c:	|      move.b d0,d0
    4d4e:	|      andi.w #255,d0
    4d52:	|      move.w d0,10(sp)
    4d56:	|  ,-- bra.s 4d5e <drawLine+0xc2>
	} else x = x1;
    4d58:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    4d5e:	   '-> move.l 28(sp),d1
    4d62:	       cmp.l 36(sp),d1
    4d66:	,----- ble.s 4d82 <drawLine+0xe6>
		y = y2; 
    4d68:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    4d6e:	|      tst.w 10(sp)
    4d72:	|      seq d0
    4d74:	|      neg.b d0
    4d76:	|      move.b d0,d0
    4d78:	|      andi.w #255,d0
    4d7c:	|      move.w d0,10(sp)
    4d80:	|  ,-- bra.s 4d88 <drawLine+0xec>
	} else y = y1;	
    4d82:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4d88:	   '-> move.l 32(sp),d0
    4d8c:	       sub.l 24(sp),d0
    4d90:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    4d94:	       move.l 6(sp),d0
    4d98:	   ,-- bpl.s 4d9c <drawLine+0x100>
    4d9a:	   |   neg.l d0
    4d9c:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4da0:	       move.l 36(sp),d1
    4da4:	       sub.l 28(sp),d1
    4da8:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    4dac:	       move.l 2(sp),d0
    4db0:	   ,-- bpl.s 4db4 <drawLine+0x118>
    4db2:	   |   neg.l d0
    4db4:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    4db8:	       tst.l 6(sp)
    4dbc:	   ,-- bne.s 4de0 <drawLine+0x144>
		diffX = 1;
    4dbe:	   |   moveq #1,d0
    4dc0:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    4dc4:	   |   move.l 1e8b8 <sceneWidth>,d0
    4dca:	   |   subq.l #1,d0
    4dcc:	   |   cmp.l 16(sp),d0
    4dd0:	   +-- bne.s 4de0 <drawLine+0x144>
    4dd2:	   |   move.l 1e8b8 <sceneWidth>,d0
    4dd8:	   |   move.l d0,d1
    4dda:	   |   subq.l #2,d1
    4ddc:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4de0:	   '-> tst.l 2(sp)
    4de4:	   ,-- bne.s 4e08 <drawLine+0x16c>
		diffY = 1;
    4de6:	   |   moveq #1,d0
    4de8:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    4dec:	   |   move.l 1e8bc <sceneHeight>,d0
    4df2:	   |   subq.l #1,d0
    4df4:	   |   cmp.l 12(sp),d0
    4df8:	   +-- bne.s 4e08 <drawLine+0x16c>
    4dfa:	   |   move.l 1e8bc <sceneHeight>,d0
    4e00:	   |   move.l d0,d1
    4e02:	   |   subq.l #2,d1
    4e04:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4e08:	   '-> pea 19681 <PutChar+0x6db>
    4e0e:	       jsr 18504 <KPrintF>
    4e14:	       addq.l #4,sp
	
}
    4e16:	       nop
    4e18:	       lea 20(sp),sp
    4e1c:	       rts

00004e1e <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4e1e:	                      lea -24(sp),sp
    4e22:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4e24:	                      move.l 1e76a <firstTexture>,d0
    4e2a:	,-------------------- beq.w 4f08 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4e2e:	|                     clr.l 24(sp)
    4e32:	|     ,-------------- bra.w 4efc <deleteTextures+0xde>
			BOOL found = FALSE;
    4e36:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4e3a:	|  |  |               move.l 1e76a <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4e42:	|  |  |               movea.l 20(sp),a0
    4e46:	|  |  |               move.l (a0),d1
    4e48:	|  |  |               move.l 24(sp),d0
    4e4c:	|  |  |               add.l d0,d0
    4e4e:	|  |  |               add.l d0,d0
    4e50:	|  |  |               movea.l 36(sp),a0
    4e54:	|  |  |               adda.l d0,a0
    4e56:	|  |  |               move.l (a0),d0
    4e58:	|  |  |               cmp.l d1,d0
    4e5a:	|  |  |  ,----------- bne.w 4eee <deleteTextures+0xd0>
				found = TRUE;
    4e5e:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4e64:	|  |  |  |            movea.l 20(sp),a0
    4e68:	|  |  |  |            move.l 12(a0),d0
    4e6c:	|  |  |  |            move.l d0,1e76a <firstTexture>
				FreeVec(list);
    4e72:	|  |  |  |            move.l 20(sp),6(sp)
    4e78:	|  |  |  |            move.l 1e81c <SysBase>,d0
    4e7e:	|  |  |  |            movea.l d0,a6
    4e80:	|  |  |  |            movea.l 6(sp),a1
    4e84:	|  |  |  |            jsr -690(a6)
				continue;
    4e88:	|  |  |  |  ,-------- bra.s 4ef8 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4e8a:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    4e8e:	|  |  |  |  |  |      movea.l 12(a0),a0
    4e92:	|  |  |  |  |  |      move.l (a0),d1
    4e94:	|  |  |  |  |  |      move.l 24(sp),d0
    4e98:	|  |  |  |  |  |      add.l d0,d0
    4e9a:	|  |  |  |  |  |      add.l d0,d0
    4e9c:	|  |  |  |  |  |      movea.l 36(sp),a0
    4ea0:	|  |  |  |  |  |      adda.l d0,a0
    4ea2:	|  |  |  |  |  |      move.l (a0),d0
    4ea4:	|  |  |  |  |  |      cmp.l d1,d0
    4ea6:	|  |  |  |  |  |  ,-- bne.s 4ee4 <deleteTextures+0xc6>
					found = TRUE;
    4ea8:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    4eae:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4eb2:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4eb8:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4ebc:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4ec0:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4ec4:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4ec8:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    4ecc:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4ed2:	|  |  |  |  |  |  |   move.l 1e81c <SysBase>,d0
    4ed8:	|  |  |  |  |  |  |   movea.l d0,a6
    4eda:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    4ede:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4ee2:	|  |  |  |  +--|--|-- bra.s 4ef8 <deleteTextures+0xda>
				}
				list = list->next;
    4ee4:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    4ee8:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    4eee:	|  |  |  '--|--|----> movea.l 20(sp),a0
    4ef2:	|  |  |     |  |      move.l 12(a0),d0
    4ef6:	|  |  |     |  '----- bne.s 4e8a <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4ef8:	|  |  |     '-------> addq.l #1,24(sp)
    4efc:	|  |  '-------------> move.l 24(sp),d0
    4f00:	|  |                  cmp.l 32(sp),d0
    4f04:	|  '----------------- bcs.w 4e36 <deleteTextures+0x18>
			}
		}
	}
}
    4f08:	'-------------------> nop
    4f0a:	                      movea.l (sp)+,a6
    4f0c:	                      lea 24(sp),sp
    4f10:	                      rts

00004f12 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4f12:	subq.l #4,sp
    4f14:	move.l 8(sp),d0
    4f18:	move.w d0,d0
    4f1a:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4f1e:	pea 196a4 <PutChar+0x6fe>
    4f24:	jsr 18504 <KPrintF>
    4f2a:	addq.l #4,sp
}
    4f2c:	nop
    4f2e:	addq.l #4,sp
    4f30:	rts

00004f32 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4f32:	       moveq #-1,d0
    4f34:	       cmp.l 4(sp),d0
    4f38:	   ,-- bne.s 4f3e <resourceNameFromNum+0xc>
    4f3a:	   |   moveq #0,d0
    4f3c:	,--|-- bra.s 4f76 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4f3e:	|  '-> move.l 1e7f6 <numResourceNames>,d0
    4f44:	|  ,-- bne.s 4f4e <resourceNameFromNum+0x1c>
    4f46:	|  |   move.l #104148,d0
    4f4c:	+--|-- bra.s 4f76 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4f4e:	|  '-> move.l 1e7f6 <numResourceNames>,d0
    4f54:	|      cmp.l 4(sp),d0
    4f58:	|  ,-- ble.s 4f70 <resourceNameFromNum+0x3e>
    4f5a:	|  |   move.l 1e7ae <allResourceNames>,d1
    4f60:	|  |   move.l 4(sp),d0
    4f64:	|  |   add.l d0,d0
    4f66:	|  |   add.l d0,d0
    4f68:	|  |   movea.l d1,a0
    4f6a:	|  |   adda.l d0,a0
    4f6c:	|  |   move.l (a0),d0
    4f6e:	+--|-- bra.s 4f76 <resourceNameFromNum+0x44>
	return "Unknown resource";
    4f70:	|  '-> move.l #104157,d0
    4f76:	'----> rts

00004f78 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4f78:	             lea -40(sp),sp
    4f7c:	             movem.l d2-d3/a6,-(sp)

	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4f80:	             move.l #320,1e762 <winWidth>
    winHeight = 256;
    4f8a:	             move.l #256,1e766 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4f94:	             tst.l 56(sp)
    4f98:	         ,-- bne.s 4fb0 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4f9a:	         |   pea 196ee <PutChar+0x748>
    4fa0:	         |   jsr b8 <copyString>
    4fa6:	         |   addq.l #4,sp
    4fa8:	         |   move.l d0,1e77a <bundleFolder>
    4fae:	      ,--|-- bra.s 4fc6 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4fb0:	      |  '-> movea.l 60(sp),a0
    4fb4:	      |      move.l (a0),d0
    4fb6:	      |      move.l d0,-(sp)
    4fb8:	      |      jsr b8 <copyString>
    4fbe:	      |      addq.l #4,sp
    4fc0:	      |      move.l d0,1e77a <bundleFolder>
	}
    
	int lastSlash = -1;
    4fc6:	      '----> moveq #-1,d0
    4fc8:	             move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4fcc:	             clr.l 40(sp)
    4fd0:	      ,----- bra.s 4ff2 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4fd2:	   ,--|----> move.l 1e77a <bundleFolder>,d1
    4fd8:	   |  |      move.l 40(sp),d0
    4fdc:	   |  |      movea.l d1,a0
    4fde:	   |  |      adda.l d0,a0
    4fe0:	   |  |      move.b (a0),d0
    4fe2:	   |  |      cmpi.b #47,d0
    4fe6:	   |  |  ,-- bne.s 4fee <main_sludge+0x76>
    4fe8:	   |  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4fee:	   |  |  '-> addq.l #1,40(sp)
    4ff2:	   |  '----> move.l 1e77a <bundleFolder>,d1
    4ff8:	   |         move.l 40(sp),d0
    4ffc:	   |         movea.l d1,a0
    4ffe:	   |         adda.l d0,a0
    5000:	   |         move.b (a0),d0
    5002:	   '-------- bne.s 4fd2 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    5004:	             move.l 1e77a <bundleFolder>,d0
    500a:	             move.l 44(sp),d1
    500e:	             addq.l #1,d1
    5010:	             movea.l d0,a0
    5012:	             adda.l d1,a0
    5014:	             clr.b (a0)

	if (argc > 1) {
    5016:	             moveq #1,d0
    5018:	             cmp.l 56(sp),d0
    501c:	         ,-- bge.s 5038 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    501e:	         |   move.l 56(sp),d0
    5022:	         |   addi.l #1073741823,d0
    5028:	         |   add.l d0,d0
    502a:	         |   add.l d0,d0
    502c:	         |   movea.l 60(sp),a0
    5030:	         |   adda.l d0,a0
    5032:	         |   move.l (a0),48(sp)
    5036:	      ,--|-- bra.s 5092 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    5038:	      |  '-> move.l 1e77a <bundleFolder>,d0
    503e:	      |      pea 196f4 <PutChar+0x74e>
    5044:	      |      move.l d0,-(sp)
    5046:	      |      jsr 14f50 <joinStrings>
    504c:	      |      addq.l #8,sp
    504e:	      |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    5052:	      |      move.l 48(sp),-(sp)
    5056:	      |      jsr 14e4a <fileExists>
    505c:	      |      addq.l #4,sp
    505e:	      |      tst.b d0
    5060:	      +----- bne.s 5092 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    5062:	      |      move.l 48(sp),36(sp)
    5068:	      |      move.l 1e81c <SysBase>,d0
    506e:	      |      movea.l d0,a6
    5070:	      |      movea.l 36(sp),a1
    5074:	      |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    5078:	      |      move.l 1e77a <bundleFolder>,d0
    507e:	      |      pea 19701 <PutChar+0x75b>
    5084:	      |      move.l d0,-(sp)
    5086:	      |      jsr 14f50 <joinStrings>
    508c:	      |      addq.l #8,sp
    508e:	      |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	if (! fileExists(sludgeFile) ) {	
    5092:	      '----> move.l 48(sp),-(sp)
    5096:	             jsr 14e4a <fileExists>
    509c:	             addq.l #4,sp
    509e:	             tst.b d0
    50a0:	         ,-- bne.s 50f8 <main_sludge+0x180>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    50a2:	         |   move.l 1e824 <DOSBase>,d0
    50a8:	         |   movea.l d0,a6
    50aa:	         |   jsr -60(a6)
    50ae:	         |   move.l d0,28(sp)
    50b2:	         |   move.l 28(sp),d0
    50b6:	         |   move.l d0,24(sp)
    50ba:	         |   move.l #104202,20(sp)
    50c2:	         |   moveq #21,d0
    50c4:	         |   move.l d0,16(sp)
    50c8:	         |   move.l 1e824 <DOSBase>,d0
    50ce:	         |   movea.l d0,a6
    50d0:	         |   move.l 24(sp),d1
    50d4:	         |   move.l 20(sp),d2
    50d8:	         |   move.l 16(sp),d3
    50dc:	         |   jsr -48(a6)
    50e0:	         |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    50e4:	         |   pea 1970a <PutChar+0x764>
    50ea:	         |   jsr 18504 <KPrintF>
    50f0:	         |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    50f2:	         |   moveq #0,d0
    50f4:	,--------|-- bra.w 5300 <main_sludge+0x388>
	}

	KPrintF("Setgamefilepath\n");
    50f8:	|        '-> pea 19720 <PutChar+0x77a>
    50fe:	|            jsr 18504 <KPrintF>
    5104:	|            addq.l #4,sp
	setGameFilePath (sludgeFile);	
    5106:	|            move.l 48(sp),-(sp)
    510a:	|            jsr 530a <setGameFilePath>
    5110:	|            addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    5112:	|            move.l 48(sp),-(sp)
    5116:	|            jsr 6850 <initSludge>
    511c:	|            addq.l #4,sp
    511e:	|            tst.w d0
    5120:	|        ,-- bne.s 5128 <main_sludge+0x1b0>
    5122:	|        |   moveq #0,d0
    5124:	+--------|-- bra.w 5300 <main_sludge+0x388>
	
	if( winWidth != 320 || winHeight != 256) {
    5128:	|        '-> move.l 1e762 <winWidth>,d0
    512e:	|            cmpi.l #320,d0
    5134:	|        ,-- bne.s 5144 <main_sludge+0x1cc>
    5136:	|        |   move.l 1e766 <winHeight>,d0
    513c:	|        |   cmpi.l #256,d0
    5142:	|     ,--|-- beq.s 5166 <main_sludge+0x1ee>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    5144:	|     |  '-> pea 19731 <PutChar+0x78b>
    514a:	|     |      jsr 18504 <KPrintF>
    5150:	|     |      addq.l #4,sp
		winWidth = 320;
    5152:	|     |      move.l #320,1e762 <winWidth>
		winHeight = 256;
    515c:	|     |      move.l #256,1e766 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    5166:	|     '----> pea 197ae <PutChar+0x808>
    516c:	|            jsr 18504 <KPrintF>
    5172:	|            addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    5174:	|            move.l 1e766 <winHeight>,d0
    517a:	|            move.l d0,d1
    517c:	|            move.l 1e762 <winWidth>,d0
    5182:	|            move.l d1,-(sp)
    5184:	|            move.l d0,-(sp)
    5186:	|            jsr ddea <resizeBackdrop>
    518c:	|            addq.l #8,sp
    518e:	|            tst.w d0
    5190:	|        ,-- bne.s 51a6 <main_sludge+0x22e>
		KPrintF("Couldn't allocate memory for backdrop");
    5192:	|        |   pea 197c1 <PutChar+0x81b>
    5198:	|        |   jsr 18504 <KPrintF>
    519e:	|        |   addq.l #4,sp
		return FALSE;
    51a0:	|        |   moveq #0,d0
    51a2:	+--------|-- bra.w 5300 <main_sludge+0x388>
	}

	KPrintF("Init People\n");
    51a6:	|        '-> pea 197e7 <PutChar+0x841>
    51ac:	|            jsr 18504 <KPrintF>
    51b2:	|            addq.l #4,sp
	if (! initPeople ())
    51b4:	|            jsr b304 <initPeople>
    51ba:	|            tst.w d0
    51bc:	|        ,-- bne.s 51d2 <main_sludge+0x25a>
	{
		KPrintF("Couldn't initialise people stuff");
    51be:	|        |   pea 197f4 <PutChar+0x84e>
    51c4:	|        |   jsr 18504 <KPrintF>
    51ca:	|        |   addq.l #4,sp
		return FALSE;
    51cc:	|        |   moveq #0,d0
    51ce:	+--------|-- bra.w 5300 <main_sludge+0x388>
	}

	KPrintF("Init Floor\n");
    51d2:	|        '-> pea 19815 <PutChar+0x86f>
    51d8:	|            jsr 18504 <KPrintF>
    51de:	|            addq.l #4,sp
	if (! initFloor ())
    51e0:	|            jsr 178ba <initFloor>
    51e6:	|            tst.w d0
    51e8:	|        ,-- bne.s 51fe <main_sludge+0x286>
	{
		KPrintF("Couldn't initialise floor stuff");
    51ea:	|        |   pea 19821 <PutChar+0x87b>
    51f0:	|        |   jsr 18504 <KPrintF>
    51f6:	|        |   addq.l #4,sp
		
		return FALSE;
    51f8:	|        |   moveq #0,d0
    51fa:	+--------|-- bra.w 5300 <main_sludge+0x388>
	}

	KPrintF("Init Objecttype\n");
    51fe:	|        '-> pea 19841 <PutChar+0x89b>
    5204:	|            jsr 18504 <KPrintF>
    520a:	|            addq.l #4,sp
	if (! initObjectTypes ())
    520c:	|            jsr dfa6 <initObjectTypes>
    5212:	|            tst.w d0
    5214:	|        ,-- bne.s 522a <main_sludge+0x2b2>
	{
		KPrintF("Couldn't initialise object type stuff");
    5216:	|        |   pea 19852 <PutChar+0x8ac>
    521c:	|        |   jsr 18504 <KPrintF>
    5222:	|        |   addq.l #4,sp
		return FALSE;
    5224:	|        |   moveq #0,d0
    5226:	+--------|-- bra.w 5300 <main_sludge+0x388>
	}

	KPrintF("Init speech\n");
    522a:	|        '-> pea 19878 <PutChar+0x8d2>
    5230:	|            jsr 18504 <KPrintF>
    5236:	|            addq.l #4,sp
	initSpeech ();
    5238:	|            jsr 4428 <initSpeech>
	KPrintF("Init status bar\n");
    523e:	|            pea 19885 <PutChar+0x8df>
    5244:	|            jsr 18504 <KPrintF>
    524a:	|            addq.l #4,sp
	initStatusBar ();
    524c:	|            jsr 8bd0 <initStatusBar>

	KPrintF("Get numbered string\n");
    5252:	|            pea 19896 <PutChar+0x8f0>
    5258:	|            jsr 18504 <KPrintF>
    525e:	|            addq.l #4,sp
	gameName = getNumberedString(1);
    5260:	|            pea 1 <_start+0x1>
    5264:	|            jsr 7dfa <getNumberedString>
    526a:	|            addq.l #4,sp
    526c:	|            move.l d0,1e772 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    5272:	|            pea 198ab <PutChar+0x905>
    5278:	|            jsr 18504 <KPrintF>
    527e:	|            addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    5280:	|            move.l 1e7ea <noStack>,d0
    5286:	|            pea 1 <_start+0x1>
    528a:	|            move.l d0,-(sp)
    528c:	|            clr.l -(sp)
    528e:	|            clr.l -(sp)
    5290:	|            clr.l -(sp)
    5292:	|            jsr 7cc8 <startNewFunctionNum>
    5298:	|            lea 20(sp),sp

	KPrintF("Starting main loop");
    529c:	|            pea 198c3 <PutChar+0x91d>
    52a2:	|            jsr 18504 <KPrintF>
    52a8:	|            addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    52aa:	|            move.l #14675968,32(sp)
	weAreDoneSoQuit = 0;
    52b2:	|            clr.l 1e77e <weAreDoneSoQuit>
	//WaitVbl();
	FrameCounter = 0;
    52b8:	|            clr.w 1e81a <FrameCounter>

	while ( !weAreDoneSoQuit ) {	
    52be:	|     ,----- bra.s 52f8 <main_sludge+0x380>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    52c0:	|  ,--|----> jsr 7b4e <sludgeDisplay>
		CsiCheckInput();
    52c6:	|  |  |      jsr d908 <CsiCheckInput>
		walkAllPeople();
    52cc:	|  |  |      jsr c8c2 <walkAllPeople>
		handleInput();
    52d2:	|  |  |      jsr 65ca <handleInput>
		//custom->color[0] = 0x000;			
		//WaitVbl();
		while( FrameCounter < gameSettings.refreshRate)
    52d8:	|  |  |      nop
    52da:	|  |  |  ,-> move.w 1e81a <FrameCounter>,d0
    52e0:	|  |  |  |   move.w d0,d0
    52e2:	|  |  |  |   andi.l #65535,d0
    52e8:	|  |  |  |   move.l 1e902 <gameSettings+0xa>,d1
    52ee:	|  |  |  |   cmp.l d0,d1
    52f0:	|  |  |  '-- bhi.s 52da <main_sludge+0x362>
		{		
		}
		FrameCounter = 0;
    52f2:	|  |  |      clr.w 1e81a <FrameCounter>
	while ( !weAreDoneSoQuit ) {	
    52f8:	|  |  '----> move.l 1e77e <weAreDoneSoQuit>,d0
    52fe:	|  '-------- beq.s 52c0 <main_sludge+0x348>
	}	
	//Amiga Cleanup
	//FreeVec(sludgeFile);
}
    5300:	'----------> movem.l (sp)+,d2-d3/a6
    5304:	             lea 40(sp),sp
    5308:	             rts

0000530a <setGameFilePath>:

void setGameFilePath (char * f) {
    530a:	          lea -1104(sp),sp
    530e:	          move.l a6,-(sp)
    5310:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    5312:	          move.l #1112,d0
    5318:	          add.l sp,d0
    531a:	          addi.l #-1102,d0
    5320:	          move.l d0,1100(sp)
    5324:	          move.l #998,1096(sp)
    532c:	          move.l 1e824 <DOSBase>,d0
    5332:	          movea.l d0,a6
    5334:	          move.l 1100(sp),d1
    5338:	          move.l 1096(sp),d2
    533c:	          jsr -564(a6)
    5340:	          move.w d0,1094(sp)
    5344:	          move.w 1094(sp),d0
    5348:	      ,-- bne.s 5358 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    534a:	      |   pea 198d6 <PutChar+0x930>
    5350:	      |   jsr 18504 <KPrintF>
    5356:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    5358:	      '-> moveq #-1,d0
    535a:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    535e:	          clr.l 1104(sp)
    5362:	   ,----- bra.s 5380 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    5364:	,--|----> move.l 1104(sp),d0
    5368:	|  |      movea.l 1116(sp),a0
    536c:	|  |      adda.l d0,a0
    536e:	|  |      move.b (a0),d0
    5370:	|  |      cmpi.b #47,d0
    5374:	|  |  ,-- bne.s 537c <setGameFilePath+0x72>
    5376:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    537c:	|  |  '-> addq.l #1,1104(sp)
    5380:	|  '----> move.l 1104(sp),d0
    5384:	|         movea.l 1116(sp),a0
    5388:	|         adda.l d0,a0
    538a:	|         move.b (a0),d0
    538c:	'-------- bne.s 5364 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    538e:	          moveq #-1,d0
    5390:	          cmp.l 1108(sp),d0
    5394:	   ,----- beq.s 540e <setGameFilePath+0x104>
		f[got] = 0;	
    5396:	   |      move.l 1108(sp),d0
    539a:	   |      movea.l 1116(sp),a0
    539e:	   |      adda.l d0,a0
    53a0:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    53a2:	   |      move.l 1116(sp),1090(sp)
    53a8:	   |      moveq #-2,d0
    53aa:	   |      move.l d0,1086(sp)
    53ae:	   |      move.l 1e824 <DOSBase>,d0
    53b4:	   |      movea.l d0,a6
    53b6:	   |      move.l 1090(sp),d1
    53ba:	   |      move.l 1086(sp),d2
    53be:	   |      jsr -84(a6)
    53c2:	   |      move.l d0,1082(sp)
    53c6:	   |      move.l 1082(sp),d0
    53ca:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    53ce:	   |      move.l 1078(sp),1074(sp)
    53d4:	   |      move.l 1e824 <DOSBase>,d0
    53da:	   |      movea.l d0,a6
    53dc:	   |      move.l 1074(sp),d1
    53e0:	   |      jsr -126(a6)
    53e4:	   |      move.l d0,1070(sp)
    53e8:	   |      move.l 1070(sp),d0
    53ec:	   |  ,-- bne.s 5400 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    53ee:	   |  |   move.l 1116(sp),-(sp)
    53f2:	   |  |   pea 198fc <PutChar+0x956>
    53f8:	   |  |   jsr 18504 <KPrintF>
    53fe:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    5400:	   |  '-> move.l 1108(sp),d0
    5404:	   |      movea.l 1116(sp),a0
    5408:	   |      adda.l d0,a0
    540a:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    540e:	   '----> move.l #400,1066(sp)
    5416:	          clr.l 1062(sp)
    541a:	          move.l 1e81c <SysBase>,d0
    5420:	          movea.l d0,a6
    5422:	          move.l 1066(sp),d0
    5426:	          move.l 1062(sp),d1
    542a:	          jsr -684(a6)
    542e:	          move.l d0,1058(sp)
    5432:	          move.l 1058(sp),d0
    5436:	          move.l d0,1e776 <gamePath>
	if (gamePath==0) {
    543c:	          move.l 1e776 <gamePath>,d0
    5442:	      ,-- bne.s 5456 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    5444:	      |   pea 1992f <PutChar+0x989>
    544a:	      |   jsr 18504 <KPrintF>
    5450:	      |   addq.l #4,sp
    5452:	   ,--|-- bra.w 553e <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    5456:	   |  '-> move.l 1e776 <gamePath>,1054(sp)
    545e:	   |      moveq #-2,d0
    5460:	   |      move.l d0,1050(sp)
    5464:	   |      move.l 1e824 <DOSBase>,d0
    546a:	   |      movea.l d0,a6
    546c:	   |      move.l 1054(sp),d1
    5470:	   |      move.l 1050(sp),d2
    5474:	   |      jsr -84(a6)
    5478:	   |      move.l d0,1046(sp)
    547c:	   |      move.l 1046(sp),d0
    5480:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    5484:	   |      move.l 1042(sp),1038(sp)
    548a:	   |      move.l 1e824 <DOSBase>,d0
    5490:	   |      movea.l d0,a6
    5492:	   |      move.l 1038(sp),d1
    5496:	   |      jsr -126(a6)
    549a:	   |      move.l d0,1034(sp)
    549e:	   |      move.l 1034(sp),d0
    54a2:	   |  ,-- bne.s 54b2 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    54a4:	   |  |   pea 1996a <PutChar+0x9c4>
    54aa:	   |  |   jsr 18504 <KPrintF>
    54b0:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    54b2:	   |  '-> move.l #1112,d0
    54b8:	   |      add.l sp,d0
    54ba:	   |      addi.l #-1102,d0
    54c0:	   |      move.l d0,1030(sp)
    54c4:	   |      moveq #-2,d0
    54c6:	   |      move.l d0,1026(sp)
    54ca:	   |      move.l 1e824 <DOSBase>,d0
    54d0:	   |      movea.l d0,a6
    54d2:	   |      move.l 1030(sp),d1
    54d6:	   |      move.l 1026(sp),d2
    54da:	   |      jsr -84(a6)
    54de:	   |      move.l d0,1022(sp)
    54e2:	   |      move.l 1022(sp),d0
    54e6:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    54ea:	   |      move.l 1042(sp),1018(sp)
    54f0:	   |      move.l 1e824 <DOSBase>,d0
    54f6:	   |      movea.l d0,a6
    54f8:	   |      move.l 1018(sp),d1
    54fc:	   |      jsr -126(a6)
    5500:	   |      move.l d0,1014(sp)
    5504:	   |      move.l 1014(sp),d0
    5508:	   |  ,-- bne.s 551e <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    550a:	   |  |   moveq #10,d0
    550c:	   |  |   add.l sp,d0
    550e:	   |  |   move.l d0,-(sp)
    5510:	   |  |   pea 19996 <PutChar+0x9f0>
    5516:	   |  |   jsr 18504 <KPrintF>
    551c:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    551e:	   |  '-> move.l 1e776 <gamePath>,d0
    5524:	   +----- beq.s 553e <setGameFilePath+0x234>
    5526:	   |      move.l 1e776 <gamePath>,1010(sp)
    552e:	   |      move.l 1e81c <SysBase>,d0
    5534:	   |      movea.l d0,a6
    5536:	   |      movea.l 1010(sp),a1
    553a:	   |      jsr -690(a6)
}
    553e:	   '----> move.l (sp)+,d2
    5540:	          movea.l (sp)+,a6
    5542:	          lea 1104(sp),sp
    5546:	          rts

00005548 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    5548:	,-------> subq.l #8,sp
    554a:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    554c:	|         move.l 16(sp),d0
    5550:	|         move.l d0,-(sp)
    5552:	|         pea 19a9e <PutChar+0xaf8>
    5558:	|         jsr 18504 <KPrintF>
    555e:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    5560:	|         move.l 16(sp),-(sp)
    5564:	|         jsr 78d4 <pauseFunction>
    556a:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    556c:	|     ,-- bra.s 557e <abortFunction+0x36>
    556e:	|  ,--|-> moveq #24,d0
    5570:	|  |  |   add.l 16(sp),d0
    5574:	|  |  |   move.l d0,-(sp)
    5576:	|  |  |   jsr 163a8 <trimStack>
    557c:	|  |  |   addq.l #4,sp
    557e:	|  |  '-> movea.l 16(sp),a0
    5582:	|  |      move.l 24(a0),d0
    5586:	|  '----- bne.s 556e <abortFunction+0x26>
	//FreeVec( fun -> compiledLines);
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5588:	|         clr.l 8(sp)
    558c:	|     ,-- bra.s 55ac <abortFunction+0x64>
    558e:	|  ,--|-> movea.l 16(sp),a0
    5592:	|  |  |   move.l 20(a0),d1
    5596:	|  |  |   move.l 8(sp),d0
    559a:	|  |  |   lsl.l #3,d0
    559c:	|  |  |   add.l d1,d0
    559e:	|  |  |   move.l d0,-(sp)
    55a0:	|  |  |   jsr 15c72 <unlinkVar>
    55a6:	|  |  |   addq.l #4,sp
    55a8:	|  |  |   addq.l #1,8(sp)
    55ac:	|  |  '-> movea.l 16(sp),a0
    55b0:	|  |      move.l 8(a0),d0
    55b4:	|  |      cmp.l 8(sp),d0
    55b8:	|  '----- bgt.s 558e <abortFunction+0x46>
	if( fun -> numLocals > 0) {
    55ba:	|         movea.l 16(sp),a0
    55be:	|         move.l 8(a0),d0
    55c2:	|     ,-- ble.s 55de <abortFunction+0x96>
		FreeVec(fun -> localVars);
    55c4:	|     |   movea.l 16(sp),a0
    55c8:	|     |   move.l 20(a0),4(sp)
    55ce:	|     |   move.l 1e81c <SysBase>,d0
    55d4:	|     |   movea.l d0,a6
    55d6:	|     |   movea.l 4(sp),a1
    55da:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    55de:	|     '-> moveq #28,d0
    55e0:	|         add.l 16(sp),d0
    55e4:	|         move.l d0,-(sp)
    55e6:	|         jsr 15c72 <unlinkVar>
    55ec:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);	
    55ee:	|         movea.l 16(sp),a0
    55f2:	|         move.l 40(a0),d0
    55f6:	|     ,-- beq.s 5608 <abortFunction+0xc0>
    55f8:	|     |   movea.l 16(sp),a0
    55fc:	|     |   move.l 40(a0),d0
    5600:	|     |   move.l d0,-(sp)
    5602:	'-----|-- jsr 5548 <abortFunction>(pc)
    5606:	      |   addq.l #4,sp
	fun->unloaded = 1;
    5608:	      '-> movea.l 16(sp),a0
    560c:	          moveq #1,d0
    560e:	          move.l d0,58(a0)

	KPrintF("abortFunction finished\n");
    5612:	          pea 19ab8 <PutChar+0xb12>
    5618:	          jsr 18504 <KPrintF>
    561e:	          addq.l #4,sp
}
    5620:	          nop
    5622:	          movea.l (sp)+,a6
    5624:	          addq.l #8,sp
    5626:	          rts

00005628 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    5628:	          subq.l #8,sp
	int n = 0;
    562a:	          clr.l 4(sp)
	*killedMyself = FALSE;
    562e:	          movea.l 20(sp),a0
    5632:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    5634:	          move.l 1e7b2 <allRunningFunctions>,(sp)
	while (fun) {
    563a:	   ,----- bra.s 5668 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    563c:	,--|----> movea.l (sp),a0
    563e:	|  |      move.l (a0),d0
    5640:	|  |      cmp.l 12(sp),d0
    5644:	|  |  ,-- bne.s 5662 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    5646:	|  |  |   movea.l (sp),a0
    5648:	|  |  |   move.w #1,54(a0)
			n++;
    564e:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    5652:	|  |  |   move.l (sp),d0
    5654:	|  |  |   cmp.l 16(sp),d0
    5658:	|  |  +-- bne.s 5662 <cancelAFunction+0x3a>
    565a:	|  |  |   movea.l 20(sp),a0
    565e:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    5662:	|  |  '-> movea.l (sp),a0
    5664:	|  |      move.l 44(a0),(sp)
	while (fun) {
    5668:	|  '----> tst.l (sp)
    566a:	'-------- bne.s 563c <cancelAFunction+0x14>
	}
	return n;
    566c:	          move.l 4(sp),d0
}
    5670:	          addq.l #8,sp
    5672:	          rts

00005674 <completeTimers>:


void completeTimers () {
    5674:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5676:	          move.l 1e7b2 <allRunningFunctions>,(sp)

	while (thisFunction) {
    567c:	   ,----- bra.s 5692 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    567e:	,--|----> movea.l (sp),a0
    5680:	|  |      move.b 56(a0),d0
    5684:	|  |  ,-- bne.s 568c <completeTimers+0x18>
    5686:	|  |  |   movea.l (sp),a0
    5688:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    568c:	|  |  '-> movea.l (sp),a0
    568e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5692:	|  '----> tst.l (sp)
    5694:	'-------- bne.s 567e <completeTimers+0xa>
	}
}
    5696:	          nop
    5698:	          nop
    569a:	          addq.l #4,sp
    569c:	          rts

0000569e <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    569e:	                                                             lea -80(sp),sp
	BOOL keepLooping = TRUE;
    56a2:	                                                             move.w #1,78(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    56a8:	                                                             movea.l 84(sp),a0
    56ac:	                                                             move.w 54(a0),d0
    56b0:	,----------------------------------------------------------- beq.w 655c <continueFunction+0xebe>
		abortFunction (fun);
    56b4:	|                                                            move.l 84(sp),-(sp)
    56b8:	|                                                            jsr 5548 <abortFunction>
    56be:	|                                                            addq.l #4,sp
		return TRUE;
    56c0:	|                                                            moveq #1,d0
    56c2:	|  ,-------------------------------------------------------- bra.w 6566 <continueFunction+0xec8>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    56c6:	|  |  ,----------------------------------------------------> move.w #1,76(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    56cc:	|  |  |                                                      movea.l 84(sp),a0
    56d0:	|  |  |                                                      move.l 4(a0),d1
    56d4:	|  |  |                                                      movea.l 84(sp),a0
    56d8:	|  |  |                                                      move.l 36(a0),d0
    56dc:	|  |  |                                                      lsl.l #3,d0
    56de:	|  |  |                                                      movea.l d1,a0
    56e0:	|  |  |                                                      adda.l d0,a0
    56e2:	|  |  |                                                      move.l 4(a0),72(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    56e8:	|  |  |                                                      movea.l 84(sp),a0
    56ec:	|  |  |                                                      move.l 4(a0),d1
    56f0:	|  |  |                                                      movea.l 84(sp),a0
    56f4:	|  |  |                                                      move.l 36(a0),d0
    56f8:	|  |  |                                                      lsl.l #3,d0
    56fa:	|  |  |                                                      movea.l d1,a0
    56fc:	|  |  |                                                      adda.l d0,a0
    56fe:	|  |  |                                                      move.l (a0),68(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    5702:	|  |  |                                                      moveq #41,d0
    5704:	|  |  |                                                      cmp.l 68(sp),d0
    5708:	|  |  |  ,-------------------------------------------------- bcs.w 6510 <continueFunction+0xe72>
    570c:	|  |  |  |                                                   move.l 68(sp),d0
    5710:	|  |  |  |                                                   add.l d0,d0
    5712:	|  |  |  |                                                   movea.l d0,a0
    5714:	|  |  |  |                                                   adda.l #22304,a0
    571a:	|  |  |  |                                                   move.w (a0),d0
    571c:	|  |  |  |                                                   jmp (5720 <continueFunction+0x82>,pc,d0.w)
    5720:	|  |  |  |                                                   bset d6,(84,a0,d0.w)
    5724:	|  |  |  |                                                   .short 0x0a8c
    5726:	|  |  |  |                                                   eori.w #2446,-(a4)
    572a:	|  |  |  |                                                   bchg d4,-(a0)
    572c:	|  |  |  |                                                   .short 0x09ba
    572e:	|  |  |  |                                                   andi.l #182979304,-(a2)
    5734:	|  |  |  |                                                   .short 0x0ae8
    5736:	|  |  |  |                                                   .short 0x0ae8
    5738:	|  |  |  |                                                   .short 0x02d0
    573a:	|  |  |  |                                                   btst d1,2792(a4)
    573e:	|  |  |  |                                                   .short 0x0ae8
    5740:	|  |  |  |                                                   .short 0x0ae8
    5742:	|  |  |  |                                                   andi.l #61342600,d2
    5748:	|  |  |  |                                                   .short 0x00e2
    574a:	|  |  |  |                                                   .short 0x040a
    574c:	|  |  |  |                                                   andi.w #968,-(a2)
    5750:	|  |  |  |                                                   eori.b #72,2534(a6)
    5756:	|  |  |  |                                                   .short 0x0ae8
    5758:	|  |  |  |                                                   .short 0x0ae8
    575a:	|  |  |  |                                                   eori.l #65538792,(a6)+
    5760:	|  |  |  |                                                   .short 0x0ae8
    5762:	|  |  |  |                                                   bclr d3,d0
    5764:	|  |  |  |                                                   bchg #-6,(-22,a0,d0.l)
    576a:	|  |  |  |                                                   addi.w #1068,d6
    576e:	|  |  |  |                                                   subi.b #44,2570(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    5774:	|  |  |  |                                                   movea.l 84(sp),a0
    5778:	|  |  |  |                                                   move.l 40(a0),d0
    577c:	|  |  |  |                                            ,----- beq.s 57ea <continueFunction+0x14c>
				struct loadedFunction * returnTo = fun -> calledBy;
    577e:	|  |  |  |                                            |      movea.l 84(sp),a0
    5782:	|  |  |  |                                            |      move.l 40(a0),48(sp)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    5788:	|  |  |  |                                            |      movea.l 84(sp),a0
    578c:	|  |  |  |                                            |      move.w 48(a0),d0
    5790:	|  |  |  |                                            |  ,-- beq.s 57aa <continueFunction+0x10c>
    5792:	|  |  |  |                                            |  |   moveq #28,d1
    5794:	|  |  |  |                                            |  |   add.l 48(sp),d1
    5798:	|  |  |  |                                            |  |   moveq #28,d0
    579a:	|  |  |  |                                            |  |   add.l 84(sp),d0
    579e:	|  |  |  |                                            |  |   move.l d1,-(sp)
    57a0:	|  |  |  |                                            |  |   move.l d0,-(sp)
    57a2:	|  |  |  |                                            |  |   jsr 15ede <copyVariable>
    57a8:	|  |  |  |                                            |  |   addq.l #8,sp
				int tmptimeleft = fun -> timeLeft;
    57aa:	|  |  |  |                                            |  '-> movea.l 84(sp),a0
    57ae:	|  |  |  |                                            |      move.l 12(a0),44(sp)
				finishFunction (fun);
    57b4:	|  |  |  |                                            |      move.l 84(sp),-(sp)
    57b8:	|  |  |  |                                            |      jsr 656c <finishFunction>
    57be:	|  |  |  |                                            |      addq.l #4,sp
				fun = returnTo;
    57c0:	|  |  |  |                                            |      move.l 48(sp),84(sp)
				fun -> timeLeft += tmptimeleft;
    57c6:	|  |  |  |                                            |      movea.l 84(sp),a0
    57ca:	|  |  |  |                                            |      move.l 12(a0),d0
    57ce:	|  |  |  |                                            |      add.l 44(sp),d0
    57d2:	|  |  |  |                                            |      movea.l 84(sp),a0
    57d6:	|  |  |  |                                            |      move.l d0,12(a0)
				restartFunction (fun);
    57da:	|  |  |  |                                            |      move.l 84(sp),-(sp)
    57de:	|  |  |  |                                            |      jsr 794c <restartFunction>
    57e4:	|  |  |  |                                            |      addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    57e6:	|  |  |  |  ,-----------------------------------------|----- bra.w 6544 <continueFunction+0xea6>
				finishFunction (fun);
    57ea:	|  |  |  |  |                                         '----> move.l 84(sp),-(sp)
    57ee:	|  |  |  |  |                                                jsr 656c <finishFunction>
    57f4:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    57f6:	|  |  |  |  |                                                clr.w 76(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    57fa:	|  |  |  |  |                                                clr.w 78(sp)
			break;
    57fe:	|  |  |  |  +----------------------------------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    5802:	|  |  |  |  |                                                movea.l 84(sp),a0
    5806:	|  |  |  |  |                                                move.l 28(a0),d0
    580a:	|  |  |  |  |                                                moveq #2,d1
    580c:	|  |  |  |  |                                                cmp.l d0,d1
    580e:	|  |  |  |  |                                            ,-- beq.s 581a <continueFunction+0x17c>
    5810:	|  |  |  |  |                                            |   moveq #4,d1
    5812:	|  |  |  |  |                                            |   cmp.l d0,d1
    5814:	|  |  |  |  |                                         ,--|-- beq.s 5868 <continueFunction+0x1ca>
    5816:	|  |  |  |  |                                ,--------|--|-- bra.w 5950 <continueFunction+0x2b2>
				case SVT_FUNC:
				pauseFunction (fun);		
    581a:	|  |  |  |  |                                |        |  '-> move.l 84(sp),-(sp)
    581e:	|  |  |  |  |                                |        |      jsr 78d4 <pauseFunction>
    5824:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    5826:	|  |  |  |  |                                |        |      moveq #24,d0
    5828:	|  |  |  |  |                                |        |      add.l 84(sp),d0
    582c:	|  |  |  |  |                                |        |      movea.l 84(sp),a0
    5830:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    5834:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    5838:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    583a:	|  |  |  |  |                                |        |      move.l 92(sp),-(sp)
    583e:	|  |  |  |  |                                |        |      move.l 84(sp),-(sp)
    5842:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    5844:	|  |  |  |  |                                |        |      jsr 7cc8 <startNewFunctionNum>
    584a:	|  |  |  |  |                                |        |      lea 20(sp),sp
    584e:	|  |  |  |  |                                |        |      tst.l d0
    5850:	|  |  |  |  |                                |        |  ,-- bne.s 5858 <continueFunction+0x1ba>
    5852:	|  |  |  |  |                                |        |  |   clr.w d0
    5854:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 6566 <continueFunction+0xec8>
				fun = allRunningFunctions;
    5858:	|  |  |  |  |                                |        |  '-> move.l 1e7b2 <allRunningFunctions>,84(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    5860:	|  |  |  |  |                                |        |      clr.w 76(sp)
				break;
    5864:	|  |  |  |  |                                |  ,-----|----- bra.w 5964 <continueFunction+0x2c6>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    5868:	|  |  |  |  |                                |  |     '----> move.l 72(sp),d1
    586c:	|  |  |  |  |                                |  |            movea.l 84(sp),a0
    5870:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    5874:	|  |  |  |  |                                |  |            move.l 84(sp),-(sp)
    5878:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    587a:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    587c:	|  |  |  |  |                                |  |            jsr 146f0 <callBuiltIn>
    5882:	|  |  |  |  |                                |  |            lea 12(sp),sp
    5886:	|  |  |  |  |                                |  |            move.l d0,56(sp)

					switch (br) {
    588a:	|  |  |  |  |                                |  |            moveq #5,d0
    588c:	|  |  |  |  |                                |  |            cmp.l 56(sp),d0
    5890:	|  |  |  |  |                                |  |  ,-------- bcs.w 594c <continueFunction+0x2ae>
    5894:	|  |  |  |  |                                |  |  |         move.l 56(sp),d0
    5898:	|  |  |  |  |                                |  |  |         add.l d0,d0
    589a:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    589c:	|  |  |  |  |                                |  |  |         adda.l #22696,a0
    58a2:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    58a4:	|  |  |  |  |                                |  |  |         jmp (58a8 <continueFunction+0x20a>,pc,d0.w)
    58a8:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    58ae:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    58b2:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    58b8:	|  |  |  |  |                                |  |  |         suba.w (a0),a5
    58ba:	|  |  |  |  |                                |  |  |         jsr 18504 <KPrintF>
    58c0:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    58c2:	|  |  |  |  |                                |  |  |         clr.w d0
    58c4:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 6566 <continueFunction+0xec8>

						case BR_PAUSE:
						pauseFunction (fun);
    58c8:	|  |  |  |  |                                |  |  |         move.l 84(sp),-(sp)
    58cc:	|  |  |  |  |                                |  |  |         jsr 78d4 <pauseFunction>
    58d2:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    58d4:	|  |  |  |  |                                |  |  |         clr.w 78(sp)
						break;
    58d8:	|  |  |  |  |                                |  |  |  ,----- bra.s 594e <continueFunction+0x2b0>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    58da:	|  |  |  |  |                                |  |  |  |      clr.w 78(sp)
						advanceNow = FALSE;
    58de:	|  |  |  |  |                                |  |  |  |      clr.w 76(sp)
						break;
    58e2:	|  |  |  |  |                                |  |  |  +----- bra.s 594e <continueFunction+0x2b0>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    58e4:	|  |  |  |  |                                |  |  |  |      movea.l 84(sp),a0
    58e8:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),52(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    58ee:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    58f0:	|  |  |  |  |                                |  |  |  |      add.l 84(sp),d0
    58f4:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    58f8:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    58fc:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    58fe:	|  |  |  |  |                                |  |  |  |      jsr 16316 <setVariable>
    5904:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    5908:	|  |  |  |  |                                |  |  |  |      move.l 84(sp),-(sp)
    590c:	|  |  |  |  |                                |  |  |  |      jsr 78d4 <pauseFunction>
    5912:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    5914:	|  |  |  |  |                                |  |  |  |      move.l 1e7ea <noStack>,d1
    591a:	|  |  |  |  |                                |  |  |  |      move.l 52(sp),d0
    591e:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5920:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    5922:	|  |  |  |  |                                |  |  |  |      move.l 92(sp),-(sp)
    5926:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5928:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    592a:	|  |  |  |  |                                |  |  |  |      jsr 7cc8 <startNewFunctionNum>
    5930:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    5934:	|  |  |  |  |                                |  |  |  |      tst.l d0
    5936:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 593e <continueFunction+0x2a0>
    5938:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    593a:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 6566 <continueFunction+0xec8>
							fun = allRunningFunctions;
    593e:	|  |  |  |  |                                |  |  |  |  '-> move.l 1e7b2 <allRunningFunctions>,84(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    5946:	|  |  |  |  |                                |  |  |  |      clr.w 76(sp)
						}
						break;
    594a:	|  |  |  |  |                                |  |  |  +----- bra.s 594e <continueFunction+0x2b0>

						default:
						break;
    594c:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    594e:	|  |  |  |  |                                |  +-----'----X bra.s 5964 <continueFunction+0x2c6>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    5950:	|  |  |  |  |                                '--|----------> pea 19b1b <PutChar+0xb75>
    5956:	|  |  |  |  |                                   |            jsr 18504 <KPrintF>
    595c:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    595e:	|  |  |  |  |                                   |            clr.w d0
    5960:	|  +--|--|--|-----------------------------------|----------- bra.w 6566 <continueFunction+0xec8>
			}
			break;
    5964:	|  |  |  |  +-----------------------------------'----------X bra.w 6544 <continueFunction+0xea6>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    5968:	|  |  |  |  |                                                moveq #28,d0
    596a:	|  |  |  |  |                                                add.l 84(sp),d0
    596e:	|  |  |  |  |                                                clr.l -(sp)
    5970:	|  |  |  |  |                                                clr.l -(sp)
    5972:	|  |  |  |  |                                                move.l d0,-(sp)
    5974:	|  |  |  |  |                                                jsr 16316 <setVariable>
    597a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    597e:	|  |  |  |  +----------------------------------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    5982:	|  |  |  |  |                                                move.l 72(sp),d1
    5986:	|  |  |  |  |                                                moveq #28,d0
    5988:	|  |  |  |  |                                                add.l 84(sp),d0
    598c:	|  |  |  |  |                                                move.l d1,-(sp)
    598e:	|  |  |  |  |                                                pea 5 <_start+0x5>
    5992:	|  |  |  |  |                                                move.l d0,-(sp)
    5994:	|  |  |  |  |                                                jsr 16316 <setVariable>
    599a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    599e:	|  |  |  |  +----------------------------------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    59a2:	|  |  |  |  |                                                move.l 72(sp),d1
    59a6:	|  |  |  |  |                                                moveq #28,d0
    59a8:	|  |  |  |  |                                                add.l 84(sp),d0
    59ac:	|  |  |  |  |                                                move.l d1,-(sp)
    59ae:	|  |  |  |  |                                                pea 1 <_start+0x1>
    59b2:	|  |  |  |  |                                                move.l d0,-(sp)
    59b4:	|  |  |  |  |                                                jsr 16316 <setVariable>
    59ba:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    59be:	|  |  |  |  +----------------------------------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    59c2:	|  |  |  |  |                                                moveq #28,d0
    59c4:	|  |  |  |  |                                                add.l 84(sp),d0
    59c8:	|  |  |  |  |                                                movea.l 84(sp),a0
    59cc:	|  |  |  |  |                                                movea.l 20(a0),a0
    59d0:	|  |  |  |  |                                                move.l 72(sp),d1
    59d4:	|  |  |  |  |                                                lsl.l #3,d1
    59d6:	|  |  |  |  |                                                add.l a0,d1
    59d8:	|  |  |  |  |                                                move.l d0,-(sp)
    59da:	|  |  |  |  |                                                move.l d1,-(sp)
    59dc:	|  |  |  |  |                                                jsr 15ede <copyVariable>
    59e2:	|  |  |  |  |                                                addq.l #8,sp
    59e4:	|  |  |  |  |                                                tst.w d0
    59e6:	|  |  |  |  |  ,-------------------------------------------- bne.w 6522 <continueFunction+0xe84>
    59ea:	|  |  |  |  |  |                                             clr.w d0
    59ec:	|  +--|--|--|--|-------------------------------------------- bra.w 6566 <continueFunction+0xec8>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    59f0:	|  |  |  |  |  |                                             moveq #28,d0
    59f2:	|  |  |  |  |  |                                             add.l 84(sp),d0
    59f6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    59f8:	|  |  |  |  |  |                                             jsr 15f64 <getBoolean>
    59fe:	|  |  |  |  |  |                                             addq.l #4,sp
    5a00:	|  |  |  |  |  |                                             tst.w d0
    5a02:	|  |  |  |  |  |                                      ,----- beq.s 5a1e <continueFunction+0x380>
    5a04:	|  |  |  |  |  |                                      |      movea.l 84(sp),a0
    5a08:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    5a0c:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    5a0e:	|  |  |  |  |  |                                      |      jsr 15f64 <getBoolean>
    5a14:	|  |  |  |  |  |                                      |      addq.l #4,sp
    5a16:	|  |  |  |  |  |                                      |      tst.w d0
    5a18:	|  |  |  |  |  |                                      +----- beq.s 5a1e <continueFunction+0x380>
    5a1a:	|  |  |  |  |  |                                      |      moveq #1,d0
    5a1c:	|  |  |  |  |  |                                      |  ,-- bra.s 5a20 <continueFunction+0x382>
    5a1e:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5a20:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5a22:	|  |  |  |  |  |                                             add.l 84(sp),d1
    5a26:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a28:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5a2c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5a2e:	|  |  |  |  |  |                                             jsr 16316 <setVariable>
    5a34:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5a38:	|  |  |  |  |  |                                             moveq #24,d0
    5a3a:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5a3e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a40:	|  |  |  |  |  |                                             jsr 163a8 <trimStack>
    5a46:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5a48:	|  |  |  |  +--|-------------------------------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    5a4c:	|  |  |  |  |  |                                             moveq #28,d0
    5a4e:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5a52:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a54:	|  |  |  |  |  |                                             jsr 15f64 <getBoolean>
    5a5a:	|  |  |  |  |  |                                             addq.l #4,sp
    5a5c:	|  |  |  |  |  |                                             tst.w d0
    5a5e:	|  |  |  |  |  |                                         ,-- bne.s 5a76 <continueFunction+0x3d8>
    5a60:	|  |  |  |  |  |                                         |   movea.l 84(sp),a0
    5a64:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    5a68:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    5a6a:	|  |  |  |  |  |                                         |   jsr 15f64 <getBoolean>
    5a70:	|  |  |  |  |  |                                         |   addq.l #4,sp
    5a72:	|  |  |  |  |  |                                         |   tst.w d0
    5a74:	|  |  |  |  |  |                                      ,--|-- beq.s 5a7a <continueFunction+0x3dc>
    5a76:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    5a78:	|  |  |  |  |  |                                      |  ,-- bra.s 5a7c <continueFunction+0x3de>
    5a7a:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5a7c:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5a7e:	|  |  |  |  |  |                                             add.l 84(sp),d1
    5a82:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a84:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5a88:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5a8a:	|  |  |  |  |  |                                             jsr 16316 <setVariable>
    5a90:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5a94:	|  |  |  |  |  |                                             moveq #24,d0
    5a96:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5a9a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a9c:	|  |  |  |  |  |                                             jsr 163a8 <trimStack>
    5aa2:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5aa4:	|  |  |  |  +--|-------------------------------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    5aa8:	|  |  |  |  |  |                                             move.l 72(sp),d1
    5aac:	|  |  |  |  |  |                                             moveq #28,d0
    5aae:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5ab2:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5ab4:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    5ab8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5aba:	|  |  |  |  |  |                                             jsr 16316 <setVariable>
    5ac0:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5ac4:	|  |  |  |  +--|-------------------------------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    5ac8:	|  |  |  |  |  |                                             move.l 72(sp),d1
    5acc:	|  |  |  |  |  |                                             moveq #28,d0
    5ace:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5ad2:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5ad4:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    5ad8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5ada:	|  |  |  |  |  |                                             jsr 16316 <setVariable>
    5ae0:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5ae4:	|  |  |  |  +--|-------------------------------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    5ae8:	|  |  |  |  |  |                                             move.l 72(sp),d1
    5aec:	|  |  |  |  |  |                                             moveq #28,d0
    5aee:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5af2:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5af4:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    5af8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5afa:	|  |  |  |  |  |                                             jsr 16316 <setVariable>
    5b00:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5b04:	|  |  |  |  +--|-------------------------------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_UNREG:
			if (dialogValue != 1) {
    5b08:	|  |  |  |  |  |                                             move.l 1e76e <dialogValue>,d0
    5b0e:	|  |  |  |  |  |                                             moveq #1,d1
    5b10:	|  |  |  |  |  |                                             cmp.l d0,d1
    5b12:	|  |  |  |  |  |  ,----------------------------------------- beq.w 6526 <continueFunction+0xe88>
				KPrintF(ERROR_HACKER);
    5b16:	|  |  |  |  |  |  |                                          pea 19b30 <PutChar+0xb8a>
    5b1c:	|  |  |  |  |  |  |                                          jsr 18504 <KPrintF>
    5b22:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    5b24:	|  |  |  |  |  |  |                                          clr.w d0
    5b26:	|  +--|--|--|--|--|----------------------------------------- bra.w 6566 <continueFunction+0xec8>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    5b2a:	|  |  |  |  |  |  |                                          move.l 72(sp),d1
    5b2e:	|  |  |  |  |  |  |                                          moveq #28,d0
    5b30:	|  |  |  |  |  |  |                                          add.l 84(sp),d0
    5b34:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    5b36:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    5b38:	|  |  |  |  |  |  |                                          jsr 15aa8 <loadStringToVar>
    5b3e:	|  |  |  |  |  |  |                                          addq.l #8,sp
    5b40:	|  |  |  |  |  |  |                                          tst.w d0
    5b42:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 652a <continueFunction+0xe8c>
					return FALSE;
    5b46:	|  |  |  |  |  |  |  |                                       clr.w d0
    5b48:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 6566 <continueFunction+0xec8>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    5b4c:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5b50:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5b54:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5b56:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    5b58:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5b5a:	|  |  |  |  |  |  |  |                                ,----- beq.s 5bb8 <continueFunction+0x51a>
    5b5c:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    5b5e:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    5b60:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 5d4c <continueFunction+0x6ae>
    5b64:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    5b66:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 5b72 <continueFunction+0x4d4>
    5b68:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    5b6a:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    5b6c:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 5bb8 <continueFunction+0x51a>
    5b6e:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5d4c <continueFunction+0x6ae>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    5b72:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    5b74:	|  |  |  |  |  |  |  |              |                 |      cmp.l 68(sp),d0
    5b78:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 5ba4 <continueFunction+0x506>
					setVariable (&fun -> reg, SVT_NULL, 0);
    5b7a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    5b7c:	|  |  |  |  |  |  |  |              |                 |  |   add.l 84(sp),d0
    5b80:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5b82:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5b84:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5b86:	|  |  |  |  |  |  |  |              |                 |  |   jsr 16316 <setVariable>
    5b8c:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    5b90:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    5b92:	|  |  |  |  |  |  |  |              |                 |  |   add.l 84(sp),d0
    5b96:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5b98:	|  |  |  |  |  |  |  |              |                 |  |   jsr 163a8 <trimStack>
    5b9e:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    5ba0:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 5d62 <continueFunction+0x6c4>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    5ba4:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 19b71 <PutChar+0xbcb>
    5baa:	|  |  |  |  |  |  |  |              |  |              |      jsr 18504 <KPrintF>
    5bb0:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    5bb2:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    5bb4:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 6566 <continueFunction+0xec8>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5bb8:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 84(sp),a0
    5bbc:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5bc0:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    5bc4:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    5bc6:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5bdc <continueFunction+0x53e>
					KPrintF((ERROR_INDEX_EMPTY));
    5bc8:	|  |  |  |  |  |  |  |              |  |                 |   pea 19bad <PutChar+0xc07>
    5bce:	|  |  |  |  |  |  |  |              |  |                 |   jsr 18504 <KPrintF>
    5bd4:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    5bd6:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5bd8:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 6566 <continueFunction+0xec8>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5bdc:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    5bde:	|  |  |  |  |  |  |  |              |  |                     add.l 84(sp),d0
    5be2:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5be4:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    5be8:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    5bec:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    5bee:	|  |  |  |  |  |  |  |              |  |                     jsr 15a24 <getValueType>
    5bf4:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    5bf8:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    5bfa:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5c02 <continueFunction+0x564>
    5bfc:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5bfe:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 6566 <continueFunction+0xec8>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5c02:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 84(sp),a0
    5c06:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5c0a:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    5c0c:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    5c0e:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    5c10:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5c32 <continueFunction+0x594>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    5c12:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    5c16:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    5c18:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 84(sp),a0
    5c1c:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    5c20:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    5c24:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    5c26:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5c28:	|  |  |  |  |  |  |  |              |  |                 |   jsr 156ae <fastArrayGetByIndex>
    5c2e:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    5c30:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 5c52 <continueFunction+0x5b4>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    5c32:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    5c36:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    5c38:	|  |  |  |  |  |  |  |              |  |              |      movea.l 84(sp),a0
    5c3c:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    5c40:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    5c44:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    5c46:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    5c48:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    5c4a:	|  |  |  |  |  |  |  |              |  |              |      jsr 16338 <stackGetByIndex>
    5c50:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5c52:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,64(sp)

					trimStack (&fun -> stack);
    5c56:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    5c58:	|  |  |  |  |  |  |  |              |  |                     add.l 84(sp),d0
    5c5c:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5c5e:	|  |  |  |  |  |  |  |              |  |                     jsr 163a8 <trimStack>
    5c64:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    5c66:	|  |  |  |  |  |  |  |              |  |                     tst.l 64(sp)
    5c6a:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5c86 <continueFunction+0x5e8>
						setVariable (&fun -> reg, SVT_NULL, 0);
    5c6c:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    5c6e:	|  |  |  |  |  |  |  |              |  |                 |   add.l 84(sp),d0
    5c72:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5c74:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5c76:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5c78:	|  |  |  |  |  |  |  |              |  |                 |   jsr 16316 <setVariable>
    5c7e:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    5c82:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 5d60 <continueFunction+0x6c2>
						switch (com) {
    5c86:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    5c88:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 68(sp),d0
    5c8c:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 5c9a <continueFunction+0x5fc>
    5c8e:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    5c90:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 68(sp),d1
    5c94:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 5ce4 <continueFunction+0x646>
    5c96:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 5d2c <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5c9a:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 64(sp),-(sp)
    5c9e:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    5ca2:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    5ca6:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    5ca8:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 15a24 <getValueType>
    5cae:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    5cb2:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    5cb4:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 5cbc <continueFunction+0x61e>
    5cb6:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    5cb8:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 5d46 <continueFunction+0x6a8>
							setVariable (&fun -> reg, SVT_INT, ii);
    5cbc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    5cbe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    5cc0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 84(sp),d0
    5cc4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    5cc6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    5cca:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    5ccc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 16316 <setVariable>
    5cd2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    5cd6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    5cd8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    5cda:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 64(sp),a0
    5cde:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    5ce2:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 5d4a <continueFunction+0x6ac>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5ce4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 64(sp),-(sp)
    5ce8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5cec:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    5cf0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    5cf2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 15a24 <getValueType>
    5cf8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    5cfc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    5cfe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 5d04 <continueFunction+0x666>
    5d00:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    5d02:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 5d46 <continueFunction+0x6a8>
							setVariable (&fun -> reg, SVT_INT, ii);
    5d04:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    5d06:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    5d08:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 84(sp),d0
    5d0c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    5d0e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5d12:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    5d14:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 16316 <setVariable>
    5d1a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5d1e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    5d20:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    5d22:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 64(sp),a0
    5d26:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5d2a:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5d4a <continueFunction+0x6ac>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5d2c:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    5d2e:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 84(sp),d0
    5d32:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    5d34:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 68(sp),-(sp)
    5d38:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 15ede <copyVariable>
    5d3e:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    5d40:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    5d42:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 5d60 <continueFunction+0x6c2>
    5d44:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5d46:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 6566 <continueFunction+0xec8>
				break;
    5d4a:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 5d60 <continueFunction+0x6c2>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5d4c:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 19bcb <PutChar+0xc25>
    5d52:	|  |  |  |  |  |  |  |                 |  |                  jsr 18504 <KPrintF>
    5d58:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5d5a:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5d5c:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 6566 <continueFunction+0xec8>
				break;
    5d60:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    5d62:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 6544 <continueFunction+0xea6>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5d66:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5d6a:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5d6e:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5d70:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    5d72:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5d74:	|  |  |  |  |  |  |  |                                   ,-- beq.s 5d82 <continueFunction+0x6e4>
    5d76:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5d78:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5d7a:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 5e2e <continueFunction+0x790>
    5d7e:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 5e8c <continueFunction+0x7ee>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5d82:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 84(sp),a0
    5d86:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5d8a:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5d8e:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5d90:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5da6 <continueFunction+0x708>
					KPrintF((ERROR_INDEX_EMPTY));
    5d92:	|  |  |  |  |  |  |  |                             |  |  |   pea 19bad <PutChar+0xc07>
    5d98:	|  |  |  |  |  |  |  |                             |  |  |   jsr 18504 <KPrintF>
    5d9e:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    5da0:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5da2:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6566 <continueFunction+0xec8>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5da6:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    5da8:	|  |  |  |  |  |  |  |                             |  |      add.l 84(sp),d0
    5dac:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5dae:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    5db2:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    5db6:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    5db8:	|  |  |  |  |  |  |  |                             |  |      jsr 15a24 <getValueType>
    5dbe:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5dc2:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5dc4:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5dcc <continueFunction+0x72e>
    5dc6:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5dc8:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6566 <continueFunction+0xec8>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    5dcc:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 84(sp),a0
    5dd0:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5dd4:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    5dd8:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    5dda:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5dde:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5de0:	|  |  |  |  |  |  |  |                             |  |      movea.l 84(sp),a0
    5de4:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5de8:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5dec:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5dee:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5df0:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    5df2:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5df4:	|  |  |  |  |  |  |  |                             |  |      jsr 7b74 <stackSetByIndex>
    5dfa:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5dfe:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5e00:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5e08 <continueFunction+0x76a>
						return FALSE;
    5e02:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5e04:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6566 <continueFunction+0xec8>
					}
					trimStack (&fun -> stack);
    5e08:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    5e0a:	|  |  |  |  |  |  |  |                             |  |      add.l 84(sp),d0
    5e0e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5e10:	|  |  |  |  |  |  |  |                             |  |      jsr 163a8 <trimStack>
    5e16:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5e18:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5e1a:	|  |  |  |  |  |  |  |                             |  |      add.l 84(sp),d0
    5e1e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5e20:	|  |  |  |  |  |  |  |                             |  |      jsr 163a8 <trimStack>
    5e26:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5e28:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5e2a:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 6544 <continueFunction+0xea6>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5e2e:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    5e30:	|  |  |  |  |  |  |  |                             |         add.l 84(sp),d0
    5e34:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5e36:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5e3a:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5e3e:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5e40:	|  |  |  |  |  |  |  |                             |         jsr 15a24 <getValueType>
    5e46:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5e4a:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5e4c:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5e54 <continueFunction+0x7b6>
    5e4e:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5e50:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 6566 <continueFunction+0xec8>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5e54:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    5e58:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5e5a:	|  |  |  |  |  |  |  |                             |         movea.l 84(sp),a0
    5e5e:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    5e62:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5e66:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5e68:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5e6a:	|  |  |  |  |  |  |  |                             |         jsr 156ae <fastArrayGetByIndex>
    5e70:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    5e72:	|  |  |  |  |  |  |  |                             |         move.l d0,60(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5e76:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5e86 <continueFunction+0x7e8>
    5e78:	|  |  |  |  |  |  |  |                             |     |   pea 19bef <PutChar+0xc49>
    5e7e:	|  |  |  |  |  |  |  |                             |     |   jsr 18504 <KPrintF>
    5e84:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    5e86:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    5e88:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 6566 <continueFunction+0xec8>
				KPrintF((ERROR_INDEX_NONSTACK));
    5e8c:	|  |  |  |  |  |  |  |                             '-------> pea 19bcb <PutChar+0xc25>
    5e92:	|  |  |  |  |  |  |  |                                       jsr 18504 <KPrintF>
    5e98:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5e9a:	|  |  |  |  |  |  |  |                                       clr.w d0
    5e9c:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 6566 <continueFunction+0xec8>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5ea0:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5ea4:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5ea8:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5eac:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5eae:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5eb0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5eb2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5eb6:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5eba:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5ebc:	|  |  |  |  |  |  |  |                                       jsr 15a24 <getValueType>
    5ec2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5ec6:	|  |  |  |  |  |  |  |                                       tst.w d0
    5ec8:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5ed0 <continueFunction+0x832>
    5eca:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5ecc:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6566 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, ii);
    5ed0:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    5ed4:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5ed6:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    5eda:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5edc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ee0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ee2:	|  |  |  |  |  |  |  |                                       jsr 16316 <setVariable>
    5ee8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5eec:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5ef0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5ef2:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5ef4:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5ef8:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5efc:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5f00:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f02:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5f04:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5f06:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f0a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f0c:	|  |  |  |  |  |  |  |                                       jsr 16316 <setVariable>
    5f12:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5f16:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5f1a:	|  |  |  |  |  |  |  |                                       move.l 1e7c8 <globalVars>,d1
    5f20:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5f24:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f26:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5f28:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f2a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f2e:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    5f32:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5f34:	|  |  |  |  |  |  |  |                                       jsr 15a24 <getValueType>
    5f3a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5f3e:	|  |  |  |  |  |  |  |                                       tst.w d0
    5f40:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5f48 <continueFunction+0x8aa>
    5f42:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5f44:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6566 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, ii);
    5f48:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5f4c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5f4e:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    5f52:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5f54:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f58:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f5a:	|  |  |  |  |  |  |  |                                       jsr 16316 <setVariable>
    5f60:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5f64:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5f68:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5f6a:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5f6c:	|  |  |  |  |  |  |  |                                       movea.l 1e7c8 <globalVars>,a0
    5f72:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5f76:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f78:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5f7a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5f7c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f80:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f82:	|  |  |  |  |  |  |  |                                       jsr 16316 <setVariable>
    5f88:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5f8c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5f90:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5f94:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5f98:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5f9c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f9e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5fa0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5fa2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5fa6:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5faa:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5fac:	|  |  |  |  |  |  |  |                                       jsr 15a24 <getValueType>
    5fb2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5fb6:	|  |  |  |  |  |  |  |                                       tst.w d0
    5fb8:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5fc0 <continueFunction+0x922>
    5fba:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5fbc:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6566 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, ii);
    5fc0:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    5fc4:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5fc6:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    5fca:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5fcc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5fd0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5fd2:	|  |  |  |  |  |  |  |                                       jsr 16316 <setVariable>
    5fd8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5fdc:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5fe0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5fe2:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5fe4:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5fe8:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5fec:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5ff0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5ff2:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5ff4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ff6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ffa:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ffc:	|  |  |  |  |  |  |  |                                       jsr 16316 <setVariable>
    6002:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    6006:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    600a:	|  |  |  |  |  |  |  |                                       move.l 1e7c8 <globalVars>,d1
    6010:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    6014:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    6016:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    6018:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    601a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    601e:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    6022:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    6024:	|  |  |  |  |  |  |  |                                       jsr 15a24 <getValueType>
    602a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    602e:	|  |  |  |  |  |  |  |                                       tst.w d0
    6030:	|  |  |  |  |  |  |  |                                   ,-- bne.s 6038 <continueFunction+0x99a>
    6032:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    6034:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6566 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, ii);
    6038:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    603c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    603e:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    6042:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    6044:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6048:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    604a:	|  |  |  |  |  |  |  |                                       jsr 16316 <setVariable>
    6050:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    6054:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    6058:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    605a:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    605c:	|  |  |  |  |  |  |  |                                       movea.l 1e7c8 <globalVars>,a0
    6062:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    6066:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    6068:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    606a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    606c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6070:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    6072:	|  |  |  |  |  |  |  |                                       jsr 16316 <setVariable>
    6078:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    607c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    6080:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    6084:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    6088:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    608c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    608e:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    6090:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    6092:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    6096:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    6098:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    609a:	|  |  |  |  |  |  |  |                                       jsr 15ede <copyVariable>
    60a0:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    60a2:	|  |  |  |  |  |  |  |                                       tst.w d0
    60a4:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 652e <continueFunction+0xe90>
    60a8:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    60aa:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 6566 <continueFunction+0xec8>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    60ae:	|  |  |  |  |  |  |  |  |                                    move.l 1e7c8 <globalVars>,d1
    60b4:	|  |  |  |  |  |  |  |  |                                    move.l 72(sp),d0
    60b8:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    60ba:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    60bc:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    60be:	|  |  |  |  |  |  |  |  |                                    add.l 84(sp),d0
    60c2:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    60c4:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    60c6:	|  |  |  |  |  |  |  |  |                                    jsr 15ede <copyVariable>
    60cc:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    60ce:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    60d0:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 6532 <continueFunction+0xe94>
    60d4:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    60d6:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 6566 <continueFunction+0xec8>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    60da:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    60dc:	|  |  |  |  |  |  |  |  |  |                                 add.l 84(sp),d0
    60e0:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1e7c8 <globalVars>,a0
    60e6:	|  |  |  |  |  |  |  |  |  |                                 move.l 72(sp),d1
    60ea:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    60ec:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    60ee:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    60f0:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    60f2:	|  |  |  |  |  |  |  |  |  |                                 jsr 15ede <copyVariable>
    60f8:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    60fa:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    60fc:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 6536 <continueFunction+0xe98>
    6100:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    6102:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 6566 <continueFunction+0xec8>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    6106:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    6108:	|  |  |  |  |  |  |  |  |  |  |                              add.l 84(sp),d1
    610c:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    610e:	|  |  |  |  |  |  |  |  |  |  |                              add.l 84(sp),d0
    6112:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    6114:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    6116:	|  |  |  |  |  |  |  |  |  |  |                              jsr 15260 <addVarToStack>
    611c:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    611e:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    6120:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 653a <continueFunction+0xe9c>
    6124:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    6126:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 6566 <continueFunction+0xec8>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    612a:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    612c:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 84(sp),d1
    6130:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    6132:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 84(sp),d0
    6136:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    6138:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    613a:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 152e6 <addVarToStackQuick>
    6140:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    6142:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    6144:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 653e <continueFunction+0xea0>
    6148:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    614a:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 6566 <continueFunction+0xec8>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    614e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    6150:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 84(sp),d0
    6154:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    6156:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 15f64 <getBoolean>
    615c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    615e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    6160:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    6162:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    6164:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    6166:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    6168:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    616a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 84(sp),d0
    616e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    6170:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    6174:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    6176:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 16316 <setVariable>
    617c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    6180:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    6184:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    6186:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 84(sp),d0
    618a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    618c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 15f64 <getBoolean>
    6192:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    6194:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    6196:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 6542 <continueFunction+0xea4>
				advanceNow = FALSE;
    619a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 76(sp)
				fun -> runThisLine = param;
    619e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 84(sp),a0
    61a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 72(sp),36(a0)
			}
			break;
    61a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 6542 <continueFunction+0xea4>

			case SLU_BRANCH:
			advanceNow = FALSE;
    61ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 76(sp)
			fun -> runThisLine = param;
    61b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 84(sp),a0
    61b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 72(sp),36(a0)
			break;
    61ba:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6544 <continueFunction+0xea6>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    61be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    61c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 84(sp),d0
    61c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    61c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    61ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    61ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    61d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 15a24 <getValueType>
    61d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    61da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    61dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 61e4 <continueFunction+0xb46>
    61de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    61e0:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 6566 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, -i);
    61e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    61e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    61ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    61ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    61ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 84(sp),d0
    61f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    61f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    61f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    61fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 16316 <setVariable>
    6200:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    6204:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6544 <continueFunction+0xea6>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    6208:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 84(sp),a0
    620c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    6210:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 64fa <continueFunction+0xe5c>
				int firstValue, secondValue;

				switch (com) {
    6214:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    6216:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 68(sp),d0
    621a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 6296 <continueFunction+0xbf8>
    621c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    621e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 68(sp),d1
    6222:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 62e0 <continueFunction+0xc42>
    6226:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    6228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 68(sp),d0
    622c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 623a <continueFunction+0xb9c>
    622e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    6230:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 68(sp),d1
    6234:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 6268 <continueFunction+0xbca>
    6236:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 62e0 <continueFunction+0xc42>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    623a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    623c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 84(sp),d0
    6240:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 84(sp),a0
    6244:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    6248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    624a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    624c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1535a <addVariablesInSecond>
    6252:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    6254:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    6256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 84(sp),d0
    625a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    625c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 163a8 <trimStack>
    6262:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    6264:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 650e <continueFunction+0xe70>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    6268:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    626a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 84(sp),d0
    626e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 84(sp),a0
    6272:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    6276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    6278:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    627a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 15418 <compareVariablesInSecond>
    6280:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    6282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    6284:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 84(sp),d0
    6288:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    628a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 163a8 <trimStack>
    6290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    6292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 650e <continueFunction+0xe70>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    6296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    6298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 84(sp),d0
    629c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 84(sp),a0
    62a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    62a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    62a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    62a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 15418 <compareVariablesInSecond>
    62ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    62b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    62b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 84(sp),d0
    62b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    62b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 163a8 <trimStack>
    62be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    62c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 84(sp),a0
    62c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    62c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    62ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    62cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    62ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    62d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 84(sp),a0
    62d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    62dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 650e <continueFunction+0xe70>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    62e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 84(sp),a0
    62e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    62e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    62ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    62ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    62f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    62f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 15a24 <getValueType>
    62fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    62fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    6300:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 6308 <continueFunction+0xc6a>
    6302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    6304:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 6566 <continueFunction+0xec8>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    6308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    630a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 84(sp),d0
    630e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    6310:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    6314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    6318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    631a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 15a24 <getValueType>
    6320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    6324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    6326:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 632e <continueFunction+0xc90>
    6328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    632a:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 6566 <continueFunction+0xec8>
					trimStack (&fun -> stack);
    632e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    6330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 84(sp),d0
    6334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    6336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 163a8 <trimStack>
    633c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    633e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    6340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 68(sp),d0
    6344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    6346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    6348:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 650c <continueFunction+0xe6e>
    634c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    634e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    6350:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #25436,a0
    6356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    6358:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (635c <continueFunction+0xcbe>,pc,d0.w)
    635c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    6360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    6362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    636a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    636c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    6374:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    637c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    6384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    638c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    6390:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    6394:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18e90 <__mulsi3>
    639e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    63a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    63a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    63a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    63a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    63aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    63ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    63b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16316 <setVariable>
    63b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    63ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 650e <continueFunction+0xe70>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    63be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    63c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    63c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    63c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    63ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    63ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    63d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    63d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    63d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16316 <setVariable>
    63dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    63e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 650e <continueFunction+0xe70>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    63e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    63e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    63ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    63ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    63f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18f3c <__modsi3>
    63f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    63f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    63fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    63fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6402:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6408:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16316 <setVariable>
    640e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 650e <continueFunction+0xe70>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    6416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    641a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    641e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18f0e <__divsi3>
    6428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    642a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    642c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    642e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6432:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    643a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16316 <setVariable>
    6440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 650e <continueFunction+0xe70>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    6448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    644c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    6454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    645a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    645c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16316 <setVariable>
    646e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 650e <continueFunction+0xe70>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    6476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    647a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    647e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    6482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    648a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    648e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16316 <setVariable>
    649c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    64a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 650e <continueFunction+0xe70>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    64a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    64a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    64aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    64ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    64ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    64b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    64b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    64b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    64b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    64ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    64bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    64c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    64c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16316 <setVariable>
    64c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    64cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 650e <continueFunction+0xe70>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    64ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    64d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    64d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    64d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    64da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    64dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    64de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    64e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    64e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    64e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    64e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    64ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    64ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16316 <setVariable>
    64f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    64f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 650e <continueFunction+0xe70>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    64fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 19c10 <PutChar+0xc6a>
    6500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 18504 <KPrintF>
    6506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    6508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    650a:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 6566 <continueFunction+0xec8>
						break;
    650c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    650e:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 6544 <continueFunction+0xea6>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    6510:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 19c28 <PutChar+0xc82>
    6516:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 18504 <KPrintF>
    651c:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    651e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    6520:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 6566 <continueFunction+0xec8>
			break;
    6522:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    6524:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 6544 <continueFunction+0xea6>
			break;
    6526:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    6528:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 6544 <continueFunction+0xea6>
			break;
    652a:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    652c:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 6544 <continueFunction+0xea6>
			break;
    652e:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    6530:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 6544 <continueFunction+0xea6>
			break;
    6532:	|  |  |     |              '--|--|--|--|-------------------> nop
    6534:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 6544 <continueFunction+0xea6>
			break;
    6536:	|  |  |     |                 '--|--|--|-------------------> nop
    6538:	|  |  |     +--------------------|--|--|-------------------- bra.s 6544 <continueFunction+0xea6>
			break;
    653a:	|  |  |     |                    '--|--|-------------------> nop
    653c:	|  |  |     +-----------------------|--|-------------------- bra.s 6544 <continueFunction+0xea6>
			break;
    653e:	|  |  |     |                       '--|-------------------> nop
    6540:	|  |  |     +--------------------------|-------------------- bra.s 6544 <continueFunction+0xea6>
			break;
    6542:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    6544:	|  |  |     '----------------------------------------------> tst.w 76(sp)
    6548:	+--|--|----------------------------------------------------- beq.s 655c <continueFunction+0xebe>
    654a:	|  |  |                                                      movea.l 84(sp),a0
    654e:	|  |  |                                                      move.l 36(a0),d0
    6552:	|  |  |                                                      addq.l #1,d0
    6554:	|  |  |                                                      movea.l 84(sp),a0
    6558:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    655c:	'--|--|----------------------------------------------------> tst.w 78(sp)
    6560:	   |  '----------------------------------------------------- bne.w 56c6 <continueFunction+0x28>

	}
	return TRUE;
    6564:	   |                                                         moveq #1,d0
}
    6566:	   '-------------------------------------------------------> lea 80(sp),sp
    656a:	                                                             rts

0000656c <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
	//KPrintF("finishFunction started\n");

	pauseFunction (fun);
    656c:	    move.l 4(sp),-(sp)
    6570:	    jsr 78d4 <pauseFunction>
    6576:	    addq.l #4,sp

	//Keep function loaed in memory if it is the focus function
	if( fun != currentEvents -> focusFunction) {	
    6578:	    movea.l 1e180 <currentEvents>,a0
    657e:	    move.l 20(a0),d0
    6582:	    cmp.l 4(sp),d0
    6586:	,-- beq.s 6594 <finishFunction+0x28>
		unloadFunction (fun);
    6588:	|   move.l 4(sp),-(sp)
    658c:	|   jsr 7d14 <unloadFunction>
    6592:	|   addq.l #4,sp
	}	
	//KPrintF("finishFunction finished\n");
}
    6594:	'-> nop
    6596:	    rts

00006598 <freezeSubs>:

void freezeSubs () {
    6598:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    659a:	          move.l 1e7b2 <allRunningFunctions>,(sp)

	while (thisFunction) {
    65a0:	   ,----- bra.s 65be <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    65a2:	,--|----> movea.l (sp),a0
    65a4:	|  |      move.w 52(a0),d0
    65a8:	|  |  ,-- bne.s 65b8 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    65aa:	|  |  |   movea.l (sp),a0
    65ac:	|  |  |   move.b 56(a0),d0
    65b0:	|  |  |   addq.b #1,d0
    65b2:	|  |  |   movea.l (sp),a0
    65b4:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    65b8:	|  |  '-> movea.l (sp),a0
    65ba:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    65be:	|  '----> tst.l (sp)
    65c0:	'-------- bne.s 65a2 <freezeSubs+0xa>
	}
}
    65c2:	          nop
    65c4:	          nop
    65c6:	          addq.l #4,sp
    65c8:	          rts

000065ca <handleInput>:

BOOL handleInput () {
    65ca:	             lea -20(sp),sp
    65ce:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    65d0:	             move.l 1e930 <overRegion>,d0
    65d6:	         ,-- bne.s 65de <handleInput+0x14>
    65d8:	         |   jsr 16c60 <getOverRegion>

	if (input.justMoved) {
    65de:	         '-> move.w 1e7d0 <input+0x4>,d0
    65e4:	         ,-- beq.s 6622 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    65e6:	         |   movea.l 1e180 <currentEvents>,a0
    65ec:	         |   move.l 16(a0),d0
    65f0:	         +-- beq.s 6622 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    65f2:	         |   move.l 1e7ea <noStack>,d1
    65f8:	         |   movea.l 1e180 <currentEvents>,a0
    65fe:	         |   move.l 16(a0),d0
    6602:	         |   pea 1 <_start+0x1>
    6606:	         |   move.l d1,-(sp)
    6608:	         |   clr.l -(sp)
    660a:	         |   clr.l -(sp)
    660c:	         |   move.l d0,-(sp)
    660e:	         |   jsr 7cc8 <startNewFunctionNum>
    6614:	         |   lea 20(sp),sp
    6618:	         |   tst.l d0
    661a:	         +-- bne.s 6622 <handleInput+0x58>
    661c:	         |   clr.w d0
    661e:	,--------|-- bra.w 6848 <handleInput+0x27e>
		}
	}
	input.justMoved = FALSE;
    6622:	|        '-> clr.w 1e7d0 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    6628:	|            move.l 1e7e2 <lastRegion>,d1
    662e:	|            move.l 1e930 <overRegion>,d0
    6634:	|            cmp.l d1,d0
    6636:	|  ,-------- beq.w 670e <handleInput+0x144>
    663a:	|  |         movea.l 1e180 <currentEvents>,a0
    6640:	|  |         move.l 20(a0),d0
    6644:	|  +-------- beq.w 670e <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    6648:	|  |         moveq #12,d0
    664a:	|  |         move.l d0,20(sp)
    664e:	|  |         clr.l 16(sp)
    6652:	|  |         move.l 1e81c <SysBase>,d0
    6658:	|  |         movea.l d0,a6
    665a:	|  |         move.l 20(sp),d0
    665e:	|  |         move.l 16(sp),d1
    6662:	|  |         jsr -684(a6)
    6666:	|  |         move.l d0,12(sp)
    666a:	|  |         move.l 12(sp),d0
    666e:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    6672:	|  |         move.l 4(sp),d0
    6676:	|  |     ,-- bne.s 668c <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    6678:	|  |     |   pea 19c54 <PutChar+0xcae>
    667e:	|  |     |   jsr 18504 <KPrintF>
    6684:	|  |     |   addq.l #4,sp
			return FALSE;
    6686:	|  |     |   clr.w d0
    6688:	+--|-----|-- bra.w 6848 <handleInput+0x27e>
		}
		
		initVarNew (tempStack -> thisVar);
    668c:	|  |     '-> movea.l 4(sp),a0
    6690:	|  |         clr.l (a0)
		if (overRegion) {
    6692:	|  |         move.l 1e930 <overRegion>,d0
    6698:	|  |  ,----- beq.s 66c0 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    669a:	|  |  |      movea.l 1e930 <overRegion>,a0
    66a0:	|  |  |      movea.l 28(a0),a0
    66a4:	|  |  |      move.l 4(a0),d1
    66a8:	|  |  |      move.l 4(sp),d0
    66ac:	|  |  |      move.l d1,-(sp)
    66ae:	|  |  |      pea 7 <_start+0x7>
    66b2:	|  |  |      move.l d0,-(sp)
    66b4:	|  |  |      jsr 16316 <setVariable>
    66ba:	|  |  |      lea 12(sp),sp
    66be:	|  |  |  ,-- bra.s 66d6 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    66c0:	|  |  '--|-> move.l 4(sp),d0
    66c4:	|  |     |   clr.l -(sp)
    66c6:	|  |     |   pea 1 <_start+0x1>
    66ca:	|  |     |   move.l d0,-(sp)
    66cc:	|  |     |   jsr 16316 <setVariable>
    66d2:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;		
    66d6:	|  |     '-> movea.l 4(sp),a0
    66da:	|  |         clr.l 8(a0)
		if (! startNewFunctionLoaded (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    66de:	|  |         movea.l 1e180 <currentEvents>,a0
    66e4:	|  |         move.l 20(a0),d0
    66e8:	|  |         pea 1 <_start+0x1>
    66ec:	|  |         lea 8(sp),a0
    66f0:	|  |         move.l a0,-(sp)
    66f2:	|  |         clr.l -(sp)
    66f4:	|  |         pea 1 <_start+0x1>
    66f8:	|  |         move.l d0,-(sp)
    66fa:	|  |         jsr 7bb8 <startNewFunctionLoaded>
    6700:	|  |         lea 20(sp),sp
    6704:	|  |         tst.l d0
    6706:	|  +-------- bne.s 670e <handleInput+0x144>
    6708:	|  |         clr.w d0
    670a:	+--|-------- bra.w 6848 <handleInput+0x27e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    670e:	|  '-------> move.w 1e7d2 <input+0x6>,d0
    6714:	|        ,-- beq.s 6752 <handleInput+0x188>
    6716:	|        |   movea.l 1e180 <currentEvents>,a0
    671c:	|        |   move.l 4(a0),d0
    6720:	|        +-- beq.s 6752 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6722:	|        |   move.l 1e7ea <noStack>,d1
    6728:	|        |   movea.l 1e180 <currentEvents>,a0
    672e:	|        |   move.l 4(a0),d0
    6732:	|        |   pea 1 <_start+0x1>
    6736:	|        |   move.l d1,-(sp)
    6738:	|        |   clr.l -(sp)
    673a:	|        |   clr.l -(sp)
    673c:	|        |   move.l d0,-(sp)
    673e:	|        |   jsr 7cc8 <startNewFunctionNum>
    6744:	|        |   lea 20(sp),sp
    6748:	|        |   tst.l d0
    674a:	|        +-- bne.s 6752 <handleInput+0x188>
    674c:	|        |   clr.w d0
    674e:	+--------|-- bra.w 6848 <handleInput+0x27e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    6752:	|        '-> move.w 1e7d4 <input+0x8>,d0
    6758:	|        ,-- beq.s 6796 <handleInput+0x1cc>
    675a:	|        |   movea.l 1e180 <currentEvents>,a0
    6760:	|        |   move.l 12(a0),d0
    6764:	|        +-- beq.s 6796 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6766:	|        |   move.l 1e7ea <noStack>,d1
    676c:	|        |   movea.l 1e180 <currentEvents>,a0
    6772:	|        |   move.l 12(a0),d0
    6776:	|        |   pea 1 <_start+0x1>
    677a:	|        |   move.l d1,-(sp)
    677c:	|        |   clr.l -(sp)
    677e:	|        |   clr.l -(sp)
    6780:	|        |   move.l d0,-(sp)
    6782:	|        |   jsr 7cc8 <startNewFunctionNum>
    6788:	|        |   lea 20(sp),sp
    678c:	|        |   tst.l d0
    678e:	|        +-- bne.s 6796 <handleInput+0x1cc>
    6790:	|        |   clr.w d0
    6792:	+--------|-- bra.w 6848 <handleInput+0x27e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction) {
    6796:	|        '-> move.w 1e7cc <input>,d0
    679c:	|        ,-- beq.s 67f4 <handleInput+0x22a>
    679e:	|        |   movea.l 1e180 <currentEvents>,a0
    67a4:	|        |   move.l (a0),d0
    67a6:	|        +-- beq.s 67f4 <handleInput+0x22a>
		int test[1];
		test[0] = currentEvents -> leftMouseFunction;
    67a8:	|        |   movea.l 1e180 <currentEvents>,a0
    67ae:	|        |   move.l (a0),d0
    67b0:	|        |   move.l d0,8(sp)
		KPrintF("handleinput: Onleftmousefunction: %ld will be run\n", test[0]);
    67b4:	|        |   move.l 8(sp),d0
    67b8:	|        |   move.l d0,-(sp)
    67ba:	|        |   pea 19c8a <PutChar+0xce4>
    67c0:	|        |   jsr 18504 <KPrintF>
    67c6:	|        |   addq.l #8,sp
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    67c8:	|        |   move.l 1e7ea <noStack>,d1
    67ce:	|        |   movea.l 1e180 <currentEvents>,a0
    67d4:	|        |   move.l (a0),d0
    67d6:	|        |   pea 1 <_start+0x1>
    67da:	|        |   move.l d1,-(sp)
    67dc:	|        |   clr.l -(sp)
    67de:	|        |   clr.l -(sp)
    67e0:	|        |   move.l d0,-(sp)
    67e2:	|        |   jsr 7cc8 <startNewFunctionNum>
    67e8:	|        |   lea 20(sp),sp
    67ec:	|        |   tst.l d0
    67ee:	|        +-- bne.s 67f4 <handleInput+0x22a>
    67f0:	|        |   clr.w d0
    67f2:	+--------|-- bra.s 6848 <handleInput+0x27e>
	}		
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    67f4:	|        '-> move.w 1e7ce <input+0x2>,d0
    67fa:	|        ,-- beq.s 6836 <handleInput+0x26c>
    67fc:	|        |   movea.l 1e180 <currentEvents>,a0
    6802:	|        |   move.l 8(a0),d0
    6806:	|        +-- beq.s 6836 <handleInput+0x26c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6808:	|        |   move.l 1e7ea <noStack>,d1
    680e:	|        |   movea.l 1e180 <currentEvents>,a0
    6814:	|        |   move.l 8(a0),d0
    6818:	|        |   pea 1 <_start+0x1>
    681c:	|        |   move.l d1,-(sp)
    681e:	|        |   clr.l -(sp)
    6820:	|        |   clr.l -(sp)
    6822:	|        |   move.l d0,-(sp)
    6824:	|        |   jsr 7cc8 <startNewFunctionNum>
    682a:	|        |   lea 20(sp),sp
    682e:	|        |   tst.l d0
    6830:	|        +-- bne.s 6836 <handleInput+0x26c>
    6832:	|        |   clr.w d0
    6834:	+--------|-- bra.s 6848 <handleInput+0x27e>
	}

	lastRegion = overRegion;
    6836:	|        '-> move.l 1e930 <overRegion>,d0
    683c:	|            move.l d0,1e7e2 <lastRegion>
	return runSludge ();
    6842:	|            jsr 798c <runSludge>
}
    6848:	'----------> movea.l (sp)+,a6
    684a:	             lea 20(sp),sp
    684e:	             rts

00006850 <initSludge>:

BOOL initSludge (char * filename) {
    6850:	             lea -292(sp),sp
    6854:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    6858:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    685c:	             jsr b6e2 <makeNullAnim>
    6862:	             move.l d0,1e712 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    6868:	             pea 1e7c4 <gameVersion>
    686e:	             pea 19cbd <PutChar+0xd17>
    6874:	             pea 45 <_start+0x45>
    6878:	             pea 47 <_start+0x47>
    687c:	             move.l 332(sp),-(sp)
    6880:	             jsr 7564 <openAndVerify>
    6886:	             lea 20(sp),sp
    688a:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    688e:	         ,-- bne.s 6896 <initSludge+0x46>
    6890:	         |   clr.w d0
    6892:	,--------|-- bra.w 6fbe <initSludge+0x76e>
	if (FGetC (fp)) {
    6896:	|        '-> move.l 288(sp),284(sp)
    689c:	|            move.l 1e824 <DOSBase>,d0
    68a2:	|            movea.l d0,a6
    68a4:	|            move.l 284(sp),d1
    68a8:	|            jsr -306(a6)
    68ac:	|            move.l d0,280(sp)
    68b0:	|            move.l 280(sp),d0
    68b4:	|  ,-------- beq.w 6a5e <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    68b8:	|  |         move.l 288(sp),-(sp)
    68bc:	|  |         jsr 6bc <get2bytes>
    68c2:	|  |         addq.l #4,sp
    68c4:	|  |         move.l d0,1e7ee <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    68ca:	|  |         move.l 1e7ee <numBIFNames>,d0
    68d0:	|  |         move.l d0,276(sp)
    68d4:	|  |         clr.l 272(sp)
    68d8:	|  |         move.l 1e81c <SysBase>,d0
    68de:	|  |         movea.l d0,a6
    68e0:	|  |         move.l 276(sp),d0
    68e4:	|  |         move.l 272(sp),d1
    68e8:	|  |         jsr -684(a6)
    68ec:	|  |         move.l d0,268(sp)
    68f0:	|  |         move.l 268(sp),d0
    68f4:	|  |         move.l d0,1e79e <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    68fa:	|  |         move.l 1e79e <allBIFNames>,d0
    6900:	|  |     ,-- bne.s 6908 <initSludge+0xb8>
    6902:	|  |     |   clr.w d0
    6904:	+--|-----|-- bra.w 6fbe <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    6908:	|  |     '-> clr.l 304(sp)
    690c:	|  |     ,-- bra.s 6932 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    690e:	|  |  ,--|-> move.l 1e79e <allBIFNames>,d1
    6914:	|  |  |  |   move.l 304(sp),d0
    6918:	|  |  |  |   add.l d0,d0
    691a:	|  |  |  |   add.l d0,d0
    691c:	|  |  |  |   movea.l d1,a2
    691e:	|  |  |  |   adda.l d0,a2
    6920:	|  |  |  |   move.l 288(sp),-(sp)
    6924:	|  |  |  |   jsr b02 <readString>
    692a:	|  |  |  |   addq.l #4,sp
    692c:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    692e:	|  |  |  |   addq.l #1,304(sp)
    6932:	|  |  |  '-> move.l 1e7ee <numBIFNames>,d0
    6938:	|  |  |      cmp.l 304(sp),d0
    693c:	|  |  '----- bgt.s 690e <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    693e:	|  |         move.l 288(sp),-(sp)
    6942:	|  |         jsr 6bc <get2bytes>
    6948:	|  |         addq.l #4,sp
    694a:	|  |         move.l d0,1e7fa <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    6950:	|  |         move.l 1e7fa <numUserFunc>,d0
    6956:	|  |         move.l d0,264(sp)
    695a:	|  |         clr.l 260(sp)
    695e:	|  |         move.l 1e81c <SysBase>,d0
    6964:	|  |         movea.l d0,a6
    6966:	|  |         move.l 264(sp),d0
    696a:	|  |         move.l 260(sp),d1
    696e:	|  |         jsr -684(a6)
    6972:	|  |         move.l d0,256(sp)
    6976:	|  |         move.l 256(sp),d0
    697a:	|  |         move.l d0,1e7b6 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    6980:	|  |         move.l 1e7b6 <allUserFunc>,d0
    6986:	|  |     ,-- bne.s 698e <initSludge+0x13e>
    6988:	|  |     |   clr.w d0
    698a:	+--|-----|-- bra.w 6fbe <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    698e:	|  |     '-> clr.l 300(sp)
    6992:	|  |     ,-- bra.s 69b8 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    6994:	|  |  ,--|-> move.l 1e7b6 <allUserFunc>,d1
    699a:	|  |  |  |   move.l 300(sp),d0
    699e:	|  |  |  |   add.l d0,d0
    69a0:	|  |  |  |   add.l d0,d0
    69a2:	|  |  |  |   movea.l d1,a2
    69a4:	|  |  |  |   adda.l d0,a2
    69a6:	|  |  |  |   move.l 288(sp),-(sp)
    69aa:	|  |  |  |   jsr b02 <readString>
    69b0:	|  |  |  |   addq.l #4,sp
    69b2:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    69b4:	|  |  |  |   addq.l #1,300(sp)
    69b8:	|  |  |  '-> move.l 1e7fa <numUserFunc>,d0
    69be:	|  |  |      cmp.l 300(sp),d0
    69c2:	|  |  '----- bgt.s 6994 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    69c4:	|  |         move.l 1e7c4 <gameVersion>,d0
    69ca:	|  |         cmpi.l #258,d0
    69d0:	|  +-------- ble.w 6a5e <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    69d4:	|  |         move.l 288(sp),-(sp)
    69d8:	|  |         jsr 6bc <get2bytes>
    69de:	|  |         addq.l #4,sp
    69e0:	|  |         move.l d0,1e7f6 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    69e6:	|  |         move.l 1e7f6 <numResourceNames>,d0
    69ec:	|  |         add.l d0,d0
    69ee:	|  |         add.l d0,d0
    69f0:	|  |         move.l d0,252(sp)
    69f4:	|  |         clr.l 248(sp)
    69f8:	|  |         move.l 1e81c <SysBase>,d0
    69fe:	|  |         movea.l d0,a6
    6a00:	|  |         move.l 252(sp),d0
    6a04:	|  |         move.l 248(sp),d1
    6a08:	|  |         jsr -684(a6)
    6a0c:	|  |         move.l d0,244(sp)
    6a10:	|  |         move.l 244(sp),d0
    6a14:	|  |         move.l d0,1e7ae <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    6a1a:	|  |         move.l 1e7ae <allResourceNames>,d0
    6a20:	|  |     ,-- bne.s 6a28 <initSludge+0x1d8>
    6a22:	|  |     |   clr.w d0
    6a24:	+--|-----|-- bra.w 6fbe <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    6a28:	|  |     '-> clr.l 296(sp)
    6a2c:	|  |     ,-- bra.s 6a52 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    6a2e:	|  |  ,--|-> move.l 1e7ae <allResourceNames>,d1
    6a34:	|  |  |  |   move.l 296(sp),d0
    6a38:	|  |  |  |   add.l d0,d0
    6a3a:	|  |  |  |   add.l d0,d0
    6a3c:	|  |  |  |   movea.l d1,a2
    6a3e:	|  |  |  |   adda.l d0,a2
    6a40:	|  |  |  |   move.l 288(sp),-(sp)
    6a44:	|  |  |  |   jsr b02 <readString>
    6a4a:	|  |  |  |   addq.l #4,sp
    6a4c:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    6a4e:	|  |  |  |   addq.l #1,296(sp)
    6a52:	|  |  |  '-> move.l 1e7f6 <numResourceNames>,d0
    6a58:	|  |  |      cmp.l 296(sp),d0
    6a5c:	|  |  '----- bgt.s 6a2e <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    6a5e:	|  '-------> move.l #129,1e7d6 <input+0xa>
	input.mouseY = 100;
    6a68:	|            moveq #100,d0
    6a6a:	|            move.l d0,1e7da <input+0xe>
	winWidth = get2bytes (fp);
    6a70:	|            move.l 288(sp),-(sp)
    6a74:	|            jsr 6bc <get2bytes>
    6a7a:	|            addq.l #4,sp
    6a7c:	|            move.l d0,1e762 <winWidth>
	winHeight = get2bytes (fp);
    6a82:	|            move.l 288(sp),-(sp)
    6a86:	|            jsr 6bc <get2bytes>
    6a8c:	|            addq.l #4,sp
    6a8e:	|            move.l d0,1e766 <winHeight>
	specialSettings = FGetC (fp);
    6a94:	|            move.l 288(sp),240(sp)
    6a9a:	|            move.l 1e824 <DOSBase>,d0
    6aa0:	|            movea.l d0,a6
    6aa2:	|            move.l 240(sp),d1
    6aa6:	|            jsr -306(a6)
    6aaa:	|            move.l d0,236(sp)
    6aae:	|            move.l 236(sp),d0
    6ab2:	|            move.l d0,1e7fe <specialSettings>

	desiredfps = 1000/FGetC (fp);
    6ab8:	|            move.l 288(sp),232(sp)
    6abe:	|            move.l 1e824 <DOSBase>,d0
    6ac4:	|            movea.l d0,a6
    6ac6:	|            move.l 232(sp),d1
    6aca:	|            jsr -306(a6)
    6ace:	|            move.l d0,228(sp)
    6ad2:	|            move.l 228(sp),d0
    6ad6:	|            move.l d0,-(sp)
    6ad8:	|            pea 3e8 <encodeFilename+0xea>
    6adc:	|            jsr 18f0e <__divsi3>
    6ae2:	|            addq.l #8,sp
    6ae4:	|            move.l d0,1e192 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    6aea:	|            move.l 288(sp),-(sp)
    6aee:	|            jsr b02 <readString>
    6af4:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    6af6:	|            move.l 288(sp),224(sp)
    6afc:	|            move.l #124860,220(sp)
    6b04:	|            moveq #8,d1
    6b06:	|            move.l d1,216(sp)
    6b0a:	|            moveq #1,d0
    6b0c:	|            move.l d0,212(sp)
    6b10:	|            move.l 1e824 <DOSBase>,d0
    6b16:	|            movea.l d0,a6
    6b18:	|            move.l 224(sp),d1
    6b1c:	|            move.l 220(sp),d2
    6b20:	|            move.l 216(sp),d3
    6b24:	|            move.l 212(sp),d4
    6b28:	|            jsr -324(a6)
    6b2c:	|            move.l d0,208(sp)
    6b30:	|            move.l 208(sp),d0
    6b34:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    6b38:	|            moveq #1,d1
    6b3a:	|            cmp.l 204(sp),d1
    6b3e:	|        ,-- beq.s 6b4e <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    6b40:	|        |   pea 19cf6 <PutChar+0xd50>
    6b46:	|        |   jsr 18504 <KPrintF>
    6b4c:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    6b4e:	|        '-> move.l 1e7c4 <gameVersion>,d0
    6b54:	|            cmpi.l #258,d0
    6b5a:	|        ,-- ble.s 6b6a <initSludge+0x31a>
    6b5c:	|        |   move.l 288(sp),-(sp)
    6b60:	|        |   jsr b02 <readString>
    6b66:	|        |   addq.l #4,sp
    6b68:	|     ,--|-- bra.s 6b7e <initSludge+0x32e>
    6b6a:	|     |  '-> pea 19d14 <PutChar+0xd6e>
    6b70:	|     |      pea 19d14 <PutChar+0xd6e>
    6b76:	|     |      jsr 14f50 <joinStrings>
    6b7c:	|     |      addq.l #8,sp
    6b7e:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    6b82:	|            move.l 1e7c4 <gameVersion>,d0
    6b88:	|            cmpi.l #258,d0
    6b8e:	|     ,----- ble.s 6bb0 <initSludge+0x360>
    6b90:	|     |      move.l 288(sp),196(sp)
    6b96:	|     |      move.l 1e824 <DOSBase>,d0
    6b9c:	|     |      movea.l d0,a6
    6b9e:	|     |      move.l 196(sp),d1
    6ba2:	|     |      jsr -306(a6)
    6ba6:	|     |      move.l d0,192(sp)
    6baa:	|     |      move.l 192(sp),d0
    6bae:	|     |  ,-- bra.s 6bb2 <initSludge+0x362>
    6bb0:	|     '--|-> moveq #0,d0
    6bb2:	|        '-> move.l d0,1e8fc <gameSettings+0x4>
	makeLanguageTable (fp);
    6bb8:	|            move.l 288(sp),-(sp)
    6bbc:	|            jsr 148f0 <makeLanguageTable>
    6bc2:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    6bc4:	|            move.l 1e7c4 <gameVersion>,d0
    6bca:	|            cmpi.l #261,d0
    6bd0:	|        ,-- ble.s 6c1e <initSludge+0x3ce>
	{
		FGetC(fp);
    6bd2:	|        |   move.l 288(sp),188(sp)
    6bd8:	|        |   move.l 1e824 <DOSBase>,d0
    6bde:	|        |   movea.l d0,a6
    6be0:	|        |   move.l 188(sp),d1
    6be4:	|        |   jsr -306(a6)
    6be8:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    6bec:	|        |   move.l 288(sp),180(sp)
    6bf2:	|        |   move.l 1e824 <DOSBase>,d0
    6bf8:	|        |   movea.l d0,a6
    6bfa:	|        |   move.l 180(sp),d1
    6bfe:	|        |   jsr -306(a6)
    6c02:	|        |   move.l d0,176(sp)
		getFloat (fp);
    6c06:	|        |   move.l 288(sp),-(sp)
    6c0a:	|        |   jsr 7d8 <getFloat>
    6c10:	|        |   addq.l #4,sp
		getFloat (fp);
    6c12:	|        |   move.l 288(sp),-(sp)
    6c16:	|        |   jsr 7d8 <getFloat>
    6c1c:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    6c1e:	|        '-> move.l 288(sp),-(sp)
    6c22:	|            jsr b02 <readString>
    6c28:	|            addq.l #4,sp
    6c2a:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    6c2e:	|            pea 19d15 <PutChar+0xd6f>
    6c34:	|            move.l 176(sp),-(sp)
    6c38:	|            jsr 14ed0 <strcmp>
    6c3e:	|            addq.l #8,sp
    6c40:	|            tst.l d0
    6c42:	|        ,-- beq.s 6c4a <initSludge+0x3fa>
		return FALSE;
    6c44:	|        |   clr.w d0
    6c46:	+--------|-- bra.w 6fbe <initSludge+0x76e>
	}
	FreeVec( checker);
    6c4a:	|        '-> move.l 172(sp),168(sp)
    6c50:	|            move.l 1e81c <SysBase>,d0
    6c56:	|            movea.l d0,a6
    6c58:	|            movea.l 168(sp),a1
    6c5c:	|            jsr -690(a6)
	checker = NULL;
    6c60:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    6c64:	|            move.l 288(sp),164(sp)
    6c6a:	|            move.l 1e824 <DOSBase>,d0
    6c70:	|            movea.l d0,a6
    6c72:	|            move.l 164(sp),d1
    6c76:	|            jsr -306(a6)
    6c7a:	|            move.l d0,160(sp)
    6c7e:	|            move.l 160(sp),d0
    6c82:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    6c86:	|            moveq #0,d0
    6c88:	|            move.b 159(sp),d0
    6c8c:	|            moveq #1,d1
    6c8e:	|            and.l d1,d0
    6c90:	|        ,-- beq.s 6ce8 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    6c92:	|        |   move.l 1e824 <DOSBase>,d0
    6c98:	|        |   movea.l d0,a6
    6c9a:	|        |   jsr -60(a6)
    6c9e:	|        |   move.l d0,38(sp)
    6ca2:	|        |   move.l 38(sp),d0
    6ca6:	|        |   move.l d0,34(sp)
    6caa:	|        |   move.l #105757,30(sp)
    6cb2:	|        |   moveq #54,d0
    6cb4:	|        |   move.l d0,26(sp)
    6cb8:	|        |   move.l 1e824 <DOSBase>,d0
    6cbe:	|        |   movea.l d0,a6
    6cc0:	|        |   move.l 34(sp),d1
    6cc4:	|        |   move.l 30(sp),d2
    6cc8:	|        |   move.l 26(sp),d3
    6ccc:	|        |   jsr -48(a6)
    6cd0:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    6cd4:	|        |   pea 19d54 <PutChar+0xdae>
    6cda:	|        |   jsr 18504 <KPrintF>
    6ce0:	|        |   addq.l #4,sp
		return FALSE;
    6ce2:	|        |   clr.w d0
    6ce4:	+--------|-- bra.w 6fbe <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    6ce8:	|        '-> move.l 288(sp),-(sp)
    6cec:	|            jsr 6bc <get2bytes>
    6cf2:	|            addq.l #4,sp
    6cf4:	|            move.l d0,1e7f2 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    6cfa:	|            move.l 1e7f2 <numGlobals>,d0
    6d00:	|            lsl.l #3,d0
    6d02:	|            move.l d0,154(sp)
    6d06:	|            clr.l 150(sp)
    6d0a:	|            move.l 1e81c <SysBase>,d0
    6d10:	|            movea.l d0,a6
    6d12:	|            move.l 154(sp),d0
    6d16:	|            move.l 150(sp),d1
    6d1a:	|            jsr -684(a6)
    6d1e:	|            move.l d0,146(sp)
    6d22:	|            move.l 146(sp),d0
    6d26:	|            move.l d0,1e7c8 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    6d2c:	|            move.l 1e7c8 <globalVars>,d0
    6d32:	|        ,-- bne.s 6d50 <initSludge+0x500>
    6d34:	|        |   move.l 1e7f2 <numGlobals>,d0
    6d3a:	|        +-- ble.s 6d50 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    6d3c:	|        |   pea 19d8c <PutChar+0xde6>
    6d42:	|        |   jsr 18504 <KPrintF>
    6d48:	|        |   addq.l #4,sp
		return FALSE;
    6d4a:	|        |   clr.w d0
    6d4c:	+--------|-- bra.w 6fbe <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    6d50:	|        '-> clr.l 308(sp)
    6d54:	|        ,-- bra.s 6d6c <initSludge+0x51c>
    6d56:	|     ,--|-> move.l 1e7c8 <globalVars>,d1
    6d5c:	|     |  |   move.l 308(sp),d0
    6d60:	|     |  |   lsl.l #3,d0
    6d62:	|     |  |   movea.l d1,a0
    6d64:	|     |  |   adda.l d0,a0
    6d66:	|     |  |   clr.l (a0)
    6d68:	|     |  |   addq.l #1,308(sp)
    6d6c:	|     |  '-> move.l 1e7f2 <numGlobals>,d0
    6d72:	|     |      cmp.l 308(sp),d0
    6d76:	|     '----- bgt.s 6d56 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6d78:	|            move.l 1e8fc <gameSettings+0x4>,d0
    6d7e:	|            clr.l -(sp)
    6d80:	|            move.l d0,-(sp)
    6d82:	|            move.l 296(sp),-(sp)
    6d86:	|            jsr 8140 <setFileIndices>
    6d8c:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    6d90:	|            pea 1 <_start+0x1>
    6d94:	|            jsr 7dfa <getNumberedString>
    6d9a:	|            addq.l #4,sp
    6d9c:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6da0:	|            move.l 142(sp),-(sp)
    6da4:	|            jsr 2fe <encodeFilename>
    6daa:	|            addq.l #4,sp
    6dac:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    6db0:	|            move.l 142(sp),134(sp)
    6db6:	|            move.l 1e81c <SysBase>,d0
    6dbc:	|            movea.l d0,a6
    6dbe:	|            movea.l 134(sp),a1
    6dc2:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6dc6:	|            move.l 138(sp),130(sp)
    6dcc:	|            move.l 1e824 <DOSBase>,d0
    6dd2:	|            movea.l d0,a6
    6dd4:	|            move.l 130(sp),d1
    6dd8:	|            jsr -120(a6)
    6ddc:	|            move.l d0,126(sp)
    6de0:	|            move.l 126(sp),d0
    6de4:	|            move.l d0,292(sp)
	if(lock == 0) {
    6de8:	|        ,-- bne.s 6e16 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6dea:	|        |   move.l 138(sp),122(sp)
    6df0:	|        |   moveq #-2,d1
    6df2:	|        |   move.l d1,118(sp)
    6df6:	|        |   move.l 1e824 <DOSBase>,d0
    6dfc:	|        |   movea.l d0,a6
    6dfe:	|        |   move.l 122(sp),d1
    6e02:	|        |   move.l 118(sp),d2
    6e06:	|        |   jsr -84(a6)
    6e0a:	|        |   move.l d0,114(sp)
    6e0e:	|        |   move.l 114(sp),d0
    6e12:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6e16:	|        '-> move.l 292(sp),110(sp)
    6e1c:	|            move.l 1e824 <DOSBase>,d0
    6e22:	|            movea.l d0,a6
    6e24:	|            move.l 110(sp),d1
    6e28:	|            jsr -126(a6)
    6e2c:	|            move.l d0,106(sp)
    6e30:	|            move.l 106(sp),d0
    6e34:	|        ,-- bne.s 6e90 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6e36:	|        |   move.l 138(sp),-(sp)
    6e3a:	|        |   pea 19dbf <PutChar+0xe19>
    6e40:	|        |   jsr 18504 <KPrintF>
    6e46:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6e48:	|        |   move.l 1e824 <DOSBase>,d0
    6e4e:	|        |   movea.l d0,a6
    6e50:	|        |   jsr -60(a6)
    6e54:	|        |   move.l d0,58(sp)
    6e58:	|        |   move.l 58(sp),d0
    6e5c:	|        |   move.l d0,54(sp)
    6e60:	|        |   move.l #105964,50(sp)
    6e68:	|        |   moveq #40,d0
    6e6a:	|        |   move.l d0,46(sp)
    6e6e:	|        |   move.l 1e824 <DOSBase>,d0
    6e74:	|        |   movea.l d0,a6
    6e76:	|        |   move.l 54(sp),d1
    6e7a:	|        |   move.l 50(sp),d2
    6e7e:	|        |   move.l 46(sp),d3
    6e82:	|        |   jsr -48(a6)
    6e86:	|        |   move.l d0,42(sp)
		return FALSE;
    6e8a:	|        |   clr.w d0
    6e8c:	+--------|-- bra.w 6fbe <initSludge+0x76e>
	}

	FreeVec(gameName);
    6e90:	|        '-> move.l 138(sp),102(sp)
    6e96:	|            move.l 1e81c <SysBase>,d0
    6e9c:	|            movea.l d0,a6
    6e9e:	|            movea.l 102(sp),a1
    6ea2:	|            jsr -690(a6)

	readIniFile (filename);
    6ea6:	|            move.l 316(sp),-(sp)
    6eaa:	|            jsr 14a24 <readIniFile>
    6eb0:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6eb2:	|            jsr 147f6 <getLanguageForFileB>
    6eb8:	|            move.l d0,1e184 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    6ebe:	|            move.l 1e184 <languageNum>,d0
    6ec4:	|        ,-- bpl.s 6ed4 <initSludge+0x684>
    6ec6:	|        |   pea 19e15 <PutChar+0xe6f>
    6ecc:	|        |   jsr 18504 <KPrintF>
    6ed2:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6ed4:	|        '-> move.l 1e184 <languageNum>,d0
    6eda:	|            move.l d0,d1
    6edc:	|            move.l 1e8fc <gameSettings+0x4>,d0
    6ee2:	|            move.l d1,-(sp)
    6ee4:	|            move.l d0,-(sp)
    6ee6:	|            clr.l -(sp)
    6ee8:	|            jsr 8140 <setFileIndices>
    6eee:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6ef2:	|            movea.l 200(sp),a0
    6ef6:	|            move.b (a0),d0
    6ef8:	|     ,----- beq.w 6fa2 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6efc:	|     |      move.l 200(sp),-(sp)
    6f00:	|     |      jsr 2fe <encodeFilename>
    6f06:	|     |      addq.l #4,sp
    6f08:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6f0c:	|     |      move.l 98(sp),94(sp)
    6f12:	|     |      move.l 1e824 <DOSBase>,d0
    6f18:	|     |      movea.l d0,a6
    6f1a:	|     |      move.l 94(sp),d1
    6f1e:	|     |      jsr -120(a6)
    6f22:	|     |      move.l d0,90(sp)
    6f26:	|     |      move.l 90(sp),d0
    6f2a:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6f2e:	|     |  ,-- bne.s 6f5c <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6f30:	|     |  |   move.l 98(sp),86(sp)
    6f36:	|     |  |   moveq #-2,d1
    6f38:	|     |  |   move.l d1,82(sp)
    6f3c:	|     |  |   move.l 1e824 <DOSBase>,d0
    6f42:	|     |  |   movea.l d0,a6
    6f44:	|     |  |   move.l 86(sp),d1
    6f48:	|     |  |   move.l 82(sp),d2
    6f4c:	|     |  |   jsr -84(a6)
    6f50:	|     |  |   move.l d0,78(sp)
    6f54:	|     |  |   move.l 78(sp),d0
    6f58:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6f5c:	|     |  '-> move.l 292(sp),74(sp)
    6f62:	|     |      move.l 1e824 <DOSBase>,d0
    6f68:	|     |      movea.l d0,a6
    6f6a:	|     |      move.l 74(sp),d1
    6f6e:	|     |      jsr -126(a6)
    6f72:	|     |      move.l d0,70(sp)
    6f76:	|     |      move.l 70(sp),d0
    6f7a:	|     |  ,-- bne.s 6f8c <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6f7c:	|     |  |   move.l 1e824 <DOSBase>,d0
    6f82:	|     |  |   movea.l d0,a6
    6f84:	|     |  |   jsr -60(a6)
    6f88:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6f8c:	|     |  '-> move.l 98(sp),62(sp)
    6f92:	|     |      move.l 1e81c <SysBase>,d0
    6f98:	|     |      movea.l d0,a6
    6f9a:	|     |      movea.l 62(sp),a1
    6f9e:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6fa2:	|     '----> movea.l 1e766 <winHeight>,a0
    6fa8:	|            lea -15(a0),a0
    6fac:	|            move.l a0,d0
    6fae:	|            move.l d0,-(sp)
    6fb0:	|            pea a <_start+0xa>
    6fb4:	|            jsr 8c66 <positionStatus>
    6fba:	|            addq.l #8,sp

	return TRUE;
    6fbc:	|            moveq #1,d0
}
    6fbe:	'----------> movem.l (sp)+,d2-d4/a2/a6
    6fc2:	             lea 292(sp),sp
    6fc6:	             rts

00006fc8 <killSpeechTimers>:

void killSpeechTimers () {
    6fc8:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6fca:	          move.l 1e7b2 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6fd0:	   ,----- bra.s 6ffc <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6fd2:	,--|----> movea.l (sp),a0
    6fd4:	|  |      move.b 56(a0),d0
    6fd8:	|  |  ,-- bne.s 6ff6 <killSpeechTimers+0x2e>
    6fda:	|  |  |   movea.l (sp),a0
    6fdc:	|  |  |   move.w 50(a0),d0
    6fe0:	|  |  +-- beq.s 6ff6 <killSpeechTimers+0x2e>
    6fe2:	|  |  |   movea.l (sp),a0
    6fe4:	|  |  |   move.l 12(a0),d0
    6fe8:	|  |  +-- beq.s 6ff6 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6fea:	|  |  |   movea.l (sp),a0
    6fec:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6ff0:	|  |  |   movea.l (sp),a0
    6ff2:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6ff6:	|  |  '-> movea.l (sp),a0
    6ff8:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6ffc:	|  '----> tst.l (sp)
    6ffe:	'-------- bne.s 6fd2 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    7000:	          jsr 44c0 <killAllSpeech>
}
    7006:	          nop
    7008:	          addq.l #4,sp
    700a:	          rts

0000700c <loadFunctionCode>:

struct loadedFunction *loadFunctionCode (unsigned int originalNumber) {
    700c:	                         lea -104(sp),sp
    7010:	                         move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	struct loadedFunction * newFunc = NULL;
    7012:	                         clr.l 100(sp)
	int a;

#ifndef DISABLEFUNCTIONCACHE
	struct cachedFunction * current = allCachedFunctions;
    7016:	                         move.l 1e7a2 <allCachedFunctions>,92(sp)
	while( current) {
    701e:	               ,-------- bra.s 7066 <loadFunctionCode+0x5a>
		if (current->theFunction->originalNumber == originalNumber)
    7020:	            ,--|-------> movea.l 92(sp),a0
    7024:	            |  |         movea.l 4(a0),a0
    7028:	            |  |         move.l (a0),d0
    702a:	            |  |         cmp.l 112(sp),d0
    702e:	            |  |  ,----- bne.s 705c <loadFunctionCode+0x50>
		{
			if( current->theFunction->unloaded == 1)
    7030:	            |  |  |      movea.l 92(sp),a0
    7034:	            |  |  |      movea.l 4(a0),a0
    7038:	            |  |  |      move.l 58(a0),d0
    703c:	            |  |  |      moveq #1,d1
    703e:	            |  |  |      cmp.l d0,d1
    7040:	            |  |  +----- bne.s 705c <loadFunctionCode+0x50>
			{ 
				newFunc = current->theFunction;	
    7042:	            |  |  |      movea.l 92(sp),a0
    7046:	            |  |  |      move.l 4(a0),100(sp)
				KPrintF("loadFunctionCode: Found in Cache\n");
    704c:	            |  |  |      pea 19e40 <PutChar+0xe9a>
    7052:	            |  |  |      jsr 18504 <KPrintF>
    7058:	            |  |  |      addq.l #4,sp
				break;
    705a:	            |  |  |  ,-- bra.s 706c <loadFunctionCode+0x60>
			}									
		}
		current = current->next;
    705c:	            |  |  '--|-> movea.l 92(sp),a0
    7060:	            |  |     |   move.l 8(a0),92(sp)
	while( current) {
    7066:	            |  '-----|-> tst.l 92(sp)
    706a:	            '--------|-- bne.s 7020 <loadFunctionCode+0x14>
	}			

	if( !newFunc)
    706c:	                     '-> tst.l 100(sp)
    7070:	               ,-------- bne.w 72c8 <loadFunctionCode+0x2bc>
	{		
		KPrintF("loadFunctionCode: Function not in cache. Loading new function\n");
    7074:	               |         pea 19e62 <PutChar+0xebc>
    707a:	               |         jsr 18504 <KPrintF>
    7080:	               |         addq.l #4,sp
		numCachedFunctions++;
    7082:	               |         move.l 1e7aa <numCachedFunctions>,d0
    7088:	               |         addq.l #1,d0
    708a:	               |         move.l d0,1e7aa <numCachedFunctions>
#endif		
		newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    7090:	               |         moveq #62,d0
    7092:	               |         move.l d0,84(sp)
    7096:	               |         clr.l 80(sp)
    709a:	               |         move.l 1e81c <SysBase>,d0
    70a0:	               |         movea.l d0,a6
    70a2:	               |         move.l 84(sp),d0
    70a6:	               |         move.l 80(sp),d1
    70aa:	               |         jsr -684(a6)
    70ae:	               |         move.l d0,76(sp)
    70b2:	               |         move.l 76(sp),d0
    70b6:	               |         move.l d0,100(sp)
	
		if(!newFunc) {
    70ba:	               |     ,-- bne.s 70d0 <loadFunctionCode+0xc4>
			KPrintF("loadFunctionCode: Cannot allocate memory");
    70bc:	               |     |   pea 19ea1 <PutChar+0xefb>
    70c2:	               |     |   jsr 18504 <KPrintF>
    70c8:	               |     |   addq.l #4,sp
			return 0;
    70ca:	               |     |   moveq #0,d0
    70cc:	,--------------|-----|-- bra.w 74bc <loadFunctionCode+0x4b0>
		}

		newFunc -> originalNumber = originalNumber;
    70d0:	|              |     '-> move.l 112(sp),d0
    70d4:	|              |         movea.l 100(sp),a0
    70d8:	|              |         move.l d0,(a0)

		if (! openSubSlice (originalNumber)) return FALSE;
    70da:	|              |         move.l 112(sp),d0
    70de:	|              |         move.l d0,-(sp)
    70e0:	|              |         jsr 8080 <openSubSlice>
    70e6:	|              |         addq.l #4,sp
    70e8:	|              |         tst.w d0
    70ea:	|              |     ,-- bne.s 70f2 <loadFunctionCode+0xe6>
    70ec:	|              |     |   moveq #0,d0
    70ee:	+--------------|-----|-- bra.w 74bc <loadFunctionCode+0x4b0>
		

		newFunc-> unfreezable	= FGetC (bigDataFile);
    70f2:	|              |     '-> move.l 1e802 <bigDataFile>,72(sp)
    70fa:	|              |         move.l 1e824 <DOSBase>,d0
    7100:	|              |         movea.l d0,a6
    7102:	|              |         move.l 72(sp),d1
    7106:	|              |         jsr -306(a6)
    710a:	|              |         move.l d0,68(sp)
    710e:	|              |         move.l 68(sp),d0
    7112:	|              |         move.l d0,d0
    7114:	|              |         movea.l 100(sp),a0
    7118:	|              |         move.w d0,52(a0)
		numLines				= get2bytes (bigDataFile);
    711c:	|              |         move.l 1e802 <bigDataFile>,d0
    7122:	|              |         move.l d0,-(sp)
    7124:	|              |         jsr 6bc <get2bytes>
    712a:	|              |         addq.l #4,sp
    712c:	|              |         move.l d0,64(sp)
		newFunc -> numArgs		= get2bytes (bigDataFile);
    7130:	|              |         move.l 1e802 <bigDataFile>,d0
    7136:	|              |         move.l d0,-(sp)
    7138:	|              |         jsr 6bc <get2bytes>
    713e:	|              |         addq.l #4,sp
    7140:	|              |         movea.l 100(sp),a0
    7144:	|              |         move.l d0,16(a0)
		newFunc -> numLocals	= get2bytes (bigDataFile);	
    7148:	|              |         move.l 1e802 <bigDataFile>,d0
    714e:	|              |         move.l d0,-(sp)
    7150:	|              |         jsr 6bc <get2bytes>
    7156:	|              |         addq.l #4,sp
    7158:	|              |         movea.l 100(sp),a0
    715c:	|              |         move.l d0,8(a0)

		newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    7160:	|              |         move.l 64(sp),d0
    7164:	|              |         lsl.l #3,d0
    7166:	|              |         move.l d0,60(sp)
    716a:	|              |         clr.l 56(sp)
    716e:	|              |         move.l 1e81c <SysBase>,d0
    7174:	|              |         movea.l d0,a6
    7176:	|              |         move.l 60(sp),d0
    717a:	|              |         move.l 56(sp),d1
    717e:	|              |         jsr -684(a6)
    7182:	|              |         move.l d0,52(sp)
    7186:	|              |         move.l 52(sp),d0
    718a:	|              |         movea.l 100(sp),a0
    718e:	|              |         move.l d0,4(a0)
		if (! newFunc -> compiledLines) {
    7192:	|              |         movea.l 100(sp),a0
    7196:	|              |         move.l 4(a0),d0
    719a:	|              |     ,-- bne.s 71b0 <loadFunctionCode+0x1a4>
			KPrintF("loadFunctionCode: cannot allocate memory");
    719c:	|              |     |   pea 19eca <PutChar+0xf24>
    71a2:	|              |     |   jsr 18504 <KPrintF>
    71a8:	|              |     |   addq.l #4,sp
			return FALSE;
    71aa:	|              |     |   moveq #0,d0
    71ac:	+--------------|-----|-- bra.w 74bc <loadFunctionCode+0x4b0>
		}
		
		for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    71b0:	|              |     '-> clr.l 104(sp)
    71b4:	|              |     ,-- bra.s 7216 <loadFunctionCode+0x20a>
			newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    71b6:	|              |  ,--|-> move.l 1e802 <bigDataFile>,32(sp)
    71be:	|              |  |  |   move.l 1e824 <DOSBase>,d0
    71c4:	|              |  |  |   movea.l d0,a6
    71c6:	|              |  |  |   move.l 32(sp),d1
    71ca:	|              |  |  |   jsr -306(a6)
    71ce:	|              |  |  |   move.l d0,28(sp)
    71d2:	|              |  |  |   move.l 28(sp),d1
    71d6:	|              |  |  |   movea.l 100(sp),a0
    71da:	|              |  |  |   movea.l 4(a0),a0
    71de:	|              |  |  |   move.l 104(sp),d0
    71e2:	|              |  |  |   lsl.l #3,d0
    71e4:	|              |  |  |   adda.l d0,a0
    71e6:	|              |  |  |   move.l d1,d0
    71e8:	|              |  |  |   move.l d0,(a0)
			newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    71ea:	|              |  |  |   move.l 1e802 <bigDataFile>,d0
    71f0:	|              |  |  |   move.l d0,-(sp)
    71f2:	|              |  |  |   jsr 6bc <get2bytes>
    71f8:	|              |  |  |   addq.l #4,sp
    71fa:	|              |  |  |   move.l d0,d1
    71fc:	|              |  |  |   movea.l 100(sp),a0
    7200:	|              |  |  |   movea.l 4(a0),a0
    7204:	|              |  |  |   move.l 104(sp),d0
    7208:	|              |  |  |   lsl.l #3,d0
    720a:	|              |  |  |   adda.l d0,a0
    720c:	|              |  |  |   move.l d1,d0
    720e:	|              |  |  |   move.l d0,4(a0)
		for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    7212:	|              |  |  |   addq.l #1,104(sp)
    7216:	|              |  |  '-> move.l 104(sp),d1
    721a:	|              |  |      cmp.l 64(sp),d1
    721e:	|              |  '----- bcs.s 71b6 <loadFunctionCode+0x1aa>
		}
		finishAccess ();
    7220:	|              |         jsr 7df0 <finishAccess>

#ifndef DISABLEFUNCTIONCACHE		
		struct cachedFunction  *next = allCachedFunctions;
    7226:	|              |         move.l 1e7a2 <allCachedFunctions>,48(sp)
		allCachedFunctions = AllocVec(sizeof(struct cachedFunction),MEMF_ANY);
    722e:	|              |         moveq #16,d0
    7230:	|              |         move.l d0,44(sp)
    7234:	|              |         clr.l 40(sp)
    7238:	|              |         move.l 1e81c <SysBase>,d0
    723e:	|              |         movea.l d0,a6
    7240:	|              |         move.l 44(sp),d0
    7244:	|              |         move.l 40(sp),d1
    7248:	|              |         jsr -684(a6)
    724c:	|              |         move.l d0,36(sp)
    7250:	|              |         move.l 36(sp),d0
    7254:	|              |         move.l d0,1e7a2 <allCachedFunctions>
		allCachedFunctions -> prev = NULL;
    725a:	|              |         movea.l 1e7a2 <allCachedFunctions>,a0
    7260:	|              |         clr.l 12(a0)
		if (! allCachedFunctions) {
    7264:	|              |         move.l 1e7a2 <allCachedFunctions>,d0
    726a:	|              |     ,-- bne.s 7280 <loadFunctionCode+0x274>
			KPrintF("loadFunctionCode: cannot allocate memory for cached function");
    726c:	|              |     |   pea 19ef3 <PutChar+0xf4d>
    7272:	|              |     |   jsr 18504 <KPrintF>
    7278:	|              |     |   addq.l #4,sp
			return NULL;
    727a:	|              |     |   moveq #0,d0
    727c:	+--------------|-----|-- bra.w 74bc <loadFunctionCode+0x4b0>
		}
		if( !next) {
    7280:	|              |     '-> tst.l 48(sp)
    7284:	|              |     ,-- bne.s 7292 <loadFunctionCode+0x286>
			lastCachedFunction = allCachedFunctions;
    7286:	|              |     |   move.l 1e7a2 <allCachedFunctions>,d0
    728c:	|              |     |   move.l d0,1e7a6 <lastCachedFunction>
		} 	

		if(next) next->prev = allCachedFunctions;
    7292:	|              |     '-> tst.l 48(sp)
    7296:	|              |     ,-- beq.s 72a6 <loadFunctionCode+0x29a>
    7298:	|              |     |   move.l 1e7a2 <allCachedFunctions>,d0
    729e:	|              |     |   movea.l 48(sp),a0
    72a2:	|              |     |   move.l d0,12(a0)
		
		allCachedFunctions->next = next;
    72a6:	|              |     '-> movea.l 1e7a2 <allCachedFunctions>,a0
    72ac:	|              |         move.l 48(sp),8(a0)
		allCachedFunctions->theFunction = newFunc;
    72b2:	|              |         movea.l 1e7a2 <allCachedFunctions>,a0
    72b8:	|              |         move.l 100(sp),4(a0)
		allCachedFunctions->funcNum = originalNumber;
    72be:	|              |         movea.l 1e7a2 <allCachedFunctions>,a0
    72c4:	|              |         move.l 112(sp),(a0)

	}	

	newFunc -> unloaded = 0;	
    72c8:	|              '-------> movea.l 100(sp),a0
    72cc:	|                        clr.l 58(a0)
#endif
	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    72d0:	|                        movea.l 100(sp),a0
    72d4:	|                        move.l 8(a0),d0
    72d8:	|              ,-------- ble.w 735e <loadFunctionCode+0x352>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    72dc:	|              |         movea.l 100(sp),a0
    72e0:	|              |         move.l 8(a0),d0
    72e4:	|              |         lsl.l #3,d0
    72e6:	|              |         move.l d0,24(sp)
    72ea:	|              |         clr.l 20(sp)
    72ee:	|              |         move.l 1e81c <SysBase>,d0
    72f4:	|              |         movea.l d0,a6
    72f6:	|              |         move.l 24(sp),d0
    72fa:	|              |         move.l 20(sp),d1
    72fe:	|              |         jsr -684(a6)
    7302:	|              |         move.l d0,16(sp)
    7306:	|              |         move.l 16(sp),d0
    730a:	|              |         movea.l 100(sp),a0
    730e:	|              |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    7312:	|              |         movea.l 100(sp),a0
    7316:	|              |         move.l 20(a0),d0
    731a:	|              |     ,-- bne.s 7330 <loadFunctionCode+0x324>
			KPrintF("loadFunctionCode: cannot allocate memory");
    731c:	|              |     |   pea 19eca <PutChar+0xf24>
    7322:	|              |     |   jsr 18504 <KPrintF>
    7328:	|              |     |   addq.l #4,sp
			return FALSE;
    732a:	|              |     |   moveq #0,d0
    732c:	+--------------|-----|-- bra.w 74bc <loadFunctionCode+0x4b0>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    7330:	|              |     '-> clr.l 96(sp)
    7334:	|              |     ,-- bra.s 734e <loadFunctionCode+0x342>
			initVarNew (newFunc -> localVars[a]);
    7336:	|              |  ,--|-> movea.l 100(sp),a0
    733a:	|              |  |  |   move.l 20(a0),d1
    733e:	|              |  |  |   move.l 96(sp),d0
    7342:	|              |  |  |   lsl.l #3,d0
    7344:	|              |  |  |   movea.l d1,a0
    7346:	|              |  |  |   adda.l d0,a0
    7348:	|              |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    734a:	|              |  |  |   addq.l #1,96(sp)
    734e:	|              |  |  '-> movea.l 100(sp),a0
    7352:	|              |  |      move.l 8(a0),d0
    7356:	|              |  |      cmp.l 96(sp),d0
    735a:	|              |  '----- bgt.s 7336 <loadFunctionCode+0x32a>
    735c:	|              |     ,-- bra.s 7366 <loadFunctionCode+0x35a>
		}
	} else
	{
		newFunc->numLocals = NULL;
    735e:	|              '-----|-> movea.l 100(sp),a0
    7362:	|                    |   clr.l 8(a0)
	}	

#ifndef DISABLEFUNCTIONCACHE
	if( numCachedFunctions >= CACHEFUNCTIONMAX) 
    7366:	|                    '-> move.l 1e7aa <numCachedFunctions>,d0
    736c:	|                        moveq #9,d1
    736e:	|                        cmp.l d0,d1
    7370:	|  ,-------------------- bge.w 74b8 <loadFunctionCode+0x4ac>
	{
		struct cachedFunction *huntanddestroy = lastCachedFunction;
    7374:	|  |                     move.l 1e7a6 <lastCachedFunction>,88(sp)
		while (huntanddestroy) 
    737c:	|  |     ,-------------- bra.w 743a <loadFunctionCode+0x42e>
		{
			if (huntanddestroy->theFunction->unloaded == 1) 
    7380:	|  |  ,--|-------------> movea.l 88(sp),a0
    7384:	|  |  |  |               movea.l 4(a0),a0
    7388:	|  |  |  |               move.l 58(a0),d0
    738c:	|  |  |  |               moveq #1,d1
    738e:	|  |  |  |               cmp.l d0,d1
    7390:	|  |  |  |  ,----------- bne.w 7430 <loadFunctionCode+0x424>
			{
				if( huntanddestroy->prev)
    7394:	|  |  |  |  |            movea.l 88(sp),a0
    7398:	|  |  |  |  |            move.l 12(a0),d0
    739c:	|  |  |  |  |        ,-- beq.s 73b4 <loadFunctionCode+0x3a8>
					huntanddestroy->prev->next = huntanddestroy->next;							
    739e:	|  |  |  |  |        |   movea.l 88(sp),a0
    73a2:	|  |  |  |  |        |   movea.l 12(a0),a0
    73a6:	|  |  |  |  |        |   movea.l 88(sp),a1
    73aa:	|  |  |  |  |        |   move.l 8(a1),d0
    73ae:	|  |  |  |  |        |   move.l d0,8(a0)
    73b2:	|  |  |  |  |     ,--|-- bra.s 73d4 <loadFunctionCode+0x3c8>
				else
				{
					allCachedFunctions = huntanddestroy->next;
    73b4:	|  |  |  |  |     |  '-> movea.l 88(sp),a0
    73b8:	|  |  |  |  |     |      move.l 8(a0),d0
    73bc:	|  |  |  |  |     |      move.l d0,1e7a2 <allCachedFunctions>
					if( allCachedFunctions)
    73c2:	|  |  |  |  |     |      move.l 1e7a2 <allCachedFunctions>,d0
    73c8:	|  |  |  |  |     +----- beq.s 73d4 <loadFunctionCode+0x3c8>
						allCachedFunctions->prev = NULL;
    73ca:	|  |  |  |  |     |      movea.l 1e7a2 <allCachedFunctions>,a0
    73d0:	|  |  |  |  |     |      clr.l 12(a0)
				}

				if (huntanddestroy == lastCachedFunction) {
    73d4:	|  |  |  |  |     '----> move.l 1e7a6 <lastCachedFunction>,d0
    73da:	|  |  |  |  |            cmp.l 88(sp),d0
    73de:	|  |  |  |  |     ,----- bne.s 7410 <loadFunctionCode+0x404>
					if( huntanddestroy->prev)
    73e0:	|  |  |  |  |     |      movea.l 88(sp),a0
    73e4:	|  |  |  |  |     |      move.l 12(a0),d0
    73e8:	|  |  |  |  |     |  ,-- beq.s 73fa <loadFunctionCode+0x3ee>
						lastCachedFunction = huntanddestroy->prev;
    73ea:	|  |  |  |  |     |  |   movea.l 88(sp),a0
    73ee:	|  |  |  |  |     |  |   move.l 12(a0),d0
    73f2:	|  |  |  |  |     |  |   move.l d0,1e7a6 <lastCachedFunction>
				{
					if( huntanddestroy->next)
						huntanddestroy->next->prev = huntanddestroy->prev;																
				}				

				break;
    73f8:	|  |  |  |  |  ,--|--|-- bra.s 7444 <loadFunctionCode+0x438>
						lastCachedFunction = NULL;
    73fa:	|  |  |  |  |  |  |  '-> clr.l 1e7a6 <lastCachedFunction>
						KPrintF("loadFunctionCode: Last cached function is NULL\n");
    7400:	|  |  |  |  |  |  |      pea 19f30 <PutChar+0xf8a>
    7406:	|  |  |  |  |  |  |      jsr 18504 <KPrintF>
    740c:	|  |  |  |  |  |  |      addq.l #4,sp
				break;
    740e:	|  |  |  |  |  +--|----- bra.s 7444 <loadFunctionCode+0x438>
					if( huntanddestroy->next)
    7410:	|  |  |  |  |  |  '----> movea.l 88(sp),a0
    7414:	|  |  |  |  |  |         move.l 8(a0),d0
    7418:	|  |  |  |  |  +-------- beq.s 7444 <loadFunctionCode+0x438>
						huntanddestroy->next->prev = huntanddestroy->prev;																
    741a:	|  |  |  |  |  |         movea.l 88(sp),a0
    741e:	|  |  |  |  |  |         movea.l 8(a0),a0
    7422:	|  |  |  |  |  |         movea.l 88(sp),a1
    7426:	|  |  |  |  |  |         move.l 12(a1),d0
    742a:	|  |  |  |  |  |         move.l d0,12(a0)
				break;
    742e:	|  |  |  |  |  +-------- bra.s 7444 <loadFunctionCode+0x438>
			}
			
			huntanddestroy = huntanddestroy->prev;
    7430:	|  |  |  |  '--|-------> movea.l 88(sp),a0
    7434:	|  |  |  |     |         move.l 12(a0),88(sp)
		while (huntanddestroy) 
    743a:	|  |  |  '-----|-------> tst.l 88(sp)
    743e:	|  |  '--------|-------- bne.w 7380 <loadFunctionCode+0x374>
    7442:	|  |           |     ,-- bra.s 7446 <loadFunctionCode+0x43a>
				break;
    7444:	|  |           '-----|-> nop
		}		

		if( huntanddestroy)
    7446:	|  |                 '-> tst.l 88(sp)
    744a:	|  |                 ,-- beq.s 74aa <loadFunctionCode+0x49e>
		{
			numCachedFunctions--;
    744c:	|  |                 |   move.l 1e7aa <numCachedFunctions>,d0
    7452:	|  |                 |   subq.l #1,d0
    7454:	|  |                 |   move.l d0,1e7aa <numCachedFunctions>
			FreeVec(huntanddestroy->theFunction->compiledLines);
    745a:	|  |                 |   movea.l 88(sp),a0
    745e:	|  |                 |   movea.l 4(a0),a0
    7462:	|  |                 |   move.l 4(a0),12(sp)
    7468:	|  |                 |   move.l 1e81c <SysBase>,d0
    746e:	|  |                 |   movea.l d0,a6
    7470:	|  |                 |   movea.l 12(sp),a1
    7474:	|  |                 |   jsr -690(a6)
			FreeVec(huntanddestroy->theFunction);
    7478:	|  |                 |   movea.l 88(sp),a0
    747c:	|  |                 |   move.l 4(a0),8(sp)
    7482:	|  |                 |   move.l 1e81c <SysBase>,d0
    7488:	|  |                 |   movea.l d0,a6
    748a:	|  |                 |   movea.l 8(sp),a1
    748e:	|  |                 |   jsr -690(a6)
			FreeVec(huntanddestroy);
    7492:	|  |                 |   move.l 88(sp),4(sp)
    7498:	|  |                 |   move.l 1e81c <SysBase>,d0
    749e:	|  |                 |   movea.l d0,a6
    74a0:	|  |                 |   movea.l 4(sp),a1
    74a4:	|  |                 |   jsr -690(a6)
    74a8:	|  +-----------------|-- bra.s 74b8 <loadFunctionCode+0x4ac>
		} else 
		{
			KPrintF("loadFunctionCode: Function is still in use\n");
    74aa:	|  |                 '-> pea 19f60 <PutChar+0xfba>
    74b0:	|  |                     jsr 18504 <KPrintF>
    74b6:	|  |                     addq.l #4,sp
		}
	}	
#endif					
	
	return newFunc;
    74b8:	|  '-------------------> move.l 100(sp),d0

}
    74bc:	'----------------------> movea.l (sp)+,a6
    74be:	                         lea 104(sp),sp
    74c2:	                         rts

000074c4 <loadHandlers>:

void loadHandlers (BPTR fp) {
    74c4:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    74c6:	movea.l 1e180 <currentEvents>,a2
    74cc:	move.l 8(sp),-(sp)
    74d0:	jsr 6bc <get2bytes>
    74d6:	addq.l #4,sp
    74d8:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    74da:	movea.l 1e180 <currentEvents>,a2
    74e0:	move.l 8(sp),-(sp)
    74e4:	jsr 6bc <get2bytes>
    74ea:	addq.l #4,sp
    74ec:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    74f0:	movea.l 1e180 <currentEvents>,a2
    74f6:	move.l 8(sp),-(sp)
    74fa:	jsr 6bc <get2bytes>
    7500:	addq.l #4,sp
    7502:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    7506:	movea.l 1e180 <currentEvents>,a2
    750c:	move.l 8(sp),-(sp)
    7510:	jsr 6bc <get2bytes>
    7516:	addq.l #4,sp
    7518:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    751c:	movea.l 1e180 <currentEvents>,a2
    7522:	move.l 8(sp),-(sp)
    7526:	jsr 6bc <get2bytes>
    752c:	addq.l #4,sp
    752e:	move.l d0,16(a2)
	currentEvents -> focusFunction			= (struct loadedFunction *) get4bytes (fp); //Todo: Changed to pointer type. Check if this is correct.
    7532:	move.l 8(sp),-(sp)
    7536:	jsr 718 <get4bytes>
    753c:	addq.l #4,sp
    753e:	movea.l 1e180 <currentEvents>,a0
    7544:	move.l d0,20(a0)
	currentEvents -> spaceFunction			= get2bytes (fp);
    7548:	movea.l 1e180 <currentEvents>,a2
    754e:	move.l 8(sp),-(sp)
    7552:	jsr 6bc <get2bytes>
    7558:	addq.l #4,sp
    755a:	move.l d0,24(a2)
}
    755e:	nop
    7560:	movea.l (sp)+,a2
    7562:	rts

00007564 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    7564:	       lea -312(sp),sp
    7568:	       movem.l d2-d3/a6,-(sp)
    756c:	       move.l 332(sp),d1
    7570:	       move.l 336(sp),d0
    7574:	       move.b d1,d1
    7576:	       move.b d1,16(sp)
    757a:	       move.b d0,d0
    757c:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    7580:	       move.l 328(sp),318(sp)
    7586:	       move.l #1005,314(sp)
    758e:	       move.l 1e824 <DOSBase>,d0
    7594:	       movea.l d0,a6
    7596:	       move.l 318(sp),d1
    759a:	       move.l 314(sp),d2
    759e:	       jsr -30(a6)
    75a2:	       move.l d0,310(sp)
    75a6:	       move.l 310(sp),d0
    75aa:	       move.l d0,306(sp)

	if (! fp) {
    75ae:	   ,-- bne.s 760a <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    75b0:	   |   move.l 1e824 <DOSBase>,d0
    75b6:	   |   movea.l d0,a6
    75b8:	   |   jsr -60(a6)
    75bc:	   |   move.l d0,154(sp)
    75c0:	   |   move.l 154(sp),d0
    75c4:	   |   move.l d0,150(sp)
    75c8:	   |   move.l #106380,146(sp)
    75d0:	   |   moveq #31,d0
    75d2:	   |   move.l d0,142(sp)
    75d6:	   |   move.l 1e824 <DOSBase>,d0
    75dc:	   |   movea.l d0,a6
    75de:	   |   move.l 150(sp),d1
    75e2:	   |   move.l 146(sp),d2
    75e6:	   |   move.l 142(sp),d3
    75ea:	   |   jsr -48(a6)
    75ee:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    75f2:	   |   move.l 328(sp),-(sp)
    75f6:	   |   pea 19fac <PutChar+0x1006>
    75fc:	   |   jsr 18504 <KPrintF>
    7602:	   |   addq.l #8,sp
		return NULL;
    7604:	   |   moveq #0,d0
    7606:	,--|-- bra.w 78ca <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    760a:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    760e:	|      move.l 306(sp),302(sp)
    7614:	|      move.l 1e824 <DOSBase>,d0
    761a:	|      movea.l d0,a6
    761c:	|      move.l 302(sp),d1
    7620:	|      jsr -306(a6)
    7624:	|      move.l d0,298(sp)
    7628:	|      move.l 298(sp),d0
    762c:	|      moveq #83,d1
    762e:	|      cmp.l d0,d1
    7630:	|  ,-- beq.s 7638 <openAndVerify+0xd4>
    7632:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    7638:	|  '-> move.l 306(sp),294(sp)
    763e:	|      move.l 1e824 <DOSBase>,d0
    7644:	|      movea.l d0,a6
    7646:	|      move.l 294(sp),d1
    764a:	|      jsr -306(a6)
    764e:	|      move.l d0,290(sp)
    7652:	|      move.l 290(sp),d0
    7656:	|      moveq #76,d1
    7658:	|      cmp.l d0,d1
    765a:	|  ,-- beq.s 7662 <openAndVerify+0xfe>
    765c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    7662:	|  '-> move.l 306(sp),286(sp)
    7668:	|      move.l 1e824 <DOSBase>,d0
    766e:	|      movea.l d0,a6
    7670:	|      move.l 286(sp),d1
    7674:	|      jsr -306(a6)
    7678:	|      move.l d0,282(sp)
    767c:	|      move.l 282(sp),d0
    7680:	|      moveq #85,d1
    7682:	|      cmp.l d0,d1
    7684:	|  ,-- beq.s 768c <openAndVerify+0x128>
    7686:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    768c:	|  '-> move.l 306(sp),278(sp)
    7692:	|      move.l 1e824 <DOSBase>,d0
    7698:	|      movea.l d0,a6
    769a:	|      move.l 278(sp),d1
    769e:	|      jsr -306(a6)
    76a2:	|      move.l d0,274(sp)
    76a6:	|      move.l 274(sp),d0
    76aa:	|      moveq #68,d1
    76ac:	|      cmp.l d0,d1
    76ae:	|  ,-- beq.s 76b6 <openAndVerify+0x152>
    76b0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    76b6:	|  '-> move.l 306(sp),270(sp)
    76bc:	|      move.l 1e824 <DOSBase>,d0
    76c2:	|      movea.l d0,a6
    76c4:	|      move.l 270(sp),d1
    76c8:	|      jsr -306(a6)
    76cc:	|      move.l d0,266(sp)
    76d0:	|      move.l 266(sp),d1
    76d4:	|      move.b 16(sp),d0
    76d8:	|      ext.w d0
    76da:	|      movea.w d0,a0
    76dc:	|      cmpa.l d1,a0
    76de:	|  ,-- beq.s 76e6 <openAndVerify+0x182>
    76e0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    76e6:	|  '-> move.l 306(sp),262(sp)
    76ec:	|      move.l 1e824 <DOSBase>,d0
    76f2:	|      movea.l d0,a6
    76f4:	|      move.l 262(sp),d1
    76f8:	|      jsr -306(a6)
    76fc:	|      move.l d0,258(sp)
    7700:	|      move.l 258(sp),d1
    7704:	|      move.b 14(sp),d0
    7708:	|      ext.w d0
    770a:	|      movea.w d0,a0
    770c:	|      cmpa.l d1,a0
    770e:	|  ,-- beq.s 7716 <openAndVerify+0x1b2>
    7710:	|  |   move.w #1,322(sp)
	if (headerBad) {
    7716:	|  '-> tst.w 322(sp)
    771a:	|  ,-- beq.s 7772 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    771c:	|  |   move.l 1e824 <DOSBase>,d0
    7722:	|  |   movea.l d0,a6
    7724:	|  |   jsr -60(a6)
    7728:	|  |   move.l d0,174(sp)
    772c:	|  |   move.l 174(sp),d0
    7730:	|  |   move.l d0,170(sp)
    7734:	|  |   move.l #106443,166(sp)
    773c:	|  |   moveq #31,d0
    773e:	|  |   move.l d0,162(sp)
    7742:	|  |   move.l 1e824 <DOSBase>,d0
    7748:	|  |   movea.l d0,a6
    774a:	|  |   move.l 170(sp),d1
    774e:	|  |   move.l 166(sp),d2
    7752:	|  |   move.l 162(sp),d3
    7756:	|  |   jsr -48(a6)
    775a:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    775e:	|  |   pea 19fcb <PutChar+0x1025>
    7764:	|  |   jsr 18504 <KPrintF>
    776a:	|  |   addq.l #4,sp
		return NULL;
    776c:	|  |   moveq #0,d0
    776e:	+--|-- bra.w 78ca <openAndVerify+0x366>
	}
	FGetC (fp);
    7772:	|  '-> move.l 306(sp),254(sp)
    7778:	|      move.l 1e824 <DOSBase>,d0
    777e:	|      movea.l d0,a6
    7780:	|      move.l 254(sp),d1
    7784:	|      jsr -306(a6)
    7788:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    778c:	|      nop
    778e:	|  ,-> move.l 306(sp),246(sp)
    7794:	|  |   move.l 1e824 <DOSBase>,d0
    779a:	|  |   movea.l d0,a6
    779c:	|  |   move.l 246(sp),d1
    77a0:	|  |   jsr -306(a6)
    77a4:	|  |   move.l d0,242(sp)
    77a8:	|  |   move.l 242(sp),d0
    77ac:	|  '-- bne.s 778e <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    77ae:	|      move.l 306(sp),238(sp)
    77b4:	|      move.l 1e824 <DOSBase>,d0
    77ba:	|      movea.l d0,a6
    77bc:	|      move.l 238(sp),d1
    77c0:	|      jsr -306(a6)
    77c4:	|      move.l d0,234(sp)
    77c8:	|      move.l 234(sp),d0
    77cc:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    77d0:	|      move.l 306(sp),226(sp)
    77d6:	|      move.l 1e824 <DOSBase>,d0
    77dc:	|      movea.l d0,a6
    77de:	|      move.l 226(sp),d1
    77e2:	|      jsr -306(a6)
    77e6:	|      move.l d0,222(sp)
    77ea:	|      move.l 222(sp),d0
    77ee:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    77f2:	|      move.l 230(sp),d0
    77f6:	|      lsl.l #8,d0
    77f8:	|      add.l 218(sp),d0
    77fc:	|      movea.l 344(sp),a0
    7800:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    7802:	|      movea.l 344(sp),a0
    7806:	|      move.l (a0),d0
    7808:	|      cmpi.l #514,d0
    780e:	|  ,-- ble.s 7864 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    7810:	|  |   move.l 1e824 <DOSBase>,d0
    7816:	|  |   movea.l d0,a6
    7818:	|  |   jsr -60(a6)
    781c:	|  |   move.l d0,194(sp)
    7820:	|  |   move.l 194(sp),d0
    7824:	|  |   move.l d0,190(sp)
    7828:	|  |   move.l #106470,186(sp)
    7830:	|  |   moveq #100,d1
    7832:	|  |   move.l d1,182(sp)
    7836:	|  |   move.l 1e824 <DOSBase>,d0
    783c:	|  |   movea.l d0,a6
    783e:	|  |   move.l 190(sp),d1
    7842:	|  |   move.l 186(sp),d2
    7846:	|  |   move.l 182(sp),d3
    784a:	|  |   jsr -48(a6)
    784e:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    7852:	|  |   pea 19fe6 <PutChar+0x1040>
    7858:	|  |   jsr 18504 <KPrintF>
    785e:	|  |   addq.l #4,sp
		return NULL;
    7860:	|  |   moveq #0,d0
    7862:	+--|-- bra.s 78ca <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    7864:	|  '-> movea.l 344(sp),a0
    7868:	|      move.l (a0),d0
    786a:	|      cmpi.l #257,d0
    7870:	|  ,-- bgt.s 78c6 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    7872:	|  |   move.l 1e824 <DOSBase>,d0
    7878:	|  |   movea.l d0,a6
    787a:	|  |   jsr -60(a6)
    787e:	|  |   move.l d0,214(sp)
    7882:	|  |   move.l 214(sp),d0
    7886:	|  |   move.l d0,210(sp)
    788a:	|  |   move.l #106539,206(sp)
    7892:	|  |   moveq #100,d0
    7894:	|  |   move.l d0,202(sp)
    7898:	|  |   move.l 1e824 <DOSBase>,d0
    789e:	|  |   movea.l d0,a6
    78a0:	|  |   move.l 210(sp),d1
    78a4:	|  |   move.l 206(sp),d2
    78a8:	|  |   move.l 202(sp),d3
    78ac:	|  |   jsr -48(a6)
    78b0:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    78b4:	|  |   pea 1a02b <PutChar+0x1085>
    78ba:	|  |   jsr 18504 <KPrintF>
    78c0:	|  |   addq.l #4,sp
		return NULL;
    78c2:	|  |   moveq #0,d0
    78c4:	+--|-- bra.s 78ca <openAndVerify+0x366>
	}
	return fp;
    78c6:	|  '-> move.l 306(sp),d0
}
    78ca:	'----> movem.l (sp)+,d2-d3/a6
    78ce:	       lea 312(sp),sp
    78d2:	       rts

000078d4 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    78d4:	          subq.l #8,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    78d6:	          move.l #124850,4(sp)
	while (* huntAndDestroy) {
    78de:	   ,----- bra.s 792e <pauseFunction+0x5a>
		if (fun == * huntAndDestroy) {
    78e0:	,--|----> movea.l 4(sp),a0
    78e4:	|  |      move.l (a0),d0
    78e6:	|  |      cmp.l 12(sp),d0
    78ea:	|  |  ,-- bne.s 7920 <pauseFunction+0x4c>
			int test[1];
			test[0] = fun -> originalNumber;
    78ec:	|  |  |   movea.l 12(sp),a0
    78f0:	|  |  |   move.l (a0),d0
    78f2:	|  |  |   move.l d0,(sp)
			KPrintF("Function %ld removed from running functions\n", test[0]);
    78f4:	|  |  |   move.l (sp),d0
    78f6:	|  |  |   move.l d0,-(sp)
    78f8:	|  |  |   pea 1a072 <PutChar+0x10cc>
    78fe:	|  |  |   jsr 18504 <KPrintF>
    7904:	|  |  |   addq.l #8,sp
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    7906:	|  |  |   movea.l 4(sp),a0
    790a:	|  |  |   movea.l (a0),a0
    790c:	|  |  |   move.l 44(a0),d0
    7910:	|  |  |   movea.l 4(sp),a0
    7914:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    7916:	|  |  |   movea.l 12(sp),a0
    791a:	|  |  |   clr.l 44(a0)
    791e:	|  +--|-- bra.s 792e <pauseFunction+0x5a>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    7920:	|  |  '-> movea.l 4(sp),a0
    7924:	|  |      move.l (a0),d0
    7926:	|  |      moveq #44,d1
    7928:	|  |      add.l d0,d1
    792a:	|  |      move.l d1,4(sp)
	while (* huntAndDestroy) {
    792e:	|  '----> movea.l 4(sp),a0
    7932:	|         move.l (a0),d0
    7934:	'-------- bne.s 78e0 <pauseFunction+0xc>
		}
	}
}
    7936:	          nop
    7938:	          nop
    793a:	          addq.l #8,sp
    793c:	          rts

0000793e <preloadNewFunctionNum>:

struct loadedFunction *preloadNewFunctionNum (unsigned int funcNum) {		

	return loadFunctionCode (funcNum);	
    793e:	move.l 4(sp),-(sp)
    7942:	jsr 700c <loadFunctionCode>
    7948:	addq.l #4,sp
}
    794a:	rts

0000794c <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
    794c:	subq.l #4,sp

	int test[1];
	test[0] = fun -> originalNumber;
    794e:	movea.l 8(sp),a0
    7952:	move.l (a0),d0
    7954:	move.l d0,(sp)

	KPrintF("Function %ld restarted\n", test[0]);
    7956:	move.l (sp),d0
    7958:	move.l d0,-(sp)
    795a:	pea 1a09f <PutChar+0x10f9>
    7960:	jsr 18504 <KPrintF>
    7966:	addq.l #8,sp

	fun -> next = allRunningFunctions;
    7968:	move.l 1e7b2 <allRunningFunctions>,d0
    796e:	movea.l 8(sp),a0
    7972:	move.l d0,44(a0)
	fun -> unloaded = 0;
    7976:	movea.l 8(sp),a0
    797a:	clr.l 58(a0)
	allRunningFunctions = fun;
    797e:	move.l 8(sp),1e7b2 <allRunningFunctions>
}
    7986:	nop
    7988:	addq.l #4,sp
    798a:	rts

0000798c <runSludge>:

BOOL runSludge () {
    798c:	                      lea -12(sp),sp
    7990:	                      move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    7992:	                      move.l 1e7b2 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    799a:	      ,-------------- bra.s 7a16 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    799c:	   ,--|-------------> movea.l 12(sp),a0
    79a0:	   |  |               move.l 44(a0),8(sp)

		if (! thisFunction -> freezerLevel) {
    79a6:	   |  |               movea.l 12(sp),a0
    79aa:	   |  |               move.b 56(a0),d0
    79ae:	   |  |  ,----------- bne.s 7a10 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    79b0:	   |  |  |            movea.l 12(sp),a0
    79b4:	   |  |  |            move.l 12(a0),d0
    79b8:	   |  |  |     ,----- beq.s 79e2 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    79ba:	   |  |  |     |      movea.l 12(sp),a0
    79be:	   |  |  |     |      move.l 12(a0),d0
    79c2:	   |  |  |     |  ,-- bpl.s 79ce <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    79c4:	   |  |  |     |  |   movea.l 12(sp),a0
    79c8:	   |  |  |     |  |   clr.l 12(a0)
    79cc:	   |  |  +-----|--|-- bra.s 7a10 <runSludge+0x84>
				} 
				else {
					thisFunction -> timeLeft--;
    79ce:	   |  |  |     |  '-> movea.l 12(sp),a0
    79d2:	   |  |  |     |      move.l 12(a0),d0
    79d6:	   |  |  |     |      subq.l #1,d0
    79d8:	   |  |  |     |      movea.l 12(sp),a0
    79dc:	   |  |  |     |      move.l d0,12(a0)
					break;
    79e0:	   |  |  |  ,--|----- bra.s 7a1c <runSludge+0x90>
				}
			} else {
				if (thisFunction -> isSpeech) {
    79e2:	   |  |  |  |  '----> movea.l 12(sp),a0
    79e6:	   |  |  |  |         move.w 50(a0),d0
    79ea:	   |  |  |  |     ,-- beq.s 79fa <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    79ec:	   |  |  |  |     |   movea.l 12(sp),a0
    79f0:	   |  |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    79f4:	   |  |  |  |     |   jsr 44c0 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    79fa:	   |  |  |  |     '-> move.l 12(sp),-(sp)
    79fe:	   |  |  |  |         jsr 569e <continueFunction>
    7a04:	   |  |  |  |         addq.l #4,sp
    7a06:	   |  |  |  |         tst.w d0
    7a08:	   |  |  +--|-------- bne.s 7a10 <runSludge+0x84>
					return FALSE;
    7a0a:	   |  |  |  |         clr.w d0
    7a0c:	,--|--|--|--|-------- bra.w 7a9c <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    7a10:	|  |  |  '--|-------> move.l 8(sp),12(sp)
	while (thisFunction) {
    7a16:	|  |  '-----|-------> tst.l 12(sp)
    7a1a:	|  '--------|-------- bne.s 799c <runSludge+0x10>
	}

	if (loadNow) {
    7a1c:	|           '-------> move.l 1e7e6 <loadNow>,d0
    7a22:	|           ,-------- beq.s 7a9a <runSludge+0x10e>
		if (loadNow[0] == ':') {
    7a24:	|           |         movea.l 1e7e6 <loadNow>,a0
    7a2a:	|           |         move.b (a0),d0
    7a2c:	|           |         cmpi.b #58,d0
    7a30:	|           |  ,----- bne.s 7a64 <runSludge+0xd8>
			saveGame (loadNow + 1);
    7a32:	|           |  |      move.l 1e7e6 <loadNow>,d0
    7a38:	|           |  |      addq.l #1,d0
    7a3a:	|           |  |      move.l d0,-(sp)
    7a3c:	|           |  |      jsr d138 <saveGame>
    7a42:	|           |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    7a44:	|           |  |      movea.l 1e8e6 <saverFunc>,a0
    7a4a:	|           |  |      lea 28(a0),a0
    7a4e:	|           |  |      pea 1 <_start+0x1>
    7a52:	|           |  |      pea 1 <_start+0x1>
    7a56:	|           |  |      move.l a0,-(sp)
    7a58:	|           |  |      jsr 16316 <setVariable>
    7a5e:	|           |  |      lea 12(sp),sp
    7a62:	|           |  |  ,-- bra.s 7a7c <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    7a64:	|           |  '--|-> move.l 1e7e6 <loadNow>,d0
    7a6a:	|           |     |   move.l d0,-(sp)
    7a6c:	|           |     |   jsr cc80 <loadGame>
    7a72:	|           |     |   addq.l #4,sp
    7a74:	|           |     |   tst.w d0
    7a76:	|           |     +-- bne.s 7a7c <runSludge+0xf0>
    7a78:	|           |     |   clr.w d0
    7a7a:	+-----------|-----|-- bra.s 7a9c <runSludge+0x110>
		}
		FreeVec(loadNow);
    7a7c:	|           |     '-> move.l 1e7e6 <loadNow>,4(sp)
    7a84:	|           |         move.l 1e81c <SysBase>,d0
    7a8a:	|           |         movea.l d0,a6
    7a8c:	|           |         movea.l 4(sp),a1
    7a90:	|           |         jsr -690(a6)
		loadNow = NULL;
    7a94:	|           |         clr.l 1e7e6 <loadNow>
	}

	return TRUE;
    7a9a:	|           '-------> moveq #1,d0
}
    7a9c:	'-------------------> movea.l (sp)+,a6
    7a9e:	                      lea 12(sp),sp
    7aa2:	                      rts

00007aa4 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    7aa4:	movea.l 1e180 <currentEvents>,a0
    7aaa:	move.l (a0),d0
    7aac:	move.l 4(sp),-(sp)
    7ab0:	move.l d0,-(sp)
    7ab2:	jsr 8d0 <put2bytes>
    7ab8:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    7aba:	movea.l 1e180 <currentEvents>,a0
    7ac0:	move.l 4(a0),d0
    7ac4:	move.l 4(sp),-(sp)
    7ac8:	move.l d0,-(sp)
    7aca:	jsr 8d0 <put2bytes>
    7ad0:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    7ad2:	movea.l 1e180 <currentEvents>,a0
    7ad8:	move.l 8(a0),d0
    7adc:	move.l 4(sp),-(sp)
    7ae0:	move.l d0,-(sp)
    7ae2:	jsr 8d0 <put2bytes>
    7ae8:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    7aea:	movea.l 1e180 <currentEvents>,a0
    7af0:	move.l 12(a0),d0
    7af4:	move.l 4(sp),-(sp)
    7af8:	move.l d0,-(sp)
    7afa:	jsr 8d0 <put2bytes>
    7b00:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    7b02:	movea.l 1e180 <currentEvents>,a0
    7b08:	move.l 16(a0),d0
    7b0c:	move.l 4(sp),-(sp)
    7b10:	move.l d0,-(sp)
    7b12:	jsr 8d0 <put2bytes>
    7b18:	addq.l #8,sp
	put4bytes ((ULONG) currentEvents -> focusFunction,			fp); //Todo: Changed to pointer type. Check if this is correct.
    7b1a:	movea.l 1e180 <currentEvents>,a0
    7b20:	move.l 20(a0),d0
    7b24:	move.l 4(sp),-(sp)
    7b28:	move.l d0,-(sp)
    7b2a:	jsr 958 <put4bytes>
    7b30:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    7b32:	movea.l 1e180 <currentEvents>,a0
    7b38:	move.l 24(a0),d0
    7b3c:	move.l 4(sp),-(sp)
    7b40:	move.l d0,-(sp)
    7b42:	jsr 8d0 <put2bytes>
    7b48:	addq.l #8,sp
}
    7b4a:	nop
    7b4c:	rts

00007b4e <sludgeDisplay>:

void sludgeDisplay () {					
    7b4e:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7b50:	move.l #14675968,(sp)
	displayCursor();
    7b56:	jsr c58 <displayCursor>
	CstRestoreScreen();
    7b5c:	jsr 2e74 <CstRestoreScreen>
	drawPeople();
    7b62:	jsr a9ba <drawPeople>
	CstSwapBuffer();
    7b68:	jsr 3b1c <CstSwapBuffer>
}
    7b6e:	nop
    7b70:	addq.l #4,sp
    7b72:	rts

00007b74 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    7b74:	      ,-- bra.s 7b94 <stackSetByIndex+0x20>
		vS = vS->next;
    7b76:	,-----|-> movea.l 4(sp),a0
    7b7a:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    7b80:	|     +-- bne.s 7b94 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    7b82:	|     |   pea 1a0b7 <PutChar+0x1111>
    7b88:	|     |   jsr 18504 <KPrintF>
    7b8e:	|     |   addq.l #4,sp
			return FALSE;
    7b90:	|     |   clr.w d0
    7b92:	|  ,--|-- bra.s 7bb6 <stackSetByIndex+0x42>
	while (theIndex--) {
    7b94:	|  |  '-> move.l 8(sp),d0
    7b98:	|  |      move.l d0,d1
    7b9a:	|  |      subq.l #1,d1
    7b9c:	|  |      move.l d1,8(sp)
    7ba0:	|  |      tst.l d0
    7ba2:	'--|----- bne.s 7b76 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    7ba4:	   |      move.l 4(sp),d0
    7ba8:	   |      move.l d0,-(sp)
    7baa:	   |      move.l 16(sp),-(sp)
    7bae:	   |      jsr 15ede <copyVariable>
    7bb4:	   |      addq.l #8,sp
}
    7bb6:	   '----> rts

00007bb8 <startNewFunctionLoaded>:

int startNewFunctionLoaded (struct loadedFunction * newFunc, unsigned int numParamsExpected,struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7bb8:	             subq.l #8,sp
    7bba:	             move.l 28(sp),d0
    7bbe:	             move.w d0,d0
    7bc0:	             move.w d0,2(sp)
	
	if (newFunc -> numArgs != (int)numParamsExpected) {
    7bc4:	             movea.l 12(sp),a0
    7bc8:	             move.l 16(a0),d1
    7bcc:	             move.l 16(sp),d0
    7bd0:	             cmp.l d1,d0
    7bd2:	         ,-- beq.s 7be8 <startNewFunctionLoaded+0x30>
		KPrintF("Wrong number of parameters!");
    7bd4:	         |   pea 1a0d0 <PutChar+0x112a>
    7bda:	         |   jsr 18504 <KPrintF>
    7be0:	         |   addq.l #4,sp
		return NULL; 
    7be2:	         |   moveq #0,d0
    7be4:	,--------|-- bra.w 7cc4 <startNewFunctionLoaded+0x10c>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    7be8:	|        '-> movea.l 12(sp),a0
    7bec:	|            move.l 16(a0),d1
    7bf0:	|            movea.l 12(sp),a0
    7bf4:	|            move.l 8(a0),d0
    7bf8:	|            cmp.l d1,d0
    7bfa:	|  ,-------- bge.s 7c64 <startNewFunctionLoaded+0xac>
		KPrintF ("More arguments than local variable space!");
    7bfc:	|  |         pea 1a0ec <PutChar+0x1146>
    7c02:	|  |         jsr 18504 <KPrintF>
    7c08:	|  |         addq.l #4,sp
		return NULL; 
    7c0a:	|  |         moveq #0,d0
    7c0c:	+--|-------- bra.w 7cc4 <startNewFunctionLoaded+0x10c>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    7c10:	|  |  ,----> movea.l 24(sp),a0
    7c14:	|  |  |      move.l (a0),4(sp)
		numParamsExpected --;
    7c18:	|  |  |      subq.l #1,16(sp)
		if (*vStack == NULL) {
    7c1c:	|  |  |      movea.l 24(sp),a0
    7c20:	|  |  |      move.l (a0),d0
    7c22:	|  |  |  ,-- bne.s 7c38 <startNewFunctionLoaded+0x80>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    7c24:	|  |  |  |   pea 1a116 <PutChar+0x1170>
    7c2a:	|  |  |  |   jsr 18504 <KPrintF>
    7c30:	|  |  |  |   addq.l #4,sp
			return NULL;
    7c32:	|  |  |  |   moveq #0,d0
    7c34:	+--|--|--|-- bra.w 7cc4 <startNewFunctionLoaded+0x10c>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    7c38:	|  |  |  '-> movea.l 12(sp),a0
    7c3c:	|  |  |      move.l 20(a0),d1
    7c40:	|  |  |      move.l 16(sp),d0
    7c44:	|  |  |      lsl.l #3,d0
    7c46:	|  |  |      add.l d0,d1
    7c48:	|  |  |      move.l 4(sp),d0
    7c4c:	|  |  |      move.l d1,-(sp)
    7c4e:	|  |  |      move.l d0,-(sp)
    7c50:	|  |  |      jsr 15ede <copyVariable>
    7c56:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    7c58:	|  |  |      move.l 24(sp),-(sp)
    7c5c:	|  |  |      jsr 163a8 <trimStack>
    7c62:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    7c64:	|  '--|----> tst.l 16(sp)
    7c68:	|     '----- bne.s 7c10 <startNewFunctionLoaded+0x58>
	}

	newFunc -> cancelMe = FALSE;
    7c6a:	|            movea.l 12(sp),a0
    7c6e:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    7c72:	|            movea.l 12(sp),a0
    7c76:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    7c7a:	|            movea.l 12(sp),a0
    7c7e:	|            move.w 2(sp),48(a0)
	newFunc -> calledBy = calledBy;
    7c84:	|            movea.l 12(sp),a0
    7c88:	|            move.l 20(sp),40(a0)
	newFunc -> stack = NULL;
    7c8e:	|            movea.l 12(sp),a0
    7c92:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    7c96:	|            movea.l 12(sp),a0
    7c9a:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    7c9e:	|            movea.l 12(sp),a0
    7ca2:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    7ca6:	|            movea.l 12(sp),a0
    7caa:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    7cae:	|            movea.l 12(sp),a0
    7cb2:	|            clr.l 28(a0)

	restartFunction (newFunc);
    7cb6:	|            move.l 12(sp),-(sp)
    7cba:	|            jsr 794c <restartFunction>
    7cc0:	|            addq.l #4,sp
	return 1;
    7cc2:	|            moveq #1,d0
}
    7cc4:	'----------> addq.l #8,sp
    7cc6:	             rts

00007cc8 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7cc8:	lea -12(sp),sp
    7ccc:	move.l 32(sp),d0
    7cd0:	move.w d0,d0
    7cd2:	move.w d0,2(sp)
	
	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7cd6:	move.l #14675968,8(sp)
	//custom->color[0] = 0x00f;	

	struct loadedFunction *newFunc = loadFunctionCode (funcNum);	
    7cde:	move.l 16(sp),-(sp)
    7ce2:	jsr 700c <loadFunctionCode>
    7ce8:	addq.l #4,sp
    7cea:	move.l d0,4(sp)
	//custom->color[0] = 0x000;	
	return startNewFunctionLoaded (newFunc, numParamsExpected, calledBy, vStack, returnSommet);
    7cee:	movea.w 2(sp),a0
    7cf2:	move.l a0,-(sp)
    7cf4:	move.l 32(sp),-(sp)
    7cf8:	move.l 32(sp),-(sp)
    7cfc:	move.l 32(sp),-(sp)
    7d00:	move.l 20(sp),-(sp)
    7d04:	jsr 7bb8 <startNewFunctionLoaded>
    7d0a:	lea 20(sp),sp
}
    7d0e:	lea 12(sp),sp
    7d12:	rts

00007d14 <unloadFunction>:

void unloadFunction (struct loadedFunction * fun) {
    7d14:	             subq.l #8,sp
    7d16:	             move.l a6,-(sp)

	int a;

	//Keep function loaed in memory
	if( fun == currentEvents -> focusFunction) {	
    7d18:	             movea.l 1e180 <currentEvents>,a0
    7d1e:	             move.l 20(a0),d0
    7d22:	             cmp.l 16(sp),d0
    7d26:	,----------- beq.w 7db6 <unloadFunction+0xa2>
		return;
	}

	if (fun -> stack) 
    7d2a:	|            movea.l 16(sp),a0
    7d2e:	|            move.l 24(a0),d0
    7d32:	|        ,-- beq.s 7d44 <unloadFunction+0x30>
	{
		KPrintF("unloadfunction: error non empty stack");
    7d34:	|        |   pea 1a161 <PutChar+0x11bb>
    7d3a:	|        |   jsr 18504 <KPrintF>
    7d40:	|        |   addq.l #4,sp
		return;
    7d42:	|  ,-----|-- bra.s 7db8 <unloadFunction+0xa4>
	}
	
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    7d44:	|  |     '-> clr.l 8(sp)
    7d48:	|  |     ,-- bra.s 7d68 <unloadFunction+0x54>
    7d4a:	|  |  ,--|-> movea.l 16(sp),a0
    7d4e:	|  |  |  |   move.l 20(a0),d1
    7d52:	|  |  |  |   move.l 8(sp),d0
    7d56:	|  |  |  |   lsl.l #3,d0
    7d58:	|  |  |  |   add.l d1,d0
    7d5a:	|  |  |  |   move.l d0,-(sp)
    7d5c:	|  |  |  |   jsr 15c72 <unlinkVar>
    7d62:	|  |  |  |   addq.l #4,sp
    7d64:	|  |  |  |   addq.l #1,8(sp)
    7d68:	|  |  |  '-> movea.l 16(sp),a0
    7d6c:	|  |  |      move.l 8(a0),d0
    7d70:	|  |  |      cmp.l 8(sp),d0
    7d74:	|  |  '----- bgt.s 7d4a <unloadFunction+0x36>
	if( fun->numLocals > 0) {
    7d76:	|  |         movea.l 16(sp),a0
    7d7a:	|  |         move.l 8(a0),d0
    7d7e:	|  |     ,-- ble.s 7d9a <unloadFunction+0x86>
		FreeVec(fun -> localVars);
    7d80:	|  |     |   movea.l 16(sp),a0
    7d84:	|  |     |   move.l 20(a0),4(sp)
    7d8a:	|  |     |   move.l 1e81c <SysBase>,d0
    7d90:	|  |     |   movea.l d0,a6
    7d92:	|  |     |   movea.l 4(sp),a1
    7d96:	|  |     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    7d9a:	|  |     '-> moveq #28,d0
    7d9c:	|  |         add.l 16(sp),d0
    7da0:	|  |         move.l d0,-(sp)
    7da2:	|  |         jsr 15c72 <unlinkVar>
    7da8:	|  |         addq.l #4,sp
	fun->unloaded = 1;
    7daa:	|  |         movea.l 16(sp),a0
    7dae:	|  |         moveq #1,d0
    7db0:	|  |         move.l d0,58(a0)
    7db4:	|  +-------- bra.s 7db8 <unloadFunction+0xa4>
		return;
    7db6:	'--|-------> nop

}
    7db8:	   '-------> movea.l (sp)+,a6
    7dba:	             addq.l #8,sp
    7dbc:	             rts

00007dbe <unfreezeSubs>:

void unfreezeSubs () {
    7dbe:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    7dc0:	          move.l 1e7b2 <allRunningFunctions>,(sp)

	while (thisFunction) {
    7dc6:	   ,----- bra.s 7de4 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    7dc8:	,--|----> movea.l (sp),a0
    7dca:	|  |      move.b 56(a0),d0
    7dce:	|  |  ,-- beq.s 7dde <unfreezeSubs+0x20>
    7dd0:	|  |  |   movea.l (sp),a0
    7dd2:	|  |  |   move.b 56(a0),d0
    7dd6:	|  |  |   subq.b #1,d0
    7dd8:	|  |  |   movea.l (sp),a0
    7dda:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    7dde:	|  |  '-> movea.l (sp),a0
    7de0:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    7de4:	|  '----> tst.l (sp)
    7de6:	'-------- bne.s 7dc8 <unfreezeSubs+0xa>
	}
}
    7de8:	          nop
    7dea:	          nop
    7dec:	          addq.l #4,sp
    7dee:	          rts

00007df0 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    7df0:	clr.w 1e18c <sliceBusy>
}
    7df6:	nop
    7df8:	rts

00007dfa <getNumberedString>:

char * getNumberedString (int value) {
    7dfa:	       lea -56(sp),sp
    7dfe:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    7e02:	       move.w 1e18c <sliceBusy>,d0
    7e08:	   ,-- beq.s 7e52 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    7e0a:	   |   move.l 1e824 <DOSBase>,d0
    7e10:	   |   movea.l d0,a6
    7e12:	   |   jsr -60(a6)
    7e16:	   |   move.l d0,28(sp)
    7e1a:	   |   move.l 28(sp),d0
    7e1e:	   |   move.l d0,24(sp)
    7e22:	   |   move.l #106887,20(sp)
    7e2a:	   |   moveq #76,d0
    7e2c:	   |   move.l d0,16(sp)
    7e30:	   |   move.l 1e824 <DOSBase>,d0
    7e36:	   |   movea.l d0,a6
    7e38:	   |   move.l 24(sp),d1
    7e3c:	   |   move.l 20(sp),d2
    7e40:	   |   move.l 16(sp),d3
    7e44:	   |   jsr -48(a6)
    7e48:	   |   move.l d0,12(sp)
		return NULL;
    7e4c:	   |   moveq #0,d0
    7e4e:	,--|-- bra.w 7eee <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    7e52:	|  '-> move.l 1e802 <bigDataFile>,64(sp)
    7e5a:	|      move.l 72(sp),d0
    7e5e:	|      add.l d0,d0
    7e60:	|      add.l d0,d0
    7e62:	|      move.l d0,d1
    7e64:	|      move.l 1e80e <startOfTextIndex>,d0
    7e6a:	|      add.l d1,d0
    7e6c:	|      move.l d0,60(sp)
    7e70:	|      moveq #-1,d0
    7e72:	|      move.l d0,56(sp)
    7e76:	|      move.l 1e824 <DOSBase>,d0
    7e7c:	|      movea.l d0,a6
    7e7e:	|      move.l 64(sp),d1
    7e82:	|      move.l 60(sp),d2
    7e86:	|      move.l 56(sp),d3
    7e8a:	|      jsr -66(a6)
    7e8e:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    7e92:	|      move.l 1e802 <bigDataFile>,d0
    7e98:	|      move.l d0,-(sp)
    7e9a:	|      jsr 718 <get4bytes>
    7ea0:	|      addq.l #4,sp
    7ea2:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    7ea6:	|      move.l 1e802 <bigDataFile>,48(sp)
    7eae:	|      move.l 72(sp),44(sp)
    7eb4:	|      moveq #-1,d0
    7eb6:	|      move.l d0,40(sp)
    7eba:	|      move.l 1e824 <DOSBase>,d0
    7ec0:	|      movea.l d0,a6
    7ec2:	|      move.l 48(sp),d1
    7ec6:	|      move.l 44(sp),d2
    7eca:	|      move.l 40(sp),d3
    7ece:	|      jsr -66(a6)
    7ed2:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    7ed6:	|      move.l 1e802 <bigDataFile>,d0
    7edc:	|      move.l d0,-(sp)
    7ede:	|      jsr b02 <readString>
    7ee4:	|      addq.l #4,sp
    7ee6:	|      move.l d0,32(sp)
	
	return s;
    7eea:	|      move.l 32(sp),d0
}
    7eee:	'----> movem.l (sp)+,d2-d3/a6
    7ef2:	       lea 56(sp),sp
    7ef6:	       rts

00007ef8 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    7ef8:	       lea -32(sp),sp
    7efc:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    7f00:	       move.w 1e18c <sliceBusy>,d0
    7f06:	   ,-- beq.s 7f22 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7f08:	   |   pea 1a1d4 <PutChar+0x122e>
    7f0e:	   |   pea 1a1f2 <PutChar+0x124c>
    7f14:	   |   jsr 18504 <KPrintF>
    7f1a:	   |   addq.l #8,sp
		return 0;
    7f1c:	   |   moveq #0,d0
    7f1e:	,--|-- bra.w 7fb6 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    7f22:	|  '-> move.l 1e802 <bigDataFile>,40(sp)
    7f2a:	|      move.l 48(sp),d0
    7f2e:	|      add.l d0,d0
    7f30:	|      add.l d0,d0
    7f32:	|      move.l d0,d1
    7f34:	|      move.l 1e80a <startOfDataIndex>,d0
    7f3a:	|      add.l d1,d0
    7f3c:	|      move.l d0,36(sp)
    7f40:	|      moveq #-1,d0
    7f42:	|      move.l d0,32(sp)
    7f46:	|      move.l 1e824 <DOSBase>,d0
    7f4c:	|      movea.l d0,a6
    7f4e:	|      move.l 40(sp),d1
    7f52:	|      move.l 36(sp),d2
    7f56:	|      move.l 32(sp),d3
    7f5a:	|      jsr -66(a6)
    7f5e:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    7f62:	|      move.l 1e802 <bigDataFile>,24(sp)
    7f6a:	|      move.l 1e802 <bigDataFile>,d0
    7f70:	|      move.l d0,-(sp)
    7f72:	|      jsr 718 <get4bytes>
    7f78:	|      addq.l #4,sp
    7f7a:	|      move.l d0,20(sp)
    7f7e:	|      clr.l 16(sp)
    7f82:	|      move.l 1e824 <DOSBase>,d0
    7f88:	|      movea.l d0,a6
    7f8a:	|      move.l 24(sp),d1
    7f8e:	|      move.l 20(sp),d2
    7f92:	|      move.l 16(sp),d3
    7f96:	|      jsr -66(a6)
    7f9a:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    7f9e:	|      move.w #1,1e18c <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    7fa6:	|      move.l 1e802 <bigDataFile>,d0
    7fac:	|      move.l d0,-(sp)
    7fae:	|      jsr 718 <get4bytes>
    7fb4:	|      addq.l #4,sp
}
    7fb6:	'----> movem.l (sp)+,d2-d3/a6
    7fba:	       lea 32(sp),sp
    7fbe:	       rts

00007fc0 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    7fc0:	       lea -32(sp),sp
    7fc4:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    7fc8:	       move.w 1e18c <sliceBusy>,d0
    7fce:	   ,-- beq.s 7fea <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    7fd0:	   |   pea 1a1d4 <PutChar+0x122e>
    7fd6:	   |   pea 1a1f2 <PutChar+0x124c>
    7fdc:	   |   jsr 18504 <KPrintF>
    7fe2:	   |   addq.l #8,sp
        return FALSE;
    7fe4:	   |   clr.w d0
    7fe6:	,--|-- bra.w 8076 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    7fea:	|  '-> move.l 1e802 <bigDataFile>,40(sp)
    7ff2:	|      move.l 48(sp),d0
    7ff6:	|      add.l d0,d0
    7ff8:	|      add.l d0,d0
    7ffa:	|      move.l d0,d1
    7ffc:	|      move.l 1e816 <startOfObjectIndex>,d0
    8002:	|      add.l d1,d0
    8004:	|      move.l d0,36(sp)
    8008:	|      moveq #-1,d0
    800a:	|      move.l d0,32(sp)
    800e:	|      move.l 1e824 <DOSBase>,d0
    8014:	|      movea.l d0,a6
    8016:	|      move.l 40(sp),d1
    801a:	|      move.l 36(sp),d2
    801e:	|      move.l 32(sp),d3
    8022:	|      jsr -66(a6)
    8026:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    802a:	|      move.l 1e802 <bigDataFile>,24(sp)
    8032:	|      move.l 1e802 <bigDataFile>,d0
    8038:	|      move.l d0,-(sp)
    803a:	|      jsr 718 <get4bytes>
    8040:	|      addq.l #4,sp
    8042:	|      move.l d0,20(sp)
    8046:	|      moveq #-1,d0
    8048:	|      move.l d0,16(sp)
    804c:	|      move.l 1e824 <DOSBase>,d0
    8052:	|      movea.l d0,a6
    8054:	|      move.l 24(sp),d1
    8058:	|      move.l 20(sp),d2
    805c:	|      move.l 16(sp),d3
    8060:	|      jsr -66(a6)
    8064:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    8068:	|      move.w #1,1e18c <sliceBusy>
    8070:	|      move.w 1e18c <sliceBusy>,d0
}
    8076:	'----> movem.l (sp)+,d2-d3/a6
    807a:	       lea 32(sp),sp
    807e:	       rts

00008080 <openSubSlice>:

BOOL openSubSlice (int num) {
    8080:	       lea -32(sp),sp
    8084:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    8088:	       move.w 1e18c <sliceBusy>,d0
    808e:	   ,-- beq.s 80aa <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    8090:	   |   pea 1a1d4 <PutChar+0x122e>
    8096:	   |   pea 1a1f2 <PutChar+0x124c>
    809c:	   |   jsr 18504 <KPrintF>
    80a2:	   |   addq.l #8,sp
		return FALSE;
    80a4:	   |   clr.w d0
    80a6:	,--|-- bra.w 8136 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    80aa:	|  '-> move.l 1e802 <bigDataFile>,40(sp)
    80b2:	|      move.l 48(sp),d0
    80b6:	|      add.l d0,d0
    80b8:	|      add.l d0,d0
    80ba:	|      move.l d0,d1
    80bc:	|      move.l 1e812 <startOfSubIndex>,d0
    80c2:	|      add.l d1,d0
    80c4:	|      move.l d0,36(sp)
    80c8:	|      moveq #-1,d0
    80ca:	|      move.l d0,32(sp)
    80ce:	|      move.l 1e824 <DOSBase>,d0
    80d4:	|      movea.l d0,a6
    80d6:	|      move.l 40(sp),d1
    80da:	|      move.l 36(sp),d2
    80de:	|      move.l 32(sp),d3
    80e2:	|      jsr -66(a6)
    80e6:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    80ea:	|      move.l 1e802 <bigDataFile>,24(sp)
    80f2:	|      move.l 1e802 <bigDataFile>,d0
    80f8:	|      move.l d0,-(sp)
    80fa:	|      jsr 718 <get4bytes>
    8100:	|      addq.l #4,sp
    8102:	|      move.l d0,20(sp)
    8106:	|      moveq #-1,d0
    8108:	|      move.l d0,16(sp)
    810c:	|      move.l 1e824 <DOSBase>,d0
    8112:	|      movea.l d0,a6
    8114:	|      move.l 24(sp),d1
    8118:	|      move.l 20(sp),d2
    811c:	|      move.l 16(sp),d3
    8120:	|      jsr -66(a6)
    8124:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    8128:	|      move.w #1,1e18c <sliceBusy>
    8130:	|      move.w 1e18c <sliceBusy>,d0
}
    8136:	'----> movem.l (sp)+,d2-d3/a6
    813a:	       lea 32(sp),sp
    813e:	       rts

00008140 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    8140:	       lea -180(sp),sp
    8144:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    8148:	       tst.l 196(sp)
    814c:	,----- beq.s 818c <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    814e:	|      move.l 196(sp),1e802 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    8156:	|      move.l 196(sp),168(sp)
    815c:	|      clr.l 164(sp)
    8160:	|      clr.l 160(sp)
    8164:	|      move.l 1e824 <DOSBase>,d0
    816a:	|      movea.l d0,a6
    816c:	|      move.l 168(sp),d1
    8170:	|      move.l 164(sp),d2
    8174:	|      move.l 160(sp),d3
    8178:	|      jsr -66(a6)
    817c:	|      move.l d0,156(sp)
    8180:	|      move.l 156(sp),d0
    8184:	|      move.l d0,1e806 <startIndex>
    818a:	|  ,-- bra.s 81c6 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    818c:	'--|-> move.l 1e802 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    8194:	   |   move.l 196(sp),184(sp)
    819a:	   |   move.l 1e806 <startIndex>,d0
    81a0:	   |   move.l d0,180(sp)
    81a4:	   |   moveq #-1,d0
    81a6:	   |   move.l d0,176(sp)
    81aa:	   |   move.l 1e824 <DOSBase>,d0
    81b0:	   |   movea.l d0,a6
    81b2:	   |   move.l 184(sp),d1
    81b6:	   |   move.l 180(sp),d2
    81ba:	   |   move.l 176(sp),d3
    81be:	   |   jsr -66(a6)
    81c2:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    81c6:	   '-> clr.w 1e18c <sliceBusy>

	if (skipBefore > numLanguages) {
    81cc:	       move.l 204(sp),d0
    81d0:	       cmp.l 200(sp),d0
    81d4:	   ,-- bls.s 81e8 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    81d6:	   |   pea 1a20c <PutChar+0x1266>
    81dc:	   |   jsr 18504 <KPrintF>
    81e2:	   |   addq.l #4,sp
		skipBefore = 0;
    81e4:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    81e8:	   '-> move.l 200(sp),d0
    81ec:	       sub.l 204(sp),d0
    81f0:	       move.l d0,188(sp)
	while (skipBefore) {
    81f4:	   ,-- bra.s 8232 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    81f6:	,--|-> move.l 196(sp),24(sp)
    81fc:	|  |   move.l 196(sp),-(sp)
    8200:	|  |   jsr 718 <get4bytes>
    8206:	|  |   addq.l #4,sp
    8208:	|  |   move.l d0,20(sp)
    820c:	|  |   moveq #-1,d0
    820e:	|  |   move.l d0,16(sp)
    8212:	|  |   move.l 1e824 <DOSBase>,d0
    8218:	|  |   movea.l d0,a6
    821a:	|  |   move.l 24(sp),d1
    821e:	|  |   move.l 20(sp),d2
    8222:	|  |   move.l 16(sp),d3
    8226:	|  |   jsr -66(a6)
    822a:	|  |   move.l d0,12(sp)
		skipBefore --;
    822e:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    8232:	|  '-> tst.l 204(sp)
    8236:	'----- bne.s 81f6 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    8238:	       move.l 196(sp),152(sp)
    823e:	       clr.l 148(sp)
    8242:	       clr.l 144(sp)
    8246:	       move.l 1e824 <DOSBase>,d0
    824c:	       movea.l d0,a6
    824e:	       move.l 152(sp),d1
    8252:	       move.l 148(sp),d2
    8256:	       move.l 144(sp),d3
    825a:	       jsr -66(a6)
    825e:	       move.l d0,140(sp)
    8262:	       move.l 140(sp),d0
    8266:	       addq.l #4,d0
    8268:	       move.l d0,1e80e <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    826e:	       move.l 196(sp),136(sp)
    8274:	       move.l 196(sp),-(sp)
    8278:	       jsr 718 <get4bytes>
    827e:	       addq.l #4,sp
    8280:	       move.l d0,132(sp)
    8284:	       moveq #-1,d0
    8286:	       move.l d0,128(sp)
    828a:	       move.l 1e824 <DOSBase>,d0
    8290:	       movea.l d0,a6
    8292:	       move.l 136(sp),d1
    8296:	       move.l 132(sp),d2
    829a:	       move.l 128(sp),d3
    829e:	       jsr -66(a6)
    82a2:	       move.l d0,124(sp)

	while (skipAfter) {
    82a6:	   ,-- bra.s 82e4 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    82a8:	,--|-> move.l 196(sp),40(sp)
    82ae:	|  |   move.l 196(sp),-(sp)
    82b2:	|  |   jsr 718 <get4bytes>
    82b8:	|  |   addq.l #4,sp
    82ba:	|  |   move.l d0,36(sp)
    82be:	|  |   moveq #-1,d0
    82c0:	|  |   move.l d0,32(sp)
    82c4:	|  |   move.l 1e824 <DOSBase>,d0
    82ca:	|  |   movea.l d0,a6
    82cc:	|  |   move.l 40(sp),d1
    82d0:	|  |   move.l 36(sp),d2
    82d4:	|  |   move.l 32(sp),d3
    82d8:	|  |   jsr -66(a6)
    82dc:	|  |   move.l d0,28(sp)
		skipAfter --;
    82e0:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    82e4:	|  '-> tst.l 188(sp)
    82e8:	'----- bne.s 82a8 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    82ea:	       move.l 196(sp),120(sp)
    82f0:	       clr.l 116(sp)
    82f4:	       clr.l 112(sp)
    82f8:	       move.l 1e824 <DOSBase>,d0
    82fe:	       movea.l d0,a6
    8300:	       move.l 120(sp),d1
    8304:	       move.l 116(sp),d2
    8308:	       move.l 112(sp),d3
    830c:	       jsr -66(a6)
    8310:	       move.l d0,108(sp)
    8314:	       move.l 108(sp),d0
    8318:	       addq.l #4,d0
    831a:	       move.l d0,1e812 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    8320:	       move.l 196(sp),104(sp)
    8326:	       move.l 196(sp),-(sp)
    832a:	       jsr 718 <get4bytes>
    8330:	       addq.l #4,sp
    8332:	       move.l d0,100(sp)
    8336:	       clr.l 96(sp)
    833a:	       move.l 1e824 <DOSBase>,d0
    8340:	       movea.l d0,a6
    8342:	       move.l 104(sp),d1
    8346:	       move.l 100(sp),d2
    834a:	       move.l 96(sp),d3
    834e:	       jsr -66(a6)
    8352:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    8356:	       move.l 196(sp),88(sp)
    835c:	       clr.l 84(sp)
    8360:	       clr.l 80(sp)
    8364:	       move.l 1e824 <DOSBase>,d0
    836a:	       movea.l d0,a6
    836c:	       move.l 88(sp),d1
    8370:	       move.l 84(sp),d2
    8374:	       move.l 80(sp),d3
    8378:	       jsr -66(a6)
    837c:	       move.l d0,76(sp)
    8380:	       move.l 76(sp),d0
    8384:	       addq.l #4,d0
    8386:	       move.l d0,1e816 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    838c:	       move.l 196(sp),72(sp)
    8392:	       move.l 196(sp),-(sp)
    8396:	       jsr 718 <get4bytes>
    839c:	       addq.l #4,sp
    839e:	       move.l d0,68(sp)
    83a2:	       clr.l 64(sp)
    83a6:	       move.l 1e824 <DOSBase>,d0
    83ac:	       movea.l d0,a6
    83ae:	       move.l 72(sp),d1
    83b2:	       move.l 68(sp),d2
    83b6:	       move.l 64(sp),d3
    83ba:	       jsr -66(a6)
    83be:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    83c2:	       move.l 196(sp),56(sp)
    83c8:	       clr.l 52(sp)
    83cc:	       clr.l 48(sp)
    83d0:	       move.l 1e824 <DOSBase>,d0
    83d6:	       movea.l d0,a6
    83d8:	       move.l 56(sp),d1
    83dc:	       move.l 52(sp),d2
    83e0:	       move.l 48(sp),d3
    83e4:	       jsr -66(a6)
    83e8:	       move.l d0,44(sp)
    83ec:	       move.l 44(sp),d0
    83f0:	       move.l d0,1e80a <startOfDataIndex>
    83f6:	       nop
    83f8:	       movem.l (sp)+,d2-d3/a6
    83fc:	       lea 180(sp),sp
    8400:	       rts

00008402 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    8402:	    lea -20(sp),sp
    8406:	    move.l a6,-(sp)
    8408:	    move.l d7,-(sp)
	APTR vbr = 0;
    840a:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    840e:	    move.w #20090,10(sp)
    8414:	    move.w #2049,12(sp)
    841a:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    8420:	    movea.l 1e81c <SysBase>,a0
    8426:	    move.w 296(a0),d0
    842a:	    move.w d0,d0
    842c:	    andi.l #65535,d0
    8432:	    moveq #1,d1
    8434:	    and.l d1,d0
    8436:	,-- beq.s 8464 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    8438:	|   lea 28(sp),a0
    843c:	|   lea -18(a0),a0
    8440:	|   move.l a0,20(sp)
    8444:	|   move.l 1e81c <SysBase>,d0
    844a:	|   movea.l d0,a6
    844c:	|   move.l 20(sp),d7
    8450:	|   exg d7,a5
    8452:	|   jsr -30(a6)
    8456:	|   exg d7,a5
    8458:	|   move.l d0,16(sp)
    845c:	|   move.l 16(sp),d0
    8460:	|   move.l d0,24(sp)

	return vbr;
    8464:	'-> move.l 24(sp),d0
}
    8468:	    move.l (sp)+,d7
    846a:	    movea.l (sp)+,a6
    846c:	    lea 20(sp),sp
    8470:	    rts

00008472 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    8472:	movea.l 1e842 <VBR>,a0
    8478:	lea 108(a0),a0
    847c:	move.l 4(sp),(a0)
}
    8480:	nop
    8482:	rts

00008484 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    8484:	movea.l 1e842 <VBR>,a0
    848a:	move.l 108(a0),d0
}
    848e:	rts

00008490 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    8490:	       subq.l #8,sp
    8492:	       move.l a6,-(sp)
	Forbid();
    8494:	       move.l 1e81c <SysBase>,d0
    849a:	       movea.l d0,a6
    849c:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	SystemADKCON=custom->adkconr;
    84a0:	       movea.l 1e820 <custom>,a0
    84a6:	       move.w 16(a0),d0
    84aa:	       move.w d0,1e840 <SystemADKCON>
	SystemInts=custom->intenar;
    84b0:	       movea.l 1e820 <custom>,a0
    84b6:	       move.w 28(a0),d0
    84ba:	       move.w d0,1e83c <SystemInts>
	SystemDMA=custom->dmaconr;
    84c0:	       movea.l 1e820 <custom>,a0
    84c6:	       move.w 2(a0),d0
    84ca:	       move.w d0,1e83e <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    84d0:	       movea.l 1e828 <GfxBase>,a0
    84d6:	       move.l 34(a0),d0
    84da:	       move.l d0,1e84a <ActiView>

	LoadView(0);
    84e0:	       clr.l 4(sp)
    84e4:	       move.l 1e828 <GfxBase>,d0
    84ea:	       movea.l d0,a6
    84ec:	       movea.l 4(sp),a1
    84f0:	       jsr -222(a6)
	WaitTOF();
    84f4:	       move.l 1e828 <GfxBase>,d0
    84fa:	       movea.l d0,a6
    84fc:	       jsr -270(a6)
	WaitTOF();
    8500:	       move.l 1e828 <GfxBase>,d0
    8506:	       movea.l d0,a6
    8508:	       jsr -270(a6)

	WaitVbl();
    850c:	       jsr 18438 <WaitVbl>
	WaitVbl();
    8512:	       jsr 18438 <WaitVbl>

	OwnBlitter();
    8518:	       move.l 1e828 <GfxBase>,d0
    851e:	       movea.l d0,a6
    8520:	       jsr -456(a6)
	WaitBlit();	
    8524:	       move.l 1e828 <GfxBase>,d0
    852a:	       movea.l d0,a6
    852c:	       jsr -228(a6)
	//Disable();
	
	/*custom->intena=0x7fff;//disable all interrupts
	custom->intreq=0x7fff;//Clear any interrupts that were pending*/
	
	custom->dmacon=0x7fff;//Clear all DMA channels
    8530:	       movea.l 1e820 <custom>,a0
    8536:	       move.w #32767,150(a0)

	//set all colors black
	for(int a=0;a<32;a++)
    853c:	       clr.l 8(sp)
    8540:	   ,-- bra.s 855e <TakeSystem+0xce>
		custom->color[a]=0;
    8542:	,--|-> movea.l 1e820 <custom>,a0
    8548:	|  |   move.l 8(sp),d0
    854c:	|  |   addi.l #192,d0
    8552:	|  |   add.l d0,d0
    8554:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    855a:	|  |   addq.l #1,8(sp)
    855e:	|  '-> moveq #31,d0
    8560:	|      cmp.l 8(sp),d0
    8564:	'----- bge.s 8542 <TakeSystem+0xb2>

	WaitVbl();
    8566:	       jsr 18438 <WaitVbl>
	WaitVbl();
    856c:	       jsr 18438 <WaitVbl>

	VBR=GetVBR();
    8572:	       jsr 8402 <GetVBR>
    8578:	       move.l d0,1e842 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register
    857e:	       jsr 8484 <GetInterruptHandler>
    8584:	       move.l d0,1e846 <SystemIrq>
}
    858a:	       nop
    858c:	       movea.l (sp)+,a6
    858e:	       addq.l #8,sp
    8590:	       rts

00008592 <FreeSystem>:

void FreeSystem() { 
    8592:	subq.l #4,sp
    8594:	move.l a6,-(sp)
	WaitVbl();
    8596:	jsr 18438 <WaitVbl>
	WaitBlit();
    859c:	move.l 1e828 <GfxBase>,d0
    85a2:	movea.l d0,a6
    85a4:	jsr -228(a6)
	/*custom->intena=0x7fff;//disable all interrupts
	custom->intreq=0x7fff;//Clear any interrupts that were pending*/
	custom->dmacon=0x7fff;//Clear all DMA channels
    85a8:	movea.l 1e820 <custom>,a0
    85ae:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    85b4:	move.l 1e846 <SystemIrq>,d0
    85ba:	move.l d0,-(sp)
    85bc:	jsr 8472 <SetInterruptHandler>
    85c2:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    85c4:	movea.l 1e828 <GfxBase>,a0
    85ca:	move.l 38(a0),d0
    85ce:	movea.l 1e820 <custom>,a0
    85d4:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    85d8:	movea.l 1e828 <GfxBase>,a0
    85de:	move.l 50(a0),d0
    85e2:	movea.l 1e820 <custom>,a0
    85e8:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    85ec:	movea.l 1e820 <custom>,a0
    85f2:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    85f8:	move.w 1e83e <SystemDMA>,d0
    85fe:	movea.l 1e820 <custom>,a0
    8604:	ori.w #-32768,d0
    8608:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    860c:	move.w 1e840 <SystemADKCON>,d0
    8612:	movea.l 1e820 <custom>,a0
    8618:	ori.w #-32768,d0
    861c:	move.w d0,158(a0)

	WaitBlit();	
    8620:	move.l 1e828 <GfxBase>,d0
    8626:	movea.l d0,a6
    8628:	jsr -228(a6)
	DisownBlitter();
    862c:	move.l 1e828 <GfxBase>,d0
    8632:	movea.l d0,a6
    8634:	jsr -462(a6)
	//Enable();

	LoadView(ActiView);
    8638:	move.l 1e84a <ActiView>,4(sp)
    8640:	move.l 1e828 <GfxBase>,d0
    8646:	movea.l d0,a6
    8648:	movea.l 4(sp),a1
    864c:	jsr -222(a6)
	WaitTOF();
    8650:	move.l 1e828 <GfxBase>,d0
    8656:	movea.l d0,a6
    8658:	jsr -270(a6)
	WaitTOF();
    865c:	move.l 1e828 <GfxBase>,d0
    8662:	movea.l d0,a6
    8664:	jsr -270(a6)

	Permit();
    8668:	move.l 1e81c <SysBase>,d0
    866e:	movea.l d0,a6
    8670:	jsr -138(a6)
}
    8674:	nop
    8676:	movea.l (sp)+,a6
    8678:	addq.l #4,sp
    867a:	rts

0000867c <interruptHandler>:
    0xFFFF,  /* WAIT opcode with vertical=255 (max) */
    0xFFFE   /* horizontal=254 → impossible combination → halt */
};

void interruptHandler() {
	FrameCounter++;	
    867c:	move.w 1e81a <FrameCounter>,d0
    8682:	addq.w #1,d0
    8684:	move.w d0,1e81a <FrameCounter>
	__asm  volatile ("move.l #0,%d0");
    868a:	moveq #0,d0
	
}
    868c:	nop
    868e:	rts

00008690 <main>:

struct Interrupt *vbInt;

int main(int argc, char *argv[]) {
    8690:	       lea -176(sp),sp
    8694:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    8698:	       clr.l 184(sp)
    869c:	   ,-- bra.s 86a2 <main+0x12>
    869e:	,--|-> addq.l #1,184(sp)
    86a2:	|  '-> cmpi.l #999,184(sp)
    86aa:	'----- ble.s 869e <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    86ac:	       movea.w #4,a0
    86b0:	       move.l (a0),d0
    86b2:	       move.l d0,1e81c <SysBase>
	custom = (struct Custom*)0xdff000;	
    86b8:	       move.l #14675968,1e820 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    86c2:	       move.l #107093,180(sp)
    86ca:	       clr.l 176(sp)
    86ce:	       move.l 1e81c <SysBase>,d0
    86d4:	       movea.l d0,a6
    86d6:	       movea.l 180(sp),a1
    86da:	       move.l 176(sp),d0
    86de:	       jsr -552(a6)
    86e2:	       move.l d0,172(sp)
    86e6:	       move.l 172(sp),d0
    86ea:	       move.l d0,1e828 <GfxBase>
	if (!GfxBase)
    86f0:	       move.l 1e828 <GfxBase>,d0
    86f6:	   ,-- bne.s 870c <main+0x7c>
		Exit(0);
    86f8:	   |   clr.l 168(sp)
    86fc:	   |   move.l 1e824 <DOSBase>,d0
    8702:	   |   movea.l d0,a6
    8704:	   |   move.l 168(sp),d1
    8708:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    870c:	   '-> move.l #107110,164(sp)
    8714:	       clr.l 160(sp)
    8718:	       move.l 1e81c <SysBase>,d0
    871e:	       movea.l d0,a6
    8720:	       movea.l 164(sp),a1
    8724:	       move.l 160(sp),d0
    8728:	       jsr -552(a6)
    872c:	       move.l d0,156(sp)
    8730:	       move.l 156(sp),d0
    8734:	       move.l d0,1e824 <DOSBase>
	if (!DOSBase)
    873a:	       move.l 1e824 <DOSBase>,d0
    8740:	   ,-- bne.s 8756 <main+0xc6>
		Exit(0);
    8742:	   |   clr.l 152(sp)
    8746:	   |   move.l 1e824 <DOSBase>,d0
    874c:	   |   movea.l d0,a6
    874e:	   |   move.l 152(sp),d1
    8752:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    8756:	   '-> move.l #107122,148(sp)
    875e:	       clr.l 144(sp)
    8762:	       move.l 1e81c <SysBase>,d0
    8768:	       movea.l d0,a6
    876a:	       movea.l 148(sp),a1
    876e:	       move.l 144(sp),d0
    8772:	       jsr -552(a6)
    8776:	       move.l d0,140(sp)
    877a:	       move.l 140(sp),d0
    877e:	       move.l d0,1e82c <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    8784:	       move.l 1e82c <MathIeeeSingBasBase>,d0
    878a:	   ,-- bne.s 87a0 <main+0x110>
		Exit(0);	
    878c:	   |   clr.l 136(sp)
    8790:	   |   move.l 1e824 <DOSBase>,d0
    8796:	   |   movea.l d0,a6
    8798:	   |   move.l 136(sp),d1
    879c:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    87a0:	   '-> move.l #107146,132(sp)
    87a8:	       clr.l 128(sp)
    87ac:	       move.l 1e81c <SysBase>,d0
    87b2:	       movea.l d0,a6
    87b4:	       movea.l 132(sp),a1
    87b8:	       move.l 128(sp),d0
    87bc:	       jsr -552(a6)
    87c0:	       move.l d0,124(sp)
    87c4:	       move.l 124(sp),d0
    87c8:	       move.l d0,1e830 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    87ce:	       move.l 1e830 <MathIeeeSingTransBase>,d0
    87d4:	   ,-- bne.s 87ea <main+0x15a>
		Exit(0);
    87d6:	   |   clr.l 120(sp)
    87da:	   |   move.l 1e824 <DOSBase>,d0
    87e0:	   |   movea.l d0,a6
    87e2:	   |   move.l 120(sp),d1
    87e6:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    87ea:	   '-> move.l #107172,116(sp)
    87f2:	       clr.l 112(sp)
    87f6:	       move.l 1e81c <SysBase>,d0
    87fc:	       movea.l d0,a6
    87fe:	       movea.l 116(sp),a1
    8802:	       move.l 112(sp),d0
    8806:	       jsr -552(a6)
    880a:	       move.l d0,108(sp)
    880e:	       move.l 108(sp),d0
    8812:	       move.l d0,1e838 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    8818:	       move.l 1e838 <MathIeeeDoubTransBase>,d0
    881e:	   ,-- bne.s 8834 <main+0x1a4>
		Exit(0);
    8820:	   |   clr.l 104(sp)
    8824:	   |   move.l 1e824 <DOSBase>,d0
    882a:	   |   movea.l d0,a6
    882c:	   |   move.l 104(sp),d1
    8830:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    8834:	   '-> move.l #107198,100(sp)
    883c:	       clr.l 96(sp)
    8840:	       move.l 1e81c <SysBase>,d0
    8846:	       movea.l d0,a6
    8848:	       movea.l 100(sp),a1
    884c:	       move.l 96(sp),d0
    8850:	       jsr -552(a6)
    8854:	       move.l d0,92(sp)
    8858:	       move.l 92(sp),d0
    885c:	       move.l d0,1e834 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    8862:	       move.l 1e834 <MathIeeeDoubBasBase>,d0
    8868:	   ,-- bne.s 887e <main+0x1ee>
		Exit(0);		
    886a:	   |   clr.l 88(sp)
    886e:	   |   move.l 1e824 <DOSBase>,d0
    8874:	   |   movea.l d0,a6
    8876:	   |   move.l 88(sp),d1
    887a:	   |   jsr -144(a6)

	KPrintF(" debugger from Amiga Test 035!\n");
    887e:	   '-> pea 1a2d6 <PutChar+0x1330>
    8884:	       jsr 18504 <KPrintF>
    888a:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    888c:	       move.l 1e824 <DOSBase>,d0
    8892:	       movea.l d0,a6
    8894:	       jsr -60(a6)
    8898:	       move.l d0,84(sp)
    889c:	       move.l 84(sp),d0
    88a0:	       move.l d0,80(sp)
    88a4:	       move.l #107254,76(sp)
    88ac:	       moveq #25,d0
    88ae:	       move.l d0,72(sp)
    88b2:	       move.l 1e824 <DOSBase>,d0
    88b8:	       movea.l d0,a6
    88ba:	       move.l 80(sp),d1
    88be:	       move.l 76(sp),d2
    88c2:	       move.l 72(sp),d3
    88c6:	       jsr -48(a6)
    88ca:	       move.l d0,68(sp)
	Delay(50);
    88ce:	       moveq #50,d1
    88d0:	       move.l d1,64(sp)
    88d4:	       move.l 1e824 <DOSBase>,d0
    88da:	       movea.l d0,a6
    88dc:	       move.l 64(sp),d1
    88e0:	       jsr -198(a6)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/


	KPrintF("Taking System\n");
    88e4:	       pea 1a30f <PutChar+0x1369>
    88ea:	       jsr 18504 <KPrintF>
    88f0:	       addq.l #4,sp
	TakeSystem();
    88f2:	       jsr 8490 <TakeSystem>
	KPrintF("System Taken\n");
    88f8:	       pea 1a31e <PutChar+0x1378>
    88fe:	       jsr 18504 <KPrintF>
    8904:	       addq.l #4,sp

	WaitVbl();
    8906:	       jsr 18438 <WaitVbl>

	USHORT* copper1 = (USHORT*)AllocMem(1024, MEMF_CHIP);
    890c:	       move.l #1024,60(sp)
    8914:	       moveq #2,d0
    8916:	       move.l d0,56(sp)
    891a:	       move.l 1e81c <SysBase>,d0
    8920:	       movea.l d0,a6
    8922:	       move.l 60(sp),d0
    8926:	       move.l 56(sp),d1
    892a:	       jsr -198(a6)
    892e:	       move.l d0,52(sp)
    8932:	       move.l 52(sp),d0
    8936:	       move.l d0,48(sp)
	USHORT* copPtr = copper1;	
    893a:	       move.l 48(sp),44(sp)

	*copPtr++ = 0xffdf;
    8940:	       move.l 44(sp),d0
    8944:	       move.l d0,d1
    8946:	       addq.l #2,d1
    8948:	       move.l d1,44(sp)
    894c:	       movea.l d0,a0
    894e:	       move.w #-33,(a0)
	*copPtr++ = 0xfffe;
    8952:	       move.l 44(sp),d0
    8956:	       move.l d0,d1
    8958:	       addq.l #2,d1
    895a:	       move.l d1,44(sp)
    895e:	       movea.l d0,a0
    8960:	       move.w #-2,(a0)
	*copPtr++ = 0x2d01,
    8964:	       move.l 44(sp),d0
    8968:	       move.l d0,d1
    896a:	       addq.l #2,d1
    896c:	       move.l d1,44(sp)
    8970:	       movea.l d0,a0
    8972:	       move.w #11521,(a0)
	*copPtr++ = 0xff00; 
    8976:	       move.l 44(sp),d0
    897a:	       move.l d0,d1
    897c:	       addq.l #2,d1
    897e:	       move.l d1,44(sp)
    8982:	       movea.l d0,a0
    8984:	       move.w #-256,(a0)
	*copPtr++ = 0x9c; 
    8988:	       move.l 44(sp),d0
    898c:	       move.l d0,d1
    898e:	       addq.l #2,d1
    8990:	       move.l d1,44(sp)
    8994:	       movea.l d0,a0
    8996:	       move.w #156,(a0)
	*copPtr++ = 0x8010; 
    899a:	       move.l 44(sp),d0
    899e:	       move.l d0,d1
    89a0:	       addq.l #2,d1
    89a2:	       move.l d1,44(sp)
    89a6:	       movea.l d0,a0
    89a8:	       move.w #-32752,(a0)
	*copPtr++ = 0xffff;
    89ac:	       move.l 44(sp),d0
    89b0:	       move.l d0,d1
    89b2:	       addq.l #2,d1
    89b4:	       move.l d1,44(sp)
    89b8:	       movea.l d0,a0
    89ba:	       move.w #-1,(a0)
	*copPtr++ = 0xfffe; // end copper list
    89be:	       move.l 44(sp),d0
    89c2:	       move.l d0,d1
    89c4:	       addq.l #2,d1
    89c6:	       move.l d1,44(sp)
    89ca:	       movea.l d0,a0
    89cc:	       move.w #-2,(a0)

	custom->cop1lc = (ULONG)copper1;
    89d0:	       movea.l 1e820 <custom>,a0
    89d6:	       move.l 48(sp),d0
    89da:	       move.l d0,128(a0)

	custom->dmacon = 0x87ff;	
    89de:	       movea.l 1e820 <custom>,a0
    89e4:	       move.w #-30721,150(a0)

    ULONG counter = 0;
    89ea:	       clr.l 12(sp)
    ULONG endcount;
                                                       /* Allocate memory for  */
    if (vbInt = AllocMem(sizeof(struct Interrupt),     /* interrupt node. */
    89ee:	       moveq #22,d0
    89f0:	       move.l d0,40(sp)
    89f4:	       move.l #65537,36(sp)
    89fc:	       move.l 1e81c <SysBase>,d0
    8a02:	       movea.l d0,a6
    8a04:	       move.l 40(sp),d0
    8a08:	       move.l 36(sp),d1
    8a0c:	       jsr -198(a6)
    8a10:	       move.l d0,32(sp)
    8a14:	       move.l 32(sp),d0
    8a18:	       move.l d0,1e84e <vbInt>
    8a1e:	       move.l 1e84e <vbInt>,d0
    8a24:	   ,-- beq.s 8a70 <main+0x3e0>
                         MEMF_PUBLIC|MEMF_CLEAR))
    {
        vbInt->is_Node.ln_Type = NT_INTERRUPT;         /* Initialize the node. */
    8a26:	   |   movea.l 1e84e <vbInt>,a0
    8a2c:	   |   move.b #2,8(a0)
        vbInt->is_Node.ln_Pri = -60;
    8a32:	   |   movea.l 1e84e <vbInt>,a0
    8a38:	   |   move.b #-60,9(a0)
        vbInt->is_Node.ln_Name = "VertB-Asludge";
    8a3e:	   |   movea.l 1e84e <vbInt>,a0
    8a44:	   |   move.l #107308,10(a0)
        vbInt->is_Data = (APTR)&counter;
    8a4c:	   |   movea.l 1e84e <vbInt>,a0
    8a52:	   |   moveq #67,d1
    8a54:	   |   not.b d1
    8a56:	   |   add.l sp,d1
    8a58:	   |   addi.l #-176,d1
    8a5e:	   |   move.l d1,14(a0)
        vbInt->is_Code = interruptHandler;
    8a62:	   |   movea.l 1e84e <vbInt>,a0
    8a68:	   |   move.l #34428,18(a0)
	}
	
	AddIntServer( INTB_COPER, vbInt);
    8a70:	   '-> moveq #4,d0
    8a72:	       move.l d0,28(sp)
    8a76:	       move.l 1e84e <vbInt>,24(sp)
    8a7e:	       move.l 1e81c <SysBase>,d0
    8a84:	       movea.l d0,a6
    8a86:	       move.l 28(sp),d0
    8a8a:	       movea.l 24(sp),a1
    8a8e:	       jsr -168(a6)


	KPrintF("Starting main_sludge\n");
    8a92:	       pea 1a33a <PutChar+0x1394>
    8a98:	       jsr 18504 <KPrintF>
    8a9e:	       addq.l #4,sp
	
	main_sludge(argc, argv);	
    8aa0:	       move.l 196(sp),-(sp)
    8aa4:	       move.l 196(sp),-(sp)
    8aa8:	       jsr 4f78 <main_sludge>
    8aae:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    8ab0:	       jsr 8592 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    8ab6:	       move.l 1e824 <DOSBase>,20(sp)
    8abe:	       move.l 1e81c <SysBase>,d0
    8ac4:	       movea.l d0,a6
    8ac6:	       movea.l 20(sp),a1
    8aca:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    8ace:	       move.l 1e828 <GfxBase>,16(sp)
    8ad6:	       move.l 1e81c <SysBase>,d0
    8adc:	       movea.l d0,a6
    8ade:	       movea.l 16(sp),a1
    8ae2:	       jsr -414(a6)
    8ae6:	       moveq #0,d0
}
    8ae8:	       movem.l (sp)+,d2-d3/a6
    8aec:	       lea 176(sp),sp
    8af0:	       rts

00008af2 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    8af2:	    lea -16(sp),sp
    8af6:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    8af8:	    moveq #8,d0
    8afa:	    move.l d0,16(sp)
    8afe:	    clr.l 12(sp)
    8b02:	    move.l 1e81c <SysBase>,d0
    8b08:	    movea.l d0,a6
    8b0a:	    move.l 16(sp),d0
    8b0e:	    move.l 12(sp),d1
    8b12:	    jsr -684(a6)
    8b16:	    move.l d0,8(sp)
    8b1a:	    move.l 8(sp),d0
    8b1e:	    move.l d0,4(sp)
	if (!newStat) {
    8b22:	,-- bne.s 8b52 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    8b24:	|   movea.l 1e18e <nowStatus>,a0
    8b2a:	|   move.l (a0),d0
    8b2c:	|   movea.l 4(sp),a0
    8b30:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    8b34:	|   pea 19d14 <PutChar+0xd6e>
    8b3a:	|   jsr b8 <copyString>
    8b40:	|   addq.l #4,sp
    8b42:	|   movea.l 4(sp),a0
    8b46:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    8b48:	|   movea.l 1e18e <nowStatus>,a0
    8b4e:	|   move.l 4(sp),(a0)
	}
}
    8b52:	'-> nop
    8b54:	    movea.l (sp)+,a6
    8b56:	    lea 16(sp),sp
    8b5a:	    rts

00008b5c <clearStatusBar>:

void clearStatusBar () {
    8b5c:	       lea -16(sp),sp
    8b60:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    8b62:	       movea.l 1e18e <nowStatus>,a0
    8b68:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    8b6c:	       movea.l 1e18e <nowStatus>,a0
    8b72:	       moveq #-1,d0
    8b74:	       move.l d0,6(a0)
	while (stat) {
    8b78:	   ,-- bra.s 8bb8 <clearStatusBar+0x5c>
		kill = stat;
    8b7a:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    8b80:	|  |   movea.l 16(sp),a0
    8b84:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    8b8a:	|  |   movea.l 12(sp),a0
    8b8e:	|  |   move.l (a0),8(sp)
    8b92:	|  |   move.l 1e81c <SysBase>,d0
    8b98:	|  |   movea.l d0,a6
    8b9a:	|  |   movea.l 8(sp),a1
    8b9e:	|  |   jsr -690(a6)
		FreeVec(kill);
    8ba2:	|  |   move.l 12(sp),4(sp)
    8ba8:	|  |   move.l 1e81c <SysBase>,d0
    8bae:	|  |   movea.l d0,a6
    8bb0:	|  |   movea.l 4(sp),a1
    8bb4:	|  |   jsr -690(a6)
	while (stat) {
    8bb8:	|  '-> tst.l 16(sp)
    8bbc:	'----- bne.s 8b7a <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    8bbe:	       movea.l 1e18e <nowStatus>,a0
    8bc4:	       clr.l (a0)
}
    8bc6:	       nop
    8bc8:	       movea.l (sp)+,a6
    8bca:	       lea 16(sp),sp
    8bce:	       rts

00008bd0 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    8bd0:	clr.l 1e852 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    8bd6:	move.w #-1,1e856 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    8bde:	moveq #-1,d0
    8be0:	move.l d0,1e858 <mainStatus+0x6>
	mainStatus.statusX = 10;
    8be6:	moveq #10,d0
    8be8:	move.l d0,1e85c <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    8bee:	movea.l 1e766 <winHeight>,a0
    8bf4:	lea -15(a0),a0
    8bf8:	move.l a0,d0
    8bfa:	move.l d0,1e860 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    8c00:	nop
    8c02:	rts

00008c04 <killLastStatus>:

void killLastStatus () {
    8c04:	    lea -12(sp),sp
    8c08:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    8c0a:	    movea.l 1e18e <nowStatus>,a0
    8c10:	    move.l (a0),d0
    8c12:	,-- beq.s 8c5c <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    8c14:	|   movea.l 1e18e <nowStatus>,a0
    8c1a:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    8c1e:	|   movea.l 1e18e <nowStatus>,a0
    8c24:	|   movea.l 12(sp),a1
    8c28:	|   move.l 4(a1),d0
    8c2c:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    8c2e:	|   movea.l 12(sp),a0
    8c32:	|   move.l (a0),8(sp)
    8c36:	|   move.l 1e81c <SysBase>,d0
    8c3c:	|   movea.l d0,a6
    8c3e:	|   movea.l 8(sp),a1
    8c42:	|   jsr -690(a6)
		FreeVec(kill);
    8c46:	|   move.l 12(sp),4(sp)
    8c4c:	|   move.l 1e81c <SysBase>,d0
    8c52:	|   movea.l d0,a6
    8c54:	|   movea.l 4(sp),a1
    8c58:	|   jsr -690(a6)
	}
}
    8c5c:	'-> nop
    8c5e:	    movea.l (sp)+,a6
    8c60:	    lea 12(sp),sp
    8c64:	    rts

00008c66 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    8c66:	movea.l 1e18e <nowStatus>,a0
    8c6c:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    8c72:	movea.l 1e18e <nowStatus>,a0
    8c78:	move.l 8(sp),14(a0)
}
    8c7e:	nop
    8c80:	rts

00008c82 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    8c82:	       lea -100(sp),sp
    8c86:	       move.l a6,-(sp)
    8c88:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    8c8a:	       movea.l 1e18e <nowStatus>,a0
    8c90:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    8c94:	       movea.l 1e18e <nowStatus>,a0
    8c9a:	       move.w 4(a0),d0
    8c9e:	       move.w d0,d0
    8ca0:	       andi.l #65535,d0
    8ca6:	       move.l 112(sp),-(sp)
    8caa:	       move.l d0,-(sp)
    8cac:	       jsr 8d0 <put2bytes>
    8cb2:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    8cb4:	       movea.l 1e18e <nowStatus>,a0
    8cba:	       move.l 6(a0),d0
    8cbe:	       move.l d0,d0
    8cc0:	       movea.w d0,a0
    8cc2:	       move.l 112(sp),-(sp)
    8cc6:	       move.l a0,-(sp)
    8cc8:	       jsr a9c <putSigned>
    8cce:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    8cd0:	       movea.l 1e18e <nowStatus>,a0
    8cd6:	       move.l 10(a0),d0
    8cda:	       move.l 112(sp),-(sp)
    8cde:	       move.l d0,-(sp)
    8ce0:	       jsr 8d0 <put2bytes>
    8ce6:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    8ce8:	       movea.l 1e18e <nowStatus>,a0
    8cee:	       move.l 14(a0),d0
    8cf2:	       move.l 112(sp),-(sp)
    8cf6:	       move.l d0,-(sp)
    8cf8:	       jsr 8d0 <put2bytes>
    8cfe:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    8d00:	       move.l 112(sp),100(sp)
    8d06:	       movea.l 1e18e <nowStatus>,a0
    8d0c:	       move.l 18(a0),96(sp)
    8d12:	       move.l 1e824 <DOSBase>,d0
    8d18:	       movea.l d0,a6
    8d1a:	       move.l 100(sp),d1
    8d1e:	       move.l 96(sp),d2
    8d22:	       jsr -312(a6)
    8d26:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    8d2a:	       move.l 112(sp),88(sp)
    8d30:	       movea.l 1e18e <nowStatus>,a0
    8d36:	       move.l 22(a0),84(sp)
    8d3c:	       move.l 1e824 <DOSBase>,d0
    8d42:	       movea.l d0,a6
    8d44:	       move.l 88(sp),d1
    8d48:	       move.l 84(sp),d2
    8d4c:	       jsr -312(a6)
    8d50:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    8d54:	       move.l 112(sp),76(sp)
    8d5a:	       movea.l 1e18e <nowStatus>,a0
    8d60:	       move.l 26(a0),72(sp)
    8d66:	       move.l 1e824 <DOSBase>,d0
    8d6c:	       movea.l d0,a6
    8d6e:	       move.l 76(sp),d1
    8d72:	       move.l 72(sp),d2
    8d76:	       jsr -312(a6)
    8d7a:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    8d7e:	       move.l 112(sp),64(sp)
    8d84:	       movea.l 1e18e <nowStatus>,a0
    8d8a:	       move.l 30(a0),60(sp)
    8d90:	       move.l 1e824 <DOSBase>,d0
    8d96:	       movea.l d0,a6
    8d98:	       move.l 64(sp),d1
    8d9c:	       move.l 60(sp),d2
    8da0:	       jsr -312(a6)
    8da4:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    8da8:	       move.l 112(sp),52(sp)
    8dae:	       movea.l 1e18e <nowStatus>,a0
    8db4:	       move.l 34(a0),48(sp)
    8dba:	       move.l 1e824 <DOSBase>,d0
    8dc0:	       movea.l d0,a6
    8dc2:	       move.l 52(sp),d1
    8dc6:	       move.l 48(sp),d2
    8dca:	       jsr -312(a6)
    8dce:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    8dd2:	       move.l 112(sp),40(sp)
    8dd8:	       movea.l 1e18e <nowStatus>,a0
    8dde:	       move.l 38(a0),36(sp)
    8de4:	       move.l 1e824 <DOSBase>,d0
    8dea:	       movea.l d0,a6
    8dec:	       move.l 40(sp),d1
    8df0:	       move.l 36(sp),d2
    8df4:	       jsr -312(a6)
    8df8:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    8dfc:	   ,-- bra.s 8e40 <saveStatusBars+0x1be>
		FPutC (fp,1);
    8dfe:	,--|-> move.l 112(sp),16(sp)
    8e04:	|  |   moveq #1,d0
    8e06:	|  |   move.l d0,12(sp)
    8e0a:	|  |   move.l 1e824 <DOSBase>,d0
    8e10:	|  |   movea.l d0,a6
    8e12:	|  |   move.l 16(sp),d1
    8e16:	|  |   move.l 12(sp),d2
    8e1a:	|  |   jsr -312(a6)
    8e1e:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    8e22:	|  |   movea.l 104(sp),a0
    8e26:	|  |   move.l (a0),d0
    8e28:	|  |   move.l 112(sp),-(sp)
    8e2c:	|  |   move.l d0,-(sp)
    8e2e:	|  |   jsr bd8 <writeString>
    8e34:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    8e36:	|  |   movea.l 104(sp),a0
    8e3a:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    8e40:	|  '-> tst.l 104(sp)
    8e44:	'----- bne.s 8dfe <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    8e46:	       move.l 112(sp),28(sp)
    8e4c:	       clr.l 24(sp)
    8e50:	       move.l 1e824 <DOSBase>,d0
    8e56:	       movea.l d0,a6
    8e58:	       move.l 28(sp),d1
    8e5c:	       move.l 24(sp),d2
    8e60:	       jsr -312(a6)
    8e64:	       move.l d0,20(sp)
}
    8e68:	       nop
    8e6a:	       move.l (sp)+,d2
    8e6c:	       movea.l (sp)+,a6
    8e6e:	       lea 100(sp),sp
    8e72:	       rts

00008e74 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    8e74:	movea.l 1e18e <nowStatus>,a0
    8e7a:	move.l 4(sp),6(a0)
}
    8e80:	nop
    8e82:	rts

00008e84 <setStatusBar>:

void setStatusBar (char * txt) {
    8e84:	    subq.l #4,sp
    8e86:	    move.l a6,-(sp)
    8e88:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    8e8a:	    movea.l 1e18e <nowStatus>,a0
    8e90:	    move.l (a0),d0
    8e92:	,-- beq.s 8ec6 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    8e94:	|   movea.l 1e18e <nowStatus>,a0
    8e9a:	|   movea.l (a0),a0
    8e9c:	|   move.l (a0),8(sp)
    8ea0:	|   move.l 1e81c <SysBase>,d0
    8ea6:	|   movea.l d0,a6
    8ea8:	|   movea.l 8(sp),a1
    8eac:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    8eb0:	|   movea.l 1e18e <nowStatus>,a0
    8eb6:	|   movea.l (a0),a2
    8eb8:	|   move.l 16(sp),-(sp)
    8ebc:	|   jsr b8 <copyString>
    8ec2:	|   addq.l #4,sp
    8ec4:	|   move.l d0,(a2)
	}
}
    8ec6:	'-> nop
    8ec8:	    movea.l (sp)+,a2
    8eca:	    movea.l (sp)+,a6
    8ecc:	    addq.l #4,sp
    8ece:	    rts

00008ed0 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    8ed0:	       movea.l 1e18e <nowStatus>,a0
    8ed6:	       move.l (a0),d0
    8ed8:	,----- beq.s 8ee6 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    8eda:	|      movea.l 1e18e <nowStatus>,a0
    8ee0:	|      movea.l (a0),a0
    8ee2:	|      move.l (a0),d0
    8ee4:	|  ,-- bra.s 8eec <statusBarText+0x1c>
	} else {
		return "";
    8ee6:	'--|-> move.l #105748,d0
	}
    8eec:	   '-> rts

00008eee <addZBufferLayer>:

#define EMULATOR

struct zBufferData *zBuffer;

void addZBufferLayer (int x, int y, int width, int height, int yz) {
    8eee:	lea -32(sp),sp
    8ef2:	movem.l d2-d3/a6,-(sp)

	struct zBufferData *createthis = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8ef6:	moveq #28,d0
    8ef8:	move.l d0,40(sp)
    8efc:	clr.l 36(sp)
    8f00:	move.l 1e81c <SysBase>,d0
    8f06:	movea.l d0,a6
    8f08:	move.l 40(sp),d0
    8f0c:	move.l 36(sp),d1
    8f10:	jsr -684(a6)
    8f14:	move.l d0,32(sp)
    8f18:	move.l 32(sp),d0
    8f1c:	move.l d0,28(sp)
	createthis->width = sceneWidth;
    8f20:	move.l 1e8b8 <sceneWidth>,d0
    8f26:	movea.l 28(sp),a0
    8f2a:	move.l d0,(a0)
	createthis->height = sceneHeight;
    8f2c:	move.l 1e8bc <sceneHeight>,d0
    8f32:	movea.l 28(sp),a0
    8f36:	move.l d0,4(a0)
	createthis->topx = 0;
    8f3a:	movea.l 28(sp),a0
    8f3e:	clr.l 8(a0)
	createthis->topy = 0;
    8f42:	movea.l 28(sp),a0
    8f46:	clr.l 12(a0)
	createthis->yz = yz;
    8f4a:	movea.l 28(sp),a0
    8f4e:	move.l 64(sp),16(a0)
	createthis->nextPanel = zBuffer;
    8f54:	move.l 1e87c <zBuffer>,d0
    8f5a:	movea.l 28(sp),a0
    8f5e:	move.l d0,24(a0)

	zBuffer = createthis;
    8f62:	move.l 28(sp),1e87c <zBuffer>

	UWORD size = sceneWidth * sceneHeight / 8;	
    8f6a:	move.l 1e8b8 <sceneWidth>,d0
    8f70:	move.l 1e8bc <sceneHeight>,d1
    8f76:	move.l d1,-(sp)
    8f78:	move.l d0,-(sp)
    8f7a:	jsr 18e90 <__mulsi3>
    8f80:	addq.l #8,sp
    8f82:	lsr.l #3,d0
    8f84:	move.w d0,26(sp)
	createthis->bitplane = AllocVec( size, MEMF_CHIP);
    8f88:	moveq #0,d0
    8f8a:	move.w 26(sp),d0
    8f8e:	move.l d0,22(sp)
    8f92:	moveq #2,d0
    8f94:	move.l d0,18(sp)
    8f98:	move.l 1e81c <SysBase>,d0
    8f9e:	movea.l d0,a6
    8fa0:	move.l 22(sp),d0
    8fa4:	move.l 18(sp),d1
    8fa8:	jsr -684(a6)
    8fac:	move.l d0,14(sp)
    8fb0:	move.l 14(sp),d0
    8fb4:	movea.l 28(sp),a0
    8fb8:	move.l d0,20(a0)
	CstCreateZBufferLayer (createthis->bitplane, x, y, width, height);
    8fbc:	move.l 60(sp),d0
    8fc0:	moveq #0,d3
    8fc2:	move.w d0,d3
    8fc4:	move.l 56(sp),d0
    8fc8:	moveq #0,d2
    8fca:	move.w d0,d2
    8fcc:	move.l 52(sp),d0
    8fd0:	moveq #0,d1
    8fd2:	move.w d0,d1
    8fd4:	move.l 48(sp),d0
    8fd8:	move.w d0,d0
    8fda:	andi.l #65535,d0
    8fe0:	movea.l 28(sp),a0
    8fe4:	movea.l 20(a0),a0
    8fe8:	move.l d3,-(sp)
    8fea:	move.l d2,-(sp)
    8fec:	move.l d1,-(sp)
    8fee:	move.l d0,-(sp)
    8ff0:	move.l a0,-(sp)
    8ff2:	jsr 12e8 <CstCreateZBufferLayer>
    8ff8:	lea 20(sp),sp

}
    8ffc:	nop
    8ffe:	movem.l (sp)+,d2-d3/a6
    9002:	lea 32(sp),sp
    9006:	rts

00009008 <killZBuffer>:

void killZBuffer () {
    9008:	       lea -16(sp),sp
    900c:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    900e:	       move.l 1e87c <zBuffer>,16(sp)

	while(zbuffercursor) {
    9016:	   ,-- bra.s 9058 <killZBuffer+0x50>
		struct zBufferData *deleteme = zbuffercursor;
    9018:	,--|-> move.l 16(sp),12(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    901e:	|  |   movea.l 16(sp),a0
    9022:	|  |   move.l 24(a0),16(sp)
		FreeVec(deleteme->bitplane);
    9028:	|  |   movea.l 12(sp),a0
    902c:	|  |   move.l 20(a0),8(sp)
    9032:	|  |   move.l 1e81c <SysBase>,d0
    9038:	|  |   movea.l d0,a6
    903a:	|  |   movea.l 8(sp),a1
    903e:	|  |   jsr -690(a6)
		FreeVec(deleteme);
    9042:	|  |   move.l 12(sp),4(sp)
    9048:	|  |   move.l 1e81c <SysBase>,d0
    904e:	|  |   movea.l d0,a6
    9050:	|  |   movea.l 4(sp),a1
    9054:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    9058:	|  '-> tst.l 16(sp)
    905c:	'----- bne.s 9018 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    905e:	       clr.l 1e87c <zBuffer>
}
    9064:	       nop
    9066:	       movea.l (sp)+,a6
    9068:	       lea 16(sp),sp
    906c:	       rts

0000906e <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    906e:	                lea -304(sp),sp
    9072:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    9076:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    907a:	                jsr 9008 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    9080:	                move.l 328(sp),d0
    9084:	                move.l d0,-(sp)
    9086:	                jsr 7ef8 <openFileFromNum>
    908c:	                addq.l #4,sp
    908e:	                tst.l d0
    9090:	            ,-- bne.s 9098 <setZBuffer+0x2a>
    9092:	            |   clr.w d0
    9094:	,-----------|-- bra.w 9356 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    9098:	|           '-> move.l 1e802 <bigDataFile>,310(sp)
    90a0:	|               move.l 1e824 <DOSBase>,d0
    90a6:	|               movea.l d0,a6
    90a8:	|               move.l 310(sp),d1
    90ac:	|               jsr -306(a6)
    90b0:	|               move.l d0,306(sp)
    90b4:	|               move.l 306(sp),d0
    90b8:	|               moveq #97,d1
    90ba:	|               cmp.l d0,d1
    90bc:	|        ,----- bne.s 9130 <setZBuffer+0xc2>
    90be:	|        |      move.l 1e802 <bigDataFile>,302(sp)
    90c6:	|        |      move.l 1e824 <DOSBase>,d0
    90cc:	|        |      movea.l d0,a6
    90ce:	|        |      move.l 302(sp),d1
    90d2:	|        |      jsr -306(a6)
    90d6:	|        |      move.l d0,298(sp)
    90da:	|        |      move.l 298(sp),d0
    90de:	|        |      moveq #115,d1
    90e0:	|        |      cmp.l d0,d1
    90e2:	|        +----- bne.s 9130 <setZBuffer+0xc2>
    90e4:	|        |      move.l 1e802 <bigDataFile>,294(sp)
    90ec:	|        |      move.l 1e824 <DOSBase>,d0
    90f2:	|        |      movea.l d0,a6
    90f4:	|        |      move.l 294(sp),d1
    90f8:	|        |      jsr -306(a6)
    90fc:	|        |      move.l d0,290(sp)
    9100:	|        |      move.l 290(sp),d0
    9104:	|        |      moveq #122,d1
    9106:	|        |      cmp.l d0,d1
    9108:	|        +----- bne.s 9130 <setZBuffer+0xc2>
    910a:	|        |      move.l 1e802 <bigDataFile>,286(sp)
    9112:	|        |      move.l 1e824 <DOSBase>,d0
    9118:	|        |      movea.l d0,a6
    911a:	|        |      move.l 286(sp),d1
    911e:	|        |      jsr -306(a6)
    9122:	|        |      move.l d0,282(sp)
    9126:	|        |      move.l 282(sp),d0
    912a:	|        |      moveq #98,d1
    912c:	|        |      cmp.l d0,d1
    912e:	|        |  ,-- beq.s 9144 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    9130:	|        '--|-> pea 1a377 <PutChar+0x13d1>
    9136:	|           |   jsr 18504 <KPrintF>
    913c:	|           |   addq.l #4,sp
		 return FALSE;
    913e:	|           |   clr.w d0
    9140:	+-----------|-- bra.w 9356 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    9144:	|           '-> move.l 1e802 <bigDataFile>,278(sp)
    914c:	|               move.l 1e824 <DOSBase>,d0
    9152:	|               movea.l d0,a6
    9154:	|               move.l 278(sp),d1
    9158:	|               jsr -306(a6)
    915c:	|               move.l d0,274(sp)
    9160:	|               move.l 274(sp),d0
    9164:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    9168:	|               moveq #28,d0
    916a:	|               move.l d0,270(sp)
    916e:	|               clr.l 266(sp)
    9172:	|               move.l 1e81c <SysBase>,d0
    9178:	|               movea.l d0,a6
    917a:	|               move.l 270(sp),d0
    917e:	|               move.l 266(sp),d1
    9182:	|               jsr -684(a6)
    9186:	|               move.l d0,262(sp)
    918a:	|               move.l 262(sp),d0
    918e:	|               move.l d0,1e87c <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    9194:	|               move.l 1e87c <zBuffer>,318(sp)

	while(numelements--)
    919c:	|     ,-------- bra.w 933c <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    91a0:	|  ,--|-------> move.l 1e802 <bigDataFile>,d0
    91a6:	|  |  |         move.l d0,-(sp)
    91a8:	|  |  |         jsr 6bc <get2bytes>
    91ae:	|  |  |         addq.l #4,sp
    91b0:	|  |  |         movea.l 318(sp),a0
    91b4:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    91b6:	|  |  |         move.l 1e802 <bigDataFile>,d0
    91bc:	|  |  |         move.l d0,-(sp)
    91be:	|  |  |         jsr 6bc <get2bytes>
    91c4:	|  |  |         addq.l #4,sp
    91c6:	|  |  |         movea.l 318(sp),a0
    91ca:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    91ce:	|  |  |         move.l 1e802 <bigDataFile>,d0
    91d4:	|  |  |         move.l d0,-(sp)
    91d6:	|  |  |         jsr 6bc <get2bytes>
    91dc:	|  |  |         addq.l #4,sp
    91de:	|  |  |         movea.l 318(sp),a0
    91e2:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    91e6:	|  |  |         move.l 1e802 <bigDataFile>,d0
    91ec:	|  |  |         move.l d0,-(sp)
    91ee:	|  |  |         jsr 6bc <get2bytes>
    91f4:	|  |  |         addq.l #4,sp
    91f6:	|  |  |         movea.l 318(sp),a0
    91fa:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    91fe:	|  |  |         move.l 1e802 <bigDataFile>,d0
    9204:	|  |  |         move.l d0,-(sp)
    9206:	|  |  |         jsr 6bc <get2bytes>
    920c:	|  |  |         addq.l #4,sp
    920e:	|  |  |         movea.l 318(sp),a0
    9212:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    9216:	|  |  |         movea.l 318(sp),a0
    921a:	|  |  |         move.l (a0),d0
    921c:	|  |  |         movea.l 318(sp),a0
    9220:	|  |  |         move.l 4(a0),d1
    9224:	|  |  |         move.l d1,-(sp)
    9226:	|  |  |         move.l d0,-(sp)
    9228:	|  |  |         jsr 18e90 <__mulsi3>
    922e:	|  |  |         addq.l #8,sp
    9230:	|  |  |         tst.l d0
    9232:	|  |  |     ,-- bge.s 9236 <setZBuffer+0x1c8>
    9234:	|  |  |     |   addq.l #7,d0
    9236:	|  |  |     '-> asr.l #3,d0
    9238:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    923c:	|  |  |         moveq #0,d0
    923e:	|  |  |         move.w 260(sp),d0
    9242:	|  |  |         move.l d0,256(sp)
    9246:	|  |  |         moveq #2,d1
    9248:	|  |  |         move.l d1,252(sp)
    924c:	|  |  |         move.l 1e81c <SysBase>,d0
    9252:	|  |  |         movea.l d0,a6
    9254:	|  |  |         move.l 256(sp),d0
    9258:	|  |  |         move.l 252(sp),d1
    925c:	|  |  |         jsr -684(a6)
    9260:	|  |  |         move.l d0,248(sp)
    9264:	|  |  |         move.l 248(sp),d0
    9268:	|  |  |         movea.l 318(sp),a0
    926c:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    9270:	|  |  |         move.l 1e802 <bigDataFile>,244(sp)
    9278:	|  |  |         movea.l 318(sp),a0
    927c:	|  |  |         move.l 20(a0),240(sp)
    9282:	|  |  |         moveq #1,d0
    9284:	|  |  |         move.l d0,236(sp)
    9288:	|  |  |         moveq #0,d0
    928a:	|  |  |         move.w 260(sp),d0
    928e:	|  |  |         move.l d0,232(sp)
    9292:	|  |  |         move.l 1e824 <DOSBase>,d0
    9298:	|  |  |         movea.l d0,a6
    929a:	|  |  |         move.l 244(sp),d1
    929e:	|  |  |         move.l 240(sp),d2
    92a2:	|  |  |         move.l 236(sp),d3
    92a6:	|  |  |         move.l 232(sp),d4
    92aa:	|  |  |         jsr -324(a6)
    92ae:	|  |  |         move.l d0,228(sp)
    92b2:	|  |  |         move.l 228(sp),d0
    92b6:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    92ba:	|  |  |         tst.w 322(sp)
    92be:	|  |  |  ,----- beq.s 92fa <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    92c0:	|  |  |  |      moveq #28,d1
    92c2:	|  |  |  |      move.l d1,222(sp)
    92c6:	|  |  |  |      clr.l 218(sp)
    92ca:	|  |  |  |      move.l 1e81c <SysBase>,d0
    92d0:	|  |  |  |      movea.l d0,a6
    92d2:	|  |  |  |      move.l 222(sp),d0
    92d6:	|  |  |  |      move.l 218(sp),d1
    92da:	|  |  |  |      jsr -684(a6)
    92de:	|  |  |  |      move.l d0,214(sp)
    92e2:	|  |  |  |      move.l 214(sp),d0
    92e6:	|  |  |  |      movea.l 318(sp),a0
    92ea:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    92ee:	|  |  |  |      movea.l 318(sp),a0
    92f2:	|  |  |  |      move.l 24(a0),318(sp)
    92f8:	|  |  |  |  ,-- bra.s 9302 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    92fa:	|  |  |  '--|-> movea.l 318(sp),a0
    92fe:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    9302:	|  |  |     '-> movea.l 318(sp),a0
    9306:	|  |  |         move.l 4(a0),d0
    930a:	|  |  |         move.l d0,d0
    930c:	|  |  |         movea.w d0,a1
    930e:	|  |  |         movea.l 318(sp),a0
    9312:	|  |  |         move.l (a0),d0
    9314:	|  |  |         move.l d0,d0
    9316:	|  |  |         movea.w d0,a0
    9318:	|  |  |         movea.l 318(sp),a2
    931c:	|  |  |         move.l 20(a2),d0
    9320:	|  |  |         clr.l -(sp)
    9322:	|  |  |         pea 1 <_start+0x1>
    9326:	|  |  |         move.l a1,-(sp)
    9328:	|  |  |         move.l a0,-(sp)
    932a:	|  |  |         pea 1a38b <PutChar+0x13e5>
    9330:	|  |  |         move.l d0,-(sp)
    9332:	|  |  |         jsr 185ec <debug_register_bitmap>
    9338:	|  |  |         lea 24(sp),sp
	while(numelements--)
    933c:	|  |  '-------> move.w 322(sp),d0
    9340:	|  |            move.w d0,d1
    9342:	|  |            subq.w #1,d1
    9344:	|  |            move.w d1,322(sp)
    9348:	|  |            tst.w d0
    934a:	|  '----------- bne.w 91a0 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    934e:	|               jsr 7df0 <finishAccess>
	
	return TRUE;
    9354:	|               moveq #1,d0
}
    9356:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    935a:	                lea 304(sp),sp
    935e:	                rts

00009360 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    9360:	          lea -32(sp),sp
    9364:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    9366:	          move.l 40(sp),d0
    936a:	          addq.l #8,d0
    936c:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    9370:	          clr.l 32(sp)
    9374:	   ,----- bra.s 93ba <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    9376:	,--|----> movea.l 24(sp),a0
    937a:	|  |      movea.l 8(a0),a0
    937e:	|  |      move.l 32(sp),d1
    9382:	|  |      move.l d1,d0
    9384:	|  |      lsl.l #3,d0
    9386:	|  |      sub.l d1,d0
    9388:	|  |      add.l d0,d0
    938a:	|  |      add.l d0,d0
    938c:	|  |      adda.l d0,a0
    938e:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    9392:	|  |      movea.l 8(sp),a0
    9396:	|  |      move.l 24(a0),d0
    939a:	|  |  ,-- beq.s 93b6 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    939c:	|  |  |   movea.l 8(sp),a0
    93a0:	|  |  |   move.l 24(a0),4(sp)
    93a6:	|  |  |   move.l 1e81c <SysBase>,d0
    93ac:	|  |  |   movea.l d0,a6
    93ae:	|  |  |   movea.l 4(sp),a1
    93b2:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    93b6:	|  |  '-> addq.l #1,32(sp)
    93ba:	|  '----> movea.l 24(sp),a0
    93be:	|         move.l (a0),d0
    93c0:	|         cmp.l 32(sp),d0
    93c4:	'-------- bgt.s 9376 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    93c6:	          movea.l 24(sp),a0
    93ca:	          move.l 8(a0),20(sp)
    93d0:	          move.l 1e81c <SysBase>,d0
    93d6:	          movea.l d0,a6
    93d8:	          movea.l 20(sp),a1
    93dc:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    93e0:	          move.l 1e934 <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    93e8:	      ,-- bra.s 93f4 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    93ea:	   ,--|-> movea.l 28(sp),a0
    93ee:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    93f4:	   |  '-> movea.l 28(sp),a0
    93f8:	   |      movea.l 22(a0),a0
    93fc:	   |      move.l (a0),d1
    93fe:	   |      movea.l 40(sp),a0
    9402:	   |      move.l (a0),d0
    9404:	   |      cmp.l d1,d0
    9406:	   |  ,-- beq.s 940e <forgetSpriteBank+0xae>
    9408:	   |  |   tst.l 28(sp)
    940c:	   '--|-- bne.s 93ea <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    940e:	      '-> tst.l 28(sp)
    9412:	   ,----- beq.s 943c <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    9414:	   |      movea.l 40(sp),a0
    9418:	   |      move.l 22(a0),d0
    941c:	   |      movea.l 28(sp),a0
    9420:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    9424:	   |      move.l 40(sp),12(sp)
    942a:	   |      move.l 1e81c <SysBase>,d0
    9430:	   |      movea.l d0,a6
    9432:	   |      movea.l 12(sp),a1
    9436:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    943a:	   |  ,-- bra.s 9462 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    943c:	   '--|-> movea.l 1e934 <allLoadedBanks>,a0
    9442:	      |   move.l 22(a0),d0
    9446:	      |   move.l d0,1e934 <allLoadedBanks>
		FreeVec( forgetme);
    944c:	      |   move.l 40(sp),16(sp)
    9452:	      |   move.l 1e81c <SysBase>,d0
    9458:	      |   movea.l d0,a6
    945a:	      |   movea.l 16(sp),a1
    945e:	      |   jsr -690(a6)
}
    9462:	      '-> nop
    9464:	          movea.l (sp)+,a6
    9466:	          lea 32(sp),sp
    946a:	          rts

0000946c <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    946c:	                      lea -84(sp),sp
    9470:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    9474:	                      pea 1a397 <PutChar+0x13f1>
    947a:	                      jsr 18504 <KPrintF>
    9480:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    9482:	                      clr.l 94(sp)
    9486:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    948a:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    948e:	                      move.l 108(sp),-(sp)
    9492:	                      jsr 7ef8 <openFileFromNum>
    9498:	                      addq.l #4,sp
    949a:	                      tst.l d0
    949c:	                  ,-- bne.s 94b2 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    949e:	                  |   pea 1a3b1 <PutChar+0x140b>
    94a4:	                  |   jsr 18504 <KPrintF>
    94aa:	                  |   addq.l #4,sp
		return FALSE;
    94ac:	                  |   clr.w d0
    94ae:	,-----------------|-- bra.w 98a6 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    94b2:	|                 '-> move.l 1e802 <bigDataFile>,d0
    94b8:	|                     move.l d0,-(sp)
    94ba:	|                     jsr 6bc <get2bytes>
    94c0:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    94c2:	|                     move.l 1e802 <bigDataFile>,82(sp)
    94ca:	|                     move.l 1e824 <DOSBase>,d0
    94d0:	|                     movea.l d0,a6
    94d2:	|                     move.l 82(sp),d1
    94d6:	|                     jsr -306(a6)
    94da:	|                     move.l d0,78(sp)
    94de:	|                     move.l 78(sp),d0
    94e2:	|                     movea.l 112(sp),a0
    94e6:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    94ea:	|                     move.l 1e802 <bigDataFile>,d0
    94f0:	|                     move.l d0,-(sp)
    94f2:	|                     jsr 6bc <get2bytes>
    94f8:	|                     addq.l #4,sp
    94fa:	|                     move.l d0,74(sp)

	if (total <= 0) {
    94fe:	|                 ,-- bgt.s 9514 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    9500:	|                 |   pea 1a3df <PutChar+0x1439>
    9506:	|                 |   jsr 18504 <KPrintF>
    950c:	|                 |   addq.l #4,sp
		return FALSE;
    950e:	|                 |   clr.w d0
    9510:	+-----------------|-- bra.w 98a6 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    9514:	|                 '-> movea.l 112(sp),a0
    9518:	|                     move.l 4(a0),d0
    951c:	|                     moveq #3,d1
    951e:	|                     cmp.l d0,d1
    9520:	|                 ,-- bne.s 952e <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    9522:	|                 |   movea.l 112(sp),a0
    9526:	|                 |   move.w #1,12(a0)
    952c:	|              ,--|-- bra.s 9550 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    952e:	|              |  '-> movea.l 112(sp),a0
    9532:	|              |      move.l 4(a0),d0
    9536:	|              |      moveq #3,d1
    9538:	|              |      cmp.l d0,d1
    953a:	|              +----- bge.s 9550 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    953c:	|              |      pea 1a41f <PutChar+0x1479>
    9542:	|              |      jsr 18504 <KPrintF>
    9548:	|              |      addq.l #4,sp
		return FALSE;
    954a:	|              |      clr.w d0
    954c:	+--------------|----- bra.w 98a6 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    9550:	|              '----> movea.l 112(sp),a0
    9554:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    9558:	|                     move.l 74(sp),d1
    955c:	|                     move.l d1,d0
    955e:	|                     lsl.l #3,d0
    9560:	|                     sub.l d1,d0
    9562:	|                     add.l d0,d0
    9564:	|                     add.l d0,d0
    9566:	|                     move.l d0,70(sp)
    956a:	|                     clr.l 66(sp)
    956e:	|                     move.l 1e81c <SysBase>,d0
    9574:	|                     movea.l d0,a6
    9576:	|                     move.l 70(sp),d0
    957a:	|                     move.l 66(sp),d1
    957e:	|                     jsr -684(a6)
    9582:	|                     move.l d0,62(sp)
    9586:	|                     move.l 62(sp),d0
    958a:	|                     movea.l 112(sp),a0
    958e:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    9592:	|                     movea.l 112(sp),a0
    9596:	|                     move.l 8(a0),d0
    959a:	|                 ,-- bne.s 95a2 <loadSpriteBank+0x136>
    959c:	|                 |   clr.w d0
    959e:	+-----------------|-- bra.w 98a6 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    95a2:	|                 '-> moveq #1,d0
    95a4:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    95a8:	|                     clr.l 100(sp)
    95ac:	|     ,-------------- bra.w 9884 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    95b0:	|  ,--|-------------> move.l 1e802 <bigDataFile>,d0
    95b6:	|  |  |               move.l d0,-(sp)
    95b8:	|  |  |               jsr 6bc <get2bytes>
    95be:	|  |  |               addq.l #4,sp
    95c0:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    95c4:	|  |  |               movea.l 112(sp),a0
    95c8:	|  |  |               movea.l 8(a0),a0
    95cc:	|  |  |               move.l 100(sp),d1
    95d0:	|  |  |               move.l d1,d0
    95d2:	|  |  |               lsl.l #3,d0
    95d4:	|  |  |               sub.l d1,d0
    95d6:	|  |  |               add.l d0,d0
    95d8:	|  |  |               add.l d0,d0
    95da:	|  |  |               adda.l d0,a0
    95dc:	|  |  |               moveq #0,d0
    95de:	|  |  |               move.w 60(sp),d0
    95e2:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    95e4:	|  |  |               movea.l 1e802 <bigDataFile>,a1
    95ea:	|  |  |               movea.l 112(sp),a0
    95ee:	|  |  |               movea.l 8(a0),a0
    95f2:	|  |  |               move.l 100(sp),d1
    95f6:	|  |  |               move.l d1,d0
    95f8:	|  |  |               lsl.l #3,d0
    95fa:	|  |  |               sub.l d1,d0
    95fc:	|  |  |               add.l d0,d0
    95fe:	|  |  |               add.l d0,d0
    9600:	|  |  |               lea (0,a0,d0.l),a2
    9604:	|  |  |               move.l a1,-(sp)
    9606:	|  |  |               jsr 6bc <get2bytes>
    960c:	|  |  |               addq.l #4,sp
    960e:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    9612:	|  |  |               movea.l 1e802 <bigDataFile>,a1
    9618:	|  |  |               movea.l 112(sp),a0
    961c:	|  |  |               movea.l 8(a0),a0
    9620:	|  |  |               move.l 100(sp),d1
    9624:	|  |  |               move.l d1,d0
    9626:	|  |  |               lsl.l #3,d0
    9628:	|  |  |               sub.l d1,d0
    962a:	|  |  |               add.l d0,d0
    962c:	|  |  |               add.l d0,d0
    962e:	|  |  |               lea (0,a0,d0.l),a2
    9632:	|  |  |               move.l a1,-(sp)
    9634:	|  |  |               jsr 6bc <get2bytes>
    963a:	|  |  |               addq.l #4,sp
    963c:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    9640:	|  |  |               movea.l 1e802 <bigDataFile>,a1
    9646:	|  |  |               movea.l 112(sp),a0
    964a:	|  |  |               movea.l 8(a0),a0
    964e:	|  |  |               move.l 100(sp),d1
    9652:	|  |  |               move.l d1,d0
    9654:	|  |  |               lsl.l #3,d0
    9656:	|  |  |               sub.l d1,d0
    9658:	|  |  |               add.l d0,d0
    965a:	|  |  |               add.l d0,d0
    965c:	|  |  |               lea (0,a0,d0.l),a2
    9660:	|  |  |               move.l a1,-(sp)
    9662:	|  |  |               jsr 6bc <get2bytes>
    9668:	|  |  |               addq.l #4,sp
    966a:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    966e:	|  |  |               movea.l 112(sp),a0
    9672:	|  |  |               move.l 4(a0),d0
    9676:	|  |  |               moveq #3,d1
    9678:	|  |  |               cmp.l d0,d1
    967a:	|  |  |     ,-------- beq.w 9716 <loadSpriteBank+0x2aa>
    967e:	|  |  |     |         moveq #3,d1
    9680:	|  |  |     |         cmp.l d0,d1
    9682:	|  |  |  ,--|-------- blt.w 97bc <loadSpriteBank+0x350>
    9686:	|  |  |  |  |         moveq #1,d1
    9688:	|  |  |  |  |         cmp.l d0,d1
    968a:	|  |  |  |  |     ,-- beq.s 9696 <loadSpriteBank+0x22a>
    968c:	|  |  |  |  |     |   moveq #2,d1
    968e:	|  |  |  |  |     |   cmp.l d0,d1
    9690:	|  |  |  |  |  ,--|-- beq.s 96c2 <loadSpriteBank+0x256>
    9692:	|  |  |  +--|--|--|-- bra.w 97bc <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    9696:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    969a:	|  |  |  |  |  |      movea.l 8(a0),a0
    969e:	|  |  |  |  |  |      move.l 100(sp),d1
    96a2:	|  |  |  |  |  |      move.l d1,d0
    96a4:	|  |  |  |  |  |      lsl.l #3,d0
    96a6:	|  |  |  |  |  |      sub.l d1,d0
    96a8:	|  |  |  |  |  |      add.l d0,d0
    96aa:	|  |  |  |  |  |      add.l d0,d0
    96ac:	|  |  |  |  |  |      adda.l d0,a0
    96ae:	|  |  |  |  |  |      move.l 4(a0),d0
    96b2:	|  |  |  |  |  |      addq.l #2,d0
    96b4:	|  |  |  |  |  |      move.l d0,d0
    96b6:	|  |  |  |  |  |      add.w d0,d0
    96b8:	|  |  |  |  |  |      add.w d0,d0
    96ba:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    96be:	|  |  |  +--|--|----- bra.w 97bc <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    96c2:	|  |  |  |  |  '----> movea.l 112(sp),a0
    96c6:	|  |  |  |  |         movea.l 8(a0),a0
    96ca:	|  |  |  |  |         move.l 100(sp),d1
    96ce:	|  |  |  |  |         move.l d1,d0
    96d0:	|  |  |  |  |         lsl.l #3,d0
    96d2:	|  |  |  |  |         sub.l d1,d0
    96d4:	|  |  |  |  |         add.l d0,d0
    96d6:	|  |  |  |  |         add.l d0,d0
    96d8:	|  |  |  |  |         adda.l d0,a0
    96da:	|  |  |  |  |         move.l (a0),d0
    96dc:	|  |  |  |  |     ,-- bpl.s 96e0 <loadSpriteBank+0x274>
    96de:	|  |  |  |  |     |   addq.l #7,d0
    96e0:	|  |  |  |  |     '-> asr.l #3,d0
    96e2:	|  |  |  |  |         move.l d0,d2
    96e4:	|  |  |  |  |         movea.l 112(sp),a0
    96e8:	|  |  |  |  |         movea.l 8(a0),a0
    96ec:	|  |  |  |  |         move.l 100(sp),d1
    96f0:	|  |  |  |  |         move.l d1,d0
    96f2:	|  |  |  |  |         lsl.l #3,d0
    96f4:	|  |  |  |  |         sub.l d1,d0
    96f6:	|  |  |  |  |         add.l d0,d0
    96f8:	|  |  |  |  |         add.l d0,d0
    96fa:	|  |  |  |  |         adda.l d0,a0
    96fc:	|  |  |  |  |         move.l 4(a0),d0
    9700:	|  |  |  |  |         move.l d0,d0
    9702:	|  |  |  |  |         move.w d2,d1
    9704:	|  |  |  |  |         muls.w d0,d1
    9706:	|  |  |  |  |         move.w d1,d0
    9708:	|  |  |  |  |         add.w d0,d0
    970a:	|  |  |  |  |         add.w d1,d0
    970c:	|  |  |  |  |         add.w d0,d0
    970e:	|  |  |  |  |         move.w d0,98(sp)
				break;
    9712:	|  |  |  +--|-------- bra.w 97bc <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    9716:	|  |  |  |  '-------> movea.l 112(sp),a0
    971a:	|  |  |  |            movea.l 8(a0),a0
    971e:	|  |  |  |            move.l 100(sp),d1
    9722:	|  |  |  |            move.l d1,d0
    9724:	|  |  |  |            lsl.l #3,d0
    9726:	|  |  |  |            sub.l d1,d0
    9728:	|  |  |  |            add.l d0,d0
    972a:	|  |  |  |            add.l d0,d0
    972c:	|  |  |  |            adda.l d0,a0
    972e:	|  |  |  |            move.l (a0),d0
    9730:	|  |  |  |            andi.l #-2147483633,d0
    9736:	|  |  |  |        ,-- bpl.s 9740 <loadSpriteBank+0x2d4>
    9738:	|  |  |  |        |   subq.l #1,d0
    973a:	|  |  |  |        |   moveq #-16,d1
    973c:	|  |  |  |        |   or.l d1,d0
    973e:	|  |  |  |        |   addq.l #1,d0
    9740:	|  |  |  |        '-> tst.l d0
    9742:	|  |  |  |     ,----- ble.s 9748 <loadSpriteBank+0x2dc>
    9744:	|  |  |  |     |      moveq #2,d0
    9746:	|  |  |  |     |  ,-- bra.s 974a <loadSpriteBank+0x2de>
    9748:	|  |  |  |     '--|-> clr.w d0
    974a:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    974e:	|  |  |  |            movea.l 112(sp),a0
    9752:	|  |  |  |            movea.l 8(a0),a0
    9756:	|  |  |  |            move.l 100(sp),d1
    975a:	|  |  |  |            move.l d1,d0
    975c:	|  |  |  |            lsl.l #3,d0
    975e:	|  |  |  |            sub.l d1,d0
    9760:	|  |  |  |            add.l d0,d0
    9762:	|  |  |  |            add.l d0,d0
    9764:	|  |  |  |            adda.l d0,a0
    9766:	|  |  |  |            move.l (a0),d0
    9768:	|  |  |  |            movea.l d0,a0
    976a:	|  |  |  |            cmpa.w #0,a0
    976e:	|  |  |  |        ,-- bge.s 9774 <loadSpriteBank+0x308>
    9770:	|  |  |  |        |   lea 15(a0),a0
    9774:	|  |  |  |        '-> move.l a0,d0
    9776:	|  |  |  |            asr.l #4,d0
    9778:	|  |  |  |            add.l d0,d0
    977a:	|  |  |  |            move.l d0,d1
    977c:	|  |  |  |            moveq #0,d0
    977e:	|  |  |  |            move.w 58(sp),d0
    9782:	|  |  |  |            add.l d1,d0
    9784:	|  |  |  |            move.l d0,d2
    9786:	|  |  |  |            movea.l 112(sp),a0
    978a:	|  |  |  |            movea.l 8(a0),a0
    978e:	|  |  |  |            move.l 100(sp),d1
    9792:	|  |  |  |            move.l d1,d0
    9794:	|  |  |  |            lsl.l #3,d0
    9796:	|  |  |  |            sub.l d1,d0
    9798:	|  |  |  |            add.l d0,d0
    979a:	|  |  |  |            add.l d0,d0
    979c:	|  |  |  |            adda.l d0,a0
    979e:	|  |  |  |            move.l 4(a0),d0
    97a2:	|  |  |  |            move.l d0,d0
    97a4:	|  |  |  |            move.w d2,d1
    97a6:	|  |  |  |            muls.w d0,d1
    97a8:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    97ac:	|  |  |  |            cmpi.w #100,98(sp)
    97b2:	|  |  |  |        ,-- bls.s 97ba <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    97b4:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    97ba:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    97bc:	|  |  |  '----------> moveq #0,d0
    97be:	|  |  |               move.w 98(sp),d0
    97c2:	|  |  |               add.l d0,d0
    97c4:	|  |  |               move.l d0,52(sp)
    97c8:	|  |  |               moveq #2,d0
    97ca:	|  |  |               move.l d0,48(sp)
    97ce:	|  |  |               move.l 1e81c <SysBase>,d0
    97d4:	|  |  |               movea.l d0,a6
    97d6:	|  |  |               move.l 52(sp),d0
    97da:	|  |  |               move.l 48(sp),d1
    97de:	|  |  |               jsr -684(a6)
    97e2:	|  |  |               move.l d0,44(sp)
    97e6:	|  |  |               movea.l 44(sp),a1
    97ea:	|  |  |               movea.l 112(sp),a0
    97ee:	|  |  |               movea.l 8(a0),a0
    97f2:	|  |  |               move.l 100(sp),d1
    97f6:	|  |  |               move.l d1,d0
    97f8:	|  |  |               lsl.l #3,d0
    97fa:	|  |  |               sub.l d1,d0
    97fc:	|  |  |               add.l d0,d0
    97fe:	|  |  |               add.l d0,d0
    9800:	|  |  |               adda.l d0,a0
    9802:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    9806:	|  |  |               move.l 1e802 <bigDataFile>,40(sp)
    980e:	|  |  |               movea.l 112(sp),a0
    9812:	|  |  |               movea.l 8(a0),a0
    9816:	|  |  |               move.l 100(sp),d1
    981a:	|  |  |               move.l d1,d0
    981c:	|  |  |               lsl.l #3,d0
    981e:	|  |  |               sub.l d1,d0
    9820:	|  |  |               add.l d0,d0
    9822:	|  |  |               add.l d0,d0
    9824:	|  |  |               adda.l d0,a0
    9826:	|  |  |               move.l 24(a0),36(sp)
    982c:	|  |  |               moveq #2,d1
    982e:	|  |  |               move.l d1,32(sp)
    9832:	|  |  |               move.w 98(sp),d0
    9836:	|  |  |               lsr.w #1,d0
    9838:	|  |  |               move.w d0,d0
    983a:	|  |  |               andi.l #65535,d0
    9840:	|  |  |               move.l d0,28(sp)
    9844:	|  |  |               move.l 1e824 <DOSBase>,d0
    984a:	|  |  |               movea.l d0,a6
    984c:	|  |  |               move.l 40(sp),d1
    9850:	|  |  |               move.l 36(sp),d2
    9854:	|  |  |               move.l 32(sp),d3
    9858:	|  |  |               move.l 28(sp),d4
    985c:	|  |  |               jsr -324(a6)
    9860:	|  |  |               move.l d0,24(sp)
    9864:	|  |  |               move.l 24(sp),d0
    9868:	|  |  |               move.w d0,22(sp)
		if (!count) {
    986c:	|  |  |           ,-- bne.s 9880 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    986e:	|  |  |           |   pea 1a454 <PutChar+0x14ae>
    9874:	|  |  |           |   jsr 18504 <KPrintF>
    987a:	|  |  |           |   addq.l #4,sp
			return FALSE;
    987c:	|  |  |           |   clr.w d0
    987e:	+--|--|-----------|-- bra.s 98a6 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    9880:	|  |  |           '-> addq.l #1,100(sp)
    9884:	|  |  '-------------> move.l 100(sp),d0
    9888:	|  |                  cmp.l 74(sp),d0
    988c:	|  '----------------- blt.w 95b0 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    9890:	|                     jsr 7df0 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    9896:	|                     pea 1a487 <PutChar+0x14e1>
    989c:	|                     jsr 18504 <KPrintF>
    98a2:	|                     addq.l #4,sp
	return TRUE;
    98a4:	|                     moveq #1,d0
}
    98a6:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    98aa:	                      lea 84(sp),sp
    98ae:	                      rts

000098b0 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    98b0:	                   lea -16(sp),sp
    98b4:	                   move.l d2,-(sp)
    98b6:	                   move.l 32(sp),d0
    98ba:	                   move.w d0,d0
    98bc:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    98c0:	                   movea.l 28(sp),a0
    98c4:	                   move.l (a0),d2
    98c6:	                   movea.l 24(sp),a0
    98ca:	                   move.l 8(a0),d0
    98ce:	                   move.l d0,-(sp)
    98d0:	                   jsr 18936 <__floatsisf>
    98d6:	                   addq.l #4,sp
    98d8:	                   move.l d0,-(sp)
    98da:	                   move.l d2,-(sp)
    98dc:	                   jsr 18c2a <__subsf3>
    98e2:	                   addq.l #8,sp
    98e4:	                   move.l d0,-(sp)
    98e6:	                   jsr 188ce <__fixsfsi>
    98ec:	                   addq.l #4,sp
    98ee:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    98f2:	                   movea.l 28(sp),a0
    98f6:	                   move.l 4(a0),d2
    98fa:	                   movea.l 24(sp),a0
    98fe:	                   move.l 12(a0),d0
    9902:	                   move.l d0,-(sp)
    9904:	                   jsr 18936 <__floatsisf>
    990a:	                   addq.l #4,sp
    990c:	                   move.l d0,-(sp)
    990e:	                   move.l d2,-(sp)
    9910:	                   jsr 18c2a <__subsf3>
    9916:	                   addq.l #8,sp
    9918:	                   move.l d0,-(sp)
    991a:	                   jsr 188ce <__fixsfsi>
    9920:	                   addq.l #4,sp
    9922:	                   move.w d0,8(sp)

	if( x < 0)
    9926:	                   tst.w 18(sp)
    992a:	               ,-- bge.s 995e <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    992c:	               |   movea.l 28(sp),a0
    9930:	               |   move.l (a0),d2
    9932:	               |   movea.l 24(sp),a0
    9936:	               |   move.l 8(a0),d0
    993a:	               |   move.l d0,-(sp)
    993c:	               |   jsr 18936 <__floatsisf>
    9942:	               |   addq.l #4,sp
    9944:	               |   move.l d0,-(sp)
    9946:	               |   move.l d2,-(sp)
    9948:	               |   jsr 18c2a <__subsf3>
    994e:	               |   addq.l #8,sp
    9950:	               |   move.l d0,-(sp)
    9952:	               |   jsr 188ce <__fixsfsi>
    9958:	               |   addq.l #4,sp
    995a:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    995e:	               '-> movea.w 8(sp),a1
    9962:	                   movea.w 18(sp),a0
    9966:	                   pea 1 <_start+0x1>
    996a:	                   move.l a1,-(sp)
    996c:	                   move.l a0,-(sp)
    996e:	                   move.l 40(sp),-(sp)
    9972:	                   move.l 40(sp),-(sp)
    9976:	                   jsr 30f6 <CstScaleSprite>
    997c:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    9980:	                   movea.l 28(sp),a0
    9984:	                   move.l 118(a0),d0
    9988:	                   moveq #8,d1
    998a:	                   and.l d1,d0
    998c:	   ,-------------- beq.w 9a58 <scaleSprite+0x1a8>
		if (single->xhot < 0)
    9990:	   |               movea.l 24(sp),a0
    9994:	   |               move.l 8(a0),d0
    9998:	   |  ,----------- bpl.s 99d4 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    999a:	   |  |            move.w 18(sp),d0
    999e:	   |  |            tst.w 6(sp)
    99a2:	   |  |     ,----- beq.s 99bc <scaleSprite+0x10c>
    99a4:	   |  |     |      movea.l 24(sp),a0
    99a8:	   |  |     |      move.l (a0),d1
    99aa:	   |  |     |      move.l d1,d2
    99ac:	   |  |     |      movea.l 24(sp),a0
    99b0:	   |  |     |      move.l 8(a0),d1
    99b4:	   |  |     |      move.l d1,d1
    99b6:	   |  |     |      movea.w d2,a0
    99b8:	   |  |     |      suba.w d1,a0
    99ba:	   |  |     |  ,-- bra.s 99ca <scaleSprite+0x11a>
    99bc:	   |  |     '--|-> movea.l 24(sp),a0
    99c0:	   |  |        |   move.l 8(a0),d1
    99c4:	   |  |        |   move.l d1,d1
    99c6:	   |  |        |   movea.w d1,a0
    99c8:	   |  |        |   addq.w #1,a0
    99ca:	   |  |        '-> move.w d0,d1
    99cc:	   |  |            sub.w a0,d1
    99ce:	   |  |            move.w d1,16(sp)
    99d2:	   |  |  ,-------- bra.s 9a0c <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    99d4:	   |  '--|-------> move.w 18(sp),d1
    99d8:	   |     |         tst.w 6(sp)
    99dc:	   |     |  ,----- beq.s 99fa <scaleSprite+0x14a>
    99de:	   |     |  |      movea.l 24(sp),a0
    99e2:	   |     |  |      move.l (a0),d0
    99e4:	   |     |  |      move.l d0,d2
    99e6:	   |     |  |      movea.l 24(sp),a0
    99ea:	   |     |  |      move.l 8(a0),d0
    99ee:	   |     |  |      move.l d0,d0
    99f0:	   |     |  |      movea.w d2,a0
    99f2:	   |     |  |      suba.w d0,a0
    99f4:	   |     |  |      move.w a0,d0
    99f6:	   |     |  |      subq.w #1,d0
    99f8:	   |     |  |  ,-- bra.s 9a04 <scaleSprite+0x154>
    99fa:	   |     |  '--|-> movea.l 24(sp),a0
    99fe:	   |     |     |   move.l 8(a0),d0
    9a02:	   |     |     |   move.l d0,d0
    9a04:	   |     |     '-> movea.w d1,a0
    9a06:	   |     |         suba.w d0,a0
    9a08:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9a0c:	   |     '-------> movea.l 28(sp),a0
    9a10:	   |               move.l 24(a0),d0
    9a14:	   |               move.l d0,d1
    9a16:	   |               movea.l 24(sp),a0
    9a1a:	   |               move.l 12(a0),d0
    9a1e:	   |               move.l d0,d0
    9a20:	   |               sub.w d0,d1
    9a22:	   |               move.w 8(sp),d0
    9a26:	   |               movea.w d1,a0
    9a28:	   |               adda.w d0,a0
    9a2a:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    9a2e:	   |               movea.l 24(sp),a0
    9a32:	   |               move.l (a0),d0
    9a34:	   |               move.l d0,d0
    9a36:	   |               move.w 16(sp),d1
    9a3a:	   |               add.w d0,d1
    9a3c:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    9a40:	   |               movea.l 24(sp),a0
    9a44:	   |               move.l 4(a0),d0
    9a48:	   |               move.l d0,d0
    9a4a:	   |               movea.w 14(sp),a0
    9a4e:	   |               adda.w d0,a0
    9a50:	   |               move.w a0,10(sp)
    9a54:	,--|-------------- bra.w 9b40 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    9a58:	|  '-------------> move.w 18(sp),d1
    9a5c:	|                  move.l 1e8d6 <cameraX>,d0
    9a62:	|                  move.l d0,d0
    9a64:	|                  sub.w d0,d1
    9a66:	|                  move.w d1,18(sp)
		y -= cameraY;
    9a6a:	|                  move.w 8(sp),d1
    9a6e:	|                  move.l 1e8da <cameraY>,d0
    9a74:	|                  move.l d0,d0
    9a76:	|                  sub.w d0,d1
    9a78:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    9a7c:	|                  movea.l 24(sp),a0
    9a80:	|                  move.l 8(a0),d0
    9a84:	|     ,----------- bpl.s 9ac0 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9a86:	|     |            move.w 18(sp),d0
    9a8a:	|     |            tst.w 6(sp)
    9a8e:	|     |     ,----- beq.s 9aa8 <scaleSprite+0x1f8>
    9a90:	|     |     |      movea.l 24(sp),a0
    9a94:	|     |     |      move.l (a0),d1
    9a96:	|     |     |      move.l d1,d2
    9a98:	|     |     |      movea.l 24(sp),a0
    9a9c:	|     |     |      move.l 8(a0),d1
    9aa0:	|     |     |      move.l d1,d1
    9aa2:	|     |     |      movea.w d2,a0
    9aa4:	|     |     |      suba.w d1,a0
    9aa6:	|     |     |  ,-- bra.s 9ab6 <scaleSprite+0x206>
    9aa8:	|     |     '--|-> movea.l 24(sp),a0
    9aac:	|     |        |   move.l 8(a0),d1
    9ab0:	|     |        |   move.l d1,d1
    9ab2:	|     |        |   movea.w d1,a0
    9ab4:	|     |        |   addq.w #1,a0
    9ab6:	|     |        '-> move.w d0,d1
    9ab8:	|     |            sub.w a0,d1
    9aba:	|     |            move.w d1,16(sp)
    9abe:	|     |  ,-------- bra.s 9af8 <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9ac0:	|     '--|-------> move.w 18(sp),d1
    9ac4:	|        |         tst.w 6(sp)
    9ac8:	|        |  ,----- beq.s 9ae6 <scaleSprite+0x236>
    9aca:	|        |  |      movea.l 24(sp),a0
    9ace:	|        |  |      move.l (a0),d0
    9ad0:	|        |  |      move.l d0,d2
    9ad2:	|        |  |      movea.l 24(sp),a0
    9ad6:	|        |  |      move.l 8(a0),d0
    9ada:	|        |  |      move.l d0,d0
    9adc:	|        |  |      movea.w d2,a0
    9ade:	|        |  |      suba.w d0,a0
    9ae0:	|        |  |      move.w a0,d0
    9ae2:	|        |  |      subq.w #1,d0
    9ae4:	|        |  |  ,-- bra.s 9af0 <scaleSprite+0x240>
    9ae6:	|        |  '--|-> movea.l 24(sp),a0
    9aea:	|        |     |   move.l 8(a0),d0
    9aee:	|        |     |   move.l d0,d0
    9af0:	|        |     '-> movea.w d1,a0
    9af2:	|        |         suba.w d0,a0
    9af4:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9af8:	|        '-------> movea.l 28(sp),a0
    9afc:	|                  move.l 24(a0),d0
    9b00:	|                  move.l d0,d1
    9b02:	|                  movea.l 24(sp),a0
    9b06:	|                  move.l 12(a0),d0
    9b0a:	|                  move.l d0,d0
    9b0c:	|                  sub.w d0,d1
    9b0e:	|                  move.w 8(sp),d0
    9b12:	|                  movea.w d1,a0
    9b14:	|                  adda.w d0,a0
    9b16:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    9b1a:	|                  movea.l 24(sp),a0
    9b1e:	|                  move.l (a0),d0
    9b20:	|                  move.l d0,d0
    9b22:	|                  move.w 16(sp),d1
    9b26:	|                  add.w d0,d1
    9b28:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    9b2c:	|                  movea.l 24(sp),a0
    9b30:	|                  move.l 4(a0),d0
    9b34:	|                  move.l d0,d0
    9b36:	|                  movea.w 14(sp),a0
    9b3a:	|                  adda.w d0,a0
    9b3c:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    9b40:	'----------------> move.l 1e7d6 <input+0xa>,d1
    9b46:	                   moveq #0,d0
    9b48:	                   move.w 16(sp),d0
    9b4c:	                   cmp.l d1,d0
    9b4e:	            ,----- bgt.s 9b84 <scaleSprite+0x2d4>
    9b50:	            |      move.l 1e7d6 <input+0xa>,d1
    9b56:	            |      moveq #0,d0
    9b58:	            |      move.w 12(sp),d0
    9b5c:	            |      cmp.l d1,d0
    9b5e:	            +----- blt.s 9b84 <scaleSprite+0x2d4>
    9b60:	            |      move.l 1e7da <input+0xe>,d1
    9b66:	            |      moveq #0,d0
    9b68:	            |      move.w 14(sp),d0
    9b6c:	            |      cmp.l d1,d0
    9b6e:	            +----- bgt.s 9b84 <scaleSprite+0x2d4>
    9b70:	            |      move.l 1e7da <input+0xe>,d1
    9b76:	            |      moveq #0,d0
    9b78:	            |      move.w 10(sp),d0
    9b7c:	            |      cmp.l d1,d0
    9b7e:	            +----- blt.s 9b84 <scaleSprite+0x2d4>
		return TRUE;
    9b80:	            |      moveq #1,d0
    9b82:	            |  ,-- bra.s 9b86 <scaleSprite+0x2d6>
	}
	return FALSE;
    9b84:	            '--|-> clr.w d0
    9b86:	               '-> move.l (sp)+,d2
    9b88:	                   lea 16(sp),sp
    9b8c:	                   rts

00009b8e <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    9b8e:	    move.l 4(sp),d0
    9b92:	,-- bpl.s 9b96 <TF_abs+0x8>
    9b94:	|   neg.l d0
}
    9b96:	'-> rts

00009b98 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9b98:	             lea -28(sp),sp
    9b9c:	             move.l a6,-(sp)
    9b9e:	             move.l d2,-(sp)
	
	struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9ba0:	             move.l #132,28(sp)
    9ba8:	             clr.l 24(sp)
    9bac:	             move.l 1e81c <SysBase>,d0
    9bb2:	             movea.l d0,a6
    9bb4:	             move.l 28(sp),d0
    9bb8:	             move.l 24(sp),d1
    9bbc:	             jsr -684(a6)
    9bc0:	             move.l d0,20(sp)
    9bc4:	             move.l 20(sp),d0
    9bc8:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    9bcc:	         ,-- bne.s 9bd4 <addPerson+0x3c>
    9bce:	         |   clr.w d0
    9bd0:	,--------|-- bra.w 9e04 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    9bd4:	|        '-> move.l 48(sp),-(sp)
    9bd8:	|            jsr dffc <loadObjectType>
    9bde:	|            addq.l #4,sp
    9be0:	|            movea.l 16(sp),a0
    9be4:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    9be8:	|            movea.l 16(sp),a0
    9bec:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    9bf4:	|            movea.l 16(sp),a0
    9bf8:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    9bfc:	|            movea.l 16(sp),a0
    9c00:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    9c04:	|            move.l 44(sp),-(sp)
    9c08:	|            jsr 18936 <__floatsisf>
    9c0e:	|            addq.l #4,sp
    9c10:	|            move.l d0,d2
    9c12:	|            move.l 40(sp),-(sp)
    9c16:	|            jsr 18936 <__floatsisf>
    9c1c:	|            addq.l #4,sp
    9c1e:	|            move.l d2,-(sp)
    9c20:	|            move.l d0,-(sp)
    9c22:	|            move.l 24(sp),-(sp)
    9c26:	|            jsr b748 <moveAndScale>
    9c2c:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9c30:	|            movea.l 16(sp),a0
    9c34:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    9c38:	|            movea.l 16(sp),a0
    9c3c:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    9c42:	|            movea.l 16(sp),a0
    9c46:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    9c4c:	|            movea.l 16(sp),a0
    9c50:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    9c54:	|            movea.l 16(sp),a0
    9c58:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9c5c:	|            movea.l 16(sp),a0
    9c60:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    9c66:	|            movea.l 16(sp),a0
    9c6a:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9c6e:	|            movea.l 16(sp),a0
    9c72:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9c7a:	|            movea.l 16(sp),a0
    9c7e:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9c86:	|            movea.l 16(sp),a0
    9c8a:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9c8e:	|            movea.l 16(sp),a0
    9c92:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    9c96:	|            movea.l 16(sp),a0
    9c9a:	|            movea.l 114(a0),a0
    9c9e:	|            move.l 24(a0),d0
    9ca2:	|            movea.l 16(sp),a0
    9ca6:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9caa:	|            movea.l 16(sp),a0
    9cae:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9cb2:	|            movea.l 16(sp),a0
    9cb6:	|            movea.l 114(a0),a0
    9cba:	|            move.l 32(a0),d0
    9cbe:	|            movea.l 16(sp),a0
    9cc2:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9cc6:	|            movea.l 16(sp),a0
    9cca:	|            clr.b 126(a0)
    newPerson->g = 0;
    9cce:	|            movea.l 16(sp),a0
    9cd2:	|            clr.b 127(a0)
    newPerson->b = 0;
    9cd6:	|            movea.l 16(sp),a0
    9cda:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    9cde:	|            movea.l 16(sp),a0
    9ce2:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    9ce6:	|            movea.l 16(sp),a0
    9cea:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    9cee:	|            movea.l 16(sp),a0
    9cf2:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    9cf8:	|            clr.l -(sp)
    9cfa:	|            move.l 20(sp),-(sp)
    9cfe:	|            jsr 46ee <setFrames>
    9d04:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    9d06:	|            movea.l 52(sp),a0
    9d0a:	|            movea.l (a0),a0
    9d0c:	|            movea.l (a0),a0
    9d0e:	|            movea.l 4(a0),a0
    9d12:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    9d16:	|     ,----- bpl.s 9d20 <addPerson+0x188>
    9d18:	|     |      move.l 12(sp),d0
    9d1c:	|     |      neg.l d0
    9d1e:	|     |  ,-- bra.s 9d22 <addPerson+0x18a>
    9d20:	|     '--|-> moveq #1,d0
    9d22:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    9d26:	|            movea.l 52(sp),a0
    9d2a:	|            movea.l (a0),a0
    9d2c:	|            movea.l (a0),a0
    9d2e:	|            movea.l (a0),a0
    9d30:	|            move.l 8(a0),d0
    9d34:	|            cmp.l 8(sp),d0
    9d38:	|     ,----- bgt.s 9d6a <addPerson+0x1d2>
        if (fNumSigned < 0) {
    9d3a:	|     |      tst.l 12(sp)
    9d3e:	|     |  ,-- bge.s 9d4c <addPerson+0x1b4>
            newPerson->height = 5;
    9d40:	|     |  |   movea.l 16(sp),a0
    9d44:	|     |  |   moveq #5,d0
    9d46:	|     |  |   move.l d0,20(a0)
    9d4a:	|  ,--|--|-- bra.s 9d96 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    9d4c:	|  |  |  '-> movea.l 52(sp),a0
    9d50:	|  |  |      movea.l (a0),a0
    9d52:	|  |  |      movea.l (a0),a0
    9d54:	|  |  |      movea.l (a0),a0
    9d56:	|  |  |      movea.l 16(a0),a0
    9d5a:	|  |  |      move.l 12(a0),d0
    9d5e:	|  |  |      addq.l #5,d0
    9d60:	|  |  |      movea.l 16(sp),a0
    9d64:	|  |  |      move.l d0,20(a0)
    9d68:	|  +--|----- bra.s 9d96 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9d6a:	|  |  '----> movea.l 52(sp),a0
    9d6e:	|  |         movea.l (a0),a0
    9d70:	|  |         movea.l (a0),a0
    9d72:	|  |         movea.l (a0),a0
    9d74:	|  |         movea.l 16(a0),a0
    9d78:	|  |         move.l 8(sp),d1
    9d7c:	|  |         move.l d1,d0
    9d7e:	|  |         lsl.l #3,d0
    9d80:	|  |         sub.l d1,d0
    9d82:	|  |         add.l d0,d0
    9d84:	|  |         add.l d0,d0
    9d86:	|  |         adda.l d0,a0
    9d88:	|  |         move.l 12(a0),d0
    9d8c:	|  |         addq.l #5,d0
    9d8e:	|  |         movea.l 16(sp),a0
    9d92:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    9d96:	|  '-------> move.l #125056,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9d9e:	|        ,-- bra.s 9dae <addPerson+0x216>
        changethat = &((*changethat)->next);
    9da0:	|     ,--|-> movea.l 32(sp),a0
    9da4:	|     |  |   move.l (a0),d0
    9da6:	|     |  |   moveq #36,d1
    9da8:	|     |  |   add.l d0,d1
    9daa:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9dae:	|     |  '-> movea.l 32(sp),a0
    9db2:	|     |      move.l (a0),d0
    9db4:	|     |  ,-- beq.s 9ddc <addPerson+0x244>
    9db6:	|     |  |   movea.l 32(sp),a0
    9dba:	|     |  |   movea.l (a0),a0
    9dbc:	|     |  |   move.l 4(a0),d2
    9dc0:	|     |  |   move.l 44(sp),-(sp)
    9dc4:	|     |  |   jsr 18936 <__floatsisf>
    9dca:	|     |  |   addq.l #4,sp
    9dcc:	|     |  |   move.l d0,-(sp)
    9dce:	|     |  |   move.l d2,-(sp)
    9dd0:	|     |  |   jsr 18b5c <__ltsf2>
    9dd6:	|     |  |   addq.l #8,sp
    9dd8:	|     |  |   tst.l d0
    9dda:	|     '--|-- blt.s 9da0 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9ddc:	|        '-> movea.l 32(sp),a0
    9de0:	|            move.l (a0),d0
    9de2:	|            movea.l 16(sp),a0
    9de6:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    9dea:	|            movea.l 32(sp),a0
    9dee:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    9df2:	|            movea.l 16(sp),a0
    9df6:	|            move.l 114(a0),d0
    9dfa:	|            sne d0
    9dfc:	|            neg.b d0
    9dfe:	|            move.b d0,d0
    9e00:	|            andi.w #255,d0
}
    9e04:	'----------> move.l (sp)+,d2
    9e06:	             movea.l (sp)+,a6
    9e08:	             lea 28(sp),sp
    9e0c:	             rts

00009e0e <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    9e0e:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9e10:	       move.l 8(sp),-(sp)
    9e14:	       jsr af9e <findPerson>
    9e1a:	       addq.l #4,sp
    9e1c:	       move.l d0,(sp)
    if (moveMe) {
    9e1e:	,----- beq.s 9e52 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    9e20:	|      movea.l (sp),a0
    9e22:	|      move.l 68(a0),d0
    9e26:	|  ,-- beq.s 9e38 <animatePerson+0x2a>
    9e28:	|  |   movea.l (sp),a0
    9e2a:	|  |   move.l 68(a0),d0
    9e2e:	|  |   move.l d0,-(sp)
    9e30:	|  |   jsr 5548 <abortFunction>
    9e36:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    9e38:	|  '-> movea.l (sp),a0
    9e3a:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    9e3e:	|      movea.l (sp),a0
    9e40:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    9e44:	|      movea.l (sp),a0
    9e46:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    9e4a:	|      movea.l (sp),a0
    9e4c:	|      move.l 12(sp),72(a0)
    }
}
    9e52:	'----> nop
    9e54:	       addq.l #4,sp
    9e56:	       rts

00009e58 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    9e58:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9e5a:	       move.l 8(sp),-(sp)
    9e5e:	       jsr af9e <findPerson>
    9e64:	       addq.l #4,sp
    9e66:	       move.l d0,(sp)
    if (moveMe) {
    9e68:	,----- beq.s 9eaa <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9e6a:	|      movea.l (sp),a0
    9e6c:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9e70:	|      movea.l (sp),a0
    9e72:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9e78:	|      move.l (sp),-(sp)
    9e7a:	|      jsr b8d6 <rethinkAngle>
    9e80:	|      addq.l #4,sp
        if (moveMe->walking) {
    9e82:	|      movea.l (sp),a0
    9e84:	|      move.w 64(a0),d0
    9e88:	|  ,-- beq.s 9e9c <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9e8a:	|  |   pea 1 <_start+0x1>
    9e8e:	|  |   move.l 4(sp),-(sp)
    9e92:	|  |   jsr 46ee <setFrames>
    9e98:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9e9a:	+--|-- bra.s 9eaa <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9e9c:	|  '-> clr.l -(sp)
    9e9e:	|      move.l 4(sp),-(sp)
    9ea2:	|      jsr 46ee <setFrames>
    9ea8:	|      addq.l #8,sp
}
    9eaa:	'----> nop
    9eac:	       addq.l #4,sp
    9eae:	       rts

00009eb0 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9eb0:	             lea -36(sp),sp
    9eb4:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9eb6:	             movea.l 44(sp),a0
    9eba:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9ec0:	             moveq #12,d0
    9ec2:	             move.l d0,28(sp)
    9ec6:	             clr.l 24(sp)
    9eca:	             move.l 1e81c <SysBase>,d0
    9ed0:	             movea.l d0,a6
    9ed2:	             move.l 28(sp),d0
    9ed6:	             move.l 24(sp),d1
    9eda:	             jsr -684(a6)
    9ede:	             move.l d0,20(sp)
    9ee2:	             move.l 20(sp),d0
    9ee6:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9eea:	         ,-- bne.s 9f00 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    9eec:	         |   pea 1a4a1 <PutChar+0x14fb>
    9ef2:	         |   jsr 18504 <KPrintF>
    9ef8:	         |   addq.l #4,sp
		return NULL;
    9efa:	         |   moveq #0,d0
    9efc:	,--------|-- bra.w a052 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9f00:	|        '-> movea.l 44(sp),a0
    9f04:	|            move.l (a0),d0
    9f06:	|            movea.l 16(sp),a0
    9f0a:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    9f0c:	|            movea.l 16(sp),a0
    9f10:	|            movea.l (a0),a0
    9f12:	|            move.l 4(a0),d0
    9f16:	|            addq.l #1,d0
    9f18:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    9f1c:	|            movea.l 16(sp),a0
    9f20:	|            move.l 32(sp),8(a0)

	if (num) {
    9f26:	|  ,-------- beq.w a046 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    9f2a:	|  |         move.l 32(sp),d1
    9f2e:	|  |         move.l d1,d0
    9f30:	|  |         add.l d0,d0
    9f32:	|  |         add.l d1,d0
    9f34:	|  |         add.l d0,d0
    9f36:	|  |         add.l d0,d0
    9f38:	|  |         move.l d0,12(sp)
    9f3c:	|  |         clr.l 8(sp)
    9f40:	|  |         move.l 1e81c <SysBase>,d0
    9f46:	|  |         movea.l d0,a6
    9f48:	|  |         move.l 12(sp),d0
    9f4c:	|  |         move.l 8(sp),d1
    9f50:	|  |         jsr -684(a6)
    9f54:	|  |         move.l d0,4(sp)
    9f58:	|  |         move.l 4(sp),d0
    9f5c:	|  |         movea.l 16(sp),a0
    9f60:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9f64:	|  |         movea.l 16(sp),a0
    9f68:	|  |         move.l 4(a0),d0
    9f6c:	|  |     ,-- bne.s 9f82 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9f6e:	|  |     |   pea 1a4a1 <PutChar+0x14fb>
    9f74:	|  |     |   jsr 18504 <KPrintF>
    9f7a:	|  |     |   addq.l #4,sp
			return NULL;
    9f7c:	|  |     |   moveq #0,d0
    9f7e:	+--|-----|-- bra.w a052 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9f82:	|  |     '-> clr.l 36(sp)
    9f86:	|  |     ,-- bra.w a038 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9f8a:	|  |  ,--|-> movea.l 44(sp),a0
    9f8e:	|  |  |  |   movea.l 4(a0),a0
    9f92:	|  |  |  |   move.l 36(sp),d1
    9f96:	|  |  |  |   move.l d1,d0
    9f98:	|  |  |  |   add.l d0,d0
    9f9a:	|  |  |  |   add.l d1,d0
    9f9c:	|  |  |  |   add.l d0,d0
    9f9e:	|  |  |  |   add.l d0,d0
    9fa0:	|  |  |  |   lea (0,a0,d0.l),a1
    9fa4:	|  |  |  |   movea.l 16(sp),a0
    9fa8:	|  |  |  |   movea.l 4(a0),a0
    9fac:	|  |  |  |   move.l 36(sp),d1
    9fb0:	|  |  |  |   move.l d1,d0
    9fb2:	|  |  |  |   add.l d0,d0
    9fb4:	|  |  |  |   add.l d1,d0
    9fb6:	|  |  |  |   add.l d0,d0
    9fb8:	|  |  |  |   add.l d0,d0
    9fba:	|  |  |  |   adda.l d0,a0
    9fbc:	|  |  |  |   move.l (a1),d0
    9fbe:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9fc0:	|  |  |  |   movea.l 44(sp),a0
    9fc4:	|  |  |  |   movea.l 4(a0),a0
    9fc8:	|  |  |  |   move.l 36(sp),d1
    9fcc:	|  |  |  |   move.l d1,d0
    9fce:	|  |  |  |   add.l d0,d0
    9fd0:	|  |  |  |   add.l d1,d0
    9fd2:	|  |  |  |   add.l d0,d0
    9fd4:	|  |  |  |   add.l d0,d0
    9fd6:	|  |  |  |   lea (0,a0,d0.l),a1
    9fda:	|  |  |  |   movea.l 16(sp),a0
    9fde:	|  |  |  |   movea.l 4(a0),a0
    9fe2:	|  |  |  |   move.l 36(sp),d1
    9fe6:	|  |  |  |   move.l d1,d0
    9fe8:	|  |  |  |   add.l d0,d0
    9fea:	|  |  |  |   add.l d1,d0
    9fec:	|  |  |  |   add.l d0,d0
    9fee:	|  |  |  |   add.l d0,d0
    9ff0:	|  |  |  |   adda.l d0,a0
    9ff2:	|  |  |  |   move.l 4(a1),d0
    9ff6:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    9ffa:	|  |  |  |   movea.l 44(sp),a0
    9ffe:	|  |  |  |   movea.l 4(a0),a0
    a002:	|  |  |  |   move.l 36(sp),d1
    a006:	|  |  |  |   move.l d1,d0
    a008:	|  |  |  |   add.l d0,d0
    a00a:	|  |  |  |   add.l d1,d0
    a00c:	|  |  |  |   add.l d0,d0
    a00e:	|  |  |  |   add.l d0,d0
    a010:	|  |  |  |   lea (0,a0,d0.l),a1
    a014:	|  |  |  |   movea.l 16(sp),a0
    a018:	|  |  |  |   movea.l 4(a0),a0
    a01c:	|  |  |  |   move.l 36(sp),d1
    a020:	|  |  |  |   move.l d1,d0
    a022:	|  |  |  |   add.l d0,d0
    a024:	|  |  |  |   add.l d1,d0
    a026:	|  |  |  |   add.l d0,d0
    a028:	|  |  |  |   add.l d0,d0
    a02a:	|  |  |  |   adda.l d0,a0
    a02c:	|  |  |  |   move.l 8(a1),d0
    a030:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    a034:	|  |  |  |   addq.l #1,36(sp)
    a038:	|  |  |  '-> move.l 36(sp),d0
    a03c:	|  |  |      cmp.l 32(sp),d0
    a040:	|  |  '----- blt.w 9f8a <copyAnim+0xda>
    a044:	|  |     ,-- bra.s a04e <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    a046:	|  '-----|-> movea.l 16(sp),a0
    a04a:	|        |   clr.l 4(a0)
	}

	return newAnim;
    a04e:	|        '-> move.l 16(sp),d0
}
    a052:	'----------> movea.l (sp)+,a6
    a054:	             lea 36(sp),sp
    a058:	             rts

0000a05a <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    a05a:	                lea -44(sp),sp
    a05e:	                move.l a6,-(sp)
    a060:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    a062:	                moveq #12,d0
    a064:	                move.l d0,40(sp)
    a068:	                clr.l 36(sp)
    a06c:	                move.l 1e81c <SysBase>,d0
    a072:	                movea.l d0,a6
    a074:	                move.l 40(sp),d0
    a078:	                move.l 36(sp),d1
    a07c:	                jsr -684(a6)
    a080:	                move.l d0,32(sp)
    a084:	                move.l 32(sp),d0
    a088:	                move.l d0,28(sp)
	if( !newP) {
    a08c:	            ,-- bne.s a0a2 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    a08e:	            |   pea 1a4c2 <PutChar+0x151c>
    a094:	            |   jsr 18504 <KPrintF>
    a09a:	            |   addq.l #4,sp
		return NULL;
    a09c:	            |   moveq #0,d0
    a09e:	,-----------|-- bra.w a272 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    a0a2:	|           '-> movea.l 28(sp),a0
    a0a6:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    a0ac:	|               move.l 56(sp),d1
    a0b0:	|               move.l d1,d0
    a0b2:	|               add.l d0,d0
    a0b4:	|               add.l d1,d0
    a0b6:	|               add.l d0,d0
    a0b8:	|               add.l d0,d0
    a0ba:	|               move.l d0,24(sp)
    a0be:	|               clr.l 20(sp)
    a0c2:	|               move.l 1e81c <SysBase>,d0
    a0c8:	|               movea.l d0,a6
    a0ca:	|               move.l 24(sp),d0
    a0ce:	|               move.l 20(sp),d1
    a0d2:	|               jsr -684(a6)
    a0d6:	|               move.l d0,16(sp)
    a0da:	|               move.l 16(sp),d0
    a0de:	|               movea.l 28(sp),a0
    a0e2:	|               move.l d0,4(a0)
	if( !newP->frames) {
    a0e6:	|               movea.l 28(sp),a0
    a0ea:	|               move.l 4(a0),d0
    a0ee:	|           ,-- bne.s a104 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    a0f0:	|           |   pea 1a4c2 <PutChar+0x151c>
    a0f6:	|           |   jsr 18504 <KPrintF>
    a0fc:	|           |   addq.l #4,sp
		return NULL;
    a0fe:	|           |   moveq #0,d0
    a100:	+-----------|-- bra.w a272 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    a104:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    a10a:	|               movea.l 60(sp),a0
    a10e:	|               move.l (a0),44(sp)
	while (a) {
    a112:	|     ,-------- bra.w a266 <createPersonaAnim+0x20c>
		a --;
    a116:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    a11a:	|  |  |         movea.l 28(sp),a0
    a11e:	|  |  |         movea.l 4(a0),a0
    a122:	|  |  |         move.l 48(sp),d1
    a126:	|  |  |         move.l d1,d0
    a128:	|  |  |         add.l d0,d0
    a12a:	|  |  |         add.l d1,d0
    a12c:	|  |  |         add.l d0,d0
    a12e:	|  |  |         add.l d0,d0
    a130:	|  |  |         adda.l d0,a0
    a132:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    a136:	|  |  |         movea.l 44(sp),a0
    a13a:	|  |  |         move.l (a0),d0
    a13c:	|  |  |         moveq #5,d1
    a13e:	|  |  |         cmp.l d0,d1
    a140:	|  |  |     ,-- bne.s a16c <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    a142:	|  |  |     |   movea.l 28(sp),a0
    a146:	|  |  |     |   movea.l 4(a0),a0
    a14a:	|  |  |     |   move.l 48(sp),d1
    a14e:	|  |  |     |   move.l d1,d0
    a150:	|  |  |     |   add.l d0,d0
    a152:	|  |  |     |   add.l d1,d0
    a154:	|  |  |     |   add.l d0,d0
    a156:	|  |  |     |   add.l d0,d0
    a158:	|  |  |     |   lea (0,a0,d0.l),a1
    a15c:	|  |  |     |   movea.l 44(sp),a0
    a160:	|  |  |     |   move.l 4(a0),d0
    a164:	|  |  |     |   move.l d0,8(a1)
    a168:	|  |  |  ,--|-- bra.w a214 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    a16c:	|  |  |  |  '-> movea.l 44(sp),a0
    a170:	|  |  |  |      move.l (a0),d0
    a172:	|  |  |  |      moveq #2,d1
    a174:	|  |  |  |      cmp.l d0,d1
    a176:	|  |  |  |  ,-- bne.s a1a2 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    a178:	|  |  |  |  |   movea.l 44(sp),a0
    a17c:	|  |  |  |  |   move.l 4(a0),d2
    a180:	|  |  |  |  |   movea.l 28(sp),a0
    a184:	|  |  |  |  |   movea.l 4(a0),a0
    a188:	|  |  |  |  |   move.l 48(sp),d1
    a18c:	|  |  |  |  |   move.l d1,d0
    a18e:	|  |  |  |  |   add.l d0,d0
    a190:	|  |  |  |  |   add.l d1,d0
    a192:	|  |  |  |  |   add.l d0,d0
    a194:	|  |  |  |  |   add.l d0,d0
    a196:	|  |  |  |  |   adda.l d0,a0
    a198:	|  |  |  |  |   move.l d2,d0
    a19a:	|  |  |  |  |   neg.l d0
    a19c:	|  |  |  |  |   move.l d0,8(a0)
    a1a0:	|  |  |  +--|-- bra.s a214 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    a1a2:	|  |  |  |  '-> movea.l 44(sp),a0
    a1a6:	|  |  |  |      move.l (a0),d0
    a1a8:	|  |  |  |      moveq #6,d1
    a1aa:	|  |  |  |      cmp.l d0,d1
    a1ac:	|  |  |  |  ,-- bne.s a1f4 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    a1ae:	|  |  |  |  |   movea.l 44(sp),a0
    a1b2:	|  |  |  |  |   movea.l 4(a0),a0
    a1b6:	|  |  |  |  |   move.l (a0),d0
    a1b8:	|  |  |  |  |   move.l d0,-(sp)
    a1ba:	|  |  |  |  |   pea 1 <_start+0x1>
    a1be:	|  |  |  |  |   lea 20(sp),a0
    a1c2:	|  |  |  |  |   move.l a0,-(sp)
    a1c4:	|  |  |  |  |   jsr 15a24 <getValueType>
    a1ca:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    a1ce:	|  |  |  |  |   movea.l 44(sp),a0
    a1d2:	|  |  |  |  |   movea.l 4(a0),a0
    a1d6:	|  |  |  |  |   movea.l (a0),a0
    a1d8:	|  |  |  |  |   move.l 8(a0),d0
    a1dc:	|  |  |  |  |   move.l d0,-(sp)
    a1de:	|  |  |  |  |   pea 1 <_start+0x1>
    a1e2:	|  |  |  |  |   lea 16(sp),a0
    a1e6:	|  |  |  |  |   move.l a0,-(sp)
    a1e8:	|  |  |  |  |   jsr 15a24 <getValueType>
    a1ee:	|  |  |  |  |   lea 12(sp),sp
    a1f2:	|  |  |  +--|-- bra.s a214 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    a1f4:	|  |  |  |  '-> move.l 44(sp),d0
    a1f8:	|  |  |  |      move.l d0,-(sp)
    a1fa:	|  |  |  |      pea 1 <_start+0x1>
    a1fe:	|  |  |  |      lea 20(sp),a0
    a202:	|  |  |  |      move.l a0,-(sp)
    a204:	|  |  |  |      jsr 15a24 <getValueType>
    a20a:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    a20e:	|  |  |  |      moveq #1,d0
    a210:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    a214:	|  |  |  '----> move.l 60(sp),-(sp)
    a218:	|  |  |         jsr 163a8 <trimStack>
    a21e:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    a220:	|  |  |         movea.l 28(sp),a0
    a224:	|  |  |         movea.l 4(a0),a0
    a228:	|  |  |         move.l 48(sp),d1
    a22c:	|  |  |         move.l d1,d0
    a22e:	|  |  |         add.l d0,d0
    a230:	|  |  |         add.l d1,d0
    a232:	|  |  |         add.l d0,d0
    a234:	|  |  |         add.l d0,d0
    a236:	|  |  |         adda.l d0,a0
    a238:	|  |  |         move.l 12(sp),d0
    a23c:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    a23e:	|  |  |         movea.l 28(sp),a0
    a242:	|  |  |         movea.l 4(a0),a0
    a246:	|  |  |         move.l 48(sp),d1
    a24a:	|  |  |         move.l d1,d0
    a24c:	|  |  |         add.l d0,d0
    a24e:	|  |  |         add.l d1,d0
    a250:	|  |  |         add.l d0,d0
    a252:	|  |  |         add.l d0,d0
    a254:	|  |  |         adda.l d0,a0
    a256:	|  |  |         move.l 8(sp),d0
    a25a:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    a25e:	|  |  |         movea.l 60(sp),a0
    a262:	|  |  |         move.l (a0),44(sp)
	while (a) {
    a266:	|  |  '-------> tst.l 48(sp)
    a26a:	|  '----------- bne.w a116 <createPersonaAnim+0xbc>
	}

	return newP;
    a26e:	|               move.l 28(sp),d0
}
    a272:	'-------------> move.l (sp)+,d2
    a274:	                movea.l (sp)+,a6
    a276:	                lea 44(sp),sp
    a27a:	                rts

0000a27c <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    a27c:	       lea -12(sp),sp
    a280:	       move.l a6,-(sp)

	if(orig->theSprites)
    a282:	       movea.l 20(sp),a0
    a286:	       move.l (a0),d0
    a288:	   ,-- beq.s a2b2 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    a28a:	   |   movea.l 20(sp),a0
    a28e:	   |   movea.l (a0),a0
    a290:	   |   move.l 4(a0),d0
    a294:	   |   subq.l #1,d0
    a296:	   |   move.l d0,4(a0)
    a29a:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    a2a0:	   +-- bne.s a2b2 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    a2a2:	   |   movea.l 20(sp),a0
    a2a6:	   |   move.l (a0),d0
    a2a8:	   |   move.l d0,-(sp)
    a2aa:	   |   jsr 9360 <forgetSpriteBank>
    a2b0:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    a2b2:	   '-> tst.l 20(sp)
    a2b6:	,----- beq.s a2f6 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    a2b8:	|      movea.l 20(sp),a0
    a2bc:	|      move.l 8(a0),d0
    a2c0:	|  ,-- beq.s a2dc <deleteAnim+0x60>
			FreeVec( orig->frames);
    a2c2:	|  |   movea.l 20(sp),a0
    a2c6:	|  |   move.l 4(a0),8(sp)
    a2cc:	|  |   move.l 1e81c <SysBase>,d0
    a2d2:	|  |   movea.l d0,a6
    a2d4:	|  |   movea.l 8(sp),a1
    a2d8:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    a2dc:	|  '-> move.l 20(sp),4(sp)
    a2e2:	|      move.l 1e81c <SysBase>,d0
    a2e8:	|      movea.l d0,a6
    a2ea:	|      movea.l 4(sp),a1
    a2ee:	|      jsr -690(a6)
		orig = NULL;
    a2f2:	|      clr.l 20(sp)
	}	
	
}
    a2f6:	'----> nop
    a2f8:	       movea.l (sp)+,a6
    a2fa:	       lea 12(sp),sp
    a2fe:	       rts

0000a300 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    a300:	          lea -124(sp),sp
    a304:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    a308:	          movea.l 152(sp),a0
    a30c:	          move.l 56(a0),d1
    a310:	          movea.l 152(sp),a0
    a314:	          move.l 60(a0),d0
    a318:	          cmp.l d1,d0
    a31a:	      ,-- bne.s a34a <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    a31c:	      |   movea.l 152(sp),a0
    a320:	      |   moveq #-1,d0
    a322:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    a326:	      |   movea.l 152(sp),a0
    a32a:	      |   move.l 40(a0),d0
    a32e:	      |   movea.l 152(sp),a0
    a332:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    a336:	      |   movea.l 152(sp),a0
    a33a:	      |   move.l 44(a0),d0
    a33e:	      |   movea.l 152(sp),a0
    a342:	      |   move.l d0,52(a0)
    a346:	   ,--|-- bra.w a8b0 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    a34a:	   |  '-> movea.l 1e938 <currentFloor>,a0
    a350:	   |      move.l 16(a0),d1
    a354:	   |      movea.l 152(sp),a0
    a358:	   |      move.l 56(a0),d0
    a35c:	   |      add.l d0,d0
    a35e:	   |      add.l d0,d0
    a360:	   |      movea.l d1,a0
    a362:	   |      adda.l d0,a0
    a364:	   |      move.l (a0),d1
    a366:	   |      movea.l 152(sp),a0
    a36a:	   |      move.l 60(a0),d0
    a36e:	   |      add.l d0,d0
    a370:	   |      add.l d0,d0
    a372:	   |      movea.l d1,a0
    a374:	   |      adda.l d0,a0
    a376:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    a37a:	   |      moveq #-1,d0
    a37c:	   |      cmp.l 144(sp),d0
    a380:	   |  ,-- bne.s a388 <doBorderStuff+0x88>
    a382:	   |  |   clr.w d0
    a384:	,--|--|-- bra.w a9b0 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    a388:	|  |  '-> movea.l 1e938 <currentFloor>,a0
    a38e:	|  |      move.l 12(a0),d1
    a392:	|  |      move.l 144(sp),d0
    a396:	|  |      lsl.l #3,d0
    a398:	|  |      add.l d0,d1
    a39a:	|  |      movea.l 1e938 <currentFloor>,a0
    a3a0:	|  |      movea.l 12(a0),a1
    a3a4:	|  |      movea.l 152(sp),a0
    a3a8:	|  |      move.l 56(a0),d0
    a3ac:	|  |      lsl.l #3,d0
    a3ae:	|  |      add.l a1,d0
    a3b0:	|  |      lea 40(sp),a0
    a3b4:	|  |      move.l a0,-(sp)
    a3b6:	|  |      lea 48(sp),a0
    a3ba:	|  |      move.l a0,-(sp)
    a3bc:	|  |      move.l d1,-(sp)
    a3be:	|  |      move.l d0,-(sp)
    a3c0:	|  |      jsr 1776a <getMatchingCorners>
    a3c6:	|  |      lea 16(sp),sp
    a3ca:	|  |      tst.w d0
    a3cc:	|  |  ,-- bne.s a3e2 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    a3ce:	|  |  |   pea 1a4ec <PutChar+0x1546>
    a3d4:	|  |  |   jsr 18504 <KPrintF>
    a3da:	|  |  |   addq.l #4,sp
            return FALSE;
    a3dc:	|  |  |   clr.w d0
    a3de:	+--|--|-- bra.w a9b0 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    a3e2:	|  |  '-> movea.l 152(sp),a0
    a3e6:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    a3ec:	|  |      movea.l 152(sp),a0
    a3f0:	|  |      move.l (a0),d0
    a3f2:	|  |      move.l d0,-(sp)
    a3f4:	|  |      jsr 188ce <__fixsfsi>
    a3fa:	|  |      addq.l #4,sp
    a3fc:	|  |      move.l d0,140(sp)
    a400:	|  |      movea.l 152(sp),a0
    a404:	|  |      move.l 4(a0),d0
    a408:	|  |      move.l d0,-(sp)
    a40a:	|  |      jsr 188ce <__fixsfsi>
    a410:	|  |      addq.l #4,sp
    a412:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    a416:	|  |      movea.l 152(sp),a0
    a41a:	|  |      move.l 40(a0),132(sp)
    a420:	|  |      movea.l 152(sp),a0
    a424:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    a42a:	|  |      movea.l 1e938 <currentFloor>,a0
    a430:	|  |      move.l 4(a0),d1
    a434:	|  |      move.l 44(sp),d0
    a438:	|  |      lsl.l #3,d0
    a43a:	|  |      movea.l d1,a0
    a43c:	|  |      adda.l d0,a0
    a43e:	|  |      move.l (a0),124(sp)
    a442:	|  |      movea.l 1e938 <currentFloor>,a0
    a448:	|  |      move.l 4(a0),d1
    a44c:	|  |      move.l 44(sp),d0
    a450:	|  |      lsl.l #3,d0
    a452:	|  |      movea.l d1,a0
    a454:	|  |      adda.l d0,a0
    a456:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    a45c:	|  |      movea.l 1e938 <currentFloor>,a0
    a462:	|  |      move.l 4(a0),d1
    a466:	|  |      move.l 40(sp),d0
    a46a:	|  |      lsl.l #3,d0
    a46c:	|  |      movea.l d1,a0
    a46e:	|  |      adda.l d0,a0
    a470:	|  |      move.l (a0),116(sp)
    a474:	|  |      movea.l 1e938 <currentFloor>,a0
    a47a:	|  |      move.l 4(a0),d1
    a47e:	|  |      move.l 40(sp),d0
    a482:	|  |      lsl.l #3,d0
    a484:	|  |      movea.l d1,a0
    a486:	|  |      adda.l d0,a0
    a488:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    a48e:	|  |      move.l 140(sp),d0
    a492:	|  |      sub.l 132(sp),d0
    a496:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    a49a:	|  |      move.l 136(sp),d0
    a49e:	|  |      sub.l 128(sp),d0
    a4a2:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    a4a6:	|  |      move.l 116(sp),d0
    a4aa:	|  |      sub.l 124(sp),d0
    a4ae:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    a4b2:	|  |      move.l 112(sp),d0
    a4b6:	|  |      sub.l 120(sp),d0
    a4ba:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    a4be:	|  |      move.l 124(sp),d0
    a4c2:	|  |      sub.l 140(sp),d0
    a4c6:	|  |      move.l 104(sp),-(sp)
    a4ca:	|  |      move.l d0,-(sp)
    a4cc:	|  |      jsr 18e90 <__mulsi3>
    a4d2:	|  |      addq.l #8,sp
    a4d4:	|  |      move.l d0,d2
    a4d6:	|  |      move.l 120(sp),d0
    a4da:	|  |      sub.l 136(sp),d0
    a4de:	|  |      move.l 108(sp),-(sp)
    a4e2:	|  |      move.l d0,-(sp)
    a4e4:	|  |      jsr 18e90 <__mulsi3>
    a4ea:	|  |      addq.l #8,sp
    a4ec:	|  |      move.l d2,d1
    a4ee:	|  |      sub.l d0,d1
    a4f0:	|  |      move.l d1,-(sp)
    a4f2:	|  |      jsr 188f6 <__floatsidf>
    a4f8:	|  |      addq.l #4,sp
    a4fa:	|  |      move.l d0,32(sp)
    a4fe:	|  |      move.l d1,36(sp)
    a502:	|  |      move.l 32(sp),88(sp)
    a508:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    a50e:	|  |      move.l 96(sp),-(sp)
    a512:	|  |      move.l 112(sp),-(sp)
    a516:	|  |      jsr 18e90 <__mulsi3>
    a51c:	|  |      addq.l #8,sp
    a51e:	|  |      move.l d0,d2
    a520:	|  |      move.l 100(sp),-(sp)
    a524:	|  |      move.l 108(sp),-(sp)
    a528:	|  |      jsr 18e90 <__mulsi3>
    a52e:	|  |      addq.l #8,sp
    a530:	|  |      move.l d2,d1
    a532:	|  |      sub.l d0,d1
    a534:	|  |      move.l d1,-(sp)
    a536:	|  |      jsr 188f6 <__floatsidf>
    a53c:	|  |      addq.l #4,sp
    a53e:	|  |      move.l d1,-(sp)
    a540:	|  |      move.l d0,-(sp)
    a542:	|  |      move.l 100(sp),-(sp)
    a546:	|  |      move.l 100(sp),-(sp)
    a54a:	|  |      jsr 1878a <__divdf3>
    a550:	|  |      lea 16(sp),sp
    a554:	|  |      move.l d0,24(sp)
    a558:	|  |      move.l d1,28(sp)
    a55c:	|  |      move.l 24(sp),88(sp)
    a562:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    a568:	|  |      clr.l -(sp)
    a56a:	|  |      clr.l -(sp)
    a56c:	|  |      move.l 100(sp),-(sp)
    a570:	|  |      move.l 100(sp),-(sp)
    a574:	|  |      jsr 18a54 <__gtdf2>
    a57a:	|  |      lea 16(sp),sp
    a57e:	|  |      tst.l d0
    a580:	|  |  ,-- ble.w a658 <doBorderStuff+0x358>
    a584:	|  |  |   clr.l -(sp)
    a586:	|  |  |   move.l #1072693248,-(sp)
    a58c:	|  |  |   move.l 100(sp),-(sp)
    a590:	|  |  |   move.l 100(sp),-(sp)
    a594:	|  |  |   jsr 18b0e <__ltdf2>
    a59a:	|  |  |   lea 16(sp),sp
    a59e:	|  |  |   tst.l d0
    a5a0:	|  |  +-- bge.w a658 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    a5a4:	|  |  |   move.l 124(sp),-(sp)
    a5a8:	|  |  |   jsr 188f6 <__floatsidf>
    a5ae:	|  |  |   addq.l #4,sp
    a5b0:	|  |  |   move.l d0,d2
    a5b2:	|  |  |   move.l d1,d3
    a5b4:	|  |  |   move.l 100(sp),-(sp)
    a5b8:	|  |  |   jsr 188f6 <__floatsidf>
    a5be:	|  |  |   addq.l #4,sp
    a5c0:	|  |  |   move.l 92(sp),-(sp)
    a5c4:	|  |  |   move.l 92(sp),-(sp)
    a5c8:	|  |  |   move.l d1,-(sp)
    a5ca:	|  |  |   move.l d0,-(sp)
    a5cc:	|  |  |   jsr 18986 <__muldf3>
    a5d2:	|  |  |   lea 16(sp),sp
    a5d6:	|  |  |   move.l d1,-(sp)
    a5d8:	|  |  |   move.l d0,-(sp)
    a5da:	|  |  |   move.l d3,-(sp)
    a5dc:	|  |  |   move.l d2,-(sp)
    a5de:	|  |  |   jsr 18728 <__adddf3>
    a5e4:	|  |  |   lea 16(sp),sp
    a5e8:	|  |  |   move.l d1,-(sp)
    a5ea:	|  |  |   move.l d0,-(sp)
    a5ec:	|  |  |   jsr 18898 <__fixdfsi>
    a5f2:	|  |  |   addq.l #8,sp
    a5f4:	|  |  |   movea.l 152(sp),a0
    a5f8:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    a5fc:	|  |  |   move.l 120(sp),-(sp)
    a600:	|  |  |   jsr 188f6 <__floatsidf>
    a606:	|  |  |   addq.l #4,sp
    a608:	|  |  |   move.l d0,d2
    a60a:	|  |  |   move.l d1,d3
    a60c:	|  |  |   move.l 96(sp),-(sp)
    a610:	|  |  |   jsr 188f6 <__floatsidf>
    a616:	|  |  |   addq.l #4,sp
    a618:	|  |  |   move.l 92(sp),-(sp)
    a61c:	|  |  |   move.l 92(sp),-(sp)
    a620:	|  |  |   move.l d1,-(sp)
    a622:	|  |  |   move.l d0,-(sp)
    a624:	|  |  |   jsr 18986 <__muldf3>
    a62a:	|  |  |   lea 16(sp),sp
    a62e:	|  |  |   move.l d1,-(sp)
    a630:	|  |  |   move.l d0,-(sp)
    a632:	|  |  |   move.l d3,-(sp)
    a634:	|  |  |   move.l d2,-(sp)
    a636:	|  |  |   jsr 18728 <__adddf3>
    a63c:	|  |  |   lea 16(sp),sp
    a640:	|  |  |   move.l d1,-(sp)
    a642:	|  |  |   move.l d0,-(sp)
    a644:	|  |  |   jsr 18898 <__fixdfsi>
    a64a:	|  |  |   addq.l #8,sp
    a64c:	|  |  |   movea.l 152(sp),a0
    a650:	|  |  |   move.l d0,52(a0)
    a654:	|  +--|-- bra.w a8b0 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    a658:	|  |  '-> move.l 140(sp),d0
    a65c:	|  |      sub.l 124(sp),d0
    a660:	|  |      move.l d0,84(sp)
    a664:	|  |      move.l 140(sp),d0
    a668:	|  |      sub.l 116(sp),d0
    a66c:	|  |      move.l d0,80(sp)
    a670:	|  |      move.l 132(sp),d0
    a674:	|  |      sub.l 124(sp),d0
    a678:	|  |      move.l d0,76(sp)
    a67c:	|  |      move.l 132(sp),d0
    a680:	|  |      sub.l 116(sp),d0
    a684:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    a688:	|  |      move.l 136(sp),d0
    a68c:	|  |      sub.l 120(sp),d0
    a690:	|  |      move.l d0,68(sp)
    a694:	|  |      move.l 136(sp),d0
    a698:	|  |      sub.l 112(sp),d0
    a69c:	|  |      move.l d0,64(sp)
    a6a0:	|  |      move.l 128(sp),d0
    a6a4:	|  |      sub.l 120(sp),d0
    a6a8:	|  |      move.l d0,60(sp)
    a6ac:	|  |      move.l 128(sp),d0
    a6b0:	|  |      sub.l 112(sp),d0
    a6b4:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    a6b8:	|  |      move.l 84(sp),-(sp)
    a6bc:	|  |      move.l 88(sp),-(sp)
    a6c0:	|  |      jsr 18e90 <__mulsi3>
    a6c6:	|  |      addq.l #8,sp
    a6c8:	|  |      move.l d0,84(sp)
    a6cc:	|  |      move.l 80(sp),-(sp)
    a6d0:	|  |      move.l 84(sp),-(sp)
    a6d4:	|  |      jsr 18e90 <__mulsi3>
    a6da:	|  |      addq.l #8,sp
    a6dc:	|  |      move.l d0,80(sp)
    a6e0:	|  |      move.l 76(sp),-(sp)
    a6e4:	|  |      move.l 80(sp),-(sp)
    a6e8:	|  |      jsr 18e90 <__mulsi3>
    a6ee:	|  |      addq.l #8,sp
    a6f0:	|  |      move.l d0,76(sp)
    a6f4:	|  |      move.l 72(sp),-(sp)
    a6f8:	|  |      move.l 76(sp),-(sp)
    a6fc:	|  |      jsr 18e90 <__mulsi3>
    a702:	|  |      addq.l #8,sp
    a704:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    a708:	|  |      move.l 68(sp),-(sp)
    a70c:	|  |      move.l 72(sp),-(sp)
    a710:	|  |      jsr 18e90 <__mulsi3>
    a716:	|  |      addq.l #8,sp
    a718:	|  |      move.l d0,68(sp)
    a71c:	|  |      move.l 64(sp),-(sp)
    a720:	|  |      move.l 68(sp),-(sp)
    a724:	|  |      jsr 18e90 <__mulsi3>
    a72a:	|  |      addq.l #8,sp
    a72c:	|  |      move.l d0,64(sp)
    a730:	|  |      move.l 60(sp),-(sp)
    a734:	|  |      move.l 64(sp),-(sp)
    a738:	|  |      jsr 18e90 <__mulsi3>
    a73e:	|  |      addq.l #8,sp
    a740:	|  |      move.l d0,60(sp)
    a744:	|  |      move.l 56(sp),-(sp)
    a748:	|  |      move.l 60(sp),-(sp)
    a74c:	|  |      jsr 18e90 <__mulsi3>
    a752:	|  |      addq.l #8,sp
    a754:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a758:	|  |      move.l 84(sp),-(sp)
    a75c:	|  |      jsr 188f6 <__floatsidf>
    a762:	|  |      addq.l #4,sp
    a764:	|  |      move.l d0,d2
    a766:	|  |      move.l d1,d3
    a768:	|  |      move.l 68(sp),-(sp)
    a76c:	|  |      jsr 188f6 <__floatsidf>
    a772:	|  |      addq.l #4,sp
    a774:	|  |      move.l d1,-(sp)
    a776:	|  |      move.l d0,-(sp)
    a778:	|  |      move.l d3,-(sp)
    a77a:	|  |      move.l d2,-(sp)
    a77c:	|  |      jsr 18728 <__adddf3>
    a782:	|  |      lea 16(sp),sp
    a786:	|  |      move.l d1,-(sp)
    a788:	|  |      move.l d0,-(sp)
    a78a:	|  |      jsr 18e46 <sqrt>
    a790:	|  |      addq.l #8,sp
    a792:	|  |      move.l d0,d2
    a794:	|  |      move.l d1,d3
    a796:	|  |      move.l 76(sp),-(sp)
    a79a:	|  |      jsr 188f6 <__floatsidf>
    a7a0:	|  |      addq.l #4,sp
    a7a2:	|  |      move.l d0,d4
    a7a4:	|  |      move.l d1,d5
    a7a6:	|  |      move.l 60(sp),-(sp)
    a7aa:	|  |      jsr 188f6 <__floatsidf>
    a7b0:	|  |      addq.l #4,sp
    a7b2:	|  |      move.l d1,-(sp)
    a7b4:	|  |      move.l d0,-(sp)
    a7b6:	|  |      move.l d5,-(sp)
    a7b8:	|  |      move.l d4,-(sp)
    a7ba:	|  |      jsr 18728 <__adddf3>
    a7c0:	|  |      lea 16(sp),sp
    a7c4:	|  |      move.l d1,-(sp)
    a7c6:	|  |      move.l d0,-(sp)
    a7c8:	|  |      jsr 18e46 <sqrt>
    a7ce:	|  |      addq.l #8,sp
    a7d0:	|  |      move.l d1,-(sp)
    a7d2:	|  |      move.l d0,-(sp)
    a7d4:	|  |      move.l d3,-(sp)
    a7d6:	|  |      move.l d2,-(sp)
    a7d8:	|  |      jsr 18728 <__adddf3>
    a7de:	|  |      lea 16(sp),sp
    a7e2:	|  |      move.l d0,d2
    a7e4:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    a7e6:	|  |      move.l 80(sp),-(sp)
    a7ea:	|  |      jsr 188f6 <__floatsidf>
    a7f0:	|  |      addq.l #4,sp
    a7f2:	|  |      move.l d0,d4
    a7f4:	|  |      move.l d1,d5
    a7f6:	|  |      move.l 64(sp),-(sp)
    a7fa:	|  |      jsr 188f6 <__floatsidf>
    a800:	|  |      addq.l #4,sp
    a802:	|  |      move.l d1,-(sp)
    a804:	|  |      move.l d0,-(sp)
    a806:	|  |      move.l d5,-(sp)
    a808:	|  |      move.l d4,-(sp)
    a80a:	|  |      jsr 18728 <__adddf3>
    a810:	|  |      lea 16(sp),sp
    a814:	|  |      move.l d1,-(sp)
    a816:	|  |      move.l d0,-(sp)
    a818:	|  |      jsr 18e46 <sqrt>
    a81e:	|  |      addq.l #8,sp
    a820:	|  |      move.l d0,d4
    a822:	|  |      move.l d1,d5
    a824:	|  |      move.l 72(sp),-(sp)
    a828:	|  |      jsr 188f6 <__floatsidf>
    a82e:	|  |      addq.l #4,sp
    a830:	|  |      move.l d0,d6
    a832:	|  |      move.l d1,d7
    a834:	|  |      move.l 56(sp),-(sp)
    a838:	|  |      jsr 188f6 <__floatsidf>
    a83e:	|  |      addq.l #4,sp
    a840:	|  |      move.l d1,-(sp)
    a842:	|  |      move.l d0,-(sp)
    a844:	|  |      move.l d7,-(sp)
    a846:	|  |      move.l d6,-(sp)
    a848:	|  |      jsr 18728 <__adddf3>
    a84e:	|  |      lea 16(sp),sp
    a852:	|  |      move.l d1,-(sp)
    a854:	|  |      move.l d0,-(sp)
    a856:	|  |      jsr 18e46 <sqrt>
    a85c:	|  |      addq.l #8,sp
    a85e:	|  |      move.l d1,-(sp)
    a860:	|  |      move.l d0,-(sp)
    a862:	|  |      move.l d5,-(sp)
    a864:	|  |      move.l d4,-(sp)
    a866:	|  |      jsr 18728 <__adddf3>
    a86c:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a870:	|  |      move.l d1,-(sp)
    a872:	|  |      move.l d0,-(sp)
    a874:	|  |      move.l d3,-(sp)
    a876:	|  |      move.l d2,-(sp)
    a878:	|  |      jsr 18b0e <__ltdf2>
    a87e:	|  |      lea 16(sp),sp
    a882:	|  |      tst.l d0
    a884:	|  |  ,-- bge.s a89c <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    a886:	|  |  |   movea.l 152(sp),a0
    a88a:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    a890:	|  |  |   movea.l 152(sp),a0
    a894:	|  |  |   move.l 120(sp),52(a0)
    a89a:	|  +--|-- bra.s a8b0 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    a89c:	|  |  '-> movea.l 152(sp),a0
    a8a0:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    a8a6:	|  |      movea.l 152(sp),a0
    a8aa:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    a8b0:	|  '----> movea.l 152(sp),a0
    a8b4:	|         move.l 52(a0),d0
    a8b8:	|         move.l d0,-(sp)
    a8ba:	|         jsr 18936 <__floatsisf>
    a8c0:	|         addq.l #4,sp
    a8c2:	|         move.l d0,d1
    a8c4:	|         movea.l 152(sp),a0
    a8c8:	|         move.l 4(a0),d0
    a8cc:	|         move.l d0,-(sp)
    a8ce:	|         move.l d1,-(sp)
    a8d0:	|         jsr 18c2a <__subsf3>
    a8d6:	|         addq.l #8,sp
    a8d8:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    a8dc:	|         movea.l 152(sp),a0
    a8e0:	|         move.l (a0),d2
    a8e2:	|         movea.l 152(sp),a0
    a8e6:	|         move.l 48(a0),d0
    a8ea:	|         move.l d0,-(sp)
    a8ec:	|         jsr 18936 <__floatsisf>
    a8f2:	|         addq.l #4,sp
    a8f4:	|         move.l d0,-(sp)
    a8f6:	|         move.l d2,-(sp)
    a8f8:	|         jsr 18c2a <__subsf3>
    a8fe:	|         addq.l #8,sp
    a900:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    a904:	|         clr.l -(sp)
    a906:	|         move.l 52(sp),-(sp)
    a90a:	|         jsr 18b92 <__nesf2>
    a910:	|         addq.l #8,sp
    a912:	|         tst.l d0
    a914:	|     ,-- bne.s a928 <doBorderStuff+0x628>
    a916:	|     |   clr.l -(sp)
    a918:	|     |   move.l 56(sp),-(sp)
    a91c:	|     |   jsr 18b92 <__nesf2>
    a922:	|     |   addq.l #8,sp
    a924:	|     |   tst.l d0
    a926:	|  ,--|-- beq.s a99e <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a928:	|  |  '-> move.l 52(sp),d0
    a92c:	|  |      move.l d0,-(sp)
    a92e:	|  |      move.l d0,-(sp)
    a930:	|  |      jsr 186f2 <__addsf3>
    a936:	|  |      addq.l #8,sp
    a938:	|  |      move.l d0,-(sp)
    a93a:	|  |      move.l 52(sp),-(sp)
    a93e:	|  |      jsr 18c96 <atan2f>
    a944:	|  |      addq.l #8,sp
    a946:	|  |      move.l d0,-(sp)
    a948:	|  |      jsr 18858 <__extendsfdf2>
    a94e:	|  |      addq.l #4,sp
    a950:	|  |      move.l #-1540411785,-(sp)
    a956:	|  |      move.l #1078765033,-(sp)
    a95c:	|  |      move.l d1,-(sp)
    a95e:	|  |      move.l d0,-(sp)
    a960:	|  |      jsr 18986 <__muldf3>
    a966:	|  |      lea 16(sp),sp
    a96a:	|  |      clr.l -(sp)
    a96c:	|  |      move.l #1080459264,-(sp)
    a972:	|  |      move.l d1,-(sp)
    a974:	|  |      move.l d0,-(sp)
    a976:	|  |      jsr 18728 <__adddf3>
    a97c:	|  |      lea 16(sp),sp
    a980:	|  |      move.l d1,-(sp)
    a982:	|  |      move.l d0,-(sp)
    a984:	|  |      jsr 18898 <__fixdfsi>
    a98a:	|  |      addq.l #8,sp
    a98c:	|  |      movea.l 152(sp),a0
    a990:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a994:	|  |      movea.l 152(sp),a0
    a998:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a99e:	|  '----> pea 1 <_start+0x1>
    a9a2:	|         move.l 156(sp),-(sp)
    a9a6:	|         jsr 46ee <setFrames>
    a9ac:	|         addq.l #8,sp
    return TRUE;
    a9ae:	|         moveq #1,d0
}
    a9b0:	'-------> movem.l (sp)+,d2-d7
    a9b4:	          lea 124(sp),sp
    a9b8:	          rts

0000a9ba <drawPeople>:

void drawPeople () {
    a9ba:	                   lea -24(sp),sp
    a9be:	                   move.l d2,-(sp)

	shufflePeople ();
    a9c0:	                   jsr c4b8 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a9c6:	                   move.l 1e880 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a9ce:	                   clr.l 20(sp)
	overRegion = NULL;
    a9d2:	                   clr.l 1e930 <overRegion>

	while (thisPerson) {
    a9d8:	   ,-------------- bra.w af8a <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a9dc:	,--|-------------> movea.l 24(sp),a0
    a9e0:	|  |               move.w 104(a0),d0
    a9e4:	|  |  ,----------- beq.w ad3e <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a9e8:	|  |  |            movea.l 24(sp),a0
    a9ec:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a9f2:	|  |  |            movea.l 24(sp),a0
    a9f6:	|  |  |            move.l 76(a0),d0
    a9fa:	|  |  |            cmp.l 20(sp),d0
    a9fe:	|  |  |  ,-------- beq.w abcc <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    aa02:	|  |  |  |         movea.l 24(sp),a0
    aa06:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    aa0a:	|  |  |  |         movea.l 24(sp),a0
    aa0e:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    aa14:	|  |  |  |         movea.l 24(sp),a0
    aa18:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    aa1c:	|  |  |  |         movea.l 20(sp),a0
    aa20:	|  |  |  |         movea.l 4(a0),a0
    aa24:	|  |  |  |         move.l 4(a0),d0
    aa28:	|  |  |  |         movea.l 24(sp),a0
    aa2c:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    aa30:	|  |  |  |         movea.l 20(sp),a0
    aa34:	|  |  |  |         movea.l 4(a0),a1
    aa38:	|  |  |  |         movea.l 24(sp),a0
    aa3c:	|  |  |  |         move.l 84(a0),d0
    aa40:	|  |  |  |         move.l d0,d1
    aa42:	|  |  |  |         move.l d1,d0
    aa44:	|  |  |  |         add.l d0,d0
    aa46:	|  |  |  |         add.l d1,d0
    aa48:	|  |  |  |         add.l d0,d0
    aa4a:	|  |  |  |         add.l d0,d0
    aa4c:	|  |  |  |         lea (0,a1,d0.l),a0
    aa50:	|  |  |  |         move.l 8(a0),d0
    aa54:	|  |  |  |     ,-- ble.w aaf6 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    aa58:	|  |  |  |     |   movea.l 20(sp),a0
    aa5c:	|  |  |  |     |   movea.l 4(a0),a1
    aa60:	|  |  |  |     |   movea.l 24(sp),a0
    aa64:	|  |  |  |     |   move.l 84(a0),d0
    aa68:	|  |  |  |     |   move.l d0,d1
    aa6a:	|  |  |  |     |   move.l d1,d0
    aa6c:	|  |  |  |     |   add.l d0,d0
    aa6e:	|  |  |  |     |   add.l d1,d0
    aa70:	|  |  |  |     |   add.l d0,d0
    aa72:	|  |  |  |     |   add.l d0,d0
    aa74:	|  |  |  |     |   lea (0,a1,d0.l),a0
    aa78:	|  |  |  |     |   move.l 8(a0),d0
    aa7c:	|  |  |  |     |   clr.l -(sp)
    aa7e:	|  |  |  |     |   move.l d0,-(sp)
    aa80:	|  |  |  |     |   jsr dbcc <startSound>
    aa86:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    aa88:	|  |  |  |     |   movea.l 24(sp),a0
    aa8c:	|  |  |  |     |   move.l 84(a0),d0
    aa90:	|  |  |  |     |   addq.l #1,d0
    aa92:	|  |  |  |     |   movea.l 24(sp),a0
    aa96:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    aa9a:	|  |  |  |     |   movea.l 24(sp),a0
    aa9e:	|  |  |  |     |   move.l 84(a0),d0
    aaa2:	|  |  |  |     |   movea.l 24(sp),a0
    aaa6:	|  |  |  |     |   movea.l 72(a0),a0
    aaaa:	|  |  |  |     |   move.l 8(a0),d1
    aaae:	|  |  |  |     |   move.l d1,-(sp)
    aab0:	|  |  |  |     |   move.l d0,-(sp)
    aab2:	|  |  |  |     |   jsr 18f3c <__modsi3>
    aab8:	|  |  |  |     |   addq.l #8,sp
    aaba:	|  |  |  |     |   movea.l 24(sp),a0
    aabe:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    aac2:	|  |  |  |     |   movea.l 24(sp),a0
    aac6:	|  |  |  |     |   movea.l 72(a0),a0
    aaca:	|  |  |  |     |   movea.l 4(a0),a1
    aace:	|  |  |  |     |   movea.l 24(sp),a0
    aad2:	|  |  |  |     |   move.l 84(a0),d0
    aad6:	|  |  |  |     |   move.l d0,d1
    aad8:	|  |  |  |     |   move.l d1,d0
    aada:	|  |  |  |     |   add.l d0,d0
    aadc:	|  |  |  |     |   add.l d1,d0
    aade:	|  |  |  |     |   add.l d0,d0
    aae0:	|  |  |  |     |   add.l d0,d0
    aae2:	|  |  |  |     |   lea (0,a1,d0.l),a0
    aae6:	|  |  |  |     |   move.l 4(a0),d0
    aaea:	|  |  |  |     |   movea.l 24(sp),a0
    aaee:	|  |  |  |     |   move.l d0,88(a0)
    aaf2:	|  |  |  |  ,--|-- bra.w ac34 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    aaf6:	|  |  |  |  |  '-> movea.l 20(sp),a0
    aafa:	|  |  |  |  |      movea.l 4(a0),a1
    aafe:	|  |  |  |  |      movea.l 24(sp),a0
    ab02:	|  |  |  |  |      move.l 84(a0),d0
    ab06:	|  |  |  |  |      move.l d0,d1
    ab08:	|  |  |  |  |      move.l d1,d0
    ab0a:	|  |  |  |  |      add.l d0,d0
    ab0c:	|  |  |  |  |      add.l d1,d0
    ab0e:	|  |  |  |  |      add.l d0,d0
    ab10:	|  |  |  |  |      add.l d0,d0
    ab12:	|  |  |  |  |      lea (0,a1,d0.l),a0
    ab16:	|  |  |  |  |      move.l 8(a0),d0
    ab1a:	|  |  |  |  +----- beq.w ac34 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    ab1e:	|  |  |  |  |      movea.l 1e7ea <noStack>,a1
    ab24:	|  |  |  |  |      movea.l 20(sp),a0
    ab28:	|  |  |  |  |      move.l 4(a0),d2
    ab2c:	|  |  |  |  |      movea.l 24(sp),a0
    ab30:	|  |  |  |  |      move.l 84(a0),d0
    ab34:	|  |  |  |  |      move.l d0,d1
    ab36:	|  |  |  |  |      move.l d1,d0
    ab38:	|  |  |  |  |      add.l d0,d0
    ab3a:	|  |  |  |  |      add.l d1,d0
    ab3c:	|  |  |  |  |      add.l d0,d0
    ab3e:	|  |  |  |  |      add.l d0,d0
    ab40:	|  |  |  |  |      movea.l d2,a0
    ab42:	|  |  |  |  |      adda.l d0,a0
    ab44:	|  |  |  |  |      move.l 8(a0),d0
    ab48:	|  |  |  |  |      neg.l d0
    ab4a:	|  |  |  |  |      pea 1 <_start+0x1>
    ab4e:	|  |  |  |  |      move.l a1,-(sp)
    ab50:	|  |  |  |  |      clr.l -(sp)
    ab52:	|  |  |  |  |      clr.l -(sp)
    ab54:	|  |  |  |  |      move.l d0,-(sp)
    ab56:	|  |  |  |  |      jsr 7cc8 <startNewFunctionNum>
    ab5c:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    ab60:	|  |  |  |  |      movea.l 24(sp),a0
    ab64:	|  |  |  |  |      move.l 84(a0),d0
    ab68:	|  |  |  |  |      addq.l #1,d0
    ab6a:	|  |  |  |  |      movea.l 24(sp),a0
    ab6e:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    ab72:	|  |  |  |  |      movea.l 24(sp),a0
    ab76:	|  |  |  |  |      move.l 84(a0),d0
    ab7a:	|  |  |  |  |      movea.l 24(sp),a0
    ab7e:	|  |  |  |  |      movea.l 72(a0),a0
    ab82:	|  |  |  |  |      move.l 8(a0),d1
    ab86:	|  |  |  |  |      move.l d1,-(sp)
    ab88:	|  |  |  |  |      move.l d0,-(sp)
    ab8a:	|  |  |  |  |      jsr 18f3c <__modsi3>
    ab90:	|  |  |  |  |      addq.l #8,sp
    ab92:	|  |  |  |  |      movea.l 24(sp),a0
    ab96:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    ab9a:	|  |  |  |  |      movea.l 24(sp),a0
    ab9e:	|  |  |  |  |      movea.l 72(a0),a0
    aba2:	|  |  |  |  |      movea.l 4(a0),a1
    aba6:	|  |  |  |  |      movea.l 24(sp),a0
    abaa:	|  |  |  |  |      move.l 84(a0),d0
    abae:	|  |  |  |  |      move.l d0,d1
    abb0:	|  |  |  |  |      move.l d1,d0
    abb2:	|  |  |  |  |      add.l d0,d0
    abb4:	|  |  |  |  |      add.l d1,d0
    abb6:	|  |  |  |  |      add.l d0,d0
    abb8:	|  |  |  |  |      add.l d0,d0
    abba:	|  |  |  |  |      lea (0,a1,d0.l),a0
    abbe:	|  |  |  |  |      move.l 4(a0),d0
    abc2:	|  |  |  |  |      movea.l 24(sp),a0
    abc6:	|  |  |  |  |      move.l d0,88(a0)
    abca:	|  |  |  |  +----- bra.s ac34 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    abcc:	|  |  |  '--|----> movea.l 24(sp),a0
    abd0:	|  |  |     |      move.l (a0),d0
    abd2:	|  |  |     |      movea.l 24(sp),a0
    abd6:	|  |  |     |      move.l 8(a0),d1
    abda:	|  |  |     |      move.l d1,-(sp)
    abdc:	|  |  |     |      move.l d0,-(sp)
    abde:	|  |  |     |      jsr 18822 <__eqsf2>
    abe4:	|  |  |     |      addq.l #8,sp
    abe6:	|  |  |     |      tst.l d0
    abe8:	|  |  |     |  ,-- bne.s ac2c <drawPeople+0x272>
    abea:	|  |  |     |  |   movea.l 24(sp),a0
    abee:	|  |  |     |  |   move.l 4(a0),d0
    abf2:	|  |  |     |  |   movea.l 24(sp),a0
    abf6:	|  |  |     |  |   move.l 12(a0),d1
    abfa:	|  |  |     |  |   move.l d1,-(sp)
    abfc:	|  |  |     |  |   move.l d0,-(sp)
    abfe:	|  |  |     |  |   jsr 18822 <__eqsf2>
    ac04:	|  |  |     |  |   addq.l #8,sp
    ac06:	|  |  |     |  |   tst.l d0
    ac08:	|  |  |     |  +-- bne.s ac2c <drawPeople+0x272>
    ac0a:	|  |  |     |  |   movea.l 20(sp),a0
    ac0e:	|  |  |     |  |   move.l 8(a0),d0
    ac12:	|  |  |     |  |   moveq #1,d1
    ac14:	|  |  |     |  |   cmp.l d0,d1
    ac16:	|  |  |     |  +-- bne.s ac2c <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    ac18:	|  |  |     |  |   movea.l 24(sp),a0
    ac1c:	|  |  |     |  |   move.l 16(a0),d0
    ac20:	|  |  |     |  |   addq.l #1,d0
    ac22:	|  |  |     |  |   movea.l 24(sp),a0
    ac26:	|  |  |     |  |   move.l d0,16(a0)
    ac2a:	|  |  |     +--|-- bra.s ac34 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    ac2c:	|  |  |     |  '-> movea.l 24(sp),a0
    ac30:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    ac34:	|  |  |     '----> movea.l 24(sp),a0
    ac38:	|  |  |            move.l (a0),d0
    ac3a:	|  |  |            movea.l 24(sp),a0
    ac3e:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    ac42:	|  |  |            movea.l 24(sp),a0
    ac46:	|  |  |            move.l 4(a0),d0
    ac4a:	|  |  |            movea.l 24(sp),a0
    ac4e:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    ac52:	|  |  |            movea.l 20(sp),a0
    ac56:	|  |  |            movea.l 4(a0),a1
    ac5a:	|  |  |            movea.l 24(sp),a0
    ac5e:	|  |  |            move.l 84(a0),d0
    ac62:	|  |  |            move.l d0,d1
    ac64:	|  |  |            move.l d1,d0
    ac66:	|  |  |            add.l d0,d0
    ac68:	|  |  |            add.l d1,d0
    ac6a:	|  |  |            add.l d0,d0
    ac6c:	|  |  |            add.l d0,d0
    ac6e:	|  |  |            lea (0,a1,d0.l),a0
    ac72:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    ac76:	|  |  |            move.l 8(sp),d0
    ac7a:	|  |  |            add.l d0,d0
    ac7c:	|  |  |            subx.l d0,d0
    ac7e:	|  |  |            neg.l d0
    ac80:	|  |  |            move.b d0,d0
    ac82:	|  |  |            move.b d0,d0
    ac84:	|  |  |            andi.l #255,d0
    ac8a:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    ac8e:	|  |  |            move.l 8(sp),-(sp)
    ac92:	|  |  |            jsr 9b8e <TF_abs>
    ac98:	|  |  |            addq.l #4,sp
    ac9a:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    ac9e:	|  |  |            movea.l 20(sp),a0
    aca2:	|  |  |            movea.l (a0),a0
    aca4:	|  |  |            move.l 8(a0),d0
    aca8:	|  |  |            cmp.l 12(sp),d0
    acac:	|  |  |        ,-- bgt.s acbc <drawPeople+0x302>
				fNum = 0;
    acae:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    acb2:	|  |  |        |   moveq #2,d0
    acb4:	|  |  |        |   sub.l 16(sp),d0
    acb8:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    acbc:	|  |  |        '-> moveq #2,d1
    acbe:	|  |  |            cmp.l 16(sp),d1
    acc2:	|  |  +----------- beq.s ad3e <drawPeople+0x384>
				BOOL r = FALSE;
    acc4:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    acc8:	|  |  |            move.l 16(sp),d0
    accc:	|  |  |            movea.w d0,a0
    acce:	|  |  |            movea.l 20(sp),a1
    acd2:	|  |  |            movea.l (a1),a1
    acd4:	|  |  |            movea.l 16(a1),a1
    acd8:	|  |  |            move.l 12(sp),d1
    acdc:	|  |  |            move.l d1,d0
    acde:	|  |  |            lsl.l #3,d0
    ace0:	|  |  |            sub.l d1,d0
    ace2:	|  |  |            add.l d0,d0
    ace4:	|  |  |            add.l d0,d0
    ace6:	|  |  |            add.l a1,d0
    ace8:	|  |  |            move.l a0,-(sp)
    acea:	|  |  |            move.l 28(sp),-(sp)
    acee:	|  |  |            move.l d0,-(sp)
    acf0:	|  |  |            jsr 98b0 <scaleSprite>
    acf6:	|  |  |            lea 12(sp),sp
    acfa:	|  |  |            move.w d0,6(sp)
				if (r) {
    acfe:	|  |  +----------- beq.s ad3e <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    ad00:	|  |  |            movea.l 24(sp),a0
    ad04:	|  |  |            movea.l 114(a0),a0
    ad08:	|  |  |            movea.l (a0),a0
    ad0a:	|  |  |            move.b (a0),d0
    ad0c:	|  |  +----------- beq.s ad3e <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    ad0e:	|  |  |            move.l 1e8a0 <personRegion+0x1c>,d1
    ad14:	|  |  |            movea.l 24(sp),a0
    ad18:	|  |  |            move.l 114(a0),d0
    ad1c:	|  |  |            cmp.l d1,d0
    ad1e:	|  |  |        ,-- beq.s ad26 <drawPeople+0x36c>
    ad20:	|  |  |        |   clr.l 1e7e2 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    ad26:	|  |  |        '-> movea.l 24(sp),a0
    ad2a:	|  |  |            move.l 114(a0),d0
    ad2e:	|  |  |            move.l d0,1e8a0 <personRegion+0x1c>
						overRegion = & personRegion;
    ad34:	|  |  |            move.l #125060,1e930 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    ad3e:	|  |  '----------> movea.l 24(sp),a0
    ad42:	|  |               move.l 88(a0),d0
    ad46:	|  |               subq.l #1,d0
    ad48:	|  |               movea.l 24(sp),a0
    ad4c:	|  |               move.l d0,88(a0)
    ad50:	|  |               movea.l 24(sp),a0
    ad54:	|  |               move.l 88(a0),d0
    ad58:	|  |        ,----- bne.w af80 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    ad5c:	|  |        |      movea.l 24(sp),a0
    ad60:	|  |        |      move.l 84(a0),d0
    ad64:	|  |        |      addq.l #1,d0
    ad66:	|  |        |      movea.l 24(sp),a0
    ad6a:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    ad6e:	|  |        |      movea.l 24(sp),a0
    ad72:	|  |        |      move.l 84(a0),d0
    ad76:	|  |        |      movea.l 24(sp),a0
    ad7a:	|  |        |      movea.l 72(a0),a0
    ad7e:	|  |        |      move.l 8(a0),d1
    ad82:	|  |        |      move.l d1,-(sp)
    ad84:	|  |        |      move.l d0,-(sp)
    ad86:	|  |        |      jsr 18f3c <__modsi3>
    ad8c:	|  |        |      addq.l #8,sp
    ad8e:	|  |        |      movea.l 24(sp),a0
    ad92:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    ad96:	|  |        |      movea.l 24(sp),a0
    ad9a:	|  |        |      movea.l 72(a0),a0
    ad9e:	|  |        |      movea.l 4(a0),a1
    ada2:	|  |        |      movea.l 24(sp),a0
    ada6:	|  |        |      move.l 84(a0),d0
    adaa:	|  |        |      move.l d0,d1
    adac:	|  |        |      move.l d1,d0
    adae:	|  |        |      add.l d0,d0
    adb0:	|  |        |      add.l d1,d0
    adb2:	|  |        |      add.l d0,d0
    adb4:	|  |        |      add.l d0,d0
    adb6:	|  |        |      lea (0,a1,d0.l),a0
    adba:	|  |        |      move.l 4(a0),d0
    adbe:	|  |        |      movea.l 24(sp),a0
    adc2:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    adc6:	|  |        |      movea.l 24(sp),a0
    adca:	|  |        |      move.w 104(a0),d0
    adce:	|  |        +----- beq.w af80 <drawPeople+0x5c6>
    add2:	|  |        |      tst.l 20(sp)
    add6:	|  |        +----- beq.w af80 <drawPeople+0x5c6>
    adda:	|  |        |      movea.l 20(sp),a0
    adde:	|  |        |      move.l 4(a0),d0
    ade2:	|  |        +----- beq.w af80 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    ade6:	|  |        |      movea.l 20(sp),a0
    adea:	|  |        |      movea.l 4(a0),a1
    adee:	|  |        |      movea.l 24(sp),a0
    adf2:	|  |        |      move.l 84(a0),d0
    adf6:	|  |        |      move.l d0,d1
    adf8:	|  |        |      move.l d1,d0
    adfa:	|  |        |      add.l d0,d0
    adfc:	|  |        |      add.l d1,d0
    adfe:	|  |        |      add.l d0,d0
    ae00:	|  |        |      add.l d0,d0
    ae02:	|  |        |      lea (0,a1,d0.l),a0
    ae06:	|  |        |      move.l 8(a0),d0
    ae0a:	|  |        |  ,-- ble.w aeac <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    ae0e:	|  |        |  |   movea.l 20(sp),a0
    ae12:	|  |        |  |   movea.l 4(a0),a1
    ae16:	|  |        |  |   movea.l 24(sp),a0
    ae1a:	|  |        |  |   move.l 84(a0),d0
    ae1e:	|  |        |  |   move.l d0,d1
    ae20:	|  |        |  |   move.l d1,d0
    ae22:	|  |        |  |   add.l d0,d0
    ae24:	|  |        |  |   add.l d1,d0
    ae26:	|  |        |  |   add.l d0,d0
    ae28:	|  |        |  |   add.l d0,d0
    ae2a:	|  |        |  |   lea (0,a1,d0.l),a0
    ae2e:	|  |        |  |   move.l 8(a0),d0
    ae32:	|  |        |  |   clr.l -(sp)
    ae34:	|  |        |  |   move.l d0,-(sp)
    ae36:	|  |        |  |   jsr dbcc <startSound>
    ae3c:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    ae3e:	|  |        |  |   movea.l 24(sp),a0
    ae42:	|  |        |  |   move.l 84(a0),d0
    ae46:	|  |        |  |   addq.l #1,d0
    ae48:	|  |        |  |   movea.l 24(sp),a0
    ae4c:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    ae50:	|  |        |  |   movea.l 24(sp),a0
    ae54:	|  |        |  |   move.l 84(a0),d0
    ae58:	|  |        |  |   movea.l 24(sp),a0
    ae5c:	|  |        |  |   movea.l 72(a0),a0
    ae60:	|  |        |  |   move.l 8(a0),d1
    ae64:	|  |        |  |   move.l d1,-(sp)
    ae66:	|  |        |  |   move.l d0,-(sp)
    ae68:	|  |        |  |   jsr 18f3c <__modsi3>
    ae6e:	|  |        |  |   addq.l #8,sp
    ae70:	|  |        |  |   movea.l 24(sp),a0
    ae74:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    ae78:	|  |        |  |   movea.l 24(sp),a0
    ae7c:	|  |        |  |   movea.l 72(a0),a0
    ae80:	|  |        |  |   movea.l 4(a0),a1
    ae84:	|  |        |  |   movea.l 24(sp),a0
    ae88:	|  |        |  |   move.l 84(a0),d0
    ae8c:	|  |        |  |   move.l d0,d1
    ae8e:	|  |        |  |   move.l d1,d0
    ae90:	|  |        |  |   add.l d0,d0
    ae92:	|  |        |  |   add.l d1,d0
    ae94:	|  |        |  |   add.l d0,d0
    ae96:	|  |        |  |   add.l d0,d0
    ae98:	|  |        |  |   lea (0,a1,d0.l),a0
    ae9c:	|  |        |  |   move.l 4(a0),d0
    aea0:	|  |        |  |   movea.l 24(sp),a0
    aea4:	|  |        |  |   move.l d0,88(a0)
    aea8:	|  |        +--|-- bra.w af80 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    aeac:	|  |        |  '-> movea.l 20(sp),a0
    aeb0:	|  |        |      movea.l 4(a0),a1
    aeb4:	|  |        |      movea.l 24(sp),a0
    aeb8:	|  |        |      move.l 84(a0),d0
    aebc:	|  |        |      move.l d0,d1
    aebe:	|  |        |      move.l d1,d0
    aec0:	|  |        |      add.l d0,d0
    aec2:	|  |        |      add.l d1,d0
    aec4:	|  |        |      add.l d0,d0
    aec6:	|  |        |      add.l d0,d0
    aec8:	|  |        |      lea (0,a1,d0.l),a0
    aecc:	|  |        |      move.l 8(a0),d0
    aed0:	|  |        +----- beq.w af80 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    aed4:	|  |        |      movea.l 1e7ea <noStack>,a1
    aeda:	|  |        |      movea.l 20(sp),a0
    aede:	|  |        |      move.l 4(a0),d2
    aee2:	|  |        |      movea.l 24(sp),a0
    aee6:	|  |        |      move.l 84(a0),d0
    aeea:	|  |        |      move.l d0,d1
    aeec:	|  |        |      move.l d1,d0
    aeee:	|  |        |      add.l d0,d0
    aef0:	|  |        |      add.l d1,d0
    aef2:	|  |        |      add.l d0,d0
    aef4:	|  |        |      add.l d0,d0
    aef6:	|  |        |      movea.l d2,a0
    aef8:	|  |        |      adda.l d0,a0
    aefa:	|  |        |      move.l 8(a0),d0
    aefe:	|  |        |      neg.l d0
    af00:	|  |        |      pea 1 <_start+0x1>
    af04:	|  |        |      move.l a1,-(sp)
    af06:	|  |        |      clr.l -(sp)
    af08:	|  |        |      clr.l -(sp)
    af0a:	|  |        |      move.l d0,-(sp)
    af0c:	|  |        |      jsr 7cc8 <startNewFunctionNum>
    af12:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    af16:	|  |        |      movea.l 24(sp),a0
    af1a:	|  |        |      move.l 84(a0),d0
    af1e:	|  |        |      addq.l #1,d0
    af20:	|  |        |      movea.l 24(sp),a0
    af24:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    af28:	|  |        |      movea.l 24(sp),a0
    af2c:	|  |        |      move.l 84(a0),d0
    af30:	|  |        |      movea.l 24(sp),a0
    af34:	|  |        |      movea.l 72(a0),a0
    af38:	|  |        |      move.l 8(a0),d1
    af3c:	|  |        |      move.l d1,-(sp)
    af3e:	|  |        |      move.l d0,-(sp)
    af40:	|  |        |      jsr 18f3c <__modsi3>
    af46:	|  |        |      addq.l #8,sp
    af48:	|  |        |      movea.l 24(sp),a0
    af4c:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    af50:	|  |        |      movea.l 24(sp),a0
    af54:	|  |        |      movea.l 72(a0),a0
    af58:	|  |        |      movea.l 4(a0),a1
    af5c:	|  |        |      movea.l 24(sp),a0
    af60:	|  |        |      move.l 84(a0),d0
    af64:	|  |        |      move.l d0,d1
    af66:	|  |        |      move.l d1,d0
    af68:	|  |        |      add.l d0,d0
    af6a:	|  |        |      add.l d1,d0
    af6c:	|  |        |      add.l d0,d0
    af6e:	|  |        |      add.l d0,d0
    af70:	|  |        |      lea (0,a1,d0.l),a0
    af74:	|  |        |      move.l 4(a0),d0
    af78:	|  |        |      movea.l 24(sp),a0
    af7c:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    af80:	|  |        '----> movea.l 24(sp),a0
    af84:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    af8a:	|  '-------------> tst.l 24(sp)
    af8e:	'----------------- bne.w a9dc <drawPeople+0x22>
	}
}
    af92:	                   nop
    af94:	                   nop
    af96:	                   move.l (sp)+,d2
    af98:	                   lea 24(sp),sp
    af9c:	                   rts

0000af9e <findPerson>:


struct onScreenPerson * findPerson (int v) {
    af9e:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    afa0:	          pea 1a504 <PutChar+0x155e>
    afa6:	          jsr 18504 <KPrintF>
    afac:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    afae:	          move.l 1e880 <allPeople>,(sp)
	while (thisPerson) {
    afb4:	      ,-- bra.s afcc <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    afb6:	,-----|-> movea.l (sp),a0
    afb8:	|     |   movea.l 114(a0),a0
    afbc:	|     |   move.l 4(a0),d0
    afc0:	|     |   cmp.l 8(sp),d0
    afc4:	|  ,--|-- beq.s afd2 <findPerson+0x34>
		thisPerson = thisPerson -> next;
    afc6:	|  |  |   movea.l (sp),a0
    afc8:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    afcc:	|  |  '-> tst.l (sp)
    afce:	'--|----- bne.s afb6 <findPerson+0x18>
    afd0:	   |  ,-- bra.s afd4 <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    afd2:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    afd4:	      '-> pea 1a518 <PutChar+0x1572>
    afda:	          jsr 18504 <KPrintF>
    afe0:	          addq.l #4,sp
	return thisPerson;
    afe2:	          move.l (sp),d0
}
    afe4:	          addq.l #4,sp
    afe6:	          rts

0000afe8 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    afe8:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    afea:	       move.l 12(sp),-(sp)
    afee:	       jsr af9e <findPerson>
    aff4:	       addq.l #4,sp
    aff6:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    aff8:	   ,-- bne.s affe <floatCharacter+0x16>
    affa:	   |   clr.w d0
    affc:	,--|-- bra.s b008 <floatCharacter+0x20>
	moveMe -> floaty = f;
    affe:	|  '-> movea.l (sp),a0
    b000:	|      move.l 8(sp),24(a0)
	return TRUE;
    b006:	|      moveq #1,d0
}
    b008:	'----> addq.l #4,sp
    b00a:	       rts

0000b00c <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    b00c:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    b00e:	          tst.l 8(sp)
    b012:	      ,-- bne.s b020 <forceWalkingPerson+0x14>
    b014:	      |   tst.l 12(sp)
    b018:	      +-- bne.s b020 <forceWalkingPerson+0x14>
    b01a:	      |   clr.w d0
    b01c:	,-----|-- bra.w b0b2 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    b020:	|     '-> move.l 16(sp),-(sp)
    b024:	|         jsr af9e <findPerson>
    b02a:	|         addq.l #4,sp
    b02c:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    b02e:	|     ,-- bne.s b034 <forceWalkingPerson+0x28>
    b030:	|     |   clr.w d0
    b032:	+-----|-- bra.s b0b2 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    b034:	|     '-> movea.l (sp),a0
    b036:	|         move.l 68(a0),d0
    b03a:	|     ,-- beq.s b04c <forceWalkingPerson+0x40>
    b03c:	|     |   movea.l (sp),a0
    b03e:	|     |   move.l 68(a0),d0
    b042:	|     |   move.l d0,-(sp)
    b044:	|     |   jsr 5548 <abortFunction>
    b04a:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    b04c:	|     '-> movea.l (sp),a0
    b04e:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    b054:	|         movea.l (sp),a0
    b056:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    b05a:	|         movea.l (sp),a0
    b05c:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    b062:	|         movea.l (sp),a0
    b064:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    b06a:	|         movea.l (sp),a0
    b06c:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    b072:	|         movea.l (sp),a0
    b074:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    b078:	|         movea.l (sp),a0
    b07a:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    b07e:	|         move.l (sp),-(sp)
    b080:	|         jsr a300 <doBorderStuff>
    b086:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    b088:	|         pea 1 <_start+0x1>
    b08c:	|         move.l 4(sp),-(sp)
    b090:	|         jsr c946 <walkMe>
    b096:	|         addq.l #8,sp
    b098:	|         tst.w d0
    b09a:	|     ,-- bne.s b0a4 <forceWalkingPerson+0x98>
    b09c:	|     |   movea.l (sp),a0
    b09e:	|     |   move.w 66(a0),d0
    b0a2:	|  ,--|-- beq.s b0b0 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    b0a4:	|  |  '-> movea.l (sp),a0
    b0a6:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    b0ac:	|  |      moveq #1,d0
    b0ae:	+--|----- bra.s b0b2 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    b0b0:	|  '----> clr.w d0
    }
}
    b0b2:	'-------> addq.l #4,sp
    b0b4:	          rts

0000b0b6 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    b0b6:	                lea -56(sp),sp
    b0ba:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    b0bc:	                pea 1a52d <PutChar+0x1587>
    b0c2:	                jsr 18504 <KPrintF>
    b0c8:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    b0ca:	                move.l #320,56(sp)
    b0d2:	                move.l #200,52(sp)
    b0da:	                moveq #-1,d0
    b0dc:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    b0e0:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    b0e8:	                clr.l 44(sp)
    b0ec:	   ,----------- bra.w b2c4 <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    b0f0:	,--|----------> movea.l 1e938 <currentFloor>,a0
    b0f6:	|  |            move.l 12(a0),d1
    b0fa:	|  |            move.l 44(sp),d0
    b0fe:	|  |            lsl.l #3,d0
    b100:	|  |            movea.l d1,a0
    b102:	|  |            adda.l d0,a0
    b104:	|  |            move.l (a0),d0
    b106:	|  |            move.l d0,d1
    b108:	|  |            subq.l #1,d1
    b10a:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    b10e:	|  |            clr.l 40(sp)
    b112:	|  |     ,----- bra.w b2a2 <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    b116:	|  |  ,--|----> movea.l 1e938 <currentFloor>,a0
    b11c:	|  |  |  |      move.l 4(a0),d1
    b120:	|  |  |  |      movea.l 1e938 <currentFloor>,a0
    b126:	|  |  |  |      movea.l 12(a0),a0
    b12a:	|  |  |  |      move.l 44(sp),d0
    b12e:	|  |  |  |      lsl.l #3,d0
    b130:	|  |  |  |      adda.l d0,a0
    b132:	|  |  |  |      movea.l 4(a0),a0
    b136:	|  |  |  |      move.l 40(sp),d0
    b13a:	|  |  |  |      add.l d0,d0
    b13c:	|  |  |  |      add.l d0,d0
    b13e:	|  |  |  |      adda.l d0,a0
    b140:	|  |  |  |      move.l (a0),d0
    b142:	|  |  |  |      lsl.l #3,d0
    b144:	|  |  |  |      movea.l d1,a0
    b146:	|  |  |  |      adda.l d0,a0
    b148:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    b14c:	|  |  |  |      movea.l 1e938 <currentFloor>,a0
    b152:	|  |  |  |      move.l 4(a0),d1
    b156:	|  |  |  |      movea.l 1e938 <currentFloor>,a0
    b15c:	|  |  |  |      movea.l 12(a0),a0
    b160:	|  |  |  |      move.l 44(sp),d0
    b164:	|  |  |  |      lsl.l #3,d0
    b166:	|  |  |  |      adda.l d0,a0
    b168:	|  |  |  |      movea.l 4(a0),a0
    b16c:	|  |  |  |      move.l 40(sp),d0
    b170:	|  |  |  |      add.l d0,d0
    b172:	|  |  |  |      add.l d0,d0
    b174:	|  |  |  |      adda.l d0,a0
    b176:	|  |  |  |      move.l (a0),d0
    b178:	|  |  |  |      lsl.l #3,d0
    b17a:	|  |  |  |      movea.l d1,a0
    b17c:	|  |  |  |      adda.l d0,a0
    b17e:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    b184:	|  |  |  |      movea.l 1e938 <currentFloor>,a0
    b18a:	|  |  |  |      move.l 4(a0),d1
    b18e:	|  |  |  |      movea.l 1e938 <currentFloor>,a0
    b194:	|  |  |  |      movea.l 12(a0),a0
    b198:	|  |  |  |      move.l 44(sp),d0
    b19c:	|  |  |  |      lsl.l #3,d0
    b19e:	|  |  |  |      adda.l d0,a0
    b1a0:	|  |  |  |      movea.l 4(a0),a0
    b1a4:	|  |  |  |      move.l 36(sp),d0
    b1a8:	|  |  |  |      add.l d0,d0
    b1aa:	|  |  |  |      add.l d0,d0
    b1ac:	|  |  |  |      adda.l d0,a0
    b1ae:	|  |  |  |      move.l (a0),d0
    b1b0:	|  |  |  |      lsl.l #3,d0
    b1b2:	|  |  |  |      movea.l d1,a0
    b1b4:	|  |  |  |      adda.l d0,a0
    b1b6:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    b1ba:	|  |  |  |      movea.l 1e938 <currentFloor>,a0
    b1c0:	|  |  |  |      move.l 4(a0),d1
    b1c4:	|  |  |  |      movea.l 1e938 <currentFloor>,a0
    b1ca:	|  |  |  |      movea.l 12(a0),a0
    b1ce:	|  |  |  |      move.l 44(sp),d0
    b1d2:	|  |  |  |      lsl.l #3,d0
    b1d4:	|  |  |  |      adda.l d0,a0
    b1d6:	|  |  |  |      movea.l 4(a0),a0
    b1da:	|  |  |  |      move.l 36(sp),d0
    b1de:	|  |  |  |      add.l d0,d0
    b1e0:	|  |  |  |      add.l d0,d0
    b1e2:	|  |  |  |      adda.l d0,a0
    b1e4:	|  |  |  |      move.l (a0),d0
    b1e6:	|  |  |  |      lsl.l #3,d0
    b1e8:	|  |  |  |      movea.l d1,a0
    b1ea:	|  |  |  |      adda.l d0,a0
    b1ec:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    b1f2:	|  |  |  |      movea.l 68(sp),a0
    b1f6:	|  |  |  |      move.l (a0),d1
    b1f8:	|  |  |  |      movea.l 64(sp),a0
    b1fc:	|  |  |  |      move.l (a0),d0
    b1fe:	|  |  |  |      move.l d1,-(sp)
    b200:	|  |  |  |      move.l d0,-(sp)
    b202:	|  |  |  |      move.l 24(sp),-(sp)
    b206:	|  |  |  |      move.l 32(sp),-(sp)
    b20a:	|  |  |  |      move.l 40(sp),-(sp)
    b20e:	|  |  |  |      move.l 48(sp),-(sp)
    b212:	|  |  |  |      lea 28(sp),a0
    b216:	|  |  |  |      move.l a0,-(sp)
    b218:	|  |  |  |      lea 36(sp),a0
    b21c:	|  |  |  |      move.l a0,-(sp)
    b21e:	|  |  |  |      jsr 17302 <closestPointOnLine>
    b224:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    b228:	|  |  |  |      movea.l 64(sp),a0
    b22c:	|  |  |  |      move.l (a0),d0
    b22e:	|  |  |  |      move.l 8(sp),d1
    b232:	|  |  |  |      move.l d0,d2
    b234:	|  |  |  |      sub.l d1,d2
    b236:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    b23a:	|  |  |  |      movea.l 68(sp),a0
    b23e:	|  |  |  |      move.l (a0),d0
    b240:	|  |  |  |      move.l 4(sp),d1
    b244:	|  |  |  |      move.l d0,d2
    b246:	|  |  |  |      sub.l d1,d2
    b248:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    b24c:	|  |  |  |      move.l 28(sp),-(sp)
    b250:	|  |  |  |      move.l 32(sp),-(sp)
    b254:	|  |  |  |      jsr 18e90 <__mulsi3>
    b25a:	|  |  |  |      addq.l #8,sp
    b25c:	|  |  |  |      move.l d0,d2
    b25e:	|  |  |  |      move.l 24(sp),-(sp)
    b262:	|  |  |  |      move.l 28(sp),-(sp)
    b266:	|  |  |  |      jsr 18e90 <__mulsi3>
    b26c:	|  |  |  |      addq.l #8,sp
    b26e:	|  |  |  |      move.l d2,d1
    b270:	|  |  |  |      add.l d0,d1
    b272:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    b276:	|  |  |  |      move.l 12(sp),d2
    b27a:	|  |  |  |      cmp.l 32(sp),d2
    b27e:	|  |  |  |  ,-- bge.s b298 <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    b280:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    b286:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    b28c:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    b292:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    b298:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    b29e:	|  |  |  |      addq.l #1,40(sp)
    b2a2:	|  |  |  '----> movea.l 1e938 <currentFloor>,a0
    b2a8:	|  |  |         move.l 12(a0),d1
    b2ac:	|  |  |         move.l 44(sp),d0
    b2b0:	|  |  |         lsl.l #3,d0
    b2b2:	|  |  |         movea.l d1,a0
    b2b4:	|  |  |         adda.l d0,a0
    b2b6:	|  |  |         move.l (a0),d0
    b2b8:	|  |  |         cmp.l 40(sp),d0
    b2bc:	|  |  '-------- bgt.w b116 <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    b2c0:	|  |            addq.l #1,44(sp)
    b2c4:	|  '----------> movea.l 1e938 <currentFloor>,a0
    b2ca:	|               move.l 8(a0),d0
    b2ce:	|               cmp.l 44(sp),d0
    b2d2:	'-------------- bgt.w b0f0 <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    b2d6:	                moveq #-1,d0
    b2d8:	                cmp.l 48(sp),d0
    b2dc:	            ,-- bne.s b2e2 <handleClosestPoint+0x22c>
    b2de:	            |   clr.w d0
    b2e0:	         ,--|-- bra.s b2fc <handleClosestPoint+0x246>
	*setX = gotX;
    b2e2:	         |  '-> movea.l 64(sp),a0
    b2e6:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    b2ea:	         |      movea.l 68(sp),a0
    b2ee:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    b2f2:	         |      movea.l 72(sp),a0
    b2f6:	         |      move.l 48(sp),(a0)

	return TRUE;
    b2fa:	         |      moveq #1,d0
}
    b2fc:	         '----> move.l (sp)+,d2
    b2fe:	                lea 56(sp),sp
    b302:	                rts

0000b304 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    b304:	clr.l 1e894 <personRegion+0x10>
	personRegion.sY = 0;
    b30a:	clr.l 1e898 <personRegion+0x14>
	personRegion.di = -1;
    b310:	moveq #-1,d0
    b312:	move.l d0,1e89c <personRegion+0x18>
	allScreenRegions = NULL;
    b318:	clr.l 1e92c <allScreenRegions>

	return TRUE;
    b31e:	moveq #1,d0
}
    b320:	rts

0000b322 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    b322:	          subq.l #4,sp
    b324:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    b326:	          tst.l 12(sp)
    b32a:	      ,-- bne.s b332 <jumpPerson+0x10>
    b32c:	      |   tst.l 16(sp)
    b330:	,-----|-- beq.s b3a6 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    b332:	|     '-> move.l 20(sp),-(sp)
    b336:	|         jsr af9e <findPerson>
    b33c:	|         addq.l #4,sp
    b33e:	|         move.l d0,4(sp)
    if (!moveMe) return;
    b342:	|  ,----- beq.s b3aa <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    b344:	|  |      movea.l 4(sp),a0
    b348:	|  |      move.l 68(a0),d0
    b34c:	|  |  ,-- beq.s b360 <jumpPerson+0x3e>
    b34e:	|  |  |   movea.l 4(sp),a0
    b352:	|  |  |   move.l 68(a0),d0
    b356:	|  |  |   move.l d0,-(sp)
    b358:	|  |  |   jsr 5548 <abortFunction>
    b35e:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    b360:	|  |  '-> movea.l 4(sp),a0
    b364:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    b368:	|  |      movea.l 4(sp),a0
    b36c:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    b370:	|  |      movea.l 4(sp),a0
    b374:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    b378:	|  |      move.l 16(sp),-(sp)
    b37c:	|  |      jsr 18936 <__floatsisf>
    b382:	|  |      addq.l #4,sp
    b384:	|  |      move.l d0,d2
    b386:	|  |      move.l 12(sp),-(sp)
    b38a:	|  |      jsr 18936 <__floatsisf>
    b390:	|  |      addq.l #4,sp
    b392:	|  |      move.l d2,-(sp)
    b394:	|  |      move.l d0,-(sp)
    b396:	|  |      move.l 12(sp),-(sp)
    b39a:	|  |      jsr b748 <moveAndScale>
    b3a0:	|  |      lea 12(sp),sp
    b3a4:	|  |  ,-- bra.s b3ac <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    b3a6:	'--|--|-> nop
    b3a8:	   |  +-- bra.s b3ac <jumpPerson+0x8a>
    if (!moveMe) return;
    b3aa:	   '--|-> nop
}
    b3ac:	      '-> move.l (sp)+,d2
    b3ae:	          addq.l #4,sp
    b3b0:	          rts

0000b3b2 <killAllPeople>:


void killAllPeople () {
    b3b2:	          subq.l #8,sp
    b3b4:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    b3b6:	   ,----- bra.s b422 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    b3b8:	,--|----> movea.l 1e880 <allPeople>,a0
    b3be:	|  |      move.l 68(a0),d0
    b3c2:	|  |  ,-- beq.s b3d8 <killAllPeople+0x26>
    b3c4:	|  |  |   movea.l 1e880 <allPeople>,a0
    b3ca:	|  |  |   move.l 68(a0),d0
    b3ce:	|  |  |   move.l d0,-(sp)
    b3d0:	|  |  |   jsr 5548 <abortFunction>
    b3d6:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    b3d8:	|  |  '-> movea.l 1e880 <allPeople>,a0
    b3de:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    b3e2:	|  |      move.l 1e880 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    b3ea:	|  |      movea.l 1e880 <allPeople>,a0
    b3f0:	|  |      move.l 36(a0),d0
    b3f4:	|  |      move.l d0,1e880 <allPeople>
		removeObjectType (killPeople -> thisType);
    b3fa:	|  |      movea.l 8(sp),a0
    b3fe:	|  |      move.l 114(a0),d0
    b402:	|  |      move.l d0,-(sp)
    b404:	|  |      jsr e2b4 <removeObjectType>
    b40a:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    b40c:	|  |      move.l 8(sp),4(sp)
    b412:	|  |      move.l 1e81c <SysBase>,d0
    b418:	|  |      movea.l d0,a6
    b41a:	|  |      movea.l 4(sp),a1
    b41e:	|  |      jsr -690(a6)
	while (allPeople) {
    b422:	|  '----> move.l 1e880 <allPeople>,d0
    b428:	'-------- bne.s b3b8 <killAllPeople+0x6>
	}
}
    b42a:	          nop
    b42c:	          nop
    b42e:	          movea.l (sp)+,a6
    b430:	          addq.l #8,sp
    b432:	          rts

0000b434 <killMostPeople>:

void killMostPeople() {
    b434:	          lea -12(sp),sp
    b438:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    b43a:	          move.l #125056,12(sp)

    while (*lookyHere) {
    b442:	   ,----- bra.w b4c8 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    b446:	,--|----> movea.l 12(sp),a0
    b44a:	|  |      movea.l (a0),a0
    b44c:	|  |      move.l 118(a0),d0
    b450:	|  |      moveq #32,d1
    b452:	|  |      and.l d1,d0
    b454:	|  |  ,-- beq.s b466 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    b456:	|  |  |   movea.l 12(sp),a0
    b45a:	|  |  |   move.l (a0),d0
    b45c:	|  |  |   moveq #36,d1
    b45e:	|  |  |   add.l d0,d1
    b460:	|  |  |   move.l d1,12(sp)
    b464:	|  +--|-- bra.s b4c8 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    b466:	|  |  '-> movea.l 12(sp),a0
    b46a:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    b46e:	|  |      movea.l 8(sp),a0
    b472:	|  |      move.l 36(a0),d0
    b476:	|  |      movea.l 12(sp),a0
    b47a:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    b47c:	|  |      movea.l 8(sp),a0
    b480:	|  |      move.l 68(a0),d0
    b484:	|  |  ,-- beq.s b498 <killMostPeople+0x64>
    b486:	|  |  |   movea.l 8(sp),a0
    b48a:	|  |  |   move.l 68(a0),d0
    b48e:	|  |  |   move.l d0,-(sp)
    b490:	|  |  |   jsr 5548 <abortFunction>
    b496:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    b498:	|  |  '-> movea.l 8(sp),a0
    b49c:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    b4a0:	|  |      movea.l 8(sp),a0
    b4a4:	|  |      move.l 114(a0),d0
    b4a8:	|  |      move.l d0,-(sp)
    b4aa:	|  |      jsr e2b4 <removeObjectType>
    b4b0:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    b4b2:	|  |      move.l 8(sp),4(sp)
    b4b8:	|  |      move.l 1e81c <SysBase>,d0
    b4be:	|  |      movea.l d0,a6
    b4c0:	|  |      movea.l 4(sp),a1
    b4c4:	|  |      jsr -690(a6)
    while (*lookyHere) {
    b4c8:	|  '----> movea.l 12(sp),a0
    b4cc:	|         move.l (a0),d0
    b4ce:	'-------- bne.w b446 <killMostPeople+0x12>
        }
    }
}
    b4d2:	          nop
    b4d4:	          nop
    b4d6:	          movea.l (sp)+,a6
    b4d8:	          lea 12(sp),sp
    b4dc:	          rts

0000b4de <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    b4de:	clr.l -(sp)
    b4e0:	move.l sp,d0
    b4e2:	addq.l #8,d0
    b4e4:	move.l d0,-(sp)
    b4e6:	jsr 46ee <setFrames>
    b4ec:	addq.l #8,sp
}
    b4ee:	nop
    b4f0:	rts

0000b4f2 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    b4f2:	          lea -12(sp),sp
    b4f6:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    b4f8:	          pea 1a5b1 <PutChar+0x160b>
    b4fe:	          jsr 18504 <KPrintF>
    b504:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    b506:	          tst.l 20(sp)
    b50a:	      ,-- bne.s b518 <makeWalkingPerson+0x26>
    b50c:	      |   tst.l 24(sp)
    b510:	      +-- bne.s b518 <makeWalkingPerson+0x26>
    b512:	      |   clr.w d0
    b514:	,-----|-- bra.w b6da <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    b518:	|     '-> movea.l 1e938 <currentFloor>,a0
    b51e:	|         move.l 8(a0),d0
    b522:	|     ,-- bne.s b52a <makeWalkingPerson+0x38>
    b524:	|     |   clr.w d0
    b526:	+-----|-- bra.w b6da <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    b52a:	|     '-> move.l 28(sp),d0
    b52e:	|         move.l d0,-(sp)
    b530:	|         jsr af9e <findPerson>
    b536:	|         addq.l #4,sp
    b538:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    b53c:	|     ,-- bne.s b558 <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    b53e:	|     |   move.l 28(sp),d0
    b542:	|     |   move.l d0,-(sp)
    b544:	|     |   pea 1a5cc <PutChar+0x1626>
    b54a:	|     |   jsr 18504 <KPrintF>
    b550:	|     |   addq.l #8,sp
		return FALSE;
    b552:	|     |   clr.w d0
    b554:	+-----|-- bra.w b6da <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    b558:	|     '-> movea.l 12(sp),a0
    b55c:	|         move.l 68(a0),d0
    b560:	|     ,-- beq.s b574 <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    b562:	|     |   movea.l 12(sp),a0
    b566:	|     |   move.l 68(a0),d0
    b56a:	|     |   move.l d0,-(sp)
    b56c:	|     |   jsr 5548 <abortFunction>
    b572:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    b574:	|     '-> movea.l 12(sp),a0
    b578:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    b57c:	|         movea.l 12(sp),a0
    b580:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    b586:	|         movea.l 12(sp),a0
    b58a:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    b590:	|         movea.l 12(sp),a0
    b594:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    b59a:	|         movea.l 12(sp),a0
    b59e:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    b5a4:	|         move.l 24(sp),-(sp)
    b5a8:	|         move.l 24(sp),-(sp)
    b5ac:	|         jsr 1784a <inFloor>
    b5b2:	|         addq.l #8,sp
    b5b4:	|         movea.l 12(sp),a0
    b5b8:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    b5bc:	|         movea.l 12(sp),a0
    b5c0:	|         move.l 60(a0),d0
    b5c4:	|         moveq #-1,d1
    b5c6:	|         cmp.l d0,d1
    b5c8:	|     ,-- bne.s b5f8 <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    b5ca:	|     |   movea.w #60,a0
    b5ce:	|     |   adda.l 12(sp),a0
    b5d2:	|     |   moveq #44,d1
    b5d4:	|     |   add.l 12(sp),d1
    b5d8:	|     |   moveq #40,d0
    b5da:	|     |   add.l 12(sp),d0
    b5de:	|     |   move.l a0,-(sp)
    b5e0:	|     |   move.l d1,-(sp)
    b5e2:	|     |   move.l d0,-(sp)
    b5e4:	|     |   jsr b0b6 <handleClosestPoint>
    b5ea:	|     |   lea 12(sp),sp
    b5ee:	|     |   tst.w d0
    b5f0:	|     +-- bne.s b5f8 <makeWalkingPerson+0x106>
    b5f2:	|     |   clr.w d0
    b5f4:	+-----|-- bra.w b6da <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    b5f8:	|     '-> movea.l 12(sp),a0
    b5fc:	|         move.l 4(a0),d0
    b600:	|         move.l d0,-(sp)
    b602:	|         jsr 188ce <__fixsfsi>
    b608:	|         addq.l #4,sp
    b60a:	|         move.l d0,d2
    b60c:	|         movea.l 12(sp),a0
    b610:	|         move.l (a0),d0
    b612:	|         move.l d0,-(sp)
    b614:	|         jsr 188ce <__fixsfsi>
    b61a:	|         addq.l #4,sp
    b61c:	|         move.l d2,-(sp)
    b61e:	|         move.l d0,-(sp)
    b620:	|         jsr 1784a <inFloor>
    b626:	|         addq.l #8,sp
    b628:	|         movea.l 12(sp),a0
    b62c:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    b630:	|         movea.l 12(sp),a0
    b634:	|         move.l 56(a0),d0
    b638:	|         moveq #-1,d1
    b63a:	|         cmp.l d0,d1
    b63c:	|     ,-- bne.s b68e <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    b63e:	|     |   movea.l 12(sp),a0
    b642:	|     |   move.l (a0),d0
    b644:	|     |   move.l d0,-(sp)
    b646:	|     |   jsr 188ce <__fixsfsi>
    b64c:	|     |   addq.l #4,sp
    b64e:	|     |   move.l d0,8(sp)
    b652:	|     |   movea.l 12(sp),a0
    b656:	|     |   move.l 4(a0),d0
    b65a:	|     |   move.l d0,-(sp)
    b65c:	|     |   jsr 188ce <__fixsfsi>
    b662:	|     |   addq.l #4,sp
    b664:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    b668:	|     |   moveq #56,d0
    b66a:	|     |   add.l 12(sp),d0
    b66e:	|     |   move.l d0,-(sp)
    b670:	|     |   lea 8(sp),a0
    b674:	|     |   move.l a0,-(sp)
    b676:	|     |   moveq #16,d0
    b678:	|     |   add.l sp,d0
    b67a:	|     |   move.l d0,-(sp)
    b67c:	|     |   jsr b0b6 <handleClosestPoint>
    b682:	|     |   lea 12(sp),sp
    b686:	|     |   tst.w d0
    b688:	|     +-- bne.s b68e <makeWalkingPerson+0x19c>
    b68a:	|     |   clr.w d0
    b68c:	+-----|-- bra.s b6da <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    b68e:	|     '-> move.l 12(sp),-(sp)
    b692:	|         jsr a300 <doBorderStuff>
    b698:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    b69a:	|         clr.l -(sp)
    b69c:	|         move.l 16(sp),-(sp)
    b6a0:	|         jsr c946 <walkMe>
    b6a6:	|         addq.l #8,sp
    b6a8:	|         tst.w d0
    b6aa:	|     ,-- bne.s b6b6 <makeWalkingPerson+0x1c4>
    b6ac:	|     |   movea.l 12(sp),a0
    b6b0:	|     |   move.w 66(a0),d0
    b6b4:	|  ,--|-- beq.s b6d8 <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    b6b6:	|  |  '-> lea 28(sp),a0
    b6ba:	|  |      move.l a0,-(sp)
    b6bc:	|  |      pea 1a5f5 <PutChar+0x164f>
    b6c2:	|  |      jsr 18504 <KPrintF>
    b6c8:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    b6ca:	|  |      movea.l 12(sp),a0
    b6ce:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    b6d4:	|  |      moveq #1,d0
    b6d6:	+--|----- bra.s b6da <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    b6d8:	|  '----> clr.w d0
	}
}
    b6da:	'-------> move.l (sp)+,d2
    b6dc:	          lea 12(sp),sp
    b6e0:	          rts

0000b6e2 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    b6e2:	       lea -16(sp),sp
    b6e6:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    b6e8:	       moveq #12,d0
    b6ea:	       move.l d0,16(sp)
    b6ee:	       clr.l 12(sp)
    b6f2:	       move.l 1e81c <SysBase>,d0
    b6f8:	       movea.l d0,a6
    b6fa:	       move.l 16(sp),d0
    b6fe:	       move.l 12(sp),d1
    b702:	       jsr -684(a6)
    b706:	       move.l d0,8(sp)
    b70a:	       move.l 8(sp),d0
    b70e:	       move.l d0,4(sp)
    if(newAnim == 0) {
    b712:	   ,-- bne.s b726 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    b714:	   |   pea 1a628 <PutChar+0x1682>
    b71a:	   |   jsr 18504 <KPrintF>
    b720:	   |   addq.l #4,sp
        return NULL;    
    b722:	   |   moveq #0,d0
    b724:	,--|-- bra.s b740 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    b726:	|  '-> movea.l 4(sp),a0
    b72a:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    b72c:	|      movea.l 4(sp),a0
    b730:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    b734:	|      movea.l 4(sp),a0
    b738:	|      clr.l 4(a0)
	return newAnim;
    b73c:	|      move.l 4(sp),d0
}
    b740:	'----> movea.l (sp)+,a6
    b742:	       lea 16(sp),sp
    b746:	       rts

0000b748 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    b748:	    move.l d2,-(sp)
	me->x = x;
    b74a:	    movea.l 8(sp),a0
    b74e:	    move.l 12(sp),(a0)
	me->y = y;
    b752:	    movea.l 8(sp),a0
    b756:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    b75c:	    movea.l 8(sp),a0
    b760:	    clr.l 8(a0)
	me->oldy = 0;
    b764:	    movea.l 8(sp),a0
    b768:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    b76c:	    movea.l 8(sp),a0
    b770:	    move.l 118(a0),d0
    b774:	    moveq #2,d1
    b776:	    and.l d1,d0
    b778:	,-- bne.s b7d0 <moveAndScale+0x88>
    b77a:	|   move.w 1e198 <scaleDivide>,d0
    b780:	+-- beq.s b7d0 <moveAndScale+0x88>
    b782:	|   movea.l 8(sp),a0
    b786:	|   move.l 4(a0),d2
    b78a:	|   move.w 1e196 <scaleHorizon>,d0
    b790:	|   movea.w d0,a0
    b792:	|   move.l a0,-(sp)
    b794:	|   jsr 18936 <__floatsisf>
    b79a:	|   addq.l #4,sp
    b79c:	|   move.l d0,-(sp)
    b79e:	|   move.l d2,-(sp)
    b7a0:	|   jsr 18c2a <__subsf3>
    b7a6:	|   addq.l #8,sp
    b7a8:	|   move.l d0,d2
    b7aa:	|   move.w 1e198 <scaleDivide>,d0
    b7b0:	|   movea.w d0,a0
    b7b2:	|   move.l a0,-(sp)
    b7b4:	|   jsr 18936 <__floatsisf>
    b7ba:	|   addq.l #4,sp
    b7bc:	|   move.l d0,-(sp)
    b7be:	|   move.l d2,-(sp)
    b7c0:	|   jsr 187ec <__divsf3>
    b7c6:	|   addq.l #8,sp
    b7c8:	|   movea.l 8(sp),a0
    b7cc:	|   move.l d0,32(a0)
}
    b7d0:	'-> nop
    b7d2:	    move.l (sp)+,d2
    b7d4:	    rts

0000b7d6 <removeOneCharacter>:

void removeOneCharacter (int i) {
    b7d6:	          lea -16(sp),sp
    b7da:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    b7dc:	          move.l 24(sp),-(sp)
    b7e0:	          jsr af9e <findPerson>
    b7e6:	          addq.l #4,sp
    b7e8:	          move.l d0,8(sp)

    if (p) {
    b7ec:	,-------- beq.w b8cc <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    b7f0:	|         move.l 1e930 <overRegion>,d0
    b7f6:	|         cmpi.l #125060,d0
    b7fc:	|     ,-- bne.s b81a <removeOneCharacter+0x44>
    b7fe:	|     |   movea.l 1e930 <overRegion>,a0
    b804:	|     |   move.l 28(a0),d1
    b808:	|     |   movea.l 8(sp),a0
    b80c:	|     |   move.l 114(a0),d0
    b810:	|     |   cmp.l d1,d0
    b812:	|     +-- bne.s b81a <removeOneCharacter+0x44>
            overRegion = NULL;
    b814:	|     |   clr.l 1e930 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    b81a:	|     '-> movea.l 8(sp),a0
    b81e:	|         move.l 68(a0),d0
    b822:	|     ,-- beq.s b836 <removeOneCharacter+0x60>
    b824:	|     |   movea.l 8(sp),a0
    b828:	|     |   move.l 68(a0),d0
    b82c:	|     |   move.l d0,-(sp)
    b82e:	|     |   jsr 5548 <abortFunction>
    b834:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    b836:	|     '-> movea.l 8(sp),a0
    b83a:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    b83e:	|         clr.l 12(sp)
    b842:	|     ,-- bra.s b86a <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    b844:	|  ,--|-> movea.l 8(sp),a0
    b848:	|  |  |   movea.l 80(a0),a0
    b84c:	|  |  |   move.l (a0),d1
    b84e:	|  |  |   move.l 12(sp),d0
    b852:	|  |  |   add.l d0,d0
    b854:	|  |  |   add.l d0,d0
    b856:	|  |  |   movea.l d1,a0
    b858:	|  |  |   adda.l d0,a0
    b85a:	|  |  |   move.l (a0),d0
    b85c:	|  |  |   move.l d0,-(sp)
    b85e:	|  |  |   jsr a27c <deleteAnim>
    b864:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    b866:	|  |  |   addq.l #1,12(sp)
    b86a:	|  |  '-> moveq #2,d0
    b86c:	|  |      cmp.l 12(sp),d0
    b870:	|  '----- bge.s b844 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    b872:	|         move.l #125056,16(sp)
    b87a:	|     ,-- bra.s b88a <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    b87c:	|  ,--|-> movea.l 16(sp),a0
    b880:	|  |  |   move.l (a0),d0
    b882:	|  |  |   moveq #36,d1
    b884:	|  |  |   add.l d0,d1
    b886:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    b88a:	|  |  '-> movea.l 16(sp),a0
    b88e:	|  |      move.l (a0),d0
    b890:	|  |      cmp.l 8(sp),d0
    b894:	|  '----- bne.s b87c <removeOneCharacter+0xa6>

        *killPeople = p->next;
    b896:	|         movea.l 8(sp),a0
    b89a:	|         move.l 36(a0),d0
    b89e:	|         movea.l 16(sp),a0
    b8a2:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    b8a4:	|         movea.l 8(sp),a0
    b8a8:	|         move.l 114(a0),d0
    b8ac:	|         move.l d0,-(sp)
    b8ae:	|         jsr e2b4 <removeObjectType>
    b8b4:	|         addq.l #4,sp
        FreeVec(p);
    b8b6:	|         move.l 8(sp),4(sp)
    b8bc:	|         move.l 1e81c <SysBase>,d0
    b8c2:	|         movea.l d0,a6
    b8c4:	|         movea.l 4(sp),a1
    b8c8:	|         jsr -690(a6)
		
    }
}
    b8cc:	'-------> nop
    b8ce:	          movea.l (sp)+,a6
    b8d0:	          lea 16(sp),sp
    b8d4:	          rts

0000b8d6 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    b8d6:	       subq.l #8,sp
    b8d8:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    b8da:	       movea.l 16(sp),a0
    b8de:	       movea.l 80(a0),a0
    b8e2:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    b8e8:	       movea.l 16(sp),a0
    b8ec:	       move.l 92(a0),d2
    b8f0:	       move.l 4(sp),-(sp)
    b8f4:	       pea b4 <_start+0xb4>
    b8f8:	       jsr 18f0e <__divsi3>
    b8fe:	       addq.l #8,sp
    b900:	       add.l d2,d0
    b902:	       move.l d0,d1
    b904:	       addi.l #180,d1
    b90a:	       movea.l 16(sp),a0
    b90e:	       move.l 100(a0),d0
    b912:	       move.l d1,d2
    b914:	       add.l d0,d2
    b916:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    b91a:	   ,-- bra.s b924 <rethinkAngle+0x4e>
    b91c:	,--|-> addi.l #-360,8(sp)
    b924:	|  '-> cmpi.l #359,8(sp)
    b92c:	'----- bgt.s b91c <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    b92e:	       move.l 4(sp),-(sp)
    b932:	       move.l 12(sp),-(sp)
    b936:	       jsr 18e90 <__mulsi3>
    b93c:	       addq.l #8,sp
    b93e:	       pea 168 <decodeFilename+0x50>
    b942:	       move.l d0,-(sp)
    b944:	       jsr 18f0e <__divsi3>
    b94a:	       addq.l #8,sp
    b94c:	       movea.l 16(sp),a0
    b950:	       move.l d0,106(a0)
}
    b954:	       nop
    b956:	       move.l (sp)+,d2
    b958:	       addq.l #8,sp
    b95a:	       rts

0000b95c <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b95c:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b95e:	          movea.l 8(sp),a0
    b962:	          move.l 8(a0),d0
    b966:	          move.l 12(sp),-(sp)
    b96a:	          move.l d0,-(sp)
    b96c:	          jsr 8d0 <put2bytes>
    b972:	          addq.l #8,sp
	if (p -> numFrames) {
    b974:	          movea.l 8(sp),a0
    b978:	          move.l 8(a0),d0
    b97c:	,-------- beq.w ba20 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b980:	|         movea.l 8(sp),a0
    b984:	|         movea.l (a0),a0
    b986:	|         move.l (a0),d0
    b988:	|         move.l 12(sp),-(sp)
    b98c:	|         move.l d0,-(sp)
    b98e:	|         jsr 958 <put4bytes>
    b994:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b996:	|         clr.l (sp)
    b998:	|     ,-- bra.s ba12 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b99a:	|  ,--|-> movea.l 8(sp),a0
    b99e:	|  |  |   movea.l 4(a0),a0
    b9a2:	|  |  |   move.l (sp),d1
    b9a4:	|  |  |   move.l d1,d0
    b9a6:	|  |  |   add.l d0,d0
    b9a8:	|  |  |   add.l d1,d0
    b9aa:	|  |  |   add.l d0,d0
    b9ac:	|  |  |   add.l d0,d0
    b9ae:	|  |  |   adda.l d0,a0
    b9b0:	|  |  |   move.l (a0),d0
    b9b2:	|  |  |   move.l 12(sp),-(sp)
    b9b6:	|  |  |   move.l d0,-(sp)
    b9b8:	|  |  |   jsr 958 <put4bytes>
    b9be:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b9c0:	|  |  |   movea.l 8(sp),a0
    b9c4:	|  |  |   movea.l 4(a0),a0
    b9c8:	|  |  |   move.l (sp),d1
    b9ca:	|  |  |   move.l d1,d0
    b9cc:	|  |  |   add.l d0,d0
    b9ce:	|  |  |   add.l d1,d0
    b9d0:	|  |  |   add.l d0,d0
    b9d2:	|  |  |   add.l d0,d0
    b9d4:	|  |  |   adda.l d0,a0
    b9d6:	|  |  |   move.l 4(a0),d0
    b9da:	|  |  |   move.l 12(sp),-(sp)
    b9de:	|  |  |   move.l d0,-(sp)
    b9e0:	|  |  |   jsr 958 <put4bytes>
    b9e6:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b9e8:	|  |  |   movea.l 8(sp),a0
    b9ec:	|  |  |   movea.l 4(a0),a0
    b9f0:	|  |  |   move.l (sp),d1
    b9f2:	|  |  |   move.l d1,d0
    b9f4:	|  |  |   add.l d0,d0
    b9f6:	|  |  |   add.l d1,d0
    b9f8:	|  |  |   add.l d0,d0
    b9fa:	|  |  |   add.l d0,d0
    b9fc:	|  |  |   adda.l d0,a0
    b9fe:	|  |  |   move.l 8(a0),d0
    ba02:	|  |  |   move.l 12(sp),-(sp)
    ba06:	|  |  |   move.l d0,-(sp)
    ba08:	|  |  |   jsr 958 <put4bytes>
    ba0e:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    ba10:	|  |  |   addq.l #1,(sp)
    ba12:	|  |  '-> movea.l 8(sp),a0
    ba16:	|  |      move.l 8(a0),d0
    ba1a:	|  |      cmp.l (sp),d0
    ba1c:	|  '----- bgt.w b99a <saveAnim+0x3e>
		}
	}
	return TRUE;
    ba20:	'-------> moveq #1,d0
}
    ba22:	          addq.l #4,sp
    ba24:	          rts

0000ba26 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    ba26:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    ba28:	             movea.l 8(sp),a0
    ba2c:	             move.l 4(a0),d0
    ba30:	             move.l 12(sp),-(sp)
    ba34:	             move.l d0,-(sp)
    ba36:	             jsr 8d0 <put2bytes>
    ba3c:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    ba3e:	             clr.l (sp)
    ba40:	   ,-------- bra.s ba6c <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    ba42:	,--|-------> movea.l 8(sp),a0
    ba46:	|  |         move.l (a0),d1
    ba48:	|  |         move.l (sp),d0
    ba4a:	|  |         add.l d0,d0
    ba4c:	|  |         add.l d0,d0
    ba4e:	|  |         movea.l d1,a0
    ba50:	|  |         adda.l d0,a0
    ba52:	|  |         move.l (a0),d0
    ba54:	|  |         move.l 12(sp),-(sp)
    ba58:	|  |         move.l d0,-(sp)
    ba5a:	|  |         jsr b95c <saveAnim>
    ba60:	|  |         addq.l #8,sp
    ba62:	|  |         tst.w d0
    ba64:	|  |     ,-- bne.s ba6a <saveCostume+0x44>
    ba66:	|  |     |   clr.w d0
    ba68:	|  |  ,--|-- bra.s ba80 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    ba6a:	|  |  |  '-> addq.l #1,(sp)
    ba6c:	|  '--|----> movea.l 8(sp),a0
    ba70:	|     |      move.l 4(a0),d1
    ba74:	|     |      move.l d1,d0
    ba76:	|     |      add.l d0,d0
    ba78:	|     |      add.l d1,d0
    ba7a:	|     |      cmp.l (sp),d0
    ba7c:	'-----|----- bgt.s ba42 <saveCostume+0x1c>
	}

	return TRUE;
    ba7e:	      |      moveq #1,d0
}
    ba80:	      '----> addq.l #4,sp
    ba82:	             rts

0000ba84 <savePeople>:

BOOL savePeople (BPTR fp) {
    ba84:	             lea -144(sp),sp
    ba88:	             move.l a6,-(sp)
    ba8a:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    ba8c:	             move.l 1e880 <allPeople>,148(sp)
	int countPeople = 0, a;
    ba94:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    ba98:	             move.w 1e196 <scaleHorizon>,d0
    ba9e:	             movea.w d0,a0
    baa0:	             move.l 156(sp),-(sp)
    baa4:	             move.l a0,-(sp)
    baa6:	             jsr a9c <putSigned>
    baac:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    baae:	             move.w 1e198 <scaleDivide>,d0
    bab4:	             movea.w d0,a0
    bab6:	             move.l 156(sp),-(sp)
    baba:	             move.l a0,-(sp)
    babc:	             jsr a9c <putSigned>
    bac2:	             addq.l #8,sp

	while (me) {
    bac4:	         ,-- bra.s bad4 <savePeople+0x50>
		countPeople ++;
    bac6:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    baca:	      |  |   movea.l 148(sp),a0
    bace:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    bad4:	      |  '-> tst.l 148(sp)
    bad8:	      '----- bne.s bac6 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    bada:	             move.l 156(sp),-(sp)
    bade:	             move.l 148(sp),-(sp)
    bae2:	             jsr 8d0 <put2bytes>
    bae8:	             addq.l #8,sp

	me = allPeople;
    baea:	             move.l 1e880 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    baf2:	             clr.l 140(sp)
    baf6:	   ,-------- bra.w bf4e <savePeople+0x4ca>

		putFloat (me -> x, fp);
    bafa:	,--|-------> movea.l 148(sp),a0
    bafe:	|  |         move.l (a0),d0
    bb00:	|  |         move.l 156(sp),-(sp)
    bb04:	|  |         move.l d0,-(sp)
    bb06:	|  |         jsr a46 <putFloat>
    bb0c:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    bb0e:	|  |         movea.l 148(sp),a0
    bb12:	|  |         move.l 4(a0),d0
    bb16:	|  |         move.l 156(sp),-(sp)
    bb1a:	|  |         move.l d0,-(sp)
    bb1c:	|  |         jsr a46 <putFloat>
    bb22:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    bb24:	|  |         movea.l 148(sp),a0
    bb28:	|  |         move.l 80(a0),d0
    bb2c:	|  |         move.l 156(sp),-(sp)
    bb30:	|  |         move.l d0,-(sp)
    bb32:	|  |         jsr ba26 <saveCostume>
    bb38:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    bb3a:	|  |         movea.l 148(sp),a0
    bb3e:	|  |         move.l 72(a0),d0
    bb42:	|  |         move.l 156(sp),-(sp)
    bb46:	|  |         move.l d0,-(sp)
    bb48:	|  |         jsr b95c <saveAnim>
    bb4e:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    bb50:	|  |         move.l 156(sp),136(sp)
    bb56:	|  |         movea.l 148(sp),a0
    bb5a:	|  |         move.l 72(a0),d1
    bb5e:	|  |         movea.l 148(sp),a0
    bb62:	|  |         move.l 76(a0),d0
    bb66:	|  |         cmp.l d1,d0
    bb68:	|  |         seq d0
    bb6a:	|  |         neg.b d0
    bb6c:	|  |         move.b d0,d0
    bb6e:	|  |         andi.l #255,d0
    bb74:	|  |         move.l d0,132(sp)
    bb78:	|  |         move.l 1e824 <DOSBase>,d0
    bb7e:	|  |         movea.l d0,a6
    bb80:	|  |         move.l 136(sp),d1
    bb84:	|  |         move.l 132(sp),d2
    bb88:	|  |         jsr -312(a6)
    bb8c:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    bb90:	|  |         movea.l 148(sp),a0
    bb94:	|  |         move.l 32(a0),d0
    bb98:	|  |         move.l 156(sp),-(sp)
    bb9c:	|  |         move.l d0,-(sp)
    bb9e:	|  |         jsr a46 <putFloat>
    bba4:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    bba6:	|  |         movea.l 148(sp),a0
    bbaa:	|  |         move.l 118(a0),d0
    bbae:	|  |         move.l 156(sp),-(sp)
    bbb2:	|  |         move.l d0,-(sp)
    bbb4:	|  |         jsr 8d0 <put2bytes>
    bbba:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    bbbc:	|  |         movea.l 148(sp),a0
    bbc0:	|  |         move.l 20(a0),d0
    bbc4:	|  |         move.l 156(sp),-(sp)
    bbc8:	|  |         move.l d0,-(sp)
    bbca:	|  |         jsr 8d0 <put2bytes>
    bbd0:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    bbd2:	|  |         movea.l 148(sp),a0
    bbd6:	|  |         move.l 40(a0),d0
    bbda:	|  |         move.l 156(sp),-(sp)
    bbde:	|  |         move.l d0,-(sp)
    bbe0:	|  |         jsr 8d0 <put2bytes>
    bbe6:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    bbe8:	|  |         movea.l 148(sp),a0
    bbec:	|  |         move.l 44(a0),d0
    bbf0:	|  |         move.l 156(sp),-(sp)
    bbf4:	|  |         move.l d0,-(sp)
    bbf6:	|  |         jsr 8d0 <put2bytes>
    bbfc:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    bbfe:	|  |         movea.l 148(sp),a0
    bc02:	|  |         move.l 48(a0),d0
    bc06:	|  |         move.l 156(sp),-(sp)
    bc0a:	|  |         move.l d0,-(sp)
    bc0c:	|  |         jsr 8d0 <put2bytes>
    bc12:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    bc14:	|  |         movea.l 148(sp),a0
    bc18:	|  |         move.l 52(a0),d0
    bc1c:	|  |         move.l 156(sp),-(sp)
    bc20:	|  |         move.l d0,-(sp)
    bc22:	|  |         jsr 8d0 <put2bytes>
    bc28:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    bc2a:	|  |         movea.l 148(sp),a0
    bc2e:	|  |         move.l 84(a0),d0
    bc32:	|  |         move.l 156(sp),-(sp)
    bc36:	|  |         move.l d0,-(sp)
    bc38:	|  |         jsr 8d0 <put2bytes>
    bc3e:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    bc40:	|  |         movea.l 148(sp),a0
    bc44:	|  |         move.l 88(a0),d0
    bc48:	|  |         move.l 156(sp),-(sp)
    bc4c:	|  |         move.l d0,-(sp)
    bc4e:	|  |         jsr 8d0 <put2bytes>
    bc54:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    bc56:	|  |         movea.l 148(sp),a0
    bc5a:	|  |         move.l 28(a0),d0
    bc5e:	|  |         move.l 156(sp),-(sp)
    bc62:	|  |         move.l d0,-(sp)
    bc64:	|  |         jsr 8d0 <put2bytes>
    bc6a:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    bc6c:	|  |         movea.l 148(sp),a0
    bc70:	|  |         move.l 122(a0),d0
    bc74:	|  |         move.l 156(sp),-(sp)
    bc78:	|  |         move.l d0,-(sp)
    bc7a:	|  |         jsr 8d0 <put2bytes>
    bc80:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    bc82:	|  |         movea.l 148(sp),a0
    bc86:	|  |         move.l 24(a0),d0
    bc8a:	|  |         move.l d0,d0
    bc8c:	|  |         movea.w d0,a0
    bc8e:	|  |         move.l 156(sp),-(sp)
    bc92:	|  |         move.l a0,-(sp)
    bc94:	|  |         jsr a9c <putSigned>
    bc9a:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    bc9c:	|  |         move.l 156(sp),124(sp)
    bca2:	|  |         movea.l 148(sp),a0
    bca6:	|  |         move.w 104(a0),d0
    bcaa:	|  |         movea.w d0,a0
    bcac:	|  |         move.l a0,120(sp)
    bcb0:	|  |         move.l 1e824 <DOSBase>,d0
    bcb6:	|  |         movea.l d0,a6
    bcb8:	|  |         move.l 124(sp),d1
    bcbc:	|  |         move.l 120(sp),d2
    bcc0:	|  |         jsr -312(a6)
    bcc4:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    bcc8:	|  |         move.l 156(sp),112(sp)
    bcce:	|  |         movea.l 148(sp),a0
    bcd2:	|  |         move.w 64(a0),d0
    bcd6:	|  |         movea.w d0,a0
    bcd8:	|  |         move.l a0,108(sp)
    bcdc:	|  |         move.l 1e824 <DOSBase>,d0
    bce2:	|  |         movea.l d0,a6
    bce4:	|  |         move.l 112(sp),d1
    bce8:	|  |         move.l 108(sp),d2
    bcec:	|  |         jsr -312(a6)
    bcf0:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    bcf4:	|  |         move.l 156(sp),100(sp)
    bcfa:	|  |         movea.l 148(sp),a0
    bcfe:	|  |         move.w 66(a0),d0
    bd02:	|  |         movea.w d0,a0
    bd04:	|  |         move.l a0,96(sp)
    bd08:	|  |         move.l 1e824 <DOSBase>,d0
    bd0e:	|  |         movea.l d0,a6
    bd10:	|  |         move.l 100(sp),d1
    bd14:	|  |         move.l 96(sp),d2
    bd18:	|  |         jsr -312(a6)
    bd1c:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    bd20:	|  |         movea.l 148(sp),a0
    bd24:	|  |         move.l 68(a0),d0
    bd28:	|  |  ,----- beq.s bd66 <savePeople+0x2e2>
			FPutC (fp, 1);
    bd2a:	|  |  |      move.l 156(sp),76(sp)
    bd30:	|  |  |      moveq #1,d0
    bd32:	|  |  |      move.l d0,72(sp)
    bd36:	|  |  |      move.l 1e824 <DOSBase>,d0
    bd3c:	|  |  |      movea.l d0,a6
    bd3e:	|  |  |      move.l 76(sp),d1
    bd42:	|  |  |      move.l 72(sp),d2
    bd46:	|  |  |      jsr -312(a6)
    bd4a:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    bd4e:	|  |  |      movea.l 148(sp),a0
    bd52:	|  |  |      move.l 68(a0),d0
    bd56:	|  |  |      move.l 156(sp),-(sp)
    bd5a:	|  |  |      move.l d0,-(sp)
    bd5c:	|  |  |      jsr cf80 <saveFunction>
    bd62:	|  |  |      addq.l #8,sp
    bd64:	|  |  |  ,-- bra.s bd8a <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    bd66:	|  |  '--|-> move.l 156(sp),88(sp)
    bd6c:	|  |     |   moveq #1,d0
    bd6e:	|  |     |   move.l d0,84(sp)
    bd72:	|  |     |   move.l 1e824 <DOSBase>,d0
    bd78:	|  |     |   movea.l d0,a6
    bd7a:	|  |     |   move.l 88(sp),d1
    bd7e:	|  |     |   move.l 84(sp),d2
    bd82:	|  |     |   jsr -312(a6)
    bd86:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    bd8a:	|  |     '-> movea.l 148(sp),a0
    bd8e:	|  |         move.l 106(a0),d0
    bd92:	|  |         move.l 156(sp),-(sp)
    bd96:	|  |         move.l d0,-(sp)
    bd98:	|  |         jsr 8d0 <put2bytes>
    bd9e:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    bda0:	|  |         movea.l 148(sp),a0
    bda4:	|  |         move.l 92(a0),d0
    bda8:	|  |         move.l 156(sp),-(sp)
    bdac:	|  |         move.l d0,-(sp)
    bdae:	|  |         jsr 8d0 <put2bytes>
    bdb4:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    bdb6:	|  |         movea.l 148(sp),a0
    bdba:	|  |         move.l 100(a0),d0
    bdbe:	|  |         move.l 156(sp),-(sp)
    bdc2:	|  |         move.l d0,-(sp)
    bdc4:	|  |         jsr 8d0 <put2bytes>
    bdca:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    bdcc:	|  |         movea.l 148(sp),a0
    bdd0:	|  |         move.l 96(a0),d0
    bdd4:	|  |         move.l 156(sp),-(sp)
    bdd8:	|  |         move.l d0,-(sp)
    bdda:	|  |         jsr 8d0 <put2bytes>
    bde0:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    bde2:	|  |         movea.l 148(sp),a0
    bde6:	|  |         move.l 110(a0),d0
    bdea:	|  |         move.l d0,d0
    bdec:	|  |         movea.w d0,a0
    bdee:	|  |         move.l 156(sp),-(sp)
    bdf2:	|  |         move.l a0,-(sp)
    bdf4:	|  |         jsr a9c <putSigned>
    bdfa:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    bdfc:	|  |         movea.l 148(sp),a0
    be00:	|  |         move.l 56(a0),d0
    be04:	|  |         move.l d0,d0
    be06:	|  |         movea.w d0,a0
    be08:	|  |         move.l 156(sp),-(sp)
    be0c:	|  |         move.l a0,-(sp)
    be0e:	|  |         jsr a9c <putSigned>
    be14:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    be16:	|  |         movea.l 148(sp),a0
    be1a:	|  |         move.l 60(a0),d0
    be1e:	|  |         move.l d0,d0
    be20:	|  |         movea.w d0,a0
    be22:	|  |         move.l 156(sp),-(sp)
    be26:	|  |         move.l a0,-(sp)
    be28:	|  |         jsr a9c <putSigned>
    be2e:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    be30:	|  |         move.l 156(sp),64(sp)
    be36:	|  |         movea.l 148(sp),a0
    be3a:	|  |         move.b 126(a0),d0
    be3e:	|  |         move.b d0,d0
    be40:	|  |         andi.l #255,d0
    be46:	|  |         move.l d0,60(sp)
    be4a:	|  |         move.l 1e824 <DOSBase>,d0
    be50:	|  |         movea.l d0,a6
    be52:	|  |         move.l 64(sp),d1
    be56:	|  |         move.l 60(sp),d2
    be5a:	|  |         jsr -312(a6)
    be5e:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    be62:	|  |         move.l 156(sp),52(sp)
    be68:	|  |         movea.l 148(sp),a0
    be6c:	|  |         move.b 127(a0),d0
    be70:	|  |         move.b d0,d0
    be72:	|  |         andi.l #255,d0
    be78:	|  |         move.l d0,48(sp)
    be7c:	|  |         move.l 1e824 <DOSBase>,d0
    be82:	|  |         movea.l d0,a6
    be84:	|  |         move.l 52(sp),d1
    be88:	|  |         move.l 48(sp),d2
    be8c:	|  |         jsr -312(a6)
    be90:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    be94:	|  |         move.l 156(sp),40(sp)
    be9a:	|  |         movea.l 148(sp),a0
    be9e:	|  |         move.b 128(a0),d0
    bea2:	|  |         move.b d0,d0
    bea4:	|  |         andi.l #255,d0
    beaa:	|  |         move.l d0,36(sp)
    beae:	|  |         move.l 1e824 <DOSBase>,d0
    beb4:	|  |         movea.l d0,a6
    beb6:	|  |         move.l 40(sp),d1
    beba:	|  |         move.l 36(sp),d2
    bebe:	|  |         jsr -312(a6)
    bec2:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    bec6:	|  |         move.l 156(sp),28(sp)
    becc:	|  |         movea.l 148(sp),a0
    bed0:	|  |         move.b 129(a0),d0
    bed4:	|  |         move.b d0,d0
    bed6:	|  |         andi.l #255,d0
    bedc:	|  |         move.l d0,24(sp)
    bee0:	|  |         move.l 1e824 <DOSBase>,d0
    bee6:	|  |         movea.l d0,a6
    bee8:	|  |         move.l 28(sp),d1
    beec:	|  |         move.l 24(sp),d2
    bef0:	|  |         jsr -312(a6)
    bef4:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    bef8:	|  |         move.l 156(sp),16(sp)
    befe:	|  |         movea.l 148(sp),a0
    bf02:	|  |         move.b 130(a0),d0
    bf06:	|  |         move.b d0,d0
    bf08:	|  |         andi.l #255,d0
    bf0e:	|  |         move.l d0,12(sp)
    bf12:	|  |         move.l 1e824 <DOSBase>,d0
    bf18:	|  |         movea.l d0,a6
    bf1a:	|  |         move.l 16(sp),d1
    bf1e:	|  |         move.l 12(sp),d2
    bf22:	|  |         jsr -312(a6)
    bf26:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    bf2a:	|  |         movea.l 148(sp),a0
    bf2e:	|  |         move.l 114(a0),d0
    bf32:	|  |         move.l 156(sp),-(sp)
    bf36:	|  |         move.l d0,-(sp)
    bf38:	|  |         jsr e354 <saveObjectRef>
    bf3e:	|  |         addq.l #8,sp

		me = me -> next;
    bf40:	|  |         movea.l 148(sp),a0
    bf44:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    bf4a:	|  |         addq.l #1,140(sp)
    bf4e:	|  '-------> movea.l 140(sp),a0
    bf52:	|            cmpa.l 144(sp),a0
    bf56:	'----------- blt.w bafa <savePeople+0x76>
	}
	return TRUE;
    bf5a:	             moveq #1,d0
}
    bf5c:	             move.l (sp)+,d2
    bf5e:	             movea.l (sp)+,a6
    bf60:	             lea 144(sp),sp
    bf64:	             rts

0000bf66 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    bf66:	movea.l 4(sp),a0
    bf6a:	move.l 8(sp),(a0)
}
    bf6e:	nop
    bf70:	rts

0000bf72 <setDrawMode>:


void setDrawMode (int h, int ob) {
    bf72:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    bf74:	       move.l 12(sp),-(sp)
    bf78:	       jsr af9e <findPerson>
    bf7e:	       addq.l #4,sp
    bf80:	       move.l d0,(sp)
	if (! moveMe) return;
    bf82:	,----- beq.s bf96 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    bf84:	|      move.l 8(sp),-(sp)
    bf88:	|      move.l 4(sp),-(sp)
    bf8c:	|      jsr bf9c <setMyDrawMode>
    bf92:	|      addq.l #8,sp
    bf94:	|  ,-- bra.s bf98 <setDrawMode+0x26>
	if (! moveMe) return;
    bf96:	'--|-> nop
}
    bf98:	   '-> addq.l #4,sp
    bf9a:	       rts

0000bf9c <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    bf9c:	       moveq #19,d0
    bf9e:	       cmp.l 8(sp),d0
    bfa2:	,----- bcs.w c47a <setMyDrawMode+0x4de>
    bfa6:	|      move.l 8(sp),d0
    bfaa:	|      add.l d0,d0
    bfac:	|      movea.l d0,a0
    bfae:	|      adda.l #49082,a0
    bfb4:	|      move.w (a0),d0
    bfb6:	|      jmp (bfba <setMyDrawMode+0x1e>,pc,d0.w)
    bfba:	|      .short 0x04c0
    bfbc:	|      ori.l #6684712,-(a4)
    bfc2:	|      btst d0,-(a0)
    bfc4:	|      bchg d0,(a6)+
    bfc6:	|      bclr d0,(a4)+
    bfc8:	|      bset d0,(a2)+
    bfca:	|      andi.b #84,(a6)
    bfce:	|      andi.l #55575312,(a2)
    bfd4:	|      .short 0x02d0
    bfd6:	|      bclr d1,(a0)
    bfd8:	|      .short 0x044a
    bfda:	|      .short 0x040c
    bfdc:	|      movep.l d1,1158(a6)
    bfe0:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bfe2:	|      movea.l 4(sp),a0
    bfe6:	|      clr.b 128(a0)
    bfea:	|      movea.l 4(sp),a0
    bfee:	|      move.b 128(a0),d0
    bff2:	|      movea.l 4(sp),a0
    bff6:	|      move.b d0,127(a0)
    bffa:	|      movea.l 4(sp),a0
    bffe:	|      move.b 127(a0),d0
    c002:	|      movea.l 4(sp),a0
    c006:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    c00a:	|      movea.l 4(sp),a0
    c00e:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    c012:	|      movea.l 4(sp),a0
    c016:	|      move.b #64,130(a0)
			break;
    c01c:	|  ,-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c020:	|  |   movea.l 4(sp),a0
    c024:	|  |   clr.b 128(a0)
    c028:	|  |   movea.l 4(sp),a0
    c02c:	|  |   move.b 128(a0),d0
    c030:	|  |   movea.l 4(sp),a0
    c034:	|  |   move.b d0,127(a0)
    c038:	|  |   movea.l 4(sp),a0
    c03c:	|  |   move.b 127(a0),d0
    c040:	|  |   movea.l 4(sp),a0
    c044:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c048:	|  |   movea.l 4(sp),a0
    c04c:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    c050:	|  |   movea.l 4(sp),a0
    c054:	|  |   move.b #-128,130(a0)
			break;
    c05a:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c05e:	|  |   movea.l 4(sp),a0
    c062:	|  |   clr.b 128(a0)
    c066:	|  |   movea.l 4(sp),a0
    c06a:	|  |   move.b 128(a0),d0
    c06e:	|  |   movea.l 4(sp),a0
    c072:	|  |   move.b d0,127(a0)
    c076:	|  |   movea.l 4(sp),a0
    c07a:	|  |   move.b 127(a0),d0
    c07e:	|  |   movea.l 4(sp),a0
    c082:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c086:	|  |   movea.l 4(sp),a0
    c08a:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    c08e:	|  |   movea.l 4(sp),a0
    c092:	|  |   move.b #-64,130(a0)
			break;
    c098:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c09c:	|  |   movea.l 4(sp),a0
    c0a0:	|  |   clr.b 128(a0)
    c0a4:	|  |   movea.l 4(sp),a0
    c0a8:	|  |   move.b 128(a0),d0
    c0ac:	|  |   movea.l 4(sp),a0
    c0b0:	|  |   move.b d0,127(a0)
    c0b4:	|  |   movea.l 4(sp),a0
    c0b8:	|  |   move.b 127(a0),d0
    c0bc:	|  |   movea.l 4(sp),a0
    c0c0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c0c4:	|  |   movea.l 4(sp),a0
    c0c8:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    c0cc:	|  |   movea.l 4(sp),a0
    c0d0:	|  |   move.b #-2,130(a0)
			break;
    c0d6:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c0da:	|  |   movea.l 4(sp),a0
    c0de:	|  |   clr.b 128(a0)
    c0e2:	|  |   movea.l 4(sp),a0
    c0e6:	|  |   move.b 128(a0),d0
    c0ea:	|  |   movea.l 4(sp),a0
    c0ee:	|  |   move.b d0,127(a0)
    c0f2:	|  |   movea.l 4(sp),a0
    c0f6:	|  |   move.b 127(a0),d0
    c0fa:	|  |   movea.l 4(sp),a0
    c0fe:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    c102:	|  |   movea.l 4(sp),a0
    c106:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    c10c:	|  |   movea.l 4(sp),a0
    c110:	|  |   clr.b 130(a0)
			break;
    c114:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c118:	|  |   movea.l 4(sp),a0
    c11c:	|  |   clr.b 128(a0)
    c120:	|  |   movea.l 4(sp),a0
    c124:	|  |   move.b 128(a0),d0
    c128:	|  |   movea.l 4(sp),a0
    c12c:	|  |   move.b d0,127(a0)
    c130:	|  |   movea.l 4(sp),a0
    c134:	|  |   move.b 127(a0),d0
    c138:	|  |   movea.l 4(sp),a0
    c13c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    c140:	|  |   movea.l 4(sp),a0
    c144:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    c14a:	|  |   movea.l 4(sp),a0
    c14e:	|  |   clr.b 130(a0)
			break;
    c152:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c156:	|  |   movea.l 4(sp),a0
    c15a:	|  |   clr.b 128(a0)
    c15e:	|  |   movea.l 4(sp),a0
    c162:	|  |   move.b 128(a0),d0
    c166:	|  |   movea.l 4(sp),a0
    c16a:	|  |   move.b d0,127(a0)
    c16e:	|  |   movea.l 4(sp),a0
    c172:	|  |   move.b 127(a0),d0
    c176:	|  |   movea.l 4(sp),a0
    c17a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    c17e:	|  |   movea.l 4(sp),a0
    c182:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    c188:	|  |   movea.l 4(sp),a0
    c18c:	|  |   clr.b 130(a0)
			break;
    c190:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c194:	|  |   movea.l 4(sp),a0
    c198:	|  |   clr.b 128(a0)
    c19c:	|  |   movea.l 4(sp),a0
    c1a0:	|  |   move.b 128(a0),d0
    c1a4:	|  |   movea.l 4(sp),a0
    c1a8:	|  |   move.b d0,127(a0)
    c1ac:	|  |   movea.l 4(sp),a0
    c1b0:	|  |   move.b 127(a0),d0
    c1b4:	|  |   movea.l 4(sp),a0
    c1b8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c1bc:	|  |   movea.l 4(sp),a0
    c1c0:	|  |   st 129(a0)
			moveMe->transparency = 0;
    c1c4:	|  |   movea.l 4(sp),a0
    c1c8:	|  |   clr.b 130(a0)
			break;
    c1cc:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c1d0:	|  |   movea.l 4(sp),a0
    c1d4:	|  |   clr.b 128(a0)
    c1d8:	|  |   movea.l 4(sp),a0
    c1dc:	|  |   move.b 128(a0),d0
    c1e0:	|  |   movea.l 4(sp),a0
    c1e4:	|  |   move.b d0,127(a0)
    c1e8:	|  |   movea.l 4(sp),a0
    c1ec:	|  |   move.b 127(a0),d0
    c1f0:	|  |   movea.l 4(sp),a0
    c1f4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c1f8:	|  |   movea.l 4(sp),a0
    c1fc:	|  |   st 129(a0)
			moveMe->transparency = 64;
    c200:	|  |   movea.l 4(sp),a0
    c204:	|  |   move.b #64,130(a0)
			break;
    c20a:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c20e:	|  |   movea.l 4(sp),a0
    c212:	|  |   clr.b 128(a0)
    c216:	|  |   movea.l 4(sp),a0
    c21a:	|  |   move.b 128(a0),d0
    c21e:	|  |   movea.l 4(sp),a0
    c222:	|  |   move.b d0,127(a0)
    c226:	|  |   movea.l 4(sp),a0
    c22a:	|  |   move.b 127(a0),d0
    c22e:	|  |   movea.l 4(sp),a0
    c232:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c236:	|  |   movea.l 4(sp),a0
    c23a:	|  |   st 129(a0)
			moveMe->transparency = 128;
    c23e:	|  |   movea.l 4(sp),a0
    c242:	|  |   move.b #-128,130(a0)
			break;
    c248:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c24c:	|  |   movea.l 4(sp),a0
    c250:	|  |   clr.b 128(a0)
    c254:	|  |   movea.l 4(sp),a0
    c258:	|  |   move.b 128(a0),d0
    c25c:	|  |   movea.l 4(sp),a0
    c260:	|  |   move.b d0,127(a0)
    c264:	|  |   movea.l 4(sp),a0
    c268:	|  |   move.b 127(a0),d0
    c26c:	|  |   movea.l 4(sp),a0
    c270:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c274:	|  |   movea.l 4(sp),a0
    c278:	|  |   st 129(a0)
			moveMe->transparency = 192;
    c27c:	|  |   movea.l 4(sp),a0
    c280:	|  |   move.b #-64,130(a0)
			break;
    c286:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c28a:	|  |   movea.l 4(sp),a0
    c28e:	|  |   move.b #-128,128(a0)
    c294:	|  |   movea.l 4(sp),a0
    c298:	|  |   move.b 128(a0),d0
    c29c:	|  |   movea.l 4(sp),a0
    c2a0:	|  |   move.b d0,127(a0)
    c2a4:	|  |   movea.l 4(sp),a0
    c2a8:	|  |   move.b 127(a0),d0
    c2ac:	|  |   movea.l 4(sp),a0
    c2b0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    c2b4:	|  |   movea.l 4(sp),a0
    c2b8:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    c2be:	|  |   movea.l 4(sp),a0
    c2c2:	|  |   clr.b 130(a0)
			break;
    c2c6:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c2ca:	|  |   movea.l 4(sp),a0
    c2ce:	|  |   move.b #-128,128(a0)
    c2d4:	|  |   movea.l 4(sp),a0
    c2d8:	|  |   move.b 128(a0),d0
    c2dc:	|  |   movea.l 4(sp),a0
    c2e0:	|  |   move.b d0,127(a0)
    c2e4:	|  |   movea.l 4(sp),a0
    c2e8:	|  |   move.b 127(a0),d0
    c2ec:	|  |   movea.l 4(sp),a0
    c2f0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    c2f4:	|  |   movea.l 4(sp),a0
    c2f8:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    c2fe:	|  |   movea.l 4(sp),a0
    c302:	|  |   clr.b 130(a0)
			break;
    c306:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c30a:	|  |   movea.l 4(sp),a0
    c30e:	|  |   move.b #-128,128(a0)
    c314:	|  |   movea.l 4(sp),a0
    c318:	|  |   move.b 128(a0),d0
    c31c:	|  |   movea.l 4(sp),a0
    c320:	|  |   move.b d0,127(a0)
    c324:	|  |   movea.l 4(sp),a0
    c328:	|  |   move.b 127(a0),d0
    c32c:	|  |   movea.l 4(sp),a0
    c330:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    c334:	|  |   movea.l 4(sp),a0
    c338:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    c33e:	|  |   movea.l 4(sp),a0
    c342:	|  |   clr.b 130(a0)
			break;
    c346:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c34a:	|  |   movea.l 4(sp),a0
    c34e:	|  |   move.b #-128,128(a0)
    c354:	|  |   movea.l 4(sp),a0
    c358:	|  |   move.b 128(a0),d0
    c35c:	|  |   movea.l 4(sp),a0
    c360:	|  |   move.b d0,127(a0)
    c364:	|  |   movea.l 4(sp),a0
    c368:	|  |   move.b 127(a0),d0
    c36c:	|  |   movea.l 4(sp),a0
    c370:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c374:	|  |   movea.l 4(sp),a0
    c378:	|  |   st 129(a0)
			moveMe->transparency = 0;
    c37c:	|  |   movea.l 4(sp),a0
    c380:	|  |   clr.b 130(a0)
			break;
    c384:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c388:	|  |   movea.l 4(sp),a0
    c38c:	|  |   st 128(a0)
    c390:	|  |   movea.l 4(sp),a0
    c394:	|  |   move.b 128(a0),d0
    c398:	|  |   movea.l 4(sp),a0
    c39c:	|  |   move.b d0,127(a0)
    c3a0:	|  |   movea.l 4(sp),a0
    c3a4:	|  |   move.b 127(a0),d0
    c3a8:	|  |   movea.l 4(sp),a0
    c3ac:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    c3b0:	|  |   movea.l 4(sp),a0
    c3b4:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    c3ba:	|  |   movea.l 4(sp),a0
    c3be:	|  |   clr.b 130(a0)
			break;
    c3c2:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c3c6:	|  |   movea.l 4(sp),a0
    c3ca:	|  |   st 128(a0)
    c3ce:	|  |   movea.l 4(sp),a0
    c3d2:	|  |   move.b 128(a0),d0
    c3d6:	|  |   movea.l 4(sp),a0
    c3da:	|  |   move.b d0,127(a0)
    c3de:	|  |   movea.l 4(sp),a0
    c3e2:	|  |   move.b 127(a0),d0
    c3e6:	|  |   movea.l 4(sp),a0
    c3ea:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    c3ee:	|  |   movea.l 4(sp),a0
    c3f2:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    c3f8:	|  |   movea.l 4(sp),a0
    c3fc:	|  |   clr.b 130(a0)
			break;
    c400:	|  +-- bra.w c4b4 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c404:	|  |   movea.l 4(sp),a0
    c408:	|  |   st 128(a0)
    c40c:	|  |   movea.l 4(sp),a0
    c410:	|  |   move.b 128(a0),d0
    c414:	|  |   movea.l 4(sp),a0
    c418:	|  |   move.b d0,127(a0)
    c41c:	|  |   movea.l 4(sp),a0
    c420:	|  |   move.b 127(a0),d0
    c424:	|  |   movea.l 4(sp),a0
    c428:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    c42c:	|  |   movea.l 4(sp),a0
    c430:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    c436:	|  |   movea.l 4(sp),a0
    c43a:	|  |   clr.b 130(a0)
			break;
    c43e:	|  +-- bra.s c4b4 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c440:	|  |   movea.l 4(sp),a0
    c444:	|  |   st 128(a0)
    c448:	|  |   movea.l 4(sp),a0
    c44c:	|  |   move.b 128(a0),d0
    c450:	|  |   movea.l 4(sp),a0
    c454:	|  |   move.b d0,127(a0)
    c458:	|  |   movea.l 4(sp),a0
    c45c:	|  |   move.b 127(a0),d0
    c460:	|  |   movea.l 4(sp),a0
    c464:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c468:	|  |   movea.l 4(sp),a0
    c46c:	|  |   st 129(a0)
			moveMe->transparency = 0;
    c470:	|  |   movea.l 4(sp),a0
    c474:	|  |   clr.b 130(a0)
			break;
    c478:	|  +-- bra.s c4b4 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c47a:	'--|-> movea.l 4(sp),a0
    c47e:	   |   clr.b 128(a0)
    c482:	   |   movea.l 4(sp),a0
    c486:	   |   move.b 128(a0),d0
    c48a:	   |   movea.l 4(sp),a0
    c48e:	   |   move.b d0,127(a0)
    c492:	   |   movea.l 4(sp),a0
    c496:	   |   move.b 127(a0),d0
    c49a:	   |   movea.l 4(sp),a0
    c49e:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c4a2:	   |   movea.l 4(sp),a0
    c4a6:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    c4aa:	   |   movea.l 4(sp),a0
    c4ae:	   |   clr.b 130(a0)
			break;
    c4b2:	   |   nop
	}
}
    c4b4:	   '-> nop
    c4b6:	       rts

0000c4b8 <shufflePeople>:

void shufflePeople () {
    c4b8:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    c4bc:	             move.l #125056,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    c4c4:	             move.l 1e880 <allPeople>,d0
    c4ca:	,----------- beq.w c5a0 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    c4ce:	|     ,----- bra.w c590 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    c4d2:	|  ,--|----> movea.l 16(sp),a0
    c4d6:	|  |  |      movea.l (a0),a0
    c4d8:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    c4de:	|  |  |      movea.l 16(sp),a0
    c4e2:	|  |  |      movea.l (a0),a0
    c4e4:	|  |  |      move.l 118(a0),d0
    c4e8:	|  |  |      moveq #1,d1
    c4ea:	|  |  |      and.l d1,d0
    c4ec:	|  |  |  ,-- beq.s c504 <shufflePeople+0x4c>
    c4ee:	|  |  |  |   move.l #1148846080,-(sp)
    c4f4:	|  |  |  |   move.l 16(sp),-(sp)
    c4f8:	|  |  |  |   jsr 186f2 <__addsf3>
    c4fe:	|  |  |  |   addq.l #8,sp
    c500:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    c504:	|  |  |  '-> movea.l 16(sp),a0
    c508:	|  |  |      movea.l (a0),a0
    c50a:	|  |  |      movea.l 36(a0),a0
    c50e:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    c514:	|  |  |      movea.l 16(sp),a0
    c518:	|  |  |      movea.l (a0),a0
    c51a:	|  |  |      movea.l 36(a0),a0
    c51e:	|  |  |      move.l 118(a0),d0
    c522:	|  |  |      moveq #1,d1
    c524:	|  |  |      and.l d1,d0
    c526:	|  |  |  ,-- beq.s c53e <shufflePeople+0x86>
    c528:	|  |  |  |   move.l #1148846080,-(sp)
    c52e:	|  |  |  |   move.l 12(sp),-(sp)
    c532:	|  |  |  |   jsr 186f2 <__addsf3>
    c538:	|  |  |  |   addq.l #8,sp
    c53a:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    c53e:	|  |  |  '-> move.l 8(sp),-(sp)
    c542:	|  |  |      move.l 16(sp),-(sp)
    c546:	|  |  |      jsr 18aa2 <__gtsf2>
    c54c:	|  |  |      addq.l #8,sp
    c54e:	|  |  |      tst.l d0
    c550:	|  |  |  ,-- ble.s c582 <shufflePeople+0xca>
			A = (*thisReference);
    c552:	|  |  |  |   movea.l 16(sp),a0
    c556:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    c55a:	|  |  |  |   movea.l 16(sp),a0
    c55e:	|  |  |  |   movea.l (a0),a0
    c560:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    c564:	|  |  |  |   movea.l (sp),a0
    c566:	|  |  |  |   move.l 36(a0),d0
    c56a:	|  |  |  |   movea.l 4(sp),a0
    c56e:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    c572:	|  |  |  |   movea.l (sp),a0
    c574:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    c57a:	|  |  |  |   movea.l 16(sp),a0
    c57e:	|  |  |  |   move.l (sp),(a0)
    c580:	|  |  +--|-- bra.s c590 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    c582:	|  |  |  '-> movea.l 16(sp),a0
    c586:	|  |  |      move.l (a0),d0
    c588:	|  |  |      moveq #36,d1
    c58a:	|  |  |      add.l d0,d1
    c58c:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    c590:	|  |  '----> movea.l 16(sp),a0
    c594:	|  |         movea.l (a0),a0
    c596:	|  |         move.l 36(a0),d0
    c59a:	|  '-------- bne.w c4d2 <shufflePeople+0x1a>
    c59e:	|        ,-- bra.s c5a2 <shufflePeople+0xea>
	if (!allPeople) return;
    c5a0:	'--------|-> nop
		}
	}
}
    c5a2:	         '-> lea 20(sp),sp
    c5a6:	             rts

0000c5a8 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    c5a8:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    c5aa:	       tst.l 8(sp)
    c5ae:	   ,-- bgt.s c5b4 <setCharacterWalkSpeed+0xc>
    c5b0:	   |   clr.w d0
    c5b2:	,--|-- bra.s c5d2 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    c5b4:	|  '-> move.l 12(sp),-(sp)
    c5b8:	|      jsr af9e <findPerson>
    c5be:	|      addq.l #4,sp
    c5c0:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    c5c2:	|  ,-- bne.s c5c8 <setCharacterWalkSpeed+0x20>
    c5c4:	|  |   clr.w d0
    c5c6:	+--|-- bra.s c5d2 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    c5c8:	|  '-> movea.l (sp),a0
    c5ca:	|      move.l 8(sp),28(a0)
	return TRUE;
    c5d0:	|      moveq #1,d0
}
    c5d2:	'----> addq.l #4,sp
    c5d4:	       rts

0000c5d6 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    c5d6:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c5d8:	       move.l 8(sp),-(sp)
    c5dc:	       jsr af9e <findPerson>
    c5e2:	       addq.l #4,sp
    c5e4:	       move.l d0,(sp)
    if (thisPerson) {
    c5e6:	,----- beq.s c606 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    c5e8:	|      movea.l (sp),a0
    c5ea:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    c5f0:	|      moveq #2,d0
    c5f2:	|      and.l 12(sp),d0
    c5f6:	|  ,-- beq.s c602 <setPersonExtra+0x2c>
    c5f8:	|  |   movea.l (sp),a0
    c5fa:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    c602:	|  '-> moveq #1,d0
    c604:	|  ,-- bra.s c608 <setPersonExtra+0x32>
    }
    return FALSE;
    c606:	'--|-> clr.w d0
}
    c608:	   '-> addq.l #4,sp
    c60a:	       rts

0000c60c <setScale>:


void setScale (short int h, short int d) {
    c60c:	subq.l #4,sp
    c60e:	move.l 8(sp),d1
    c612:	move.l 12(sp),d0
    c616:	move.w d1,d1
    c618:	move.w d1,2(sp)
    c61c:	move.w d0,d0
    c61e:	move.w d0,(sp)
	scaleHorizon = h;
    c620:	move.w 2(sp),1e196 <scaleHorizon>
	scaleDivide = d;
    c628:	move.w (sp),1e198 <scaleDivide>
}
    c62e:	nop
    c630:	addq.l #4,sp
    c632:	rts

0000c634 <setShown>:

void setShown (BOOL h, int ob) {
    c634:	    subq.l #8,sp
    c636:	    move.l 12(sp),d0
    c63a:	    move.w d0,d0
    c63c:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    c640:	    move.l 16(sp),-(sp)
    c644:	    jsr af9e <findPerson>
    c64a:	    addq.l #4,sp
    c64c:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    c650:	,-- beq.s c65c <setShown+0x28>
    c652:	|   movea.l 4(sp),a0
    c656:	|   move.w 2(sp),104(a0)
}
    c65c:	'-> nop
    c65e:	    addq.l #8,sp
    c660:	    rts

0000c662 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    c662:	       subq.l #8,sp
    c664:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    c666:	       movea.l 16(sp),a0
    c66a:	       move.l 92(a0),d0
    c66e:	       move.l d0,d1
    c670:	       addi.l #360,d1
    c676:	       movea.l 16(sp),a0
    c67a:	       move.l 96(a0),d0
    c67e:	       move.l d1,d2
    c680:	       sub.l d0,d2
    c682:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    c686:	       movea.l 16(sp),a0
    c68a:	       move.l 122(a0),d0
    c68e:	   ,-- beq.s c69a <spinStep+0x38>
    c690:	   |   movea.l 16(sp),a0
    c694:	   |   move.l 122(a0),d0
    c698:	,--|-- bra.s c6b4 <spinStep+0x52>
    c69a:	|  '-> movea.l 16(sp),a0
    c69e:	|      movea.l 80(a0),a0
    c6a2:	|      move.l 4(a0),d0
    c6a6:	|      move.l d0,-(sp)
    c6a8:	|      pea 168 <decodeFilename+0x50>
    c6ac:	|      jsr 18f0e <__divsi3>
    c6b2:	|      addq.l #8,sp
    c6b4:	'----> move.l d0,4(sp)
	while (diff > 180) {
    c6b8:	   ,-- bra.s c6c2 <spinStep+0x60>
		diff -= 360;
    c6ba:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    c6c2:	|  '-> cmpi.l #180,8(sp)
    c6ca:	'----- bgt.s c6ba <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    c6cc:	       move.l 8(sp),d0
    c6d0:	       cmp.l 4(sp),d0
    c6d4:	   ,-- blt.s c6f2 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    c6d6:	   |   movea.l 16(sp),a0
    c6da:	   |   move.l 92(a0),d0
    c6de:	   |   sub.l 4(sp),d0
    c6e2:	   |   move.l d0,-(sp)
    c6e4:	   |   move.l 20(sp),-(sp)
    c6e8:	   |   jsr c7d2 <turnMeAngle>
    c6ee:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    c6f0:	,--|-- bra.s c738 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    c6f2:	|  '-> move.l 4(sp),d0
    c6f6:	|      neg.l d0
    c6f8:	|      cmp.l 8(sp),d0
    c6fc:	|  ,-- blt.s c71a <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    c6fe:	|  |   movea.l 16(sp),a0
    c702:	|  |   move.l 92(a0),d0
    c706:	|  |   add.l 4(sp),d0
    c70a:	|  |   move.l d0,-(sp)
    c70c:	|  |   move.l 20(sp),-(sp)
    c710:	|  |   jsr c7d2 <turnMeAngle>
    c716:	|  |   addq.l #8,sp
}
    c718:	+--|-- bra.s c738 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    c71a:	|  '-> movea.l 16(sp),a0
    c71e:	|      move.l 96(a0),d0
    c722:	|      move.l d0,-(sp)
    c724:	|      move.l 20(sp),-(sp)
    c728:	|      jsr c7d2 <turnMeAngle>
    c72e:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    c730:	|      movea.l 16(sp),a0
    c734:	|      clr.w 66(a0)
}
    c738:	'----> nop
    c73a:	       move.l (sp)+,d2
    c73c:	       addq.l #8,sp
    c73e:	       rts

0000c740 <stopPerson>:


BOOL stopPerson (int o) {
    c740:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    c742:	       move.l 8(sp),-(sp)
    c746:	       jsr af9e <findPerson>
    c74c:	       addq.l #4,sp
    c74e:	       move.l d0,(sp)
    if (moveMe)
    c750:	,----- beq.s c78e <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    c752:	|      movea.l (sp),a0
    c754:	|      move.l 68(a0),d0
    c758:	+----- beq.s c78e <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    c75a:	|      movea.l (sp),a0
    c75c:	|      move.l 68(a0),d0
    c760:	|      move.l d0,-(sp)
    c762:	|      jsr 5548 <abortFunction>
    c768:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    c76a:	|      movea.l (sp),a0
    c76c:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    c770:	|      movea.l (sp),a0
    c772:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    c776:	|      movea.l (sp),a0
    c778:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    c77c:	|      clr.l -(sp)
    c77e:	|      move.l 4(sp),-(sp)
    c782:	|      jsr 46ee <setFrames>
    c788:	|      addq.l #8,sp
            return TRUE;
    c78a:	|      moveq #1,d0
    c78c:	|  ,-- bra.s c790 <stopPerson+0x50>
        }
    return FALSE;
    c78e:	'--|-> clr.w d0
}
    c790:	   '-> addq.l #4,sp
    c792:	       rts

0000c794 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    c794:	       subq.l #8,sp
	int total = 0;
    c796:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c79a:	       clr.l (sp)
    c79c:	   ,-- bra.s c7be <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    c79e:	,--|-> movea.l 12(sp),a0
    c7a2:	|  |   movea.l 4(a0),a0
    c7a6:	|  |   move.l (sp),d1
    c7a8:	|  |   move.l d1,d0
    c7aa:	|  |   add.l d0,d0
    c7ac:	|  |   add.l d1,d0
    c7ae:	|  |   add.l d0,d0
    c7b0:	|  |   add.l d0,d0
    c7b2:	|  |   adda.l d0,a0
    c7b4:	|  |   move.l 4(a0),d0
    c7b8:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c7bc:	|  |   addq.l #1,(sp)
    c7be:	|  '-> movea.l 12(sp),a0
    c7c2:	|      move.l 8(a0),d0
    c7c6:	|      cmp.l (sp),d0
    c7c8:	'----- bgt.s c79e <timeForAnim+0xa>
	}
	return total;
    c7ca:	       move.l 4(sp),d0
}
    c7ce:	       addq.l #8,sp
    c7d0:	       rts

0000c7d2 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    c7d2:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    c7d4:	       movea.l 8(sp),a0
    c7d8:	       movea.l 80(a0),a0
    c7dc:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    c7e0:	       movea.l 8(sp),a0
    c7e4:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    c7ea:	       move.l (sp),-(sp)
    c7ec:	       pea b4 <_start+0xb4>
    c7f0:	       jsr 18f0e <__divsi3>
    c7f6:	       addq.l #8,sp
    c7f8:	       move.l d0,d1
    c7fa:	       addi.l #180,d1
    c800:	       movea.l 8(sp),a0
    c804:	       move.l 100(a0),d0
    c808:	       add.l d1,d0
    c80a:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    c80e:	   ,-- bra.s c818 <turnMeAngle+0x46>
    c810:	,--|-> addi.l #-360,12(sp)
    c818:	|  '-> cmpi.l #359,12(sp)
    c820:	'----- bgt.s c810 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    c822:	       move.l (sp),-(sp)
    c824:	       move.l 16(sp),-(sp)
    c828:	       jsr 18e90 <__mulsi3>
    c82e:	       addq.l #8,sp
    c830:	       pea 168 <decodeFilename+0x50>
    c834:	       move.l d0,-(sp)
    c836:	       jsr 18f0e <__divsi3>
    c83c:	       addq.l #8,sp
    c83e:	       movea.l 8(sp),a0
    c842:	       move.l d0,106(a0)
}
    c846:	       nop
    c848:	       addq.l #4,sp
    c84a:	       rts

0000c84c <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    c84c:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c84e:	          move.l 8(sp),-(sp)
    c852:	          jsr af9e <findPerson>
    c858:	          addq.l #4,sp
    c85a:	          move.l d0,(sp)
    if (thisPerson) {
    c85c:	,-------- beq.s c8bc <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    c85e:	|         movea.l (sp),a0
    c860:	|         move.l 68(a0),d0
    c864:	|     ,-- beq.s c876 <turnPersonToFace+0x2a>
    c866:	|     |   movea.l (sp),a0
    c868:	|     |   move.l 68(a0),d0
    c86c:	|     |   move.l d0,-(sp)
    c86e:	|     |   jsr 5548 <abortFunction>
    c874:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    c876:	|     '-> movea.l (sp),a0
    c878:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    c87c:	|         movea.l (sp),a0
    c87e:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    c882:	|         movea.l (sp),a0
    c884:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    c888:	|         move.l 12(sp),-(sp)
    c88c:	|         move.l 4(sp),-(sp)
    c890:	|         jsr c7d2 <turnMeAngle>
    c896:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    c898:	|         movea.l 1e75e <speech>,a0
    c89e:	|         move.l (a0),d0
    c8a0:	|         cmp.l (sp),d0
    c8a2:	|  ,----- bne.s c8a8 <turnPersonToFace+0x5c>
    c8a4:	|  |      moveq #2,d0
    c8a6:	|  |  ,-- bra.s c8aa <turnPersonToFace+0x5e>
    c8a8:	|  '--|-> moveq #0,d0
    c8aa:	|     '-> move.l d0,-(sp)
    c8ac:	|         move.l 4(sp),-(sp)
    c8b0:	|         jsr 46ee <setFrames>
    c8b6:	|         addq.l #8,sp
        return TRUE;
    c8b8:	|         moveq #1,d0
    c8ba:	|     ,-- bra.s c8be <turnPersonToFace+0x72>
    }
    return FALSE;
    c8bc:	'-----|-> clr.w d0
}
    c8be:	      '-> addq.l #4,sp
    c8c0:	          rts

0000c8c2 <walkAllPeople>:

void walkAllPeople() {
    c8c2:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    c8c4:	             move.l 1e880 <allPeople>,(sp)

	while (thisPerson) {
    c8ca:	   ,-------- bra.s c93a <walkAllPeople+0x78>
		if (thisPerson->walking) {
    c8cc:	,--|-------> movea.l (sp),a0
    c8ce:	|  |         move.w 64(a0),d0
    c8d2:	|  |     ,-- beq.s c8e6 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    c8d4:	|  |     |   pea 1 <_start+0x1>
    c8d8:	|  |     |   move.l 4(sp),-(sp)
    c8dc:	|  |     |   jsr c946 <walkMe>
    c8e2:	|  |     |   addq.l #8,sp
    c8e4:	|  |  ,--|-- bra.s c906 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    c8e6:	|  |  |  '-> movea.l (sp),a0
    c8e8:	|  |  |      move.w 66(a0),d0
    c8ec:	|  |  +----- beq.s c906 <walkAllPeople+0x44>
			spinStep(thisPerson);
    c8ee:	|  |  |      move.l (sp),-(sp)
    c8f0:	|  |  |      jsr c662 <spinStep>
    c8f6:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    c8f8:	|  |  |      clr.l -(sp)
    c8fa:	|  |  |      move.l 4(sp),-(sp)
    c8fe:	|  |  |      jsr 46ee <setFrames>
    c904:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    c906:	|  |  '----> movea.l (sp),a0
    c908:	|  |         move.w 64(a0),d0
    c90c:	|  |     ,-- bne.s c934 <walkAllPeople+0x72>
    c90e:	|  |     |   movea.l (sp),a0
    c910:	|  |     |   move.w 66(a0),d0
    c914:	|  |     +-- bne.s c934 <walkAllPeople+0x72>
    c916:	|  |     |   movea.l (sp),a0
    c918:	|  |     |   move.l 68(a0),d0
    c91c:	|  |     +-- beq.s c934 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    c91e:	|  |     |   movea.l (sp),a0
    c920:	|  |     |   move.l 68(a0),d0
    c924:	|  |     |   move.l d0,-(sp)
    c926:	|  |     |   jsr 794c <restartFunction>
    c92c:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    c92e:	|  |     |   movea.l (sp),a0
    c930:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    c934:	|  |     '-> movea.l (sp),a0
    c936:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    c93a:	|  '-------> tst.l (sp)
    c93c:	'----------- bne.s c8cc <walkAllPeople+0xa>
	}
}
    c93e:	             nop
    c940:	             nop
    c942:	             addq.l #4,sp
    c944:	             rts

0000c946 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    c946:	                lea -20(sp),sp
    c94a:	                move.l d3,-(sp)
    c94c:	                move.l d2,-(sp)
    c94e:	                move.l 36(sp),d0
    c952:	                move.w d0,d0
    c954:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    c958:	                cmpi.w #-1,10(sp)
    c95e:	,-------------- bne.s c966 <walkMe+0x20>
    c960:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c966:	>-------------> movea.l 32(sp),a0
    c96a:	|               move.l 48(a0),d0
    c96e:	|               move.l d0,-(sp)
    c970:	|               jsr 18936 <__floatsisf>
    c976:	|               addq.l #4,sp
    c978:	|               move.l d0,d1
    c97a:	|               movea.l 32(sp),a0
    c97e:	|               move.l (a0),d0
    c980:	|               move.l d0,-(sp)
    c982:	|               move.l d1,-(sp)
    c984:	|               jsr 18c2a <__subsf3>
    c98a:	|               addq.l #8,sp
    c98c:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    c990:	|               movea.l 32(sp),a0
    c994:	|               move.l 52(a0),d0
    c998:	|               move.l d0,-(sp)
    c99a:	|               jsr 18936 <__floatsisf>
    c9a0:	|               addq.l #4,sp
    c9a2:	|               move.l d0,d1
    c9a4:	|               movea.l 32(sp),a0
    c9a8:	|               move.l 4(a0),d0
    c9ac:	|               move.l d0,-(sp)
    c9ae:	|               move.l d1,-(sp)
    c9b0:	|               jsr 18c2a <__subsf3>
    c9b6:	|               addq.l #8,sp
    c9b8:	|               move.l d0,-(sp)
    c9ba:	|               move.l d0,-(sp)
    c9bc:	|               jsr 186f2 <__addsf3>
    c9c2:	|               addq.l #8,sp
    c9c4:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c9c8:	|               movea.l 32(sp),a0
    c9cc:	|               move.l 32(a0),d2
    c9d0:	|               movea.l 32(sp),a0
    c9d4:	|               move.l 28(a0),d0
    c9d8:	|               move.l d0,-(sp)
    c9da:	|               jsr 18936 <__floatsisf>
    c9e0:	|               addq.l #4,sp
    c9e2:	|               move.l d0,-(sp)
    c9e4:	|               move.l d2,-(sp)
    c9e6:	|               jsr 189e8 <__mulsf3>
    c9ec:	|               addq.l #8,sp
    c9ee:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c9f2:	|               move.l 24(sp),-(sp)
    c9f6:	|               jsr 18858 <__extendsfdf2>
    c9fc:	|               addq.l #4,sp
    c9fe:	|               move.l #-1717986918,-(sp)
    ca04:	|               move.l #1070176665,-(sp)
    ca0a:	|               move.l d1,-(sp)
    ca0c:	|               move.l d0,-(sp)
    ca0e:	|               jsr 18b0e <__ltdf2>
    ca14:	|               lea 16(sp),sp
    ca18:	|               tst.l d0
    ca1a:	|           ,-- bge.s ca24 <walkMe+0xde>
    ca1c:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    ca24:	|           '-> move.l 20(sp),-(sp)
    ca28:	|               jsr 188ce <__fixsfsi>
    ca2e:	|               addq.l #4,sp
    ca30:	|               move.l d0,-(sp)
    ca32:	|               jsr 9b8e <TF_abs>
    ca38:	|               addq.l #4,sp
    ca3a:	|               move.l d0,d2
    ca3c:	|               move.l 16(sp),-(sp)
    ca40:	|               jsr 188ce <__fixsfsi>
    ca46:	|               addq.l #4,sp
    ca48:	|               move.l d0,-(sp)
    ca4a:	|               jsr 9b8e <TF_abs>
    ca50:	|               addq.l #4,sp
    ca52:	|               cmp.l d2,d0
    ca54:	|        ,----- bgt.s ca78 <walkMe+0x132>
    ca56:	|        |      move.l 20(sp),-(sp)
    ca5a:	|        |      jsr 188ce <__fixsfsi>
    ca60:	|        |      addq.l #4,sp
    ca62:	|        |      move.l d0,-(sp)
    ca64:	|        |      jsr 9b8e <TF_abs>
    ca6a:	|        |      addq.l #4,sp
    ca6c:	|        |      move.l d0,-(sp)
    ca6e:	|        |      jsr 18936 <__floatsisf>
    ca74:	|        |      addq.l #4,sp
    ca76:	|        |  ,-- bra.s ca98 <walkMe+0x152>
    ca78:	|        '--|-> move.l 16(sp),-(sp)
    ca7c:	|           |   jsr 188ce <__fixsfsi>
    ca82:	|           |   addq.l #4,sp
    ca84:	|           |   move.l d0,-(sp)
    ca86:	|           |   jsr 9b8e <TF_abs>
    ca8c:	|           |   addq.l #4,sp
    ca8e:	|           |   move.l d0,-(sp)
    ca90:	|           |   jsr 18936 <__floatsisf>
    ca96:	|           |   addq.l #4,sp
    ca98:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    ca9c:	|               move.l 12(sp),-(sp)
    caa0:	|               jsr 188ce <__fixsfsi>
    caa6:	|               addq.l #4,sp
    caa8:	|               move.l d0,-(sp)
    caaa:	|               jsr 9b8e <TF_abs>
    cab0:	|               addq.l #4,sp
    cab2:	|               move.l d0,-(sp)
    cab4:	|               jsr 18936 <__floatsisf>
    caba:	|               addq.l #4,sp
    cabc:	|               move.l d0,-(sp)
    cabe:	|               move.l 28(sp),-(sp)
    cac2:	|               jsr 18b5c <__ltsf2>
    cac8:	|               addq.l #8,sp
    caca:	|               tst.l d0
    cacc:	|        ,----- bge.w cb7e <walkMe+0x238>
			if (thisPerson->spinning) {
    cad0:	|        |      movea.l 32(sp),a0
    cad4:	|        |      move.w 66(a0),d0
    cad8:	|        |  ,-- beq.s caf6 <walkMe+0x1b0>
				spinStep(thisPerson);
    cada:	|        |  |   move.l 32(sp),-(sp)
    cade:	|        |  |   jsr c662 <spinStep>
    cae4:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    cae6:	|        |  |   pea 1 <_start+0x1>
    caea:	|        |  |   move.l 36(sp),-(sp)
    caee:	|        |  |   jsr 46ee <setFrames>
    caf4:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    caf6:	|        |  '-> move.l 24(sp),-(sp)
    cafa:	|        |      move.l 16(sp),-(sp)
    cafe:	|        |      jsr 187ec <__divsf3>
    cb04:	|        |      addq.l #8,sp
    cb06:	|        |      move.l d0,24(sp)
			if (move)
    cb0a:	|        |      tst.w 10(sp)
    cb0e:	|        |  ,-- beq.s cb78 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    cb10:	|        |  |   movea.l 32(sp),a0
    cb14:	|        |  |   move.l 4(a0),d2
    cb18:	|        |  |   move.l 24(sp),d0
    cb1c:	|        |  |   move.l d0,-(sp)
    cb1e:	|        |  |   move.l d0,-(sp)
    cb20:	|        |  |   jsr 186f2 <__addsf3>
    cb26:	|        |  |   addq.l #8,sp
    cb28:	|        |  |   move.l d0,-(sp)
    cb2a:	|        |  |   move.l 20(sp),-(sp)
    cb2e:	|        |  |   jsr 187ec <__divsf3>
    cb34:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    cb36:	|        |  |   move.l d0,-(sp)
    cb38:	|        |  |   move.l d2,-(sp)
    cb3a:	|        |  |   jsr 186f2 <__addsf3>
    cb40:	|        |  |   addq.l #8,sp
    cb42:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    cb44:	|        |  |   movea.l 32(sp),a0
    cb48:	|        |  |   move.l (a0),d3
    cb4a:	|        |  |   move.l 24(sp),-(sp)
    cb4e:	|        |  |   move.l 24(sp),-(sp)
    cb52:	|        |  |   jsr 187ec <__divsf3>
    cb58:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    cb5a:	|        |  |   move.l d0,-(sp)
    cb5c:	|        |  |   move.l d3,-(sp)
    cb5e:	|        |  |   jsr 186f2 <__addsf3>
    cb64:	|        |  |   addq.l #8,sp
    cb66:	|        |  |   move.l d2,-(sp)
    cb68:	|        |  |   move.l d0,-(sp)
    cb6a:	|        |  |   move.l 40(sp),-(sp)
    cb6e:	|        |  |   jsr b748 <moveAndScale>
    cb74:	|        |  |   lea 12(sp),sp
			return TRUE;
    cb78:	|        |  '-> moveq #1,d0
    cb7a:	|  ,-----|----- bra.w cc2c <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    cb7e:	|  |     '----> movea.l 32(sp),a0
    cb82:	|  |            move.l 56(a0),d0
    cb86:	|  |            moveq #-1,d1
    cb88:	|  |            cmp.l d0,d1
    cb8a:	|  |        ,-- bne.s cbc2 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    cb8c:	|  |        |   movea.l 32(sp),a0
    cb90:	|  |        |   move.l 110(a0),d0
    cb94:	|  |        |   moveq #-1,d1
    cb96:	|  |        |   cmp.l d0,d1
    cb98:	|  |  ,-----|-- beq.s cbd6 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    cb9a:	|  |  |     |   movea.l 32(sp),a0
    cb9e:	|  |  |     |   move.l 110(a0),d0
    cba2:	|  |  |     |   movea.l 32(sp),a0
    cba6:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    cbaa:	|  |  |     |   movea.l 32(sp),a0
    cbae:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    cbb4:	|  |  |     |   move.l 32(sp),-(sp)
    cbb8:	|  |  |     |   jsr c662 <spinStep>
    cbbe:	|  |  |     |   addq.l #4,sp
			}
			break;
    cbc0:	|  |  +-----|-- bra.s cbd6 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    cbc2:	|  |  |     '-> move.l 32(sp),-(sp)
    cbc6:	|  |  |         jsr a300 <doBorderStuff>
    cbcc:	|  |  |         addq.l #4,sp
    cbce:	|  |  |         tst.w d0
    cbd0:	|  |  |  ,----- beq.s cbda <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    cbd2:	'--|--|--|----- bra.w c966 <walkMe+0x20>
			break;
    cbd6:	   |  '--|----> nop
    cbd8:	   |     |  ,-- bra.s cbdc <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    cbda:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    cbdc:	   |        '-> movea.l 32(sp),a0
    cbe0:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    cbe4:	   |            clr.l -(sp)
    cbe6:	   |            move.l 36(sp),-(sp)
    cbea:	   |            jsr 46ee <setFrames>
    cbf0:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    cbf2:	   |            movea.l 32(sp),a0
    cbf6:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    cbfa:	   |            move.l d0,-(sp)
    cbfc:	   |            jsr 18936 <__floatsisf>
    cc02:	   |            addq.l #4,sp
    cc04:	   |            move.l d0,d2
				 thisPerson->walkToX,
    cc06:	   |            movea.l 32(sp),a0
    cc0a:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    cc0e:	   |            move.l d0,-(sp)
    cc10:	   |            jsr 18936 <__floatsisf>
    cc16:	   |            addq.l #4,sp
    cc18:	   |            move.l d2,-(sp)
    cc1a:	   |            move.l d0,-(sp)
    cc1c:	   |            move.l 40(sp),-(sp)
    cc20:	   |            jsr b748 <moveAndScale>
    cc26:	   |            lea 12(sp),sp
	return FALSE;
    cc2a:	   |            clr.w d0
}
    cc2c:	   '----------> move.l (sp)+,d2
    cc2e:	                move.l (sp)+,d3
    cc30:	                lea 20(sp),sp
    cc34:	                rts

0000cc36 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    cc36:	       subq.l #8,sp
    cc38:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    cc3a:	   ,-- bra.s cc6a <clearStackLib+0x34>
		k = stackLib;
    cc3c:	,--|-> move.l 1e8ac <stackLib>,8(sp)
		stackLib = stackLib -> next;
    cc44:	|  |   movea.l 1e8ac <stackLib>,a0
    cc4a:	|  |   move.l 4(a0),d0
    cc4e:	|  |   move.l d0,1e8ac <stackLib>
		FreeVec(k);
    cc54:	|  |   move.l 8(sp),4(sp)
    cc5a:	|  |   move.l 1e81c <SysBase>,d0
    cc60:	|  |   movea.l d0,a6
    cc62:	|  |   movea.l 4(sp),a1
    cc66:	|  |   jsr -690(a6)
	while (stackLib) {
    cc6a:	|  '-> move.l 1e8ac <stackLib>,d0
    cc70:	'----- bne.s cc3c <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    cc72:	       clr.l 1e8a8 <stackLibTotal>
}
    cc78:	       nop
    cc7a:	       movea.l (sp)+,a6
    cc7c:	       addq.l #8,sp
    cc7e:	       rts

0000cc80 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    cc80:	          lea -128(sp),sp
    cc84:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    cc88:	      ,-- bra.s cc9a <loadGame+0x1a>
    cc8a:	   ,--|-> move.l 1e7b2 <allRunningFunctions>,d0
    cc90:	   |  |   move.l d0,-(sp)
    cc92:	   |  |   jsr 656c <finishFunction>
    cc98:	   |  |   addq.l #4,sp
    cc9a:	   |  '-> move.l 1e7b2 <allRunningFunctions>,d0
    cca0:	   '----- bne.s cc8a <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    cca2:	          pea 1e8b0 <ssgVersion>
    cca8:	          pea 1a64c <PutChar+0x16a6>
    ccae:	          pea 41 <_start+0x41>
    ccb2:	          pea 53 <_start+0x53>
    ccb6:	          move.l 160(sp),-(sp)
    ccba:	          jsr 7564 <openAndVerify>
    ccc0:	          lea 20(sp),sp
    ccc4:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    ccc8:	      ,-- bne.s ccd0 <loadGame+0x50>
    ccca:	      |   clr.w d0
    cccc:	,-----|-- bra.w cf76 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    ccd0:	|     '-> move.l 112(sp),108(sp)
    ccd6:	|         lea 140(sp),a0
    ccda:	|         lea -126(a0),a0
    ccde:	|         move.l a0,120(sp)
    cce2:	|         moveq #8,d0
    cce4:	|         move.l d0,116(sp)
    cce8:	|         move.l 1e824 <DOSBase>,d0
    ccee:	|         movea.l d0,a6
    ccf0:	|         move.l 108(sp),d1
    ccf4:	|         move.l 120(sp),d2
    ccf8:	|         move.l 116(sp),d3
    ccfc:	|         jsr -42(a6)
    cd00:	|         move.l d0,132(sp)
    cd04:	|         move.l 132(sp),d0
    cd08:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    cd0c:	|         moveq #8,d0
    cd0e:	|         cmp.l 128(sp),d0
    cd12:	|     ,-- beq.s cd22 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    cd14:	|     |   pea 1a66d <PutChar+0x16c7>
    cd1a:	|     |   jsr 18504 <KPrintF>
    cd20:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    cd22:	|     '-> move.l 14(sp),d1
    cd26:	|         move.l 1e7bc <fileTime>,d0
    cd2c:	|         cmp.l d1,d0
    cd2e:	|     ,-- bne.s cd3e <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    cd30:	|     |   move.l 18(sp),d1
    cd34:	|     |   move.l 1e7c0 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    cd3a:	|     |   cmp.l d1,d0
    cd3c:	|  ,--|-- beq.s cd5e <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    cd3e:	|  |  '-> move.l 144(sp),-(sp)
    cd42:	|  |      pea 1a689 <PutChar+0x16e3>
    cd48:	|  |      pea 1a750 <PutChar+0x17aa>
    cd4e:	|  |      jsr 18504 <KPrintF>
    cd54:	|  |      lea 12(sp),sp
		return FALSE; 
    cd58:	|  |      clr.w d0
    cd5a:	+--|----- bra.w cf76 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    cd5e:	|  '----> move.l 112(sp),124(sp)
    cd64:	|         move.l 1e824 <DOSBase>,d0
    cd6a:	|         movea.l d0,a6
    cd6c:	|         move.l 124(sp),d1
    cd70:	|         jsr -306(a6)
    cd74:	|         move.l d0,136(sp)
    cd78:	|         move.l 136(sp),d0
    cd7c:	|         move.l d0,d0
    cd7e:	|         move.w d0,1e060 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    cd84:	|         move.l 112(sp),100(sp)
    cd8a:	|         move.l 1e824 <DOSBase>,d0
    cd90:	|         movea.l d0,a6
    cd92:	|         move.l 100(sp),d1
    cd96:	|         jsr -306(a6)
    cd9a:	|         move.l d0,96(sp)
    cd9e:	|         move.l 96(sp),d0
    cda2:	|         move.l d0,d0
    cda4:	|         move.w d0,1e7ba <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    cdaa:	|         move.l 112(sp),92(sp)
    cdb0:	|         move.l 1e824 <DOSBase>,d0
    cdb6:	|         movea.l d0,a6
    cdb8:	|         move.l 92(sp),d1
    cdbc:	|         jsr -306(a6)
    cdc0:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    cdc4:	|         move.l 112(sp),84(sp)
    cdca:	|         move.l 1e824 <DOSBase>,d0
    cdd0:	|         movea.l d0,a6
    cdd2:	|         move.l 84(sp),d1
    cdd6:	|         jsr -306(a6)
    cdda:	|         move.l d0,80(sp)
    cdde:	|         move.l 80(sp),d0
    cde2:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    cde6:	|     ,-- beq.s ce1a <loadGame+0x19a>
		fontNum = get2bytes (fp);
    cde8:	|     |   move.l 112(sp),-(sp)
    cdec:	|     |   jsr 6bc <get2bytes>
    cdf2:	|     |   addq.l #4,sp
    cdf4:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    cdf8:	|     |   move.l 112(sp),-(sp)
    cdfc:	|     |   jsr 6bc <get2bytes>
    ce02:	|     |   addq.l #4,sp
    ce04:	|     |   move.l d0,1e914 <fontHeight>
		charOrder = readString(fp);		
    ce0a:	|     |   move.l 112(sp),-(sp)
    ce0e:	|     |   jsr b02 <readString>
    ce14:	|     |   addq.l #4,sp
    ce16:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    ce1a:	|     '-> move.l 104(sp),70(sp)
    ce20:	|         move.l 1e81c <SysBase>,d0
    ce26:	|         movea.l d0,a6
    ce28:	|         movea.l 70(sp),a1
    ce2c:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    ce30:	|         move.l 112(sp),-(sp)
    ce34:	|         jsr 854 <getSigned>
    ce3a:	|         addq.l #4,sp
    ce3c:	|         move.w d0,1e710 <fontSpace>

	killAllPeople ();
    ce42:	|         jsr b3b2 <killAllPeople>
	killAllRegions ();
    ce48:	|         jsr 16d14 <killAllRegions>

	int camerX = get2bytes (fp);
    ce4e:	|         move.l 112(sp),-(sp)
    ce52:	|         jsr 6bc <get2bytes>
    ce58:	|         addq.l #4,sp
    ce5a:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    ce5e:	|         move.l 112(sp),-(sp)
    ce62:	|         jsr 6bc <get2bytes>
    ce68:	|         addq.l #4,sp
    ce6a:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    ce6e:	|         move.l 112(sp),-(sp)
    ce72:	|         jsr 7d8 <getFloat>
    ce78:	|         addq.l #4,sp
    ce7a:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    ce7e:	|         move.l 112(sp),54(sp)
    ce84:	|         move.l 1e824 <DOSBase>,d0
    ce8a:	|         movea.l d0,a6
    ce8c:	|         move.l 54(sp),d1
    ce90:	|         jsr -306(a6)
    ce94:	|         move.l d0,50(sp)
    ce98:	|         move.l 50(sp),d0
    ce9c:	|         move.l d0,d0
    ce9e:	|         move.b d0,1e17e <brightnessLevel>

	loadHandlers (fp);
    cea4:	|         move.l 112(sp),-(sp)
    cea8:	|         jsr 74c4 <loadHandlers>
    ceae:	|         addq.l #4,sp
	loadRegions (fp);
    ceb0:	|         move.l 112(sp),-(sp)
    ceb4:	|         jsr 16d70 <loadRegions>
    ceba:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    cebc:	|         moveq #12,d0
    cebe:	|         move.l d0,46(sp)
    cec2:	|         clr.l 42(sp)
    cec6:	|         move.l 1e81c <SysBase>,d0
    cecc:	|         movea.l d0,a6
    cece:	|         move.l 46(sp),d0
    ced2:	|         move.l 42(sp),d1
    ced6:	|         jsr -684(a6)
    ceda:	|         move.l d0,38(sp)
    cede:	|         move.l 38(sp),d0
    cee2:	|         move.l d0,1e712 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    cee8:	|         move.l 1e712 <mouseCursorAnim>,d0
    ceee:	|     ,-- bne.s cf02 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    cef0:	|     |   pea 1a75a <PutChar+0x17b4>
    cef6:	|     |   jsr 18504 <KPrintF>
    cefc:	|     |   addq.l #4,sp
		return FALSE;
    cefe:	|     |   clr.w d0
    cf00:	+-----|-- bra.s cf76 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    cf02:	|     '-> jsr dda6 <nosnapshot>
	if (FGetC (fp)) {
    cf08:	|         move.l 112(sp),34(sp)
    cf0e:	|         move.l 1e824 <DOSBase>,d0
    cf14:	|         movea.l d0,a6
    cf16:	|         move.l 34(sp),d1
    cf1a:	|         jsr -306(a6)
    cf1e:	|         move.l d0,30(sp)
    cf22:	|         move.l 30(sp),d0
    cf26:	|     ,-- beq.s cf3c <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    cf28:	|     |   move.l 112(sp),-(sp)
    cf2c:	|     |   jsr de26 <restoreSnapshot>
    cf32:	|     |   addq.l #4,sp
    cf34:	|     |   tst.w d0
    cf36:	|     +-- bne.s cf3c <loadGame+0x2bc>
    cf38:	|     |   clr.w d0
    cf3a:	+-----|-- bra.s cf76 <loadGame+0x2f6>
	}

	Close (fp);
    cf3c:	|     '-> move.l 112(sp),26(sp)
    cf42:	|         move.l 1e824 <DOSBase>,d0
    cf48:	|         movea.l d0,a6
    cf4a:	|         move.l 26(sp),d1
    cf4e:	|         jsr -36(a6)
    cf52:	|         move.l d0,22(sp)
	clearStackLib ();
    cf56:	|         jsr cc36 <clearStackLib>

	cameraX = camerX;
    cf5c:	|         move.l 66(sp),1e8d6 <cameraX>
	cameraY = camerY;
    cf64:	|         move.l 62(sp),1e8da <cameraY>
	cameraZoom = camerZ;
    cf6c:	|         move.l 58(sp),1e1a2 <cameraZoom>

	return TRUE;
    cf74:	|         moveq #1,d0
}
    cf76:	'-------> movem.l (sp)+,d2-d3/a6
    cf7a:	          lea 128(sp),sp
    cf7e:	          rts

0000cf80 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    cf80:	   ,-> lea -64(sp),sp
    cf84:	   |   move.l a6,-(sp)
    cf86:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    cf88:	   |   movea.l 76(sp),a0
    cf8c:	   |   move.l (a0),d0
    cf8e:	   |   move.l 80(sp),-(sp)
    cf92:	   |   move.l d0,-(sp)
    cf94:	   |   jsr 8d0 <put2bytes>
    cf9a:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    cf9c:	   |   movea.l 76(sp),a0
    cfa0:	   |   move.l 40(a0),d0
    cfa4:	,--|-- beq.s cfe0 <saveFunction+0x60>
		FPutC (fp, 1);
    cfa6:	|  |   move.l 80(sp),52(sp)
    cfac:	|  |   moveq #1,d0
    cfae:	|  |   move.l d0,48(sp)
    cfb2:	|  |   move.l 1e824 <DOSBase>,d0
    cfb8:	|  |   movea.l d0,a6
    cfba:	|  |   move.l 52(sp),d1
    cfbe:	|  |   move.l 48(sp),d2
    cfc2:	|  |   jsr -312(a6)
    cfc6:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    cfca:	|  |   movea.l 76(sp),a0
    cfce:	|  |   move.l 40(a0),d0
    cfd2:	|  |   move.l 80(sp),-(sp)
    cfd6:	|  |   move.l d0,-(sp)
    cfd8:	|  '-- jsr cf80 <saveFunction>(pc)
    cfdc:	|      addq.l #8,sp
    cfde:	|  ,-- bra.s d002 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    cfe0:	'--|-> move.l 80(sp),64(sp)
    cfe6:	   |   clr.l 60(sp)
    cfea:	   |   move.l 1e824 <DOSBase>,d0
    cff0:	   |   movea.l d0,a6
    cff2:	   |   move.l 64(sp),d1
    cff6:	   |   move.l 60(sp),d2
    cffa:	   |   jsr -312(a6)
    cffe:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    d002:	   '-> movea.l 76(sp),a0
    d006:	       move.l 12(a0),d0
    d00a:	       move.l 80(sp),-(sp)
    d00e:	       move.l d0,-(sp)
    d010:	       jsr 958 <put4bytes>
    d016:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    d018:	       movea.l 76(sp),a0
    d01c:	       move.l 36(a0),d0
    d020:	       move.l 80(sp),-(sp)
    d024:	       move.l d0,-(sp)
    d026:	       jsr 8d0 <put2bytes>
    d02c:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    d02e:	       move.l 80(sp),40(sp)
    d034:	       movea.l 76(sp),a0
    d038:	       move.w 54(a0),d0
    d03c:	       movea.w d0,a0
    d03e:	       move.l a0,36(sp)
    d042:	       move.l 1e824 <DOSBase>,d0
    d048:	       movea.l d0,a6
    d04a:	       move.l 40(sp),d1
    d04e:	       move.l 36(sp),d2
    d052:	       jsr -312(a6)
    d056:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    d05a:	       move.l 80(sp),28(sp)
    d060:	       movea.l 76(sp),a0
    d064:	       move.w 48(a0),d0
    d068:	       movea.w d0,a0
    d06a:	       move.l a0,24(sp)
    d06e:	       move.l 1e824 <DOSBase>,d0
    d074:	       movea.l d0,a6
    d076:	       move.l 28(sp),d1
    d07a:	       move.l 24(sp),d2
    d07e:	       jsr -312(a6)
    d082:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    d086:	       move.l 80(sp),16(sp)
    d08c:	       movea.l 76(sp),a0
    d090:	       move.w 50(a0),d0
    d094:	       movea.w d0,a0
    d096:	       move.l a0,12(sp)
    d09a:	       move.l 1e824 <DOSBase>,d0
    d0a0:	       movea.l d0,a6
    d0a2:	       move.l 16(sp),d1
    d0a6:	       move.l 12(sp),d2
    d0aa:	       jsr -312(a6)
    d0ae:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    d0b2:	       moveq #28,d0
    d0b4:	       add.l 76(sp),d0
    d0b8:	       move.l 80(sp),-(sp)
    d0bc:	       move.l d0,-(sp)
    d0be:	       jsr d7d8 <saveVariable>
    d0c4:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    d0c6:	       movea.l 76(sp),a0
    d0ca:	       move.b 56(a0),d0
    d0ce:	   ,-- beq.s d0de <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    d0d0:	   |   pea 1a77b <PutChar+0x17d5>
    d0d6:	   |   jsr 18504 <KPrintF>
    d0dc:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    d0de:	   '-> movea.l 76(sp),a0
    d0e2:	       move.l 24(a0),d0
    d0e6:	       move.l 80(sp),-(sp)
    d0ea:	       move.l d0,-(sp)
    d0ec:	       jsr d64c <saveStack>
    d0f2:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    d0f4:	       clr.l 68(sp)
    d0f8:	   ,-- bra.s d11c <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    d0fa:	,--|-> movea.l 76(sp),a0
    d0fe:	|  |   move.l 20(a0),d1
    d102:	|  |   move.l 68(sp),d0
    d106:	|  |   lsl.l #3,d0
    d108:	|  |   add.l d1,d0
    d10a:	|  |   move.l 80(sp),-(sp)
    d10e:	|  |   move.l d0,-(sp)
    d110:	|  |   jsr d7d8 <saveVariable>
    d116:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    d118:	|  |   addq.l #1,68(sp)
    d11c:	|  '-> movea.l 76(sp),a0
    d120:	|      move.l 8(a0),d0
    d124:	|      cmp.l 68(sp),d0
    d128:	'----- bgt.s d0fa <saveFunction+0x17a>
	}
}
    d12a:	       nop
    d12c:	       nop
    d12e:	       move.l (sp)+,d2
    d130:	       movea.l (sp)+,a6
    d132:	       lea 64(sp),sp
    d136:	       rts

0000d138 <saveGame>:

BOOL saveGame (char * fname) {
    d138:	          lea -248(sp),sp
    d13c:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    d140:	          move.l 264(sp),244(sp)
    d146:	          move.l #1006,240(sp)
    d14e:	          move.l 1e824 <DOSBase>,d0
    d154:	          movea.l d0,a6
    d156:	          move.l 244(sp),d1
    d15a:	          move.l 240(sp),d2
    d15e:	          jsr -30(a6)
    d162:	          move.l d0,236(sp)
    d166:	          move.l 236(sp),d0
    d16a:	          move.l d0,232(sp)
	if (fp == NULL) {
    d16e:	      ,-- bne.s d184 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    d170:	      |   pea 1a79d <PutChar+0x17f7>
    d176:	      |   jsr 18504 <KPrintF>
    d17c:	      |   addq.l #4,sp
		return FALSE;
    d17e:	      |   clr.w d0
    d180:	,-----|-- bra.w d642 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    d184:	|     '-> move.l 232(sp),228(sp)
    d18a:	|         move.l #108474,224(sp)
    d192:	|         moveq #6,d0
    d194:	|         move.l d0,220(sp)
    d198:	|         move.l 1e824 <DOSBase>,d0
    d19e:	|         movea.l d0,a6
    d1a0:	|         move.l 228(sp),d1
    d1a4:	|         move.l 224(sp),d2
    d1a8:	|         move.l 220(sp),d3
    d1ac:	|         jsr -48(a6)
    d1b0:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    d1b4:	|         move.l 232(sp),212(sp)
    d1ba:	|         clr.l 208(sp)
    d1be:	|         move.l 1e824 <DOSBase>,d0
    d1c4:	|         movea.l d0,a6
    d1c6:	|         move.l 212(sp),d1
    d1ca:	|         move.l 208(sp),d2
    d1ce:	|         jsr -312(a6)
    d1d2:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    d1d6:	|         move.l 232(sp),200(sp)
    d1dc:	|         clr.l 196(sp)
    d1e0:	|         move.l 1e824 <DOSBase>,d0
    d1e6:	|         movea.l d0,a6
    d1e8:	|         move.l 200(sp),d1
    d1ec:	|         move.l 196(sp),d2
    d1f0:	|         jsr -312(a6)
    d1f4:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    d1f8:	|         move.l 232(sp),188(sp)
    d1fe:	|         moveq #2,d0
    d200:	|         move.l d0,184(sp)
    d204:	|         move.l 1e824 <DOSBase>,d0
    d20a:	|         movea.l d0,a6
    d20c:	|         move.l 188(sp),d1
    d210:	|         move.l 184(sp),d2
    d214:	|         jsr -312(a6)
    d218:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    d21c:	|         move.l 232(sp),176(sp)
    d222:	|         moveq #2,d0
    d224:	|         move.l d0,172(sp)
    d228:	|         move.l 1e824 <DOSBase>,d0
    d22e:	|         movea.l d0,a6
    d230:	|         move.l 176(sp),d1
    d234:	|         move.l 172(sp),d2
    d238:	|         jsr -312(a6)
    d23c:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    d240:	|         move.l 232(sp),164(sp)
    d246:	|         move.l #124860,160(sp)
    d24e:	|         moveq #8,d0
    d250:	|         move.l d0,156(sp)
    d254:	|         move.l 1e824 <DOSBase>,d0
    d25a:	|         movea.l d0,a6
    d25c:	|         move.l 164(sp),d1
    d260:	|         move.l 160(sp),d2
    d264:	|         move.l 156(sp),d3
    d268:	|         jsr -48(a6)
    d26c:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    d270:	|         move.l 232(sp),148(sp)
    d276:	|         move.w 1e060 <allowAnyFilename>,d0
    d27c:	|         movea.w d0,a0
    d27e:	|         move.l a0,144(sp)
    d282:	|         move.l 1e824 <DOSBase>,d0
    d288:	|         movea.l d0,a6
    d28a:	|         move.l 148(sp),d1
    d28e:	|         move.l 144(sp),d2
    d292:	|         jsr -312(a6)
    d296:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    d29a:	|         move.l 232(sp),136(sp)
    d2a0:	|         move.w 1e7ba <captureAllKeys>,d0
    d2a6:	|         movea.w d0,a0
    d2a8:	|         move.l a0,132(sp)
    d2ac:	|         move.l 1e824 <DOSBase>,d0
    d2b2:	|         movea.l d0,a6
    d2b4:	|         move.l 136(sp),d1
    d2b8:	|         move.l 132(sp),d2
    d2bc:	|         jsr -312(a6)
    d2c0:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    d2c4:	|         move.l 232(sp),124(sp)
    d2ca:	|         moveq #1,d0
    d2cc:	|         move.l d0,120(sp)
    d2d0:	|         move.l 1e824 <DOSBase>,d0
    d2d6:	|         movea.l d0,a6
    d2d8:	|         move.l 124(sp),d1
    d2dc:	|         move.l 120(sp),d2
    d2e0:	|         jsr -312(a6)
    d2e4:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    d2e8:	|         move.l 232(sp),112(sp)
    d2ee:	|         move.l 1e924 <fontTableSize>,d0
    d2f4:	|         sgt d0
    d2f6:	|         neg.b d0
    d2f8:	|         move.b d0,d0
    d2fa:	|         andi.l #255,d0
    d300:	|         move.l d0,108(sp)
    d304:	|         move.l 1e824 <DOSBase>,d0
    d30a:	|         movea.l d0,a6
    d30c:	|         move.l 112(sp),d1
    d310:	|         move.l 108(sp),d2
    d314:	|         jsr -312(a6)
    d318:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    d31c:	|         move.l 1e924 <fontTableSize>,d0
    d322:	|     ,-- ble.s d360 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    d324:	|     |   move.l 1e918 <loadedFontNum>,d0
    d32a:	|     |   move.l 232(sp),-(sp)
    d32e:	|     |   move.l d0,-(sp)
    d330:	|     |   jsr 8d0 <put2bytes>
    d336:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    d338:	|     |   move.l 1e914 <fontHeight>,d0
    d33e:	|     |   move.l 232(sp),-(sp)
    d342:	|     |   move.l d0,-(sp)
    d344:	|     |   jsr 8d0 <put2bytes>
    d34a:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    d34c:	|     |   move.l 1e91c <fontOrderString>,d0
    d352:	|     |   move.l 232(sp),-(sp)
    d356:	|     |   move.l d0,-(sp)
    d358:	|     |   jsr bd8 <writeString>
    d35e:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    d360:	|     '-> move.w 1e710 <fontSpace>,d0
    d366:	|         movea.w d0,a0
    d368:	|         move.l 232(sp),-(sp)
    d36c:	|         move.l a0,-(sp)
    d36e:	|         jsr a9c <putSigned>
    d374:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    d376:	|         move.l 1e8d6 <cameraX>,d0
    d37c:	|         move.l 232(sp),-(sp)
    d380:	|         move.l d0,-(sp)
    d382:	|         jsr 8d0 <put2bytes>
    d388:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    d38a:	|         move.l 1e8da <cameraY>,d0
    d390:	|         move.l 232(sp),-(sp)
    d394:	|         move.l d0,-(sp)
    d396:	|         jsr 8d0 <put2bytes>
    d39c:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    d39e:	|         move.l 1e1a2 <cameraZoom>,d0
    d3a4:	|         move.l 232(sp),-(sp)
    d3a8:	|         move.l d0,-(sp)
    d3aa:	|         jsr a46 <putFloat>
    d3b0:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    d3b2:	|         move.l 232(sp),100(sp)
    d3b8:	|         move.b 1e17e <brightnessLevel>,d0
    d3be:	|         move.b d0,d0
    d3c0:	|         andi.l #255,d0
    d3c6:	|         move.l d0,96(sp)
    d3ca:	|         move.l 1e824 <DOSBase>,d0
    d3d0:	|         movea.l d0,a6
    d3d2:	|         move.l 100(sp),d1
    d3d6:	|         move.l 96(sp),d2
    d3da:	|         jsr -312(a6)
    d3de:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    d3e2:	|         move.l 232(sp),-(sp)
    d3e6:	|         jsr 7aa4 <saveHandlers>
    d3ec:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    d3ee:	|         move.l 232(sp),-(sp)
    d3f2:	|         jsr 16f2a <saveRegions>
    d3f8:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    d3fa:	|         move.l 1e712 <mouseCursorAnim>,d0
    d400:	|         move.l 232(sp),-(sp)
    d404:	|         move.l d0,-(sp)
    d406:	|         jsr b95c <saveAnim>
    d40c:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    d40e:	|         move.l 1e716 <mouseCursorFrameNum>,d0
    d414:	|         move.l 232(sp),-(sp)
    d418:	|         move.l d0,-(sp)
    d41a:	|         jsr 8d0 <put2bytes>
    d420:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    d422:	|         move.l 1e7b2 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    d42a:	|         clr.l 248(sp)
	while (thisFunction) {
    d42e:	|     ,-- bra.s d43e <saveGame+0x306>
		countFunctions ++;
    d430:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    d434:	|  |  |   movea.l 252(sp),a0
    d438:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    d43e:	|  |  '-> tst.l 252(sp)
    d442:	|  '----- bne.s d430 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    d444:	|         move.l 232(sp),-(sp)
    d448:	|         move.l 252(sp),-(sp)
    d44c:	|         jsr 8d0 <put2bytes>
    d452:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    d454:	|         move.l 1e7b2 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    d45c:	|     ,-- bra.s d478 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    d45e:	|  ,--|-> move.l 232(sp),-(sp)
    d462:	|  |  |   move.l 256(sp),-(sp)
    d466:	|  |  |   jsr cf80 <saveFunction>
    d46c:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    d46e:	|  |  |   movea.l 252(sp),a0
    d472:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    d478:	|  |  '-> tst.l 252(sp)
    d47c:	|  '----- bne.s d45e <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    d47e:	|         clr.l 256(sp)
    d482:	|     ,-- bra.s d4a4 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    d484:	|  ,--|-> move.l 1e7c8 <globalVars>,d1
    d48a:	|  |  |   move.l 256(sp),d0
    d48e:	|  |  |   lsl.l #3,d0
    d490:	|  |  |   add.l d1,d0
    d492:	|  |  |   move.l 232(sp),-(sp)
    d496:	|  |  |   move.l d0,-(sp)
    d498:	|  |  |   jsr d7d8 <saveVariable>
    d49e:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    d4a0:	|  |  |   addq.l #1,256(sp)
    d4a4:	|  |  '-> move.l 1e7f2 <numGlobals>,d0
    d4aa:	|  |      cmp.l 256(sp),d0
    d4ae:	|  '----- bgt.s d484 <saveGame+0x34c>
	}

	savePeople (fp);
    d4b0:	|         move.l 232(sp),-(sp)
    d4b4:	|         jsr ba84 <savePeople>
    d4ba:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    d4bc:	|         movea.l 1e938 <currentFloor>,a0
    d4c2:	|         move.l 8(a0),d0
    d4c6:	|  ,----- beq.s d504 <saveGame+0x3cc>
		FPutC (fp, 1);
    d4c8:	|  |      move.l 232(sp),76(sp)
    d4ce:	|  |      moveq #1,d0
    d4d0:	|  |      move.l d0,72(sp)
    d4d4:	|  |      move.l 1e824 <DOSBase>,d0
    d4da:	|  |      movea.l d0,a6
    d4dc:	|  |      move.l 76(sp),d1
    d4e0:	|  |      move.l 72(sp),d2
    d4e4:	|  |      jsr -312(a6)
    d4e8:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    d4ec:	|  |      movea.l 1e938 <currentFloor>,a0
    d4f2:	|  |      move.l (a0),d0
    d4f4:	|  |      move.l 232(sp),-(sp)
    d4f8:	|  |      move.l d0,-(sp)
    d4fa:	|  |      jsr 8d0 <put2bytes>
    d500:	|  |      addq.l #8,sp
    d502:	|  |  ,-- bra.s d526 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    d504:	|  '--|-> move.l 232(sp),88(sp)
    d50a:	|     |   clr.l 84(sp)
    d50e:	|     |   move.l 1e824 <DOSBase>,d0
    d514:	|     |   movea.l d0,a6
    d516:	|     |   move.l 88(sp),d1
    d51a:	|     |   move.l 84(sp),d2
    d51e:	|     |   jsr -312(a6)
    d522:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    d526:	|     '-> move.l 232(sp),64(sp)
    d52c:	|         move.l 1e8ea <speechMode>,60(sp)
    d534:	|         move.l 1e824 <DOSBase>,d0
    d53a:	|         movea.l d0,a6
    d53c:	|         move.l 64(sp),d1
    d540:	|         move.l 60(sp),d2
    d544:	|         jsr -312(a6)
    d548:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    d54c:	|         move.b 1e6e6 <fadeMode>,d0
    d552:	|         move.b d0,d0
    d554:	|         andi.l #255,d0
    d55a:	|         move.l d0,52(sp)
    d55e:	|         move.l 232(sp),48(sp)
    d564:	|         move.l 1e824 <DOSBase>,d0
    d56a:	|         movea.l d0,a6
    d56c:	|         move.l 52(sp),d1
    d570:	|         move.l 48(sp),d2
    d574:	|         jsr -312(a6)
    d578:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    d57c:	|         move.l 1e75e <speech>,d0
    d582:	|         move.l 232(sp),-(sp)
    d586:	|         move.l d0,-(sp)
    d588:	|         jsr 45a2 <saveSpeech>
    d58e:	|         addq.l #8,sp
	saveStatusBars (fp);
    d590:	|         move.l 232(sp),-(sp)
    d594:	|         jsr 8c82 <saveStatusBars>
    d59a:	|         addq.l #4,sp
	saveSounds (fp);
    d59c:	|         move.l 232(sp),-(sp)
    d5a0:	|         jsr db4a <saveSounds>
    d5a6:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    d5a8:	|         move.w 1e8d4 <saveEncoding>,d0
    d5ae:	|         move.w d0,d0
    d5b0:	|         andi.l #65535,d0
    d5b6:	|         move.l 232(sp),-(sp)
    d5ba:	|         move.l d0,-(sp)
    d5bc:	|         jsr 8d0 <put2bytes>
    d5c2:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    d5c4:	|         move.l 1e8c6 <parallaxStuff>,d0
    d5ca:	|         move.l 232(sp),-(sp)
    d5ce:	|         move.l d0,-(sp)
    d5d0:	|         jsr de4c <saveParallaxRecursive>
    d5d6:	|         addq.l #8,sp
	FPutC (fp, 0);
    d5d8:	|         move.l 232(sp),40(sp)
    d5de:	|         clr.l 36(sp)
    d5e2:	|         move.l 1e824 <DOSBase>,d0
    d5e8:	|         movea.l d0,a6
    d5ea:	|         move.l 40(sp),d1
    d5ee:	|         move.l 36(sp),d2
    d5f2:	|         jsr -312(a6)
    d5f6:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    d5fa:	|         move.l 232(sp),28(sp)
    d600:	|         move.l 1e184 <languageNum>,24(sp)
    d608:	|         move.l 1e824 <DOSBase>,d0
    d60e:	|         movea.l d0,a6
    d610:	|         move.l 28(sp),d1
    d614:	|         move.l 24(sp),d2
    d618:	|         jsr -312(a6)
    d61c:	|         move.l d0,20(sp)

	Close(fp);
    d620:	|         move.l 232(sp),16(sp)
    d626:	|         move.l 1e824 <DOSBase>,d0
    d62c:	|         movea.l d0,a6
    d62e:	|         move.l 16(sp),d1
    d632:	|         jsr -36(a6)
    d636:	|         move.l d0,12(sp)
	clearStackLib ();
    d63a:	|         jsr cc36 <clearStackLib>
	return TRUE;
    d640:	|         moveq #1,d0
}
    d642:	'-------> movem.l (sp)+,d2-d3/a6
    d646:	          lea 248(sp),sp
    d64a:	          rts

0000d64c <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    d64c:	       lea -12(sp),sp
	int elements = 0;
    d650:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    d654:	       move.l 16(sp),(sp)
	while (search) {
    d658:	   ,-- bra.s d664 <saveStack+0x18>
		elements ++;
    d65a:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    d65e:	|  |   movea.l (sp),a0
    d660:	|  |   move.l 8(a0),(sp)
	while (search) {
    d664:	|  '-> tst.l (sp)
    d666:	'----- bne.s d65a <saveStack+0xe>
	}

	put2bytes (elements, fp);
    d668:	       move.l 20(sp),-(sp)
    d66c:	       move.l 12(sp),-(sp)
    d670:	       jsr 8d0 <put2bytes>
    d676:	       addq.l #8,sp
	search = vs;
    d678:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    d67c:	       clr.l 4(sp)
    d680:	   ,-- bra.s d69c <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    d682:	,--|-> move.l (sp),d0
    d684:	|  |   move.l 20(sp),-(sp)
    d688:	|  |   move.l d0,-(sp)
    d68a:	|  |   jsr d7d8 <saveVariable>
    d690:	|  |   addq.l #8,sp
		search = search -> next;
    d692:	|  |   movea.l (sp),a0
    d694:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    d698:	|  |   addq.l #1,4(sp)
    d69c:	|  '-> move.l 4(sp),d0
    d6a0:	|      cmp.l 8(sp),d0
    d6a4:	'----- blt.s d682 <saveStack+0x36>
	}
}
    d6a6:	       nop
    d6a8:	       nop
    d6aa:	       lea 12(sp),sp
    d6ae:	       rts

0000d6b0 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    d6b0:	             lea -44(sp),sp
    d6b4:	             move.l a6,-(sp)
    d6b6:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    d6b8:	             move.l 1e8ac <stackLib>,48(sp)
	int a = 0;
    d6c0:	             clr.l 44(sp)
	while (s) {
    d6c4:	      ,----- bra.s d722 <saveStackRef+0x72>
		if (s -> stack == vs) {
    d6c6:	   ,--|----> movea.l 48(sp),a0
    d6ca:	   |  |      move.l (a0),d0
    d6cc:	   |  |      cmp.l 56(sp),d0
    d6d0:	   |  |  ,-- bne.s d714 <saveStackRef+0x64>
			FPutC (fp, 1);
    d6d2:	   |  |  |   move.l 60(sp),16(sp)
    d6d8:	   |  |  |   moveq #1,d0
    d6da:	   |  |  |   move.l d0,12(sp)
    d6de:	   |  |  |   move.l 1e824 <DOSBase>,d0
    d6e4:	   |  |  |   movea.l d0,a6
    d6e6:	   |  |  |   move.l 16(sp),d1
    d6ea:	   |  |  |   move.l 12(sp),d2
    d6ee:	   |  |  |   jsr -312(a6)
    d6f2:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    d6f6:	   |  |  |   move.l 1e8a8 <stackLibTotal>,d0
    d6fc:	   |  |  |   sub.l 44(sp),d0
    d700:	   |  |  |   move.l 60(sp),-(sp)
    d704:	   |  |  |   move.l d0,-(sp)
    d706:	   |  |  |   jsr 8d0 <put2bytes>
    d70c:	   |  |  |   addq.l #8,sp
			return TRUE;
    d70e:	   |  |  |   moveq #1,d0
    d710:	,--|--|--|-- bra.w d7ce <saveStackRef+0x11e>
		}
		s = s -> next;
    d714:	|  |  |  '-> movea.l 48(sp),a0
    d718:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    d71e:	|  |  |      addq.l #1,44(sp)
	while (s) {
    d722:	|  |  '----> tst.l 48(sp)
    d726:	|  '-------- bne.s d6c6 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    d728:	|            move.l 60(sp),40(sp)
    d72e:	|            clr.l 36(sp)
    d732:	|            move.l 1e824 <DOSBase>,d0
    d738:	|            movea.l d0,a6
    d73a:	|            move.l 40(sp),d1
    d73e:	|            move.l 36(sp),d2
    d742:	|            jsr -312(a6)
    d746:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    d74a:	|            movea.l 56(sp),a0
    d74e:	|            move.l (a0),d0
    d750:	|            move.l 60(sp),-(sp)
    d754:	|            move.l d0,-(sp)
    d756:	|            jsr d64c <saveStack>
    d75c:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    d75e:	|            moveq #8,d0
    d760:	|            move.l d0,28(sp)
    d764:	|            clr.l 24(sp)
    d768:	|            move.l 1e81c <SysBase>,d0
    d76e:	|            movea.l d0,a6
    d770:	|            move.l 28(sp),d0
    d774:	|            move.l 24(sp),d1
    d778:	|            jsr -684(a6)
    d77c:	|            move.l d0,20(sp)
    d780:	|            move.l 20(sp),d0
    d784:	|            move.l d0,48(sp)
	stackLibTotal ++;
    d788:	|            move.l 1e8a8 <stackLibTotal>,d0
    d78e:	|            addq.l #1,d0
    d790:	|            move.l d0,1e8a8 <stackLibTotal>
	if (! s) {
    d796:	|            tst.l 48(sp)
    d79a:	|        ,-- bne.s d7ae <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    d79c:	|        |   pea 1a7e9 <PutChar+0x1843>
    d7a2:	|        |   jsr 18504 <KPrintF>
    d7a8:	|        |   addq.l #4,sp
		return FALSE;
    d7aa:	|        |   clr.w d0
    d7ac:	+--------|-- bra.s d7ce <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    d7ae:	|        '-> move.l 1e8ac <stackLib>,d0
    d7b4:	|            movea.l 48(sp),a0
    d7b8:	|            move.l d0,4(a0)
	s -> stack = vs;
    d7bc:	|            movea.l 48(sp),a0
    d7c0:	|            move.l 56(sp),(a0)
	stackLib = s;
    d7c4:	|            move.l 48(sp),1e8ac <stackLib>
	return TRUE;
    d7cc:	|            moveq #1,d0
}
    d7ce:	'----------> move.l (sp)+,d2
    d7d0:	             movea.l (sp)+,a6
    d7d2:	             lea 44(sp),sp
    d7d6:	             rts

0000d7d8 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    d7d8:	          lea -12(sp),sp
    d7dc:	          move.l a6,-(sp)
    d7de:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    d7e0:	          move.l 28(sp),16(sp)
    d7e6:	          movea.l 24(sp),a0
    d7ea:	          move.l (a0),d0
    d7ec:	          move.l d0,12(sp)
    d7f0:	          move.l 1e824 <DOSBase>,d0
    d7f6:	          movea.l d0,a6
    d7f8:	          move.l 16(sp),d1
    d7fc:	          move.l 12(sp),d2
    d800:	          jsr -312(a6)
    d804:	          move.l d0,8(sp)
	switch (from -> varType) {
    d808:	          movea.l 24(sp),a0
    d80c:	          move.l (a0),d0
    d80e:	          moveq #9,d1
    d810:	          cmp.l d0,d1
    d812:	      ,-- bcs.w d8c2 <saveVariable+0xea>
    d816:	      |   add.l d0,d0
    d818:	      |   movea.l d0,a0
    d81a:	      |   adda.l #55334,a0
    d820:	      |   move.w (a0),d0
    d822:	      |   jmp (d826 <saveVariable+0x4e>,pc,d0.w)
    d826:	      |   ori.l #1310740,(a0)+
    d82c:	      |   ori.b #20,(20,a0,d0.w)
    d832:	      |   .short 0x004c
    d834:	      |   ori.b #126,(a4)
    d838:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    d83c:	      |   ori.b #40,(a0)+
    d840:	      |   ori.b #47,d4
    d844:	      |   ori.b #0,(a4)+
    d848:	      |   jsr 958 <put4bytes>
    d84e:	      |   addq.l #8,sp
		return TRUE;
    d850:	      |   moveq #1,d0
    d852:	,-----|-- bra.w d8fe <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    d856:	|     |   movea.l 24(sp),a0
    d85a:	|     |   move.l 4(a0),d0
    d85e:	|     |   move.l 28(sp),-(sp)
    d862:	|     |   move.l d0,-(sp)
    d864:	|     |   jsr bd8 <writeString>
    d86a:	|     |   addq.l #8,sp
		return TRUE;
    d86c:	|     |   moveq #1,d0
    d86e:	+-----|-- bra.w d8fe <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    d872:	|     |   movea.l 24(sp),a0
    d876:	|     |   move.l 4(a0),d0
    d87a:	|     |   move.l 28(sp),-(sp)
    d87e:	|     |   move.l d0,-(sp)
    d880:	|     |   jsr d6b0 <saveStackRef>
    d886:	|     |   addq.l #8,sp
    d888:	+-----|-- bra.s d8fe <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    d88a:	|     |   movea.l 24(sp),a0
    d88e:	|     |   move.l 4(a0),d0
    d892:	|     |   move.l 28(sp),-(sp)
    d896:	|     |   move.l d0,-(sp)
    d898:	|     |   jsr ba26 <saveCostume>
    d89e:	|     |   addq.l #8,sp
		return FALSE;
    d8a0:	|     |   clr.w d0
    d8a2:	+-----|-- bra.s d8fe <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    d8a4:	|     |   movea.l 24(sp),a0
    d8a8:	|     |   move.l 4(a0),d0
    d8ac:	|     |   move.l 28(sp),-(sp)
    d8b0:	|     |   move.l d0,-(sp)
    d8b2:	|     |   jsr b95c <saveAnim>
    d8b8:	|     |   addq.l #8,sp
		return FALSE;
    d8ba:	|     |   clr.w d0
    d8bc:	+-----|-- bra.s d8fe <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    d8be:	|     |   clr.w d0
    d8c0:	+-----|-- bra.s d8fe <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    d8c2:	|     '-> movea.l 24(sp),a0
    d8c6:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d8c8:	|         moveq #10,d1
    d8ca:	|         cmp.l d0,d1
    d8cc:	|  ,----- bcs.s d8e6 <saveVariable+0x10e>
						typeName[from->varType] :
    d8ce:	|  |      movea.l 24(sp),a0
    d8d2:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d8d4:	|  |      add.l d0,d0
    d8d6:	|  |      movea.l d0,a1
    d8d8:	|  |      adda.l d0,a1
    d8da:	|  |      lea 1e6e8 <typeName>,a0
    d8e0:	|  |      move.l (0,a1,a0.l),d0
    d8e4:	|  |  ,-- bra.s d8ec <saveVariable+0x114>
    d8e6:	|  '--|-> move.l #108558,d0
    d8ec:	|     '-> move.l d0,-(sp)
    d8ee:	|         pea 1a815 <PutChar+0x186f>
    d8f4:	|         jsr 18504 <KPrintF>
    d8fa:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    d8fc:	|         moveq #1,d0
    d8fe:	'-------> move.l (sp)+,d2
    d900:	          movea.l (sp)+,a6
    d902:	          lea 12(sp),sp
    d906:	          rts

0000d908 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    d908:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    d90c:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    d914:	          movea.l 4(sp),a0
    d918:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    d91e:	          movea.l 4(sp),a0
    d922:	          move.w 10(a0),d0
    d926:	          lsr.w #8,d0
    d928:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    d92c:	          movea.l 4(sp),a0
    d930:	          move.w 10(a0),d0
    d934:	          move.b d0,(sp)

    if(counterx_new)
    d936:	,-------- beq.w d9dc <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    d93a:	|         clr.w d1
    d93c:	|         move.b (sp),d1
    d93e:	|         move.w 1e8b4 <counterx_old>,d0
    d944:	|         sub.w d0,d1
    d946:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    d94a:	|         cmpi.w #128,10(sp)
    d950:	|     ,-- blt.s d968 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    d952:	|     |   move.w #1,1e7d0 <input+0x4>
            counterx_diff -= 256;    
    d95a:	|     |   move.w 10(sp),d0
    d95e:	|     |   addi.w #-256,d0
    d962:	|     |   move.w d0,10(sp)
    d966:	|  ,--|-- bra.s d994 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d968:	|  |  '-> cmpi.w #-129,10(sp)
    d96e:	|  |  ,-- bgt.s d986 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d970:	|  |  |   move.w 10(sp),d0
    d974:	|  |  |   addi.w #256,d0
    d978:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d97c:	|  |  |   move.w #1,1e7d0 <input+0x4>
    d984:	|  +--|-- bra.s d994 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    d986:	|  |  '-> tst.w 10(sp)
    d98a:	|  +----- beq.s d994 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    d98c:	|  |      move.w #1,1e7d0 <input+0x4>
        }

        input.mouseX += counterx_diff;
    d994:	|  '----> move.l 1e7d6 <input+0xa>,d0
    d99a:	|         movea.w 10(sp),a0
    d99e:	|         add.l a0,d0
    d9a0:	|         move.l d0,1e7d6 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    d9a6:	|         move.l 1e7d6 <input+0xa>,d1
    d9ac:	|         move.l 1e762 <winWidth>,d0
    d9b2:	|         cmp.l d1,d0
    d9b4:	|     ,-- bge.s d9c4 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    d9b6:	|     |   move.l 1e762 <winWidth>,d0
    d9bc:	|     |   move.l d0,1e7d6 <input+0xa>
    d9c2:	|  ,--|-- bra.s d9d2 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d9c4:	|  |  '-> move.l 1e7d6 <input+0xa>,d0
    d9ca:	|  +----- bpl.s d9d2 <CsiCheckInput+0xca>
            input.mouseX = 0;
    d9cc:	|  |      clr.l 1e7d6 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d9d2:	|  '----> clr.w d0
    d9d4:	|         move.b (sp),d0
    d9d6:	|         move.w d0,1e8b4 <counterx_old>
    }    

    if(countery_new)
    d9dc:	'-------> tst.b 1(sp)
    d9e0:	,-------- beq.w da8a <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d9e4:	|         clr.w d1
    d9e6:	|         move.b 1(sp),d1
    d9ea:	|         move.w 1e8b6 <countery_old>,d0
    d9f0:	|         sub.w d0,d1
    d9f2:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d9f6:	|         cmpi.w #128,8(sp)
    d9fc:	|     ,-- blt.s da14 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d9fe:	|     |   move.w #1,1e7d0 <input+0x4>
            countery_diff -= 256;    
    da06:	|     |   move.w 8(sp),d0
    da0a:	|     |   addi.w #-256,d0
    da0e:	|     |   move.w d0,8(sp)
    da12:	|  ,--|-- bra.s da40 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    da14:	|  |  '-> cmpi.w #-129,8(sp)
    da1a:	|  |  ,-- bgt.s da32 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    da1c:	|  |  |   move.w #1,1e7d0 <input+0x4>
            countery_diff += 256;
    da24:	|  |  |   move.w 8(sp),d0
    da28:	|  |  |   addi.w #256,d0
    da2c:	|  |  |   move.w d0,8(sp)
    da30:	|  +--|-- bra.s da40 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    da32:	|  |  '-> tst.w 8(sp)
    da36:	|  +----- beq.s da40 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    da38:	|  |      move.w #1,1e7d0 <input+0x4>
        }

        input.mouseY += countery_diff;
    da40:	|  '----> move.l 1e7da <input+0xe>,d0
    da46:	|         movea.w 8(sp),a0
    da4a:	|         add.l a0,d0
    da4c:	|         move.l d0,1e7da <input+0xe>

        if( input.mouseY > (int) winHeight) {
    da52:	|         move.l 1e7da <input+0xe>,d1
    da58:	|         move.l 1e766 <winHeight>,d0
    da5e:	|         cmp.l d1,d0
    da60:	|     ,-- bge.s da70 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    da62:	|     |   move.l 1e766 <winHeight>,d0
    da68:	|     |   move.l d0,1e7da <input+0xe>
    da6e:	|  ,--|-- bra.s da7e <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    da70:	|  |  '-> move.l 1e7da <input+0xe>,d0
    da76:	|  +----- bpl.s da7e <CsiCheckInput+0x176>
            input.mouseY = 0;
    da78:	|  |      clr.l 1e7da <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    da7e:	|  '----> clr.w d0
    da80:	|         move.b 1(sp),d0
    da84:	|         move.w d0,1e8b6 <countery_old>
    } 

    input.leftRelease = FALSE;
    da8a:	'-------> clr.w 1e7d2 <input+0x6>
    input.rightRelease = FALSE;
    da90:	          clr.w 1e7d4 <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    da96:	          move.w 1e7cc <input>,d0
    da9c:	      ,-- beq.s dac2 <CsiCheckInput+0x1ba>
    da9e:	      |   movea.l #12574721,a0
    daa4:	      |   move.b (a0),d0
    daa6:	      |   move.b d0,d0
    daa8:	      |   andi.l #255,d0
    daae:	      |   moveq #64,d1
    dab0:	      |   and.l d1,d0
    dab2:	      +-- beq.s dac2 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    dab4:	      |   clr.w 1e7cc <input>
        input.leftRelease = TRUE;
    daba:	      |   move.w #1,1e7d2 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    dac2:	      '-> move.w 1e7ce <input+0x2>,d0
    dac8:	      ,-- beq.s daf0 <CsiCheckInput+0x1e8>
    daca:	      |   movea.l #14675990,a0
    dad0:	      |   move.w (a0),d0
    dad2:	      |   move.w d0,d0
    dad4:	      |   andi.l #65535,d0
    dada:	      |   andi.l #1024,d0
    dae0:	      +-- beq.s daf0 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    dae2:	      |   clr.w 1e7ce <input+0x2>
        input.rightRelease = TRUE;
    dae8:	      |   move.w #1,1e7d4 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    daf0:	      '-> movea.l #12574721,a0
    daf6:	          move.b (a0),d0
    daf8:	          move.b d0,d0
    dafa:	          andi.l #255,d0
    db00:	          moveq #64,d1
    db02:	          and.l d1,d0
    db04:	      ,-- bne.s db0e <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    db06:	      |   move.w #1,1e7cc <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    db0e:	      '-> movea.l #14675990,a0
    db14:	          move.w (a0),d0
    db16:	          move.w d0,d0
    db18:	          andi.l #65535,d0
    db1e:	          andi.l #1024,d0
    db24:	      ,-- bne.s db2e <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    db26:	      |   move.w #1,1e7ce <input+0x2>
    }

    db2e:	      '-> nop
    db30:	          lea 12(sp),sp
    db34:	          rts

0000db36 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    db36:	moveq #0,d0
}
    db38:	rts

0000db3a <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    db3a:	nop
    db3c:	rts

0000db3e <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    db3e:	nop
    db40:	rts

0000db42 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    db42:	moveq #1,d0
}
    db44:	rts

0000db46 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    db46:	nop
    db48:	rts

0000db4a <saveSounds>:

void saveSounds (BPTR fp) {
    db4a:	lea -12(sp),sp
    db4e:	move.l a6,-(sp)
    db50:	move.l d2,-(sp)
	FPutC (fp,0);
    db52:	move.l 24(sp),16(sp)
    db58:	clr.l 12(sp)
    db5c:	move.l 1e824 <DOSBase>,d0
    db62:	movea.l d0,a6
    db64:	move.l 16(sp),d1
    db68:	move.l 12(sp),d2
    db6c:	jsr -312(a6)
    db70:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    db74:	move.l 1e19e <defSoundVol>,d0
    db7a:	move.l 24(sp),-(sp)
    db7e:	move.l d0,-(sp)
    db80:	jsr 8d0 <put2bytes>
    db86:	addq.l #8,sp
	put2bytes (defVol, fp);
    db88:	move.l 1e19a <defVol>,d0
    db8e:	move.l 24(sp),-(sp)
    db92:	move.l d0,-(sp)
    db94:	jsr 8d0 <put2bytes>
    db9a:	addq.l #8,sp
}
    db9c:	nop
    db9e:	move.l (sp)+,d2
    dba0:	movea.l (sp)+,a6
    dba2:	lea 12(sp),sp
    dba6:	rts

0000dba8 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    dba8:	move.l 4(sp),1e19a <defVol>
}
    dbb0:	nop
    dbb2:	rts

0000dbb4 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    dbb4:	move.l 4(sp),1e19e <defSoundVol>
}
    dbbc:	nop
    dbbe:	rts

0000dbc0 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    dbc0:	nop
    dbc2:	rts

0000dbc4 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    dbc4:	nop
    dbc6:	rts

0000dbc8 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    dbc8:	nop
    dbca:	rts

0000dbcc <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    dbcc:	subq.l #4,sp
    dbce:	move.l 12(sp),d0
    dbd2:	move.w d0,d0
    dbd4:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    dbd8:	moveq #1,d0
}
    dbda:	addq.l #4,sp
    dbdc:	rts

0000dbde <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    dbde:	nop
    dbe0:	rts

0000dbe2 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    dbe2:	move.l 16(sp),-(sp)
    dbe6:	move.l 16(sp),-(sp)
    dbea:	move.l 16(sp),-(sp)
    dbee:	move.l 16(sp),-(sp)
    dbf2:	jsr e0e <CstBlankScreen>
    dbf8:	lea 16(sp),sp
}
    dbfc:	nop
    dbfe:	rts

0000dc00 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    dc00:	pea 1a838 <PutChar+0x1892>
    dc06:	jsr 18504 <KPrintF>
    dc0c:	addq.l #4,sp
}
    dc0e:	nop
    dc10:	rts

0000dc12 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    dc12:	movea.l 8(sp),a1
    dc16:	movea.l 12(sp),a0
    dc1a:	move.l 8(sp),d1
    dc1e:	move.l 4(sp),d0
    dc22:	move.l a1,-(sp)
    dc24:	move.l a0,-(sp)
    dc26:	move.l d1,-(sp)
    dc28:	move.l d0,-(sp)
    dc2a:	jsr 4c9c <drawLine>
    dc30:	lea 16(sp),sp
}
    dc34:	nop
    dc36:	rts

0000dc38 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    dc38:	movea.l 12(sp),a1
    dc3c:	movea.l 4(sp),a0
    dc40:	move.l 8(sp),d1
    dc44:	move.l 4(sp),d0
    dc48:	move.l a1,-(sp)
    dc4a:	move.l a0,-(sp)
    dc4c:	move.l d1,-(sp)
    dc4e:	move.l d0,-(sp)
    dc50:	jsr 4c9c <drawLine>
    dc56:	lea 16(sp),sp
}
    dc5a:	nop
    dc5c:	rts

0000dc5e <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    dc5e:	pea 1a871 <PutChar+0x18cb>
    dc64:	jsr 18504 <KPrintF>
    dc6a:	addq.l #4,sp
}
    dc6c:	nop
    dc6e:	rts

0000dc70 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    dc70:	jsr 1b92 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    dc76:	pea 1e8c0 <backdropTextureName>
    dc7c:	pea 1 <_start+0x1>
    dc80:	jsr 4e1e <deleteTextures>
    dc86:	addq.l #8,sp
	backdropTextureName = 0;
    dc88:	clr.l 1e8c0 <backdropTextureName>
	backdropExists = FALSE;
    dc8e:	clr.w 1e8c4 <backdropExists>
}
    dc94:	nop
    dc96:	rts

0000dc98 <killParallax>:

void killParallax () {
    dc98:	          lea -12(sp),sp
    dc9c:	          move.l a6,-(sp)
	while (parallaxStuff) {
    dc9e:	   ,----- bra.s dd0a <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    dca0:	,--|----> move.l 1e8c6 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    dca8:	|  |      movea.l 12(sp),a0
    dcac:	|  |      move.l 42(a0),d0
    dcb0:	|  |      move.l d0,1e8c6 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    dcb6:	|  |      move.l 12(sp),d0
    dcba:	|  |      addq.l #4,d0
    dcbc:	|  |      move.l d0,-(sp)
    dcbe:	|  |      pea 1 <_start+0x1>
    dcc2:	|  |      jsr 4e1e <deleteTextures>
    dcc8:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    dcca:	|  |      movea.l 12(sp),a0
    dcce:	|  |      move.l (a0),d0
    dcd0:	|  |  ,-- beq.s dcea <killParallax+0x52>
    dcd2:	|  |  |   movea.l 12(sp),a0
    dcd6:	|  |  |   move.l (a0),8(sp)
    dcda:	|  |  |   move.l 1e81c <SysBase>,d0
    dce0:	|  |  |   movea.l d0,a6
    dce2:	|  |  |   movea.l 8(sp),a1
    dce6:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    dcea:	|  |  '-> tst.l 12(sp)
    dcee:	|  |  ,-- beq.s dd06 <killParallax+0x6e>
    dcf0:	|  |  |   move.l 12(sp),4(sp)
    dcf6:	|  |  |   move.l 1e81c <SysBase>,d0
    dcfc:	|  |  |   movea.l d0,a6
    dcfe:	|  |  |   movea.l 4(sp),a1
    dd02:	|  |  |   jsr -690(a6)
		k = NULL;
    dd06:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    dd0a:	|  '----> move.l 1e8c6 <parallaxStuff>,d0
    dd10:	'-------- bne.s dca0 <killParallax+0x8>
	}
}
    dd12:	          nop
    dd14:	          nop
    dd16:	          movea.l (sp)+,a6
    dd18:	          lea 12(sp),sp
    dd1c:	          rts

0000dd1e <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    dd1e:	       move.l 4(sp),-(sp)
    dd22:	       jsr 7ef8 <openFileFromNum>
    dd28:	       addq.l #4,sp
    dd2a:	       tst.l d0
    dd2c:	   ,-- bne.s dd3e <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    dd2e:	   |   pea 1a892 <PutChar+0x18ec>
    dd34:	   |   jsr 18504 <KPrintF>
    dd3a:	   |   addq.l #4,sp
		return;
    dd3c:	,--|-- bra.s dd5e <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    dd3e:	|  '-> move.l 1e802 <bigDataFile>,d0
    dd44:	|      move.l 12(sp),-(sp)
    dd48:	|      move.l 12(sp),-(sp)
    dd4c:	|      move.l d0,-(sp)
    dd4e:	|      jsr 1ef8 <CstLoadBackdrop>
    dd54:	|      lea 12(sp),sp
	finishAccess ();
    dd58:	|      jsr 7df0 <finishAccess>
	
}
    dd5e:	'----> rts

0000dd60 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    dd60:	subq.l #8,sp
    dd62:	movea.l 12(sp),a0
    dd66:	move.l 16(sp),d1
    dd6a:	move.l 20(sp),d0
    dd6e:	movea.w a0,a0
    dd70:	move.w a0,6(sp)
    dd74:	move.w d1,d1
    dd76:	move.w d1,4(sp)
    dd7a:	move.w d0,d0
    dd7c:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    dd80:	pea 1a8e1 <PutChar+0x193b>
    dd86:	jsr 18504 <KPrintF>
    dd8c:	addq.l #4,sp

}
    dd8e:	nop
    dd90:	addq.l #8,sp
    dd92:	rts

0000dd94 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    dd94:	pea 1a904 <PutChar+0x195e>
    dd9a:	jsr 18504 <KPrintF>
    dda0:	addq.l #4,sp
}
    dda2:	nop
    dda4:	rts

0000dda6 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    dda6:	pea 1e8ca <snapshotTextureName>
    ddac:	pea 1 <_start+0x1>
    ddb0:	jsr 4e1e <deleteTextures>
    ddb6:	addq.l #8,sp
	snapshotTextureName = 0;
    ddb8:	clr.l 1e8ca <snapshotTextureName>
}
    ddbe:	nop
    ddc0:	rts

0000ddc2 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    ddc2:	clr.l 1e8d6 <cameraX>
	cameraY = 0;
    ddc8:	clr.l 1e8da <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    ddce:	move.l 1e8bc <sceneHeight>,d0
    ddd4:	move.l d0,d1
    ddd6:	move.l 1e8b8 <sceneWidth>,d0
    dddc:	move.l d1,-(sp)
    ddde:	move.l d0,-(sp)
    dde0:	jsr 3c50 <CstReserveBackdrop>
    dde6:	addq.l #8,sp
}
    dde8:	rts

0000ddea <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    ddea:	jsr dc70 <killBackDrop>
	killParallax ();
    ddf0:	jsr dc98 <killParallax>
	killZBuffer ();
    ddf6:	jsr 9008 <killZBuffer>
	sceneWidth = x;
    ddfc:	move.l 4(sp),d0
    de00:	move.l d0,1e8b8 <sceneWidth>
	sceneHeight = y;
    de06:	move.l 8(sp),d0
    de0a:	move.l d0,1e8bc <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    de10:	pea 1a93d <PutChar+0x1997>
    de16:	jsr 18504 <KPrintF>
    de1c:	addq.l #4,sp
	return reserveBackdrop();
    de1e:	jsr ddc2 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    de24:	rts

0000de26 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    de26:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    de28:	move.l 12(sp),-(sp)
    de2c:	jsr 6bc <get2bytes>
    de32:	addq.l #4,sp
    de34:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    de38:	move.l 12(sp),-(sp)
    de3c:	jsr 6bc <get2bytes>
    de42:	addq.l #4,sp
    de44:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    de46:	moveq #1,d0
}
    de48:	addq.l #8,sp
    de4a:	rts

0000de4c <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    de4c:	   ,-> lea -12(sp),sp
    de50:	   |   move.l a6,-(sp)
    de52:	   |   move.l d2,-(sp)
	if (me) {
    de54:	   |   tst.l 24(sp)
    de58:	,--|-- beq.w deee <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    de5c:	|  |   movea.l 24(sp),a0
    de60:	|  |   move.l 42(a0),d0
    de64:	|  |   move.l 28(sp),-(sp)
    de68:	|  |   move.l d0,-(sp)
    de6a:	|  '-- jsr de4c <saveParallaxRecursive>(pc)
    de6e:	|      addq.l #8,sp
		FPutC (fp, 1);
    de70:	|      move.l 28(sp),16(sp)
    de76:	|      moveq #1,d0
    de78:	|      move.l d0,12(sp)
    de7c:	|      move.l 1e824 <DOSBase>,d0
    de82:	|      movea.l d0,a6
    de84:	|      move.l 16(sp),d1
    de88:	|      move.l 12(sp),d2
    de8c:	|      jsr -312(a6)
    de90:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    de94:	|      movea.l 24(sp),a0
    de98:	|      move.w 28(a0),d0
    de9c:	|      move.w d0,d0
    de9e:	|      andi.l #65535,d0
    dea4:	|      move.l 28(sp),-(sp)
    dea8:	|      move.l d0,-(sp)
    deaa:	|      jsr 8d0 <put2bytes>
    deb0:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    deb2:	|      movea.l 24(sp),a0
    deb6:	|      move.w 30(a0),d0
    deba:	|      move.w d0,d0
    debc:	|      andi.l #65535,d0
    dec2:	|      move.l 28(sp),-(sp)
    dec6:	|      move.l d0,-(sp)
    dec8:	|      jsr 8d0 <put2bytes>
    dece:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    ded0:	|      movea.l 24(sp),a0
    ded4:	|      move.w 32(a0),d0
    ded8:	|      move.w d0,d0
    deda:	|      andi.l #65535,d0
    dee0:	|      move.l 28(sp),-(sp)
    dee4:	|      move.l d0,-(sp)
    dee6:	|      jsr 8d0 <put2bytes>
    deec:	|      addq.l #8,sp
	}
}
    deee:	'----> nop
    def0:	       move.l (sp)+,d2
    def2:	       movea.l (sp)+,a6
    def4:	       lea 12(sp),sp
    def8:	       rts

0000defa <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    defa:	pea 1a964 <PutChar+0x19be>
    df00:	jsr 18504 <KPrintF>
    df06:	addq.l #4,sp
	return TRUE;
    df08:	moveq #1,d0
    df0a:	rts

0000df0c <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    df0c:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    df0e:	             move.l 1e8ce <allObjectTypes>,(sp)

	while (huntType) {
    df14:	      ,----- bra.s df2c <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    df16:	   ,--|----> movea.l (sp),a0
    df18:	   |  |      move.l 4(a0),d0
    df1c:	   |  |      cmp.l 8(sp),d0
    df20:	   |  |  ,-- bne.s df26 <findObjectType+0x1a>
    df22:	   |  |  |   move.l (sp),d0
    df24:	,--|--|--|-- bra.s df3c <findObjectType+0x30>
		huntType = huntType -> next;
    df26:	|  |  |  '-> movea.l (sp),a0
    df28:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    df2c:	|  |  '----> tst.l (sp)
    df2e:	|  '-------- bne.s df16 <findObjectType+0xa>
	}

	return loadObjectType (i);
    df30:	|            move.l 8(sp),-(sp)
    df34:	|            jsr dffc <loadObjectType>
    df3a:	|            addq.l #4,sp
}
    df3c:	'----------> addq.l #4,sp
    df3e:	             rts

0000df40 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    df40:	             lea -12(sp),sp
	int i, num = 0;
    df44:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    df48:	             move.l 20(sp),-(sp)
    df4c:	             jsr df0c <findObjectType>
    df52:	             addq.l #4,sp
    df54:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    df56:	             clr.l 8(sp)
    df5a:	   ,-------- bra.s df90 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    df5c:	,--|-------> movea.l (sp),a0
    df5e:	|  |         move.l 38(a0),d1
    df62:	|  |         move.l 8(sp),d0
    df66:	|  |         lsl.l #3,d0
    df68:	|  |         movea.l d1,a0
    df6a:	|  |         adda.l d0,a0
    df6c:	|  |         move.l (a0),d0
    df6e:	|  |         cmp.l 16(sp),d0
    df72:	|  |  ,----- bne.s df8c <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    df74:	|  |  |      movea.l (sp),a0
    df76:	|  |  |      move.l 38(a0),d1
    df7a:	|  |  |      move.l 8(sp),d0
    df7e:	|  |  |      lsl.l #3,d0
    df80:	|  |  |      movea.l d1,a0
    df82:	|  |  |      adda.l d0,a0
    df84:	|  |  |      move.l 4(a0),4(sp)
			break;
    df8a:	|  |  |  ,-- bra.s df9c <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    df8c:	|  |  '--|-> addq.l #1,8(sp)
    df90:	|  '-----|-> movea.l (sp),a0
    df92:	|        |   move.l 16(a0),d0
    df96:	|        |   cmp.l 8(sp),d0
    df9a:	'--------|-- bgt.s df5c <getCombinationFunction+0x1c>
		}
	}

	return num;
    df9c:	         '-> move.l 4(sp),d0
}
    dfa0:	             lea 12(sp),sp
    dfa4:	             rts

0000dfa6 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    dfa6:	moveq #1,d0
}
    dfa8:	rts

0000dfaa <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    dfaa:	subq.l #8,sp
    dfac:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    dfae:	move.l 16(sp),-(sp)
    dfb2:	jsr 6bc <get2bytes>
    dfb8:	addq.l #4,sp
    dfba:	move.l d0,-(sp)
    dfbc:	jsr dffc <loadObjectType>
    dfc2:	addq.l #4,sp
    dfc4:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    dfc8:	movea.l 8(sp),a0
    dfcc:	move.l (a0),4(sp)
    dfd0:	move.l 1e81c <SysBase>,d0
    dfd6:	movea.l d0,a6
    dfd8:	movea.l 4(sp),a1
    dfdc:	jsr -690(a6)
	r -> screenName = readString (fp);
    dfe0:	move.l 16(sp),-(sp)
    dfe4:	jsr b02 <readString>
    dfea:	addq.l #4,sp
    dfec:	movea.l 8(sp),a0
    dff0:	move.l d0,(a0)
	return r;
    dff2:	move.l 8(sp),d0
}
    dff6:	movea.l (sp)+,a6
    dff8:	addq.l #8,sp
    dffa:	rts

0000dffc <loadObjectType>:

struct objectType * loadObjectType (int i) {
    dffc:	          lea -84(sp),sp
    e000:	          move.l a6,-(sp)
    e002:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    e004:	          moveq #42,d0
    e006:	          move.l d0,84(sp)
    e00a:	          clr.l 80(sp)
    e00e:	          move.l 1e81c <SysBase>,d0
    e014:	          movea.l d0,a6
    e016:	          move.l 84(sp),d0
    e01a:	          move.l 80(sp),d1
    e01e:	          jsr -684(a6)
    e022:	          move.l d0,76(sp)
    e026:	          move.l 76(sp),d0
    e02a:	          move.l d0,72(sp)

    if (newType) {
    e02e:	,-------- beq.w e2a8 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    e032:	|         move.l 96(sp),-(sp)
    e036:	|         jsr 7fc0 <openObjectSlice>
    e03c:	|         addq.l #4,sp
    e03e:	|         tst.w d0
    e040:	+-------- beq.w e2a8 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    e044:	|         move.l 1e802 <bigDataFile>,d0
    e04a:	|         move.l d0,-(sp)
    e04c:	|         jsr 6bc <get2bytes>
    e052:	|         addq.l #4,sp
    e054:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    e058:	|         move.l 1e802 <bigDataFile>,64(sp)
    e060:	|         move.l 1e824 <DOSBase>,d0
    e066:	|         movea.l d0,a6
    e068:	|         move.l 64(sp),d1
    e06c:	|         jsr -306(a6)
    e070:	|         move.l d0,60(sp)
    e074:	|         move.l 60(sp),d0
    e078:	|         move.l d0,d0
    e07a:	|         movea.l 72(sp),a0
    e07e:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    e082:	|         move.l 1e802 <bigDataFile>,56(sp)
    e08a:	|         move.l 1e824 <DOSBase>,d0
    e090:	|         movea.l d0,a6
    e092:	|         move.l 56(sp),d1
    e096:	|         jsr -306(a6)
    e09a:	|         move.l d0,52(sp)
    e09e:	|         move.l 52(sp),d0
    e0a2:	|         move.l d0,d0
    e0a4:	|         movea.l 72(sp),a0
    e0a8:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    e0ac:	|         move.l 1e802 <bigDataFile>,48(sp)
    e0b4:	|         move.l 1e824 <DOSBase>,d0
    e0ba:	|         movea.l d0,a6
    e0bc:	|         move.l 48(sp),d1
    e0c0:	|         jsr -306(a6)
    e0c4:	|         move.l d0,44(sp)
    e0c8:	|         move.l 44(sp),d0
    e0cc:	|         move.l d0,d0
    e0ce:	|         movea.l 72(sp),a0
    e0d2:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    e0d6:	|         move.l 1e802 <bigDataFile>,40(sp)
    e0de:	|         move.l 1e824 <DOSBase>,d0
    e0e4:	|         movea.l d0,a6
    e0e6:	|         move.l 40(sp),d1
    e0ea:	|         jsr -306(a6)
    e0ee:	|         move.l d0,36(sp)
    e0f2:	|         move.l 36(sp),d0
    e0f6:	|         movea.l 72(sp),a0
    e0fa:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    e0fe:	|         move.l 1e802 <bigDataFile>,32(sp)
    e106:	|         move.l 1e824 <DOSBase>,d0
    e10c:	|         movea.l d0,a6
    e10e:	|         move.l 32(sp),d1
    e112:	|         jsr -306(a6)
    e116:	|         move.l d0,28(sp)
    e11a:	|         move.l 28(sp),d0
    e11e:	|         movea.l 72(sp),a0
    e122:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    e126:	|         move.l 1e802 <bigDataFile>,d0
    e12c:	|         move.l d0,-(sp)
    e12e:	|         jsr 718 <get4bytes>
    e134:	|         addq.l #4,sp
    e136:	|         movea.l 72(sp),a0
    e13a:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    e13e:	|         move.l 1e802 <bigDataFile>,d0
    e144:	|         move.l d0,-(sp)
    e146:	|         jsr 6bc <get2bytes>
    e14c:	|         addq.l #4,sp
    e14e:	|         movea.l 72(sp),a0
    e152:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    e156:	|         move.l 1e802 <bigDataFile>,24(sp)
    e15e:	|         move.l 1e824 <DOSBase>,d0
    e164:	|         movea.l d0,a6
    e166:	|         move.l 24(sp),d1
    e16a:	|         jsr -306(a6)
    e16e:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    e172:	|         move.l 1e802 <bigDataFile>,d0
    e178:	|         move.l d0,-(sp)
    e17a:	|         jsr 7d8 <getFloat>
    e180:	|         addq.l #4,sp
            getFloat(bigDataFile);
    e182:	|         move.l 1e802 <bigDataFile>,d0
    e188:	|         move.l d0,-(sp)
    e18a:	|         jsr 7d8 <getFloat>
    e190:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    e192:	|         move.l 1e802 <bigDataFile>,d0
    e198:	|         move.l d0,-(sp)
    e19a:	|         jsr 6bc <get2bytes>
    e1a0:	|         addq.l #4,sp
    e1a2:	|         move.l d0,d0
    e1a4:	|         movea.l 72(sp),a0
    e1a8:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    e1ac:	|         move.l 1e802 <bigDataFile>,d0
    e1b2:	|         move.l d0,-(sp)
    e1b4:	|         jsr 6bc <get2bytes>
    e1ba:	|         addq.l #4,sp
    e1bc:	|         movea.l 72(sp),a0
    e1c0:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    e1c4:	|         movea.l 72(sp),a0
    e1c8:	|         move.l 16(a0),d0
    e1cc:	|  ,----- beq.s e1fe <loadObjectType+0x202>
    e1ce:	|  |      movea.l 72(sp),a0
    e1d2:	|  |      move.l 16(a0),d0
    e1d6:	|  |      lsl.l #3,d0
    e1d8:	|  |      move.l d0,16(sp)
    e1dc:	|  |      clr.l 12(sp)
    e1e0:	|  |      move.l 1e81c <SysBase>,d0
    e1e6:	|  |      movea.l d0,a6
    e1e8:	|  |      move.l 16(sp),d0
    e1ec:	|  |      move.l 12(sp),d1
    e1f0:	|  |      jsr -684(a6)
    e1f4:	|  |      move.l d0,8(sp)
    e1f8:	|  |      move.l 8(sp),d0
    e1fc:	|  |  ,-- bra.s e200 <loadObjectType+0x204>
    e1fe:	|  '--|-> moveq #0,d0
    e200:	|     '-> movea.l 72(sp),a0
    e204:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    e208:	|         clr.l 88(sp)
    e20c:	|     ,-- bra.s e25c <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    e20e:	|  ,--|-> move.l 1e802 <bigDataFile>,d1
    e214:	|  |  |   movea.l 72(sp),a0
    e218:	|  |  |   movea.l 38(a0),a0
    e21c:	|  |  |   move.l 88(sp),d0
    e220:	|  |  |   lsl.l #3,d0
    e222:	|  |  |   lea (0,a0,d0.l),a2
    e226:	|  |  |   move.l d1,-(sp)
    e228:	|  |  |   jsr 6bc <get2bytes>
    e22e:	|  |  |   addq.l #4,sp
    e230:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    e232:	|  |  |   move.l 1e802 <bigDataFile>,d1
    e238:	|  |  |   movea.l 72(sp),a0
    e23c:	|  |  |   movea.l 38(a0),a0
    e240:	|  |  |   move.l 88(sp),d0
    e244:	|  |  |   lsl.l #3,d0
    e246:	|  |  |   lea (0,a0,d0.l),a2
    e24a:	|  |  |   move.l d1,-(sp)
    e24c:	|  |  |   jsr 6bc <get2bytes>
    e252:	|  |  |   addq.l #4,sp
    e254:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    e258:	|  |  |   addq.l #1,88(sp)
    e25c:	|  |  '-> movea.l 72(sp),a0
    e260:	|  |      move.l 16(a0),d0
    e264:	|  |      cmp.l 88(sp),d0
    e268:	|  '----- bgt.s e20e <loadObjectType+0x212>
            }
            finishAccess();
    e26a:	|         jsr 7df0 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    e270:	|         move.l 68(sp),-(sp)
    e274:	|         jsr 7dfa <getNumberedString>
    e27a:	|         addq.l #4,sp
    e27c:	|         movea.l 72(sp),a0
    e280:	|         move.l d0,(a0)
            newType->objectNum = i;
    e282:	|         movea.l 72(sp),a0
    e286:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    e28c:	|         move.l 1e8ce <allObjectTypes>,d0
    e292:	|         movea.l 72(sp),a0
    e296:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    e29a:	|         move.l 72(sp),1e8ce <allObjectTypes>
            return newType;
    e2a2:	|         move.l 72(sp),d0
    e2a6:	|     ,-- bra.s e2aa <loadObjectType+0x2ae>
        }
    }
    return NULL;
    e2a8:	'-----|-> moveq #0,d0
}
    e2aa:	      '-> movea.l (sp)+,a2
    e2ac:	          movea.l (sp)+,a6
    e2ae:	          lea 84(sp),sp
    e2b2:	          rts

0000e2b4 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    e2b4:	             lea -16(sp),sp
    e2b8:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    e2ba:	             move.l #125134,16(sp)

	while (* huntRegion) {
    e2c2:	   ,-------- bra.s e336 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    e2c4:	,--|-------> movea.l 16(sp),a0
    e2c8:	|  |         move.l (a0),d0
    e2ca:	|  |         cmp.l 24(sp),d0
    e2ce:	|  |  ,----- bne.s e328 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    e2d0:	|  |  |      movea.l 24(sp),a0
    e2d4:	|  |  |      move.l 8(a0),d0
    e2d8:	|  |  |      movea.l 16(sp),a0
    e2dc:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    e2de:	|  |  |      movea.l 24(sp),a0
    e2e2:	|  |  |      move.l 38(a0),12(sp)
    e2e8:	|  |  |      move.l 1e81c <SysBase>,d0
    e2ee:	|  |  |      movea.l d0,a6
    e2f0:	|  |  |      movea.l 12(sp),a1
    e2f4:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    e2f8:	|  |  |      movea.l 24(sp),a0
    e2fc:	|  |  |      move.l (a0),8(sp)
    e300:	|  |  |      move.l 1e81c <SysBase>,d0
    e306:	|  |  |      movea.l d0,a6
    e308:	|  |  |      movea.l 8(sp),a1
    e30c:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    e310:	|  |  |      move.l 24(sp),4(sp)
    e316:	|  |  |      move.l 1e81c <SysBase>,d0
    e31c:	|  |  |      movea.l d0,a6
    e31e:	|  |  |      movea.l 4(sp),a1
    e322:	|  |  |      jsr -690(a6)
			return;
    e326:	|  |  |  ,-- bra.s e34c <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    e328:	|  |  '--|-> movea.l 16(sp),a0
    e32c:	|  |     |   move.l (a0),d0
    e32e:	|  |     |   move.l d0,d1
    e330:	|  |     |   addq.l #8,d1
    e332:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    e336:	|  '-----|-> movea.l 16(sp),a0
    e33a:	|        |   move.l (a0),d0
    e33c:	'--------|-- bne.s e2c4 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    e33e:	         |   pea 1a98b <PutChar+0x19e5>
    e344:	         |   jsr 18504 <KPrintF>
    e34a:	         |   addq.l #4,sp
}
    e34c:	         '-> movea.l (sp)+,a6
    e34e:	             lea 16(sp),sp
    e352:	             rts

0000e354 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    e354:	movea.l 4(sp),a0
    e358:	move.l 4(a0),d0
    e35c:	move.l 8(sp),-(sp)
    e360:	move.l d0,-(sp)
    e362:	jsr 8d0 <put2bytes>
    e368:	addq.l #8,sp
	writeString (r -> screenName, fp);
    e36a:	movea.l 4(sp),a0
    e36e:	move.l (a0),d0
    e370:	move.l 8(sp),-(sp)
    e374:	move.l d0,-(sp)
    e376:	jsr bd8 <writeString>
    e37c:	addq.l #8,sp
    e37e:	nop
    e380:	rts

0000e382 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    e382:	                         lea -112(sp),sp
    e386:	                         move.l a6,-(sp)
    e388:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    e38a:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    e38e:	                         move.w 1e8d4 <saveEncoding>,d0
    e394:	                  ,----- beq.s e39e <fileToStack+0x1c>
    e396:	                  |      move.l #108977,d0
    e39c:	                  |  ,-- bra.s e3a4 <fileToStack+0x22>
    e39e:	                  '--|-> move.l #109003,d0
    e3a4:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    e3a8:	                         move.l 124(sp),112(sp)
    e3ae:	                         move.l #1005,108(sp)
    e3b6:	                         move.l 1e824 <DOSBase>,d0
    e3bc:	                         movea.l d0,a6
    e3be:	                         move.l 112(sp),d1
    e3c2:	                         move.l 108(sp),d2
    e3c6:	                         jsr -30(a6)
    e3ca:	                         move.l d0,104(sp)
    e3ce:	                         move.l 104(sp),d0
    e3d2:	                         move.l d0,100(sp)
    if (!fp) {
    e3d6:	                     ,-- bne.s e3f0 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    e3d8:	                     |   move.l 124(sp),-(sp)
    e3dc:	                     |   pea 1a9e2 <PutChar+0x1a3c>
    e3e2:	                     |   jsr 18504 <KPrintF>
    e3e8:	                     |   addq.l #8,sp
        return FALSE;
    e3ea:	                     |   clr.w d0
    e3ec:	,--------------------|-- bra.w e6e6 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    e3f0:	|                    '-> move.w 1e8d4 <saveEncoding>,d0
    e3f6:	|                        move.l d0,d0
    e3f8:	|                        move.b d0,1e8d2 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    e3fe:	|                        move.w 1e8d4 <saveEncoding>,d0
    e404:	|                        lsr.w #8,d0
    e406:	|                        move.l d0,d0
    e408:	|                        move.b d0,1e8d3 <encode2>

    while (*checker) {
    e40e:	|                 ,----- bra.s e472 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    e410:	|              ,--|----> move.l 100(sp),30(sp)
    e416:	|              |  |      move.l 1e824 <DOSBase>,d0
    e41c:	|              |  |      movea.l d0,a6
    e41e:	|              |  |      move.l 30(sp),d1
    e422:	|              |  |      jsr -306(a6)
    e426:	|              |  |      move.l d0,26(sp)
    e42a:	|              |  |      move.l 26(sp),d1
    e42e:	|              |  |      movea.l 116(sp),a0
    e432:	|              |  |      move.b (a0),d0
    e434:	|              |  |      ext.w d0
    e436:	|              |  |      movea.w d0,a0
    e438:	|              |  |      cmpa.l d1,a0
    e43a:	|              |  |  ,-- beq.s e46e <fileToStack+0xec>
            Close(fp);
    e43c:	|              |  |  |   move.l 100(sp),22(sp)
    e442:	|              |  |  |   move.l 1e824 <DOSBase>,d0
    e448:	|              |  |  |   movea.l d0,a6
    e44a:	|              |  |  |   move.l 22(sp),d1
    e44e:	|              |  |  |   jsr -36(a6)
    e452:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    e456:	|              |  |  |   move.l 124(sp),-(sp)
    e45a:	|              |  |  |   pea 1a9ef <PutChar+0x1a49>
    e460:	|              |  |  |   jsr 18504 <KPrintF>
    e466:	|              |  |  |   addq.l #8,sp
            return FALSE;
    e468:	|              |  |  |   clr.w d0
    e46a:	+--------------|--|--|-- bra.w e6e6 <fileToStack+0x364>
        }
        checker++;
    e46e:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    e472:	|              |  '----> movea.l 116(sp),a0
    e476:	|              |         move.b (a0),d0
    e478:	|              '-------- bne.s e410 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    e47a:	|                        move.w 1e8d4 <saveEncoding>,d0
    e480:	|  ,-------------------- beq.s e4f4 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    e482:	|  |                     move.l 100(sp),-(sp)
    e486:	|  |                     jsr e6f0 <readStringEncoded>
    e48c:	|  |                     addq.l #4,sp
    e48e:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    e492:	|  |                     pea 1aa30 <PutChar+0x1a8a>
    e498:	|  |                     move.l 100(sp),-(sp)
    e49c:	|  |                     jsr 14ed0 <strcmp>
    e4a2:	|  |                     addq.l #8,sp
    e4a4:	|  |                     tst.l d0
    e4a6:	|  |                 ,-- beq.s e4da <fileToStack+0x158>
            Close(fp);
    e4a8:	|  |                 |   move.l 100(sp),88(sp)
    e4ae:	|  |                 |   move.l 1e824 <DOSBase>,d0
    e4b4:	|  |                 |   movea.l d0,a6
    e4b6:	|  |                 |   move.l 88(sp),d1
    e4ba:	|  |                 |   jsr -36(a6)
    e4be:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    e4c2:	|  |                 |   move.l 124(sp),-(sp)
    e4c6:	|  |                 |   pea 1aa3f <PutChar+0x1a99>
    e4cc:	|  |                 |   jsr 18504 <KPrintF>
    e4d2:	|  |                 |   addq.l #8,sp
            return FALSE;
    e4d4:	|  |                 |   clr.w d0
    e4d6:	+--|-----------------|-- bra.w e6e6 <fileToStack+0x364>
        }
        FreeVec(checker);
    e4da:	|  |                 '-> move.l 96(sp),92(sp)
    e4e0:	|  |                     move.l 1e81c <SysBase>,d0
    e4e6:	|  |                     movea.l d0,a6
    e4e8:	|  |                     movea.l 92(sp),a1
    e4ec:	|  |                     jsr -690(a6)
        checker = NULL;
    e4f0:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    e4f4:	|  >-------------------> move.w 1e8d4 <saveEncoding>,d0
    e4fa:	|  |     ,-------------- beq.w e62e <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    e4fe:	|  |     |               move.l 100(sp),76(sp)
    e504:	|  |     |               move.l 1e824 <DOSBase>,d0
    e50a:	|  |     |               movea.l d0,a6
    e50c:	|  |     |               move.l 76(sp),d1
    e510:	|  |     |               jsr -306(a6)
    e514:	|  |     |               move.l d0,72(sp)
    e518:	|  |     |               move.l 72(sp),d0
    e51c:	|  |     |               move.b 1e8d2 <encode1>,d1
    e522:	|  |     |               ext.w d1
    e524:	|  |     |               ext.l d1
    e526:	|  |     |               move.l d0,d2
    e528:	|  |     |               eor.l d1,d2
    e52a:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    e52e:	|  |     |               moveq #-1,d0
    e530:	|  |     |               cmp.l 68(sp),d0
    e534:	|  |  ,--|-------------- beq.w e6c4 <fileToStack+0x342>

            char i = (char) tmp;
    e538:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    e53e:	|  |  |  |               move.b 67(sp),d0
    e542:	|  |  |  |               ext.w d0
    e544:	|  |  |  |               movea.w d0,a0
    e546:	|  |  |  |               moveq #2,d2
    e548:	|  |  |  |               cmp.l a0,d2
    e54a:	|  |  |  |     ,-------- beq.s e5c6 <fileToStack+0x244>
    e54c:	|  |  |  |     |         moveq #2,d0
    e54e:	|  |  |  |     |         cmp.l a0,d0
    e550:	|  |  |  |  ,--|-------- blt.w e5fc <fileToStack+0x27a>
    e554:	|  |  |  |  |  |         cmpa.w #0,a0
    e558:	|  |  |  |  |  |     ,-- beq.s e564 <fileToStack+0x1e2>
    e55a:	|  |  |  |  |  |     |   moveq #1,d2
    e55c:	|  |  |  |  |  |     |   cmp.l a0,d2
    e55e:	|  |  |  |  |  |  ,--|-- beq.s e5a0 <fileToStack+0x21e>
    e560:	|  |  |  |  +--|--|--|-- bra.w e5fc <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    e564:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    e568:	|  |  |  |  |  |  |      jsr e6f0 <readStringEncoded>
    e56e:	|  |  |  |  |  |  |      addq.l #4,sp
    e570:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    e574:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    e578:	|  |  |  |  |  |  |      lea 14(sp),a0
    e57c:	|  |  |  |  |  |  |      move.l a0,-(sp)
    e57e:	|  |  |  |  |  |  |      jsr 15c46 <makeTextVar>
    e584:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    e586:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    e58c:	|  |  |  |  |  |  |      move.l 1e81c <SysBase>,d0
    e592:	|  |  |  |  |  |  |      movea.l d0,a6
    e594:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    e598:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    e59c:	|  |  |  |  |  |  |  ,-- bra.w e654 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    e5a0:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    e5a4:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    e5aa:	|  |  |  |  |  |     |   addq.l #4,sp
    e5ac:	|  |  |  |  |  |     |   move.l d0,-(sp)
    e5ae:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    e5b2:	|  |  |  |  |  |     |   lea 18(sp),a0
    e5b6:	|  |  |  |  |  |     |   move.l a0,-(sp)
    e5b8:	|  |  |  |  |  |     |   jsr 16316 <setVariable>
    e5be:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    e5c2:	|  |  |  |  |  |     +-- bra.w e654 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    e5c6:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    e5cc:	|  |  |  |  |        |   move.l 1e824 <DOSBase>,d0
    e5d2:	|  |  |  |  |        |   movea.l d0,a6
    e5d4:	|  |  |  |  |        |   move.l 62(sp),d1
    e5d8:	|  |  |  |  |        |   jsr -306(a6)
    e5dc:	|  |  |  |  |        |   move.l d0,58(sp)
    e5e0:	|  |  |  |  |        |   move.l 58(sp),d0
    e5e4:	|  |  |  |  |        |   move.l d0,-(sp)
    e5e6:	|  |  |  |  |        |   pea 1 <_start+0x1>
    e5ea:	|  |  |  |  |        |   lea 18(sp),a0
    e5ee:	|  |  |  |  |        |   move.l a0,-(sp)
    e5f0:	|  |  |  |  |        |   jsr 16316 <setVariable>
    e5f6:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    e5fa:	|  |  |  |  |        +-- bra.s e654 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    e5fc:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    e600:	|  |  |  |           |   pea 1aac1 <PutChar+0x1b1b>
    e606:	|  |  |  |           |   jsr 18504 <KPrintF>
    e60c:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    e60e:	|  |  |  |           |   move.l 100(sp),46(sp)
    e614:	|  |  |  |           |   move.l 1e824 <DOSBase>,d0
    e61a:	|  |  |  |           |   movea.l d0,a6
    e61c:	|  |  |  |           |   move.l 46(sp),d1
    e620:	|  |  |  |           |   jsr -36(a6)
    e624:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    e628:	|  |  |  |           |   clr.w d0
    e62a:	+--|--|--|-----------|-- bra.w e6e6 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    e62e:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    e632:	|  |  |              |   jsr e7b6 <readTextPlain>
    e638:	|  |  |              |   addq.l #4,sp
    e63a:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    e63e:	|  |  |        ,-----|-- beq.w e6c8 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    e642:	|  |  |        |     |   move.l 80(sp),-(sp)
    e646:	|  |  |        |     |   lea 14(sp),a0
    e64a:	|  |  |        |     |   move.l a0,-(sp)
    e64c:	|  |  |        |     |   jsr 15c46 <makeTextVar>
    e652:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    e654:	|  |  |        |     '-> movea.l 128(sp),a0
    e658:	|  |  |        |         move.l (a0),d0
    e65a:	|  |  |        |  ,----- bne.s e68a <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    e65c:	|  |  |        |  |      move.l 128(sp),d0
    e660:	|  |  |        |  |      move.l d0,-(sp)
    e662:	|  |  |        |  |      lea 14(sp),a0
    e666:	|  |  |        |  |      move.l a0,-(sp)
    e668:	|  |  |        |  |      jsr 152e6 <addVarToStackQuick>
    e66e:	|  |  |        |  |      addq.l #8,sp
    e670:	|  |  |        |  |      tst.w d0
    e672:	|  |  |        |  |  ,-- bne.s e678 <fileToStack+0x2f6>
    e674:	|  |  |        |  |  |   clr.w d0
    e676:	+--|--|--------|--|--|-- bra.s e6e6 <fileToStack+0x364>
            sH->last = sH->first;
    e678:	|  |  |        |  |  '-> movea.l 128(sp),a0
    e67c:	|  |  |        |  |      move.l (a0),d0
    e67e:	|  |  |        |  |      movea.l 128(sp),a0
    e682:	|  |  |        |  |      move.l d0,4(a0)
    e686:	|  +--|--------|--|----- bra.w e4f4 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    e68a:	|  |  |        |  '----> movea.l 128(sp),a0
    e68e:	|  |  |        |         move.l 4(a0),d0
    e692:	|  |  |        |         addq.l #8,d0
    e694:	|  |  |        |         move.l d0,-(sp)
    e696:	|  |  |        |         lea 14(sp),a0
    e69a:	|  |  |        |         move.l a0,-(sp)
    e69c:	|  |  |        |         jsr 152e6 <addVarToStackQuick>
    e6a2:	|  |  |        |         addq.l #8,sp
    e6a4:	|  |  |        |         tst.w d0
    e6a6:	|  |  |        |     ,-- bne.s e6ac <fileToStack+0x32a>
    e6a8:	|  |  |        |     |   clr.w d0
    e6aa:	+--|--|--------|-----|-- bra.s e6e6 <fileToStack+0x364>
            sH->last = sH->last->next;
    e6ac:	|  |  |        |     '-> movea.l 128(sp),a0
    e6b0:	|  |  |        |         movea.l 4(a0),a0
    e6b4:	|  |  |        |         move.l 8(a0),d0
    e6b8:	|  |  |        |         movea.l 128(sp),a0
    e6bc:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    e6c0:	|  '--|--------|-------- bra.w e4f4 <fileToStack+0x172>
            if (tmp == -1) break;
    e6c4:	|     '--------|-------> nop
    e6c6:	|              |     ,-- bra.s e6ca <fileToStack+0x348>
            if (!line) break;
    e6c8:	|              '-----|-> nop
        }
    }
    Close(fp);
    e6ca:	|                    '-> move.l 100(sp),38(sp)
    e6d0:	|                        move.l 1e824 <DOSBase>,d0
    e6d6:	|                        movea.l d0,a6
    e6d8:	|                        move.l 38(sp),d1
    e6dc:	|                        jsr -36(a6)
    e6e0:	|                        move.l d0,34(sp)
    return TRUE;
    e6e4:	|                        moveq #1,d0
}
    e6e6:	'----------------------> move.l (sp)+,d2
    e6e8:	                         movea.l (sp)+,a6
    e6ea:	                         lea 112(sp),sp
    e6ee:	                         rts

0000e6f0 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    e6f0:	          lea -32(sp),sp
    e6f4:	          move.l a6,-(sp)
    e6f6:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    e6f8:	          move.l 44(sp),-(sp)
    e6fc:	          jsr 6bc <get2bytes>
    e702:	          addq.l #4,sp
    e704:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    e708:	          move.l 32(sp),d0
    e70c:	          addq.l #1,d0
    e70e:	          move.l d0,28(sp)
    e712:	          clr.l 24(sp)
    e716:	          move.l 1e81c <SysBase>,d0
    e71c:	          movea.l d0,a6
    e71e:	          move.l 28(sp),d0
    e722:	          move.l 24(sp),d1
    e726:	          jsr -684(a6)
    e72a:	          move.l d0,20(sp)
    e72e:	          move.l 20(sp),d0
    e732:	          move.l d0,16(sp)
    if (!s) return NULL;
    e736:	      ,-- bne.s e73c <readStringEncoded+0x4c>
    e738:	      |   moveq #0,d0
    e73a:	,-----|-- bra.s e7ac <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    e73c:	|     '-> clr.l 36(sp)
    e740:	|     ,-- bra.s e792 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    e742:	|  ,--|-> move.l 44(sp),12(sp)
    e748:	|  |  |   move.l 1e824 <DOSBase>,d0
    e74e:	|  |  |   movea.l d0,a6
    e750:	|  |  |   move.l 12(sp),d1
    e754:	|  |  |   jsr -306(a6)
    e758:	|  |  |   move.l d0,8(sp)
    e75c:	|  |  |   move.l 8(sp),d0
    e760:	|  |  |   move.l d0,d1
    e762:	|  |  |   move.b 1e8d2 <encode1>,d2
    e768:	|  |  |   move.l 36(sp),d0
    e76c:	|  |  |   movea.l 16(sp),a0
    e770:	|  |  |   adda.l d0,a0
    e772:	|  |  |   move.b d1,d0
    e774:	|  |  |   eor.b d2,d0
    e776:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    e778:	|  |  |   move.b 1e8d2 <encode1>,d0
    e77e:	|  |  |   move.b d0,d1
    e780:	|  |  |   move.b 1e8d3 <encode2>,d0
    e786:	|  |  |   add.b d1,d0
    e788:	|  |  |   move.b d0,1e8d2 <encode1>
    for (a = 0; a < len; a++) {
    e78e:	|  |  |   addq.l #1,36(sp)
    e792:	|  |  '-> move.l 36(sp),d0
    e796:	|  |      cmp.l 32(sp),d0
    e79a:	|  '----- blt.s e742 <readStringEncoded+0x52>
    }
    s[len] = 0;
    e79c:	|         move.l 32(sp),d0
    e7a0:	|         movea.l 16(sp),a0
    e7a4:	|         adda.l d0,a0
    e7a6:	|         clr.b (a0)
    return s;
    e7a8:	|         move.l 16(sp),d0
}
    e7ac:	'-------> move.l (sp)+,d2
    e7ae:	          movea.l (sp)+,a6
    e7b0:	          lea 32(sp),sp
    e7b4:	          rts

0000e7b6 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    e7b6:	             lea -104(sp),sp
    e7ba:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    e7be:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    e7c2:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    e7c8:	             move.l 124(sp),106(sp)
    e7ce:	             clr.l 102(sp)
    e7d2:	             clr.l 98(sp)
    e7d6:	             move.l 1e824 <DOSBase>,d0
    e7dc:	             movea.l d0,a6
    e7de:	             move.l 106(sp),d1
    e7e2:	             move.l 102(sp),d2
    e7e6:	             move.l 98(sp),d3
    e7ea:	             jsr -66(a6)
    e7ee:	             move.l d0,94(sp)
    e7f2:	             move.l 94(sp),d0
    e7f6:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    e7fa:	   ,-------- bra.s e83e <readTextPlain+0x88>
        tmp = FGetC(fp);
    e7fc:	,--|-------> move.l 124(sp),22(sp)
    e802:	|  |         move.l 1e824 <DOSBase>,d0
    e808:	|  |         movea.l d0,a6
    e80a:	|  |         move.l 22(sp),d1
    e80e:	|  |         jsr -306(a6)
    e812:	|  |         move.l d0,18(sp)
    e816:	|  |         move.l 18(sp),d0
    e81a:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    e81e:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    e824:	|  |         cmpi.b #10,17(sp)
    e82a:	|  |  ,----- beq.s e834 <readTextPlain+0x7e>
    e82c:	|  |  |      moveq #-1,d0
    e82e:	|  |  |      cmp.l 110(sp),d0
    e832:	|  |  |  ,-- bne.s e83a <readTextPlain+0x84>
            keepGoing = FALSE;
    e834:	|  |  '--|-> clr.w 114(sp)
    e838:	|  +-----|-- bra.s e83e <readTextPlain+0x88>
        } else {
            stringSize++;
    e83a:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    e83e:	|  '-------> tst.w 114(sp)
    e842:	'----------- bne.s e7fc <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    e844:	             tst.l 116(sp)
    e848:	         ,-- bne.s e858 <readTextPlain+0xa2>
    e84a:	         |   moveq #-1,d0
    e84c:	         |   cmp.l 110(sp),d0
    e850:	         +-- bne.s e858 <readTextPlain+0xa2>
        return NULL;
    e852:	         |   moveq #0,d0
    e854:	      ,--|-- bra.w e93e <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    e858:	      |  '-> move.l 124(sp),86(sp)
    e85e:	      |      move.l 90(sp),82(sp)
    e864:	      |      moveq #-1,d0
    e866:	      |      move.l d0,78(sp)
    e86a:	      |      move.l 1e824 <DOSBase>,d0
    e870:	      |      movea.l d0,a6
    e872:	      |      move.l 86(sp),d1
    e876:	      |      move.l 82(sp),d2
    e87a:	      |      move.l 78(sp),d3
    e87e:	      |      jsr -66(a6)
    e882:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    e886:	      |      move.l 116(sp),d0
    e88a:	      |      addq.l #1,d0
    e88c:	      |      move.l d0,70(sp)
    e890:	      |      clr.l 66(sp)
    e894:	      |      move.l 1e81c <SysBase>,d0
    e89a:	      |      movea.l d0,a6
    e89c:	      |      move.l 70(sp),d0
    e8a0:	      |      move.l 66(sp),d1
    e8a4:	      |      jsr -684(a6)
    e8a8:	      |      move.l d0,62(sp)
    e8ac:	      |      move.l 62(sp),d0
    e8b0:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    e8b4:	      |  ,-- bne.s e8bc <readTextPlain+0x106>
    e8b6:	      |  |   moveq #0,d0
    e8b8:	      +--|-- bra.w e93e <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    e8bc:	      |  '-> move.l 124(sp),54(sp)
    e8c2:	      |      move.l 58(sp),50(sp)
    e8c8:	      |      moveq #1,d0
    e8ca:	      |      move.l d0,46(sp)
    e8ce:	      |      move.l 116(sp),42(sp)
    e8d4:	      |      move.l 1e824 <DOSBase>,d0
    e8da:	      |      movea.l d0,a6
    e8dc:	      |      move.l 54(sp),d1
    e8e0:	      |      move.l 50(sp),d2
    e8e4:	      |      move.l 46(sp),d3
    e8e8:	      |      move.l 42(sp),d4
    e8ec:	      |      jsr -324(a6)
    e8f0:	      |      move.l d0,38(sp)
    e8f4:	      |      move.l 38(sp),d0
    e8f8:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    e8fc:	      |      move.l 34(sp),d0
    e900:	      |      cmp.l 116(sp),d0
    e904:	      |  ,-- beq.s e914 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    e906:	      |  |   pea 1aaf6 <PutChar+0x1b50>
    e90c:	      |  |   jsr 18504 <KPrintF>
    e912:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    e914:	      |  '-> move.l 124(sp),30(sp)
    e91a:	      |      move.l 1e824 <DOSBase>,d0
    e920:	      |      movea.l d0,a6
    e922:	      |      move.l 30(sp),d1
    e926:	      |      jsr -306(a6)
    e92a:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    e92e:	      |      move.l 116(sp),d0
    e932:	      |      movea.l 58(sp),a0
    e936:	      |      adda.l d0,a0
    e938:	      |      clr.b (a0)
    }

    return reply;
    e93a:	      |      move.l 58(sp),d0
}
    e93e:	      '----> movem.l (sp)+,d2-d4/a6
    e942:	             lea 104(sp),sp
    e946:	             rts

0000e948 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    e948:	                      lea -144(sp),sp
    e94c:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    e950:	                      move.l 160(sp),148(sp)
    e956:	                      move.l #1006,144(sp)
    e95e:	                      move.l 1e824 <DOSBase>,d0
    e964:	                      movea.l d0,a6
    e966:	                      move.l 148(sp),d1
    e96a:	                      move.l 144(sp),d2
    e96e:	                      jsr -30(a6)
    e972:	                      move.l d0,140(sp)
    e976:	                      move.l 140(sp),d0
    e97a:	                      move.l d0,136(sp)

    if (!fp) {
    e97e:	                  ,-- bne.s e998 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e980:	                  |   move.l 160(sp),-(sp)
    e984:	                  |   pea 1ab17 <PutChar+0x1b71>
    e98a:	                  |   jsr 18504 <KPrintF>
    e990:	                  |   addq.l #8,sp
        return FALSE;
    e992:	                  |   clr.w d0
    e994:	,-----------------|-- bra.w ec54 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    e998:	|                 '-> movea.l 164(sp),a0
    e99c:	|                     movea.l 4(a0),a0
    e9a0:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    e9a4:	|                     move.w 1e8d4 <saveEncoding>,d0
    e9aa:	|                     move.l d0,d0
    e9ac:	|                     move.b d0,1e8d2 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    e9b2:	|                     move.w 1e8d4 <saveEncoding>,d0
    e9b8:	|                     lsr.w #8,d0
    e9ba:	|                     move.l d0,d0
    e9bc:	|                     move.b d0,1e8d3 <encode2>

    if (saveEncoding) {
    e9c2:	|                     move.w 1e8d4 <saveEncoding>,d0
    e9c8:	|                 ,-- beq.s ea1a <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    e9ca:	|                 |   move.l 136(sp),116(sp)
    e9d0:	|                 |   move.l #108977,112(sp)
    e9d8:	|                 |   moveq #99,d0
    e9da:	|                 |   not.b d0
    e9dc:	|                 |   add.l sp,d0
    e9de:	|                 |   addi.l #-144,d0
    e9e4:	|                 |   move.l d0,108(sp)
    e9e8:	|                 |   move.l 1e824 <DOSBase>,d0
    e9ee:	|                 |   movea.l d0,a6
    e9f0:	|                 |   move.l 116(sp),d1
    e9f4:	|                 |   move.l 112(sp),d2
    e9f8:	|                 |   move.l 108(sp),d3
    e9fc:	|                 |   jsr -354(a6)
    ea00:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    ea04:	|                 |   move.l 136(sp),-(sp)
    ea08:	|                 |   pea 1aa30 <PutChar+0x1a8a>
    ea0e:	|                 |   jsr ec5e <writeStringEncoded>
    ea14:	|                 |   addq.l #8,sp
    ea16:	|  ,--------------|-- bra.w ec2c <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    ea1a:	|  |              '-> move.l 136(sp),132(sp)
    ea20:	|  |                  move.l #109003,128(sp)
    ea28:	|  |                  moveq #99,d1
    ea2a:	|  |                  not.b d1
    ea2c:	|  |                  add.l sp,d1
    ea2e:	|  |                  addi.l #-144,d1
    ea34:	|  |                  move.l d1,124(sp)
    ea38:	|  |                  move.l 1e824 <DOSBase>,d0
    ea3e:	|  |                  movea.l d0,a6
    ea40:	|  |                  move.l 132(sp),d1
    ea44:	|  |                  move.l 128(sp),d2
    ea48:	|  |                  move.l 124(sp),d3
    ea4c:	|  |                  jsr -354(a6)
    ea50:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    ea54:	|  +----------------- bra.w ec2c <stackToFile+0x2e4>
        if (saveEncoding) {
    ea58:	|  |  ,-------------> move.w 1e8d4 <saveEncoding>,d0
    ea5e:	|  |  |     ,-------- beq.w ebb0 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    ea62:	|  |  |     |         movea.l 152(sp),a0
    ea66:	|  |  |     |         move.l (a0),d0
    ea68:	|  |  |     |         moveq #1,d1
    ea6a:	|  |  |     |         cmp.l d0,d1
    ea6c:	|  |  |     |     ,-- beq.s eabc <stackToFile+0x174>
    ea6e:	|  |  |     |     |   moveq #3,d1
    ea70:	|  |  |     |     |   cmp.l d0,d1
    ea72:	|  |  |     |  ,--|-- bne.w eb7e <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    ea76:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    ea7c:	|  |  |     |  |  |   move.b 1e8d2 <encode1>,d0
    ea82:	|  |  |     |  |  |   ext.w d0
    ea84:	|  |  |     |  |  |   movea.w d0,a0
    ea86:	|  |  |     |  |  |   move.l a0,72(sp)
    ea8a:	|  |  |     |  |  |   move.l 1e824 <DOSBase>,d0
    ea90:	|  |  |     |  |  |   movea.l d0,a6
    ea92:	|  |  |     |  |  |   move.l 76(sp),d1
    ea96:	|  |  |     |  |  |   move.l 72(sp),d2
    ea9a:	|  |  |     |  |  |   jsr -312(a6)
    ea9e:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    eaa2:	|  |  |     |  |  |   movea.l 152(sp),a0
    eaa6:	|  |  |     |  |  |   move.l 4(a0),d0
    eaaa:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    eaae:	|  |  |     |  |  |   move.l d0,-(sp)
    eab0:	|  |  |     |  |  |   jsr ec5e <writeStringEncoded>
    eab6:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    eab8:	|  |  |  ,--|--|--|-- bra.w ec22 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    eabc:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    eac0:	|  |  |  |  |  |      move.l 4(a0),d0
    eac4:	|  |  |  |  |  |  ,-- bmi.s eb34 <stackToFile+0x1ec>
    eac6:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    eaca:	|  |  |  |  |  |  |   move.l 4(a0),d0
    eace:	|  |  |  |  |  |  |   cmpi.l #255,d0
    ead4:	|  |  |  |  |  |  +-- bgt.s eb34 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    ead6:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    eadc:	|  |  |  |  |  |  |   move.b 1e8d2 <encode1>,d0
    eae2:	|  |  |  |  |  |  |   eori.b #2,d0
    eae6:	|  |  |  |  |  |  |   ext.w d0
    eae8:	|  |  |  |  |  |  |   movea.w d0,a0
    eaea:	|  |  |  |  |  |  |   move.l a0,60(sp)
    eaee:	|  |  |  |  |  |  |   move.l 1e824 <DOSBase>,d0
    eaf4:	|  |  |  |  |  |  |   movea.l d0,a6
    eaf6:	|  |  |  |  |  |  |   move.l 64(sp),d1
    eafa:	|  |  |  |  |  |  |   move.l 60(sp),d2
    eafe:	|  |  |  |  |  |  |   jsr -312(a6)
    eb02:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    eb06:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    eb0c:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    eb10:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    eb16:	|  |  |  |  |  |  |   move.l 1e824 <DOSBase>,d0
    eb1c:	|  |  |  |  |  |  |   movea.l d0,a6
    eb1e:	|  |  |  |  |  |  |   move.l 52(sp),d1
    eb22:	|  |  |  |  |  |  |   move.l 48(sp),d2
    eb26:	|  |  |  |  |  |  |   jsr -312(a6)
    eb2a:	|  |  |  |  |  |  |   move.l d0,44(sp)
    eb2e:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    eb30:	|  |  |  +--|--|--|-- bra.w ec22 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    eb34:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    eb3a:	|  |  |  |  |  |      move.b 1e8d2 <encode1>,d0
    eb40:	|  |  |  |  |  |      eori.b #1,d0
    eb44:	|  |  |  |  |  |      ext.w d0
    eb46:	|  |  |  |  |  |      movea.w d0,a0
    eb48:	|  |  |  |  |  |      move.l a0,36(sp)
    eb4c:	|  |  |  |  |  |      move.l 1e824 <DOSBase>,d0
    eb52:	|  |  |  |  |  |      movea.l d0,a6
    eb54:	|  |  |  |  |  |      move.l 40(sp),d1
    eb58:	|  |  |  |  |  |      move.l 36(sp),d2
    eb5c:	|  |  |  |  |  |      jsr -312(a6)
    eb60:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    eb64:	|  |  |  |  |  |      movea.l 152(sp),a0
    eb68:	|  |  |  |  |  |      move.l 4(a0),d0
    eb6c:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    eb70:	|  |  |  |  |  |      move.l d0,-(sp)
    eb72:	|  |  |  |  |  |      jsr 958 <put4bytes>
    eb78:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    eb7a:	|  |  |  +--|--|----- bra.w ec22 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    eb7e:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    eb82:	|  |  |  |  |         pea 1ab29 <PutChar+0x1b83>
    eb88:	|  |  |  |  |         jsr 18504 <KPrintF>
    eb8e:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    eb90:	|  |  |  |  |         move.l 136(sp),28(sp)
    eb96:	|  |  |  |  |         move.l 1e824 <DOSBase>,d0
    eb9c:	|  |  |  |  |         movea.l d0,a6
    eb9e:	|  |  |  |  |         move.l 28(sp),d1
    eba2:	|  |  |  |  |         jsr -36(a6)
    eba6:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    ebaa:	|  |  |  |  |         clr.w d0
    ebac:	+--|--|--|--|-------- bra.w ec54 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    ebb0:	|  |  |  |  '-------> move.l 152(sp),d0
    ebb4:	|  |  |  |            move.l d0,-(sp)
    ebb6:	|  |  |  |            jsr 15ffa <getTextFromAnyVar>
    ebbc:	|  |  |  |            addq.l #4,sp
    ebbe:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    ebc2:	|  |  |  |     ,----- beq.s ec36 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    ebc4:	|  |  |  |     |      movea.l 100(sp),a0
    ebc8:	|  |  |  |     |      move.b (a0),d0
    ebca:	|  |  |  |     |      ext.w d0
    ebcc:	|  |  |  |     |      movea.w d0,a0
    ebce:	|  |  |  |     |      move.l a0,12(sp)
    ebd2:	|  |  |  |     |      move.l 136(sp),96(sp)
    ebd8:	|  |  |  |     |      move.l #109445,92(sp)
    ebe0:	|  |  |  |     |      moveq #99,d0
    ebe2:	|  |  |  |     |      not.b d0
    ebe4:	|  |  |  |     |      add.l sp,d0
    ebe6:	|  |  |  |     |      addi.l #-144,d0
    ebec:	|  |  |  |     |      move.l d0,88(sp)
    ebf0:	|  |  |  |     |      move.l 1e824 <DOSBase>,d0
    ebf6:	|  |  |  |     |      movea.l d0,a6
    ebf8:	|  |  |  |     |      move.l 96(sp),d1
    ebfc:	|  |  |  |     |      move.l 92(sp),d2
    ec00:	|  |  |  |     |      move.l 88(sp),d3
    ec04:	|  |  |  |     |      jsr -354(a6)
    ec08:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    ec0c:	|  |  |  |     |      move.l 100(sp),80(sp)
    ec12:	|  |  |  |     |      move.l 1e81c <SysBase>,d0
    ec18:	|  |  |  |     |      movea.l d0,a6
    ec1a:	|  |  |  |     |      movea.l 80(sp),a1
    ec1e:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    ec22:	|  |  |  '-----|----> movea.l 152(sp),a0
    ec26:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    ec2c:	|  '--|--------|----> tst.l 152(sp)
    ec30:	|     '--------|----- bne.w ea58 <stackToFile+0x110>
    ec34:	|              |  ,-- bra.s ec38 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    ec36:	|              '--|-> nop
    }
    Close(fp);
    ec38:	|                 '-> move.l 136(sp),20(sp)
    ec3e:	|                     move.l 1e824 <DOSBase>,d0
    ec44:	|                     movea.l d0,a6
    ec46:	|                     move.l 20(sp),d1
    ec4a:	|                     jsr -36(a6)
    ec4e:	|                     move.l d0,16(sp)
    return TRUE;
    ec52:	|                     moveq #1,d0
}
    ec54:	'-------------------> movem.l (sp)+,d2-d3/a6
    ec58:	                      lea 144(sp),sp
    ec5c:	                      rts

0000ec5e <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    ec5e:	       lea -20(sp),sp
    ec62:	       move.l a6,-(sp)
    ec64:	       move.l d2,-(sp)
	int a, len = strlen (s);
    ec66:	       move.l 32(sp),-(sp)
    ec6a:	       jsr 14f10 <strlen>
    ec70:	       addq.l #4,sp
    ec72:	       move.l d0,20(sp)

	put2bytes (len, fp);
    ec76:	       move.l 36(sp),-(sp)
    ec7a:	       move.l 24(sp),-(sp)
    ec7e:	       jsr 8d0 <put2bytes>
    ec84:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    ec86:	       clr.l 24(sp)
    ec8a:	   ,-- bra.s ece0 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    ec8c:	,--|-> move.l 36(sp),16(sp)
    ec92:	|  |   move.l 24(sp),d0
    ec96:	|  |   movea.l 32(sp),a0
    ec9a:	|  |   adda.l d0,a0
    ec9c:	|  |   move.b (a0),d1
    ec9e:	|  |   move.b 1e8d2 <encode1>,d0
    eca4:	|  |   eor.b d1,d0
    eca6:	|  |   ext.w d0
    eca8:	|  |   movea.w d0,a0
    ecaa:	|  |   move.l a0,12(sp)
    ecae:	|  |   move.l 1e824 <DOSBase>,d0
    ecb4:	|  |   movea.l d0,a6
    ecb6:	|  |   move.l 16(sp),d1
    ecba:	|  |   move.l 12(sp),d2
    ecbe:	|  |   jsr -312(a6)
    ecc2:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    ecc6:	|  |   move.b 1e8d2 <encode1>,d0
    eccc:	|  |   move.b d0,d1
    ecce:	|  |   move.b 1e8d3 <encode2>,d0
    ecd4:	|  |   add.b d1,d0
    ecd6:	|  |   move.b d0,1e8d2 <encode1>
	for (a = 0; a < len; a ++) {
    ecdc:	|  |   addq.l #1,24(sp)
    ece0:	|  '-> move.l 24(sp),d0
    ece4:	|      cmp.l 20(sp),d0
    ece8:	'----- blt.s ec8c <writeStringEncoded+0x2e>
	}
}
    ecea:	       nop
    ecec:	       nop
    ecee:	       move.l (sp)+,d2
    ecf0:	       movea.l (sp)+,a6
    ecf2:	       lea 20(sp),sp
    ecf6:	       rts

0000ecf8 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    ecf8:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    ecfa:	                   tst.l 8(sp)
    ecfe:	               ,-- bne.s ed04 <failSecurityCheck+0xc>
    ed00:	               |   moveq #1,d0
    ed02:	,--------------|-- bra.s ed82 <failSecurityCheck+0x8a>

	int a = 0;
    ed04:	|              '-> clr.l (sp)

	while (fn[a]) {
    ed06:	|     ,----------- bra.s ed74 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    ed08:	|  ,--|----------> move.l (sp),d0
    ed0a:	|  |  |            movea.l 8(sp),a0
    ed0e:	|  |  |            adda.l d0,a0
    ed10:	|  |  |            move.b (a0),d0
    ed12:	|  |  |            ext.w d0
    ed14:	|  |  |            movea.w d0,a0
    ed16:	|  |  |            moveq #124,d0
    ed18:	|  |  |            cmp.l a0,d0
    ed1a:	|  |  |     ,----- beq.s ed5c <failSecurityCheck+0x64>
    ed1c:	|  |  |     |      moveq #124,d1
    ed1e:	|  |  |     |      cmp.l a0,d1
    ed20:	|  |  |  ,--|----- blt.s ed72 <failSecurityCheck+0x7a>
    ed22:	|  |  |  |  |      moveq #92,d0
    ed24:	|  |  |  |  |      cmp.l a0,d0
    ed26:	|  |  |  |  +----- beq.s ed5c <failSecurityCheck+0x64>
    ed28:	|  |  |  |  |      moveq #92,d1
    ed2a:	|  |  |  |  |      cmp.l a0,d1
    ed2c:	|  |  |  +--|----- blt.s ed72 <failSecurityCheck+0x7a>
    ed2e:	|  |  |  |  |      moveq #60,d0
    ed30:	|  |  |  |  |      cmp.l a0,d0
    ed32:	|  |  |  |  |  ,-- blt.s ed52 <failSecurityCheck+0x5a>
    ed34:	|  |  |  |  |  |   moveq #34,d1
    ed36:	|  |  |  |  |  |   cmp.l a0,d1
    ed38:	|  |  |  +--|--|-- bgt.s ed72 <failSecurityCheck+0x7a>
    ed3a:	|  |  |  |  |  |   moveq #-34,d1
    ed3c:	|  |  |  |  |  |   add.l a0,d1
    ed3e:	|  |  |  |  |  |   move.l #83894529,d0
    ed44:	|  |  |  |  |  |   lsr.l d1,d0
    ed46:	|  |  |  |  |  |   moveq #1,d1
    ed48:	|  |  |  |  |  |   and.l d1,d0
    ed4a:	|  |  |  |  |  |   sne d0
    ed4c:	|  |  |  |  |  |   neg.b d0
    ed4e:	|  |  |  |  +--|-- bne.s ed5c <failSecurityCheck+0x64>
    ed50:	|  |  |  +--|--|-- bra.s ed72 <failSecurityCheck+0x7a>
    ed52:	|  |  |  |  |  '-> lea -62(a0),a0
    ed56:	|  |  |  |  |      moveq #1,d0
    ed58:	|  |  |  |  |      cmp.l a0,d0
    ed5a:	|  |  |  +--|----- bcs.s ed72 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    ed5c:	|  |  |  |  '----> move.l 8(sp),-(sp)
    ed60:	|  |  |  |         pea 1ab89 <PutChar+0x1be3>
    ed66:	|  |  |  |         jsr 18504 <KPrintF>
    ed6c:	|  |  |  |         addq.l #8,sp
				return TRUE;
    ed6e:	|  |  |  |         moveq #1,d0
    ed70:	+--|--|--|-------- bra.s ed82 <failSecurityCheck+0x8a>
		}
		a++;
    ed72:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    ed74:	|  |  '----------> move.l (sp),d0
    ed76:	|  |               movea.l 8(sp),a0
    ed7a:	|  |               adda.l d0,a0
    ed7c:	|  |               move.b (a0),d0
    ed7e:	|  '-------------- bne.s ed08 <failSecurityCheck+0x10>
	}
	return FALSE;
    ed80:	|                  clr.w d0
}
    ed82:	'----------------> addq.l #4,sp
    ed84:	                   rts

0000ed86 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    ed86:	             lea -24(sp),sp
    ed8a:	             move.l a6,-(sp)
    ed8c:	             move.l 40(sp),d0
    ed90:	             move.w d0,d0
    ed92:	             move.w d0,6(sp)
	int fileNum = -1;
    ed96:	             moveq #-1,d0
    ed98:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    ed9c:	             jsr 6fc8 <killSpeechTimers>

	switch (numParams) {
    eda2:	             moveq #2,d0
    eda4:	             cmp.l 32(sp),d0
    eda8:	      ,----- beq.s edec <sayCore+0x66>
    edaa:	      |      moveq #3,d0
    edac:	      |      cmp.l 32(sp),d0
    edb0:	,-----|----- bne.w eece <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    edb4:	|     |      movea.l 36(sp),a0
    edb8:	|     |      move.l 24(a0),d0
    edbc:	|     |      move.l d0,-(sp)
    edbe:	|     |      pea 5 <_start+0x5>
    edc2:	|     |      lea 20(sp),a0
    edc6:	|     |      move.l a0,-(sp)
    edc8:	|     |      jsr 15a24 <getValueType>
    edce:	|     |      lea 12(sp),sp
    edd2:	|     |      tst.w d0
    edd4:	|     |  ,-- bne.s eddc <sayCore+0x56>
    edd6:	|     |  |   moveq #1,d0
    edd8:	|  ,--|--|-- bra.w eede <sayCore+0x158>
			trimStack (&fun -> stack);
    eddc:	|  |  |  '-> moveq #24,d0
    edde:	|  |  |      add.l 36(sp),d0
    ede2:	|  |  |      move.l d0,-(sp)
    ede4:	|  |  |      jsr 163a8 <trimStack>
    edea:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    edec:	|  |  '----> movea.l 36(sp),a0
    edf0:	|  |         move.l 24(a0),d0
    edf4:	|  |         move.l d0,-(sp)
    edf6:	|  |         jsr 15ffa <getTextFromAnyVar>
    edfc:	|  |         addq.l #4,sp
    edfe:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    ee02:	|  |     ,-- bne.s ee0a <sayCore+0x84>
    ee04:	|  |     |   moveq #1,d0
    ee06:	|  +-----|-- bra.w eede <sayCore+0x158>
			trimStack (&fun -> stack);
    ee0a:	|  |     '-> moveq #24,d0
    ee0c:	|  |         add.l 36(sp),d0
    ee10:	|  |         move.l d0,-(sp)
    ee12:	|  |         jsr 163a8 <trimStack>
    ee18:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee1a:	|  |         movea.l 36(sp),a0
    ee1e:	|  |         move.l 24(a0),d0
    ee22:	|  |         move.l d0,-(sp)
    ee24:	|  |         pea 7 <_start+0x7>
    ee28:	|  |         lea 16(sp),a0
    ee2c:	|  |         move.l a0,-(sp)
    ee2e:	|  |         jsr 15a24 <getValueType>
    ee34:	|  |         lea 12(sp),sp
    ee38:	|  |         tst.w d0
    ee3a:	|  |     ,-- bne.s ee42 <sayCore+0xbc>
    ee3c:	|  |     |   moveq #1,d0
    ee3e:	|  +-----|-- bra.w eede <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee42:	|  |     '-> movea.l 36(sp),a0
    ee46:	|  |         move.l 24(a0),d0
    ee4a:	|  |         move.l d0,-(sp)
    ee4c:	|  |         pea 7 <_start+0x7>
    ee50:	|  |         lea 16(sp),a0
    ee54:	|  |         move.l a0,-(sp)
    ee56:	|  |         jsr 15a24 <getValueType>
    ee5c:	|  |         lea 12(sp),sp
    ee60:	|  |         tst.w d0
    ee62:	|  |     ,-- bne.s ee68 <sayCore+0xe2>
    ee64:	|  |     |   moveq #1,d0
    ee66:	|  +-----|-- bra.s eede <sayCore+0x158>
			trimStack (&fun -> stack);
    ee68:	|  |     '-> moveq #24,d0
    ee6a:	|  |         add.l 36(sp),d0
    ee6e:	|  |         move.l d0,-(sp)
    ee70:	|  |         jsr 163a8 <trimStack>
    ee76:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    ee78:	|  |         movea.w 6(sp),a0
    ee7c:	|  |         move.l 12(sp),d1
    ee80:	|  |         move.l 8(sp),d0
    ee84:	|  |         move.l a0,-(sp)
    ee86:	|  |         move.l d1,-(sp)
    ee88:	|  |         move.l d0,-(sp)
    ee8a:	|  |         move.l 36(sp),-(sp)
    ee8e:	|  |         jsr 4738 <wrapSpeech>
    ee94:	|  |         lea 16(sp),sp
    ee98:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    ee9c:	|  |         movea.l 36(sp),a0
    eea0:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    eea6:	|  |         movea.l 36(sp),a0
    eeaa:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    eeb0:	|  |         move.l 24(sp),16(sp)
    eeb6:	|  |         move.l 1e81c <SysBase>,d0
    eebc:	|  |         movea.l d0,a6
    eebe:	|  |         movea.l 16(sp),a1
    eec2:	|  |         jsr -690(a6)
			newText = NULL;
    eec6:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    eeca:	|  |         moveq #0,d0
    eecc:	|  +-------- bra.s eede <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    eece:	'--|-------> pea 1ac0f <PutChar+0x1c69>
    eed4:	   |         jsr 18504 <KPrintF>
    eeda:	   |         addq.l #4,sp
	return BR_ERROR;
    eedc:	   |         moveq #1,d0
}
    eede:	   '-------> movea.l (sp)+,a6
    eee0:	             lea 24(sp),sp
    eee4:	             rts

0000eee6 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    eee6:	pea 1 <_start+0x1>
    eeea:	move.l 12(sp),-(sp)
    eeee:	move.l 12(sp),-(sp)
    eef2:	jsr ed86 <sayCore>
    eef8:	lea 12(sp),sp
}
    eefc:	rts

0000eefe <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    eefe:	clr.l -(sp)
    ef00:	move.l 12(sp),-(sp)
    ef04:	move.l 12(sp),-(sp)
    ef08:	jsr ed86 <sayCore>
    ef0e:	lea 12(sp),sp
}
    ef12:	rts

0000ef14 <builtIn_freeze>:

builtIn(freeze)
{
	KPrintF("running freeze\n");
    ef14:	pea 1ac3d <PutChar+0x1c97>
    ef1a:	jsr 18504 <KPrintF>
    ef20:	addq.l #4,sp
	UNUSEDALL
	freeze ();
    ef22:	jsr 163f0 <freeze>
	freezeSubs (); 
    ef28:	jsr 6598 <freezeSubs>
	fun -> freezerLevel = 0;
    ef2e:	movea.l 8(sp),a0
    ef32:	clr.b 56(a0)
	return BR_CONTINUE;
    ef36:	moveq #2,d0
}
    ef38:	rts

0000ef3a <builtIn_unfreeze>:

builtIn(unfreeze)
{
	KPrintF("running unfreeze\n");
    ef3a:	pea 1ac4d <PutChar+0x1ca7>
    ef40:	jsr 18504 <KPrintF>
    ef46:	addq.l #4,sp
	UNUSEDALL
	unfreeze ();
    ef48:	jsr 165f4 <unfreeze>
	unfreezeSubs (); 
    ef4e:	jsr 7dbe <unfreezeSubs>
	return BR_CONTINUE;
    ef54:	moveq #2,d0
}
    ef56:	rts

0000ef58 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	//KPrintF("running howfrozen\n");
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    ef58:	jsr 165d0 <howFrozen>
    ef5e:	move.l d0,d1
    ef60:	moveq #28,d0
    ef62:	add.l 8(sp),d0
    ef66:	move.l d1,-(sp)
    ef68:	pea 1 <_start+0x1>
    ef6c:	move.l d0,-(sp)
    ef6e:	jsr 16316 <setVariable>
    ef74:	lea 12(sp),sp
	return BR_CONTINUE; 
    ef78:	moveq #2,d0
}
    ef7a:	rts

0000ef7c <builtIn_setCursor>:

builtIn(setCursor)
{
    ef7c:	subq.l #4,sp
	KPrintF("running setCursor\n");
    ef7e:	pea 1ac5f <PutChar+0x1cb9>
    ef84:	jsr 18504 <KPrintF>
    ef8a:	addq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    ef8c:	movea.l 12(sp),a0
    ef90:	move.l 24(a0),d0
    ef94:	move.l d0,-(sp)
    ef96:	jsr 15efc <getAnimationFromVar>
    ef9c:	addq.l #4,sp
    ef9e:	move.l d0,(sp)
	pickAnimCursor (aa);
    efa0:	move.l (sp),-(sp)
    efa2:	jsr d6c <pickAnimCursor>
    efa8:	addq.l #4,sp
	trimStack (&fun -> stack);
    efaa:	moveq #24,d0
    efac:	add.l 12(sp),d0
    efb0:	move.l d0,-(sp)
    efb2:	jsr 163a8 <trimStack>
    efb8:	addq.l #4,sp
	return BR_CONTINUE;
    efba:	moveq #2,d0
}
    efbc:	addq.l #4,sp
    efbe:	rts

0000efc0 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	KPrintF("running getMouseX\n");
    efc0:	pea 1ac72 <PutChar+0x1ccc>
    efc6:	jsr 18504 <KPrintF>
    efcc:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    efce:	move.l 1e7d6 <input+0xa>,d1
    efd4:	move.l 1e8d6 <cameraX>,d0
    efda:	add.l d0,d1
    efdc:	moveq #28,d0
    efde:	add.l 8(sp),d0
    efe2:	move.l d1,-(sp)
    efe4:	pea 1 <_start+0x1>
    efe8:	move.l d0,-(sp)
    efea:	jsr 16316 <setVariable>
    eff0:	lea 12(sp),sp
	return BR_CONTINUE;
    eff4:	moveq #2,d0
}
    eff6:	rts

0000eff8 <builtIn_getMouseY>:

builtIn(getMouseY)
{
	KPrintF("running getMouseY\n");
    eff8:	pea 1ac85 <PutChar+0x1cdf>
    effe:	jsr 18504 <KPrintF>
    f004:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    f006:	move.l 1e7da <input+0xe>,d1
    f00c:	move.l 1e8da <cameraY>,d0
    f012:	add.l d0,d1
    f014:	moveq #28,d0
    f016:	add.l 8(sp),d0
    f01a:	move.l d1,-(sp)
    f01c:	pea 1 <_start+0x1>
    f020:	move.l d0,-(sp)
    f022:	jsr 16316 <setVariable>
    f028:	lea 12(sp),sp
	return BR_CONTINUE;
    f02c:	moveq #2,d0
}
    f02e:	rts

0000f030 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	KPrintF("running getMouseScreenX\n");
    f030:	pea 1ac98 <PutChar+0x1cf2>
    f036:	jsr 18504 <KPrintF>
    f03c:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    f03e:	move.l 1e7d6 <input+0xa>,d0
    f044:	move.l d0,-(sp)
    f046:	jsr 18936 <__floatsisf>
    f04c:	addq.l #4,sp
    f04e:	move.l d0,d1
    f050:	move.l 1e1a2 <cameraZoom>,d0
    f056:	move.l d0,-(sp)
    f058:	move.l d1,-(sp)
    f05a:	jsr 189e8 <__mulsf3>
    f060:	addq.l #8,sp
    f062:	move.l d0,-(sp)
    f064:	jsr 188ce <__fixsfsi>
    f06a:	addq.l #4,sp
    f06c:	move.l d0,d1
    f06e:	moveq #28,d0
    f070:	add.l 8(sp),d0
    f074:	move.l d1,-(sp)
    f076:	pea 1 <_start+0x1>
    f07a:	move.l d0,-(sp)
    f07c:	jsr 16316 <setVariable>
    f082:	lea 12(sp),sp
	return BR_CONTINUE;
    f086:	moveq #2,d0
}
    f088:	rts

0000f08a <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	KPrintF("running getMouseScreenY\n");
    f08a:	pea 1acb1 <PutChar+0x1d0b>
    f090:	jsr 18504 <KPrintF>
    f096:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    f098:	move.l 1e7da <input+0xe>,d0
    f09e:	move.l d0,-(sp)
    f0a0:	jsr 18936 <__floatsisf>
    f0a6:	addq.l #4,sp
    f0a8:	move.l d0,d1
    f0aa:	move.l 1e1a2 <cameraZoom>,d0
    f0b0:	move.l d0,-(sp)
    f0b2:	move.l d1,-(sp)
    f0b4:	jsr 189e8 <__mulsf3>
    f0ba:	addq.l #8,sp
    f0bc:	move.l d0,-(sp)
    f0be:	jsr 188ce <__fixsfsi>
    f0c4:	addq.l #4,sp
    f0c6:	move.l d0,d1
    f0c8:	moveq #28,d0
    f0ca:	add.l 8(sp),d0
    f0ce:	move.l d1,-(sp)
    f0d0:	pea 1 <_start+0x1>
    f0d4:	move.l d0,-(sp)
    f0d6:	jsr 16316 <setVariable>
    f0dc:	lea 12(sp),sp
	return BR_CONTINUE;
    f0e0:	moveq #2,d0
}
    f0e2:	rts

0000f0e4 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	KPrintF("running getStatusText\n");
    f0e4:	pea 1acca <PutChar+0x1d24>
    f0ea:	jsr 18504 <KPrintF>
    f0f0:	addq.l #4,sp
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    f0f2:	jsr 8ed0 <statusBarText>
    f0f8:	move.l d0,d1
    f0fa:	moveq #28,d0
    f0fc:	add.l 8(sp),d0
    f100:	move.l d1,-(sp)
    f102:	move.l d0,-(sp)
    f104:	jsr 15c46 <makeTextVar>
    f10a:	addq.l #8,sp
	return BR_CONTINUE;
    f10c:	moveq #2,d0
}
    f10e:	rts

0000f110 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    f110:	       lea -20(sp),sp
    f114:	       move.l a6,-(sp)
	KPrintF("running getMatchingFiles\n");
    f116:	       pea 1ace1 <PutChar+0x1d3b>
    f11c:	       jsr 18504 <KPrintF>
    f122:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f124:	       movea.l 32(sp),a0
    f128:	       move.l 24(a0),d0
    f12c:	       move.l d0,-(sp)
    f12e:	       jsr 15ffa <getTextFromAnyVar>
    f134:	       addq.l #4,sp
    f136:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    f13a:	   ,-- bne.s f142 <builtIn_getMatchingFiles+0x32>
    f13c:	   |   moveq #1,d0
    f13e:	,--|-- bra.w f204 <builtIn_getMatchingFiles+0xf4>
	trimStack (&fun -> stack);
    f142:	|  '-> moveq #24,d0
    f144:	|      add.l 32(sp),d0
    f148:	|      move.l d0,-(sp)
    f14a:	|      jsr 163a8 <trimStack>
    f150:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    f152:	|      moveq #28,d0
    f154:	|      add.l 32(sp),d0
    f158:	|      move.l d0,-(sp)
    f15a:	|      jsr 15c72 <unlinkVar>
    f160:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    f162:	|      movea.l 32(sp),a0
    f166:	|      moveq #6,d0
    f168:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    f16c:	|      moveq #12,d0
    f16e:	|      move.l d0,16(sp)
    f172:	|      clr.l 12(sp)
    f176:	|      move.l 1e81c <SysBase>,d0
    f17c:	|      movea.l d0,a6
    f17e:	|      move.l 16(sp),d0
    f182:	|      move.l 12(sp),d1
    f186:	|      jsr -684(a6)
    f18a:	|      move.l d0,8(sp)
    f18e:	|      move.l 8(sp),d0
    f192:	|      movea.l 32(sp),a0
    f196:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    f19a:	|      moveq #32,d0
    f19c:	|      add.l 32(sp),d0
    f1a0:	|  ,-- bne.s f1a6 <builtIn_getMatchingFiles+0x96>
    f1a2:	|  |   moveq #1,d0
    f1a4:	+--|-- bra.s f204 <builtIn_getMatchingFiles+0xf4>
	fun -> reg.varData.theStack -> first = NULL;
    f1a6:	|  '-> movea.l 32(sp),a0
    f1aa:	|      movea.l 32(a0),a0
    f1ae:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    f1b0:	|      movea.l 32(sp),a0
    f1b4:	|      movea.l 32(a0),a0
    f1b8:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    f1bc:	|      movea.l 32(sp),a0
    f1c0:	|      movea.l 32(a0),a0
    f1c4:	|      moveq #1,d0
    f1c6:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    f1ca:	|      movea.l 32(sp),a0
    f1ce:	|      move.l 32(a0),d0
    f1d2:	|      move.l 20(sp),-(sp)
    f1d6:	|      move.l d0,-(sp)
    f1d8:	|      jsr 157e0 <getSavedGamesStack>
    f1de:	|      addq.l #8,sp
    f1e0:	|      tst.w d0
    f1e2:	|  ,-- bne.s f1e8 <builtIn_getMatchingFiles+0xd8>
    f1e4:	|  |   moveq #1,d0
    f1e6:	+--|-- bra.s f204 <builtIn_getMatchingFiles+0xf4>
	FreeVec(newText);
    f1e8:	|  '-> move.l 20(sp),4(sp)
    f1ee:	|      move.l 1e81c <SysBase>,d0
    f1f4:	|      movea.l d0,a6
    f1f6:	|      movea.l 4(sp),a1
    f1fa:	|      jsr -690(a6)
	newText = NULL;
    f1fe:	|      clr.l 20(sp)
	return BR_CONTINUE;
    f202:	|      moveq #2,d0
}
    f204:	'----> movea.l (sp)+,a6
    f206:	       lea 20(sp),sp
    f20a:	       rts

0000f20c <builtIn_saveGame>:

builtIn(saveGame)
{
    f20c:	       lea -12(sp),sp
    f210:	       move.l a6,-(sp)
	KPrintF("running saveGame\n");
    f212:	       pea 1acfb <PutChar+0x1d55>
    f218:	       jsr 18504 <KPrintF>
    f21e:	       addq.l #4,sp

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    f220:	       movea.l 24(sp),a0
    f224:	       move.l 24(a0),d0
    f228:	       move.l d0,-(sp)
    f22a:	       jsr 15ffa <getTextFromAnyVar>
    f230:	       addq.l #4,sp
    f232:	       move.l d0,1e7e6 <loadNow>
    trimStack(&fun->stack);
    f238:	       moveq #24,d0
    f23a:	       add.l 24(sp),d0
    f23e:	       move.l d0,-(sp)
    f240:	       jsr 163a8 <trimStack>
    f246:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    f248:	       move.l 1e7e6 <loadNow>,d0
    f24e:	       move.l d0,-(sp)
    f250:	       jsr 2fe <encodeFilename>
    f256:	       addq.l #4,sp
    f258:	       move.l d0,12(sp)
    FreeVec(loadNow);
    f25c:	       move.l 1e7e6 <loadNow>,8(sp)
    f264:	       move.l 1e81c <SysBase>,d0
    f26a:	       movea.l d0,a6
    f26c:	       movea.l 8(sp),a1
    f270:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    f274:	       move.l 12(sp),-(sp)
    f278:	       jsr ecf8 <failSecurityCheck>
    f27e:	       addq.l #4,sp
    f280:	       tst.w d0
    f282:	   ,-- beq.s f288 <builtIn_saveGame+0x7c>
    f284:	   |   moveq #1,d0
    f286:	,--|-- bra.s f2d8 <builtIn_saveGame+0xcc>

    loadNow = joinStrings(":", aaaaa);
    f288:	|  '-> move.l 12(sp),-(sp)
    f28c:	|      pea 1ad0d <PutChar+0x1d67>
    f292:	|      jsr 14f50 <joinStrings>
    f298:	|      addq.l #8,sp
    f29a:	|      move.l d0,1e7e6 <loadNow>
    FreeVec(aaaaa);
    f2a0:	|      move.l 12(sp),4(sp)
    f2a6:	|      move.l 1e81c <SysBase>,d0
    f2ac:	|      movea.l d0,a6
    f2ae:	|      movea.l 4(sp),a1
    f2b2:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    f2b6:	|      moveq #28,d0
    f2b8:	|      add.l 24(sp),d0
    f2bc:	|      clr.l -(sp)
    f2be:	|      pea 1 <_start+0x1>
    f2c2:	|      move.l d0,-(sp)
    f2c4:	|      jsr 16316 <setVariable>
    f2ca:	|      lea 12(sp),sp
    saverFunc = fun;
    f2ce:	|      move.l 24(sp),1e8e6 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    f2d6:	|      moveq #0,d0
}
    f2d8:	'----> movea.l (sp)+,a6
    f2da:	       lea 12(sp),sp
    f2de:	       rts

0000f2e0 <builtIn_fileExists>:

builtIn(fileExists)
{
    f2e0:	       lea -36(sp),sp
    f2e4:	       move.l a6,-(sp)
    f2e6:	       move.l d2,-(sp)
	KPrintF("running fileExists\n");
    f2e8:	       pea 1ad0f <PutChar+0x1d69>
    f2ee:	       jsr 18504 <KPrintF>
    f2f4:	       addq.l #4,sp
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    f2f6:	       movea.l 52(sp),a0
    f2fa:	       move.l 24(a0),d0
    f2fe:	       move.l d0,-(sp)
    f300:	       jsr 15ffa <getTextFromAnyVar>
    f306:	       addq.l #4,sp
    f308:	       move.l d0,1e7e6 <loadNow>
    trimStack(&fun->stack);
    f30e:	       moveq #24,d0
    f310:	       add.l 52(sp),d0
    f314:	       move.l d0,-(sp)
    f316:	       jsr 163a8 <trimStack>
    f31c:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    f31e:	       move.l 1e7e6 <loadNow>,d0
    f324:	       move.l d0,-(sp)
    f326:	       jsr 2fe <encodeFilename>
    f32c:	       addq.l #4,sp
    f32e:	       move.l d0,40(sp)
    FreeVec(loadNow);
    f332:	       move.l 1e7e6 <loadNow>,36(sp)
    f33a:	       move.l 1e81c <SysBase>,d0
    f340:	       movea.l d0,a6
    f342:	       movea.l 36(sp),a1
    f346:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    f34a:	       move.l 40(sp),-(sp)
    f34e:	       jsr ecf8 <failSecurityCheck>
    f354:	       addq.l #4,sp
    f356:	       tst.w d0
    f358:	   ,-- beq.s f360 <builtIn_fileExists+0x80>
    f35a:	   |   moveq #1,d0
    f35c:	,--|-- bra.w f400 <builtIn_fileExists+0x120>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    f360:	|  '-> move.l 40(sp),32(sp)
    f366:	|      move.l #1005,28(sp)
    f36e:	|      move.l 1e824 <DOSBase>,d0
    f374:	|      movea.l d0,a6
    f376:	|      move.l 32(sp),d1
    f37a:	|      move.l 28(sp),d2
    f37e:	|      jsr -30(a6)
    f382:	|      move.l d0,24(sp)
    f386:	|      move.l 24(sp),d0
    f38a:	|      move.l d0,20(sp)
    if (!fp) {        
    f38e:	|  ,-- bne.s f39e <builtIn_fileExists+0xbe>
        KPrintF("Can't get current directory.\n");      
    f390:	|  |   pea 1ad23 <PutChar+0x1d7d>
    f396:	|  |   jsr 18504 <KPrintF>
    f39c:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    f39e:	|  '-> tst.l 20(sp)
    f3a2:	|      sne d0
    f3a4:	|      neg.b d0
    f3a6:	|      moveq #0,d1
    f3a8:	|      move.b d0,d1
    f3aa:	|      moveq #28,d0
    f3ac:	|      add.l 52(sp),d0
    f3b0:	|      move.l d1,-(sp)
    f3b2:	|      pea 1 <_start+0x1>
    f3b6:	|      move.l d0,-(sp)
    f3b8:	|      jsr 16316 <setVariable>
    f3be:	|      lea 12(sp),sp
    if (fp) Close(fp);
    f3c2:	|      tst.l 20(sp)
    f3c6:	|  ,-- beq.s f3e2 <builtIn_fileExists+0x102>
    f3c8:	|  |   move.l 20(sp),16(sp)
    f3ce:	|  |   move.l 1e824 <DOSBase>,d0
    f3d4:	|  |   movea.l d0,a6
    f3d6:	|  |   move.l 16(sp),d1
    f3da:	|  |   jsr -36(a6)
    f3de:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    f3e2:	|  '-> move.l 40(sp),8(sp)
    f3e8:	|      move.l 1e81c <SysBase>,d0
    f3ee:	|      movea.l d0,a6
    f3f0:	|      movea.l 8(sp),a1
    f3f4:	|      jsr -690(a6)
    loadNow = NULL;
    f3f8:	|      clr.l 1e7e6 <loadNow>
    return BR_CONTINUE;
    f3fe:	|      moveq #2,d0
}
    f400:	'----> move.l (sp)+,d2
    f402:	       movea.l (sp)+,a6
    f404:	       lea 36(sp),sp
    f408:	       rts

0000f40a <builtIn_loadGame>:

builtIn(loadGame)
{
    f40a:	       lea -36(sp),sp
    f40e:	       move.l a6,-(sp)
    f410:	       move.l d2,-(sp)
	KPrintF("running loadGame\n");
    f412:	       pea 1ad41 <PutChar+0x1d9b>
    f418:	       jsr 18504 <KPrintF>
    f41e:	       addq.l #4,sp
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    f420:	       movea.l 52(sp),a0
    f424:	       move.l 24(a0),d0
    f428:	       move.l d0,-(sp)
    f42a:	       jsr 15ffa <getTextFromAnyVar>
    f430:	       addq.l #4,sp
    f432:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    f436:	       moveq #24,d0
    f438:	       add.l 52(sp),d0
    f43c:	       move.l d0,-(sp)
    f43e:	       jsr 163a8 <trimStack>
    f444:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    f446:	       move.l 40(sp),-(sp)
    f44a:	       jsr 2fe <encodeFilename>
    f450:	       addq.l #4,sp
    f452:	       move.l d0,1e7e6 <loadNow>
    FreeVec(aaaaa);
    f458:	       move.l 40(sp),36(sp)
    f45e:	       move.l 1e81c <SysBase>,d0
    f464:	       movea.l d0,a6
    f466:	       movea.l 36(sp),a1
    f46a:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    f46e:	       move.l 1e7e6 <loadNow>,d0
    f474:	       move.l d0,-(sp)
    f476:	       jsr ecf8 <failSecurityCheck>
    f47c:	       addq.l #4,sp
    f47e:	       tst.w d0
    f480:	   ,-- beq.s f486 <builtIn_loadGame+0x7c>
    f482:	   |   moveq #1,d0
    f484:	,--|-- bra.s f4f6 <builtIn_loadGame+0xec>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    f486:	|  '-> move.l 1e7e6 <loadNow>,32(sp)
    f48e:	|      move.l #1005,28(sp)
    f496:	|      move.l 1e824 <DOSBase>,d0
    f49c:	|      movea.l d0,a6
    f49e:	|      move.l 32(sp),d1
    f4a2:	|      move.l 28(sp),d2
    f4a6:	|      jsr -30(a6)
    f4aa:	|      move.l d0,24(sp)
    f4ae:	|      move.l 24(sp),d0
    f4b2:	|      move.l d0,20(sp)
    if (fp) {
    f4b6:	|  ,-- beq.s f4d6 <builtIn_loadGame+0xcc>
        Close(fp);
    f4b8:	|  |   move.l 20(sp),12(sp)
    f4be:	|  |   move.l 1e824 <DOSBase>,d0
    f4c4:	|  |   movea.l d0,a6
    f4c6:	|  |   move.l 12(sp),d1
    f4ca:	|  |   jsr -36(a6)
    f4ce:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    f4d2:	|  |   moveq #0,d0
    f4d4:	+--|-- bra.s f4f6 <builtIn_loadGame+0xec>
    }
    FreeVec(loadNow);
    f4d6:	|  '-> move.l 1e7e6 <loadNow>,16(sp)
    f4de:	|      move.l 1e81c <SysBase>,d0
    f4e4:	|      movea.l d0,a6
    f4e6:	|      movea.l 16(sp),a1
    f4ea:	|      jsr -690(a6)
    loadNow = NULL;
    f4ee:	|      clr.l 1e7e6 <loadNow>
    return BR_CONTINUE;
    f4f4:	|      moveq #2,d0
}
    f4f6:	'----> move.l (sp)+,d2
    f4f8:	       movea.l (sp)+,a6
    f4fa:	       lea 36(sp),sp
    f4fe:	       rts

0000f500 <builtIn_blankScreen>:
#pragma mark -
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	KPrintF("running blankScreen\n");
    f500:	pea 1ad53 <PutChar+0x1dad>
    f506:	jsr 18504 <KPrintF>
    f50c:	addq.l #4,sp
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    f50e:	move.l 1e8bc <sceneHeight>,d0
    f514:	move.l d0,d1
    f516:	move.l 1e8b8 <sceneWidth>,d0
    f51c:	move.l d1,-(sp)
    f51e:	move.l d0,-(sp)
    f520:	clr.l -(sp)
    f522:	clr.l -(sp)
    f524:	jsr dbe2 <blankScreen>
    f52a:	lea 16(sp),sp
	return BR_CONTINUE;
    f52e:	moveq #2,d0
}
    f530:	rts

0000f532 <builtIn_blankArea>:

builtIn(blankArea)
{
    f532:	       lea -16(sp),sp
	KPrintF("running blankArea\n");
    f536:	       pea 1ad68 <PutChar+0x1dc2>
    f53c:	       jsr 18504 <KPrintF>
    f542:	       addq.l #4,sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f544:	       movea.l 24(sp),a0
    f548:	       move.l 24(a0),d0
    f54c:	       move.l d0,-(sp)
    f54e:	       pea 1 <_start+0x1>
    f552:	       lea 8(sp),a0
    f556:	       move.l a0,-(sp)
    f558:	       jsr 15a24 <getValueType>
    f55e:	       lea 12(sp),sp
    f562:	       tst.w d0
    f564:	   ,-- bne.s f56c <builtIn_blankArea+0x3a>
    f566:	   |   moveq #1,d0
    f568:	,--|-- bra.w f642 <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f56c:	|  '-> moveq #24,d0
    f56e:	|      add.l 24(sp),d0
    f572:	|      move.l d0,-(sp)
    f574:	|      jsr 163a8 <trimStack>
    f57a:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f57c:	|      movea.l 24(sp),a0
    f580:	|      move.l 24(a0),d0
    f584:	|      move.l d0,-(sp)
    f586:	|      pea 1 <_start+0x1>
    f58a:	|      lea 12(sp),a0
    f58e:	|      move.l a0,-(sp)
    f590:	|      jsr 15a24 <getValueType>
    f596:	|      lea 12(sp),sp
    f59a:	|      tst.w d0
    f59c:	|  ,-- bne.s f5a4 <builtIn_blankArea+0x72>
    f59e:	|  |   moveq #1,d0
    f5a0:	+--|-- bra.w f642 <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f5a4:	|  '-> moveq #24,d0
    f5a6:	|      add.l 24(sp),d0
    f5aa:	|      move.l d0,-(sp)
    f5ac:	|      jsr 163a8 <trimStack>
    f5b2:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f5b4:	|      movea.l 24(sp),a0
    f5b8:	|      move.l 24(a0),d0
    f5bc:	|      move.l d0,-(sp)
    f5be:	|      pea 1 <_start+0x1>
    f5c2:	|      moveq #16,d0
    f5c4:	|      add.l sp,d0
    f5c6:	|      move.l d0,-(sp)
    f5c8:	|      jsr 15a24 <getValueType>
    f5ce:	|      lea 12(sp),sp
    f5d2:	|      tst.w d0
    f5d4:	|  ,-- bne.s f5da <builtIn_blankArea+0xa8>
    f5d6:	|  |   moveq #1,d0
    f5d8:	+--|-- bra.s f642 <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f5da:	|  '-> moveq #24,d0
    f5dc:	|      add.l 24(sp),d0
    f5e0:	|      move.l d0,-(sp)
    f5e2:	|      jsr 163a8 <trimStack>
    f5e8:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f5ea:	|      movea.l 24(sp),a0
    f5ee:	|      move.l 24(a0),d0
    f5f2:	|      move.l d0,-(sp)
    f5f4:	|      pea 1 <_start+0x1>
    f5f8:	|      moveq #20,d0
    f5fa:	|      add.l sp,d0
    f5fc:	|      move.l d0,-(sp)
    f5fe:	|      jsr 15a24 <getValueType>
    f604:	|      lea 12(sp),sp
    f608:	|      tst.w d0
    f60a:	|  ,-- bne.s f610 <builtIn_blankArea+0xde>
    f60c:	|  |   moveq #1,d0
    f60e:	+--|-- bra.s f642 <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f610:	|  '-> moveq #24,d0
    f612:	|      add.l 24(sp),d0
    f616:	|      move.l d0,-(sp)
    f618:	|      jsr 163a8 <trimStack>
    f61e:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    f620:	|      movea.l (sp),a1
    f622:	|      movea.l 4(sp),a0
    f626:	|      move.l 8(sp),d1
    f62a:	|      move.l 12(sp),d0
    f62e:	|      move.l a1,-(sp)
    f630:	|      move.l a0,-(sp)
    f632:	|      move.l d1,-(sp)
    f634:	|      move.l d0,-(sp)
    f636:	|      jsr dbe2 <blankScreen>
    f63c:	|      lea 16(sp),sp
	return BR_CONTINUE;
    f640:	|      moveq #2,d0
}
    f642:	'----> lea 16(sp),sp
    f646:	       rts

0000f648 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	KPrintF("running darkBackground\n");
    f648:	pea 1ad7b <PutChar+0x1dd5>
    f64e:	jsr 18504 <KPrintF>
    f654:	addq.l #4,sp
	UNUSEDALL
	darkScreen ();
    f656:	jsr dc00 <darkScreen>
	return BR_CONTINUE;
    f65c:	moveq #2,d0
}
    f65e:	rts

0000f660 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    f660:	       lea -12(sp),sp
	KPrintF("running addOverlay\n");
    f664:	       pea 1ad93 <PutChar+0x1ded>
    f66a:	       jsr 18504 <KPrintF>
    f670:	       addq.l #4,sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f672:	       movea.l 20(sp),a0
    f676:	       move.l 24(a0),d0
    f67a:	       move.l d0,-(sp)
    f67c:	       pea 1 <_start+0x1>
    f680:	       lea 8(sp),a0
    f684:	       move.l a0,-(sp)
    f686:	       jsr 15a24 <getValueType>
    f68c:	       lea 12(sp),sp
    f690:	       tst.w d0
    f692:	   ,-- bne.s f69a <builtIn_addOverlay+0x3a>
    f694:	   |   moveq #1,d0
    f696:	,--|-- bra.w f732 <builtIn_addOverlay+0xd2>
	trimStack (&fun -> stack);
    f69a:	|  '-> moveq #24,d0
    f69c:	|      add.l 20(sp),d0
    f6a0:	|      move.l d0,-(sp)
    f6a2:	|      jsr 163a8 <trimStack>
    f6a8:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f6aa:	|      movea.l 20(sp),a0
    f6ae:	|      move.l 24(a0),d0
    f6b2:	|      move.l d0,-(sp)
    f6b4:	|      pea 1 <_start+0x1>
    f6b8:	|      moveq #12,d0
    f6ba:	|      add.l sp,d0
    f6bc:	|      move.l d0,-(sp)
    f6be:	|      jsr 15a24 <getValueType>
    f6c4:	|      lea 12(sp),sp
    f6c8:	|      tst.w d0
    f6ca:	|  ,-- bne.s f6d0 <builtIn_addOverlay+0x70>
    f6cc:	|  |   moveq #1,d0
    f6ce:	+--|-- bra.s f732 <builtIn_addOverlay+0xd2>
	trimStack (&fun -> stack);
    f6d0:	|  '-> moveq #24,d0
    f6d2:	|      add.l 20(sp),d0
    f6d6:	|      move.l d0,-(sp)
    f6d8:	|      jsr 163a8 <trimStack>
    f6de:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f6e0:	|      movea.l 20(sp),a0
    f6e4:	|      move.l 24(a0),d0
    f6e8:	|      move.l d0,-(sp)
    f6ea:	|      pea 5 <_start+0x5>
    f6ee:	|      moveq #16,d0
    f6f0:	|      add.l sp,d0
    f6f2:	|      move.l d0,-(sp)
    f6f4:	|      jsr 15a24 <getValueType>
    f6fa:	|      lea 12(sp),sp
    f6fe:	|      tst.w d0
    f700:	|  ,-- bne.s f706 <builtIn_addOverlay+0xa6>
    f702:	|  |   moveq #1,d0
    f704:	+--|-- bra.s f732 <builtIn_addOverlay+0xd2>
	trimStack (&fun -> stack);
    f706:	|  '-> moveq #24,d0
    f708:	|      add.l 20(sp),d0
    f70c:	|      move.l d0,-(sp)
    f70e:	|      jsr 163a8 <trimStack>
    f714:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    f716:	|      movea.l (sp),a0
    f718:	|      move.l 4(sp),d1
    f71c:	|      move.l 8(sp),d0
    f720:	|      move.l a0,-(sp)
    f722:	|      move.l d1,-(sp)
    f724:	|      move.l d0,-(sp)
    f726:	|      jsr dd1e <loadBackDrop>
    f72c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f730:	|      moveq #2,d0
}
    f732:	'----> lea 12(sp),sp
    f736:	       rts

0000f738 <builtIn_addZBufferLayer>:

//addZBufferLayer( xPos, yPos, width, height )
builtIn(addZBufferLayer)
{
    f738:	       lea -20(sp),sp
    f73c:	       move.l d2,-(sp)
	KPrintF("running addZBufferLayer\n");
    f73e:	       pea 1ada7 <PutChar+0x1e01>
    f744:	       jsr 18504 <KPrintF>
    f74a:	       addq.l #4,sp
	UNUSEDALL
	int xpos, ypos, width, height, yz;
	if (! getValueType(&yz, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f74c:	       movea.l 32(sp),a0
    f750:	       move.l 24(a0),d0
    f754:	       move.l d0,-(sp)
    f756:	       pea 1 <_start+0x1>
    f75a:	       lea 12(sp),a0
    f75e:	       move.l a0,-(sp)
    f760:	       jsr 15a24 <getValueType>
    f766:	       lea 12(sp),sp
    f76a:	       tst.w d0
    f76c:	   ,-- bne.s f774 <builtIn_addZBufferLayer+0x3c>
    f76e:	   |   moveq #1,d0
    f770:	,--|-- bra.w f88a <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);
    f774:	|  '-> moveq #24,d0
    f776:	|      add.l 32(sp),d0
    f77a:	|      move.l d0,-(sp)
    f77c:	|      jsr 163a8 <trimStack>
    f782:	|      addq.l #4,sp
	if (! getValueType(&height, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f784:	|      movea.l 32(sp),a0
    f788:	|      move.l 24(a0),d0
    f78c:	|      move.l d0,-(sp)
    f78e:	|      pea 1 <_start+0x1>
    f792:	|      lea 16(sp),a0
    f796:	|      move.l a0,-(sp)
    f798:	|      jsr 15a24 <getValueType>
    f79e:	|      lea 12(sp),sp
    f7a2:	|      tst.w d0
    f7a4:	|  ,-- bne.s f7ac <builtIn_addZBufferLayer+0x74>
    f7a6:	|  |   moveq #1,d0
    f7a8:	+--|-- bra.w f88a <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);
    f7ac:	|  '-> moveq #24,d0
    f7ae:	|      add.l 32(sp),d0
    f7b2:	|      move.l d0,-(sp)
    f7b4:	|      jsr 163a8 <trimStack>
    f7ba:	|      addq.l #4,sp
	if (! getValueType(&width, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f7bc:	|      movea.l 32(sp),a0
    f7c0:	|      move.l 24(a0),d0
    f7c4:	|      move.l d0,-(sp)
    f7c6:	|      pea 1 <_start+0x1>
    f7ca:	|      lea 20(sp),a0
    f7ce:	|      move.l a0,-(sp)
    f7d0:	|      jsr 15a24 <getValueType>
    f7d6:	|      lea 12(sp),sp
    f7da:	|      tst.w d0
    f7dc:	|  ,-- bne.s f7e4 <builtIn_addZBufferLayer+0xac>
    f7de:	|  |   moveq #1,d0
    f7e0:	+--|-- bra.w f88a <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);	
    f7e4:	|  '-> moveq #24,d0
    f7e6:	|      add.l 32(sp),d0
    f7ea:	|      move.l d0,-(sp)
    f7ec:	|      jsr 163a8 <trimStack>
    f7f2:	|      addq.l #4,sp
	if (! getValueType(&ypos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f7f4:	|      movea.l 32(sp),a0
    f7f8:	|      move.l 24(a0),d0
    f7fc:	|      move.l d0,-(sp)
    f7fe:	|      pea 1 <_start+0x1>
    f802:	|      moveq #24,d0
    f804:	|      add.l sp,d0
    f806:	|      move.l d0,-(sp)
    f808:	|      jsr 15a24 <getValueType>
    f80e:	|      lea 12(sp),sp
    f812:	|      tst.w d0
    f814:	|  ,-- bne.s f81a <builtIn_addZBufferLayer+0xe2>
    f816:	|  |   moveq #1,d0
    f818:	+--|-- bra.s f88a <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);	
    f81a:	|  '-> moveq #24,d0
    f81c:	|      add.l 32(sp),d0
    f820:	|      move.l d0,-(sp)
    f822:	|      jsr 163a8 <trimStack>
    f828:	|      addq.l #4,sp
	if (! getValueType(&xpos, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f82a:	|      movea.l 32(sp),a0
    f82e:	|      move.l 24(a0),d0
    f832:	|      move.l d0,-(sp)
    f834:	|      pea 1 <_start+0x1>
    f838:	|      moveq #28,d0
    f83a:	|      add.l sp,d0
    f83c:	|      move.l d0,-(sp)
    f83e:	|      jsr 15a24 <getValueType>
    f844:	|      lea 12(sp),sp
    f848:	|      tst.w d0
    f84a:	|  ,-- bne.s f850 <builtIn_addZBufferLayer+0x118>
    f84c:	|  |   moveq #1,d0
    f84e:	+--|-- bra.s f88a <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);	
    f850:	|  '-> moveq #24,d0
    f852:	|      add.l 32(sp),d0
    f856:	|      move.l d0,-(sp)
    f858:	|      jsr 163a8 <trimStack>
    f85e:	|      addq.l #4,sp
	addZBufferLayer( xpos, ypos, width, height, yz);
    f860:	|      move.l 4(sp),d2
    f864:	|      movea.l 8(sp),a1
    f868:	|      movea.l 12(sp),a0
    f86c:	|      move.l 16(sp),d1
    f870:	|      move.l 20(sp),d0
    f874:	|      move.l d2,-(sp)
    f876:	|      move.l a1,-(sp)
    f878:	|      move.l a0,-(sp)
    f87a:	|      move.l d1,-(sp)
    f87c:	|      move.l d0,-(sp)
    f87e:	|      jsr 8eee <addZBufferLayer>
    f884:	|      lea 20(sp),sp
	return BR_CONTINUE;
    f888:	|      moveq #2,d0
}
    f88a:	'----> move.l (sp)+,d2
    f88c:	       lea 20(sp),sp
    f890:	       rts

0000f892 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    f892:	       lea -12(sp),sp
	KPrintF("running mixOverlay\n");
    f896:	       pea 1adc0 <PutChar+0x1e1a>
    f89c:	       jsr 18504 <KPrintF>
    f8a2:	       addq.l #4,sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f8a4:	       movea.l 20(sp),a0
    f8a8:	       move.l 24(a0),d0
    f8ac:	       move.l d0,-(sp)
    f8ae:	       pea 1 <_start+0x1>
    f8b2:	       lea 8(sp),a0
    f8b6:	       move.l a0,-(sp)
    f8b8:	       jsr 15a24 <getValueType>
    f8be:	       lea 12(sp),sp
    f8c2:	       tst.w d0
    f8c4:	   ,-- bne.s f8cc <builtIn_mixOverlay+0x3a>
    f8c6:	   |   moveq #1,d0
    f8c8:	,--|-- bra.w f964 <builtIn_mixOverlay+0xd2>
	trimStack (&fun -> stack);
    f8cc:	|  '-> moveq #24,d0
    f8ce:	|      add.l 20(sp),d0
    f8d2:	|      move.l d0,-(sp)
    f8d4:	|      jsr 163a8 <trimStack>
    f8da:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f8dc:	|      movea.l 20(sp),a0
    f8e0:	|      move.l 24(a0),d0
    f8e4:	|      move.l d0,-(sp)
    f8e6:	|      pea 1 <_start+0x1>
    f8ea:	|      moveq #12,d0
    f8ec:	|      add.l sp,d0
    f8ee:	|      move.l d0,-(sp)
    f8f0:	|      jsr 15a24 <getValueType>
    f8f6:	|      lea 12(sp),sp
    f8fa:	|      tst.w d0
    f8fc:	|  ,-- bne.s f902 <builtIn_mixOverlay+0x70>
    f8fe:	|  |   moveq #1,d0
    f900:	+--|-- bra.s f964 <builtIn_mixOverlay+0xd2>
	trimStack (&fun -> stack);
    f902:	|  '-> moveq #24,d0
    f904:	|      add.l 20(sp),d0
    f908:	|      move.l d0,-(sp)
    f90a:	|      jsr 163a8 <trimStack>
    f910:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f912:	|      movea.l 20(sp),a0
    f916:	|      move.l 24(a0),d0
    f91a:	|      move.l d0,-(sp)
    f91c:	|      pea 5 <_start+0x5>
    f920:	|      moveq #16,d0
    f922:	|      add.l sp,d0
    f924:	|      move.l d0,-(sp)
    f926:	|      jsr 15a24 <getValueType>
    f92c:	|      lea 12(sp),sp
    f930:	|      tst.w d0
    f932:	|  ,-- bne.s f938 <builtIn_mixOverlay+0xa6>
    f934:	|  |   moveq #1,d0
    f936:	+--|-- bra.s f964 <builtIn_mixOverlay+0xd2>
	trimStack (&fun -> stack);
    f938:	|  '-> moveq #24,d0
    f93a:	|      add.l 20(sp),d0
    f93e:	|      move.l d0,-(sp)
    f940:	|      jsr 163a8 <trimStack>
    f946:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    f948:	|      movea.l (sp),a0
    f94a:	|      move.l 4(sp),d1
    f94e:	|      move.l 8(sp),d0
    f952:	|      move.l a0,-(sp)
    f954:	|      move.l d1,-(sp)
    f956:	|      move.l d0,-(sp)
    f958:	|      jsr dd94 <mixBackDrop>
    f95e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f962:	|      moveq #2,d0
}
    f964:	'----> lea 12(sp),sp
    f968:	       rts

0000f96a <builtIn_pasteImage>:

builtIn(pasteImage)
{
    f96a:	       lea -12(sp),sp
	KPrintF("running pasteImage\n");
    f96e:	       pea 1add4 <PutChar+0x1e2e>
    f974:	       jsr 18504 <KPrintF>
    f97a:	       addq.l #4,sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f97c:	       movea.l 20(sp),a0
    f980:	       move.l 24(a0),d0
    f984:	       move.l d0,-(sp)
    f986:	       pea 1 <_start+0x1>
    f98a:	       lea 8(sp),a0
    f98e:	       move.l a0,-(sp)
    f990:	       jsr 15a24 <getValueType>
    f996:	       lea 12(sp),sp
    f99a:	       tst.w d0
    f99c:	   ,-- bne.s f9a4 <builtIn_pasteImage+0x3a>
    f99e:	   |   moveq #1,d0
    f9a0:	,--|-- bra.w fa34 <builtIn_pasteImage+0xca>
	trimStack (&fun -> stack);
    f9a4:	|  '-> moveq #24,d0
    f9a6:	|      add.l 20(sp),d0
    f9aa:	|      move.l d0,-(sp)
    f9ac:	|      jsr 163a8 <trimStack>
    f9b2:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f9b4:	|      movea.l 20(sp),a0
    f9b8:	|      move.l 24(a0),d0
    f9bc:	|      move.l d0,-(sp)
    f9be:	|      pea 1 <_start+0x1>
    f9c2:	|      moveq #12,d0
    f9c4:	|      add.l sp,d0
    f9c6:	|      move.l d0,-(sp)
    f9c8:	|      jsr 15a24 <getValueType>
    f9ce:	|      lea 12(sp),sp
    f9d2:	|      tst.w d0
    f9d4:	|  ,-- bne.s f9da <builtIn_pasteImage+0x70>
    f9d6:	|  |   moveq #1,d0
    f9d8:	+--|-- bra.s fa34 <builtIn_pasteImage+0xca>
	trimStack (&fun -> stack);
    f9da:	|  '-> moveq #24,d0
    f9dc:	|      add.l 20(sp),d0
    f9e0:	|      move.l d0,-(sp)
    f9e2:	|      jsr 163a8 <trimStack>
    f9e8:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    f9ea:	|      movea.l 20(sp),a0
    f9ee:	|      move.l 24(a0),d0
    f9f2:	|      move.l d0,-(sp)
    f9f4:	|      jsr 15efc <getAnimationFromVar>
    f9fa:	|      addq.l #4,sp
    f9fc:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    fa00:	|      moveq #24,d0
    fa02:	|      add.l 20(sp),d0
    fa06:	|      move.l d0,-(sp)
    fa08:	|      jsr 163a8 <trimStack>
    fa0e:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    fa10:	|      tst.l 8(sp)
    fa14:	|  ,-- bne.s fa1a <builtIn_pasteImage+0xb0>
    fa16:	|  |   moveq #2,d0
    fa18:	+--|-- bra.s fa34 <builtIn_pasteImage+0xca>

	pasteCursor (x, y, pp);
    fa1a:	|  '-> move.l (sp),d1
    fa1c:	|      move.l 4(sp),d0
    fa20:	|      move.l 8(sp),-(sp)
    fa24:	|      move.l d1,-(sp)
    fa26:	|      move.l d0,-(sp)
    fa28:	|      jsr d94 <pasteCursor>
    fa2e:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    fa32:	|      moveq #2,d0
}
    fa34:	'----> lea 12(sp),sp
    fa38:	       rts

0000fa3a <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    fa3a:	       subq.l #8,sp
	KPrintF("running setSceneDimensions\n");
    fa3c:	       pea 1ade8 <PutChar+0x1e42>
    fa42:	       jsr 18504 <KPrintF>
    fa48:	       addq.l #4,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fa4a:	       movea.l 16(sp),a0
    fa4e:	       move.l 24(a0),d0
    fa52:	       move.l d0,-(sp)
    fa54:	       pea 1 <_start+0x1>
    fa58:	       move.l sp,d0
    fa5a:	       addq.l #8,d0
    fa5c:	       move.l d0,-(sp)
    fa5e:	       jsr 15a24 <getValueType>
    fa64:	       lea 12(sp),sp
    fa68:	       tst.w d0
    fa6a:	   ,-- bne.s fa72 <builtIn_setSceneDimensions+0x38>
    fa6c:	   |   moveq #1,d0
    fa6e:	,--|-- bra.w fafa <builtIn_setSceneDimensions+0xc0>
	trimStack (&fun -> stack);
    fa72:	|  '-> moveq #24,d0
    fa74:	|      add.l 16(sp),d0
    fa78:	|      move.l d0,-(sp)
    fa7a:	|      jsr 163a8 <trimStack>
    fa80:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fa82:	|      movea.l 16(sp),a0
    fa86:	|      move.l 24(a0),d0
    fa8a:	|      move.l d0,-(sp)
    fa8c:	|      pea 1 <_start+0x1>
    fa90:	|      moveq #12,d0
    fa92:	|      add.l sp,d0
    fa94:	|      move.l d0,-(sp)
    fa96:	|      jsr 15a24 <getValueType>
    fa9c:	|      lea 12(sp),sp
    faa0:	|      tst.w d0
    faa2:	|  ,-- bne.s faa8 <builtIn_setSceneDimensions+0x6e>
    faa4:	|  |   moveq #1,d0
    faa6:	+--|-- bra.s fafa <builtIn_setSceneDimensions+0xc0>
	trimStack (&fun -> stack);
    faa8:	|  '-> moveq #24,d0
    faaa:	|      add.l 16(sp),d0
    faae:	|      move.l d0,-(sp)
    fab0:	|      jsr 163a8 <trimStack>
    fab6:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    fab8:	|      move.l (sp),d1
    faba:	|      move.l 4(sp),d0
    fabe:	|      move.l d1,-(sp)
    fac0:	|      move.l d0,-(sp)
    fac2:	|      jsr ddea <resizeBackdrop>
    fac8:	|      addq.l #8,sp
    faca:	|      tst.w d0
    facc:	|  ,-- beq.s faea <builtIn_setSceneDimensions+0xb0>
		blankScreen (0, 0, x, y);
    face:	|  |   move.l (sp),d1
    fad0:	|  |   move.l 4(sp),d0
    fad4:	|  |   move.l d1,-(sp)
    fad6:	|  |   move.l d0,-(sp)
    fad8:	|  |   clr.l -(sp)
    fada:	|  |   clr.l -(sp)
    fadc:	|  |   jsr dbe2 <blankScreen>
    fae2:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    fae6:	|  |   moveq #2,d0
    fae8:	+--|-- bra.s fafa <builtIn_setSceneDimensions+0xc0>
	}
	KPrintF("Out of memory creating new backdrop.");
    faea:	|  '-> pea 1ae04 <PutChar+0x1e5e>
    faf0:	|      jsr 18504 <KPrintF>
    faf6:	|      addq.l #4,sp
	return BR_ERROR;
    faf8:	|      moveq #1,d0
}
    fafa:	'----> addq.l #8,sp
    fafc:	       rts

0000fafe <builtIn_aimCamera>:

builtIn(aimCamera)
{
    fafe:	          move.l d3,-(sp)
    fb00:	          move.l d2,-(sp)
	KPrintF("running aimCamera\n");
    fb02:	          pea 1ae29 <PutChar+0x1e83>
    fb08:	          jsr 18504 <KPrintF>
    fb0e:	          addq.l #4,sp
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fb10:	          movea.l 16(sp),a0
    fb14:	          move.l 24(a0),d0
    fb18:	          move.l d0,-(sp)
    fb1a:	          pea 1 <_start+0x1>
    fb1e:	          pea 1e8da <cameraY>
    fb24:	          jsr 15a24 <getValueType>
    fb2a:	          lea 12(sp),sp
    fb2e:	          tst.w d0
    fb30:	      ,-- bne.s fb38 <builtIn_aimCamera+0x3a>
    fb32:	      |   moveq #1,d0
    fb34:	,-----|-- bra.w fdba <builtIn_aimCamera+0x2bc>
	trimStack (&fun -> stack);
    fb38:	|     '-> moveq #24,d0
    fb3a:	|         add.l 16(sp),d0
    fb3e:	|         move.l d0,-(sp)
    fb40:	|         jsr 163a8 <trimStack>
    fb46:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fb48:	|         movea.l 16(sp),a0
    fb4c:	|         move.l 24(a0),d0
    fb50:	|         move.l d0,-(sp)
    fb52:	|         pea 1 <_start+0x1>
    fb56:	|         pea 1e8d6 <cameraX>
    fb5c:	|         jsr 15a24 <getValueType>
    fb62:	|         lea 12(sp),sp
    fb66:	|         tst.w d0
    fb68:	|     ,-- bne.s fb70 <builtIn_aimCamera+0x72>
    fb6a:	|     |   moveq #1,d0
    fb6c:	+-----|-- bra.w fdba <builtIn_aimCamera+0x2bc>
	trimStack (&fun -> stack);
    fb70:	|     '-> moveq #24,d0
    fb72:	|         add.l 16(sp),d0
    fb76:	|         move.l d0,-(sp)
    fb78:	|         jsr 163a8 <trimStack>
    fb7e:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    fb80:	|         move.l 1e8d6 <cameraX>,d0
    fb86:	|         move.l d0,-(sp)
    fb88:	|         jsr 18936 <__floatsisf>
    fb8e:	|         addq.l #4,sp
    fb90:	|         move.l d0,d2
    fb92:	|         move.l 1e762 <winWidth>,d0
    fb98:	|         lsr.l #1,d0
    fb9a:	|         move.l d0,-(sp)
    fb9c:	|         jsr 1895e <__floatunsisf>
    fba2:	|         addq.l #4,sp
    fba4:	|         move.l d0,d1
    fba6:	|         move.l 1e1a2 <cameraZoom>,d0
    fbac:	|         move.l d0,-(sp)
    fbae:	|         move.l d1,-(sp)
    fbb0:	|         jsr 187ec <__divsf3>
    fbb6:	|         addq.l #8,sp
    fbb8:	|         move.l d0,-(sp)
    fbba:	|         move.l d2,-(sp)
    fbbc:	|         jsr 18c2a <__subsf3>
    fbc2:	|         addq.l #8,sp
    fbc4:	|         move.l d0,-(sp)
    fbc6:	|         jsr 188ce <__fixsfsi>
    fbcc:	|         addq.l #4,sp
    fbce:	|         move.l d0,1e8d6 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    fbd4:	|         move.l 1e8da <cameraY>,d0
    fbda:	|         move.l d0,-(sp)
    fbdc:	|         jsr 18936 <__floatsisf>
    fbe2:	|         addq.l #4,sp
    fbe4:	|         move.l d0,d2
    fbe6:	|         move.l 1e766 <winHeight>,d0
    fbec:	|         lsr.l #1,d0
    fbee:	|         move.l d0,-(sp)
    fbf0:	|         jsr 1895e <__floatunsisf>
    fbf6:	|         addq.l #4,sp
    fbf8:	|         move.l d0,d1
    fbfa:	|         move.l 1e1a2 <cameraZoom>,d0
    fc00:	|         move.l d0,-(sp)
    fc02:	|         move.l d1,-(sp)
    fc04:	|         jsr 187ec <__divsf3>
    fc0a:	|         addq.l #8,sp
    fc0c:	|         move.l d0,-(sp)
    fc0e:	|         move.l d2,-(sp)
    fc10:	|         jsr 18c2a <__subsf3>
    fc16:	|         addq.l #8,sp
    fc18:	|         move.l d0,-(sp)
    fc1a:	|         jsr 188ce <__fixsfsi>
    fc20:	|         addq.l #4,sp
    fc22:	|         move.l d0,1e8da <cameraY>

	if (cameraX < 0) cameraX = 0;
    fc28:	|         move.l 1e8d6 <cameraX>,d0
    fc2e:	|     ,-- bpl.s fc3a <builtIn_aimCamera+0x13c>
    fc30:	|     |   clr.l 1e8d6 <cameraX>
    fc36:	|  ,--|-- bra.w fcf0 <builtIn_aimCamera+0x1f2>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    fc3a:	|  |  '-> move.l 1e8d6 <cameraX>,d0
    fc40:	|  |      move.l d0,-(sp)
    fc42:	|  |      jsr 18936 <__floatsisf>
    fc48:	|  |      addq.l #4,sp
    fc4a:	|  |      move.l d0,d2
    fc4c:	|  |      move.l 1e8b8 <sceneWidth>,d0
    fc52:	|  |      move.l d0,-(sp)
    fc54:	|  |      jsr 1895e <__floatunsisf>
    fc5a:	|  |      addq.l #4,sp
    fc5c:	|  |      move.l d0,d3
    fc5e:	|  |      move.l 1e762 <winWidth>,d0
    fc64:	|  |      move.l d0,-(sp)
    fc66:	|  |      jsr 1895e <__floatunsisf>
    fc6c:	|  |      addq.l #4,sp
    fc6e:	|  |      move.l d0,d1
    fc70:	|  |      move.l 1e1a2 <cameraZoom>,d0
    fc76:	|  |      move.l d0,-(sp)
    fc78:	|  |      move.l d1,-(sp)
    fc7a:	|  |      jsr 187ec <__divsf3>
    fc80:	|  |      addq.l #8,sp
    fc82:	|  |      move.l d0,-(sp)
    fc84:	|  |      move.l d3,-(sp)
    fc86:	|  |      jsr 18c2a <__subsf3>
    fc8c:	|  |      addq.l #8,sp
    fc8e:	|  |      move.l d0,-(sp)
    fc90:	|  |      move.l d2,-(sp)
    fc92:	|  |      jsr 18aa2 <__gtsf2>
    fc98:	|  |      addq.l #8,sp
    fc9a:	|  |      tst.l d0
    fc9c:	|  +----- ble.s fcf0 <builtIn_aimCamera+0x1f2>
    fc9e:	|  |      move.l 1e8b8 <sceneWidth>,d0
    fca4:	|  |      move.l d0,-(sp)
    fca6:	|  |      jsr 1895e <__floatunsisf>
    fcac:	|  |      addq.l #4,sp
    fcae:	|  |      move.l d0,d2
    fcb0:	|  |      move.l 1e762 <winWidth>,d0
    fcb6:	|  |      move.l d0,-(sp)
    fcb8:	|  |      jsr 1895e <__floatunsisf>
    fcbe:	|  |      addq.l #4,sp
    fcc0:	|  |      move.l d0,d1
    fcc2:	|  |      move.l 1e1a2 <cameraZoom>,d0
    fcc8:	|  |      move.l d0,-(sp)
    fcca:	|  |      move.l d1,-(sp)
    fccc:	|  |      jsr 187ec <__divsf3>
    fcd2:	|  |      addq.l #8,sp
    fcd4:	|  |      move.l d0,-(sp)
    fcd6:	|  |      move.l d2,-(sp)
    fcd8:	|  |      jsr 18c2a <__subsf3>
    fcde:	|  |      addq.l #8,sp
    fce0:	|  |      move.l d0,-(sp)
    fce2:	|  |      jsr 188ce <__fixsfsi>
    fce8:	|  |      addq.l #4,sp
    fcea:	|  |      move.l d0,1e8d6 <cameraX>
	if (cameraY < 0) cameraY = 0;
    fcf0:	|  '----> move.l 1e8da <cameraY>,d0
    fcf6:	|     ,-- bpl.s fd02 <builtIn_aimCamera+0x204>
    fcf8:	|     |   clr.l 1e8da <cameraY>
    fcfe:	|  ,--|-- bra.w fdb8 <builtIn_aimCamera+0x2ba>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    fd02:	|  |  '-> move.l 1e8da <cameraY>,d0
    fd08:	|  |      move.l d0,-(sp)
    fd0a:	|  |      jsr 18936 <__floatsisf>
    fd10:	|  |      addq.l #4,sp
    fd12:	|  |      move.l d0,d2
    fd14:	|  |      move.l 1e8bc <sceneHeight>,d0
    fd1a:	|  |      move.l d0,-(sp)
    fd1c:	|  |      jsr 1895e <__floatunsisf>
    fd22:	|  |      addq.l #4,sp
    fd24:	|  |      move.l d0,d3
    fd26:	|  |      move.l 1e766 <winHeight>,d0
    fd2c:	|  |      move.l d0,-(sp)
    fd2e:	|  |      jsr 1895e <__floatunsisf>
    fd34:	|  |      addq.l #4,sp
    fd36:	|  |      move.l d0,d1
    fd38:	|  |      move.l 1e1a2 <cameraZoom>,d0
    fd3e:	|  |      move.l d0,-(sp)
    fd40:	|  |      move.l d1,-(sp)
    fd42:	|  |      jsr 187ec <__divsf3>
    fd48:	|  |      addq.l #8,sp
    fd4a:	|  |      move.l d0,-(sp)
    fd4c:	|  |      move.l d3,-(sp)
    fd4e:	|  |      jsr 18c2a <__subsf3>
    fd54:	|  |      addq.l #8,sp
    fd56:	|  |      move.l d0,-(sp)
    fd58:	|  |      move.l d2,-(sp)
    fd5a:	|  |      jsr 18aa2 <__gtsf2>
    fd60:	|  |      addq.l #8,sp
    fd62:	|  |      tst.l d0
    fd64:	|  +----- ble.s fdb8 <builtIn_aimCamera+0x2ba>
    fd66:	|  |      move.l 1e8bc <sceneHeight>,d0
    fd6c:	|  |      move.l d0,-(sp)
    fd6e:	|  |      jsr 1895e <__floatunsisf>
    fd74:	|  |      addq.l #4,sp
    fd76:	|  |      move.l d0,d2
    fd78:	|  |      move.l 1e766 <winHeight>,d0
    fd7e:	|  |      move.l d0,-(sp)
    fd80:	|  |      jsr 1895e <__floatunsisf>
    fd86:	|  |      addq.l #4,sp
    fd88:	|  |      move.l d0,d1
    fd8a:	|  |      move.l 1e1a2 <cameraZoom>,d0
    fd90:	|  |      move.l d0,-(sp)
    fd92:	|  |      move.l d1,-(sp)
    fd94:	|  |      jsr 187ec <__divsf3>
    fd9a:	|  |      addq.l #8,sp
    fd9c:	|  |      move.l d0,-(sp)
    fd9e:	|  |      move.l d2,-(sp)
    fda0:	|  |      jsr 18c2a <__subsf3>
    fda6:	|  |      addq.l #8,sp
    fda8:	|  |      move.l d0,-(sp)
    fdaa:	|  |      jsr 188ce <__fixsfsi>
    fdb0:	|  |      addq.l #4,sp
    fdb2:	|  |      move.l d0,1e8da <cameraY>
	return BR_CONTINUE;
    fdb8:	|  '----> moveq #2,d0
}
    fdba:	'-------> move.l (sp)+,d2
    fdbc:	          move.l (sp)+,d3
    fdbe:	          rts

0000fdc0 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    fdc0:	       subq.l #4,sp
    fdc2:	       move.l d2,-(sp)
	KPrintF("running zoomCamera\n");
    fdc4:	       pea 1ae3c <PutChar+0x1e96>
    fdca:	       jsr 18504 <KPrintF>
    fdd0:	       addq.l #4,sp
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fdd2:	       movea.l 16(sp),a0
    fdd6:	       move.l 24(a0),d0
    fdda:	       move.l d0,-(sp)
    fddc:	       pea 1 <_start+0x1>
    fde0:	       moveq #12,d0
    fde2:	       add.l sp,d0
    fde4:	       move.l d0,-(sp)
    fde6:	       jsr 15a24 <getValueType>
    fdec:	       lea 12(sp),sp
    fdf0:	       tst.w d0
    fdf2:	   ,-- bne.s fdfa <builtIn_zoomCamera+0x3a>
    fdf4:	   |   moveq #1,d0
    fdf6:	,--|-- bra.w fff4 <builtIn_zoomCamera+0x234>
	trimStack (&fun -> stack);
    fdfa:	|  '-> moveq #24,d0
    fdfc:	|      add.l 16(sp),d0
    fe00:	|      move.l d0,-(sp)
    fe02:	|      jsr 163a8 <trimStack>
    fe08:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    fe0a:	|      move.l 1e7d6 <input+0xa>,d0
    fe10:	|      move.l d0,-(sp)
    fe12:	|      jsr 18936 <__floatsisf>
    fe18:	|      addq.l #4,sp
    fe1a:	|      move.l d0,d1
    fe1c:	|      move.l 1e1a2 <cameraZoom>,d0
    fe22:	|      move.l d0,-(sp)
    fe24:	|      move.l d1,-(sp)
    fe26:	|      jsr 189e8 <__mulsf3>
    fe2c:	|      addq.l #8,sp
    fe2e:	|      move.l d0,-(sp)
    fe30:	|      jsr 188ce <__fixsfsi>
    fe36:	|      addq.l #4,sp
    fe38:	|      move.l d0,1e7d6 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    fe3e:	|      move.l 1e7da <input+0xe>,d0
    fe44:	|      move.l d0,-(sp)
    fe46:	|      jsr 18936 <__floatsisf>
    fe4c:	|      addq.l #4,sp
    fe4e:	|      move.l d0,d1
    fe50:	|      move.l 1e1a2 <cameraZoom>,d0
    fe56:	|      move.l d0,-(sp)
    fe58:	|      move.l d1,-(sp)
    fe5a:	|      jsr 189e8 <__mulsf3>
    fe60:	|      addq.l #8,sp
    fe62:	|      move.l d0,-(sp)
    fe64:	|      jsr 188ce <__fixsfsi>
    fe6a:	|      addq.l #4,sp
    fe6c:	|      move.l d0,1e7da <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    fe72:	|      move.l 4(sp),d0
    fe76:	|      move.l d0,-(sp)
    fe78:	|      jsr 18936 <__floatsisf>
    fe7e:	|      addq.l #4,sp
    fe80:	|      move.l #1008981770,-(sp)
    fe86:	|      move.l d0,-(sp)
    fe88:	|      jsr 189e8 <__mulsf3>
    fe8e:	|      addq.l #8,sp
    fe90:	|      move.l d0,1e1a2 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    fe96:	|      move.l 1e762 <winWidth>,d0
    fe9c:	|      move.l d0,-(sp)
    fe9e:	|      jsr 1895e <__floatunsisf>
    fea4:	|      addq.l #4,sp
    fea6:	|      move.l d0,d1
    fea8:	|      move.l 1e1a2 <cameraZoom>,d0
    feae:	|      move.l d0,-(sp)
    feb0:	|      move.l d1,-(sp)
    feb2:	|      jsr 187ec <__divsf3>
    feb8:	|      addq.l #8,sp
    feba:	|      move.l d0,d2
    febc:	|      move.l 1e8b8 <sceneWidth>,d0
    fec2:	|      move.l d0,-(sp)
    fec4:	|      jsr 1895e <__floatunsisf>
    feca:	|      addq.l #4,sp
    fecc:	|      move.l d0,-(sp)
    fece:	|      move.l d2,-(sp)
    fed0:	|      jsr 18aa2 <__gtsf2>
    fed6:	|      addq.l #8,sp
    fed8:	|      tst.l d0
    feda:	|  ,-- ble.s ff10 <builtIn_zoomCamera+0x150>
    fedc:	|  |   move.l 1e762 <winWidth>,d0
    fee2:	|  |   move.l d0,-(sp)
    fee4:	|  |   jsr 1895e <__floatunsisf>
    feea:	|  |   addq.l #4,sp
    feec:	|  |   move.l d0,d2
    feee:	|  |   move.l 1e8b8 <sceneWidth>,d0
    fef4:	|  |   move.l d0,-(sp)
    fef6:	|  |   jsr 1895e <__floatunsisf>
    fefc:	|  |   addq.l #4,sp
    fefe:	|  |   move.l d0,-(sp)
    ff00:	|  |   move.l d2,-(sp)
    ff02:	|  |   jsr 187ec <__divsf3>
    ff08:	|  |   addq.l #8,sp
    ff0a:	|  |   move.l d0,1e1a2 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    ff10:	|  '-> move.l 1e766 <winHeight>,d0
    ff16:	|      move.l d0,-(sp)
    ff18:	|      jsr 1895e <__floatunsisf>
    ff1e:	|      addq.l #4,sp
    ff20:	|      move.l d0,d1
    ff22:	|      move.l 1e1a2 <cameraZoom>,d0
    ff28:	|      move.l d0,-(sp)
    ff2a:	|      move.l d1,-(sp)
    ff2c:	|      jsr 187ec <__divsf3>
    ff32:	|      addq.l #8,sp
    ff34:	|      move.l d0,d2
    ff36:	|      move.l 1e8bc <sceneHeight>,d0
    ff3c:	|      move.l d0,-(sp)
    ff3e:	|      jsr 1895e <__floatunsisf>
    ff44:	|      addq.l #4,sp
    ff46:	|      move.l d0,-(sp)
    ff48:	|      move.l d2,-(sp)
    ff4a:	|      jsr 18aa2 <__gtsf2>
    ff50:	|      addq.l #8,sp
    ff52:	|      tst.l d0
    ff54:	|  ,-- ble.s ff8a <builtIn_zoomCamera+0x1ca>
    ff56:	|  |   move.l 1e766 <winHeight>,d0
    ff5c:	|  |   move.l d0,-(sp)
    ff5e:	|  |   jsr 1895e <__floatunsisf>
    ff64:	|  |   addq.l #4,sp
    ff66:	|  |   move.l d0,d2
    ff68:	|  |   move.l 1e8bc <sceneHeight>,d0
    ff6e:	|  |   move.l d0,-(sp)
    ff70:	|  |   jsr 1895e <__floatunsisf>
    ff76:	|  |   addq.l #4,sp
    ff78:	|  |   move.l d0,-(sp)
    ff7a:	|  |   move.l d2,-(sp)
    ff7c:	|  |   jsr 187ec <__divsf3>
    ff82:	|  |   addq.l #8,sp
    ff84:	|  |   move.l d0,1e1a2 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    ff8a:	|  '-> move.l 1e7d6 <input+0xa>,d0
    ff90:	|      move.l d0,-(sp)
    ff92:	|      jsr 18936 <__floatsisf>
    ff98:	|      addq.l #4,sp
    ff9a:	|      move.l d0,d1
    ff9c:	|      move.l 1e1a2 <cameraZoom>,d0
    ffa2:	|      move.l d0,-(sp)
    ffa4:	|      move.l d1,-(sp)
    ffa6:	|      jsr 187ec <__divsf3>
    ffac:	|      addq.l #8,sp
    ffae:	|      move.l d0,-(sp)
    ffb0:	|      jsr 188ce <__fixsfsi>
    ffb6:	|      addq.l #4,sp
    ffb8:	|      move.l d0,1e7d6 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    ffbe:	|      move.l 1e7da <input+0xe>,d0
    ffc4:	|      move.l d0,-(sp)
    ffc6:	|      jsr 18936 <__floatsisf>
    ffcc:	|      addq.l #4,sp
    ffce:	|      move.l d0,d1
    ffd0:	|      move.l 1e1a2 <cameraZoom>,d0
    ffd6:	|      move.l d0,-(sp)
    ffd8:	|      move.l d1,-(sp)
    ffda:	|      jsr 187ec <__divsf3>
    ffe0:	|      addq.l #8,sp
    ffe2:	|      move.l d0,-(sp)
    ffe4:	|      jsr 188ce <__fixsfsi>
    ffea:	|      addq.l #4,sp
    ffec:	|      move.l d0,1e7da <input+0xe>

	return BR_CONTINUE;
    fff2:	|      moveq #2,d0
}
    fff4:	'----> move.l (sp)+,d2
    fff6:	       addq.l #4,sp
    fff8:	       rts

0000fffa <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    fffa:	             subq.l #4,sp
	KPrintF("running pickOne\n");
    fffc:	             pea 1ae50 <PutChar+0x1eaa>
   10002:	             jsr 18504 <KPrintF>
   10008:	             addq.l #4,sp
	UNUSEDALL
	if (! numParams) {
   1000a:	             tst.l 8(sp)
   1000e:	         ,-- bne.s 10022 <builtIn_pickOne+0x28>
		KPrintF ("Built-in function should have at least 1 parameter");
   10010:	         |   pea 1ae61 <PutChar+0x1ebb>
   10016:	         |   jsr 18504 <KPrintF>
   1001c:	         |   addq.l #4,sp
		return BR_ERROR;
   1001e:	         |   moveq #1,d0
   10020:	,--------|-- bra.s 10082 <builtIn_pickOne+0x88>
	}
	int i = rand() % numParams;
   10022:	|        '-> jsr 170c4 <rand>
   10028:	|            move.l d0,d1
   1002a:	|            move.l 8(sp),d0
   1002e:	|            move.l d0,-(sp)
   10030:	|            move.l d1,-(sp)
   10032:	|            jsr 18f6a <__umodsi3>
   10038:	|            addq.l #8,sp
   1003a:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
   1003c:	|     ,----- bra.s 10070 <builtIn_pickOne+0x76>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
   1003e:	|  ,--|----> move.l (sp),d0
   10040:	|  |  |      cmp.l 8(sp),d0
   10044:	|  |  |  ,-- bne.s 10060 <builtIn_pickOne+0x66>
   10046:	|  |  |  |   moveq #28,d0
   10048:	|  |  |  |   add.l 12(sp),d0
   1004c:	|  |  |  |   movea.l 12(sp),a0
   10050:	|  |  |  |   move.l 24(a0),d1
   10054:	|  |  |  |   move.l d0,-(sp)
   10056:	|  |  |  |   move.l d1,-(sp)
   10058:	|  |  |  |   jsr 15ede <copyVariable>
   1005e:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
   10060:	|  |  |  '-> moveq #24,d0
   10062:	|  |  |      add.l 12(sp),d0
   10066:	|  |  |      move.l d0,-(sp)
   10068:	|  |  |      jsr 163a8 <trimStack>
   1006e:	|  |  |      addq.l #4,sp
	while (numParams --) {
   10070:	|  |  '----> move.l 8(sp),d0
   10074:	|  |         move.l d0,d1
   10076:	|  |         subq.l #1,d1
   10078:	|  |         move.l d1,8(sp)
   1007c:	|  |         tst.l d0
   1007e:	|  '-------- bne.s 1003e <builtIn_pickOne+0x44>
	}
	return BR_CONTINUE;
   10080:	|            moveq #2,d0
}
   10082:	'----------> addq.l #4,sp
   10084:	             rts

00010086 <builtIn_substring>:

builtIn(substring)
{
   10086:	       lea -40(sp),sp
   1008a:	       move.l a6,-(sp)
   1008c:	       move.l d2,-(sp)
	KPrintF("running substring\n");
   1008e:	       pea 1ae94 <PutChar+0x1eee>
   10094:	       jsr 18504 <KPrintF>
   1009a:	       addq.l #4,sp
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   1009c:	       movea.l 56(sp),a0
   100a0:	       move.l 24(a0),d0
   100a4:	       move.l d0,-(sp)
   100a6:	       pea 1 <_start+0x1>
   100aa:	       lea 16(sp),a0
   100ae:	       move.l a0,-(sp)
   100b0:	       jsr 15a24 <getValueType>
   100b6:	       lea 12(sp),sp
   100ba:	       tst.w d0
   100bc:	   ,-- bne.s 100c4 <builtIn_substring+0x3e>
   100be:	   |   moveq #1,d0
   100c0:	,--|-- bra.w 1023c <builtIn_substring+0x1b6>
    trimStack(&fun->stack);
   100c4:	|  '-> moveq #24,d0
   100c6:	|      add.l 56(sp),d0
   100ca:	|      move.l d0,-(sp)
   100cc:	|      jsr 163a8 <trimStack>
   100d2:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   100d4:	|      movea.l 56(sp),a0
   100d8:	|      move.l 24(a0),d0
   100dc:	|      move.l d0,-(sp)
   100de:	|      pea 1 <_start+0x1>
   100e2:	|      lea 20(sp),a0
   100e6:	|      move.l a0,-(sp)
   100e8:	|      jsr 15a24 <getValueType>
   100ee:	|      lea 12(sp),sp
   100f2:	|      tst.w d0
   100f4:	|  ,-- bne.s 100fc <builtIn_substring+0x76>
   100f6:	|  |   moveq #1,d0
   100f8:	+--|-- bra.w 1023c <builtIn_substring+0x1b6>
    trimStack(&fun->stack);
   100fc:	|  '-> moveq #24,d0
   100fe:	|      add.l 56(sp),d0
   10102:	|      move.l d0,-(sp)
   10104:	|      jsr 163a8 <trimStack>
   1010a:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
   1010c:	|      movea.l 56(sp),a0
   10110:	|      move.l 24(a0),d0
   10114:	|      move.l d0,-(sp)
   10116:	|      jsr 15ffa <getTextFromAnyVar>
   1011c:	|      addq.l #4,sp
   1011e:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
   10122:	|      moveq #24,d0
   10124:	|      add.l 56(sp),d0
   10128:	|      move.l d0,-(sp)
   1012a:	|      jsr 163a8 <trimStack>
   10130:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
   10132:	|      move.l 44(sp),-(sp)
   10136:	|      jsr 14f10 <strlen>
   1013c:	|      addq.l #4,sp
   1013e:	|      move.l d0,d1
   10140:	|      move.l 12(sp),d0
   10144:	|      movea.l d0,a0
   10146:	|      move.l 8(sp),d0
   1014a:	|      add.l a0,d0
   1014c:	|      cmp.l d1,d0
   1014e:	|  ,-- bls.s 10184 <builtIn_substring+0xfe>
        length = strlen(wholeString) - start;
   10150:	|  |   move.l 44(sp),-(sp)
   10154:	|  |   jsr 14f10 <strlen>
   1015a:	|  |   addq.l #4,sp
   1015c:	|  |   move.l d0,d1
   1015e:	|  |   move.l 12(sp),d0
   10162:	|  |   sub.l d0,d1
   10164:	|  |   move.l d1,d0
   10166:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
   1016a:	|  |   move.l 44(sp),-(sp)
   1016e:	|  |   jsr 14f10 <strlen>
   10174:	|  |   addq.l #4,sp
   10176:	|  |   move.l d0,d1
   10178:	|  |   move.l 12(sp),d0
   1017c:	|  |   cmp.l d1,d0
   1017e:	|  +-- bls.s 10184 <builtIn_substring+0xfe>
            start = 0;
   10180:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
   10184:	|  '-> move.l 8(sp),d0
   10188:	|  ,-- bpl.s 1018e <builtIn_substring+0x108>
        length = 0;
   1018a:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
   1018e:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
   10194:	|      move.l 12(sp),d1
   10198:	|      move.l 8(sp),d0
   1019c:	|      move.l d1,d2
   1019e:	|      add.l d0,d2
   101a0:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
   101a4:	|      move.l 36(sp),d0
   101a8:	|      sub.l 40(sp),d0
   101ac:	|      addq.l #1,d0
   101ae:	|      move.l d0,32(sp)
   101b2:	|      clr.l 28(sp)
   101b6:	|      move.l 1e81c <SysBase>,d0
   101bc:	|      movea.l d0,a6
   101be:	|      move.l 32(sp),d0
   101c2:	|      move.l 28(sp),d1
   101c6:	|      jsr -684(a6)
   101ca:	|      move.l d0,24(sp)
   101ce:	|      move.l 24(sp),d0
   101d2:	|      move.l d0,20(sp)
    if (!newString) {
   101d6:	|  ,-- bne.s 101dc <builtIn_substring+0x156>
        return BR_ERROR;
   101d8:	|  |   moveq #1,d0
   101da:	+--|-- bra.s 1023c <builtIn_substring+0x1b6>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
   101dc:	|  '-> move.l 36(sp),d0
   101e0:	|      sub.l 40(sp),d0
   101e4:	|      move.l d0,d1
   101e6:	|      move.l 40(sp),d0
   101ea:	|      add.l 44(sp),d0
   101ee:	|      move.l d1,-(sp)
   101f0:	|      move.l d0,-(sp)
   101f2:	|      move.l 28(sp),-(sp)
   101f6:	|      jsr 184b8 <memcpy>
   101fc:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
   10200:	|      move.l 36(sp),d0
   10204:	|      sub.l 40(sp),d0
   10208:	|      movea.l 20(sp),a0
   1020c:	|      adda.l d0,a0
   1020e:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
   10210:	|      moveq #28,d0
   10212:	|      add.l 56(sp),d0
   10216:	|      move.l 20(sp),-(sp)
   1021a:	|      move.l d0,-(sp)
   1021c:	|      jsr 15c46 <makeTextVar>
   10222:	|      addq.l #8,sp
    FreeVec(newString);
   10224:	|      move.l 20(sp),16(sp)
   1022a:	|      move.l 1e81c <SysBase>,d0
   10230:	|      movea.l d0,a6
   10232:	|      movea.l 16(sp),a1
   10236:	|      jsr -690(a6)
    return BR_CONTINUE;
   1023a:	|      moveq #2,d0
}
   1023c:	'----> move.l (sp)+,d2
   1023e:	       movea.l (sp)+,a6
   10240:	       lea 40(sp),sp
   10244:	       rts

00010246 <builtIn_stringLength>:

builtIn(stringLength)
{
   10246:	subq.l #8,sp
   10248:	move.l a6,-(sp)
	KPrintF("running stringLength\n");
   1024a:	pea 1aea7 <PutChar+0x1f01>
   10250:	jsr 18504 <KPrintF>
   10256:	addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   10258:	movea.l 20(sp),a0
   1025c:	move.l 24(a0),d0
   10260:	move.l d0,-(sp)
   10262:	jsr 15ffa <getTextFromAnyVar>
   10268:	addq.l #4,sp
   1026a:	move.l d0,8(sp)
	trimStack (&fun -> stack);
   1026e:	moveq #24,d0
   10270:	add.l 20(sp),d0
   10274:	move.l d0,-(sp)
   10276:	jsr 163a8 <trimStack>
   1027c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
   1027e:	move.l 8(sp),-(sp)
   10282:	jsr 14f10 <strlen>
   10288:	addq.l #4,sp
   1028a:	move.l d0,d1
   1028c:	moveq #28,d0
   1028e:	add.l 20(sp),d0
   10292:	move.l d1,-(sp)
   10294:	pea 1 <_start+0x1>
   10298:	move.l d0,-(sp)
   1029a:	jsr 16316 <setVariable>
   102a0:	lea 12(sp),sp
	FreeVec(newText);
   102a4:	move.l 8(sp),4(sp)
   102aa:	move.l 1e81c <SysBase>,d0
   102b0:	movea.l d0,a6
   102b2:	movea.l 4(sp),a1
   102b6:	jsr -690(a6)
	return BR_CONTINUE;
   102ba:	moveq #2,d0
}
   102bc:	movea.l (sp)+,a6
   102be:	addq.l #8,sp
   102c0:	rts

000102c2 <builtIn_newStack>:

builtIn(newStack)
{
   102c2:	             lea -12(sp),sp
   102c6:	             move.l a6,-(sp)
	KPrintF("running newStack\n");
   102c8:	             pea 1aebd <PutChar+0x1f17>
   102ce:	             jsr 18504 <KPrintF>
   102d4:	             addq.l #4,sp
    UNUSEDALL
    unlinkVar(&fun->reg);
   102d6:	             moveq #28,d0
   102d8:	             add.l 24(sp),d0
   102dc:	             move.l d0,-(sp)
   102de:	             jsr 15c72 <unlinkVar>
   102e4:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
   102e6:	             movea.l 24(sp),a0
   102ea:	             moveq #6,d0
   102ec:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   102f0:	             moveq #12,d1
   102f2:	             move.l d1,12(sp)
   102f6:	             clr.l 8(sp)
   102fa:	             move.l 1e81c <SysBase>,d0
   10300:	             movea.l d0,a6
   10302:	             move.l 12(sp),d0
   10306:	             move.l 8(sp),d1
   1030a:	             jsr -684(a6)
   1030e:	             move.l d0,4(sp)
   10312:	             move.l 4(sp),d0
   10316:	             movea.l 24(sp),a0
   1031a:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
   1031e:	             movea.l 24(sp),a0
   10322:	             move.l 32(a0),d0
   10326:	         ,-- bne.s 1032e <builtIn_newStack+0x6c>
   10328:	         |   moveq #1,d0
   1032a:	,--------|-- bra.w 103c0 <builtIn_newStack+0xfe>
    fun->reg.varData.theStack->first = NULL;
   1032e:	|        '-> movea.l 24(sp),a0
   10332:	|            movea.l 32(a0),a0
   10336:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
   10338:	|            movea.l 24(sp),a0
   1033c:	|            movea.l 32(a0),a0
   10340:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
   10344:	|            movea.l 24(sp),a0
   10348:	|            movea.l 32(a0),a0
   1034c:	|            moveq #1,d0
   1034e:	|            move.l d0,8(a0)
    
    while (numParams--) {
   10352:	|     ,----- bra.s 103ae <builtIn_newStack+0xec>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
   10354:	|  ,--|----> movea.l 24(sp),a0
   10358:	|  |  |      move.l 32(a0),d0
   1035c:	|  |  |      move.l d0,d1
   1035e:	|  |  |      movea.l 24(sp),a0
   10362:	|  |  |      move.l 24(a0),d0
   10366:	|  |  |      move.l d1,-(sp)
   10368:	|  |  |      move.l d0,-(sp)
   1036a:	|  |  |      jsr 15260 <addVarToStack>
   10370:	|  |  |      addq.l #8,sp
   10372:	|  |  |      tst.w d0
   10374:	|  |  |  ,-- bne.s 1037a <builtIn_newStack+0xb8>
   10376:	|  |  |  |   moveq #1,d0
   10378:	+--|--|--|-- bra.s 103c0 <builtIn_newStack+0xfe>
        if (fun->reg.varData.theStack->last == NULL) {
   1037a:	|  |  |  '-> movea.l 24(sp),a0
   1037e:	|  |  |      movea.l 32(a0),a0
   10382:	|  |  |      move.l 4(a0),d0
   10386:	|  |  |  ,-- bne.s 1039e <builtIn_newStack+0xdc>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
   10388:	|  |  |  |   movea.l 24(sp),a0
   1038c:	|  |  |  |   movea.l 32(a0),a1
   10390:	|  |  |  |   movea.l 24(sp),a0
   10394:	|  |  |  |   movea.l 32(a0),a0
   10398:	|  |  |  |   move.l (a1),d0
   1039a:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
   1039e:	|  |  |  '-> moveq #24,d0
   103a0:	|  |  |      add.l 24(sp),d0
   103a4:	|  |  |      move.l d0,-(sp)
   103a6:	|  |  |      jsr 163a8 <trimStack>
   103ac:	|  |  |      addq.l #4,sp
    while (numParams--) {
   103ae:	|  |  '----> move.l 20(sp),d0
   103b2:	|  |         move.l d0,d1
   103b4:	|  |         subq.l #1,d1
   103b6:	|  |         move.l d1,20(sp)
   103ba:	|  |         tst.l d0
   103bc:	|  '-------- bne.s 10354 <builtIn_newStack+0x92>
    }
    return BR_CONTINUE;
   103be:	|            moveq #2,d0
}
   103c0:	'----------> movea.l (sp)+,a6
   103c2:	             lea 12(sp),sp
   103c6:	             rts

000103c8 <builtIn_stackSize>:
// wait is exactly the same function, but limited to 2 parameters
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	KPrintF("running stackSize\n");
   103c8:	          pea 1aecf <PutChar+0x1f29>
   103ce:	          jsr 18504 <KPrintF>
   103d4:	          addq.l #4,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   103d6:	          movea.l 8(sp),a0
   103da:	          movea.l 24(a0),a0
   103de:	          move.l (a0),d0
   103e0:	          moveq #6,d1
   103e2:	          cmp.l d0,d1
   103e4:	      ,-- beq.s 10400 <builtIn_stackSize+0x38>
   103e6:	      |   moveq #10,d1
   103e8:	      |   cmp.l d0,d1
   103ea:	   ,--|-- beq.s 10444 <builtIn_stackSize+0x7c>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
   103ec:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
   103ee:	   |  |   pea 1aee2 <PutChar+0x1f3c>
   103f4:	   |  |   jsr 18504 <KPrintF>
   103fa:	   |  |   addq.l #4,sp
	return BR_ERROR;
   103fc:	   |  |   moveq #1,d0
   103fe:	,--|--|-- bra.s 1047e <builtIn_stackSize+0xb6>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
   10400:	|  |  '-> movea.l 8(sp),a0
   10404:	|  |      movea.l 24(a0),a0
   10408:	|  |      move.l 4(a0),d0
   1040c:	|  |      move.l d0,-(sp)
   1040e:	|  |      jsr 16384 <stackSize>
   10414:	|  |      addq.l #4,sp
   10416:	|  |      move.l d0,d1
   10418:	|  |      moveq #28,d0
   1041a:	|  |      add.l 8(sp),d0
   1041e:	|  |      move.l d1,-(sp)
   10420:	|  |      pea 1 <_start+0x1>
   10424:	|  |      move.l d0,-(sp)
   10426:	|  |      jsr 16316 <setVariable>
   1042c:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
   10430:	|  |      moveq #24,d0
   10432:	|  |      add.l 8(sp),d0
   10436:	|  |      move.l d0,-(sp)
   10438:	|  |      jsr 163a8 <trimStack>
   1043e:	|  |      addq.l #4,sp
			return BR_CONTINUE;
   10440:	|  |      moveq #2,d0
   10442:	+--|----- bra.s 1047e <builtIn_stackSize+0xb6>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
   10444:	|  '----> movea.l 8(sp),a0
   10448:	|         movea.l 24(a0),a0
   1044c:	|         movea.l 4(a0),a0
   10450:	|         move.l 4(a0),d1
   10454:	|         moveq #28,d0
   10456:	|         add.l 8(sp),d0
   1045a:	|         move.l d1,-(sp)
   1045c:	|         pea 1 <_start+0x1>
   10460:	|         move.l d0,-(sp)
   10462:	|         jsr 16316 <setVariable>
   10468:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
   1046c:	|         moveq #24,d0
   1046e:	|         add.l 8(sp),d0
   10472:	|         move.l d0,-(sp)
   10474:	|         jsr 163a8 <trimStack>
   1047a:	|         addq.l #4,sp
			return BR_CONTINUE;
   1047c:	|         moveq #2,d0
}
   1047e:	'-------> rts

00010480 <builtIn_copyStack>:

builtIn(copyStack)
{
	KPrintF("running copyStack\n");
   10480:	       pea 1af0b <PutChar+0x1f65>
   10486:	       jsr 18504 <KPrintF>
   1048c:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   1048e:	       movea.l 8(sp),a0
   10492:	       movea.l 24(a0),a0
   10496:	       move.l (a0),d0
   10498:	       moveq #6,d1
   1049a:	       cmp.l d0,d1
   1049c:	   ,-- beq.s 104b0 <builtIn_copyStack+0x30>
		KPrintF ("Parameter isn't a stack.");
   1049e:	   |   pea 1af1e <PutChar+0x1f78>
   104a4:	   |   jsr 18504 <KPrintF>
   104aa:	   |   addq.l #4,sp
		return BR_ERROR;
   104ac:	   |   moveq #1,d0
   104ae:	,--|-- bra.s 104e4 <builtIn_copyStack+0x64>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
   104b0:	|  '-> moveq #28,d0
   104b2:	|      add.l 8(sp),d0
   104b6:	|      movea.l 8(sp),a0
   104ba:	|      move.l 24(a0),d1
   104be:	|      move.l d0,-(sp)
   104c0:	|      move.l d1,-(sp)
   104c2:	|      jsr 1552a <copyStack>
   104c8:	|      addq.l #8,sp
   104ca:	|      tst.w d0
   104cc:	|  ,-- bne.s 104d2 <builtIn_copyStack+0x52>
   104ce:	|  |   moveq #1,d0
   104d0:	+--|-- bra.s 104e4 <builtIn_copyStack+0x64>
	trimStack (&fun -> stack);
   104d2:	|  '-> moveq #24,d0
   104d4:	|      add.l 8(sp),d0
   104d8:	|      move.l d0,-(sp)
   104da:	|      jsr 163a8 <trimStack>
   104e0:	|      addq.l #4,sp
	return BR_CONTINUE;
   104e2:	|      moveq #2,d0
}
   104e4:	'----> rts

000104e6 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	KPrintF("running pushToStack\n");
   104e6:	       pea 1af37 <PutChar+0x1f91>
   104ec:	       jsr 18504 <KPrintF>
   104f2:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   104f4:	       movea.l 8(sp),a0
   104f8:	       movea.l 24(a0),a0
   104fc:	       movea.l 8(a0),a0
   10500:	       move.l (a0),d0
   10502:	       moveq #6,d1
   10504:	       cmp.l d0,d1
   10506:	   ,-- beq.s 1051c <builtIn_pushToStack+0x36>
		KPrintF("Parameter isn't a stack");
   10508:	   |   pea 1af4c <PutChar+0x1fa6>
   1050e:	   |   jsr 18504 <KPrintF>
   10514:	   |   addq.l #4,sp
		return BR_ERROR;
   10516:	   |   moveq #1,d0
   10518:	,--|-- bra.w 105aa <builtIn_pushToStack+0xc4>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
   1051c:	|  '-> movea.l 8(sp),a0
   10520:	|      movea.l 24(a0),a0
   10524:	|      movea.l 8(a0),a0
   10528:	|      move.l 4(a0),d0
   1052c:	|      move.l d0,d1
   1052e:	|      movea.l 8(sp),a0
   10532:	|      move.l 24(a0),d0
   10536:	|      move.l d1,-(sp)
   10538:	|      move.l d0,-(sp)
   1053a:	|      jsr 15260 <addVarToStack>
   10540:	|      addq.l #8,sp
   10542:	|      tst.w d0
   10544:	|  ,-- bne.s 1054a <builtIn_pushToStack+0x64>
		return BR_ERROR;
   10546:	|  |   moveq #1,d0
   10548:	+--|-- bra.s 105aa <builtIn_pushToStack+0xc4>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
   1054a:	|  '-> movea.l 8(sp),a0
   1054e:	|      movea.l 24(a0),a0
   10552:	|      movea.l 8(a0),a0
   10556:	|      movea.l 4(a0),a0
   1055a:	|      movea.l (a0),a0
   1055c:	|      move.l 8(a0),d0
   10560:	|  ,-- bne.s 10588 <builtIn_pushToStack+0xa2>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
   10562:	|  |   movea.l 8(sp),a0
   10566:	|  |   movea.l 24(a0),a0
   1056a:	|  |   movea.l 8(a0),a0
   1056e:	|  |   movea.l 4(a0),a1
   10572:	|  |   movea.l 8(sp),a0
   10576:	|  |   movea.l 24(a0),a0
   1057a:	|  |   movea.l 8(a0),a0
   1057e:	|  |   movea.l 4(a0),a0
   10582:	|  |   move.l (a1),d0
   10584:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
   10588:	|  '-> moveq #24,d0
   1058a:	|      add.l 8(sp),d0
   1058e:	|      move.l d0,-(sp)
   10590:	|      jsr 163a8 <trimStack>
   10596:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   10598:	|      moveq #24,d0
   1059a:	|      add.l 8(sp),d0
   1059e:	|      move.l d0,-(sp)
   105a0:	|      jsr 163a8 <trimStack>
   105a6:	|      addq.l #4,sp
	return BR_CONTINUE;
   105a8:	|      moveq #2,d0
}
   105aa:	'----> rts

000105ac <builtIn_enqueue>:

builtIn(enqueue)
{
	KPrintF("running enqueue\n");
   105ac:	             pea 1af64 <PutChar+0x1fbe>
   105b2:	             jsr 18504 <KPrintF>
   105b8:	             addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   105ba:	             movea.l 8(sp),a0
   105be:	             movea.l 24(a0),a0
   105c2:	             movea.l 8(a0),a0
   105c6:	             move.l (a0),d0
   105c8:	             moveq #6,d1
   105ca:	             cmp.l d0,d1
   105cc:	         ,-- beq.s 105e2 <builtIn_enqueue+0x36>
		KPrintF ("Parameter isn't a stack");
   105ce:	         |   pea 1af4c <PutChar+0x1fa6>
   105d4:	         |   jsr 18504 <KPrintF>
   105da:	         |   addq.l #4,sp
		return BR_ERROR;
   105dc:	         |   moveq #1,d0
   105de:	,--------|-- bra.w 106d0 <builtIn_enqueue+0x124>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
   105e2:	|        '-> movea.l 8(sp),a0
   105e6:	|            movea.l 24(a0),a0
   105ea:	|            movea.l 8(a0),a0
   105ee:	|            movea.l 4(a0),a0
   105f2:	|            move.l (a0),d0
   105f4:	|     ,----- bne.s 1064e <builtIn_enqueue+0xa2>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
   105f6:	|     |      movea.l 8(sp),a0
   105fa:	|     |      movea.l 24(a0),a0
   105fe:	|     |      movea.l 8(a0),a0
   10602:	|     |      move.l 4(a0),d0
   10606:	|     |      move.l d0,d1
   10608:	|     |      movea.l 8(sp),a0
   1060c:	|     |      move.l 24(a0),d0
   10610:	|     |      move.l d1,-(sp)
   10612:	|     |      move.l d0,-(sp)
   10614:	|     |      jsr 15260 <addVarToStack>
   1061a:	|     |      addq.l #8,sp
   1061c:	|     |      tst.w d0
   1061e:	|     |  ,-- bne.s 10626 <builtIn_enqueue+0x7a>
			return BR_ERROR;
   10620:	|     |  |   moveq #1,d0
   10622:	+-----|--|-- bra.w 106d0 <builtIn_enqueue+0x124>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
   10626:	|     |  '-> movea.l 8(sp),a0
   1062a:	|     |      movea.l 24(a0),a0
   1062e:	|     |      movea.l 8(a0),a0
   10632:	|     |      movea.l 4(a0),a1
   10636:	|     |      movea.l 8(sp),a0
   1063a:	|     |      movea.l 24(a0),a0
   1063e:	|     |      movea.l 8(a0),a0
   10642:	|     |      movea.l 4(a0),a0
   10646:	|     |      move.l (a1),d0
   10648:	|     |      move.l d0,4(a0)
   1064c:	|  ,--|----- bra.s 106ae <builtIn_enqueue+0x102>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
   1064e:	|  |  '----> movea.l 8(sp),a0
   10652:	|  |         movea.l 24(a0),a0
   10656:	|  |         movea.l 8(a0),a0
   1065a:	|  |         movea.l 4(a0),a0
   1065e:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
   10662:	|  |         move.l d0,d1
   10664:	|  |         addq.l #8,d1
   10666:	|  |         movea.l 8(sp),a0
   1066a:	|  |         move.l 24(a0),d0
   1066e:	|  |         move.l d1,-(sp)
   10670:	|  |         move.l d0,-(sp)
   10672:	|  |         jsr 15260 <addVarToStack>
   10678:	|  |         addq.l #8,sp
   1067a:	|  |         tst.w d0
   1067c:	|  |     ,-- bne.s 10682 <builtIn_enqueue+0xd6>
			return BR_ERROR;
   1067e:	|  |     |   moveq #1,d0
   10680:	+--|-----|-- bra.s 106d0 <builtIn_enqueue+0x124>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
   10682:	|  |     '-> movea.l 8(sp),a0
   10686:	|  |         movea.l 24(a0),a0
   1068a:	|  |         movea.l 8(a0),a0
   1068e:	|  |         movea.l 4(a0),a0
   10692:	|  |         movea.l 4(a0),a1
   10696:	|  |         movea.l 8(sp),a0
   1069a:	|  |         movea.l 24(a0),a0
   1069e:	|  |         movea.l 8(a0),a0
   106a2:	|  |         movea.l 4(a0),a0
   106a6:	|  |         move.l 8(a1),d0
   106aa:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
   106ae:	|  '-------> moveq #24,d0
   106b0:	|            add.l 8(sp),d0
   106b4:	|            move.l d0,-(sp)
   106b6:	|            jsr 163a8 <trimStack>
   106bc:	|            addq.l #4,sp
	trimStack (&fun -> stack);
   106be:	|            moveq #24,d0
   106c0:	|            add.l 8(sp),d0
   106c4:	|            move.l d0,-(sp)
   106c6:	|            jsr 163a8 <trimStack>
   106cc:	|            addq.l #4,sp
	return BR_CONTINUE;
   106ce:	|            moveq #2,d0
}
   106d0:	'----------> rts

000106d2 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
   106d2:	       move.l a2,-(sp)
	KPrintF("running deleteFromStack\n");
   106d4:	       pea 1af75 <PutChar+0x1fcf>
   106da:	       jsr 18504 <KPrintF>
   106e0:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   106e2:	       movea.l 12(sp),a0
   106e6:	       movea.l 24(a0),a0
   106ea:	       movea.l 8(a0),a0
   106ee:	       move.l (a0),d0
   106f0:	       moveq #6,d1
   106f2:	       cmp.l d0,d1
   106f4:	   ,-- beq.s 1070a <builtIn_deleteFromStack+0x38>
		KPrintF ("Parameter isn't a stack.");
   106f6:	   |   pea 1af1e <PutChar+0x1f78>
   106fc:	   |   jsr 18504 <KPrintF>
   10702:	   |   addq.l #4,sp
		return BR_ERROR;
   10704:	   |   moveq #1,d0
   10706:	,--|-- bra.w 107a0 <builtIn_deleteFromStack+0xce>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
   1070a:	|  '-> movea.l 12(sp),a0
   1070e:	|      movea.l 24(a0),a0
   10712:	|      movea.l 8(a0),a0
   10716:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   1071a:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
   1071c:	|      movea.l 12(sp),a0
   10720:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   10724:	|      clr.l -(sp)
   10726:	|      move.l d1,-(sp)
   10728:	|      move.l d0,-(sp)
   1072a:	|      jsr 15600 <deleteVarFromStack>
   10730:	|      lea 12(sp),sp
   10734:	|      move.l d0,d1
   10736:	|      moveq #28,d0
   10738:	|      add.l 12(sp),d0
   1073c:	|      move.l d1,-(sp)
   1073e:	|      pea 1 <_start+0x1>
   10742:	|      move.l d0,-(sp)
   10744:	|      jsr 16316 <setVariable>
   1074a:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
   1074e:	|      movea.l 12(sp),a0
   10752:	|      movea.l 24(a0),a0
   10756:	|      movea.l 8(a0),a0
   1075a:	|      movea.l 4(a0),a0
   1075e:	|      move.l (a0),d0
   10760:	|      movea.l 12(sp),a0
   10764:	|      movea.l 24(a0),a0
   10768:	|      movea.l 8(a0),a0
   1076c:	|      movea.l 4(a0),a2
   10770:	|      move.l d0,-(sp)
   10772:	|      jsr 16360 <stackFindLast>
   10778:	|      addq.l #4,sp
   1077a:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
   1077e:	|      moveq #24,d0
   10780:	|      add.l 12(sp),d0
   10784:	|      move.l d0,-(sp)
   10786:	|      jsr 163a8 <trimStack>
   1078c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   1078e:	|      moveq #24,d0
   10790:	|      add.l 12(sp),d0
   10794:	|      move.l d0,-(sp)
   10796:	|      jsr 163a8 <trimStack>
   1079c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1079e:	|      moveq #2,d0
}
   107a0:	'----> movea.l (sp)+,a2
   107a2:	       rts

000107a4 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
   107a4:	       move.l a2,-(sp)
	KPrintF("running deleteAllFromStack\n");
   107a6:	       pea 1af8e <PutChar+0x1fe8>
   107ac:	       jsr 18504 <KPrintF>
   107b2:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   107b4:	       movea.l 12(sp),a0
   107b8:	       movea.l 24(a0),a0
   107bc:	       movea.l 8(a0),a0
   107c0:	       move.l (a0),d0
   107c2:	       moveq #6,d1
   107c4:	       cmp.l d0,d1
   107c6:	   ,-- beq.s 107dc <builtIn_deleteAllFromStack+0x38>
		KPrintF ("Parameter isn't a stack.");
   107c8:	   |   pea 1af1e <PutChar+0x1f78>
   107ce:	   |   jsr 18504 <KPrintF>
   107d4:	   |   addq.l #4,sp
		return BR_ERROR;
   107d6:	   |   moveq #1,d0
   107d8:	,--|-- bra.w 10874 <builtIn_deleteAllFromStack+0xd0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
   107dc:	|  '-> movea.l 12(sp),a0
   107e0:	|      movea.l 24(a0),a0
   107e4:	|      movea.l 8(a0),a0
   107e8:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   107ec:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
   107ee:	|      movea.l 12(sp),a0
   107f2:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   107f6:	|      pea 1 <_start+0x1>
   107fa:	|      move.l d1,-(sp)
   107fc:	|      move.l d0,-(sp)
   107fe:	|      jsr 15600 <deleteVarFromStack>
   10804:	|      lea 12(sp),sp
   10808:	|      move.l d0,d1
   1080a:	|      moveq #28,d0
   1080c:	|      add.l 12(sp),d0
   10810:	|      move.l d1,-(sp)
   10812:	|      pea 1 <_start+0x1>
   10816:	|      move.l d0,-(sp)
   10818:	|      jsr 16316 <setVariable>
   1081e:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
   10822:	|      movea.l 12(sp),a0
   10826:	|      movea.l 24(a0),a0
   1082a:	|      movea.l 8(a0),a0
   1082e:	|      movea.l 4(a0),a0
   10832:	|      move.l (a0),d0
   10834:	|      movea.l 12(sp),a0
   10838:	|      movea.l 24(a0),a0
   1083c:	|      movea.l 8(a0),a0
   10840:	|      movea.l 4(a0),a2
   10844:	|      move.l d0,-(sp)
   10846:	|      jsr 16360 <stackFindLast>
   1084c:	|      addq.l #4,sp
   1084e:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
   10852:	|      moveq #24,d0
   10854:	|      add.l 12(sp),d0
   10858:	|      move.l d0,-(sp)
   1085a:	|      jsr 163a8 <trimStack>
   10860:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   10862:	|      moveq #24,d0
   10864:	|      add.l 12(sp),d0
   10868:	|      move.l d0,-(sp)
   1086a:	|      jsr 163a8 <trimStack>
   10870:	|      addq.l #4,sp
	return BR_CONTINUE;
   10872:	|      moveq #2,d0
} 
   10874:	'----> movea.l (sp)+,a2
   10876:	       rts

00010878 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	KPrintF("running popFromStack\n");
   10878:	       pea 1afaa <PutChar+0x2004>
   1087e:	       jsr 18504 <KPrintF>
   10884:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   10886:	       movea.l 8(sp),a0
   1088a:	       movea.l 24(a0),a0
   1088e:	       move.l (a0),d0
   10890:	       moveq #6,d1
   10892:	       cmp.l d0,d1
   10894:	   ,-- beq.s 108a8 <builtIn_popFromStack+0x30>
		KPrintF ("Parameter isn't a stack.");
   10896:	   |   pea 1af1e <PutChar+0x1f78>
   1089c:	   |   jsr 18504 <KPrintF>
   108a2:	   |   addq.l #4,sp
		return BR_ERROR;
   108a4:	   |   moveq #1,d0
   108a6:	,--|-- bra.s 10912 <builtIn_popFromStack+0x9a>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   108a8:	|  '-> movea.l 8(sp),a0
   108ac:	|      movea.l 24(a0),a0
   108b0:	|      movea.l 4(a0),a0
   108b4:	|      move.l (a0),d0
   108b6:	|  ,-- bne.s 108ca <builtIn_popFromStack+0x52>
		KPrintF ("The stack's empty.");
   108b8:	|  |   pea 1afc0 <PutChar+0x201a>
   108be:	|  |   jsr 18504 <KPrintF>
   108c4:	|  |   addq.l #4,sp
		return BR_ERROR;
   108c6:	|  |   moveq #1,d0
   108c8:	+--|-- bra.s 10912 <builtIn_popFromStack+0x9a>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   108ca:	|  '-> moveq #28,d0
   108cc:	|      add.l 8(sp),d0
   108d0:	|      movea.l 8(sp),a0
   108d4:	|      movea.l 24(a0),a0
   108d8:	|      movea.l 4(a0),a0
   108dc:	|      move.l (a0),d1
   108de:	|      move.l d0,-(sp)
   108e0:	|      move.l d1,-(sp)
   108e2:	|      jsr 15ede <copyVariable>
   108e8:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
   108ea:	|      movea.l 8(sp),a0
   108ee:	|      movea.l 24(a0),a0
   108f2:	|      move.l 4(a0),d0
   108f6:	|      move.l d0,-(sp)
   108f8:	|      jsr 163a8 <trimStack>
   108fe:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   10900:	|      moveq #24,d0
   10902:	|      add.l 8(sp),d0
   10906:	|      move.l d0,-(sp)
   10908:	|      jsr 163a8 <trimStack>
   1090e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10910:	|      moveq #2,d0
}
   10912:	'----> rts

00010914 <builtIn_peekStart>:

builtIn(peekStart)
{
	KPrintF("running peekStart\n");
   10914:	       pea 1afd3 <PutChar+0x202d>
   1091a:	       jsr 18504 <KPrintF>
   10920:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   10922:	       movea.l 8(sp),a0
   10926:	       movea.l 24(a0),a0
   1092a:	       move.l (a0),d0
   1092c:	       moveq #6,d1
   1092e:	       cmp.l d0,d1
   10930:	   ,-- beq.s 10944 <builtIn_peekStart+0x30>
		KPrintF ("Parameter isn't a stack.");
   10932:	   |   pea 1af1e <PutChar+0x1f78>
   10938:	   |   jsr 18504 <KPrintF>
   1093e:	   |   addq.l #4,sp
		return BR_ERROR;
   10940:	   |   moveq #1,d0
   10942:	,--|-- bra.s 10998 <builtIn_peekStart+0x84>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   10944:	|  '-> movea.l 8(sp),a0
   10948:	|      movea.l 24(a0),a0
   1094c:	|      movea.l 4(a0),a0
   10950:	|      move.l (a0),d0
   10952:	|  ,-- bne.s 10966 <builtIn_peekStart+0x52>
		KPrintF ("The stack's empty.");
   10954:	|  |   pea 1afc0 <PutChar+0x201a>
   1095a:	|  |   jsr 18504 <KPrintF>
   10960:	|  |   addq.l #4,sp
		return BR_ERROR;
   10962:	|  |   moveq #1,d0
   10964:	+--|-- bra.s 10998 <builtIn_peekStart+0x84>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   10966:	|  '-> moveq #28,d0
   10968:	|      add.l 8(sp),d0
   1096c:	|      movea.l 8(sp),a0
   10970:	|      movea.l 24(a0),a0
   10974:	|      movea.l 4(a0),a0
   10978:	|      move.l (a0),d1
   1097a:	|      move.l d0,-(sp)
   1097c:	|      move.l d1,-(sp)
   1097e:	|      jsr 15ede <copyVariable>
   10984:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   10986:	|      moveq #24,d0
   10988:	|      add.l 8(sp),d0
   1098c:	|      move.l d0,-(sp)
   1098e:	|      jsr 163a8 <trimStack>
   10994:	|      addq.l #4,sp
	return BR_CONTINUE;
   10996:	|      moveq #2,d0
}
   10998:	'----> rts

0001099a <builtIn_peekEnd>:

builtIn(peekEnd)
{
	KPrintF("running peekEnd\n");
   1099a:	       pea 1afe6 <PutChar+0x2040>
   109a0:	       jsr 18504 <KPrintF>
   109a6:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   109a8:	       movea.l 8(sp),a0
   109ac:	       movea.l 24(a0),a0
   109b0:	       move.l (a0),d0
   109b2:	       moveq #6,d1
   109b4:	       cmp.l d0,d1
   109b6:	   ,-- beq.s 109ca <builtIn_peekEnd+0x30>
		KPrintF ("Parameter isn't a stack.");
   109b8:	   |   pea 1af1e <PutChar+0x1f78>
   109be:	   |   jsr 18504 <KPrintF>
   109c4:	   |   addq.l #4,sp
		return BR_ERROR;
   109c6:	   |   moveq #1,d0
   109c8:	,--|-- bra.s 10a20 <builtIn_peekEnd+0x86>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   109ca:	|  '-> movea.l 8(sp),a0
   109ce:	|      movea.l 24(a0),a0
   109d2:	|      movea.l 4(a0),a0
   109d6:	|      move.l (a0),d0
   109d8:	|  ,-- bne.s 109ec <builtIn_peekEnd+0x52>
		KPrintF ("The stack's empty.");
   109da:	|  |   pea 1afc0 <PutChar+0x201a>
   109e0:	|  |   jsr 18504 <KPrintF>
   109e6:	|  |   addq.l #4,sp
		return BR_ERROR;
   109e8:	|  |   moveq #1,d0
   109ea:	+--|-- bra.s 10a20 <builtIn_peekEnd+0x86>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
   109ec:	|  '-> moveq #28,d0
   109ee:	|      add.l 8(sp),d0
   109f2:	|      movea.l 8(sp),a0
   109f6:	|      movea.l 24(a0),a0
   109fa:	|      movea.l 4(a0),a0
   109fe:	|      move.l 4(a0),d1
   10a02:	|      move.l d0,-(sp)
   10a04:	|      move.l d1,-(sp)
   10a06:	|      jsr 15ede <copyVariable>
   10a0c:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   10a0e:	|      moveq #24,d0
   10a10:	|      add.l 8(sp),d0
   10a14:	|      move.l d0,-(sp)
   10a16:	|      jsr 163a8 <trimStack>
   10a1c:	|      addq.l #4,sp
	return BR_CONTINUE;
   10a1e:	|      moveq #2,d0
}
   10a20:	'----> rts

00010a22 <builtIn_random>:

builtIn(random)
{
   10a22:	       subq.l #4,sp
	KPrintF("running random\n");
   10a24:	       pea 1aff7 <PutChar+0x2051>
   10a2a:	       jsr 18504 <KPrintF>
   10a30:	       addq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
   10a32:	       movea.l 12(sp),a0
   10a36:	       move.l 24(a0),d0
   10a3a:	       move.l d0,-(sp)
   10a3c:	       pea 1 <_start+0x1>
   10a40:	       move.l sp,d0
   10a42:	       addq.l #8,d0
   10a44:	       move.l d0,-(sp)
   10a46:	       jsr 15a24 <getValueType>
   10a4c:	       lea 12(sp),sp
   10a50:	       tst.w d0
   10a52:	   ,-- bne.s 10a58 <builtIn_random+0x36>
		return BR_ERROR;
   10a54:	   |   moveq #1,d0
   10a56:	,--|-- bra.s 10aa2 <builtIn_random+0x80>

	trimStack (&fun -> stack);
   10a58:	|  '-> moveq #24,d0
   10a5a:	|      add.l 12(sp),d0
   10a5e:	|      move.l d0,-(sp)
   10a60:	|      jsr 163a8 <trimStack>
   10a66:	|      addq.l #4,sp
	if (num <= 0) num = 1;
   10a68:	|      move.l (sp),d0
   10a6a:	|  ,-- bgt.s 10a70 <builtIn_random+0x4e>
   10a6c:	|  |   moveq #1,d0
   10a6e:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
   10a70:	|  '-> jsr 170c4 <rand>
   10a76:	|      move.l d0,d1
   10a78:	|      move.l (sp),d0
   10a7a:	|      move.l d0,-(sp)
   10a7c:	|      move.l d1,-(sp)
   10a7e:	|      jsr 18f6a <__umodsi3>
   10a84:	|      addq.l #8,sp
   10a86:	|      move.l d0,d1
   10a88:	|      moveq #28,d0
   10a8a:	|      add.l 12(sp),d0
   10a8e:	|      move.l d1,-(sp)
   10a90:	|      pea 1 <_start+0x1>
   10a94:	|      move.l d0,-(sp)
   10a96:	|      jsr 16316 <setVariable>
   10a9c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10aa0:	|      moveq #2,d0
}
   10aa2:	'----> addq.l #4,sp
   10aa4:	       rts

00010aa6 <builtIn_setStatusColour>:

builtIn (setStatusColour)
{
	KPrintF("running setStatusColour\n");
   10aa6:	pea 1b007 <PutChar+0x2061>
   10aac:	jsr 18504 <KPrintF>
   10ab2:	addq.l #4,sp
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
   10ab4:	nop
   10ab6:	rts

00010ab8 <builtIn_setLitStatusColour>:

builtIn (setLitStatusColour)
{
	KPrintF("running setLitStatusColour\n");
   10ab8:	pea 1b020 <PutChar+0x207a>
   10abe:	jsr 18504 <KPrintF>
   10ac4:	addq.l #4,sp

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
   10ac6:	moveq #2,d0
}
   10ac8:	rts

00010aca <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
   10aca:	       subq.l #4,sp
	KPrintF("running setPasteColour\n");
   10acc:	       pea 1b03c <PutChar+0x2096>
   10ad2:	       jsr 18504 <KPrintF>
   10ad8:	       addq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
   10ada:	       movea.l 12(sp),a0
   10ade:	       move.l 24(a0),d0
   10ae2:	       move.l d0,-(sp)
   10ae4:	       pea 1 <_start+0x1>
   10ae8:	       move.l sp,d0
   10aea:	       addq.l #8,d0
   10aec:	       move.l d0,-(sp)
   10aee:	       jsr 15a24 <getValueType>
   10af4:	       lea 12(sp),sp
   10af8:	       tst.w d0
   10afa:	   ,-- bne.s 10b0e <builtIn_setPasteColour+0x44>
		KPrintF ("setPasteColour: Parameter not a number");
   10afc:	   |   pea 1b054 <PutChar+0x20ae>
   10b02:	   |   jsr 18504 <KPrintF>
   10b08:	   |   addq.l #4,sp
		return BR_ERROR;
   10b0a:	   |   moveq #1,d0
   10b0c:	,--|-- bra.s 10b4e <builtIn_setPasteColour+0x84>
	}
	trimStack (&fun -> stack);
   10b0e:	|  '-> moveq #24,d0
   10b10:	|      add.l 12(sp),d0
   10b14:	|      move.l d0,-(sp)
   10b16:	|      jsr 163a8 <trimStack>
   10b1c:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
   10b1e:	|      move.l (sp),d0
   10b20:	|      move.l d0,d0
   10b22:	|      move.w d0,1e726 <textPaletteIndex>

	if( textPaletteIndex > 31) {
   10b28:	|      move.w 1e726 <textPaletteIndex>,d0
   10b2e:	|      cmpi.w #31,d0
   10b32:	|  ,-- bls.s 10b4c <builtIn_setPasteColour+0x82>
		KPrintF ("setPasteColour: Paletteindex out of Range");
   10b34:	|  |   pea 1b07b <PutChar+0x20d5>
   10b3a:	|  |   jsr 18504 <KPrintF>
   10b40:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
   10b42:	|  |   clr.w 1e726 <textPaletteIndex>
		return BR_ERROR;
   10b48:	|  |   moveq #1,d0
   10b4a:	+--|-- bra.s 10b4e <builtIn_setPasteColour+0x84>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
   10b4c:	|  '-> moveq #2,d0
}
   10b4e:	'----> addq.l #4,sp
   10b50:	       rts

00010b52 <builtIn_setBlankColour>:

builtIn (setBlankColour)
{
	KPrintF("running setBlankColour\n");
   10b52:	pea 1b0a5 <PutChar+0x20ff>
   10b58:	jsr 18504 <KPrintF>
   10b5e:	addq.l #4,sp
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   10b60:	moveq #2,d0
}
   10b62:	rts

00010b64 <builtIn_setBurnColour>:

builtIn (setBurnColour)
{
	KPrintF("running setBurnColour\n");
   10b64:	pea 1b0bd <PutChar+0x2117>
   10b6a:	jsr 18504 <KPrintF>
   10b70:	addq.l #4,sp

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   10b72:	moveq #2,d0
}
   10b74:	rts

00010b76 <builtIn_setFont>:


builtIn(setFont)
{
   10b76:	       lea -16(sp),sp
   10b7a:	       move.l a6,-(sp)
	KPrintF("running setFont\n");
   10b7c:	       pea 1b0d4 <PutChar+0x212e>
   10b82:	       jsr 18504 <KPrintF>
   10b88:	       addq.l #4,sp
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10b8a:	       movea.l 28(sp),a0
   10b8e:	       move.l 24(a0),d0
   10b92:	       move.l d0,-(sp)
   10b94:	       pea 1 <_start+0x1>
   10b98:	       lea 12(sp),a0
   10b9c:	       move.l a0,-(sp)
   10b9e:	       jsr 15a24 <getValueType>
   10ba4:	       lea 12(sp),sp
   10ba8:	       tst.w d0
   10baa:	   ,-- bne.s 10bb2 <builtIn_setFont+0x3c>
   10bac:	   |   moveq #1,d0
   10bae:	,--|-- bra.w 10c60 <builtIn_setFont+0xea>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
   10bb2:	|  '-> moveq #24,d0
   10bb4:	|      add.l 28(sp),d0
   10bb8:	|      move.l d0,-(sp)
   10bba:	|      jsr 163a8 <trimStack>
   10bc0:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10bc2:	|      movea.l 28(sp),a0
   10bc6:	|      move.l 24(a0),d0
   10bca:	|      move.l d0,-(sp)
   10bcc:	|      jsr 15ffa <getTextFromAnyVar>
   10bd2:	|      addq.l #4,sp
   10bd4:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
   10bd8:	|  ,-- bne.s 10be0 <builtIn_setFont+0x6a>
   10bda:	|  |   moveq #1,d0
   10bdc:	+--|-- bra.w 10c60 <builtIn_setFont+0xea>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
   10be0:	|  '-> moveq #24,d0
   10be2:	|      add.l 28(sp),d0
   10be6:	|      move.l d0,-(sp)
   10be8:	|      jsr 163a8 <trimStack>
   10bee:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10bf0:	|      movea.l 28(sp),a0
   10bf4:	|      move.l 24(a0),d0
   10bf8:	|      move.l d0,-(sp)
   10bfa:	|      pea 5 <_start+0x5>
   10bfe:	|      lea 16(sp),a0
   10c02:	|      move.l a0,-(sp)
   10c04:	|      jsr 15a24 <getValueType>
   10c0a:	|      lea 12(sp),sp
   10c0e:	|      tst.w d0
   10c10:	|  ,-- bne.s 10c16 <builtIn_setFont+0xa0>
   10c12:	|  |   moveq #1,d0
   10c14:	+--|-- bra.s 10c60 <builtIn_setFont+0xea>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
   10c16:	|  '-> moveq #24,d0
   10c18:	|      add.l 28(sp),d0
   10c1c:	|      move.l d0,-(sp)
   10c1e:	|      jsr 163a8 <trimStack>
   10c24:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
   10c26:	|      move.l 4(sp),d1
   10c2a:	|      move.l 8(sp),d0
   10c2e:	|      move.l d1,-(sp)
   10c30:	|      move.l 20(sp),-(sp)
   10c34:	|      move.l d0,-(sp)
   10c36:	|      jsr 1685c <loadFont>
   10c3c:	|      lea 12(sp),sp
   10c40:	|      tst.w d0
   10c42:	|  ,-- bne.s 10c48 <builtIn_setFont+0xd2>
   10c44:	|  |   moveq #1,d0
   10c46:	+--|-- bra.s 10c60 <builtIn_setFont+0xea>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
   10c48:	|  '-> move.l 16(sp),12(sp)
   10c4e:	|      move.l 1e81c <SysBase>,d0
   10c54:	|      movea.l d0,a6
   10c56:	|      movea.l 12(sp),a1
   10c5a:	|      jsr -690(a6)

    return BR_CONTINUE;
   10c5e:	|      moveq #2,d0
}
   10c60:	'----> movea.l (sp)+,a6
   10c62:	       lea 16(sp),sp
   10c66:	       rts

00010c68 <builtIn_inFont>:

builtIn(inFont)
{
   10c68:	       subq.l #4,sp
	KPrintF("running inFont\n");
   10c6a:	       pea 1b0e5 <PutChar+0x213f>
   10c70:	       jsr 18504 <KPrintF>
   10c76:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   10c78:	       movea.l 12(sp),a0
   10c7c:	       move.l 24(a0),d0
   10c80:	       move.l d0,-(sp)
   10c82:	       jsr 15ffa <getTextFromAnyVar>
   10c88:	       addq.l #4,sp
   10c8a:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
   10c8c:	   ,-- bne.s 10c92 <builtIn_inFont+0x2a>
   10c8e:	   |   moveq #1,d0
   10c90:	,--|-- bra.s 10cc8 <builtIn_inFont+0x60>
	trimStack (&fun -> stack);
   10c92:	|  '-> moveq #24,d0
   10c94:	|      add.l 12(sp),d0
   10c98:	|      move.l d0,-(sp)
   10c9a:	|      jsr 163a8 <trimStack>
   10ca0:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
   10ca2:	|      move.l (sp),-(sp)
   10ca4:	|      jsr 1684a <isInFont>
   10caa:	|      addq.l #4,sp
   10cac:	|      movea.w d0,a0
   10cae:	|      moveq #28,d0
   10cb0:	|      add.l 12(sp),d0
   10cb4:	|      move.l a0,-(sp)
   10cb6:	|      pea 1 <_start+0x1>
   10cba:	|      move.l d0,-(sp)
   10cbc:	|      jsr 16316 <setVariable>
   10cc2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10cc6:	|      moveq #2,d0
}
   10cc8:	'----> addq.l #4,sp
   10cca:	       rts

00010ccc <builtIn_pasteString>:

builtIn(pasteString)
{
   10ccc:	       lea -16(sp),sp
   10cd0:	       move.l a6,-(sp)
   10cd2:	       move.l d2,-(sp)
	KPrintF("running pasteString\n");
   10cd4:	       pea 1b0f5 <PutChar+0x214f>
   10cda:	       jsr 18504 <KPrintF>
   10ce0:	       addq.l #4,sp
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10ce2:	       movea.l 32(sp),a0
   10ce6:	       move.l 24(a0),d0
   10cea:	       move.l d0,-(sp)
   10cec:	       jsr 15ffa <getTextFromAnyVar>
   10cf2:	       addq.l #4,sp
   10cf4:	       move.l d0,20(sp)
    trimStack(&fun->stack);
   10cf8:	       moveq #24,d0
   10cfa:	       add.l 32(sp),d0
   10cfe:	       move.l d0,-(sp)
   10d00:	       jsr 163a8 <trimStack>
   10d06:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10d08:	       movea.l 32(sp),a0
   10d0c:	       move.l 24(a0),d0
   10d10:	       move.l d0,-(sp)
   10d12:	       pea 1 <_start+0x1>
   10d16:	       lea 20(sp),a0
   10d1a:	       move.l a0,-(sp)
   10d1c:	       jsr 15a24 <getValueType>
   10d22:	       lea 12(sp),sp
   10d26:	       tst.w d0
   10d28:	   ,-- bne.s 10d30 <builtIn_pasteString+0x64>
   10d2a:	   |   moveq #1,d0
   10d2c:	,--|-- bra.w 10dd2 <builtIn_pasteString+0x106>
    trimStack(&fun->stack);
   10d30:	|  '-> moveq #24,d0
   10d32:	|      add.l 32(sp),d0
   10d36:	|      move.l d0,-(sp)
   10d38:	|      jsr 163a8 <trimStack>
   10d3e:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10d40:	|      movea.l 32(sp),a0
   10d44:	|      move.l 24(a0),d0
   10d48:	|      move.l d0,-(sp)
   10d4a:	|      pea 1 <_start+0x1>
   10d4e:	|      lea 16(sp),a0
   10d52:	|      move.l a0,-(sp)
   10d54:	|      jsr 15a24 <getValueType>
   10d5a:	|      lea 12(sp),sp
   10d5e:	|      tst.w d0
   10d60:	|  ,-- bne.s 10d66 <builtIn_pasteString+0x9a>
   10d62:	|  |   moveq #1,d0
   10d64:	+--|-- bra.s 10dd2 <builtIn_pasteString+0x106>
    trimStack(&fun->stack);
   10d66:	|  '-> moveq #24,d0
   10d68:	|      add.l 32(sp),d0
   10d6c:	|      move.l d0,-(sp)
   10d6e:	|      jsr 163a8 <trimStack>
   10d74:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
   10d76:	|      move.l 8(sp),d0
   10d7a:	|      cmpi.l #65535,d0
   10d80:	|  ,-- bne.s 10da0 <builtIn_pasteString+0xd4>
		x = (winWidth - stringWidth(newText)) >> 1;
   10d82:	|  |   move.l 1e762 <winWidth>,d2
   10d88:	|  |   move.l 20(sp),-(sp)
   10d8c:	|  |   jsr 16b0e <stringWidth>
   10d92:	|  |   addq.l #4,sp
   10d94:	|  |   move.l d2,d1
   10d96:	|  |   sub.l d0,d1
   10d98:	|  |   move.l d1,d0
   10d9a:	|  |   lsr.l #1,d0
   10d9c:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   10da0:	|  '-> move.l 12(sp),d1
   10da4:	|      move.l 8(sp),d0
   10da8:	|      move.l d1,-(sp)
   10daa:	|      move.l d0,-(sp)
   10dac:	|      move.l 28(sp),-(sp)
   10db0:	|      jsr 16a30 <pasteStringToBackdrop>
   10db6:	|      lea 12(sp),sp
    FreeVec(newText); 
   10dba:	|      move.l 20(sp),16(sp)
   10dc0:	|      move.l 1e81c <SysBase>,d0
   10dc6:	|      movea.l d0,a6
   10dc8:	|      movea.l 16(sp),a1
   10dcc:	|      jsr -690(a6)
    return BR_CONTINUE;
   10dd0:	|      moveq #2,d0
}
   10dd2:	'----> move.l (sp)+,d2
   10dd4:	       movea.l (sp)+,a6
   10dd6:	       lea 16(sp),sp
   10dda:	       rts

00010ddc <builtIn_anim>:

builtIn(anim)
{
   10ddc:	       lea -12(sp),sp
	KPrintF("running anim\n");
   10de0:	       pea 1b10a <PutChar+0x2164>
   10de6:	       jsr 18504 <KPrintF>
   10dec:	       addq.l #4,sp
	UNUSEDALL
	if (numParams < 2) {
   10dee:	       moveq #1,d0
   10df0:	       cmp.l 16(sp),d0
   10df4:	   ,-- blt.s 10e0a <builtIn_anim+0x2e>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10df6:	   |   pea 1b118 <PutChar+0x2172>
   10dfc:	   |   jsr 18504 <KPrintF>
   10e02:	   |   addq.l #4,sp
		return BR_ERROR;
   10e04:	   |   moveq #1,d0
   10e06:	,--|-- bra.w 10e98 <builtIn_anim+0xbc>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   10e0a:	|  '-> moveq #24,d1
   10e0c:	|      add.l 20(sp),d1
   10e10:	|      move.l 16(sp),d0
   10e14:	|      subq.l #1,d0
   10e16:	|      move.l d1,-(sp)
   10e18:	|      move.l d0,-(sp)
   10e1a:	|      jsr a05a <createPersonaAnim>
   10e20:	|      addq.l #8,sp
   10e22:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e26:	|      movea.l 20(sp),a0
   10e2a:	|      move.l 24(a0),d0
   10e2e:	|      move.l d0,-(sp)
   10e30:	|      pea 5 <_start+0x5>
   10e34:	|      lea 8(sp),a0
   10e38:	|      move.l a0,-(sp)
   10e3a:	|      jsr 15a24 <getValueType>
   10e40:	|      lea 12(sp),sp
   10e44:	|      tst.w d0
   10e46:	|  ,-- bne.s 10e4c <builtIn_anim+0x70>
   10e48:	|  |   moveq #1,d0
   10e4a:	+--|-- bra.s 10e98 <builtIn_anim+0xbc>
	trimStack (&fun -> stack);
   10e4c:	|  '-> moveq #24,d0
   10e4e:	|      add.l 20(sp),d0
   10e52:	|      move.l d0,-(sp)
   10e54:	|      jsr 163a8 <trimStack>
   10e5a:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   10e5c:	|      move.l (sp),d0
   10e5e:	|      move.l d0,-(sp)
   10e60:	|      jsr 17226 <loadBankForAnim>
   10e66:	|      addq.l #4,sp
   10e68:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   10e6c:	|  ,-- bne.s 10e72 <builtIn_anim+0x96>
   10e6e:	|  |   moveq #1,d0
   10e70:	+--|-- bra.s 10e98 <builtIn_anim+0xbc>
	setBankFile (ba, sprBanky);
   10e72:	|  '-> move.l 4(sp),-(sp)
   10e76:	|      move.l 12(sp),-(sp)
   10e7a:	|      jsr bf66 <setBankFile>
   10e80:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10e82:	|      moveq #28,d0
   10e84:	|      add.l 20(sp),d0
   10e88:	|      move.l 8(sp),-(sp)
   10e8c:	|      move.l d0,-(sp)
   10e8e:	|      jsr 162d2 <newAnimationVariable>
   10e94:	|      addq.l #8,sp
	return BR_CONTINUE;
   10e96:	|      moveq #2,d0
}
   10e98:	'----> lea 12(sp),sp
   10e9c:	       rts

00010e9e <builtIn_costume>:

builtIn(costume)
{
   10e9e:	          lea -32(sp),sp
   10ea2:	          move.l a6,-(sp)
   10ea4:	          move.l a2,-(sp)
	KPrintF("running costume\n");
   10ea6:	          pea 1b152 <PutChar+0x21ac>
   10eac:	          jsr 18504 <KPrintF>
   10eb2:	          addq.l #4,sp
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   10eb4:	          moveq #8,d0
   10eb6:	          move.l d0,32(sp)
   10eba:	          clr.l 28(sp)
   10ebe:	          move.l 1e81c <SysBase>,d0
   10ec4:	          movea.l d0,a6
   10ec6:	          move.l 32(sp),d0
   10eca:	          move.l 28(sp),d1
   10ece:	          jsr -684(a6)
   10ed2:	          move.l d0,24(sp)
   10ed6:	          move.l 24(sp),d0
   10eda:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   10ede:	      ,-- bne.s 10ee6 <builtIn_costume+0x48>
   10ee0:	      |   moveq #1,d0
   10ee2:	,-----|-- bra.w 10fce <builtIn_costume+0x130>
    newPersona->numDirections = numParams / 3;
   10ee6:	|     '-> move.l 44(sp),d0
   10eea:	|         pea 3 <_start+0x3>
   10eee:	|         move.l d0,-(sp)
   10ef0:	|         jsr 18f0e <__divsi3>
   10ef6:	|         addq.l #8,sp
   10ef8:	|         movea.l 20(sp),a0
   10efc:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   10f00:	|         tst.l 44(sp)
   10f04:	|     ,-- beq.s 10f1a <builtIn_costume+0x7c>
   10f06:	|     |   movea.l 20(sp),a0
   10f0a:	|     |   move.l 4(a0),d1
   10f0e:	|     |   move.l d1,d0
   10f10:	|     |   add.l d0,d0
   10f12:	|     |   add.l d1,d0
   10f14:	|     |   cmp.l 44(sp),d0
   10f18:	|  ,--|-- beq.s 10f2e <builtIn_costume+0x90>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   10f1a:	|  |  '-> pea 1b163 <PutChar+0x21bd>
   10f20:	|  |      jsr 18504 <KPrintF>
   10f26:	|  |      addq.l #4,sp
        return BR_ERROR;
   10f28:	|  |      moveq #1,d0
   10f2a:	+--|----- bra.w 10fce <builtIn_costume+0x130>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   10f2e:	|  '----> move.l 44(sp),d0
   10f32:	|         add.l d0,d0
   10f34:	|         add.l d0,d0
   10f36:	|         move.l d0,16(sp)
   10f3a:	|         clr.l 12(sp)
   10f3e:	|         move.l 1e81c <SysBase>,d0
   10f44:	|         movea.l d0,a6
   10f46:	|         move.l 16(sp),d0
   10f4a:	|         move.l 12(sp),d1
   10f4e:	|         jsr -684(a6)
   10f52:	|         move.l d0,8(sp)
   10f56:	|         move.l 8(sp),d0
   10f5a:	|         movea.l 20(sp),a0
   10f5e:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   10f60:	|         movea.l 20(sp),a0
   10f64:	|         move.l (a0),d0
   10f66:	|     ,-- bne.s 10f6c <builtIn_costume+0xce>
   10f68:	|     |   moveq #1,d0
   10f6a:	+-----|-- bra.s 10fce <builtIn_costume+0x130>
    for (iii = numParams - 1; iii >= 0; iii--) {
   10f6c:	|     '-> move.l 44(sp),d0
   10f70:	|         subq.l #1,d0
   10f72:	|         move.l d0,36(sp)
   10f76:	|     ,-- bra.s 10fb2 <builtIn_costume+0x114>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   10f78:	|  ,--|-> movea.l 48(sp),a0
   10f7c:	|  |  |   move.l 24(a0),d0
   10f80:	|  |  |   movea.l 20(sp),a0
   10f84:	|  |  |   movea.l (a0),a0
   10f86:	|  |  |   move.l 36(sp),d1
   10f8a:	|  |  |   add.l d1,d1
   10f8c:	|  |  |   add.l d1,d1
   10f8e:	|  |  |   lea (0,a0,d1.l),a2
   10f92:	|  |  |   move.l d0,-(sp)
   10f94:	|  |  |   jsr 15efc <getAnimationFromVar>
   10f9a:	|  |  |   addq.l #4,sp
   10f9c:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   10f9e:	|  |  |   moveq #24,d0
   10fa0:	|  |  |   add.l 48(sp),d0
   10fa4:	|  |  |   move.l d0,-(sp)
   10fa6:	|  |  |   jsr 163a8 <trimStack>
   10fac:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   10fae:	|  |  |   subq.l #1,36(sp)
   10fb2:	|  |  '-> tst.l 36(sp)
   10fb6:	|  '----- bge.s 10f78 <builtIn_costume+0xda>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   10fb8:	|         moveq #28,d0
   10fba:	|         add.l 48(sp),d0
   10fbe:	|         move.l 20(sp),-(sp)
   10fc2:	|         move.l d0,-(sp)
   10fc4:	|         jsr 162f4 <newCostumeVariable>
   10fca:	|         addq.l #8,sp
    return BR_CONTINUE;
   10fcc:	|         moveq #2,d0
}
   10fce:	'-------> movea.l (sp)+,a2
   10fd0:	          movea.l (sp)+,a6
   10fd2:	          lea 32(sp),sp
   10fd6:	          rts

00010fd8 <builtIn_launch>:

builtIn(launch)
{
   10fd8:	          lea -20(sp),sp
   10fdc:	          move.l a6,-(sp)
	KPrintF("running launch\n");
   10fde:	          pea 1b1ae <PutChar+0x2208>
   10fe4:	          jsr 18504 <KPrintF>
   10fea:	          addq.l #4,sp
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   10fec:	          movea.l 32(sp),a0
   10ff0:	          move.l 24(a0),d0
   10ff4:	          move.l d0,-(sp)
   10ff6:	          jsr 15ffa <getTextFromAnyVar>
   10ffc:	          addq.l #4,sp
   10ffe:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   11002:	      ,-- bne.s 1100a <builtIn_launch+0x32>
   11004:	      |   moveq #1,d0
   11006:	,-----|-- bra.w 11138 <builtIn_launch+0x160>

    char * newText = encodeFilename(newTextA);
   1100a:	|     '-> move.l 20(sp),-(sp)
   1100e:	|         jsr 2fe <encodeFilename>
   11014:	|         addq.l #4,sp
   11016:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   1101a:	|         moveq #24,d0
   1101c:	|         add.l 32(sp),d0
   11020:	|         move.l d0,-(sp)
   11022:	|         jsr 163a8 <trimStack>
   11028:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   1102a:	|         movea.l 20(sp),a0
   1102e:	|         move.b (a0),d0
   11030:	|         cmpi.b #104,d0
   11034:	|  ,----- bne.s 1109e <builtIn_launch+0xc6>
        newTextA[1] == 't' &&
   11036:	|  |      movea.l 20(sp),a0
   1103a:	|  |      addq.l #1,a0
   1103c:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   1103e:	|  |      cmpi.b #116,d0
   11042:	|  +----- bne.s 1109e <builtIn_launch+0xc6>
        newTextA[2] == 't' &&
   11044:	|  |      movea.l 20(sp),a0
   11048:	|  |      addq.l #2,a0
   1104a:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   1104c:	|  |      cmpi.b #116,d0
   11050:	|  +----- bne.s 1109e <builtIn_launch+0xc6>
        newTextA[3] == 'p' &&
   11052:	|  |      movea.l 20(sp),a0
   11056:	|  |      addq.l #3,a0
   11058:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   1105a:	|  |      cmpi.b #112,d0
   1105e:	|  +----- bne.s 1109e <builtIn_launch+0xc6>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   11060:	|  |      movea.l 20(sp),a0
   11064:	|  |      addq.l #4,a0
   11066:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   11068:	|  |      cmpi.b #58,d0
   1106c:	|  |  ,-- beq.s 1108a <builtIn_launch+0xb2>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   1106e:	|  |  |   movea.l 20(sp),a0
   11072:	|  |  |   addq.l #4,a0
   11074:	|  |  |   move.b (a0),d0
   11076:	|  |  |   cmpi.b #115,d0
   1107a:	|  +--|-- bne.s 1109e <builtIn_launch+0xc6>
   1107c:	|  |  |   movea.l 20(sp),a0
   11080:	|  |  |   addq.l #5,a0
   11082:	|  |  |   move.b (a0),d0
   11084:	|  |  |   cmpi.b #58,d0
   11088:	|  +--|-- bne.s 1109e <builtIn_launch+0xc6>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   1108a:	|  |  '-> move.l 20(sp),-(sp)
   1108e:	|  |      jsr b8 <copyString>
   11094:	|  |      addq.l #4,sp
   11096:	|  |      move.l d0,1e8de <launchMe>
   1109c:	|  |  ,-- bra.s 110f0 <builtIn_launch+0x118>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   1109e:	|  '--|-> move.l 1e776 <gamePath>,d0
   110a4:	|     |   pea 1b1be <PutChar+0x2218>
   110aa:	|     |   move.l d0,-(sp)
   110ac:	|     |   jsr 14f50 <joinStrings>
   110b2:	|     |   addq.l #8,sp
   110b4:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   110b8:	|     |   move.l 16(sp),-(sp)
   110bc:	|     |   move.l 16(sp),-(sp)
   110c0:	|     |   jsr 14f50 <joinStrings>
   110c6:	|     |   addq.l #8,sp
   110c8:	|     |   move.l d0,1e8de <launchMe>
        FreeVec(newText);
   110ce:	|     |   move.l 16(sp),8(sp)
   110d4:	|     |   move.l 1e81c <SysBase>,d0
   110da:	|     |   movea.l d0,a6
   110dc:	|     |   movea.l 8(sp),a1
   110e0:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   110e4:	|     |   move.l 1e8de <launchMe>,d0
   110ea:	|     +-- bne.s 110f0 <builtIn_launch+0x118>
   110ec:	|     |   moveq #1,d0
   110ee:	+-----|-- bra.s 11138 <builtIn_launch+0x160>
    }
    FreeVec(newTextA);
   110f0:	|     '-> move.l 20(sp),4(sp)
   110f6:	|         move.l 1e81c <SysBase>,d0
   110fc:	|         movea.l d0,a6
   110fe:	|         movea.l 4(sp),a1
   11102:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   11106:	|         clr.l -(sp)
   11108:	|         jsr 4f12 <setGraphicsWindow>
   1110e:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   11110:	|         moveq #28,d0
   11112:	|         add.l 32(sp),d0
   11116:	|         pea 1 <_start+0x1>
   1111a:	|         pea 1 <_start+0x1>
   1111e:	|         move.l d0,-(sp)
   11120:	|         jsr 16316 <setVariable>
   11126:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   1112a:	|         moveq #28,d0
   1112c:	|         add.l 32(sp),d0
   11130:	|         move.l d0,1e8e2 <launchResult>

    return BR_KEEP_AND_PAUSE;
   11136:	|         moveq #0,d0
}
   11138:	'-------> movea.l (sp)+,a6
   1113a:	          lea 20(sp),sp
   1113e:	          rts

00011140 <builtIn_pause>:

builtIn(pause)
{
   11140:	       subq.l #4,sp
	//KPrintF("running pause\n");
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11142:	       movea.l 12(sp),a0
   11146:	       move.l 24(a0),d0
   1114a:	       move.l d0,-(sp)
   1114c:	       pea 1 <_start+0x1>
   11150:	       move.l sp,d0
   11152:	       addq.l #8,d0
   11154:	       move.l d0,-(sp)
   11156:	       jsr 15a24 <getValueType>
   1115c:	       lea 12(sp),sp
   11160:	       tst.w d0
   11162:	   ,-- bne.s 11168 <builtIn_pause+0x28>
   11164:	   |   moveq #1,d0
   11166:	,--|-- bra.s 11196 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   11168:	|  '-> moveq #24,d0
   1116a:	|      add.l 12(sp),d0
   1116e:	|      move.l d0,-(sp)
   11170:	|      jsr 163a8 <trimStack>
   11176:	|      addq.l #4,sp
	if (theTime > 0) {
   11178:	|      move.l (sp),d0
   1117a:	|  ,-- ble.s 11194 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   1117c:	|  |   move.l (sp),d0
   1117e:	|  |   subq.l #1,d0
   11180:	|  |   movea.l 12(sp),a0
   11184:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   11188:	|  |   movea.l 12(sp),a0
   1118c:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   11190:	|  |   moveq #0,d0
   11192:	+--|-- bra.s 11196 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   11194:	|  '-> moveq #2,d0
}
   11196:	'----> addq.l #4,sp
   11198:	       rts

0001119a <builtIn_completeTimers>:

builtIn(completeTimers)
{
	KPrintF("running completeTimers\n");
   1119a:	pea 1b1c0 <PutChar+0x221a>
   111a0:	jsr 18504 <KPrintF>
   111a6:	addq.l #4,sp
	UNUSEDALL
	completeTimers();
   111a8:	jsr 5674 <completeTimers>
	return BR_CONTINUE;
   111ae:	moveq #2,d0
}
   111b0:	rts

000111b2 <builtIn_callEvent>:

builtIn(callEvent)
{
   111b2:	       lea -12(sp),sp
	KPrintF("running callEvent\n");
   111b6:	       pea 1b1d8 <PutChar+0x2232>
   111bc:	       jsr 18504 <KPrintF>
   111c2:	       addq.l #4,sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   111c4:	       movea.l 20(sp),a0
   111c8:	       move.l 24(a0),d0
   111cc:	       move.l d0,-(sp)
   111ce:	       pea 7 <_start+0x7>
   111d2:	       lea 8(sp),a0
   111d6:	       move.l a0,-(sp)
   111d8:	       jsr 15a24 <getValueType>
   111de:	       lea 12(sp),sp
   111e2:	       tst.w d0
   111e4:	   ,-- bne.s 111ec <builtIn_callEvent+0x3a>
   111e6:	   |   moveq #1,d0
   111e8:	,--|-- bra.w 11282 <builtIn_callEvent+0xd0>
	trimStack (&fun -> stack);
   111ec:	|  '-> moveq #24,d0
   111ee:	|      add.l 20(sp),d0
   111f2:	|      move.l d0,-(sp)
   111f4:	|      jsr 163a8 <trimStack>
   111fa:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   111fc:	|      movea.l 20(sp),a0
   11200:	|      move.l 24(a0),d0
   11204:	|      move.l d0,-(sp)
   11206:	|      pea 7 <_start+0x7>
   1120a:	|      moveq #12,d0
   1120c:	|      add.l sp,d0
   1120e:	|      move.l d0,-(sp)
   11210:	|      jsr 15a24 <getValueType>
   11216:	|      lea 12(sp),sp
   1121a:	|      tst.w d0
   1121c:	|  ,-- bne.s 11222 <builtIn_callEvent+0x70>
   1121e:	|  |   moveq #1,d0
   11220:	+--|-- bra.s 11282 <builtIn_callEvent+0xd0>
	trimStack (&fun -> stack);
   11222:	|  '-> moveq #24,d0
   11224:	|      add.l 20(sp),d0
   11228:	|      move.l d0,-(sp)
   1122a:	|      jsr 163a8 <trimStack>
   11230:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   11232:	|      move.l (sp),d1
   11234:	|      move.l 4(sp),d0
   11238:	|      move.l d1,-(sp)
   1123a:	|      move.l d0,-(sp)
   1123c:	|      jsr df40 <getCombinationFunction>
   11242:	|      addq.l #8,sp
   11244:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   11248:	|  ,-- beq.s 11268 <builtIn_callEvent+0xb6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1124a:	|  |   moveq #28,d0
   1124c:	|  |   add.l 20(sp),d0
   11250:	|  |   move.l 8(sp),-(sp)
   11254:	|  |   pea 2 <_start+0x2>
   11258:	|  |   move.l d0,-(sp)
   1125a:	|  |   jsr 16316 <setVariable>
   11260:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   11264:	|  |   moveq #4,d0
   11266:	+--|-- bra.s 11282 <builtIn_callEvent+0xd0>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   11268:	|  '-> moveq #28,d0
   1126a:	|      add.l 20(sp),d0
   1126e:	|      clr.l -(sp)
   11270:	|      pea 1 <_start+0x1>
   11274:	|      move.l d0,-(sp)
   11276:	|      jsr 16316 <setVariable>
   1127c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11280:	|      moveq #2,d0
}
   11282:	'----> lea 12(sp),sp
   11286:	       rts

00011288 <builtIn_quitGame>:

BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	KPrintF("running quitGame\n");
   11288:	pea 1b1eb <PutChar+0x2245>
   1128e:	jsr 18504 <KPrintF>
   11294:	addq.l #4,sp
	UNUSEDALL
	reallyWantToQuit = TRUE;
   11296:	move.w #1,1e8ee <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   1129e:	moveq #2,d0
}
   112a0:	rts

000112a2 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{	
	UNUSEDALL
	trimStack (&fun -> stack);
   112a2:	moveq #24,d0
   112a4:	add.l 8(sp),d0
   112a8:	move.l d0,-(sp)
   112aa:	jsr 163a8 <trimStack>
   112b0:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   112b2:	pea 1b1fd <PutChar+0x2257>
   112b8:	jsr 18504 <KPrintF>
   112be:	addq.l #4,sp
	return BR_CONTINUE;
   112c0:	moveq #2,d0
}
   112c2:	rts

000112c4 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   112c4:	pea 1b1fd <PutChar+0x2257>
   112ca:	jsr 18504 <KPrintF>
   112d0:	addq.l #4,sp
	return BR_CONTINUE;
   112d2:	moveq #2,d0
}
   112d4:	rts

000112d6 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   112d6:	pea 1b1fd <PutChar+0x2257>
   112dc:	jsr 18504 <KPrintF>
   112e2:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   112e4:	moveq #2,d0
}
   112e6:	rts

000112e8 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   112e8:	pea 1b1fd <PutChar+0x2257>
   112ee:	jsr 18504 <KPrintF>
   112f4:	addq.l #4,sp
	return BR_CONTINUE;
   112f6:	moveq #2,d0
}
   112f8:	rts

000112fa <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   112fa:	pea 1b1fd <PutChar+0x2257>
   11300:	jsr 18504 <KPrintF>
   11306:	addq.l #4,sp
	return BR_CONTINUE;
   11308:	moveq #2,d0
}
   1130a:	rts

0001130c <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1130c:	pea 1b1fd <PutChar+0x2257>
   11312:	jsr 18504 <KPrintF>
   11318:	addq.l #4,sp
	return BR_CONTINUE;
   1131a:	moveq #2,d0
}
   1131c:	rts

0001131e <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   1131e:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11322:	       movea.l 20(sp),a0
   11326:	       move.l 24(a0),d0
   1132a:	       move.l d0,-(sp)
   1132c:	       pea 1 <_start+0x1>
   11330:	       moveq #16,d0
   11332:	       add.l sp,d0
   11334:	       move.l d0,-(sp)
   11336:	       jsr 15a24 <getValueType>
   1133c:	       lea 12(sp),sp
   11340:	       tst.w d0
   11342:	   ,-- bne.s 1134a <builtIn_startMusic+0x2c>
   11344:	   |   moveq #1,d0
   11346:	,--|-- bra.w 113ea <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1134a:	|  '-> moveq #24,d0
   1134c:	|      add.l 20(sp),d0
   11350:	|      move.l d0,-(sp)
   11352:	|      jsr 163a8 <trimStack>
   11358:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1135a:	|      movea.l 20(sp),a0
   1135e:	|      move.l 24(a0),d0
   11362:	|      move.l d0,-(sp)
   11364:	|      pea 1 <_start+0x1>
   11368:	|      moveq #12,d0
   1136a:	|      add.l sp,d0
   1136c:	|      move.l d0,-(sp)
   1136e:	|      jsr 15a24 <getValueType>
   11374:	|      lea 12(sp),sp
   11378:	|      tst.w d0
   1137a:	|  ,-- bne.s 11380 <builtIn_startMusic+0x62>
   1137c:	|  |   moveq #1,d0
   1137e:	+--|-- bra.s 113ea <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   11380:	|  '-> moveq #24,d0
   11382:	|      add.l 20(sp),d0
   11386:	|      move.l d0,-(sp)
   11388:	|      jsr 163a8 <trimStack>
   1138e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11390:	|      movea.l 20(sp),a0
   11394:	|      move.l 24(a0),d0
   11398:	|      move.l d0,-(sp)
   1139a:	|      pea 5 <_start+0x5>
   1139e:	|      lea 8(sp),a0
   113a2:	|      move.l a0,-(sp)
   113a4:	|      jsr 15a24 <getValueType>
   113aa:	|      lea 12(sp),sp
   113ae:	|      tst.w d0
   113b0:	|  ,-- bne.s 113b6 <builtIn_startMusic+0x98>
   113b2:	|  |   moveq #1,d0
   113b4:	+--|-- bra.s 113ea <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   113b6:	|  '-> moveq #24,d0
   113b8:	|      add.l 20(sp),d0
   113bc:	|      move.l d0,-(sp)
   113be:	|      jsr 163a8 <trimStack>
   113c4:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   113c6:	|      movea.l 8(sp),a0
   113ca:	|      move.l 4(sp),d1
   113ce:	|      move.l (sp),d0
   113d0:	|      move.l a0,-(sp)
   113d2:	|      move.l d1,-(sp)
   113d4:	|      move.l d0,-(sp)
   113d6:	|      jsr db42 <playMOD>
   113dc:	|      lea 12(sp),sp
   113e0:	|      tst.w d0
   113e2:	|  ,-- bne.s 113e8 <builtIn_startMusic+0xca>
   113e4:	|  |   moveq #2,d0
   113e6:	+--|-- bra.s 113ea <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   113e8:	|  '-> moveq #2,d0
}
   113ea:	'----> lea 12(sp),sp
   113ee:	       rts

000113f0 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   113f0:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113f2:	       movea.l 12(sp),a0
   113f6:	       move.l 24(a0),d0
   113fa:	       move.l d0,-(sp)
   113fc:	       pea 1 <_start+0x1>
   11400:	       move.l sp,d0
   11402:	       addq.l #8,d0
   11404:	       move.l d0,-(sp)
   11406:	       jsr 15a24 <getValueType>
   1140c:	       lea 12(sp),sp
   11410:	       tst.w d0
   11412:	   ,-- bne.s 11418 <builtIn_stopMusic+0x28>
   11414:	   |   moveq #1,d0
   11416:	,--|-- bra.s 11436 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   11418:	|  '-> moveq #24,d0
   1141a:	|      add.l 12(sp),d0
   1141e:	|      move.l d0,-(sp)
   11420:	|      jsr 163a8 <trimStack>
   11426:	|      addq.l #4,sp
	stopMOD (v);
   11428:	|      move.l (sp),d0
   1142a:	|      move.l d0,-(sp)
   1142c:	|      jsr dbde <stopMOD>
   11432:	|      addq.l #4,sp
	return BR_CONTINUE;
   11434:	|      moveq #2,d0
}
   11436:	'----> addq.l #4,sp
   11438:	       rts

0001143a <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   1143a:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1143c:	       movea.l 16(sp),a0
   11440:	       move.l 24(a0),d0
   11444:	       move.l d0,-(sp)
   11446:	       pea 1 <_start+0x1>
   1144a:	       move.l sp,d0
   1144c:	       addq.l #8,d0
   1144e:	       move.l d0,-(sp)
   11450:	       jsr 15a24 <getValueType>
   11456:	       lea 12(sp),sp
   1145a:	       tst.w d0
   1145c:	   ,-- bne.s 11462 <builtIn_setMusicVolume+0x28>
   1145e:	   |   moveq #1,d0
   11460:	,--|-- bra.s 114bc <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   11462:	|  '-> moveq #24,d0
   11464:	|      add.l 16(sp),d0
   11468:	|      move.l d0,-(sp)
   1146a:	|      jsr 163a8 <trimStack>
   11470:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11472:	|      movea.l 16(sp),a0
   11476:	|      move.l 24(a0),d0
   1147a:	|      move.l d0,-(sp)
   1147c:	|      pea 1 <_start+0x1>
   11480:	|      moveq #12,d0
   11482:	|      add.l sp,d0
   11484:	|      move.l d0,-(sp)
   11486:	|      jsr 15a24 <getValueType>
   1148c:	|      lea 12(sp),sp
   11490:	|      tst.w d0
   11492:	|  ,-- bne.s 11498 <builtIn_setMusicVolume+0x5e>
   11494:	|  |   moveq #1,d0
   11496:	+--|-- bra.s 114bc <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   11498:	|  '-> moveq #24,d0
   1149a:	|      add.l 16(sp),d0
   1149e:	|      move.l d0,-(sp)
   114a0:	|      jsr 163a8 <trimStack>
   114a6:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   114a8:	|      move.l (sp),d1
   114aa:	|      move.l 4(sp),d0
   114ae:	|      move.l d1,-(sp)
   114b0:	|      move.l d0,-(sp)
   114b2:	|      jsr dbc4 <setMusicVolume>
   114b8:	|      addq.l #8,sp
	return BR_CONTINUE;
   114ba:	|      moveq #2,d0
}
   114bc:	'----> addq.l #8,sp
   114be:	       rts

000114c0 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   114c0:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114c2:	       movea.l 12(sp),a0
   114c6:	       move.l 24(a0),d0
   114ca:	       move.l d0,-(sp)
   114cc:	       pea 1 <_start+0x1>
   114d0:	       move.l sp,d0
   114d2:	       addq.l #8,d0
   114d4:	       move.l d0,-(sp)
   114d6:	       jsr 15a24 <getValueType>
   114dc:	       lea 12(sp),sp
   114e0:	       tst.w d0
   114e2:	   ,-- bne.s 114e8 <builtIn_setDefaultMusicVolume+0x28>
   114e4:	   |   moveq #1,d0
   114e6:	,--|-- bra.s 11506 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   114e8:	|  '-> moveq #24,d0
   114ea:	|      add.l 12(sp),d0
   114ee:	|      move.l d0,-(sp)
   114f0:	|      jsr 163a8 <trimStack>
   114f6:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   114f8:	|      move.l (sp),d0
   114fa:	|      move.l d0,-(sp)
   114fc:	|      jsr dba8 <setDefaultMusicVolume>
   11502:	|      addq.l #4,sp
	return BR_CONTINUE;
   11504:	|      moveq #2,d0
}
   11506:	'----> addq.l #4,sp
   11508:	       rts

0001150a <builtIn_playSound>:

builtIn(playSound)
{
   1150a:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1150c:	       movea.l 12(sp),a0
   11510:	       move.l 24(a0),d0
   11514:	       move.l d0,-(sp)
   11516:	       pea 5 <_start+0x5>
   1151a:	       move.l sp,d0
   1151c:	       addq.l #8,d0
   1151e:	       move.l d0,-(sp)
   11520:	       jsr 15a24 <getValueType>
   11526:	       lea 12(sp),sp
   1152a:	       tst.w d0
   1152c:	   ,-- bne.s 11532 <builtIn_playSound+0x28>
   1152e:	   |   moveq #1,d0
   11530:	,--|-- bra.s 1155a <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   11532:	|  '-> moveq #24,d0
   11534:	|      add.l 12(sp),d0
   11538:	|      move.l d0,-(sp)
   1153a:	|      jsr 163a8 <trimStack>
   11540:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   11542:	|      move.l (sp),d0
   11544:	|      clr.l -(sp)
   11546:	|      move.l d0,-(sp)
   11548:	|      jsr dbcc <startSound>
   1154e:	|      addq.l #8,sp
   11550:	|      tst.w d0
   11552:	|  ,-- bne.s 11558 <builtIn_playSound+0x4e>
   11554:	|  |   moveq #2,d0
   11556:	+--|-- bra.s 1155a <builtIn_playSound+0x50>
	return BR_CONTINUE;
   11558:	|  '-> moveq #2,d0
}
   1155a:	'----> addq.l #4,sp
   1155c:	       rts

0001155e <builtIn_loopSound>:

builtIn(loopSound)
{
   1155e:	             lea -28(sp),sp
   11562:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   11564:	             tst.l 36(sp)
   11568:	         ,-- bgt.s 1157e <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   1156a:	         |   pea 1b220 <PutChar+0x227a>
   11570:	         |   jsr 18504 <KPrintF>
   11576:	         |   addq.l #4,sp
		return BR_ERROR;
   11578:	         |   moveq #1,d0
   1157a:	,--------|-- bra.w 1173a <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   1157e:	|        '-> moveq #1,d0
   11580:	|            cmp.l 36(sp),d0
   11584:	|     ,----- blt.s 115e0 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   11586:	|     |      movea.l 40(sp),a0
   1158a:	|     |      move.l 24(a0),d0
   1158e:	|     |      move.l d0,-(sp)
   11590:	|     |      pea 5 <_start+0x5>
   11594:	|     |      lea 16(sp),a0
   11598:	|     |      move.l a0,-(sp)
   1159a:	|     |      jsr 15a24 <getValueType>
   115a0:	|     |      lea 12(sp),sp
   115a4:	|     |      tst.w d0
   115a6:	|     |  ,-- bne.s 115ae <builtIn_loopSound+0x50>
   115a8:	|     |  |   moveq #1,d0
   115aa:	+-----|--|-- bra.w 1173a <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   115ae:	|     |  '-> moveq #24,d0
   115b0:	|     |      add.l 40(sp),d0
   115b4:	|     |      move.l d0,-(sp)
   115b6:	|     |      jsr 163a8 <trimStack>
   115bc:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   115be:	|     |      move.l 8(sp),d0
   115c2:	|     |      pea 1 <_start+0x1>
   115c6:	|     |      move.l d0,-(sp)
   115c8:	|     |      jsr dbcc <startSound>
   115ce:	|     |      addq.l #8,sp
   115d0:	|     |      tst.w d0
   115d2:	|     |  ,-- bne.s 115da <builtIn_loopSound+0x7c>
   115d4:	|     |  |   moveq #2,d0
   115d6:	+-----|--|-- bra.w 1173a <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   115da:	|     |  '-> moveq #2,d0
   115dc:	+-----|----- bra.w 1173a <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   115e0:	|     '----> moveq #2,d1
   115e2:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   115e6:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   115ea:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   115ee:	|            movea.l 40(sp),a0
   115f2:	|            movea.l 24(a0),a0
   115f6:	|            move.l (a0),d0
   115f8:	|            moveq #5,d1
   115fa:	|            cmp.l d0,d1
   115fc:	|  ,-------- beq.w 116d4 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   11600:	|  |         movea.l 40(sp),a0
   11604:	|  |         move.l 24(a0),d0
   11608:	|  |         move.l d0,-(sp)
   1160a:	|  |         pea 1 <_start+0x1>
   1160e:	|  |         lea 12(sp),a0
   11612:	|  |         move.l a0,-(sp)
   11614:	|  |         jsr 15a24 <getValueType>
   1161a:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   1161e:	|  |         moveq #24,d0
   11620:	|  |         add.l 40(sp),d0
   11624:	|  |         move.l d0,-(sp)
   11626:	|  |         jsr 163a8 <trimStack>
   1162c:	|  |         addq.l #4,sp
			numParams--;
   1162e:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   11632:	|  +-------- bra.w 116d4 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   11636:	|  |  ,----> movea.l 40(sp),a0
   1163a:	|  |  |      move.l 24(a0),d0
   1163e:	|  |  |      move.l d0,-(sp)
   11640:	|  |  |      pea 5 <_start+0x5>
   11644:	|  |  |      lea 16(sp),a0
   11648:	|  |  |      move.l a0,-(sp)
   1164a:	|  |  |      jsr 15a24 <getValueType>
   11650:	|  |  |      lea 12(sp),sp
   11654:	|  |  |      tst.w d0
   11656:	|  |  |  ,-- bne.s 1166c <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   11658:	|  |  |  |   pea 1b25e <PutChar+0x22b8>
   1165e:	|  |  |  |   jsr 18504 <KPrintF>
   11664:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   11666:	|  |  |  |   moveq #1,d0
   11668:	+--|--|--|-- bra.w 1173a <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   1166c:	|  |  |  '-> moveq #20,d0
   1166e:	|  |  |      move.l d0,20(sp)
   11672:	|  |  |      clr.l 16(sp)
   11676:	|  |  |      move.l 1e81c <SysBase>,d0
   1167c:	|  |  |      movea.l d0,a6
   1167e:	|  |  |      move.l 20(sp),d0
   11682:	|  |  |      move.l 16(sp),d1
   11686:	|  |  |      jsr -684(a6)
   1168a:	|  |  |      move.l d0,12(sp)
   1168e:	|  |  |      move.l 12(sp),d0
   11692:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   11696:	|  |  |  ,-- bne.s 1169e <builtIn_loopSound+0x140>
   11698:	|  |  |  |   moveq #1,d0
   1169a:	+--|--|--|-- bra.w 1173a <builtIn_loopSound+0x1dc>

			s->next = old;
   1169e:	|  |  |  '-> movea.l 28(sp),a0
   116a2:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   116a8:	|  |  |      movea.l 28(sp),a0
   116ac:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   116b0:	|  |  |      move.l 8(sp),d0
   116b4:	|  |  |      movea.l 28(sp),a0
   116b8:	|  |  |      move.l d0,(a0)
			old = s;
   116ba:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   116c0:	|  |  |      moveq #24,d0
   116c2:	|  |  |      add.l 40(sp),d0
   116c6:	|  |  |      move.l d0,-(sp)
   116c8:	|  |  |      jsr 163a8 <trimStack>
   116ce:	|  |  |      addq.l #4,sp
			numParams--;
   116d0:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   116d4:	|  '--|----> tst.l 36(sp)
   116d8:	|     '----- bne.w 11636 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   116dc:	|        ,-- bra.s 116e8 <builtIn_loopSound+0x18a>
   116de:	|     ,--|-> movea.l 28(sp),a0
   116e2:	|     |  |   move.l 4(a0),28(sp)
   116e8:	|     |  '-> movea.l 28(sp),a0
   116ec:	|     |      move.l 4(a0),d0
   116f0:	|     '----- bne.s 116de <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   116f2:	|            move.l 4(sp),d0
   116f6:	|            moveq #1,d1
   116f8:	|            cmp.l d0,d1
   116fa:	|     ,----- bge.s 11712 <builtIn_loopSound+0x1b4>
			s->next = old;
   116fc:	|     |      movea.l 28(sp),a0
   11700:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   11706:	|     |      movea.l 24(sp),a0
   1170a:	|     |      move.l 28(sp),8(a0)
   11710:	|     |  ,-- bra.s 11722 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   11712:	|     '--|-> move.l 4(sp),d0
   11716:	|        +-- beq.s 11722 <builtIn_loopSound+0x1c4>
			s->next = s;
   11718:	|        |   movea.l 28(sp),a0
   1171c:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   11722:	|        '-> movea.l 24(sp),a0
   11726:	|            moveq #-1,d0
   11728:	|            move.l d0,16(a0)
		playSoundList(old);
   1172c:	|            move.l 24(sp),-(sp)
   11730:	|            jsr db46 <playSoundList>
   11736:	|            addq.l #4,sp
		return BR_CONTINUE;
   11738:	|            moveq #2,d0
	}
}
   1173a:	'----------> movea.l (sp)+,a6
   1173c:	             lea 28(sp),sp
   11740:	             rts

00011742 <builtIn_stopSound>:

builtIn(stopSound)
{
   11742:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11744:	       movea.l 12(sp),a0
   11748:	       move.l 24(a0),d0
   1174c:	       move.l d0,-(sp)
   1174e:	       pea 5 <_start+0x5>
   11752:	       move.l sp,d0
   11754:	       addq.l #8,d0
   11756:	       move.l d0,-(sp)
   11758:	       jsr 15a24 <getValueType>
   1175e:	       lea 12(sp),sp
   11762:	       tst.w d0
   11764:	   ,-- bne.s 1176a <builtIn_stopSound+0x28>
   11766:	   |   moveq #1,d0
   11768:	,--|-- bra.s 11788 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   1176a:	|  '-> moveq #24,d0
   1176c:	|      add.l 12(sp),d0
   11770:	|      move.l d0,-(sp)
   11772:	|      jsr 163a8 <trimStack>
   11778:	|      addq.l #4,sp
	huntKillSound (v);
   1177a:	|      move.l (sp),d0
   1177c:	|      move.l d0,-(sp)
   1177e:	|      jsr db3e <huntKillSound>
   11784:	|      addq.l #4,sp
	return BR_CONTINUE;
   11786:	|      moveq #2,d0
}
   11788:	'----> addq.l #4,sp
   1178a:	       rts

0001178c <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   1178c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1178e:	       movea.l 12(sp),a0
   11792:	       move.l 24(a0),d0
   11796:	       move.l d0,-(sp)
   11798:	       pea 1 <_start+0x1>
   1179c:	       move.l sp,d0
   1179e:	       addq.l #8,d0
   117a0:	       move.l d0,-(sp)
   117a2:	       jsr 15a24 <getValueType>
   117a8:	       lea 12(sp),sp
   117ac:	       tst.w d0
   117ae:	   ,-- bne.s 117b4 <builtIn_setDefaultSoundVolume+0x28>
   117b0:	   |   moveq #1,d0
   117b2:	,--|-- bra.s 117d2 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   117b4:	|  '-> moveq #24,d0
   117b6:	|      add.l 12(sp),d0
   117ba:	|      move.l d0,-(sp)
   117bc:	|      jsr 163a8 <trimStack>
   117c2:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   117c4:	|      move.l (sp),d0
   117c6:	|      move.l d0,-(sp)
   117c8:	|      jsr dbb4 <setDefaultSoundVolume>
   117ce:	|      addq.l #4,sp
	return BR_CONTINUE;
   117d0:	|      moveq #2,d0
}
   117d2:	'----> addq.l #4,sp
   117d4:	       rts

000117d6 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   117d6:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117d8:	       movea.l 16(sp),a0
   117dc:	       move.l 24(a0),d0
   117e0:	       move.l d0,-(sp)
   117e2:	       pea 1 <_start+0x1>
   117e6:	       move.l sp,d0
   117e8:	       addq.l #8,d0
   117ea:	       move.l d0,-(sp)
   117ec:	       jsr 15a24 <getValueType>
   117f2:	       lea 12(sp),sp
   117f6:	       tst.w d0
   117f8:	   ,-- bne.s 117fe <builtIn_setSoundVolume+0x28>
   117fa:	   |   moveq #1,d0
   117fc:	,--|-- bra.s 11858 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   117fe:	|  '-> moveq #24,d0
   11800:	|      add.l 16(sp),d0
   11804:	|      move.l d0,-(sp)
   11806:	|      jsr 163a8 <trimStack>
   1180c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1180e:	|      movea.l 16(sp),a0
   11812:	|      move.l 24(a0),d0
   11816:	|      move.l d0,-(sp)
   11818:	|      pea 5 <_start+0x5>
   1181c:	|      moveq #12,d0
   1181e:	|      add.l sp,d0
   11820:	|      move.l d0,-(sp)
   11822:	|      jsr 15a24 <getValueType>
   11828:	|      lea 12(sp),sp
   1182c:	|      tst.w d0
   1182e:	|  ,-- bne.s 11834 <builtIn_setSoundVolume+0x5e>
   11830:	|  |   moveq #1,d0
   11832:	+--|-- bra.s 11858 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   11834:	|  '-> moveq #24,d0
   11836:	|      add.l 16(sp),d0
   1183a:	|      move.l d0,-(sp)
   1183c:	|      jsr 163a8 <trimStack>
   11842:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   11844:	|      move.l (sp),d1
   11846:	|      move.l 4(sp),d0
   1184a:	|      move.l d1,-(sp)
   1184c:	|      move.l d0,-(sp)
   1184e:	|      jsr dbc8 <setSoundVolume>
   11854:	|      addq.l #8,sp
	return BR_CONTINUE;
   11856:	|      moveq #2,d0
}
   11858:	'----> addq.l #8,sp
   1185a:	       rts

0001185c <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   1185c:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11860:	       movea.l 20(sp),a0
   11864:	       move.l 24(a0),d0
   11868:	       move.l d0,-(sp)
   1186a:	       pea 1 <_start+0x1>
   1186e:	       moveq #12,d0
   11870:	       add.l sp,d0
   11872:	       move.l d0,-(sp)
   11874:	       jsr 15a24 <getValueType>
   1187a:	       lea 12(sp),sp
   1187e:	       tst.w d0
   11880:	   ,-- bne.s 11888 <builtIn_setSoundLoopPoints+0x2c>
   11882:	   |   moveq #1,d0
   11884:	,--|-- bra.w 11920 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   11888:	|  '-> moveq #24,d0
   1188a:	|      add.l 20(sp),d0
   1188e:	|      move.l d0,-(sp)
   11890:	|      jsr 163a8 <trimStack>
   11896:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11898:	|      movea.l 20(sp),a0
   1189c:	|      move.l 24(a0),d0
   118a0:	|      move.l d0,-(sp)
   118a2:	|      pea 1 <_start+0x1>
   118a6:	|      lea 8(sp),a0
   118aa:	|      move.l a0,-(sp)
   118ac:	|      jsr 15a24 <getValueType>
   118b2:	|      lea 12(sp),sp
   118b6:	|      tst.w d0
   118b8:	|  ,-- bne.s 118be <builtIn_setSoundLoopPoints+0x62>
   118ba:	|  |   moveq #1,d0
   118bc:	+--|-- bra.s 11920 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   118be:	|  '-> moveq #24,d0
   118c0:	|      add.l 20(sp),d0
   118c4:	|      move.l d0,-(sp)
   118c6:	|      jsr 163a8 <trimStack>
   118cc:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   118ce:	|      movea.l 20(sp),a0
   118d2:	|      move.l 24(a0),d0
   118d6:	|      move.l d0,-(sp)
   118d8:	|      pea 5 <_start+0x5>
   118dc:	|      moveq #16,d0
   118de:	|      add.l sp,d0
   118e0:	|      move.l d0,-(sp)
   118e2:	|      jsr 15a24 <getValueType>
   118e8:	|      lea 12(sp),sp
   118ec:	|      tst.w d0
   118ee:	|  ,-- bne.s 118f4 <builtIn_setSoundLoopPoints+0x98>
   118f0:	|  |   moveq #1,d0
   118f2:	+--|-- bra.s 11920 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   118f4:	|  '-> moveq #24,d0
   118f6:	|      add.l 20(sp),d0
   118fa:	|      move.l d0,-(sp)
   118fc:	|      jsr 163a8 <trimStack>
   11902:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   11904:	|      movea.l 4(sp),a0
   11908:	|      move.l (sp),d1
   1190a:	|      move.l 8(sp),d0
   1190e:	|      move.l a0,-(sp)
   11910:	|      move.l d1,-(sp)
   11912:	|      move.l d0,-(sp)
   11914:	|      jsr dbc0 <setSoundLoop>
   1191a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1191e:	|      moveq #2,d0
}
   11920:	'----> lea 12(sp),sp
   11924:	       rts

00011926 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   11926:	          subq.l #4,sp
	KPrintF("running setFloor\n");
   11928:	          pea 1b295 <PutChar+0x22ef>
   1192e:	          jsr 18504 <KPrintF>
   11934:	          addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   11936:	          movea.l 12(sp),a0
   1193a:	          movea.l 24(a0),a0
   1193e:	          move.l (a0),d0
   11940:	          moveq #5,d1
   11942:	          cmp.l d0,d1
   11944:	,-------- bne.s 11988 <builtIn_setFloor+0x62>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   11946:	|         movea.l 12(sp),a0
   1194a:	|         move.l 24(a0),d0
   1194e:	|         move.l d0,-(sp)
   11950:	|         pea 5 <_start+0x5>
   11954:	|         move.l sp,d0
   11956:	|         addq.l #8,d0
   11958:	|         move.l d0,-(sp)
   1195a:	|         jsr 15a24 <getValueType>
   11960:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   11964:	|         moveq #24,d0
   11966:	|         add.l 12(sp),d0
   1196a:	|         move.l d0,-(sp)
   1196c:	|         jsr 163a8 <trimStack>
   11972:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   11974:	|         move.l (sp),d0
   11976:	|         move.l d0,-(sp)
   11978:	|         jsr 17cae <setFloor>
   1197e:	|         addq.l #4,sp
   11980:	|         tst.w d0
   11982:	|  ,----- bne.s 1199e <builtIn_setFloor+0x78>
   11984:	|  |      moveq #1,d0
   11986:	|  |  ,-- bra.s 119a0 <builtIn_setFloor+0x7a>
	} else {
		trimStack (&fun -> stack);
   11988:	'--|--|-> moveq #24,d0
   1198a:	   |  |   add.l 12(sp),d0
   1198e:	   |  |   move.l d0,-(sp)
   11990:	   |  |   jsr 163a8 <trimStack>
   11996:	   |  |   addq.l #4,sp
		setFloorNull ();
   11998:	   |  |   jsr 18428 <setFloorNull>
	}
	return BR_CONTINUE;
   1199e:	   '--|-> moveq #2,d0
}
   119a0:	      '-> addq.l #4,sp
   119a2:	          rts

000119a4 <builtIn_showFloor>:

builtIn(showFloor)
{
	KPrintF("running showFloor\n");
   119a4:	pea 1b2a7 <PutChar+0x2301>
   119aa:	jsr 18504 <KPrintF>
   119b0:	addq.l #4,sp
	UNUSEDALL
	drawFloor ();
   119b2:	jsr 1752a <drawFloor>
	return BR_CONTINUE;
   119b8:	moveq #2,d0
}
   119ba:	rts

000119bc <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   119bc:	          subq.l #4,sp
	KPrintF("running setZBuffer\n");
   119be:	          pea 1b2ba <PutChar+0x2314>
   119c4:	          jsr 18504 <KPrintF>
   119ca:	          addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   119cc:	          movea.l 12(sp),a0
   119d0:	          movea.l 24(a0),a0
   119d4:	          move.l (a0),d0
   119d6:	          moveq #5,d1
   119d8:	          cmp.l d0,d1
   119da:	,-------- bne.s 11a1e <builtIn_setZBuffer+0x62>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   119dc:	|         movea.l 12(sp),a0
   119e0:	|         move.l 24(a0),d0
   119e4:	|         move.l d0,-(sp)
   119e6:	|         pea 5 <_start+0x5>
   119ea:	|         move.l sp,d0
   119ec:	|         addq.l #8,d0
   119ee:	|         move.l d0,-(sp)
   119f0:	|         jsr 15a24 <getValueType>
   119f6:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   119fa:	|         moveq #24,d0
   119fc:	|         add.l 12(sp),d0
   11a00:	|         move.l d0,-(sp)
   11a02:	|         jsr 163a8 <trimStack>
   11a08:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   11a0a:	|         move.l (sp),d0
   11a0c:	|         move.l d0,-(sp)
   11a0e:	|         jsr 906e <setZBuffer>
   11a14:	|         addq.l #4,sp
   11a16:	|         tst.w d0
   11a18:	|  ,----- bne.s 11a34 <builtIn_setZBuffer+0x78>
   11a1a:	|  |      moveq #1,d0
   11a1c:	|  |  ,-- bra.s 11a36 <builtIn_setZBuffer+0x7a>
	} else {
		trimStack (&fun -> stack);
   11a1e:	'--|--|-> moveq #24,d0
   11a20:	   |  |   add.l 12(sp),d0
   11a24:	   |  |   move.l d0,-(sp)
   11a26:	   |  |   jsr 163a8 <trimStack>
   11a2c:	   |  |   addq.l #4,sp
		killZBuffer ();
   11a2e:	   |  |   jsr 9008 <killZBuffer>
	}
	return BR_CONTINUE;
   11a34:	   '--|-> moveq #2,d0
}
   11a36:	      '-> addq.l #4,sp
   11a38:	          rts

00011a3a <builtIn_setLightMap>:

builtIn(setLightMap)
{
	KPrintF("running setLightMap\n");
   11a3a:	pea 1b2ce <PutChar+0x2328>
   11a40:	jsr 18504 <KPrintF>
   11a46:	addq.l #4,sp

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   11a48:	pea 1b2e3 <PutChar+0x233d>
   11a4e:	jsr 18504 <KPrintF>
   11a54:	addq.l #4,sp
	return BR_CONTINUE;
   11a56:	moveq #2,d0
}
   11a58:	rts

00011a5a <builtIn_setSpeechMode>:
#pragma mark -
#pragma mark Objects

builtIn(setSpeechMode)
{
	KPrintF("running setSpeechMode\n");
   11a5a:	          pea 1b2fc <PutChar+0x2356>
   11a60:	          jsr 18504 <KPrintF>
   11a66:	          addq.l #4,sp
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a68:	          movea.l 8(sp),a0
   11a6c:	          move.l 24(a0),d0
   11a70:	          move.l d0,-(sp)
   11a72:	          pea 1 <_start+0x1>
   11a76:	          pea 1e8ea <speechMode>
   11a7c:	          jsr 15a24 <getValueType>
   11a82:	          lea 12(sp),sp
   11a86:	          tst.w d0
   11a88:	      ,-- bne.s 11a8e <builtIn_setSpeechMode+0x34>
   11a8a:	      |   moveq #1,d0
   11a8c:	,-----|-- bra.s 11ac6 <builtIn_setSpeechMode+0x6c>
	trimStack (&fun -> stack);
   11a8e:	|     '-> moveq #24,d0
   11a90:	|         add.l 8(sp),d0
   11a94:	|         move.l d0,-(sp)
   11a96:	|         jsr 163a8 <trimStack>
   11a9c:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   11a9e:	|         move.l 1e8ea <speechMode>,d0
   11aa4:	|     ,-- bmi.s 11ab2 <builtIn_setSpeechMode+0x58>
   11aa6:	|     |   move.l 1e8ea <speechMode>,d0
   11aac:	|     |   moveq #2,d1
   11aae:	|     |   cmp.l d0,d1
   11ab0:	|  ,--|-- bge.s 11ac4 <builtIn_setSpeechMode+0x6a>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   11ab2:	|  |  '-> pea 1b313 <PutChar+0x236d>
   11ab8:	|  |      jsr 18504 <KPrintF>
   11abe:	|  |      addq.l #4,sp
		return BR_ERROR;
   11ac0:	|  |      moveq #1,d0
   11ac2:	+--|----- bra.s 11ac6 <builtIn_setSpeechMode+0x6c>
	}
	return BR_CONTINUE;
   11ac4:	|  '----> moveq #2,d0
}
   11ac6:	'-------> rts

00011ac8 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   11ac8:	       subq.l #4,sp
	KPrintF("running somethingSpeaking\n");
   11aca:	       pea 1b351 <PutChar+0x23ab>
   11ad0:	       jsr 18504 <KPrintF>
   11ad6:	       addq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   11ad8:	       jsr 44a4 <isThereAnySpeechGoingOn>
   11ade:	       move.l d0,(sp)
	if (i == -1) {
   11ae0:	       moveq #-1,d0
   11ae2:	       cmp.l (sp),d0
   11ae4:	,----- bne.s 11b00 <builtIn_somethingSpeaking+0x38>
		setVariable (&fun -> reg, SVT_INT, 0);
   11ae6:	|      moveq #28,d0
   11ae8:	|      add.l 12(sp),d0
   11aec:	|      clr.l -(sp)
   11aee:	|      pea 1 <_start+0x1>
   11af2:	|      move.l d0,-(sp)
   11af4:	|      jsr 16316 <setVariable>
   11afa:	|      lea 12(sp),sp
   11afe:	|  ,-- bra.s 11b18 <builtIn_somethingSpeaking+0x50>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   11b00:	'--|-> moveq #28,d0
   11b02:	   |   add.l 12(sp),d0
   11b06:	   |   move.l (sp),-(sp)
   11b08:	   |   pea 7 <_start+0x7>
   11b0c:	   |   move.l d0,-(sp)
   11b0e:	   |   jsr 16316 <setVariable>
   11b14:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11b18:	   '-> moveq #2,d0
}
   11b1a:	       addq.l #4,sp
   11b1c:	       rts

00011b1e <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	KPrintF("running skipSpeech\n");
   11b1e:	pea 1b36c <PutChar+0x23c6>
   11b24:	jsr 18504 <KPrintF>
   11b2a:	addq.l #4,sp
	UNUSEDALL
	killSpeechTimers ();
   11b2c:	jsr 6fc8 <killSpeechTimers>
	return BR_CONTINUE;
   11b32:	moveq #2,d0
}
   11b34:	rts

00011b36 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	KPrintF("running getOverObject\n");
   11b36:	       pea 1b380 <PutChar+0x23da>
   11b3c:	       jsr 18504 <KPrintF>
   11b42:	       addq.l #4,sp
	UNUSEDALL
	if (overRegion)
   11b44:	       move.l 1e930 <overRegion>,d0
   11b4a:	,----- beq.s 11b74 <builtIn_getOverObject+0x3e>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   11b4c:	|      movea.l 1e930 <overRegion>,a0
   11b52:	|      movea.l 28(a0),a0
   11b56:	|      move.l 4(a0),d1
   11b5a:	|      moveq #28,d0
   11b5c:	|      add.l 8(sp),d0
   11b60:	|      move.l d1,-(sp)
   11b62:	|      pea 7 <_start+0x7>
   11b66:	|      move.l d0,-(sp)
   11b68:	|      jsr 16316 <setVariable>
   11b6e:	|      lea 12(sp),sp
   11b72:	|  ,-- bra.s 11b8c <builtIn_getOverObject+0x56>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   11b74:	'--|-> moveq #28,d0
   11b76:	   |   add.l 8(sp),d0
   11b7a:	   |   clr.l -(sp)
   11b7c:	   |   pea 1 <_start+0x1>
   11b80:	   |   move.l d0,-(sp)
   11b82:	   |   jsr 16316 <setVariable>
   11b88:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   11b8c:	   '-> moveq #2,d0
}
   11b8e:	       rts

00011b90 <builtIn_rename>:

builtIn(rename)
{
   11b90:	       lea -16(sp),sp
   11b94:	       move.l a6,-(sp)
	KPrintF("running rename\n");
   11b96:	       pea 1b397 <PutChar+0x23f1>
   11b9c:	       jsr 18504 <KPrintF>
   11ba2:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11ba4:	       movea.l 28(sp),a0
   11ba8:	       move.l 24(a0),d0
   11bac:	       move.l d0,-(sp)
   11bae:	       jsr 15ffa <getTextFromAnyVar>
   11bb4:	       addq.l #4,sp
   11bb6:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   11bba:	   ,-- bne.s 11bc0 <builtIn_rename+0x30>
   11bbc:	   |   moveq #1,d0
   11bbe:	,--|-- bra.s 11c3a <builtIn_rename+0xaa>
	trimStack(&fun->stack);
   11bc0:	|  '-> moveq #24,d0
   11bc2:	|      add.l 28(sp),d0
   11bc6:	|      move.l d0,-(sp)
   11bc8:	|      jsr 163a8 <trimStack>
   11bce:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   11bd0:	|      movea.l 28(sp),a0
   11bd4:	|      move.l 24(a0),d0
   11bd8:	|      move.l d0,-(sp)
   11bda:	|      pea 7 <_start+0x7>
   11bde:	|      lea 12(sp),a0
   11be2:	|      move.l a0,-(sp)
   11be4:	|      jsr 15a24 <getValueType>
   11bea:	|      lea 12(sp),sp
   11bee:	|      tst.w d0
   11bf0:	|  ,-- bne.s 11bf6 <builtIn_rename+0x66>
   11bf2:	|  |   moveq #1,d0
   11bf4:	+--|-- bra.s 11c3a <builtIn_rename+0xaa>
	trimStack(&fun->stack);
   11bf6:	|  '-> moveq #24,d0
   11bf8:	|      add.l 28(sp),d0
   11bfc:	|      move.l d0,-(sp)
   11bfe:	|      jsr 163a8 <trimStack>
   11c04:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   11c06:	|      move.l 4(sp),d0
   11c0a:	|      move.l d0,-(sp)
   11c0c:	|      jsr df0c <findObjectType>
   11c12:	|      addq.l #4,sp
   11c14:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   11c18:	|      movea.l 12(sp),a0
   11c1c:	|      move.l (a0),8(sp)
   11c20:	|      move.l 1e81c <SysBase>,d0
   11c26:	|      movea.l d0,a6
   11c28:	|      movea.l 8(sp),a1
   11c2c:	|      jsr -690(a6)
	o->screenName = newText;
   11c30:	|      movea.l 12(sp),a0
   11c34:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   11c38:	|      moveq #2,d0
}
   11c3a:	'----> movea.l (sp)+,a6
   11c3c:	       lea 16(sp),sp
   11c40:	       rts

00011c42 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   11c42:	          lea -12(sp),sp
	KPrintF("running getObjectX\n");
   11c46:	          pea 1b3a7 <PutChar+0x2401>
   11c4c:	          jsr 18504 <KPrintF>
   11c52:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11c54:	          movea.l 20(sp),a0
   11c58:	          move.l 24(a0),d0
   11c5c:	          move.l d0,-(sp)
   11c5e:	          pea 7 <_start+0x7>
   11c62:	          lea 8(sp),a0
   11c66:	          move.l a0,-(sp)
   11c68:	          jsr 15a24 <getValueType>
   11c6e:	          lea 12(sp),sp
   11c72:	          tst.w d0
   11c74:	      ,-- bne.s 11c7c <builtIn_getObjectX+0x3a>
   11c76:	      |   moveq #1,d0
   11c78:	,-----|-- bra.w 11d18 <builtIn_getObjectX+0xd6>
	trimStack (&fun -> stack);
   11c7c:	|     '-> moveq #24,d0
   11c7e:	|         add.l 20(sp),d0
   11c82:	|         move.l d0,-(sp)
   11c84:	|         jsr 163a8 <trimStack>
   11c8a:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11c8c:	|         move.l (sp),d0
   11c8e:	|         move.l d0,-(sp)
   11c90:	|         jsr af9e <findPerson>
   11c96:	|         addq.l #4,sp
   11c98:	|         move.l d0,8(sp)
	if (pers) {
   11c9c:	|     ,-- beq.s 11cca <builtIn_getObjectX+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   11c9e:	|     |   movea.l 8(sp),a0
   11ca2:	|     |   move.l (a0),d0
   11ca4:	|     |   move.l d0,-(sp)
   11ca6:	|     |   jsr 188ce <__fixsfsi>
   11cac:	|     |   addq.l #4,sp
   11cae:	|     |   move.l d0,d1
   11cb0:	|     |   moveq #28,d0
   11cb2:	|     |   add.l 20(sp),d0
   11cb6:	|     |   move.l d1,-(sp)
   11cb8:	|     |   pea 1 <_start+0x1>
   11cbc:	|     |   move.l d0,-(sp)
   11cbe:	|     |   jsr 16316 <setVariable>
   11cc4:	|     |   lea 12(sp),sp
   11cc8:	|  ,--|-- bra.s 11d16 <builtIn_getObjectX+0xd4>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11cca:	|  |  '-> move.l (sp),d0
   11ccc:	|  |      move.l d0,-(sp)
   11cce:	|  |      jsr 16ce6 <getRegionForObject>
   11cd4:	|  |      addq.l #4,sp
   11cd6:	|  |      move.l d0,4(sp)
		if (la) {
   11cda:	|  |  ,-- beq.s 11cfe <builtIn_getObjectX+0xbc>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   11cdc:	|  |  |   movea.l 4(sp),a0
   11ce0:	|  |  |   move.l 16(a0),d1
   11ce4:	|  |  |   moveq #28,d0
   11ce6:	|  |  |   add.l 20(sp),d0
   11cea:	|  |  |   move.l d1,-(sp)
   11cec:	|  |  |   pea 1 <_start+0x1>
   11cf0:	|  |  |   move.l d0,-(sp)
   11cf2:	|  |  |   jsr 16316 <setVariable>
   11cf8:	|  |  |   lea 12(sp),sp
   11cfc:	|  +--|-- bra.s 11d16 <builtIn_getObjectX+0xd4>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   11cfe:	|  |  '-> moveq #28,d0
   11d00:	|  |      add.l 20(sp),d0
   11d04:	|  |      clr.l -(sp)
   11d06:	|  |      pea 1 <_start+0x1>
   11d0a:	|  |      move.l d0,-(sp)
   11d0c:	|  |      jsr 16316 <setVariable>
   11d12:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11d16:	|  '----> moveq #2,d0
}
   11d18:	'-------> lea 12(sp),sp
   11d1c:	          rts

00011d1e <builtIn_getObjectY>:

builtIn (getObjectY)
{
   11d1e:	          lea -12(sp),sp
	KPrintF("running getObjectY\n");
   11d22:	          pea 1b3bb <PutChar+0x2415>
   11d28:	          jsr 18504 <KPrintF>
   11d2e:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11d30:	          movea.l 20(sp),a0
   11d34:	          move.l 24(a0),d0
   11d38:	          move.l d0,-(sp)
   11d3a:	          pea 7 <_start+0x7>
   11d3e:	          lea 8(sp),a0
   11d42:	          move.l a0,-(sp)
   11d44:	          jsr 15a24 <getValueType>
   11d4a:	          lea 12(sp),sp
   11d4e:	          tst.w d0
   11d50:	      ,-- bne.s 11d58 <builtIn_getObjectY+0x3a>
   11d52:	      |   moveq #1,d0
   11d54:	,-----|-- bra.w 11df6 <builtIn_getObjectY+0xd8>
	trimStack (&fun -> stack);
   11d58:	|     '-> moveq #24,d0
   11d5a:	|         add.l 20(sp),d0
   11d5e:	|         move.l d0,-(sp)
   11d60:	|         jsr 163a8 <trimStack>
   11d66:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11d68:	|         move.l (sp),d0
   11d6a:	|         move.l d0,-(sp)
   11d6c:	|         jsr af9e <findPerson>
   11d72:	|         addq.l #4,sp
   11d74:	|         move.l d0,8(sp)
	if (pers) {
   11d78:	|     ,-- beq.s 11da8 <builtIn_getObjectY+0x8a>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   11d7a:	|     |   movea.l 8(sp),a0
   11d7e:	|     |   move.l 4(a0),d0
   11d82:	|     |   move.l d0,-(sp)
   11d84:	|     |   jsr 188ce <__fixsfsi>
   11d8a:	|     |   addq.l #4,sp
   11d8c:	|     |   move.l d0,d1
   11d8e:	|     |   moveq #28,d0
   11d90:	|     |   add.l 20(sp),d0
   11d94:	|     |   move.l d1,-(sp)
   11d96:	|     |   pea 1 <_start+0x1>
   11d9a:	|     |   move.l d0,-(sp)
   11d9c:	|     |   jsr 16316 <setVariable>
   11da2:	|     |   lea 12(sp),sp
   11da6:	|  ,--|-- bra.s 11df4 <builtIn_getObjectY+0xd6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11da8:	|  |  '-> move.l (sp),d0
   11daa:	|  |      move.l d0,-(sp)
   11dac:	|  |      jsr 16ce6 <getRegionForObject>
   11db2:	|  |      addq.l #4,sp
   11db4:	|  |      move.l d0,4(sp)
		if (la) {
   11db8:	|  |  ,-- beq.s 11ddc <builtIn_getObjectY+0xbe>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   11dba:	|  |  |   movea.l 4(sp),a0
   11dbe:	|  |  |   move.l 20(a0),d1
   11dc2:	|  |  |   moveq #28,d0
   11dc4:	|  |  |   add.l 20(sp),d0
   11dc8:	|  |  |   move.l d1,-(sp)
   11dca:	|  |  |   pea 1 <_start+0x1>
   11dce:	|  |  |   move.l d0,-(sp)
   11dd0:	|  |  |   jsr 16316 <setVariable>
   11dd6:	|  |  |   lea 12(sp),sp
   11dda:	|  +--|-- bra.s 11df4 <builtIn_getObjectY+0xd6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   11ddc:	|  |  '-> moveq #28,d0
   11dde:	|  |      add.l 20(sp),d0
   11de2:	|  |      clr.l -(sp)
   11de4:	|  |      pea 1 <_start+0x1>
   11de8:	|  |      move.l d0,-(sp)
   11dea:	|  |      jsr 16316 <setVariable>
   11df0:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11df4:	|  '----> moveq #2,d0
}
   11df6:	'-------> lea 12(sp),sp
   11dfa:	          rts

00011dfc <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   11dfc:	       lea -32(sp),sp
   11e00:	       movem.l d2-d5,-(sp)
	KPrintF("running addScreenRegion\n");
   11e04:	       pea 1b3cf <PutChar+0x2429>
   11e0a:	       jsr 18504 <KPrintF>
   11e10:	       addq.l #4,sp
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e12:	       movea.l 56(sp),a0
   11e16:	       move.l 24(a0),d0
   11e1a:	       move.l d0,-(sp)
   11e1c:	       pea 1 <_start+0x1>
   11e20:	       lea 28(sp),a0
   11e24:	       move.l a0,-(sp)
   11e26:	       jsr 15a24 <getValueType>
   11e2c:	       lea 12(sp),sp
   11e30:	       tst.w d0
   11e32:	   ,-- bne.s 11e3a <builtIn_addScreenRegion+0x3e>
   11e34:	   |   moveq #1,d0
   11e36:	,--|-- bra.w 12014 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11e3a:	|  '-> moveq #24,d0
   11e3c:	|      add.l 56(sp),d0
   11e40:	|      move.l d0,-(sp)
   11e42:	|      jsr 163a8 <trimStack>
   11e48:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e4a:	|      movea.l 56(sp),a0
   11e4e:	|      move.l 24(a0),d0
   11e52:	|      move.l d0,-(sp)
   11e54:	|      pea 1 <_start+0x1>
   11e58:	|      moveq #48,d0
   11e5a:	|      add.l sp,d0
   11e5c:	|      move.l d0,-(sp)
   11e5e:	|      jsr 15a24 <getValueType>
   11e64:	|      lea 12(sp),sp
   11e68:	|      tst.w d0
   11e6a:	|  ,-- bne.s 11e72 <builtIn_addScreenRegion+0x76>
   11e6c:	|  |   moveq #1,d0
   11e6e:	+--|-- bra.w 12014 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11e72:	|  '-> moveq #24,d0
   11e74:	|      add.l 56(sp),d0
   11e78:	|      move.l d0,-(sp)
   11e7a:	|      jsr 163a8 <trimStack>
   11e80:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e82:	|      movea.l 56(sp),a0
   11e86:	|      move.l 24(a0),d0
   11e8a:	|      move.l d0,-(sp)
   11e8c:	|      pea 1 <_start+0x1>
   11e90:	|      moveq #52,d0
   11e92:	|      add.l sp,d0
   11e94:	|      move.l d0,-(sp)
   11e96:	|      jsr 15a24 <getValueType>
   11e9c:	|      lea 12(sp),sp
   11ea0:	|      tst.w d0
   11ea2:	|  ,-- bne.s 11eaa <builtIn_addScreenRegion+0xae>
   11ea4:	|  |   moveq #1,d0
   11ea6:	+--|-- bra.w 12014 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11eaa:	|  '-> moveq #24,d0
   11eac:	|      add.l 56(sp),d0
   11eb0:	|      move.l d0,-(sp)
   11eb2:	|      jsr 163a8 <trimStack>
   11eb8:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11eba:	|      movea.l 56(sp),a0
   11ebe:	|      move.l 24(a0),d0
   11ec2:	|      move.l d0,-(sp)
   11ec4:	|      pea 1 <_start+0x1>
   11ec8:	|      lea 32(sp),a0
   11ecc:	|      move.l a0,-(sp)
   11ece:	|      jsr 15a24 <getValueType>
   11ed4:	|      lea 12(sp),sp
   11ed8:	|      tst.w d0
   11eda:	|  ,-- bne.s 11ee2 <builtIn_addScreenRegion+0xe6>
   11edc:	|  |   moveq #1,d0
   11ede:	+--|-- bra.w 12014 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11ee2:	|  '-> moveq #24,d0
   11ee4:	|      add.l 56(sp),d0
   11ee8:	|      move.l d0,-(sp)
   11eea:	|      jsr 163a8 <trimStack>
   11ef0:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ef2:	|      movea.l 56(sp),a0
   11ef6:	|      move.l 24(a0),d0
   11efa:	|      move.l d0,-(sp)
   11efc:	|      pea 1 <_start+0x1>
   11f00:	|      lea 36(sp),a0
   11f04:	|      move.l a0,-(sp)
   11f06:	|      jsr 15a24 <getValueType>
   11f0c:	|      lea 12(sp),sp
   11f10:	|      tst.w d0
   11f12:	|  ,-- bne.s 11f1a <builtIn_addScreenRegion+0x11e>
   11f14:	|  |   moveq #1,d0
   11f16:	+--|-- bra.w 12014 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11f1a:	|  '-> moveq #24,d0
   11f1c:	|      add.l 56(sp),d0
   11f20:	|      move.l d0,-(sp)
   11f22:	|      jsr 163a8 <trimStack>
   11f28:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f2a:	|      movea.l 56(sp),a0
   11f2e:	|      move.l 24(a0),d0
   11f32:	|      move.l d0,-(sp)
   11f34:	|      pea 1 <_start+0x1>
   11f38:	|      lea 40(sp),a0
   11f3c:	|      move.l a0,-(sp)
   11f3e:	|      jsr 15a24 <getValueType>
   11f44:	|      lea 12(sp),sp
   11f48:	|      tst.w d0
   11f4a:	|  ,-- bne.s 11f52 <builtIn_addScreenRegion+0x156>
   11f4c:	|  |   moveq #1,d0
   11f4e:	+--|-- bra.w 12014 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11f52:	|  '-> moveq #24,d0
   11f54:	|      add.l 56(sp),d0
   11f58:	|      move.l d0,-(sp)
   11f5a:	|      jsr 163a8 <trimStack>
   11f60:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f62:	|      movea.l 56(sp),a0
   11f66:	|      move.l 24(a0),d0
   11f6a:	|      move.l d0,-(sp)
   11f6c:	|      pea 1 <_start+0x1>
   11f70:	|      lea 44(sp),a0
   11f74:	|      move.l a0,-(sp)
   11f76:	|      jsr 15a24 <getValueType>
   11f7c:	|      lea 12(sp),sp
   11f80:	|      tst.w d0
   11f82:	|  ,-- bne.s 11f8a <builtIn_addScreenRegion+0x18e>
   11f84:	|  |   moveq #1,d0
   11f86:	+--|-- bra.w 12014 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11f8a:	|  '-> moveq #24,d0
   11f8c:	|      add.l 56(sp),d0
   11f90:	|      move.l d0,-(sp)
   11f92:	|      jsr 163a8 <trimStack>
   11f98:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f9a:	|      movea.l 56(sp),a0
   11f9e:	|      move.l 24(a0),d0
   11fa2:	|      move.l d0,-(sp)
   11fa4:	|      pea 7 <_start+0x7>
   11fa8:	|      lea 24(sp),a0
   11fac:	|      move.l a0,-(sp)
   11fae:	|      jsr 15a24 <getValueType>
   11fb4:	|      lea 12(sp),sp
   11fb8:	|      tst.w d0
   11fba:	|  ,-- bne.s 11fc0 <builtIn_addScreenRegion+0x1c4>
   11fbc:	|  |   moveq #1,d0
   11fbe:	+--|-- bra.s 12014 <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11fc0:	|  '-> moveq #24,d0
   11fc2:	|      add.l 56(sp),d0
   11fc6:	|      move.l d0,-(sp)
   11fc8:	|      jsr 163a8 <trimStack>
   11fce:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   11fd0:	|      move.l 16(sp),d5
   11fd4:	|      move.l 20(sp),d4
   11fd8:	|      move.l 40(sp),d3
   11fdc:	|      move.l 44(sp),d2
   11fe0:	|      movea.l 24(sp),a1
   11fe4:	|      movea.l 28(sp),a0
   11fe8:	|      move.l 32(sp),d1
   11fec:	|      move.l 36(sp),d0
   11ff0:	|      move.l d5,-(sp)
   11ff2:	|      move.l d4,-(sp)
   11ff4:	|      move.l d3,-(sp)
   11ff6:	|      move.l d2,-(sp)
   11ff8:	|      move.l a1,-(sp)
   11ffa:	|      move.l a0,-(sp)
   11ffc:	|      move.l d1,-(sp)
   11ffe:	|      move.l d0,-(sp)
   12000:	|      jsr 16ba0 <addScreenRegion>
   12006:	|      lea 32(sp),sp
   1200a:	|      tst.w d0
   1200c:	|  ,-- beq.s 12012 <builtIn_addScreenRegion+0x216>
   1200e:	|  |   moveq #2,d0
   12010:	+--|-- bra.s 12014 <builtIn_addScreenRegion+0x218>
	return BR_ERROR;
   12012:	|  '-> moveq #1,d0

}
   12014:	'----> movem.l (sp)+,d2-d5
   12018:	       lea 32(sp),sp
   1201c:	       rts

0001201e <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   1201e:	       subq.l #4,sp
	KPrintF("running removeScreenRegion\n");
   12020:	       pea 1b3e8 <PutChar+0x2442>
   12026:	       jsr 18504 <KPrintF>
   1202c:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1202e:	       movea.l 12(sp),a0
   12032:	       move.l 24(a0),d0
   12036:	       move.l d0,-(sp)
   12038:	       pea 7 <_start+0x7>
   1203c:	       move.l sp,d0
   1203e:	       addq.l #8,d0
   12040:	       move.l d0,-(sp)
   12042:	       jsr 15a24 <getValueType>
   12048:	       lea 12(sp),sp
   1204c:	       tst.w d0
   1204e:	   ,-- bne.s 12054 <builtIn_removeScreenRegion+0x36>
   12050:	   |   moveq #1,d0
   12052:	,--|-- bra.s 12072 <builtIn_removeScreenRegion+0x54>
	trimStack (&fun -> stack);
   12054:	|  '-> moveq #24,d0
   12056:	|      add.l 12(sp),d0
   1205a:	|      move.l d0,-(sp)
   1205c:	|      jsr 163a8 <trimStack>
   12062:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   12064:	|      move.l (sp),d0
   12066:	|      move.l d0,-(sp)
   12068:	|      jsr 16e8e <removeScreenRegion>
   1206e:	|      addq.l #4,sp
	return BR_CONTINUE;
   12070:	|      moveq #2,d0
}
   12072:	'----> addq.l #4,sp
   12074:	       rts

00012076 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	KPrintF("running showBoxes\n");
   12076:	pea 1b404 <PutChar+0x245e>
   1207c:	jsr 18504 <KPrintF>
   12082:	addq.l #4,sp
	UNUSEDALL
	showBoxes ();
   12084:	jsr 17012 <showBoxes>
	return BR_CONTINUE;
   1208a:	moveq #2,d0
}
   1208c:	rts

0001208e <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	KPrintF("running removeAllScreenRegions\n");
   1208e:	pea 1b417 <PutChar+0x2471>
   12094:	jsr 18504 <KPrintF>
   1209a:	addq.l #4,sp
	UNUSEDALL
	killAllRegions ();
   1209c:	jsr 16d14 <killAllRegions>
	return BR_CONTINUE;
   120a2:	moveq #2,d0
}
   120a4:	rts

000120a6 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   120a6:	       lea -16(sp),sp
	KPrintF("running addCharacter\n");
   120aa:	       pea 1b437 <PutChar+0x2491>
   120b0:	       jsr 18504 <KPrintF>
   120b6:	       addq.l #4,sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   120b8:	       movea.l 24(sp),a0
   120bc:	       move.l 24(a0),d0
   120c0:	       move.l d0,-(sp)
   120c2:	       jsr 156d0 <getCostumeFromVar>
   120c8:	       addq.l #4,sp
   120ca:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   120ce:	   ,-- bne.s 120d6 <builtIn_addCharacter+0x30>
   120d0:	   |   moveq #1,d0
   120d2:	,--|-- bra.w 121b2 <builtIn_addCharacter+0x10c>

	trimStack (&fun -> stack);
   120d6:	|  '-> moveq #24,d0
   120d8:	|      add.l 24(sp),d0
   120dc:	|      move.l d0,-(sp)
   120de:	|      jsr 163a8 <trimStack>
   120e4:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   120e6:	|      movea.l 24(sp),a0
   120ea:	|      move.l 24(a0),d0
   120ee:	|      move.l d0,-(sp)
   120f0:	|      pea 1 <_start+0x1>
   120f4:	|      lea 12(sp),a0
   120f8:	|      move.l a0,-(sp)
   120fa:	|      jsr 15a24 <getValueType>
   12100:	|      lea 12(sp),sp
   12104:	|      tst.w d0
   12106:	|  ,-- bne.s 1210e <builtIn_addCharacter+0x68>
   12108:	|  |   moveq #1,d0
   1210a:	+--|-- bra.w 121b2 <builtIn_addCharacter+0x10c>
	trimStack (&fun -> stack);
   1210e:	|  '-> moveq #24,d0
   12110:	|      add.l 24(sp),d0
   12114:	|      move.l d0,-(sp)
   12116:	|      jsr 163a8 <trimStack>
   1211c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1211e:	|      movea.l 24(sp),a0
   12122:	|      move.l 24(a0),d0
   12126:	|      move.l d0,-(sp)
   12128:	|      pea 1 <_start+0x1>
   1212c:	|      moveq #16,d0
   1212e:	|      add.l sp,d0
   12130:	|      move.l d0,-(sp)
   12132:	|      jsr 15a24 <getValueType>
   12138:	|      lea 12(sp),sp
   1213c:	|      tst.w d0
   1213e:	|  ,-- bne.s 12144 <builtIn_addCharacter+0x9e>
   12140:	|  |   moveq #1,d0
   12142:	+--|-- bra.s 121b2 <builtIn_addCharacter+0x10c>
	trimStack (&fun -> stack);
   12144:	|  '-> moveq #24,d0
   12146:	|      add.l 24(sp),d0
   1214a:	|      move.l d0,-(sp)
   1214c:	|      jsr 163a8 <trimStack>
   12152:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12154:	|      movea.l 24(sp),a0
   12158:	|      move.l 24(a0),d0
   1215c:	|      move.l d0,-(sp)
   1215e:	|      pea 7 <_start+0x7>
   12162:	|      lea 8(sp),a0
   12166:	|      move.l a0,-(sp)
   12168:	|      jsr 15a24 <getValueType>
   1216e:	|      lea 12(sp),sp
   12172:	|      tst.w d0
   12174:	|  ,-- bne.s 1217a <builtIn_addCharacter+0xd4>
   12176:	|  |   moveq #1,d0
   12178:	+--|-- bra.s 121b2 <builtIn_addCharacter+0x10c>
	trimStack (&fun -> stack);
   1217a:	|  '-> moveq #24,d0
   1217c:	|      add.l 24(sp),d0
   12180:	|      move.l d0,-(sp)
   12182:	|      jsr 163a8 <trimStack>
   12188:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   1218a:	|      movea.l (sp),a0
   1218c:	|      move.l 4(sp),d1
   12190:	|      move.l 8(sp),d0
   12194:	|      move.l 12(sp),-(sp)
   12198:	|      move.l a0,-(sp)
   1219a:	|      move.l d1,-(sp)
   1219c:	|      move.l d0,-(sp)
   1219e:	|      jsr 9b98 <addPerson>
   121a4:	|      lea 16(sp),sp
   121a8:	|      tst.w d0
   121aa:	|  ,-- beq.s 121b0 <builtIn_addCharacter+0x10a>
   121ac:	|  |   moveq #2,d0
   121ae:	+--|-- bra.s 121b2 <builtIn_addCharacter+0x10c>
	return BR_ERROR;
   121b0:	|  '-> moveq #1,d0
}
   121b2:	'----> lea 16(sp),sp
   121b6:	       rts

000121b8 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   121b8:	       subq.l #4,sp
	KPrintF("running hideCharacter\n");
   121ba:	       pea 1b44d <PutChar+0x24a7>
   121c0:	       jsr 18504 <KPrintF>
   121c6:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   121c8:	       movea.l 12(sp),a0
   121cc:	       move.l 24(a0),d0
   121d0:	       move.l d0,-(sp)
   121d2:	       pea 7 <_start+0x7>
   121d6:	       move.l sp,d0
   121d8:	       addq.l #8,d0
   121da:	       move.l d0,-(sp)
   121dc:	       jsr 15a24 <getValueType>
   121e2:	       lea 12(sp),sp
   121e6:	       tst.w d0
   121e8:	   ,-- bne.s 121ee <builtIn_hideCharacter+0x36>
   121ea:	   |   moveq #1,d0
   121ec:	,--|-- bra.s 1220e <builtIn_hideCharacter+0x56>
	trimStack (&fun -> stack);
   121ee:	|  '-> moveq #24,d0
   121f0:	|      add.l 12(sp),d0
   121f4:	|      move.l d0,-(sp)
   121f6:	|      jsr 163a8 <trimStack>
   121fc:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   121fe:	|      move.l (sp),d0
   12200:	|      move.l d0,-(sp)
   12202:	|      clr.l -(sp)
   12204:	|      jsr c634 <setShown>
   1220a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1220c:	|      moveq #2,d0
}
   1220e:	'----> addq.l #4,sp
   12210:	       rts

00012212 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   12212:	       subq.l #4,sp
	KPrintF("running showCharacter\n");
   12214:	       pea 1b464 <PutChar+0x24be>
   1221a:	       jsr 18504 <KPrintF>
   12220:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12222:	       movea.l 12(sp),a0
   12226:	       move.l 24(a0),d0
   1222a:	       move.l d0,-(sp)
   1222c:	       pea 7 <_start+0x7>
   12230:	       move.l sp,d0
   12232:	       addq.l #8,d0
   12234:	       move.l d0,-(sp)
   12236:	       jsr 15a24 <getValueType>
   1223c:	       lea 12(sp),sp
   12240:	       tst.w d0
   12242:	   ,-- bne.s 12248 <builtIn_showCharacter+0x36>
   12244:	   |   moveq #1,d0
   12246:	,--|-- bra.s 1226a <builtIn_showCharacter+0x58>
	trimStack (&fun -> stack);
   12248:	|  '-> moveq #24,d0
   1224a:	|      add.l 12(sp),d0
   1224e:	|      move.l d0,-(sp)
   12250:	|      jsr 163a8 <trimStack>
   12256:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   12258:	|      move.l (sp),d0
   1225a:	|      move.l d0,-(sp)
   1225c:	|      pea 1 <_start+0x1>
   12260:	|      jsr c634 <setShown>
   12266:	|      addq.l #8,sp
	return BR_CONTINUE;
   12268:	|      moveq #2,d0
}
   1226a:	'----> addq.l #4,sp
   1226c:	       rts

0001226e <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	KPrintF("running removeAllCharacters\n");
   1226e:	pea 1b47b <PutChar+0x24d5>
   12274:	jsr 18504 <KPrintF>
   1227a:	addq.l #4,sp
	UNUSEDALL
	killSpeechTimers ();
   1227c:	jsr 6fc8 <killSpeechTimers>
	killMostPeople ();
   12282:	jsr b434 <killMostPeople>
	return BR_CONTINUE;
   12288:	moveq #2,d0
}
   1228a:	rts

0001228c <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   1228c:	       subq.l #8,sp
	KPrintF("running setCharacterDrawMode\n");
   1228e:	       pea 1b498 <PutChar+0x24f2>
   12294:	       jsr 18504 <KPrintF>
   1229a:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1229c:	       movea.l 16(sp),a0
   122a0:	       move.l 24(a0),d0
   122a4:	       move.l d0,-(sp)
   122a6:	       pea 1 <_start+0x1>
   122aa:	       move.l sp,d0
   122ac:	       addq.l #8,d0
   122ae:	       move.l d0,-(sp)
   122b0:	       jsr 15a24 <getValueType>
   122b6:	       lea 12(sp),sp
   122ba:	       tst.w d0
   122bc:	   ,-- bne.s 122c2 <builtIn_setCharacterDrawMode+0x36>
   122be:	   |   moveq #1,d0
   122c0:	,--|-- bra.s 1231c <builtIn_setCharacterDrawMode+0x90>
	trimStack (&fun -> stack);
   122c2:	|  '-> moveq #24,d0
   122c4:	|      add.l 16(sp),d0
   122c8:	|      move.l d0,-(sp)
   122ca:	|      jsr 163a8 <trimStack>
   122d0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   122d2:	|      movea.l 16(sp),a0
   122d6:	|      move.l 24(a0),d0
   122da:	|      move.l d0,-(sp)
   122dc:	|      pea 7 <_start+0x7>
   122e0:	|      moveq #12,d0
   122e2:	|      add.l sp,d0
   122e4:	|      move.l d0,-(sp)
   122e6:	|      jsr 15a24 <getValueType>
   122ec:	|      lea 12(sp),sp
   122f0:	|      tst.w d0
   122f2:	|  ,-- bne.s 122f8 <builtIn_setCharacterDrawMode+0x6c>
   122f4:	|  |   moveq #1,d0
   122f6:	+--|-- bra.s 1231c <builtIn_setCharacterDrawMode+0x90>
	trimStack (&fun -> stack);
   122f8:	|  '-> moveq #24,d0
   122fa:	|      add.l 16(sp),d0
   122fe:	|      move.l d0,-(sp)
   12300:	|      jsr 163a8 <trimStack>
   12306:	|      addq.l #4,sp
	setDrawMode (di, obj);
   12308:	|      move.l 4(sp),d1
   1230c:	|      move.l (sp),d0
   1230e:	|      move.l d1,-(sp)
   12310:	|      move.l d0,-(sp)
   12312:	|      jsr bf72 <setDrawMode>
   12318:	|      addq.l #8,sp
	return BR_CONTINUE;
   1231a:	|      moveq #2,d0
}
   1231c:	'----> addq.l #8,sp
   1231e:	       rts

00012320 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	KPrintF("running setCharacterTransparency\n");
   12320:	pea 1b4b6 <PutChar+0x2510>
   12326:	jsr 18504 <KPrintF>
   1232c:	addq.l #4,sp
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   1232e:	pea 1b4d8 <PutChar+0x2532>
   12334:	jsr 18504 <KPrintF>
   1233a:	addq.l #4,sp
	return BR_CONTINUE;
   1233c:	moveq #2,d0
}
   1233e:	rts

00012340 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	KPrintF("running setCharacterColourise\n");
   12340:	pea 1b50b <PutChar+0x2565>
   12346:	jsr 18504 <KPrintF>
   1234c:	addq.l #4,sp
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   1234e:	pea 1b52a <PutChar+0x2584>
   12354:	jsr 18504 <KPrintF>
   1235a:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   1235c:	moveq #2,d0
}
   1235e:	rts

00012360 <builtIn_setScale>:

builtIn(setScale)
{
   12360:	       subq.l #8,sp
	KPrintF("running setScale\n");
   12362:	       pea 1b564 <PutChar+0x25be>
   12368:	       jsr 18504 <KPrintF>
   1236e:	       addq.l #4,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12370:	       movea.l 16(sp),a0
   12374:	       move.l 24(a0),d0
   12378:	       move.l d0,-(sp)
   1237a:	       pea 1 <_start+0x1>
   1237e:	       move.l sp,d0
   12380:	       addq.l #8,d0
   12382:	       move.l d0,-(sp)
   12384:	       jsr 15a24 <getValueType>
   1238a:	       lea 12(sp),sp
   1238e:	       tst.w d0
   12390:	   ,-- bne.s 12396 <builtIn_setScale+0x36>
   12392:	   |   moveq #1,d0
   12394:	,--|-- bra.s 123f8 <builtIn_setScale+0x98>
	trimStack (&fun -> stack);
   12396:	|  '-> moveq #24,d0
   12398:	|      add.l 16(sp),d0
   1239c:	|      move.l d0,-(sp)
   1239e:	|      jsr 163a8 <trimStack>
   123a4:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   123a6:	|      movea.l 16(sp),a0
   123aa:	|      move.l 24(a0),d0
   123ae:	|      move.l d0,-(sp)
   123b0:	|      pea 1 <_start+0x1>
   123b4:	|      moveq #12,d0
   123b6:	|      add.l sp,d0
   123b8:	|      move.l d0,-(sp)
   123ba:	|      jsr 15a24 <getValueType>
   123c0:	|      lea 12(sp),sp
   123c4:	|      tst.w d0
   123c6:	|  ,-- bne.s 123cc <builtIn_setScale+0x6c>
   123c8:	|  |   moveq #1,d0
   123ca:	+--|-- bra.s 123f8 <builtIn_setScale+0x98>
	trimStack (&fun -> stack);
   123cc:	|  '-> moveq #24,d0
   123ce:	|      add.l 16(sp),d0
   123d2:	|      move.l d0,-(sp)
   123d4:	|      jsr 163a8 <trimStack>
   123da:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   123dc:	|      move.l (sp),d0
   123de:	|      move.l d0,d0
   123e0:	|      movea.w d0,a1
   123e2:	|      move.l 4(sp),d0
   123e6:	|      move.l d0,d0
   123e8:	|      movea.w d0,a0
   123ea:	|      move.l a1,-(sp)
   123ec:	|      move.l a0,-(sp)
   123ee:	|      jsr c60c <setScale>
   123f4:	|      addq.l #8,sp
	return BR_CONTINUE;
   123f6:	|      moveq #2,d0
}
   123f8:	'----> addq.l #8,sp
   123fa:	       rts

000123fc <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   123fc:	       subq.l #4,sp
	KPrintF("running stopCharacter\n");
   123fe:	       pea 1b576 <PutChar+0x25d0>
   12404:	       jsr 18504 <KPrintF>
   1240a:	       addq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1240c:	       movea.l 12(sp),a0
   12410:	       move.l 24(a0),d0
   12414:	       move.l d0,-(sp)
   12416:	       pea 7 <_start+0x7>
   1241a:	       move.l sp,d0
   1241c:	       addq.l #8,d0
   1241e:	       move.l d0,-(sp)
   12420:	       jsr 15a24 <getValueType>
   12426:	       lea 12(sp),sp
   1242a:	       tst.w d0
   1242c:	   ,-- bne.s 12432 <builtIn_stopCharacter+0x36>
   1242e:	   |   moveq #1,d0
   12430:	,--|-- bra.s 1246a <builtIn_stopCharacter+0x6e>
	trimStack (&fun -> stack);
   12432:	|  '-> moveq #24,d0
   12434:	|      add.l 12(sp),d0
   12438:	|      move.l d0,-(sp)
   1243a:	|      jsr 163a8 <trimStack>
   12440:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   12442:	|      move.l (sp),d0
   12444:	|      move.l d0,-(sp)
   12446:	|      jsr c740 <stopPerson>
   1244c:	|      addq.l #4,sp
   1244e:	|      movea.w d0,a0
   12450:	|      moveq #28,d0
   12452:	|      add.l 12(sp),d0
   12456:	|      move.l a0,-(sp)
   12458:	|      pea 1 <_start+0x1>
   1245c:	|      move.l d0,-(sp)
   1245e:	|      jsr 16316 <setVariable>
   12464:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12468:	|      moveq #2,d0
}
   1246a:	'----> addq.l #4,sp
   1246c:	       rts

0001246e <builtIn_pasteCharacter>:

builtIn(pasteCharacter)
{
	KPrintF("running pasteCharacter\n");
   1246e:	pea 1b58d <PutChar+0x25e7>
   12474:	jsr 18504 <KPrintF>
   1247a:	addq.l #4,sp
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   1247c:	pea 1b5a5 <PutChar+0x25ff>
   12482:	jsr 18504 <KPrintF>
   12488:	addq.l #4,sp
	return BR_CONTINUE;
   1248a:	moveq #2,d0
}
   1248c:	rts

0001248e <builtIn_animate>:

builtIn(animate)
{
   1248e:	       subq.l #8,sp
	KPrintF("running animate\n");
   12490:	       pea 1b5c3 <PutChar+0x261d>
   12496:	       jsr 18504 <KPrintF>
   1249c:	       addq.l #4,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   1249e:	       movea.l 16(sp),a0
   124a2:	       move.l 24(a0),d0
   124a6:	       move.l d0,-(sp)
   124a8:	       jsr 15efc <getAnimationFromVar>
   124ae:	       addq.l #4,sp
   124b0:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   124b4:	   ,-- bne.s 124ba <builtIn_animate+0x2c>
   124b6:	   |   moveq #1,d0
   124b8:	,--|-- bra.s 12538 <builtIn_animate+0xaa>
	trimStack (&fun -> stack);
   124ba:	|  '-> moveq #24,d0
   124bc:	|      add.l 16(sp),d0
   124c0:	|      move.l d0,-(sp)
   124c2:	|      jsr 163a8 <trimStack>
   124c8:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   124ca:	|      movea.l 16(sp),a0
   124ce:	|      move.l 24(a0),d0
   124d2:	|      move.l d0,-(sp)
   124d4:	|      pea 7 <_start+0x7>
   124d8:	|      move.l sp,d0
   124da:	|      addq.l #8,d0
   124dc:	|      move.l d0,-(sp)
   124de:	|      jsr 15a24 <getValueType>
   124e4:	|      lea 12(sp),sp
   124e8:	|      tst.w d0
   124ea:	|  ,-- bne.s 124f0 <builtIn_animate+0x62>
   124ec:	|  |   moveq #1,d0
   124ee:	+--|-- bra.s 12538 <builtIn_animate+0xaa>
	trimStack (&fun -> stack);
   124f0:	|  '-> moveq #24,d0
   124f2:	|      add.l 16(sp),d0
   124f6:	|      move.l d0,-(sp)
   124f8:	|      jsr 163a8 <trimStack>
   124fe:	|      addq.l #4,sp
	animatePerson (obj, pp);
   12500:	|      move.l (sp),d0
   12502:	|      move.l 4(sp),-(sp)
   12506:	|      move.l d0,-(sp)
   12508:	|      jsr 9e0e <animatePerson>
   1250e:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   12510:	|      move.l 4(sp),-(sp)
   12514:	|      jsr c794 <timeForAnim>
   1251a:	|      addq.l #4,sp
   1251c:	|      move.l d0,d1
   1251e:	|      moveq #28,d0
   12520:	|      add.l 16(sp),d0
   12524:	|      move.l d1,-(sp)
   12526:	|      pea 1 <_start+0x1>
   1252a:	|      move.l d0,-(sp)
   1252c:	|      jsr 16316 <setVariable>
   12532:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12536:	|      moveq #2,d0
}
   12538:	'----> addq.l #8,sp
   1253a:	       rts

0001253c <builtIn_setCostume>:

builtIn(setCostume)
{
   1253c:	       subq.l #8,sp
	KPrintF("running setCostume\n");
   1253e:	       pea 1b5d4 <PutChar+0x262e>
   12544:	       jsr 18504 <KPrintF>
   1254a:	       addq.l #4,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   1254c:	       movea.l 16(sp),a0
   12550:	       move.l 24(a0),d0
   12554:	       move.l d0,-(sp)
   12556:	       jsr 156d0 <getCostumeFromVar>
   1255c:	       addq.l #4,sp
   1255e:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   12562:	   ,-- bne.s 12568 <builtIn_setCostume+0x2c>
   12564:	   |   moveq #1,d0
   12566:	,--|-- bra.s 125c0 <builtIn_setCostume+0x84>
	trimStack (&fun -> stack);
   12568:	|  '-> moveq #24,d0
   1256a:	|      add.l 16(sp),d0
   1256e:	|      move.l d0,-(sp)
   12570:	|      jsr 163a8 <trimStack>
   12576:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12578:	|      movea.l 16(sp),a0
   1257c:	|      move.l 24(a0),d0
   12580:	|      move.l d0,-(sp)
   12582:	|      pea 7 <_start+0x7>
   12586:	|      move.l sp,d0
   12588:	|      addq.l #8,d0
   1258a:	|      move.l d0,-(sp)
   1258c:	|      jsr 15a24 <getValueType>
   12592:	|      lea 12(sp),sp
   12596:	|      tst.w d0
   12598:	|  ,-- bne.s 1259e <builtIn_setCostume+0x62>
   1259a:	|  |   moveq #1,d0
   1259c:	+--|-- bra.s 125c0 <builtIn_setCostume+0x84>
	trimStack (&fun -> stack);
   1259e:	|  '-> moveq #24,d0
   125a0:	|      add.l 16(sp),d0
   125a4:	|      move.l d0,-(sp)
   125a6:	|      jsr 163a8 <trimStack>
   125ac:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   125ae:	|      move.l (sp),d0
   125b0:	|      move.l 4(sp),-(sp)
   125b4:	|      move.l d0,-(sp)
   125b6:	|      jsr 9e58 <animatePersonUsingPersona>
   125bc:	|      addq.l #8,sp
	return BR_CONTINUE;
   125be:	|      moveq #2,d0
}
   125c0:	'----> addq.l #8,sp
   125c2:	       rts

000125c4 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   125c4:	       subq.l #8,sp
	KPrintF("running floatCharacter\n");
   125c6:	       pea 1b5e8 <PutChar+0x2642>
   125cc:	       jsr 18504 <KPrintF>
   125d2:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   125d4:	       movea.l 16(sp),a0
   125d8:	       move.l 24(a0),d0
   125dc:	       move.l d0,-(sp)
   125de:	       pea 1 <_start+0x1>
   125e2:	       move.l sp,d0
   125e4:	       addq.l #8,d0
   125e6:	       move.l d0,-(sp)
   125e8:	       jsr 15a24 <getValueType>
   125ee:	       lea 12(sp),sp
   125f2:	       tst.w d0
   125f4:	   ,-- bne.s 125fa <builtIn_floatCharacter+0x36>
   125f6:	   |   moveq #1,d0
   125f8:	,--|-- bra.s 1266e <builtIn_floatCharacter+0xaa>
	trimStack (&fun -> stack);
   125fa:	|  '-> moveq #24,d0
   125fc:	|      add.l 16(sp),d0
   12600:	|      move.l d0,-(sp)
   12602:	|      jsr 163a8 <trimStack>
   12608:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1260a:	|      movea.l 16(sp),a0
   1260e:	|      move.l 24(a0),d0
   12612:	|      move.l d0,-(sp)
   12614:	|      pea 7 <_start+0x7>
   12618:	|      moveq #12,d0
   1261a:	|      add.l sp,d0
   1261c:	|      move.l d0,-(sp)
   1261e:	|      jsr 15a24 <getValueType>
   12624:	|      lea 12(sp),sp
   12628:	|      tst.w d0
   1262a:	|  ,-- bne.s 12630 <builtIn_floatCharacter+0x6c>
   1262c:	|  |   moveq #1,d0
   1262e:	+--|-- bra.s 1266e <builtIn_floatCharacter+0xaa>
	trimStack (&fun -> stack);
   12630:	|  '-> moveq #24,d0
   12632:	|      add.l 16(sp),d0
   12636:	|      move.l d0,-(sp)
   12638:	|      jsr 163a8 <trimStack>
   1263e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   12640:	|      move.l 4(sp),d1
   12644:	|      move.l (sp),d0
   12646:	|      move.l d1,-(sp)
   12648:	|      move.l d0,-(sp)
   1264a:	|      jsr afe8 <floatCharacter>
   12650:	|      addq.l #8,sp
   12652:	|      movea.w d0,a0
   12654:	|      moveq #28,d0
   12656:	|      add.l 16(sp),d0
   1265a:	|      move.l a0,-(sp)
   1265c:	|      pea 1 <_start+0x1>
   12660:	|      move.l d0,-(sp)
   12662:	|      jsr 16316 <setVariable>
   12668:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1266c:	|      moveq #2,d0
}
   1266e:	'----> addq.l #8,sp
   12670:	       rts

00012672 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   12672:	       subq.l #8,sp
	KPrintF("running setCharacterWalkSpeed\n");
   12674:	       pea 1b600 <PutChar+0x265a>
   1267a:	       jsr 18504 <KPrintF>
   12680:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12682:	       movea.l 16(sp),a0
   12686:	       move.l 24(a0),d0
   1268a:	       move.l d0,-(sp)
   1268c:	       pea 1 <_start+0x1>
   12690:	       move.l sp,d0
   12692:	       addq.l #8,d0
   12694:	       move.l d0,-(sp)
   12696:	       jsr 15a24 <getValueType>
   1269c:	       lea 12(sp),sp
   126a0:	       tst.w d0
   126a2:	   ,-- bne.s 126a8 <builtIn_setCharacterWalkSpeed+0x36>
   126a4:	   |   moveq #1,d0
   126a6:	,--|-- bra.s 1271c <builtIn_setCharacterWalkSpeed+0xaa>
	trimStack (&fun -> stack);
   126a8:	|  '-> moveq #24,d0
   126aa:	|      add.l 16(sp),d0
   126ae:	|      move.l d0,-(sp)
   126b0:	|      jsr 163a8 <trimStack>
   126b6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   126b8:	|      movea.l 16(sp),a0
   126bc:	|      move.l 24(a0),d0
   126c0:	|      move.l d0,-(sp)
   126c2:	|      pea 7 <_start+0x7>
   126c6:	|      moveq #12,d0
   126c8:	|      add.l sp,d0
   126ca:	|      move.l d0,-(sp)
   126cc:	|      jsr 15a24 <getValueType>
   126d2:	|      lea 12(sp),sp
   126d6:	|      tst.w d0
   126d8:	|  ,-- bne.s 126de <builtIn_setCharacterWalkSpeed+0x6c>
   126da:	|  |   moveq #1,d0
   126dc:	+--|-- bra.s 1271c <builtIn_setCharacterWalkSpeed+0xaa>
	trimStack (&fun -> stack);
   126de:	|  '-> moveq #24,d0
   126e0:	|      add.l 16(sp),d0
   126e4:	|      move.l d0,-(sp)
   126e6:	|      jsr 163a8 <trimStack>
   126ec:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   126ee:	|      move.l 4(sp),d1
   126f2:	|      move.l (sp),d0
   126f4:	|      move.l d1,-(sp)
   126f6:	|      move.l d0,-(sp)
   126f8:	|      jsr c5a8 <setCharacterWalkSpeed>
   126fe:	|      addq.l #8,sp
   12700:	|      movea.w d0,a0
   12702:	|      moveq #28,d0
   12704:	|      add.l 16(sp),d0
   12708:	|      move.l a0,-(sp)
   1270a:	|      pea 1 <_start+0x1>
   1270e:	|      move.l d0,-(sp)
   12710:	|      jsr 16316 <setVariable>
   12716:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1271a:	|      moveq #2,d0
}
   1271c:	'----> addq.l #8,sp
   1271e:	       rts

00012720 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   12720:	       subq.l #8,sp
	KPrintF("running turnCharacter\n");
   12722:	       pea 1b61f <PutChar+0x2679>
   12728:	       jsr 18504 <KPrintF>
   1272e:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12730:	       movea.l 16(sp),a0
   12734:	       move.l 24(a0),d0
   12738:	       move.l d0,-(sp)
   1273a:	       pea 1 <_start+0x1>
   1273e:	       move.l sp,d0
   12740:	       addq.l #8,d0
   12742:	       move.l d0,-(sp)
   12744:	       jsr 15a24 <getValueType>
   1274a:	       lea 12(sp),sp
   1274e:	       tst.w d0
   12750:	   ,-- bne.s 12756 <builtIn_turnCharacter+0x36>
   12752:	   |   moveq #1,d0
   12754:	,--|-- bra.s 127ca <builtIn_turnCharacter+0xaa>
	trimStack (&fun -> stack);
   12756:	|  '-> moveq #24,d0
   12758:	|      add.l 16(sp),d0
   1275c:	|      move.l d0,-(sp)
   1275e:	|      jsr 163a8 <trimStack>
   12764:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12766:	|      movea.l 16(sp),a0
   1276a:	|      move.l 24(a0),d0
   1276e:	|      move.l d0,-(sp)
   12770:	|      pea 7 <_start+0x7>
   12774:	|      moveq #12,d0
   12776:	|      add.l sp,d0
   12778:	|      move.l d0,-(sp)
   1277a:	|      jsr 15a24 <getValueType>
   12780:	|      lea 12(sp),sp
   12784:	|      tst.w d0
   12786:	|  ,-- bne.s 1278c <builtIn_turnCharacter+0x6c>
   12788:	|  |   moveq #1,d0
   1278a:	+--|-- bra.s 127ca <builtIn_turnCharacter+0xaa>
	trimStack (&fun -> stack);
   1278c:	|  '-> moveq #24,d0
   1278e:	|      add.l 16(sp),d0
   12792:	|      move.l d0,-(sp)
   12794:	|      jsr 163a8 <trimStack>
   1279a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   1279c:	|      move.l (sp),d1
   1279e:	|      move.l 4(sp),d0
   127a2:	|      move.l d1,-(sp)
   127a4:	|      move.l d0,-(sp)
   127a6:	|      jsr c84c <turnPersonToFace>
   127ac:	|      addq.l #8,sp
   127ae:	|      movea.w d0,a0
   127b0:	|      moveq #28,d0
   127b2:	|      add.l 16(sp),d0
   127b6:	|      move.l a0,-(sp)
   127b8:	|      pea 1 <_start+0x1>
   127bc:	|      move.l d0,-(sp)
   127be:	|      jsr 16316 <setVariable>
   127c4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   127c8:	|      moveq #2,d0
}
   127ca:	'----> addq.l #8,sp
   127cc:	       rts

000127ce <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   127ce:	       subq.l #8,sp
	KPrintF("running setCharacterExtra\n");
   127d0:	       pea 1b636 <PutChar+0x2690>
   127d6:	       jsr 18504 <KPrintF>
   127dc:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   127de:	       movea.l 16(sp),a0
   127e2:	       move.l 24(a0),d0
   127e6:	       move.l d0,-(sp)
   127e8:	       pea 1 <_start+0x1>
   127ec:	       move.l sp,d0
   127ee:	       addq.l #8,d0
   127f0:	       move.l d0,-(sp)
   127f2:	       jsr 15a24 <getValueType>
   127f8:	       lea 12(sp),sp
   127fc:	       tst.w d0
   127fe:	   ,-- bne.s 12804 <builtIn_setCharacterExtra+0x36>
   12800:	   |   moveq #1,d0
   12802:	,--|-- bra.s 12878 <builtIn_setCharacterExtra+0xaa>
	trimStack (&fun -> stack);
   12804:	|  '-> moveq #24,d0
   12806:	|      add.l 16(sp),d0
   1280a:	|      move.l d0,-(sp)
   1280c:	|      jsr 163a8 <trimStack>
   12812:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12814:	|      movea.l 16(sp),a0
   12818:	|      move.l 24(a0),d0
   1281c:	|      move.l d0,-(sp)
   1281e:	|      pea 7 <_start+0x7>
   12822:	|      moveq #12,d0
   12824:	|      add.l sp,d0
   12826:	|      move.l d0,-(sp)
   12828:	|      jsr 15a24 <getValueType>
   1282e:	|      lea 12(sp),sp
   12832:	|      tst.w d0
   12834:	|  ,-- bne.s 1283a <builtIn_setCharacterExtra+0x6c>
   12836:	|  |   moveq #1,d0
   12838:	+--|-- bra.s 12878 <builtIn_setCharacterExtra+0xaa>
	trimStack (&fun -> stack);
   1283a:	|  '-> moveq #24,d0
   1283c:	|      add.l 16(sp),d0
   12840:	|      move.l d0,-(sp)
   12842:	|      jsr 163a8 <trimStack>
   12848:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   1284a:	|      move.l (sp),d1
   1284c:	|      move.l 4(sp),d0
   12850:	|      move.l d1,-(sp)
   12852:	|      move.l d0,-(sp)
   12854:	|      jsr c5d6 <setPersonExtra>
   1285a:	|      addq.l #8,sp
   1285c:	|      movea.w d0,a0
   1285e:	|      moveq #28,d0
   12860:	|      add.l 16(sp),d0
   12864:	|      move.l a0,-(sp)
   12866:	|      pea 1 <_start+0x1>
   1286a:	|      move.l d0,-(sp)
   1286c:	|      jsr 16316 <setVariable>
   12872:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12876:	|      moveq #2,d0
}
   12878:	'----> addq.l #8,sp
   1287a:	       rts

0001287c <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   1287c:	       subq.l #4,sp
	KPrintF("running removeCharacter\n");
   1287e:	       pea 1b651 <PutChar+0x26ab>
   12884:	       jsr 18504 <KPrintF>
   1288a:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1288c:	       movea.l 12(sp),a0
   12890:	       move.l 24(a0),d0
   12894:	       move.l d0,-(sp)
   12896:	       pea 7 <_start+0x7>
   1289a:	       move.l sp,d0
   1289c:	       addq.l #8,d0
   1289e:	       move.l d0,-(sp)
   128a0:	       jsr 15a24 <getValueType>
   128a6:	       lea 12(sp),sp
   128aa:	       tst.w d0
   128ac:	   ,-- bne.s 128b2 <builtIn_removeCharacter+0x36>
   128ae:	   |   moveq #1,d0
   128b0:	,--|-- bra.s 128d0 <builtIn_removeCharacter+0x54>
	trimStack (&fun -> stack);
   128b2:	|  '-> moveq #24,d0
   128b4:	|      add.l 12(sp),d0
   128b8:	|      move.l d0,-(sp)
   128ba:	|      jsr 163a8 <trimStack>
   128c0:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   128c2:	|      move.l (sp),d0
   128c4:	|      move.l d0,-(sp)
   128c6:	|      jsr b7d6 <removeOneCharacter>
   128cc:	|      addq.l #4,sp
	return BR_CONTINUE;
   128ce:	|      moveq #2,d0
}
   128d0:	'----> addq.l #4,sp
   128d2:	       rts

000128d4 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   128d4:	                lea -28(sp),sp
   128d8:	                move.l d2,-(sp)
   128da:	                move.l 44(sp),d1
   128de:	                move.l 48(sp),d0
   128e2:	                move.w d1,d1
   128e4:	                move.w d1,6(sp)
   128e8:	                move.w d0,d0
   128ea:	                move.w d0,4(sp)
	switch (numParams) {
   128ee:	                moveq #2,d0
   128f0:	                cmp.l 36(sp),d0
   128f4:	      ,-------- beq.w 12a36 <moveChr+0x162>
   128f8:	      |         moveq #3,d0
   128fa:	      |         cmp.l 36(sp),d0
   128fe:	,-----|-------- bne.w 12b6a <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12902:	|     |         movea.l 40(sp),a0
   12906:	|     |         move.l 24(a0),d0
   1290a:	|     |         move.l d0,-(sp)
   1290c:	|     |         pea 1 <_start+0x1>
   12910:	|     |         lea 20(sp),a0
   12914:	|     |         move.l a0,-(sp)
   12916:	|     |         jsr 15a24 <getValueType>
   1291c:	|     |         lea 12(sp),sp
   12920:	|     |         tst.w d0
   12922:	|     |     ,-- bne.s 1292a <moveChr+0x56>
   12924:	|     |     |   moveq #1,d0
   12926:	|  ,--|-----|-- bra.w 12b7a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1292a:	|  |  |     '-> moveq #24,d0
   1292c:	|  |  |         add.l 40(sp),d0
   12930:	|  |  |         move.l d0,-(sp)
   12932:	|  |  |         jsr 163a8 <trimStack>
   12938:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1293a:	|  |  |         movea.l 40(sp),a0
   1293e:	|  |  |         move.l 24(a0),d0
   12942:	|  |  |         move.l d0,-(sp)
   12944:	|  |  |         pea 1 <_start+0x1>
   12948:	|  |  |         lea 24(sp),a0
   1294c:	|  |  |         move.l a0,-(sp)
   1294e:	|  |  |         jsr 15a24 <getValueType>
   12954:	|  |  |         lea 12(sp),sp
   12958:	|  |  |         tst.w d0
   1295a:	|  |  |     ,-- bne.s 12962 <moveChr+0x8e>
   1295c:	|  |  |     |   moveq #1,d0
   1295e:	|  +--|-----|-- bra.w 12b7a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12962:	|  |  |     '-> moveq #24,d0
   12964:	|  |  |         add.l 40(sp),d0
   12968:	|  |  |         move.l d0,-(sp)
   1296a:	|  |  |         jsr 163a8 <trimStack>
   12970:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12972:	|  |  |         movea.l 40(sp),a0
   12976:	|  |  |         move.l 24(a0),d0
   1297a:	|  |  |         move.l d0,-(sp)
   1297c:	|  |  |         pea 7 <_start+0x7>
   12980:	|  |  |         lea 16(sp),a0
   12984:	|  |  |         move.l a0,-(sp)
   12986:	|  |  |         jsr 15a24 <getValueType>
   1298c:	|  |  |         lea 12(sp),sp
   12990:	|  |  |         tst.w d0
   12992:	|  |  |     ,-- bne.s 1299a <moveChr+0xc6>
   12994:	|  |  |     |   moveq #1,d0
   12996:	|  +--|-----|-- bra.w 12b7a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1299a:	|  |  |     '-> moveq #24,d0
   1299c:	|  |  |         add.l 40(sp),d0
   129a0:	|  |  |         move.l d0,-(sp)
   129a2:	|  |  |         jsr 163a8 <trimStack>
   129a8:	|  |  |         addq.l #4,sp

			if (force) {
   129aa:	|  |  |         tst.w 6(sp)
   129ae:	|  |  |     ,-- beq.s 129de <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   129b0:	|  |  |     |   movea.l 8(sp),a0
   129b4:	|  |  |     |   move.l 12(sp),d1
   129b8:	|  |  |     |   move.l 16(sp),d0
   129bc:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb28f9>
   129c0:	|  |  |     |   move.l 44(sp),-(sp)
   129c4:	|  |  |     |   move.l a0,-(sp)
   129c6:	|  |  |     |   move.l d1,-(sp)
   129c8:	|  |  |     |   move.l d0,-(sp)
   129ca:	|  |  |     |   jsr b00c <forceWalkingPerson>
   129d0:	|  |  |     |   lea 20(sp),sp
   129d4:	|  |  |     |   tst.w d0
   129d6:	|  |  |  ,--|-- beq.s 12a30 <moveChr+0x15c>
   129d8:	|  |  |  |  |   moveq #3,d0
   129da:	|  +--|--|--|-- bra.w 12b7a <moveChr+0x2a6>
			} else if (immediate) {
   129de:	|  |  |  |  '-> tst.w 4(sp)
   129e2:	|  |  |  |  ,-- beq.s 12a02 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   129e4:	|  |  |  |  |   movea.l 8(sp),a0
   129e8:	|  |  |  |  |   move.l 12(sp),d1
   129ec:	|  |  |  |  |   move.l 16(sp),d0
   129f0:	|  |  |  |  |   move.l a0,-(sp)
   129f2:	|  |  |  |  |   move.l d1,-(sp)
   129f4:	|  |  |  |  |   move.l d0,-(sp)
   129f6:	|  |  |  |  |   jsr b322 <jumpPerson>
   129fc:	|  |  |  |  |   lea 12(sp),sp
   12a00:	|  |  |  +--|-- bra.s 12a30 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   12a02:	|  |  |  |  '-> movea.l 8(sp),a0
   12a06:	|  |  |  |      move.l 12(sp),d1
   12a0a:	|  |  |  |      move.l 16(sp),d0
   12a0e:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb28f9>
   12a12:	|  |  |  |      move.l 44(sp),-(sp)
   12a16:	|  |  |  |      move.l a0,-(sp)
   12a18:	|  |  |  |      move.l d1,-(sp)
   12a1a:	|  |  |  |      move.l d0,-(sp)
   12a1c:	|  |  |  |      jsr b4f2 <makeWalkingPerson>
   12a22:	|  |  |  |      lea 20(sp),sp
   12a26:	|  |  |  |      tst.w d0
   12a28:	|  |  |  +----- beq.s 12a30 <moveChr+0x15c>
   12a2a:	|  |  |  |      moveq #3,d0
   12a2c:	|  +--|--|----- bra.w 12b7a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   12a30:	|  |  |  '----> moveq #2,d0
   12a32:	|  +--|-------- bra.w 12b7a <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a36:	|  |  '-------> movea.l 40(sp),a0
   12a3a:	|  |            move.l 24(a0),d0
   12a3e:	|  |            move.l d0,-(sp)
   12a40:	|  |            pea 7 <_start+0x7>
   12a44:	|  |            moveq #32,d0
   12a46:	|  |            add.l sp,d0
   12a48:	|  |            move.l d0,-(sp)
   12a4a:	|  |            jsr 15a24 <getValueType>
   12a50:	|  |            lea 12(sp),sp
   12a54:	|  |            tst.w d0
   12a56:	|  |        ,-- bne.s 12a5e <moveChr+0x18a>
   12a58:	|  |        |   moveq #1,d0
   12a5a:	|  +--------|-- bra.w 12b7a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12a5e:	|  |        '-> moveq #24,d0
   12a60:	|  |            add.l 40(sp),d0
   12a64:	|  |            move.l d0,-(sp)
   12a66:	|  |            jsr 163a8 <trimStack>
   12a6c:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a6e:	|  |            movea.l 40(sp),a0
   12a72:	|  |            move.l 24(a0),d0
   12a76:	|  |            move.l d0,-(sp)
   12a78:	|  |            pea 7 <_start+0x7>
   12a7c:	|  |            lea 28(sp),a0
   12a80:	|  |            move.l a0,-(sp)
   12a82:	|  |            jsr 15a24 <getValueType>
   12a88:	|  |            lea 12(sp),sp
   12a8c:	|  |            tst.w d0
   12a8e:	|  |        ,-- bne.s 12a96 <moveChr+0x1c2>
   12a90:	|  |        |   moveq #1,d0
   12a92:	|  +--------|-- bra.w 12b7a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12a96:	|  |        '-> moveq #24,d0
   12a98:	|  |            add.l 40(sp),d0
   12a9c:	|  |            move.l d0,-(sp)
   12a9e:	|  |            jsr 163a8 <trimStack>
   12aa4:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   12aa6:	|  |            move.l 24(sp),d0
   12aaa:	|  |            move.l d0,-(sp)
   12aac:	|  |            jsr 16ce6 <getRegionForObject>
   12ab2:	|  |            addq.l #4,sp
   12ab4:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   12ab8:	|  |        ,-- bne.s 12ac0 <moveChr+0x1ec>
   12aba:	|  |        |   moveq #2,d0
   12abc:	|  +--------|-- bra.w 12b7a <moveChr+0x2a6>

			if (force)
   12ac0:	|  |        '-> tst.w 6(sp)
   12ac4:	|  |        ,-- beq.s 12b00 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   12ac6:	|  |        |   movea.l 28(sp),a0
   12aca:	|  |        |   move.l 24(a0),d2
   12ace:	|  |        |   movea.l 20(sp),a1
   12ad2:	|  |        |   movea.l 28(sp),a0
   12ad6:	|  |        |   move.l 20(a0),d1
   12ada:	|  |        |   movea.l 28(sp),a0
   12ade:	|  |        |   move.l 16(a0),d0
   12ae2:	|  |        |   move.l d2,-(sp)
   12ae4:	|  |        |   move.l 44(sp),-(sp)
   12ae8:	|  |        |   move.l a1,-(sp)
   12aea:	|  |        |   move.l d1,-(sp)
   12aec:	|  |        |   move.l d0,-(sp)
   12aee:	|  |        |   jsr b00c <forceWalkingPerson>
   12af4:	|  |        |   lea 20(sp),sp
   12af8:	|  |        |   tst.w d0
   12afa:	|  |     ,--|-- beq.s 12b66 <moveChr+0x292>
   12afc:	|  |     |  |   moveq #3,d0
   12afe:	|  +-----|--|-- bra.s 12b7a <moveChr+0x2a6>
			}
			else if (immediate)
   12b00:	|  |     |  '-> tst.w 4(sp)
   12b04:	|  |     |  ,-- beq.s 12b2c <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   12b06:	|  |     |  |   movea.l 20(sp),a1
   12b0a:	|  |     |  |   movea.l 28(sp),a0
   12b0e:	|  |     |  |   move.l 20(a0),d1
   12b12:	|  |     |  |   movea.l 28(sp),a0
   12b16:	|  |     |  |   move.l 16(a0),d0
   12b1a:	|  |     |  |   move.l a1,-(sp)
   12b1c:	|  |     |  |   move.l d1,-(sp)
   12b1e:	|  |     |  |   move.l d0,-(sp)
   12b20:	|  |     |  |   jsr b322 <jumpPerson>
   12b26:	|  |     |  |   lea 12(sp),sp
   12b2a:	|  |     +--|-- bra.s 12b66 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   12b2c:	|  |     |  '-> movea.l 28(sp),a0
   12b30:	|  |     |      move.l 24(a0),d2
   12b34:	|  |     |      movea.l 20(sp),a1
   12b38:	|  |     |      movea.l 28(sp),a0
   12b3c:	|  |     |      move.l 20(a0),d1
   12b40:	|  |     |      movea.l 28(sp),a0
   12b44:	|  |     |      move.l 16(a0),d0
   12b48:	|  |     |      move.l d2,-(sp)
   12b4a:	|  |     |      move.l 44(sp),-(sp)
   12b4e:	|  |     |      move.l a1,-(sp)
   12b50:	|  |     |      move.l d1,-(sp)
   12b52:	|  |     |      move.l d0,-(sp)
   12b54:	|  |     |      jsr b4f2 <makeWalkingPerson>
   12b5a:	|  |     |      lea 20(sp),sp
   12b5e:	|  |     |      tst.w d0
   12b60:	|  |     +----- beq.s 12b66 <moveChr+0x292>
   12b62:	|  |     |      moveq #3,d0
   12b64:	|  +-----|----- bra.s 12b7a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   12b66:	|  |     '----> moveq #2,d0
   12b68:	|  +----------- bra.s 12b7a <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   12b6a:	'--|----------> pea 1b66a <PutChar+0x26c4>
   12b70:	   |            jsr 18504 <KPrintF>
   12b76:	   |            addq.l #4,sp
			return BR_ERROR;
   12b78:	   |            moveq #1,d0
	}
}
   12b7a:	   '----------> move.l (sp)+,d2
   12b7c:	                lea 28(sp),sp
   12b80:	                rts

00012b82 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	KPrintF("running moveCharacter\n");
   12b82:	pea 1b6a0 <talk.c.490538ff+0x12>
   12b88:	jsr 18504 <KPrintF>
   12b8e:	addq.l #4,sp
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   12b90:	clr.l -(sp)
   12b92:	clr.l -(sp)
   12b94:	move.l 16(sp),-(sp)
   12b98:	move.l 16(sp),-(sp)
   12b9c:	jsr 128d4 <moveChr>
   12ba2:	lea 16(sp),sp
}
   12ba6:	rts

00012ba8 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	KPrintF("running forceCharacter\n");
   12ba8:	pea 1b6b7 <talk.c.490538ff+0x29>
   12bae:	jsr 18504 <KPrintF>
   12bb4:	addq.l #4,sp
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   12bb6:	clr.l -(sp)
   12bb8:	pea 1 <_start+0x1>
   12bbc:	move.l 16(sp),-(sp)
   12bc0:	move.l 16(sp),-(sp)
   12bc4:	jsr 128d4 <moveChr>
   12bca:	lea 16(sp),sp
}
   12bce:	rts

00012bd0 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	KPrintF("running jumpCharacter\n");
   12bd0:	pea 1b6cf <talk.c.490538ff+0x41>
   12bd6:	jsr 18504 <KPrintF>
   12bdc:	addq.l #4,sp
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   12bde:	pea 1 <_start+0x1>
   12be2:	clr.l -(sp)
   12be4:	move.l 16(sp),-(sp)
   12be8:	move.l 16(sp),-(sp)
   12bec:	jsr 128d4 <moveChr>
   12bf2:	lea 16(sp),sp
}
   12bf6:	rts

00012bf8 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	KPrintF("running clearStatus\n");
   12bf8:	pea 1b6e6 <talk.c.490538ff+0x58>
   12bfe:	jsr 18504 <KPrintF>
   12c04:	addq.l #4,sp
	UNUSEDALL
	clearStatusBar ();
   12c06:	jsr 8b5c <clearStatusBar>
	return BR_CONTINUE;
   12c0c:	moveq #2,d0
}
   12c0e:	rts

00012c10 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	KPrintF("running removeLastStatus\n");
   12c10:	pea 1b6fb <talk.c.490538ff+0x6d>
   12c16:	jsr 18504 <KPrintF>
   12c1c:	addq.l #4,sp
	UNUSEDALL
	killLastStatus ();
   12c1e:	jsr 8c04 <killLastStatus>
	return BR_CONTINUE;
   12c24:	moveq #2,d0
}
   12c26:	rts

00012c28 <builtIn_addStatus>:

builtIn(addStatus)
{
	KPrintF("running addStatus\n");
   12c28:	pea 1b715 <talk.c.490538ff+0x87>
   12c2e:	jsr 18504 <KPrintF>
   12c34:	addq.l #4,sp
	UNUSEDALL
	addStatusBar ();
   12c36:	jsr 8af2 <addStatusBar>
	return BR_CONTINUE;
   12c3c:	moveq #2,d0
}
   12c3e:	rts

00012c40 <builtIn_statusText>:

builtIn(statusText)
{
   12c40:	       subq.l #8,sp
   12c42:	       move.l a6,-(sp)
	KPrintF("running statusText\n");
   12c44:	       pea 1b728 <talk.c.490538ff+0x9a>
   12c4a:	       jsr 18504 <KPrintF>
   12c50:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   12c52:	       movea.l 20(sp),a0
   12c56:	       move.l 24(a0),d0
   12c5a:	       move.l d0,-(sp)
   12c5c:	       jsr 15ffa <getTextFromAnyVar>
   12c62:	       addq.l #4,sp
   12c64:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   12c68:	   ,-- bne.s 12c6e <builtIn_statusText+0x2e>
   12c6a:	   |   moveq #1,d0
   12c6c:	,--|-- bra.s 12ca2 <builtIn_statusText+0x62>
	trimStack(&fun->stack);
   12c6e:	|  '-> moveq #24,d0
   12c70:	|      add.l 20(sp),d0
   12c74:	|      move.l d0,-(sp)
   12c76:	|      jsr 163a8 <trimStack>
   12c7c:	|      addq.l #4,sp
	setStatusBar(newText);
   12c7e:	|      move.l 8(sp),-(sp)
   12c82:	|      jsr 8e84 <setStatusBar>
   12c88:	|      addq.l #4,sp
	FreeVec(newText);
   12c8a:	|      move.l 8(sp),4(sp)
   12c90:	|      move.l 1e81c <SysBase>,d0
   12c96:	|      movea.l d0,a6
   12c98:	|      movea.l 4(sp),a1
   12c9c:	|      jsr -690(a6)
	return BR_CONTINUE;
   12ca0:	|      moveq #2,d0
}
   12ca2:	'----> movea.l (sp)+,a6
   12ca4:	       addq.l #8,sp
   12ca6:	       rts

00012ca8 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   12ca8:	       subq.l #4,sp
	KPrintF("running lightStatus\n");
   12caa:	       pea 1b73c <talk.c.490538ff+0xae>
   12cb0:	       jsr 18504 <KPrintF>
   12cb6:	       addq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12cb8:	       movea.l 12(sp),a0
   12cbc:	       move.l 24(a0),d0
   12cc0:	       move.l d0,-(sp)
   12cc2:	       pea 1 <_start+0x1>
   12cc6:	       move.l sp,d0
   12cc8:	       addq.l #8,d0
   12cca:	       move.l d0,-(sp)
   12ccc:	       jsr 15a24 <getValueType>
   12cd2:	       lea 12(sp),sp
   12cd6:	       tst.w d0
   12cd8:	   ,-- bne.s 12cde <builtIn_lightStatus+0x36>
   12cda:	   |   moveq #1,d0
   12cdc:	,--|-- bra.s 12cfc <builtIn_lightStatus+0x54>
	trimStack (&fun -> stack);
   12cde:	|  '-> moveq #24,d0
   12ce0:	|      add.l 12(sp),d0
   12ce4:	|      move.l d0,-(sp)
   12ce6:	|      jsr 163a8 <trimStack>
   12cec:	|      addq.l #4,sp
	setLitStatus (val);
   12cee:	|      move.l (sp),d0
   12cf0:	|      move.l d0,-(sp)
   12cf2:	|      jsr 8e74 <setLitStatus>
   12cf8:	|      addq.l #4,sp
	return BR_CONTINUE;
   12cfa:	|      moveq #2,d0
}
   12cfc:	'----> addq.l #4,sp
   12cfe:	       rts

00012d00 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   12d00:	       subq.l #8,sp
	KPrintF("running positionStatus\n");
   12d02:	       pea 1b751 <talk.c.490538ff+0xc3>
   12d08:	       jsr 18504 <KPrintF>
   12d0e:	       addq.l #4,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d10:	       movea.l 16(sp),a0
   12d14:	       move.l 24(a0),d0
   12d18:	       move.l d0,-(sp)
   12d1a:	       pea 1 <_start+0x1>
   12d1e:	       move.l sp,d0
   12d20:	       addq.l #8,d0
   12d22:	       move.l d0,-(sp)
   12d24:	       jsr 15a24 <getValueType>
   12d2a:	       lea 12(sp),sp
   12d2e:	       tst.w d0
   12d30:	   ,-- bne.s 12d36 <builtIn_positionStatus+0x36>
   12d32:	   |   moveq #1,d0
   12d34:	,--|-- bra.s 12d90 <builtIn_positionStatus+0x90>
	trimStack (&fun -> stack);
   12d36:	|  '-> moveq #24,d0
   12d38:	|      add.l 16(sp),d0
   12d3c:	|      move.l d0,-(sp)
   12d3e:	|      jsr 163a8 <trimStack>
   12d44:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d46:	|      movea.l 16(sp),a0
   12d4a:	|      move.l 24(a0),d0
   12d4e:	|      move.l d0,-(sp)
   12d50:	|      pea 1 <_start+0x1>
   12d54:	|      moveq #12,d0
   12d56:	|      add.l sp,d0
   12d58:	|      move.l d0,-(sp)
   12d5a:	|      jsr 15a24 <getValueType>
   12d60:	|      lea 12(sp),sp
   12d64:	|      tst.w d0
   12d66:	|  ,-- bne.s 12d6c <builtIn_positionStatus+0x6c>
   12d68:	|  |   moveq #1,d0
   12d6a:	+--|-- bra.s 12d90 <builtIn_positionStatus+0x90>
	trimStack (&fun -> stack);
   12d6c:	|  '-> moveq #24,d0
   12d6e:	|      add.l 16(sp),d0
   12d72:	|      move.l d0,-(sp)
   12d74:	|      jsr 163a8 <trimStack>
   12d7a:	|      addq.l #4,sp
	positionStatus (x, y);
   12d7c:	|      move.l (sp),d1
   12d7e:	|      move.l 4(sp),d0
   12d82:	|      move.l d1,-(sp)
   12d84:	|      move.l d0,-(sp)
   12d86:	|      jsr 8c66 <positionStatus>
   12d8c:	|      addq.l #8,sp
	return BR_CONTINUE;
   12d8e:	|      moveq #2,d0
}
   12d90:	'----> addq.l #8,sp
   12d92:	       rts

00012d94 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   12d94:	       subq.l #4,sp
	KPrintF("running alignStatus\n");
   12d96:	       pea 1b769 <talk.c.490538ff+0xdb>
   12d9c:	       jsr 18504 <KPrintF>
   12da2:	       addq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12da4:	       movea.l 12(sp),a0
   12da8:	       move.l 24(a0),d0
   12dac:	       move.l d0,-(sp)
   12dae:	       pea 1 <_start+0x1>
   12db2:	       move.l sp,d0
   12db4:	       addq.l #8,d0
   12db6:	       move.l d0,-(sp)
   12db8:	       jsr 15a24 <getValueType>
   12dbe:	       lea 12(sp),sp
   12dc2:	       tst.w d0
   12dc4:	   ,-- bne.s 12dca <builtIn_alignStatus+0x36>
   12dc6:	   |   moveq #1,d0
   12dc8:	,--|-- bra.s 12dea <builtIn_alignStatus+0x56>
	trimStack (&fun -> stack);
   12dca:	|  '-> moveq #24,d0
   12dcc:	|      add.l 12(sp),d0
   12dd0:	|      move.l d0,-(sp)
   12dd2:	|      jsr 163a8 <trimStack>
   12dd8:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   12dda:	|      move.l (sp),d0
   12ddc:	|      movea.l 1e18e <nowStatus>,a0
   12de2:	|      move.l d0,d0
   12de4:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   12de8:	|      moveq #2,d0
}
   12dea:	'----> addq.l #4,sp
   12dec:	       rts

00012dee <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   12dee:	             tst.l 4(sp)
   12df2:	         ,-- beq.s 12dfe <getFuncNumForCallback+0x10>
   12df4:	         |   moveq #1,d0
   12df6:	         |   cmp.l 4(sp),d0
   12dfa:	      ,--|-- beq.s 12e06 <getFuncNumForCallback+0x18>
   12dfc:	   ,--|--|-- bra.s 12e3c <getFuncNumForCallback+0x4e>
		case 0:
			*functionNum = 0;
   12dfe:	   |  |  '-> movea.l 12(sp),a0
   12e02:	   |  |      clr.l (a0)
			break;
   12e04:	,--|--|----- bra.s 12e4e <getFuncNumForCallback+0x60>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   12e06:	|  |  '----> movea.l 8(sp),a0
   12e0a:	|  |         move.l 24(a0),d0
   12e0e:	|  |         move.l d0,-(sp)
   12e10:	|  |         pea 2 <_start+0x2>
   12e14:	|  |         move.l 20(sp),-(sp)
   12e18:	|  |         jsr 15a24 <getValueType>
   12e1e:	|  |         lea 12(sp),sp
   12e22:	|  |         tst.w d0
   12e24:	|  |     ,-- bne.s 12e2a <getFuncNumForCallback+0x3c>
   12e26:	|  |     |   clr.w d0
   12e28:	|  |  ,--|-- bra.s 12e50 <getFuncNumForCallback+0x62>
			trimStack (&fun -> stack);
   12e2a:	|  |  |  '-> moveq #24,d0
   12e2c:	|  |  |      add.l 8(sp),d0
   12e30:	|  |  |      move.l d0,-(sp)
   12e32:	|  |  |      jsr 163a8 <trimStack>
   12e38:	|  |  |      addq.l #4,sp
			break;
   12e3a:	+--|--|----- bra.s 12e4e <getFuncNumForCallback+0x60>

		default:
			KPrintF ("Too many parameters.");
   12e3c:	|  '--|----> pea 1b77e <talk.c.490538ff+0xf0>
   12e42:	|     |      jsr 18504 <KPrintF>
   12e48:	|     |      addq.l #4,sp
			return FALSE;
   12e4a:	|     |      clr.w d0
   12e4c:	|     +----- bra.s 12e50 <getFuncNumForCallback+0x62>
	}
	return TRUE;
   12e4e:	'-----|----> moveq #1,d0
}
   12e50:	      '----> rts

00012e52 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   12e52:	       subq.l #4,sp
	KPrintF("running onLeftMouse\n");
   12e54:	       pea 1b793 <talk.c.490538ff+0x105>
   12e5a:	       jsr 18504 <KPrintF>
   12e60:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12e62:	       move.l sp,d0
   12e64:	       move.l d0,-(sp)
   12e66:	       move.l 16(sp),-(sp)
   12e6a:	       move.l 16(sp),-(sp)
   12e6e:	       jsr 12dee <getFuncNumForCallback>
   12e74:	       lea 12(sp),sp
   12e78:	       tst.w d0
   12e7a:	,----- beq.s 12e8a <builtIn_onLeftMouse+0x38>
	{
		currentEvents -> leftMouseFunction = functionNum;
   12e7c:	|      movea.l 1e180 <currentEvents>,a0
   12e82:	|      move.l (sp),d0
   12e84:	|      move.l d0,(a0)
		return BR_CONTINUE;
   12e86:	|      moveq #2,d0
   12e88:	|  ,-- bra.s 12e8c <builtIn_onLeftMouse+0x3a>
	}
	return BR_ERROR;
   12e8a:	'--|-> moveq #1,d0
}
   12e8c:	   '-> addq.l #4,sp
   12e8e:	       rts

00012e90 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   12e90:	       subq.l #4,sp
	KPrintF("running onLeftMouseUp\n");
   12e92:	       pea 1b7a8 <talk.c.490538ff+0x11a>
   12e98:	       jsr 18504 <KPrintF>
   12e9e:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12ea0:	       move.l sp,d0
   12ea2:	       move.l d0,-(sp)
   12ea4:	       move.l 16(sp),-(sp)
   12ea8:	       move.l 16(sp),-(sp)
   12eac:	       jsr 12dee <getFuncNumForCallback>
   12eb2:	       lea 12(sp),sp
   12eb6:	       tst.w d0
   12eb8:	,----- beq.s 12eca <builtIn_onLeftMouseUp+0x3a>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   12eba:	|      movea.l 1e180 <currentEvents>,a0
   12ec0:	|      move.l (sp),d0
   12ec2:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   12ec6:	|      moveq #2,d0
   12ec8:	|  ,-- bra.s 12ecc <builtIn_onLeftMouseUp+0x3c>
	}
	return BR_ERROR;
   12eca:	'--|-> moveq #1,d0
}
   12ecc:	   '-> addq.l #4,sp
   12ece:	       rts

00012ed0 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   12ed0:	       subq.l #4,sp
	KPrintF("running onRightMouse\n");
   12ed2:	       pea 1b7bf <talk.c.490538ff+0x131>
   12ed8:	       jsr 18504 <KPrintF>
   12ede:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12ee0:	       move.l sp,d0
   12ee2:	       move.l d0,-(sp)
   12ee4:	       move.l 16(sp),-(sp)
   12ee8:	       move.l 16(sp),-(sp)
   12eec:	       jsr 12dee <getFuncNumForCallback>
   12ef2:	       lea 12(sp),sp
   12ef6:	       tst.w d0
   12ef8:	,----- beq.s 12f0a <builtIn_onRightMouse+0x3a>
	{
		currentEvents -> rightMouseFunction = functionNum;
   12efa:	|      movea.l 1e180 <currentEvents>,a0
   12f00:	|      move.l (sp),d0
   12f02:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   12f06:	|      moveq #2,d0
   12f08:	|  ,-- bra.s 12f0c <builtIn_onRightMouse+0x3c>
	}
	return BR_ERROR;
   12f0a:	'--|-> moveq #1,d0
}
   12f0c:	   '-> addq.l #4,sp
   12f0e:	       rts

00012f10 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   12f10:	       subq.l #4,sp
	KPrintF("running onRightMouseUp\n");
   12f12:	       pea 1b7d5 <talk.c.490538ff+0x147>
   12f18:	       jsr 18504 <KPrintF>
   12f1e:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12f20:	       move.l sp,d0
   12f22:	       move.l d0,-(sp)
   12f24:	       move.l 16(sp),-(sp)
   12f28:	       move.l 16(sp),-(sp)
   12f2c:	       jsr 12dee <getFuncNumForCallback>
   12f32:	       lea 12(sp),sp
   12f36:	       tst.w d0
   12f38:	,----- beq.s 12f4a <builtIn_onRightMouseUp+0x3a>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   12f3a:	|      movea.l 1e180 <currentEvents>,a0
   12f40:	|      move.l (sp),d0
   12f42:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   12f46:	|      moveq #2,d0
   12f48:	|  ,-- bra.s 12f4c <builtIn_onRightMouseUp+0x3c>
	}
	return BR_ERROR;
   12f4a:	'--|-> moveq #1,d0
}
   12f4c:	   '-> addq.l #4,sp
   12f4e:	       rts

00012f50 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   12f50:	          subq.l #8,sp
   12f52:	          move.l a2,-(sp)
	KPrintF("running onFocusChange\n");
   12f54:	          pea 1b7ed <talk.c.490538ff+0x15f>
   12f5a:	          jsr 18504 <KPrintF>
   12f60:	          addq.l #4,sp
	UNUSEDALL
	int functionNum;	

	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12f62:	          move.l sp,d0
   12f64:	          addq.l #4,d0
   12f66:	          move.l d0,-(sp)
   12f68:	          move.l 24(sp),-(sp)
   12f6c:	          move.l 24(sp),-(sp)
   12f70:	          jsr 12dee <getFuncNumForCallback>
   12f76:	          lea 12(sp),sp
   12f7a:	          tst.w d0
   12f7c:	,-------- beq.s 12fda <builtIn_onFocusChange+0x8a>
	{
		struct loadedFunction *oldfunc = currentEvents -> focusFunction;
   12f7e:	|         movea.l 1e180 <currentEvents>,a0
   12f84:	|         move.l 20(a0),8(sp)
		if( functionNum != NULL) 
   12f8a:	|         move.l 4(sp),d0
   12f8e:	|  ,----- beq.s 12faa <builtIn_onFocusChange+0x5a>
			currentEvents -> focusFunction = preloadNewFunctionNum(functionNum);		
   12f90:	|  |      move.l 4(sp),d0
   12f94:	|  |      movea.l 1e180 <currentEvents>,a2
   12f9a:	|  |      move.l d0,-(sp)
   12f9c:	|  |      jsr 793e <preloadNewFunctionNum>
   12fa2:	|  |      addq.l #4,sp
   12fa4:	|  |      move.l d0,20(a2)
   12fa8:	|  |  ,-- bra.s 12fb4 <builtIn_onFocusChange+0x64>
		else
			currentEvents -> focusFunction = NULL;
   12faa:	|  '--|-> movea.l 1e180 <currentEvents>,a0
   12fb0:	|     |   clr.l 20(a0)

		if( oldfunc != NULL && oldfunc != currentEvents -> focusFunction )
   12fb4:	|     '-> tst.l 8(sp)
   12fb8:	|     ,-- beq.s 12fd6 <builtIn_onFocusChange+0x86>
   12fba:	|     |   movea.l 1e180 <currentEvents>,a0
   12fc0:	|     |   move.l 20(a0),d0
   12fc4:	|     |   cmp.l 8(sp),d0
   12fc8:	|     +-- beq.s 12fd6 <builtIn_onFocusChange+0x86>
		{
			unloadFunction(oldfunc);
   12fca:	|     |   move.l 8(sp),-(sp)
   12fce:	|     |   jsr 7d14 <unloadFunction>
   12fd4:	|     |   addq.l #4,sp
		}
		

		return BR_CONTINUE;
   12fd6:	|     '-> moveq #2,d0
   12fd8:	|     ,-- bra.s 12fdc <builtIn_onFocusChange+0x8c>
	}
	return BR_ERROR;
   12fda:	'-----|-> moveq #1,d0
}
   12fdc:	      '-> movea.l (sp)+,a2
   12fde:	          addq.l #8,sp
   12fe0:	          rts

00012fe2 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   12fe2:	       subq.l #4,sp
	KPrintF("running onMoveMouse\n");
   12fe4:	       pea 1b804 <talk.c.490538ff+0x176>
   12fea:	       jsr 18504 <KPrintF>
   12ff0:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12ff2:	       move.l sp,d0
   12ff4:	       move.l d0,-(sp)
   12ff6:	       move.l 16(sp),-(sp)
   12ffa:	       move.l 16(sp),-(sp)
   12ffe:	       jsr 12dee <getFuncNumForCallback>
   13004:	       lea 12(sp),sp
   13008:	       tst.w d0
   1300a:	,----- beq.s 1301c <builtIn_onMoveMouse+0x3a>
	{
		currentEvents -> moveMouseFunction = functionNum;
   1300c:	|      movea.l 1e180 <currentEvents>,a0
   13012:	|      move.l (sp),d0
   13014:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   13018:	|      moveq #2,d0
   1301a:	|  ,-- bra.s 1301e <builtIn_onMoveMouse+0x3c>
	}
	return BR_ERROR;
   1301c:	'--|-> moveq #1,d0
}
   1301e:	   '-> addq.l #4,sp
   13020:	       rts

00013022 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   13022:	       subq.l #4,sp
	KPrintF("running onKeyboard\n");
   13024:	       pea 1b819 <talk.c.490538ff+0x18b>
   1302a:	       jsr 18504 <KPrintF>
   13030:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   13032:	       move.l sp,d0
   13034:	       move.l d0,-(sp)
   13036:	       move.l 16(sp),-(sp)
   1303a:	       move.l 16(sp),-(sp)
   1303e:	       jsr 12dee <getFuncNumForCallback>
   13044:	       lea 12(sp),sp
   13048:	       tst.w d0
   1304a:	,----- beq.s 1305c <builtIn_onKeyboard+0x3a>
	{
		currentEvents -> spaceFunction = functionNum;
   1304c:	|      movea.l 1e180 <currentEvents>,a0
   13052:	|      move.l (sp),d0
   13054:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   13058:	|      moveq #2,d0
   1305a:	|  ,-- bra.s 1305e <builtIn_onKeyboard+0x3c>
	}
	return BR_ERROR;
   1305c:	'--|-> moveq #1,d0
}
   1305e:	   '-> addq.l #4,sp
   13060:	       rts

00013062 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   13062:	          subq.l #4,sp
	KPrintF("running spawnSub\n");
   13064:	          pea 1b82d <talk.c.490538ff+0x19f>
   1306a:	          jsr 18504 <KPrintF>
   13070:	          addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   13072:	          move.l sp,d0
   13074:	          move.l d0,-(sp)
   13076:	          move.l 16(sp),-(sp)
   1307a:	          move.l 16(sp),-(sp)
   1307e:	          jsr 12dee <getFuncNumForCallback>
   13084:	          lea 12(sp),sp
   13088:	          tst.w d0
   1308a:	,-------- beq.s 130b6 <builtIn_spawnSub+0x54>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   1308c:	|         move.l 1e7ea <noStack>,d1
   13092:	|         move.l (sp),d0
   13094:	|         pea 1 <_start+0x1>
   13098:	|         move.l d1,-(sp)
   1309a:	|         clr.l -(sp)
   1309c:	|         clr.l -(sp)
   1309e:	|         move.l d0,-(sp)
   130a0:	|         jsr 7cc8 <startNewFunctionNum>
   130a6:	|         lea 20(sp),sp
   130aa:	|         tst.l d0
   130ac:	|     ,-- bne.s 130b2 <builtIn_spawnSub+0x50>
   130ae:	|     |   moveq #1,d0
   130b0:	|  ,--|-- bra.s 130b8 <builtIn_spawnSub+0x56>
		return BR_CONTINUE;
   130b2:	|  |  '-> moveq #2,d0
   130b4:	|  +----- bra.s 130b8 <builtIn_spawnSub+0x56>
	}
	return BR_ERROR;
   130b6:	'--|----> moveq #1,d0
}
   130b8:	   '----> addq.l #4,sp
   130ba:	          rts

000130bc <builtIn_cancelSub>:

builtIn (cancelSub)
{
   130bc:	          subq.l #8,sp
	KPrintF("running cancelSub\n");
   130be:	          pea 1b83f <talk.c.490538ff+0x1b1>
   130c4:	          jsr 18504 <KPrintF>
   130ca:	          addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   130cc:	          move.l sp,d0
   130ce:	          addq.l #4,d0
   130d0:	          move.l d0,-(sp)
   130d2:	          move.l 20(sp),-(sp)
   130d6:	          move.l 20(sp),-(sp)
   130da:	          jsr 12dee <getFuncNumForCallback>
   130e0:	          lea 12(sp),sp
   130e4:	          tst.w d0
   130e6:	,-------- beq.s 1311c <builtIn_cancelSub+0x60>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   130e8:	|         move.l 4(sp),d1
   130ec:	|         move.l sp,d0
   130ee:	|         addq.l #2,d0
   130f0:	|         move.l d0,-(sp)
   130f2:	|         move.l 20(sp),-(sp)
   130f6:	|         move.l d1,-(sp)
   130f8:	|         jsr 5628 <cancelAFunction>
   130fe:	|         lea 12(sp),sp
		if (killedMyself) {
   13102:	|         move.w 2(sp),d0
   13106:	|  ,----- beq.s 13118 <builtIn_cancelSub+0x5c>
			abortFunction (fun);
   13108:	|  |      move.l 16(sp),-(sp)
   1310c:	|  |      jsr 5548 <abortFunction>
   13112:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   13114:	|  |      moveq #5,d0
   13116:	|  |  ,-- bra.s 1311e <builtIn_cancelSub+0x62>
		}
		return BR_CONTINUE;
   13118:	|  '--|-> moveq #2,d0
   1311a:	|     +-- bra.s 1311e <builtIn_cancelSub+0x62>
	}
	return BR_ERROR;
   1311c:	'-----|-> moveq #1,d0
}
   1311e:	      '-> addq.l #8,sp
   13120:	          rts

00013122 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   13122:	       subq.l #8,sp
   13124:	       move.l a6,-(sp)
	KPrintF("running stringWidth\n");
   13126:	       pea 1b852 <talk.c.490538ff+0x1c4>
   1312c:	       jsr 18504 <KPrintF>
   13132:	       addq.l #4,sp
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   13134:	       movea.l 20(sp),a0
   13138:	       move.l 24(a0),d0
   1313c:	       move.l d0,-(sp)
   1313e:	       jsr 15ffa <getTextFromAnyVar>
   13144:	       addq.l #4,sp
   13146:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   1314a:	   ,-- bne.s 13150 <builtIn_stringWidth+0x2e>
   1314c:	   |   moveq #1,d0
   1314e:	,--|-- bra.s 1319e <builtIn_stringWidth+0x7c>
	trimStack(&fun->stack);
   13150:	|  '-> moveq #24,d0
   13152:	|      add.l 20(sp),d0
   13156:	|      move.l d0,-(sp)
   13158:	|      jsr 163a8 <trimStack>
   1315e:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   13160:	|      move.l 8(sp),-(sp)
   13164:	|      jsr 16b0e <stringWidth>
   1316a:	|      addq.l #4,sp
   1316c:	|      move.l d0,d1
   1316e:	|      moveq #28,d0
   13170:	|      add.l 20(sp),d0
   13174:	|      move.l d1,-(sp)
   13176:	|      pea 1 <_start+0x1>
   1317a:	|      move.l d0,-(sp)
   1317c:	|      jsr 16316 <setVariable>
   13182:	|      lea 12(sp),sp
	FreeVec(theText);
   13186:	|      move.l 8(sp),4(sp)
   1318c:	|      move.l 1e81c <SysBase>,d0
   13192:	|      movea.l d0,a6
   13194:	|      movea.l 4(sp),a1
   13198:	|      jsr -690(a6)
	return BR_CONTINUE;
   1319c:	|      moveq #2,d0
}
   1319e:	'----> movea.l (sp)+,a6
   131a0:	       addq.l #8,sp
   131a2:	       rts

000131a4 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   131a4:	       subq.l #4,sp
	KPrintF("running hardScroll\n");
   131a6:	       pea 1b867 <talk.c.490538ff+0x1d9>
   131ac:	       jsr 18504 <KPrintF>
   131b2:	       addq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   131b4:	       movea.l 12(sp),a0
   131b8:	       move.l 24(a0),d0
   131bc:	       move.l d0,-(sp)
   131be:	       pea 1 <_start+0x1>
   131c2:	       move.l sp,d0
   131c4:	       addq.l #8,d0
   131c6:	       move.l d0,-(sp)
   131c8:	       jsr 15a24 <getValueType>
   131ce:	       lea 12(sp),sp
   131d2:	       tst.w d0
   131d4:	   ,-- bne.s 131da <builtIn_hardScroll+0x36>
   131d6:	   |   moveq #1,d0
   131d8:	,--|-- bra.s 131f8 <builtIn_hardScroll+0x54>
	trimStack (&fun -> stack);
   131da:	|  '-> moveq #24,d0
   131dc:	|      add.l 12(sp),d0
   131e0:	|      move.l d0,-(sp)
   131e2:	|      jsr 163a8 <trimStack>
   131e8:	|      addq.l #4,sp
	hardScroll (v);
   131ea:	|      move.l (sp),d0
   131ec:	|      move.l d0,-(sp)
   131ee:	|      jsr dc5e <hardScroll>
   131f4:	|      addq.l #4,sp
	return BR_CONTINUE;
   131f6:	|      moveq #2,d0
}
   131f8:	'----> addq.l #4,sp
   131fa:	       rts

000131fc <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   131fc:	       subq.l #4,sp
	KPrintF("running isScreenRegion\n");
   131fe:	       pea 1b87b <talk.c.490538ff+0x1ed>
   13204:	       jsr 18504 <KPrintF>
   1320a:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1320c:	       movea.l 12(sp),a0
   13210:	       move.l 24(a0),d0
   13214:	       move.l d0,-(sp)
   13216:	       pea 7 <_start+0x7>
   1321a:	       move.l sp,d0
   1321c:	       addq.l #8,d0
   1321e:	       move.l d0,-(sp)
   13220:	       jsr 15a24 <getValueType>
   13226:	       lea 12(sp),sp
   1322a:	       tst.w d0
   1322c:	   ,-- bne.s 13232 <builtIn_isScreenRegion+0x36>
   1322e:	   |   moveq #1,d0
   13230:	,--|-- bra.s 13272 <builtIn_isScreenRegion+0x76>
	trimStack (&fun -> stack);
   13232:	|  '-> moveq #24,d0
   13234:	|      add.l 12(sp),d0
   13238:	|      move.l d0,-(sp)
   1323a:	|      jsr 163a8 <trimStack>
   13240:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   13242:	|      move.l (sp),d0
   13244:	|      move.l d0,-(sp)
   13246:	|      jsr 16ce6 <getRegionForObject>
   1324c:	|      addq.l #4,sp
   1324e:	|      tst.l d0
   13250:	|      sne d0
   13252:	|      neg.b d0
   13254:	|      moveq #0,d1
   13256:	|      move.b d0,d1
   13258:	|      moveq #28,d0
   1325a:	|      add.l 12(sp),d0
   1325e:	|      move.l d1,-(sp)
   13260:	|      pea 1 <_start+0x1>
   13264:	|      move.l d0,-(sp)
   13266:	|      jsr 16316 <setVariable>
   1326c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13270:	|      moveq #2,d0
}
   13272:	'----> addq.l #4,sp
   13274:	       rts

00013276 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   13276:	       subq.l #4,sp
	KPrintF("running setSpeechSpeed\n");
   13278:	       pea 1b893 <talk.c.490538ff+0x205>
   1327e:	       jsr 18504 <KPrintF>
   13284:	       addq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13286:	       movea.l 12(sp),a0
   1328a:	       move.l 24(a0),d0
   1328e:	       move.l d0,-(sp)
   13290:	       pea 1 <_start+0x1>
   13294:	       move.l sp,d0
   13296:	       addq.l #8,d0
   13298:	       move.l d0,-(sp)
   1329a:	       jsr 15a24 <getValueType>
   132a0:	       lea 12(sp),sp
   132a4:	       tst.w d0
   132a6:	   ,-- bne.s 132ac <builtIn_setSpeechSpeed+0x36>
   132a8:	   |   moveq #1,d0
   132aa:	,--|-- bra.s 132fa <builtIn_setSpeechSpeed+0x84>
	trimStack (&fun -> stack);
   132ac:	|  '-> moveq #24,d0
   132ae:	|      add.l 12(sp),d0
   132b2:	|      move.l d0,-(sp)
   132b4:	|      jsr 163a8 <trimStack>
   132ba:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   132bc:	|      move.l (sp),d0
   132be:	|      move.l d0,-(sp)
   132c0:	|      jsr 18936 <__floatsisf>
   132c6:	|      addq.l #4,sp
   132c8:	|      move.l #1008981770,-(sp)
   132ce:	|      move.l d0,-(sp)
   132d0:	|      jsr 189e8 <__mulsf3>
   132d6:	|      addq.l #8,sp
   132d8:	|      move.l d0,1e17a <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   132de:	|      moveq #28,d0
   132e0:	|      add.l 12(sp),d0
   132e4:	|      pea 1 <_start+0x1>
   132e8:	|      pea 1 <_start+0x1>
   132ec:	|      move.l d0,-(sp)
   132ee:	|      jsr 16316 <setVariable>
   132f4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   132f8:	|      moveq #2,d0
}
   132fa:	'----> addq.l #4,sp
   132fc:	       rts

000132fe <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   132fe:	       subq.l #4,sp
	KPrintF("running setFontSpacing\n");
   13300:	       pea 1b8ab <talk.c.490538ff+0x21d>
   13306:	       jsr 18504 <KPrintF>
   1330c:	       addq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1330e:	       movea.l 12(sp),a0
   13312:	       move.l 24(a0),d0
   13316:	       move.l d0,-(sp)
   13318:	       pea 1 <_start+0x1>
   1331c:	       move.l sp,d0
   1331e:	       addq.l #8,d0
   13320:	       move.l d0,-(sp)
   13322:	       jsr 15a24 <getValueType>
   13328:	       lea 12(sp),sp
   1332c:	       tst.w d0
   1332e:	   ,-- bne.s 13334 <builtIn_setFontSpacing+0x36>
   13330:	   |   moveq #1,d0
   13332:	,--|-- bra.s 1336a <builtIn_setFontSpacing+0x6c>
	fontSpace = fontSpaceI;
   13334:	|  '-> move.l (sp),d0
   13336:	|      move.l d0,d0
   13338:	|      move.w d0,1e710 <fontSpace>
	trimStack (&fun -> stack);
   1333e:	|      moveq #24,d0
   13340:	|      add.l 12(sp),d0
   13344:	|      move.l d0,-(sp)
   13346:	|      jsr 163a8 <trimStack>
   1334c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1334e:	|      moveq #28,d0
   13350:	|      add.l 12(sp),d0
   13354:	|      pea 1 <_start+0x1>
   13358:	|      pea 1 <_start+0x1>
   1335c:	|      move.l d0,-(sp)
   1335e:	|      jsr 16316 <setVariable>
   13364:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13368:	|      moveq #2,d0
}
   1336a:	'----> addq.l #4,sp
   1336c:	       rts

0001336e <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   1336e:	          subq.l #4,sp
	KPrintF("running transitionLevel\n");
   13370:	          pea 1b8c3 <talk.c.490538ff+0x235>
   13376:	          jsr 18504 <KPrintF>
   1337c:	          addq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1337e:	          movea.l 12(sp),a0
   13382:	          move.l 24(a0),d0
   13386:	          move.l d0,-(sp)
   13388:	          pea 1 <_start+0x1>
   1338c:	          move.l sp,d0
   1338e:	          addq.l #8,d0
   13390:	          move.l d0,-(sp)
   13392:	          jsr 15a24 <getValueType>
   13398:	          lea 12(sp),sp
   1339c:	          tst.w d0
   1339e:	      ,-- bne.s 133a4 <builtIn_transitionLevel+0x36>
   133a0:	      |   moveq #1,d0
   133a2:	,-----|-- bra.s 133f8 <builtIn_transitionLevel+0x8a>
	trimStack (&fun -> stack);
   133a4:	|     '-> moveq #24,d0
   133a6:	|         add.l 12(sp),d0
   133aa:	|         move.l d0,-(sp)
   133ac:	|         jsr 163a8 <trimStack>
   133b2:	|         addq.l #4,sp

	if (number < 0)
   133b4:	|         move.l (sp),d0
   133b6:	|     ,-- bpl.s 133c0 <builtIn_transitionLevel+0x52>
		brightnessLevel = 0;
   133b8:	|     |   clr.b 1e17e <brightnessLevel>
   133be:	|  ,--|-- bra.s 133dc <builtIn_transitionLevel+0x6e>
	else if (number > 255)
   133c0:	|  |  '-> move.l (sp),d0
   133c2:	|  |      cmpi.l #255,d0
   133c8:	|  |  ,-- ble.s 133d2 <builtIn_transitionLevel+0x64>
		brightnessLevel = 255;
   133ca:	|  |  |   st 1e17e <brightnessLevel>
   133d0:	|  +--|-- bra.s 133dc <builtIn_transitionLevel+0x6e>
	else
		brightnessLevel = number;
   133d2:	|  |  '-> move.l (sp),d0
   133d4:	|  |      move.l d0,d0
   133d6:	|  |      move.b d0,1e17e <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   133dc:	|  '----> moveq #28,d0
   133de:	|         add.l 12(sp),d0
   133e2:	|         pea 1 <_start+0x1>
   133e6:	|         pea 1 <_start+0x1>
   133ea:	|         move.l d0,-(sp)
   133ec:	|         jsr 16316 <setVariable>
   133f2:	|         lea 12(sp),sp
	return BR_CONTINUE;
   133f6:	|         moveq #2,d0
}
   133f8:	'-------> addq.l #4,sp
   133fa:	          rts

000133fc <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	KPrintF("running captureAllKeys\n");
   133fc:	pea 1b8dc <talk.c.490538ff+0x24e>
   13402:	jsr 18504 <KPrintF>
   13408:	addq.l #4,sp
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   1340a:	movea.l 8(sp),a0
   1340e:	move.l 24(a0),d0
   13412:	move.l d0,-(sp)
   13414:	jsr 15f64 <getBoolean>
   1341a:	addq.l #4,sp
   1341c:	move.w d0,1e7ba <captureAllKeys>
	trimStack (&fun -> stack);
   13422:	moveq #24,d0
   13424:	add.l 8(sp),d0
   13428:	move.l d0,-(sp)
   1342a:	jsr 163a8 <trimStack>
   13430:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   13432:	move.w 1e7ba <captureAllKeys>,d0
   13438:	movea.w d0,a0
   1343a:	moveq #28,d0
   1343c:	add.l 8(sp),d0
   13440:	move.l a0,-(sp)
   13442:	pea 1 <_start+0x1>
   13446:	move.l d0,-(sp)
   13448:	jsr 16316 <setVariable>
   1344e:	lea 12(sp),sp
	return BR_CONTINUE;
   13452:	moveq #2,d0
}
   13454:	rts

00013456 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   13456:	       lea -12(sp),sp
	KPrintF("running spinCharacter\n");
   1345a:	       pea 1b8f4 <talk.c.490538ff+0x266>
   13460:	       jsr 18504 <KPrintF>
   13466:	       addq.l #4,sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13468:	       movea.l 20(sp),a0
   1346c:	       move.l 24(a0),d0
   13470:	       move.l d0,-(sp)
   13472:	       pea 1 <_start+0x1>
   13476:	       moveq #12,d0
   13478:	       add.l sp,d0
   1347a:	       move.l d0,-(sp)
   1347c:	       jsr 15a24 <getValueType>
   13482:	       lea 12(sp),sp
   13486:	       tst.w d0
   13488:	   ,-- bne.s 13490 <builtIn_spinCharacter+0x3a>
   1348a:	   |   moveq #1,d0
   1348c:	,--|-- bra.w 13540 <builtIn_spinCharacter+0xea>
	trimStack (&fun -> stack);
   13490:	|  '-> moveq #24,d0
   13492:	|      add.l 20(sp),d0
   13496:	|      move.l d0,-(sp)
   13498:	|      jsr 163a8 <trimStack>
   1349e:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   134a0:	|      movea.l 20(sp),a0
   134a4:	|      move.l 24(a0),d0
   134a8:	|      move.l d0,-(sp)
   134aa:	|      pea 7 <_start+0x7>
   134ae:	|      lea 8(sp),a0
   134b2:	|      move.l a0,-(sp)
   134b4:	|      jsr 15a24 <getValueType>
   134ba:	|      lea 12(sp),sp
   134be:	|      tst.w d0
   134c0:	|  ,-- bne.s 134c6 <builtIn_spinCharacter+0x70>
   134c2:	|  |   moveq #1,d0
   134c4:	+--|-- bra.s 13540 <builtIn_spinCharacter+0xea>
	trimStack (&fun -> stack);
   134c6:	|  '-> moveq #24,d0
   134c8:	|      add.l 20(sp),d0
   134cc:	|      move.l d0,-(sp)
   134ce:	|      jsr 163a8 <trimStack>
   134d4:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   134d6:	|      move.l (sp),d0
   134d8:	|      move.l d0,-(sp)
   134da:	|      jsr af9e <findPerson>
   134e0:	|      addq.l #4,sp
   134e2:	|      move.l d0,8(sp)
	if (thisPerson) {
   134e6:	|  ,-- beq.s 13526 <builtIn_spinCharacter+0xd0>
		thisPerson -> wantAngle = number;
   134e8:	|  |   move.l 4(sp),d0
   134ec:	|  |   movea.l 8(sp),a0
   134f0:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   134f4:	|  |   movea.l 8(sp),a0
   134f8:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   134fe:	|  |   movea.l 8(sp),a0
   13502:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13508:	|  |   moveq #28,d0
   1350a:	|  |   add.l 20(sp),d0
   1350e:	|  |   pea 1 <_start+0x1>
   13512:	|  |   pea 1 <_start+0x1>
   13516:	|  |   move.l d0,-(sp)
   13518:	|  |   jsr 16316 <setVariable>
   1351e:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   13522:	|  |   moveq #3,d0
   13524:	+--|-- bra.s 13540 <builtIn_spinCharacter+0xea>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13526:	|  '-> moveq #28,d0
   13528:	|      add.l 20(sp),d0
   1352c:	|      clr.l -(sp)
   1352e:	|      pea 1 <_start+0x1>
   13532:	|      move.l d0,-(sp)
   13534:	|      jsr 16316 <setVariable>
   1353a:	|      lea 12(sp),sp
		return BR_CONTINUE;
   1353e:	|      moveq #2,d0
	}
}
   13540:	'----> lea 12(sp),sp
   13544:	       rts

00013546 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   13546:	          subq.l #8,sp
	KPrintF("running getCharacterDirection\n");
   13548:	          pea 1b90b <talk.c.490538ff+0x27d>
   1354e:	          jsr 18504 <KPrintF>
   13554:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13556:	          movea.l 16(sp),a0
   1355a:	          move.l 24(a0),d0
   1355e:	          move.l d0,-(sp)
   13560:	          pea 7 <_start+0x7>
   13564:	          move.l sp,d0
   13566:	          addq.l #8,d0
   13568:	          move.l d0,-(sp)
   1356a:	          jsr 15a24 <getValueType>
   13570:	          lea 12(sp),sp
   13574:	          tst.w d0
   13576:	      ,-- bne.s 1357c <builtIn_getCharacterDirection+0x36>
   13578:	      |   moveq #1,d0
   1357a:	,-----|-- bra.s 135da <builtIn_getCharacterDirection+0x94>
	trimStack (&fun -> stack);
   1357c:	|     '-> moveq #24,d0
   1357e:	|         add.l 16(sp),d0
   13582:	|         move.l d0,-(sp)
   13584:	|         jsr 163a8 <trimStack>
   1358a:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1358c:	|         move.l (sp),d0
   1358e:	|         move.l d0,-(sp)
   13590:	|         jsr af9e <findPerson>
   13596:	|         addq.l #4,sp
   13598:	|         move.l d0,4(sp)
	if (thisPerson) {
   1359c:	|  ,----- beq.s 135c0 <builtIn_getCharacterDirection+0x7a>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   1359e:	|  |      movea.l 4(sp),a0
   135a2:	|  |      move.l 106(a0),d1
   135a6:	|  |      moveq #28,d0
   135a8:	|  |      add.l 16(sp),d0
   135ac:	|  |      move.l d1,-(sp)
   135ae:	|  |      pea 1 <_start+0x1>
   135b2:	|  |      move.l d0,-(sp)
   135b4:	|  |      jsr 16316 <setVariable>
   135ba:	|  |      lea 12(sp),sp
   135be:	|  |  ,-- bra.s 135d8 <builtIn_getCharacterDirection+0x92>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   135c0:	|  '--|-> moveq #28,d0
   135c2:	|     |   add.l 16(sp),d0
   135c6:	|     |   clr.l -(sp)
   135c8:	|     |   pea 1 <_start+0x1>
   135cc:	|     |   move.l d0,-(sp)
   135ce:	|     |   jsr 16316 <setVariable>
   135d4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   135d8:	|     '-> moveq #2,d0
}
   135da:	'-------> addq.l #8,sp
   135dc:	          rts

000135de <builtIn_isCharacter>:

builtIn(isCharacter)
{
   135de:	       subq.l #8,sp
	KPrintF("running isCharacter\n");
   135e0:	       pea 1b92a <talk.c.490538ff+0x29c>
   135e6:	       jsr 18504 <KPrintF>
   135ec:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   135ee:	       movea.l 16(sp),a0
   135f2:	       move.l 24(a0),d0
   135f6:	       move.l d0,-(sp)
   135f8:	       pea 7 <_start+0x7>
   135fc:	       move.l sp,d0
   135fe:	       addq.l #8,d0
   13600:	       move.l d0,-(sp)
   13602:	       jsr 15a24 <getValueType>
   13608:	       lea 12(sp),sp
   1360c:	       tst.w d0
   1360e:	   ,-- bne.s 13614 <builtIn_isCharacter+0x36>
   13610:	   |   moveq #1,d0
   13612:	,--|-- bra.s 13656 <builtIn_isCharacter+0x78>
	trimStack (&fun -> stack);
   13614:	|  '-> moveq #24,d0
   13616:	|      add.l 16(sp),d0
   1361a:	|      move.l d0,-(sp)
   1361c:	|      jsr 163a8 <trimStack>
   13622:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   13624:	|      move.l (sp),d0
   13626:	|      move.l d0,-(sp)
   13628:	|      jsr af9e <findPerson>
   1362e:	|      addq.l #4,sp
   13630:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   13634:	|      sne d0
   13636:	|      neg.b d0
   13638:	|      moveq #0,d1
   1363a:	|      move.b d0,d1
   1363c:	|      moveq #28,d0
   1363e:	|      add.l 16(sp),d0
   13642:	|      move.l d1,-(sp)
   13644:	|      pea 1 <_start+0x1>
   13648:	|      move.l d0,-(sp)
   1364a:	|      jsr 16316 <setVariable>
   13650:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13654:	|      moveq #2,d0
}
   13656:	'----> addq.l #8,sp
   13658:	       rts

0001365a <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   1365a:	          subq.l #8,sp
	KPrintF("running normalCharacter\n");
   1365c:	          pea 1b93f <talk.c.490538ff+0x2b1>
   13662:	          jsr 18504 <KPrintF>
   13668:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1366a:	          movea.l 16(sp),a0
   1366e:	          move.l 24(a0),d0
   13672:	          move.l d0,-(sp)
   13674:	          pea 7 <_start+0x7>
   13678:	          move.l sp,d0
   1367a:	          addq.l #8,d0
   1367c:	          move.l d0,-(sp)
   1367e:	          jsr 15a24 <getValueType>
   13684:	          lea 12(sp),sp
   13688:	          tst.w d0
   1368a:	      ,-- bne.s 13690 <builtIn_normalCharacter+0x36>
   1368c:	      |   moveq #1,d0
   1368e:	,-----|-- bra.s 1370c <builtIn_normalCharacter+0xb2>
	trimStack (&fun -> stack);
   13690:	|     '-> moveq #24,d0
   13692:	|         add.l 16(sp),d0
   13696:	|         move.l d0,-(sp)
   13698:	|         jsr 163a8 <trimStack>
   1369e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   136a0:	|         move.l (sp),d0
   136a2:	|         move.l d0,-(sp)
   136a4:	|         jsr af9e <findPerson>
   136aa:	|         addq.l #4,sp
   136ac:	|         move.l d0,4(sp)
	if (thisPerson)
   136b0:	|  ,----- beq.s 136f2 <builtIn_normalCharacter+0x98>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   136b2:	|  |      movea.l 4(sp),a0
   136b6:	|  |      movea.l 80(a0),a0
   136ba:	|  |      move.l (a0),d1
   136bc:	|  |      movea.l 4(sp),a0
   136c0:	|  |      move.l 106(a0),d0
   136c4:	|  |      add.l d0,d0
   136c6:	|  |      add.l d0,d0
   136c8:	|  |      movea.l d1,a0
   136ca:	|  |      adda.l d0,a0
   136cc:	|  |      move.l (a0),d0
   136ce:	|  |      movea.l 4(sp),a0
   136d2:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   136d6:	|  |      moveq #28,d0
   136d8:	|  |      add.l 16(sp),d0
   136dc:	|  |      pea 1 <_start+0x1>
   136e0:	|  |      pea 1 <_start+0x1>
   136e4:	|  |      move.l d0,-(sp)
   136e6:	|  |      jsr 16316 <setVariable>
   136ec:	|  |      lea 12(sp),sp
   136f0:	|  |  ,-- bra.s 1370a <builtIn_normalCharacter+0xb0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   136f2:	|  '--|-> moveq #28,d0
   136f4:	|     |   add.l 16(sp),d0
   136f8:	|     |   clr.l -(sp)
   136fa:	|     |   pea 1 <_start+0x1>
   136fe:	|     |   move.l d0,-(sp)
   13700:	|     |   jsr 16316 <setVariable>
   13706:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1370a:	|     '-> moveq #2,d0
}
   1370c:	'-------> addq.l #8,sp
   1370e:	          rts

00013710 <builtIn_isMoving>:

builtIn(isMoving)
{
   13710:	          subq.l #8,sp
	KPrintF("running isMoving\n");
   13712:	          pea 1b958 <talk.c.490538ff+0x2ca>
   13718:	          jsr 18504 <KPrintF>
   1371e:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13720:	          movea.l 16(sp),a0
   13724:	          move.l 24(a0),d0
   13728:	          move.l d0,-(sp)
   1372a:	          pea 7 <_start+0x7>
   1372e:	          move.l sp,d0
   13730:	          addq.l #8,d0
   13732:	          move.l d0,-(sp)
   13734:	          jsr 15a24 <getValueType>
   1373a:	          lea 12(sp),sp
   1373e:	          tst.w d0
   13740:	      ,-- bne.s 13746 <builtIn_isMoving+0x36>
   13742:	      |   moveq #1,d0
   13744:	,-----|-- bra.s 137a6 <builtIn_isMoving+0x96>
	trimStack (&fun -> stack);
   13746:	|     '-> moveq #24,d0
   13748:	|         add.l 16(sp),d0
   1374c:	|         move.l d0,-(sp)
   1374e:	|         jsr 163a8 <trimStack>
   13754:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   13756:	|         move.l (sp),d0
   13758:	|         move.l d0,-(sp)
   1375a:	|         jsr af9e <findPerson>
   13760:	|         addq.l #4,sp
   13762:	|         move.l d0,4(sp)
	if (thisPerson)
   13766:	|  ,----- beq.s 1378c <builtIn_isMoving+0x7c>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   13768:	|  |      movea.l 4(sp),a0
   1376c:	|  |      move.w 64(a0),d0
   13770:	|  |      movea.w d0,a0
   13772:	|  |      moveq #28,d0
   13774:	|  |      add.l 16(sp),d0
   13778:	|  |      move.l a0,-(sp)
   1377a:	|  |      pea 1 <_start+0x1>
   1377e:	|  |      move.l d0,-(sp)
   13780:	|  |      jsr 16316 <setVariable>
   13786:	|  |      lea 12(sp),sp
   1378a:	|  |  ,-- bra.s 137a4 <builtIn_isMoving+0x94>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1378c:	|  '--|-> moveq #28,d0
   1378e:	|     |   add.l 16(sp),d0
   13792:	|     |   clr.l -(sp)
   13794:	|     |   pea 1 <_start+0x1>
   13798:	|     |   move.l d0,-(sp)
   1379a:	|     |   jsr 16316 <setVariable>
   137a0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   137a4:	|     '-> moveq #2,d0
}
   137a6:	'-------> addq.l #8,sp
   137a8:	          rts

000137aa <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   137aa:	          lea -12(sp),sp
	KPrintF("running fetchEvent\n");
   137ae:	          pea 1b96a <talk.c.490538ff+0x2dc>
   137b4:	          jsr 18504 <KPrintF>
   137ba:	          addq.l #4,sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   137bc:	          movea.l 20(sp),a0
   137c0:	          move.l 24(a0),d0
   137c4:	          move.l d0,-(sp)
   137c6:	          pea 7 <_start+0x7>
   137ca:	          lea 8(sp),a0
   137ce:	          move.l a0,-(sp)
   137d0:	          jsr 15a24 <getValueType>
   137d6:	          lea 12(sp),sp
   137da:	          tst.w d0
   137dc:	      ,-- bne.s 137e4 <builtIn_fetchEvent+0x3a>
   137de:	      |   moveq #1,d0
   137e0:	,-----|-- bra.w 13878 <builtIn_fetchEvent+0xce>
	trimStack (&fun -> stack);
   137e4:	|     '-> moveq #24,d0
   137e6:	|         add.l 20(sp),d0
   137ea:	|         move.l d0,-(sp)
   137ec:	|         jsr 163a8 <trimStack>
   137f2:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   137f4:	|         movea.l 20(sp),a0
   137f8:	|         move.l 24(a0),d0
   137fc:	|         move.l d0,-(sp)
   137fe:	|         pea 7 <_start+0x7>
   13802:	|         moveq #12,d0
   13804:	|         add.l sp,d0
   13806:	|         move.l d0,-(sp)
   13808:	|         jsr 15a24 <getValueType>
   1380e:	|         lea 12(sp),sp
   13812:	|         tst.w d0
   13814:	|     ,-- bne.s 1381a <builtIn_fetchEvent+0x70>
   13816:	|     |   moveq #1,d0
   13818:	+-----|-- bra.s 13878 <builtIn_fetchEvent+0xce>
	trimStack (&fun -> stack);
   1381a:	|     '-> moveq #24,d0
   1381c:	|         add.l 20(sp),d0
   13820:	|         move.l d0,-(sp)
   13822:	|         jsr 163a8 <trimStack>
   13828:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   1382a:	|         move.l (sp),d1
   1382c:	|         move.l 4(sp),d0
   13830:	|         move.l d1,-(sp)
   13832:	|         move.l d0,-(sp)
   13834:	|         jsr df40 <getCombinationFunction>
   1383a:	|         addq.l #8,sp
   1383c:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   13840:	|  ,----- beq.s 1385e <builtIn_fetchEvent+0xb4>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   13842:	|  |      moveq #28,d0
   13844:	|  |      add.l 20(sp),d0
   13848:	|  |      move.l 8(sp),-(sp)
   1384c:	|  |      pea 2 <_start+0x2>
   13850:	|  |      move.l d0,-(sp)
   13852:	|  |      jsr 16316 <setVariable>
   13858:	|  |      lea 12(sp),sp
   1385c:	|  |  ,-- bra.s 13876 <builtIn_fetchEvent+0xcc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1385e:	|  '--|-> moveq #28,d0
   13860:	|     |   add.l 20(sp),d0
   13864:	|     |   clr.l -(sp)
   13866:	|     |   pea 1 <_start+0x1>
   1386a:	|     |   move.l d0,-(sp)
   1386c:	|     |   jsr 16316 <setVariable>
   13872:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13876:	|     '-> moveq #2,d0
}
   13878:	'-------> lea 12(sp),sp
   1387c:	          rts

0001387e <builtIn_deleteFile>:

builtIn(deleteFile)
{
   1387e:	       lea -24(sp),sp
   13882:	       move.l a6,-(sp)
	KPrintF("running deleteFile\n");
   13884:	       pea 1b97e <talk.c.490538ff+0x2f0>
   1388a:	       jsr 18504 <KPrintF>
   13890:	       addq.l #4,sp
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   13892:	       movea.l 36(sp),a0
   13896:	       move.l 24(a0),d0
   1389a:	       move.l d0,-(sp)
   1389c:	       jsr 15ffa <getTextFromAnyVar>
   138a2:	       addq.l #4,sp
   138a4:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   138a8:	       moveq #24,d0
   138aa:	       add.l 36(sp),d0
   138ae:	       move.l d0,-(sp)
   138b0:	       jsr 163a8 <trimStack>
   138b6:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   138b8:	       move.l 24(sp),-(sp)
   138bc:	       jsr 2fe <encodeFilename>
   138c2:	       addq.l #4,sp
   138c4:	       move.l d0,20(sp)
    FreeVec(namNormal);
   138c8:	       move.l 24(sp),16(sp)
   138ce:	       move.l 1e81c <SysBase>,d0
   138d4:	       movea.l d0,a6
   138d6:	       movea.l 16(sp),a1
   138da:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   138de:	       move.l 20(sp),-(sp)
   138e2:	       jsr ecf8 <failSecurityCheck>
   138e8:	       addq.l #4,sp
   138ea:	       tst.w d0
   138ec:	   ,-- beq.s 138f2 <builtIn_deleteFile+0x74>
   138ee:	   |   moveq #1,d0
   138f0:	,--|-- bra.s 13940 <builtIn_deleteFile+0xc2>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   138f2:	|  '-> move.l 20(sp),12(sp)
   138f8:	|      move.l 1e824 <DOSBase>,d0
   138fe:	|      movea.l d0,a6
   13900:	|      move.l 12(sp),d1
   13904:	|      jsr -72(a6)
   13908:	|      move.l d0,8(sp)
   1390c:	|      move.l 8(sp),d1
   13910:	|      moveq #28,d0
   13912:	|      add.l 36(sp),d0
   13916:	|      move.l d1,-(sp)
   13918:	|      pea 1 <_start+0x1>
   1391c:	|      move.l d0,-(sp)
   1391e:	|      jsr 16316 <setVariable>
   13924:	|      lea 12(sp),sp
    FreeVec(nam);
   13928:	|      move.l 20(sp),4(sp)
   1392e:	|      move.l 1e81c <SysBase>,d0
   13934:	|      movea.l d0,a6
   13936:	|      movea.l 4(sp),a1
   1393a:	|      jsr -690(a6)

    return BR_CONTINUE;
   1393e:	|      moveq #2,d0
}
   13940:	'----> movea.l (sp)+,a6
   13942:	       lea 24(sp),sp
   13946:	       rts

00013948 <builtIn_renameFile>:

builtIn(renameFile)
{
   13948:	       lea -40(sp),sp
   1394c:	       move.l a6,-(sp)
   1394e:	       move.l d2,-(sp)
	KPrintF("running renameFile\n");
   13950:	       pea 1b992 <talk.c.490538ff+0x304>
   13956:	       jsr 18504 <KPrintF>
   1395c:	       addq.l #4,sp
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   1395e:	       movea.l 56(sp),a0
   13962:	       move.l 24(a0),d0
   13966:	       move.l d0,-(sp)
   13968:	       jsr 15ffa <getTextFromAnyVar>
   1396e:	       addq.l #4,sp
   13970:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   13974:	       move.l 44(sp),-(sp)
   13978:	       jsr 2fe <encodeFilename>
   1397e:	       addq.l #4,sp
   13980:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   13984:	       moveq #24,d0
   13986:	       add.l 56(sp),d0
   1398a:	       move.l d0,-(sp)
   1398c:	       jsr 163a8 <trimStack>
   13992:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   13994:	       move.l 40(sp),-(sp)
   13998:	       jsr ecf8 <failSecurityCheck>
   1399e:	       addq.l #4,sp
   139a0:	       tst.w d0
   139a2:	   ,-- beq.s 139aa <builtIn_renameFile+0x62>
   139a4:	   |   moveq #1,d0
   139a6:	,--|-- bra.w 13a90 <builtIn_renameFile+0x148>
	FreeVec(temp);
   139aa:	|  '-> move.l 44(sp),36(sp)
   139b0:	|      move.l 1e81c <SysBase>,d0
   139b6:	|      movea.l d0,a6
   139b8:	|      movea.l 36(sp),a1
   139bc:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   139c0:	|      movea.l 56(sp),a0
   139c4:	|      move.l 24(a0),d0
   139c8:	|      move.l d0,-(sp)
   139ca:	|      jsr 15ffa <getTextFromAnyVar>
   139d0:	|      addq.l #4,sp
   139d2:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   139d6:	|      move.l 44(sp),-(sp)
   139da:	|      jsr 2fe <encodeFilename>
   139e0:	|      addq.l #4,sp
   139e2:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   139e6:	|      moveq #24,d0
   139e8:	|      add.l 56(sp),d0
   139ec:	|      move.l d0,-(sp)
   139ee:	|      jsr 163a8 <trimStack>
   139f4:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   139f6:	|      move.l 32(sp),-(sp)
   139fa:	|      jsr ecf8 <failSecurityCheck>
   13a00:	|      addq.l #4,sp
   13a02:	|      tst.w d0
   13a04:	|  ,-- beq.s 13a0c <builtIn_renameFile+0xc4>
   13a06:	|  |   moveq #1,d0
   13a08:	+--|-- bra.w 13a90 <builtIn_renameFile+0x148>
	FreeVec(temp);
   13a0c:	|  '-> move.l 44(sp),28(sp)
   13a12:	|      move.l 1e81c <SysBase>,d0
   13a18:	|      movea.l d0,a6
   13a1a:	|      movea.l 28(sp),a1
   13a1e:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   13a22:	|      move.l 32(sp),24(sp)
   13a28:	|      move.l 40(sp),20(sp)
   13a2e:	|      move.l 1e824 <DOSBase>,d0
   13a34:	|      movea.l d0,a6
   13a36:	|      move.l 24(sp),d1
   13a3a:	|      move.l 20(sp),d2
   13a3e:	|      jsr -78(a6)
   13a42:	|      move.l d0,16(sp)
   13a46:	|      move.l 16(sp),d1
   13a4a:	|      moveq #28,d0
   13a4c:	|      add.l 56(sp),d0
   13a50:	|      move.l d1,-(sp)
   13a52:	|      pea 1 <_start+0x1>
   13a56:	|      move.l d0,-(sp)
   13a58:	|      jsr 16316 <setVariable>
   13a5e:	|      lea 12(sp),sp
	FreeVec(nam);
   13a62:	|      move.l 32(sp),12(sp)
   13a68:	|      move.l 1e81c <SysBase>,d0
   13a6e:	|      movea.l d0,a6
   13a70:	|      movea.l 12(sp),a1
   13a74:	|      jsr -690(a6)
	FreeVec(newnam);
   13a78:	|      move.l 40(sp),8(sp)
   13a7e:	|      move.l 1e81c <SysBase>,d0
   13a84:	|      movea.l d0,a6
   13a86:	|      movea.l 8(sp),a1
   13a8a:	|      jsr -690(a6)

	return BR_CONTINUE;
   13a8e:	|      moveq #2,d0
}
   13a90:	'----> move.l (sp)+,d2
   13a92:	       movea.l (sp)+,a6
   13a94:	       lea 40(sp),sp
   13a98:	       rts

00013a9a <builtIn_cacheSound>:

builtIn(cacheSound)
{
   13a9a:	       subq.l #4,sp
	KPrintF("running cacheSound\n");
   13a9c:	       pea 1b9a6 <talk.c.490538ff+0x318>
   13aa2:	       jsr 18504 <KPrintF>
   13aa8:	       addq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   13aaa:	       movea.l 12(sp),a0
   13aae:	       move.l 24(a0),d0
   13ab2:	       move.l d0,-(sp)
   13ab4:	       pea 5 <_start+0x5>
   13ab8:	       move.l sp,d0
   13aba:	       addq.l #8,d0
   13abc:	       move.l d0,-(sp)
   13abe:	       jsr 15a24 <getValueType>
   13ac4:	       lea 12(sp),sp
   13ac8:	       tst.w d0
   13aca:	   ,-- bne.s 13ad0 <builtIn_cacheSound+0x36>
   13acc:	   |   moveq #1,d0
   13ace:	,--|-- bra.s 13af8 <builtIn_cacheSound+0x5e>
	trimStack (&fun -> stack);
   13ad0:	|  '-> moveq #24,d0
   13ad2:	|      add.l 12(sp),d0
   13ad6:	|      move.l d0,-(sp)
   13ad8:	|      jsr 163a8 <trimStack>
   13ade:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   13ae0:	|      move.l (sp),d0
   13ae2:	|      move.l d0,-(sp)
   13ae4:	|      jsr db36 <cacheSound>
   13aea:	|      addq.l #4,sp
   13aec:	|      moveq #-1,d1
   13aee:	|      cmp.l d0,d1
   13af0:	|  ,-- bne.s 13af6 <builtIn_cacheSound+0x5c>
   13af2:	|  |   moveq #1,d0
   13af4:	+--|-- bra.s 13af8 <builtIn_cacheSound+0x5e>
	return BR_CONTINUE;
   13af6:	|  '-> moveq #2,d0
}
   13af8:	'----> addq.l #4,sp
   13afa:	       rts

00013afc <builtIn_burnString>:

builtIn(burnString)
{
	KPrintF("running burnString\n");
   13afc:	pea 1b9ba <talk.c.490538ff+0x32c>
   13b02:	jsr 18504 <KPrintF>
   13b08:	addq.l #4,sp
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   13b0a:	pea 1b9ce <talk.c.490538ff+0x340>
   13b10:	jsr 18504 <KPrintF>
   13b16:	addq.l #4,sp
	return BR_CONTINUE;
   13b18:	moveq #2,d0
}
   13b1a:	rts

00013b1c <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   13b1c:	          lea -12(sp),sp
	KPrintF("running setCharacterSpinSpeed\n");
   13b20:	          pea 1b9f8 <talk.c.490538ff+0x36a>
   13b26:	          jsr 18504 <KPrintF>
   13b2c:	          addq.l #4,sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13b2e:	          movea.l 20(sp),a0
   13b32:	          move.l 24(a0),d0
   13b36:	          move.l d0,-(sp)
   13b38:	          pea 1 <_start+0x1>
   13b3c:	          moveq #12,d0
   13b3e:	          add.l sp,d0
   13b40:	          move.l d0,-(sp)
   13b42:	          jsr 15a24 <getValueType>
   13b48:	          lea 12(sp),sp
   13b4c:	          tst.w d0
   13b4e:	      ,-- bne.s 13b56 <builtIn_setCharacterSpinSpeed+0x3a>
   13b50:	      |   moveq #1,d0
   13b52:	,-----|-- bra.w 13bf0 <builtIn_setCharacterSpinSpeed+0xd4>
	trimStack (&fun -> stack);
   13b56:	|     '-> moveq #24,d0
   13b58:	|         add.l 20(sp),d0
   13b5c:	|         move.l d0,-(sp)
   13b5e:	|         jsr 163a8 <trimStack>
   13b64:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13b66:	|         movea.l 20(sp),a0
   13b6a:	|         move.l 24(a0),d0
   13b6e:	|         move.l d0,-(sp)
   13b70:	|         pea 7 <_start+0x7>
   13b74:	|         lea 8(sp),a0
   13b78:	|         move.l a0,-(sp)
   13b7a:	|         jsr 15a24 <getValueType>
   13b80:	|         lea 12(sp),sp
   13b84:	|         tst.w d0
   13b86:	|     ,-- bne.s 13b8c <builtIn_setCharacterSpinSpeed+0x70>
   13b88:	|     |   moveq #1,d0
   13b8a:	+-----|-- bra.s 13bf0 <builtIn_setCharacterSpinSpeed+0xd4>
	trimStack (&fun -> stack);
   13b8c:	|     '-> moveq #24,d0
   13b8e:	|         add.l 20(sp),d0
   13b92:	|         move.l d0,-(sp)
   13b94:	|         jsr 163a8 <trimStack>
   13b9a:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   13b9c:	|         move.l (sp),d0
   13b9e:	|         move.l d0,-(sp)
   13ba0:	|         jsr af9e <findPerson>
   13ba6:	|         addq.l #4,sp
   13ba8:	|         move.l d0,8(sp)

	if (thisPerson) {
   13bac:	|  ,----- beq.s 13bd6 <builtIn_setCharacterSpinSpeed+0xba>
		thisPerson -> spinSpeed = speed;
   13bae:	|  |      move.l 4(sp),d0
   13bb2:	|  |      movea.l 8(sp),a0
   13bb6:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13bba:	|  |      moveq #28,d0
   13bbc:	|  |      add.l 20(sp),d0
   13bc0:	|  |      pea 1 <_start+0x1>
   13bc4:	|  |      pea 1 <_start+0x1>
   13bc8:	|  |      move.l d0,-(sp)
   13bca:	|  |      jsr 16316 <setVariable>
   13bd0:	|  |      lea 12(sp),sp
   13bd4:	|  |  ,-- bra.s 13bee <builtIn_setCharacterSpinSpeed+0xd2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13bd6:	|  '--|-> moveq #28,d0
   13bd8:	|     |   add.l 20(sp),d0
   13bdc:	|     |   clr.l -(sp)
   13bde:	|     |   pea 1 <_start+0x1>
   13be2:	|     |   move.l d0,-(sp)
   13be4:	|     |   jsr 16316 <setVariable>
   13bea:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13bee:	|     '-> moveq #2,d0
}
   13bf0:	'-------> lea 12(sp),sp
   13bf4:	          rts

00013bf6 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   13bf6:	          lea -12(sp),sp
	KPrintF("running setCharacterAngleOffset\n");
   13bfa:	          pea 1ba17 <talk.c.490538ff+0x389>
   13c00:	          jsr 18504 <KPrintF>
   13c06:	          addq.l #4,sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13c08:	          movea.l 20(sp),a0
   13c0c:	          move.l 24(a0),d0
   13c10:	          move.l d0,-(sp)
   13c12:	          pea 1 <_start+0x1>
   13c16:	          moveq #12,d0
   13c18:	          add.l sp,d0
   13c1a:	          move.l d0,-(sp)
   13c1c:	          jsr 15a24 <getValueType>
   13c22:	          lea 12(sp),sp
   13c26:	          tst.w d0
   13c28:	      ,-- bne.s 13c30 <builtIn_setCharacterAngleOffset+0x3a>
   13c2a:	      |   moveq #1,d0
   13c2c:	,-----|-- bra.w 13cca <builtIn_setCharacterAngleOffset+0xd4>
	trimStack (&fun -> stack);
   13c30:	|     '-> moveq #24,d0
   13c32:	|         add.l 20(sp),d0
   13c36:	|         move.l d0,-(sp)
   13c38:	|         jsr 163a8 <trimStack>
   13c3e:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13c40:	|         movea.l 20(sp),a0
   13c44:	|         move.l 24(a0),d0
   13c48:	|         move.l d0,-(sp)
   13c4a:	|         pea 7 <_start+0x7>
   13c4e:	|         lea 8(sp),a0
   13c52:	|         move.l a0,-(sp)
   13c54:	|         jsr 15a24 <getValueType>
   13c5a:	|         lea 12(sp),sp
   13c5e:	|         tst.w d0
   13c60:	|     ,-- bne.s 13c66 <builtIn_setCharacterAngleOffset+0x70>
   13c62:	|     |   moveq #1,d0
   13c64:	+-----|-- bra.s 13cca <builtIn_setCharacterAngleOffset+0xd4>
	trimStack (&fun -> stack);
   13c66:	|     '-> moveq #24,d0
   13c68:	|         add.l 20(sp),d0
   13c6c:	|         move.l d0,-(sp)
   13c6e:	|         jsr 163a8 <trimStack>
   13c74:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   13c76:	|         move.l (sp),d0
   13c78:	|         move.l d0,-(sp)
   13c7a:	|         jsr af9e <findPerson>
   13c80:	|         addq.l #4,sp
   13c82:	|         move.l d0,8(sp)

	if (thisPerson) {
   13c86:	|  ,----- beq.s 13cb0 <builtIn_setCharacterAngleOffset+0xba>
		thisPerson -> angleOffset = angle;
   13c88:	|  |      move.l 4(sp),d0
   13c8c:	|  |      movea.l 8(sp),a0
   13c90:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13c94:	|  |      moveq #28,d0
   13c96:	|  |      add.l 20(sp),d0
   13c9a:	|  |      pea 1 <_start+0x1>
   13c9e:	|  |      pea 1 <_start+0x1>
   13ca2:	|  |      move.l d0,-(sp)
   13ca4:	|  |      jsr 16316 <setVariable>
   13caa:	|  |      lea 12(sp),sp
   13cae:	|  |  ,-- bra.s 13cc8 <builtIn_setCharacterAngleOffset+0xd2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13cb0:	|  '--|-> moveq #28,d0
   13cb2:	|     |   add.l 20(sp),d0
   13cb6:	|     |   clr.l -(sp)
   13cb8:	|     |   pea 1 <_start+0x1>
   13cbc:	|     |   move.l d0,-(sp)
   13cbe:	|     |   jsr 16316 <setVariable>
   13cc4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13cc8:	|     '-> moveq #2,d0
}
   13cca:	'-------> lea 12(sp),sp
   13cce:	          rts

00013cd0 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   13cd0:	       subq.l #4,sp
	KPrintF("running transitionMode\n");
   13cd2:	       pea 1ba38 <talk.c.490538ff+0x3aa>
   13cd8:	       jsr 18504 <KPrintF>
   13cde:	       addq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13ce0:	       movea.l 12(sp),a0
   13ce4:	       move.l 24(a0),d0
   13ce8:	       move.l d0,-(sp)
   13cea:	       pea 1 <_start+0x1>
   13cee:	       move.l sp,d0
   13cf0:	       addq.l #8,d0
   13cf2:	       move.l d0,-(sp)
   13cf4:	       jsr 15a24 <getValueType>
   13cfa:	       lea 12(sp),sp
   13cfe:	       tst.w d0
   13d00:	   ,-- bne.s 13d06 <builtIn_transitionMode+0x36>
   13d02:	   |   moveq #1,d0
   13d04:	,--|-- bra.s 13d3c <builtIn_transitionMode+0x6c>
	fadeMode = n;
   13d06:	|  '-> move.l (sp),d0
   13d08:	|      move.l d0,d0
   13d0a:	|      move.b d0,1e6e6 <fadeMode>
	trimStack (&fun -> stack);
   13d10:	|      moveq #24,d0
   13d12:	|      add.l 12(sp),d0
   13d16:	|      move.l d0,-(sp)
   13d18:	|      jsr 163a8 <trimStack>
   13d1e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   13d20:	|      moveq #28,d0
   13d22:	|      add.l 12(sp),d0
   13d26:	|      pea 1 <_start+0x1>
   13d2a:	|      pea 1 <_start+0x1>
   13d2e:	|      move.l d0,-(sp)
   13d30:	|      jsr 16316 <setVariable>
   13d36:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13d3a:	|      moveq #2,d0
}
   13d3c:	'----> addq.l #4,sp
   13d3e:	       rts

00013d40 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13d40:	moveq #24,d0
   13d42:	add.l 8(sp),d0
   13d46:	move.l d0,-(sp)
   13d48:	jsr 163a8 <trimStack>
   13d4e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   13d50:	moveq #28,d0
   13d52:	add.l 8(sp),d0
   13d56:	pea 1 <_start+0x1>
   13d5a:	pea 1 <_start+0x1>
   13d5e:	move.l d0,-(sp)
   13d60:	jsr 16316 <setVariable>
   13d66:	lea 12(sp),sp
	return BR_CONTINUE;
   13d6a:	moveq #2,d0
}
   13d6c:	rts

00013d6e <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   13d6e:	pea 1ba50 <talk.c.490538ff+0x3c2>
   13d74:	jsr 18504 <KPrintF>
   13d7a:	addq.l #4,sp
	return BR_CONTINUE;
   13d7c:	moveq #2,d0
}
   13d7e:	rts

00013d80 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   13d80:	       lea -16(sp),sp
   13d84:	       move.l a6,-(sp)
	KPrintF("running saveCustomData\n");
   13d86:	       pea 1ba7d <talk.c.490538ff+0x3ef>
   13d8c:	       jsr 18504 <KPrintF>
   13d92:	       addq.l #4,sp
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   13d94:	       movea.l 28(sp),a0
   13d98:	       move.l 24(a0),d0
   13d9c:	       move.l d0,-(sp)
   13d9e:	       jsr 15ffa <getTextFromAnyVar>
   13da4:	       addq.l #4,sp
   13da6:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   13daa:	   ,-- bne.s 13db2 <builtIn_saveCustomData+0x32>
   13dac:	   |   moveq #1,d0
   13dae:	,--|-- bra.w 13e64 <builtIn_saveCustomData+0xe4>

	char * fileName = encodeFilename(fileNameB);
   13db2:	|  '-> move.l 16(sp),-(sp)
   13db6:	|      jsr 2fe <encodeFilename>
   13dbc:	|      addq.l #4,sp
   13dbe:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   13dc2:	|      move.l 16(sp),8(sp)
   13dc8:	|      move.l 1e81c <SysBase>,d0
   13dce:	|      movea.l d0,a6
   13dd0:	|      movea.l 8(sp),a1
   13dd4:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   13dd8:	|      move.l 12(sp),-(sp)
   13ddc:	|      jsr ecf8 <failSecurityCheck>
   13de2:	|      addq.l #4,sp
   13de4:	|      tst.w d0
   13de6:	|  ,-- beq.s 13dec <builtIn_saveCustomData+0x6c>
   13de8:	|  |   moveq #1,d0
   13dea:	+--|-- bra.s 13e64 <builtIn_saveCustomData+0xe4>
	trimStack(&fun->stack);
   13dec:	|  '-> moveq #24,d0
   13dee:	|      add.l 28(sp),d0
   13df2:	|      move.l d0,-(sp)
   13df4:	|      jsr 163a8 <trimStack>
   13dfa:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   13dfc:	|      movea.l 28(sp),a0
   13e00:	|      movea.l 24(a0),a0
   13e04:	|      move.l (a0),d0
   13e06:	|      moveq #6,d1
   13e08:	|      cmp.l d0,d1
   13e0a:	|  ,-- beq.s 13e1e <builtIn_saveCustomData+0x9e>
		KPrintF("First parameter isn't a stack");
   13e0c:	|  |   pea 1ba95 <talk.c.490538ff+0x407>
   13e12:	|  |   jsr 18504 <KPrintF>
   13e18:	|  |   addq.l #4,sp
		return BR_ERROR;
   13e1a:	|  |   moveq #1,d0
   13e1c:	+--|-- bra.s 13e64 <builtIn_saveCustomData+0xe4>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   13e1e:	|  '-> movea.l 28(sp),a0
   13e22:	|      move.l 24(a0),d0
   13e26:	|      move.l d0,-(sp)
   13e28:	|      move.l 16(sp),-(sp)
   13e2c:	|      jsr e948 <stackToFile>
   13e32:	|      addq.l #8,sp
   13e34:	|      tst.w d0
   13e36:	|  ,-- bne.s 13e3c <builtIn_saveCustomData+0xbc>
   13e38:	|  |   moveq #1,d0
   13e3a:	+--|-- bra.s 13e64 <builtIn_saveCustomData+0xe4>
	trimStack(&fun->stack);
   13e3c:	|  '-> moveq #24,d0
   13e3e:	|      add.l 28(sp),d0
   13e42:	|      move.l d0,-(sp)
   13e44:	|      jsr 163a8 <trimStack>
   13e4a:	|      addq.l #4,sp
	FreeVec(fileName);
   13e4c:	|      move.l 12(sp),4(sp)
   13e52:	|      move.l 1e81c <SysBase>,d0
   13e58:	|      movea.l d0,a6
   13e5a:	|      movea.l 4(sp),a1
   13e5e:	|      jsr -690(a6)
	return BR_CONTINUE;
   13e62:	|      moveq #2,d0
}
   13e64:	'----> movea.l (sp)+,a6
   13e66:	       lea 16(sp),sp
   13e6a:	       rts

00013e6c <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   13e6c:	       lea -28(sp),sp
   13e70:	       move.l a6,-(sp)
	KPrintF("running loadCustomData\n");
   13e72:	       pea 1bab3 <talk.c.490538ff+0x425>
   13e78:	       jsr 18504 <KPrintF>
   13e7e:	       addq.l #4,sp
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   13e80:	       movea.l 40(sp),a0
   13e84:	       move.l 24(a0),d0
   13e88:	       move.l d0,-(sp)
   13e8a:	       jsr 15ffa <getTextFromAnyVar>
   13e90:	       addq.l #4,sp
   13e92:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   13e96:	   ,-- bne.s 13e9e <builtIn_loadCustomData+0x32>
   13e98:	   |   moveq #1,d0
   13e9a:	,--|-- bra.w 13f9a <builtIn_loadCustomData+0x12e>

	char * newText = encodeFilename(newTextA);
   13e9e:	|  '-> move.l 28(sp),-(sp)
   13ea2:	|      jsr 2fe <encodeFilename>
   13ea8:	|      addq.l #4,sp
   13eaa:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   13eae:	|      move.l 28(sp),20(sp)
   13eb4:	|      move.l 1e81c <SysBase>,d0
   13eba:	|      movea.l d0,a6
   13ebc:	|      movea.l 20(sp),a1
   13ec0:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   13ec4:	|      move.l 24(sp),-(sp)
   13ec8:	|      jsr ecf8 <failSecurityCheck>
   13ece:	|      addq.l #4,sp
   13ed0:	|      tst.w d0
   13ed2:	|  ,-- beq.s 13eda <builtIn_loadCustomData+0x6e>
   13ed4:	|  |   moveq #1,d0
   13ed6:	+--|-- bra.w 13f9a <builtIn_loadCustomData+0x12e>
	trimStack(&fun->stack);
   13eda:	|  '-> moveq #24,d0
   13edc:	|      add.l 40(sp),d0
   13ee0:	|      move.l d0,-(sp)
   13ee2:	|      jsr 163a8 <trimStack>
   13ee8:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   13eea:	|      moveq #28,d0
   13eec:	|      add.l 40(sp),d0
   13ef0:	|      move.l d0,-(sp)
   13ef2:	|      jsr 15c72 <unlinkVar>
   13ef8:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   13efa:	|      movea.l 40(sp),a0
   13efe:	|      moveq #6,d0
   13f00:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   13f04:	|      moveq #12,d0
   13f06:	|      move.l d0,16(sp)
   13f0a:	|      clr.l 12(sp)
   13f0e:	|      move.l 1e81c <SysBase>,d0
   13f14:	|      movea.l d0,a6
   13f16:	|      move.l 16(sp),d0
   13f1a:	|      move.l 12(sp),d1
   13f1e:	|      jsr -684(a6)
   13f22:	|      move.l d0,8(sp)
   13f26:	|      move.l 8(sp),d0
   13f2a:	|      movea.l 40(sp),a0
   13f2e:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   13f32:	|      movea.l 40(sp),a0
   13f36:	|      move.l 32(a0),d0
   13f3a:	|  ,-- bne.s 13f40 <builtIn_loadCustomData+0xd4>
   13f3c:	|  |   moveq #1,d0
   13f3e:	+--|-- bra.s 13f9a <builtIn_loadCustomData+0x12e>
	fun->reg.varData.theStack->first = NULL;
   13f40:	|  '-> movea.l 40(sp),a0
   13f44:	|      movea.l 32(a0),a0
   13f48:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   13f4a:	|      movea.l 40(sp),a0
   13f4e:	|      movea.l 32(a0),a0
   13f52:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   13f56:	|      movea.l 40(sp),a0
   13f5a:	|      movea.l 32(a0),a0
   13f5e:	|      moveq #1,d0
   13f60:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   13f64:	|      movea.l 40(sp),a0
   13f68:	|      move.l 32(a0),d0
   13f6c:	|      move.l d0,-(sp)
   13f6e:	|      move.l 28(sp),-(sp)
   13f72:	|      jsr e382 <fileToStack>
   13f78:	|      addq.l #8,sp
   13f7a:	|      tst.w d0
   13f7c:	|  ,-- bne.s 13f82 <builtIn_loadCustomData+0x116>
   13f7e:	|  |   moveq #1,d0
   13f80:	+--|-- bra.s 13f9a <builtIn_loadCustomData+0x12e>
	FreeVec(newText);
   13f82:	|  '-> move.l 24(sp),4(sp)
   13f88:	|      move.l 1e81c <SysBase>,d0
   13f8e:	|      movea.l d0,a6
   13f90:	|      movea.l 4(sp),a1
   13f94:	|      jsr -690(a6)
	return BR_CONTINUE;
   13f98:	|      moveq #2,d0
}
   13f9a:	'----> movea.l (sp)+,a6
   13f9c:	       lea 28(sp),sp
   13fa0:	       rts

00013fa2 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   13fa2:	       subq.l #4,sp
	KPrintF("running setCustomEncoding\n");
   13fa4:	       pea 1bacb <talk.c.490538ff+0x43d>
   13faa:	       jsr 18504 <KPrintF>
   13fb0:	       addq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13fb2:	       movea.l 12(sp),a0
   13fb6:	       move.l 24(a0),d0
   13fba:	       move.l d0,-(sp)
   13fbc:	       pea 1 <_start+0x1>
   13fc0:	       move.l sp,d0
   13fc2:	       addq.l #8,d0
   13fc4:	       move.l d0,-(sp)
   13fc6:	       jsr 15a24 <getValueType>
   13fcc:	       lea 12(sp),sp
   13fd0:	       tst.w d0
   13fd2:	   ,-- bne.s 13fd8 <builtIn_setCustomEncoding+0x36>
   13fd4:	   |   moveq #1,d0
   13fd6:	,--|-- bra.s 1400e <builtIn_setCustomEncoding+0x6c>
	saveEncoding = n;
   13fd8:	|  '-> move.l (sp),d0
   13fda:	|      move.l d0,d0
   13fdc:	|      move.w d0,1e8d4 <saveEncoding>
	trimStack (&fun -> stack);
   13fe2:	|      moveq #24,d0
   13fe4:	|      add.l 12(sp),d0
   13fe8:	|      move.l d0,-(sp)
   13fea:	|      jsr 163a8 <trimStack>
   13ff0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   13ff2:	|      moveq #28,d0
   13ff4:	|      add.l 12(sp),d0
   13ff8:	|      pea 1 <_start+0x1>
   13ffc:	|      pea 1 <_start+0x1>
   14000:	|      move.l d0,-(sp)
   14002:	|      jsr 16316 <setVariable>
   14008:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1400c:	|      moveq #2,d0
}
   1400e:	'----> addq.l #4,sp
   14010:	       rts

00014012 <builtIn_freeSound>:

builtIn(freeSound)
{
   14012:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   14014:	       movea.l 12(sp),a0
   14018:	       move.l 24(a0),d0
   1401c:	       move.l d0,-(sp)
   1401e:	       pea 5 <_start+0x5>
   14022:	       move.l sp,d0
   14024:	       addq.l #8,d0
   14026:	       move.l d0,-(sp)
   14028:	       jsr 15a24 <getValueType>
   1402e:	       lea 12(sp),sp
   14032:	       tst.w d0
   14034:	   ,-- bne.s 1403a <builtIn_freeSound+0x28>
   14036:	   |   moveq #1,d0
   14038:	,--|-- bra.s 14058 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   1403a:	|  '-> moveq #24,d0
   1403c:	|      add.l 12(sp),d0
   14040:	|      move.l d0,-(sp)
   14042:	|      jsr 163a8 <trimStack>
   14048:	|      addq.l #4,sp
	huntKillFreeSound (v);
   1404a:	|      move.l (sp),d0
   1404c:	|      move.l d0,-(sp)
   1404e:	|      jsr db3a <huntKillFreeSound>
   14054:	|      addq.l #4,sp
	return BR_CONTINUE;
   14056:	|      moveq #2,d0
}
   14058:	'----> addq.l #4,sp
   1405a:	       rts

0001405c <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   1405c:	       lea -12(sp),sp
   14060:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   14062:	       movea.l 24(sp),a0
   14066:	       move.l 24(a0),d0
   1406a:	       move.l d0,-(sp)
   1406c:	       pea 1 <_start+0x1>
   14070:	       moveq #16,d0
   14072:	       add.l sp,d0
   14074:	       move.l d0,-(sp)
   14076:	       jsr 15a24 <getValueType>
   1407c:	       lea 12(sp),sp
   14080:	       tst.w d0
   14082:	   ,-- bne.s 1408a <builtIn_parallaxAdd+0x2e>
   14084:	   |   moveq #1,d0
   14086:	,--|-- bra.w 1415e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1408a:	|  '-> moveq #24,d0
   1408c:	|      add.l 24(sp),d0
   14090:	|      move.l d0,-(sp)
   14092:	|      jsr 163a8 <trimStack>
   14098:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1409a:	|      movea.l 24(sp),a0
   1409e:	|      move.l 24(a0),d0
   140a2:	|      move.l d0,-(sp)
   140a4:	|      pea 1 <_start+0x1>
   140a8:	|      moveq #20,d0
   140aa:	|      add.l sp,d0
   140ac:	|      move.l d0,-(sp)
   140ae:	|      jsr 15a24 <getValueType>
   140b4:	|      lea 12(sp),sp
   140b8:	|      tst.w d0
   140ba:	|  ,-- bne.s 140c2 <builtIn_parallaxAdd+0x66>
   140bc:	|  |   moveq #1,d0
   140be:	+--|-- bra.w 1415e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   140c2:	|  '-> moveq #24,d0
   140c4:	|      add.l 24(sp),d0
   140c8:	|      move.l d0,-(sp)
   140ca:	|      jsr 163a8 <trimStack>
   140d0:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   140d2:	|      movea.l 24(sp),a0
   140d6:	|      move.l 24(a0),d0
   140da:	|      move.l d0,-(sp)
   140dc:	|      pea 5 <_start+0x5>
   140e0:	|      lea 12(sp),a0
   140e4:	|      move.l a0,-(sp)
   140e6:	|      jsr 15a24 <getValueType>
   140ec:	|      lea 12(sp),sp
   140f0:	|      tst.w d0
   140f2:	|  ,-- bne.s 140f8 <builtIn_parallaxAdd+0x9c>
   140f4:	|  |   moveq #1,d0
   140f6:	+--|-- bra.s 1415e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   140f8:	|  '-> moveq #24,d0
   140fa:	|      add.l 24(sp),d0
   140fe:	|      move.l d0,-(sp)
   14100:	|      jsr 163a8 <trimStack>
   14106:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   14108:	|      move.l 8(sp),d0
   1410c:	|      move.l d0,d0
   1410e:	|      moveq #0,d2
   14110:	|      move.w d0,d2
   14112:	|      move.l 12(sp),d0
   14116:	|      move.l d0,d0
   14118:	|      moveq #0,d1
   1411a:	|      move.w d0,d1
   1411c:	|      move.l 4(sp),d0
   14120:	|      move.l d0,d0
   14122:	|      move.w d0,d0
   14124:	|      andi.l #65535,d0
   1412a:	|      move.l d2,-(sp)
   1412c:	|      move.l d1,-(sp)
   1412e:	|      move.l d0,-(sp)
   14130:	|      jsr dd60 <loadParallax>
   14136:	|      lea 12(sp),sp
   1413a:	|      tst.w d0
   1413c:	|  ,-- bne.s 14142 <builtIn_parallaxAdd+0xe6>
   1413e:	|  |   moveq #1,d0
   14140:	+--|-- bra.s 1415e <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   14142:	|  '-> moveq #28,d0
   14144:	|      add.l 24(sp),d0
   14148:	|      pea 1 <_start+0x1>
   1414c:	|      pea 1 <_start+0x1>
   14150:	|      move.l d0,-(sp)
   14152:	|      jsr 16316 <setVariable>
   14158:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   1415c:	|      moveq #2,d0
}
   1415e:	'----> move.l (sp)+,d2
   14160:	       lea 12(sp),sp
   14164:	       rts

00014166 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   14166:	jsr dc98 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   1416c:	moveq #28,d0
   1416e:	add.l 8(sp),d0
   14172:	pea 1 <_start+0x1>
   14176:	pea 1 <_start+0x1>
   1417a:	move.l d0,-(sp)
   1417c:	jsr 16316 <setVariable>
   14182:	lea 12(sp),sp
	return BR_CONTINUE;
   14186:	moveq #2,d0
}
   14188:	rts

0001418a <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   1418a:	pea 1bae6 <talk.c.490538ff+0x458>
   14190:	jsr 18504 <KPrintF>
   14196:	addq.l #4,sp

	return BR_CONTINUE;
   14198:	moveq #2,d0
}
   1419a:	rts

0001419c <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   1419c:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   1419e:	             movea.l 16(sp),a0
   141a2:	             movea.l 24(a0),a0
   141a6:	             move.l (a0),d0
   141a8:	             moveq #1,d1
   141aa:	             cmp.l d0,d1
   141ac:	      ,----- beq.s 141f4 <builtIn_makeFastArray+0x58>
   141ae:	      |      moveq #6,d1
   141b0:	      |      cmp.l d0,d1
   141b2:	,-----|----- bne.s 14232 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   141b4:	|     |      movea.l 16(sp),a0
   141b8:	|     |      movea.l 24(a0),a0
   141bc:	|     |      move.l 4(a0),d1
   141c0:	|     |      moveq #28,d0
   141c2:	|     |      add.l 16(sp),d0
   141c6:	|     |      move.l d1,-(sp)
   141c8:	|     |      move.l d0,-(sp)
   141ca:	|     |      jsr 15ad6 <makeFastArrayFromStack>
   141d0:	|     |      addq.l #8,sp
   141d2:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   141d6:	|     |      moveq #24,d0
   141d8:	|     |      add.l 16(sp),d0
   141dc:	|     |      move.l d0,-(sp)
   141de:	|     |      jsr 163a8 <trimStack>
   141e4:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   141e6:	|     |      tst.w 6(sp)
   141ea:	|     |  ,-- beq.s 141f0 <builtIn_makeFastArray+0x54>
   141ec:	|     |  |   moveq #2,d0
   141ee:	|  ,--|--|-- bra.s 14244 <builtIn_makeFastArray+0xa8>
   141f0:	|  |  |  '-> moveq #1,d0
   141f2:	|  +--|----- bra.s 14244 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   141f4:	|  |  '----> movea.l 16(sp),a0
   141f8:	|  |         movea.l 24(a0),a0
   141fc:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   14202:	|  |         moveq #24,d0
   14204:	|  |         add.l 16(sp),d0
   14208:	|  |         move.l d0,-(sp)
   1420a:	|  |         jsr 163a8 <trimStack>
   14210:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   14212:	|  |         moveq #28,d0
   14214:	|  |         add.l 16(sp),d0
   14218:	|  |         move.l 2(sp),-(sp)
   1421c:	|  |         move.l d0,-(sp)
   1421e:	|  |         jsr 15b40 <makeFastArraySize>
   14224:	|  |         addq.l #8,sp
   14226:	|  |         tst.w d0
   14228:	|  |     ,-- beq.s 1422e <builtIn_makeFastArray+0x92>
   1422a:	|  |     |   moveq #2,d0
   1422c:	|  +-----|-- bra.s 14244 <builtIn_makeFastArray+0xa8>
   1422e:	|  |     '-> moveq #1,d0
   14230:	|  +-------- bra.s 14244 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   14232:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   14234:	   |         pea 1bb0f <talk.c.490538ff+0x481>
   1423a:	   |         jsr 18504 <KPrintF>
   14240:	   |         addq.l #4,sp
	return BR_ERROR;
   14242:	   |         moveq #1,d0
}
   14244:	   '-------> addq.l #8,sp
   14246:	             rts

00014248 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   14248:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1424a:	          movea.l 16(sp),a0
   1424e:	          move.l 24(a0),d0
   14252:	          move.l d0,-(sp)
   14254:	          pea 7 <_start+0x7>
   14258:	          move.l sp,d0
   1425a:	          addq.l #8,d0
   1425c:	          move.l d0,-(sp)
   1425e:	          jsr 15a24 <getValueType>
   14264:	          lea 12(sp),sp
   14268:	          tst.w d0
   1426a:	      ,-- bne.s 14270 <builtIn_getCharacterScale+0x28>
   1426c:	      |   moveq #1,d0
   1426e:	,-----|-- bra.s 142ea <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   14270:	|     '-> moveq #24,d0
   14272:	|         add.l 16(sp),d0
   14276:	|         move.l d0,-(sp)
   14278:	|         jsr 163a8 <trimStack>
   1427e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   14280:	|         move.l (sp),d0
   14282:	|         move.l d0,-(sp)
   14284:	|         jsr af9e <findPerson>
   1428a:	|         addq.l #4,sp
   1428c:	|         move.l d0,4(sp)
	if (pers) {
   14290:	|  ,----- beq.s 142d0 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   14292:	|  |      movea.l 4(sp),a0
   14296:	|  |      move.l 32(a0),d0
   1429a:	|  |      move.l #1120403456,-(sp)
   142a0:	|  |      move.l d0,-(sp)
   142a2:	|  |      jsr 189e8 <__mulsf3>
   142a8:	|  |      addq.l #8,sp
   142aa:	|  |      move.l d0,-(sp)
   142ac:	|  |      jsr 188ce <__fixsfsi>
   142b2:	|  |      addq.l #4,sp
   142b4:	|  |      move.l d0,d1
   142b6:	|  |      moveq #28,d0
   142b8:	|  |      add.l 16(sp),d0
   142bc:	|  |      move.l d1,-(sp)
   142be:	|  |      pea 1 <_start+0x1>
   142c2:	|  |      move.l d0,-(sp)
   142c4:	|  |      jsr 16316 <setVariable>
   142ca:	|  |      lea 12(sp),sp
   142ce:	|  |  ,-- bra.s 142e8 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   142d0:	|  '--|-> moveq #28,d0
   142d2:	|     |   add.l 16(sp),d0
   142d6:	|     |   clr.l -(sp)
   142d8:	|     |   pea 1 <_start+0x1>
   142dc:	|     |   move.l d0,-(sp)
   142de:	|     |   jsr 16316 <setVariable>
   142e4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   142e8:	|     '-> moveq #2,d0
}
   142ea:	'-------> addq.l #8,sp
   142ec:	          rts

000142ee <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   142ee:	move.l 1e8f8 <gameSettings>,d0
   142f4:	move.l d0,d1
   142f6:	moveq #28,d0
   142f8:	add.l 8(sp),d0
   142fc:	move.l d1,-(sp)
   142fe:	pea 1 <_start+0x1>
   14302:	move.l d0,-(sp)
   14304:	jsr 16316 <setVariable>
   1430a:	lea 12(sp),sp
	return BR_CONTINUE;
   1430e:	moveq #2,d0
}
   14310:	rts

00014312 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   14312:	moveq #24,d0
   14314:	add.l 8(sp),d0
   14318:	move.l d0,-(sp)
   1431a:	jsr 163a8 <trimStack>
   14320:	addq.l #4,sp
	trimStack (&fun -> stack);
   14322:	moveq #24,d0
   14324:	add.l 8(sp),d0
   14328:	move.l d0,-(sp)
   1432a:	jsr 163a8 <trimStack>
   14330:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   14332:	moveq #28,d0
   14334:	add.l 8(sp),d0
   14338:	clr.l -(sp)
   1433a:	pea 1 <_start+0x1>
   1433e:	move.l d0,-(sp)
   14340:	jsr 16316 <setVariable>
   14346:	lea 12(sp),sp

	return BR_CONTINUE;
   1434a:	moveq #2,d0

}
   1434c:	rts

0001434e <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   1434e:	move.l 1e188 <lastFramesPerSecond>,d1
   14354:	moveq #28,d0
   14356:	add.l 8(sp),d0
   1435a:	move.l d1,-(sp)
   1435c:	pea 1 <_start+0x1>
   14360:	move.l d0,-(sp)
   14362:	jsr 16316 <setVariable>
   14368:	lea 12(sp),sp
	return BR_CONTINUE;
   1436c:	moveq #2,d0
}
   1436e:	rts

00014370 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   14370:	moveq #2,d0
}
   14372:	rts

00014374 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   14374:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   14378:	          movea.l 60(sp),a0
   1437c:	          move.l 24(a0),d0
   14380:	          move.l d0,-(sp)
   14382:	          pea 1 <_start+0x1>
   14386:	          pea 1e722 <thumbHeight>
   1438c:	          jsr 15a24 <getValueType>
   14392:	          lea 12(sp),sp
   14396:	          tst.w d0
   14398:	      ,-- bne.s 143a0 <builtIn_setThumbnailSize+0x2c>
   1439a:	      |   moveq #1,d0
   1439c:	,-----|-- bra.w 1445c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   143a0:	|     '-> moveq #24,d0
   143a2:	|         add.l 60(sp),d0
   143a6:	|         move.l d0,-(sp)
   143a8:	|         jsr 163a8 <trimStack>
   143ae:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   143b0:	|         movea.l 60(sp),a0
   143b4:	|         move.l 24(a0),d0
   143b8:	|         move.l d0,-(sp)
   143ba:	|         pea 1 <_start+0x1>
   143be:	|         pea 1e71e <thumbWidth>
   143c4:	|         jsr 15a24 <getValueType>
   143ca:	|         lea 12(sp),sp
   143ce:	|         tst.w d0
   143d0:	|     ,-- bne.s 143d8 <builtIn_setThumbnailSize+0x64>
   143d2:	|     |   moveq #1,d0
   143d4:	+-----|-- bra.w 1445c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   143d8:	|     '-> moveq #24,d0
   143da:	|         add.l 60(sp),d0
   143de:	|         move.l d0,-(sp)
   143e0:	|         jsr 163a8 <trimStack>
   143e6:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   143e8:	|         move.l 1e71e <thumbWidth>,d0
   143ee:	|     ,-- bmi.s 1441c <builtIn_setThumbnailSize+0xa8>
   143f0:	|     |   move.l 1e722 <thumbHeight>,d0
   143f6:	|     +-- bmi.s 1441c <builtIn_setThumbnailSize+0xa8>
   143f8:	|     |   move.l 1e71e <thumbWidth>,d0
   143fe:	|     |   move.l d0,d1
   14400:	|     |   move.l 1e762 <winWidth>,d0
   14406:	|     |   cmp.l d1,d0
   14408:	|     +-- bcs.s 1441c <builtIn_setThumbnailSize+0xa8>
   1440a:	|     |   move.l 1e722 <thumbHeight>,d0
   14410:	|     |   move.l d0,d1
   14412:	|     |   move.l 1e766 <winHeight>,d0
   14418:	|     |   cmp.l d1,d0
   1441a:	|  ,--|-- bcc.s 1445a <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   1441c:	|  |  '-> move.l 1e722 <thumbHeight>,d1
   14422:	|  |      move.l 1e71e <thumbWidth>,d0
   14428:	|  |      move.l d1,-(sp)
   1442a:	|  |      move.l d0,-(sp)
   1442c:	|  |      pea 1bb36 <talk.c.490538ff+0x4a8>
   14432:	|  |      lea 14(sp),a0
   14436:	|  |      move.l a0,-(sp)
   14438:	|  |      jsr 1522e <sprintf>
   1443e:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   14442:	|  |      lea 2(sp),a0
   14446:	|  |      move.l a0,-(sp)
   14448:	|  |      pea 1bb3e <talk.c.490538ff+0x4b0>
   1444e:	|  |      jsr 18504 <KPrintF>
   14454:	|  |      addq.l #8,sp
		return BR_ERROR;
   14456:	|  |      moveq #1,d0
   14458:	+--|----- bra.s 1445c <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   1445a:	|  '----> moveq #2,d0
}
   1445c:	'-------> lea 52(sp),sp
   14460:	          rts

00014462 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   14462:	       lea -12(sp),sp
   14466:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   14468:	       movea.l 24(sp),a0
   1446c:	       move.l 24(a0),d0
   14470:	       move.l d0,-(sp)
   14472:	       pea 1 <_start+0x1>
   14476:	       lea 12(sp),a0
   1447a:	       move.l a0,-(sp)
   1447c:	       jsr 15a24 <getValueType>
   14482:	       lea 12(sp),sp
   14486:	       tst.w d0
   14488:	   ,-- bne.s 14490 <builtIn_hasFlag+0x2e>
   1448a:	   |   moveq #1,d0
   1448c:	,--|-- bra.w 14520 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   14490:	|  '-> moveq #24,d0
   14492:	|      add.l 24(sp),d0
   14496:	|      move.l d0,-(sp)
   14498:	|      jsr 163a8 <trimStack>
   1449e:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   144a0:	|      movea.l 24(sp),a0
   144a4:	|      move.l 24(a0),d0
   144a8:	|      move.l d0,-(sp)
   144aa:	|      pea 7 <_start+0x7>
   144ae:	|      moveq #16,d0
   144b0:	|      add.l sp,d0
   144b2:	|      move.l d0,-(sp)
   144b4:	|      jsr 15a24 <getValueType>
   144ba:	|      lea 12(sp),sp
   144be:	|      tst.w d0
   144c0:	|  ,-- bne.s 144c6 <builtIn_hasFlag+0x64>
   144c2:	|  |   moveq #1,d0
   144c4:	+--|-- bra.s 14520 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   144c6:	|  '-> moveq #24,d0
   144c8:	|      add.l 24(sp),d0
   144cc:	|      move.l d0,-(sp)
   144ce:	|      jsr 163a8 <trimStack>
   144d4:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   144d6:	|      move.l 8(sp),d0
   144da:	|      move.l d0,-(sp)
   144dc:	|      jsr df0c <findObjectType>
   144e2:	|      addq.l #4,sp
   144e4:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   144e8:	|  ,-- bne.s 144ee <builtIn_hasFlag+0x8c>
   144ea:	|  |   moveq #1,d0
   144ec:	+--|-- bra.s 14520 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   144ee:	|  '-> movea.l 12(sp),a0
   144f2:	|      move.w 36(a0),d0
   144f6:	|      moveq #0,d2
   144f8:	|      move.w d0,d2
   144fa:	|      move.l 4(sp),d1
   144fe:	|      moveq #1,d0
   14500:	|      lsl.l d1,d0
   14502:	|      move.l d2,d1
   14504:	|      and.l d0,d1
   14506:	|      moveq #28,d0
   14508:	|      add.l 24(sp),d0
   1450c:	|      move.l d1,-(sp)
   1450e:	|      pea 1 <_start+0x1>
   14512:	|      move.l d0,-(sp)
   14514:	|      jsr 16316 <setVariable>
   1451a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1451e:	|      moveq #2,d0
}
   14520:	'----> move.l (sp)+,d2
   14522:	       lea 12(sp),sp
   14526:	       rts

00014528 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   14528:	       jsr defa <snapshot>
   1452e:	       tst.w d0
   14530:	,----- beq.s 14536 <builtIn_snapshotGrab+0xe>
   14532:	|      moveq #2,d0
   14534:	|  ,-- bra.s 14538 <builtIn_snapshotGrab+0x10>
   14536:	'--|-> moveq #1,d0
}
   14538:	   '-> rts

0001453a <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   1453a:	jsr dda6 <nosnapshot>
	return BR_CONTINUE;
   14540:	moveq #2,d0
}
   14542:	rts

00014544 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   14544:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   14546:	move.w 1e060 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1454e:	movea.l 12(sp),a0
   14552:	move.l 24(a0),d0
   14556:	move.l d0,-(sp)
   14558:	jsr 15f64 <getBoolean>
   1455e:	addq.l #4,sp
   14560:	move.w d0,1e060 <allowAnyFilename>
	trimStack (&fun -> stack);
   14566:	moveq #24,d0
   14568:	add.l 12(sp),d0
   1456c:	move.l d0,-(sp)
   1456e:	jsr 163a8 <trimStack>
   14574:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   14576:	movea.w 2(sp),a0
   1457a:	moveq #28,d0
   1457c:	add.l 12(sp),d0
   14580:	move.l a0,-(sp)
   14582:	pea 1 <_start+0x1>
   14586:	move.l d0,-(sp)
   14588:	jsr 16316 <setVariable>
   1458e:	lea 12(sp),sp
	return BR_CONTINUE;
   14592:	moveq #2,d0
}
   14594:	addq.l #4,sp
   14596:	rts

00014598 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   14598:	moveq #24,d0
   1459a:	add.l 8(sp),d0
   1459e:	move.l d0,-(sp)
   145a0:	jsr 163a8 <trimStack>
   145a6:	addq.l #4,sp
	trimStack (&fun -> stack);
   145a8:	moveq #24,d0
   145aa:	add.l 8(sp),d0
   145ae:	move.l d0,-(sp)
   145b0:	jsr 163a8 <trimStack>
   145b6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   145b8:	moveq #28,d0
   145ba:	add.l 8(sp),d0
   145be:	clr.l -(sp)
   145c0:	pea 1 <_start+0x1>
   145c4:	move.l d0,-(sp)
   145c6:	jsr 16316 <setVariable>
   145cc:	lea 12(sp),sp

	return BR_CONTINUE;
   145d0:	moveq #2,d0
}
   145d2:	rts

000145d4 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   145d4:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   145d6:	movea.l 12(sp),a0
   145da:	move.l 24(a0),d0
   145de:	move.l d0,-(sp)
   145e0:	jsr 15ffa <getTextFromAnyVar>
   145e6:	addq.l #4,sp
   145e8:	move.l d0,(sp)
	trimStack (&fun -> stack);
   145ea:	moveq #24,d0
   145ec:	add.l 12(sp),d0
   145f0:	move.l d0,-(sp)
   145f2:	jsr 163a8 <trimStack>
   145f8:	addq.l #4,sp
	KPrintF (mess);
   145fa:	move.l (sp),-(sp)
   145fc:	jsr 18504 <KPrintF>
   14602:	addq.l #4,sp
	return BR_ERROR;
   14604:	moveq #1,d0
}
   14606:	addq.l #4,sp
   14608:	rts

0001460a <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1460a:	moveq #24,d0
   1460c:	add.l 8(sp),d0
   14610:	move.l d0,-(sp)
   14612:	jsr 163a8 <trimStack>
   14618:	addq.l #4,sp
	trimStack (&fun -> stack);
   1461a:	moveq #24,d0
   1461c:	add.l 8(sp),d0
   14620:	move.l d0,-(sp)
   14622:	jsr 163a8 <trimStack>
   14628:	addq.l #4,sp
	trimStack (&fun -> stack);
   1462a:	moveq #24,d0
   1462c:	add.l 8(sp),d0
   14630:	move.l d0,-(sp)
   14632:	jsr 163a8 <trimStack>
   14638:	addq.l #4,sp
	trimStack (&fun -> stack);
   1463a:	moveq #24,d0
   1463c:	add.l 8(sp),d0
   14640:	move.l d0,-(sp)
   14642:	jsr 163a8 <trimStack>
   14648:	addq.l #4,sp

	return BR_CONTINUE;
   1464a:	moveq #2,d0
}
   1464c:	rts

0001464e <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1464e:	moveq #24,d0
   14650:	add.l 8(sp),d0
   14654:	move.l d0,-(sp)
   14656:	jsr 163a8 <trimStack>
   1465c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1465e:	moveq #24,d0
   14660:	add.l 8(sp),d0
   14664:	move.l d0,-(sp)
   14666:	jsr 163a8 <trimStack>
   1466c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1466e:	moveq #24,d0
   14670:	add.l 8(sp),d0
   14674:	move.l d0,-(sp)
   14676:	jsr 163a8 <trimStack>
   1467c:	addq.l #4,sp

	return BR_CONTINUE;
   1467e:	moveq #2,d0

}
   14680:	rts

00014682 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   14682:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   14684:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1468a:	sne d0
   1468c:	neg.b d0
   1468e:	moveq #0,d1
   14690:	move.b d0,d1
   14692:	moveq #28,d0
   14694:	add.l 12(sp),d0
   14698:	move.l d1,-(sp)
   1469a:	pea 1 <_start+0x1>
   1469e:	move.l d0,-(sp)
   146a0:	jsr 16316 <setVariable>
   146a6:	lea 12(sp),sp
	return BR_CONTINUE;
   146aa:	moveq #2,d0
}
   146ac:	addq.l #4,sp
   146ae:	rts

000146b0 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   146b0:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   146b2:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   146b8:	pea 1bb55 <talk.c.490538ff+0x4c7>
   146be:	jsr 18504 <KPrintF>
   146c4:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   146c6:	tst.w 2(sp)
   146ca:	sne d0
   146cc:	neg.b d0
   146ce:	moveq #0,d1
   146d0:	move.b d0,d1
   146d2:	moveq #28,d0
   146d4:	add.l 12(sp),d0
   146d8:	move.l d1,-(sp)
   146da:	pea 1 <_start+0x1>
   146de:	move.l d0,-(sp)
   146e0:	jsr 16316 <setVariable>
   146e6:	lea 12(sp),sp
	return BR_CONTINUE;
   146ea:	moveq #2,d0
}
   146ec:	addq.l #4,sp
   146ee:	rts

000146f0 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   146f0:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   146f4:	             move.l 104(sp),d0
   146f8:	             cmpi.l #167,d0
   146fe:	,----------- bhi.w 147e0 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   14702:	|            move.l 104(sp),d0
   14706:	|            add.l d0,d0
   14708:	|            movea.l d0,a1
   1470a:	|            adda.l d0,a1
   1470c:	|            lea 1e1a6 <paramNum>,a0
   14712:	|            move.l (0,a1,a0.l),d0
   14716:	|            moveq #-1,d1
   14718:	|            cmp.l d0,d1
   1471a:	|  ,-------- beq.w 147a8 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   1471e:	|  |         move.l 104(sp),d0
   14722:	|  |         add.l d0,d0
   14724:	|  |         movea.l d0,a1
   14726:	|  |         adda.l d0,a1
   14728:	|  |         lea 1e1a6 <paramNum>,a0
   1472e:	|  |         move.l (0,a1,a0.l),d0
   14732:	|  |         cmp.l 108(sp),d0
   14736:	|  +-------- beq.s 147a8 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   14738:	|  |         move.l 104(sp),d0
   1473c:	|  |         add.l d0,d0
   1473e:	|  |         movea.l d0,a1
   14740:	|  |         adda.l d0,a1
   14742:	|  |         lea 1e1a6 <paramNum>,a0
   14748:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   1474c:	|  |         moveq #1,d1
   1474e:	|  |         cmp.l d0,d1
   14750:	|  |  ,----- bne.s 1475a <callBuiltIn+0x6a>
   14752:	|  |  |      move.l #105748,d0
   14758:	|  |  |  ,-- bra.s 14760 <callBuiltIn+0x70>
   1475a:	|  |  '--|-> move.l #113547,d0
   14760:	|  |     '-> move.l 104(sp),d1
   14764:	|  |         add.l d1,d1
   14766:	|  |         movea.l d1,a1
   14768:	|  |         adda.l d1,a1
   1476a:	|  |         lea 1e1a6 <paramNum>,a0
   14770:	|  |         move.l (0,a1,a0.l),d1
   14774:	|  |         move.l d0,-(sp)
   14776:	|  |         move.l d1,-(sp)
   14778:	|  |         pea 1bb8d <talk.c.490538ff+0x4ff>
   1477e:	|  |         lea 12(sp),a0
   14782:	|  |         move.l a0,-(sp)
   14784:	|  |         jsr 1522e <sprintf>
   1478a:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   1478e:	|  |         movea.l sp,a0
   14790:	|  |         move.l a0,-(sp)
   14792:	|  |         jsr b8 <copyString>
   14798:	|  |         addq.l #4,sp
   1479a:	|  |         move.l d0,-(sp)
   1479c:	|  |         jsr 18504 <KPrintF>
   147a2:	|  |         addq.l #4,sp
				return BR_ERROR;
   147a4:	|  |         moveq #1,d0
   147a6:	|  |     ,-- bra.s 147f0 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   147a8:	|  '-----|-> move.l 104(sp),d0
   147ac:	|        |   add.l d0,d0
   147ae:	|        |   movea.l d0,a1
   147b0:	|        |   adda.l d0,a1
   147b2:	|        |   lea 1e446 <builtInFunctionArray>,a0
   147b8:	|        |   move.l (0,a1,a0.l),d0
   147bc:	+--------|-- beq.s 147e0 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);			return builtInFunctionArray[whichFunc].func (numParams, fun);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   147be:	|        |   move.l 104(sp),d0
   147c2:	|        |   add.l d0,d0
   147c4:	|        |   movea.l d0,a1
   147c6:	|        |   adda.l d0,a1
   147c8:	|        |   lea 1e446 <builtInFunctionArray>,a0
   147ce:	|        |   movea.l (0,a1,a0.l),a0
   147d2:	|        |   move.l 112(sp),-(sp)
   147d6:	|        |   move.l 112(sp),-(sp)
   147da:	|        |   jsr (a0)
   147dc:	|        |   addq.l #8,sp
   147de:	|        +-- bra.s 147f0 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   147e0:	'--------|-> pea 1bbb8 <talk.c.490538ff+0x52a>
   147e6:	         |   jsr 18504 <KPrintF>
   147ec:	         |   addq.l #4,sp
	return BR_ERROR;
   147ee:	         |   moveq #1,d0
}
   147f0:	         '-> lea 100(sp),sp
   147f4:	             rts

000147f6 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   147f6:	          subq.l #8,sp
	int indexNum = -1;
   147f8:	          moveq #-1,d0
   147fa:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   147fe:	          clr.l (sp)
   14800:	   ,----- bra.s 14826 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   14802:	,--|----> move.l 1e8f0 <languageTable>,d1
   14808:	|  |      move.l (sp),d0
   1480a:	|  |      add.l d0,d0
   1480c:	|  |      add.l d0,d0
   1480e:	|  |      movea.l d1,a0
   14810:	|  |      adda.l d0,a0
   14812:	|  |      move.l (a0),d0
   14814:	|  |      move.l d0,d1
   14816:	|  |      move.l 1e8f8 <gameSettings>,d0
   1481c:	|  |      cmp.l d1,d0
   1481e:	|  |  ,-- bne.s 14824 <getLanguageForFileB+0x2e>
   14820:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   14824:	|  |  '-> addq.l #1,(sp)
   14826:	|  '----> move.l 1e8fc <gameSettings+0x4>,d0
   1482c:	|         cmp.l (sp),d0
   1482e:	'-------- bcc.s 14802 <getLanguageForFileB+0xc>
	}

	return indexNum;
   14830:	          move.l 4(sp),d0
}
   14834:	          addq.l #8,sp
   14836:	          rts

00014838 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   14838:	          lea -20(sp),sp
   1483c:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   1483e:	          move.l 28(sp),-(sp)
   14842:	          jsr 14f10 <strlen>
   14848:	          addq.l #4,sp
   1484a:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   1484e:	          moveq #4,d0
   14850:	          cmp.l 12(sp),d0
   14854:	      ,-- bge.s 14878 <getPrefsFilename+0x40>
   14856:	      |   move.l 12(sp),d0
   1485a:	      |   subq.l #4,d0
   1485c:	      |   movea.l 28(sp),a0
   14860:	      |   adda.l d0,a0
   14862:	      |   move.b (a0),d0
   14864:	      |   cmpi.b #46,d0
   14868:	      +-- bne.s 14878 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   1486a:	      |   move.l 12(sp),d0
   1486e:	      |   subq.l #4,d0
   14870:	      |   movea.l 28(sp),a0
   14874:	      |   adda.l d0,a0
   14876:	      |   clr.b (a0)
	}

	char * f = filename;
   14878:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   1487e:	          clr.l 20(sp)
   14882:	   ,----- bra.s 148aa <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   14884:	,--|----> move.l 20(sp),d0
   14888:	|  |      movea.l 28(sp),a0
   1488c:	|  |      adda.l d0,a0
   1488e:	|  |      move.b (a0),d0
   14890:	|  |      cmpi.b #47,d0
   14894:	|  |  ,-- bne.s 148a6 <getPrefsFilename+0x6e>
   14896:	|  |  |   move.l 20(sp),d0
   1489a:	|  |  |   addq.l #1,d0
   1489c:	|  |  |   move.l 28(sp),d1
   148a0:	|  |  |   add.l d0,d1
   148a2:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   148a6:	|  |  '-> addq.l #1,20(sp)
   148aa:	|  '----> move.l 20(sp),d0
   148ae:	|         cmp.l 12(sp),d0
   148b2:	'-------- blt.s 14884 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   148b4:	          pea 1bbe3 <talk.c.490538ff+0x555>
   148ba:	          move.l 20(sp),-(sp)
   148be:	          jsr 14f50 <joinStrings>
   148c4:	          addq.l #8,sp
   148c6:	          move.l d0,8(sp)

	FreeVec(filename);
   148ca:	          move.l 28(sp),4(sp)
   148d0:	          move.l 1e81c <SysBase>,d0
   148d6:	          movea.l d0,a6
   148d8:	          movea.l 4(sp),a1
   148dc:	          jsr -690(a6)
	filename = NULL;
   148e0:	          clr.l 28(sp)
	return joined;
   148e4:	          move.l 8(sp),d0
}
   148e8:	          movea.l (sp)+,a6
   148ea:	          lea 20(sp),sp
   148ee:	          rts

000148f0 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   148f0:	             lea -28(sp),sp
   148f4:	             move.l a6,-(sp)
   148f6:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   148f8:	             move.l 1e8fc <gameSettings+0x4>,d0
   148fe:	             move.l d0,d1
   14900:	             addq.l #1,d1
   14902:	             move.l d1,28(sp)
   14906:	             clr.l 24(sp)
   1490a:	             move.l 1e81c <SysBase>,d0
   14910:	             movea.l d0,a6
   14912:	             move.l 28(sp),d0
   14916:	             move.l 24(sp),d1
   1491a:	             jsr -684(a6)
   1491e:	             move.l d0,20(sp)
   14922:	             move.l 20(sp),d0
   14926:	             move.l d0,1e8f0 <languageTable>
    if( languageTable == 0) {
   1492c:	             move.l 1e8f0 <languageTable>,d0
   14932:	         ,-- bne.s 14942 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   14934:	         |   pea 1bbe8 <talk.c.490538ff+0x55a>
   1493a:	         |   jsr 18504 <KPrintF>
   14940:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   14942:	         '-> move.l 1e8fc <gameSettings+0x4>,d0
   14948:	             move.l d0,d1
   1494a:	             addq.l #1,d1
   1494c:	             move.l d1,16(sp)
   14950:	             clr.l 12(sp)
   14954:	             move.l 1e81c <SysBase>,d0
   1495a:	             movea.l d0,a6
   1495c:	             move.l 16(sp),d0
   14960:	             move.l 12(sp),d1
   14964:	             jsr -684(a6)
   14968:	             move.l d0,8(sp)
   1496c:	             move.l 8(sp),d0
   14970:	             move.l d0,1e8f4 <languageName>
	if( languageName == 0) {
   14976:	             move.l 1e8f4 <languageName>,d0
   1497c:	         ,-- bne.s 1498c <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   1497e:	         |   pea 1bc1e <talk.c.490538ff+0x590>
   14984:	         |   jsr 18504 <KPrintF>
   1498a:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1498c:	         '-> clr.l 32(sp)
   14990:	   ,-------- bra.s 14a08 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   14992:	,--|-------> tst.l 32(sp)
   14996:	|  |  ,----- beq.s 149a6 <makeLanguageTable+0xb6>
   14998:	|  |  |      move.l 40(sp),-(sp)
   1499c:	|  |  |      jsr 6bc <get2bytes>
   149a2:	|  |  |      addq.l #4,sp
   149a4:	|  |  |  ,-- bra.s 149a8 <makeLanguageTable+0xb8>
   149a6:	|  |  '--|-> moveq #0,d0
   149a8:	|  |     '-> movea.l 1e8f0 <languageTable>,a0
   149ae:	|  |         move.l 32(sp),d1
   149b2:	|  |         add.l d1,d1
   149b4:	|  |         add.l d1,d1
   149b6:	|  |         adda.l d1,a0
   149b8:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   149ba:	|  |         move.l 1e8f4 <languageName>,d1
   149c0:	|  |         move.l 32(sp),d0
   149c4:	|  |         add.l d0,d0
   149c6:	|  |         add.l d0,d0
   149c8:	|  |         movea.l d1,a0
   149ca:	|  |         adda.l d0,a0
   149cc:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   149ce:	|  |         move.l 1e7c4 <gameVersion>,d0
   149d4:	|  |         cmpi.l #511,d0
   149da:	|  |     ,-- ble.s 14a04 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   149dc:	|  |     |   move.l 1e8fc <gameSettings+0x4>,d0
   149e2:	|  |     +-- beq.s 14a04 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   149e4:	|  |     |   move.l 1e8f4 <languageName>,d1
   149ea:	|  |     |   move.l 32(sp),d0
   149ee:	|  |     |   add.l d0,d0
   149f0:	|  |     |   add.l d0,d0
   149f2:	|  |     |   movea.l d1,a2
   149f4:	|  |     |   adda.l d0,a2
   149f6:	|  |     |   move.l 40(sp),-(sp)
   149fa:	|  |     |   jsr b02 <readString>
   14a00:	|  |     |   addq.l #4,sp
   14a02:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   14a04:	|  |     '-> addq.l #1,32(sp)
   14a08:	|  '-------> move.l 1e8fc <gameSettings+0x4>,d0
   14a0e:	|            cmp.l 32(sp),d0
   14a12:	'----------- bcc.w 14992 <makeLanguageTable+0xa2>
		}
	}
}
   14a16:	             nop
   14a18:	             nop
   14a1a:	             movea.l (sp)+,a2
   14a1c:	             movea.l (sp)+,a6
   14a1e:	             lea 28(sp),sp
   14a22:	             rts

00014a24 <readIniFile>:

void readIniFile (char * filename) {
   14a24:	                      lea -564(sp),sp
   14a28:	                      move.l a6,-(sp)
   14a2a:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   14a2c:	                      move.l 576(sp),-(sp)
   14a30:	                      jsr b8 <copyString>
   14a36:	                      addq.l #4,sp
   14a38:	                      move.l d0,-(sp)
   14a3a:	                      jsr 14838 <getPrefsFilename>
   14a40:	                      addq.l #4,sp
   14a42:	                      move.l d0,562(sp)

	langName = joinStrings ("/", langName);
   14a46:	                      move.l 562(sp),-(sp)
   14a4a:	                      pea 1b1be <PutChar+0x2218>
   14a50:	                      jsr 14f50 <joinStrings>
   14a56:	                      addq.l #8,sp
   14a58:	                      move.l d0,562(sp)
	BPTR fp = Open(langName,MODE_OLDFILE);	
   14a5c:	                      move.l 562(sp),558(sp)
   14a62:	                      move.l #1005,554(sp)
   14a6a:	                      move.l 1e824 <DOSBase>,d0
   14a70:	                      movea.l d0,a6
   14a72:	                      move.l 558(sp),d1
   14a76:	                      move.l 554(sp),d2
   14a7a:	                      jsr -30(a6)
   14a7e:	                      move.l d0,550(sp)
   14a82:	                      move.l 550(sp),d0
   14a86:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   14a8a:	                      clr.l 1e8f8 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   14a90:	                      move.w #1,1e900 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   14a98:	                      clr.l 1e902 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   14a9e:	                      moveq #1,d0
   14aa0:	                      move.l d0,1e906 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   14aa6:	                      clr.w 1e90a <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   14aac:	                      clr.w 1e90c <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   14ab2:	                      clr.w 1e90e <gameSettings+0x16>

	FreeVec(langName);
   14ab8:	                      move.l 562(sp),542(sp)
   14abe:	                      move.l 1e81c <SysBase>,d0
   14ac4:	                      movea.l d0,a6
   14ac6:	                      movea.l 542(sp),a1
   14aca:	                      jsr -690(a6)
	langName = NULL;
   14ace:	                      clr.l 562(sp)

	if (fp) {
   14ad2:	                      tst.l 546(sp)
   14ad6:	,-------------------- beq.w 14db4 <readIniFile+0x390>
		char lineSoFar[257] = "";
   14ada:	|                     move.l sp,d0
   14adc:	|                     addi.l #265,d0
   14ae2:	|                     move.l #257,d1
   14ae8:	|                     move.l d1,-(sp)
   14aea:	|                     clr.l -(sp)
   14aec:	|                     move.l d0,-(sp)
   14aee:	|                     jsr 18488 <memset>
   14af4:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   14af8:	|                     move.l sp,d0
   14afa:	|                     addq.l #8,d0
   14afc:	|                     move.l #257,d1
   14b02:	|                     move.l d1,-(sp)
   14b04:	|                     clr.l -(sp)
   14b06:	|                     move.l d0,-(sp)
   14b08:	|                     jsr 18488 <memset>
   14b0e:	|                     lea 12(sp),sp
		unsigned char here = 0;
   14b12:	|                     clr.b 571(sp)
		char readChar = ' ';
   14b16:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   14b1c:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   14b22:	|                     clr.w 566(sp)
		LONG tmp = 0;
   14b26:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   14b2a:	|  ,----------------> move.l 546(sp),534(sp)
   14b30:	|  |                  move.l 1e824 <DOSBase>,d0
   14b36:	|  |                  movea.l d0,a6
   14b38:	|  |                  move.l 534(sp),d1
   14b3c:	|  |                  jsr -306(a6)
   14b40:	|  |                  move.l d0,530(sp)
   14b44:	|  |                  move.l 530(sp),d0
   14b48:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   14b4c:	|  |                  moveq #-1,d1
   14b4e:	|  |                  cmp.l 538(sp),d1
   14b52:	|  |           ,----- bne.s 14b60 <readIniFile+0x13c>
				readChar = '\n';
   14b54:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   14b5a:	|  |           |      clr.w 568(sp)
   14b5e:	|  |           |  ,-- bra.s 14b66 <readIniFile+0x142>
			} else {
				readChar = (char) tmp;
   14b60:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   14b66:	|  |              '-> move.b 570(sp),d0
   14b6a:	|  |                  ext.w d0
   14b6c:	|  |                  movea.w d0,a0
   14b6e:	|  |                  moveq #61,d0
   14b70:	|  |                  cmp.l a0,d0
   14b72:	|  |     ,----------- beq.w 14d1c <readIniFile+0x2f8>
   14b76:	|  |     |            moveq #61,d1
   14b78:	|  |     |            cmp.l a0,d1
   14b7a:	|  |  ,--|----------- blt.w 14d28 <readIniFile+0x304>
   14b7e:	|  |  |  |            moveq #10,d0
   14b80:	|  |  |  |            cmp.l a0,d0
   14b82:	|  |  |  |        ,-- beq.s 14b8c <readIniFile+0x168>
   14b84:	|  |  |  |        |   moveq #13,d1
   14b86:	|  |  |  |        |   cmp.l a0,d1
   14b88:	|  |  +--|--------|-- bne.w 14d28 <readIniFile+0x304>
				case '\n':
				case '\r':
				if (doingSecond) {
   14b8c:	|  |  |  |        '-> tst.w 566(sp)
   14b90:	|  |  |  |     ,----- beq.w 14d0a <readIniFile+0x2e6>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   14b94:	|  |  |  |     |      pea 1bc52 <talk.c.490538ff+0x5c4>
   14b9a:	|  |  |  |     |      move.l sp,d0
   14b9c:	|  |  |  |     |      addi.l #269,d0
   14ba2:	|  |  |  |     |      move.l d0,-(sp)
   14ba4:	|  |  |  |     |      jsr 14ed0 <strcmp>
   14baa:	|  |  |  |     |      addq.l #8,sp
   14bac:	|  |  |  |     |      tst.l d0
   14bae:	|  |  |  |     |  ,-- bne.s 14bc8 <readIniFile+0x1a4>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   14bb0:	|  |  |  |     |  |   move.l sp,d0
   14bb2:	|  |  |  |     |  |   addq.l #8,d0
   14bb4:	|  |  |  |     |  |   move.l d0,-(sp)
   14bb6:	|  |  |  |     |  |   jsr 14dc0 <stringToInt>
   14bbc:	|  |  |  |     |  |   addq.l #4,sp
   14bbe:	|  |  |  |     |  |   move.l d0,1e8f8 <gameSettings>
   14bc4:	|  |  |  |     +--|-- bra.w 14d0a <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   14bc8:	|  |  |  |     |  '-> pea 1bc5b <talk.c.490538ff+0x5cd>
   14bce:	|  |  |  |     |      move.l sp,d0
   14bd0:	|  |  |  |     |      addi.l #269,d0
   14bd6:	|  |  |  |     |      move.l d0,-(sp)
   14bd8:	|  |  |  |     |      jsr 14ed0 <strcmp>
   14bde:	|  |  |  |     |      addq.l #8,sp
   14be0:	|  |  |  |     |      tst.l d0
   14be2:	|  |  |  |     |  ,-- bne.s 14c08 <readIniFile+0x1e4>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   14be4:	|  |  |  |     |  |   move.l sp,d0
   14be6:	|  |  |  |     |  |   addq.l #8,d0
   14be8:	|  |  |  |     |  |   move.l d0,-(sp)
   14bea:	|  |  |  |     |  |   jsr 14dc0 <stringToInt>
   14bf0:	|  |  |  |     |  |   addq.l #4,sp
   14bf2:	|  |  |  |     |  |   tst.l d0
   14bf4:	|  |  |  |     |  |   seq d0
   14bf6:	|  |  |  |     |  |   neg.b d0
   14bf8:	|  |  |  |     |  |   move.b d0,d0
   14bfa:	|  |  |  |     |  |   andi.w #255,d0
   14bfe:	|  |  |  |     |  |   move.w d0,1e900 <gameSettings+0x8>
   14c04:	|  |  |  |     +--|-- bra.w 14d0a <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   14c08:	|  |  |  |     |  '-> pea 1bc62 <talk.c.490538ff+0x5d4>
   14c0e:	|  |  |  |     |      move.l sp,d0
   14c10:	|  |  |  |     |      addi.l #269,d0
   14c16:	|  |  |  |     |      move.l d0,-(sp)
   14c18:	|  |  |  |     |      jsr 14ed0 <strcmp>
   14c1e:	|  |  |  |     |      addq.l #8,sp
   14c20:	|  |  |  |     |      tst.l d0
   14c22:	|  |  |  |     |  ,-- bne.s 14c3c <readIniFile+0x218>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   14c24:	|  |  |  |     |  |   move.l sp,d0
   14c26:	|  |  |  |     |  |   addq.l #8,d0
   14c28:	|  |  |  |     |  |   move.l d0,-(sp)
   14c2a:	|  |  |  |     |  |   jsr 14dc0 <stringToInt>
   14c30:	|  |  |  |     |  |   addq.l #4,sp
   14c32:	|  |  |  |     |  |   move.l d0,1e902 <gameSettings+0xa>
   14c38:	|  |  |  |     +--|-- bra.w 14d0a <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   14c3c:	|  |  |  |     |  '-> pea 1bc6a <talk.c.490538ff+0x5dc>
   14c42:	|  |  |  |     |      move.l sp,d0
   14c44:	|  |  |  |     |      addi.l #269,d0
   14c4a:	|  |  |  |     |      move.l d0,-(sp)
   14c4c:	|  |  |  |     |      jsr 14ed0 <strcmp>
   14c52:	|  |  |  |     |      addq.l #8,sp
   14c54:	|  |  |  |     |      tst.l d0
   14c56:	|  |  |  |     |  ,-- bne.s 14c70 <readIniFile+0x24c>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   14c58:	|  |  |  |     |  |   move.l sp,d0
   14c5a:	|  |  |  |     |  |   addq.l #8,d0
   14c5c:	|  |  |  |     |  |   move.l d0,-(sp)
   14c5e:	|  |  |  |     |  |   jsr 14dc0 <stringToInt>
   14c64:	|  |  |  |     |  |   addq.l #4,sp
   14c66:	|  |  |  |     |  |   move.l d0,1e906 <gameSettings+0xe>
   14c6c:	|  |  |  |     +--|-- bra.w 14d0a <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   14c70:	|  |  |  |     |  '-> pea 1bc74 <talk.c.490538ff+0x5e6>
   14c76:	|  |  |  |     |      move.l sp,d0
   14c78:	|  |  |  |     |      addi.l #269,d0
   14c7e:	|  |  |  |     |      move.l d0,-(sp)
   14c80:	|  |  |  |     |      jsr 14ed0 <strcmp>
   14c86:	|  |  |  |     |      addq.l #8,sp
   14c88:	|  |  |  |     |      tst.l d0
   14c8a:	|  |  |  |     |  ,-- bne.s 14ca4 <readIniFile+0x280>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   14c8c:	|  |  |  |     |  |   move.l sp,d0
   14c8e:	|  |  |  |     |  |   addq.l #8,d0
   14c90:	|  |  |  |     |  |   move.l d0,-(sp)
   14c92:	|  |  |  |     |  |   jsr 14dc0 <stringToInt>
   14c98:	|  |  |  |     |  |   addq.l #4,sp
   14c9a:	|  |  |  |     |  |   move.l d0,d0
   14c9c:	|  |  |  |     |  |   move.w d0,1e90a <gameSettings+0x12>
   14ca2:	|  |  |  |     +--|-- bra.s 14d0a <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   14ca4:	|  |  |  |     |  '-> pea 1bc80 <talk.c.490538ff+0x5f2>
   14caa:	|  |  |  |     |      move.l sp,d0
   14cac:	|  |  |  |     |      addi.l #269,d0
   14cb2:	|  |  |  |     |      move.l d0,-(sp)
   14cb4:	|  |  |  |     |      jsr 14ed0 <strcmp>
   14cba:	|  |  |  |     |      addq.l #8,sp
   14cbc:	|  |  |  |     |      tst.l d0
   14cbe:	|  |  |  |     |  ,-- bne.s 14cd8 <readIniFile+0x2b4>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   14cc0:	|  |  |  |     |  |   move.l sp,d0
   14cc2:	|  |  |  |     |  |   addq.l #8,d0
   14cc4:	|  |  |  |     |  |   move.l d0,-(sp)
   14cc6:	|  |  |  |     |  |   jsr 14dc0 <stringToInt>
   14ccc:	|  |  |  |     |  |   addq.l #4,sp
   14cce:	|  |  |  |     |  |   move.l d0,d0
   14cd0:	|  |  |  |     |  |   move.w d0,1e90c <gameSettings+0x14>
   14cd6:	|  |  |  |     +--|-- bra.s 14d0a <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   14cd8:	|  |  |  |     |  '-> pea 1bc8e <talk.c.490538ff+0x600>
   14cde:	|  |  |  |     |      move.l sp,d0
   14ce0:	|  |  |  |     |      addi.l #269,d0
   14ce6:	|  |  |  |     |      move.l d0,-(sp)
   14ce8:	|  |  |  |     |      jsr 14ed0 <strcmp>
   14cee:	|  |  |  |     |      addq.l #8,sp
   14cf0:	|  |  |  |     |      tst.l d0
   14cf2:	|  |  |  |     +----- bne.s 14d0a <readIniFile+0x2e6>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   14cf4:	|  |  |  |     |      move.l sp,d0
   14cf6:	|  |  |  |     |      addq.l #8,d0
   14cf8:	|  |  |  |     |      move.l d0,-(sp)
   14cfa:	|  |  |  |     |      jsr 14dc0 <stringToInt>
   14d00:	|  |  |  |     |      addq.l #4,sp
   14d02:	|  |  |  |     |      move.l d0,d0
   14d04:	|  |  |  |     |      move.w d0,1e90e <gameSettings+0x16>
					}
				}
				here = 0;
   14d0a:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   14d0e:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   14d12:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   14d16:	|  |  |  |            clr.b 8(sp)
				break;
   14d1a:	|  |  |  |  ,-------- bra.s 14d92 <readIniFile+0x36e>

				case '=':
				doingSecond = TRUE;
   14d1c:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   14d22:	|  |  |     |         clr.b 571(sp)
				break;
   14d26:	|  |  |     +-------- bra.s 14d92 <readIniFile+0x36e>

				default:
				if (doingSecond) {
   14d28:	|  |  '-----|-------> tst.w 566(sp)
   14d2c:	|  |        |  ,----- beq.s 14d60 <readIniFile+0x33c>
					secondSoFar[here ++] = readChar;
   14d2e:	|  |        |  |      move.b 571(sp),d0
   14d32:	|  |        |  |      move.b d0,d1
   14d34:	|  |        |  |      addq.b #1,d1
   14d36:	|  |        |  |      move.b d1,571(sp)
   14d3a:	|  |        |  |      move.b d0,d0
   14d3c:	|  |        |  |      andi.l #255,d0
   14d42:	|  |        |  |      lea 572(sp),a0
   14d46:	|  |        |  |      adda.l d0,a0
   14d48:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   14d4e:	|  |        |  |      moveq #0,d0
   14d50:	|  |        |  |      move.b 571(sp),d0
   14d54:	|  |        |  |      lea 572(sp),a0
   14d58:	|  |        |  |      adda.l d0,a0
   14d5a:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   14d5e:	|  |        |  |  ,-- bra.s 14d90 <readIniFile+0x36c>
					lineSoFar[here ++] = readChar;
   14d60:	|  |        |  '--|-> move.b 571(sp),d0
   14d64:	|  |        |     |   move.b d0,d1
   14d66:	|  |        |     |   addq.b #1,d1
   14d68:	|  |        |     |   move.b d1,571(sp)
   14d6c:	|  |        |     |   move.b d0,d0
   14d6e:	|  |        |     |   andi.l #255,d0
   14d74:	|  |        |     |   lea 572(sp),a0
   14d78:	|  |        |     |   adda.l d0,a0
   14d7a:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   14d80:	|  |        |     |   moveq #0,d0
   14d82:	|  |        |     |   move.b 571(sp),d0
   14d86:	|  |        |     |   lea 572(sp),a0
   14d8a:	|  |        |     |   adda.l d0,a0
   14d8c:	|  |        |     |   clr.b -307(a0)
				break;
   14d90:	|  |        |     '-> nop
			}
		} while (keepGoing);
   14d92:	|  |        '-------> tst.w 568(sp)
   14d96:	|  '----------------- bne.w 14b2a <readIniFile+0x106>

		Close(fp);
   14d9a:	|                     move.l 546(sp),526(sp)
   14da0:	|                     move.l 1e824 <DOSBase>,d0
   14da6:	|                     movea.l d0,a6
   14da8:	|                     move.l 526(sp),d1
   14dac:	|                     jsr -36(a6)
   14db0:	|                     move.l d0,522(sp)
	}
}
   14db4:	'-------------------> nop
   14db6:	                      move.l (sp)+,d2
   14db8:	                      movea.l (sp)+,a6
   14dba:	                      lea 564(sp),sp
   14dbe:	                      rts

00014dc0 <stringToInt>:

unsigned int stringToInt (char * s) {
   14dc0:	             subq.l #8,sp
	int i = 0;
   14dc2:	             clr.l 4(sp)
	BOOL negative = FALSE;
   14dc6:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   14dca:	,----------> movea.l 12(sp),a0
   14dce:	|            move.b (a0),d0
   14dd0:	|            cmpi.b #47,d0
   14dd4:	|        ,-- ble.s 14e0c <stringToInt+0x4c>
   14dd6:	|        |   movea.l 12(sp),a0
   14dda:	|        |   move.b (a0),d0
   14ddc:	|        |   cmpi.b #57,d0
   14de0:	|        +-- bgt.s 14e0c <stringToInt+0x4c>
			i *= 10;
   14de2:	|        |   move.l 4(sp),d1
   14de6:	|        |   move.l d1,d0
   14de8:	|        |   add.l d0,d0
   14dea:	|        |   add.l d0,d0
   14dec:	|        |   add.l d1,d0
   14dee:	|        |   add.l d0,d0
   14df0:	|        |   move.l d0,4(sp)
			i += *s - '0';
   14df4:	|        |   movea.l 12(sp),a0
   14df8:	|        |   move.b (a0),d0
   14dfa:	|        |   ext.w d0
   14dfc:	|        |   movea.w d0,a0
   14dfe:	|        |   moveq #-48,d0
   14e00:	|        |   add.l a0,d0
   14e02:	|        |   add.l d0,4(sp)
			s ++;
   14e06:	|        |   addq.l #1,12(sp)
   14e0a:	|  ,-----|-- bra.s 14e44 <stringToInt+0x84>
		} else if (*s == '-') {
   14e0c:	|  |     '-> movea.l 12(sp),a0
   14e10:	|  |         move.b (a0),d0
   14e12:	|  |         cmpi.b #45,d0
   14e16:	|  |     ,-- bne.s 14e30 <stringToInt+0x70>
			negative = ! negative;
   14e18:	|  |     |   tst.w 2(sp)
   14e1c:	|  |     |   seq d0
   14e1e:	|  |     |   neg.b d0
   14e20:	|  |     |   move.b d0,d0
   14e22:	|  |     |   andi.w #255,d0
   14e26:	|  |     |   move.w d0,2(sp)
			s++;
   14e2a:	|  |     |   addq.l #1,12(sp)
   14e2e:	+--|-----|-- bra.s 14dca <stringToInt+0xa>
		} else {
			if (negative)
   14e30:	|  |     '-> tst.w 2(sp)
   14e34:	|  |     ,-- beq.s 14e3e <stringToInt+0x7e>
				return -i;
   14e36:	|  |     |   move.l 4(sp),d0
   14e3a:	|  |     |   neg.l d0
   14e3c:	|  |  ,--|-- bra.s 14e46 <stringToInt+0x86>
			return i;
   14e3e:	|  |  |  '-> move.l 4(sp),d0
   14e42:	|  |  +----- bra.s 14e46 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   14e44:	'--'--|----X bra.s 14dca <stringToInt+0xa>
		}
	}
   14e46:	      '----> addq.l #8,sp
   14e48:	             rts

00014e4a <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   14e4a:	    lea -28(sp),sp
   14e4e:	    move.l a6,-(sp)
   14e50:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   14e52:	    pea 1bc98 <talk.c.490538ff+0x60a>
   14e58:	    jsr 18504 <KPrintF>
   14e5e:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   14e60:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   14e64:	    move.l 40(sp),30(sp)
   14e6a:	    move.l #1005,26(sp)
   14e72:	    move.l 1e824 <DOSBase>,d0
   14e78:	    movea.l d0,a6
   14e7a:	    move.l 30(sp),d1
   14e7e:	    move.l 26(sp),d2
   14e82:	    jsr -30(a6)
   14e86:	    move.l d0,22(sp)
   14e8a:	    move.l 22(sp),d0
   14e8e:	    move.l d0,18(sp)
	if (tester) {
   14e92:	,-- beq.s 14ec2 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   14e94:	|   pea 1bcb2 <talk.c.490538ff+0x624>
   14e9a:	|   jsr 18504 <KPrintF>
   14ea0:	|   addq.l #4,sp
		retval = 1;
   14ea2:	|   move.b #1,35(sp)
		Close(tester);
   14ea8:	|   move.l 18(sp),14(sp)
   14eae:	|   move.l 1e824 <DOSBase>,d0
   14eb4:	|   movea.l d0,a6
   14eb6:	|   move.l 14(sp),d1
   14eba:	|   jsr -36(a6)
   14ebe:	|   move.l d0,10(sp)
	}
	return retval;
   14ec2:	'-> move.b 35(sp),d0
   14ec6:	    move.l (sp)+,d2
   14ec8:	    movea.l (sp)+,a6
   14eca:	    lea 28(sp),sp
   14ece:	    rts

00014ed0 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   14ed0:	   ,-- bra.s 14eda <strcmp+0xa>
    {
        s1++;
   14ed2:	,--|-> addq.l #1,4(sp)
        s2++;
   14ed6:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   14eda:	|  '-> movea.l 4(sp),a0
   14ede:	|      move.b (a0),d0
   14ee0:	|  ,-- beq.s 14ef2 <strcmp+0x22>
   14ee2:	|  |   movea.l 4(sp),a0
   14ee6:	|  |   move.b (a0),d1
   14ee8:	|  |   movea.l 8(sp),a0
   14eec:	|  |   move.b (a0),d0
   14eee:	|  |   cmp.b d1,d0
   14ef0:	'--|-- beq.s 14ed2 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   14ef2:	   '-> movea.l 4(sp),a0
   14ef6:	       move.b (a0),d0
   14ef8:	       moveq #0,d1
   14efa:	       move.b d0,d1
   14efc:	       movea.l 8(sp),a0
   14f00:	       move.b (a0),d0
   14f02:	       move.b d0,d0
   14f04:	       andi.l #255,d0
   14f0a:	       sub.l d0,d1
   14f0c:	       move.l d1,d0
}
   14f0e:	       rts

00014f10 <strlen>:

long unsigned int strlen (const char *s) 
{  
   14f10:	       subq.l #4,sp
	long unsigned int i = 0;
   14f12:	       clr.l (sp)
	while(s[i]) i++; 
   14f14:	   ,-- bra.s 14f18 <strlen+0x8>
   14f16:	,--|-> addq.l #1,(sp)
   14f18:	|  '-> movea.l 8(sp),a0
   14f1c:	|      adda.l (sp),a0
   14f1e:	|      move.b (a0),d0
   14f20:	'----- bne.s 14f16 <strlen+0x6>
	return(i);
   14f22:	       move.l (sp),d0
}
   14f24:	       addq.l #4,sp
   14f26:	       rts

00014f28 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   14f28:	    nop
   14f2a:	,-> move.l 8(sp),d0
   14f2e:	|   move.l d0,d1
   14f30:	|   addq.l #1,d1
   14f32:	|   move.l d1,8(sp)
   14f36:	|   movea.l 4(sp),a0
   14f3a:	|   lea 1(a0),a1
   14f3e:	|   move.l a1,4(sp)
   14f42:	|   movea.l d0,a1
   14f44:	|   move.b (a1),d0
   14f46:	|   move.b d0,(a0)
   14f48:	|   move.b (a0),d0
   14f4a:	'-- bne.s 14f2a <strcpy+0x2>
}
   14f4c:	    nop
   14f4e:	    rts

00014f50 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   14f50:	    lea -20(sp),sp
   14f54:	    move.l a6,-(sp)
   14f56:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   14f58:	    move.l 32(sp),-(sp)
   14f5c:	    jsr 14f10 <strlen>
   14f62:	    addq.l #4,sp
   14f64:	    move.l d0,d2
   14f66:	    move.l 36(sp),-(sp)
   14f6a:	    jsr 14f10 <strlen>
   14f70:	    addq.l #4,sp
   14f72:	    add.l d2,d0
   14f74:	    move.l d0,d1
   14f76:	    addq.l #1,d1
   14f78:	    move.l d1,20(sp)
   14f7c:	    clr.l 16(sp)
   14f80:	    move.l 1e81c <SysBase>,d0
   14f86:	    movea.l d0,a6
   14f88:	    move.l 20(sp),d0
   14f8c:	    move.l 16(sp),d1
   14f90:	    jsr -684(a6)
   14f94:	    move.l d0,12(sp)
   14f98:	    move.l 12(sp),d0
   14f9c:	    move.l d0,8(sp)
	char * t = newString;
   14fa0:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   14fa6:	    nop
   14fa8:	,-> move.l 32(sp),d0
   14fac:	|   move.l d0,d1
   14fae:	|   addq.l #1,d1
   14fb0:	|   move.l d1,32(sp)
   14fb4:	|   movea.l 24(sp),a0
   14fb8:	|   lea 1(a0),a1
   14fbc:	|   move.l a1,24(sp)
   14fc0:	|   movea.l d0,a1
   14fc2:	|   move.b (a1),d0
   14fc4:	|   move.b d0,(a0)
   14fc6:	|   move.b (a0),d0
   14fc8:	'-- bne.s 14fa8 <joinStrings+0x58>
	t--;
   14fca:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   14fce:	    nop
   14fd0:	,-> move.l 36(sp),d0
   14fd4:	|   move.l d0,d1
   14fd6:	|   addq.l #1,d1
   14fd8:	|   move.l d1,36(sp)
   14fdc:	|   movea.l 24(sp),a0
   14fe0:	|   lea 1(a0),a1
   14fe4:	|   move.l a1,24(sp)
   14fe8:	|   movea.l d0,a1
   14fea:	|   move.b (a1),d0
   14fec:	|   move.b d0,(a0)
   14fee:	|   move.b (a0),d0
   14ff0:	'-- bne.s 14fd0 <joinStrings+0x80>

	return newString;
   14ff2:	    move.l 8(sp),d0
}
   14ff6:	    move.l (sp)+,d2
   14ff8:	    movea.l (sp)+,a6
   14ffa:	    lea 20(sp),sp
   14ffe:	    rts

00015000 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   15000:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   15004:	       moveq #10,d0
   15006:	       cmp.l 28(sp),d0
   1500a:	   ,-- bne.s 15028 <itoa+0x28>
   1500c:	   |   tst.l 20(sp)
   15010:	   +-- bge.s 15028 <itoa+0x28>
        *str++ = '-';
   15012:	   |   move.l 24(sp),d0
   15016:	   |   move.l d0,d1
   15018:	   |   addq.l #1,d1
   1501a:	   |   move.l d1,24(sp)
   1501e:	   |   movea.l d0,a0
   15020:	   |   move.b #45,(a0)
        value *= -1;
   15024:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   15028:	   '-> move.l 24(sp),12(sp)
   1502e:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   15034:	   ,-> move.l 20(sp),d0
   15038:	   |   move.l 28(sp),-(sp)
   1503c:	   |   move.l d0,-(sp)
   1503e:	   |   jsr 18f3c <__modsi3>
   15044:	   |   addq.l #8,sp
   15046:	   |   movea.l d0,a1
   15048:	   |   move.l 12(sp),d0
   1504c:	   |   move.l d0,d1
   1504e:	   |   addq.l #1,d1
   15050:	   |   move.l d1,12(sp)
   15054:	   |   lea 1bcca <talk.c.490538ff+0x63c>,a0
   1505a:	   |   move.b (0,a1,a0.l),d1
   1505e:	   |   movea.l d0,a0
   15060:	   |   move.b d1,(a0)
        value /= base;
   15062:	   |   move.l 28(sp),-(sp)
   15066:	   |   move.l 24(sp),-(sp)
   1506a:	   |   jsr 18f0e <__divsi3>
   15070:	   |   addq.l #8,sp
   15072:	   |   move.l d0,20(sp)
    } while (value);
   15076:	   '-- bne.s 15034 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   15078:	       move.l 12(sp),d0
   1507c:	       move.l d0,d1
   1507e:	       subq.l #1,d1
   15080:	       move.l d1,12(sp)
   15084:	       movea.l d0,a0
   15086:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   15088:	       move.l 4(sp),8(sp)
   1508e:	   ,-- bra.s 150b4 <itoa+0xb4>
        char temp = *low;
   15090:	,--|-> movea.l 8(sp),a0
   15094:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   15098:	|  |   movea.l 12(sp),a0
   1509c:	|  |   move.b (a0),d0
   1509e:	|  |   movea.l 8(sp),a0
   150a2:	|  |   move.b d0,(a0)
        *ptr = temp;
   150a4:	|  |   movea.l 12(sp),a0
   150a8:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   150ac:	|  |   addq.l #1,8(sp)
   150b0:	|  |   subq.l #1,12(sp)
   150b4:	|  '-> move.l 8(sp),d0
   150b8:	|      cmp.l 12(sp),d0
   150bc:	'----- bcs.s 15090 <itoa+0x90>
    }
    return rc;
   150be:	       move.l 4(sp),d0
}
   150c2:	       lea 16(sp),sp
   150c6:	       rts

000150c8 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   150c8:	                            lea -40(sp),sp
   150cc:	                            move.l d2,-(sp)
    char* s = str;
   150ce:	                            move.l 48(sp),40(sp)
    const char* p = format;
   150d4:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   150da:	   ,----------------------- bra.w 1520e <vsprintf2+0x146>
        if (*p == '%') {
   150de:	,--|----------------------> movea.l 36(sp),a0
   150e2:	|  |                        move.b (a0),d0
   150e4:	|  |                        cmpi.b #37,d0
   150e8:	|  |  ,-------------------- bne.w 151f4 <vsprintf2+0x12c>
            switch (*++p) {
   150ec:	|  |  |                     addq.l #1,36(sp)
   150f0:	|  |  |                     movea.l 36(sp),a0
   150f4:	|  |  |                     move.b (a0),d0
   150f6:	|  |  |                     ext.w d0
   150f8:	|  |  |                     movea.w d0,a0
   150fa:	|  |  |                     moveq #115,d0
   150fc:	|  |  |                     cmp.l a0,d0
   150fe:	|  |  |           ,-------- beq.s 15176 <vsprintf2+0xae>
   15100:	|  |  |           |         moveq #115,d1
   15102:	|  |  |           |         cmp.l a0,d1
   15104:	|  |  |  ,--------|-------- blt.w 151dc <vsprintf2+0x114>
   15108:	|  |  |  |        |         moveq #99,d2
   1510a:	|  |  |  |        |         cmp.l a0,d2
   1510c:	|  |  |  |  ,-----|-------- beq.w 151b4 <vsprintf2+0xec>
   15110:	|  |  |  |  |     |         moveq #100,d0
   15112:	|  |  |  |  |     |         cmp.l a0,d0
   15114:	|  |  |  +--|-----|-------- bne.w 151dc <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   15118:	|  |  |  |  |     |         addq.l #4,56(sp)
   1511c:	|  |  |  |  |     |         movea.l 56(sp),a0
   15120:	|  |  |  |  |     |         move.l (a0),d0
   15122:	|  |  |  |  |     |         move.l d0,d1
   15124:	|  |  |  |  |     |         subq.l #1,d1
   15126:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   1512a:	|  |  |  |  |     |         pea a <_start+0xa>
   1512e:	|  |  |  |  |     |         lea 8(sp),a0
   15132:	|  |  |  |  |     |         move.l a0,-(sp)
   15134:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   15138:	|  |  |  |  |     |         jsr 15000 <itoa>
   1513e:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   15142:	|  |  |  |  |     |         lea 44(sp),a0
   15146:	|  |  |  |  |     |         lea -40(a0),a0
   1514a:	|  |  |  |  |     |         move.l a0,28(sp)
   1514e:	|  |  |  |  |     |     ,-- bra.s 1516a <vsprintf2+0xa2>
                        *s++ = *b;
   15150:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   15154:	|  |  |  |  |     |  |  |   move.l d0,d1
   15156:	|  |  |  |  |     |  |  |   addq.l #1,d1
   15158:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   1515c:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   15160:	|  |  |  |  |     |  |  |   move.b (a0),d1
   15162:	|  |  |  |  |     |  |  |   movea.l d0,a0
   15164:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   15166:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   1516a:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   1516e:	|  |  |  |  |     |  |      move.b (a0),d0
   15170:	|  |  |  |  |     |  '----- bne.s 15150 <vsprintf2+0x88>
                    }
                    break;
   15172:	|  |  |  |  |  ,--|-------- bra.w 1520a <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   15176:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   1517a:	|  |  |  |  |  |            movea.l 56(sp),a0
   1517e:	|  |  |  |  |  |            move.l (a0),d0
   15180:	|  |  |  |  |  |            move.l d0,d1
   15182:	|  |  |  |  |  |            subq.l #1,d1
   15184:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   15188:	|  |  |  |  |  |        ,-- bra.s 151aa <vsprintf2+0xe2>
                        *s++ = *sval++;
   1518a:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   1518e:	|  |  |  |  |  |     |  |   move.l d1,d2
   15190:	|  |  |  |  |  |     |  |   addq.l #1,d2
   15192:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   15196:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   1519a:	|  |  |  |  |  |     |  |   move.l d0,d2
   1519c:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1519e:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   151a2:	|  |  |  |  |  |     |  |   movea.l d1,a0
   151a4:	|  |  |  |  |  |     |  |   move.b (a0),d1
   151a6:	|  |  |  |  |  |     |  |   movea.l d0,a0
   151a8:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   151aa:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   151ae:	|  |  |  |  |  |     |      move.b (a0),d0
   151b0:	|  |  |  |  |  |     '----- bne.s 1518a <vsprintf2+0xc2>
                    }
                    break;
   151b2:	|  |  |  |  |  +----------- bra.s 1520a <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   151b4:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   151b8:	|  |  |  |     |            movea.l 56(sp),a0
   151bc:	|  |  |  |     |            move.l (a0),d0
   151be:	|  |  |  |     |            move.l d0,d1
   151c0:	|  |  |  |     |            subq.l #1,d1
   151c2:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   151c6:	|  |  |  |     |            move.l 40(sp),d0
   151ca:	|  |  |  |     |            move.l d0,d2
   151cc:	|  |  |  |     |            addq.l #1,d2
   151ce:	|  |  |  |     |            move.l d2,40(sp)
   151d2:	|  |  |  |     |            move.l 24(sp),d1
   151d6:	|  |  |  |     |            movea.l d0,a0
   151d8:	|  |  |  |     |            move.b d1,(a0)
                    break;
   151da:	|  |  |  |     +----------- bra.s 1520a <vsprintf2+0x142>
                default:
                    *s++ = *p;
   151dc:	|  |  |  '-----|----------> move.l 40(sp),d0
   151e0:	|  |  |        |            move.l d0,d1
   151e2:	|  |  |        |            addq.l #1,d1
   151e4:	|  |  |        |            move.l d1,40(sp)
   151e8:	|  |  |        |            movea.l 36(sp),a0
   151ec:	|  |  |        |            move.b (a0),d1
   151ee:	|  |  |        |            movea.l d0,a0
   151f0:	|  |  |        |            move.b d1,(a0)
                    break;
   151f2:	|  |  |        +----------- bra.s 1520a <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   151f4:	|  |  '--------|----------> move.l 40(sp),d0
   151f8:	|  |           |            move.l d0,d1
   151fa:	|  |           |            addq.l #1,d1
   151fc:	|  |           |            move.l d1,40(sp)
   15200:	|  |           |            movea.l 36(sp),a0
   15204:	|  |           |            move.b (a0),d1
   15206:	|  |           |            movea.l d0,a0
   15208:	|  |           |            move.b d1,(a0)
        }
        p++;
   1520a:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   1520e:	|  '----------------------> movea.l 36(sp),a0
   15212:	|                           move.b (a0),d0
   15214:	'-------------------------- bne.w 150de <vsprintf2+0x16>
    }
    *s = '\0';
   15218:	                            movea.l 40(sp),a0
   1521c:	                            clr.b (a0)
    return s - str;
   1521e:	                            move.l 40(sp),d0
   15222:	                            sub.l 48(sp),d0
}
   15226:	                            move.l (sp)+,d2
   15228:	                            lea 40(sp),sp
   1522c:	                            rts

0001522e <sprintf>:

int sprintf(char* str, const char* format, ...) {
   1522e:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   15230:	moveq #16,d0
   15232:	add.l sp,d0
   15234:	move.l d0,d1
   15236:	addq.l #4,d1
   15238:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   1523c:	move.l 16(sp),d0
   15240:	move.l 4(sp),-(sp)
   15244:	move.l d0,-(sp)
   15246:	move.l 20(sp),-(sp)
   1524a:	jsr 150c8 <vsprintf2>
   15250:	lea 12(sp),sp
   15254:	move.l d0,(sp)
    va_end(args);
   15256:	clr.l 4(sp)

    return done;
   1525a:	move.l (sp),d0
}
   1525c:	addq.l #8,sp
   1525e:	rts

00015260 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   15260:	       lea -20(sp),sp
   15264:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   15266:	       moveq #12,d0
   15268:	       move.l d0,20(sp)
   1526c:	       clr.l 16(sp)
   15270:	       move.l 1e81c <SysBase>,d0
   15276:	       movea.l d0,a6
   15278:	       move.l 20(sp),d0
   1527c:	       move.l 16(sp),d1
   15280:	       jsr -684(a6)
   15284:	       move.l d0,12(sp)
   15288:	       move.l 12(sp),d0
   1528c:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   15290:	   ,-- bne.s 15296 <addVarToStack+0x36>
   15292:	   |   clr.w d0
   15294:	,--|-- bra.s 152de <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   15296:	|  '-> move.l 8(sp),d0
   1529a:	|      move.l d0,-(sp)
   1529c:	|      move.l 32(sp),-(sp)
   152a0:	|      jsr 15dc2 <copyMain>
   152a6:	|      addq.l #8,sp
   152a8:	|      tst.w d0
   152aa:	|  ,-- bne.s 152c6 <addVarToStack+0x66>
        FreeVec(newStack);
   152ac:	|  |   move.l 8(sp),4(sp)
   152b2:	|  |   move.l 1e81c <SysBase>,d0
   152b8:	|  |   movea.l d0,a6
   152ba:	|  |   movea.l 4(sp),a1
   152be:	|  |   jsr -690(a6)
        return FALSE;
   152c2:	|  |   clr.w d0
   152c4:	+--|-- bra.s 152de <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   152c6:	|  '-> movea.l 32(sp),a0
   152ca:	|      move.l (a0),d0
   152cc:	|      movea.l 8(sp),a0
   152d0:	|      move.l d0,8(a0)
    *thisStack = newStack;
   152d4:	|      movea.l 32(sp),a0
   152d8:	|      move.l 8(sp),(a0)
    return TRUE;
   152dc:	|      moveq #1,d0
}
   152de:	'----> movea.l (sp)+,a6
   152e0:	       lea 20(sp),sp
   152e4:	       rts

000152e6 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   152e6:	       lea -16(sp),sp
   152ea:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   152ec:	       moveq #12,d0
   152ee:	       move.l d0,16(sp)
   152f2:	       clr.l 12(sp)
   152f6:	       move.l 1e81c <SysBase>,d0
   152fc:	       movea.l d0,a6
   152fe:	       move.l 16(sp),d0
   15302:	       move.l 12(sp),d1
   15306:	       jsr -684(a6)
   1530a:	       move.l d0,8(sp)
   1530e:	       move.l 8(sp),d0
   15312:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   15316:	   ,-- bne.s 1531c <addVarToStackQuick+0x36>
   15318:	   |   clr.w d0
   1531a:	,--|-- bra.s 15352 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   1531c:	|  '-> move.l 4(sp),d0
   15320:	|      pea 8 <_start+0x8>
   15324:	|      move.l 28(sp),-(sp)
   15328:	|      move.l d0,-(sp)
   1532a:	|      jsr 184b8 <memcpy>
   15330:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   15334:	|      movea.l 24(sp),a0
   15338:	|      clr.l (a0)

    newStack->next = *thisStack;
   1533a:	|      movea.l 28(sp),a0
   1533e:	|      move.l (a0),d0
   15340:	|      movea.l 4(sp),a0
   15344:	|      move.l d0,8(a0)
    *thisStack = newStack;
   15348:	|      movea.l 28(sp),a0
   1534c:	|      move.l 4(sp),(a0)
    return TRUE;
   15350:	|      moveq #1,d0
}
   15352:	'----> movea.l (sp)+,a6
   15354:	       lea 16(sp),sp
   15358:	       rts

0001535a <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   1535a:	       lea -16(sp),sp
   1535e:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   15360:	       movea.l 24(sp),a0
   15364:	       move.l (a0),d0
   15366:	       moveq #1,d1
   15368:	       cmp.l d0,d1
   1536a:	   ,-- bne.s 15394 <addVariablesInSecond+0x3a>
   1536c:	   |   movea.l 28(sp),a0
   15370:	   |   move.l (a0),d0
   15372:	   |   moveq #1,d1
   15374:	   |   cmp.l d0,d1
   15376:	   +-- bne.s 15394 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   15378:	   |   movea.l 28(sp),a0
   1537c:	   |   move.l 4(a0),d1
   15380:	   |   movea.l 24(sp),a0
   15384:	   |   move.l 4(a0),d0
   15388:	   |   add.l d1,d0
   1538a:	   |   movea.l 28(sp),a0
   1538e:	   |   move.l d0,4(a0)
   15392:	,--|-- bra.s 1540e <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   15394:	|  '-> move.l 24(sp),-(sp)
   15398:	|      jsr 15ffa <getTextFromAnyVar>
   1539e:	|      addq.l #4,sp
   153a0:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   153a4:	|      move.l 28(sp),-(sp)
   153a8:	|      jsr 15ffa <getTextFromAnyVar>
   153ae:	|      addq.l #4,sp
   153b0:	|      move.l d0,12(sp)

		unlinkVar(var2);
   153b4:	|      move.l 28(sp),-(sp)
   153b8:	|      jsr 15c72 <unlinkVar>
   153be:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   153c0:	|      move.l 12(sp),-(sp)
   153c4:	|      move.l 20(sp),-(sp)
   153c8:	|      jsr 14f50 <joinStrings>
   153ce:	|      addq.l #8,sp
   153d0:	|      movea.l 28(sp),a0
   153d4:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   153d8:	|      movea.l 28(sp),a0
   153dc:	|      moveq #3,d0
   153de:	|      move.l d0,(a0)
		FreeVec(string1);
   153e0:	|      move.l 16(sp),8(sp)
   153e6:	|      move.l 1e81c <SysBase>,d0
   153ec:	|      movea.l d0,a6
   153ee:	|      movea.l 8(sp),a1
   153f2:	|      jsr -690(a6)
		FreeVec(string2);
   153f6:	|      move.l 12(sp),4(sp)
   153fc:	|      move.l 1e81c <SysBase>,d0
   15402:	|      movea.l d0,a6
   15404:	|      movea.l 4(sp),a1
   15408:	|      jsr -690(a6)
	}
}
   1540c:	|      nop
   1540e:	'----> nop
   15410:	       movea.l (sp)+,a6
   15412:	       lea 16(sp),sp
   15416:	       rts

00015418 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   15418:	movea.l 8(sp),a0
   1541c:	move.l 4(a0),-(sp)
   15420:	move.l (a0),-(sp)
   15422:	movea.l 12(sp),a0
   15426:	move.l 4(a0),-(sp)
   1542a:	move.l (a0),-(sp)
   1542c:	jsr 1544e <compareVars>
   15432:	lea 16(sp),sp
   15436:	move.l d0,-(sp)
   15438:	pea 1 <_start+0x1>
   1543c:	move.l 16(sp),-(sp)
   15440:	jsr 16316 <setVariable>
   15446:	lea 12(sp),sp
}
   1544a:	nop
   1544c:	rts

0001544e <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   1544e:	       subq.l #4,sp
	int re = 0;
   15450:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   15452:	       move.l 8(sp),d1
   15456:	       move.l 16(sp),d0
   1545a:	       cmp.l d1,d0
   1545c:	,----- bne.w 15524 <compareVars+0xd6>
		switch (var1.varType) {
   15460:	|      move.l 8(sp),d0
   15464:	|      moveq #9,d1
   15466:	|      cmp.l d0,d1
   15468:	|  ,-- bcs.w 1550c <compareVars+0xbe>
   1546c:	|  |   add.l d0,d0
   1546e:	|  |   movea.l d0,a0
   15470:	|  |   adda.l #87164,a0
   15476:	|  |   move.w (a0),d0
   15478:	|  |   jmp (1547c <compareVars+0x2e>,pc,d0.w)
   1547c:	|  |   ori.b #-112,(a4)
   15480:	|  |   ori.l #5243024,(a0)
   15486:	|  |   ori.l #7733392,(a0)
   1548c:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   15492:	|  |   move.l d0,(sp)
			break;
   15494:	+--|-- bra.w 15524 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   15498:	|  |   move.l 12(sp),d1
   1549c:	|  |   move.l 20(sp),d0
   154a0:	|  |   cmp.l d1,d0
   154a2:	|  |   seq d0
   154a4:	|  |   neg.b d0
   154a6:	|  |   move.b d0,d0
   154a8:	|  |   andi.l #255,d0
   154ae:	|  |   move.l d0,(sp)
			break;
   154b0:	+--|-- bra.s 15524 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   154b2:	|  |   move.l 12(sp),d1
   154b6:	|  |   move.l 20(sp),d0
   154ba:	|  |   cmp.l d1,d0
   154bc:	|  |   seq d0
   154be:	|  |   neg.b d0
   154c0:	|  |   move.b d0,d0
   154c2:	|  |   andi.l #255,d0
   154c8:	|  |   move.l d0,(sp)
			break;
   154ca:	+--|-- bra.s 15524 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   154cc:	|  |   move.l 20(sp),d1
   154d0:	|  |   move.l 12(sp),d0
   154d4:	|  |   move.l d1,-(sp)
   154d6:	|  |   move.l d0,-(sp)
   154d8:	|  |   jsr 14ed0 <strcmp>
   154de:	|  |   addq.l #8,sp
   154e0:	|  |   tst.l d0
   154e2:	|  |   seq d0
   154e4:	|  |   neg.b d0
   154e6:	|  |   move.b d0,d0
   154e8:	|  |   andi.l #255,d0
   154ee:	|  |   move.l d0,(sp)
			break;
   154f0:	+--|-- bra.s 15524 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   154f2:	|  |   move.l 12(sp),d1
   154f6:	|  |   move.l 20(sp),d0
   154fa:	|  |   cmp.l d1,d0
   154fc:	|  |   seq d0
   154fe:	|  |   neg.b d0
   15500:	|  |   move.b d0,d0
   15502:	|  |   andi.l #255,d0
   15508:	|  |   move.l d0,(sp)
			break;
   1550a:	+--|-- bra.s 15524 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   1550c:	|  '-> move.l 12(sp),d1
   15510:	|      move.l 20(sp),d0
   15514:	|      cmp.l d1,d0
   15516:	|      seq d0
   15518:	|      neg.b d0
   1551a:	|      move.b d0,d0
   1551c:	|      andi.l #255,d0
   15522:	|      move.l d0,(sp)
		}
	}
	return re;
   15524:	'----> move.l (sp),d0
}
   15526:	       addq.l #4,sp
   15528:	       rts

0001552a <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   1552a:	             lea -16(sp),sp
   1552e:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   15530:	             movea.l 28(sp),a0
   15534:	             moveq #6,d0
   15536:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   15538:	             moveq #12,d0
   1553a:	             move.l d0,12(sp)
   1553e:	             clr.l 8(sp)
   15542:	             move.l 1e81c <SysBase>,d0
   15548:	             movea.l d0,a6
   1554a:	             move.l 12(sp),d0
   1554e:	             move.l 8(sp),d1
   15552:	             jsr -684(a6)
   15556:	             move.l d0,4(sp)
   1555a:	             move.l 4(sp),d0
   1555e:	             movea.l 28(sp),a0
   15562:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   15566:	             movea.l 28(sp),a0
   1556a:	             move.l 4(a0),d0
   1556e:	         ,-- bne.s 15576 <copyStack+0x4c>
   15570:	         |   clr.w d0
   15572:	,--------|-- bra.w 155f8 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   15576:	|        '-> movea.l 28(sp),a0
   1557a:	|            movea.l 4(a0),a0
   1557e:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   15580:	|            movea.l 28(sp),a0
   15584:	|            movea.l 4(a0),a0
   15588:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   1558c:	|            movea.l 28(sp),a0
   15590:	|            movea.l 4(a0),a0
   15594:	|            moveq #1,d0
   15596:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   1559a:	|            movea.l 24(sp),a0
   1559e:	|            movea.l 4(a0),a0
   155a2:	|            move.l (a0),16(sp)

	while (a) {
   155a6:	|     ,----- bra.s 155f0 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   155a8:	|  ,--|----> movea.l 28(sp),a0
   155ac:	|  |  |      move.l 4(a0),d0
   155b0:	|  |  |      move.l d0,d1
   155b2:	|  |  |      move.l 16(sp),d0
   155b6:	|  |  |      move.l d1,-(sp)
   155b8:	|  |  |      move.l d0,-(sp)
   155ba:	|  |  |      jsr 15260 <addVarToStack>
   155c0:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   155c2:	|  |  |      movea.l 28(sp),a0
   155c6:	|  |  |      movea.l 4(a0),a0
   155ca:	|  |  |      move.l 4(a0),d0
   155ce:	|  |  |  ,-- bne.s 155e6 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   155d0:	|  |  |  |   movea.l 28(sp),a0
   155d4:	|  |  |  |   movea.l 4(a0),a1
   155d8:	|  |  |  |   movea.l 28(sp),a0
   155dc:	|  |  |  |   movea.l 4(a0),a0
   155e0:	|  |  |  |   move.l (a1),d0
   155e2:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   155e6:	|  |  |  '-> movea.l 16(sp),a0
   155ea:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   155f0:	|  |  '----> tst.l 16(sp)
   155f4:	|  '-------- bne.s 155a8 <copyStack+0x7e>
	}

	return TRUE;
   155f6:	|            moveq #1,d0
}
   155f8:	'----------> movea.l (sp)+,a6
   155fa:	             lea 16(sp),sp
   155fe:	             rts

00015600 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   15600:	                lea -20(sp),sp
   15604:	                move.l a6,-(sp)
   15606:	                move.l 36(sp),d0
   1560a:	                move.w d0,d0
   1560c:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   15610:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   15616:	                clr.l 16(sp)

    while (*huntVar) {
   1561a:	   ,----------- bra.s 15698 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   1561c:	,--|----------> movea.l 20(sp),a0
   15620:	|  |            movea.l (a0),a0
   15622:	|  |            movea.l 28(sp),a1
   15626:	|  |            move.l 4(a1),-(sp)
   1562a:	|  |            move.l (a1),-(sp)
   1562c:	|  |            move.l 4(a0),-(sp)
   15630:	|  |            move.l (a0),-(sp)
   15632:	|  |            jsr 1544e <compareVars>
   15638:	|  |            lea 16(sp),sp
   1563c:	|  |            tst.l d0
   1563e:	|  |  ,-------- beq.s 1568a <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   15640:	|  |  |         movea.l 20(sp),a0
   15644:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   15648:	|  |  |         movea.l 12(sp),a0
   1564c:	|  |  |         move.l 8(a0),d0
   15650:	|  |  |         movea.l 20(sp),a0
   15654:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   15656:	|  |  |         move.l 12(sp),d0
   1565a:	|  |  |         move.l d0,-(sp)
   1565c:	|  |  |         jsr 15c72 <unlinkVar>
   15662:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   15664:	|  |  |         move.l 12(sp),8(sp)
   1566a:	|  |  |         move.l 1e81c <SysBase>,d0
   15670:	|  |  |         movea.l d0,a6
   15672:	|  |  |         movea.l 8(sp),a1
   15676:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   1567a:	|  |  |         tst.w 6(sp)
   1567e:	|  |  |     ,-- bne.s 15684 <deleteVarFromStack+0x84>
   15680:	|  |  |     |   moveq #1,d0
   15682:	|  |  |  ,--|-- bra.s 156a6 <deleteVarFromStack+0xa6>
            reply++;
   15684:	|  |  |  |  '-> addq.l #1,16(sp)
   15688:	|  +--|--|----- bra.s 15698 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   1568a:	|  |  '--|----> movea.l 20(sp),a0
   1568e:	|  |     |      move.l (a0),d0
   15690:	|  |     |      move.l d0,d1
   15692:	|  |     |      addq.l #8,d1
   15694:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   15698:	|  '-----|----> movea.l 20(sp),a0
   1569c:	|        |      move.l (a0),d0
   1569e:	'--------|----- bne.w 1561c <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   156a2:	         |      move.l 16(sp),d0
}
   156a6:	         '----> movea.l (sp)+,a6
   156a8:	                lea 20(sp),sp
   156ac:	                rts

000156ae <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   156ae:	       movea.l 4(sp),a0
   156b2:	       move.l 4(a0),d0
   156b6:	       cmp.l 8(sp),d0
   156ba:	   ,-- bhi.s 156c0 <fastArrayGetByIndex+0x12>
   156bc:	   |   moveq #0,d0
   156be:	,--|-- bra.s 156ce <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   156c0:	|  '-> movea.l 4(sp),a0
   156c4:	|      move.l (a0),d1
   156c6:	|      move.l 8(sp),d0
   156ca:	|      lsl.l #3,d0
   156cc:	|      add.l d1,d0
}
   156ce:	'----> rts

000156d0 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   156d0:	                lea -32(sp),sp
   156d4:	                move.l a6,-(sp)
   156d6:	                move.l a2,-(sp)
    struct persona *p = NULL;
   156d8:	                clr.l 36(sp)

    switch (thisVar->varType) {
   156dc:	                movea.l 44(sp),a0
   156e0:	                move.l (a0),d0
   156e2:	                moveq #8,d1
   156e4:	                cmp.l d0,d1
   156e6:	            ,-- beq.s 156f4 <getCostumeFromVar+0x24>
   156e8:	            |   moveq #9,d1
   156ea:	            |   cmp.l d0,d1
   156ec:	   ,--------|-- beq.w 157a2 <getCostumeFromVar+0xd2>
   156f0:	,--|--------|-- bra.w 157ac <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   156f4:	|  |        '-> moveq #8,d0
   156f6:	|  |            move.l d0,28(sp)
   156fa:	|  |            clr.l 24(sp)
   156fe:	|  |            move.l 1e81c <SysBase>,d0
   15704:	|  |            movea.l d0,a6
   15706:	|  |            move.l 28(sp),d0
   1570a:	|  |            move.l 24(sp),d1
   1570e:	|  |            jsr -684(a6)
   15712:	|  |            move.l d0,20(sp)
   15716:	|  |            move.l 20(sp),d0
   1571a:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   1571e:	|  |        ,-- bne.s 15726 <getCostumeFromVar+0x56>
   15720:	|  |        |   moveq #0,d0
   15722:	|  |  ,-----|-- bra.w 157d6 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   15726:	|  |  |     '-> movea.l 36(sp),a0
   1572a:	|  |  |         moveq #1,d1
   1572c:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   15730:	|  |  |         moveq #12,d0
   15732:	|  |  |         move.l d0,16(sp)
   15736:	|  |  |         clr.l 12(sp)
   1573a:	|  |  |         move.l 1e81c <SysBase>,d0
   15740:	|  |  |         movea.l d0,a6
   15742:	|  |  |         move.l 16(sp),d0
   15746:	|  |  |         move.l 12(sp),d1
   1574a:	|  |  |         jsr -684(a6)
   1574e:	|  |  |         move.l d0,8(sp)
   15752:	|  |  |         move.l 8(sp),d0
   15756:	|  |  |         movea.l 36(sp),a0
   1575a:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   1575c:	|  |  |         movea.l 36(sp),a0
   15760:	|  |  |         move.l (a0),d0
   15762:	|  |  |     ,-- bne.s 15768 <getCostumeFromVar+0x98>
   15764:	|  |  |     |   moveq #0,d0
   15766:	|  |  +-----|-- bra.s 157d6 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   15768:	|  |  |     '-> clr.l 32(sp)
   1576c:	|  |  |     ,-- bra.s 15798 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   1576e:	|  |  |  ,--|-> movea.l 44(sp),a0
   15772:	|  |  |  |  |   move.l 4(a0),d0
   15776:	|  |  |  |  |   movea.l 36(sp),a0
   1577a:	|  |  |  |  |   movea.l (a0),a0
   1577c:	|  |  |  |  |   move.l 32(sp),d1
   15780:	|  |  |  |  |   add.l d1,d1
   15782:	|  |  |  |  |   add.l d1,d1
   15784:	|  |  |  |  |   lea (0,a0,d1.l),a2
   15788:	|  |  |  |  |   move.l d0,-(sp)
   1578a:	|  |  |  |  |   jsr 9eb0 <copyAnim>
   15790:	|  |  |  |  |   addq.l #4,sp
   15792:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   15794:	|  |  |  |  |   addq.l #1,32(sp)
   15798:	|  |  |  |  '-> moveq #2,d1
   1579a:	|  |  |  |      cmp.l 32(sp),d1
   1579e:	|  |  |  '----- bge.s 1576e <getCostumeFromVar+0x9e>
            }
            break;
   157a0:	|  |  |     ,-- bra.s 157d2 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   157a2:	|  '--|-----|-> movea.l 44(sp),a0
   157a6:	|     |     |   move.l 4(a0),d0
   157aa:	|     +-----|-- bra.s 157d6 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   157ac:	'-----|-----|-> movea.l 44(sp),a0
   157b0:	      |     |   move.l (a0),d0
   157b2:	      |     |   add.l d0,d0
   157b4:	      |     |   movea.l d0,a1
   157b6:	      |     |   adda.l d0,a1
   157b8:	      |     |   lea 1e6e8 <typeName>,a0
   157be:	      |     |   move.l (0,a1,a0.l),d0
   157c2:	      |     |   move.l d0,-(sp)
   157c4:	      |     |   pea 1bd3c <talk.c.490538ff+0x6ae>
   157ca:	      |     |   jsr 18504 <KPrintF>
   157d0:	      |     |   addq.l #8,sp
    }

    return p;
   157d2:	      |     '-> move.l 36(sp),d0
}
   157d6:	      '-------> movea.l (sp)+,a2
   157d8:	                movea.l (sp)+,a6
   157da:	                lea 32(sp),sp
   157de:	                rts

000157e0 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   157e0:	                lea -96(sp),sp
   157e4:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   157e8:	                move.l 116(sp),-(sp)
   157ec:	                pea 1bd74 <talk.c.490538ff+0x6e6>
   157f2:	                jsr 14f50 <joinStrings>
   157f8:	                addq.l #8,sp
   157fa:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   157fe:	            ,-- bne.s 15806 <getSavedGamesStack+0x26>
   15800:	            |   clr.w d0
   15802:	,-----------|-- bra.w 15a1a <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   15806:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   1580a:	|               move.l #114038,98(sp)
   15812:	|               moveq #-2,d0
   15814:	|               move.l d0,94(sp)
   15818:	|               move.l 1e824 <DOSBase>,d0
   1581e:	|               movea.l d0,a6
   15820:	|               move.l 98(sp),d1
   15824:	|               move.l 94(sp),d2
   15828:	|               jsr -84(a6)
   1582c:	|               move.l d0,90(sp)
   15830:	|               move.l 90(sp),d0
   15834:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   15838:	|           ,-- bne.s 15840 <getSavedGamesStack+0x60>
   1583a:	|           |   clr.w d0
   1583c:	+-----------|-- bra.w 15a1a <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   15840:	|           '-> move.l #260,82(sp)
   15848:	|               move.l #65536,78(sp)
   15850:	|               move.l 1e81c <SysBase>,d0
   15856:	|               movea.l d0,a6
   15858:	|               move.l 82(sp),d0
   1585c:	|               move.l 78(sp),d1
   15860:	|               jsr -684(a6)
   15864:	|               move.l d0,74(sp)
   15868:	|               move.l 74(sp),d0
   1586c:	|               move.l d0,70(sp)
	if (!fib) {
   15870:	|           ,-- bne.s 1588e <getSavedGamesStack+0xae>
		UnLock(dirLock);
   15872:	|           |   move.l 86(sp),22(sp)
   15878:	|           |   move.l 1e824 <DOSBase>,d0
   1587e:	|           |   movea.l d0,a6
   15880:	|           |   move.l 22(sp),d1
   15884:	|           |   jsr -90(a6)
		return FALSE;
   15888:	|           |   clr.w d0
   1588a:	+-----------|-- bra.w 15a1a <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   1588e:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   15892:	|               move.l 86(sp),66(sp)
   15898:	|               move.l 70(sp),62(sp)
   1589e:	|               move.l 1e824 <DOSBase>,d0
   158a4:	|               movea.l d0,a6
   158a6:	|               move.l 66(sp),d1
   158aa:	|               move.l 62(sp),d2
   158ae:	|               jsr -102(a6)
   158b2:	|               move.l d0,58(sp)
   158b6:	|               move.l 58(sp),d0
   158ba:	|  ,----------- beq.w 159ce <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   158be:	|  |        ,-- bra.w 1599a <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   158c2:	|  |  ,-----|-> move.l 70(sp),d2
   158c6:	|  |  |     |   addq.l #8,d2
   158c8:	|  |  |     |   move.l 70(sp),d0
   158cc:	|  |  |     |   addq.l #8,d0
   158ce:	|  |  |     |   move.l d0,-(sp)
   158d0:	|  |  |     |   jsr 14f10 <strlen>
   158d6:	|  |  |     |   addq.l #4,sp
   158d8:	|  |  |     |   move.l d0,d3
   158da:	|  |  |     |   move.l 116(sp),-(sp)
   158de:	|  |  |     |   jsr 14f10 <strlen>
   158e4:	|  |  |     |   addq.l #4,sp
   158e6:	|  |  |     |   move.l d3,d1
   158e8:	|  |  |     |   sub.l d0,d1
   158ea:	|  |  |     |   move.l d2,d0
   158ec:	|  |  |     |   add.l d1,d0
   158ee:	|  |  |     |   move.l 116(sp),-(sp)
   158f2:	|  |  |     |   move.l d0,-(sp)
   158f4:	|  |  |     |   jsr 14ed0 <strcmp>
   158fa:	|  |  |     |   addq.l #8,sp
   158fc:	|  |  |     |   tst.l d0
   158fe:	|  |  |     +-- bne.w 1599a <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   15902:	|  |  |     |   move.l 70(sp),d0
   15906:	|  |  |     |   addq.l #8,d0
   15908:	|  |  |     |   move.l d0,-(sp)
   1590a:	|  |  |     |   jsr 14f10 <strlen>
   15910:	|  |  |     |   addq.l #4,sp
   15912:	|  |  |     |   move.l d0,d2
   15914:	|  |  |     |   move.l 116(sp),-(sp)
   15918:	|  |  |     |   jsr 14f10 <strlen>
   1591e:	|  |  |     |   addq.l #4,sp
   15920:	|  |  |     |   move.l d0,d1
   15922:	|  |  |     |   move.l d2,d0
   15924:	|  |  |     |   sub.l d1,d0
   15926:	|  |  |     |   movea.l 70(sp),a0
   1592a:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   1592e:	|  |  |     |   move.l 70(sp),d0
   15932:	|  |  |     |   addq.l #8,d0
   15934:	|  |  |     |   move.l d0,-(sp)
   15936:	|  |  |     |   jsr 118 <decodeFilename>
   1593c:	|  |  |     |   addq.l #4,sp
   1593e:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   15942:	|  |  |     |   move.l 42(sp),-(sp)
   15946:	|  |  |     |   lea 18(sp),a0
   1594a:	|  |  |     |   move.l a0,-(sp)
   1594c:	|  |  |     |   jsr 15c46 <makeTextVar>
   15952:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   15954:	|  |  |     |   move.l 42(sp),38(sp)
   1595a:	|  |  |     |   move.l 1e81c <SysBase>,d0
   15960:	|  |  |     |   movea.l d0,a6
   15962:	|  |  |     |   movea.l 38(sp),a1
   15966:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1596a:	|  |  |     |   move.l 112(sp),d0
   1596e:	|  |  |     |   move.l d0,-(sp)
   15970:	|  |  |     |   lea 18(sp),a0
   15974:	|  |  |     |   move.l a0,-(sp)
   15976:	|  |  |     |   jsr 15260 <addVarToStack>
   1597c:	|  |  |     |   addq.l #8,sp
   1597e:	|  |  |     |   tst.w d0
   15980:	|  |  |  ,--|-- beq.s 159d2 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   15982:	|  |  |  |  |   movea.l 112(sp),a0
   15986:	|  |  |  |  |   move.l 4(a0),d0
   1598a:	|  |  |  |  +-- bne.s 1599a <getSavedGamesStack+0x1ba>
   1598c:	|  |  |  |  |   movea.l 112(sp),a0
   15990:	|  |  |  |  |   move.l (a0),d0
   15992:	|  |  |  |  |   movea.l 112(sp),a0
   15996:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   1599a:	|  |  |  |  '-> move.l 86(sp),54(sp)
   159a0:	|  |  |  |      move.l 70(sp),50(sp)
   159a6:	|  |  |  |      move.l 1e824 <DOSBase>,d0
   159ac:	|  |  |  |      movea.l d0,a6
   159ae:	|  |  |  |      move.l 54(sp),d1
   159b2:	|  |  |  |      move.l 50(sp),d2
   159b6:	|  |  |  |      jsr -108(a6)
   159ba:	|  |  |  |      move.l d0,46(sp)
   159be:	|  |  |  |      move.l 46(sp),d0
   159c2:	|  |  '--|----- bne.w 158c2 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   159c6:	|  |     |      move.w #1,106(sp)
   159cc:	|  |     |  ,-- bra.s 159d4 <getSavedGamesStack+0x1f4>
	}

cleanup:
   159ce:	|  '-----|--|-> nop
   159d0:	|        |  +-- bra.s 159d4 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   159d2:	|        '--|-> nop
	FreeVec(fib);
   159d4:	|           '-> move.l 70(sp),34(sp)
   159da:	|               move.l 1e81c <SysBase>,d0
   159e0:	|               movea.l d0,a6
   159e2:	|               movea.l 34(sp),a1
   159e6:	|               jsr -690(a6)
	UnLock(dirLock);
   159ea:	|               move.l 86(sp),30(sp)
   159f0:	|               move.l 1e824 <DOSBase>,d0
   159f6:	|               movea.l d0,a6
   159f8:	|               move.l 30(sp),d1
   159fc:	|               jsr -90(a6)
	FreeVec(pattern);
   15a00:	|               move.l 102(sp),26(sp)
   15a06:	|               move.l 1e81c <SysBase>,d0
   15a0c:	|               movea.l d0,a6
   15a0e:	|               movea.l 26(sp),a1
   15a12:	|               jsr -690(a6)
	return result;
   15a16:	|               move.w 106(sp),d0
}
   15a1a:	'-------------> movem.l (sp)+,d2-d3/a6
   15a1e:	                lea 96(sp),sp
   15a22:	                rts

00015a24 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   15a24:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   15a26:	       movea.l 20(sp),a0
   15a2a:	       move.l (a0),d0
   15a2c:	       cmp.l 16(sp),d0
   15a30:	,----- beq.s 15a94 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   15a32:	|      move.l 16(sp),d0
   15a36:	|      add.l d0,d0
   15a38:	|      movea.l d0,a1
   15a3a:	|      adda.l d0,a1
   15a3c:	|      lea 1e6e8 <typeName>,a0
   15a42:	|      move.l (0,a1,a0.l),d0
   15a46:	|      move.l d0,-(sp)
   15a48:	|      pea 1bd78 <talk.c.490538ff+0x6ea>
   15a4e:	|      jsr 14f50 <joinStrings>
   15a54:	|      addq.l #8,sp
   15a56:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   15a5a:	|      movea.l 20(sp),a0
   15a5e:	|      move.l (a0),d0
   15a60:	|      add.l d0,d0
   15a62:	|      movea.l d0,a1
   15a64:	|      adda.l d0,a1
   15a66:	|      lea 1e6e8 <typeName>,a0
   15a6c:	|      move.l (0,a1,a0.l),d0
   15a70:	|      move.l d0,-(sp)
   15a72:	|      pea 1bdba <talk.c.490538ff+0x72c>
   15a78:	|      jsr 14f50 <joinStrings>
   15a7e:	|      addq.l #8,sp
   15a80:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   15a82:	|      move.l (sp),-(sp)
   15a84:	|      move.l 8(sp),-(sp)
   15a88:	|      jsr 18504 <KPrintF>
   15a8e:	|      addq.l #8,sp

		return FALSE;
   15a90:	|      clr.w d0
   15a92:	|  ,-- bra.s 15aa4 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   15a94:	'--|-> movea.l 20(sp),a0
   15a98:	   |   move.l 4(a0),d0
   15a9c:	   |   movea.l 12(sp),a0
   15aa0:	   |   move.l d0,(a0)
	return TRUE;
   15aa2:	   |   moveq #1,d0
}
   15aa4:	   '-> addq.l #8,sp
   15aa6:	       rts

00015aa8 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   15aa8:	move.l 8(sp),-(sp)
   15aac:	jsr 7dfa <getNumberedString>
   15ab2:	addq.l #4,sp
   15ab4:	move.l d0,-(sp)
   15ab6:	move.l 8(sp),-(sp)
   15aba:	jsr 15c46 <makeTextVar>
   15ac0:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   15ac2:	movea.l 4(sp),a0
   15ac6:	move.l 4(a0),d0
   15aca:	sne d0
   15acc:	neg.b d0
   15ace:	move.b d0,d0
   15ad0:	andi.w #255,d0
}
   15ad4:	rts

00015ad6 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   15ad6:	          subq.l #8,sp
    int size = stackSize(stacky);
   15ad8:	          move.l 16(sp),-(sp)
   15adc:	          jsr 16384 <stackSize>
   15ae2:	          addq.l #4,sp
   15ae4:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   15ae8:	          move.l 4(sp),-(sp)
   15aec:	          move.l 16(sp),-(sp)
   15af0:	          jsr 15b40 <makeFastArraySize>
   15af6:	          addq.l #8,sp
   15af8:	          tst.w d0
   15afa:	      ,-- bne.s 15b00 <makeFastArrayFromStack+0x2a>
   15afc:	      |   clr.w d0
   15afe:	,-----|-- bra.s 15b3c <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   15b00:	|     '-> movea.l 16(sp),a0
   15b04:	|         move.l (a0),(sp)
    size = 0;
   15b06:	|         clr.l 4(sp)
    while (allV) {
   15b0a:	|     ,-- bra.s 15b36 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   15b0c:	|  ,--|-> movea.l 12(sp),a0
   15b10:	|  |  |   movea.l 4(a0),a0
   15b14:	|  |  |   move.l (a0),d1
   15b16:	|  |  |   move.l 4(sp),d0
   15b1a:	|  |  |   lsl.l #3,d0
   15b1c:	|  |  |   add.l d0,d1
   15b1e:	|  |  |   move.l (sp),d0
   15b20:	|  |  |   move.l d1,-(sp)
   15b22:	|  |  |   move.l d0,-(sp)
   15b24:	|  |  |   jsr 15dc2 <copyMain>
   15b2a:	|  |  |   addq.l #8,sp
        size++;
   15b2c:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   15b30:	|  |  |   movea.l (sp),a0
   15b32:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   15b36:	|  |  '-> tst.l (sp)
   15b38:	|  '----- bne.s 15b0c <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   15b3a:	|         moveq #1,d0
}
   15b3c:	'-------> addq.l #8,sp
   15b3e:	          rts

00015b40 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   15b40:	          lea -28(sp),sp
   15b44:	          move.l a6,-(sp)
    if (size < 0) {
   15b46:	          tst.l 40(sp)
   15b4a:	      ,-- bge.s 15b60 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   15b4c:	      |   pea 1bdff <talk.c.490538ff+0x771>
   15b52:	      |   jsr 18504 <KPrintF>
   15b58:	      |   addq.l #4,sp
		return FALSE;
   15b5a:	      |   clr.w d0
   15b5c:	,-----|-- bra.w 15c3e <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   15b60:	|     '-> move.l 36(sp),-(sp)
   15b64:	|         jsr 15c72 <unlinkVar>
   15b6a:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   15b6c:	|         movea.l 36(sp),a0
   15b70:	|         moveq #10,d0
   15b72:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   15b74:	|         moveq #12,d0
   15b76:	|         move.l d0,24(sp)
   15b7a:	|         clr.l 20(sp)
   15b7e:	|         move.l 1e81c <SysBase>,d0
   15b84:	|         movea.l d0,a6
   15b86:	|         move.l 24(sp),d0
   15b8a:	|         move.l 20(sp),d1
   15b8e:	|         jsr -684(a6)
   15b92:	|         move.l d0,16(sp)
   15b96:	|         move.l 16(sp),d0
   15b9a:	|         movea.l 36(sp),a0
   15b9e:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   15ba2:	|         movea.l 36(sp),a0
   15ba6:	|         move.l 4(a0),d0
   15baa:	|     ,-- bne.s 15bb2 <makeFastArraySize+0x72>
   15bac:	|     |   clr.w d0
   15bae:	+-----|-- bra.w 15c3e <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   15bb2:	|     '-> move.l 40(sp),d0
   15bb6:	|         lsl.l #3,d0
   15bb8:	|         move.l d0,12(sp)
   15bbc:	|         clr.l 8(sp)
   15bc0:	|         move.l 1e81c <SysBase>,d0
   15bc6:	|         movea.l d0,a6
   15bc8:	|         move.l 12(sp),d0
   15bcc:	|         move.l 8(sp),d1
   15bd0:	|         jsr -684(a6)
   15bd4:	|         move.l d0,4(sp)
   15bd8:	|         move.l 4(sp),d0
   15bdc:	|         movea.l 36(sp),a0
   15be0:	|         movea.l 4(a0),a0
   15be4:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   15be6:	|         movea.l 36(sp),a0
   15bea:	|         movea.l 4(a0),a0
   15bee:	|         move.l (a0),d0
   15bf0:	|     ,-- bne.s 15bf6 <makeFastArraySize+0xb6>
   15bf2:	|     |   clr.w d0
   15bf4:	+-----|-- bra.s 15c3e <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   15bf6:	|     '-> clr.l 28(sp)
   15bfa:	|     ,-- bra.s 15c16 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   15bfc:	|  ,--|-> movea.l 36(sp),a0
   15c00:	|  |  |   movea.l 4(a0),a0
   15c04:	|  |  |   move.l (a0),d1
   15c06:	|  |  |   move.l 28(sp),d0
   15c0a:	|  |  |   lsl.l #3,d0
   15c0c:	|  |  |   movea.l d1,a0
   15c0e:	|  |  |   adda.l d0,a0
   15c10:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   15c12:	|  |  |   addq.l #1,28(sp)
   15c16:	|  |  '-> move.l 28(sp),d0
   15c1a:	|  |      cmp.l 40(sp),d0
   15c1e:	|  '----- blt.s 15bfc <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   15c20:	|         movea.l 36(sp),a0
   15c24:	|         movea.l 4(a0),a0
   15c28:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   15c2e:	|         movea.l 36(sp),a0
   15c32:	|         movea.l 4(a0),a0
   15c36:	|         moveq #1,d0
   15c38:	|         move.l d0,8(a0)
    return TRUE;
   15c3c:	|         moveq #1,d0
}
   15c3e:	'-------> movea.l (sp)+,a6
   15c40:	          lea 28(sp),sp
   15c44:	          rts

00015c46 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   15c46:	move.l 4(sp),-(sp)
   15c4a:	jsr 15c72 <unlinkVar>
   15c50:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   15c52:	movea.l 4(sp),a0
   15c56:	moveq #3,d0
   15c58:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   15c5a:	move.l 8(sp),-(sp)
   15c5e:	jsr b8 <copyString>
   15c64:	addq.l #4,sp
   15c66:	movea.l 4(sp),a0
   15c6a:	move.l d0,4(a0)
}
   15c6e:	nop
   15c70:	rts

00015c72 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   15c72:	                      lea -16(sp),sp
   15c76:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   15c78:	                      movea.l 24(sp),a0
   15c7c:	                      move.l (a0),d0
   15c7e:	                      moveq #10,d1
   15c80:	                      cmp.l d0,d1
   15c82:	            ,-------- beq.w 15d3a <unlinkVar+0xc8>
   15c86:	            |         moveq #10,d1
   15c88:	            |         cmp.l d0,d1
   15c8a:	,-----------|-------- bcs.w 15dae <unlinkVar+0x13c>
   15c8e:	|           |         moveq #8,d1
   15c90:	|           |         cmp.l d0,d1
   15c92:	|  ,--------|-------- beq.w 15d9a <unlinkVar+0x128>
   15c96:	|  |        |         moveq #8,d1
   15c98:	|  |        |         cmp.l d0,d1
   15c9a:	+--|--------|-------- bcs.w 15dae <unlinkVar+0x13c>
   15c9e:	|  |        |         moveq #3,d1
   15ca0:	|  |        |         cmp.l d0,d1
   15ca2:	|  |        |     ,-- beq.s 15cae <unlinkVar+0x3c>
   15ca4:	|  |        |     |   moveq #6,d1
   15ca6:	|  |        |     |   cmp.l d0,d1
   15ca8:	|  |        |  ,--|-- beq.s 15cd4 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   15caa:	+--|--------|--|--|-- bra.w 15dae <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   15cae:	|  |        |  |  '-> movea.l 24(sp),a0
   15cb2:	|  |        |  |      move.l 4(a0),4(sp)
   15cb8:	|  |        |  |      move.l 1e81c <SysBase>,d0
   15cbe:	|  |        |  |      movea.l d0,a6
   15cc0:	|  |        |  |      movea.l 4(sp),a1
   15cc4:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   15cc8:	|  |        |  |      movea.l 24(sp),a0
   15ccc:	|  |        |  |      clr.l 4(a0)
		break;
   15cd0:	|  |  ,-----|--|----- bra.w 15db8 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   15cd4:	|  |  |     |  '----> movea.l 24(sp),a0
   15cd8:	|  |  |     |         movea.l 4(a0),a0
   15cdc:	|  |  |     |         move.l 8(a0),d0
   15ce0:	|  |  |     |         subq.l #1,d0
   15ce2:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   15ce6:	|  |  |     |         movea.l 24(sp),a0
   15cea:	|  |  |     |         movea.l 4(a0),a0
   15cee:	|  |  |     |         move.l 8(a0),d0
   15cf2:	|  |  |  ,--|-------- bgt.w 15db2 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   15cf6:	|  |  |  |  |     ,-- bra.s 15d0a <unlinkVar+0x98>
   15cf8:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   15cfc:	|  |  |  |  |  |  |   move.l 4(a0),d0
   15d00:	|  |  |  |  |  |  |   move.l d0,-(sp)
   15d02:	|  |  |  |  |  |  |   jsr 163a8 <trimStack>
   15d08:	|  |  |  |  |  |  |   addq.l #4,sp
   15d0a:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   15d0e:	|  |  |  |  |  |      movea.l 4(a0),a0
   15d12:	|  |  |  |  |  |      move.l (a0),d0
   15d14:	|  |  |  |  |  '----- bne.s 15cf8 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   15d16:	|  |  |  |  |         movea.l 24(sp),a0
   15d1a:	|  |  |  |  |         move.l 4(a0),8(sp)
   15d20:	|  |  |  |  |         move.l 1e81c <SysBase>,d0
   15d26:	|  |  |  |  |         movea.l d0,a6
   15d28:	|  |  |  |  |         movea.l 8(sp),a1
   15d2c:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   15d30:	|  |  |  |  |         movea.l 24(sp),a0
   15d34:	|  |  |  |  |         clr.l 4(a0)
		break;
   15d38:	|  |  |  +--|-------- bra.s 15db2 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   15d3a:	|  |  |  |  '-------> movea.l 24(sp),a0
   15d3e:	|  |  |  |            movea.l 4(a0),a0
   15d42:	|  |  |  |            move.l 8(a0),d0
   15d46:	|  |  |  |            subq.l #1,d0
   15d48:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   15d4c:	|  |  |  |            movea.l 24(sp),a0
   15d50:	|  |  |  |            movea.l 4(a0),a0
   15d54:	|  |  |  |            move.l 8(a0),d0
   15d58:	|  |  |  |        ,-- bgt.s 15db6 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   15d5a:	|  |  |  |        |   movea.l 24(sp),a0
   15d5e:	|  |  |  |        |   movea.l 4(a0),a0
   15d62:	|  |  |  |        |   move.l (a0),16(sp)
   15d66:	|  |  |  |        |   move.l 1e81c <SysBase>,d0
   15d6c:	|  |  |  |        |   movea.l d0,a6
   15d6e:	|  |  |  |        |   movea.l 16(sp),a1
   15d72:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   15d76:	|  |  |  |        |   movea.l 24(sp),a0
   15d7a:	|  |  |  |        |   move.l 4(a0),12(sp)
   15d80:	|  |  |  |        |   move.l 1e81c <SysBase>,d0
   15d86:	|  |  |  |        |   movea.l d0,a6
   15d88:	|  |  |  |        |   movea.l 12(sp),a1
   15d8c:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   15d90:	|  |  |  |        |   movea.l 24(sp),a0
   15d94:	|  |  |  |        |   clr.l 4(a0)
		break;
   15d98:	|  |  |  |        +-- bra.s 15db6 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   15d9a:	|  '--|--|--------|-> movea.l 24(sp),a0
   15d9e:	|     |  |        |   move.l 4(a0),d0
   15da2:	|     |  |        |   move.l d0,-(sp)
   15da4:	|     |  |        |   jsr a27c <deleteAnim>
   15daa:	|     |  |        |   addq.l #4,sp
		break;
   15dac:	|     +--|--------|-- bra.s 15db8 <unlinkVar+0x146>
		break;
   15dae:	'-----|--|--------|-> nop
   15db0:	      +--|--------|-- bra.s 15db8 <unlinkVar+0x146>
		break;
   15db2:	      |  '--------|-> nop
   15db4:	      +-----------|-- bra.s 15db8 <unlinkVar+0x146>
		break;
   15db6:	      |           '-> nop
	}
}
   15db8:	      '-------------> nop
   15dba:	                      movea.l (sp)+,a6
   15dbc:	                      lea 16(sp),sp
   15dc0:	                      rts

00015dc2 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   15dc2:	       movea.l 4(sp),a0
   15dc6:	       move.l (a0),d0
   15dc8:	       movea.l 8(sp),a0
   15dcc:	       move.l d0,(a0)
	switch (to->varType) {
   15dce:	       movea.l 8(sp),a0
   15dd2:	       move.l (a0),d0
   15dd4:	       moveq #10,d1
   15dd6:	       cmp.l d0,d1
   15dd8:	,----- bcs.w 15eca <copyMain+0x108>
   15ddc:	|      add.l d0,d0
   15dde:	|      movea.l d0,a0
   15de0:	|      adda.l #89580,a0
   15de6:	|      move.w (a0),d0
   15de8:	|      jmp (15dec <copyMain+0x2a>,pc,d0.w)
   15dec:	|      .short 0x00da
   15dee:	|      ori.b #22,(a6)
   15df2:	|      ori.w #22,(a4)
   15df6:	|      ori.b #-126,(a6)
   15dfa:	|      ori.b #-68,(a6)
   15dfe:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   15e06:	|      move.l 4(a0),d0
   15e0a:	|      movea.l 8(sp),a0
   15e0e:	|      move.l d0,4(a0)
		return TRUE;
   15e12:	|      moveq #1,d0
   15e14:	|  ,-- bra.w 15edc <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   15e18:	|  |   movea.l 4(sp),a0
   15e1c:	|  |   move.l 4(a0),d0
   15e20:	|  |   movea.l 8(sp),a0
   15e24:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   15e28:	|  |   movea.l 8(sp),a0
   15e2c:	|  |   movea.l 4(a0),a0
   15e30:	|  |   move.l 8(a0),d0
   15e34:	|  |   addq.l #1,d0
   15e36:	|  |   move.l d0,8(a0)
		return TRUE;
   15e3a:	|  |   moveq #1,d0
   15e3c:	|  +-- bra.w 15edc <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   15e40:	|  |   movea.l 4(sp),a0
   15e44:	|  |   move.l 4(a0),d0
   15e48:	|  |   move.l d0,-(sp)
   15e4a:	|  |   jsr b8 <copyString>
   15e50:	|  |   addq.l #4,sp
   15e52:	|  |   movea.l 8(sp),a0
   15e56:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   15e5a:	|  |   movea.l 8(sp),a0
   15e5e:	|  |   move.l 4(a0),d0
   15e62:	|  |   sne d0
   15e64:	|  |   neg.b d0
   15e66:	|  |   move.b d0,d0
   15e68:	|  |   andi.w #255,d0
   15e6c:	|  +-- bra.s 15edc <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   15e6e:	|  |   movea.l 4(sp),a0
   15e72:	|  |   move.l 4(a0),d0
   15e76:	|  |   movea.l 8(sp),a0
   15e7a:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   15e7e:	|  |   movea.l 8(sp),a0
   15e82:	|  |   movea.l 4(a0),a0
   15e86:	|  |   move.l 8(a0),d0
   15e8a:	|  |   addq.l #1,d0
   15e8c:	|  |   move.l d0,8(a0)
		return TRUE;
   15e90:	|  |   moveq #1,d0
   15e92:	|  +-- bra.s 15edc <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   15e94:	|  |   movea.l 4(sp),a0
   15e98:	|  |   move.l 4(a0),d0
   15e9c:	|  |   movea.l 8(sp),a0
   15ea0:	|  |   move.l d0,4(a0)
		return TRUE;
   15ea4:	|  |   moveq #1,d0
   15ea6:	|  +-- bra.s 15edc <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   15ea8:	|  |   movea.l 4(sp),a0
   15eac:	|  |   move.l 4(a0),d0
   15eb0:	|  |   move.l d0,-(sp)
   15eb2:	|  |   jsr 9eb0 <copyAnim>
   15eb8:	|  |   addq.l #4,sp
   15eba:	|  |   movea.l 8(sp),a0
   15ebe:	|  |   move.l d0,4(a0)
		return TRUE;
   15ec2:	|  |   moveq #1,d0
   15ec4:	|  +-- bra.s 15edc <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   15ec6:	|  |   moveq #1,d0
   15ec8:	|  +-- bra.s 15edc <copyMain+0x11a>

		default:
		break;
   15eca:	'--|-> nop
	}
	KPrintF("Unknown value type");
   15ecc:	   |   pea 1be50 <talk.c.490538ff+0x7c2>
   15ed2:	   |   jsr 18504 <KPrintF>
   15ed8:	   |   addq.l #4,sp
	return FALSE;
   15eda:	   |   clr.w d0
}
   15edc:	   '-> rts

00015ede <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   15ede:	move.l 8(sp),-(sp)
   15ee2:	jsr 15c72 <unlinkVar>
   15ee8:	addq.l #4,sp
	return copyMain(from, to);
   15eea:	move.l 8(sp),-(sp)
   15eee:	move.l 8(sp),-(sp)
   15ef2:	jsr 15dc2 <copyMain>
   15ef8:	addq.l #8,sp
}
   15efa:	rts

00015efc <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   15efc:	       movea.l 4(sp),a0
   15f00:	       move.l (a0),d0
   15f02:	       moveq #8,d1
   15f04:	       cmp.l d0,d1
   15f06:	   ,-- bne.s 15f1c <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   15f08:	   |   movea.l 4(sp),a0
   15f0c:	   |   move.l 4(a0),d0
   15f10:	   |   move.l d0,-(sp)
   15f12:	   |   jsr 9eb0 <copyAnim>
   15f18:	   |   addq.l #4,sp
   15f1a:	,--|-- bra.s 15f62 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   15f1c:	|  '-> movea.l 4(sp),a0
   15f20:	|      move.l (a0),d0
   15f22:	|      moveq #1,d1
   15f24:	|      cmp.l d0,d1
   15f26:	|  ,-- bne.s 15f3a <getAnimationFromVar+0x3e>
   15f28:	|  |   movea.l 4(sp),a0
   15f2c:	|  |   move.l 4(a0),d0
   15f30:	|  +-- bne.s 15f3a <getAnimationFromVar+0x3e>
		return makeNullAnim();
   15f32:	|  |   jsr b6e2 <makeNullAnim>
   15f38:	+--|-- bra.s 15f62 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   15f3a:	|  '-> movea.l 4(sp),a0
   15f3e:	|      move.l (a0),d0
   15f40:	|      add.l d0,d0
   15f42:	|      movea.l d0,a1
   15f44:	|      adda.l d0,a1
   15f46:	|      lea 1e6e8 <typeName>,a0
   15f4c:	|      move.l (0,a1,a0.l),d0
   15f50:	|      move.l d0,-(sp)
   15f52:	|      pea 1bd3c <talk.c.490538ff+0x6ae>
   15f58:	|      jsr 18504 <KPrintF>
   15f5e:	|      addq.l #8,sp
	return NULL;
   15f60:	|      moveq #0,d0
}
   15f62:	'----> rts

00015f64 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   15f64:	       movea.l 4(sp),a0
   15f68:	       move.l (a0),d0
   15f6a:	       moveq #10,d1
   15f6c:	       cmp.l d0,d1
   15f6e:	,----- bcs.w 15ff4 <getBoolean+0x90>
   15f72:	|      add.l d0,d0
   15f74:	|      movea.l d0,a0
   15f76:	|      adda.l #89986,a0
   15f7c:	|      move.w (a0),d0
   15f7e:	|      jmp (15f82 <getBoolean+0x1e>,pc,d0.w)
   15f82:	|      ori.b #26,(a6)
   15f86:	|      ori.w #68,(114,a2,d0.w)
   15f8c:	|      ori.w #46,(114,a2,d0.w)
   15f92:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   15f98:	|      clr.w d0
   15f9a:	|  ,-- bra.s 15ff8 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   15f9c:	|  |   movea.l 4(sp),a0
   15fa0:	|  |   move.l 4(a0),d0
   15fa4:	|  |   sne d0
   15fa6:	|  |   neg.b d0
   15fa8:	|  |   move.b d0,d0
   15faa:	|  |   andi.w #255,d0
   15fae:	|  +-- bra.s 15ff8 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   15fb0:	|  |   movea.l 4(sp),a0
   15fb4:	|  |   movea.l 4(a0),a0
   15fb8:	|  |   move.l (a0),d0
   15fba:	|  |   sne d0
   15fbc:	|  |   neg.b d0
   15fbe:	|  |   move.b d0,d0
   15fc0:	|  |   andi.w #255,d0
   15fc4:	|  +-- bra.s 15ff8 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   15fc6:	|  |   movea.l 4(sp),a0
   15fca:	|  |   movea.l 4(a0),a0
   15fce:	|  |   move.b (a0),d0
   15fd0:	|  |   sne d0
   15fd2:	|  |   neg.b d0
   15fd4:	|  |   move.b d0,d0
   15fd6:	|  |   andi.w #255,d0
   15fda:	|  +-- bra.s 15ff8 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   15fdc:	|  |   movea.l 4(sp),a0
   15fe0:	|  |   movea.l 4(a0),a0
   15fe4:	|  |   move.l 4(a0),d0
   15fe8:	|  |   sne d0
   15fea:	|  |   neg.b d0
   15fec:	|  |   move.b d0,d0
   15fee:	|  |   andi.w #255,d0
   15ff2:	|  +-- bra.s 15ff8 <getBoolean+0x94>

		default:
		break;
   15ff4:	'--|-> nop
	}
	return TRUE;
   15ff6:	   |   moveq #1,d0
}
   15ff8:	   '-> rts

00015ffa <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   15ffa:	      ,----------> lea -76(sp),sp
   15ffe:	      |            move.l a6,-(sp)
	switch (from->varType) {
   16000:	      |            movea.l 84(sp),a0
   16004:	      |            move.l (a0),d0
   16006:	      |            moveq #10,d1
   16008:	      |            cmp.l d0,d1
   1600a:	,-----|----------- bcs.w 162a8 <getTextFromAnyVar+0x2ae>
   1600e:	|     |            add.l d0,d0
   16010:	|     |            movea.l d0,a0
   16012:	|     |            adda.l #90142,a0
   16018:	|     |            move.w (a0),d0
   1601a:	|     |            jmp (1601e <getTextFromAnyVar+0x24>,pc,d0.w)
   1601e:	|     |            .short 0x028a
   16020:	|     |            bset d0,(a0)+
   16022:	|     |            .short 0x028a
   16024:	|     |            ori.b #-118,(a6)
   16028:	|     |            andi.b #8,ccr
   1602c:	|     |            andi.w #650,-(a0)
   16030:	|     |            .short 0x028a
   16032:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   16038:	|     |            move.l 4(a0),d0
   1603c:	|     |            move.l d0,-(sp)
   1603e:	|     |            jsr b8 <copyString>
   16044:	|     |            addq.l #4,sp
   16046:	|  ,--|----------- bra.w 162ca <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   1604a:	|  |  |            pea 1be63 <talk.c.490538ff+0x7d5>
   16050:	|  |  |            jsr b8 <copyString>
   16056:	|  |  |            addq.l #4,sp
   16058:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   1605c:	|  |  |            clr.l 72(sp)
   16060:	|  |  |     ,----- bra.w 1610a <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   16064:	|  |  |  ,--|----> pea 1be69 <talk.c.490538ff+0x7db>
   1606a:	|  |  |  |  |      move.l 80(sp),-(sp)
   1606e:	|  |  |  |  |      jsr 14f50 <joinStrings>
   16074:	|  |  |  |  |      addq.l #8,sp
   16076:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   1607a:	|  |  |  |  |  ,-- bne.s 16082 <getTextFromAnyVar+0x88>
   1607c:	|  |  |  |  |  |   moveq #0,d0
   1607e:	|  +--|--|--|--|-- bra.w 162ca <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   16082:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   16088:	|  |  |  |  |      move.l 1e81c <SysBase>,d0
   1608e:	|  |  |  |  |      movea.l d0,a6
   16090:	|  |  |  |  |      movea.l 56(sp),a1
   16094:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   16098:	|  |  |  |  |      movea.l 84(sp),a0
   1609c:	|  |  |  |  |      movea.l 4(a0),a0
   160a0:	|  |  |  |  |      move.l (a0),d1
   160a2:	|  |  |  |  |      move.l 72(sp),d0
   160a6:	|  |  |  |  |      lsl.l #3,d0
   160a8:	|  |  |  |  |      add.l d1,d0
   160aa:	|  |  |  |  |      move.l d0,-(sp)
   160ac:	|  |  +--|--|----- jsr 15ffa <getTextFromAnyVar>(pc)
   160b0:	|  |  |  |  |      addq.l #4,sp
   160b2:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   160b6:	|  |  |  |  |      move.l 52(sp),-(sp)
   160ba:	|  |  |  |  |      move.l 64(sp),-(sp)
   160be:	|  |  |  |  |      jsr 14f50 <joinStrings>
   160c4:	|  |  |  |  |      addq.l #8,sp
   160c6:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   160ca:	|  |  |  |  |  ,-- bne.s 160d2 <getTextFromAnyVar+0xd8>
   160cc:	|  |  |  |  |  |   moveq #0,d0
   160ce:	|  +--|--|--|--|-- bra.w 162ca <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   160d2:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   160d8:	|  |  |  |  |      move.l 1e81c <SysBase>,d0
   160de:	|  |  |  |  |      movea.l d0,a6
   160e0:	|  |  |  |  |      movea.l 48(sp),a1
   160e4:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   160e8:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   160ec:	|  |  |  |  |      move.l 60(sp),44(sp)
   160f2:	|  |  |  |  |      move.l 1e81c <SysBase>,d0
   160f8:	|  |  |  |  |      movea.l d0,a6
   160fa:	|  |  |  |  |      movea.l 44(sp),a1
   160fe:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   16102:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   16106:	|  |  |  |  |      addq.l #1,72(sp)
   1610a:	|  |  |  |  '----> movea.l 84(sp),a0
   1610e:	|  |  |  |         movea.l 4(a0),a0
   16112:	|  |  |  |         move.l 4(a0),d0
   16116:	|  |  |  |         cmp.l 72(sp),d0
   1611a:	|  |  |  '-------- bgt.w 16064 <getTextFromAnyVar+0x6a>
			}
			return builder;
   1611e:	|  |  |            move.l 76(sp),d0
   16122:	|  +--|----------- bra.w 162ca <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   16126:	|  |  |            pea 1be6b <talk.c.490538ff+0x7dd>
   1612c:	|  |  |            jsr b8 <copyString>
   16132:	|  |  |            addq.l #4,sp
   16134:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   16138:	|  |  |            movea.l 84(sp),a0
   1613c:	|  |  |            movea.l 4(a0),a0
   16140:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   16144:	|  |  |     ,----- bra.w 161e6 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   16148:	|  |  |  ,--|----> pea 1be69 <talk.c.490538ff+0x7db>
   1614e:	|  |  |  |  |      move.l 72(sp),-(sp)
   16152:	|  |  |  |  |      jsr 14f50 <joinStrings>
   16158:	|  |  |  |  |      addq.l #8,sp
   1615a:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   1615e:	|  |  |  |  |  ,-- bne.s 16166 <getTextFromAnyVar+0x16c>
   16160:	|  |  |  |  |  |   moveq #0,d0
   16162:	|  +--|--|--|--|-- bra.w 162ca <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   16166:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   1616c:	|  |  |  |  |      move.l 1e81c <SysBase>,d0
   16172:	|  |  |  |  |      movea.l d0,a6
   16174:	|  |  |  |  |      movea.l 32(sp),a1
   16178:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   1617c:	|  |  |  |  |      move.l 64(sp),d0
   16180:	|  |  |  |  |      move.l d0,-(sp)
   16182:	|  |  '--|--|----- jsr 15ffa <getTextFromAnyVar>(pc)
   16186:	|  |     |  |      addq.l #4,sp
   16188:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   1618c:	|  |     |  |      move.l 28(sp),-(sp)
   16190:	|  |     |  |      move.l 40(sp),-(sp)
   16194:	|  |     |  |      jsr 14f50 <joinStrings>
   1619a:	|  |     |  |      addq.l #8,sp
   1619c:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   161a0:	|  |     |  |  ,-- bne.s 161a8 <getTextFromAnyVar+0x1ae>
   161a2:	|  |     |  |  |   moveq #0,d0
   161a4:	|  +-----|--|--|-- bra.w 162ca <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   161a8:	|  |     |  |  '-> move.l 28(sp),24(sp)
   161ae:	|  |     |  |      move.l 1e81c <SysBase>,d0
   161b4:	|  |     |  |      movea.l d0,a6
   161b6:	|  |     |  |      movea.l 24(sp),a1
   161ba:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   161be:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   161c2:	|  |     |  |      move.l 36(sp),20(sp)
   161c8:	|  |     |  |      move.l 1e81c <SysBase>,d0
   161ce:	|  |     |  |      movea.l d0,a6
   161d0:	|  |     |  |      movea.l 20(sp),a1
   161d4:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   161d8:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   161dc:	|  |     |  |      movea.l 64(sp),a0
   161e0:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   161e6:	|  |     |  '----> tst.l 64(sp)
   161ea:	|  |     '-------- bne.w 16148 <getTextFromAnyVar+0x14e>
			}
			return builder;
   161ee:	|  |               move.l 68(sp),d0
   161f2:	|  +-------------- bra.w 162ca <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   161f6:	|  |               moveq #10,d0
   161f8:	|  |               move.l d0,16(sp)
   161fc:	|  |               clr.l 12(sp)
   16200:	|  |               move.l 1e81c <SysBase>,d0
   16206:	|  |               movea.l d0,a6
   16208:	|  |               move.l 16(sp),d0
   1620c:	|  |               move.l 12(sp),d1
   16210:	|  |               jsr -684(a6)
   16214:	|  |               move.l d0,8(sp)
   16218:	|  |               move.l 8(sp),d0
   1621c:	|  |               move.l d0,4(sp)
			if (! buff) {
   16220:	|  |           ,-- bne.s 16236 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   16222:	|  |           |   pea 1be72 <talk.c.490538ff+0x7e4>
   16228:	|  |           |   jsr 18504 <KPrintF>
   1622e:	|  |           |   addq.l #4,sp
				return NULL;
   16230:	|  |           |   moveq #0,d0
   16232:	|  +-----------|-- bra.w 162ca <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   16236:	|  |           '-> movea.l 84(sp),a0
   1623a:	|  |               move.l 4(a0),d0
   1623e:	|  |               move.l d0,-(sp)
   16240:	|  |               pea 1be9c <talk.c.490538ff+0x80e>
   16246:	|  |               move.l 12(sp),-(sp)
   1624a:	|  |               jsr 1522e <sprintf>
   16250:	|  |               lea 12(sp),sp
			return buff;
   16254:	|  |               move.l 4(sp),d0
   16258:	|  +-------------- bra.s 162ca <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   1625a:	|  |               movea.l 84(sp),a0
   1625e:	|  |               move.l 4(a0),d0
   16262:	|  |               move.l d0,-(sp)
   16264:	|  |               jsr 4f32 <resourceNameFromNum>
   1626a:	|  |               addq.l #4,sp
   1626c:	|  |               move.l d0,-(sp)
   1626e:	|  |               pea 19d14 <PutChar+0xd6e>
   16274:	|  |               jsr 14f50 <joinStrings>
   1627a:	|  |               addq.l #8,sp
   1627c:	|  +-------------- bra.s 162ca <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   1627e:	|  |               movea.l 84(sp),a0
   16282:	|  |               move.l 4(a0),d0
   16286:	|  |               move.l d0,-(sp)
   16288:	|  |               jsr df0c <findObjectType>
   1628e:	|  |               addq.l #4,sp
   16290:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   16294:	+--|-------------- beq.s 162a8 <getTextFromAnyVar+0x2ae>
   16296:	|  |               movea.l 40(sp),a0
   1629a:	|  |               move.l (a0),d0
   1629c:	|  |               move.l d0,-(sp)
   1629e:	|  |               jsr b8 <copyString>
   162a4:	|  |               addq.l #4,sp
   162a6:	|  +-------------- bra.s 162ca <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   162a8:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   162aa:	   |               movea.l 84(sp),a0
   162ae:	   |               move.l (a0),d0
   162b0:	   |               add.l d0,d0
   162b2:	   |               movea.l d0,a1
   162b4:	   |               adda.l d0,a1
   162b6:	   |               lea 1e6e8 <typeName>,a0
   162bc:	   |               move.l (0,a1,a0.l),d0
   162c0:	   |               move.l d0,-(sp)
   162c2:	   |               jsr b8 <copyString>
   162c8:	   |               addq.l #4,sp
}
   162ca:	   '-------------> movea.l (sp)+,a6
   162cc:	                   lea 76(sp),sp
   162d0:	                   rts

000162d2 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   162d2:	move.l 4(sp),-(sp)
   162d6:	jsr 15c72 <unlinkVar>
   162dc:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   162de:	movea.l 4(sp),a0
   162e2:	moveq #8,d0
   162e4:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   162e6:	movea.l 4(sp),a0
   162ea:	move.l 8(sp),4(a0)
}
   162f0:	nop
   162f2:	rts

000162f4 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   162f4:	move.l 4(sp),-(sp)
   162f8:	jsr 15c72 <unlinkVar>
   162fe:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   16300:	movea.l 4(sp),a0
   16304:	moveq #9,d0
   16306:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   16308:	movea.l 4(sp),a0
   1630c:	move.l 8(sp),4(a0)
}
   16312:	nop
   16314:	rts

00016316 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   16316:	move.l 4(sp),-(sp)
   1631a:	jsr 15c72 <unlinkVar>
   16320:	addq.l #4,sp
   16322:	movea.l 4(sp),a0
   16326:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   1632a:	movea.l 4(sp),a0
   1632e:	move.l 12(sp),4(a0)
   16334:	nop
   16336:	rts

00016338 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   16338:	      ,-- bra.s 1634a <stackGetByIndex+0x12>
        vS = vS->next;
   1633a:	,-----|-> movea.l 4(sp),a0
   1633e:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   16344:	|     +-- bne.s 1634a <stackGetByIndex+0x12>
            return NULL;
   16346:	|     |   moveq #0,d0
   16348:	|  ,--|-- bra.s 1635e <stackGetByIndex+0x26>
    while (theIndex--) {
   1634a:	|  |  '-> move.l 8(sp),d0
   1634e:	|  |      move.l d0,d1
   16350:	|  |      subq.l #1,d1
   16352:	|  |      move.l d1,8(sp)
   16356:	|  |      tst.l d0
   16358:	'--|----- bne.s 1633a <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   1635a:	   |      move.l 4(sp),d0
}
   1635e:	   '----> rts

00016360 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   16360:	          tst.l 4(sp)
   16364:	      ,-- bne.s 16374 <stackFindLast+0x14>
		return NULL;
   16366:	      |   moveq #0,d0
   16368:	,-----|-- bra.s 16382 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   1636a:	|  ,--|-> movea.l 4(sp),a0
   1636e:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   16374:	|  |  '-> movea.l 4(sp),a0
   16378:	|  |      move.l 8(a0),d0
   1637c:	|  '----- bne.s 1636a <stackFindLast+0xa>

	return hunt;
   1637e:	|         move.l 4(sp),d0
}
   16382:	'-------> rts

00016384 <stackSize>:

int stackSize (const struct stackHandler * me) {
   16384:	       subq.l #8,sp
	int r = 0;
   16386:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   1638a:	       movea.l 12(sp),a0
   1638e:	       move.l (a0),(sp)
	while (a) {
   16390:	   ,-- bra.s 1639c <stackSize+0x18>
		r ++;
   16392:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   16396:	|  |   movea.l (sp),a0
   16398:	|  |   move.l 8(a0),(sp)
	while (a) {
   1639c:	|  '-> tst.l (sp)
   1639e:	'----- bne.s 16392 <stackSize+0xe>
	}
	return r;
   163a0:	       move.l 4(sp),d0
}
   163a4:	       addq.l #8,sp
   163a6:	       rts

000163a8 <trimStack>:

void trimStack (struct variableStack ** stack) {
   163a8:	subq.l #8,sp
   163aa:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   163ac:	movea.l 16(sp),a0
   163b0:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   163b4:	movea.l 16(sp),a0
   163b8:	movea.l (a0),a0
   163ba:	move.l 8(a0),d0
   163be:	movea.l 16(sp),a0
   163c2:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   163c4:	move.l 8(sp),d0
   163c8:	move.l d0,-(sp)
   163ca:	jsr 15c72 <unlinkVar>
   163d0:	addq.l #4,sp
	FreeVec(killMe);
   163d2:	move.l 8(sp),4(sp)
   163d8:	move.l 1e81c <SysBase>,d0
   163de:	movea.l d0,a6
   163e0:	movea.l 4(sp),a1
   163e4:	jsr -690(a6)
   163e8:	nop
   163ea:	movea.l (sp)+,a6
   163ec:	addq.l #8,sp
   163ee:	rts

000163f0 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   163f0:	       lea -52(sp),sp
   163f4:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   163f6:	       pea 1be9f <talk.c.490538ff+0x811>
   163fc:	       jsr 18504 <KPrintF>
   16402:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   16404:	       moveq #68,d0
   16406:	       move.l d0,52(sp)
   1640a:	       clr.l 48(sp)
   1640e:	       move.l 1e81c <SysBase>,d0
   16414:	       movea.l d0,a6
   16416:	       move.l 52(sp),d0
   1641a:	       move.l 48(sp),d1
   1641e:	       jsr -684(a6)
   16422:	       move.l d0,44(sp)
   16426:	       move.l 44(sp),d0
   1642a:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   1642e:	   ,-- bne.s 16436 <freeze+0x46>
   16430:	   |   clr.w d0
   16432:	,--|-- bra.w 165c8 <freeze+0x1d8>

	CstFreeze();
   16436:	|  '-> jsr 1c5a <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   1643c:	|      move.l 1e8b8 <sceneWidth>,d0
   16442:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   16446:	|      move.l 1e8bc <sceneHeight>,d0
   1644c:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   16450:	|      move.l 1e8b8 <sceneWidth>,d0
   16456:	|      movea.l 40(sp),a0
   1645a:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   1645e:	|      move.l 1e8bc <sceneHeight>,d0
   16464:	|      movea.l 40(sp),a0
   16468:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   1646c:	|      move.l 1e8d6 <cameraX>,d0
   16472:	|      movea.l 40(sp),a0
   16476:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   1647a:	|      move.l 1e8da <cameraY>,d0
   16480:	|      movea.l 40(sp),a0
   16484:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   16488:	|      move.l 1e1a2 <cameraZoom>,d0
   1648e:	|      movea.l 40(sp),a0
   16492:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   16496:	|      move.w #1,1e8c4 <backdropExists>

	newFreezer -> allPeople = allPeople;
   1649e:	|      move.l 1e880 <allPeople>,d0
   164a4:	|      movea.l 40(sp),a0
   164a8:	|      move.l d0,(a0)
	allPeople = NULL;
   164aa:	|      clr.l 1e880 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   164b0:	|      moveq #42,d0
   164b2:	|      move.l d0,28(sp)
   164b6:	|      clr.l 24(sp)
   164ba:	|      move.l 1e81c <SysBase>,d0
   164c0:	|      movea.l d0,a6
   164c2:	|      move.l 28(sp),d0
   164c6:	|      move.l 24(sp),d1
   164ca:	|      jsr -684(a6)
   164ce:	|      move.l d0,20(sp)
   164d2:	|      move.l 20(sp),d0
   164d6:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   164da:	|  ,-- bne.s 164e2 <freeze+0xf2>
   164dc:	|  |   clr.w d0
   164de:	+--|-- bra.w 165c8 <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   164e2:	|  '-> move.l 1e92c <allScreenRegions>,d0
   164e8:	|      movea.l 40(sp),a0
   164ec:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   164f0:	|      clr.l 1e92c <allScreenRegions>
	overRegion = NULL;
   164f6:	|      clr.l 1e930 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   164fc:	|      move.l 1e712 <mouseCursorAnim>,d0
   16502:	|      movea.l 40(sp),a0
   16506:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   1650a:	|      move.l 1e716 <mouseCursorFrameNum>,d0
   16510:	|      movea.l 40(sp),a0
   16514:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   16518:	|      jsr b6e2 <makeNullAnim>
   1651e:	|      move.l d0,1e712 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   16524:	|      clr.l 1e716 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   1652a:	|      move.l 1e87c <zBuffer>,d0
   16530:	|      movea.l 40(sp),a0
   16534:	|      move.l d0,60(a0)
	zBuffer = NULL;
   16538:	|      clr.l 1e87c <zBuffer>

	newFreezer -> speech = speech;
   1653e:	|      move.l 1e75e <speech>,d0
   16544:	|      movea.l 40(sp),a0
   16548:	|      move.l d0,20(a0)
	initSpeech ();
   1654c:	|      jsr 4428 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   16552:	|      move.l 1e180 <currentEvents>,d0
   16558:	|      movea.l 40(sp),a0
   1655c:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   16560:	|      moveq #28,d0
   16562:	|      move.l d0,12(sp)
   16566:	|      clr.l 8(sp)
   1656a:	|      move.l 1e81c <SysBase>,d0
   16570:	|      movea.l d0,a6
   16572:	|      move.l 12(sp),d0
   16576:	|      move.l 8(sp),d1
   1657a:	|      jsr -684(a6)
   1657e:	|      move.l d0,4(sp)
   16582:	|      move.l 4(sp),d0
   16586:	|      move.l d0,1e180 <currentEvents>
	if (!currentEvents) return FALSE;
   1658c:	|      move.l 1e180 <currentEvents>,d0
   16592:	|  ,-- bne.s 16598 <freeze+0x1a8>
   16594:	|  |   clr.w d0
   16596:	+--|-- bra.s 165c8 <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   16598:	|  '-> move.l 1e180 <currentEvents>,d0
   1659e:	|      pea 1c <_start+0x1c>
   165a2:	|      clr.l -(sp)
   165a4:	|      move.l d0,-(sp)
   165a6:	|      jsr 18488 <memset>
   165ac:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   165b0:	|      move.l 1e910 <frozenStuff>,d0
   165b6:	|      movea.l 40(sp),a0
   165ba:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   165be:	|      move.l 40(sp),1e910 <frozenStuff>

	return TRUE;
   165c6:	|      moveq #1,d0
}
   165c8:	'----> movea.l (sp)+,a6
   165ca:	       lea 52(sp),sp
   165ce:	       rts

000165d0 <howFrozen>:

int howFrozen () {
   165d0:	       subq.l #8,sp
	int a = 0;
   165d2:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   165d6:	       move.l 1e910 <frozenStuff>,(sp)
	while (f) {
   165dc:	   ,-- bra.s 165e8 <howFrozen+0x18>
		a ++;
   165de:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   165e2:	|  |   movea.l (sp),a0
   165e4:	|  |   move.l 64(a0),(sp)
	while (f) {
   165e8:	|  '-> tst.l (sp)
   165ea:	'----- bne.s 165de <howFrozen+0xe>
	}
	return a;
   165ec:	       move.l 4(sp),d0
}
   165f0:	       addq.l #8,sp
   165f2:	       rts

000165f4 <unfreeze>:

void unfreeze () {
   165f4:	       lea -16(sp),sp
   165f8:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   165fa:	       move.l 1e910 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   16602:	       move.l 1e910 <frozenStuff>,d0
   16608:	,----- beq.w 16840 <unfreeze+0x24c>

	CstUnfreeze();
   1660c:	|      jsr 3fd2 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   16612:	|      movea.l 1e910 <frozenStuff>,a0
   16618:	|      move.l 48(a0),d0
   1661c:	|      move.l d0,1e8b8 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   16622:	|      movea.l 1e910 <frozenStuff>,a0
   16628:	|      move.l 52(a0),d0
   1662c:	|      move.l d0,1e8bc <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   16632:	|      movea.l 1e910 <frozenStuff>,a0
   16638:	|      move.l 40(a0),d0
   1663c:	|      move.l d0,1e8d6 <cameraX>
	cameraY = frozenStuff -> cameraY;
   16642:	|      movea.l 1e910 <frozenStuff>,a0
   16648:	|      move.l 44(a0),d0
   1664c:	|      move.l d0,1e8da <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   16652:	|      move.l 1e7d6 <input+0xa>,d0
   16658:	|      move.l d0,-(sp)
   1665a:	|      jsr 18936 <__floatsisf>
   16660:	|      addq.l #4,sp
   16662:	|      move.l d0,d1
   16664:	|      move.l 1e1a2 <cameraZoom>,d0
   1666a:	|      move.l d0,-(sp)
   1666c:	|      move.l d1,-(sp)
   1666e:	|      jsr 189e8 <__mulsf3>
   16674:	|      addq.l #8,sp
   16676:	|      move.l d0,-(sp)
   16678:	|      jsr 188ce <__fixsfsi>
   1667e:	|      addq.l #4,sp
   16680:	|      move.l d0,1e7d6 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   16686:	|      move.l 1e7da <input+0xe>,d0
   1668c:	|      move.l d0,-(sp)
   1668e:	|      jsr 18936 <__floatsisf>
   16694:	|      addq.l #4,sp
   16696:	|      move.l d0,d1
   16698:	|      move.l 1e1a2 <cameraZoom>,d0
   1669e:	|      move.l d0,-(sp)
   166a0:	|      move.l d1,-(sp)
   166a2:	|      jsr 189e8 <__mulsf3>
   166a8:	|      addq.l #8,sp
   166aa:	|      move.l d0,-(sp)
   166ac:	|      jsr 188ce <__fixsfsi>
   166b2:	|      addq.l #4,sp
   166b4:	|      move.l d0,1e7da <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   166ba:	|      movea.l 1e910 <frozenStuff>,a0
   166c0:	|      move.l 56(a0),d0
   166c4:	|      move.l d0,1e1a2 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   166ca:	|      move.l 1e7d6 <input+0xa>,d0
   166d0:	|      move.l d0,-(sp)
   166d2:	|      jsr 18936 <__floatsisf>
   166d8:	|      addq.l #4,sp
   166da:	|      move.l d0,d1
   166dc:	|      move.l 1e1a2 <cameraZoom>,d0
   166e2:	|      move.l d0,-(sp)
   166e4:	|      move.l d1,-(sp)
   166e6:	|      jsr 187ec <__divsf3>
   166ec:	|      addq.l #8,sp
   166ee:	|      move.l d0,-(sp)
   166f0:	|      jsr 188ce <__fixsfsi>
   166f6:	|      addq.l #4,sp
   166f8:	|      move.l d0,1e7d6 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   166fe:	|      move.l 1e7da <input+0xe>,d0
   16704:	|      move.l d0,-(sp)
   16706:	|      jsr 18936 <__floatsisf>
   1670c:	|      addq.l #4,sp
   1670e:	|      move.l d0,d1
   16710:	|      move.l 1e1a2 <cameraZoom>,d0
   16716:	|      move.l d0,-(sp)
   16718:	|      move.l d1,-(sp)
   1671a:	|      jsr 187ec <__divsf3>
   16720:	|      addq.l #8,sp
   16722:	|      move.l d0,-(sp)
   16724:	|      jsr 188ce <__fixsfsi>
   1672a:	|      addq.l #4,sp
   1672c:	|      move.l d0,1e7da <input+0xe>

	killAllPeople ();
   16732:	|      jsr b3b2 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   16738:	|      movea.l 1e910 <frozenStuff>,a0
   1673e:	|      move.l (a0),d0
   16740:	|      move.l d0,1e880 <allPeople>

	killAllRegions ();
   16746:	|      jsr 16d14 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   1674c:	|      movea.l 1e910 <frozenStuff>,a0
   16752:	|      move.l 4(a0),d0
   16756:	|      move.l d0,1e92c <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   1675c:	|      move.l 1e712 <mouseCursorAnim>,d0
   16762:	|      move.l d0,-(sp)
   16764:	|      jsr a27c <deleteAnim>
   1676a:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   1676c:	|      movea.l 1e910 <frozenStuff>,a0
   16772:	|      move.l 32(a0),d0
   16776:	|      move.l d0,1e712 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   1677c:	|      movea.l 1e910 <frozenStuff>,a0
   16782:	|      move.l 36(a0),d0
   16786:	|      move.l d0,1e716 <mouseCursorFrameNum>

	killZBuffer ();
   1678c:	|      jsr 9008 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   16792:	|      movea.l 1e910 <frozenStuff>,a0
   16798:	|      move.l 60(a0),d0
   1679c:	|      move.l d0,1e87c <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   167a2:	|      move.l 1e180 <currentEvents>,d0
   167a8:	|  ,-- beq.s 167c2 <unfreeze+0x1ce>
   167aa:	|  |   move.l 1e180 <currentEvents>,12(sp)
   167b2:	|  |   move.l 1e81c <SysBase>,d0
   167b8:	|  |   movea.l d0,a6
   167ba:	|  |   movea.l 12(sp),a1
   167be:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   167c2:	|  '-> movea.l 1e910 <frozenStuff>,a0
   167c8:	|      move.l 28(a0),d0
   167cc:	|      move.l d0,1e180 <currentEvents>

	killAllSpeech ();
   167d2:	|      jsr 44c0 <killAllSpeech>
	if (speech) FreeVec(speech);
   167d8:	|      move.l 1e75e <speech>,d0
   167de:	|  ,-- beq.s 167f8 <unfreeze+0x204>
   167e0:	|  |   move.l 1e75e <speech>,8(sp)
   167e8:	|  |   move.l 1e81c <SysBase>,d0
   167ee:	|  |   movea.l d0,a6
   167f0:	|  |   movea.l 8(sp),a1
   167f4:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   167f8:	|  '-> movea.l 1e910 <frozenStuff>,a0
   167fe:	|      move.l 20(a0),d0
   16802:	|      move.l d0,1e75e <speech>

	frozenStuff = frozenStuff -> next;
   16808:	|      movea.l 1e910 <frozenStuff>,a0
   1680e:	|      move.l 64(a0),d0
   16812:	|      move.l d0,1e910 <frozenStuff>

	overRegion = NULL;
   16818:	|      clr.l 1e930 <overRegion>
	if (killMe) FreeVec(killMe);
   1681e:	|      tst.l 16(sp)
   16822:	|  ,-- beq.s 1683a <unfreeze+0x246>
   16824:	|  |   move.l 16(sp),4(sp)
   1682a:	|  |   move.l 1e81c <SysBase>,d0
   16830:	|  |   movea.l d0,a6
   16832:	|  |   movea.l 4(sp),a1
   16836:	|  |   jsr -690(a6)
	killMe = NULL;
   1683a:	|  '-> clr.l 16(sp)
   1683e:	|  ,-- bra.s 16842 <unfreeze+0x24e>
	if (! frozenStuff) return;
   16840:	'--|-> nop
}
   16842:	   '-> movea.l (sp)+,a6
   16844:	       lea 16(sp),sp
   16848:	       rts

0001684a <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   1684a:	pea 1beb1 <talk.c.490538ff+0x823>
   16850:	jsr 18504 <KPrintF>
   16856:	addq.l #4,sp
	return FALSE;
   16858:	clr.w d0
}
   1685a:	rts

0001685c <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   1685c:	          lea -32(sp),sp
   16860:	          move.l a6,-(sp)
   16862:	          move.l d2,-(sp)
	unsigned int a = 0;
   16864:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   16868:	          move.l 1e91c <fontOrderString>,d0
   1686e:	      ,-- beq.s 16888 <loadFont+0x2c>
   16870:	      |   move.l 1e91c <fontOrderString>,24(sp)
   16878:	      |   move.l 1e81c <SysBase>,d0
   1687e:	      |   movea.l d0,a6
   16880:	      |   movea.l 24(sp),a1
   16884:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   16888:	      '-> move.l 48(sp),-(sp)
   1688c:	          jsr b8 <copyString>
   16892:	          addq.l #4,sp
   16894:	          move.l d0,1e91c <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   1689a:	          move.l 1e928 <theFont>,d0
   168a0:	      ,-- beq.s 168b2 <loadFont+0x56>
   168a2:	      |   move.l 1e928 <theFont>,d0
   168a8:	      |   move.l d0,-(sp)
   168aa:	      |   jsr 9360 <forgetSpriteBank>
   168b0:	      |   addq.l #4,sp
	theFont = NULL;
   168b2:	      '-> clr.l 1e928 <theFont>

	loadedFontNum = filenum;
   168b8:	          move.l 44(sp),1e918 <loadedFontNum>

	fontTableSize = 0;
   168c0:	          clr.l 1e924 <fontTableSize>
	char *tmp = charOrder;
   168c6:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   168cc:	   ,----- bra.s 16908 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   168ce:	,--|----> movea.l 32(sp),a0
   168d2:	|  |      move.b (a0),d0
   168d4:	|  |      ext.w d0
   168d6:	|  |      movea.w d0,a0
   168d8:	|  |      move.l 1e924 <fontTableSize>,d0
   168de:	|  |      move.l d0,d0
   168e0:	|  |      move.b d0,d0
   168e2:	|  |      andi.l #255,d0
   168e8:	|  |      cmp.l a0,d0
   168ea:	|  |  ,-- bge.s 168fc <loadFont+0xa0>
   168ec:	|  |  |   movea.l 32(sp),a0
   168f0:	|  |  |   move.b (a0),d0
   168f2:	|  |  |   ext.w d0
   168f4:	|  |  |   movea.w d0,a0
   168f6:	|  |  |   move.l a0,1e924 <fontTableSize>
		*tmp++;
   168fc:	|  |  '-> move.l 32(sp),d0
   16900:	|  |      move.l d0,d1
   16902:	|  |      addq.l #1,d1
   16904:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   16908:	|  '----> movea.l 32(sp),a0
   1690c:	|         move.b (a0),d0
   1690e:	'-------- bne.s 168ce <loadFont+0x72>
	}
	fontTableSize++;
   16910:	          move.l 1e924 <fontTableSize>,d0
   16916:	          addq.l #1,d0
   16918:	          move.l d0,1e924 <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   1691e:	          move.l 1e920 <fontTable>,d0
   16924:	      ,-- beq.s 1693e <loadFont+0xe2>
   16926:	      |   move.l 1e920 <fontTable>,20(sp)
   1692e:	      |   move.l 1e81c <SysBase>,d0
   16934:	      |   movea.l d0,a6
   16936:	      |   movea.l 20(sp),a1
   1693a:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   1693e:	      '-> move.l 1e924 <fontTableSize>,d0
   16944:	          add.l d0,d0
   16946:	          add.l d0,d0
   16948:	          move.l d0,16(sp)
   1694c:	          clr.l 12(sp)
   16950:	          move.l 1e81c <SysBase>,d0
   16956:	          movea.l d0,a6
   16958:	          move.l 16(sp),d0
   1695c:	          move.l 12(sp),d1
   16960:	          jsr -684(a6)
   16964:	          move.l d0,8(sp)
   16968:	          move.l 8(sp),d0
   1696c:	          move.l d0,1e920 <fontTable>
	if (!fontTable) return FALSE;
   16972:	          move.l 1e920 <fontTable>,d0
   16978:	      ,-- bne.s 16980 <loadFont+0x124>
   1697a:	      |   clr.w d0
   1697c:	,-----|-- bra.w 16a26 <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   16980:	|     '-> clr.l 36(sp)
   16984:	|     ,-- bra.s 1699e <loadFont+0x142>
		fontTable[a] = 0;
   16986:	|  ,--|-> move.l 1e920 <fontTable>,d1
   1698c:	|  |  |   move.l 36(sp),d0
   16990:	|  |  |   add.l d0,d0
   16992:	|  |  |   add.l d0,d0
   16994:	|  |  |   movea.l d1,a0
   16996:	|  |  |   adda.l d0,a0
   16998:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   1699a:	|  |  |   addq.l #1,36(sp)
   1699e:	|  |  '-> move.l 1e924 <fontTableSize>,d0
   169a4:	|  |      cmp.l 36(sp),d0
   169a8:	|  '----- bhi.s 16986 <loadFont+0x12a>
	}
	a = 0;
   169aa:	|         clr.l 36(sp)
	int i = 0;
   169ae:	|         clr.l 28(sp)
	tmp = charOrder;
   169b2:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   169b8:	|     ,-- bra.s 169e8 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   169ba:	|  ,--|-> move.l 1e920 <fontTable>,d1
   169c0:	|  |  |   move.l 32(sp),d0
   169c4:	|  |  |   move.l d0,d2
   169c6:	|  |  |   addq.l #1,d2
   169c8:	|  |  |   move.l d2,32(sp)
   169cc:	|  |  |   movea.l d0,a0
   169ce:	|  |  |   move.b (a0),d0
   169d0:	|  |  |   ext.w d0
   169d2:	|  |  |   movea.w d0,a0
   169d4:	|  |  |   move.l a0,d0
   169d6:	|  |  |   add.l a0,d0
   169d8:	|  |  |   add.l d0,d0
   169da:	|  |  |   movea.l d1,a0
   169dc:	|  |  |   adda.l d0,a0
   169de:	|  |  |   move.l 28(sp),d0
   169e2:	|  |  |   move.l d0,(a0)
		i++;
   169e4:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   169e8:	|  |  '-> movea.l 32(sp),a0
   169ec:	|  |      move.b (a0),d0
   169ee:	|  '----- bne.s 169ba <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   169f0:	|         move.l 44(sp),-(sp)
   169f4:	|         jsr 17226 <loadBankForAnim>
   169fa:	|         addq.l #4,sp
   169fc:	|         move.l d0,1e928 <theFont>
	if (!theFont) {
   16a02:	|         move.l 1e928 <theFont>,d0
   16a08:	|     ,-- bne.s 16a1c <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   16a0a:	|     |   pea 1bed8 <talk.c.490538ff+0x84a>
   16a10:	|     |   jsr 18504 <KPrintF>
   16a16:	|     |   addq.l #4,sp
		return FALSE;
   16a18:	|     |   clr.w d0
   16a1a:	+-----|-- bra.s 16a26 <loadFont+0x1ca>
	}
	fontHeight = h;
   16a1c:	|     '-> move.l 52(sp),1e914 <fontHeight>
	return TRUE;
   16a24:	|         moveq #1,d0
}
   16a26:	'-------> move.l (sp)+,d2
   16a28:	          movea.l (sp)+,a6
   16a2a:	          lea 32(sp),sp
   16a2e:	          rts

00016a30 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   16a30:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   16a34:	                clr.l 4(sp)

    if (!fontTableSize) return;
   16a38:	                move.l 1e924 <fontTableSize>,d0
   16a3e:	,-------------- beq.w 16b06 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   16a42:	|               move.w 1e710 <fontSpace>,d0
   16a48:	|               asr.w #1,d0
   16a4a:	|               ext.l d0
   16a4c:	|               add.l d0,20(sp)
	char *tmp = theText;
   16a50:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   16a56:	|     ,-------- bra.w 16afa <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   16a5a:	|  ,--|-------> movea.l 1e928 <theFont>,a0
   16a60:	|  |  |         movea.l 16(a0),a0
   16a64:	|  |  |         movea.l 8(sp),a1
   16a68:	|  |  |         move.b (a1),d0
   16a6a:	|  |  |         move.b d0,d0
   16a6c:	|  |  |         andi.l #255,d0
   16a72:	|  |  |         move.l 1e924 <fontTableSize>,d1
   16a78:	|  |  |         cmp.l d0,d1
   16a7a:	|  |  |  ,----- bls.s 16aa6 <pasteStringToBackdrop+0x76>
   16a7c:	|  |  |  |      move.l 1e920 <fontTable>,d1
   16a82:	|  |  |  |      movea.l 8(sp),a1
   16a86:	|  |  |  |      move.b (a1),d0
   16a88:	|  |  |  |      move.b d0,d0
   16a8a:	|  |  |  |      andi.l #255,d0
   16a90:	|  |  |  |      add.l d0,d0
   16a92:	|  |  |  |      add.l d0,d0
   16a94:	|  |  |  |      movea.l d1,a1
   16a96:	|  |  |  |      adda.l d0,a1
   16a98:	|  |  |  |      move.l (a1),d1
   16a9a:	|  |  |  |      move.l d1,d0
   16a9c:	|  |  |  |      lsl.l #3,d0
   16a9e:	|  |  |  |      sub.l d1,d0
   16aa0:	|  |  |  |      add.l d0,d0
   16aa2:	|  |  |  |      add.l d0,d0
   16aa4:	|  |  |  |  ,-- bra.s 16aa8 <pasteStringToBackdrop+0x78>
   16aa6:	|  |  |  '--|-> moveq #0,d0
   16aa8:	|  |  |     '-> adda.l d0,a0
   16aaa:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   16aac:	|  |  |         move.l 24(sp),d1
   16ab0:	|  |  |         movea.l (sp),a0
   16ab2:	|  |  |         move.l 12(a0),d0
   16ab6:	|  |  |         move.l d0,d0
   16ab8:	|  |  |         sub.w d0,d1
   16aba:	|  |  |         move.w d1,d0
   16abc:	|  |  |         movea.w d0,a1
   16abe:	|  |  |         move.l 20(sp),d1
   16ac2:	|  |  |         movea.l (sp),a0
   16ac4:	|  |  |         move.l 8(a0),d0
   16ac8:	|  |  |         move.l d0,d0
   16aca:	|  |  |         sub.w d0,d1
   16acc:	|  |  |         move.w d1,d0
   16ace:	|  |  |         movea.w d0,a0
   16ad0:	|  |  |         move.l a1,-(sp)
   16ad2:	|  |  |         move.l a0,-(sp)
   16ad4:	|  |  |         move.l 8(sp),-(sp)
   16ad8:	|  |  |         jsr 2478 <CstPasteChar>
   16ade:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   16ae2:	|  |  |         movea.l (sp),a0
   16ae4:	|  |  |         move.l (a0),d1
   16ae6:	|  |  |         move.w 1e710 <fontSpace>,d0
   16aec:	|  |  |         movea.w d0,a0
   16aee:	|  |  |         move.l d1,d0
   16af0:	|  |  |         add.l a0,d0
   16af2:	|  |  |         add.l d0,20(sp)
		tmp++;
   16af6:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   16afa:	|  |  '-------> movea.l 8(sp),a0
   16afe:	|  |            move.b (a0),d0
   16b00:	|  '----------- bne.w 16a5a <pasteStringToBackdrop+0x2a>
   16b04:	|           ,-- bra.s 16b08 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   16b06:	'-----------|-> nop
    }
}
   16b08:	            '-> lea 12(sp),sp
   16b0c:	                rts

00016b0e <stringWidth>:


int stringWidth (char * theText) {
   16b0e:	                lea -16(sp),sp
	int a = 0;
   16b12:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   16b16:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   16b1a:	                move.l 1e924 <fontTableSize>,d0
   16b20:	            ,-- bne.s 16b26 <stringWidth+0x18>
   16b22:	            |   moveq #0,d0
   16b24:	,-----------|-- bra.s 16b9a <stringWidth+0x8c>

	char *tmp = theText;
   16b26:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   16b2c:	|     ,-------- bra.s 16b8e <stringWidth+0x80>
        c = *tmp++;
   16b2e:	|  ,--|-------> move.l 8(sp),d0
   16b32:	|  |  |         move.l d0,d1
   16b34:	|  |  |         addq.l #1,d1
   16b36:	|  |  |         move.l d1,8(sp)
   16b3a:	|  |  |         movea.l d0,a0
   16b3c:	|  |  |         move.b (a0),d0
   16b3e:	|  |  |         ext.w d0
   16b40:	|  |  |         movea.w d0,a0
   16b42:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   16b44:	|  |  |         movea.l 1e928 <theFont>,a0
   16b4a:	|  |  |         movea.l 16(a0),a1
   16b4e:	|  |  |         move.l 1e924 <fontTableSize>,d0
   16b54:	|  |  |         cmp.l (sp),d0
   16b56:	|  |  |  ,----- bls.s 16b76 <stringWidth+0x68>
   16b58:	|  |  |  |      move.l 1e920 <fontTable>,d1
   16b5e:	|  |  |  |      move.l (sp),d0
   16b60:	|  |  |  |      add.l d0,d0
   16b62:	|  |  |  |      add.l d0,d0
   16b64:	|  |  |  |      movea.l d1,a0
   16b66:	|  |  |  |      adda.l d0,a0
   16b68:	|  |  |  |      move.l (a0),d1
   16b6a:	|  |  |  |      move.l d1,d0
   16b6c:	|  |  |  |      lsl.l #3,d0
   16b6e:	|  |  |  |      sub.l d1,d0
   16b70:	|  |  |  |      add.l d0,d0
   16b72:	|  |  |  |      add.l d0,d0
   16b74:	|  |  |  |  ,-- bra.s 16b78 <stringWidth+0x6a>
   16b76:	|  |  |  '--|-> moveq #0,d0
   16b78:	|  |  |     '-> lea (0,a1,d0.l),a0
   16b7c:	|  |  |         move.l (a0),d1
   16b7e:	|  |  |         move.w 1e710 <fontSpace>,d0
   16b84:	|  |  |         movea.w d0,a0
   16b86:	|  |  |         move.l d1,d0
   16b88:	|  |  |         add.l a0,d0
   16b8a:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   16b8e:	|  |  '-------> movea.l 8(sp),a0
   16b92:	|  |            move.b (a0),d0
   16b94:	|  '----------- bne.s 16b2e <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   16b96:	|               move.l 12(sp),d0
}
   16b9a:	'-------------> lea 16(sp),sp
   16b9e:	                rts

00016ba0 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   16ba0:	       lea -16(sp),sp
   16ba4:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   16ba6:	       moveq #36,d0
   16ba8:	       move.l d0,16(sp)
   16bac:	       clr.l 12(sp)
   16bb0:	       move.l 1e81c <SysBase>,d0
   16bb6:	       movea.l d0,a6
   16bb8:	       move.l 16(sp),d0
   16bbc:	       move.l 12(sp),d1
   16bc0:	       jsr -684(a6)
   16bc4:	       move.l d0,8(sp)
   16bc8:	       move.l 8(sp),d0
   16bcc:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   16bd0:	   ,-- bne.s 16bd8 <addScreenRegion+0x38>
   16bd2:	   |   clr.w d0
   16bd4:	,--|-- bra.w 16c58 <addScreenRegion+0xb8>
    newRegion->di = di;
   16bd8:	|  '-> movea.l 4(sp),a0
   16bdc:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   16be2:	|      movea.l 4(sp),a0
   16be6:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   16bea:	|      movea.l 4(sp),a0
   16bee:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   16bf4:	|      movea.l 4(sp),a0
   16bf8:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   16bfe:	|      movea.l 4(sp),a0
   16c02:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   16c08:	|      movea.l 4(sp),a0
   16c0c:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   16c12:	|      movea.l 4(sp),a0
   16c16:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   16c1c:	|      move.l 52(sp),-(sp)
   16c20:	|      jsr dffc <loadObjectType>
   16c26:	|      addq.l #4,sp
   16c28:	|      movea.l 4(sp),a0
   16c2c:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   16c30:	|      move.l 1e92c <allScreenRegions>,d0
   16c36:	|      movea.l 4(sp),a0
   16c3a:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   16c3e:	|      move.l 4(sp),1e92c <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   16c46:	|      movea.l 4(sp),a0
   16c4a:	|      move.l 28(a0),d0
   16c4e:	|      sne d0
   16c50:	|      neg.b d0
   16c52:	|      move.b d0,d0
   16c54:	|      andi.w #255,d0
}
   16c58:	'----> movea.l (sp)+,a6
   16c5a:	       lea 16(sp),sp
   16c5e:	       rts

00016c60 <getOverRegion>:

void getOverRegion () {
   16c60:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   16c62:	             move.l 1e92c <allScreenRegions>,(sp)
	while (thisRegion) {
   16c68:	   ,-------- bra.s 16cd6 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   16c6a:	,--|-------> move.l 1e7d6 <input+0xa>,d0
   16c70:	|  |         movea.l (sp),a0
   16c72:	|  |         movea.l (a0),a0
   16c74:	|  |         move.l 1e8d6 <cameraX>,d1
   16c7a:	|  |         suba.l d1,a0
   16c7c:	|  |         cmpa.l d0,a0
   16c7e:	|  |  ,----- bgt.s 16cd0 <getOverRegion+0x70>
   16c80:	|  |  |      move.l 1e7da <input+0xe>,d0
   16c86:	|  |  |      movea.l (sp),a0
   16c88:	|  |  |      movea.l 4(a0),a0
   16c8c:	|  |  |      move.l 1e8da <cameraY>,d1
   16c92:	|  |  |      suba.l d1,a0
   16c94:	|  |  |      cmpa.l d0,a0
   16c96:	|  |  +----- bgt.s 16cd0 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   16c98:	|  |  |      move.l 1e7d6 <input+0xa>,d0
   16c9e:	|  |  |      movea.l (sp),a0
   16ca0:	|  |  |      movea.l 8(a0),a0
   16ca4:	|  |  |      move.l 1e8d6 <cameraX>,d1
   16caa:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   16cac:	|  |  |      cmpa.l d0,a0
   16cae:	|  |  +----- blt.s 16cd0 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   16cb0:	|  |  |      move.l 1e7da <input+0xe>,d0
   16cb6:	|  |  |      movea.l (sp),a0
   16cb8:	|  |  |      movea.l 12(a0),a0
   16cbc:	|  |  |      move.l 1e8da <cameraY>,d1
   16cc2:	|  |  |      suba.l d1,a0
   16cc4:	|  |  |      cmpa.l d0,a0
   16cc6:	|  |  +----- blt.s 16cd0 <getOverRegion+0x70>
			overRegion = thisRegion;
   16cc8:	|  |  |      move.l (sp),1e930 <overRegion>
			return;
   16cce:	|  |  |  ,-- bra.s 16ce2 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   16cd0:	|  |  '--|-> movea.l (sp),a0
   16cd2:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   16cd6:	|  '-----|-> tst.l (sp)
   16cd8:	'--------|-- bne.s 16c6a <getOverRegion+0xa>
	}
	overRegion = NULL;
   16cda:	         |   clr.l 1e930 <overRegion>
	return;
   16ce0:	         |   nop
}
   16ce2:	         '-> addq.l #4,sp
   16ce4:	             rts

00016ce6 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   16ce6:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   16ce8:	             move.l 1e92c <allScreenRegions>,(sp)

	while (thisRegion) {
   16cee:	   ,-------- bra.s 16d0a <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   16cf0:	,--|-------> movea.l (sp),a0
   16cf2:	|  |         movea.l 28(a0),a0
   16cf6:	|  |         move.l 4(a0),d0
   16cfa:	|  |         cmp.l 8(sp),d0
   16cfe:	|  |     ,-- bne.s 16d04 <getRegionForObject+0x1e>
			return thisRegion;
   16d00:	|  |     |   move.l (sp),d0
   16d02:	|  |  ,--|-- bra.s 16d10 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   16d04:	|  |  |  '-> movea.l (sp),a0
   16d06:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   16d0a:	|  '--|----> tst.l (sp)
   16d0c:	'-----|----- bne.s 16cf0 <getRegionForObject+0xa>
	}

	return NULL;
   16d0e:	      |      moveq #0,d0
}
   16d10:	      '----> addq.l #4,sp
   16d12:	             rts

00016d14 <killAllRegions>:

void killAllRegions () {
   16d14:	       subq.l #8,sp
   16d16:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   16d18:	   ,-- bra.s 16d5a <killAllRegions+0x46>
		killRegion = allScreenRegions;
   16d1a:	,--|-> move.l 1e92c <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   16d22:	|  |   movea.l 1e92c <allScreenRegions>,a0
   16d28:	|  |   move.l 32(a0),d0
   16d2c:	|  |   move.l d0,1e92c <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   16d32:	|  |   movea.l 8(sp),a0
   16d36:	|  |   move.l 28(a0),d0
   16d3a:	|  |   move.l d0,-(sp)
   16d3c:	|  |   jsr e2b4 <removeObjectType>
   16d42:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   16d44:	|  |   move.l 8(sp),4(sp)
   16d4a:	|  |   move.l 1e81c <SysBase>,d0
   16d50:	|  |   movea.l d0,a6
   16d52:	|  |   movea.l 4(sp),a1
   16d56:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   16d5a:	|  '-> move.l 1e92c <allScreenRegions>,d0
   16d60:	'----- bne.s 16d1a <killAllRegions+0x6>
	}
	overRegion = NULL;
   16d62:	       clr.l 1e930 <overRegion>
}
   16d68:	       nop
   16d6a:	       movea.l (sp)+,a6
   16d6c:	       addq.l #8,sp
   16d6e:	       rts

00016d70 <loadRegions>:

void loadRegions (BPTR fp) {
   16d70:	       lea -24(sp),sp
   16d74:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   16d76:	       move.l 32(sp),-(sp)
   16d7a:	       jsr 6bc <get2bytes>
   16d80:	       addq.l #4,sp
   16d82:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   16d86:	       move.l #125228,20(sp)

	while (numRegions --) {
   16d8e:	   ,-- bra.w 16e6c <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   16d92:	,--|-> moveq #36,d0
   16d94:	|  |   move.l d0,16(sp)
   16d98:	|  |   clr.l 12(sp)
   16d9c:	|  |   move.l 1e81c <SysBase>,d0
   16da2:	|  |   movea.l d0,a6
   16da4:	|  |   move.l 16(sp),d0
   16da8:	|  |   move.l 12(sp),d1
   16dac:	|  |   jsr -684(a6)
   16db0:	|  |   move.l d0,8(sp)
   16db4:	|  |   move.l 8(sp),d0
   16db8:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   16dbc:	|  |   movea.l 20(sp),a0
   16dc0:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   16dc4:	|  |   moveq #32,d1
   16dc6:	|  |   add.l 4(sp),d1
   16dca:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   16dce:	|  |   move.l 32(sp),-(sp)
   16dd2:	|  |   jsr 6bc <get2bytes>
   16dd8:	|  |   addq.l #4,sp
   16dda:	|  |   movea.l 4(sp),a0
   16dde:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   16de0:	|  |   move.l 32(sp),-(sp)
   16de4:	|  |   jsr 6bc <get2bytes>
   16dea:	|  |   addq.l #4,sp
   16dec:	|  |   movea.l 4(sp),a0
   16df0:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   16df4:	|  |   move.l 32(sp),-(sp)
   16df8:	|  |   jsr 6bc <get2bytes>
   16dfe:	|  |   addq.l #4,sp
   16e00:	|  |   movea.l 4(sp),a0
   16e04:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   16e08:	|  |   move.l 32(sp),-(sp)
   16e0c:	|  |   jsr 6bc <get2bytes>
   16e12:	|  |   addq.l #4,sp
   16e14:	|  |   movea.l 4(sp),a0
   16e18:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   16e1c:	|  |   move.l 32(sp),-(sp)
   16e20:	|  |   jsr 6bc <get2bytes>
   16e26:	|  |   addq.l #4,sp
   16e28:	|  |   movea.l 4(sp),a0
   16e2c:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   16e30:	|  |   move.l 32(sp),-(sp)
   16e34:	|  |   jsr 6bc <get2bytes>
   16e3a:	|  |   addq.l #4,sp
   16e3c:	|  |   movea.l 4(sp),a0
   16e40:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   16e44:	|  |   move.l 32(sp),-(sp)
   16e48:	|  |   jsr 6bc <get2bytes>
   16e4e:	|  |   addq.l #4,sp
   16e50:	|  |   movea.l 4(sp),a0
   16e54:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   16e58:	|  |   move.l 32(sp),-(sp)
   16e5c:	|  |   jsr dfaa <loadObjectRef>
   16e62:	|  |   addq.l #4,sp
   16e64:	|  |   movea.l 4(sp),a0
   16e68:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   16e6c:	|  '-> move.l 24(sp),d0
   16e70:	|      move.l d0,d1
   16e72:	|      subq.l #1,d1
   16e74:	|      move.l d1,24(sp)
   16e78:	|      tst.l d0
   16e7a:	'----- bne.w 16d92 <loadRegions+0x22>
	}
	* pointy = NULL;
   16e7e:	       movea.l 20(sp),a0
   16e82:	       clr.l (a0)
}
   16e84:	       nop
   16e86:	       movea.l (sp)+,a6
   16e88:	       lea 24(sp),sp
   16e8c:	       rts

00016e8e <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   16e8e:	             lea -12(sp),sp
   16e92:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   16e94:	             move.l #125228,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   16e9c:	   ,-------- bra.s 16f16 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   16e9e:	,--|-------> movea.l 12(sp),a0
   16ea2:	|  |         movea.l (a0),a0
   16ea4:	|  |         movea.l 28(a0),a0
   16ea8:	|  |         move.l 4(a0),d0
   16eac:	|  |         cmp.l 20(sp),d0
   16eb0:	|  |  ,----- bne.s 16f08 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   16eb2:	|  |  |      movea.l 12(sp),a0
   16eb6:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   16eba:	|  |  |      movea.l 8(sp),a0
   16ebe:	|  |  |      move.l 32(a0),d0
   16ec2:	|  |  |      movea.l 12(sp),a0
   16ec6:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   16ec8:	|  |  |      movea.l 8(sp),a0
   16ecc:	|  |  |      move.l 28(a0),d0
   16ed0:	|  |  |      move.l d0,-(sp)
   16ed2:	|  |  |      jsr e2b4 <removeObjectType>
   16ed8:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   16eda:	|  |  |      move.l 1e930 <overRegion>,d0
   16ee0:	|  |  |      cmp.l 8(sp),d0
   16ee4:	|  |  |  ,-- bne.s 16eec <removeScreenRegion+0x5e>
   16ee6:	|  |  |  |   clr.l 1e930 <overRegion>
            FreeVec(killMe);
   16eec:	|  |  |  '-> move.l 8(sp),4(sp)
   16ef2:	|  |  |      move.l 1e81c <SysBase>,d0
   16ef8:	|  |  |      movea.l d0,a6
   16efa:	|  |  |      movea.l 4(sp),a1
   16efe:	|  |  |      jsr -690(a6)
            killMe = NULL;
   16f02:	|  |  |      clr.l 8(sp)
   16f06:	|  +--|----- bra.s 16f16 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   16f08:	|  |  '----> movea.l 12(sp),a0
   16f0c:	|  |         move.l (a0),d0
   16f0e:	|  |         moveq #32,d1
   16f10:	|  |         add.l d0,d1
   16f12:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   16f16:	|  '-------> movea.l 12(sp),a0
   16f1a:	|            move.l (a0),d0
   16f1c:	'----------- bne.s 16e9e <removeScreenRegion+0x10>
        }
    }
}
   16f1e:	             nop
   16f20:	             nop
   16f22:	             movea.l (sp)+,a6
   16f24:	             lea 12(sp),sp
   16f28:	             rts

00016f2a <saveRegions>:

void saveRegions (BPTR fp) {
   16f2a:	       subq.l #8,sp
	int numRegions = 0;
   16f2c:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   16f30:	       move.l 1e92c <allScreenRegions>,(sp)
	while (thisRegion) {
   16f36:	   ,-- bra.s 16f42 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   16f38:	,--|-> movea.l (sp),a0
   16f3a:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   16f3e:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   16f42:	|  '-> tst.l (sp)
   16f44:	'----- bne.s 16f38 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   16f46:	       move.l 12(sp),-(sp)
   16f4a:	       move.l 8(sp),-(sp)
   16f4e:	       jsr 8d0 <put2bytes>
   16f54:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   16f56:	       move.l 1e92c <allScreenRegions>,(sp)
	while (thisRegion) {
   16f5c:	,----- bra.w 17004 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   16f60:	|  ,-> movea.l (sp),a0
   16f62:	|  |   move.l (a0),d0
   16f64:	|  |   move.l 12(sp),-(sp)
   16f68:	|  |   move.l d0,-(sp)
   16f6a:	|  |   jsr 8d0 <put2bytes>
   16f70:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   16f72:	|  |   movea.l (sp),a0
   16f74:	|  |   move.l 4(a0),d0
   16f78:	|  |   move.l 12(sp),-(sp)
   16f7c:	|  |   move.l d0,-(sp)
   16f7e:	|  |   jsr 8d0 <put2bytes>
   16f84:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   16f86:	|  |   movea.l (sp),a0
   16f88:	|  |   move.l 8(a0),d0
   16f8c:	|  |   move.l 12(sp),-(sp)
   16f90:	|  |   move.l d0,-(sp)
   16f92:	|  |   jsr 8d0 <put2bytes>
   16f98:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   16f9a:	|  |   movea.l (sp),a0
   16f9c:	|  |   move.l 12(a0),d0
   16fa0:	|  |   move.l 12(sp),-(sp)
   16fa4:	|  |   move.l d0,-(sp)
   16fa6:	|  |   jsr 8d0 <put2bytes>
   16fac:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   16fae:	|  |   movea.l (sp),a0
   16fb0:	|  |   move.l 16(a0),d0
   16fb4:	|  |   move.l 12(sp),-(sp)
   16fb8:	|  |   move.l d0,-(sp)
   16fba:	|  |   jsr 8d0 <put2bytes>
   16fc0:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   16fc2:	|  |   movea.l (sp),a0
   16fc4:	|  |   move.l 20(a0),d0
   16fc8:	|  |   move.l 12(sp),-(sp)
   16fcc:	|  |   move.l d0,-(sp)
   16fce:	|  |   jsr 8d0 <put2bytes>
   16fd4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   16fd6:	|  |   movea.l (sp),a0
   16fd8:	|  |   move.l 24(a0),d0
   16fdc:	|  |   move.l 12(sp),-(sp)
   16fe0:	|  |   move.l d0,-(sp)
   16fe2:	|  |   jsr 8d0 <put2bytes>
   16fe8:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   16fea:	|  |   movea.l (sp),a0
   16fec:	|  |   move.l 28(a0),d0
   16ff0:	|  |   move.l 12(sp),-(sp)
   16ff4:	|  |   move.l d0,-(sp)
   16ff6:	|  |   jsr e354 <saveObjectRef>
   16ffc:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   16ffe:	|  |   movea.l (sp),a0
   17000:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   17004:	'--|-> tst.l (sp)
   17006:	   '-- bne.w 16f60 <saveRegions+0x36>
	}
}
   1700a:	       nop
   1700c:	       nop
   1700e:	       addq.l #8,sp
   17010:	       rts

00017012 <showBoxes>:

void showBoxes () {
   17012:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   17014:	       move.l 1e92c <allScreenRegions>,(sp)

	while (huntRegion) {
   1701a:	,----- bra.w 170b6 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   1701e:	|  ,-> movea.l (sp),a0
   17020:	|  |   move.l 12(a0),d0
   17024:	|  |   movea.l d0,a1
   17026:	|  |   movea.l (sp),a0
   17028:	|  |   move.l 4(a0),d0
   1702c:	|  |   move.l d0,d1
   1702e:	|  |   movea.l (sp),a0
   17030:	|  |   move.l (a0),d0
   17032:	|  |   move.l a1,-(sp)
   17034:	|  |   move.l d1,-(sp)
   17036:	|  |   move.l d0,-(sp)
   17038:	|  |   jsr dc38 <drawVerticalLine>
   1703e:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   17042:	|  |   movea.l (sp),a0
   17044:	|  |   move.l 12(a0),d0
   17048:	|  |   movea.l d0,a1
   1704a:	|  |   movea.l (sp),a0
   1704c:	|  |   move.l 4(a0),d0
   17050:	|  |   move.l d0,d1
   17052:	|  |   movea.l (sp),a0
   17054:	|  |   move.l 8(a0),d0
   17058:	|  |   move.l a1,-(sp)
   1705a:	|  |   move.l d1,-(sp)
   1705c:	|  |   move.l d0,-(sp)
   1705e:	|  |   jsr dc38 <drawVerticalLine>
   17064:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   17068:	|  |   movea.l (sp),a0
   1706a:	|  |   move.l 8(a0),d0
   1706e:	|  |   movea.l d0,a1
   17070:	|  |   movea.l (sp),a0
   17072:	|  |   move.l 4(a0),d0
   17076:	|  |   move.l d0,d1
   17078:	|  |   movea.l (sp),a0
   1707a:	|  |   move.l (a0),d0
   1707c:	|  |   move.l a1,-(sp)
   1707e:	|  |   move.l d1,-(sp)
   17080:	|  |   move.l d0,-(sp)
   17082:	|  |   jsr dc12 <drawHorizontalLine>
   17088:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   1708c:	|  |   movea.l (sp),a0
   1708e:	|  |   move.l 8(a0),d0
   17092:	|  |   movea.l d0,a1
   17094:	|  |   movea.l (sp),a0
   17096:	|  |   move.l 12(a0),d0
   1709a:	|  |   move.l d0,d1
   1709c:	|  |   movea.l (sp),a0
   1709e:	|  |   move.l (a0),d0
   170a0:	|  |   move.l a1,-(sp)
   170a2:	|  |   move.l d1,-(sp)
   170a4:	|  |   move.l d0,-(sp)
   170a6:	|  |   jsr dc12 <drawHorizontalLine>
   170ac:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   170b0:	|  |   movea.l (sp),a0
   170b2:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   170b6:	'--|-> tst.l (sp)
   170b8:	   '-- bne.w 1701e <showBoxes+0xc>
	}
   170bc:	       nop
   170be:	       nop
   170c0:	       addq.l #4,sp
   170c2:	       rts

000170c4 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   170c4:	       lea -88(sp),sp
   170c8:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   170ca:	       move.l 1e81c <SysBase>,d0
   170d0:	       movea.l d0,a6
   170d2:	       jsr -666(a6)
   170d6:	       move.l d0,88(sp)
   170da:	       move.l 88(sp),d0
   170de:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   170e2:	       move.l 84(sp),80(sp)
   170e8:	       moveq #40,d0
   170ea:	       move.l d0,76(sp)
   170ee:	       move.l 1e81c <SysBase>,d0
   170f4:	       movea.l d0,a6
   170f6:	       movea.l 80(sp),a0
   170fa:	       move.l 76(sp),d0
   170fe:	       jsr -654(a6)
   17102:	       move.l d0,72(sp)
   17106:	       move.l 72(sp),d0
   1710a:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   1710e:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   17114:	       move.l #114418,60(sp)
   1711c:	       clr.l 56(sp)
   17120:	       move.l 64(sp),52(sp)
   17126:	       clr.l 48(sp)
   1712a:	       move.l 1e81c <SysBase>,d0
   17130:	       movea.l d0,a6
   17132:	       movea.l 60(sp),a0
   17136:	       move.l 56(sp),d0
   1713a:	       movea.l 52(sp),a1
   1713e:	       move.l 48(sp),d1
   17142:	       jsr -444(a6)
   17146:	       move.b d0,47(sp)
   1714a:	       move.b 47(sp),d0
   1714e:	   ,-- beq.s 17164 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   17150:	   |   pea 1beff <talk.c.490538ff+0x871>
   17156:	   |   jsr 18504 <KPrintF>
   1715c:	   |   addq.l #4,sp
        return 0;
   1715e:	   |   moveq #0,d0
   17160:	,--|-- bra.w 1721e <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   17164:	|  '-> movea.l 64(sp),a0
   17168:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   1716e:	|      lea 92(sp),a0
   17172:	|      lea -86(a0),a0
   17176:	|      move.l a0,38(sp)
   1717a:	|      movea.l 42(sp),a6
   1717e:	|      movea.l 38(sp),a0
   17182:	|      jsr -60(a6)
   17186:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   1718a:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   17190:	|      move.l #1103515245,-(sp)
   17196:	|      move.l 34(sp),-(sp)
   1719a:	|      jsr 18e90 <__mulsi3>
   171a0:	|      addq.l #8,sp
   171a2:	|      addi.l #12345,d0
   171a8:	|      move.l d0,d1
   171aa:	|      bclr #31,d1
   171ae:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   171b2:	|      move.l 30(sp),d0
   171b6:	|      pea 64 <_start+0x64>
   171ba:	|      move.l d0,-(sp)
   171bc:	|      jsr 18f6a <__umodsi3>
   171c2:	|      addq.l #8,sp
   171c4:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   171c8:	|      move.l 26(sp),-(sp)
   171cc:	|      pea 1bf1c <talk.c.490538ff+0x88e>
   171d2:	|      jsr 18504 <KPrintF>
   171d8:	|      addq.l #8,sp

    CloseDevice(ioreq);
   171da:	|      move.l 64(sp),22(sp)
   171e0:	|      move.l 1e81c <SysBase>,d0
   171e6:	|      movea.l d0,a6
   171e8:	|      movea.l 22(sp),a1
   171ec:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   171f0:	|      move.l 64(sp),18(sp)
   171f6:	|      move.l 1e81c <SysBase>,d0
   171fc:	|      movea.l d0,a6
   171fe:	|      movea.l 18(sp),a0
   17202:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   17206:	|      move.l 84(sp),14(sp)
   1720c:	|      move.l 1e81c <SysBase>,d0
   17212:	|      movea.l d0,a6
   17214:	|      movea.l 14(sp),a0
   17218:	|      jsr -672(a6)
    return 0;
   1721c:	|      moveq #0,d0
   1721e:	'----> movea.l (sp)+,a6
   17220:	       lea 88(sp),sp
   17224:	       rts

00017226 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   17226:	             lea -20(sp),sp
   1722a:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   1722c:	             move.l 1e934 <allLoadedBanks>,20(sp)
	while (returnMe) {
   17234:	      ,----- bra.s 17266 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   17236:	   ,--|----> movea.l 20(sp),a0
   1723a:	   |  |      move.l (a0),d0
   1723c:	   |  |      cmp.l 28(sp),d0
   17240:	   |  |  ,-- bne.s 1725c <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   17242:	   |  |  |   movea.l 20(sp),a0
   17246:	   |  |  |   move.l 4(a0),d0
   1724a:	   |  |  |   addq.l #1,d0
   1724c:	   |  |  |   movea.l 20(sp),a0
   17250:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   17254:	   |  |  |   move.l 20(sp),d0
   17258:	,--|--|--|-- bra.w 172fa <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   1725c:	|  |  |  '-> movea.l 20(sp),a0
   17260:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   17266:	|  |  '----> tst.l 20(sp)
   1726a:	|  '-------- bne.s 17236 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   1726c:	|            moveq #26,d0
   1726e:	|            move.l d0,16(sp)
   17272:	|            clr.l 12(sp)
   17276:	|            move.l 1e81c <SysBase>,d0
   1727c:	|            movea.l d0,a6
   1727e:	|            move.l 16(sp),d0
   17282:	|            move.l 12(sp),d1
   17286:	|            jsr -684(a6)
   1728a:	|            move.l d0,8(sp)
   1728e:	|            move.l 8(sp),d0
   17292:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   17296:	|     ,----- beq.s 172f8 <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   17298:	|     |      movea.l 20(sp),a0
   1729c:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   172a0:	|     |      move.l 20(sp),d0
   172a4:	|     |      addq.l #8,d0
   172a6:	|     |      move.l d0,-(sp)
   172a8:	|     |      move.l 32(sp),-(sp)
   172ac:	|     |      jsr 946c <loadSpriteBank>
   172b2:	|     |      addq.l #8,sp
   172b4:	|     |      tst.w d0
   172b6:	|     |  ,-- beq.s 172de <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   172b8:	|     |  |   movea.l 20(sp),a0
   172bc:	|     |  |   moveq #1,d0
   172be:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   172c2:	|     |  |   move.l 1e934 <allLoadedBanks>,d0
   172c8:	|     |  |   movea.l 20(sp),a0
   172cc:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   172d0:	|     |  |   move.l 20(sp),1e934 <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   172d8:	|     |  |   move.l 20(sp),d0
   172dc:	+-----|--|-- bra.s 172fa <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   172de:	|     |  '-> move.l 20(sp),4(sp)
   172e4:	|     |      move.l 1e81c <SysBase>,d0
   172ea:	|     |      movea.l d0,a6
   172ec:	|     |      movea.l 4(sp),a1
   172f0:	|     |      jsr -690(a6)
			return NULL;
   172f4:	|     |      moveq #0,d0
   172f6:	+-----|----- bra.s 172fa <loadBankForAnim+0xd4>
		}
	} else return NULL;
   172f8:	|     '----> moveq #0,d0
}
   172fa:	'----------> movea.l (sp)+,a6
   172fc:	             lea 20(sp),sp
   17300:	             rts

00017302 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   17302:	       lea -60(sp),sp
   17306:	       move.l d3,-(sp)
   17308:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   1730a:	       move.l 88(sp),d0
   1730e:	       sub.l 80(sp),d0
   17312:	       move.l d0,-(sp)
   17314:	       jsr 188f6 <__floatsidf>
   1731a:	       addq.l #4,sp
   1731c:	       move.l d0,32(sp)
   17320:	       move.l d1,36(sp)
   17324:	       move.l 32(sp),60(sp)
   1732a:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   17330:	       move.l 92(sp),d0
   17334:	       sub.l 84(sp),d0
   17338:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   1733c:	       move.l 96(sp),d0
   17340:	       sub.l 80(sp),d0
   17344:	       move.l d0,-(sp)
   17346:	       jsr 188f6 <__floatsidf>
   1734c:	       addq.l #4,sp
   1734e:	       move.l 64(sp),-(sp)
   17352:	       move.l 64(sp),-(sp)
   17356:	       move.l d1,-(sp)
   17358:	       move.l d0,-(sp)
   1735a:	       jsr 18986 <__muldf3>
   17360:	       lea 16(sp),sp
   17364:	       move.l d0,d2
   17366:	       move.l d1,d3
   17368:	       move.l 100(sp),d0
   1736c:	       sub.l 84(sp),d0
   17370:	       move.l 56(sp),-(sp)
   17374:	       move.l d0,-(sp)
   17376:	       jsr 18e90 <__mulsi3>
   1737c:	       addq.l #8,sp
   1737e:	       move.l d0,-(sp)
   17380:	       jsr 188f6 <__floatsidf>
   17386:	       addq.l #4,sp
   17388:	       move.l d1,-(sp)
   1738a:	       move.l d0,-(sp)
   1738c:	       move.l d3,-(sp)
   1738e:	       move.l d2,-(sp)
   17390:	       jsr 18728 <__adddf3>
   17396:	       lea 16(sp),sp
   1739a:	       move.l d0,24(sp)
   1739e:	       move.l d1,28(sp)
   173a2:	       move.l 24(sp),48(sp)
   173a8:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   173ae:	       move.l 64(sp),-(sp)
   173b2:	       move.l 64(sp),-(sp)
   173b6:	       move.l 72(sp),-(sp)
   173ba:	       move.l 72(sp),-(sp)
   173be:	       jsr 18986 <__muldf3>
   173c4:	       lea 16(sp),sp
   173c8:	       move.l d0,d2
   173ca:	       move.l d1,d3
   173cc:	       move.l 56(sp),-(sp)
   173d0:	       move.l 60(sp),-(sp)
   173d4:	       jsr 18e90 <__mulsi3>
   173da:	       addq.l #8,sp
   173dc:	       move.l d0,-(sp)
   173de:	       jsr 188f6 <__floatsidf>
   173e4:	       addq.l #4,sp
   173e6:	       move.l d1,-(sp)
   173e8:	       move.l d0,-(sp)
   173ea:	       move.l d3,-(sp)
   173ec:	       move.l d2,-(sp)
   173ee:	       jsr 18728 <__adddf3>
   173f4:	       lea 16(sp),sp
   173f8:	       move.l d1,-(sp)
   173fa:	       move.l d0,-(sp)
   173fc:	       move.l 60(sp),-(sp)
   17400:	       move.l 60(sp),-(sp)
   17404:	       jsr 1878a <__divdf3>
   1740a:	       lea 16(sp),sp
   1740e:	       move.l d0,16(sp)
   17412:	       move.l d1,20(sp)
   17416:	       move.l 16(sp),48(sp)
   1741c:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   17422:	       clr.l -(sp)
   17424:	       clr.l -(sp)
   17426:	       move.l 60(sp),-(sp)
   1742a:	       move.l 60(sp),-(sp)
   1742e:	       jsr 18b0e <__ltdf2>
   17434:	       lea 16(sp),sp
   17438:	       tst.l d0
   1743a:	   ,-- bge.s 17450 <closestPointOnLine+0x14e>
		*closestX = x1;
   1743c:	   |   movea.l 72(sp),a0
   17440:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   17444:	   |   movea.l 76(sp),a0
   17448:	   |   move.l 84(sp),(a0)
   1744c:	,--|-- bra.w 1751e <closestPointOnLine+0x21c>
	} else if (m > 1) {
   17450:	|  '-> clr.l -(sp)
   17452:	|      move.l #1072693248,-(sp)
   17458:	|      move.l 60(sp),-(sp)
   1745c:	|      move.l 60(sp),-(sp)
   17460:	|      jsr 18a54 <__gtdf2>
   17466:	|      lea 16(sp),sp
   1746a:	|      tst.l d0
   1746c:	|  ,-- ble.s 17482 <closestPointOnLine+0x180>
		*closestX = x2;
   1746e:	|  |   movea.l 72(sp),a0
   17472:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   17476:	|  |   movea.l 76(sp),a0
   1747a:	|  |   move.l 92(sp),(a0)
   1747e:	+--|-- bra.w 1751e <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   17482:	|  '-> move.l 64(sp),-(sp)
   17486:	|      move.l 64(sp),-(sp)
   1748a:	|      move.l 60(sp),-(sp)
   1748e:	|      move.l 60(sp),-(sp)
   17492:	|      jsr 18986 <__muldf3>
   17498:	|      lea 16(sp),sp
   1749c:	|      move.l d0,8(sp)
   174a0:	|      move.l d1,12(sp)
   174a4:	|      move.l 8(sp),40(sp)
   174aa:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   174b0:	|      move.l 44(sp),-(sp)
   174b4:	|      move.l 44(sp),-(sp)
   174b8:	|      jsr 18898 <__fixdfsi>
   174be:	|      addq.l #8,sp
   174c0:	|      movea.l 72(sp),a0
   174c4:	|      move.l d0,(a0)
		*closestX += x1;
   174c6:	|      movea.l 72(sp),a0
   174ca:	|      move.l (a0),d0
   174cc:	|      add.l 80(sp),d0
   174d0:	|      movea.l 72(sp),a0
   174d4:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   174d6:	|      move.l 56(sp),-(sp)
   174da:	|      jsr 188f6 <__floatsidf>
   174e0:	|      addq.l #4,sp
   174e2:	|      move.l 52(sp),-(sp)
   174e6:	|      move.l 52(sp),-(sp)
   174ea:	|      move.l d1,-(sp)
   174ec:	|      move.l d0,-(sp)
   174ee:	|      jsr 18986 <__muldf3>
   174f4:	|      lea 16(sp),sp
   174f8:	|      move.l d1,-(sp)
   174fa:	|      move.l d0,-(sp)
   174fc:	|      jsr 18898 <__fixdfsi>
   17502:	|      addq.l #8,sp
   17504:	|      movea.l 76(sp),a0
   17508:	|      move.l d0,(a0)
		*closestY += y1;
   1750a:	|      movea.l 76(sp),a0
   1750e:	|      move.l (a0),d0
   17510:	|      add.l 84(sp),d0
   17514:	|      movea.l 76(sp),a0
   17518:	|      move.l d0,(a0)
		return TRUE;
   1751a:	|      moveq #1,d0
   1751c:	|  ,-- bra.s 17520 <closestPointOnLine+0x21e>
	}
	return FALSE;
   1751e:	'--|-> clr.w d0
}
   17520:	   '-> move.l (sp)+,d2
   17522:	       move.l (sp)+,d3
   17524:	       lea 60(sp),sp
   17528:	       rts

0001752a <drawFloor>:

void drawFloor() {
   1752a:	                lea -12(sp),sp
   1752e:	                move.l d3,-(sp)
   17530:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   17532:	                clr.l 16(sp)
   17536:	   ,----------- bra.w 1774a <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   1753a:	,--|----------> movea.l 1e938 <currentFloor>,a0
   17540:	|  |            move.l 12(a0),d1
   17544:	|  |            move.l 16(sp),d0
   17548:	|  |            lsl.l #3,d0
   1754a:	|  |            movea.l d1,a0
   1754c:	|  |            adda.l d0,a0
   1754e:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   17552:	|  |            moveq #1,d0
   17554:	|  |            cmp.l 8(sp),d0
   17558:	|  |  ,-------- bge.w 17746 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   1755c:	|  |  |         moveq #1,d0
   1755e:	|  |  |         move.l d0,12(sp)
   17562:	|  |  |     ,-- bra.w 1765c <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   17566:	|  |  |  ,--|-> movea.l 1e938 <currentFloor>,a0
   1756c:	|  |  |  |  |   move.l 4(a0),d1
   17570:	|  |  |  |  |   movea.l 1e938 <currentFloor>,a0
   17576:	|  |  |  |  |   movea.l 12(a0),a0
   1757a:	|  |  |  |  |   move.l 16(sp),d0
   1757e:	|  |  |  |  |   lsl.l #3,d0
   17580:	|  |  |  |  |   adda.l d0,a0
   17582:	|  |  |  |  |   movea.l 4(a0),a0
   17586:	|  |  |  |  |   move.l 12(sp),d0
   1758a:	|  |  |  |  |   add.l d0,d0
   1758c:	|  |  |  |  |   add.l d0,d0
   1758e:	|  |  |  |  |   adda.l d0,a0
   17590:	|  |  |  |  |   move.l (a0),d0
   17592:	|  |  |  |  |   lsl.l #3,d0
   17594:	|  |  |  |  |   movea.l d1,a0
   17596:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   17598:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   1759c:	|  |  |  |  |   movea.l 1e938 <currentFloor>,a0
   175a2:	|  |  |  |  |   move.l 4(a0),d1
   175a6:	|  |  |  |  |   movea.l 1e938 <currentFloor>,a0
   175ac:	|  |  |  |  |   movea.l 12(a0),a0
   175b0:	|  |  |  |  |   move.l 16(sp),d0
   175b4:	|  |  |  |  |   lsl.l #3,d0
   175b6:	|  |  |  |  |   adda.l d0,a0
   175b8:	|  |  |  |  |   movea.l 4(a0),a0
   175bc:	|  |  |  |  |   move.l 12(sp),d0
   175c0:	|  |  |  |  |   add.l d0,d0
   175c2:	|  |  |  |  |   add.l d0,d0
   175c4:	|  |  |  |  |   adda.l d0,a0
   175c6:	|  |  |  |  |   move.l (a0),d0
   175c8:	|  |  |  |  |   lsl.l #3,d0
   175ca:	|  |  |  |  |   movea.l d1,a0
   175cc:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   175ce:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   175d0:	|  |  |  |  |   movea.l 1e938 <currentFloor>,a0
   175d6:	|  |  |  |  |   move.l 4(a0),d1
   175da:	|  |  |  |  |   movea.l 1e938 <currentFloor>,a0
   175e0:	|  |  |  |  |   movea.l 12(a0),a0
   175e4:	|  |  |  |  |   move.l 16(sp),d0
   175e8:	|  |  |  |  |   lsl.l #3,d0
   175ea:	|  |  |  |  |   adda.l d0,a0
   175ec:	|  |  |  |  |   movea.l 4(a0),a0
   175f0:	|  |  |  |  |   move.l 12(sp),d0
   175f4:	|  |  |  |  |   addi.l #1073741823,d0
   175fa:	|  |  |  |  |   add.l d0,d0
   175fc:	|  |  |  |  |   add.l d0,d0
   175fe:	|  |  |  |  |   adda.l d0,a0
   17600:	|  |  |  |  |   move.l (a0),d0
   17602:	|  |  |  |  |   lsl.l #3,d0
   17604:	|  |  |  |  |   movea.l d1,a0
   17606:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   17608:	|  |  |  |  |   move.l 4(a0),d1
   1760c:	|  |  |  |  |   movea.l 1e938 <currentFloor>,a0
   17612:	|  |  |  |  |   move.l 4(a0),d3
   17616:	|  |  |  |  |   movea.l 1e938 <currentFloor>,a0
   1761c:	|  |  |  |  |   movea.l 12(a0),a0
   17620:	|  |  |  |  |   move.l 16(sp),d0
   17624:	|  |  |  |  |   lsl.l #3,d0
   17626:	|  |  |  |  |   adda.l d0,a0
   17628:	|  |  |  |  |   movea.l 4(a0),a0
   1762c:	|  |  |  |  |   move.l 12(sp),d0
   17630:	|  |  |  |  |   addi.l #1073741823,d0
   17636:	|  |  |  |  |   add.l d0,d0
   17638:	|  |  |  |  |   add.l d0,d0
   1763a:	|  |  |  |  |   adda.l d0,a0
   1763c:	|  |  |  |  |   move.l (a0),d0
   1763e:	|  |  |  |  |   lsl.l #3,d0
   17640:	|  |  |  |  |   movea.l d3,a0
   17642:	|  |  |  |  |   adda.l d0,a0
   17644:	|  |  |  |  |   move.l (a0),d0
   17646:	|  |  |  |  |   move.l d2,-(sp)
   17648:	|  |  |  |  |   move.l a1,-(sp)
   1764a:	|  |  |  |  |   move.l d1,-(sp)
   1764c:	|  |  |  |  |   move.l d0,-(sp)
   1764e:	|  |  |  |  |   jsr 4c9c <drawLine>
   17654:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   17658:	|  |  |  |  |   addq.l #1,12(sp)
   1765c:	|  |  |  |  '-> move.l 12(sp),d0
   17660:	|  |  |  |      cmp.l 8(sp),d0
   17664:	|  |  |  '----- blt.w 17566 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   17668:	|  |  |         movea.l 1e938 <currentFloor>,a0
   1766e:	|  |  |         move.l 4(a0),d1
   17672:	|  |  |         movea.l 1e938 <currentFloor>,a0
   17678:	|  |  |         movea.l 12(a0),a0
   1767c:	|  |  |         move.l 16(sp),d0
   17680:	|  |  |         lsl.l #3,d0
   17682:	|  |  |         adda.l d0,a0
   17684:	|  |  |         movea.l 4(a0),a0
   17688:	|  |  |         move.l 8(sp),d0
   1768c:	|  |  |         addi.l #1073741823,d0
   17692:	|  |  |         add.l d0,d0
   17694:	|  |  |         add.l d0,d0
   17696:	|  |  |         adda.l d0,a0
   17698:	|  |  |         move.l (a0),d0
   1769a:	|  |  |         lsl.l #3,d0
   1769c:	|  |  |         movea.l d1,a0
   1769e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   176a0:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   176a4:	|  |  |         movea.l 1e938 <currentFloor>,a0
   176aa:	|  |  |         move.l 4(a0),d1
   176ae:	|  |  |         movea.l 1e938 <currentFloor>,a0
   176b4:	|  |  |         movea.l 12(a0),a0
   176b8:	|  |  |         move.l 16(sp),d0
   176bc:	|  |  |         lsl.l #3,d0
   176be:	|  |  |         adda.l d0,a0
   176c0:	|  |  |         movea.l 4(a0),a0
   176c4:	|  |  |         move.l 8(sp),d0
   176c8:	|  |  |         addi.l #1073741823,d0
   176ce:	|  |  |         add.l d0,d0
   176d0:	|  |  |         add.l d0,d0
   176d2:	|  |  |         adda.l d0,a0
   176d4:	|  |  |         move.l (a0),d0
   176d6:	|  |  |         lsl.l #3,d0
   176d8:	|  |  |         movea.l d1,a0
   176da:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   176dc:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   176de:	|  |  |         movea.l 1e938 <currentFloor>,a0
   176e4:	|  |  |         move.l 4(a0),d1
   176e8:	|  |  |         movea.l 1e938 <currentFloor>,a0
   176ee:	|  |  |         movea.l 12(a0),a0
   176f2:	|  |  |         move.l 16(sp),d0
   176f6:	|  |  |         lsl.l #3,d0
   176f8:	|  |  |         adda.l d0,a0
   176fa:	|  |  |         movea.l 4(a0),a0
   176fe:	|  |  |         move.l (a0),d0
   17700:	|  |  |         lsl.l #3,d0
   17702:	|  |  |         movea.l d1,a0
   17704:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   17706:	|  |  |         move.l 4(a0),d1
   1770a:	|  |  |         movea.l 1e938 <currentFloor>,a0
   17710:	|  |  |         move.l 4(a0),d3
   17714:	|  |  |         movea.l 1e938 <currentFloor>,a0
   1771a:	|  |  |         movea.l 12(a0),a0
   1771e:	|  |  |         move.l 16(sp),d0
   17722:	|  |  |         lsl.l #3,d0
   17724:	|  |  |         adda.l d0,a0
   17726:	|  |  |         movea.l 4(a0),a0
   1772a:	|  |  |         move.l (a0),d0
   1772c:	|  |  |         lsl.l #3,d0
   1772e:	|  |  |         movea.l d3,a0
   17730:	|  |  |         adda.l d0,a0
   17732:	|  |  |         move.l (a0),d0
   17734:	|  |  |         move.l d2,-(sp)
   17736:	|  |  |         move.l a1,-(sp)
   17738:	|  |  |         move.l d1,-(sp)
   1773a:	|  |  |         move.l d0,-(sp)
   1773c:	|  |  |         jsr 4c9c <drawLine>
   17742:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   17746:	|  |  '-------> addq.l #1,16(sp)
   1774a:	|  '----------> movea.l 1e938 <currentFloor>,a0
   17750:	|               move.l 8(a0),d0
   17754:	|               cmp.l 16(sp),d0
   17758:	'-------------- bgt.w 1753a <drawFloor+0x10>
        }
    }
}
   1775c:	                nop
   1775e:	                nop
   17760:	                move.l (sp)+,d2
   17762:	                move.l (sp)+,d3
   17764:	                lea 12(sp),sp
   17768:	                rts

0001776a <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   1776a:	                      lea -12(sp),sp
    int sharedVertices = 0;
   1776e:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   17772:	                      clr.l 4(sp)
   17776:	   ,----------------- bra.w 17808 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   1777a:	,--|----------------> clr.l (sp)
   1777c:	|  |     ,----------- bra.s 177f8 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   1777e:	|  |  ,--|----------> movea.l 16(sp),a0
   17782:	|  |  |  |            move.l 4(a0),d1
   17786:	|  |  |  |            move.l 4(sp),d0
   1778a:	|  |  |  |            add.l d0,d0
   1778c:	|  |  |  |            add.l d0,d0
   1778e:	|  |  |  |            movea.l d1,a0
   17790:	|  |  |  |            adda.l d0,a0
   17792:	|  |  |  |            move.l (a0),d1
   17794:	|  |  |  |            movea.l 20(sp),a0
   17798:	|  |  |  |            movea.l 4(a0),a0
   1779c:	|  |  |  |            move.l (sp),d0
   1779e:	|  |  |  |            add.l d0,d0
   177a0:	|  |  |  |            add.l d0,d0
   177a2:	|  |  |  |            adda.l d0,a0
   177a4:	|  |  |  |            move.l (a0),d0
   177a6:	|  |  |  |            cmp.l d1,d0
   177a8:	|  |  |  |  ,-------- bne.s 177f6 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   177aa:	|  |  |  |  |         move.l 8(sp),d0
   177ae:	|  |  |  |  |         move.l d0,d1
   177b0:	|  |  |  |  |         addq.l #1,d1
   177b2:	|  |  |  |  |         move.l d1,8(sp)
   177b6:	|  |  |  |  |         tst.l d0
   177b8:	|  |  |  |  |     ,-- beq.s 177da <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   177ba:	|  |  |  |  |     |   movea.l 16(sp),a0
   177be:	|  |  |  |  |     |   move.l 4(a0),d1
   177c2:	|  |  |  |  |     |   move.l 4(sp),d0
   177c6:	|  |  |  |  |     |   add.l d0,d0
   177c8:	|  |  |  |  |     |   add.l d0,d0
   177ca:	|  |  |  |  |     |   movea.l d1,a0
   177cc:	|  |  |  |  |     |   adda.l d0,a0
   177ce:	|  |  |  |  |     |   move.l (a0),d0
   177d0:	|  |  |  |  |     |   movea.l 28(sp),a0
   177d4:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   177d6:	|  |  |  |  |     |   moveq #1,d0
   177d8:	|  |  |  |  |  ,--|-- bra.s 17818 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   177da:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   177de:	|  |  |  |  |  |      move.l 4(a0),d1
   177e2:	|  |  |  |  |  |      move.l 4(sp),d0
   177e6:	|  |  |  |  |  |      add.l d0,d0
   177e8:	|  |  |  |  |  |      add.l d0,d0
   177ea:	|  |  |  |  |  |      movea.l d1,a0
   177ec:	|  |  |  |  |  |      adda.l d0,a0
   177ee:	|  |  |  |  |  |      move.l (a0),d0
   177f0:	|  |  |  |  |  |      movea.l 24(sp),a0
   177f4:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   177f6:	|  |  |  |  '--|----> addq.l #1,(sp)
   177f8:	|  |  |  '-----|----> movea.l 20(sp),a0
   177fc:	|  |  |        |      move.l (a0),d0
   177fe:	|  |  |        |      cmp.l (sp),d0
   17800:	|  |  '--------|----- bgt.w 1777e <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   17804:	|  |           |      addq.l #1,4(sp)
   17808:	|  '-----------|----> movea.l 16(sp),a0
   1780c:	|              |      move.l (a0),d0
   1780e:	|              |      cmp.l 4(sp),d0
   17812:	'--------------|----- bgt.w 1777a <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   17816:	               |      clr.w d0
}
   17818:	               '----> lea 12(sp),sp
   1781c:	                      rts

0001781e <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   1781e:	movea.l 1e938 <currentFloor>,a0
   17824:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   17828:	movea.l 1e938 <currentFloor>,a0
   1782e:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   17832:	movea.l 1e938 <currentFloor>,a0
   17838:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   1783c:	movea.l 1e938 <currentFloor>,a0
   17842:	clr.l 16(a0)
}
   17846:	nop
   17848:	rts

0001784a <inFloor>:

int inFloor (int x, int y) {
   1784a:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   1784c:	          pea 1bf2f <talk.c.490538ff+0x8a1>
   17852:	          jsr 18504 <KPrintF>
   17858:	          addq.l #4,sp
	int i, r = -1;
   1785a:	          moveq #-1,d0
   1785c:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1785e:	          clr.l 4(sp)
   17862:	   ,----- bra.s 17896 <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   17864:	,--|----> movea.l 1e938 <currentFloor>,a0
   1786a:	|  |      move.l 12(a0),d1
   1786e:	|  |      move.l 4(sp),d0
   17872:	|  |      lsl.l #3,d0
   17874:	|  |      add.l d1,d0
   17876:	|  |      move.l 16(sp),-(sp)
   1787a:	|  |      move.l 16(sp),-(sp)
   1787e:	|  |      move.l d0,-(sp)
   17880:	|  |      jsr 17a70 <pointInFloorPolygon>
   17886:	|  |      lea 12(sp),sp
   1788a:	|  |      tst.w d0
   1788c:	|  |  ,-- beq.s 17892 <inFloor+0x48>
			r = i;
   1788e:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   17892:	|  |  '-> addq.l #1,4(sp)
   17896:	|  '----> movea.l 1e938 <currentFloor>,a0
   1789c:	|         move.l 8(a0),d0
   178a0:	|         cmp.l 4(sp),d0
   178a4:	'-------- bgt.s 17864 <inFloor+0x1a>

	KPrintF("infloor finished\n");
   178a6:	          pea 1bf40 <talk.c.490538ff+0x8b2>
   178ac:	          jsr 18504 <KPrintF>
   178b2:	          addq.l #4,sp
	return r;
   178b4:	          move.l (sp),d0
}
   178b6:	          addq.l #8,sp
   178b8:	          rts

000178ba <initFloor>:

BOOL initFloor () {
   178ba:	       lea -12(sp),sp
   178be:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   178c0:	       moveq #20,d0
   178c2:	       move.l d0,12(sp)
   178c6:	       clr.l 8(sp)
   178ca:	       move.l 1e81c <SysBase>,d0
   178d0:	       movea.l d0,a6
   178d2:	       move.l 12(sp),d0
   178d6:	       move.l 8(sp),d1
   178da:	       jsr -684(a6)
   178de:	       move.l d0,4(sp)
   178e2:	       move.l 4(sp),d0
   178e6:	       move.l d0,1e938 <currentFloor>

    if(currentFloor == 0) {
   178ec:	       move.l 1e938 <currentFloor>,d0
   178f2:	,----- bne.s 17906 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   178f4:	|      pea 1bf52 <talk.c.490538ff+0x8c4>
   178fa:	|      jsr 18504 <KPrintF>
   17900:	|      addq.l #4,sp
        return FALSE;
   17902:	|      clr.w d0
   17904:	|  ,-- bra.s 1790e <initFloor+0x54>
    }

	noFloor ();
   17906:	'--|-> jsr 1781e <noFloor>
	return TRUE;
   1790c:	   |   moveq #1,d0
}
   1790e:	   '-> movea.l (sp)+,a6
   17910:	       lea 12(sp),sp
   17914:	       rts

00017916 <killFloor>:

void killFloor () {
   17916:	       lea -24(sp),sp
   1791a:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1791c:	       clr.l 24(sp)
   17920:	   ,-- bra.s 1797a <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   17922:	,--|-> movea.l 1e938 <currentFloor>,a0
   17928:	|  |   move.l 12(a0),d1
   1792c:	|  |   move.l 24(sp),d0
   17930:	|  |   lsl.l #3,d0
   17932:	|  |   movea.l d1,a0
   17934:	|  |   adda.l d0,a0
   17936:	|  |   move.l 4(a0),8(sp)
   1793c:	|  |   move.l 1e81c <SysBase>,d0
   17942:	|  |   movea.l d0,a6
   17944:	|  |   movea.l 8(sp),a1
   17948:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   1794c:	|  |   movea.l 1e938 <currentFloor>,a0
   17952:	|  |   move.l 16(a0),d1
   17956:	|  |   move.l 24(sp),d0
   1795a:	|  |   add.l d0,d0
   1795c:	|  |   add.l d0,d0
   1795e:	|  |   movea.l d1,a0
   17960:	|  |   adda.l d0,a0
   17962:	|  |   move.l (a0),4(sp)
   17966:	|  |   move.l 1e81c <SysBase>,d0
   1796c:	|  |   movea.l d0,a6
   1796e:	|  |   movea.l 4(sp),a1
   17972:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   17976:	|  |   addq.l #1,24(sp)
   1797a:	|  '-> movea.l 1e938 <currentFloor>,a0
   17980:	|      move.l 8(a0),d0
   17984:	|      cmp.l 24(sp),d0
   17988:	'----- bgt.s 17922 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   1798a:	       movea.l 1e938 <currentFloor>,a0
   17990:	       move.l 12(a0),20(sp)
   17996:	       move.l 1e81c <SysBase>,d0
   1799c:	       movea.l d0,a6
   1799e:	       movea.l 20(sp),a1
   179a2:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   179a6:	       movea.l 1e938 <currentFloor>,a0
   179ac:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   179b0:	       movea.l 1e938 <currentFloor>,a0
   179b6:	       move.l 4(a0),16(sp)
   179bc:	       move.l 1e81c <SysBase>,d0
   179c2:	       movea.l d0,a6
   179c4:	       movea.l 16(sp),a1
   179c8:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   179cc:	       movea.l 1e938 <currentFloor>,a0
   179d2:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   179d6:	       movea.l 1e938 <currentFloor>,a0
   179dc:	       move.l 16(a0),12(sp)
   179e2:	       move.l 1e81c <SysBase>,d0
   179e8:	       movea.l d0,a6
   179ea:	       movea.l 12(sp),a1
   179ee:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   179f2:	       movea.l 1e938 <currentFloor>,a0
   179f8:	       clr.l 16(a0)
}
   179fc:	       nop
   179fe:	       movea.l (sp)+,a6
   17a00:	       lea 24(sp),sp
   17a04:	       rts

00017a06 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   17a06:	                   lea -12(sp),sp
	int sharedVertices = 0;
   17a0a:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   17a0e:	                   clr.l 4(sp)
   17a12:	   ,-------------- bra.s 17a5e <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   17a14:	,--|-------------> clr.l (sp)
   17a16:	|  |     ,-------- bra.s 17a52 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   17a18:	|  |  ,--|-------> move.l 20(sp),d1
   17a1c:	|  |  |  |         move.l 4(sp),d0
   17a20:	|  |  |  |         add.l d0,d0
   17a22:	|  |  |  |         add.l d0,d0
   17a24:	|  |  |  |         movea.l d1,a0
   17a26:	|  |  |  |         adda.l d0,a0
   17a28:	|  |  |  |         move.l (a0),d1
   17a2a:	|  |  |  |         movea.l 28(sp),a0
   17a2e:	|  |  |  |         move.l (sp),d0
   17a30:	|  |  |  |         add.l d0,d0
   17a32:	|  |  |  |         add.l d0,d0
   17a34:	|  |  |  |         adda.l d0,a0
   17a36:	|  |  |  |         move.l (a0),d0
   17a38:	|  |  |  |         cmp.l d1,d0
   17a3a:	|  |  |  |     ,-- bne.s 17a50 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   17a3c:	|  |  |  |     |   move.l 8(sp),d0
   17a40:	|  |  |  |     |   move.l d0,d1
   17a42:	|  |  |  |     |   addq.l #1,d1
   17a44:	|  |  |  |     |   move.l d1,8(sp)
   17a48:	|  |  |  |     |   tst.l d0
   17a4a:	|  |  |  |     +-- beq.s 17a50 <polysShareSide+0x4a>
   17a4c:	|  |  |  |     |   moveq #1,d0
   17a4e:	|  |  |  |  ,--|-- bra.s 17a6a <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   17a50:	|  |  |  |  |  '-> addq.l #1,(sp)
   17a52:	|  |  |  '--|----> move.l 24(sp),d0
   17a56:	|  |  |     |      cmp.l (sp),d0
   17a58:	|  |  '-----|----- bgt.s 17a18 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   17a5a:	|  |        |      addq.l #1,4(sp)
   17a5e:	|  '--------|----> move.l 16(sp),d0
   17a62:	|           |      cmp.l 4(sp),d0
   17a66:	'-----------|----- bgt.s 17a14 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   17a68:	            |      clr.w d0
}
   17a6a:	            '----> lea 12(sp),sp
   17a6e:	                   rts

00017a70 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   17a70:	             lea -28(sp),sp
   17a74:	             move.l d3,-(sp)
   17a76:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   17a78:	             clr.l 32(sp)
   17a7c:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   17a80:	             movea.l 40(sp),a0
   17a84:	             move.l (a0),d0
   17a86:	             move.l d0,d1
   17a88:	             subq.l #1,d1
   17a8a:	             move.l d1,28(sp)
   17a8e:	   ,-------- bra.w 17c88 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   17a92:	,--|-------> movea.l 1e938 <currentFloor>,a0
   17a98:	|  |         move.l 4(a0),d1
   17a9c:	|  |         movea.l 40(sp),a0
   17aa0:	|  |         movea.l 4(a0),a0
   17aa4:	|  |         move.l 32(sp),d0
   17aa8:	|  |         add.l d0,d0
   17aaa:	|  |         add.l d0,d0
   17aac:	|  |         adda.l d0,a0
   17aae:	|  |         move.l (a0),d0
   17ab0:	|  |         lsl.l #3,d0
   17ab2:	|  |         movea.l d1,a0
   17ab4:	|  |         adda.l d0,a0
   17ab6:	|  |         move.l (a0),d0
   17ab8:	|  |         move.l d0,-(sp)
   17aba:	|  |         jsr 18936 <__floatsisf>
   17ac0:	|  |         addq.l #4,sp
   17ac2:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   17ac6:	|  |         movea.l 1e938 <currentFloor>,a0
   17acc:	|  |         move.l 4(a0),d1
   17ad0:	|  |         movea.l 40(sp),a0
   17ad4:	|  |         movea.l 4(a0),a0
   17ad8:	|  |         move.l 32(sp),d0
   17adc:	|  |         add.l d0,d0
   17ade:	|  |         add.l d0,d0
   17ae0:	|  |         adda.l d0,a0
   17ae2:	|  |         move.l (a0),d0
   17ae4:	|  |         lsl.l #3,d0
   17ae6:	|  |         movea.l d1,a0
   17ae8:	|  |         adda.l d0,a0
   17aea:	|  |         move.l 4(a0),d0
   17aee:	|  |         move.l d0,-(sp)
   17af0:	|  |         jsr 18936 <__floatsisf>
   17af6:	|  |         addq.l #4,sp
   17af8:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   17afc:	|  |         movea.l 1e938 <currentFloor>,a0
   17b02:	|  |         move.l 4(a0),d1
   17b06:	|  |         movea.l 40(sp),a0
   17b0a:	|  |         movea.l 4(a0),a0
   17b0e:	|  |         move.l 28(sp),d0
   17b12:	|  |         add.l d0,d0
   17b14:	|  |         add.l d0,d0
   17b16:	|  |         adda.l d0,a0
   17b18:	|  |         move.l (a0),d0
   17b1a:	|  |         lsl.l #3,d0
   17b1c:	|  |         movea.l d1,a0
   17b1e:	|  |         adda.l d0,a0
   17b20:	|  |         move.l (a0),d0
   17b22:	|  |         move.l d0,-(sp)
   17b24:	|  |         jsr 18936 <__floatsisf>
   17b2a:	|  |         addq.l #4,sp
   17b2c:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   17b30:	|  |         movea.l 1e938 <currentFloor>,a0
   17b36:	|  |         move.l 4(a0),d1
   17b3a:	|  |         movea.l 40(sp),a0
   17b3e:	|  |         movea.l 4(a0),a0
   17b42:	|  |         move.l 28(sp),d0
   17b46:	|  |         add.l d0,d0
   17b48:	|  |         add.l d0,d0
   17b4a:	|  |         adda.l d0,a0
   17b4c:	|  |         move.l (a0),d0
   17b4e:	|  |         lsl.l #3,d0
   17b50:	|  |         movea.l d1,a0
   17b52:	|  |         adda.l d0,a0
   17b54:	|  |         move.l 4(a0),d0
   17b58:	|  |         move.l d0,-(sp)
   17b5a:	|  |         jsr 18936 <__floatsisf>
   17b60:	|  |         addq.l #4,sp
   17b62:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   17b66:	|  |         move.l 48(sp),-(sp)
   17b6a:	|  |         jsr 18936 <__floatsisf>
   17b70:	|  |         addq.l #4,sp
   17b72:	|  |         move.l d0,-(sp)
   17b74:	|  |         move.l 20(sp),-(sp)
   17b78:	|  |         jsr 18ad8 <__lesf2>
   17b7e:	|  |         addq.l #8,sp
   17b80:	|  |         tst.l d0
   17b82:	|  |     ,-- bgt.s 17ba2 <pointInFloorPolygon+0x132>
   17b84:	|  |     |   move.l 48(sp),-(sp)
   17b88:	|  |     |   jsr 18936 <__floatsisf>
   17b8e:	|  |     |   addq.l #4,sp
   17b90:	|  |     |   move.l d0,-(sp)
   17b92:	|  |     |   move.l 12(sp),-(sp)
   17b96:	|  |     |   jsr 18aa2 <__gtsf2>
   17b9c:	|  |     |   addq.l #8,sp
   17b9e:	|  |     |   tst.l d0
   17ba0:	|  |  ,--|-- bgt.s 17be2 <pointInFloorPolygon+0x172>
   17ba2:	|  |  |  '-> move.l 48(sp),-(sp)
   17ba6:	|  |  |      jsr 18936 <__floatsisf>
   17bac:	|  |  |      addq.l #4,sp
   17bae:	|  |  |      move.l d0,-(sp)
   17bb0:	|  |  |      move.l 12(sp),-(sp)
   17bb4:	|  |  |      jsr 18ad8 <__lesf2>
   17bba:	|  |  |      addq.l #8,sp
   17bbc:	|  |  |      tst.l d0
   17bbe:	|  |  |  ,-- bgt.w 17c78 <pointInFloorPolygon+0x208>
   17bc2:	|  |  |  |   move.l 48(sp),-(sp)
   17bc6:	|  |  |  |   jsr 18936 <__floatsisf>
   17bcc:	|  |  |  |   addq.l #4,sp
   17bce:	|  |  |  |   move.l d0,-(sp)
   17bd0:	|  |  |  |   move.l 20(sp),-(sp)
   17bd4:	|  |  |  |   jsr 18aa2 <__gtsf2>
   17bda:	|  |  |  |   addq.l #8,sp
   17bdc:	|  |  |  |   tst.l d0
   17bde:	|  |  |  +-- ble.w 17c78 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   17be2:	|  |  '--|-> move.l 44(sp),-(sp)
   17be6:	|  |     |   jsr 18936 <__floatsisf>
   17bec:	|  |     |   addq.l #4,sp
   17bee:	|  |     |   move.l d0,d3
   17bf0:	|  |     |   move.l 20(sp),-(sp)
   17bf4:	|  |     |   move.l 16(sp),-(sp)
   17bf8:	|  |     |   jsr 18c2a <__subsf3>
   17bfe:	|  |     |   addq.l #8,sp
   17c00:	|  |     |   move.l d0,d2
   17c02:	|  |     |   move.l 48(sp),-(sp)
   17c06:	|  |     |   jsr 18936 <__floatsisf>
   17c0c:	|  |     |   addq.l #4,sp
   17c0e:	|  |     |   move.l 16(sp),-(sp)
   17c12:	|  |     |   move.l d0,-(sp)
   17c14:	|  |     |   jsr 18c2a <__subsf3>
   17c1a:	|  |     |   addq.l #8,sp
   17c1c:	|  |     |   move.l d0,-(sp)
   17c1e:	|  |     |   move.l d2,-(sp)
   17c20:	|  |     |   jsr 189e8 <__mulsf3>
   17c26:	|  |     |   addq.l #8,sp
   17c28:	|  |     |   move.l d0,d2
   17c2a:	|  |     |   move.l 16(sp),-(sp)
   17c2e:	|  |     |   move.l 12(sp),-(sp)
   17c32:	|  |     |   jsr 18c2a <__subsf3>
   17c38:	|  |     |   addq.l #8,sp
   17c3a:	|  |     |   move.l d0,-(sp)
   17c3c:	|  |     |   move.l d2,-(sp)
   17c3e:	|  |     |   jsr 187ec <__divsf3>
   17c44:	|  |     |   addq.l #8,sp
   17c46:	|  |     |   move.l 20(sp),-(sp)
   17c4a:	|  |     |   move.l d0,-(sp)
   17c4c:	|  |     |   jsr 186f2 <__addsf3>
   17c52:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   17c54:	|  |     |   move.l d0,-(sp)
   17c56:	|  |     |   move.l d3,-(sp)
   17c58:	|  |     |   jsr 18b5c <__ltsf2>
   17c5e:	|  |     |   addq.l #8,sp
   17c60:	|  |     |   tst.l d0
   17c62:	|  |     +-- bge.s 17c78 <pointInFloorPolygon+0x208>

			c = !c;
   17c64:	|  |     |   tst.l 24(sp)
   17c68:	|  |     |   seq d0
   17c6a:	|  |     |   neg.b d0
   17c6c:	|  |     |   move.b d0,d0
   17c6e:	|  |     |   andi.l #255,d0
   17c74:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   17c78:	|  |     '-> move.l 32(sp),d0
   17c7c:	|  |         move.l d0,d1
   17c7e:	|  |         addq.l #1,d1
   17c80:	|  |         move.l d1,32(sp)
   17c84:	|  |         move.l d0,28(sp)
   17c88:	|  '-------> movea.l 40(sp),a0
   17c8c:	|            move.l (a0),d0
   17c8e:	|            cmp.l 32(sp),d0
   17c92:	'----------- bgt.w 17a92 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   17c96:	             tst.l 24(sp)
   17c9a:	             sne d0
   17c9c:	             neg.b d0
   17c9e:	             move.b d0,d0
   17ca0:	             andi.w #255,d0
}
   17ca4:	             move.l (sp)+,d2
   17ca6:	             move.l (sp)+,d3
   17ca8:	             lea 28(sp),sp
   17cac:	             rts

00017cae <setFloor>:

BOOL setFloor (int fileNum) {
   17cae:	                               lea -132(sp),sp
   17cb2:	                               move.l a6,-(sp)
   17cb4:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   17cb6:	                               jsr 17916 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   17cbc:	                               move.l 144(sp),-(sp)
   17cc0:	                               jsr 7ef8 <openFileFromNum>
   17cc6:	                               addq.l #4,sp
   17cc8:	                               tst.l d0
   17cca:	                           ,-- bne.s 17cd2 <setFloor+0x24>
   17ccc:	                           |   clr.w d0
   17cce:	,--------------------------|-- bra.w 1841e <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   17cd2:	|                          '-> movea.l 1e938 <currentFloor>,a0
   17cd8:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   17cdc:	|                              move.l 1e802 <bigDataFile>,118(sp)
   17ce4:	|                              move.l 1e824 <DOSBase>,d0
   17cea:	|                              movea.l d0,a6
   17cec:	|                              move.l 118(sp),d1
   17cf0:	|                              jsr -306(a6)
   17cf4:	|                              move.l d0,114(sp)
   17cf8:	|                              move.l 114(sp),d0
   17cfc:	|                              movea.l 1e938 <currentFloor>,a0
   17d02:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   17d06:	|                              movea.l 1e938 <currentFloor>,a0
   17d0c:	|                              move.l 8(a0),d0
   17d10:	|                              lsl.l #3,d0
   17d12:	|                              move.l d0,110(sp)
   17d16:	|                              clr.l 106(sp)
   17d1a:	|                              move.l 1e81c <SysBase>,d0
   17d20:	|                              movea.l d0,a6
   17d22:	|                              move.l 110(sp),d0
   17d26:	|                              move.l 106(sp),d1
   17d2a:	|                              jsr -684(a6)
   17d2e:	|                              move.l d0,102(sp)
   17d32:	|                              move.l 102(sp),d0
   17d36:	|                              movea.l 1e938 <currentFloor>,a0
   17d3c:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   17d40:	|                              movea.l 1e938 <currentFloor>,a0
   17d46:	|                              move.l 12(a0),d0
   17d4a:	|                          ,-- bne.s 17d60 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   17d4c:	|                          |   pea 1bf76 <talk.c.490538ff+0x8e8>
   17d52:	|                          |   jsr 18504 <KPrintF>
   17d58:	|                          |   addq.l #4,sp
		return FALSE;
   17d5a:	|                          |   clr.w d0
   17d5c:	+--------------------------|-- bra.w 1841e <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17d60:	|                          '-> clr.l 136(sp)
   17d64:	|                    ,-------- bra.w 17e7c <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   17d68:	|                 ,--|-------> move.l 1e802 <bigDataFile>,26(sp)
   17d70:	|                 |  |         move.l 1e824 <DOSBase>,d0
   17d76:	|                 |  |         movea.l d0,a6
   17d78:	|                 |  |         move.l 26(sp),d1
   17d7c:	|                 |  |         jsr -306(a6)
   17d80:	|                 |  |         move.l d0,22(sp)
   17d84:	|                 |  |         move.l 22(sp),d1
   17d88:	|                 |  |         movea.l 1e938 <currentFloor>,a0
   17d8e:	|                 |  |         movea.l 12(a0),a0
   17d92:	|                 |  |         move.l 136(sp),d0
   17d96:	|                 |  |         lsl.l #3,d0
   17d98:	|                 |  |         adda.l d0,a0
   17d9a:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   17d9c:	|                 |  |         movea.l 1e938 <currentFloor>,a0
   17da2:	|                 |  |         move.l 12(a0),d1
   17da6:	|                 |  |         move.l 136(sp),d0
   17daa:	|                 |  |         lsl.l #3,d0
   17dac:	|                 |  |         movea.l d1,a0
   17dae:	|                 |  |         adda.l d0,a0
   17db0:	|                 |  |         move.l (a0),d0
   17db2:	|                 |  |         add.l d0,d0
   17db4:	|                 |  |         add.l d0,d0
   17db6:	|                 |  |         move.l d0,18(sp)
   17dba:	|                 |  |         clr.l 14(sp)
   17dbe:	|                 |  |         move.l 1e81c <SysBase>,d0
   17dc4:	|                 |  |         movea.l d0,a6
   17dc6:	|                 |  |         move.l 18(sp),d0
   17dca:	|                 |  |         move.l 14(sp),d1
   17dce:	|                 |  |         jsr -684(a6)
   17dd2:	|                 |  |         move.l d0,10(sp)
   17dd6:	|                 |  |         move.l 10(sp),d1
   17dda:	|                 |  |         movea.l 1e938 <currentFloor>,a0
   17de0:	|                 |  |         movea.l 12(a0),a0
   17de4:	|                 |  |         move.l 136(sp),d0
   17de8:	|                 |  |         lsl.l #3,d0
   17dea:	|                 |  |         adda.l d0,a0
   17dec:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   17df0:	|                 |  |         movea.l 1e938 <currentFloor>,a0
   17df6:	|                 |  |         move.l 12(a0),d1
   17dfa:	|                 |  |         move.l 136(sp),d0
   17dfe:	|                 |  |         lsl.l #3,d0
   17e00:	|                 |  |         movea.l d1,a0
   17e02:	|                 |  |         adda.l d0,a0
   17e04:	|                 |  |         move.l 4(a0),d0
   17e08:	|                 |  |     ,-- bne.s 17e1e <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   17e0a:	|                 |  |     |   pea 1bf76 <talk.c.490538ff+0x8e8>
   17e10:	|                 |  |     |   jsr 18504 <KPrintF>
   17e16:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   17e18:	|                 |  |     |   clr.w d0
   17e1a:	+-----------------|--|-----|-- bra.w 1841e <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   17e1e:	|                 |  |     '-> clr.l 132(sp)
   17e22:	|                 |  |     ,-- bra.s 17e5c <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   17e24:	|                 |  |  ,--|-> move.l 1e802 <bigDataFile>,d1
   17e2a:	|                 |  |  |  |   movea.l 1e938 <currentFloor>,a0
   17e30:	|                 |  |  |  |   movea.l 12(a0),a0
   17e34:	|                 |  |  |  |   move.l 136(sp),d0
   17e38:	|                 |  |  |  |   lsl.l #3,d0
   17e3a:	|                 |  |  |  |   adda.l d0,a0
   17e3c:	|                 |  |  |  |   movea.l 4(a0),a0
   17e40:	|                 |  |  |  |   move.l 132(sp),d0
   17e44:	|                 |  |  |  |   add.l d0,d0
   17e46:	|                 |  |  |  |   add.l d0,d0
   17e48:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   17e4c:	|                 |  |  |  |   move.l d1,-(sp)
   17e4e:	|                 |  |  |  |   jsr 6bc <get2bytes>
   17e54:	|                 |  |  |  |   addq.l #4,sp
   17e56:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   17e58:	|                 |  |  |  |   addq.l #1,132(sp)
   17e5c:	|                 |  |  |  '-> movea.l 1e938 <currentFloor>,a0
   17e62:	|                 |  |  |      move.l 12(a0),d1
   17e66:	|                 |  |  |      move.l 136(sp),d0
   17e6a:	|                 |  |  |      lsl.l #3,d0
   17e6c:	|                 |  |  |      movea.l d1,a0
   17e6e:	|                 |  |  |      adda.l d0,a0
   17e70:	|                 |  |  |      move.l (a0),d0
   17e72:	|                 |  |  |      cmp.l 132(sp),d0
   17e76:	|                 |  |  '----- bgt.s 17e24 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17e78:	|                 |  |         addq.l #1,136(sp)
   17e7c:	|                 |  '-------> movea.l 1e938 <currentFloor>,a0
   17e82:	|                 |            move.l 8(a0),d0
   17e86:	|                 |            cmp.l 136(sp),d0
   17e8a:	|                 '----------- bgt.w 17d68 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   17e8e:	|                              move.l 1e802 <bigDataFile>,d0
   17e94:	|                              move.l d0,-(sp)
   17e96:	|                              jsr 6bc <get2bytes>
   17e9c:	|                              addq.l #4,sp
   17e9e:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   17ea2:	|                              move.l 136(sp),d0
   17ea6:	|                              lsl.l #3,d0
   17ea8:	|                              move.l d0,98(sp)
   17eac:	|                              clr.l 94(sp)
   17eb0:	|                              move.l 1e81c <SysBase>,d0
   17eb6:	|                              movea.l d0,a6
   17eb8:	|                              move.l 98(sp),d0
   17ebc:	|                              move.l 94(sp),d1
   17ec0:	|                              jsr -684(a6)
   17ec4:	|                              move.l d0,90(sp)
   17ec8:	|                              move.l 90(sp),d0
   17ecc:	|                              movea.l 1e938 <currentFloor>,a0
   17ed2:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   17ed6:	|                              movea.l 1e938 <currentFloor>,a0
   17edc:	|                              move.l 4(a0),d0
   17ee0:	|                          ,-- bne.s 17ef6 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   17ee2:	|                          |   pea 1bf76 <talk.c.490538ff+0x8e8>
   17ee8:	|                          |   jsr 18504 <KPrintF>
   17eee:	|                          |   addq.l #4,sp
		return FALSE;
   17ef0:	|                          |   clr.w d0
   17ef2:	+--------------------------|-- bra.w 1841e <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   17ef6:	|                          '-> clr.l 132(sp)
   17efa:	|                          ,-- bra.s 17f4e <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   17efc:	|                       ,--|-> move.l 1e802 <bigDataFile>,d1
   17f02:	|                       |  |   movea.l 1e938 <currentFloor>,a0
   17f08:	|                       |  |   movea.l 4(a0),a0
   17f0c:	|                       |  |   move.l 132(sp),d0
   17f10:	|                       |  |   lsl.l #3,d0
   17f12:	|                       |  |   lea (0,a0,d0.l),a2
   17f16:	|                       |  |   move.l d1,-(sp)
   17f18:	|                       |  |   jsr 6bc <get2bytes>
   17f1e:	|                       |  |   addq.l #4,sp
   17f20:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   17f22:	|                       |  |   move.l 1e802 <bigDataFile>,d1
   17f28:	|                       |  |   movea.l 1e938 <currentFloor>,a0
   17f2e:	|                       |  |   movea.l 4(a0),a0
   17f32:	|                       |  |   move.l 132(sp),d0
   17f36:	|                       |  |   lsl.l #3,d0
   17f38:	|                       |  |   lea (0,a0,d0.l),a2
   17f3c:	|                       |  |   move.l d1,-(sp)
   17f3e:	|                       |  |   jsr 6bc <get2bytes>
   17f44:	|                       |  |   addq.l #4,sp
   17f46:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   17f4a:	|                       |  |   addq.l #1,132(sp)
   17f4e:	|                       |  '-> move.l 132(sp),d0
   17f52:	|                       |      cmp.l 136(sp),d0
   17f56:	|                       '----- blt.s 17efc <setFloor+0x24e>
	}

	finishAccess ();
   17f58:	|                              jsr 7df0 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   17f5e:	|                              movea.l 1e938 <currentFloor>,a0
   17f64:	|                              move.l 8(a0),d0
   17f68:	|                              add.l d0,d0
   17f6a:	|                              add.l d0,d0
   17f6c:	|                              move.l d0,86(sp)
   17f70:	|                              clr.l 82(sp)
   17f74:	|                              move.l 1e81c <SysBase>,d0
   17f7a:	|                              movea.l d0,a6
   17f7c:	|                              move.l 86(sp),d0
   17f80:	|                              move.l 82(sp),d1
   17f84:	|                              jsr -684(a6)
   17f88:	|                              move.l d0,78(sp)
   17f8c:	|                              move.l 78(sp),d0
   17f90:	|                              movea.l 1e938 <currentFloor>,a0
   17f96:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   17f9a:	|                              movea.l 1e938 <currentFloor>,a0
   17fa0:	|                              move.l 8(a0),d0
   17fa4:	|                              add.l d0,d0
   17fa6:	|                              add.l d0,d0
   17fa8:	|                              move.l d0,74(sp)
   17fac:	|                              clr.l 70(sp)
   17fb0:	|                              move.l 1e81c <SysBase>,d0
   17fb6:	|                              movea.l d0,a6
   17fb8:	|                              move.l 74(sp),d0
   17fbc:	|                              move.l 70(sp),d1
   17fc0:	|                              jsr -684(a6)
   17fc4:	|                              move.l d0,66(sp)
   17fc8:	|                              move.l 66(sp),d0
   17fcc:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   17fd0:	|                              movea.l 1e938 <currentFloor>,a0
   17fd6:	|                              move.l 16(a0),d0
   17fda:	|                          ,-- bne.s 17ff0 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   17fdc:	|                          |   pea 1bf76 <talk.c.490538ff+0x8e8>
   17fe2:	|                          |   jsr 18504 <KPrintF>
   17fe8:	|                          |   addq.l #4,sp
		return FALSE;
   17fea:	|                          |   clr.w d0
   17fec:	+--------------------------|-- bra.w 1841e <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17ff0:	|                          '-> clr.l 136(sp)
   17ff4:	|                    ,-------- bra.w 18118 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   17ff8:	|                 ,--|-------> movea.l 1e938 <currentFloor>,a0
   17ffe:	|                 |  |         move.l 8(a0),d0
   18002:	|                 |  |         add.l d0,d0
   18004:	|                 |  |         add.l d0,d0
   18006:	|                 |  |         move.l d0,50(sp)
   1800a:	|                 |  |         clr.l 46(sp)
   1800e:	|                 |  |         move.l 1e81c <SysBase>,d0
   18014:	|                 |  |         movea.l d0,a6
   18016:	|                 |  |         move.l 50(sp),d0
   1801a:	|                 |  |         move.l 46(sp),d1
   1801e:	|                 |  |         jsr -684(a6)
   18022:	|                 |  |         move.l d0,42(sp)
   18026:	|                 |  |         move.l 42(sp),d0
   1802a:	|                 |  |         movea.l 1e938 <currentFloor>,a0
   18030:	|                 |  |         movea.l 16(a0),a0
   18034:	|                 |  |         move.l 136(sp),d1
   18038:	|                 |  |         add.l d1,d1
   1803a:	|                 |  |         add.l d1,d1
   1803c:	|                 |  |         adda.l d1,a0
   1803e:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   18040:	|                 |  |         movea.l 1e938 <currentFloor>,a0
   18046:	|                 |  |         move.l 8(a0),d0
   1804a:	|                 |  |         add.l d0,d0
   1804c:	|                 |  |         add.l d0,d0
   1804e:	|                 |  |         move.l d0,38(sp)
   18052:	|                 |  |         clr.l 34(sp)
   18056:	|                 |  |         move.l 1e81c <SysBase>,d0
   1805c:	|                 |  |         movea.l d0,a6
   1805e:	|                 |  |         move.l 38(sp),d0
   18062:	|                 |  |         move.l 34(sp),d1
   18066:	|                 |  |         jsr -684(a6)
   1806a:	|                 |  |         move.l d0,30(sp)
   1806e:	|                 |  |         move.l 30(sp),d1
   18072:	|                 |  |         move.l 136(sp),d0
   18076:	|                 |  |         add.l d0,d0
   18078:	|                 |  |         add.l d0,d0
   1807a:	|                 |  |         movea.l 62(sp),a0
   1807e:	|                 |  |         adda.l d0,a0
   18080:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   18082:	|                 |  |         movea.l 1e938 <currentFloor>,a0
   18088:	|                 |  |         move.l 16(a0),d1
   1808c:	|                 |  |         move.l 136(sp),d0
   18090:	|                 |  |         add.l d0,d0
   18092:	|                 |  |         add.l d0,d0
   18094:	|                 |  |         movea.l d1,a0
   18096:	|                 |  |         adda.l d0,a0
   18098:	|                 |  |         move.l (a0),d0
   1809a:	|                 |  |     ,-- bne.s 180b0 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   1809c:	|                 |  |     |   pea 1bf76 <talk.c.490538ff+0x8e8>
   180a2:	|                 |  |     |   jsr 18504 <KPrintF>
   180a8:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   180aa:	|                 |  |     |   clr.w d0
   180ac:	+-----------------|--|-----|-- bra.w 1841e <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   180b0:	|                 |  |     '-> clr.l 132(sp)
   180b4:	|                 |  |     ,-- bra.s 18104 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   180b6:	|                 |  |  ,--|-> movea.l 1e938 <currentFloor>,a0
   180bc:	|                 |  |  |  |   move.l 16(a0),d1
   180c0:	|                 |  |  |  |   move.l 136(sp),d0
   180c4:	|                 |  |  |  |   add.l d0,d0
   180c6:	|                 |  |  |  |   add.l d0,d0
   180c8:	|                 |  |  |  |   movea.l d1,a0
   180ca:	|                 |  |  |  |   adda.l d0,a0
   180cc:	|                 |  |  |  |   move.l (a0),d1
   180ce:	|                 |  |  |  |   move.l 132(sp),d0
   180d2:	|                 |  |  |  |   add.l d0,d0
   180d4:	|                 |  |  |  |   add.l d0,d0
   180d6:	|                 |  |  |  |   movea.l d1,a0
   180d8:	|                 |  |  |  |   adda.l d0,a0
   180da:	|                 |  |  |  |   moveq #-1,d1
   180dc:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   180de:	|                 |  |  |  |   move.l 136(sp),d0
   180e2:	|                 |  |  |  |   add.l d0,d0
   180e4:	|                 |  |  |  |   add.l d0,d0
   180e6:	|                 |  |  |  |   movea.l 62(sp),a0
   180ea:	|                 |  |  |  |   adda.l d0,a0
   180ec:	|                 |  |  |  |   move.l (a0),d1
   180ee:	|                 |  |  |  |   move.l 132(sp),d0
   180f2:	|                 |  |  |  |   add.l d0,d0
   180f4:	|                 |  |  |  |   add.l d0,d0
   180f6:	|                 |  |  |  |   movea.l d1,a0
   180f8:	|                 |  |  |  |   adda.l d0,a0
   180fa:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   18100:	|                 |  |  |  |   addq.l #1,132(sp)
   18104:	|                 |  |  |  '-> movea.l 1e938 <currentFloor>,a0
   1810a:	|                 |  |  |      move.l 8(a0),d0
   1810e:	|                 |  |  |      cmp.l 132(sp),d0
   18112:	|                 |  |  '----- bgt.s 180b6 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   18114:	|                 |  |         addq.l #1,136(sp)
   18118:	|                 |  '-------> movea.l 1e938 <currentFloor>,a0
   1811e:	|                 |            move.l 8(a0),d0
   18122:	|                 |            cmp.l 136(sp),d0
   18126:	|                 '----------- bgt.w 17ff8 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1812a:	|                              clr.l 136(sp)
   1812e:	|              ,-------------- bra.w 18234 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   18132:	|           ,--|-------------> clr.l 132(sp)
   18136:	|           |  |     ,-------- bra.w 1821e <setFloor+0x570>
			if (i != j) {
   1813a:	|           |  |  ,--|-------> move.l 136(sp),d0
   1813e:	|           |  |  |  |         cmp.l 132(sp),d0
   18142:	|           |  |  |  |     ,-- beq.w 181d4 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   18146:	|           |  |  |  |     |   movea.l 1e938 <currentFloor>,a0
   1814c:	|           |  |  |  |     |   move.l 12(a0),d1
   18150:	|           |  |  |  |     |   move.l 132(sp),d0
   18154:	|           |  |  |  |     |   lsl.l #3,d0
   18156:	|           |  |  |  |     |   movea.l d1,a1
   18158:	|           |  |  |  |     |   adda.l d0,a1
   1815a:	|           |  |  |  |     |   movea.l 1e938 <currentFloor>,a0
   18160:	|           |  |  |  |     |   move.l 12(a0),d1
   18164:	|           |  |  |  |     |   move.l 136(sp),d0
   18168:	|           |  |  |  |     |   lsl.l #3,d0
   1816a:	|           |  |  |  |     |   movea.l d1,a0
   1816c:	|           |  |  |  |     |   adda.l d0,a0
   1816e:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   18172:	|           |  |  |  |     |   move.l (a1),-(sp)
   18174:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   18178:	|           |  |  |  |     |   move.l (a0),-(sp)
   1817a:	|           |  |  |  |     |   jsr 17a06 <polysShareSide>
   18180:	|           |  |  |  |     |   lea 16(sp),sp
   18184:	|           |  |  |  |     |   tst.w d0
   18186:	|           |  |  |  |  ,--|-- beq.w 1821a <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   1818a:	|           |  |  |  |  |  |   movea.l 1e938 <currentFloor>,a0
   18190:	|           |  |  |  |  |  |   move.l 16(a0),d1
   18194:	|           |  |  |  |  |  |   move.l 136(sp),d0
   18198:	|           |  |  |  |  |  |   add.l d0,d0
   1819a:	|           |  |  |  |  |  |   add.l d0,d0
   1819c:	|           |  |  |  |  |  |   movea.l d1,a0
   1819e:	|           |  |  |  |  |  |   adda.l d0,a0
   181a0:	|           |  |  |  |  |  |   move.l (a0),d1
   181a2:	|           |  |  |  |  |  |   move.l 132(sp),d0
   181a6:	|           |  |  |  |  |  |   add.l d0,d0
   181a8:	|           |  |  |  |  |  |   add.l d0,d0
   181aa:	|           |  |  |  |  |  |   movea.l d1,a0
   181ac:	|           |  |  |  |  |  |   adda.l d0,a0
   181ae:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   181b2:	|           |  |  |  |  |  |   move.l 136(sp),d0
   181b6:	|           |  |  |  |  |  |   add.l d0,d0
   181b8:	|           |  |  |  |  |  |   add.l d0,d0
   181ba:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   181be:	|           |  |  |  |  |  |   adda.l d0,a0
   181c0:	|           |  |  |  |  |  |   move.l (a0),d1
   181c2:	|           |  |  |  |  |  |   move.l 132(sp),d0
   181c6:	|           |  |  |  |  |  |   add.l d0,d0
   181c8:	|           |  |  |  |  |  |   add.l d0,d0
   181ca:	|           |  |  |  |  |  |   movea.l d1,a0
   181cc:	|           |  |  |  |  |  |   adda.l d0,a0
   181ce:	|           |  |  |  |  |  |   moveq #1,d1
   181d0:	|           |  |  |  |  |  |   move.l d1,(a0)
   181d2:	|           |  |  |  |  +--|-- bra.s 1821a <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   181d4:	|           |  |  |  |  |  '-> movea.l 1e938 <currentFloor>,a0
   181da:	|           |  |  |  |  |      move.l 16(a0),d1
   181de:	|           |  |  |  |  |      move.l 136(sp),d0
   181e2:	|           |  |  |  |  |      add.l d0,d0
   181e4:	|           |  |  |  |  |      add.l d0,d0
   181e6:	|           |  |  |  |  |      movea.l d1,a0
   181e8:	|           |  |  |  |  |      adda.l d0,a0
   181ea:	|           |  |  |  |  |      move.l (a0),d1
   181ec:	|           |  |  |  |  |      move.l 132(sp),d0
   181f0:	|           |  |  |  |  |      add.l d0,d0
   181f2:	|           |  |  |  |  |      add.l d0,d0
   181f4:	|           |  |  |  |  |      movea.l d1,a0
   181f6:	|           |  |  |  |  |      adda.l d0,a0
   181f8:	|           |  |  |  |  |      moveq #-2,d0
   181fa:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   181fc:	|           |  |  |  |  |      move.l 136(sp),d0
   18200:	|           |  |  |  |  |      add.l d0,d0
   18202:	|           |  |  |  |  |      add.l d0,d0
   18204:	|           |  |  |  |  |      movea.l 62(sp),a0
   18208:	|           |  |  |  |  |      adda.l d0,a0
   1820a:	|           |  |  |  |  |      move.l (a0),d1
   1820c:	|           |  |  |  |  |      move.l 132(sp),d0
   18210:	|           |  |  |  |  |      add.l d0,d0
   18212:	|           |  |  |  |  |      add.l d0,d0
   18214:	|           |  |  |  |  |      movea.l d1,a0
   18216:	|           |  |  |  |  |      adda.l d0,a0
   18218:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1821a:	|           |  |  |  |  '----> addq.l #1,132(sp)
   1821e:	|           |  |  |  '-------> movea.l 1e938 <currentFloor>,a0
   18224:	|           |  |  |            move.l 8(a0),d0
   18228:	|           |  |  |            cmp.l 132(sp),d0
   1822c:	|           |  |  '----------- bgt.w 1813a <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   18230:	|           |  |               addq.l #1,136(sp)
   18234:	|           |  '-------------> movea.l 1e938 <currentFloor>,a0
   1823a:	|           |                  move.l 8(a0),d0
   1823e:	|           |                  cmp.l 136(sp),d0
   18242:	|           '----------------- bgt.w 18132 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   18246:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   1824a:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   1824e:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   18252:	|  |                           clr.l 136(sp)
   18256:	|  |     ,-------------------- bra.w 183ac <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1825a:	|  |  ,--|-------------------> clr.l 132(sp)
   1825e:	|  |  |  |     ,-------------- bra.w 18396 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   18262:	|  |  |  |  ,--|-------------> movea.l 1e938 <currentFloor>,a0
   18268:	|  |  |  |  |  |               move.l 16(a0),d1
   1826c:	|  |  |  |  |  |               move.l 136(sp),d0
   18270:	|  |  |  |  |  |               add.l d0,d0
   18272:	|  |  |  |  |  |               add.l d0,d0
   18274:	|  |  |  |  |  |               movea.l d1,a0
   18276:	|  |  |  |  |  |               adda.l d0,a0
   18278:	|  |  |  |  |  |               move.l (a0),d1
   1827a:	|  |  |  |  |  |               move.l 132(sp),d0
   1827e:	|  |  |  |  |  |               add.l d0,d0
   18280:	|  |  |  |  |  |               add.l d0,d0
   18282:	|  |  |  |  |  |               movea.l d1,a0
   18284:	|  |  |  |  |  |               adda.l d0,a0
   18286:	|  |  |  |  |  |               move.l (a0),d0
   18288:	|  |  |  |  |  |               moveq #-1,d1
   1828a:	|  |  |  |  |  |               cmp.l d0,d1
   1828c:	|  |  |  |  |  |  ,----------- bne.w 18392 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   18290:	|  |  |  |  |  |  |            clr.l 122(sp)
   18294:	|  |  |  |  |  |  |     ,----- bra.w 18380 <setFloor+0x6d2>
						if (d != i && d != j) {
   18298:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   1829c:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   182a0:	|  |  |  |  |  |  |  |  |  ,-- beq.w 1837c <setFloor+0x6ce>
   182a4:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   182a8:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   182ac:	|  |  |  |  |  |  |  |  |  +-- beq.w 1837c <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   182b0:	|  |  |  |  |  |  |  |  |  |   movea.l 1e938 <currentFloor>,a0
   182b6:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   182ba:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   182be:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182c0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182c2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   182c4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   182c6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   182c8:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   182cc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182ce:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182d0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   182d2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   182d4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   182d6:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   182da:	|  |  |  |  |  |  |  |  |  +-- bne.w 1837c <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   182de:	|  |  |  |  |  |  |  |  |  |   movea.l 1e938 <currentFloor>,a0
   182e4:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   182e8:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   182ec:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182ee:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182f0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   182f2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   182f4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   182f6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   182fa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182fc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   182fe:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   18300:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   18302:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   18304:	|  |  |  |  |  |  |  |  |  +-- bmi.s 1837c <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   18306:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1830a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1830c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1830e:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   18312:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   18314:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   18316:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1831a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1831c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1831e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   18320:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   18322:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   18324:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   18328:	|  |  |  |  |  |  |  |  |  +-- bgt.s 1837c <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   1832a:	|  |  |  |  |  |  |  |  |  |   movea.l 1e938 <currentFloor>,a0
   18330:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   18334:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   18338:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1833a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1833c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1833e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   18340:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   18342:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   18346:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18348:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1834a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1834c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1834e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   18352:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   18356:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18358:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1835a:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   1835e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   18360:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   18362:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   18366:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18368:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1836a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1836c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1836e:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   18372:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   18374:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   18376:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   1837c:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   18380:	|  |  |  |  |  |  |  |  '----> movea.l 1e938 <currentFloor>,a0
   18386:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   1838a:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   1838e:	|  |  |  |  |  |  |  '-------- bgt.w 18298 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   18392:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   18396:	|  |  |  |  |  '-------------> movea.l 1e938 <currentFloor>,a0
   1839c:	|  |  |  |  |                  move.l 8(a0),d0
   183a0:	|  |  |  |  |                  cmp.l 132(sp),d0
   183a4:	|  |  |  |  '----------------- bgt.w 18262 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   183a8:	|  |  |  |                     addq.l #1,136(sp)
   183ac:	|  |  |  '-------------------> movea.l 1e938 <currentFloor>,a0
   183b2:	|  |  |                        move.l 8(a0),d0
   183b6:	|  |  |                        cmp.l 136(sp),d0
   183ba:	|  |  '----------------------- bgt.w 1825a <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   183be:	|  |                           tst.w 130(sp)
   183c2:	|  '-------------------------- bne.w 1824a <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   183c6:	|                              clr.l 136(sp)
   183ca:	|                          ,-- bra.s 183f2 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   183cc:	|                       ,--|-> move.l 136(sp),d0
   183d0:	|                       |  |   add.l d0,d0
   183d2:	|                       |  |   add.l d0,d0
   183d4:	|                       |  |   movea.l 62(sp),a0
   183d8:	|                       |  |   adda.l d0,a0
   183da:	|                       |  |   move.l (a0),54(sp)
   183de:	|                       |  |   move.l 1e81c <SysBase>,d0
   183e4:	|                       |  |   movea.l d0,a6
   183e6:	|                       |  |   movea.l 54(sp),a1
   183ea:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   183ee:	|                       |  |   addq.l #1,136(sp)
   183f2:	|                       |  '-> movea.l 1e938 <currentFloor>,a0
   183f8:	|                       |      move.l 8(a0),d0
   183fc:	|                       |      cmp.l 136(sp),d0
   18400:	|                       '----- bgt.s 183cc <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   18402:	|                              move.l 62(sp),58(sp)
   18408:	|                              move.l 1e81c <SysBase>,d0
   1840e:	|                              movea.l d0,a6
   18410:	|                              movea.l 58(sp),a1
   18414:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   18418:	|                              clr.l 62(sp)

	return TRUE;
   1841c:	|                              moveq #1,d0
}
   1841e:	'----------------------------> movea.l (sp)+,a2
   18420:	                               movea.l (sp)+,a6
   18422:	                               lea 132(sp),sp
   18426:	                               rts

00018428 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   18428:	jsr 17916 <killFloor>
	noFloor ();
   1842e:	jsr 1781e <noFloor>
   18434:	nop
   18436:	rts

00018438 <WaitVbl>:
void WaitVbl() {
   18438:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1843a:	   ,-> movea.l #14675972,a0
   18440:	   |   move.l (a0),d0
   18442:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   18444:	   |   move.l (sp),d0
   18446:	   |   andi.l #130816,d0
   1844c:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   1844e:	   |   move.l (sp),d0
   18450:	   |   cmpi.l #76800,d0
   18456:	   '-- beq.s 1843a <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   18458:	,----> movea.l #14675972,a0
   1845e:	|      move.l (a0),d0
   18460:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   18464:	|      move.l 4(sp),d0
   18468:	|      andi.l #130816,d0
   1846e:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   18472:	|      move.l 4(sp),d0
   18476:	|      cmpi.l #76800,d0
   1847c:	|  ,-- beq.s 18480 <WaitVbl+0x48>
	while (1) {
   1847e:	'--|-- bra.s 18458 <WaitVbl+0x20>
			break;
   18480:	   '-> nop
}
   18482:	       nop
   18484:	       addq.l #8,sp
   18486:	       rts

00018488 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   18488:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   1848a:	       move.l 8(sp),(sp)
	while(len-- > 0)
   1848e:	   ,-- bra.s 184a0 <memset+0x18>
		*ptr++ = val;
   18490:	,--|-> move.l (sp),d0
   18492:	|  |   move.l d0,d1
   18494:	|  |   addq.l #1,d1
   18496:	|  |   move.l d1,(sp)
   18498:	|  |   move.l 12(sp),d1
   1849c:	|  |   movea.l d0,a0
   1849e:	|  |   move.b d1,(a0)
	while(len-- > 0)
   184a0:	|  '-> move.l 16(sp),d0
   184a4:	|      move.l d0,d1
   184a6:	|      subq.l #1,d1
   184a8:	|      move.l d1,16(sp)
   184ac:	|      tst.l d0
   184ae:	'----- bne.s 18490 <memset+0x8>
	return dest;
   184b0:	       move.l 8(sp),d0
}
   184b4:	       addq.l #4,sp
   184b6:	       rts

000184b8 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   184b8:	       subq.l #8,sp
   184ba:	       move.l d2,-(sp)
	char *d = (char *)dest;
   184bc:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   184c2:	       move.l 20(sp),4(sp)
	while(len--)
   184c8:	   ,-- bra.s 184ea <memcpy+0x32>
		*d++ = *s++;
   184ca:	,--|-> move.l 4(sp),d1
   184ce:	|  |   move.l d1,d0
   184d0:	|  |   addq.l #1,d0
   184d2:	|  |   move.l d0,4(sp)
   184d6:	|  |   move.l 8(sp),d0
   184da:	|  |   move.l d0,d2
   184dc:	|  |   addq.l #1,d2
   184de:	|  |   move.l d2,8(sp)
   184e2:	|  |   movea.l d1,a0
   184e4:	|  |   move.b (a0),d1
   184e6:	|  |   movea.l d0,a0
   184e8:	|  |   move.b d1,(a0)
	while(len--)
   184ea:	|  '-> move.l 24(sp),d0
   184ee:	|      move.l d0,d1
   184f0:	|      subq.l #1,d1
   184f2:	|      move.l d1,24(sp)
   184f6:	|      tst.l d0
   184f8:	'----- bne.s 184ca <memcpy+0x12>
	return dest;
   184fa:	       move.l 16(sp),d0
}
   184fe:	       move.l (sp)+,d2
   18500:	       addq.l #8,sp
   18502:	       rts

00018504 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   18504:	       lea -128(sp),sp
   18508:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1850c:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec285a>,d0
   18512:	       cmpi.w #20153,d0
   18516:	   ,-- beq.s 1853a <KPrintF+0x36>
   18518:	   |   cmpi.w #-24562,d0
   1851c:	   +-- beq.s 1853a <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   1851e:	   |   movea.l 1e81c <SysBase>,a6
   18524:	   |   movea.l 144(sp),a0
   18528:	   |   lea 148(sp),a1
   1852c:	   |   lea 18f98 <KPutCharX>,a2
   18532:	   |   suba.l a3,a3
   18534:	   |   jsr -522(a6)
}
   18538:	,--|-- bra.s 18564 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   1853a:	|  '-> movea.l 1e81c <SysBase>,a6
   18540:	|      movea.l 144(sp),a0
   18544:	|      lea 148(sp),a1
   18548:	|      lea 18fa6 <PutChar>,a2
   1854e:	|      lea 12(sp),a3
   18552:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   18556:	|      move.l a3,-(sp)
   18558:	|      pea 56 <_start+0x56>
   1855c:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec285a>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   18562:	|      addq.l #8,sp
}
   18564:	'----> movem.l (sp)+,a2-a3/a6
   18568:	       lea 128(sp),sp
   1856c:	       rts

0001856e <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   1856e:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   18570:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   18576:	       movea.l (sp),a0
   18578:	       move.w (a0),d0
   1857a:	       cmpi.w #20153,d0
   1857e:	   ,-- beq.s 1858a <debug_cmd+0x1c>
   18580:	   |   movea.l (sp),a0
   18582:	   |   move.w (a0),d0
   18584:	   |   cmpi.w #-24562,d0
   18588:	,--|-- bne.s 185a8 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   1858a:	|  '-> move.l 20(sp),-(sp)
   1858e:	|      move.l 20(sp),-(sp)
   18592:	|      move.l 20(sp),-(sp)
   18596:	|      move.l 20(sp),-(sp)
   1859a:	|      pea 58 <_start+0x58>
   1859e:	|      movea.l 20(sp),a0
   185a2:	|      jsr (a0)
   185a4:	|      lea 20(sp),sp
	}
}
   185a8:	'----> nop
   185aa:	       addq.l #4,sp
   185ac:	       rts

000185ae <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   185ae:	       move.l d2,-(sp)
	while(*source && --num > 0)
   185b0:	   ,-- bra.s 185d2 <my_strncpy+0x24>
		*destination++ = *source++;
   185b2:	,--|-> move.l 12(sp),d1
   185b6:	|  |   move.l d1,d0
   185b8:	|  |   addq.l #1,d0
   185ba:	|  |   move.l d0,12(sp)
   185be:	|  |   move.l 8(sp),d0
   185c2:	|  |   move.l d0,d2
   185c4:	|  |   addq.l #1,d2
   185c6:	|  |   move.l d2,8(sp)
   185ca:	|  |   movea.l d1,a0
   185cc:	|  |   move.b (a0),d1
   185ce:	|  |   movea.l d0,a0
   185d0:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   185d2:	|  '-> movea.l 12(sp),a0
   185d6:	|      move.b (a0),d0
   185d8:	|  ,-- beq.s 185e0 <my_strncpy+0x32>
   185da:	|  |   subq.l #1,16(sp)
   185de:	'--|-- bne.s 185b2 <my_strncpy+0x4>
	*destination = '\0';
   185e0:	   '-> movea.l 8(sp),a0
   185e4:	       clr.b (a0)
}
   185e6:	       nop
   185e8:	       move.l (sp)+,d2
   185ea:	       rts

000185ec <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   185ec:	    lea -60(sp),sp
   185f0:	    movea.l 72(sp),a1
   185f4:	    movea.l 76(sp),a0
   185f8:	    move.l 80(sp),d1
   185fc:	    move.l 84(sp),d0
   18600:	    movea.w a1,a1
   18602:	    move.w a1,8(sp)
   18606:	    movea.w a0,a0
   18608:	    move.w a0,6(sp)
   1860c:	    move.w d1,d1
   1860e:	    move.w d1,4(sp)
   18612:	    move.w d0,d0
   18614:	    move.w d0,2(sp)
	struct debug_resource resource = {
   18618:	    lea 10(sp),a0
   1861c:	    clr.l (a0)
   1861e:	    addq.l #4,a0
   18620:	    clr.l (a0)
   18622:	    addq.l #4,a0
   18624:	    clr.l (a0)
   18626:	    addq.l #4,a0
   18628:	    clr.l (a0)
   1862a:	    addq.l #4,a0
   1862c:	    clr.l (a0)
   1862e:	    addq.l #4,a0
   18630:	    clr.l (a0)
   18632:	    addq.l #4,a0
   18634:	    clr.l (a0)
   18636:	    addq.l #4,a0
   18638:	    clr.l (a0)
   1863a:	    addq.l #4,a0
   1863c:	    clr.l (a0)
   1863e:	    addq.l #4,a0
   18640:	    clr.l (a0)
   18642:	    addq.l #4,a0
   18644:	    clr.l (a0)
   18646:	    addq.l #4,a0
   18648:	    clr.l (a0)
   1864a:	    addq.l #4,a0
   1864c:	    clr.w (a0)
   1864e:	    addq.l #2,a0
		.address = (unsigned int)addr,
   18650:	    move.l 64(sp),d0
	struct debug_resource resource = {
   18654:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   18658:	    move.w 8(sp),d0
   1865c:	,-- bpl.s 18660 <debug_register_bitmap+0x74>
   1865e:	|   addq.w #7,d0
   18660:	'-> asr.w #3,d0
   18662:	    movea.w d0,a0
   18664:	    movea.w 6(sp),a1
   18668:	    move.l a1,-(sp)
   1866a:	    move.l a0,-(sp)
   1866c:	    jsr 18e90 <__mulsi3>
   18672:	    addq.l #8,sp
   18674:	    movea.w 4(sp),a0
   18678:	    move.l a0,-(sp)
   1867a:	    move.l d0,-(sp)
   1867c:	    jsr 18e90 <__mulsi3>
   18682:	    addq.l #8,sp
	struct debug_resource resource = {
   18684:	    move.l d0,14(sp)
   18688:	    move.w 2(sp),52(sp)
   1868e:	    move.w 8(sp),54(sp)
   18694:	    move.w 6(sp),56(sp)
   1869a:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   186a0:	    moveq #0,d0
   186a2:	    move.w 2(sp),d0
   186a6:	    moveq #2,d1
   186a8:	    and.l d1,d0
   186aa:	,-- beq.s 186b6 <debug_register_bitmap+0xca>
		resource.size *= 2;
   186ac:	|   move.l 14(sp),d0
   186b0:	|   add.l d0,d0
   186b2:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   186b6:	'-> pea 20 <_start+0x20>
   186ba:	    move.l 72(sp),-(sp)
   186be:	    lea 18(sp),a0
   186c2:	    move.l a0,d0
   186c4:	    addq.l #8,d0
   186c6:	    move.l d0,-(sp)
   186c8:	    jsr 185ae <my_strncpy>
   186ce:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   186d2:	    lea 10(sp),a0
   186d6:	    clr.l -(sp)
   186d8:	    clr.l -(sp)
   186da:	    move.l a0,-(sp)
   186dc:	    pea 4 <_start+0x4>
   186e0:	    jsr 1856e <debug_cmd>
   186e6:	    lea 16(sp),sp
}
   186ea:	    nop
   186ec:	    lea 60(sp),sp
   186f0:	    rts

000186f2 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   186f2:	lea -12(sp),sp
   186f6:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   186f8:	move.l 20(sp),12(sp)
   186fe:	move.l 24(sp),8(sp)
   18704:	move.l 1e82c <MathIeeeSingBasBase>,d0
   1870a:	movea.l d0,a6
   1870c:	move.l 12(sp),d0
   18710:	move.l 8(sp),d1
   18714:	jsr -66(a6)
   18718:	move.l d0,4(sp)
   1871c:	move.l 4(sp),d0
}
   18720:	movea.l (sp)+,a6
   18722:	lea 12(sp),sp
   18726:	rts

00018728 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   18728:	lea -32(sp),sp
   1872c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   18730:	move.l 48(sp),36(sp)
   18736:	move.l 52(sp),40(sp)
   1873c:	move.l 56(sp),28(sp)
   18742:	move.l 60(sp),32(sp)
   18748:	move.l 1e834 <MathIeeeDoubBasBase>,d0
   1874e:	movea.l d0,a6
   18750:	move.l 36(sp),d0
   18754:	move.l 40(sp),d1
   18758:	move.l 28(sp),d2
   1875c:	move.l 32(sp),d3
   18760:	jsr -66(a6)
   18764:	move.l d0,12(sp)
   18768:	move.l d1,16(sp)
   1876c:	move.l 12(sp),20(sp)
   18772:	move.l 16(sp),24(sp)
   18778:	move.l 20(sp),d0
   1877c:	move.l 24(sp),d1
}
   18780:	movem.l (sp)+,d2-d3/a6
   18784:	lea 32(sp),sp
   18788:	rts

0001878a <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   1878a:	lea -32(sp),sp
   1878e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   18792:	move.l 48(sp),36(sp)
   18798:	move.l 52(sp),40(sp)
   1879e:	move.l 56(sp),28(sp)
   187a4:	move.l 60(sp),32(sp)
   187aa:	move.l 1e834 <MathIeeeDoubBasBase>,d0
   187b0:	movea.l d0,a6
   187b2:	move.l 36(sp),d0
   187b6:	move.l 40(sp),d1
   187ba:	move.l 28(sp),d2
   187be:	move.l 32(sp),d3
   187c2:	jsr -84(a6)
   187c6:	move.l d0,12(sp)
   187ca:	move.l d1,16(sp)
   187ce:	move.l 12(sp),20(sp)
   187d4:	move.l 16(sp),24(sp)
   187da:	move.l 20(sp),d0
   187de:	move.l 24(sp),d1
}
   187e2:	movem.l (sp)+,d2-d3/a6
   187e6:	lea 32(sp),sp
   187ea:	rts

000187ec <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   187ec:	lea -12(sp),sp
   187f0:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   187f2:	move.l 20(sp),12(sp)
   187f8:	move.l 24(sp),8(sp)
   187fe:	move.l 1e82c <MathIeeeSingBasBase>,d0
   18804:	movea.l d0,a6
   18806:	move.l 12(sp),d0
   1880a:	move.l 8(sp),d1
   1880e:	jsr -84(a6)
   18812:	move.l d0,4(sp)
   18816:	move.l 4(sp),d0
}
   1881a:	movea.l (sp)+,a6
   1881c:	lea 12(sp),sp
   18820:	rts

00018822 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   18822:	lea -12(sp),sp
   18826:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18828:	move.l 20(sp),12(sp)
   1882e:	move.l 24(sp),8(sp)
   18834:	move.l 1e82c <MathIeeeSingBasBase>,d0
   1883a:	movea.l d0,a6
   1883c:	move.l 12(sp),d0
   18840:	move.l 8(sp),d1
   18844:	jsr -42(a6)
   18848:	move.l d0,4(sp)
   1884c:	move.l 4(sp),d0
}
   18850:	movea.l (sp)+,a6
   18852:	lea 12(sp),sp
   18856:	rts

00018858 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   18858:	lea -20(sp),sp
   1885c:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   1885e:	move.l 28(sp),20(sp)
   18864:	move.l 1e838 <MathIeeeDoubTransBase>,d0
   1886a:	movea.l d0,a6
   1886c:	move.l 20(sp),d0
   18870:	jsr -108(a6)
   18874:	move.l d0,4(sp)
   18878:	move.l d1,8(sp)
   1887c:	move.l 4(sp),12(sp)
   18882:	move.l 8(sp),16(sp)
   18888:	move.l 12(sp),d0
   1888c:	move.l 16(sp),d1
}
   18890:	movea.l (sp)+,a6
   18892:	lea 20(sp),sp
   18896:	rts

00018898 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   18898:	lea -12(sp),sp
   1889c:	move.l a6,-(sp)
	return IEEEDPFix(value);
   1889e:	move.l 20(sp),8(sp)
   188a4:	move.l 24(sp),12(sp)
   188aa:	move.l 1e834 <MathIeeeDoubBasBase>,d0
   188b0:	movea.l d0,a6
   188b2:	move.l 8(sp),d0
   188b6:	move.l 12(sp),d1
   188ba:	jsr -30(a6)
   188be:	move.l d0,4(sp)
   188c2:	move.l 4(sp),d0
}
   188c6:	movea.l (sp)+,a6
   188c8:	lea 12(sp),sp
   188cc:	rts

000188ce <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   188ce:	subq.l #8,sp
   188d0:	move.l a6,-(sp)
	return IEEESPFix(value);
   188d2:	move.l 16(sp),8(sp)
   188d8:	move.l 1e82c <MathIeeeSingBasBase>,d0
   188de:	movea.l d0,a6
   188e0:	move.l 8(sp),d0
   188e4:	jsr -30(a6)
   188e8:	move.l d0,4(sp)
   188ec:	move.l 4(sp),d0
}
   188f0:	movea.l (sp)+,a6
   188f2:	addq.l #8,sp
   188f4:	rts

000188f6 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   188f6:	lea -20(sp),sp
   188fa:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   188fc:	move.l 28(sp),20(sp)
   18902:	move.l 1e834 <MathIeeeDoubBasBase>,d0
   18908:	movea.l d0,a6
   1890a:	move.l 20(sp),d0
   1890e:	jsr -36(a6)
   18912:	move.l d0,4(sp)
   18916:	move.l d1,8(sp)
   1891a:	move.l 4(sp),12(sp)
   18920:	move.l 8(sp),16(sp)
   18926:	move.l 12(sp),d0
   1892a:	move.l 16(sp),d1
}
   1892e:	movea.l (sp)+,a6
   18930:	lea 20(sp),sp
   18934:	rts

00018936 <__floatsisf>:

FLOAT __floatsisf(int i) {
   18936:	subq.l #8,sp
   18938:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1893a:	move.l 16(sp),8(sp)
   18940:	move.l 1e82c <MathIeeeSingBasBase>,d0
   18946:	movea.l d0,a6
   18948:	move.l 8(sp),d0
   1894c:	jsr -36(a6)
   18950:	move.l d0,4(sp)
   18954:	move.l 4(sp),d0
}
   18958:	movea.l (sp)+,a6
   1895a:	addq.l #8,sp
   1895c:	rts

0001895e <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   1895e:	subq.l #8,sp
   18960:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   18962:	move.l 16(sp),8(sp)
   18968:	move.l 1e82c <MathIeeeSingBasBase>,d0
   1896e:	movea.l d0,a6
   18970:	move.l 8(sp),d0
   18974:	jsr -36(a6)
   18978:	move.l d0,4(sp)
   1897c:	move.l 4(sp),d0
}
   18980:	movea.l (sp)+,a6
   18982:	addq.l #8,sp
   18984:	rts

00018986 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   18986:	lea -32(sp),sp
   1898a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   1898e:	move.l 48(sp),36(sp)
   18994:	move.l 52(sp),40(sp)
   1899a:	move.l 56(sp),28(sp)
   189a0:	move.l 60(sp),32(sp)
   189a6:	move.l 1e834 <MathIeeeDoubBasBase>,d0
   189ac:	movea.l d0,a6
   189ae:	move.l 36(sp),d0
   189b2:	move.l 40(sp),d1
   189b6:	move.l 28(sp),d2
   189ba:	move.l 32(sp),d3
   189be:	jsr -78(a6)
   189c2:	move.l d0,12(sp)
   189c6:	move.l d1,16(sp)
   189ca:	move.l 12(sp),20(sp)
   189d0:	move.l 16(sp),24(sp)
   189d6:	move.l 20(sp),d0
   189da:	move.l 24(sp),d1
}
   189de:	movem.l (sp)+,d2-d3/a6
   189e2:	lea 32(sp),sp
   189e6:	rts

000189e8 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   189e8:	lea -12(sp),sp
   189ec:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   189ee:	move.l 20(sp),12(sp)
   189f4:	move.l 24(sp),8(sp)
   189fa:	move.l 1e82c <MathIeeeSingBasBase>,d0
   18a00:	movea.l d0,a6
   18a02:	move.l 12(sp),d0
   18a06:	move.l 8(sp),d1
   18a0a:	jsr -78(a6)
   18a0e:	move.l d0,4(sp)
   18a12:	move.l 4(sp),d0
}
   18a16:	movea.l (sp)+,a6
   18a18:	lea 12(sp),sp
   18a1c:	rts

00018a1e <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   18a1e:	lea -12(sp),sp
   18a22:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18a24:	move.l 20(sp),12(sp)
   18a2a:	move.l 24(sp),8(sp)
   18a30:	move.l 1e82c <MathIeeeSingBasBase>,d0
   18a36:	movea.l d0,a6
   18a38:	move.l 12(sp),d0
   18a3c:	move.l 8(sp),d1
   18a40:	jsr -42(a6)
   18a44:	move.l d0,4(sp)
   18a48:	move.l 4(sp),d0
}
   18a4c:	movea.l (sp)+,a6
   18a4e:	lea 12(sp),sp
   18a52:	rts

00018a54 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   18a54:	lea -20(sp),sp
   18a58:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   18a5c:	move.l 36(sp),24(sp)
   18a62:	move.l 40(sp),28(sp)
   18a68:	move.l 44(sp),16(sp)
   18a6e:	move.l 48(sp),20(sp)
   18a74:	move.l 1e834 <MathIeeeDoubBasBase>,d0
   18a7a:	movea.l d0,a6
   18a7c:	move.l 24(sp),d0
   18a80:	move.l 28(sp),d1
   18a84:	move.l 16(sp),d2
   18a88:	move.l 20(sp),d3
   18a8c:	jsr -42(a6)
   18a90:	move.l d0,12(sp)
   18a94:	move.l 12(sp),d0
}
   18a98:	movem.l (sp)+,d2-d3/a6
   18a9c:	lea 20(sp),sp
   18aa0:	rts

00018aa2 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   18aa2:	lea -12(sp),sp
   18aa6:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18aa8:	move.l 20(sp),12(sp)
   18aae:	move.l 24(sp),8(sp)
   18ab4:	move.l 1e82c <MathIeeeSingBasBase>,d0
   18aba:	movea.l d0,a6
   18abc:	move.l 12(sp),d0
   18ac0:	move.l 8(sp),d1
   18ac4:	jsr -42(a6)
   18ac8:	move.l d0,4(sp)
   18acc:	move.l 4(sp),d0
}
   18ad0:	movea.l (sp)+,a6
   18ad2:	lea 12(sp),sp
   18ad6:	rts

00018ad8 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   18ad8:	lea -12(sp),sp
   18adc:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18ade:	move.l 20(sp),12(sp)
   18ae4:	move.l 24(sp),8(sp)
   18aea:	move.l 1e82c <MathIeeeSingBasBase>,d0
   18af0:	movea.l d0,a6
   18af2:	move.l 12(sp),d0
   18af6:	move.l 8(sp),d1
   18afa:	jsr -42(a6)
   18afe:	move.l d0,4(sp)
   18b02:	move.l 4(sp),d0
}
   18b06:	movea.l (sp)+,a6
   18b08:	lea 12(sp),sp
   18b0c:	rts

00018b0e <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   18b0e:	lea -20(sp),sp
   18b12:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   18b16:	move.l 36(sp),24(sp)
   18b1c:	move.l 40(sp),28(sp)
   18b22:	move.l 44(sp),16(sp)
   18b28:	move.l 48(sp),20(sp)
   18b2e:	move.l 1e834 <MathIeeeDoubBasBase>,d0
   18b34:	movea.l d0,a6
   18b36:	move.l 24(sp),d0
   18b3a:	move.l 28(sp),d1
   18b3e:	move.l 16(sp),d2
   18b42:	move.l 20(sp),d3
   18b46:	jsr -42(a6)
   18b4a:	move.l d0,12(sp)
   18b4e:	move.l 12(sp),d0
}
   18b52:	movem.l (sp)+,d2-d3/a6
   18b56:	lea 20(sp),sp
   18b5a:	rts

00018b5c <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   18b5c:	lea -12(sp),sp
   18b60:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18b62:	move.l 20(sp),12(sp)
   18b68:	move.l 24(sp),8(sp)
   18b6e:	move.l 1e82c <MathIeeeSingBasBase>,d0
   18b74:	movea.l d0,a6
   18b76:	move.l 12(sp),d0
   18b7a:	move.l 8(sp),d1
   18b7e:	jsr -42(a6)
   18b82:	move.l d0,4(sp)
   18b86:	move.l 4(sp),d0
}
   18b8a:	movea.l (sp)+,a6
   18b8c:	lea 12(sp),sp
   18b90:	rts

00018b92 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   18b92:	lea -12(sp),sp
   18b96:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18b98:	move.l 20(sp),12(sp)
   18b9e:	move.l 24(sp),8(sp)
   18ba4:	move.l 1e82c <MathIeeeSingBasBase>,d0
   18baa:	movea.l d0,a6
   18bac:	move.l 12(sp),d0
   18bb0:	move.l 8(sp),d1
   18bb4:	jsr -42(a6)
   18bb8:	move.l d0,4(sp)
   18bbc:	move.l 4(sp),d0
}
   18bc0:	movea.l (sp)+,a6
   18bc2:	lea 12(sp),sp
   18bc6:	rts

00018bc8 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   18bc8:	lea -32(sp),sp
   18bcc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   18bd0:	move.l 48(sp),36(sp)
   18bd6:	move.l 52(sp),40(sp)
   18bdc:	move.l 56(sp),28(sp)
   18be2:	move.l 60(sp),32(sp)
   18be8:	move.l 1e834 <MathIeeeDoubBasBase>,d0
   18bee:	movea.l d0,a6
   18bf0:	move.l 36(sp),d0
   18bf4:	move.l 40(sp),d1
   18bf8:	move.l 28(sp),d2
   18bfc:	move.l 32(sp),d3
   18c00:	jsr -72(a6)
   18c04:	move.l d0,12(sp)
   18c08:	move.l d1,16(sp)
   18c0c:	move.l 12(sp),20(sp)
   18c12:	move.l 16(sp),24(sp)
   18c18:	move.l 20(sp),d0
   18c1c:	move.l 24(sp),d1
}
   18c20:	movem.l (sp)+,d2-d3/a6
   18c24:	lea 32(sp),sp
   18c28:	rts

00018c2a <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   18c2a:	lea -12(sp),sp
   18c2e:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   18c30:	move.l 20(sp),12(sp)
   18c36:	move.l 24(sp),8(sp)
   18c3c:	move.l 1e82c <MathIeeeSingBasBase>,d0
   18c42:	movea.l d0,a6
   18c44:	move.l 12(sp),d0
   18c48:	move.l 8(sp),d1
   18c4c:	jsr -72(a6)
   18c50:	move.l d0,4(sp)
   18c54:	move.l 4(sp),d0
}
   18c58:	movea.l (sp)+,a6
   18c5a:	lea 12(sp),sp
   18c5e:	rts

00018c60 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   18c60:	lea -12(sp),sp
   18c64:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   18c66:	move.l 20(sp),8(sp)
   18c6c:	move.l 24(sp),12(sp)
   18c72:	move.l 1e838 <MathIeeeDoubTransBase>,d0
   18c78:	movea.l d0,a6
   18c7a:	move.l 8(sp),d0
   18c7e:	move.l 12(sp),d1
   18c82:	jsr -102(a6)
   18c86:	move.l d0,4(sp)
   18c8a:	move.l 4(sp),d0
}
   18c8e:	movea.l (sp)+,a6
   18c90:	lea 12(sp),sp
   18c94:	rts

00018c96 <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   18c96:	       lea -24(sp),sp
   18c9a:	       move.l a6,-(sp)
    if (x > 0) {
   18c9c:	       clr.l -(sp)
   18c9e:	       move.l 40(sp),-(sp)
   18ca2:	       jsr 18aa2 <__gtsf2>
   18ca8:	       addq.l #8,sp
   18caa:	       tst.l d0
   18cac:	   ,-- ble.s 18cde <atan2f+0x48>
        return IEEESPAtan(y / x);
   18cae:	   |   move.l 36(sp),-(sp)
   18cb2:	   |   move.l 36(sp),-(sp)
   18cb6:	   |   jsr 187ec <__divsf3>
   18cbc:	   |   addq.l #8,sp
   18cbe:	   |   move.l d0,8(sp)
   18cc2:	   |   move.l 1e830 <MathIeeeSingTransBase>,d0
   18cc8:	   |   movea.l d0,a6
   18cca:	   |   move.l 8(sp),d0
   18cce:	   |   jsr -30(a6)
   18cd2:	   |   move.l d0,4(sp)
   18cd6:	   |   move.l 4(sp),d0
   18cda:	,--|-- bra.w 18e3e <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   18cde:	|  '-> clr.l -(sp)
   18ce0:	|      move.l 40(sp),-(sp)
   18ce4:	|      jsr 18b5c <__ltsf2>
   18cea:	|      addq.l #8,sp
   18cec:	|      tst.l d0
   18cee:	|  ,-- bge.s 18d62 <atan2f+0xcc>
   18cf0:	|  |   clr.l -(sp)
   18cf2:	|  |   move.l 36(sp),-(sp)
   18cf6:	|  |   jsr 18a1e <__gesf2>
   18cfc:	|  |   addq.l #8,sp
   18cfe:	|  |   tst.l d0
   18d00:	|  +-- blt.s 18d62 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   18d02:	|  |   move.l 36(sp),-(sp)
   18d06:	|  |   move.l 36(sp),-(sp)
   18d0a:	|  |   jsr 187ec <__divsf3>
   18d10:	|  |   addq.l #8,sp
   18d12:	|  |   move.l d0,24(sp)
   18d16:	|  |   move.l 1e830 <MathIeeeSingTransBase>,d0
   18d1c:	|  |   movea.l d0,a6
   18d1e:	|  |   move.l 24(sp),d0
   18d22:	|  |   jsr -30(a6)
   18d26:	|  |   move.l d0,20(sp)
   18d2a:	|  |   move.l 20(sp),d0
   18d2e:	|  |   move.l d0,-(sp)
   18d30:	|  |   jsr 18858 <__extendsfdf2>
   18d36:	|  |   addq.l #4,sp
   18d38:	|  |   move.l #1413754136,-(sp)
   18d3e:	|  |   move.l #1074340347,-(sp)
   18d44:	|  |   move.l d1,-(sp)
   18d46:	|  |   move.l d0,-(sp)
   18d48:	|  |   jsr 18728 <__adddf3>
   18d4e:	|  |   lea 16(sp),sp
   18d52:	|  |   move.l d1,-(sp)
   18d54:	|  |   move.l d0,-(sp)
   18d56:	|  |   jsr 18c60 <__truncdfsf2>
   18d5c:	|  |   addq.l #8,sp
   18d5e:	+--|-- bra.w 18e3e <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   18d62:	|  '-> clr.l -(sp)
   18d64:	|      move.l 40(sp),-(sp)
   18d68:	|      jsr 18b5c <__ltsf2>
   18d6e:	|      addq.l #8,sp
   18d70:	|      tst.l d0
   18d72:	|  ,-- bge.s 18de4 <atan2f+0x14e>
   18d74:	|  |   clr.l -(sp)
   18d76:	|  |   move.l 36(sp),-(sp)
   18d7a:	|  |   jsr 18b5c <__ltsf2>
   18d80:	|  |   addq.l #8,sp
   18d82:	|  |   tst.l d0
   18d84:	|  +-- bge.s 18de4 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   18d86:	|  |   move.l 36(sp),-(sp)
   18d8a:	|  |   move.l 36(sp),-(sp)
   18d8e:	|  |   jsr 187ec <__divsf3>
   18d94:	|  |   addq.l #8,sp
   18d96:	|  |   move.l d0,16(sp)
   18d9a:	|  |   move.l 1e830 <MathIeeeSingTransBase>,d0
   18da0:	|  |   movea.l d0,a6
   18da2:	|  |   move.l 16(sp),d0
   18da6:	|  |   jsr -30(a6)
   18daa:	|  |   move.l d0,12(sp)
   18dae:	|  |   move.l 12(sp),d0
   18db2:	|  |   move.l d0,-(sp)
   18db4:	|  |   jsr 18858 <__extendsfdf2>
   18dba:	|  |   addq.l #4,sp
   18dbc:	|  |   move.l #1413754136,-(sp)
   18dc2:	|  |   move.l #1074340347,-(sp)
   18dc8:	|  |   move.l d1,-(sp)
   18dca:	|  |   move.l d0,-(sp)
   18dcc:	|  |   jsr 18bc8 <__subdf3>
   18dd2:	|  |   lea 16(sp),sp
   18dd6:	|  |   move.l d1,-(sp)
   18dd8:	|  |   move.l d0,-(sp)
   18dda:	|  |   jsr 18c60 <__truncdfsf2>
   18de0:	|  |   addq.l #8,sp
   18de2:	+--|-- bra.s 18e3e <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   18de4:	|  '-> clr.l -(sp)
   18de6:	|      move.l 40(sp),-(sp)
   18dea:	|      jsr 18822 <__eqsf2>
   18df0:	|      addq.l #8,sp
   18df2:	|      tst.l d0
   18df4:	|  ,-- bne.s 18e10 <atan2f+0x17a>
   18df6:	|  |   clr.l -(sp)
   18df8:	|  |   move.l 36(sp),-(sp)
   18dfc:	|  |   jsr 18aa2 <__gtsf2>
   18e02:	|  |   addq.l #8,sp
   18e04:	|  |   tst.l d0
   18e06:	|  +-- ble.s 18e10 <atan2f+0x17a>
        return PI / 2;
   18e08:	|  |   move.l #1070141403,d0
   18e0e:	+--|-- bra.s 18e3e <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   18e10:	|  '-> clr.l -(sp)
   18e12:	|      move.l 40(sp),-(sp)
   18e16:	|      jsr 18822 <__eqsf2>
   18e1c:	|      addq.l #8,sp
   18e1e:	|      tst.l d0
   18e20:	|  ,-- bne.s 18e3c <atan2f+0x1a6>
   18e22:	|  |   clr.l -(sp)
   18e24:	|  |   move.l 36(sp),-(sp)
   18e28:	|  |   jsr 18b5c <__ltsf2>
   18e2e:	|  |   addq.l #8,sp
   18e30:	|  |   tst.l d0
   18e32:	|  +-- bge.s 18e3c <atan2f+0x1a6>
        return -PI / 2;
   18e34:	|  |   move.l #-1077342245,d0
   18e3a:	+--|-- bra.s 18e3e <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   18e3c:	|  '-> moveq #0,d0
    }
}
   18e3e:	'----> movea.l (sp)+,a6
   18e40:	       lea 24(sp),sp
   18e44:	       rts

00018e46 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   18e46:	lea -24(sp),sp
   18e4a:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   18e4c:	move.l 32(sp),20(sp)
   18e52:	move.l 36(sp),24(sp)
   18e58:	move.l 1e838 <MathIeeeDoubTransBase>,d0
   18e5e:	movea.l d0,a6
   18e60:	move.l 20(sp),d0
   18e64:	move.l 24(sp),d1
   18e68:	jsr -96(a6)
   18e6c:	move.l d0,4(sp)
   18e70:	move.l d1,8(sp)
   18e74:	move.l 4(sp),12(sp)
   18e7a:	move.l 8(sp),16(sp)
   18e80:	move.l 12(sp),d0
   18e84:	move.l 16(sp),d1
}
   18e88:	movea.l (sp)+,a6
   18e8a:	lea 24(sp),sp
   18e8e:	rts

00018e90 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   18e90:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   18e94:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   18e98:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   18e9c:	mulu.w 8(sp),d1
	addw	d1, d0
   18ea0:	add.w d1,d0
	swap	d0
   18ea2:	swap d0
	clrw	d0
   18ea4:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   18ea6:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   18eaa:	mulu.w 10(sp),d1
	addl	d1, d0
   18eae:	add.l d1,d0
	rts
   18eb0:	rts

00018eb2 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   18eb2:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   18eb4:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   18eb8:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   18ebc:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   18ec2:	   ,-- bcc.s 18eda <__udivsi3+0x28>
	movel	d0, d2
   18ec4:	   |   move.l d0,d2
	clrw	d2
   18ec6:	   |   clr.w d2
	swap	d2
   18ec8:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   18eca:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   18ecc:	   |   move.w d2,d0
	swap	d0
   18ece:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   18ed0:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   18ed4:	   |   divu.w d1,d2
	movew	d2, d0
   18ed6:	   |   move.w d2,d0
	jra	6f
   18ed8:	,--|-- bra.s 18f0a <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   18eda:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   18edc:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   18ede:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   18ee0:	|  |   cmpi.l #65536,d1
	jcc	4b
   18ee6:	|  '-- bcc.s 18edc <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   18ee8:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   18eea:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   18ef0:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   18ef2:	|      mulu.w d0,d1
	swap	d2
   18ef4:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   18ef6:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   18ef8:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   18efa:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   18efc:	|  ,-- bne.s 18f08 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   18efe:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   18f00:	|  +-- bcs.s 18f08 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   18f02:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   18f06:	+--|-- bls.s 18f0a <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   18f08:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   18f0a:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   18f0c:	       rts

00018f0e <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   18f0e:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   18f10:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   18f12:	    move.l 12(sp),d1
	jpl	1f
   18f16:	,-- bpl.s 18f1c <__divsi3+0xe>
	negl	d1
   18f18:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   18f1a:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   18f1c:	'-> move.l 8(sp),d0
	jpl	2f
   18f20:	,-- bpl.s 18f26 <__divsi3+0x18>
	negl	d0
   18f22:	|   neg.l d0
	negb	d2
   18f24:	|   neg.b d2

2:	movel	d1, sp@-
   18f26:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18f28:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   18f2a:	    jsr 18eb2 <__udivsi3>
	addql	#8, sp
   18f30:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   18f32:	    tst.b d2
	jpl	3f
   18f34:	,-- bpl.s 18f38 <__divsi3+0x2a>
	negl	d0
   18f36:	|   neg.l d0

3:	movel	sp@+, d2
   18f38:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   18f3a:	    rts

00018f3c <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   18f3c:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   18f40:	move.l 4(sp),d0
	movel	d1, sp@-
   18f44:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18f46:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   18f48:	jsr 18f0e <__divsi3>
	addql	#8, sp
   18f4e:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   18f50:	move.l 8(sp),d1
	movel	d1, sp@-
   18f54:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18f56:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   18f58:	jsr 18e90 <__mulsi3>
	addql	#8, sp
   18f5e:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   18f60:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   18f64:	sub.l d0,d1
	movel	d1, d0
   18f66:	move.l d1,d0
	rts
   18f68:	rts

00018f6a <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   18f6a:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   18f6e:	move.l 4(sp),d0
	movel	d1, sp@-
   18f72:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18f74:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   18f76:	jsr 18eb2 <__udivsi3>
	addql	#8, sp
   18f7c:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   18f7e:	move.l 8(sp),d1
	movel	d1, sp@-
   18f82:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18f84:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   18f86:	jsr 18e90 <__mulsi3>
	addql	#8, sp
   18f8c:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   18f8e:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   18f92:	sub.l d0,d1
	movel	d1, d0
   18f94:	move.l d1,d0
	rts
   18f96:	rts

00018f98 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   18f98:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   18f9a:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   18f9e:	jsr -516(a6)
    move.l (sp)+, a6
   18fa2:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   18fa4:	rts

00018fa6 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   18fa6:	move.b d0,(a3)+
	rts
   18fa8:	rts
